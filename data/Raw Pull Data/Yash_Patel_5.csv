pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
669058752,feat: migration from v2 to v3,"Changes included on PR

- [X] Migration from [V2 to V3](https://www.gatsbyjs.com/docs/reference/release-notes/migrating-from-v2-to-v3/)
- [X] Update Gatsby related packages
- [X] Removed image quires sizes, fluid, fixed which was removed from V3
- [X] Migrated from gatsby-image to [gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide/) to fix the issues related to images that occurred during version migration
- [X] Named all components which was directly exported 
```
eg: export default () =>{}  ->  const card = () => {}
```
",True,54,https://api.github.com/repos/MovingBlocks/movingblocks.github.com/pulls/54,https://github.com/MovingBlocks/movingblocks.github.com/pull/54,closed,29834,3600,23,1,1,0,0,0,[],2021-06-13 14:03:38+00:00,2021-06-18 16:00:58+00:00,439040.0,"5 days, 1:57:20",[],"[{'commit_sha': 'b048a14d282f6595fededcfd7caa78231e22260b', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Yash Patel,49101492,,User,,86,,0,1
672247603,feat: Deployment pipeline,"This PR introduces the deployment Jenkins pipeline to deploy the ModuleSite on Github pages, installing the requirements on different stages of the pipeline and checking for  [CNAME](https://en.wikipedia.org/wiki/CNAME_record) and pushing builds to the different repository to deploy ModuleSIte

Deployment Diagram:
![image](https://user-images.githubusercontent.com/49101492/122339969-5338b480-cf5f-11eb-8419-b66901e992dd.png)
",False,55,https://api.github.com/repos/MovingBlocks/movingblocks.github.com/pulls/55,https://github.com/MovingBlocks/movingblocks.github.com/pull/55,closed,64,0,2,3,0,0,0,0,[],2021-06-17 06:00:08+00:00,2021-06-22 05:55:15+00:00,431707.0,"4 days, 23:55:07",[],"[{'commit_sha': '577bc3e8a10f9339e9b50ec1f627c3a6470d0f20', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'c8647c240112d83df9e40e6a894b9c2eeb80ca4b', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '7278a56204cb2dea951cd173c709bfa04e72920c', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Yash Patel,49101492,,User,,86,,0,1
673334790,feat: module generation pipeline,"https://github.com/MovingBlocks/ModuleSite/issues/43 Module Generation pipeline

Diagram:
![image](https://user-images.githubusercontent.com/49101492/122543418-63c55980-d049-11eb-8b44-0e223b5bfdef.png)
",True,57,https://api.github.com/repos/MovingBlocks/movingblocks.github.com/pulls/57,https://github.com/MovingBlocks/movingblocks.github.com/pull/57,closed,208,0,7,35,0,123,0,0,[],2021-06-18 09:55:54+00:00,2021-07-27 20:18:01+00:00,3406927.0,"39 days, 10:22:07","[{'comment_id': 654322420, 'comment_body': ""Why do we need to write this to a file and then read and process it from there.\r\nI don't think this is necessary and you can parse the response directly."", 'comment_created': datetime.datetime(2021, 6, 18, 10, 28, 17, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 654323419, 'comment_body': ""I'd propose to directly try to get contents of `module.txt` here and properly handle the error that will be thrown if the file does not exist."", 'comment_created': datetime.datetime(2021, 6, 18, 10, 29, 58, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 654323871, 'comment_body': ""as discussed in the last meeting: stick with one and fall back to a default text if that's not present\r\nno need to overcomplicate things here."", 'comment_created': datetime.datetime(2021, 6, 18, 10, 30, 44, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 654324765, 'comment_body': ""Why? I generally noticed, that there's a lot of style issues in your PRs such as incorrect indentation, mixed intendations using spaces or tabs, unnecessary empty lines, etc. I recommend the use of an IDE and its formatting options. For instance, for intellij, you can use Ctrl+Alt+L to format files."", 'comment_created': datetime.datetime(2021, 6, 18, 10, 32, 10, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 654326888, 'comment_body': 'Why go the detour over an additional variable if you can already collect the tags above?', 'comment_created': datetime.datetime(2021, 6, 18, 10, 36, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 654492285, 'comment_body': ""Utilize python's inbuilt `capitalize()` method here to avoid multiple `if` conditions."", 'comment_created': datetime.datetime(2021, 6, 18, 14, 49, 44, tzinfo=datetime.timezone.utc), 'commenter': 'majordwarf', 'type': 'User'}, {'comment_id': 654492890, 'comment_body': ""Setup ES Lint or Prettier on your VS Code, that'll help to avoid such situations."", 'comment_created': datetime.datetime(2021, 6, 18, 14, 50, 30, tzinfo=datetime.timezone.utc), 'commenter': 'majordwarf', 'type': 'User'}, {'comment_id': 654768259, 'comment_body': 'Did that during frontmatter generation (frontmatter.py line no 93 to 97)', 'comment_created': datetime.datetime(2021, 6, 19, 8, 34, 52, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 654778263, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 19, 10, 15, 55, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 654779480, 'comment_body': 'Done ', 'comment_created': datetime.datetime(2021, 6, 19, 10, 29, 11, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 654780379, 'comment_body': 'This check is for the safer side, If modules.txt does not exist, just exit and it is not a module, I think directly getting content will make code look a bit complicated, If module.txt is not present it will return some error or null and that will require the try-catch block to handle it', 'comment_created': datetime.datetime(2021, 6, 19, 10, 38, 10, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 654940936, 'comment_body': ""not sure if I'm missing something here, but do we expect `parseData['isGameplay']` to fail if directly before we checked that `isGameplay` is in `parseData`? :thinking: "", 'comment_created': datetime.datetime(2021, 6, 20, 14, 6, 26, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 654941520, 'comment_body': 'why not do a ""-1"" in the `range` above instead?', 'comment_created': datetime.datetime(2021, 6, 20, 14, 10, 47, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 654941809, 'comment_body': 'as discussed in yesterday\'s meeting, there\'s no need to loop through everything here.\r\njust do a single `get_contents` for each of ""module.txt"", ""README.md"" and the banner and be sure to log it if any of those fails.', 'comment_created': datetime.datetime(2021, 6, 20, 14, 13, 5, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 654942118, 'comment_body': 'nitpick: typically the loop variable is named the singular while what it\'s looping through is called the plural version of whatever the subject is, i.e. in your case ""folders""', 'comment_created': datetime.datetime(2021, 6, 20, 14, 15, 36, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 654942176, 'comment_body': '""yes""?', 'comment_created': datetime.datetime(2021, 6, 20, 14, 16, 1, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 654942344, 'comment_body': ""what if there's no logo available? did I overlook the `else` path?"", 'comment_created': datetime.datetime(2021, 6, 20, 14, 17, 37, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 654942544, 'comment_body': 'maybe we can find a better default for this. could be something along the lines of ""XYZ is a (could add the first tag here or so) module for Terasology.""', 'comment_created': datetime.datetime(2021, 6, 20, 14, 19, 26, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 654974185, 'comment_body': 'done changes\r\n', 'comment_created': datetime.datetime(2021, 6, 20, 18, 48, 46, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 654974230, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 20, 18, 49, 3, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 654975530, 'comment_body': 'This is just a small check, handled on scrape.py\r\n', 'comment_created': datetime.datetime(2021, 6, 20, 19, 1, 46, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 654976586, 'comment_body': ""we have to check for that because module.txt doesn't have all the keys , if the key is not present how it will parse data from module.txt, so first I have to check for the keys are present or not , if yes then parse data else nothing"", 'comment_created': datetime.datetime(2021, 6, 20, 19, 11, 39, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 655626394, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 6, 21, 18, 51, 23, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 655626466, 'comment_body': 'removed', 'comment_created': datetime.datetime(2021, 6, 21, 18, 51, 31, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 655627664, 'comment_body': ""Can you provide a text of 3 to 4 lines so that our cards description don't look empty"", 'comment_created': datetime.datetime(2021, 6, 21, 18, 53, 28, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 659358723, 'comment_body': 'In declarative Jenkinsfile syntax, you do not need to use try/catch, but rather ""post"" (see https://www.jenkins.io/doc/book/pipeline/jenkinsfile/#handling-failure)', 'comment_created': datetime.datetime(2021, 6, 27, 18, 24, 29, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 659359483, 'comment_body': 'You do not need all this.\r\nThe exit status on running `diff` is sufficient to tell whether things are different or not.\r\n\r\nFrom the manpage: ""Exit status is 0 if inputs are the same, 1 if different, 2 if trouble.""', 'comment_created': datetime.datetime(2021, 6, 27, 18, 31, 53, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 659360359, 'comment_body': 'then at least provide a comment here, that explains this.', 'comment_created': datetime.datetime(2021, 6, 27, 18, 39, 47, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 664130083, 'comment_body': ""I wonder if it would make more sense to do the following:\r\n- loop through the content lines\r\n- use `startswith()` to identify the right one\r\n- get the index for the `=`\r\n- get the slice starting after that index\r\n- split on ','"", 'comment_created': datetime.datetime(2021, 7, 5, 21, 21, 28, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 664130360, 'comment_body': 'Does this start with a capital letter on purpose?', 'comment_created': datetime.datetime(2021, 7, 5, 21, 22, 24, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 664130420, 'comment_body': 'Does this start with a capital letter on purpose?', 'comment_created': datetime.datetime(2021, 7, 5, 21, 22, 40, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 664130460, 'comment_body': 'see above', 'comment_created': datetime.datetime(2021, 7, 5, 21, 22, 53, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 664130684, 'comment_body': 'Should we return in this case here?', 'comment_created': datetime.datetime(2021, 7, 5, 21, 24, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 664136163, 'comment_body': 'If you want to do this here I\'d argue to also do something similar for the readme here.\r\nOtherwise you\'ll have two different places (scripts) in which you\'re handling the ""fallback"" for readme or banner not being present', 'comment_created': datetime.datetime(2021, 7, 5, 21, 49, 18, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 664136503, 'comment_body': '```suggestion\r\nIndexDir = ""./scrape-data/""\r\n```', 'comment_created': datetime.datetime(2021, 7, 5, 21, 51, 4, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 664136562, 'comment_body': '```suggestion\r\nfor moduleDir in os.listdir(DIR):\r\n```', 'comment_created': datetime.datetime(2021, 7, 5, 21, 51, 18, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 664136840, 'comment_body': 'can you make the variable names a bit more specific?', 'comment_created': datetime.datetime(2021, 7, 5, 21, 52, 10, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 664136905, 'comment_body': '```suggestion\r\n    # check for module.txt to get information about module\r\n```', 'comment_created': datetime.datetime(2021, 7, 5, 21, 52, 28, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 664137652, 'comment_body': ""I wonder whether we actually need this check. If there is no `module.txt` for a module the scrape stage shouldn't have created a directory for that module anyway, shouldn't it? And the following steps should probably be in a try-catch anyway so you could also just assume the file is there and catch the respective error if it's not :thinking: "", 'comment_created': datetime.datetime(2021, 7, 5, 21, 55, 43, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 664138201, 'comment_body': ""I'd move this up to where you define `moduleFile`"", 'comment_created': datetime.datetime(2021, 7, 5, 21, 58, 24, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 664138840, 'comment_body': ""Why do you statically use the fallback banner here?\r\nFor one, you're currently handling the case in which no banner is present already on scrape and copy the default banner, right? And secondly, even if you didn't, shouldn't you first check whether there is a banner present in the scrape result?"", 'comment_created': datetime.datetime(2021, 7, 5, 22, 1, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 664139269, 'comment_body': 'Do you ever close this?\r\nYou could consider using `with open() as indexMd:`, thus as soon as you exit that scope, the file will be closed.', 'comment_created': datetime.datetime(2021, 7, 5, 22, 2, 59, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 664143656, 'comment_body': 'what is this expression supposed to achieve?', 'comment_created': datetime.datetime(2021, 7, 5, 22, 26, 26, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 664144181, 'comment_body': ""I don't fully understand what the intention behind this piece of logic is, can you please explain what you want to achieve here?"", 'comment_created': datetime.datetime(2021, 7, 5, 22, 29, 13, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 664144316, 'comment_body': 'this seems less like ""loading"" modules, but rather like ""uploading"" them :thinking: ', 'comment_created': datetime.datetime(2021, 7, 5, 22, 30, 11, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 665636736, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 7, 19, 6, 15, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 665642472, 'comment_body': 'Can you explain a bit more like what to return , we do not have any function here to return something', 'comment_created': datetime.datetime(2021, 7, 7, 19, 15, 40, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 665648854, 'comment_body': 'We don\'t have to do this for Readme, in the case of the image we are creating a default image because we don\'t want our Module cove image to be empty, in the case of readme we are appending content of readme in ""index. MD"" and I\'m doing safe check-in frontmatter for readme, if it does not found readme it will append some text, you can check line no 67 to 71 in ""frontmatter.py""', 'comment_created': datetime.datetime(2021, 7, 7, 19, 26, 43, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 665678139, 'comment_body': 'done\r\n', 'comment_created': datetime.datetime(2021, 7, 7, 20, 16, 37, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 665678208, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 7, 20, 16, 44, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 665678352, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 7, 20, 17, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 665681103, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 7, 20, 21, 37, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 665682201, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2021, 7, 7, 20, 23, 32, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 665682826, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 7, 20, 24, 39, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 665688274, 'comment_body': 'So, after scraping and getting our all module data, I try to copy the last successful build that is stored in the artifact, and the ""archive()"" function check is there any change between the last successful build and module data inside ""./module"" , if it finds any changes it creates a new artifact of current build, if not then we print ""no changes in modules"". if we don\'t found any last successful build or it is the first build we just create artifact of current build', 'comment_created': datetime.datetime(2021, 7, 7, 20, 34, 14, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 665689300, 'comment_body': 'it will clone ModuleSite and discard the old modules and load new modules and create PR to ModuleSite', 'comment_created': datetime.datetime(2021, 7, 7, 20, 35, 56, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 665689814, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 7, 20, 36, 49, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 665689963, 'comment_body': '> Why is the Jenkinsfile in here twice?\r\n\r\nremoved', 'comment_created': datetime.datetime(2021, 7, 7, 20, 37, 6, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 667538756, 'comment_body': ""```suggestion\r\n        stage('load data') {\r\n```"", 'comment_created': datetime.datetime(2021, 7, 11, 21, 37, 30, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667539003, 'comment_body': '```suggestion\r\nThe automation focuses on gathering information about modules listed as part of the `omega` distro in the [Index repository](https://github.com/Terasology/Index/blob/master/distros/omega/gradle.properties) and exhibit the generated information on the [ModuleSite](https://github.com/MovingBlocks/ModuleSite).\r\nBoth steps are performed in a [Jenkins pipeline](https://www.jenkins.io/doc/book/pipeline/).\r\n```', 'comment_created': datetime.datetime(2021, 7, 11, 21, 40, 9, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667539539, 'comment_body': '```suggestion\r\nThe pipeline will be run periodically as a cron job, so that the ModuleSite is up-to-date with any changes in module information.\r\n```', 'comment_created': datetime.datetime(2021, 7, 11, 21, 44, 56, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667540093, 'comment_body': '```suggestion\r\nAt the starting stage of the pipeline, the ""scrape"" script sends API calls to GitHub to fetch all required information from the Index repository, i.e. `module.txt`, and optionally the `README.md` and a cover image.\r\nIf `README.md` or the cover image are not available. we will fallback to a default image and a default readme text.\r\nAfterwards, the ""frontmatter"" script prepares the collected information for display on the ModuleSite.\r\n```', 'comment_created': datetime.datetime(2021, 7, 11, 21, 50, 22, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667540136, 'comment_body': 'This is not up-to-date anymore.', 'comment_created': datetime.datetime(2021, 7, 11, 21, 50, 51, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667540246, 'comment_body': '```suggestion\r\nscrapeDataDir = ""./scrape-data/""\r\n```', 'comment_created': datetime.datetime(2021, 7, 11, 21, 52, 3, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667540731, 'comment_body': '1. `getModuledata` is a weird name for a file object :thinking: \r\n2. do you close this somewhere again?\r\n3. consider using `with open([...]) as moduleMetadataFile:`', 'comment_created': datetime.datetime(2021, 7, 11, 21, 57, 23, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667540765, 'comment_body': '```suggestion\r\n    moduleMetadata = getModuledata.read()\r\n```', 'comment_created': datetime.datetime(2021, 7, 11, 21, 57, 44, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667540849, 'comment_body': ""the parsing is not really done yet, so this is not really parsed data yet. it's still the same data, only loaded as json..."", 'comment_created': datetime.datetime(2021, 7, 11, 21, 58, 31, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667540970, 'comment_body': ""I'd also recommend to use the `with open` here and two lines below. thus, you don't have to manually take care you close them, but python does this automagically once you leave the inner scope"", 'comment_created': datetime.datetime(2021, 7, 11, 22, 0, 11, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667541146, 'comment_body': 'this name is a bit ambiguous wrt the `Index` module', 'comment_created': datetime.datetime(2021, 7, 11, 22, 1, 33, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667541168, 'comment_body': 'this is the whole content, not only the modules', 'comment_created': datetime.datetime(2021, 7, 11, 22, 1, 58, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667541304, 'comment_body': '`getModules` is a good name for a method, but not for a variable', 'comment_created': datetime.datetime(2021, 7, 11, 22, 2, 58, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667541359, 'comment_body': '```suggestion\r\n        modules=line[13:].split("","")\r\n```', 'comment_created': datetime.datetime(2021, 7, 11, 22, 3, 29, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667541415, 'comment_body': 'what exactly do you need this condition for?', 'comment_created': datetime.datetime(2021, 7, 11, 22, 4, 1, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667541430, 'comment_body': '```suggestion\r\nfor module in modules:\r\n```', 'comment_created': datetime.datetime(2021, 7, 11, 22, 4, 16, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667541436, 'comment_body': '```suggestion\r\n        repository=user.get_repo(module)\r\n```', 'comment_created': datetime.datetime(2021, 7, 11, 22, 4, 32, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667541658, 'comment_body': 'again, those are good names for methods, but not for variables.\r\nmethod names are typically actions that indicate what is done in the method.\r\nvariable names should be passive descriptions of what information they store.', 'comment_created': datetime.datetime(2021, 7, 11, 22, 6, 51, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667542142, 'comment_body': 'the readme not being there is not the only error that can occur and lead into the `except` case... I\'d propose to go for ""Couldn\'t fetch README.md"" here and also print the error.', 'comment_created': datetime.datetime(2021, 7, 11, 22, 10, 44, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667542215, 'comment_body': 'Did you want to replace this with the default text I wrote for you?', 'comment_created': datetime.datetime(2021, 7, 11, 22, 11, 33, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667542260, 'comment_body': '```suggestion\r\n\r\n```', 'comment_created': datetime.datetime(2021, 7, 11, 22, 11, 48, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669003350, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 13, 18, 15, 36, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669003421, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 13, 18, 15, 42, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669003483, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 13, 18, 15, 47, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669003569, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 13, 18, 15, 54, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669003698, 'comment_body': 'changed', 'comment_created': datetime.datetime(2021, 7, 13, 18, 16, 5, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669003821, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 13, 18, 16, 15, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669003888, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 13, 18, 16, 22, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669003986, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 13, 18, 16, 28, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669004127, 'comment_body': 'done ', 'comment_created': datetime.datetime(2021, 7, 13, 18, 16, 41, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669004280, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 13, 18, 16, 54, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669004336, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 13, 18, 17, 1, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669004465, 'comment_body': 'done changes', 'comment_created': datetime.datetime(2021, 7, 13, 18, 17, 14, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669004581, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 13, 18, 17, 24, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669004739, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 13, 18, 17, 37, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669005952, 'comment_body': ""oh, I forgot to remove that, I don't have an access token so I test it for 2 to 3 modules so that  I do not exceed the limit of api calls,Removed"", 'comment_created': datetime.datetime(2021, 7, 13, 18, 19, 40, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669006009, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 13, 18, 19, 46, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669006067, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 13, 18, 19, 52, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669006151, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 13, 18, 20, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669006248, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 13, 18, 20, 8, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669006413, 'comment_body': 'yes, replaced', 'comment_created': datetime.datetime(2021, 7, 13, 18, 20, 21, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669006520, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 13, 18, 20, 28, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669019341, 'comment_body': '```suggestion\r\nThe automation focuses on gathering information about modules listed as part of the `omega` distro in the [Index repository](https://github.com/Terasology/Index/blob/master/distros/omega/gradle.properties) and exhibits the generated information on the [ModuleSite](https://github.com/MovingBlocks/ModuleSite).\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 18, 40, 5, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669026312, 'comment_body': '```suggestion\r\nIf `README.md` or the cover image are not available, we will fallback to a default image and a default readme text.\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 18, 50, 50, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669026559, 'comment_body': '```suggestion\r\n## Loading Modules\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 18, 51, 12, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669027001, 'comment_body': '```suggestion\r\nThis stage simply clones the ModuleSite, copies the modules directory into the cloned ModuleSite and performs git operations to push the changes. All of these actions are performed by `loadModules.sh`.\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 18, 51, 51, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669027159, 'comment_body': ""```suggestion\r\nAt last, the workspace is cleared so that we don't run into errors next time when the pipeline is executed. The same process is repeated periodically.\r\n```"", 'comment_created': datetime.datetime(2021, 7, 13, 18, 52, 6, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669027668, 'comment_body': '```suggestion\r\n        module = json.loads(moduleMetadata)\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 18, 52, 52, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669028565, 'comment_body': '```suggestion\r\n            with open(moduleDst+moduleName+""/cover.png"", mode=""rb"") as imageFile:\r\n                imageFile.write(readSourceImage)\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 18, 54, 19, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669029054, 'comment_body': '```suggestion\r\n        with open(moduleReadme, mode=""r"") as readmeData:\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 18, 55, 5, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669029638, 'comment_body': 'You are still not closing this file object and I still recommend to use `with open` here too.', 'comment_created': datetime.datetime(2021, 7, 13, 18, 56, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669029798, 'comment_body': '```suggestion\r\n        print(e)\r\n\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 18, 56, 13, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669031454, 'comment_body': '```suggestion\r\ngit clone https://github.com/MovingBlocks/ModuleSite.git $MODULEDIR/ModuleSite\r\npushd $MODULEDIR/ModuleSite\r\nrm -R modules\r\npopd\r\ncp -r $MODULES $MODULEDIR/ModuleSite\r\ncd $MODULEDIR/ModuleSite\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 18, 58, 46, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669032253, 'comment_body': 'Why do we need to force-push here?', 'comment_created': datetime.datetime(2021, 7, 13, 19, 0, 3, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669032587, 'comment_body': '```suggestion\r\ngit commit -m ""chore: update module information""\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 19, 0, 36, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669033111, 'comment_body': '```suggestion\r\ncurl -i -H ""Authorization: token $GIT_CREDS"" -X POST ""https://api.github.com/repos/MovingBlocks/ModuleSite/pulls"" -d \'{ ""title"": ""chore: automated update of module information"",\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 19, 1, 22, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669033381, 'comment_body': '```suggestion\r\n ""body"": ""Module information collected and generated using Jenkins pipeline""}\'\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 19, 1, 46, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669033726, 'comment_body': '`indexModules` is still ambiguous, please name it differently', 'comment_created': datetime.datetime(2021, 7, 13, 19, 2, 17, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669034646, 'comment_body': '`decodeModuleContent` is not a reasonable variable name (see my recent comment on method vs variable names)', 'comment_created': datetime.datetime(2021, 7, 13, 19, 3, 52, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669035079, 'comment_body': '```suggestion\r\n        moduleData = json.loads(decodeModuleContent)\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 19, 4, 33, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669035722, 'comment_body': '```suggestion\r\n        print(""Couldn\'t fetch README.md"" + moduleName + "": "" + e)\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 19, 5, 41, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669035985, 'comment_body': 'please also print the caught exception here', 'comment_created': datetime.datetime(2021, 7, 13, 19, 6, 5, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669036258, 'comment_body': 'please also print, why (e.g. response code)', 'comment_created': datetime.datetime(2021, 7, 13, 19, 6, 36, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669036333, 'comment_body': '```suggestion\r\n            defaultImageFile.write(readSourceImage)\r\n\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 19, 6, 46, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 671701163, 'comment_body': '```suggestion\r\n        print(""Couldn\'t fetch cover image on "" + moduleName +"", error code: ""+ response.status_code + "", resolving with default cover image"")\r\n```', 'comment_created': datetime.datetime(2021, 7, 17, 14, 1, 48, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}]","[{'commit_sha': '1fe10c805a770d141ae1310ec89b3cfd5d888ad2', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '57e77b90638b2c6ad78651240afc7804adf658e1', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '7ddfe3b4798a2b5f3d69acb8e5e482fbb6c04e2e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'db149cf914a40d0f23ddc257b3d08d9249d66515', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'd84f55ce5a96af6a8377f43d1729156d2cbe4bda', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '12d6526d30658ad3607c40746df1663890b25cb4', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '402fb5353a48be71d0b60c4c3d147960cd6862b0', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '4ca7316d381771eaa90ce218cbedb237599edc08', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '3f956a214e6219b1214134a3823fcdbe1ca2d116', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '9cd809c72752ac2a0248b8ade81efaf25d255fba', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '1fd1229cd39e66535fa125bc81ff05ec24de04dd', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'fb435d0bc6eca7e52a768c308825d640ff3cf362', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'dc73458d3941eb02678800397e651cbd59c2969c', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'f7d7234ab1102926e463e17c3c72ed1ffe371dfa', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '608855a210c2528dd3381abb685bf523fb110864', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '4d37b3e1fd062a4ce50e88888439bcf70a200c04', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '003b9b8bd5be10917cb67bbb75b142110dbcf0bb', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '63fe545f8d5fb0103b94798b37769b021ab663a0', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '169e85df4a41b89b21e810fbe3a4605f70329d23', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '2a4b82f798c9df5389384eeed906f1b060fdf5d3', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '9f78014768b8e5149f570607cbfd51cfa0df09dc', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'be67cd992c19d3cade963f66c5d5a44e697603fb', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '8e34fb243b139da648dc5734bd71c3ced458b9e9', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'e8087ccc06a42eaa7a52b7b872cbf30e23a36ba3', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'f36ba1b1760c90fbd60332de09ddccc21d80020a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '07a430997147964fd62b6498bb138c9078c90f67', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '0c47a39123883f8dc52d0e37934f39b546a36543', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a2495b323079b44cd33c6bb565cc293f56f9faeb', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '59eb1c1952f62f0223df5a8295a17184eadf8894', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '3e7145169c073153ca2483f855720cd0c57e67ac', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'dab15f52b06ff159d695972156a74ffbdf0be882', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '08866c7faff51bcbe606c9823ba2d92621759bfd', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a5b3733f7969c526538fd4cdec132e5c4e98df1f', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'af313903a9b329fd32b4b20cbecebbbb8b7a2b47', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'acbbd88f277c9e0a738afa9601f49674f5942657', 'committer_username': 'jdrueckert', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 7, 14, 31, 51, tzinfo=datetime.timezone.utc)}]",Yash Patel,49101492,,User,,86,,0,1
616924737,fix: search form cards structure,"Screenshot: 
![image](https://user-images.githubusercontent.com/49101492/115047991-b756e200-9ef6-11eb-9fc8-fdbef1031543.png)
 ",False,52,https://api.github.com/repos/MovingBlocks/movingblocks.github.com/pulls/52,https://github.com/MovingBlocks/movingblocks.github.com/pull/52,closed,68,69,6,3,5,3,0,0,[],2021-04-16 15:30:30+00:00,2021-06-16 15:29:55+00:00,5270365.0,"60 days, 23:59:25","[{'comment_id': 619689097, 'comment_body': ""```suggestion\r\nCurrently, there's no information available for this module. Please, refer to the method repo in [here](https://github.com/Terasology) for details.\r\n```"", 'comment_created': datetime.datetime(2021, 4, 24, 17, 56, 1, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 619689278, 'comment_body': 'if the only thing changing depending on the number of results, should we only make the ""module"" / ""modules"" part of the string depend on it and separate the ""matching with"" part as that stays the same?', 'comment_created': datetime.datetime(2021, 4, 24, 17, 57, 33, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 619762043, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 4, 25, 6, 53, 6, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}]","[{'commit_sha': '10b67cb1c4c8b20c9c0a3c00cce6a30d24b498c4', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '782c83fefeb0623d8269575455ba718fa157ea4a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '825be2ecc5dd4cde61c63cf4fa23cc3019213f44', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Yash Patel,49101492,,User,,86,,0,1
674330918,feat: migrate CSS to SCSS,"This PR migrate the CSS files in the module site to SCSS , which provide additional functionality to CSS such as variables, nesting, and more",True,58,https://api.github.com/repos/MovingBlocks/movingblocks.github.com/pulls/58,https://github.com/MovingBlocks/movingblocks.github.com/pull/58,closed,308,619,29,9,3,0,0,0,[],2021-06-21 08:20:24+00:00,2021-06-29 11:32:38+00:00,702734.0,"8 days, 3:12:14",[],"[{'commit_sha': 'af90c7e6e4d9a5a8958684bfe6edac0e7b869fd0', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '81fb0fddbf6c3ae3b8f1b5efa5f35759a43429c0', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'fd7051b587ab3302f9cbec1315fdfc06799ef103', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '4ada65a48738fa5e357f841583196dfdcf228073', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '5c990a66614a32301a062ff7d6da17da3de299d4', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '85194d2c82060532182bc8f010053aebd467d109', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '6e9e97ed8155c1ae233dd3220725597dc2357101', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '42e53c208306bff3203bda97c3b53b0d4d40ba5e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '851addf93f4863d786e755e44d931b8dbcdb7cf6', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Yash Patel,49101492,,User,,86,,0,1
675102074,feat: add Module Site Deployment workflow,"This PR includes the Github Actions Workflow of ModuleSite Deployment which uses [Gatsby publish](https://github.com/marketplace/actions/gatsby-publish) template to Deploy  ModuleSite  on gh-pages

Closes #48 ",True,59,https://api.github.com/repos/MovingBlocks/movingblocks.github.com/pulls/59,https://github.com/MovingBlocks/movingblocks.github.com/pull/59,closed,53,1,3,11,0,19,0,0,[],2021-06-22 06:00:49+00:00,2021-07-03 17:45:36+00:00,992687.0,"11 days, 11:44:47","[{'comment_id': 656552865, 'comment_body': ""I think the [checkout action](https://github.com/actions/checkout) as at v2 by now - any reason you're using v1?"", 'comment_created': datetime.datetime(2021, 6, 22, 20, 23, 44, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 656851631, 'comment_body': 'oh, I was referring to the gatsby publish template and for testing i used v1, I forgot that v2 is also available , sorry will update that\r\n', 'comment_created': datetime.datetime(2021, 6, 23, 7, 57, 15, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 656890277, 'comment_body': 'done\r\n', 'comment_created': datetime.datetime(2021, 6, 23, 8, 47, 47, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 659356901, 'comment_body': '```suggestion\r\nname: Publish ModuleSite on gh-pages\r\n```', 'comment_created': datetime.datetime(2021, 6, 27, 18, 8, 49, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 659357072, 'comment_body': '```suggestion\r\n[ModuleSite](https://github.com/MovingBlocks/ModuleSite) uses a [Github Action](https://github.com/features/actions) to automate the deployment process. On every push to `master`, the GitHub action is triggered, builds the ModuleSite and deploys it on\r\n```', 'comment_created': datetime.datetime(2021, 6, 27, 18, 9, 59, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 659357128, 'comment_body': '```suggestion\r\n[GitHub pages](https://docs.github.com/en/pages/getting-started-with-github-pages/about-github-pages)\r\n```', 'comment_created': datetime.datetime(2021, 6, 27, 18, 10, 32, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 659357894, 'comment_body': 'In markdown, you can use `**some bold text**` to get ""**some bold text**""', 'comment_created': datetime.datetime(2021, 6, 27, 18, 16, 48, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 659357997, 'comment_body': '```suggestion\r\n<b>[Gatsby Publish](https://github.com/marketplace/actions/gatsby-publish):</b> Github Action to build and deploy Gatsby site on Github pages.\r\n```', 'comment_created': datetime.datetime(2021, 6, 27, 18, 17, 30, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 659358027, 'comment_body': '```suggestion\r\nEverytime the GitHub action is triggered, it executes `gatsby build` at the root of the repository and deploys it to GitHub pages.\r\n```', 'comment_created': datetime.datetime(2021, 6, 27, 18, 18, 5, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 659358124, 'comment_body': 'This is something that should be rather done as comments in the workflow yaml.', 'comment_created': datetime.datetime(2021, 6, 27, 18, 18, 53, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 663361242, 'comment_body': '```suggestion\r\nFor using the GitHub action, Gatsby Publish provides some configuration options:\r\n```', 'comment_created': datetime.datetime(2021, 7, 3, 12, 44, 34, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 663361345, 'comment_body': '```suggestion\r\n  A GitHub Personal Access Token with access for pushing and creating pull requests. This is required to push builds after building the Site. The access token should be stored as a secret in the repository settings.\r\n```', 'comment_created': datetime.datetime(2021, 7, 3, 12, 45, 40, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 663361379, 'comment_body': '```suggestion\r\n  This is the branch to which all the outputs after executing `gatsby build` will be pushed. This includes static files that were generated during build process.\r\n```', 'comment_created': datetime.datetime(2021, 7, 3, 12, 46, 12, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 663361405, 'comment_body': '```suggestion\r\n  Additional arguments that get passed to `gatsby build`. See the [Gatsby documentation](https://www.gatsbyjs.com/docs/how-to/previews-deploys-hosting/path-prefix/) for a list of allowed options. Provided as an input. Defaults to nothing.\r\n```', 'comment_created': datetime.datetime(2021, 7, 3, 12, 46, 39, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 663361461, 'comment_body': '```suggestion\r\nThe above configuration options are used by the ModuleSite. For more information about the configuration visit Gatsby Publish.\r\n```', 'comment_created': datetime.datetime(2021, 7, 3, 12, 47, 16, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 663361576, 'comment_body': '> visit Gatsby Publish\r\n\r\nI guess you mean the documentation of ""Gatsby Publish""? Please add a link here.', 'comment_created': datetime.datetime(2021, 7, 3, 12, 47, 56, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 663361683, 'comment_body': '```suggestion\r\n> **⚠️ NOTE:** The Gatsby code is located in the root directory. After the build process the `./public` directory is generated. Gatsby does not allow to edit or customize the public directory, so we have to build code every time the Gatsby code changes. Gatsby automatically provides a build script on `Package.json` which is required by the GitHub action to execute the build process.\r\n```', 'comment_created': datetime.datetime(2021, 7, 3, 12, 49, 8, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 663362803, 'comment_body': 'done all the changes\r\n', 'comment_created': datetime.datetime(2021, 7, 3, 13, 0, 25, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 663362837, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 3, 13, 0, 34, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}]","[{'commit_sha': 'fd96d00c80aa2b88de00fa79abb5834248e8e74e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '68407afd0dfc01452c6fc2ae26c9bed89ea823f2', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '5a6b5317a1ac4bb48d219973943877a4f9f5fbf7', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '993ae0c79cea12eb3bcd7b18a32d88aef7c01c4f', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'db0f9880401353ea61fdd889ea84d614bd79ce0b', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'c88a829825927cfa3be2b569726ab83d4b30eba9', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '7c87f23dbc2cc37c570055ee4f7526467c8df17b', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'cb76837739649f6509916f8e0c906ab51e92c948', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '9c264d6fdc276d71d86e9853e02a074e3d19d99d', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ee23fb5d6441b55e06ee1e2bd418d5e5fd1e8b55', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'fda6b39b9d0e3437301392541cdec0d2e4a63ba9', 'committer_username': 'jdrueckert', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 7, 14, 31, 51, tzinfo=datetime.timezone.utc)}]",Yash Patel,49101492,,User,,86,,0,1
673334790,feat: module generation pipeline,"https://github.com/MovingBlocks/ModuleSite/issues/43 Module Generation pipeline

Diagram:
![image](https://user-images.githubusercontent.com/49101492/122543418-63c55980-d049-11eb-8b44-0e223b5bfdef.png)
",True,57,https://api.github.com/repos/MovingBlocks/movingblocks.github.com/pulls/57,https://github.com/MovingBlocks/movingblocks.github.com/pull/57,closed,208,0,7,35,0,123,0,0,[],2021-06-18 09:55:54+00:00,2021-07-27 20:18:01+00:00,3406927.0,"39 days, 10:22:07","[{'comment_id': 654322420, 'comment_body': ""Why do we need to write this to a file and then read and process it from there.\r\nI don't think this is necessary and you can parse the response directly."", 'comment_created': datetime.datetime(2021, 6, 18, 10, 28, 17, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 654323419, 'comment_body': ""I'd propose to directly try to get contents of `module.txt` here and properly handle the error that will be thrown if the file does not exist."", 'comment_created': datetime.datetime(2021, 6, 18, 10, 29, 58, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 654323871, 'comment_body': ""as discussed in the last meeting: stick with one and fall back to a default text if that's not present\r\nno need to overcomplicate things here."", 'comment_created': datetime.datetime(2021, 6, 18, 10, 30, 44, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 654324765, 'comment_body': ""Why? I generally noticed, that there's a lot of style issues in your PRs such as incorrect indentation, mixed intendations using spaces or tabs, unnecessary empty lines, etc. I recommend the use of an IDE and its formatting options. For instance, for intellij, you can use Ctrl+Alt+L to format files."", 'comment_created': datetime.datetime(2021, 6, 18, 10, 32, 10, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 654326888, 'comment_body': 'Why go the detour over an additional variable if you can already collect the tags above?', 'comment_created': datetime.datetime(2021, 6, 18, 10, 36, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 654492285, 'comment_body': ""Utilize python's inbuilt `capitalize()` method here to avoid multiple `if` conditions."", 'comment_created': datetime.datetime(2021, 6, 18, 14, 49, 44, tzinfo=datetime.timezone.utc), 'commenter': 'majordwarf', 'type': 'User'}, {'comment_id': 654492890, 'comment_body': ""Setup ES Lint or Prettier on your VS Code, that'll help to avoid such situations."", 'comment_created': datetime.datetime(2021, 6, 18, 14, 50, 30, tzinfo=datetime.timezone.utc), 'commenter': 'majordwarf', 'type': 'User'}, {'comment_id': 654768259, 'comment_body': 'Did that during frontmatter generation (frontmatter.py line no 93 to 97)', 'comment_created': datetime.datetime(2021, 6, 19, 8, 34, 52, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 654778263, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 19, 10, 15, 55, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 654779480, 'comment_body': 'Done ', 'comment_created': datetime.datetime(2021, 6, 19, 10, 29, 11, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 654780379, 'comment_body': 'This check is for the safer side, If modules.txt does not exist, just exit and it is not a module, I think directly getting content will make code look a bit complicated, If module.txt is not present it will return some error or null and that will require the try-catch block to handle it', 'comment_created': datetime.datetime(2021, 6, 19, 10, 38, 10, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 654940936, 'comment_body': ""not sure if I'm missing something here, but do we expect `parseData['isGameplay']` to fail if directly before we checked that `isGameplay` is in `parseData`? :thinking: "", 'comment_created': datetime.datetime(2021, 6, 20, 14, 6, 26, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 654941520, 'comment_body': 'why not do a ""-1"" in the `range` above instead?', 'comment_created': datetime.datetime(2021, 6, 20, 14, 10, 47, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 654941809, 'comment_body': 'as discussed in yesterday\'s meeting, there\'s no need to loop through everything here.\r\njust do a single `get_contents` for each of ""module.txt"", ""README.md"" and the banner and be sure to log it if any of those fails.', 'comment_created': datetime.datetime(2021, 6, 20, 14, 13, 5, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 654942118, 'comment_body': 'nitpick: typically the loop variable is named the singular while what it\'s looping through is called the plural version of whatever the subject is, i.e. in your case ""folders""', 'comment_created': datetime.datetime(2021, 6, 20, 14, 15, 36, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 654942176, 'comment_body': '""yes""?', 'comment_created': datetime.datetime(2021, 6, 20, 14, 16, 1, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 654942344, 'comment_body': ""what if there's no logo available? did I overlook the `else` path?"", 'comment_created': datetime.datetime(2021, 6, 20, 14, 17, 37, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 654942544, 'comment_body': 'maybe we can find a better default for this. could be something along the lines of ""XYZ is a (could add the first tag here or so) module for Terasology.""', 'comment_created': datetime.datetime(2021, 6, 20, 14, 19, 26, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 654974185, 'comment_body': 'done changes\r\n', 'comment_created': datetime.datetime(2021, 6, 20, 18, 48, 46, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 654974230, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 20, 18, 49, 3, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 654975530, 'comment_body': 'This is just a small check, handled on scrape.py\r\n', 'comment_created': datetime.datetime(2021, 6, 20, 19, 1, 46, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 654976586, 'comment_body': ""we have to check for that because module.txt doesn't have all the keys , if the key is not present how it will parse data from module.txt, so first I have to check for the keys are present or not , if yes then parse data else nothing"", 'comment_created': datetime.datetime(2021, 6, 20, 19, 11, 39, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 655626394, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 6, 21, 18, 51, 23, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 655626466, 'comment_body': 'removed', 'comment_created': datetime.datetime(2021, 6, 21, 18, 51, 31, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 655627664, 'comment_body': ""Can you provide a text of 3 to 4 lines so that our cards description don't look empty"", 'comment_created': datetime.datetime(2021, 6, 21, 18, 53, 28, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 659358723, 'comment_body': 'In declarative Jenkinsfile syntax, you do not need to use try/catch, but rather ""post"" (see https://www.jenkins.io/doc/book/pipeline/jenkinsfile/#handling-failure)', 'comment_created': datetime.datetime(2021, 6, 27, 18, 24, 29, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 659359483, 'comment_body': 'You do not need all this.\r\nThe exit status on running `diff` is sufficient to tell whether things are different or not.\r\n\r\nFrom the manpage: ""Exit status is 0 if inputs are the same, 1 if different, 2 if trouble.""', 'comment_created': datetime.datetime(2021, 6, 27, 18, 31, 53, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 659360359, 'comment_body': 'then at least provide a comment here, that explains this.', 'comment_created': datetime.datetime(2021, 6, 27, 18, 39, 47, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 664130083, 'comment_body': ""I wonder if it would make more sense to do the following:\r\n- loop through the content lines\r\n- use `startswith()` to identify the right one\r\n- get the index for the `=`\r\n- get the slice starting after that index\r\n- split on ','"", 'comment_created': datetime.datetime(2021, 7, 5, 21, 21, 28, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 664130360, 'comment_body': 'Does this start with a capital letter on purpose?', 'comment_created': datetime.datetime(2021, 7, 5, 21, 22, 24, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 664130420, 'comment_body': 'Does this start with a capital letter on purpose?', 'comment_created': datetime.datetime(2021, 7, 5, 21, 22, 40, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 664130460, 'comment_body': 'see above', 'comment_created': datetime.datetime(2021, 7, 5, 21, 22, 53, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 664130684, 'comment_body': 'Should we return in this case here?', 'comment_created': datetime.datetime(2021, 7, 5, 21, 24, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 664136163, 'comment_body': 'If you want to do this here I\'d argue to also do something similar for the readme here.\r\nOtherwise you\'ll have two different places (scripts) in which you\'re handling the ""fallback"" for readme or banner not being present', 'comment_created': datetime.datetime(2021, 7, 5, 21, 49, 18, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 664136503, 'comment_body': '```suggestion\r\nIndexDir = ""./scrape-data/""\r\n```', 'comment_created': datetime.datetime(2021, 7, 5, 21, 51, 4, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 664136562, 'comment_body': '```suggestion\r\nfor moduleDir in os.listdir(DIR):\r\n```', 'comment_created': datetime.datetime(2021, 7, 5, 21, 51, 18, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 664136840, 'comment_body': 'can you make the variable names a bit more specific?', 'comment_created': datetime.datetime(2021, 7, 5, 21, 52, 10, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 664136905, 'comment_body': '```suggestion\r\n    # check for module.txt to get information about module\r\n```', 'comment_created': datetime.datetime(2021, 7, 5, 21, 52, 28, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 664137652, 'comment_body': ""I wonder whether we actually need this check. If there is no `module.txt` for a module the scrape stage shouldn't have created a directory for that module anyway, shouldn't it? And the following steps should probably be in a try-catch anyway so you could also just assume the file is there and catch the respective error if it's not :thinking: "", 'comment_created': datetime.datetime(2021, 7, 5, 21, 55, 43, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 664138201, 'comment_body': ""I'd move this up to where you define `moduleFile`"", 'comment_created': datetime.datetime(2021, 7, 5, 21, 58, 24, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 664138840, 'comment_body': ""Why do you statically use the fallback banner here?\r\nFor one, you're currently handling the case in which no banner is present already on scrape and copy the default banner, right? And secondly, even if you didn't, shouldn't you first check whether there is a banner present in the scrape result?"", 'comment_created': datetime.datetime(2021, 7, 5, 22, 1, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 664139269, 'comment_body': 'Do you ever close this?\r\nYou could consider using `with open() as indexMd:`, thus as soon as you exit that scope, the file will be closed.', 'comment_created': datetime.datetime(2021, 7, 5, 22, 2, 59, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 664143656, 'comment_body': 'what is this expression supposed to achieve?', 'comment_created': datetime.datetime(2021, 7, 5, 22, 26, 26, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 664144181, 'comment_body': ""I don't fully understand what the intention behind this piece of logic is, can you please explain what you want to achieve here?"", 'comment_created': datetime.datetime(2021, 7, 5, 22, 29, 13, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 664144316, 'comment_body': 'this seems less like ""loading"" modules, but rather like ""uploading"" them :thinking: ', 'comment_created': datetime.datetime(2021, 7, 5, 22, 30, 11, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 665636736, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 7, 19, 6, 15, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 665642472, 'comment_body': 'Can you explain a bit more like what to return , we do not have any function here to return something', 'comment_created': datetime.datetime(2021, 7, 7, 19, 15, 40, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 665648854, 'comment_body': 'We don\'t have to do this for Readme, in the case of the image we are creating a default image because we don\'t want our Module cove image to be empty, in the case of readme we are appending content of readme in ""index. MD"" and I\'m doing safe check-in frontmatter for readme, if it does not found readme it will append some text, you can check line no 67 to 71 in ""frontmatter.py""', 'comment_created': datetime.datetime(2021, 7, 7, 19, 26, 43, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 665678139, 'comment_body': 'done\r\n', 'comment_created': datetime.datetime(2021, 7, 7, 20, 16, 37, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 665678208, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 7, 20, 16, 44, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 665678352, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 7, 20, 17, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 665681103, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 7, 20, 21, 37, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 665682201, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2021, 7, 7, 20, 23, 32, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 665682826, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 7, 20, 24, 39, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 665688274, 'comment_body': 'So, after scraping and getting our all module data, I try to copy the last successful build that is stored in the artifact, and the ""archive()"" function check is there any change between the last successful build and module data inside ""./module"" , if it finds any changes it creates a new artifact of current build, if not then we print ""no changes in modules"". if we don\'t found any last successful build or it is the first build we just create artifact of current build', 'comment_created': datetime.datetime(2021, 7, 7, 20, 34, 14, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 665689300, 'comment_body': 'it will clone ModuleSite and discard the old modules and load new modules and create PR to ModuleSite', 'comment_created': datetime.datetime(2021, 7, 7, 20, 35, 56, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 665689814, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 7, 20, 36, 49, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 665689963, 'comment_body': '> Why is the Jenkinsfile in here twice?\r\n\r\nremoved', 'comment_created': datetime.datetime(2021, 7, 7, 20, 37, 6, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 667538756, 'comment_body': ""```suggestion\r\n        stage('load data') {\r\n```"", 'comment_created': datetime.datetime(2021, 7, 11, 21, 37, 30, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667539003, 'comment_body': '```suggestion\r\nThe automation focuses on gathering information about modules listed as part of the `omega` distro in the [Index repository](https://github.com/Terasology/Index/blob/master/distros/omega/gradle.properties) and exhibit the generated information on the [ModuleSite](https://github.com/MovingBlocks/ModuleSite).\r\nBoth steps are performed in a [Jenkins pipeline](https://www.jenkins.io/doc/book/pipeline/).\r\n```', 'comment_created': datetime.datetime(2021, 7, 11, 21, 40, 9, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667539539, 'comment_body': '```suggestion\r\nThe pipeline will be run periodically as a cron job, so that the ModuleSite is up-to-date with any changes in module information.\r\n```', 'comment_created': datetime.datetime(2021, 7, 11, 21, 44, 56, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667540093, 'comment_body': '```suggestion\r\nAt the starting stage of the pipeline, the ""scrape"" script sends API calls to GitHub to fetch all required information from the Index repository, i.e. `module.txt`, and optionally the `README.md` and a cover image.\r\nIf `README.md` or the cover image are not available. we will fallback to a default image and a default readme text.\r\nAfterwards, the ""frontmatter"" script prepares the collected information for display on the ModuleSite.\r\n```', 'comment_created': datetime.datetime(2021, 7, 11, 21, 50, 22, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667540136, 'comment_body': 'This is not up-to-date anymore.', 'comment_created': datetime.datetime(2021, 7, 11, 21, 50, 51, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667540246, 'comment_body': '```suggestion\r\nscrapeDataDir = ""./scrape-data/""\r\n```', 'comment_created': datetime.datetime(2021, 7, 11, 21, 52, 3, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667540731, 'comment_body': '1. `getModuledata` is a weird name for a file object :thinking: \r\n2. do you close this somewhere again?\r\n3. consider using `with open([...]) as moduleMetadataFile:`', 'comment_created': datetime.datetime(2021, 7, 11, 21, 57, 23, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667540765, 'comment_body': '```suggestion\r\n    moduleMetadata = getModuledata.read()\r\n```', 'comment_created': datetime.datetime(2021, 7, 11, 21, 57, 44, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667540849, 'comment_body': ""the parsing is not really done yet, so this is not really parsed data yet. it's still the same data, only loaded as json..."", 'comment_created': datetime.datetime(2021, 7, 11, 21, 58, 31, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667540970, 'comment_body': ""I'd also recommend to use the `with open` here and two lines below. thus, you don't have to manually take care you close them, but python does this automagically once you leave the inner scope"", 'comment_created': datetime.datetime(2021, 7, 11, 22, 0, 11, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667541146, 'comment_body': 'this name is a bit ambiguous wrt the `Index` module', 'comment_created': datetime.datetime(2021, 7, 11, 22, 1, 33, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667541168, 'comment_body': 'this is the whole content, not only the modules', 'comment_created': datetime.datetime(2021, 7, 11, 22, 1, 58, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667541304, 'comment_body': '`getModules` is a good name for a method, but not for a variable', 'comment_created': datetime.datetime(2021, 7, 11, 22, 2, 58, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667541359, 'comment_body': '```suggestion\r\n        modules=line[13:].split("","")\r\n```', 'comment_created': datetime.datetime(2021, 7, 11, 22, 3, 29, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667541415, 'comment_body': 'what exactly do you need this condition for?', 'comment_created': datetime.datetime(2021, 7, 11, 22, 4, 1, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667541430, 'comment_body': '```suggestion\r\nfor module in modules:\r\n```', 'comment_created': datetime.datetime(2021, 7, 11, 22, 4, 16, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667541436, 'comment_body': '```suggestion\r\n        repository=user.get_repo(module)\r\n```', 'comment_created': datetime.datetime(2021, 7, 11, 22, 4, 32, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667541658, 'comment_body': 'again, those are good names for methods, but not for variables.\r\nmethod names are typically actions that indicate what is done in the method.\r\nvariable names should be passive descriptions of what information they store.', 'comment_created': datetime.datetime(2021, 7, 11, 22, 6, 51, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667542142, 'comment_body': 'the readme not being there is not the only error that can occur and lead into the `except` case... I\'d propose to go for ""Couldn\'t fetch README.md"" here and also print the error.', 'comment_created': datetime.datetime(2021, 7, 11, 22, 10, 44, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667542215, 'comment_body': 'Did you want to replace this with the default text I wrote for you?', 'comment_created': datetime.datetime(2021, 7, 11, 22, 11, 33, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667542260, 'comment_body': '```suggestion\r\n\r\n```', 'comment_created': datetime.datetime(2021, 7, 11, 22, 11, 48, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669003350, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 13, 18, 15, 36, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669003421, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 13, 18, 15, 42, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669003483, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 13, 18, 15, 47, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669003569, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 13, 18, 15, 54, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669003698, 'comment_body': 'changed', 'comment_created': datetime.datetime(2021, 7, 13, 18, 16, 5, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669003821, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 13, 18, 16, 15, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669003888, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 13, 18, 16, 22, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669003986, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 13, 18, 16, 28, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669004127, 'comment_body': 'done ', 'comment_created': datetime.datetime(2021, 7, 13, 18, 16, 41, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669004280, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 13, 18, 16, 54, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669004336, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 13, 18, 17, 1, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669004465, 'comment_body': 'done changes', 'comment_created': datetime.datetime(2021, 7, 13, 18, 17, 14, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669004581, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 13, 18, 17, 24, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669004739, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 13, 18, 17, 37, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669005952, 'comment_body': ""oh, I forgot to remove that, I don't have an access token so I test it for 2 to 3 modules so that  I do not exceed the limit of api calls,Removed"", 'comment_created': datetime.datetime(2021, 7, 13, 18, 19, 40, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669006009, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 13, 18, 19, 46, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669006067, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 13, 18, 19, 52, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669006151, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 13, 18, 20, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669006248, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 13, 18, 20, 8, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669006413, 'comment_body': 'yes, replaced', 'comment_created': datetime.datetime(2021, 7, 13, 18, 20, 21, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669006520, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 13, 18, 20, 28, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669019341, 'comment_body': '```suggestion\r\nThe automation focuses on gathering information about modules listed as part of the `omega` distro in the [Index repository](https://github.com/Terasology/Index/blob/master/distros/omega/gradle.properties) and exhibits the generated information on the [ModuleSite](https://github.com/MovingBlocks/ModuleSite).\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 18, 40, 5, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669026312, 'comment_body': '```suggestion\r\nIf `README.md` or the cover image are not available, we will fallback to a default image and a default readme text.\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 18, 50, 50, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669026559, 'comment_body': '```suggestion\r\n## Loading Modules\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 18, 51, 12, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669027001, 'comment_body': '```suggestion\r\nThis stage simply clones the ModuleSite, copies the modules directory into the cloned ModuleSite and performs git operations to push the changes. All of these actions are performed by `loadModules.sh`.\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 18, 51, 51, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669027159, 'comment_body': ""```suggestion\r\nAt last, the workspace is cleared so that we don't run into errors next time when the pipeline is executed. The same process is repeated periodically.\r\n```"", 'comment_created': datetime.datetime(2021, 7, 13, 18, 52, 6, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669027668, 'comment_body': '```suggestion\r\n        module = json.loads(moduleMetadata)\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 18, 52, 52, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669028565, 'comment_body': '```suggestion\r\n            with open(moduleDst+moduleName+""/cover.png"", mode=""rb"") as imageFile:\r\n                imageFile.write(readSourceImage)\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 18, 54, 19, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669029054, 'comment_body': '```suggestion\r\n        with open(moduleReadme, mode=""r"") as readmeData:\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 18, 55, 5, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669029638, 'comment_body': 'You are still not closing this file object and I still recommend to use `with open` here too.', 'comment_created': datetime.datetime(2021, 7, 13, 18, 56, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669029798, 'comment_body': '```suggestion\r\n        print(e)\r\n\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 18, 56, 13, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669031454, 'comment_body': '```suggestion\r\ngit clone https://github.com/MovingBlocks/ModuleSite.git $MODULEDIR/ModuleSite\r\npushd $MODULEDIR/ModuleSite\r\nrm -R modules\r\npopd\r\ncp -r $MODULES $MODULEDIR/ModuleSite\r\ncd $MODULEDIR/ModuleSite\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 18, 58, 46, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669032253, 'comment_body': 'Why do we need to force-push here?', 'comment_created': datetime.datetime(2021, 7, 13, 19, 0, 3, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669032587, 'comment_body': '```suggestion\r\ngit commit -m ""chore: update module information""\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 19, 0, 36, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669033111, 'comment_body': '```suggestion\r\ncurl -i -H ""Authorization: token $GIT_CREDS"" -X POST ""https://api.github.com/repos/MovingBlocks/ModuleSite/pulls"" -d \'{ ""title"": ""chore: automated update of module information"",\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 19, 1, 22, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669033381, 'comment_body': '```suggestion\r\n ""body"": ""Module information collected and generated using Jenkins pipeline""}\'\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 19, 1, 46, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669033726, 'comment_body': '`indexModules` is still ambiguous, please name it differently', 'comment_created': datetime.datetime(2021, 7, 13, 19, 2, 17, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669034646, 'comment_body': '`decodeModuleContent` is not a reasonable variable name (see my recent comment on method vs variable names)', 'comment_created': datetime.datetime(2021, 7, 13, 19, 3, 52, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669035079, 'comment_body': '```suggestion\r\n        moduleData = json.loads(decodeModuleContent)\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 19, 4, 33, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669035722, 'comment_body': '```suggestion\r\n        print(""Couldn\'t fetch README.md"" + moduleName + "": "" + e)\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 19, 5, 41, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669035985, 'comment_body': 'please also print the caught exception here', 'comment_created': datetime.datetime(2021, 7, 13, 19, 6, 5, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669036258, 'comment_body': 'please also print, why (e.g. response code)', 'comment_created': datetime.datetime(2021, 7, 13, 19, 6, 36, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669036333, 'comment_body': '```suggestion\r\n            defaultImageFile.write(readSourceImage)\r\n\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 19, 6, 46, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 671701163, 'comment_body': '```suggestion\r\n        print(""Couldn\'t fetch cover image on "" + moduleName +"", error code: ""+ response.status_code + "", resolving with default cover image"")\r\n```', 'comment_created': datetime.datetime(2021, 7, 17, 14, 1, 48, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}]","[{'commit_sha': '1fe10c805a770d141ae1310ec89b3cfd5d888ad2', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '57e77b90638b2c6ad78651240afc7804adf658e1', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '7ddfe3b4798a2b5f3d69acb8e5e482fbb6c04e2e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'db149cf914a40d0f23ddc257b3d08d9249d66515', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'd84f55ce5a96af6a8377f43d1729156d2cbe4bda', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '12d6526d30658ad3607c40746df1663890b25cb4', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '402fb5353a48be71d0b60c4c3d147960cd6862b0', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '4ca7316d381771eaa90ce218cbedb237599edc08', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '3f956a214e6219b1214134a3823fcdbe1ca2d116', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '9cd809c72752ac2a0248b8ade81efaf25d255fba', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '1fd1229cd39e66535fa125bc81ff05ec24de04dd', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'fb435d0bc6eca7e52a768c308825d640ff3cf362', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'dc73458d3941eb02678800397e651cbd59c2969c', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'f7d7234ab1102926e463e17c3c72ed1ffe371dfa', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '608855a210c2528dd3381abb685bf523fb110864', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '4d37b3e1fd062a4ce50e88888439bcf70a200c04', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '003b9b8bd5be10917cb67bbb75b142110dbcf0bb', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '63fe545f8d5fb0103b94798b37769b021ab663a0', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '169e85df4a41b89b21e810fbe3a4605f70329d23', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '2a4b82f798c9df5389384eeed906f1b060fdf5d3', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '9f78014768b8e5149f570607cbfd51cfa0df09dc', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'be67cd992c19d3cade963f66c5d5a44e697603fb', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '8e34fb243b139da648dc5734bd71c3ced458b9e9', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'e8087ccc06a42eaa7a52b7b872cbf30e23a36ba3', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'f36ba1b1760c90fbd60332de09ddccc21d80020a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '07a430997147964fd62b6498bb138c9078c90f67', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '0c47a39123883f8dc52d0e37934f39b546a36543', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a2495b323079b44cd33c6bb565cc293f56f9faeb', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '59eb1c1952f62f0223df5a8295a17184eadf8894', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '3e7145169c073153ca2483f855720cd0c57e67ac', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'dab15f52b06ff159d695972156a74ffbdf0be882', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '08866c7faff51bcbe606c9823ba2d92621759bfd', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a5b3733f7969c526538fd4cdec132e5c4e98df1f', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'af313903a9b329fd32b4b20cbecebbbb8b7a2b47', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'acbbd88f277c9e0a738afa9601f49674f5942657', 'committer_username': 'jdrueckert', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 7, 14, 31, 51, tzinfo=datetime.timezone.utc)}]",Yash Patel,49101492,,User,,86,,0,1
681173271,feat: Mentor's page,"This PR introduces the Mentor's Page and uses Trello API  to fetch all the information that is displayed on the mentor's page.
It includes two new react components that are Mentor and Mentor Modal which is used by the mentor's  page

Note: Navbar will be restructured once all the pages are over 

Screenshots:
![image](https://user-images.githubusercontent.com/49101492/124020069-722b5200-da07-11eb-84fa-712c9e0a8c0a.png)

![image](https://user-images.githubusercontent.com/49101492/124020195-9b4be280-da07-11eb-841a-b04c147c18ac.png)

![image](https://user-images.githubusercontent.com/49101492/124028306-78bec700-da11-11eb-9940-8098ee447c30.png)



",True,60,https://api.github.com/repos/MovingBlocks/movingblocks.github.com/pulls/60,https://github.com/MovingBlocks/movingblocks.github.com/pull/60,closed,245,4,10,2,0,6,0,0,[],2021-06-30 19:29:53+00:00,2021-07-02 21:39:14+00:00,180561.0,"2 days, 2:09:21","[{'comment_id': 661766485, 'comment_body': 'Use `try-catch` blocks when using await statements instead of `if-else`.', 'comment_created': datetime.datetime(2021, 6, 30, 19, 49, 43, tzinfo=datetime.timezone.utc), 'commenter': 'majordwarf', 'type': 'User'}, {'comment_id': 661770284, 'comment_body': 'Please keep a blank/newline at end of the file.', 'comment_created': datetime.datetime(2021, 6, 30, 19, 56, 11, tzinfo=datetime.timezone.utc), 'commenter': 'majordwarf', 'type': 'User'}, {'comment_id': 661795234, 'comment_body': ""I use If-else because, in case if API doesn't work  we can display an Alert same as we are displaying on Download Page, just pushed the changes please have a look\r\n"", 'comment_created': datetime.datetime(2021, 6, 30, 20, 38, 51, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 661795287, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 6, 30, 20, 38, 57, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 661957613, 'comment_body': 'you could just keep it as async\r\n\r\nhttps://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch', 'comment_created': datetime.datetime(2021, 7, 1, 4, 13, 40, tzinfo=datetime.timezone.utc), 'commenter': 'pollend', 'type': 'User'}, {'comment_id': 662021860, 'comment_body': ""I think it's the same thing just a bit different syntax we are using JS ES6 and on the doc, it's an older version. If you are talking about directly fetching the information from API , In the future, it might not work and so we need async and await to check response is coming or not\r\n"", 'comment_created': datetime.datetime(2021, 7, 1, 6, 45, 8, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}]","[{'commit_sha': '3180b28a034dd99fb6f6ac624c63c8a7bf178a44', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b8c0c4d2e01ede048fee27b46917807a751caf34', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Yash Patel,49101492,,User,,86,,0,1
681971346,fix: Game page,"This PR  deals with the issue of Image quality of Game page images and also improve the UI of Game page

Screenshot:
![image](https://user-images.githubusercontent.com/49101492/124151941-b0c91700-dab0-11eb-91fb-4cd649073d3b.png)
",True,61,https://api.github.com/repos/MovingBlocks/movingblocks.github.com/pulls/61,https://github.com/MovingBlocks/movingblocks.github.com/pull/61,closed,193,106,4,5,4,0,0,0,[],2021-07-01 15:40:20+00:00,2021-07-08 10:24:07+00:00,585827.0,"6 days, 18:43:47",[],"[{'commit_sha': 'f6c782ee764e37ef560374f313c53786ddc57f54', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'd579eaa513357c8c06943bbcb8c3751a0b91ab2b', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '2d6231dbe2fc7da8a43190574394b9c80d5cb6d7', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '7fa1a22fbe50097f1d6fa8093644ef5a6a9c85a9', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '2d47d23c3c1d30b1bcd7dea79c1a03ecaaaf464c', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Yash Patel,49101492,,User,,86,,0,1
673334790,feat: module generation pipeline,"https://github.com/MovingBlocks/ModuleSite/issues/43 Module Generation pipeline

Diagram:
![image](https://user-images.githubusercontent.com/49101492/122543418-63c55980-d049-11eb-8b44-0e223b5bfdef.png)
",True,57,https://api.github.com/repos/MovingBlocks/movingblocks.github.com/pulls/57,https://github.com/MovingBlocks/movingblocks.github.com/pull/57,closed,208,0,7,35,0,123,0,0,[],2021-06-18 09:55:54+00:00,2021-07-27 20:18:01+00:00,3406927.0,"39 days, 10:22:07","[{'comment_id': 654322420, 'comment_body': ""Why do we need to write this to a file and then read and process it from there.\r\nI don't think this is necessary and you can parse the response directly."", 'comment_created': datetime.datetime(2021, 6, 18, 10, 28, 17, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 654323419, 'comment_body': ""I'd propose to directly try to get contents of `module.txt` here and properly handle the error that will be thrown if the file does not exist."", 'comment_created': datetime.datetime(2021, 6, 18, 10, 29, 58, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 654323871, 'comment_body': ""as discussed in the last meeting: stick with one and fall back to a default text if that's not present\r\nno need to overcomplicate things here."", 'comment_created': datetime.datetime(2021, 6, 18, 10, 30, 44, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 654324765, 'comment_body': ""Why? I generally noticed, that there's a lot of style issues in your PRs such as incorrect indentation, mixed intendations using spaces or tabs, unnecessary empty lines, etc. I recommend the use of an IDE and its formatting options. For instance, for intellij, you can use Ctrl+Alt+L to format files."", 'comment_created': datetime.datetime(2021, 6, 18, 10, 32, 10, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 654326888, 'comment_body': 'Why go the detour over an additional variable if you can already collect the tags above?', 'comment_created': datetime.datetime(2021, 6, 18, 10, 36, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 654492285, 'comment_body': ""Utilize python's inbuilt `capitalize()` method here to avoid multiple `if` conditions."", 'comment_created': datetime.datetime(2021, 6, 18, 14, 49, 44, tzinfo=datetime.timezone.utc), 'commenter': 'majordwarf', 'type': 'User'}, {'comment_id': 654492890, 'comment_body': ""Setup ES Lint or Prettier on your VS Code, that'll help to avoid such situations."", 'comment_created': datetime.datetime(2021, 6, 18, 14, 50, 30, tzinfo=datetime.timezone.utc), 'commenter': 'majordwarf', 'type': 'User'}, {'comment_id': 654768259, 'comment_body': 'Did that during frontmatter generation (frontmatter.py line no 93 to 97)', 'comment_created': datetime.datetime(2021, 6, 19, 8, 34, 52, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 654778263, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 19, 10, 15, 55, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 654779480, 'comment_body': 'Done ', 'comment_created': datetime.datetime(2021, 6, 19, 10, 29, 11, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 654780379, 'comment_body': 'This check is for the safer side, If modules.txt does not exist, just exit and it is not a module, I think directly getting content will make code look a bit complicated, If module.txt is not present it will return some error or null and that will require the try-catch block to handle it', 'comment_created': datetime.datetime(2021, 6, 19, 10, 38, 10, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 654940936, 'comment_body': ""not sure if I'm missing something here, but do we expect `parseData['isGameplay']` to fail if directly before we checked that `isGameplay` is in `parseData`? :thinking: "", 'comment_created': datetime.datetime(2021, 6, 20, 14, 6, 26, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 654941520, 'comment_body': 'why not do a ""-1"" in the `range` above instead?', 'comment_created': datetime.datetime(2021, 6, 20, 14, 10, 47, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 654941809, 'comment_body': 'as discussed in yesterday\'s meeting, there\'s no need to loop through everything here.\r\njust do a single `get_contents` for each of ""module.txt"", ""README.md"" and the banner and be sure to log it if any of those fails.', 'comment_created': datetime.datetime(2021, 6, 20, 14, 13, 5, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 654942118, 'comment_body': 'nitpick: typically the loop variable is named the singular while what it\'s looping through is called the plural version of whatever the subject is, i.e. in your case ""folders""', 'comment_created': datetime.datetime(2021, 6, 20, 14, 15, 36, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 654942176, 'comment_body': '""yes""?', 'comment_created': datetime.datetime(2021, 6, 20, 14, 16, 1, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 654942344, 'comment_body': ""what if there's no logo available? did I overlook the `else` path?"", 'comment_created': datetime.datetime(2021, 6, 20, 14, 17, 37, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 654942544, 'comment_body': 'maybe we can find a better default for this. could be something along the lines of ""XYZ is a (could add the first tag here or so) module for Terasology.""', 'comment_created': datetime.datetime(2021, 6, 20, 14, 19, 26, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 654974185, 'comment_body': 'done changes\r\n', 'comment_created': datetime.datetime(2021, 6, 20, 18, 48, 46, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 654974230, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 20, 18, 49, 3, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 654975530, 'comment_body': 'This is just a small check, handled on scrape.py\r\n', 'comment_created': datetime.datetime(2021, 6, 20, 19, 1, 46, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 654976586, 'comment_body': ""we have to check for that because module.txt doesn't have all the keys , if the key is not present how it will parse data from module.txt, so first I have to check for the keys are present or not , if yes then parse data else nothing"", 'comment_created': datetime.datetime(2021, 6, 20, 19, 11, 39, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 655626394, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 6, 21, 18, 51, 23, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 655626466, 'comment_body': 'removed', 'comment_created': datetime.datetime(2021, 6, 21, 18, 51, 31, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 655627664, 'comment_body': ""Can you provide a text of 3 to 4 lines so that our cards description don't look empty"", 'comment_created': datetime.datetime(2021, 6, 21, 18, 53, 28, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 659358723, 'comment_body': 'In declarative Jenkinsfile syntax, you do not need to use try/catch, but rather ""post"" (see https://www.jenkins.io/doc/book/pipeline/jenkinsfile/#handling-failure)', 'comment_created': datetime.datetime(2021, 6, 27, 18, 24, 29, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 659359483, 'comment_body': 'You do not need all this.\r\nThe exit status on running `diff` is sufficient to tell whether things are different or not.\r\n\r\nFrom the manpage: ""Exit status is 0 if inputs are the same, 1 if different, 2 if trouble.""', 'comment_created': datetime.datetime(2021, 6, 27, 18, 31, 53, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 659360359, 'comment_body': 'then at least provide a comment here, that explains this.', 'comment_created': datetime.datetime(2021, 6, 27, 18, 39, 47, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 664130083, 'comment_body': ""I wonder if it would make more sense to do the following:\r\n- loop through the content lines\r\n- use `startswith()` to identify the right one\r\n- get the index for the `=`\r\n- get the slice starting after that index\r\n- split on ','"", 'comment_created': datetime.datetime(2021, 7, 5, 21, 21, 28, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 664130360, 'comment_body': 'Does this start with a capital letter on purpose?', 'comment_created': datetime.datetime(2021, 7, 5, 21, 22, 24, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 664130420, 'comment_body': 'Does this start with a capital letter on purpose?', 'comment_created': datetime.datetime(2021, 7, 5, 21, 22, 40, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 664130460, 'comment_body': 'see above', 'comment_created': datetime.datetime(2021, 7, 5, 21, 22, 53, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 664130684, 'comment_body': 'Should we return in this case here?', 'comment_created': datetime.datetime(2021, 7, 5, 21, 24, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 664136163, 'comment_body': 'If you want to do this here I\'d argue to also do something similar for the readme here.\r\nOtherwise you\'ll have two different places (scripts) in which you\'re handling the ""fallback"" for readme or banner not being present', 'comment_created': datetime.datetime(2021, 7, 5, 21, 49, 18, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 664136503, 'comment_body': '```suggestion\r\nIndexDir = ""./scrape-data/""\r\n```', 'comment_created': datetime.datetime(2021, 7, 5, 21, 51, 4, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 664136562, 'comment_body': '```suggestion\r\nfor moduleDir in os.listdir(DIR):\r\n```', 'comment_created': datetime.datetime(2021, 7, 5, 21, 51, 18, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 664136840, 'comment_body': 'can you make the variable names a bit more specific?', 'comment_created': datetime.datetime(2021, 7, 5, 21, 52, 10, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 664136905, 'comment_body': '```suggestion\r\n    # check for module.txt to get information about module\r\n```', 'comment_created': datetime.datetime(2021, 7, 5, 21, 52, 28, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 664137652, 'comment_body': ""I wonder whether we actually need this check. If there is no `module.txt` for a module the scrape stage shouldn't have created a directory for that module anyway, shouldn't it? And the following steps should probably be in a try-catch anyway so you could also just assume the file is there and catch the respective error if it's not :thinking: "", 'comment_created': datetime.datetime(2021, 7, 5, 21, 55, 43, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 664138201, 'comment_body': ""I'd move this up to where you define `moduleFile`"", 'comment_created': datetime.datetime(2021, 7, 5, 21, 58, 24, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 664138840, 'comment_body': ""Why do you statically use the fallback banner here?\r\nFor one, you're currently handling the case in which no banner is present already on scrape and copy the default banner, right? And secondly, even if you didn't, shouldn't you first check whether there is a banner present in the scrape result?"", 'comment_created': datetime.datetime(2021, 7, 5, 22, 1, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 664139269, 'comment_body': 'Do you ever close this?\r\nYou could consider using `with open() as indexMd:`, thus as soon as you exit that scope, the file will be closed.', 'comment_created': datetime.datetime(2021, 7, 5, 22, 2, 59, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 664143656, 'comment_body': 'what is this expression supposed to achieve?', 'comment_created': datetime.datetime(2021, 7, 5, 22, 26, 26, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 664144181, 'comment_body': ""I don't fully understand what the intention behind this piece of logic is, can you please explain what you want to achieve here?"", 'comment_created': datetime.datetime(2021, 7, 5, 22, 29, 13, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 664144316, 'comment_body': 'this seems less like ""loading"" modules, but rather like ""uploading"" them :thinking: ', 'comment_created': datetime.datetime(2021, 7, 5, 22, 30, 11, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 665636736, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 7, 19, 6, 15, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 665642472, 'comment_body': 'Can you explain a bit more like what to return , we do not have any function here to return something', 'comment_created': datetime.datetime(2021, 7, 7, 19, 15, 40, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 665648854, 'comment_body': 'We don\'t have to do this for Readme, in the case of the image we are creating a default image because we don\'t want our Module cove image to be empty, in the case of readme we are appending content of readme in ""index. MD"" and I\'m doing safe check-in frontmatter for readme, if it does not found readme it will append some text, you can check line no 67 to 71 in ""frontmatter.py""', 'comment_created': datetime.datetime(2021, 7, 7, 19, 26, 43, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 665678139, 'comment_body': 'done\r\n', 'comment_created': datetime.datetime(2021, 7, 7, 20, 16, 37, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 665678208, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 7, 20, 16, 44, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 665678352, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 7, 20, 17, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 665681103, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 7, 20, 21, 37, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 665682201, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2021, 7, 7, 20, 23, 32, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 665682826, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 7, 20, 24, 39, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 665688274, 'comment_body': 'So, after scraping and getting our all module data, I try to copy the last successful build that is stored in the artifact, and the ""archive()"" function check is there any change between the last successful build and module data inside ""./module"" , if it finds any changes it creates a new artifact of current build, if not then we print ""no changes in modules"". if we don\'t found any last successful build or it is the first build we just create artifact of current build', 'comment_created': datetime.datetime(2021, 7, 7, 20, 34, 14, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 665689300, 'comment_body': 'it will clone ModuleSite and discard the old modules and load new modules and create PR to ModuleSite', 'comment_created': datetime.datetime(2021, 7, 7, 20, 35, 56, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 665689814, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 7, 20, 36, 49, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 665689963, 'comment_body': '> Why is the Jenkinsfile in here twice?\r\n\r\nremoved', 'comment_created': datetime.datetime(2021, 7, 7, 20, 37, 6, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 667538756, 'comment_body': ""```suggestion\r\n        stage('load data') {\r\n```"", 'comment_created': datetime.datetime(2021, 7, 11, 21, 37, 30, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667539003, 'comment_body': '```suggestion\r\nThe automation focuses on gathering information about modules listed as part of the `omega` distro in the [Index repository](https://github.com/Terasology/Index/blob/master/distros/omega/gradle.properties) and exhibit the generated information on the [ModuleSite](https://github.com/MovingBlocks/ModuleSite).\r\nBoth steps are performed in a [Jenkins pipeline](https://www.jenkins.io/doc/book/pipeline/).\r\n```', 'comment_created': datetime.datetime(2021, 7, 11, 21, 40, 9, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667539539, 'comment_body': '```suggestion\r\nThe pipeline will be run periodically as a cron job, so that the ModuleSite is up-to-date with any changes in module information.\r\n```', 'comment_created': datetime.datetime(2021, 7, 11, 21, 44, 56, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667540093, 'comment_body': '```suggestion\r\nAt the starting stage of the pipeline, the ""scrape"" script sends API calls to GitHub to fetch all required information from the Index repository, i.e. `module.txt`, and optionally the `README.md` and a cover image.\r\nIf `README.md` or the cover image are not available. we will fallback to a default image and a default readme text.\r\nAfterwards, the ""frontmatter"" script prepares the collected information for display on the ModuleSite.\r\n```', 'comment_created': datetime.datetime(2021, 7, 11, 21, 50, 22, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667540136, 'comment_body': 'This is not up-to-date anymore.', 'comment_created': datetime.datetime(2021, 7, 11, 21, 50, 51, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667540246, 'comment_body': '```suggestion\r\nscrapeDataDir = ""./scrape-data/""\r\n```', 'comment_created': datetime.datetime(2021, 7, 11, 21, 52, 3, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667540731, 'comment_body': '1. `getModuledata` is a weird name for a file object :thinking: \r\n2. do you close this somewhere again?\r\n3. consider using `with open([...]) as moduleMetadataFile:`', 'comment_created': datetime.datetime(2021, 7, 11, 21, 57, 23, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667540765, 'comment_body': '```suggestion\r\n    moduleMetadata = getModuledata.read()\r\n```', 'comment_created': datetime.datetime(2021, 7, 11, 21, 57, 44, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667540849, 'comment_body': ""the parsing is not really done yet, so this is not really parsed data yet. it's still the same data, only loaded as json..."", 'comment_created': datetime.datetime(2021, 7, 11, 21, 58, 31, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667540970, 'comment_body': ""I'd also recommend to use the `with open` here and two lines below. thus, you don't have to manually take care you close them, but python does this automagically once you leave the inner scope"", 'comment_created': datetime.datetime(2021, 7, 11, 22, 0, 11, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667541146, 'comment_body': 'this name is a bit ambiguous wrt the `Index` module', 'comment_created': datetime.datetime(2021, 7, 11, 22, 1, 33, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667541168, 'comment_body': 'this is the whole content, not only the modules', 'comment_created': datetime.datetime(2021, 7, 11, 22, 1, 58, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667541304, 'comment_body': '`getModules` is a good name for a method, but not for a variable', 'comment_created': datetime.datetime(2021, 7, 11, 22, 2, 58, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667541359, 'comment_body': '```suggestion\r\n        modules=line[13:].split("","")\r\n```', 'comment_created': datetime.datetime(2021, 7, 11, 22, 3, 29, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667541415, 'comment_body': 'what exactly do you need this condition for?', 'comment_created': datetime.datetime(2021, 7, 11, 22, 4, 1, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667541430, 'comment_body': '```suggestion\r\nfor module in modules:\r\n```', 'comment_created': datetime.datetime(2021, 7, 11, 22, 4, 16, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667541436, 'comment_body': '```suggestion\r\n        repository=user.get_repo(module)\r\n```', 'comment_created': datetime.datetime(2021, 7, 11, 22, 4, 32, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667541658, 'comment_body': 'again, those are good names for methods, but not for variables.\r\nmethod names are typically actions that indicate what is done in the method.\r\nvariable names should be passive descriptions of what information they store.', 'comment_created': datetime.datetime(2021, 7, 11, 22, 6, 51, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667542142, 'comment_body': 'the readme not being there is not the only error that can occur and lead into the `except` case... I\'d propose to go for ""Couldn\'t fetch README.md"" here and also print the error.', 'comment_created': datetime.datetime(2021, 7, 11, 22, 10, 44, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667542215, 'comment_body': 'Did you want to replace this with the default text I wrote for you?', 'comment_created': datetime.datetime(2021, 7, 11, 22, 11, 33, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667542260, 'comment_body': '```suggestion\r\n\r\n```', 'comment_created': datetime.datetime(2021, 7, 11, 22, 11, 48, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669003350, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 13, 18, 15, 36, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669003421, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 13, 18, 15, 42, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669003483, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 13, 18, 15, 47, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669003569, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 13, 18, 15, 54, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669003698, 'comment_body': 'changed', 'comment_created': datetime.datetime(2021, 7, 13, 18, 16, 5, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669003821, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 13, 18, 16, 15, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669003888, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 13, 18, 16, 22, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669003986, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 13, 18, 16, 28, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669004127, 'comment_body': 'done ', 'comment_created': datetime.datetime(2021, 7, 13, 18, 16, 41, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669004280, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 13, 18, 16, 54, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669004336, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 13, 18, 17, 1, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669004465, 'comment_body': 'done changes', 'comment_created': datetime.datetime(2021, 7, 13, 18, 17, 14, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669004581, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 13, 18, 17, 24, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669004739, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 13, 18, 17, 37, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669005952, 'comment_body': ""oh, I forgot to remove that, I don't have an access token so I test it for 2 to 3 modules so that  I do not exceed the limit of api calls,Removed"", 'comment_created': datetime.datetime(2021, 7, 13, 18, 19, 40, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669006009, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 13, 18, 19, 46, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669006067, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 13, 18, 19, 52, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669006151, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 13, 18, 20, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669006248, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 13, 18, 20, 8, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669006413, 'comment_body': 'yes, replaced', 'comment_created': datetime.datetime(2021, 7, 13, 18, 20, 21, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669006520, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 13, 18, 20, 28, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669019341, 'comment_body': '```suggestion\r\nThe automation focuses on gathering information about modules listed as part of the `omega` distro in the [Index repository](https://github.com/Terasology/Index/blob/master/distros/omega/gradle.properties) and exhibits the generated information on the [ModuleSite](https://github.com/MovingBlocks/ModuleSite).\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 18, 40, 5, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669026312, 'comment_body': '```suggestion\r\nIf `README.md` or the cover image are not available, we will fallback to a default image and a default readme text.\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 18, 50, 50, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669026559, 'comment_body': '```suggestion\r\n## Loading Modules\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 18, 51, 12, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669027001, 'comment_body': '```suggestion\r\nThis stage simply clones the ModuleSite, copies the modules directory into the cloned ModuleSite and performs git operations to push the changes. All of these actions are performed by `loadModules.sh`.\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 18, 51, 51, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669027159, 'comment_body': ""```suggestion\r\nAt last, the workspace is cleared so that we don't run into errors next time when the pipeline is executed. The same process is repeated periodically.\r\n```"", 'comment_created': datetime.datetime(2021, 7, 13, 18, 52, 6, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669027668, 'comment_body': '```suggestion\r\n        module = json.loads(moduleMetadata)\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 18, 52, 52, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669028565, 'comment_body': '```suggestion\r\n            with open(moduleDst+moduleName+""/cover.png"", mode=""rb"") as imageFile:\r\n                imageFile.write(readSourceImage)\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 18, 54, 19, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669029054, 'comment_body': '```suggestion\r\n        with open(moduleReadme, mode=""r"") as readmeData:\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 18, 55, 5, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669029638, 'comment_body': 'You are still not closing this file object and I still recommend to use `with open` here too.', 'comment_created': datetime.datetime(2021, 7, 13, 18, 56, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669029798, 'comment_body': '```suggestion\r\n        print(e)\r\n\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 18, 56, 13, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669031454, 'comment_body': '```suggestion\r\ngit clone https://github.com/MovingBlocks/ModuleSite.git $MODULEDIR/ModuleSite\r\npushd $MODULEDIR/ModuleSite\r\nrm -R modules\r\npopd\r\ncp -r $MODULES $MODULEDIR/ModuleSite\r\ncd $MODULEDIR/ModuleSite\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 18, 58, 46, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669032253, 'comment_body': 'Why do we need to force-push here?', 'comment_created': datetime.datetime(2021, 7, 13, 19, 0, 3, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669032587, 'comment_body': '```suggestion\r\ngit commit -m ""chore: update module information""\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 19, 0, 36, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669033111, 'comment_body': '```suggestion\r\ncurl -i -H ""Authorization: token $GIT_CREDS"" -X POST ""https://api.github.com/repos/MovingBlocks/ModuleSite/pulls"" -d \'{ ""title"": ""chore: automated update of module information"",\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 19, 1, 22, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669033381, 'comment_body': '```suggestion\r\n ""body"": ""Module information collected and generated using Jenkins pipeline""}\'\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 19, 1, 46, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669033726, 'comment_body': '`indexModules` is still ambiguous, please name it differently', 'comment_created': datetime.datetime(2021, 7, 13, 19, 2, 17, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669034646, 'comment_body': '`decodeModuleContent` is not a reasonable variable name (see my recent comment on method vs variable names)', 'comment_created': datetime.datetime(2021, 7, 13, 19, 3, 52, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669035079, 'comment_body': '```suggestion\r\n        moduleData = json.loads(decodeModuleContent)\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 19, 4, 33, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669035722, 'comment_body': '```suggestion\r\n        print(""Couldn\'t fetch README.md"" + moduleName + "": "" + e)\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 19, 5, 41, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669035985, 'comment_body': 'please also print the caught exception here', 'comment_created': datetime.datetime(2021, 7, 13, 19, 6, 5, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669036258, 'comment_body': 'please also print, why (e.g. response code)', 'comment_created': datetime.datetime(2021, 7, 13, 19, 6, 36, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669036333, 'comment_body': '```suggestion\r\n            defaultImageFile.write(readSourceImage)\r\n\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 19, 6, 46, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 671701163, 'comment_body': '```suggestion\r\n        print(""Couldn\'t fetch cover image on "" + moduleName +"", error code: ""+ response.status_code + "", resolving with default cover image"")\r\n```', 'comment_created': datetime.datetime(2021, 7, 17, 14, 1, 48, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}]","[{'commit_sha': '1fe10c805a770d141ae1310ec89b3cfd5d888ad2', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '57e77b90638b2c6ad78651240afc7804adf658e1', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '7ddfe3b4798a2b5f3d69acb8e5e482fbb6c04e2e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'db149cf914a40d0f23ddc257b3d08d9249d66515', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'd84f55ce5a96af6a8377f43d1729156d2cbe4bda', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '12d6526d30658ad3607c40746df1663890b25cb4', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '402fb5353a48be71d0b60c4c3d147960cd6862b0', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '4ca7316d381771eaa90ce218cbedb237599edc08', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '3f956a214e6219b1214134a3823fcdbe1ca2d116', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '9cd809c72752ac2a0248b8ade81efaf25d255fba', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '1fd1229cd39e66535fa125bc81ff05ec24de04dd', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'fb435d0bc6eca7e52a768c308825d640ff3cf362', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'dc73458d3941eb02678800397e651cbd59c2969c', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'f7d7234ab1102926e463e17c3c72ed1ffe371dfa', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '608855a210c2528dd3381abb685bf523fb110864', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '4d37b3e1fd062a4ce50e88888439bcf70a200c04', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '003b9b8bd5be10917cb67bbb75b142110dbcf0bb', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '63fe545f8d5fb0103b94798b37769b021ab663a0', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '169e85df4a41b89b21e810fbe3a4605f70329d23', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '2a4b82f798c9df5389384eeed906f1b060fdf5d3', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '9f78014768b8e5149f570607cbfd51cfa0df09dc', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'be67cd992c19d3cade963f66c5d5a44e697603fb', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '8e34fb243b139da648dc5734bd71c3ced458b9e9', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'e8087ccc06a42eaa7a52b7b872cbf30e23a36ba3', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'f36ba1b1760c90fbd60332de09ddccc21d80020a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '07a430997147964fd62b6498bb138c9078c90f67', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '0c47a39123883f8dc52d0e37934f39b546a36543', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a2495b323079b44cd33c6bb565cc293f56f9faeb', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '59eb1c1952f62f0223df5a8295a17184eadf8894', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '3e7145169c073153ca2483f855720cd0c57e67ac', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'dab15f52b06ff159d695972156a74ffbdf0be882', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '08866c7faff51bcbe606c9823ba2d92621759bfd', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a5b3733f7969c526538fd4cdec132e5c4e98df1f', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'af313903a9b329fd32b4b20cbecebbbb8b7a2b47', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'acbbd88f277c9e0a738afa9601f49674f5942657', 'committer_username': 'jdrueckert', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 7, 14, 31, 51, tzinfo=datetime.timezone.utc)}]",Yash Patel,49101492,,User,,86,,0,1
681173271,feat: Mentor's page,"This PR introduces the Mentor's Page and uses Trello API  to fetch all the information that is displayed on the mentor's page.
It includes two new react components that are Mentor and Mentor Modal which is used by the mentor's  page

Note: Navbar will be restructured once all the pages are over 

Screenshots:
![image](https://user-images.githubusercontent.com/49101492/124020069-722b5200-da07-11eb-84fa-712c9e0a8c0a.png)

![image](https://user-images.githubusercontent.com/49101492/124020195-9b4be280-da07-11eb-841a-b04c147c18ac.png)

![image](https://user-images.githubusercontent.com/49101492/124028306-78bec700-da11-11eb-9940-8098ee447c30.png)



",True,60,https://api.github.com/repos/MovingBlocks/movingblocks.github.com/pulls/60,https://github.com/MovingBlocks/movingblocks.github.com/pull/60,closed,245,4,10,2,0,6,0,0,[],2021-06-30 19:29:53+00:00,2021-07-02 21:39:14+00:00,180561.0,"2 days, 2:09:21","[{'comment_id': 661766485, 'comment_body': 'Use `try-catch` blocks when using await statements instead of `if-else`.', 'comment_created': datetime.datetime(2021, 6, 30, 19, 49, 43, tzinfo=datetime.timezone.utc), 'commenter': 'majordwarf', 'type': 'User'}, {'comment_id': 661770284, 'comment_body': 'Please keep a blank/newline at end of the file.', 'comment_created': datetime.datetime(2021, 6, 30, 19, 56, 11, tzinfo=datetime.timezone.utc), 'commenter': 'majordwarf', 'type': 'User'}, {'comment_id': 661795234, 'comment_body': ""I use If-else because, in case if API doesn't work  we can display an Alert same as we are displaying on Download Page, just pushed the changes please have a look\r\n"", 'comment_created': datetime.datetime(2021, 6, 30, 20, 38, 51, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 661795287, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 6, 30, 20, 38, 57, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 661957613, 'comment_body': 'you could just keep it as async\r\n\r\nhttps://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch', 'comment_created': datetime.datetime(2021, 7, 1, 4, 13, 40, tzinfo=datetime.timezone.utc), 'commenter': 'pollend', 'type': 'User'}, {'comment_id': 662021860, 'comment_body': ""I think it's the same thing just a bit different syntax we are using JS ES6 and on the doc, it's an older version. If you are talking about directly fetching the information from API , In the future, it might not work and so we need async and await to check response is coming or not\r\n"", 'comment_created': datetime.datetime(2021, 7, 1, 6, 45, 8, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}]","[{'commit_sha': '3180b28a034dd99fb6f6ac624c63c8a7bf178a44', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b8c0c4d2e01ede048fee27b46917807a751caf34', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Yash Patel,49101492,,User,,86,,0,1
685185079,feat: introduce lightbox on Media page,"
This PR introduces the Lightbox on the Media page,  improves the quality of images, and also provides a pagination feature to the Media page

Screenshots:
![image](https://user-images.githubusercontent.com/49101492/124764418-8d8be500-df52-11eb-84b2-3777c2fa4056.png)

![image](https://user-images.githubusercontent.com/49101492/124764401-895fc780-df52-11eb-8ed3-34971edba3bc.png)



",True,65,https://api.github.com/repos/MovingBlocks/movingblocks.github.com/pulls/65,https://github.com/MovingBlocks/movingblocks.github.com/pull/65,closed,274,119,9,10,0,4,0,0,[],2021-07-07 13:12:58+00:00,2021-07-10 17:09:33+00:00,273395.0,"3 days, 3:56:35","[{'comment_id': 666058841, 'comment_body': 'Set `opacity` to 0.5', 'comment_created': datetime.datetime(2021, 7, 8, 10, 11, 51, tzinfo=datetime.timezone.utc), 'commenter': 'majordwarf', 'type': 'User'}, {'comment_id': 666059341, 'comment_body': 'You removed the hook but forgot to remove associated event handler `setblur`.', 'comment_created': datetime.datetime(2021, 7, 8, 10, 12, 34, tzinfo=datetime.timezone.utc), 'commenter': 'majordwarf', 'type': 'User'}, {'comment_id': 666132379, 'comment_body': 'done\r\n', 'comment_created': datetime.datetime(2021, 7, 8, 12, 8, 50, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 666132423, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 8, 12, 8, 55, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}]","[{'commit_sha': 'a84ea98b312e8e4d95bc9b8e565f389375e1114c', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '397943708b800b2a5a224546001c5d9d82c25c42', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'f97a13db11902dd9e53c820934e2b9cb75e89cea', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '746c09162e03aa57c584fdfe417aaee2605e3dc1', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '55822fe3b4f77257e730c77c74e0241059b2f50d', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '4391274929e4e0473ba2f58cb67c9bb72ef0e915', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '3add5a2aad814d7a6533bc83309a3fc3762d1803', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '4d5580d3bfda21f361e49fd879e576a92ddbcc2a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'e65fd42158105f3d537e874727d3867e08a8eb42', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '3c84b92538fff1d707b902b2a6d644814709e513', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Yash Patel,49101492,,User,,86,,0,1
683462698,fix: multiple tags issue,"This PR fixes the issue of tags before ModuleSite can only use a single tag now it can use multiple tags.
It introduces a new system to handle tags length that is greater than the two so that card structure can be maintained

Before:
tags: ""Asset""

Now:
tags: [""Asset"",""Library""]

Screenshot:
![image](https://user-images.githubusercontent.com/49101492/124435737-e876de00-dd92-11eb-9b77-e374852de6a7.png)

Note:  You will not find the above card that is in the image it was generated during testing",True,64,https://api.github.com/repos/MovingBlocks/movingblocks.github.com/pulls/64,https://github.com/MovingBlocks/movingblocks.github.com/pull/64,closed,61,41,25,8,5,13,0,0,[],2021-07-05 08:04:57+00:00,2021-08-06 15:11:29+00:00,2790392.0,"32 days, 7:06:32","[{'comment_id': 664006214, 'comment_body': 'why do you need to do this first. just use tags as is. \r\n\r\n`{tags.map((tag) => <Badge className=""mr-2"">{tag}</Badge>}`\r\n`{(tags.length -2) > 0 ? ""+"" : """"}`\r\n', 'comment_created': datetime.datetime(2021, 7, 5, 15, 20, 58, tzinfo=datetime.timezone.utc), 'commenter': 'pollend', 'type': 'User'}, {'comment_id': 664017569, 'comment_body': 'The if statement check for tags length and  for loop inside it collect first two tags in array\nOn return we just display the array in which we collected first two\'s tags and then  , we also check for if our array is of length 2 or less, if it is less then we do not display anything, else if it is greater then 2, we subtract 2 from it and display + ""value we get after subtract""\n\nSo basically ,\n Tag1 Tag2 +1 more\n\nConclusion:\nWe some how have to display first two tags \n\nThe above code you suggested will display all the tags and the  ""+ more "" , we don\'t want all tags\n', 'comment_created': datetime.datetime(2021, 7, 5, 15, 40, 19, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 664033922, 'comment_body': 'Did some searching and got solution for removing this  if statement and loop , we can use aarry.slice(0,2) method in JS, I will  fix this tonight ', 'comment_created': datetime.datetime(2021, 7, 5, 16, 11, 56, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 667361354, 'comment_body': ""I believe you don't need the return if I remember my JSX correctly. "", 'comment_created': datetime.datetime(2021, 7, 10, 16, 58, 1, tzinfo=datetime.timezone.utc), 'commenter': 'pollend', 'type': 'User'}, {'comment_id': 667366549, 'comment_body': 'We can directly do this thing removing curly brackets and return , but we are passing html elements so returning them looks clear and readable,  ', 'comment_created': datetime.datetime(2021, 7, 10, 17, 53, 19, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 677106844, 'comment_body': 'why do you need this logging here', 'comment_created': datetime.datetime(2021, 7, 27, 4, 23, 56, tzinfo=datetime.timezone.utc), 'commenter': 'pollend', 'type': 'User'}, {'comment_id': 677111974, 'comment_body': '```suggestion\r\n          const matchedTag = blog.tags.filter(tag => tag != null).map(t => t.match(tagRgx))\r\n          return matchedTag.toString().match(tagRgx) && blog.title.match(searchRgx);\r\n```\r\nI think you can do something like this. your using a map wrong with this expression. map is suppose to map A --> B. javascript does have a foreach prototype if I remember correctly.', 'comment_created': datetime.datetime(2021, 7, 27, 4, 39, 27, tzinfo=datetime.timezone.utc), 'commenter': 'pollend', 'type': 'User'}, {'comment_id': 677112839, 'comment_body': 'the const DATA here is strange to me. ', 'comment_created': datetime.datetime(2021, 7, 27, 4, 41, 51, tzinfo=datetime.timezone.utc), 'commenter': 'pollend', 'type': 'User'}, {'comment_id': 677113792, 'comment_body': '```suggestion\r\n         const matchedTag = blog.tags.map(t => t.match(tagRgx))\r\n```', 'comment_created': datetime.datetime(2021, 7, 27, 4, 44, 55, tzinfo=datetime.timezone.utc), 'commenter': 'pollend', 'type': 'User'}, {'comment_id': 677222766, 'comment_body': 'done\r\n', 'comment_created': datetime.datetime(2021, 7, 27, 8, 13, 52, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 677222899, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 27, 8, 14, 1, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 677222961, 'comment_body': 'done, foreach will not return modified array', 'comment_created': datetime.datetime(2021, 7, 27, 8, 14, 8, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 678415526, 'comment_body': 'can you remove this @ryuk156 ', 'comment_created': datetime.datetime(2021, 7, 28, 15, 29, 34, tzinfo=datetime.timezone.utc), 'commenter': 'pollend', 'type': 'User'}]","[{'commit_sha': 'da04dd7521f7d4cc907684d0c64bf9a223b81acf', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '90ad27d0b7903536864b6944601c6a4f4c903070', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '6500ef3e33f126c2f7c0a65b9586b868db008e06', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'aff96654d46741d90d91e0bc9f7c55e1a972ddbc', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '0d00406a87911f04a1c95c31abb3c106b00a405b', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'f5ee0f7cb203484896ad66876ce9b29f3b10ce0e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b9460851fd78a9233379ced217db8a2f428bf7ff', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '392f15bbe01964de5db6db1c2eb2afd29e905c18', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Yash Patel,49101492,,User,,86,,0,1
673334790,feat: module generation pipeline,"https://github.com/MovingBlocks/ModuleSite/issues/43 Module Generation pipeline

Diagram:
![image](https://user-images.githubusercontent.com/49101492/122543418-63c55980-d049-11eb-8b44-0e223b5bfdef.png)
",True,57,https://api.github.com/repos/MovingBlocks/movingblocks.github.com/pulls/57,https://github.com/MovingBlocks/movingblocks.github.com/pull/57,closed,208,0,7,35,0,123,0,0,[],2021-06-18 09:55:54+00:00,2021-07-27 20:18:01+00:00,3406927.0,"39 days, 10:22:07","[{'comment_id': 654322420, 'comment_body': ""Why do we need to write this to a file and then read and process it from there.\r\nI don't think this is necessary and you can parse the response directly."", 'comment_created': datetime.datetime(2021, 6, 18, 10, 28, 17, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 654323419, 'comment_body': ""I'd propose to directly try to get contents of `module.txt` here and properly handle the error that will be thrown if the file does not exist."", 'comment_created': datetime.datetime(2021, 6, 18, 10, 29, 58, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 654323871, 'comment_body': ""as discussed in the last meeting: stick with one and fall back to a default text if that's not present\r\nno need to overcomplicate things here."", 'comment_created': datetime.datetime(2021, 6, 18, 10, 30, 44, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 654324765, 'comment_body': ""Why? I generally noticed, that there's a lot of style issues in your PRs such as incorrect indentation, mixed intendations using spaces or tabs, unnecessary empty lines, etc. I recommend the use of an IDE and its formatting options. For instance, for intellij, you can use Ctrl+Alt+L to format files."", 'comment_created': datetime.datetime(2021, 6, 18, 10, 32, 10, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 654326888, 'comment_body': 'Why go the detour over an additional variable if you can already collect the tags above?', 'comment_created': datetime.datetime(2021, 6, 18, 10, 36, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 654492285, 'comment_body': ""Utilize python's inbuilt `capitalize()` method here to avoid multiple `if` conditions."", 'comment_created': datetime.datetime(2021, 6, 18, 14, 49, 44, tzinfo=datetime.timezone.utc), 'commenter': 'majordwarf', 'type': 'User'}, {'comment_id': 654492890, 'comment_body': ""Setup ES Lint or Prettier on your VS Code, that'll help to avoid such situations."", 'comment_created': datetime.datetime(2021, 6, 18, 14, 50, 30, tzinfo=datetime.timezone.utc), 'commenter': 'majordwarf', 'type': 'User'}, {'comment_id': 654768259, 'comment_body': 'Did that during frontmatter generation (frontmatter.py line no 93 to 97)', 'comment_created': datetime.datetime(2021, 6, 19, 8, 34, 52, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 654778263, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 19, 10, 15, 55, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 654779480, 'comment_body': 'Done ', 'comment_created': datetime.datetime(2021, 6, 19, 10, 29, 11, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 654780379, 'comment_body': 'This check is for the safer side, If modules.txt does not exist, just exit and it is not a module, I think directly getting content will make code look a bit complicated, If module.txt is not present it will return some error or null and that will require the try-catch block to handle it', 'comment_created': datetime.datetime(2021, 6, 19, 10, 38, 10, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 654940936, 'comment_body': ""not sure if I'm missing something here, but do we expect `parseData['isGameplay']` to fail if directly before we checked that `isGameplay` is in `parseData`? :thinking: "", 'comment_created': datetime.datetime(2021, 6, 20, 14, 6, 26, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 654941520, 'comment_body': 'why not do a ""-1"" in the `range` above instead?', 'comment_created': datetime.datetime(2021, 6, 20, 14, 10, 47, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 654941809, 'comment_body': 'as discussed in yesterday\'s meeting, there\'s no need to loop through everything here.\r\njust do a single `get_contents` for each of ""module.txt"", ""README.md"" and the banner and be sure to log it if any of those fails.', 'comment_created': datetime.datetime(2021, 6, 20, 14, 13, 5, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 654942118, 'comment_body': 'nitpick: typically the loop variable is named the singular while what it\'s looping through is called the plural version of whatever the subject is, i.e. in your case ""folders""', 'comment_created': datetime.datetime(2021, 6, 20, 14, 15, 36, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 654942176, 'comment_body': '""yes""?', 'comment_created': datetime.datetime(2021, 6, 20, 14, 16, 1, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 654942344, 'comment_body': ""what if there's no logo available? did I overlook the `else` path?"", 'comment_created': datetime.datetime(2021, 6, 20, 14, 17, 37, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 654942544, 'comment_body': 'maybe we can find a better default for this. could be something along the lines of ""XYZ is a (could add the first tag here or so) module for Terasology.""', 'comment_created': datetime.datetime(2021, 6, 20, 14, 19, 26, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 654974185, 'comment_body': 'done changes\r\n', 'comment_created': datetime.datetime(2021, 6, 20, 18, 48, 46, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 654974230, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 20, 18, 49, 3, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 654975530, 'comment_body': 'This is just a small check, handled on scrape.py\r\n', 'comment_created': datetime.datetime(2021, 6, 20, 19, 1, 46, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 654976586, 'comment_body': ""we have to check for that because module.txt doesn't have all the keys , if the key is not present how it will parse data from module.txt, so first I have to check for the keys are present or not , if yes then parse data else nothing"", 'comment_created': datetime.datetime(2021, 6, 20, 19, 11, 39, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 655626394, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 6, 21, 18, 51, 23, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 655626466, 'comment_body': 'removed', 'comment_created': datetime.datetime(2021, 6, 21, 18, 51, 31, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 655627664, 'comment_body': ""Can you provide a text of 3 to 4 lines so that our cards description don't look empty"", 'comment_created': datetime.datetime(2021, 6, 21, 18, 53, 28, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 659358723, 'comment_body': 'In declarative Jenkinsfile syntax, you do not need to use try/catch, but rather ""post"" (see https://www.jenkins.io/doc/book/pipeline/jenkinsfile/#handling-failure)', 'comment_created': datetime.datetime(2021, 6, 27, 18, 24, 29, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 659359483, 'comment_body': 'You do not need all this.\r\nThe exit status on running `diff` is sufficient to tell whether things are different or not.\r\n\r\nFrom the manpage: ""Exit status is 0 if inputs are the same, 1 if different, 2 if trouble.""', 'comment_created': datetime.datetime(2021, 6, 27, 18, 31, 53, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 659360359, 'comment_body': 'then at least provide a comment here, that explains this.', 'comment_created': datetime.datetime(2021, 6, 27, 18, 39, 47, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 664130083, 'comment_body': ""I wonder if it would make more sense to do the following:\r\n- loop through the content lines\r\n- use `startswith()` to identify the right one\r\n- get the index for the `=`\r\n- get the slice starting after that index\r\n- split on ','"", 'comment_created': datetime.datetime(2021, 7, 5, 21, 21, 28, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 664130360, 'comment_body': 'Does this start with a capital letter on purpose?', 'comment_created': datetime.datetime(2021, 7, 5, 21, 22, 24, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 664130420, 'comment_body': 'Does this start with a capital letter on purpose?', 'comment_created': datetime.datetime(2021, 7, 5, 21, 22, 40, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 664130460, 'comment_body': 'see above', 'comment_created': datetime.datetime(2021, 7, 5, 21, 22, 53, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 664130684, 'comment_body': 'Should we return in this case here?', 'comment_created': datetime.datetime(2021, 7, 5, 21, 24, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 664136163, 'comment_body': 'If you want to do this here I\'d argue to also do something similar for the readme here.\r\nOtherwise you\'ll have two different places (scripts) in which you\'re handling the ""fallback"" for readme or banner not being present', 'comment_created': datetime.datetime(2021, 7, 5, 21, 49, 18, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 664136503, 'comment_body': '```suggestion\r\nIndexDir = ""./scrape-data/""\r\n```', 'comment_created': datetime.datetime(2021, 7, 5, 21, 51, 4, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 664136562, 'comment_body': '```suggestion\r\nfor moduleDir in os.listdir(DIR):\r\n```', 'comment_created': datetime.datetime(2021, 7, 5, 21, 51, 18, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 664136840, 'comment_body': 'can you make the variable names a bit more specific?', 'comment_created': datetime.datetime(2021, 7, 5, 21, 52, 10, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 664136905, 'comment_body': '```suggestion\r\n    # check for module.txt to get information about module\r\n```', 'comment_created': datetime.datetime(2021, 7, 5, 21, 52, 28, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 664137652, 'comment_body': ""I wonder whether we actually need this check. If there is no `module.txt` for a module the scrape stage shouldn't have created a directory for that module anyway, shouldn't it? And the following steps should probably be in a try-catch anyway so you could also just assume the file is there and catch the respective error if it's not :thinking: "", 'comment_created': datetime.datetime(2021, 7, 5, 21, 55, 43, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 664138201, 'comment_body': ""I'd move this up to where you define `moduleFile`"", 'comment_created': datetime.datetime(2021, 7, 5, 21, 58, 24, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 664138840, 'comment_body': ""Why do you statically use the fallback banner here?\r\nFor one, you're currently handling the case in which no banner is present already on scrape and copy the default banner, right? And secondly, even if you didn't, shouldn't you first check whether there is a banner present in the scrape result?"", 'comment_created': datetime.datetime(2021, 7, 5, 22, 1, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 664139269, 'comment_body': 'Do you ever close this?\r\nYou could consider using `with open() as indexMd:`, thus as soon as you exit that scope, the file will be closed.', 'comment_created': datetime.datetime(2021, 7, 5, 22, 2, 59, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 664143656, 'comment_body': 'what is this expression supposed to achieve?', 'comment_created': datetime.datetime(2021, 7, 5, 22, 26, 26, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 664144181, 'comment_body': ""I don't fully understand what the intention behind this piece of logic is, can you please explain what you want to achieve here?"", 'comment_created': datetime.datetime(2021, 7, 5, 22, 29, 13, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 664144316, 'comment_body': 'this seems less like ""loading"" modules, but rather like ""uploading"" them :thinking: ', 'comment_created': datetime.datetime(2021, 7, 5, 22, 30, 11, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 665636736, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 7, 19, 6, 15, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 665642472, 'comment_body': 'Can you explain a bit more like what to return , we do not have any function here to return something', 'comment_created': datetime.datetime(2021, 7, 7, 19, 15, 40, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 665648854, 'comment_body': 'We don\'t have to do this for Readme, in the case of the image we are creating a default image because we don\'t want our Module cove image to be empty, in the case of readme we are appending content of readme in ""index. MD"" and I\'m doing safe check-in frontmatter for readme, if it does not found readme it will append some text, you can check line no 67 to 71 in ""frontmatter.py""', 'comment_created': datetime.datetime(2021, 7, 7, 19, 26, 43, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 665678139, 'comment_body': 'done\r\n', 'comment_created': datetime.datetime(2021, 7, 7, 20, 16, 37, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 665678208, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 7, 20, 16, 44, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 665678352, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 7, 20, 17, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 665681103, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 7, 20, 21, 37, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 665682201, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2021, 7, 7, 20, 23, 32, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 665682826, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 7, 20, 24, 39, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 665688274, 'comment_body': 'So, after scraping and getting our all module data, I try to copy the last successful build that is stored in the artifact, and the ""archive()"" function check is there any change between the last successful build and module data inside ""./module"" , if it finds any changes it creates a new artifact of current build, if not then we print ""no changes in modules"". if we don\'t found any last successful build or it is the first build we just create artifact of current build', 'comment_created': datetime.datetime(2021, 7, 7, 20, 34, 14, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 665689300, 'comment_body': 'it will clone ModuleSite and discard the old modules and load new modules and create PR to ModuleSite', 'comment_created': datetime.datetime(2021, 7, 7, 20, 35, 56, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 665689814, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 7, 20, 36, 49, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 665689963, 'comment_body': '> Why is the Jenkinsfile in here twice?\r\n\r\nremoved', 'comment_created': datetime.datetime(2021, 7, 7, 20, 37, 6, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 667538756, 'comment_body': ""```suggestion\r\n        stage('load data') {\r\n```"", 'comment_created': datetime.datetime(2021, 7, 11, 21, 37, 30, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667539003, 'comment_body': '```suggestion\r\nThe automation focuses on gathering information about modules listed as part of the `omega` distro in the [Index repository](https://github.com/Terasology/Index/blob/master/distros/omega/gradle.properties) and exhibit the generated information on the [ModuleSite](https://github.com/MovingBlocks/ModuleSite).\r\nBoth steps are performed in a [Jenkins pipeline](https://www.jenkins.io/doc/book/pipeline/).\r\n```', 'comment_created': datetime.datetime(2021, 7, 11, 21, 40, 9, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667539539, 'comment_body': '```suggestion\r\nThe pipeline will be run periodically as a cron job, so that the ModuleSite is up-to-date with any changes in module information.\r\n```', 'comment_created': datetime.datetime(2021, 7, 11, 21, 44, 56, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667540093, 'comment_body': '```suggestion\r\nAt the starting stage of the pipeline, the ""scrape"" script sends API calls to GitHub to fetch all required information from the Index repository, i.e. `module.txt`, and optionally the `README.md` and a cover image.\r\nIf `README.md` or the cover image are not available. we will fallback to a default image and a default readme text.\r\nAfterwards, the ""frontmatter"" script prepares the collected information for display on the ModuleSite.\r\n```', 'comment_created': datetime.datetime(2021, 7, 11, 21, 50, 22, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667540136, 'comment_body': 'This is not up-to-date anymore.', 'comment_created': datetime.datetime(2021, 7, 11, 21, 50, 51, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667540246, 'comment_body': '```suggestion\r\nscrapeDataDir = ""./scrape-data/""\r\n```', 'comment_created': datetime.datetime(2021, 7, 11, 21, 52, 3, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667540731, 'comment_body': '1. `getModuledata` is a weird name for a file object :thinking: \r\n2. do you close this somewhere again?\r\n3. consider using `with open([...]) as moduleMetadataFile:`', 'comment_created': datetime.datetime(2021, 7, 11, 21, 57, 23, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667540765, 'comment_body': '```suggestion\r\n    moduleMetadata = getModuledata.read()\r\n```', 'comment_created': datetime.datetime(2021, 7, 11, 21, 57, 44, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667540849, 'comment_body': ""the parsing is not really done yet, so this is not really parsed data yet. it's still the same data, only loaded as json..."", 'comment_created': datetime.datetime(2021, 7, 11, 21, 58, 31, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667540970, 'comment_body': ""I'd also recommend to use the `with open` here and two lines below. thus, you don't have to manually take care you close them, but python does this automagically once you leave the inner scope"", 'comment_created': datetime.datetime(2021, 7, 11, 22, 0, 11, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667541146, 'comment_body': 'this name is a bit ambiguous wrt the `Index` module', 'comment_created': datetime.datetime(2021, 7, 11, 22, 1, 33, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667541168, 'comment_body': 'this is the whole content, not only the modules', 'comment_created': datetime.datetime(2021, 7, 11, 22, 1, 58, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667541304, 'comment_body': '`getModules` is a good name for a method, but not for a variable', 'comment_created': datetime.datetime(2021, 7, 11, 22, 2, 58, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667541359, 'comment_body': '```suggestion\r\n        modules=line[13:].split("","")\r\n```', 'comment_created': datetime.datetime(2021, 7, 11, 22, 3, 29, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667541415, 'comment_body': 'what exactly do you need this condition for?', 'comment_created': datetime.datetime(2021, 7, 11, 22, 4, 1, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667541430, 'comment_body': '```suggestion\r\nfor module in modules:\r\n```', 'comment_created': datetime.datetime(2021, 7, 11, 22, 4, 16, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667541436, 'comment_body': '```suggestion\r\n        repository=user.get_repo(module)\r\n```', 'comment_created': datetime.datetime(2021, 7, 11, 22, 4, 32, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667541658, 'comment_body': 'again, those are good names for methods, but not for variables.\r\nmethod names are typically actions that indicate what is done in the method.\r\nvariable names should be passive descriptions of what information they store.', 'comment_created': datetime.datetime(2021, 7, 11, 22, 6, 51, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667542142, 'comment_body': 'the readme not being there is not the only error that can occur and lead into the `except` case... I\'d propose to go for ""Couldn\'t fetch README.md"" here and also print the error.', 'comment_created': datetime.datetime(2021, 7, 11, 22, 10, 44, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667542215, 'comment_body': 'Did you want to replace this with the default text I wrote for you?', 'comment_created': datetime.datetime(2021, 7, 11, 22, 11, 33, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667542260, 'comment_body': '```suggestion\r\n\r\n```', 'comment_created': datetime.datetime(2021, 7, 11, 22, 11, 48, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669003350, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 13, 18, 15, 36, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669003421, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 13, 18, 15, 42, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669003483, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 13, 18, 15, 47, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669003569, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 13, 18, 15, 54, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669003698, 'comment_body': 'changed', 'comment_created': datetime.datetime(2021, 7, 13, 18, 16, 5, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669003821, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 13, 18, 16, 15, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669003888, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 13, 18, 16, 22, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669003986, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 13, 18, 16, 28, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669004127, 'comment_body': 'done ', 'comment_created': datetime.datetime(2021, 7, 13, 18, 16, 41, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669004280, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 13, 18, 16, 54, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669004336, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 13, 18, 17, 1, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669004465, 'comment_body': 'done changes', 'comment_created': datetime.datetime(2021, 7, 13, 18, 17, 14, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669004581, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 13, 18, 17, 24, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669004739, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 13, 18, 17, 37, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669005952, 'comment_body': ""oh, I forgot to remove that, I don't have an access token so I test it for 2 to 3 modules so that  I do not exceed the limit of api calls,Removed"", 'comment_created': datetime.datetime(2021, 7, 13, 18, 19, 40, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669006009, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 13, 18, 19, 46, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669006067, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 13, 18, 19, 52, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669006151, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 13, 18, 20, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669006248, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 13, 18, 20, 8, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669006413, 'comment_body': 'yes, replaced', 'comment_created': datetime.datetime(2021, 7, 13, 18, 20, 21, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669006520, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 13, 18, 20, 28, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669019341, 'comment_body': '```suggestion\r\nThe automation focuses on gathering information about modules listed as part of the `omega` distro in the [Index repository](https://github.com/Terasology/Index/blob/master/distros/omega/gradle.properties) and exhibits the generated information on the [ModuleSite](https://github.com/MovingBlocks/ModuleSite).\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 18, 40, 5, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669026312, 'comment_body': '```suggestion\r\nIf `README.md` or the cover image are not available, we will fallback to a default image and a default readme text.\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 18, 50, 50, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669026559, 'comment_body': '```suggestion\r\n## Loading Modules\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 18, 51, 12, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669027001, 'comment_body': '```suggestion\r\nThis stage simply clones the ModuleSite, copies the modules directory into the cloned ModuleSite and performs git operations to push the changes. All of these actions are performed by `loadModules.sh`.\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 18, 51, 51, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669027159, 'comment_body': ""```suggestion\r\nAt last, the workspace is cleared so that we don't run into errors next time when the pipeline is executed. The same process is repeated periodically.\r\n```"", 'comment_created': datetime.datetime(2021, 7, 13, 18, 52, 6, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669027668, 'comment_body': '```suggestion\r\n        module = json.loads(moduleMetadata)\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 18, 52, 52, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669028565, 'comment_body': '```suggestion\r\n            with open(moduleDst+moduleName+""/cover.png"", mode=""rb"") as imageFile:\r\n                imageFile.write(readSourceImage)\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 18, 54, 19, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669029054, 'comment_body': '```suggestion\r\n        with open(moduleReadme, mode=""r"") as readmeData:\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 18, 55, 5, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669029638, 'comment_body': 'You are still not closing this file object and I still recommend to use `with open` here too.', 'comment_created': datetime.datetime(2021, 7, 13, 18, 56, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669029798, 'comment_body': '```suggestion\r\n        print(e)\r\n\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 18, 56, 13, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669031454, 'comment_body': '```suggestion\r\ngit clone https://github.com/MovingBlocks/ModuleSite.git $MODULEDIR/ModuleSite\r\npushd $MODULEDIR/ModuleSite\r\nrm -R modules\r\npopd\r\ncp -r $MODULES $MODULEDIR/ModuleSite\r\ncd $MODULEDIR/ModuleSite\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 18, 58, 46, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669032253, 'comment_body': 'Why do we need to force-push here?', 'comment_created': datetime.datetime(2021, 7, 13, 19, 0, 3, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669032587, 'comment_body': '```suggestion\r\ngit commit -m ""chore: update module information""\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 19, 0, 36, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669033111, 'comment_body': '```suggestion\r\ncurl -i -H ""Authorization: token $GIT_CREDS"" -X POST ""https://api.github.com/repos/MovingBlocks/ModuleSite/pulls"" -d \'{ ""title"": ""chore: automated update of module information"",\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 19, 1, 22, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669033381, 'comment_body': '```suggestion\r\n ""body"": ""Module information collected and generated using Jenkins pipeline""}\'\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 19, 1, 46, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669033726, 'comment_body': '`indexModules` is still ambiguous, please name it differently', 'comment_created': datetime.datetime(2021, 7, 13, 19, 2, 17, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669034646, 'comment_body': '`decodeModuleContent` is not a reasonable variable name (see my recent comment on method vs variable names)', 'comment_created': datetime.datetime(2021, 7, 13, 19, 3, 52, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669035079, 'comment_body': '```suggestion\r\n        moduleData = json.loads(decodeModuleContent)\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 19, 4, 33, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669035722, 'comment_body': '```suggestion\r\n        print(""Couldn\'t fetch README.md"" + moduleName + "": "" + e)\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 19, 5, 41, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669035985, 'comment_body': 'please also print the caught exception here', 'comment_created': datetime.datetime(2021, 7, 13, 19, 6, 5, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669036258, 'comment_body': 'please also print, why (e.g. response code)', 'comment_created': datetime.datetime(2021, 7, 13, 19, 6, 36, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669036333, 'comment_body': '```suggestion\r\n            defaultImageFile.write(readSourceImage)\r\n\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 19, 6, 46, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 671701163, 'comment_body': '```suggestion\r\n        print(""Couldn\'t fetch cover image on "" + moduleName +"", error code: ""+ response.status_code + "", resolving with default cover image"")\r\n```', 'comment_created': datetime.datetime(2021, 7, 17, 14, 1, 48, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}]","[{'commit_sha': '1fe10c805a770d141ae1310ec89b3cfd5d888ad2', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '57e77b90638b2c6ad78651240afc7804adf658e1', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '7ddfe3b4798a2b5f3d69acb8e5e482fbb6c04e2e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'db149cf914a40d0f23ddc257b3d08d9249d66515', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'd84f55ce5a96af6a8377f43d1729156d2cbe4bda', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '12d6526d30658ad3607c40746df1663890b25cb4', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '402fb5353a48be71d0b60c4c3d147960cd6862b0', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '4ca7316d381771eaa90ce218cbedb237599edc08', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '3f956a214e6219b1214134a3823fcdbe1ca2d116', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '9cd809c72752ac2a0248b8ade81efaf25d255fba', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '1fd1229cd39e66535fa125bc81ff05ec24de04dd', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'fb435d0bc6eca7e52a768c308825d640ff3cf362', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'dc73458d3941eb02678800397e651cbd59c2969c', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'f7d7234ab1102926e463e17c3c72ed1ffe371dfa', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '608855a210c2528dd3381abb685bf523fb110864', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '4d37b3e1fd062a4ce50e88888439bcf70a200c04', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '003b9b8bd5be10917cb67bbb75b142110dbcf0bb', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '63fe545f8d5fb0103b94798b37769b021ab663a0', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '169e85df4a41b89b21e810fbe3a4605f70329d23', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '2a4b82f798c9df5389384eeed906f1b060fdf5d3', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '9f78014768b8e5149f570607cbfd51cfa0df09dc', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'be67cd992c19d3cade963f66c5d5a44e697603fb', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '8e34fb243b139da648dc5734bd71c3ced458b9e9', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'e8087ccc06a42eaa7a52b7b872cbf30e23a36ba3', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'f36ba1b1760c90fbd60332de09ddccc21d80020a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '07a430997147964fd62b6498bb138c9078c90f67', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '0c47a39123883f8dc52d0e37934f39b546a36543', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a2495b323079b44cd33c6bb565cc293f56f9faeb', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '59eb1c1952f62f0223df5a8295a17184eadf8894', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '3e7145169c073153ca2483f855720cd0c57e67ac', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'dab15f52b06ff159d695972156a74ffbdf0be882', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '08866c7faff51bcbe606c9823ba2d92621759bfd', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a5b3733f7969c526538fd4cdec132e5c4e98df1f', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'af313903a9b329fd32b4b20cbecebbbb8b7a2b47', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'acbbd88f277c9e0a738afa9601f49674f5942657', 'committer_username': 'jdrueckert', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 7, 14, 31, 51, tzinfo=datetime.timezone.utc)}]",Yash Patel,49101492,,User,,86,,0,1
681173271,feat: Mentor's page,"This PR introduces the Mentor's Page and uses Trello API  to fetch all the information that is displayed on the mentor's page.
It includes two new react components that are Mentor and Mentor Modal which is used by the mentor's  page

Note: Navbar will be restructured once all the pages are over 

Screenshots:
![image](https://user-images.githubusercontent.com/49101492/124020069-722b5200-da07-11eb-84fa-712c9e0a8c0a.png)

![image](https://user-images.githubusercontent.com/49101492/124020195-9b4be280-da07-11eb-841a-b04c147c18ac.png)

![image](https://user-images.githubusercontent.com/49101492/124028306-78bec700-da11-11eb-9940-8098ee447c30.png)



",True,60,https://api.github.com/repos/MovingBlocks/movingblocks.github.com/pulls/60,https://github.com/MovingBlocks/movingblocks.github.com/pull/60,closed,245,4,10,2,0,6,0,0,[],2021-06-30 19:29:53+00:00,2021-07-02 21:39:14+00:00,180561.0,"2 days, 2:09:21","[{'comment_id': 661766485, 'comment_body': 'Use `try-catch` blocks when using await statements instead of `if-else`.', 'comment_created': datetime.datetime(2021, 6, 30, 19, 49, 43, tzinfo=datetime.timezone.utc), 'commenter': 'majordwarf', 'type': 'User'}, {'comment_id': 661770284, 'comment_body': 'Please keep a blank/newline at end of the file.', 'comment_created': datetime.datetime(2021, 6, 30, 19, 56, 11, tzinfo=datetime.timezone.utc), 'commenter': 'majordwarf', 'type': 'User'}, {'comment_id': 661795234, 'comment_body': ""I use If-else because, in case if API doesn't work  we can display an Alert same as we are displaying on Download Page, just pushed the changes please have a look\r\n"", 'comment_created': datetime.datetime(2021, 6, 30, 20, 38, 51, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 661795287, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 6, 30, 20, 38, 57, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 661957613, 'comment_body': 'you could just keep it as async\r\n\r\nhttps://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch', 'comment_created': datetime.datetime(2021, 7, 1, 4, 13, 40, tzinfo=datetime.timezone.utc), 'commenter': 'pollend', 'type': 'User'}, {'comment_id': 662021860, 'comment_body': ""I think it's the same thing just a bit different syntax we are using JS ES6 and on the doc, it's an older version. If you are talking about directly fetching the information from API , In the future, it might not work and so we need async and await to check response is coming or not\r\n"", 'comment_created': datetime.datetime(2021, 7, 1, 6, 45, 8, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}]","[{'commit_sha': '3180b28a034dd99fb6f6ac624c63c8a7bf178a44', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b8c0c4d2e01ede048fee27b46917807a751caf34', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Yash Patel,49101492,,User,,86,,0,1
681971346,fix: Game page,"This PR  deals with the issue of Image quality of Game page images and also improve the UI of Game page

Screenshot:
![image](https://user-images.githubusercontent.com/49101492/124151941-b0c91700-dab0-11eb-91fb-4cd649073d3b.png)
",True,61,https://api.github.com/repos/MovingBlocks/movingblocks.github.com/pulls/61,https://github.com/MovingBlocks/movingblocks.github.com/pull/61,closed,193,106,4,5,4,0,0,0,[],2021-07-01 15:40:20+00:00,2021-07-08 10:24:07+00:00,585827.0,"6 days, 18:43:47",[],"[{'commit_sha': 'f6c782ee764e37ef560374f313c53786ddc57f54', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'd579eaa513357c8c06943bbcb8c3751a0b91ab2b', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '2d6231dbe2fc7da8a43190574394b9c80d5cb6d7', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '7fa1a22fbe50097f1d6fa8093644ef5a6a9c85a9', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '2d47d23c3c1d30b1bcd7dea79c1a03ecaaaf464c', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Yash Patel,49101492,,User,,86,,0,1
688058336,feat: image generation,"This PR introduces a new image generation feature that will help to reuse the blog cover images on the Media page.
This PR also provides a feature to auto-generate the Gsoc and TeraSaturday image 

Screenshot:
![image](https://user-images.githubusercontent.com/49101492/125334670-45612e00-e369-11eb-8f78-58b71450b91a.png)

Reference how to write a blog after this PR is merged [WIP]: [doc](https://docs.google.com/document/d/1MI4YmLEZYn_7yiaGsdGejviMQnnnrauoWPlKZnFqUBk/edit?usp=sharing)

Note: This PR is still under progress and it is even not ready to test yet



",False,66,https://api.github.com/repos/MovingBlocks/movingblocks.github.com/pulls/66,https://github.com/MovingBlocks/movingblocks.github.com/pull/66,closed,285,90,14,7,0,0,0,0,[],2021-07-12 18:05:18+00:00,2021-08-07 07:59:14+00:00,2210036.0,"25 days, 13:53:56",[],"[{'commit_sha': 'ac7ffd7af5c6a7d7bc6e38143470404bc8f6fc39', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ee126623fe0489278ddadc51a73026d8d37a54d9', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '6934b11dd2028cfa4ab6ba62f83844fae8fdee60', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a168a2d42d7189dd70621aa1f874e88de3356cd7', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '30b29a78b4e3d9e47f487e8e7f908eccceed3c6e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '09413d8ebc363758588148cea5457b6d495a2e8f', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b95c6bbd8cad492502f3b2f266d979c38f04ac5b', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Yash Patel,49101492,,User,,86,,0,1
688058336,feat: image generation,"This PR introduces a new image generation feature that will help to reuse the blog cover images on the Media page.
This PR also provides a feature to auto-generate the Gsoc and TeraSaturday image 

Screenshot:
![image](https://user-images.githubusercontent.com/49101492/125334670-45612e00-e369-11eb-8f78-58b71450b91a.png)

Reference how to write a blog after this PR is merged [WIP]: [doc](https://docs.google.com/document/d/1MI4YmLEZYn_7yiaGsdGejviMQnnnrauoWPlKZnFqUBk/edit?usp=sharing)

Note: This PR is still under progress and it is even not ready to test yet



",False,66,https://api.github.com/repos/MovingBlocks/movingblocks.github.com/pulls/66,https://github.com/MovingBlocks/movingblocks.github.com/pull/66,closed,285,90,14,7,0,0,0,0,[],2021-07-12 18:05:18+00:00,2021-08-07 07:59:14+00:00,2210036.0,"25 days, 13:53:56",[],"[{'commit_sha': 'ac7ffd7af5c6a7d7bc6e38143470404bc8f6fc39', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ee126623fe0489278ddadc51a73026d8d37a54d9', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '6934b11dd2028cfa4ab6ba62f83844fae8fdee60', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a168a2d42d7189dd70621aa1f874e88de3356cd7', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '30b29a78b4e3d9e47f487e8e7f908eccceed3c6e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '09413d8ebc363758588148cea5457b6d495a2e8f', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b95c6bbd8cad492502f3b2f266d979c38f04ac5b', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Yash Patel,49101492,,User,,86,,0,1
695316306,feat: improving blog searching,"This PR improve the search functionality for blogs and provides multiple option to search blogs and now search box 
can even serach in blogs content

- [x] Improve Search by (By custom regex)
- [x] Fix next previous Issues during seraching
- [X] UI improvements
",True,67,https://api.github.com/repos/MovingBlocks/movingblocks.github.com/pulls/67,https://github.com/MovingBlocks/movingblocks.github.com/pull/67,closed,286,25838,12,16,2,6,0,0,[],2021-07-22 16:11:16+00:00,2021-08-13 16:18:08+00:00,1901212.0,"22 days, 0:06:52","[{'comment_id': 676861209, 'comment_body': 'Can we derive this from the existing blogs rather than hard-coding this here?\r\nWith this being hard-coded, any new blog author would need to add themselves here for the filtering to properly work, would they?', 'comment_created': datetime.datetime(2021, 7, 26, 18, 53, 33, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 676861549, 'comment_body': ""Principally the same comment as above, although for the tags I don't think this is too critical... but still."", 'comment_created': datetime.datetime(2021, 7, 26, 18, 54, 6, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 684554474, 'comment_body': 'You might as well start with a set of your going to do this.', 'comment_created': datetime.datetime(2021, 8, 7, 0, 5, tzinfo=datetime.timezone.utc), 'commenter': 'pollend', 'type': 'User'}, {'comment_id': 684586454, 'comment_body': ""Map requires  array  to log data , Set do not work with Map, that's why i took a array and then removed duplicate entry so that i can  dispaly it in dropdown"", 'comment_created': datetime.datetime(2021, 8, 7, 5, 21, 55, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 684655926, 'comment_body': 'you can do something like this. \r\n```\r\ns = new Set()\r\ns.add(""test"")\r\ns.add(""test1"")\r\ns.add(""test"")\r\n[...s.values()].map(k => k)\r\n```\r\n\r\n\r\n', 'comment_created': datetime.datetime(2021, 8, 7, 17, 8, 1, tzinfo=datetime.timezone.utc), 'commenter': 'pollend', 'type': 'User'}, {'comment_id': 684740848, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 8, 8, 8, 57, 1, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}]","[{'commit_sha': '5a85ce96fec8517a37b52838b6ed8ca40da3a92b', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '1b64f3439d781cb3240dc4e9f11c30599e03ad18', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '61ddad3310348141751b09591b59262405abe51c', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '604e00f53971c259ca1518821f89fcc570d6e801', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a55bfb0e0a52411289c18cbcf124aa05745bc4fa', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '93b8769dcfe509648643863744b6055388aaba95', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'cc6ac6f8dc480fb3a7235e0c42125d43c174b756', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '08e00baeacb862ef2f50446e9347ebe08ff458e5', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '3df5799374ebd96f367ece6ba621bc22da66f1f8', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '3a25a7f42073e70cfdb83b843ef70389952a6065', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '09ca77ce6477bca5dada2ebef4a16a895ed8bcda', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '83c759d2fdf4bb97d836c0da673c2b9c8072f3ae', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '4d7a4914858f51630f8549f0c412f00e78506523', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '8ebaa50af07a5567e4d78d5ca1278c1cb4e3330f', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'd70ec9660e289d85559e882ad0bfb67dfad46f01', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '0462104634f4479941c7a8e3c34e6a9d9febf788', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Yash Patel,49101492,,User,,86,,0,1
688058336,feat: image generation,"This PR introduces a new image generation feature that will help to reuse the blog cover images on the Media page.
This PR also provides a feature to auto-generate the Gsoc and TeraSaturday image 

Screenshot:
![image](https://user-images.githubusercontent.com/49101492/125334670-45612e00-e369-11eb-8f78-58b71450b91a.png)

Reference how to write a blog after this PR is merged [WIP]: [doc](https://docs.google.com/document/d/1MI4YmLEZYn_7yiaGsdGejviMQnnnrauoWPlKZnFqUBk/edit?usp=sharing)

Note: This PR is still under progress and it is even not ready to test yet



",False,66,https://api.github.com/repos/MovingBlocks/movingblocks.github.com/pulls/66,https://github.com/MovingBlocks/movingblocks.github.com/pull/66,closed,285,90,14,7,0,0,0,0,[],2021-07-12 18:05:18+00:00,2021-08-07 07:59:14+00:00,2210036.0,"25 days, 13:53:56",[],"[{'commit_sha': 'ac7ffd7af5c6a7d7bc6e38143470404bc8f6fc39', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ee126623fe0489278ddadc51a73026d8d37a54d9', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '6934b11dd2028cfa4ab6ba62f83844fae8fdee60', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a168a2d42d7189dd70621aa1f874e88de3356cd7', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '30b29a78b4e3d9e47f487e8e7f908eccceed3c6e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '09413d8ebc363758588148cea5457b6d495a2e8f', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b95c6bbd8cad492502f3b2f266d979c38f04ac5b', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Yash Patel,49101492,,User,,86,,0,1
697693048,Footer,"ScreenShot:

![image](https://user-images.githubusercontent.com/49101492/127780411-95d7ab0a-c111-4c2f-9a95-837e42501ed6.png)

",True,68,https://api.github.com/repos/MovingBlocks/movingblocks.github.com/pulls/68,https://github.com/MovingBlocks/movingblocks.github.com/pull/68,closed,173,117,5,8,0,0,0,0,[],2021-07-27 09:30:40+00:00,2021-08-06 06:23:03+00:00,852743.0,"9 days, 20:52:23",[],"[{'commit_sha': '5d5ab8463d60e187da76a89b4e91051507acf89c', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'c3ba05d19387a6785acc0e6545aec30e78782217', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '6ac4364c0917ac527a9eaea54da1ccc3076e98d4', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'f98fa361039d6b76d4f4a777b73fa8f19998f029', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '6935403e0ed5e89bc22137ee6aac29ee88217f80', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ac167a1ff285da2632b4f4584405992f43e8e2a0', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '8b002cc136ac1083c88019178b1accb446599714', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'dbc7ce66f3f3cedb5db98c414dc7fb030a141d2e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Yash Patel,49101492,,User,,86,,0,1
697693048,Footer,"ScreenShot:

![image](https://user-images.githubusercontent.com/49101492/127780411-95d7ab0a-c111-4c2f-9a95-837e42501ed6.png)

",True,68,https://api.github.com/repos/MovingBlocks/movingblocks.github.com/pulls/68,https://github.com/MovingBlocks/movingblocks.github.com/pull/68,closed,173,117,5,8,0,0,0,0,[],2021-07-27 09:30:40+00:00,2021-08-06 06:23:03+00:00,852743.0,"9 days, 20:52:23",[],"[{'commit_sha': '5d5ab8463d60e187da76a89b4e91051507acf89c', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'c3ba05d19387a6785acc0e6545aec30e78782217', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '6ac4364c0917ac527a9eaea54da1ccc3076e98d4', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'f98fa361039d6b76d4f4a777b73fa8f19998f029', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '6935403e0ed5e89bc22137ee6aac29ee88217f80', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ac167a1ff285da2632b4f4584405992f43e8e2a0', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '8b002cc136ac1083c88019178b1accb446599714', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'dbc7ce66f3f3cedb5db98c414dc7fb030a141d2e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Yash Patel,49101492,,User,,86,,0,1
699301774,Feat: Navbar improvements,"ScreenShot:
![image](https://user-images.githubusercontent.com/49101492/129076603-e705a92c-9d80-4d7a-90e8-e20b03a8c3c1.png)


Note: ""Github corner"" has been removed due to overlapping issues on mobile view",True,69,https://api.github.com/repos/MovingBlocks/movingblocks.github.com/pulls/69,https://github.com/MovingBlocks/movingblocks.github.com/pull/69,closed,105,58,6,11,0,0,0,0,[],2021-07-29 08:01:19+00:00,2021-08-12 18:33:44+00:00,1247545.0,"14 days, 10:32:25",[],"[{'commit_sha': '91ab9f6ccda4e99e1cb26dab5744cfaba01d4452', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ec63219fa86746f3fb35a249e8a37e0b98a1227a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'c53780298a0e4c555f3524183572997dacc2741c', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'e13a253c29c87563d649b4edc6923feda4f5e637', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'bb418a957f3993f81748142fe3e691cdc8116562', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '5e16e088927ce244fcb6df28e468ff2e12d2e7f8', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '23c9d28a00137fc9a9ce4d17af7777d3620a1810', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '7033d4f9bdabb57dab919faa749c77663e9b01d7', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '99f6a9a56fc96854594dace28f90cdba63a46f28', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '92d368d0117409f2a9caf7d27ac20cbbc8f514b2', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '5e9dde86299cc548dea9de00bee400f87397fcb1', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Yash Patel,49101492,,User,,86,,0,1
688058336,feat: image generation,"This PR introduces a new image generation feature that will help to reuse the blog cover images on the Media page.
This PR also provides a feature to auto-generate the Gsoc and TeraSaturday image 

Screenshot:
![image](https://user-images.githubusercontent.com/49101492/125334670-45612e00-e369-11eb-8f78-58b71450b91a.png)

Reference how to write a blog after this PR is merged [WIP]: [doc](https://docs.google.com/document/d/1MI4YmLEZYn_7yiaGsdGejviMQnnnrauoWPlKZnFqUBk/edit?usp=sharing)

Note: This PR is still under progress and it is even not ready to test yet



",False,66,https://api.github.com/repos/MovingBlocks/movingblocks.github.com/pulls/66,https://github.com/MovingBlocks/movingblocks.github.com/pull/66,closed,285,90,14,7,0,0,0,0,[],2021-07-12 18:05:18+00:00,2021-08-07 07:59:14+00:00,2210036.0,"25 days, 13:53:56",[],"[{'commit_sha': 'ac7ffd7af5c6a7d7bc6e38143470404bc8f6fc39', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ee126623fe0489278ddadc51a73026d8d37a54d9', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '6934b11dd2028cfa4ab6ba62f83844fae8fdee60', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a168a2d42d7189dd70621aa1f874e88de3356cd7', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '30b29a78b4e3d9e47f487e8e7f908eccceed3c6e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '09413d8ebc363758588148cea5457b6d495a2e8f', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b95c6bbd8cad492502f3b2f266d979c38f04ac5b', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Yash Patel,49101492,,User,,86,,0,1
705872112,Feat: Image Generation & Blog Migration,"This PR introduce the image generation process which makes easy for author to write a blog and overlay text and logo on cover image.This PR also includes the blog migration task

- [x] Blog Migration
- [x] Image Generation
- [ ] Replace blog cover image with generated images
- [ ] Fix content, links & images inside a paticular blog",False,71,https://api.github.com/repos/MovingBlocks/movingblocks.github.com/pulls/71,https://github.com/MovingBlocks/movingblocks.github.com/pull/71,closed,2077,9,157,5,0,0,0,0,[],2021-08-07 10:34:36+00:00,2021-08-08 19:30:02+00:00,118526.0,"1 day, 8:55:26",[],"[{'commit_sha': '17e45f7c6cea78ef4742271742381dd2bef9b044', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b1e0cfd77194f37684bc507ef0d06f130c6e54e1', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '03067a52d8cd8fb5c130fde2d2ebea2f4bc4d56d', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'c1591d87df0780e6bf30498badda53b17777297f', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a0d220a71afac36464885d50ae5ec4a1e9812755', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Yash Patel,49101492,,User,,86,,0,1
705872112,Feat: Image Generation & Blog Migration,"This PR introduce the image generation process which makes easy for author to write a blog and overlay text and logo on cover image.This PR also includes the blog migration task

- [x] Blog Migration
- [x] Image Generation
- [ ] Replace blog cover image with generated images
- [ ] Fix content, links & images inside a paticular blog",False,71,https://api.github.com/repos/MovingBlocks/movingblocks.github.com/pulls/71,https://github.com/MovingBlocks/movingblocks.github.com/pull/71,closed,2077,9,157,5,0,0,0,0,[],2021-08-07 10:34:36+00:00,2021-08-08 19:30:02+00:00,118526.0,"1 day, 8:55:26",[],"[{'commit_sha': '17e45f7c6cea78ef4742271742381dd2bef9b044', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b1e0cfd77194f37684bc507ef0d06f130c6e54e1', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '03067a52d8cd8fb5c130fde2d2ebea2f4bc4d56d', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'c1591d87df0780e6bf30498badda53b17777297f', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a0d220a71afac36464885d50ae5ec4a1e9812755', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Yash Patel,49101492,,User,,86,,0,1
695316306,feat: improving blog searching,"This PR improve the search functionality for blogs and provides multiple option to search blogs and now search box 
can even serach in blogs content

- [x] Improve Search by (By custom regex)
- [x] Fix next previous Issues during seraching
- [X] UI improvements
",True,67,https://api.github.com/repos/MovingBlocks/movingblocks.github.com/pulls/67,https://github.com/MovingBlocks/movingblocks.github.com/pull/67,closed,286,25838,12,16,2,6,0,0,[],2021-07-22 16:11:16+00:00,2021-08-13 16:18:08+00:00,1901212.0,"22 days, 0:06:52","[{'comment_id': 676861209, 'comment_body': 'Can we derive this from the existing blogs rather than hard-coding this here?\r\nWith this being hard-coded, any new blog author would need to add themselves here for the filtering to properly work, would they?', 'comment_created': datetime.datetime(2021, 7, 26, 18, 53, 33, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 676861549, 'comment_body': ""Principally the same comment as above, although for the tags I don't think this is too critical... but still."", 'comment_created': datetime.datetime(2021, 7, 26, 18, 54, 6, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 684554474, 'comment_body': 'You might as well start with a set of your going to do this.', 'comment_created': datetime.datetime(2021, 8, 7, 0, 5, tzinfo=datetime.timezone.utc), 'commenter': 'pollend', 'type': 'User'}, {'comment_id': 684586454, 'comment_body': ""Map requires  array  to log data , Set do not work with Map, that's why i took a array and then removed duplicate entry so that i can  dispaly it in dropdown"", 'comment_created': datetime.datetime(2021, 8, 7, 5, 21, 55, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 684655926, 'comment_body': 'you can do something like this. \r\n```\r\ns = new Set()\r\ns.add(""test"")\r\ns.add(""test1"")\r\ns.add(""test"")\r\n[...s.values()].map(k => k)\r\n```\r\n\r\n\r\n', 'comment_created': datetime.datetime(2021, 8, 7, 17, 8, 1, tzinfo=datetime.timezone.utc), 'commenter': 'pollend', 'type': 'User'}, {'comment_id': 684740848, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 8, 8, 8, 57, 1, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}]","[{'commit_sha': '5a85ce96fec8517a37b52838b6ed8ca40da3a92b', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '1b64f3439d781cb3240dc4e9f11c30599e03ad18', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '61ddad3310348141751b09591b59262405abe51c', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '604e00f53971c259ca1518821f89fcc570d6e801', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a55bfb0e0a52411289c18cbcf124aa05745bc4fa', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '93b8769dcfe509648643863744b6055388aaba95', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'cc6ac6f8dc480fb3a7235e0c42125d43c174b756', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '08e00baeacb862ef2f50446e9347ebe08ff458e5', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '3df5799374ebd96f367ece6ba621bc22da66f1f8', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '3a25a7f42073e70cfdb83b843ef70389952a6065', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '09ca77ce6477bca5dada2ebef4a16a895ed8bcda', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '83c759d2fdf4bb97d836c0da673c2b9c8072f3ae', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '4d7a4914858f51630f8549f0c412f00e78506523', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '8ebaa50af07a5567e4d78d5ca1278c1cb4e3330f', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'd70ec9660e289d85559e882ad0bfb67dfad46f01', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '0462104634f4479941c7a8e3c34e6a9d9febf788', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Yash Patel,49101492,,User,,86,,0,1
705872112,Feat: Image Generation & Blog Migration,"This PR introduce the image generation process which makes easy for author to write a blog and overlay text and logo on cover image.This PR also includes the blog migration task

- [x] Blog Migration
- [x] Image Generation
- [ ] Replace blog cover image with generated images
- [ ] Fix content, links & images inside a paticular blog",False,71,https://api.github.com/repos/MovingBlocks/movingblocks.github.com/pulls/71,https://github.com/MovingBlocks/movingblocks.github.com/pull/71,closed,2077,9,157,5,0,0,0,0,[],2021-08-07 10:34:36+00:00,2021-08-08 19:30:02+00:00,118526.0,"1 day, 8:55:26",[],"[{'commit_sha': '17e45f7c6cea78ef4742271742381dd2bef9b044', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b1e0cfd77194f37684bc507ef0d06f130c6e54e1', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '03067a52d8cd8fb5c130fde2d2ebea2f4bc4d56d', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'c1591d87df0780e6bf30498badda53b17777297f', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a0d220a71afac36464885d50ae5ec4a1e9812755', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Yash Patel,49101492,,User,,86,,0,1
673334790,feat: module generation pipeline,"https://github.com/MovingBlocks/ModuleSite/issues/43 Module Generation pipeline

Diagram:
![image](https://user-images.githubusercontent.com/49101492/122543418-63c55980-d049-11eb-8b44-0e223b5bfdef.png)
",True,57,https://api.github.com/repos/MovingBlocks/movingblocks.github.com/pulls/57,https://github.com/MovingBlocks/movingblocks.github.com/pull/57,closed,208,0,7,35,0,123,0,0,[],2021-06-18 09:55:54+00:00,2021-07-27 20:18:01+00:00,3406927.0,"39 days, 10:22:07","[{'comment_id': 654322420, 'comment_body': ""Why do we need to write this to a file and then read and process it from there.\r\nI don't think this is necessary and you can parse the response directly."", 'comment_created': datetime.datetime(2021, 6, 18, 10, 28, 17, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 654323419, 'comment_body': ""I'd propose to directly try to get contents of `module.txt` here and properly handle the error that will be thrown if the file does not exist."", 'comment_created': datetime.datetime(2021, 6, 18, 10, 29, 58, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 654323871, 'comment_body': ""as discussed in the last meeting: stick with one and fall back to a default text if that's not present\r\nno need to overcomplicate things here."", 'comment_created': datetime.datetime(2021, 6, 18, 10, 30, 44, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 654324765, 'comment_body': ""Why? I generally noticed, that there's a lot of style issues in your PRs such as incorrect indentation, mixed intendations using spaces or tabs, unnecessary empty lines, etc. I recommend the use of an IDE and its formatting options. For instance, for intellij, you can use Ctrl+Alt+L to format files."", 'comment_created': datetime.datetime(2021, 6, 18, 10, 32, 10, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 654326888, 'comment_body': 'Why go the detour over an additional variable if you can already collect the tags above?', 'comment_created': datetime.datetime(2021, 6, 18, 10, 36, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 654492285, 'comment_body': ""Utilize python's inbuilt `capitalize()` method here to avoid multiple `if` conditions."", 'comment_created': datetime.datetime(2021, 6, 18, 14, 49, 44, tzinfo=datetime.timezone.utc), 'commenter': 'majordwarf', 'type': 'User'}, {'comment_id': 654492890, 'comment_body': ""Setup ES Lint or Prettier on your VS Code, that'll help to avoid such situations."", 'comment_created': datetime.datetime(2021, 6, 18, 14, 50, 30, tzinfo=datetime.timezone.utc), 'commenter': 'majordwarf', 'type': 'User'}, {'comment_id': 654768259, 'comment_body': 'Did that during frontmatter generation (frontmatter.py line no 93 to 97)', 'comment_created': datetime.datetime(2021, 6, 19, 8, 34, 52, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 654778263, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 19, 10, 15, 55, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 654779480, 'comment_body': 'Done ', 'comment_created': datetime.datetime(2021, 6, 19, 10, 29, 11, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 654780379, 'comment_body': 'This check is for the safer side, If modules.txt does not exist, just exit and it is not a module, I think directly getting content will make code look a bit complicated, If module.txt is not present it will return some error or null and that will require the try-catch block to handle it', 'comment_created': datetime.datetime(2021, 6, 19, 10, 38, 10, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 654940936, 'comment_body': ""not sure if I'm missing something here, but do we expect `parseData['isGameplay']` to fail if directly before we checked that `isGameplay` is in `parseData`? :thinking: "", 'comment_created': datetime.datetime(2021, 6, 20, 14, 6, 26, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 654941520, 'comment_body': 'why not do a ""-1"" in the `range` above instead?', 'comment_created': datetime.datetime(2021, 6, 20, 14, 10, 47, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 654941809, 'comment_body': 'as discussed in yesterday\'s meeting, there\'s no need to loop through everything here.\r\njust do a single `get_contents` for each of ""module.txt"", ""README.md"" and the banner and be sure to log it if any of those fails.', 'comment_created': datetime.datetime(2021, 6, 20, 14, 13, 5, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 654942118, 'comment_body': 'nitpick: typically the loop variable is named the singular while what it\'s looping through is called the plural version of whatever the subject is, i.e. in your case ""folders""', 'comment_created': datetime.datetime(2021, 6, 20, 14, 15, 36, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 654942176, 'comment_body': '""yes""?', 'comment_created': datetime.datetime(2021, 6, 20, 14, 16, 1, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 654942344, 'comment_body': ""what if there's no logo available? did I overlook the `else` path?"", 'comment_created': datetime.datetime(2021, 6, 20, 14, 17, 37, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 654942544, 'comment_body': 'maybe we can find a better default for this. could be something along the lines of ""XYZ is a (could add the first tag here or so) module for Terasology.""', 'comment_created': datetime.datetime(2021, 6, 20, 14, 19, 26, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 654974185, 'comment_body': 'done changes\r\n', 'comment_created': datetime.datetime(2021, 6, 20, 18, 48, 46, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 654974230, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 20, 18, 49, 3, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 654975530, 'comment_body': 'This is just a small check, handled on scrape.py\r\n', 'comment_created': datetime.datetime(2021, 6, 20, 19, 1, 46, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 654976586, 'comment_body': ""we have to check for that because module.txt doesn't have all the keys , if the key is not present how it will parse data from module.txt, so first I have to check for the keys are present or not , if yes then parse data else nothing"", 'comment_created': datetime.datetime(2021, 6, 20, 19, 11, 39, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 655626394, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 6, 21, 18, 51, 23, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 655626466, 'comment_body': 'removed', 'comment_created': datetime.datetime(2021, 6, 21, 18, 51, 31, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 655627664, 'comment_body': ""Can you provide a text of 3 to 4 lines so that our cards description don't look empty"", 'comment_created': datetime.datetime(2021, 6, 21, 18, 53, 28, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 659358723, 'comment_body': 'In declarative Jenkinsfile syntax, you do not need to use try/catch, but rather ""post"" (see https://www.jenkins.io/doc/book/pipeline/jenkinsfile/#handling-failure)', 'comment_created': datetime.datetime(2021, 6, 27, 18, 24, 29, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 659359483, 'comment_body': 'You do not need all this.\r\nThe exit status on running `diff` is sufficient to tell whether things are different or not.\r\n\r\nFrom the manpage: ""Exit status is 0 if inputs are the same, 1 if different, 2 if trouble.""', 'comment_created': datetime.datetime(2021, 6, 27, 18, 31, 53, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 659360359, 'comment_body': 'then at least provide a comment here, that explains this.', 'comment_created': datetime.datetime(2021, 6, 27, 18, 39, 47, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 664130083, 'comment_body': ""I wonder if it would make more sense to do the following:\r\n- loop through the content lines\r\n- use `startswith()` to identify the right one\r\n- get the index for the `=`\r\n- get the slice starting after that index\r\n- split on ','"", 'comment_created': datetime.datetime(2021, 7, 5, 21, 21, 28, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 664130360, 'comment_body': 'Does this start with a capital letter on purpose?', 'comment_created': datetime.datetime(2021, 7, 5, 21, 22, 24, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 664130420, 'comment_body': 'Does this start with a capital letter on purpose?', 'comment_created': datetime.datetime(2021, 7, 5, 21, 22, 40, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 664130460, 'comment_body': 'see above', 'comment_created': datetime.datetime(2021, 7, 5, 21, 22, 53, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 664130684, 'comment_body': 'Should we return in this case here?', 'comment_created': datetime.datetime(2021, 7, 5, 21, 24, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 664136163, 'comment_body': 'If you want to do this here I\'d argue to also do something similar for the readme here.\r\nOtherwise you\'ll have two different places (scripts) in which you\'re handling the ""fallback"" for readme or banner not being present', 'comment_created': datetime.datetime(2021, 7, 5, 21, 49, 18, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 664136503, 'comment_body': '```suggestion\r\nIndexDir = ""./scrape-data/""\r\n```', 'comment_created': datetime.datetime(2021, 7, 5, 21, 51, 4, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 664136562, 'comment_body': '```suggestion\r\nfor moduleDir in os.listdir(DIR):\r\n```', 'comment_created': datetime.datetime(2021, 7, 5, 21, 51, 18, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 664136840, 'comment_body': 'can you make the variable names a bit more specific?', 'comment_created': datetime.datetime(2021, 7, 5, 21, 52, 10, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 664136905, 'comment_body': '```suggestion\r\n    # check for module.txt to get information about module\r\n```', 'comment_created': datetime.datetime(2021, 7, 5, 21, 52, 28, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 664137652, 'comment_body': ""I wonder whether we actually need this check. If there is no `module.txt` for a module the scrape stage shouldn't have created a directory for that module anyway, shouldn't it? And the following steps should probably be in a try-catch anyway so you could also just assume the file is there and catch the respective error if it's not :thinking: "", 'comment_created': datetime.datetime(2021, 7, 5, 21, 55, 43, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 664138201, 'comment_body': ""I'd move this up to where you define `moduleFile`"", 'comment_created': datetime.datetime(2021, 7, 5, 21, 58, 24, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 664138840, 'comment_body': ""Why do you statically use the fallback banner here?\r\nFor one, you're currently handling the case in which no banner is present already on scrape and copy the default banner, right? And secondly, even if you didn't, shouldn't you first check whether there is a banner present in the scrape result?"", 'comment_created': datetime.datetime(2021, 7, 5, 22, 1, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 664139269, 'comment_body': 'Do you ever close this?\r\nYou could consider using `with open() as indexMd:`, thus as soon as you exit that scope, the file will be closed.', 'comment_created': datetime.datetime(2021, 7, 5, 22, 2, 59, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 664143656, 'comment_body': 'what is this expression supposed to achieve?', 'comment_created': datetime.datetime(2021, 7, 5, 22, 26, 26, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 664144181, 'comment_body': ""I don't fully understand what the intention behind this piece of logic is, can you please explain what you want to achieve here?"", 'comment_created': datetime.datetime(2021, 7, 5, 22, 29, 13, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 664144316, 'comment_body': 'this seems less like ""loading"" modules, but rather like ""uploading"" them :thinking: ', 'comment_created': datetime.datetime(2021, 7, 5, 22, 30, 11, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 665636736, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 7, 19, 6, 15, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 665642472, 'comment_body': 'Can you explain a bit more like what to return , we do not have any function here to return something', 'comment_created': datetime.datetime(2021, 7, 7, 19, 15, 40, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 665648854, 'comment_body': 'We don\'t have to do this for Readme, in the case of the image we are creating a default image because we don\'t want our Module cove image to be empty, in the case of readme we are appending content of readme in ""index. MD"" and I\'m doing safe check-in frontmatter for readme, if it does not found readme it will append some text, you can check line no 67 to 71 in ""frontmatter.py""', 'comment_created': datetime.datetime(2021, 7, 7, 19, 26, 43, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 665678139, 'comment_body': 'done\r\n', 'comment_created': datetime.datetime(2021, 7, 7, 20, 16, 37, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 665678208, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 7, 20, 16, 44, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 665678352, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 7, 20, 17, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 665681103, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 7, 20, 21, 37, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 665682201, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2021, 7, 7, 20, 23, 32, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 665682826, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 7, 20, 24, 39, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 665688274, 'comment_body': 'So, after scraping and getting our all module data, I try to copy the last successful build that is stored in the artifact, and the ""archive()"" function check is there any change between the last successful build and module data inside ""./module"" , if it finds any changes it creates a new artifact of current build, if not then we print ""no changes in modules"". if we don\'t found any last successful build or it is the first build we just create artifact of current build', 'comment_created': datetime.datetime(2021, 7, 7, 20, 34, 14, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 665689300, 'comment_body': 'it will clone ModuleSite and discard the old modules and load new modules and create PR to ModuleSite', 'comment_created': datetime.datetime(2021, 7, 7, 20, 35, 56, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 665689814, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 7, 20, 36, 49, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 665689963, 'comment_body': '> Why is the Jenkinsfile in here twice?\r\n\r\nremoved', 'comment_created': datetime.datetime(2021, 7, 7, 20, 37, 6, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 667538756, 'comment_body': ""```suggestion\r\n        stage('load data') {\r\n```"", 'comment_created': datetime.datetime(2021, 7, 11, 21, 37, 30, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667539003, 'comment_body': '```suggestion\r\nThe automation focuses on gathering information about modules listed as part of the `omega` distro in the [Index repository](https://github.com/Terasology/Index/blob/master/distros/omega/gradle.properties) and exhibit the generated information on the [ModuleSite](https://github.com/MovingBlocks/ModuleSite).\r\nBoth steps are performed in a [Jenkins pipeline](https://www.jenkins.io/doc/book/pipeline/).\r\n```', 'comment_created': datetime.datetime(2021, 7, 11, 21, 40, 9, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667539539, 'comment_body': '```suggestion\r\nThe pipeline will be run periodically as a cron job, so that the ModuleSite is up-to-date with any changes in module information.\r\n```', 'comment_created': datetime.datetime(2021, 7, 11, 21, 44, 56, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667540093, 'comment_body': '```suggestion\r\nAt the starting stage of the pipeline, the ""scrape"" script sends API calls to GitHub to fetch all required information from the Index repository, i.e. `module.txt`, and optionally the `README.md` and a cover image.\r\nIf `README.md` or the cover image are not available. we will fallback to a default image and a default readme text.\r\nAfterwards, the ""frontmatter"" script prepares the collected information for display on the ModuleSite.\r\n```', 'comment_created': datetime.datetime(2021, 7, 11, 21, 50, 22, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667540136, 'comment_body': 'This is not up-to-date anymore.', 'comment_created': datetime.datetime(2021, 7, 11, 21, 50, 51, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667540246, 'comment_body': '```suggestion\r\nscrapeDataDir = ""./scrape-data/""\r\n```', 'comment_created': datetime.datetime(2021, 7, 11, 21, 52, 3, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667540731, 'comment_body': '1. `getModuledata` is a weird name for a file object :thinking: \r\n2. do you close this somewhere again?\r\n3. consider using `with open([...]) as moduleMetadataFile:`', 'comment_created': datetime.datetime(2021, 7, 11, 21, 57, 23, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667540765, 'comment_body': '```suggestion\r\n    moduleMetadata = getModuledata.read()\r\n```', 'comment_created': datetime.datetime(2021, 7, 11, 21, 57, 44, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667540849, 'comment_body': ""the parsing is not really done yet, so this is not really parsed data yet. it's still the same data, only loaded as json..."", 'comment_created': datetime.datetime(2021, 7, 11, 21, 58, 31, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667540970, 'comment_body': ""I'd also recommend to use the `with open` here and two lines below. thus, you don't have to manually take care you close them, but python does this automagically once you leave the inner scope"", 'comment_created': datetime.datetime(2021, 7, 11, 22, 0, 11, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667541146, 'comment_body': 'this name is a bit ambiguous wrt the `Index` module', 'comment_created': datetime.datetime(2021, 7, 11, 22, 1, 33, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667541168, 'comment_body': 'this is the whole content, not only the modules', 'comment_created': datetime.datetime(2021, 7, 11, 22, 1, 58, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667541304, 'comment_body': '`getModules` is a good name for a method, but not for a variable', 'comment_created': datetime.datetime(2021, 7, 11, 22, 2, 58, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667541359, 'comment_body': '```suggestion\r\n        modules=line[13:].split("","")\r\n```', 'comment_created': datetime.datetime(2021, 7, 11, 22, 3, 29, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667541415, 'comment_body': 'what exactly do you need this condition for?', 'comment_created': datetime.datetime(2021, 7, 11, 22, 4, 1, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667541430, 'comment_body': '```suggestion\r\nfor module in modules:\r\n```', 'comment_created': datetime.datetime(2021, 7, 11, 22, 4, 16, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667541436, 'comment_body': '```suggestion\r\n        repository=user.get_repo(module)\r\n```', 'comment_created': datetime.datetime(2021, 7, 11, 22, 4, 32, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667541658, 'comment_body': 'again, those are good names for methods, but not for variables.\r\nmethod names are typically actions that indicate what is done in the method.\r\nvariable names should be passive descriptions of what information they store.', 'comment_created': datetime.datetime(2021, 7, 11, 22, 6, 51, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667542142, 'comment_body': 'the readme not being there is not the only error that can occur and lead into the `except` case... I\'d propose to go for ""Couldn\'t fetch README.md"" here and also print the error.', 'comment_created': datetime.datetime(2021, 7, 11, 22, 10, 44, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667542215, 'comment_body': 'Did you want to replace this with the default text I wrote for you?', 'comment_created': datetime.datetime(2021, 7, 11, 22, 11, 33, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 667542260, 'comment_body': '```suggestion\r\n\r\n```', 'comment_created': datetime.datetime(2021, 7, 11, 22, 11, 48, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669003350, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 13, 18, 15, 36, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669003421, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 13, 18, 15, 42, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669003483, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 13, 18, 15, 47, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669003569, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 13, 18, 15, 54, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669003698, 'comment_body': 'changed', 'comment_created': datetime.datetime(2021, 7, 13, 18, 16, 5, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669003821, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 13, 18, 16, 15, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669003888, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 13, 18, 16, 22, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669003986, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 13, 18, 16, 28, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669004127, 'comment_body': 'done ', 'comment_created': datetime.datetime(2021, 7, 13, 18, 16, 41, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669004280, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 13, 18, 16, 54, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669004336, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 13, 18, 17, 1, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669004465, 'comment_body': 'done changes', 'comment_created': datetime.datetime(2021, 7, 13, 18, 17, 14, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669004581, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 13, 18, 17, 24, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669004739, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 13, 18, 17, 37, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669005952, 'comment_body': ""oh, I forgot to remove that, I don't have an access token so I test it for 2 to 3 modules so that  I do not exceed the limit of api calls,Removed"", 'comment_created': datetime.datetime(2021, 7, 13, 18, 19, 40, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669006009, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 13, 18, 19, 46, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669006067, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 13, 18, 19, 52, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669006151, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 13, 18, 20, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669006248, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 13, 18, 20, 8, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669006413, 'comment_body': 'yes, replaced', 'comment_created': datetime.datetime(2021, 7, 13, 18, 20, 21, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669006520, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 13, 18, 20, 28, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669019341, 'comment_body': '```suggestion\r\nThe automation focuses on gathering information about modules listed as part of the `omega` distro in the [Index repository](https://github.com/Terasology/Index/blob/master/distros/omega/gradle.properties) and exhibits the generated information on the [ModuleSite](https://github.com/MovingBlocks/ModuleSite).\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 18, 40, 5, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669026312, 'comment_body': '```suggestion\r\nIf `README.md` or the cover image are not available, we will fallback to a default image and a default readme text.\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 18, 50, 50, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669026559, 'comment_body': '```suggestion\r\n## Loading Modules\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 18, 51, 12, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669027001, 'comment_body': '```suggestion\r\nThis stage simply clones the ModuleSite, copies the modules directory into the cloned ModuleSite and performs git operations to push the changes. All of these actions are performed by `loadModules.sh`.\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 18, 51, 51, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669027159, 'comment_body': ""```suggestion\r\nAt last, the workspace is cleared so that we don't run into errors next time when the pipeline is executed. The same process is repeated periodically.\r\n```"", 'comment_created': datetime.datetime(2021, 7, 13, 18, 52, 6, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669027668, 'comment_body': '```suggestion\r\n        module = json.loads(moduleMetadata)\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 18, 52, 52, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669028565, 'comment_body': '```suggestion\r\n            with open(moduleDst+moduleName+""/cover.png"", mode=""rb"") as imageFile:\r\n                imageFile.write(readSourceImage)\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 18, 54, 19, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669029054, 'comment_body': '```suggestion\r\n        with open(moduleReadme, mode=""r"") as readmeData:\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 18, 55, 5, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669029638, 'comment_body': 'You are still not closing this file object and I still recommend to use `with open` here too.', 'comment_created': datetime.datetime(2021, 7, 13, 18, 56, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669029798, 'comment_body': '```suggestion\r\n        print(e)\r\n\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 18, 56, 13, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669031454, 'comment_body': '```suggestion\r\ngit clone https://github.com/MovingBlocks/ModuleSite.git $MODULEDIR/ModuleSite\r\npushd $MODULEDIR/ModuleSite\r\nrm -R modules\r\npopd\r\ncp -r $MODULES $MODULEDIR/ModuleSite\r\ncd $MODULEDIR/ModuleSite\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 18, 58, 46, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669032253, 'comment_body': 'Why do we need to force-push here?', 'comment_created': datetime.datetime(2021, 7, 13, 19, 0, 3, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669032587, 'comment_body': '```suggestion\r\ngit commit -m ""chore: update module information""\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 19, 0, 36, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669033111, 'comment_body': '```suggestion\r\ncurl -i -H ""Authorization: token $GIT_CREDS"" -X POST ""https://api.github.com/repos/MovingBlocks/ModuleSite/pulls"" -d \'{ ""title"": ""chore: automated update of module information"",\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 19, 1, 22, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669033381, 'comment_body': '```suggestion\r\n ""body"": ""Module information collected and generated using Jenkins pipeline""}\'\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 19, 1, 46, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669033726, 'comment_body': '`indexModules` is still ambiguous, please name it differently', 'comment_created': datetime.datetime(2021, 7, 13, 19, 2, 17, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669034646, 'comment_body': '`decodeModuleContent` is not a reasonable variable name (see my recent comment on method vs variable names)', 'comment_created': datetime.datetime(2021, 7, 13, 19, 3, 52, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669035079, 'comment_body': '```suggestion\r\n        moduleData = json.loads(decodeModuleContent)\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 19, 4, 33, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669035722, 'comment_body': '```suggestion\r\n        print(""Couldn\'t fetch README.md"" + moduleName + "": "" + e)\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 19, 5, 41, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669035985, 'comment_body': 'please also print the caught exception here', 'comment_created': datetime.datetime(2021, 7, 13, 19, 6, 5, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669036258, 'comment_body': 'please also print, why (e.g. response code)', 'comment_created': datetime.datetime(2021, 7, 13, 19, 6, 36, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669036333, 'comment_body': '```suggestion\r\n            defaultImageFile.write(readSourceImage)\r\n\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 19, 6, 46, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 671701163, 'comment_body': '```suggestion\r\n        print(""Couldn\'t fetch cover image on "" + moduleName +"", error code: ""+ response.status_code + "", resolving with default cover image"")\r\n```', 'comment_created': datetime.datetime(2021, 7, 17, 14, 1, 48, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}]","[{'commit_sha': '1fe10c805a770d141ae1310ec89b3cfd5d888ad2', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '57e77b90638b2c6ad78651240afc7804adf658e1', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '7ddfe3b4798a2b5f3d69acb8e5e482fbb6c04e2e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'db149cf914a40d0f23ddc257b3d08d9249d66515', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'd84f55ce5a96af6a8377f43d1729156d2cbe4bda', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '12d6526d30658ad3607c40746df1663890b25cb4', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '402fb5353a48be71d0b60c4c3d147960cd6862b0', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '4ca7316d381771eaa90ce218cbedb237599edc08', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '3f956a214e6219b1214134a3823fcdbe1ca2d116', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '9cd809c72752ac2a0248b8ade81efaf25d255fba', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '1fd1229cd39e66535fa125bc81ff05ec24de04dd', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'fb435d0bc6eca7e52a768c308825d640ff3cf362', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'dc73458d3941eb02678800397e651cbd59c2969c', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'f7d7234ab1102926e463e17c3c72ed1ffe371dfa', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '608855a210c2528dd3381abb685bf523fb110864', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '4d37b3e1fd062a4ce50e88888439bcf70a200c04', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '003b9b8bd5be10917cb67bbb75b142110dbcf0bb', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '63fe545f8d5fb0103b94798b37769b021ab663a0', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '169e85df4a41b89b21e810fbe3a4605f70329d23', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '2a4b82f798c9df5389384eeed906f1b060fdf5d3', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '9f78014768b8e5149f570607cbfd51cfa0df09dc', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'be67cd992c19d3cade963f66c5d5a44e697603fb', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '8e34fb243b139da648dc5734bd71c3ced458b9e9', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'e8087ccc06a42eaa7a52b7b872cbf30e23a36ba3', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'f36ba1b1760c90fbd60332de09ddccc21d80020a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '07a430997147964fd62b6498bb138c9078c90f67', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '0c47a39123883f8dc52d0e37934f39b546a36543', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a2495b323079b44cd33c6bb565cc293f56f9faeb', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '59eb1c1952f62f0223df5a8295a17184eadf8894', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '3e7145169c073153ca2483f855720cd0c57e67ac', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'dab15f52b06ff159d695972156a74ffbdf0be882', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '08866c7faff51bcbe606c9823ba2d92621759bfd', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a5b3733f7969c526538fd4cdec132e5c4e98df1f', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'af313903a9b329fd32b4b20cbecebbbb8b7a2b47', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'acbbd88f277c9e0a738afa9601f49674f5942657', 'committer_username': 'jdrueckert', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 7, 14, 31, 51, tzinfo=datetime.timezone.utc)}]",Yash Patel,49101492,,User,,86,,0,1
675102074,feat: add Module Site Deployment workflow,"This PR includes the Github Actions Workflow of ModuleSite Deployment which uses [Gatsby publish](https://github.com/marketplace/actions/gatsby-publish) template to Deploy  ModuleSite  on gh-pages

Closes #48 ",True,59,https://api.github.com/repos/MovingBlocks/movingblocks.github.com/pulls/59,https://github.com/MovingBlocks/movingblocks.github.com/pull/59,closed,53,1,3,11,0,19,0,0,[],2021-06-22 06:00:49+00:00,2021-07-03 17:45:36+00:00,992687.0,"11 days, 11:44:47","[{'comment_id': 656552865, 'comment_body': ""I think the [checkout action](https://github.com/actions/checkout) as at v2 by now - any reason you're using v1?"", 'comment_created': datetime.datetime(2021, 6, 22, 20, 23, 44, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 656851631, 'comment_body': 'oh, I was referring to the gatsby publish template and for testing i used v1, I forgot that v2 is also available , sorry will update that\r\n', 'comment_created': datetime.datetime(2021, 6, 23, 7, 57, 15, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 656890277, 'comment_body': 'done\r\n', 'comment_created': datetime.datetime(2021, 6, 23, 8, 47, 47, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 659356901, 'comment_body': '```suggestion\r\nname: Publish ModuleSite on gh-pages\r\n```', 'comment_created': datetime.datetime(2021, 6, 27, 18, 8, 49, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 659357072, 'comment_body': '```suggestion\r\n[ModuleSite](https://github.com/MovingBlocks/ModuleSite) uses a [Github Action](https://github.com/features/actions) to automate the deployment process. On every push to `master`, the GitHub action is triggered, builds the ModuleSite and deploys it on\r\n```', 'comment_created': datetime.datetime(2021, 6, 27, 18, 9, 59, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 659357128, 'comment_body': '```suggestion\r\n[GitHub pages](https://docs.github.com/en/pages/getting-started-with-github-pages/about-github-pages)\r\n```', 'comment_created': datetime.datetime(2021, 6, 27, 18, 10, 32, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 659357894, 'comment_body': 'In markdown, you can use `**some bold text**` to get ""**some bold text**""', 'comment_created': datetime.datetime(2021, 6, 27, 18, 16, 48, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 659357997, 'comment_body': '```suggestion\r\n<b>[Gatsby Publish](https://github.com/marketplace/actions/gatsby-publish):</b> Github Action to build and deploy Gatsby site on Github pages.\r\n```', 'comment_created': datetime.datetime(2021, 6, 27, 18, 17, 30, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 659358027, 'comment_body': '```suggestion\r\nEverytime the GitHub action is triggered, it executes `gatsby build` at the root of the repository and deploys it to GitHub pages.\r\n```', 'comment_created': datetime.datetime(2021, 6, 27, 18, 18, 5, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 659358124, 'comment_body': 'This is something that should be rather done as comments in the workflow yaml.', 'comment_created': datetime.datetime(2021, 6, 27, 18, 18, 53, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 663361242, 'comment_body': '```suggestion\r\nFor using the GitHub action, Gatsby Publish provides some configuration options:\r\n```', 'comment_created': datetime.datetime(2021, 7, 3, 12, 44, 34, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 663361345, 'comment_body': '```suggestion\r\n  A GitHub Personal Access Token with access for pushing and creating pull requests. This is required to push builds after building the Site. The access token should be stored as a secret in the repository settings.\r\n```', 'comment_created': datetime.datetime(2021, 7, 3, 12, 45, 40, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 663361379, 'comment_body': '```suggestion\r\n  This is the branch to which all the outputs after executing `gatsby build` will be pushed. This includes static files that were generated during build process.\r\n```', 'comment_created': datetime.datetime(2021, 7, 3, 12, 46, 12, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 663361405, 'comment_body': '```suggestion\r\n  Additional arguments that get passed to `gatsby build`. See the [Gatsby documentation](https://www.gatsbyjs.com/docs/how-to/previews-deploys-hosting/path-prefix/) for a list of allowed options. Provided as an input. Defaults to nothing.\r\n```', 'comment_created': datetime.datetime(2021, 7, 3, 12, 46, 39, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 663361461, 'comment_body': '```suggestion\r\nThe above configuration options are used by the ModuleSite. For more information about the configuration visit Gatsby Publish.\r\n```', 'comment_created': datetime.datetime(2021, 7, 3, 12, 47, 16, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 663361576, 'comment_body': '> visit Gatsby Publish\r\n\r\nI guess you mean the documentation of ""Gatsby Publish""? Please add a link here.', 'comment_created': datetime.datetime(2021, 7, 3, 12, 47, 56, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 663361683, 'comment_body': '```suggestion\r\n> **⚠️ NOTE:** The Gatsby code is located in the root directory. After the build process the `./public` directory is generated. Gatsby does not allow to edit or customize the public directory, so we have to build code every time the Gatsby code changes. Gatsby automatically provides a build script on `Package.json` which is required by the GitHub action to execute the build process.\r\n```', 'comment_created': datetime.datetime(2021, 7, 3, 12, 49, 8, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 663362803, 'comment_body': 'done all the changes\r\n', 'comment_created': datetime.datetime(2021, 7, 3, 13, 0, 25, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 663362837, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 3, 13, 0, 34, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}]","[{'commit_sha': 'fd96d00c80aa2b88de00fa79abb5834248e8e74e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '68407afd0dfc01452c6fc2ae26c9bed89ea823f2', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '5a6b5317a1ac4bb48d219973943877a4f9f5fbf7', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '993ae0c79cea12eb3bcd7b18a32d88aef7c01c4f', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'db0f9880401353ea61fdd889ea84d614bd79ce0b', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'c88a829825927cfa3be2b569726ab83d4b30eba9', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '7c87f23dbc2cc37c570055ee4f7526467c8df17b', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'cb76837739649f6509916f8e0c906ab51e92c948', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '9c264d6fdc276d71d86e9853e02a074e3d19d99d', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ee23fb5d6441b55e06ee1e2bd418d5e5fd1e8b55', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'fda6b39b9d0e3437301392541cdec0d2e4a63ba9', 'committer_username': 'jdrueckert', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 7, 14, 31, 51, tzinfo=datetime.timezone.utc)}]",Yash Patel,49101492,,User,,86,,0,1
669058752,feat: migration from v2 to v3,"Changes included on PR

- [X] Migration from [V2 to V3](https://www.gatsbyjs.com/docs/reference/release-notes/migrating-from-v2-to-v3/)
- [X] Update Gatsby related packages
- [X] Removed image quires sizes, fluid, fixed which was removed from V3
- [X] Migrated from gatsby-image to [gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide/) to fix the issues related to images that occurred during version migration
- [X] Named all components which was directly exported 
```
eg: export default () =>{}  ->  const card = () => {}
```
",True,54,https://api.github.com/repos/MovingBlocks/movingblocks.github.com/pulls/54,https://github.com/MovingBlocks/movingblocks.github.com/pull/54,closed,29834,3600,23,1,1,0,0,0,[],2021-06-13 14:03:38+00:00,2021-06-18 16:00:58+00:00,439040.0,"5 days, 1:57:20",[],"[{'commit_sha': 'b048a14d282f6595fededcfd7caa78231e22260b', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Yash Patel,49101492,,User,,86,,0,1
674330918,feat: migrate CSS to SCSS,"This PR migrate the CSS files in the module site to SCSS , which provide additional functionality to CSS such as variables, nesting, and more",True,58,https://api.github.com/repos/MovingBlocks/movingblocks.github.com/pulls/58,https://github.com/MovingBlocks/movingblocks.github.com/pull/58,closed,308,619,29,9,3,0,0,0,[],2021-06-21 08:20:24+00:00,2021-06-29 11:32:38+00:00,702734.0,"8 days, 3:12:14",[],"[{'commit_sha': 'af90c7e6e4d9a5a8958684bfe6edac0e7b869fd0', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '81fb0fddbf6c3ae3b8f1b5efa5f35759a43429c0', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'fd7051b587ab3302f9cbec1315fdfc06799ef103', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '4ada65a48738fa5e357f841583196dfdcf228073', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '5c990a66614a32301a062ff7d6da17da3de299d4', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '85194d2c82060532182bc8f010053aebd467d109', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '6e9e97ed8155c1ae233dd3220725597dc2357101', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '42e53c208306bff3203bda97c3b53b0d4d40ba5e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '851addf93f4863d786e755e44d931b8dbcdb7cf6', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Yash Patel,49101492,,User,,86,,0,1
681173271,feat: Mentor's page,"This PR introduces the Mentor's Page and uses Trello API  to fetch all the information that is displayed on the mentor's page.
It includes two new react components that are Mentor and Mentor Modal which is used by the mentor's  page

Note: Navbar will be restructured once all the pages are over 

Screenshots:
![image](https://user-images.githubusercontent.com/49101492/124020069-722b5200-da07-11eb-84fa-712c9e0a8c0a.png)

![image](https://user-images.githubusercontent.com/49101492/124020195-9b4be280-da07-11eb-841a-b04c147c18ac.png)

![image](https://user-images.githubusercontent.com/49101492/124028306-78bec700-da11-11eb-9940-8098ee447c30.png)



",True,60,https://api.github.com/repos/MovingBlocks/movingblocks.github.com/pulls/60,https://github.com/MovingBlocks/movingblocks.github.com/pull/60,closed,245,4,10,2,0,6,0,0,[],2021-06-30 19:29:53+00:00,2021-07-02 21:39:14+00:00,180561.0,"2 days, 2:09:21","[{'comment_id': 661766485, 'comment_body': 'Use `try-catch` blocks when using await statements instead of `if-else`.', 'comment_created': datetime.datetime(2021, 6, 30, 19, 49, 43, tzinfo=datetime.timezone.utc), 'commenter': 'majordwarf', 'type': 'User'}, {'comment_id': 661770284, 'comment_body': 'Please keep a blank/newline at end of the file.', 'comment_created': datetime.datetime(2021, 6, 30, 19, 56, 11, tzinfo=datetime.timezone.utc), 'commenter': 'majordwarf', 'type': 'User'}, {'comment_id': 661795234, 'comment_body': ""I use If-else because, in case if API doesn't work  we can display an Alert same as we are displaying on Download Page, just pushed the changes please have a look\r\n"", 'comment_created': datetime.datetime(2021, 6, 30, 20, 38, 51, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 661795287, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 6, 30, 20, 38, 57, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 661957613, 'comment_body': 'you could just keep it as async\r\n\r\nhttps://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch', 'comment_created': datetime.datetime(2021, 7, 1, 4, 13, 40, tzinfo=datetime.timezone.utc), 'commenter': 'pollend', 'type': 'User'}, {'comment_id': 662021860, 'comment_body': ""I think it's the same thing just a bit different syntax we are using JS ES6 and on the doc, it's an older version. If you are talking about directly fetching the information from API , In the future, it might not work and so we need async and await to check response is coming or not\r\n"", 'comment_created': datetime.datetime(2021, 7, 1, 6, 45, 8, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}]","[{'commit_sha': '3180b28a034dd99fb6f6ac624c63c8a7bf178a44', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b8c0c4d2e01ede048fee27b46917807a751caf34', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Yash Patel,49101492,,User,,86,,0,1
683017548,feat: Gsoc & tsoc page,"This PR introduces Gsoc & Tsoc page, which includes two-component  ProjectModal and Gsoc_Tsoc .
This page uses three npm packages to create Carousel and parse HTML and markdown format getting from API

1. https://www.npmjs.com/package/react-multi-carousel
2. https://www.npmjs.com/package/html-react-parser
3. https://www.npmjs.com/package/remarkable

Note: Navbar structure will be improved in separate PR",True,62,https://api.github.com/repos/MovingBlocks/movingblocks.github.com/pulls/62,https://github.com/MovingBlocks/movingblocks.github.com/pull/62,closed,426,24,11,11,5,16,0,0,[],2021-07-03 12:30:05+00:00,2021-07-27 19:36:31+00:00,2099186.0,"24 days, 7:06:26","[{'comment_id': 663371513, 'comment_body': 'Why is this file in here?\r\nLooks like you did not create this branch from master but from another feature branch :thinking: ', 'comment_created': datetime.datetime(2021, 7, 3, 14, 30, 49, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 663371551, 'comment_body': '```suggestion\r\n          GSoC & TSoC @ Terasology{"" ""}\r\n```', 'comment_created': datetime.datetime(2021, 7, 3, 14, 31, 15, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 663371764, 'comment_body': '```suggestion\r\n          Project Details\r\n```', 'comment_created': datetime.datetime(2021, 7, 3, 14, 32, 58, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 663371769, 'comment_body': '```suggestion\r\n          <h6 className=""mt-4 ml-2"">Project Tags:</h6>\r\n```', 'comment_created': datetime.datetime(2021, 7, 3, 14, 33, 6, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 663371819, 'comment_body': '```suggestion\r\n                <b>Google Summer of Code (GSoC)</b> is a global program focused on\r\n```', 'comment_created': datetime.datetime(2021, 7, 3, 14, 33, 33, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 663371972, 'comment_body': '```suggestion\r\n                Google Summer of Code (GSoC) is a global program focused on\r\n                bringing more student developers into open source software\r\n                development. Every year more than 1200 students are\r\n                accepted. Accepted students work with a mentor and become a part\r\n                of the open source community. Many become lifetime open source\r\n                developers. Spend your summer break writing code and learning\r\n                about open source development while earning a stipend. For more\r\n                information, visit{"" ""}\r\n```', 'comment_created': datetime.datetime(2021, 7, 3, 14, 35, 3, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 663372319, 'comment_body': '```suggestion\r\n                Terasology Summer of Code (TSoC) is similar to Google Summer of \r\n                Code (GSoC). It provides more flexible conditions regarding time and \r\n                project scope than GSoC to also suit students that do not have a \r\n                10-week break over the summer. However, as it is sponsored directly \r\n                by Terasology the stipends are lower than with GSoC. For \r\n                more information join our{"" ""}\r\n```', 'comment_created': datetime.datetime(2021, 7, 3, 14, 38, 22, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 663375238, 'comment_body': 'oh , I stash changes and did pop , will remove this files', 'comment_created': datetime.datetime(2021, 7, 3, 15, 8, 3, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 664121873, 'comment_body': 'You missed something :sweat_smile: \r\n```suggestion\r\n                <b> Google Summer of Code (GSoC) </b> is a global program\r\n                focused on bringing more student developers into open source\r\n                software development. Every year more than 1200 students are\r\n                accepted. Accepted students work with a mentor and become a part\r\n                of the open source community. Many become lifetime open source\r\n                developers. Spend your summer break writing code and learning\r\n                about open source development while earning a stipend. for more\r\n                information visit{"" ""}\r\n```', 'comment_created': datetime.datetime(2021, 7, 5, 20, 48, 19, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 664486592, 'comment_body': 'done also added tags on cards please have a look\r\n', 'comment_created': datetime.datetime(2021, 7, 6, 11, 54, 36, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 669692978, 'comment_body': '```suggestion\r\n                <b>Google Summer of Code (GSoC)</b> is a global program\r\n                focused on bringing more student developers into open source\r\n                software development. Every year more than 1200 students are\r\n                accepted. Accepted students work with a mentor and become a part\r\n                of the open source community. Many become lifetime open source\r\n                developers. Spend your summer break writing code and learning\r\n                about open source development while earning a stipend. For more\r\n                information visit{"" ""}\r\n```', 'comment_created': datetime.datetime(2021, 7, 14, 14, 54, 38, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 669795573, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 14, 17, 1, 10, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 670148063, 'comment_body': ""Be consistent with variable naming conventions, we're using camel-case variables everywhere else."", 'comment_created': datetime.datetime(2021, 7, 15, 5, 38, 50, tzinfo=datetime.timezone.utc), 'commenter': 'majordwarf', 'type': 'User'}, {'comment_id': 670149330, 'comment_body': 'Can we name it something more appropriately? `description`?', 'comment_created': datetime.datetime(2021, 7, 15, 5, 42, tzinfo=datetime.timezone.utc), 'commenter': 'majordwarf', 'type': 'User'}, {'comment_id': 671519984, 'comment_body': 'Space after `,`', 'comment_created': datetime.datetime(2021, 7, 16, 20, 54, 31, tzinfo=datetime.timezone.utc), 'commenter': 'majordwarf', 'type': 'User'}, {'comment_id': 671618310, 'comment_body': 'updated', 'comment_created': datetime.datetime(2021, 7, 17, 5, 56, 4, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}]","[{'commit_sha': '1e6919d74b23bfd68f0acd599b84fcaba835017b', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'cbab0da71c8903fdf00d95b735afc2687f57835a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '2ddf0f4e3b0468e32f4a5eae68ed1c55a46aada1', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '9e3ac20159b4e68aca0bdd4b962bab3c28c11aef', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '9901d37719ec914c022cb31432146525c764b0b8', 'committer_username': 'ryuk156', 'committer_name': 'Yash Patel', 'committer_email': None, 'commit_date': datetime.datetime(2019, 3, 30, 16, 40, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99ba22651e9bb31c7ebfd1fc484fb707cfe5a97e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '65a4075f5dff379319b307e7591f21d07a37223f', 'committer_username': 'ryuk156', 'committer_name': 'Yash Patel', 'committer_email': None, 'commit_date': datetime.datetime(2019, 3, 30, 16, 40, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '81a04e7f62886796e5626c092e19acae8349629b', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '9c0c2885f7e6b6aa7f42e2952db19f9cc52b5fac', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '65ee52c646bdba6e5f80f9b703f615620ab57f73', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '42d2370f77a937d78f20dc4bec649df84f294fb0', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Yash Patel,49101492,,User,,86,,0,1
681971346,fix: Game page,"This PR  deals with the issue of Image quality of Game page images and also improve the UI of Game page

Screenshot:
![image](https://user-images.githubusercontent.com/49101492/124151941-b0c91700-dab0-11eb-91fb-4cd649073d3b.png)
",True,61,https://api.github.com/repos/MovingBlocks/movingblocks.github.com/pulls/61,https://github.com/MovingBlocks/movingblocks.github.com/pull/61,closed,193,106,4,5,4,0,0,0,[],2021-07-01 15:40:20+00:00,2021-07-08 10:24:07+00:00,585827.0,"6 days, 18:43:47",[],"[{'commit_sha': 'f6c782ee764e37ef560374f313c53786ddc57f54', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'd579eaa513357c8c06943bbcb8c3751a0b91ab2b', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '2d6231dbe2fc7da8a43190574394b9c80d5cb6d7', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '7fa1a22fbe50097f1d6fa8093644ef5a6a9c85a9', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '2d47d23c3c1d30b1bcd7dea79c1a03ecaaaf464c', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Yash Patel,49101492,,User,,86,,0,1
685185079,feat: introduce lightbox on Media page,"
This PR introduces the Lightbox on the Media page,  improves the quality of images, and also provides a pagination feature to the Media page

Screenshots:
![image](https://user-images.githubusercontent.com/49101492/124764418-8d8be500-df52-11eb-84b2-3777c2fa4056.png)

![image](https://user-images.githubusercontent.com/49101492/124764401-895fc780-df52-11eb-8ed3-34971edba3bc.png)



",True,65,https://api.github.com/repos/MovingBlocks/movingblocks.github.com/pulls/65,https://github.com/MovingBlocks/movingblocks.github.com/pull/65,closed,274,119,9,10,0,4,0,0,[],2021-07-07 13:12:58+00:00,2021-07-10 17:09:33+00:00,273395.0,"3 days, 3:56:35","[{'comment_id': 666058841, 'comment_body': 'Set `opacity` to 0.5', 'comment_created': datetime.datetime(2021, 7, 8, 10, 11, 51, tzinfo=datetime.timezone.utc), 'commenter': 'majordwarf', 'type': 'User'}, {'comment_id': 666059341, 'comment_body': 'You removed the hook but forgot to remove associated event handler `setblur`.', 'comment_created': datetime.datetime(2021, 7, 8, 10, 12, 34, tzinfo=datetime.timezone.utc), 'commenter': 'majordwarf', 'type': 'User'}, {'comment_id': 666132379, 'comment_body': 'done\r\n', 'comment_created': datetime.datetime(2021, 7, 8, 12, 8, 50, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 666132423, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 8, 12, 8, 55, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}]","[{'commit_sha': 'a84ea98b312e8e4d95bc9b8e565f389375e1114c', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '397943708b800b2a5a224546001c5d9d82c25c42', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'f97a13db11902dd9e53c820934e2b9cb75e89cea', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '746c09162e03aa57c584fdfe417aaee2605e3dc1', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '55822fe3b4f77257e730c77c74e0241059b2f50d', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '4391274929e4e0473ba2f58cb67c9bb72ef0e915', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '3add5a2aad814d7a6533bc83309a3fc3762d1803', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '4d5580d3bfda21f361e49fd879e576a92ddbcc2a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'e65fd42158105f3d537e874727d3867e08a8eb42', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '3c84b92538fff1d707b902b2a6d644814709e513', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Yash Patel,49101492,,User,,86,,0,1
697693048,Footer,"ScreenShot:

![image](https://user-images.githubusercontent.com/49101492/127780411-95d7ab0a-c111-4c2f-9a95-837e42501ed6.png)

",True,68,https://api.github.com/repos/MovingBlocks/movingblocks.github.com/pulls/68,https://github.com/MovingBlocks/movingblocks.github.com/pull/68,closed,173,117,5,8,0,0,0,0,[],2021-07-27 09:30:40+00:00,2021-08-06 06:23:03+00:00,852743.0,"9 days, 20:52:23",[],"[{'commit_sha': '5d5ab8463d60e187da76a89b4e91051507acf89c', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'c3ba05d19387a6785acc0e6545aec30e78782217', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '6ac4364c0917ac527a9eaea54da1ccc3076e98d4', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'f98fa361039d6b76d4f4a777b73fa8f19998f029', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '6935403e0ed5e89bc22137ee6aac29ee88217f80', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ac167a1ff285da2632b4f4584405992f43e8e2a0', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '8b002cc136ac1083c88019178b1accb446599714', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'dbc7ce66f3f3cedb5db98c414dc7fb030a141d2e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Yash Patel,49101492,,User,,86,,0,1
699301774,Feat: Navbar improvements,"ScreenShot:
![image](https://user-images.githubusercontent.com/49101492/129076603-e705a92c-9d80-4d7a-90e8-e20b03a8c3c1.png)


Note: ""Github corner"" has been removed due to overlapping issues on mobile view",True,69,https://api.github.com/repos/MovingBlocks/movingblocks.github.com/pulls/69,https://github.com/MovingBlocks/movingblocks.github.com/pull/69,closed,105,58,6,11,0,0,0,0,[],2021-07-29 08:01:19+00:00,2021-08-12 18:33:44+00:00,1247545.0,"14 days, 10:32:25",[],"[{'commit_sha': '91ab9f6ccda4e99e1cb26dab5744cfaba01d4452', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ec63219fa86746f3fb35a249e8a37e0b98a1227a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'c53780298a0e4c555f3524183572997dacc2741c', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'e13a253c29c87563d649b4edc6923feda4f5e637', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'bb418a957f3993f81748142fe3e691cdc8116562', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '5e16e088927ce244fcb6df28e468ff2e12d2e7f8', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '23c9d28a00137fc9a9ce4d17af7777d3620a1810', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '7033d4f9bdabb57dab919faa749c77663e9b01d7', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '99f6a9a56fc96854594dace28f90cdba63a46f28', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '92d368d0117409f2a9caf7d27ac20cbbc8f514b2', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '5e9dde86299cc548dea9de00bee400f87397fcb1', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Yash Patel,49101492,,User,,86,,0,1
707414078,feat: blog image generation ,"This PR introduces the image generation process which generates TeraSaturday & TeraSpotlight images and also adds custom logo on paticular image

## How to test  this PR (Your development server should be running)

1. Go to the blog ""2020-11-21"" in index.md file 
2. Change ""imageTag: TeraSaturday"" to ""imageTag: TeraSpotlight""
3. Open new tab on terminal run this command ""yarn run generate-images""
4. Now check the cover image of that blog [overlay text on cover images has changed to ""TeraSpotlight"" ]
",True,73,https://api.github.com/repos/MovingBlocks/movingblocks.github.com/pulls/73,https://github.com/MovingBlocks/movingblocks.github.com/pull/73,closed,361,9,18,7,2,0,1,0,[{'name': 'hacktoberest-accepted'}],2021-08-10 14:36:59+00:00,2021-10-02 16:39:28+00:00,4586549.0,"53 days, 2:02:29",[],"[{'commit_sha': 'baa02f791558f7007f316b1d4a7cef0fe1c6d7a8', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'e897e85ed72b2675cbd003c60cea673e6ad1aa59', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '401370c32f55587e14849b104dfa33cd0cdcb5e4', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'd5409e88c45f4adfdcbef3af2de9daf83b66a3db', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '4ed0aac7528d72ba73a882a6ad34aa1b41e6eb49', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b8eebaae7782d785a900047db7d63d1b238e7344', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b75cdf6330e6fc365cd4794ccb846013359e9fff', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Yash Patel,49101492,,User,,86,,0,1
681173271,feat: Mentor's page,"This PR introduces the Mentor's Page and uses Trello API  to fetch all the information that is displayed on the mentor's page.
It includes two new react components that are Mentor and Mentor Modal which is used by the mentor's  page

Note: Navbar will be restructured once all the pages are over 

Screenshots:
![image](https://user-images.githubusercontent.com/49101492/124020069-722b5200-da07-11eb-84fa-712c9e0a8c0a.png)

![image](https://user-images.githubusercontent.com/49101492/124020195-9b4be280-da07-11eb-841a-b04c147c18ac.png)

![image](https://user-images.githubusercontent.com/49101492/124028306-78bec700-da11-11eb-9940-8098ee447c30.png)



",True,60,https://api.github.com/repos/MovingBlocks/movingblocks.github.com/pulls/60,https://github.com/MovingBlocks/movingblocks.github.com/pull/60,closed,245,4,10,2,0,6,0,0,[],2021-06-30 19:29:53+00:00,2021-07-02 21:39:14+00:00,180561.0,"2 days, 2:09:21","[{'comment_id': 661766485, 'comment_body': 'Use `try-catch` blocks when using await statements instead of `if-else`.', 'comment_created': datetime.datetime(2021, 6, 30, 19, 49, 43, tzinfo=datetime.timezone.utc), 'commenter': 'majordwarf', 'type': 'User'}, {'comment_id': 661770284, 'comment_body': 'Please keep a blank/newline at end of the file.', 'comment_created': datetime.datetime(2021, 6, 30, 19, 56, 11, tzinfo=datetime.timezone.utc), 'commenter': 'majordwarf', 'type': 'User'}, {'comment_id': 661795234, 'comment_body': ""I use If-else because, in case if API doesn't work  we can display an Alert same as we are displaying on Download Page, just pushed the changes please have a look\r\n"", 'comment_created': datetime.datetime(2021, 6, 30, 20, 38, 51, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 661795287, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 6, 30, 20, 38, 57, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}, {'comment_id': 661957613, 'comment_body': 'you could just keep it as async\r\n\r\nhttps://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch', 'comment_created': datetime.datetime(2021, 7, 1, 4, 13, 40, tzinfo=datetime.timezone.utc), 'commenter': 'pollend', 'type': 'User'}, {'comment_id': 662021860, 'comment_body': ""I think it's the same thing just a bit different syntax we are using JS ES6 and on the doc, it's an older version. If you are talking about directly fetching the information from API , In the future, it might not work and so we need async and await to check response is coming or not\r\n"", 'comment_created': datetime.datetime(2021, 7, 1, 6, 45, 8, tzinfo=datetime.timezone.utc), 'commenter': 'ryuk156', 'type': 'User'}]","[{'commit_sha': '3180b28a034dd99fb6f6ac624c63c8a7bf178a44', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b8c0c4d2e01ede048fee27b46917807a751caf34', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Yash Patel,49101492,,User,,86,,0,1
706094859,feat: blog migration,"This PR migrates all the blogs from the splash site and focuses on fixing some images and styling inside a paticular blog
",True,72,https://api.github.com/repos/MovingBlocks/movingblocks.github.com/pulls/72,https://github.com/MovingBlocks/movingblocks.github.com/pull/72,closed,4241,24,151,7,0,0,0,0,[],2021-08-08 19:29:53+00:00,2021-08-12 18:43:16+00:00,342803.0,"3 days, 23:13:23",[],"[{'commit_sha': '00d2be29312793af0d97e2fdd7b7ade143edf665', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '1bb95c4f59c1fbe83efbaa20070a0331fa4f8a65', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'c4f63fe693649cacee11c8d71bc3945e4d6bf603', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ee704277b80798e5ceab031b6d0cbb5557e73d93', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'fb443b9ed3d590a46b17787b6ddd82cbbc0f1d0c', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '749c9632ed4f75eaa8914a7717aeb8c56b982545', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'aeb75b4c7d1c8ef4cfca77f5a16062a76cc03002', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Yash Patel,49101492,,User,,86,,0,1

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
187309247,movingblocks.github.com,MovingBlocks/movingblocks.github.com,JavaScript,17,7,14,20,287,14,9,6,"[{'id': 721032858, 'number': 89, 'closed': datetime.datetime(2021, 9, 9, 22, 41, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 27, 5, 8, tzinfo=datetime.timezone.utc), 'time_taken': 1186418.0, 'time_delta': '13 days, 17:33:38', 'additions': 71, 'deletions': 13, 'state': 'closed'}, {'id': 720997394, 'number': 88, 'closed': datetime.datetime(2021, 9, 9, 22, 39, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 27, 3, 25, 25, tzinfo=datetime.timezone.utc), 'time_taken': 1192449.0, 'time_delta': '13 days, 19:14:09', 'additions': 0, 'deletions': 0, 'state': 'closed'}, {'id': 718976022, 'number': 87, 'closed': datetime.datetime(2021, 8, 27, 16, 53, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 24, 18, 38, 41, tzinfo=datetime.timezone.utc), 'time_taken': 252907.0, 'time_delta': '2 days, 22:15:07', 'additions': 61, 'deletions': 61, 'state': 'closed'}, {'id': 718885413, 'number': 86, 'closed': datetime.datetime(2021, 8, 25, 18, 22, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 24, 16, 15, 36, tzinfo=datetime.timezone.utc), 'time_taken': 94001.0, 'time_delta': '1 day, 2:06:41', 'additions': 5, 'deletions': 5, 'state': 'closed'}, {'id': 714483148, 'number': 84, 'closed': datetime.datetime(2021, 8, 19, 17, 20, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 17, 18, 43, 53, tzinfo=datetime.timezone.utc), 'time_taken': 167780.0, 'time_delta': '1 day, 22:36:20', 'additions': 125, 'deletions': 97, 'state': 'closed'}, {'id': 714443424, 'number': 83, 'closed': datetime.datetime(2021, 8, 19, 16, 13, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 17, 17, 36, 53, tzinfo=datetime.timezone.utc), 'time_taken': 167786.0, 'time_delta': '1 day, 22:36:26', 'additions': 1, 'deletions': 0, 'state': 'closed'}, {'id': 712878753, 'number': 80, 'closed': datetime.datetime(2021, 8, 17, 14, 11, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 15, 5, 31, 17, tzinfo=datetime.timezone.utc), 'time_taken': 204023.0, 'time_delta': '2 days, 8:40:23', 'additions': 1, 'deletions': 21, 'state': 'closed'}, {'id': 712875891, 'number': 78, 'closed': datetime.datetime(2021, 8, 15, 4, 57, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 15, 4, 56, 33, tzinfo=datetime.timezone.utc), 'time_taken': 75.0, 'time_delta': '0:01:15', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 712874567, 'number': 77, 'closed': datetime.datetime(2021, 8, 15, 4, 45, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 15, 4, 39, 36, tzinfo=datetime.timezone.utc), 'time_taken': 336.0, 'time_delta': '0:05:36', 'additions': 3, 'deletions': 3, 'state': 'closed'}, {'id': 712818522, 'number': 76, 'closed': datetime.datetime(2021, 8, 15, 4, 21, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 14, 18, 3, 35, tzinfo=datetime.timezone.utc), 'time_taken': 37082.0, 'time_delta': '10:18:02', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 712544406, 'number': 75, 'closed': datetime.datetime(2021, 8, 14, 15, 34, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 13, 18, 13, 12, tzinfo=datetime.timezone.utc), 'time_taken': 76906.0, 'time_delta': '21:21:46', 'additions': 3, 'deletions': 0, 'state': 'closed'}, {'id': 709382867, 'number': 74, 'closed': datetime.datetime(2021, 8, 12, 18, 44, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 11, 18, 13, 28, tzinfo=datetime.timezone.utc), 'time_taken': 88243.0, 'time_delta': '1 day, 0:30:43', 'additions': 1, 'deletions': 0, 'state': 'closed'}, {'id': 707414078, 'number': 73, 'closed': datetime.datetime(2021, 10, 2, 16, 39, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 10, 14, 36, 59, tzinfo=datetime.timezone.utc), 'time_taken': 4586549.0, 'time_delta': '53 days, 2:02:29', 'additions': 361, 'deletions': 9, 'state': 'closed'}, {'id': 706094859, 'number': 72, 'closed': datetime.datetime(2021, 8, 12, 18, 43, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 8, 19, 29, 53, tzinfo=datetime.timezone.utc), 'time_taken': 342803.0, 'time_delta': '3 days, 23:13:23', 'additions': 4241, 'deletions': 24, 'state': 'closed'}, {'id': 705872112, 'number': 71, 'closed': datetime.datetime(2021, 8, 8, 19, 30, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 7, 10, 34, 36, tzinfo=datetime.timezone.utc), 'time_taken': 118526.0, 'time_delta': '1 day, 8:55:26', 'additions': 2077, 'deletions': 9, 'state': 'closed'}, {'id': 704912321, 'number': 70, 'closed': datetime.datetime(2021, 8, 7, 7, 59, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 5, 17, 58, 15, tzinfo=datetime.timezone.utc), 'time_taken': 136850.0, 'time_delta': '1 day, 14:00:50', 'additions': 1797, 'deletions': 1, 'state': 'closed'}, {'id': 699301774, 'number': 69, 'closed': datetime.datetime(2021, 8, 12, 18, 33, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 29, 8, 1, 19, tzinfo=datetime.timezone.utc), 'time_taken': 1247545.0, 'time_delta': '14 days, 10:32:25', 'additions': 105, 'deletions': 58, 'state': 'closed'}, {'id': 697693048, 'number': 68, 'closed': datetime.datetime(2021, 8, 6, 6, 23, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 27, 9, 30, 40, tzinfo=datetime.timezone.utc), 'time_taken': 852743.0, 'time_delta': '9 days, 20:52:23', 'additions': 173, 'deletions': 117, 'state': 'closed'}, {'id': 695316306, 'number': 67, 'closed': datetime.datetime(2021, 8, 13, 16, 18, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 22, 16, 11, 16, tzinfo=datetime.timezone.utc), 'time_taken': 1901212.0, 'time_delta': '22 days, 0:06:52', 'additions': 286, 'deletions': 25838, 'state': 'closed'}, {'id': 688058336, 'number': 66, 'closed': datetime.datetime(2021, 8, 7, 7, 59, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 12, 18, 5, 18, tzinfo=datetime.timezone.utc), 'time_taken': 2210036.0, 'time_delta': '25 days, 13:53:56', 'additions': 285, 'deletions': 90, 'state': 'closed'}, {'id': 685185079, 'number': 65, 'closed': datetime.datetime(2021, 7, 10, 17, 9, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 7, 13, 12, 58, tzinfo=datetime.timezone.utc), 'time_taken': 273395.0, 'time_delta': '3 days, 3:56:35', 'additions': 274, 'deletions': 119, 'state': 'closed'}, {'id': 683462698, 'number': 64, 'closed': datetime.datetime(2021, 8, 6, 15, 11, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 5, 8, 4, 57, tzinfo=datetime.timezone.utc), 'time_taken': 2790392.0, 'time_delta': '32 days, 7:06:32', 'additions': 61, 'deletions': 41, 'state': 'closed'}, {'id': 683057564, 'number': 63, 'closed': datetime.datetime(2021, 7, 3, 17, 58, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 3, 17, 55, 44, tzinfo=datetime.timezone.utc), 'time_taken': 155.0, 'time_delta': '0:02:35', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 683017548, 'number': 62, 'closed': datetime.datetime(2021, 7, 27, 19, 36, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 3, 12, 30, 5, tzinfo=datetime.timezone.utc), 'time_taken': 2099186.0, 'time_delta': '24 days, 7:06:26', 'additions': 426, 'deletions': 24, 'state': 'closed'}, {'id': 681971346, 'number': 61, 'closed': datetime.datetime(2021, 7, 8, 10, 24, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 1, 15, 40, 20, tzinfo=datetime.timezone.utc), 'time_taken': 585827.0, 'time_delta': '6 days, 18:43:47', 'additions': 193, 'deletions': 106, 'state': 'closed'}, {'id': 681173271, 'number': 60, 'closed': datetime.datetime(2021, 7, 2, 21, 39, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 30, 19, 29, 53, tzinfo=datetime.timezone.utc), 'time_taken': 180561.0, 'time_delta': '2 days, 2:09:21', 'additions': 245, 'deletions': 4, 'state': 'closed'}, {'id': 675102074, 'number': 59, 'closed': datetime.datetime(2021, 7, 3, 17, 45, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 22, 6, 0, 49, tzinfo=datetime.timezone.utc), 'time_taken': 992687.0, 'time_delta': '11 days, 11:44:47', 'additions': 53, 'deletions': 1, 'state': 'closed'}, {'id': 674330918, 'number': 58, 'closed': datetime.datetime(2021, 6, 29, 11, 32, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 21, 8, 20, 24, tzinfo=datetime.timezone.utc), 'time_taken': 702734.0, 'time_delta': '8 days, 3:12:14', 'additions': 308, 'deletions': 619, 'state': 'closed'}, {'id': 673334790, 'number': 57, 'closed': datetime.datetime(2021, 7, 27, 20, 18, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 18, 9, 55, 54, tzinfo=datetime.timezone.utc), 'time_taken': 3406927.0, 'time_delta': '39 days, 10:22:07', 'additions': 208, 'deletions': 0, 'state': 'closed'}, {'id': 673312810, 'number': 56, 'closed': datetime.datetime(2021, 6, 18, 9, 25, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 18, 9, 22, 42, tzinfo=datetime.timezone.utc), 'time_taken': 144.0, 'time_delta': '0:02:24', 'additions': 32, 'deletions': 86, 'state': 'closed'}, {'id': 672247603, 'number': 55, 'closed': datetime.datetime(2021, 6, 22, 5, 55, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 17, 6, 0, 8, tzinfo=datetime.timezone.utc), 'time_taken': 431707.0, 'time_delta': '4 days, 23:55:07', 'additions': 64, 'deletions': 0, 'state': 'closed'}, {'id': 669058752, 'number': 54, 'closed': datetime.datetime(2021, 6, 18, 16, 0, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 13, 14, 3, 38, tzinfo=datetime.timezone.utc), 'time_taken': 439040.0, 'time_delta': '5 days, 1:57:20', 'additions': 29834, 'deletions': 3600, 'state': 'closed'}, {'id': 622611744, 'number': 53, 'closed': datetime.datetime(2021, 5, 14, 18, 54, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 24, 16, 33, 18, tzinfo=datetime.timezone.utc), 'time_taken': 1736492.0, 'time_delta': '20 days, 2:21:32', 'additions': 18, 'deletions': 14, 'state': 'closed'}, {'id': 616924737, 'number': 52, 'closed': datetime.datetime(2021, 6, 16, 15, 29, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 16, 15, 30, 30, tzinfo=datetime.timezone.utc), 'time_taken': 5270365.0, 'time_delta': '60 days, 23:59:25', 'additions': 68, 'deletions': 69, 'state': 'closed'}, {'id': 599109602, 'number': 51, 'closed': datetime.datetime(2021, 5, 14, 18, 49, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 23, 19, 5, 47, tzinfo=datetime.timezone.utc), 'time_taken': 4491794.0, 'time_delta': '51 days, 23:43:14', 'additions': 63, 'deletions': 6, 'state': 'closed'}, {'id': 595029771, 'number': 50, 'closed': datetime.datetime(2021, 3, 24, 19, 13, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 17, 20, 27, 12, tzinfo=datetime.timezone.utc), 'time_taken': 600372.0, 'time_delta': '6 days, 22:46:12', 'additions': 1108, 'deletions': 60, 'state': 'closed'}, {'id': 581041501, 'number': 45, 'closed': datetime.datetime(2021, 3, 8, 11, 24, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 26, 18, 26, 1, tzinfo=datetime.timezone.utc), 'time_taken': 838706.0, 'time_delta': '9 days, 16:58:26', 'additions': 207, 'deletions': 8, 'state': 'closed'}, {'id': 576396720, 'number': 42, 'closed': datetime.datetime(2021, 2, 21, 12, 10, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 19, 11, 36, 15, tzinfo=datetime.timezone.utc), 'time_taken': 174846.0, 'time_delta': '2 days, 0:34:06', 'additions': 198, 'deletions': 172, 'state': 'closed'}, {'id': 572922492, 'number': 37, 'closed': datetime.datetime(2021, 2, 13, 19, 57, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 13, 11, 12, 3, tzinfo=datetime.timezone.utc), 'time_taken': 31510.0, 'time_delta': '8:45:10', 'additions': 6, 'deletions': 10, 'state': 'closed'}]"
