pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
417194856,Fix nheko build(uses mtxclient device-verification),,True,198,https://api.github.com/repos/Nheko-Reborn/nheko/pulls/198,https://github.com/Nheko-Reborn/nheko/pull/198,closed,46,41,5,3,0,2,0,0,[],2020-05-13 08:14:03+00:00,2020-05-15 12:56:11+00:00,189728.0,"2 days, 4:42:08","[{'comment_id': 424584766, 'comment_body': ""You shouldn't need this"", 'comment_created': datetime.datetime(2020, 5, 13, 16, 48, 17, tzinfo=datetime.timezone.utc), 'commenter': 'deepbluev7', 'type': 'User'}, {'comment_id': 424584978, 'comment_body': 'This will probably cause linter issues, remember to run make lint', 'comment_created': datetime.datetime(2020, 5, 13, 16, 48, 39, tzinfo=datetime.timezone.utc), 'commenter': 'deepbluev7', 'type': 'User'}]","[{'commit_sha': '30d61e3114927a93305fc52ed4a78ab0dc50024f', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4a7e859354653d4ddd60dc9e2b83132feffaceb', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57b8cdbd4d94bd0adf5c92f775227e04dd5f2bf1', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}]",Chethan,40890937,crdy2k1@gmail.com,User,,13,,5,1
475897010,Device verification and Cross-Signing,,True,270,https://api.github.com/repos/Nheko-Reborn/nheko/pulls/270,https://github.com/Nheko-Reborn/nheko/pull/270,closed,3704,319,59,74,0,61,0,0,[],2020-08-30 11:11:55+00:00,2020-10-08 18:08:39+00:00,3394604.0,"39 days, 6:56:44","[{'comment_id': 479792869, 'comment_body': ""Don't catch by value, use `catch (std::out_of_range&)` instead (same in line 229)"", 'comment_created': datetime.datetime(2020, 8, 30, 17, 4, 55, tzinfo=datetime.timezone.utc), 'commenter': 'deepbluev7', 'type': 'User'}, {'comment_id': 479802680, 'comment_body': 'Verification messages could be encrypted, can you change this to\r\n\r\na) not convert the message to json just to get the type, then convert every type to a string and compare them as strings? It is probably easier to just get the type via a visit or visit each type of message via overloaded or similar.\r\nb) Handle encrypted KeyVerificationMessages, i.e. decrypt a message, if it is encrypted and then handle the decrypted message?\r\n\r\nThanks :3', 'comment_created': datetime.datetime(2020, 8, 30, 18, 45, 15, tzinfo=datetime.timezone.utc), 'commenter': 'deepbluev7', 'type': 'User'}, {'comment_id': 479802942, 'comment_body': 'I think one of those should be enough', 'comment_created': datetime.datetime(2020, 8, 30, 18, 48, 33, tzinfo=datetime.timezone.utc), 'commenter': 'deepbluev7', 'type': 'User'}, {'comment_id': 479803062, 'comment_body': 'This may be a bad rebase?', 'comment_created': datetime.datetime(2020, 8, 30, 18, 49, 56, tzinfo=datetime.timezone.utc), 'commenter': 'deepbluev7', 'type': 'User'}, {'comment_id': 479806296, 'comment_body': ""No it isn't, I changed that API, rather than having two separate fields for that I changed it to one single field which takes message, the transaction id of the message is anyway fed to the message before that in add_pending"", 'comment_created': datetime.datetime(2020, 8, 30, 19, 24, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Chethan2k1', 'type': 'User'}, {'comment_id': 479806553, 'comment_body': 'Wow there were three of them', 'comment_created': datetime.datetime(2020, 8, 30, 19, 27, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Chethan2k1', 'type': 'User'}, {'comment_id': 479814821, 'comment_body': 'I see, makes sense', 'comment_created': datetime.datetime(2020, 8, 30, 20, 57, 18, tzinfo=datetime.timezone.utc), 'commenter': 'deepbluev7', 'type': 'User'}, {'comment_id': 486546853, 'comment_body': 'Why is this the background?', 'comment_created': datetime.datetime(2020, 9, 10, 18, 23, 20, tzinfo=datetime.timezone.utc), 'commenter': 'deepbluev7', 'type': 'User'}, {'comment_id': 486547457, 'comment_body': 'Why ApplicationWindow and not just Window?', 'comment_created': datetime.datetime(2020, 9, 10, 18, 24, 8, tzinfo=datetime.timezone.utc), 'commenter': 'deepbluev7', 'type': 'User'}, {'comment_id': 486547938, 'comment_body': ""Shouldn't the deviceVerificationList handle that by itself?"", 'comment_created': datetime.datetime(2020, 9, 10, 18, 24, 50, tzinfo=datetime.timezone.utc), 'commenter': 'deepbluev7', 'type': 'User'}, {'comment_id': 486550166, 'comment_body': 'You should be able to just the `text` member of the button instead of overwriting the contentItem. Also, you should be able to use `palette: colors` instead of overwriting colors manually.', 'comment_created': datetime.datetime(2020, 9, 10, 18, 27, 44, tzinfo=datetime.timezone.utc), 'commenter': 'deepbluev7', 'type': 'User'}, {'comment_id': 486550399, 'comment_body': ""Isn't that already a boolean?"", 'comment_created': datetime.datetime(2020, 9, 10, 18, 28, 4, tzinfo=datetime.timezone.utc), 'commenter': 'deepbluev7', 'type': 'User'}, {'comment_id': 486552298, 'comment_body': 'this can be a single line without {}', 'comment_created': datetime.datetime(2020, 9, 10, 18, 30, 36, tzinfo=datetime.timezone.utc), 'commenter': 'deepbluev7', 'type': 'User'}, {'comment_id': 486552730, 'comment_body': 'You should set the spacing on the RowLayout instead.', 'comment_created': datetime.datetime(2020, 9, 10, 18, 31, 11, tzinfo=datetime.timezone.utc), 'commenter': 'deepbluev7', 'type': 'User'}, {'comment_id': 486553492, 'comment_body': ""You don't need to put a ListView inside a ScrollView, ListViews are already scrollable."", 'comment_created': datetime.datetime(2020, 9, 10, 18, 32, 20, tzinfo=datetime.timezone.utc), 'commenter': 'deepbluev7', 'type': 'User'}, {'comment_id': 486554156, 'comment_body': 'I think you want to create a spacing of 50?', 'comment_created': datetime.datetime(2020, 9, 10, 18, 33, 14, tzinfo=datetime.timezone.utc), 'commenter': 'deepbluev7', 'type': 'User'}, {'comment_id': 486554505, 'comment_body': 'Prefer Label over Text, as a Label should be correctly themed.', 'comment_created': datetime.datetime(2020, 9, 10, 18, 33, 44, tzinfo=datetime.timezone.utc), 'commenter': 'deepbluev7', 'type': 'User'}, {'comment_id': 486555763, 'comment_body': 'You may want to use a bit more desaturated colours.', 'comment_created': datetime.datetime(2020, 9, 10, 18, 35, 19, tzinfo=datetime.timezone.utc), 'commenter': 'deepbluev7', 'type': 'User'}, {'comment_id': 486556869, 'comment_body': 'If you use an ApplicationWindow, put this in the footer. But you probably want to use a Dialog and enable the OK standard Button instead.', 'comment_created': datetime.datetime(2020, 9, 10, 18, 37, 10, tzinfo=datetime.timezone.utc), 'commenter': 'deepbluev7', 'type': 'User'}, {'comment_id': 486559358, 'comment_body': 'Can you put these Components into their own file and then use one of the approaches listed [here](https://forum.qt.io/topic/53056/pushing-qml-files-onto-stackview/7) to do the stack.replace? This file is getting a bit big.', 'comment_created': datetime.datetime(2020, 9, 10, 18, 42, 3, tzinfo=datetime.timezone.utc), 'commenter': 'deepbluev7', 'type': 'User'}, {'comment_id': 486924530, 'comment_body': ""I really don't remember why i did that. Anyways I removed it."", 'comment_created': datetime.datetime(2020, 9, 11, 9, 45, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Chethan2k1', 'type': 'User'}, {'comment_id': 486926826, 'comment_body': ""Using window says palette is a non-existent property, that's why"", 'comment_created': datetime.datetime(2020, 9, 11, 9, 48, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Chethan2k1', 'type': 'User'}, {'comment_id': 486928723, 'comment_body': 'This is for when making sure once the verification is done, the userprofile updates immediately and show the verified device, deviceVerificationList only maintains the list of ongoing flow.', 'comment_created': datetime.datetime(2020, 9, 11, 9, 50, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Chethan2k1', 'type': 'User'}, {'comment_id': 486932442, 'comment_body': ""I'm not really sure, that would work, if iirc you had some issues in the theming when I previously used pallette. For some reason the ApplicationWindow in UserProfile doesn't seem to have a smooth transition of theming, Not able to figure out why, need help with that."", 'comment_created': datetime.datetime(2020, 9, 11, 9, 54, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Chethan2k1', 'type': 'User'}, {'comment_id': 486940957, 'comment_body': ""Dialog doesn't have the close,minimize,resize button on the top so I felt ApplicationWindow would be a better choice."", 'comment_created': datetime.datetime(2020, 9, 11, 10, 1, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Chethan2k1', 'type': 'User'}, {'comment_id': 487538082, 'comment_body': 'Huh, I did not know that. That is somewhat weird, but yeah, then Dialog would be a bad choice. I probably should use a WM with buttons in the title bar to notice something like that.', 'comment_created': datetime.datetime(2020, 9, 13, 14, 43, 43, tzinfo=datetime.timezone.utc), 'commenter': 'deepbluev7', 'type': 'User'}, {'comment_id': 487589768, 'comment_body': ""Can you explain to me, what those setUserCache and updateUserCache functions are intended to be used for? I think updateUserCache only ever needs to be called when handling /sync, which is handled inside Cache.cpp, so this could be a private function and doesn't need to be exposed. `setUserCache` sounds pretty general. Does that ever need to be called from outside? Where?"", 'comment_created': datetime.datetime(2020, 9, 13, 23, 14, 15, tzinfo=datetime.timezone.utc), 'commenter': 'deepbluev7', 'type': 'User'}, {'comment_id': 487590545, 'comment_body': ""Can you change those into getVerificationStatus(user_id) and add/removeUserVerification(user_id, master_key) add/removeDeviceVerification(user_id, device_id, state)? Or something similar. get and set don't hold that much semantic value."", 'comment_created': datetime.datetime(2020, 9, 13, 23, 21, 27, tzinfo=datetime.timezone.utc), 'commenter': 'deepbluev7', 'type': 'User'}, {'comment_id': 487590647, 'comment_body': 'I think you should store, which master key was verified, as that can change! You also need to verify via their self-signing key, when they add a new device and add that to the trusted devices.', 'comment_created': datetime.datetime(2020, 9, 13, 23, 22, 19, tzinfo=datetime.timezone.utc), 'commenter': 'deepbluev7', 'type': 'User'}, {'comment_id': 487591624, 'comment_body': ""I'm not sure I understand that. Couldn't you just store everything in the UserCache, but flag users not in the actual shared list as always out of date?"", 'comment_created': datetime.datetime(2020, 9, 13, 23, 30, 25, tzinfo=datetime.timezone.utc), 'commenter': 'deepbluev7', 'type': 'User'}, {'comment_id': 487592146, 'comment_body': 'I think there is a race here, where you receive 2 device keys out of date in rapid succession, but your QueryKeys returns too late, so you miss the second out of date or if they return out of order. You should check against the sync token, if when you started the QueryKeys request matches, when it was marked as out of date.', 'comment_created': datetime.datetime(2020, 9, 13, 23, 35, 18, tzinfo=datetime.timezone.utc), 'commenter': 'deepbluev7', 'type': 'User'}, {'comment_id': 487592361, 'comment_body': 'Why do you call query keys twice?', 'comment_created': datetime.datetime(2020, 9, 13, 23, 37, 20, tzinfo=datetime.timezone.utc), 'commenter': 'deepbluev7', 'type': 'User'}, {'comment_id': 487592528, 'comment_body': 'You should be using the sync token of when this was marked as out of date as the `token` parameter.', 'comment_created': datetime.datetime(2020, 9, 13, 23, 38, 56, tzinfo=datetime.timezone.utc), 'commenter': 'deepbluev7', 'type': 'User'}, {'comment_id': 487592674, 'comment_body': 'You should also be calling this in /sync, when a device gets marked out of date.', 'comment_created': datetime.datetime(2020, 9, 13, 23, 40, 4, tzinfo=datetime.timezone.utc), 'commenter': 'deepbluev7', 'type': 'User'}, {'comment_id': 487592885, 'comment_body': '```suggestion\r\n                        if (this->sender) {\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 23, 41, 49, tzinfo=datetime.timezone.utc), 'commenter': 'deepbluev7', 'type': 'User'}, {'comment_id': 487592981, 'comment_body': '```suggestion\r\n                        if (!this->sender) {\r\n```\r\n\r\nAlthough you may want to reorder this to be `if (this->sender)`.', 'comment_created': datetime.datetime(2020, 9, 13, 23, 42, 46, tzinfo=datetime.timezone.utc), 'commenter': 'deepbluev7', 'type': 'User'}, {'comment_id': 487593005, 'comment_body': 'Either use our logging or remove this.', 'comment_created': datetime.datetime(2020, 9, 13, 23, 43, 3, tzinfo=datetime.timezone.utc), 'commenter': 'deepbluev7', 'type': 'User'}, {'comment_id': 487593142, 'comment_body': ""Why can't we do that already?"", 'comment_created': datetime.datetime(2020, 9, 13, 23, 44, 1, tzinfo=datetime.timezone.utc), 'commenter': 'deepbluev7', 'type': 'User'}, {'comment_id': 487593258, 'comment_body': 'Please give this a descriptive name.', 'comment_created': datetime.datetime(2020, 9, 13, 23, 45, tzinfo=datetime.timezone.utc), 'commenter': 'deepbluev7', 'type': 'User'}, {'comment_id': 487593391, 'comment_body': 'Can you please name your variables properly and maybe could you implement the signatures check as well?', 'comment_created': datetime.datetime(2020, 9, 13, 23, 46, 9, tzinfo=datetime.timezone.utc), 'commenter': 'deepbluev7', 'type': 'User'}, {'comment_id': 487593516, 'comment_body': 'Do you need this?', 'comment_created': datetime.datetime(2020, 9, 13, 23, 47, 29, tzinfo=datetime.timezone.utc), 'commenter': 'deepbluev7', 'type': 'User'}, {'comment_id': 487593819, 'comment_body': 'Can you reorder this function, that you decrypt the payload, if it is and `mtx::events::DeviceEvent<mtx::events::msg::Encrypted>` and then do the if else chain after that to reduce duplications? Also, can you change this to not compare the type by string?', 'comment_created': datetime.datetime(2020, 9, 13, 23, 50, 9, tzinfo=datetime.timezone.utc), 'commenter': 'deepbluev7', 'type': 'User'}, {'comment_id': 487593914, 'comment_body': 'One should be enough', 'comment_created': datetime.datetime(2020, 9, 13, 23, 50, 51, tzinfo=datetime.timezone.utc), 'commenter': 'deepbluev7', 'type': 'User'}, {'comment_id': 487593942, 'comment_body': 'Seems to be still an issue.', 'comment_created': datetime.datetime(2020, 9, 13, 23, 51, 10, tzinfo=datetime.timezone.utc), 'commenter': 'deepbluev7', 'type': 'User'}, {'comment_id': 487593981, 'comment_body': ""Don't remove this!"", 'comment_created': datetime.datetime(2020, 9, 13, 23, 51, 37, tzinfo=datetime.timezone.utc), 'commenter': 'deepbluev7', 'type': 'User'}, {'comment_id': 487594248, 'comment_body': '```suggestion\r\n                                            if constexpr (std::is_same_v<decltype(e.content), mtx::events::msg::Encrypted>()) {\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 23, 53, 52, tzinfo=datetime.timezone.utc), 'commenter': 'deepbluev7', 'type': 'User'}, {'comment_id': 487594736, 'comment_body': 'I think this block is a duplicate and unnecessary.', 'comment_created': datetime.datetime(2020, 9, 13, 23, 57, 28, tzinfo=datetime.timezone.utc), 'commenter': 'deepbluev7', 'type': 'User'}, {'comment_id': 487595337, 'comment_body': 'This needs a proper name.', 'comment_created': datetime.datetime(2020, 9, 14, 0, 1, 29, tzinfo=datetime.timezone.utc), 'commenter': 'deepbluev7', 'type': 'User'}, {'comment_id': 487618684, 'comment_body': ""One is for the user whose userprofile is being viewed and the other one is the keys of the local user, this is the wrapper function for the query_keys so if it's in the cache, the endpoint woudn't be hit."", 'comment_created': datetime.datetime(2020, 9, 14, 2, 22, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Chethan2k1', 'type': 'User'}, {'comment_id': 487618938, 'comment_body': 'Weird rebase issues ig.', 'comment_created': datetime.datetime(2020, 9, 14, 2, 23, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Chethan2k1', 'type': 'User'}, {'comment_id': 487619333, 'comment_body': 'yeah that makes sense', 'comment_created': datetime.datetime(2020, 9, 14, 2, 25, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Chethan2k1', 'type': 'User'}, {'comment_id': 487856901, 'comment_body': 'Merge conflict issues', 'comment_created': datetime.datetime(2020, 9, 14, 12, 0, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Chethan2k1', 'type': 'User'}, {'comment_id': 487859562, 'comment_body': '`updateUserCache`  updates the flag of the outdated users and delete keys cache of left users, `setUserCache` is used in the `ChatPage.cpp` inside the wrapper function for `query_keys`. Yeah, the former is not used outside so could be made private.', 'comment_created': datetime.datetime(2020, 9, 14, 12, 5, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Chethan2k1', 'type': 'User'}, {'comment_id': 487859777, 'comment_body': 'Sure!', 'comment_created': datetime.datetime(2020, 9, 14, 12, 6, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Chethan2k1', 'type': 'User'}, {'comment_id': 487861222, 'comment_body': 'what i meant was the `VerifiedCache` stores the verified devices and the `UserCache` stores the keys, for a particular user entry may exist or may not exist in either one of them, that is the reason I had it seperate. ', 'comment_created': datetime.datetime(2020, 9, 14, 12, 8, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Chethan2k1', 'type': 'User'}, {'comment_id': 487863021, 'comment_body': ""Well, as we discussed before we don't want to update the key cache every time we find a outdated user, we rather mark them outdated and then use this api rather than the old one, so it will update only when needed, i feel this is a better approach because in the outdated list some random usernames are popping so query keys for each one of them would decrease the performance."", 'comment_created': datetime.datetime(2020, 9, 14, 12, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Chethan2k1', 'type': 'User'}, {'comment_id': 487863386, 'comment_body': ""Yeah, it's already added in, forgot to remove that comment :P"", 'comment_created': datetime.datetime(2020, 9, 14, 12, 12, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Chethan2k1', 'type': 'User'}, {'comment_id': 487863477, 'comment_body': 'Sure!', 'comment_created': datetime.datetime(2020, 9, 14, 12, 12, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Chethan2k1', 'type': 'User'}, {'comment_id': 487864134, 'comment_body': 'for which keys do you mean by ""signature check""? I have implemented the signature check needed to establish a trust chain already.', 'comment_created': datetime.datetime(2020, 9, 14, 12, 14, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Chethan2k1', 'type': 'User'}, {'comment_id': 487864348, 'comment_body': 'rebase issues', 'comment_created': datetime.datetime(2020, 9, 14, 12, 14, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Chethan2k1', 'type': 'User'}, {'comment_id': 491723543, 'comment_body': 'Btw, you can query the keys for all users at the same time.', 'comment_created': datetime.datetime(2020, 9, 20, 19, 10, 36, tzinfo=datetime.timezone.utc), 'commenter': 'deepbluev7', 'type': 'User'}]","[{'commit_sha': '488cc5e73be3c0aba2caf4df6ae38225c6a3d641', 'committer_username': 'deepbluev7', 'committer_name': 'DeepBlueV7.X', 'committer_email': None, 'commit_date': datetime.datetime(2015, 12, 15, 21, 52, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2088053d26fc124058fafb434d41b7c9516f0da0', 'committer_username': 'deepbluev7', 'committer_name': 'DeepBlueV7.X', 'committer_email': None, 'commit_date': datetime.datetime(2015, 12, 15, 21, 52, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '480c4bc8f5f9bff50c832d10861b9fabce03464d', 'committer_username': 'deepbluev7', 'committer_name': 'DeepBlueV7.X', 'committer_email': None, 'commit_date': datetime.datetime(2015, 12, 15, 21, 52, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fed0463e57307a3ecaf01dd7d2b54f4d42044e15', 'committer_username': 'deepbluev7', 'committer_name': 'DeepBlueV7.X', 'committer_email': None, 'commit_date': datetime.datetime(2015, 12, 15, 21, 52, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b1362ca69fe2c028546b1e4bab5506395f431e07', 'committer_username': 'deepbluev7', 'committer_name': 'DeepBlueV7.X', 'committer_email': None, 'commit_date': datetime.datetime(2015, 12, 15, 21, 52, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '707248fea39eafdfc4ce6b69987ab144ab781110', 'committer_username': 'deepbluev7', 'committer_name': 'DeepBlueV7.X', 'committer_email': None, 'commit_date': datetime.datetime(2015, 12, 15, 21, 52, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64f204d984d4c4f520f8c5de613e17b01dd9a317', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a54a973ad6be4a1e71be6d8f993600fb02601574', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9c0f4dd5410621a8427e2ef21496b7791d44d2f', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b628f485ff1cc66c20b9888b73e3427eb86d062e', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd5dd0e39b23c5a258d0f6811f6b5987d8f6f391', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1eb162cb6fa81c7388725414e9c68f5991372d08', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '41b6ef0c32877384d4157a87aee01f67090b15a3', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67367d0004abe54445c9c6ca354c787fc0af8a79', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce013e67a63edf10b0b0357cd1318ce622a74e97', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd49ab156569f4f963a2306ff8074b6a22f28a31c', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1633650303e2129ae1e255f4e17a0fbff13638b1', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4862be06be6e32c1f4963feabfde010a9f64616c', 'committer_username': 'deepbluev7', 'committer_name': 'DeepBlueV7.X', 'committer_email': None, 'commit_date': datetime.datetime(2015, 12, 15, 21, 52, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd232b1f4a6d55b566ee138b30cfcc272129fabb', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '75efa5d3a2586d16226526ddacf00ce3e8bd3367', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '00e36b6068786d64812135a4d505501134ebc214', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ffa61095b8be7c61c3b4cdd693e59239ab668516', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6fae36abc404ffb7e6ae29c9edceda5231400f0a', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac1fbbb69fdd4e313072cbf95eb9288db1257a9d', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08028d5c57d134fb3d0ca9004730f0b2c99e5e67', 'committer_username': 'deepbluev7', 'committer_name': 'DeepBlueV7.X', 'committer_email': None, 'commit_date': datetime.datetime(2015, 12, 15, 21, 52, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1103cc15cfe59b35e540855090af381b0f2e5f8e', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a2979c2df1b2059e2e8a969f5c1a3a804bd2550c', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1fcd768f88f7e84978d19283c9fa6205624f2544', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3635c185e93a6f7bf6e2f9c11b27966c2ee665ea', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2e20049b3695d0aa7ca09db079bcc39c0485d098', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a4bd37fead20e24876ec9ce703cabb041ec67ba', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d299951b61390c381013ca0503fb09df548c6ec', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19cfd08a554e20862c1187148982d542e311411d', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d1dd29b19a3f4459b036bd63f03c518e000d71f', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a76db85d5d18fd51b8ec2841553fea708e6014a', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3396a7a7967de5500372499107695d484b05b50b', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b174bd938084a60fde5030dfc4dd0067a39f5a3f', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f03a48eec569e7cae52c8c94f530d0540ea2c605', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e0981e17a1887f3e3068b35ce096474735bc733c', 'committer_username': 'deepbluev7', 'committer_name': 'DeepBlueV7.X', 'committer_email': None, 'commit_date': datetime.datetime(2015, 12, 15, 21, 52, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10f09d4f432d8f582972a22ebb2d1436d1335eb9', 'committer_username': 'deepbluev7', 'committer_name': 'DeepBlueV7.X', 'committer_email': None, 'commit_date': datetime.datetime(2015, 12, 15, 21, 52, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5358854de37fcf51c5d24f022b231da17f3b85c7', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '657f4073e98176dab3de85a3868ed633d8544ede', 'committer_username': 'deepbluev7', 'committer_name': 'DeepBlueV7.X', 'committer_email': None, 'commit_date': datetime.datetime(2015, 12, 15, 21, 52, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e8eeb480d51b6fc60c9807dd92195e9068582592', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '898be090af24f43d4f2c20f1cbed40773c0d8312', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e70b4e42680562a308d97ef34f2ad4eb3ac67bd1', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a27662dc0844cf9104967717076123ac73a667c5', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b5deabbdc72f278ea112139999f6e91b8e571b7', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6a47ce72f69438a38a6d16fbba38a4b4075ce07', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b934cf329c61c8790e295a16553a231ba8eeb209', 'committer_username': 'deepbluev7', 'committer_name': 'DeepBlueV7.X', 'committer_email': None, 'commit_date': datetime.datetime(2015, 12, 15, 21, 52, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '94e1b52dddc1d49c60e0372953855651e33d7425', 'committer_username': 'deepbluev7', 'committer_name': 'DeepBlueV7.X', 'committer_email': None, 'commit_date': datetime.datetime(2015, 12, 15, 21, 52, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8eb74daf766ea32804171154d45cb28e32e39e40', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '54db9c89ede00bdcc48a64397cb45073b4fc6625', 'committer_username': 'deepbluev7', 'committer_name': 'DeepBlueV7.X', 'committer_email': None, 'commit_date': datetime.datetime(2015, 12, 15, 21, 52, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4802c340091a5ce18cf444792eed45f461cd6f6b', 'committer_username': 'deepbluev7', 'committer_name': 'DeepBlueV7.X', 'committer_email': None, 'commit_date': datetime.datetime(2015, 12, 15, 21, 52, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '94690ebd4c22c8928b92c4f1723d1c6c5b798698', 'committer_username': 'deepbluev7', 'committer_name': 'DeepBlueV7.X', 'committer_email': None, 'commit_date': datetime.datetime(2015, 12, 15, 21, 52, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '54e3c2c96b75052da8249c3ce92065b9ad09f139', 'committer_username': 'deepbluev7', 'committer_name': 'DeepBlueV7.X', 'committer_email': None, 'commit_date': datetime.datetime(2015, 12, 15, 21, 52, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c9de044e323888e68f4bbb275e89616ca991498f', 'committer_username': 'deepbluev7', 'committer_name': 'DeepBlueV7.X', 'committer_email': None, 'commit_date': datetime.datetime(2015, 12, 15, 21, 52, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '600df6d2ec84df5238781f1274b6f5ff31a34646', 'committer_username': 'deepbluev7', 'committer_name': 'DeepBlueV7.X', 'committer_email': None, 'commit_date': datetime.datetime(2015, 12, 15, 21, 52, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4dccc8e366c01e61186b3bbec7b3491322ad10a', 'committer_username': 'deepbluev7', 'committer_name': 'DeepBlueV7.X', 'committer_email': None, 'commit_date': datetime.datetime(2015, 12, 15, 21, 52, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51964c4fd7f41e9b1a394d0787897d8cd9ba771e', 'committer_username': 'deepbluev7', 'committer_name': 'DeepBlueV7.X', 'committer_email': None, 'commit_date': datetime.datetime(2015, 12, 15, 21, 52, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'abff61bb6cc69f93e9a571375489b22e72b072ab', 'committer_username': 'deepbluev7', 'committer_name': 'DeepBlueV7.X', 'committer_email': None, 'commit_date': datetime.datetime(2015, 12, 15, 21, 52, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a79cd2b6b3548ac86a646b16f5a8d658fdb7282', 'committer_username': 'deepbluev7', 'committer_name': 'DeepBlueV7.X', 'committer_email': None, 'commit_date': datetime.datetime(2015, 12, 15, 21, 52, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bca29a4227a871caac21236c29430b69264018ce', 'committer_username': 'deepbluev7', 'committer_name': 'DeepBlueV7.X', 'committer_email': None, 'commit_date': datetime.datetime(2015, 12, 15, 21, 52, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a4d85f801368137a0b1c17621947b334e280257', 'committer_username': 'deepbluev7', 'committer_name': 'DeepBlueV7.X', 'committer_email': None, 'commit_date': datetime.datetime(2015, 12, 15, 21, 52, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64d5a193f1059cac8225df7b7c3c9eaedfcfa41a', 'committer_username': 'deepbluev7', 'committer_name': 'DeepBlueV7.X', 'committer_email': None, 'commit_date': datetime.datetime(2015, 12, 15, 21, 52, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b6fab33731e369a860ab217709190e9457d6d76', 'committer_username': 'deepbluev7', 'committer_name': 'DeepBlueV7.X', 'committer_email': None, 'commit_date': datetime.datetime(2015, 12, 15, 21, 52, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd43147b77da5852c336fcac857da5c6e7f09569', 'committer_username': 'deepbluev7', 'committer_name': 'DeepBlueV7.X', 'committer_email': None, 'commit_date': datetime.datetime(2015, 12, 15, 21, 52, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99ba1f17d3b7c7cb83c913c17c3f58eccfe3e1f6', 'committer_username': 'deepbluev7', 'committer_name': 'DeepBlueV7.X', 'committer_email': None, 'commit_date': datetime.datetime(2015, 12, 15, 21, 52, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08d5a84cbdbb8937dbe4d43817e01d8ae00760cc', 'committer_username': 'deepbluev7', 'committer_name': 'DeepBlueV7.X', 'committer_email': None, 'commit_date': datetime.datetime(2015, 12, 15, 21, 52, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e5fb9a25ea06f03129961a0df507361baae4b67a', 'committer_username': 'deepbluev7', 'committer_name': 'DeepBlueV7.X', 'committer_email': None, 'commit_date': datetime.datetime(2015, 12, 15, 21, 52, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ec76daedac7419f6ba5eb1f2edf00a6d551f752', 'committer_username': 'deepbluev7', 'committer_name': 'DeepBlueV7.X', 'committer_email': None, 'commit_date': datetime.datetime(2015, 12, 15, 21, 52, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56ba7de50135f566766da334b6ae955f7d6344c6', 'committer_username': 'deepbluev7', 'committer_name': 'DeepBlueV7.X', 'committer_email': None, 'commit_date': datetime.datetime(2015, 12, 15, 21, 52, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '684cfacfadd7d29556f32a3e566d2b1ea76fed1c', 'committer_username': 'deepbluev7', 'committer_name': 'DeepBlueV7.X', 'committer_email': None, 'commit_date': datetime.datetime(2015, 12, 15, 21, 52, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57a6c05eab5a8c712fd480213152c7c26f096b83', 'committer_username': 'deepbluev7', 'committer_name': 'DeepBlueV7.X', 'committer_email': None, 'commit_date': datetime.datetime(2015, 12, 15, 21, 52, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '392d7d5568a2d122061597e5373e63d2469c1a3d', 'committer_username': 'deepbluev7', 'committer_name': 'DeepBlueV7.X', 'committer_email': None, 'commit_date': datetime.datetime(2015, 12, 15, 21, 52, 15, tzinfo=datetime.timezone.utc)}]",Chethan,40890937,crdy2k1@gmail.com,User,,13,,5,1
407246845,Fix issue in the build of device_verification branch,,True,27,https://api.github.com/repos/Nheko-Reborn/mtxclient/pulls/27,https://github.com/Nheko-Reborn/mtxclient/pull/27,closed,222,48,14,11,6,9,0,0,[],2020-04-22 12:06:16+00:00,2020-05-11 21:06:04+00:00,1673988.0,"19 days, 8:59:48","[{'comment_id': 418249175, 'comment_body': 'Just a small thing I noticed just now. This is probably not what you want :D', 'comment_created': datetime.datetime(2020, 4, 30, 19, 47, 59, tzinfo=datetime.timezone.utc), 'commenter': 'deepbluev7', 'type': 'User'}, {'comment_id': 418404152, 'comment_body': 'No clue where it came from', 'comment_created': datetime.datetime(2020, 5, 1, 3, 46, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Chethan2k1', 'type': 'User'}, {'comment_id': 418595897, 'comment_body': 'Can you change the other ToDevice tests to also test agains mtx::events::DeviceEvent instead of ns::Event?', 'comment_created': datetime.datetime(2020, 5, 1, 15, 36, 41, tzinfo=datetime.timezone.utc), 'commenter': 'deepbluev7', 'type': 'User'}, {'comment_id': 418599150, 'comment_body': ""This creates the messages json manually, that you want to send. Could you change the sent_to_device endpoint to accept a vector of mtx::events::collections::DeviceEvents, and where the endpoint creates the messages json? You don't need to remove the old one and can even keep it around, so that the new endpoint calls the old one internally, but that would make the API more consistent with the send_message and similar other functions."", 'comment_created': datetime.datetime(2020, 5, 1, 15, 43, 30, tzinfo=datetime.timezone.utc), 'commenter': 'deepbluev7', 'type': 'User'}, {'comment_id': 418701221, 'comment_body': 'The rest of the to_device events have only **content** and **type** fields hence only ns::Event has to be used.But we can change everything into DeviceEvent if we can make the sender type in the DeviceEvent optional.', 'comment_created': datetime.datetime(2020, 5, 1, 19, 32, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Chethan2k1', 'type': 'User'}, {'comment_id': 418768227, 'comment_body': ""The sender and EventType aren't required here, since they are populated from either DeviceEvent<type> (in the case of to-device messages), or in EncryptedEvent<type> (in the case of room messages)."", 'comment_created': datetime.datetime(2020, 5, 1, 22, 45, 18, tzinfo=datetime.timezone.utc), 'commenter': 'redsky17', 'type': 'User'}, {'comment_id': 418844779, 'comment_body': ""Okay I'll make the changes"", 'comment_created': datetime.datetime(2020, 5, 2, 2, 45, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Chethan2k1', 'type': 'User'}, {'comment_id': 419028454, 'comment_body': 'Minor nit on the comment, from the spec, it appears to be a PUT request rather than a POST request:\r\nhttps://matrix.org/docs/spec/client_server/latest#put-matrix-client-r0-sendtodevice-eventtype-txnid', 'comment_created': datetime.datetime(2020, 5, 3, 0, 55, 39, tzinfo=datetime.timezone.utc), 'commenter': 'redsky17', 'type': 'User'}, {'comment_id': 419045677, 'comment_body': ""My Bad I'll Change it"", 'comment_created': datetime.datetime(2020, 5, 3, 4, 33, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Chethan2k1', 'type': 'User'}]","[{'commit_sha': '985b281410cc7cdc98d17ff41bfdbdb60a73475a', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '89840eee8abb6052d023b052ddf3064d8ba7dfc6', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f1dee1fe91e295ff59abdc52058192e9ec0d57de', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd327a9d934aaef05111a80c3ed674d5847d57fdf', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3849e3d291912522374be0c073bbb61a8590d364', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ceb3dcc7df7d5bcb5e47cb2a76b6b5c4ab7b019', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '237efb3a1d205a8333a1d9ed5b6870de6f1f5399', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '776f0ad8ddf4fa5464b30ef9fe8afb101f7f2b74', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88fa965020908a4fbe623c0ca11f1a11096c2050', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae54c78b38a4b80bb7f67c6e6b4c57999106734b', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f29c0748eaaae4535a0aec63c8ba5a7141f1fb77', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}]",Chethan,40890937,crdy2k1@gmail.com,User,,13,,5,1
434806475,Add methods for SAS,,True,32,https://api.github.com/repos/Nheko-Reborn/mtxclient/pulls/32,https://github.com/Nheko-Reborn/mtxclient/pull/32,closed,397,51,15,8,2,14,0,0,[],2020-06-15 21:21:23+00:00,2020-07-01 00:27:45+00:00,1307182.0,"15 days, 3:06:22","[{'comment_id': 440472275, 'comment_body': 'Not so sure about this. I think, if you are already returning different things depending on the method, you should probably return the emojis or the number depending on the method. At which point it would already be easier to have 2 separate methods or just letting nheko do it. I think it actually may already do that partially.', 'comment_created': datetime.datetime(2020, 6, 15, 22, 3, 31, tzinfo=datetime.timezone.utc), 'commenter': 'deepbluev7', 'type': 'User'}, {'comment_id': 441793521, 'comment_body': 'Why did you change this to an output parameter?', 'comment_created': datetime.datetime(2020, 6, 17, 19, 48, 38, tzinfo=datetime.timezone.utc), 'commenter': 'deepbluev7', 'type': 'User'}, {'comment_id': 441794699, 'comment_body': 'Rather than outputting a vector I felt this was neater', 'comment_created': datetime.datetime(2020, 6, 17, 19, 50, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Chethan2k1', 'type': 'User'}, {'comment_id': 441796266, 'comment_body': ""I'm not so sure about that. Having a function return a value, when it is used to get a value, is usually the idiomatic part. Especially since it make the usage code more complicated, i.e.:\r\n\r\n```\r\n        std::vector<int> alice_emoji;\r\n        alice->generate_bytes_emoji(alice_sas.get(), info, alice_emoji);\r\n```\r\n\r\nvs\r\n\r\n```\r\n        std::vector<int> alice_emoji = alice->generate_bytes_emoji(alice_sas.get(), info);\r\n```"", 'comment_created': datetime.datetime(2020, 6, 17, 19, 53, 43, tzinfo=datetime.timezone.utc), 'commenter': 'deepbluev7', 'type': 'User'}, {'comment_id': 441797512, 'comment_body': ""Yeah actually, I'll change it then"", 'comment_created': datetime.datetime(2020, 6, 17, 19, 56, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Chethan2k1', 'type': 'User'}, {'comment_id': 441811150, 'comment_body': 'I think it may be cleaner to wrap this in a custom class. This could maybe look like this:\r\n\r\n```\r\nstruct SAS\r\n{\r\n        SAS(std::string their_public_key); // constructor, does init and set_their_key\r\n        std::string public_key(); // returns public key\r\n        std::vector<int> generate_bytes_decimal(OlmSAS *sas, std::string info);\r\n        std::vector<int> generate_bytes_emoji(OlmSAS *sas, std::string info);\r\nprivate:\r\n        SASPtr sas;\r\n};', 'comment_created': datetime.datetime(2020, 6, 17, 20, 23, 21, tzinfo=datetime.timezone.utc), 'commenter': 'deepbluev7', 'type': 'User'}, {'comment_id': 441812605, 'comment_body': 'Okay', 'comment_created': datetime.datetime(2020, 6, 17, 20, 26, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Chethan2k1', 'type': 'User'}, {'comment_id': 441815640, 'comment_body': 'But ig in the constructor I wont be taking ```their_public_key``` as parameter cause when I use it ```nheko``` I would get their public key in the later stages.', 'comment_created': datetime.datetime(2020, 6, 17, 20, 32, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Chethan2k1', 'type': 'User'}, {'comment_id': 441817063, 'comment_body': ""Well, I'm not sure, how you intend to use it, but I thought you would only allocate the SAS object, when you actually want to use it and you may have the public key available in that case already. If that doesn't match with what you intend to do, then yes, taking the public key separately makes sense :3"", 'comment_created': datetime.datetime(2020, 6, 17, 20, 34, 28, tzinfo=datetime.timezone.utc), 'commenter': 'deepbluev7', 'type': 'User'}, {'comment_id': 441821170, 'comment_body': 'I was planning to create a SAS object for every flow and then when I get the ```key.verification.start``` that contains the public key of the other user I would assign it then.', 'comment_created': datetime.datetime(2020, 6, 17, 20, 40, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Chethan2k1', 'type': 'User'}, {'comment_id': 441821827, 'comment_body': 'Yeah, makes sense. You also need to set the key alter for your tests.', 'comment_created': datetime.datetime(2020, 6, 17, 20, 41, 39, tzinfo=datetime.timezone.utc), 'commenter': 'deepbluev7', 'type': 'User'}, {'comment_id': 445237049, 'comment_body': ""Could you maybe write a short doc string for each of those explaining how they are meant to be used, i.e.\r\n\r\n```cpp\r\n//! After constructing a SAS object, you can set the key for the other party using this function. This needs to be done before generating bytes or calculating a MAC.\r\n```\r\n\r\nWith that I'd say this should be ready to merge, so you may want to undraft it?"", 'comment_created': datetime.datetime(2020, 6, 25, 0, 5, 46, tzinfo=datetime.timezone.utc), 'commenter': 'deepbluev7', 'type': 'User'}, {'comment_id': 445237533, 'comment_body': 'iirc, create_buffer creates a buffer filled with random numbers. You may want to call BinaryBuf(5) instead, I think, if you are not creating a cryptographic key but are just using the buffer as a resource.', 'comment_created': datetime.datetime(2020, 6, 25, 0, 7, 35, tzinfo=datetime.timezone.utc), 'commenter': 'deepbluev7', 'type': 'User'}, {'comment_id': 445437680, 'comment_body': ""Yeah I'll resolve that issue and add some explanation, maybe then if nothing else is left to do I'll undraft it "", 'comment_created': datetime.datetime(2020, 6, 25, 9, 44, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Chethan2k1', 'type': 'User'}]","[{'commit_sha': 'f3fb331872404a5b91c54d6977ecc0f6ae8043df', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '687629cfd1b066a93c53ff171ff781fa0b709ab9', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7667a3174143295f7d372fd8e59867ea58f62353', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46cc2208fbfc115a5a4b56e67116495bf63111a0', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba68cbbd4a4e82842f2bb4fd520a371619472592', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1486ad704734c85ac3dee5a9204f6d9823ce4fe6', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b9830d2dc31fb79829e2bf74f6f66c1df2cb1869', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6126ae79d4f6c36e5369e1c69d22f815d219317b', 'committer_username': 'deepbluev7', 'committer_name': 'DeepBlueV7.X', 'committer_email': None, 'commit_date': datetime.datetime(2015, 12, 15, 21, 52, 15, tzinfo=datetime.timezone.utc)}]",Chethan,40890937,crdy2k1@gmail.com,User,,13,,5,1
465100543,Room verification and cross-signing ,,True,37,https://api.github.com/repos/Nheko-Reborn/mtxclient/pulls/37,https://github.com/Nheko-Reborn/mtxclient/pull/37,closed,539,320,25,9,1,1,0,0,[],2020-08-09 03:13:08+00:00,2020-08-30 10:50:45+00:00,1841857.0,"21 days, 7:37:37","[{'comment_id': 478590385, 'comment_body': 'You should probably use a temporary variable for this to not serialize the same event twice.', 'comment_created': datetime.datetime(2020, 8, 27, 17, 44, 29, tzinfo=datetime.timezone.utc), 'commenter': 'deepbluev7', 'type': 'User'}]","[{'commit_sha': '5d87e7857269657c78823462c2789b636658ccab', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd998359768c5d531e3723f5d0c976a75ce9111ea', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f50ba05aa103358646d0fc875df1120368de0278', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4524dc4fe4b7887df4eca9d322e849f4c24b7aba', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c5e24949b9d9ef2d9e6c8e7ec175f055f23c7960', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dda0e1de7540092cdf920a4ee88f2872bd10dacd', 'committer_username': 'deepbluev7', 'committer_name': 'DeepBlueV7.X', 'committer_email': None, 'commit_date': datetime.datetime(2015, 12, 15, 21, 52, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a94cc9cd973b431a4877256eab7da83b56b76bf9', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8cdf6c21e5e4ba2f720f5995ea9a3cdd5b8111e3', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac4913f167c25c26d46c2e5f8ea19cbd4168f190', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}]",Chethan,40890937,crdy2k1@gmail.com,User,,13,,5,1
407246845,Fix issue in the build of device_verification branch,,True,27,https://api.github.com/repos/Nheko-Reborn/mtxclient/pulls/27,https://github.com/Nheko-Reborn/mtxclient/pull/27,closed,222,48,14,11,6,9,0,0,[],2020-04-22 12:06:16+00:00,2020-05-11 21:06:04+00:00,1673988.0,"19 days, 8:59:48","[{'comment_id': 418249175, 'comment_body': 'Just a small thing I noticed just now. This is probably not what you want :D', 'comment_created': datetime.datetime(2020, 4, 30, 19, 47, 59, tzinfo=datetime.timezone.utc), 'commenter': 'deepbluev7', 'type': 'User'}, {'comment_id': 418404152, 'comment_body': 'No clue where it came from', 'comment_created': datetime.datetime(2020, 5, 1, 3, 46, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Chethan2k1', 'type': 'User'}, {'comment_id': 418595897, 'comment_body': 'Can you change the other ToDevice tests to also test agains mtx::events::DeviceEvent instead of ns::Event?', 'comment_created': datetime.datetime(2020, 5, 1, 15, 36, 41, tzinfo=datetime.timezone.utc), 'commenter': 'deepbluev7', 'type': 'User'}, {'comment_id': 418599150, 'comment_body': ""This creates the messages json manually, that you want to send. Could you change the sent_to_device endpoint to accept a vector of mtx::events::collections::DeviceEvents, and where the endpoint creates the messages json? You don't need to remove the old one and can even keep it around, so that the new endpoint calls the old one internally, but that would make the API more consistent with the send_message and similar other functions."", 'comment_created': datetime.datetime(2020, 5, 1, 15, 43, 30, tzinfo=datetime.timezone.utc), 'commenter': 'deepbluev7', 'type': 'User'}, {'comment_id': 418701221, 'comment_body': 'The rest of the to_device events have only **content** and **type** fields hence only ns::Event has to be used.But we can change everything into DeviceEvent if we can make the sender type in the DeviceEvent optional.', 'comment_created': datetime.datetime(2020, 5, 1, 19, 32, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Chethan2k1', 'type': 'User'}, {'comment_id': 418768227, 'comment_body': ""The sender and EventType aren't required here, since they are populated from either DeviceEvent<type> (in the case of to-device messages), or in EncryptedEvent<type> (in the case of room messages)."", 'comment_created': datetime.datetime(2020, 5, 1, 22, 45, 18, tzinfo=datetime.timezone.utc), 'commenter': 'redsky17', 'type': 'User'}, {'comment_id': 418844779, 'comment_body': ""Okay I'll make the changes"", 'comment_created': datetime.datetime(2020, 5, 2, 2, 45, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Chethan2k1', 'type': 'User'}, {'comment_id': 419028454, 'comment_body': 'Minor nit on the comment, from the spec, it appears to be a PUT request rather than a POST request:\r\nhttps://matrix.org/docs/spec/client_server/latest#put-matrix-client-r0-sendtodevice-eventtype-txnid', 'comment_created': datetime.datetime(2020, 5, 3, 0, 55, 39, tzinfo=datetime.timezone.utc), 'commenter': 'redsky17', 'type': 'User'}, {'comment_id': 419045677, 'comment_body': ""My Bad I'll Change it"", 'comment_created': datetime.datetime(2020, 5, 3, 4, 33, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Chethan2k1', 'type': 'User'}]","[{'commit_sha': '985b281410cc7cdc98d17ff41bfdbdb60a73475a', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '89840eee8abb6052d023b052ddf3064d8ba7dfc6', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f1dee1fe91e295ff59abdc52058192e9ec0d57de', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd327a9d934aaef05111a80c3ed674d5847d57fdf', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3849e3d291912522374be0c073bbb61a8590d364', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ceb3dcc7df7d5bcb5e47cb2a76b6b5c4ab7b019', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '237efb3a1d205a8333a1d9ed5b6870de6f1f5399', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '776f0ad8ddf4fa5464b30ef9fe8afb101f7f2b74', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88fa965020908a4fbe623c0ca11f1a11096c2050', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae54c78b38a4b80bb7f67c6e6b4c57999106734b', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f29c0748eaaae4535a0aec63c8ba5a7141f1fb77', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}]",Chethan,40890937,crdy2k1@gmail.com,User,,13,,5,1
417194856,Fix nheko build(uses mtxclient device-verification),,True,198,https://api.github.com/repos/Nheko-Reborn/nheko/pulls/198,https://github.com/Nheko-Reborn/nheko/pull/198,closed,46,41,5,3,0,2,0,0,[],2020-05-13 08:14:03+00:00,2020-05-15 12:56:11+00:00,189728.0,"2 days, 4:42:08","[{'comment_id': 424584766, 'comment_body': ""You shouldn't need this"", 'comment_created': datetime.datetime(2020, 5, 13, 16, 48, 17, tzinfo=datetime.timezone.utc), 'commenter': 'deepbluev7', 'type': 'User'}, {'comment_id': 424584978, 'comment_body': 'This will probably cause linter issues, remember to run make lint', 'comment_created': datetime.datetime(2020, 5, 13, 16, 48, 39, tzinfo=datetime.timezone.utc), 'commenter': 'deepbluev7', 'type': 'User'}]","[{'commit_sha': '30d61e3114927a93305fc52ed4a78ab0dc50024f', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4a7e859354653d4ddd60dc9e2b83132feffaceb', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57b8cdbd4d94bd0adf5c92f775227e04dd5f2bf1', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}]",Chethan,40890937,crdy2k1@gmail.com,User,,13,,5,1
465100543,Room verification and cross-signing ,,True,37,https://api.github.com/repos/Nheko-Reborn/mtxclient/pulls/37,https://github.com/Nheko-Reborn/mtxclient/pull/37,closed,539,320,25,9,1,1,0,0,[],2020-08-09 03:13:08+00:00,2020-08-30 10:50:45+00:00,1841857.0,"21 days, 7:37:37","[{'comment_id': 478590385, 'comment_body': 'You should probably use a temporary variable for this to not serialize the same event twice.', 'comment_created': datetime.datetime(2020, 8, 27, 17, 44, 29, tzinfo=datetime.timezone.utc), 'commenter': 'deepbluev7', 'type': 'User'}]","[{'commit_sha': '5d87e7857269657c78823462c2789b636658ccab', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd998359768c5d531e3723f5d0c976a75ce9111ea', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f50ba05aa103358646d0fc875df1120368de0278', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4524dc4fe4b7887df4eca9d322e849f4c24b7aba', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c5e24949b9d9ef2d9e6c8e7ec175f055f23c7960', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dda0e1de7540092cdf920a4ee88f2872bd10dacd', 'committer_username': 'deepbluev7', 'committer_name': 'DeepBlueV7.X', 'committer_email': None, 'commit_date': datetime.datetime(2015, 12, 15, 21, 52, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a94cc9cd973b431a4877256eab7da83b56b76bf9', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8cdf6c21e5e4ba2f720f5995ea9a3cdd5b8111e3', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac4913f167c25c26d46c2e5f8ea19cbd4168f190', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}]",Chethan,40890937,crdy2k1@gmail.com,User,,13,,5,1
434806475,Add methods for SAS,,True,32,https://api.github.com/repos/Nheko-Reborn/mtxclient/pulls/32,https://github.com/Nheko-Reborn/mtxclient/pull/32,closed,397,51,15,8,2,14,0,0,[],2020-06-15 21:21:23+00:00,2020-07-01 00:27:45+00:00,1307182.0,"15 days, 3:06:22","[{'comment_id': 440472275, 'comment_body': 'Not so sure about this. I think, if you are already returning different things depending on the method, you should probably return the emojis or the number depending on the method. At which point it would already be easier to have 2 separate methods or just letting nheko do it. I think it actually may already do that partially.', 'comment_created': datetime.datetime(2020, 6, 15, 22, 3, 31, tzinfo=datetime.timezone.utc), 'commenter': 'deepbluev7', 'type': 'User'}, {'comment_id': 441793521, 'comment_body': 'Why did you change this to an output parameter?', 'comment_created': datetime.datetime(2020, 6, 17, 19, 48, 38, tzinfo=datetime.timezone.utc), 'commenter': 'deepbluev7', 'type': 'User'}, {'comment_id': 441794699, 'comment_body': 'Rather than outputting a vector I felt this was neater', 'comment_created': datetime.datetime(2020, 6, 17, 19, 50, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Chethan2k1', 'type': 'User'}, {'comment_id': 441796266, 'comment_body': ""I'm not so sure about that. Having a function return a value, when it is used to get a value, is usually the idiomatic part. Especially since it make the usage code more complicated, i.e.:\r\n\r\n```\r\n        std::vector<int> alice_emoji;\r\n        alice->generate_bytes_emoji(alice_sas.get(), info, alice_emoji);\r\n```\r\n\r\nvs\r\n\r\n```\r\n        std::vector<int> alice_emoji = alice->generate_bytes_emoji(alice_sas.get(), info);\r\n```"", 'comment_created': datetime.datetime(2020, 6, 17, 19, 53, 43, tzinfo=datetime.timezone.utc), 'commenter': 'deepbluev7', 'type': 'User'}, {'comment_id': 441797512, 'comment_body': ""Yeah actually, I'll change it then"", 'comment_created': datetime.datetime(2020, 6, 17, 19, 56, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Chethan2k1', 'type': 'User'}, {'comment_id': 441811150, 'comment_body': 'I think it may be cleaner to wrap this in a custom class. This could maybe look like this:\r\n\r\n```\r\nstruct SAS\r\n{\r\n        SAS(std::string their_public_key); // constructor, does init and set_their_key\r\n        std::string public_key(); // returns public key\r\n        std::vector<int> generate_bytes_decimal(OlmSAS *sas, std::string info);\r\n        std::vector<int> generate_bytes_emoji(OlmSAS *sas, std::string info);\r\nprivate:\r\n        SASPtr sas;\r\n};', 'comment_created': datetime.datetime(2020, 6, 17, 20, 23, 21, tzinfo=datetime.timezone.utc), 'commenter': 'deepbluev7', 'type': 'User'}, {'comment_id': 441812605, 'comment_body': 'Okay', 'comment_created': datetime.datetime(2020, 6, 17, 20, 26, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Chethan2k1', 'type': 'User'}, {'comment_id': 441815640, 'comment_body': 'But ig in the constructor I wont be taking ```their_public_key``` as parameter cause when I use it ```nheko``` I would get their public key in the later stages.', 'comment_created': datetime.datetime(2020, 6, 17, 20, 32, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Chethan2k1', 'type': 'User'}, {'comment_id': 441817063, 'comment_body': ""Well, I'm not sure, how you intend to use it, but I thought you would only allocate the SAS object, when you actually want to use it and you may have the public key available in that case already. If that doesn't match with what you intend to do, then yes, taking the public key separately makes sense :3"", 'comment_created': datetime.datetime(2020, 6, 17, 20, 34, 28, tzinfo=datetime.timezone.utc), 'commenter': 'deepbluev7', 'type': 'User'}, {'comment_id': 441821170, 'comment_body': 'I was planning to create a SAS object for every flow and then when I get the ```key.verification.start``` that contains the public key of the other user I would assign it then.', 'comment_created': datetime.datetime(2020, 6, 17, 20, 40, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Chethan2k1', 'type': 'User'}, {'comment_id': 441821827, 'comment_body': 'Yeah, makes sense. You also need to set the key alter for your tests.', 'comment_created': datetime.datetime(2020, 6, 17, 20, 41, 39, tzinfo=datetime.timezone.utc), 'commenter': 'deepbluev7', 'type': 'User'}, {'comment_id': 445237049, 'comment_body': ""Could you maybe write a short doc string for each of those explaining how they are meant to be used, i.e.\r\n\r\n```cpp\r\n//! After constructing a SAS object, you can set the key for the other party using this function. This needs to be done before generating bytes or calculating a MAC.\r\n```\r\n\r\nWith that I'd say this should be ready to merge, so you may want to undraft it?"", 'comment_created': datetime.datetime(2020, 6, 25, 0, 5, 46, tzinfo=datetime.timezone.utc), 'commenter': 'deepbluev7', 'type': 'User'}, {'comment_id': 445237533, 'comment_body': 'iirc, create_buffer creates a buffer filled with random numbers. You may want to call BinaryBuf(5) instead, I think, if you are not creating a cryptographic key but are just using the buffer as a resource.', 'comment_created': datetime.datetime(2020, 6, 25, 0, 7, 35, tzinfo=datetime.timezone.utc), 'commenter': 'deepbluev7', 'type': 'User'}, {'comment_id': 445437680, 'comment_body': ""Yeah I'll resolve that issue and add some explanation, maybe then if nothing else is left to do I'll undraft it "", 'comment_created': datetime.datetime(2020, 6, 25, 9, 44, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Chethan2k1', 'type': 'User'}]","[{'commit_sha': 'f3fb331872404a5b91c54d6977ecc0f6ae8043df', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '687629cfd1b066a93c53ff171ff781fa0b709ab9', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7667a3174143295f7d372fd8e59867ea58f62353', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46cc2208fbfc115a5a4b56e67116495bf63111a0', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba68cbbd4a4e82842f2bb4fd520a371619472592', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1486ad704734c85ac3dee5a9204f6d9823ce4fe6', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b9830d2dc31fb79829e2bf74f6f66c1df2cb1869', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6126ae79d4f6c36e5369e1c69d22f815d219317b', 'committer_username': 'deepbluev7', 'committer_name': 'DeepBlueV7.X', 'committer_email': None, 'commit_date': datetime.datetime(2015, 12, 15, 21, 52, 15, tzinfo=datetime.timezone.utc)}]",Chethan,40890937,crdy2k1@gmail.com,User,,13,,5,1
465100543,Room verification and cross-signing ,,True,37,https://api.github.com/repos/Nheko-Reborn/mtxclient/pulls/37,https://github.com/Nheko-Reborn/mtxclient/pull/37,closed,539,320,25,9,1,1,0,0,[],2020-08-09 03:13:08+00:00,2020-08-30 10:50:45+00:00,1841857.0,"21 days, 7:37:37","[{'comment_id': 478590385, 'comment_body': 'You should probably use a temporary variable for this to not serialize the same event twice.', 'comment_created': datetime.datetime(2020, 8, 27, 17, 44, 29, tzinfo=datetime.timezone.utc), 'commenter': 'deepbluev7', 'type': 'User'}]","[{'commit_sha': '5d87e7857269657c78823462c2789b636658ccab', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd998359768c5d531e3723f5d0c976a75ce9111ea', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f50ba05aa103358646d0fc875df1120368de0278', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4524dc4fe4b7887df4eca9d322e849f4c24b7aba', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c5e24949b9d9ef2d9e6c8e7ec175f055f23c7960', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dda0e1de7540092cdf920a4ee88f2872bd10dacd', 'committer_username': 'deepbluev7', 'committer_name': 'DeepBlueV7.X', 'committer_email': None, 'commit_date': datetime.datetime(2015, 12, 15, 21, 52, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a94cc9cd973b431a4877256eab7da83b56b76bf9', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8cdf6c21e5e4ba2f720f5995ea9a3cdd5b8111e3', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac4913f167c25c26d46c2e5f8ea19cbd4168f190', 'committer_username': 'Chethan2k1', 'committer_name': 'Chethan', 'committer_email': 'crdy2k1@gmail.com', 'commit_date': datetime.datetime(2018, 7, 6, 12, 9, 31, tzinfo=datetime.timezone.utc)}]",Chethan,40890937,crdy2k1@gmail.com,User,,13,,5,1

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
165144850,nheko,Nheko-Reborn/nheko,C++,199,1861,36,179,5827,374,62,19,"[{'id': 480522316, 'number': 275, 'closed': datetime.datetime(2020, 9, 13, 14, 38, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 5, 13, 47, 24, tzinfo=datetime.timezone.utc), 'time_taken': 694255.0, 'time_delta': '8 days, 0:50:55', 'additions': 1, 'deletions': 0, 'state': 'closed'}, {'id': 475897010, 'number': 270, 'closed': datetime.datetime(2020, 10, 8, 18, 8, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 30, 11, 11, 55, tzinfo=datetime.timezone.utc), 'time_taken': 3394604.0, 'time_delta': '39 days, 6:56:44', 'additions': 3704, 'deletions': 319, 'state': 'closed'}, {'id': 419119079, 'number': 203, 'closed': datetime.datetime(2020, 8, 30, 11, 13, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 17, 14, 11, 1, tzinfo=datetime.timezone.utc), 'time_taken': 9061367.0, 'time_delta': '104 days, 21:02:47', 'additions': 2810, 'deletions': 446, 'state': 'closed'}, {'id': 417194856, 'number': 198, 'closed': datetime.datetime(2020, 5, 15, 12, 56, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 13, 8, 14, 3, tzinfo=datetime.timezone.utc), 'time_taken': 189728.0, 'time_delta': '2 days, 4:42:08', 'additions': 46, 'deletions': 41, 'state': 'closed'}]"
165948265,mtxclient,Nheko-Reborn/mtxclient,C++,25,37,9,25,946,12,15,1,"[{'id': 479362284, 'number': 40, 'closed': datetime.datetime(2020, 9, 4, 11, 37, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 4, 7, 2, 2, tzinfo=datetime.timezone.utc), 'time_taken': 16553.0, 'time_delta': '4:35:53', 'additions': 101, 'deletions': 84, 'state': 'closed'}, {'id': 465100543, 'number': 37, 'closed': datetime.datetime(2020, 8, 30, 10, 50, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 9, 3, 13, 8, tzinfo=datetime.timezone.utc), 'time_taken': 1841857.0, 'time_delta': '21 days, 7:37:37', 'additions': 539, 'deletions': 320, 'state': 'closed'}, {'id': 442905034, 'number': 34, 'closed': datetime.datetime(2020, 8, 9, 3, 12, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 1, 19, 2, 40, tzinfo=datetime.timezone.utc), 'time_taken': 3312576.0, 'time_delta': '38 days, 8:09:36', 'additions': 295, 'deletions': 234, 'state': 'closed'}, {'id': 434806475, 'number': 32, 'closed': datetime.datetime(2020, 7, 1, 0, 27, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 15, 21, 21, 23, tzinfo=datetime.timezone.utc), 'time_taken': 1307182.0, 'time_delta': '15 days, 3:06:22', 'additions': 397, 'deletions': 51, 'state': 'closed'}, {'id': 407246845, 'number': 27, 'closed': datetime.datetime(2020, 5, 11, 21, 6, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 22, 12, 6, 16, tzinfo=datetime.timezone.utc), 'time_taken': 1673988.0, 'time_delta': '19 days, 8:59:48', 'additions': 222, 'deletions': 48, 'state': 'closed'}]"
