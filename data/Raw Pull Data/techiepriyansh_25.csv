pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
963287781,Add support for saving lightmap as multiple images,"<!--
Pull requests should always be made for the `master` branch first, as that's
where development happens and the source of all future stable release branches.

Relevant fixes are cherry-picked for stable branches as needed.

Do not create a pull request for stable branches unless the change is already
available in the `master` branch and it cannot be easily cherry-picked.
Alternatively, if the change is only relevant for that branch (e.g. rendering
fixes for the 3.2 branch).
-->
`master` port of #58102.

Needs to be tested on a really large scene for the ""roll-over to multiple textures"" limit to be reached. I have only tested by hardcoding `slices_per_texture = 1`, but in theory, should work just fine for the general case too.

~~Also, currently there is lightmap texture data duplication as both the individual textures and the combined texture co-exist. Need to figure out a way around it. (This only happens when the texture data cannot be contained in a single `Image`; so no overhead until the roll-over limit is reached).~~ âœ…
",True,61861,https://api.github.com/repos/godotengine/godot/pulls/61861,https://github.com/godotengine/godot/pull/61861,closed,109,50,2,1,5,5,3,0,"[{'name': 'enhancement'}, {'name': 'topic:rendering'}, {'name': 'topic:3d'}]",2022-06-09 20:04:06+00:00,2022-06-14 14:11:30+00:00,410844.0,"4 days, 18:07:24","[{'comment_id': 895596256, 'comment_body': ""```suggestion\r\n\tERR_FAIL_COND(p_data.is_empty());\r\n```\r\n\r\nMinor nitpick. I think there's another instance of this in the same file, it could be changed too."", 'comment_created': datetime.datetime(2022, 6, 13, 11, 7, 11, tzinfo=datetime.timezone.utc), 'commenter': 'JFonS', 'type': 'User'}, {'comment_id': 896681103, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2022, 6, 14, 11, 5, 9, tzinfo=datetime.timezone.utc), 'commenter': 'techiepriyansh', 'type': 'User'}, {'comment_id': 896712429, 'comment_body': 'Changed the other one too (#62026).', 'comment_created': datetime.datetime(2022, 6, 14, 11, 43, 10, tzinfo=datetime.timezone.utc), 'commenter': 'techiepriyansh', 'type': 'User'}, {'comment_id': 896715358, 'comment_body': ""I think the idea was to change it in this PR too in passing, it's not the kind of code style change that warrants its own PR (or then it should be a PR that uses search and replace to do the same fix in the whole codebase)."", 'comment_created': datetime.datetime(2022, 6, 14, 11, 46, 37, tzinfo=datetime.timezone.utc), 'commenter': 'akien-mga', 'type': 'User'}, {'comment_id': 896718600, 'comment_body': 'OK understood. I will close that PR and make the change in this PR itself. ', 'comment_created': datetime.datetime(2022, 6, 14, 11, 50, 17, tzinfo=datetime.timezone.utc), 'commenter': 'techiepriyansh', 'type': 'User'}]","[{'commit_sha': 'd49c1cfc3e0abf8cecad5fc1957eda91a8cdc746', 'committer_username': 'techiepriyansh', 'committer_name': 'Priyansh Rathi', 'committer_email': None, 'commit_date': datetime.datetime(2017, 3, 5, 11, 53, 28, tzinfo=datetime.timezone.utc)}]",Priyansh Rathi,26199781,,User,,45,,41,43
967535921,Add support for soft shadows to the GPU lightmapper,"`master` port of #50184.
Closes #52199.

## Results

<details>
  <summary> Directional Light </summary>
 
  * w/o soft shadows 
   ![before_soft_shadows](https://user-images.githubusercontent.com/26199781/173709425-2be877fd-4c4a-415e-8df4-06180378f689.png) 
  * w/ soft shadows (`size = 10deg`) 
    ![after_soft_shadows_10deg](https://user-images.githubusercontent.com/26199781/173709519-25dbf0ed-1a1a-4779-aada-519f04b69ae4.png)

</details>

<details>
  <summary> Spot Light </summary>

  * w/o soft shadows 
    ![without_soft_shadows_spotlight](https://user-images.githubusercontent.com/26199781/173710286-b4621394-9515-4e33-b428-8f466dc3de83.png)

  * w/ soft shadows (`size = 1m`) 
   ![after_soft_shadows_spotlight_1m](https://user-images.githubusercontent.com/26199781/173710320-a50b833d-4664-4f88-a6a7-04b0259fa9cf.png)

</details>

<details>
  <summary> Omni Light </summary>

  * w/o soft shadows 
    ![before_soft_shadows_omni](https://user-images.githubusercontent.com/26199781/173710446-6207ce15-384f-4fb1-bbe1-5ead187bbb19.png)

  * w/ soft shadows (`size = 1m`) 
    ![after_soft_shadows_omni](https://user-images.githubusercontent.com/26199781/173710521-65dc327a-46c7-4dc9-ac48-da2970366c18.png)

</details>
",True,62054,https://api.github.com/repos/godotengine/godot/pulls/62054,https://github.com/godotengine/godot/pull/62054,closed,104,51,6,1,7,5,3,0,"[{'name': 'enhancement'}, {'name': 'topic:rendering'}, {'name': 'topic:3d'}]",2022-06-15 00:23:21+00:00,2022-06-24 20:29:40+00:00,849979.0,"9 days, 20:06:19","[{'comment_id': 897523406, 'comment_body': 'Should the disk be uniformly sampled? If so, then ``r`` should be ``sqrt(randomize(noise))``', 'comment_created': datetime.datetime(2022, 6, 15, 4, 30, 49, tzinfo=datetime.timezone.utc), 'commenter': 'clayjohn', 'type': 'User'}, {'comment_id': 897957715, 'comment_body': 'Probably yes, @JFonS what do you think?', 'comment_created': datetime.datetime(2022, 6, 15, 13, 7, 57, tzinfo=datetime.timezone.utc), 'commenter': 'techiepriyansh', 'type': 'User'}, {'comment_id': 898862506, 'comment_body': 'So yes, `r` should be `sqrt(...)`. ([reference](https://developer.nvidia.com/gpugems/gpugems2/part-ii-shading-lighting-and-shadows/chapter-17-efficient-soft-edged-shadows-using#:~:text=we%20use%20the%20following%20formulas%3A))', 'comment_created': datetime.datetime(2022, 6, 16, 9, 0, 17, tzinfo=datetime.timezone.utc), 'commenter': 'techiepriyansh', 'type': 'User'}, {'comment_id': 898953866, 'comment_body': ""@techiepriyansh Not necessarily. The technique in the article is an approximation for real-time soft shadows (using shadow-maps) but in our case we are sampling a spherical light.\r\n\r\nThe truth is, we are also using an approximation of the [proper spherical light sampling](https://schuttejoe.github.io/post/arealightsampling/), but it works just fine inmost cases. There might be some differences in very large lights, but nothing really noticeable.\r\n\r\nTo me intuitively, it makes sense to have more samples toward the center of the disk, as its the projection of a sphere but I'd have to do the math and double-check. In any case, I would test the two proposed distributions and see if it makes a difference. I'm pretty sure the difference will be barely noticeable for reasonable light sizes."", 'comment_created': datetime.datetime(2022, 6, 16, 10, 48, 56, tzinfo=datetime.timezone.utc), 'commenter': 'JFonS', 'type': 'User'}, {'comment_id': 906339298, 'comment_body': 'For future reference, we are going with the non-sqrt version. This will sample the disk more heavily towards the centre.', 'comment_created': datetime.datetime(2022, 6, 24, 19, 19, 38, tzinfo=datetime.timezone.utc), 'commenter': 'clayjohn', 'type': 'User'}]","[{'commit_sha': 'e995764e50df96e22abdcaadc7d2f413d5c1cf6e', 'committer_username': 'techiepriyansh', 'committer_name': 'Priyansh Rathi', 'committer_email': None, 'commit_date': datetime.datetime(2017, 3, 5, 11, 53, 28, tzinfo=datetime.timezone.utc)}]",Priyansh Rathi,26199781,,User,,45,,41,43
995836840,Add a debug draw mode for displaying UV2 (lightmap) texel density ,"Adds a debug draw mode for displaying UV2 texel density. It displays the UV2 texel density of all `MeshInstance3Ds` which have their `GI_MODE` set to `GI_MODE_STATIC`.

Partially addresses godotengine/godot-proposals#3213.

### Todo

- [x] Port to `mobile` backend.
- [x] Figure out a better way to set `DEBUG_UV2_TEXEL_DENSITY` inside the scene shader instead of using a render mode define.
- [x] Use the [fancy checkerboarding shader](https://www.shadertoy.com/view/XlcSz2).



",False,62987,https://api.github.com/repos/godotengine/godot/pulls/62987,https://github.com/godotengine/godot/pull/62987,open,421,34,38,1,14,26,4,0,"[{'name': 'enhancement'}, {'name': 'topic:rendering'}, {'name': 'salvageable'}, {'name': 'topic:3d'}]",2022-07-13 18:55:08+00:00,,0.0,,"[{'comment_id': 929571155, 'comment_body': ""```suggestion\r\n\t\t\t\t\tif (inst->shader_parameters_offset == -1 && !inst->data->instance_allocated_shader_parameters && ) {\r\n```\r\n\r\nIn my test project I get a spammed error because ``global_variables_instance_allocate()`` return ``-1`` if the instance has already been allocated. Adding the check for ``instance_allocated_shader_parameters`` ensures that this doesn't happen."", 'comment_created': datetime.datetime(2022, 7, 26, 6, 28, 33, tzinfo=datetime.timezone.utc), 'commenter': 'clayjohn', 'type': 'User'}, {'comment_id': 930279749, 'comment_body': ""I've added appropriate checks to mitigate the spammed error."", 'comment_created': datetime.datetime(2022, 7, 26, 18, 16, 42, tzinfo=datetime.timezone.utc), 'commenter': 'techiepriyansh', 'type': 'User'}, {'comment_id': 930281496, 'comment_body': 'Did you test just adding ``&& !inst->data->instance_allocated_shader_parameters``? From my test it was able to remove the spammed error and it is much simpler code', 'comment_created': datetime.datetime(2022, 7, 26, 18, 18, 50, tzinfo=datetime.timezone.utc), 'commenter': 'clayjohn', 'type': 'User'}, {'comment_id': 930282540, 'comment_body': 'We should mention here how wide (in texels) the squares are. If I read your code correctly then users can expect that each square is 10 texels by 10 texels', 'comment_created': datetime.datetime(2022, 7, 26, 18, 20, 4, tzinfo=datetime.timezone.utc), 'commenter': 'clayjohn', 'type': 'User'}, {'comment_id': 930282839, 'comment_body': 'Same comment as below', 'comment_created': datetime.datetime(2022, 7, 26, 18, 20, 24, tzinfo=datetime.timezone.utc), 'commenter': 'clayjohn', 'type': 'User'}, {'comment_id': 930283080, 'comment_body': 'This will need to be filled-in as well. ', 'comment_created': datetime.datetime(2022, 7, 26, 18, 20, 40, tzinfo=datetime.timezone.utc), 'commenter': 'clayjohn', 'type': 'User'}, {'comment_id': 945887373, 'comment_body': ""Part of the issue here is that that global shader uniforms hashmap takes any RID. I.e. it doesn't check if the RID is for a geometry instance. Here you are passing an RID for the mesh that the Geometry Instance uses. Accordingly, if to MeshInstances use the same mesh, the check fails for the second MeshInstance and the instance uniform does not get updated below. \r\n\r\nI think you will need to store a ``->self`` value in ``RenderGeometryInstanceBase`` so you can access the RID of the GeometryInstance itself"", 'comment_created': datetime.datetime(2022, 8, 15, 15, 42, 44, tzinfo=datetime.timezone.utc), 'commenter': 'clayjohn', 'type': 'User'}, {'comment_id': 945901026, 'comment_body': 'Yeah, I was thinking of the same solution.', 'comment_created': datetime.datetime(2022, 8, 15, 15, 58, 16, tzinfo=datetime.timezone.utc), 'commenter': 'techiepriyansh', 'type': 'User'}, {'comment_id': 952743097, 'comment_body': 'We should add some comments above this function. Essentially something like ""Unit variable allocate is an alternative way of allocating global shader uniforms. It returns a single variable that can be used and its position in the global shader uniform buffer. This is intended to be used for debug drawing purposes and should not be used for anything substantial.""', 'comment_created': datetime.datetime(2022, 8, 23, 15, 1, 1, tzinfo=datetime.timezone.utc), 'commenter': 'clayjohn', 'type': 'User'}, {'comment_id': 952761335, 'comment_body': 'This can default to -1 now and the comment can be removed', 'comment_created': datetime.datetime(2022, 8, 23, 15, 16, 16, tzinfo=datetime.timezone.utc), 'commenter': 'clayjohn', 'type': 'User'}, {'comment_id': 952764526, 'comment_body': 'Some suggestions to comply with our [shader style guide](https://docs.godotengine.org/en/latest/tutorials/shaders/shaders_style_guide.html)\r\n```suggestion\r\n\tvec2 s = 2.0 * (abs(fract((p - 0.5 * w) / 2.0) - 0.5) - abs(fract((p + 0.5 * w) / 2.0) - 0.5)) / w;\r\n\tfloat t = 0.5 - 0.5 * s.x * s.y;\r\n```', 'comment_created': datetime.datetime(2022, 8, 23, 15, 19, 1, tzinfo=datetime.timezone.utc), 'commenter': 'clayjohn', 'type': 'User'}, {'comment_id': 952765093, 'comment_body': 'Same changes as above', 'comment_created': datetime.datetime(2022, 8, 23, 15, 19, 28, tzinfo=datetime.timezone.utc), 'commenter': 'clayjohn', 'type': 'User'}, {'comment_id': 952765482, 'comment_body': 'Same comment as for GLES3', 'comment_created': datetime.datetime(2022, 8, 23, 15, 19, 48, tzinfo=datetime.timezone.utc), 'commenter': 'clayjohn', 'type': 'User'}, {'comment_id': 952935291, 'comment_body': ""I think we still need this; otherwise, we'll keep trying to allocate even when we get a `-1` from the allocation function, resulting in a spammed error. "", 'comment_created': datetime.datetime(2022, 8, 23, 17, 35, 35, tzinfo=datetime.timezone.utc), 'commenter': 'techiepriyansh', 'type': 'User'}, {'comment_id': 953146380, 'comment_body': ""Right, in that case we need to change this a little bit ``global_shader_uniforms_unit_variable_update()`` should error if a value less than one is passed into it instead of silently returning. \r\n\r\nAlso when setting ``instance_data.instance_uniforms_ofs`` we need to make sure we aren't passing a negative index\r\n\r\nI'll leave a few more comments"", 'comment_created': datetime.datetime(2022, 8, 23, 22, 4, 26, tzinfo=datetime.timezone.utc), 'commenter': 'clayjohn', 'type': 'User'}, {'comment_id': 953147078, 'comment_body': 'Should error instead of silently returning, perhaps with:\r\n```\r\nERR_FAIL_COND(p_pos < 0);\r\n```', 'comment_created': datetime.datetime(2022, 8, 23, 22, 5, 33, tzinfo=datetime.timezone.utc), 'commenter': 'clayjohn', 'type': 'User'}, {'comment_id': 953147509, 'comment_body': 'Should check if ``inst->data->lightmap_size_global_uniform_pos`` is valid\r\n```suggestion\r\n\t\tif (unlikely(get_debug_draw_mode() == RS::VIEWPORT_DEBUG_DRAW_UV2_TEXEL_DENSITY && inst->data->use_baked_light && inst->data->lightmap_size_global_uniform_pos >=0)) {\r\n```', 'comment_created': datetime.datetime(2022, 8, 23, 22, 6, 19, tzinfo=datetime.timezone.utc), 'commenter': 'clayjohn', 'type': 'User'}, {'comment_id': 953147893, 'comment_body': ""This shouldn't be called if ``inst->data->lightmap_size_global_uniform_pos`` is invalid\r\n```suggestion\r\n\t\t\t\t\tif (inst->data->lightmap_size_global_uniform_pos >= 0) {\r\n\t\t\t\t\t\tRSG::material_storage->global_shader_uniforms_unit_variable_update(inst->data->lightmap_size_global_uniform_pos, lightmap_size);\r\n\t\t\t\t\t}\r\n```"", 'comment_created': datetime.datetime(2022, 8, 23, 22, 7, 3, tzinfo=datetime.timezone.utc), 'commenter': 'clayjohn', 'type': 'User'}, {'comment_id': 956775814, 'comment_body': 'Our style guide on code comments is to start with a capital and end with a period', 'comment_created': datetime.datetime(2022, 8, 28, 20, 9, 54, tzinfo=datetime.timezone.utc), 'commenter': 'clayjohn', 'type': 'User'}, {'comment_id': 956776163, 'comment_body': 'Same comment as for GLES3', 'comment_created': datetime.datetime(2022, 8, 28, 20, 12, 38, tzinfo=datetime.timezone.utc), 'commenter': 'clayjohn', 'type': 'User'}, {'comment_id': 956787479, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2022, 8, 28, 22, 5, 24, tzinfo=datetime.timezone.utc), 'commenter': 'techiepriyansh', 'type': 'User'}]","[{'commit_sha': 'c5c8a526a881d11ac9c38599e16d11d6f3a2402d', 'committer_username': 'techiepriyansh', 'committer_name': 'Priyansh Rathi', 'committer_email': None, 'commit_date': datetime.datetime(2017, 3, 5, 11, 53, 28, tzinfo=datetime.timezone.utc)}]",Priyansh Rathi,26199781,,User,,45,,41,43
963287781,Add support for saving lightmap as multiple images,"<!--
Pull requests should always be made for the `master` branch first, as that's
where development happens and the source of all future stable release branches.

Relevant fixes are cherry-picked for stable branches as needed.

Do not create a pull request for stable branches unless the change is already
available in the `master` branch and it cannot be easily cherry-picked.
Alternatively, if the change is only relevant for that branch (e.g. rendering
fixes for the 3.2 branch).
-->
`master` port of #58102.

Needs to be tested on a really large scene for the ""roll-over to multiple textures"" limit to be reached. I have only tested by hardcoding `slices_per_texture = 1`, but in theory, should work just fine for the general case too.

~~Also, currently there is lightmap texture data duplication as both the individual textures and the combined texture co-exist. Need to figure out a way around it. (This only happens when the texture data cannot be contained in a single `Image`; so no overhead until the roll-over limit is reached).~~ âœ…
",True,61861,https://api.github.com/repos/godotengine/godot/pulls/61861,https://github.com/godotengine/godot/pull/61861,closed,109,50,2,1,5,5,3,0,"[{'name': 'enhancement'}, {'name': 'topic:rendering'}, {'name': 'topic:3d'}]",2022-06-09 20:04:06+00:00,2022-06-14 14:11:30+00:00,410844.0,"4 days, 18:07:24","[{'comment_id': 895596256, 'comment_body': ""```suggestion\r\n\tERR_FAIL_COND(p_data.is_empty());\r\n```\r\n\r\nMinor nitpick. I think there's another instance of this in the same file, it could be changed too."", 'comment_created': datetime.datetime(2022, 6, 13, 11, 7, 11, tzinfo=datetime.timezone.utc), 'commenter': 'JFonS', 'type': 'User'}, {'comment_id': 896681103, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2022, 6, 14, 11, 5, 9, tzinfo=datetime.timezone.utc), 'commenter': 'techiepriyansh', 'type': 'User'}, {'comment_id': 896712429, 'comment_body': 'Changed the other one too (#62026).', 'comment_created': datetime.datetime(2022, 6, 14, 11, 43, 10, tzinfo=datetime.timezone.utc), 'commenter': 'techiepriyansh', 'type': 'User'}, {'comment_id': 896715358, 'comment_body': ""I think the idea was to change it in this PR too in passing, it's not the kind of code style change that warrants its own PR (or then it should be a PR that uses search and replace to do the same fix in the whole codebase)."", 'comment_created': datetime.datetime(2022, 6, 14, 11, 46, 37, tzinfo=datetime.timezone.utc), 'commenter': 'akien-mga', 'type': 'User'}, {'comment_id': 896718600, 'comment_body': 'OK understood. I will close that PR and make the change in this PR itself. ', 'comment_created': datetime.datetime(2022, 6, 14, 11, 50, 17, tzinfo=datetime.timezone.utc), 'commenter': 'techiepriyansh', 'type': 'User'}]","[{'commit_sha': 'd49c1cfc3e0abf8cecad5fc1957eda91a8cdc746', 'committer_username': 'techiepriyansh', 'committer_name': 'Priyansh Rathi', 'committer_email': None, 'commit_date': datetime.datetime(2017, 3, 5, 11, 53, 28, tzinfo=datetime.timezone.utc)}]",Priyansh Rathi,26199781,,User,,45,,41,43
967535921,Add support for soft shadows to the GPU lightmapper,"`master` port of #50184.
Closes #52199.

## Results

<details>
  <summary> Directional Light </summary>
 
  * w/o soft shadows 
   ![before_soft_shadows](https://user-images.githubusercontent.com/26199781/173709425-2be877fd-4c4a-415e-8df4-06180378f689.png) 
  * w/ soft shadows (`size = 10deg`) 
    ![after_soft_shadows_10deg](https://user-images.githubusercontent.com/26199781/173709519-25dbf0ed-1a1a-4779-aada-519f04b69ae4.png)

</details>

<details>
  <summary> Spot Light </summary>

  * w/o soft shadows 
    ![without_soft_shadows_spotlight](https://user-images.githubusercontent.com/26199781/173710286-b4621394-9515-4e33-b428-8f466dc3de83.png)

  * w/ soft shadows (`size = 1m`) 
   ![after_soft_shadows_spotlight_1m](https://user-images.githubusercontent.com/26199781/173710320-a50b833d-4664-4f88-a6a7-04b0259fa9cf.png)

</details>

<details>
  <summary> Omni Light </summary>

  * w/o soft shadows 
    ![before_soft_shadows_omni](https://user-images.githubusercontent.com/26199781/173710446-6207ce15-384f-4fb1-bbe1-5ead187bbb19.png)

  * w/ soft shadows (`size = 1m`) 
    ![after_soft_shadows_omni](https://user-images.githubusercontent.com/26199781/173710521-65dc327a-46c7-4dc9-ac48-da2970366c18.png)

</details>
",True,62054,https://api.github.com/repos/godotengine/godot/pulls/62054,https://github.com/godotengine/godot/pull/62054,closed,104,51,6,1,7,5,3,0,"[{'name': 'enhancement'}, {'name': 'topic:rendering'}, {'name': 'topic:3d'}]",2022-06-15 00:23:21+00:00,2022-06-24 20:29:40+00:00,849979.0,"9 days, 20:06:19","[{'comment_id': 897523406, 'comment_body': 'Should the disk be uniformly sampled? If so, then ``r`` should be ``sqrt(randomize(noise))``', 'comment_created': datetime.datetime(2022, 6, 15, 4, 30, 49, tzinfo=datetime.timezone.utc), 'commenter': 'clayjohn', 'type': 'User'}, {'comment_id': 897957715, 'comment_body': 'Probably yes, @JFonS what do you think?', 'comment_created': datetime.datetime(2022, 6, 15, 13, 7, 57, tzinfo=datetime.timezone.utc), 'commenter': 'techiepriyansh', 'type': 'User'}, {'comment_id': 898862506, 'comment_body': 'So yes, `r` should be `sqrt(...)`. ([reference](https://developer.nvidia.com/gpugems/gpugems2/part-ii-shading-lighting-and-shadows/chapter-17-efficient-soft-edged-shadows-using#:~:text=we%20use%20the%20following%20formulas%3A))', 'comment_created': datetime.datetime(2022, 6, 16, 9, 0, 17, tzinfo=datetime.timezone.utc), 'commenter': 'techiepriyansh', 'type': 'User'}, {'comment_id': 898953866, 'comment_body': ""@techiepriyansh Not necessarily. The technique in the article is an approximation for real-time soft shadows (using shadow-maps) but in our case we are sampling a spherical light.\r\n\r\nThe truth is, we are also using an approximation of the [proper spherical light sampling](https://schuttejoe.github.io/post/arealightsampling/), but it works just fine inmost cases. There might be some differences in very large lights, but nothing really noticeable.\r\n\r\nTo me intuitively, it makes sense to have more samples toward the center of the disk, as its the projection of a sphere but I'd have to do the math and double-check. In any case, I would test the two proposed distributions and see if it makes a difference. I'm pretty sure the difference will be barely noticeable for reasonable light sizes."", 'comment_created': datetime.datetime(2022, 6, 16, 10, 48, 56, tzinfo=datetime.timezone.utc), 'commenter': 'JFonS', 'type': 'User'}, {'comment_id': 906339298, 'comment_body': 'For future reference, we are going with the non-sqrt version. This will sample the disk more heavily towards the centre.', 'comment_created': datetime.datetime(2022, 6, 24, 19, 19, 38, tzinfo=datetime.timezone.utc), 'commenter': 'clayjohn', 'type': 'User'}]","[{'commit_sha': 'e995764e50df96e22abdcaadc7d2f413d5c1cf6e', 'committer_username': 'techiepriyansh', 'committer_name': 'Priyansh Rathi', 'committer_email': None, 'commit_date': datetime.datetime(2017, 3, 5, 11, 53, 28, tzinfo=datetime.timezone.utc)}]",Priyansh Rathi,26199781,,User,,45,,41,43
721594506,Add a debug draw density property to BakedLightmap,"When enabled, `debug_draw_density` will draw a checkerboard on the baked lightmap. This is done by modifying the lightmap data itself.

This can be used to diagnose issues related to lightmap texel density and lightmap seams.

Ideally, this would be done directly in the shader to avoid having to bake lightmaps again. I don't know how to implement that though.
**Edit:** This is likely done by passing the lightmap texture size uniform is debug density is enabled, even if bicubic sampling is disabled in the project settings. However, the issue is that density debugging is configured on a per-node basis rather than a global project setting (like bicubic sampling).

This partially addresses https://github.com/godotengine/godot-proposals/issues/3213.

## Preview

| `debug_draw_density` disabled | `debug_draw_density` enabled |
|-|-|
| ![Disabled](https://user-images.githubusercontent.com/180032/131184706-7145396a-777b-42af-ab7a-53e964339379.png) | ![Enabled](https://user-images.githubusercontent.com/180032/131184701-e5df8cb9-faec-4e91-bf13-0cfabc4da9fd.png) |",False,52166,https://api.github.com/repos/godotengine/godot/pulls/52166,https://github.com/godotengine/godot/pull/52166,closed,34,0,3,1,4,0,4,0,"[{'name': 'enhancement'}, {'name': 'archived'}, {'name': 'topic:rendering'}, {'name': 'topic:3d'}]",2021-08-27 20:24:58+00:00,2022-07-13 21:35:10+00:00,27652212.0,"320 days, 1:10:12",[],"[{'commit_sha': '61dccff5b75ef387daa24cda7b8cf7c9ddd1a232', 'committer_username': 'Calinou', 'committer_name': 'Hugo Locurcio', 'committer_email': 'hugo.locurcio@hugo.pro', 'commit_date': datetime.datetime(2010, 1, 11, 14, 9, 38, tzinfo=datetime.timezone.utc)}]",Hugo Locurcio,180032,hugo.locurcio@hugo.pro,User,,668,,156,1288
995836840,Add a debug draw mode for displaying UV2 (lightmap) texel density ,"Adds a debug draw mode for displaying UV2 texel density. It displays the UV2 texel density of all `MeshInstance3Ds` which have their `GI_MODE` set to `GI_MODE_STATIC`.

Partially addresses godotengine/godot-proposals#3213.

### Todo

- [x] Port to `mobile` backend.
- [x] Figure out a better way to set `DEBUG_UV2_TEXEL_DENSITY` inside the scene shader instead of using a render mode define.
- [x] Use the [fancy checkerboarding shader](https://www.shadertoy.com/view/XlcSz2).



",False,62987,https://api.github.com/repos/godotengine/godot/pulls/62987,https://github.com/godotengine/godot/pull/62987,open,421,34,38,1,14,26,4,0,"[{'name': 'enhancement'}, {'name': 'topic:rendering'}, {'name': 'salvageable'}, {'name': 'topic:3d'}]",2022-07-13 18:55:08+00:00,,0.0,,"[{'comment_id': 929571155, 'comment_body': ""```suggestion\r\n\t\t\t\t\tif (inst->shader_parameters_offset == -1 && !inst->data->instance_allocated_shader_parameters && ) {\r\n```\r\n\r\nIn my test project I get a spammed error because ``global_variables_instance_allocate()`` return ``-1`` if the instance has already been allocated. Adding the check for ``instance_allocated_shader_parameters`` ensures that this doesn't happen."", 'comment_created': datetime.datetime(2022, 7, 26, 6, 28, 33, tzinfo=datetime.timezone.utc), 'commenter': 'clayjohn', 'type': 'User'}, {'comment_id': 930279749, 'comment_body': ""I've added appropriate checks to mitigate the spammed error."", 'comment_created': datetime.datetime(2022, 7, 26, 18, 16, 42, tzinfo=datetime.timezone.utc), 'commenter': 'techiepriyansh', 'type': 'User'}, {'comment_id': 930281496, 'comment_body': 'Did you test just adding ``&& !inst->data->instance_allocated_shader_parameters``? From my test it was able to remove the spammed error and it is much simpler code', 'comment_created': datetime.datetime(2022, 7, 26, 18, 18, 50, tzinfo=datetime.timezone.utc), 'commenter': 'clayjohn', 'type': 'User'}, {'comment_id': 930282540, 'comment_body': 'We should mention here how wide (in texels) the squares are. If I read your code correctly then users can expect that each square is 10 texels by 10 texels', 'comment_created': datetime.datetime(2022, 7, 26, 18, 20, 4, tzinfo=datetime.timezone.utc), 'commenter': 'clayjohn', 'type': 'User'}, {'comment_id': 930282839, 'comment_body': 'Same comment as below', 'comment_created': datetime.datetime(2022, 7, 26, 18, 20, 24, tzinfo=datetime.timezone.utc), 'commenter': 'clayjohn', 'type': 'User'}, {'comment_id': 930283080, 'comment_body': 'This will need to be filled-in as well. ', 'comment_created': datetime.datetime(2022, 7, 26, 18, 20, 40, tzinfo=datetime.timezone.utc), 'commenter': 'clayjohn', 'type': 'User'}, {'comment_id': 945887373, 'comment_body': ""Part of the issue here is that that global shader uniforms hashmap takes any RID. I.e. it doesn't check if the RID is for a geometry instance. Here you are passing an RID for the mesh that the Geometry Instance uses. Accordingly, if to MeshInstances use the same mesh, the check fails for the second MeshInstance and the instance uniform does not get updated below. \r\n\r\nI think you will need to store a ``->self`` value in ``RenderGeometryInstanceBase`` so you can access the RID of the GeometryInstance itself"", 'comment_created': datetime.datetime(2022, 8, 15, 15, 42, 44, tzinfo=datetime.timezone.utc), 'commenter': 'clayjohn', 'type': 'User'}, {'comment_id': 945901026, 'comment_body': 'Yeah, I was thinking of the same solution.', 'comment_created': datetime.datetime(2022, 8, 15, 15, 58, 16, tzinfo=datetime.timezone.utc), 'commenter': 'techiepriyansh', 'type': 'User'}, {'comment_id': 952743097, 'comment_body': 'We should add some comments above this function. Essentially something like ""Unit variable allocate is an alternative way of allocating global shader uniforms. It returns a single variable that can be used and its position in the global shader uniform buffer. This is intended to be used for debug drawing purposes and should not be used for anything substantial.""', 'comment_created': datetime.datetime(2022, 8, 23, 15, 1, 1, tzinfo=datetime.timezone.utc), 'commenter': 'clayjohn', 'type': 'User'}, {'comment_id': 952761335, 'comment_body': 'This can default to -1 now and the comment can be removed', 'comment_created': datetime.datetime(2022, 8, 23, 15, 16, 16, tzinfo=datetime.timezone.utc), 'commenter': 'clayjohn', 'type': 'User'}, {'comment_id': 952764526, 'comment_body': 'Some suggestions to comply with our [shader style guide](https://docs.godotengine.org/en/latest/tutorials/shaders/shaders_style_guide.html)\r\n```suggestion\r\n\tvec2 s = 2.0 * (abs(fract((p - 0.5 * w) / 2.0) - 0.5) - abs(fract((p + 0.5 * w) / 2.0) - 0.5)) / w;\r\n\tfloat t = 0.5 - 0.5 * s.x * s.y;\r\n```', 'comment_created': datetime.datetime(2022, 8, 23, 15, 19, 1, tzinfo=datetime.timezone.utc), 'commenter': 'clayjohn', 'type': 'User'}, {'comment_id': 952765093, 'comment_body': 'Same changes as above', 'comment_created': datetime.datetime(2022, 8, 23, 15, 19, 28, tzinfo=datetime.timezone.utc), 'commenter': 'clayjohn', 'type': 'User'}, {'comment_id': 952765482, 'comment_body': 'Same comment as for GLES3', 'comment_created': datetime.datetime(2022, 8, 23, 15, 19, 48, tzinfo=datetime.timezone.utc), 'commenter': 'clayjohn', 'type': 'User'}, {'comment_id': 952935291, 'comment_body': ""I think we still need this; otherwise, we'll keep trying to allocate even when we get a `-1` from the allocation function, resulting in a spammed error. "", 'comment_created': datetime.datetime(2022, 8, 23, 17, 35, 35, tzinfo=datetime.timezone.utc), 'commenter': 'techiepriyansh', 'type': 'User'}, {'comment_id': 953146380, 'comment_body': ""Right, in that case we need to change this a little bit ``global_shader_uniforms_unit_variable_update()`` should error if a value less than one is passed into it instead of silently returning. \r\n\r\nAlso when setting ``instance_data.instance_uniforms_ofs`` we need to make sure we aren't passing a negative index\r\n\r\nI'll leave a few more comments"", 'comment_created': datetime.datetime(2022, 8, 23, 22, 4, 26, tzinfo=datetime.timezone.utc), 'commenter': 'clayjohn', 'type': 'User'}, {'comment_id': 953147078, 'comment_body': 'Should error instead of silently returning, perhaps with:\r\n```\r\nERR_FAIL_COND(p_pos < 0);\r\n```', 'comment_created': datetime.datetime(2022, 8, 23, 22, 5, 33, tzinfo=datetime.timezone.utc), 'commenter': 'clayjohn', 'type': 'User'}, {'comment_id': 953147509, 'comment_body': 'Should check if ``inst->data->lightmap_size_global_uniform_pos`` is valid\r\n```suggestion\r\n\t\tif (unlikely(get_debug_draw_mode() == RS::VIEWPORT_DEBUG_DRAW_UV2_TEXEL_DENSITY && inst->data->use_baked_light && inst->data->lightmap_size_global_uniform_pos >=0)) {\r\n```', 'comment_created': datetime.datetime(2022, 8, 23, 22, 6, 19, tzinfo=datetime.timezone.utc), 'commenter': 'clayjohn', 'type': 'User'}, {'comment_id': 953147893, 'comment_body': ""This shouldn't be called if ``inst->data->lightmap_size_global_uniform_pos`` is invalid\r\n```suggestion\r\n\t\t\t\t\tif (inst->data->lightmap_size_global_uniform_pos >= 0) {\r\n\t\t\t\t\t\tRSG::material_storage->global_shader_uniforms_unit_variable_update(inst->data->lightmap_size_global_uniform_pos, lightmap_size);\r\n\t\t\t\t\t}\r\n```"", 'comment_created': datetime.datetime(2022, 8, 23, 22, 7, 3, tzinfo=datetime.timezone.utc), 'commenter': 'clayjohn', 'type': 'User'}, {'comment_id': 956775814, 'comment_body': 'Our style guide on code comments is to start with a capital and end with a period', 'comment_created': datetime.datetime(2022, 8, 28, 20, 9, 54, tzinfo=datetime.timezone.utc), 'commenter': 'clayjohn', 'type': 'User'}, {'comment_id': 956776163, 'comment_body': 'Same comment as for GLES3', 'comment_created': datetime.datetime(2022, 8, 28, 20, 12, 38, tzinfo=datetime.timezone.utc), 'commenter': 'clayjohn', 'type': 'User'}, {'comment_id': 956787479, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2022, 8, 28, 22, 5, 24, tzinfo=datetime.timezone.utc), 'commenter': 'techiepriyansh', 'type': 'User'}]","[{'commit_sha': 'c5c8a526a881d11ac9c38599e16d11d6f3a2402d', 'committer_username': 'techiepriyansh', 'committer_name': 'Priyansh Rathi', 'committer_email': None, 'commit_date': datetime.datetime(2017, 3, 5, 11, 53, 28, tzinfo=datetime.timezone.utc)}]",Priyansh Rathi,26199781,,User,,45,,41,43

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
15634981,godot,godotengine/godot,C++,19909,88029,1518,2957,66362,13328,14,2843,"[{'id': 995836840, 'number': 62987, 'closed': None, 'created': datetime.datetime(2022, 7, 13, 18, 55, 8, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 421, 'deletions': 34, 'state': 'open'}, {'id': 967535921, 'number': 62054, 'closed': datetime.datetime(2022, 6, 24, 20, 29, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 15, 0, 23, 21, tzinfo=datetime.timezone.utc), 'time_taken': 849979.0, 'time_delta': '9 days, 20:06:19', 'additions': 104, 'deletions': 51, 'state': 'closed'}, {'id': 966817736, 'number': 62026, 'closed': datetime.datetime(2022, 6, 14, 11, 50, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 14, 11, 42, 1, tzinfo=datetime.timezone.utc), 'time_taken': 514.0, 'time_delta': '0:08:34', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 963287781, 'number': 61861, 'closed': datetime.datetime(2022, 6, 14, 14, 11, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 9, 20, 4, 6, tzinfo=datetime.timezone.utc), 'time_taken': 410844.0, 'time_delta': '4 days, 18:07:24', 'additions': 109, 'deletions': 50, 'state': 'closed'}, {'id': 891000839, 'number': 59576, 'closed': datetime.datetime(2022, 7, 2, 22, 22, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 27, 11, 1, 32, tzinfo=datetime.timezone.utc), 'time_taken': 8421643.0, 'time_delta': '97 days, 11:20:43', 'additions': 8, 'deletions': 1, 'state': 'closed'}, {'id': 885085621, 'number': 59393, 'closed': datetime.datetime(2022, 4, 27, 9, 51, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 21, 17, 3, 38, tzinfo=datetime.timezone.utc), 'time_taken': 3170892.0, 'time_delta': '36 days, 16:48:12', 'additions': 67, 'deletions': 28, 'state': 'closed'}, {'id': 881797180, 'number': 59211, 'closed': datetime.datetime(2022, 3, 16, 21, 36, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 16, 20, 55, 37, tzinfo=datetime.timezone.utc), 'time_taken': 2426.0, 'time_delta': '0:40:26', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 877125229, 'number': 59012, 'closed': None, 'created': datetime.datetime(2022, 3, 11, 6, 35, 19, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 14, 'deletions': 0, 'state': 'open'}, {'id': 872217837, 'number': 58779, 'closed': datetime.datetime(2022, 3, 7, 15, 46, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 5, 9, 17, 15, tzinfo=datetime.timezone.utc), 'time_taken': 196159.0, 'time_delta': '2 days, 6:29:19', 'additions': 6, 'deletions': 0, 'state': 'closed'}, {'id': 871904172, 'number': 58761, 'closed': datetime.datetime(2022, 3, 7, 9, 40, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 4, 18, 23, 2, tzinfo=datetime.timezone.utc), 'time_taken': 227837.0, 'time_delta': '2 days, 15:17:17', 'additions': 8, 'deletions': 1, 'state': 'closed'}, {'id': 853543862, 'number': 58153, 'closed': None, 'created': datetime.datetime(2022, 2, 15, 17, 50, 21, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 2, 'deletions': 2, 'state': 'open'}, {'id': 825860119, 'number': 56919, 'closed': None, 'created': datetime.datetime(2022, 1, 18, 20, 40, 55, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 37, 'deletions': 8, 'state': 'open'}]"
