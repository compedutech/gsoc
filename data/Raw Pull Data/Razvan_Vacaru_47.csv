pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
985110139,Fixed ExplicitResultTypes for implicit members when  memberKind and visibility configs are present,"Fixes #1216

Tests ran after changes:
- `unit2_13Target2_13/testOnly`: OK
- `unit2_12Target2_12/testOnly`: OK
- `unit2_11Target2_11/testOnly`
  - this one fails with:
  ```
	[info] ScalaTest
	[info] Run completed in 1 minute, 5 seconds.
	[info] Total number of tests run: 309
	[info] Suites: completed 36, aborted 0
	[info] Tests: succeeded 297, failed 12, canceled 0, ignored 1, pending 0
	[info] *** 12 TESTS FAILED ***
	[error] Failed: Total 321, Failed 12, Errors 0, Passed 309, Ignored 1
	[error] Failed tests:
	[error]         scalafix.tests.core.PrettyTypeSuite
	[error]         scalafix.tests.v1.SymbolInformationSuite
	[error] (unit2_11Target2_11 / Test / testOnly) sbt.TestsFailedException: Tests unsuccessful
	[error] Total time: 94 s (01:34), completed 1 Jul 2022, 18:12:26
  ``` ",True,1627,https://api.github.com/repos/scalacenter/scalafix/pulls/1627,https://github.com/scalacenter/scalafix/pull/1627,closed,58,5,4,4,2,13,0,0,[],2022-07-01 15:52:00+00:00,2022-07-12 11:06:21+00:00,933261.0,"10 days, 19:14:21","[{'comment_id': 912078228, 'comment_body': 'these two functions could be extracted out instead of being repeated in both the blocks which are in OR', 'comment_created': datetime.datetime(2022, 7, 1, 15, 53, 32, tzinfo=datetime.timezone.utc), 'commenter': 'rvacaru', 'type': 'User'}, {'comment_id': 912079710, 'comment_body': 'here the rule should not run, as per the config provided in the input file:\r\n```\r\n/*\r\nrules = ExplicitResultTypes\r\nExplicitResultTypes.memberKind = [Val, Def, Var]\r\nExplicitResultTypes.memberVisibility = [Public, Protected]\r\n */\r\n```\r\n', 'comment_created': datetime.datetime(2022, 7, 1, 15, 55, 53, tzinfo=datetime.timezone.utc), 'commenter': 'rvacaru', 'type': 'User'}, {'comment_id': 912756878, 'comment_body': 'while you are at it, maybe you can name the remaining these 2 groups? The nesting makes it very hard to read', 'comment_created': datetime.datetime(2022, 7, 4, 8, 30, 33, tzinfo=datetime.timezone.utc), 'commenter': 'bjaglin', 'type': 'User'}, {'comment_id': 913900065, 'comment_body': ""if you have a better name for this block let me know, I couldn't find a better one not based on the first `isImplicitAndNotFinalLiteralVal` block"", 'comment_created': datetime.datetime(2022, 7, 5, 14, 59, 32, tzinfo=datetime.timezone.utc), 'commenter': 'rvacaru', 'type': 'User'}, {'comment_id': 913900559, 'comment_body': 'done', 'comment_created': datetime.datetime(2022, 7, 5, 15, 0, 1, tzinfo=datetime.timezone.utc), 'commenter': 'rvacaru', 'type': 'User'}, {'comment_id': 914542539, 'comment_body': ""Not a review comment about this PR, but shouldn't this check be extracted and chained with AND just like `matchesMemberKindAndVisibility` for both implicit and non-implicit decalaration, so that `config.skipSimpleDefinitions` is honored everywhere? Maybe worth tracking this in a separate ticket for visbility if confirmed."", 'comment_created': datetime.datetime(2022, 7, 6, 8, 7, 19, tzinfo=datetime.timezone.utc), 'commenter': 'bjaglin', 'type': 'User'}, {'comment_id': 914553649, 'comment_body': ""I don't get the `OrFinalLiteralVal` part here - isn't the return value of this function independant of whether it is a final val literal or not?"", 'comment_created': datetime.datetime(2022, 7, 6, 8, 18, 30, tzinfo=datetime.timezone.utc), 'commenter': 'bjaglin', 'type': 'User'}, {'comment_id': 914554671, 'comment_body': 'about your question about naming above, what about\r\n```suggestion\r\n      qualifyingImplicit || qualifyingNonImplicit\r\n```', 'comment_created': datetime.datetime(2022, 7, 6, 8, 19, 33, tzinfo=datetime.timezone.utc), 'commenter': 'bjaglin', 'type': 'User'}, {'comment_id': 914558486, 'comment_body': ""Not a review comment about this PR, but that `isFinalLiteralVal` is a bit mysterious to me - it was added in https://github.com/scalacenter/scalafix/commit/162db399bbf5584632e617bf7c3135a600dc06c8, but I can't easily see what scenario it covers."", 'comment_created': datetime.datetime(2022, 7, 6, 8, 23, 13, tzinfo=datetime.timezone.utc), 'commenter': 'bjaglin', 'type': 'User'}, {'comment_id': 914638574, 'comment_body': ""the name doesn't reflect what the method does (or the content of the method) but reflects which branch of the logical expression of isRuleCandidate is executed, in relation with the first block in OR. This makes the logical expression more readable but the method itself less readable..it's a trade off and I think it's better if the logical expression is more readable, that's why we extracted the method in the first place"", 'comment_created': datetime.datetime(2022, 7, 6, 9, 43, 22, tzinfo=datetime.timezone.utc), 'commenter': 'rvacaru', 'type': 'User'}, {'comment_id': 914642269, 'comment_body': 'will create a ticket for this', 'comment_created': datetime.datetime(2022, 7, 6, 9, 47, 6, tzinfo=datetime.timezone.utc), 'commenter': 'rvacaru', 'type': 'User'}, {'comment_id': 914643870, 'comment_body': 'considering that we want to move `!matchesSimpleDefinition` to the most outer block `matchesMemberKindAndVisibility` then this naming makes more sense', 'comment_created': datetime.datetime(2022, 7, 6, 9, 48, 44, tzinfo=datetime.timezone.utc), 'commenter': 'rvacaru', 'type': 'User'}, {'comment_id': 914745745, 'comment_body': 'Here is the ticket: https://github.com/scalacenter/scalafix/issues/1628', 'comment_created': datetime.datetime(2022, 7, 6, 11, 50, 2, tzinfo=datetime.timezone.utc), 'commenter': 'rvacaru', 'type': 'User'}]","[{'commit_sha': '5daccea6df5fe9d1cd1d4040252be4cbdfff72b3', 'committer_username': 'rvacaru', 'committer_name': 'Razvan Vacaru', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 23, 7, 40, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1df47779ea95c000f7d4fee2412c8534270a4742', 'committer_username': 'rvacaru', 'committer_name': 'Razvan Vacaru', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 23, 7, 40, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '63502d9859a57fa5763aa5a6ffc15d9c272e909e', 'committer_username': 'rvacaru', 'committer_name': 'Razvan Vacaru', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 23, 7, 40, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd57526dfa324aee117a8d1c9dccc99378268545', 'committer_username': 'rvacaru', 'committer_name': 'Razvan Vacaru', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 23, 7, 40, 26, tzinfo=datetime.timezone.utc)}]",Razvan Vacaru,12080600,,User,,16,,4,6
988846477,scalafix-core_3 (GSoC 2022),"This PR is the first step towards adapting ExplicitResultTypes for scala3 #1583 and part of the plan for scala3 support #1680. The idea is to cross compile all scalafix modules to scala3 and then introduce a new `ExplicitResultTypes` implementation for scala3.

<img width=""1045"" alt=""Screenshot 2022-07-22 at 12 03 53"" src=""https://user-images.githubusercontent.com/12080600/180417358-b2f2e158-df2d-4dd8-ae62-e45beced752a.png"">

In this first step we're cross compiling `scalafix-core` to scala3",True,1629,https://api.github.com/repos/scalacenter/scalafix/pulls/1629,https://github.com/scalacenter/scalafix/pull/1629,closed,98,26,28,25,2,32,0,0,[],2022-07-06 13:57:45+00:00,2022-07-22 17:43:57+00:00,1395972.0,"16 days, 3:46:12","[{'comment_id': 916854130, 'comment_body': 'if I provide `[[T], IndexedSeq[T]]` it fails compiling saying there are too many type args and it only expects one [A] type arg.. would you know how to fix this?', 'comment_created': datetime.datetime(2022, 7, 8, 14, 8, 21, tzinfo=datetime.timezone.utc), 'commenter': 'rvacaru', 'type': 'User'}, {'comment_id': 916858034, 'comment_body': 'The collections library is shared across Scala 2.13/3, so this code should be the same as in the 2.13 sources.\r\nhttps://github.com/scalacenter/scalafix/blob/454511e6ced4b797dd04462a40f6a06920ab4c8d/scalafix-core/src/main/scala-2.13/scalafix/util/Compat.scala#L1-L7', 'comment_created': datetime.datetime(2022, 7, 8, 14, 12, 32, tzinfo=datetime.timezone.utc), 'commenter': 'armanbilge', 'type': 'User'}, {'comment_id': 916870670, 'comment_body': ""In TokenList lines 68 and 71 I'm left with the following errors: \r\n```\r\n[error] -- [E007] Type Mismatch Error: /Users/razvan.vacaru@TMNL.nl/srepo/scalafix/scalafix-core/src/main/scala/scalafix/util/TokenList.scala:71:29 \r\n[error] 71 |    trailing(token).takeWhile(_.is[Token.Space])\r\n[error]    |    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n[error]    |    Found:    scala.collection.View[meta.tokens.Token]\r\n[error]    |    Required: collection.SeqView[meta.tokens.Token]\r\n[error]    |\r\n[error]    |    The following import might make progress towards fixing the problem:\r\n[error]    |\r\n[error]    |      import sourcecode.Text.generate\r\n```\r\nThis is connected to the new [Compat](https://github.com/scalacenter/scalafix/pull/1629/files#diff-5506f04fbaa77fe6d8c38ac6e8cf61e6661b6ec0c50c9dcd9d62a2de64d0f415) class where we define the type members `View[T]` and `SeqView[T]`. Importing `import sourcecode.Text.generate` doesn't fix it.\r\n\r\nCasting the two returns fixes it, but I'm not sure if this is a correct workaround or if it will actually run."", 'comment_created': datetime.datetime(2022, 7, 8, 14, 25, 48, tzinfo=datetime.timezone.utc), 'commenter': 'rvacaru', 'type': 'User'}, {'comment_id': 916885124, 'comment_body': ""Thanks @armanbilge, now it's more clear "", 'comment_created': datetime.datetime(2022, 7, 8, 14, 41, 43, tzinfo=datetime.timezone.utc), 'commenter': 'rvacaru', 'type': 'User'}, {'comment_id': 921333196, 'comment_body': 'this is repeated in many places, can we move it to a settings block covering all current usages?', 'comment_created': datetime.datetime(2022, 7, 14, 16, 13, 19, tzinfo=datetime.timezone.utc), 'commenter': 'bjaglin', 'type': 'User'}, {'comment_id': 921333703, 'comment_body': 'extract this common one to another block', 'comment_created': datetime.datetime(2022, 7, 14, 16, 13, 55, tzinfo=datetime.timezone.utc), 'commenter': 'bjaglin', 'type': 'User'}, {'comment_id': 921335185, 'comment_body': ""let's remove this for now, focusing on getting a green build"", 'comment_created': datetime.datetime(2022, 7, 14, 16, 15, 28, tzinfo=datetime.timezone.utc), 'commenter': 'bjaglin', 'type': 'User'}, {'comment_id': 921335529, 'comment_body': '```suggestion\r\n  // https://github.com/scalameta/scalameta/issues/2485\r\n  val scalameta = (""org.scalameta"" %% ""scalameta"" % scalametaV).cross(CrossVersion.for3Use2_13)\r\n```', 'comment_created': datetime.datetime(2022, 7, 14, 16, 15, 53, tzinfo=datetime.timezone.utc), 'commenter': 'bjaglin', 'type': 'User'}, {'comment_id': 921338057, 'comment_body': ""It looks like https://github.com/scalacenter/scalafix/pull/1562 was only partially reverted - why? Thi seems to be used in the scala-2 version of `ConfigRulePatches` but should not longer be the case (so you won't need a separate scala-3 version).\r\n\r\nFor visibility, let's spin off the revert of https://github.com/scalacenter/scalafix/pull/1562 in a separate PR with the rationale (major clients have been released and scala-steward is back so the risk of using an old scalafix-cli with a rule compiled against a recent scalafix-core is limited).\r\n"", 'comment_created': datetime.datetime(2022, 7, 14, 16, 18, 43, tzinfo=datetime.timezone.utc), 'commenter': 'bjaglin', 'type': 'User'}, {'comment_id': 921342475, 'comment_body': 'AFAIK, all these are built-in in sbt, why did you add them here?', 'comment_created': datetime.datetime(2022, 7, 14, 16, 23, 24, tzinfo=datetime.timezone.utc), 'commenter': 'bjaglin', 'type': 'User'}, {'comment_id': 921343722, 'comment_body': 'I still see files under these directories, so the removal of this makes them dead code (and probably compilation errors). This avoid duplication between 2.12/2.13 source directories, so why not keep it?', 'comment_created': datetime.datetime(2022, 7, 14, 16, 24, 46, tzinfo=datetime.timezone.utc), 'commenter': 'bjaglin', 'type': 'User'}, {'comment_id': 921346478, 'comment_body': 'These new files in `scala-3` are HUGE - so much duplicated code will be very costly to keep in sync. Instead try to keep the common code in `src/mains/scala` and extract the differences in a smaller file (`Compat.scala`).', 'comment_created': datetime.datetime(2022, 7, 14, 16, 27, 28, tzinfo=datetime.timezone.utc), 'commenter': 'bjaglin', 'type': 'User'}, {'comment_id': 921347361, 'comment_body': '`if (isScala3.value)` is more readable if you just to branch based on the major version', 'comment_created': datetime.datetime(2022, 7, 14, 16, 28, 13, tzinfo=datetime.timezone.utc), 'commenter': 'bjaglin', 'type': 'User'}, {'comment_id': 921348898, 'comment_body': 'is meta the root package or is that a relative import?', 'comment_created': datetime.datetime(2022, 7, 14, 16, 30, 2, tzinfo=datetime.timezone.utc), 'commenter': 'bjaglin', 'type': 'User'}, {'comment_id': 921349029, 'comment_body': 'is meta the root package or is that a relative import?', 'comment_created': datetime.datetime(2022, 7, 14, 16, 30, 10, tzinfo=datetime.timezone.utc), 'commenter': 'bjaglin', 'type': 'User'}, {'comment_id': 921983624, 'comment_body': ""it's a relative import, will fix all of them "", 'comment_created': datetime.datetime(2022, 7, 15, 9, 22, 31, tzinfo=datetime.timezone.utc), 'commenter': 'rvacaru', 'type': 'User'}, {'comment_id': 921987650, 'comment_body': 'added', 'comment_created': datetime.datetime(2022, 7, 15, 9, 27, 22, tzinfo=datetime.timezone.utc), 'commenter': 'rvacaru', 'type': 'User'}, {'comment_id': 922005912, 'comment_body': ""Here's the separate PR for the revert, feel free to edit the description if needed: https://github.com/scalacenter/scalafix/pull/1632"", 'comment_created': datetime.datetime(2022, 7, 15, 9, 50, 24, tzinfo=datetime.timezone.utc), 'commenter': 'rvacaru', 'type': 'User'}, {'comment_id': 922059446, 'comment_body': 'merged, you can rebase', 'comment_created': datetime.datetime(2022, 7, 15, 10, 58, 51, tzinfo=datetime.timezone.utc), 'commenter': 'bjaglin', 'type': 'User'}, {'comment_id': 922307205, 'comment_body': 'factored out', 'comment_created': datetime.datetime(2022, 7, 15, 16, 3, 55, tzinfo=datetime.timezone.utc), 'commenter': 'rvacaru', 'type': 'User'}, {'comment_id': 922307645, 'comment_body': 'refactored similarly as Compat, defining different types for different scala versions', 'comment_created': datetime.datetime(2022, 7, 15, 16, 4, 28, tzinfo=datetime.timezone.utc), 'commenter': 'rvacaru', 'type': 'User'}, {'comment_id': 925691521, 'comment_body': ""the idea of Compat classes is that\r\n- they have different implementations depending on the version\r\n- they are referenced in code common to all versions\r\n\r\nIn that case, can't you try to keep `TokenList` generic? I see the original one was moved to `scala-2` without changes - instead it should remain in `scala` with minor modifications."", 'comment_created': datetime.datetime(2022, 7, 20, 14, 39, 18, tzinfo=datetime.timezone.utc), 'commenter': 'bjaglin', 'type': 'User'}, {'comment_id': 925693489, 'comment_body': 'why did you have to change that? The `.get` is suspicious, what about\r\n```suggestion\r\n        Term.Name(""???"")\r\n```', 'comment_created': datetime.datetime(2022, 7, 20, 14, 40, 52, tzinfo=datetime.timezone.utc), 'commenter': 'bjaglin', 'type': 'User'}, {'comment_id': 925696922, 'comment_body': '```suggestion\r\n      ""core3/compile"" ::\r\n```', 'comment_created': datetime.datetime(2022, 7, 20, 14, 43, 49, tzinfo=datetime.timezone.utc), 'commenter': 'bjaglin', 'type': 'User'}, {'comment_id': 925699038, 'comment_body': ""something went wrong with your rebase - this file and `MetaconfigCompatMacros` shouldn't be there, and `ConfigRulePatches` should remain in `scala`"", 'comment_created': datetime.datetime(2022, 7, 20, 14, 45, 39, tzinfo=datetime.timezone.utc), 'commenter': 'bjaglin', 'type': 'User'}, {'comment_id': 925704147, 'comment_body': 'there is a much cleaner way to do this:\r\n- since the decision must be taken at the project level and not at the build level, remove https://github.com/scalacenter/scalafix/blob/59ed8c053a79cadfe3ef2f83a10561df7170a192/build.sbt#L8\r\n- add the opposite of this (i.e. adding `-P:semanticdb:synthetics:on` if not scala3) in https://github.com/scalacenter/scalafix/blob/59ed8c053a79cadfe3ef2f83a10561df7170a192/project/ScalafixBuild.scala#L180\r\n- you can now get rid of all the customizations!', 'comment_created': datetime.datetime(2022, 7, 20, 14, 49, 44, tzinfo=datetime.timezone.utc), 'commenter': 'bjaglin', 'type': 'User'}, {'comment_id': 925705950, 'comment_body': '```suggestion\r\n    libraryDependencies += googleDiff\r\n```', 'comment_created': datetime.datetime(2022, 7, 20, 14, 51, 9, tzinfo=datetime.timezone.utc), 'commenter': 'bjaglin', 'type': 'User'}, {'comment_id': 926422969, 'comment_body': 'having the reverse logic of adding the option only when needed is more readable, i like it!', 'comment_created': datetime.datetime(2022, 7, 21, 8, 50, 2, tzinfo=datetime.timezone.utc), 'commenter': 'rvacaru', 'type': 'User'}, {'comment_id': 926434429, 'comment_body': 'my bad, looking at it again the problem was that explicitly defining types `View[T]` in the below methods prevented the `Compat` classes to do their work:\r\n\r\n```\r\n  def leadingSpaces(token: Token): View[T] =\r\n    leading(token).takeWhile(_.is[Token.Space])\r\n\r\n  def trailingSpaces(token: Token): View[T] =\r\n    trailing(token).takeWhile(_.is[Token.Space])\r\n\r\n```\r\n\r\nby removing the types it now compiles for the different scala versions', 'comment_created': datetime.datetime(2022, 7, 21, 9, 1, 14, tzinfo=datetime.timezone.utc), 'commenter': 'rvacaru', 'type': 'User'}, {'comment_id': 926832157, 'comment_body': 'unreferenced?', 'comment_created': datetime.datetime(2022, 7, 21, 15, 33, 34, tzinfo=datetime.timezone.utc), 'commenter': 'bjaglin', 'type': 'User'}, {'comment_id': 927326796, 'comment_body': ""I don't think so, also for the other `Compat` classes (at least in VS code) I don't get any references on the class level. Moreover if I remove the class I get a compilation error:\r\n```\r\nsbt:scalafix> core3/compile\r\n[info] compiling 125 Scala sources to /Users/razvan.vacaru@TMNL.nl/srepo/scalafix/scalafix-core/target/jvm-3/classes ...\r\n[error] -- [E008] Not Found Error: /Users/razvan.vacaru@TMNL.nl/srepo/scalafix/scalafix-core/src/main/scala/scalafix/util/TokenList.scala:7:21 \r\n[error] 7 |import scalafix.util.Compat._\r\n[error]   |       ^^^^^^^^^^^^^^^^^^^^\r\n[error]   |value Compat is not a member of scalafix.util, but could be made available as an extension method.\r\n[error]   |\r\n[error]   |The following import might make progress towards fixing the problem:\r\n[error]   |\r\n[error]   |  import sourcecode.Text.generate\r\n[error]   |\r\n[error] one error found\r\n[error] (core3 / Compile / compileIncremental) Compilation failed\r\n```"", 'comment_created': datetime.datetime(2022, 7, 22, 6, 21, 24, tzinfo=datetime.timezone.utc), 'commenter': 'rvacaru', 'type': 'User'}, {'comment_id': 927859612, 'comment_body': 'oh, sorry, I thought you had introduced a new Compat class, but this is just the scala-3 variant of an existing one :+1:', 'comment_created': datetime.datetime(2022, 7, 22, 17, 28, 10, tzinfo=datetime.timezone.utc), 'commenter': 'bjaglin', 'type': 'User'}]","[{'commit_sha': '24e0725eb0671ffcb547481557d96ae8a9b88d5c', 'committer_username': 'mlachkar', 'committer_name': 'Meriam Lachkar', 'committer_email': 'meriam.lachkar@gmail.com', 'commit_date': datetime.datetime(2014, 6, 9, 22, 36, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7688f4700adc38ff0b18c32af6360c6b32794426', 'committer_username': 'rvacaru', 'committer_name': 'Razvan Vacaru', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 23, 7, 40, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d76f4b9a9745080974ee69df1d4cfb0650a9ff0', 'committer_username': 'rvacaru', 'committer_name': 'Razvan Vacaru', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 23, 7, 40, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8307b84c0bc4d69857069c9bd51f93b51f2e019', 'committer_username': 'rvacaru', 'committer_name': 'Razvan Vacaru', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 23, 7, 40, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0b0aeb787b5e7d489dbf4f8ab13944f16bd7d51', 'committer_username': 'rvacaru', 'committer_name': 'Razvan Vacaru', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 23, 7, 40, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46f4526cef3daf6308f6727a71b2afb17b1d210b', 'committer_username': 'rvacaru', 'committer_name': 'Razvan Vacaru', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 23, 7, 40, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc7431592309dd2f1a22d1ea0e98123c48725141', 'committer_username': 'rvacaru', 'committer_name': 'Razvan Vacaru', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 23, 7, 40, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9e835414f2f2ef680df8020c57693e49723c22f', 'committer_username': 'rvacaru', 'committer_name': 'Razvan Vacaru', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 23, 7, 40, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f32fb43ea40cbc63af232b3260c882c0962939d', 'committer_username': 'rvacaru', 'committer_name': 'Razvan Vacaru', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 23, 7, 40, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '508ba535b0b0b8ede93927d83ef87d601d8b1a6b', 'committer_username': 'rvacaru', 'committer_name': 'Razvan Vacaru', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 23, 7, 40, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '58dc1f3d2f82921f31b593def385f7ac534b163a', 'committer_username': 'rvacaru', 'committer_name': 'Razvan Vacaru', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 23, 7, 40, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bcee1c1f58b8bb41b86a7adeb511447b5fb20ac5', 'committer_username': 'rvacaru', 'committer_name': 'Razvan Vacaru', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 23, 7, 40, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e3cb0658c60732906e60f27c35e077fe675a415', 'committer_username': 'rvacaru', 'committer_name': 'Razvan Vacaru', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 23, 7, 40, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c4bf8f763a9b2250494f0273e803b17e9dd1d62', 'committer_username': 'rvacaru', 'committer_name': 'Razvan Vacaru', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 23, 7, 40, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e9f5baf90ada0e5e1064993d32e24bd9c86d118', 'committer_username': 'rvacaru', 'committer_name': 'Razvan Vacaru', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 23, 7, 40, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3730b2eb37e15d772f97868d4f5955b6177a5b6', 'committer_username': 'rvacaru', 'committer_name': 'Razvan Vacaru', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 23, 7, 40, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '720bf53295bddf0d754418f9950fb156589e6ace', 'committer_username': 'rvacaru', 'committer_name': 'Razvan Vacaru', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 23, 7, 40, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '28371906dfe63defda27571cd30b8bac7ee8d527', 'committer_username': 'rvacaru', 'committer_name': 'Razvan Vacaru', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 23, 7, 40, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '296f8e437ef719f816030e6535c326ef8f42e841', 'committer_username': 'rvacaru', 'committer_name': 'Razvan Vacaru', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 23, 7, 40, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd6fc32f64c4ab85678b336947f9036a74ce54f1', 'committer_username': 'rvacaru', 'committer_name': 'Razvan Vacaru', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 23, 7, 40, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8568ef48e08ee54ed69cbd25f45fdbed29b19855', 'committer_username': 'rvacaru', 'committer_name': 'Razvan Vacaru', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 23, 7, 40, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e8c32a073061ea52230ff583013443604f5462b6', 'committer_username': 'rvacaru', 'committer_name': 'Razvan Vacaru', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 23, 7, 40, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '416baaead7bc1b0214567fc7080480085b40d397', 'committer_username': 'rvacaru', 'committer_name': 'Razvan Vacaru', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 23, 7, 40, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f40ee727d24c3f011d4b228748151b7d61f39978', 'committer_username': 'rvacaru', 'committer_name': 'Razvan Vacaru', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 23, 7, 40, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab2f83d1a42a49b7094d7d5fbc073504472f425e', 'committer_username': 'rvacaru', 'committer_name': 'Razvan Vacaru', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 23, 7, 40, 26, tzinfo=datetime.timezone.utc)}]",Razvan Vacaru,12080600,,User,,16,,4,6
898324682,scalafix 0.10.0,See https://github.com/scalacenter/scalafix/releases/tag/v0.10.0.,True,91,https://api.github.com/repos/joan38/mill-scalafix/pulls/91,https://github.com/joan38/mill-scalafix/pull/91,closed,1,1,1,1,10,0,0,0,[],2022-04-03 16:19:45+00:00,2022-04-08 02:18:20+00:00,381515.0,"4 days, 9:58:35",[],"[{'commit_sha': 'beec90f3ab926881c16c8e7ed85764bef644fa9c', 'committer_username': 'bjaglin', 'committer_name': 'Brice Jaglin', 'committer_email': None, 'commit_date': datetime.datetime(2010, 7, 30, 8, 38, 32, tzinfo=datetime.timezone.utc)}]",Brice Jaglin,349077,,User,,88,,2,23
1005652827,scalafix-rules_3 (GSoC 2022),"Follows https://github.com/scalacenter/scalafix/pull/1629
Part of the issues https://github.com/scalacenter/scalafix/issues/1583 and https://github.com/scalacenter/scalafix/issues/1680

Ready for review:
- moved rules `ExplicitResultTypes` (with all related dependencies) and `ProcedureSyntax` in `scala-2`
  - did not check if also other rules should be moved to `scala-2` 
- provided another `TPrintImplicits` in `scala-3`, exact copy as the one in `scala-2.12+`
- added `rules3/compile` in `ci-3` check",True,1643,https://api.github.com/repos/scalacenter/scalafix/pulls/1643,https://github.com/scalacenter/scalafix/pull/1643,closed,34,13,13,5,1,0,0,0,[],2022-07-22 10:45:08+00:00,2022-07-22 18:11:47+00:00,26799.0,7:26:39,[],"[{'commit_sha': '9dc940a74e90ab3e5cfa8abcb651d6791e852bd0', 'committer_username': 'rvacaru', 'committer_name': 'Razvan Vacaru', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 23, 7, 40, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b6c644cc6db43646afd4a37005348c2fa01cd662', 'committer_username': 'rvacaru', 'committer_name': 'Razvan Vacaru', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 23, 7, 40, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4eb492aafaf30bf24742793eb546d52b564d6112', 'committer_username': 'rvacaru', 'committer_name': 'Razvan Vacaru', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 23, 7, 40, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7424ba15c60337bdc1449b3de302852641b8852f', 'committer_username': 'rvacaru', 'committer_name': 'Razvan Vacaru', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 23, 7, 40, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c5e019b76175ec4b4134896fd73ea812ac052ecf', 'committer_username': 'rvacaru', 'committer_name': 'Razvan Vacaru', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 23, 7, 40, 26, tzinfo=datetime.timezone.utc)}]",Razvan Vacaru,12080600,,User,,16,,4,6
1036932265,Update unit module scalatest version to 3.2.13,"The scalatest version update, needed for the work done in https://github.com/scalacenter/scalafix/pull/1650 , specifically because the old scalatest version in not found anymore.

When updating the versions there's a lib version conflict on `scala-xml` which is resolved by ignoring with a `libraryDependencySchemes` as suggested in the conflict output below:
```
sbt:scalafix> unit2_12Target3/update
[error] stack trace is suppressed; run last unit2_12Target3 / update for the full output
[error] (unit2_12Target3 / update) found version conflict(s) in library dependencies; some are suspected to be binary incompatible:
[error] 
[error]         * org.scala-lang.modules:scala-xml_2.12:2.1.0 (early-semver) is selected over {1.3.0, 1.0.6}
[error]             +- org.scalatest:scalatest-core_2.12:3.2.13           (depends on 2.1.0)
[error]             +- org.scala-lang:scala-compiler:2.12.16              (depends on 1.0.6)
[error]             +- io.get-coursier:coursier-core_2.12:2.0.0-RC5-6 (depends on xxx)
[error] this can be overridden using libraryDependencySchemes or evictionErrorLevel
```",True,1661,https://api.github.com/repos/scalacenter/scalafix/pulls/1661,https://github.com/scalacenter/scalafix/pull/1661,closed,3,2,2,5,0,3,0,0,[],2022-08-25 15:32:43+00:00,2022-08-26 13:10:50+00:00,77887.0,21:38:07,"[{'comment_id': 955846301, 'comment_body': 'this is actually the latest version available also for scala 2.11 (see https://github.com/scalacenter/scalafix/runs/8031777807?check_suite_focus=true) Hence I think we can use 2 different versions of coursier instead, one for 2.11 and the other for the rest ', 'comment_created': datetime.datetime(2022, 8, 26, 9, 20, 9, tzinfo=datetime.timezone.utc), 'commenter': 'rvacaru', 'type': 'User'}, {'comment_id': 955913540, 'comment_body': ""let's not bump coursier and introduce more complexity, 2.11 is on its way out anyway https://github.com/scalacenter/scalafix/issues/1635"", 'comment_created': datetime.datetime(2022, 8, 26, 10, 41, 59, tzinfo=datetime.timezone.utc), 'commenter': 'bjaglin', 'type': 'User'}, {'comment_id': 955985718, 'comment_body': 'reverted', 'comment_created': datetime.datetime(2022, 8, 26, 12, 20, 27, tzinfo=datetime.timezone.utc), 'commenter': 'rvacaru', 'type': 'User'}]","[{'commit_sha': '81b7b488447e19fce2e3dcbab7a3d0728356319d', 'committer_username': 'rvacaru', 'committer_name': 'Razvan Vacaru', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 23, 7, 40, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b197e1c6134c68b04c1c1c2b468356bd55917cc7', 'committer_username': 'rvacaru', 'committer_name': 'Razvan Vacaru', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 23, 7, 40, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ebaa3fff010a976764163d0bfa3e99ae54083f7', 'committer_username': 'rvacaru', 'committer_name': 'Razvan Vacaru', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 23, 7, 40, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3dc8b21041f489bda74e5a9ee44f2033c07afc1', 'committer_username': 'rvacaru', 'committer_name': 'Razvan Vacaru', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 23, 7, 40, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '30ec98e37ed2660b5d46f8ab3306d984ef63f8cc', 'committer_username': 'rvacaru', 'committer_name': 'Razvan Vacaru', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 23, 7, 40, 26, tzinfo=datetime.timezone.utc)}]",Razvan Vacaru,12080600,,User,,16,,4,6
1010746708,scalafix-cli_3 & test dependencies (GSoC 2022),"Follows https://github.com/scalacenter/scalafix/pull/1629 & https://github.com/scalacenter/scalafix/pull/1643
Towards https://github.com/scalacenter/scalafix/issues/1680",True,1650,https://api.github.com/repos/scalacenter/scalafix/pulls/1650,https://github.com/scalacenter/scalafix/pull/1650,closed,615,376,41,11,11,76,0,0,[],2022-07-28 12:13:26+00:00,2022-10-27 18:17:22+00:00,7884236.0,"91 days, 6:03:56","[{'comment_id': 932143048, 'comment_body': 'this is a first stub, disregard as it needs to be reimplemented with the new scala3 compiler APIs', 'comment_created': datetime.datetime(2022, 7, 28, 12, 14, 6, tzinfo=datetime.timezone.utc), 'commenter': 'rvacaru', 'type': 'User'}, {'comment_id': 932148588, 'comment_body': 'you can delete this code I think ', 'comment_created': datetime.datetime(2022, 7, 28, 12, 20, 10, tzinfo=datetime.timezone.utc), 'commenter': 'mlachkar-da', 'type': 'User'}, {'comment_id': 932151418, 'comment_body': ""@tgodzik can you please confirm it's correct. We are rewriting quasiqotes to be able to compile in scala 3. thank you "", 'comment_created': datetime.datetime(2022, 7, 28, 12, 23, 7, tzinfo=datetime.timezone.utc), 'commenter': 'mlachkar-da', 'type': 'User'}, {'comment_id': 932173880, 'comment_body': 'to be confirmed if this block can be actually removed', 'comment_created': datetime.datetime(2022, 7, 28, 12, 46, 7, tzinfo=datetime.timezone.utc), 'commenter': 'rvacaru', 'type': 'User'}, {'comment_id': 933013753, 'comment_body': 'I run it in a worksheet and got:\r\n```\r\n\r\nimport scala.meta._\r\ninit""Rewrite""\r\n// res0: Init = Init(tpe = Type.Name(value = ""Rewrite""), name = _, argss = List())\r\ninit""Rule(a)""\r\n// res1: Init = Init(tpe = Type.Name(value = ""Rule""), name = _, argss = List(List(Term.Name(value = ""a""))))\r\ninit""SemanticRewrite(a)""\r\n// res2: Init = Init(tpe = Type.Name(value = ""SemanticRewrite""), name = _, argss = List(List(Term.Name(value = ""a""))))\r\ninit""SemanticRule(a, b)""\r\n// res3: Init = Init(\r\n//   tpe = Type.Name(value = ""SemanticRule""),\r\n//   name = _,\r\n//   argss = List(List(Term.Name(value = ""a""), Term.Name(value = ""b"")))\r\n// )\r\n```\r\n\r\nSo I would say that we should tweak it a little bit:\r\n```suggestion\r\n        case Template(_, Init(Type.Name(""Rewrite""), _, Nil) :: _, _, _) => true\r\n        case Template(_, Init(Type.Name(""Rule""), _, List(List(_))) :: _, _, _) => true\r\n        case Template(_, Init(Type.Name(""SemanticRewrite""), _, List(List(_))) :: _, _, _) => true\r\n        case Template(_, Init(Type.Name(""SemanticRule""), _, List(List(_, _))) :: _, _, _) => true\r\n```', 'comment_created': datetime.datetime(2022, 7, 29, 8, 49, 28, tzinfo=datetime.timezone.utc), 'commenter': 'tgodzik', 'type': 'User'}, {'comment_id': 933292292, 'comment_body': ""here I'm changing the signature of `compile` by declaring  `throw CompilationException`, is it ok?"", 'comment_created': datetime.datetime(2022, 7, 29, 13, 50, 4, tzinfo=datetime.timezone.utc), 'commenter': 'rvacaru', 'type': 'User'}, {'comment_id': 933293352, 'comment_body': 'we are using both `dotty.tools.io.AbstractFile` and `scala.reflect.io.AbstractFile`', 'comment_created': datetime.datetime(2022, 7, 29, 13, 50, 56, tzinfo=datetime.timezone.utc), 'commenter': 'rvacaru', 'type': 'User'}, {'comment_id': 933295717, 'comment_body': ""this didn't change from the original scala2 source, it should be refactored out and reused across scala versions probably "", 'comment_created': datetime.datetime(2022, 7, 29, 13, 52, 41, tzinfo=datetime.timezone.utc), 'commenter': 'rvacaru', 'type': 'User'}, {'comment_id': 933364342, 'comment_body': 'done, in `RuleCompilerClasspath`', 'comment_created': datetime.datetime(2022, 7, 29, 15, 3, 29, tzinfo=datetime.timezone.utc), 'commenter': 'rvacaru', 'type': 'User'}, {'comment_id': 934042013, 'comment_body': 'personal taste, but I would import this as top level with an alias (`DottyAbstractFile`) to make the dependency clear.', 'comment_created': datetime.datetime(2022, 7, 31, 21, 32, 25, tzinfo=datetime.timezone.utc), 'commenter': 'bjaglin', 'type': 'User'}, {'comment_id': 934042276, 'comment_body': 'There are not checked exceptions in scala so I am not sure this will change the signature - did you check?\r\n\r\nBut anyway, why throwing an exception when you have a `metaconfig.Configured` allowing you to capture errors?', 'comment_created': datetime.datetime(2022, 7, 31, 21, 34, 54, tzinfo=datetime.timezone.utc), 'commenter': 'bjaglin', 'type': 'User'}, {'comment_id': 934042376, 'comment_body': '""Multiple"" ?', 'comment_created': datetime.datetime(2022, 7, 31, 21, 36, 16, tzinfo=datetime.timezone.utc), 'commenter': 'bjaglin', 'type': 'User'}, {'comment_id': 934043220, 'comment_body': ""This would be quite abstract/hard to understand for an end-user.\r\n\r\nWhat about something like:\r\n> Error compiling rule(s) from source using Scala 3 compiler; to use the Scala 2.x compiler instead, use the corresponding scalafix-cli artifact or force scalafixScalaBinaryVersion to 2.x in your build tool.\r\n\r\nIt's not perfect as scalafixScalaBinaryVersion is a sbt-scalafix concept, but\r\n1. judging by the number of tickets/requests, sbt-scalafix is by far the most used client so far\r\n1. build tools will have something similar (although maybe not named exactly the same) if they allow picking up a specific scalafix scala version\r\n1. we already have a reference to it in this repo https://github.com/scalacenter/scalafix/blob/e11610fb2abcf78355c57794b04626e2d2c5c24e/scalafix-rules/src/main/scala-2/scalafix/internal/rule/ExplicitResultTypes.scala#L74 (although I don't remember having a proper discussion about it) "", 'comment_created': datetime.datetime(2022, 7, 31, 21, 44, 54, tzinfo=datetime.timezone.utc), 'commenter': 'bjaglin', 'type': 'User'}, {'comment_id': 934043376, 'comment_body': '```suggestion\r\n          ""org.scala-lang"" %% ""scala3-compiler"" % scala3\r\n```\r\nor maybe even\r\n```suggestion\r\n          ""org.scala-lang"" %% ""scala3-compiler"" % scalaVersion.value\r\n```', 'comment_created': datetime.datetime(2022, 7, 31, 21, 46, 2, tzinfo=datetime.timezone.utc), 'commenter': 'bjaglin', 'type': 'User'}, {'comment_id': 934043696, 'comment_body': ""irrelevant with dotty's API?"", 'comment_created': datetime.datetime(2022, 7, 31, 21, 48, 53, tzinfo=datetime.timezone.utc), 'commenter': 'bjaglin', 'type': 'User'}, {'comment_id': 934043936, 'comment_body': ""I am not familiar with dotty, but I wonder how the compiled sources are made available to that classloader since I don't see it passed anywhere during the compilation phase?"", 'comment_created': datetime.datetime(2022, 7, 31, 21, 50, 50, tzinfo=datetime.timezone.utc), 'commenter': 'bjaglin', 'type': 'User'}, {'comment_id': 937439327, 'comment_body': ""the main reason why I'm throwing directly an exception is because we discussed that in case of compilation errors we want to inform the user with a message. I probably misunderstood how we should send the message. \r\nI'll change this and use `metaconfig.Configured` with this message. Then the exception will be gone as well"", 'comment_created': datetime.datetime(2022, 8, 4, 7, 26, 45, tzinfo=datetime.timezone.utc), 'commenter': 'rvacaru', 'type': 'User'}, {'comment_id': 937440300, 'comment_body': ""good point, I'll check this"", 'comment_created': datetime.datetime(2022, 8, 4, 7, 27, 48, tzinfo=datetime.timezone.utc), 'commenter': 'rvacaru', 'type': 'User'}, {'comment_id': 937809864, 'comment_body': ""I've found a way to provide such settings, will remove the commented lines once we think RuleCompiler is good enough"", 'comment_created': datetime.datetime(2022, 8, 4, 13, 51, 13, tzinfo=datetime.timezone.utc), 'commenter': 'rvacaru', 'type': 'User'}, {'comment_id': 937823622, 'comment_body': ""I've found examples of dotty usage from which I've implemented the setup of the context and later the usage of the compiler / run for scala3:\r\n- [scalameta](https://github.com/scalameta/mdoc/blob/c52156730d3bdd485dd213b9d195402bbe255174/mdoc/src/main/scala-3/mdoc/internal/markdown/MarkdownCompiler.scala#L56)\r\n- [scala compiler-benchmark](https://github.com/scala/compiler-benchmark/blob/90f1b17f570bd66562a473f9d3de3f698e0fde28/compilation/src/main/dotc/scala/tools/benchmark/BenchmarkDriver.scala)\r\n- [dotty SnippetCompiler](https://github.com/lampepfl/dotty/blob/8bd527ed54bed91294373f7e20ba73565b9324ff/scaladoc/src/dotty/tools/scaladoc/snippets/SnippetCompiler.scala)\r\n\r\nNow it looks more reasonable, at least"", 'comment_created': datetime.datetime(2022, 8, 4, 14, 2, 23, tzinfo=datetime.timezone.utc), 'commenter': 'rvacaru', 'type': 'User'}, {'comment_id': 937825595, 'comment_body': ""here I'm not sure about the order of the errors, and if this error will actually be the first (which is what we want)"", 'comment_created': datetime.datetime(2022, 8, 4, 14, 4, 7, tzinfo=datetime.timezone.utc), 'commenter': 'rvacaru', 'type': 'User'}, {'comment_id': 937853538, 'comment_body': ""I don't have a strong opinion on this tbh, I don't see any problem with requiring users to set a `scalafixScalaBinaryVersion` as well. Could be useful to document this config somewhere tho."", 'comment_created': datetime.datetime(2022, 8, 4, 14, 23, 33, tzinfo=datetime.timezone.utc), 'commenter': 'rvacaru', 'type': 'User'}, {'comment_id': 937855163, 'comment_body': ""classpath it's now included in the initial context settings for dotty"", 'comment_created': datetime.datetime(2022, 8, 4, 14, 24, 36, tzinfo=datetime.timezone.utc), 'commenter': 'rvacaru', 'type': 'User'}, {'comment_id': 938771933, 'comment_body': ""`java8Compat` dependency couldn't be found for `cli3/compile`, hence removing it"", 'comment_created': datetime.datetime(2022, 8, 5, 12, 40, 11, tzinfo=datetime.timezone.utc), 'commenter': 'rvacaru', 'type': 'User'}, {'comment_id': 938772451, 'comment_body': 'copied from the `scala-2.12+` folder', 'comment_created': datetime.datetime(2022, 8, 5, 12, 40, 51, tzinfo=datetime.timezone.utc), 'commenter': 'rvacaru', 'type': 'User'}, {'comment_id': 938871722, 'comment_body': 'a different version of scalatest has to be provided, otherwise the dependency can\'t be found:\r\n- `sbt.librarymanagement.ResolveException: Error downloading org.scalatest:scalatest_3:3.0.8`\r\n\r\nI\'m not sure if we can use the same version for every scala version due to the comment on the scalatestV:\r\n- `  val scalatestV = ""3.0.8"" // don\'t bump, to avoid forcing breaking changes on clients via eviction`', 'comment_created': datetime.datetime(2022, 8, 5, 14, 25, 12, tzinfo=datetime.timezone.utc), 'commenter': 'rvacaru', 'type': 'User'}, {'comment_id': 939012132, 'comment_body': ""For now, let's pick the latest scalatest for scala3 (can you please track it as `scalatest3V` in `Dependencies.scala` ?) and keep the old version for scala 2.x (we can align them in the next breaking release if needed)."", 'comment_created': datetime.datetime(2022, 8, 5, 17, 16, 49, tzinfo=datetime.timezone.utc), 'commenter': 'bjaglin', 'type': 'User'}, {'comment_id': 939013975, 'comment_body': ""What about including [scala-2.12+ folders](https://github.com/scalacenter/scalafix/blob/c31ffa416c3ab4241e0849dcfd204b2e4b32336e/project/ScalafixBuild.scala#L207) for scala 3? there might be cases where it's not what we want, but if it works for now, I'd favor that over duplicating a file."", 'comment_created': datetime.datetime(2022, 8, 5, 17, 18, 48, tzinfo=datetime.timezone.utc), 'commenter': 'bjaglin', 'type': 'User'}, {'comment_id': 939014467, 'comment_body': ':+1: ', 'comment_created': datetime.datetime(2022, 8, 5, 17, 19, 30, tzinfo=datetime.timezone.utc), 'commenter': 'bjaglin', 'type': 'User'}, {'comment_id': 939015500, 'comment_body': 'nit: not new to this PR, but why is different overload used when adding scala3 to the list?', 'comment_created': datetime.datetime(2022, 8, 5, 17, 21, 5, tzinfo=datetime.timezone.utc), 'commenter': 'bjaglin', 'type': 'User'}, {'comment_id': 939017280, 'comment_body': 'are you sure this has an effect? by having a quick look at https://github.com/scalameta/mdoc/blob/c52156730d3bdd485dd213b9d195402bbe255174/mdoc/src/main/scala-3/mdoc/internal/markdown/MarkdownCompiler.scala#L56-L72, it seems that `ctx` is immutable and `setSetting` is returning a copy (discarded above)', 'comment_created': datetime.datetime(2022, 8, 5, 17, 23, 33, tzinfo=datetime.timezone.utc), 'commenter': 'bjaglin', 'type': 'User'}, {'comment_id': 939028487, 'comment_body': ""`:+` appends so it does not look right. You might want to check https://github.com/scalacenter/scalafix/blob/main/scalafix-cli/src/main/scala/scalafix/internal/v1/MainOps.scala to see how `Configured.notOk` is handled since that's the entry point."", 'comment_created': datetime.datetime(2022, 8, 5, 17, 36, 34, tzinfo=datetime.timezone.utc), 'commenter': 'bjaglin', 'type': 'User'}, {'comment_id': 939031290, 'comment_body': ""Something is weird here as errors looks like a `Seq[Configured[_]]`. Shouldn't you remove the `notOk` above and use https://github.com/scalameta/metaconfig/blob/466f7cf86f6ad658312fa132f742178827d5c19c/metaconfig-core/shared/src/main/scala/metaconfig/ConfError.scala#L216 ?"", 'comment_created': datetime.datetime(2022, 8, 5, 17, 39, 40, tzinfo=datetime.timezone.utc), 'commenter': 'bjaglin', 'type': 'User'}, {'comment_id': 939032604, 'comment_body': 'the error coming from dotty is a source file position while `ConfError` expects a position in the config file\r\n```suggestion\r\n```', 'comment_created': datetime.datetime(2022, 8, 5, 17, 40, 52, tzinfo=datetime.timezone.utc), 'commenter': 'bjaglin', 'type': 'User'}, {'comment_id': 939035624, 'comment_body': ""is that a multiline error? I guess we'll need unit tests to make sure this is not spamming the error logs for nothing"", 'comment_created': datetime.datetime(2022, 8, 5, 17, 43, 32, tzinfo=datetime.timezone.utc), 'commenter': 'bjaglin', 'type': 'User'}, {'comment_id': 939038750, 'comment_body': ""I am not familiar with compiler options but aren't these making compilation stricter? Not sure what was the original intent in the Scala 2 counterpart, but in the context of Scala 3 I think we should be as permissive as possible."", 'comment_created': datetime.datetime(2022, 8, 5, 17, 46, 51, tzinfo=datetime.timezone.utc), 'commenter': 'bjaglin', 'type': 'User'}, {'comment_id': 941489957, 'comment_body': ""In this case the two options don't make the compilation stricter, they just print out additional warnings, from the man page:\r\n```\r\n-deprecation  Emit warning and location for usages of deprecated APIs.\r\n\r\n-unchecked  Enable additional warnings where generated code depends on assumptions.\r\n```\r\nIt could also be that we don't really want the additional warnings in the beginning."", 'comment_created': datetime.datetime(2022, 8, 9, 15, 31, 33, tzinfo=datetime.timezone.utc), 'commenter': 'rvacaru', 'type': 'User'}, {'comment_id': 941514035, 'comment_body': 'sounds good, actually I did the same copy pasta trick for the `TPrintImplicits` in `scalafix-rules` too', 'comment_created': datetime.datetime(2022, 8, 9, 15, 47, 22, tzinfo=datetime.timezone.utc), 'commenter': 'rvacaru', 'type': 'User'}, {'comment_id': 941527763, 'comment_body': ""no reason, copy paste from the first example Meriam did. Since we're not providing any additional settings/config I'll switch to the basic `jvmPlatform` with just the scala versions arg"", 'comment_created': datetime.datetime(2022, 8, 9, 16, 0, 20, tzinfo=datetime.timezone.utc), 'commenter': 'rvacaru', 'type': 'User'}, {'comment_id': 942172639, 'comment_body': 'indeed it returns a new context, I changed the implementation and reassign the context ', 'comment_created': datetime.datetime(2022, 8, 10, 8, 30, 52, tzinfo=datetime.timezone.utc), 'commenter': 'rvacaru', 'type': 'User'}, {'comment_id': 943397604, 'comment_body': 'Rule compiler init is now fixed, the console manual test works:\r\n```scala\r\nscala> val r = new scalafix.internal.reflect.RuleCompiler(scalafix.internal.reflect.RuleCompilerClasspath.defaultClasspath)\r\nval r: scalafix.internal.reflect.RuleCompiler = scalafix.internal.reflect.RuleCompiler@6c20679c\r\n``` \r\nThis was inspired by the following article with links to code samples:\r\n- https://www.chris-kipp.io/blog/an-intro-to-the-scala-presentation-compiler\r\n- https://github.com/com-lihaoyi/Ammonite/blob/master/amm/compiler/src/main/scala-3/ammonite/compiler/Compiler.scala\r\n- https://github.com/scalameta/metals/blob/main/mtags/src/main/scala-3/scala/meta/internal/pc/ScalaPresentationCompiler.scala', 'comment_created': datetime.datetime(2022, 8, 11, 11, 55, 36, tzinfo=datetime.timezone.utc), 'commenter': 'rvacaru', 'type': 'User'}, {'comment_id': 944149129, 'comment_body': ""if it's just warnings let's keep them for now :+1: "", 'comment_created': datetime.datetime(2022, 8, 12, 6, 25, 8, tzinfo=datetime.timezone.utc), 'commenter': 'bjaglin', 'type': 'User'}, {'comment_id': 944152348, 'comment_body': 'you can avoid repeating the artifact coordinates\r\n```suggestion\r\n        Seq(""scalatest.withRevision(scalatest3V))\r\n```\r\nactually, since scalatest is used also in unit, we could probably have a `scalatestDep` in `ScalafixBuild`\r\n```scala\r\n    lazy val scalatestDeps = Def.setting {\r\n      if (isScala3.value) Seq(scalatest.withRevision(scalatest3V))\r\n      else Seq(scalatest)\r\n    }\r\n```', 'comment_created': datetime.datetime(2022, 8, 12, 6, 31, 15, tzinfo=datetime.timezone.utc), 'commenter': 'bjaglin', 'type': 'User'}, {'comment_id': 944152798, 'comment_body': 'it would be nice to have this as a separate, preliminary commit since it impacts stuff in -rules', 'comment_created': datetime.datetime(2022, 8, 12, 6, 32, 1, tzinfo=datetime.timezone.utc), 'commenter': 'bjaglin', 'type': 'User'}, {'comment_id': 944425191, 'comment_body': 'history is now rewritten ', 'comment_created': datetime.datetime(2022, 8, 12, 12, 43, 21, tzinfo=datetime.timezone.utc), 'commenter': 'rvacaru', 'type': 'User'}, {'comment_id': 947701956, 'comment_body': 'I have a doubt, why in unit we have scalatest with version 3.2.0:\r\n```\r\n    libraryDependencies ++= List(\r\n      jgit,\r\n      coursier,\r\n      scalatest.withRevision(\r\n        ""3.2.0""\r\n      ), // make sure testkit clients can use recent 3.x versions\r\n      scalametaTeskit\r\n    ),\r\n```\r\n\r\nwhile in `Dependencies.scala` we have a different version:\r\n- `  val scalatestV = ""3.0.8""`\r\n\r\nIn your `scalatestDeps` proposal we\'d be using either version 3.0.8 (scalatestV) or 3.2.13 (scalatest3V)', 'comment_created': datetime.datetime(2022, 8, 17, 9, 48, 21, tzinfo=datetime.timezone.utc), 'commenter': 'rvacaru', 'type': 'User'}, {'comment_id': 948473083, 'comment_body': 'That hardcoded ""3.2.0"" has no reason to be pinned, it can/should follow the latest version. So instead of `scalatestV` & `scalatest3V`, we could name `scalatestMinV` & `scalatestLatestV`.\r\n\r\nSee https://github.com/scalacenter/scalafix/issues/1172#issuecomment-646621781 for the context of why we build/publish against an old version. For the next breaking change version of scalafix, I believe we should remove support for Scalatest 3.0.x (it\'s been nearly 3 years since the old Scalatest 3.0.x API is deprecated) by just building against the latest, but let\'s not change that in that PR.\r\n\r\nIt\'s OK that the scala 3 artifacts use the latest Scalatest version and therefore are not compatible with Scalatest 3.0.x since there are new so there are no concerns of breaking changes on existing clients.', 'comment_created': datetime.datetime(2022, 8, 17, 22, 6, 8, tzinfo=datetime.timezone.utc), 'commenter': 'bjaglin', 'type': 'User'}, {'comment_id': 956195506, 'comment_body': ""here we're also calling nsc.Main.process @ line 195:\r\n`    val compileSucceeded = scala.tools.nsc.Main.process(scalacOptions)\r\n`"", 'comment_created': datetime.datetime(2022, 8, 26, 16, 6, 54, tzinfo=datetime.timezone.utc), 'commenter': 'rvacaru', 'type': 'User'}, {'comment_id': 956198960, 'comment_body': 'nitpicking, but I would not take the previous opts as parameter, this can be done on the callsite', 'comment_created': datetime.datetime(2022, 8, 26, 16, 11, 22, tzinfo=datetime.timezone.utc), 'commenter': 'bjaglin', 'type': 'User'}, {'comment_id': 956200946, 'comment_body': ""then you'll probably need to update the `scalacOptions` as well"", 'comment_created': datetime.datetime(2022, 8, 26, 16, 14, tzinfo=datetime.timezone.utc), 'commenter': 'bjaglin', 'type': 'User'}, {'comment_id': 956202184, 'comment_body': 'nit: favor Seq over Array to be more generic?\r\n```suggestion\r\n    def runScalac(options: Seq[String]): Unit = {\r\n```', 'comment_created': datetime.datetime(2022, 8, 26, 16, 15, 42, tzinfo=datetime.timezone.utc), 'commenter': 'bjaglin', 'type': 'User'}, {'comment_id': 957601594, 'comment_body': ""true! I'm such a dummy haha"", 'comment_created': datetime.datetime(2022, 8, 29, 17, 16, 26, tzinfo=datetime.timezone.utc), 'commenter': 'rvacaru', 'type': 'User'}, {'comment_id': 960555216, 'comment_body': '```\r\nsbt:example> show Compile / unmanagedResourceDirectories\r\n[info] * /home/piquerez/github/scalacenter/sbt-resource-dir/src/main/resources\r\n[info] * /home/piquerez/github/scalacenter/sbt-resource-dir/src/main/resources/resource-3\r\n```\r\nI don\'t think it is a good idea to have `resource-3` inside `resources` because they are both in `unmanagedResourceDirectories`. Maybe you should put `resource-3` on the same level as `resources`.\r\n\r\n```suggestion\r\n    Compile / unmanagedResourceDirectories ++= {\r\n      val resourceDir = (Compile / resourceDirectory).value\r\n      CrossVersion.partialVersion(scalaVersion.value) match {\r\n        case Some((2, _)) => Seq(resourceDir.getParentFile / ""resource-2"")\r\n        case Some((3, _)) => Seq(resourceDir.getParentFile / ""resource-3"")\r\n        case _ => Seq()\r\n      }\r\n    },\r\n```', 'comment_created': datetime.datetime(2022, 9, 1, 11, 50, 17, tzinfo=datetime.timezone.utc), 'commenter': 'adpi2', 'type': 'User'}, {'comment_id': 960564873, 'comment_body': 'Also I think you only want one resource directory rather than two. So you should use the `:=` operator instead of `++=`.\r\n\r\n```suggestion\r\n    Compile / unmanagedResourceDirectories := {\r\n      val resourceDir = (Compile / resourceDirectory).value\r\n      CrossVersion.partialVersion(scalaVersion.value) match {\r\n        case Some((2, _)) => Seq(resourceDir.getParentFile / ""resource-2"")\r\n        case Some((3, _)) => Seq(resourceDir.getParentFile / ""resource-3"")\r\n        case _ => Seq()\r\n      }\r\n    },\r\n```', 'comment_created': datetime.datetime(2022, 9, 1, 11, 58, tzinfo=datetime.timezone.utc), 'commenter': 'adpi2', 'type': 'User'}, {'comment_id': 960584265, 'comment_body': ""Thanks @adpi2 ! I'm new to sbt and didn't realize I could actually check the dirs with `show Compile / unmanagedResourceDirectories`. \r\nOn the multiple resource directories or not I'm not sure, we might have resources that are common and only some specific for each scala version. Right now it's not the case so this might be overcomplicating for [speculative generality](https://refactoring.guru/smells/speculative-generality)\r\n\r\nWhat do you think @bjaglin ?"", 'comment_created': datetime.datetime(2022, 9, 1, 12, 19, 42, tzinfo=datetime.timezone.utc), 'commenter': 'rvacaru', 'type': 'User'}, {'comment_id': 960597055, 'comment_body': ""If I see a `resource-x` directory in a project, I would probably expect `resource` to be included as well, just like the built-in `scala-x`  pattern for `unmanagedSourceDirectories`. So based on my own experience with sbt projects, I would favor adding new directories rather than replacing the default one. Also, it means we can apply the setting across all modules (even those that don't have `resource-x` needs) instead of on a per-module basis."", 'comment_created': datetime.datetime(2022, 9, 1, 12, 32, 51, tzinfo=datetime.timezone.utc), 'commenter': 'bjaglin', 'type': 'User'}, {'comment_id': 960931950, 'comment_body': 'declare in `Dependencies.scala`?', 'comment_created': datetime.datetime(2022, 9, 1, 17, 34, 8, tzinfo=datetime.timezone.utc), 'commenter': 'bjaglin', 'type': 'User'}, {'comment_id': 960932209, 'comment_body': ""extract as it's common"", 'comment_created': datetime.datetime(2022, 9, 1, 17, 34, 19, tzinfo=datetime.timezone.utc), 'commenter': 'bjaglin', 'type': 'User'}, {'comment_id': 960933922, 'comment_body': 'looks like you return a single element in both cases, so remove the `Seq` and rename to `scalatestDep` ?', 'comment_created': datetime.datetime(2022, 9, 1, 17, 35, 37, tzinfo=datetime.timezone.utc), 'commenter': 'bjaglin', 'type': 'User'}, {'comment_id': 960940464, 'comment_body': '```suggestion\r\n      ""unit2_12Target3/test"" ::\r\n         ""unit3Target3/test""\r\n```', 'comment_created': datetime.datetime(2022, 9, 1, 17, 40, 35, tzinfo=datetime.timezone.utc), 'commenter': 'bjaglin', 'type': 'User'}, {'comment_id': 960940774, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2022, 9, 1, 17, 40, 49, tzinfo=datetime.timezone.utc), 'commenter': 'bjaglin', 'type': 'User'}, {'comment_id': 960942371, 'comment_body': '```suggestion\r\n    libraryDependencies ++= scalatestDeps.value\r\n```', 'comment_created': datetime.datetime(2022, 9, 1, 17, 42, 7, tzinfo=datetime.timezone.utc), 'commenter': 'bjaglin', 'type': 'User'}, {'comment_id': 960942922, 'comment_body': 'is it time to add `scala3` to `buildScalaVersions` if we migrated everything?', 'comment_created': datetime.datetime(2022, 9, 1, 17, 42, 39, tzinfo=datetime.timezone.utc), 'commenter': 'bjaglin', 'type': 'User'}, {'comment_id': 960943335, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2022, 9, 1, 17, 43, 3, tzinfo=datetime.timezone.utc), 'commenter': 'bjaglin', 'type': 'User'}, {'comment_id': 960944392, 'comment_body': 'I would just leave it out, it will be obvious when we reach that point\r\n```suggestion\r\n```', 'comment_created': datetime.datetime(2022, 9, 1, 17, 43, 52, tzinfo=datetime.timezone.utc), 'commenter': 'bjaglin', 'type': 'User'}, {'comment_id': 978089120, 'comment_body': 'When the target is virtual (which is the case if no argument is provided like in `ScalafixToolbox`)\r\nhttps://github.com/scalacenter/scalafix/blob/ac41300fe922ac27931064fd881272b927c3c72e/scalafix-reflect/src/main/scala-3/scalafix/internal/reflect/RuleCompiler.scala#L32\r\nis creating a `dottyTargetDirectory` (used as compiler output) completely disconnected from `target` (used to try to classload later): they only share a name, but any memory space.\r\n\r\nThis commits fixes the problem before further refactoring to get rid of the line above.', 'comment_created': datetime.datetime(2022, 9, 22, 21, 11, 47, tzinfo=datetime.timezone.utc), 'commenter': 'bjaglin', 'type': 'User'}, {'comment_id': 978179609, 'comment_body': 'I would keep [a separate commit for that particular change](https://github.com/scalacenter/scalafix/commit/858003d0e70c284623f8fae84409fa8f2f2e0105) instead of merging it to the big unit one, as the reasoning for the change (both for scala 2 & scala3) is quite tricky.\r\n\r\nKeeping a note here to check that after the final squash/rebase.', 'comment_created': datetime.datetime(2022, 9, 23, 0, 19, 43, tzinfo=datetime.timezone.utc), 'commenter': 'bjaglin', 'type': 'User'}, {'comment_id': 985105558, 'comment_body': 'should `specificScalacOption2` be added here too?', 'comment_created': datetime.datetime(2022, 10, 1, 14, 24, 40, tzinfo=datetime.timezone.utc), 'commenter': 'rvacaru', 'type': 'User'}, {'comment_id': 985105979, 'comment_body': '@mlachkar I thought we were handling scalacOptions in the [CompatSemanticdb](https://github.com/scalacenter/scalafix/pull/1650/files#diff-4cc852444bb821de2b756471dc5f8040c8a634fabf8c91e2ef4629229eb21cbc) classes in `scala2` and `scala3`. That\'s where I already moved `""-Yrangepos""`', 'comment_created': datetime.datetime(2022, 10, 1, 14, 28, 10, tzinfo=datetime.timezone.utc), 'commenter': 'rvacaru', 'type': 'User'}, {'comment_id': 985286797, 'comment_body': ""why do we need to bump this? it should be fine as the [compatibility plans are still being ironed](https://www.scala-lang.org/blog/2022/08/17/long-term-compatibility-plans.html) (so it's only starting 3.0 that we should pin), but I would not bump in this PR unless we fully understand the cost/benefits."", 'comment_created': datetime.datetime(2022, 10, 2, 19, 44, 53, tzinfo=datetime.timezone.utc), 'commenter': 'bjaglin', 'type': 'User'}, {'comment_id': 985291928, 'comment_body': 'unused?', 'comment_created': datetime.datetime(2022, 10, 2, 20, 26, 8, tzinfo=datetime.timezone.utc), 'commenter': 'bjaglin', 'type': 'User'}, {'comment_id': 985292006, 'comment_body': ':+1: ', 'comment_created': datetime.datetime(2022, 10, 2, 20, 26, 35, tzinfo=datetime.timezone.utc), 'commenter': 'bjaglin', 'type': 'User'}, {'comment_id': 998010797, 'comment_body': ""Actually this is not about semanticdb so I would keep it separated, we'll have to reconsider that when working on https://github.com/scalacenter/scalafix/issues/1680 anyway"", 'comment_created': datetime.datetime(2022, 10, 18, 10, 18, 37, tzinfo=datetime.timezone.utc), 'commenter': 'bjaglin', 'type': 'User'}, {'comment_id': 998012434, 'comment_body': 'This does not need `removeUnused` so no. This test will be removed with https://github.com/scalacenter/scalafix/pull/1666.', 'comment_created': datetime.datetime(2022, 10, 18, 10, 20, 16, tzinfo=datetime.timezone.utc), 'commenter': 'bjaglin', 'type': 'User'}, {'comment_id': 998042846, 'comment_body': ""I don't manage to get that error when trying to compile [a rule with quasiquotes](https://raw.githubusercontent.com/scalacenter/scalafix-named-literal-arguments/fb9f65ee9f09f167651b3d9bfe94a9be76818759/scalafix/rules/src/main/scala/fix/Namedliteralarguments_v1.scala) with scalafix-cli_3\r\n\r\n```\r\ncs launch -r ivy2local ch.epfl.scala:scalafix-cli_3.1.3:0.10.4+22-b8cd292e+20221018-1241-SNAPSHOT -M scalafix.cli.Cli -- --rules=https://raw.githubusercontent.com/scalacenter/scalafix-named-literal-arguments/fb9f65ee9f09f167651b3d9bfe94a9be76818759/scalafix/rules/src/main/scala/fix/Namedliteralarguments_v1.scala\r\nerror: 2 errors\r\n[E0]  Any is not a valid result type of an unapply method of an extractor.\r\n[E1] Scala 2 macro cannot be used in Dotty. See https://dotty.epfl.ch/docs/reference/dropped-features/macros.html\r\nTo turn this error into a warning, pass -Xignore-scala2-macros to the compiler\r\n```"", 'comment_created': datetime.datetime(2022, 10, 18, 10, 50, 11, tzinfo=datetime.timezone.utc), 'commenter': 'bjaglin', 'type': 'User'}, {'comment_id': 998074392, 'comment_body': 'Added https://github.com/scalacenter/scalafix/pull/1650/commits/d15af9a0a1eb545819d0fb53ae3306b2e90313a4\r\n```\r\ncs launch -r ivy2local ch.epfl.scala:scalafix-cli_3.1.3:0.10.4+23-d15af9a0+20221018-1320-SNAPSHOT -M scalafix.cli.Cli -- --rules=https://raw.githubusercontent.com/scalacenter/scalafix-named-literal-arguments/fb9f65ee9f09f167651b3d9bfe94a9be76818759/scalafix/rules/src/main/scala/fix/Namedliteralarguments_v1.scala\r\nerror: 3 errors\r\n[E0]  Any is not a valid result type of an unapply method of an extractor.\r\n[E1] Scala 2 macro cannot be used in Dotty. See https://dotty.epfl.ch/docs/reference/dropped-features/macros.html\r\nTo turn this error into a warning, pass -Xignore-scala2-macros to the compiler\r\n[E2] Error compiling rule(s) from source using Scala 3 compiler; to use the Scala 2.x compiler instead, use the corresponding scalafix-cli artifact or force scalafixScalaBinaryVersion to 2.x in your build tool\r\n```', 'comment_created': datetime.datetime(2022, 10, 18, 11, 22, 4, tzinfo=datetime.timezone.utc), 'commenter': 'bjaglin', 'type': 'User'}]","[{'commit_sha': '5401aba83bbb55f01652baea066158b415e2901b', 'committer_username': 'rvacaru', 'committer_name': 'Razvan Vacaru', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 23, 7, 40, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e53e18d1f15a63702984e66757619f5c5eb4059', 'committer_username': 'rvacaru', 'committer_name': 'Razvan Vacaru', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 23, 7, 40, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f4708976915ddaab2643106d77c1e7977859417', 'committer_username': 'rvacaru', 'committer_name': 'Razvan Vacaru', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 23, 7, 40, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99eff58c30c1ec056735f1e9952d97d6f0791212', 'committer_username': 'rvacaru', 'committer_name': 'Razvan Vacaru', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 23, 7, 40, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c2331821b042f2584b586a657bc74059accf130a', 'committer_username': 'rvacaru', 'committer_name': 'Razvan Vacaru', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 23, 7, 40, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9fd18390124e882a0ade749a7ed1fa18d1070075', 'committer_username': 'bjaglin', 'committer_name': 'Brice Jaglin', 'committer_email': None, 'commit_date': datetime.datetime(2010, 7, 30, 8, 38, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a3ac8efb41407d3fbae90d951e5276a9a809778', 'committer_username': 'bjaglin', 'committer_name': 'Brice Jaglin', 'committer_email': None, 'commit_date': datetime.datetime(2010, 7, 30, 8, 38, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49b3dbdc82a33bc068750338d2dfdb4db36f459e', 'committer_username': 'bjaglin', 'committer_name': 'Brice Jaglin', 'committer_email': None, 'commit_date': datetime.datetime(2010, 7, 30, 8, 38, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e420a5ec093f8a07ab22a5380a1a97eeada0ce5', 'committer_username': 'mlachkar', 'committer_name': 'Meriam Lachkar', 'committer_email': 'meriam.lachkar@gmail.com', 'commit_date': datetime.datetime(2014, 6, 9, 22, 36, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b8cd292e2dfb4534ff27d6465a0080bd0fb02895', 'committer_username': 'bjaglin', 'committer_name': 'Brice Jaglin', 'committer_email': None, 'commit_date': datetime.datetime(2010, 7, 30, 8, 38, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd15af9a0a1eb545819d0fb53ae3306b2e90313a4', 'committer_username': 'bjaglin', 'committer_name': 'Brice Jaglin', 'committer_email': None, 'commit_date': datetime.datetime(2010, 7, 30, 8, 38, 32, tzinfo=datetime.timezone.utc)}]",Razvan Vacaru,12080600,,User,,16,,4,6

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
65199839,scalafix,scalacenter/scalafix,Scala,183,817,29,109,3680,75,71,9,"[{'id': 1103108402, 'number': 1698, 'closed': datetime.datetime(2022, 11, 14, 12, 29, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 28, 13, 26, 16, tzinfo=datetime.timezone.utc), 'time_taken': 1465423.0, 'time_delta': '16 days, 23:03:43', 'additions': 39, 'deletions': 8, 'state': 'closed'}, {'id': 1036932265, 'number': 1661, 'closed': datetime.datetime(2022, 8, 26, 13, 10, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 25, 15, 32, 43, tzinfo=datetime.timezone.utc), 'time_taken': 77887.0, 'time_delta': '21:38:07', 'additions': 3, 'deletions': 2, 'state': 'closed'}, {'id': 1010746708, 'number': 1650, 'closed': datetime.datetime(2022, 10, 27, 18, 17, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 28, 12, 13, 26, tzinfo=datetime.timezone.utc), 'time_taken': 7884236.0, 'time_delta': '91 days, 6:03:56', 'additions': 615, 'deletions': 376, 'state': 'closed'}, {'id': 1005652827, 'number': 1643, 'closed': datetime.datetime(2022, 7, 22, 18, 11, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 22, 10, 45, 8, tzinfo=datetime.timezone.utc), 'time_taken': 26799.0, 'time_delta': '7:26:39', 'additions': 34, 'deletions': 13, 'state': 'closed'}, {'id': 1005596596, 'number': 1642, 'closed': datetime.datetime(2022, 7, 22, 9, 47, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 22, 9, 45, 16, tzinfo=datetime.timezone.utc), 'time_taken': 117.0, 'time_delta': '0:01:57', 'additions': 233, 'deletions': 153, 'state': 'closed'}, {'id': 997571346, 'number': 1632, 'closed': datetime.datetime(2022, 7, 15, 10, 58, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 15, 9, 49, 48, tzinfo=datetime.timezone.utc), 'time_taken': 4098.0, 'time_delta': '1:08:18', 'additions': 7, 'deletions': 94, 'state': 'closed'}, {'id': 988846477, 'number': 1629, 'closed': datetime.datetime(2022, 7, 22, 17, 43, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 6, 13, 57, 45, tzinfo=datetime.timezone.utc), 'time_taken': 1395972.0, 'time_delta': '16 days, 3:46:12', 'additions': 98, 'deletions': 26, 'state': 'closed'}, {'id': 985110139, 'number': 1627, 'closed': datetime.datetime(2022, 7, 12, 11, 6, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 1, 15, 52, tzinfo=datetime.timezone.utc), 'time_taken': 933261.0, 'time_delta': '10 days, 19:14:21', 'additions': 58, 'deletions': 5, 'state': 'closed'}]"
261050198,mill-scalafix,joan38/mill-scalafix,Scala,13,31,6,9,171,5,1,4,[]
