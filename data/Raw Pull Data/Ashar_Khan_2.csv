pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
442506814,GSoC20 Phase 1: Enhance CI workflows and switch to Github Actions,"More details of the work of this phase could be checked at my wiki https://github.com/BoostGSoC20/ublas/wiki

This PR introduces the following:

- Use Github Actions as CI Service
- Runs Units tests on a wide array of toolchains versions across all major OS
- Adds Code Format checking and Clang tidy checking on CI
- Add an Auto review script for PR
- Increases code-coverage to 95% for **only tensor** module.
- Adds Sanitizers to check for address and undefined behaviours

This PR removes the following:
- OpenCL tests are not run
- Remove .travis.yml
- Remove .appveyor.yml


Requirements

- [ ]  Enable Github Actions from repository Settings for Github to actually enable CI for the repository.
- [ ]  Format the code as per .clang-tidy file 
- [ ]  Fix the clang-tidy issues. (I will propose another PR as a fix)


Useful links:
- [Motivations and Goals](https://github.com/BoostGSoC20/ublas/wiki/Github-actions)
- [Build Matrix](https://github.com/BoostGSoC20/ublas/wiki/Github-Builds)
- [Code Formatting](https://github.com/BoostGSoC20/ublas/wiki/Github-code-format)
- [Clang tidy checks and review](https://github.com/BoostGSoC20/ublas/wiki/Github-clang-tidy-review)
- [Sanitizer Checks](https://github.com/BoostGSoC20/ublas/wiki/Github-sanitizer-checks)",True,89,https://api.github.com/repos/boostorg/ublas/pulls/89,https://github.com/boostorg/ublas/pull/89,closed,1336,65,24,3,1,0,0,1,[],2020-07-01 07:41:48+00:00,2020-07-11 11:57:29+00:00,879341.0,"10 days, 4:15:41",[],"[{'commit_sha': 'c87e2f9bf0fefdbb4f439a0b082d4093b49ce6b3', 'committer_username': 'coder3101', 'committer_name': 'Ashar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 15, 7, 58, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b19cd5cb1dc2493c741733ec2b70666db8d8f16e', 'committer_username': 'coder3101', 'committer_name': 'Ashar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 15, 7, 58, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a822eaf89fa51d340b658c5021786453fc9d8150', 'committer_username': 'coder3101', 'committer_name': 'Ashar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 15, 7, 58, 11, tzinfo=datetime.timezone.utc)}]",Ashar,22212259,,User,,21,,0,67
447790869,Disable branch coverage,"Branch coverage needs to be explicitly enabled and is not the defaault configuration of `lcov` . It is better to disable branch coverage because then we will have only 2 things for each line in coverage report. Either a line is hit or a miss. This is even the default behaviour of `llvm-cov` for coverage reporting. For reference check [this](https://codecov.io/gh/tzlaine/text/tree/master/boost/text) Zach's Library for Unicode which recently got partially approved for Boost. This library also uses default coverage settings. 

**After this commit coverage will be 95%**",True,91,https://api.github.com/repos/boostorg/ublas/pulls/91,https://github.com/boostorg/ublas/pull/91,closed,3,3,1,1,2,0,1,0,[{'name': 'enhancement'}],2020-07-11 16:51:33+00:00,2020-07-12 13:21:10+00:00,73777.0,20:29:37,[],"[{'commit_sha': 'eb1cdfdb35cc0ae84c32876245d362c48b45b43a', 'committer_username': 'coder3101', 'committer_name': 'Ashar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 15, 7, 58, 11, tzinfo=datetime.timezone.utc)}]",Ashar,22212259,,User,,21,,0,67
447864392,Fix all clang-tidy warnings & Improve Review action,"This PR fixes all clang-tidy warnings so that all clang-tidy all clang-tidy checks will pass.

It basically has the following changes:
1. Remove `return after else` warnings.
2. Expand macros in `operator_arithematics.hpp`
3. Suppress false warnings from `assert()` in the codebase.
4. Suppress `bug-exception-escape` for tensor examples.",True,92,https://api.github.com/repos/boostorg/ublas/pulls/92,https://github.com/boostorg/ublas/pull/92,closed,169,44,7,5,8,0,0,0,[],2020-07-12 07:41:15+00:00,2020-07-12 16:16:48+00:00,30933.0,8:35:33,[],"[{'commit_sha': '2e24c5806963881ddc446b0577dba63fe67846b6', 'committer_username': 'coder3101', 'committer_name': 'Ashar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 15, 7, 58, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '92dd4bdaa47306f9000747bf72686a2f00874a39', 'committer_username': 'coder3101', 'committer_name': 'Ashar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 15, 7, 58, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f3adbbe0de0946ed3834ec226510e31200baac2', 'committer_username': 'coder3101', 'committer_name': 'Ashar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 15, 7, 58, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c0073e31cb00679e71597172e565c018612f83a5', 'committer_username': 'coder3101', 'committer_name': 'Ashar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 15, 7, 58, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eebabc076b98e540a3a17db65b9f4ebcae876154', 'committer_username': 'coder3101', 'committer_name': 'Ashar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 15, 7, 58, 11, tzinfo=datetime.timezone.utc)}]",Ashar,22212259,,User,,21,,0,67
448065698,Format code by clang-format,"This commit formats the code by `clang-tidy` according to the styles as mentioned in the `.clang-format` files in the root of the repository. The following locations have been formatted:

- `examples/tensor/*.cpp`
- `test/tensor/*.cpp`
- `include/boost/numeric/ublas/tensor/*.hpp`
- `include/boost/numeric/ublas/tensor/*/*.hpp`

The please review the styles and if any change is required, I will reupdate the files with the new format.",False,93,https://api.github.com/repos/boostorg/ublas/pulls/93,https://github.com/boostorg/ublas/pull/93,closed,15415,14090,74,1,5,1,1,1,[{'name': 'enhancement'}],2020-07-13 06:38:13+00:00,2021-05-24 18:52:23+00:00,27260050.0,"315 days, 12:14:10","[{'comment_id': 454248945, 'comment_body': '`--force-with-lease` makes sure that forced updates do not overwrite code of other contributors. ', 'comment_created': datetime.datetime(2020, 7, 14, 10, 9, 33, tzinfo=datetime.timezone.utc), 'commenter': 'coder3101', 'type': 'User'}]","[{'commit_sha': 'd296b1231dffc42cc460b02ba22ec6c0236afa37', 'committer_username': 'coder3101', 'committer_name': 'Ashar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 15, 7, 58, 11, tzinfo=datetime.timezone.utc)}]",Ashar,22212259,,User,,21,,0,67
449336863,Add CMake Build System File Generator Support,"CMake is a widely used Build System Files Generator. This PR adds the support for CMake into Boost.uBLAS. As a result following things can be built with CMake

- Examples
- Benchmarks (Requires Boost.PROGRAM_OPTIONS)
- Tensor Tests (Requires Boost.UNIT_TEST_FRAMEWORK)

## Configuration Controls
In order to build with CMake, you need to have either Boost installed or boost headers build from source using `b2 headers`.  You can pass an option to CMake `-DBOOST_HEADERS_DIR=<path_to_boost_headers>` and ublas will use those headers. If you skip this option, CMake will try to find a system installed Boost and use its include directories. If both of the above fails, CMake will fail and no build system files will be generated.

### Control the targets to build

By default, CMake will build system files for all of the above three (examples, test, benchmarks). If you want to quickly test something or want to build some specific targets. You can use the following flags:

```bash
$ cmake .. -DBUILD_TENSOR_TEST=OFF # It Will not build tensor unit tests
$ cmake .. -DBUILD_EXAMPLES=ON # It Will build examples. (By default it will build all but if you disable any target once, you need to explicitly enable it again. We use cache to remember your last runs configurations)
$ cmake .. -DBUILD_BENCHMARKS=OFF # It Will not build benchmarks, You will need to pass ON next time to again enable it.
```

### Build Tensor and Benchmarks
`b2 headers` only collects the header files. This is not sufficient to build Tensor examples or Benchmarks as they need to be linked against Boost.Test Framework and Boost.ProgramOptions. Regardless of whether you use a custom Boost header directory or let cmake find it. You will need installed boost to link against those libraries.

",False,94,https://api.github.com/repos/boostorg/ublas/pulls/94,https://github.com/boostorg/ublas/pull/94,open,160,1,5,5,1,0,0,0,[],2020-07-15 08:43:50+00:00,,0.0,,[],"[{'commit_sha': 'c87e2f9bf0fefdbb4f439a0b082d4093b49ce6b3', 'committer_username': 'coder3101', 'committer_name': 'Ashar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 15, 7, 58, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b19cd5cb1dc2493c741733ec2b70666db8d8f16e', 'committer_username': 'coder3101', 'committer_name': 'Ashar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 15, 7, 58, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a822eaf89fa51d340b658c5021786453fc9d8150', 'committer_username': 'coder3101', 'committer_name': 'Ashar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 15, 7, 58, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '985711e913ac31334e9e27bb3d17646948a1def7', 'committer_username': 'coder3101', 'committer_name': 'Ashar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 15, 7, 58, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e2d9ab059c447a374d7e7e01e8e3504282ef16a7', 'committer_username': 'coder3101', 'committer_name': 'Ashar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 15, 7, 58, 11, tzinfo=datetime.timezone.utc)}]",Ashar,22212259,,User,,21,,0,67
463788300,ci(enhancement): Do not trigger Github Actions for doc or Readme changes,"As pointed out by @jwakely in this comment https://github.com/boostorg/ublas/pull/99#issuecomment-669201622 it is not wise to trigger CI for changes in docs or any other non-code related changes. This commit relaxes the trigger restriction on PR and Push event so that they are only triggered when at least one file changed which does not belong to the below list:

- `Markdown` changed (anything ending with .md)
-  Anything inside `doc` subdirectory.",True,102,https://api.github.com/repos/boostorg/ublas/pulls/102,https://github.com/boostorg/ublas/pull/102,closed,85,21,9,5,4,0,1,0,[{'name': 'enhancement'}],2020-08-06 05:17:44+00:00,2020-08-12 14:41:33+00:00,552229.0,"6 days, 9:23:49",[],"[{'commit_sha': '65b410376a039c8203c5a24f1c7d132ad6a0fc4a', 'committer_username': 'coder3101', 'committer_name': 'Ashar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 15, 7, 58, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f48231ccb84e89ed3dcc8ffdf20f774f6549d52', 'committer_username': 'coder3101', 'committer_name': 'Ashar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 15, 7, 58, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8de01be284ffe168d31afeb26337d248b2bfefa3', 'committer_username': 'coder3101', 'committer_name': 'Ashar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 15, 7, 58, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cba657ca3a38bbca1c7299e17e43cddcd1546b67', 'committer_username': 'coder3101', 'committer_name': 'Ashar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 15, 7, 58, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60be7a0b49112fc52a62222c61a318aa34bb9354', 'committer_username': 'coder3101', 'committer_name': 'Ashar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 15, 7, 58, 11, tzinfo=datetime.timezone.utc)}]",Ashar,22212259,,User,,21,,0,67
462660643,hotfix(ci): Do not run review for outside repo PR,The outside repositories do not have permission to post review comments on ublas repository. It fails to review and CI fails. This issue has been fixed. Now this action is only run if PR is originating from our own repository.,True,98,https://api.github.com/repos/boostorg/ublas/pulls/98,https://github.com/boostorg/ublas/pull/98,closed,1,0,1,1,1,0,0,0,[],2020-08-04 09:57:03+00:00,2020-08-04 20:17:13+00:00,37210.0,10:20:10,[],"[{'commit_sha': 'ba4053fa7934433bd45414e3de5d405de3e1a625', 'committer_username': 'coder3101', 'committer_name': 'Ashar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 15, 7, 58, 11, tzinfo=datetime.timezone.utc)}]",Ashar,22212259,,User,,21,,0,67
465904421,Disable openCL for appveyor:,"openCL tests on Appveyor are failing due to some vcpkg issue. 

As per my mentor @bassoy request, I am removing the openCL tests from the appveyor. The mentioned reason for this removal is:

- We will soon migrate to openMP with new tensor design
- openCL usage is not documented and hence very likely not being used.",False,104,https://api.github.com/repos/boostorg/ublas/pulls/104,https://github.com/boostorg/ublas/pull/104,open,1,19,1,1,1,0,0,0,[],2020-08-11 06:46:33+00:00,,0.0,,[],"[{'commit_sha': 'e068a23605e09abf9726977268d216f256bd9196', 'committer_username': 'coder3101', 'committer_name': 'Ashar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 15, 7, 58, 11, tzinfo=datetime.timezone.utc)}]",Ashar,22212259,,User,,21,,0,67
446178536,Introducing a new and versatile way to create the tensor interface.,"Previously the tensor was constraints to three type of tensors
- Dynamic tensor
- Static tensor
- Fixed rank tensor
which were predefined and were written in stone or has a rigid interface and the user cannot change the storage type or permute the settings.

With the new tensor interface, we can easily new tensor type even custom storage by the user with proper configuration and easily interact with the current tensor environment without any hassle. This makes the new tensor interface very flexible.

There are few downsides right now
- Had to remove static tensor tests because we introduced new constraints to the interface but it will be fixed in the next pull request which will be all about proper static tensor integration.
- For a similar reason had to remove a few tests from the fixed rank tensors and will be fixed with the next pull request.

**How to Use the New Interface**
```cpp
/// creates the engine traits with extents and strides with dynamic property with the static storage
using ctype1 = tensor_engine<extents<>, layout::first_order<>, std::array<float,50>>;

/// creates the engine traits with extents  with dynamic property and strides  with static property with the static storage
using ctype2 = tensor_engine<extents<>, layout::first_order<static_extents<1,2,3,4>>, std::array<float,50>>;

/// creates the engine traits with extents and strides with static property with the dynamic storage
using ctype3 = tensor_engine<layout::first_order<static_extents<1,2,3,4>>, std::vector<float>>;

using ttype1 = tensor_core<ctype1>;
using ttype2 = tensor_core<ctype2>;
using ttype3 = tensor_core<ctype3>;

auto t1 = ttype1{extents<>{1,2,3},1.f};
auto t2 = ttype2{extents<>{1,2,3,4},1.f};
auto t3 = ttype3{1.f};

```

Other than these there are a few minor tweaks to improve the consistency of the code and bug fixes.",True,90,https://api.github.com/repos/boostorg/ublas/pulls/90,https://github.com/boostorg/ublas/pull/90,closed,3178,3711,87,52,22,150,1,2,[{'name': 'enhancement'}],2020-07-08 11:32:04+00:00,2020-12-10 13:28:55+00:00,13399011.0,"155 days, 1:56:51","[{'comment_id': 453219680, 'comment_body': 'local copy `t5` of the variable `dt1` is never modified; consider avoiding the copy [performance-unnecessary-copy-initialization,-warnings-as-errors]\n```cpp\nub::dynamic_tensor<float> t5 = dt1;\n                              ^\n    const                    &\n```\nReported as error by clang-tidy.\n', 'comment_created': datetime.datetime(2020, 7, 11, 18, 6, 27, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 453219681, 'comment_body': 'class `basic_fixed_rank_extents` defines a default destructor, a copy constructor, a copy assignment operator and a move constructor but does not define a move assignment operator [cppcoreguidelines-special-member-functions,-warnings-as-errors]\n```cpp\nclass basic_fixed_rank_extents\n      ^\n```\nReported as error by clang-tidy.\n', 'comment_created': datetime.datetime(2020, 7, 11, 18, 6, 27, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 453219682, 'comment_body': 'move constructors should be marked noexcept [performance-noexcept-move-constructor,-warnings-as-errors]\n```cpp\nconstexpr basic_fixed_rank_extents(basic_fixed_rank_extents && other)\n              ^\n```\nReported as error by clang-tidy.\n', 'comment_created': datetime.datetime(2020, 7, 11, 18, 6, 27, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 453219684, 'comment_body': 'all parameters should be named in a function [readability-named-parameter,-warnings-as-errors]\n```cpp\nbasic_fixed_rank_extents<T,R1> const&,\n                                                 ^\n                                                  /*unused*/\n```\nReported as error by clang-tidy.\n', 'comment_created': datetime.datetime(2020, 7, 11, 18, 6, 27, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 453219686, 'comment_body': 'all parameters should be named in a function [readability-named-parameter,-warnings-as-errors]\n```cpp\n){\n        ^\n         /*unused*/\n```\nReported as error by clang-tidy.\n', 'comment_created': datetime.datetime(2020, 7, 11, 18, 6, 27, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 453219687, 'comment_body': 'move constructors should be marked noexcept [performance-noexcept-move-constructor,-warnings-as-errors]\n```cpp\nconstexpr basic_static_extents(basic_static_extents &&) = default;\n            ^\n                                                           noexcept\n```\nReported as error by clang-tidy.\n', 'comment_created': datetime.datetime(2020, 7, 11, 18, 6, 28, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 453219690, 'comment_body': 'move assignment operators should be marked noexcept [performance-noexcept-move-constructor,-warnings-as-errors]\n```cpp\nconstexpr basic_static_extents& operator=(basic_static_extents &&) = default;\n                                  ^\n                                                                      noexcept\n```\nReported as error by clang-tidy.\n', 'comment_created': datetime.datetime(2020, 7, 11, 18, 6, 28, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 453219692, 'comment_body': 'class `basic_static_strides` defines a copy constructor and a copy assignment operator but does not define a destructor, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions,-warnings-as-errors]\n```cpp\nclass basic_static_strides<basic_static_extents<T,Extents...>, Layout>\n      ^\n```\nReported as error by clang-tidy.\n', 'comment_created': datetime.datetime(2020, 7, 11, 18, 6, 28, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 453219695, 'comment_body': 'class `tensor_core` defines a copy constructor, a copy assignment operator and a move constructor but does not define a destructor or a move assignment operator [cppcoreguidelines-special-member-functions,-warnings-as-errors]\n```cpp\nclass tensor_core:\n      ^\n```\nReported as error by clang-tidy.\n', 'comment_created': datetime.datetime(2020, 7, 11, 18, 6, 28, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 453219697, 'comment_body': 'all parameters should be named in a function [readability-named-parameter,-warnings-as-errors]\n```cpp\nconstexpr tensor_core( extents_type e, storage_resizable_container_tag )\n                                                                           ^\n                                                                            /*unused*/\n```\nReported as error by clang-tidy.\n', 'comment_created': datetime.datetime(2020, 7, 11, 18, 6, 28, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 453219699, 'comment_body': 'all parameters should be named in a function [readability-named-parameter,-warnings-as-errors]\n```cpp\nconstexpr tensor_core( extents_type e, storage_static_container_tag )\n                                                                        ^\n                                                                         /*unused*/\n```\nReported as error by clang-tidy.\n', 'comment_created': datetime.datetime(2020, 7, 11, 18, 6, 28, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 453219700, 'comment_body': 'move constructors should be marked noexcept [performance-noexcept-move-constructor,-warnings-as-errors]\n```cpp\ntensor_core (tensor_core &&v)\n    ^\n```\nReported as error by clang-tidy.\n', 'comment_created': datetime.datetime(2020, 7, 11, 18, 6, 29, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 453222002, 'comment_body': 'added the move constructor.', 'comment_created': datetime.datetime(2020, 7, 11, 18, 32, 41, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 453222055, 'comment_body': 'added the `noexcept` to move constructor.', 'comment_created': datetime.datetime(2020, 7, 11, 18, 33, 23, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 453222170, 'comment_body': ""If I add the name and don't use the name `msvc` will give the error so I added the `[[maybe_unused]]`."", 'comment_created': datetime.datetime(2020, 7, 11, 18, 34, 45, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 453222214, 'comment_body': 'same as https://github.com/boostorg/ublas/pull/90#discussion_r453222170', 'comment_created': datetime.datetime(2020, 7, 11, 18, 35, 7, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 453222278, 'comment_body': 'added all the constructors and the destructor.', 'comment_created': datetime.datetime(2020, 7, 11, 18, 35, 50, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 453222312, 'comment_body': 'same as above.', 'comment_created': datetime.datetime(2020, 7, 11, 18, 36, 10, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 453222348, 'comment_body': 'same as https://github.com/boostorg/ublas/pull/90#discussion_r453222170', 'comment_created': datetime.datetime(2020, 7, 11, 18, 36, 41, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 453222361, 'comment_body': 'same as https://github.com/boostorg/ublas/pull/90#discussion_r453222170', 'comment_created': datetime.datetime(2020, 7, 11, 18, 36, 50, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 453222385, 'comment_body': 'added the `noexcept`.', 'comment_created': datetime.datetime(2020, 7, 11, 18, 37, 8, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 453223329, 'comment_body': 'class `tensor_core` defines a default destructor, a copy constructor, a copy assignment operator and a move constructor but does not define a move assignment operator [cppcoreguidelines-special-member-functions,-warnings-as-errors]\n```cpp\nclass tensor_core:\n      ^\n```\nReported as error by clang-tidy.\n', 'comment_created': datetime.datetime(2020, 7, 11, 18, 49, 11, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 453224259, 'comment_body': 'added the move assignment operator.', 'comment_created': datetime.datetime(2020, 7, 11, 19, 0, 16, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 453224398, 'comment_body': 'added the `noexcept`', 'comment_created': datetime.datetime(2020, 7, 11, 19, 1, 27, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 453224414, 'comment_body': 'added the `noexcept`', 'comment_created': datetime.datetime(2020, 7, 11, 19, 1, 34, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 453225609, 'comment_body': 'move assignment operators should be marked noexcept [performance-noexcept-move-constructor,-warnings-as-errors]\n```cpp\ntensor_core& operator=(tensor_core &&v)\n                 ^\n```\nReported as error by clang-tidy.\n', 'comment_created': datetime.datetime(2020, 7, 11, 19, 15, 16, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 453226906, 'comment_body': 'added the `noexcept`', 'comment_created': datetime.datetime(2020, 7, 11, 19, 31, 32, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 453227877, 'comment_body': 'move constructors should be marked noexcept [performance-noexcept-move-constructor,-warnings-as-errors]\n```cpp\ntensor_expression(tensor_expression&&) = default;\n    ^\n                                            noexcept\n```\nReported as error by clang-tidy.\n', 'comment_created': datetime.datetime(2020, 7, 11, 19, 43, 21, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 453227878, 'comment_body': 'move assignment operators should be marked noexcept [performance-noexcept-move-constructor,-warnings-as-errors]\n```cpp\ntensor_expression& operator=(tensor_expression&&) = default;\n                       ^\n                                                       noexcept\n```\nReported as error by clang-tidy.\n', 'comment_created': datetime.datetime(2020, 7, 11, 19, 43, 21, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 453227879, 'comment_body': 'move assignment operators should be marked noexcept [performance-noexcept-move-constructor,-warnings-as-errors]\n```cpp\nbinary_tensor_expression& operator=(binary_tensor_expression&& l) = default;\n                              ^\n                                                                       noexcept\n```\nReported as error by clang-tidy.\n', 'comment_created': datetime.datetime(2020, 7, 11, 19, 43, 21, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 453227910, 'comment_body': 'done.', 'comment_created': datetime.datetime(2020, 7, 11, 19, 43, 51, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 453227923, 'comment_body': 'done.', 'comment_created': datetime.datetime(2020, 7, 11, 19, 44, 6, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 453228223, 'comment_body': 'done.', 'comment_created': datetime.datetime(2020, 7, 11, 19, 47, 19, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 453230344, 'comment_body': ""the `empty` method should be used to check for emptiness instead of `size` [readability-container-size-empty,-warnings-as-errors]\n```cpp\nif (b.size() == 0)\n            ^~~~~~~~~~~~~\n            b.empty()\ninclude/boost/numeric/ublas/vector.hpp:148:11: note: method 'vector'::empty() defined here\n            bool empty () const {\n                 ^\n```\nReported as error by clang-tidy.\n"", 'comment_created': datetime.datetime(2020, 7, 11, 20, 11, 39, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 453230345, 'comment_body': 'all parameters should be named in a function [readability-named-parameter,-warnings-as-errors]\n```cpp\nconstexpr auto extents_result_tensor_times_vector(basic_static_extents<T,E0,E...>, \n                                                                                         ^\n                                                                                          /*unused*/\n```\nReported as error by clang-tidy.\n', 'comment_created': datetime.datetime(2020, 7, 11, 20, 11, 40, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 453230346, 'comment_body': 'all parameters should be named in a function [readability-named-parameter,-warnings-as-errors]\n```cpp\nconstexpr basic_static_strides(extents_type const&) noexcept{};\n                                                    ^\n                                                     /*unused*/\n```\nReported as error by clang-tidy.\n', 'comment_created': datetime.datetime(2020, 7, 11, 20, 11, 40, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 453230611, 'comment_body': 'done.', 'comment_created': datetime.datetime(2020, 7, 11, 20, 14, 57, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 453230635, 'comment_body': 'done.', 'comment_created': datetime.datetime(2020, 7, 11, 20, 15, 8, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 453230691, 'comment_body': 'done.', 'comment_created': datetime.datetime(2020, 7, 11, 20, 15, 33, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 453254612, 'comment_body': 'You can suppress this warning by:\r\n```cpp\r\n// NOLINTNEXTLINE(performance-unnecessary-copy-initialization)\r\nub::dynamic_tensor<float> tf = dt1;\r\n```\r\n', 'comment_created': datetime.datetime(2020, 7, 12, 1, 42, 40, tzinfo=datetime.timezone.utc), 'commenter': 'coder3101', 'type': 'User'}, {'comment_id': 456929826, 'comment_body': 'Why is this guy deleted?', 'comment_created': datetime.datetime(2020, 7, 19, 16, 46, 27, tzinfo=datetime.timezone.utc), 'commenter': 'bassoy', 'type': 'User'}, {'comment_id': 456930001, 'comment_body': 'Providing `ub::static_extents<1,2,3,4,5>` is redundant. ', 'comment_created': datetime.datetime(2020, 7, 19, 16, 48, 11, tzinfo=datetime.timezone.utc), 'commenter': 'bassoy', 'type': 'User'}, {'comment_id': 456930020, 'comment_body': 'Is this required?', 'comment_created': datetime.datetime(2020, 7, 19, 16, 48, 21, tzinfo=datetime.timezone.utc), 'commenter': 'bassoy', 'type': 'User'}, {'comment_id': 456930127, 'comment_body': 'why do we need `always_false` if we have `std::false_type`', 'comment_created': datetime.datetime(2020, 7, 19, 16, 49, 38, tzinfo=datetime.timezone.utc), 'commenter': 'bassoy', 'type': 'User'}, {'comment_id': 456950808, 'comment_body': ""I would rather specialize `prod` for a specific `tensor_engine` types, e.g. for dynamic extents and dynamically resizable container in this case instead of trying to generate an alternative `result_tensor_t` and `t_engine`. I do not think this is user friendly due to implicit conversion, although the type promotion is nicely defined.\r\n\r\nLet's do this using function specialization and later on using concepts."", 'comment_created': datetime.datetime(2020, 7, 19, 20, 16, 53, tzinfo=datetime.timezone.utc), 'commenter': 'bassoy', 'type': 'User'}, {'comment_id': 456950838, 'comment_body': 'See previous comment', 'comment_created': datetime.datetime(2020, 7, 19, 20, 17, 13, tzinfo=datetime.timezone.utc), 'commenter': 'bassoy', 'type': 'User'}, {'comment_id': 456950988, 'comment_body': 'I like this static assert and the requirement to engine to be `resizable`!', 'comment_created': datetime.datetime(2020, 7, 19, 20, 19, tzinfo=datetime.timezone.utc), 'commenter': 'bassoy', 'type': 'User'}, {'comment_id': 456951061, 'comment_body': 'why do we need to rebind here?', 'comment_created': datetime.datetime(2020, 7, 19, 20, 19, 41, tzinfo=datetime.timezone.utc), 'commenter': 'bassoy', 'type': 'User'}, {'comment_id': 456951109, 'comment_body': 'see previous comments', 'comment_created': datetime.datetime(2020, 7, 19, 20, 20, 6, tzinfo=datetime.timezone.utc), 'commenter': 'bassoy', 'type': 'User'}, {'comment_id': 456951184, 'comment_body': 'see previous comment', 'comment_created': datetime.datetime(2020, 7, 19, 20, 20, 45, tzinfo=datetime.timezone.utc), 'commenter': 'bassoy', 'type': 'User'}, {'comment_id': 456951200, 'comment_body': 'see previous comment', 'comment_created': datetime.datetime(2020, 7, 19, 20, 20, 59, tzinfo=datetime.timezone.utc), 'commenter': 'bassoy', 'type': 'User'}, {'comment_id': 456951228, 'comment_body': 'see previous comment', 'comment_created': datetime.datetime(2020, 7, 19, 20, 21, 10, tzinfo=datetime.timezone.utc), 'commenter': 'bassoy', 'type': 'User'}, {'comment_id': 456951236, 'comment_body': 'see previous comment', 'comment_created': datetime.datetime(2020, 7, 19, 20, 21, 21, tzinfo=datetime.timezone.utc), 'commenter': 'bassoy', 'type': 'User'}, {'comment_id': 456951256, 'comment_body': 'see previous comment', 'comment_created': datetime.datetime(2020, 7, 19, 20, 21, 30, tzinfo=datetime.timezone.utc), 'commenter': 'bassoy', 'type': 'User'}, {'comment_id': 456951405, 'comment_body': 'Why do we need this.', 'comment_created': datetime.datetime(2020, 7, 19, 20, 23, 8, tzinfo=datetime.timezone.utc), 'commenter': 'bassoy', 'type': 'User'}, {'comment_id': 456951616, 'comment_body': ':+1: ', 'comment_created': datetime.datetime(2020, 7, 19, 20, 25, 17, tzinfo=datetime.timezone.utc), 'commenter': 'bassoy', 'type': 'User'}, {'comment_id': 456951706, 'comment_body': 'I would like to have this in a separate `layout.hpp` file. ', 'comment_created': datetime.datetime(2020, 7, 19, 20, 26, 6, tzinfo=datetime.timezone.utc), 'commenter': 'bassoy', 'type': 'User'}, {'comment_id': 456952367, 'comment_body': '`layout` and `extents` are orthogonal concepts where the definition of layout should not depend on the type of extents. \r\nthe implementation does not reflect that. Also, I recommend not to have `strides` struct inside a `layout`. ', 'comment_created': datetime.datetime(2020, 7, 19, 20, 32, 49, tzinfo=datetime.timezone.utc), 'commenter': 'bassoy', 'type': 'User'}, {'comment_id': 456952437, 'comment_body': 'the type of a shape should not depend on an layout type', 'comment_created': datetime.datetime(2020, 7, 19, 20, 33, 44, tzinfo=datetime.timezone.utc), 'commenter': 'bassoy', 'type': 'User'}, {'comment_id': 456952580, 'comment_body': 'should be a free standing function.', 'comment_created': datetime.datetime(2020, 7, 19, 20, 35, 2, tzinfo=datetime.timezone.utc), 'commenter': 'bassoy', 'type': 'User'}, {'comment_id': 457222695, 'comment_body': 'This is due to type aliasing. If I add a construction in `tensor_core` it conflicts with other constructors. I was thinking about how to solve it and try to avoid `std::enable_if`.', 'comment_created': datetime.datetime(2020, 7, 20, 9, 34, 18, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 457223123, 'comment_body': 'Most probably I will solve it by next pull request.', 'comment_created': datetime.datetime(2020, 7, 20, 9, 34, 50, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 457225701, 'comment_body': 'The problem with `std::false_type` is it does not delay the `static_assert`. If I use `std::false_type` `static_assert` will trigger even if the code does not run. On the other hand, if I use a template it will delay the evaluation.', 'comment_created': datetime.datetime(2020, 7, 20, 9, 38, 24, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 457226595, 'comment_body': 'If I overload functions it will force the use of `std::enable_if` which I was trying to avoid.', 'comment_created': datetime.datetime(2020, 7, 20, 9, 39, 42, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 457230403, 'comment_body': ""this was because we don't know if extents will change in size or not and `fixed_rank_extents` is fixed in size which will be fixed in the next pull request when I add support for static prod."", 'comment_created': datetime.datetime(2020, 7, 20, 9, 44, 55, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 457236846, 'comment_body': 'Because storage type can be user-defined and I wanted to have a standard way to create result type in every function without thinking about anything.', 'comment_created': datetime.datetime(2020, 7, 20, 9, 53, 41, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 457237094, 'comment_body': 'same as https://github.com/boostorg/ublas/pull/90#discussion_r457236846', 'comment_created': datetime.datetime(2020, 7, 20, 9, 54, 5, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 457237289, 'comment_body': 'same as https://github.com/boostorg/ublas/pull/90#discussion_r457236846\r\n', 'comment_created': datetime.datetime(2020, 7, 20, 9, 54, 21, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 457237432, 'comment_body': 'same as https://github.com/boostorg/ublas/pull/90#discussion_r457236846', 'comment_created': datetime.datetime(2020, 7, 20, 9, 54, 33, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 457237566, 'comment_body': 'same as https://github.com/boostorg/ublas/pull/90#discussion_r457236846', 'comment_created': datetime.datetime(2020, 7, 20, 9, 54, 46, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 457237628, 'comment_body': 'same as https://github.com/boostorg/ublas/pull/90#discussion_r457236846', 'comment_created': datetime.datetime(2020, 7, 20, 9, 54, 50, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 457237699, 'comment_body': 'same as https://github.com/boostorg/ublas/pull/90#discussion_r457236846', 'comment_created': datetime.datetime(2020, 7, 20, 9, 54, 54, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 457237762, 'comment_body': 'same as https://github.com/boostorg/ublas/pull/90#discussion_r457236846', 'comment_created': datetime.datetime(2020, 7, 20, 9, 54, 58, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 457239214, 'comment_body': 'This is a standard way to get the storage type because the storage may not be `std::array` or `std::vector`.', 'comment_created': datetime.datetime(2020, 7, 20, 9, 56, 59, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 457239520, 'comment_body': 'ok.', 'comment_created': datetime.datetime(2020, 7, 20, 9, 57, 22, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 457241360, 'comment_body': 'If the decouple them then I have to add a new template parameter and construction of strides depends on the layout so they are interdependent on each other. I can separate them if you want.', 'comment_created': datetime.datetime(2020, 7, 20, 10, 0, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 457242154, 'comment_body': 'same as https://github.com/boostorg/ublas/pull/90#discussion_r457241360', 'comment_created': datetime.datetime(2020, 7, 20, 10, 1, 3, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 457243244, 'comment_body': ""This will be a free function in the next pull request because I didn't want to mix this pull request with freeing the function."", 'comment_created': datetime.datetime(2020, 7, 20, 10, 2, 36, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 457325371, 'comment_body': '> \r\n> \r\n> If I overload functions it will force the use of `std::enable_if` which I was trying to avoid.\r\n\r\nGot it. I remember that I was suggesting to try without SFINAE. \r\nHowever, this solution includes too many implications. \r\nWhat would be the down-turn if we use `std::enable_if` if at later stages we switch to concepts?', 'comment_created': datetime.datetime(2020, 7, 20, 12, 10, 56, tzinfo=datetime.timezone.utc), 'commenter': 'bassoy', 'type': 'User'}, {'comment_id': 457326130, 'comment_body': 'I would like to solve it with this pull request as @coder3101 and me would like to use as the lastest development.', 'comment_created': datetime.datetime(2020, 7, 20, 12, 12, tzinfo=datetime.timezone.utc), 'commenter': 'bassoy', 'type': 'User'}, {'comment_id': 457327178, 'comment_body': 'I suppose that this should be solved differently - could you tell me where you use it?', 'comment_created': datetime.datetime(2020, 7, 20, 12, 13, 36, tzinfo=datetime.timezone.utc), 'commenter': 'bassoy', 'type': 'User'}, {'comment_id': 457328690, 'comment_body': 'you have included some sort of type promotion. I would like to postpone the topic of type promotion.', 'comment_created': datetime.datetime(2020, 7, 20, 12, 15, 54, tzinfo=datetime.timezone.utc), 'commenter': 'bassoy', 'type': 'User'}, {'comment_id': 457328765, 'comment_body': 'It was supposed to be used when I push the next pull request.', 'comment_created': datetime.datetime(2020, 7, 20, 12, 16, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 457329134, 'comment_body': 'It remained there when I was removing the static functions.', 'comment_created': datetime.datetime(2020, 7, 20, 12, 16, 32, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 457329491, 'comment_body': 'Why not defining the typical storage_type_traits for container types ? ', 'comment_created': datetime.datetime(2020, 7, 20, 12, 17, 3, tzinfo=datetime.timezone.utc), 'commenter': 'bassoy', 'type': 'User'}, {'comment_id': 457329892, 'comment_body': 'yes - please. but why was this necessary at all?', 'comment_created': datetime.datetime(2020, 7, 20, 12, 17, 41, tzinfo=datetime.timezone.utc), 'commenter': 'bassoy', 'type': 'User'}, {'comment_id': 457330040, 'comment_body': '👍 ', 'comment_created': datetime.datetime(2020, 7, 20, 12, 17, 57, tzinfo=datetime.timezone.utc), 'commenter': 'bassoy', 'type': 'User'}, {'comment_id': 457332428, 'comment_body': 'This will introduce too many variables and `storage_traits` already exists. I can move this to new header `storage_type_traits`.', 'comment_created': datetime.datetime(2020, 7, 20, 12, 21, 27, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 457336119, 'comment_body': 'to provide the construction of tensor with different strides and remove the redundancy to provide the layout once and again when providing the strides because of the interface we discussed.', 'comment_created': datetime.datetime(2020, 7, 20, 12, 26, 52, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 457394366, 'comment_body': ""There is no type promotion. I'm using `rebind_storage_t` to have a standard way to select the correct container and in the case of static it just gets the new static container with modified size and correct `value_type`."", 'comment_created': datetime.datetime(2020, 7, 20, 13, 41, 12, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 457494409, 'comment_body': ""removed it and added a new header file 'layout.hpp' and template argument. Made a few changes to the `type_traits_strides` to adjust with the template argument `StrideType`."", 'comment_created': datetime.datetime(2020, 7, 20, 15, 28, 20, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 457762321, 'comment_body': 'Yes, it will be really hard for me to work on if base continues to change significantly.', 'comment_created': datetime.datetime(2020, 7, 21, 0, 16, 58, tzinfo=datetime.timezone.utc), 'commenter': 'coder3101', 'type': 'User'}, {'comment_id': 457764612, 'comment_body': '> The problem with `std::false_type` is it does not delay the `static_assert`.\r\n\r\nWhy do you want to delay the `static assert`? An idea on how do you plan to use it will be enough.\r\n\r\n> If I use `std::false_type` `static_assert` will trigger even if the code does not run.\r\n\r\nYes, Static assert is compile-time, why not use a runtime `assert` then? Again things will be more clear if you could share the use case.\r\n', 'comment_created': datetime.datetime(2020, 7, 21, 0, 24, 58, tzinfo=datetime.timezone.utc), 'commenter': 'coder3101', 'type': 'User'}, {'comment_id': 457779184, 'comment_body': 'I like this trait, except for its location. Amit did a great job at making sure that all containers run fine. The most useful use case I can come up with is that we can use `CUDA Thrust` Vectors easily ( `host_vector` & `device_vector`). See [this](https://docs.nvidia.com/cuda/thrust/index.html) . If we restrict to standard types, we will again need it someday when adding tensor to work on GPUs.', 'comment_created': datetime.datetime(2020, 7, 21, 1, 18, 17, tzinfo=datetime.timezone.utc), 'commenter': 'coder3101', 'type': 'User'}, {'comment_id': 457783661, 'comment_body': 'I would not use `__layout`. Starting with two underscores is reserved for Implementation. Any problem with `_layout` (Single underscore?)', 'comment_created': datetime.datetime(2020, 7, 21, 1, 33, 43, tzinfo=datetime.timezone.utc), 'commenter': 'coder3101', 'type': 'User'}, {'comment_id': 457784221, 'comment_body': '```suggestion\r\n                ""size of strides must be greater or equal to 2.""\r\n```', 'comment_created': datetime.datetime(2020, 7, 21, 1, 35, 45, tzinfo=datetime.timezone.utc), 'commenter': 'coder3101', 'type': 'User'}, {'comment_id': 457920677, 'comment_body': 'I know but I did not change it because it present already. Even field members should start or end with any kind of underscore for same reason and to follow the convention I used it in the new structs. If @bassoy wants I can change that in all the places. Thanks for pointing it out I was meaning to ask @bassoy about it.\r\n', 'comment_created': datetime.datetime(2020, 7, 21, 8, 19, 11, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 457920863, 'comment_body': 'It must be typo. ', 'comment_created': datetime.datetime(2020, 7, 21, 8, 19, 30, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 457921132, 'comment_body': 'Thanks I will update it soon. ', 'comment_created': datetime.datetime(2020, 7, 21, 8, 19, 55, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 457922299, 'comment_body': ""Don't worry after this it will not change that much. "", 'comment_created': datetime.datetime(2020, 7, 21, 8, 21, 48, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 458004532, 'comment_body': 'Its use was removed right now as I wrote earlier it is a remain of struct or functions which I forgot to remove. Once @bassoy reviews the new change I will remove it. For cases, I can give you some.\r\n- let\'s say you have templated functions or structs as of C++17 we don\'t have concepts which will make the error propagate through the whole instantiation which produces the whole unnecessary error and hard to find the error. So this helps to stop the error because when it hit `static_assert` it will always false stop there and also helps with the better error system.\r\n```cpp\r\n/// Make the user clear about the use of this struct and improves the error message.\r\ntemplate<typename T>\r\nstruct Integer{\r\nstatic_assert(always_false_v<T>,""type does not satisfy the condition"");\r\n}\r\n\r\ntemplate<>\r\nstruct Integer<int>{};\r\n\r\n```\r\n- If we have a very large `constexpr if` it will help to satisfy the DRY principle. It also acts as a barrier which makes sure you never reach there.\r\n```cpp\r\nif consexpr(....){}\r\nelse if consexpr(....){}\r\n....\r\nelse{\r\nstatic_assert(always_false_v<T>,"""");\r\n}\r\n```', 'comment_created': datetime.datetime(2020, 7, 21, 10, 44, 49, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 458007307, 'comment_body': 'The main implication is readability and maintainability.\r\nI can make a separate header and make the specialization of `std::enable_if` which makes it more readable and easier to replace with concepts if you are ok with that.\r\n\r\n```cpp\r\ntemplate<typename T>\r\nusing Extents = std::enable_if_t<is_extents_v<T>>;\r\n\r\ntemplate<typename E, typename = Extents<E>>\r\nvoid fun(...){...}\r\n```\r\nthis is more readable easier to replace with concepts.\r\n\r\n```cpp\r\ntemplate<typename T>\r\nconcept Extents = is_extents_v <T>;\r\n\r\ntemplate< Extents E>\r\nvoid fun(...){...}\r\n```', 'comment_created': datetime.datetime(2020, 7, 21, 10, 50, 42, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 458130024, 'comment_body': 'fixed it.', 'comment_created': datetime.datetime(2020, 7, 21, 14, 14, 31, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 464597106, 'comment_body': 'I am okay with double underscore as it is also used in the gcc standard library implementation. \r\nHowever, you could do static asserts after type declaration in line 58.', 'comment_created': datetime.datetime(2020, 8, 3, 18, 45, 39, tzinfo=datetime.timezone.utc), 'commenter': 'bassoy', 'type': 'User'}, {'comment_id': 464597377, 'comment_body': 'nice!', 'comment_created': datetime.datetime(2020, 8, 3, 18, 46, 11, tzinfo=datetime.timezone.utc), 'commenter': 'bassoy', 'type': 'User'}, {'comment_id': 464602551, 'comment_body': '- Selecting the appropriate container type sounds like type promotion. \r\n- Deriving the size of a static container with a runtime variable contraction mode seems hard for me.\r\n\r\n\r\n', 'comment_created': datetime.datetime(2020, 8, 3, 18, 56, 44, tzinfo=datetime.timezone.utc), 'commenter': 'bassoy', 'type': 'User'}, {'comment_id': 464626346, 'comment_body': 'I would like to postpone `concept` then because I think this requires more discussions and therefore I would like to go with `std::enable_if`. ', 'comment_created': datetime.datetime(2020, 8, 3, 19, 48, 11, tzinfo=datetime.timezone.utc), 'commenter': 'bassoy', 'type': 'User'}, {'comment_id': 464630108, 'comment_body': 'The trait `always_false` is too general and the naming does not provide enough information what is wrong about the type. The information should not be provided with a string.', 'comment_created': datetime.datetime(2020, 8, 3, 19, 56, 39, tzinfo=datetime.timezone.utc), 'commenter': 'bassoy', 'type': 'User'}, {'comment_id': 464631192, 'comment_body': 'I was talking about `rebing_storage`.', 'comment_created': datetime.datetime(2020, 8, 3, 19, 59, 8, tzinfo=datetime.timezone.utc), 'commenter': 'bassoy', 'type': 'User'}, {'comment_id': 464798806, 'comment_body': 'Resolved ', 'comment_created': datetime.datetime(2020, 8, 4, 4, 55, 23, tzinfo=datetime.timezone.utc), 'commenter': 'coder3101', 'type': 'User'}, {'comment_id': 464799476, 'comment_body': ""I don't understand why were these `protected` members in the beginning. C++ ISO defers using protected members."", 'comment_created': datetime.datetime(2020, 8, 4, 4, 58, 3, tzinfo=datetime.timezone.utc), 'commenter': 'coder3101', 'type': 'User'}, {'comment_id': 464805573, 'comment_body': 'Nice, use of fold expressions.', 'comment_created': datetime.datetime(2020, 8, 4, 5, 20, 12, tzinfo=datetime.timezone.utc), 'commenter': 'coder3101', 'type': 'User'}, {'comment_id': 464809275, 'comment_body': 'Performance enhancement. :+1: ', 'comment_created': datetime.datetime(2020, 8, 4, 5, 33, 20, tzinfo=datetime.timezone.utc), 'commenter': 'coder3101', 'type': 'User'}, {'comment_id': 464813044, 'comment_body': 'Should we internally use `""something""` instead of `<something>` for headers? \r\n\r\nThe benefit would be that we can easily determine if a file is ublas header or one of ublas dependencies or standard.\r\n\r\nAlso, since """" includes are searched from current working directory first. Most of the IDE can find headers easily and we can type less long headers.', 'comment_created': datetime.datetime(2020, 8, 4, 5, 45, 53, tzinfo=datetime.timezone.utc), 'commenter': 'coder3101', 'type': 'User'}, {'comment_id': 464815814, 'comment_body': '```suggestion\r\n            throw std::runtime_error(""boost::numeric::ublas::tensor_core(extents_type,array_type): ""\r\n                ""array size mismatch with extents"");\r\n```\r\n\r\nReadability.', 'comment_created': datetime.datetime(2020, 8, 4, 5, 54, 51, tzinfo=datetime.timezone.utc), 'commenter': 'coder3101', 'type': 'User'}, {'comment_id': 464953993, 'comment_body': 'My problem with it is if we try to follow a compiler way of declaring functions, structs, or variables it will in the future collide. So we have to stay away from this kind of practice as they are reserved for the compilers, not for others.', 'comment_created': datetime.datetime(2020, 8, 4, 10, 28, 3, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 464955182, 'comment_body': 'The earlier version of tensor implementation had to use the base class data members to avoid friend class I had to use it.', 'comment_created': datetime.datetime(2020, 8, 4, 10, 30, 34, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 464955987, 'comment_body': ""I did not use it earlier because of `msvc` which was giving the error. Now we have changed the 'msvc' version and they have implemented the fold expression I can use it."", 'comment_created': datetime.datetime(2020, 8, 4, 10, 32, 14, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 464956802, 'comment_body': 'This allows us to use any component of the tensor lib anywhere or makes it reusable.', 'comment_created': datetime.datetime(2020, 8, 4, 10, 33, 53, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 464957552, 'comment_body': ""'clang format' will restructure it. So it's useless to format it."", 'comment_created': datetime.datetime(2020, 8, 4, 10, 35, 24, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 464958414, 'comment_body': 'ok.', 'comment_created': datetime.datetime(2020, 8, 4, 10, 37, 19, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 464958672, 'comment_body': 'I have removed it from lib.', 'comment_created': datetime.datetime(2020, 8, 4, 10, 37, 52, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 464963144, 'comment_body': ""This will be more useful in static prod because it might use static storage which after contraction needs to change in size so how we do it, there comes the use of `rebind_storage` as we don't want any increase in complexity inside the prod function. To be consistent with the static prod I added it to the dynamic prod functions which don't do any kind of promotion just act as a placeholder.\r\n\r\nUse:\r\n- static prod with static storage => rebinds the storage with the new size\r\n- static prod with dynamic storage => does not do anything but returns the same storage. This reduces the complexity inside the prod functions."", 'comment_created': datetime.datetime(2020, 8, 4, 10, 47, 21, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 465430701, 'comment_body': 'Put `tensor_engine` in a separate file. Preferably `tensor/tensor_engine.hpp`.\r\n\r\nThis is so that it can be inherited to create other engines. Like `matrix_engine` or `vector_engine`. ', 'comment_created': datetime.datetime(2020, 8, 5, 2, 11, 26, tzinfo=datetime.timezone.utc), 'commenter': 'coder3101', 'type': 'User'}, {'comment_id': 465679289, 'comment_body': 'ok.', 'comment_created': datetime.datetime(2020, 8, 5, 12, 8, 44, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 471354091, 'comment_body': 'This should not be deleted. Please provide a solution for `fixed_rank_extents` type tensors .\r\nIt should not be a superior solution but the pull request should not decrease the number of features of existed features.', 'comment_created': datetime.datetime(2020, 8, 17, 9, 26, 36, tzinfo=datetime.timezone.utc), 'commenter': 'bassoy', 'type': 'User'}, {'comment_id': 471384007, 'comment_body': 'added the example with a few changes.', 'comment_created': datetime.datetime(2020, 8, 17, 10, 22, 49, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 472419040, 'comment_body': 'Yes, you are right because they could be used for the C++ implementation.', 'comment_created': datetime.datetime(2020, 8, 18, 19, 8, 32, tzinfo=datetime.timezone.utc), 'commenter': 'bassoy', 'type': 'User'}, {'comment_id': 472434430, 'comment_body': 'Let me phrase it differently. With `rebind_storage_t` the resulting storage type depends on the input storage type. In this case, the user of the library needs to look into `type_traits_tensor.hpp` for understanding the output type.  Moreover, if the user wants to only have statically allocated containers, this rule forces him/her to not use the `prod` function or to change the implementation of `rebind_storage_t`.\r\n\r\nTherefore, we should not to have that feature (at least for now) and at most use [tag dispatching](https://www.boost.org/community/generic_programming.html). Again the `prod` function with that signature should only be implemented for containers with dynamic extents and strides.', 'comment_created': datetime.datetime(2020, 8, 18, 19, 37, 9, tzinfo=datetime.timezone.utc), 'commenter': 'bassoy', 'type': 'User'}, {'comment_id': 472877203, 'comment_body': 'Changed it to `rebind_storage_size` for static products with is necessary for it otherwise there is no way to use it with static storage and removed `rebind_storage` which may be confusing instead I used storage traits to rebind in functions for transforming `conj` and `img`.', 'comment_created': datetime.datetime(2020, 8, 19, 9, 3, 28, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 498772911, 'comment_body': ""Doesn't Ubuntu focal already have clang-10 in its repositories?"", 'comment_created': datetime.datetime(2020, 10, 2, 11, 48, 22, tzinfo=datetime.timezone.utc), 'commenter': 'coder3101', 'type': 'User'}, {'comment_id': 498772972, 'comment_body': ""no matching function for call to `make_static_strides` [clang-diagnostic-error]\n```cpp\nusing type = decltype( make_static_strides<Layout>(ExtentsType{}) );\n                           ^\ninclude/boost/numeric/ublas/tensor/static_strides.hpp:170:51: note: in instantiation of template class 'boost::numeric::ublas::detail::strides_helper<boost::numeric::ublas::basic_column_major<unsigned long, long>, boost::numeric::ublas::basic_static_extents<unsigned long, 1, 2, 3, 4, 5> >' requested here\n  inline static constexpr auto strides_helper_v = strides_helper<Layout, ExtentsType>::value;\n                                                  ^\ninclude/boost/numeric/ublas/tensor/static_strides.hpp:301:52: note: in instantiation of variable template specialization 'boost::numeric::ublas::detail::strides_helper_v' requested here\n  static constexpr base_type const m_data{ detail::strides_helper_v<layout_type,extents_type> };\n                                                   ^\ninclude/boost/numeric/ublas/tensor/static_strides.hpp:268:12: note: in instantiation of static data member 'boost::numeric::ublas::basic_static_strides<boost::numeric::ublas::basic_static_extents<unsigned long, 1, 2, 3, 4, 5>, boost::numeric::ublas::basic_column_major<unsigned long, long> >::m_data' requested here\n    return m_data.data();\n           ^\ninclude/boost/numeric/ublas/tensor/tensor_core.hpp:245:47: note: in instantiation of member function 'boost::numeric::ublas::basic_static_strides<boost::numeric::ublas::basic_static_extents<unsigned long, 1, 2, 3, 4, 5>, boost::numeric::ublas::basic_column_major<unsigned long, long> >::data' requested here\n                other.data(), other.strides().data());\n                                              ^\n/home/runner/work/ublas/ublas/examples/tensor/fixed_rank_tensor.cpp:82:41: note: in instantiation of function template specialization 'boost::numeric::ublas::tensor_core<boost::numeric::ublas::tensor_engine<boost::numeric::ublas::basic_fixed_rank_extents<unsigned long, 5>, boost::numeric::ublas::basic_column_major<unsigned long, long>, boost::numeric::ublas::strides<boost::numeric::ublas::basic_fixed_rank_extents<unsigned long, 5> >, std::vector<float, std::allocator<float> > > >::tensor_core<boost::numeric::ublas::tensor_engine<boost::numeric::ublas::basic_static_extents<unsigned long, 1, 2, 3, 4, 5>, boost::numeric::ublas::basic_column_major<unsigned long, long>, boost::numeric::ublas::strides<boost::numeric::ublas::basic_static_extents<unsigned long, 1, 2, 3, 4, 5> >, std::array<float, 120> > >' requested here\n    ub::fixed_rank_tensor<float,5> t4 = st1;\n                                        ^\ninclude/boost/numeric/ublas/tensor/static_strides.hpp:120:18: note: candidate template ignored: could not match 'static_stride_list' against 'basic_static_extents'\n  constexpr auto make_static_strides( [[maybe_unused]] static_stride_list<T, E0, E...> e )\n                 ^\ninclude/boost/numeric/ublas/tensor/static_strides.hpp:153:18: note: candidate template ignored: could not match 'static_stride_list' against 'basic_static_extents'\n  constexpr auto make_static_strides( [[maybe_unused]] static_stride_list<T> e )\n                 ^\n```\nReported as error by clang-tidy.\n"", 'comment_created': datetime.datetime(2020, 10, 2, 11, 48, 31, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 498773923, 'comment_body': 'It was failing with the error and I found a solution over [here](https://github.com/actions/virtual-environments/issues/1536#issuecomment-698537248)', 'comment_created': datetime.datetime(2020, 10, 2, 11, 50, 53, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 498775460, 'comment_body': 'same with the msvc because the newest version of the windows 2019 toolset is 14.27 and clang-6.0 is removed from the image also which I had to edit the script to install it.', 'comment_created': datetime.datetime(2020, 10, 2, 11, 54, 34, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 498775964, 'comment_body': 'I think they updated the image because of which these errors are triggering right now.', 'comment_created': datetime.datetime(2020, 10, 2, 11, 55, 47, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 498777188, 'comment_body': 'Okay, then. It is fine to not depend upon the image vendor. They update it quite regularly (weekly)', 'comment_created': datetime.datetime(2020, 10, 2, 11, 58, 50, tzinfo=datetime.timezone.utc), 'commenter': 'coder3101', 'type': 'User'}, {'comment_id': 498779061, 'comment_body': 'could you fix these errors in the main repo? otherwise, if someone commits it will give unnecessary errors.', 'comment_created': datetime.datetime(2020, 10, 2, 12, 3, 25, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 499137850, 'comment_body': '`functions.hpp` should not depend on `tensor.hpp`', 'comment_created': datetime.datetime(2020, 10, 3, 10, 53, 33, tzinfo=datetime.timezone.utc), 'commenter': 'bassoy', 'type': 'User'}, {'comment_id': 499142558, 'comment_body': 'I would like these `extents_result_*` expressions inside the corresponding `prod` functions', 'comment_created': datetime.datetime(2020, 10, 3, 12, 9, 49, tzinfo=datetime.timezone.utc), 'commenter': 'bassoy', 'type': 'User'}, {'comment_id': 499154037, 'comment_body': 'Fraunhofer IOSB was the initiator of this project, please let us keep it.', 'comment_created': datetime.datetime(2020, 10, 3, 14, 47, 26, tzinfo=datetime.timezone.utc), 'commenter': 'bassoy', 'type': 'User'}, {'comment_id': 499155528, 'comment_body': 'This must-have occurred during refactoring. Therefore, I will revert it back.', 'comment_created': datetime.datetime(2020, 10, 3, 15, 6, 52, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 499156772, 'comment_body': ""I will change it to include `tensor_engine.hpp`, if we don't include it and forward declare it then we won't be able to create the result type because it needs to know how to construct the object. We cannot forward declare a class. There is another way which is including it after defining `tensor_engine` in the same header file or include it after the including `tensor_enging.hpp`. "", 'comment_created': datetime.datetime(2020, 10, 3, 15, 22, 41, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 499163017, 'comment_body': 'Moved inside the `prod` functions using lambda.', 'comment_created': datetime.datetime(2020, 10, 3, 16, 44, 46, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 499164541, 'comment_body': 'You are right my mistake - I confused `functions.hpp` with `multiplication.hpp`. I should have named those files differently.\r\nI would not like to have ordering dependencies. So it is okay like that.', 'comment_created': datetime.datetime(2020, 10, 3, 17, 5, 44, tzinfo=datetime.timezone.utc), 'commenter': 'bassoy', 'type': 'User'}, {'comment_id': 499164880, 'comment_body': 'Are those two required in this file?', 'comment_created': datetime.datetime(2020, 10, 3, 17, 9, 36, tzinfo=datetime.timezone.utc), 'commenter': 'bassoy', 'type': 'User'}, {'comment_id': 499167698, 'comment_body': 'Just a minor comment:\r\n\r\n```cpp\r\nif constexpr (is_static_rank_v<extents_type>) {\r\n  constexpr auto size = std::max(a_extents.size()-1u,2u);  // a_extents.size() should be constexpr\r\n  auto shape = extents<size>(); // we should make e.g. extents<size>(1) or extents<size>{1}\r\n  shape.fill(1);\r\n  return shape;\r\n}\r\nelse{\r\n  auto size = std::max(a_extents.size()-1u,2u);  // a_extents.size() \r\n  auto shape = extents(typename extents_type::base_type(size));\r\n  shape.fill(1u);\r\n  return shape; \r\n}\r\n', 'comment_created': datetime.datetime(2020, 10, 3, 17, 48, 12, tzinfo=datetime.timezone.utc), 'commenter': 'bassoy', 'type': 'User'}, {'comment_id': 499168030, 'comment_body': 'But just leave it like it is. We can do several PRs based on your changes.', 'comment_created': datetime.datetime(2020, 10, 3, 17, 52, 8, tzinfo=datetime.timezone.utc), 'commenter': 'bassoy', 'type': 'User'}, {'comment_id': 499168806, 'comment_body': ""1. The problem with `extents<size>(1)` is that it accepts `std::initializer_list` which will hinder or try to match with it. That's why I added the function `fill`.\r\n\r\n2. I avoided `a_extents.size()` because of msvc's bugs which I faced last time I used it. I don't know if msvc has improved it's `constexpr` capabilities."", 'comment_created': datetime.datetime(2020, 10, 3, 18, 2, 40, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 499169138, 'comment_body': 'nope, the layout does not need to be required by tensor_engine must have been the remains of the refactoring, I will remove it.', 'comment_created': datetime.datetime(2020, 10, 3, 18, 6, 26, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}]","[{'commit_sha': 'f751e7af8624de15bbec7b0d21d52821e8218b0a', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f8c37a88e4533417e6c6faa337f8ad0c3d627560', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f74589ad2e5e1184b5d0d610475974522bbdfc1', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '914fc6930ebb7d5781247f7b800f6813a9c15c1f', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '33efb2c86e9300d581adb307d23402bf9af985ee', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f637d45064bbc12a350b73d859ca67b8a445eed7', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea85ed2d0003c520e162d2c12fea5e7bc8118d3c', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c6ee5b1089402254716f730c41d05d0fdb71cb0a', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '850f8367f012fe13b970a530bc9b8bcd3a09a291', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4951a449527fccc1771702ebabba613f69142ad0', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0879562864258cfc6e7231a343f11bbdc5c52046', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a8038f8849f05590ef8ea260a4932df47e91599', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '634fb0d69efc779c865ed8cc4053f5695daf2c40', 'committer_username': 'coder3101', 'committer_name': 'Ashar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 15, 7, 58, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '29c42e4cc42dda3e35c31affb971891335fa9c11', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d079690f80ab07be9fbee8adaab8472acc746d8', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b9cf3397f48153744bbb1cc84329bea67bb97e96', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a26e0f73ae2672c9a09018a71a57a66abaf5c8e', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b04a5e22a566a698ddd7ac0fcffee0a0bbfd00af', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c5d80943466045d44b65ca17ca13e40dc4a4888f', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08fe599cdc83144a88b38673246b9dbfad30168c', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '976945e93df0bdc7a6807bd2c3049be94da2654e', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc8949a6620757c0903bd88f11a32455b2458acf', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b0c415fcfef4ebe77ea33ee8f127c9b028ad7d46', 'committer_username': 'coder3101', 'committer_name': 'Ashar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 15, 7, 58, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c0b96cb09c93b6969e7aec68eec8f856033098f', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0883ebf59478d3c68c0c306bf382e729c3717b2', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed09afc541875743f29c2eaa4f1ad67a453487cf', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3cd382bbcc91c62dd7947c7b1dee05364109e715', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '026752ec9d257aed4445f3d1d5ac2269bf26651c', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60ec775bc9840944e7fb8ce56358c98dc76c5e44', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a33080e1f4996f882d581c65e1805dd1c48c2dfd', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d2177f3420f69d6a1aaee20aceb9d0854568947', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de0cad668a4ee8373a563bc7d0d484cf436d5570', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b0d1281dc81abc9641f30a6bf4c338023e1c0a4', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb794763e21d341ff5d032fd348582765e89fbb0', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ffc20678c4d4c2be0e6205f953d21b150f5c8686', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '854732c6885a1d498f90631bb27ead758a6e28d0', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84144d765006750482962237867ea02e6dcc054c', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8afd714cb380bf8b1f3a2d22fc89a6bcbcb48e73', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ffcaec65acc4c475437b03593b6b3673b1afb6f', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e3b4188e16d4402c94160ccb3c5df76b7037032', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f663678df35f7745c8a24b97b11758c44a10e224', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9255ef1591690ceb78f9d3f6019d5054a9c7ac6d', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da91a80a1b447e9099f2c6ac0fcd40cfb7bb6091', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d4b1e077ebdaa6dbb657f4000df47c374ee1f6d', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ffd5546510d3cb3d2ca6c83e195a041420f100c', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '80e161ab7192f32683fd8a09513db79f96650535', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e2680d3e753eef78976968db55a151bcd50f89aa', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1af11795c81236b351665cb15c2bbc3c61f8faca', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e8af89a8d784263ed61c4816f5af9d03c1315356', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a1af28038f7af52016b7d175ca8eca73661571c', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c52707e53370e5881949e8ced59f0231f5a8ffbf', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '580bae1dee2da9fd32d073ff851ec5574ce70078', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}]",,29508454,,User,,52,,3,17
446178536,Introducing a new and versatile way to create the tensor interface.,"Previously the tensor was constraints to three type of tensors
- Dynamic tensor
- Static tensor
- Fixed rank tensor
which were predefined and were written in stone or has a rigid interface and the user cannot change the storage type or permute the settings.

With the new tensor interface, we can easily new tensor type even custom storage by the user with proper configuration and easily interact with the current tensor environment without any hassle. This makes the new tensor interface very flexible.

There are few downsides right now
- Had to remove static tensor tests because we introduced new constraints to the interface but it will be fixed in the next pull request which will be all about proper static tensor integration.
- For a similar reason had to remove a few tests from the fixed rank tensors and will be fixed with the next pull request.

**How to Use the New Interface**
```cpp
/// creates the engine traits with extents and strides with dynamic property with the static storage
using ctype1 = tensor_engine<extents<>, layout::first_order<>, std::array<float,50>>;

/// creates the engine traits with extents  with dynamic property and strides  with static property with the static storage
using ctype2 = tensor_engine<extents<>, layout::first_order<static_extents<1,2,3,4>>, std::array<float,50>>;

/// creates the engine traits with extents and strides with static property with the dynamic storage
using ctype3 = tensor_engine<layout::first_order<static_extents<1,2,3,4>>, std::vector<float>>;

using ttype1 = tensor_core<ctype1>;
using ttype2 = tensor_core<ctype2>;
using ttype3 = tensor_core<ctype3>;

auto t1 = ttype1{extents<>{1,2,3},1.f};
auto t2 = ttype2{extents<>{1,2,3,4},1.f};
auto t3 = ttype3{1.f};

```

Other than these there are a few minor tweaks to improve the consistency of the code and bug fixes.",True,90,https://api.github.com/repos/boostorg/ublas/pulls/90,https://github.com/boostorg/ublas/pull/90,closed,3178,3711,87,52,22,150,1,2,[{'name': 'enhancement'}],2020-07-08 11:32:04+00:00,2020-12-10 13:28:55+00:00,13399011.0,"155 days, 1:56:51","[{'comment_id': 453219680, 'comment_body': 'local copy `t5` of the variable `dt1` is never modified; consider avoiding the copy [performance-unnecessary-copy-initialization,-warnings-as-errors]\n```cpp\nub::dynamic_tensor<float> t5 = dt1;\n                              ^\n    const                    &\n```\nReported as error by clang-tidy.\n', 'comment_created': datetime.datetime(2020, 7, 11, 18, 6, 27, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 453219681, 'comment_body': 'class `basic_fixed_rank_extents` defines a default destructor, a copy constructor, a copy assignment operator and a move constructor but does not define a move assignment operator [cppcoreguidelines-special-member-functions,-warnings-as-errors]\n```cpp\nclass basic_fixed_rank_extents\n      ^\n```\nReported as error by clang-tidy.\n', 'comment_created': datetime.datetime(2020, 7, 11, 18, 6, 27, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 453219682, 'comment_body': 'move constructors should be marked noexcept [performance-noexcept-move-constructor,-warnings-as-errors]\n```cpp\nconstexpr basic_fixed_rank_extents(basic_fixed_rank_extents && other)\n              ^\n```\nReported as error by clang-tidy.\n', 'comment_created': datetime.datetime(2020, 7, 11, 18, 6, 27, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 453219684, 'comment_body': 'all parameters should be named in a function [readability-named-parameter,-warnings-as-errors]\n```cpp\nbasic_fixed_rank_extents<T,R1> const&,\n                                                 ^\n                                                  /*unused*/\n```\nReported as error by clang-tidy.\n', 'comment_created': datetime.datetime(2020, 7, 11, 18, 6, 27, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 453219686, 'comment_body': 'all parameters should be named in a function [readability-named-parameter,-warnings-as-errors]\n```cpp\n){\n        ^\n         /*unused*/\n```\nReported as error by clang-tidy.\n', 'comment_created': datetime.datetime(2020, 7, 11, 18, 6, 27, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 453219687, 'comment_body': 'move constructors should be marked noexcept [performance-noexcept-move-constructor,-warnings-as-errors]\n```cpp\nconstexpr basic_static_extents(basic_static_extents &&) = default;\n            ^\n                                                           noexcept\n```\nReported as error by clang-tidy.\n', 'comment_created': datetime.datetime(2020, 7, 11, 18, 6, 28, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 453219690, 'comment_body': 'move assignment operators should be marked noexcept [performance-noexcept-move-constructor,-warnings-as-errors]\n```cpp\nconstexpr basic_static_extents& operator=(basic_static_extents &&) = default;\n                                  ^\n                                                                      noexcept\n```\nReported as error by clang-tidy.\n', 'comment_created': datetime.datetime(2020, 7, 11, 18, 6, 28, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 453219692, 'comment_body': 'class `basic_static_strides` defines a copy constructor and a copy assignment operator but does not define a destructor, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions,-warnings-as-errors]\n```cpp\nclass basic_static_strides<basic_static_extents<T,Extents...>, Layout>\n      ^\n```\nReported as error by clang-tidy.\n', 'comment_created': datetime.datetime(2020, 7, 11, 18, 6, 28, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 453219695, 'comment_body': 'class `tensor_core` defines a copy constructor, a copy assignment operator and a move constructor but does not define a destructor or a move assignment operator [cppcoreguidelines-special-member-functions,-warnings-as-errors]\n```cpp\nclass tensor_core:\n      ^\n```\nReported as error by clang-tidy.\n', 'comment_created': datetime.datetime(2020, 7, 11, 18, 6, 28, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 453219697, 'comment_body': 'all parameters should be named in a function [readability-named-parameter,-warnings-as-errors]\n```cpp\nconstexpr tensor_core( extents_type e, storage_resizable_container_tag )\n                                                                           ^\n                                                                            /*unused*/\n```\nReported as error by clang-tidy.\n', 'comment_created': datetime.datetime(2020, 7, 11, 18, 6, 28, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 453219699, 'comment_body': 'all parameters should be named in a function [readability-named-parameter,-warnings-as-errors]\n```cpp\nconstexpr tensor_core( extents_type e, storage_static_container_tag )\n                                                                        ^\n                                                                         /*unused*/\n```\nReported as error by clang-tidy.\n', 'comment_created': datetime.datetime(2020, 7, 11, 18, 6, 28, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 453219700, 'comment_body': 'move constructors should be marked noexcept [performance-noexcept-move-constructor,-warnings-as-errors]\n```cpp\ntensor_core (tensor_core &&v)\n    ^\n```\nReported as error by clang-tidy.\n', 'comment_created': datetime.datetime(2020, 7, 11, 18, 6, 29, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 453222002, 'comment_body': 'added the move constructor.', 'comment_created': datetime.datetime(2020, 7, 11, 18, 32, 41, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 453222055, 'comment_body': 'added the `noexcept` to move constructor.', 'comment_created': datetime.datetime(2020, 7, 11, 18, 33, 23, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 453222170, 'comment_body': ""If I add the name and don't use the name `msvc` will give the error so I added the `[[maybe_unused]]`."", 'comment_created': datetime.datetime(2020, 7, 11, 18, 34, 45, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 453222214, 'comment_body': 'same as https://github.com/boostorg/ublas/pull/90#discussion_r453222170', 'comment_created': datetime.datetime(2020, 7, 11, 18, 35, 7, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 453222278, 'comment_body': 'added all the constructors and the destructor.', 'comment_created': datetime.datetime(2020, 7, 11, 18, 35, 50, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 453222312, 'comment_body': 'same as above.', 'comment_created': datetime.datetime(2020, 7, 11, 18, 36, 10, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 453222348, 'comment_body': 'same as https://github.com/boostorg/ublas/pull/90#discussion_r453222170', 'comment_created': datetime.datetime(2020, 7, 11, 18, 36, 41, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 453222361, 'comment_body': 'same as https://github.com/boostorg/ublas/pull/90#discussion_r453222170', 'comment_created': datetime.datetime(2020, 7, 11, 18, 36, 50, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 453222385, 'comment_body': 'added the `noexcept`.', 'comment_created': datetime.datetime(2020, 7, 11, 18, 37, 8, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 453223329, 'comment_body': 'class `tensor_core` defines a default destructor, a copy constructor, a copy assignment operator and a move constructor but does not define a move assignment operator [cppcoreguidelines-special-member-functions,-warnings-as-errors]\n```cpp\nclass tensor_core:\n      ^\n```\nReported as error by clang-tidy.\n', 'comment_created': datetime.datetime(2020, 7, 11, 18, 49, 11, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 453224259, 'comment_body': 'added the move assignment operator.', 'comment_created': datetime.datetime(2020, 7, 11, 19, 0, 16, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 453224398, 'comment_body': 'added the `noexcept`', 'comment_created': datetime.datetime(2020, 7, 11, 19, 1, 27, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 453224414, 'comment_body': 'added the `noexcept`', 'comment_created': datetime.datetime(2020, 7, 11, 19, 1, 34, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 453225609, 'comment_body': 'move assignment operators should be marked noexcept [performance-noexcept-move-constructor,-warnings-as-errors]\n```cpp\ntensor_core& operator=(tensor_core &&v)\n                 ^\n```\nReported as error by clang-tidy.\n', 'comment_created': datetime.datetime(2020, 7, 11, 19, 15, 16, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 453226906, 'comment_body': 'added the `noexcept`', 'comment_created': datetime.datetime(2020, 7, 11, 19, 31, 32, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 453227877, 'comment_body': 'move constructors should be marked noexcept [performance-noexcept-move-constructor,-warnings-as-errors]\n```cpp\ntensor_expression(tensor_expression&&) = default;\n    ^\n                                            noexcept\n```\nReported as error by clang-tidy.\n', 'comment_created': datetime.datetime(2020, 7, 11, 19, 43, 21, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 453227878, 'comment_body': 'move assignment operators should be marked noexcept [performance-noexcept-move-constructor,-warnings-as-errors]\n```cpp\ntensor_expression& operator=(tensor_expression&&) = default;\n                       ^\n                                                       noexcept\n```\nReported as error by clang-tidy.\n', 'comment_created': datetime.datetime(2020, 7, 11, 19, 43, 21, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 453227879, 'comment_body': 'move assignment operators should be marked noexcept [performance-noexcept-move-constructor,-warnings-as-errors]\n```cpp\nbinary_tensor_expression& operator=(binary_tensor_expression&& l) = default;\n                              ^\n                                                                       noexcept\n```\nReported as error by clang-tidy.\n', 'comment_created': datetime.datetime(2020, 7, 11, 19, 43, 21, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 453227910, 'comment_body': 'done.', 'comment_created': datetime.datetime(2020, 7, 11, 19, 43, 51, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 453227923, 'comment_body': 'done.', 'comment_created': datetime.datetime(2020, 7, 11, 19, 44, 6, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 453228223, 'comment_body': 'done.', 'comment_created': datetime.datetime(2020, 7, 11, 19, 47, 19, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 453230344, 'comment_body': ""the `empty` method should be used to check for emptiness instead of `size` [readability-container-size-empty,-warnings-as-errors]\n```cpp\nif (b.size() == 0)\n            ^~~~~~~~~~~~~\n            b.empty()\ninclude/boost/numeric/ublas/vector.hpp:148:11: note: method 'vector'::empty() defined here\n            bool empty () const {\n                 ^\n```\nReported as error by clang-tidy.\n"", 'comment_created': datetime.datetime(2020, 7, 11, 20, 11, 39, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 453230345, 'comment_body': 'all parameters should be named in a function [readability-named-parameter,-warnings-as-errors]\n```cpp\nconstexpr auto extents_result_tensor_times_vector(basic_static_extents<T,E0,E...>, \n                                                                                         ^\n                                                                                          /*unused*/\n```\nReported as error by clang-tidy.\n', 'comment_created': datetime.datetime(2020, 7, 11, 20, 11, 40, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 453230346, 'comment_body': 'all parameters should be named in a function [readability-named-parameter,-warnings-as-errors]\n```cpp\nconstexpr basic_static_strides(extents_type const&) noexcept{};\n                                                    ^\n                                                     /*unused*/\n```\nReported as error by clang-tidy.\n', 'comment_created': datetime.datetime(2020, 7, 11, 20, 11, 40, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 453230611, 'comment_body': 'done.', 'comment_created': datetime.datetime(2020, 7, 11, 20, 14, 57, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 453230635, 'comment_body': 'done.', 'comment_created': datetime.datetime(2020, 7, 11, 20, 15, 8, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 453230691, 'comment_body': 'done.', 'comment_created': datetime.datetime(2020, 7, 11, 20, 15, 33, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 453254612, 'comment_body': 'You can suppress this warning by:\r\n```cpp\r\n// NOLINTNEXTLINE(performance-unnecessary-copy-initialization)\r\nub::dynamic_tensor<float> tf = dt1;\r\n```\r\n', 'comment_created': datetime.datetime(2020, 7, 12, 1, 42, 40, tzinfo=datetime.timezone.utc), 'commenter': 'coder3101', 'type': 'User'}, {'comment_id': 456929826, 'comment_body': 'Why is this guy deleted?', 'comment_created': datetime.datetime(2020, 7, 19, 16, 46, 27, tzinfo=datetime.timezone.utc), 'commenter': 'bassoy', 'type': 'User'}, {'comment_id': 456930001, 'comment_body': 'Providing `ub::static_extents<1,2,3,4,5>` is redundant. ', 'comment_created': datetime.datetime(2020, 7, 19, 16, 48, 11, tzinfo=datetime.timezone.utc), 'commenter': 'bassoy', 'type': 'User'}, {'comment_id': 456930020, 'comment_body': 'Is this required?', 'comment_created': datetime.datetime(2020, 7, 19, 16, 48, 21, tzinfo=datetime.timezone.utc), 'commenter': 'bassoy', 'type': 'User'}, {'comment_id': 456930127, 'comment_body': 'why do we need `always_false` if we have `std::false_type`', 'comment_created': datetime.datetime(2020, 7, 19, 16, 49, 38, tzinfo=datetime.timezone.utc), 'commenter': 'bassoy', 'type': 'User'}, {'comment_id': 456950808, 'comment_body': ""I would rather specialize `prod` for a specific `tensor_engine` types, e.g. for dynamic extents and dynamically resizable container in this case instead of trying to generate an alternative `result_tensor_t` and `t_engine`. I do not think this is user friendly due to implicit conversion, although the type promotion is nicely defined.\r\n\r\nLet's do this using function specialization and later on using concepts."", 'comment_created': datetime.datetime(2020, 7, 19, 20, 16, 53, tzinfo=datetime.timezone.utc), 'commenter': 'bassoy', 'type': 'User'}, {'comment_id': 456950838, 'comment_body': 'See previous comment', 'comment_created': datetime.datetime(2020, 7, 19, 20, 17, 13, tzinfo=datetime.timezone.utc), 'commenter': 'bassoy', 'type': 'User'}, {'comment_id': 456950988, 'comment_body': 'I like this static assert and the requirement to engine to be `resizable`!', 'comment_created': datetime.datetime(2020, 7, 19, 20, 19, tzinfo=datetime.timezone.utc), 'commenter': 'bassoy', 'type': 'User'}, {'comment_id': 456951061, 'comment_body': 'why do we need to rebind here?', 'comment_created': datetime.datetime(2020, 7, 19, 20, 19, 41, tzinfo=datetime.timezone.utc), 'commenter': 'bassoy', 'type': 'User'}, {'comment_id': 456951109, 'comment_body': 'see previous comments', 'comment_created': datetime.datetime(2020, 7, 19, 20, 20, 6, tzinfo=datetime.timezone.utc), 'commenter': 'bassoy', 'type': 'User'}, {'comment_id': 456951184, 'comment_body': 'see previous comment', 'comment_created': datetime.datetime(2020, 7, 19, 20, 20, 45, tzinfo=datetime.timezone.utc), 'commenter': 'bassoy', 'type': 'User'}, {'comment_id': 456951200, 'comment_body': 'see previous comment', 'comment_created': datetime.datetime(2020, 7, 19, 20, 20, 59, tzinfo=datetime.timezone.utc), 'commenter': 'bassoy', 'type': 'User'}, {'comment_id': 456951228, 'comment_body': 'see previous comment', 'comment_created': datetime.datetime(2020, 7, 19, 20, 21, 10, tzinfo=datetime.timezone.utc), 'commenter': 'bassoy', 'type': 'User'}, {'comment_id': 456951236, 'comment_body': 'see previous comment', 'comment_created': datetime.datetime(2020, 7, 19, 20, 21, 21, tzinfo=datetime.timezone.utc), 'commenter': 'bassoy', 'type': 'User'}, {'comment_id': 456951256, 'comment_body': 'see previous comment', 'comment_created': datetime.datetime(2020, 7, 19, 20, 21, 30, tzinfo=datetime.timezone.utc), 'commenter': 'bassoy', 'type': 'User'}, {'comment_id': 456951405, 'comment_body': 'Why do we need this.', 'comment_created': datetime.datetime(2020, 7, 19, 20, 23, 8, tzinfo=datetime.timezone.utc), 'commenter': 'bassoy', 'type': 'User'}, {'comment_id': 456951616, 'comment_body': ':+1: ', 'comment_created': datetime.datetime(2020, 7, 19, 20, 25, 17, tzinfo=datetime.timezone.utc), 'commenter': 'bassoy', 'type': 'User'}, {'comment_id': 456951706, 'comment_body': 'I would like to have this in a separate `layout.hpp` file. ', 'comment_created': datetime.datetime(2020, 7, 19, 20, 26, 6, tzinfo=datetime.timezone.utc), 'commenter': 'bassoy', 'type': 'User'}, {'comment_id': 456952367, 'comment_body': '`layout` and `extents` are orthogonal concepts where the definition of layout should not depend on the type of extents. \r\nthe implementation does not reflect that. Also, I recommend not to have `strides` struct inside a `layout`. ', 'comment_created': datetime.datetime(2020, 7, 19, 20, 32, 49, tzinfo=datetime.timezone.utc), 'commenter': 'bassoy', 'type': 'User'}, {'comment_id': 456952437, 'comment_body': 'the type of a shape should not depend on an layout type', 'comment_created': datetime.datetime(2020, 7, 19, 20, 33, 44, tzinfo=datetime.timezone.utc), 'commenter': 'bassoy', 'type': 'User'}, {'comment_id': 456952580, 'comment_body': 'should be a free standing function.', 'comment_created': datetime.datetime(2020, 7, 19, 20, 35, 2, tzinfo=datetime.timezone.utc), 'commenter': 'bassoy', 'type': 'User'}, {'comment_id': 457222695, 'comment_body': 'This is due to type aliasing. If I add a construction in `tensor_core` it conflicts with other constructors. I was thinking about how to solve it and try to avoid `std::enable_if`.', 'comment_created': datetime.datetime(2020, 7, 20, 9, 34, 18, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 457223123, 'comment_body': 'Most probably I will solve it by next pull request.', 'comment_created': datetime.datetime(2020, 7, 20, 9, 34, 50, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 457225701, 'comment_body': 'The problem with `std::false_type` is it does not delay the `static_assert`. If I use `std::false_type` `static_assert` will trigger even if the code does not run. On the other hand, if I use a template it will delay the evaluation.', 'comment_created': datetime.datetime(2020, 7, 20, 9, 38, 24, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 457226595, 'comment_body': 'If I overload functions it will force the use of `std::enable_if` which I was trying to avoid.', 'comment_created': datetime.datetime(2020, 7, 20, 9, 39, 42, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 457230403, 'comment_body': ""this was because we don't know if extents will change in size or not and `fixed_rank_extents` is fixed in size which will be fixed in the next pull request when I add support for static prod."", 'comment_created': datetime.datetime(2020, 7, 20, 9, 44, 55, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 457236846, 'comment_body': 'Because storage type can be user-defined and I wanted to have a standard way to create result type in every function without thinking about anything.', 'comment_created': datetime.datetime(2020, 7, 20, 9, 53, 41, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 457237094, 'comment_body': 'same as https://github.com/boostorg/ublas/pull/90#discussion_r457236846', 'comment_created': datetime.datetime(2020, 7, 20, 9, 54, 5, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 457237289, 'comment_body': 'same as https://github.com/boostorg/ublas/pull/90#discussion_r457236846\r\n', 'comment_created': datetime.datetime(2020, 7, 20, 9, 54, 21, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 457237432, 'comment_body': 'same as https://github.com/boostorg/ublas/pull/90#discussion_r457236846', 'comment_created': datetime.datetime(2020, 7, 20, 9, 54, 33, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 457237566, 'comment_body': 'same as https://github.com/boostorg/ublas/pull/90#discussion_r457236846', 'comment_created': datetime.datetime(2020, 7, 20, 9, 54, 46, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 457237628, 'comment_body': 'same as https://github.com/boostorg/ublas/pull/90#discussion_r457236846', 'comment_created': datetime.datetime(2020, 7, 20, 9, 54, 50, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 457237699, 'comment_body': 'same as https://github.com/boostorg/ublas/pull/90#discussion_r457236846', 'comment_created': datetime.datetime(2020, 7, 20, 9, 54, 54, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 457237762, 'comment_body': 'same as https://github.com/boostorg/ublas/pull/90#discussion_r457236846', 'comment_created': datetime.datetime(2020, 7, 20, 9, 54, 58, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 457239214, 'comment_body': 'This is a standard way to get the storage type because the storage may not be `std::array` or `std::vector`.', 'comment_created': datetime.datetime(2020, 7, 20, 9, 56, 59, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 457239520, 'comment_body': 'ok.', 'comment_created': datetime.datetime(2020, 7, 20, 9, 57, 22, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 457241360, 'comment_body': 'If the decouple them then I have to add a new template parameter and construction of strides depends on the layout so they are interdependent on each other. I can separate them if you want.', 'comment_created': datetime.datetime(2020, 7, 20, 10, 0, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 457242154, 'comment_body': 'same as https://github.com/boostorg/ublas/pull/90#discussion_r457241360', 'comment_created': datetime.datetime(2020, 7, 20, 10, 1, 3, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 457243244, 'comment_body': ""This will be a free function in the next pull request because I didn't want to mix this pull request with freeing the function."", 'comment_created': datetime.datetime(2020, 7, 20, 10, 2, 36, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 457325371, 'comment_body': '> \r\n> \r\n> If I overload functions it will force the use of `std::enable_if` which I was trying to avoid.\r\n\r\nGot it. I remember that I was suggesting to try without SFINAE. \r\nHowever, this solution includes too many implications. \r\nWhat would be the down-turn if we use `std::enable_if` if at later stages we switch to concepts?', 'comment_created': datetime.datetime(2020, 7, 20, 12, 10, 56, tzinfo=datetime.timezone.utc), 'commenter': 'bassoy', 'type': 'User'}, {'comment_id': 457326130, 'comment_body': 'I would like to solve it with this pull request as @coder3101 and me would like to use as the lastest development.', 'comment_created': datetime.datetime(2020, 7, 20, 12, 12, tzinfo=datetime.timezone.utc), 'commenter': 'bassoy', 'type': 'User'}, {'comment_id': 457327178, 'comment_body': 'I suppose that this should be solved differently - could you tell me where you use it?', 'comment_created': datetime.datetime(2020, 7, 20, 12, 13, 36, tzinfo=datetime.timezone.utc), 'commenter': 'bassoy', 'type': 'User'}, {'comment_id': 457328690, 'comment_body': 'you have included some sort of type promotion. I would like to postpone the topic of type promotion.', 'comment_created': datetime.datetime(2020, 7, 20, 12, 15, 54, tzinfo=datetime.timezone.utc), 'commenter': 'bassoy', 'type': 'User'}, {'comment_id': 457328765, 'comment_body': 'It was supposed to be used when I push the next pull request.', 'comment_created': datetime.datetime(2020, 7, 20, 12, 16, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 457329134, 'comment_body': 'It remained there when I was removing the static functions.', 'comment_created': datetime.datetime(2020, 7, 20, 12, 16, 32, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 457329491, 'comment_body': 'Why not defining the typical storage_type_traits for container types ? ', 'comment_created': datetime.datetime(2020, 7, 20, 12, 17, 3, tzinfo=datetime.timezone.utc), 'commenter': 'bassoy', 'type': 'User'}, {'comment_id': 457329892, 'comment_body': 'yes - please. but why was this necessary at all?', 'comment_created': datetime.datetime(2020, 7, 20, 12, 17, 41, tzinfo=datetime.timezone.utc), 'commenter': 'bassoy', 'type': 'User'}, {'comment_id': 457330040, 'comment_body': '👍 ', 'comment_created': datetime.datetime(2020, 7, 20, 12, 17, 57, tzinfo=datetime.timezone.utc), 'commenter': 'bassoy', 'type': 'User'}, {'comment_id': 457332428, 'comment_body': 'This will introduce too many variables and `storage_traits` already exists. I can move this to new header `storage_type_traits`.', 'comment_created': datetime.datetime(2020, 7, 20, 12, 21, 27, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 457336119, 'comment_body': 'to provide the construction of tensor with different strides and remove the redundancy to provide the layout once and again when providing the strides because of the interface we discussed.', 'comment_created': datetime.datetime(2020, 7, 20, 12, 26, 52, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 457394366, 'comment_body': ""There is no type promotion. I'm using `rebind_storage_t` to have a standard way to select the correct container and in the case of static it just gets the new static container with modified size and correct `value_type`."", 'comment_created': datetime.datetime(2020, 7, 20, 13, 41, 12, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 457494409, 'comment_body': ""removed it and added a new header file 'layout.hpp' and template argument. Made a few changes to the `type_traits_strides` to adjust with the template argument `StrideType`."", 'comment_created': datetime.datetime(2020, 7, 20, 15, 28, 20, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 457762321, 'comment_body': 'Yes, it will be really hard for me to work on if base continues to change significantly.', 'comment_created': datetime.datetime(2020, 7, 21, 0, 16, 58, tzinfo=datetime.timezone.utc), 'commenter': 'coder3101', 'type': 'User'}, {'comment_id': 457764612, 'comment_body': '> The problem with `std::false_type` is it does not delay the `static_assert`.\r\n\r\nWhy do you want to delay the `static assert`? An idea on how do you plan to use it will be enough.\r\n\r\n> If I use `std::false_type` `static_assert` will trigger even if the code does not run.\r\n\r\nYes, Static assert is compile-time, why not use a runtime `assert` then? Again things will be more clear if you could share the use case.\r\n', 'comment_created': datetime.datetime(2020, 7, 21, 0, 24, 58, tzinfo=datetime.timezone.utc), 'commenter': 'coder3101', 'type': 'User'}, {'comment_id': 457779184, 'comment_body': 'I like this trait, except for its location. Amit did a great job at making sure that all containers run fine. The most useful use case I can come up with is that we can use `CUDA Thrust` Vectors easily ( `host_vector` & `device_vector`). See [this](https://docs.nvidia.com/cuda/thrust/index.html) . If we restrict to standard types, we will again need it someday when adding tensor to work on GPUs.', 'comment_created': datetime.datetime(2020, 7, 21, 1, 18, 17, tzinfo=datetime.timezone.utc), 'commenter': 'coder3101', 'type': 'User'}, {'comment_id': 457783661, 'comment_body': 'I would not use `__layout`. Starting with two underscores is reserved for Implementation. Any problem with `_layout` (Single underscore?)', 'comment_created': datetime.datetime(2020, 7, 21, 1, 33, 43, tzinfo=datetime.timezone.utc), 'commenter': 'coder3101', 'type': 'User'}, {'comment_id': 457784221, 'comment_body': '```suggestion\r\n                ""size of strides must be greater or equal to 2.""\r\n```', 'comment_created': datetime.datetime(2020, 7, 21, 1, 35, 45, tzinfo=datetime.timezone.utc), 'commenter': 'coder3101', 'type': 'User'}, {'comment_id': 457920677, 'comment_body': 'I know but I did not change it because it present already. Even field members should start or end with any kind of underscore for same reason and to follow the convention I used it in the new structs. If @bassoy wants I can change that in all the places. Thanks for pointing it out I was meaning to ask @bassoy about it.\r\n', 'comment_created': datetime.datetime(2020, 7, 21, 8, 19, 11, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 457920863, 'comment_body': 'It must be typo. ', 'comment_created': datetime.datetime(2020, 7, 21, 8, 19, 30, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 457921132, 'comment_body': 'Thanks I will update it soon. ', 'comment_created': datetime.datetime(2020, 7, 21, 8, 19, 55, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 457922299, 'comment_body': ""Don't worry after this it will not change that much. "", 'comment_created': datetime.datetime(2020, 7, 21, 8, 21, 48, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 458004532, 'comment_body': 'Its use was removed right now as I wrote earlier it is a remain of struct or functions which I forgot to remove. Once @bassoy reviews the new change I will remove it. For cases, I can give you some.\r\n- let\'s say you have templated functions or structs as of C++17 we don\'t have concepts which will make the error propagate through the whole instantiation which produces the whole unnecessary error and hard to find the error. So this helps to stop the error because when it hit `static_assert` it will always false stop there and also helps with the better error system.\r\n```cpp\r\n/// Make the user clear about the use of this struct and improves the error message.\r\ntemplate<typename T>\r\nstruct Integer{\r\nstatic_assert(always_false_v<T>,""type does not satisfy the condition"");\r\n}\r\n\r\ntemplate<>\r\nstruct Integer<int>{};\r\n\r\n```\r\n- If we have a very large `constexpr if` it will help to satisfy the DRY principle. It also acts as a barrier which makes sure you never reach there.\r\n```cpp\r\nif consexpr(....){}\r\nelse if consexpr(....){}\r\n....\r\nelse{\r\nstatic_assert(always_false_v<T>,"""");\r\n}\r\n```', 'comment_created': datetime.datetime(2020, 7, 21, 10, 44, 49, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 458007307, 'comment_body': 'The main implication is readability and maintainability.\r\nI can make a separate header and make the specialization of `std::enable_if` which makes it more readable and easier to replace with concepts if you are ok with that.\r\n\r\n```cpp\r\ntemplate<typename T>\r\nusing Extents = std::enable_if_t<is_extents_v<T>>;\r\n\r\ntemplate<typename E, typename = Extents<E>>\r\nvoid fun(...){...}\r\n```\r\nthis is more readable easier to replace with concepts.\r\n\r\n```cpp\r\ntemplate<typename T>\r\nconcept Extents = is_extents_v <T>;\r\n\r\ntemplate< Extents E>\r\nvoid fun(...){...}\r\n```', 'comment_created': datetime.datetime(2020, 7, 21, 10, 50, 42, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 458130024, 'comment_body': 'fixed it.', 'comment_created': datetime.datetime(2020, 7, 21, 14, 14, 31, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 464597106, 'comment_body': 'I am okay with double underscore as it is also used in the gcc standard library implementation. \r\nHowever, you could do static asserts after type declaration in line 58.', 'comment_created': datetime.datetime(2020, 8, 3, 18, 45, 39, tzinfo=datetime.timezone.utc), 'commenter': 'bassoy', 'type': 'User'}, {'comment_id': 464597377, 'comment_body': 'nice!', 'comment_created': datetime.datetime(2020, 8, 3, 18, 46, 11, tzinfo=datetime.timezone.utc), 'commenter': 'bassoy', 'type': 'User'}, {'comment_id': 464602551, 'comment_body': '- Selecting the appropriate container type sounds like type promotion. \r\n- Deriving the size of a static container with a runtime variable contraction mode seems hard for me.\r\n\r\n\r\n', 'comment_created': datetime.datetime(2020, 8, 3, 18, 56, 44, tzinfo=datetime.timezone.utc), 'commenter': 'bassoy', 'type': 'User'}, {'comment_id': 464626346, 'comment_body': 'I would like to postpone `concept` then because I think this requires more discussions and therefore I would like to go with `std::enable_if`. ', 'comment_created': datetime.datetime(2020, 8, 3, 19, 48, 11, tzinfo=datetime.timezone.utc), 'commenter': 'bassoy', 'type': 'User'}, {'comment_id': 464630108, 'comment_body': 'The trait `always_false` is too general and the naming does not provide enough information what is wrong about the type. The information should not be provided with a string.', 'comment_created': datetime.datetime(2020, 8, 3, 19, 56, 39, tzinfo=datetime.timezone.utc), 'commenter': 'bassoy', 'type': 'User'}, {'comment_id': 464631192, 'comment_body': 'I was talking about `rebing_storage`.', 'comment_created': datetime.datetime(2020, 8, 3, 19, 59, 8, tzinfo=datetime.timezone.utc), 'commenter': 'bassoy', 'type': 'User'}, {'comment_id': 464798806, 'comment_body': 'Resolved ', 'comment_created': datetime.datetime(2020, 8, 4, 4, 55, 23, tzinfo=datetime.timezone.utc), 'commenter': 'coder3101', 'type': 'User'}, {'comment_id': 464799476, 'comment_body': ""I don't understand why were these `protected` members in the beginning. C++ ISO defers using protected members."", 'comment_created': datetime.datetime(2020, 8, 4, 4, 58, 3, tzinfo=datetime.timezone.utc), 'commenter': 'coder3101', 'type': 'User'}, {'comment_id': 464805573, 'comment_body': 'Nice, use of fold expressions.', 'comment_created': datetime.datetime(2020, 8, 4, 5, 20, 12, tzinfo=datetime.timezone.utc), 'commenter': 'coder3101', 'type': 'User'}, {'comment_id': 464809275, 'comment_body': 'Performance enhancement. :+1: ', 'comment_created': datetime.datetime(2020, 8, 4, 5, 33, 20, tzinfo=datetime.timezone.utc), 'commenter': 'coder3101', 'type': 'User'}, {'comment_id': 464813044, 'comment_body': 'Should we internally use `""something""` instead of `<something>` for headers? \r\n\r\nThe benefit would be that we can easily determine if a file is ublas header or one of ublas dependencies or standard.\r\n\r\nAlso, since """" includes are searched from current working directory first. Most of the IDE can find headers easily and we can type less long headers.', 'comment_created': datetime.datetime(2020, 8, 4, 5, 45, 53, tzinfo=datetime.timezone.utc), 'commenter': 'coder3101', 'type': 'User'}, {'comment_id': 464815814, 'comment_body': '```suggestion\r\n            throw std::runtime_error(""boost::numeric::ublas::tensor_core(extents_type,array_type): ""\r\n                ""array size mismatch with extents"");\r\n```\r\n\r\nReadability.', 'comment_created': datetime.datetime(2020, 8, 4, 5, 54, 51, tzinfo=datetime.timezone.utc), 'commenter': 'coder3101', 'type': 'User'}, {'comment_id': 464953993, 'comment_body': 'My problem with it is if we try to follow a compiler way of declaring functions, structs, or variables it will in the future collide. So we have to stay away from this kind of practice as they are reserved for the compilers, not for others.', 'comment_created': datetime.datetime(2020, 8, 4, 10, 28, 3, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 464955182, 'comment_body': 'The earlier version of tensor implementation had to use the base class data members to avoid friend class I had to use it.', 'comment_created': datetime.datetime(2020, 8, 4, 10, 30, 34, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 464955987, 'comment_body': ""I did not use it earlier because of `msvc` which was giving the error. Now we have changed the 'msvc' version and they have implemented the fold expression I can use it."", 'comment_created': datetime.datetime(2020, 8, 4, 10, 32, 14, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 464956802, 'comment_body': 'This allows us to use any component of the tensor lib anywhere or makes it reusable.', 'comment_created': datetime.datetime(2020, 8, 4, 10, 33, 53, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 464957552, 'comment_body': ""'clang format' will restructure it. So it's useless to format it."", 'comment_created': datetime.datetime(2020, 8, 4, 10, 35, 24, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 464958414, 'comment_body': 'ok.', 'comment_created': datetime.datetime(2020, 8, 4, 10, 37, 19, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 464958672, 'comment_body': 'I have removed it from lib.', 'comment_created': datetime.datetime(2020, 8, 4, 10, 37, 52, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 464963144, 'comment_body': ""This will be more useful in static prod because it might use static storage which after contraction needs to change in size so how we do it, there comes the use of `rebind_storage` as we don't want any increase in complexity inside the prod function. To be consistent with the static prod I added it to the dynamic prod functions which don't do any kind of promotion just act as a placeholder.\r\n\r\nUse:\r\n- static prod with static storage => rebinds the storage with the new size\r\n- static prod with dynamic storage => does not do anything but returns the same storage. This reduces the complexity inside the prod functions."", 'comment_created': datetime.datetime(2020, 8, 4, 10, 47, 21, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 465430701, 'comment_body': 'Put `tensor_engine` in a separate file. Preferably `tensor/tensor_engine.hpp`.\r\n\r\nThis is so that it can be inherited to create other engines. Like `matrix_engine` or `vector_engine`. ', 'comment_created': datetime.datetime(2020, 8, 5, 2, 11, 26, tzinfo=datetime.timezone.utc), 'commenter': 'coder3101', 'type': 'User'}, {'comment_id': 465679289, 'comment_body': 'ok.', 'comment_created': datetime.datetime(2020, 8, 5, 12, 8, 44, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 471354091, 'comment_body': 'This should not be deleted. Please provide a solution for `fixed_rank_extents` type tensors .\r\nIt should not be a superior solution but the pull request should not decrease the number of features of existed features.', 'comment_created': datetime.datetime(2020, 8, 17, 9, 26, 36, tzinfo=datetime.timezone.utc), 'commenter': 'bassoy', 'type': 'User'}, {'comment_id': 471384007, 'comment_body': 'added the example with a few changes.', 'comment_created': datetime.datetime(2020, 8, 17, 10, 22, 49, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 472419040, 'comment_body': 'Yes, you are right because they could be used for the C++ implementation.', 'comment_created': datetime.datetime(2020, 8, 18, 19, 8, 32, tzinfo=datetime.timezone.utc), 'commenter': 'bassoy', 'type': 'User'}, {'comment_id': 472434430, 'comment_body': 'Let me phrase it differently. With `rebind_storage_t` the resulting storage type depends on the input storage type. In this case, the user of the library needs to look into `type_traits_tensor.hpp` for understanding the output type.  Moreover, if the user wants to only have statically allocated containers, this rule forces him/her to not use the `prod` function or to change the implementation of `rebind_storage_t`.\r\n\r\nTherefore, we should not to have that feature (at least for now) and at most use [tag dispatching](https://www.boost.org/community/generic_programming.html). Again the `prod` function with that signature should only be implemented for containers with dynamic extents and strides.', 'comment_created': datetime.datetime(2020, 8, 18, 19, 37, 9, tzinfo=datetime.timezone.utc), 'commenter': 'bassoy', 'type': 'User'}, {'comment_id': 472877203, 'comment_body': 'Changed it to `rebind_storage_size` for static products with is necessary for it otherwise there is no way to use it with static storage and removed `rebind_storage` which may be confusing instead I used storage traits to rebind in functions for transforming `conj` and `img`.', 'comment_created': datetime.datetime(2020, 8, 19, 9, 3, 28, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 498772911, 'comment_body': ""Doesn't Ubuntu focal already have clang-10 in its repositories?"", 'comment_created': datetime.datetime(2020, 10, 2, 11, 48, 22, tzinfo=datetime.timezone.utc), 'commenter': 'coder3101', 'type': 'User'}, {'comment_id': 498772972, 'comment_body': ""no matching function for call to `make_static_strides` [clang-diagnostic-error]\n```cpp\nusing type = decltype( make_static_strides<Layout>(ExtentsType{}) );\n                           ^\ninclude/boost/numeric/ublas/tensor/static_strides.hpp:170:51: note: in instantiation of template class 'boost::numeric::ublas::detail::strides_helper<boost::numeric::ublas::basic_column_major<unsigned long, long>, boost::numeric::ublas::basic_static_extents<unsigned long, 1, 2, 3, 4, 5> >' requested here\n  inline static constexpr auto strides_helper_v = strides_helper<Layout, ExtentsType>::value;\n                                                  ^\ninclude/boost/numeric/ublas/tensor/static_strides.hpp:301:52: note: in instantiation of variable template specialization 'boost::numeric::ublas::detail::strides_helper_v' requested here\n  static constexpr base_type const m_data{ detail::strides_helper_v<layout_type,extents_type> };\n                                                   ^\ninclude/boost/numeric/ublas/tensor/static_strides.hpp:268:12: note: in instantiation of static data member 'boost::numeric::ublas::basic_static_strides<boost::numeric::ublas::basic_static_extents<unsigned long, 1, 2, 3, 4, 5>, boost::numeric::ublas::basic_column_major<unsigned long, long> >::m_data' requested here\n    return m_data.data();\n           ^\ninclude/boost/numeric/ublas/tensor/tensor_core.hpp:245:47: note: in instantiation of member function 'boost::numeric::ublas::basic_static_strides<boost::numeric::ublas::basic_static_extents<unsigned long, 1, 2, 3, 4, 5>, boost::numeric::ublas::basic_column_major<unsigned long, long> >::data' requested here\n                other.data(), other.strides().data());\n                                              ^\n/home/runner/work/ublas/ublas/examples/tensor/fixed_rank_tensor.cpp:82:41: note: in instantiation of function template specialization 'boost::numeric::ublas::tensor_core<boost::numeric::ublas::tensor_engine<boost::numeric::ublas::basic_fixed_rank_extents<unsigned long, 5>, boost::numeric::ublas::basic_column_major<unsigned long, long>, boost::numeric::ublas::strides<boost::numeric::ublas::basic_fixed_rank_extents<unsigned long, 5> >, std::vector<float, std::allocator<float> > > >::tensor_core<boost::numeric::ublas::tensor_engine<boost::numeric::ublas::basic_static_extents<unsigned long, 1, 2, 3, 4, 5>, boost::numeric::ublas::basic_column_major<unsigned long, long>, boost::numeric::ublas::strides<boost::numeric::ublas::basic_static_extents<unsigned long, 1, 2, 3, 4, 5> >, std::array<float, 120> > >' requested here\n    ub::fixed_rank_tensor<float,5> t4 = st1;\n                                        ^\ninclude/boost/numeric/ublas/tensor/static_strides.hpp:120:18: note: candidate template ignored: could not match 'static_stride_list' against 'basic_static_extents'\n  constexpr auto make_static_strides( [[maybe_unused]] static_stride_list<T, E0, E...> e )\n                 ^\ninclude/boost/numeric/ublas/tensor/static_strides.hpp:153:18: note: candidate template ignored: could not match 'static_stride_list' against 'basic_static_extents'\n  constexpr auto make_static_strides( [[maybe_unused]] static_stride_list<T> e )\n                 ^\n```\nReported as error by clang-tidy.\n"", 'comment_created': datetime.datetime(2020, 10, 2, 11, 48, 31, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 498773923, 'comment_body': 'It was failing with the error and I found a solution over [here](https://github.com/actions/virtual-environments/issues/1536#issuecomment-698537248)', 'comment_created': datetime.datetime(2020, 10, 2, 11, 50, 53, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 498775460, 'comment_body': 'same with the msvc because the newest version of the windows 2019 toolset is 14.27 and clang-6.0 is removed from the image also which I had to edit the script to install it.', 'comment_created': datetime.datetime(2020, 10, 2, 11, 54, 34, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 498775964, 'comment_body': 'I think they updated the image because of which these errors are triggering right now.', 'comment_created': datetime.datetime(2020, 10, 2, 11, 55, 47, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 498777188, 'comment_body': 'Okay, then. It is fine to not depend upon the image vendor. They update it quite regularly (weekly)', 'comment_created': datetime.datetime(2020, 10, 2, 11, 58, 50, tzinfo=datetime.timezone.utc), 'commenter': 'coder3101', 'type': 'User'}, {'comment_id': 498779061, 'comment_body': 'could you fix these errors in the main repo? otherwise, if someone commits it will give unnecessary errors.', 'comment_created': datetime.datetime(2020, 10, 2, 12, 3, 25, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 499137850, 'comment_body': '`functions.hpp` should not depend on `tensor.hpp`', 'comment_created': datetime.datetime(2020, 10, 3, 10, 53, 33, tzinfo=datetime.timezone.utc), 'commenter': 'bassoy', 'type': 'User'}, {'comment_id': 499142558, 'comment_body': 'I would like these `extents_result_*` expressions inside the corresponding `prod` functions', 'comment_created': datetime.datetime(2020, 10, 3, 12, 9, 49, tzinfo=datetime.timezone.utc), 'commenter': 'bassoy', 'type': 'User'}, {'comment_id': 499154037, 'comment_body': 'Fraunhofer IOSB was the initiator of this project, please let us keep it.', 'comment_created': datetime.datetime(2020, 10, 3, 14, 47, 26, tzinfo=datetime.timezone.utc), 'commenter': 'bassoy', 'type': 'User'}, {'comment_id': 499155528, 'comment_body': 'This must-have occurred during refactoring. Therefore, I will revert it back.', 'comment_created': datetime.datetime(2020, 10, 3, 15, 6, 52, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 499156772, 'comment_body': ""I will change it to include `tensor_engine.hpp`, if we don't include it and forward declare it then we won't be able to create the result type because it needs to know how to construct the object. We cannot forward declare a class. There is another way which is including it after defining `tensor_engine` in the same header file or include it after the including `tensor_enging.hpp`. "", 'comment_created': datetime.datetime(2020, 10, 3, 15, 22, 41, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 499163017, 'comment_body': 'Moved inside the `prod` functions using lambda.', 'comment_created': datetime.datetime(2020, 10, 3, 16, 44, 46, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 499164541, 'comment_body': 'You are right my mistake - I confused `functions.hpp` with `multiplication.hpp`. I should have named those files differently.\r\nI would not like to have ordering dependencies. So it is okay like that.', 'comment_created': datetime.datetime(2020, 10, 3, 17, 5, 44, tzinfo=datetime.timezone.utc), 'commenter': 'bassoy', 'type': 'User'}, {'comment_id': 499164880, 'comment_body': 'Are those two required in this file?', 'comment_created': datetime.datetime(2020, 10, 3, 17, 9, 36, tzinfo=datetime.timezone.utc), 'commenter': 'bassoy', 'type': 'User'}, {'comment_id': 499167698, 'comment_body': 'Just a minor comment:\r\n\r\n```cpp\r\nif constexpr (is_static_rank_v<extents_type>) {\r\n  constexpr auto size = std::max(a_extents.size()-1u,2u);  // a_extents.size() should be constexpr\r\n  auto shape = extents<size>(); // we should make e.g. extents<size>(1) or extents<size>{1}\r\n  shape.fill(1);\r\n  return shape;\r\n}\r\nelse{\r\n  auto size = std::max(a_extents.size()-1u,2u);  // a_extents.size() \r\n  auto shape = extents(typename extents_type::base_type(size));\r\n  shape.fill(1u);\r\n  return shape; \r\n}\r\n', 'comment_created': datetime.datetime(2020, 10, 3, 17, 48, 12, tzinfo=datetime.timezone.utc), 'commenter': 'bassoy', 'type': 'User'}, {'comment_id': 499168030, 'comment_body': 'But just leave it like it is. We can do several PRs based on your changes.', 'comment_created': datetime.datetime(2020, 10, 3, 17, 52, 8, tzinfo=datetime.timezone.utc), 'commenter': 'bassoy', 'type': 'User'}, {'comment_id': 499168806, 'comment_body': ""1. The problem with `extents<size>(1)` is that it accepts `std::initializer_list` which will hinder or try to match with it. That's why I added the function `fill`.\r\n\r\n2. I avoided `a_extents.size()` because of msvc's bugs which I faced last time I used it. I don't know if msvc has improved it's `constexpr` capabilities."", 'comment_created': datetime.datetime(2020, 10, 3, 18, 2, 40, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}, {'comment_id': 499169138, 'comment_body': 'nope, the layout does not need to be required by tensor_engine must have been the remains of the refactoring, I will remove it.', 'comment_created': datetime.datetime(2020, 10, 3, 18, 6, 26, tzinfo=datetime.timezone.utc), 'commenter': 'amitsingh19975', 'type': 'User'}]","[{'commit_sha': 'f751e7af8624de15bbec7b0d21d52821e8218b0a', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f8c37a88e4533417e6c6faa337f8ad0c3d627560', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f74589ad2e5e1184b5d0d610475974522bbdfc1', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '914fc6930ebb7d5781247f7b800f6813a9c15c1f', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '33efb2c86e9300d581adb307d23402bf9af985ee', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f637d45064bbc12a350b73d859ca67b8a445eed7', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea85ed2d0003c520e162d2c12fea5e7bc8118d3c', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c6ee5b1089402254716f730c41d05d0fdb71cb0a', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '850f8367f012fe13b970a530bc9b8bcd3a09a291', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4951a449527fccc1771702ebabba613f69142ad0', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0879562864258cfc6e7231a343f11bbdc5c52046', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a8038f8849f05590ef8ea260a4932df47e91599', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '634fb0d69efc779c865ed8cc4053f5695daf2c40', 'committer_username': 'coder3101', 'committer_name': 'Ashar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 15, 7, 58, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '29c42e4cc42dda3e35c31affb971891335fa9c11', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d079690f80ab07be9fbee8adaab8472acc746d8', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b9cf3397f48153744bbb1cc84329bea67bb97e96', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a26e0f73ae2672c9a09018a71a57a66abaf5c8e', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b04a5e22a566a698ddd7ac0fcffee0a0bbfd00af', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c5d80943466045d44b65ca17ca13e40dc4a4888f', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08fe599cdc83144a88b38673246b9dbfad30168c', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '976945e93df0bdc7a6807bd2c3049be94da2654e', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc8949a6620757c0903bd88f11a32455b2458acf', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b0c415fcfef4ebe77ea33ee8f127c9b028ad7d46', 'committer_username': 'coder3101', 'committer_name': 'Ashar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 15, 7, 58, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c0b96cb09c93b6969e7aec68eec8f856033098f', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0883ebf59478d3c68c0c306bf382e729c3717b2', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed09afc541875743f29c2eaa4f1ad67a453487cf', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3cd382bbcc91c62dd7947c7b1dee05364109e715', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '026752ec9d257aed4445f3d1d5ac2269bf26651c', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60ec775bc9840944e7fb8ce56358c98dc76c5e44', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a33080e1f4996f882d581c65e1805dd1c48c2dfd', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d2177f3420f69d6a1aaee20aceb9d0854568947', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de0cad668a4ee8373a563bc7d0d484cf436d5570', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b0d1281dc81abc9641f30a6bf4c338023e1c0a4', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb794763e21d341ff5d032fd348582765e89fbb0', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ffc20678c4d4c2be0e6205f953d21b150f5c8686', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '854732c6885a1d498f90631bb27ead758a6e28d0', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84144d765006750482962237867ea02e6dcc054c', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8afd714cb380bf8b1f3a2d22fc89a6bcbcb48e73', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ffcaec65acc4c475437b03593b6b3673b1afb6f', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e3b4188e16d4402c94160ccb3c5df76b7037032', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f663678df35f7745c8a24b97b11758c44a10e224', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9255ef1591690ceb78f9d3f6019d5054a9c7ac6d', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da91a80a1b447e9099f2c6ac0fcd40cfb7bb6091', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d4b1e077ebdaa6dbb657f4000df47c374ee1f6d', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ffd5546510d3cb3d2ca6c83e195a041420f100c', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '80e161ab7192f32683fd8a09513db79f96650535', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e2680d3e753eef78976968db55a151bcd50f89aa', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1af11795c81236b351665cb15c2bbc3c61f8faca', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e8af89a8d784263ed61c4816f5af9d03c1315356', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a1af28038f7af52016b7d175ca8eca73661571c', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c52707e53370e5881949e8ced59f0231f5a8ffbf', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '580bae1dee2da9fd32d073ff851ec5574ce70078', 'committer_username': 'amitsingh19975', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 17, 17, 52, 33, tzinfo=datetime.timezone.utc)}]",,29508454,,User,,52,,3,17

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
8080609,ublas,boostorg/ublas,C++,155,105,16,60,4063,59,13,26,"[{'id': 465904421, 'number': 104, 'closed': None, 'created': datetime.datetime(2020, 8, 11, 6, 46, 33, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 1, 'deletions': 19, 'state': 'open'}, {'id': 463788300, 'number': 102, 'closed': datetime.datetime(2020, 8, 12, 14, 41, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 6, 5, 17, 44, tzinfo=datetime.timezone.utc), 'time_taken': 552229.0, 'time_delta': '6 days, 9:23:49', 'additions': 85, 'deletions': 21, 'state': 'closed'}, {'id': 462660643, 'number': 98, 'closed': datetime.datetime(2020, 8, 4, 20, 17, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 4, 9, 57, 3, tzinfo=datetime.timezone.utc), 'time_taken': 37210.0, 'time_delta': '10:20:10', 'additions': 1, 'deletions': 0, 'state': 'closed'}, {'id': 449336863, 'number': 94, 'closed': None, 'created': datetime.datetime(2020, 7, 15, 8, 43, 50, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 160, 'deletions': 1, 'state': 'open'}, {'id': 448065698, 'number': 93, 'closed': datetime.datetime(2021, 5, 24, 18, 52, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 13, 6, 38, 13, tzinfo=datetime.timezone.utc), 'time_taken': 27260050.0, 'time_delta': '315 days, 12:14:10', 'additions': 15415, 'deletions': 14090, 'state': 'closed'}, {'id': 447864392, 'number': 92, 'closed': datetime.datetime(2020, 7, 12, 16, 16, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 12, 7, 41, 15, tzinfo=datetime.timezone.utc), 'time_taken': 30933.0, 'time_delta': '8:35:33', 'additions': 169, 'deletions': 44, 'state': 'closed'}, {'id': 447790869, 'number': 91, 'closed': datetime.datetime(2020, 7, 12, 13, 21, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 11, 16, 51, 33, tzinfo=datetime.timezone.utc), 'time_taken': 73777.0, 'time_delta': '20:29:37', 'additions': 3, 'deletions': 3, 'state': 'closed'}, {'id': 442506814, 'number': 89, 'closed': datetime.datetime(2020, 7, 11, 11, 57, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 1, 7, 41, 48, tzinfo=datetime.timezone.utc), 'time_taken': 879341.0, 'time_delta': '10 days, 4:15:41', 'additions': 1336, 'deletions': 65, 'state': 'closed'}, {'id': 442496739, 'number': 88, 'closed': datetime.datetime(2020, 7, 1, 7, 21, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 1, 7, 20, 33, tzinfo=datetime.timezone.utc), 'time_taken': 85.0, 'time_delta': '0:01:25', 'additions': 1312, 'deletions': 226, 'state': 'closed'}, {'id': 308392722, 'number': 72, 'closed': datetime.datetime(2020, 3, 14, 13, 59, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 8, 18, 20, 47, 3, tzinfo=datetime.timezone.utc), 'time_taken': 18033137.0, 'time_delta': '208 days, 17:12:17', 'additions': 6, 'deletions': 2, 'state': 'closed'}, {'id': 280112730, 'number': 69, 'closed': datetime.datetime(2019, 5, 19, 12, 35, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 5, 18, 16, 49, 49, tzinfo=datetime.timezone.utc), 'time_taken': 71112.0, 'time_delta': '19:45:12', 'additions': 55, 'deletions': 19, 'state': 'closed'}]"
