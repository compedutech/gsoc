pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1376002318,crit: add features to retrieve memory pages,"The goal of this PR is to add features for collecting memory pages content. 
For the now I have added `GetMemPages` function to retrieve the memory pages of a process. Alongside it, helper functions `genMemChunk` and `getPage` have been implemented. The core logic is derived from https://github.com/checkpoint-restore/criu/blob/criu-dev/coredump/criu_coredump/coredump.py. 

It's still a work in progress, but I would like to submit it for feedback. 

PTAL: @adrianreber, @rst0git 

Thank you!",True,133,https://api.github.com/repos/checkpoint-restore/go-criu/pulls/133,https://github.com/checkpoint-restore/go-criu/pull/133,closed,498,0,4,2,4,16,0,0,[],2023-06-02 16:00:40+00:00,2023-06-16 08:33:37+00:00,1182777.0,"13 days, 16:32:57","[{'comment_id': 1223096318, 'comment_body': 'I am not experienced enough in Go, but in C this would be wrong. You are creating a local variable and returning the pointer to it. At the end of the function the variable would be gone. Go has a garbage collector so maybe this is okay.\r\n\r\nMy expectations from C would be something like:\r\n```go\r\nfunc (mr *MemoryReader) GetMemPages(buffer *bytes.Buffer, start, end uint64) (error)  {\r\n    // fill buffer\r\n    return nil\r\n}\r\n```\r\n\r\nYour approach seems wrong to me, but that could be just that I do not understand Go correctly.\r\n\r\n@rst0git any comments from your side', 'comment_created': datetime.datetime(2023, 6, 8, 14, 7, 12, tzinfo=datetime.timezone.utc), 'commenter': 'adrianreber', 'type': 'User'}, {'comment_id': 1223098715, 'comment_body': 'Please use `os.GetPageSize()` as it can be a different size.', 'comment_created': datetime.datetime(2023, 6, 8, 14, 8, 59, tzinfo=datetime.timezone.utc), 'commenter': 'adrianreber', 'type': 'User'}, {'comment_id': 1223101982, 'comment_body': 'You should be able to figure out the PID using other images. Not by parsing one of the file names.', 'comment_created': datetime.datetime(2023, 6, 8, 14, 11, 28, tzinfo=datetime.timezone.utc), 'commenter': 'adrianreber', 'type': 'User'}, {'comment_id': 1223104555, 'comment_body': 'Can you trigger this error cases by temporarily renaming the expected `pages-%d.img` to not exist.', 'comment_created': datetime.datetime(2023, 6, 8, 14, 13, 15, tzinfo=datetime.timezone.utc), 'commenter': 'adrianreber', 'type': 'User'}, {'comment_id': 1223105551, 'comment_body': 'This error could also be triggered by supplying a too short file temporarily.', 'comment_created': datetime.datetime(2023, 6, 8, 14, 14, 1, tzinfo=datetime.timezone.utc), 'commenter': 'adrianreber', 'type': 'User'}, {'comment_id': 1223107535, 'comment_body': 'Not sure, but you can create a test to also cover this case?', 'comment_created': datetime.datetime(2023, 6, 8, 14, 15, 29, tzinfo=datetime.timezone.utc), 'commenter': 'adrianreber', 'type': 'User'}, {'comment_id': 1223118201, 'comment_body': ""The Go compiler does escape analysis during allocation, so it would identify the lifetime of the buffer pointer correctly and allocate it on the heap. You're right, this would be incorrect in a language like C, but is permissible in Go."", 'comment_created': datetime.datetime(2023, 6, 8, 14, 22, 41, tzinfo=datetime.timezone.utc), 'commenter': 'snprajwal', 'type': 'User'}, {'comment_id': 1223131857, 'comment_body': 'Thanks for your input. Any suggestion how to implement this. With a local variable like it is or something different?', 'comment_created': datetime.datetime(2023, 6, 8, 14, 31, 23, tzinfo=datetime.timezone.utc), 'commenter': 'adrianreber', 'type': 'User'}, {'comment_id': 1223155132, 'comment_body': 'Since both approaches will work, I am not sure which one is idiomatic Go ðŸ¤” ', 'comment_created': datetime.datetime(2023, 6, 8, 14, 49, 27, tzinfo=datetime.timezone.utc), 'commenter': 'behouba', 'type': 'User'}, {'comment_id': 1223156433, 'comment_body': 'Will try that.', 'comment_created': datetime.datetime(2023, 6, 8, 14, 50, 19, tzinfo=datetime.timezone.utc), 'commenter': 'behouba', 'type': 'User'}, {'comment_id': 1223156647, 'comment_body': ""This pattern is quite common in Go, I've seen it across other projects before. I feel it's fine, the current design should work as intended. The allocator + GC will take care of things."", 'comment_created': datetime.datetime(2023, 6, 8, 14, 50, 28, tzinfo=datetime.timezone.utc), 'commenter': 'snprajwal', 'type': 'User'}, {'comment_id': 1223163197, 'comment_body': 'Agree with @snprajwal, I have seen this pattern also in other Go projects. ', 'comment_created': datetime.datetime(2023, 6, 8, 14, 53, 20, tzinfo=datetime.timezone.utc), 'commenter': 'behouba', 'type': 'User'}, {'comment_id': 1223610875, 'comment_body': ""Wouldn't it be better to have `pageSize` as a field of `MemoryReader` so that users of the package can set the value themselves when creating new instance of `MemoryReader` ? `os.Getpagesize()` will still be the default value."", 'comment_created': datetime.datetime(2023, 6, 8, 22, 35, 13, tzinfo=datetime.timezone.utc), 'commenter': 'behouba', 'type': 'User'}, {'comment_id': 1225622181, 'comment_body': 'In the case where a user sets the page size to 0, it could be reasonable to fall back to a default value (i.e., sysPageSize). However, when a user specifies a page size that is not a positive power of 2, it would be more appropriate to return an error instead of silently overwriting the value.', 'comment_created': datetime.datetime(2023, 6, 10, 22, 19, 43, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 1225830174, 'comment_body': 'I think we should use the type we get from `Getpagesize()`. Which is just `int`. Not sure it makes sense to cast it to another value.', 'comment_created': datetime.datetime(2023, 6, 11, 14, 26, 52, tzinfo=datetime.timezone.utc), 'commenter': 'adrianreber', 'type': 'User'}, {'comment_id': 1225830829, 'comment_body': 'Any specific reason for not using `os.Getpagesize()`. Looking at the Go sources it just calls `syscall.Getpagesize()`, but I think using `os` would be better.', 'comment_created': datetime.datetime(2023, 6, 11, 14, 28, 27, tzinfo=datetime.timezone.utc), 'commenter': 'adrianreber', 'type': 'User'}]","[{'commit_sha': '8d118f417c43d51c983f41f1f1bf725a94104d51', 'committer_username': 'behouba', 'committer_name': 'Behouba MK', 'committer_email': 'behouba@gmail.com', 'commit_date': datetime.datetime(2017, 4, 5, 21, 48, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c337d01365d78cbee5aaa38daaabb9fae52a9a8', 'committer_username': 'behouba', 'committer_name': 'Behouba MK', 'committer_email': 'behouba@gmail.com', 'commit_date': datetime.datetime(2017, 4, 5, 21, 48, 25, tzinfo=datetime.timezone.utc)}]",Behouba MK,26941907,behouba@gmail.com,User,,79,,156,82
1461242214,crit: add `FindPs` method on `PsTree`,This commit introduces a new method `FindPs` on `PsTree`. This method uses a depth-first search algorithm to find a process within a process tree. This addition will be beneficial for `checkpointctl` as it allows us to easily verify the existence of a given process ID when needed.,True,145,https://api.github.com/repos/checkpoint-restore/go-criu/pulls/145,https://github.com/checkpoint-restore/go-criu/pull/145,closed,59,0,2,1,1,1,0,0,[],2023-08-03 10:47:37+00:00,2023-08-03 21:03:24+00:00,36947.0,10:15:47,"[{'comment_id': 1283044658, 'comment_body': '```suggestion\r\nfunc (ps *PsTree) FindPs(pid uint32) *PsTree {\r\n```\r\nAlso, I feel this function would be better off in `utils.go`, since the functionality is not related to `crit explore`.', 'comment_created': datetime.datetime(2023, 8, 3, 11, 10, 11, tzinfo=datetime.timezone.utc), 'commenter': 'snprajwal', 'type': 'User'}]","[{'commit_sha': '1cd3730a4dbf5e89a99dca1a61c873ddd5cf67c9', 'committer_username': 'behouba', 'committer_name': 'Behouba MK', 'committer_email': 'behouba@gmail.com', 'commit_date': datetime.datetime(2017, 4, 5, 21, 48, 25, tzinfo=datetime.timezone.utc)}]",Behouba MK,26941907,behouba@gmail.com,User,,79,,156,82
1472419330,crit: add method to retrieve shared memory size of process,"This PR aims to add a method for retrieving the size of shared memory of processes.  The function iterates over the virtual memory areas (VMAs) associated with the process, summing up the sizes of VMAs with the `MAP_SHARED` flag.

@rst0git PTAL, is this approach accurate ?",True,146,https://api.github.com/repos/checkpoint-restore/go-criu/pulls/146,https://github.com/checkpoint-restore/go-criu/pull/146,closed,338,27,9,2,2,25,0,0,[],2023-08-11 22:37:14+00:00,2023-08-22 08:45:05+00:00,900471.0,"10 days, 10:07:51","[{'comment_id': 1292726886, 'comment_body': '```Go\r\nimport ""golang.org/x/sys/unix""\r\n\r\n...\r\n\r\nif vma.GetFlags()&unix.MAP_SHARED != 0 {\r\n```', 'comment_created': datetime.datetime(2023, 8, 13, 9, 4, 3, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 1292736541, 'comment_body': 'In addition to this unit test, it would be good to add an integration test (similar to `loop` or `piggie`) that verifies the correctness of the output of `GetShmemSize()`.', 'comment_created': datetime.datetime(2023, 8, 13, 9, 40, 59, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 1292840249, 'comment_body': '@rst0git, for that purpose, would it be good to update the `loop` program by integrating the allocation of shared memory using `mmap()`? This could then be utilized within the `crit` integration test.', 'comment_created': datetime.datetime(2023, 8, 13, 18, 56, 48, tzinfo=datetime.timezone.utc), 'commenter': 'behouba', 'type': 'User'}, {'comment_id': 1293276049, 'comment_body': 'It would be better to use a separate test program that takes as input *type* (see `flags` argument in `man 2 mmap`) and *size* of shared memory. This would allow us to reuse the same test code with different size of memory and verify the output of `GetShmemSize()`.', 'comment_created': datetime.datetime(2023, 8, 14, 10, 15, 48, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 1296182924, 'comment_body': '```Suggestion\r\n\t// Read process environment variables from the environ test file\r\n```', 'comment_created': datetime.datetime(2023, 8, 16, 16, 48, 12, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 1296200730, 'comment_body': 'Would it be possible to add also tests that are not multiple of 2 (e.g, 1025, or 4195)?', 'comment_created': datetime.datetime(2023, 8, 16, 17, 5, 3, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 1296204171, 'comment_body': 'We tend to follow the kernel coding style:\r\nhttps://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces', 'comment_created': datetime.datetime(2023, 8, 16, 17, 7, 27, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 1296204909, 'comment_body': 'Should we add `<log_file>`?', 'comment_created': datetime.datetime(2023, 8, 16, 17, 7, 58, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 1296208763, 'comment_body': 'Could you move `sleep(1)` at the end of the loop?', 'comment_created': datetime.datetime(2023, 8, 16, 17, 10, 30, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 1296211612, 'comment_body': 'Should add tests for `MAP_SHARED` without `MAP_ANONYMOUS`?', 'comment_created': datetime.datetime(2023, 8, 16, 17, 12, 27, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 1296214569, 'comment_body': '```Suggestion\r\n        perror(""clone() failed"");\r\n```', 'comment_created': datetime.datetime(2023, 8, 16, 17, 15, 19, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 1296218772, 'comment_body': '```C\r\n    if (size <= 0) {\r\n        fprintf(stderr, ""Invalid input size"");\r\n        return 1;\r\n    }\r\n```', 'comment_created': datetime.datetime(2023, 8, 16, 17, 19, 30, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 1296222790, 'comment_body': 'Should we use `s` and `p` instead of `MAP_SHARED` and `MAP_PRIVATE`, and perhaps `sa` for `MAP_SHARED|MAP_ANONYMOUS`?', 'comment_created': datetime.datetime(2023, 8, 16, 17, 23, 44, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 1297491967, 'comment_body': 'Would it make sense to commit this [.clang-format](https://github.com/checkpoint-restore/criu/blob/criu-dev/.clang-format) configuration file from `criu` in this repository to help with C code formatting ?', 'comment_created': datetime.datetime(2023, 8, 17, 16, 53, 45, tzinfo=datetime.timezone.utc), 'commenter': 'behouba', 'type': 'User'}, {'comment_id': 1297695728, 'comment_body': ""I'm not sure if this is necessary. With the exception of `piggie.c`, `loop.c`, and `mmapper.c`, we do not have C code in the go-criu repository.\r\n\r\nIn the CRIU repository, we [fetch](https://github.com/checkpoint-restore/criu/blob/21992206b2e049f0e41efcfa46f9cdbba0622ca8/Makefile#L472) the `.clang-format` file from the kernel git repository and apply a few modifications:\r\n\r\nhttps://github.com/checkpoint-restore/criu/blob/criu-dev/scripts/fetch-clang-format.sh"", 'comment_created': datetime.datetime(2023, 8, 17, 20, 14, 29, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 1297711253, 'comment_body': '```Suggestion\r\n\t\tchar filename[] = ""/tmp/crit-mmaper.XXXXXX"";\r\n```\r\n', 'comment_created': datetime.datetime(2023, 8, 17, 20, 33, 52, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 1297712665, 'comment_body': 'We need to clean-up this temporary file once we get an open file descriptor:\r\n```C\r\nunlink(filename);\r\n```', 'comment_created': datetime.datetime(2023, 8, 17, 20, 35, 26, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 1297717472, 'comment_body': '`criu restore` does not seem to be necessary for this test.', 'comment_created': datetime.datetime(2023, 8, 17, 20, 40, 49, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 1297728552, 'comment_body': '```Suggestion\r\n\t$(eval MM_PID := $(shell ../mmapper/mmapper $(1) $(2) ""/tmp/mmapper-${1}-${2}.log""))\r\n```', 'comment_created': datetime.datetime(2023, 8, 17, 20, 46, 45, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 1297745252, 'comment_body': '`ioutil.ReadFile` is deprecated: https://pkg.go.dev/io/ioutil\r\n```Suggestion\r\n\ttestFileArgs, err := os.ReadFile(filepath.Join(loopTestImgDir, ""cmdline""))\r\n```', 'comment_created': datetime.datetime(2023, 8, 17, 20, 57, 54, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 1297745785, 'comment_body': '```Suggestion\r\n\tenvVarsTestFile, err := os.ReadFile(filepath.Join(loopTestImgDir, ""environ""))\r\n```', 'comment_created': datetime.datetime(2023, 8, 17, 20, 58, 35, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 1297747781, 'comment_body': 'It would be good to add a comment here that the kernel uses page-aligned addresses to create the mapping.', 'comment_created': datetime.datetime(2023, 8, 17, 21, 1, 5, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 1297751973, 'comment_body': 'It would be good to add a comment here. Something like\r\n```Makefile\r\n# gen_mmapper_imgs <memory size> <mmap flags> <images dir>\r\n# mmap flags: p - private; s - shared; a - annonymous\r\n``` ', 'comment_created': datetime.datetime(2023, 8, 17, 21, 5, 54, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 1297762023, 'comment_body': '`criu restore` does not seem to be necessary for this test.\r\nIt was initially introduced for testing restore stats. However, this test has been moved in https://github.com/checkpoint-restore/go-criu/blob/2210c022f3aafaaddc22a0f7d3bd03a78b973ba1/crit/Makefile#L12', 'comment_created': datetime.datetime(2023, 8, 17, 21, 18, 3, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 1298182780, 'comment_body': 'I understand and agree that this is not that necessary here. \r\n\r\n\r\n', 'comment_created': datetime.datetime(2023, 8, 18, 8, 42, 42, tzinfo=datetime.timezone.utc), 'commenter': 'behouba', 'type': 'User'}]","[{'commit_sha': 'bd5203d2746d72e48896b4e9df05699858f9d1bb', 'committer_username': 'behouba', 'committer_name': 'Behouba MK', 'committer_email': 'behouba@gmail.com', 'commit_date': datetime.datetime(2017, 4, 5, 21, 48, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02d11abbbab5c5933508d4f30f0d594da9ff7438', 'committer_username': 'behouba', 'committer_name': 'Behouba MK', 'committer_email': 'behouba@gmail.com', 'commit_date': datetime.datetime(2017, 4, 5, 21, 48, 25, tzinfo=datetime.timezone.utc)}]",Behouba MK,26941907,behouba@gmail.com,User,,79,,156,82
1365220232,Optimize archive unpacking,"This PR propose an approach to optimize checkpoint archive unpacking. 

Two new functions are introduced:
- untarFiles` to extract specific files from the archive. 
- `getCheckpointAndDiffSizes`  as  replacement for `getCheckpointSize` function. This function read the sizes of the checkpoint directory and rootfs-diff.tar file from the archive without unpacking the entire archive.

Two failing test cases checking the presence of the `checkpoint` directory. Is it OK to remove those ?

cc: @adrianreber, @rst0git 

Fixes: #51 ",True,55,https://api.github.com/repos/checkpoint-restore/checkpointctl/pulls/55,https://github.com/checkpoint-restore/checkpointctl/pull/55,closed,187,30,3,2,9,6,0,0,[],2023-05-25 19:13:36+00:00,2023-06-02 18:28:47+00:00,688511.0,"7 days, 23:15:11","[{'comment_id': 1206418721, 'comment_body': 'I think I understand your motivation. You loop once over the list of tar files and calculate both sizes.\r\n\r\nI am not totally convinced this is the right way from an interface point of view. It feels like two things are returned from one function which do not belong together. At the same time it makes sense this way instead of looping twice over the tar archive.\r\n\r\nThe only idea I have is, is to have a function which does the same as you do currently, but then have two functions, one which returns the checkpoint size and the other returns the rootfs size. If a size is requested both sizes are calculated and stored in a variable and can then be access by the corresponding function. This sounds, however, like over-engineering...\r\n\r\n@rst0git do you have an idea how to do this?', 'comment_created': datetime.datetime(2023, 5, 26, 8, 27, 43, tzinfo=datetime.timezone.utc), 'commenter': 'adrianreber', 'type': 'User'}, {'comment_id': 1206939774, 'comment_body': 'What if we have a function that takes a string (file pattern) and returns the total size of the matching files (using the same logic)? This function could then be used within other functions to obtain the size of the `checkpoint` directory or the size of the rootfs tar file.', 'comment_created': datetime.datetime(2023, 5, 26, 15, 13, 47, tzinfo=datetime.timezone.utc), 'commenter': 'behouba', 'type': 'User'}, {'comment_id': 1206968559, 'comment_body': 'maybe we could use something like the following:\r\n\r\n```Go\r\ntype archiveSizes struct {\r\n\tcheckpointSize    int64\r\n\trootFsDiffTarSize int64\r\n}\r\n\r\n// getArchiveSizes calculates the sizes of different components within a container checkpoint.\r\nfunc getArchiveSizes(archiveInput string) (*archiveSizes, error) {\r\n\tarchiveFile, err := os.Open(archiveInput)\r\n\tif err != nil {\r\n\t\treturn nil, err\r\n\t}\r\n\tdefer archiveFile.Close()\r\n\r\n\t// Decompress the archive\r\n\tdecompressedStream, err := archive.DecompressStream(archiveFile)\r\n\tif err != nil {\r\n\t\treturn nil, err\r\n\t}\r\n\tdefer decompressedStream.Close()\r\n\r\n\t// Create a tar reader to read the files from the decompressed archive\r\n\ttarReader := tar.NewReader(decompressedStream)\r\n\tvar result = &archiveSizes{}\r\n\r\n\t// Iterate through each file in the archive\r\n\tfor {\r\n\t\thdr, err := tarReader.Next()\r\n\t\tif errors.Is(err, io.EOF) {\r\n\t\t\t// End of archive\r\n\t\t\tbreak\r\n\t\t}\r\n\t\tif err != nil {\r\n\t\t\tbreak\r\n\t\t}\r\n\r\n\t\tif hdr.FileInfo().Mode().IsRegular() {\r\n\t\t\tif strings.HasPrefix(hdr.Name, metadata.CheckpointDirectory) {\r\n\t\t\t\t// Add the file size to the total checkpoint size\r\n\t\t\t\tresult.checkpointSize += hdr.Size\r\n\t\t\t} else if hdr.Name == metadata.RootFsDiffTar {\r\n\t\t\t\t// Assuming there is only one rootfs diff tar file\r\n\t\t\t\tresult.rootFsDiffTarSize = hdr.Size\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn result, nil\r\n}\r\n```', 'comment_created': datetime.datetime(2023, 5, 26, 15, 34, 46, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 1207989269, 'comment_body': ""Let's try what @rst0git suggested."", 'comment_created': datetime.datetime(2023, 5, 27, 13, 52, 11, tzinfo=datetime.timezone.utc), 'commenter': 'adrianreber', 'type': 'User'}, {'comment_id': 1213152040, 'comment_body': 'What is `test.pid` about?', 'comment_created': datetime.datetime(2023, 6, 1, 13, 25, 8, tzinfo=datetime.timezone.utc), 'commenter': 'adrianreber', 'type': 'User'}, {'comment_id': 1213152780, 'comment_body': 'Ah, I get it. Sorry.', 'comment_created': datetime.datetime(2023, 6, 1, 13, 25, 33, tzinfo=datetime.timezone.utc), 'commenter': 'adrianreber', 'type': 'User'}]","[{'commit_sha': 'd65226b36731493271bb0aa9e62ffc87346f42bd', 'committer_username': 'behouba', 'committer_name': 'Behouba MK', 'committer_email': 'behouba@gmail.com', 'commit_date': datetime.datetime(2017, 4, 5, 21, 48, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '919ed4cf7e90cbad58d1ecf91ae15515a20b4457', 'committer_username': 'behouba', 'committer_name': 'Behouba MK', 'committer_email': 'behouba@gmail.com', 'commit_date': datetime.datetime(2017, 4, 5, 21, 48, 25, tzinfo=datetime.timezone.utc)}]",Behouba MK,26941907,behouba@gmail.com,User,,79,,156,82
1387254958,show: add support for listing multiple checkpoints,"This commit enhances the functionality of the ""show"" command by enabling it to list multiple checkpoint archives.

Examples:
```bash
$ls checkpoints/
nginx-checkpoint.tar.gz  ubuntu_multiuser.tar.gz

$checkpointctl nginx-checkpoint.tar.gz  ubuntu_multiuser.tar.gz
+----------------+---------------------------------+--------------+---------+---------------------------+--------+----+-----+------------+-------------------+
|   CONTAINER    |              IMAGE              |      ID      | RUNTIME |          CREATED          | ENGINE | IP | MAC | CHKPT SIZE | ROOT FS DIFF SIZE |
+----------------+---------------------------------+--------------+---------+---------------------------+--------+----+-----+------------+-------------------+
| awesome_booth  | docker.io/library/ubuntu:latest | 695b77deb382 | crun    | 2023-03-08T08:45:33+03:00 | Podman |    |     | 2.8 MiB    | 309.0 KiB         |
+----------------+---------------------------------+--------------+---------+---------------------------+--------+----+-----+------------+-------------------+
| gallant_austin | docker.io/library/nginx:latest  | 5e61a1e0a308 | crun    | 2023-03-01T15:11:55+03:00 | Podman |    |     | 16.6 MiB   | 4.5 KiB           |
+----------------+---------------------------------+--------------+---------+---------------------------+--------+----+-----+------------+-------------------+

$checkpointctl show *.tar.gz
+----------------+---------------------------------+--------------+---------+---------------------------+--------+----+-----+------------+-------------------+
|   CONTAINER    |              IMAGE              |      ID      | RUNTIME |          CREATED          | ENGINE | IP | MAC | CHKPT SIZE | ROOT FS DIFF SIZE |
+----------------+---------------------------------+--------------+---------+---------------------------+--------+----+-----+------------+-------------------+
| awesome_booth  | docker.io/library/ubuntu:latest | 695b77deb382 | crun    | 2023-03-08T08:45:33+03:00 | Podman |    |     | 2.8 MiB    | 309.0 KiB         |
+----------------+---------------------------------+--------------+---------+---------------------------+--------+----+-----+------------+-------------------+
| gallant_austin | docker.io/library/nginx:latest  | 5e61a1e0a308 | crun    | 2023-03-01T15:11:55+03:00 | Podman |    |     | 16.6 MiB   | 4.5 KiB           |
+----------------+---------------------------------+--------------+---------+---------------------------+--------+----+-----+------------+-------------------+

```

Note that when listing multiple checkpoint files, additional flags are ignored.

Fixes: #53
",True,67,https://api.github.com/repos/checkpoint-restore/checkpointctl/pulls/67,https://github.com/checkpoint-restore/checkpointctl/pull/67,closed,188,127,3,1,8,10,0,0,[],2023-06-10 19:52:42+00:00,2023-06-19 10:43:36+00:00,744654.0,"8 days, 14:50:54","[{'comment_id': 1227081374, 'comment_body': 'We can optimise allocation here by using the length of `args` as the capacity.\r\n```suggestion\r\n\ttasks := make([]task, 0, len(args))\r\n```', 'comment_created': datetime.datetime(2023, 6, 12, 18, 29, 28, tzinfo=datetime.timezone.utc), 'commenter': 'snprajwal', 'type': 'User'}, {'comment_id': 1227082506, 'comment_body': 'True', 'comment_created': datetime.datetime(2023, 6, 12, 18, 30, 34, tzinfo=datetime.timezone.utc), 'commenter': 'behouba', 'type': 'User'}, {'comment_id': 1227099178, 'comment_body': ""Ending files with a newline is better for consistency, and ensures the file won't break in some other operation."", 'comment_created': datetime.datetime(2023, 6, 12, 18, 46, 38, tzinfo=datetime.timezone.utc), 'commenter': 'snprajwal', 'type': 'User'}, {'comment_id': 1227101638, 'comment_body': 'Thanks @snprajwal !', 'comment_created': datetime.datetime(2023, 6, 12, 18, 49, 15, tzinfo=datetime.timezone.utc), 'commenter': 'behouba', 'type': 'User'}, {'comment_id': 1227806509, 'comment_body': 'There might be a few more flags added to checkpointctl, and it might be better to use a more generic error message instead of listing all flags (e.g., ""displaying multiple checkpoints with _additional_ flags is not supported"")', 'comment_created': datetime.datetime(2023, 6, 13, 9, 17, 33, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 1228331491, 'comment_body': 'Why are you display the MAC address and IP address unconditionally even if it is not set?', 'comment_created': datetime.datetime(2023, 6, 13, 15, 30, 3, tzinfo=datetime.timezone.utc), 'commenter': 'adrianreber', 'type': 'User'}, {'comment_id': 1228340163, 'comment_body': ""I was thinking of cases when there are some checkpoints with some  of those conditional columns while other don't?\r\nWe will end-up with rows of different s sizes for the table. Any suggestion to deal with that ?"", 'comment_created': datetime.datetime(2023, 6, 13, 15, 36, 12, tzinfo=datetime.timezone.utc), 'commenter': 'behouba', 'type': 'User'}, {'comment_id': 1228350381, 'comment_body': 'Right, that makes sense. Tables are just dumb :wink: or it least not helpful here.\r\n\r\nI guess for listing multiple checkpoints your approach is correct, but for the single checkpoint view you should make it conditional.', 'comment_created': datetime.datetime(2023, 6, 13, 15, 42, 51, tzinfo=datetime.timezone.utc), 'commenter': 'adrianreber', 'type': 'User'}, {'comment_id': 1228362892, 'comment_body': 'Ok, I will try something :)', 'comment_created': datetime.datetime(2023, 6, 13, 15, 52, 34, tzinfo=datetime.timezone.utc), 'commenter': 'behouba', 'type': 'User'}, {'comment_id': 1228550176, 'comment_body': '@adrianreber, I made changes to maintain the previous output format when displaying a single checkpoint. What do you think of this approach?', 'comment_created': datetime.datetime(2023, 6, 13, 18, 37, 5, tzinfo=datetime.timezone.utc), 'commenter': 'behouba', 'type': 'User'}]","[{'commit_sha': '63e2157c37eff2ba6fba12e84da9dccf9046704b', 'committer_username': 'behouba', 'committer_name': 'Behouba MK', 'committer_email': 'behouba@gmail.com', 'commit_date': datetime.datetime(2017, 4, 5, 21, 48, 25, tzinfo=datetime.timezone.utc)}]",Behouba MK,26941907,behouba@gmail.com,User,,79,,156,82
1399053402,feat: add new `inspect` sub-command,"This PR adds a new `inspect` sub-command with a default tree output format, supplementing the existing `show` sub-command. The `show` sub-command no longer supports flags and is now used for getting a quick checkpoint overview in a table format. On the other hand, the new `inspect` sub-command offers a detailed view of the checkpoint, using all the flags previously used with show.

Fixes: #75 ",True,76,https://api.github.com/repos/checkpoint-restore/checkpointctl/pulls/76,https://github.com/checkpoint-restore/checkpointctl/pull/76,closed,427,299,4,4,11,20,0,0,[],2023-06-20 01:38:56+00:00,2023-07-03 15:12:20+00:00,1172004.0,"13 days, 13:33:24","[{'comment_id': 1235159245, 'comment_body': 'I think it would make sense to move the printing logic here to keep it consistent with the other rendering functions', 'comment_created': datetime.datetime(2023, 6, 20, 11, 57, 14, tzinfo=datetime.timezone.utc), 'commenter': 'snprajwal', 'type': 'User'}, {'comment_id': 1235161088, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 6, 20, 11, 59, 7, tzinfo=datetime.timezone.utc), 'commenter': 'snprajwal', 'type': 'User'}, {'comment_id': 1235162842, 'comment_body': 'It would be better to name this `psTreeNode` instead. `pTree` and `psTree` would be too easy to mix up.', 'comment_created': datetime.datetime(2023, 6, 20, 12, 0, 51, tzinfo=datetime.timezone.utc), 'commenter': 'snprajwal', 'type': 'User'}, {'comment_id': 1240838910, 'comment_body': 'Should it be ""Memwrite Time"" (without `F`)?', 'comment_created': datetime.datetime(2023, 6, 24, 15, 1, 2, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 1240841791, 'comment_body': 'Yes, itâ€™s a typo ðŸ˜…. I will fix that. Thank you for pointing this out.', 'comment_created': datetime.datetime(2023, 6, 24, 15, 6, 41, tzinfo=datetime.timezone.utc), 'commenter': 'behouba', 'type': 'User'}, {'comment_id': 1241001137, 'comment_body': 'It might be good to use a `switch` statement here and to show an error when the value of `format` is invalid.', 'comment_created': datetime.datetime(2023, 6, 25, 2, 11, 41, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 1241025143, 'comment_body': '```suggestion\r\n\t\t""Format the output using one of the following views: table, tree, or JSON (default: \\""tree\\"")."",\r\n```', 'comment_created': datetime.datetime(2023, 6, 25, 4, 23, 2, tzinfo=datetime.timezone.utc), 'commenter': 'snprajwal', 'type': 'User'}, {'comment_id': 1241258279, 'comment_body': 'I had suggested changing the default to ""tree"" since we were previously using that. If we\'re going to use ""table"" as the default, we should change it here too.', 'comment_created': datetime.datetime(2023, 6, 25, 18, 16, 54, tzinfo=datetime.timezone.utc), 'commenter': 'snprajwal', 'type': 'User'}, {'comment_id': 1241261266, 'comment_body': 'Thanks @snprajwal, I forgot to update the description.', 'comment_created': datetime.datetime(2023, 6, 25, 18, 35, 36, tzinfo=datetime.timezone.utc), 'commenter': 'behouba', 'type': 'User'}, {'comment_id': 1246206440, 'comment_body': 'I think something like this would be better in case we decide to support some other serialisable format later on.\r\n```suggestion\r\n\t\t""Specify the output format [tree (default), json]"",\r\n```', 'comment_created': datetime.datetime(2023, 6, 29, 7, 8, 21, tzinfo=datetime.timezone.utc), 'commenter': 'snprajwal', 'type': 'User'}, {'comment_id': 1247729396, 'comment_body': '""Show an overview of container checkpoints""', 'comment_created': datetime.datetime(2023, 6, 30, 10, 48, 20, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 1247732643, 'comment_body': '""Display low-level information about a container checkpoint""', 'comment_created': datetime.datetime(2023, 6, 30, 10, 52, 41, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 1247751723, 'comment_body': 'Since `checkpointctl inspect` is using a more compact format to display checkpoint information (i.e., `tree` or `json`), I think we could remove the `--full-paths` option.', 'comment_created': datetime.datetime(2023, 6, 30, 11, 17, 50, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 1247756536, 'comment_body': '""Display checkpoint statistics""', 'comment_created': datetime.datetime(2023, 6, 30, 11, 23, 57, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 1247757925, 'comment_body': '""Display an overview of mounts used in the checkpoint""', 'comment_created': datetime.datetime(2023, 6, 30, 11, 25, 38, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 1247761692, 'comment_body': '""Display an overview of processes in the container checkpoint""', 'comment_created': datetime.datetime(2023, 6, 30, 11, 30, 28, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 1247767313, 'comment_body': '""Show all information about container checkpoint""', 'comment_created': datetime.datetime(2023, 6, 30, 11, 37, 36, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 1249370925, 'comment_body': 'Specifying ""(default)"" here is unnecessary.\r\n\r\n```\r\n./checkpointctl inspect --help\r\nDisplay low-level information about a container checkpoint\r\n\r\nUsage:\r\n  checkpointctl inspect [flags]\r\n\r\nFlags:\r\n      --all             Show all information about container checkpoint\r\n      --format string   Specify the output format [tree (default), json] (default ""tree"")\r\n...\r\n```', 'comment_created': datetime.datetime(2023, 7, 2, 9, 2, 30, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 1249377046, 'comment_body': 'Would it be possible to apply these changes in the previous commit (test: add tests for inspect sub-command)? This would ensure that `make test` will pass after each commit and make it easier to review the changes in the pull request.\r\n\r\nIt would be good to mention why `--full-paths` has been removed in the commit message introducing the `inspect` command (inspect: add new sub-command inspect).', 'comment_created': datetime.datetime(2023, 7, 2, 9, 16, 13, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 1250830614, 'comment_body': 'I believe the abbreviation ""CHKPT Size"" was initially used to fit within the table view. However, with tree / json view perhaps with can use ""Checkpoint Size"" instead?', 'comment_created': datetime.datetime(2023, 7, 3, 12, 41, 4, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}]","[{'commit_sha': 'b7f33f8d7bb179779e8d4771a56f7bad84779144', 'committer_username': 'behouba', 'committer_name': 'Behouba MK', 'committer_email': 'behouba@gmail.com', 'commit_date': datetime.datetime(2017, 4, 5, 21, 48, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '489ddf8c135833eb2e416e9b98f7fe40f8da58b7', 'committer_username': 'behouba', 'committer_name': 'Behouba MK', 'committer_email': 'behouba@gmail.com', 'commit_date': datetime.datetime(2017, 4, 5, 21, 48, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a8a7abd6f261ca5a1261622000cfd35c3e8f612c', 'committer_username': 'behouba', 'committer_name': 'Behouba MK', 'committer_email': 'behouba@gmail.com', 'commit_date': datetime.datetime(2017, 4, 5, 21, 48, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c9386e661713d2455e717f1c41ae51626fa6d3c', 'committer_username': 'behouba', 'committer_name': 'Behouba MK', 'committer_email': 'behouba@gmail.com', 'commit_date': datetime.datetime(2017, 4, 5, 21, 48, 25, tzinfo=datetime.timezone.utc)}]",Behouba MK,26941907,behouba@gmail.com,User,,79,,156,82
1431704563,feat: display process tree with command line arguments,"This PR introduces a new flag `--ps-tree-cmd` to provide an alternative view of process tree.  
Using `--ps-tree-cmd`  it is now possible to display the full command line arguments in the process tree.

Example:

```bash
$ checkpointctl inspect /path/to/checkpoint.tar.gz --ps-tree-cmd
counter
â””â”€â”€ [1]  bash
    â”œâ”€â”€ [7]  bash -c 'python counter.py'
    â”œâ”€â”€ [8]  python counter.py --input data.txt --output result.txt
    â”œâ”€â”€ [11]  bash -c 'tee output.log'
    â””â”€â”€ [20]  tee output.log
``` ",True,89,https://api.github.com/repos/checkpoint-restore/checkpointctl/pulls/89,https://github.com/checkpoint-restore/checkpointctl/pull/89,closed,100,9,4,2,2,14,0,0,[],2023-07-12 17:34:40+00:00,2023-07-24 13:04:45+00:00,1020605.0,"11 days, 19:30:05","[{'comment_id': 1261505523, 'comment_body': ""Would it make more sense to name this something like `ps-args`? It's more intuitive, going by the description."", 'comment_created': datetime.datetime(2023, 7, 12, 17, 38, 24, tzinfo=datetime.timezone.utc), 'commenter': 'snprajwal', 'type': 'User'}, {'comment_id': 1261512162, 'comment_body': 'Hum ðŸ¤”, I prefer `ps-tree-cmd` or maybe `ps-tree-args` ? Because it is still the the process tree that we are dealing with.', 'comment_created': datetime.datetime(2023, 7, 12, 17, 44, 7, tzinfo=datetime.timezone.utc), 'commenter': 'behouba', 'type': 'User'}, {'comment_id': 1261765572, 'comment_body': '`cmd` is what the `ps` utility is using (e.g., `ps a -o pid,cmd`) and I suspect that most users would already be familiar with this tool. Therefore, it might be more familiar for them than `args`. \r\n\r\nIMHO, we currently have the `--ps-tree` option and by concatenating `-cmd` it would be more obvious to users that it is an alternative option with extended functionality, and autocomplete would work better ;)\r\n\r\nFor example:\r\n```\r\n./checkpointctl inspect --ps-tree /tmp/checkpoint.tar.gz\r\n```\r\nvs\r\n```\r\n./checkpointctl inspect --ps-tree-cmd /tmp/checkpoint.tar.gz\r\n```\r\n', 'comment_created': datetime.datetime(2023, 7, 12, 22, 0, 17, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 1261983274, 'comment_body': 'Hmm, makes sense ', 'comment_created': datetime.datetime(2023, 7, 13, 4, 55, 42, tzinfo=datetime.timezone.utc), 'commenter': 'snprajwal', 'type': 'User'}, {'comment_id': 1270570225, 'comment_body': 'Is this a problem? We should silently enable `psTree` when `psTreeCmd = true` anyway', 'comment_created': datetime.datetime(2023, 7, 21, 11, 27, 52, tzinfo=datetime.timezone.utc), 'commenter': 'snprajwal', 'type': 'User'}, {'comment_id': 1270570612, 'comment_body': 'Same suggestion as the other PR, we can move the if block up and set `psTree = true`', 'comment_created': datetime.datetime(2023, 7, 21, 11, 28, 24, tzinfo=datetime.timezone.utc), 'commenter': 'snprajwal', 'type': 'User'}, {'comment_id': 1270928436, 'comment_body': 'This change can be removed, now that we implicitly enable the process tree ', 'comment_created': datetime.datetime(2023, 7, 21, 17, 42, 7, tzinfo=datetime.timezone.utc), 'commenter': 'snprajwal', 'type': 'User'}, {'comment_id': 1271239897, 'comment_body': ""I don't think this will work as expected. If we're returning from the function call, then the loop will terminate after the first child has been processed. Could you please try this with a process tree that has more than one child? I think the ZDTM test suite in CRIU can generate dumps easily for testing, @rst0git would know which test can be used for this."", 'comment_created': datetime.datetime(2023, 7, 22, 3, 59, 41, tzinfo=datetime.timezone.utc), 'commenter': 'snprajwal', 'type': 'User'}, {'comment_id': 1271239912, 'comment_body': '```suggestion\r\n\t\t\t\t\treturn fmt.Errorf(""failed to process command line arguments: %w"", err)\r\n```', 'comment_created': datetime.datetime(2023, 7, 22, 4, 0, tzinfo=datetime.timezone.utc), 'commenter': 'snprajwal', 'type': 'User'}, {'comment_id': 1271239936, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 7, 22, 4, 0, 26, tzinfo=datetime.timezone.utc), 'commenter': 'snprajwal', 'type': 'User'}, {'comment_id': 1271240074, 'comment_body': '```suggestion\r\n\tfor _, child := range psTree.Children {\r\n```\r\nMore idiomatic', 'comment_created': datetime.datetime(2023, 7, 22, 4, 1, 26, tzinfo=datetime.timezone.utc), 'commenter': 'snprajwal', 'type': 'User'}, {'comment_id': 1271268876, 'comment_body': 'Thank you @snprajwal, you were right!', 'comment_created': datetime.datetime(2023, 7, 22, 8, 40, 12, tzinfo=datetime.timezone.utc), 'commenter': 'behouba', 'type': 'User'}, {'comment_id': 1271273330, 'comment_body': 'The ZDTM tests do not use containers and would not be straightforward to use here, but you can use container images from Docker Hub for testing. Here are some examples:\r\n\r\n**Apache httpd**\r\n```\r\npodman run -d --name httpd -p 8080:80 httpd:2.4\r\npodman container checkpoint -l --export=/tmp/httpd.tar.gz\r\nsudo ./checkpointctl inspect --ps-tree-cmd /tmp/httpd.tar.gz \r\n\r\nDisplaying container checkpoint tree view from /tmp/httpd.tar.gz\r\n\r\nhttpd\r\nâ”œâ”€â”€ Image: docker.io/library/httpd:2.4\r\nâ”œâ”€â”€ ID: 0e0df1f9364e217b854718d2e8d77388513d2387fa2e3b2d0369e5e3748d544a\r\nâ”œâ”€â”€ Runtime: crun\r\nâ”œâ”€â”€ Created: 2023-07-22T10:11:39+01:00\r\nâ”œâ”€â”€ Engine: Podman\r\nâ”œâ”€â”€ Checkpoint size: 5.2 MiB\r\nâ”œâ”€â”€ Root FS diff size: 2.0 KiB\r\nâ””â”€â”€ Process tree\r\n    â””â”€â”€ [1]  httpd -DFOREGROUND \r\n        â”œâ”€â”€ [3]  httpd -DFOREGROUND \r\n        â”œâ”€â”€ [4]  httpd -DFOREGROUND \r\n        â””â”€â”€ [5]  httpd -DFOREGROUND \r\n```\r\n\r\n**MySQL**\r\n\r\n```\r\npodman run -d --name mysql -e MYSQL_ROOT_PASSWORD=secret mysql:latest\r\npodman container checkpoint --file-locks -l -e /tmp/mysql.tar.gz\r\nsudo ./checkpointctl inspect --ps-tree-cmd /tmp/mysql.tar.gz \r\n\r\nDisplaying container checkpoint tree view from /tmp/mysql.tar.gz\r\n\r\nmysql\r\nâ”œâ”€â”€ Image: docker.io/library/mysql:latest\r\nâ”œâ”€â”€ ID: 3188fd0634c1c25ecc47711f71fe28e92cfbf380f453306b92a69e39a01121d0\r\nâ”œâ”€â”€ Runtime: crun\r\nâ”œâ”€â”€ Created: 2023-07-22T10:17:05+01:00\r\nâ”œâ”€â”€ Engine: Podman\r\nâ”œâ”€â”€ Checkpoint size: 111.6 MiB\r\nâ””â”€â”€ Process tree\r\n    â””â”€â”€ [1]  /bin/bash /usr/local/bin/docker-entrypoint.sh mysqld \r\n        â””â”€â”€ [74]  mysqld --initialize-insecure --default-time-zone=SYSTEM \r\n```\r\n\r\n**Jira Software**\r\n```\r\npodman run -d --name=jira -p 8080:8080 atlassian/jira-software\r\npodman container checkpoint --file-locks -l -e /tmp/jira.tar.gz\r\nsudo ./checkpointctl inspect --ps-tree-cmd /tmp/jira.tar.gz \r\n\r\nDisplaying container checkpoint tree view from /tmp/jira.tar.gz\r\n\r\njira\r\nâ”œâ”€â”€ Image: docker.io/atlassian/jira-software:latest\r\nâ”œâ”€â”€ ID: f3fb81ec7b676f7e8fa6cafb9f0f25186cafb081b0395a6608a4b058273a59be\r\nâ”œâ”€â”€ Runtime: crun\r\nâ”œâ”€â”€ Created: 2023-07-22T10:21:25+01:00\r\nâ”œâ”€â”€ Engine: Podman\r\nâ”œâ”€â”€ Checkpoint size: 587.6 MiB\r\nâ”œâ”€â”€ Root FS diff size: 78.5 KiB\r\nâ””â”€â”€ Process tree\r\n    â””â”€â”€ [1]  /usr/bin/tini -- /entrypoint.py \r\n        â””â”€â”€ [2]  /opt/java/openjdk/bin/java -Djava.util.logging.config.file=/opt/atlassian/jira/conf/logging.properties -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager -Xms384m -Xmx2048m -XX:InitialCodeCacheSize=32m -XX:ReservedCodeCacheSize=512m -Dlog4j2.contextSelector=org.apache.logging.log4j.core.selector.BasicContextSelector -Dlog4j2.disableJmx=true -Dlog4j2.garbagefree.threadContextMap=true -Dlog4j2.isWebapp=false -Djava.awt.headless=true -Datlassian.standalone=JIRA -Dorg.apache.jasper.runtime.BodyContentImpl.LIMIT_BUFFER=true -Dmail.mime.decodeparameters=true -Dorg.dom4j.factory=com.atlassian.core.xml.InterningDocumentFactory -XX:-OmitStackTraceInFastThrow -Djava.locale.providers=COMPAT -Djira.home=/var/atlassian/application-data/jira -Datlassian.plugins.startup.options=-fg -Djdk.tls.ephemeralDHKeySize=2048 -Djava.protocol.handler.pkgs=org.apache.catalina.webresources -Dorg.apache.catalina.security.SecurityListener.UMASK=0027 -Xlog:gc*:file=/opt/atlassian/jira/logs/atlassian-jira-gc-%t.log:tags,time,uptime,level:filecount=5,filesize=20M -XX:+ExplicitGCInvokesConcurrent -Dignore.endorsed.dirs= -classpath /opt/atlassian/jira/bin/bootstrap.jar:/opt/atlassian/jira/bin/tomcat-juli.jar -Dcatalina.base=/opt/atlassian/jira -Dcatalina.home=/opt/atlassian/jira -Djava.io.tmpdir=/opt/atlassian/jira/temp org.apache.catalina.startup.Bootstrap start \r\n```', 'comment_created': datetime.datetime(2023, 7, 22, 9, 24, 29, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 1271275499, 'comment_body': 'Thank you, @rst0git, whose containers seem well-suited for this kind of testing. I will use them next time.', 'comment_created': datetime.datetime(2023, 7, 22, 9, 48, 10, tzinfo=datetime.timezone.utc), 'commenter': 'behouba', 'type': 'User'}]","[{'commit_sha': '2078dbb2151a5fc62ef4492e999223093f27f6ed', 'committer_username': 'behouba', 'committer_name': 'Behouba MK', 'committer_email': 'behouba@gmail.com', 'commit_date': datetime.datetime(2017, 4, 5, 21, 48, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b887b14e4d7915a2ebd5a68f5e7b89efe777a31', 'committer_username': 'behouba', 'committer_name': 'Behouba MK', 'committer_email': 'behouba@gmail.com', 'commit_date': datetime.datetime(2017, 4, 5, 21, 48, 25, tzinfo=datetime.timezone.utc)}]",Behouba MK,26941907,behouba@gmail.com,User,,79,,156,82
1441008529,feat: display process tree with environment variables,"This commit introduces a new flag, --ps-tree-env, which enables the display of process environment variables in the process tree output.

Example output:

```bash
$ checkpointctl inspect --ps-tree-cmd /path/to/checkpoint.tar.gz 

Displaying container checkpoint tree view from /home/behouba/checkpoints/httpd.tar.gz

httpd
â”œâ”€â”€ Image: docker.io/library/httpd:2.4
â”œâ”€â”€ ID: 4f6831a7e8e641e75578704cb90bcbd987b6d9655404b58f5cbf954d042f3212
â”œâ”€â”€ Runtime: crun
â”œâ”€â”€ Created: 2023-07-22T13:14:49+03:00
â”œâ”€â”€ Engine: Podman
â”œâ”€â”€ Checkpoint size: 5.2 MiB
â”œâ”€â”€ Root FS diff size: 2.0 KiB
â””â”€â”€ Process tree
    â””â”€â”€ [1]  httpd
        â”œâ”€â”€ HTTPD_VERSION=2.4.57
        â”œâ”€â”€ HOSTNAME=4f6831a7e8e6
        â”œâ”€â”€ HOME=/root
        â”œâ”€â”€ HTTPD_PATCHES=rewrite-windows-testchar-h.patch 1d5620574fa03b483262dc5b9a66a6906553389952ab5d3070a02f887cc20193
        â”œâ”€â”€ container=podman
        â”œâ”€â”€ TERM=xterm
        â”œâ”€â”€ PATH=/usr/local/apache2/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
        â”œâ”€â”€ HTTPD_SHA256=dbccb84aee95e095edfbb81e5eb926ccd24e6ada55dcd83caecb262e5cf94d2a
        â”œâ”€â”€ HTTPD_PREFIX=/usr/local/apache2
        â”œâ”€â”€ PWD=/usr/local/apache2
        â”œâ”€â”€ [4]  httpd
        â”‚   â”œâ”€â”€ HTTPD_VERSION=2.4.57
        â”‚   â”œâ”€â”€ HOSTNAME=4f6831a7e8e6
        â”‚   â”œâ”€â”€ HOME=/root
        â”‚   â”œâ”€â”€ HTTPD_PATCHES=rewrite-windows-testchar-h.patch 1d5620574fa03b483262dc5b9a66a6906553389952ab5d3070a02f887cc20193
        â”‚   â”œâ”€â”€ container=podman
        â”‚   â”œâ”€â”€ TERM=xterm
        â”‚   â”œâ”€â”€ PATH=/usr/local/apache2/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
        â”‚   â”œâ”€â”€ HTTPD_SHA256=dbccb84aee95e095edfbb81e5eb926ccd24e6ada55dcd83caecb262e5cf94d2a
        â”‚   â”œâ”€â”€ HTTPD_PREFIX=/usr/local/apache2
        â”‚   â””â”€â”€ PWD=/usr/local/apache2
```",True,90,https://api.github.com/repos/checkpoint-restore/checkpointctl/pulls/90,https://github.com/checkpoint-restore/checkpointctl/pull/90,closed,80,9,4,2,2,4,0,0,[],2023-07-19 13:12:28+00:00,2023-07-26 06:05:31+00:00,579183.0,"6 days, 16:53:03","[{'comment_id': 1269423664, 'comment_body': 'Why do we need to exit with an error when both `--ps-tree` and `--ps-tree-env` have been specified?', 'comment_created': datetime.datetime(2023, 7, 20, 12, 57, 38, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 1269518688, 'comment_body': 'I thought that they might cause some clashes. However, after testing both, I see that they can be used together without problem. Will remove that.', 'comment_created': datetime.datetime(2023, 7, 20, 14, 8, 42, tzinfo=datetime.timezone.utc), 'commenter': 'behouba', 'type': 'User'}, {'comment_id': 1269642081, 'comment_body': 'I feel instead of this, we should move the if block for `psTreeEnv` up and set `psTree = true` in that, like how we do with `files`', 'comment_created': datetime.datetime(2023, 7, 20, 15, 33, 13, tzinfo=datetime.timezone.utc), 'commenter': 'snprajwal', 'type': 'User'}, {'comment_id': 1269656372, 'comment_body': 'Agree, thank you @snprajwal ', 'comment_created': datetime.datetime(2023, 7, 20, 15, 45, 13, tzinfo=datetime.timezone.utc), 'commenter': 'behouba', 'type': 'User'}]","[{'commit_sha': 'af80785818114adf93b0fffa5ed10975b258d835', 'committer_username': 'behouba', 'committer_name': 'Behouba MK', 'committer_email': 'behouba@gmail.com', 'commit_date': datetime.datetime(2017, 4, 5, 21, 48, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2105caa1b6df48cc1da123b40902c88e6d4e5155', 'committer_username': 'behouba', 'committer_name': 'Behouba MK', 'committer_email': 'behouba@gmail.com', 'commit_date': datetime.datetime(2017, 4, 5, 21, 48, 25, tzinfo=datetime.timezone.utc)}]",Behouba MK,26941907,behouba@gmail.com,User,,79,,156,82
1454742329,feat: add `memparse` sub-command,"This PR introduces a new sub-command `memparse` ,  which allows analyzing processes memory pages. 
This new feature was discussed here #69. 

When used without any arguments, the command displays a table showing the memory sizes of processes. Here's an example:
```bash
$ checkpointctl memparse /path/to/checkpoints/jira.tar.gz 

Displaying processes memory sizes from /home/behouba/checkpoints/jira.tar.gz

+-----+--------------+-------------+
| PID | PROCESS NAME | MEMORY SIZE |
+-----+--------------+-------------+
|   1 | tini         | 100.0 KiB   |
+-----+--------------+-------------+
|   2 | java         | 553.5 MiB   |
+-----+--------------+-------------+
```

If a process ID (pid) is provided, the command prints the memory pages of that specific process in a hexdump-like format. For instance:

```bash
$ checkpointctl memparse /path/to/checkpoints/jira.tar.gz  --pid=1 | less

Displaying memory pages content for Process ID 1 from checkpoint: /home/behouba/checkpoints/jira.tar.gz

Address           Hexadecimal                                       ASCII            
-------------------------------------------------------------------------------------
00005633bb080000  f3 0f 1e fa 48 83 ec 08 48 8b 05 d1 4f 00 00 48  |....H...H...O..H|
00005633bb080010  85 c0 74 02 ff d0 48 83 c4 08 c3 00 00 00 00 00  |..t...H.........|
00005633bb080020  ff 35 b2 4e 00 00 f2 ff 25 b3 4e 00 00 0f 1f 00  |.5.N....%.N.....|
00005633bb080030  f3 0f 1e fa 68 00 00 00 00 f2 e9 e1 ff ff ff 90  |....h...........|
*
00005633bb0800a0  f3 0f 1e fa 68 07 00 00 00 f2 e9 71 ff ff ff 90  |....h......q....|
00005633bb0800b0  f3 0f 1e fa 68 08 00 00 00 f2 e9 61 ff ff ff 90  |....h......a....|
00005633bb0800c0  f3 0f 1e fa 68 09 00 00 00 f2 e9 51 ff ff ff 90  |....h......Q....|
00005633bb0800d0  f3 0f 1e fa 68 0a 00 00 00 f2 e9 41 ff ff ff 90  |....h......A....|
00005633bb0800e0  f3 0f 1e fa 68 0b 00 00 00 f2 e9 31 ff ff ff 90  |....h......1....|
````
This output can be written to a file instead of stdout using the `--output` flag.

@rst0git, @adrianreber, could you please take a look?",True,95,https://api.github.com/repos/checkpoint-restore/checkpointctl/pulls/95,https://github.com/checkpoint-restore/checkpointctl/pull/95,closed,425,26,5,4,6,21,0,0,[],2023-07-29 12:04:00+00:00,2023-08-09 13:45:04+00:00,956464.0,"11 days, 1:41:04","[{'comment_id': 1279102713, 'comment_body': '```suggestion\r\n\t\t""Specify the PID of a process to analyze"",\r\n```', 'comment_created': datetime.datetime(2023, 7, 31, 10, 28, 15, tzinfo=datetime.timezone.utc), 'commenter': 'snprajwal', 'type': 'User'}, {'comment_id': 1279102939, 'comment_body': '```suggestion\r\n\t\t""Specify the output file to be written to"",\r\n```', 'comment_created': datetime.datetime(2023, 7, 31, 10, 28, 32, tzinfo=datetime.timezone.utc), 'commenter': 'snprajwal', 'type': 'User'}, {'comment_id': 1279104675, 'comment_body': '```suggestion\r\n\t\tfmt.Printf(""\\nDisplaying memory pages content for process ID %d from checkpoint: %s\\n\\n"", pID, task.checkpointFilePath)\r\n```', 'comment_created': datetime.datetime(2023, 7, 31, 10, 30, 26, tzinfo=datetime.timezone.utc), 'commenter': 'snprajwal', 'type': 'User'}, {'comment_id': 1279109289, 'comment_body': 'Instead of using an int to  track the duplicate, we can use a boolean `showDuplicate` instead\r\n```suggestion\r\n\t\t\tif prevAscii == ascii {\r\n\t\t\t\tif showDuplicate {\r\n\t\t\t\t\tfmt.Fprint(out, ""*\\n"")\r\n\t\t\t\t\tshowDuplicate = false\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tprintHexdumpRow(out, vaddr, hex, ascii)\r\n\t\t\t\tshowDuplicate = true\r\n\t\t\t}\r\n```', 'comment_created': datetime.datetime(2023, 7, 31, 10, 35, 29, tzinfo=datetime.timezone.utc), 'commenter': 'snprajwal', 'type': 'User'}, {'comment_id': 1279111053, 'comment_body': ':thinking: this function is just a single line, does it need to be a separate function? The compiler will anyway inline it while optimising, but it still requires a jump from one location to another while reading the code.', 'comment_created': datetime.datetime(2023, 7, 31, 10, 37, 21, tzinfo=datetime.timezone.utc), 'commenter': 'snprajwal', 'type': 'User'}, {'comment_id': 1279114800, 'comment_body': 'This cast is not required, since we directly operate on the ASCII values of the characters, which is provided by the byte slice. The function will work identically if `data` is used in place of `s`.', 'comment_created': datetime.datetime(2023, 7, 31, 10, 40, 48, tzinfo=datetime.timezone.utc), 'commenter': 'snprajwal', 'type': 'User'}, {'comment_id': 1279119068, 'comment_body': ""If we're using named return values in the function definition (L168), a `return` should suffice. While named return values don't reduce the code readability for something this small, it is still slightly unintuitive, and I tend to prefer using `(string, string)` in the function signature and explicitly initialising the return values at the beginning of the function body instead. Just a preference :)"", 'comment_created': datetime.datetime(2023, 7, 31, 10, 45, 28, tzinfo=datetime.timezone.utc), 'commenter': 'snprajwal', 'type': 'User'}, {'comment_id': 1279155244, 'comment_body': 'I followed this approach to ensure consistent formatting for each row. If creating a new function would cause compiler overhead, I agree that it might be better not to declare a new function.\r\nThanks @snprajwal ;)', 'comment_created': datetime.datetime(2023, 7, 31, 11, 19, 9, tzinfo=datetime.timezone.utc), 'commenter': 'behouba', 'type': 'User'}, {'comment_id': 1280292336, 'comment_body': 'Should we extract only the relevant `pagemap-{PID}.img`, `pages-{PID}.img` and `mm-{PID}.img` files from the checkpoint archive when `--pid` has been specified? In addition, we could show appropriate error message if the specified PID does not exist in the checkpoint.', 'comment_created': datetime.datetime(2023, 8, 1, 8, 38, 22, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 1280437542, 'comment_body': 'Yes, I was also thinking about this yesterday. To do this, I need to make a change in `crit` (add a getter function to get the value of `pagesID` ). \r\n\r\nShould i open a PR on `go-criu`  now ?', 'comment_created': datetime.datetime(2023, 8, 1, 10, 34, 17, tzinfo=datetime.timezone.utc), 'commenter': 'behouba', 'type': 'User'}, {'comment_id': 1280505752, 'comment_body': ""> To do this, I need to make a change in crit (add a getter function to get the value of pageNo). Should i open a PR on go-criu now?\r\n\r\nIt might be worth implementing this because it can significantly improve the performance for large container checkpoints. Also, when the `--pid` option is not used perhaps we don't need to extract `pages-` and `mm-`?"", 'comment_created': datetime.datetime(2023, 8, 1, 11, 43, 41, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 1282278924, 'comment_body': '```suggestion\r\n}\r\n\r\n```', 'comment_created': datetime.datetime(2023, 8, 2, 18, 29, 1, tzinfo=datetime.timezone.utc), 'commenter': 'snprajwal', 'type': 'User'}, {'comment_id': 1282280957, 'comment_body': ""It would be better to use `fmt.Fprintln` here, since we're not formatting anything. `fmt.Fprintf` is slower as it needs to check the string for format specifiers and process every argument. Ditto for the line below (143)"", 'comment_created': datetime.datetime(2023, 8, 2, 18, 31, 13, tzinfo=datetime.timezone.utc), 'commenter': 'snprajwal', 'type': 'User'}, {'comment_id': 1282284351, 'comment_body': 'ðŸ¤” I think it is safe to name this variable as just `process`, since the condition implies that it is the found process if it is not nil. `foundProcess` sounds like a boolean to me.', 'comment_created': datetime.datetime(2023, 8, 2, 18, 35, 11, tzinfo=datetime.timezone.utc), 'commenter': 'snprajwal', 'type': 'User'}, {'comment_id': 1282287834, 'comment_body': 'Would it be more appropriate to name this `findPs`? . It is well known that a PID is the primary identifier for a process, and we are searching for a process rather than a process tree.', 'comment_created': datetime.datetime(2023, 8, 2, 18, 39, 22, tzinfo=datetime.timezone.utc), 'commenter': 'snprajwal', 'type': 'User'}, {'comment_id': 1282292019, 'comment_body': 'It might also make sense to provide this as a method on `*PsTree` through go-criu, so that it can be used like `tree.FindPs(<pid>)`. Considering the possible use cases for this function, it would be nice to have it as a native library function instead of expecting the user to implement it themselves.', 'comment_created': datetime.datetime(2023, 8, 2, 18, 44, 20, tzinfo=datetime.timezone.utc), 'commenter': 'snprajwal', 'type': 'User'}, {'comment_id': 1282326536, 'comment_body': '> It might also make sense to provide this as a method on `*PsTree` through go-criu,\r\n\r\nThis make sense to me as well. Can I add this  as a method of `PsTree` inside `go-criu/crit`  @rst0git , @adrianreber  ?', 'comment_created': datetime.datetime(2023, 8, 2, 19, 23, 53, tzinfo=datetime.timezone.utc), 'commenter': 'behouba', 'type': 'User'}, {'comment_id': 1282481543, 'comment_body': 'Indeed, depth-first search for PsTree has many possible use cases. It would make sense to be in go-criu.', 'comment_created': datetime.datetime(2023, 8, 2, 22, 43, 46, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 1284079213, 'comment_body': 'Should we move this change in a separate pull request that also updates `go-criu` when https://github.com/checkpoint-restore/go-criu/pull/138 has been merged?', 'comment_created': datetime.datetime(2023, 8, 4, 7, 26, 44, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 1287917787, 'comment_body': '```Suggestion\r\n$ sudo checkpointctl memparse /tmp/jira.tar.gz\r\n```', 'comment_created': datetime.datetime(2023, 8, 9, 4, 30, 28, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 1287918061, 'comment_body': '```Suggestion\r\n$ sudo checkpointctl memparse --pid=2 /tmp/jira.tar.gz --output=/tmp/java-memory-pages.txt\r\n```', 'comment_created': datetime.datetime(2023, 8, 9, 4, 30, 58, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}]","[{'commit_sha': 'd03474120a37b915293af75bad1021675b84a2e9', 'committer_username': 'behouba', 'committer_name': 'Behouba MK', 'committer_email': 'behouba@gmail.com', 'commit_date': datetime.datetime(2017, 4, 5, 21, 48, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '632acf289825353bbe21ad257fac1c86ec48a1cc', 'committer_username': 'behouba', 'committer_name': 'Behouba MK', 'committer_email': 'behouba@gmail.com', 'commit_date': datetime.datetime(2017, 4, 5, 21, 48, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '770e424e9044f971edaa9465d725ed49eab15a50', 'committer_username': 'behouba', 'committer_name': 'Behouba MK', 'committer_email': 'behouba@gmail.com', 'commit_date': datetime.datetime(2017, 4, 5, 21, 48, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9e574230c2b4a256eadd6a1a968ff9cb7f5b6e8', 'committer_username': 'behouba', 'committer_name': 'Behouba MK', 'committer_email': 'behouba@gmail.com', 'commit_date': datetime.datetime(2017, 4, 5, 21, 48, 25, tzinfo=datetime.timezone.utc)}]",Behouba MK,26941907,behouba@gmail.com,User,,79,,156,82

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
152456668,go-criu,checkpoint-restore/go-criu,Go,43,161,10,15,361,2,1,0,"[{'id': 1758918631, 'number': 163, 'closed': datetime.datetime(2024, 7, 28, 16, 2, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 3, 6, 13, 24, 50, tzinfo=datetime.timezone.utc), 'time_taken': 12451058.0, 'time_delta': '144 days, 2:37:38', 'additions': 191, 'deletions': 8, 'state': 'closed'}, {'id': 1754553550, 'number': 162, 'closed': datetime.datetime(2024, 3, 4, 14, 7, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 3, 4, 11, 46, 48, tzinfo=datetime.timezone.utc), 'time_taken': 8423.0, 'time_delta': '2:20:23', 'additions': 7, 'deletions': 7, 'state': 'closed'}, {'id': 1472419330, 'number': 146, 'closed': datetime.datetime(2023, 8, 22, 8, 45, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 11, 22, 37, 14, tzinfo=datetime.timezone.utc), 'time_taken': 900471.0, 'time_delta': '10 days, 10:07:51', 'additions': 338, 'deletions': 27, 'state': 'closed'}, {'id': 1461242214, 'number': 145, 'closed': datetime.datetime(2023, 8, 3, 21, 3, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 3, 10, 47, 37, tzinfo=datetime.timezone.utc), 'time_taken': 36947.0, 'time_delta': '10:15:47', 'additions': 59, 'deletions': 0, 'state': 'closed'}, {'id': 1458031496, 'number': 142, 'closed': datetime.datetime(2023, 8, 2, 12, 59, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 1, 12, 40, tzinfo=datetime.timezone.utc), 'time_taken': 87556.0, 'time_delta': '1 day, 0:19:16', 'additions': 4, 'deletions': 0, 'state': 'closed'}, {'id': 1376002318, 'number': 133, 'closed': datetime.datetime(2023, 6, 16, 8, 33, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 2, 16, 0, 40, tzinfo=datetime.timezone.utc), 'time_taken': 1182777.0, 'time_delta': '13 days, 16:32:57', 'additions': 498, 'deletions': 0, 'state': 'closed'}]"
333505439,checkpointctl,checkpoint-restore/checkpointctl,Go,15,93,12,11,279,7,2,3,"[{'id': 1979746736, 'number': 141, 'closed': None, 'created': datetime.datetime(2024, 7, 21, 2, 23, 35, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 291, 'deletions': 22, 'state': 'open'}, {'id': 1497887472, 'number': 103, 'closed': datetime.datetime(2023, 9, 1, 10, 16, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 31, 21, 12, 59, tzinfo=datetime.timezone.utc), 'time_taken': 47014.0, 'time_delta': '13:03:34', 'additions': 32, 'deletions': 4, 'state': 'closed'}, {'id': 1465835452, 'number': 99, 'closed': datetime.datetime(2023, 8, 7, 20, 6, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 7, 19, 55, 39, tzinfo=datetime.timezone.utc), 'time_taken': 665.0, 'time_delta': '0:11:05', 'additions': 1256, 'deletions': 503, 'state': 'closed'}, {'id': 1454742329, 'number': 95, 'closed': datetime.datetime(2023, 8, 9, 13, 45, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 29, 12, 4, tzinfo=datetime.timezone.utc), 'time_taken': 956464.0, 'time_delta': '11 days, 1:41:04', 'additions': 425, 'deletions': 26, 'state': 'closed'}, {'id': 1442408284, 'number': 92, 'closed': datetime.datetime(2023, 7, 20, 12, 48, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 20, 8, 42, 4, tzinfo=datetime.timezone.utc), 'time_taken': 14764.0, 'time_delta': '4:06:04', 'additions': 4, 'deletions': 4, 'state': 'closed'}, {'id': 1441008529, 'number': 90, 'closed': datetime.datetime(2023, 7, 26, 6, 5, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 19, 13, 12, 28, tzinfo=datetime.timezone.utc), 'time_taken': 579183.0, 'time_delta': '6 days, 16:53:03', 'additions': 80, 'deletions': 9, 'state': 'closed'}, {'id': 1431704563, 'number': 89, 'closed': datetime.datetime(2023, 7, 24, 13, 4, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 12, 17, 34, 40, tzinfo=datetime.timezone.utc), 'time_taken': 1020605.0, 'time_delta': '11 days, 19:30:05', 'additions': 100, 'deletions': 9, 'state': 'closed'}, {'id': 1423968957, 'number': 85, 'closed': datetime.datetime(2023, 7, 11, 13, 38, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 7, 4, 33, 3, tzinfo=datetime.timezone.utc), 'time_taken': 378324.0, 'time_delta': '4 days, 9:05:24', 'additions': 22, 'deletions': 17, 'state': 'closed'}, {'id': 1399053402, 'number': 76, 'closed': datetime.datetime(2023, 7, 3, 15, 12, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 20, 1, 38, 56, tzinfo=datetime.timezone.utc), 'time_taken': 1172004.0, 'time_delta': '13 days, 13:33:24', 'additions': 427, 'deletions': 299, 'state': 'closed'}, {'id': 1394507807, 'number': 69, 'closed': datetime.datetime(2023, 8, 9, 13, 46, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 15, 17, 21, 15, tzinfo=datetime.timezone.utc), 'time_taken': 4739117.0, 'time_delta': '54 days, 20:25:17', 'additions': 2652, 'deletions': 10077, 'state': 'closed'}, {'id': 1387254958, 'number': 67, 'closed': datetime.datetime(2023, 6, 19, 10, 43, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 10, 19, 52, 42, tzinfo=datetime.timezone.utc), 'time_taken': 744654.0, 'time_delta': '8 days, 14:50:54', 'additions': 188, 'deletions': 127, 'state': 'closed'}, {'id': 1365220232, 'number': 55, 'closed': datetime.datetime(2023, 6, 2, 18, 28, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 25, 19, 13, 36, tzinfo=datetime.timezone.utc), 'time_taken': 688511.0, 'time_delta': '7 days, 23:15:11', 'additions': 187, 'deletions': 30, 'state': 'closed'}]"
