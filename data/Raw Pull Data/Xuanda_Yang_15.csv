pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
422426020,[mypyc]Implement CallC IR,"relates mypyc/mypyc#709

This PR adds a new IR op `CallC` to replace some `PrimitiveOp` that simply calls a C function. To demonstrate this prototype, `str.join` primitive is now switched from `PrimitiveOp` to `CallC`, with identical generated C code:

Test driver code
```python
from typing import List

def test_str_join_helper(helper_arg: List[str]) -> str:
    helper_base = ""#""
    return helper_base.join(helper_arg)

def main():
    l = [""a"", ""bb"", ""cc""]
    print(test_str_join_helper(l))

main()
```

generated C code(for the helper function, identical before/after):
```C
PyObject *CPyDef_test_str_join_helper(PyObject *cpy_r_helper_arg) {
    PyObject *cpy_r_r0;
    PyObject *cpy_r_helper_base;
    PyObject *cpy_r_r1;
    PyObject *cpy_r_r2;
CPyL0: ;
    cpy_r_r0 = CPyStatic_unicode_3; /* '#' */
    CPy_INCREF(cpy_r_r0);
    cpy_r_helper_base = cpy_r_r0;
    cpy_r_r1 = PyUnicode_Join(cpy_r_helper_base, cpy_r_helper_arg);
    CPy_DecRef(cpy_r_helper_base);
    if (unlikely(cpy_r_r1 == NULL)) {
        CPy_AddTraceback(""foo.py"", ""test_str_join_helper"", 5, CPyStatic_globals);
        goto CPyL2;
    } else
        goto CPyL1;
CPyL1: ;
    return cpy_r_r1;
CPyL2: ;
    cpy_r_r2 = NULL;
    return cpy_r_r2;
}
```

Some objectives need to be completed after some discussion.

- [x] figure out the differences between`OpDescrption` and new `LLOpDescrption`, do we need fields including `is_var_arg`, `steals`, `is_borrowed`?(Not supported in this PR yet, but we will gradually update the design when we encounter ops that require such changes)
- [x] support void functions(through a flag?)
- [x] textual IR testcase",True,8880,https://api.github.com/repos/python/mypy/pulls/8880,https://github.com/python/mypy/pull/8880,closed,125,9,7,8,1,9,0,0,[],2020-05-24 15:05:41+00:00,2020-05-27 09:53:57+00:00,240496.0,"2 days, 18:48:16","[{'comment_id': 429878694, 'comment_body': 'Bikeshedding: for consistency with the existing `Call` primitive, a name such as `CallC` would arguably be more consistent. Later on we may want to merge `Call` and `CallC`.', 'comment_created': datetime.datetime(2020, 5, 25, 11, 13, 53, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 429882078, 'comment_body': 'I think that the `:: c_function_call` suffix is too verbose. We can leave it out for now, even though this results in some ambiguity. f/when we merge `Call` and this new class, we can figure out how to disambiguate different names.', 'comment_created': datetime.datetime(2020, 5, 25, 11, 22, 50, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 429883244, 'comment_body': ""We'll want to have C functions that are not ERR_MAGIC. Some things will never return an error, for example."", 'comment_created': datetime.datetime(2020, 5, 25, 11, 25, 41, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 429883552, 'comment_body': 'If you rename the class, also rename everything else that has a name derived from the old name.', 'comment_created': datetime.datetime(2020, 5, 25, 11, 26, 28, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 429884979, 'comment_body': ""This name doesn't fit the current implementation. Can you propose a new name that communicates that this specifically describes how to call a C function? "", 'comment_created': datetime.datetime(2020, 5, 25, 11, 29, 49, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 429927891, 'comment_body': 'I am using `CFunctionDescription` in the updated commits.', 'comment_created': datetime.datetime(2020, 5, 25, 13, 12, 59, tzinfo=datetime.timezone.utc), 'commenter': 'TH3CHARLie', 'type': 'User'}, {'comment_id': 430563798, 'comment_body': 'This comment is out of date.', 'comment_created': datetime.datetime(2020, 5, 26, 16, 53, 34, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 430565488, 'comment_body': 'Since we store a method call here, the name is the short name of a method (i.e, not a fully qualified name such as `builtins.ord`). For consistency with the existing registries, a better name would be `c_method_call_ops` or similar. We can then have a separate dictionary for module-level functions.', 'comment_created': datetime.datetime(2020, 5, 26, 16, 56, 13, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 430566532, 'comment_body': ""Similar to above, something with 'method' in it would be a better name. For example, `c_method_op`. (These names will be temporary as we'll eventually remove `method_op`.)"", 'comment_created': datetime.datetime(2020, 5, 26, 16, 57, 53, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}]","[{'commit_sha': '77675650c7fcf200b97bb101f40fa923ebf73e81', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'baa9dce3cc0f239605448cc2bcb61a16b77c5a19', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cee40f09c09aaef33433d6183d8f85ee0f2af6ca', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'afa3efe7317751b0e2defe27145b2a6934481473', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa3a82b9270ebc67da1a6a9bb5b3111044d328f6', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '789a52288490bff41126ecd1213e1be2dc20d143', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'acf054f3281cc0540e28310cf6b94acd7ddd319b', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '637227e859e3dca5cb2906028e31820c1b1f4b3a', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}]",Xuanda Yang,22651013,th3charlie@gmail.com,User,,19,,14,92
423969720,[mypyc] Support top level function ops via CallC,"relates mypyc/mypyc#709

This PR supports top-level function ops via recently added `CallC` IR. To demonstrate the idea, it transform `to_list` op from `PrimitiveOp` to `CallC`. It also refines `CallC` with arguments coercing and support of `steals`.",True,8902,https://api.github.com/repos/python/mypy/pulls/8902,https://github.com/python/mypy/pull/8902,closed,119,26,7,11,5,11,0,0,[],2020-05-27 16:25:48+00:00,2020-06-01 11:10:43+00:00,413095.0,"4 days, 18:44:55","[{'comment_id': 432014068, 'comment_body': 'I delete a blank line here and I find that one/two blank line(s) is used interchangeably. I am surprised that flake8 is OK with this', 'comment_created': datetime.datetime(2020, 5, 28, 17, 46, 7, tzinfo=datetime.timezone.utc), 'commenter': 'TH3CHARLie', 'type': 'User'}, {'comment_id': 432389731, 'comment_body': 'Result type seems important to preserve -- we may need it to box/unbox the result?', 'comment_created': datetime.datetime(2020, 5, 29, 10, 14, 16, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 432390667, 'comment_body': 'We should probably pass the expected type here, similar to `matching_primitive_op` below (`self.node_type(expr)`).', 'comment_created': datetime.datetime(2020, 5, 29, 10, 16, 13, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 432391460, 'comment_body': 'Maybe simplify this by requiring an explicit `void_rtype` instead of `None` as the `result_type`?', 'comment_created': datetime.datetime(2020, 5, 29, 10, 17, 56, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 432391832, 'comment_body': 'I think that this is still useful to have. This would be the type the result should be coerced into, which can be different from the return type of the called function.', 'comment_created': datetime.datetime(2020, 5, 29, 10, 18, 52, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 432392492, 'comment_body': 'Also coerce the result into `result_type`? Maybe rename `desc.result_type` to `desc.return_type` or something to avoid confusion. Return type would be the type of the value returned by the function, and result type would be the type that the return value needs to be coerced to, based on the context.', 'comment_created': datetime.datetime(2020, 5, 29, 10, 20, 6, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 432392658, 'comment_body': 'Again, propagating the result type seems important.', 'comment_created': datetime.datetime(2020, 5, 29, 10, 20, 28, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 432393521, 'comment_body': 'As discussed above, maybe rename this to `return_type`.', 'comment_created': datetime.datetime(2020, 5, 29, 10, 22, 17, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 432420736, 'comment_body': ""Yes, you are right. I misunderstand this, I thought that return type in the description provided enough information but it's clearly not the case."", 'comment_created': datetime.datetime(2020, 5, 29, 11, 24, 17, tzinfo=datetime.timezone.utc), 'commenter': 'TH3CHARLie', 'type': 'User'}, {'comment_id': 432421298, 'comment_body': 'This is super reasonable and I clearly miss that distinction.', 'comment_created': datetime.datetime(2020, 5, 29, 11, 25, 40, tzinfo=datetime.timezone.utc), 'commenter': 'TH3CHARLie', 'type': 'User'}, {'comment_id': 432631393, 'comment_body': '`desc.return_type`(after naming) is now of type `RType`, for void functions, its description should be set to `void_rtype`', 'comment_created': datetime.datetime(2020, 5, 29, 17, 25, 35, tzinfo=datetime.timezone.utc), 'commenter': 'TH3CHARLie', 'type': 'User'}]","[{'commit_sha': 'e72dde2cd0104991670c0ed60dae94ad7e47a963', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e5659638426341e6440c6a51c03a787e323b3e74', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b69bf2bbeb411fe36c48d68e4e2f3e28ea8a29b9', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0a60ddd537732a94fac36401d86727683e0f31c', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dbbd76c4042342c7d98cdd8b101145abf6c46be9', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57a1b91beeba55fa35b9d94bcab8bf12ae39d688', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64b547a5b2b73ba540724f73c693186323768b9c', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '983d6355d39352a634e2bb79aed797596a4d1b7b', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a8d01a9815a6c743f3c5ba5685d9c7f125a8d512', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2c5b4071b429f16eb97887b7e5cc65d7a2fa852', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48895c252d1448effab83e9935964f6b78e485e1', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}]",Xuanda Yang,22651013,th3charlie@gmail.com,User,,19,,14,92
426030620,Support binary ops via CallC,"related mypyc/mypyc#709, mypyc/mypyc#734",True,8929,https://api.github.com/repos/python/mypy/pulls/8929,https://github.com/python/mypy/pull/8929,closed,44,24,5,3,0,0,0,0,[],2020-06-01 14:57:20+00:00,2020-06-01 15:52:17+00:00,3297.0,0:54:57,[],"[{'commit_sha': 'e5a378b7b9b83e9e1f9ba081b8c5dc88591080b0', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cab20b34ea547af532fd1faa1b65ffd7c9f2f648', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51b413fb764ba12f166dc3d01e43bc00c927ec0b', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}]",Xuanda Yang,22651013,th3charlie@gmail.com,User,,19,,14,92
426751645,Support unary op via CallC,"related mypyc/mypyc#709, mypyc/mypyc#734

Support unary ops and provide `int_neg_op` as an example.",True,8933,https://api.github.com/repos/python/mypy/pulls/8933,https://github.com/python/mypy/pull/8933,closed,36,16,6,1,1,2,0,0,[],2020-06-02 18:15:53+00:00,2020-06-03 10:01:44+00:00,56751.0,15:45:51,"[{'comment_id': 434083116, 'comment_body': 'Some thoughts: I think the original design somehow reflects or predicts what we are doing now', 'comment_created': datetime.datetime(2020, 6, 2, 18, 16, 50, tzinfo=datetime.timezone.utc), 'commenter': 'TH3CHARLie', 'type': 'User'}, {'comment_id': 434452700, 'comment_body': 'Yeah, the new approach fits in very nicely here.', 'comment_created': datetime.datetime(2020, 6, 3, 10, 0, 52, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}]","[{'commit_sha': 'b87beb37474538988f99d4212742aac851cd5b90', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}]",Xuanda Yang,22651013,th3charlie@gmail.com,User,,19,,14,92
427761994,"[mypyc] Support var arg in CallC, replace new_dict_op","related mypyc/mypyc#709 mypyc/mypyc#734

Summary:
- introduce variable arguments in `CallC`
- replace old `new_dict_op`(which relies on a specialized emit callback) with two `CallC` ops: `dict_new_op` and `dict_build_op`, which handles create an empty dict and a dict from k-v pairs.
- fix related IR tests, especially separate the `testDel` case into three subcases which test list, dict and attributes respectively.",True,8948,https://api.github.com/repos/python/mypy/pulls/8948,https://github.com/python/mypy/pull/8948,closed,323,210,11,12,1,11,0,0,[],2020-06-04 11:11:48+00:00,2020-06-09 09:17:01+00:00,425113.0,"4 days, 22:05:13","[{'comment_id': 436588896, 'comment_body': 'Document this attribute.', 'comment_created': datetime.datetime(2020, 6, 8, 10, 8, 10, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 436590612, 'comment_body': 'This same code is repeated above around line 589. Maybe extract these lines into a helper method and share the code?', 'comment_created': datetime.datetime(2020, 6, 8, 10, 11, 26, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 436592113, 'comment_body': 'For consistency with other ops, add a single-line comment (e.g. ""Create an empty dictionary"").\r\n\r\nCan we remove the old op, or is it still needed for something?', 'comment_created': datetime.datetime(2020, 6, 8, 10, 14, 21, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 436592773, 'comment_body': 'Add a single-line comment that documents what this does and explains the arguments.', 'comment_created': datetime.datetime(2020, 6, 8, 10, 15, 35, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 436593449, 'comment_body': 'Add a docstring and document at least `var_arg_type`.', 'comment_created': datetime.datetime(2020, 6, 8, 10, 16, 48, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 436593815, 'comment_body': 'Add a docstring here as well.', 'comment_created': datetime.datetime(2020, 6, 8, 10, 17, 28, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 436595516, 'comment_body': 'Add a docstring, similar to above. You can use the docstring of `custom_op` as a starting point and tweak it (and similarly for the other docstrings).', 'comment_created': datetime.datetime(2020, 6, 8, 10, 20, 52, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 436596318, 'comment_body': 'Minor nit: I think that this argument can be left out and we can rely on the default; (almost) all binary ops will likely use positional arguments.', 'comment_created': datetime.datetime(2020, 6, 8, 10, 22, 28, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 436598849, 'comment_body': ""Thanks for splitting this test case! It's much better like this."", 'comment_created': datetime.datetime(2020, 6, 8, 10, 27, 35, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 436609057, 'comment_body': 'The old op is actually a miss, it should be removed.', 'comment_created': datetime.datetime(2020, 6, 8, 10, 48, 8, tzinfo=datetime.timezone.utc), 'commenter': 'TH3CHARLie', 'type': 'User'}, {'comment_id': 436609245, 'comment_body': ""This is also a miss. It shouldn't be explicitly set"", 'comment_created': datetime.datetime(2020, 6, 8, 10, 48, 34, tzinfo=datetime.timezone.utc), 'commenter': 'TH3CHARLie', 'type': 'User'}]","[{'commit_sha': 'de59628f3649951238c766a96505e65ae418731b', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b6264ee5c6ce2c10cd652ed1b073921940744f10', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b2bebe9c9b5f0bb104a2e21472c5b83428dd39e8', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f0dd2ff1d6c3b8be448be10e8ecd5387a4f8292c', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '33663619a0897cfa3c76912076bf326ed5b99606', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f28e0749d63ca83647efec6dae9cf4edcc07a097', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5624bf8149a97ba2911970ff353501afb225ff33', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd302050c6b0ae0ebbf2da4d8d6e5268488e37428', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac865f9cf677ea1dc0361b53c6bdb1829dad4db5', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4a58068316a554f71502809ee1aec899ad164fd0', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d3e652013fb3238f3f19685ffcec2bfbd52cec7', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b329db0e33eb807409f144362f4fcf878fb88f5a', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}]",Xuanda Yang,22651013,th3charlie@gmail.com,User,,19,,14,92
438594271,[mypyc] new error_kind and branch variant to handle call_negative_bool_emit,"related mypyc/mypyc#734 and mypyc/mypyc#741.

Introducing `ERR_NEG_INT` error_kind and `NEG_INT_EXPR` branch variant to support checking the return value of a call is non-negative. `set.discard` is used as an example. With some modifications, this would also support `negative_int_emit`.",True,9035,https://api.github.com/repos/python/mypy/pulls/9035,https://github.com/python/mypy/pull/9035,closed,69,37,15,12,9,15,0,0,[],2020-06-23 14:04:31+00:00,2020-06-25 15:25:30+00:00,177659.0,"2 days, 1:20:59","[{'comment_id': 445052176, 'comment_body': 'I have a few nits.\r\n\r\nI think that we can leave the `c_` prefix out, since ""32-bit integer"" is a fairly generic concept not specific to C and not likely to be confused with Python types.\r\n\r\nAlso, the correspondence to C `int` is a bit of an accident (and not generally true, on all possible platforms). It would be better to use `int32_t`, which happens to be the same as `int` on all supported platforms.', 'comment_created': datetime.datetime(2020, 6, 24, 17, 21, 42, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 445053661, 'comment_body': 'See the above comment. (In particular, use `int64_t` as the type.)', 'comment_created': datetime.datetime(2020, 6, 24, 17, 24, 23, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 445053873, 'comment_body': ""Here it's fine to use a `c_` prefix."", 'comment_created': datetime.datetime(2020, 6, 24, 17, 24, 46, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 445054759, 'comment_body': ""The definition should depend on the platform. If we are on a 64-bit platform, it's expected to be `int64_rprimitive`, but on a 32-bit platform it's `int32_rprimitive`. (We don't care about exotic platforms such as 32-bit addresses with 64-bit registers.)"", 'comment_created': datetime.datetime(2020, 6, 24, 17, 26, 17, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 445055462, 'comment_body': 'I wonder if we can leave out the `is_<type>` functions for the aliased types? Maybe only having them defined for `int32` and `int64` would be sufficient?', 'comment_created': datetime.datetime(2020, 6, 24, 17, 27, 35, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 445060861, 'comment_body': ""Actually at commit f3011ad, I've tried to use `int32_t` and `int64_t` just as we discussed. But somehow the above error comes up, I am actually debugging that. Once I find out which of this modification leads to that error and resolve it, I'll make sure we have `int32_t` and `int64_t` as the corresponding C types."", 'comment_created': datetime.datetime(2020, 6, 24, 17, 37, 22, tzinfo=datetime.timezone.utc), 'commenter': 'TH3CHARLie', 'type': 'User'}, {'comment_id': 445077362, 'comment_body': ""for now at least we need `is_c_int_rprimitive` as we've used that in `emitfunc.py`.\r\n\r\nupdates:\r\nnevermind, I've removed that."", 'comment_created': datetime.datetime(2020, 6, 24, 18, 6, 29, tzinfo=datetime.timezone.utc), 'commenter': 'TH3CHARLie', 'type': 'User'}, {'comment_id': 445083495, 'comment_body': 'The problem above(the magic error -11) is caused by this line of change, if we alias the `c_int_rprimtive` to the type represents 64 bit int(both `int64_t` or `Py_ssize_t` on a 64bit machine) would work. But changing it to `int32_t`  or int would fail.', 'comment_created': datetime.datetime(2020, 6, 24, 18, 17, 35, tzinfo=datetime.timezone.utc), 'commenter': 'TH3CHARLie', 'type': 'User'}, {'comment_id': 445092323, 'comment_body': ""I've located the key to fix this. Because we change the create dict's `LoadInt`'s type to `c_pyssize_t_rprimitive` without changing here, the value would be doubled during codegen. Now it's fixed."", 'comment_created': datetime.datetime(2020, 6, 24, 18, 33, 48, tzinfo=datetime.timezone.utc), 'commenter': 'TH3CHARLie', 'type': 'User'}, {'comment_id': 445092688, 'comment_body': 'Do we have ways of detecting the current platform?', 'comment_created': datetime.datetime(2020, 6, 24, 18, 34, 29, tzinfo=datetime.timezone.utc), 'commenter': 'TH3CHARLie', 'type': 'User'}, {'comment_id': 445487650, 'comment_body': 'You can use something like `sys.maxsize < (1 << 31)` to check if we are on a 32-bit platform.', 'comment_created': datetime.datetime(2020, 6, 25, 11, 24, 14, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 445487800, 'comment_body': 'It looks like you figured this out, good!', 'comment_created': datetime.datetime(2020, 6, 25, 11, 24, 35, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 445516892, 'comment_body': 'You can store the result of this check into a constant in `mypyc.common` so that it can be easily reused.', 'comment_created': datetime.datetime(2020, 6, 25, 12, 23, 29, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 445517930, 'comment_body': ""For low-level integers we actually don't have undefined values, since all values values are possible (at least in some contexts). We don't have a good way to represent this right now, so maybe add a TODO comment about this?"", 'comment_created': datetime.datetime(2020, 6, 25, 12, 25, 28, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 445642632, 'comment_body': ""Since the same code is repeated twice, it would make sense to move this into a helper function. This can be done in a separate PR and isn't really necessary, since it's only two lines of code."", 'comment_created': datetime.datetime(2020, 6, 25, 15, 24, 21, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}]","[{'commit_sha': '8a62334e9f31ff5200f9a7c3c95f4206edb07bc2', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a91bb494abc90979fce28f817543be1a7e5d9cc0', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3011ad3989a3960c419305cf3fb397d4dedaf55', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19db4211aa625a93ffd1d8076fa7fe4068a4d516', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aac1ed9054ef7801a4c9197d28cb0e1ef049adae', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b22ae95f2bacd7f1ced452bb30d383dc0fdd290b', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84f372c2ba146f3bcc0edd240078506bbc5376eb', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b051e5346d036158aa4491f5898fda1fb8dcce9', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45c48a4a2c9e157a505223f8e29f47c5ff83265b', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee7a25946a45b8c8b1de22a0b0d816dfb8a31b85', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2259e8f498c7c3b0ffc9e29e54051aca5c3fbfd1', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b38d9c151d23e841064d2ce3ac25732302e17481', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}]",Xuanda Yang,22651013,th3charlie@gmail.com,User,,19,,14,92
440407011,[mypyc] handle negative_int_emit and Truncate op,related mypyc/mypyc#734,True,9050,https://api.github.com/repos/python/mypy/pulls/9050,https://github.com/python/mypy/pull/9050,closed,112,43,8,4,3,2,0,0,[],2020-06-26 06:30:10+00:00,2020-06-26 17:29:13+00:00,39543.0,10:59:03,"[{'comment_id': 446241844, 'comment_body': 'Add docstring (similar to other ops).\r\n\r\nMention that this only works between non-reference counted integer types or bool (not `int_rprimitive`).', 'comment_created': datetime.datetime(2020, 6, 26, 15, 7, 40, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 446242721, 'comment_body': 'Document `truncated_type`. Mention that if defined, it and return type must be non-reference counted integer types (or bool).', 'comment_created': datetime.datetime(2020, 6, 26, 15, 9, 15, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}]","[{'commit_sha': '17761f8edb44c23fee73c5fbbfa49d9bdf2e937b', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '190ca404ae425f2e62967d480f8f70a924da999f', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '236730f494dd1841cce6f9189a6c4c8f6664be9f', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b1118ec49f74eeb7a10664ba37812ced6d990c97', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}]",Xuanda Yang,22651013,th3charlie@gmail.com,User,,19,,14,92
441200793,[mypyc] Support argument reordering in CallC,"related mypyc/mypyc#734.

Support argument reordering via adding a new field to the description. It will solve the difference in args ordering between python syntax and C calling requirement(mostly with `in` ops). It should never be used together with variable args.",True,9067,https://api.github.com/repos/python/mypy/pulls/9067,https://github.com/python/mypy/pull/9067,closed,105,84,5,6,1,5,0,0,[],2020-06-29 05:18:31+00:00,2020-06-30 10:03:11+00:00,103480.0,"1 day, 4:44:40","[{'comment_id': 446895197, 'comment_body': 'This looks wrong. Should `assert_emit_binary_op` do the ordering as well?', 'comment_created': datetime.datetime(2020, 6, 29, 11, 23, 1, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 446896644, 'comment_body': 'Also mention that all the other arguments, such as `arg_types`, are in the order accepted by the called function (i.e., after reordering).', 'comment_created': datetime.datetime(2020, 6, 29, 11, 25, 52, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 446899230, 'comment_body': 'Good catch, this indeed looks like a bug', 'comment_created': datetime.datetime(2020, 6, 29, 11, 30, 43, tzinfo=datetime.timezone.utc), 'commenter': 'TH3CHARLie', 'type': 'User'}, {'comment_id': 446910614, 'comment_body': 'I am a bit confused about this. `arg_types` is actually accepted by the python scope function(opposed to the called C function) and `ordering` is actually reordering `arg_types` to the order accepted by called C function.', 'comment_created': datetime.datetime(2020, 6, 29, 11, 51, 35, tzinfo=datetime.timezone.utc), 'commenter': 'TH3CHARLie', 'type': 'User'}, {'comment_id': 447050906, 'comment_body': 'Sorry, I was confused. The order of all the other arguments are *before* reordering (Python ordering), right? Anyway, this illustrates that this is useful to document! ', 'comment_created': datetime.datetime(2020, 6, 29, 15, 17, 49, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}]","[{'commit_sha': '74e92dff18bf9d98198c9aaa92f8c2b83e087a59', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '26b657109b41db85cf40589c247342a7ffa36cdf', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '75b1ab410c9031f24d9ab5806ce6dc09ec43c492', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7044367b23cfad0660dfdcd720c2dede6b6e00d6', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2985c50c1174e1680b8615c65234d3058aaea560', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b99a8d2851c93742557d5a5b673f70896240d604', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}]",Xuanda Yang,22651013,th3charlie@gmail.com,User,,19,,14,92
441955634,[mypyc] Support ERR_ALWAYS,"related mypyc/mypyc#734, with a focus on exceptions related ops.

This PR adds a new error kind: `ERR_ALWAYS`, which indicates the op always fail.

It adds temporary false value to ensure such behavior and makes the raise op void.",True,9073,https://api.github.com/repos/python/mypy/pulls/9073,https://github.com/python/mypy/pull/9073,closed,79,62,8,8,4,4,0,0,[],2020-06-30 11:11:04+00:00,2020-07-02 09:57:43+00:00,168399.0,"1 day, 22:46:39","[{'comment_id': 448081912, 'comment_body': 'here\'s my attempt to add a tmp between the CallC and the generated branch. I\'ve made the branch to reference this tmp\'s value when doing the comparison. However, it still fails at refcount transform pass:\r\n```\r\n  File ""/Users/th3charlie/Documents/mypy/mypyc/transform/refcount.py"", line 181, in insert_branch_inc_and_decrefs\r\n    source_borrowed, source_live_regs, env, omitted),\r\n  File ""/Users/th3charlie/Documents/mypy/mypyc/transform/refcount.py"", line 210, in after_branch_decrefs\r\n    for reg in sorted(decref, key=lambda r: env.indexes[r])\r\n  File ""/Users/th3charlie/Documents/mypy/mypyc/transform/refcount.py"", line 210, in <lambda>\r\n    for reg in sorted(decref, key=lambda r: env.indexes[r])\r\nKeyError: <mypyc.ir.ops.LoadInt object at 0x10700cdd0>\r\n```\r\nThe keyerror is due to not adding the tmp op into the environment.', 'comment_created': datetime.datetime(2020, 7, 1, 2, 32, 48, tzinfo=datetime.timezone.utc), 'commenter': 'TH3CHARLie', 'type': 'User'}, {'comment_id': 448081921, 'comment_body': 'here\'s my attempt to add a tmp between the CallC and the generated branch. I\'ve made the branch to reference this tmp\'s value when doing the comparison. However, it still fails at refcount transform pass:\r\n```\r\n  File ""/Users/th3charlie/Documents/mypy/mypyc/transform/refcount.py"", line 181, in insert_branch_inc_and_decrefs\r\n    source_borrowed, source_live_regs, env, omitted),\r\n  File ""/Users/th3charlie/Documents/mypy/mypyc/transform/refcount.py"", line 210, in after_branch_decrefs\r\n    for reg in sorted(decref, key=lambda r: env.indexes[r])\r\n  File ""/Users/th3charlie/Documents/mypy/mypyc/transform/refcount.py"", line 210, in <lambda>\r\n    for reg in sorted(decref, key=lambda r: env.indexes[r])\r\nKeyError: <mypyc.ir.ops.LoadInt object at 0x10700cdd0>\r\n```\r\nThe keyerror is due to not adding the tmp op into the environment.', 'comment_created': datetime.datetime(2020, 7, 1, 2, 32, 50, tzinfo=datetime.timezone.utc), 'commenter': 'TH3CHARLie', 'type': 'User'}, {'comment_id': 448649035, 'comment_body': 'Drop this TODO comment, since this is fixing it', 'comment_created': datetime.datetime(2020, 7, 1, 22, 30, 29, tzinfo=datetime.timezone.utc), 'commenter': 'msullivan', 'type': 'User'}, {'comment_id': 448674864, 'comment_body': 'Add a comment that this is kind of a hack?', 'comment_created': datetime.datetime(2020, 7, 1, 23, 55, 52, tzinfo=datetime.timezone.utc), 'commenter': 'msullivan', 'type': 'User'}]","[{'commit_sha': '74e92dff18bf9d98198c9aaa92f8c2b83e087a59', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '26b657109b41db85cf40589c247342a7ffa36cdf', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '94d24af84c02c1a26be5d01f6d973047d75dfdc4', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19fcdb4914f13aed34cf07a1030895e75d32fd7b', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be7968853bfa0dd7ddeee0df5db1c0c718b3f431', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57d115a6ee3975c8587cb8eba3b55aaabfb3ee03', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f33afc8616a9c94c4e109bc28c58f3f967b06c9', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de63abcd2d48205ccc1c85828c8c1067ce7b38ae', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}]",Xuanda Yang,22651013,th3charlie@gmail.com,User,,19,,14,92
461992572,[mypyc] Allow extra integer constant as the last argument to a C call,relates mypyc/mypyc#734 and mypyc/mypyc#753,True,9251,https://api.github.com/repos/python/mypy/pulls/9251,https://github.com/python/mypy/pull/9251,closed,45,26,5,2,1,4,0,0,[],2020-08-03 07:12:38+00:00,2020-08-03 12:45:16+00:00,19958.0,5:32:38,"[{'comment_id': 464339559, 'comment_body': ""Include also the type of the integer. For non-C backends in particular it will be useful to know whether it's a 32-bit or 64-bit integer, for example. Sometimes we'll also want to pass null pointers, and it would be nice to be able to specify their types. A reasonable way would be to make this argument `Optional[Tuple[int, RType]]`.\r\n\r\nUpdate docstring to document this."", 'comment_created': datetime.datetime(2020, 8, 3, 10, 52, 56, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 464340083, 'comment_body': ""It's unnecessary to modify `CallC`. It's better for IR builder to generate a `LoadInt` op for the extra argument."", 'comment_created': datetime.datetime(2020, 8, 3, 10, 54, 11, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 464340596, 'comment_body': 'As discussed in other comments, it would be better for consistency to create a `LoadInt` for the constant value and append it to `coerced`.', 'comment_created': datetime.datetime(2020, 8, 3, 10, 55, 21, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 464342678, 'comment_body': 'I like this approach!', 'comment_created': datetime.datetime(2020, 8, 3, 11, 0, 10, tzinfo=datetime.timezone.utc), 'commenter': 'TH3CHARLie', 'type': 'User'}]","[{'commit_sha': 'f56bfb2b0e7c0eef3291154d6ee0568128b0cb68', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be26386ad71a84efe1c24d129ae0c669c518a729', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}]",Xuanda Yang,22651013,th3charlie@gmail.com,User,,19,,14,92
428281156,[mypyc] Introduce low level integer type,"closes mypyc/mypyc#735

This PR introduces a `c_int_rprimitive` RType which represents a low level, plan integer(corresponds to C's `int`). It also allows `LoadInt` to select its `rtype` to generate tagged/plain integer code accordingly.",True,8955,https://api.github.com/repos/python/mypy/pulls/8955,https://github.com/python/mypy/pull/8955,closed,19,6,4,3,0,2,0,0,[],2020-06-05 07:44:31+00:00,2020-06-05 17:32:17+00:00,35266.0,9:47:46,"[{'comment_id': 435859349, 'comment_body': 'Minor performance suggestion: `x in (y, z)` is generally faster than `x in {y, z}` (at least when there are only a few items in the set).', 'comment_created': datetime.datetime(2020, 6, 5, 11, 27, 34, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 435861151, 'comment_body': 'The ctype should be `Py_ssize_t`, since we want the integer to have the same size as a pointer.', 'comment_created': datetime.datetime(2020, 6, 5, 11, 31, 41, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}]","[{'commit_sha': 'bbe450e9143cccbea04c0035b79635dc2467832e', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '128439328016d86da156966a1a0cb957716a6cdf', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b275db9870e0a1805671382f2ce0c568711c93d5', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}]",Xuanda Yang,22651013,th3charlie@gmail.com,User,,19,,14,92
446974259,[mypyc] Properly box int32/int64,"follows #9110's comment

Using CPython API to box int32/int64 into PyObject*",True,9119,https://api.github.com/repos/python/mypy/pulls/9119,https://github.com/python/mypy/pull/9119,closed,4,5,1,2,0,0,0,0,[],2020-07-09 16:41:41+00:00,2020-07-10 11:03:36+00:00,66115.0,18:21:55,[],"[{'commit_sha': 'a7cc47e217e20a2ba8e03f0c3fe1cb669ac194a3', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14fda5476dae4671578e14ac51d79372c857fc4a', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}]",Xuanda Yang,22651013,th3charlie@gmail.com,User,,19,,14,92
446681421,[mypyc] low-level integer operations: integer equal,"relates mypyc/mypyc#741, mypyc/mypyc#743",True,9116,https://api.github.com/repos/python/mypy/pulls/9116,https://github.com/python/mypy/pull/9116,closed,247,88,7,6,3,6,0,0,[],2020-07-09 07:47:02+00:00,2020-07-10 11:07:22+00:00,98420.0,"1 day, 3:20:20","[{'comment_id': 452119859, 'comment_body': ""The latter part should be `op == '=='` or `op in ('==',)`, as now it's equivalent to `op in '=='`."", 'comment_created': datetime.datetime(2020, 7, 9, 10, 27, 11, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 452388944, 'comment_body': ""Maybe rename this to `compare_tagged`? This is comparing tagged integers, specifically. Also I think that this should live in `ll_builder.py`, since this doesn't seem to depend on any high-level things such as AST nodes.\r\n\r\nAdd a docstring."", 'comment_created': datetime.datetime(2020, 7, 9, 17, 49, 11, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 452389756, 'comment_body': 'Add comment. Maybe rename this to something like `int_equal_` to highlight that this is just a part of an implementation.', 'comment_created': datetime.datetime(2020, 7, 9, 17, 50, 41, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 452390230, 'comment_body': 'Add comment saying that these are not complete implementations, but assume that one of operands is a long integer.', 'comment_created': datetime.datetime(2020, 7, 9, 17, 51, 33, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 452414705, 'comment_body': ""Actually there's no such assumption I think, the first item of the tuple provides op variant for the case when lhs of the operands is short, therefore not assume at least one of them is long."", 'comment_created': datetime.datetime(2020, 7, 9, 18, 36, 39, tzinfo=datetime.timezone.utc), 'commenter': 'TH3CHARLie', 'type': 'User'}, {'comment_id': 452777080, 'comment_body': 'Ah yeah, you are correct.', 'comment_created': datetime.datetime(2020, 7, 10, 11, 5, 18, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}]","[{'commit_sha': '342f5f8dada2ec8f54299e20d11ff202f34a1a1e', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b460921fac924b2bd9dff9a2933a479b7edc1e1', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc2de29496a2d81fd367ca02d09b35113f4acc1c', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d74376432be51f8128f365fe2b36d23dc958712', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a3f905fc4e2a0c232d42e9557be74878f9d6697', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2309db0ecfb99e34beeda82e52c38b3a4759dd36', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}]",Xuanda Yang,22651013,th3charlie@gmail.com,User,,19,,14,92
447726643,[mypyc] Generates inline compare statement on short ints and fix sieve performance regression,"relates mypyc/mypyc#750

Generate almost identical code as before https://github.com/python/mypy/commit/be01236bcdb9a9da66e68dd0d45ff0f9a604e44a

before:
```c
CPyL1: ;
    cpy_r_r4 = (Py_ssize_t)cpy_r_r3 < (Py_ssize_t)cpy_r_r2;
    if (cpy_r_r4) {
        goto CPyL2;
    } else
        goto CPyL5;
```

now with this PR:
```c
CPyL1: ;
    cpy_r_r4 = cpy_r_r3 < cpy_r_r2;
    if (cpy_r_r4) {
        goto CPyL2;
    } else
        goto CPyL5;
```",True,9127,https://api.github.com/repos/python/mypy/pulls/9127,https://github.com/python/mypy/pull/9127,closed,332,144,12,5,1,3,0,0,[],2020-07-11 06:13:26+00:00,2020-07-13 15:01:07+00:00,204461.0,"2 days, 8:47:41","[{'comment_id': 453582045, 'comment_body': 'Should this have a `_` suffix?', 'comment_created': datetime.datetime(2020, 7, 13, 11, 26, 11, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 453582584, 'comment_body': 'Since we do this same dance in multiple test files, maybe you can move this to a helper function? This way if we modify this, we only have to change it in one place.', 'comment_created': datetime.datetime(2020, 7, 13, 11, 27, 21, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 453595196, 'comment_body': 'yeah, it definitely should! Thanks for catching this potentially costly bug!', 'comment_created': datetime.datetime(2020, 7, 13, 11, 52, 55, tzinfo=datetime.timezone.utc), 'commenter': 'TH3CHARLie', 'type': 'User'}]","[{'commit_sha': '8c3612a1c7b9ad2254335823cdeaef10dd5a5d1b', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b373c41f45826a5b058a02aaf3d5d108fb41426', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a8aae84aa1c2f14f8ddd66f4a6b0461815a74d17', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ecf48b27e81c79921bd32b0b1e218e87771c3f3', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12f44ced6f2a7bc03b1890aefad9e39bc1e9dc80', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}]",Xuanda Yang,22651013,th3charlie@gmail.com,User,,19,,14,92
448661723,[mypyc] Check both operands when int logical op is not EQ or NEQ,"This a bug I find during merging int logical ops.

Here's the less-than's inline function we have now:
```C
static inline bool CPyTagged_IsLt(CPyTagged left, CPyTagged right) {
    if (CPyTagged_CheckShort(left) && CPyTagged_CheckShort(right)) {
        return (Py_ssize_t)left < (Py_ssize_t)right;
    } else {
        return CPyTagged_IsLt_(left, right);
    }
}
```
Different from the equal's inline function, it checks both operands. So this PR completes that support and fix the potential bug.
",True,9148,https://api.github.com/repos/python/mypy/pulls/9148,https://github.com/python/mypy/pull/9148,closed,261,167,4,1,5,0,0,0,[],2020-07-14 05:52:33+00:00,2020-07-14 11:16:27+00:00,19434.0,5:23:54,[],"[{'commit_sha': '4bce62f4144cbfdb6e007d89356484d82808c6f4', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}]",Xuanda Yang,22651013,th3charlie@gmail.com,User,,19,,14,92
449015390,[mypyc] Support swapping operands and negating result and merge int NEQ,"This PR implements support for swapping operands and negating result when building logical ops mentioned in https://github.com/python/mypy/pull/9148#issuecomment-658123381. To demonstrate, NEQ is merged. Since it has no IR test, I build one `irbuild-int.test`.",True,9149,https://api.github.com/repos/python/mypy/pulls/9149,https://github.com/python/mypy/pull/9149,closed,56,8,5,4,1,2,0,0,[],2020-07-14 17:30:13+00:00,2020-07-15 13:20:07+00:00,71394.0,19:49:54,"[{'comment_id': 454535940, 'comment_body': 'This is caused by https://github.com/python/mypy/commit/358522e28cd58d95daf36256c46eb7ffcc55eea4', 'comment_created': datetime.datetime(2020, 7, 14, 17, 50, 20, tzinfo=datetime.timezone.utc), 'commenter': 'TH3CHARLie', 'type': 'User'}, {'comment_id': 454955364, 'comment_body': 'Should the test case name be `testIntNeq`?', 'comment_created': datetime.datetime(2020, 7, 15, 10, 35, 20, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}]","[{'commit_sha': '5131923a204eefc74a692729c12e56d0e98664d8', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b609351c550859936b699fc5335d5af7b3ecb81', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa426d6b45b3a344ac713626b40215ed321fd5a8', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15174849d6f9b34a0124b2fc8d62e038ac70fc09', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}]",Xuanda Yang,22651013,th3charlie@gmail.com,User,,19,,14,92
450685868,[mypyc] Fix signed integer comparison,"https://github.com/python/mypy/commit/358522e28cd58d95daf36256c46eb7ffcc55eea4 generates inline comparison between short ints, explicit conversion to signed is missing, though, causing negative cases to fail.

This PR add explicit type casts(although the name truncate here is a little bit misleading).

This PR will fix microbenchmark `int_list`.",True,9163,https://api.github.com/repos/python/mypy/pulls/9163,https://github.com/python/mypy/pull/9163,closed,108,38,10,5,1,9,0,0,[],2020-07-17 02:17:25+00:00,2020-07-20 09:43:46+00:00,285981.0,"3 days, 7:26:21","[{'comment_id': 456378854, 'comment_body': ""This is not very principled. The truncate op is redundant, and also confusingly the sizes of source and target types are the same, so there's no truncation actually going on. \r\n\r\nInstead, we should generate the correct C code for short int comparison (add the cast to a signed integer type). Maybe you can look at the `type` attribute of `BinaryIntOp` to determine whether a signed comparison is needed when emitting C."", 'comment_created': datetime.datetime(2020, 7, 17, 11, 14, 42, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 456381301, 'comment_body': 'Yeah, the truncate also looks weird to me. So when we emit a BinaryIntOp, we check if both operands are short_int(and probably check if the op is not EQ or NEQ as well since they do not require casts to have the correct result) to cast them into `py_ssize_t`', 'comment_created': datetime.datetime(2020, 7, 17, 11, 20, 34, tzinfo=datetime.timezone.utc), 'commenter': 'TH3CHARLie', 'type': 'User'}, {'comment_id': 456384657, 'comment_body': ""More generally, also plain tagged integers need to use a cast since they are signed. \r\n\r\nProbably the cleanest way to check the operand types would be to update every `Value` to contain the result type, but I'm not sure if this is necessary."", 'comment_created': datetime.datetime(2020, 7, 17, 11, 29, 24, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 456538525, 'comment_body': ""We'll also need similar checks for unsigned comparisons -- if the types aren't tagged, unsigned comparisons require a cast to the corresponding unsigned type.\r\n\r\nSince we aren't using unsigned comparisons yet, it would be good to add unit tests for these."", 'comment_created': datetime.datetime(2020, 7, 17, 16, 11, 16, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 456539947, 'comment_body': 'The pretty printed IR should distinguish between signed and unsigned comparisons. They look identical now, I think.', 'comment_created': datetime.datetime(2020, 7, 17, 16, 13, 52, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 456544248, 'comment_body': ""I agree that we should add these checks when the types are int32/int64 and op is unsigned, though we don't have that kind of usages right now so maybe leave it out from this PR would be OK.\r\n\r\nI am not sure what kind of unit tests we are adding here. My guess is to ensure this kind of cast is enforced in the generated C code? Probably in `test_emitfunc.py`?"", 'comment_created': datetime.datetime(2020, 7, 17, 16, 22, 46, tzinfo=datetime.timezone.utc), 'commenter': 'TH3CHARLie', 'type': 'User'}, {'comment_id': 456547659, 'comment_body': '`test_emitfunc.py` would be a reasonable location for unit tests.', 'comment_created': datetime.datetime(2020, 7, 17, 16, 29, 19, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 456796657, 'comment_body': ""Also test unsigned comparison with `int64` and `int32`. These need a cast to the corresponding unsigned type (`uint64_t` or `uint32_t`, respectively). Finally, test that unsigned comparison with `short_int_rprimitive` and signed comparison with `int32` or `int64` doesn't use a cast."", 'comment_created': datetime.datetime(2020, 7, 18, 14, 45, 15, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 456822802, 'comment_body': ""Thanks! This actually catches a bug in ops.py that constant's definition are overlapped."", 'comment_created': datetime.datetime(2020, 7, 18, 20, 0, 4, tzinfo=datetime.timezone.utc), 'commenter': 'TH3CHARLie', 'type': 'User'}]","[{'commit_sha': 'fa4995f3b0099d576b4edc9dbb9d05ab625af4a1', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c4ef1f750b78264fcd8cd006662ab530070110b', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b8dab9f71141ba151f805362b9d250a64c0c4744', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '198f36dc61ac0f1ccd76305ab83e0e09c7633499', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3a592492c2f2b31831d93103c4868c92161a082', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}]",Xuanda Yang,22651013,th3charlie@gmail.com,User,,19,,14,92
454874146,[mypyc] Expand int ops when operation contains at least one tagged int,"Follow-up of #9108 and #9127, generates the new inlined style ops when there is at least one tagged integer presented(The previous two PRs actually specialized two ints and two short_ints cases). After this and the remaining merge, we will get rid of `CPyTagged_IsEq`, `CPyTagged_IsNe`, `CPyTagged_IsLt`, `CPyTagged_IsLe`, `CPyTagged_IsGt` and `CPyTagged_IsGe`",True,9187,https://api.github.com/repos/python/mypy/pulls/9187,https://github.com/python/mypy/pull/9187,closed,719,258,9,4,4,1,0,0,[],2020-07-22 04:34:50+00:00,2020-07-22 11:29:11+00:00,24861.0,6:54:21,"[{'comment_id': 458722189, 'comment_body': 'Not directly related to this diff: we could simplify this sequence of ops like this:\r\n\r\n```\r\nr1 = n | 10\r\nr2 = r1 & 1\r\nr3 = r2 == 0\r\nif r3 goto ...\r\n```\r\n```', 'comment_created': datetime.datetime(2020, 7, 22, 11, 25, 40, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}]","[{'commit_sha': '4faceb4e7974f12ba6c7bd4d1e5e4e69e37a56ea', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ecd09c791cb17a07d8088fef2f20be9b844a6344', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e10555eee0009764227bf94066a98e3eb8546bb', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e6a1efdbd9690a8b0e8d997a32024c6beb8293da', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}]",Xuanda Yang,22651013,th3charlie@gmail.com,User,,19,,14,92
468259160,"[mypyc] Split BinaryIntOp and introduce ComparisonOp, implements is/is not op","`BinaryIntOp` used to represent arithmetic, bitwise and comparison operations on integer operations. However, this design prevents us to compare pointer types and all comparison operations should be of boolean return type while manually specifying this in `BinaryIntOp` is both verbose and error-prone.

This PR splits `BinaryIntOp` and moves the comparison functionalities to `ComparsionOp`.

Based on the new op, this PR also implements `is` and `is not` op.",True,9313,https://api.github.com/repos/python/mypy/pulls/9313,https://github.com/python/mypy/pull/9313,closed,209,121,18,5,2,3,0,0,[],2020-08-15 04:34:29+00:00,2020-08-18 17:21:44+00:00,305235.0,"3 days, 12:47:15","[{'comment_id': 472073044, 'comment_body': ""Typo: Comparsion.\r\n\r\nAlso I'd suggest remove the word 'binary' as redundant, since comparisons are always binary operations."", 'comment_created': datetime.datetime(2020, 8, 18, 10, 19, 47, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 472318438, 'comment_body': '""object types"" -> ""object identities""', 'comment_created': datetime.datetime(2020, 8, 18, 16, 17, 46, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 472319099, 'comment_body': 'Thanks for adding more test coverage!', 'comment_created': datetime.datetime(2020, 8, 18, 16, 18, 47, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}]","[{'commit_sha': '4505ef9958713b502fa8776e74be5a60688ad68e', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f922697e910afceeb49a92ebc5645bfaab6aa4f', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'afcc433d56681feb7ae852c3a9c43010c6278061', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2764aa00f6e729c919093ff9bc8e2279f93eb5df', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '768b8689e04a107d2abf1f627682439b75d2a995', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}]",Xuanda Yang,22651013,th3charlie@gmail.com,User,,19,,14,92
456773742,[mypyc] Introduce LoadMem,"relates mypyc/mypyc#741

Introduce `LoadMem` IR to read a memory address and convert it into a designated-type value. (The address would mostly be in `py_ssize_t` for now)

Part of efforts to implement `len` primitives: `*(Py_ssize_t*)(ob + size_offset)`",True,9211,https://api.github.com/repos/python/mypy/pulls/9211,https://github.com/python/mypy/pull/9211,closed,56,4,5,7,1,5,0,0,[],2020-07-26 16:34:35+00:00,2020-07-28 06:59:57+00:00,138322.0,"1 day, 14:25:22","[{'comment_id': 460776172, 'comment_body': ""For consistency with `LoadInt` and `LoadStatic`, what about calling this `LoadMem`? We can then explain this in terms of loading from memory, instead of pointer dereference. Pointer dereference sounds like a C concept, and for a low-level IR it's better to move closer to machine semantics."", 'comment_created': datetime.datetime(2020, 7, 27, 9, 51, 23, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 460776560, 'comment_body': 'Also rename the string representation if the op gets renamed.', 'comment_created': datetime.datetime(2020, 7, 27, 9, 52, 4, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 460776681, 'comment_body': 'Similarly for the visit method name.', 'comment_created': datetime.datetime(2020, 7, 27, 9, 52, 18, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 460777977, 'comment_body': 'The second set of parentheses are redundant?', 'comment_created': datetime.datetime(2020, 7, 27, 9, 54, 35, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 460973330, 'comment_body': ""A tiny nit: in C it's more common to add a space before `*` in a pointer type (e.g., `char *` instead of `char*`)."", 'comment_created': datetime.datetime(2020, 7, 27, 15, 25, 9, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}]","[{'commit_sha': '937b56ba72f9e6035102323a433786d01e80fd69', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2095f5dea7b43d0a01e6c3bba5184a27904a1bd1', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'feedba942432353b0cf457c2def95e867e8a32bc', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c7f71454279c62862b0cb0941334067dc32a225', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42fae629a6fc860b12708626b029df7cb78eb326', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '52bd573ffd1824d253dc369601827d74e2a689bd', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c9d811bdd56e1123914dba55defb032732f21c6', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}]",Xuanda Yang,22651013,th3charlie@gmail.com,User,,19,,14,92
457041718,[mypyc] Introduce RStruct,"relates #9211 

This PR introduces `RStruct` to represent CPython structures.

`StructInfo` is used to hold information about a unique struct-like type.

This PR also introduces several functions to compute aligned offsets and size of structure types.",True,9215,https://api.github.com/repos/python/mypy/pulls/9215,https://github.com/python/mypy/pull/9215,closed,291,10,7,23,5,39,0,0,[],2020-07-27 09:49:11+00:00,2020-07-31 14:23:12+00:00,362041.0,"4 days, 4:34:01","[{'comment_id': 462218280, 'comment_body': 'The offsets can be inferred from types of fields. First, we can calculate the size of each simple RType easily (e.g. 32-bit integer -> 4 bytes). Second, we need to align each field based on platform alignment rules. The information in https://en.wikipedia.org/wiki/Data_structure_alignment should do the trick. \r\n\r\nFinally, we need to be able to calculate the alignment and the size of the struct, since structs can be placed inside other structs. The previous link will explain this as well.', 'comment_created': datetime.datetime(2020, 7, 29, 11, 6, 48, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 462218545, 'comment_body': 'Also include names of fields in the string representation.', 'comment_created': datetime.datetime(2020, 7, 29, 11, 7, 17, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 462218613, 'comment_body': 'Include names of fields.', 'comment_created': datetime.datetime(2020, 7, 29, 11, 7, 25, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 462220740, 'comment_body': ""If we use this to allow assignments from one struct to another in generated C (I'm not sure but I think we might), we should consider names of both the struct and the fields, since C structs don't support structural subtyping."", 'comment_created': datetime.datetime(2020, 7, 29, 11, 11, 42, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 462241087, 'comment_body': 'Also add docstring.', 'comment_created': datetime.datetime(2020, 7, 29, 11, 53, 26, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 462408574, 'comment_body': 'Also test nested structs. For these, we need to calculate alignment for struct types.', 'comment_created': datetime.datetime(2020, 7, 29, 15, 56, 39, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 462410394, 'comment_body': ""I think that it would be cleaner if the size was stored in the RPrimitive instance. You can add a new constructor argument for the size. This way when we add a new primitive type, we don't need to remember to update this function."", 'comment_created': datetime.datetime(2020, 7, 29, 15, 59, 3, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 462411241, 'comment_body': 'We need a separate function for calculating alignment, since alignment is different from the size for struct types.', 'comment_created': datetime.datetime(2020, 7, 29, 16, 0, 13, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 462412084, 'comment_body': ""I think that this needs changes to work with nested structs. You should probably calculate the alignment of each item type using the new function that I'm proposing above."", 'comment_created': datetime.datetime(2020, 7, 29, 16, 1, 28, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 462412975, 'comment_body': '""list types"" -> ""list of types""? Make it explicit that the types argument are types of values that are stored sequentially with platform default alignment.', 'comment_created': datetime.datetime(2020, 7, 29, 16, 2, 41, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 462414007, 'comment_body': 'Add another test for, say, three bools followed by an int32.', 'comment_created': datetime.datetime(2020, 7, 29, 16, 4, 17, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 462414304, 'comment_body': 'Also test structs with no items and 1 item.', 'comment_created': datetime.datetime(2020, 7, 29, 16, 4, 44, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 462947157, 'comment_body': ""This is incorrect. Since all structs are mapped to a single identifier, tuples with different types will get the same name. For now it's sufficient to add `assert False` here, to not support structs in tuples."", 'comment_created': datetime.datetime(2020, 7, 30, 12, 2, 53, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 462947837, 'comment_body': ""`4 if IS_32_BIT_PLATFORM else 8` gets repeated a few times, so it's better to define it as a named constant."", 'comment_created': datetime.datetime(2020, 7, 30, 12, 4, 32, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 462948139, 'comment_body': 'Union types are always boxed, so they actually always use the platform alignment.', 'comment_created': datetime.datetime(2020, 7, 30, 12, 5, 8, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 462948547, 'comment_body': 'This is always the pointer size, since unions are boxed.', 'comment_created': datetime.datetime(2020, 7, 30, 12, 6, 4, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 462951550, 'comment_body': ""This check doesn't seem correct, at least for nested structs. Alignment and size may be unrelated (consider e.g. a struct with 27 bools)."", 'comment_created': datetime.datetime(2020, 7, 30, 12, 12, 7, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 462952015, 'comment_body': 'Can you just remove this special case? Alignment will always be checked for.', 'comment_created': datetime.datetime(2020, 7, 30, 12, 13, 2, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 462952878, 'comment_body': 'Minor optimization idea: alignment is always a power of 2, so we can use bitwise operations that are much faster than %.', 'comment_created': datetime.datetime(2020, 7, 30, 12, 14, 43, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 462953966, 'comment_body': ""This doesn't look right. Structs sizes don't need to be a multiple of platform alignment. Playing around with a C compiler, it looks like the size should be rounded up to a multiple of struct alignment."", 'comment_created': datetime.datetime(2020, 7, 30, 12, 16, 51, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 462954826, 'comment_body': ""I think that we can always require names to be defined, for consistency. It's always possible to use some dummy names like `item0`, `item1`, etc. if there are no better names."", 'comment_created': datetime.datetime(2020, 7, 30, 12, 18, 30, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 462955315, 'comment_body': ""This doesn't actually add anything to a registry, it just constructs a description?"", 'comment_created': datetime.datetime(2020, 7, 30, 12, 19, 27, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 462955680, 'comment_body': 'Also check that the names of the structs are the same.', 'comment_created': datetime.datetime(2020, 7, 30, 12, 20, 6, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 462955880, 'comment_body': ""On second thought, I think the best we can do it require that the names of the structs are identical, since in C two different structs can't be compatible with each other."", 'comment_created': datetime.datetime(2020, 7, 30, 12, 20, 28, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 462956089, 'comment_body': 'Add a unit test for this.', 'comment_created': datetime.datetime(2020, 7, 30, 12, 20, 50, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 462959812, 'comment_body': 'A struct should only be compatible with the same struct, similar to above.', 'comment_created': datetime.datetime(2020, 7, 30, 12, 27, 55, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 462960878, 'comment_body': 'Also test a struct with two bools.', 'comment_created': datetime.datetime(2020, 7, 30, 12, 29, 57, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 462962920, 'comment_body': ""On reflection, we should ensure that a struct with a given name has a unique definition, since we'll have a global namespace for structs. This doesn't enforce that constraint.\r\n\r\nOne way to do this would be to have a separate struct info field that `RStruct` refers to. So it would be defined like this:\r\n\r\n```\r\nclass RStruct(RType):\r\n    def __init__(self, info: StructInfo) -> None:\r\n        ...\r\n```\r\n\r\n`StructInfo` would be similar to the current `RStruct`. We'd maintain a registry of `StructInfo` objects.\r\n\r\nWe can then later update `RTuple` to also contain a `StructInfo` reference. I'm starting to think that we'll continue to need a separate `RTuple` type, but it can share much of the implementation with `RStruct`."", 'comment_created': datetime.datetime(2020, 7, 30, 12, 33, 55, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 462973585, 'comment_body': ""yes, for now, I haven't figure out what's the best way to use the description, should we use it as a one-shot(like custom op) or add to a registry for matching. I think it's OK to postpone that to when we finally implement the `len` primitive"", 'comment_created': datetime.datetime(2020, 7, 30, 12, 52, 56, tzinfo=datetime.timezone.utc), 'commenter': 'TH3CHARLie', 'type': 'User'}, {'comment_id': 463524046, 'comment_body': 'Test nested struct with smaller alignment than 8.', 'comment_created': datetime.datetime(2020, 7, 31, 10, 7, 44, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 463525034, 'comment_body': ""Since we plan to ensure that for each name there will only be a single struct, this doesn't make sense as a test case. It's sufficient to test that a struct is a runtime subtype only of the same struct."", 'comment_created': datetime.datetime(2020, 7, 31, 10, 10, 2, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 463525433, 'comment_body': ""This can be simplified by just holding a reference to `info` (e.g. `self.info = info`) and defining read-only properties corresponding to the info attributes. I.e., we'd only have a single `info` attribute.\r\n\r\nThis has a few benefits: \r\n\r\n* Serialized representation will be smaller. Currently we duplicate the entire structure of the struct on each serialization, which can be expensive for large structs that are used in many places.\r\n* Constructing an object is faster. \r\n* We can compare struct equality quickly via comparing the identity of `info` objects (using `is`). \r\n* We 'd use a bit less memory."", 'comment_created': datetime.datetime(2020, 7, 31, 10, 10, 54, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 463526349, 'comment_body': ""It's sufficient to compare the identity of the `info` objects if you implement the change I'm suggesting above."", 'comment_created': datetime.datetime(2020, 7, 31, 10, 13, 7, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 463526642, 'comment_body': ""Again, if you implement my suggestion, it's enough to base the hash on the identity of `info`."", 'comment_created': datetime.datetime(2020, 7, 31, 10, 13, 46, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 463527376, 'comment_body': ""With the above suggestion it's sufficient to serialize the name of the struct. However, this means that we'll need to serialize the struct registry somewhere else. It's okay to just `assert False` here for now, since we won't need to serialize struct types yet, I think."", 'comment_created': datetime.datetime(2020, 7, 31, 10, 15, 34, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 463528382, 'comment_body': 'You can leave this method out for now.', 'comment_created': datetime.datetime(2020, 7, 31, 10, 17, 50, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 463530264, 'comment_body': ""I think that this should actually only compare equal if the other struct is the same as the first one, since there must only be one definition for each struct with a particular name, and C structs don't support structural compatibility."", 'comment_created': datetime.datetime(2020, 7, 31, 10, 22, 17, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 463543307, 'comment_body': 'Nice idea, although I tried to make all these attributes read-only properties, `name` and `_ctype` will report `Signature of ""name"" incompatible with supertype ""RType""`', 'comment_created': datetime.datetime(2020, 7, 31, 10, 53, 1, tzinfo=datetime.timezone.utc), 'commenter': 'TH3CHARLie', 'type': 'User'}, {'comment_id': 463601292, 'comment_body': ""There's no need to compare StructInfos for value equality, since they should be unique. Thus this doesn't seem to server a useful purpose, and can be misleading, so I'd rather remove it. (Also, if you define `__eq__`, you should also define `__hash__`, but this won't be relevant once this is removed.)"", 'comment_created': datetime.datetime(2020, 7, 31, 13, 10, 33, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}]","[{'commit_sha': '8d658573c7417c86703cf1f7bd57d079640464e2', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cada7546005424b7af654375b66b817588032222', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '54a87e39689c76b941866c08572221f2a9ce4fc9', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d4c61f56cf21ace23e3c400e052b360ec10ac2e', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53cbfe9e65cb12278abf432a46ada360f30378a6', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '58c9ea35d094f1f097fa09b45966cd8427e6c04e', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c78072c0306a97fa69fb76b43a766c330c4958b7', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25259b84f79e15fedc492a0522f78626ac498158', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ff9f32fd89f4949e86fd15dccadd6366c6274ac', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b094fc8f5be55810a0db39ae0465be23f0be483', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '82cf7ad31ffd3cd137530a04ad9544975c05eb63', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2bb6b6b41d85d7749cddaafbb54a7de8213ae330', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa5ebe5e7e0ffa565538e27bfb08abbe0e2157bd', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c6312b6bc81bdf41784312b9db4786ead0c6b21', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64a0ba2f5e2c1fd7b7f67623e642b9b80d8f3a30', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '27b1929f13695ac84c9ec44b80e58e958a902ad3', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f52697c727559708dffedde71fdd066d9bbc6c98', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca95b18bb8ba8c4d7f304252216ab3edff84fc17', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '331ddf4a48c3f13c526e55d4502f35d72d4d7f2b', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'accd20367e794df7a8c51e429af109134ec74eab', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d95c80768f82185b7cd655c315f47b17827d44c', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd427ef56b47a91ab4fd49bbb1448b6797c5fb200', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b32af9f053cf282eb32c1feebb33675e4a32d6e4', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}]",Xuanda Yang,22651013,th3charlie@gmail.com,User,,19,,14,92
462601952,[mypyc] Introduce GetElementPtr,"relates mypyc/mypyc#741

This PR introduces `GetElementPtr`, which computes the address of an element in an aggregate type.

Part of efforts to support the `len` and other macro-related primitives.",True,9260,https://api.github.com/repos/python/mypy/pulls/9260,https://github.com/python/mypy/pull/9260,closed,55,6,4,4,0,4,0,0,[],2020-08-04 08:06:17+00:00,2020-08-04 15:48:04+00:00,27707.0,7:41:47,"[{'comment_id': 464950172, 'comment_body': 'It would be more user friendly to take the name of the struct field instead of the index.', 'comment_created': datetime.datetime(2020, 8, 4, 10, 20, 9, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 464950378, 'comment_body': 'Display the name of the field instead of the integer index.', 'comment_created': datetime.datetime(2020, 8, 4, 10, 20, 35, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 464952474, 'comment_body': ""Generate `<dest> = &<src>.<field_name>` instead (by default). This produces more readable C. \r\n\r\nWe'll use the offsets in non-C backends. It's still important that we can calculate the offsets, but not for the C back end. \r\n\r\nTo test the offset calculation for real, it would be good to have some configuration option to use pointer arithmetic in tests, even when using the C back end. You can do this in a separate PR to keep this one simpler."", 'comment_created': datetime.datetime(2020, 8, 4, 10, 24, 58, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 465149989, 'comment_body': 'Later on, this can be switched to a dedicated pointer rtype (which is still treated as an integer).', 'comment_created': datetime.datetime(2020, 8, 4, 15, 47, 8, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}]","[{'commit_sha': '5201a1e33699daa486cc5532e0c35101c53f9f57', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90fc31b6242e24d35ab1a893587f2bb08682a1d6', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '807ab93a7098ae1f7e57c2086cf383aae4aa2a6d', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76d34cc3c1c9a81a7c7ab1fe2858297310fa6009', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}]",Xuanda Yang,22651013,th3charlie@gmail.com,User,,19,,14,92
465952298,[mypyc] Implement LoadAddress,"This PR introduces `LoadAddress`, an op for taking the address of a given name. 

Currently, in mypyc we only need to take the address of a name when we are using the name_ref_ops, so the op takes a string(CPython name) as its argument. We can revisit the design later if we want to take the address of arbitrary name later.",True,9287,https://api.github.com/repos/python/mypy/pulls/9287,https://github.com/python/mypy/pull/9287,closed,70,13,8,5,1,2,0,0,[],2020-08-11 08:28:59+00:00,2020-08-11 13:06:45+00:00,16666.0,4:37:46,"[{'comment_id': 468470657, 'comment_body': 'Style nit: move the commend to inside the function or replace with a docstring.', 'comment_created': datetime.datetime(2020, 8, 11, 10, 8, 8, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 468472581, 'comment_body': ""Did you consider storing these inside a registry under `mypyc.primitives`? By declaring these there, we'd have the benefit of having most things related to a built-in type defined in a single place. The declaration of a name reference could be simplified like this, for example:\r\n\r\n```py\r\nload_address_op('builtins.dict', object_rprimitive, 'PyDict_Type')\r\n```"", 'comment_created': datetime.datetime(2020, 8, 11, 10, 12, 7, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}]","[{'commit_sha': '5004d6850242a746e17381b4c99c76e5a20b2eb0', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '148f678840eccc1d926f3b8139ddd1dbaf841189', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8cca8d9c2d63e35a49f907a4afa097f323166779', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c96e672b9c8ce240ffda5628880b153fa5569a6c', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4bfa864e483896f3690e2fa1de1886b374f05700', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}]",Xuanda Yang,22651013,th3charlie@gmail.com,User,,19,,14,92
474628749,[mypyc] Implement SetMem,This PR implements `SetMem` op to set value to a memory address.,True,9364,https://api.github.com/repos/python/mypy/pulls/9364,https://github.com/python/mypy/pull/9364,closed,86,3,4,5,0,10,0,0,[],2020-08-27 11:14:56+00:00,2020-08-28 11:59:41+00:00,89085.0,"1 day, 0:44:45","[{'comment_id': 478497652, 'comment_body': ""Nit: Capitalize 'source' for consistency."", 'comment_created': datetime.datetime(2020, 8, 27, 15, 16, 29, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 478498934, 'comment_body': ""This is a bit confusing, since `src` means a different thing compared tot he comment below. I'd suggest writing it like this instead:\r\n```\r\n*(type *)dest = src\r\n```"", 'comment_created': datetime.datetime(2020, 8, 27, 15, 18, 21, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 478500084, 'comment_body': ""I think that `self.dest` should also be a source, since it's a value we access here."", 'comment_created': datetime.datetime(2020, 8, 27, 15, 19, 54, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 478500169, 'comment_body': 'Similar to above.', 'comment_created': datetime.datetime(2020, 8, 27, 15, 20, 2, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 478501177, 'comment_body': ""`op.dest` is a pointer so we don't do anything to it, just the memory pointed to by it. Since we don't track properties of memory locations, the second item of the return value should be empty."", 'comment_created': datetime.datetime(2020, 8, 27, 15, 21, 29, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 478501711, 'comment_body': ""We don't modify the pointer, so the the second return value item should be empty. We don't track memory locations in data flow analyses."", 'comment_created': datetime.datetime(2020, 8, 27, 15, 22, 14, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 478502849, 'comment_body': ""This should be similar to `visit_register_op`, since we don't modify `op.dest`, but the value pointed to by it."", 'comment_created': datetime.datetime(2020, 8, 27, 15, 23, 52, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 478503463, 'comment_body': ""Since we don't modify `op.dest` but a value pointed to by it, this case can be removed."", 'comment_created': datetime.datetime(2020, 8, 27, 15, 24, 42, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 478503932, 'comment_body': ""The return value should be `set(), set()`, since we don't modify `op.dest`."", 'comment_created': datetime.datetime(2020, 8, 27, 15, 25, 17, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 479154602, 'comment_body': 'This should be `set(op.sources()), set()`, since is this essentially same as a void register op.', 'comment_created': datetime.datetime(2020, 8, 28, 11, 22, 50, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}]","[{'commit_sha': '7dbe274cd471adada85c89fb958691940551397d', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '65811ad556ba7f31dae421e04dc8af6129c400e5', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83c69a6eb3881270ced07665aae98bdaa2c0a85e', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '173d317ceb3c0a024c6d45edc8ce3bae7dc5512f', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a5801ddc0722bfd2446e7aca2a72173e2be4e11', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}]",Xuanda Yang,22651013,th3charlie@gmail.com,User,,19,,14,92
463548050,[mypyc] Implement builtins.len primitive for list,"In this PR,

- `pointer_rprimitive` is introduced to represent pointer type
-  `PyVarObject` is registerd
- `size_t_to_short_int` custom op is added
- `GetElementPtr`'s codegen is **largely** changed.

I am marking this as a draft now and I expect tests to fail. Tests will be fixed once we decide the final design.",True,9271,https://api.github.com/repos/python/mypy/pulls/9271,https://github.com/python/mypy/pull/9271,closed,417,388,15,9,4,9,0,0,[],2020-08-05 17:53:39+00:00,2020-08-07 10:26:04+00:00,145945.0,"1 day, 16:32:25","[{'comment_id': 466333893, 'comment_body': ""I don't see the value of having the pointer target 32-bit integers on 32-bit platforms and 64-bit integers on 64-bit platforms. Since we also want to use integer operations on these (pointer arithmetic), the most reasonable choices for the type would be `char *` (for pointer arithmetic) or an unsigned integer type. \r\n\r\nI'm leaning towards using an unsigned integer type, so that we'll always have to explicitly cast to the desired pointer type in generated C. I think that this seems like a logical way to do this, as the pointers are untyped. Thus a plain pointer value should never be deferenced without a cast. (`void *` is not a good option since it doesn't support pointer arithmetic.)\r\n\r\nSo the pointer type could use `size_t` as the C type, similar to `CPyTagged`. However, `size_t` would look a bit strange in generated code, so we can add a typedef that resolves to it, for example, `CPyPtr`, defined in `mypyc_util.h` (similar to `CPyTagged`)."", 'comment_created': datetime.datetime(2020, 8, 6, 11, 1, 19, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 466334242, 'comment_body': 'Type in module name: `struct_regsitry` -> `struct_registry`', 'comment_created': datetime.datetime(2020, 8, 6, 11, 2, 1, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 466335893, 'comment_body': '`PyVarObject` is defined like this in Python 3.7:\r\n\r\n```c\r\ntypedef struct {\r\n    PyObject ob_base;\r\n    Py_ssize_t ob_size; /* Number of items in variable part */\r\n} PyVarObject;\r\n```\r\n\r\nFor consistency, we should define the `PyObject` struct and use `PyObject` as part of the definition of `PyVarObject` struct, instead of expanding the fields.', 'comment_created': datetime.datetime(2020, 8, 6, 11, 5, 33, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 466529802, 'comment_body': '`CPY_INT_TAG` is kind of confusing here since the real empty value is a null pointer (`0`). Please change the initializer for `CPyPtr` to 0 (why not also change for `int32_t` and `int64_t` as well). `CPyTagged` should still have `CPY_INT_TAG`.', 'comment_created': datetime.datetime(2020, 8, 6, 16, 18, 19, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 466530949, 'comment_body': ""Python doesn't let you take a hash of a list. Convert to tuples, for example (e.g. `tuple(self.names)`). Add unit test for equality and hashing."", 'comment_created': datetime.datetime(2020, 8, 6, 16, 20, 13, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 466533856, 'comment_body': ""We don't want to call a function here, since the reason we are doing this the hard way here instead of a primitive is to avoid a function call. Add a low-level IR builder helper for doing this. You can use `BinaryIntOp` to shift left by 1."", 'comment_created': datetime.datetime(2020, 8, 6, 16, 25, 18, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 466534173, 'comment_body': ""As mentioned above, we don't want to use this in this PR."", 'comment_created': datetime.datetime(2020, 8, 6, 16, 25, 52, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 466939579, 'comment_body': ""This can be removed, since it's unused."", 'comment_created': datetime.datetime(2020, 8, 7, 9, 50, 1, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 466941218, 'comment_body': 'sure, I must have forgotten to do that.', 'comment_created': datetime.datetime(2020, 8, 7, 9, 53, 31, tzinfo=datetime.timezone.utc), 'commenter': 'TH3CHARLie', 'type': 'User'}]","[{'commit_sha': '089efca34ad4412aa7948997d8161c4285302458', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9cf49b92a00a91895351e482dd2b3a3ead12ad2b', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7bacf3aeaac5570b45460c6421b948d40329e237', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25addc92ee5ddc18a17bc96a2ac9a54585a43b5d', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36904ed1eb7cab0f02b3dd3abfb975a3f1b7ec2f', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fad37130b3ba7640bf8b996fb18939acd025bfd2', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a242c169fd5fcd4c67c327629a3903ad43113aa', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ff184e186522fac2021c2a180258e6837139e3e', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19a8bba39507a3e4c2df1c82c24954f0ae0e752d', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}]",Xuanda Yang,22651013,th3charlie@gmail.com,User,,19,,14,92
450077059,[mypyc] Constant integer registers optimization,"Recent changes to mypyc introduce low-level, inline integer ops, which makes both IR and generated C code verbose and potentially hurting performance. This PR introduces an on-demand optimization pass that find out all the registers with constant integer values.

Relates mypyc/mypyc#749 mypyc/mypyc#746",True,9158,https://api.github.com/repos/python/mypy/pulls/9158,https://github.com/python/mypy/pull/9158,closed,47,12,3,9,4,3,0,0,[],2020-07-16 10:19:18+00:00,2020-07-20 14:37:27+00:00,361089.0,"4 days, 4:18:09","[{'comment_id': 456381779, 'comment_body': 'Style nit: move the first sentence to the same line as `""""""` (e.g. `""""""Find all ...`).', 'comment_created': datetime.datetime(2020, 7, 17, 11, 21, 55, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 456382554, 'comment_body': 'Can you rename this to `mypyc.analysis.const_int`? `integer_optimization` doesn\'t describe what this does, but why, and we generally name things based on ""what"".', 'comment_created': datetime.datetime(2020, 7, 17, 11, 24, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 461364888, 'comment_body': 'Pass `False` by keyword; boolean arguments are hard to understand without it', 'comment_created': datetime.datetime(2020, 7, 28, 7, 9, 23, tzinfo=datetime.timezone.utc), 'commenter': 'msullivan', 'type': 'User'}]","[{'commit_sha': '6ed1a4d5c781f30e04a00e55fa55a3497154575b', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e908bafe11c2be522d2aa19e496e966542e5ce41', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cfd41a860470e9aecabc0480fe541421d62760e0', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '65f54ea28d2e4be590c1ff36d2d9f0099fdd07f4', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15fa4777e6ba39f1ed67a57c7bb645419c6d6259', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da611caa145a97c2b63963137e0f02369be63b64', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1fb386341d04b0fd548211d1f2a4b419076d8e13', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '32583e079f01d4ed649ad6e79f96679e1e246acb', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b7f6d43b06ac54665e10b89061f10f9d043537b', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}]",Xuanda Yang,22651013,th3charlie@gmail.com,User,,19,,14,92
450619149,[mypyc] LoadInt store doubled value if tagged integer,"Mypyc currently represents int and short_int using a tagged representation, which requires doubling the value when emitting to  C. Since we are moving towards low-level IR, we change `LoadInt` to store the doubled value directly if the type is int/short_int, to be explicit about the tagged representation.",True,9162,https://api.github.com/repos/python/mypy/pulls/9162,https://github.com/python/mypy/pull/9162,closed,321,321,16,2,0,0,0,0,[],2020-07-17 00:13:07+00:00,2020-07-17 11:06:20+00:00,39193.0,10:53:13,[],"[{'commit_sha': 'ee810958825e0b987dda9dc34edced0d21e3fbd6', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f76beb935490d0ce907875504333b725b1d34b44', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}]",Xuanda Yang,22651013,th3charlie@gmail.com,User,,19,,14,92
454293781,[mypyc] Optimize const int regs during pretty IR printing,"follow up of #9158, make IR less verbose",True,9181,https://api.github.com/repos/python/mypy/pulls/9181,https://github.com/python/mypy/pull/9181,closed,2441,3178,20,6,1,4,0,0,[],2020-07-21 09:05:41+00:00,2020-07-22 09:42:15+00:00,88594.0,"1 day, 0:36:34","[{'comment_id': 458012908, 'comment_body': ""I'd prefer if `mypyc.ir` didn't depend on `mypyc.analysis`, to keep import structures less tangled. I think that we can move `mypyc.analysis.const_int` to `mypyc.ir.const_int`, since the analysis it performs is actually quite trivial. If we implement a fancier constant analysis, we'd add it to `mypyc.analysis`, but we wouldn't use it for IR pretty printing."", 'comment_created': datetime.datetime(2020, 7, 21, 11, 1, 19, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 458014144, 'comment_body': 'This needs to match whole words only, as otherwise we might be matching components of identifiers. `\\b` does the trick (both at the beginning and the end).', 'comment_created': datetime.datetime(2020, 7, 21, 11, 3, 55, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 458015181, 'comment_body': ""Unfortunately, this leaves gaps in the register numbering. A relatively easy way to fix this would be to give `LoadInt` values different names with independent numbering, such as `i0`, `i1`, etc., instead of `r0`, `r1`, and so on. This way we'd just filter out all `iX` names, and `rX` would remain without gaps."", 'comment_created': datetime.datetime(2020, 7, 21, 11, 6, 3, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 458016312, 'comment_body': ""Nit: It's considered error-prone to have a mutable default value. It's better to use `None` as the default and construct an empty dictionary if needed in the body. Some linters complain about this. (I know it's semantically fine here, but I think it's better to avoid this for style reasons.)"", 'comment_created': datetime.datetime(2020, 7, 21, 11, 8, 33, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}]","[{'commit_sha': 'cc0bc74b20475389f4c6db74af814c059480648d', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0907051a877f5075c056b62e6f449da0c77c5fa6', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd2fa8b86df4c800432c34d9ed680b41c7834cb0a', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '29a88ee602ba111665b76229756e88e808c37cc4', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7fb60a40a13e3a6139aeb8705a1ff6562f774c39', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a147e9b90a855063173d23a230360f9cdd7e4488', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}]",Xuanda Yang,22651013,th3charlie@gmail.com,User,,19,,14,92
467402974,[mypyc] Fix to_lines to show same type registers on the same line,This PR fixes `Environment.to_lines` so that continuous registers with the same type are shown on the same line.,True,9300,https://api.github.com/repos/python/mypy/pulls/9300,https://github.com/python/mypy/pull/9300,closed,80,172,15,2,0,0,0,0,[],2020-08-13 13:57:09+00:00,2020-08-13 16:53:51+00:00,10602.0,2:56:42,[],"[{'commit_sha': '592f091c163a6ca24d45f9dd151af5ef0626bbd9', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74cac12ec13f8350382bb7426944ec8c141794f6', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}]",Xuanda Yang,22651013,th3charlie@gmail.com,User,,19,,14,92
470823034,[mypyc] Make LoadGlobal print full name during pretty IR printing,"`LoadGlobal` used to have this hack to print partial name to keep consistent with the old `LoadStatic` behavior, now I've decided to make it print fullname since #9316 would need to print simple names like `NULL`.",True,9331,https://api.github.com/repos/python/mypy/pulls/9331,https://github.com/python/mypy/pull/9331,closed,220,223,12,2,0,0,0,0,[],2020-08-20 10:40:50+00:00,2020-08-20 16:09:41+00:00,19731.0,5:28:51,[],"[{'commit_sha': '949e28e3aee29399eed8e5b3f1c56dc7513daa09', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c34b048120f7f74b0e56831b77e06b11b037f183', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}]",Xuanda Yang,22651013,th3charlie@gmail.com,User,,19,,14,92
472150056,[mypyc] Fast tuple equality checks,closes mypyc/mypyc#728,True,9343,https://api.github.com/repos/python/mypy/pulls/9343,https://github.com/python/mypy/pull/9343,closed,59,2,2,12,5,5,0,0,[],2020-08-23 16:59:33+00:00,2020-08-27 09:40:03+00:00,319230.0,"3 days, 16:40:30","[{'comment_id': 476016080, 'comment_body': 'typo (""comapre"")', 'comment_created': datetime.datetime(2020, 8, 25, 0, 53, 53, tzinfo=datetime.timezone.utc), 'commenter': 'JelleZijlstra', 'type': 'User'}, {'comment_id': 476264636, 'comment_body': ""Thanks! But I've already addressed that in e34c025. The problem now is the `Tuple[T, ...]` nested within a regular Tuple"", 'comment_created': datetime.datetime(2020, 8, 25, 8, 17, 41, tzinfo=datetime.timezone.utc), 'commenter': 'TH3CHARLie', 'type': 'User'}, {'comment_id': 476576315, 'comment_body': 'Why a special case for just equality?', 'comment_created': datetime.datetime(2020, 8, 25, 16, 23, 35, tzinfo=datetime.timezone.utc), 'commenter': 'msullivan', 'type': 'User'}, {'comment_id': 476582048, 'comment_body': 'Nice catch!', 'comment_created': datetime.datetime(2020, 8, 25, 16, 32, 16, tzinfo=datetime.timezone.utc), 'commenter': 'TH3CHARLie', 'type': 'User'}, {'comment_id': 477437478, 'comment_body': ""Coerce only does a type check. I think that the normal CPython semantics would be to allow arbitrary objects that have a truth value, i.e. it may be better to use `bool_op` instead. Consider what happens if a user-defined class defines `__eq__` that returns a non-bool value such as `1` or `'x'`."", 'comment_created': datetime.datetime(2020, 8, 26, 16, 38, 12, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}]","[{'commit_sha': '91ce6115820b9d37df6d47bc5c6e42a92fe78180', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3f55e3e259468c39fd536297cc61698c0e091b2', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b50712c18f1c2d9f7ec17f981218b2b1f63d0467', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b13208aba627e16a74d10b806a5e81df8fa31b46', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ce18965085d34cdcfd8234e082b88e291e6d91b', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e34c025644073cbee82cb42078e38cf3cfe17cda', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60a809ccb5fdce17d43e38f7d8991dcfc189102c', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8037df1e121858c4734d29a0d0ec201f554c9982', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3179cf1674afaa0af786afb40bf11aff2bd1c3ae', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f859da4fd4783350eb01c046e43d6edbc1418d0', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47e8be306d0bfc62815cb1eff0d5caa0ad6fdd24', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7657f7a780c2fa898deab5da5ce33d243c47f02b', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}]",Xuanda Yang,22651013,th3charlie@gmail.com,User,,19,,14,92
474394527,[mypyc] Merge string equality ops,"This PR merges str `==` and `!=` by directly building them in irbuild.

The old primitive relies on `ERR_MAGIC`  to handle the exception, now we use an `err_occurred_op` with `keep_propagating_op` to represent the same semantics.

Actually, our first several commits to replace `PrimitiveOp` with `CallC` cause an incorrect primitive lookup logic that at the point the generic compare is merged, string primitives would just use the generic ones. This PR will also fix this since we can obsolete the old binary op registry.",True,9363,https://api.github.com/repos/python/mypy/pulls/9363,https://github.com/python/mypy/pull/9363,closed,131,93,7,5,2,5,0,0,[],2020-08-27 01:48:37+00:00,2020-08-27 16:05:52+00:00,51435.0,14:17:15,"[{'comment_id': 478299373, 'comment_body': 'Call `PyErr_Occurred` directly to avoid an extra function call in case the function is not inlined in a non-C back end?', 'comment_created': datetime.datetime(2020, 8, 27, 9, 56, 35, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 478307590, 'comment_body': ""The problem with directly calling `PyErr_Occurred` is that it returns `NULL` on normal exit and non-NULL on error, while `ERR_MAGIC` handles the exception when `NULL`, which means we'd add extra logic to negate the check on this single op."", 'comment_created': datetime.datetime(2020, 8, 27, 10, 10, 18, tzinfo=datetime.timezone.utc), 'commenter': 'TH3CHARLie', 'type': 'User'}, {'comment_id': 478342611, 'comment_body': ""Maybe you can can call `PyErr_Occurred`, compare the return against NULL (`ComparisonOp`), and if it's NULL, use `CPy_KeepPropagating`?"", 'comment_created': datetime.datetime(2020, 8, 27, 11, 21, 23, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 478343827, 'comment_body': 'That should work. Let me do a quick update.', 'comment_created': datetime.datetime(2020, 8, 27, 11, 23, 48, tzinfo=datetime.timezone.utc), 'commenter': 'TH3CHARLie', 'type': 'User'}, {'comment_id': 478495245, 'comment_body': 'Typo: unicode_cmapre -> unicode_compare.', 'comment_created': datetime.datetime(2020, 8, 27, 15, 13, 6, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}]","[{'commit_sha': '5b75179a268d110978abc348a721471e247e86f6', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f4c8ddc7ebf0dc323f23c8a2d9ce849c77d0e1a', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d2e41c924132c5fbc5ad3e92ff06e2c21879099', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f354eb851bf0083ae7a6ec856279cef90f1d80e', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '801e388f35f62de852ada8796a1af4377c90a311', 'committer_username': 'TH3CHARLie', 'committer_name': 'Xuanda Yang', 'committer_email': 'th3charlie@gmail.com', 'commit_date': datetime.datetime(2016, 10, 6, 2, 42, 36, tzinfo=datetime.timezone.utc)}]",Xuanda Yang,22651013,th3charlie@gmail.com,User,,19,,14,92

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
7053637,mypy,python/mypy,Python,2760,18128,239,730,11964,2902,74,241,"[{'id': 634080200, 'number': 10446, 'closed': datetime.datetime(2021, 5, 25, 15, 40, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 8, 7, 13, 3, tzinfo=datetime.timezone.utc), 'time_taken': 1499273.0, 'time_delta': '17 days, 8:27:53', 'additions': 12, 'deletions': 18, 'state': 'closed'}, {'id': 628411865, 'number': 10395, 'closed': None, 'created': datetime.datetime(2021, 5, 1, 10, 56, 44, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 128, 'deletions': 10, 'state': 'open'}, {'id': 620044355, 'number': 10349, 'closed': datetime.datetime(2021, 4, 21, 13, 26, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 21, 9, 43, 54, tzinfo=datetime.timezone.utc), 'time_taken': 13366.0, 'time_delta': '3:42:46', 'additions': 3, 'deletions': 3, 'state': 'closed'}, {'id': 521237809, 'number': 9725, 'closed': datetime.datetime(2020, 11, 16, 13, 4, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 11, 15, 18, 27, 12, tzinfo=datetime.timezone.utc), 'time_taken': 67037.0, 'time_delta': '18:37:17', 'additions': 267, 'deletions': 268, 'state': 'closed'}, {'id': 515514802, 'number': 9699, 'closed': datetime.datetime(2020, 11, 4, 17, 44, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 11, 4, 16, 55, 32, tzinfo=datetime.timezone.utc), 'time_taken': 2923.0, 'time_delta': '0:48:43', 'additions': 9, 'deletions': 275, 'state': 'closed'}, {'id': 514685765, 'number': 9695, 'closed': datetime.datetime(2020, 11, 4, 17, 41, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 11, 3, 12, 0, 49, tzinfo=datetime.timezone.utc), 'time_taken': 106851.0, 'time_delta': '1 day, 5:40:51', 'additions': 18, 'deletions': 0, 'state': 'closed'}, {'id': 513670196, 'number': 9685, 'closed': datetime.datetime(2020, 11, 2, 20, 40, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 11, 1, 18, 29, 6, tzinfo=datetime.timezone.utc), 'time_taken': 94290.0, 'time_delta': '1 day, 2:11:30', 'additions': 31, 'deletions': 0, 'state': 'closed'}, {'id': 512414571, 'number': 9662, 'closed': datetime.datetime(2020, 11, 3, 5, 49, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 29, 16, 45, 14, tzinfo=datetime.timezone.utc), 'time_taken': 392648.0, 'time_delta': '4 days, 13:04:08', 'additions': 22, 'deletions': 14, 'state': 'closed'}, {'id': 512354203, 'number': 9660, 'closed': datetime.datetime(2020, 11, 4, 16, 45, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 29, 15, 20, 25, tzinfo=datetime.timezone.utc), 'time_taken': 523529.0, 'time_delta': '6 days, 1:25:29', 'additions': 50, 'deletions': 23, 'state': 'closed'}, {'id': 501050819, 'number': 9575, 'closed': datetime.datetime(2020, 10, 14, 11, 39, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 10, 23, 19, 20, tzinfo=datetime.timezone.utc), 'time_taken': 303611.0, 'time_delta': '3 days, 12:20:11', 'additions': 57, 'deletions': 1, 'state': 'closed'}, {'id': 492921237, 'number': 9481, 'closed': datetime.datetime(2020, 9, 27, 11, 0, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 25, 8, 32, 58, tzinfo=datetime.timezone.utc), 'time_taken': 181671.0, 'time_delta': '2 days, 2:27:51', 'additions': 18, 'deletions': 2, 'state': 'closed'}, {'id': 475938925, 'number': 9379, 'closed': datetime.datetime(2020, 9, 9, 10, 22, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 30, 17, 20, 53, tzinfo=datetime.timezone.utc), 'time_taken': 838909.0, 'time_delta': '9 days, 17:01:49', 'additions': 190, 'deletions': 144, 'state': 'closed'}, {'id': 475914350, 'number': 9378, 'closed': datetime.datetime(2020, 9, 9, 8, 59, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 30, 13, 54, tzinfo=datetime.timezone.utc), 'time_taken': 846327.0, 'time_delta': '9 days, 19:05:27', 'additions': 492, 'deletions': 346, 'state': 'closed'}, {'id': 475014380, 'number': 9368, 'closed': datetime.datetime(2020, 8, 28, 11, 27, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 28, 0, 12, 52, tzinfo=datetime.timezone.utc), 'time_taken': 40452.0, 'time_delta': '11:14:12', 'additions': 23, 'deletions': 102, 'state': 'closed'}, {'id': 474628749, 'number': 9364, 'closed': datetime.datetime(2020, 8, 28, 11, 59, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 27, 11, 14, 56, tzinfo=datetime.timezone.utc), 'time_taken': 89085.0, 'time_delta': '1 day, 0:44:45', 'additions': 86, 'deletions': 3, 'state': 'closed'}, {'id': 474394527, 'number': 9363, 'closed': datetime.datetime(2020, 8, 27, 16, 5, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 27, 1, 48, 37, tzinfo=datetime.timezone.utc), 'time_taken': 51435.0, 'time_delta': '14:17:15', 'additions': 131, 'deletions': 93, 'state': 'closed'}, {'id': 473996025, 'number': 9359, 'closed': datetime.datetime(2020, 9, 4, 10, 25, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 26, 15, 45, 36, tzinfo=datetime.timezone.utc), 'time_taken': 758372.0, 'time_delta': '8 days, 18:39:32', 'additions': 18, 'deletions': 15, 'state': 'closed'}, {'id': 473377880, 'number': 9353, 'closed': datetime.datetime(2020, 8, 26, 12, 51, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 25, 18, 20, 39, tzinfo=datetime.timezone.utc), 'time_taken': 66666.0, 'time_delta': '18:31:06', 'additions': 33, 'deletions': 65, 'state': 'closed'}, {'id': 472490053, 'number': 9347, 'closed': datetime.datetime(2020, 8, 25, 10, 22, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 24, 12, 42, 49, tzinfo=datetime.timezone.utc), 'time_taken': 77974.0, 'time_delta': '21:39:34', 'additions': 23, 'deletions': 12, 'state': 'closed'}, {'id': 472150056, 'number': 9343, 'closed': datetime.datetime(2020, 8, 27, 9, 40, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 23, 16, 59, 33, tzinfo=datetime.timezone.utc), 'time_taken': 319230.0, 'time_delta': '3 days, 16:40:30', 'additions': 59, 'deletions': 2, 'state': 'closed'}, {'id': 471743603, 'number': 9334, 'closed': datetime.datetime(2020, 8, 24, 11, 5, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 21, 17, 1, 40, tzinfo=datetime.timezone.utc), 'time_taken': 237831.0, 'time_delta': '2 days, 18:03:51', 'additions': 90, 'deletions': 29, 'state': 'closed'}, {'id': 470823034, 'number': 9331, 'closed': datetime.datetime(2020, 8, 20, 16, 9, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 20, 10, 40, 50, tzinfo=datetime.timezone.utc), 'time_taken': 19731.0, 'time_delta': '5:28:51', 'additions': 220, 'deletions': 223, 'state': 'closed'}, {'id': 468823821, 'number': 9320, 'closed': datetime.datetime(2020, 8, 18, 10, 1, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 17, 13, 13, 14, tzinfo=datetime.timezone.utc), 'time_taken': 74872.0, 'time_delta': '20:47:52', 'additions': 53, 'deletions': 63, 'state': 'closed'}, {'id': 468498312, 'number': 9316, 'closed': datetime.datetime(2020, 8, 21, 11, 7, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 16, 21, 24, 46, tzinfo=datetime.timezone.utc), 'time_taken': 394970.0, 'time_delta': '4 days, 13:42:50', 'additions': 112, 'deletions': 108, 'state': 'closed'}, {'id': 468259160, 'number': 9313, 'closed': datetime.datetime(2020, 8, 18, 17, 21, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 15, 4, 34, 29, tzinfo=datetime.timezone.utc), 'time_taken': 305235.0, 'time_delta': '3 days, 12:47:15', 'additions': 209, 'deletions': 121, 'state': 'closed'}, {'id': 468008063, 'number': 9310, 'closed': datetime.datetime(2020, 8, 14, 15, 16, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 14, 14, 14, 26, tzinfo=datetime.timezone.utc), 'time_taken': 3696.0, 'time_delta': '1:01:36', 'additions': 164, 'deletions': 142, 'state': 'closed'}, {'id': 467720916, 'number': 9303, 'closed': datetime.datetime(2020, 8, 14, 11, 31, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 14, 1, 47, 5, tzinfo=datetime.timezone.utc), 'time_taken': 35053.0, 'time_delta': '9:44:13', 'additions': 21, 'deletions': 28, 'state': 'closed'}, {'id': 467402974, 'number': 9300, 'closed': datetime.datetime(2020, 8, 13, 16, 53, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 13, 13, 57, 9, tzinfo=datetime.timezone.utc), 'time_taken': 10602.0, 'time_delta': '2:56:42', 'additions': 80, 'deletions': 172, 'state': 'closed'}, {'id': 467323720, 'number': 9298, 'closed': datetime.datetime(2020, 8, 13, 13, 45, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 13, 11, 26, 31, tzinfo=datetime.timezone.utc), 'time_taken': 8331.0, 'time_delta': '2:18:51', 'additions': 35, 'deletions': 28, 'state': 'closed'}, {'id': 466696514, 'number': 9294, 'closed': datetime.datetime(2020, 8, 12, 13, 48, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 12, 11, 14, 56, tzinfo=datetime.timezone.utc), 'time_taken': 9197.0, 'time_delta': '2:33:17', 'additions': 516, 'deletions': 874, 'state': 'closed'}, {'id': 466596657, 'number': 9293, 'closed': datetime.datetime(2020, 8, 12, 10, 3, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 12, 8, 5, 19, tzinfo=datetime.timezone.utc), 'time_taken': 7107.0, 'time_delta': '1:58:27', 'additions': 52, 'deletions': 74, 'state': 'closed'}, {'id': 465952298, 'number': 9287, 'closed': datetime.datetime(2020, 8, 11, 13, 6, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 11, 8, 28, 59, tzinfo=datetime.timezone.utc), 'time_taken': 16666.0, 'time_delta': '4:37:46', 'additions': 70, 'deletions': 13, 'state': 'closed'}, {'id': 465300169, 'number': 9284, 'closed': datetime.datetime(2020, 8, 10, 10, 50, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 10, 6, 16, 55, tzinfo=datetime.timezone.utc), 'time_taken': 16410.0, 'time_delta': '4:33:30', 'additions': 316, 'deletions': 331, 'state': 'closed'}, {'id': 464576639, 'number': 9276, 'closed': datetime.datetime(2020, 8, 7, 12, 58, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 7, 12, 26, 21, tzinfo=datetime.timezone.utc), 'time_taken': 1910.0, 'time_delta': '0:31:50', 'additions': 2, 'deletions': 25, 'state': 'closed'}, {'id': 463548050, 'number': 9271, 'closed': datetime.datetime(2020, 8, 7, 10, 26, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 5, 17, 53, 39, tzinfo=datetime.timezone.utc), 'time_taken': 145945.0, 'time_delta': '1 day, 16:32:25', 'additions': 417, 'deletions': 388, 'state': 'closed'}, {'id': 462601952, 'number': 9260, 'closed': datetime.datetime(2020, 8, 4, 15, 48, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 4, 8, 6, 17, tzinfo=datetime.timezone.utc), 'time_taken': 27707.0, 'time_delta': '7:41:47', 'additions': 55, 'deletions': 6, 'state': 'closed'}, {'id': 462542730, 'number': 9258, 'closed': datetime.datetime(2020, 8, 5, 9, 53, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 4, 5, 46, 51, tzinfo=datetime.timezone.utc), 'time_taken': 101216.0, 'time_delta': '1 day, 4:06:56', 'additions': 235, 'deletions': 241, 'state': 'closed'}, {'id': 461992572, 'number': 9251, 'closed': datetime.datetime(2020, 8, 3, 12, 45, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 3, 7, 12, 38, tzinfo=datetime.timezone.utc), 'time_taken': 19958.0, 'time_delta': '5:32:38', 'additions': 45, 'deletions': 26, 'state': 'closed'}, {'id': 461758953, 'number': 9245, 'closed': datetime.datetime(2020, 8, 3, 10, 48, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 2, 5, 59, 9, tzinfo=datetime.timezone.utc), 'time_taken': 103772.0, 'time_delta': '1 day, 4:49:32', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 457840894, 'number': 9227, 'closed': datetime.datetime(2020, 8, 12, 12, 6, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 28, 14, 17, 22, tzinfo=datetime.timezone.utc), 'time_taken': 1288170.0, 'time_delta': '14 days, 21:49:30', 'additions': 2, 'deletions': 1, 'state': 'closed'}, {'id': 457794382, 'number': 9224, 'closed': datetime.datetime(2020, 7, 28, 16, 1, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 28, 13, 2, 15, tzinfo=datetime.timezone.utc), 'time_taken': 10729.0, 'time_delta': '2:58:49', 'additions': 82, 'deletions': 84, 'state': 'closed'}, {'id': 457041718, 'number': 9215, 'closed': datetime.datetime(2020, 7, 31, 14, 23, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 27, 9, 49, 11, tzinfo=datetime.timezone.utc), 'time_taken': 362041.0, 'time_delta': '4 days, 4:34:01', 'additions': 291, 'deletions': 10, 'state': 'closed'}, {'id': 456773742, 'number': 9211, 'closed': datetime.datetime(2020, 7, 28, 6, 59, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 26, 16, 34, 35, tzinfo=datetime.timezone.utc), 'time_taken': 138322.0, 'time_delta': '1 day, 14:25:22', 'additions': 56, 'deletions': 4, 'state': 'closed'}, {'id': 455076027, 'number': 9189, 'closed': datetime.datetime(2020, 7, 22, 13, 2, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 22, 12, 5, 36, tzinfo=datetime.timezone.utc), 'time_taken': 3402.0, 'time_delta': '0:56:42', 'additions': 264, 'deletions': 76, 'state': 'closed'}, {'id': 454874146, 'number': 9187, 'closed': datetime.datetime(2020, 7, 22, 11, 29, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 22, 4, 34, 50, tzinfo=datetime.timezone.utc), 'time_taken': 24861.0, 'time_delta': '6:54:21', 'additions': 719, 'deletions': 258, 'state': 'closed'}, {'id': 454293781, 'number': 9181, 'closed': datetime.datetime(2020, 7, 22, 9, 42, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 21, 9, 5, 41, tzinfo=datetime.timezone.utc), 'time_taken': 88594.0, 'time_delta': '1 day, 0:36:34', 'additions': 2441, 'deletions': 3178, 'state': 'closed'}, {'id': 450700268, 'number': 9164, 'closed': datetime.datetime(2020, 7, 17, 11, 19, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 17, 2, 42, 46, tzinfo=datetime.timezone.utc), 'time_taken': 31030.0, 'time_delta': '8:37:10', 'additions': 8, 'deletions': 8, 'state': 'closed'}, {'id': 450685868, 'number': 9163, 'closed': datetime.datetime(2020, 7, 20, 9, 43, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 17, 2, 17, 25, tzinfo=datetime.timezone.utc), 'time_taken': 285981.0, 'time_delta': '3 days, 7:26:21', 'additions': 108, 'deletions': 38, 'state': 'closed'}, {'id': 450619149, 'number': 9162, 'closed': datetime.datetime(2020, 7, 17, 11, 6, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 17, 0, 13, 7, tzinfo=datetime.timezone.utc), 'time_taken': 39193.0, 'time_delta': '10:53:13', 'additions': 321, 'deletions': 321, 'state': 'closed'}, {'id': 450077059, 'number': 9158, 'closed': datetime.datetime(2020, 7, 20, 14, 37, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 16, 10, 19, 18, tzinfo=datetime.timezone.utc), 'time_taken': 361089.0, 'time_delta': '4 days, 4:18:09', 'additions': 47, 'deletions': 12, 'state': 'closed'}, {'id': 449753574, 'number': 9154, 'closed': datetime.datetime(2020, 7, 22, 11, 57, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 15, 21, 37, 19, tzinfo=datetime.timezone.utc), 'time_taken': 570000.0, 'time_delta': '6 days, 14:20:00', 'additions': 1039, 'deletions': 348, 'state': 'closed'}, {'id': 449382800, 'number': 9152, 'closed': datetime.datetime(2020, 7, 15, 15, 57, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 15, 10, 10, 46, tzinfo=datetime.timezone.utc), 'time_taken': 20806.0, 'time_delta': '5:46:46', 'additions': 255, 'deletions': 66, 'state': 'closed'}, {'id': 449015390, 'number': 9149, 'closed': datetime.datetime(2020, 7, 15, 13, 20, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 14, 17, 30, 13, tzinfo=datetime.timezone.utc), 'time_taken': 71394.0, 'time_delta': '19:49:54', 'additions': 56, 'deletions': 8, 'state': 'closed'}, {'id': 448661723, 'number': 9148, 'closed': datetime.datetime(2020, 7, 14, 11, 16, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 14, 5, 52, 33, tzinfo=datetime.timezone.utc), 'time_taken': 19434.0, 'time_delta': '5:23:54', 'additions': 261, 'deletions': 167, 'state': 'closed'}, {'id': 447726643, 'number': 9127, 'closed': datetime.datetime(2020, 7, 13, 15, 1, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 11, 6, 13, 26, tzinfo=datetime.timezone.utc), 'time_taken': 204461.0, 'time_delta': '2 days, 8:47:41', 'additions': 332, 'deletions': 144, 'state': 'closed'}, {'id': 447110609, 'number': 9121, 'closed': datetime.datetime(2020, 7, 10, 11, 29, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 9, 21, 48, 7, tzinfo=datetime.timezone.utc), 'time_taken': 49312.0, 'time_delta': '13:41:52', 'additions': 188, 'deletions': 192, 'state': 'closed'}, {'id': 446974259, 'number': 9119, 'closed': datetime.datetime(2020, 7, 10, 11, 3, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 9, 16, 41, 41, tzinfo=datetime.timezone.utc), 'time_taken': 66115.0, 'time_delta': '18:21:55', 'additions': 4, 'deletions': 5, 'state': 'closed'}, {'id': 446681421, 'number': 9116, 'closed': datetime.datetime(2020, 7, 10, 11, 7, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 9, 7, 47, 2, tzinfo=datetime.timezone.utc), 'time_taken': 98420.0, 'time_delta': '1 day, 3:20:20', 'additions': 247, 'deletions': 88, 'state': 'closed'}, {'id': 446060200, 'number': 9110, 'closed': datetime.datetime(2020, 7, 9, 11, 26, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 8, 7, 47, 25, tzinfo=datetime.timezone.utc), 'time_taken': 99519.0, 'time_delta': '1 day, 3:38:39', 'additions': 325, 'deletions': 332, 'state': 'closed'}, {'id': 445182728, 'number': 9108, 'closed': datetime.datetime(2020, 7, 7, 12, 8, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 7, 6, 21, 49, tzinfo=datetime.timezone.utc), 'time_taken': 20804.0, 'time_delta': '5:46:44', 'additions': 117, 'deletions': 33, 'state': 'closed'}, {'id': 441955634, 'number': 9073, 'closed': datetime.datetime(2020, 7, 2, 9, 57, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 30, 11, 11, 4, tzinfo=datetime.timezone.utc), 'time_taken': 168399.0, 'time_delta': '1 day, 22:46:39', 'additions': 79, 'deletions': 62, 'state': 'closed'}, {'id': 441200793, 'number': 9067, 'closed': datetime.datetime(2020, 6, 30, 10, 3, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 29, 5, 18, 31, tzinfo=datetime.timezone.utc), 'time_taken': 103480.0, 'time_delta': '1 day, 4:44:40', 'additions': 105, 'deletions': 84, 'state': 'closed'}, {'id': 440407011, 'number': 9050, 'closed': datetime.datetime(2020, 6, 26, 17, 29, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 26, 6, 30, 10, tzinfo=datetime.timezone.utc), 'time_taken': 39543.0, 'time_delta': '10:59:03', 'additions': 112, 'deletions': 43, 'state': 'closed'}, {'id': 438594271, 'number': 9035, 'closed': datetime.datetime(2020, 6, 25, 15, 25, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 23, 14, 4, 31, tzinfo=datetime.timezone.utc), 'time_taken': 177659.0, 'time_delta': '2 days, 1:20:59', 'additions': 69, 'deletions': 37, 'state': 'closed'}, {'id': 437544530, 'number': 9030, 'closed': datetime.datetime(2021, 5, 1, 10, 55, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 21, 13, 20, 17, tzinfo=datetime.timezone.utc), 'time_taken': 27120935.0, 'time_delta': '313 days, 21:35:35', 'additions': 128, 'deletions': 10, 'state': 'closed'}, {'id': 436440457, 'number': 9019, 'closed': datetime.datetime(2020, 6, 18, 16, 36, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 18, 12, 30, 12, tzinfo=datetime.timezone.utc), 'time_taken': 14794.0, 'time_delta': '4:06:34', 'additions': 168, 'deletions': 158, 'state': 'closed'}, {'id': 435978146, 'number': 9014, 'closed': datetime.datetime(2020, 6, 18, 11, 15, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 17, 16, 56, 7, tzinfo=datetime.timezone.utc), 'time_taken': 65974.0, 'time_delta': '18:19:34', 'additions': 83, 'deletions': 79, 'state': 'closed'}, {'id': 435667609, 'number': 9012, 'closed': datetime.datetime(2020, 6, 17, 11, 20, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 17, 7, 50, 33, tzinfo=datetime.timezone.utc), 'time_taken': 12606.0, 'time_delta': '3:30:06', 'additions': 113, 'deletions': 116, 'state': 'closed'}, {'id': 432884409, 'number': 8987, 'closed': datetime.datetime(2020, 6, 16, 2, 53, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 11, 7, 11, 6, tzinfo=datetime.timezone.utc), 'time_taken': 416573.0, 'time_delta': '4 days, 19:42:53', 'additions': 14, 'deletions': 13, 'state': 'closed'}, {'id': 431463234, 'number': 8973, 'closed': datetime.datetime(2020, 6, 15, 11, 31, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 9, 0, 20, 44, tzinfo=datetime.timezone.utc), 'time_taken': 558663.0, 'time_delta': '6 days, 11:11:03', 'additions': 83, 'deletions': 14, 'state': 'closed'}, {'id': 428281156, 'number': 8955, 'closed': datetime.datetime(2020, 6, 5, 17, 32, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 5, 7, 44, 31, tzinfo=datetime.timezone.utc), 'time_taken': 35266.0, 'time_delta': '9:47:46', 'additions': 19, 'deletions': 6, 'state': 'closed'}, {'id': 427761994, 'number': 8948, 'closed': datetime.datetime(2020, 6, 9, 9, 17, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 4, 11, 11, 48, tzinfo=datetime.timezone.utc), 'time_taken': 425113.0, 'time_delta': '4 days, 22:05:13', 'additions': 323, 'deletions': 210, 'state': 'closed'}, {'id': 426751645, 'number': 8933, 'closed': datetime.datetime(2020, 6, 3, 10, 1, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 2, 18, 15, 53, tzinfo=datetime.timezone.utc), 'time_taken': 56751.0, 'time_delta': '15:45:51', 'additions': 36, 'deletions': 16, 'state': 'closed'}, {'id': 426030620, 'number': 8929, 'closed': datetime.datetime(2020, 6, 1, 15, 52, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 1, 14, 57, 20, tzinfo=datetime.timezone.utc), 'time_taken': 3297.0, 'time_delta': '0:54:57', 'additions': 44, 'deletions': 24, 'state': 'closed'}, {'id': 423969720, 'number': 8902, 'closed': datetime.datetime(2020, 6, 1, 11, 10, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 27, 16, 25, 48, tzinfo=datetime.timezone.utc), 'time_taken': 413095.0, 'time_delta': '4 days, 18:44:55', 'additions': 119, 'deletions': 26, 'state': 'closed'}, {'id': 422426020, 'number': 8880, 'closed': datetime.datetime(2020, 5, 27, 9, 53, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 24, 15, 5, 41, tzinfo=datetime.timezone.utc), 'time_taken': 240496.0, 'time_delta': '2 days, 18:48:16', 'additions': 125, 'deletions': 9, 'state': 'closed'}, {'id': 403880546, 'number': 8676, 'closed': datetime.datetime(2020, 4, 15, 17, 30, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 15, 17, 1, 16, tzinfo=datetime.timezone.utc), 'time_taken': 1749.0, 'time_delta': '0:29:09', 'additions': 0, 'deletions': 0, 'state': 'closed'}, {'id': 397631092, 'number': 8621, 'closed': datetime.datetime(2020, 4, 3, 19, 21, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 2, 14, 55, 6, tzinfo=datetime.timezone.utc), 'time_taken': 102404.0, 'time_delta': '1 day, 4:26:44', 'additions': 29, 'deletions': 2, 'state': 'closed'}, {'id': 391914722, 'number': 8570, 'closed': datetime.datetime(2020, 4, 2, 15, 32, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 21, 20, 53, 8, tzinfo=datetime.timezone.utc), 'time_taken': 1017584.0, 'time_delta': '11 days, 18:39:44', 'additions': 279, 'deletions': 13, 'state': 'closed'}, {'id': 384395640, 'number': 8496, 'closed': datetime.datetime(2020, 3, 6, 22, 33, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 5, 17, 4, 20, tzinfo=datetime.timezone.utc), 'time_taken': 106179.0, 'time_delta': '1 day, 5:29:39', 'additions': 45, 'deletions': 1, 'state': 'closed'}, {'id': 381701773, 'number': 8460, 'closed': datetime.datetime(2020, 3, 4, 18, 37, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 29, 2, 56, 36, tzinfo=datetime.timezone.utc), 'time_taken': 402068.0, 'time_delta': '4 days, 15:41:08', 'additions': 68, 'deletions': 1, 'state': 'closed'}, {'id': 369626738, 'number': 8350, 'closed': datetime.datetime(2020, 2, 7, 23, 6, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 31, 15, 9, 35, tzinfo=datetime.timezone.utc), 'time_taken': 633394.0, 'time_delta': '7 days, 7:56:34', 'additions': 48, 'deletions': 13, 'state': 'closed'}, {'id': 365360762, 'number': 8310, 'closed': datetime.datetime(2020, 1, 21, 15, 49, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 21, 15, 20, 45, tzinfo=datetime.timezone.utc), 'time_taken': 1727.0, 'time_delta': '0:28:47', 'additions': 10, 'deletions': 6, 'state': 'closed'}, {'id': 363985568, 'number': 8302, 'closed': datetime.datetime(2020, 1, 17, 13, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 17, 6, 22, 28, tzinfo=datetime.timezone.utc), 'time_taken': 25292.0, 'time_delta': '7:01:32', 'additions': 51, 'deletions': 13, 'state': 'closed'}, {'id': 359610508, 'number': 8248, 'closed': datetime.datetime(2020, 1, 6, 20, 56, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 6, 16, 19, 17, tzinfo=datetime.timezone.utc), 'time_taken': 16621.0, 'time_delta': '4:37:01', 'additions': 5, 'deletions': 2, 'state': 'closed'}, {'id': 356600135, 'number': 8201, 'closed': datetime.datetime(2020, 1, 17, 12, 22, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 12, 24, 10, 48, 32, tzinfo=datetime.timezone.utc), 'time_taken': 2079248.0, 'time_delta': '24 days, 1:34:08', 'additions': 27, 'deletions': 0, 'state': 'closed'}, {'id': 356527428, 'number': 8200, 'closed': datetime.datetime(2020, 1, 30, 17, 52, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 12, 24, 5, 39, 34, tzinfo=datetime.timezone.utc), 'time_taken': 3240775.0, 'time_delta': '37 days, 12:12:55', 'additions': 123, 'deletions': 32, 'state': 'closed'}, {'id': 355009810, 'number': 8175, 'closed': datetime.datetime(2019, 12, 20, 18, 59, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 12, 19, 8, 21, 14, tzinfo=datetime.timezone.utc), 'time_taken': 124691.0, 'time_delta': '1 day, 10:38:11', 'additions': 74, 'deletions': 1, 'state': 'closed'}, {'id': 354954445, 'number': 8174, 'closed': datetime.datetime(2019, 12, 19, 10, 31, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 12, 19, 5, 30, 46, tzinfo=datetime.timezone.utc), 'time_taken': 18016.0, 'time_delta': '5:00:16', 'additions': 26, 'deletions': 1, 'state': 'closed'}, {'id': 353394993, 'number': 8153, 'closed': datetime.datetime(2020, 1, 16, 13, 22, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 12, 16, 6, 19, 56, tzinfo=datetime.timezone.utc), 'time_taken': 2703783.0, 'time_delta': '31 days, 7:03:03', 'additions': 49, 'deletions': 1, 'state': 'closed'}, {'id': 353155738, 'number': 8146, 'closed': datetime.datetime(2019, 12, 20, 13, 24, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 12, 14, 8, 35, 31, tzinfo=datetime.timezone.utc), 'time_taken': 535728.0, 'time_delta': '6 days, 4:48:48', 'additions': 31, 'deletions': 6, 'state': 'closed'}, {'id': 352430444, 'number': 8137, 'closed': datetime.datetime(2019, 12, 23, 15, 31, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 12, 12, 14, 3, 27, tzinfo=datetime.timezone.utc), 'time_taken': 955682.0, 'time_delta': '11 days, 1:28:02', 'additions': 222, 'deletions': 409, 'state': 'closed'}, {'id': 350502747, 'number': 8112, 'closed': datetime.datetime(2019, 12, 9, 9, 28, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 12, 9, 3, 32, 7, tzinfo=datetime.timezone.utc), 'time_taken': 21374.0, 'time_delta': '5:56:14', 'additions': 10, 'deletions': 13, 'state': 'closed'}, {'id': 350416074, 'number': 8107, 'closed': datetime.datetime(2019, 12, 12, 1, 43, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 12, 8, 14, 8, 15, tzinfo=datetime.timezone.utc), 'time_taken': 300911.0, 'time_delta': '3 days, 11:35:11', 'additions': 29, 'deletions': 3, 'state': 'closed'}, {'id': 349786504, 'number': 8096, 'closed': datetime.datetime(2019, 12, 7, 9, 27, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 12, 6, 6, 29, 16, tzinfo=datetime.timezone.utc), 'time_taken': 97120.0, 'time_delta': '1 day, 2:58:40', 'additions': 58, 'deletions': 0, 'state': 'closed'}, {'id': 348371613, 'number': 8066, 'closed': datetime.datetime(2019, 12, 11, 20, 52, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 12, 3, 14, 48, 4, tzinfo=datetime.timezone.utc), 'time_taken': 713072.0, 'time_delta': '8 days, 6:04:32', 'additions': 33, 'deletions': 7, 'state': 'closed'}, {'id': 348297809, 'number': 8063, 'closed': datetime.datetime(2019, 12, 3, 15, 34, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 12, 3, 12, 18, 45, tzinfo=datetime.timezone.utc), 'time_taken': 11758.0, 'time_delta': '3:15:58', 'additions': 13, 'deletions': 3, 'state': 'closed'}, {'id': 346025894, 'number': 8019, 'closed': datetime.datetime(2019, 12, 13, 20, 56, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 11, 27, 2, 57, 49, tzinfo=datetime.timezone.utc), 'time_taken': 1447099.0, 'time_delta': '16 days, 17:58:19', 'additions': 29, 'deletions': 0, 'state': 'closed'}, {'id': 345789477, 'number': 8014, 'closed': datetime.datetime(2019, 11, 26, 21, 30, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 11, 26, 15, 19, 41, tzinfo=datetime.timezone.utc), 'time_taken': 22276.0, 'time_delta': '6:11:16', 'additions': 39, 'deletions': 1, 'state': 'closed'}, {'id': 345514591, 'number': 8011, 'closed': datetime.datetime(2019, 11, 26, 14, 27, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 11, 26, 3, 0, 29, tzinfo=datetime.timezone.utc), 'time_taken': 41240.0, 'time_delta': '11:27:20', 'additions': 11, 'deletions': 1, 'state': 'closed'}, {'id': 344103040, 'number': 7995, 'closed': datetime.datetime(2019, 12, 3, 12, 2, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 11, 21, 15, 53, 9, tzinfo=datetime.timezone.utc), 'time_taken': 1022949.0, 'time_delta': '11 days, 20:09:09', 'additions': 117, 'deletions': 1, 'state': 'closed'}, {'id': 341979502, 'number': 7963, 'closed': datetime.datetime(2020, 9, 6, 12, 33, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 11, 18, 5, 59, 31, tzinfo=datetime.timezone.utc), 'time_taken': 25338825.0, 'time_delta': '293 days, 6:33:45', 'additions': 70, 'deletions': 4, 'state': 'closed'}, {'id': 339688855, 'number': 7930, 'closed': datetime.datetime(2019, 11, 14, 15, 25, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 11, 12, 1, 45, 40, tzinfo=datetime.timezone.utc), 'time_taken': 222007.0, 'time_delta': '2 days, 13:40:07', 'additions': 67, 'deletions': 24, 'state': 'closed'}, {'id': 337833747, 'number': 7898, 'closed': datetime.datetime(2019, 11, 7, 9, 35, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 11, 7, 3, 18, 43, tzinfo=datetime.timezone.utc), 'time_taken': 22622.0, 'time_delta': '6:17:02', 'additions': 24, 'deletions': 1, 'state': 'closed'}, {'id': 337171489, 'number': 7892, 'closed': datetime.datetime(2019, 11, 7, 9, 13, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 11, 6, 5, 7, 52, tzinfo=datetime.timezone.utc), 'time_taken': 101136.0, 'time_delta': '1 day, 4:05:36', 'additions': 13, 'deletions': 2, 'state': 'closed'}, {'id': 336580231, 'number': 7878, 'closed': datetime.datetime(2019, 11, 6, 17, 7, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 11, 5, 3, 30, 26, tzinfo=datetime.timezone.utc), 'time_taken': 135428.0, 'time_delta': '1 day, 13:37:08', 'additions': 67, 'deletions': 1, 'state': 'closed'}, {'id': 336270981, 'number': 7865, 'closed': datetime.datetime(2019, 11, 4, 17, 51, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 11, 4, 13, 15, 51, tzinfo=datetime.timezone.utc), 'time_taken': 16514.0, 'time_delta': '4:35:14', 'additions': 19, 'deletions': 0, 'state': 'closed'}]"
