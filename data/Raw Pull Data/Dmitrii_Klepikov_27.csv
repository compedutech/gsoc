pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
698976825,GSoC module to save and load point cloud,"**Merge with extra**: https://github.com/opencv/opencv_extra/pull/889

```
opencv_extra=pointcloudio
```

PR for GSoC'21 project on 3D samples using OpenGL and GLFW


### Pull Request Readiness Checklist

See details at https://github.com/opencv/opencv/wiki/How_to_contribute#making-a-good-pull-request

- [x] I agree to contribute to the project under Apache 2 License.
- [x] To the best of my knowledge, the proposed patch is not based on a code under GPL or other license that is incompatible with OpenCV
- [x] The PR is proposed to proper branch
- [x] There is reference to original bug report and related work
- [x] There is accuracy test, performance test and test data in opencv_extra repository, if applicable
      Patch to opencv_extra has the same branch name.
- [x] The feature is well documented and sample code can be built with the project CMake
",True,20471,https://api.github.com/repos/opencv/opencv/pulls/20471,https://github.com/opencv/opencv/pull/20471,closed,1113,12,19,5,7,121,2,1,"[{'name': 'GSoC'}, {'name': 'category: 3d module'}]",2021-07-28 20:00:56+00:00,2022-05-13 18:10:39+00:00,24962983.0,"288 days, 22:09:43","[{'comment_id': 678876227, 'comment_body': 'List of formats  will grown most probably and more generic description is preferable, e.g.: ""IO routines for popular point cloud formats""', 'comment_created': datetime.datetime(2021, 7, 29, 6, 55, 23, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 678880179, 'comment_body': 'OpenCV can be built without FS support for iOS and some other bare-metal configurations. The behavior is managed by `OPENCV_HAVE_FILESYSTEM_SUPPORT` macro. \r\n- See filesystem support in core: https://github.com/opencv/opencv/blob/master/modules/core/src/utils/filesystem.cpp\r\n- Please add alternative branch with ""not supported"" exception like here: https://github.com/opencv/opencv/blob/master/modules/core/src/glob.cpp#L286. API call should not disappear from interface.', 'comment_created': datetime.datetime(2021, 7, 29, 7, 2, 5, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 678881584, 'comment_body': ""No need to create new namespace for public API calls. Internals should be there, it's ok."", 'comment_created': datetime.datetime(2021, 7, 29, 7, 4, 43, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 678884695, 'comment_body': 'Redundant space.', 'comment_created': datetime.datetime(2021, 7, 29, 7, 10, 8, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 678884898, 'comment_body': 'Redundant space', 'comment_created': datetime.datetime(2021, 7, 29, 7, 10, 27, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 678885663, 'comment_body': 'both "".obj"", "".OBJ"" should be supported. The same for PLY.', 'comment_created': datetime.datetime(2021, 7, 29, 7, 11, 41, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 678886370, 'comment_body': ""it's better to do it in initialization list."", 'comment_created': datetime.datetime(2021, 7, 29, 7, 12, 47, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 678887019, 'comment_body': '`~PlyDecoder() =default;`  ?', 'comment_created': datetime.datetime(2021, 7, 29, 7, 13, 50, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 678888342, 'comment_body': 'It looks like `newDecoder` method is redundant for both cases as it does noting than just object construction.', 'comment_created': datetime.datetime(2021, 7, 29, 7, 16, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 678889103, 'comment_body': ""It's logical to make it as method of base interface class."", 'comment_created': datetime.datetime(2021, 7, 29, 7, 17, 13, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 678891376, 'comment_body': 'The test does not check the loader functionality at all. Both could be just empty. The solution works, if you have several branches in OBJ/PLY format that should be handled with the same result. The best solution here is to store ground-truth with well supported format in OpenCV like YML/JSON/XML with `cv::FileStorage` or even hard-code some small arrays in test code.', 'comment_created': datetime.datetime(2021, 7, 29, 7, 20, 58, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 678895292, 'comment_body': ""I think it's possible to use `InputArray.copyTo` to copy data from Input array to std::vector<>. Also there is no need to make copy if original data is continuous. You can create std::vector from `cv::Mat::data `"", 'comment_created': datetime.datetime(2021, 7, 29, 7, 26, 58, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 678896528, 'comment_body': 'Typo.', 'comment_created': datetime.datetime(2021, 7, 29, 7, 28, 37, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 678900605, 'comment_body': 'Looks very strange:\r\n- parseHeader should return status to not run parseBody for invalid file\r\n- `std::cout` is not available on Android, iOS and should be be used here. There are `CV_Error` and `CV_Assert` for exceptions and logging API for warnings: https://github.com/opencv/opencv/blob/master/modules/core/include/opencv2/core/utils/logger.hpp', 'comment_created': datetime.datetime(2021, 7, 29, 7, 35, 2, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 678901372, 'comment_body': 'OpenCV works on systems with native BigEndian order. The check is not correct.', 'comment_created': datetime.datetime(2021, 7, 29, 7, 36, 5, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 678903029, 'comment_body': 'IO errors should not be suppressed. Encoder should report it to API user.', 'comment_created': datetime.datetime(2021, 7, 29, 7, 38, 35, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 690493973, 'comment_body': 'add a newline at the end of file https://unix.stackexchange.com/questions/18743/whats-the-point-in-adding-a-new-line-to-the-end-of-a-file', 'comment_created': datetime.datetime(2021, 8, 17, 15, 40, 29, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 690502458, 'comment_body': 'remove WIP', 'comment_created': datetime.datetime(2021, 8, 17, 15, 50, 10, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 690512616, 'comment_body': 'use using instead typedef', 'comment_created': datetime.datetime(2021, 8, 17, 16, 2, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 690514734, 'comment_body': 'use String everywhere instead of std::string', 'comment_created': datetime.datetime(2021, 8, 17, 16, 4, 35, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 690515544, 'comment_body': 'remove', 'comment_created': datetime.datetime(2021, 8, 17, 16, 5, 35, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 690516906, 'comment_body': 'point. pls check spelling in all files', 'comment_created': datetime.datetime(2021, 8, 17, 16, 7, 22, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 690519139, 'comment_body': 'String', 'comment_created': datetime.datetime(2021, 8, 17, 16, 10, 14, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 690519616, 'comment_body': 'remove commented code', 'comment_created': datetime.datetime(2021, 8, 17, 16, 10, 48, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 691212919, 'comment_body': 'mark as noexcept', 'comment_created': datetime.datetime(2021, 8, 18, 12, 59, 41, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 691213673, 'comment_body': 'remove empty constructor, mark as default', 'comment_created': datetime.datetime(2021, 8, 18, 13, 0, 32, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 691219326, 'comment_body': '=default', 'comment_created': datetime.datetime(2021, 8, 18, 13, 7, 29, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 691219936, 'comment_body': 'what about move/copy constructors?', 'comment_created': datetime.datetime(2021, 8, 18, 13, 8, 11, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 691220958, 'comment_body': '=default. think about move\\copy consturctors', 'comment_created': datetime.datetime(2021, 8, 18, 13, 9, 26, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 691221097, 'comment_body': '=default', 'comment_created': datetime.datetime(2021, 8, 18, 13, 9, 35, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 691221568, 'comment_body': 'noexcept', 'comment_created': datetime.datetime(2021, 8, 18, 13, 10, 6, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 691221806, 'comment_body': 'String', 'comment_created': datetime.datetime(2021, 8, 18, 13, 10, 22, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 691222013, 'comment_body': 'you never use it', 'comment_created': datetime.datetime(2021, 8, 18, 13, 10, 37, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 691222242, 'comment_body': 'new line at eof', 'comment_created': datetime.datetime(2021, 8, 18, 13, 10, 52, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 691223596, 'comment_body': ': m_vertices_size(0) {}', 'comment_created': datetime.datetime(2021, 8, 18, 13, 12, 26, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 691241346, 'comment_body': 'NULL is old style. use `if (!file)` instead', 'comment_created': datetime.datetime(2021, 8, 18, 13, 32, 8, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 691251349, 'comment_body': ""do not use infinity loops it's hard to read. move condition of exit here"", 'comment_created': datetime.datetime(2021, 8, 18, 13, 43, 10, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 691255900, 'comment_body': 'why 128?', 'comment_created': datetime.datetime(2021, 8, 18, 13, 48, 12, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 691258300, 'comment_body': 'create function\\lambda for duplicate code', 'comment_created': datetime.datetime(2021, 8, 18, 13, 50, 51, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 691267072, 'comment_body': 'unnecessary copy. use originals vectors. you can clean it before push_back by `.clear()`', 'comment_created': datetime.datetime(2021, 8, 18, 14, 0, 7, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 691267954, 'comment_body': '!file', 'comment_created': datetime.datetime(2021, 8, 18, 14, 1, 3, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 691268029, 'comment_body': 'CV_Error', 'comment_created': datetime.datetime(2021, 8, 18, 14, 1, 9, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 691268736, 'comment_body': 'remove GSoC WIP', 'comment_created': datetime.datetime(2021, 8, 18, 14, 1, 55, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 691270222, 'comment_body': '`for (const auto& point : points)`', 'comment_created': datetime.datetime(2021, 8, 18, 14, 3, 34, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 691270980, 'comment_body': 'unnecessary copy', 'comment_created': datetime.datetime(2021, 8, 18, 14, 4, 22, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 691272897, 'comment_body': 'newline at eof', 'comment_created': datetime.datetime(2021, 8, 18, 14, 6, 29, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 691275627, 'comment_body': 'eof', 'comment_created': datetime.datetime(2021, 8, 18, 14, 9, 9, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 691282544, 'comment_body': 'remove', 'comment_created': datetime.datetime(2021, 8, 18, 14, 16, 36, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 691287832, 'comment_body': 'use the same for OBJ & PLY. FILE or fstream', 'comment_created': datetime.datetime(2021, 8, 18, 14, 22, 11, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 691289107, 'comment_body': 'move to separate utils file', 'comment_created': datetime.datetime(2021, 8, 18, 14, 23, 30, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 691291378, 'comment_body': 'spell check', 'comment_created': datetime.datetime(2021, 8, 18, 14, 26, 1, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 691292020, 'comment_body': 'remove debug print', 'comment_created': datetime.datetime(2021, 8, 18, 14, 26, 41, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 691295133, 'comment_body': 'why is it here? you never use it', 'comment_created': datetime.datetime(2021, 8, 18, 14, 29, 56, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 691296948, 'comment_body': 'remove debug print or use CV_...', 'comment_created': datetime.datetime(2021, 8, 18, 14, 31, 59, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 691297994, 'comment_body': 'CV_Assert. Spell check', 'comment_created': datetime.datetime(2021, 8, 18, 14, 33, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 691298108, 'comment_body': 'CV_Assert. Spell check', 'comment_created': datetime.datetime(2021, 8, 18, 14, 33, 7, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 691300850, 'comment_body': 'CV_Assert', 'comment_created': datetime.datetime(2021, 8, 18, 14, 36, 8, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 691301229, 'comment_body': 'remove debug print', 'comment_created': datetime.datetime(2021, 8, 18, 14, 36, 29, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 691303777, 'comment_body': 'remove unnecessary copy', 'comment_created': datetime.datetime(2021, 8, 18, 14, 39, 21, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 691305156, 'comment_body': 'if you know vertex count `clear `and then `reserve `place for original vector', 'comment_created': datetime.datetime(2021, 8, 18, 14, 40, 49, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 691305900, 'comment_body': 'use fstream or FILE in all places should be the same', 'comment_created': datetime.datetime(2021, 8, 18, 14, 41, 41, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 691306080, 'comment_body': '`!file`', 'comment_created': datetime.datetime(2021, 8, 18, 14, 41, 52, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 691308494, 'comment_body': 'use the same naming everywhere with `m_` or without', 'comment_created': datetime.datetime(2021, 8, 18, 14, 44, 21, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 691309045, 'comment_body': 'eof', 'comment_created': datetime.datetime(2021, 8, 18, 14, 44, 56, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 691311549, 'comment_body': 'do not use old-style cast. static_cast<> is your friend', 'comment_created': datetime.datetime(2021, 8, 18, 14, 47, 30, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 692305838, 'comment_body': '```\r\npoints.clear();\r\nnormals.clear();\r\n```', 'comment_created': datetime.datetime(2021, 8, 19, 16, 36, 41, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 692306326, 'comment_body': 'remove empty section', 'comment_created': datetime.datetime(2021, 8, 19, 16, 37, 26, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 692608378, 'comment_body': 'Compile-time check should be used instead of runtime check.\r\nSee `WORDS_BIGENDIAN`.', 'comment_created': datetime.datetime(2021, 8, 20, 2, 12, 38, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 692718848, 'comment_body': 'The function name is redundant here. The description is always placed with function signature in html and source code.', 'comment_created': datetime.datetime(2021, 8, 20, 7, 9, 35, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 692720529, 'comment_body': 'Please add warning to else section that other `key` values are not supported.', 'comment_created': datetime.datetime(2021, 8, 20, 7, 12, 51, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 692721044, 'comment_body': 'Typo in error message.', 'comment_created': datetime.datetime(2021, 8, 20, 7, 13, 52, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 692722464, 'comment_body': '"".OBJ"" and "".PLY should work too.""', 'comment_created': datetime.datetime(2021, 8, 20, 7, 16, 33, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 692723777, 'comment_body': ""`readData` throws exceptions with `CV_Error` macro. It means that function just falis each time when file was not open/empty/etc. It's against your function description (fail-safe execution and empty arrays as output)."", 'comment_created': datetime.datetime(2021, 8, 20, 7, 19, 5, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 692725246, 'comment_body': '`EXPECT_TRUE`?', 'comment_created': datetime.datetime(2021, 8, 20, 7, 21, 43, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 692727592, 'comment_body': ""It's bad idea to save things to OPENCV_TEST_DATA_PATH location:\r\n- It confuses git. Developer can commit intermediate state by mistake\r\n- In case of intermediate function failure the test always reads old file and indicates wrong PASS.\r\n\r\nPlease take a look on `cv::FileStorage` tests in core. They create temporary files in tmp location with different names and remove them after the test execution."", 'comment_created': datetime.datetime(2021, 8, 20, 7, 25, 35, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 692728150, 'comment_body': 'What if there are no normals in obj file? It should be tested too.', 'comment_created': datetime.datetime(2021, 8, 20, 7, 26, 36, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 693810274, 'comment_body': 'add more info about internal supported and ignored parameters (vn, v etc.). info about endian\\ascii etc', 'comment_created': datetime.datetime(2021, 8, 23, 9, 27, 28, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 693810885, 'comment_body': 'what exactly returned? vector of points of float etc.', 'comment_created': datetime.datetime(2021, 8, 23, 9, 28, 17, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 693811314, 'comment_body': '.astype(np.float32)', 'comment_created': datetime.datetime(2021, 8, 23, 9, 28, 55, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 693813922, 'comment_body': 'why do you need {} ?', 'comment_created': datetime.datetime(2021, 8, 23, 9, 32, 30, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 693814165, 'comment_body': 'for what {}?', 'comment_created': datetime.datetime(2021, 8, 23, 9, 32, 49, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 693819526, 'comment_body': 'you never use it', 'comment_created': datetime.datetime(2021, 8, 23, 9, 40, 7, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 693819596, 'comment_body': 'you never use it', 'comment_created': datetime.datetime(2021, 8, 23, 9, 40, 14, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 693956752, 'comment_body': '`indices.clear()`', 'comment_created': datetime.datetime(2021, 8, 23, 13, 10, 22, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 693958683, 'comment_body': 'this warning would be shown every time for the same unsupported keys. remember unsupported keys and show only one warning for new ones', 'comment_created': datetime.datetime(2021, 8, 23, 13, 12, 42, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 693967260, 'comment_body': 'check decoder on nullptr', 'comment_created': datetime.datetime(2021, 8, 23, 13, 23, 37, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 694048173, 'comment_body': ""you don't use it"", 'comment_created': datetime.datetime(2021, 8, 23, 14, 54, 25, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 698028743, 'comment_body': 'compile\r\n>> in cmake\r\nwhile building OpenCV from source.\r\n', 'comment_created': datetime.datetime(2021, 8, 29, 15, 0, 48, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 698028818, 'comment_body': 'responsible', 'comment_created': datetime.datetime(2021, 8, 29, 15, 1, 25, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 698028829, 'comment_body': 'limitation', 'comment_created': datetime.datetime(2021, 8, 29, 15, 1, 35, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 698030037, 'comment_body': 'use `std::unordered_set<std::string>` instead. and make it static member of the class', 'comment_created': datetime.datetime(2021, 8, 29, 15, 10, 37, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 698030246, 'comment_body': 'points and normals could be const? am I right?', 'comment_created': datetime.datetime(2021, 8, 29, 15, 12, 23, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 698030401, 'comment_body': 'points, normals, and indices could be const? am I right?', 'comment_created': datetime.datetime(2021, 8, 29, 15, 13, 33, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 698032909, 'comment_body': 'extension', 'comment_created': datetime.datetime(2021, 8, 29, 15, 33, 42, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 698033009, 'comment_body': 'check on nullptr too', 'comment_created': datetime.datetime(2021, 8, 29, 15, 34, 34, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 698033032, 'comment_body': 'check on nullptr too', 'comment_created': datetime.datetime(2021, 8, 29, 15, 34, 45, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 698033461, 'comment_body': 'repeat from line 21', 'comment_created': datetime.datetime(2021, 8, 29, 15, 37, 40, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 698033904, 'comment_body': 'add tests for mesh functions too', 'comment_created': datetime.datetime(2021, 8, 29, 15, 41, 20, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 698033991, 'comment_body': 'eof', 'comment_created': datetime.datetime(2021, 8, 29, 15, 42, 8, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 698232343, 'comment_body': ""Name usually comes first in English. It's better to write `Dmitrii Klepikov` to exclude confuses in emails and other communication."", 'comment_created': datetime.datetime(2021, 8, 30, 6, 43, 59, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 698236364, 'comment_body': 'I recommend to use code substitution from example python file as it\'s done in `tutorials/imgproc/histograms/back_projection/back_projection.markdown` and `python/tutorial_code/Histograms_Matching/back_projection/calcBackProject_Demo1.py`. The samples code is checked with CI and is always ""buildable"" with the library.', 'comment_created': datetime.datetime(2021, 8, 30, 6, 51, 49, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 698236956, 'comment_body': 'Please use \\` \\` for function and type names. Doxygen ads links for them to API reference.', 'comment_created': datetime.datetime(2021, 8, 30, 6, 52, 57, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 698237148, 'comment_body': 'Typo: ""possible"" and ""me"" -> ""be""', 'comment_created': datetime.datetime(2021, 8, 30, 6, 53, 21, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 698237923, 'comment_body': ""It'll be great to add reference to format definition document, if any for all supported mesh types."", 'comment_created': datetime.datetime(2021, 8, 30, 6, 54, 47, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 698238261, 'comment_body': 'Add reference to formats description here.', 'comment_created': datetime.datetime(2021, 8, 30, 6, 55, 25, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 698238991, 'comment_body': 'the word ""_tests"" is redundant in test names. I propose to remove it everywhere here.', 'comment_created': datetime.datetime(2021, 8, 30, 6, 56, 47, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 715321550, 'comment_body': 'u -> you', 'comment_created': datetime.datetime(2021, 9, 24, 5, 14, 49, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 715321972, 'comment_body': 'please use ""`cv::loadPointCloud`"" syntax for function names. Doxygen automatically insert cross links to reference manual for them.', 'comment_created': datetime.datetime(2021, 9, 24, 5, 16, 14, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 722893918, 'comment_body': 'Why not markdown on doxygen link?', 'comment_created': datetime.datetime(2021, 10, 6, 5, 22, 6, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 722895718, 'comment_body': '`EXPECT_TRUE(normals.empty())` No need to create empty vector.', 'comment_created': datetime.datetime(2021, 10, 6, 5, 27, 9, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 747901830, 'comment_body': '> OutputArray normals\r\n\r\nDoes all point cloud formats have normals?', 'comment_created': datetime.datetime(2021, 11, 12, 0, 29, 58, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 747902046, 'comment_body': 'Wiki link?', 'comment_created': datetime.datetime(2021, 11, 12, 0, 30, 40, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 747902161, 'comment_body': '`../precomp.hpp` must be first (.cpp files only)', 'comment_created': datetime.datetime(2021, 11, 12, 0, 31, 4, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 747902625, 'comment_body': '> coders\r\n\r\nwho is ""coders""?\r\ncodecs?\r\nio_base.cpp?', 'comment_created': datetime.datetime(2021, 11, 12, 0, 32, 17, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 747903034, 'comment_body': '> #include <iostream>\r\n\r\navoid using of this header in the source code (it emits initialization code of streams).', 'comment_created': datetime.datetime(2021, 11, 12, 0, 33, 46, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 747904003, 'comment_body': '> pc\r\n\r\nLets avoid code obfuscation.', 'comment_created': datetime.datetime(2021, 11, 12, 0, 36, 55, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 747904412, 'comment_body': ""> `+ m_filename`\r\n\r\nDon't concatenate strings here.\r\nUse `<< m_filename` instead.\r\n\r\n---\r\n\r\n> CV_LOG_WARNING\r\n\r\nIt should be error message: CV_LOG_ERROR"", 'comment_created': datetime.datetime(2021, 11, 12, 0, 38, 16, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 747905545, 'comment_body': 'Not sure why we have that condition here.\r\nSee also: https://github.com/opencv/opencv/issues/15675', 'comment_created': datetime.datetime(2021, 11, 12, 0, 41, 55, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 747906313, 'comment_body': '`import cv2 as cv`', 'comment_created': datetime.datetime(2021, 11, 12, 0, 44, 37, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 753318710, 'comment_body': 'According to discussion w/ @asmorkalov:\r\n> OpenCV can be built without FS support for iOS and some other bare-metal configurations. The behavior is managed by `OPENCV_HAVE_FILESYSTEM_SUPPORT` macro.\r\n> \r\n> * See filesystem support in core: https://github.com/opencv/opencv/blob/master/modules/core/src/utils/filesystem.cpp\r\n> * Please add alternative branch with ""not supported"" exception like here: https://github.com/opencv/opencv/blob/master/modules/core/src/glob.cpp#L286. API call should not disappear from interface.\r\n\r\nhere: https://github.com/opencv/opencv/pull/20471#discussion_r678880179\r\n', 'comment_created': datetime.datetime(2021, 11, 19, 15, 56, 24, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 753947266, 'comment_body': '@JulieBar ', 'comment_created': datetime.datetime(2021, 11, 22, 5, 7, 54, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}]","[{'commit_sha': '13284fea251175dcdba78c17b9cdc3a1f78ef093', 'committer_username': 'ibvfteh', 'committer_name': 'Klepikov Dmitrii', 'committer_email': 'ibvfteh@gmail.com', 'commit_date': datetime.datetime(2017, 8, 12, 9, 23, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '77ffb4905badf2bee7af5683bc589b6b6a2b9259', 'committer_username': 'ibvfteh', 'committer_name': 'Klepikov Dmitrii', 'committer_email': 'ibvfteh@gmail.com', 'commit_date': datetime.datetime(2017, 8, 12, 9, 23, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0581548c21f12ee12f9afcba33432af01fbc0120', 'committer_username': 'JuliaBareeva', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 3, 8, 55, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a9b8ba0bc193b763041683331ba602267132609', 'committer_username': 'JuliaBareeva', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 3, 8, 55, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a4a0bec38507f7d6682fd9df6a233a0166f3bbb', 'committer_username': 'JuliaBareeva', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 3, 8, 55, 14, tzinfo=datetime.timezone.utc)}]",Klepikov Dmitrii,30950914,ibvfteh@gmail.com,User,,17,,10,6

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
5108051,opencv,opencv/opencv,C++,55711,77539,2656,2193,34477,2608,6,138,"[{'id': 698976825, 'number': 20471, 'closed': datetime.datetime(2022, 5, 13, 18, 10, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 28, 20, 0, 56, tzinfo=datetime.timezone.utc), 'time_taken': 24962983.0, 'time_delta': '288 days, 22:09:43', 'additions': 1113, 'deletions': 12, 'state': 'closed'}, {'id': 683829181, 'number': 20362, 'closed': datetime.datetime(2022, 5, 23, 9, 19, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 5, 16, 37, 33, tzinfo=datetime.timezone.utc), 'time_taken': 27794540.0, 'time_delta': '321 days, 16:42:20', 'additions': 538, 'deletions': 0, 'state': 'closed'}]"
