pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1444634042,first draft,@julian-evers I reverted the commit and opened it as a PR so I can comment on it,True,5,https://api.github.com/repos/pybamm-team/pybamm-tea/pulls/5,https://github.com/pybamm-team/pybamm-tea/pull/5,closed,421,0,1,8,0,34,0,0,[],2023-07-21 15:05:56+00:00,2023-08-07 09:10:00+00:00,1447444.0,"16 days, 18:04:04","[{'comment_id': 1270789770, 'comment_body': ""I don't think this needs to inherit from `BaseModel`. It can just be a new class. I'd also rename it so it's all uppercase, i.e. `TEA()`"", 'comment_created': datetime.datetime(2023, 7, 21, 15, 8, 57, tzinfo=datetime.timezone.utc), 'commenter': 'rtimms', 'type': 'User'}, {'comment_id': 1270790438, 'comment_body': ""Don't make this an optional argument, then an error will be raised if it is missing anyway."", 'comment_created': datetime.datetime(2023, 7, 21, 15, 9, 35, tzinfo=datetime.timezone.utc), 'commenter': 'rtimms', 'type': 'User'}, {'comment_id': 1270790863, 'comment_body': ""Don't need to pass `parameter_values` here since you get it an an attribute anyway"", 'comment_created': datetime.datetime(2023, 7, 21, 15, 9, 59, tzinfo=datetime.timezone.utc), 'commenter': 'rtimms', 'type': 'User'}, {'comment_id': 1270791336, 'comment_body': ""An error will already be raised if the key isn't in `parameter_values`, so no need to do this check."", 'comment_created': datetime.datetime(2023, 7, 21, 15, 10, 25, tzinfo=datetime.timezone.utc), 'commenter': 'rtimms', 'type': 'User'}, {'comment_id': 1270796031, 'comment_body': 'you re-do this calculation a few times, so you do it once and store the result as an attribute ', 'comment_created': datetime.datetime(2023, 7, 21, 15, 15, 4, tzinfo=datetime.timezone.utc), 'commenter': 'rtimms', 'type': 'User'}, {'comment_id': 1270797657, 'comment_body': 'I think there are too many options for what can be input parameters. This will need to be well documented. ', 'comment_created': datetime.datetime(2023, 7, 21, 15, 16, 41, tzinfo=datetime.timezone.utc), 'commenter': 'rtimms', 'type': 'User'}, {'comment_id': 1270798047, 'comment_body': ""not sure we should allow average ocv to be an input, what's the motivation?"", 'comment_created': datetime.datetime(2023, 7, 21, 15, 17, 2, tzinfo=datetime.timezone.utc), 'commenter': 'rtimms', 'type': 'User'}, {'comment_id': 1270802934, 'comment_body': 'for setting defaults when something isn\'t an input you can use `get` and `or`. E.g. if you define \r\n```\r\ndef function(inputs=None):\r\n    inputs = inputs or {}\r\n    a = inputs.get(""a"") or 5\r\n    return a \r\n```\r\nthen `function()` returns 5 and `function({""a"": 10})` returns 10', 'comment_created': datetime.datetime(2023, 7, 21, 15, 21, 55, tzinfo=datetime.timezone.utc), 'commenter': 'rtimms', 'type': 'User'}, {'comment_id': 1270803425, 'comment_body': 'why would you be allowed to independently vary capacity?', 'comment_created': datetime.datetime(2023, 7, 21, 15, 22, 22, tzinfo=datetime.timezone.utc), 'commenter': 'rtimms', 'type': 'User'}, {'comment_id': 1270805096, 'comment_body': ""I'm not sure any of the values that are already in `parameter_values` should be allowed as inputs to these methods. To change parameters you should be able to loop over a list of parameter values, create a new `TEA` class, do the calculations and compare. There could be a separate `Comparison` class to do this."", 'comment_created': datetime.datetime(2023, 7, 21, 15, 24, tzinfo=datetime.timezone.utc), 'commenter': 'rtimms', 'type': 'User'}, {'comment_id': 1270806228, 'comment_body': ""Inputs should be reserved for extra parameters required by the calculation that aren't in the PyBaMM sets"", 'comment_created': datetime.datetime(2023, 7, 21, 15, 24, 55, tzinfo=datetime.timezone.utc), 'commenter': 'rtimms', 'type': 'User'}, {'comment_id': 1270808289, 'comment_body': 'I think the class should have separate methods for calculations that store the results in a dict that is an attribute of the class. E.g. in the `__init__` define `self.results = {}` and update this as you go. Then you can have separate methods for printing and plotting ', 'comment_created': datetime.datetime(2023, 7, 21, 15, 26, 22, tzinfo=datetime.timezone.utc), 'commenter': 'rtimms', 'type': 'User'}, {'comment_id': 1270808760, 'comment_body': 'Then printing is a one-liner that just prints key, value pairs in the dict', 'comment_created': datetime.datetime(2023, 7, 21, 15, 26, 50, tzinfo=datetime.timezone.utc), 'commenter': 'rtimms', 'type': 'User'}, {'comment_id': 1270810179, 'comment_body': ""For consistency with PyBaMM let's call this `inputs` everywhere, and then do `inputs = inputs or {}` here"", 'comment_created': datetime.datetime(2023, 7, 21, 15, 28, 3, tzinfo=datetime.timezone.utc), 'commenter': 'rtimms', 'type': 'User'}, {'comment_id': 1274135707, 'comment_body': 'can do `self.results = results or {}`', 'comment_created': datetime.datetime(2023, 7, 25, 21, 22, 32, tzinfo=datetime.timezone.utc), 'commenter': 'rtimms', 'type': 'User'}, {'comment_id': 1274137492, 'comment_body': ""I'm actually a little confused about how results is used and why you can pass it when you create an instance of the class?"", 'comment_created': datetime.datetime(2023, 7, 25, 21, 25, 8, tzinfo=datetime.timezone.utc), 'commenter': 'rtimms', 'type': 'User'}, {'comment_id': 1274137834, 'comment_body': ""`parameter_values` shouldn't be an optional argument "", 'comment_created': datetime.datetime(2023, 7, 25, 21, 25, 36, tzinfo=datetime.timezone.utc), 'commenter': 'rtimms', 'type': 'User'}, {'comment_id': 1274138375, 'comment_body': ""not needed since you're no longer inheriting from another class"", 'comment_created': datetime.datetime(2023, 7, 25, 21, 26, 17, tzinfo=datetime.timezone.utc), 'commenter': 'rtimms', 'type': 'User'}, {'comment_id': 1274138890, 'comment_body': '`inputs = inputs or {}`', 'comment_created': datetime.datetime(2023, 7, 25, 21, 26, 59, tzinfo=datetime.timezone.utc), 'commenter': 'rtimms', 'type': 'User'}, {'comment_id': 1274141913, 'comment_body': ""the logic for all these calculations is very confusing. I think you should do some calculations of things that are fixed in the `__init__`. E.g. a have dict (maybe called `derived_values` or something) to store the results you need from the SOH solution, store the average OCVs). Then in the functions just do the calculations using values from `self.parameter_values` and `self.derived_values`. I'm not sure why `results` needs to store things that are already in `parameter_value` (e.g. thicknesses). "", 'comment_created': datetime.datetime(2023, 7, 25, 21, 31, tzinfo=datetime.timezone.utc), 'commenter': 'rtimms', 'type': 'User'}, {'comment_id': 1274142401, 'comment_body': 'This is where you should be using inputs instead of hard-coding defaults.', 'comment_created': datetime.datetime(2023, 7, 25, 21, 31, 44, tzinfo=datetime.timezone.utc), 'commenter': 'rtimms', 'type': 'User'}, {'comment_id': 1274144493, 'comment_body': ""this shouldn't ever be the case?"", 'comment_created': datetime.datetime(2023, 7, 25, 21, 34, 43, tzinfo=datetime.timezone.utc), 'commenter': 'rtimms', 'type': 'User'}, {'comment_id': 1274146684, 'comment_body': ""shouldn't the electrolyte density factor into this calculation? `wet_elec_density = dry_elec_dens * (1-eps) + elec_desn*eps`"", 'comment_created': datetime.datetime(2023, 7, 25, 21, 38, 5, tzinfo=datetime.timezone.utc), 'commenter': 'rtimms', 'type': 'User'}, {'comment_id': 1274147951, 'comment_body': 'the or logic everywhere makes this hard to read and i think overcomplicated things?', 'comment_created': datetime.datetime(2023, 7, 25, 21, 39, 48, tzinfo=datetime.timezone.utc), 'commenter': 'rtimms', 'type': 'User'}, {'comment_id': 1274149278, 'comment_body': 'you should track which methods have been called as an attribute of the class so you can skip recalculating everything. at the moment if you call `stack_energy_densities` then `stack_breakdown` then `plot_stack_breakdown` you will have called `stack_energy_densities` 3 times. ', 'comment_created': datetime.datetime(2023, 7, 25, 21, 41, 43, tzinfo=datetime.timezone.utc), 'commenter': 'rtimms', 'type': 'User'}, {'comment_id': 1274151517, 'comment_body': 'Instead of returning results like this you should just store all the results in a dict like you currently do and then index into the object like a dict to get the results back. Similar to the way `pybamm.Solution` works.', 'comment_created': datetime.datetime(2023, 7, 25, 21, 45, tzinfo=datetime.timezone.utc), 'commenter': 'rtimms', 'type': 'User'}, {'comment_id': 1284237368, 'comment_body': 'you could make `stack_breakdown` a property then when you call it will used the stored breakdown or call `calculate_stack_breakdown` first:\r\n```python3\r\n    @property\r\n    def stack_breakdown(self):\r\n        """"""A breakdown of ...""""""\r\n        try:\r\n            return self._stack_breakdown\r\n        except AttributeError:\r\n            self._stack_breakdown = self.calculate_stack_breakdown()\r\n            return self._t\r\n```\r\n\r\nSame for other stored calculations', 'comment_created': datetime.datetime(2023, 8, 4, 10, 5, 46, tzinfo=datetime.timezone.utc), 'commenter': 'rtimms', 'type': 'User'}, {'comment_id': 1284237907, 'comment_body': ""Then you just call `self.stack_breakdown` where you need it, and it will calculate it for you if it hasn't already."", 'comment_created': datetime.datetime(2023, 8, 4, 10, 6, 23, tzinfo=datetime.timezone.utc), 'commenter': 'rtimms', 'type': 'User'}, {'comment_id': 1284242048, 'comment_body': ""this whole block is quite repetitive and hard to read. i wonder if it's better to define a function that fills out an entry in volumes, masses and densities, and then loop over the values in components to do the calculations. you can also handle special cases here like 0 volume"", 'comment_created': datetime.datetime(2023, 8, 4, 10, 11, tzinfo=datetime.timezone.utc), 'commenter': 'rtimms', 'type': 'User'}, {'comment_id': 1284244969, 'comment_body': ""why would you want to be able to say print is false in a function that is there to print something? I see this is for the dict. I'd just remove this.\r\n\r\nI would just make another property `stack_breakdown_dataframe` that makes the dataframe if it doesn't exist already, and then returns it. users can then do what they like with it"", 'comment_created': datetime.datetime(2023, 8, 4, 10, 14, 24, tzinfo=datetime.timezone.utc), 'commenter': 'rtimms', 'type': 'User'}, {'comment_id': 1284247608, 'comment_body': 'you can go `get(keyword, value` to return `value` if the keyword isn\'t found. My preference would not to be used hard coded defaults. this is where you should be using `inputs` then you can do something like \r\n```python3\r\nif self.parameter_values.get(""Negative current collector thickness [m]"") is None:\r\n    try:\r\n        self.stack_edd[""Negative current collector thickness [m]""] = inputs[""Negative current collector thickness [m]""]\r\n    except KeyError:\r\n            raise ValueError(""error message"")\r\n```\r\n    ', 'comment_created': datetime.datetime(2023, 8, 4, 10, 17, 27, tzinfo=datetime.timezone.utc), 'commenter': 'rtimms', 'type': 'User'}, {'comment_id': 1284256988, 'comment_body': 'here (and in other places) it might be neater to do `stack_bd = self.stack_bd ` first to avoid using `self.` everywhere', 'comment_created': datetime.datetime(2023, 8, 4, 10, 28, 20, tzinfo=datetime.timezone.utc), 'commenter': 'rtimms', 'type': 'User'}, {'comment_id': 1284258478, 'comment_body': 'not for this PR, but the class definition should be in a `pybamm-tea` package and then you should make separate examples', 'comment_created': datetime.datetime(2023, 8, 4, 10, 30, tzinfo=datetime.timezone.utc), 'commenter': 'rtimms', 'type': 'User'}, {'comment_id': 1284273563, 'comment_body': 'For example \r\n```python3\r\ndef get_density(component):\r\n    mass_loading = stack_bd[f""{component} mass loading [mg.cm-2]""]\r\n    volume_loading = stack_bd[f""{component} volume loading [uL.cm-2]""]\r\n    if volume_loading == 0:\r\n        density = 0\r\n    else:\r\n        density = mass_loading/volume_loading\r\n    return density \r\n```\r\nThe dry electrode is a special case, but I think they should be handled by first defining the mass and volume for the dry electrode then using the same density calculation.\r\n\r\nI actually think all calculations should happen in `calculate_stack_breakdown()`. Then you should just have a method to build and return the dataframe \r\n', 'comment_created': datetime.datetime(2023, 8, 4, 10, 47, 59, tzinfo=datetime.timezone.utc), 'commenter': 'rtimms', 'type': 'User'}]","[{'commit_sha': '8d08425183cc18fad7e6c2bc455732348b70c3f1', 'committer_username': 'rtimms', 'committer_name': 'Robert Timms', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 6, 14, 47, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e498fbb2685bee93d88bb343f92aece92dc26068', 'committer_username': 'rtimms', 'committer_name': 'Robert Timms', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 6, 14, 47, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f93976096c9a1a46a1d8e2ebb768b100de4e8eea', 'committer_username': 'julian-evers', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 5, 15, 17, 11, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de1206b767e5b919a1e39367c1c83e8e62b77716', 'committer_username': 'julian-evers', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 5, 15, 17, 11, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb282303b6f4db637705399ae63bd9b94a8bbaf8', 'committer_username': 'julian-evers', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 5, 15, 17, 11, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0505548d725a7dc37dbf5b529d91631e5cafee72', 'committer_username': 'julian-evers', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 5, 15, 17, 11, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed91a54e70faa9e2737667af6bc6a4a61dfebc9f', 'committer_username': 'julian-evers', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 5, 15, 17, 11, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d56b2285d485e0e61056e10be72c80b42a90695', 'committer_username': 'julian-evers', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 5, 15, 17, 11, 25, tzinfo=datetime.timezone.utc)}]",Robert Timms,43040151,,User,,12,,0,26
1482830432,"Structure, readme, etc.",fix the loop for the stack density calculation,True,9,https://api.github.com/repos/pybamm-team/pybamm-tea/pulls/9,https://github.com/pybamm-team/pybamm-tea/pull/9,closed,1488,421,12,7,0,25,0,0,[],2023-08-21 12:55:53+00:00,2023-09-22 16:04:12+00:00,2776099.0,"32 days, 3:08:19","[{'comment_id': 1304888342, 'comment_body': ""this won't work until `pybamm_tea` is uploaded to pypi. for now you will need to install from source (`pip install .`)"", 'comment_created': datetime.datetime(2023, 8, 24, 21, 27, 23, tzinfo=datetime.timezone.utc), 'commenter': 'rtimms', 'type': 'User'}, {'comment_id': 1304888596, 'comment_body': 'can you add instructions on how to clone the repo here', 'comment_created': datetime.datetime(2023, 8, 24, 21, 27, 42, tzinfo=datetime.timezone.utc), 'commenter': 'rtimms', 'type': 'User'}, {'comment_id': 1304891529, 'comment_body': 'you should use something like `unittest` or `pytest` to set up testing. E.g. look [here](https://github.com/pybamm-team/BPX/blob/main/tests/test_utilities.py) for an example using `unittest`. You need to add test classes that inherit from `unittest.TestCase` and define the tests in methods.', 'comment_created': datetime.datetime(2023, 8, 24, 21, 31, 45, tzinfo=datetime.timezone.utc), 'commenter': 'rtimms', 'type': 'User'}, {'comment_id': 1304892310, 'comment_body': 'You need an `__init__.py` in this folder so you can expose the `TEA` class as part of the package ', 'comment_created': datetime.datetime(2023, 8, 24, 21, 32, 48, tzinfo=datetime.timezone.utc), 'commenter': 'rtimms', 'type': 'User'}, {'comment_id': 1304893347, 'comment_body': 'these should be the dependencies of the project (pybamm, etc.)', 'comment_created': datetime.datetime(2023, 8, 24, 21, 34, 19, tzinfo=datetime.timezone.utc), 'commenter': 'rtimms', 'type': 'User'}, {'comment_id': 1304894178, 'comment_body': 'will need to add a `.flake8` file to configure this', 'comment_created': datetime.datetime(2023, 8, 24, 21, 35, 23, tzinfo=datetime.timezone.utc), 'commenter': 'rtimms', 'type': 'User'}, {'comment_id': 1304894773, 'comment_body': ""you'll need to define `__version__` in the `__init__.py` inside the `pybamm_tea` folder"", 'comment_created': datetime.datetime(2023, 8, 24, 21, 36, 17, tzinfo=datetime.timezone.utc), 'commenter': 'rtimms', 'type': 'User'}, {'comment_id': 1304896870, 'comment_body': ""there aren't any example to run in colab yet, so might as well remove for now"", 'comment_created': datetime.datetime(2023, 8, 24, 21, 39, tzinfo=datetime.timezone.utc), 'commenter': 'rtimms', 'type': 'User'}, {'comment_id': 1304897052, 'comment_body': 'can be removed, no docs yet', 'comment_created': datetime.datetime(2023, 8, 24, 21, 39, 9, tzinfo=datetime.timezone.utc), 'commenter': 'rtimms', 'type': 'User'}, {'comment_id': 1304899550, 'comment_body': 'can you also add an `examples` folder with some examples in (and check they work!)', 'comment_created': datetime.datetime(2023, 8, 24, 21, 41, 47, tzinfo=datetime.timezone.utc), 'commenter': 'rtimms', 'type': 'User'}, {'comment_id': 1304900224, 'comment_body': 'not good naming to import the package and give it the same name as a class it defines. did you mean to do `import TEA from pybamm_tea`?', 'comment_created': datetime.datetime(2023, 8, 24, 21, 42, 49, tzinfo=datetime.timezone.utc), 'commenter': 'rtimms', 'type': 'User'}, {'comment_id': 1311469855, 'comment_body': ""Can you add instructions for mac/linux/windows, e.g.\r\n\r\n\r\n### Linux/Mac OS\r\n1. Clone the repository using git\r\n```bash\r\ngit clone https://github.com/pybamm-team/PyBaMM-TEA.git\r\n```\r\nor download (and extract) the ZIP file by clicking the green button on the top right of the page.\r\n2. Change into the `pybamm-tea` directory \r\n```bash\r\ncd pybamm-tea\r\n```\r\n3. Create a virtual environment\r\n```bash\r\nvirtualenv env\r\n```\r\n4. Activate the virtual environment \r\n```bash\r\nsource env/bin/activate\r\n```\r\n5. Install the package\r\n```bash \r\npip install .\r\n```\r\nTo install the project in editable mode use `pip install -e .`.\r\n\r\n### Windows\r\nTo install the package from the local project path on Windows use the following commands:\r\n\r\n1. Clone the repository using git\r\n```bash\r\ngit clone https://github.com/pybamm-team/PyBaMM-TEA.git\r\n```\r\nor download (and extract) the ZIP file by clicking the green button on the top right of the page.\r\n2. Change into the `pybamm-tea` directory \r\n```bash\r\ncd pybamm-tea\r\n```\r\n3. Create a virtual environment\r\n```bash\r\nvirtualenv env\r\n```\r\n4. Activate the virtual environment \r\n```bash\r\n\\path\\to\\env\\Scripts\\activate\r\n```\r\nwhere `\\path\\to\\env` is the path to the environment created in step 3 (e.g. `C:\\Users\\'Username'\\env\\Scripts\\activate.bat`).\r\n5. Install the package\r\n```bash \r\npip install .\r\n```\r\nTo install the project in editable mode use `pip install -e .`.\r\n\r\nAs an alternative, you can set up [Windows Subsystem for Linux](https://docs.microsoft.com/en-us/windows/wsl/about). This allows you to run a full Linux distribution within Windows.\r\n"", 'comment_created': datetime.datetime(2023, 8, 31, 11, 8, 24, tzinfo=datetime.timezone.utc), 'commenter': 'rtimms', 'type': 'User'}, {'comment_id': 1311470702, 'comment_body': ""you don't need to do this. it will be handled by pyproject.tom"", 'comment_created': datetime.datetime(2023, 8, 31, 11, 9, 10, tzinfo=datetime.timezone.utc), 'commenter': 'rtimms', 'type': 'User'}, {'comment_id': 1311471198, 'comment_body': ""you don't use matplotlib or pandas here"", 'comment_created': datetime.datetime(2023, 8, 31, 11, 9, 42, tzinfo=datetime.timezone.utc), 'commenter': 'rtimms', 'type': 'User'}, {'comment_id': 1311471407, 'comment_body': 'can you add some sentences explaining this example', 'comment_created': datetime.datetime(2023, 8, 31, 11, 9, 56, tzinfo=datetime.timezone.utc), 'commenter': 'rtimms', 'type': 'User'}, {'comment_id': 1311472164, 'comment_body': 'filename needs to be `__init__.py` (double underscores)', 'comment_created': datetime.datetime(2023, 8, 31, 11, 10, 39, tzinfo=datetime.timezone.utc), 'commenter': 'rtimms', 'type': 'User'}, {'comment_id': 1311472589, 'comment_body': 'this file can be deleted now', 'comment_created': datetime.datetime(2023, 8, 31, 11, 11, 6, tzinfo=datetime.timezone.utc), 'commenter': 'rtimms', 'type': 'User'}, {'comment_id': 1311473654, 'comment_body': 'see above comment. did you check these tests run and pass?', 'comment_created': datetime.datetime(2023, 8, 31, 11, 12, 9, tzinfo=datetime.timezone.utc), 'commenter': 'rtimms', 'type': 'User'}, {'comment_id': 1311473953, 'comment_body': ""same again, these don't need to be imported as they aren't used"", 'comment_created': datetime.datetime(2023, 8, 31, 11, 12, 31, tzinfo=datetime.timezone.utc), 'commenter': 'rtimms', 'type': 'User'}, {'comment_id': 1311475759, 'comment_body': 'you could define this using the `setUp` method\r\n\r\n```python3\r\ndef setUp(self):\r\n        nco_input_data = {\r\n            ""Electrolyte density [kg.m-3]"": 1276,\r\n            ""Negative electrode active material density [kg.m-3]"": 2266,  # Graphite\r\n            ""Positive electrode active material density [kg.m-3]"": 4750,  # NCO\r\n        }\r\n        param_nco = pybamm.ParameterValues(""Ecker2015"")\r\n        param_nco.update(nco_input_data, check_already_exists=False)\r\n        self.model = TEA(param_nco)\r\n```\r\n\r\nthen get the model as `self.model` in the other tests', 'comment_created': datetime.datetime(2023, 8, 31, 11, 14, 22, tzinfo=datetime.timezone.utc), 'commenter': 'rtimms', 'type': 'User'}, {'comment_id': 1311477450, 'comment_body': 'check the unittest docs for proper assertions. e.g. here you should use `self.assertIsnstance`', 'comment_created': datetime.datetime(2023, 8, 31, 11, 16, tzinfo=datetime.timezone.utc), 'commenter': 'rtimms', 'type': 'User'}, {'comment_id': 1311478279, 'comment_body': 'can you make this notebook a bit more step-by-step with explanatory text and show how to plot and interact with the results?', 'comment_created': datetime.datetime(2023, 8, 31, 11, 16, 47, tzinfo=datetime.timezone.utc), 'commenter': 'rtimms', 'type': 'User'}, {'comment_id': 1334568049, 'comment_body': 'these calculations could be done in a separate method that gets called in the init', 'comment_created': datetime.datetime(2023, 9, 22, 15, 59, 7, tzinfo=datetime.timezone.utc), 'commenter': 'rtimms', 'type': 'User'}, {'comment_id': 1334568740, 'comment_body': ""don't use a bare try/except. catch the error that is raised and raise an informative error here"", 'comment_created': datetime.datetime(2023, 9, 22, 15, 59, 45, tzinfo=datetime.timezone.utc), 'commenter': 'rtimms', 'type': 'User'}, {'comment_id': 1334570380, 'comment_body': ""I don't think you should hard-code values here. just raise an error if this doesn't work and the user hasn't provided the stoichiometry limits as an input"", 'comment_created': datetime.datetime(2023, 9, 22, 16, 1, 13, tzinfo=datetime.timezone.utc), 'commenter': 'rtimms', 'type': 'User'}]","[{'commit_sha': '4dc87ba2cda6f898212048c71eb58dc5608b78f1', 'committer_username': 'julian-evers', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 5, 15, 17, 11, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff2b9eca69d8c57ed972853b5cb9adae7e4d1851', 'committer_username': 'julian-evers', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 5, 15, 17, 11, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f2c146afdc887d66d5ca72d8be0b32fa654dd01', 'committer_username': 'julian-evers', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 5, 15, 17, 11, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95f6023847e5cb9a7a12d92047c571ebd6df4521', 'committer_username': 'julian-evers', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 5, 15, 17, 11, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc4be87057c8dee4a46812c9407ad4f7cf400894', 'committer_username': 'julian-evers', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 5, 15, 17, 11, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd557d38fb15fe8a80f0cb3bf15f02d6cb9e67a9b', 'committer_username': 'rtimms', 'committer_name': 'Robert Timms', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 6, 14, 47, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7833c563abe46f62c6dadd06e3e762285c18bd5e', 'committer_username': 'rtimms', 'committer_name': 'Robert Timms', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 6, 14, 47, 7, tzinfo=datetime.timezone.utc)}]",,133691040,,User,,2,,1,1
1555691167,Update,,False,10,https://api.github.com/repos/pybamm-team/pybamm-tea/pulls/10,https://github.com/pybamm-team/pybamm-tea/pull/10,closed,1231,217,4,2,0,0,0,0,[],2023-10-13 10:47:39+00:00,2023-10-13 14:08:41+00:00,12062.0,3:21:02,[],"[{'commit_sha': 'f19087bc099c03da9a3f83ab0731ac91444bc10f', 'committer_username': 'julian-evers', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 5, 15, 17, 11, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc9646216672e5998221d182d4df0990186f211e', 'committer_username': 'julian-evers', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 5, 15, 17, 11, 25, tzinfo=datetime.timezone.utc)}]",Robert Timms,43040151,,User,,12,,0,26
1556019262,update example,,True,12,https://api.github.com/repos/pybamm-team/pybamm-tea/pulls/12,https://github.com/pybamm-team/pybamm-tea/pull/12,closed,1354,397,3,1,0,0,0,0,[],2023-10-13 14:30:11+00:00,2023-10-13 14:32:15+00:00,124.0,0:02:04,[],"[{'commit_sha': '4c3550b856242b9b1df774a4daccd0ee1f5186bc', 'committer_username': 'rtimms', 'committer_name': 'Robert Timms', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 6, 14, 47, 7, tzinfo=datetime.timezone.utc)}]",Robert Timms,43040151,,User,,12,,0,26
1556032646,New notebook,,True,13,https://api.github.com/repos/pybamm-team/pybamm-tea/pulls/13,https://github.com/pybamm-team/pybamm-tea/pull/13,closed,672,0,2,1,0,2,0,0,[],2023-10-13 14:39:34+00:00,2023-10-20 14:21:36+00:00,603722.0,"6 days, 23:42:02","[{'comment_id': 1360390672, 'comment_body': 'can you explain a bit more about why and how you do this? might be better to split the following code block into four so that you can add text explaining each one', 'comment_created': datetime.datetime(2023, 10, 16, 9, 34, 51, tzinfo=datetime.timezone.utc), 'commenter': 'rtimms', 'type': 'User'}, {'comment_id': 1360394300, 'comment_body': 'can you explain more cleary in the preceding text the rules for how thickness and N/P ratios are given? my understanding is that currently if you give both thicknesses then the N/P ratio is ignored, otherwise if you give one thickness and an N/P ratio then they are used together to give the other thickness?  \r\n\r\nif users provided both thickness and the N/P ratio then we should raise a warning (maybe even an error) saying the N/P ratio will be ignored - does this happen?', 'comment_created': datetime.datetime(2023, 10, 16, 9, 37, 43, tzinfo=datetime.timezone.utc), 'commenter': 'rtimms', 'type': 'User'}]","[{'commit_sha': 'ee95307230a339013689a6d8ba2c50f6392e2dd8', 'committer_username': 'julian-evers', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 5, 15, 17, 11, 25, tzinfo=datetime.timezone.utc)}]",,133691040,,User,,2,,1,1
1557171923,Dataframe,,True,16,https://api.github.com/repos/pybamm-team/pybamm-tea/pulls/16,https://github.com/pybamm-team/pybamm-tea/pull/16,closed,214,368,4,6,2,5,0,0,[],2023-10-14 22:10:43+00:00,2023-10-20 14:21:33+00:00,490250.0,"5 days, 16:10:50","[{'comment_id': 1360382936, 'comment_body': 'why the empty entries?', 'comment_created': datetime.datetime(2023, 10, 16, 9, 28, 47, tzinfo=datetime.timezone.utc), 'commenter': 'rtimms', 'type': 'User'}, {'comment_id': 1360789272, 'comment_body': 'They were unintended.', 'comment_created': datetime.datetime(2023, 10, 16, 14, 50, 45, tzinfo=datetime.timezone.utc), 'commenter': 'julian-evers', 'type': 'User'}, {'comment_id': 1361721395, 'comment_body': ""why do you need this? I don't think you need to have the subheadings as part of the dataframe"", 'comment_created': datetime.datetime(2023, 10, 17, 8, 25, 7, tzinfo=datetime.timezone.utc), 'commenter': 'rtimms', 'type': 'User'}, {'comment_id': 1361723100, 'comment_body': 'Just add ""Stack thickness [um]"" and ""Stack density [kg.L-1]"" to `stack_ed` too when you construct it, then you can just do the loop here too', 'comment_created': datetime.datetime(2023, 10, 17, 8, 26, 11, tzinfo=datetime.timezone.utc), 'commenter': 'rtimms', 'type': 'User'}, {'comment_id': 1366996339, 'comment_body': 'alternatively, you could denote no units by ""[-]""', 'comment_created': datetime.datetime(2023, 10, 20, 13, 43, 38, tzinfo=datetime.timezone.utc), 'commenter': 'rtimms', 'type': 'User'}]","[{'commit_sha': 'ee95307230a339013689a6d8ba2c50f6392e2dd8', 'committer_username': 'julian-evers', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 5, 15, 17, 11, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa9790fb5ac313d3d5c21981c7c164add994140d', 'committer_username': 'julian-evers', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 5, 15, 17, 11, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2587c42e89966848645d5df4d469bd34cc737a99', 'committer_username': 'julian-evers', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 5, 15, 17, 11, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '153ff5fd0b4187b41e2cb98fd992cb030e415a83', 'committer_username': 'julian-evers', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 5, 15, 17, 11, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '23aab86685f02b473d514890a3aa6aa53d7ef03b', 'committer_username': 'julian-evers', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 5, 15, 17, 11, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '30e8b0b35468df90c2b522889918d98722b1dc10', 'committer_username': 'julian-evers', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 5, 15, 17, 11, 25, tzinfo=datetime.timezone.utc)}]",,133691040,,User,,2,,1,1
1557568249,legend visibility,adjust position of axes object inside figure,True,17,https://api.github.com/repos/pybamm-team/pybamm-tea/pulls/17,https://github.com/pybamm-team/pybamm-tea/pull/17,closed,3,3,2,1,0,0,0,0,[],2023-10-15 21:01:22+00:00,2023-10-16 09:17:55+00:00,44193.0,12:16:33,[],"[{'commit_sha': 'bedd8134a6d831e3b74719b8c1a5cad7fd3a2d62', 'committer_username': 'julian-evers', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 5, 15, 17, 11, 25, tzinfo=datetime.timezone.utc)}]",,133691040,,User,,2,,1,1
1558240319,Docs and testing,Set up basic docs structure and test workflow,True,18,https://api.github.com/repos/pybamm-team/pybamm-tea/pulls/18,https://github.com/pybamm-team/pybamm-tea/pull/18,closed,587,23,13,2,1,0,0,0,[],2023-10-16 09:49:49+00:00,2023-10-16 09:57:39+00:00,470.0,0:07:50,[],"[{'commit_sha': 'fe69f393d47a9a08d544b259570ab4a36aa4bffd', 'committer_username': 'rtimms', 'committer_name': 'Robert Timms', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 6, 14, 47, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2fb59a834f51dd5579bc461bbb09a1f1c2788cc6', 'committer_username': 'rtimms', 'committer_name': 'Robert Timms', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 6, 14, 47, 7, tzinfo=datetime.timezone.utc)}]",Robert Timms,43040151,,User,,12,,0,26
1558260287,fix logo,,True,20,https://api.github.com/repos/pybamm-team/pybamm-tea/pulls/20,https://github.com/pybamm-team/pybamm-tea/pull/20,closed,1,1,1,1,0,0,0,0,[],2023-10-16 10:01:27+00:00,2023-10-16 10:01:37+00:00,10.0,0:00:10,[],"[{'commit_sha': '8ee53e6bf1f9fc744b729b4fc9184e64b0a1a1f5', 'committer_username': 'rtimms', 'committer_name': 'Robert Timms', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 6, 14, 47, 7, tzinfo=datetime.timezone.utc)}]",Robert Timms,43040151,,User,,12,,0,26
1558262102,fix logo,,True,21,https://api.github.com/repos/pybamm-team/pybamm-tea/pulls/21,https://github.com/pybamm-team/pybamm-tea/pull/21,closed,1,1,1,1,0,0,0,0,[],2023-10-16 10:02:33+00:00,2023-10-16 10:02:41+00:00,8.0,0:00:08,[],"[{'commit_sha': '33ea86005eabc587be1ab6f4f5418d6c5d9b601b', 'committer_username': 'rtimms', 'committer_name': 'Robert Timms', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 6, 14, 47, 7, tzinfo=datetime.timezone.utc)}]",Robert Timms,43040151,,User,,12,,0,26
1567449067,Test dataframe entries,,True,22,https://api.github.com/repos/pybamm-team/pybamm-tea/pulls/22,https://github.com/pybamm-team/pybamm-tea/pull/22,closed,148,32,5,1,1,1,0,0,[],2023-10-20 23:37:47+00:00,2023-11-17 16:12:44+00:00,2392497.0,"27 days, 16:34:57","[{'comment_id': 1387855134, 'comment_body': 'it might be cleaner to have the reference data frames just defined at the top of this file rather than reading from csv. happy to leave it as is for now though', 'comment_created': datetime.datetime(2023, 11, 9, 11, 13, 57, tzinfo=datetime.timezone.utc), 'commenter': 'rtimms', 'type': 'User'}]","[{'commit_sha': '3c0a5ee51479eaad48784dfe746e13b76b7e3674', 'committer_username': 'julian-evers', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 5, 15, 17, 11, 25, tzinfo=datetime.timezone.utc)}]",,133691040,,User,,2,,1,1
1578026867,"New Notebooks (masses_and_volumes, capacities_and_potentials and ragone), documentation, testing",,False,23,https://api.github.com/repos/pybamm-team/pybamm-tea/pulls/23,https://github.com/pybamm-team/pybamm-tea/pull/23,open,3659,1451,11,10,1,6,0,0,[],2023-10-29 22:35:36+00:00,,0.0,,"[{'comment_id': 1387858184, 'comment_body': ""does this work? you shouldn't be able to import `tea` (it's not a method anywhere). "", 'comment_created': datetime.datetime(2023, 11, 9, 11, 17, 3, tzinfo=datetime.timezone.utc), 'commenter': 'rtimms', 'type': 'User'}, {'comment_id': 1387858288, 'comment_body': '`pybamm_tea.TEA`', 'comment_created': datetime.datetime(2023, 11, 9, 11, 17, 9, tzinfo=datetime.timezone.utc), 'commenter': 'rtimms', 'type': 'User'}, {'comment_id': 1387859132, 'comment_body': 'why not print this anymore?', 'comment_created': datetime.datetime(2023, 11, 9, 11, 18, tzinfo=datetime.timezone.utc), 'commenter': 'rtimms', 'type': 'User'}, {'comment_id': 1387862683, 'comment_body': ""does this work? I don't get why how you import things has changed in this PR?"", 'comment_created': datetime.datetime(2023, 11, 9, 11, 21, 33, tzinfo=datetime.timezone.utc), 'commenter': 'rtimms', 'type': 'User'}, {'comment_id': 1387868388, 'comment_body': ""check how you've defined this. right now at soc=1 you have that y = y0, not y100. I think it should be \r\n```\r\n            x = x_0 + soc * (x_100 - x_0)\r\n            y = y_0 - soc * (y_0 - y_100)\r\n```\r\nbut also check how you have defined x_0, x_100, y_0, y_100. these should be defined wrt to cell level SOC"", 'comment_created': datetime.datetime(2023, 11, 9, 11, 26, 20, tzinfo=datetime.timezone.utc), 'commenter': 'rtimms', 'type': 'User'}, {'comment_id': 1387872085, 'comment_body': 'can you explain what happens/why you have set these to `None`', 'comment_created': datetime.datetime(2023, 11, 9, 11, 30, 2, tzinfo=datetime.timezone.utc), 'commenter': 'rtimms', 'type': 'User'}]","[{'commit_sha': 'd0634d88f6cc05901be0604a8e2d9ced82461249', 'committer_username': 'julian-evers', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 5, 15, 17, 11, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '18cda6f1e68b51357c520fa127f4a738038c6712', 'committer_username': 'julian-evers', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 5, 15, 17, 11, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '950b2f0d75d58690d039f609cd3e9cae0d8b377a', 'committer_username': 'julian-evers', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 5, 15, 17, 11, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2441b094b949e5ff98502d228f400ddb6693a934', 'committer_username': 'julian-evers', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 5, 15, 17, 11, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f75743660775171b9299746d180a2bb6471d5f7', 'committer_username': 'julian-evers', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 5, 15, 17, 11, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '06649e34c4d40ff9b10ac8a74d373ccaae22885a', 'committer_username': 'julian-evers', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 5, 15, 17, 11, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0199da1962659de7b25997214119abacea2cd824', 'committer_username': 'julian-evers', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 5, 15, 17, 11, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d4eecec19eb18126ce97f687c43ab0cde6570b3', 'committer_username': 'julian-evers', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 5, 15, 17, 11, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c9be997717f768a3bd3b95e8100c2ad0eb2a0baa', 'committer_username': 'julian-evers', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 5, 15, 17, 11, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '904ec87f4c191324b52c1a32cee779cfe834bf9b', 'committer_username': 'julian-evers', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 5, 15, 17, 11, 25, tzinfo=datetime.timezone.utc)}]",,133691040,,User,,2,,1,1
1584394519,Form factors,"Add simple form factor calculations for cylindrical and for stacked, rectangular cells",False,24,https://api.github.com/repos/pybamm-team/pybamm-tea/pulls/24,https://github.com/pybamm-team/pybamm-tea/pull/24,open,3164,1405,11,4,2,0,0,0,[],2023-11-02 14:01:11+00:00,,0.0,,[],"[{'commit_sha': 'd0634d88f6cc05901be0604a8e2d9ced82461249', 'committer_username': 'julian-evers', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 5, 15, 17, 11, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '18cda6f1e68b51357c520fa127f4a738038c6712', 'committer_username': 'julian-evers', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 5, 15, 17, 11, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '950b2f0d75d58690d039f609cd3e9cae0d8b377a', 'committer_username': 'julian-evers', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 5, 15, 17, 11, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2441b094b949e5ff98502d228f400ddb6693a934', 'committer_username': 'julian-evers', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 5, 15, 17, 11, 25, tzinfo=datetime.timezone.utc)}]",,133691040,,User,,2,,1,1
1584401228,Costs,"Calculate emissions, material and production costs",False,25,https://api.github.com/repos/pybamm-team/pybamm-tea/pulls/25,https://github.com/pybamm-team/pybamm-tea/pull/25,open,3164,1405,11,4,0,11,0,0,[],2023-11-02 14:05:26+00:00,,0.0,,"[{'comment_id': 1491017073, 'comment_body': 'by this point neither should be None, based on the above logic', 'comment_created': datetime.datetime(2024, 2, 15, 13, 33, 55, tzinfo=datetime.timezone.utc), 'commenter': 'rtimms', 'type': 'User'}, {'comment_id': 1491019817, 'comment_body': 'In practice the initial concentrations won\'t be 0 and c_max because you will charge/discharge between voltage limits. I think what you are really doing here is saying that the cyclable lithium is equivalent to starting with a fully lithiated cathode and fully delithiated anode. You could then do something like \r\n```python3\r\n    param = pybamm.LithiumIonParameters()\r\n    Q_n = parameter_values.evaluate(param.n.Q_init)\r\n    Q_p = parameter_values.evaluate(param.p.Q_init)\r\n    Q_Li = Q_p * f # here 0 < f < 1 gives you initial LLI\r\n    inputs = {""Q_n"": Q_n, ""Q_p"": Q_p, ""Q_Li"": Q_Li}\r\n    esoh_solver = pybamm.lithium_ion.ElectrodeSOHSolver(parameter_values, param)\r\n    sol = esoh_solver.solve(inputs)\r\n\r\n    c_n_max = parameter_values.evaluate(param.n.prim.c_max)\r\n    c_p_max = parameter_values.evaluate(param.p.prim.c_max)\r\n    x = sol[""x_100""]\r\n    y = sol[""y_100""]\r\n    parameter_values.update(\r\n        {\r\n            ""Initial concentration in negative electrode [mol.m-3]"": x * c_n_max,\r\n            ""Initial concentration in positive electrode [mol.m-3]"": y * c_p_max,\r\n        },\r\n        check_already_exists=False,\r\n    )\r\n```', 'comment_created': datetime.datetime(2024, 2, 15, 13, 36, 8, tzinfo=datetime.timezone.utc), 'commenter': 'rtimms', 'type': 'User'}, {'comment_id': 1491021879, 'comment_body': 'Is this what people normally mean be ""initial stoichiometry""? ', 'comment_created': datetime.datetime(2024, 2, 15, 13, 37, 50, tzinfo=datetime.timezone.utc), 'commenter': 'rtimms', 'type': 'User'}, {'comment_id': 1491023753, 'comment_body': 'Would be cleaner to have already stored the electrode capacities, then you can just get those from the dict instead of repeating the calculation all the time', 'comment_created': datetime.datetime(2024, 2, 15, 13, 39, 16, tzinfo=datetime.timezone.utc), 'commenter': 'rtimms', 'type': 'User'}, {'comment_id': 1491028238, 'comment_body': 'These voltage cut-offs are normally defined first for the cell, e.g. 2.5-4.2V, and then the stoichiometry windows are calculated to respect those voltage limits. This way seems backwards? ', 'comment_created': datetime.datetime(2024, 2, 15, 13, 42, 8, tzinfo=datetime.timezone.utc), 'commenter': 'rtimms', 'type': 'User'}, {'comment_id': 1491030172, 'comment_body': 'there is a lot of repeated code here and it is hard to follow. can you explain the use case for being able to independently change sto limits?', 'comment_created': datetime.datetime(2024, 2, 15, 13, 43, 34, tzinfo=datetime.timezone.utc), 'commenter': 'rtimms', 'type': 'User'}, {'comment_id': 1491031448, 'comment_body': 'is this consistent wit previous calculations?\r\n\r\nit seems like there are multiple places where the same values get calculated, and it is confusing ', 'comment_created': datetime.datetime(2024, 2, 15, 13, 44, 29, tzinfo=datetime.timezone.utc), 'commenter': 'rtimms', 'type': 'User'}, {'comment_id': 1493772699, 'comment_body': 'The idea was that _if_ no initial concentrations are supplied, the total lithium inventory is what would be supplied with the maximum concentration in the positive electrode before formation, without considering any losses at this stage. Later the initial concentrations are updated to 100% SoC, so that the TEA parameter-set can directly be used for a discharge simulation. Would you prefer to have the initial lithium inventory set according to 100% SoC (dependent on voltage cut-offs/stoichiometry limits)?', 'comment_created': datetime.datetime(2024, 2, 18, 13, 59, 6, tzinfo=datetime.timezone.utc), 'commenter': 'julian-evers', 'type': 'User'}, {'comment_id': 1493774042, 'comment_body': ""Thank you for noticing, I'll remove the condition."", 'comment_created': datetime.datetime(2024, 2, 18, 14, 5, 32, tzinfo=datetime.timezone.utc), 'commenter': 'julian-evers', 'type': 'User'}, {'comment_id': 1493775546, 'comment_body': ""I have no clue, but I don't think so, it is an artefact I delete now. (I don't remember exactly how I wanted to use that value.)"", 'comment_created': datetime.datetime(2024, 2, 18, 14, 14, 22, tzinfo=datetime.timezone.utc), 'commenter': 'julian-evers', 'type': 'User'}, {'comment_id': 1493777801, 'comment_body': ""It is useful for capacity balancing in case no OCV curves are supplied. I also generally like it to calculate voltage cut-offs based on it, one could also set target capacities based on it. I'll try to shorten the code section and add more comments so that it becomes easier to follow."", 'comment_created': datetime.datetime(2024, 2, 18, 14, 25, 58, tzinfo=datetime.timezone.utc), 'commenter': 'julian-evers', 'type': 'User'}]","[{'commit_sha': 'd0634d88f6cc05901be0604a8e2d9ced82461249', 'committer_username': 'julian-evers', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 5, 15, 17, 11, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '18cda6f1e68b51357c520fa127f4a738038c6712', 'committer_username': 'julian-evers', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 5, 15, 17, 11, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '950b2f0d75d58690d039f609cd3e9cae0d8b377a', 'committer_username': 'julian-evers', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 5, 15, 17, 11, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2441b094b949e5ff98502d228f400ddb6693a934', 'committer_username': 'julian-evers', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 5, 15, 17, 11, 25, tzinfo=datetime.timezone.utc)}]",,133691040,,User,,2,,1,1

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
647210007,pybamm-tea,pybamm-team/pybamm-tea,Python,0,2,5,2,40,3,4,3,"[{'id': 1558262102, 'number': 21, 'closed': datetime.datetime(2023, 10, 16, 10, 2, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 10, 16, 10, 2, 33, tzinfo=datetime.timezone.utc), 'time_taken': 8.0, 'time_delta': '0:00:08', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 1558260287, 'number': 20, 'closed': datetime.datetime(2023, 10, 16, 10, 1, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 10, 16, 10, 1, 27, tzinfo=datetime.timezone.utc), 'time_taken': 10.0, 'time_delta': '0:00:10', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 1558240319, 'number': 18, 'closed': datetime.datetime(2023, 10, 16, 9, 57, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 10, 16, 9, 49, 49, tzinfo=datetime.timezone.utc), 'time_taken': 470.0, 'time_delta': '0:07:50', 'additions': 587, 'deletions': 23, 'state': 'closed'}, {'id': 1556019262, 'number': 12, 'closed': datetime.datetime(2023, 10, 13, 14, 32, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 10, 13, 14, 30, 11, tzinfo=datetime.timezone.utc), 'time_taken': 124.0, 'time_delta': '0:02:04', 'additions': 1354, 'deletions': 397, 'state': 'closed'}, {'id': 1555691167, 'number': 10, 'closed': datetime.datetime(2023, 10, 13, 14, 8, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 10, 13, 10, 47, 39, tzinfo=datetime.timezone.utc), 'time_taken': 12062.0, 'time_delta': '3:21:02', 'additions': 1231, 'deletions': 217, 'state': 'closed'}, {'id': 1444634042, 'number': 5, 'closed': datetime.datetime(2023, 8, 7, 9, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 21, 15, 5, 56, tzinfo=datetime.timezone.utc), 'time_taken': 1447444.0, 'time_delta': '16 days, 18:04:04', 'additions': 421, 'deletions': 0, 'state': 'closed'}]"
