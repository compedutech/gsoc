pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
671394773,Gsoc2021,,False,47,https://api.github.com/repos/signetlabdei/sem/pulls/47,https://github.com/signetlabdei/sem/pull/47,closed,862,112,14,32,22,120,0,0,[],2021-06-16 12:10:24+00:00,2021-07-02 13:09:29+00:00,1385945.0,"16 days, 0:59:05","[{'comment_id': 652641086, 'comment_body': ""Not sure if I understand correctly this part of the code.\r\n\r\nin any case, suggested code improvement:\r\n```suggestion\r\n            example_result['meta']['log_component'] = {\r\n                k: '...' for k in log_component.keys()\r\n            }\r\n```"", 'comment_created': datetime.datetime(2021, 6, 16, 12, 30, 37, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 652641504, 'comment_body': 'does this mean that all results should have the same log_component dictionary? this might be a problem for us, right?', 'comment_created': datetime.datetime(2021, 6, 16, 12, 31, 9, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 652642523, 'comment_body': 'same as above', 'comment_created': datetime.datetime(2021, 6, 16, 12, 32, 32, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 652646525, 'comment_body': 'what if i wanted all results where any log component was enabled?\r\nin this case, using None as a flag for inserting a result with ""no log components enabled"" would be counter intuitive.\r\n\r\nwhy not storing an empty dict in case no log components are enabled? in this case, the get_results function would return\r\n* only results with specified log component if log_component is non-empty dict\r\n* only results with no log components if log_component is an empty dict\r\n* all results, regardless of log components (both enabled and disabled) if log_component is None', 'comment_created': datetime.datetime(2021, 6, 16, 12, 37, 57, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 652651714, 'comment_body': 'remove commented code', 'comment_created': datetime.datetime(2021, 6, 16, 12, 44, 43, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 652651893, 'comment_body': 'remove commented code', 'comment_created': datetime.datetime(2021, 6, 16, 12, 44, 55, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 652654279, 'comment_body': ""i'm unfamiliar with this, i'll leave the opinion to @DvdMgr "", 'comment_created': datetime.datetime(2021, 6, 16, 12, 47, 59, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 652654863, 'comment_body': ""make sure to follow the usual python's coding style\r\n```suggestion\r\n            results = deepcopy(self.get_results(params, log_component=log_component))\r\n```"", 'comment_created': datetime.datetime(2021, 6, 16, 12, 48, 38, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 652657094, 'comment_body': 'undocumented variable env. what tpe should it be? what information should it contain?', 'comment_created': datetime.datetime(2021, 6, 16, 12, 51, 22, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 652660170, 'comment_body': 'My two cents:\r\nA sem user should be familiar with ns-3 (debug vs optimized), and should thus know that in order to get logs, simulations should run in debug mode.\r\nFor a first approach, I would leave this check to the user, without over complicating the code with re-initialization.\r\nOtherwise, at the end of this function you should also re-inizialize back to the original state, as if nothing was changed.', 'comment_created': datetime.datetime(2021, 6, 16, 12, 55, 8, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 652661988, 'comment_body': 'missing documentation. also, environment is not used', 'comment_created': datetime.datetime(2021, 6, 16, 12, 57, 15, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 652662456, 'comment_body': 'missing documentation (also for pre-existing variables).\r\nalso, environment is not used', 'comment_created': datetime.datetime(2021, 6, 16, 12, 57, 50, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 652663314, 'comment_body': 'missing documentation', 'comment_created': datetime.datetime(2021, 6, 16, 12, 58, 54, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 652664279, 'comment_body': 'check consistency: sometimes called env, sometimes called environment.\r\nalso, missing documentation', 'comment_created': datetime.datetime(2021, 6, 16, 13, 0, 1, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 652667655, 'comment_body': 'check other functions for how to write docstrings', 'comment_created': datetime.datetime(2021, 6, 16, 13, 4, 14, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 652668340, 'comment_body': ""use standard python coding style\r\n```suggestion\r\n        log_level_list = ['error', 'warn', 'debug', 'info', 'function', 'logic', 'all']\r\n```"", 'comment_created': datetime.datetime(2021, 6, 16, 13, 5, 4, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 652671379, 'comment_body': 'hard to read. could you break this down into multiple lines or even create a separate function if too complex? also comments are welcomed, think about code maintenance in the future', 'comment_created': datetime.datetime(2021, 6, 16, 13, 8, 36, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 652677022, 'comment_body': ""on a second thought: regexp might be overkill for the job. you're expecting `level` to be one of a few possible entries. you could hard code these entries in a dictionary, e.g.\r\n```python\r\nconverter = {'error': 'error',\r\n             'warn': 'warn',\r\n             # etc\r\n             'level_warn': 'error|warn',\r\n             # etc\r\n}\r\n```\r\nyou might also want to check for possible user errors, e.g., how is the case 'warn|level_info' handled? does 'warn' appear twice? are 'warn|info' and 'info|warn' handled in the same way by the new code?"", 'comment_created': datetime.datetime(2021, 6, 16, 13, 15, 3, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 652677748, 'comment_body': 'TODO?', 'comment_created': datetime.datetime(2021, 6, 16, 13, 15, 54, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 652679101, 'comment_body': 'what about prefixes? how are they handled?', 'comment_created': datetime.datetime(2021, 6, 16, 13, 17, 27, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 652681396, 'comment_body': 'did you mean:\r\n```suggestion\r\n                # the log level should be of the form debug|info or level_debug|level_info\r\n```\r\nalso, level_ components should be decomposed by parse_log_component, right?', 'comment_created': datetime.datetime(2021, 6, 16, 13, 20, 7, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 652683381, 'comment_body': ""need more info con how log_component (dict) should be formatted. should log_levels (values) be formatted as `'info|warn` or `info,warn`? prefixes, are ignored, right? this should be specified"", 'comment_created': datetime.datetime(2021, 6, 16, 13, 22, 22, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 652685755, 'comment_body': '```suggestion\r\n                environment_variable = "":"".join([component + \'=\' + log_level + \'|prefix_all\' for component, log_level in log_component.items()])\r\n```', 'comment_created': datetime.datetime(2021, 6, 16, 13, 24, 56, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 652686333, 'comment_body': '```suggestion\r\n                environment_variable = log_component\r\n```', 'comment_created': datetime.datetime(2021, 6, 16, 13, 25, 32, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 652686476, 'comment_body': '```suggestion\r\n            environment = {""NS_LOG"": environment_variable}\r\n```', 'comment_created': datetime.datetime(2021, 6, 16, 13, 25, 43, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 652687689, 'comment_body': 'i stand by my opinion: a user should know about this and act accordingly, but we can discuss about it', 'comment_created': datetime.datetime(2021, 6, 16, 13, 27, 2, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 652690176, 'comment_body': 'always check if not None. your implementation would return false if log_component is None, but also if log_component is an empty dictionary\r\n```suggestion\r\n        if log_component is not None:\r\n```', 'comment_created': datetime.datetime(2021, 6, 16, 13, 29, 40, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 652692035, 'comment_body': 'this return should be documented', 'comment_created': datetime.datetime(2021, 6, 16, 13, 31, 42, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 652693264, 'comment_body': 'it does make sense: different seeds return different results and possibly different errors', 'comment_created': datetime.datetime(2021, 6, 16, 13, 32, 57, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 652694383, 'comment_body': 'undocumented return', 'comment_created': datetime.datetime(2021, 6, 16, 13, 34, 9, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 652705130, 'comment_body': ""it's quite unstable. if ns-3 is updated (e.g., ns-3.34 will heavily change the wifi module), this test will fail.\r\nas sem supports a multiple ns-3 versions, this check is bound to fail eventually.\r\n\r\nalso running an ns-3 example is not a great a idea for the same reason. i'd rather suggest to write a simple ns-3 script outputting some pre-defined logs, and check those.\r\n\r\nmore tests are needed to cover all the updates brought by the additional code. did you check the test coverage before and after your updates? to improve the sem project, coverage should increase or stay the same"", 'comment_created': datetime.datetime(2021, 6, 16, 13, 45, 37, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 653201376, 'comment_body': 'Here, I think it should be enough to add `log_component` as a key to the `meta` entry in the `example_result` above (as shown in the suggested change). If that works, this portion of the code can be removed.', 'comment_created': datetime.datetime(2021, 6, 17, 3, 38, 36, tzinfo=datetime.timezone.utc), 'commenter': 'DvdMgr', 'type': 'User'}, {'comment_id': 653201693, 'comment_body': ""Instead of changing the `example_result` below, I think the following change should be enough:\r\n\r\n```suggestion\r\n            'meta': {k: ['...'] for k in ['elapsed_time', 'id', 'exitcode', 'log_component']},\r\n```"", 'comment_created': datetime.datetime(2021, 6, 17, 3, 39, 47, tzinfo=datetime.timezone.utc), 'commenter': 'DvdMgr', 'type': 'User'}, {'comment_id': 653202060, 'comment_body': '> Not sure if I understand correctly this part of the code.\r\n> \r\n> in any case, suggested code improvement:\r\n\r\nThe `example_result` here is used in the following as a template, to check that the result we are inserting in the database is correctly formed. \r\n\r\nNow that I think about it, `result_template` might have been a better choice for this thing.', 'comment_created': datetime.datetime(2021, 6, 17, 3, 41, tzinfo=datetime.timezone.utc), 'commenter': 'DvdMgr', 'type': 'User'}, {'comment_id': 653202734, 'comment_body': ""I don't think so, \r\n\r\n> does this mean that all results should have the same log_component dictionary? this might be a problem for us, right?\r\n\r\nI think with my suggestion above we should be fine, as only the presence of the `log_component` key will be checked."", 'comment_created': datetime.datetime(2021, 6, 17, 3, 43, 10, tzinfo=datetime.timezone.utc), 'commenter': 'DvdMgr', 'type': 'User'}, {'comment_id': 653203655, 'comment_body': 'This does not seem to be used (at least for now). Suggest to remove it for now.', 'comment_created': datetime.datetime(2021, 6, 17, 3, 46, 36, tzinfo=datetime.timezone.utc), 'commenter': 'DvdMgr', 'type': 'User'}, {'comment_id': 653204306, 'comment_body': 'Looks like we have some code duplication here, for the `example_result` logic both in `insert_result` and `insert_results`. We might get away with removing `insert_result` altogether, and move to using only `insert_results` by simply converting single results to lists. We should remember to tackle this in the future...', 'comment_created': datetime.datetime(2021, 6, 17, 3, 48, 54, tzinfo=datetime.timezone.utc), 'commenter': 'DvdMgr', 'type': 'User'}, {'comment_id': 653209231, 'comment_body': ""I agree we should support all three cases. However, I would also like the default behavior to be coherent with the current behavior, i.e., only results with no logging enabled are returned. If the user wants to get all results, including those with logging (this is a corner case, in my opinion), they should be able to do so - I agree that `None` is a decent option for this behavior. Not very intuitive, but decent.\r\n\r\nAt this point, to preserve SEM's current behavior, we should use `{}` as a default value for `log_components`. However, to me this suggests that, by default, we want logging (`None` is the better option to express that you are not interested in logging).\r\n\r\nMight need to discuss this in the next meeting."", 'comment_created': datetime.datetime(2021, 6, 17, 4, 6, 31, tzinfo=datetime.timezone.utc), 'commenter': 'DvdMgr', 'type': 'User'}, {'comment_id': 653210053, 'comment_body': 'This might happen if the user passes `{}` as `params`. In this case, we match all results!', 'comment_created': datetime.datetime(2021, 6, 17, 4, 9, 23, tzinfo=datetime.timezone.utc), 'commenter': 'DvdMgr', 'type': 'User'}, {'comment_id': 653212314, 'comment_body': ""I need to check this more thoroughly, and don't have much time right now - as far as resources go, [this page](https://tinydb.readthedocs.io/en/latest/usage.html#queries) in the TinyDB docs seems to contain some hints. I think having an example script that you can execute, print out the query and output from the db, and play around with could be useful for debugging and getting this right. \r\n\r\nI'll see whether I can tackle this between today and tomorrow!\r\n\r\n```suggestion\r\n                (where('meta')['log_component'] is None) and (where('params')[key] == v for v in value)]) for key, value in\r\n```"", 'comment_created': datetime.datetime(2021, 6, 17, 4, 17, 19, tzinfo=datetime.timezone.utc), 'commenter': 'DvdMgr', 'type': 'User'}, {'comment_id': 653212790, 'comment_body': ""I'm tempted to remove this runner, for now let's ignore it :)"", 'comment_created': datetime.datetime(2021, 6, 17, 4, 18, 50, tzinfo=datetime.timezone.utc), 'commenter': 'DvdMgr', 'type': 'User'}, {'comment_id': 653216708, 'comment_body': ""I agree with @mattia-lecci's suggestion to use a converter dictionary.\r\n\r\nThere is also some confusion in the terminology: in [the documentation](https://www.nsnam.org/docs/manual/html/logging.html), they talk about logging _classes_ to identify `warn`, `function`, etc; instead, logging _levels_ are defined as the class and all above.\r\n\r\nBy the way, are we sure we want to support logging classes? Just supporting levels would be significantly easier. Then again, I usually rely on levels instead of classes, but other users might have different needs..."", 'comment_created': datetime.datetime(2021, 6, 17, 4, 31, 13, tzinfo=datetime.timezone.utc), 'commenter': 'DvdMgr', 'type': 'User'}, {'comment_id': 653217464, 'comment_body': '```suggestion\r\n                for component, log_level in log_component.items():\r\n```', 'comment_created': datetime.datetime(2021, 6, 17, 4, 33, 30, tzinfo=datetime.timezone.utc), 'commenter': 'DvdMgr', 'type': 'User'}, {'comment_id': 653217948, 'comment_body': '```suggestion\r\n            if isinstance(log_component, dict):\r\n                # Add code to check if the passed dictionary is valid                                                       #TODO\r\n```', 'comment_created': datetime.datetime(2021, 6, 17, 4, 35, 4, tzinfo=datetime.timezone.utc), 'commenter': 'DvdMgr', 'type': 'User'}, {'comment_id': 653218364, 'comment_body': '```suggestion\r\n            if isinstance(log_component, str):\r\n```', 'comment_created': datetime.datetime(2021, 6, 17, 4, 36, 25, tzinfo=datetime.timezone.utc), 'commenter': 'DvdMgr', 'type': 'User'}, {'comment_id': 653218574, 'comment_body': ""We'll better discuss this on the next call, I agree"", 'comment_created': datetime.datetime(2021, 6, 17, 4, 37, 9, tzinfo=datetime.timezone.utc), 'commenter': 'DvdMgr', 'type': 'User'}, {'comment_id': 653219925, 'comment_body': 'Agree! Plus, I expect that users will want to replicate a specific value for the `RngRun` parameter: in this case, runs will probably be `None`, and the `RngRun` will be specified in the parameter combinations inside `param_list`', 'comment_created': datetime.datetime(2021, 6, 17, 4, 41, 37, tzinfo=datetime.timezone.utc), 'commenter': 'DvdMgr', 'type': 'User'}, {'comment_id': 653221280, 'comment_body': 'If we change the ns-3 installation from optimized to debug and leave it changed, we should at the very least inform the user (by printing to stdout, for instance). If not, we should return things as they were before we touched them. Giving the user the ability to choose might also be an option...', 'comment_created': datetime.datetime(2021, 6, 17, 4, 45, 47, tzinfo=datetime.timezone.utc), 'commenter': 'DvdMgr', 'type': 'User'}, {'comment_id': 653221574, 'comment_body': ""I'll look into this"", 'comment_created': datetime.datetime(2021, 6, 17, 4, 46, 54, tzinfo=datetime.timezone.utc), 'commenter': 'DvdMgr', 'type': 'User'}, {'comment_id': 653222222, 'comment_body': ""I agree that using this as a check is a bit dangerous. It's true we have a fixed version of ns-3 we use to run tests and examples, but it's also true that I would like this to be updated every once in a while, and having a heavy dependence on the behavior of a specific ns-3 example could be a headache to maintain.\r\n\r\nWriting a custom ns-3 script to test this sounds like a good idea!"", 'comment_created': datetime.datetime(2021, 6, 17, 4, 48, 50, tzinfo=datetime.timezone.utc), 'commenter': 'DvdMgr', 'type': 'User'}, {'comment_id': 653268559, 'comment_body': '> Here, I think it should be enough to add `log_component` as a key to the `meta` entry in the `example_result` above (as shown in the suggested change). If that works, this portion of the code can be removed.\r\n\r\nThe `DatabaseManager.have_same_structure()` recursively looks for keys if there are nested dictionaries present inside the parent dictionary. If we just want to add `log_component` as a key, then we might also need to modify this function to prevent it from recursively looking inside the `log_component` dictionary. \r\n\r\n', 'comment_created': datetime.datetime(2021, 6, 17, 6, 38, 59, tzinfo=datetime.timezone.utc), 'commenter': 'akshitpatel01', 'type': 'User'}, {'comment_id': 653270987, 'comment_body': '> does this mean that all results should have the same log_component dictionary? this might be a problem for us, right?\r\n\r\nIt will not be a problem even in the current state, as I have modified the results accordingly in the `CampaignManager.run_and_save_results()`. \r\n\r\n> I think with my suggestion above we should be fine, as only the presence of the log_component key will be checked.\r\n\r\nI am not sure if I understood your suggestion correctly, but I did reply to it above. ', 'comment_created': datetime.datetime(2021, 6, 17, 6, 43, 11, tzinfo=datetime.timezone.utc), 'commenter': 'akshitpatel01', 'type': 'User'}, {'comment_id': 653271532, 'comment_body': '> Looks like we have some code duplication here, for the `example_result` logic both in `insert_result` and `insert_results`. We might get away with removing `insert_result` altogether, and move to using only `insert_results` by simply converting single results to lists. We should remember to tackle this in the future...\r\n\r\nAgreed. This seems best. Also, looking at the SEM codebase `insert_result` is only used in the tests as of now. I will make this shift in my next PR. ', 'comment_created': datetime.datetime(2021, 6, 17, 6, 44, 10, tzinfo=datetime.timezone.utc), 'commenter': 'akshitpatel01', 'type': 'User'}, {'comment_id': 653275903, 'comment_body': ""> At this point, to preserve SEM's current behavior, we should use `{}` as a default value for `log_components`. However, to me this suggests that, by default, we want logging (`None` is the better option to express that you are not interested in logging).\r\n\r\nI agree `None` will be the better choice to represent that the user is not interested in logging. To accommodate this, what if we modify the conditions as follows: \r\n\r\n- all results, regardless of log components (both enabled and disabled) if `log_component` is an empty dictionary\r\n- only results with specified log component if `log_component` is non-empty dict\r\n- only results with no log components if `log_component` is None\r\n\r\n\r\nNote: These conditions will be in addition to the conditions on the parameters passed. \r\n"", 'comment_created': datetime.datetime(2021, 6, 17, 6, 51, 39, tzinfo=datetime.timezone.utc), 'commenter': 'akshitpatel01', 'type': 'User'}, {'comment_id': 653298601, 'comment_body': 'I think reverting to the original state might be a better option for the user, without worrying about the campaign mode, can just enable logging by passing the log_component to run_missing_simulations(). The only downside that I can think of is the fact that the program will still be executing even after the simulations are finished running. Restoring to the original state might be a little tricky as this has to be done after all the simulations have finished running.\r\n\r\nFor now, we can just tell the user that the profile of ns-3 will be changed after the simulations have been executed and I will think of some clean method to restore the original state in the meantime. ', 'comment_created': datetime.datetime(2021, 6, 17, 7, 26, 3, tzinfo=datetime.timezone.utc), 'commenter': 'akshitpatel01', 'type': 'User'}, {'comment_id': 653305607, 'comment_body': ""> you might also want to check for possible user errors, e.g., how is the case 'warn|level_info' handled? does 'warn' appear twice? \r\n\r\nNo 'warn' will not appear twice(a set is used for storing the log classes). Every log class will appear only once. \r\n\r\n> are 'warn|info' and 'info|warn' handled in the same way by the new code?\r\n\r\nThe order of log_levels will not make a difference.\r\n\r\n\r\n> what about prefixes? how are they handled?\r\n\r\nI can add a check for this. If the user tries to add a prefix, we can just drop it. \r\n\r\n"", 'comment_created': datetime.datetime(2021, 6, 17, 7, 36, 15, tzinfo=datetime.timezone.utc), 'commenter': 'akshitpatel01', 'type': 'User'}, {'comment_id': 653307667, 'comment_body': 'We can use a converter dictionary as well. It might be less prone to errors as well. \r\n\r\n> By the way, are we sure we want to support logging classes? Just supporting levels would be significantly easier. Then again, I usually rely on levels instead of classes, but other users might have different needs...\r\n\r\nSupporting log classes and log levels might not be much hassle. It would be better if I code this and then you both can give further comments on this. ', 'comment_created': datetime.datetime(2021, 6, 17, 7, 39, 12, tzinfo=datetime.timezone.utc), 'commenter': 'akshitpatel01', 'type': 'User'}, {'comment_id': 653307895, 'comment_body': 'The comment was left out from the `parse_log_compoenent()` function. Please ignore this. ', 'comment_created': datetime.datetime(2021, 6, 17, 7, 39, 29, tzinfo=datetime.timezone.utc), 'commenter': 'akshitpatel01', 'type': 'User'}, {'comment_id': 653312009, 'comment_body': ""I meant that the code will support both info as well as level_info. So to make it more clear, will this help? \r\n`The log level should be of the form  info or level_debug|info or level_info where 'level_' prefix indicates the specified log class along with all the log classes above it`\r\n\r\n> also, level_ components should be decomposed by parse_log_component, right?\r\n\r\nI do not think so. This parsing function is only for the case when the user passes in `log_component` as a dictionary. So the different log components will be different keys. And about the validity of the log components, this was the first point in my email and I agree with @DvdMgr's workaround. "", 'comment_created': datetime.datetime(2021, 6, 17, 7, 45, 4, tzinfo=datetime.timezone.utc), 'commenter': 'akshitpatel01', 'type': 'User'}, {'comment_id': 653371530, 'comment_body': ""Alright, I agree. I'll switch to a custom ns-3 script. But, where will this ns-3 script be saved and how will we able to access this script inside the test framework?"", 'comment_created': datetime.datetime(2021, 6, 17, 9, 1, 38, tzinfo=datetime.timezone.utc), 'commenter': 'akshitpatel01', 'type': 'User'}, {'comment_id': 653374066, 'comment_body': ""There might be a problem if we do this. I replied regarding this on @mattia-lecci's suggestion above. \r\nHere:\r\n> The `DatabaseManager.have_same_structure()` recursively looks for keys if there are nested dictionaries present inside the parent dictionary. If we just want to add `log_component` as a key, then we might also need to modify this function to prevent it from recursively looking inside the `log_component` dictionary.\r\n\r\n"", 'comment_created': datetime.datetime(2021, 6, 17, 9, 4, 59, tzinfo=datetime.timezone.utc), 'commenter': 'akshitpatel01', 'type': 'User'}, {'comment_id': 653376086, 'comment_body': 'Understood. Thanks!', 'comment_created': datetime.datetime(2021, 6, 17, 9, 7, 40, tzinfo=datetime.timezone.utc), 'commenter': 'akshitpatel01', 'type': 'User'}, {'comment_id': 653543999, 'comment_body': ""Again, i'm not familiar with this part of the code but what davide suggest should work fine: we want log_component to be an entry, but we do not want all entries to have the same log components (i guess?). so just placing log_component in example_result should be fine, without specifying its internal structure.\r\n@DvdMgr is this correct?"", 'comment_created': datetime.datetime(2021, 6, 17, 13, 3, 38, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 653545074, 'comment_body': ""maybe just add a todo for the moment, although it shouldn't take much time to add this update"", 'comment_created': datetime.datetime(2021, 6, 17, 13, 5, 2, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 653547952, 'comment_body': ""I agree, the default behavior should not be changed.\r\n\r\n> At this point, to preserve SEM's current behavior, we should use `{}` as a default value for `log_components`. However, to me this suggests that, by default, we want logging (`None` is the better option to express that you are not interested in logging).\r\n\r\nUsing `{}` as default value is actually highly unrecommended (check [here](https://florimond.dev/en/posts/2018/08/python-mutable-defaults-are-the-source-of-all-evil/)).\r\n\r\nI'm ok with Akshit's proposal, but it should be done consistently for all functions!"", 'comment_created': datetime.datetime(2021, 6, 17, 13, 8, 42, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 653551366, 'comment_body': 'Note that there an alternative exists (although it still needs to be handled correctly): as described [here](https://www.nsnam.org/docs/tutorial/html/getting-started.html#build-profiles), also optimized mode can show logs if using the `--enable-logs` flag in `./waf configure`.\r\nIn this way, the performance of the optimized mode should be mostly kept', 'comment_created': datetime.datetime(2021, 6, 17, 13, 12, 48, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 653555411, 'comment_body': ""i agree, adding support for both classes and level is not a big deal if done with a dictionary so we should do it (i mostly use log levels as well.. it would be annoying if they were not supported).\r\n\r\n\r\n> No 'warn' will not appear twice(a set is used for storing the log classes). Every log class will appear only once.\r\n\r\nGood job, I missed that! \r\n\r\n> The order of log_levels will not make a difference.\r\n\r\nAre you sure that this won't make a difference? How do you check if the same simulation already exists with the given log components?\r\n\r\n> I can add a check for this. If the user tries to add a prefix, we can just drop it.\r\n\r\nYes, this should be fine, you're adding a `prefix_all` anyway"", 'comment_created': datetime.datetime(2021, 6, 17, 13, 17, 36, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 653557939, 'comment_body': ""> I meant that the code will support both info as well as level_info. So to make it more clear, will this help?\r\n> `The log level should be of the form info or level_debug|info or level_info where 'level_' prefix indicates the specified log class along with all the log classes above it`\r\n\r\nI would avoid repeating what is already part of the ns-3 documentation, and simply refer to it.\r\nWhat I would like to see in sem's documentation is what sem supports. It's still not clear to me from this docstring.\r\n\r\n\r\n"", 'comment_created': datetime.datetime(2021, 6, 17, 13, 20, 42, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 653560840, 'comment_body': ""that's actually a good point. i don't have a clear answer right now, we should discuss it tomorrow in our call"", 'comment_created': datetime.datetime(2021, 6, 17, 13, 24, 7, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 653563579, 'comment_body': 'right, [these](https://github.com/signetlabdei/sem/blob/b704be8c82fee6411d5aba98d24079dcb58d1fd9/sem/database.py#L496-L498) are the incriminated lines actually. any thought on this @DvdMgr ? maybe adding a flag `recurseDictionaries`?', 'comment_created': datetime.datetime(2021, 6, 17, 13, 27, 18, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 654191154, 'comment_body': ""> > Here, I think it should be enough to add `log_component` as a key to the `meta` entry in the `example_result` above (as shown in the suggested change). If that works, this portion of the code can be removed.\r\n> \r\n> **The `DatabaseManager.have_same_structure()` recursively looks for keys** if there are nested dictionaries present inside the parent dictionary. If we just want to add `log_component` as a key, then we might also need to modify this function to prevent it from recursively looking inside the `log_component` dictionary.\r\n\r\nDidn't realize that! Maybe, then, it makes sense to only use `have_same_structure` for the `params` entry of the result (and at this point, it might be best to only directly check the keys, not even using `have_same_structure`), and separately check the `meta` entry... This would make `have_same_structure` useless, so we could just remove it at that point."", 'comment_created': datetime.datetime(2021, 6, 18, 7, 4, 57, tzinfo=datetime.timezone.utc), 'commenter': 'DvdMgr', 'type': 'User'}, {'comment_id': 654192853, 'comment_body': ""I'm ok with Akshit's proposal, too! But we need to document this extremely clearly in the docstring, since it's not very intuitive what `{}` should do at a first glance."", 'comment_created': datetime.datetime(2021, 6, 18, 7, 8, 16, tzinfo=datetime.timezone.utc), 'commenter': 'DvdMgr', 'type': 'User'}, {'comment_id': 654195442, 'comment_body': ""> In this way, the performance of the optimized mode should be mostly kept\r\n\r\nNice find! We should probably look at this more closely to make sure this is the case.\r\n\r\n> The only downside that I can think of is the fact that the program will still be executing even after the simulations are finished running.\r\n\r\nThe user might also find it desirable to have the ns-3 installation in debug mode when using logs... Let's add this to the agenda for today's call."", 'comment_created': datetime.datetime(2021, 6, 18, 7, 12, 48, tzinfo=datetime.timezone.utc), 'commenter': 'DvdMgr', 'type': 'User'}, {'comment_id': 654198500, 'comment_body': 'As of now, for both examples and tests we rely on a fork of ns-3-dev hosted on my github (the `sem-examples` and `sem-tests` branches [here](https://github.com/dvdmgr/ns-3-dev)). I can give @akshitpatel01 access to this repository for now, and we can think of a better place to host them later (for instance, on the signetlabdei organization page).', 'comment_created': datetime.datetime(2021, 6, 18, 7, 18, 6, tzinfo=datetime.timezone.utc), 'commenter': 'DvdMgr', 'type': 'User'}, {'comment_id': 654199209, 'comment_body': 'Replied to this in the original comment above', 'comment_created': datetime.datetime(2021, 6, 18, 7, 19, 15, tzinfo=datetime.timezone.utc), 'commenter': 'DvdMgr', 'type': 'User'}, {'comment_id': 656869790, 'comment_body': ""```suggestion\r\n        'level_debug' gets converted to 'warn|error|debug'\r\n```"", 'comment_created': datetime.datetime(2021, 6, 23, 8, 21, 11, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 656871683, 'comment_body': '```suggestion\r\n                as the value. Log levels should be written in the same format as the one specified by the ns-3\r\n                manual for the environment variable NS_LOG.\r\n```', 'comment_created': datetime.datetime(2021, 6, 23, 8, 23, 38, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 656872163, 'comment_body': 'you should also mention that prefixes are ignored and prefix_all is assumed to make this framework work', 'comment_created': datetime.datetime(2021, 6, 23, 8, 24, 18, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 656875596, 'comment_body': '@DvdMgr are f-strings ok?\r\n```suggestion\r\n                    raise Exception(""Log level \'%s\' for component \'%s\' is not valid"" % level, component)\r\n```', 'comment_created': datetime.datetime(2021, 6, 23, 8, 28, 39, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 656875996, 'comment_body': 'should be enough\r\n```suggestion\r\n                if level not in converter:\r\n```', 'comment_created': datetime.datetime(2021, 6, 23, 8, 29, 10, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 656876533, 'comment_body': '```suggestion\r\n                if (ns3_log_components is not None) and (component not in ns3_log_components):\r\n```', 'comment_created': datetime.datetime(2021, 6, 23, 8, 29, 52, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 656876910, 'comment_body': ""```suggestion\r\n                        'Log component '%s' is not a valid ns-3 log component.Valid log components: \\n%ls' % (\r\n```"", 'comment_created': datetime.datetime(2021, 6, 23, 8, 30, 21, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 656880295, 'comment_body': 'self is not needed. either move this outside of DatabaseManager class, or make it a `@staticmethod`, or move it to utils', 'comment_created': datetime.datetime(2021, 6, 23, 8, 34, 52, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 656880815, 'comment_body': '```suggestion\r\n        parameter combinations or logging combination.\r\n```', 'comment_created': datetime.datetime(2021, 6, 23, 8, 35, 36, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 656881874, 'comment_body': '```suggestion\r\n        - If log component is {} (Empty dictionary), return all the results where logging is enabled.\r\n```', 'comment_created': datetime.datetime(2021, 6, 23, 8, 36, 57, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 656882437, 'comment_body': '```suggestion\r\n        The rules of both params and log_component will be applied simultaneously. \r\n```', 'comment_created': datetime.datetime(2021, 6, 23, 8, 37, 41, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 656883314, 'comment_body': 'i would make example dictionaries as it was done for params', 'comment_created': datetime.datetime(2021, 6, 23, 8, 38, 47, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 656884112, 'comment_body': '```suggestion\r\n        if params is not None:\r\n```', 'comment_created': datetime.datetime(2021, 6, 23, 8, 39, 52, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 656885839, 'comment_body': 'this is a common mistake that python programmers do. please be very careful about this, check [this](https://towardsdatascience.com/python-the-boolean-confusion-f7fc5288f0ce#:~:text=When%20you%20do%20if%20val,also%20the%20exact%20same%20instance.) out for a better explanation,', 'comment_created': datetime.datetime(2021, 6, 23, 8, 42, 3, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 656888302, 'comment_body': ""i think so, keys() should return a list, which is False iff it's empty"", 'comment_created': datetime.datetime(2021, 6, 23, 8, 45, 12, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 656889850, 'comment_body': 'remove trailing whitespace', 'comment_created': datetime.datetime(2021, 6, 23, 8, 47, 14, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 656892975, 'comment_body': 'you should also check if the string is valid. what if the user inputs something like:\r\nNS_LOG=""NetDevice=**;Simulator:Node=level_info-prefix_time""', 'comment_created': datetime.datetime(2021, 6, 23, 8, 51, 5, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 656894522, 'comment_body': 'check if len(component_and_level) is either 1 or 2', 'comment_created': datetime.datetime(2021, 6, 23, 8, 52, 52, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 656898699, 'comment_body': 'missing \'*\', \'**\', \'***\'. Also, how do you support the case where no log level is explicitly stated? e.g., NS_LOG=""Node"" is equivalent to NS_LOG=""Node=**"" which is equivalent to NS_LOG=""Node=level_all|prefix_all"".\r\n\r\nCheck [here](https://www.nsnam.org/docs/manual/html/logging.html) for further documentation, and be especially careful to [wildcards](https://www.nsnam.org/docs/manual/html/logging.html#ns-log-wildcards).', 'comment_created': datetime.datetime(2021, 6, 23, 8, 57, 46, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 656901156, 'comment_body': ""https://www.techiedelight.com/check-list-empty-python/\r\n```suggestion\r\n    assert not list(db.get_results(log_component={'component1':'logic'}))\r\n```"", 'comment_created': datetime.datetime(2021, 6, 23, 9, 0, 56, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 656905136, 'comment_body': 'Also, KeyError or ValueError rather than Exception would be more specific', 'comment_created': datetime.datetime(2021, 6, 23, 9, 6, 14, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 656907739, 'comment_body': 'Exception is too generic, tests should be more specific. if the code raises a generic Exception, it should be updated.\r\ncheck [here](https://docs.python.org/3/library/exceptions.html#Exception)', 'comment_created': datetime.datetime(2021, 6, 23, 9, 9, 36, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 656920269, 'comment_body': 'remove trailing whitespaces', 'comment_created': datetime.datetime(2021, 6, 23, 9, 26, 9, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 657230181, 'comment_body': 'Since you return here, you can remove the `elif` and the `else`', 'comment_created': datetime.datetime(2021, 6, 23, 15, 37, 58, tzinfo=datetime.timezone.utc), 'commenter': 'DvdMgr', 'type': 'User'}, {'comment_id': 657232744, 'comment_body': ""This is one instance where flake could come in handy, and report this double space!\r\n\r\n```suggestion\r\n        return [dict(i) for i in self.db.table('results').search(query)]\r\n```"", 'comment_created': datetime.datetime(2021, 6, 23, 15, 40, 45, tzinfo=datetime.timezone.utc), 'commenter': 'DvdMgr', 'type': 'User'}, {'comment_id': 657235752, 'comment_body': ""> @DvdMgr are f-strings ok?\r\n\r\nYes, whatever works! The rest of the codebase uses %, but I'm not against f-strings if it's how you prefer to do it!"", 'comment_created': datetime.datetime(2021, 6, 23, 15, 44, 13, tzinfo=datetime.timezone.utc), 'commenter': 'DvdMgr', 'type': 'User'}, {'comment_id': 657236159, 'comment_body': '> Also, KeyError or ValueError rather than Exception would be more specific\r\n\r\n`ValueError` is probably most appropriate.', 'comment_created': datetime.datetime(2021, 6, 23, 15, 44, 41, tzinfo=datetime.timezone.utc), 'commenter': 'DvdMgr', 'type': 'User'}, {'comment_id': 657409147, 'comment_body': 'I used flake and corrected all the errors. These types of issues should be fixed in the latest commit [here](https://github.com/signetlabdei/sem/pull/47/commits/97ddd823125804630faaa68136baf0eb7e2ec0fe). ', 'comment_created': datetime.datetime(2021, 6, 23, 19, 39, 59, tzinfo=datetime.timezone.utc), 'commenter': 'akshitpatel01', 'type': 'User'}, {'comment_id': 658186106, 'comment_body': 'Fixed in [01c815b](https://github.com/signetlabdei/sem/pull/47/commits/01c815bd94e7078a54ad5774945a3049cec40738).', 'comment_created': datetime.datetime(2021, 6, 24, 18, 26, 17, tzinfo=datetime.timezone.utc), 'commenter': 'akshitpatel01', 'type': 'User'}, {'comment_id': 658601924, 'comment_body': 'remove commented code', 'comment_created': datetime.datetime(2021, 6, 25, 8, 51, 10, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 658604247, 'comment_body': ""```suggestion\r\n        - If log_component is {'component1': 'level1|level2'}: the database\r\n            will be queried for results having param1 equal to value1, and\r\n            param2 equal to value2 or value3 and\r\n            log_component = {'component1': 'level1|level2'}\r\n```"", 'comment_created': datetime.datetime(2021, 6, 25, 8, 53, 29, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 658605084, 'comment_body': 'what do you mean?', 'comment_created': datetime.datetime(2021, 6, 25, 8, 54, 11, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 658609661, 'comment_body': 'too many details, code should be almost self-explanatory: the user should check the doc of parse_log_component', 'comment_created': datetime.datetime(2021, 6, 25, 9, 0, 42, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 658615117, 'comment_body': ""as discussed during the call.\r\nif it works: add a TODO and let's think about this in the next PR"", 'comment_created': datetime.datetime(2021, 6, 25, 9, 9, 28, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 658641653, 'comment_body': 'unchecked case:\r\nNS_LOG=""LogComponentName=warn=info""\r\n\r\nIn general, as a rule of thumb you should always add an ""else"" case raising an exception. In this case, if len(component_and_level)>2, the user surely made a mistake and we should stop immediately', 'comment_created': datetime.datetime(2021, 6, 25, 9, 51, 46, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 658645515, 'comment_body': 'what does ""ret"" men? improve variable name ', 'comment_created': datetime.datetime(2021, 6, 25, 9, 57, 52, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 658647502, 'comment_body': 'you mean the following? if so, leave it as it is, otherwise be sure to improve the condition\r\n```suggestion\r\n    if log_component is not None or log_component == {}:\r\n        return None\r\n```', 'comment_created': datetime.datetime(2021, 6, 25, 10, 1, 4, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 658649660, 'comment_body': ""dangerous condition: it's extremely complicate to read and make sure that it's correct (especially edge cases).\r\ncould you break it down a bit? or deconstruct it in different parts of the code using simpler conditions?\r\n\r\nThe following should be equivalent ([right?](https://en.wikipedia.org/wiki/De_Morgan%27s_laws))\r\n```suggestion\r\n        if (ns3_log_components is not None) and ((component == '*') and (component in ns3_log_components)):\r\n```\r\nI'm not sure if this is correct"", 'comment_created': datetime.datetime(2021, 6, 25, 10, 4, 37, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 658653501, 'comment_body': 'maybe this can already be part of the long condition above, o part of that condition can be moved here', 'comment_created': datetime.datetime(2021, 6, 25, 10, 10, 41, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 658656485, 'comment_body': ""no need to make any check: log_level_complete is a set and already handles possible duplicates. am i missing something?\r\n```suggestion\r\n        if component in ret_dict:\r\n            log_level_complete.update(ret_dict[component].split('|'))\r\n```"", 'comment_created': datetime.datetime(2021, 6, 25, 10, 15, 50, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 658943314, 'comment_body': 'As this is an example I thought It might be useful to provide a sample log_component string in addition to the log_component dictionary. ', 'comment_created': datetime.datetime(2021, 6, 25, 17, 57, 14, tzinfo=datetime.timezone.utc), 'commenter': 'akshitpatel01', 'type': 'User'}, {'comment_id': 658958711, 'comment_body': 'I did this to remove the linting errors. As per our discussion [here ](https://github.com/signetlabdei/sem/pull/47#discussion_r656888302), I will remove this entire code snippet as it is not needed. ', 'comment_created': datetime.datetime(2021, 6, 25, 18, 25, 50, tzinfo=datetime.timezone.utc), 'commenter': 'akshitpatel01', 'type': 'User'}, {'comment_id': 658986987, 'comment_body': 'The regex will take care of this case: NS_LOG=""LogComponentName=warn=info"" and raise a ValueError. The reason I did not add an else statement is that the regex matches, it is sure that the string passed will be valid. But I will add an else statement just to be sure. ', 'comment_created': datetime.datetime(2021, 6, 25, 19, 20, 6, tzinfo=datetime.timezone.utc), 'commenter': 'akshitpatel01', 'type': 'User'}, {'comment_id': 658995690, 'comment_body': ""The parse_log_component() can be used in two ways. \r\n- If ns3_log_components is None: It will just check the log_levels and make them consistent with the database format.\r\n- If ns3_log_components is not None: In addition to the above things, it will also check the validity of components passed. So basically, ns3_log_components is optionally required to check the component validity or mandatory if there is a '*' or '**' in the log levels passed. \r\n\r\nConsidering this I do not think we can merge this check with the above code. "", 'comment_created': datetime.datetime(2021, 6, 25, 19, 37, 36, tzinfo=datetime.timezone.utc), 'commenter': 'akshitpatel01', 'type': 'User'}, {'comment_id': 659651736, 'comment_body': 'makes sense\r\n', 'comment_created': datetime.datetime(2021, 6, 28, 10, 3, 36, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}]","[{'commit_sha': '46d1156679b04abb275cfe9659d594b21aed54fb', 'committer_username': 'akshitpatel01', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 29, 12, 14, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a82b879d6678fe6fa2bd182025f5c6fad3dc1ba', 'committer_username': 'akshitpatel01', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 29, 12, 14, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c9e8cd8f7cecd9915fdc2c0ef4078f744c524a5', 'committer_username': 'akshitpatel01', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 29, 12, 14, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '199242a80cb5764bb168fe752bbd97e01fab2ea2', 'committer_username': 'akshitpatel01', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 29, 12, 14, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d88a1dea0016b46dd178cfd33d4107dff2ff5cd', 'committer_username': 'akshitpatel01', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 29, 12, 14, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '836a075d694c5d0d8e0e0f359dbc7ac69c950944', 'committer_username': 'akshitpatel01', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 29, 12, 14, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4de564a78511de3eb1d972ed249f54d31f1d06d', 'committer_username': 'akshitpatel01', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 29, 12, 14, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad12d2cd32e25e06685bd2d63f7527edb47878c2', 'committer_username': 'akshitpatel01', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 29, 12, 14, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3bf61d799d0666c134f299c2334580c830f184cc', 'committer_username': 'akshitpatel01', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 29, 12, 14, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c9d7c02b6fa30e40d0fc05be06073e1caab9c77e', 'committer_username': 'akshitpatel01', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 29, 12, 14, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '58ddb995d3e3b87a445ff404a5c9dc1f3281231e', 'committer_username': 'akshitpatel01', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 29, 12, 14, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7238f2d283285ab02a4b45cf9a8c52ca41ebc654', 'committer_username': 'akshitpatel01', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 29, 12, 14, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ae94fb6d8b3ee5974e2263cb84b7a45c5ef125e', 'committer_username': 'akshitpatel01', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 29, 12, 14, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ca39a9bf12df75382c750772c388e37662b9628', 'committer_username': 'akshitpatel01', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 29, 12, 14, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c0878dc4c6fe30e568e019c5e424a3e83b245fe', 'committer_username': 'akshitpatel01', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 29, 12, 14, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b70ecc12aceb811720efa517bc9ea3fb6b678bc6', 'committer_username': 'DvdMgr', 'committer_name': 'Davide Magrin', 'committer_email': None, 'commit_date': datetime.datetime(2012, 10, 15, 15, 16, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f40ea4564eeaabde6718ec753f2e84b0f8b789a0', 'committer_username': 'DvdMgr', 'committer_name': 'Davide Magrin', 'committer_email': None, 'commit_date': datetime.datetime(2012, 10, 15, 15, 16, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '32a5c8a479af6b287aacfb38d482a6d320258cad', 'committer_username': 'DvdMgr', 'committer_name': 'Davide Magrin', 'committer_email': None, 'commit_date': datetime.datetime(2012, 10, 15, 15, 16, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ead5572a1edfb9ffc7e11a67b7b2e141f0bc5cc', 'committer_username': 'DvdMgr', 'committer_name': 'Davide Magrin', 'committer_email': None, 'commit_date': datetime.datetime(2012, 10, 15, 15, 16, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8daf6e6518090420d15f40636c7f6b14547d8baa', 'committer_username': 'akshitpatel01', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 29, 12, 14, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97ddd823125804630faaa68136baf0eb7e2ec0fe', 'committer_username': 'akshitpatel01', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 29, 12, 14, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce27d7d2736987466dfc63ad12c6747ce651fd23', 'committer_username': 'akshitpatel01', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 29, 12, 14, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '01c815bd94e7078a54ad5774945a3049cec40738', 'committer_username': 'akshitpatel01', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 29, 12, 14, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bef68ec90dfb96760fb75b3587280d10fee6695b', 'committer_username': 'akshitpatel01', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 29, 12, 14, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'edc35e9a371a63191a55f52757dbae22a4e89085', 'committer_username': 'akshitpatel01', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 29, 12, 14, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '32e601432367d9b2408651e88a2c1dbac974de0e', 'committer_username': 'akshitpatel01', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 29, 12, 14, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be05f6066c8fa691344cbf629094e4b34e77eed4', 'committer_username': 'akshitpatel01', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 29, 12, 14, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '89c1f154f678c0c8a407545b1820054b8a66226b', 'committer_username': 'akshitpatel01', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 29, 12, 14, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '120e6d38016e246bcac2f6dd37194d186ef873de', 'committer_username': 'akshitpatel01', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 29, 12, 14, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ce8de7fc00260116969b0366133b82972a39979', 'committer_username': 'akshitpatel01', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 29, 12, 14, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5172d701461fbe68a06ed2dac0b94cafa57f49d2', 'committer_username': 'akshitpatel01', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 29, 12, 14, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3752ce5744483a72c95dc21a90ad1b1e99fcaa15', 'committer_username': 'akshitpatel01', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 29, 12, 14, 56, tzinfo=datetime.timezone.utc)}]",,32390517,,User,,21,,0,4
683624803,Gsoc phase2,"Hi @DvdMgr, @mattia-lecci,
I have added a new example logging-example2.py and the phase 2 functions process_logs, insert_logs, parse_logs, and filter_logs. It would be great if you could review this code. 
",False,51,https://api.github.com/repos/signetlabdei/sem/pulls/51,https://github.com/signetlabdei/sem/pull/51,closed,666,6,6,29,15,117,0,0,[],2021-07-05 11:34:52+00:00,2021-07-28 07:52:44+00:00,1973872.0,"22 days, 20:17:52","[{'comment_id': 665193418, 'comment_body': 'already imported at line 4', 'comment_created': datetime.datetime(2021, 7, 7, 9, 15, 35, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 665195304, 'comment_body': ""these comments are generally hard to maintain. furthermore, the user shouldn't care HOW things are done, but only about WHAT is done\r\n```suggestion\r\n    tinyDB instance.\r\n```"", 'comment_created': datetime.datetime(2021, 7, 7, 9, 18, 8, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 665195972, 'comment_body': ""* tinydb -> TinyDB?\r\n* unclear: (in table 'logs')\r\n* missing a space before (in table 'logs')"", 'comment_created': datetime.datetime(2021, 7, 7, 9, 19, 6, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 665196782, 'comment_body': 'python\'s built-in class for strings is actually called ""str""\r\n```suggestion\r\n        log_file (str): Path to where the log file is stored\r\n```', 'comment_created': datetime.datetime(2021, 7, 7, 9, 20, 10, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 665201387, 'comment_body': 'what if a different process created /tmp/logs.json?\r\ne.g., what if i want to analyze 2 logs with 2 separate instances of sem?\r\nI think we should check whether the file already exist or create a unique name (hashing? timestamp?)', 'comment_created': datetime.datetime(2021, 7, 7, 9, 26, 13, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 665201596, 'comment_body': 'missing return variable', 'comment_created': datetime.datetime(2021, 7, 7, 9, 26, 28, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 665201988, 'comment_body': '```suggestion\r\n    Return a list of dictionaries with each dictionary having the following\r\n    format:\r\n```', 'comment_created': datetime.datetime(2021, 7, 7, 9, 26, 58, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 665203219, 'comment_body': ""```suggestion\r\n    dictionary = {\r\n        'Time': timestamp, # float\r\n        'Context': context/nodeId, # str\r\n        'Component': log component, # str\r\n        'Function': function name, # str\r\n        'Arguments': function arguments, # str\r\n        'Level': log level, # str\r\n        'Message': log message # str\r\n    }\r\n```"", 'comment_created': datetime.datetime(2021, 7, 7, 9, 28, 27, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 665203435, 'comment_body': 'return?', 'comment_created': datetime.datetime(2021, 7, 7, 9, 28, 42, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 665217752, 'comment_body': '```suggestion\r\n            # group[12] = Message\r\n```', 'comment_created': datetime.datetime(2021, 7, 7, 9, 47, 56, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 665220554, 'comment_body': 'trying to understand bit by bit:\r\n* Time: `\\+(\\d+\\.\\d{9})s`. You are assuming that it starts with a + sign (never seen a - sign, does anyone knows whether it\'s a thing?), at least one digit, a ""."" and exactly 9 digits. Please note that the time resolution can be changed in ns-3 (see [here](https://www.nsnam.org/docs/release/3.18/doxygen/classns3_1_1_time.html#ac89165ba7715b66017a49c718f4aef09)). I would propose: `([+-]?\\d+\\.\\d+)s`\r\n* Context:` ((?:\\d+|-\\d+)( \\[node\\ (?:\\d+|-\\d+)])?)`. Need explanation\r\n* Component: `([a-zA-Z_]+)`. Why not `(\\w+)` instead? E.g., digits can be part of a component\'s name\r\n* Function: same as component\r\n* Arguments: `\\((.*)\\)`. I would suggest a non-greedy matching: `\\((.*?)\\)`\r\n* Level: `\\[((\\w+)( )?)\\]`. Depending on the log level, some spaces might be present (and should not be captured..). I propose: `\\[(\\w+)\\s*\\]`\r\n \r\nClarification: why isn\'t the last group mandatory? I mean this: (: \\[((\\w+)( )?)\\] (.*))?\r\n\r\nAlso, why all the different subgroups? E.g., 4,8,9,11 from your description above', 'comment_created': datetime.datetime(2021, 7, 7, 9, 51, 40, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 665226249, 'comment_body': ""Furthermore, since the same regex is used many times, it's better to first compile it and then match it\r\ncheck [here](https://docs.python.org/3/library/re.html#re.compile)"", 'comment_created': datetime.datetime(2021, 7, 7, 9, 59, 5, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 665227671, 'comment_body': 'this note in not necessary if the correct docstring format is used (e.g., describe the returned value(s) whenever values are indeed returned)', 'comment_created': datetime.datetime(2021, 7, 7, 10, 1, 10, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 665227983, 'comment_body': '```suggestion\r\n        logs (list): A list of logs to insert in database. Logs are described as a python dict.\r\n```', 'comment_created': datetime.datetime(2021, 7, 7, 10, 1, 38, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 665228974, 'comment_body': '```suggestion\r\n        # Only check if the keys are consistent\r\n```', 'comment_created': datetime.datetime(2021, 7, 7, 10, 3, 5, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 665230133, 'comment_body': '[] and {} are mutable. initialize with None', 'comment_created': datetime.datetime(2021, 7, 7, 10, 4, 47, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 665231229, 'comment_body': 'what if the context is extended?', 'comment_created': datetime.datetime(2021, 7, 7, 10, 6, 31, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 665232593, 'comment_body': '```suggestion\r\n        if isinstance(level, str):\r\n```', 'comment_created': datetime.datetime(2021, 7, 7, 10, 8, 34, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 665232651, 'comment_body': 'same', 'comment_created': datetime.datetime(2021, 7, 7, 10, 8, 39, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 665283098, 'comment_body': 'as above: check if None. [] and {} are mutable and should thus not be the default initializations', 'comment_created': datetime.datetime(2021, 7, 7, 11, 28, 16, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 665284279, 'comment_body': '```suggestion\r\n    if time_begin is not None:\r\n```', 'comment_created': datetime.datetime(2021, 7, 7, 11, 30, 11, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 665284610, 'comment_body': 'same', 'comment_created': datetime.datetime(2021, 7, 7, 11, 30, 45, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 665285556, 'comment_body': 'also time begin/end would be better with None initialization for clarity', 'comment_created': datetime.datetime(2021, 7, 7, 11, 32, 22, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 665385824, 'comment_body': '```suggestion\r\nlog_components = {\r\n```', 'comment_created': datetime.datetime(2021, 7, 7, 13, 45, 5, tzinfo=datetime.timezone.utc), 'commenter': 'DvdMgr', 'type': 'User'}, {'comment_id': 665386070, 'comment_body': '```suggestion\r\n# log_components = \'NS_LOG=""PowerAdaptationDistance=debug:ParfWifiManager=info""\'\r\n```', 'comment_created': datetime.datetime(2021, 7, 7, 13, 45, 19, tzinfo=datetime.timezone.utc), 'commenter': 'DvdMgr', 'type': 'User'}, {'comment_id': 665386368, 'comment_body': '```suggestion\r\n    runs=runs, log_components=log_components)\r\n```', 'comment_created': datetime.datetime(2021, 7, 7, 13, 45, 41, tzinfo=datetime.timezone.utc), 'commenter': 'DvdMgr', 'type': 'User'}, {'comment_id': 665388878, 'comment_body': 'Also, it might make sense to clean up after we are done!', 'comment_created': datetime.datetime(2021, 7, 7, 13, 48, 33, tzinfo=datetime.timezone.utc), 'commenter': 'DvdMgr', 'type': 'User'}, {'comment_id': 665400765, 'comment_body': ""Terminology is important here: a _level_ is something like `level_debug` to identify the _severity classes_ `debug`, `warn`, and `error`. In this case, it doesn't make that much sense to allow for multiple levels, since they are typically used one at a time. \r\n\r\nWhich is supported? Both? Best to state it clearly in the documentation!"", 'comment_created': datetime.datetime(2021, 7, 7, 14, 0, 55, tzinfo=datetime.timezone.utc), 'commenter': 'DvdMgr', 'type': 'User'}, {'comment_id': 665408958, 'comment_body': ""This should be very well documented in the docstring: it is confusing to effectively provide two filter knobs that deal with logging levels/severity classes. We should state clearly that `level` is a global filter, and `components` can be used in addition to that. Even then, it might be better to provide some examples, since the interaction might not be easy to understand: what happens if I define `level_debug` (or `[debug, warn, error]`) as a `level` and then ask for `components: {'componentA': ['debug']}`? Will I see only the `debug` class for `componentA`? Or will I see `debug`, `warn`, and `error`?"", 'comment_created': datetime.datetime(2021, 7, 7, 14, 9, 33, tzinfo=datetime.timezone.utc), 'commenter': 'DvdMgr', 'type': 'User'}, {'comment_id': 666682546, 'comment_body': '> Time: \\+(\\d+\\.\\d{9})s. You are assuming that it starts with a + sign (never seen a - sign, does anyone knows whether it\'s a thing?), at least one digit, a ""."" and exactly 9 digits. Please note that the time resolution can be changed in ns-3 (see here). I would propose: ([+-]?\\d+\\.\\d+)s\r\n\r\nI am not aware of a log starting with a \'-\' sign. Also, if the resolution can be modified, your suggestion seems the best option. \r\n\r\n> Context: ((?:\\d+|-\\d+)( \\[node\\ (?:\\d+|-\\d+)])?). Need explanation\r\n\r\n(?:\\d+|-\\d+) - The nodeID. Can be a positive or a negative number.\r\n( \\[node\\ (?:\\d+|-\\d+)])?) - This is to accommodate [NS_LOG_APPEND_CONTEXT](https://www.nsnam.org/doxygen/group__logging.html#gabe50035652d407c40bdaef78214c4955).\r\n\r\n> Component: ([a-zA-Z_]+). Why not (\\w+) instead? E.g., digits can be part of a component\'s name\r\n\r\nNo current log component of ns-3 has a digit. But technically the log component name is just a string so it makes sense to allow digits. \r\n\r\n> Clarification: why isn\'t the last group mandatory? I mean this: (: [((\\w+)( )?)] (.*))?\r\n\r\nIn my simulations, it seems NS_LOG_FUNCTION does not print the \'[LEVEL] Message\'. This is why I made this last regex optional. \r\n\r\n>Also, why all the different subgroups? E.g., 4,8,9,11 from your description above\r\n\r\nI thought it would be less error-prone to break everything into subgroups and then use the subgroups needed. \r\n\r\n', 'comment_created': datetime.datetime(2021, 7, 9, 5, 34, 40, tzinfo=datetime.timezone.utc), 'commenter': 'akshitpatel01', 'type': 'User'}, {'comment_id': 666684264, 'comment_body': 'Regex subgroup 2 should only match the nodeID. If the context is extended, subgroup 3 should match this.', 'comment_created': datetime.datetime(2021, 7, 9, 5, 39, 44, tzinfo=datetime.timezone.utc), 'commenter': 'akshitpatel01', 'type': 'User'}, {'comment_id': 666686754, 'comment_body': 'For now, this supports only the severity classes. I will mention this in the documentation. ', 'comment_created': datetime.datetime(2021, 7, 9, 5, 46, 42, tzinfo=datetime.timezone.utc), 'commenter': 'akshitpatel01', 'type': 'User'}, {'comment_id': 667429344, 'comment_body': 'Updated regex in [2cc7a6e](https://github.com/signetlabdei/sem/pull/51/commits/2cc7a6e9e1cc393d65621d02a9f4aabcc97425f6).', 'comment_created': datetime.datetime(2021, 7, 11, 6, 20, 4, tzinfo=datetime.timezone.utc), 'commenter': 'akshitpatel01', 'type': 'User'}, {'comment_id': 667429473, 'comment_body': 'Fixed in [faed867](https://github.com/signetlabdei/sem/pull/51/commits/faed8675f4438bd4a288db448e56897e2e343768).', 'comment_created': datetime.datetime(2021, 7, 11, 6, 21, 21, tzinfo=datetime.timezone.utc), 'commenter': 'akshitpatel01', 'type': 'User'}, {'comment_id': 667432571, 'comment_body': 'Fixed terminology in [236ab77](https://github.com/signetlabdei/sem/pull/51/commits/236ab77d9240bf286834426c28d522b2beca030e).', 'comment_created': datetime.datetime(2021, 7, 11, 6, 53, 6, tzinfo=datetime.timezone.utc), 'commenter': 'akshitpatel01', 'type': 'User'}, {'comment_id': 667787968, 'comment_body': ""i'm not sure if this is being too picky, but dictionary keys are usually lower case (lower snake case to be precise). any opinion @DvdMgr ?"", 'comment_created': datetime.datetime(2021, 7, 12, 9, 50, 25, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 667793348, 'comment_body': ""rationale: i think a user might only want to capture whatever is inside the square brackets, and capturing the whole optional extended context (including brackets and space) is kind of annoying from a user's perspective.\r\nsame for the last part.\r\nNote: i'm not 100% sure whether this works, please check\r\n```suggestion\r\n    regex = re.compile(r'[\\+\\-]?(\\d+\\.\\d+)s ((?:\\d+|-\\d+)) (?:\\[(.*?)\\] )?(\\w+):(\\w+)\\((.*?)\\)(?:: \\[(\\w+)\\s*\\] (.*))?')\r\n```"", 'comment_created': datetime.datetime(2021, 7, 12, 9, 58, 10, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 667890103, 'comment_body': ""I agree with you. But after our last call, I searched online and it seems that having more groups slows down Regex matching and hence I did not add a new group only to remove the outer square brackets. But if we want to do this we can do so easily by using the following regex:\r\n`regex = re.compile(r'[\\+\\-]?(\\d+\\.\\d+)s ((?:\\d+|-\\d+)) (\\[(.*?)\\] )?(\\w+):(\\w+)\\((.*?)\\)(: \\[(\\w+)\\s*\\] (.*))?')`\r\n\r\n> same for the last part.\r\n\r\nThis last part space is not captured in any group. I do not think we need to change this. "", 'comment_created': datetime.datetime(2021, 7, 12, 12, 33, 59, tzinfo=datetime.timezone.utc), 'commenter': 'akshitpatel01', 'type': 'User'}, {'comment_id': 667943900, 'comment_body': '> I agree with you. But after our last call, I searched online and it seems that having more groups slows down Regex matching and hence I did not add a new group only to remove the outer square brackets. But if we want to do this we can do so easily by using the following regex:\r\n> `regex = re.compile(r\'[\\+\\-]?(\\d+\\.\\d+)s ((?:\\d+|-\\d+)) (\\[(.*?)\\] )?(\\w+):(\\w+)\\((.*?)\\)(: \\[(\\w+)\\s*\\] (.*))?\')`\r\n\r\nSo you suggest to avoid using a non-capturing group? From [here](https://docs.python.org/3/howto/regex.html#non-capturing-and-named-groups) it looks like there\'s no difference in performance from one to the other:\r\n_""It should be mentioned that there’s no performance difference in searching between capturing and non-capturing groups; neither form is any faster than the other.""_\r\n\r\n> This last part space is not captured in any group. I do not think we need to change this.\r\n\r\nHere I was basically proposing to use a non-capturing group since we do not need it', 'comment_created': datetime.datetime(2021, 7, 12, 13, 45, 19, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 667983029, 'comment_body': 'I misunderstood capturing and non-capturing groups (This is what I referred to [here](https://stackoverflow.com/questions/41444807/why-is-regex-search-slower-with-capturing-groups-in-python#:~:text=When%20timing%20performance%20of%20two,operations%20internally%20in%20regex%20module.)). I completely agree with your proposed regex now. ', 'comment_created': datetime.datetime(2021, 7, 12, 14, 30, 25, tzinfo=datetime.timezone.utc), 'commenter': 'akshitpatel01', 'type': 'User'}, {'comment_id': 670575916, 'comment_body': ""to improve readibility, we could also think of [named groups](https://docs.python.org/3/howto/regex.html#non-capturing-and-named-groups). something like this:\r\n```python\r\n    time_re = r'[\\+\\-]?(?P<time>\\d+\\.\\d+)s'\r\n    context_re = r'(?P<context>(?:\\d+|-\\d+))'\r\n    # etc\r\n    regex = re.compile(r'^' + time_re + context_re + ... + r'$')\r\n```\r\nso you can later reference your groups directly, e.g.,\r\n```python\r\nif groups['severity_class'] is None and groups['message'] is None and groups['extended_context'] is None:\r\n   ...\r\n```\r\n\r\nNOTE: it's just a suggestion, feel free to avoid adding extra work if you think it unnecessary :)"", 'comment_created': datetime.datetime(2021, 7, 15, 15, 35, 2, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 670577264, 'comment_body': ""could you explain? if the severity is function those three groups should indeed be empty, shouldn't they?"", 'comment_created': datetime.datetime(2021, 7, 15, 15, 36, 28, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 670578037, 'comment_body': 'unnecessary? otherwise modify as\r\n```suggestion\r\n            if message is not None:\r\n                message = message.rstrip()\r\n```', 'comment_created': datetime.datetime(2021, 7, 15, 15, 37, 20, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 670578367, 'comment_body': 'could you clarify?', 'comment_created': datetime.datetime(2021, 7, 15, 15, 37, 42, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 670580191, 'comment_body': 'fix everywhere\r\n```suggestion\r\n        severity_class (list): A list of log severity classes based on which\r\n```', 'comment_created': datetime.datetime(2021, 7, 15, 15, 39, 51, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 670583951, 'comment_body': 'separate the two ifs\r\n```python\r\nif sevirity_class is not None:\r\n   # do stuff\r\nif components is not None:\r\n   # do stuff\r\n```\r\n\r\nAlso, check if the input is of the correct type, e.g.,\r\n```python\r\nif isinstance(sevirity_class, str):\r\n    sevirity_class = [sevirity_class]\r\nelif isinstance(sevirity_class, str):\r\n    # do nothing\r\nelse:\r\n    raise TypeError() # add useful message\r\n```', 'comment_created': datetime.datetime(2021, 7, 15, 15, 43, 59, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 670586809, 'comment_body': 'this is not reached if the test fails, right?', 'comment_created': datetime.datetime(2021, 7, 15, 15, 47, 5, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 670590817, 'comment_body': 'other suggested tests:\r\n* a log with severity INFO (it should find some spaces between the square brackets, check that they are handled correctly\r\n* also check extended context with node id instead of mac\r\n* check what happens if the log message contains escape characters such as `:`\r\n\r\nI think you already covered most corner cases yourself, good job :)', 'comment_created': datetime.datetime(2021, 7, 15, 15, 51, 30, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 670592725, 'comment_body': 'note: you are reusing these logs in other test functions as well, you might want to make this a global variable (i.e., put it outside the function at the beginning of the test file so that all functions can reach it).\r\nsame goes for expected_list and similar verbose variables', 'comment_created': datetime.datetime(2021, 7, 15, 15, 53, 35, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 670594396, 'comment_body': '```suggestion\r\n    assert len(parse_list) == len(expected_list)\r\n```', 'comment_created': datetime.datetime(2021, 7, 15, 15, 55, 36, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 670596823, 'comment_body': ""assuming expected_list is a global variable\r\n```suggestion\r\n    filter_list = filter_logs(db, context=['1'])\r\n    expected_filter_list = [x for x in expected_list if x['Context']==1] # make sure that this works\r\n    assert len(filter_list) == len(expected_filter_list)\r\n    assert filter_list == expected_filter_list # i'm not sure that you can compare lists of dicts, but i think you get the point of this suggestion\r\n```"", 'comment_created': datetime.datetime(2021, 7, 15, 15, 58, 12, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 670597040, 'comment_body': 'same', 'comment_created': datetime.datetime(2021, 7, 15, 15, 58, 25, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 670597180, 'comment_body': 'same', 'comment_created': datetime.datetime(2021, 7, 15, 15, 58, 34, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 670597253, 'comment_body': 'same', 'comment_created': datetime.datetime(2021, 7, 15, 15, 58, 40, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 670597359, 'comment_body': 'same', 'comment_created': datetime.datetime(2021, 7, 15, 15, 58, 46, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 670597454, 'comment_body': 'same', 'comment_created': datetime.datetime(2021, 7, 15, 15, 58, 52, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 670597671, 'comment_body': 'same', 'comment_created': datetime.datetime(2021, 7, 15, 15, 59, 6, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 670597766, 'comment_body': 'same', 'comment_created': datetime.datetime(2021, 7, 15, 15, 59, 12, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 670597984, 'comment_body': 'same', 'comment_created': datetime.datetime(2021, 7, 15, 15, 59, 25, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 670992006, 'comment_body': 'This definitely seems better. Fixed in [8832ada](https://github.com/signetlabdei/sem/pull/51/commits/8832ada1b275d61faf0fba7c6651c683484c5e93).', 'comment_created': datetime.datetime(2021, 7, 16, 6, 14, 37, tzinfo=datetime.timezone.utc), 'commenter': 'akshitpatel01', 'type': 'User'}, {'comment_id': 670992825, 'comment_body': ""If the severity level of a log is function, then the 'arguments' cannot be empty. This check ensures that condition. "", 'comment_created': datetime.datetime(2021, 7, 16, 6, 16, 45, tzinfo=datetime.timezone.utc), 'commenter': 'akshitpatel01', 'type': 'User'}, {'comment_id': 670994107, 'comment_body': ""As far I understand, for level=function, the '[level] message' is not printed in the output. I just wanted to verify with you both if this is actually the case. "", 'comment_created': datetime.datetime(2021, 7, 16, 6, 19, 51, tzinfo=datetime.timezone.utc), 'commenter': 'akshitpatel01', 'type': 'User'}, {'comment_id': 670998788, 'comment_body': '> separate the two ifs\r\n\r\nI clubbed them together because we have to apply the OR operation between the queries for both these filters, whereas we have to apply AND operator between the queries for all remaining filters.  ', 'comment_created': datetime.datetime(2021, 7, 16, 6, 30, 6, tzinfo=datetime.timezone.utc), 'commenter': 'akshitpatel01', 'type': 'User'}, {'comment_id': 671018072, 'comment_body': 'Yes, this code will not be reached if the test fails. ', 'comment_created': datetime.datetime(2021, 7, 16, 7, 9, 48, tzinfo=datetime.timezone.utc), 'commenter': 'akshitpatel01', 'type': 'User'}, {'comment_id': 671020214, 'comment_body': '> Also, check if the input is of the correct type\r\n\r\nFixed in [404fd9a](https://github.com/signetlabdei/sem/pull/51/commits/404fd9acc107f8a5819a4dc2f8edb6d25e313fa0).', 'comment_created': datetime.datetime(2021, 7, 16, 7, 13, 44, tzinfo=datetime.timezone.utc), 'commenter': 'akshitpatel01', 'type': 'User'}, {'comment_id': 671020367, 'comment_body': 'Fixed in 404fd9a.', 'comment_created': datetime.datetime(2021, 7, 16, 7, 14, 3, tzinfo=datetime.timezone.utc), 'commenter': 'akshitpatel01', 'type': 'User'}, {'comment_id': 671070280, 'comment_body': 'components was check but never used. is there a reason for this?', 'comment_created': datetime.datetime(2021, 7, 16, 8, 36, 44, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 671071347, 'comment_body': ""i'd rather add a real(istic) INFO or WARN example rather than adding spaces after debug, which should never happen"", 'comment_created': datetime.datetime(2021, 7, 16, 8, 38, 31, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 671072809, 'comment_body': 'i still believe that dictionary keys should be in lower case', 'comment_created': datetime.datetime(2021, 7, 16, 8, 40, 50, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 671076218, 'comment_body': ""i'm thinking about maintaining this code. right now it's clear why these regexps should work, but in a few months the sem maintainer(s) (probably davide) might not remember why some parts might not be there or why they are written in a specific way. it might be useful to add some comments for future maintainability"", 'comment_created': datetime.datetime(2021, 7, 16, 8, 46, 3, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 671630862, 'comment_body': 'Corrected in [c8e8db3](https://github.com/signetlabdei/sem/pull/51/commits/c8e8db3bd1a7d4c1adfe37f1895c4162b57f7e32).', 'comment_created': datetime.datetime(2021, 7, 17, 6, 50, 9, tzinfo=datetime.timezone.utc), 'commenter': 'akshitpatel01', 'type': 'User'}, {'comment_id': 671631436, 'comment_body': '> note: you are reusing these logs in other test functions as well, you might want to make this a global variable (i.e., put it outside the function at the beginning of the test file so that all functions can reach it).\r\nsame goes for expected_list and similar verbose variables\r\n\r\nCorrected in c8e8db3.', 'comment_created': datetime.datetime(2021, 7, 17, 6, 55, 48, tzinfo=datetime.timezone.utc), 'commenter': 'akshitpatel01', 'type': 'User'}, {'comment_id': 671631967, 'comment_body': '> other suggested tests\r\n\r\nAdded in [3dc3eba](https://github.com/signetlabdei/sem/pull/51/commits/3dc3eba078392844de0531e4f4ace7e5336bf241).', 'comment_created': datetime.datetime(2021, 7, 17, 7, 1, 36, tzinfo=datetime.timezone.utc), 'commenter': 'akshitpatel01', 'type': 'User'}, {'comment_id': 671632241, 'comment_body': 'Corrected in c8e8db3.', 'comment_created': datetime.datetime(2021, 7, 17, 7, 4, tzinfo=datetime.timezone.utc), 'commenter': 'akshitpatel01', 'type': 'User'}, {'comment_id': 671632250, 'comment_body': 'Corrected in c8e8db3.', 'comment_created': datetime.datetime(2021, 7, 17, 7, 4, 10, tzinfo=datetime.timezone.utc), 'commenter': 'akshitpatel01', 'type': 'User'}, {'comment_id': 671632260, 'comment_body': 'Corrected in c8e8db3.', 'comment_created': datetime.datetime(2021, 7, 17, 7, 4, 19, tzinfo=datetime.timezone.utc), 'commenter': 'akshitpatel01', 'type': 'User'}, {'comment_id': 671632262, 'comment_body': 'Corrected in c8e8db3.', 'comment_created': datetime.datetime(2021, 7, 17, 7, 4, 23, tzinfo=datetime.timezone.utc), 'commenter': 'akshitpatel01', 'type': 'User'}, {'comment_id': 671632266, 'comment_body': 'Corrected in c8e8db3.', 'comment_created': datetime.datetime(2021, 7, 17, 7, 4, 26, tzinfo=datetime.timezone.utc), 'commenter': 'akshitpatel01', 'type': 'User'}, {'comment_id': 671632269, 'comment_body': 'Corrected in c8e8db3.', 'comment_created': datetime.datetime(2021, 7, 17, 7, 4, 30, tzinfo=datetime.timezone.utc), 'commenter': 'akshitpatel01', 'type': 'User'}, {'comment_id': 671632271, 'comment_body': 'Corrected in c8e8db3.', 'comment_created': datetime.datetime(2021, 7, 17, 7, 4, 33, tzinfo=datetime.timezone.utc), 'commenter': 'akshitpatel01', 'type': 'User'}, {'comment_id': 671632287, 'comment_body': 'Corrected in c8e8db3.', 'comment_created': datetime.datetime(2021, 7, 17, 7, 4, 37, tzinfo=datetime.timezone.utc), 'commenter': 'akshitpatel01', 'type': 'User'}, {'comment_id': 671632304, 'comment_body': 'Corrected in c8e8db3.', 'comment_created': datetime.datetime(2021, 7, 17, 7, 4, 43, tzinfo=datetime.timezone.utc), 'commenter': 'akshitpatel01', 'type': 'User'}, {'comment_id': 671632329, 'comment_body': 'Corrected in c8e8db3.', 'comment_created': datetime.datetime(2021, 7, 17, 7, 4, 47, tzinfo=datetime.timezone.utc), 'commenter': 'akshitpatel01', 'type': 'User'}, {'comment_id': 671632400, 'comment_body': 'Refer [65afd95](https://github.com/signetlabdei/sem/pull/51/commits/65afd95372eaa48713eea1d6158b3b3d7d9306a9).', 'comment_created': datetime.datetime(2021, 7, 17, 7, 5, 50, tzinfo=datetime.timezone.utc), 'commenter': 'akshitpatel01', 'type': 'User'}, {'comment_id': 671633206, 'comment_body': 'Fixed in [df1ece8](https://github.com/signetlabdei/sem/pull/51/commits/df1ece8ea8cc4ce1c3a3c5ea67d101fce2b060c5).', 'comment_created': datetime.datetime(2021, 7, 17, 7, 13, 17, tzinfo=datetime.timezone.utc), 'commenter': 'akshitpatel01', 'type': 'User'}, {'comment_id': 671640265, 'comment_body': 'Added in [7f32644](https://github.com/signetlabdei/sem/pull/51/commits/7f326449db9c0fb5ca76f4197a9dd236f5dcb0b3).', 'comment_created': datetime.datetime(2021, 7, 17, 7, 56, 47, tzinfo=datetime.timezone.utc), 'commenter': 'akshitpatel01', 'type': 'User'}, {'comment_id': 674579273, 'comment_body': 'please also add a short description for ^$', 'comment_created': datetime.datetime(2021, 7, 22, 7, 59, 31, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 674586457, 'comment_body': ""All built-in, non-system-exiting exceptions are derived from `Exception`. All user-defined exceptions should also be derived from this class.\r\nI have one doubt: does the try block make tests succeed by default?\r\n```suggestion\r\n    except Exception as e:\r\n        print('Test for parse_logs failed')\r\n        print(e)\r\n```"", 'comment_created': datetime.datetime(2021, 7, 22, 8, 11, 10, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 674587164, 'comment_body': 'same as above', 'comment_created': datetime.datetime(2021, 7, 22, 8, 12, 22, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 674588522, 'comment_body': ""you're always inserting lists of strings as arguments, have you checked the other possibilities?\r\nI.e., string, number, list of numbers\r\nTests should also catch that erratic behavior, and it should be done for all input arguments (you never know if a typo or a future distraction broke just one of them)"", 'comment_created': datetime.datetime(2021, 7, 22, 8, 14, 24, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 674593275, 'comment_body': ""Is this still needed? I think we agreed to leave it, and make it the other functions' responsibility to clean up"", 'comment_created': datetime.datetime(2021, 7, 22, 8, 21, 28, tzinfo=datetime.timezone.utc), 'commenter': 'DvdMgr', 'type': 'User'}, {'comment_id': 674594697, 'comment_body': ""```suggestion\r\n        'extended_context': ,   #str\r\n```"", 'comment_created': datetime.datetime(2021, 7, 22, 8, 23, 43, tzinfo=datetime.timezone.utc), 'commenter': 'DvdMgr', 'type': 'User'}, {'comment_id': 674596387, 'comment_body': 'I like this way of splitting up the regex :+1: ', 'comment_created': datetime.datetime(2021, 7, 22, 8, 26, 20, tzinfo=datetime.timezone.utc), 'commenter': 'DvdMgr', 'type': 'User'}, {'comment_id': 674599192, 'comment_body': 'I think this comment is not relevant anymore since we are now using named groups \r\n```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 7, 22, 8, 30, 19, tzinfo=datetime.timezone.utc), 'commenter': 'DvdMgr', 'type': 'User'}, {'comment_id': 674607303, 'comment_body': '```suggestion\r\n                warnings.warn(""Log format is not consistent with prefix_all. Skipping log \'%s\'"" % log, RuntimeWarning, stacklevel=2)\r\n```\r\nAdding the `stacklevel` argument makes `warn` only print the message, without the line of code that originated the warning.', 'comment_created': datetime.datetime(2021, 7, 22, 8, 42, 14, tzinfo=datetime.timezone.utc), 'commenter': 'DvdMgr', 'type': 'User'}, {'comment_id': 674608937, 'comment_body': ""```suggestion\r\n    db.table('logs').insert_multiple(logs)\r\n```\r\nI agree that `deepcopy` can be removed from here! Good catch :)"", 'comment_created': datetime.datetime(2021, 7, 22, 8, 44, 42, tzinfo=datetime.timezone.utc), 'commenter': 'DvdMgr', 'type': 'User'}, {'comment_id': 674609641, 'comment_body': '```suggestion\r\n        db (TinyDB instance): A TinyDB instance where the logs are inserted.\r\n```', 'comment_created': datetime.datetime(2021, 7, 22, 8, 45, 40, tzinfo=datetime.timezone.utc), 'commenter': 'DvdMgr', 'type': 'User'}, {'comment_id': 674610920, 'comment_body': ""Is this a directory or the `.json` file? In case it's just the `json` file, it makes sense to rename this variable to something like `db_path`."", 'comment_created': datetime.datetime(2021, 7, 22, 8, 47, 37, tzinfo=datetime.timezone.utc), 'commenter': 'DvdMgr', 'type': 'User'}, {'comment_id': 674613300, 'comment_body': ""What happens if this function is called with `/` as an argument? Will it try to remove everything in the root directory of the system? It might be better to only call `os.remove` on the passed path if it's a `.json` file, to be on the safe side."", 'comment_created': datetime.datetime(2021, 7, 22, 8, 51, 9, tzinfo=datetime.timezone.utc), 'commenter': 'DvdMgr', 'type': 'User'}, {'comment_id': 674614026, 'comment_body': '```suggestion\r\n    particular severity class using the components dictionary.\r\n```', 'comment_created': datetime.datetime(2021, 7, 22, 8, 52, 10, tzinfo=datetime.timezone.utc), 'commenter': 'DvdMgr', 'type': 'User'}, {'comment_id': 674614478, 'comment_body': '```suggestion\r\n        db (TinyDB instance): A TinyDB instance where the logs are inserted.\r\n```', 'comment_created': datetime.datetime(2021, 7, 22, 8, 52, 49, tzinfo=datetime.timezone.utc), 'commenter': 'DvdMgr', 'type': 'User'}, {'comment_id': 674616333, 'comment_body': 'This phrasing makes it seem like the filtered logs will be inserted in `db`. Suggest to change it to something like ""The TinyDB instance containing the logs to filter"".', 'comment_created': datetime.datetime(2021, 7, 22, 8, 55, 23, tzinfo=datetime.timezone.utc), 'commenter': 'DvdMgr', 'type': 'User'}, {'comment_id': 674617391, 'comment_body': '```suggestion\r\n    # Assert that the passed parameters are of valid type.\r\n```', 'comment_created': datetime.datetime(2021, 7, 22, 8, 56, 54, tzinfo=datetime.timezone.utc), 'commenter': 'DvdMgr', 'type': 'User'}, {'comment_id': 674618322, 'comment_body': '```suggestion\r\n    if severity_class is not None:\r\n```', 'comment_created': datetime.datetime(2021, 7, 22, 8, 58, 14, tzinfo=datetime.timezone.utc), 'commenter': 'DvdMgr', 'type': 'User'}, {'comment_id': 674618616, 'comment_body': 'Also adjust indentation of following lines accordingly!', 'comment_created': datetime.datetime(2021, 7, 22, 8, 58, 35, tzinfo=datetime.timezone.utc), 'commenter': 'DvdMgr', 'type': 'User'}, {'comment_id': 674737441, 'comment_body': ""As discussed during the call, it might be better to make a copy of components before modifying it, so that we don't touch the dictionary outside of the function. The same applies to the other arguments, too."", 'comment_created': datetime.datetime(2021, 7, 22, 12, 9, 51, tzinfo=datetime.timezone.utc), 'commenter': 'DvdMgr', 'type': 'User'}, {'comment_id': 674748220, 'comment_body': '```suggestion\r\n    # Build TinyDB query based on the passed parameters\r\n```', 'comment_created': datetime.datetime(2021, 7, 22, 12, 26, 4, tzinfo=datetime.timezone.utc), 'commenter': 'DvdMgr', 'type': 'User'}, {'comment_id': 674943449, 'comment_body': 'from [here](https://docs.python.org/3/library/os.html#os.remove):\r\nIf path is a directory, an IsADirectoryError is raised.', 'comment_created': datetime.datetime(2021, 7, 22, 15, 56, 32, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 675964989, 'comment_body': ""> I have one doubt: does the try block make tests succeed by default?\r\n\r\nThis might happen. To avoid this I changed try;except;finally to try;finally. Now, the tests will not succeed by default and the 'finally' segment will always be executed. "", 'comment_created': datetime.datetime(2021, 7, 24, 7, 50, 24, tzinfo=datetime.timezone.utc), 'commenter': 'akshitpatel01', 'type': 'User'}, {'comment_id': 675968990, 'comment_body': 'Added in [1d87256](https://github.com/signetlabdei/sem/pull/51/commits/1d87256a25d9aff5dab4c1b31badbcb2f6bd67f4). ', 'comment_created': datetime.datetime(2021, 7, 24, 8, 30, 7, tzinfo=datetime.timezone.utc), 'commenter': 'akshitpatel01', 'type': 'User'}, {'comment_id': 675969017, 'comment_body': 'Fixed in 1d87256.', 'comment_created': datetime.datetime(2021, 7, 24, 8, 30, 18, tzinfo=datetime.timezone.utc), 'commenter': 'akshitpatel01', 'type': 'User'}, {'comment_id': 675969024, 'comment_body': 'Fixed in 1d87256.', 'comment_created': datetime.datetime(2021, 7, 24, 8, 30, 25, tzinfo=datetime.timezone.utc), 'commenter': 'akshitpatel01', 'type': 'User'}, {'comment_id': 675969031, 'comment_body': 'Fixed in 1d87256.', 'comment_created': datetime.datetime(2021, 7, 24, 8, 30, 37, tzinfo=datetime.timezone.utc), 'commenter': 'akshitpatel01', 'type': 'User'}, {'comment_id': 675973044, 'comment_body': ""> It might be better to only call os.remove on the passed path if it's a .json file, to be on the safe side.\r\n\r\nI added a check, just to be sure.\r\n"", 'comment_created': datetime.datetime(2021, 7, 24, 9, 7, 55, tzinfo=datetime.timezone.utc), 'commenter': 'akshitpatel01', 'type': 'User'}, {'comment_id': 677170847, 'comment_body': 'This does not copy the arguments! Use deepcopy here:\r\n\r\n```suggestion\r\n    severity_class_copy = copy.deepcopy(severity_class)\r\n    components_copy = copy.deepcopy(components)\r\n    function_copy = copy.deepcopy(function)\r\n    context_copy = copy.deepcopy(context)\r\n```\r\n\r\nI find the selected answere [here](https://stackoverflow.com/questions/575196/why-can-a-function-modify-some-arguments-as-perceived-by-the-caller-but-not-oth) provides a good explanation of how to think about this.', 'comment_created': datetime.datetime(2021, 7, 27, 6, 57, 31, tzinfo=datetime.timezone.utc), 'commenter': 'DvdMgr', 'type': 'User'}, {'comment_id': 677171197, 'comment_body': ""```suggestion\r\n    print(utils.filter_logs(db, severity_class='debug',\r\n```"", 'comment_created': datetime.datetime(2021, 7, 27, 6, 58, 9, tzinfo=datetime.timezone.utc), 'commenter': 'DvdMgr', 'type': 'User'}, {'comment_id': 677981294, 'comment_body': 'I completely overlooked this. Thanks for pointing this out!', 'comment_created': datetime.datetime(2021, 7, 28, 5, 21, 8, tzinfo=datetime.timezone.utc), 'commenter': 'akshitpatel01', 'type': 'User'}]","[{'commit_sha': '54c20c5d27243761b15f19634741f344554f3b27', 'committer_username': 'akshitpatel01', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 29, 12, 14, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f12f04ec2bd4d7745b6c0f92d36e78e1c023c906', 'committer_username': 'akshitpatel01', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 29, 12, 14, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d2e671f7b276cf8bfa937d338964374a72f1e87', 'committer_username': 'akshitpatel01', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 29, 12, 14, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c3c58a994638538b820af045559cddd1b205bc3', 'committer_username': 'akshitpatel01', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 29, 12, 14, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '848bf13650191bc868882756f2024a873fc92cd0', 'committer_username': 'akshitpatel01', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 29, 12, 14, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4b6fc15e2991798067036e624fd5a5510bfb0ac', 'committer_username': 'akshitpatel01', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 29, 12, 14, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2cc7a6e9e1cc393d65621d02a9f4aabcc97425f6', 'committer_username': 'akshitpatel01', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 29, 12, 14, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'faed8675f4438bd4a288db448e56897e2e343768', 'committer_username': 'akshitpatel01', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 29, 12, 14, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '236ab77d9240bf286834426c28d522b2beca030e', 'committer_username': 'akshitpatel01', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 29, 12, 14, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '950124b09f7c8ce2c313b62b01468660991c972d', 'committer_username': 'akshitpatel01', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 29, 12, 14, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e5171fe66beb15aa772ae3e79d31ab356a0612c', 'committer_username': 'akshitpatel01', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 29, 12, 14, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b06c7b6973fa6d123f45b94162148c9844774727', 'committer_username': 'akshitpatel01', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 29, 12, 14, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd39ea564649fa6a10077742c32ac2f71d9418cd8', 'committer_username': 'akshitpatel01', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 29, 12, 14, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d35daeca256491c1097e4f6bee6449f8ed3e237', 'committer_username': 'akshitpatel01', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 29, 12, 14, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8832ada1b275d61faf0fba7c6651c683484c5e93', 'committer_username': 'akshitpatel01', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 29, 12, 14, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '404fd9acc107f8a5819a4dc2f8edb6d25e313fa0', 'committer_username': 'akshitpatel01', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 29, 12, 14, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '473227d07cc09566cee4ee06ff191e657b4abfe3', 'committer_username': 'akshitpatel01', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 29, 12, 14, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '65afd95372eaa48713eea1d6158b3b3d7d9306a9', 'committer_username': 'akshitpatel01', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 29, 12, 14, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d0afbb484f1a3ee5d03792c452a4c41e0fd5d29', 'committer_username': 'akshitpatel01', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 29, 12, 14, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8e8db3bd1a7d4c1adfe37f1895c4162b57f7e32', 'committer_username': 'akshitpatel01', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 29, 12, 14, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3dc3eba078392844de0531e4f4ace7e5336bf241', 'committer_username': 'akshitpatel01', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 29, 12, 14, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df1ece8ea8cc4ce1c3a3c5ea67d101fce2b060c5', 'committer_username': 'akshitpatel01', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 29, 12, 14, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f326449db9c0fb5ca76f4197a9dd236f5dcb0b3', 'committer_username': 'akshitpatel01', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 29, 12, 14, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d87256a25d9aff5dab4c1b31badbcb2f6bd67f4', 'committer_username': 'akshitpatel01', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 29, 12, 14, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '343258d4f50ff49af48afbba2cbaf9e7a114a674', 'committer_username': 'akshitpatel01', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 29, 12, 14, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '676724d997816d0baea05a76b3fa4108c96842d9', 'committer_username': 'akshitpatel01', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 29, 12, 14, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c06ee22144b0ee08b73f6680a1c7b958898a52e5', 'committer_username': 'akshitpatel01', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 29, 12, 14, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd5796a62556175e84a9822284e52fb08f2288e32', 'committer_username': 'akshitpatel01', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 29, 12, 14, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb310f494e5b043101a7df23731dcb2cd045f4b3', 'committer_username': 'akshitpatel01', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 29, 12, 14, 56, tzinfo=datetime.timezone.utc)}]",,32390517,,User,,21,,0,4
712774129,Gsoc2021 - Phase 3,,False,54,https://api.github.com/repos/signetlabdei/sem/pulls/54,https://github.com/signetlabdei/sem/pull/54,open,902,15,13,33,1,33,0,0,[],2021-08-14 12:56:49+00:00,,0.0,,"[{'comment_id': 692819370, 'comment_body': '```suggestion\r\nThe objective of this interactive dashboard is to allow users to visualize the logs generated by ns-3 efficiently. \r\n```', 'comment_created': datetime.datetime(2021, 8, 20, 9, 49, 56, tzinfo=datetime.timezone.utc), 'commenter': 'DvdMgr', 'type': 'User'}, {'comment_id': 692819696, 'comment_body': ""```suggestion\r\nAll the filter values in the dropdown are populated (according to the log file passed) as the dashboard first initializes. The dropdown filters have an inbuilt search box as well as 'Select All' and 'Deselect All' buttons. A few points to note about the filters:\r\n```"", 'comment_created': datetime.datetime(2021, 8, 20, 9, 50, 28, tzinfo=datetime.timezone.utc), 'commenter': 'DvdMgr', 'type': 'User'}, {'comment_id': 692820062, 'comment_body': '```suggestion\r\n- These filters act as global filters for both the graph and the table.\r\n```', 'comment_created': datetime.datetime(2021, 8, 20, 9, 51, 6, tzinfo=datetime.timezone.utc), 'commenter': 'DvdMgr', 'type': 'User'}, {'comment_id': 692820204, 'comment_body': ""```suggestion\r\n- Any unspecified filters are assumed to be 'free' and can take any value. For example, if 'context=[0,1]', 'function=['f1']' and 'Upper Time Limit:1', then the logs with (context=0 or context=1) and (function=f1) and (timestamp<1) will be displayed.\r\n```"", 'comment_created': datetime.datetime(2021, 8, 20, 9, 51, 20, tzinfo=datetime.timezone.utc), 'commenter': 'DvdMgr', 'type': 'User'}, {'comment_id': 692820739, 'comment_body': '```suggestion\r\nThis is a line graph which allows users to easily analyze logs with respect to a time axis. A few points to note about the graph:\r\n```', 'comment_created': datetime.datetime(2021, 8, 20, 9, 52, 12, tzinfo=datetime.timezone.utc), 'commenter': 'DvdMgr', 'type': 'User'}, {'comment_id': 692821181, 'comment_body': '```suggestion\r\nThe table allows users to effectively visualize the logs in a tabular way. A few points to note about the table:\r\n```', 'comment_created': datetime.datetime(2021, 8, 20, 9, 52, 54, tzinfo=datetime.timezone.utc), 'commenter': 'DvdMgr', 'type': 'User'}, {'comment_id': 692821523, 'comment_body': ""```suggestion\r\n- The search box above the table allows the users to search in specific columns. the searchable columns can be selected/deselected using the 'Search columns' dropdown as needed.\r\n```"", 'comment_created': datetime.datetime(2021, 8, 20, 9, 53, 26, tzinfo=datetime.timezone.utc), 'commenter': 'DvdMgr', 'type': 'User'}, {'comment_id': 692821905, 'comment_body': ""```suggestion\r\n- Clicking on a row in the table jumps to the page where that particular row is displayed in the table. For example, if user searches for 'xyz' and logs are displayed based on this search query, then on clicking any row, the table will jump to the page (in the original table without the search query) which contains that particular row. \r\n```"", 'comment_created': datetime.datetime(2021, 8, 20, 9, 54, 4, tzinfo=datetime.timezone.utc), 'commenter': 'DvdMgr', 'type': 'User'}, {'comment_id': 692822174, 'comment_body': '```suggestion\r\n- All the columns of the table (except for extended_context) can be sorted either in ascending or descending order. \r\n```', 'comment_created': datetime.datetime(2021, 8, 20, 9, 54, 26, tzinfo=datetime.timezone.utc), 'commenter': 'DvdMgr', 'type': 'User'}, {'comment_id': 692986949, 'comment_body': 'is this necessary?', 'comment_created': datetime.datetime(2021, 8, 20, 14, 22, 28, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 692988556, 'comment_body': ""i noticed that examples/logging_example2.py defines `ns_path = './examples/ns-3'`, whereas examples/logging_example.py defines `ns_path = ns-3'`, instead.\r\nPlease update examples/logging_example.py to `ns_path = './examples/ns-3'` as well."", 'comment_created': datetime.datetime(2021, 8, 20, 14, 24, 31, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 692989265, 'comment_body': 'i suggest to show the two formats in the same configuration', 'comment_created': datetime.datetime(2021, 8, 20, 14, 25, 27, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 692990529, 'comment_body': 'maybe too verbose?', 'comment_created': datetime.datetime(2021, 8, 20, 14, 27, 3, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 692993937, 'comment_body': 'You could put a link that points directly to the file\r\n\r\n```suggestion\r\nRefer [examples/logging_example2.py](examples/logging_example2.py)\r\n```', 'comment_created': datetime.datetime(2021, 8, 20, 14, 31, 27, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 692999452, 'comment_body': ""check [this](https://stackoverflow.com/questions/30245397/why-is-a-list-comprehension-so-much-faster-than-appending-to-a-list) out\r\n```suggestion\r\n    plot_data = [{'x': row['time'],\r\n                         'y': float(row['jitter_context'])}\r\n                         for row in data]\r\n```"", 'comment_created': datetime.datetime(2021, 8, 20, 14, 38, 53, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 692999675, 'comment_body': 'same as above', 'comment_created': datetime.datetime(2021, 8, 20, 14, 39, 9, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 693000365, 'comment_body': 'unused? if so, remove', 'comment_created': datetime.datetime(2021, 8, 20, 14, 40, 4, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 693001698, 'comment_body': 'remove if not needed. check for more commented code in this file', 'comment_created': datetime.datetime(2021, 8, 20, 14, 41, 54, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 693004866, 'comment_body': ""is there a way to make the selected area clearer? it's almost invisible in the monitor i'm using"", 'comment_created': datetime.datetime(2021, 8, 20, 14, 46, 14, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 693005603, 'comment_body': 'remove unnecessary code', 'comment_created': datetime.datetime(2021, 8, 20, 14, 47, 16, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 693006638, 'comment_body': ""```suggestion\r\n    plot_data = [{'x': row['time'],\r\n                         'y': float(row['jitter_context'])}\r\n                         for row in data]\r\n```"", 'comment_created': datetime.datetime(2021, 8, 20, 14, 48, 40, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 693006767, 'comment_body': 'same as above', 'comment_created': datetime.datetime(2021, 8, 20, 14, 48, 50, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 693008794, 'comment_body': ""one of python's best practices is to avoid creating manual counters when using loops.\r\n```suggestion\r\n        for idx, log in enumerate(f):\r\n```"", 'comment_created': datetime.datetime(2021, 8, 20, 14, 51, 28, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 693010095, 'comment_body': 'remove if not necessary', 'comment_created': datetime.datetime(2021, 8, 20, 14, 53, 15, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 693495896, 'comment_body': 'This is just to ensure that the example does not take a very long time to run. The default `steps` value in the ns-3 example is set to `200`. According to me, that might take quite a long time to run. What do you guys think?', 'comment_created': datetime.datetime(2021, 8, 22, 12, 36, 43, tzinfo=datetime.timezone.utc), 'commenter': 'akshitpatel01', 'type': 'User'}, {'comment_id': 693499340, 'comment_body': 'Mattia, can you please check if you have the latest version of the example?', 'comment_created': datetime.datetime(2021, 8, 22, 13, 2, 39, tzinfo=datetime.timezone.utc), 'commenter': 'akshitpatel01', 'type': 'User'}, {'comment_id': 693500879, 'comment_body': 'I initially thought of this but we have to increment the index only if the log line is parsed correctly. If the control goes here\r\n`if groups is None:\r\nwarnings.warn(""Log format is not consistent with prefix_all. Skipping log \'%s\'"" % log, RuntimeWarning, stacklevel=2)\r\ncontinue `\r\n\r\nwe do not increment the index.', 'comment_created': datetime.datetime(2021, 8, 22, 13, 15, 3, tzinfo=datetime.timezone.utc), 'commenter': 'akshitpatel01', 'type': 'User'}, {'comment_id': 693748179, 'comment_body': ""sorry for not being clear, i meant: why did this change from `2` to `[2]`? It's the only element set as a list.\r\nIf it's possible to make this dictionary uniform (either all lists or all values) i'd go for it"", 'comment_created': datetime.datetime(2021, 8, 23, 8, 1, 31, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 693979248, 'comment_body': ""this is the output that i get running the script:\r\n\r\n[{'index': 50667, 'time': 0.800403247, 'context': '1', 'extended_context': None, 'component': 'MinstrelWifiManager', 'function': 'DoReportRxOk', 'arguments': '', 'severity_class': 'DEBUG', 'message': 'DoReportRxOk m_txrate=6'}, {'index': 50734, 'time': 0.800725281, 'context': '1', 'extended_context': None, 'component': 'MinstrelWifiManager', 'function': 'DoReportRxOk', 'arguments': '', 'severity_class': 'DEBUG', 'message': 'DoReportRxOk m_txrate=6'}, {'index': 50801, 'time': 0.801074315, 'context': '1', 'extended_context': None, 'component': 'MinstrelWifiManager', 'function': 'DoReportRxOk', 'arguments': '', 'severity_class': 'DEBUG', 'message': 'DoReportRxOk m_txrate=6'}, {'index': 50863, 'time': 0.801459349, 'context': '1', 'extended_context': None, 'component': 'MinstrelWifiManager', 'function': 'DoReportRxOk', 'arguments': '', 'severity_class': 'DEBUG', 'message': 'DoReportRxOk m_txrate=6'}, {'index': 50930, 'time': 0.801817383, 'context': '1', 'extended_context': None, 'component': 'MinstrelWifiManager', 'function': 'DoReportRxOk', 'arguments': '', 'severity_class': 'DEBUG', 'message': 'DoReportRxOk m_txrate=6'}, {'index': 50997, 'time': 0.802184417, 'context': '1', 'extended_context': None, 'component': 'MinstrelWifiManager', 'function': 'DoReportRxOk', 'arguments': '', 'severity_class': 'DEBUG', 'message': 'DoReportRxOk m_txrate=6'}, {'index': 51064, 'time': 0.802623451, 'context': '1', 'extended_context': None, 'component': 'MinstrelWifiManager', 'function': 'DoReportRxOk', 'arguments': '', 'severity_class': 'DEBUG', 'message': 'DoReportRxOk m_txrate=6'}, {'index': 51131, 'time': 0.803026485, 'context': '1', 'extended_context': None, 'component': 'MinstrelWifiManager', 'function': 'DoReportRxOk', 'arguments': '', 'severity_class': 'DEBUG', 'message': 'DoReportRxOk m_txrate=6'}, {'index': 51198, 'time': 0.803438519, 'context': '1', 'extended_context': None, 'component': 'MinstrelWifiManager', 'function': 'DoReportRxOk', 'arguments': '', 'severity_class': 'DEBUG', 'message': 'DoReportRxOk m_txrate=6'}, {'index': 51265, 'time': 0.803868553, 'context': '1', 'extended_context': None, 'component': 'MinstrelWifiManager', 'function': 'DoReportRxOk', 'arguments': '', 'severity_class': 'DEBUG', 'message': 'DoReportRxOk m_txrate=6'}, {'index': 51332, 'time': 0.804217587, 'context': '1', 'extended_context': None, 'component': 'MinstrelWifiManager', 'function': 'DoReportRxOk', 'arguments': '', 'severity_class': 'DEBUG', 'message': 'DoReportRxOk m_txrate=6'}, {'index': 51394, 'time': 0.804602621, 'context': '1', 'extended_context': None, 'component': 'MinstrelWifiManager', 'function': 'DoReportRxOk', 'arguments': '', 'severity_class': 'DEBUG', 'message': 'DoReportRxOk m_txrate=6'}, {'index': 51461, 'time': 0.804951655, 'context': '1', 'extended_context': None, 'component': 'MinstrelWifiManager', 'function': 'DoReportRxOk', 'arguments': '', 'severity_class': 'DEBUG', 'message': 'DoReportRxOk m_txrate=6'}, {'index': 51528, 'time': 0.805318689, 'context': '1', 'extended_context': None, 'component': 'MinstrelWifiManager', 'function': 'DoReportRxOk', 'arguments': '', 'severity_class': 'DEBUG', 'message': 'DoReportRxOk m_txrate=6'}, {'index': 51595, 'time': 0.805676723, 'context': '1', 'extended_context': None, 'component': 'MinstrelWifiManager', 'function': 'DoReportRxOk', 'arguments': '', 'severity_class': 'DEBUG', 'message': 'DoReportRxOk m_txrate=6'}, {'index': 51657, 'time': 0.806052757, 'context': '1', 'extended_context': None, 'component': 'MinstrelWifiManager', 'function': 'DoReportRxOk', 'arguments': '', 'severity_class': 'DEBUG', 'message': 'DoReportRxOk m_txrate=6'}, {'index': 51724, 'time': 0.806392791, 'context': '1', 'extended_context': None, 'component': 'MinstrelWifiManager', 'function': 'DoReportRxOk', 'arguments': '', 'severity_class': 'DEBUG', 'message': 'DoReportRxOk m_txrate=6'}, {'index': 51791, 'time': 0.806723825, 'context': '1', 'extended_context': None, 'component': 'MinstrelWifiManager', 'function': 'DoReportRxOk', 'arguments': '', 'severity_class': 'DEBUG', 'message': 'DoReportRxOk m_txrate=6'}, {'index': 51858, 'time': 0.807162859, 'context': '1', 'extended_context': None, 'component': 'MinstrelWifiManager', 'function': 'DoReportRxOk', 'arguments': '', 'severity_class': 'DEBUG', 'message': 'DoReportRxOk m_txrate=6'}, {'index': 51925, 'time': 0.807619893, 'context': '1', 'extended_context': None, 'component': 'MinstrelWifiManager', 'function': 'DoReportRxOk', 'arguments': '', 'severity_class': 'DEBUG', 'message': 'DoReportRxOk m_txrate=6'}, {'index': 51992, 'time': 0.808004927, 'context': '1', 'extended_context': None, 'component': 'MinstrelWifiManager', 'function': 'DoReportRxOk', 'arguments': '', 'severity_class': 'DEBUG', 'message': 'DoReportRxOk m_txrate=6'}, {'index': 52054, 'time': 0.808344961, 'context': '1', 'extended_context': None, 'component': 'MinstrelWifiManager', 'function': 'DoReportRxOk', 'arguments': '', 'severity_class': 'DEBUG', 'message': 'DoReportRxOk m_txrate=6'}, {'index': 52121, 'time': 0.808792995, 'context': '1', 'extended_context': None, 'component': 'MinstrelWifiManager', 'function': 'DoReportRxOk', 'arguments': '', 'severity_class': 'DEBUG', 'message': 'DoReportRxOk m_txrate=6'}, {'index': 52188, 'time': 0.809169029, 'context': '1', 'extended_context': None, 'component': 'MinstrelWifiManager', 'function': 'DoReportRxOk', 'arguments': '', 'severity_class': 'DEBUG', 'message': 'DoReportRxOk m_txrate=6'}, {'index': 52255, 'time': 0.809626063, 'context': '1', 'extended_context': None, 'component': 'MinstrelWifiManager', 'function': 'DoReportRxOk', 'arguments': '', 'severity_class': 'DEBUG', 'message': 'DoReportRxOk m_txrate=6'}, {'index': 52322, 'time': 0.809948097, 'context': '1', 'extended_context': None, 'component': 'MinstrelWifiManager', 'function': 'DoReportRxOk', 'arguments': '', 'severity_class': 'DEBUG', 'message': 'DoReportRxOk m_txrate=6'}]"", 'comment_created': datetime.datetime(2021, 8, 23, 13, 37, 44, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 693980348, 'comment_body': 'My point is: does a user care about this output when running the example or is it just interested into the dashboard?\r\nOr should we separate this in a third example showing the logging/filtering programmatic API, instead?', 'comment_created': datetime.datetime(2021, 8, 23, 13, 38, 59, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 693986811, 'comment_body': 'Okay, i get it now, thank you for the explanation.\r\nThough, I would suggest the opposite: in this way row number and log index would be consistent, and a user would easily be able to find any given line if he needs to.\r\nOn the other hand, having the index and the row number as possibly different might be annoying for a user.\r\n\r\nWhat do you guys think?', 'comment_created': datetime.datetime(2021, 8, 23, 13, 46, 28, tzinfo=datetime.timezone.utc), 'commenter': 'mattia-lecci', 'type': 'User'}, {'comment_id': 697870040, 'comment_body': ""My point was just to demonstrate the API output but I agree with your point. I probably wouldn't make a new example just for this. Maybe keep the print statement and just comment it? "", 'comment_created': datetime.datetime(2021, 8, 28, 13, 27, 56, tzinfo=datetime.timezone.utc), 'commenter': 'akshitpatel01', 'type': 'User'}, {'comment_id': 697874125, 'comment_body': 'I did not quite understand what approach did you referred to as the opposite. Can you please elaborate a little? Also, I would like to just point out that the index that we store in the database is not visible to the user at any point. It is just to make searching for the log entries easier and faster(as the index are always sorted). ', 'comment_created': datetime.datetime(2021, 8, 28, 14, 3, 51, tzinfo=datetime.timezone.utc), 'commenter': 'akshitpatel01', 'type': 'User'}]","[{'commit_sha': '5fe68b2e23818166b51c1be443b22d8afa6b3cec', 'committer_username': 'akshitpatel01', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 29, 12, 14, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b3bb266e907851f3808949a358dbaaa02424ac9', 'committer_username': 'akshitpatel01', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 29, 12, 14, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b26502859c5d57e4f795b91ba4ca79496ba4a020', 'committer_username': 'akshitpatel01', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 29, 12, 14, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19194ceb5cbb00eb37a88aa6ba37eb50488de5c4', 'committer_username': 'akshitpatel01', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 29, 12, 14, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b59167b5363898939e0fddddec828dc170f9708e', 'committer_username': 'akshitpatel01', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 29, 12, 14, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa884abce1edbfca7d57c7ef1b1f0b859f5162a2', 'committer_username': 'akshitpatel01', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 29, 12, 14, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc2bbc8d55b22927203c346e7b915b787bbeea77', 'committer_username': 'akshitpatel01', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 29, 12, 14, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73a0f437089cfc08e5c37dce2357e2c805dca919', 'committer_username': 'akshitpatel01', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 29, 12, 14, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a37d13cc62f9500dc7bfbbe6f75785f35c4c2e8b', 'committer_username': 'akshitpatel01', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 29, 12, 14, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e197881d52014db375c7fd52a7fa081d1d9ffb4', 'committer_username': 'akshitpatel01', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 29, 12, 14, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2898966f04fe97b3901874da325add71c76e98d8', 'committer_username': 'akshitpatel01', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 29, 12, 14, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17f31640929184ccdd57f601dc0f866fed025998', 'committer_username': 'akshitpatel01', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 29, 12, 14, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fec1f3ab37968b194bf72780697135b8118289f9', 'committer_username': 'akshitpatel01', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 29, 12, 14, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dce7fe197080ccd859bb8282d6be7d6890ef36a8', 'committer_username': 'akshitpatel01', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 29, 12, 14, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f4588893290fd07e4a6ff7138b0dfe7b87ce42ed', 'committer_username': 'akshitpatel01', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 29, 12, 14, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f274fd476823325c3fcde5ef52f650a805ec9dee', 'committer_username': 'akshitpatel01', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 29, 12, 14, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f022faa020b8963fffc6204e874c8b1c8917ddaa', 'committer_username': 'akshitpatel01', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 29, 12, 14, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd2a73ac0e4d403ede6ae757e298cae7bfd51f434', 'committer_username': 'akshitpatel01', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 29, 12, 14, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb88733175adfc7532177ca48f5bb92fc2894573', 'committer_username': 'akshitpatel01', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 29, 12, 14, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57ecadcb5e8ceb8267bfccbcbbdce19aaa0a507c', 'committer_username': 'akshitpatel01', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 29, 12, 14, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c0b4fef59c8b1b93eb36bc6d3659043719879d27', 'committer_username': 'akshitpatel01', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 29, 12, 14, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '89738d2b53171a079010ccff7a9648326a0ed544', 'committer_username': 'akshitpatel01', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 29, 12, 14, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db26ebb5c4202d6cf99762ac85fbc666d712e001', 'committer_username': 'akshitpatel01', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 29, 12, 14, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6918ef4795d4f1a646d345b6266e014d03bb61b1', 'committer_username': 'akshitpatel01', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 29, 12, 14, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e0e054e361fc7776ea59a3f776e0dceae1513d75', 'committer_username': 'akshitpatel01', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 29, 12, 14, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '04e5da3f661d8d87391ad7023bde2c03876a41ef', 'committer_username': 'akshitpatel01', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 29, 12, 14, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e7cfe77df13870f2afb79cce257d0147c5a0e56', 'committer_username': 'akshitpatel01', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 29, 12, 14, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12e8ada70a6fa52e416db8407d85705046316d5c', 'committer_username': 'akshitpatel01', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 29, 12, 14, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74bcfd430fb638ae1b022fc87fe9f02bfa3009ee', 'committer_username': 'akshitpatel01', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 29, 12, 14, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fafd77d31db1fc498a9aae316731c626c66d5960', 'committer_username': 'akshitpatel01', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 29, 12, 14, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ece7f76ec4b6d65f5b8f7bd2a529c695036fff64', 'committer_username': 'akshitpatel01', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 29, 12, 14, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f1e53900d2ad1261bf16a5662e7f77f6558f0bd', 'committer_username': 'akshitpatel01', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 29, 12, 14, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12146fa815730f569e759187ea536688d3b744f6', 'committer_username': 'akshitpatel01', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 29, 12, 14, 56, tzinfo=datetime.timezone.utc)}]",,32390517,,User,,21,,0,4

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
131993370,sem,signetlabdei/sem,Python,30,34,9,8,303,6,8,3,"[{'id': 712774129, 'number': 54, 'closed': None, 'created': datetime.datetime(2021, 8, 14, 12, 56, 49, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 902, 'deletions': 15, 'state': 'open'}, {'id': 683624803, 'number': 51, 'closed': datetime.datetime(2021, 7, 28, 7, 52, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 5, 11, 34, 52, tzinfo=datetime.timezone.utc), 'time_taken': 1973872.0, 'time_delta': '22 days, 20:17:52', 'additions': 666, 'deletions': 6, 'state': 'closed'}, {'id': 671394773, 'number': 47, 'closed': datetime.datetime(2021, 7, 2, 13, 9, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 16, 12, 10, 24, tzinfo=datetime.timezone.utc), 'time_taken': 1385945.0, 'time_delta': '16 days, 0:59:05', 'additions': 862, 'deletions': 112, 'state': 'closed'}]"
