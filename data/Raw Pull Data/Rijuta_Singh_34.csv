pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
655310799,Milestone 1.1: Add Storage Models for Blog Posts,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes nothing
2. This PR does the following: Adds blog posts storage models to be used for storing blogs.

## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Make sure to follow the [instructions for making a code change](https://github.com/oppia/oppia/wiki/Contributing-code-to-Oppia#instructions-for-making-a-code-change).
- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays.
- Never force push. If you do, your PR will be closed.
- Oppiabot can assign anyone for review/help if you leave a comment like the following: ""{{Question/comment}} @{{reviewer_username}} PTAL""
- Some of the e2e tests are flaky, and can fail for reasons unrelated to your PR. We are working on fixing this, but in the meantime, if you need to restart the tests, please check the [""If your build fails"" wiki page](https://github.com/oppia/oppia/wiki/If-your-build-fails).
",True,12933,https://api.github.com/repos/oppia/oppia/pulls/12933,https://github.com/oppia/oppia/pull/12933,closed,1568,44,14,44,38,233,2,2,"[{'name': 'PR: LGTM'}, {'name': 'PR: Affects datastore layer'}]",2021-05-27 19:59:08+00:00,2021-06-17 23:08:51+00:00,1825783.0,"21 days, 3:09:43","[{'comment_id': 641004402, 'comment_body': 'Please keep the type together with the argument, here and elsewhere, like so:\r\n```suggestion\r\n        pending_deletion_request: PendingDeletionRequest. The pending deletion\r\n            request object to be saved in the datastore.\r\n```', 'comment_created': datetime.datetime(2021, 5, 27, 22, 12, 30, tzinfo=datetime.timezone.utc), 'commenter': 'brianrodri', 'type': 'User'}, {'comment_id': 641009955, 'comment_body': 'This is a great place to use our [`utils.grouper`](https://github.com/oppia/oppia/blob/90da6bcfde1401686172728a315b8591d79855e2/utils.py#L998):\r\n```suggestion\r\n        transaction_slices = utils.grouper(\r\n            blog_posts_related_models,\r\n            feconf.MAX_NUMBER_OF_OPS_IN_TRANSACTION)\r\n        for transaction_slice in transaction_slices:\r\n            _pseudonymize_models_transactional(\r\n                [m for m in transaction_slice if m is not None],\r\n                pseudonymized_id)\r\n```', 'comment_created': datetime.datetime(2021, 5, 27, 22, 19, 55, tzinfo=datetime.timezone.utc), 'commenter': 'brianrodri', 'type': 'User'}, {'comment_id': 641010885, 'comment_body': 'nit pick: change to `pseudonymizable_user_id_mapping` to help readability', 'comment_created': datetime.datetime(2021, 5, 27, 22, 22, 5, tzinfo=datetime.timezone.utc), 'commenter': 'brianrodri', 'type': 'User'}, {'comment_id': 641011918, 'comment_body': ""Careful: you _must_ provide the actual class name in `super()`, otherwise inheritance will not work properly. Please change to:  \r\n```suggestion\r\n        return dict(super(BlogPostModel, cls).get_export_policy(), **{\r\n```\r\n\r\n(we're moving to Python 3 soon where we don't even need this anymore!)"", 'comment_created': datetime.datetime(2021, 5, 27, 22, 24, 41, tzinfo=datetime.timezone.utc), 'commenter': 'brianrodri', 'type': 'User'}, {'comment_id': 641012427, 'comment_body': 'Could you please explain a bit more about what this is? Specifically the comment should answer the question: ""why is it OK to query by this value?""', 'comment_created': datetime.datetime(2021, 5, 27, 22, 26, 6, tzinfo=datetime.timezone.utc), 'commenter': 'brianrodri', 'type': 'User'}, {'comment_id': 641012913, 'comment_body': 'Ditto.', 'comment_created': datetime.datetime(2021, 5, 27, 22, 27, 17, tzinfo=datetime.timezone.utc), 'commenter': 'brianrodri', 'type': 'User'}, {'comment_id': 641013177, 'comment_body': 'Please remove this, `BaseModel` already gives this property to subclasses.', 'comment_created': datetime.datetime(2021, 5, 27, 22, 27, 56, tzinfo=datetime.timezone.utc), 'commenter': 'brianrodri', 'type': 'User'}, {'comment_id': 641013541, 'comment_body': 'Ditto.', 'comment_created': datetime.datetime(2021, 5, 27, 22, 28, 46, tzinfo=datetime.timezone.utc), 'commenter': 'brianrodri', 'type': 'User'}, {'comment_id': 641015242, 'comment_body': ""nit pick: maybe add a comment explaining that this checks that _any_ of the IDs are equal to the `user_id` (I had to look it up myself to be sure, but readers shouldn't be forced to do that)."", 'comment_created': datetime.datetime(2021, 5, 27, 22, 32, 51, tzinfo=datetime.timezone.utc), 'commenter': 'brianrodri', 'type': 'User'}, {'comment_id': 648194590, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 9, 11, 1, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 648195169, 'comment_body': 'Thanks. Done', 'comment_created': datetime.datetime(2021, 6, 9, 11, 2, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 648195248, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 9, 11, 2, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 648195375, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2021, 6, 9, 11, 2, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 648198241, 'comment_body': 'Removed', 'comment_created': datetime.datetime(2021, 6, 9, 11, 7, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 648198360, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 9, 11, 7, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 648204270, 'comment_body': 'Added.', 'comment_created': datetime.datetime(2021, 6, 9, 11, 17, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 648220138, 'comment_body': 'If the user directly enters the URL of the blog-editor for a blog post or that of the blog-post page, we should be able to get the data by the URL fragment for the blog post. URL fragment will be unique for each blog post. Added the comment above the query function.', 'comment_created': datetime.datetime(2021, 6, 9, 11, 41, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 648260606, 'comment_body': ""Shouldn't this be `blog_models` instead? Since the model's directory is called `blog`.\r\nAlso, this naming is inconsistent everywhere -- in some places, it's blog_models, and in others, blog_post_models. Please fix this."", 'comment_created': datetime.datetime(2021, 6, 9, 12, 39, 30, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 648262154, 'comment_body': '```suggestion\r\n        19) Creates new BlogPostModel and BlogPostRightsModel.\r\n```', 'comment_created': datetime.datetime(2021, 6, 9, 12, 41, 32, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 648263173, 'comment_body': 'This should be in the create method of the model in the `gae_models.py` file.\r\nPlease fix this here and elsewhere.', 'comment_created': datetime.datetime(2021, 6, 9, 12, 42, 44, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 648263273, 'comment_body': '```suggestion\r\n        # Set-up for the BlogPostModel.\r\n```', 'comment_created': datetime.datetime(2021, 6, 9, 12, 42, 52, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 648264329, 'comment_body': ""Don't these tags have to be from the list of tags that the blog admin provides? This should fail the validations, right?"", 'comment_created': datetime.datetime(2021, 6, 9, 12, 44, 13, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 648265672, 'comment_body': ""I don't quite understand this. The difference between the old rights instance and the new one is in the blog id. But shouldn't the difference be in the editor IDs list? Can you please explain the rationale behind this?"", 'comment_created': datetime.datetime(2021, 6, 9, 12, 45, 56, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 648265905, 'comment_body': 'Why this change?', 'comment_created': datetime.datetime(2021, 6, 9, 12, 46, 17, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 648266805, 'comment_body': '```suggestion\r\n    """"""Pseudonymizes the blog post models for the user with user_id.\r\n```', 'comment_created': datetime.datetime(2021, 6, 9, 12, 47, 27, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 648270336, 'comment_body': 'Do we need to do this? Do we not have the `auto_now` and `auto_now_add` set for the timestamp attributes for all models?\r\n\r\n/cc @vojtechjelinek ', 'comment_created': datetime.datetime(2021, 6, 9, 12, 51, 55, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 648271313, 'comment_body': '```suggestion\r\n""""""Models for storing data related to blog posts.""""""\r\n```', 'comment_created': datetime.datetime(2021, 6, 9, 12, 53, 3, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 648271802, 'comment_body': 'Do you need these? Where are they used?', 'comment_created': datetime.datetime(2021, 6, 9, 12, 53, 40, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 648271955, 'comment_body': 'Remove extra line.', 'comment_created': datetime.datetime(2021, 6, 9, 12, 53, 54, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 648272315, 'comment_body': '```suggestion\r\n    """"""Model to store blog post data.\r\n```', 'comment_created': datetime.datetime(2021, 6, 9, 12, 54, 20, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 648273461, 'comment_body': ""Shouldn't this be required? For a blog to be published, there needs to be at least one tag, right?"", 'comment_created': datetime.datetime(2021, 6, 9, 12, 55, 44, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 648274497, 'comment_body': '```suggestion\r\n        """"""Creates a new BlogPostModel entry.\r\n```', 'comment_created': datetime.datetime(2021, 6, 9, 12, 56, 59, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 648274590, 'comment_body': '```suggestion\r\n            BlogPostModel. The newly created BlogPostModel\r\n```', 'comment_created': datetime.datetime(2021, 6, 9, 12, 57, 8, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 648275106, 'comment_body': '```suggestion\r\n        """"""Gets BlogPostModel by url_fragment. Returns None if the blog with\r\n```\r\n\r\nPlease take care of naming!', 'comment_created': datetime.datetime(2021, 6, 9, 12, 57, 47, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 648275436, 'comment_body': '```suggestion\r\n            BlogPostModel | None. The blog post model of the Blog or None if not\r\n```', 'comment_created': datetime.datetime(2021, 6, 9, 12, 58, 6, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 648275829, 'comment_body': '```suggestion\r\n    """"""Summary model for blog posts.\r\n```', 'comment_created': datetime.datetime(2021, 6, 9, 12, 58, 33, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 648276510, 'comment_body': '```suggestion\r\n    """"""Storage model for rights related to a blog post.\r\n```', 'comment_created': datetime.datetime(2021, 6, 9, 12, 59, 24, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 648276739, 'comment_body': '```suggestion\r\n    # Whether this blog post is published or not.\r\n```', 'comment_created': datetime.datetime(2021, 6, 9, 12, 59, 40, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 648277047, 'comment_body': '```suggestion\r\n    # False if blog post is a draft, True if published.\r\n```', 'comment_created': datetime.datetime(2021, 6, 9, 13, 0, 2, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 648277231, 'comment_body': '```suggestion\r\n    blog_post_is_published = datastore_services.BooleanProperty(\r\n```', 'comment_created': datetime.datetime(2021, 6, 9, 13, 0, 14, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 648277681, 'comment_body': '```suggestion\r\n        """"""Retrieves the rights object for all blog posts assigned to given user\r\n```', 'comment_created': datetime.datetime(2021, 6, 9, 13, 0, 44, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 648278749, 'comment_body': 'Why is this necessary?', 'comment_created': datetime.datetime(2021, 6, 9, 13, 2, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 648279695, 'comment_body': 'Can you please add a docstring to explain what this function tests?', 'comment_created': datetime.datetime(2021, 6, 9, 13, 3, 14, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 648513000, 'comment_body': 'Yes, they will be from that list. This is just a sample blog post created inside takeout_service_test to test that the export methods are working properly. They will export data stored inside the models for the user depending upon the export policy.', 'comment_created': datetime.datetime(2021, 6, 9, 17, 14, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 648514600, 'comment_body': 'We can either declare it to be repeated or required. We cannot have both together. We want to store a list of tags and hence we require it to be repeated. We will put a validation check to ensure that at least one tag is there.', 'comment_created': datetime.datetime(2021, 6, 9, 17, 17, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 648516034, 'comment_body': 'The encoding information is used by the python parser to interpret the file using the given encoding. All other test files mostly have it.', 'comment_created': datetime.datetime(2021, 6, 9, 17, 19, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 648611115, 'comment_body': 'Changed the directory name to blog_post. And also changed the blog_models to blog_post_models at all places.', 'comment_created': datetime.datetime(2021, 6, 9, 19, 24, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 648612879, 'comment_body': 'Added in create method in gae_models.py. But we will require them here as well.', 'comment_created': datetime.datetime(2021, 6, 9, 19, 27, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 648620621, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 9, 19, 39, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 648620727, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 9, 19, 39, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 648625843, 'comment_body': ""We are checking the export method. So both the model's blog ids should be exported as 'editable_blog_post_ids' when user exports data.\r\n![Screenshot from 2021-06-10 01-13-31](https://user-images.githubusercontent.com/68547101/121419118-41687780-c989-11eb-84bc-aeee4071360f.png)\r\n"", 'comment_created': datetime.datetime(2021, 6, 9, 19, 45, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 648626320, 'comment_body': 'Removed.', 'comment_created': datetime.datetime(2021, 6, 9, 19, 45, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 648626453, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 9, 19, 46, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 648629030, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 9, 19, 48, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 648629080, 'comment_body': 'Removed. We directly use them from base models.', 'comment_created': datetime.datetime(2021, 6, 9, 19, 48, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 648629238, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 9, 19, 48, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 648629912, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 9, 19, 49, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 648630622, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 9, 19, 49, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 648632383, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 9, 19, 51, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 648632636, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 9, 19, 51, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 648632914, 'comment_body': 'Sorry, fixed.', 'comment_created': datetime.datetime(2021, 6, 9, 19, 51, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 648633044, 'comment_body': 'done.', 'comment_created': datetime.datetime(2021, 6, 9, 19, 51, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 648636255, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 9, 19, 54, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 648637043, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2021, 6, 9, 19, 55, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 648637165, 'comment_body': 'done.', 'comment_created': datetime.datetime(2021, 6, 9, 19, 55, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 648637395, 'comment_body': 'Changed.', 'comment_created': datetime.datetime(2021, 6, 9, 19, 55, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 648638012, 'comment_body': 'Added.', 'comment_created': datetime.datetime(2021, 6, 9, 19, 56, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 648638278, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 9, 19, 56, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 649229401, 'comment_body': 'I think we can use auto_now for last_updated but not for published_on. \r\nRemoved last_updated as it will be updated automatically.\r\nBut we cannot use auto_now or auto_now_add for published on.', 'comment_created': datetime.datetime(2021, 6, 10, 14, 19, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 649459927, 'comment_body': ""Why can't we use the create function here?"", 'comment_created': datetime.datetime(2021, 6, 10, 19, 21, 41, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 649460863, 'comment_body': 'I understand that, but so will the validations not run on these instances?', 'comment_created': datetime.datetime(2021, 6, 10, 19, 23, 10, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 649716504, 'comment_body': 'create method creates the blog post with default values. We will still  need to update the model with values and use put().', 'comment_created': datetime.datetime(2021, 6, 11, 6, 14, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 649738702, 'comment_body': ""No, they don't. Validations wont run."", 'comment_created': datetime.datetime(2021, 6, 11, 7, 1, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 649885511, 'comment_body': ""Maybe a small comment about the naming, Would it make sense to name this file just 'blog'? Can we imagine in the future that there might be more models in this file that won't be posts but something else?"", 'comment_created': datetime.datetime(2021, 6, 11, 10, 55, 10, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 649887039, 'comment_body': ""Why you're adding this here?"", 'comment_created': datetime.datetime(2021, 6, 11, 10, 57, 35, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 649887994, 'comment_body': '```suggestion\r\n        )\r\n```', 'comment_created': datetime.datetime(2021, 6, 11, 10, 59, 23, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 649888665, 'comment_body': ""I don't understand this description, multiple users can edit blog or blog post?"", 'comment_created': datetime.datetime(2021, 6, 11, 11, 0, 35, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 649889094, 'comment_body': 'This comment seems a bit redundant to me.', 'comment_created': datetime.datetime(2021, 6, 11, 11, 1, 27, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 649889318, 'comment_body': '```suggestion\r\n        }\r\n```', 'comment_created': datetime.datetime(2021, 6, 11, 11, 1, 56, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 649889582, 'comment_body': '```suggestion\r\n        )\r\n```', 'comment_created': datetime.datetime(2021, 6, 11, 11, 2, 29, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 649890107, 'comment_body': '```suggestion\r\n            )\r\n```', 'comment_created': datetime.datetime(2021, 6, 11, 11, 3, 31, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 649891286, 'comment_body': '```suggestion\r\n            cls.url_fragment == url_fragment\r\n        ).filter(cls.deleted == False).get() # pylint: disable=singleton-comparison\r\n```', 'comment_created': datetime.datetime(2021, 6, 11, 11, 5, 52, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 649894130, 'comment_body': 'Not sure what this TODO means, also please create an issue for this and then do `TODO(#12345): …`', 'comment_created': datetime.datetime(2021, 6, 11, 11, 11, 18, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 649898067, 'comment_body': '```suggestion\r\n            ],\r\n```', 'comment_created': datetime.datetime(2021, 6, 11, 11, 18, 34, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 649900775, 'comment_body': ""Also I'm not really sure why we need to wait for the service layer."", 'comment_created': datetime.datetime(2021, 6, 11, 11, 23, 31, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 649980684, 'comment_body': 'When user deletes the account, user id should be removed from the list of editor ids in the BlogPostsRightsModel. The function to remove the user id from editor ids will be added in the blog_services.py file. We will use the same function here.', 'comment_created': datetime.datetime(2021, 6, 11, 13, 31, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 649983164, 'comment_body': 'Removed.It is not required.', 'comment_created': datetime.datetime(2021, 6, 11, 13, 35, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 649983296, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 11, 13, 35, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 649983859, 'comment_body': 'Sorry, it should be blog post. Multiple users can edit the blog post. Fixed', 'comment_created': datetime.datetime(2021, 6, 11, 13, 36, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 649985751, 'comment_body': 'Brian asked to add the comment as it is not that clear. \r\nhttps://github.com/oppia/oppia/pull/12933#discussion_r641015242', 'comment_created': datetime.datetime(2021, 6, 11, 13, 38, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 649986044, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 11, 13, 39, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 649986102, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 11, 13, 39, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 649986163, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 11, 13, 39, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 649986281, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 11, 13, 39, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 649986451, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 11, 13, 39, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 649990364, 'comment_body': 'Will discuss it with sean and prayush and update accordingly.', 'comment_created': datetime.datetime(2021, 6, 11, 13, 45, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 649992432, 'comment_body': 'Please implement validators for these models instead of excluding them from checks, or leave a comment explaining why these models **cannot** be validated.\r\n\r\nYou can find an example here: https://github.com/oppia/oppia/blob/dc6681294f986a8db9b9b84ecfb68ee58302a78d/core/domain/improvements_validators.py#L32-L54', 'comment_created': datetime.datetime(2021, 6, 11, 13, 47, 54, tzinfo=datetime.timezone.utc), 'commenter': 'brianrodri', 'type': 'User'}, {'comment_id': 649995516, 'comment_body': 'Nit suggestion:\r\n```suggestion\r\n        blog_posts_related_models = [\r\n            model.id for model in itertools.chain(\r\n                blog_post_models_list, blog_post_summary_models)\r\n            if model.id == blogpost_id\r\n        ]\r\n```', 'comment_created': datetime.datetime(2021, 6, 11, 13, 51, 56, tzinfo=datetime.timezone.utc), 'commenter': 'brianrodri', 'type': 'User'}, {'comment_id': 649996561, 'comment_body': 'Should this also check `if author_id == user_id` like on line 1310-1311?', 'comment_created': datetime.datetime(2021, 6, 11, 13, 53, 16, tzinfo=datetime.timezone.utc), 'commenter': 'brianrodri', 'type': 'User'}, {'comment_id': 649997472, 'comment_body': '```suggestion\r\n    blogpost_ids = {model.id for model in blog_post_models_list}\r\n```', 'comment_created': datetime.datetime(2021, 6, 11, 13, 54, 33, tzinfo=datetime.timezone.utc), 'commenter': 'brianrodri', 'type': 'User'}, {'comment_id': 649997717, 'comment_body': '```suggestion\r\n    blogpost_ids |= {model.id for model in blog_post_summary_models}\r\n```', 'comment_created': datetime.datetime(2021, 6, 11, 13, 54, 50, tzinfo=datetime.timezone.utc), 'commenter': 'brianrodri', 'type': 'User'}, {'comment_id': 649998082, 'comment_body': 'Please stay consistent with `blog_post` naming, here and elsewhere:\r\n```suggestion\r\n    blog_post_ids = set([model.id for model in blog_post_models_list])\r\n```', 'comment_created': datetime.datetime(2021, 6, 11, 13, 55, 19, tzinfo=datetime.timezone.utc), 'commenter': 'brianrodri', 'type': 'User'}, {'comment_id': 649998625, 'comment_body': 'Redundant, please remove:\r\n```suggestion\r\n        blog_post_model_class.author_id == user_id\r\n```', 'comment_created': datetime.datetime(2021, 6, 11, 13, 55, 59, tzinfo=datetime.timezone.utc), 'commenter': 'brianrodri', 'type': 'User'}, {'comment_id': 649999157, 'comment_body': 'Ditto, this is redundant:\r\n```suggestion\r\n        blog_post_summary_model_class.author_id == user_id\r\n```', 'comment_created': datetime.datetime(2021, 6, 11, 13, 56, 38, tzinfo=datetime.timezone.utc), 'commenter': 'brianrodri', 'type': 'User'}, {'comment_id': 650003486, 'comment_body': 'Please move this to the documentation above `url_fragment = StringProperty(...)`', 'comment_created': datetime.datetime(2021, 6, 11, 14, 2, 9, tzinfo=datetime.timezone.utc), 'commenter': 'brianrodri', 'type': 'User'}, {'comment_id': 650004474, 'comment_body': '```suggestion\r\n        return BlogPostModel.query(\r\n            datastore_services.all_of(\r\n                cls.url_fragment == url_fragment, cls.deleted == False)\r\n        ).get() # pylint: disable=singleton-comparison\r\n```', 'comment_created': datetime.datetime(2021, 6, 11, 14, 3, 25, tzinfo=datetime.timezone.utc), 'commenter': 'brianrodri', 'type': 'User'}, {'comment_id': 650005785, 'comment_body': '```suggestion\r\n        return cls.query(cls.author_id == user_id).get(keys_only=True) is not None\r\n```', 'comment_created': datetime.datetime(2021, 6, 11, 14, 5, 8, tzinfo=datetime.timezone.utc), 'commenter': 'brianrodri', 'type': 'User'}, {'comment_id': 650007571, 'comment_body': 'Please add a bit more context:\r\n```suggestion\r\n            # NOTE: Even though `editor_ids` is repeated, we can compare it to a single value and it will return models where any of the editor IDs are equal to user_id.\r\n```', 'comment_created': datetime.datetime(2021, 6, 11, 14, 7, 17, tzinfo=datetime.timezone.utc), 'commenter': 'brianrodri', 'type': 'User'}, {'comment_id': 650134797, 'comment_body': 'Proper validations for all three models will be written in the next PR in which domain and services will also be written. Models will be removed from this list then.', 'comment_created': datetime.datetime(2021, 6, 11, 16, 51, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 650134983, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 11, 16, 52, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 650135280, 'comment_body': 'Thanks. yes it should be checked. Fixed', 'comment_created': datetime.datetime(2021, 6, 11, 16, 52, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 650135346, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 11, 16, 52, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 650135424, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 11, 16, 52, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 650136140, 'comment_body': 'Fixed here and at all other places.', 'comment_created': datetime.datetime(2021, 6, 11, 16, 54, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 650136327, 'comment_body': 'Removed.', 'comment_created': datetime.datetime(2021, 6, 11, 16, 54, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 650136461, 'comment_body': 'Removed.', 'comment_created': datetime.datetime(2021, 6, 11, 16, 54, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 650136604, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 11, 16, 54, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 650136927, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 11, 16, 55, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 650137132, 'comment_body': 'Added.', 'comment_created': datetime.datetime(2021, 6, 11, 16, 55, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 650156123, 'comment_body': ""We will keep it -'blog_post' as even if we have any other model added to it, they will be related to the blog post and following the convention as the main model is for blog post, the directory name will be blog_post.\r\n /cc @iamprayush "", 'comment_created': datetime.datetime(2021, 6, 11, 17, 28, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 650260148, 'comment_body': 'Can you move just the validations to this PR? In general, we should not be adding stuff to these lists with the plan of removing them later.', 'comment_created': datetime.datetime(2021, 6, 11, 20, 55, 24, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 650262572, 'comment_body': 'I don\'t quite follow this ... what are the semantics of ""old"" and ""new"" here?', 'comment_created': datetime.datetime(2021, 6, 11, 21, 1, 7, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 650264833, 'comment_body': ""posts --> post  (since it's models that's pluralized)"", 'comment_created': datetime.datetime(2021, 6, 11, 21, 6, 44, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 650265457, 'comment_body': ""Deindent by 4 to match opening '('"", 'comment_created': datetime.datetime(2021, 6, 11, 21, 8, 12, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 650265576, 'comment_body': 'BlogPostRightsModel', 'comment_created': datetime.datetime(2021, 6, 11, 21, 8, 29, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 650265816, 'comment_body': 'blog_post_ids_to_pids\r\n\r\n(Note: if you say ""blog posts ids"" then the idea here is that a single ID refers to multiple blog posts. A ""blog post id"" is a thing, and then you pluralize that.)', 'comment_created': datetime.datetime(2021, 6, 11, 21, 8, 53, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 650266724, 'comment_body': 'I actually thought it should be ""blog"" too. E.g. consider the case if you have models in the future that are related to the blog as a whole, like the list of allowed authors or the list of different blogs (maybe there\'s an engineering blog and an outreach blog), or stuff like that. I think it\'s too early to make the call that this will be specific to blog-post stuff only.', 'comment_created': datetime.datetime(2021, 6, 11, 21, 10, 48, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 650270464, 'comment_body': 'Will we autogenerate this based on the title, sort of like Medium does? (I think they hyphenate the words and stick a random ID on the end)', 'comment_created': datetime.datetime(2021, 6, 11, 21, 19, 34, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 650270651, 'comment_body': 'I think you can index this.', 'comment_created': datetime.datetime(2021, 6, 11, 21, 20, 1, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 650270743, 'comment_body': ""Seems like it's not required, so explain in this docstring what a value of None means.\r\n\r\nAlso a blog post may be published multiple times, right? (if it's published then unpublished then published again). Maybe clarify that this refers to the time when it was last published."", 'comment_created': datetime.datetime(2021, 6, 11, 21, 20, 18, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 650271878, 'comment_body': '@vojtechjelinek should we be exporting the internal model IDs, or would it be better to have a list of dicts here?', 'comment_created': datetime.datetime(2021, 6, 11, 21, 23, 8, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 650272683, 'comment_body': ""I don't think you should have a create() here, actually. The summary model should be autogenerated, right? Which means that, at the point it's autogenerated, you'll already have all the data for it, so you don't actually need a create method that populates it with dummy values to begin with."", 'comment_created': datetime.datetime(2021, 6, 11, 21, 24, 50, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 650272918, 'comment_body': 'The user_ids of the editors of ...', 'comment_created': datetime.datetime(2021, 6, 11, 21, 25, 21, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 650273081, 'comment_body': 'user --> the given user', 'comment_created': datetime.datetime(2021, 6, 11, 21, 25, 49, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 650273588, 'comment_body': '...for which the user is an editor.', 'comment_created': datetime.datetime(2021, 6, 11, 21, 26, 59, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 650273730, 'comment_body': 'blog.id suffices, right?', 'comment_created': datetime.datetime(2021, 6, 11, 21, 27, 17, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 650417627, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 12, 17, 52, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 650417631, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 12, 17, 52, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 650417635, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 12, 17, 52, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 650417636, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2021, 6, 12, 17, 52, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 650418605, 'comment_body': 'Done. Renamed the directory to blog. And accordingly changed at other places as well.', 'comment_created': datetime.datetime(2021, 6, 12, 18, 3, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 650419162, 'comment_body': 'I have added validations such as `_get_external_id_relationships` and `_get_model_id_regex`.  And removed these models from this list here. However other validations like `_get_model_domain_object_instance` or validations which will see if the blog post is published or not ( like thumbnail file is present and summary is not empty) can only be added once the blog_service and blog_domain file is written. So, I will add these validations in the same file in the next PR.\r\n\r\nI hope this will work.', 'comment_created': datetime.datetime(2021, 6, 12, 18, 10, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 650419407, 'comment_body': 'Just to differentiate between two models. Should I rename them as `blog_post_rights_model_one` and `blog_post_rights_model_two`', 'comment_created': datetime.datetime(2021, 6, 12, 18, 12, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 650420070, 'comment_body': 'Yeah, we will autogenerate this based on title, the random ID on the end will be the blog post id (as we have in topics).', 'comment_created': datetime.datetime(2021, 6, 12, 18, 21, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 650420289, 'comment_body': 'Done. But i wanted to confirm, is it required? It will help in reducing the time complexity if we want to make query using thumbnail_filename, but will we in any case do a query using it?', 'comment_created': datetime.datetime(2021, 6, 12, 18, 23, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 650420455, 'comment_body': ""Added doc string -\r\n    ' Time when the blog post model was last published. Value will be None if the blog post is a draft i.e it is not published.'"", 'comment_created': datetime.datetime(2021, 6, 12, 18, 26, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 650420869, 'comment_body': 'The summary of the blog post will be autogenerated. However, if the user creates a new blog but closes the window without saving it as a draft or publishing it, We will have a blog post model created but it will have no summary model. Then while generating blog cards on the blog dashboard, it may go untracked, as we will query all the blog post summary models using the user id to display the cards. So I thought it to be better to generate the summary model at the same time and update it accordingly.', 'comment_created': datetime.datetime(2021, 6, 12, 18, 30, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 650420884, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 12, 18, 30, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 650421112, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 12, 18, 33, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 650421294, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 12, 18, 35, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 650422589, 'comment_body': ""I tried using blog.id but it gives errors as we receive a query string `Query(kind='BlogPostRightsModel', filters=AND(FilterNode('deleted', '=', False), FilterNode('editor_ids', '=', 'id_x')))` using `get_all().filter`.\r\nWe then use blog.key to receive the key of the model like `Key('BlogPostRightsModel', 'blog_post_model')` and then we use `.id()` to get its id."", 'comment_created': datetime.datetime(2021, 6, 12, 18, 50, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 650478632, 'comment_body': 'Try naming them in a way that makes it easy to tell what they are, e.g. blog_post_rights_for_post_1, etc.', 'comment_created': datetime.datetime(2021, 6, 13, 6, 42, 47, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 650478715, 'comment_body': ""Good question -- I don't see a use case currently, but we might in the future, e.g. if we're trying to debug a problem, and in such cases it helps to have the index already built."", 'comment_created': datetime.datetime(2021, 6, 13, 6, 43, 44, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 650478808, 'comment_body': 'Looks good, but just to check, can blog posts be unpublished after they\'re published? If so, then this is slightly inaccurate because the value might be non-None even if the blog post is not currently published. That can be fixed by changing the last part to ""if the blog post has never been published.""', 'comment_created': datetime.datetime(2021, 6, 13, 6, 45, 2, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 650478869, 'comment_body': 'Oh I see. But then can you generate the summary model the usual way when you create the blog post model (by using properties from the blog post model in the same way that you would in general), rather than expose a general special-case create_summary() function? That would be simpler and prevent others from calling this erroneously.', 'comment_created': datetime.datetime(2021, 6, 13, 6, 45, 51, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 650479187, 'comment_body': ""That's probably because you might have forgotten to add .fetch() after the filter(). Once you do that, `.id` should work."", 'comment_created': datetime.datetime(2021, 6, 13, 6, 49, 2, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 650483725, 'comment_body': ""I don't want to fetch the complete model as I just want the id. So I did not add .fetch()"", 'comment_created': datetime.datetime(2021, 6, 13, 7, 32, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 650483861, 'comment_body': 'Done. Removed the create method. Will autogenerate the model when the blog post model is generated.', 'comment_created': datetime.datetime(2021, 6, 13, 7, 34, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 650483963, 'comment_body': 'Fixed the docstring as it can be unpublished and then published.', 'comment_created': datetime.datetime(2021, 6, 13, 7, 34, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 650484288, 'comment_body': 'Thank you. Indexed the field.', 'comment_created': datetime.datetime(2021, 6, 13, 7, 38, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 650485024, 'comment_body': 'Look into ""projection queries"". Can they help you here?', 'comment_created': datetime.datetime(2021, 6, 13, 7, 44, 43, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 650485881, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 13, 7, 52, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 650506466, 'comment_body': ""Even after using projection query we will have to use.key as 'id' for models is always stored as a part of key and not as separate property.\r\nThe model I get after performing fetch() is : `BlogPostRightsModel(key=Key('BlogPostRightsModel', 'blog_post_id'), blog_post_is_published=True, created_on=datetime.datetime(2021, 6, 13, 10, 27, 32, 606512), deleted=False, editor_ids=[u'user_2'], last_updated=datetime.datetime(2021, 6, 13, 10, 27, 32, 606518))`\r\nSo, we will have to use `.key`"", 'comment_created': datetime.datetime(2021, 6, 13, 10, 46, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 650569016, 'comment_body': ""OK, here's the thing -- pretty much nothing else in the codebase uses key.id, generally speaking (I note a few exceptions that have crept in). So, it would be better to standardize.\r\n\r\nI don't think what you're saying is correct, did you actually try out using `id`? See e.g. base_model/gae_models.py and take a look at export_data() for the BaseSnapshotMetadataModel. Note that `id` is defined as you have it in BaseModel."", 'comment_created': datetime.datetime(2021, 6, 13, 19, 44, 15, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 650571239, 'comment_body': ""No, let's keep these two things separate. The reason is that wipeout is in nature quite a separate component that doesn't depend on other parts of the codebase (not 100 % ofc), this is done to ensure that the deletion works properly and that changes to the other parts of the codebase do not affect the wipeout procedure that much."", 'comment_created': datetime.datetime(2021, 6, 13, 20, 6, 22, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 650572107, 'comment_body': 'Please remember to later verify this in the domain validation and also remember to cal lthe domain validation from the validators.', 'comment_created': datetime.datetime(2021, 6, 13, 20, 14, 7, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 650572206, 'comment_body': 'The second sentence seems a bit redundant to me.', 'comment_created': datetime.datetime(2021, 6, 13, 20, 15, 3, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 650668641, 'comment_body': 'Ah sorry, I was calling `id()` in `blog.id`. So it was giving errors. Fixed.', 'comment_created': datetime.datetime(2021, 6, 14, 6, 6, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 650669287, 'comment_body': 'Sure. Thanks', 'comment_created': datetime.datetime(2021, 6, 14, 6, 8, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 650669347, 'comment_body': 'Removed.', 'comment_created': datetime.datetime(2021, 6, 14, 6, 8, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 650669852, 'comment_body': 'Done. PTAL.', 'comment_created': datetime.datetime(2021, 6, 14, 6, 10, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 650977753, 'comment_body': '```suggestion\r\n"""""" Validators for Blog models.""""""\r\n```', 'comment_created': datetime.datetime(2021, 6, 14, 14, 4, 11, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 650978971, 'comment_body': 'Any specific reason for the `if` check?', 'comment_created': datetime.datetime(2021, 6, 14, 14, 5, 46, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 650979488, 'comment_body': ""```suggestion\r\n        return '[A-Za-z0-9-_]{1,%s}$' % (base_models.ID_LENGTH)\r\n```\r\n\r\nOptional nit^ (ditto in other places)"", 'comment_created': datetime.datetime(2021, 6, 14, 14, 6, 26, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 650980818, 'comment_body': ""Should we use `base_models.ID_LENGTH` instead of 12? [Considering that we change the value of the constant in the future, then we don't have to make a change in all the places.]"", 'comment_created': datetime.datetime(2021, 6, 14, 14, 8, 1, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 650985536, 'comment_body': ""```suggestion\r\nclass BlogPostModelAuditOneOffJob(ProdValidationAuditOneOffJob):\r\n```\r\n\r\nNit^ (here and wherever possible, one-line is simple to read compare to multiline and that's why we try to avoid premature line breaks.)"", 'comment_created': datetime.datetime(2021, 6, 14, 14, 13, 31, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 651021237, 'comment_body': 'Can you implement `apply_deletion_policy` for the `BlogPostRightsModel` and then use it here (see https://github.com/oppia/oppia/blob/develop/core/storage/user/gae_models.py#L2555)', 'comment_created': datetime.datetime(2021, 6, 14, 14, 52, 54, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 651030837, 'comment_body': 'What happens if `editor_ids` are empty, can admin add more editors?', 'comment_created': datetime.datetime(2021, 6, 14, 15, 2, 41, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 651031909, 'comment_body': ""Why `LOCALLY_PSEUDONYMIZE`? In the wipeout service, you're removing the user ID from `editor_ids` but not pseudonymizing it. Should this be `DELETE`?"", 'comment_created': datetime.datetime(2021, 6, 14, 15, 3, 52, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 651034239, 'comment_body': '```suggestion\r\n            blog_post_models_list + blog_post_summary_models_list)\r\n```', 'comment_created': datetime.datetime(2021, 6, 14, 15, 6, 47, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 651109785, 'comment_body': 'We will have blog admins and admin which will have access to edit all the blog posts. ', 'comment_created': datetime.datetime(2021, 6, 14, 16, 42, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 651168510, 'comment_body': 'Add a newline above*', 'comment_created': datetime.datetime(2021, 6, 14, 18, 11, 17, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 651169238, 'comment_body': 'I think we should index this field as can be useful to fetch all the models created by the given user*', 'comment_created': datetime.datetime(2021, 6, 14, 18, 12, 30, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 651169667, 'comment_body': 'indexed is set to False by default, right?', 'comment_created': datetime.datetime(2021, 6, 14, 18, 13, 6, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 651171995, 'comment_body': '`author_id` is not indexed, can we doa query without it?', 'comment_created': datetime.datetime(2021, 6, 14, 18, 16, 44, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 651173915, 'comment_body': 'Are we expecting it to be a versioned model? (Considering in the future we are expecting the blog to be edited and keep the history?) [not sure, have less context about the project!]', 'comment_created': datetime.datetime(2021, 6, 14, 18, 19, 50, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 651174662, 'comment_body': '```suggestion\r\n        """"""Check whether BlogPostModel references user.\r\n```', 'comment_created': datetime.datetime(2021, 6, 14, 18, 20, 55, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 651176244, 'comment_body': 'Remove newline*', 'comment_created': datetime.datetime(2021, 6, 14, 18, 23, 19, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 651177052, 'comment_body': 'Can we use cls.get_new_id instead of rewriting this hash generator?', 'comment_created': datetime.datetime(2021, 6, 14, 18, 24, 36, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 651178890, 'comment_body': ""Generally, we have these methods in domain class where we create such instance of invalid BlogPost object and then populate it and stored it as a model after validating the domain object. \r\n\r\nI'm considering the model we are creating here is invalid, right? Also, how are we going to use this method in the future?"", 'comment_created': datetime.datetime(2021, 6, 14, 18, 27, 27, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 651191827, 'comment_body': 'Are we expecting `url_fragment` to be unique for each blog? If yes, do we have any validator for the same? Also, can we use that for creating an id/hash for the model? ', 'comment_created': datetime.datetime(2021, 6, 14, 18, 47, 9, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 651192126, 'comment_body': 'Remove extra newline*', 'comment_created': datetime.datetime(2021, 6, 14, 18, 47, 38, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 651194504, 'comment_body': '```suggestion\r\n    published_on = datastore_services.DateTimeProperty(indexed=True)\r\n```', 'comment_created': datetime.datetime(2021, 6, 14, 18, 51, 16, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 651196687, 'comment_body': 'Any specific reason for having this as a separate function and not using BlogPostSummaryModel.get_multi(...)?', 'comment_created': datetime.datetime(2021, 6, 14, 18, 54, 37, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 651197920, 'comment_body': 'Implemented `deassign_user_from_all_blog_posts` and used it in wipeout.', 'comment_created': datetime.datetime(2021, 6, 14, 18, 56, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 651198063, 'comment_body': 'done.', 'comment_created': datetime.datetime(2021, 6, 14, 18, 56, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 651198165, 'comment_body': 'done.', 'comment_created': datetime.datetime(2021, 6, 14, 18, 56, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 651198525, 'comment_body': 'I think `published` should be enough here, considering the model/class name is providing the context? (We have a similar pattern for other models, right?)', 'comment_created': datetime.datetime(2021, 6, 14, 18, 57, 22, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 651199365, 'comment_body': 'Do we also need owner_id? [How ill we know the owner of the blog post?]', 'comment_created': datetime.datetime(2021, 6, 14, 18, 58, 45, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 651224078, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 14, 19, 38, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 651224159, 'comment_body': 'Removed, item will always have author id.', 'comment_created': datetime.datetime(2021, 6, 14, 19, 38, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 651224182, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 14, 19, 38, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 651225028, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 14, 19, 39, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 651225261, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 14, 19, 40, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 651225288, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 14, 19, 40, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 651226222, 'comment_body': 'All the string properties are indexed, https://cloud.google.com/appengine/docs/standard/python/ndb/entity-property-reference#types\r\nBut added to ensure no confusions in future.', 'comment_created': datetime.datetime(2021, 6, 14, 19, 41, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 651226353, 'comment_body': 'Yup, it is added to remove any confusion in future.', 'comment_created': datetime.datetime(2021, 6, 14, 19, 41, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 651226636, 'comment_body': 'Added author id to be indexed.', 'comment_created': datetime.datetime(2021, 6, 14, 19, 42, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 651226678, 'comment_body': 'We are having no plans currently to introduce the history tab or something similar for blog posts. We will always be displaying the latest blog post. I have mentioned this in the proposal as a reason to chose base models.', 'comment_created': datetime.datetime(2021, 6, 14, 19, 42, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 651227315, 'comment_body': 'Done. Thanks. Silly one! Sorry.', 'comment_created': datetime.datetime(2021, 6, 14, 19, 43, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 651227351, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 14, 19, 43, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 651229814, 'comment_body': 'get_new_id also takes entity name and generates a id containing it. I wanted to use the generated id for generating URL fragment of the blog post, which will be similar to one medium has, hyphened title words with a random id at end. So generated the blog id which will just be a random string of chars. So the URL fragment will contain the id in the end(just like in topic)', 'comment_created': datetime.datetime(2021, 6, 14, 19, 47, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 651232208, 'comment_body': ""The base models  that are not versioned in our code base use create method in storage layer rather than in domain mostly. eg: feedback, AppFeedbackReportModel, TaskEntryModel ( in improvements). \r\nWe will call this method in the service layer to generate the first instance of the blog post. This is so that a blog post is created even if the user does not save it as draft or publishes it. It will be created if the user clicks on the 'new post button'. "", 'comment_created': datetime.datetime(2021, 6, 14, 19, 51, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 651232981, 'comment_body': 'We have the author id in the blog post model/ blog summary model.', 'comment_created': datetime.datetime(2021, 6, 14, 19, 52, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 651233271, 'comment_body': 'In the proposal sean recommended it to be `blog_post_is_published` for removing any confusions afterwards. ', 'comment_created': datetime.datetime(2021, 6, 14, 19, 52, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 651233560, 'comment_body': 'Removed. We can use get_multi() directly.', 'comment_created': datetime.datetime(2021, 6, 14, 19, 53, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 651233649, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 14, 19, 53, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 651233729, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 14, 19, 53, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 651234273, 'comment_body': '`url fragment` will be unique for each blog. It will be of the form Title.blog-post_id. Just like we have in medium.', 'comment_created': datetime.datetime(2021, 6, 14, 19, 54, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 651241395, 'comment_body': 'I think we should keep all this info in the rights model as well i.e, the rights model should have all the info related to blog_post, right?', 'comment_created': datetime.datetime(2021, 6, 14, 20, 6, 48, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 651243294, 'comment_body': 'How are we going to ensure the new blog has a unique url_fragment?  Also, can we use that for creating an id/hash for the model?\r\n\r\n', 'comment_created': datetime.datetime(2021, 6, 14, 20, 9, 56, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 651244663, 'comment_body': 'But we should create the domain object first and can only save it to model/datastore once it\'s valid (that is why we have the domain layer)\r\n\r\nby ""valid"" I mean the schema is valid and passes the BlogPost.validate method.', 'comment_created': datetime.datetime(2021, 6, 14, 20, 12, 6, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 651245747, 'comment_body': 'Nvm, I got the answer! I think we are going to generate the id first and use the id to create url_fragment, right?', 'comment_created': datetime.datetime(2021, 6, 14, 20, 13, 49, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 651246281, 'comment_body': 'Got it, thanks for the explanation! :)', 'comment_created': datetime.datetime(2021, 6, 14, 20, 14, 47, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 651246804, 'comment_body': 'Thanks for the explanation! ', 'comment_created': datetime.datetime(2021, 6, 14, 20, 15, 34, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 651247191, 'comment_body': 'Yup.', 'comment_created': datetime.datetime(2021, 6, 14, 20, 16, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 651248293, 'comment_body': 'The created object is the valid one. We will have 2 types of validations, this model will fail validation in strict mode i.e when the blog post is published.', 'comment_created': datetime.datetime(2021, 6, 14, 20, 18, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 651253181, 'comment_body': 'There will be no difference in the rights as owner and editor, so is it required? Both will be able to publish, delete, edit and unpublish the blog post. The difference will be between blog admin and editor, blog admin will be able to access all the blog posts,  add list of custom tags for blog posts and add and remove the users as blog editors. Where as blog editors can only access the blog posts for which they are editors for editing ( and create new bog posts as well)', 'comment_created': datetime.datetime(2021, 6, 14, 20, 25, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 651701845, 'comment_body': '```suggestion\r\n        """"""Model contains data to be deleted corresponding to a user: editor_ids\r\n        field. It does not delete the model but removes the user ID from the\r\n        list of editor IDs corresponding to a blog post rights model.\r\n```', 'comment_created': datetime.datetime(2021, 6, 15, 11, 34, 14, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 651702202, 'comment_body': '```suggestion\r\n            cls.update_timestamps_multi(blog_post_rights_models)\r\n            cls.put_multi(blog_post_rights_models)\r\n```', 'comment_created': datetime.datetime(2021, 6, 15, 11, 34, 45, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 651712353, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 15, 11, 49, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 651712386, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 15, 11, 49, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 652037697, 'comment_body': ""I discussed with Sean and Prayush about adding a blog post owner. So we will only have editor for the blog post who will be the author of the blog post. We don't have any plans to support multiple people editing the blog post, though for making it easy in the future if we ever come up with multiple people editing a single blog post, we kept editor_ids field as a list.\r\nSo for now we will be going with the editor_ids field only.\r\n"", 'comment_created': datetime.datetime(2021, 6, 15, 18, 11, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}]","[{'commit_sha': 'f220000a0ce4db1a0c2819d7b0b94ae8bafb7f03', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e551b780e706964424557059e5d60943392e3441', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4924316046e32098de49e3c44eadb6887741d671', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba6c95ebbfbd04e7c635f1caabd25298f7effca6', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0cb7fdf6cf87d371c7e98f12d3fece37e5b37b68', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38efbbce690d38981427cdf540c57d4c18209720', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '304bc5aba10360396409145d40d2dfe138292783', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05b858a5df9537c1c48c5da81545375887808756', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c7d5c0d529315cf0011fd197b7495245e4ced09', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2162747213d8b36229191140b5cc12bf6c68587c', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c610fc4bfc6881cc03edc87c442dc5c3e57205f', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '55df0c4ab93cf7d699bc64471980ea917e4f251a', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b2386d3177db1b52399fd223f4df97617662ee9c', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8abaca68393bc7d1e76dc1eba667c4ec2b674ac0', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8badd87ca580231bd95c4b26b0ebabe099f8eb57', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51512e082d993edfe9a5f117f44052d7ed2a1463', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1efdfe6483d1ae913f8172b5bac1b07cdba5f35a', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b3ea398cfc49cca6da4d57ca7a2838c222c0e69', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9e036c857425dbd6608ca1b8db05cb0490af006', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4563d740a88654be565d3834d2139b87e3b71ddf', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56b721f380293780364db2402c89140b63e071e5', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e6416dfea92c660509e149756722bc7e60b210e', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9a99608167936d41faa23ca63bd72422f74d65d', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3790ce23faccb0e128b73a83309531916b863ba', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93561bba6488f350ef29515fb54aa853276639e4', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4fa58ba95e98a6e50a075b0bae69e5b986585d8f', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '78f580cd246cd7cd5b97a59cb272845976588b95', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e105b043b3f10b933e6b5a1be470d2a9fdfc9bee', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15013d579f9e081ad9b59cd577f9494eeb73a8fb', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e5ef6197d5595726dd245f207f76e96c85d45258', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b37096a6dc574973df663f0cd6b2206181cac09f', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2593f4ddbd61bf5887f313e70eae2f4bff65601', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e147bd8e127f8e8acab5cba00a2f9e6f39ace39', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '323a3df45e302ca89a8bd7bdf091f42d28fa2ad6', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'edcca45bc279d71b6442232ce5f07ead2673d082', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34a68b05308e6b3ea9ca19dd0f5a2c7122af58f2', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c04c0db04a6c041c62b0eb09539e4255a3e56edd', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7447e55d9ea2f903d5315b6402d1514f2f2322f4', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a22332b2363f33f1e8fc66a013ae473a5131d1c8', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50a61625edd8228f82f1ff657642f7664866ad11', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66a1a5d3c2f89149fea352b4aacf348aeb4c72d7', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17c34ec395ebd5ece87d222c645186a12b8f0646', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc9d90d0d72e33f204375d99d0616b27e1bc6b5e', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07279ce08f668fe854a8172c87c7b6a9100ab7ab', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}]",Rijuta Singh,68547101,,User,,7,,13,22
672895687,"Milestone 1.2 : Adds Blog Domain, Services and Validators.","## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of N.A
2. This PR does the following: Adds domain, service and validator functions along with their tests for Blogs.

## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".
## PR Pointers

- Make sure to follow the [instructions for making a code change](https://github.com/oppia/oppia/wiki/Contributing-code-to-Oppia#instructions-for-making-a-code-change).
- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays.
- Never force push. If you do, your PR will be closed.
- Oppiabot can assign anyone for review/help if you leave a comment like the following: ""{{Question/comment}} @{{reviewer_username}} PTAL""
- Some of the e2e tests are flaky, and can fail for reasons unrelated to your PR. We are working on fixing this, but in the meantime, if you need to restart the tests, please check the [""If your build fails"" wiki page](https://github.com/oppia/oppia/wiki/If-your-build-fails).
",True,13118,https://api.github.com/repos/oppia/oppia/pulls/13118,https://github.com/oppia/oppia/pull/13118,closed,2751,111,10,74,18,124,1,1,[{'name': 'PR: LGTM'}],2021-06-17 18:40:06+00:00,2021-06-23 06:34:47+00:00,474881.0,"5 days, 11:54:41","[{'comment_id': 654656197, 'comment_body': '```suggestion\r\n  ""VALID_BLOG_POST_TITLE_REGEX"": ""^[a-zA-Z][a-zA-Z]+(-[a-zA-Z]+)*$"",\r\n```', 'comment_created': datetime.datetime(2021, 6, 18, 20, 11, 10, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 654656497, 'comment_body': '```suggestion\r\n        """"""Constructs a BlogPost domain object.\r\n```', 'comment_created': datetime.datetime(2021, 6, 18, 20, 11, 53, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 654658290, 'comment_body': 'Should there be a check on the length of the tag? If the length is 0, then these lines will raise errors.', 'comment_created': datetime.datetime(2021, 6, 18, 20, 16, 41, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 654658902, 'comment_body': 'Can we move this ""12"" to a constant?', 'comment_created': datetime.datetime(2021, 6, 18, 20, 18, 26, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 654659428, 'comment_body': '```suggestion\r\n            if len(title) == 0:\r\n```', 'comment_created': datetime.datetime(2021, 6, 18, 20, 20, 5, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 654663470, 'comment_body': 'The space [a-zA-Z ] is added to allow space between words.\r\nThis check will ensure that title does not start with space but allows it between words after.', 'comment_created': datetime.datetime(2021, 6, 18, 20, 31, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 654684559, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 18, 21, 30, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 654684588, 'comment_body': 'Added a check on line number: 148', 'comment_created': datetime.datetime(2021, 6, 18, 21, 30, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 654684614, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 18, 21, 30, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 654684639, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 18, 21, 30, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 654752088, 'comment_body': ""In that case shouldn't you use `\\s`? "", 'comment_created': datetime.datetime(2021, 6, 19, 5, 35, 27, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 654752211, 'comment_body': ""```suggestion\r\n                    'Tag should not be empty, received: \\'\\'')\r\n```"", 'comment_created': datetime.datetime(2021, 6, 19, 5, 36, 57, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 654921262, 'comment_body': 'We provide the regex expression in raw form, I think. I tried writing [a-zA-Z/s] it gives the following error:\r\n![Screenshot from 2021-06-20 12-42-56](https://user-images.githubusercontent.com/68547101/122672525-88f0ce00-d1e9-11eb-9bc1-17bc1739c794.png)\r\n', 'comment_created': datetime.datetime(2021, 6, 20, 11, 34, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 654921601, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 20, 11, 37, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 654955486, 'comment_body': '@seanlip I thought we were forbidding spaces and non-standard characters from ID, should we enforce that here or add a TODO?', 'comment_created': datetime.datetime(2021, 6, 20, 16, 0, 50, tzinfo=datetime.timezone.utc), 'commenter': 'brianrodri', 'type': 'User'}, {'comment_id': 654955668, 'comment_body': '```suggestion\r\n            if not self.content:\r\n```', 'comment_created': datetime.datetime(2021, 6, 20, 16, 2, 11, tzinfo=datetime.timezone.utc), 'commenter': 'brianrodri', 'type': 'User'}, {'comment_id': 654955723, 'comment_body': '```suggestion\r\n            if not tag:\r\n```', 'comment_created': datetime.datetime(2021, 6, 20, 16, 2, 36, tzinfo=datetime.timezone.utc), 'commenter': 'brianrodri', 'type': 'User'}, {'comment_id': 654955757, 'comment_body': 'Please use a regex to test this instead.', 'comment_created': datetime.datetime(2021, 6, 20, 16, 3, 5, tzinfo=datetime.timezone.utc), 'commenter': 'brianrodri', 'type': 'User'}, {'comment_id': 654955850, 'comment_body': '```suggestion\r\n            if not tags:\r\n```', 'comment_created': datetime.datetime(2021, 6, 20, 16, 3, 45, tzinfo=datetime.timezone.utc), 'commenter': 'brianrodri', 'type': 'User'}, {'comment_id': 654955895, 'comment_body': '```suggestion\r\n            if not title:\r\n```', 'comment_created': datetime.datetime(2021, 6, 20, 16, 4, 15, tzinfo=datetime.timezone.utc), 'commenter': 'brianrodri', 'type': 'User'}, {'comment_id': 654955977, 'comment_body': '```suggestion\r\n        if not thumbnail_filename:\r\n```', 'comment_created': datetime.datetime(2021, 6, 20, 16, 5, 2, tzinfo=datetime.timezone.utc), 'commenter': 'brianrodri', 'type': 'User'}, {'comment_id': 654955998, 'comment_body': '```suggestion\r\n            if not self.summary:\r\n```', 'comment_created': datetime.datetime(2021, 6, 20, 16, 5, 18, tzinfo=datetime.timezone.utc), 'commenter': 'brianrodri', 'type': 'User'}, {'comment_id': 654956055, 'comment_body': 'Please remove these extra trailing new lines in function definitions, here and elsewhere.', 'comment_created': datetime.datetime(2021, 6, 20, 16, 5, 50, tzinfo=datetime.timezone.utc), 'commenter': 'brianrodri', 'type': 'User'}, {'comment_id': 654956078, 'comment_body': '```suggestion\r\n            if not title:\r\n```', 'comment_created': datetime.datetime(2021, 6, 20, 16, 6, 5, tzinfo=datetime.timezone.utc), 'commenter': 'brianrodri', 'type': 'User'}, {'comment_id': 654956104, 'comment_body': '```suggestion\r\n            if not tag:\r\n```', 'comment_created': datetime.datetime(2021, 6, 20, 16, 6, 22, tzinfo=datetime.timezone.utc), 'commenter': 'brianrodri', 'type': 'User'}, {'comment_id': 654956128, 'comment_body': 'Ditto, please use a regex to check for this.', 'comment_created': datetime.datetime(2021, 6, 20, 16, 6, 34, tzinfo=datetime.timezone.utc), 'commenter': 'brianrodri', 'type': 'User'}, {'comment_id': 654956272, 'comment_body': '```suggestion\r\n        return get_blog_post_from_model(blog_post_model)\r\n```', 'comment_created': datetime.datetime(2021, 6, 20, 16, 7, 35, tzinfo=datetime.timezone.utc), 'commenter': 'brianrodri', 'type': 'User'}, {'comment_id': 654956363, 'comment_body': '```suggestion\r\n    return get_blog_post_from_model(blog_post_model)\r\n```', 'comment_created': datetime.datetime(2021, 6, 20, 16, 7, 58, tzinfo=datetime.timezone.utc), 'commenter': 'brianrodri', 'type': 'User'}, {'comment_id': 654956583, 'comment_body': '```suggestion\r\n    return get_blog_post_summary_from_model(blog_post_summary_model[0])\r\n```', 'comment_created': datetime.datetime(2021, 6, 20, 16, 9, 16, tzinfo=datetime.timezone.utc), 'commenter': 'brianrodri', 'type': 'User'}, {'comment_id': 654956656, 'comment_body': '```suggestion\r\n    return [\r\n        get_blog_post_from_model(blog_post)\r\n        for blog_post in backend_blog_post_models\r\n    ]\r\n```', 'comment_created': datetime.datetime(2021, 6, 20, 16, 9, 46, tzinfo=datetime.timezone.utc), 'commenter': 'brianrodri', 'type': 'User'}, {'comment_id': 654961449, 'comment_body': ""It's for the blog post title, not ID. The title will be something like:- 'Help Provide Quality Education through Oppia'"", 'comment_created': datetime.datetime(2021, 6, 20, 16, 52, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 654969644, 'comment_body': 'This file is not related to Exploration, right? Maybe create a separate section `Blog post project` and add all the files there* (The project sections are placed in alphabetical sorted order*)', 'comment_created': datetime.datetime(2021, 6, 20, 18, 6, 37, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 654969841, 'comment_body': ""Why this need to be placed in constnats.ts? (I think in constnats.ts we only add constant which need to be used/shared in both frontend/backend and model_id_length doesn't look like the information needed for the frontend, right?)"", 'comment_created': datetime.datetime(2021, 6, 20, 18, 8, 14, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 654969902, 'comment_body': 'Extra newline? (not sure!)', 'comment_created': datetime.datetime(2021, 6, 20, 18, 8, 46, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 654970022, 'comment_body': '```suggestion\r\n            content: str. The html content of the blog post.\r\n```', 'comment_created': datetime.datetime(2021, 6, 20, 18, 9, 53, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 654970135, 'comment_body': 'follow the order of function agrs and place it simialrly', 'comment_created': datetime.datetime(2021, 6, 20, 18, 11, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 654970378, 'comment_body': '```suggestion\r\n        """"""Checks whether the thumbnail filename of the blog post is a valid\r\n        one.\r\n```', 'comment_created': datetime.datetime(2021, 6, 20, 18, 12, 47, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 654970418, 'comment_body': 'Add Raise docstring* (Ditto elsewhere)', 'comment_created': datetime.datetime(2021, 6, 20, 18, 13, 14, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 654970933, 'comment_body': 'Do we validate model `ID` in domain layer? (I think we expected such check to exist in model_validator layer)', 'comment_created': datetime.datetime(2021, 6, 20, 18, 18, 4, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 654971190, 'comment_body': ""```suggestion\r\n                    'Tag should not be empty.'\r\n```\r\n\r\nThis^ much should be enough, right?"", 'comment_created': datetime.datetime(2021, 6, 20, 18, 20, 43, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 654971298, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 20, 18, 21, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 654971319, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 20, 18, 21, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 654971332, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 20, 18, 22, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 654971338, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 20, 18, 22, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 654971345, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 20, 18, 22, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 654971359, 'comment_body': 'thumbnail filename can be None as well, so if we change it to `not thumbnail_filename`, Validation will fail if its None.', 'comment_created': datetime.datetime(2021, 6, 20, 18, 22, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 654971381, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 20, 18, 22, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 654971393, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 20, 18, 22, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 654971419, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 20, 18, 22, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 654971420, 'comment_body': 'Are we not allowing tags to have numbers? Like a `covid19`, `GSoC2020`?', 'comment_created': datetime.datetime(2021, 6, 20, 18, 22, 33, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 654971428, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 20, 18, 22, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 654971450, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 20, 18, 22, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 654971455, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 20, 18, 22, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 654971456, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 20, 18, 22, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 654971458, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 20, 18, 22, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 654971480, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 20, 18, 23, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 654971722, 'comment_body': ""```suggestion\r\n        if len(title) > constants.MAX_CHARS_IN_BLOG_POST_TITLE:\r\n            raise utils.ValidationError(\r\n                'Blog Post title should at most have %d chars, received: %s'\r\n                % (constants.MAX_CHARS_IN_BLOG_POST_TITLE, title))\r\n```\r\n\r\nOptional^"", 'comment_created': datetime.datetime(2021, 6, 20, 18, 25, 45, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 654971771, 'comment_body': 'Remove newline here*', 'comment_created': datetime.datetime(2021, 6, 20, 18, 26, 25, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 654971864, 'comment_body': ""```suggestion\r\n        utils.require_valid_url_fragment(\r\n            url_fragment, 'Blog Post URL Fragment', \r\n            constants.MAX_CHARS_IN_BLOG_POST_URL_FRAGMENT)\r\n```\r\n\r\nOptional^"", 'comment_created': datetime.datetime(2021, 6, 20, 18, 27, 10, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 654972070, 'comment_body': 'tod_dict method is mostly used to send data to the frontend, in that case, should we also add `published_on` and `last_updated` information? [not sure!] (I see this information in Blog posts.) ', 'comment_created': datetime.datetime(2021, 6, 20, 18, 29, 15, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 654972132, 'comment_body': 'not all fileds, right?', 'comment_created': datetime.datetime(2021, 6, 20, 18, 29, 59, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 654972251, 'comment_body': 'using the service layer in the domain layer is prohibited, right?\r\n\r\n/cc @vojtechjelinek ', 'comment_created': datetime.datetime(2021, 6, 20, 18, 30, 59, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 654972292, 'comment_body': '```suggestion\r\n            BlogPost. The corresponding blog post domain object.\r\n```', 'comment_created': datetime.datetime(2021, 6, 20, 18, 31, 25, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 654972357, 'comment_body': 'Ditto*\r\n', 'comment_created': datetime.datetime(2021, 6, 20, 18, 32, 5, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 654972603, 'comment_body': 'Do we also need deserialize function?', 'comment_created': datetime.datetime(2021, 6, 20, 18, 34, 10, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 654972673, 'comment_body': 'This should match the field name, right?', 'comment_created': datetime.datetime(2021, 6, 20, 18, 35, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 654986533, 'comment_body': 'Got it, sorry for confusion. LGTM in that case.', 'comment_created': datetime.datetime(2021, 6, 20, 20, 43, 54, tzinfo=datetime.timezone.utc), 'commenter': 'brianrodri', 'type': 'User'}, {'comment_id': 654986673, 'comment_body': 'Dedent by 4 spaces, here and elsewhere.\r\n```suggestion\r\n        one.\r\n```', 'comment_created': datetime.datetime(2021, 6, 20, 20, 45, 30, tzinfo=datetime.timezone.utc), 'commenter': 'brianrodri', 'type': 'User'}, {'comment_id': 654986749, 'comment_body': 'Got it, looks good to me then.', 'comment_created': datetime.datetime(2021, 6, 20, 20, 46, 36, tzinfo=datetime.timezone.utc), 'commenter': 'brianrodri', 'type': 'User'}, {'comment_id': 655272378, 'comment_body': 'I will discuss this once with Sean and blogging team, We currently do not  have numbers in tags for explorations and elsewhere. Also the list of custom tags provided by the blogging team is little too broad and collective rather than being topic specific and does not contain any numbers, eg: \r\n1. News\r\n2. International\r\n3. Educators\r\n4. Learners\r\n ', 'comment_created': datetime.datetime(2021, 6, 21, 10, 49, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 655272515, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 21, 10, 49, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 655272525, 'comment_body': 'Removed. We are already validating ID in validators. ', 'comment_created': datetime.datetime(2021, 6, 21, 10, 49, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 655272550, 'comment_body': 'Added.', 'comment_created': datetime.datetime(2021, 6, 21, 10, 49, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 655272557, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 21, 10, 49, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 655272582, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 21, 10, 49, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 655272593, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 21, 10, 49, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 655272633, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 21, 10, 49, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 655272662, 'comment_body': 'Removed.', 'comment_created': datetime.datetime(2021, 6, 21, 10, 49, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 655272682, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 21, 10, 49, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 655272775, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 21, 10, 49, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 655272887, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 21, 10, 49, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 655272952, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 21, 10, 50, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 655273156, 'comment_body': 'Thanks. Yup it will be required. Added.', 'comment_created': datetime.datetime(2021, 6, 21, 10, 50, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 655273745, 'comment_body': 'Added last updated and published on. :)', 'comment_created': datetime.datetime(2021, 6, 21, 10, 51, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 655274054, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 21, 10, 51, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 655274116, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 21, 10, 51, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 655275661, 'comment_body': ""To remove confusion in front-end as the ID of the BlogPostRights is also the same as the ID of all the models of Blog Post, and will be used to fetch the complete blog post, we named it 'blog_post_id' instead of 'id'."", 'comment_created': datetime.datetime(2021, 6, 21, 10, 54, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 655279093, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 21, 11, 0, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 655281586, 'comment_body': ""I want to have the author's name in the frontend rather than the ID, Will you please suggest a better way to do this?\r\n(I found similar examples in topic domain, to get the manager names in the topic rights dict.)"", 'comment_created': datetime.datetime(2021, 6, 21, 11, 4, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 656245357, 'comment_body': 'Done. Both capital and numbers will also be allowed.', 'comment_created': datetime.datetime(2021, 6, 22, 13, 53, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 656259031, 'comment_body': ""@vojtechjelinek Can you please suggest whether it's fine to do it this way? (i.e, use services layer in domain class) "", 'comment_created': datetime.datetime(2021, 6, 22, 14, 8, 47, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 656271145, 'comment_body': 'Why are we looping over all the models? Instead, can we query over author_id &  blog_post_is_published? [Note: `get_by_user` will return a limited number of models]', 'comment_created': datetime.datetime(2021, 6, 22, 14, 21, 47, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 656274643, 'comment_body': 'How are we going to use this function? Also, we expect such functions to be paginated!', 'comment_created': datetime.datetime(2021, 6, 22, 14, 25, 32, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 656275012, 'comment_body': 'Remove extra newline*', 'comment_created': datetime.datetime(2021, 6, 22, 14, 25, 55, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 656277076, 'comment_body': 'Should we validate based on the published status?', 'comment_created': datetime.datetime(2021, 6, 22, 14, 28, 3, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 656278165, 'comment_body': 'Also, should we internally do a strict validation if the blog is published instead of service layer deciding when to do strict validation? (not sure!)', 'comment_created': datetime.datetime(2021, 6, 22, 14, 29, 14, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 656280872, 'comment_body': 'Should we update the summary and rights inside the `_save_blog_post` function? (This will help us ensure that the summary and rights are always updated!)\r\n\r\nAlso, can we do the datastore put the call in transaction? [Optional]', 'comment_created': datetime.datetime(2021, 6, 22, 14, 32, 12, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 656282436, 'comment_body': 'Do we need to update the summary and blog model as well?', 'comment_created': datetime.datetime(2021, 6, 22, 14, 33, 54, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 656283999, 'comment_body': 'Any specific reason for the other two `_save*` function to be private and this one is public?', 'comment_created': datetime.datetime(2021, 6, 22, 14, 35, 24, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 656286995, 'comment_body': 'Are we expecting to have a ""random"" value at the end of the URL fragment? (not sure!)', 'comment_created': datetime.datetime(2021, 6, 22, 14, 38, 35, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 656289089, 'comment_body': 'Do we have any object for the change-dict-schema? [This is going to be used for the schema validation of the args received from the client.]', 'comment_created': datetime.datetime(2021, 6, 22, 14, 40, 48, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 656290768, 'comment_body': 'We use that in some place but we would like to get rid of this behaviour.', 'comment_created': datetime.datetime(2021, 6, 22, 14, 42, 36, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 656293953, 'comment_body': 'Are we expecting to validate the URL fragment is unique? ', 'comment_created': datetime.datetime(2021, 6, 22, 14, 46, 10, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 656295987, 'comment_body': 'Do we need to validate the title in the summary model and blog model is similar?', 'comment_created': datetime.datetime(2021, 6, 22, 14, 47, 57, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 656298643, 'comment_body': 'Do we need to use this action in any role?', 'comment_created': datetime.datetime(2021, 6, 22, 14, 50, 17, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 656307208, 'comment_body': 'Can you check whether we need any custom validator for this model?', 'comment_created': datetime.datetime(2021, 6, 22, 14, 58, 17, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 656311734, 'comment_body': '\r\nThanks for the info @vojtechjelinek \r\n\r\n @Rijuta-s In that case can we follow the pattern we do for exploration?\r\n\r\nI.e, have author_id in domain layer but before sending the dict through API replace author_id with author_username [in controller layer]?', 'comment_created': datetime.datetime(2021, 6, 22, 15, 2, 53, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 656313208, 'comment_body': 'As per offline discussion, we found we only need these function for cacheable models and the blog post models are not expected to be cached so we are going to remove the serialize and deserialize functions*', 'comment_created': datetime.datetime(2021, 6, 22, 15, 4, 33, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 656414298, 'comment_body': ""We only have 2 ways to save a blog post, either as a draft or as published. We don't have any button which allows saving the post without clicking on any one of these.  Whenever a blog post is published strict validation is performed.(i.e even if its already published and user makes changes, the blog post will again have to be published and the strict validation will be performed) We will need to check everytime if the blog_post_is_published is set to true in rights model if we want to decide it internally, as published_on may not be none even if its a draft."", 'comment_created': datetime.datetime(2021, 6, 22, 16, 59, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 656416353, 'comment_body': "" `save_blog_post_rights` will be called when the blog post is either published or is unpublished. If a blog post is already a draft we will save the blog post and summary and no changes in the rights will be made.\r\n\r\nAlso we cannot save the blog post summary directly if the blog post is updated, we will need to generate the summary in that case ( but we don't want to do that in case it is simply published without making any changes)"", 'comment_created': datetime.datetime(2021, 6, 22, 17, 2, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 656416575, 'comment_body': ""No we dont. Published_on field will be now be shown as 'last published on' (in front end). So no changes in summary or blog post model is required."", 'comment_created': datetime.datetime(2021, 6, 22, 17, 3, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 656416671, 'comment_body': 'Yup, we will need to save the blog post rights from the blog admin services as well. Other 2 are not required. So are private.', 'comment_created': datetime.datetime(2021, 6, 22, 17, 3, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 656417267, 'comment_body': 'No we dont have, but before updating any value the validation is performed on the argument. Also only 3 fields can be updated: Thumbnail_filename, content and title without requiring any commit mssg or special rights. So simple validation before updating can serve the purpose.', 'comment_created': datetime.datetime(2021, 6, 22, 17, 4, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 656419362, 'comment_body': 'Yeah, in next PR two roles namely : blog admin and blog post editors will be done. blog admin and admin will have the right to edit any blog post.', 'comment_created': datetime.datetime(2021, 6, 22, 17, 7, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 656543817, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 22, 20, 8, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 656543853, 'comment_body': 'Removed. Will add if it will be required in future (We were discussing about allowing exporting all the blog posts on the site so added it, but removed now)', 'comment_created': datetime.datetime(2021, 6, 22, 20, 8, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 656543881, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 22, 20, 8, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 656543965, 'comment_body': 'Done. Before I was thinking of adding the blog post ID in the front end to the blog post url, but we can add it here as itself. Thanks! :)', 'comment_created': datetime.datetime(2021, 6, 22, 20, 8, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 656544112, 'comment_body': 'Added', 'comment_created': datetime.datetime(2021, 6, 22, 20, 9, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 656544324, 'comment_body': 'Added validation in blog post validations', 'comment_created': datetime.datetime(2021, 6, 22, 20, 9, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 656544708, 'comment_body': ""I don't think any custom validation is required as we are already validating the id, and the user model for editor ids."", 'comment_created': datetime.datetime(2021, 6, 22, 20, 10, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 656545473, 'comment_body': 'Removed serialized.', 'comment_created': datetime.datetime(2021, 6, 22, 20, 11, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 656551579, 'comment_body': 'Thanks for the info!', 'comment_created': datetime.datetime(2021, 6, 22, 20, 21, 33, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 656554223, 'comment_body': 'Thanks for the info!', 'comment_created': datetime.datetime(2021, 6, 22, 20, 26, 1, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}]","[{'commit_sha': 'f220000a0ce4db1a0c2819d7b0b94ae8bafb7f03', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e551b780e706964424557059e5d60943392e3441', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4924316046e32098de49e3c44eadb6887741d671', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba6c95ebbfbd04e7c635f1caabd25298f7effca6', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0cb7fdf6cf87d371c7e98f12d3fece37e5b37b68', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38efbbce690d38981427cdf540c57d4c18209720', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '304bc5aba10360396409145d40d2dfe138292783', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05b858a5df9537c1c48c5da81545375887808756', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c7d5c0d529315cf0011fd197b7495245e4ced09', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2162747213d8b36229191140b5cc12bf6c68587c', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c610fc4bfc6881cc03edc87c442dc5c3e57205f', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '55df0c4ab93cf7d699bc64471980ea917e4f251a', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b2386d3177db1b52399fd223f4df97617662ee9c', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8abaca68393bc7d1e76dc1eba667c4ec2b674ac0', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8badd87ca580231bd95c4b26b0ebabe099f8eb57', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51512e082d993edfe9a5f117f44052d7ed2a1463', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1efdfe6483d1ae913f8172b5bac1b07cdba5f35a', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b3ea398cfc49cca6da4d57ca7a2838c222c0e69', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9e036c857425dbd6608ca1b8db05cb0490af006', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4563d740a88654be565d3834d2139b87e3b71ddf', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '050463828f8ca2576f35ddc0df17ef3dfd23cc0a', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56b721f380293780364db2402c89140b63e071e5', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e6416dfea92c660509e149756722bc7e60b210e', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4491d7f97733db3e8908173892743fe4aa2e2322', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9a99608167936d41faa23ca63bd72422f74d65d', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3790ce23faccb0e128b73a83309531916b863ba', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93561bba6488f350ef29515fb54aa853276639e4', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd6c683ad9e3cd91510576834433ca41802136f87', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4fa58ba95e98a6e50a075b0bae69e5b986585d8f', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '78f580cd246cd7cd5b97a59cb272845976588b95', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e105b043b3f10b933e6b5a1be470d2a9fdfc9bee', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15013d579f9e081ad9b59cd577f9494eeb73a8fb', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e5ef6197d5595726dd245f207f76e96c85d45258', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b37096a6dc574973df663f0cd6b2206181cac09f', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2593f4ddbd61bf5887f313e70eae2f4bff65601', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e147bd8e127f8e8acab5cba00a2f9e6f39ace39', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '323a3df45e302ca89a8bd7bdf091f42d28fa2ad6', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0049c28618ff562f0dd2584dac149dbdcdbb7aef', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '337aea36d2e5602ebaf479d103b578bdf6cbd218', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'edcca45bc279d71b6442232ce5f07ead2673d082', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34a68b05308e6b3ea9ca19dd0f5a2c7122af58f2', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c04c0db04a6c041c62b0eb09539e4255a3e56edd', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f69b8486be43534351b3ebe06e1c3a95c5433071', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7447e55d9ea2f903d5315b6402d1514f2f2322f4', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a22332b2363f33f1e8fc66a013ae473a5131d1c8', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd12ba68cdab3655ae8be7f33a7cb7e8b7cb598b8', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50a61625edd8228f82f1ff657642f7664866ad11', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66a1a5d3c2f89149fea352b4aacf348aeb4c72d7', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17c34ec395ebd5ece87d222c645186a12b8f0646', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc9d90d0d72e33f204375d99d0616b27e1bc6b5e', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2642465753f5a29b0050e0b990448cb6a4ec584b', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '291806929c3d6d4d9e58e2c4c815aae6454593a5', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f40d680e21d474709658692f23e2fa5a00c579d0', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '29614b26124a76c161f5c0bc118c1a32dbea15c5', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa390ee5f598c8a14c1512847f8c2c8e2bdc34c5', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '005d35ff978269462f260da9588e7315ac78dcc8', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b8c9038351dbf72b908f8fd3998a245ddc584497', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88b49882f1406ea176c1eb86946ed25c1e0f3782', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f360ca9d426238c4f601b63bf3689e949664557', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b26bd1875312f75c413fbb92994f4e774ab3a67f', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4bc4926f93050bbdcab36e9d40c578bb378295d', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16a9af1fde4ecaacd6d444801f166084b2a7b524', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e2efc246cd9fce387e9699b757e160e3168f45c9', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a342cde49c4fd17ab766304f240e1ecd4cba478', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7979ddb8f97ad2a308823c675369cca7bc83cd25', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd090b94a3e428012d3a7fdb4cfab8dcbe9813bd2', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b50358c9b50375166046003d61c6d43fdc239c6', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b282c8a322c1e7f21933058a1bd5c6dd8a2f1280', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e50bd85ff3ea6574cfedd62d174e5997db9d7b7', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69644b10be9d57cedd95c3949d2f4e1405d8baba', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c5f7611bcb70d3d0099e19329259795ad05e8e63', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a19978b5b2a0e5b84dbb1f9b2e2b47436d1c334f', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f659cb53095f10630f416f628f99f4f132c0830', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36e19314284fd01fb11dc4dbb0c9d3a8e824b14e', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}]",Rijuta Singh,68547101,,User,,7,,13,22
678490743,Adding Blog Models Validations: Part of Milestone 1.2,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of N.A
2. This PR does the following: Adds the validations added in PR: #13118 according to the new apache beam structure.

## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## Proof that changes are correct
--

## PR Pointers

- Make sure to follow the [instructions for making a code change](https://github.com/oppia/oppia/wiki/Contributing-code-to-Oppia#instructions-for-making-a-code-change).
- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays.
- Never force push. If you do, your PR will be closed.
- Oppiabot can assign anyone for review/help if you leave a comment like the following: ""{{Question/comment}} @{{reviewer_username}} PTAL""
- Some of the e2e tests are flaky, and can fail for reasons unrelated to your PR. We are working on fixing this, but in the meantime, if you need to restart the tests, please check the [""If your build fails"" wiki page](https://github.com/oppia/oppia/wiki/If-your-build-fails).
",True,13232,https://api.github.com/repos/oppia/oppia/pulls/13232,https://github.com/oppia/oppia/pull/13232,closed,1098,1,9,22,17,20,2,2,"[{'name': 'PR: LGTM'}, {'name': 'PR: Affects datastore layer'}]",2021-06-27 10:19:12+00:00,2021-07-13 23:26:59+00:00,1429667.0,"16 days, 13:07:47","[{'comment_id': 665705485, 'comment_body': 'Missing comma, which is important:\r\n\r\n```suggestion\r\n(blog_models,) = models.Registry.import_models([models.NAMES.blog, ])\r\n```', 'comment_created': datetime.datetime(2021, 7, 7, 21, 4, 53, tzinfo=datetime.timezone.utc), 'commenter': 'brianrodri', 'type': 'User'}, {'comment_id': 666392523, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 8, 17, 34, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 666679625, 'comment_body': ""Why do you need to explicitly mention this? Doesn't it have a default value of `False`?"", 'comment_created': datetime.datetime(2021, 7, 9, 5, 26, 3, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 666699996, 'comment_body': 'Since they are validation jobs, I think they can be included in the blog_validation.py file rather than creating a new file. This also has to restructured as a beam.DoFn with decorators. @brianrodri what do you think about this?', 'comment_created': datetime.datetime(2021, 7, 9, 6, 21, 16, tzinfo=datetime.timezone.utc), 'commenter': 'rohitkatlaa', 'type': 'User'}, {'comment_id': 667093247, 'comment_body': 'I think it\'s fine to write a new job because uniqueness can\'t be determined without looking at every single model in storage.\r\n\r\nThe validator system only allows you to look at one model at a time, so it isn\'t ""powerful"" enough to handle checking for uniqueness.', 'comment_created': datetime.datetime(2021, 7, 9, 17, 3, 30, tzinfo=datetime.timezone.utc), 'commenter': 'brianrodri', 'type': 'User'}, {'comment_id': 667114142, 'comment_body': 'Oh ok, then I think it is fine. Thanks @brianrodri ', 'comment_created': datetime.datetime(2021, 7, 9, 17, 42, 17, tzinfo=datetime.timezone.utc), 'commenter': 'rohitkatlaa', 'type': 'User'}, {'comment_id': 667294933, 'comment_body': 'Yup, it will have a default vaue of fals. Removed.', 'comment_created': datetime.datetime(2021, 7, 10, 5, 45, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 667486017, 'comment_body': ""Let's filter out empty titles earlier in the pipeline instead."", 'comment_created': datetime.datetime(2021, 7, 11, 13, 57, 57, tzinfo=datetime.timezone.utc), 'commenter': 'brianrodri', 'type': 'User'}, {'comment_id': 667488855, 'comment_body': ""Looks like this is a lot of duplicated code, please try writing a helper PTransform that takes in name of a property to check:\r\n\r\n```python\r\nclass GetModelsWithDuplicatePropertyValues(beam.PTransform):\r\n\r\n    def __init__(self, property_name):\r\n        super(GetModelsWithDuplicatePropertyValues, self).__init__()\r\n        self._property_name = property_name\r\n\r\n    def expand(self, blog_model_pcoll):\r\n        return (\r\n            blog_model_pcoll\r\n            | 'Generate (%s, model) key value pairs' % self._property_name >> (\r\n                beam.WithKeys(self.get_property_value))\r\n            | 'Group pairs by their %s' % self._property_name >> beam.GroupByKey()\r\n            | 'Discard %s key' % self._property_name >> beam.Values()\r\n            | 'Discard models with unique %s' % self._property_name >> (\r\n                beam.Filter(lambda models: len(models) > 1))\r\n        )\r\n\r\n    def get_property_value(self, model):\r\n        return job_utils.get_model_property(model, self._property_name)\r\n\r\n# ...\r\n\r\n    blogs_with_duplicate_url_fragment = (\r\n        blog_model_pcoll | GetModelsWithDuplicatePropertyValues('url_fragment')\r\n    )\r\n```"", 'comment_created': datetime.datetime(2021, 7, 11, 14, 19, 35, tzinfo=datetime.timezone.utc), 'commenter': 'brianrodri', 'type': 'User'}, {'comment_id': 667529269, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 11, 20, 4, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 667529283, 'comment_body': 'Done. Thanks', 'comment_created': datetime.datetime(2021, 7, 11, 20, 5, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 668151256, 'comment_body': '@hardikkat24 Are we expecting to add new files in this list?', 'comment_created': datetime.datetime(2021, 7, 12, 18, 13, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 668190318, 'comment_body': 'It should be avoided to add more files in the denylist. @Rijuta-s Can you please add type annotations? Thanks!', 'comment_created': datetime.datetime(2021, 7, 12, 19, 16, 31, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 668247824, 'comment_body': ""Always break long lines before the `|`:\r\n```suggestion\r\n            blog_model_pcoll\r\n            | GetModelsWithDuplicatePropertyValues('url_fragment')\r\n```"", 'comment_created': datetime.datetime(2021, 7, 12, 20, 52, 12, tzinfo=datetime.timezone.utc), 'commenter': 'brianrodri', 'type': 'User'}, {'comment_id': 668249097, 'comment_body': ""Seems cleaner to just return one big pipe, here and elsewhere:\r\n\r\n```suggestion\r\n        return (\r\n            self.pipeline\r\n            | 'Get every Blog Model' >> (\r\n                ndb_io.GetModels(\r\n                    blog_models.BlogPostModel.query(), self.datastoreio_stub\r\n                ))\r\n            | 'Discard models with empty property value' >> (\r\n                beam.Filter(lambda model: model.title != ''))\r\n            | GetModelsWithDuplicatePropertyValues('title')\r\n            | 'Flatten models into a list of errors' >> beam.FlatMap(\r\n                lambda models: [\r\n                    blog_validation_errors.DuplicateBlogTitleError(model)\r\n                    for model in models\r\n                ])\r\n        )\r\n```"", 'comment_created': datetime.datetime(2021, 7, 12, 20, 54, 21, tzinfo=datetime.timezone.utc), 'commenter': 'brianrodri', 'type': 'User'}, {'comment_id': 668249713, 'comment_body': 'Please move this into the `GetModelsWithDuplicatePropertyValues` transform as well to help deduplicate code.', 'comment_created': datetime.datetime(2021, 7, 12, 20, 55, 21, tzinfo=datetime.timezone.utc), 'commenter': 'brianrodri', 'type': 'User'}, {'comment_id': 669002629, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 13, 18, 14, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 669002720, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 13, 18, 14, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 669002819, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 13, 18, 14, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 669002891, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 13, 18, 14, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}]","[{'commit_sha': 'b2afe1d5d6d1f7e4622e5a7649aebb2cbd238537', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c7e936dbf3d8d8a8b7d71b66df88c937001b4cf6', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a81bb3076b3dd5a7d9269f0675f44b741bc677d', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac44e68971d6709fb8c60ba74ba07143833a5f29', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd10ac7370e77d663d8b61fc73a40266f758529c0', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39f279a7a85544b54ecfaeef645fd5820a04ed2e', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67240e216dd8c230a8f370f656c73c15f00edf68', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f4ac567ed2129675b7f7edc1c9efee501590f0f6', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '521cd0d565d9e377d6b13e95ad2f7c0567aae0dc', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e309437a6b68393ddfaca3b2569962c8b49993f', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4fdea1514f8d3bf5d5ab3cf47033a7c1fe1cf9f5', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e6baab7dc10c74190d7e44e2e143cc5e30d15110', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '30ebcd09a07f6f68634a10267fd4c22f0d165749', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3360521fa62819deed6356f26bb1158ee8a20c42', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0cab7d2ff4af746d19d455b8dac2996e25084eab', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9426417be221c1ac0b7caee07742b703489631a', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70d308ebbce49f2ebbcecb893b52def2399d64af', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b6a0ea67b1e24e2f1aaa7bbd2eeb27ea22523f3a', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12d19648c371177adbeab3490750d4bbae8ea098', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '043a769af484d038aa42d70a59e94d7aa3a3148d', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1dd3b780134f69f9ee95b91304d710a937f65fa8', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bdd63c750a98d159c4f10103e4308c00a7c1723b', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}]",Rijuta Singh,68547101,,User,,7,,13,22
677849260,"Milestone 1.3: Adds Blog Dashboard Controllers, Blog Admin page Controllers and blog-admin-backend-api service.","## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of NA.
2. This PR does the following: Adds controllers for both blog admin and blog dashboard . It also adds backend API service for blog admin page. Also adds test to the corresponding files.

## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Make sure to follow the [instructions for making a code change](https://github.com/oppia/oppia/wiki/Contributing-code-to-Oppia#instructions-for-making-a-code-change).
- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays.
- Never force push. If you do, your PR will be closed.
- Oppiabot can assign anyone for review/help if you leave a comment like the following: ""{{Question/comment}} @{{reviewer_username}} PTAL""
- Some of the e2e tests are flaky, and can fail for reasons unrelated to your PR. We are working on fixing this, but in the meantime, if you need to restart the tests, please check the [""If your build fails"" wiki page](https://github.com/oppia/oppia/wiki/If-your-build-fails).
",True,13207,https://api.github.com/repos/oppia/oppia/pulls/13207,https://github.com/oppia/oppia/pull/13207,closed,2425,23,27,110,23,75,1,2,[{'name': 'PR: LGTM'}],2021-06-25 11:41:06+00:00,2021-07-03 05:58:57+00:00,670671.0,"7 days, 18:17:51","[{'comment_id': 659209760, 'comment_body': 'nit: remove extra newline', 'comment_created': datetime.datetime(2021, 6, 26, 18, 39, 59, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 659210320, 'comment_body': 'Can we make the type definition for the values more specific (`Object` seems a bit generic)?', 'comment_created': datetime.datetime(2021, 6, 26, 18, 41, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 659210347, 'comment_body': 'nit: remove extra newline', 'comment_created': datetime.datetime(2021, 6, 26, 18, 41, 18, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 659211642, 'comment_body': 'Based on the types above, it seems both action and payload are optional (i.e. they can be undefined). If so, what happens to the request body here?', 'comment_created': datetime.datetime(2021, 6, 26, 18, 55, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 659211730, 'comment_body': '```suggestion\r\n    return this._postRequestAsync(\r\n```', 'comment_created': datetime.datetime(2021, 6, 26, 18, 55, 32, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 659211816, 'comment_body': 'ditto below.', 'comment_created': datetime.datetime(2021, 6, 26, 18, 56, 13, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 659211918, 'comment_body': 'Can we reuse `_postRequestAsync`?', 'comment_created': datetime.datetime(2021, 6, 26, 18, 57, 32, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 659310124, 'comment_body': 'config properties has values of type: `INT_SCHEMA` and `SET_OF_STRINGS_SCHEMA` (for 2 config properties being used in blog admin page). It can also change ( according to scheme defined in config domain) if we add any more config properties to blog admin page. So used `object`', 'comment_created': datetime.datetime(2021, 6, 27, 11, 55, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 659310130, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 27, 11, 56, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 659310175, 'comment_body': 'Payload should be there in all cases. Fixed. `action` will not be provided when `updateUserRoleAsync` calls the function.', 'comment_created': datetime.datetime(2021, 6, 27, 11, 56, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 659310182, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 27, 11, 56, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 659310892, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 27, 12, 2, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 659481694, 'comment_body': 'Do not leave a newline at the beginning of the function definition (We are writing  lint check for the same) [Ditto elsewhere] ', 'comment_created': datetime.datetime(2021, 6, 28, 5, 9, 31, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 659484991, 'comment_body': 'Should we move this to the restricted page section?', 'comment_created': datetime.datetime(2021, 6, 28, 5, 20, 14, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 659493480, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 28, 5, 45, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 659615449, 'comment_body': ""@DubeySandeep aren't we allowing multiple roles for a user? If that PR isn't in yet, note that you will need to change this later."", 'comment_created': datetime.datetime(2021, 6, 28, 9, 12, 32, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 659616182, 'comment_body': ""I'm confused about this. Where do you use it?"", 'comment_created': datetime.datetime(2021, 6, 28, 9, 13, 30, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 659616384, 'comment_body': ""Similarly, where is this used?\r\n\r\nSome other newly-added actions below seem superfluous, or at least I can't find where they're used. Could you please double-check and remove the ones that aren't being used (or explain why they're here)?"", 'comment_created': datetime.datetime(2021, 6, 28, 9, 13, 48, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 660037908, 'comment_body': 'Please sort the imports in proper order.', 'comment_created': datetime.datetime(2021, 6, 28, 18, 54, 33, tzinfo=datetime.timezone.utc), 'commenter': 'darksun27', 'type': 'User'}, {'comment_id': 660042433, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 28, 19, 1, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 660056152, 'comment_body': 'Moved blog admin page to restricted pages.', 'comment_created': datetime.datetime(2021, 6, 28, 19, 24, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 660056359, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 28, 19, 24, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 660203250, 'comment_body': ""Can't the existing /config tab be used for these (afaict it only fetches and updates the blog config properties)? Was there any reason for having a separate controller for blogs?"", 'comment_created': datetime.datetime(2021, 6, 29, 0, 47, 2, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 660203651, 'comment_body': 'Validate that the role is a valid one.', 'comment_created': datetime.datetime(2021, 6, 29, 0, 48, 21, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 660203747, 'comment_body': ""Ditto here, can't we use the current Roles tab for this assigning?"", 'comment_created': datetime.datetime(2021, 6, 29, 0, 48, 42, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 660204279, 'comment_body': ""Also, I don't think this should be a POST request. Post usually means a new model is created, wherease here an existing model is updated, right? Can this and the below be merged into a single PUT request, with maybe an additional payload to filter for either function?"", 'comment_created': datetime.datetime(2021, 6, 29, 0, 50, 30, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 660204531, 'comment_body': 'Start with underscore, since this is a private function (right?).', 'comment_created': datetime.datetime(2021, 6, 29, 0, 51, 13, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 660204984, 'comment_body': 'Remove newline?', 'comment_created': datetime.datetime(2021, 6, 29, 0, 52, 37, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 660205014, 'comment_body': 'Ditto', 'comment_created': datetime.datetime(2021, 6, 29, 0, 52, 43, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 660205543, 'comment_body': 'I think for current models, we have a validation function in the domain layer (eg: Topic.require_valid_topic_id()). Can something similar be done here?', 'comment_created': datetime.datetime(2021, 6, 29, 0, 54, 26, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 660205966, 'comment_body': ""Why `include_marked_deleted = True`? I'd assume you don't want deleted user data, right? \r\nIf so, change this to use `user_services.get_username()`"", 'comment_created': datetime.datetime(2021, 6, 29, 0, 55, 49, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 660206769, 'comment_body': ""Rename both to `blog_post_is_published` or `new_publish_status` or something like that. Starting with 'is' generally means it is a function."", 'comment_created': datetime.datetime(2021, 6, 29, 0, 58, 30, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 660219232, 'comment_body': 'I think Object is not good enough. If it changes, we will change here too. Also, we would want the checks to fail on change rather than just covering it up Object. A lot of reasons that were used to remove the any type also apply to Object. ', 'comment_created': datetime.datetime(2021, 6, 29, 1, 39, 14, tzinfo=datetime.timezone.utc), 'commenter': 'srijanreddy98', 'type': 'User'}, {'comment_id': 660220362, 'comment_body': ""This request doesn't have a response. Maybe you can remove the extra wrapping with new Promise.\r\n```suggestion\r\n  async removeBlogEditorAsync(username: string): Promise<void> {\r\n    this.http.put<void>(\r\n      '/blogadminrolehandler', {\r\n        username: username,\r\n      }\r\n    ).toPromise()\r\n  }\r\n```\r\nIf returning the errorCode is important, I would strongly recommend using Observables and not converting it to Promise.\r\nHere is how it would go:\r\n ```suggestion\r\n  async removeBlogEditorAsync(username: string): Observable<void> {\r\n    this.http.put<void>(\r\n      '/blogadminrolehandler', {\r\n        username: username,\r\n      }\r\n    ).pipe(catchError(err => throwError(err.error.error));\r\n  }\r\n```\r\nNote that pipe, catchError and throwError are from the RxJS library."", 'comment_created': datetime.datetime(2021, 6, 29, 1, 42, 25, tzinfo=datetime.timezone.utc), 'commenter': 'srijanreddy98', 'type': 'User'}, {'comment_id': 660293322, 'comment_body': ""Instead of using 'config tab' in admin page, we will be having a separate page called - 'Blog Admin' page. Blog Admin will be responsible for assigning and removing 'Blog Post Editors', and setting the list of default tags for blogs. Thus new controllers for handling data on 'blog admin' page. Also we don't want admin to be able to set list of tags or update blog editors."", 'comment_created': datetime.datetime(2021, 6, 29, 5, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 660293642, 'comment_body': ""Same as explained in above comment. We are going to have a separate page called 'Blog Admin'"", 'comment_created': datetime.datetime(2021, 6, 29, 5, 34, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 660295111, 'comment_body': 'Even if the user has deleted the account, We are not deleting the blog posts written by them. These blog posts will be handled by the blog admin, however, the author name should be the same. We retain the user name even after user has deleted the account, thus included `include_marked_deleted = True`.', 'comment_created': datetime.datetime(2021, 6, 29, 5, 38, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 660301032, 'comment_body': 'In this post request , along with updating of existing user model, a new model is being created - `audit_models.RoleQueryAuditModel`. Thus a `POST` request (For updating roles in admin page too it is a `POST` request.).\r\n', 'comment_created': datetime.datetime(2021, 6, 29, 5, 54, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 660689264, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 29, 14, 43, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 660689381, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 29, 14, 43, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 660689502, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 29, 14, 43, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 660689659, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 29, 14, 43, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 660689919, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 29, 14, 43, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 660696714, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 29, 14, 51, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 660697244, 'comment_body': 'Added a check to ensure that role is either blog_admin or blog_post_editor.', 'comment_created': datetime.datetime(2021, 6, 29, 14, 51, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 660747218, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 29, 15, 46, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 660817038, 'comment_body': 'Done.Removed', 'comment_created': datetime.datetime(2021, 6, 29, 17, 19, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 660817258, 'comment_body': 'Removed.', 'comment_created': datetime.datetime(2021, 6, 29, 17, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 660944301, 'comment_body': 'Cool, thanks!', 'comment_created': datetime.datetime(2021, 6, 29, 20, 34, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 661135964, 'comment_body': 'Why are these two added? Are they duplicates of the ones below?', 'comment_created': datetime.datetime(2021, 6, 30, 5, 13, 11, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 661146122, 'comment_body': 'Came up due to merge conflict. Both of these were deleted in a recent PR. Removed.', 'comment_created': datetime.datetime(2021, 6, 30, 5, 41, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 661621811, 'comment_body': 'Since we know that the name is a string, please add a stricter check.', 'comment_created': datetime.datetime(2021, 6, 30, 16, 11, tzinfo=datetime.timezone.utc), 'commenter': 'rohitkatlaa', 'type': 'User'}, {'comment_id': 661622167, 'comment_body': '```suggestion\r\n            config_domain.Registry.get_config_property(name)) # type: ignore[no-untyped-call]\r\n```', 'comment_created': datetime.datetime(2021, 6, 30, 16, 11, 27, tzinfo=datetime.timezone.utc), 'commenter': 'rohitkatlaa', 'type': 'User'}, {'comment_id': 661626259, 'comment_body': 'Please add a choice and the invalidInputException can be removed. Btw, since there is only one choice why is it even required to send that arg.', 'comment_created': datetime.datetime(2021, 6, 30, 16, 16, 57, tzinfo=datetime.timezone.utc), 'commenter': 'rohitkatlaa', 'type': 'User'}, {'comment_id': 661627544, 'comment_body': 'Please add the choices(BLOG_ADMIN, BLOG_POST_EDITOR) and remove the invalid input exception.', 'comment_created': datetime.datetime(2021, 6, 30, 16, 18, 38, tzinfo=datetime.timezone.utc), 'commenter': 'rohitkatlaa', 'type': 'User'}, {'comment_id': 661627995, 'comment_body': 'This check can be removed.', 'comment_created': datetime.datetime(2021, 6, 30, 16, 19, 17, tzinfo=datetime.timezone.utc), 'commenter': 'rohitkatlaa', 'type': 'User'}, {'comment_id': 661631614, 'comment_body': ""```suggestion\r\n            change_dict['thumbnail_filename']) # type: ignore[no-untyped-call]\r\n```"", 'comment_created': datetime.datetime(2021, 6, 30, 16, 23, 10, tzinfo=datetime.timezone.utc), 'commenter': 'rohitkatlaa', 'type': 'User'}, {'comment_id': 661632515, 'comment_body': 'Please add an appropriate docstring.', 'comment_created': datetime.datetime(2021, 6, 30, 16, 24, 19, tzinfo=datetime.timezone.utc), 'commenter': 'rohitkatlaa', 'type': 'User'}, {'comment_id': 661635177, 'comment_body': 'Please separate the tests. Thanks.', 'comment_created': datetime.datetime(2021, 6, 30, 16, 27, 57, tzinfo=datetime.timezone.utc), 'commenter': 'rohitkatlaa', 'type': 'User'}, {'comment_id': 661646892, 'comment_body': 'This gives line to long error.', 'comment_created': datetime.datetime(2021, 6, 30, 16, 44, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 661654713, 'comment_body': 'Then please break at name.', 'comment_created': datetime.datetime(2021, 6, 30, 16, 55, 10, tzinfo=datetime.timezone.utc), 'commenter': 'rohitkatlaa', 'type': 'User'}, {'comment_id': 661728416, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 30, 18, 46, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 661728444, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 30, 18, 46, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 661728460, 'comment_body': 'Done. Removed.', 'comment_created': datetime.datetime(2021, 6, 30, 18, 46, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 661728474, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 30, 18, 46, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 661728540, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 30, 18, 47, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 661728583, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 30, 18, 47, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 661728623, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 30, 18, 47, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 661728651, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 30, 18, 47, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 662134205, 'comment_body': ""```suggestion\r\n            'max_number_of_tags_assigned_to_blog_post': 20,\r\n        }\r\n```"", 'comment_created': datetime.datetime(2021, 7, 1, 9, 29, 46, tzinfo=datetime.timezone.utc), 'commenter': 'rohitkatlaa', 'type': 'User'}, {'comment_id': 662137797, 'comment_body': 'Please update the docstring to include more details, because change_dict is too vague.', 'comment_created': datetime.datetime(2021, 7, 1, 9, 34, 55, tzinfo=datetime.timezone.utc), 'commenter': 'rohitkatlaa', 'type': 'User'}, {'comment_id': 662364665, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 1, 14, 56, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 662365020, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 1, 14, 56, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 663296440, 'comment_body': 'Ah ok, makes sense.', 'comment_created': datetime.datetime(2021, 7, 3, 1, 2, 48, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 664854958, 'comment_body': ""Ack, in my PR I've replaced user_settings.role with roles so this will fail and I'll fix it!"", 'comment_created': datetime.datetime(2021, 7, 6, 20, 24, 50, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}]","[{'commit_sha': 'f220000a0ce4db1a0c2819d7b0b94ae8bafb7f03', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e551b780e706964424557059e5d60943392e3441', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4924316046e32098de49e3c44eadb6887741d671', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba6c95ebbfbd04e7c635f1caabd25298f7effca6', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0cb7fdf6cf87d371c7e98f12d3fece37e5b37b68', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38efbbce690d38981427cdf540c57d4c18209720', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '304bc5aba10360396409145d40d2dfe138292783', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05b858a5df9537c1c48c5da81545375887808756', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c7d5c0d529315cf0011fd197b7495245e4ced09', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2162747213d8b36229191140b5cc12bf6c68587c', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c610fc4bfc6881cc03edc87c442dc5c3e57205f', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '55df0c4ab93cf7d699bc64471980ea917e4f251a', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b2386d3177db1b52399fd223f4df97617662ee9c', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8abaca68393bc7d1e76dc1eba667c4ec2b674ac0', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8badd87ca580231bd95c4b26b0ebabe099f8eb57', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51512e082d993edfe9a5f117f44052d7ed2a1463', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1efdfe6483d1ae913f8172b5bac1b07cdba5f35a', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b3ea398cfc49cca6da4d57ca7a2838c222c0e69', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9e036c857425dbd6608ca1b8db05cb0490af006', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4563d740a88654be565d3834d2139b87e3b71ddf', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '050463828f8ca2576f35ddc0df17ef3dfd23cc0a', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56b721f380293780364db2402c89140b63e071e5', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e6416dfea92c660509e149756722bc7e60b210e', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4491d7f97733db3e8908173892743fe4aa2e2322', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9a99608167936d41faa23ca63bd72422f74d65d', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3790ce23faccb0e128b73a83309531916b863ba', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93561bba6488f350ef29515fb54aa853276639e4', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd6c683ad9e3cd91510576834433ca41802136f87', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4fa58ba95e98a6e50a075b0bae69e5b986585d8f', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '78f580cd246cd7cd5b97a59cb272845976588b95', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e105b043b3f10b933e6b5a1be470d2a9fdfc9bee', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15013d579f9e081ad9b59cd577f9494eeb73a8fb', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e5ef6197d5595726dd245f207f76e96c85d45258', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b37096a6dc574973df663f0cd6b2206181cac09f', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2593f4ddbd61bf5887f313e70eae2f4bff65601', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e147bd8e127f8e8acab5cba00a2f9e6f39ace39', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '323a3df45e302ca89a8bd7bdf091f42d28fa2ad6', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0049c28618ff562f0dd2584dac149dbdcdbb7aef', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '337aea36d2e5602ebaf479d103b578bdf6cbd218', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'edcca45bc279d71b6442232ce5f07ead2673d082', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34a68b05308e6b3ea9ca19dd0f5a2c7122af58f2', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c04c0db04a6c041c62b0eb09539e4255a3e56edd', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f69b8486be43534351b3ebe06e1c3a95c5433071', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7447e55d9ea2f903d5315b6402d1514f2f2322f4', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a22332b2363f33f1e8fc66a013ae473a5131d1c8', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd12ba68cdab3655ae8be7f33a7cb7e8b7cb598b8', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50a61625edd8228f82f1ff657642f7664866ad11', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66a1a5d3c2f89149fea352b4aacf348aeb4c72d7', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17c34ec395ebd5ece87d222c645186a12b8f0646', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc9d90d0d72e33f204375d99d0616b27e1bc6b5e', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2642465753f5a29b0050e0b990448cb6a4ec584b', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '291806929c3d6d4d9e58e2c4c815aae6454593a5', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f40d680e21d474709658692f23e2fa5a00c579d0', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '29614b26124a76c161f5c0bc118c1a32dbea15c5', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa390ee5f598c8a14c1512847f8c2c8e2bdc34c5', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '005d35ff978269462f260da9588e7315ac78dcc8', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b8c9038351dbf72b908f8fd3998a245ddc584497', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88b49882f1406ea176c1eb86946ed25c1e0f3782', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f360ca9d426238c4f601b63bf3689e949664557', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b26bd1875312f75c413fbb92994f4e774ab3a67f', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4bc4926f93050bbdcab36e9d40c578bb378295d', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16a9af1fde4ecaacd6d444801f166084b2a7b524', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '252b6f08c56ea5e77c0a763286e3be73140a4850', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90398037383d3ed9ea849ad488b3be73cc96264f', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c43f5dd59623c7a885db3a2d4c64a272a535a040', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'becba89b8d893bf87898852ce62f0bff42b3e044', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '479b720b8ba654d53ff6bf1d678fb0ccb0bcaa08', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3237bd214a9586c099499476de950b40f7f1547d', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d1d8d7ca9fea4565781ad2200caacfcae10de7e', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6191b91a9f8453344914b671a1e06f92918b2c1f', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2284a60e9a54cad5ed122ea839ff6dbb2bd14a5b', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '91d8c5707d5f1317bd3a6f8f19cfbcd1219c0bb9', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6392e699ae50df09cd4022370edd31dd015b3689', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3198901e61e9fb5af128adec5e7855e38785327', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8b90380f8fe22b8103df408e4ca8ccbca8ea42e', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c20f5f2120f2cbadbafc75db68c666ab75368502', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79bfbd250fccfc58d4da40708e5dae8a3ade8530', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c909d2d10cdb89e8b8139073cc6a3e26829969c', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6bc536c8a03209162e2523d7fee4ae20ce0423b8', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '455b27c13a9eb4ab9d5a3e989e8a9f3cd456e7b5', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d8f4bedaaf75c035e97c1248fdc1dc1e5f2e83a', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20269bd78fdda6c894d3187b9875c6c508bb8c73', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a4679bcca764befa0ebeb783fbf5e4cece23b55', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f4cb4810be6e121caefbdf54592f869812ebcbe0', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2f72e3af8d446711ff9b48c3a044d421a0418a67', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c5ce9c103e398c4e7330d4c9a77edd01cd703cb1', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34238e5f0515ba887db0ab1a45f3cde336c1f92a', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '77b4a160d5c21671af27049121cb820dd536eb3d', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c9751984c64793042f9efea738ed162712144a8', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db60132ad46c88201ce73cd2ed60131634cc0af8', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10c779e89ca4aae4966c87588f6cd0cf670e59bf', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '712b7cb98f781e6c26cb856878e6029aa6f74ccf', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '55af1cb9b0613f813cb6b3f03b1493fcaf41b457', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74716f59f1a0ed60613d0d888b60addc873ccca6', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9dd68d7de641a81c59f657934ef9355ca41d7b24', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87339b8e34ca6beccbfc88de9ce1de6abb7deaaa', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '637d732886e1b14a52849905c3a28d1cb5825ce4', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd47bd5f9ad2d4a1a94502e15b52632a60e9841d8', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb8163ef4344971c58ed01915c27f3cdeca34cd6', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe5881a1b7c586ff3554d83dc8a1ecdaa4a67be6', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16c1147f20209cd01609b5712975e2e083a34394', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'baee3a24ec509bdece1682247392092fe07c6496', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ce735cc30da9a051c19349eeb92f22e459c5038', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ed2242d45ad0ec8505afac0a9e5addffcb6e044', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8adefb0958ebdcbdf9162d42efff8581da18e04b', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a93a69ad19a15364dbb46a816517e999530004f0', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61529cc2402fdea9b7f1964597ed18f44fb8ed25', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d6b8d3de135be6a78aa5bcb0aafa3f9cca21089', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09c7575b8c86d297139f0b27b4d29b35f5f928aa', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22b2c4f3b2bc8f0cb0a3b44c36274a85a657ce53', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}]",Rijuta Singh,68547101,,User,,7,,13,22
681643382,Milestone1.4 :Adding Blog HomePage Controllers.,"## Overview
1. This PR fixes or fixes part of N.A.
2. This PR does the following: Adds controller layer for blog homepage (blog_homepage.py and blog_homepage_test.py)and required function in services.

## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## Proof that changes are correct
I used 'postman' (https://www.postman.com/) to hit the homepage controller with `get` requests and receive the correct JSON objects. To set the data which can be fetched, first `post` and `put` requests to blog dashboard controller were made. This data was then retrieved from blog homepage.
## PR Pointers

- Make sure to follow the [instructions for making a code change](https://github.com/oppia/oppia/wiki/Contributing-code-to-Oppia#instructions-for-making-a-code-change).
- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays.
- Never force push. If you do, your PR will be closed.
- Oppiabot can assign anyone for review/help if you leave a comment like the following: ""{{Question/comment}} @{{reviewer_username}} PTAL""
- Some of the e2e tests are flaky, and can fail for reasons unrelated to your PR. We are working on fixing this, but in the meantime, if you need to restart the tests, please check the [""If your build fails"" wiki page](https://github.com/oppia/oppia/wiki/If-your-build-fails).
",True,13278,https://api.github.com/repos/oppia/oppia/pulls/13278,https://github.com/oppia/oppia/pull/13278,closed,625,61,11,132,20,103,1,2,[{'name': 'PR: LGTM'}],2021-07-01 09:01:46+00:00,2021-07-08 08:57:16+00:00,604530.0,"6 days, 23:55:30","[{'comment_id': 662121277, 'comment_body': 'Removed Dead Code. This function is not being used anywhere.', 'comment_created': datetime.datetime(2021, 7, 1, 9, 12, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 662471459, 'comment_body': 'Why do we need to do this?', 'comment_created': datetime.datetime(2021, 7, 1, 17, 27, 44, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 662473408, 'comment_body': ""```suggestion\r\n            len(json_response['blog_post_summary_dicts']) == 1)\r\n```"", 'comment_created': datetime.datetime(2021, 7, 1, 17, 30, 56, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 662474881, 'comment_body': ""Why are you passing in the URL by interpolating it in a string? It's the URL going to be a string itself?"", 'comment_created': datetime.datetime(2021, 7, 1, 17, 33, 30, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 662475519, 'comment_body': ""This is different from the previous length check. Just for consistency's sake, make them both equal?"", 'comment_created': datetime.datetime(2021, 7, 1, 17, 34, 34, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 662476761, 'comment_body': ""```suggestion\r\n        self.assertTrue(\r\n            len(json_response['summary_dicts']) == 1)\r\n```"", 'comment_created': datetime.datetime(2021, 7, 1, 17, 36, 47, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 662477112, 'comment_body': ""```suggestion\r\n        self.assertTrue(\r\n            len(json_response['summary_dicts']) == 1)\r\n```"", 'comment_created': datetime.datetime(2021, 7, 1, 17, 37, 23, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 662477633, 'comment_body': ""I just want to confirm that this won't introduce a flake. Can you please confirm this by running this test multiple times and ensuring that it passes consecutively?"", 'comment_created': datetime.datetime(2021, 7, 1, 17, 38, 20, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 662478176, 'comment_body': '```suggestion\r\ndef get_published_blog_post_card_summaries(offset=0):\r\n    """"""Returns published BlogPostCardSummaries list.\r\n```', 'comment_created': datetime.datetime(2021, 7, 1, 17, 39, 14, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 662478500, 'comment_body': ""Shouldn't it return an empty list instead of `None` ?"", 'comment_created': datetime.datetime(2021, 7, 1, 17, 39, 51, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 662479875, 'comment_body': 'I think this should be named differently. Maybe `limit`?', 'comment_created': datetime.datetime(2021, 7, 1, 17, 42, 1, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 662494882, 'comment_body': '```suggestion\r\n        if number:\r\n            return cls.query(cls.editor_ids == user_id).order(\r\n                -cls.last_updated).fetch(number)\r\n        return cls.query(cls.editor_ids == user_id).fetch()\r\n```', 'comment_created': datetime.datetime(2021, 7, 1, 18, 6, 59, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 662546605, 'comment_body': ""We want the author name in the frontend dictionary and not the author_id. We will be displaying the username, profile picture. However we don't use services in the domain layer as discussed:-https://github.com/oppia/oppia/pull/13118#discussion_r654972251\r\n\r\nSo I applied the suggestion by Sandeep to replace the author id by author name in the controller layer.\r\n"", 'comment_created': datetime.datetime(2021, 7, 1, 19, 39, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 662580569, 'comment_body': 'Done. Changed to assertEqual.', 'comment_created': datetime.datetime(2021, 7, 1, 20, 43, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 662584274, 'comment_body': 'Done. Changed all len checks to assertEqual.', 'comment_created': datetime.datetime(2021, 7, 1, 20, 50, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 662584327, 'comment_body': 'Done. Changed to assertEqual.', 'comment_created': datetime.datetime(2021, 7, 1, 20, 51, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 662584418, 'comment_body': 'Done. Changed to assertEqual.', 'comment_created': datetime.datetime(2021, 7, 1, 20, 51, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 662585191, 'comment_body': 'It should not be a flake and should always be True as we want the list of blog post summaries to be ordered according to the date published. We will always receive an ordered list.', 'comment_created': datetime.datetime(2021, 7, 1, 20, 52, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 662585682, 'comment_body': 'Changed  to `get_published_blog_post_summaries` in function name and to `BlogPostSummaries` list in the doc string.', 'comment_created': datetime.datetime(2021, 7, 1, 20, 53, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 662585783, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 1, 20, 54, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 662585901, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 1, 20, 54, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 663501633, 'comment_body': 'sg!', 'comment_created': datetime.datetime(2021, 7, 4, 13, 6, 36, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 663507718, 'comment_body': ""We will show 'No published blog posts' or similar string depending upon the page (author's page or homepage) so passing None will be better, as we will not have to perform length check on the list or similar then. "", 'comment_created': datetime.datetime(2021, 7, 4, 13, 53, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 663534678, 'comment_body': 'int|None', 'comment_created': datetime.datetime(2021, 7, 4, 17, 33, 50, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 663534725, 'comment_body': 'Whether to only fetch models for published blog posts. If False, the return value will include draft posts as well.', 'comment_created': datetime.datetime(2021, 7, 4, 17, 34, 28, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 663534754, 'comment_body': 'Deindent by 4 to match opening paren.', 'comment_created': datetime.datetime(2021, 7, 4, 17, 34, 48, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 663534815, 'comment_body': 'Why is ""published"" not applied when there is no limit? \r\n\r\nThere should be tests for all 4 cases (2 × 2) of the function arguments.', 'comment_created': datetime.datetime(2021, 7, 4, 17, 35, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 663534822, 'comment_body': 'if limit is not None', 'comment_created': datetime.datetime(2021, 7, 4, 17, 35, 7, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 663534844, 'comment_body': 'If None, all existing models will be fetched.', 'comment_created': datetime.datetime(2021, 7, 4, 17, 35, 17, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 663534958, 'comment_body': 'Perhaps get_multi_by_user is better.', 'comment_created': datetime.datetime(2021, 7, 4, 17, 36, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 663534993, 'comment_body': 'object --> objects\r\n\r\nWhat does ""assigned"" mean?\r\n\r\nEnd each comment with a period.', 'comment_created': datetime.datetime(2021, 7, 4, 17, 36, 20, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 663535024, 'comment_body': 'Describe more who the user is from this perspective (e.g. ID of the user whose blog posts are to be fetched).', 'comment_created': datetime.datetime(2021, 7, 4, 17, 36, 40, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 663535109, 'comment_body': ""MAX_NUM_CARDS_TO_DISPLAY_ON_BLOG_HOMEPAGE\r\nMAX_NUM_CARDS_TO_DISPLAY_ON_BLOG_AUTHOR_PAGE\r\nMAX_NUM_CARDS_TO_DISPLAY_ON_BLOG_POST_PAGE\r\n\r\nI don't understand the last one, actually. What is it?"", 'comment_created': datetime.datetime(2021, 7, 4, 17, 37, 29, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 663535127, 'comment_body': 'Why not just /blog?', 'comment_created': datetime.datetime(2021, 7, 4, 17, 37, 36, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 663535143, 'comment_body': ""What exactly is this page? I don't understand it from the name. Is it a list of blog authors, or blog posts written by a specific author, or something else? If the latter I would have expected it to be still /blog but with a query parameter indicating the parameters of the search."", 'comment_created': datetime.datetime(2021, 7, 4, 17, 37, 48, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 663542859, 'comment_body': 'https://xd.adobe.com/view/9bb82409-cdca-432a-b11c-88324643e2c0-ceeb/screen/6ef4fc04-b8e1-4d93-8433-388f92499b6a/\r\n\r\nThis page. It is completely devoted to the author and contains the name, bio, and the published blog post cards of the blog post published by author.', 'comment_created': datetime.datetime(2021, 7, 4, 18, 51, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 663542930, 'comment_body': 'We have this at the end of the blog post page:\r\n![Screenshot from 2021-07-04 23-36-35](https://user-images.githubusercontent.com/68547101/124396455-4a016300-dd27-11eb-9f0c-5d02b3817f76.png)\r\n\r\nLink: https://xd.adobe.com/view/9bb82409-cdca-432a-b11c-88324643e2c0-ceeb/screen/24bd9402-b858-434f-9b5c-1fac4c21f9c7/\r\nSo, the last constant specifies the number of blog post cards to be displayed on this page.', 'comment_created': datetime.datetime(2021, 7, 4, 18, 52, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 663543087, 'comment_body': 'Not required. If statement will not get executed if the value of arg is None.\r\nVerified it again :) : \r\n![Screenshot from 2021-07-05 00-39-57](https://user-images.githubusercontent.com/68547101/124397199-2f7db880-dd2c-11eb-8d4f-ed64f1e08563.png)\r\n', 'comment_created': datetime.datetime(2021, 7, 4, 18, 54, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 663543173, 'comment_body': 'I did not see any use case where we will be required to fetch all published blog posts rights models or all draft blog post rights models, currently. We will be fetching all blog post rights models (that is both published and draft) for user (eg when removing  blog post editor role for author) or will be specifying the limit. So, did not add published when there is no limit. ', 'comment_created': datetime.datetime(2021, 7, 4, 18, 55, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 663546634, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 4, 19, 28, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 663546637, 'comment_body': ""We will only fetch published blog post rights models if true and only fetch drafts blog post rights if false. We aren't fetching both if it is false."", 'comment_created': datetime.datetime(2021, 7, 4, 19, 28, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 663546640, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 4, 19, 28, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 663546699, 'comment_body': ""Done. ( 'all exisiting'- published as well as drafts)"", 'comment_created': datetime.datetime(2021, 7, 4, 19, 29, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 663546702, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 4, 19, 29, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 663546704, 'comment_body': ""Done. Changed to - '....for all blog posts for which the user is an editor.'"", 'comment_created': datetime.datetime(2021, 7, 4, 19, 29, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 663546724, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 4, 19, 29, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 663546827, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 4, 19, 30, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 664254414, 'comment_body': ""@seanlip changed the authors page url prefix to  '/blog/author'. The complete URL will be 'blog/author/<author_username>'.\r\nPTAL. Thank you."", 'comment_created': datetime.datetime(2021, 7, 6, 5, 54, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 664275315, 'comment_body': '""not null"" and ""true-y"" are different things, actually. In this case the behaviour is different for limit=0. So, conceptually, I think you actually want ""is not None"".', 'comment_created': datetime.datetime(2021, 7, 6, 6, 40, 29, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 664276602, 'comment_body': 'When you\'re writing a method at the storage layer, you can\'t just tailor it to the functionality you happen to be implementing at the time. This is because you\'re writing a general method that may be used by others in the future who would reasonably expect it to work for all args that they throw at it. This is the art of API design and if you design this only around your particular use case (or, worse, design it to ""look"" more general but have it only satisfy your particular use cases) then it makes the codebase more fragile and this is something that should be avoided.\r\n\r\nSo, either make this function fully accurate in all cases (even the cases which you don\'t need), or have multiple functions that are individually fully accurate.', 'comment_created': datetime.datetime(2021, 7, 6, 6, 43, 5, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 664277585, 'comment_body': 'Given this definition, I think it\'s better to have get_all_published_models(user_id), get_all_draft_models(user_id), and get_multi_by_user(user_id, limit).\r\n\r\nIt\'s not clear that ""published=False"" means ""draft"" -- you\'re using a boolean to represent what should really be an enum. I think you\'re overloading this function too much (see the other comment about API design).', 'comment_created': datetime.datetime(2021, 7, 6, 6, 44, 57, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 664277891, 'comment_body': ""MAX_POSTS_TO_RECOMMEND_AT_END_OF_BLOG_POST, then. That captures the functionality of these cards better (otherwise no one really knows what cards you're talking about, and these cards seem a bit different in nature from the pages which naturally contain lists of cards)."", 'comment_created': datetime.datetime(2021, 7, 6, 6, 45, 31, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 664279151, 'comment_body': 'Let\'s stop calling this the ""blog author\'s page"". It\'s not the blog author\'s page -- the page does not belong to the blog author. It\'s a list of all blog posts that are written by a particular author.\r\n\r\nPerhaps the ""author-specific blog posts page"" or something like that.', 'comment_created': datetime.datetime(2021, 7, 6, 6, 47, 58, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 664279852, 'comment_body': 'This does not seem to have been changed as you described it in your review comment. It seems misleading because the constant implies multiple authors.', 'comment_created': datetime.datetime(2021, 7, 6, 6, 49, 13, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 664646201, 'comment_body': 'Added 3 methods replacing this one -- get_multi_published_models_by_user(user_id, limit) , get_multi_draft_models(user_id, limit), get_all_by_user(user_id).', 'comment_created': datetime.datetime(2021, 7, 6, 15, 11, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 664646465, 'comment_body': ""Changed to 'is not None'"", 'comment_created': datetime.datetime(2021, 7, 6, 15, 11, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 664647076, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 6, 15, 12, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 664647546, 'comment_body': 'Changed.', 'comment_created': datetime.datetime(2021, 7, 6, 15, 12, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 664647713, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 6, 15, 12, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 664649173, 'comment_body': 'Replaced this function with 3 functions: get_multi_published_models_by_user(user_id, limit) , get_multi_draft_models(user_id, limit), get_all_by_user(user_id).\r\n', 'comment_created': datetime.datetime(2021, 7, 6, 15, 14, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 664815918, 'comment_body': 'Try to return asap in the function definition, this will reduce branching + makes the code more readable.\r\n```\r\nif user_settings is None:\r\n    raise self.PageNotFoundException(...)\r\n\r\nif user_settings.role != (BLOG_ADMIN or BLOG_POST_EDITOR):\r\n     raise self.PageNotFoundException(...)\r\n\r\nblog_post_summaries = ...\r\n..\r\n..\r\n```', 'comment_created': datetime.datetime(2021, 7, 6, 19, 15, 44, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 664816204, 'comment_body': '```suggestion\r\n            if user_settings.role in [BLOG_ADMIN, BLOG_POST_EDITOR]:\r\n```', 'comment_created': datetime.datetime(2021, 7, 6, 19, 16, 12, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 664817406, 'comment_body': 'list(BlogPostSummary), right?', 'comment_created': datetime.datetime(2021, 7, 6, 19, 18, 23, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 664817489, 'comment_body': 'Ditto', 'comment_created': datetime.datetime(2021, 7, 6, 19, 18, 33, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 664817988, 'comment_body': ""Shouldn't this be empty list?"", 'comment_created': datetime.datetime(2021, 7, 6, 19, 19, 30, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 664818602, 'comment_body': 'get_published_blog_post_summaries_by_user_id should internally use the `feconf.MAX_LIMIT_FOR_CARDS_ON_BLOG_AUTHORS_PAGE` limit right?', 'comment_created': datetime.datetime(2021, 7, 6, 19, 20, 32, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 664819370, 'comment_body': 'Initailize `blog_post_summary_dicts` with None and remove `else`', 'comment_created': datetime.datetime(2021, 7, 6, 19, 21, 50, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 664820072, 'comment_body': 'Either the max_limit should be decided internally or this should be a keyword_param with max_limit=feconf.MAX...', 'comment_created': datetime.datetime(2021, 7, 6, 19, 23, 6, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 664821155, 'comment_body': '```suggestion\r\n""""""Controllers for the blog homepage.""""""\r\n```', 'comment_created': datetime.datetime(2021, 7, 6, 19, 25, 1, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 664844207, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 6, 20, 5, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 664844228, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 6, 20, 5, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 664844311, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 6, 20, 5, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 664847498, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 6, 20, 11, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 664847655, 'comment_body': 'Done. (Thanks a lot)', 'comment_created': datetime.datetime(2021, 7, 6, 20, 11, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 664848923, 'comment_body': ""We cannot use it internally as we have 2 different limits on 2 pages: \r\nhttps://xd.adobe.com/view/9bb82409-cdca-432a-b11c-88324643e2c0-ceeb/screen/6ef4fc04-b8e1-4d93-8433-388f92499b6a/\r\nhttps://xd.adobe.com/view/9bb82409-cdca-432a-b11c-88324643e2c0-ceeb/screen/24bd9402-b858-434f-9b5c-1fac4c21f9c7/\r\n\r\nBoth the pages' controllers will use the same service function."", 'comment_created': datetime.datetime(2021, 7, 6, 20, 14, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 664848976, 'comment_body': 'Changed this to empty string and removed else.', 'comment_created': datetime.datetime(2021, 7, 6, 20, 14, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 664850253, 'comment_body': 'https://github.com/oppia/oppia/pull/13278#discussion_r664848923 This explains reason for this as well.', 'comment_created': datetime.datetime(2021, 7, 6, 20, 16, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 664850332, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 6, 20, 16, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 664856292, 'comment_body': 'As we declared it as a constant we follow this pattern so that if we use any other character in the constant it can be interpolated into a string.', 'comment_created': datetime.datetime(2021, 7, 6, 20, 27, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 664876053, 'comment_body': 'Drop space before period.', 'comment_created': datetime.datetime(2021, 7, 6, 21, 2, 21, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 664876266, 'comment_body': 'Number --> The maximum number\r\n\r\nBlogPostRightsModel --> BlogPostRightsModels\r\n\r\nAdd space after ""fetched.""', 'comment_created': datetime.datetime(2021, 7, 6, 21, 2, 45, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 664876505, 'comment_body': 'Don\'t need ""multi"" here because ""published models"" is already plural.', 'comment_created': datetime.datetime(2021, 7, 6, 21, 3, 12, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 664876872, 'comment_body': ""Wouldn't you also order by cls.last_updated here?\r\n\r\nIf you do, then you can compute the query object (before calling fetch() on it) and then reuse it, thus avoiding duplicate code.\r\n\r\nAlso, if you are ordering by last updated, mention that in the docstring (ditto elsewhere) since it's part of the definition of the return value."", 'comment_created': datetime.datetime(2021, 7, 6, 21, 3, 53, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 664876949, 'comment_body': 'Ditto, no need ""multi"" here.', 'comment_created': datetime.datetime(2021, 7, 6, 21, 4, 3, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 664877005, 'comment_body': 'Drop space before period.', 'comment_created': datetime.datetime(2021, 7, 6, 21, 4, 12, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 664877062, 'comment_body': 'Similar comments as above.', 'comment_created': datetime.datetime(2021, 7, 6, 21, 4, 18, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 664877154, 'comment_body': 'Similar comments as above.', 'comment_created': datetime.datetime(2021, 7, 6, 21, 4, 27, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 664877796, 'comment_body': 'The original comment in this thread does not seem to be fixed.', 'comment_created': datetime.datetime(2021, 7, 6, 21, 5, 40, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 664877943, 'comment_body': 'This is not fixed (in either the comment or the code constant name). Please do not say something is ""done"" when it is not fixed.', 'comment_created': datetime.datetime(2021, 7, 6, 21, 5, 56, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 665150104, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 7, 8, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 665150498, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 7, 8, 19, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 665153620, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 7, 8, 23, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 665153737, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 7, 8, 23, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 665154617, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 7, 8, 24, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 665154732, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 7, 8, 25, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 665154855, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 7, 8, 25, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 665155224, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 7, 8, 25, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 665190356, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 7, 9, 11, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 665191272, 'comment_body': 'Fixed. Sorry.', 'comment_created': datetime.datetime(2021, 7, 7, 9, 12, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 665757819, 'comment_body': '(Optional) Can replace these three lines with `return query.fetch(limit) if limit is not None else query.fetch()`', 'comment_created': datetime.datetime(2021, 7, 7, 22, 58, 1, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 665757867, 'comment_body': 'Ditto.', 'comment_created': datetime.datetime(2021, 7, 7, 22, 58, 12, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 665939569, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 8, 7, 28, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 665939678, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 8, 7, 28, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}]","[{'commit_sha': 'f220000a0ce4db1a0c2819d7b0b94ae8bafb7f03', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e551b780e706964424557059e5d60943392e3441', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4924316046e32098de49e3c44eadb6887741d671', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba6c95ebbfbd04e7c635f1caabd25298f7effca6', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0cb7fdf6cf87d371c7e98f12d3fece37e5b37b68', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38efbbce690d38981427cdf540c57d4c18209720', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '304bc5aba10360396409145d40d2dfe138292783', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05b858a5df9537c1c48c5da81545375887808756', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c7d5c0d529315cf0011fd197b7495245e4ced09', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2162747213d8b36229191140b5cc12bf6c68587c', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c610fc4bfc6881cc03edc87c442dc5c3e57205f', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '55df0c4ab93cf7d699bc64471980ea917e4f251a', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b2386d3177db1b52399fd223f4df97617662ee9c', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8abaca68393bc7d1e76dc1eba667c4ec2b674ac0', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8badd87ca580231bd95c4b26b0ebabe099f8eb57', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51512e082d993edfe9a5f117f44052d7ed2a1463', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1efdfe6483d1ae913f8172b5bac1b07cdba5f35a', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b3ea398cfc49cca6da4d57ca7a2838c222c0e69', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9e036c857425dbd6608ca1b8db05cb0490af006', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4563d740a88654be565d3834d2139b87e3b71ddf', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '050463828f8ca2576f35ddc0df17ef3dfd23cc0a', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56b721f380293780364db2402c89140b63e071e5', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e6416dfea92c660509e149756722bc7e60b210e', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4491d7f97733db3e8908173892743fe4aa2e2322', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9a99608167936d41faa23ca63bd72422f74d65d', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3790ce23faccb0e128b73a83309531916b863ba', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93561bba6488f350ef29515fb54aa853276639e4', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd6c683ad9e3cd91510576834433ca41802136f87', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4fa58ba95e98a6e50a075b0bae69e5b986585d8f', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '78f580cd246cd7cd5b97a59cb272845976588b95', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e105b043b3f10b933e6b5a1be470d2a9fdfc9bee', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15013d579f9e081ad9b59cd577f9494eeb73a8fb', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e5ef6197d5595726dd245f207f76e96c85d45258', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b37096a6dc574973df663f0cd6b2206181cac09f', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2593f4ddbd61bf5887f313e70eae2f4bff65601', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e147bd8e127f8e8acab5cba00a2f9e6f39ace39', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '323a3df45e302ca89a8bd7bdf091f42d28fa2ad6', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0049c28618ff562f0dd2584dac149dbdcdbb7aef', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '337aea36d2e5602ebaf479d103b578bdf6cbd218', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'edcca45bc279d71b6442232ce5f07ead2673d082', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34a68b05308e6b3ea9ca19dd0f5a2c7122af58f2', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c04c0db04a6c041c62b0eb09539e4255a3e56edd', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f69b8486be43534351b3ebe06e1c3a95c5433071', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7447e55d9ea2f903d5315b6402d1514f2f2322f4', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a22332b2363f33f1e8fc66a013ae473a5131d1c8', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd12ba68cdab3655ae8be7f33a7cb7e8b7cb598b8', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50a61625edd8228f82f1ff657642f7664866ad11', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66a1a5d3c2f89149fea352b4aacf348aeb4c72d7', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17c34ec395ebd5ece87d222c645186a12b8f0646', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc9d90d0d72e33f204375d99d0616b27e1bc6b5e', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2642465753f5a29b0050e0b990448cb6a4ec584b', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '291806929c3d6d4d9e58e2c4c815aae6454593a5', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f40d680e21d474709658692f23e2fa5a00c579d0', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '29614b26124a76c161f5c0bc118c1a32dbea15c5', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa390ee5f598c8a14c1512847f8c2c8e2bdc34c5', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '005d35ff978269462f260da9588e7315ac78dcc8', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b8c9038351dbf72b908f8fd3998a245ddc584497', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88b49882f1406ea176c1eb86946ed25c1e0f3782', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f360ca9d426238c4f601b63bf3689e949664557', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b26bd1875312f75c413fbb92994f4e774ab3a67f', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4bc4926f93050bbdcab36e9d40c578bb378295d', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16a9af1fde4ecaacd6d444801f166084b2a7b524', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '252b6f08c56ea5e77c0a763286e3be73140a4850', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90398037383d3ed9ea849ad488b3be73cc96264f', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c43f5dd59623c7a885db3a2d4c64a272a535a040', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'becba89b8d893bf87898852ce62f0bff42b3e044', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '479b720b8ba654d53ff6bf1d678fb0ccb0bcaa08', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3237bd214a9586c099499476de950b40f7f1547d', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d1d8d7ca9fea4565781ad2200caacfcae10de7e', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6191b91a9f8453344914b671a1e06f92918b2c1f', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2284a60e9a54cad5ed122ea839ff6dbb2bd14a5b', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '91d8c5707d5f1317bd3a6f8f19cfbcd1219c0bb9', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6392e699ae50df09cd4022370edd31dd015b3689', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3198901e61e9fb5af128adec5e7855e38785327', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8b90380f8fe22b8103df408e4ca8ccbca8ea42e', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c20f5f2120f2cbadbafc75db68c666ab75368502', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79bfbd250fccfc58d4da40708e5dae8a3ade8530', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c909d2d10cdb89e8b8139073cc6a3e26829969c', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6bc536c8a03209162e2523d7fee4ae20ce0423b8', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '455b27c13a9eb4ab9d5a3e989e8a9f3cd456e7b5', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d8f4bedaaf75c035e97c1248fdc1dc1e5f2e83a', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20269bd78fdda6c894d3187b9875c6c508bb8c73', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a4679bcca764befa0ebeb783fbf5e4cece23b55', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f4cb4810be6e121caefbdf54592f869812ebcbe0', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2f72e3af8d446711ff9b48c3a044d421a0418a67', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c5ce9c103e398c4e7330d4c9a77edd01cd703cb1', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34238e5f0515ba887db0ab1a45f3cde336c1f92a', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '77b4a160d5c21671af27049121cb820dd536eb3d', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c9751984c64793042f9efea738ed162712144a8', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db60132ad46c88201ce73cd2ed60131634cc0af8', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10c779e89ca4aae4966c87588f6cd0cf670e59bf', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '712b7cb98f781e6c26cb856878e6029aa6f74ccf', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '55af1cb9b0613f813cb6b3f03b1493fcaf41b457', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74716f59f1a0ed60613d0d888b60addc873ccca6', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9dd68d7de641a81c59f657934ef9355ca41d7b24', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87339b8e34ca6beccbfc88de9ce1de6abb7deaaa', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '058a56e1c4cd105d1c656deb848cd018fb9d122d', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1982f5cec1d239ed6ac0ab1da10cf41bec9b6436', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5cc202f481eac9c7dbe92849391e06d5fac3d4b5', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76c128f18354eb4474d2afada52a58dcdd1fb3a3', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3fe0fa6246eed72f366c7d0666e91ee42b979e10', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ee4f7d7a47f73ea04b4e5b48cb9b7ef7e6a45e4', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '24ab6a23fd99cb4e2b15312bb145224c64fdb165', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f8823175fcd5c639bffc22062f1bdc176cf29c4d', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '58c4914da286d2dba6c908a52692766c6cfffd63', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ad2b3ad7ca083142bae569feff8d1ca86ebf440', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '637353fc583c92bf269136fe4f4d4dc6ed6a0054', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2e7fc892ef8e0728d55036209356797b704994e0', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0fdc35eb03dcc098a160b7df783ac75a4f71631e', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f4080e3cf467e7717c9819adbd90acc093ab4fa', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ff59dd274406e933d8aebcb485f8b07c816cbaf', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '783f0ae1851879b63c4c5825b3cbf9958d5fa717', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'efe8b54ddb0236bae19261d589b86341dc7b095d', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '635aeb72c50245fc7eaac8c3b5a202711c4cce02', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f36c5337a15dd9023386d41f3e610cda87872d5d', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af8ec47397658b705afcd052abc830e70333f424', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb7c5ba8d3c837b5a09ee5c2289112994c42d7c3', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '630aca3e9c317796483777ff6c4db9871f783258', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8702f3612c6229a0978b8fc005d08efd346a4e9c', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8635e75f7dd32f1d7cf38fbbbbcdb435743f013e', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0fdeb2bd7458dcade453b84f98303731f9effd5a', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c92859109392b9bd6f359acdc53b221c2908849a', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ba0cca4a1fd452fff7c4fdb097a391ab5062cbb', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8719ab89e50c39567fd95650b67f92bf4488b9fd', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac3337ea96363d577aae865439c5d37bc62d6a04', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ba0520e97db7c7742724823fba9d71353d26a44', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c75791dfd645aa473415623e4dd3a43dec2a179', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '77905e4867fe3cb217645508eaba797849c99bde', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6fdcdd40dfaf0fc5d87f3f69541f065d84a320b1', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0a215b07cabb5f1b0c3e1418731a1c308d32587', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '409c84a119b43a9d605c2b38e5f72f5ddc808c3c', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e8b64c734d1debd17a181e8cb997a42af7c37688', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}]",Rijuta Singh,68547101,,User,,7,,13,22
683070021,Milestone 1.5 : Adds blog admin page frontend.,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of N.A
2. This PR does the following: Adds blog admin page to allow blog admin to update role to blog admin and blog editor , remove blog editors and change blog post related configuration properties.

## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## Proof that changes are correct

![Screenshot from 2021-07-04 02-30-36](https://user-images.githubusercontent.com/68547101/124366813-0d266500-dc70-11eb-8c52-91692fb9be31.png)
![Screenshot from 2021-07-04 02-30-44](https://user-images.githubusercontent.com/68547101/124366814-0f88bf00-dc70-11eb-95ef-ac36ee2026a3.png)
![Screenshot from 2021-07-04 19-51-32](https://user-images.githubusercontent.com/68547101/124388677-88842700-dd01-11eb-98f0-b0d51de207ca.png)


## PR Pointers

- Make sure to follow the [instructions for making a code change](https://github.com/oppia/oppia/wiki/Contributing-code-to-Oppia#instructions-for-making-a-code-change).
- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays.
- Never force push. If you do, your PR will be closed.
- Oppiabot can assign anyone for review/help if you leave a comment like the following: ""{{Question/comment}} @{{reviewer_username}} PTAL""
- Some of the e2e tests are flaky, and can fail for reasons unrelated to your PR. We are working on fixing this, but in the meantime, if you need to restart the tests, please check the [""If your build fails"" wiki page](https://github.com/oppia/oppia/wiki/If-your-build-fails).
",True,13300,https://api.github.com/repos/oppia/oppia/pulls/13300,https://github.com/oppia/oppia/pull/13300,closed,1388,8,19,19,24,50,0,1,[],2021-07-03 19:44:51+00:00,2021-07-07 01:17:33+00:00,279162.0,"3 days, 5:32:42","[{'comment_id': 663409005, 'comment_body': 'This change is same as change in PR: https://github.com/oppia/oppia/pull/13225 ,  The https://github.com/oppia/oppia/pull/13225#discussion_r663299957 explains the reason. As this was blocking sending post request to the controllers in the this PR, added it here.\r\n// cc @Nik-09 ', 'comment_created': datetime.datetime(2021, 7, 3, 21, 6, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 663409195, 'comment_body': 'The structure of the navbar is same as release coordinator navbar file( or admin page navbar file)', 'comment_created': datetime.datetime(2021, 7, 3, 21, 8, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 663681064, 'comment_body': ""Shouldn't this also check if the actual value of the user role has changed? "", 'comment_created': datetime.datetime(2021, 7, 5, 6, 54, 32, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 663682793, 'comment_body': 'Add cases for: 1) When both values are invalid. 2) When the value has an invalid datatype or is None.', 'comment_created': datetime.datetime(2021, 7, 5, 6, 57, 50, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 663686096, 'comment_body': '*2021', 'comment_created': datetime.datetime(2021, 7, 5, 7, 4, 19, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 663686477, 'comment_body': '*2021', 'comment_created': datetime.datetime(2021, 7, 5, 7, 4, 56, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 663757688, 'comment_body': 'We only check for actions being performed by the corresponding component.ts file. We will ensure that it successfully displays the message received from the backend API service. The test to ensure that the actual value of the role changes,  is in the controller layer for a successful post request. We test here that the correct user role change message is displayed if the post request is successfull.', 'comment_created': datetime.datetime(2021, 7, 5, 8, 55, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 663804267, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 5, 10, 0, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 663804362, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 5, 10, 0, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 663804413, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 5, 10, 0, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 663919347, 'comment_body': 'Makes sense, thanks!', 'comment_created': datetime.datetime(2021, 7, 5, 13, 9, 3, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 663999028, 'comment_body': ""```suggestion\r\n    get_redirect_route(\r\n        r'%s' % feconf.BLOG_ADMIN_PAGE_URL, blog_admin.BlogAdminPage),\r\n```"", 'comment_created': datetime.datetime(2021, 7, 5, 15, 8, 52, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 663999927, 'comment_body': 'Instead of having code-comment please create separate test function for each cases*', 'comment_created': datetime.datetime(2021, 7, 5, 15, 10, 23, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 664001034, 'comment_body': '```suggestion\r\n    background: rgb(255, 255, 255);\r\n```', 'comment_created': datetime.datetime(2021, 7, 5, 15, 12, 20, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 664195898, 'comment_body': ""```suggestion\r\n    expect(component.profileUrl).toBe(profileUrl);\r\n    expect(component.logoutUrl).toBe('/logout');\r\n```"", 'comment_created': datetime.datetime(2021, 7, 6, 2, 31, 26, tzinfo=datetime.timezone.utc), 'commenter': 'gp201', 'type': 'User'}, {'comment_id': 664196843, 'comment_body': 'This can be in the same line', 'comment_created': datetime.datetime(2021, 7, 6, 2, 34, 47, tzinfo=datetime.timezone.utc), 'commenter': 'gp201', 'type': 'User'}, {'comment_id': 664197011, 'comment_body': 'All the imports can be in the same line. There is no length limit per line for imports', 'comment_created': datetime.datetime(2021, 7, 6, 2, 35, 28, tzinfo=datetime.timezone.utc), 'commenter': 'gp201', 'type': 'User'}, {'comment_id': 664231009, 'comment_body': 'Is hybrid required? Any component/ service in this page that uses angularjs?', 'comment_created': datetime.datetime(2021, 7, 6, 4, 42, 48, tzinfo=datetime.timezone.utc), 'commenter': 'srijanreddy98', 'type': 'User'}, {'comment_id': 664248843, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 6, 5, 38, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 664248873, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 6, 5, 38, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 664248954, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 6, 5, 38, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 664249297, 'comment_body': 'not required. Changed to false.', 'comment_created': datetime.datetime(2021, 7, 6, 5, 39, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 664392742, 'comment_body': ""I'm not able to distinguish between the setup, pre-checks, action, and post-checks steps for this test. Please add a space after each step."", 'comment_created': datetime.datetime(2021, 7, 6, 9, 28, 47, tzinfo=datetime.timezone.utc), 'commenter': 'gp201', 'type': 'User'}, {'comment_id': 664392841, 'comment_body': 'Ditto', 'comment_created': datetime.datetime(2021, 7, 6, 9, 28, 55, tzinfo=datetime.timezone.utc), 'commenter': 'gp201', 'type': 'User'}, {'comment_id': 664393948, 'comment_body': 'Ditto. Please check all other places also', 'comment_created': datetime.datetime(2021, 7, 6, 9, 30, 22, tzinfo=datetime.timezone.utc), 'commenter': 'gp201', 'type': 'User'}, {'comment_id': 664432471, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 6, 10, 26, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 664432528, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 6, 10, 26, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 664432633, 'comment_body': 'Done. Thanks.\r\n', 'comment_created': datetime.datetime(2021, 7, 6, 10, 26, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 664437088, 'comment_body': ""```suggestion\r\n        component.formData.updateRole.newRole = 'BLOG_ADMIN';\r\n        component.formData.updateRole.username = 'username';\r\n        spyOn(adminTaskManagerService, 'isTaskRunning').and.returnValue(true);\r\n\r\n        component.submitUpdateRoleForm(component.formData.updateRole);\r\n```"", 'comment_created': datetime.datetime(2021, 7, 6, 10, 34, tzinfo=datetime.timezone.utc), 'commenter': 'gp201', 'type': 'User'}, {'comment_id': 664437461, 'comment_body': ""```suggestion\r\n      tick();\r\n      component.formData.removeEditorRole.username = 'username';\r\n      spyOn(adminTaskManagerService, 'isTaskRunning').and.returnValue(true);\r\n\r\n      component.submitRemoveEditorRoleForm(component.formData.updateRole);\r\n```"", 'comment_created': datetime.datetime(2021, 7, 6, 10, 34, 34, tzinfo=datetime.timezone.utc), 'commenter': 'gp201', 'type': 'User'}, {'comment_id': 664438153, 'comment_body': 'Am I right in assuming that this is the action step? if it is please add a new line to distinguish between the steps', 'comment_created': datetime.datetime(2021, 7, 6, 10, 35, 39, tzinfo=datetime.timezone.utc), 'commenter': 'gp201', 'type': 'User'}, {'comment_id': 664464742, 'comment_body': 'Done. yup right.', 'comment_created': datetime.datetime(2021, 7, 6, 11, 18, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 664464790, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 6, 11, 19, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 664464818, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 6, 11, 19, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 664722464, 'comment_body': 'hybrid field is not required. It can be removed.', 'comment_created': datetime.datetime(2021, 7, 6, 16, 48, 30, tzinfo=datetime.timezone.utc), 'commenter': 'srijanreddy98', 'type': 'User'}, {'comment_id': 664724003, 'comment_body': ""These are actually not required (since you've mentioned that angularjs is not required). Can you follow the examples in https://github.com/oppia/oppia/pull/13073 and https://github.com/oppia/oppia/pull/13098 use only Angular2+ in this page?"", 'comment_created': datetime.datetime(2021, 7, 6, 16, 50, 36, tzinfo=datetime.timezone.utc), 'commenter': 'srijanreddy98', 'type': 'User'}, {'comment_id': 664787544, 'comment_body': ""This page uses the upgraded `schema-based-editor` directive. So, angularjs can't be removed yet."", 'comment_created': datetime.datetime(2021, 7, 6, 18, 30, 4, tzinfo=datetime.timezone.utc), 'commenter': 'ashutoshc8101', 'type': 'User'}, {'comment_id': 664787687, 'comment_body': 'This should be `true`.', 'comment_created': datetime.datetime(2021, 7, 6, 18, 30, 18, tzinfo=datetime.timezone.utc), 'commenter': 'ashutoshc8101', 'type': 'User'}, {'comment_id': 664790510, 'comment_body': 'Yup, Thanks @ashutoshc8101, changed the hybrid flag back to true. ', 'comment_created': datetime.datetime(2021, 7, 6, 18, 35, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 664798102, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 6, 18, 47, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 664805918, 'comment_body': ""Happy to see this being used here, should we move `oppia-roles-and-actions-visualizer` to components dir in a separate PR? (Also, I'm adding a new directive for roles editing I'll make it reusable so that you can use it here. I'll let you know once my PR is merged, you can create a separate PR to reuse the roles-editor component once it's ready.) "", 'comment_created': datetime.datetime(2021, 7, 6, 18, 58, 30, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 664807356, 'comment_body': ""IF this directive is in angular Can we use the angular's form module? It provides a better structure for creating such forms structure with a validation method. [Optional or can be done in a separate PR and should not block this PR]"", 'comment_created': datetime.datetime(2021, 7, 6, 19, 0, 41, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 664813608, 'comment_body': 'Should I create an issue and add a TODO for all the 2 comments together?  Moving `oppia-roles-and-actions-visualizer`, reusing the new roles editor directive here and change this into forms module?', 'comment_created': datetime.datetime(2021, 7, 6, 19, 11, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 664825205, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 6, 19, 32, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 664825861, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 6, 19, 33, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 664825999, 'comment_body': 'Sure thing.', 'comment_created': datetime.datetime(2021, 7, 6, 19, 33, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 664826692, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 6, 19, 34, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 664829192, 'comment_body': ""Yep let's have one issue with all minor/improvement tasks which you can work on after this PR is merged! (The issue will also include reusing the new roles-editor component)"", 'comment_created': datetime.datetime(2021, 7, 6, 19, 39, 34, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 664852194, 'comment_body': 'https://github.com/oppia/oppia/issues/13327 opened the issue.', 'comment_created': datetime.datetime(2021, 7, 6, 20, 20, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 664857108, 'comment_body': 'Thanks!', 'comment_created': datetime.datetime(2021, 7, 6, 20, 28, 36, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}]","[{'commit_sha': 'd1b573a87b5ec5c5f4e6f26d346b14eea405718a', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7fc214626ce7e5244124a407ceb4442b2ed2bbfc', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2f998d8d1d3c5cd35b090b615512a2deec551ce8', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd54cf2b506fe13819d129832b002a48501dc847c', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c39d81ed57cc84dcc10daf985f9853f5c2bbd959', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a4c8c95c4e006948db86520c05f4c30bbd11dfd', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '58c3d9d3f576ae92c05b1cdd145045630a92f477', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd458533a4cd4f4cfacd29f2925897e55f4fb77fe', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc750bf1e1b2444c088d8af09eb7127389d19dd9', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a0369c1b21d5bf0c44e988f646672940b3fa362', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5a98e3ddfe90fc09384f2d07c464803d7103410', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e3319453e42aa934d99a381bb10d463beac68a4', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a2ac72052f163ee607ee9b4e67a1d81cface055', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'faef9923e31d2da76c199d9568963fb42d43cfe7', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6bd0d76fa41a1d2f9900db365426d8c8ac807f4f', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd60433b1493d75eda575df4dd588e0fe6c530e3', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a14a53c562a72fabcbe9da64782254fe207fcb3f', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3a903e548e383fbeeaf8756ff3232fcb503b8bd', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ad32b1c1ad4fe86cb87ef6a2cc394b6c175dcbb', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}]",Rijuta Singh,68547101,,User,,7,,13,22
690465555,Milestone 2.1 : Adding format heading drop-down to RTE.,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of nothing.
2. This PR does the following: Adds format heading drop-down to CKE editor config.

## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## Proof that changes are correct
The changes were checked by making value of `headersEnabled` true in state-content-editor.


https://user-images.githubusercontent.com/68547101/125746689-e3dd8a3a-1b84-47c1-bbf8-280eb0eed61d.mp4

https://user-images.githubusercontent.com/68547101/125746670-39b6583f-5e69-4881-b3c5-155973930954.mp4

## PR Pointers

- Make sure to follow the [instructions for making a code change](https://github.com/oppia/oppia/wiki/Contributing-code-to-Oppia#instructions-for-making-a-code-change).
- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays.
- Never force push. If you do, your PR will be closed.
- Oppiabot can assign anyone for review/help if you leave a comment like the following: ""{{Question/comment}} @{{reviewer_username}} PTAL""
- Some of the e2e tests are flaky, and can fail for reasons unrelated to your PR. We are working on fixing this, but in the meantime, if you need to restart the tests, please check the [""If your build fails"" wiki page](https://github.com/oppia/oppia/wiki/If-your-build-fails).
",True,13400,https://api.github.com/repos/oppia/oppia/pulls/13400,https://github.com/oppia/oppia/pull/13400,closed,61,8,5,7,3,2,1,1,[{'name': 'PR: LGTM'}],2021-07-15 07:24:59+00:00,2021-07-17 19:16:54+00:00,215515.0,"2 days, 11:51:55","[{'comment_id': 671722021, 'comment_body': 'Did `format_tags` already exist in the type for `CKEDITOR.config`?', 'comment_created': datetime.datetime(2021, 7, 17, 17, 19, 28, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 671728640, 'comment_body': 'yes, format_tags is already a property(line 713 of index.ts of cke editor):\r\n![Screenshot from 2021-07-17 23-55-25](https://user-images.githubusercontent.com/68547101/126046382-1b546027-86c6-48ce-9506-a46b911ed74b.png)\r\n', 'comment_created': datetime.datetime(2021, 7, 17, 18, 26, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}]","[{'commit_sha': 'd2461fa1e789ab5b7473e6b1f1a5f1250e68dd55', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c080274d22670c1238e37ed39b8bd6644915989b', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ad13ae80f5f1930bda70e2938bc609ac5d1a984', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb07832a6b90a9d408745c966ec6238fddf13202', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87169526defad5a063eaa0af90d6f91c73deaf75', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d5aadc5dea34a06fedc7e3be0135b78df862b5d', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02bc763e9c7785e5898b0deb9aa4afb351c0e5c0', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}]",Rijuta Singh,68547101,,User,,7,,13,22
693651280,Milestone 2.2: Adds Backend Api services for blog dashboard.,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of N.A.
2. This PR does the following: Adds all the required blog dashboard backend api services along with the basic page configuration,

## Proof that changes are correct
![Screenshot from 2021-07-20 23-55-21](https://user-images.githubusercontent.com/68547101/126377866-c9e24894-ce2d-40bb-82c8-d4806faff95f.png)
![Screenshot from 2021-07-21 00-10-47](https://user-images.githubusercontent.com/68547101/126378031-2fa64fa9-59f6-419f-8795-77470e000af0.png)

## Essential Checklist

- [ ] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Make sure to follow the [instructions for making a code change](https://github.com/oppia/oppia/wiki/Contributing-code-to-Oppia#instructions-for-making-a-code-change).
- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays.
- Never force push. If you do, your PR will be closed.
- Oppiabot can assign anyone for review/help if you leave a comment like the following: ""{{Question/comment}} @{{reviewer_username}} PTAL""
- Some of the e2e tests are flaky, and can fail for reasons unrelated to your PR. We are working on fixing this, but in the meantime, if you need to restart the tests, please check the [""If your build fails"" wiki page](https://github.com/oppia/oppia/wiki/If-your-build-fails).
",True,13439,https://api.github.com/repos/oppia/oppia/pulls/13439,https://github.com/oppia/oppia/pull/13439,closed,1670,12,26,34,15,86,1,2,[{'name': 'PR: LGTM'}],2021-07-20 17:19:43+00:00,2021-07-25 21:05:42+00:00,445559.0,"5 days, 3:45:59","[{'comment_id': 673350082, 'comment_body': 'We will be using schema based editor which is still using angularjs. Thus `hybrid: true`', 'comment_created': datetime.datetime(2021, 7, 20, 17, 43, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 673406108, 'comment_body': '```suggestion\r\n    """"""Blog Dashboard Page Handler to render the frontend template.""""""\r\n```', 'comment_created': datetime.datetime(2021, 7, 20, 19, 10, 50, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 673406988, 'comment_body': ""Shouldn't we add `expected_status_int=200`?"", 'comment_created': datetime.datetime(2021, 7, 20, 19, 12, 19, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 673407073, 'comment_body': 'ditto', 'comment_created': datetime.datetime(2021, 7, 20, 19, 12, 31, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 673408110, 'comment_body': ""```suggestion\r\n        'Blog Post content should not be empty.');\r\n```"", 'comment_created': datetime.datetime(2021, 7, 20, 19, 14, 25, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 673408367, 'comment_body': 'Please fix this here and elsewhere.', 'comment_created': datetime.datetime(2021, 7, 20, 19, 14, 51, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 673408740, 'comment_body': '```suggestion\r\n    if (this._tags.length === 0) {\r\n```', 'comment_created': datetime.datetime(2021, 7, 20, 19, 15, 32, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 673409719, 'comment_body': '```suggestion\r\n        `Blog Post should have atmost ${maxTags} tag(s) linked to it.`);\r\n```', 'comment_created': datetime.datetime(2021, 7, 20, 19, 17, 15, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 673412390, 'comment_body': 'Should we also have validation for the maxTags value to ensure that it is not zero? If the maxTags value is set to zero, it will be impossible for the blog to be published.', 'comment_created': datetime.datetime(2021, 7, 20, 19, 21, 45, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 673413289, 'comment_body': 'I think these should be in a separate typings file.', 'comment_created': datetime.datetime(2021, 7, 20, 19, 23, 15, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 673414278, 'comment_body': 'Please move them to a separate typings file.', 'comment_created': datetime.datetime(2021, 7, 20, 19, 24, 49, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 673415165, 'comment_body': '```suggestion\r\n// Copyright 2021 The Oppia Authors. All Rights Reserved.\r\n```', 'comment_created': datetime.datetime(2021, 7, 20, 19, 26, 17, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 673418802, 'comment_body': ""You haven't used AngularJS anywhere, right? You can actually remove AngularJS from these files. You can refer to the other pages in the `templates/pages` directory or you can refer to #13073 or #13098."", 'comment_created': datetime.datetime(2021, 7, 20, 19, 32, 2, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 673424790, 'comment_body': 'I will be using schema based editor in the dashboard, thus currently we cannot remove AngularJs from the module as the editor is yet not migrated. \r\n// cc @ashutoshc8101 ', 'comment_created': datetime.datetime(2021, 7, 20, 19, 41, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 673789373, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 21, 8, 56, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 673789790, 'comment_body': 'It is set to `expected_status_int=200` by default, however added.', 'comment_created': datetime.datetime(2021, 7, 21, 8, 56, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 673789958, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 21, 8, 57, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 673790047, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 21, 8, 57, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 673831510, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 21, 9, 54, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 673831679, 'comment_body': 'Fixed, added a check in blog_admin.py to ensure that blog admin cannot set a value of 0 for max tags ', 'comment_created': datetime.datetime(2021, 7, 21, 9, 54, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 673831832, 'comment_body': 'Done. Thanks', 'comment_created': datetime.datetime(2021, 7, 21, 9, 54, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 673831957, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 21, 9, 55, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 673832041, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 21, 9, 55, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 673836433, 'comment_body': 'Schema based editors are not migrated yet. If they are going to be used on this page, angularjs is required.', 'comment_created': datetime.datetime(2021, 7, 21, 10, 1, 36, tzinfo=datetime.timezone.utc), 'commenter': 'ashutoshc8101', 'type': 'User'}, {'comment_id': 673844327, 'comment_body': '@ashutoshc8101 Thanks for the confirmation.  ', 'comment_created': datetime.datetime(2021, 7, 21, 10, 13, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 674040239, 'comment_body': 'Reverted changes', 'comment_created': datetime.datetime(2021, 7, 21, 14, 44, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 674040338, 'comment_body': 'Reverted changes.', 'comment_created': datetime.datetime(2021, 7, 21, 14, 44, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 674721908, 'comment_body': 'We are moving from Object Factories to models. Can you change this to model?', 'comment_created': datetime.datetime(2021, 7, 22, 11, 44, 13, tzinfo=datetime.timezone.utc), 'commenter': 'ashutoshc8101', 'type': 'User'}, {'comment_id': 674722433, 'comment_body': 'Always use `AppConstants` to access contents of `constants.ts` file.', 'comment_created': datetime.datetime(2021, 7, 22, 11, 45, 12, tzinfo=datetime.timezone.utc), 'commenter': 'ashutoshc8101', 'type': 'User'}, {'comment_id': 674723104, 'comment_body': 'can you use es6 getters and setters here?', 'comment_created': datetime.datetime(2021, 7, 22, 11, 46, 28, tzinfo=datetime.timezone.utc), 'commenter': 'ashutoshc8101', 'type': 'User'}, {'comment_id': 674723363, 'comment_body': 'Always use `let/const` instead of `var`.', 'comment_created': datetime.datetime(2021, 7, 22, 11, 46, 56, tzinfo=datetime.timezone.utc), 'commenter': 'ashutoshc8101', 'type': 'User'}, {'comment_id': 674723708, 'comment_body': 'No need to initialize this to null. Also, _ prefix is for private members. Can you drop the `_` here?', 'comment_created': datetime.datetime(2021, 7, 22, 11, 47, 30, tzinfo=datetime.timezone.utc), 'commenter': 'ashutoshc8101', 'type': 'User'}, {'comment_id': 674724735, 'comment_body': 'This is not required. ', 'comment_created': datetime.datetime(2021, 7, 22, 11, 49, 10, tzinfo=datetime.timezone.utc), 'commenter': 'ashutoshc8101', 'type': 'User'}, {'comment_id': 674725139, 'comment_body': 'add `;` at the end of line.', 'comment_created': datetime.datetime(2021, 7, 22, 11, 49, 49, tzinfo=datetime.timezone.utc), 'commenter': 'ashutoshc8101', 'type': 'User'}, {'comment_id': 674725299, 'comment_body': 'add `;` at the end of line', 'comment_created': datetime.datetime(2021, 7, 22, 11, 50, 5, tzinfo=datetime.timezone.utc), 'commenter': 'ashutoshc8101', 'type': 'User'}, {'comment_id': 674725400, 'comment_body': '```suggestion\r\n  constructor(private http: HttpClient) {}\r\n```', 'comment_created': datetime.datetime(2021, 7, 22, 11, 50, 18, tzinfo=datetime.timezone.utc), 'commenter': 'ashutoshc8101', 'type': 'User'}, {'comment_id': 674726497, 'comment_body': '```suggestion\r\n  filename: string;\r\n  imageBlob: Blob;\r\n```', 'comment_created': datetime.datetime(2021, 7, 22, 11, 52, 4, tzinfo=datetime.timezone.utc), 'commenter': 'ashutoshc8101', 'type': 'User'}, {'comment_id': 674726613, 'comment_body': '```suggestion\r\n  blogPostDict: BlogPostData;\r\n```', 'comment_created': datetime.datetime(2021, 7, 22, 11, 52, 17, tzinfo=datetime.timezone.utc), 'commenter': 'ashutoshc8101', 'type': 'User'}, {'comment_id': 674726944, 'comment_body': 'single quotes are only required for fields with `_` in their name.', 'comment_created': datetime.datetime(2021, 7, 22, 11, 52, 48, tzinfo=datetime.timezone.utc), 'commenter': 'ashutoshc8101', 'type': 'User'}, {'comment_id': 674727111, 'comment_body': 'Can you sort these?', 'comment_created': datetime.datetime(2021, 7, 22, 11, 53, 6, tzinfo=datetime.timezone.utc), 'commenter': 'ashutoshc8101', 'type': 'User'}, {'comment_id': 674727993, 'comment_body': ""```suggestion\r\n  'title'?: string;\r\n  'thumbnail_filename'?: string;\r\n  'content'?: string;\r\n  'tags'?: string[];\r\n```"", 'comment_created': datetime.datetime(2021, 7, 22, 11, 54, 34, tzinfo=datetime.timezone.utc), 'commenter': 'ashutoshc8101', 'type': 'User'}, {'comment_id': 674728116, 'comment_body': '```suggestion\r\n  filename: string;\r\n  imageBlob: Blob;\r\n```', 'comment_created': datetime.datetime(2021, 7, 22, 11, 54, 46, tzinfo=datetime.timezone.utc), 'commenter': 'ashutoshc8101', 'type': 'User'}, {'comment_id': 674728239, 'comment_body': 'constructor not required as it is not doing anything.', 'comment_created': datetime.datetime(2021, 7, 22, 11, 54, 59, tzinfo=datetime.timezone.utc), 'commenter': 'ashutoshc8101', 'type': 'User'}, {'comment_id': 674728886, 'comment_body': 'Does this help in fixing failing e2e suites?', 'comment_created': datetime.datetime(2021, 7, 22, 11, 55, 54, tzinfo=datetime.timezone.utc), 'commenter': 'ashutoshc8101', 'type': 'User'}, {'comment_id': 674730081, 'comment_body': ""Why a empty page is introduced here?\r\nIf the page is not complete, shouldn't we make it inaccessible to users until it is complete.\r\n\\cc @iamprayush "", 'comment_created': datetime.datetime(2021, 7, 22, 11, 57, 51, tzinfo=datetime.timezone.utc), 'commenter': 'ashutoshc8101', 'type': 'User'}, {'comment_id': 674740217, 'comment_body': ""The page can only be accessed by blog admins or blog post editors.And currently no one will be assigned such roles. So I don't think it  will create any issues."", 'comment_created': datetime.datetime(2021, 7, 22, 12, 14, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 674740346, 'comment_body': 'Yup.', 'comment_created': datetime.datetime(2021, 7, 22, 12, 14, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 674747877, 'comment_body': 'Thanks, @Rijuta-s for the context. This sounds reasonable now.', 'comment_created': datetime.datetime(2021, 7, 22, 12, 25, 26, tzinfo=datetime.timezone.utc), 'commenter': 'ashutoshc8101', 'type': 'User'}, {'comment_id': 674872670, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 22, 14, 47, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 674872889, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 22, 14, 47, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 674873902, 'comment_body': 'Done here and elsewhere. Thanks', 'comment_created': datetime.datetime(2021, 7, 22, 14, 48, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 674874299, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 22, 14, 48, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 674876135, 'comment_body': 'Removed.', 'comment_created': datetime.datetime(2021, 7, 22, 14, 50, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 674876260, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 22, 14, 50, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 674876622, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2021, 7, 22, 14, 50, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 674876844, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 22, 14, 50, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 674877155, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 22, 14, 51, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 674877366, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 22, 14, 51, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 674877545, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 22, 14, 51, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 674877725, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 22, 14, 51, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 674877922, 'comment_body': 'Sorry, Done.', 'comment_created': datetime.datetime(2021, 7, 22, 14, 51, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 674878003, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 22, 14, 51, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 674878145, 'comment_body': 'Removed. Thanks', 'comment_created': datetime.datetime(2021, 7, 22, 14, 51, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 674881039, 'comment_body': 'I think we should maintain uniformity inside a single interface, not sure. Like either having fields with single quotes or without than having mix?\r\n@DubeySandeep can you please tell what convention should be followed?\r\n', 'comment_created': datetime.datetime(2021, 7, 22, 14, 54, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 675006900, 'comment_body': 'rename the file name to `blog-post.model.ts` and same for spec file', 'comment_created': datetime.datetime(2021, 7, 22, 17, 25, 29, tzinfo=datetime.timezone.utc), 'commenter': 'ashutoshc8101', 'type': 'User'}, {'comment_id': 675008007, 'comment_body': 'use `let` here', 'comment_created': datetime.datetime(2021, 7, 22, 17, 26, 29, tzinfo=datetime.timezone.utc), 'commenter': 'ashutoshc8101', 'type': 'User'}, {'comment_id': 675009230, 'comment_body': 'Can you use `camelCase` for function names?', 'comment_created': datetime.datetime(2021, 7, 22, 17, 27, 30, tzinfo=datetime.timezone.utc), 'commenter': 'ashutoshc8101', 'type': 'User'}, {'comment_id': 675010508, 'comment_body': 'Assignment to null not required here and elsewhere', 'comment_created': datetime.datetime(2021, 7, 22, 17, 28, 33, tzinfo=datetime.timezone.utc), 'commenter': 'ashutoshc8101', 'type': 'User'}, {'comment_id': 675011168, 'comment_body': 'Not required here and elsewhere', 'comment_created': datetime.datetime(2021, 7, 22, 17, 29, 4, tzinfo=datetime.timezone.utc), 'commenter': 'ashutoshc8101', 'type': 'User'}, {'comment_id': 675039092, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 22, 17, 52, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 675039125, 'comment_body': 'Removed.', 'comment_created': datetime.datetime(2021, 7, 22, 17, 52, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 675039168, 'comment_body': 'Oops..Fixed.', 'comment_created': datetime.datetime(2021, 7, 22, 17, 52, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 675039278, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 22, 17, 52, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 675039312, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 22, 17, 52, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 675941684, 'comment_body': 'Are we going to allow users to access this page in production once this PR is release? [Just to confirm before we add this URL here!]', 'comment_created': datetime.datetime(2021, 7, 24, 3, 41, 10, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 675941934, 'comment_body': 'What if `max_number_of_tags_assigned_to_blog_post` < 0?\r\n\r\nCan you please add a schema for `max_number_of_tags_assigned_to_blog_post` which will  not allow add invalid values?', 'comment_created': datetime.datetime(2021, 7, 24, 3, 43, 24, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 676016634, 'comment_body': 'User can access this only after user is assigned role of blog admin or blog post editor, currently no one will be assigned these roles. So, it should be a problem. As such I will need to have all the PRs atleast on test server to check a job that will change blog post data while migrating jobs from medium to our website. Both the job and the blog post editor will be required.', 'comment_created': datetime.datetime(2021, 7, 24, 16, 10, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 676081339, 'comment_body': 'Changed to <= 0 and added test case for the same. All other schema validations are already performed  by the schema provided by the config domain in the controller args schema. Thank you.', 'comment_created': datetime.datetime(2021, 7, 25, 4, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 676123000, 'comment_body': 'nit: Add space before `validation`', 'comment_created': datetime.datetime(2021, 7, 25, 10, 28, 24, tzinfo=datetime.timezone.utc), 'commenter': 'aishwary023', 'type': 'User'}, {'comment_id': 676123127, 'comment_body': 'ditto: Add space. When the message would be shown it will look like this `...issues forexceeding property...`', 'comment_created': datetime.datetime(2021, 7, 25, 10, 29, 13, tzinfo=datetime.timezone.utc), 'commenter': 'aishwary023', 'type': 'User'}, {'comment_id': 676123214, 'comment_body': 'nit: space before `data`', 'comment_created': datetime.datetime(2021, 7, 25, 10, 29, 55, tzinfo=datetime.timezone.utc), 'commenter': 'aishwary023', 'type': 'User'}, {'comment_id': 676123252, 'comment_body': 'ditto: space', 'comment_created': datetime.datetime(2021, 7, 25, 10, 30, 8, tzinfo=datetime.timezone.utc), 'commenter': 'aishwary023', 'type': 'User'}, {'comment_id': 676193252, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 25, 19, 44, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 676193261, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 25, 19, 44, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 676193264, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 25, 19, 44, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 676193309, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 25, 19, 44, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}]","[{'commit_sha': 'd2461fa1e789ab5b7473e6b1f1a5f1250e68dd55', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c080274d22670c1238e37ed39b8bd6644915989b', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ad13ae80f5f1930bda70e2938bc609ac5d1a984', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb07832a6b90a9d408745c966ec6238fddf13202', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87169526defad5a063eaa0af90d6f91c73deaf75', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d5aadc5dea34a06fedc7e3be0135b78df862b5d', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02bc763e9c7785e5898b0deb9aa4afb351c0e5c0', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1dbf492e4ce334a07f2f79a1377de886dafa9243', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38489800c1333231ee305aac948a6fa5f331ca14', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96d49a9c7aa86077a5ec54235344aff10f94ee14', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1357401e7e2e74637388065c3d060a77801e627d', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46c1e9a50f4e9b4c4730b2c59855ab791af43283', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f80436d3a5f325e14a7233bab896b69571631b65', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9b8013bf945f233e933da7ca45cd0544b11e723', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c81860e2197758da709be40150ee69f62f94a6bf', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a94ca6327eec4d977d8e624adbc0fad4ffad6731', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a950ca9262b1bc2bdc544767c81bee768ee2cb8c', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb4332df4eed6bc0cffd2f489e37e640948b5585', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac41f5a4b256a8bf44bb82a7f7371f2814c9bf52', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '093b8843e89816782557074a0cfeaf62ec73a9d6', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9002393c512f51e0584785f5e261ddd265371fe', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e2fa631862bd3cdf9db721bf017943bc9340b06', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2678224e90b13a51385770006e72e885b064ae6d', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b35c489abc03fa67b0bdd9bdfb3502e05a2683d', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b9729778d57d590a03199233139e8e6bda35e06', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47d952f575aa8741bf95a63bde70bea133a240aa', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e1cf223182f36ebb55ea525c4b8651e2ea7c086', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3357b5043e276a972d1b62c153079e12a3f5fb5d', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95ecaea98b7b3d72f9f6f221ffd1d8df8078933d', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1cee0d4dbd7f58c615cde613ebe79ae0a0b8634', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8075f04e8ae35b0953e344bda0440b8ba0f94712', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38f35ea28554b5d3574ada812f43f2842895317f', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '146323a7cd06a122e44df009871a49b2cf36227d', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5dcbb8337e8e3cbaa9d3e57509134cbb3ee35843', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}]",Rijuta Singh,68547101,,User,,7,,13,22
696166155,Milestone 2.3: Adds Blog Card And Parts of Blog Dashboard Page ,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of Nothing
2. This PR does the following: Adds parts of blog dashboard main page and blog card.

## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## Proof that changes are correct

https://user-images.githubusercontent.com/68547101/126831851-a1b5f930-91b0-4977-a1e1-f0217af51eab.mp4

Blog Card:
![Screenshot from 2021-07-24 16-06-31](https://user-images.githubusercontent.com/68547101/126866950-9944e0c5-8b69-4916-985c-e552c0ae69f1.png)

Mobile View:

https://user-images.githubusercontent.com/68547101/126866912-5ba0aef9-e4f7-4ff8-a411-6e50d189e3ed.mp4

Blog card view ( for size < 680px)
![Screenshot from 2021-07-24 16-17-31](https://user-images.githubusercontent.com/68547101/126866981-55419f80-cf20-4fc3-beea-4c31cef07361.png) 

To check the changes locally: 
      To check the frontend view of the components made in this PR: [link](https://github.com/Rijuta-s/oppia/tree/blog_card_for_checking) can be used directly. It contains all the changes of this branch. It adds a sample blog post directly in the component file to produce the frontend view. It also displays the  'blog card' in the dashboard along with the blog dashboard tiles.

OR

In order to produce the component using the complete backned flow ---> blog post is required to be created in order to display the blog dashboard tile. `Postman` can be used or google extension `restman` [(link)](https://chrome.google.com/webstore/detail/restman/ihgpcfpkpmdcghlnaofdmjkoemnlijdi?hl=en) can be used.
             1. Assign role of 'blog admin' from admin page roles tab.
             2. Navigate to '/blog-dashboard'.
             3. Make post request to `/blogdashboardhandler/data` (No payload is required). via restman. A new blog post id will be generated and received as response.
             4. Make a put request to `/blogeditorhandler/data/<blog-post-id>` with a payload in following format :
     ```
             {
               'change_dict': {
                     'title': 'Sample Title',
                     'content': '<p>Hello<p>',
                     'tags': ['news'],
                },
                'new_publish_status': False
             }
     ```
            5. Reload the blog dashboard to see the blog dashboard tile of the draft blog post. 


## PR Pointers

- Make sure to follow the [instructions for making a code change](https://github.com/oppia/oppia/wiki/Contributing-code-to-Oppia#instructions-for-making-a-code-change).
- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays.
- Never force push. If you do, your PR will be closed.
- Oppiabot can assign anyone for review/help if you leave a comment like the following: ""{{Question/comment}} @{{reviewer_username}} PTAL""
- Some of the e2e tests are flaky, and can fail for reasons unrelated to your PR. We are working on fixing this, but in the meantime, if you need to restart the tests, please check the [""If your build fails"" wiki page](https://github.com/oppia/oppia/wiki/If-your-build-fails).
",True,13472,https://api.github.com/repos/oppia/oppia/pulls/13472,https://github.com/oppia/oppia/pull/13472,closed,980,52,27,65,14,46,1,1,[{'name': 'PR: LGTM'}],2021-07-23 19:28:38+00:00,2021-07-30 16:33:10+00:00,594272.0,"6 days, 21:04:32","[{'comment_id': 676032181, 'comment_body': 'Please add more tests for this.', 'comment_created': datetime.datetime(2021, 7, 24, 18, 48, 17, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 676124629, 'comment_body': 'nit: add space', 'comment_created': datetime.datetime(2021, 7, 25, 10, 41, 2, tzinfo=datetime.timezone.utc), 'commenter': 'aishwary023', 'type': 'User'}, {'comment_id': 676124670, 'comment_body': 'ditto: add space here and elsewhere', 'comment_created': datetime.datetime(2021, 7, 25, 10, 41, 28, tzinfo=datetime.timezone.utc), 'commenter': 'aishwary023', 'type': 'User'}, {'comment_id': 676185826, 'comment_body': 'Save this in a variable (during ngOnInit) and use that variable instead.', 'comment_created': datetime.datetime(2021, 7, 25, 18, 38, 7, tzinfo=datetime.timezone.utc), 'commenter': 'srijanreddy98', 'type': 'User'}, {'comment_id': 676194236, 'comment_body': 'Done. (here and in blog-card.component )', 'comment_created': datetime.datetime(2021, 7, 25, 19, 53, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 676194250, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 25, 19, 53, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 676194257, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 25, 19, 53, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 676292670, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 26, 5, 3, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 676443291, 'comment_body': 'Can you fix the indentation here?', 'comment_created': datetime.datetime(2021, 7, 26, 9, 32, 30, tzinfo=datetime.timezone.utc), 'commenter': 'ashutoshc8101', 'type': 'User'}, {'comment_id': 676444045, 'comment_body': '```suggestion\r\n    <mat-card-title class=""blog-card-title"">{{ blogPostSummary.title }}</mat-card-title>\r\n```\r\nHere and elsewhere', 'comment_created': datetime.datetime(2021, 7, 26, 9, 33, 35, tzinfo=datetime.timezone.utc), 'commenter': 'ashutoshc8101', 'type': 'User'}, {'comment_id': 676444511, 'comment_body': '```suggestion\r\n// Copyright 2021 The Oppia Authors. All Rights Reserved.\r\n```', 'comment_created': datetime.datetime(2021, 7, 26, 9, 34, 14, tzinfo=datetime.timezone.utc), 'commenter': 'ashutoshc8101', 'type': 'User'}, {'comment_id': 676445544, 'comment_body': 'Add an empty line here', 'comment_created': datetime.datetime(2021, 7, 26, 9, 35, 44, tzinfo=datetime.timezone.utc), 'commenter': 'ashutoshc8101', 'type': 'User'}, {'comment_id': 676445948, 'comment_body': '```suggestion\r\n  @Input() blogPostSummary!: BlogPostSummary;\r\n  @Input() authorProfilePicDataUrl!: string;\r\n```\r\nPlease try to use not null assertion for @Input variables', 'comment_created': datetime.datetime(2021, 7, 26, 9, 36, 16, tzinfo=datetime.timezone.utc), 'commenter': 'ashutoshc8101', 'type': 'User'}, {'comment_id': 676446756, 'comment_body': ""Don't downgrade until the component is used in an angularjs directive"", 'comment_created': datetime.datetime(2021, 7, 26, 9, 37, 25, tzinfo=datetime.timezone.utc), 'commenter': 'ashutoshc8101', 'type': 'User'}, {'comment_id': 676447401, 'comment_body': '```suggestion\r\n// Copyright 2021 The Oppia Authors. All Rights Reserved.\r\n```', 'comment_created': datetime.datetime(2021, 7, 26, 9, 38, 22, tzinfo=datetime.timezone.utc), 'commenter': 'ashutoshc8101', 'type': 'User'}, {'comment_id': 676448011, 'comment_body': 'If you are using this in multiple places, then move this mock pipe to `unit-test-utils.ts` and export it from there.', 'comment_created': datetime.datetime(2021, 7, 26, 9, 39, 16, tzinfo=datetime.timezone.utc), 'commenter': 'ashutoshc8101', 'type': 'User'}, {'comment_id': 676448370, 'comment_body': 'Can you add an empty line here?', 'comment_created': datetime.datetime(2021, 7, 26, 9, 39, 47, tzinfo=datetime.timezone.utc), 'commenter': 'ashutoshc8101', 'type': 'User'}, {'comment_id': 676448742, 'comment_body': 'Can you sort these?', 'comment_created': datetime.datetime(2021, 7, 26, 9, 40, 18, tzinfo=datetime.timezone.utc), 'commenter': 'ashutoshc8101', 'type': 'User'}, {'comment_id': 676449108, 'comment_body': '```suggestion\r\n  downgradeComponent({\r\n    component: BlogDashboardPageComponent\r\n  }) as angular.IDirectiveFactory);\r\n```', 'comment_created': datetime.datetime(2021, 7, 26, 9, 40, 53, tzinfo=datetime.timezone.utc), 'commenter': 'ashutoshc8101', 'type': 'User'}, {'comment_id': 676450678, 'comment_body': 'Only these two components are needed to be downgraded as they are used in an angularjs template. Others are not required to be downgraded.', 'comment_created': datetime.datetime(2021, 7, 26, 9, 43, tzinfo=datetime.timezone.utc), 'commenter': 'ashutoshc8101', 'type': 'User'}, {'comment_id': 676451221, 'comment_body': '```suggestion\r\n// Copyright 2021 The Oppia Authors. All Rights Reserved.\r\n```\r\nPlease check elsewhere too.', 'comment_created': datetime.datetime(2021, 7, 26, 9, 43, 47, tzinfo=datetime.timezone.utc), 'commenter': 'ashutoshc8101', 'type': 'User'}, {'comment_id': 676451303, 'comment_body': '```suggestion\r\n// Copyright 2021 The Oppia Authors. All Rights Reserved.\r\n```\r\nPlease check elsewhere too.', 'comment_created': datetime.datetime(2021, 7, 26, 9, 43, 54, tzinfo=datetime.timezone.utc), 'commenter': 'ashutoshc8101', 'type': 'User'}, {'comment_id': 676453256, 'comment_body': '`navbar-breadcrumb` is a placeholder component and it is not expected to be use like this.\r\nIt was created for transclusion in base component', 'comment_created': datetime.datetime(2021, 7, 26, 9, 46, 44, tzinfo=datetime.timezone.utc), 'commenter': 'ashutoshc8101', 'type': 'User'}, {'comment_id': 676453595, 'comment_body': 'I suggest the breadcrumb suffix is better.', 'comment_created': datetime.datetime(2021, 7, 26, 9, 47, 13, tzinfo=datetime.timezone.utc), 'commenter': 'ashutoshc8101', 'type': 'User'}, {'comment_id': 676580541, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 26, 12, 59, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 676580582, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 26, 12, 59, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 676580667, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 26, 12, 59, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 676580726, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 26, 13, 0, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 676580872, 'comment_body': 'Done. Thanks.', 'comment_created': datetime.datetime(2021, 7, 26, 13, 0, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 676581152, 'comment_body': 'Removed.', 'comment_created': datetime.datetime(2021, 7, 26, 13, 0, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 676581240, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 26, 13, 0, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 676581485, 'comment_body': 'Moved to unit-test-utils.', 'comment_created': datetime.datetime(2021, 7, 26, 13, 1, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 676581616, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 26, 13, 1, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 676581752, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 26, 13, 1, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 676582360, 'comment_body': '@ashutoshc8101  I just want to confirm that if the blog card component is being used inside blog dashboard component will it have to be downgraded?', 'comment_created': datetime.datetime(2021, 7, 26, 13, 2, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 676582505, 'comment_body': 'Done. Thanks.', 'comment_created': datetime.datetime(2021, 7, 26, 13, 2, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 676582693, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 26, 13, 2, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 676582845, 'comment_body': 'Thanks Done.', 'comment_created': datetime.datetime(2021, 7, 26, 13, 2, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 676582962, 'comment_body': 'Sure.', 'comment_created': datetime.datetime(2021, 7, 26, 13, 2, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 676594887, 'comment_body': 'Not done, check again. I suggest changing indentation config of vscode from tabs to spaces.', 'comment_created': datetime.datetime(2021, 7, 26, 13, 18, 19, tzinfo=datetime.timezone.utc), 'commenter': 'ashutoshc8101', 'type': 'User'}, {'comment_id': 676597640, 'comment_body': 'No', 'comment_created': datetime.datetime(2021, 7, 26, 13, 21, 43, tzinfo=datetime.timezone.utc), 'commenter': 'ashutoshc8101', 'type': 'User'}, {'comment_id': 676598452, 'comment_body': 'Add `BreadcrumbComponent` suffix', 'comment_created': datetime.datetime(2021, 7, 26, 13, 22, 40, tzinfo=datetime.timezone.utc), 'commenter': 'ashutoshc8101', 'type': 'User'}, {'comment_id': 676599120, 'comment_body': 'weird.\r\n![Screenshot from 2021-07-26 18-53-06](https://user-images.githubusercontent.com/68547101/126995953-975519d2-a7b6-4bf2-9da3-fea30ca03c59.png)\r\nIll try to fix with git editor.', 'comment_created': datetime.datetime(2021, 7, 26, 13, 23, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 676607745, 'comment_body': 'Done. Thanks.', 'comment_created': datetime.datetime(2021, 7, 26, 13, 33, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 676607859, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 26, 13, 34, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 676607965, 'comment_body': 'Added.', 'comment_created': datetime.datetime(2021, 7, 26, 13, 34, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}]","[{'commit_sha': 'd2461fa1e789ab5b7473e6b1f1a5f1250e68dd55', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c080274d22670c1238e37ed39b8bd6644915989b', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ad13ae80f5f1930bda70e2938bc609ac5d1a984', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb07832a6b90a9d408745c966ec6238fddf13202', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87169526defad5a063eaa0af90d6f91c73deaf75', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d5aadc5dea34a06fedc7e3be0135b78df862b5d', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02bc763e9c7785e5898b0deb9aa4afb351c0e5c0', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1dbf492e4ce334a07f2f79a1377de886dafa9243', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38489800c1333231ee305aac948a6fa5f331ca14', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96d49a9c7aa86077a5ec54235344aff10f94ee14', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1357401e7e2e74637388065c3d060a77801e627d', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46c1e9a50f4e9b4c4730b2c59855ab791af43283', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f80436d3a5f325e14a7233bab896b69571631b65', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9b8013bf945f233e933da7ca45cd0544b11e723', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c81860e2197758da709be40150ee69f62f94a6bf', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a94ca6327eec4d977d8e624adbc0fad4ffad6731', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a950ca9262b1bc2bdc544767c81bee768ee2cb8c', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb4332df4eed6bc0cffd2f489e37e640948b5585', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac41f5a4b256a8bf44bb82a7f7371f2814c9bf52', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '093b8843e89816782557074a0cfeaf62ec73a9d6', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9002393c512f51e0584785f5e261ddd265371fe', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e2fa631862bd3cdf9db721bf017943bc9340b06', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2678224e90b13a51385770006e72e885b064ae6d', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b35c489abc03fa67b0bdd9bdfb3502e05a2683d', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b9729778d57d590a03199233139e8e6bda35e06', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47d952f575aa8741bf95a63bde70bea133a240aa', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e1cf223182f36ebb55ea525c4b8651e2ea7c086', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '85961994adcde9d8cc60688f0426fb20da524152', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c42e2ea4c00eb64ccc86cce177c480d5ddd80071', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a838e450719752775e0022049c1bb67f8a7b70c2', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57cc32cd610462d16f2444c55c38771e769ce3f1', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f574991da5167d838be95faaacef25ff44dd24da', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07c53bf695d760b3543bb497db69509d9fbd6f64', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19a8f3aec4aae38a8c2a950dab83e65239f7e41c', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4fbd67f02c9a06cbe3c894ea12e8c2dd36abf86c', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '24c6e2a9203e678c72ee2b1efbfc256ec4f3ea17', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cbffcf30bbe6e862d57becb3cb6e069d0810a3f2', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1815357bae0608cbd85ddc2ea3e14db8b9e382df', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '695a9ba503c77abfe3c55eafa58efef9a4036e7c', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6507ed3e23fbb0eb60eaaa1ec2f216db43c2dc09', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79565b41046a9891329d93f2228dcfb9ef874c7b', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3357b5043e276a972d1b62c153079e12a3f5fb5d', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95ecaea98b7b3d72f9f6f221ffd1d8df8078933d', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1cee0d4dbd7f58c615cde613ebe79ae0a0b8634', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8075f04e8ae35b0953e344bda0440b8ba0f94712', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38f35ea28554b5d3574ada812f43f2842895317f', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a0dd144ee8c0ca429c77eee732e93f0b740dcb1', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84d08d84091212f3288751ed772ca0200d9b2f57', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '146323a7cd06a122e44df009871a49b2cf36227d', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5dcbb8337e8e3cbaa9d3e57509134cbb3ee35843', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '738ba2786a6038d177ff3c1bf7a6cda23145c920', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fac7d16cc6a8b756ded21eb4d02a44a9d21336a1', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72219508fc9da5e14031f78eadad23846e728a1e', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b05cfd1ac623aa5d8413f71afcd72f38b3976d0', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d1b18e4506c1aee629e69060e2377678f5e4d5c', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62fa1ce379ebbd858605a7bfdedab4281b208e68', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b1cc47da454980935093db6ceac39074996cfc73', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '01b9e1dc4dc4a9551ac0329229a459af0eda0c17', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a83055a959fb6d4e1c601fce6a4bed9b64d65f2d', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ad61932fd95869677eb143a82087be34e81f5cb', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f555e5c8f283f9c778d11d7342389e7b163d1465', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '336d2b997ff7f96becb082b9c7857e413e2883af', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '057af9a77d276a1a36d6a498da33f15e69aa0141', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b2a182d3d83260090052663136313ddd1f0f0f2', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '251f5081ce1987e582ab4d99fd81ef1697e49f29', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}]",Rijuta Singh,68547101,,User,,7,,13,22
699834829,Milestone 2.4A: Adds blog post editor,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of Nothing
2. This PR does the following: Adds blog post editor.

Work to be covered in the next PR:
1. Navbars to be done for both blog dashboard and blog post editor.
2. Blog Dashboard will be completed which includes adding functionally for 'edit, publish, deleting' blog post from the drop-down in the dashboard and making the list of the the blog dashboard tiles.

## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## Proof that changes are correct

<!--
Add videos/screenshots of the user-facing interface to demonstrate that the changes made in this PR work correctly.
If the changes in your PRs are autogenerated via a script and you cannot provide proof for the changes then please leave a comment ""No proof of changes needed because {{Reason}}"".
-->
Links for mocks : https://xd.adobe.com/view/9bb82409-cdca-432a-b11c-88324643e2c0-ceeb/screen/507db5f3-4e90-41f2-bad5-a599f38653ed/
https://www.figma.com/file/k960aiD0UXm3vajxm4M0kr/Blog-Integration?node-id=224%3A0


https://user-images.githubusercontent.com/68547101/127857814-3528f487-8e0c-413c-a224-358036445042.mp4

https://user-images.githubusercontent.com/68547101/127857807-39a1265c-03b1-4613-a7ae-9077d4d0d621.mp4



## PR Pointers

- Make sure to follow the [instructions for making a code change](https://github.com/oppia/oppia/wiki/Contributing-code-to-Oppia#instructions-for-making-a-code-change).
- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays.
- Never force push. If you do, your PR will be closed.
- Oppiabot can assign anyone for review/help if you leave a comment like the following: ""{{Question/comment}} @{{reviewer_username}} PTAL""
- Some of the e2e tests are flaky, and can fail for reasons unrelated to your PR. We are working on fixing this, but in the meantime, if you need to restart the tests, please check the [""If your build fails"" wiki page](https://github.com/oppia/oppia/wiki/If-your-build-fails).
",True,13522,https://api.github.com/repos/oppia/oppia/pulls/13522,https://github.com/oppia/oppia/pull/13522,closed,3226,119,57,110,32,58,1,3,[{'name': 'PR: LGTM'}],2021-07-29 20:53:26+00:00,2021-08-13 04:23:11+00:00,1236585.0,"14 days, 7:29:45","[{'comment_id': 681252934, 'comment_body': '```suggestion\r\n        if len(blog_post_models) > 0:\r\n```', 'comment_created': datetime.datetime(2021, 8, 2, 20, 33, 44, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 681253858, 'comment_body': '```suggestion\r\n            if (len(blog_post_models) > 1 or (\r\n                    blog_post_models[0].id != blog_post_id)):\r\n```', 'comment_created': datetime.datetime(2021, 8, 2, 20, 35, 23, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 681256098, 'comment_body': '```suggestion\r\n    return this.blogPostAction === (\r\n      BlogDashboardPageConstants.BLOG_POST_ACTIONS.DELETE);\r\n```', 'comment_created': datetime.datetime(2021, 8, 2, 20, 39, 25, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 681256278, 'comment_body': 'Here and elsewhere.', 'comment_created': datetime.datetime(2021, 8, 2, 20, 39, 45, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 681256984, 'comment_body': '```suggestion\r\n          if (this.blogPostData.content.length > 0) {\r\n```', 'comment_created': datetime.datetime(2021, 8, 2, 20, 41, 1, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 681450009, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 3, 5, 41, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 681450021, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 3, 5, 41, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 681450082, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 3, 5, 41, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 681450107, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 3, 5, 41, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 681524582, 'comment_body': 'Is this our own CSS or are we trying to override a third party style. If it is something that we added, can you make the selector name a bit more specific. Modal dialog is a very common css selector.', 'comment_created': datetime.datetime(2021, 8, 3, 7, 55, 25, tzinfo=datetime.timezone.utc), 'commenter': 'srijanreddy98', 'type': 'User'}, {'comment_id': 681528220, 'comment_body': 'yup we are overriding 3rd party style. We have already set style for 768px in oppia.css but not for below 540px due to which the modal does not fit the small screen.\r\nThe css of modal-dialog for 768px:\r\n\r\n![Screenshot from 2021-08-03 13-28-25](https://user-images.githubusercontent.com/68547101/127979761-8de6fcfa-a4ef-4640-8506-037ef1305395.png)\r\n', 'comment_created': datetime.datetime(2021, 8, 3, 8, 0, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 682350396, 'comment_body': 'Please fix this everywhere else too. [Example](https://github.com/oppia/oppia/pull/13522/files#diff-a291a1535e1b49bda06a26242b423008dfa67660b0bea27fc3d1fab60f15a865R159).', 'comment_created': datetime.datetime(2021, 8, 4, 7, 14, 56, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 682850256, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 4, 18, 14, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 682852151, 'comment_body': '```suggestion\r\n      imports: [MatIconModule],\r\n```', 'comment_created': datetime.datetime(2021, 8, 4, 18, 17, tzinfo=datetime.timezone.utc), 'commenter': 'gp201', 'type': 'User'}, {'comment_id': 682852525, 'comment_body': 'when?', 'comment_created': datetime.datetime(2021, 8, 4, 18, 17, 37, tzinfo=datetime.timezone.utc), 'commenter': 'gp201', 'type': 'User'}, {'comment_id': 682852699, 'comment_body': '```suggestion\r\n    blogPostUpdateService.setBlogPostChangeDictToDefault();\r\n\r\n    expect(blogPostUpdateService.changeDict).toEqual({});\r\n```', 'comment_created': datetime.datetime(2021, 8, 4, 18, 17, 52, tzinfo=datetime.timezone.utc), 'commenter': 'gp201', 'type': 'User'}, {'comment_id': 682852854, 'comment_body': 'when?', 'comment_created': datetime.datetime(2021, 8, 4, 18, 18, 6, tzinfo=datetime.timezone.utc), 'commenter': 'gp201', 'type': 'User'}, {'comment_id': 682855120, 'comment_body': ""I'm unable to understand what exactly is being tested here.\r\nCan you place comments mentioning the setup, action, and post-check components of the test?"", 'comment_created': datetime.datetime(2021, 8, 4, 18, 21, 23, tzinfo=datetime.timezone.utc), 'commenter': 'gp201', 'type': 'User'}, {'comment_id': 682855760, 'comment_body': 'Why is there a `tick()` after an `expect` stmt?', 'comment_created': datetime.datetime(2021, 8, 4, 18, 22, 22, tzinfo=datetime.timezone.utc), 'commenter': 'gp201', 'type': 'User'}, {'comment_id': 682856436, 'comment_body': ""```suggestion\r\n    const closeSpy = spyOn(ngbActiveModal, 'close').and.callThrough();\r\n \r\n    component.confirm(1);\r\n```"", 'comment_created': datetime.datetime(2021, 8, 4, 18, 23, 22, tzinfo=datetime.timezone.utc), 'commenter': 'gp201', 'type': 'User'}, {'comment_id': 682856644, 'comment_body': 'Do the same for the rest of the tests', 'comment_created': datetime.datetime(2021, 8, 4, 18, 23, 41, tzinfo=datetime.timezone.utc), 'commenter': 'gp201', 'type': 'User'}, {'comment_id': 682857072, 'comment_body': '```suggestion\r\n * @fileoverview Unit tests for blog post editor.\r\n```', 'comment_created': datetime.datetime(2021, 8, 4, 18, 24, 24, tzinfo=datetime.timezone.utc), 'commenter': 'gp201', 'type': 'User'}, {'comment_id': 682858586, 'comment_body': 'Do we need to provide this here?', 'comment_created': datetime.datetime(2021, 8, 4, 18, 26, 44, tzinfo=datetime.timezone.utc), 'commenter': 'gp201', 'type': 'User'}, {'comment_id': 682858975, 'comment_body': '`toEqual` or `toBe`?', 'comment_created': datetime.datetime(2021, 8, 4, 18, 27, 26, tzinfo=datetime.timezone.utc), 'commenter': 'gp201', 'type': 'User'}, {'comment_id': 682859530, 'comment_body': '`toEqual` or `toBe`?', 'comment_created': datetime.datetime(2021, 8, 4, 18, 28, 6, tzinfo=datetime.timezone.utc), 'commenter': 'gp201', 'type': 'User'}, {'comment_id': 682860341, 'comment_body': 'It might be better to put the value rather than the variable to make sure the test is more robust.', 'comment_created': datetime.datetime(2021, 8, 4, 18, 29, 15, tzinfo=datetime.timezone.utc), 'commenter': 'gp201', 'type': 'User'}, {'comment_id': 682860498, 'comment_body': 'It might be better to put the value rather than the variable to make sure the test is more robust.', 'comment_created': datetime.datetime(2021, 8, 4, 18, 29, 32, tzinfo=datetime.timezone.utc), 'commenter': 'gp201', 'type': 'User'}, {'comment_id': 682862195, 'comment_body': '```suggestion\r\n    component.cancel();\r\n\r\n    expect(dismissSpy).toHaveBeenCalled();\r\n```', 'comment_created': datetime.datetime(2021, 8, 4, 18, 32, 3, tzinfo=datetime.timezone.utc), 'commenter': 'gp201', 'type': 'User'}, {'comment_id': 682862329, 'comment_body': ""```suggestion\r\n    component.save('sample-url');\r\n\r\n    expect(confirmSpy).toHaveBeenCalledWith('sample-url');\r\n```"", 'comment_created': datetime.datetime(2021, 8, 4, 18, 32, 14, tzinfo=datetime.timezone.utc), 'commenter': 'gp201', 'type': 'User'}, {'comment_id': 682863353, 'comment_body': 'split this and the tests below into setup, pre-check, action, and post-check steps by adding a space in between each of them.', 'comment_created': datetime.datetime(2021, 8, 4, 18, 33, 49, tzinfo=datetime.timezone.utc), 'commenter': 'gp201', 'type': 'User'}, {'comment_id': 682863511, 'comment_body': '```suggestion\r\n * @fileoverview Unit tests for Blog Dashboard Page service.\r\n```', 'comment_created': datetime.datetime(2021, 8, 4, 18, 34, 5, tzinfo=datetime.timezone.utc), 'commenter': 'gp201', 'type': 'User'}, {'comment_id': 683112083, 'comment_body': 'Because we will want the `showLoadingScreen` to be called even if the promise is not resolved/rejected. Added empty lines above and below the stmt.', 'comment_created': datetime.datetime(2021, 8, 5, 4, 4, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 683192209, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 5, 7, 18, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 683193531, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 5, 7, 20, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 683193619, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 5, 7, 20, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 683193745, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 5, 7, 20, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 683193846, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 5, 7, 20, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 683193959, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 5, 7, 20, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 683194069, 'comment_body': 'tobe, done.', 'comment_created': datetime.datetime(2021, 8, 5, 7, 20, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 683194191, 'comment_body': 'tobe , done', 'comment_created': datetime.datetime(2021, 8, 5, 7, 21, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 683194980, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 5, 7, 22, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 683195189, 'comment_body': 'Added. ', 'comment_created': datetime.datetime(2021, 8, 5, 7, 22, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 683195591, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 5, 7, 23, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 683195745, 'comment_body': 'Added.', 'comment_created': datetime.datetime(2021, 8, 5, 7, 23, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 683196158, 'comment_body': 'Broken into separate tests. PTAL.', 'comment_created': datetime.datetime(2021, 8, 5, 7, 24, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 683196368, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 5, 7, 24, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 683196463, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 5, 7, 24, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 683196838, 'comment_body': 'Nope. Removed.', 'comment_created': datetime.datetime(2021, 8, 5, 7, 25, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 683689282, 'comment_body': 'Add this as a comment in the file.', 'comment_created': datetime.datetime(2021, 8, 5, 18, 22, 27, tzinfo=datetime.timezone.utc), 'commenter': 'gp201', 'type': 'User'}, {'comment_id': 683691522, 'comment_body': ""I don't see the change?"", 'comment_created': datetime.datetime(2021, 8, 5, 18, 25, 52, tzinfo=datetime.timezone.utc), 'commenter': 'gp201', 'type': 'User'}, {'comment_id': 684406941, 'comment_body': 'Discussed offline. Done', 'comment_created': datetime.datetime(2021, 8, 6, 17, 49, 31, tzinfo=datetime.timezone.utc), 'commenter': 'gp201', 'type': 'User'}, {'comment_id': 684407012, 'comment_body': 'Discussed offline. Done', 'comment_created': datetime.datetime(2021, 8, 6, 17, 49, 39, tzinfo=datetime.timezone.utc), 'commenter': 'gp201', 'type': 'User'}, {'comment_id': 684649057, 'comment_body': 'Double space?', 'comment_created': datetime.datetime(2021, 8, 7, 16, 1, 54, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 684649267, 'comment_body': 'Can all these css classes be wrapped under `.blog-post-editor`?', 'comment_created': datetime.datetime(2021, 8, 7, 16, 3, 54, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 684649335, 'comment_body': 'Why is this required in a function form?', 'comment_created': datetime.datetime(2021, 8, 7, 16, 4, 33, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 684650616, 'comment_body': 'It is not required as in angular the css does not bleed to other components. Thus it will not have any effect on CSS of other classes.', 'comment_created': datetime.datetime(2021, 8, 7, 16, 16, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 684651867, 'comment_body': 'angularjs directives access their passed values by calling them like a function. As, schema based editor is an angularjs directive, we have to pass the headers in form of callback. This is also done for localValue in schema based editor.\r\n![Screenshot from 2021-08-07 21-57-48](https://user-images.githubusercontent.com/24855641/128607214-361f0b1d-eea4-4c5f-8064-5da57a1fb293.png)\r\n', 'comment_created': datetime.datetime(2021, 8, 7, 16, 28, 50, tzinfo=datetime.timezone.utc), 'commenter': 'ashutoshc8101', 'type': 'User'}, {'comment_id': 684758878, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 8, 11, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}]","[{'commit_sha': 'd2461fa1e789ab5b7473e6b1f1a5f1250e68dd55', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c080274d22670c1238e37ed39b8bd6644915989b', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ad13ae80f5f1930bda70e2938bc609ac5d1a984', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb07832a6b90a9d408745c966ec6238fddf13202', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87169526defad5a063eaa0af90d6f91c73deaf75', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d5aadc5dea34a06fedc7e3be0135b78df862b5d', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02bc763e9c7785e5898b0deb9aa4afb351c0e5c0', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1dbf492e4ce334a07f2f79a1377de886dafa9243', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38489800c1333231ee305aac948a6fa5f331ca14', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96d49a9c7aa86077a5ec54235344aff10f94ee14', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1357401e7e2e74637388065c3d060a77801e627d', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46c1e9a50f4e9b4c4730b2c59855ab791af43283', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f80436d3a5f325e14a7233bab896b69571631b65', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9b8013bf945f233e933da7ca45cd0544b11e723', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c81860e2197758da709be40150ee69f62f94a6bf', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a94ca6327eec4d977d8e624adbc0fad4ffad6731', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a950ca9262b1bc2bdc544767c81bee768ee2cb8c', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb4332df4eed6bc0cffd2f489e37e640948b5585', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac41f5a4b256a8bf44bb82a7f7371f2814c9bf52', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '093b8843e89816782557074a0cfeaf62ec73a9d6', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9002393c512f51e0584785f5e261ddd265371fe', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e2fa631862bd3cdf9db721bf017943bc9340b06', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2678224e90b13a51385770006e72e885b064ae6d', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b35c489abc03fa67b0bdd9bdfb3502e05a2683d', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b9729778d57d590a03199233139e8e6bda35e06', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47d952f575aa8741bf95a63bde70bea133a240aa', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e1cf223182f36ebb55ea525c4b8651e2ea7c086', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '85961994adcde9d8cc60688f0426fb20da524152', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c42e2ea4c00eb64ccc86cce177c480d5ddd80071', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a838e450719752775e0022049c1bb67f8a7b70c2', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57cc32cd610462d16f2444c55c38771e769ce3f1', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f574991da5167d838be95faaacef25ff44dd24da', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07c53bf695d760b3543bb497db69509d9fbd6f64', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19a8f3aec4aae38a8c2a950dab83e65239f7e41c', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4fbd67f02c9a06cbe3c894ea12e8c2dd36abf86c', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '24c6e2a9203e678c72ee2b1efbfc256ec4f3ea17', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cbffcf30bbe6e862d57becb3cb6e069d0810a3f2', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1815357bae0608cbd85ddc2ea3e14db8b9e382df', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '695a9ba503c77abfe3c55eafa58efef9a4036e7c', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6507ed3e23fbb0eb60eaaa1ec2f216db43c2dc09', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79565b41046a9891329d93f2228dcfb9ef874c7b', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3357b5043e276a972d1b62c153079e12a3f5fb5d', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95ecaea98b7b3d72f9f6f221ffd1d8df8078933d', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1cee0d4dbd7f58c615cde613ebe79ae0a0b8634', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8075f04e8ae35b0953e344bda0440b8ba0f94712', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38f35ea28554b5d3574ada812f43f2842895317f', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a0dd144ee8c0ca429c77eee732e93f0b740dcb1', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84d08d84091212f3288751ed772ca0200d9b2f57', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '146323a7cd06a122e44df009871a49b2cf36227d', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5dcbb8337e8e3cbaa9d3e57509134cbb3ee35843', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '738ba2786a6038d177ff3c1bf7a6cda23145c920', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fac7d16cc6a8b756ded21eb4d02a44a9d21336a1', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72219508fc9da5e14031f78eadad23846e728a1e', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b05cfd1ac623aa5d8413f71afcd72f38b3976d0', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d1b18e4506c1aee629e69060e2377678f5e4d5c', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62fa1ce379ebbd858605a7bfdedab4281b208e68', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b1cc47da454980935093db6ceac39074996cfc73', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '01b9e1dc4dc4a9551ac0329229a459af0eda0c17', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a83055a959fb6d4e1c601fce6a4bed9b64d65f2d', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ad61932fd95869677eb143a82087be34e81f5cb', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f555e5c8f283f9c778d11d7342389e7b163d1465', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '336d2b997ff7f96becb082b9c7857e413e2883af', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb2ff7a246de803f9b59c438f9c5c6a897e15e10', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e995776d49764cbd18ffbd07cb4a243b14fa5163', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4cef3596e2c01ccaa999a722081f60890012ca4f', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1080ee8d0ff4944d6f5cce15b0f6b60b7926999', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05e44a5cabed2e472a4e98f303fd2ec58094d4e8', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08770e01f261713f07fd9d3bf437e4a96a61d68b', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '32f21cd4e9b002fbfcd33df1901915169d942f0b', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '221322e5f2d29102cade15b3dd6646334e254584', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f5cdeeb5acb9eaf5e77946f23f712e4444f5980', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39fcb5295b9b54e994261a22a2e83b50da8173d9', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9d141bfc72209d73ad19f69e4419528f57fa9d0', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad1b1d4d47d724ebda36d546167afff8304ea0f5', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f954b577cec03ecc1678ed73be646251a114742a', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97fc7cd1227eb226d4e1fdc8d6b6e4d7420508f0', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '786221a922d07eb96c8073fdc76db595dea61571', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b4c432b6b6034ed02d1869705ea31d6a8ba96812', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f520e975c3b473cdd083ca35f9fa45716dba793e', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2efd849c08a35bd984e412a176e3c792ade8729d', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1729e653b76f04d3b283939a8be6baceae93423', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9177edd49b0a09ecd3c5e8e0e12289d5c86be80', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b8cb3d003fffe8873a7909602d762a1f83b92d9', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a35634ab1e2867aebfd2e888dd212ec78ade488', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6fbab518a4a8e077fe7c79a6f92396b403f93a06', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c3d7deb2820853f1e25d0fceac94c6507e6b481', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'efeb23ecd3b973332a9295c210decea63316f909', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87839697f55e5b7c1e1cb0bd37dd23b011bd3394', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '18f6cb70d8d7b9bd94049557448c977fba8d3538', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d3527ef7967c5d7c99e990fa870d84295e929a8', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8351c15e7151789d8b6cd24ab3720cf2f63813b1', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b090dd068ed5d0ebbbd83d5458d6f639e07b8878', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3146dec686e322aba22769cf46f80ae2f927c4f0', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3eeaf5a678275cebb356f15be29c2d1c600920b5', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e828771376b6963cd94187a84ac988d20212ad88', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f217877ab5f9865356129b0a14fa0181a5ea6aff', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a96b07298148d5b8e43d1ffe65d596daf36cfb26', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3bb3f74b3a56429e1b64e08b3b16441e524a3a63', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a477aedfdc315f64e3488e4ece5cd734ca76fe7', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '484eeb1402c75f2ce9fbd464e1411161b7323425', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70c6bc641997b353233f080799de834b51fd7e06', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60e813ac433851dcd0fdaca840ecb9152c590131', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ecfbbffbb46243b6408548a05442ff321bbc8d96', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b84d8d720812ff2accc3ada990db4cfe57b02bf5', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7208897053c85d9469bf3e02e097a5809aadf3c3', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a8988cd22fa45de3cc24068a9cbb3ccd62026383', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71229307493e5f6a63cfe4c500739c825b251c87', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53799c058c95ef7a5ec3d4cfac9e2a27e6dd39ce', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e242cae9a53ae37e19402646c78912b308bbe21', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4652d29e61597c5b27ec13ca22ea0cf65e31c678', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}]",Rijuta Singh,68547101,,User,,7,,13,22
703896216,Milestone 2.5 : Completes the blog dashboard frontend.,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of N.A.
2. This PR does the following: This PR completes the blog dashboard frontend except adding it to the navbar dropdowns.

## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## Proof that changes are correct

https://user-images.githubusercontent.com/68547101/128247965-99c73413-0035-43e0-80d2-7c1ea96942ba.mp4

Navbar in mobile view:
![Screenshot from 2021-08-10 17-41-16](https://user-images.githubusercontent.com/68547101/128870405-eb87e965-5d3f-4daa-bf6b-89458abf7100.png)


https://user-images.githubusercontent.com/68547101/129410390-e22afbac-3e21-4f9f-a1e4-fbf6fe9b987b.mp4

<!--
Add videos/screenshots of the user-facing interface in various display sizes (mainly phone, tablet, and desktop display size) to demonstrate that the changes made in this PR work correctly.
If the changes in your PRs are autogenerated via a script and you cannot provide proof for the changes then please leave a comment ""No proof of changes needed because {{Reason}}"".
-->

## PR Pointers

- Make sure to follow the [instructions for making a code change](https://github.com/oppia/oppia/wiki/Contributing-code-to-Oppia#instructions-for-making-a-code-change).
- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays.
- Never force push. If you do, your PR will be closed.
- Oppiabot can assign anyone for review/help if you leave a comment like the following: ""{{Question/comment}} @{{reviewer_username}} PTAL""
- Some of the e2e tests are flaky, and can fail for reasons unrelated to your PR. We are working on fixing this, but in the meantime, if you need to restart the tests, please check the [""If your build fails"" wiki page](https://github.com/oppia/oppia/wiki/If-your-build-fails).
",True,13575,https://api.github.com/repos/oppia/oppia/pulls/13575,https://github.com/oppia/oppia/pull/13575,closed,1161,82,30,136,21,27,1,2,[{'name': 'PR: LGTM'}],2021-08-04 19:22:43+00:00,2021-08-15 23:46:47+00:00,966244.0,"11 days, 4:24:04","[{'comment_id': 688724708, 'comment_body': ""This value doesn't seem to change. If this is expected please place a comment explaining why in the code"", 'comment_created': datetime.datetime(2021, 8, 13, 19, 6, 11, tzinfo=datetime.timezone.utc), 'commenter': 'gp201', 'type': 'User'}, {'comment_id': 688725047, 'comment_body': 'Ditto', 'comment_created': datetime.datetime(2021, 8, 13, 19, 6, 53, tzinfo=datetime.timezone.utc), 'commenter': 'gp201', 'type': 'User'}, {'comment_id': 688725315, 'comment_body': '```suggestion\r\n    component.removeBlogPost(summaryObject, true);\r\n\r\n    expect(component.blogDashboardData.publishedBlogPostSummaryDicts).toEqual(\r\n```', 'comment_created': datetime.datetime(2021, 8, 13, 19, 7, 29, tzinfo=datetime.timezone.utc), 'commenter': 'gp201', 'type': 'User'}, {'comment_id': 688725703, 'comment_body': '```suggestion\r\n    component.removeBlogPost(summaryObject, false);\r\n\r\n    expect(component.blogDashboardData.draftBlogPostSummaryDicts).toEqual(\r\n      []);\r\n```', 'comment_created': datetime.datetime(2021, 8, 13, 19, 8, 13, tzinfo=datetime.timezone.utc), 'commenter': 'gp201', 'type': 'User'}, {'comment_id': 688728897, 'comment_body': 'Why do we need `tick()` here?', 'comment_created': datetime.datetime(2021, 8, 13, 19, 14, 29, tzinfo=datetime.timezone.utc), 'commenter': 'gp201', 'type': 'User'}, {'comment_id': 688729738, 'comment_body': 'Ditto', 'comment_created': datetime.datetime(2021, 8, 13, 19, 16, 5, tzinfo=datetime.timezone.utc), 'commenter': 'gp201', 'type': 'User'}, {'comment_id': 688729882, 'comment_body': 'Unexpected change?', 'comment_created': datetime.datetime(2021, 8, 13, 19, 16, 24, tzinfo=datetime.timezone.utc), 'commenter': 'gp201', 'type': 'User'}, {'comment_id': 688730916, 'comment_body': 'Why do we need `tick()` here?', 'comment_created': datetime.datetime(2021, 8, 13, 19, 18, 30, tzinfo=datetime.timezone.utc), 'commenter': 'gp201', 'type': 'User'}, {'comment_id': 688738714, 'comment_body': 'Should return [] instead of `None`.', 'comment_created': datetime.datetime(2021, 8, 13, 19, 35, 11, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 688739174, 'comment_body': ""```suggestion\r\n    if len(raw_text) > max_chars_in_summary:\r\n        summary = raw_text[:max_chars_in_summary] + '...'\r\n        return summary\r\n    return raw_text\r\n```"", 'comment_created': datetime.datetime(2021, 8, 13, 19, 36, 10, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 688753650, 'comment_body': '![Screenshot from 2021-08-14 01-36-47](https://user-images.githubusercontent.com/68547101/129413101-8865bbf7-efbb-4541-9b73-b1ee16f8c2e3.png)\r\nBecause we are resolving a promise here.', 'comment_created': datetime.datetime(2021, 8, 13, 20, 7, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 688753871, 'comment_body': 'Same as above. We will resolve a promise from ngbModel.', 'comment_created': datetime.datetime(2021, 8, 13, 20, 7, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 688864646, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 14, 5, 2, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 688864649, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 14, 5, 2, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 688864812, 'comment_body': 'To detect the url change in blog dashboard page service after the hash change event is emitted:\r\n![Screenshot from 2021-08-14 10-33-39](https://user-images.githubusercontent.com/68547101/129434722-3b3afee9-256f-49d1-9ebd-0e66fe690e53.png)\r\n\r\n', 'comment_created': datetime.datetime(2021, 8, 14, 5, 4, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 688864838, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 14, 5, 5, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 688864845, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 14, 5, 5, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 688864884, 'comment_body': 'Refactored the code a bit for easy understanding and also added comment PTAL.', 'comment_created': datetime.datetime(2021, 8, 14, 5, 6, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 688864887, 'comment_body': 'Same as above.', 'comment_created': datetime.datetime(2021, 8, 14, 5, 6, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 688864939, 'comment_body': 'Removed.', 'comment_created': datetime.datetime(2021, 8, 14, 5, 7, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 688931053, 'comment_body': ""I don't think we need `tick()` to resolve the promise returned. Can you check other files where `spyOn(ngbModal, 'open')` is used?"", 'comment_created': datetime.datetime(2021, 8, 14, 13, 29, 26, tzinfo=datetime.timezone.utc), 'commenter': 'gp201', 'type': 'User'}, {'comment_id': 688931385, 'comment_body': 'Unexpected change?', 'comment_created': datetime.datetime(2021, 8, 14, 13, 33, 4, tzinfo=datetime.timezone.utc), 'commenter': 'gp201', 'type': 'User'}, {'comment_id': 688931403, 'comment_body': '```suggestion\r\n        NgbModalModule\r\n```', 'comment_created': datetime.datetime(2021, 8, 14, 13, 33, 14, tzinfo=datetime.timezone.utc), 'commenter': 'gp201', 'type': 'User'}, {'comment_id': 689091102, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 15, 13, 36, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 689091121, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 15, 13, 36, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 689091220, 'comment_body': 'It does not work without it,  I just removed the tick() statement:\r\n![Screenshot from 2021-08-15 19-03-37](https://user-images.githubusercontent.com/68547101/129480439-1fdf9407-6d78-4192-8642-f54822cd26c3.png)\r\n', 'comment_created': datetime.datetime(2021, 8, 15, 13, 37, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 689091426, 'comment_body': 'ah, thanks for the explanation', 'comment_created': datetime.datetime(2021, 8, 15, 13, 38, 56, tzinfo=datetime.timezone.utc), 'commenter': 'gp201', 'type': 'User'}]","[{'commit_sha': 'd2461fa1e789ab5b7473e6b1f1a5f1250e68dd55', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c080274d22670c1238e37ed39b8bd6644915989b', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ad13ae80f5f1930bda70e2938bc609ac5d1a984', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb07832a6b90a9d408745c966ec6238fddf13202', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87169526defad5a063eaa0af90d6f91c73deaf75', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d5aadc5dea34a06fedc7e3be0135b78df862b5d', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02bc763e9c7785e5898b0deb9aa4afb351c0e5c0', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1dbf492e4ce334a07f2f79a1377de886dafa9243', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38489800c1333231ee305aac948a6fa5f331ca14', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96d49a9c7aa86077a5ec54235344aff10f94ee14', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1357401e7e2e74637388065c3d060a77801e627d', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46c1e9a50f4e9b4c4730b2c59855ab791af43283', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f80436d3a5f325e14a7233bab896b69571631b65', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9b8013bf945f233e933da7ca45cd0544b11e723', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c81860e2197758da709be40150ee69f62f94a6bf', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a94ca6327eec4d977d8e624adbc0fad4ffad6731', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a950ca9262b1bc2bdc544767c81bee768ee2cb8c', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb4332df4eed6bc0cffd2f489e37e640948b5585', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac41f5a4b256a8bf44bb82a7f7371f2814c9bf52', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '093b8843e89816782557074a0cfeaf62ec73a9d6', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9002393c512f51e0584785f5e261ddd265371fe', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e2fa631862bd3cdf9db721bf017943bc9340b06', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2678224e90b13a51385770006e72e885b064ae6d', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b35c489abc03fa67b0bdd9bdfb3502e05a2683d', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b9729778d57d590a03199233139e8e6bda35e06', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47d952f575aa8741bf95a63bde70bea133a240aa', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e1cf223182f36ebb55ea525c4b8651e2ea7c086', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '85961994adcde9d8cc60688f0426fb20da524152', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c42e2ea4c00eb64ccc86cce177c480d5ddd80071', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a838e450719752775e0022049c1bb67f8a7b70c2', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57cc32cd610462d16f2444c55c38771e769ce3f1', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f574991da5167d838be95faaacef25ff44dd24da', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07c53bf695d760b3543bb497db69509d9fbd6f64', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19a8f3aec4aae38a8c2a950dab83e65239f7e41c', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4fbd67f02c9a06cbe3c894ea12e8c2dd36abf86c', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '24c6e2a9203e678c72ee2b1efbfc256ec4f3ea17', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cbffcf30bbe6e862d57becb3cb6e069d0810a3f2', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1815357bae0608cbd85ddc2ea3e14db8b9e382df', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '695a9ba503c77abfe3c55eafa58efef9a4036e7c', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6507ed3e23fbb0eb60eaaa1ec2f216db43c2dc09', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79565b41046a9891329d93f2228dcfb9ef874c7b', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3357b5043e276a972d1b62c153079e12a3f5fb5d', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95ecaea98b7b3d72f9f6f221ffd1d8df8078933d', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1cee0d4dbd7f58c615cde613ebe79ae0a0b8634', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8075f04e8ae35b0953e344bda0440b8ba0f94712', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38f35ea28554b5d3574ada812f43f2842895317f', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a0dd144ee8c0ca429c77eee732e93f0b740dcb1', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84d08d84091212f3288751ed772ca0200d9b2f57', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '146323a7cd06a122e44df009871a49b2cf36227d', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5dcbb8337e8e3cbaa9d3e57509134cbb3ee35843', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '738ba2786a6038d177ff3c1bf7a6cda23145c920', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fac7d16cc6a8b756ded21eb4d02a44a9d21336a1', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72219508fc9da5e14031f78eadad23846e728a1e', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b05cfd1ac623aa5d8413f71afcd72f38b3976d0', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d1b18e4506c1aee629e69060e2377678f5e4d5c', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62fa1ce379ebbd858605a7bfdedab4281b208e68', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b1cc47da454980935093db6ceac39074996cfc73', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '01b9e1dc4dc4a9551ac0329229a459af0eda0c17', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a83055a959fb6d4e1c601fce6a4bed9b64d65f2d', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ad61932fd95869677eb143a82087be34e81f5cb', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f555e5c8f283f9c778d11d7342389e7b163d1465', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '336d2b997ff7f96becb082b9c7857e413e2883af', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb2ff7a246de803f9b59c438f9c5c6a897e15e10', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e995776d49764cbd18ffbd07cb4a243b14fa5163', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4cef3596e2c01ccaa999a722081f60890012ca4f', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1080ee8d0ff4944d6f5cce15b0f6b60b7926999', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05e44a5cabed2e472a4e98f303fd2ec58094d4e8', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08770e01f261713f07fd9d3bf437e4a96a61d68b', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '32f21cd4e9b002fbfcd33df1901915169d942f0b', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '221322e5f2d29102cade15b3dd6646334e254584', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f5cdeeb5acb9eaf5e77946f23f712e4444f5980', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39fcb5295b9b54e994261a22a2e83b50da8173d9', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9d141bfc72209d73ad19f69e4419528f57fa9d0', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad1b1d4d47d724ebda36d546167afff8304ea0f5', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f954b577cec03ecc1678ed73be646251a114742a', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97fc7cd1227eb226d4e1fdc8d6b6e4d7420508f0', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '786221a922d07eb96c8073fdc76db595dea61571', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b4c432b6b6034ed02d1869705ea31d6a8ba96812', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f520e975c3b473cdd083ca35f9fa45716dba793e', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2efd849c08a35bd984e412a176e3c792ade8729d', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1729e653b76f04d3b283939a8be6baceae93423', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9177edd49b0a09ecd3c5e8e0e12289d5c86be80', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b8cb3d003fffe8873a7909602d762a1f83b92d9', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a35634ab1e2867aebfd2e888dd212ec78ade488', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6fbab518a4a8e077fe7c79a6f92396b403f93a06', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c3d7deb2820853f1e25d0fceac94c6507e6b481', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'efeb23ecd3b973332a9295c210decea63316f909', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87839697f55e5b7c1e1cb0bd37dd23b011bd3394', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '18f6cb70d8d7b9bd94049557448c977fba8d3538', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'acc6b24a5e0cfaf9b6da6223c53affdf4e61eb23', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d3527ef7967c5d7c99e990fa870d84295e929a8', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8351c15e7151789d8b6cd24ab3720cf2f63813b1', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b090dd068ed5d0ebbbd83d5458d6f639e07b8878', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3146dec686e322aba22769cf46f80ae2f927c4f0', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3eeaf5a678275cebb356f15be29c2d1c600920b5', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e828771376b6963cd94187a84ac988d20212ad88', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0081a4177d191d59cfae366af5a875714cb97522', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4bd644a2bf052fdbf21b99d2a220170b7578e958', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f217877ab5f9865356129b0a14fa0181a5ea6aff', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a96b07298148d5b8e43d1ffe65d596daf36cfb26', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b50d130ebf7b9ffa68a77a54dece6f854500d86e', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '051900d18b069591494fe52423fb1c0995b0bf71', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3bb3f74b3a56429e1b64e08b3b16441e524a3a63', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf8cd715a0beedc0b1b78d3bce10c9ff0186f282', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '32badef9605df90048976f4ea0dbe78285367884', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '233d7ebc4076ead8af8252cf8068657d7514bcab', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f5ccce72eb2fa5453b950095080ba286b9c15cf', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a477aedfdc315f64e3488e4ece5cd734ca76fe7', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '484eeb1402c75f2ce9fbd464e1411161b7323425', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70c6bc641997b353233f080799de834b51fd7e06', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60e813ac433851dcd0fdaca840ecb9152c590131', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ecfbbffbb46243b6408548a05442ff321bbc8d96', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b84d8d720812ff2accc3ada990db4cfe57b02bf5', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7208897053c85d9469bf3e02e097a5809aadf3c3', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a8988cd22fa45de3cc24068a9cbb3ccd62026383', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a6ced79f6b68718ce505eabe38d5eed91fcaf2e', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71229307493e5f6a63cfe4c500739c825b251c87', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53799c058c95ef7a5ec3d4cfac9e2a27e6dd39ce', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dfa23fb32f38c916258c17c590d11f3c982ac390', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bba671e213676a54cfb85de853d6f95872205d99', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '734b209f3c898f3bc36a0a672df8b3b507caafba', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '114759823e1a3dba4182d2bebbf5ce1f2edc676b', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6667a76347d96e69dd52496463d0d96470272d5', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10b4c8fce0c76ea0afd90d5dfd9ec948a18c1a2e', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e242cae9a53ae37e19402646c78912b308bbe21', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a9bfae47eae46503da5e23a494e30d5477efd7b', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ce1653de58e03f4287a0b2afed95f220e73b091', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1ea6ca3ddaf93e793dc0ca9d901eb7e0be8094f', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df9b42b66332ac47826779b3a87e8597e2a5f489', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'accf3c67cf3f16193e4103267078c0f5a3243391', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '274e24dfd0e276e99b406df0654c3b9f6dfd366e', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69880d0eba6fa4ecd19bd1d74bfd1d630a2d2d1c', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a4a7e2489491415d475fc94875c1c3532aca69c2', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15953eafcbfc5450baeb3bc273a79cd5f7abf126', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '32ba66488f5c9c3f751433991da19e64f3e028a1', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7893fbf1758e23404e231375c9826593301366e0', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}]",Rijuta Singh,68547101,,User,,7,,13,22
712837926,Milestone2.6: Adds pages to lighthouse and adds e2e tests for blog dashboard.,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of #NA
2. This PR does the following: Adds e2e tests for blog dashboard and adds them to lighthouse. It also adds blog dashboard option to profile navbar. It also fixes mobile view of navbar and image uploader.

## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## Proof that changes are correct
e2e_test_run_1:
![Screenshot from 2021-08-21 00-09-27](https://user-images.githubusercontent.com/68547101/130279036-d79febfa-935d-4b8d-ae45-b239393f8162.png)

e2e_test_run_2:
![Screenshot from 2021-08-21 18-46-18](https://user-images.githubusercontent.com/68547101/130323050-efd2450f-4477-4492-b113-18a531cc4b10.png)

e2e_test_run3:
![Screenshot from 2021-08-21 18-53-54](https://user-images.githubusercontent.com/68547101/130323225-71023e36-e456-416e-8af0-258528a686ca.png)

e2e_test_run4:
![Screenshot from 2021-08-21 18-48-59](https://user-images.githubusercontent.com/68547101/130323079-383d32be-fddb-46be-97f7-d892aad2c1bf.png)

e2e_test_run5:
![Screenshot from 2021-08-21 19-51-01](https://user-images.githubusercontent.com/68547101/130324740-90caad3e-e361-4928-aea9-a29263f75283.png)


e2e tests locallly in production mode: 
![Screenshot from 2021-08-20 23-14-05](https://user-images.githubusercontent.com/68547101/130276431-cc7e6fd3-3be8-47f0-97de-1f015d96cc4a.png)
Lighthouse:

Accessibility:
![Screenshot from 2021-08-20 13-25-55](https://user-images.githubusercontent.com/68547101/130225596-14022845-45c5-430c-a2e6-50c305c169f4.png)
![Screenshot from 2021-08-20 15-20-28](https://user-images.githubusercontent.com/68547101/130225605-a9dbe6db-ecc9-4972-9773-e75a0aa3a715.png)
![Screenshot from 2021-08-20 16-46-42](https://user-images.githubusercontent.com/68547101/130225620-d9723f93-8178-4549-868c-fdff1c8cb7d8.png)

Performance:
![Screenshot from 2021-08-20 15-45-22](https://user-images.githubusercontent.com/68547101/130225600-77cfe047-f195-48a3-b82e-c086785d7dd2.png)
![Screenshot from 2021-08-20 16-50-22](https://user-images.githubusercontent.com/68547101/130225965-a35e1b52-b1cd-4ce8-b34d-b29bc7efd3c5.png)



<!--
Add videos/screenshots of the user-facing interface in various display sizes (mainly phone, tablet, and desktop display size) to demonstrate that the changes made in this PR work correctly.
If the changes in your PRs are autogenerated via a script and you cannot provide proof for the changes then please leave a comment ""No proof of changes needed because {{Reason}}"".
-->

## PR Pointers

- Make sure to follow the [instructions for making a code change](https://github.com/oppia/oppia/wiki/Contributing-code-to-Oppia#instructions-for-making-a-code-change).
- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays.
- Never force push. If you do, your PR will be closed.
- Oppiabot can assign anyone for review/help if you leave a comment like the following: ""{{Question/comment}} @{{reviewer_username}} PTAL""
- Some of the e2e tests are flaky, and can fail for reasons unrelated to your PR. We are working on fixing this, but in the meantime, if you need to restart the tests, please check the [""If your build fails"" wiki page](https://github.com/oppia/oppia/wiki/If-your-build-fails).
",True,13683,https://api.github.com/repos/oppia/oppia/pulls/13683,https://github.com/oppia/oppia/pull/13683,closed,724,72,32,192,25,118,1,2,[{'name': 'PR: LGTM'}],2021-08-14 21:15:01+00:00,2021-08-22 21:14:00+00:00,691139.0,"7 days, 23:58:59","[{'comment_id': 690058824, 'comment_body': '```suggestion\r\n    await blogDashboardPage.createNewBlogPost();\r\n    await blogDashboardPage.expectNumberOfDraftsBlogPostsToBe(1);\r\n    await blogDashboardPage.navigateToBlogDashboardPage();\r\n\r\n    await blogDashboardPage.deleteBlogPostWithIndex(0);\r\n    await blogDashboardPage.expectNumberOfDraftsBlogPostsToBe(0);\r\n```', 'comment_created': datetime.datetime(2021, 8, 17, 6, 0, 51, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 690153089, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 17, 8, 30, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 690737855, 'comment_body': 'The HTML classes we use to select elements should start with `protractor-test`', 'comment_created': datetime.datetime(2021, 8, 17, 21, 31, 30, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 690761344, 'comment_body': 'Is it possible to identify these elements without using their indices? Relying on indices makes the code less readable', 'comment_created': datetime.datetime(2021, 8, 17, 22, 18, 20, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 690761739, 'comment_body': 'Please use a lowercase letter to start variable names', 'comment_created': datetime.datetime(2021, 8, 17, 22, 19, 10, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 690763318, 'comment_body': ""What's the point of going to `/` if we are just going to navigate away afterwards?"", 'comment_created': datetime.datetime(2021, 8, 17, 22, 22, 34, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 690764066, 'comment_body': ""It can take some time for the URL to update, so please wait for the url to update. Here's an example:\r\n\r\nhttps://github.com/oppia/oppia/blob/aefe95731d353fe7142f8b18343e49c81e39adcf/core/tests/protractor_utils/waitFor.js#L140"", 'comment_created': datetime.datetime(2021, 8, 17, 22, 24, 25, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 690768748, 'comment_body': 'This seems pretty redundant with `.get()`. Are there any cases where you would want to use `navigateToBlogDashboardPage()` but not `get()`? What about the reverse case?', 'comment_created': datetime.datetime(2021, 8, 17, 22, 34, 57, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 690769017, 'comment_body': 'Can this name communicate that it also closes the preview?', 'comment_created': datetime.datetime(2021, 8, 17, 22, 35, 34, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 690769393, 'comment_body': ""I don't think you need the `return` since `waitFor.pageToFullyLoad()` doesn't return anything"", 'comment_created': datetime.datetime(2021, 8, 17, 22, 36, 36, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 690772154, 'comment_body': ""Can we select this with a `protractor-test` class? Note that if you can't control what classes the element has, you can chain selectors. For example, if a `<schema-based-editor>` element is a child of an element with class `protractor-test-blog-editor`, then you can select the editor like this:\r\n\r\n```js\r\nelement(by.css('.protractor-test-blog-editor')).element(by.tagName('schema-based-editor'))\r\n```\r\n\r\nOf course, the first selector should go at the top of the file, but hopefully this gives you an idea of how to chain selectors. Please let me know if this doesn't make sense!"", 'comment_created': datetime.datetime(2021, 8, 17, 22, 42, 54, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 690772945, 'comment_body': ""Maybe `publishNewBlogPost` to make clear that this isn't for publishing a draft post? Alternatively, `createAndPublishBlogPost`"", 'comment_created': datetime.datetime(2021, 8, 17, 22, 44, 59, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 690773744, 'comment_body': ""```suggestion\r\n    await action.click('Publish Blog Post Button', publishBlogPostButton);\r\n```\r\n\r\nThe first argument gets passed to the error message like this:\r\n\r\n```text\r\n{{first argument}} taking too long to become visible\r\n```\r\n\r\nso we want the first argument to make sense when plugged in"", 'comment_created': datetime.datetime(2021, 8, 17, 22, 47, 8, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 690774440, 'comment_body': ""If I'm reading this correctly, `tags` is a list of tag indices. Can we specify tags by their names instead? For example, you might be able to loop over the tags on the screen to find the one that matches the provided tag name"", 'comment_created': datetime.datetime(2021, 8, 17, 22, 48, 45, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 690779516, 'comment_body': 'This waitFor is redundant with the waitFor in the `action.click` function', 'comment_created': datetime.datetime(2021, 8, 17, 23, 0, 56, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 690779589, 'comment_body': 'ditto: redundant with action.click', 'comment_created': datetime.datetime(2021, 8, 17, 23, 1, 7, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 690780401, 'comment_body': 'It might take some time for the blogDashboardIntroMessage to load. Can you wait for another element that will always be present? Alternatively, you could design your if statement around whether `number > 0`', 'comment_created': datetime.datetime(2021, 8, 17, 23, 3, 9, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 690780483, 'comment_body': 'ditto: time for blogDashboardIntroMessage to load', 'comment_created': datetime.datetime(2021, 8, 17, 23, 3, 24, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 690780510, 'comment_body': 'ditto: time for blogDashboardIntroMessage to load', 'comment_created': datetime.datetime(2021, 8, 17, 23, 3, 29, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 690781233, 'comment_body': 'Can you avoid relying on indices?', 'comment_created': datetime.datetime(2021, 8, 17, 23, 5, 30, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 690781335, 'comment_body': ""What if the items haven't loaded yet?"", 'comment_created': datetime.datetime(2021, 8, 17, 23, 5, 44, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 690781568, 'comment_body': 'ditto: avoid using indices', 'comment_created': datetime.datetime(2021, 8, 17, 23, 6, 22, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 690785115, 'comment_body': 'ditto: redundant with action.click', 'comment_created': datetime.datetime(2021, 8, 17, 23, 15, 12, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 690793929, 'comment_body': 'ditto: avoid relying on indices', 'comment_created': datetime.datetime(2021, 8, 17, 23, 39, 13, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 690794080, 'comment_body': 'ditto: avoid relying on indices', 'comment_created': datetime.datetime(2021, 8, 17, 23, 39, 40, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 690794600, 'comment_body': 'ditto: redundant with action.click', 'comment_created': datetime.datetime(2021, 8, 17, 23, 41, 3, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 690794687, 'comment_body': 'ditto: redundant with action.click', 'comment_created': datetime.datetime(2021, 8, 17, 23, 41, 17, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 690794866, 'comment_body': 'Can you use a waitFor here instead in case it takes some time to load?', 'comment_created': datetime.datetime(2021, 8, 17, 23, 41, 48, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 690795223, 'comment_body': 'Can you put this in `BlogDashboardPage.js` instead?', 'comment_created': datetime.datetime(2021, 8, 17, 23, 42, 41, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 690795802, 'comment_body': 'The string here should describe what the blog dashboard page should do, not what the test should do\r\n\r\nditto for the other test names', 'comment_created': datetime.datetime(2021, 8, 17, 23, 44, 25, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 690796400, 'comment_body': 'Can you check that the number of drafts is now 1?', 'comment_created': datetime.datetime(2021, 8, 17, 23, 46, 16, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 690796598, 'comment_body': ""```suggestion\r\n  it('should check that editor name and profile photo are visible',\r\n```"", 'comment_created': datetime.datetime(2021, 8, 17, 23, 46, 54, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 690796994, 'comment_body': ""The function name doesn't make sense with the plural `drafts`\r\n\r\n```suggestion\r\n      await blogDashboardPage.expectNumberOfDraftBlogPostsToBe(1);\r\n```"", 'comment_created': datetime.datetime(2021, 8, 17, 23, 48, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 690798480, 'comment_body': 'This test seems to largely overlap with the previous one. If you just added some expectations, this one could replace it.\r\n\r\nSince the e2e tests are relatively expensive to run, we want to keep them as efficient as possible by avoiding duplication between tests. Ditto for other tests', 'comment_created': datetime.datetime(2021, 8, 17, 23, 51, 50, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 690799050, 'comment_body': 'There should be no element selectors in the test files. Instead, all interactions with the page should go through the BlogDashboardPage utility', 'comment_created': datetime.datetime(2021, 8, 17, 23, 53, 28, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 690912663, 'comment_body': 'This is a css coming from angular material for mat-tabs. I cannot add any class to it. \r\n![Screenshot from 2021-08-18 10-55-39](https://user-images.githubusercontent.com/68547101/129842469-cf5c176a-903e-47a6-b236-88775a5662de.png)\r\n\r\nThe code for it is:\r\n![Screenshot from 2021-08-18 10-58-47](https://user-images.githubusercontent.com/68547101/129842519-03e3f0a3-5dbc-418b-aed6-586369b0dfde.png)\r\n\r\nI have tried adding class both to ng-template and to mat-tab. But that does not work.', 'comment_created': datetime.datetime(2021, 8, 18, 5, 29, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 690914823, 'comment_body': ""In continuation to above explanation, all the mat-tab-labels are picked up. We cannot use the name of the tab furhter to pick them up as the name of the tab changes according to the number of Blog posts it contains, thus making it difficult.\r\neg if 1 blog post is a draft it is 'DRAFTS (1)' if there will be 2 it will be 'DRAFTS (2)' and so on:\r\n![Screenshot from 2021-08-18 11-04-14](https://user-images.githubusercontent.com/68547101/129842907-9863fa73-79ae-4fa2-925e-5d698c832481.png)\r\n"", 'comment_created': datetime.datetime(2021, 8, 18, 5, 35, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 690917896, 'comment_body': ""This `get` is being used to check the navigation through navbar profile dropdown to the blog dashboard page. I have now changed it to be included only in `beforeAll`. And therefore it will navigate only once after login from '/'."", 'comment_created': datetime.datetime(2021, 8, 18, 5, 43, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 690956876, 'comment_body': 'Sorry, Fixed.', 'comment_created': datetime.datetime(2021, 8, 18, 7, 0, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 690957325, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 18, 7, 1, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 690957375, 'comment_body': 'We use this to navigate from blog-post-editor to the main blog dashboard page. It directly navigates using url. In `.get()` we check navigation through profile drop down. We can go to blog post editor using create new blog post or using the blog post edit option.', 'comment_created': datetime.datetime(2021, 8, 18, 7, 1, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 690959662, 'comment_body': 'Removed.', 'comment_created': datetime.datetime(2021, 8, 18, 7, 5, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 690963212, 'comment_body': 'Changed to `showAndCloseBlogCardPreview`', 'comment_created': datetime.datetime(2021, 8, 18, 7, 10, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 691138373, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 18, 11, 13, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 691138389, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 18, 11, 13, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 691138433, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 18, 11, 13, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 691138469, 'comment_body': 'After clicking on create button we navigate to blog post editor interface where we cannot check if the number blog posts until we navigate back to the dashboard.', 'comment_created': datetime.datetime(2021, 8, 18, 11, 13, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 691138489, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 18, 11, 13, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 691138513, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 18, 11, 13, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 691203303, 'comment_body': 'Yup got it. Thank you so much.', 'comment_created': datetime.datetime(2021, 8, 18, 12, 48, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 691203334, 'comment_body': 'Changed to `publishNewBlogPost`.', 'comment_created': datetime.datetime(2021, 8, 18, 12, 48, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 691203362, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 18, 12, 48, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 691203527, 'comment_body': 'Removed', 'comment_created': datetime.datetime(2021, 8, 18, 12, 48, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 691203616, 'comment_body': 'Removed', 'comment_created': datetime.datetime(2021, 8, 18, 12, 48, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 691214246, 'comment_body': 'Removed.', 'comment_created': datetime.datetime(2021, 8, 18, 13, 1, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 691214288, 'comment_body': 'Removed the complete function. It is not required.', 'comment_created': datetime.datetime(2021, 8, 18, 13, 1, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 691225353, 'comment_body': 'Removed.', 'comment_created': datetime.datetime(2021, 8, 18, 13, 14, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 691225369, 'comment_body': 'Removed.', 'comment_created': datetime.datetime(2021, 8, 18, 13, 14, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 691225399, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 18, 13, 14, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 691282062, 'comment_body': 'Changed to the div which will contain the message. It will be present if there are no blog posts.', 'comment_created': datetime.datetime(2021, 8, 18, 14, 16, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 691282747, 'comment_body': 'Same as above', 'comment_created': datetime.datetime(2021, 8, 18, 14, 16, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 691282808, 'comment_body': 'Same as above', 'comment_created': datetime.datetime(2021, 8, 18, 14, 16, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 691425695, 'comment_body': '@U8NWXD is it expected to add new suite with known flake policy?', 'comment_created': datetime.datetime(2021, 8, 18, 16, 38, 59, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 691427430, 'comment_body': 'Are we expecting to have skip-build and prod-mode flag as well?', 'comment_created': datetime.datetime(2021, 8, 18, 16, 41, 23, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 691428299, 'comment_body': '@U8NWXD is it expected to add new files in this list?', 'comment_created': datetime.datetime(2021, 8, 18, 16, 42, 28, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 691718144, 'comment_body': 'You should be able to chain element selectors. I have a draft wiki page explaining how to do so here: https://github.com/U8NWXD/oppia-wiki/blob/2b3529118f821a2f29cd186135b1e7b9d1e260ab/End-to-End-Tests.md#writing-utilities', 'comment_created': datetime.datetime(2021, 8, 19, 1, 52, 26, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 691718928, 'comment_body': 'What about something like this:\r\n\r\n```text\r\nfor tab in matTabLabels {\r\n  text = the text in the element tab\r\n  if text starts with ""DRAFTS"" {\r\n    ...\r\n  } else {\r\n    ...\r\n  }\r\n}\r\n```\r\n\r\nFor an example of how to lop over elements, see my draft wiki page: https://github.com/U8NWXD/oppia-wiki/blob/2b3529118f821a2f29cd186135b1e7b9d1e260ab/End-to-End-Tests.md#writing-utilities', 'comment_created': datetime.datetime(2021, 8, 19, 1, 54, 43, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 691720178, 'comment_body': 'That much makes sense, but why do we need to navigate to `/` at all? After login the user will be at their dashboard page, which has the profile dropdown menu already, so then navigating to `/` seems unnecessary', 'comment_created': datetime.datetime(2021, 8, 19, 1, 58, 30, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 691720985, 'comment_body': 'Can we navigate to the main blog dashboard page from the blog post editor using the profile drop down? If so, that would be better than using the URL.\r\n\r\nThe context here is that wherever possible, we want to navigate like a user would. A user is more likely to use buttons and links than type in a URL', 'comment_created': datetime.datetime(2021, 8, 19, 2, 0, 53, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 691724393, 'comment_body': ""I don't think this change fixes the problem. Here's the scenario I'm worried about: Suppose that when this code executes, there are no blog posts in the system (so they will never load), but `blogDashboardIntroMessageContainer` hasn't loaded yet. Since `blogDashboardIntroMessageContainer` hasn't loaded, `isPresent = False` and we enter the if block. Then we wait for blog posts that never load, causing the test to fail.\r\n\r\nTo fix this, I see two options:\r\n\r\n1. Wait for some other element that is present regardless of whether there are any blog posts. This element has to load around the same time as the posts, however.\r\n2. Base the if statement around `number > 0`. In other words, base the if statement around whether we expect there to be blog posts"", 'comment_created': datetime.datetime(2021, 8, 19, 2, 11, 25, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 691725744, 'comment_body': ""No. New suites should be added with `RERUN_POLICY_NEVER` (since they shouldn't flake)"", 'comment_created': datetime.datetime(2021, 8, 19, 2, 15, 27, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 691726062, 'comment_body': 'No. New files should follow the linter, not be excluded', 'comment_created': datetime.datetime(2021, 8, 19, 2, 16, 20, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 691727547, 'comment_body': ""I still think there's some room to consolidate tests. For example, this test and the test before it could be combined.\r\n\r\nditto for the other tests"", 'comment_created': datetime.datetime(2021, 8, 19, 2, 20, 52, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 692507102, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 19, 21, 43, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 692507136, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 19, 21, 43, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 692507146, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 19, 21, 43, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 692507168, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 19, 21, 43, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 692507188, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 19, 21, 43, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 692508058, 'comment_body': 'We will actually have blog dashboard intro message to be present only if there are no blog posts created by the user. Before the loading screen goes of we check if the message container is to be present or not. Sorry if I am not able to comprehend it correctly', 'comment_created': datetime.datetime(2021, 8, 19, 21, 45, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 692508285, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 19, 21, 45, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 692508320, 'comment_body': 'Done. Navigating back using the back button.', 'comment_created': datetime.datetime(2021, 8, 19, 21, 45, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 692508450, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 19, 21, 46, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 692508474, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 19, 21, 46, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 692509290, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 19, 21, 47, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 692510151, 'comment_body': ' @U8NWXD I am unable to run the tests with skip build locally, can it just be a issue with my system ? ', 'comment_created': datetime.datetime(2021, 8, 19, 21, 49, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 692510366, 'comment_body': 'Removed.', 'comment_created': datetime.datetime(2021, 8, 19, 21, 49, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 692513139, 'comment_body': ""Can we chain selectors like: element(by.css('.protractor-test-mat-group')).element.all(by.css(...))?\r\nIt gives an error that no such function element(...).element.all() exists."", 'comment_created': datetime.datetime(2021, 8, 19, 21, 55, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 692630823, 'comment_body': '`--skip-build` works on CI because there we already built the Oppia app when we ran the previous test (featureGating in this case). That might not be the case on your local system', 'comment_created': datetime.datetime(2021, 8, 20, 3, 24, 10, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 692637696, 'comment_body': ""Maybe this schematic will help:\r\n\r\n```text\r\n\r\nBrowser:     +-//--> loading screen disappears -//--> intro message appears -//--> (no blog posts appear) -//-->\r\n                                                |\r\n                                                |\r\n                                                |\r\nProtractor:  +-//--> check blogDashboardIntroMessageContainer.isPresent() -//--> if not present: wait for blog posts -//-->\r\n\r\n```\r\n\r\nHere I'm illustrating what happens in 2 parallel processes: in the browser and in the protractor tests. The time it takes to advance through each process is non-deterministic, which is why the arrows have `//` in them. Therefore it's possible that the `check blogDashboardIntroMessageContainer.isPresent()` step in the protractor test process comes between the `loading screen disappears` and `intro message appears` steps in the browser process. I use `|` to indicate simultaneity between the two processes.\r\n\r\nNote that this is only a problem on really slow systems where it might take a while for the intro message to appear. However, sometimes our CI runners can be really slow! This is especially true now when we are running up against our runners' memory limits. More abstractly, our tests should not rely on something happening really fast in the browser. They should work correctly no matter the speed at which the browser process is running.\r\n\r\nDoes that help?"", 'comment_created': datetime.datetime(2021, 8, 20, 3, 36, 32, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 692880317, 'comment_body': '![Screenshot from 2021-08-20 17-10-52](https://user-images.githubusercontent.com/68547101/130228011-3dd3809d-5a46-4dd2-a8e1-30fe976611a7.png)\r\nWith `--prod_env` this error comes on CI as well as locally.\r\n\r\nLink for test CI run: https://github.com/oppia/oppia/pull/13683/checks?check_run_id=3381077815', 'comment_created': datetime.datetime(2021, 8, 20, 11, 42, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 693024418, 'comment_body': 'Yup got it. Thanks for explaining. I have according to whether we expect the intro message to be shown or not changed the tests. I have added a separate function for checking if it is visible. Checking number of blog posts is now independent of it.', 'comment_created': datetime.datetime(2021, 8, 20, 15, 13, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 693134131, 'comment_body': 'No worries, mostly the change suggested by Sandeep should fix it.', 'comment_created': datetime.datetime(2021, 8, 20, 18, 14, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 693358568, 'comment_body': ""Okay, I guess that won't work then. Thanks for discovering that `element.all` doesn't work with chaining!"", 'comment_created': datetime.datetime(2021, 8, 21, 14, 2, 27, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 693358816, 'comment_body': 'Can you add a waitFor to make sure the tabs have loaded? You can wait for `matTabLabels.first()` since you know there will never be 0 tabs', 'comment_created': datetime.datetime(2021, 8, 21, 14, 4, 59, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 693358916, 'comment_body': 'Maybe `navigateToBlogDashboardPageWithBackButton` to make clear how this function differs from `get()`?', 'comment_created': datetime.datetime(2021, 8, 21, 14, 6, 26, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 693358978, 'comment_body': ""Can you wait for the blog post tags to load? One consideration: can `blogPostTags.count()` ever be 0? If there are no blog post tags, then you can't wait for them"", 'comment_created': datetime.datetime(2021, 8, 21, 14, 7, 16, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 693359379, 'comment_body': '```suggestion\r\n  this.waitForDraftBlogPostsToLoad = async function() {\r\n```', 'comment_created': datetime.datetime(2021, 8, 21, 14, 10, 35, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 693359559, 'comment_body': 'Can you wait for the items to load? Be careful to handle the case where there are no items if applicable', 'comment_created': datetime.datetime(2021, 8, 21, 14, 12, 22, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 693359564, 'comment_body': 'Can you wait for the items to load? Be careful to handle the case where there are no items if applicable', 'comment_created': datetime.datetime(2021, 8, 21, 14, 12, 28, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 693359653, 'comment_body': ""Once we find a match, we don't want to continue the loop, do we?"", 'comment_created': datetime.datetime(2021, 8, 21, 14, 13, 23, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 693359701, 'comment_body': 'Once we find a match, should we break out of the loop?', 'comment_created': datetime.datetime(2021, 8, 21, 14, 13, 57, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 693359709, 'comment_body': 'Once we find a match, should we break out of the loop?', 'comment_created': datetime.datetime(2021, 8, 21, 14, 14, 10, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 693360239, 'comment_body': 'No as there are multiple matches and all should be selected.', 'comment_created': datetime.datetime(2021, 8, 21, 14, 19, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 693363154, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 21, 14, 48, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 693363155, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 21, 14, 48, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 693363158, 'comment_body': 'Done. there can never be 0 tags. atleast 1 tag will always be present.', 'comment_created': datetime.datetime(2021, 8, 21, 14, 48, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 693363160, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 21, 14, 48, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 693363175, 'comment_body': 'we are returning the function with the value `blogPostEditOptionButton` as soon as the match is found. So it will not continue running, right?', 'comment_created': datetime.datetime(2021, 8, 21, 14, 48, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 693363178, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 21, 14, 48, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 693363567, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 21, 14, 51, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 693363578, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 21, 14, 51, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 693437067, 'comment_body': ""I don't see any return statement in this function (`navigateToBlogPostEditorWithTitleFromList`)"", 'comment_created': datetime.datetime(2021, 8, 22, 4, 4, 30, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 693457928, 'comment_body': 'Sorry, I got confused with the other function. Fixed. Added a `break` statement after `await waitFor.pageToFullyLoad();`', 'comment_created': datetime.datetime(2021, 8, 22, 7, 32, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 693479978, 'comment_body': 'Why are we waiting for the page to load here?', 'comment_created': datetime.datetime(2021, 8, 22, 10, 32, 15, tzinfo=datetime.timezone.utc), 'commenter': 'SAEb-ai', 'type': 'User'}, {'comment_id': 693485093, 'comment_body': 'So as to ensure that before we navigate back to the blog dashboard the blog post editor tab should have been fully loaded. This is because we use a listener that checks for changes being saved on the page and prevent reloading if there are any unsaved changes. If the page is not loaded completely it raises an alert before navigating back as we are fetching he data and changing it. So to avoid flakiness added waiting for full page load.', 'comment_created': datetime.datetime(2021, 8, 22, 11, 11, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 693512461, 'comment_body': 'You had added a `waitFor.visibilityOf(blogPostTags.first(), ...)` here earlier. Why was it removed? I thought it was a good thing to have', 'comment_created': datetime.datetime(2021, 8, 22, 14, 43, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 693514534, 'comment_body': ""Opps, Sorry. I don't remember how did it get removed. Sorry for negligence"", 'comment_created': datetime.datetime(2021, 8, 22, 14, 59, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}]","[{'commit_sha': 'd2461fa1e789ab5b7473e6b1f1a5f1250e68dd55', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c080274d22670c1238e37ed39b8bd6644915989b', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ad13ae80f5f1930bda70e2938bc609ac5d1a984', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb07832a6b90a9d408745c966ec6238fddf13202', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87169526defad5a063eaa0af90d6f91c73deaf75', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d5aadc5dea34a06fedc7e3be0135b78df862b5d', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02bc763e9c7785e5898b0deb9aa4afb351c0e5c0', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1dbf492e4ce334a07f2f79a1377de886dafa9243', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38489800c1333231ee305aac948a6fa5f331ca14', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96d49a9c7aa86077a5ec54235344aff10f94ee14', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1357401e7e2e74637388065c3d060a77801e627d', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46c1e9a50f4e9b4c4730b2c59855ab791af43283', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f80436d3a5f325e14a7233bab896b69571631b65', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9b8013bf945f233e933da7ca45cd0544b11e723', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c81860e2197758da709be40150ee69f62f94a6bf', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a94ca6327eec4d977d8e624adbc0fad4ffad6731', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a950ca9262b1bc2bdc544767c81bee768ee2cb8c', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb4332df4eed6bc0cffd2f489e37e640948b5585', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac41f5a4b256a8bf44bb82a7f7371f2814c9bf52', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '093b8843e89816782557074a0cfeaf62ec73a9d6', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9002393c512f51e0584785f5e261ddd265371fe', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e2fa631862bd3cdf9db721bf017943bc9340b06', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2678224e90b13a51385770006e72e885b064ae6d', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b35c489abc03fa67b0bdd9bdfb3502e05a2683d', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b9729778d57d590a03199233139e8e6bda35e06', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47d952f575aa8741bf95a63bde70bea133a240aa', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e1cf223182f36ebb55ea525c4b8651e2ea7c086', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '85961994adcde9d8cc60688f0426fb20da524152', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c42e2ea4c00eb64ccc86cce177c480d5ddd80071', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a838e450719752775e0022049c1bb67f8a7b70c2', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57cc32cd610462d16f2444c55c38771e769ce3f1', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f574991da5167d838be95faaacef25ff44dd24da', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07c53bf695d760b3543bb497db69509d9fbd6f64', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19a8f3aec4aae38a8c2a950dab83e65239f7e41c', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4fbd67f02c9a06cbe3c894ea12e8c2dd36abf86c', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '24c6e2a9203e678c72ee2b1efbfc256ec4f3ea17', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cbffcf30bbe6e862d57becb3cb6e069d0810a3f2', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1815357bae0608cbd85ddc2ea3e14db8b9e382df', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '695a9ba503c77abfe3c55eafa58efef9a4036e7c', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6507ed3e23fbb0eb60eaaa1ec2f216db43c2dc09', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79565b41046a9891329d93f2228dcfb9ef874c7b', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3357b5043e276a972d1b62c153079e12a3f5fb5d', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95ecaea98b7b3d72f9f6f221ffd1d8df8078933d', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1cee0d4dbd7f58c615cde613ebe79ae0a0b8634', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8075f04e8ae35b0953e344bda0440b8ba0f94712', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38f35ea28554b5d3574ada812f43f2842895317f', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a0dd144ee8c0ca429c77eee732e93f0b740dcb1', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84d08d84091212f3288751ed772ca0200d9b2f57', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '146323a7cd06a122e44df009871a49b2cf36227d', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5dcbb8337e8e3cbaa9d3e57509134cbb3ee35843', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '738ba2786a6038d177ff3c1bf7a6cda23145c920', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fac7d16cc6a8b756ded21eb4d02a44a9d21336a1', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72219508fc9da5e14031f78eadad23846e728a1e', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b05cfd1ac623aa5d8413f71afcd72f38b3976d0', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d1b18e4506c1aee629e69060e2377678f5e4d5c', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62fa1ce379ebbd858605a7bfdedab4281b208e68', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b1cc47da454980935093db6ceac39074996cfc73', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '01b9e1dc4dc4a9551ac0329229a459af0eda0c17', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a83055a959fb6d4e1c601fce6a4bed9b64d65f2d', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ad61932fd95869677eb143a82087be34e81f5cb', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f555e5c8f283f9c778d11d7342389e7b163d1465', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '336d2b997ff7f96becb082b9c7857e413e2883af', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb2ff7a246de803f9b59c438f9c5c6a897e15e10', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e995776d49764cbd18ffbd07cb4a243b14fa5163', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4cef3596e2c01ccaa999a722081f60890012ca4f', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1080ee8d0ff4944d6f5cce15b0f6b60b7926999', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05e44a5cabed2e472a4e98f303fd2ec58094d4e8', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08770e01f261713f07fd9d3bf437e4a96a61d68b', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '32f21cd4e9b002fbfcd33df1901915169d942f0b', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '221322e5f2d29102cade15b3dd6646334e254584', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f5cdeeb5acb9eaf5e77946f23f712e4444f5980', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39fcb5295b9b54e994261a22a2e83b50da8173d9', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9d141bfc72209d73ad19f69e4419528f57fa9d0', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad1b1d4d47d724ebda36d546167afff8304ea0f5', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f954b577cec03ecc1678ed73be646251a114742a', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97fc7cd1227eb226d4e1fdc8d6b6e4d7420508f0', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '786221a922d07eb96c8073fdc76db595dea61571', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b4c432b6b6034ed02d1869705ea31d6a8ba96812', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f520e975c3b473cdd083ca35f9fa45716dba793e', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2efd849c08a35bd984e412a176e3c792ade8729d', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1729e653b76f04d3b283939a8be6baceae93423', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9177edd49b0a09ecd3c5e8e0e12289d5c86be80', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b8cb3d003fffe8873a7909602d762a1f83b92d9', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a35634ab1e2867aebfd2e888dd212ec78ade488', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6fbab518a4a8e077fe7c79a6f92396b403f93a06', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c3d7deb2820853f1e25d0fceac94c6507e6b481', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'efeb23ecd3b973332a9295c210decea63316f909', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87839697f55e5b7c1e1cb0bd37dd23b011bd3394', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '18f6cb70d8d7b9bd94049557448c977fba8d3538', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'acc6b24a5e0cfaf9b6da6223c53affdf4e61eb23', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d3527ef7967c5d7c99e990fa870d84295e929a8', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8351c15e7151789d8b6cd24ab3720cf2f63813b1', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b090dd068ed5d0ebbbd83d5458d6f639e07b8878', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3146dec686e322aba22769cf46f80ae2f927c4f0', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3eeaf5a678275cebb356f15be29c2d1c600920b5', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e828771376b6963cd94187a84ac988d20212ad88', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0081a4177d191d59cfae366af5a875714cb97522', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4bd644a2bf052fdbf21b99d2a220170b7578e958', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f217877ab5f9865356129b0a14fa0181a5ea6aff', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a96b07298148d5b8e43d1ffe65d596daf36cfb26', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b50d130ebf7b9ffa68a77a54dece6f854500d86e', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '051900d18b069591494fe52423fb1c0995b0bf71', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3bb3f74b3a56429e1b64e08b3b16441e524a3a63', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf8cd715a0beedc0b1b78d3bce10c9ff0186f282', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '32badef9605df90048976f4ea0dbe78285367884', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '233d7ebc4076ead8af8252cf8068657d7514bcab', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f5ccce72eb2fa5453b950095080ba286b9c15cf', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a477aedfdc315f64e3488e4ece5cd734ca76fe7', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '484eeb1402c75f2ce9fbd464e1411161b7323425', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70c6bc641997b353233f080799de834b51fd7e06', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60e813ac433851dcd0fdaca840ecb9152c590131', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e246f415cf1e8f2a836182b2dac53d25834ecf6a', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b03500d6290a33efe94e36389e7c0a50cc257c64', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd7ba0a6020ca61f3e2910c4b1062294f1c0d37c1', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ecfbbffbb46243b6408548a05442ff321bbc8d96', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b84d8d720812ff2accc3ada990db4cfe57b02bf5', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7208897053c85d9469bf3e02e097a5809aadf3c3', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a8988cd22fa45de3cc24068a9cbb3ccd62026383', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2dfdb1fa0c49325740564f8a809cb4b7d9d76299', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a6ced79f6b68718ce505eabe38d5eed91fcaf2e', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71229307493e5f6a63cfe4c500739c825b251c87', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53799c058c95ef7a5ec3d4cfac9e2a27e6dd39ce', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dfa23fb32f38c916258c17c590d11f3c982ac390', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bba671e213676a54cfb85de853d6f95872205d99', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '734b209f3c898f3bc36a0a672df8b3b507caafba', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '114759823e1a3dba4182d2bebbf5ce1f2edc676b', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6667a76347d96e69dd52496463d0d96470272d5', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10b4c8fce0c76ea0afd90d5dfd9ec948a18c1a2e', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '434c990c2ffb66a28f5e2543312d0cc6a25a6850', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7827c13a4aff66129546e7f3242e27d6d9b03aec', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08ce1ca8e13167b15abca79957dbf629bc7b2234', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4720401032bf1b69d8ff27b691fc98c450ef3a1e', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd70cf893109e3db66f0e56f35905dac81620dec3', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e242cae9a53ae37e19402646c78912b308bbe21', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a9bfae47eae46503da5e23a494e30d5477efd7b', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1bc385354123f813379f55691fbeb6658375ec77', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ae4f429c5e7e3e1b0325f2040ecc2efbb75645b', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd32f83b9152c70273bbcff76b4a6ea04071320ee', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2717ed91d941669d8068aaf2c1cbe66c376f17cf', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ce1653de58e03f4287a0b2afed95f220e73b091', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1ea6ca3ddaf93e793dc0ca9d901eb7e0be8094f', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df9b42b66332ac47826779b3a87e8597e2a5f489', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'accf3c67cf3f16193e4103267078c0f5a3243391', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '274e24dfd0e276e99b406df0654c3b9f6dfd366e', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69880d0eba6fa4ecd19bd1d74bfd1d630a2d2d1c', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7195f6a4499c559815a532a381e5615dfab1e75', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b2e09d0947288418f45fd4cbf1979ae51b52170', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a4a7e2489491415d475fc94875c1c3532aca69c2', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15953eafcbfc5450baeb3bc273a79cd5f7abf126', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '278ab7da6e445522ea763f6250b6b51dd6a62b7e', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48b43b1eff5e9a1bbc8776ffaf34f978173c91bd', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c5102811e6c4e40ec11fc73494fd9d0baef7e483', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e6948ea5ea8bc27904d9e2aa53347f3f28ddac7b', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '81eac2bf35d5cabbc86409e4b056e6de362a1864', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa0dd2c07f4fd8a23579d29ad82050898ccc49f7', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd14a36ec7ede253f1db905514d6a8f848ecf6915', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '977a4d21a4d6d83c58d17de72e5accba84c1322a', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '32ba66488f5c9c3f751433991da19e64f3e028a1', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7893fbf1758e23404e231375c9826593301366e0', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e28b6b900903da336d4d6379b8a59df98c28ef8c', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e6c65d5e9392c12361657bf1ee710b8c1beb6d9f', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc5a43cde509068ec5cf5438ca3e421f107f5ce7', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45aae73253456380dfb7b6fbbf1dcd58c46b6951', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97e5161027672acdf1b8e6f003eb0eb9ef3c2078', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8b9204f12977da92b1cb4c6135cea936cffed28', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ee4469119dadce81d36f1a2ef8515b074759836', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '24494f3b1c5f9f470b6143fa735f3828abe28186', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb24c2be56f7c7222cb69f339e003831d37171b8', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '86c2a8b8bde3fa370c6c4fe4647c5dc7ac025a15', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba34845c3f6a1358317b73f651081af570d7785f', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b4b3ff3fed6e9e1b55dc60097ab6a5b984a70b39', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47cf55f4ad6eb77c89607a662dfb55e8dd697ab8', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03ab774eed80d94f557ee4ee00e36df12e5de183', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf9a5ad063770ba82581a4b4a14d6bebf42c1792', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1a4e350e2f36980165e059ebbdd569968f2d889', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17922d566519965ad01cc0589f4c185447bd91b9', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ab0980c5b2d7a3dcd0691535ee8bad8ec2c812e', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1631273c405c892a6ee84bed4d1cdefbaf47f260', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '119b45513d956c3bb968faed610e86a6d03ad9fb', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5fcaf9b0b980c6051bda8bdbad6928329bb71c47', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97254ca738aa86ccc17641e7d0b350b06499f9ce', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0e683625fe1feb4901564fdbad1781a099efd5c', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a203a54b8a35923e01ca51eb988016a0403f58f4', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '23cbd7022d534a282bf9cd688526c0ed66be13d1', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '436b8f28c0d3658b64b5c76dbbeb6d860b706503', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1618e1239e2ef070f16a6fcc4b5796b070ac066f', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f9b2e360a37a261e76c351080823039d2149316', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3f22af213a42cbf34731280a59798d6a619bb40', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79aa1c70394530db1e5e3ca65229a67b89295834', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e56cff2ae449a7ddbc5981ea708a41ee34746c7a', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dbac5692c362eff86f89fd8648b162be160d0ac5', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c19083f9fbdd400e84385001e495d4e8d6595951', 'committer_username': 'Rijuta-s', 'committer_name': 'Rijuta Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 20, 12, 31, 49, tzinfo=datetime.timezone.utc)}]",Rijuta Singh,68547101,,User,,7,,13,22

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
40687563,oppia,oppia/oppia,Python,3839,5716,240,775,15750,1419,417,27,"[{'id': 1501550048, 'number': 18839, 'closed': datetime.datetime(2023, 10, 15, 20, 6, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 9, 4, 15, 54, 9, tzinfo=datetime.timezone.utc), 'time_taken': 3557536.0, 'time_delta': '41 days, 4:12:16', 'additions': 2622, 'deletions': 0, 'state': 'closed'}, {'id': 1369435167, 'number': 18301, 'closed': datetime.datetime(2023, 7, 9, 22, 22, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 29, 18, 7, 19, tzinfo=datetime.timezone.utc), 'time_taken': 3557696.0, 'time_delta': '41 days, 4:14:56', 'additions': 9750, 'deletions': 38, 'state': 'closed'}, {'id': 1361885883, 'number': 18278, 'closed': datetime.datetime(2023, 6, 9, 17, 40, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 23, 18, 48, 44, tzinfo=datetime.timezone.utc), 'time_taken': 1464696.0, 'time_delta': '16 days, 22:51:36', 'additions': 104, 'deletions': 33, 'state': 'closed'}, {'id': 1202068904, 'number': 17018, 'closed': datetime.datetime(2023, 2, 11, 12, 11, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 1, 18, 18, 6, 20, tzinfo=datetime.timezone.utc), 'time_taken': 2052328.0, 'time_delta': '23 days, 18:05:28', 'additions': 624, 'deletions': 109, 'state': 'closed'}, {'id': 1182876163, 'number': 16813, 'closed': datetime.datetime(2023, 1, 11, 1, 21, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 1, 2, 20, 23, 47, tzinfo=datetime.timezone.utc), 'time_taken': 709085.0, 'time_delta': '8 days, 4:58:05', 'additions': 110, 'deletions': 35, 'state': 'closed'}, {'id': 1136318751, 'number': 16628, 'closed': datetime.datetime(2022, 11, 26, 7, 59, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 11, 25, 22, 51, 15, tzinfo=datetime.timezone.utc), 'time_taken': 32897.0, 'time_delta': '9:08:17', 'additions': 54, 'deletions': 17, 'state': 'closed'}, {'id': 1124488762, 'number': 16557, 'closed': datetime.datetime(2023, 1, 26, 18, 12, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 11, 16, 13, 25, 57, tzinfo=datetime.timezone.utc), 'time_taken': 6151568.0, 'time_delta': '71 days, 4:46:08', 'additions': 9930, 'deletions': 79, 'state': 'closed'}, {'id': 1109372734, 'number': 16479, 'closed': datetime.datetime(2022, 11, 8, 9, 3, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 11, 3, 10, 15, 9, tzinfo=datetime.timezone.utc), 'time_taken': 427674.0, 'time_delta': '4 days, 22:47:54', 'additions': 443, 'deletions': 67, 'state': 'closed'}, {'id': 1103528111, 'number': 16435, 'closed': datetime.datetime(2022, 11, 10, 13, 48, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 28, 19, 39, 45, tzinfo=datetime.timezone.utc), 'time_taken': 1102132.0, 'time_delta': '12 days, 18:08:52', 'additions': 636, 'deletions': 42, 'state': 'closed'}, {'id': 1088265685, 'number': 16323, 'closed': datetime.datetime(2022, 10, 22, 17, 3, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 15, 23, 15, 27, tzinfo=datetime.timezone.utc), 'time_taken': 582465.0, 'time_delta': '6 days, 17:47:45', 'additions': 5378, 'deletions': 190, 'state': 'closed'}, {'id': 1086139156, 'number': 16299, 'closed': datetime.datetime(2022, 10, 27, 18, 35, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 13, 13, 58, 28, tzinfo=datetime.timezone.utc), 'time_taken': 1226245.0, 'time_delta': '14 days, 4:37:25', 'additions': 199, 'deletions': 71, 'state': 'closed'}, {'id': 1081397891, 'number': 16243, 'closed': datetime.datetime(2022, 11, 8, 10, 59, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 9, 23, 51, 36, tzinfo=datetime.timezone.utc), 'time_taken': 2545649.0, 'time_delta': '29 days, 11:07:29', 'additions': 4226, 'deletions': 287, 'state': 'closed'}, {'id': 1065864417, 'number': 16123, 'closed': datetime.datetime(2022, 10, 4, 12, 31, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 23, 23, 10, 47, tzinfo=datetime.timezone.utc), 'time_taken': 912050.0, 'time_delta': '10 days, 13:20:50', 'additions': 192, 'deletions': 72, 'state': 'closed'}, {'id': 1052519821, 'number': 16040, 'closed': datetime.datetime(2022, 9, 22, 17, 56, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 11, 14, 37, 36, tzinfo=datetime.timezone.utc), 'time_taken': 962342.0, 'time_delta': '11 days, 3:19:02', 'additions': 5378, 'deletions': 189, 'state': 'closed'}, {'id': 1028911552, 'number': 15914, 'closed': datetime.datetime(2022, 9, 10, 10, 8, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 17, 14, 22, 28, tzinfo=datetime.timezone.utc), 'time_taken': 2058339.0, 'time_delta': '23 days, 19:45:39', 'additions': 1979, 'deletions': 70, 'state': 'closed'}, {'id': 1020710744, 'number': 15862, 'closed': datetime.datetime(2022, 8, 15, 9, 58, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 8, 20, 9, 3, tzinfo=datetime.timezone.utc), 'time_taken': 568174.0, 'time_delta': '6 days, 13:49:34', 'additions': 227, 'deletions': 86, 'state': 'closed'}, {'id': 1012818172, 'number': 15819, 'closed': datetime.datetime(2022, 8, 3, 16, 6, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 30, 16, 43, 9, tzinfo=datetime.timezone.utc), 'time_taken': 343411.0, 'time_delta': '3 days, 23:23:31', 'additions': 4, 'deletions': 7, 'state': 'closed'}, {'id': 1004500508, 'number': 15775, 'closed': datetime.datetime(2022, 8, 3, 16, 6, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 21, 17, 45, 54, tzinfo=datetime.timezone.utc), 'time_taken': 1117261.0, 'time_delta': '12 days, 22:21:01', 'additions': 4, 'deletions': 3, 'state': 'closed'}, {'id': 859801929, 'number': 14991, 'closed': datetime.datetime(2022, 2, 24, 8, 27, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 2, 21, 20, 0, 14, tzinfo=datetime.timezone.utc), 'time_taken': 217639.0, 'time_delta': '2 days, 12:27:19', 'additions': 22, 'deletions': 15, 'state': 'closed'}, {'id': 832864278, 'number': 14783, 'closed': datetime.datetime(2022, 1, 28, 19, 19, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 1, 26, 22, 25, 4, tzinfo=datetime.timezone.utc), 'time_taken': 161680.0, 'time_delta': '1 day, 20:54:40', 'additions': 37, 'deletions': 16, 'state': 'closed'}, {'id': 824978310, 'number': 14685, 'closed': datetime.datetime(2022, 1, 20, 11, 14, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 1, 17, 22, 29, 41, tzinfo=datetime.timezone.utc), 'time_taken': 218704.0, 'time_delta': '2 days, 12:45:04', 'additions': 132, 'deletions': 42, 'state': 'closed'}, {'id': 823721795, 'number': 14660, 'closed': datetime.datetime(2022, 1, 18, 22, 14, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 1, 15, 19, 4, 6, tzinfo=datetime.timezone.utc), 'time_taken': 270626.0, 'time_delta': '3 days, 3:10:26', 'additions': 114, 'deletions': 19, 'state': 'closed'}, {'id': 812006507, 'number': 14523, 'closed': datetime.datetime(2022, 2, 1, 16, 19, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 12, 30, 14, 29, 24, tzinfo=datetime.timezone.utc), 'time_taken': 2857791.0, 'time_delta': '33 days, 1:49:51', 'additions': 196, 'deletions': 168, 'state': 'closed'}, {'id': 779173332, 'number': 14233, 'closed': datetime.datetime(2021, 11, 12, 12, 9, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 11, 12, 8, 4, 58, tzinfo=datetime.timezone.utc), 'time_taken': 14673.0, 'time_delta': '4:04:33', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 777950403, 'number': 14224, 'closed': datetime.datetime(2021, 11, 23, 12, 15, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 11, 10, 19, 50, 29, tzinfo=datetime.timezone.utc), 'time_taken': 1095894.0, 'time_delta': '12 days, 16:24:54', 'additions': 184, 'deletions': 21, 'state': 'closed'}, {'id': 774843206, 'number': 14195, 'closed': datetime.datetime(2021, 11, 7, 6, 46, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 11, 6, 18, 53, 34, tzinfo=datetime.timezone.utc), 'time_taken': 42797.0, 'time_delta': '11:53:17', 'additions': 20, 'deletions': 2, 'state': 'closed'}, {'id': 773572385, 'number': 14184, 'closed': datetime.datetime(2021, 11, 6, 17, 24, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 11, 4, 18, 20, 39, tzinfo=datetime.timezone.utc), 'time_taken': 169413.0, 'time_delta': '1 day, 23:03:33', 'additions': 10, 'deletions': 1, 'state': 'closed'}, {'id': 767414939, 'number': 14139, 'closed': datetime.datetime(2021, 10, 31, 15, 3, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 27, 13, 23, 54, tzinfo=datetime.timezone.utc), 'time_taken': 351599.0, 'time_delta': '4 days, 1:39:59', 'additions': 15, 'deletions': 5, 'state': 'closed'}, {'id': 761752865, 'number': 14105, 'closed': datetime.datetime(2021, 10, 24, 7, 49, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 19, 20, 9, 11, tzinfo=datetime.timezone.utc), 'time_taken': 387645.0, 'time_delta': '4 days, 11:40:45', 'additions': 354, 'deletions': 150, 'state': 'closed'}, {'id': 753380990, 'number': 14023, 'closed': datetime.datetime(2021, 10, 14, 14, 49, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 7, 17, 12, 50, tzinfo=datetime.timezone.utc), 'time_taken': 596181.0, 'time_delta': '6 days, 21:36:21', 'additions': 281, 'deletions': 22, 'state': 'closed'}, {'id': 746734607, 'number': 13960, 'closed': datetime.datetime(2021, 10, 7, 17, 7, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 30, 14, 3, 56, tzinfo=datetime.timezone.utc), 'time_taken': 615811.0, 'time_delta': '7 days, 3:03:31', 'additions': 107, 'deletions': 14, 'state': 'closed'}, {'id': 727256409, 'number': 13817, 'closed': datetime.datetime(2021, 9, 12, 17, 34, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 4, 15, 23, 14, tzinfo=datetime.timezone.utc), 'time_taken': 699079.0, 'time_delta': '8 days, 2:11:19', 'additions': 66, 'deletions': 40, 'state': 'closed'}, {'id': 717291237, 'number': 13722, 'closed': datetime.datetime(2021, 8, 23, 11, 27, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 22, 11, 9, 12, tzinfo=datetime.timezone.utc), 'time_taken': 87505.0, 'time_delta': '1 day, 0:18:25', 'additions': 7, 'deletions': 0, 'state': 'closed'}, {'id': 717182100, 'number': 13720, 'closed': datetime.datetime(2021, 8, 22, 19, 2, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 21, 17, 17, 1, tzinfo=datetime.timezone.utc), 'time_taken': 92704.0, 'time_delta': '1 day, 1:45:04', 'additions': 25, 'deletions': 24, 'state': 'closed'}, {'id': 712837926, 'number': 13683, 'closed': datetime.datetime(2021, 8, 22, 21, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 14, 21, 15, 1, tzinfo=datetime.timezone.utc), 'time_taken': 691139.0, 'time_delta': '7 days, 23:58:59', 'additions': 724, 'deletions': 72, 'state': 'closed'}, {'id': 705514644, 'number': 13590, 'closed': datetime.datetime(2021, 8, 16, 16, 19, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 6, 14, 9, 14, tzinfo=datetime.timezone.utc), 'time_taken': 871834.0, 'time_delta': '10 days, 2:10:34', 'additions': 1686, 'deletions': 102, 'state': 'closed'}, {'id': 703896216, 'number': 13575, 'closed': datetime.datetime(2021, 8, 15, 23, 46, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 4, 19, 22, 43, tzinfo=datetime.timezone.utc), 'time_taken': 966244.0, 'time_delta': '11 days, 4:24:04', 'additions': 1161, 'deletions': 82, 'state': 'closed'}, {'id': 699834829, 'number': 13522, 'closed': datetime.datetime(2021, 8, 13, 4, 23, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 29, 20, 53, 26, tzinfo=datetime.timezone.utc), 'time_taken': 1236585.0, 'time_delta': '14 days, 7:29:45', 'additions': 3226, 'deletions': 119, 'state': 'closed'}, {'id': 696166155, 'number': 13472, 'closed': datetime.datetime(2021, 7, 30, 16, 33, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 23, 19, 28, 38, tzinfo=datetime.timezone.utc), 'time_taken': 594272.0, 'time_delta': '6 days, 21:04:32', 'additions': 980, 'deletions': 52, 'state': 'closed'}, {'id': 693651280, 'number': 13439, 'closed': datetime.datetime(2021, 7, 25, 21, 5, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 20, 17, 19, 43, tzinfo=datetime.timezone.utc), 'time_taken': 445559.0, 'time_delta': '5 days, 3:45:59', 'additions': 1670, 'deletions': 12, 'state': 'closed'}, {'id': 690465555, 'number': 13400, 'closed': datetime.datetime(2021, 7, 17, 19, 16, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 15, 7, 24, 59, tzinfo=datetime.timezone.utc), 'time_taken': 215515.0, 'time_delta': '2 days, 11:51:55', 'additions': 61, 'deletions': 8, 'state': 'closed'}, {'id': 683070021, 'number': 13300, 'closed': datetime.datetime(2021, 7, 7, 1, 17, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 3, 19, 44, 51, tzinfo=datetime.timezone.utc), 'time_taken': 279162.0, 'time_delta': '3 days, 5:32:42', 'additions': 1388, 'deletions': 8, 'state': 'closed'}, {'id': 681643382, 'number': 13278, 'closed': datetime.datetime(2021, 7, 8, 8, 57, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 1, 9, 1, 46, tzinfo=datetime.timezone.utc), 'time_taken': 604530.0, 'time_delta': '6 days, 23:55:30', 'additions': 625, 'deletions': 61, 'state': 'closed'}, {'id': 678490743, 'number': 13232, 'closed': datetime.datetime(2021, 7, 13, 23, 26, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 27, 10, 19, 12, tzinfo=datetime.timezone.utc), 'time_taken': 1429667.0, 'time_delta': '16 days, 13:07:47', 'additions': 1098, 'deletions': 1, 'state': 'closed'}, {'id': 677849260, 'number': 13207, 'closed': datetime.datetime(2021, 7, 3, 5, 58, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 25, 11, 41, 6, tzinfo=datetime.timezone.utc), 'time_taken': 670671.0, 'time_delta': '7 days, 18:17:51', 'additions': 2425, 'deletions': 23, 'state': 'closed'}, {'id': 673867819, 'number': 13134, 'closed': datetime.datetime(2021, 6, 29, 14, 37, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 19, 11, 42, 52, tzinfo=datetime.timezone.utc), 'time_taken': 874504.0, 'time_delta': '10 days, 2:55:04', 'additions': 3055, 'deletions': 3265, 'state': 'closed'}, {'id': 672895687, 'number': 13118, 'closed': datetime.datetime(2021, 6, 23, 6, 34, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 17, 18, 40, 6, tzinfo=datetime.timezone.utc), 'time_taken': 474881.0, 'time_delta': '5 days, 11:54:41', 'additions': 2751, 'deletions': 111, 'state': 'closed'}, {'id': 655326024, 'number': 12934, 'closed': datetime.datetime(2021, 6, 1, 16, 31, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 27, 20, 21, 47, tzinfo=datetime.timezone.utc), 'time_taken': 418171.0, 'time_delta': '4 days, 20:09:31', 'additions': 2078, 'deletions': 1482, 'state': 'closed'}, {'id': 655310799, 'number': 12933, 'closed': datetime.datetime(2021, 6, 17, 23, 8, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 27, 19, 59, 8, tzinfo=datetime.timezone.utc), 'time_taken': 1825783.0, 'time_delta': '21 days, 3:09:43', 'additions': 1568, 'deletions': 44, 'state': 'closed'}, {'id': 645137766, 'number': 12813, 'closed': datetime.datetime(2021, 6, 29, 18, 14, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 15, 12, 23, 27, tzinfo=datetime.timezone.utc), 'time_taken': 3909078.0, 'time_delta': '45 days, 5:51:18', 'additions': 398, 'deletions': 115, 'state': 'closed'}, {'id': 637117837, 'number': 12777, 'closed': datetime.datetime(2021, 5, 12, 11, 20, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 10, 8, 11, 37, tzinfo=datetime.timezone.utc), 'time_taken': 184140.0, 'time_delta': '2 days, 3:09:00', 'additions': 11, 'deletions': 35, 'state': 'closed'}, {'id': 633337194, 'number': 12752, 'closed': datetime.datetime(2021, 5, 12, 8, 31, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 7, 19, 49, 44, tzinfo=datetime.timezone.utc), 'time_taken': 391279.0, 'time_delta': '4 days, 12:41:19', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 628406767, 'number': 12702, 'closed': datetime.datetime(2021, 5, 5, 5, 16, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 1, 10, 20, 19, tzinfo=datetime.timezone.utc), 'time_taken': 327382.0, 'time_delta': '3 days, 18:56:22', 'additions': 57, 'deletions': 44, 'state': 'closed'}, {'id': 622275176, 'number': 12620, 'closed': datetime.datetime(2021, 5, 8, 4, 22, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 23, 19, 14, 21, tzinfo=datetime.timezone.utc), 'time_taken': 1242465.0, 'time_delta': '14 days, 9:07:45', 'additions': 131, 'deletions': 0, 'state': 'closed'}, {'id': 618374421, 'number': 12558, 'closed': datetime.datetime(2021, 5, 11, 21, 37, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 19, 19, 16, 53, tzinfo=datetime.timezone.utc), 'time_taken': 1909228.0, 'time_delta': '22 days, 2:20:28', 'additions': 982, 'deletions': 919, 'state': 'closed'}, {'id': 617321633, 'number': 12538, 'closed': datetime.datetime(2021, 4, 30, 4, 51, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 17, 15, 13, 38, tzinfo=datetime.timezone.utc), 'time_taken': 1085887.0, 'time_delta': '12 days, 13:38:07', 'additions': 175, 'deletions': 86, 'state': 'closed'}, {'id': 608715934, 'number': 12431, 'closed': datetime.datetime(2021, 4, 8, 18, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 5, 5, 40, 58, tzinfo=datetime.timezone.utc), 'time_taken': 305162.0, 'time_delta': '3 days, 12:46:02', 'additions': 9, 'deletions': 31, 'state': 'closed'}, {'id': 607867636, 'number': 12403, 'closed': datetime.datetime(2021, 4, 8, 8, 18, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 2, 7, 10, 18, tzinfo=datetime.timezone.utc), 'time_taken': 522516.0, 'time_delta': '6 days, 1:08:36', 'additions': 16, 'deletions': 7, 'state': 'closed'}, {'id': 599116511, 'number': 12308, 'closed': datetime.datetime(2021, 3, 28, 20, 55, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 23, 19, 17, 33, tzinfo=datetime.timezone.utc), 'time_taken': 437870.0, 'time_delta': '5 days, 1:37:50', 'additions': 77, 'deletions': 4, 'state': 'closed'}, {'id': 595339980, 'number': 12257, 'closed': datetime.datetime(2021, 3, 20, 18, 41, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 18, 8, 55, 33, tzinfo=datetime.timezone.utc), 'time_taken': 207952.0, 'time_delta': '2 days, 9:45:52', 'additions': 144, 'deletions': 45, 'state': 'closed'}, {'id': 588497042, 'number': 12144, 'closed': datetime.datetime(2021, 3, 17, 18, 28, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 9, 19, 16, 39, tzinfo=datetime.timezone.utc), 'time_taken': 688339.0, 'time_delta': '7 days, 23:12:19', 'additions': 562, 'deletions': 41, 'state': 'closed'}, {'id': 586027935, 'number': 12114, 'closed': datetime.datetime(2021, 3, 29, 19, 48, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 6, 8, 58, 18, tzinfo=datetime.timezone.utc), 'time_taken': 2026194.0, 'time_delta': '23 days, 10:49:54', 'additions': 138, 'deletions': 30, 'state': 'closed'}, {'id': 583878185, 'number': 12089, 'closed': datetime.datetime(2021, 3, 25, 7, 33, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 3, 11, 20, 14, tzinfo=datetime.timezone.utc), 'time_taken': 1887193.0, 'time_delta': '21 days, 20:13:13', 'additions': 352, 'deletions': 77, 'state': 'closed'}, {'id': 581291864, 'number': 12049, 'closed': datetime.datetime(2021, 3, 17, 5, 20, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 27, 8, 57, 52, tzinfo=datetime.timezone.utc), 'time_taken': 1542134.0, 'time_delta': '17 days, 20:22:14', 'additions': 237, 'deletions': 163, 'state': 'closed'}, {'id': 580631056, 'number': 12038, 'closed': datetime.datetime(2021, 3, 8, 14, 46, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 26, 6, 20, 6, tzinfo=datetime.timezone.utc), 'time_taken': 894409.0, 'time_delta': '10 days, 8:26:49', 'additions': 127, 'deletions': 29, 'state': 'closed'}, {'id': 576991590, 'number': 11989, 'closed': datetime.datetime(2021, 2, 23, 19, 45, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 20, 19, 5, 22, tzinfo=datetime.timezone.utc), 'time_taken': 261603.0, 'time_delta': '3 days, 0:40:03', 'additions': 15, 'deletions': 6, 'state': 'closed'}, {'id': 575455484, 'number': 11976, 'closed': datetime.datetime(2021, 2, 22, 4, 44, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 18, 7, 12, 47, tzinfo=datetime.timezone.utc), 'time_taken': 336729.0, 'time_delta': '3 days, 21:32:09', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 573047072, 'number': 11948, 'closed': datetime.datetime(2021, 2, 18, 4, 20, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 14, 6, 31, 48, tzinfo=datetime.timezone.utc), 'time_taken': 337719.0, 'time_delta': '3 days, 21:48:39', 'additions': 11, 'deletions': 1, 'state': 'closed'}, {'id': 569008606, 'number': 11873, 'closed': datetime.datetime(2021, 2, 17, 21, 39, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 7, 17, 8, 9, tzinfo=datetime.timezone.utc), 'time_taken': 880254.0, 'time_delta': '10 days, 4:30:54', 'additions': 35, 'deletions': 1, 'state': 'closed'}, {'id': 564636030, 'number': 11826, 'closed': datetime.datetime(2021, 2, 8, 18, 56, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 31, 11, 11, 55, tzinfo=datetime.timezone.utc), 'time_taken': 719096.0, 'time_delta': '8 days, 7:44:56', 'additions': 398, 'deletions': 304, 'state': 'closed'}, {'id': 551830551, 'number': 11637, 'closed': datetime.datetime(2021, 1, 9, 10, 20, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 8, 16, 26, 37, tzinfo=datetime.timezone.utc), 'time_taken': 64404.0, 'time_delta': '17:53:24', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 551237952, 'number': 11625, 'closed': datetime.datetime(2021, 1, 30, 20, 44, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 7, 18, 51, tzinfo=datetime.timezone.utc), 'time_taken': 1994022.0, 'time_delta': '23 days, 1:53:42', 'additions': 85, 'deletions': 108, 'state': 'closed'}, {'id': 546441251, 'number': 11534, 'closed': datetime.datetime(2021, 1, 5, 15, 52, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 12, 29, 11, 13, 22, tzinfo=datetime.timezone.utc), 'time_taken': 621525.0, 'time_delta': '7 days, 4:38:45', 'additions': 4, 'deletions': 4, 'state': 'closed'}, {'id': 544068406, 'number': 11467, 'closed': datetime.datetime(2021, 1, 29, 9, 14, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 12, 22, 11, 42, 15, tzinfo=datetime.timezone.utc), 'time_taken': 3274349.0, 'time_delta': '37 days, 21:32:29', 'additions': 1263, 'deletions': 592, 'state': 'closed'}, {'id': 542900635, 'number': 11444, 'closed': datetime.datetime(2020, 12, 21, 13, 22, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 12, 19, 9, 5, 1, tzinfo=datetime.timezone.utc), 'time_taken': 188237.0, 'time_delta': '2 days, 4:17:17', 'additions': 17, 'deletions': 10, 'state': 'closed'}, {'id': 531872316, 'number': 11318, 'closed': datetime.datetime(2020, 12, 12, 7, 38, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 12, 3, 15, 33, 47, tzinfo=datetime.timezone.utc), 'time_taken': 749064.0, 'time_delta': '8 days, 16:04:24', 'additions': 22, 'deletions': 6, 'state': 'closed'}, {'id': 524740491, 'number': 11224, 'closed': datetime.datetime(2020, 12, 2, 18, 36, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 11, 20, 14, 26, 18, tzinfo=datetime.timezone.utc), 'time_taken': 1051826.0, 'time_delta': '12 days, 4:10:26', 'additions': 53, 'deletions': 38, 'state': 'closed'}, {'id': 511495173, 'number': 11068, 'closed': datetime.datetime(2020, 11, 24, 20, 53, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 28, 12, 2, 34, tzinfo=datetime.timezone.utc), 'time_taken': 2364639.0, 'time_delta': '27 days, 8:50:39', 'additions': 42, 'deletions': 40, 'state': 'closed'}, {'id': 511358716, 'number': 11066, 'closed': datetime.datetime(2020, 10, 31, 9, 16, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 28, 8, 6, 1, tzinfo=datetime.timezone.utc), 'time_taken': 263428.0, 'time_delta': '3 days, 1:10:28', 'additions': 22, 'deletions': 21, 'state': 'closed'}, {'id': 508223326, 'number': 11028, 'closed': datetime.datetime(2020, 11, 14, 23, 27, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 22, 11, 35, 48, tzinfo=datetime.timezone.utc), 'time_taken': 2029900.0, 'time_delta': '23 days, 11:51:40', 'additions': 6, 'deletions': 1, 'state': 'closed'}, {'id': 507008304, 'number': 11017, 'closed': datetime.datetime(2020, 10, 29, 22, 17, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 20, 18, 26, 59, tzinfo=datetime.timezone.utc), 'time_taken': 791459.0, 'time_delta': '9 days, 3:50:59', 'additions': 6, 'deletions': 3, 'state': 'closed'}]"
