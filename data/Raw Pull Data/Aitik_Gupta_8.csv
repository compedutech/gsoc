pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
671276880,[Doc] Font Types and Font Subsetting,"## PR Summary
A new entry to User Guide - Fonts! (modelled after [interactive_guide](https://matplotlib.org/stable/users/interactive_guide.html))
#### All About Matplotlib and Fonts!
This document would contain everything Matplotlib knows about fonts, and is bootstrapped with the different types of fonts and font subsetting with this PR. This guide would especially be useful for issues related to font subsetting. (for eg., https://github.com/theislab/scanpy/issues/1720)

Also the first time we're mentioning anything about `'fonttypes'` in docs.

Related issues: https://github.com/matplotlib/matplotlib/issues/127

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [x] New features are documented, with examples if plot related.
- [x] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [x] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",True,20450,https://api.github.com/repos/matplotlib/matplotlib/pulls/20450,https://github.com/matplotlib/matplotlib/pull/20450,closed,131,0,2,7,7,30,1,0,[{'name': 'Documentation'}],2021-06-16 09:51:20+00:00,2021-07-13 14:10:07+00:00,2348327.0,"27 days, 4:18:47","[{'comment_id': 652739255, 'comment_body': 'This may oversimplify the matter a little - the Type 1 wrapper format is a restricted subset of PostScript but the glyph programs (""charstrings"") are in a bytecode format that is not really PostScript, although the operators are close to some PostScript operators. ', 'comment_created': datetime.datetime(2021, 6, 16, 14, 21, 24, tzinfo=datetime.timezone.utc), 'commenter': 'jkseppan', 'type': 'User'}, {'comment_id': 652770064, 'comment_body': 'The bytecode is only in the charstrings, the container format is either ASCII-based pfa or binary pfb, both of which contain a restricted subset of PostScript, some of it encrypted, and the PostScript includes the charstrings.', 'comment_created': datetime.datetime(2021, 6, 16, 14, 52, 37, tzinfo=datetime.timezone.utc), 'commenter': 'jkseppan', 'type': 'User'}, {'comment_id': 652774442, 'comment_body': 'The glyph programs can call subprograms, for example `√§` could be composed by calling the subprograms for `a` and `¬®`, or `‚Üí` could be composed by a program that changes the display matrix and calls the subprogram for `‚Üê`. So part of the problem is that the subsetter needs to find all the subprograms being called by the glyphs included in the subset.', 'comment_created': datetime.datetime(2021, 6, 16, 14, 57, 16, tzinfo=datetime.timezone.utc), 'commenter': 'jkseppan', 'type': 'User'}, {'comment_id': 654695987, 'comment_body': ""I see, I think this 'expressed in terms of' comparison can be removed?"", 'comment_created': datetime.datetime(2021, 6, 18, 22, 11, 34, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 654698774, 'comment_body': 'That was informative!\r\nAdded this bit üëçüèº ', 'comment_created': datetime.datetime(2021, 6, 18, 22, 23, 22, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 654828206, 'comment_body': 'Updated this bit', 'comment_created': datetime.datetime(2021, 6, 19, 18, 53, 49, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 656219235, 'comment_body': 'I\'m not sure this is ""very hard"" to subset, it\'s just a lot of work: it needs someone to understand the font format, build the implementation and test it. There are libraries like ttconv and fonttools that can do it, so it makes sense to use them. Likewise with Type 1, but neither of those two libraries helps us with it. Software like pdftex produces subsets of Type 1 fonts, but I don\'t think the TeX license is compatible with ours so we can\'t just extract the code from pdftex.', 'comment_created': datetime.datetime(2021, 6, 22, 13, 26, 16, tzinfo=datetime.timezone.utc), 'commenter': 'jkseppan', 'type': 'User'}, {'comment_id': 656250064, 'comment_body': ""I'm not sure that the consistency between backends or lack thereof is relevant here - we need to implement subsetting for vector backends only, and the graph search needed for subsetting is independent of the backend."", 'comment_created': datetime.datetime(2021, 6, 22, 13, 59, 4, tzinfo=datetime.timezone.utc), 'commenter': 'jkseppan', 'type': 'User'}, {'comment_id': 656252603, 'comment_body': 'A possible downside is that while the font metrics are standardized, different pdf consumer applications will have different fonts, so the document might look different on e.g. Windows and Linux, if the Linux tools include free versions of the proprietary fonts.', 'comment_created': datetime.datetime(2021, 6, 22, 14, 1, 43, tzinfo=datetime.timezone.utc), 'commenter': 'jkseppan', 'type': 'User'}, {'comment_id': 657561268, 'comment_body': 'Thanks! Added this', 'comment_created': datetime.datetime(2021, 6, 24, 1, 26, 40, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 657561325, 'comment_body': 'I reworded these points üëçüèº ', 'comment_created': datetime.datetime(2021, 6, 24, 1, 26, 54, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 657561402, 'comment_body': 'Reworded the points üëçüèº ', 'comment_created': datetime.datetime(2021, 6, 24, 1, 27, 13, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 658111423, 'comment_body': '```suggestion\r\nFonts in the Matplotlib text engine\r\n=========================\r\n\r\nUsers can configure the fonts used by Matplotlib to render text with the default engine.  Users\r\nusing TeX to render fonts (``usetex=True``) should consult `APPROPRIATE REFERENCE HERE`.\r\n\r\n```\r\n', 'comment_created': datetime.datetime(2021, 6, 24, 16, 36, 31, tzinfo=datetime.timezone.utc), 'commenter': 'jklymak', 'type': 'User'}, {'comment_id': 658112501, 'comment_body': '```suggestion\r\nFonts have a long and sometimes incompatible history in computing, leading to different platforms supporting different types of fonts.  \r\n```', 'comment_created': datetime.datetime(2021, 6, 24, 16, 38, 4, tzinfo=datetime.timezone.utc), 'commenter': 'jklymak', 'type': 'User'}, {'comment_id': 658112711, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 6, 24, 16, 38, 19, tzinfo=datetime.timezone.utc), 'commenter': 'jklymak', 'type': 'User'}, {'comment_id': 658113846, 'comment_body': '```suggestion\r\nThis can be achieved by embedding the *whole* font file within the\r\n```\r\n the embedding isn\'t ""virtual"" is it?', 'comment_created': datetime.datetime(2021, 6, 24, 16, 40, 4, tzinfo=datetime.timezone.utc), 'commenter': 'jklymak', 'type': 'User'}, {'comment_id': 658114337, 'comment_body': '```suggestion\r\noutput document. However, this can lead to very large documents, as font \r\nfiles can be quite large if they have many glyphs.\r\n```', 'comment_created': datetime.datetime(2021, 6, 24, 16, 40, 52, tzinfo=datetime.timezone.utc), 'commenter': 'jklymak', 'type': 'User'}, {'comment_id': 658114723, 'comment_body': '```suggestion\r\nFont subsetting embeds only the *required* glyphs within\r\n```', 'comment_created': datetime.datetime(2021, 6, 24, 16, 41, 23, tzinfo=datetime.timezone.utc), 'commenter': 'jklymak', 'type': 'User'}, {'comment_id': 658116039, 'comment_body': '```suggestion\r\nsubsetting glyphs. (however, recent versions have moved away from ttconv to pure\r\n```', 'comment_created': datetime.datetime(2021, 6, 24, 16, 43, 13, tzinfo=datetime.timezone.utc), 'commenter': 'jklymak', 'type': 'User'}, {'comment_id': 658811761, 'comment_body': 'Yep, added a slightly modified version of this üëçüèº ', 'comment_created': datetime.datetime(2021, 6, 25, 14, 33, 12, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 658811848, 'comment_body': 'üëçüèº ', 'comment_created': datetime.datetime(2021, 6, 25, 14, 33, 21, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 658812593, 'comment_body': ""Virtual in the sense that we don't directly embed the whole file, we embed glyph data in streams. (hence the word, virtual)"", 'comment_created': datetime.datetime(2021, 6, 25, 14, 34, 22, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 658818366, 'comment_body': 'Added a slight modification to this', 'comment_created': datetime.datetime(2021, 6, 25, 14, 42, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 658820264, 'comment_body': 'Actually, subsetting doesn\'t equate to embedding. We embed _after_ we subset, so \'font subsetting\' is a \'way\' to embed...\r\n(maybe ""Font Subsetting can be used to embed..."")', 'comment_created': datetime.datetime(2021, 6, 25, 14, 44, 31, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 658824458, 'comment_body': ""Changed it to 'font data', since all this isn't just for the glyphs but also for other metadata"", 'comment_created': datetime.datetime(2021, 6, 25, 14, 49, 45, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 660999405, 'comment_body': 'I agree with @jklymak that while we may be embedding a transformed version of the font, the ""Virtually"" here is more confusing that helpful.', 'comment_created': datetime.datetime(2021, 6, 29, 22, 14, 21, tzinfo=datetime.timezone.utc), 'commenter': 'tacaswell', 'type': 'User'}, {'comment_id': 661431025, 'comment_body': 'Ah okay, think I understand. Let me update üëçüèº ', 'comment_created': datetime.datetime(2021, 6, 30, 12, 41, 42, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 661585252, 'comment_body': 'Are there other ways to embed only the required glyphs, other than subsetting?  If not, then the phrase ""is a way"" is needlessly indirect and mysterious.  Perhaps you are trying to make a distinction here I dont understand?  ', 'comment_created': datetime.datetime(2021, 6, 30, 15, 28, 38, tzinfo=datetime.timezone.utc), 'commenter': 'jklymak', 'type': 'User'}, {'comment_id': 662673638, 'comment_body': ""Actually there's no connection of 'embedding' with 'subsetting', and I tried to make exactly that distinction.\r\n\r\n_With_ subsetting, the no. of glyphs are reduced, but at no point does it interfere with the 'embedding' part. Embedding is that dumb stage in the pipeline at which we can throw either a subsetted, or a non-subsetted font, and it will embed it in the document happily."", 'comment_created': datetime.datetime(2021, 7, 2, 1, 7, 57, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 662673956, 'comment_body': ""I've anyway changed it to:\r\n```\r\nFont Subsetting can be used before generating documents, to embed only the\r\n*required* glyphs within the documents.\r\n```"", 'comment_created': datetime.datetime(2021, 7, 2, 1, 9, 18, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}]","[{'commit_sha': '72a27f76e66ad739c90019d1a05132e5cf4a9975', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53fc27c8a7c1773430b2b0120ddad6e32762491c', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d8e5b2370546258def42b4571a77ddccdc7361f', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5999170bf06324eda05439d06eb244c57d984bd7', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c94923ea34e3636e9037de9a5034575f6952edbd', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '80b910a3a4f27a03ec833fd83a48873364ea5ca3', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a94f52121cea4194a5d6f6fc94eafdfb03394628', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}]",Aitik Gupta,43996118,aitikgupta@gmail.com,User,,59,,146,254
664960118,Type42 subsetting in PS/PDF,"## PR Summary
This PR is a fresh rebase from https://github.com/matplotlib/matplotlib/pull/18143.

- Adds a dependency: [`fonttools`](https://github.com/fonttools/fonttools) to handle font subsetting for us
  (we already have an external ttconv dependency, which does not handle subsetting)
- Interfaces a `getSubset` utility to get file-like objects containing subsetted font data

Possibly fixes https://github.com/matplotlib/matplotlib/issues/11303 (large file sizes)
Fixes https://github.com/matplotlib/matplotlib/issues/18191.

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [x] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [x] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [x] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",True,20391,https://api.github.com/repos/matplotlib/matplotlib/pulls/20391,https://github.com/matplotlib/matplotlib/pull/20391,closed,199,22,13,29,34,47,1,0,[{'name': 'topic: text/fonts'}],2021-06-08 14:16:19+00:00,2021-07-26 13:02:28+00:00,4142769.0,"47 days, 22:46:09","[{'comment_id': 651878749, 'comment_body': ""FT2Font can handle file objects too (things that have a read()), so you don't need to go through the filesystem; a BytesIO should be good enough (getSubset could even just return the BytesIO it creates internally)."", 'comment_created': datetime.datetime(2021, 6, 15, 14, 58, 40, tzinfo=datetime.timezone.utc), 'commenter': 'anntzer', 'type': 'User'}, {'comment_id': 651878941, 'comment_body': 'turn these into logs?', 'comment_created': datetime.datetime(2021, 6, 15, 14, 58, 52, tzinfo=datetime.timezone.utc), 'commenter': 'anntzer', 'type': 'User'}, {'comment_id': 651880231, 'comment_body': 'as above re: intermediate file.', 'comment_created': datetime.datetime(2021, 6, 15, 15, 0, 15, tzinfo=datetime.timezone.utc), 'commenter': 'anntzer', 'type': 'User'}, {'comment_id': 651910889, 'comment_body': 'I see, this can be done for PDF backend (however, see note on PS backend)', 'comment_created': datetime.datetime(2021, 6, 15, 15, 32, 56, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 651918789, 'comment_body': ""`convert_ttf_to_ps` takes a filepath as the first parameter, because read_font takes fontpath too:\r\nhttps://github.com/matplotlib/matplotlib/blob/d1567715f1913ce935462c408f02e70e6299b6cb/extern/ttconv/pprdrv_tt.cpp#L1223\r\n\r\nfor PDF backend we're not using this function, but here I think we need to? (unless there's a way around it)"", 'comment_created': datetime.datetime(2021, 6, 15, 15, 41, 33, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 651919513, 'comment_body': ""yeah, was waiting for a general review before changing the previous PR's contents"", 'comment_created': datetime.datetime(2021, 6, 15, 15, 42, 22, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 651922052, 'comment_body': 'I guess it may be worth seeing whether ttconv can be fixed to support filelikes as well, but this can be done later.', 'comment_created': datetime.datetime(2021, 6, 15, 15, 45, 13, tzinfo=datetime.timezone.utc), 'commenter': 'anntzer', 'type': 'User'}, {'comment_id': 651924950, 'comment_body': ""`read_font` it's being called from the below function (which is called by `convert_ttf_to_ps`): https://github.com/matplotlib/matplotlib/blob/d1567715f1913ce935462c408f02e70e6299b6cb/src/_ttconv.cpp#L132"", 'comment_created': datetime.datetime(2021, 6, 15, 15, 48, 34, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 651972301, 'comment_body': '> I guess it may be worth seeing whether ttconv can be fixed to support filelikes as well, but this can be done later.\r\n\r\nI added a TODO just before it', 'comment_created': datetime.datetime(2021, 6, 15, 16, 46, 39, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 653330259, 'comment_body': ""This is not a valid PEP8 name. Also, it's not a descriptive name; `matplotlib.backends._backend_pdf_ps.getSubset` does not really indicate what you're subsetting."", 'comment_created': datetime.datetime(2021, 6, 17, 8, 9, 35, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 653330606, 'comment_body': ""It's not public, but you should still try to use numpydoc."", 'comment_created': datetime.datetime(2021, 6, 17, 8, 10, 7, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 653331135, 'comment_body': 'Can this be used as a context manager instead?', 'comment_created': datetime.datetime(2021, 6, 17, 8, 10, 48, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 653332635, 'comment_body': 'Logging should usually use `%`.', 'comment_created': datetime.datetime(2021, 6, 17, 8, 12, 36, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 653337251, 'comment_body': 'This appears to require testing.', 'comment_created': datetime.datetime(2021, 6, 17, 8, 18, 47, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 653338074, 'comment_body': ""This minimum version needs to go in `requirements/testing/minver.txt` so it's actually tested."", 'comment_created': datetime.datetime(2021, 6, 17, 8, 19, 52, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 653341469, 'comment_body': 'Comment what `FFTM` is.', 'comment_created': datetime.datetime(2021, 6, 17, 8, 24, 19, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 654685273, 'comment_body': 'I changed the name to `get_glyphs_subset`', 'comment_created': datetime.datetime(2021, 6, 18, 21, 32, 51, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 654686102, 'comment_body': ""I added `Parameters` section, if that's what you meant?"", 'comment_created': datetime.datetime(2021, 6, 18, 21, 35, 29, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 654688358, 'comment_body': 'hmm, the tests still fail with `NoModuleFound` error even after adding it to minver.txt\r\nAny idea?', 'comment_created': datetime.datetime(2021, 6, 18, 21, 42, 51, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 654722282, 'comment_body': 'Yes, that will work.', 'comment_created': datetime.datetime(2021, 6, 19, 0, 19, 58, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 656210052, 'comment_body': 'probably better to stick to ascii in the logs just in case someone is printing these to an old-style windows cmd.exe which may not like that.', 'comment_created': datetime.datetime(2021, 6, 22, 13, 16, 2, tzinfo=datetime.timezone.utc), 'commenter': 'anntzer', 'type': 'User'}, {'comment_id': 656211790, 'comment_body': ""I suggest adding a unit test for this function: call the function with some font and some characters, read the output using FT2Font, check that the characters you want are in there and (some) characters you don't want are not in there."", 'comment_created': datetime.datetime(2021, 6, 22, 13, 18, 5, tzinfo=datetime.timezone.utc), 'commenter': 'jkseppan', 'type': 'User'}, {'comment_id': 656245864, 'comment_body': ""I don't think you need the seek() here."", 'comment_created': datetime.datetime(2021, 6, 22, 13, 54, 27, tzinfo=datetime.timezone.utc), 'commenter': 'anntzer', 'type': 'User'}, {'comment_id': 657544228, 'comment_body': ""Added a bunch of tests (not sure about what we _don't_ want in there though)"", 'comment_created': datetime.datetime(2021, 6, 24, 0, 30, 28, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 664346690, 'comment_body': ""Someone could see it as bad behaviour from a library if it modifies the logging configuration for another library. If this is about the unknown truetype table, I think it's fine to have our own list of dropped tables and add to it whenever someone complains about messages with a new font."", 'comment_created': datetime.datetime(2021, 7, 6, 8, 28, 49, tzinfo=datetime.timezone.utc), 'commenter': 'jkseppan', 'type': 'User'}, {'comment_id': 664398243, 'comment_body': ""That makes sense.\r\nI'll fix this in the next commit"", 'comment_created': datetime.datetime(2021, 7, 6, 9, 36, 14, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 665629388, 'comment_body': 'I think we should add a `tmp.flush()` to avoid a race condition between the content being written out and `convert_ttf_to_ps()` reading it back. ', 'comment_created': datetime.datetime(2021, 7, 7, 18, 54, 29, tzinfo=datetime.timezone.utc), 'commenter': 'sauerburger', 'type': 'User'}, {'comment_id': 667285665, 'comment_body': ""I was under the impression that Python interpreter will only move to the next line once the `write` is complete?\r\n\r\nSeems like `.flush()` 'clears out the internal buffer of the file', which is still in memory here, but once we've written it out on disk, could a race condition still exist?\r\n\r\n(asking totally on the learning side here, I can add this in my next commit)"", 'comment_created': datetime.datetime(2021, 7, 10, 4, 0, 54, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 667317719, 'comment_body': 'Write operations on a file object in Python are usually [buffered](https://docs.python.org/3/library/functions.html#open) with a [default buffer size](https://docs.python.org/3/library/io.html#io.DEFAULT_BUFFER_SIZE) of 4KiB or 8KiB. Calling `flush()` ensures that another process can read back the content, [see](https://stackoverflow.com/questions/7127075/what-exactly-is-pythons-file-flush-doing). The OS might still buffer and delay the write operation to the physical disk for performance reasons. This is completely transparent to user programs. To ensure that the data is permanently written to disk and persisted in case of a system crash, you could call `fsync()` but this is not necessary in this case.', 'comment_created': datetime.datetime(2021, 7, 10, 9, 41, 57, tzinfo=datetime.timezone.utc), 'commenter': 'sauerburger', 'type': 'User'}, {'comment_id': 667410978, 'comment_body': 'Thank you so much for a detailed answer! (that SO link was an amazing and insightful read)\r\n', 'comment_created': datetime.datetime(2021, 7, 11, 2, 35, 55, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 667420727, 'comment_body': 'I think this is an assertion that a warning is raised, which will probably break when a future version of fonttools fixes the code that causes the warning. A suitable [filterwarnings setting](https://docs.pytest.org/en/6.2.x/warnings.html#deprecationwarning-and-pendingdeprecationwarning) in pytest.ini would let us ignore fonttools specific warnings.', 'comment_created': datetime.datetime(2021, 7, 11, 4, 41, 3, tzinfo=datetime.timezone.utc), 'commenter': 'jkseppan', 'type': 'User'}, {'comment_id': 667420949, 'comment_body': ""Shouldn't we require strict inequality here? We specifically want to exclude a lot of glyphs."", 'comment_created': datetime.datetime(2021, 7, 11, 4, 42, 53, tzinfo=datetime.timezone.utc), 'commenter': 'jkseppan', 'type': 'User'}, {'comment_id': 667421309, 'comment_body': 'This looks to me like the comment is contradicting the code. `set(chars)` is the set of characters we want to be available, so it should be a subset (not superset) of the set of characters available in the reduced font.', 'comment_created': datetime.datetime(2021, 7, 11, 4, 48, 9, tzinfo=datetime.timezone.utc), 'commenter': 'jkseppan', 'type': 'User'}, {'comment_id': 667421524, 'comment_body': ""... but since the test passes, I wonder what's going on. Could you check what the sets on both sides of the `.issuperset` operation actually are? I wonder if there's a bug that makes the right-hand set be empty."", 'comment_created': datetime.datetime(2021, 7, 11, 4, 50, 41, tzinfo=datetime.timezone.utc), 'commenter': 'jkseppan', 'type': 'User'}, {'comment_id': 667671667, 'comment_body': 'Even after adding this to `pytest.ini`, this failed.\r\nHowever, adding it to `lib/matplotlib/testing/conftest/py` worked.', 'comment_created': datetime.datetime(2021, 7, 12, 6, 57, 43, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 667675426, 'comment_body': 'Testing with font files that are _already_ subsetted with certain characters, the strict equality would fail.\r\n\r\nOr for fonts that cannot be subsetted at all.', 'comment_created': datetime.datetime(2021, 7, 12, 7, 4, 56, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 667705854, 'comment_body': ""Although the left and the right sides are valid (they print the set of characters):\r\n```console\r\n{'o', 'b', 'd', 's', ' ', '!', 'u', 'h', 'e', 't', 'l'}\r\n```\r\nIt seems LHS is equal to RHS, which is why the tests pass. I agree it should be `.subset()`. (though I'm not able to recall why I put superset in the first place :/)"", 'comment_created': datetime.datetime(2021, 7, 12, 7, 53, 53, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 668749777, 'comment_body': '^^ change stuff according to above comment', 'comment_created': datetime.datetime(2021, 7, 13, 13, 12, 54, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 668749929, 'comment_body': 'The DejavuSerif.ttf we distribute is not subsetted, so it should get much smaller.', 'comment_created': datetime.datetime(2021, 7, 13, 13, 13, 4, tzinfo=datetime.timezone.utc), 'commenter': 'jkseppan', 'type': 'User'}, {'comment_id': 668754775, 'comment_body': '^^ Change to equality testing', 'comment_created': datetime.datetime(2021, 7, 13, 13, 18, 30, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 668754792, 'comment_body': ""This could be `set(chars) == set(chr(key) for key in subcmap.keys())` because in this particular case the set will be equal. There are other cases in which it would be a subset, such as if `√§` is built from `a` and `¬®` but that's not the case here."", 'comment_created': datetime.datetime(2021, 7, 13, 13, 18, 31, tzinfo=datetime.timezone.utc), 'commenter': 'jkseppan', 'type': 'User'}, {'comment_id': 670732116, 'comment_body': '```suggestion\r\n    assert len(subcmap) < len(nosubcmap)\r\n```', 'comment_created': datetime.datetime(2021, 7, 15, 19, 0, 58, tzinfo=datetime.timezone.utc), 'commenter': 'jkseppan', 'type': 'User'}, {'comment_id': 671724456, 'comment_body': 'Done üëçüèº ', 'comment_created': datetime.datetime(2021, 7, 17, 17, 42, 35, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 671724485, 'comment_body': 'Fixed this üëçüèº ', 'comment_created': datetime.datetime(2021, 7, 17, 17, 42, 50, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 674659004, 'comment_body': '```suggestion\r\nis now required for Maptlotlib 3.5.\r\n```', 'comment_created': datetime.datetime(2021, 7, 22, 9, 58, 4, tzinfo=datetime.timezone.utc), 'commenter': 'jkseppan', 'type': 'User'}, {'comment_id': 674659356, 'comment_body': 'I think  the wording ""is integrated in with"" could be read to mean that we ship a vendored copy of the library.', 'comment_created': datetime.datetime(2021, 7, 22, 9, 58, 31, tzinfo=datetime.timezone.utc), 'commenter': 'jkseppan', 'type': 'User'}, {'comment_id': 677840639, 'comment_body': ""The context manager calls `.close`, which flushes the buffer; there's no need for an explicit `.flush` here (at least in how the code ended up as merged.)"", 'comment_created': datetime.datetime(2021, 7, 27, 22, 22, 29, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}]","[{'commit_sha': 'fc59f3529c07974eaca3c8613d5d7c1cba91a0ae', 'committer_username': 'jkseppan', 'committer_name': 'Jouni K. Sepp√§nen', 'committer_email': 'jks@iki.fi', 'commit_date': datetime.datetime(2009, 6, 7, 12, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a632b256b560169761ac0d6bcab502f32b503fae', 'committer_username': 'jkseppan', 'committer_name': 'Jouni K. Sepp√§nen', 'committer_email': 'jks@iki.fi', 'commit_date': datetime.datetime(2009, 6, 7, 12, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '501b30e42f282419bb4993b22b22f44e7d624190', 'committer_username': 'jkseppan', 'committer_name': 'Jouni K. Sepp√§nen', 'committer_email': 'jks@iki.fi', 'commit_date': datetime.datetime(2009, 6, 7, 12, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5d527ae88099946c5c71c0d6b4608524f1df032', 'committer_username': 'jkseppan', 'committer_name': 'Jouni K. Sepp√§nen', 'committer_email': 'jks@iki.fi', 'commit_date': datetime.datetime(2009, 6, 7, 12, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8493184838d4beadb61894621f1af95a6530e323', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b61744be90af2c48698e68c3af93ea1dd45910a1', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44739429644caa5a0e6db22a35c210dcac3d99e2', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '24219b9e3a24de05690f9214e823abd7fc29d71e', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '525760ec1cfa06a82c42394a2403b22f7dc2e68f', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d751175e82a363121bc644db66bbd85d5069424', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5eebbb8d35f42365ce92c153e57a39698a6d4fb', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '91417cde7ff2b5af5a365d5e0e4618def360fa42', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aca3bb53286a80d0dfe35361f25e254bc3176171', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '265a563afe83cb71768d45dbcbdc7150ac30fc80', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2193caa5c1f5780339ccee6b6def0c005be57d14', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5661f0d56ca074258066328a7048c92bb32949eb', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0d766fe3e39f2615fa5b1d34c1c162316fac649', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ea7f1bea766ca2f44c0323aa909e4880d903ec0', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17873f392d44bd9dd73939d3fddb196dd6e6f105', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9837733de6474c877ea825c7e4aeadbbe970e6d5', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5097311c2238e9dc758acacd18c744bebd10c71', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a362601c934f3bd1eabd3c234d7870d19d99ac06', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57267a3187b4a08b30c0c63705b7328d029c4bd7', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7571055ea1160ff33e4cb2e7415962da616fef62', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1630ad90d11d1c5c718f3adb80229b2b35d42043', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa197d2dc9a15df2fa03da69ab7aa193a4c80c8f', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe583dd2f8e46985b221b7860e746a923602e65c', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a95f2b6a4aba5be1bb6faf65f77189906c2b96a9', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '85f4377181609f3b705de69cd8dbd12aef75c73a', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}]",Aitik Gupta,43996118,aitikgupta@gmail.com,User,,59,,146,254
676302803,[with findfont diff] Parsing all families in font_manager,"## PR Summary
#### This is the beginning of migrating from Matplotlib's ""Font-First"" approach to a ""Text-First"" approach.

The very first step is to parse all families in font manager. Previously, we only parsed families until we find a font file, and the rest of the backends are accustomed to just a single font file (which needs changing)

I'm _hoping_ this breaks many tests, so as to know exactly what to fix at other places.

- Change the return signature of `findfont`, from simple 'str' to 'OrderedDict'
- This OrderedDict would contain fonts defined by `font.family`
    - which are present on the system
    - but also append ""fallback fonts"" in the end. (which is triggered if a certain font family is not found in the system)
 
I've added a bunch of To-Dos (future PRs) and some fixes at some places.
## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [x] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [x] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [x] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",False,20496,https://api.github.com/repos/matplotlib/matplotlib/pulls/20496,https://github.com/matplotlib/matplotlib/pull/20496,closed,86,20,11,15,6,2,0,0,[],2021-06-23 13:43:54+00:00,2022-08-09 21:56:46+00:00,35626372.0,"412 days, 8:12:52","[{'comment_id': 663528717, 'comment_body': ""I don't think you need `.keys()`?"", 'comment_created': datetime.datetime(2021, 7, 4, 16, 40, 51, tzinfo=datetime.timezone.utc), 'commenter': 'jklymak', 'type': 'User'}, {'comment_id': 663557910, 'comment_body': ""ah that's right, I was probably searching for findfont usages within mpl and happen to change this eagerly."", 'comment_created': datetime.datetime(2021, 7, 4, 21, 19, 22, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}]","[{'commit_sha': 'b715ddb39340129a5684d1a53b44d5804c0a800e', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b58d1603ead6079aa4ff3734fee61e5b403f9bc', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1235063bd1609754540dec73343c99aeb3979391', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df939d55e4879bbfb8f9d81da48a84f7361aa976', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5215f1f16167350e433a1287d1b7c174b1f99e95', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc8e5ee57a4edc717c02bfbe9e232d64eb21e32f', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb43b67b859b5377dd05a15f4f7d6f2072b3f80b', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4aa661d4d1fc2fe0af03656861cfec097bfb5860', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af4cef6b69d5b244fa941e947d791e2ab135a578', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d7883167e82e70473e2454e426f43b60ca97354', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a2da73d280002058858e36d99f33ea426cf4f516', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb8c80a7519f086fdc36ef45f8e2efe4985b9e7c', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '804a4571f43be0f8bf5e60bc1b82c98c423e89c7', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1dd195cf38afe2c6d8a396015cf4c9b58a8883be', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c4c4100f7619de8a064dab6a6aa9356195155b0', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}]",Aitik Gupta,43996118,aitikgupta@gmail.com,User,,59,,146,254
680664597,[without findfont diff] Parsing all families in font_manager,"## PR Summary
#### Short Note:
This is a newer and more dynamic approach than https://github.com/matplotlib/matplotlib/pull/20496, which changed findfont's API, thus breaking a lot of backends.
A much more flexible approach would be to gradually move the different backends to `find_fontsprop` instead of `findfont`, since the new function is built _over_ the existing API and acts as a middleware.

#### Quoting previous PR:
This is the beginning of migrating from Matplotlib's ""Font-First"" approach to a ""Text-First"" approach.
The very first step is to parse all families in font manager. Previously, we only parsed families until we find a font file, and the rest of the backends are accustomed to just a single font file (which needs changing)

---
OrderedDict would contain fonts defined by font.family
- which are present on the system
- but also append ""fallback fonts"" in the end. (which is triggered if a certain font family is not found in the system)## PR Checklist

---
<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",False,20549,https://api.github.com/repos/matplotlib/matplotlib/pulls/20549,https://github.com/matplotlib/matplotlib/pull/20549,closed,180,7,3,8,5,25,0,0,[],2021-06-30 08:56:35+00:00,2022-08-15 00:28:47+00:00,35479932.0,"410 days, 15:32:12","[{'comment_id': 667423994, 'comment_body': ""A lot of the matplotlib code is written in a typical Java/C++ style with setters and getters, but I don't think it's necessarily a good way to design Python code. Why not just use `x.families` and `x.filepaths` directly? If it's important that they are not modified after creation, make them tuples so that calling code cannot accidentally append or delete items."", 'comment_created': datetime.datetime(2021, 7, 11, 5, 20, 21, tzinfo=datetime.timezone.utc), 'commenter': 'jkseppan', 'type': 'User'}, {'comment_id': 667424275, 'comment_body': 'A simpler way to write this function:\r\n\r\n```\r\nself.families, self.filepaths = zip(*ordered_family.items())\r\n```\r\n', 'comment_created': datetime.datetime(2021, 7, 11, 5, 23, 6, tzinfo=datetime.timezone.utc), 'commenter': 'jkseppan', 'type': 'User'}, {'comment_id': 667424711, 'comment_body': 'Here would be a great place to add a docstring. Assume the reader doesn\'t know what this class is for - ""FontsInterface"" is quite generic. It doesn\'t have to be long, just a couple sentences about why there is this class and what you could do with it.', 'comment_created': datetime.datetime(2021, 7, 11, 5, 28, 26, tzinfo=datetime.timezone.utc), 'commenter': 'jkseppan', 'type': 'User'}, {'comment_id': 667424952, 'comment_body': 'Again, a docstring would help understand the design. ', 'comment_created': datetime.datetime(2021, 7, 11, 5, 30, 56, tzinfo=datetime.timezone.utc), 'commenter': 'jkseppan', 'type': 'User'}, {'comment_id': 667425435, 'comment_body': ""There is otherwise a nice symmetry between the two code blocks but one updates `fpaths` via assignment and the other updates `fbpaths` via the `update` method. It seems to me they do the same thing, so perhaps this could use assignment as well? It's not a big thing but it catches the eye when scanning the code.\r\n\r\nA completely different question: isn't `self.defaultFamily[fontext]` going to be constant throughout the function, so the fallback dict will always have at most one element? If that is the intended result, perhaps it doesn't need to be called inside the loop but just appended after the loop."", 'comment_created': datetime.datetime(2021, 7, 11, 5, 36, 3, tzinfo=datetime.timezone.utc), 'commenter': 'jkseppan', 'type': 'User'}, {'comment_id': 667425556, 'comment_body': 'Is the `fallback_to_default` argument used at all?', 'comment_created': datetime.datetime(2021, 7, 11, 5, 37, 23, tzinfo=datetime.timezone.utc), 'commenter': 'jkseppan', 'type': 'User'}, {'comment_id': 667425925, 'comment_body': 'You can remove the brackets and will likely even improve the performance ever so slightly: `[f(x) for x in y]` creates a list, `(f(x) for x in y)` a generator that you then feed to the `tuple` function.', 'comment_created': datetime.datetime(2021, 7, 11, 5, 41, 50, tzinfo=datetime.timezone.utc), 'commenter': 'jkseppan', 'type': 'User'}, {'comment_id': 667425983, 'comment_body': '`(_cached_realpath(filename),)` is the conventional (if ugly) Python syntax for a one-element tuple.', 'comment_created': datetime.datetime(2021, 7, 11, 5, 42, 25, tzinfo=datetime.timezone.utc), 'commenter': 'jkseppan', 'type': 'User'}, {'comment_id': 667754489, 'comment_body': ""That makes sense, this class was designed on similar terms to other such public classes, but we don't really want a user to modify these after creation, so it makes sense to keep them as tuples (and possibly make them private?)"", 'comment_created': datetime.datetime(2021, 7, 12, 9, 3, 15, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 667756017, 'comment_body': 'thanks!', 'comment_created': datetime.datetime(2021, 7, 12, 9, 5, 33, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 667756296, 'comment_body': ""Right, I'll add it in the next commits üëçüèº "", 'comment_created': datetime.datetime(2021, 7, 12, 9, 5, 58, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 667766750, 'comment_body': ""The second question is in sync with the first one (and kind of answers it too).\r\nThe 'fallback paths' (or `fbpaths`) mostly have the same path (DejaVu Sans) for each family, so, we don't really have to append it multiple times, rather keep changing the same entry. (note it doesn't necessarily have to be DejaVu Sans for each family, but the way `findfont` works right now is to directly get `defaultFamily` for non-found-family)\r\n"", 'comment_created': datetime.datetime(2021, 7, 12, 9, 20, 8, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 667770819, 'comment_body': ""> A completely different question: isn't self.defaultFamily[fontext] going to be constant throughout the function, so the fallback dict will always have at most one element?\r\n\r\nYes on the first part, but no for the latter part. Fallback dict will only exist if one of the font-families were not found while parsing the list.\r\n\r\n> If that is the intended result, perhaps it doesn't need to be called inside the loop but just appended after the loop.\r\n\r\nThat's true, but currently there's no way to find if there was a fallback, because `findfont` calls `findfont` if fallback_to_default is True, see:\r\nhttps://github.com/matplotlib/matplotlib/blob/c160470aa19263210be00bd22e6940007c6defe4/lib/matplotlib/font_manager.py#L1403-L1416\r\n"", 'comment_created': datetime.datetime(2021, 7, 12, 9, 25, 50, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 667774922, 'comment_body': ""We could add a Try Except clause, but that would mean that the `ValueError` inside `findfont` will never be triggered:\r\n\r\nIterate through the list, call `findfont()` with `fallback_to_default` as False for each. We'll resort to Try Except clause and if a font family is not found, we'll assign a default fallback value and append it at the end of the loop."", 'comment_created': datetime.datetime(2021, 7, 12, 9, 31, 35, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 667777233, 'comment_body': ""I think we'll also have to handle the code block I sent in the previous comment.\r\n\r\nIn a general sense, I designed this to be as less invasive to original API as I could, since it's being used at a lot of places and I didn't want to disturb their workflow."", 'comment_created': datetime.datetime(2021, 7, 12, 9, 34, 57, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 667778810, 'comment_body': ""I think I've covered most of it in the above comment, but to be specific:\r\n\r\nPreviously, `fallback_to_default` was useful since if a font family wasn't found, it would just fallback to default and be done with the parsing. (wouldn't touch the leftover families)\r\n\r\nBut that had to change, to at least parse every item in the list."", 'comment_created': datetime.datetime(2021, 7, 12, 9, 37, 9, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 667779146, 'comment_body': 'makes sense! üëçüèº ', 'comment_created': datetime.datetime(2021, 7, 12, 9, 37, 34, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 667779626, 'comment_body': ""I see, then we wouldn't need the `tuple(...)` anymore. I'll change this üëçüèº "", 'comment_created': datetime.datetime(2021, 7, 12, 9, 38, 14, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 671863040, 'comment_body': 'Removed this class altogether now..', 'comment_created': datetime.datetime(2021, 7, 18, 15, 59, 2, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 671863058, 'comment_body': '^^same as above', 'comment_created': datetime.datetime(2021, 7, 18, 15, 59, 18, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 671863084, 'comment_body': 'Added this bit üëçüèº ', 'comment_created': datetime.datetime(2021, 7, 18, 15, 59, 32, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 671863188, 'comment_body': 'Simplified the logic according to this discussion..', 'comment_created': datetime.datetime(2021, 7, 18, 16, 0, 27, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 673146192, 'comment_body': 'We aim for the writing in the docs to be more formal.\r\n\r\n[We also discussed this on the phone]', 'comment_created': datetime.datetime(2021, 7, 20, 13, 55, 40, tzinfo=datetime.timezone.utc), 'commenter': 'tacaswell', 'type': 'User'}, {'comment_id': 673148939, 'comment_body': 'We talked on the phone about renaming this.  The should invoke that is is going at a) find multiple fonts b) that the order of the returned fonts matters.', 'comment_created': datetime.datetime(2021, 7, 20, 13, 58, 48, tzinfo=datetime.timezone.utc), 'commenter': 'tacaswell', 'type': 'User'}, {'comment_id': 674982860, 'comment_body': 'Some suggestions:\r\n1. `find_fonts`\r\n2. `find_orderedfonts`\r\n3. `find_fontsdict`\r\n4. `find_fontorder`\r\n5. `find_fontset`\r\n6. `find_fontfamilies`\r\n7. `find_orderedfamily`\r\n8. `find_familyordered`\r\n9. `find_families`\r\n10. `find_fontfamilies`', 'comment_created': datetime.datetime(2021, 7, 22, 16, 49, 12, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}]","[{'commit_sha': 'e8775335a67b6ebac3f745086d166e0bc54bc9f2', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc2fb2bc08e19da04753f35c865533c5cd341049', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '778de1feea008c95651f78a5134641b8a92b8c75', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f3f41077c5268eb36bd3e97042aec570f4d3ad7', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ffc56efa3899cc61b4b025c55aef7dc15eae594', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aaf0b0a782245598b07d6eaa878dc2e42b9a73e9', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42fcf0175f87c60c89d4d31197f508f637cd2ae1', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b5ea77b45c09ba6def6c391336da131ef5f4abd', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}]",Aitik Gupta,43996118,aitikgupta@gmail.com,User,,59,,146,254
696573446,Implement Font-Fallback in Matplotlib,"## PR Summary
This PR modifies the internal structure of `FT2Font` (the interface between fonts and Matplotlib) in favor of implementing [Font Fallback](https://www.w3schools.com/css/css_font_fallbacks.asp) for Matplotlib, and allow Agg backend to use the new codepath.
It builds on the previous PR: https://github.com/matplotlib/matplotlib/pull/20549, which was the 'first-step', i.e., ""parsing multiple families"".. this PR implements _using_ those families for font fallback.

This would help us in multi-language support, for example (Previous / After):
<p float=""left"" align=""middle"">
  <img src=""https://user-images.githubusercontent.com/43996118/128605750-9d76fa4a-ce57-45c6-af23-761334d48ef7.png"" width=""45%"" />
  <img src=""https://user-images.githubusercontent.com/43996118/128605746-9f79ebeb-c03d-407e-9e27-c3203a210908.png"" width=""45%"" />
</p>

^the fonts are chosen such that the difference is visually noticeable.

A flowchart explaining the text rendering algorithm with font fallback:
![FontFallback](https://user-images.githubusercontent.com/43996118/129720023-14f5d67f-f279-433f-ad78-e5eccb6c784a.png)

Here's the script:
```python
import matplotlib.pyplot as plt
# ""Authentic"" is a fancy font, whereas ""SimHei"" is a CJK font
plt.rcParams['font.family'] = ['Authentic', 'SimHei']
plt.rcParams['font.size'] = 30

plt.figtext(0.18, 0.45, ""There are Â§ö‰∏™Ê±âÂ≠ó in between!"")
plt.show()
```

Fixes https://github.com/matplotlib/matplotlib/issues/18883, https://github.com/matplotlib/matplotlib/issues/15260

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [x] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [x] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [x] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",True,20740,https://api.github.com/repos/matplotlib/matplotlib/pulls/20740,https://github.com/matplotlib/matplotlib/pull/20740,closed,630,110,10,1,48,135,3,0,"[{'name': 'Release critical'}, {'name': 'backend: agg'}, {'name': 'topic: text/fonts'}]",2021-07-25 22:25:22+00:00,2022-08-04 19:34:14+00:00,32389732.0,"374 days, 21:08:52","[{'comment_id': 730143117, 'comment_body': 'Not sure about the name, maybe `find_fonts_with_props`, `find_fonts_by_props`, maybe spell out `properties`.', 'comment_created': datetime.datetime(2021, 10, 15, 21, 52, 10, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 730144730, 'comment_body': 'I think we usually call it `props`\r\n```suggestion\r\n        props : str or `~matplotlib.font_manager.FontProperties`\r\n```', 'comment_created': datetime.datetime(2021, 10, 15, 21, 56, 36, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 730203347, 'comment_body': ""I don't know what you mean by plugin."", 'comment_created': datetime.datetime(2021, 10, 16, 3, 28, 34, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 730203490, 'comment_body': 'You have no need for the index.\r\n```suggestion\r\n        for family in props.get_family():\r\n```', 'comment_created': datetime.datetime(2021, 10, 16, 3, 29, 59, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 730203702, 'comment_body': '`set_family` returns `None`, not the new `FontProperties` object.', 'comment_created': datetime.datetime(2021, 10, 16, 3, 31, 55, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 730203987, 'comment_body': ""I'm not sure this provides any benefit over calling `_findfont_cached` directly? I see there's a cache here, but does it really help over the one on `_findfont_cached`?"", 'comment_created': datetime.datetime(2021, 10, 16, 3, 35, 1, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 730204208, 'comment_body': 'Should be a list comprehension\r\n```suggestion\r\n    ftobjects = [\r\n        ftobject = ft2font.FT2Font(\r\n            fpath, hinting_factor,\r\n            _kerning_factor=_kerning_factor\r\n        )\r\n        for fpath in fpaths[1:]\r\n    ]\r\n```\r\nMaybe can be inlined in the 0-th call too.', 'comment_created': datetime.datetime(2021, 10, 16, 3, 37, 32, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 730204401, 'comment_body': ""It requires some testing, but I'm not sure if it's better for caching purposes to take/return multiple values here, or to do the looping in `get_font`."", 'comment_created': datetime.datetime(2021, 10, 16, 3, 39, 26, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 730204491, 'comment_body': ""Not sure this is the correct file for this; shouldn't it be in something like `test_font_manager.py`?"", 'comment_created': datetime.datetime(2021, 10, 16, 3, 40, 38, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 730204743, 'comment_body': 'Break after type\r\n```suggestion\r\nstatic FT_UInt\r\nft_get_char_index_or_warn(FT_Face face, FT_ULong charcode, bool warn = true)\r\n```', 'comment_created': datetime.datetime(2021, 10, 16, 3, 42, 40, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 730204862, 'comment_body': 'Always add braces.', 'comment_created': datetime.datetime(2021, 10, 16, 3, 43, 50, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 730204930, 'comment_body': '```suggestion\r\n    for (size_t i = 0; i < fallbacks.size(); i++) {\r\n```', 'comment_created': datetime.datetime(2021, 10, 16, 3, 45, 2, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 730204950, 'comment_body': '```suggestion\r\n    for (size_t i = 0; i < fallbacks.size(); i++) {\r\n```', 'comment_created': datetime.datetime(2021, 10, 16, 3, 45, 14, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 730205032, 'comment_body': 'This is only called in the constructor; is there any benefit to the extra method?', 'comment_created': datetime.datetime(2021, 10, 16, 3, 46, 23, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 730205441, 'comment_body': '```suggestion\r\n    for (size_t i = 0; i < fallbacks.size(); i++) {\r\n```', 'comment_created': datetime.datetime(2021, 10, 16, 3, 50, 17, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 774366312, 'comment_body': ""I'm not sure why you need another variable?"", 'comment_created': datetime.datetime(2021, 12, 23, 7, 14, 47, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 774367658, 'comment_body': 'What tofu specifically? Is it the hex code in a box glyph, or the replacement/missing glyph?', 'comment_created': datetime.datetime(2021, 12, 23, 7, 17, 59, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 774368734, 'comment_body': ""It's multiplying by 64 though..."", 'comment_created': datetime.datetime(2021, 12, 23, 7, 20, 42, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 774368899, 'comment_body': 'Coverage seems to think this is not used?', 'comment_created': datetime.datetime(2021, 12, 23, 7, 21, 11, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 774369828, 'comment_body': '```suggestion\r\n    for (size_t n = 0; n < N; n++) {\r\n```', 'comment_created': datetime.datetime(2021, 12, 23, 7, 23, 28, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 774370023, 'comment_body': ""Again, don't see why we need both `glyph_index` and `final_glyph_index`."", 'comment_created': datetime.datetime(2021, 12, 23, 7, 23, 57, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 774370143, 'comment_body': 'Add braces.', 'comment_created': datetime.datetime(2021, 12, 23, 7, 24, 14, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 774371046, 'comment_body': ""I didn't follow all the caching yet, but is this a permanent change? That is, if you load some text, then load similar text, will the glyph be pulled from the cache and then the second time get both transforms applied?"", 'comment_created': datetime.datetime(2021, 12, 23, 7, 26, 16, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 774373140, 'comment_body': ""Add braces. Coverage says these are untested, I guess we need 'broken' fonts to really check this?"", 'comment_created': datetime.datetime(2021, 12, 23, 7, 31, 12, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 774374645, 'comment_body': 'Should you check this before `FT_Get_Glyph`, or is it safe if `FT_Load_Glyph` has already failed?', 'comment_created': datetime.datetime(2021, 12, 23, 7, 34, 43, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 774375151, 'comment_body': '```suggestion\r\n        for (size_t i = 0; i < fallbacks.size(); ++i) {\r\n```', 'comment_created': datetime.datetime(2021, 12, 23, 7, 36, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 774375532, 'comment_body': 'Coverage is complaining; are there really no tests for fallbacks?', 'comment_created': datetime.datetime(2021, 12, 23, 7, 36, 59, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 774375620, 'comment_body': 'Add braces.', 'comment_created': datetime.datetime(2021, 12, 23, 7, 37, 12, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 774376465, 'comment_body': ""This is only called once, and then there's another time with `FT_Glyph_Get_CBox` directly; do we need the extra function or is the other time wrong?"", 'comment_created': datetime.datetime(2021, 12, 23, 7, 39, 1, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 774379181, 'comment_body': 'What happened to the `typedef`?', 'comment_created': datetime.datetime(2021, 12, 23, 7, 45, 2, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 774380735, 'comment_body': '```suggestion\r\n        for (Py_ssize_t i = 0; i < size; ++i) {\r\n```', 'comment_created': datetime.datetime(2021, 12, 23, 7, 48, 8, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 774381224, 'comment_body': ""This doesn't appear to be saved in the compiled class, so why increment?"", 'comment_created': datetime.datetime(2021, 12, 23, 7, 49, 3, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 774381741, 'comment_body': 'But you _are_ holding on to the items, so you should ref those?', 'comment_created': datetime.datetime(2021, 12, 23, 7, 50, 1, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 774382078, 'comment_body': 'Is this supposed to be parsed as an argument from Python?', 'comment_created': datetime.datetime(2021, 12, 23, 7, 50, 45, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 774385523, 'comment_body': ""I'm not sure why this function can't accept a `std::vector`?"", 'comment_created': datetime.datetime(2021, 12, 23, 7, 57, 50, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 774391089, 'comment_body': ""But it's a `PyObject*`?"", 'comment_created': datetime.datetime(2021, 12, 23, 8, 9, 4, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 774392204, 'comment_body': ""But it's a `PyObject*`?"", 'comment_created': datetime.datetime(2021, 12, 23, 8, 11, 7, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 774392916, 'comment_body': ""But it's a `PyObject*`?"", 'comment_created': datetime.datetime(2021, 12, 23, 8, 12, 36, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 774393772, 'comment_body': 'Did you mean to pass `fallback` here?', 'comment_created': datetime.datetime(2021, 12, 23, 8, 14, 20, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 774394020, 'comment_body': 'Did you mean to pass `fallback` here as well?', 'comment_created': datetime.datetime(2021, 12, 23, 8, 14, 50, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 774394246, 'comment_body': 'Is this a todo?', 'comment_created': datetime.datetime(2021, 12, 23, 8, 15, 14, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 774394414, 'comment_body': 'Should be parsed from the input tuple?', 'comment_created': datetime.datetime(2021, 12, 23, 8, 15, 32, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 790143604, 'comment_body': 'edit: we can put it inside the constructor itself.. however (see below comment)', 'comment_created': datetime.datetime(2022, 1, 22, 13, 38, 33, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 790143696, 'comment_body': ""it's the missing glyph one, will update the comment"", 'comment_created': datetime.datetime(2022, 1, 22, 13, 39, 47, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 790143813, 'comment_body': 'not sure.. this comment was from before. can update it though', 'comment_created': datetime.datetime(2022, 1, 22, 13, 41, 1, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 790143923, 'comment_body': ""yeah we'd need broken fonts to test these errors separately.. not sure if we can add a test for this"", 'comment_created': datetime.datetime(2022, 1, 22, 13, 42, 26, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 790144004, 'comment_body': ""there was one.. but removed it later (since there's no single font that has the same version + kerning throughout the OSs we test)"", 'comment_created': datetime.datetime(2022, 1, 22, 13, 43, 37, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 790144143, 'comment_body': 'We need this other function.. since `FT_Glyph_Get_CBox` is linked to a FT2Font object.. any other object calling a different  `FT_Glyph_Get_CBox` will result in segmentation fault', 'comment_created': datetime.datetime(2022, 1, 22, 13, 45, 8, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 790144284, 'comment_body': ""didn't understand this?"", 'comment_created': datetime.datetime(2022, 1, 22, 13, 46, 54, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 790144526, 'comment_body': 'it can theoretically, this parameter is like a flag to turn fallback off or on.. for now it is on by default, parsing from Python/documenting API change could suit another PR', 'comment_created': datetime.datetime(2022, 1, 22, 13, 49, 49, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 790144625, 'comment_body': 'yeahh, will update comment', 'comment_created': datetime.datetime(2022, 1, 22, 13, 51, 25, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 790144635, 'comment_body': '^same', 'comment_created': datetime.datetime(2022, 1, 22, 13, 51, 30, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 790144639, 'comment_body': '^same', 'comment_created': datetime.datetime(2022, 1, 22, 13, 51, 38, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 790144652, 'comment_body': 'addressed above^', 'comment_created': datetime.datetime(2022, 1, 22, 13, 51, 56, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 790144653, 'comment_body': 'addressed above^', 'comment_created': datetime.datetime(2022, 1, 22, 13, 51, 58, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 790144722, 'comment_body': 'addressed above^', 'comment_created': datetime.datetime(2022, 1, 22, 13, 52, 30, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 790144747, 'comment_body': 'addressed above^', 'comment_created': datetime.datetime(2022, 1, 22, 13, 52, 40, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 790145933, 'comment_body': ""but if we wanted to set the list from a different FT2Font object.. we'd need the function"", 'comment_created': datetime.datetime(2022, 1, 22, 14, 6, 30, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 790146641, 'comment_body': ""we don't.. at that time I didn't wanna mess up the later parts where `glyph_index` was used :p\r\nwill fix"", 'comment_created': datetime.datetime(2022, 1, 22, 14, 14, 58, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 790147171, 'comment_body': 'wow okay, this bit is redundant.. will remove', 'comment_created': datetime.datetime(2022, 1, 22, 14, 21, 18, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 790147325, 'comment_body': 'redundant bit, removed', 'comment_created': datetime.datetime(2022, 1, 22, 14, 22, 24, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 790148797, 'comment_body': ""no not really.. when set_text is called.. a cache will be filled (char_to_font).. which will just point individual characters to their respective `FT2Font`s.. if you load the character again.. it won't iteratively go through the fallback list, since the information is already present in cache.. it will go to that FT2Font and load it."", 'comment_created': datetime.datetime(2022, 1, 22, 14, 38, 29, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 790148912, 'comment_body': ""the glyph itself isn't cached.. only the information of glyph to FT2Font (or char to FT2Font) mapping is cached."", 'comment_created': datetime.datetime(2022, 1, 22, 14, 39, 35, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 790149209, 'comment_body': ""no you're right.. it's better to check charcode error first. will fix"", 'comment_created': datetime.datetime(2022, 1, 22, 14, 43, 26, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 790149826, 'comment_body': 'wait no.. this is actually used in PDF/PS backends.. it is being tested there', 'comment_created': datetime.datetime(2022, 1, 22, 14, 50, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 790150308, 'comment_body': 'I was getting: \r\n```console\r\nwarning: ‚Äòtypedef‚Äô was ignored in this declaration\r\n typedef struct PyFT2Font\r\n```', 'comment_created': datetime.datetime(2022, 1, 22, 14, 55, 6, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 790150457, 'comment_body': ""If you're asking why did I specifying PyFT2Font here.. it's because it's needed in FT2Font class.. there was cross dependency (also see `forward.hpp`)"", 'comment_created': datetime.datetime(2022, 1, 22, 14, 56, 36, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 790150638, 'comment_body': 'The compiled class does hold the fallback list throughout its lifetime.. even when the actual corresponding PyFT2Font is deleted..', 'comment_created': datetime.datetime(2022, 1, 22, 14, 58, 43, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 790151232, 'comment_body': ""Not sure either, even in `set_text` we can directly use `std::vector`. Didn't wanna move a lot of wrapper code around.. so imitated this from the `set_text` flow. Will try this and update here.."", 'comment_created': datetime.datetime(2022, 1, 22, 15, 4, 50, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 790152112, 'comment_body': 'this has been removed..', 'comment_created': datetime.datetime(2022, 1, 22, 15, 15, 17, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 790152419, 'comment_body': ""we need fallback fonts while initializing a single FT2Font, so we either cache them all, or cache none of them..\r\n\r\nIf we cache all:\r\n- can easily be invalidated if we have a different font family\r\n\r\nIf we cache one:\r\n- we can't because we need the whole list of fallbacks for a single initialization\r\n\r\nso it's better to cache all than to cache none?"", 'comment_created': datetime.datetime(2022, 1, 22, 15, 18, 15, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 790312015, 'comment_body': ""yeah.. the underlining logic is a bit different. `_finfont_cached` handles fallback by calling itself, if iteratively any of the font isn't available.. it jumps to the fallback font and terminates the loop, but now instead of terminating, we only want to iterate forward with the list when font isn't found.\r\nAnd that is why it's a 'plugin' over the `_findfont_cached`."", 'comment_created': datetime.datetime(2022, 1, 23, 18, 15, 56, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 790312217, 'comment_body': 'see https://github.com/matplotlib/matplotlib/pull/20740#discussion_r790312015', 'comment_created': datetime.datetime(2022, 1, 23, 18, 17, 40, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 790312322, 'comment_body': 'but the docstring for `findfont` has prop (instead of props).. do you want me to make similar change there as well?', 'comment_created': datetime.datetime(2022, 1, 23, 18, 18, 40, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 790312412, 'comment_body': '`find_fonts_by_props` sounds good.. will update', 'comment_created': datetime.datetime(2022, 1, 23, 18, 19, 30, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 793150363, 'comment_body': 'No, then leave it be.', 'comment_created': datetime.datetime(2022, 1, 27, 0, 3, 40, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 793154358, 'comment_body': 'Where? `fallback_list` is only use in this init function, and not saved on any class or struct.', 'comment_created': datetime.datetime(2022, 1, 27, 0, 14, 3, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 793408657, 'comment_body': ""You are holding on to `FT2Font` in `self->fallbacks`, but it is owned by the`PyFT2Font`. The latter is not ref'd by this class, and thus _could_ be GC'd at any time while this class is in use (if it weren't for the leaking ref on the whole list below.)"", 'comment_created': datetime.datetime(2022, 1, 27, 9, 24, 37, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 810409627, 'comment_body': 'I agree ""plugin"" is a weird wording here.  I see what you mean (it is a function that ""plugs in"" and replaces the previous functionality), however when people say ""plugin"" they tend to be referring to a framework-like scheme where external code can ""plugin"" and get access to internal state of your application / library in a rather invasive way to extend functionality. These systems tend to have a relatively broad API definition and some sort of discovery mechanism (third-party backends hit half of this, pytest extensions hit all of those points).', 'comment_created': datetime.datetime(2022, 2, 19, 0, 7, 29, tzinfo=datetime.timezone.utc), 'commenter': 'tacaswell', 'type': 'User'}, {'comment_id': 810411490, 'comment_body': 'I think this is the right level to cache at as the full fallback list matters.', 'comment_created': datetime.datetime(2022, 2, 19, 0, 15, 32, tzinfo=datetime.timezone.utc), 'commenter': 'tacaswell', 'type': 'User'}, {'comment_id': 810415247, 'comment_body': ""That this sometimes returns `None` and sometimes a font object is not great.  This seems to only be used two places, I agree with @QuLogic that we should in-line the exception handling in both of those places.\r\n\r\n[I'll do this]"", 'comment_created': datetime.datetime(2022, 2, 19, 0, 32, 59, tzinfo=datetime.timezone.utc), 'commenter': 'tacaswell', 'type': 'User'}, {'comment_id': 810452687, 'comment_body': 'The issue here is that we get in a list of Python objects, we then get a borrowed reference of each of those objects, because they are local to the Python side callers the get garbage collected, then we segfault.\r\n\r\nBy keeping a hard ref to the list object that comes in, it in turn keeps a hard-ref to all of its contents and we avoid the segfault (but now leak).\r\n\r\nI think I have a fix...', 'comment_created': datetime.datetime(2022, 2, 19, 6, 4, 25, tzinfo=datetime.timezone.utc), 'commenter': 'tacaswell', 'type': 'User'}, {'comment_id': 878852234, 'comment_body': 'Can we use std::copy instead of the raw loop here?', 'comment_created': datetime.datetime(2022, 5, 22, 12, 15, 41, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 878852989, 'comment_body': '```suggestion\r\n    std::copy(fallback_list.begin(), fallback_list.end(), std::back_inserter(fallbacks));\r\n```', 'comment_created': datetime.datetime(2022, 5, 22, 12, 21, 21, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 882056262, 'comment_body': ""I think we can allow C++11 at least (maybe even 14), so I think that's fine?"", 'comment_created': datetime.datetime(2022, 5, 25, 19, 52, 37, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 908014322, 'comment_body': 'Extra change, looks like', 'comment_created': datetime.datetime(2022, 6, 28, 4, 18, 54, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 908014947, 'comment_body': 'Since dictionaries are ordered now, do we need `OrderedDict`?', 'comment_created': datetime.datetime(2022, 6, 28, 4, 20, 26, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 908030359, 'comment_body': '```suggestion\r\n        Find font families that most closely match the given properties.\r\n```', 'comment_created': datetime.datetime(2022, 6, 28, 4, 56, 2, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 908031731, 'comment_body': '```suggestion\r\n            Key, value pair of families and their corresponding filepaths.\r\n```', 'comment_created': datetime.datetime(2022, 6, 28, 4, 59, 8, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 908073058, 'comment_body': '```suggestion\r\n        returns a single font for the given font properties. Instead, this API\r\n        returns a dictionary containing multiple fonts and their filepaths\r\n```', 'comment_created': datetime.datetime(2022, 6, 28, 6, 14, 45, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 908094407, 'comment_body': ""We don't seem to do `.lower()` in `findfont`?"", 'comment_created': datetime.datetime(2022, 6, 28, 6, 42, 43, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 908095497, 'comment_body': 'Was there a reason for introducing the limit?', 'comment_created': datetime.datetime(2022, 6, 28, 6, 44, 11, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 908097031, 'comment_body': 'Remove.', 'comment_created': datetime.datetime(2022, 6, 28, 6, 46, 5, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 908097781, 'comment_body': ""This doesn't need to return anything now? It's always `0`."", 'comment_created': datetime.datetime(2022, 6, 28, 6, 47, 13, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 908100522, 'comment_body': 'Remove.', 'comment_created': datetime.datetime(2022, 6, 28, 6, 50, 57, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 908107187, 'comment_body': 'Is this guaranteed to be last one if you hit the `!was_found` case on line 519 above?', 'comment_created': datetime.datetime(2022, 6, 28, 6, 59, 10, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 908108111, 'comment_body': 'Extra blank line.', 'comment_created': datetime.datetime(2022, 6, 28, 7, 0, 12, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 908819382, 'comment_body': '```suggestion\r\n        // since it will be assigned to ft_object anyway\r\n        FT2Font *throwaway = NULL;\r\n```', 'comment_created': datetime.datetime(2022, 6, 28, 18, 36, 29, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 911559685, 'comment_body': ""Doesn't exist?"", 'comment_created': datetime.datetime(2022, 7, 1, 2, 2, 40, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 911561041, 'comment_body': ""It's in the docs though..."", 'comment_created': datetime.datetime(2022, 7, 1, 2, 7, 6, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 911561466, 'comment_body': ""It's in the docs..."", 'comment_created': datetime.datetime(2022, 7, 1, 2, 8, 22, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 915252133, 'comment_body': 'The default is a limit of 128 so this gives us a lot more head room.', 'comment_created': datetime.datetime(2022, 7, 6, 21, 0, 28, tzinfo=datetime.timezone.utc), 'commenter': 'tacaswell', 'type': 'User'}, {'comment_id': 915252758, 'comment_body': 'üò¢ ', 'comment_created': datetime.datetime(2022, 7, 6, 21, 1, 19, tzinfo=datetime.timezone.utc), 'commenter': 'tacaswell', 'type': 'User'}, {'comment_id': 915268179, 'comment_body': 'Yes, `ft_object_with_glyph->load_glyph(glyph_index, flags, ft_object_with_glyph, false);` eventually call\r\n\r\n```\r\n    glyphs.push_back(thisGlyph);\r\n```\r\n\r\nwhich pushes a tofu on to the end of glyphs.', 'comment_created': datetime.datetime(2022, 7, 6, 21, 25, 9, tzinfo=datetime.timezone.utc), 'commenter': 'tacaswell', 'type': 'User'}, {'comment_id': 915291139, 'comment_body': 'removed from the docstring.', 'comment_created': datetime.datetime(2022, 7, 6, 22, 4, 34, tzinfo=datetime.timezone.utc), 'commenter': 'tacaswell', 'type': 'User'}, {'comment_id': 915291212, 'comment_body': 'removed from the docstring.', 'comment_created': datetime.datetime(2022, 7, 6, 22, 4, 44, tzinfo=datetime.timezone.utc), 'commenter': 'tacaswell', 'type': 'User'}, {'comment_id': 916231559, 'comment_body': ""I think(?) you should just not kern here (this is also what mathtext does) because you don't even have a guarantee that the glyph indices between the left and right fonts correspond to the same unicode codepoints."", 'comment_created': datetime.datetime(2022, 7, 7, 19, 53, 16, tzinfo=datetime.timezone.utc), 'commenter': 'anntzer', 'type': 'User'}, {'comment_id': 916233797, 'comment_body': 'Just something like `PyObject_IsInstance(item, &PyFT2Font_Type)`, no?  Otherwise this will segfault if you pass in a non-ft2font?', 'comment_created': datetime.datetime(2022, 7, 7, 19, 56, 13, tzinfo=datetime.timezone.utc), 'commenter': 'anntzer', 'type': 'User'}, {'comment_id': 916235487, 'comment_body': ""You can just get rid of the typedef, if you're moving PyFT2Font up."", 'comment_created': datetime.datetime(2022, 7, 7, 19, 58, 40, tzinfo=datetime.timezone.utc), 'commenter': 'anntzer', 'type': 'User'}, {'comment_id': 916292208, 'comment_body': 'This led me down a slightly bigger refactoring of kerning.', 'comment_created': datetime.datetime(2022, 7, 7, 21, 24, 1, tzinfo=datetime.timezone.utc), 'commenter': 'tacaswell', 'type': 'User'}, {'comment_id': 916347851, 'comment_body': '```suggestion\r\nwill try them in order to locate a required glyph.\r\n```', 'comment_created': datetime.datetime(2022, 7, 7, 23, 25, 28, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 916349240, 'comment_body': '```suggestion\r\nbackends is planned for Matplotlib 3.7.\r\n```', 'comment_created': datetime.datetime(2022, 7, 7, 23, 29, 9, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 916353739, 'comment_body': 'Ping on this one?', 'comment_created': datetime.datetime(2022, 7, 7, 23, 41, 40, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 916356037, 'comment_body': 'Sort?', 'comment_created': datetime.datetime(2022, 7, 7, 23, 48, 10, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 916466872, 'comment_body': 'This is 5-space indent now\r\n```suggestion\r\n    if (fallback_list) {\r\n        if (!PyList_Check(fallback_list)) {\r\n            PyErr_SetString(PyExc_TypeError, ""Fallback list must be a list"");\r\n            goto exit;\r\n        }\r\n        Py_ssize_t size = PyList_Size(fallback_list);\r\n\r\n        // go through fallbacks once to make sure the types are right\r\n        for (Py_ssize_t i = 0; i < size; ++i) {\r\n            // this returns a borrowed reference\r\n            PyObject* item = PyList_GetItem(fallback_list, i);\r\n            if (!PyObject_IsInstance(item, PyObject_Type(reinterpret_cast<PyObject *>(self)))) {\r\n                PyErr_SetString(PyExc_TypeError, ""Fallback fonts must be FT2Font objects."");\r\n                goto exit;\r\n            }\r\n        }\r\n```', 'comment_created': datetime.datetime(2022, 7, 8, 5, 7, 38, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 916467740, 'comment_body': '```suggestion\r\n    for (size_t i = 0; i < self->fallbacks.size(); i++) {\r\n        Py_DECREF(self->fallbacks[i]);\r\n    }\r\n```', 'comment_created': datetime.datetime(2022, 7, 8, 5, 9, 56, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 916468684, 'comment_body': '```suggestion\r\n    open_args.stream = &self->stream;\r\n\r\n    if (fallback_list) {\r\n```', 'comment_created': datetime.datetime(2022, 7, 8, 5, 12, 13, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 916468711, 'comment_body': '```suggestion\r\n        }\r\n    }\r\n```', 'comment_created': datetime.datetime(2022, 7, 8, 5, 12, 21, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 916469040, 'comment_body': '```suggestion\r\nimport io\r\n\r\nimport pytest\r\n```', 'comment_created': datetime.datetime(2022, 7, 8, 5, 13, 19, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 916470227, 'comment_body': ""```suggestion\r\n@pytest.mark.parametrize('family_name, file_name',\r\n```"", 'comment_created': datetime.datetime(2022, 7, 8, 5, 16, 36, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 916470275, 'comment_body': '```suggestion\r\ndef test_font_fallback_chinese(fig_test, fig_ref, family_name, file_name):\r\n```', 'comment_created': datetime.datetime(2022, 7, 8, 5, 16, 47, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 916494280, 'comment_body': ""`fname` should be renamed to `filename_dict` or at least `filenames` (plural) for clarity.\r\nGiven that get_font only uses `.values()`, I would suggest making it clearer at this stage too (`filenames = list(find_fonts_by_props(font_prop).values()); font = get_font(filenames)`) (and modify get_font to take a list instead of a dict).  This would also make it easier for third-parties to directly call `get_font` with a list of font paths rather having to invent keys to create a dict, if they don't already have a dict at hand."", 'comment_created': datetime.datetime(2022, 7, 8, 6, 13, 38, tzinfo=datetime.timezone.utc), 'commenter': 'anntzer', 'type': 'User'}, {'comment_id': 917037893, 'comment_body': 'ü§¶üèª My editor was also trying to put tabs in....  ', 'comment_created': datetime.datetime(2022, 7, 8, 18, 5, 12, tzinfo=datetime.timezone.utc), 'commenter': 'tacaswell', 'type': 'User'}, {'comment_id': 917042196, 'comment_body': 'I do not remember why we used a dictionary instead of a list ', 'comment_created': datetime.datetime(2022, 7, 8, 18, 12, 42, tzinfo=datetime.timezone.utc), 'commenter': 'tacaswell', 'type': 'User'}, {'comment_id': 917042592, 'comment_body': ""sorry, this got lost, I'll drop this to be be consistent with `find_fonts`"", 'comment_created': datetime.datetime(2022, 7, 8, 18, 13, 24, tzinfo=datetime.timezone.utc), 'commenter': 'tacaswell', 'type': 'User'}, {'comment_id': 917207505, 'comment_body': '```suggestion\r\n    Get an `ft2font.FT2Font` object given a list of file paths.\r\n```', 'comment_created': datetime.datetime(2022, 7, 9, 2, 7, 6, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 917207524, 'comment_body': ""```suggestion\r\n    font_filepaths : Iterable[str|Path|bytes] | str | Path | bytes\r\n```\r\nbut do we normally do the type hint `|`? Isn't it normally a comma?"", 'comment_created': datetime.datetime(2022, 7, 9, 2, 7, 30, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 917207531, 'comment_body': 'Incomplete sentence.', 'comment_created': datetime.datetime(2022, 7, 9, 2, 7, 39, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 917207578, 'comment_body': '```suggestion\r\n        If a single string, bytes, or `pathlib.Path`, then it will be treated as a\r\n        list with that entry only.\r\n```', 'comment_created': datetime.datetime(2022, 7, 9, 2, 8, 9, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 917207682, 'comment_body': '```suggestion\r\n        If more than one filepath is passed, then the returned FT2Font object\r\n```', 'comment_created': datetime.datetime(2022, 7, 9, 2, 9, 14, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 917207732, 'comment_body': '```suggestion\r\n        will fall back through the fonts, in the order given, to find a needed\r\n        glyph.\r\n```', 'comment_created': datetime.datetime(2022, 7, 9, 2, 9, 36, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 917343909, 'comment_body': 'Doesn\'t render with monospace or `pre`, so no need to align.\r\n```suggestion\r\n    ""- width: glyph width\\n""\r\n    ""- height: glyph height\\n""\r\n    ""- bbox: the glyph bbox (xmin, ymin, xmax, ymax)\\n""\r\n    ""- horiBearingX: left side bearing in horizontal layouts\\n""\r\n    ""- horiBearingY: top side bearing in horizontal layouts\\n""\r\n    ""- horiAdvance: advance width for horizontal layout\\n""\r\n    ""- vertBearingX: left side bearing in vertical layouts\\n""\r\n    ""- vertBearingY: top side bearing in vertical layouts\\n""\r\n    ""- vertAdvance: advance height for vertical layout\\n"";\r\n```', 'comment_created': datetime.datetime(2022, 7, 10, 5, 55, 53, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 917343981, 'comment_body': 'Ditto.\r\n```suggestion\r\n    ""- width: glyph width\\n""\r\n    ""- height: glyph height\\n""\r\n    ""- bbox: the glyph bbox (xmin, ymin, xmax, ymax)\\n""\r\n    ""- horiBearingX: left side bearing in horizontal layouts\\n""\r\n    ""- horiBearingY: top side bearing in horizontal layouts\\n""\r\n    ""- horiAdvance: advance width for horizontal layout\\n""\r\n    ""- vertBearingX: left side bearing in vertical layouts\\n""\r\n    ""- vertBearingY: top side bearing in vertical layouts\\n""\r\n    ""- vertAdvance: advance height for vertical layout\\n"";\r\n```', 'comment_created': datetime.datetime(2022, 7, 10, 5, 56, 42, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 917430699, 'comment_body': 'a dict -> a list.\r\nPerhaps make it explicit that not all fonts in `prop` may have a corresponding entry in the list (missing fonts are dropped, and at least one font is returned) (this may have been the original reason to return a dict, but I think returning a list and losing the 1-1 correspondence is just fine, as you still have the old findfont API available anyways).', 'comment_created': datetime.datetime(2022, 7, 10, 18, 24, 17, tzinfo=datetime.timezone.utc), 'commenter': 'anntzer', 'type': 'User'}, {'comment_id': 937166521, 'comment_body': 'did go to a list.', 'comment_created': datetime.datetime(2022, 8, 3, 21, 49, 2, tzinfo=datetime.timezone.utc), 'commenter': 'tacaswell', 'type': 'User'}]","[{'commit_sha': '85bacdccc52094ee885a394416f6aef2fc1d3545', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}]",Aitik Gupta,43996118,aitikgupta@gmail.com,User,,59,,146,254
705800566,Implement multi-font embedding for PDF Backend,"## PR Summary
Adding on to the changes from the original PR: https://github.com/matplotlib/matplotlib/pull/20740, this PR modifies the layout of FT2Font to allow multiple fonts to work with the PDF backend.

Agg backend is simpler to work with, since things like kerning are set within FT2Font, and all we really needed was a bitmap from it. However, for the PDF backend, we need to extract each glyph from a (possibly) parent FT2Font.

To tackle this, I've implemented a caching layer for the parent object, allowing us to directly get the relevant FT2Font which has a certain glyph. Bits and pieces behind how PDF backend handles fonts is also modified.

With this, we can successfully generate Type 3 and Type 42 subsetted multi-font PDFs:
[type3_fallback.pdf](https://github.com/matplotlib/matplotlib/files/6948453/type3_fallback.pdf)
[type42_fallback.pdf](https://github.com/matplotlib/matplotlib/files/6948452/type42_fallback.pdf)

![image](https://user-images.githubusercontent.com/43996118/128584511-5ed95f10-d47c-458e-8d21-39154c4b5233.png)

Test Script:
```python
import matplotlib.pyplot as plt

FONTTYPE = 42    # or 3

plt.rcParams['font.family'] = ['Authentic', 'SimHei']
plt.rcParams['pdf.fonttype'] = FONTTYPE
plt.rcParams['font.size'] = 30
plt.rcParams['pdf.compression'] = 0

plt.figtext(0.18, 0.45, ""There are Â§ö‰∏™Ê±âÂ≠ó in between!"")
plt.savefig(f""type{FONTTYPE}_fallback.pdf"")
```

Builds on: https://github.com/matplotlib/matplotlib/pull/20740/, Fixes #18883, #15260
## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",False,20804,https://api.github.com/repos/matplotlib/matplotlib/pulls/20804,https://github.com/matplotlib/matplotlib/pull/20804,closed,765,119,14,31,3,0,3,0,"[{'name': 'backend: pdf'}, {'name': 'status: needs rebase'}, {'name': 'topic: text/fonts'}]",2021-08-06 23:59:17+00:00,2022-08-12 13:53:08+00:00,32018031.0,"370 days, 13:53:51",[],"[{'commit_sha': 'd0906aaddb9e70960b22fcba48f9b793a111457d', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6f2fd7e0a17fc509463d1b21d5a63830c1852ec', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51997738d72dcce66c44fd15226578ed9efe79d2', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88da97f58f7ac1836468802f28b2dfe685c28aa0', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c6c3a45e07034cbded66f1ec4fad6281beeec070', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e868fbc703b2b3a6978ca6f761823fec1a8b87e8', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4230469b53dc2777f07e702379c19ab05b9e5581', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '991c79622895ef458169fb87e4d1506bfc226cec', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa385eb33252481c8ae97f3b5bc95011f1e66139', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '471ae8cb94a0a16c45c533fe950f176256a73b54', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '86878c86b504d2c333be40f45c18f91bd95f4912', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ccb7de7ca3278c6216c57ba95f4da0d8784fbec', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed495d37ad15c91927add9885bddd889803cf090', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd87ada85783b108dbd4b49da49dd32d2d92f856a', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'adebae487e02f37544b42d9f7fc292104be4ce73', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9983c6610cb39c84e8ef2121170fcebee64c51d1', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ef863e72cc320d9e02505c1134a54651a6e4263', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f12c295101419e0d91f4c2fd9959ac23e1996040', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1327b8239fea21962fd23378417f8d0a93505f56', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '799ffde03c97d95637faca28107585922bba9045', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ce180513e5acde7687670c06294388a4cce5432', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac1c9c9ff553b55e79111cf32bd608b7a9ff77e9', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a30aafa4bc8a4e1bbbe23d2b04254d22d583781', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e67504743c27756b5c990b3fd9b2c738ac51a99a', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b53070f7c5ba8d9edbb855435960e30ae8cbd5a', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e0d92cff3f85db3d74b05ac385c322d13dc069f', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb505100a5dd5304224e54ab11892ce5cb188aab', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70b0e18ea68c614e482858901617784667d6da37', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42b6d6f016c4dfb9566a26d9692bb22fcf0790f6', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8fd0729d75505fcf38749b6b91f51756cadd46c7', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c88286156ed518aa1709066b2364ad424dc9b96', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}]",Aitik Gupta,43996118,aitikgupta@gmail.com,User,,59,,146,254
712233887,Implement multi-font embedding for PS Backend,"## PR Summary
Adding on to the changes from the original PDF PR: https://github.com/matplotlib/matplotlib/pull/20804, this PR modifies the layout of PS backend to allow embedding multiple fonts.

Currently, Type3 multi-font embedding works fine, ~however, Type42 fails to display the glyphs from other font, _even after the font is embedded_ (and subsetted).~

UPDATE: Using a different font seems to output a good Type42 embedding.

[Type3_converted_from_ps.pdf](https://github.com/matplotlib/matplotlib/files/6981560/Type3_converted_from_ps.pdf)
[Type42_converted_from_ps.pdf](https://github.com/matplotlib/matplotlib/files/6981577/Type42_converted_from_ps.pdf)

![image](https://user-images.githubusercontent.com/43996118/129340894-2660e251-9c17-4183-922b-3a4d7f7d2638.png)
^^ Type 3

```python
import matplotlib.pyplot as plt

FONTTYPE = 42    # or 3

plt.rcParams['font.family'] = ['Authentic', 'SimHei']
plt.rcParams['ps.fonttype'] = FONTTYPE
plt.rcParams['font.size'] = 30

plt.figtext(0.18, 0.45, ""There are Â§ö‰∏™Ê±âÂ≠ó in between!"")
plt.savefig(f""type{FONTTYPE}_fallback.ps"")
```
## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [x] Has pytest style unit tests (and `pytest` passes).
- [x] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [x] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [x] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",False,20832,https://api.github.com/repos/matplotlib/matplotlib/pulls/20832,https://github.com/matplotlib/matplotlib/pull/20832,closed,1688,131,15,32,1,0,3,0,"[{'name': 'backend: ps'}, {'name': 'status: needs rebase'}, {'name': 'topic: text/fonts'}]",2021-08-13 10:05:44+00:00,2022-08-12 13:53:41+00:00,31463277.0,"364 days, 3:47:57",[],"[{'commit_sha': '8b2257dbff27e9c66a4c04fdbdc0b77949695826', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8114a54eaf5de3e954684c7831e0a9cfc14376ec', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a4b78c8554b4464a4e82a894ac33afd297a4c2c1', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67dbcf868f64368ff1cd7c4c6f57890a2acdeab8', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69cf28bfbf4f11cb8c90ef7b6cc03ada26bf8762', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd5aef822bcb89052de6b72334529509cd382ea2f', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa82ecddc4cc590d059ef38a0d86ba63baab1a8f', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bea7a2d01ebb671168aa5cdfd519e4e58d56748e', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51173986f27a7d2b73e78a1c59e968eb5d9dee3a', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc413dc243d07f16742c15e1d54f2f635cacca9b', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f42cbd0465dffc97494e93f558bdce6d556f1ad', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c062cdecbd3a21b130c9e5b0322c339513c5be8', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf4f7430af14d4bdec43ae1a78cb695765c149c5', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9950a3eb4b3089dd336486977ce7df9c41129026', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab2f95ae86e74eeeb96097d6ae4fd0425ab2473e', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '41e247df446e1bde8750ead56f0bd901edf84da5', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e5b4daed15fa6d83ec746692c88cfcc12579ec56', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3af91d8926e896a0c73b64b6d8abec1ddfdbbbc7', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ee77f2971c3047fe6b85a3dda5751f2606cee58', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3cacd454a19010ca6a840f2f2db59db1446a2821', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8719e2ee78d8f997c3bbe3bf12986bdc7234973c', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e6c7998d9515fc3fb621ac6c98a11c2f08944133', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f86ec417c2cdeed13d86d14c2fb6d050429f0437', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a6d21cd233e1b93f95507b07ecf87115832cf6bb', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ecf055692ed0ca6da363019ca9e2c8add6b435d7', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b55f011bd6a728d195b31bfa32a5027fe4bd7d48', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83b227da5e2442c222aaee0b49f2d47f64ea3acd', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '913ad4c2b74b0492e76f2d2eb1f3259954ae0d35', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6fe8f44dfbf304c03cb594a50a6e0d3b39b1bf52', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3e7f03c52cd931954966266bb08cd74596c88ff', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '986ecfe21f7b362316c874ebba5776a6b8199a6f', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c85f46bff1e07250dc635c2497f2dcdc8316f7d', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}]",Aitik Gupta,43996118,aitikgupta@gmail.com,User,,59,,146,254
513782831,Expand ScalarMappable.set_array to accept array-like inputs,"## PR Summary
`imshow` allows `set_array` to pass lists, `Collection` does not. (Since `_ImageBase` overrides `set_array` of `ScalarMappable`, adding the ability to pass `array-like` inputs, and copy the input so changing list after calling function doesn't affect the plots)
This PR expands the `ScalarMappable` class to make a copy of the original input and casting it to arrays.

Fixes #18841 
## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [x] Has pytest style unit tests (and `pytest` passes).
- [x] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [x] New features are documented, with examples if plot related.
- [x] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [x] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",True,18870,https://api.github.com/repos/matplotlib/matplotlib/pulls/18870,https://github.com/matplotlib/matplotlib/pull/18870,closed,28,4,3,6,10,11,1,0,[{'name': 'topic: collections and mappables'}],2020-11-02 04:53:16+00:00,2021-05-13 14:16:30+00:00,16622594.0,"192 days, 9:23:14","[{'comment_id': 519153742, 'comment_body': 'You should make this check and raise before assigning to `self._A`.', 'comment_created': datetime.datetime(2020, 11, 7, 8, 42, 17, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 519170789, 'comment_body': ""I'm not sure I understand, if one of the check fails, it will terminate anyway?\r\nAlternatively, if this should be followed, should this be done here as well?\r\nhttps://github.com/matplotlib/matplotlib/blob/ce2964854420fbb3e2a9519014e9e5b44824eb92/lib/matplotlib/image.py#L696-L701"", 'comment_created': datetime.datetime(2020, 11, 7, 12, 5, 59, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 545354862, 'comment_body': 'If you have set `self._A` then the internal state has been modified and the main purpose of the method call has been done!', 'comment_created': datetime.datetime(2020, 12, 17, 19, 41, 13, tzinfo=datetime.timezone.utc), 'commenter': 'tacaswell', 'type': 'User'}, {'comment_id': 545896955, 'comment_body': ""This tests the line problem. But can you test `set_array` directly?  I'm still unclear when you would use it outside this indirect use.  If its only goal is to be used indirectly maybe it should just be private?"", 'comment_created': datetime.datetime(2020, 12, 18, 15, 8, 59, tzinfo=datetime.timezone.utc), 'commenter': 'jklymak', 'type': 'User'}, {'comment_id': 545901133, 'comment_body': 'Testing `set_array` something like this?\r\n```python\r\n    xs = np.arange(10)\r\n    ymin = 0\r\n    ymax = 1\r\n    vals = [*range(10)]\r\n    plot = plt.vlines(xs, ymin, ymax)\r\n    \r\n    # Test set_array with list\r\n    plot.set_array(vals)\r\n\r\n    # Test if array kwarg is copied\r\n    vals[5] = 45\r\n    assert np.not_equal(vals, plot.get_array()).any()\r\n    \r\n```', 'comment_created': datetime.datetime(2020, 12, 18, 15, 15, 55, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 545904588, 'comment_body': ""I don't know ;-)  I have no idea what set_array is meant to do in the context of a scalar mappable, so thats what I was hoping could be added.  For instance the test above is great, but I am still not sure what this will do to the plot.  I could download the PR and see, but...\r\n\r\n"", 'comment_created': datetime.datetime(2020, 12, 18, 15, 21, 47, tzinfo=datetime.timezone.utc), 'commenter': 'jklymak', 'type': 'User'}, {'comment_id': 545907110, 'comment_body': ""I'm not sure if we use ScalarMappable class directly anywhere, although classes which inherit from it do use `set_array` directly, for example:\r\nhttps://github.com/matplotlib/matplotlib/blob/67aa50d164669a1340fe05e06dfc7223e25c87b3/examples/shapes_and_collections/line_collection.py#L76-L79\r\nhttps://github.com/matplotlib/matplotlib/blob/67aa50d164669a1340fe05e06dfc7223e25c87b3/examples/shapes_and_collections/artist_reference.py#L94-L95"", 'comment_created': datetime.datetime(2020, 12, 18, 15, 25, 6, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 545918783, 'comment_body': ""> I have no idea what set_array is meant to do in the context of a scalar mappable\r\n\r\nScalarMappable basically would map scalar data, in this case `vals`, into a color map format (RGBA). The result would induce colors to the artists w.r.t the scalars provided.\r\nSo in case of `vlines` (I realise now that `test_collection_set_array` should not have reference to `vlines`, and instead test `Collection` class' inherited `set_array` function directly), the resultant plot will have lines colored (the referenced issue https://github.com/matplotlib/matplotlib/issues/18841#issue-732646421 has that plot) according to the array `vals`."", 'comment_created': datetime.datetime(2020, 12, 18, 15, 43, 56, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 622803212, 'comment_body': '```suggestion\r\n        if A is None:\r\n            self._A = None\r\n            return\r\n            \r\n        A = cbook.safe_masked_invalid(A, copy=True)\r\n        if not np.can_cast(A.dtype, float, ""same_kind""):\r\n            raise TypeError(""Image data of dtype {} cannot be converted to ""\r\n                            ""float"".format(A.dtype))\r\n```\r\n\r\n1. Returning early for None is simpler.\r\n2. `np.can_cast(np.uint8, float, ""same_kind"")` is True, so `A.dtype != np.uint8` is not needed.', 'comment_created': datetime.datetime(2021, 4, 29, 7, 36, 13, tzinfo=datetime.timezone.utc), 'commenter': 'timhoffm', 'type': 'User'}, {'comment_id': 622868496, 'comment_body': 'ah, makes sense üëçüèº ', 'comment_created': datetime.datetime(2021, 4, 29, 9, 8, 29, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 622925901, 'comment_body': 'You might want to use a f-string.', 'comment_created': datetime.datetime(2021, 4, 29, 10, 32, 18, tzinfo=datetime.timezone.utc), 'commenter': 'timhoffm', 'type': 'User'}]","[{'commit_sha': '71dc77d7a88d52f4865dad6e99f325139acb22c5', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9cc32b0a89a5b7b119effb84381e9b191af8f73e', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4b9f9fcac6231566cce95df64455fb6a148bade', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1139e6af97ed1780b881fb74eb962d76095279ab', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2044b57c743f9bf1ab93f0693e030bfca43e2235', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ec672fedb231609329e67374f6505c68c0d6b82', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}]",Aitik Gupta,43996118,aitikgupta@gmail.com,User,,59,,146,254
517349083,Add overset and underset support for mathtext,"## PR Summary
This PR addresses #18241, adds `\overset` and its variant `\underset` LaTeX symbol, which looks like this:
- Overset:
![mathtext_cm_83](https://user-images.githubusercontent.com/43996118/98474050-414da100-221b-11eb-95f6-1bba1bc90a89.png)
- Underset:
![mathtext_cm_84](https://user-images.githubusercontent.com/43996118/98473961-3a269300-221b-11eb-8625-76929d122347.png)

Also see: http://tex.wikidot.com/snippets:overset-and-underset

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [x] Has pytest style unit tests (and `pytest` passes).
- [x] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [x] New features are documented, with examples if plot related.
- [x] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [x] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [x] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",True,18916,https://api.github.com/repos/matplotlib/matplotlib/pulls/18916,https://github.com/matplotlib/matplotlib/pull/18916,closed,71,0,3,3,31,22,2,1,"[{'name': 'New feature'}, {'name': 'topic: text/mathtext'}]",2020-11-08 18:24:13+00:00,2021-01-18 06:54:51+00:00,6093038.0,"70 days, 12:30:38","[{'comment_id': 534714795, 'comment_body': '```suggestion\r\n            shift = (csymbol.height / 2 +\r\n                     (metrics.ymax + metrics.ymin) / 2 + thickness * 2)\r\n```', 'comment_created': datetime.datetime(2020, 12, 3, 6, 13, 27, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 534735044, 'comment_body': ""I'm not sure what's wrong here, but it appears that `underset` is a little bit lower than `overset`:\r\n```python\r\nimport matplotlib.pyplot as plt\r\nplt.text(0.5, 0.5, r'Test of some $math \\overset{foo}{\\rightarrow} \\underset{bar}{\\rightarrow}$')\r\nplt.savefig('foo.png', dpi=600)\r\n```\r\n![image](https://user-images.githubusercontent.com/302469/100972962-aee1aa00-3507-11eb-9ac2-70cfef52ff25.png)\r\n"", 'comment_created': datetime.datetime(2020, 12, 3, 6, 34, 45, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 539223853, 'comment_body': ""You're right, there were some logistic issues with the old approach:\r\n![Screenshot from 2020-12-09 16-46-53](https://user-images.githubusercontent.com/43996118/101623269-349cb280-3a3e-11eb-90b0-de7d5e376cf8.png)\r\nI made some changes, this is how it looks now:\r\n![Screenshot from 2020-12-09 16-40-52](https://user-images.githubusercontent.com/43996118/101622786-81cc5480-3a3d-11eb-91dd-01c31ae961aa.png)\r\nAlternatively, it'd be helpful to look at some characters which are not italicised or have all characters of same height:\r\n![Screenshot from 2020-12-09 16-43-24](https://user-images.githubusercontent.com/43996118/101622938-b3ddb680-3a3d-11eb-8577-dad4185cd65c.png)\r\n![Screenshot from 2020-12-09 16-50-30](https://user-images.githubusercontent.com/43996118/101623610-b5f44500-3a3e-11eb-9933-cc9a32910039.png)\r\n\r\n"", 'comment_created': datetime.datetime(2020, 12, 9, 11, 21, 47, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 547107766, 'comment_body': ""vertical position, isn't it?"", 'comment_created': datetime.datetime(2020, 12, 22, 7, 14, 41, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 547120106, 'comment_body': ""Ah, that's right"", 'comment_created': datetime.datetime(2020, 12, 22, 7, 47, 38, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 547128042, 'comment_body': ""Please consider merging these two tests together into a single test case, as this should result in a nearly twofold save in file size for the vector formats (which won't have to encode the glyphs twice).\r\nThe commits should be squashed after merging the test cases to remove the separate files from the git history."", 'comment_created': datetime.datetime(2020, 12, 22, 8, 8, 1, tzinfo=datetime.timezone.utc), 'commenter': 'anntzer', 'type': 'User'}, {'comment_id': 547129958, 'comment_body': ""That makes sense, so after merging it would look like:\r\n`r'$x \\overset{f}{\\rightarrow} \\underset{f}{\\rightarrow} y$'`"", 'comment_created': datetime.datetime(2020, 12, 22, 8, 12, 39, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 547154987, 'comment_body': 'thanks', 'comment_created': datetime.datetime(2020, 12, 22, 9, 6, 5, tzinfo=datetime.timezone.utc), 'commenter': 'anntzer', 'type': 'User'}, {'comment_id': 548516642, 'comment_body': 'Should this not just use simple_group instead?  (in which case symbol_group could go away)  Looks like TeX is perfectly happy with `\\overset{ab}{}` or `\\overset{ab}{cd}` (you may need to add tests that both ""overset over nothing"" and ""overset over multiple characters"" work).', 'comment_created': datetime.datetime(2020, 12, 24, 12, 30, 36, tzinfo=datetime.timezone.utc), 'commenter': 'anntzer', 'type': 'User'}, {'comment_id': 548517821, 'comment_body': 'you can just write e.g. `(value, (symbol,)), = toks` and get rid of the asserts (and likewise for `underset`).', 'comment_created': datetime.datetime(2020, 12, 24, 12, 35, 17, tzinfo=datetime.timezone.utc), 'commenter': 'anntzer', 'type': 'User'}, {'comment_id': 548518397, 'comment_body': 'given that this is tightly coupled to over/under (as the vlist order is also set here), I\'d just rename `shift` to e.g. `overunder` which is either ""over"" or ""under"" for readability.', 'comment_created': datetime.datetime(2020, 12, 24, 12, 37, 9, tzinfo=datetime.timezone.utc), 'commenter': 'anntzer', 'type': 'User'}, {'comment_id': 548519408, 'comment_body': 'It\'s not super obvious which of `value` and `symbol` is the main part and which one is the ""annotation"", I guess we could rename them to e.g. `body` and `annotation` (throughout).', 'comment_created': datetime.datetime(2020, 12, 24, 12, 41, 25, tzinfo=datetime.timezone.utc), 'commenter': 'anntzer', 'type': 'User'}, {'comment_id': 548749867, 'comment_body': 'TeX is also happy with `\\overset{}{}`, this made me _remove_ the tests (and also convert the `required_group` into a `simple_group`), since we only test failures:\r\nhttps://github.com/matplotlib/matplotlib/blob/739898e708ec1dc8228b421e3bfba74a631706dc/lib/matplotlib/tests/test_mathtext.py#L236-L238\r\n', 'comment_created': datetime.datetime(2020, 12, 24, 21, 17, 3, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 549309642, 'comment_body': 'Can you (for my personal education) explain why this needs to be a Kern and not a Vbox?  Does that mean the other places that use Vboxes (e.g. `_genfrac`, `c_over_c`) should also be changed?', 'comment_created': datetime.datetime(2020, 12, 28, 11, 12, 39, tzinfo=datetime.timezone.utc), 'commenter': 'anntzer', 'type': 'User'}, {'comment_id': 549310065, 'comment_body': ""Do you need to wrap the return value in a list containing an Hlist?  Can you not just return the Vlist directly?  That's what e.g. c_over_c does.\r\n(Again, I don't know the correct answer...)"", 'comment_created': datetime.datetime(2020, 12, 28, 11, 14, 2, tzinfo=datetime.timezone.utc), 'commenter': 'anntzer', 'type': 'User'}, {'comment_id': 549316722, 'comment_body': 'We can understand `Kern` as a superset of `Vbox` and `Hbox` - `Vbox` is only used for vertical spaces, `Hbox` is only used for horizontal spaces.\r\n`Kern` can be used in both - it is a more LaTeX-like keyword, so anybody who has an understanding of general LaTeX should feel at home looking at this.\r\nOn the other hand, `Vbox` should make more sense in vertical lists - since it is easy to understand what it would do.\r\n\r\nAlso, `Kern` can take negative values, `Vbox` or `Hbox` can not (negative values = 0).\r\n\r\nOther than this, there is _no difference_ if we change `Kern` to a `Vbox` here, or other places (eg. `_genfrac`, `c_over_c`).', 'comment_created': datetime.datetime(2020, 12, 28, 11, 37, 46, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 549317897, 'comment_body': ""Since we wouldn't want a _negative_ `kern_vgap`, I think it's better to stick to `VBox` here?"", 'comment_created': datetime.datetime(2020, 12, 28, 11, 42, 5, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 549318783, 'comment_body': ""For simple purposes of readability, and if we ever wanted there to be a horizontal gap between the current symbol and the next one - we'd use:\r\n```python\r\nhlist = [Hlist([vlist, Hbox(0, horizontal_gap)])]\r\n```\r\nBut we don't specifically need to wrap the return value in `Hlist` here"", 'comment_created': datetime.datetime(2020, 12, 28, 11, 45, 17, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 549360723, 'comment_body': ""Let's stick to Vbox for consistency with the other constructs (genfrac, c_over_c, etc.)?  Thanks for the explanation."", 'comment_created': datetime.datetime(2020, 12, 28, 14, 9, 10, tzinfo=datetime.timezone.utc), 'commenter': 'anntzer', 'type': 'User'}, {'comment_id': 549361073, 'comment_body': ""I'd rather not wrap things into more things unless needed; if you want I guess you can leave the note about horizontal gaps as a comment?"", 'comment_created': datetime.datetime(2020, 12, 28, 14, 10, 30, tzinfo=datetime.timezone.utc), 'commenter': 'anntzer', 'type': 'User'}, {'comment_id': 549403231, 'comment_body': 'I made the change, although, I found other places where this is done too:\r\nhttps://github.com/matplotlib/matplotlib/blob/0520035717925131666ad5bb2ef7e21ec61b40fd/lib/matplotlib/_mathtext.py#L2684-L2687', 'comment_created': datetime.datetime(2020, 12, 28, 16, 16, 24, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 549404270, 'comment_body': 'I guess these can be cleaned up as a separate PR?', 'comment_created': datetime.datetime(2020, 12, 28, 16, 19, 48, tzinfo=datetime.timezone.utc), 'commenter': 'anntzer', 'type': 'User'}]","[{'commit_sha': '6bd127aa996b6bec72ab4c3191103bea59a45602', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ce7efcf5cb0c9812535718bb569259ad43098bf', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '542ba9b242537e456c310557cab4e498b7ceaa46', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}]",Aitik Gupta,43996118,aitikgupta@gmail.com,User,,59,,146,254
520931616,Strictly increasing check with test coverage for streamplot grid,"## PR Summary
This PR fixes #18898, adds check for strictly increasing `x` and `y` in `matplotlib.streamplot.Grid`, and adds test coverage for it.

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [x] Has pytest style unit tests (and `pytest` passes).
- [x] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [x] New features are documented, with examples if plot related.
- [x] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [x] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",True,18947,https://api.github.com/repos/matplotlib/matplotlib/pulls/18947,https://github.com/matplotlib/matplotlib/pull/18947,closed,54,2,2,2,1,4,1,0,[{'name': 'API: argument checking'}],2020-11-14 01:29:09+00:00,2020-11-21 00:46:26+00:00,602237.0,"6 days, 23:17:17","[{'comment_id': 526468933, 'comment_body': ""I'd rather inline the message in the function. Having a separate variable is an unnecessary indirection."", 'comment_created': datetime.datetime(2020, 11, 18, 22, 35, 6, tzinfo=datetime.timezone.utc), 'commenter': 'timhoffm', 'type': 'User'}, {'comment_id': 527248943, 'comment_body': 'Something like I just pushed?', 'comment_created': datetime.datetime(2020, 11, 19, 22, 33, 26, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 527257182, 'comment_body': '```suggestion\r\n    with pytest.raises(ValueError, match=""\'y\' can have at maximum ""\r\n```', 'comment_created': datetime.datetime(2020, 11, 19, 22, 51, 13, tzinfo=datetime.timezone.utc), 'commenter': 'tacaswell', 'type': 'User'}, {'comment_id': 527269205, 'comment_body': 'üëçüèº \r\n', 'comment_created': datetime.datetime(2020, 11, 19, 23, 20, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}]","[{'commit_sha': 'a2228be3723b85993955e56a55f6b697a4190e19', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7af5e2c5f8a751e06adf39a75091cf775f4997a1', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}]",Aitik Gupta,43996118,aitikgupta@gmail.com,User,,59,,146,254
552367764,WIP: Add support to edit subplot configurations via textbox,"## PR Summary
This PR adds support to manually edit the slider values in the subplot configuration tool via a TextBox.
(potentially a `NumericTextBox`)
This is a WIP, to mockup the desired behavior mentioned at https://github.com/matplotlib/matplotlib/issues/19257#issuecomment-757525072.

Behaviour:
<img src=""https://user-images.githubusercontent.com/43996118/104157053-61166680-5410-11eb-838e-bf7ab71f464a.gif"" width=""75%""/>


To test it out, you can use any snippet:
```python
import matplotlib.pyplot as plt


def example_plot(ax, fontsize=12):
    ax.plot([1, 2])
    ax.set_xlabel('x-label', fontsize=fontsize)
    ax.set_ylabel('y-label', fontsize=fontsize)
    ax.set_title('Title', fontsize=fontsize)

fig, axis = plt.subplots()
example_plot(axis, fontsize=24)
plt.show()
```

A partial fix to https://github.com/matplotlib/matplotlib/issues/19257

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",False,19271,https://api.github.com/repos/matplotlib/matplotlib/pulls/19271,https://github.com/matplotlib/matplotlib/pull/19271,open,51,11,1,2,4,0,2,0,"[{'name': 'status: needs rebase'}, {'name': 'status: inactive'}]",2021-01-10 23:33:30+00:00,,0.0,,[],"[{'commit_sha': 'abed94bf585ba40d775d6b42c23e9f0b2274e4b2', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a2444e75d3e98d148334f14f83e36918659f938', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}]",Aitik Gupta,43996118,aitikgupta@gmail.com,User,,59,,146,254
556492163,Fix over/under mathtext symbols,"## PR Summary
This PR fixes the alignment issues with the current `overunder` symbols in `mathtext`.

Brief summary of the proposal:

<img src=""https://user-images.githubusercontent.com/43996118/104870806-61ae8000-596f-11eb-8927-81946b817059.png"" width=""60%""/>

(This rewrites the following IDs of the tests):
```python
baselines_to_rewrite = [18, 22, 29, 34, 52, 67]
```

Closes #19178 
## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [x] Has pytest style unit tests (and `pytest` passes).
- [x] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [x] New features are documented, with examples if plot related.
- [x] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [x] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",True,19314,https://api.github.com/repos/matplotlib/matplotlib/pulls/19314,https://github.com/matplotlib/matplotlib/pull/19314,closed,7459,4169,41,5,16,0,1,1,[{'name': 'topic: text/mathtext'}],2021-01-18 04:00:39+00:00,2021-02-10 03:07:50+00:00,1984031.0,"22 days, 23:07:11",[],"[{'commit_sha': '99492fa474d7edd73a6b92d870a00f3fc667ef28', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '37d022c622118e37fdad2afc1fc3c63565d77ed3', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b0dbead0bc1d756d8d7287ad9ed6e499023a4c13', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b2e85c6c8057007c3e74f6620218f8ccf52d647', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b74db71ec5516dc67a9db33d0b034af8281f5d57', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}]",Aitik Gupta,43996118,aitikgupta@gmail.com,User,,59,,146,254
571669254,Add overset/underset whatsnew entry,"## PR Summary
This is a continuation of the previous PR https://github.com/matplotlib/matplotlib/pull/18916,
w.r.t. this comment: https://github.com/matplotlib/matplotlib/pull/18916#issuecomment-776654901

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [x] Has pytest style unit tests (and `pytest` passes).
- [x] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [x] New features are documented, with examples if plot related.
- [x] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [x] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [x] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [x] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",True,19497,https://api.github.com/repos/matplotlib/matplotlib/pulls/19497,https://github.com/matplotlib/matplotlib/pull/19497,closed,28,17,2,4,4,3,1,0,[{'name': 'topic: text/mathtext'}],2021-02-11 09:07:42+00:00,2021-02-11 17:58:42+00:00,31860.0,8:51:00,"[{'comment_id': 574566042, 'comment_body': '```suggestion\r\n`.mathtext` now supports *overset* and *underset*, called as \r\n``\\overset{body}{annotation}`` or ``\\underset{body}{annotation}``, where \r\n*annotation* is the text ""above"" or ""below"" the *body*.\r\n```', 'comment_created': datetime.datetime(2021, 2, 11, 14, 56, 13, tzinfo=datetime.timezone.utc), 'commenter': 'jklymak', 'type': 'User'}, {'comment_id': 574656061, 'comment_body': 'OK, but now this is wrong again, right? ', 'comment_created': datetime.datetime(2021, 2, 11, 16, 44, 49, tzinfo=datetime.timezone.utc), 'commenter': 'jklymak', 'type': 'User'}, {'comment_id': 574669705, 'comment_body': 'Yeah, I blindly copied the suggestion, let me fix that', 'comment_created': datetime.datetime(2021, 2, 11, 17, 1, 36, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}]","[{'commit_sha': '9649d8365560be32d82871f4d86528d6386c3d48', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2913f08e1fe49d35a253fd81efd4642918bf5f7f', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd891481ca8160e645ee8a472bec5f012d7783142', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c82cadd2b9a4d10fe200b2019acc2e5017e57695', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}]",Aitik Gupta,43996118,aitikgupta@gmail.com,User,,59,,146,254
645087565,Warn user when mathtext font is used for ticks,"## PR Summary
Following up the patch mentioned in https://github.com/matplotlib/matplotlib/pull/18397#pullrequestreview-655033417, w.r.t. @anntzer's original comment https://github.com/matplotlib/matplotlib/pull/18397#issuecomment-826615489
> we could even emit a warning when cmr10 is used in a non-mathtext context, as that seems to be pretty common

When using the ""cmr10"" font (or possibly more mathtext-fonts) for ticks, one should set `rcParams[""axes.formatter.use_mathtext""] = True` to trigger the machinery implemented by https://github.com/matplotlib/matplotlib/pull/18397

Possible improvements:
- Move the warning to an outer scope, for all Formatters (not just ScalarFormatter) - do we need to?
- Include other mathtext-fonts

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [x] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [x] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [x] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",True,20235,https://api.github.com/repos/matplotlib/matplotlib/pulls/20235,https://github.com/matplotlib/matplotlib/pull/20235,closed,28,0,2,2,16,5,1,0,[{'name': 'topic: text/mathtext'}],2021-05-15 05:47:01+00:00,2021-05-25 20:18:25+00:00,916284.0,"10 days, 14:31:24","[{'comment_id': 637534367, 'comment_body': 'I think this warning is overly broad: if e.g. `font.family = ""sans-serif"" and `font.serif = ""cmr10""`, you don\'t want to emit a warning (because we\'re not going to use the serif font anyways).  What you really want to check is probably something more like\r\n```python\r\nmpl.font_manager.findfont(mpl.font_manager.FontProperties(mpl.rcParams[""font.family""])) \\\r\n    == <path to cmr10.ttf>\r\n```', 'comment_created': datetime.datetime(2021, 5, 23, 11, 53, 57, tzinfo=datetime.timezone.utc), 'commenter': 'anntzer', 'type': 'User'}, {'comment_id': 637616618, 'comment_body': ""That makes so much more sense!\r\nI'll update."", 'comment_created': datetime.datetime(2021, 5, 23, 23, 31, 27, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 637878935, 'comment_body': ""there's cbook._get_data_path too."", 'comment_created': datetime.datetime(2021, 5, 24, 11, 30, 2, tzinfo=datetime.timezone.utc), 'commenter': 'anntzer', 'type': 'User'}, {'comment_id': 638980949, 'comment_body': ""you don't need the None check here"", 'comment_created': datetime.datetime(2021, 5, 25, 16, 45, 46, tzinfo=datetime.timezone.utc), 'commenter': 'anntzer', 'type': 'User'}, {'comment_id': 639001418, 'comment_body': ""I was under the impression that we shouldn't compare values if one of them is None...\r\nI'll update üëçüèº "", 'comment_created': datetime.datetime(2021, 5, 25, 17, 13, 47, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}]","[{'commit_sha': 'd11022e421255b380c1cbee6f593a2c6fd813c70', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a8aa99188c675ba87d585f77d580edf29ba396a', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}]",Aitik Gupta,43996118,aitikgupta@gmail.com,User,,59,,146,254
660191369,Clarify/Improve docs on family-names vs generic-families,"## PR Summary
Coming from the answer at https://discourse.matplotlib.org/t/fonts-and-font-families/22132 and a brief discussion with @anntzer, this PR modifies the content of font docs (and one example, for which I have a slight niggle against - because it's not really the most obvious and best way to guide a user into setting font family).

Hopefully, we might be moving font stuff out from this [very long page](https://matplotlib.org/stable/tutorials/text/text_props.html), and probably a better example in future.


This is possibly the beginning of handling https://github.com/matplotlib/matplotlib/issues/5941.

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [x] New features are documented, with examples if plot related.
- [x] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",True,20346,https://api.github.com/repos/matplotlib/matplotlib/pulls/20346,https://github.com/matplotlib/matplotlib/pull/20346,closed,47,16,2,2,7,44,2,0,"[{'name': 'Documentation'}, {'name': 'topic: text/fonts'}]",2021-06-02 15:54:08+00:00,2021-06-11 16:22:32+00:00,779304.0,"9 days, 0:28:24","[{'comment_id': 644126650, 'comment_body': 'there are 5 generic families only, you may as well list them all...', 'comment_created': datetime.datetime(2021, 6, 2, 16, 26, 32, tzinfo=datetime.timezone.utc), 'commenter': 'anntzer', 'type': 'User'}, {'comment_id': 644130144, 'comment_body': 'I would leave out the ""not recommended"" unless you write another paragraph to explain the motivation of having generic families at all.', 'comment_created': datetime.datetime(2021, 6, 2, 16, 31, 4, tzinfo=datetime.timezone.utc), 'commenter': 'anntzer', 'type': 'User'}, {'comment_id': 644201225, 'comment_body': 'üëçüèº ', 'comment_created': datetime.datetime(2021, 6, 2, 18, 0, 28, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 644203323, 'comment_body': 'Added another paragraph, with a slightly modified motivation üëçüèº ', 'comment_created': datetime.datetime(2021, 6, 2, 18, 3, 37, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 644372733, 'comment_body': ""Why is 'rcParam mapping' a code-style string?"", 'comment_created': datetime.datetime(2021, 6, 2, 22, 59, 42, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 644388764, 'comment_body': '```suggestion\r\n#    # This is effectively translated to:\r\n```', 'comment_created': datetime.datetime(2021, 6, 2, 23, 46, 29, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 644390829, 'comment_body': 'This needs some re-wording. The first paragraph and the second are not really linked together, and then the code after seems disjoint from what is being explained.', 'comment_created': datetime.datetime(2021, 6, 2, 23, 52, 23, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 644390950, 'comment_body': 'appended, or prepended?', 'comment_created': datetime.datetime(2021, 6, 2, 23, 52, 41, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 644395260, 'comment_body': ""DId it to relate to the previous table's heading, let me remove.."", 'comment_created': datetime.datetime(2021, 6, 3, 0, 6, 20, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 644395309, 'comment_body': 'üëçüèº ', 'comment_created': datetime.datetime(2021, 6, 3, 0, 6, 35, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 644395628, 'comment_body': ""Appended, we're talking about generic family here (sans-serif in this case)."", 'comment_created': datetime.datetime(2021, 6, 3, 0, 7, 23, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 644395750, 'comment_body': 'I see, let me try rewording..', 'comment_created': datetime.datetime(2021, 6, 3, 0, 7, 45, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 644446435, 'comment_body': 'But we do not currently do per-glyph fallback, only ""can we find this font?"" fallback.', 'comment_created': datetime.datetime(2021, 6, 3, 2, 51, tzinfo=datetime.timezone.utc), 'commenter': 'tacaswell', 'type': 'User'}, {'comment_id': 644447164, 'comment_body': 'This is a bit confusing, because this pattern is exactly what our default values are!', 'comment_created': datetime.datetime(2021, 6, 3, 2, 53, 7, tzinfo=datetime.timezone.utc), 'commenter': 'tacaswell', 'type': 'User'}, {'comment_id': 644455392, 'comment_body': ""That's true, but even in-general usecases, this holds true.\r\n(would be 100% true after we've accomplished true fallback)"", 'comment_created': datetime.datetime(2021, 6, 3, 3, 20, 33, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 644456015, 'comment_body': ""And those default values are exactly what we don't want users to touch, if they want custom font families, go ahead and modify `font.family`, what we shouldn't recommend is to modify `font.serif`, `font.fantasy`, etc."", 'comment_created': datetime.datetime(2021, 6, 3, 3, 22, 45, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 644457938, 'comment_body': 'Ah, I misread that.', 'comment_created': datetime.datetime(2021, 6, 3, 3, 29, 31, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 644476465, 'comment_body': 'We should hold off on including ""...contain the required glyph."" until it is all the way true ;)\r\n\r\nIt is my understanding that these values eventually make it to https://github.com/matplotlib/matplotlib/blob/a3fbf1876830a89087842ea779515e0d099c885d/lib/matplotlib/font_manager.py#L1130-L1158 which only takes into account the name (not the pages supported).', 'comment_created': datetime.datetime(2021, 6, 3, 4, 32, 38, tzinfo=datetime.timezone.utc), 'commenter': 'tacaswell', 'type': 'User'}, {'comment_id': 644477207, 'comment_body': 'That also makes sense, let me remove that line üëçüèº ', 'comment_created': datetime.datetime(2021, 6, 3, 4, 34, 47, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 644481108, 'comment_body': ""I guess there is a hypothetical workflow where people are setting `matplotlib.rcParams['font.family'] = ['serif']` or `matplotlib.rcParams['font.family'] = ['cursive']`.  People could do\r\n\r\n```\r\nmatplotlib.rcParams['font.sans-serif'] = ['Source Han Sans TW', ...]\r\nmatplotlib.rcParams['fonts.serif'] = ['Noto Serif', ...]\r\n```\r\n\r\nand then switch between serif/sans serif in a straight forward way.  You could then imagine filling these lists with a number of fonts which _may_ be installed and using the first one you find.\r\n\r\nThe current default values include a bunch of fonts that we do not ship (but expect to be on users systems with high probability).  The only fonts we ship are in https://github.com/matplotlib/matplotlib/tree/master/lib/matplotlib/mpl-data/fonts/ttf (there are a bunch of afm files as well, but those are only font metrics (glyph sizes) that we need for layout, not the full fonts)."", 'comment_created': datetime.datetime(2021, 6, 3, 4, 48, 4, tzinfo=datetime.timezone.utc), 'commenter': 'tacaswell', 'type': 'User'}, {'comment_id': 644496520, 'comment_body': 'But this exactly creates confusions for people who\'re coming to our docs for setting custom fonts, like https://discourse.matplotlib.org/t/fonts-and-font-families/22132.\r\n\r\nI\'m sure an experienced developer could come up with this quick way of switching regardless of the docs. We _could_ however, add a small paragraph about where you _can_ use this type of method (giving this switching example) maybe?\r\n\r\nIt\'s more like saying, ""You can use the non-recommended way if you know what you\'re doing. But if you\'re new to this, or if you\'re coming from a web-background, you should probably stick to the recommended way.""', 'comment_created': datetime.datetime(2021, 6, 3, 5, 33, 59, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 644497157, 'comment_body': 'The default values not being shipped is a bit of concern, because the statement becomes invalid (maybe I could rephrase?)', 'comment_created': datetime.datetime(2021, 6, 3, 5, 35, 37, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 645621254, 'comment_body': ""Rephrased and removed the 'non-recommended' part, and also squashed. üëçüèº "", 'comment_created': datetime.datetime(2021, 6, 4, 14, 35, 5, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 647829865, 'comment_body': ""What is a `user-defined font family`?  I don't see any instructions on how to define my own font-family, and I'm not sure why I would do such a thing.  \r\n"", 'comment_created': datetime.datetime(2021, 6, 8, 22, 10, 55, tzinfo=datetime.timezone.utc), 'commenter': 'jklymak', 'type': 'User'}, {'comment_id': 647830408, 'comment_body': 'What is `MyFamily1` and `MyFamily2`?  Are these fonts or font families?  How do I get these names?  ', 'comment_created': datetime.datetime(2021, 6, 8, 22, 12, 6, tzinfo=datetime.timezone.utc), 'commenter': 'jklymak', 'type': 'User'}, {'comment_id': 647830695, 'comment_body': 'ditto, what is `MySerif1/2`?    Are these font names?  Where do I get these?  Where are the fonts installed?  ', 'comment_created': datetime.datetime(2021, 6, 8, 22, 12, 43, tzinfo=datetime.timezone.utc), 'commenter': 'jklymak', 'type': 'User'}, {'comment_id': 647964514, 'comment_body': 'All font families which not denoted by this set: `{\'cursive\', \'serif\', \'sans-serif\', \'fantasy\', \'monospace\'} are user-defined font families.\r\n\r\nWe basically draw a line between ""generic-families"" vs ""family-names"", see [this link](https://drafts.csswg.org/css-fonts-3/#font-family-prop):\r\n\r\n> There are two types of font family names:\r\n    family-name\r\n    The name of a font family of choice such as Helvetica or Verdana in the previous example.\r\n    generic-family\r\n    The following generic family keywords are defined: ‚Äòserif‚Äô, ‚Äòsans-serif‚Äô, ‚Äòcursive‚Äô, ‚Äòfantasy‚Äô, and ‚Äòmonospace‚Äô.', 'comment_created': datetime.datetime(2021, 6, 9, 4, 52, 50, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 647964871, 'comment_body': ""Though I agree, we could use a better name than 'user-defined' font families, because it might give the impression that a user himself has to define that font.\r\n\r\nAny suggestions?"", 'comment_created': datetime.datetime(2021, 6, 9, 4, 53, 52, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 647965159, 'comment_body': 'These are font families, like I said in the previous comment, it can be anything other than those 5 special keywords.', 'comment_created': datetime.datetime(2021, 6, 9, 4, 54, 43, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 647965784, 'comment_body': ""Same as above^^\r\n\r\n(we could also say that all fonts installed in user's machine are 'user-defined' fonts)\r\n\r\n(also note that sometimes the word 'fonts' and 'font-families' are used interchangeably)"", 'comment_created': datetime.datetime(2021, 6, 9, 4, 56, 30, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 647967786, 'comment_body': ""```suggestion\r\n# | ``'font.family'``   | List of font families (installed on the users machine) and/or |\r\n```"", 'comment_created': datetime.datetime(2021, 6, 9, 5, 2, 41, tzinfo=datetime.timezone.utc), 'commenter': 'jklymak', 'type': 'User'}, {'comment_id': 647967942, 'comment_body': ""```suggestion\r\n# 'monospace', 'sans', 'sans serif', 'sans-serif', 'serif'}``) and actual font families\r\n```"", 'comment_created': datetime.datetime(2021, 6, 9, 5, 3, 10, tzinfo=datetime.timezone.utc), 'commenter': 'jklymak', 'type': 'User'}, {'comment_id': 647969040, 'comment_body': ""Suggest before this table something like:\r\n\r\n```\r\nMatplotlib can use font families installed on the user's computer, i.e. \r\nHelvetica, Times, etc, as well as other user-installed fonts.  Font \r\nfamilies can also be specified with generic names like 'serif', \r\n'sans-serif', in which case a fallback list is used:\r\n```\r\n"", 'comment_created': datetime.datetime(2021, 6, 9, 5, 6, 42, tzinfo=datetime.timezone.utc), 'commenter': 'jklymak', 'type': 'User'}, {'comment_id': 647969626, 'comment_body': ""So I'd change these to `Family1` or `FontFamily1`, or even just be specific with generic fonts...\r\n\r\nAlso, what do these default to?  What are the default 'serif' fonts?  "", 'comment_created': datetime.datetime(2021, 6, 9, 5, 8, 20, tzinfo=datetime.timezone.utc), 'commenter': 'jklymak', 'type': 'User'}, {'comment_id': 647981032, 'comment_body': 'The default ""generic-family"" fonts default to the ones in rcParams, mentioned in the [docs](https://matplotlib.org/stable/tutorials/introductory/customizing.html):\r\n![image](https://user-images.githubusercontent.com/43996118/121299410-01ff4400-c913-11eb-9bea-6262aa9c50c9.png)\r\n', 'comment_created': datetime.datetime(2021, 6, 9, 5, 39, 44, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 647986326, 'comment_body': 'So maybe here, link the rcParam so folks can see the default list?', 'comment_created': datetime.datetime(2021, 6, 9, 5, 52, 28, tzinfo=datetime.timezone.utc), 'commenter': 'jklymak', 'type': 'User'}, {'comment_id': 648323752, 'comment_body': ""```suggestion\r\n# | ``'font.family'``   | List of font families (installed on       |\r\n```"", 'comment_created': datetime.datetime(2021, 6, 9, 13, 52, 19, tzinfo=datetime.timezone.utc), 'commenter': 'jklymak', 'type': 'User'}, {'comment_id': 648327275, 'comment_body': 'üëçüèº ', 'comment_created': datetime.datetime(2021, 6, 9, 13, 55, 49, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 648562514, 'comment_body': ""```suggestion\r\nYou can explicitly set which font family is picked up, either by specifying the \r\nfamily names of fonts installed on the system, or generic-families (e.g., 'serif', 'sans-serif', 'monospace',\r\n```\r\n\r\nSorry!"", 'comment_created': datetime.datetime(2021, 6, 9, 18, 25, 3, tzinfo=datetime.timezone.utc), 'commenter': 'jklymak', 'type': 'User'}, {'comment_id': 648563063, 'comment_body': '```suggestion\r\n# Helvetica, Times, etc.\r\n```', 'comment_created': datetime.datetime(2021, 6, 9, 18, 25, 57, tzinfo=datetime.timezone.utc), 'commenter': 'jklymak', 'type': 'User'}, {'comment_id': 648635449, 'comment_body': '```suggestion\r\n# | css family alias                        | rcParam with mappings          |\r\n```\r\n\r\nMaybe name this as the CSS names (to head of my question of ""did Matplotlib make up these names!?"").', 'comment_created': datetime.datetime(2021, 6, 9, 19, 54, 2, tzinfo=datetime.timezone.utc), 'commenter': 'tacaswell', 'type': 'User'}, {'comment_id': 648646889, 'comment_body': 'Maybe `CSS-style family alias`.  Many of our users do not know what css is really.  ', 'comment_created': datetime.datetime(2021, 6, 9, 20, 4, 30, tzinfo=datetime.timezone.utc), 'commenter': 'jklymak', 'type': 'User'}, {'comment_id': 649117718, 'comment_body': ""I guess `CSS-based generic-family alias` would make more sense? (special focus on the 'generic-family')"", 'comment_created': datetime.datetime(2021, 6, 10, 12, 4, 15, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 649118202, 'comment_body': 'I knew I missed this somewhere, thanks!', 'comment_created': datetime.datetime(2021, 6, 10, 12, 5, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}]","[{'commit_sha': '84046cb4b605b8649704693588271cfaab52361d', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61abd44255b4178d52b08b77b1fda9cbffcc997a', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}]",Aitik Gupta,43996118,aitikgupta@gmail.com,User,,59,,146,254
661966353,Add parse_math in Text and default it False for TextBox,"## PR Summary
Following up the comment: https://github.com/matplotlib/matplotlib/issues/20266#issuecomment-854794023, this PR adds a `override_math` to Text objects, and make TextBox's text object default it to True.

This resolves https://github.com/matplotlib/matplotlib/issues/20266.
It does not allow GUI to go in invalid state when there's invalid mathtext in it, because it isn't parsed at all.
(also allows folks to override mathtext _at all_ in their text objects)

Interactive trial:
```python
import matplotlib.pyplot as plt
from matplotlib.widgets import TextBox

fig, ax = plt.subplots()
fig.subplots_adjust(left=0.25, top=0.55, bottom=0.45)
text_box = TextBox(ax, ""Something in '\$ \$'"")                       # try typing wrong mathtext here

plt.show()
```

Static trial:
```python
import matplotlib.pyplot as plt
fig, ax = plt.subplots()
ax.text(1, 2, ""$$"")
plt.show()
```

Needs a changenote (API change) and tests, but let's wait for a review before that.
## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [x] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",True,20367,https://api.github.com/repos/matplotlib/matplotlib/pulls/20367,https://github.com/matplotlib/matplotlib/pull/20367,closed,51,2,4,10,8,12,2,0,"[{'name': 'topic: text'}, {'name': 'topic: widgets/UI'}]",2021-06-04 18:13:38+00:00,2021-06-29 08:48:33+00:00,2126095.0,"24 days, 14:34:55","[{'comment_id': 645904095, 'comment_body': ""I'm not sure about the name, but regardless, this must go to the end of the argument list."", 'comment_created': datetime.datetime(2021, 6, 4, 23, 32, 52, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 645923641, 'comment_body': 'I agree about putting it at the end and it should be made key-word only.\r\n\r\n\r\nI suggest changing the name to something positive (like ""parse_math"", ""interpret_math"", ""as_math"") so that the default value can be `True` and then setting it to False when we do not want it.  In general it is better to avoid names / defaults that result in double negatives.  ""(do|do not) not try to parse as math"" is harder for people to understand than ""(do|do not) try to parse as math""!', 'comment_created': datetime.datetime(2021, 6, 5, 1, 43, 30, tzinfo=datetime.timezone.utc), 'commenter': 'tacaswell', 'type': 'User'}, {'comment_id': 645930952, 'comment_body': ""ah, that makes sense!\r\nlet me update it with something like `parse_math`.\r\n\r\n> should be made key-word only.\r\n\r\nI didn't quite understand this?"", 'comment_created': datetime.datetime(2021, 6, 5, 2, 58, 32, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 645961693, 'comment_body': 'Add a `*`: https://docs.python.org/3/glossary.html#term-parameter', 'comment_created': datetime.datetime(2021, 6, 5, 8, 27, 16, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 645980383, 'comment_body': ""> Add a `*`: https://docs.python.org/3/glossary.html#term-parameter\r\n\r\nExplains so many class' __init__s, going to use it for the first time!"", 'comment_created': datetime.datetime(2021, 6, 5, 11, 38, 13, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 656589777, 'comment_body': ""This should be a more detailed (but still concise!) summary of what's changed."", 'comment_created': datetime.datetime(2021, 6, 22, 21, 22, 30, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 656590030, 'comment_body': '`Text` should link, `parse_path` should be single `*`.', 'comment_created': datetime.datetime(2021, 6, 22, 21, 22, 55, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 656590583, 'comment_body': 'Only the last line (which raises) should be in the context.', 'comment_created': datetime.datetime(2021, 6, 22, 21, 23, 53, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 656591328, 'comment_body': ""If we aren't passing any math, then we shouldn't unescape `\\$`, no?"", 'comment_created': datetime.datetime(2021, 6, 22, 21, 25, 15, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 657574299, 'comment_body': ""It's what I thought at first, but I didn't want to change the default behaviour (if there wasn't any `parse_math`)"", 'comment_created': datetime.datetime(2021, 6, 24, 2, 9, 48, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 657574937, 'comment_body': ""I mean, there must be a reason why we do it if the text wasn't interpreted as math right?"", 'comment_created': datetime.datetime(2021, 6, 24, 2, 11, 46, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 658365538, 'comment_body': ""Because `r'Exchange is CA\\$20 for US\\$10'` should escape mathtext and turn it off (see `is_math_text`). But if parsing is disabled entirely, we don't need such escapes."", 'comment_created': datetime.datetime(2021, 6, 25, 0, 10, 2, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}]","[{'commit_sha': 'ce7f8a1b4503ba38b509465562121dd686a4d642', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ac787a5be45454d5bbd4d284e2cf8a93fecb83b', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '367026f7d6d74b613c0802be4e053fbb576b4686', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c2ae3d63ae5308fb985eec3995176521006e8ee6', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'faabc0d8e92560fa9227937243698fea6a9a4da0', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dee7232bd69c185214ed61ab360022eea431f233', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a6a51e70f8c406c50bc5f3b1560e10a4a1fd9f1', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cff9073097e40c5aebfcf9e3b2c17acce3de55b9', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61792ca3f426714debc74f2603d86f02b47547f4', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e9b8d562034a1e6af9b1e858d7986fa3e46421a', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}]",Aitik Gupta,43996118,aitikgupta@gmail.com,User,,59,,146,254
664960118,Type42 subsetting in PS/PDF,"## PR Summary
This PR is a fresh rebase from https://github.com/matplotlib/matplotlib/pull/18143.

- Adds a dependency: [`fonttools`](https://github.com/fonttools/fonttools) to handle font subsetting for us
  (we already have an external ttconv dependency, which does not handle subsetting)
- Interfaces a `getSubset` utility to get file-like objects containing subsetted font data

Possibly fixes https://github.com/matplotlib/matplotlib/issues/11303 (large file sizes)
Fixes https://github.com/matplotlib/matplotlib/issues/18191.

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [x] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [x] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [x] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",True,20391,https://api.github.com/repos/matplotlib/matplotlib/pulls/20391,https://github.com/matplotlib/matplotlib/pull/20391,closed,199,22,13,29,34,47,1,0,[{'name': 'topic: text/fonts'}],2021-06-08 14:16:19+00:00,2021-07-26 13:02:28+00:00,4142769.0,"47 days, 22:46:09","[{'comment_id': 651878749, 'comment_body': ""FT2Font can handle file objects too (things that have a read()), so you don't need to go through the filesystem; a BytesIO should be good enough (getSubset could even just return the BytesIO it creates internally)."", 'comment_created': datetime.datetime(2021, 6, 15, 14, 58, 40, tzinfo=datetime.timezone.utc), 'commenter': 'anntzer', 'type': 'User'}, {'comment_id': 651878941, 'comment_body': 'turn these into logs?', 'comment_created': datetime.datetime(2021, 6, 15, 14, 58, 52, tzinfo=datetime.timezone.utc), 'commenter': 'anntzer', 'type': 'User'}, {'comment_id': 651880231, 'comment_body': 'as above re: intermediate file.', 'comment_created': datetime.datetime(2021, 6, 15, 15, 0, 15, tzinfo=datetime.timezone.utc), 'commenter': 'anntzer', 'type': 'User'}, {'comment_id': 651910889, 'comment_body': 'I see, this can be done for PDF backend (however, see note on PS backend)', 'comment_created': datetime.datetime(2021, 6, 15, 15, 32, 56, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 651918789, 'comment_body': ""`convert_ttf_to_ps` takes a filepath as the first parameter, because read_font takes fontpath too:\r\nhttps://github.com/matplotlib/matplotlib/blob/d1567715f1913ce935462c408f02e70e6299b6cb/extern/ttconv/pprdrv_tt.cpp#L1223\r\n\r\nfor PDF backend we're not using this function, but here I think we need to? (unless there's a way around it)"", 'comment_created': datetime.datetime(2021, 6, 15, 15, 41, 33, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 651919513, 'comment_body': ""yeah, was waiting for a general review before changing the previous PR's contents"", 'comment_created': datetime.datetime(2021, 6, 15, 15, 42, 22, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 651922052, 'comment_body': 'I guess it may be worth seeing whether ttconv can be fixed to support filelikes as well, but this can be done later.', 'comment_created': datetime.datetime(2021, 6, 15, 15, 45, 13, tzinfo=datetime.timezone.utc), 'commenter': 'anntzer', 'type': 'User'}, {'comment_id': 651924950, 'comment_body': ""`read_font` it's being called from the below function (which is called by `convert_ttf_to_ps`): https://github.com/matplotlib/matplotlib/blob/d1567715f1913ce935462c408f02e70e6299b6cb/src/_ttconv.cpp#L132"", 'comment_created': datetime.datetime(2021, 6, 15, 15, 48, 34, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 651972301, 'comment_body': '> I guess it may be worth seeing whether ttconv can be fixed to support filelikes as well, but this can be done later.\r\n\r\nI added a TODO just before it', 'comment_created': datetime.datetime(2021, 6, 15, 16, 46, 39, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 653330259, 'comment_body': ""This is not a valid PEP8 name. Also, it's not a descriptive name; `matplotlib.backends._backend_pdf_ps.getSubset` does not really indicate what you're subsetting."", 'comment_created': datetime.datetime(2021, 6, 17, 8, 9, 35, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 653330606, 'comment_body': ""It's not public, but you should still try to use numpydoc."", 'comment_created': datetime.datetime(2021, 6, 17, 8, 10, 7, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 653331135, 'comment_body': 'Can this be used as a context manager instead?', 'comment_created': datetime.datetime(2021, 6, 17, 8, 10, 48, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 653332635, 'comment_body': 'Logging should usually use `%`.', 'comment_created': datetime.datetime(2021, 6, 17, 8, 12, 36, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 653337251, 'comment_body': 'This appears to require testing.', 'comment_created': datetime.datetime(2021, 6, 17, 8, 18, 47, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 653338074, 'comment_body': ""This minimum version needs to go in `requirements/testing/minver.txt` so it's actually tested."", 'comment_created': datetime.datetime(2021, 6, 17, 8, 19, 52, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 653341469, 'comment_body': 'Comment what `FFTM` is.', 'comment_created': datetime.datetime(2021, 6, 17, 8, 24, 19, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 654685273, 'comment_body': 'I changed the name to `get_glyphs_subset`', 'comment_created': datetime.datetime(2021, 6, 18, 21, 32, 51, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 654686102, 'comment_body': ""I added `Parameters` section, if that's what you meant?"", 'comment_created': datetime.datetime(2021, 6, 18, 21, 35, 29, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 654688358, 'comment_body': 'hmm, the tests still fail with `NoModuleFound` error even after adding it to minver.txt\r\nAny idea?', 'comment_created': datetime.datetime(2021, 6, 18, 21, 42, 51, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 654722282, 'comment_body': 'Yes, that will work.', 'comment_created': datetime.datetime(2021, 6, 19, 0, 19, 58, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 656210052, 'comment_body': 'probably better to stick to ascii in the logs just in case someone is printing these to an old-style windows cmd.exe which may not like that.', 'comment_created': datetime.datetime(2021, 6, 22, 13, 16, 2, tzinfo=datetime.timezone.utc), 'commenter': 'anntzer', 'type': 'User'}, {'comment_id': 656211790, 'comment_body': ""I suggest adding a unit test for this function: call the function with some font and some characters, read the output using FT2Font, check that the characters you want are in there and (some) characters you don't want are not in there."", 'comment_created': datetime.datetime(2021, 6, 22, 13, 18, 5, tzinfo=datetime.timezone.utc), 'commenter': 'jkseppan', 'type': 'User'}, {'comment_id': 656245864, 'comment_body': ""I don't think you need the seek() here."", 'comment_created': datetime.datetime(2021, 6, 22, 13, 54, 27, tzinfo=datetime.timezone.utc), 'commenter': 'anntzer', 'type': 'User'}, {'comment_id': 657544228, 'comment_body': ""Added a bunch of tests (not sure about what we _don't_ want in there though)"", 'comment_created': datetime.datetime(2021, 6, 24, 0, 30, 28, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 664346690, 'comment_body': ""Someone could see it as bad behaviour from a library if it modifies the logging configuration for another library. If this is about the unknown truetype table, I think it's fine to have our own list of dropped tables and add to it whenever someone complains about messages with a new font."", 'comment_created': datetime.datetime(2021, 7, 6, 8, 28, 49, tzinfo=datetime.timezone.utc), 'commenter': 'jkseppan', 'type': 'User'}, {'comment_id': 664398243, 'comment_body': ""That makes sense.\r\nI'll fix this in the next commit"", 'comment_created': datetime.datetime(2021, 7, 6, 9, 36, 14, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 665629388, 'comment_body': 'I think we should add a `tmp.flush()` to avoid a race condition between the content being written out and `convert_ttf_to_ps()` reading it back. ', 'comment_created': datetime.datetime(2021, 7, 7, 18, 54, 29, tzinfo=datetime.timezone.utc), 'commenter': 'sauerburger', 'type': 'User'}, {'comment_id': 667285665, 'comment_body': ""I was under the impression that Python interpreter will only move to the next line once the `write` is complete?\r\n\r\nSeems like `.flush()` 'clears out the internal buffer of the file', which is still in memory here, but once we've written it out on disk, could a race condition still exist?\r\n\r\n(asking totally on the learning side here, I can add this in my next commit)"", 'comment_created': datetime.datetime(2021, 7, 10, 4, 0, 54, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 667317719, 'comment_body': 'Write operations on a file object in Python are usually [buffered](https://docs.python.org/3/library/functions.html#open) with a [default buffer size](https://docs.python.org/3/library/io.html#io.DEFAULT_BUFFER_SIZE) of 4KiB or 8KiB. Calling `flush()` ensures that another process can read back the content, [see](https://stackoverflow.com/questions/7127075/what-exactly-is-pythons-file-flush-doing). The OS might still buffer and delay the write operation to the physical disk for performance reasons. This is completely transparent to user programs. To ensure that the data is permanently written to disk and persisted in case of a system crash, you could call `fsync()` but this is not necessary in this case.', 'comment_created': datetime.datetime(2021, 7, 10, 9, 41, 57, tzinfo=datetime.timezone.utc), 'commenter': 'sauerburger', 'type': 'User'}, {'comment_id': 667410978, 'comment_body': 'Thank you so much for a detailed answer! (that SO link was an amazing and insightful read)\r\n', 'comment_created': datetime.datetime(2021, 7, 11, 2, 35, 55, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 667420727, 'comment_body': 'I think this is an assertion that a warning is raised, which will probably break when a future version of fonttools fixes the code that causes the warning. A suitable [filterwarnings setting](https://docs.pytest.org/en/6.2.x/warnings.html#deprecationwarning-and-pendingdeprecationwarning) in pytest.ini would let us ignore fonttools specific warnings.', 'comment_created': datetime.datetime(2021, 7, 11, 4, 41, 3, tzinfo=datetime.timezone.utc), 'commenter': 'jkseppan', 'type': 'User'}, {'comment_id': 667420949, 'comment_body': ""Shouldn't we require strict inequality here? We specifically want to exclude a lot of glyphs."", 'comment_created': datetime.datetime(2021, 7, 11, 4, 42, 53, tzinfo=datetime.timezone.utc), 'commenter': 'jkseppan', 'type': 'User'}, {'comment_id': 667421309, 'comment_body': 'This looks to me like the comment is contradicting the code. `set(chars)` is the set of characters we want to be available, so it should be a subset (not superset) of the set of characters available in the reduced font.', 'comment_created': datetime.datetime(2021, 7, 11, 4, 48, 9, tzinfo=datetime.timezone.utc), 'commenter': 'jkseppan', 'type': 'User'}, {'comment_id': 667421524, 'comment_body': ""... but since the test passes, I wonder what's going on. Could you check what the sets on both sides of the `.issuperset` operation actually are? I wonder if there's a bug that makes the right-hand set be empty."", 'comment_created': datetime.datetime(2021, 7, 11, 4, 50, 41, tzinfo=datetime.timezone.utc), 'commenter': 'jkseppan', 'type': 'User'}, {'comment_id': 667671667, 'comment_body': 'Even after adding this to `pytest.ini`, this failed.\r\nHowever, adding it to `lib/matplotlib/testing/conftest/py` worked.', 'comment_created': datetime.datetime(2021, 7, 12, 6, 57, 43, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 667675426, 'comment_body': 'Testing with font files that are _already_ subsetted with certain characters, the strict equality would fail.\r\n\r\nOr for fonts that cannot be subsetted at all.', 'comment_created': datetime.datetime(2021, 7, 12, 7, 4, 56, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 667705854, 'comment_body': ""Although the left and the right sides are valid (they print the set of characters):\r\n```console\r\n{'o', 'b', 'd', 's', ' ', '!', 'u', 'h', 'e', 't', 'l'}\r\n```\r\nIt seems LHS is equal to RHS, which is why the tests pass. I agree it should be `.subset()`. (though I'm not able to recall why I put superset in the first place :/)"", 'comment_created': datetime.datetime(2021, 7, 12, 7, 53, 53, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 668749777, 'comment_body': '^^ change stuff according to above comment', 'comment_created': datetime.datetime(2021, 7, 13, 13, 12, 54, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 668749929, 'comment_body': 'The DejavuSerif.ttf we distribute is not subsetted, so it should get much smaller.', 'comment_created': datetime.datetime(2021, 7, 13, 13, 13, 4, tzinfo=datetime.timezone.utc), 'commenter': 'jkseppan', 'type': 'User'}, {'comment_id': 668754775, 'comment_body': '^^ Change to equality testing', 'comment_created': datetime.datetime(2021, 7, 13, 13, 18, 30, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 668754792, 'comment_body': ""This could be `set(chars) == set(chr(key) for key in subcmap.keys())` because in this particular case the set will be equal. There are other cases in which it would be a subset, such as if `√§` is built from `a` and `¬®` but that's not the case here."", 'comment_created': datetime.datetime(2021, 7, 13, 13, 18, 31, tzinfo=datetime.timezone.utc), 'commenter': 'jkseppan', 'type': 'User'}, {'comment_id': 670732116, 'comment_body': '```suggestion\r\n    assert len(subcmap) < len(nosubcmap)\r\n```', 'comment_created': datetime.datetime(2021, 7, 15, 19, 0, 58, tzinfo=datetime.timezone.utc), 'commenter': 'jkseppan', 'type': 'User'}, {'comment_id': 671724456, 'comment_body': 'Done üëçüèº ', 'comment_created': datetime.datetime(2021, 7, 17, 17, 42, 35, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 671724485, 'comment_body': 'Fixed this üëçüèº ', 'comment_created': datetime.datetime(2021, 7, 17, 17, 42, 50, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 674659004, 'comment_body': '```suggestion\r\nis now required for Maptlotlib 3.5.\r\n```', 'comment_created': datetime.datetime(2021, 7, 22, 9, 58, 4, tzinfo=datetime.timezone.utc), 'commenter': 'jkseppan', 'type': 'User'}, {'comment_id': 674659356, 'comment_body': 'I think  the wording ""is integrated in with"" could be read to mean that we ship a vendored copy of the library.', 'comment_created': datetime.datetime(2021, 7, 22, 9, 58, 31, tzinfo=datetime.timezone.utc), 'commenter': 'jkseppan', 'type': 'User'}, {'comment_id': 677840639, 'comment_body': ""The context manager calls `.close`, which flushes the buffer; there's no need for an explicit `.flush` here (at least in how the code ended up as merged.)"", 'comment_created': datetime.datetime(2021, 7, 27, 22, 22, 29, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}]","[{'commit_sha': 'fc59f3529c07974eaca3c8613d5d7c1cba91a0ae', 'committer_username': 'jkseppan', 'committer_name': 'Jouni K. Sepp√§nen', 'committer_email': 'jks@iki.fi', 'commit_date': datetime.datetime(2009, 6, 7, 12, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a632b256b560169761ac0d6bcab502f32b503fae', 'committer_username': 'jkseppan', 'committer_name': 'Jouni K. Sepp√§nen', 'committer_email': 'jks@iki.fi', 'commit_date': datetime.datetime(2009, 6, 7, 12, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '501b30e42f282419bb4993b22b22f44e7d624190', 'committer_username': 'jkseppan', 'committer_name': 'Jouni K. Sepp√§nen', 'committer_email': 'jks@iki.fi', 'commit_date': datetime.datetime(2009, 6, 7, 12, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5d527ae88099946c5c71c0d6b4608524f1df032', 'committer_username': 'jkseppan', 'committer_name': 'Jouni K. Sepp√§nen', 'committer_email': 'jks@iki.fi', 'commit_date': datetime.datetime(2009, 6, 7, 12, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8493184838d4beadb61894621f1af95a6530e323', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b61744be90af2c48698e68c3af93ea1dd45910a1', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44739429644caa5a0e6db22a35c210dcac3d99e2', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '24219b9e3a24de05690f9214e823abd7fc29d71e', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '525760ec1cfa06a82c42394a2403b22f7dc2e68f', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d751175e82a363121bc644db66bbd85d5069424', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5eebbb8d35f42365ce92c153e57a39698a6d4fb', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '91417cde7ff2b5af5a365d5e0e4618def360fa42', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aca3bb53286a80d0dfe35361f25e254bc3176171', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '265a563afe83cb71768d45dbcbdc7150ac30fc80', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2193caa5c1f5780339ccee6b6def0c005be57d14', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5661f0d56ca074258066328a7048c92bb32949eb', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0d766fe3e39f2615fa5b1d34c1c162316fac649', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ea7f1bea766ca2f44c0323aa909e4880d903ec0', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17873f392d44bd9dd73939d3fddb196dd6e6f105', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9837733de6474c877ea825c7e4aeadbbe970e6d5', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5097311c2238e9dc758acacd18c744bebd10c71', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a362601c934f3bd1eabd3c234d7870d19d99ac06', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57267a3187b4a08b30c0c63705b7328d029c4bd7', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7571055ea1160ff33e4cb2e7415962da616fef62', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1630ad90d11d1c5c718f3adb80229b2b35d42043', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa197d2dc9a15df2fa03da69ab7aa193a4c80c8f', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe583dd2f8e46985b221b7860e746a923602e65c', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a95f2b6a4aba5be1bb6faf65f77189906c2b96a9', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '85f4377181609f3b705de69cd8dbd12aef75c73a', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}]",Aitik Gupta,43996118,aitikgupta@gmail.com,User,,59,,146,254
671276880,[Doc] Font Types and Font Subsetting,"## PR Summary
A new entry to User Guide - Fonts! (modelled after [interactive_guide](https://matplotlib.org/stable/users/interactive_guide.html))
#### All About Matplotlib and Fonts!
This document would contain everything Matplotlib knows about fonts, and is bootstrapped with the different types of fonts and font subsetting with this PR. This guide would especially be useful for issues related to font subsetting. (for eg., https://github.com/theislab/scanpy/issues/1720)

Also the first time we're mentioning anything about `'fonttypes'` in docs.

Related issues: https://github.com/matplotlib/matplotlib/issues/127

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [x] New features are documented, with examples if plot related.
- [x] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [x] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",True,20450,https://api.github.com/repos/matplotlib/matplotlib/pulls/20450,https://github.com/matplotlib/matplotlib/pull/20450,closed,131,0,2,7,7,30,1,0,[{'name': 'Documentation'}],2021-06-16 09:51:20+00:00,2021-07-13 14:10:07+00:00,2348327.0,"27 days, 4:18:47","[{'comment_id': 652739255, 'comment_body': 'This may oversimplify the matter a little - the Type 1 wrapper format is a restricted subset of PostScript but the glyph programs (""charstrings"") are in a bytecode format that is not really PostScript, although the operators are close to some PostScript operators. ', 'comment_created': datetime.datetime(2021, 6, 16, 14, 21, 24, tzinfo=datetime.timezone.utc), 'commenter': 'jkseppan', 'type': 'User'}, {'comment_id': 652770064, 'comment_body': 'The bytecode is only in the charstrings, the container format is either ASCII-based pfa or binary pfb, both of which contain a restricted subset of PostScript, some of it encrypted, and the PostScript includes the charstrings.', 'comment_created': datetime.datetime(2021, 6, 16, 14, 52, 37, tzinfo=datetime.timezone.utc), 'commenter': 'jkseppan', 'type': 'User'}, {'comment_id': 652774442, 'comment_body': 'The glyph programs can call subprograms, for example `√§` could be composed by calling the subprograms for `a` and `¬®`, or `‚Üí` could be composed by a program that changes the display matrix and calls the subprogram for `‚Üê`. So part of the problem is that the subsetter needs to find all the subprograms being called by the glyphs included in the subset.', 'comment_created': datetime.datetime(2021, 6, 16, 14, 57, 16, tzinfo=datetime.timezone.utc), 'commenter': 'jkseppan', 'type': 'User'}, {'comment_id': 654695987, 'comment_body': ""I see, I think this 'expressed in terms of' comparison can be removed?"", 'comment_created': datetime.datetime(2021, 6, 18, 22, 11, 34, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 654698774, 'comment_body': 'That was informative!\r\nAdded this bit üëçüèº ', 'comment_created': datetime.datetime(2021, 6, 18, 22, 23, 22, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 654828206, 'comment_body': 'Updated this bit', 'comment_created': datetime.datetime(2021, 6, 19, 18, 53, 49, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 656219235, 'comment_body': 'I\'m not sure this is ""very hard"" to subset, it\'s just a lot of work: it needs someone to understand the font format, build the implementation and test it. There are libraries like ttconv and fonttools that can do it, so it makes sense to use them. Likewise with Type 1, but neither of those two libraries helps us with it. Software like pdftex produces subsets of Type 1 fonts, but I don\'t think the TeX license is compatible with ours so we can\'t just extract the code from pdftex.', 'comment_created': datetime.datetime(2021, 6, 22, 13, 26, 16, tzinfo=datetime.timezone.utc), 'commenter': 'jkseppan', 'type': 'User'}, {'comment_id': 656250064, 'comment_body': ""I'm not sure that the consistency between backends or lack thereof is relevant here - we need to implement subsetting for vector backends only, and the graph search needed for subsetting is independent of the backend."", 'comment_created': datetime.datetime(2021, 6, 22, 13, 59, 4, tzinfo=datetime.timezone.utc), 'commenter': 'jkseppan', 'type': 'User'}, {'comment_id': 656252603, 'comment_body': 'A possible downside is that while the font metrics are standardized, different pdf consumer applications will have different fonts, so the document might look different on e.g. Windows and Linux, if the Linux tools include free versions of the proprietary fonts.', 'comment_created': datetime.datetime(2021, 6, 22, 14, 1, 43, tzinfo=datetime.timezone.utc), 'commenter': 'jkseppan', 'type': 'User'}, {'comment_id': 657561268, 'comment_body': 'Thanks! Added this', 'comment_created': datetime.datetime(2021, 6, 24, 1, 26, 40, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 657561325, 'comment_body': 'I reworded these points üëçüèº ', 'comment_created': datetime.datetime(2021, 6, 24, 1, 26, 54, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 657561402, 'comment_body': 'Reworded the points üëçüèº ', 'comment_created': datetime.datetime(2021, 6, 24, 1, 27, 13, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 658111423, 'comment_body': '```suggestion\r\nFonts in the Matplotlib text engine\r\n=========================\r\n\r\nUsers can configure the fonts used by Matplotlib to render text with the default engine.  Users\r\nusing TeX to render fonts (``usetex=True``) should consult `APPROPRIATE REFERENCE HERE`.\r\n\r\n```\r\n', 'comment_created': datetime.datetime(2021, 6, 24, 16, 36, 31, tzinfo=datetime.timezone.utc), 'commenter': 'jklymak', 'type': 'User'}, {'comment_id': 658112501, 'comment_body': '```suggestion\r\nFonts have a long and sometimes incompatible history in computing, leading to different platforms supporting different types of fonts.  \r\n```', 'comment_created': datetime.datetime(2021, 6, 24, 16, 38, 4, tzinfo=datetime.timezone.utc), 'commenter': 'jklymak', 'type': 'User'}, {'comment_id': 658112711, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 6, 24, 16, 38, 19, tzinfo=datetime.timezone.utc), 'commenter': 'jklymak', 'type': 'User'}, {'comment_id': 658113846, 'comment_body': '```suggestion\r\nThis can be achieved by embedding the *whole* font file within the\r\n```\r\n the embedding isn\'t ""virtual"" is it?', 'comment_created': datetime.datetime(2021, 6, 24, 16, 40, 4, tzinfo=datetime.timezone.utc), 'commenter': 'jklymak', 'type': 'User'}, {'comment_id': 658114337, 'comment_body': '```suggestion\r\noutput document. However, this can lead to very large documents, as font \r\nfiles can be quite large if they have many glyphs.\r\n```', 'comment_created': datetime.datetime(2021, 6, 24, 16, 40, 52, tzinfo=datetime.timezone.utc), 'commenter': 'jklymak', 'type': 'User'}, {'comment_id': 658114723, 'comment_body': '```suggestion\r\nFont subsetting embeds only the *required* glyphs within\r\n```', 'comment_created': datetime.datetime(2021, 6, 24, 16, 41, 23, tzinfo=datetime.timezone.utc), 'commenter': 'jklymak', 'type': 'User'}, {'comment_id': 658116039, 'comment_body': '```suggestion\r\nsubsetting glyphs. (however, recent versions have moved away from ttconv to pure\r\n```', 'comment_created': datetime.datetime(2021, 6, 24, 16, 43, 13, tzinfo=datetime.timezone.utc), 'commenter': 'jklymak', 'type': 'User'}, {'comment_id': 658811761, 'comment_body': 'Yep, added a slightly modified version of this üëçüèº ', 'comment_created': datetime.datetime(2021, 6, 25, 14, 33, 12, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 658811848, 'comment_body': 'üëçüèº ', 'comment_created': datetime.datetime(2021, 6, 25, 14, 33, 21, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 658812593, 'comment_body': ""Virtual in the sense that we don't directly embed the whole file, we embed glyph data in streams. (hence the word, virtual)"", 'comment_created': datetime.datetime(2021, 6, 25, 14, 34, 22, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 658818366, 'comment_body': 'Added a slight modification to this', 'comment_created': datetime.datetime(2021, 6, 25, 14, 42, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 658820264, 'comment_body': 'Actually, subsetting doesn\'t equate to embedding. We embed _after_ we subset, so \'font subsetting\' is a \'way\' to embed...\r\n(maybe ""Font Subsetting can be used to embed..."")', 'comment_created': datetime.datetime(2021, 6, 25, 14, 44, 31, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 658824458, 'comment_body': ""Changed it to 'font data', since all this isn't just for the glyphs but also for other metadata"", 'comment_created': datetime.datetime(2021, 6, 25, 14, 49, 45, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 660999405, 'comment_body': 'I agree with @jklymak that while we may be embedding a transformed version of the font, the ""Virtually"" here is more confusing that helpful.', 'comment_created': datetime.datetime(2021, 6, 29, 22, 14, 21, tzinfo=datetime.timezone.utc), 'commenter': 'tacaswell', 'type': 'User'}, {'comment_id': 661431025, 'comment_body': 'Ah okay, think I understand. Let me update üëçüèº ', 'comment_created': datetime.datetime(2021, 6, 30, 12, 41, 42, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 661585252, 'comment_body': 'Are there other ways to embed only the required glyphs, other than subsetting?  If not, then the phrase ""is a way"" is needlessly indirect and mysterious.  Perhaps you are trying to make a distinction here I dont understand?  ', 'comment_created': datetime.datetime(2021, 6, 30, 15, 28, 38, tzinfo=datetime.timezone.utc), 'commenter': 'jklymak', 'type': 'User'}, {'comment_id': 662673638, 'comment_body': ""Actually there's no connection of 'embedding' with 'subsetting', and I tried to make exactly that distinction.\r\n\r\n_With_ subsetting, the no. of glyphs are reduced, but at no point does it interfere with the 'embedding' part. Embedding is that dumb stage in the pipeline at which we can throw either a subsetted, or a non-subsetted font, and it will embed it in the document happily."", 'comment_created': datetime.datetime(2021, 7, 2, 1, 7, 57, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 662673956, 'comment_body': ""I've anyway changed it to:\r\n```\r\nFont Subsetting can be used before generating documents, to embed only the\r\n*required* glyphs within the documents.\r\n```"", 'comment_created': datetime.datetime(2021, 7, 2, 1, 9, 18, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}]","[{'commit_sha': '72a27f76e66ad739c90019d1a05132e5cf4a9975', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53fc27c8a7c1773430b2b0120ddad6e32762491c', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d8e5b2370546258def42b4571a77ddccdc7361f', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5999170bf06324eda05439d06eb244c57d984bd7', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c94923ea34e3636e9037de9a5034575f6952edbd', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '80b910a3a4f27a03ec833fd83a48873364ea5ca3', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a94f52121cea4194a5d6f6fc94eafdfb03394628', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}]",Aitik Gupta,43996118,aitikgupta@gmail.com,User,,59,,146,254
676302803,[with findfont diff] Parsing all families in font_manager,"## PR Summary
#### This is the beginning of migrating from Matplotlib's ""Font-First"" approach to a ""Text-First"" approach.

The very first step is to parse all families in font manager. Previously, we only parsed families until we find a font file, and the rest of the backends are accustomed to just a single font file (which needs changing)

I'm _hoping_ this breaks many tests, so as to know exactly what to fix at other places.

- Change the return signature of `findfont`, from simple 'str' to 'OrderedDict'
- This OrderedDict would contain fonts defined by `font.family`
    - which are present on the system
    - but also append ""fallback fonts"" in the end. (which is triggered if a certain font family is not found in the system)
 
I've added a bunch of To-Dos (future PRs) and some fixes at some places.
## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [x] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [x] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [x] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",False,20496,https://api.github.com/repos/matplotlib/matplotlib/pulls/20496,https://github.com/matplotlib/matplotlib/pull/20496,closed,86,20,11,15,6,2,0,0,[],2021-06-23 13:43:54+00:00,2022-08-09 21:56:46+00:00,35626372.0,"412 days, 8:12:52","[{'comment_id': 663528717, 'comment_body': ""I don't think you need `.keys()`?"", 'comment_created': datetime.datetime(2021, 7, 4, 16, 40, 51, tzinfo=datetime.timezone.utc), 'commenter': 'jklymak', 'type': 'User'}, {'comment_id': 663557910, 'comment_body': ""ah that's right, I was probably searching for findfont usages within mpl and happen to change this eagerly."", 'comment_created': datetime.datetime(2021, 7, 4, 21, 19, 22, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}]","[{'commit_sha': 'b715ddb39340129a5684d1a53b44d5804c0a800e', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b58d1603ead6079aa4ff3734fee61e5b403f9bc', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1235063bd1609754540dec73343c99aeb3979391', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df939d55e4879bbfb8f9d81da48a84f7361aa976', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5215f1f16167350e433a1287d1b7c174b1f99e95', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc8e5ee57a4edc717c02bfbe9e232d64eb21e32f', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb43b67b859b5377dd05a15f4f7d6f2072b3f80b', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4aa661d4d1fc2fe0af03656861cfec097bfb5860', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af4cef6b69d5b244fa941e947d791e2ab135a578', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d7883167e82e70473e2454e426f43b60ca97354', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a2da73d280002058858e36d99f33ea426cf4f516', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb8c80a7519f086fdc36ef45f8e2efe4985b9e7c', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '804a4571f43be0f8bf5e60bc1b82c98c423e89c7', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1dd195cf38afe2c6d8a396015cf4c9b58a8883be', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c4c4100f7619de8a064dab6a6aa9356195155b0', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}]",Aitik Gupta,43996118,aitikgupta@gmail.com,User,,59,,146,254
680664597,[without findfont diff] Parsing all families in font_manager,"## PR Summary
#### Short Note:
This is a newer and more dynamic approach than https://github.com/matplotlib/matplotlib/pull/20496, which changed findfont's API, thus breaking a lot of backends.
A much more flexible approach would be to gradually move the different backends to `find_fontsprop` instead of `findfont`, since the new function is built _over_ the existing API and acts as a middleware.

#### Quoting previous PR:
This is the beginning of migrating from Matplotlib's ""Font-First"" approach to a ""Text-First"" approach.
The very first step is to parse all families in font manager. Previously, we only parsed families until we find a font file, and the rest of the backends are accustomed to just a single font file (which needs changing)

---
OrderedDict would contain fonts defined by font.family
- which are present on the system
- but also append ""fallback fonts"" in the end. (which is triggered if a certain font family is not found in the system)## PR Checklist

---
<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",False,20549,https://api.github.com/repos/matplotlib/matplotlib/pulls/20549,https://github.com/matplotlib/matplotlib/pull/20549,closed,180,7,3,8,5,25,0,0,[],2021-06-30 08:56:35+00:00,2022-08-15 00:28:47+00:00,35479932.0,"410 days, 15:32:12","[{'comment_id': 667423994, 'comment_body': ""A lot of the matplotlib code is written in a typical Java/C++ style with setters and getters, but I don't think it's necessarily a good way to design Python code. Why not just use `x.families` and `x.filepaths` directly? If it's important that they are not modified after creation, make them tuples so that calling code cannot accidentally append or delete items."", 'comment_created': datetime.datetime(2021, 7, 11, 5, 20, 21, tzinfo=datetime.timezone.utc), 'commenter': 'jkseppan', 'type': 'User'}, {'comment_id': 667424275, 'comment_body': 'A simpler way to write this function:\r\n\r\n```\r\nself.families, self.filepaths = zip(*ordered_family.items())\r\n```\r\n', 'comment_created': datetime.datetime(2021, 7, 11, 5, 23, 6, tzinfo=datetime.timezone.utc), 'commenter': 'jkseppan', 'type': 'User'}, {'comment_id': 667424711, 'comment_body': 'Here would be a great place to add a docstring. Assume the reader doesn\'t know what this class is for - ""FontsInterface"" is quite generic. It doesn\'t have to be long, just a couple sentences about why there is this class and what you could do with it.', 'comment_created': datetime.datetime(2021, 7, 11, 5, 28, 26, tzinfo=datetime.timezone.utc), 'commenter': 'jkseppan', 'type': 'User'}, {'comment_id': 667424952, 'comment_body': 'Again, a docstring would help understand the design. ', 'comment_created': datetime.datetime(2021, 7, 11, 5, 30, 56, tzinfo=datetime.timezone.utc), 'commenter': 'jkseppan', 'type': 'User'}, {'comment_id': 667425435, 'comment_body': ""There is otherwise a nice symmetry between the two code blocks but one updates `fpaths` via assignment and the other updates `fbpaths` via the `update` method. It seems to me they do the same thing, so perhaps this could use assignment as well? It's not a big thing but it catches the eye when scanning the code.\r\n\r\nA completely different question: isn't `self.defaultFamily[fontext]` going to be constant throughout the function, so the fallback dict will always have at most one element? If that is the intended result, perhaps it doesn't need to be called inside the loop but just appended after the loop."", 'comment_created': datetime.datetime(2021, 7, 11, 5, 36, 3, tzinfo=datetime.timezone.utc), 'commenter': 'jkseppan', 'type': 'User'}, {'comment_id': 667425556, 'comment_body': 'Is the `fallback_to_default` argument used at all?', 'comment_created': datetime.datetime(2021, 7, 11, 5, 37, 23, tzinfo=datetime.timezone.utc), 'commenter': 'jkseppan', 'type': 'User'}, {'comment_id': 667425925, 'comment_body': 'You can remove the brackets and will likely even improve the performance ever so slightly: `[f(x) for x in y]` creates a list, `(f(x) for x in y)` a generator that you then feed to the `tuple` function.', 'comment_created': datetime.datetime(2021, 7, 11, 5, 41, 50, tzinfo=datetime.timezone.utc), 'commenter': 'jkseppan', 'type': 'User'}, {'comment_id': 667425983, 'comment_body': '`(_cached_realpath(filename),)` is the conventional (if ugly) Python syntax for a one-element tuple.', 'comment_created': datetime.datetime(2021, 7, 11, 5, 42, 25, tzinfo=datetime.timezone.utc), 'commenter': 'jkseppan', 'type': 'User'}, {'comment_id': 667754489, 'comment_body': ""That makes sense, this class was designed on similar terms to other such public classes, but we don't really want a user to modify these after creation, so it makes sense to keep them as tuples (and possibly make them private?)"", 'comment_created': datetime.datetime(2021, 7, 12, 9, 3, 15, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 667756017, 'comment_body': 'thanks!', 'comment_created': datetime.datetime(2021, 7, 12, 9, 5, 33, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 667756296, 'comment_body': ""Right, I'll add it in the next commits üëçüèº "", 'comment_created': datetime.datetime(2021, 7, 12, 9, 5, 58, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 667766750, 'comment_body': ""The second question is in sync with the first one (and kind of answers it too).\r\nThe 'fallback paths' (or `fbpaths`) mostly have the same path (DejaVu Sans) for each family, so, we don't really have to append it multiple times, rather keep changing the same entry. (note it doesn't necessarily have to be DejaVu Sans for each family, but the way `findfont` works right now is to directly get `defaultFamily` for non-found-family)\r\n"", 'comment_created': datetime.datetime(2021, 7, 12, 9, 20, 8, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 667770819, 'comment_body': ""> A completely different question: isn't self.defaultFamily[fontext] going to be constant throughout the function, so the fallback dict will always have at most one element?\r\n\r\nYes on the first part, but no for the latter part. Fallback dict will only exist if one of the font-families were not found while parsing the list.\r\n\r\n> If that is the intended result, perhaps it doesn't need to be called inside the loop but just appended after the loop.\r\n\r\nThat's true, but currently there's no way to find if there was a fallback, because `findfont` calls `findfont` if fallback_to_default is True, see:\r\nhttps://github.com/matplotlib/matplotlib/blob/c160470aa19263210be00bd22e6940007c6defe4/lib/matplotlib/font_manager.py#L1403-L1416\r\n"", 'comment_created': datetime.datetime(2021, 7, 12, 9, 25, 50, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 667774922, 'comment_body': ""We could add a Try Except clause, but that would mean that the `ValueError` inside `findfont` will never be triggered:\r\n\r\nIterate through the list, call `findfont()` with `fallback_to_default` as False for each. We'll resort to Try Except clause and if a font family is not found, we'll assign a default fallback value and append it at the end of the loop."", 'comment_created': datetime.datetime(2021, 7, 12, 9, 31, 35, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 667777233, 'comment_body': ""I think we'll also have to handle the code block I sent in the previous comment.\r\n\r\nIn a general sense, I designed this to be as less invasive to original API as I could, since it's being used at a lot of places and I didn't want to disturb their workflow."", 'comment_created': datetime.datetime(2021, 7, 12, 9, 34, 57, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 667778810, 'comment_body': ""I think I've covered most of it in the above comment, but to be specific:\r\n\r\nPreviously, `fallback_to_default` was useful since if a font family wasn't found, it would just fallback to default and be done with the parsing. (wouldn't touch the leftover families)\r\n\r\nBut that had to change, to at least parse every item in the list."", 'comment_created': datetime.datetime(2021, 7, 12, 9, 37, 9, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 667779146, 'comment_body': 'makes sense! üëçüèº ', 'comment_created': datetime.datetime(2021, 7, 12, 9, 37, 34, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 667779626, 'comment_body': ""I see, then we wouldn't need the `tuple(...)` anymore. I'll change this üëçüèº "", 'comment_created': datetime.datetime(2021, 7, 12, 9, 38, 14, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 671863040, 'comment_body': 'Removed this class altogether now..', 'comment_created': datetime.datetime(2021, 7, 18, 15, 59, 2, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 671863058, 'comment_body': '^^same as above', 'comment_created': datetime.datetime(2021, 7, 18, 15, 59, 18, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 671863084, 'comment_body': 'Added this bit üëçüèº ', 'comment_created': datetime.datetime(2021, 7, 18, 15, 59, 32, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 671863188, 'comment_body': 'Simplified the logic according to this discussion..', 'comment_created': datetime.datetime(2021, 7, 18, 16, 0, 27, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 673146192, 'comment_body': 'We aim for the writing in the docs to be more formal.\r\n\r\n[We also discussed this on the phone]', 'comment_created': datetime.datetime(2021, 7, 20, 13, 55, 40, tzinfo=datetime.timezone.utc), 'commenter': 'tacaswell', 'type': 'User'}, {'comment_id': 673148939, 'comment_body': 'We talked on the phone about renaming this.  The should invoke that is is going at a) find multiple fonts b) that the order of the returned fonts matters.', 'comment_created': datetime.datetime(2021, 7, 20, 13, 58, 48, tzinfo=datetime.timezone.utc), 'commenter': 'tacaswell', 'type': 'User'}, {'comment_id': 674982860, 'comment_body': 'Some suggestions:\r\n1. `find_fonts`\r\n2. `find_orderedfonts`\r\n3. `find_fontsdict`\r\n4. `find_fontorder`\r\n5. `find_fontset`\r\n6. `find_fontfamilies`\r\n7. `find_orderedfamily`\r\n8. `find_familyordered`\r\n9. `find_families`\r\n10. `find_fontfamilies`', 'comment_created': datetime.datetime(2021, 7, 22, 16, 49, 12, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}]","[{'commit_sha': 'e8775335a67b6ebac3f745086d166e0bc54bc9f2', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc2fb2bc08e19da04753f35c865533c5cd341049', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '778de1feea008c95651f78a5134641b8a92b8c75', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f3f41077c5268eb36bd3e97042aec570f4d3ad7', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ffc56efa3899cc61b4b025c55aef7dc15eae594', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aaf0b0a782245598b07d6eaa878dc2e42b9a73e9', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42fcf0175f87c60c89d4d31197f508f637cd2ae1', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b5ea77b45c09ba6def6c391336da131ef5f4abd', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}]",Aitik Gupta,43996118,aitikgupta@gmail.com,User,,59,,146,254
696573446,Implement Font-Fallback in Matplotlib,"## PR Summary
This PR modifies the internal structure of `FT2Font` (the interface between fonts and Matplotlib) in favor of implementing [Font Fallback](https://www.w3schools.com/css/css_font_fallbacks.asp) for Matplotlib, and allow Agg backend to use the new codepath.
It builds on the previous PR: https://github.com/matplotlib/matplotlib/pull/20549, which was the 'first-step', i.e., ""parsing multiple families"".. this PR implements _using_ those families for font fallback.

This would help us in multi-language support, for example (Previous / After):
<p float=""left"" align=""middle"">
  <img src=""https://user-images.githubusercontent.com/43996118/128605750-9d76fa4a-ce57-45c6-af23-761334d48ef7.png"" width=""45%"" />
  <img src=""https://user-images.githubusercontent.com/43996118/128605746-9f79ebeb-c03d-407e-9e27-c3203a210908.png"" width=""45%"" />
</p>

^the fonts are chosen such that the difference is visually noticeable.

A flowchart explaining the text rendering algorithm with font fallback:
![FontFallback](https://user-images.githubusercontent.com/43996118/129720023-14f5d67f-f279-433f-ad78-e5eccb6c784a.png)

Here's the script:
```python
import matplotlib.pyplot as plt
# ""Authentic"" is a fancy font, whereas ""SimHei"" is a CJK font
plt.rcParams['font.family'] = ['Authentic', 'SimHei']
plt.rcParams['font.size'] = 30

plt.figtext(0.18, 0.45, ""There are Â§ö‰∏™Ê±âÂ≠ó in between!"")
plt.show()
```

Fixes https://github.com/matplotlib/matplotlib/issues/18883, https://github.com/matplotlib/matplotlib/issues/15260

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [x] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [x] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [x] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",True,20740,https://api.github.com/repos/matplotlib/matplotlib/pulls/20740,https://github.com/matplotlib/matplotlib/pull/20740,closed,630,110,10,1,48,135,3,0,"[{'name': 'Release critical'}, {'name': 'backend: agg'}, {'name': 'topic: text/fonts'}]",2021-07-25 22:25:22+00:00,2022-08-04 19:34:14+00:00,32389732.0,"374 days, 21:08:52","[{'comment_id': 730143117, 'comment_body': 'Not sure about the name, maybe `find_fonts_with_props`, `find_fonts_by_props`, maybe spell out `properties`.', 'comment_created': datetime.datetime(2021, 10, 15, 21, 52, 10, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 730144730, 'comment_body': 'I think we usually call it `props`\r\n```suggestion\r\n        props : str or `~matplotlib.font_manager.FontProperties`\r\n```', 'comment_created': datetime.datetime(2021, 10, 15, 21, 56, 36, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 730203347, 'comment_body': ""I don't know what you mean by plugin."", 'comment_created': datetime.datetime(2021, 10, 16, 3, 28, 34, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 730203490, 'comment_body': 'You have no need for the index.\r\n```suggestion\r\n        for family in props.get_family():\r\n```', 'comment_created': datetime.datetime(2021, 10, 16, 3, 29, 59, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 730203702, 'comment_body': '`set_family` returns `None`, not the new `FontProperties` object.', 'comment_created': datetime.datetime(2021, 10, 16, 3, 31, 55, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 730203987, 'comment_body': ""I'm not sure this provides any benefit over calling `_findfont_cached` directly? I see there's a cache here, but does it really help over the one on `_findfont_cached`?"", 'comment_created': datetime.datetime(2021, 10, 16, 3, 35, 1, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 730204208, 'comment_body': 'Should be a list comprehension\r\n```suggestion\r\n    ftobjects = [\r\n        ftobject = ft2font.FT2Font(\r\n            fpath, hinting_factor,\r\n            _kerning_factor=_kerning_factor\r\n        )\r\n        for fpath in fpaths[1:]\r\n    ]\r\n```\r\nMaybe can be inlined in the 0-th call too.', 'comment_created': datetime.datetime(2021, 10, 16, 3, 37, 32, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 730204401, 'comment_body': ""It requires some testing, but I'm not sure if it's better for caching purposes to take/return multiple values here, or to do the looping in `get_font`."", 'comment_created': datetime.datetime(2021, 10, 16, 3, 39, 26, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 730204491, 'comment_body': ""Not sure this is the correct file for this; shouldn't it be in something like `test_font_manager.py`?"", 'comment_created': datetime.datetime(2021, 10, 16, 3, 40, 38, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 730204743, 'comment_body': 'Break after type\r\n```suggestion\r\nstatic FT_UInt\r\nft_get_char_index_or_warn(FT_Face face, FT_ULong charcode, bool warn = true)\r\n```', 'comment_created': datetime.datetime(2021, 10, 16, 3, 42, 40, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 730204862, 'comment_body': 'Always add braces.', 'comment_created': datetime.datetime(2021, 10, 16, 3, 43, 50, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 730204930, 'comment_body': '```suggestion\r\n    for (size_t i = 0; i < fallbacks.size(); i++) {\r\n```', 'comment_created': datetime.datetime(2021, 10, 16, 3, 45, 2, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 730204950, 'comment_body': '```suggestion\r\n    for (size_t i = 0; i < fallbacks.size(); i++) {\r\n```', 'comment_created': datetime.datetime(2021, 10, 16, 3, 45, 14, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 730205032, 'comment_body': 'This is only called in the constructor; is there any benefit to the extra method?', 'comment_created': datetime.datetime(2021, 10, 16, 3, 46, 23, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 730205441, 'comment_body': '```suggestion\r\n    for (size_t i = 0; i < fallbacks.size(); i++) {\r\n```', 'comment_created': datetime.datetime(2021, 10, 16, 3, 50, 17, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 774366312, 'comment_body': ""I'm not sure why you need another variable?"", 'comment_created': datetime.datetime(2021, 12, 23, 7, 14, 47, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 774367658, 'comment_body': 'What tofu specifically? Is it the hex code in a box glyph, or the replacement/missing glyph?', 'comment_created': datetime.datetime(2021, 12, 23, 7, 17, 59, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 774368734, 'comment_body': ""It's multiplying by 64 though..."", 'comment_created': datetime.datetime(2021, 12, 23, 7, 20, 42, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 774368899, 'comment_body': 'Coverage seems to think this is not used?', 'comment_created': datetime.datetime(2021, 12, 23, 7, 21, 11, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 774369828, 'comment_body': '```suggestion\r\n    for (size_t n = 0; n < N; n++) {\r\n```', 'comment_created': datetime.datetime(2021, 12, 23, 7, 23, 28, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 774370023, 'comment_body': ""Again, don't see why we need both `glyph_index` and `final_glyph_index`."", 'comment_created': datetime.datetime(2021, 12, 23, 7, 23, 57, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 774370143, 'comment_body': 'Add braces.', 'comment_created': datetime.datetime(2021, 12, 23, 7, 24, 14, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 774371046, 'comment_body': ""I didn't follow all the caching yet, but is this a permanent change? That is, if you load some text, then load similar text, will the glyph be pulled from the cache and then the second time get both transforms applied?"", 'comment_created': datetime.datetime(2021, 12, 23, 7, 26, 16, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 774373140, 'comment_body': ""Add braces. Coverage says these are untested, I guess we need 'broken' fonts to really check this?"", 'comment_created': datetime.datetime(2021, 12, 23, 7, 31, 12, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 774374645, 'comment_body': 'Should you check this before `FT_Get_Glyph`, or is it safe if `FT_Load_Glyph` has already failed?', 'comment_created': datetime.datetime(2021, 12, 23, 7, 34, 43, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 774375151, 'comment_body': '```suggestion\r\n        for (size_t i = 0; i < fallbacks.size(); ++i) {\r\n```', 'comment_created': datetime.datetime(2021, 12, 23, 7, 36, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 774375532, 'comment_body': 'Coverage is complaining; are there really no tests for fallbacks?', 'comment_created': datetime.datetime(2021, 12, 23, 7, 36, 59, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 774375620, 'comment_body': 'Add braces.', 'comment_created': datetime.datetime(2021, 12, 23, 7, 37, 12, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 774376465, 'comment_body': ""This is only called once, and then there's another time with `FT_Glyph_Get_CBox` directly; do we need the extra function or is the other time wrong?"", 'comment_created': datetime.datetime(2021, 12, 23, 7, 39, 1, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 774379181, 'comment_body': 'What happened to the `typedef`?', 'comment_created': datetime.datetime(2021, 12, 23, 7, 45, 2, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 774380735, 'comment_body': '```suggestion\r\n        for (Py_ssize_t i = 0; i < size; ++i) {\r\n```', 'comment_created': datetime.datetime(2021, 12, 23, 7, 48, 8, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 774381224, 'comment_body': ""This doesn't appear to be saved in the compiled class, so why increment?"", 'comment_created': datetime.datetime(2021, 12, 23, 7, 49, 3, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 774381741, 'comment_body': 'But you _are_ holding on to the items, so you should ref those?', 'comment_created': datetime.datetime(2021, 12, 23, 7, 50, 1, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 774382078, 'comment_body': 'Is this supposed to be parsed as an argument from Python?', 'comment_created': datetime.datetime(2021, 12, 23, 7, 50, 45, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 774385523, 'comment_body': ""I'm not sure why this function can't accept a `std::vector`?"", 'comment_created': datetime.datetime(2021, 12, 23, 7, 57, 50, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 774391089, 'comment_body': ""But it's a `PyObject*`?"", 'comment_created': datetime.datetime(2021, 12, 23, 8, 9, 4, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 774392204, 'comment_body': ""But it's a `PyObject*`?"", 'comment_created': datetime.datetime(2021, 12, 23, 8, 11, 7, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 774392916, 'comment_body': ""But it's a `PyObject*`?"", 'comment_created': datetime.datetime(2021, 12, 23, 8, 12, 36, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 774393772, 'comment_body': 'Did you mean to pass `fallback` here?', 'comment_created': datetime.datetime(2021, 12, 23, 8, 14, 20, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 774394020, 'comment_body': 'Did you mean to pass `fallback` here as well?', 'comment_created': datetime.datetime(2021, 12, 23, 8, 14, 50, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 774394246, 'comment_body': 'Is this a todo?', 'comment_created': datetime.datetime(2021, 12, 23, 8, 15, 14, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 774394414, 'comment_body': 'Should be parsed from the input tuple?', 'comment_created': datetime.datetime(2021, 12, 23, 8, 15, 32, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 790143604, 'comment_body': 'edit: we can put it inside the constructor itself.. however (see below comment)', 'comment_created': datetime.datetime(2022, 1, 22, 13, 38, 33, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 790143696, 'comment_body': ""it's the missing glyph one, will update the comment"", 'comment_created': datetime.datetime(2022, 1, 22, 13, 39, 47, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 790143813, 'comment_body': 'not sure.. this comment was from before. can update it though', 'comment_created': datetime.datetime(2022, 1, 22, 13, 41, 1, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 790143923, 'comment_body': ""yeah we'd need broken fonts to test these errors separately.. not sure if we can add a test for this"", 'comment_created': datetime.datetime(2022, 1, 22, 13, 42, 26, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 790144004, 'comment_body': ""there was one.. but removed it later (since there's no single font that has the same version + kerning throughout the OSs we test)"", 'comment_created': datetime.datetime(2022, 1, 22, 13, 43, 37, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 790144143, 'comment_body': 'We need this other function.. since `FT_Glyph_Get_CBox` is linked to a FT2Font object.. any other object calling a different  `FT_Glyph_Get_CBox` will result in segmentation fault', 'comment_created': datetime.datetime(2022, 1, 22, 13, 45, 8, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 790144284, 'comment_body': ""didn't understand this?"", 'comment_created': datetime.datetime(2022, 1, 22, 13, 46, 54, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 790144526, 'comment_body': 'it can theoretically, this parameter is like a flag to turn fallback off or on.. for now it is on by default, parsing from Python/documenting API change could suit another PR', 'comment_created': datetime.datetime(2022, 1, 22, 13, 49, 49, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 790144625, 'comment_body': 'yeahh, will update comment', 'comment_created': datetime.datetime(2022, 1, 22, 13, 51, 25, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 790144635, 'comment_body': '^same', 'comment_created': datetime.datetime(2022, 1, 22, 13, 51, 30, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 790144639, 'comment_body': '^same', 'comment_created': datetime.datetime(2022, 1, 22, 13, 51, 38, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 790144652, 'comment_body': 'addressed above^', 'comment_created': datetime.datetime(2022, 1, 22, 13, 51, 56, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 790144653, 'comment_body': 'addressed above^', 'comment_created': datetime.datetime(2022, 1, 22, 13, 51, 58, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 790144722, 'comment_body': 'addressed above^', 'comment_created': datetime.datetime(2022, 1, 22, 13, 52, 30, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 790144747, 'comment_body': 'addressed above^', 'comment_created': datetime.datetime(2022, 1, 22, 13, 52, 40, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 790145933, 'comment_body': ""but if we wanted to set the list from a different FT2Font object.. we'd need the function"", 'comment_created': datetime.datetime(2022, 1, 22, 14, 6, 30, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 790146641, 'comment_body': ""we don't.. at that time I didn't wanna mess up the later parts where `glyph_index` was used :p\r\nwill fix"", 'comment_created': datetime.datetime(2022, 1, 22, 14, 14, 58, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 790147171, 'comment_body': 'wow okay, this bit is redundant.. will remove', 'comment_created': datetime.datetime(2022, 1, 22, 14, 21, 18, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 790147325, 'comment_body': 'redundant bit, removed', 'comment_created': datetime.datetime(2022, 1, 22, 14, 22, 24, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 790148797, 'comment_body': ""no not really.. when set_text is called.. a cache will be filled (char_to_font).. which will just point individual characters to their respective `FT2Font`s.. if you load the character again.. it won't iteratively go through the fallback list, since the information is already present in cache.. it will go to that FT2Font and load it."", 'comment_created': datetime.datetime(2022, 1, 22, 14, 38, 29, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 790148912, 'comment_body': ""the glyph itself isn't cached.. only the information of glyph to FT2Font (or char to FT2Font) mapping is cached."", 'comment_created': datetime.datetime(2022, 1, 22, 14, 39, 35, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 790149209, 'comment_body': ""no you're right.. it's better to check charcode error first. will fix"", 'comment_created': datetime.datetime(2022, 1, 22, 14, 43, 26, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 790149826, 'comment_body': 'wait no.. this is actually used in PDF/PS backends.. it is being tested there', 'comment_created': datetime.datetime(2022, 1, 22, 14, 50, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 790150308, 'comment_body': 'I was getting: \r\n```console\r\nwarning: ‚Äòtypedef‚Äô was ignored in this declaration\r\n typedef struct PyFT2Font\r\n```', 'comment_created': datetime.datetime(2022, 1, 22, 14, 55, 6, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 790150457, 'comment_body': ""If you're asking why did I specifying PyFT2Font here.. it's because it's needed in FT2Font class.. there was cross dependency (also see `forward.hpp`)"", 'comment_created': datetime.datetime(2022, 1, 22, 14, 56, 36, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 790150638, 'comment_body': 'The compiled class does hold the fallback list throughout its lifetime.. even when the actual corresponding PyFT2Font is deleted..', 'comment_created': datetime.datetime(2022, 1, 22, 14, 58, 43, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 790151232, 'comment_body': ""Not sure either, even in `set_text` we can directly use `std::vector`. Didn't wanna move a lot of wrapper code around.. so imitated this from the `set_text` flow. Will try this and update here.."", 'comment_created': datetime.datetime(2022, 1, 22, 15, 4, 50, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 790152112, 'comment_body': 'this has been removed..', 'comment_created': datetime.datetime(2022, 1, 22, 15, 15, 17, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 790152419, 'comment_body': ""we need fallback fonts while initializing a single FT2Font, so we either cache them all, or cache none of them..\r\n\r\nIf we cache all:\r\n- can easily be invalidated if we have a different font family\r\n\r\nIf we cache one:\r\n- we can't because we need the whole list of fallbacks for a single initialization\r\n\r\nso it's better to cache all than to cache none?"", 'comment_created': datetime.datetime(2022, 1, 22, 15, 18, 15, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 790312015, 'comment_body': ""yeah.. the underlining logic is a bit different. `_finfont_cached` handles fallback by calling itself, if iteratively any of the font isn't available.. it jumps to the fallback font and terminates the loop, but now instead of terminating, we only want to iterate forward with the list when font isn't found.\r\nAnd that is why it's a 'plugin' over the `_findfont_cached`."", 'comment_created': datetime.datetime(2022, 1, 23, 18, 15, 56, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 790312217, 'comment_body': 'see https://github.com/matplotlib/matplotlib/pull/20740#discussion_r790312015', 'comment_created': datetime.datetime(2022, 1, 23, 18, 17, 40, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 790312322, 'comment_body': 'but the docstring for `findfont` has prop (instead of props).. do you want me to make similar change there as well?', 'comment_created': datetime.datetime(2022, 1, 23, 18, 18, 40, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 790312412, 'comment_body': '`find_fonts_by_props` sounds good.. will update', 'comment_created': datetime.datetime(2022, 1, 23, 18, 19, 30, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 793150363, 'comment_body': 'No, then leave it be.', 'comment_created': datetime.datetime(2022, 1, 27, 0, 3, 40, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 793154358, 'comment_body': 'Where? `fallback_list` is only use in this init function, and not saved on any class or struct.', 'comment_created': datetime.datetime(2022, 1, 27, 0, 14, 3, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 793408657, 'comment_body': ""You are holding on to `FT2Font` in `self->fallbacks`, but it is owned by the`PyFT2Font`. The latter is not ref'd by this class, and thus _could_ be GC'd at any time while this class is in use (if it weren't for the leaking ref on the whole list below.)"", 'comment_created': datetime.datetime(2022, 1, 27, 9, 24, 37, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 810409627, 'comment_body': 'I agree ""plugin"" is a weird wording here.  I see what you mean (it is a function that ""plugs in"" and replaces the previous functionality), however when people say ""plugin"" they tend to be referring to a framework-like scheme where external code can ""plugin"" and get access to internal state of your application / library in a rather invasive way to extend functionality. These systems tend to have a relatively broad API definition and some sort of discovery mechanism (third-party backends hit half of this, pytest extensions hit all of those points).', 'comment_created': datetime.datetime(2022, 2, 19, 0, 7, 29, tzinfo=datetime.timezone.utc), 'commenter': 'tacaswell', 'type': 'User'}, {'comment_id': 810411490, 'comment_body': 'I think this is the right level to cache at as the full fallback list matters.', 'comment_created': datetime.datetime(2022, 2, 19, 0, 15, 32, tzinfo=datetime.timezone.utc), 'commenter': 'tacaswell', 'type': 'User'}, {'comment_id': 810415247, 'comment_body': ""That this sometimes returns `None` and sometimes a font object is not great.  This seems to only be used two places, I agree with @QuLogic that we should in-line the exception handling in both of those places.\r\n\r\n[I'll do this]"", 'comment_created': datetime.datetime(2022, 2, 19, 0, 32, 59, tzinfo=datetime.timezone.utc), 'commenter': 'tacaswell', 'type': 'User'}, {'comment_id': 810452687, 'comment_body': 'The issue here is that we get in a list of Python objects, we then get a borrowed reference of each of those objects, because they are local to the Python side callers the get garbage collected, then we segfault.\r\n\r\nBy keeping a hard ref to the list object that comes in, it in turn keeps a hard-ref to all of its contents and we avoid the segfault (but now leak).\r\n\r\nI think I have a fix...', 'comment_created': datetime.datetime(2022, 2, 19, 6, 4, 25, tzinfo=datetime.timezone.utc), 'commenter': 'tacaswell', 'type': 'User'}, {'comment_id': 878852234, 'comment_body': 'Can we use std::copy instead of the raw loop here?', 'comment_created': datetime.datetime(2022, 5, 22, 12, 15, 41, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 878852989, 'comment_body': '```suggestion\r\n    std::copy(fallback_list.begin(), fallback_list.end(), std::back_inserter(fallbacks));\r\n```', 'comment_created': datetime.datetime(2022, 5, 22, 12, 21, 21, tzinfo=datetime.timezone.utc), 'commenter': 'aitikgupta', 'type': 'User'}, {'comment_id': 882056262, 'comment_body': ""I think we can allow C++11 at least (maybe even 14), so I think that's fine?"", 'comment_created': datetime.datetime(2022, 5, 25, 19, 52, 37, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 908014322, 'comment_body': 'Extra change, looks like', 'comment_created': datetime.datetime(2022, 6, 28, 4, 18, 54, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 908014947, 'comment_body': 'Since dictionaries are ordered now, do we need `OrderedDict`?', 'comment_created': datetime.datetime(2022, 6, 28, 4, 20, 26, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 908030359, 'comment_body': '```suggestion\r\n        Find font families that most closely match the given properties.\r\n```', 'comment_created': datetime.datetime(2022, 6, 28, 4, 56, 2, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 908031731, 'comment_body': '```suggestion\r\n            Key, value pair of families and their corresponding filepaths.\r\n```', 'comment_created': datetime.datetime(2022, 6, 28, 4, 59, 8, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 908073058, 'comment_body': '```suggestion\r\n        returns a single font for the given font properties. Instead, this API\r\n        returns a dictionary containing multiple fonts and their filepaths\r\n```', 'comment_created': datetime.datetime(2022, 6, 28, 6, 14, 45, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 908094407, 'comment_body': ""We don't seem to do `.lower()` in `findfont`?"", 'comment_created': datetime.datetime(2022, 6, 28, 6, 42, 43, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 908095497, 'comment_body': 'Was there a reason for introducing the limit?', 'comment_created': datetime.datetime(2022, 6, 28, 6, 44, 11, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 908097031, 'comment_body': 'Remove.', 'comment_created': datetime.datetime(2022, 6, 28, 6, 46, 5, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 908097781, 'comment_body': ""This doesn't need to return anything now? It's always `0`."", 'comment_created': datetime.datetime(2022, 6, 28, 6, 47, 13, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 908100522, 'comment_body': 'Remove.', 'comment_created': datetime.datetime(2022, 6, 28, 6, 50, 57, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 908107187, 'comment_body': 'Is this guaranteed to be last one if you hit the `!was_found` case on line 519 above?', 'comment_created': datetime.datetime(2022, 6, 28, 6, 59, 10, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 908108111, 'comment_body': 'Extra blank line.', 'comment_created': datetime.datetime(2022, 6, 28, 7, 0, 12, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 908819382, 'comment_body': '```suggestion\r\n        // since it will be assigned to ft_object anyway\r\n        FT2Font *throwaway = NULL;\r\n```', 'comment_created': datetime.datetime(2022, 6, 28, 18, 36, 29, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 911559685, 'comment_body': ""Doesn't exist?"", 'comment_created': datetime.datetime(2022, 7, 1, 2, 2, 40, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 911561041, 'comment_body': ""It's in the docs though..."", 'comment_created': datetime.datetime(2022, 7, 1, 2, 7, 6, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 911561466, 'comment_body': ""It's in the docs..."", 'comment_created': datetime.datetime(2022, 7, 1, 2, 8, 22, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 915252133, 'comment_body': 'The default is a limit of 128 so this gives us a lot more head room.', 'comment_created': datetime.datetime(2022, 7, 6, 21, 0, 28, tzinfo=datetime.timezone.utc), 'commenter': 'tacaswell', 'type': 'User'}, {'comment_id': 915252758, 'comment_body': 'üò¢ ', 'comment_created': datetime.datetime(2022, 7, 6, 21, 1, 19, tzinfo=datetime.timezone.utc), 'commenter': 'tacaswell', 'type': 'User'}, {'comment_id': 915268179, 'comment_body': 'Yes, `ft_object_with_glyph->load_glyph(glyph_index, flags, ft_object_with_glyph, false);` eventually call\r\n\r\n```\r\n    glyphs.push_back(thisGlyph);\r\n```\r\n\r\nwhich pushes a tofu on to the end of glyphs.', 'comment_created': datetime.datetime(2022, 7, 6, 21, 25, 9, tzinfo=datetime.timezone.utc), 'commenter': 'tacaswell', 'type': 'User'}, {'comment_id': 915291139, 'comment_body': 'removed from the docstring.', 'comment_created': datetime.datetime(2022, 7, 6, 22, 4, 34, tzinfo=datetime.timezone.utc), 'commenter': 'tacaswell', 'type': 'User'}, {'comment_id': 915291212, 'comment_body': 'removed from the docstring.', 'comment_created': datetime.datetime(2022, 7, 6, 22, 4, 44, tzinfo=datetime.timezone.utc), 'commenter': 'tacaswell', 'type': 'User'}, {'comment_id': 916231559, 'comment_body': ""I think(?) you should just not kern here (this is also what mathtext does) because you don't even have a guarantee that the glyph indices between the left and right fonts correspond to the same unicode codepoints."", 'comment_created': datetime.datetime(2022, 7, 7, 19, 53, 16, tzinfo=datetime.timezone.utc), 'commenter': 'anntzer', 'type': 'User'}, {'comment_id': 916233797, 'comment_body': 'Just something like `PyObject_IsInstance(item, &PyFT2Font_Type)`, no?  Otherwise this will segfault if you pass in a non-ft2font?', 'comment_created': datetime.datetime(2022, 7, 7, 19, 56, 13, tzinfo=datetime.timezone.utc), 'commenter': 'anntzer', 'type': 'User'}, {'comment_id': 916235487, 'comment_body': ""You can just get rid of the typedef, if you're moving PyFT2Font up."", 'comment_created': datetime.datetime(2022, 7, 7, 19, 58, 40, tzinfo=datetime.timezone.utc), 'commenter': 'anntzer', 'type': 'User'}, {'comment_id': 916292208, 'comment_body': 'This led me down a slightly bigger refactoring of kerning.', 'comment_created': datetime.datetime(2022, 7, 7, 21, 24, 1, tzinfo=datetime.timezone.utc), 'commenter': 'tacaswell', 'type': 'User'}, {'comment_id': 916347851, 'comment_body': '```suggestion\r\nwill try them in order to locate a required glyph.\r\n```', 'comment_created': datetime.datetime(2022, 7, 7, 23, 25, 28, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 916349240, 'comment_body': '```suggestion\r\nbackends is planned for Matplotlib 3.7.\r\n```', 'comment_created': datetime.datetime(2022, 7, 7, 23, 29, 9, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 916353739, 'comment_body': 'Ping on this one?', 'comment_created': datetime.datetime(2022, 7, 7, 23, 41, 40, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 916356037, 'comment_body': 'Sort?', 'comment_created': datetime.datetime(2022, 7, 7, 23, 48, 10, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 916466872, 'comment_body': 'This is 5-space indent now\r\n```suggestion\r\n    if (fallback_list) {\r\n        if (!PyList_Check(fallback_list)) {\r\n            PyErr_SetString(PyExc_TypeError, ""Fallback list must be a list"");\r\n            goto exit;\r\n        }\r\n        Py_ssize_t size = PyList_Size(fallback_list);\r\n\r\n        // go through fallbacks once to make sure the types are right\r\n        for (Py_ssize_t i = 0; i < size; ++i) {\r\n            // this returns a borrowed reference\r\n            PyObject* item = PyList_GetItem(fallback_list, i);\r\n            if (!PyObject_IsInstance(item, PyObject_Type(reinterpret_cast<PyObject *>(self)))) {\r\n                PyErr_SetString(PyExc_TypeError, ""Fallback fonts must be FT2Font objects."");\r\n                goto exit;\r\n            }\r\n        }\r\n```', 'comment_created': datetime.datetime(2022, 7, 8, 5, 7, 38, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 916467740, 'comment_body': '```suggestion\r\n    for (size_t i = 0; i < self->fallbacks.size(); i++) {\r\n        Py_DECREF(self->fallbacks[i]);\r\n    }\r\n```', 'comment_created': datetime.datetime(2022, 7, 8, 5, 9, 56, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 916468684, 'comment_body': '```suggestion\r\n    open_args.stream = &self->stream;\r\n\r\n    if (fallback_list) {\r\n```', 'comment_created': datetime.datetime(2022, 7, 8, 5, 12, 13, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 916468711, 'comment_body': '```suggestion\r\n        }\r\n    }\r\n```', 'comment_created': datetime.datetime(2022, 7, 8, 5, 12, 21, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 916469040, 'comment_body': '```suggestion\r\nimport io\r\n\r\nimport pytest\r\n```', 'comment_created': datetime.datetime(2022, 7, 8, 5, 13, 19, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 916470227, 'comment_body': ""```suggestion\r\n@pytest.mark.parametrize('family_name, file_name',\r\n```"", 'comment_created': datetime.datetime(2022, 7, 8, 5, 16, 36, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 916470275, 'comment_body': '```suggestion\r\ndef test_font_fallback_chinese(fig_test, fig_ref, family_name, file_name):\r\n```', 'comment_created': datetime.datetime(2022, 7, 8, 5, 16, 47, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 916494280, 'comment_body': ""`fname` should be renamed to `filename_dict` or at least `filenames` (plural) for clarity.\r\nGiven that get_font only uses `.values()`, I would suggest making it clearer at this stage too (`filenames = list(find_fonts_by_props(font_prop).values()); font = get_font(filenames)`) (and modify get_font to take a list instead of a dict).  This would also make it easier for third-parties to directly call `get_font` with a list of font paths rather having to invent keys to create a dict, if they don't already have a dict at hand."", 'comment_created': datetime.datetime(2022, 7, 8, 6, 13, 38, tzinfo=datetime.timezone.utc), 'commenter': 'anntzer', 'type': 'User'}, {'comment_id': 917037893, 'comment_body': 'ü§¶üèª My editor was also trying to put tabs in....  ', 'comment_created': datetime.datetime(2022, 7, 8, 18, 5, 12, tzinfo=datetime.timezone.utc), 'commenter': 'tacaswell', 'type': 'User'}, {'comment_id': 917042196, 'comment_body': 'I do not remember why we used a dictionary instead of a list ', 'comment_created': datetime.datetime(2022, 7, 8, 18, 12, 42, tzinfo=datetime.timezone.utc), 'commenter': 'tacaswell', 'type': 'User'}, {'comment_id': 917042592, 'comment_body': ""sorry, this got lost, I'll drop this to be be consistent with `find_fonts`"", 'comment_created': datetime.datetime(2022, 7, 8, 18, 13, 24, tzinfo=datetime.timezone.utc), 'commenter': 'tacaswell', 'type': 'User'}, {'comment_id': 917207505, 'comment_body': '```suggestion\r\n    Get an `ft2font.FT2Font` object given a list of file paths.\r\n```', 'comment_created': datetime.datetime(2022, 7, 9, 2, 7, 6, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 917207524, 'comment_body': ""```suggestion\r\n    font_filepaths : Iterable[str|Path|bytes] | str | Path | bytes\r\n```\r\nbut do we normally do the type hint `|`? Isn't it normally a comma?"", 'comment_created': datetime.datetime(2022, 7, 9, 2, 7, 30, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 917207531, 'comment_body': 'Incomplete sentence.', 'comment_created': datetime.datetime(2022, 7, 9, 2, 7, 39, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 917207578, 'comment_body': '```suggestion\r\n        If a single string, bytes, or `pathlib.Path`, then it will be treated as a\r\n        list with that entry only.\r\n```', 'comment_created': datetime.datetime(2022, 7, 9, 2, 8, 9, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 917207682, 'comment_body': '```suggestion\r\n        If more than one filepath is passed, then the returned FT2Font object\r\n```', 'comment_created': datetime.datetime(2022, 7, 9, 2, 9, 14, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 917207732, 'comment_body': '```suggestion\r\n        will fall back through the fonts, in the order given, to find a needed\r\n        glyph.\r\n```', 'comment_created': datetime.datetime(2022, 7, 9, 2, 9, 36, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 917343909, 'comment_body': 'Doesn\'t render with monospace or `pre`, so no need to align.\r\n```suggestion\r\n    ""- width: glyph width\\n""\r\n    ""- height: glyph height\\n""\r\n    ""- bbox: the glyph bbox (xmin, ymin, xmax, ymax)\\n""\r\n    ""- horiBearingX: left side bearing in horizontal layouts\\n""\r\n    ""- horiBearingY: top side bearing in horizontal layouts\\n""\r\n    ""- horiAdvance: advance width for horizontal layout\\n""\r\n    ""- vertBearingX: left side bearing in vertical layouts\\n""\r\n    ""- vertBearingY: top side bearing in vertical layouts\\n""\r\n    ""- vertAdvance: advance height for vertical layout\\n"";\r\n```', 'comment_created': datetime.datetime(2022, 7, 10, 5, 55, 53, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 917343981, 'comment_body': 'Ditto.\r\n```suggestion\r\n    ""- width: glyph width\\n""\r\n    ""- height: glyph height\\n""\r\n    ""- bbox: the glyph bbox (xmin, ymin, xmax, ymax)\\n""\r\n    ""- horiBearingX: left side bearing in horizontal layouts\\n""\r\n    ""- horiBearingY: top side bearing in horizontal layouts\\n""\r\n    ""- horiAdvance: advance width for horizontal layout\\n""\r\n    ""- vertBearingX: left side bearing in vertical layouts\\n""\r\n    ""- vertBearingY: top side bearing in vertical layouts\\n""\r\n    ""- vertAdvance: advance height for vertical layout\\n"";\r\n```', 'comment_created': datetime.datetime(2022, 7, 10, 5, 56, 42, tzinfo=datetime.timezone.utc), 'commenter': 'QuLogic', 'type': 'User'}, {'comment_id': 917430699, 'comment_body': 'a dict -> a list.\r\nPerhaps make it explicit that not all fonts in `prop` may have a corresponding entry in the list (missing fonts are dropped, and at least one font is returned) (this may have been the original reason to return a dict, but I think returning a list and losing the 1-1 correspondence is just fine, as you still have the old findfont API available anyways).', 'comment_created': datetime.datetime(2022, 7, 10, 18, 24, 17, tzinfo=datetime.timezone.utc), 'commenter': 'anntzer', 'type': 'User'}, {'comment_id': 937166521, 'comment_body': 'did go to a list.', 'comment_created': datetime.datetime(2022, 8, 3, 21, 49, 2, tzinfo=datetime.timezone.utc), 'commenter': 'tacaswell', 'type': 'User'}]","[{'commit_sha': '85bacdccc52094ee885a394416f6aef2fc1d3545', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}]",Aitik Gupta,43996118,aitikgupta@gmail.com,User,,59,,146,254
705800566,Implement multi-font embedding for PDF Backend,"## PR Summary
Adding on to the changes from the original PR: https://github.com/matplotlib/matplotlib/pull/20740, this PR modifies the layout of FT2Font to allow multiple fonts to work with the PDF backend.

Agg backend is simpler to work with, since things like kerning are set within FT2Font, and all we really needed was a bitmap from it. However, for the PDF backend, we need to extract each glyph from a (possibly) parent FT2Font.

To tackle this, I've implemented a caching layer for the parent object, allowing us to directly get the relevant FT2Font which has a certain glyph. Bits and pieces behind how PDF backend handles fonts is also modified.

With this, we can successfully generate Type 3 and Type 42 subsetted multi-font PDFs:
[type3_fallback.pdf](https://github.com/matplotlib/matplotlib/files/6948453/type3_fallback.pdf)
[type42_fallback.pdf](https://github.com/matplotlib/matplotlib/files/6948452/type42_fallback.pdf)

![image](https://user-images.githubusercontent.com/43996118/128584511-5ed95f10-d47c-458e-8d21-39154c4b5233.png)

Test Script:
```python
import matplotlib.pyplot as plt

FONTTYPE = 42    # or 3

plt.rcParams['font.family'] = ['Authentic', 'SimHei']
plt.rcParams['pdf.fonttype'] = FONTTYPE
plt.rcParams['font.size'] = 30
plt.rcParams['pdf.compression'] = 0

plt.figtext(0.18, 0.45, ""There are Â§ö‰∏™Ê±âÂ≠ó in between!"")
plt.savefig(f""type{FONTTYPE}_fallback.pdf"")
```

Builds on: https://github.com/matplotlib/matplotlib/pull/20740/, Fixes #18883, #15260
## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",False,20804,https://api.github.com/repos/matplotlib/matplotlib/pulls/20804,https://github.com/matplotlib/matplotlib/pull/20804,closed,765,119,14,31,3,0,3,0,"[{'name': 'backend: pdf'}, {'name': 'status: needs rebase'}, {'name': 'topic: text/fonts'}]",2021-08-06 23:59:17+00:00,2022-08-12 13:53:08+00:00,32018031.0,"370 days, 13:53:51",[],"[{'commit_sha': 'd0906aaddb9e70960b22fcba48f9b793a111457d', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6f2fd7e0a17fc509463d1b21d5a63830c1852ec', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51997738d72dcce66c44fd15226578ed9efe79d2', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88da97f58f7ac1836468802f28b2dfe685c28aa0', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c6c3a45e07034cbded66f1ec4fad6281beeec070', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e868fbc703b2b3a6978ca6f761823fec1a8b87e8', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4230469b53dc2777f07e702379c19ab05b9e5581', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '991c79622895ef458169fb87e4d1506bfc226cec', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa385eb33252481c8ae97f3b5bc95011f1e66139', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '471ae8cb94a0a16c45c533fe950f176256a73b54', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '86878c86b504d2c333be40f45c18f91bd95f4912', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ccb7de7ca3278c6216c57ba95f4da0d8784fbec', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed495d37ad15c91927add9885bddd889803cf090', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd87ada85783b108dbd4b49da49dd32d2d92f856a', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'adebae487e02f37544b42d9f7fc292104be4ce73', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9983c6610cb39c84e8ef2121170fcebee64c51d1', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ef863e72cc320d9e02505c1134a54651a6e4263', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f12c295101419e0d91f4c2fd9959ac23e1996040', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1327b8239fea21962fd23378417f8d0a93505f56', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '799ffde03c97d95637faca28107585922bba9045', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ce180513e5acde7687670c06294388a4cce5432', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac1c9c9ff553b55e79111cf32bd608b7a9ff77e9', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a30aafa4bc8a4e1bbbe23d2b04254d22d583781', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e67504743c27756b5c990b3fd9b2c738ac51a99a', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b53070f7c5ba8d9edbb855435960e30ae8cbd5a', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e0d92cff3f85db3d74b05ac385c322d13dc069f', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb505100a5dd5304224e54ab11892ce5cb188aab', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70b0e18ea68c614e482858901617784667d6da37', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42b6d6f016c4dfb9566a26d9692bb22fcf0790f6', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8fd0729d75505fcf38749b6b91f51756cadd46c7', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c88286156ed518aa1709066b2364ad424dc9b96', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}]",Aitik Gupta,43996118,aitikgupta@gmail.com,User,,59,,146,254
712233887,Implement multi-font embedding for PS Backend,"## PR Summary
Adding on to the changes from the original PDF PR: https://github.com/matplotlib/matplotlib/pull/20804, this PR modifies the layout of PS backend to allow embedding multiple fonts.

Currently, Type3 multi-font embedding works fine, ~however, Type42 fails to display the glyphs from other font, _even after the font is embedded_ (and subsetted).~

UPDATE: Using a different font seems to output a good Type42 embedding.

[Type3_converted_from_ps.pdf](https://github.com/matplotlib/matplotlib/files/6981560/Type3_converted_from_ps.pdf)
[Type42_converted_from_ps.pdf](https://github.com/matplotlib/matplotlib/files/6981577/Type42_converted_from_ps.pdf)

![image](https://user-images.githubusercontent.com/43996118/129340894-2660e251-9c17-4183-922b-3a4d7f7d2638.png)
^^ Type 3

```python
import matplotlib.pyplot as plt

FONTTYPE = 42    # or 3

plt.rcParams['font.family'] = ['Authentic', 'SimHei']
plt.rcParams['ps.fonttype'] = FONTTYPE
plt.rcParams['font.size'] = 30

plt.figtext(0.18, 0.45, ""There are Â§ö‰∏™Ê±âÂ≠ó in between!"")
plt.savefig(f""type{FONTTYPE}_fallback.ps"")
```
## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [x] Has pytest style unit tests (and `pytest` passes).
- [x] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [x] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [x] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",False,20832,https://api.github.com/repos/matplotlib/matplotlib/pulls/20832,https://github.com/matplotlib/matplotlib/pull/20832,closed,1688,131,15,32,1,0,3,0,"[{'name': 'backend: ps'}, {'name': 'status: needs rebase'}, {'name': 'topic: text/fonts'}]",2021-08-13 10:05:44+00:00,2022-08-12 13:53:41+00:00,31463277.0,"364 days, 3:47:57",[],"[{'commit_sha': '8b2257dbff27e9c66a4c04fdbdc0b77949695826', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8114a54eaf5de3e954684c7831e0a9cfc14376ec', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a4b78c8554b4464a4e82a894ac33afd297a4c2c1', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67dbcf868f64368ff1cd7c4c6f57890a2acdeab8', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69cf28bfbf4f11cb8c90ef7b6cc03ada26bf8762', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd5aef822bcb89052de6b72334529509cd382ea2f', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa82ecddc4cc590d059ef38a0d86ba63baab1a8f', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bea7a2d01ebb671168aa5cdfd519e4e58d56748e', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51173986f27a7d2b73e78a1c59e968eb5d9dee3a', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc413dc243d07f16742c15e1d54f2f635cacca9b', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f42cbd0465dffc97494e93f558bdce6d556f1ad', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c062cdecbd3a21b130c9e5b0322c339513c5be8', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf4f7430af14d4bdec43ae1a78cb695765c149c5', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9950a3eb4b3089dd336486977ce7df9c41129026', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab2f95ae86e74eeeb96097d6ae4fd0425ab2473e', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '41e247df446e1bde8750ead56f0bd901edf84da5', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e5b4daed15fa6d83ec746692c88cfcc12579ec56', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3af91d8926e896a0c73b64b6d8abec1ddfdbbbc7', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ee77f2971c3047fe6b85a3dda5751f2606cee58', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3cacd454a19010ca6a840f2f2db59db1446a2821', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8719e2ee78d8f997c3bbe3bf12986bdc7234973c', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e6c7998d9515fc3fb621ac6c98a11c2f08944133', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f86ec417c2cdeed13d86d14c2fb6d050429f0437', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a6d21cd233e1b93f95507b07ecf87115832cf6bb', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ecf055692ed0ca6da363019ca9e2c8add6b435d7', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b55f011bd6a728d195b31bfa32a5027fe4bd7d48', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83b227da5e2442c222aaee0b49f2d47f64ea3acd', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '913ad4c2b74b0492e76f2d2eb1f3259954ae0d35', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6fe8f44dfbf304c03cb594a50a6e0d3b39b1bf52', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3e7f03c52cd931954966266bb08cd74596c88ff', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '986ecfe21f7b362316c874ebba5776a6b8199a6f', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c85f46bff1e07250dc635c2497f2dcdc8316f7d', 'committer_username': 'aitikgupta', 'committer_name': 'Aitik Gupta', 'committer_email': 'aitikgupta@gmail.com', 'commit_date': datetime.datetime(2018, 10, 9, 14, 10, 9, tzinfo=datetime.timezone.utc)}]",Aitik Gupta,43996118,aitikgupta@gmail.com,User,,59,,146,254

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
1385122,matplotlib,matplotlib/matplotlib,Python,7544,19847,597,1713,50941,1589,23,388,"[{'id': 829486190, 'number': 22284, 'closed': datetime.datetime(2022, 4, 14, 6, 17, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 1, 22, 12, 57, 24, tzinfo=datetime.timezone.utc), 'time_taken': 7060804.0, 'time_delta': '81 days, 17:20:04', 'additions': 17, 'deletions': 4, 'state': 'closed'}, {'id': 712233887, 'number': 20832, 'closed': datetime.datetime(2022, 8, 12, 13, 53, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 13, 10, 5, 44, tzinfo=datetime.timezone.utc), 'time_taken': 31463277.0, 'time_delta': '364 days, 3:47:57', 'additions': 1688, 'deletions': 131, 'state': 'closed'}, {'id': 705800566, 'number': 20804, 'closed': datetime.datetime(2022, 8, 12, 13, 53, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 6, 23, 59, 17, tzinfo=datetime.timezone.utc), 'time_taken': 32018031.0, 'time_delta': '370 days, 13:53:51', 'additions': 765, 'deletions': 119, 'state': 'closed'}, {'id': 696573446, 'number': 20740, 'closed': datetime.datetime(2022, 8, 4, 19, 34, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 25, 22, 25, 22, tzinfo=datetime.timezone.utc), 'time_taken': 32389732.0, 'time_delta': '374 days, 21:08:52', 'additions': 630, 'deletions': 110, 'state': 'closed'}, {'id': 680664597, 'number': 20549, 'closed': datetime.datetime(2022, 8, 15, 0, 28, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 30, 8, 56, 35, tzinfo=datetime.timezone.utc), 'time_taken': 35479932.0, 'time_delta': '410 days, 15:32:12', 'additions': 180, 'deletions': 7, 'state': 'closed'}, {'id': 676302803, 'number': 20496, 'closed': datetime.datetime(2022, 8, 9, 21, 56, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 23, 13, 43, 54, tzinfo=datetime.timezone.utc), 'time_taken': 35626372.0, 'time_delta': '412 days, 8:12:52', 'additions': 86, 'deletions': 20, 'state': 'closed'}, {'id': 671276880, 'number': 20450, 'closed': datetime.datetime(2021, 7, 13, 14, 10, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 16, 9, 51, 20, tzinfo=datetime.timezone.utc), 'time_taken': 2348327.0, 'time_delta': '27 days, 4:18:47', 'additions': 131, 'deletions': 0, 'state': 'closed'}, {'id': 664960118, 'number': 20391, 'closed': datetime.datetime(2021, 7, 26, 13, 2, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 8, 14, 16, 19, tzinfo=datetime.timezone.utc), 'time_taken': 4142769.0, 'time_delta': '47 days, 22:46:09', 'additions': 199, 'deletions': 22, 'state': 'closed'}, {'id': 661966353, 'number': 20367, 'closed': datetime.datetime(2021, 6, 29, 8, 48, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 4, 18, 13, 38, tzinfo=datetime.timezone.utc), 'time_taken': 2126095.0, 'time_delta': '24 days, 14:34:55', 'additions': 51, 'deletions': 2, 'state': 'closed'}, {'id': 660191369, 'number': 20346, 'closed': datetime.datetime(2021, 6, 11, 16, 22, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 2, 15, 54, 8, tzinfo=datetime.timezone.utc), 'time_taken': 779304.0, 'time_delta': '9 days, 0:28:24', 'additions': 47, 'deletions': 16, 'state': 'closed'}, {'id': 645087565, 'number': 20235, 'closed': datetime.datetime(2021, 5, 25, 20, 18, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 15, 5, 47, 1, tzinfo=datetime.timezone.utc), 'time_taken': 916284.0, 'time_delta': '10 days, 14:31:24', 'additions': 28, 'deletions': 0, 'state': 'closed'}, {'id': 571669254, 'number': 19497, 'closed': datetime.datetime(2021, 2, 11, 17, 58, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 11, 9, 7, 42, tzinfo=datetime.timezone.utc), 'time_taken': 31860.0, 'time_delta': '8:51:00', 'additions': 28, 'deletions': 17, 'state': 'closed'}, {'id': 556492163, 'number': 19314, 'closed': datetime.datetime(2021, 2, 10, 3, 7, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 18, 4, 0, 39, tzinfo=datetime.timezone.utc), 'time_taken': 1984031.0, 'time_delta': '22 days, 23:07:11', 'additions': 7459, 'deletions': 4169, 'state': 'closed'}, {'id': 552367764, 'number': 19271, 'closed': None, 'created': datetime.datetime(2021, 1, 10, 23, 33, 30, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 51, 'deletions': 11, 'state': 'open'}, {'id': 520931616, 'number': 18947, 'closed': datetime.datetime(2020, 11, 21, 0, 46, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 11, 14, 1, 29, 9, tzinfo=datetime.timezone.utc), 'time_taken': 602237.0, 'time_delta': '6 days, 23:17:17', 'additions': 54, 'deletions': 2, 'state': 'closed'}, {'id': 517349083, 'number': 18916, 'closed': datetime.datetime(2021, 1, 18, 6, 54, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 11, 8, 18, 24, 13, tzinfo=datetime.timezone.utc), 'time_taken': 6093038.0, 'time_delta': '70 days, 12:30:38', 'additions': 71, 'deletions': 0, 'state': 'closed'}, {'id': 513782831, 'number': 18870, 'closed': datetime.datetime(2021, 5, 13, 14, 16, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 11, 2, 4, 53, 16, tzinfo=datetime.timezone.utc), 'time_taken': 16622594.0, 'time_delta': '192 days, 9:23:14', 'additions': 28, 'deletions': 4, 'state': 'closed'}]"
