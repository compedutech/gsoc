pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
780106150,Fixes #56: WHOIS RIPE analyzer,"# Description

RIPE API WHOIS lookup analyzer added.
## Related issues

<a href = ""https://github.com/intelowlproject/IntelOwl/issues/56"">Here</a> is the issue.

## Type of change

Please delete options that are not relevant.
- [x] New feature (non-breaking change which adds functionality).

# Checklist

- [x] The pull request is for the branch develop
- [x] A new analyzer or connector was added, in which case:
    - [x] [Usage](https://github.com/intelowlproject/IntelOwl/blob/master/docs/source/Usage.md) file was updated.
    - [x] If the analyzer/connector requires mocked testing, `_monkeypatch()` was used in it's class to apply the necessary decorators.

## Screenshot of output:
![Screenshot 2021-11-15 at 1 10 39 PM](https://user-images.githubusercontent.com/60684641/141741402-8847cbb2-98ae-437a-8fec-cf615e39b3cb.png)


",True,763,https://api.github.com/repos/intelowlproject/IntelOwl/pulls/763,https://github.com/intelowlproject/IntelOwl/pull/763,closed,49,0,3,13,3,6,0,0,[],2021-11-14 15:17:49+00:00,2021-11-16 10:03:16+00:00,153927.0,"1 day, 18:45:27","[{'comment_id': 749049396, 'comment_body': 'rename to `WhoIsRipeAPI`. change the same in python_module too.', 'comment_created': datetime.datetime(2021, 11, 15, 7, 4, 55, tzinfo=datetime.timezone.utc), 'commenter': 'eshaan7', 'type': 'User'}, {'comment_id': 749051851, 'comment_body': 'Understood.', 'comment_created': datetime.datetime(2021, 11, 15, 7, 10, 58, tzinfo=datetime.timezone.utc), 'commenter': '0x0elliot', 'type': 'User'}, {'comment_id': 749052262, 'comment_body': 'rename to `WhoIs_RipeDB_Search` and change in Usage.md docs.', 'comment_created': datetime.datetime(2021, 11, 15, 7, 11, 52, tzinfo=datetime.timezone.utc), 'commenter': 'eshaan7', 'type': 'User'}, {'comment_id': 749052913, 'comment_body': 'Change description to:\r\n\r\n```\r\nFetch whois record data of an IP address from Ripe DB using their [search API](https://github.com/RIPE-NCC/whois/wiki/WHOIS-REST-API-search)\r\n```', 'comment_created': datetime.datetime(2021, 11, 15, 7, 13, 34, tzinfo=datetime.timezone.utc), 'commenter': 'eshaan7', 'type': 'User'}, {'comment_id': 749053421, 'comment_body': 'Noted', 'comment_created': datetime.datetime(2021, 11, 15, 7, 14, 51, tzinfo=datetime.timezone.utc), 'commenter': '0x0elliot', 'type': 'User'}, {'comment_id': 749053548, 'comment_body': 'Noted.', 'comment_created': datetime.datetime(2021, 11, 15, 7, 15, 9, tzinfo=datetime.timezone.utc), 'commenter': '0x0elliot', 'type': 'User'}]","[{'commit_sha': '1e7be6bf08b5a23811d476b15d06542255c90197', 'committer_username': 'eshaan7', 'committer_name': 'Eshaan Bansal', 'committer_email': 'eshaan7bansal@gmail.com', 'commit_date': datetime.datetime(2015, 12, 21, 18, 29, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae6315113bffa17583697b3c09bc0d5785c8b7dd', 'committer_username': 'eshaan7', 'committer_name': 'Eshaan Bansal', 'committer_email': 'eshaan7bansal@gmail.com', 'commit_date': datetime.datetime(2015, 12, 21, 18, 29, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '209681eb1b31723f3750171e9ebe6e846b22f219', 'committer_username': 'eshaan7', 'committer_name': 'Eshaan Bansal', 'committer_email': 'eshaan7bansal@gmail.com', 'commit_date': datetime.datetime(2015, 12, 21, 18, 29, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c22af2c15c87d72d5b4a93d7754838f9ddb7732', 'committer_username': 'eshaan7', 'committer_name': 'Eshaan Bansal', 'committer_email': 'eshaan7bansal@gmail.com', 'commit_date': datetime.datetime(2015, 12, 21, 18, 29, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '23c60e23210287b7fd46a003d91248fe43b9da92', 'committer_username': 'eshaan7', 'committer_name': 'Eshaan Bansal', 'committer_email': 'eshaan7bansal@gmail.com', 'commit_date': datetime.datetime(2015, 12, 21, 18, 29, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eaf95756d3af07c6604f8737896100cf22a5a68a', 'committer_username': 'eshaan7', 'committer_name': 'Eshaan Bansal', 'committer_email': 'eshaan7bansal@gmail.com', 'commit_date': datetime.datetime(2015, 12, 21, 18, 29, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bfd5ce8fecdf9afa112d6bae48e6fb0b3a2b357b', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b08a1da78527358b9b2556b039d29f1db42215fb', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b1c42d7fbb9d1291862d71da995243b88040ef30', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3535f295a73d83cb319e9cdd76af03dd53376a31', 'committer_username': 'eshaan7', 'committer_name': 'Eshaan Bansal', 'committer_email': 'eshaan7bansal@gmail.com', 'commit_date': datetime.datetime(2015, 12, 21, 18, 29, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '65ed4aa8d5dcd026e92123d72e968cb003d7659c', 'committer_username': 'eshaan7', 'committer_name': 'Eshaan Bansal', 'committer_email': 'eshaan7bansal@gmail.com', 'commit_date': datetime.datetime(2015, 12, 21, 18, 29, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36220c66a1aa5fc5170f5e3cbb008e7388501dcd', 'committer_username': 'eshaan7', 'committer_name': 'Eshaan Bansal', 'committer_email': 'eshaan7bansal@gmail.com', 'commit_date': datetime.datetime(2015, 12, 21, 18, 29, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90406b22642b02089c6a1594df9cfc16314c1d28', 'committer_username': 'eshaan7', 'committer_name': 'Eshaan Bansal', 'committer_email': 'eshaan7bansal@gmail.com', 'commit_date': datetime.datetime(2015, 12, 21, 18, 29, 8, tzinfo=datetime.timezone.utc)}]",Aditya,60684641,,User,,102,,178,138
780367710,Fixes #634: BitcoinAbuse.com analyzer,"# Description

Check bitcoin addresses using bitcoinabuse.com API to know if they were reported as a scammer before to Bitcoin Abuse's public database.

## Related issues

<a href = ""https://github.com/intelowlproject/IntelOwl/issues/634"">This</a> is the issue.

## Type of change

- [x] New feature (non-breaking change which adds functionality).

# Checklist

- [x] The pull request is for the branch develop
- [x] A new analyzer or connector was added, in which case:
    - [x] [Usage](https://github.com/intelowlproject/IntelOwl/blob/master/docs/source/Usage.md) file was updated.
    - [x] Secrets were added in [env_file_app_template](https://github.com/intelowlproject/IntelOwl/blob/master/docker/env_file_app_template), [env_file_app_ci](https://github.com/certego/IntelOwl/blob/master/docker/env_file_app_ci) and in the [Installation](./Installation.md) docs, if necessary.
    - [x] If the analyzer/connector requires mocked testing, `_monkeypatch()` was used in it's class to apply the necessary decorators.
- [x] The tests gave 0 errors.

I removed the real-world example column because It was an open issue that I solved rather than one I proposed.

## Screenshot of an example
![Screenshot 2021-11-15 at 5 57 53 PM](https://user-images.githubusercontent.com/60684641/141782182-0309a5d3-b48e-419d-bdce-63b9daeed490.png)
",True,764,https://api.github.com/repos/intelowlproject/IntelOwl/pulls/764,https://github.com/intelowlproject/IntelOwl/pull/764,closed,60,0,5,4,4,6,0,0,[],2021-11-15 07:04:17+00:00,2021-11-16 10:02:49+00:00,97112.0,"1 day, 2:58:32","[{'comment_id': 749054104, 'comment_body': 'change to:\r\n\r\n```\r\nCheck a BTC address against bitcoinabuse.com, a public database of BTC addresses used by hackers and criminals.\r\n```', 'comment_created': datetime.datetime(2021, 11, 15, 7, 16, 29, tzinfo=datetime.timezone.utc), 'commenter': 'eshaan7', 'type': 'User'}, {'comment_id': 749054951, 'comment_body': 'revert this', 'comment_created': datetime.datetime(2021, 11, 15, 7, 18, 23, tzinfo=datetime.timezone.utc), 'commenter': 'eshaan7', 'type': 'User'}, {'comment_id': 749055136, 'comment_body': 'https://github.com/intelowlproject/IntelOwl/pull/764/files#r749054104', 'comment_created': datetime.datetime(2021, 11, 15, 7, 18, 50, tzinfo=datetime.timezone.utc), 'commenter': 'eshaan7', 'type': 'User'}, {'comment_id': 749340603, 'comment_body': 'also add `BITCOINABUSE_KEY=test` to the `env_file_app_ci` file.', 'comment_created': datetime.datetime(2021, 11, 15, 13, 46, 47, tzinfo=datetime.timezone.utc), 'commenter': 'eshaan7', 'type': 'User'}, {'comment_id': 749340863, 'comment_body': 'i missed this before', 'comment_created': datetime.datetime(2021, 11, 15, 13, 47, 6, tzinfo=datetime.timezone.utc), 'commenter': 'eshaan7', 'type': 'User'}, {'comment_id': 749582637, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2021, 11, 15, 18, 31, 53, tzinfo=datetime.timezone.utc), 'commenter': '0x0elliot', 'type': 'User'}]","[{'commit_sha': '04476c7983d1b9e960a31de90482b6a6d1f230fd', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb397d6a21aa11da3908a163ee2a3180518b3588', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b0fddb57f1c8d46d1a48aa81c067695f1074b0a', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f02ac0571c471226d542045dd2b26824045104a', 'committer_username': 'eshaan7', 'committer_name': 'Eshaan Bansal', 'committer_email': 'eshaan7bansal@gmail.com', 'commit_date': datetime.datetime(2015, 12, 21, 18, 29, 8, tzinfo=datetime.timezone.utc)}]",Aditya,60684641,,User,,102,,178,138
816400105,Solves #722. Added CAPE Sandbox analyzer,"# Description

Added CAPE Sandbox analyzer.

## Related issues

#722 

## Type of change

- [x] New feature (non-breaking change which adds functionality).

# Checklist

- [x] I have read and understood the rules about [how to Contribute](https://intelowl.readthedocs.io/en/latest/Contribute.html) to this project
- [x] The pull request is for the branch `develop`
- [x] A new analyzer or connector was added, in which case:
    - [x] [Usage](https://github.com/intelowlproject/IntelOwl/blob/master/docs/source/Usage.md) file was updated.
    - [x] [Advanced-Usage](./Advanced-Usage.md) was updated (in case the analyzer/connector provides additional optional configuration).
    - [x] Secrets were added in [env_file_app_template](https://github.com/intelowlproject/IntelOwl/blob/master/docker/env_file_app_template), [env_file_app_ci](https://github.com/certego/IntelOwl/blob/master/docker/env_file_app_ci) and in the [Installation](./Installation.md) docs, if necessary.
    - [x] If the analyzer/connector requires mocked testing, `_monkeypatch()` was used in it's class to apply the necessary decorators.
    - [x] If a File analyzer was added, it's name was explicitly defined in [test_file_scripts.py](https://github.com/intelowlproject/IntelOwl/blob/master/tests/analyzers_manager/test_file_scripts.py) (not required for Observable Analyzers).
- [x] The tests gave 0 errors.
- [x] Linters (`Black`, `Flake`, `Isort`) gave 0 errors. If you have correctly installed [pre-commit](https://intelowl.readthedocs.io/en/latest/Contribute.html#how-to-start-setup-project-and-development-instance), it does these checks and adjustments on your behalf.
- [x] The commits were squashed into a single one (optional, they will be squashed anyway by the maintainer)

# Screenshot of the test run:

#### (Note that the API in use has been disabled for now)

![image](https://user-images.githubusercontent.com/60684641/148679851-ca9d14a4-898c-4f2f-8904-913cfe62a9ef.png)
",True,836,https://api.github.com/repos/intelowlproject/IntelOwl/pulls/836,https://github.com/intelowlproject/IntelOwl/pull/836,closed,350,55,6,27,15,90,0,0,[],2022-01-07 14:10:12+00:00,2022-02-15 11:54:09+00:00,3361437.0,"38 days, 21:43:57","[{'comment_id': 780309453, 'comment_body': 'even if this could be self-managed, I would set it `True` by default', 'comment_created': datetime.datetime(2022, 1, 7, 14, 46, 57, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 780309866, 'comment_body': 'reminder of removal', 'comment_created': datetime.datetime(2022, 1, 7, 14, 47, 33, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 780310837, 'comment_body': 'the name is different from the one in the `analyzer_config.json`. We could explicitly say that this analyzer can be used for private instances too.', 'comment_created': datetime.datetime(2022, 1, 7, 14, 48, 45, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 780311735, 'comment_body': 'comma is missing 😅 . Without it, the 2 strings are merged, causing havoc :P', 'comment_created': datetime.datetime(2022, 1, 7, 14, 49, 38, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 780312242, 'comment_body': 'can we add the chance to customize the URL? in this way we can use this for private intances too', 'comment_created': datetime.datetime(2022, 1, 7, 14, 50, 21, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 780313424, 'comment_body': 'I think we should add a `response.raise_for_status()` and raise AnalyzerRunException in that case. There are a lot of other analyzers using this if you check', 'comment_created': datetime.datetime(2022, 1, 7, 14, 52, 8, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 780313687, 'comment_body': 'care, this key could not exist. Access it safely with `get`', 'comment_created': datetime.datetime(2022, 1, 7, 14, 52, 28, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 780313830, 'comment_body': 'same for this key', 'comment_created': datetime.datetime(2022, 1, 7, 14, 52, 39, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 780314874, 'comment_body': 'we should control the polling. There are a lot of other analyzers who perform this kind of polling. Please go look into them. \r\n\r\nplus, `while True` should never be used because a simple error could bring infinite loops', 'comment_created': datetime.datetime(2022, 1, 7, 14, 54, 9, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 780315462, 'comment_body': 'parenthesis not required for the first condition. Second condition should use `in`', 'comment_created': datetime.datetime(2022, 1, 7, 14, 54, 56, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 780315643, 'comment_body': 'key must be accessed safely', 'comment_created': datetime.datetime(2022, 1, 7, 14, 55, 13, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 780315933, 'comment_body': 'this function should have single `return` for better readibility and maintenance', 'comment_created': datetime.datetime(2022, 1, 7, 14, 55, 41, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 780331832, 'comment_body': '^makes sense. @0x0elliot u can define the URL in the `docker/.env_template` and modify the `secrets` attribute of the analyzer configuration. See cuckoo analyzers for reference.', 'comment_created': datetime.datetime(2022, 1, 7, 15, 20, 11, tzinfo=datetime.timezone.utc), 'commenter': 'eshaan7', 'type': 'User'}, {'comment_id': 780333788, 'comment_body': ""Won't blame Aditya, since this is something I recommended in the other PR. https://github.com/intelowlproject/IntelOwl/pull/792#discussion_r779122902\r\n\r\nmy idea was that we can keep polling until celery's SoftTimeLimit exception is raised."", 'comment_created': datetime.datetime(2022, 1, 7, 15, 23, 12, tzinfo=datetime.timezone.utc), 'commenter': 'eshaan7', 'type': 'User'}, {'comment_id': 780344495, 'comment_body': 'makes sense but I think it is generally bad practice because we are assuming that another implicit mechanism would solve the eventual problem. I would say better safe and put a maximum number of possible loops', 'comment_created': datetime.datetime(2022, 1, 7, 15, 38, 48, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 780375928, 'comment_body': 'Understood. Is there a particular analyzer you can redirect me to which does polling? ', 'comment_created': datetime.datetime(2022, 1, 7, 16, 26, 16, tzinfo=datetime.timezone.utc), 'commenter': '0x0elliot', 'type': 'User'}, {'comment_id': 780633929, 'comment_body': 'Found it! https://github.com/intelowlproject/IntelOwl/blob/5998d1cbc0fec5ed4c72cc2fa3e052b0e0c05261/api_app/analyzers_manager/observable_analyzers/pulsedive.py#L77', 'comment_created': datetime.datetime(2022, 1, 8, 5, 18, 22, tzinfo=datetime.timezone.utc), 'commenter': '0x0elliot', 'type': 'User'}, {'comment_id': 780701577, 'comment_body': 'Noted', 'comment_created': datetime.datetime(2022, 1, 8, 19, 31, 22, tzinfo=datetime.timezone.utc), 'commenter': '0x0elliot', 'type': 'User'}, {'comment_id': 780701685, 'comment_body': 'Noted.', 'comment_created': datetime.datetime(2022, 1, 8, 19, 32, 20, tzinfo=datetime.timezone.utc), 'commenter': '0x0elliot', 'type': 'User'}, {'comment_id': 780701697, 'comment_body': 'Noted and fixed.', 'comment_created': datetime.datetime(2022, 1, 8, 19, 32, 33, tzinfo=datetime.timezone.utc), 'commenter': '0x0elliot', 'type': 'User'}, {'comment_id': 780701709, 'comment_body': 'Noted', 'comment_created': datetime.datetime(2022, 1, 8, 19, 32, 43, tzinfo=datetime.timezone.utc), 'commenter': '0x0elliot', 'type': 'User'}, {'comment_id': 780701737, 'comment_body': 'Why `in` matteo?', 'comment_created': datetime.datetime(2022, 1, 8, 19, 33, 14, tzinfo=datetime.timezone.utc), 'commenter': '0x0elliot', 'type': 'User'}, {'comment_id': 780701785, 'comment_body': 'Noted and taken care of. ', 'comment_created': datetime.datetime(2022, 1, 8, 19, 33, 35, tzinfo=datetime.timezone.utc), 'commenter': '0x0elliot', 'type': 'User'}, {'comment_id': 780701841, 'comment_body': 'i will be instead raising the error returned here. ', 'comment_created': datetime.datetime(2022, 1, 8, 19, 34, 9, tzinfo=datetime.timezone.utc), 'commenter': '0x0elliot', 'type': 'User'}, {'comment_id': 780701892, 'comment_body': 'Noted. ', 'comment_created': datetime.datetime(2022, 1, 8, 19, 34, 42, tzinfo=datetime.timezone.utc), 'commenter': '0x0elliot', 'type': 'User'}, {'comment_id': 780766531, 'comment_body': ' i did it the way cuckoo did it.', 'comment_created': datetime.datetime(2022, 1, 9, 11, 5, 8, tzinfo=datetime.timezone.utc), 'commenter': '0x0elliot', 'type': 'User'}, {'comment_id': 780766978, 'comment_body': 'As in, It always returns the whole string ""reported"" or ""completed"" accordingly. I usually use `in` only when i need to check if one string co-insides with another. I will definitely add it as well but I wanted to understand why did you feel the need for it?', 'comment_created': datetime.datetime(2022, 1, 9, 11, 8, 53, tzinfo=datetime.timezone.utc), 'commenter': '0x0elliot', 'type': 'User'}, {'comment_id': 780767195, 'comment_body': 'i see what you meant! https://deepsource.io/gh/intelowlproject/IntelOwl/run/55667e73-a3d2-4e5c-94ee-b8d92e1f4da6/python/PYL-R1714', 'comment_created': datetime.datetime(2022, 1, 9, 11, 10, 41, tzinfo=datetime.timezone.utc), 'commenter': '0x0elliot', 'type': 'User'}, {'comment_id': 781011394, 'comment_body': ""yeah coming late to your questions but I see you solved your questions by yourself. :P That's appreciated."", 'comment_created': datetime.datetime(2022, 1, 10, 9, 23, 26, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 781128910, 'comment_body': 'please set a fake url here. This file is used by the Github Action', 'comment_created': datetime.datetime(2022, 1, 10, 11, 56, 45, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 781130056, 'comment_body': 'you mocked only the `get` and not the `post` method. this is why the error persists', 'comment_created': datetime.datetime(2022, 1, 10, 11, 58, 38, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 781163158, 'comment_body': ""ahh right. didn't notice that."", 'comment_created': datetime.datetime(2022, 1, 10, 12, 49, 23, tzinfo=datetime.timezone.utc), 'commenter': '0x0elliot', 'type': 'User'}, {'comment_id': 781163235, 'comment_body': 'will do!', 'comment_created': datetime.datetime(2022, 1, 10, 12, 49, 30, tzinfo=datetime.timezone.utc), 'commenter': '0x0elliot', 'type': 'User'}, {'comment_id': 781357013, 'comment_body': 'I might need a minute to implement proper mock tests. Will request a review when I am done. ', 'comment_created': datetime.datetime(2022, 1, 10, 16, 36, 48, tzinfo=datetime.timezone.utc), 'commenter': '0x0elliot', 'type': 'User'}, {'comment_id': 782751533, 'comment_body': 'rename to `self.__base_url`.', 'comment_created': datetime.datetime(2022, 1, 12, 6, 46, 58, tzinfo=datetime.timezone.utc), 'commenter': 'eshaan7', 'type': 'User'}, {'comment_id': 782751615, 'comment_body': 'rename to `api_url`.', 'comment_created': datetime.datetime(2022, 1, 12, 6, 47, 7, tzinfo=datetime.timezone.utc), 'commenter': 'eshaan7', 'type': 'User'}, {'comment_id': 782752045, 'comment_body': 'create a `self.__session = requests.Session(headers={..})` inside `set_params` method and use this session object for making requests.', 'comment_created': datetime.datetime(2022, 1, 12, 6, 48, 11, tzinfo=datetime.timezone.utc), 'commenter': 'eshaan7', 'type': 'User'}, {'comment_id': 782752576, 'comment_body': 'this statement should come _after_ the `response.raise_for_status()`. Ideally after the try/catch.', 'comment_created': datetime.datetime(2022, 1, 12, 6, 49, 16, tzinfo=datetime.timezone.utc), 'commenter': 'eshaan7', 'type': 'User'}, {'comment_id': 782754394, 'comment_body': ""Don't store as `self.task_id`. Instead pass the `task_id` as an argument to `__poll_for_result` and build the `status_api` URL inside that function.\r\n\r\nWe should avoid setting variables to `self` as much as possible."", 'comment_created': datetime.datetime(2022, 1, 12, 6, 51, 40, tzinfo=datetime.timezone.utc), 'commenter': 'eshaan7', 'type': 'User'}, {'comment_id': 782755169, 'comment_body': 'the default is `false` only so better to remove this from here.', 'comment_created': datetime.datetime(2022, 1, 12, 6, 52, 43, tzinfo=datetime.timezone.utc), 'commenter': 'eshaan7', 'type': 'User'}, {'comment_id': 782755465, 'comment_body': ""rename `token` to `api_key_name` because that's the naming convention followed by other analyzers too."", 'comment_created': datetime.datetime(2022, 1, 12, 6, 53, 20, tzinfo=datetime.timezone.utc), 'commenter': 'eshaan7', 'type': 'User'}, {'comment_id': 782755642, 'comment_body': 'Install a JSON formatter in your IDE, the indentation here is messed up.', 'comment_created': datetime.datetime(2022, 1, 12, 6, 53, 46, tzinfo=datetime.timezone.utc), 'commenter': 'eshaan7', 'type': 'User'}, {'comment_id': 782756423, 'comment_body': 'set this to a class variable `poll_distance`. Same as u have done with `max_tries`.', 'comment_created': datetime.datetime(2022, 1, 12, 6, 55, 27, tzinfo=datetime.timezone.utc), 'commenter': 'eshaan7', 'type': 'User'}, {'comment_id': 782757001, 'comment_body': 'I think a better logic here would be:\r\n\r\n(inside the `try:`)\r\n```python3\r\nif r.status_code == 429:\r\n    time.sleep(self.poll_distance)  # 429 = too many requests so we wait before next request\r\nelse:\r\n    r.raise_for_status()\r\n```', 'comment_created': datetime.datetime(2022, 1, 12, 6, 56, 46, tzinfo=datetime.timezone.utc), 'commenter': 'eshaan7', 'type': 'User'}, {'comment_id': 782757784, 'comment_body': 'since these are used only once, can just pass them directly to the `requests.post` function instead of defining explicitly before.', 'comment_created': datetime.datetime(2022, 1, 12, 6, 58, 25, tzinfo=datetime.timezone.utc), 'commenter': 'eshaan7', 'type': 'User'}, {'comment_id': 782758974, 'comment_body': ""I don't like the use of the `self.to_respond`. There should be better segregation of responsibilities.\r\n\r\nAs u can see in most other analyzers, we maintain a `result` dictionary and the return value from `__poll_for_result` function and others are updated in `result` at the very end just before `return result` statement in `run` function."", 'comment_created': datetime.datetime(2022, 1, 12, 7, 1, 2, tzinfo=datetime.timezone.utc), 'commenter': 'eshaan7', 'type': 'User'}, {'comment_id': 782759962, 'comment_body': 'missing `raise_for_status`.', 'comment_created': datetime.datetime(2022, 1, 12, 7, 3, 8, tzinfo=datetime.timezone.utc), 'commenter': 'eshaan7', 'type': 'User'}, {'comment_id': 782765950, 'comment_body': 'here u are checking ""error"" key but on line 48 you are checking ""errors"". I assume it\'s a typo ? or does their API send both in response ?', 'comment_created': datetime.datetime(2022, 1, 12, 7, 16, 19, tzinfo=datetime.timezone.utc), 'commenter': 'eshaan7', 'type': 'User'}, {'comment_id': 782767492, 'comment_body': ""this whole part should be extracted to smaller functions. \r\n\r\n- Line 51 - 60 to something like `__search_by_md5`.\r\n- and isn't lines 61 - 75 similar to `__poll_for_result` ? so we can just re-use that function."", 'comment_created': datetime.datetime(2022, 1, 12, 7, 19, 38, tzinfo=datetime.timezone.utc), 'commenter': 'eshaan7', 'type': 'User'}, {'comment_id': 782769379, 'comment_body': 'Same applies for all the different `_url` variables before making request. You can pass them directly to the function. It reduces the number of code lines and makes the code more self-explanatory.', 'comment_created': datetime.datetime(2022, 1, 12, 7, 22, 21, tzinfo=datetime.timezone.utc), 'commenter': 'eshaan7', 'type': 'User'}, {'comment_id': 783111825, 'comment_body': 'oh right! This is a better way to proceed forward with multiple authenticated requests.', 'comment_created': datetime.datetime(2022, 1, 12, 14, 14, 13, tzinfo=datetime.timezone.utc), 'commenter': '0x0elliot', 'type': 'User'}, {'comment_id': 783114339, 'comment_body': 'It sends both in the response.', 'comment_created': datetime.datetime(2022, 1, 12, 14, 17, 1, tzinfo=datetime.timezone.utc), 'commenter': '0x0elliot', 'type': 'User'}, {'comment_id': 785308353, 'comment_body': 'Took care of the first part for now. Would look into the second part after I have a stable working draft ready.', 'comment_created': datetime.datetime(2022, 1, 15, 13, 31, tzinfo=datetime.timezone.utc), 'commenter': '0x0elliot', 'type': 'User'}, {'comment_id': 785308534, 'comment_body': 'Implemented it this very way.', 'comment_created': datetime.datetime(2022, 1, 15, 13, 32, 23, tzinfo=datetime.timezone.utc), 'commenter': '0x0elliot', 'type': 'User'}, {'comment_id': 785308579, 'comment_body': 'Gotcha', 'comment_created': datetime.datetime(2022, 1, 15, 13, 33, 16, tzinfo=datetime.timezone.utc), 'commenter': '0x0elliot', 'type': 'User'}, {'comment_id': 785310425, 'comment_body': 'Done this for `docker_based`', 'comment_created': datetime.datetime(2022, 1, 15, 13, 56, 49, tzinfo=datetime.timezone.utc), 'commenter': '0x0elliot', 'type': 'User'}, {'comment_id': 797684913, 'comment_body': 'honestly I do not like that we use multiple `return` clauses here.\r\nIt would be enough to just return `to_respond` variable once at the end, assign `response_json` to `to_respond` value whether the particular cases are not hit.', 'comment_created': datetime.datetime(2022, 2, 2, 14, 49, 19, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 797688394, 'comment_body': 'can you provide as a comment an example on how the data structure of `response_json.get(""errors"")` would be in this special case?\r\n\r\nalso a more detailed explanation would help the next developer touching this code. ', 'comment_created': datetime.datetime(2022, 2, 2, 14, 52, 30, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 797691451, 'comment_body': 'too complex this line + does not handle the case that the `data` key is not a populated list (that would raise an unexpected error). Plus, there is no check that the `status_id` is an integer as expected.', 'comment_created': datetime.datetime(2022, 2, 2, 14, 55, 12, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 797693591, 'comment_body': 'this should not raise `AnalyzerRunException` because there are other tries. That exception interrupts the analyzer and should be raised only for unrecoverable errors (for instance when we do not get the answer after *all* the tries has performed)', 'comment_created': datetime.datetime(2022, 2, 2, 14, 57, 8, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 797694225, 'comment_body': 'first parenthesis are not needed', 'comment_created': datetime.datetime(2022, 2, 2, 14, 57, 44, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 797698367, 'comment_body': 'it is always better to first manage clauses _positive_ conditions (without `not`) for better clarity', 'comment_created': datetime.datetime(2022, 2, 2, 15, 1, 36, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 797700778, 'comment_body': 'this number should not be hardcoded but a configurable variable. See other similar analyzers (when we used `poll_distance`)', 'comment_created': datetime.datetime(2022, 2, 2, 15, 3, 26, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 798425358, 'comment_body': 'In that case, I will just check for any errors before and raise them earlier. ', 'comment_created': datetime.datetime(2022, 2, 3, 10, 32, 54, tzinfo=datetime.timezone.utc), 'commenter': '0x0elliot', 'type': 'User'}, {'comment_id': 798602736, 'comment_body': ""```\r\n{'error': True, 'error_value': 'Error adding task to database', 'errors': [{'60684641.png': 'Not unique, as unique option set on submit or in conf/web.conf'}]}\r\n```\r\n\r\nThis is what `response_json` looked like for my test image which I had already uploaded before. I am adding the necessary comments which explain everything nicely."", 'comment_created': datetime.datetime(2022, 2, 3, 14, 12, 52, tzinfo=datetime.timezone.utc), 'commenter': '0x0elliot', 'type': 'User'}, {'comment_id': 799461682, 'comment_body': '> Plus, there is no check that the status_id is an integer as expected.\r\n\r\nI don\'t exactly get it Matteo. Whatever comes out of this  `str(q.json().get(""data"")[0].get(""id""))` is being converted into a `string` by the `str()` function. So why should I check?\r\n\r\n> too complex this line + does not handle the case that the data key is not a populated list \r\n\r\nI will try breaking this line down into simpler lines in that case. ', 'comment_created': datetime.datetime(2022, 2, 4, 13, 25, 10, tzinfo=datetime.timezone.utc), 'commenter': '0x0elliot', 'type': 'User'}, {'comment_id': 799498578, 'comment_body': 'yeah first point my mistake', 'comment_created': datetime.datetime(2022, 2, 4, 14, 12, 8, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 800502358, 'comment_body': 'there is no need to add the level of the log in the message. This is already done by the formatter.', 'comment_created': datetime.datetime(2022, 2, 7, 10, 15, 13, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 800502506, 'comment_body': 'another log here too please?', 'comment_created': datetime.datetime(2022, 2, 7, 10, 15, 23, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 800503564, 'comment_body': 'you fixed below the `return` but you could also do it here', 'comment_created': datetime.datetime(2022, 2, 7, 10, 16, 35, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 800503774, 'comment_body': 'another log here too please?\r\n\r\n', 'comment_created': datetime.datetime(2022, 2, 7, 10, 16, 52, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 800509226, 'comment_body': 'I do not understand this log. I think it should be before the previous check and should not say that there is an ""unhandled exception""', 'comment_created': datetime.datetime(2022, 2, 7, 10, 23, 10, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 800509632, 'comment_body': 'honestly I do not like such kind of inline calculation. This could better be handled by a bool flag that is checked at the end of the loop', 'comment_created': datetime.datetime(2022, 2, 7, 10, 23, 40, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 800510554, 'comment_body': 'a question: so either you sleep or you raise an exception? So where is the ""normal and right"" case with the 200 status code?', 'comment_created': datetime.datetime(2022, 2, 7, 10, 24, 43, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 800512336, 'comment_body': ""again I don't like that it is not clear which are the possible returns in this function. Please just use a single return at the end of the function that manages all cases"", 'comment_created': datetime.datetime(2022, 2, 7, 10, 26, 47, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 800512815, 'comment_body': 'no inline calculation please, use variables', 'comment_created': datetime.datetime(2022, 2, 7, 10, 27, 21, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 800516522, 'comment_body': 'plus, why there is a sleep here and then you do not continue the loop? I mean, the logic is really difficult to follow in this for clause. You also do a sleep later. Please manage those sleeps with a single custom exception that, when is triggered, it performs the sleep and continues the loop', 'comment_created': datetime.datetime(2022, 2, 7, 10, 31, 48, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 800517604, 'comment_body': 'just a single `return` at the end of the code also here please', 'comment_created': datetime.datetime(2022, 2, 7, 10, 33, 5, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 800518945, 'comment_body': 'if you put the log in this case, you should put it also in the previous one. \r\n\r\nYou need to imagine that, with the logs, it is possible to completely understand the flow of the code. If there are possible paths without logs, it is not acceptable and it would create confusion to the person who is debugging the code', 'comment_created': datetime.datetime(2022, 2, 7, 10, 34, 44, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 801005548, 'comment_body': ""There is only one return for this part. That's why I left it here Matteo!"", 'comment_created': datetime.datetime(2022, 2, 7, 19, 51, 7, tzinfo=datetime.timezone.utc), 'commenter': '0x0elliot', 'type': 'User'}, {'comment_id': 801369416, 'comment_body': '""a single return at the end of the **function**.""\r\n\r\nThe point is that if you put multiple `return`, it is really difficult to quickly understand the possible outputs of  this function.\r\n\r\nOn the contrary, if you just use a single return at the end of the function with a variable, you can just follow the variable through the code.\r\n\r\nAlso, you made a mix between variables. I would have expect that the `to_respond` would have been the return value but then you overwrite the JSON response `response_json = to_respond`. This is all confusing.\r\n\r\nYou should just use a variable that you leverage as a single return value and then assign to it the correspondent value based on the conditions. No overwrites and multiple return values', 'comment_created': datetime.datetime(2022, 2, 8, 8, 24, 33, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 802886820, 'comment_body': ""You're right. I don't think I should log this either since the error will anyway show up in the logs once I raise it. "", 'comment_created': datetime.datetime(2022, 2, 9, 16, 56, 53, tzinfo=datetime.timezone.utc), 'commenter': '0x0elliot', 'type': 'User'}, {'comment_id': 802892740, 'comment_body': 'Oh I now remember why I added it there. You recommended me to check only if there was an exception happening and not stop till the last poll. So I do not want to raise an exception when it comes but rather log it. Maybe <code>logger.error()</code> is the better way to go about this? I will remove ""unhandled exception"" and instead just log the error <code>e</code> ', 'comment_created': datetime.datetime(2022, 2, 9, 17, 2, 42, tzinfo=datetime.timezone.utc), 'commenter': '0x0elliot', 'type': 'User'}, {'comment_id': 802903545, 'comment_body': 'Understood. I appreciate your patience and guidance. I learn a lot of these little things while making these contributions. ', 'comment_created': datetime.datetime(2022, 2, 9, 17, 14, tzinfo=datetime.timezone.utc), 'commenter': '0x0elliot', 'type': 'User'}, {'comment_id': 802924426, 'comment_body': '> a question: so either you sleep or you raise an exception? So where is the ""normal and right"" case with the 200 status code?\r\n\r\nIf by exception you mean the 429 response (rate-limited) then yes. I do. I then only sleep again if the analysis at CAPESandbox is ""pending"", ""running"" or ""processing"". And the loop continues as well. Even when there is an exception (Until the exception is in the <b>last</b> poll itself. For this flow, After taking your recommendation, I only choose to <a href = ""https://github.com/intelowlproject/IntelOwl/blob/03a5ce75fd20294abd5c7efa7e9c57eef0383604/api_app/analyzers_manager/file_analyzers/cape_sandbox.py#L151"">log the exceptions for this block for usual polls</a> but if it\'s <a href = ""https://github.com/intelowlproject/IntelOwl/blob/03a5ce75fd20294abd5c7efa7e9c57eef0383604/api_app/analyzers_manager/file_analyzers/cape_sandbox.py#L148"">the last one, I am trying to raise an exception instead</a>. I will fix it so that the error message is outside the loop.)', 'comment_created': datetime.datetime(2022, 2, 9, 17, 36, 11, tzinfo=datetime.timezone.utc), 'commenter': '0x0elliot', 'type': 'User'}, {'comment_id': 802925191, 'comment_body': '> Please manage those sleeps with a single custom exception that, when is triggered, it performs the sleep and continues the loop\r\n\r\nGood suggestion. Will do. ', 'comment_created': datetime.datetime(2022, 2, 9, 17, 37, 6, tzinfo=datetime.timezone.utc), 'commenter': '0x0elliot', 'type': 'User'}, {'comment_id': 802945701, 'comment_body': 'Understood. I left it there assuming that celery logs would anyway report the log as completed right after this because the last condition is the condition where the outputs are supposed to be returned. But I will add it there anyway. ', 'comment_created': datetime.datetime(2022, 2, 9, 18, 0, 25, tzinfo=datetime.timezone.utc), 'commenter': '0x0elliot', 'type': 'User'}, {'comment_id': 805664410, 'comment_body': 'Now is better than before but there are still some problems. My point was: when something happens and you need to continue the loop, you should handle it appropriately at that specific time.\r\n\r\nFor instance, here (with the 429 status code) you want to sleep and continue the loop but...it does not happen exactly here, while it should. On the contrary you wait for the end of the code to do that. That is not how it should work. You should trigger a Custom Exception here that would bring you directly at the end of the code of the loop where there is a log + sleep.\r\n\r\nSame thing for what happens after the `RequestException`. Also there you don\'t manage the problem directly. In both cases, you should raise the same Custom Exception that would bring you here:\r\n```\r\n            logger.info(\r\n                f""Job: {self.job_id} -> ""\r\n                f""Analysis status: {data}. ""\r\n                f""Sleeping for {self.poll_distance} seconds before next attempt.""\r\n            )\r\n            time.sleep(self.poll_distance)\r\n```\r\n\r\nI mean, you need to separate the part where you handle the loop for the first request and the part where you handle the results and do not mix them\r\n ', 'comment_created': datetime.datetime(2022, 2, 14, 9, 45, 56, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 805669492, 'comment_body': 'this cannot be at `exception` level because this is not something problematic. It is normal that this would happen', 'comment_created': datetime.datetime(2022, 2, 14, 9, 51, 35, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 806225818, 'comment_body': 'Okay I will simply log it then? ', 'comment_created': datetime.datetime(2022, 2, 14, 20, 46, 47, tzinfo=datetime.timezone.utc), 'commenter': '0x0elliot', 'type': 'User'}]","[{'commit_sha': 'a2df0a629dcc552021adca571f1f4f688f539a54', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40b81c8cfeeb6d50a587ea6118fca51c9e8b7f8c', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f561f973006563882a135aee4bb5a9ea20ffde5e', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c743499454b60e8e86db9fbcbb3224af4884e432', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c6572bd191832c9437f1dc99ff21a42581f59140', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f0ac27aebfcba2c5d3a48a4ea4eb57f640d34666', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b937d52653796e985e33e4f31d7949eb63ad221c', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2f83cd1d7a598c909f346e52f4d977a3fd63f317', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b56c378f6a36e89698dd8481726cf1530425a94d', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5db9bc2f0b363ac7a34279a0029a38b119db4590', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d185b325b93af19041998185dffe477c8fc4e04', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f90a76b3dbe28733f4a8f2f102b675ebaa2c6a54', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51fc313242c779945aeabd7b7cf3c79a9d724150', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec1f823d5770cb2b8bb3a9cd00ae7cf15c9aa73d', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df00d6ed9b588e901a4211ad251a394fac12b2e4', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4cc093df399b82be8c781432051633b2542e3ef6', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40fa2c0408eb4ee5cc52ce5cb82533db5b4cb402', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '035d1960120557ea6cb65620a0edf92b6d65e096', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '01061dc4183c8b2a1d316e6423db0a36099a7759', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '245a9a590e6e31c1694961ba443dd8a685d4fec6', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b93392ab412ea608163410b036891f977caaeecf', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03a5ce75fd20294abd5c7efa7e9c57eef0383604', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3240dd047e64ed2723c6ae76a5ca71c715dbfda', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '757a19acf0448fae6afb7343e07d0a3c7848922e', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e69914b020bf2fa1b2bf32514b8d49a3ef94491c', 'committer_username': 'mlodic', 'committer_name': 'Matteo Lodi', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 1, 12, 6, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '41e8d7d3df976d43be8665fd95c58a340bc206ca', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eeecdd087687297c0ef34c5c01ff24e6a04529b0', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}]",Aditya,60684641,,User,,102,,178,138
795322868,Fixes #428: Add `Mnemonic_PassiveDNS` analyzer,"# Description

Added the <a href = ""https://docs.mnemonic.no/display/public/API/PassiveDNS+Integration+Guide"">PassiveDNS</a> analyzer.

## Related issues

#428

## Type of change

- [x] New feature (non-breaking change which adds functionality).

# Checklist

- [x] The pull request is for the branch develop
- [x] A new analyzer or connector was added, in which case:
    - [x] [Usage](https://github.com/intelowlproject/IntelOwl/blob/master/docs/source/Usage.md) file was updated.
    - [x] If the analyzer/connector requires mocked testing, `_monkeypatch()` was used in it's class to apply the necessary decorators.
- [x] The tests gave 0 errors.
- [x] `Black` gave 0 errors.
- [x] `Flake` gave 0 errors.
- [x] The commits were squashed into a single one (optional, they will be squashed anyway by the maintainer)


# Real World Example

Here is the screenshot:
![Screenshot 2021-12-07 at 4 21 11 AM](https://user-images.githubusercontent.com/60684641/144936386-9e3da20d-93f8-489a-9338-68a677950652.png)


",True,785,https://api.github.com/repos/intelowlproject/IntelOwl/pulls/785,https://github.com/intelowlproject/IntelOwl/pull/785,closed,79,0,3,5,10,19,0,0,[],2021-12-05 15:59:58+00:00,2021-12-09 09:01:13+00:00,320475.0,"3 days, 17:01:15","[{'comment_id': 762804548, 'comment_body': 'also add `ip`, the analyzer supports ipv4 and ipv6 both.', 'comment_created': datetime.datetime(2021, 12, 6, 8, 52, 7, tzinfo=datetime.timezone.utc), 'commenter': 'eshaan7', 'type': 'User'}, {'comment_id': 762805549, 'comment_body': 'add support for `limit` param. Make default value 1000.\r\n![image](https://user-images.githubusercontent.com/16389167/144816591-a861ebcc-a33c-4cc2-a1cd-03e21f338dfe.png)\r\n', 'comment_created': datetime.datetime(2021, 12, 6, 8, 53, 27, tzinfo=datetime.timezone.utc), 'commenter': 'eshaan7', 'type': 'User'}, {'comment_id': 762813879, 'comment_body': 'Also,\r\n\r\ntheir API provides two endpoints which return result in different formats. For reference:\r\n- https://api.mnemonic.no/pdns/v3/cof/google.com\r\n- https://api.mnemonic.no/pdns/v3/google.com\r\n\r\nfor this, we should provide another param `cof_format` (default: `true`) which switches the URL.', 'comment_created': datetime.datetime(2021, 12, 6, 9, 4, 42, tzinfo=datetime.timezone.utc), 'commenter': 'eshaan7', 'type': 'User'}, {'comment_id': 762815882, 'comment_body': 'Rename to `Mnemonic_PassiveDNS`.', 'comment_created': datetime.datetime(2021, 12, 6, 9, 7, 32, tzinfo=datetime.timezone.utc), 'commenter': 'eshaan7', 'type': 'User'}, {'comment_id': 762816490, 'comment_body': 'rename this file to `mnemonic_pdns.py`. Also change the `python_module` entry.', 'comment_created': datetime.datetime(2021, 12, 6, 9, 8, 22, tzinfo=datetime.timezone.utc), 'commenter': 'eshaan7', 'type': 'User'}, {'comment_id': 763724224, 'comment_body': 'rename class to `MnemonicPassiveDNS`.', 'comment_created': datetime.datetime(2021, 12, 7, 8, 1, 19, tzinfo=datetime.timezone.utc), 'commenter': 'eshaan7', 'type': 'User'}, {'comment_id': 763724537, 'comment_body': 'rename to `cof_format`.', 'comment_created': datetime.datetime(2021, 12, 7, 8, 1, 52, tzinfo=datetime.timezone.utc), 'commenter': 'eshaan7', 'type': 'User'}, {'comment_id': 763725249, 'comment_body': 'change to:\r\n\r\n```\r\nReturn result in the PassiveDNS [Common Output Format](https://datatracker.ietf.org/doc/draft-dulaunoy-dnsop-passive-dns-cof/).\r\n```', 'comment_created': datetime.datetime(2021, 12, 7, 8, 3, 1, tzinfo=datetime.timezone.utc), 'commenter': 'eshaan7', 'type': 'User'}, {'comment_id': 763725683, 'comment_body': '```\r\nNumber of records to fetch.\r\n```', 'comment_created': datetime.datetime(2021, 12, 7, 8, 3, 45, tzinfo=datetime.timezone.utc), 'commenter': 'eshaan7', 'type': 'User'}, {'comment_id': 763725815, 'comment_body': 'change to 1000', 'comment_created': datetime.datetime(2021, 12, 7, 8, 3, 55, tzinfo=datetime.timezone.utc), 'commenter': 'eshaan7', 'type': 'User'}, {'comment_id': 763726055, 'comment_body': 'change to `60`.', 'comment_created': datetime.datetime(2021, 12, 7, 8, 4, 18, tzinfo=datetime.timezone.utc), 'commenter': 'eshaan7', 'type': 'User'}, {'comment_id': 763726145, 'comment_body': 'change to `long`.', 'comment_created': datetime.datetime(2021, 12, 7, 8, 4, 27, tzinfo=datetime.timezone.utc), 'commenter': 'eshaan7', 'type': 'User'}, {'comment_id': 763727283, 'comment_body': 'Change to:\r\n```\r\nLook up a domain or IP using the [Mnemonic PassiveDNS public API](https://docs.mnemonic.no/display/public/API/Passive+DNS+Overview).\r\n```', 'comment_created': datetime.datetime(2021, 12, 7, 8, 6, 19, tzinfo=datetime.timezone.utc), 'commenter': 'eshaan7', 'type': 'User'}, {'comment_id': 763732169, 'comment_body': 'why is this logic required ? @0x0elliot \r\n\r\nEven for the COF endpoint the API response is in JSON only.', 'comment_created': datetime.datetime(2021, 12, 7, 8, 13, 37, tzinfo=datetime.timezone.utc), 'commenter': 'eshaan7', 'type': 'User'}, {'comment_id': 763756590, 'comment_body': 'That\'s because `response.json()` itself was showing an error in the case of COF. I had to add the responses into a list to make it JSON. The following code might help making the issue clear:\r\n\r\n```py\r\n>>> import requests\r\n>>> r = requests.get(""https://api.mnemonic.no/pdns/v3/cof/google.com"")\r\n>>> r.json()\r\nTraceback (most recent call last):\r\n  File ""<stdin>"", line 1, in <module>\r\n  File ""/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/requests/models.py"", line 888, in json\r\n    return complexjson.loads(\r\n  File ""/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/json/__init__.py"", line 357, in loads\r\n    return _default_decoder.decode(s)\r\n  File ""/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/json/decoder.py"", line 340, in decode\r\n    raise JSONDecodeError(""Extra data"", s, end)\r\njson.decoder.JSONDecodeError: Extra data: line 2 column 1 (char 123)\r\n```\r\n\r\nThis is how the response for a COF response looks like:\r\n![Screenshot 2021-12-07 at 2 07 50 PM](https://user-images.githubusercontent.com/60684641/144995139-4748783d-c94e-45e4-b5e4-3e83fa58e169.png)\r\n\r\n', 'comment_created': datetime.datetime(2021, 12, 7, 8, 38, 43, tzinfo=datetime.timezone.utc), 'commenter': '0x0elliot', 'type': 'User'}, {'comment_id': 764844921, 'comment_body': 'Alright, thanks for the explanation. Though please just change it use a list comprehension:\r\n\r\n```python3\r\nreports = [json.loads(line) for line in response.text.splitlines()]\r\n```', 'comment_created': datetime.datetime(2021, 12, 8, 13, 2, 2, tzinfo=datetime.timezone.utc), 'commenter': 'eshaan7', 'type': 'User'}, {'comment_id': 764845553, 'comment_body': 'Also change this description in the Usage.md file.', 'comment_created': datetime.datetime(2021, 12, 8, 13, 2, 54, tzinfo=datetime.timezone.utc), 'commenter': 'eshaan7', 'type': 'User'}, {'comment_id': 764846198, 'comment_body': 'redundant empty line.', 'comment_created': datetime.datetime(2021, 12, 8, 13, 3, 46, tzinfo=datetime.timezone.utc), 'commenter': 'eshaan7', 'type': 'User'}]","[{'commit_sha': '166c2f667f8bb05a9c9ca1c028aa85f0bc927291', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9fd8d8c86eedfd25205ee61c68cb5e4c4a41395c', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cafa1d989b8c63fb942a465ea18903de08633115', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b36c4df31c0f98a59649d61492cc87faccf0edb6', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '864dd56f503c378d75ab24939bfe1e8fe40b5bb7', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}]",Aditya,60684641,,User,,102,,178,138
1006266783,Playbooks (solves #628),"# Description
Playbooks are simple JSON configs that help scan observables/files in mass properly.

- [x] New feature (non-breaking change which adds functionality).

# Checklist

- [x] I have read and understood the rules about [how to Contribute](https://intelowl.readthedocs.io/en/latest/Contribute.html) to this project
- [x] The pull request is for the branch `develop`
- [x] If external libraries/packages with restrictive licenses were used, they were added in the [Legal Notice](https://github.com/certego/IntelOwl/blob/master/.github/legal_notice.md) section.
- [x] The tests gave 0 errors.
- [x] Linters (`Black`, `Flake`, `Isort`) gave 0 errors. If you have correctly installed [pre-commit](https://intelowl.readthedocs.io/en/latest/Contribute.html#how-to-start-setup-project-and-development-instance), it does these checks and adjustments on your behalf.
- [x] If changes were made to an existing model/serializer/view, the docs were updated and regenerated (check [CONTRIBUTE.md](./Contribute.md)).

### Important Rules
- If your changes decrease the overall tests coverage (you will know after the Codecov CI job is done), you should add the required tests to fix the problem
- Everytime you make changes to the PR and you think the work is done, you should explicitly ask for a review

# Real World Example

![image](https://user-images.githubusercontent.com/60684641/188980381-e47f3f37-61ad-4396-9a65-f7aeaba77e66.png)

",True,1123,https://api.github.com/repos/intelowlproject/IntelOwl/pulls/1123,https://github.com/intelowlproject/IntelOwl/pull/1123,closed,2632,468,63,224,55,104,0,1,[],2022-07-23 03:48:49+00:00,2022-10-10 09:14:14+00:00,6845125.0,"79 days, 5:25:25","[{'comment_id': 928073211, 'comment_body': '```suggestion\n@dataclasses.dataclass(frozen=True)\n```\n\nUse `frozen=True` to make the `dataclasses` immutable and hashable. [More](https://codereview.doctor/advice/ExplicitFrozenDataclass).', 'comment_created': datetime.datetime(2022, 7, 23, 3, 49, 6, tzinfo=datetime.timezone.utc), 'commenter': 'code-review-doctor[bot]', 'type': 'Bot'}, {'comment_id': 928073213, 'comment_body': '```suggestion\n    parent_playbook = models.CharField(max_length=128, default="""", blank=True)\n```\n\n`null=True` on a string field causes inconsistent data types because the value can be either `str` or `None`. This adds complexity and maybe bugs, but can be solved by replacing `null=True` with `default=""""`. [Explained here](https://codereview.doctor/advice/C2000).', 'comment_created': datetime.datetime(2022, 7, 23, 3, 49, 6, tzinfo=datetime.timezone.utc), 'commenter': 'code-review-doctor[bot]', 'type': 'Bot'}, {'comment_id': 928663410, 'comment_body': 'Empty file?', 'comment_created': datetime.datetime(2022, 7, 25, 9, 31, 53, tzinfo=datetime.timezone.utc), 'commenter': '0ssigeno', 'type': 'User'}, {'comment_id': 928670816, 'comment_body': 'Why you need to define this here? In any case, if you must, use the `settings.DEFAULT_AUTO_FIELD`. I see no use cases where you need another auto field that is different from the one defined in the settings of IntelOwl', 'comment_created': datetime.datetime(2022, 7, 25, 9, 39, 59, tzinfo=datetime.timezone.utc), 'commenter': '0ssigeno', 'type': 'User'}, {'comment_id': 928692910, 'comment_body': ""This is not maintainable. It is exactly the same code copy-pasted from `_multi_analysis_request` with a different output serializer and with the call to `playbooks_controller.filter_playbooks`. I'm 100% ok with having a different endpoint, but this function **must not** share its code with `_multi_analysis_request`. "", 'comment_created': datetime.datetime(2022, 7, 25, 10, 4, 19, tzinfo=datetime.timezone.utc), 'commenter': '0ssigeno', 'type': 'User'}, {'comment_id': 928694576, 'comment_body': 'Why are these here?', 'comment_created': datetime.datetime(2022, 7, 25, 10, 6, 19, tzinfo=datetime.timezone.utc), 'commenter': '0ssigeno', 'type': 'User'}, {'comment_id': 928701107, 'comment_body': ""I'm ok with having this utility method, but popping wrong keys makes the assumption that `data` is formatted in some way. You should, instead, follow the opposite approach: whitelist only the keys that should be parsed."", 'comment_created': datetime.datetime(2022, 7, 25, 10, 13, 51, tzinfo=datetime.timezone.utc), 'commenter': '0ssigeno', 'type': 'User'}, {'comment_id': 928707731, 'comment_body': 'Wrong signature', 'comment_created': datetime.datetime(2022, 7, 25, 10, 19, 58, tzinfo=datetime.timezone.utc), 'commenter': '0ssigeno', 'type': 'User'}, {'comment_id': 928708157, 'comment_body': 'I think `valid_playbook_list`, or `to_be_run_playbook_list`, or something like that are a better name for what you are trying to do', 'comment_created': datetime.datetime(2022, 7, 25, 10, 20, 30, tzinfo=datetime.timezone.utc), 'commenter': '0ssigeno', 'type': 'User'}, {'comment_id': 928709137, 'comment_body': '`not present in configuration` maybe?', 'comment_created': datetime.datetime(2022, 7, 25, 10, 21, 42, tzinfo=datetime.timezone.utc), 'commenter': '0ssigeno', 'type': 'User'}, {'comment_id': 928709192, 'comment_body': '`not present in configuration` maybe?', 'comment_created': datetime.datetime(2022, 7, 25, 10, 21, 46, tzinfo=datetime.timezone.utc), 'commenter': '0ssigeno', 'type': 'User'}, {'comment_id': 928709544, 'comment_body': 'not configured', 'comment_created': datetime.datetime(2022, 7, 25, 10, 22, 14, tzinfo=datetime.timezone.utc), 'commenter': '0ssigeno', 'type': 'User'}, {'comment_id': 928711677, 'comment_body': 'I really dislike having functions that changes the input parameters. In this case, you are getting `warnings` as inputs and changing it inside the function itself. I think that is better, as best practice, to not having it as input, and, returning a new warning list that the caller will extend(if it needs to)', 'comment_created': datetime.datetime(2022, 7, 25, 10, 24, 45, tzinfo=datetime.timezone.utc), 'commenter': '0ssigeno', 'type': 'User'}, {'comment_id': 928721824, 'comment_body': ""Why not writing a wrapper for `start_analyzers`? I think you wrote a lot of code, that I really don't think we need to maintain. Just do your setup, call `start_analyzers` and your finally your post_execution code. Probably i'm wrong and i'm not seeing the motivation for having all this"", 'comment_created': datetime.datetime(2022, 7, 25, 10, 35, tzinfo=datetime.timezone.utc), 'commenter': '0ssigeno', 'type': 'User'}, {'comment_id': 928722629, 'comment_body': 'Same code as `job_cleanup` of `analyzers_manager`. Find a way to not have all this shared code', 'comment_created': datetime.datetime(2022, 7, 25, 10, 36, 3, tzinfo=datetime.timezone.utc), 'commenter': '0ssigeno', 'type': 'User'}, {'comment_id': 928723629, 'comment_body': 'Not calling the connectors? ', 'comment_created': datetime.datetime(2022, 7, 25, 10, 37, 13, tzinfo=datetime.timezone.utc), 'commenter': '0ssigeno', 'type': 'User'}, {'comment_id': 929821381, 'comment_body': 'Understood. Good suggestion. I know how I can reuse `_multi_analysis_request` itself again for this.', 'comment_created': datetime.datetime(2022, 7, 26, 10, 56, 48, tzinfo=datetime.timezone.utc), 'commenter': '0x0elliot', 'type': 'User'}, {'comment_id': 929822924, 'comment_body': 'Let me get to that.', 'comment_created': datetime.datetime(2022, 7, 26, 10, 58, 35, tzinfo=datetime.timezone.utc), 'commenter': '0x0elliot', 'type': 'User'}, {'comment_id': 929823370, 'comment_body': 'Connectors are called automatically by the analyzers at the end of their own execution if I am not wrong? ', 'comment_created': datetime.datetime(2022, 7, 26, 10, 59, 9, tzinfo=datetime.timezone.utc), 'commenter': '0x0elliot', 'type': 'User'}, {'comment_id': 929844160, 'comment_body': ""Way better approach! I will look into this. The code didn't require popping until the last version release. After I took care of the conflicts, This issue had to be quickly put to rest like this. "", 'comment_created': datetime.datetime(2022, 7, 26, 11, 22, 3, tzinfo=datetime.timezone.utc), 'commenter': '0x0elliot', 'type': 'User'}, {'comment_id': 929849275, 'comment_body': 'understood.', 'comment_created': datetime.datetime(2022, 7, 26, 11, 28, 17, tzinfo=datetime.timezone.utc), 'commenter': '0x0elliot', 'type': 'User'}, {'comment_id': 929921674, 'comment_body': 'Fixing that.', 'comment_created': datetime.datetime(2022, 7, 26, 12, 47, 51, tzinfo=datetime.timezone.utc), 'commenter': '0x0elliot', 'type': 'User'}, {'comment_id': 929921938, 'comment_body': 'Removed. ', 'comment_created': datetime.datetime(2022, 7, 26, 12, 48, 6, tzinfo=datetime.timezone.utc), 'commenter': '0x0elliot', 'type': 'User'}, {'comment_id': 929937153, 'comment_body': 'Alright. `valid_playbook_list` sounds better. Will use it.', 'comment_created': datetime.datetime(2022, 7, 26, 13, 2, 54, tzinfo=datetime.timezone.utc), 'commenter': '0x0elliot', 'type': 'User'}, {'comment_id': 929947525, 'comment_body': 'My bad. That would be a better log to store.', 'comment_created': datetime.datetime(2022, 7, 26, 13, 12, 48, tzinfo=datetime.timezone.utc), 'commenter': '0x0elliot', 'type': 'User'}, {'comment_id': 929948553, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2022, 7, 26, 13, 13, 47, tzinfo=datetime.timezone.utc), 'commenter': '0x0elliot', 'type': 'User'}, {'comment_id': 929951440, 'comment_body': 'Good suggestion. Getting to that.', 'comment_created': datetime.datetime(2022, 7, 26, 13, 16, 30, tzinfo=datetime.timezone.utc), 'commenter': '0x0elliot', 'type': 'User'}, {'comment_id': 931066092, 'comment_body': ""Did some rereading. Seems like I don't need to add the extra logic I added especially for this function. I think I can reuse the `start_analyzers` function nicely here."", 'comment_created': datetime.datetime(2022, 7, 27, 13, 30, 23, tzinfo=datetime.timezone.utc), 'commenter': '0x0elliot', 'type': 'User'}, {'comment_id': 934004065, 'comment_body': '```suggestion\n    parent_playbook = models.CharField(max_length=128, default="""", blank=True)\n```\n\n`null=True` on a string field causes inconsistent data types because the value can be either `str` or `None`. This adds complexity and maybe bugs, but can be solved by replacing `null=True` with `default=""""`. [More](https://codereview.doctor/advice/C2000).', 'comment_created': datetime.datetime(2022, 7, 31, 15, 37, 24, tzinfo=datetime.timezone.utc), 'commenter': 'code-review-doctor[bot]', 'type': 'Bot'}, {'comment_id': 934252282, 'comment_body': 'Wrong signature', 'comment_created': datetime.datetime(2022, 8, 1, 8, 10, 37, tzinfo=datetime.timezone.utc), 'commenter': '0ssigeno', 'type': 'User'}, {'comment_id': 934252828, 'comment_body': 'Not necessary assignment', 'comment_created': datetime.datetime(2022, 8, 1, 8, 11, 15, tzinfo=datetime.timezone.utc), 'commenter': '0ssigeno', 'type': 'User'}, {'comment_id': 934256658, 'comment_body': '```suggestion\r\nfor p_name, pp in playbook_dataclasses.items()\r\n```', 'comment_created': datetime.datetime(2022, 8, 1, 8, 15, 16, tzinfo=datetime.timezone.utc), 'commenter': '0ssigeno', 'type': 'User'}, {'comment_id': 934263272, 'comment_body': 'I **really** hate having an `utilities.py`. Having this file means that every function that you do not where to put, will be put there. For example this method should be a `@classmethod` of the `AnalyzerConfig` class', 'comment_created': datetime.datetime(2022, 8, 1, 8, 22, 29, tzinfo=datetime.timezone.utc), 'commenter': '0ssigeno', 'type': 'User'}, {'comment_id': 934263702, 'comment_body': '`ConnectorConfig` @classmethod method', 'comment_created': datetime.datetime(2022, 8, 1, 8, 22, 56, tzinfo=datetime.timezone.utc), 'commenter': '0ssigeno', 'type': 'User'}, {'comment_id': 934266023, 'comment_body': ""Can't we make this a `Job` method?"", 'comment_created': datetime.datetime(2022, 8, 1, 8, 25, 28, tzinfo=datetime.timezone.utc), 'commenter': '0ssigeno', 'type': 'User'}, {'comment_id': 934267696, 'comment_body': '+12k lines written and a single test? ', 'comment_created': datetime.datetime(2022, 8, 1, 8, 27, 22, tzinfo=datetime.timezone.utc), 'commenter': '0ssigeno', 'type': 'User'}, {'comment_id': 934273141, 'comment_body': 'I\'m thinking how we can remove this lines from there, like i said before I really hate having a ""dump"" file where we put functions that we do not where to put. This is prone to having a ""god utilities"" where the file size will increase exponentially. Once I have a solution, i will comment this', 'comment_created': datetime.datetime(2022, 8, 1, 8, 33, 22, tzinfo=datetime.timezone.utc), 'commenter': '0ssigeno', 'type': 'User'}, {'comment_id': 934321406, 'comment_body': 'Okay sure. I will ask for more opinions from matteo then. ', 'comment_created': datetime.datetime(2022, 8, 1, 9, 24, 16, tzinfo=datetime.timezone.utc), 'commenter': '0x0elliot', 'type': 'User'}, {'comment_id': 934324295, 'comment_body': 'Good reminder. Let me wrap up the test cases.', 'comment_created': datetime.datetime(2022, 8, 1, 9, 27, tzinfo=datetime.timezone.utc), 'commenter': '0x0elliot', 'type': 'User'}, {'comment_id': 934324652, 'comment_body': 'Will get to that then. More appropriate. ', 'comment_created': datetime.datetime(2022, 8, 1, 9, 27, 20, tzinfo=datetime.timezone.utc), 'commenter': '0x0elliot', 'type': 'User'}, {'comment_id': 934325162, 'comment_body': 'More appropriate. Thank you.', 'comment_created': datetime.datetime(2022, 8, 1, 9, 27, 42, tzinfo=datetime.timezone.utc), 'commenter': '0x0elliot', 'type': 'User'}, {'comment_id': 934326444, 'comment_body': 'Thank you for pointing this out. I appreciate you helping me clean the code up.', 'comment_created': datetime.datetime(2022, 8, 1, 9, 28, 44, tzinfo=datetime.timezone.utc), 'commenter': '0x0elliot', 'type': 'User'}, {'comment_id': 934327306, 'comment_body': 'Will get to this. ', 'comment_created': datetime.datetime(2022, 8, 1, 9, 29, 26, tzinfo=datetime.timezone.utc), 'commenter': '0x0elliot', 'type': 'User'}, {'comment_id': 934329443, 'comment_body': 'I did it especially thinking that it would make it more readable. But if you suggest so, I would get to removing it.', 'comment_created': datetime.datetime(2022, 8, 1, 9, 31, 34, tzinfo=datetime.timezone.utc), 'commenter': '0x0elliot', 'type': 'User'}, {'comment_id': 934333780, 'comment_body': 'if the file would have grown, it would have been a hard file to get back to with a lot of junk. i appreciate you pointing out how it could be further cleaned up.', 'comment_created': datetime.datetime(2022, 8, 1, 9, 36, 23, tzinfo=datetime.timezone.utc), 'commenter': '0x0elliot', 'type': 'User'}, {'comment_id': 934353286, 'comment_body': ""I get your point, and this is trivial and just my own preference. If you think that is more readable as you written, i'm 100% ok with keeping that way"", 'comment_created': datetime.datetime(2022, 8, 1, 9, 58, 40, tzinfo=datetime.timezone.utc), 'commenter': '0ssigeno', 'type': 'User'}, {'comment_id': 934353961, 'comment_body': 'Dw man. I just had some bad experiences with utilities files that grows exponentially and sorting them out is a huge pain in the ass that I would gladly not doing again', 'comment_created': datetime.datetime(2022, 8, 1, 9, 59, 29, tzinfo=datetime.timezone.utc), 'commenter': '0ssigeno', 'type': 'User'}, {'comment_id': 934355164, 'comment_body': ""Unfortunately I can see the decision on why these methods should be on a common file between the two callers. I'm taking a bit of time to decide on how to structure this, I do not like to give suggestion and then understand that the suggestion itself was shit"", 'comment_created': datetime.datetime(2022, 8, 1, 10, 0, 50, tzinfo=datetime.timezone.utc), 'commenter': '0ssigeno', 'type': 'User'}, {'comment_id': 954846247, 'comment_body': 'I will just leave it to be a Tuple of Lists then?', 'comment_created': datetime.datetime(2022, 8, 25, 11, 24, 1, tzinfo=datetime.timezone.utc), 'commenter': '0x0elliot', 'type': 'User'}, {'comment_id': 958055777, 'comment_body': 'any reason to do not apply this? (talking about Django Doctor issue)\r\n', 'comment_created': datetime.datetime(2022, 8, 30, 6, 29, 56, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 958067512, 'comment_body': 'could you also add here the default playbooks available + explain how you can create a new playbook (either from the GUI or the config file) , how you can customize it, etc.', 'comment_created': datetime.datetime(2022, 8, 30, 6, 45, 49, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 958071678, 'comment_body': 'this file should not be added because we already handle dependencies with npm', 'comment_created': datetime.datetime(2022, 8, 30, 6, 51, 1, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 958083270, 'comment_body': ""yeah the project seems incomplete without proper testing. While we still need to initialize frontend tests and that's already a big issue in IntelOwl, at least we need to properly test new things in the backend because the framework does provide everything to do that easily.\r\n\r\nYou could just take the most important functions you implemented in all the code and write tests that verify that the use cases that you wants to handle are correctly handled:\r\n1 - hypothesis\r\n2 - initialize required data/parameters\r\n3 - call function which needs testing\r\n4 - verifiy results\r\n\r\nIn tests you do not have to care about code replication. For instance, if a specific function would give you 5 different results based on the different parameters that you provide, you would need to do 5 different tests for that, with the code really similar between tests. Each test should live its own life and be autonomous from the other.\r\n\r\nFor instance, the `job_cleanup` you implemented handle a lot of different possible outcomes. You need to verify those with tests.\r\n"", 'comment_created': datetime.datetime(2022, 8, 30, 7, 5, 1, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 958084254, 'comment_body': 'also `stack_connectors` and `stack_analyzers` are good targets', 'comment_created': datetime.datetime(2022, 8, 30, 7, 6, 14, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 958084725, 'comment_body': 'the `before_run` too, you changed it. You should verify all the possible outcomes. Etc', 'comment_created': datetime.datetime(2022, 8, 30, 7, 6, 50, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 958151857, 'comment_body': 'hmm. I am thinking of writing another test case that uploads files first. I did verify stack_connectors and stack_analyzers manually. And before_run was functionally verified after I compiled together the free analyzer playbook. And hopefully, just running the free analyzer playbook should do because it has all possible outcomes since it runs all possible analyzers.', 'comment_created': datetime.datetime(2022, 8, 30, 8, 8, 20, tzinfo=datetime.timezone.utc), 'commenter': '0x0elliot', 'type': 'User'}, {'comment_id': 958152045, 'comment_body': 'Noted.', 'comment_created': datetime.datetime(2022, 8, 30, 8, 8, 31, tzinfo=datetime.timezone.utc), 'commenter': '0x0elliot', 'type': 'User'}, {'comment_id': 958152479, 'comment_body': 'Will do both this and the code doctor additions.', 'comment_created': datetime.datetime(2022, 8, 30, 8, 8, 58, tzinfo=datetime.timezone.utc), 'commenter': '0x0elliot', 'type': 'User'}, {'comment_id': 958171211, 'comment_body': '> hmm. I am thinking of writing another test case that uploads files first\r\n\r\nok!\r\n\r\n> I did verify stack_connectors and stack_analyzers manually.\r\n\r\nDon\'t get me wrong. I am not saying that you have not verified this manually. I am confident about that.\r\nBut that\'s not the same thing of writing unit tests. Unit tests are repeatable and allow to verify that, in the future, with new changes, what you have done now won\'t work differently. It also allow to avoid to break things while doing new features. They are as much important as the code itself that you have written.\r\n\r\n> And before_run was functionally verified after I compiled together the free analyzer playbook. And hopefully, just running the free analyzer playbook should do because it has all possible outcomes since it runs all possible analyzers.\r\n\r\n```\r\n        if self._config.type == ""file"":\r\n            if not job.file:\r\n                raise UnsupportedObservableException(\r\n                    f""No file was given for {self._config.name} file analyzer""\r\n                )\r\n\r\n            elif job.file_mimetype not in self._config.supported_filetypes:\r\n                self.report.update_status(status=self.report.Status.FAILED)\r\n                raise UnsupportedObservableException(\r\n                    f""Observable {self._job.file_name} is not supported""\r\n                )\r\n\r\n            else:\r\n                logger.info(\r\n                    f""{job.file_name} is supported by the analyzer {self._config.name}""\r\n                )\r\n                return\r\n\r\n        elif job.observable_classification not in self._config.observable_supported:\r\n            self.report.update_status(status=self.report.Status.FAILED)\r\n            raise UnsupportedObservableException(\r\n                f""Observable {job.observable_name} is not supported""\r\n            )\r\n```\r\n\r\nthese are possible outcomes. Tests should verify that if those conditions apply, also the exceptions raise (`self.assertException`). What you are saying is that the `before_run` code is actually run by your test. That\'s good for coverage but we are not doing ""unit tests"" there. Unit tests should pick the newly implemented functions, independently from the rest of the code, and test them with all the possible parameters, and see if the outcomes are what is expected', 'comment_created': datetime.datetime(2022, 8, 30, 8, 27, 5, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 961633806, 'comment_body': 'I would just add this file in the .gitignore file for the frontend.', 'comment_created': datetime.datetime(2022, 9, 2, 12, 39, 23, tzinfo=datetime.timezone.utc), 'commenter': '0x0elliot', 'type': 'User'}, {'comment_id': 961634182, 'comment_body': 'and then untrack it', 'comment_created': datetime.datetime(2022, 9, 2, 12, 39, 53, tzinfo=datetime.timezone.utc), 'commenter': '0x0elliot', 'type': 'User'}, {'comment_id': 962509477, 'comment_body': ""```suggestion\n        super().setUpClass()\n```\n\nIt's unnecessary to use arguments when calling super for the parent class. [Read more](https://codereview.doctor/advice/NoRedundantArgumentsSuper)."", 'comment_created': datetime.datetime(2022, 9, 5, 6, 8, 48, tzinfo=datetime.timezone.utc), 'commenter': 'code-review-doctor[bot]', 'type': 'Bot'}, {'comment_id': 965648812, 'comment_body': 'the result of this would be:\r\n* now you have `0` instead of `all` when running playbooks. So this is still wrong\r\n* and more now if you run all the analyzers, you would have `0` instead of `all`.\r\nSo the overall result of this change is that is worse than before.\r\n\r\nI think that you should get here when you are running playbooks. In that case, manage this differently: the `connectors_requested` and `analyzers_requested` would not exist in that case. I think you could simply use `connectors_to_execute` and `analyzers_to_execute` instead.', 'comment_created': datetime.datetime(2022, 9, 8, 8, 17, 37, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 965830908, 'comment_body': 'Works? \r\n![image](https://user-images.githubusercontent.com/60684641/189109389-e9886384-9920-4e0a-bef9-c903b89561f0.png)', 'comment_created': datetime.datetime(2022, 9, 8, 11, 20, 14, tzinfo=datetime.timezone.utc), 'commenter': '0x0elliot', 'type': 'User'}, {'comment_id': 965831232, 'comment_body': 'let me know if you want anything different when no connectors are added to the playbook. I just went with adding ""None"".', 'comment_created': datetime.datetime(2022, 9, 8, 11, 20, 35, tzinfo=datetime.timezone.utc), 'commenter': '0x0elliot', 'type': 'User'}, {'comment_id': 965840506, 'comment_body': 'do you think that we should also make changes here?\r\n![image](https://user-images.githubusercontent.com/60684641/189111527-05b959b2-847b-45d2-8aa5-1db9ca844315.png)\r\n', 'comment_created': datetime.datetime(2022, 9, 8, 11, 31, 28, tzinfo=datetime.timezone.utc), 'commenter': '0x0elliot', 'type': 'User'}, {'comment_id': 965883295, 'comment_body': 'care about that :P', 'comment_created': datetime.datetime(2022, 9, 8, 12, 15, 24, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 965883920, 'comment_body': 'good point, yes, the visualization should be the same there', 'comment_created': datetime.datetime(2022, 9, 8, 12, 15, 48, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 965884481, 'comment_body': ""> Works?\r\n\r\nthat's good"", 'comment_created': datetime.datetime(2022, 9, 8, 12, 16, 10, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 965885148, 'comment_body': 'ok you noticed :P', 'comment_created': datetime.datetime(2022, 9, 8, 12, 16, 42, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 965982682, 'comment_body': 'ahead of you! changed that already :P ', 'comment_created': datetime.datetime(2022, 9, 8, 13, 38, 16, tzinfo=datetime.timezone.utc), 'commenter': '0x0elliot', 'type': 'User'}, {'comment_id': 966168464, 'comment_body': 'Seems alright to me now. \r\n![image](https://user-images.githubusercontent.com/60684641/189174217-8cfa628b-bfb4-4142-a46f-060629fa890c.png)\r\n', 'comment_created': datetime.datetime(2022, 9, 8, 16, 21, 17, tzinfo=datetime.timezone.utc), 'commenter': '0x0elliot', 'type': 'User'}, {'comment_id': 984092170, 'comment_body': '```suggestion\n    parent_playbook = models.CharField(max_length=128, default="""", blank=True)\n```\n\n`null=True` on a string field causes inconsistent data types because the value can be either `str` or `None`. This adds complexity and maybe bugs, but can be solved by replacing `null=True` with `default=""""`. [More](https://codereview.doctor/advice/C2000).', 'comment_created': datetime.datetime(2022, 9, 29, 23, 23, 20, tzinfo=datetime.timezone.utc), 'commenter': 'code-review-doctor[bot]', 'type': 'Bot'}, {'comment_id': 984094147, 'comment_body': 'nope, this change broke my code. i had to revert.', 'comment_created': datetime.datetime(2022, 9, 29, 23, 28, 19, tzinfo=datetime.timezone.utc), 'commenter': '0x0elliot', 'type': 'User'}, {'comment_id': 984300356, 'comment_body': 'please squash these 2 migrations. ref: https://docs.djangoproject.com/en/4.1/topics/migrations/#migration-squashing', 'comment_created': datetime.datetime(2022, 9, 30, 7, 37, 29, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 984303785, 'comment_body': 'squash these ones too please', 'comment_created': datetime.datetime(2022, 9, 30, 7, 41, 38, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 984310683, 'comment_body': ""I see that you widely use `parent_playbook = None` as default (see `start` method) and then you populate the AbstractReport attribute like that. This seems wrong for various reasons.\r\n\r\nIf you can't revert it is highly probable that you are making this wrong so this should be investigated more. I'll try to find some possible erronously points so we can fix them"", 'comment_created': datetime.datetime(2022, 9, 30, 7, 49, 34, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 984313241, 'comment_body': ""parent_playbook should be treated like any other parameter here. I'll get into the `start` method too"", 'comment_created': datetime.datetime(2022, 9, 30, 7, 52, 40, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 984318309, 'comment_body': 'First, it would be cleaner if changes to the AbstractReport instances would be made by a method of AbstractReport itself and not externally to the class. The idea behind this is that the AbstractReport handles all the changes and work that is done in the related instances. We ""isolate"" the responsabilities. This is an important architectural code pattern to maintain cleaner code, but I also understand that is not so intuitive to get this at first time.\r\n\r\nCheck `update_status` method of AbstractReport, written by Eshaan. This change should be done in the same way.\r\n\r\nAs a second remark, it is not necessary to pass `parent_playbook` parameter explicitly because that is already handled by **kwargs. On the contrary, you should get that info from the kwargs and populate that value in AbstractReport instance only if available. In this way, not only the code is clearer but you also avoid to populate that value to None every time is not populated so you can finally set the default to """" and remove null=True\r\n\r\n', 'comment_created': datetime.datetime(2022, 9, 30, 7, 58, 30, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 984346208, 'comment_body': 'could you add a comment regarding why the logic regardin `run_all` is different between analyzers and connectors? I know this is right but for future developers this would be really hard to understand.', 'comment_created': datetime.datetime(2022, 9, 30, 8, 29, 49, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 984348664, 'comment_body': 'cool thing this', 'comment_created': datetime.datetime(2022, 9, 30, 8, 32, 28, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 984356555, 'comment_body': '`runtime_configuration` is still not handled here.', 'comment_created': datetime.datetime(2022, 9, 30, 8, 39, 31, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 984366907, 'comment_body': 'inheritance is cool here', 'comment_created': datetime.datetime(2022, 9, 30, 8, 50, 25, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 984367756, 'comment_body': 'this list (warnings) is empty. we should avoid to rewrite this code.\r\n\r\nJust declare:\r\n```\r\n                {\r\n                    ""status"": ""accepted"",\r\n                    ""job_id"": job.pk,\r\n                    ""warnings"": serialized_data[index][""warnings""],\r\n                    ""analyzers_running"": job.analyzers_to_execute,\r\n                    ""connectors_running"": job.connectors_to_execute,\r\n                }\r\n```\r\nbefore the if/else and then add the `playbooks_running` field only for playbooks', 'comment_created': datetime.datetime(2022, 9, 30, 8, 51, 23, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 984368503, 'comment_body': 'typo in configuration', 'comment_created': datetime.datetime(2022, 9, 30, 8, 52, 10, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 984369366, 'comment_body': 'this file is a bad merge from upstream. Please remove this', 'comment_created': datetime.datetime(2022, 9, 30, 8, 53, 9, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 984370695, 'comment_body': 'a link here to the other section that you wrote ""how to add a new playbook"" would help the user to find all that they need', 'comment_created': datetime.datetime(2022, 9, 30, 8, 54, 38, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 984636048, 'comment_body': 'on it', 'comment_created': datetime.datetime(2022, 9, 30, 14, 8, 2, tzinfo=datetime.timezone.utc), 'commenter': '0x0elliot', 'type': 'User'}, {'comment_id': 984705879, 'comment_body': ""it's the same as analyzers. i will make it clear in both `filter_analyzers` and `filter_connectors` functions then"", 'comment_created': datetime.datetime(2022, 9, 30, 15, 21, 30, tzinfo=datetime.timezone.utc), 'commenter': '0x0elliot', 'type': 'User'}, {'comment_id': 985003331, 'comment_body': ""i don't get this. it is being treated like any other parameter. do you mean, not like any other explicit parameter and instead with the help of kwargs?"", 'comment_created': datetime.datetime(2022, 9, 30, 23, 42, 30, tzinfo=datetime.timezone.utc), 'commenter': '0x0elliot', 'type': 'User'}, {'comment_id': 985121494, 'comment_body': 'noted and adding\r\n', 'comment_created': datetime.datetime(2022, 10, 1, 16, 57, 16, tzinfo=datetime.timezone.utc), 'commenter': '0x0elliot', 'type': 'User'}, {'comment_id': 985478797, 'comment_body': 'yes\r\n\r\n```\r\n{""runtime_configuration"": runtime_params, ""task_id"": task_id, ""parent_playbook"":parent_playbook}\r\n```', 'comment_created': datetime.datetime(2022, 10, 3, 7, 53, 35, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 985490339, 'comment_body': 'coverage report states that this function is not tested at all. Could you add a test for this?', 'comment_created': datetime.datetime(2022, 10, 3, 8, 7, 20, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 985637257, 'comment_body': 'let me write a general one for this.', 'comment_created': datetime.datetime(2022, 10, 3, 10, 38, 49, tzinfo=datetime.timezone.utc), 'commenter': '0x0elliot', 'type': 'User'}, {'comment_id': 987358782, 'comment_body': '```suggestion\n            ""\\nTesting observables""\n```\n\nf-string is unnecessary here. This can just be a string. [Explained here](https://codereview.doctor/advice/NoRedundantFString).', 'comment_created': datetime.datetime(2022, 10, 4, 21, 49, 5, tzinfo=datetime.timezone.utc), 'commenter': 'code-review-doctor[bot]', 'type': 'Bot'}, {'comment_id': 989009835, 'comment_body': '@0x0elliot could you integrate this please? should be fast', 'comment_created': datetime.datetime(2022, 10, 6, 12, 51, 38, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 989054745, 'comment_body': '@0x0elliot these 2 are still not squashed', 'comment_created': datetime.datetime(2022, 10, 6, 13, 32, 30, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 989054850, 'comment_body': '@0x0elliot these 2 are still not squashed', 'comment_created': datetime.datetime(2022, 10, 6, 13, 32, 36, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 989060003, 'comment_body': 'please add this custom value in the env_file_app_template and in the Contribute.md with the other', 'comment_created': datetime.datetime(2022, 10, 6, 13, 36, 56, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 989065272, 'comment_body': 'oop. how did i miss pushing that. i did add it to the ci file', 'comment_created': datetime.datetime(2022, 10, 6, 13, 41, 22, tzinfo=datetime.timezone.utc), 'commenter': '0x0elliot', 'type': 'User'}, {'comment_id': 989114058, 'comment_body': 'oh noticed this again :P', 'comment_created': datetime.datetime(2022, 10, 6, 14, 21, 48, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 989115510, 'comment_body': 'oh my :P ', 'comment_created': datetime.datetime(2022, 10, 6, 14, 22, 58, tzinfo=datetime.timezone.utc), 'commenter': '0x0elliot', 'type': 'User'}, {'comment_id': 990056442, 'comment_body': 'ah one last thing, this should be put here: https://github.com/intelowlproject/IntelOwl/blob/master/.github/release_template.md. Can you move that please?', 'comment_created': datetime.datetime(2022, 10, 7, 12, 55, 15, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 990622781, 'comment_body': 'yessir let me do that quickly', 'comment_created': datetime.datetime(2022, 10, 8, 10, 18, 17, tzinfo=datetime.timezone.utc), 'commenter': '0x0elliot', 'type': 'User'}]","[{'commit_sha': '98b4ed40ce0667c3fb1e2977cd0a85dea5a8301d', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ead6745acc684345304bde7a8e441e2e815369f1', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ecb583f1054ff40d7a53d512cfe29df589b1e58', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5006db3eaba89c3aa17901d2e945f1f4db5460f3', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f773eebb1d0cd26dafeb2936563ec476c69a3703', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40b2390dd4ecc3183a52a388f58f2fa47a481594', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e276dd2efb413571d249f18a6bbaf58c74037f95', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bbf2da3f336bee8a55b2cfc8ecd14230144f28e0', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '722f300e0d34541f98816da2f7e93abf8f0d028e', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '167412f2d8062848ded974f1f7a79fd379fd9aa5', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34fc9e28a89f3a22dc35bd8507c11e74a5213417', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '326e4da32473395cb674ccea5717c80842944b48', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc7047f7c538b3563c0c5270b3739ef61b011a07', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5cdcbad9ceddafbb4c3811afb527e5a759d97373', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5097914aff4d2713b613241121302837e724b2dc', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dada1823ff7ad1f1bf78f33bf9f3e56401e53c9f', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '24b0e169e6b71b2199fa928b292ab93b71aa1aaa', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2922df47298eb627be4f7669bb4bf1a0d1fc2bf8', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b0687f7ed92d7fd46d8b97963d7209ea73a23282', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cfc99c9656bf9b8b412b2e06e17e2ba5d0524524', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd59b94d3542b688cd85fd14325f2c8c42dcbbfc9', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47fe13824fb26d58fd77148de872139ed157ce1d', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '63441440886659deed23b9adac3341b64d406324', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e04d42a1b7343cb99c1a7321a43f524fa67c5e7a', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d285161d017e4cbb7745f1a8b7c04a567e079f4', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96750fb26890a5b0f633e4de9939b6ac02e4c2a4', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d7a9beccc2b00425c35d322398190dc2895765a', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f256567b628f5cb965e15c5870a65471ef9ea78', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc9d67daf94b3f7415e67cd3bd3989f3344e5f9a', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9987bf5f252b265674848060ca1fc01d8aa42cd8', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c43c99dfcdccccbf3daca78067dbe24cb6b154f9', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '552abf137cee44be97347ab2b572e88d903c6550', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67b4a4b7d11f459704afab693b6fb5fbf3d56158', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc2a52cdc11f4312b418a9acb1f821f398f2df7e', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a00eac7a218484f32ca01928f92ba8ad44c86e3b', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9caaeff408e80d227554612c0d8711c7cfbe242c', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ee68cdca26f3870928ea96df413a412defc63f6', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70f6fb6e47f9eb3bf07ae35f900b54295d3a7a27', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '016380398dc27d9336cda4a6fd6f6c5849f1873f', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7fd8668212d5d4f9dd29bfacc9a6d05096224d5', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f1f583be2cbd459faff7e68084ba5c8a17e6c1ac', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11e28376f554045e11cf64ab0290a4d0fd78f5f5', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '35cbec86a50b9ef0b11ca4d32ff2091eb368098d', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02d06d03ff9d94bd12b40ef6b9b7225d06adfadf', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd1a3bc40bf4b5ea64518e107330d51728b18bc1f', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb0a89b616de664b5ec71d1b0c72adda37b67f63', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'daae530ce601dbef1e964b7d35dba02cd8d2e4fc', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '367c2b046cdba1a078169ab900f569592f97b4ac', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c87daeb26d4d37dae7291a5849373d84849732a8', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ec5814abc9b4bab481c679b59dfccd312044281', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0db6aa419c24b260b5801ab00887664b624a546a', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f1f7dd377338a8e9e29e0dd9c1bb08f0453a0527', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c99a020bc04d1d0ac10a39f70eda4649760624c', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6696e39412bb2da0714e54f378eaeec9793baba1', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45762ed21ce35e4655a5a6f6f71086eb4a7cf648', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f7de493dbf9a064e477460124b9382c71b6bdb63', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c67603a07ca477572aa73963daa6bad9fd362c1c', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a781b03f18922018a67a4cac53824d5a9da1de3', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '26154ddad6fc6bf45c112e29a43811010d3e31dd', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b62087994d66161378ddbd0b4f7ac7d606b50270', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09865ab4e3969f18b5caa2ab9982b89f63a60088', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3fb171277506d7e18cdbe2a34152cec963ab40cd', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a877d567deefccad424fda3721bd2e29e4a926c', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f63b1db4a306f136ba180d3fc043f9df82459c2f', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d1ff21e351227283ad3318d2f60812442230ca3', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '494252947d374a5dbff5e3f07bc64a296160627a', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95e1ce8798611e035a5c1ca1c2bdbe7db3bea126', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '157a8efc97b91bbd1da56ec207bf19b4c67827d9', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '668846891ba837209e5490c0e8f6f052eb595c7f', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46ac8cd65f27c6a34e401e170b83b2e99370c2d7', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ea1154ddf06e27a77e7122e7dffcab81e99b62f', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87fe9e6347e6208750e9e4a73cb7ad2d616c7f94', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd78c520e51737c66b87c07a27103c6d16edef6d1', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac30a987d7353fec412411540bd2b760dc763a70', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e72a8a87841a3fc0290dc277d5d4ac807b6d950e', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40ae2961757008546da3d152557a450f16a8f20b', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6adaec490880753013769b7c14ec8e4ea1f98d81', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '613d9c214551a6a3bf4adf739fa6e17e5e686fcc', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6fbedbe05cf277c660bca9a6a8669dc7664272f6', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '651ddac78112c31a875ed8ac402cf2ad1715a967', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0bf0ff4de3d592b8b070056d5686aa123185e949', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0777e0d37618bb2c49c73c314e8e77776d63caff', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f5dae2c230412b3fa90386da7c1517f0d2518e5', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '260d7f5cd830be8661b99e2f31fa4809f71bb269', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73e0de1d39428c6ee1e41832e00507828fb86a68', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39dae3dfe267f761fa246d31c9306ae3e0355430', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '89d845e5222d9e5099d561fefd76b66f009cb1b9', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6395a7dea64c1477202ffebb320e37b6d6e12ce4', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b58c7fbb595377de3dfe1ded7b45b04d1cfd4b4', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '23daf91adf771b2a4b3ee2faf12ede3caada55eb', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1002af1a84f22a7c666afb1443642c6f84dd9c4a', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f91798f40c1b92f914954a77e73eef1a01cd1b6', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17f91ba441c9e6bd38b3bf6ccdc839ee1af41329', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e84c6f84764ecb71a656a7f2ad15a7fc0959cec1', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d6d8f64b7d09c45e9c36d11618540f26779477f', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '218f14918f7b98a2290f94e18b1a636df3203323', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de82f32f551b3accf82697462d904f2d4b3141f3', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7504b691efa73034de25aa19a0f6f7c607dffc4b', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8eaaa8c5dd7b526803f9c996510a3f031287dea0', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a4db422f3539706857760ef920f0fdc10ca43ec', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '859b6b311d9d79e8a30f23d5669e0078c3c515b4', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0417b3be89a28ba5270800a35087a58d145d6a39', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd1e69db0aada7f0070269b72e3aec81dfb599a3', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b9aa4bc37c4f8e1f63b321130caa92e98e476ba6', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e865dca98829857916b555a32a9e21dadd7cb0f5', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5befbc15cfdb889d4639b24d84a8214b2befd092', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'efe9ab339d95294076ed78480ac96781da347c52', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6bfaafd1791f5e049bb959732b1d12423c361107', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc1e6499c3856050f766f4a9067ef41916d45f81', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb5c362e5e9028faebc0d9b571169861a63ba6de', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73f25abdbaf2c5c329c3fb1b0b86da1e2dbb21d7', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '28e8fa201103f9a78f715a29e40102e993efa754', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '21194a83aa6991f0346f00f99b10a6ff756e8009', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a05a6bd343bb31ad7224e0167178a91e051d215', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34ff6a9b07106b074c5cf3ad3e325a1a8f726f1a', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ceed958d65e63b7cafcafdd94e47c11ca9acbab', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '30aab9b0440fcf2362413518ea2053cb9b281433', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a42d4ac380e53e6c906e8616e4e844a71ad49de5', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f079a7f816e99a2bb27dcf04898a01897e318ab', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '589699788ffba7e25d72428add223644446d140a', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c1ac81d405754bfdf63d27ddb9b2b2d7687de21', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd1aede8cdd6c67a9d1a588d99e1699c2d3aac658', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b4cfedc6f2db0a65abcf3535b0ea2ce05e6d055d', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4e0265e3050deb52048b8b3bee0e2a253e2f0b7', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '29fcbea1143ffb81cb63f0146f3982e8a7aa939d', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e53273d96008f59e5ef1c3891bd2b24102f5d9f5', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '210692c8574bdec15f432886e5e1666f93bfcd90', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3bcee2ddee93ef2271d2a18b87b2ae1013f5dcf2', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3417212b0798f94cfe07e4208516ba38d6e23ba8', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eadf0c2964a4567d26f5be98cea3fde1aa9a7957', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e13fc608117ff3602db77c7c5a53016494f08cfd', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97b2e7e3402628a0ac29a11701e0d996aa27eed2', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8d5758f67c5b6a8f558be722db3eb81325780ed', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b8c680737f97d832ecc0aee7e29d7ca64d22b1a', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07795849770cd1e9b8b5802edef4a2683935566e', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7da72ad25bedbde9fca55ccb9ce2547dc189a6f2', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70c2d51ea0c8726ecdeb73efbb68c7e685c994f3', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb222b1fb4363dc96dccd30d65460a8d2f798616', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e9c58bb5067740e8fa826f87f0866b72e673735', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c71009f8f14e77bc5a777acca3ce4d30c4a84e3', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '82868c8e3ad51a9f16af9ce4278d8528685b92f9', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68e3d145362a92b24db0275bf56a7293106a5301', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd560192c97965e3ac40a2ed689f99d089d0b5568', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8fada5e3a3ecbdfc83e48cbcf6274f40efd8f3e9', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dce02151b3c75890e2b6d4642d279ea436c1479a', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93e6d686e842e5d39247c0d6bd969d33ab20c31d', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fffcb4809c18d297886a1dfc58990c3456b316bd', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd091f51a53694b6da5692120097921fa0a4308b5', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0208324150250eedd6383da48216a088208d3178', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7fc34b98705159ffc1d6c18fa76b17dc2cb5382', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d8af14ad9ee989d1ae2bdd8448a23110d353749', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b3a9af64d3129e84f2e8174a5c5a047140048dc', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a371c41de7bdaa3d4eb9d7f8ed1c9d1030a1d24a', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7efb0a1ad13fa88b1fb49e813285064c7cf51b54', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cfd4373ae0210c8206baf3abeb13eb144595768b', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1202584181dfaa56950b41c067b02fc6cad7de66', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8d131822939c7d2d1cc0c87f18d23007b911e17', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b555e70f075559f83c744c55e8f013d88288e3ab', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15b43ab30228b3021ba885fd6b6e1f9f1ea448cc', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2f8f3566791f807b8b0ebb34b594dc6dbcbb5b2c', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9490ae2646d101deffac0ed67690f2d7f3e5fc15', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df7ff313aea2024e72fb274cbbe3909fc9bc5b49', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '099ac1bcff5e20cfa18a9aec8e2f8e3c0ef4459a', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0e60022e0d5e99dafae8db5fd353d0bdee68b59', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c0e770e8557e7d4a1eff2c2c6ab921b14febbeb5', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '426e1a8abaf544a5797cc548754c83c0d2a40ded', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac4621618faf77484908140722516a440d4e0890', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3040cd18ac36560116227068decc3ea3c684735e', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03348e66b8c7b0870c9bc61d398971c854b05427', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e57a756380b70c216b6e4e1678ee5a658973d3e1', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aedf659d647b9cb023088e1781604c5d41246e10', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a0057a1929b71da2ddea6c71ae44060eaf4cc6e', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '470c48d629ee7cb9189f229fb038d16214687af5', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9d2687fa99f29d14b32ea0cf6cd7cf6fb94ccac', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eedb9718d81723b39b4e3724c4adc06d6b817a30', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b018cded9339c596b100cc00258a5d13ed8a0a1', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee5d410a191c59e484c97be3d0b8026ea76b6039', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd520d2b52b0ebd96baa3b416644cf5650ba57069', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ee567347d4d10f81cd3eab7f70d292a8bb5db73', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3871f8f7c739396c8c63b480abc62d8f55551e4', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b841d56a98733c10e3ab375e1eb162784fa840f', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42c38bd976f4142724b6bfd23001e03c03dfdaca', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e91790454e5b8f1209f6098197a79e04e1147ccd', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce2ade7cb0e991e45d3e8833791d371f5475d896', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c7e619d42bab7cdbd6af0eb8acd45a1d1ba324d', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '00899090379e641a5550a585aaaa64c6145a95f5', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd1df3f555d21aadd527b62c9db7d3c2e53268015', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c1a49aa23db93f7cff590828f006aca132a00c7', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e80a99f5abfa89f026988d2b6a41a3fb3349609', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5adf26eda84ebda0b41852d872256815eae2daac', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '320abbc01231a2bb34274e6d2ac060ae2593a7b1', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec5d63c31451019e8855df8253d6307152f06031', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d8c676249703b0ddafb5d79526063749134c44a', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49e759778fd8e721b6dfb341e80638fd80de17e7', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e3810cc69b004608ba5ff388dc2f6cba7ce57a2', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1af40df94135fb672dcdeb3dc31673e8d21239eb', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b73be3150c6d3822d7c5ac5ff1ce9c1a3853564', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c259071c8cd099808d5b3ac7f099c25aad32cea0', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56288009a4fb2b07b778d534235d85b6b9e8e4b7', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '31a51c796e753ce2e25a72db4aa2ce0698cec971', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f80c94d2f6cda463b4a778f34e2a4d272bba6e05', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a39b8fef5f39f7b4e80bede687d4f9fc0c09e916', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f09d482c9181f66aa81d9ba28be1f2af8c8a58a7', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a333e93cf75d8998292accf83c4f9365fbacf36', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4d92d309da755462d164e4d18368f1d089c2fae', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '81241b926aa171f6b99d29ae5e96721bbba3d99d', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e39b03719ed767cdeff30561a2ef3699fe1fb20b', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9dc40dcaf6c9e91529706449ecc0efb764055f35', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff035a3934bfa26bb813297c3351cb1897935b49', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d56dea4be1bd695029457b7ec6bc4f8741880f3', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef3c153eedc2db55f71b422396c6e53284918997', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ada825dc1f2a4bf7c4d05c79b67bfe91703131d4', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e08b8864165e83851585e2c811bead5f9970fde', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03c7a7df158230f2c312096b7d8f6f1ebd0a9ed8', 'committer_username': 'dependabot[bot]', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 4, 16, 22, 34, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '153857bbfe225a9956325063d59bec3ef7761db9', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b839f2f1ae0df0fc614f4f656f96d14422d1b39', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2a3f0f4ecb4aab396ac8d6abd59e0bb6a01c812', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a13d4ae61142487b4b3b2061c6fe52d176f0512b', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d15bffb0f88da7d1a46aab2b8382914cecd6a28', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9055e565739df3535a24adf34d745f16c2aa5ced', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '411bcf960e607fa11c262666bf4f950c05f29d69', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ace29b319279198c4e52bc5750d1fe4b36d78f0a', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a8f098bfff80e566a0b72d9d2c3fe3fedb2b4df1', 'committer_username': '0x0elliot', 'committer_name': 'Aditya', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 5, 5, 44, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc77fe12a1561f937aa0b9f10b693960cc91604a', 'committer_username': 'mlodic', 'committer_name': 'Matteo Lodi', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 1, 12, 6, 51, tzinfo=datetime.timezone.utc)}]",Aditya,60684641,,User,,102,,178,138

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
231109256,IntelOwl,intelowlproject/IntelOwl,Python,423,3675,81,60,2443,79,58,17,"[{'id': 1298938520, 'number': 1628, 'closed': datetime.datetime(2023, 4, 6, 12, 38, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 2, 0, 7, 26, tzinfo=datetime.timezone.utc), 'time_taken': 390671.0, 'time_delta': '4 days, 12:31:11', 'additions': 503, 'deletions': 26, 'state': 'closed'}, {'id': 1173478586, 'number': 1360, 'closed': datetime.datetime(2023, 1, 26, 15, 49, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 12, 21, 10, 21, 59, tzinfo=datetime.timezone.utc), 'time_taken': 3130044.0, 'time_delta': '36 days, 5:27:24', 'additions': 190, 'deletions': 38, 'state': 'closed'}, {'id': 1119976169, 'number': 1287, 'closed': datetime.datetime(2022, 11, 18, 13, 43, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 11, 12, 14, 2, 47, tzinfo=datetime.timezone.utc), 'time_taken': 517219.0, 'time_delta': '5 days, 23:40:19', 'additions': 728, 'deletions': 112, 'state': 'closed'}, {'id': 1096146408, 'number': 1254, 'closed': datetime.datetime(2022, 10, 25, 13, 9, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 22, 12, 51, 8, tzinfo=datetime.timezone.utc), 'time_taken': 260273.0, 'time_delta': '3 days, 0:17:53', 'additions': 149, 'deletions': 95, 'state': 'closed'}, {'id': 1088515122, 'number': 1242, 'closed': datetime.datetime(2022, 10, 17, 10, 17, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 16, 22, 1, 11, tzinfo=datetime.timezone.utc), 'time_taken': 44184.0, 'time_delta': '12:16:24', 'additions': 104, 'deletions': 0, 'state': 'closed'}, {'id': 1006266783, 'number': 1123, 'closed': datetime.datetime(2022, 10, 10, 9, 14, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 23, 3, 48, 49, tzinfo=datetime.timezone.utc), 'time_taken': 6845125.0, 'time_delta': '79 days, 5:25:25', 'additions': 2632, 'deletions': 468, 'state': 'closed'}, {'id': 1006266143, 'number': 1122, 'closed': datetime.datetime(2022, 7, 23, 3, 48, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 23, 3, 44, 35, tzinfo=datetime.timezone.utc), 'time_taken': 222.0, 'time_delta': '0:03:42', 'additions': 1150, 'deletions': 91, 'state': 'closed'}, {'id': 816400105, 'number': 836, 'closed': datetime.datetime(2022, 2, 15, 11, 54, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 1, 7, 14, 10, 12, tzinfo=datetime.timezone.utc), 'time_taken': 3361437.0, 'time_delta': '38 days, 21:43:57', 'additions': 350, 'deletions': 55, 'state': 'closed'}, {'id': 795322868, 'number': 785, 'closed': datetime.datetime(2021, 12, 9, 9, 1, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 12, 5, 15, 59, 58, tzinfo=datetime.timezone.utc), 'time_taken': 320475.0, 'time_delta': '3 days, 17:01:15', 'additions': 79, 'deletions': 0, 'state': 'closed'}, {'id': 780367710, 'number': 764, 'closed': datetime.datetime(2021, 11, 16, 10, 2, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 11, 15, 7, 4, 17, tzinfo=datetime.timezone.utc), 'time_taken': 97112.0, 'time_delta': '1 day, 2:58:32', 'additions': 60, 'deletions': 0, 'state': 'closed'}, {'id': 780106150, 'number': 763, 'closed': datetime.datetime(2021, 11, 16, 10, 3, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 11, 14, 15, 17, 49, tzinfo=datetime.timezone.utc), 'time_taken': 153927.0, 'time_delta': '1 day, 18:45:27', 'additions': 49, 'deletions': 0, 'state': 'closed'}]"
