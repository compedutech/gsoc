pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
597226153,avx512: Implement _mm512_mask_or_pd function,,False,730,https://api.github.com/repos/simd-everywhere/simde/pulls/730,https://github.com/simd-everywhere/simde/pull/730,closed,182,3,4,5,2,0,0,0,[],2021-03-20 06:16:17+00:00,2021-03-20 18:10:32+00:00,42855.0,11:54:15,[],"[{'commit_sha': 'ae16975cda57b1243be4ccd72bfe0703db507c98', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '8be78dae1d41192473424bbceae1e9103adfbee0', 'committer_username': 'Glitch18', 'committer_name': 'Atharva Nimbalkar', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 28, 3, 15, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '576f3059b58ee9bfb1efa291e78d76e61c022e46', 'committer_username': 'nemequ', 'committer_name': 'Evan Nemerson', 'committer_email': 'evan@nemerson.com', 'commit_date': datetime.datetime(2008, 2, 27, 19, 24, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e1a1f1a4f907806f3729630d9326ebef288ba52', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d61b3f86a8b6a8d46a428697c1e8f9748a28fa1', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}]",,59763921,,User,,18,,0,10
597531626,AVX512: Implement various mask/maskz functions,"implemented mm512_mask_or_ps, mm512_maskz_or_ps, mm512_maskz_or_pd, mm512_mask_xor_ps, mm512_maskz_xor_ps, mm512_mask_xor_pd, mm512_maskz_xor_pd. Also implemented mm512_mullo_epi64 with mm512_mask_mullo_epi64 and mm512_maskz_mullo_epi64. 
All tests were generated with intel-all-gcc-10 and implementation tested on emscripten, gcc-10, intel-all-gcc-10, clang-11.",False,731,https://api.github.com/repos/simd-everywhere/simde/pulls/731,https://github.com/simd-everywhere/simde/pull/731,closed,1150,1,6,3,2,0,0,0,[],2021-03-21 17:51:39+00:00,2021-03-21 23:38:57+00:00,20838.0,5:47:18,[],"[{'commit_sha': 'e7a23f368cd11fc24495cf6af32a1566e8bf9ec7', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '50c15537782c0d0288f9761f325881a38a899cd3', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'c404e8d454b256c8bca127cfd7e4c746b45517a6', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",,59763921,,User,,18,,0,10
598714508,"avx512:implement mm512_insertf32x8,64x2 with mask(z)","Implemented mm512_insertf32x8, mm512_mask_insertf32x8, mm512_maskz_insertf32x8, mm512_insertf64x2, mm512_mask_insertf64x2, mm512_maskz_insertf64x2.
All tests were generated using intel-all-gcc-10. Implementation was tested on intel-all-gcc-10, emscripten, gcc-10 , clang-11",False,732,https://api.github.com/repos/simd-everywhere/simde/pulls/732,https://github.com/simd-everywhere/simde/pull/732,closed,850,0,2,7,1,0,0,0,[],2021-03-23 10:01:39+00:00,2021-03-23 18:45:25+00:00,31426.0,8:43:46,[],"[{'commit_sha': '92dffed5d1d4de5e24f7e520f6109c6856797b2e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'fdf48cee4cae86c332e3beda6eeeec0567abc896', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'c5bddd82bef0f98a2c60f995e16f74abbcfb9a88', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '514e056fa24f86b1bf11c00eae413224ef8ee889', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a9229f3814f117f1de727669c9e2d57e4078d724', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '0e44eea00217d04c396490fcfd27453627b840f9', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '9ab14b5e4bcb661edf104e2062faf819b6eaef46', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",,59763921,,User,,18,,0,10
599574270,"avx512: implement mm512_inserti{32x8,64x2} with mask(z)","Implemented mm512_inserti32x8, mm512_mask_inserti32x8, mm512_maskz_inserti32x8, mm512_inserti64x2, mm512_mask_inserti64x2, mm512_maskz_inserti64x2.
All tests were generated on intel-all-gcc-10 and implementations were tested on intel-all-gcc-10, emscripten, gcc-10, clang-11. ",False,735,https://api.github.com/repos/simd-everywhere/simde/pulls/735,https://github.com/simd-everywhere/simde/pull/735,closed,713,0,2,1,2,0,0,0,[],2021-03-24 10:36:54+00:00,2021-03-24 13:31:23+00:00,10469.0,2:54:29,[],"[{'commit_sha': '457b24dfe46eb234c92fbdbf20b72ae44c13e7a5', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}]",,59763921,,User,,18,,0,10
600066773,avx512: implement _fmsub_ functions for AXV512VL,"Implemented _mm256_mask3_fmsub_pd. _mm256_mask_fmsub_pd, _mm256_maskz_fmsub_pd, _mm_mask3_fmsub_pd, _mm_mask_fmsub_pd, _mm_maskz_fmsub_pd, _mm256_mask3_fmsub_ps, _mm256_mask_fmsub_ps, _mm256_maskz_fmsub_ps, _mm_mask3_fmsub_ps, _mm_mask_fmsub_ps, _mm_maskz_fmsub_ps.
All tests were generated using intel-all-gcc-10 and implementation tested on intel-all-gcc-10, gcc-10, emscripten, clang-11. ",False,736,https://api.github.com/repos/simd-everywhere/simde/pulls/736,https://github.com/simd-everywhere/simde/pull/736,closed,1236,0,2,1,0,0,0,0,[],2021-03-24 21:01:20+00:00,2021-03-26 22:50:28+00:00,179348.0,"2 days, 1:49:08",[],"[{'commit_sha': '6dd2c9b9e1f336d7e0edc81e58cfaf94314b8d56', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}]",,59763921,,User,,18,,0,10
600889998,avx512: implement mm256_mask_compress_pd,"Implemented mm256_mask_compress_pd. 
Tests were generated using intel-all-gcc-10. Implementation was checked on intel-all-gcc-10, emscripten, clang-11, gcc-10.",False,738,https://api.github.com/repos/simd-everywhere/simde/pulls/738,https://github.com/simd-everywhere/simde/pull/738,closed,124,0,5,2,1,8,0,0,[],2021-03-25 16:34:38+00:00,2021-03-26 22:50:28+00:00,108950.0,"1 day, 6:15:50","[{'comment_id': 602342055, 'comment_body': 'These two lines (17 and 18) should be indented to make it clear that these lines are part of the declaration which begins on L16.', 'comment_created': datetime.datetime(2021, 3, 26, 14, 33, 21, tzinfo=datetime.timezone.utc), 'commenter': 'nemequ', 'type': 'User'}, {'comment_id': 602342956, 'comment_body': 'There should be a blank line between the declarations and the next block of code (i.e., between lines 19 and 20) to help make it easy to tell at a glance when the declarations end and the body begins.', 'comment_created': datetime.datetime(2021, 3, 26, 14, 34, 33, tzinfo=datetime.timezone.utc), 'commenter': 'nemequ', 'type': 'User'}, {'comment_id': 602345783, 'comment_body': ""There should be spaces on both sides of the semi-colons to make it easier to see where one clause ends and another begins, as well as on both sides of the division operator for similar reasons.  There should also be a space between the close-paren and the open-curly-brace.  So:\r\n\r\n```c\r\nfor (size_t i = 0 ; i < (sizeof(a_.f64) / sizeof(a_.f64[0])) ; i++) {\r\n```\r\n\r\nNotice how you can kind of tell what is going on just by the groupings; you don't even have to read the code.  That's what we're after; code should always be as easy to read as we can make it."", 'comment_created': datetime.datetime(2021, 3, 26, 14, 38, 16, tzinfo=datetime.timezone.utc), 'commenter': 'nemequ', 'type': 'User'}, {'comment_id': 602346188, 'comment_body': 'There is an extra space here after the assignment operator (the =).  There should only be one.', 'comment_created': datetime.datetime(2021, 3, 26, 14, 38, 46, tzinfo=datetime.timezone.utc), 'commenter': 'nemequ', 'type': 'User'}, {'comment_id': 602346819, 'comment_body': 'Similar to L21:\r\n\r\n```c\r\nfor ( ; j < (sizeof(a_.f64) / sizeof(a_.f64[0])) ; j++) {\r\n```\r\n\r\nThere should also be a blank line between the two loops to help break them up.', 'comment_created': datetime.datetime(2021, 3, 26, 14, 39, 34, tzinfo=datetime.timezone.utc), 'commenter': 'nemequ', 'type': 'User'}, {'comment_id': 602347071, 'comment_body': 'Similar to L23; there is an extra space here.', 'comment_created': datetime.datetime(2021, 3, 26, 14, 39, 55, tzinfo=datetime.timezone.utc), 'commenter': 'nemequ', 'type': 'User'}, {'comment_id': 602348092, 'comment_body': 'One more empty line here, between lines 28 and 29, just like the blank line between the loops.', 'comment_created': datetime.datetime(2021, 3, 26, 14, 41, 14, tzinfo=datetime.timezone.utc), 'commenter': 'nemequ', 'type': 'User'}, {'comment_id': 602418516, 'comment_body': 's/COPYSIGN/COMPRESS/', 'comment_created': datetime.datetime(2021, 3, 26, 16, 12, tzinfo=datetime.timezone.utc), 'commenter': 'nemequ', 'type': 'User'}]","[{'commit_sha': '402a973068c6ffdfeee1133f1e4b97ebade4dc66', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e9df98044b98bed35b52aaa88d9eb208beaa378', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}]",,59763921,,User,,18,,0,10
602216739,avx512:implement mm256_mask(z)_compress(storeu)_p*,"Implemented mm256_mask_compressstoreu_pd, mm256_maskz_compress_pd, mm256_mask_compress_ps, mm256_mask_compressstoreu_ps, mm256_maskz_compress_ps.
All tests were generated using intel-all-gcc-10. Implementation was tested on intel-all-gcc-10, emscripten, gcc-10, clang-11.",False,742,https://api.github.com/repos/simd-everywhere/simde/pulls/742,https://github.com/simd-everywhere/simde/pull/742,closed,500,0,2,3,0,4,0,0,[],2021-03-28 10:04:01+00:00,2021-04-02 18:13:42+00:00,461381.0,"5 days, 8:09:41","[{'comment_id': 602962012, 'comment_body': ""Please keep opening curly brackets on the same line as the condition (i.e., `for (...) {` not `for (...)\\n{`.\r\n\r\nThis is really just a matter of preference; there isn't a good reason to prefer one style over the other, but as with other style decisions a code base should be consistent."", 'comment_created': datetime.datetime(2021, 3, 29, 0, 57, 49, tzinfo=datetime.timezone.utc), 'commenter': 'nemequ', 'type': 'User'}, {'comment_id': 602962490, 'comment_body': 'There should be a space between the `if` and the open-paren, and another between the close-paren and open-curly-bracket (`if (k & 1) {`).', 'comment_created': datetime.datetime(2021, 3, 29, 1, 0, 21, tzinfo=datetime.timezone.utc), 'commenter': 'nemequ', 'type': 'User'}, {'comment_id': 602962579, 'comment_body': 'There should be a space between the `for` and the open-paren.', 'comment_created': datetime.datetime(2021, 3, 29, 1, 0, 58, tzinfo=datetime.timezone.utc), 'commenter': 'nemequ', 'type': 'User'}, {'comment_id': 602963881, 'comment_body': ""Same thing regarding the spaces around the parenthesis.\r\n\r\nMore importantly, though, why are you checking that `k` is non-zero here but not in the other implementations?\r\n\r\nIn this case, the check is largely superflouous; you could switch to only using `k` by masking out the unused bits so you only have one comparison.  Or you can drop the check of `k` completely to make it match the other functions.\r\n\r\nIn most code my inclination would be to mask `k` so you can terminate the loop early, but based on the use case for these functions I don't think you're going to see much of an improvement from that, and it makes it a bit harder for the CPU to speculate.  I haven't benchmarked it so I can't be sure, but I think it would be better to get rid of the check on `k` and just make this match the other implementations."", 'comment_created': datetime.datetime(2021, 3, 29, 1, 8, 47, tzinfo=datetime.timezone.utc), 'commenter': 'nemequ', 'type': 'User'}]","[{'commit_sha': '46e2b0ac984d54c3e8665ee782c522d438763347', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '336f4b81f3951f5ba01ab52801d5399835246956', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf637f7fbf51dc8452b7e507be147355a1ffa862', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}]",,59763921,,User,,18,,0,10
611521808,avx512: implement mm*_mask(z)_compress(storeu)_*,"Implemented mm512_mask_compress_ps/pd/epi32/epi64, mm512_mask_compressstoreu_ps/pd/epi32/epi64, mm512_maskz_compress_ps/pd/epi32/epi64, mm256_mask_compress_epi32/epi64, mm256_mask_compressstoreu_epi32/epi64, mm256_maskz_compress_epi32/epi64.
All tests were generated using intel-all-gcc-10 and implementations were checked on intel-all-gcc-10, emscripten, clang-11, gcc-10.",False,747,https://api.github.com/repos/simd-everywhere/simde/pulls/747,https://github.com/simd-everywhere/simde/pull/747,closed,1965,3,2,1,0,0,0,0,[],2021-04-08 12:39:56+00:00,2021-04-10 17:01:07+00:00,188471.0,"2 days, 4:21:11",[],"[{'commit_sha': '52f5efe95a037263cfd88993ca126c8fbd759148', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}]",,59763921,,User,,18,,0,10
632906468,avx512: implement mm512_unpacklo_* functions,"Implemented mm512_unpacklo_epi32, mm512_unpacklo_epi64, mm512_unpacklo_ps, mm512_unpacklo_pd. All tests were generated using intel-all-gcc-10 and implementation was checked on intel-all-gcc-10, emscripten, gcc-10, clang-11.",False,763,https://api.github.com/repos/simd-everywhere/simde/pulls/763,https://github.com/simd-everywhere/simde/pull/763,closed,523,3,2,2,1,2,0,0,[],2021-05-07 15:00:27+00:00,2021-05-08 03:13:51+00:00,44004.0,12:13:24,"[{'comment_id': 628294382, 'comment_body': 'I know you\'ve just replicated what the other functions look like here, but this should really be conditional on `SIMDE_NATURAL_VECTOR_SIZE_LE(256)`, with a ""normal"" portable implementation (a `SIMDE_VECTORIZE` loop) in an additional else condition.\r\n\r\nThe reason for that is that if we are on a machine with a natural vector length of 512-bits but don\'t have AVX-512BW (for example, Fujitsu\'s A64FX has 512-bit SVE units) we still want to be able to take advantage of the full width of the vector processor.  With what you have here right now, machines like that would fall back on 2 half-vector versions.', 'comment_created': datetime.datetime(2021, 5, 7, 15, 13, 34, tzinfo=datetime.timezone.utc), 'commenter': 'nemequ', 'type': 'User'}, {'comment_id': 628297543, 'comment_body': 'I understand. Will add that. Thanks', 'comment_created': datetime.datetime(2021, 5, 7, 15, 18, 2, tzinfo=datetime.timezone.utc), 'commenter': 'simba611', 'type': 'User'}]","[{'commit_sha': '5213835c4cf8bd3e0a367c8acdb0d3843b252a5a', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd174dde38ac3e47281f3dc45bf9c9ec02502c2d9', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}]",,59763921,,User,,18,,0,10
634723140,avx512: implement mask variants of unpacklo,"Implemented mm512_mask_unpacklo_epi8, mm512_maskz_unpacklo_epi8, mm512_mask_unpacklo_epi16, mm512_maskz_unpacklo_epi16, mm512_mask_unpacklo_epi32, mm512_maskz_unpacklo_epi32, mm512_mask_unpacklo_epi64, mm512_maskz_unpacklo_epi64, mm512_mask_unpacklo_ps, mm512_maskz_unpacklo_ps, mm512_mask_unpacklo_pd, mm512_maskz_unpacklo_pd. 
All tests were generated using intel-all-gcc-10 and implementations were tested on intel-all-gcc-10, emscripten, gcc-10, clang-11. 
Also added vector size conditional for unpackhi implementations. 
Corrected CPUID flags for existing implementations of unpacklo functions.",False,767,https://api.github.com/repos/simd-everywhere/simde/pulls/767,https://github.com/simd-everywhere/simde/pull/767,closed,2014,14,3,1,0,0,0,0,[],2021-05-08 17:55:48+00:00,2021-05-13 18:26:55+00:00,433867.0,"5 days, 0:31:07",[],"[{'commit_sha': '36c5d3695be689a146f4b0afc6c70a20651084f4', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}]",,59763921,,User,,18,,0,10
640105546,avx512: implement mm256_mask(z)_unpack* functions,"Implement mm256_mask_unpacklo_epi8, mm256_maskz_unpacklo_epi8, mm256_mask_unpacklo_epi16, mm256_maskz_unpacklo_epi16, mm256_mask_unpacklo_epi32, mm256_maskz_unpacklo_epi32, mm256_mask_unpacklo_epi64, mm256_maskz_unpacklo_epi64, mm256_mask_unpacklo_ps, mm256_maskz_unpacklo_ps, mm256_mask_unpacklo_pd, mm256_maskz_unpacklo_pd, mm256_mask_unpackhi_epi8, mm256_maskz_unpackhi_epi8, mm256_mask_unpackhi_epi16, mm256_maskz_unpackhi_epi16, mm256_mask_unpackhi_epi32, mm256_maskz_unpackhi_epi32, mm256_mask_unpackhi_epi64, mm256_maskz_unpackhi_epi64, mm256_mask_unpackhi_ps, mm256_maskz_unpackhi_ps, mm256_mask_unpackhi_pd, mm256_maskz_unpackhi_pd.
All tests were generated using intel-all-gcc-10 and implementations were tested in intel-all-gcc-10, gcc-10, clang-11, emscripten.",False,769,https://api.github.com/repos/simd-everywhere/simde/pulls/769,https://github.com/simd-everywhere/simde/pull/769,closed,4789,76,4,2,0,0,0,0,[],2021-05-11 10:43:16+00:00,2021-05-13 18:26:55+00:00,200619.0,"2 days, 7:43:39",[],"[{'commit_sha': '36c5d3695be689a146f4b0afc6c70a20651084f4', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62afb5bd8ab71264afed04b594ac8b77bc43801c', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}]",,59763921,,User,,18,,0,10
643496470,avx512: implement mm_mask(z)_unpacklo_* functions,"Implemented mm_mask_unpacklo_epi8, mm_maskz_unpacklo_epi8, mm_mask_unpacklo_epi16, mm_maskz_unpacklo_epi16, mm_mask_unpacklo_epi32, mm_maskz_unpacklo_epi32, mm_mask_unpacklo_epi64, mm_maskz_unpacklo_epi64, mm_mask_unpacklo_ps, mm_maskz_unpacklo_ps, mm_mask_unpacklo_pd, mm_maskz_unpacklo_pd.
All tests were generated using intel-all-gcc-10 and implementations were tested on intel-all-gcc-10, gcc-10, clang-11, emscripten.",False,771,https://api.github.com/repos/simd-everywhere/simde/pulls/771,https://github.com/simd-everywhere/simde/pull/771,closed,5980,134,4,3,0,0,0,0,[],2021-05-12 20:54:34+00:00,2021-05-14 02:02:16+00:00,104862.0,"1 day, 5:07:42",[],"[{'commit_sha': '36c5d3695be689a146f4b0afc6c70a20651084f4', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62afb5bd8ab71264afed04b594ac8b77bc43801c', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e2334a30b8772efbed01870d4f8ab3cb2552fb8', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}]",,59763921,,User,,18,,0,10
643499591,avx2: add vector size conditional for unpack,"Updated unpack functions for avx2 to add vector size conditional and loop implementation.
Updated mm256_unpacklo_epi8, mm256_unpacklo_epi16, mm256_unpacklo_epi32, mm256_unpacklo_epi64, mm256_unpackhi_epi8, mm256_unpackhi_epi16, mm256_unpackhi_epi32, mm256_unpackhi_epi64.
Implementation was tested on intel-all-gcc-10, gcc-10, clang-11, emscripten. ",False,772,https://api.github.com/repos/simd-everywhere/simde/pulls/772,https://github.com/simd-everywhere/simde/pull/772,closed,72,24,1,1,1,0,0,0,[],2021-05-12 21:00:07+00:00,2021-05-15 20:26:32+00:00,257185.0,"2 days, 23:26:25",[],"[{'commit_sha': '88c6ca3f1c1114a4e1e9d3852de1a25e341410f7', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}]",,59763921,,User,,18,,0,10
647073384,avx512: implement mm_mask(z)_unpack* funcs,"Implements mm_mask_unpacklo_epi8, mm_maskz_unpacklo_epi8, mm_mask_unpacklo_epi16, mm_maskz_unpacklo_epi16, mm_mask_unpacklo_epi32, mm_maskz_unpacklo_epi32, mm_mask_unpacklo_epi64, mm_maskz_unpacklo_epi64, mm_mask_unpacklo_ps, mm_maskz_unpacklo_ps,  mm_mask_unpacklo_pd, mm_maskz_unpacklo_pd, mm_mask_unpackhi_epi8, mm_maskz_unpackhi_epi8, mm_mask_unpackhi_epi16, mm_maskz_unpackhi_epi16, mm_mask_unpackhi_epi32, mm_maskz_unpackhi_epi32, mm_mask_unpackhi_epi64, mm_maskz_unpackhi_epi64, mm_mask_unpackhi_ps, mm_maskz_unpackhi_ps, mm_mask_unpackhi_pd, mm_maskz_unpackhi_pd, 
All tests were generated using intel-all-gcc-10 and implementations were tested on intel-all-gcc-10, gcc-10, clang-11, emscripten, icc.   ",False,781,https://api.github.com/repos/simd-everywhere/simde/pulls/781,https://github.com/simd-everywhere/simde/pull/781,closed,2261,15,4,1,0,0,0,0,[],2021-05-18 20:31:35+00:00,2021-05-20 02:58:00+00:00,109585.0,"1 day, 6:26:25",[],"[{'commit_sha': '34486dfaf0f94dfa117e3e6f269a7b9303144b72', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}]",,59763921,,User,,18,,0,10
640612688,avx512: implement mm512_range_ps/d functions,"Implemented mm512_range_pd, mm512_range_ps. 
All tests were generated using intel-all-gcc-10 and implementations were tested on intel-all-gcc-10, gcc-10, clang-11, emscripten.",False,770,https://api.github.com/repos/simd-everywhere/simde/pulls/770,https://github.com/simd-everywhere/simde/pull/770,closed,1906,1,7,6,2,1,0,0,[],2021-05-11 14:00:22+00:00,2021-05-20 17:04:31+00:00,788649.0,"9 days, 3:04:09","[{'comment_id': 632020327, 'comment_body': 'This would be a lot easier to follow using a switch.  Not only that, but we want to avoid branching, and compilers often have an easier time optimizing a switch to do that.\r\n\r\n```c\r\nswitch (imm8) {\r\n  case 1:\r\n    ...\r\n    break;\r\n  case 2:\r\n    ...\r\n    break;\r\n}\r\n```', 'comment_created': datetime.datetime(2021, 5, 13, 18, 36, 20, tzinfo=datetime.timezone.utc), 'commenter': 'nemequ', 'type': 'User'}]","[{'commit_sha': '1f022aa9637dbc789ec5ec3741726545ad3ca2e3', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aba86e97ae3726b42ff86ef6364797f4103b00a2', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '852d5111e60f015ca71f4d8beb87910d4893a8e6', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9ff1203a724e8c850f9d1b39fd076e1a30b1b02', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b628a3b7d297f8b5e4e26ae0ca15d47b7e73d291', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '541b9209c27142cc51f201445af5218397bff8d5', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}]",,59763921,,User,,18,,0,10
649381437,avx512: initial roundscale implementation,"Implemented mm_roundscale_ps. 
Tests were generated using intel-all-gcc-10 and implementations were tested on intel-all-gcc-10, gcc-10, clang-11, emscripten, icc.",False,786,https://api.github.com/repos/simd-everywhere/simde/pulls/786,https://github.com/simd-everywhere/simde/pull/786,closed,488,0,5,7,2,4,0,0,[],2021-05-20 19:53:24+00:00,2021-05-25 11:32:49+00:00,401965.0,"4 days, 15:39:25","[{'comment_id': 636587949, 'comment_body': ""`simde_mm_cmp_ps_mask` and `simde_mm_mask_mov_ps` are only available in AVX-512, and emulating them is pretty slow.  Instead, how about using `simde_mm_cmpeq_ps` and `simde_x_mm_select_ps`?  They'll perform a lot better on machines without AVX-512, *especially* on other architectures.\r\n\r\nOther than that, this looks really good."", 'comment_created': datetime.datetime(2021, 5, 21, 2, 11, 34, tzinfo=datetime.timezone.utc), 'commenter': 'nemequ', 'type': 'User'}, {'comment_id': 636626992, 'comment_body': 'Will update using cmpeq and select functions ', 'comment_created': datetime.datetime(2021, 5, 21, 4, 29, 32, tzinfo=datetime.timezone.utc), 'commenter': 'simba611', 'type': 'User'}, {'comment_id': 637395341, 'comment_body': ""Older GCC dies here due to dereferencing the type-punned pointer; see https://nemequ.semaphoreci.com/jobs/a75620d6-70ea-456d-ba79-a6740c911367\r\n\r\nInstead, you should use `simde_memcpy`, which will copy the underlying data without aliasing:\r\n\r\n```c\r\nsimde_float32 exponent1f;\r\nsimde_memcpy(&exponent1f, &exponent, sizeof(exponent1f));\r\n```\r\n\r\nCompilers are very good about getting rid of the memcpy, so this won't actually create any cost at runtime."", 'comment_created': datetime.datetime(2021, 5, 22, 12, 1, 56, tzinfo=datetime.timezone.utc), 'commenter': 'nemequ', 'type': 'User'}, {'comment_id': 637395965, 'comment_body': ""Also, you should move the simde_mm_mul_ps call out of the CONSTIFY macro.  Everything in the arguments to the macro gets duplicated 16 times, so it's better to minimize that.\r\n\r\nFinally, for the unused value, you should use `(HEDLEY_UNREACHABLE(), simde_mm_setzero_ps())`.  The `HEDLEY_UNREACHABLE` lets most compilers know that that code can never be reached, so it doesn't have to handle it.  The `simde_mm_setzero_ps()` part is only for compilers which `HEDLEY_UNREACHABLE()` can't be implemented for, which may emit a warning if you don't handle the case."", 'comment_created': datetime.datetime(2021, 5, 22, 12, 7, 57, tzinfo=datetime.timezone.utc), 'commenter': 'nemequ', 'type': 'User'}]","[{'commit_sha': '71d05ea7df1075bf6ff01f68905863bc93c6dfae', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '30eafb9f2b22c279daa1591ee2c39d70e626fdfa', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6161a19d471e5e779ff1bfffa77bc0c5e9da80ef', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc83df24d69349ca4a781ae6953c4627f6fcfa3b', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b07d80e9e563da2576f01f30fa703eb9a52a8ea', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b706281f82e2649284a85a6d3b736d3f246150e0', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b28e8f65bc54e7ef736e40bedea0b72814ccc91b', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}]",,59763921,,User,,18,,0,10
649864990,"avx512: implement mm(256, 512)_mask(z)_range_p*","Implements mm_mask_range_ps, mm_maskz_range_ps, mm256_mask_range_ps, mm256_maskz_range_ps, mm512_mask_range_ps, mm512_maskz_range_ps, mm_mask_range_pd, mm_maskz_range_pd, mm256_mask_range_pd, mm256_maskz_range_pd, mm512_mask_range_pd, mm512_maskz_range_pd.
All tests were generated using intel-all-gcc-10 and implementations were tested on intel-all-gcc-10, gcc-10, clang-11, emscripten, icc.",False,788,https://api.github.com/repos/simd-everywhere/simde/pulls/788,https://github.com/simd-everywhere/simde/pull/788,closed,1360,0,2,3,1,0,0,0,[],2021-05-21 10:49:13+00:00,2021-05-25 11:32:50+00:00,348217.0,"4 days, 0:43:37",[],"[{'commit_sha': '794e92e01543dba8d308b50d795e325fbf4b0aaa', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8cd7066dcd668424bc6a725be882ba6889970b7b', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e10d442927088ab854c983b9de2e7e1c56871e41', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}]",,59763921,,User,,18,,0,10
656481960,"avx512: implements mm{256,512}_roundscale_p*","Implements mm256_roundscale_ps, mm256_roundscale_pd, mm512_roundscale_ps, mm512_roundscale_pd, x_mm512_round_ps, x_mm512_round_pd.
All tests were generated using intel-all-gcc-10 and implementations were tested on intel-all-gcc-10, gcc-10, clang-11, emscripten, icc.",False,805,https://api.github.com/repos/simd-everywhere/simde/pulls/805,https://github.com/simd-everywhere/simde/pull/805,closed,5081,242,7,2,1,0,0,0,[],2021-05-28 13:22:35+00:00,2021-05-28 23:26:22+00:00,36227.0,10:03:47,[],"[{'commit_sha': '237fa6c65161013da7e24b9cb88b5cdbef9128a1', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc12438bb2370eba1fd0b12848a583601cbd488d', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}]",,59763921,,User,,18,,0,10
657465343,avx512: add lower vector fallbacks to round,"Added fallback to lower vector functions for x_mm512_round_ps, x_mm512_round_ps, mm256_round_ps, mm256_round_ps.
Also fixed typos for SIMDE_STATEMENT_EXPR_ in roundscale.h",False,806,https://api.github.com/repos/simd-everywhere/simde/pulls/806,https://github.com/simd-everywhere/simde/pull/806,closed,335,283,3,1,0,0,0,0,[],2021-05-29 13:05:58+00:00,2021-05-29 16:25:20+00:00,11962.0,3:19:22,[],"[{'commit_sha': '47cb4e753c76914b240ea24e99f48dea17ecff4e', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}]",,59763921,,User,,18,,0,10
657793795,avx512/range: implement mm{512}_{mask(z)}_range_{round}*,"Implements mm_x_range_ss, mm_mask_range_ss, mm_maskz_range_ss, mm_x_range_sd, mm_mask_range_sd, mm_maskz_range_sd, mm_range_round_ss, mm_mask_range_round_ss, mm_maskz_range_round_ss, mm_range_round_sd, mm_mask_range_round_sd, mm_maskz_range_round_sd, mm512_range_round_ps, mm512_mask_range_round_ps, mm512_maskz_range_round_ps, mm512_range_round_pd, mm512_mask_range_round_pd, mm512_maskz_range_round_pd.
All tests were generated using intel-all-gcc-10 and implementations were tested on intel-all-gcc-10, gcc-10, clang-11, emscripten, icc.",False,807,https://api.github.com/repos/simd-everywhere/simde/pulls/807,https://github.com/simd-everywhere/simde/pull/807,closed,3502,0,2,1,0,0,0,0,[],2021-05-30 20:04:25+00:00,2021-05-31 17:53:10+00:00,78525.0,21:48:45,[],"[{'commit_sha': 'ec9446cab7770985cce8d8c7be1f53f4b64b40eb', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}]",,59763921,,User,,18,,0,10
660036594,avx512/roundscale: implement mm{512}{_mask(z)}_roundscale{_round}*,"Implements mm_roundscale_ss, mm_roundscale_ss, mm_mask_roundscale_ss, mm_mask_roundscale_sd, mm_maskz_roundscale_ss, mm_maskz_roundscale_sd, mm_roundscale_round_ss, mm_roundscale_round_sd, mm_mask_roundscale_round_ss, mm_mask_roundscale_round_sd, mm_maskz_roundscale_round_ss, mm_maskz_roundscale_round_sd, mm512_roundscale_round_ps, mm512_roundscale_round_pd, mm512_mask_roundscale_round_ps, mm512_mask_roundscale_round_pd, mm512_maskz_roundscale_round_ps, mm512_maskz_roundscale_round_pd.
All tests were generated using intel-all-gcc-10 and implementations were tested on intel-all-gcc-10, gcc-10, clang-11, emscripten, icc.",False,816,https://api.github.com/repos/simd-everywhere/simde/pulls/816,https://github.com/simd-everywhere/simde/pull/816,closed,9243,4283,12,2,0,0,0,0,[],2021-06-02 12:48:59+00:00,2021-06-02 22:59:22+00:00,36623.0,10:10:23,[],"[{'commit_sha': 'abe3ceef93f584ca6a8f2da22c313cb048251f68', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bdaa8e80d861c98626cdc63263fda6d9e4311ca2', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}]",,59763921,,User,,18,,0,10
702117932,avx512/roundscale: fix ieee754 assumption,,False,891,https://api.github.com/repos/simd-everywhere/simde/pulls/891,https://github.com/simd-everywhere/simde/pull/891,closed,21,21,1,2,0,0,0,0,[],2021-08-03 09:34:57+00:00,2021-08-03 23:35:13+00:00,50416.0,14:00:16,[],"[{'commit_sha': '88749efa8f25b49db6fe86f8431b1d36cca901cd', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d8bf1c716626ecbf9e42d316f897b3b85212012', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}]",,59763921,,User,,18,,0,10
661757975,avx512/ternarylogic: implement mm_ternarylogic_epi32,"Implements mm_ternarylogic_epi32. 
Tests were generated using intel-all-gcc-10 and implementations were tested using intel-all-gcc-10, gcc-10, clang-11, emscripten, icc.",False,822,https://api.github.com/repos/simd-everywhere/simde/pulls/822,https://github.com/simd-everywhere/simde/pull/822,closed,7046,22,12,10,35,0,0,0,[],2021-06-04 13:12:48+00:00,2021-06-25 14:02:57+00:00,1817409.0,"21 days, 0:50:09",[],"[{'commit_sha': 'be369ce12c6622e425b5754d4abe90e21e7df35c', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '416ed12f76e9981e5b3fa485ff518a30262f4ab5', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '144dfa38da5d484e530e23b21affb0e678437d82', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12032004ef041020f86cd0fd0e82d741e36f62d3', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5743a3321974dfe281332808b001515cb12c4014', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05f13c4b3c0a394caf305ed1ae56cf9ad100b978', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f7acaa0eae78572b29a349fa10607d72c38c2b2d', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b89242762de7150452a6f35931b00d03745f1477', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '749b44f16636a1f6e6d754d9594949d33cb84d24', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'acb8c42e279fc8053967440c1f339b8c930b0aa3', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}]",,59763921,,User,,18,,0,10
675499514,avx512/ternarylogic: implements _mm{256/512}{_mask(z)}_ternarylogic_epi32/64,"Implements simde_mm{256/512}{_mask(z)}_ternarylogic_epi32/64.1
All tests were generated using intel-all-gcc-10.",False,842,https://api.github.com/repos/simd-everywhere/simde/pulls/842,https://github.com/simd-everywhere/simde/pull/842,closed,10208,22,12,11,0,0,0,0,[],2021-06-22 14:55:02+00:00,2021-07-14 17:06:48+00:00,1908706.0,"22 days, 2:11:46",[],"[{'commit_sha': 'be369ce12c6622e425b5754d4abe90e21e7df35c', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '416ed12f76e9981e5b3fa485ff518a30262f4ab5', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '144dfa38da5d484e530e23b21affb0e678437d82', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12032004ef041020f86cd0fd0e82d741e36f62d3', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5743a3321974dfe281332808b001515cb12c4014', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05f13c4b3c0a394caf305ed1ae56cf9ad100b978', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f7acaa0eae78572b29a349fa10607d72c38c2b2d', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b89242762de7150452a6f35931b00d03745f1477', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '749b44f16636a1f6e6d754d9594949d33cb84d24', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15cb4a01fa3b62ebdd9d75001b6d30fc3cb77cf9', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c4460745a495298c38885ba49433dc56ad3a634', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}]",,59763921,,User,,18,,0,10
669774433,avx512/rorv: implements _mm_rorv_epi32,"Implements simde_mm_rorv_epi32. 
Tests were generated using intel-all-gcc-10.",False,835,https://api.github.com/repos/simd-everywhere/simde/pulls/835,https://github.com/simd-everywhere/simde/pull/835,closed,109,0,5,3,0,0,0,0,[],2021-06-14 18:12:32+00:00,2021-06-15 03:00:12+00:00,31660.0,8:47:40,[],"[{'commit_sha': '0bd71f47f0d893b2db2fdbf52acc7c70279ad90a', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11363e155abcf027248ca9863230d8749ffd8134', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a4e69c27f0bf2c7ea4eb65599111c793591717a', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}]",,59763921,,User,,18,,0,10
670523934,avx512/rorv: implement mm{256/512}{_mask(z)}_rorv_epi32/64,"Implements mm_rorv_epi64, mm_mask_rorv_epi32/64, mm_maskz_rorv_epi32/64, mm256_rorv_epi32/64, mm256_mask_rorv_epi32/64, mm256_maskz_rorv_epi32/64, mm512_rorv_epi32/64, mm512_mask_rorv_epi32/64, mm512_maskz_rorv_epi32/64, mm512_sllv_epi32, mm512_sllv_epi64.
All tests were generated using intel-all-gcc-10.",False,836,https://api.github.com/repos/simd-everywhere/simde/pulls/836,https://github.com/simd-everywhere/simde/pull/836,closed,1942,0,4,2,0,0,0,0,[],2021-06-15 15:40:46+00:00,2021-06-21 02:54:06+00:00,472400.0,"5 days, 11:13:20",[],"[{'commit_sha': 'b0b044e75cb4189f188d9b2c6362c666a5e45472', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2e21ee8414ee926bf914cdcaadaa85e345f2f3b6', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}]",,59763921,,User,,18,,0,10
672957609,avx512/ror: implements ror family,"Implements mm{256, 512}{_mask(z)}_ror_epi32/64.
Tests were generated using intel-all-gcc-10.",False,838,https://api.github.com/repos/simd-everywhere/simde/pulls/838,https://github.com/simd-everywhere/simde/pull/838,closed,2328,0,5,4,0,6,0,0,[],2021-06-17 20:19:22+00:00,2021-06-25 14:02:57+00:00,668615.0,"7 days, 17:43:35","[{'comment_id': 655051995, 'comment_body': 'This won\'t work.  You\'re using `a` multiple times in the macro, which can easily cause horrible problems.  An easy to understand example would be something like\r\n\r\n```c\r\nr = simde_mm_ror_epi32((value = simde_mm_add_epi32(value, other_value)), 4);\r\n```\r\n\r\nWith macros, you\'re not calling the macro with the result of the expression, the *entire* expression is substituted into the code, so every time you use `a` in the macro what you\'re really doing is `(value = simde_mm_add_epi32(value, other_value))`.\r\n\r\nHowever, it can be a lot more subtle.  For example, what if instead of `simde_mm_add_epi32` they pass the result of a function which does some expensive computation?  Or if you have a pass-by-reference parameter it\'s really easy to mess something up, especially in C++ where the function call looks exactly the same.\r\n\r\nIt\'s okay to do this sort of thing with the `imm8` parameter because they are required to be an integer constant expression, but for ""normal"" parameters it\'s a big problem.  And, since that\'s an issue on the *caller* side, there isn\'t really anything we can do to prevent it in SIMDe.\r\n\r\nFor most compilers you can work around the issue using a [statement expression](https://gcc.gnu.org/onlinedocs/gcc/Statement-Exprs.html); we even have a macro (`SIMDE_STATEMENT_EXPR_`) which you can check to see if statement expressions are supported.  That would look something like:\r\n\r\n```c\r\n#if defined(SIMDE_STATEMENT_EXPR_)\r\n  #define simde_mm_ror_epi32(a, imm8) \\\r\n    SIMDE_STATEMENT_EXPR_(({ \\\r\n      simde_mm_ror_epi32_a_ = a; \\\r\n      simde_mm_ror_epi32_internal_( \\\r\n        simde_mm_ror_epi32_a_, \\\r\n        simde_mm_or_si128( \\\r\n          simde_mm_srli_epi32(simde_mm_ror_epi32_a_, \\\r\n            (imm8 & 31) \\\r\n          ), \\\r\n          simde_mm_slli_epi32( \\\r\n            simde_mm_ror_epi32_a_, \\\r\n            (32 - (imm8 & 31)) \\\r\n          ) \\\r\n        ), \\\r\n      imm8) \\\r\n    }))\r\n#endif\r\n```\r\n\r\nHowever, this doesn\'t work on MSVC.\r\n\r\nThis might mean that you can\'t use `simde_mm_srli_epi32` and `simde_mm_slli_epi32`, but that\'s probably okay in this case.  This is a pretty simple function which I would expect most compilers to be able to autovectorize well, especially those which support GCC-style vector extensions (where you can just do `(a_.u32 >> count) | (a_.u32 << count)`, though of course that *also* doesn\'t include MSVC).', 'comment_created': datetime.datetime(2021, 6, 21, 3, 32, 8, tzinfo=datetime.timezone.utc), 'commenter': 'nemequ', 'type': 'User'}, {'comment_id': 655054489, 'comment_body': 'For cases like this it\'s generally a good idea to get into the habit of using the ternary operator.  In this case, the whole function could just be\r\n\r\n```c\r\nreturn (imm8 & 31) ? result : a;\r\n```\r\n\r\nNot only does that make the code a bit easier to read IMHO (as long as you understand the ternary operator, which I think is a reasonable expectation for people reading the SIMDe source code), it also eliminates the if / else.  When writing performance-sensitive code (especially when we want the compiler to vectorize) if/else is a bit of a code smell; in this case I\'m sure any compiler will handle it exactly the same, but if you were doing something a bit more complicated like:\r\n\r\n```c\r\nif (imm8 & 31)\r\n  foo = result;\r\nelse\r\n  bar = result;\r\n```\r\n\r\nThat will cause a branch in the compiled code, and branches are *slow*.  The ternary operator is really nice because you can\'t really do this sort of general-purpose branching; all you can do is ""based on condition, the result is either X or Y"", which is generally handled much better in hardware.  On the scalar side, you have the `cmov` instruction on x86, and in SIMD you have various bitselect/blend functions (see `wasm_v128_bitselect` in WASM, it has a bunch of implementations on other architectures).', 'comment_created': datetime.datetime(2021, 6, 21, 3, 42, 21, tzinfo=datetime.timezone.utc), 'commenter': 'nemequ', 'type': 'User'}, {'comment_id': 655055725, 'comment_body': ""You should also be wrapping variables used in the macro in parenthesis.  For a discussion of why this is important, see https://stackoverflow.com/questions/7186504/c-macros-and-use-of-arguments-in-parentheses, but it comes down to the same issue; you're not passing the result of the expression, you're passing the entire expression (which may have side-effects)."", 'comment_created': datetime.datetime(2021, 6, 21, 3, 47, 46, tzinfo=datetime.timezone.utc), 'commenter': 'nemequ', 'type': 'User'}, {'comment_id': 655059623, 'comment_body': 'Thanks, I will fix this and keep that in mind', 'comment_created': datetime.datetime(2021, 6, 21, 4, 3, 30, tzinfo=datetime.timezone.utc), 'commenter': 'simba611', 'type': 'User'}, {'comment_id': 655059781, 'comment_body': 'I agree, that is what I tried originally but ran into that bug with icc we talked about.', 'comment_created': datetime.datetime(2021, 6, 21, 4, 4, 10, tzinfo=datetime.timezone.utc), 'commenter': 'simba611', 'type': 'User'}, {'comment_id': 655065941, 'comment_body': 'That\'s the issue with ICC? I thought the icc bug was the `SIMDE_VECTORIZE_` on the loop.\r\n\r\nThat\'s rather disconcerting, actually.  That should definitely go in an ifdef, then, otherwise someone is likely to come along and ""fix"" it to be just `return (imm8 & 31) ? result : a;`  It sounds like this is going to have to go away anyways because of the macro issue above, though…', 'comment_created': datetime.datetime(2021, 6, 21, 4, 27, 30, tzinfo=datetime.timezone.utc), 'commenter': 'nemequ', 'type': 'User'}]","[{'commit_sha': '4b627dcd0d6333f2a3afdcbf0e14d6d61dbfb800', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd5100d1a52c41851b931dcc8b8d847301a421a3a', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a48df192e5de53d124e4fbf80627906534f279b0', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76d2367af04291c51552fd7312cda83f4c882786', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}]",,59763921,,User,,18,,0,10
677350275,avx512/rolv: complete implementation of function family,"Implements mm{256,512}{_mask(z)}_rolv_epi32/64.
All tests were generated using intel-all-gcc-10.",False,845,https://api.github.com/repos/simd-everywhere/simde/pulls/845,https://github.com/simd-everywhere/simde/pull/845,closed,1837,0,5,3,0,0,0,0,[],2021-06-24 18:41:52+00:00,2021-06-25 17:07:53+00:00,80761.0,22:26:01,[],"[{'commit_sha': '40c254eaf0fc8fc800cbb3e277bdc50f87931691', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e280ab2a49e5d22ca2bd61d7dedd768e58c016c6', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '103a2e07791e67628d4ddb3c8b49570f67cd7bda', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}]",,59763921,,User,,18,,0,10
677783025,avx512/rol: implements complete function family,"Implements mm{256,512}{_mask(z)}_rol_epi32/64.
All tests were generated using intel-all-gcc-10.",False,846,https://api.github.com/repos/simd-everywhere/simde/pulls/846,https://github.com/simd-everywhere/simde/pull/846,closed,2328,0,5,2,0,0,0,0,[],2021-06-25 09:50:01+00:00,2021-06-25 17:07:53+00:00,26272.0,7:17:52,[],"[{'commit_sha': 'c668001e4daa1a115327f38d17f6c5fe1d02c732', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '397d09ea2674c6faab66c3e9ad2b81bcef0afea8', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}]",,59763921,,User,,18,,0,10
673905734,avx512/conflict: implements _mm_conflict_epi32,"Implements mm_conflict_epi32.
All tests were generated using intel-all-gcc-10.",False,839,https://api.github.com/repos/simd-everywhere/simde/pulls/839,https://github.com/simd-everywhere/simde/pull/839,closed,103,0,5,2,1,1,0,0,[],2021-06-19 16:47:13+00:00,2021-06-22 22:28:05+00:00,279652.0,"3 days, 5:40:52","[{'comment_id': 655060085, 'comment_body': ""Be careful with functions like `simde_mm_movepi32_mask` which return or use a predicate type (`__mmask*`); they are usually quite slow outside of AVX-512.\r\n\r\nLuckily this particular function can be emulated pretty well using `_mm_movemask_ps` on x86, and AArch64 isn't *too* bad, so in this case it's okay.  I've just noticed you doing similar things for other functions, too, and there are some pretty big performance cliffs here so I wanted to warn you :)"", 'comment_created': datetime.datetime(2021, 6, 21, 4, 5, 32, tzinfo=datetime.timezone.utc), 'commenter': 'nemequ', 'type': 'User'}]","[{'commit_sha': '05e39d03b880408d6dee2dd54cfe0795d3b58c37', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93bba5d38e91d486a738b128049cc4797afef8f7', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}]",,59763921,,User,,18,,0,10
679004087,avx512/conflict: complete implementation of function family,"Implements mm{256,512}{_mask(z)}_conflict_epi32/64.
All tests were generated using intel-all-gcc-10.",False,849,https://api.github.com/repos/simd-everywhere/simde/pulls/849,https://github.com/simd-everywhere/simde/pull/849,closed,1515,5,2,1,0,0,0,0,[],2021-06-28 12:30:24+00:00,2021-06-28 23:34:14+00:00,39830.0,11:03:50,[],"[{'commit_sha': 'aefc873568492ac9428ce098d61ff5dde2287633', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}]",,59763921,,User,,18,,0,10
676489335,avx512/multishift: initial implementation,"Implements mm_multishift_epi64_epi8.
Tests were generated using intel-all-gcc-10.",False,844,https://api.github.com/repos/simd-everywhere/simde/pulls/844,https://github.com/simd-everywhere/simde/pull/844,closed,107,0,5,2,1,0,0,0,[],2021-06-23 17:37:47+00:00,2021-06-28 23:34:14+00:00,453387.0,"5 days, 5:56:27",[],"[{'commit_sha': 'ffd92bf7601515122af07332f2e0aaceec83eeb8', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '913d5139c5a781ddc5212d94928292e25e8be36c', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}]",,59763921,,User,,18,,0,10
677972178,avx512/multishift: complete implementation of function family,"Implements mm{256, 512}{_mask(z)}_multishift_epi64_epi8.
All tests were generated using intel-all-gcc-10.",False,847,https://api.github.com/repos/simd-everywhere/simde/pulls/847,https://github.com/simd-everywhere/simde/pull/847,closed,1446,0,5,3,0,0,0,0,[],2021-06-25 14:47:55+00:00,2021-06-29 20:50:15+00:00,367340.0,"4 days, 6:02:20",[],"[{'commit_sha': 'ffd92bf7601515122af07332f2e0aaceec83eeb8', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '913d5139c5a781ddc5212d94928292e25e8be36c', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a28ec730fc9d710469a73e1b94b2d9966e5b2d12', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}]",,59763921,,User,,18,,0,10
672730057,avx512/scalef: initial scalef implementation,"Implements mm_scalef_ps, x_mm_flushsubnormal_ps.
Tests were generated using intel-all-gcc-10.
The tests are generated live for the flushsubnormal function. I can switch it to load a (SIMDE_MATH_FLT_MIN / 2.0f) containing vector and test against FLOAT32_C(0.0) in the output of the function.",False,837,https://api.github.com/repos/simd-everywhere/simde/pulls/837,https://github.com/simd-everywhere/simde/pull/837,closed,171,0,8,4,0,2,0,0,[],2021-06-17 15:09:10+00:00,2021-06-22 22:28:05+00:00,458335.0,"5 days, 7:18:55","[{'comment_id': 654796002, 'comment_body': 'I think the trailing semicolon here is what is causing the error on MSVC.', 'comment_created': datetime.datetime(2021, 6, 19, 13, 22, 40, tzinfo=datetime.timezone.utc), 'commenter': 'nemequ', 'type': 'User'}, {'comment_id': 654796344, 'comment_body': 'thanks, fixed it', 'comment_created': datetime.datetime(2021, 6, 19, 13, 26, 28, tzinfo=datetime.timezone.utc), 'commenter': 'simba611', 'type': 'User'}]","[{'commit_sha': 'd96e13b370907a2ef5c77c4994977e73874f6548', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a691ad1fd1155d04c27aae819ec88930ec56caf3', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5b38bffcba99c36dda3e7c360087e30901faef6', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3c3fa60cf0f2d1fa6ef003cb17072d2cf220a51', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}]",,59763921,,User,,18,,0,10
673931073,avx512/scalef: implements mm{256/512}{_mask(z)}_scalef_ps/d,"Implements mm{256/512}{_mask(z)}_scalef_ps/d.
All tests were generated using intel-all-gcc-10.",False,840,https://api.github.com/repos/simd-everywhere/simde/pulls/840,https://github.com/simd-everywhere/simde/pull/840,closed,2231,0,8,6,0,0,0,0,[],2021-06-19 20:38:42+00:00,2021-06-22 22:28:05+00:00,265763.0,"3 days, 1:49:23",[],"[{'commit_sha': 'd96e13b370907a2ef5c77c4994977e73874f6548', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a691ad1fd1155d04c27aae819ec88930ec56caf3', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5b38bffcba99c36dda3e7c360087e30901faef6', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3c3fa60cf0f2d1fa6ef003cb17072d2cf220a51', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12542b99e75697f4fe28962d6f0380756d4d6fd4', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '191ba47003f0db7de49f478a4e9636a76437303d', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}]",,59763921,,User,,18,,0,10
688083460,add scalef_ss/sd functions,"Implements mm{_maks(z)}_scalef_ss/sd functions.
All tests were generated using intel-all-gcc-10.",False,857,https://api.github.com/repos/simd-everywhere/simde/pulls/857,https://github.com/simd-everywhere/simde/pull/857,closed,556,0,2,1,0,0,0,0,[],2021-07-12 18:43:28+00:00,2021-07-13 15:54:26+00:00,76258.0,21:10:58,[],"[{'commit_sha': '023b0bd3cdcfa6a264b0d99f840cf5e9fdc71fd6', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}]",,59763921,,User,,18,,0,10
680290240,avx512/dbsad: initial implementation,"Implements mm_dbsad_epu8.
Tests were generated using intel-all-gcc-10.",False,850,https://api.github.com/repos/simd-everywhere/simde/pulls/850,https://github.com/simd-everywhere/simde/pull/850,closed,185,0,5,6,1,2,0,0,[],2021-06-29 18:59:16+00:00,2021-07-08 23:34:04+00:00,794088.0,"9 days, 4:34:48","[{'comment_id': 660955541, 'comment_body': 'Since you only use it in the preprocessing step, why not just get rid of the imm8 parameter in the function?', 'comment_created': datetime.datetime(2021, 6, 29, 20, 52, 34, tzinfo=datetime.timezone.utc), 'commenter': 'nemequ', 'type': 'User'}, {'comment_id': 661223553, 'comment_body': 'Done, sorry about that.', 'comment_created': datetime.datetime(2021, 6, 30, 7, 59, 34, tzinfo=datetime.timezone.utc), 'commenter': 'simba611', 'type': 'User'}]","[{'commit_sha': '4f5078448594db75bbd3e12a49bcc81a88011fa3', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c49b78e26f2d7b0e3fcca88a42888a23e87daee3', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93db5e7ae52bc434023c904ea3c0434212598cbb', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb5c1c96bf924dd45a80e449555dea78e9e46747', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1daf754bd2895adea97a1ebb79ade7befff3c5e6', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f63723744c5f2d8d2ac0955d850c9bda5f219fe', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}]",,59763921,,User,,18,,0,10
685356453,avx512/dbsad: implement missing functions,"Implements mm{256,512}{_mask(z)}_dbsad_epu8, mm512_shuffle_ps.
All tests were generated using intel-all-gcc-10.",False,853,https://api.github.com/repos/simd-everywhere/simde/pulls/853,https://github.com/simd-everywhere/simde/pull/853,closed,2207,0,7,7,0,0,0,0,[],2021-07-07 16:51:56+00:00,2021-07-08 23:33:52+00:00,110516.0,"1 day, 6:41:56",[],"[{'commit_sha': '4f5078448594db75bbd3e12a49bcc81a88011fa3', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c49b78e26f2d7b0e3fcca88a42888a23e87daee3', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93db5e7ae52bc434023c904ea3c0434212598cbb', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb5c1c96bf924dd45a80e449555dea78e9e46747', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1daf754bd2895adea97a1ebb79ade7befff3c5e6', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f63723744c5f2d8d2ac0955d850c9bda5f219fe', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e918db959f601e8b6466973c8fa184a87127dbec', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}]",,59763921,,User,,18,,0,10
696489401,avx512/dbsad: fix some errors,,False,871,https://api.github.com/repos/simd-everywhere/simde/pulls/871,https://github.com/simd-everywhere/simde/pull/871,closed,220,52,1,2,0,0,0,0,[],2021-07-25 11:54:30+00:00,2021-07-25 23:18:14+00:00,41024.0,11:23:44,[],"[{'commit_sha': '61dff41afada1cdc5e0775c1f1db60e65e3ab858', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae91d15256af6170410e9b03a58860ce97ce1c6e', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}]",,59763921,,User,,18,,0,10
686089466,avx512/popcnt: initial implementation,"Implements mm_popcnt_epi16.
Tests were generated using intel-all-gcc-10.",False,854,https://api.github.com/repos/simd-everywhere/simde/pulls/854,https://github.com/simd-everywhere/simde/pull/854,closed,557,0,7,4,7,2,0,0,[],2021-07-08 14:53:59+00:00,2021-07-16 16:52:38+00:00,698319.0,"8 days, 1:58:39","[{'comment_id': 666350845, 'comment_body': ""I wouldn't even bother going back and adding a patch for this now, but in the future, similarly to your other PR where I suggested lining up the arguments, lining up the assignments is probably a good idea here:\r\n\r\n```c\r\na_.u16 -= ...\r\na_.u16  = ...\r\n```\r\n\r\nUnfortunately the operations don't really line up, not much you can do there."", 'comment_created': datetime.datetime(2021, 7, 8, 16, 33, 18, tzinfo=datetime.timezone.utc), 'commenter': 'nemequ', 'type': 'User'}, {'comment_id': 666352530, 'comment_body': ""The constants actually make a lot more sense in hexadecimal notation; 21845 = 0x5555, 3855 = 0x0f0f, 257 = 0x0101.  If you change them to hex I'm not saying the code will be *easy* to understand, but it should be a little less difficult…"", 'comment_created': datetime.datetime(2021, 7, 8, 16, 35, 44, tzinfo=datetime.timezone.utc), 'commenter': 'nemequ', 'type': 'User'}]","[{'commit_sha': 'bfc3ff405876b736b926595aabf4f1bd13d66464', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e208a7199463a043795e8d3facb29cc9671c707', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '529f1c58ef0a68a3ca1d22134a7342bbdea2767f', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5fb62d5ae5cf11d0451e92a0382ca1600698f0ec', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}]",,59763921,,User,,18,,0,10
691980877,avx512/popcnt: implement remaining functions,"Implements mm{256,512}{_mask(z)}_popcnt_epi8/16/32/64.
Tests were generated using intel-all-gcc-10.",False,863,https://api.github.com/repos/simd-everywhere/simde/pulls/863,https://github.com/simd-everywhere/simde/pull/863,closed,3850,0,2,2,0,1,0,0,[],2021-07-17 19:56:34+00:00,2021-08-03 03:07:02+00:00,1408228.0,"16 days, 7:10:28","[{'comment_id': 676012695, 'comment_body': ""The Arm and WASM cases here aren't necessary; actually, they won't even be hit since `SIMDE_NATURAL_VECTOR_SIZE_LE(128)` will be true in both cases.  Even if you reordered them so they came first, though, it's just doing the exact same thing as the `SIMDE_NATURAL_VECTOR_SIZE_LE(128)`, so we may as well not duplicate the code."", 'comment_created': datetime.datetime(2021, 7, 24, 15, 34, 28, tzinfo=datetime.timezone.utc), 'commenter': 'nemequ', 'type': 'User'}]","[{'commit_sha': '9f9dcb47bfcc0b5fe916e625853b0f027f866a64', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba0effa137cabef05ff4bc6debe678910c8672c3', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}]",,59763921,,User,,18,,0,10
690952243,avx512/dpbusd: implement remaining functions,"Implements _mm{256,512}{_mask(z)}_dpbusd_epi32.
All tests were generated using intel-all-gcc-10.",False,858,https://api.github.com/repos/simd-everywhere/simde/pulls/858,https://github.com/simd-everywhere/simde/pull/858,closed,971,11,2,4,0,2,0,0,[],2021-07-15 18:37:34+00:00,2021-08-02 03:08:53+00:00,1499479.0,"17 days, 8:31:19","[{'comment_id': 670865033, 'comment_body': ""Nice! I like how you've grouped the items here so it's easy to see the pattern."", 'comment_created': datetime.datetime(2021, 7, 15, 23, 22, 12, tzinfo=datetime.timezone.utc), 'commenter': 'nemequ', 'type': 'User'}, {'comment_id': 670868087, 'comment_body': ""This is actually undefined behavior. Contrary to popular belief, type-punning through a union isn't allowed.  Unions allow you to choose which type you access something as, but once you choose a type you have to stick to it.  Since you've written to the object as a vector of unsigned 8-bit integers, you can't read it as an array of `simde__m256i_private`."", 'comment_created': datetime.datetime(2021, 7, 15, 23, 30, 59, tzinfo=datetime.timezone.utc), 'commenter': 'nemequ', 'type': 'User'}]","[{'commit_sha': 'c6329743c3b11bcd6022e2c5d26754d5e1f0166c', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7eeb45a8ccda91d6c8486be26c9443b253a109af', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '116d0759efced24d99ff7900e669dfe15237feaf', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56e13ed8f83b3657d04ff9e07729d8d542231ba9', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}]",,59763921,,User,,18,,0,10
696550130,avx512/dpwssd: initial implementation,"Implements mm_dpwssd_epi32.
Tests were generated using intel-all-gcc-10.",False,873,https://api.github.com/repos/simd-everywhere/simde/pulls/873,https://github.com/simd-everywhere/simde/pull/873,closed,151,0,4,1,0,0,0,0,[],2021-07-25 19:10:10+00:00,2021-08-02 03:08:54+00:00,633524.0,"7 days, 7:58:44",[],"[{'commit_sha': '995c8975c84501649b4b12a1e020deeac2c73618', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}]",,59763921,,User,,18,,0,10
699621612,avx512/dpwssd: implement remaining functions,"Implements mm{256,512}{_mask(z)}_dpwssd_epi32.
All tests were generated using intel-all-gcc-10.",False,882,https://api.github.com/repos/simd-everywhere/simde/pulls/882,https://github.com/simd-everywhere/simde/pull/882,closed,1074,0,4,2,0,0,0,0,[],2021-07-29 15:14:07+00:00,2021-08-02 03:09:45+00:00,302138.0,"3 days, 11:55:38",[],"[{'commit_sha': '995c8975c84501649b4b12a1e020deeac2c73618', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5fb8bc6e6ab479963a9215fbaa79ab9da7856ed8', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}]",,59763921,,User,,18,,0,10
699667166,avx512/4dpwssd: implements complete function family,"Implements mm512{_mask(z)}_4dpwssd_epi32.
All tests were generated using intel-all-gcc-10.",False,883,https://api.github.com/repos/simd-everywhere/simde/pulls/883,https://github.com/simd-everywhere/simde/pull/883,closed,1654,0,8,5,0,0,0,0,[],2021-07-29 16:15:09+00:00,2021-08-02 03:08:54+00:00,298425.0,"3 days, 10:53:45",[],"[{'commit_sha': '995c8975c84501649b4b12a1e020deeac2c73618', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5fb8bc6e6ab479963a9215fbaa79ab9da7856ed8', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc6a74d8e62528007baf099423b6ca611c925146', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd3b5284a07591dafdfdc5c577151064fffb2a2c', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7aadc20efed06fc2a7defe456b80a4f12a2b0d77', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}]",,59763921,,User,,18,,0,10
700352171,avx512/dpbf16: initial implementation,"Implements mm_dpbf16_ps.
Tests were generated using intel-all-gcc-10.",False,885,https://api.github.com/repos/simd-everywhere/simde/pulls/885,https://github.com/simd-everywhere/simde/pull/885,closed,300,0,7,5,0,0,0,0,[],2021-07-30 14:50:04+00:00,2021-08-02 03:08:54+00:00,217130.0,"2 days, 12:18:50",[],"[{'commit_sha': '02f0121535c8067e5ca1ae96a4d7be09ba966408', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c21ed3ff3938572ec0e079ccb98b37bc4d701eae', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '41ca335014cc21b9982153f0bb2d8ccb8fa71a35', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a132cdc276a181251febfee324eef78b137dd31', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c0d85d2525bcb03f3d50b0c6c7de590207c48a30', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}]",,59763921,,User,,18,,0,10
700908100,avx512/dpwssds: initial implementation,"Implements mm_dpwssds_epi32.
Tests were generated using intel-all-gcc-10.",False,886,https://api.github.com/repos/simd-everywhere/simde/pulls/886,https://github.com/simd-everywhere/simde/pull/886,closed,1268,0,4,9,0,0,0,0,[],2021-08-01 13:21:11+00:00,2021-08-03 23:35:14+00:00,209643.0,"2 days, 10:14:03",[],"[{'commit_sha': 'ddb6beac2c95f29f2ba6c748d593469b38b192d1', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '324dc3b0f44defb95c0f9ae930978e9d3f3e4ba5', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '01bf75df7d100d97dffa446c2a56dd37723014db', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '678321693c77557a27f688ec617eec849843bf4f', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ecb8eac41b86aefe2faa469b36b46917a33aea7', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9bc9f6274652c9a16239f93ad11eb42c64c94ec5', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e8f14f293c83bd791489b7f422d5a1c73cca602e', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e05ff4a5d0107cb877c9f57125a4b8ae300870e', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e4a446f10efef013c81b6b74f357e0e6379d182', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}]",,59763921,,User,,18,,0,10
701779776,avx512/dpbf16: implement remaining functions,"Implements mm{256,512}{_mask(z)}_dpbf16_ps.
All tests were generated using intel-all-gcc-10.",False,888,https://api.github.com/repos/simd-everywhere/simde/pulls/888,https://github.com/simd-everywhere/simde/pull/888,closed,1482,1,3,5,0,0,0,0,[],2021-08-02 21:04:35+00:00,2021-08-03 23:35:15+00:00,95440.0,"1 day, 2:30:40",[],"[{'commit_sha': '436b1afa6dfee14b252f96421de49062755b63b4', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4a8f55040f2bab054a11d60f9a0ff095aa813b34', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '729ccf10e55e8c6a73fcc1837ea8fd1753ae57c1', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cbcb3ade2510151e028643884320ee7b0cb23ba9', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3e48f327a144f6b5857d7d5981d95b56c10252b', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}]",,59763921,,User,,18,,0,10
702206876,avx512/4dpwssds: implement complete function family,"Implements mm512{_mask(z)}_4dpwssds_epi32.
Tests were generated using intel-all-gcc-10.",False,892,https://api.github.com/repos/simd-everywhere/simde/pulls/892,https://github.com/simd-everywhere/simde/pull/892,closed,2167,0,8,10,0,0,0,0,[],2021-08-03 11:44:01+00:00,2021-08-03 23:35:15+00:00,42674.0,11:51:14,[],"[{'commit_sha': 'ddb6beac2c95f29f2ba6c748d593469b38b192d1', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '324dc3b0f44defb95c0f9ae930978e9d3f3e4ba5', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '01bf75df7d100d97dffa446c2a56dd37723014db', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '678321693c77557a27f688ec617eec849843bf4f', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ecb8eac41b86aefe2faa469b36b46917a33aea7', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9bc9f6274652c9a16239f93ad11eb42c64c94ec5', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e8f14f293c83bd791489b7f422d5a1c73cca602e', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e05ff4a5d0107cb877c9f57125a4b8ae300870e', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e4a446f10efef013c81b6b74f357e0e6379d182', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69bd851e2cb50ef9a638934ff279680f2bc164d3', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}]",,59763921,,User,,18,,0,10
703164122,avx512/dpbusds: implement complete function family,"Implements mm{256,512}{_mask(z)}_dpbusds_epi32.
All tests were generated using intel-all-gcc-10.",False,893,https://api.github.com/repos/simd-everywhere/simde/pulls/893,https://github.com/simd-everywhere/simde/pull/893,closed,1151,0,5,2,0,0,0,0,[],2021-08-04 09:08:04+00:00,2021-08-10 12:40:11+00:00,531127.0,"6 days, 3:32:07",[],"[{'commit_sha': 'df43fb66c0dd2333c8dfbbcc0e49a3130376147f', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10def1837178dfaebe3caee55a041e0072f3d709', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}]",,59763921,,User,,18,,0,10
690996015,avx512/shldv: initial implementation,"Implements _mm_shldv_epi32.
All tests were generated using intel-all-gcc-10.",False,859,https://api.github.com/repos/simd-everywhere/simde/pulls/859,https://github.com/simd-everywhere/simde/pull/859,closed,256,0,6,1,0,0,0,0,[],2021-07-15 19:55:06+00:00,2021-07-16 16:52:38+00:00,75452.0,20:57:32,[],"[{'commit_sha': '266970f5bdec3f1abf784b514bc4c0207a9b3940', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}]",,59763921,,User,,18,,0,10
699556711,avx512/bitshuffle: implement remaining functions,"Implements mm{256,512}{_mask}_bitshuffle_epi64_mask.
All tests were generated using intel-all-gcc-10.",False,881,https://api.github.com/repos/simd-everywhere/simde/pulls/881,https://github.com/simd-everywhere/simde/pull/881,closed,627,0,4,3,0,0,0,0,[],2021-07-29 13:55:39+00:00,2021-08-02 03:09:45+00:00,306846.0,"3 days, 13:14:06",[],"[{'commit_sha': '0b86bd56bd8136499d0d65f56b29c342ae3f92f5', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '91e3edc8df6f45f40102d8d64234fd7059e3674c', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '369df7af0239fde0e633f439770338f0b0c2489d', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}]",,59763921,,User,,18,,0,10
703450575,avx512/fixupimm: initial implementation,"Implements mm_fixupimm_ps.
Tests were generated using intel-all-gcc-10.",False,894,https://api.github.com/repos/simd-everywhere/simde/pulls/894,https://github.com/simd-everywhere/simde/pull/894,closed,7470,14,7,12,0,2,0,0,[],2021-08-04 13:10:17+00:00,2021-08-13 19:32:02+00:00,800505.0,"9 days, 6:21:45","[{'comment_id': 682680970, 'comment_body': ""I like that you're doing this instead of just using FLT_MAX/DBL_MAX directly, but I think something like this would be cleaner:\r\n\r\n```c\r\n#if !defined(SIMDE_MATH_FLT_MAX)\r\n  #if defined(__FLT_MAX__)\r\n    #define SIMDE_MATH_FLT_MAX __FLT_MAX__\r\n  #else\r\n    #if !defined(FLT_MAX)\r\n      #if defined(__cplusplus)\r\n        #include <cfloat>\r\n      #else\r\n        #include <float.h>\r\n      #endif\r\n    #endif\r\n    #define SIMDE_MATH_FLT_MAX FLT_MAX\r\n  #endif\r\n#endif\r\n```\r\n\r\nIt may be slightly longer, but it keeps the FLT_MAX case together.\r\n\r\nMaybe it's just me, though?  I know some people like to limit nested logic as much as possible…"", 'comment_created': datetime.datetime(2021, 8, 4, 14, 39, 43, tzinfo=datetime.timezone.utc), 'commenter': 'nemequ', 'type': 'User'}, {'comment_id': 682686892, 'comment_body': ""I notice you've gotten into the habit of defining the function conditionally lately, but that's not what we usually do in SIMDe.  We unconditionally define the function, then define a macro to override the function.  This is mostly because you can do things with a function that you can't with a macro; for example, use them reliably in a CONSTIFY macro.\r\n\r\nWhen the function is nonsense without the supporting macro, like it is with some of those functions where you create an internal function, then wrap it with a macro which handles the immediate-mode parameter, you should only define the function conditionally.  In cases like this, though, please define the function unconditionally."", 'comment_created': datetime.datetime(2021, 8, 4, 14, 45, 59, tzinfo=datetime.timezone.utc), 'commenter': 'nemequ', 'type': 'User'}]","[{'commit_sha': 'a9d614aed1ad978d46dec2c76a2abb5d650ccb19', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd5f50bf03f38193f65473a65bdfb47b60974a160', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f74464798b6147af73997ccc08f8824bbf130aee', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e9dac15255505e25eb1342f9699a147adcc1f9c', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'edf2d0330e6f782a1ea633183f771db12116c25c', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a29c67dd4a0008da9fc8a6b36e4483474fef560', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e936cbb01105dc8f861e61631abc5145d74e537', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74fa5f5859d7bbbf36d09cbeb2b1792acdc51cc4', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b26eb30c179215641a96a0d0bd1e034e208a77a', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ec0dae363201f7bdf7c95bd89da63432c37dc95', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c5d180d3a39c771c19d903aaea41713c4f80d1e9', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd886921aee1f3156b35704848cf0a2e6bb1f8c8', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}]",,59763921,,User,,18,,0,10
680632317,avx512: fix macros using avx256,This fixes macros defined with AVX256 instead of AVX512. Also replaces call to `simde_mm_movemask_ps` from `simde_mm_movepi32_mask` to conditional `SIMDE_NATURAL_VECTOR_SIZE_GE(128)` from native SSE.,False,851,https://api.github.com/repos/simd-everywhere/simde/pulls/851,https://github.com/simd-everywhere/simde/pull/851,closed,15,15,3,1,0,0,0,0,[],2021-06-30 08:09:44+00:00,2021-07-02 16:01:21+00:00,201097.0,"2 days, 7:51:37",[],"[{'commit_sha': '2e750440133235cb0ee20bae2ac6066584d741bb', 'committer_username': 'simba611', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 11, 10, 49, 41, tzinfo=datetime.timezone.utc)}]",,59763921,,User,,18,,0,10

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
86497800,simde,simd-everywhere/simde,C,237,2311,52,82,3030,133,14,9,"[{'id': 703450575, 'number': 894, 'closed': datetime.datetime(2021, 8, 13, 19, 32, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 4, 13, 10, 17, tzinfo=datetime.timezone.utc), 'time_taken': 800505.0, 'time_delta': '9 days, 6:21:45', 'additions': 7470, 'deletions': 14, 'state': 'closed'}, {'id': 703164122, 'number': 893, 'closed': datetime.datetime(2021, 8, 10, 12, 40, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 4, 9, 8, 4, tzinfo=datetime.timezone.utc), 'time_taken': 531127.0, 'time_delta': '6 days, 3:32:07', 'additions': 1151, 'deletions': 0, 'state': 'closed'}, {'id': 702206876, 'number': 892, 'closed': datetime.datetime(2021, 8, 3, 23, 35, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 3, 11, 44, 1, tzinfo=datetime.timezone.utc), 'time_taken': 42674.0, 'time_delta': '11:51:14', 'additions': 2167, 'deletions': 0, 'state': 'closed'}, {'id': 702117932, 'number': 891, 'closed': datetime.datetime(2021, 8, 3, 23, 35, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 3, 9, 34, 57, tzinfo=datetime.timezone.utc), 'time_taken': 50416.0, 'time_delta': '14:00:16', 'additions': 21, 'deletions': 21, 'state': 'closed'}, {'id': 701779776, 'number': 888, 'closed': datetime.datetime(2021, 8, 3, 23, 35, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 2, 21, 4, 35, tzinfo=datetime.timezone.utc), 'time_taken': 95440.0, 'time_delta': '1 day, 2:30:40', 'additions': 1482, 'deletions': 1, 'state': 'closed'}, {'id': 700908100, 'number': 886, 'closed': datetime.datetime(2021, 8, 3, 23, 35, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 1, 13, 21, 11, tzinfo=datetime.timezone.utc), 'time_taken': 209643.0, 'time_delta': '2 days, 10:14:03', 'additions': 1268, 'deletions': 0, 'state': 'closed'}, {'id': 700352171, 'number': 885, 'closed': datetime.datetime(2021, 8, 2, 3, 8, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 30, 14, 50, 4, tzinfo=datetime.timezone.utc), 'time_taken': 217130.0, 'time_delta': '2 days, 12:18:50', 'additions': 300, 'deletions': 0, 'state': 'closed'}, {'id': 699667166, 'number': 883, 'closed': datetime.datetime(2021, 8, 2, 3, 8, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 29, 16, 15, 9, tzinfo=datetime.timezone.utc), 'time_taken': 298425.0, 'time_delta': '3 days, 10:53:45', 'additions': 1654, 'deletions': 0, 'state': 'closed'}, {'id': 699621612, 'number': 882, 'closed': datetime.datetime(2021, 8, 2, 3, 9, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 29, 15, 14, 7, tzinfo=datetime.timezone.utc), 'time_taken': 302138.0, 'time_delta': '3 days, 11:55:38', 'additions': 1074, 'deletions': 0, 'state': 'closed'}, {'id': 699556711, 'number': 881, 'closed': datetime.datetime(2021, 8, 2, 3, 9, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 29, 13, 55, 39, tzinfo=datetime.timezone.utc), 'time_taken': 306846.0, 'time_delta': '3 days, 13:14:06', 'additions': 627, 'deletions': 0, 'state': 'closed'}, {'id': 696550130, 'number': 873, 'closed': datetime.datetime(2021, 8, 2, 3, 8, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 25, 19, 10, 10, tzinfo=datetime.timezone.utc), 'time_taken': 633524.0, 'time_delta': '7 days, 7:58:44', 'additions': 151, 'deletions': 0, 'state': 'closed'}, {'id': 696527835, 'number': 872, 'closed': datetime.datetime(2021, 7, 25, 23, 18, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 25, 16, 20, 36, tzinfo=datetime.timezone.utc), 'time_taken': 25058.0, 'time_delta': '6:57:38', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 696489401, 'number': 871, 'closed': datetime.datetime(2021, 7, 25, 23, 18, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 25, 11, 54, 30, tzinfo=datetime.timezone.utc), 'time_taken': 41024.0, 'time_delta': '11:23:44', 'additions': 220, 'deletions': 52, 'state': 'closed'}, {'id': 693460020, 'number': 864, 'closed': datetime.datetime(2021, 8, 2, 3, 8, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 20, 13, 18, 40, tzinfo=datetime.timezone.utc), 'time_taken': 1086614.0, 'time_delta': '12 days, 13:50:14', 'additions': 122, 'deletions': 0, 'state': 'closed'}, {'id': 691980877, 'number': 863, 'closed': datetime.datetime(2021, 8, 3, 3, 7, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 17, 19, 56, 34, tzinfo=datetime.timezone.utc), 'time_taken': 1408228.0, 'time_delta': '16 days, 7:10:28', 'additions': 3850, 'deletions': 0, 'state': 'closed'}, {'id': 690996015, 'number': 859, 'closed': datetime.datetime(2021, 7, 16, 16, 52, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 15, 19, 55, 6, tzinfo=datetime.timezone.utc), 'time_taken': 75452.0, 'time_delta': '20:57:32', 'additions': 256, 'deletions': 0, 'state': 'closed'}, {'id': 690952243, 'number': 858, 'closed': datetime.datetime(2021, 8, 2, 3, 8, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 15, 18, 37, 34, tzinfo=datetime.timezone.utc), 'time_taken': 1499479.0, 'time_delta': '17 days, 8:31:19', 'additions': 971, 'deletions': 11, 'state': 'closed'}, {'id': 688083460, 'number': 857, 'closed': datetime.datetime(2021, 7, 13, 15, 54, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 12, 18, 43, 28, tzinfo=datetime.timezone.utc), 'time_taken': 76258.0, 'time_delta': '21:10:58', 'additions': 556, 'deletions': 0, 'state': 'closed'}, {'id': 686089466, 'number': 854, 'closed': datetime.datetime(2021, 7, 16, 16, 52, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 8, 14, 53, 59, tzinfo=datetime.timezone.utc), 'time_taken': 698319.0, 'time_delta': '8 days, 1:58:39', 'additions': 557, 'deletions': 0, 'state': 'closed'}, {'id': 685356453, 'number': 853, 'closed': datetime.datetime(2021, 7, 8, 23, 33, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 7, 16, 51, 56, tzinfo=datetime.timezone.utc), 'time_taken': 110516.0, 'time_delta': '1 day, 6:41:56', 'additions': 2207, 'deletions': 0, 'state': 'closed'}, {'id': 682129668, 'number': 852, 'closed': datetime.datetime(2021, 7, 8, 23, 34, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 1, 20, 0, 45, tzinfo=datetime.timezone.utc), 'time_taken': 617599.0, 'time_delta': '7 days, 3:33:19', 'additions': 148, 'deletions': 0, 'state': 'closed'}, {'id': 680632317, 'number': 851, 'closed': datetime.datetime(2021, 7, 2, 16, 1, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 30, 8, 9, 44, tzinfo=datetime.timezone.utc), 'time_taken': 201097.0, 'time_delta': '2 days, 7:51:37', 'additions': 15, 'deletions': 15, 'state': 'closed'}, {'id': 680290240, 'number': 850, 'closed': datetime.datetime(2021, 7, 8, 23, 34, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 29, 18, 59, 16, tzinfo=datetime.timezone.utc), 'time_taken': 794088.0, 'time_delta': '9 days, 4:34:48', 'additions': 185, 'deletions': 0, 'state': 'closed'}, {'id': 679004087, 'number': 849, 'closed': datetime.datetime(2021, 6, 28, 23, 34, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 28, 12, 30, 24, tzinfo=datetime.timezone.utc), 'time_taken': 39830.0, 'time_delta': '11:03:50', 'additions': 1515, 'deletions': 5, 'state': 'closed'}, {'id': 677972178, 'number': 847, 'closed': datetime.datetime(2021, 6, 29, 20, 50, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 25, 14, 47, 55, tzinfo=datetime.timezone.utc), 'time_taken': 367340.0, 'time_delta': '4 days, 6:02:20', 'additions': 1446, 'deletions': 0, 'state': 'closed'}, {'id': 677783025, 'number': 846, 'closed': datetime.datetime(2021, 6, 25, 17, 7, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 25, 9, 50, 1, tzinfo=datetime.timezone.utc), 'time_taken': 26272.0, 'time_delta': '7:17:52', 'additions': 2328, 'deletions': 0, 'state': 'closed'}, {'id': 677350275, 'number': 845, 'closed': datetime.datetime(2021, 6, 25, 17, 7, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 24, 18, 41, 52, tzinfo=datetime.timezone.utc), 'time_taken': 80761.0, 'time_delta': '22:26:01', 'additions': 1837, 'deletions': 0, 'state': 'closed'}, {'id': 676489335, 'number': 844, 'closed': datetime.datetime(2021, 6, 28, 23, 34, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 23, 17, 37, 47, tzinfo=datetime.timezone.utc), 'time_taken': 453387.0, 'time_delta': '5 days, 5:56:27', 'additions': 107, 'deletions': 0, 'state': 'closed'}, {'id': 675499514, 'number': 842, 'closed': datetime.datetime(2021, 7, 14, 17, 6, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 22, 14, 55, 2, tzinfo=datetime.timezone.utc), 'time_taken': 1908706.0, 'time_delta': '22 days, 2:11:46', 'additions': 10208, 'deletions': 22, 'state': 'closed'}, {'id': 673931073, 'number': 840, 'closed': datetime.datetime(2021, 6, 22, 22, 28, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 19, 20, 38, 42, tzinfo=datetime.timezone.utc), 'time_taken': 265763.0, 'time_delta': '3 days, 1:49:23', 'additions': 2231, 'deletions': 0, 'state': 'closed'}, {'id': 673905734, 'number': 839, 'closed': datetime.datetime(2021, 6, 22, 22, 28, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 19, 16, 47, 13, tzinfo=datetime.timezone.utc), 'time_taken': 279652.0, 'time_delta': '3 days, 5:40:52', 'additions': 103, 'deletions': 0, 'state': 'closed'}, {'id': 672957609, 'number': 838, 'closed': datetime.datetime(2021, 6, 25, 14, 2, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 17, 20, 19, 22, tzinfo=datetime.timezone.utc), 'time_taken': 668615.0, 'time_delta': '7 days, 17:43:35', 'additions': 2328, 'deletions': 0, 'state': 'closed'}, {'id': 672730057, 'number': 837, 'closed': datetime.datetime(2021, 6, 22, 22, 28, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 17, 15, 9, 10, tzinfo=datetime.timezone.utc), 'time_taken': 458335.0, 'time_delta': '5 days, 7:18:55', 'additions': 171, 'deletions': 0, 'state': 'closed'}, {'id': 670523934, 'number': 836, 'closed': datetime.datetime(2021, 6, 21, 2, 54, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 15, 15, 40, 46, tzinfo=datetime.timezone.utc), 'time_taken': 472400.0, 'time_delta': '5 days, 11:13:20', 'additions': 1942, 'deletions': 0, 'state': 'closed'}, {'id': 669774433, 'number': 835, 'closed': datetime.datetime(2021, 6, 15, 3, 0, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 14, 18, 12, 32, tzinfo=datetime.timezone.utc), 'time_taken': 31660.0, 'time_delta': '8:47:40', 'additions': 109, 'deletions': 0, 'state': 'closed'}, {'id': 661757975, 'number': 822, 'closed': datetime.datetime(2021, 6, 25, 14, 2, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 4, 13, 12, 48, tzinfo=datetime.timezone.utc), 'time_taken': 1817409.0, 'time_delta': '21 days, 0:50:09', 'additions': 7046, 'deletions': 22, 'state': 'closed'}, {'id': 660036594, 'number': 816, 'closed': datetime.datetime(2021, 6, 2, 22, 59, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 2, 12, 48, 59, tzinfo=datetime.timezone.utc), 'time_taken': 36623.0, 'time_delta': '10:10:23', 'additions': 9243, 'deletions': 4283, 'state': 'closed'}, {'id': 657793795, 'number': 807, 'closed': datetime.datetime(2021, 5, 31, 17, 53, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 30, 20, 4, 25, tzinfo=datetime.timezone.utc), 'time_taken': 78525.0, 'time_delta': '21:48:45', 'additions': 3502, 'deletions': 0, 'state': 'closed'}, {'id': 657465343, 'number': 806, 'closed': datetime.datetime(2021, 5, 29, 16, 25, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 29, 13, 5, 58, tzinfo=datetime.timezone.utc), 'time_taken': 11962.0, 'time_delta': '3:19:22', 'additions': 335, 'deletions': 283, 'state': 'closed'}, {'id': 656481960, 'number': 805, 'closed': datetime.datetime(2021, 5, 28, 23, 26, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 28, 13, 22, 35, tzinfo=datetime.timezone.utc), 'time_taken': 36227.0, 'time_delta': '10:03:47', 'additions': 5081, 'deletions': 242, 'state': 'closed'}, {'id': 649864990, 'number': 788, 'closed': datetime.datetime(2021, 5, 25, 11, 32, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 21, 10, 49, 13, tzinfo=datetime.timezone.utc), 'time_taken': 348217.0, 'time_delta': '4 days, 0:43:37', 'additions': 1360, 'deletions': 0, 'state': 'closed'}, {'id': 649381437, 'number': 786, 'closed': datetime.datetime(2021, 5, 25, 11, 32, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 20, 19, 53, 24, tzinfo=datetime.timezone.utc), 'time_taken': 401965.0, 'time_delta': '4 days, 15:39:25', 'additions': 488, 'deletions': 0, 'state': 'closed'}, {'id': 647073384, 'number': 781, 'closed': datetime.datetime(2021, 5, 20, 2, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 18, 20, 31, 35, tzinfo=datetime.timezone.utc), 'time_taken': 109585.0, 'time_delta': '1 day, 6:26:25', 'additions': 2261, 'deletions': 15, 'state': 'closed'}, {'id': 643499591, 'number': 772, 'closed': datetime.datetime(2021, 5, 15, 20, 26, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 12, 21, 0, 7, tzinfo=datetime.timezone.utc), 'time_taken': 257185.0, 'time_delta': '2 days, 23:26:25', 'additions': 72, 'deletions': 24, 'state': 'closed'}, {'id': 643496470, 'number': 771, 'closed': datetime.datetime(2021, 5, 14, 2, 2, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 12, 20, 54, 34, tzinfo=datetime.timezone.utc), 'time_taken': 104862.0, 'time_delta': '1 day, 5:07:42', 'additions': 5980, 'deletions': 134, 'state': 'closed'}, {'id': 640612688, 'number': 770, 'closed': datetime.datetime(2021, 5, 20, 17, 4, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 11, 14, 0, 22, tzinfo=datetime.timezone.utc), 'time_taken': 788649.0, 'time_delta': '9 days, 3:04:09', 'additions': 1906, 'deletions': 1, 'state': 'closed'}, {'id': 640105546, 'number': 769, 'closed': datetime.datetime(2021, 5, 13, 18, 26, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 11, 10, 43, 16, tzinfo=datetime.timezone.utc), 'time_taken': 200619.0, 'time_delta': '2 days, 7:43:39', 'additions': 4789, 'deletions': 76, 'state': 'closed'}, {'id': 634723140, 'number': 767, 'closed': datetime.datetime(2021, 5, 13, 18, 26, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 8, 17, 55, 48, tzinfo=datetime.timezone.utc), 'time_taken': 433867.0, 'time_delta': '5 days, 0:31:07', 'additions': 2014, 'deletions': 14, 'state': 'closed'}, {'id': 632906468, 'number': 763, 'closed': datetime.datetime(2021, 5, 8, 3, 13, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 7, 15, 0, 27, tzinfo=datetime.timezone.utc), 'time_taken': 44004.0, 'time_delta': '12:13:24', 'additions': 523, 'deletions': 3, 'state': 'closed'}, {'id': 611521808, 'number': 747, 'closed': datetime.datetime(2021, 4, 10, 17, 1, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 8, 12, 39, 56, tzinfo=datetime.timezone.utc), 'time_taken': 188471.0, 'time_delta': '2 days, 4:21:11', 'additions': 1965, 'deletions': 3, 'state': 'closed'}, {'id': 602216739, 'number': 742, 'closed': datetime.datetime(2021, 4, 2, 18, 13, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 28, 10, 4, 1, tzinfo=datetime.timezone.utc), 'time_taken': 461381.0, 'time_delta': '5 days, 8:09:41', 'additions': 500, 'deletions': 0, 'state': 'closed'}, {'id': 600889998, 'number': 738, 'closed': datetime.datetime(2021, 3, 26, 22, 50, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 25, 16, 34, 38, tzinfo=datetime.timezone.utc), 'time_taken': 108950.0, 'time_delta': '1 day, 6:15:50', 'additions': 124, 'deletions': 0, 'state': 'closed'}, {'id': 600066773, 'number': 736, 'closed': datetime.datetime(2021, 3, 26, 22, 50, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 24, 21, 1, 20, tzinfo=datetime.timezone.utc), 'time_taken': 179348.0, 'time_delta': '2 days, 1:49:08', 'additions': 1236, 'deletions': 0, 'state': 'closed'}, {'id': 599574270, 'number': 735, 'closed': datetime.datetime(2021, 3, 24, 13, 31, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 24, 10, 36, 54, tzinfo=datetime.timezone.utc), 'time_taken': 10469.0, 'time_delta': '2:54:29', 'additions': 713, 'deletions': 0, 'state': 'closed'}, {'id': 598714508, 'number': 732, 'closed': datetime.datetime(2021, 3, 23, 18, 45, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 23, 10, 1, 39, tzinfo=datetime.timezone.utc), 'time_taken': 31426.0, 'time_delta': '8:43:46', 'additions': 850, 'deletions': 0, 'state': 'closed'}, {'id': 597531626, 'number': 731, 'closed': datetime.datetime(2021, 3, 21, 23, 38, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 21, 17, 51, 39, tzinfo=datetime.timezone.utc), 'time_taken': 20838.0, 'time_delta': '5:47:18', 'additions': 1150, 'deletions': 1, 'state': 'closed'}, {'id': 597226153, 'number': 730, 'closed': datetime.datetime(2021, 3, 20, 18, 10, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 20, 6, 16, 17, tzinfo=datetime.timezone.utc), 'time_taken': 42855.0, 'time_delta': '11:54:15', 'additions': 182, 'deletions': 3, 'state': 'closed'}]"
