pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
988417207,Tap 14 draft pr,"• Commits `fc5bd5c` to `88c140a` are based around setting up a sample metadata structure inside the `repository` folder (which is inside `repository_data`) for testing

• `774a039` is for reverting `repository` back to its original state and `8845ebd` stores the metadata inside a new `TAP 14` folder

• `df46e38` and `0f50945` add test functions that check inside the TAP 14 folder

• Currently working on implementing changes to the client update process inside the `updater.py` file",False,2049,https://api.github.com/repos/theupdateframework/python-tuf/pulls/2049,https://github.com/theupdateframework/python-tuf/pull/2049,closed,1264,4,27,14,8,74,0,0,[],2022-07-06 08:04:49+00:00,2022-11-17 14:11:24+00:00,11599595.0,"134 days, 6:06:35","[{'comment_id': 915705371, 'comment_body': ""Please keep in mind that you can't just replace the value of any of the fields in the `signed` dictionary without re-signing the files again or the files will fail verification."", 'comment_created': datetime.datetime(2022, 7, 7, 10, 14, 13, tzinfo=datetime.timezone.utc), 'commenter': 'MVrachev', 'type': 'User'}, {'comment_id': 915821273, 'comment_body': 'This I believe was made as a temporary change rather and the original state of `repository_data/repository` was brought back again in `774a039`. \r\n\r\nThat being said, all of the metadata was copied over inside the `repository_data/TAP 14/1.0.0` & `repository_data/TAP 14/2.0.0` folders and metadata inside the `2.0.0` had the `""spec_version""` changed to `2.0.0` in a similar manner (just to show that this was metadata belonging to 2.0.0).\r\nThat seems like something I\'ll have to take a look at, thanks.', 'comment_created': datetime.datetime(2022, 7, 7, 12, 36, 39, tzinfo=datetime.timezone.utc), 'commenter': 'abs007', 'type': 'User'}, {'comment_id': 957793871, 'comment_body': 'Make this private: `self._spec_version`', 'comment_created': datetime.datetime(2022, 8, 29, 21, 3, 37, tzinfo=datetime.timezone.utc), 'commenter': 'znewman01', 'type': 'User'}, {'comment_id': 957797797, 'comment_body': 'probably want `self.config.supported_versions_max_length` in place of `""length placeholder""`. Need to add a line to `tuf/ngclient/config.py` as well.', 'comment_created': datetime.datetime(2022, 8, 29, 21, 9, 15, tzinfo=datetime.timezone.utc), 'commenter': 'znewman01', 'type': 'User'}, {'comment_id': 957798292, 'comment_body': ""I think you should just return `repository_versions`. We don't need to put it inside a JSON dictionary"", 'comment_created': datetime.datetime(2022, 8, 29, 21, 9, 59, tzinfo=datetime.timezone.utc), 'commenter': 'znewman01', 'type': 'User'}, {'comment_id': 957800264, 'comment_body': 'Oh, we need to return the actual spec version too!\r\n\r\nMaybe make the return type `Tuple[Optional[str], Optional[str]]`.', 'comment_created': datetime.datetime(2022, 8, 29, 21, 12, 51, tzinfo=datetime.timezone.utc), 'commenter': 'znewman01', 'type': 'User'}, {'comment_id': 957800975, 'comment_body': 'Make sure to mention the return type, which is a little funky. When does it return the message?', 'comment_created': datetime.datetime(2022, 8, 29, 21, 13, 48, tzinfo=datetime.timezone.utc), 'commenter': 'znewman01', 'type': 'User'}, {'comment_id': 957802263, 'comment_body': 'This may throw an exception; please note in the docstring\r\n\r\n```\r\nRaises:\r\n   ValueError: supported_versions, repository_version or spec_version contains an invalid entry (not parseable as ``int()``)\r\n```', 'comment_created': datetime.datetime(2022, 8, 29, 21, 15, 36, tzinfo=datetime.timezone.utc), 'commenter': 'znewman01', 'type': 'User'}, {'comment_id': 957803176, 'comment_body': 'Rename to `latest_repo_version` for consistency', 'comment_created': datetime.datetime(2022, 8, 29, 21, 16, 47, tzinfo=datetime.timezone.utc), 'commenter': 'znewman01', 'type': 'User'}, {'comment_id': 957803968, 'comment_body': 'Note this in the docstring.\r\n\r\nAlso, should be a `RepositoryError`', 'comment_created': datetime.datetime(2022, 8, 29, 21, 17, 53, tzinfo=datetime.timezone.utc), 'commenter': 'znewman01', 'type': 'User'}, {'comment_id': 957804778, 'comment_body': 'Please include the version information:\r\n\r\n```python\r\nf""The latest repository version ({latest_repo_version}) is lower than the last used spec version ({spec_version}).""', 'comment_created': datetime.datetime(2022, 8, 29, 21, 19, 2, tzinfo=datetime.timezone.utc), 'commenter': 'znewman01', 'type': 'User'}, {'comment_id': 957806184, 'comment_body': 'Is this a typo? I can\'t find it in https://github.com/theupdateframework/taps/blob/840bbdaef85198e4b80e567b40b92fa592701bec/tap14.md and the phrase ""latest version on the client"" is confusing.', 'comment_created': datetime.datetime(2022, 8, 29, 21, 21, 17, tzinfo=datetime.timezone.utc), 'commenter': 'znewman01', 'type': 'User'}, {'comment_id': 957808265, 'comment_body': 'Don\'t use a multiline string; instead, use multiple one-line strings:\r\n\r\n```python\r\nraise exceptions.RepositoryError(\r\n   f""No matching specification version found. Found {repository_versions} in ""\r\n   f""repository and {supported_versions} in client.""\r\n)\r\n```\r\nPython will automatically combine them.', 'comment_created': datetime.datetime(2022, 8, 29, 21, 24, 25, tzinfo=datetime.timezone.utc), 'commenter': 'znewman01', 'type': 'User'}, {'comment_id': 957808348, 'comment_body': 'Should be `RepositoryError`.', 'comment_created': datetime.datetime(2022, 8, 29, 21, 24, 33, tzinfo=datetime.timezone.utc), 'commenter': 'znewman01', 'type': 'User'}, {'comment_id': 957808577, 'comment_body': 'This comment should go above the previous couple lines of code.', 'comment_created': datetime.datetime(2022, 8, 29, 21, 24, 54, tzinfo=datetime.timezone.utc), 'commenter': 'znewman01', 'type': 'User'}, {'comment_id': 957810268, 'comment_body': 'Ahh, we decided to combine them, right.\r\n\r\nI think you should copy all three relevant bullets:\r\n\r\n> - If the latest version on the repository is equal to that of the client, it will use this directory to download metadata.\r\n> - If the latest version pre-dates the client specification version, it may ...[use] a previous client version to download the metadata.\r\n> If the latest version on the repository is higher than the client spec version, the client should ...perform the update with the directory that corresponds with the latest client specification version, if available. If no such directory exists, the client terminates the update.\r\n', 'comment_created': datetime.datetime(2022, 8, 29, 21, 27, 31, tzinfo=datetime.timezone.utc), 'commenter': 'znewman01', 'type': 'User'}, {'comment_id': 957810898, 'comment_body': 'I think this is dead code now and can be deleted.', 'comment_created': datetime.datetime(2022, 8, 29, 21, 28, 28, tzinfo=datetime.timezone.utc), 'commenter': 'znewman01', 'type': 'User'}, {'comment_id': 957811154, 'comment_body': ""You shouldn't need to do this. We may want to update the test data instead."", 'comment_created': datetime.datetime(2022, 8, 29, 21, 28, 57, tzinfo=datetime.timezone.utc), 'commenter': 'znewman01', 'type': 'User'}, {'comment_id': 957814818, 'comment_body': 'Use [tuple unpacking](https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences):\r\n\r\n```python\r\nspec_version, message =  _get_spec_version(...)\r\n```', 'comment_created': datetime.datetime(2022, 8, 29, 21, 34, 47, tzinfo=datetime.timezone.utc), 'commenter': 'znewman01', 'type': 'User'}, {'comment_id': 957815893, 'comment_body': 'You use this with an implicit slash in `download_metadata` below, so make sure to add it. Also, if `spec_version` is `None`, we should put an empty string so that the URL formatting works.\r\n\r\n```python\r\nself.spec_version = f""{spec_version}/"" or """"\r\n```', 'comment_created': datetime.datetime(2022, 8, 29, 21, 36, 33, tzinfo=datetime.timezone.utc), 'commenter': 'znewman01', 'type': 'User'}, {'comment_id': 957816914, 'comment_body': 'Call this `test_get_spec_version_supported` or something. And put the comment below in a docstring.', 'comment_created': datetime.datetime(2022, 8, 29, 21, 38, 15, tzinfo=datetime.timezone.utc), 'commenter': 'znewman01', 'type': 'User'}, {'comment_id': 957818504, 'comment_body': '`assertRaises` takes an optional second argument: a message. This is really nice way to tell readers of your test code what you\'re checking:\r\n\r\n`self.assertRaises(exceptions.DownloadError, ""4 is not a supported version"")`.\r\n\r\nGo through and do that for every `assertRaises` or `assertEqual` call', 'comment_created': datetime.datetime(2022, 8, 29, 21, 40, 54, tzinfo=datetime.timezone.utc), 'commenter': 'znewman01', 'type': 'User'}, {'comment_id': 957818926, 'comment_body': 'This should actually be `SUPPORTED_VERSIONS = [SPECIFICATION_VERSION]` for now.', 'comment_created': datetime.datetime(2022, 8, 29, 21, 41, 37, tzinfo=datetime.timezone.utc), 'commenter': 'znewman01', 'type': 'User'}, {'comment_id': 957819391, 'comment_body': 'Call this just `test_get_spec_version`', 'comment_created': datetime.datetime(2022, 8, 29, 21, 42, 21, tzinfo=datetime.timezone.utc), 'commenter': 'znewman01', 'type': 'User'}, {'comment_id': 957822333, 'comment_body': 'When you have this many test cases, I recommend putting them in a list:\r\n\r\n```python\r\ntest_cases = [\r\n    ([""1"", ""2"", ""3""], ""3"", [""3"", ""5"", ""6""],  ""3"", False),\r\n    ([""3"", ""5"", ""6""], ""3"", [""1"", ""2"", ""3"", ""4""], ""3"", True),\r\n]\r\nfor repo_versions, spec_version, supported_versions, expected_version, should_have_warning in test_cases:\r\n    actual_version, warning = _get_spec_version(...)\r\n    self.assertEqual(actual_version, expected_version)\r\n    self.assertEqual(bool(warning), should_have_warning)\r\n# Do something similar for error_test_cases\r\n```', 'comment_created': datetime.datetime(2022, 8, 29, 21, 47, 19, tzinfo=datetime.timezone.utc), 'commenter': 'znewman01', 'type': 'User'}, {'comment_id': 957822478, 'comment_body': 'Then you can have a comment for each test case explaining why you have it.', 'comment_created': datetime.datetime(2022, 8, 29, 21, 47, 33, tzinfo=datetime.timezone.utc), 'commenter': 'znewman01', 'type': 'User'}, {'comment_id': 957969671, 'comment_body': ""But I'm guessing that it'll have to change and be read from the disk?"", 'comment_created': datetime.datetime(2022, 8, 30, 3, 27, 13, tzinfo=datetime.timezone.utc), 'commenter': 'abs007', 'type': 'User'}, {'comment_id': 958429470, 'comment_body': 'No—`SUPPORTED_VERSIONS` is a property of the *client library* (that is, `python-tuf`).\r\n\r\nThe ""last used specification version"" is what we write to/read from disk.', 'comment_created': datetime.datetime(2022, 8, 30, 12, 41, 35, tzinfo=datetime.timezone.utc), 'commenter': 'znewman01', 'type': 'User'}, {'comment_id': 958673935, 'comment_body': 'If this fails, we probably want to return `[""1""]`', 'comment_created': datetime.datetime(2022, 8, 30, 16, 5, 53, tzinfo=datetime.timezone.utc), 'commenter': 'znewman01', 'type': 'User'}, {'comment_id': 958682674, 'comment_body': 'Or `[""""]`', 'comment_created': datetime.datetime(2022, 8, 30, 16, 14, 30, tzinfo=datetime.timezone.utc), 'commenter': 'znewman01', 'type': 'User'}, {'comment_id': 959653651, 'comment_body': 'Got it.', 'comment_created': datetime.datetime(2022, 8, 31, 14, 24, 27, tzinfo=datetime.timezone.utc), 'commenter': 'abs007', 'type': 'User'}, {'comment_id': 959749495, 'comment_body': 'Could you reiterate on what you mean by ""updating the test data""? Do you mean updating the data in `tests/repository_data/` ?\r\nAlso one more reason to not use this would be because major versions are being referenced with the digit only, eg: 1.0.0 is being referenced as 1.', 'comment_created': datetime.datetime(2022, 8, 31, 15, 46, 47, tzinfo=datetime.timezone.utc), 'commenter': 'abs007', 'type': 'User'}, {'comment_id': 960502488, 'comment_body': 'Wouldn\'t this set `self.spec_version` to `None/` in case `spec_version` turns out to be `None`?\r\nI\'m guessing, a better alternative would be :\r\n```py\r\nself.spec_version = f""{spec_version}/"" if spec_version is not None else """"\r\n```', 'comment_created': datetime.datetime(2022, 9, 1, 10, 53, 19, tzinfo=datetime.timezone.utc), 'commenter': 'abs007', 'type': 'User'}, {'comment_id': 960517229, 'comment_body': ""Good catch! That's totally right"", 'comment_created': datetime.datetime(2022, 9, 1, 11, 6, 53, tzinfo=datetime.timezone.utc), 'commenter': 'znewman01', 'type': 'User'}, {'comment_id': 960529740, 'comment_body': 'Also, should I use `download_bytes()` instead because afai can see, `download_bytes()` just uses `download_file()` inside of `fetcher.py`', 'comment_created': datetime.datetime(2022, 9, 1, 11, 20, 39, tzinfo=datetime.timezone.utc), 'commenter': 'abs007', 'type': 'User'}, {'comment_id': 960530714, 'comment_body': 'Considering my comment above, should `supported_versions_max_length` have the length in bytes equivalent?', 'comment_created': datetime.datetime(2022, 9, 1, 11, 21, 43, tzinfo=datetime.timezone.utc), 'commenter': 'abs007', 'type': 'User'}, {'comment_id': 960532827, 'comment_body': 'Oh, good call—do that!', 'comment_created': datetime.datetime(2022, 9, 1, 11, 24, 10, tzinfo=datetime.timezone.utc), 'commenter': 'znewman01', 'type': 'User'}, {'comment_id': 960533141, 'comment_body': ""Yes, it should use 'bytes' as the unit"", 'comment_created': datetime.datetime(2022, 9, 1, 11, 24, 33, tzinfo=datetime.timezone.utc), 'commenter': 'znewman01', 'type': 'User'}, {'comment_id': 960574295, 'comment_body': 'From what I can understand, `supported-versions.json` is a JSON dictionary itself : \r\n```\r\n{ ""supported_versions"" : [VERSION, ...],  //From the TAP14 page\r\n```\r\nSo, If I return `repository_versions` instead then won\'t that return the dictionary itself? What I was trying to do was index the `[VERSION, ...]` list using the `supported_versions` key.', 'comment_created': datetime.datetime(2022, 9, 1, 12, 8, 51, tzinfo=datetime.timezone.utc), 'commenter': 'abs007', 'type': 'User'}, {'comment_id': 960579249, 'comment_body': 'How about `Tuple[[str], Optional[str]]` ? `spec_version` is supposed to be either `""""` or `[versions, ...]` whereas `warning` can be `None`.', 'comment_created': datetime.datetime(2022, 9, 1, 12, 14, 22, tzinfo=datetime.timezone.utc), 'commenter': 'abs007', 'type': 'User'}, {'comment_id': 960581725, 'comment_body': 'How about? \r\n```\r\nReturns the specification version to be used and displays a warning if chosen spec_version\r\nis lower than the highest repository version.\r\n```', 'comment_created': datetime.datetime(2022, 9, 1, 12, 17, 1, tzinfo=datetime.timezone.utc), 'commenter': 'abs007', 'type': 'User'}, {'comment_id': 960589486, 'comment_body': ""Oh, you're right! I misremembered the proposed update to the specification."", 'comment_created': datetime.datetime(2022, 9, 1, 12, 25, 16, tzinfo=datetime.timezone.utc), 'commenter': 'znewman01', 'type': 'User'}, {'comment_id': 960591280, 'comment_body': '> Do you mean updating the data in tests/repository_data/ ?\r\n\r\nYes, exactly.', 'comment_created': datetime.datetime(2022, 9, 1, 12, 27, 7, tzinfo=datetime.timezone.utc), 'commenter': 'znewman01', 'type': 'User'}, {'comment_id': 960591918, 'comment_body': 'Looks great! I might add ""specification version to be used, following the rules of TAP-14""', 'comment_created': datetime.datetime(2022, 9, 1, 12, 27, 43, tzinfo=datetime.timezone.utc), 'commenter': 'znewman01', 'type': 'User'}, {'comment_id': 960592497, 'comment_body': 'Cool, will do that', 'comment_created': datetime.datetime(2022, 9, 1, 12, 28, 20, tzinfo=datetime.timezone.utc), 'commenter': 'abs007', 'type': 'User'}, {'comment_id': 960594301, 'comment_body': 'I see `return (str(spec_version), warning)` below, which suggests:\r\n\r\n`Tuple[str, Optional[str]]`.', 'comment_created': datetime.datetime(2022, 9, 1, 12, 30, 7, tzinfo=datetime.timezone.utc), 'commenter': 'znewman01', 'type': 'User'}, {'comment_id': 960602469, 'comment_body': 'What could be a possible value for `supported_versions_max_length` in that case?', 'comment_created': datetime.datetime(2022, 9, 1, 12, 38, 23, tzinfo=datetime.timezone.utc), 'commenter': 'abs007', 'type': 'User'}, {'comment_id': 960610368, 'comment_body': ""Also, shouldn't I mention the return type in the function definition above and keep the docstring to just an explanation?"", 'comment_created': datetime.datetime(2022, 9, 1, 12, 46, 22, tzinfo=datetime.timezone.utc), 'commenter': 'abs007', 'type': 'User'}, {'comment_id': 960613517, 'comment_body': 'Ah, I meant that, oops. Will add that then. ', 'comment_created': datetime.datetime(2022, 9, 1, 12, 49, 18, tzinfo=datetime.timezone.utc), 'commenter': 'abs007', 'type': 'User'}, {'comment_id': 960675288, 'comment_body': ""I'm also guessing that I'm not supposed to keep this in a `try-catch` block then and keep it as it is but just add the Exception to the docstring"", 'comment_created': datetime.datetime(2022, 9, 1, 13, 45, 14, tzinfo=datetime.timezone.utc), 'commenter': 'abs007', 'type': 'User'}, {'comment_id': 960759902, 'comment_body': 'Think about an example `supported-versions.json` file:\r\n\r\n```json\r\n{""supported_versions"": [""1"", ""2"", ""3"", ""4""]}\r\n```\r\n\r\nThat\'s got 45 bytes in it. So let\'s maybe round up to 1000 bytes? That\'s a pretty huge margin of error but well short of anything that could cause issues', 'comment_created': datetime.datetime(2022, 9, 1, 14, 56, 4, tzinfo=datetime.timezone.utc), 'commenter': 'znewman01', 'type': 'User'}, {'comment_id': 960768806, 'comment_body': ""Good point—you don't typically want to repeat the type signature in documentation. However, it's not obvious to me from reading what `Tuple[str, Optional[str]]` means.\r\n\r\nThere are two ways to fix that:\r\n\r\n1. Make two [`NewType`s](https://docs.python.org/3/library/typing.html#newtype) :\r\n\r\n    ```python\r\n    SpecificationVersion = NewType('SpecificationVersion', str)\r\n    WarningMessage = NewType('WarningMessage', str)\r\n    ```\r\n    \r\n    so the return type becomes `Tuple[SpecificationVersion, Optional[WarningMessage]]`. That's self-documenting, so there's no need to repeat it in the docstring.\r\n    \r\n2. Explain *what* the `str` and `Optional[str]` values are in the docstring\r\n\r\nI might actually prefer (1), because I think in the medium term we want to make a full `SpecificationVersion` class to encapsulate ordering (so you don't have to convert to/from `int` in `_get_spec_version`), parsing, and conversion to URL parts. However, (2) is much easier so it's fine to do that for now."", 'comment_created': datetime.datetime(2022, 9, 1, 15, 3, 38, tzinfo=datetime.timezone.utc), 'commenter': 'znewman01', 'type': 'User'}, {'comment_id': 960769797, 'comment_body': 'Yes, you can keep it as-is. No need to re-raise. Just document that sometimes `ValueError` happens.', 'comment_created': datetime.datetime(2022, 9, 1, 15, 4, 30, tzinfo=datetime.timezone.utc), 'commenter': 'znewman01', 'type': 'User'}, {'comment_id': 960770936, 'comment_body': ""Can you push changes that address my comments before marking them as resolved? Makes it easier for me to track what we've been talking about."", 'comment_created': datetime.datetime(2022, 9, 1, 15, 5, 30, tzinfo=datetime.timezone.utc), 'commenter': 'znewman01', 'type': 'User'}, {'comment_id': 961844914, 'comment_body': 'Sure. Will do that', 'comment_created': datetime.datetime(2022, 9, 2, 16, 29, 8, tzinfo=datetime.timezone.utc), 'commenter': 'abs007', 'type': 'User'}, {'comment_id': 961853665, 'comment_body': 'What could be the approx len() of the list in case of 1000 bytes?', 'comment_created': datetime.datetime(2022, 9, 2, 16, 42, 16, tzinfo=datetime.timezone.utc), 'commenter': 'abs007', 'type': 'User'}, {'comment_id': 962298924, 'comment_body': ""I'm a bit confused. If `SpecificationVersion` would essentially be derived from `str` then won't there be `TypeError` be thrown when I'm still comparing it with `latest_repo_version` and performing int type functions on it?"", 'comment_created': datetime.datetime(2022, 9, 4, 11, 40, 39, tzinfo=datetime.timezone.utc), 'commenter': 'abs007', 'type': 'User'}, {'comment_id': 962315315, 'comment_body': ""Fyi, `test_get_spec_version1` now `test_get_spec_version_supported` doesn't pass because `SUPPORTED_VERSIONS` isn't defined correctly."", 'comment_created': datetime.datetime(2022, 9, 4, 13, 34, 19, tzinfo=datetime.timezone.utc), 'commenter': 'abs007', 'type': 'User'}, {'comment_id': 962317899, 'comment_body': 'So, should I add a `msg` or leave a comment? I guess doing both would be repetitive.', 'comment_created': datetime.datetime(2022, 9, 4, 13, 51, 48, tzinfo=datetime.timezone.utc), 'commenter': 'abs007', 'type': 'User'}, {'comment_id': 963050375, 'comment_body': ""Yeah, if you're going to put a `msg` in the asserts you don't need a comment."", 'comment_created': datetime.datetime(2022, 9, 5, 16, 44, 56, tzinfo=datetime.timezone.utc), 'commenter': 'znewman01', 'type': 'User'}, {'comment_id': 963052561, 'comment_body': ""That's fine—in fact, really `test_get_spec_version` should only handle major version 1. So let's update the test cases"", 'comment_created': datetime.datetime(2022, 9, 5, 16, 50, 18, tzinfo=datetime.timezone.utc), 'commenter': 'znewman01', 'type': 'User'}, {'comment_id': 963055888, 'comment_body': ""Right—if you just make `SpecificationVersion` as a `NewType`, you can't compare them directly. It's the same as what you have now.\r\n\r\n*Eventually*, you'd make a full `class SpecificationVersion` which doesn't require conversion to/from int."", 'comment_created': datetime.datetime(2022, 9, 5, 16, 58, 59, tzinfo=datetime.timezone.utc), 'commenter': 'znewman01', 'type': 'User'}, {'comment_id': 963056389, 'comment_body': 'Well, a list with 1000 elements would definitely serialize to have > 1000 bytes. The real threshold would probably be a couple hundred. \r\n\r\nWhy do you ask?', 'comment_created': datetime.datetime(2022, 9, 5, 17, 0, 10, tzinfo=datetime.timezone.utc), 'commenter': 'znewman01', 'type': 'User'}, {'comment_id': 963318835, 'comment_body': ""My bad actually. I'll have to put comments if I'll be using the for loop."", 'comment_created': datetime.datetime(2022, 9, 6, 6, 53, 53, tzinfo=datetime.timezone.utc), 'commenter': 'abs007', 'type': 'User'}, {'comment_id': 968931936, 'comment_body': 'This should probably be: `None`', 'comment_created': datetime.datetime(2022, 9, 12, 21, 7, 40, tzinfo=datetime.timezone.utc), 'commenter': 'znewman01', 'type': 'User'}, {'comment_id': 968933125, 'comment_body': 'Maybe check the errno:\r\n\r\n```python\r\nexcept OSError as err:\r\n    import errno # this should be at top, of course\r\n    if err.errno != errno.ENOENT:\r\n        raise\r\n    self._spec_version = ...\r\n```\r\n   ', 'comment_created': datetime.datetime(2022, 9, 12, 21, 9, 28, tzinfo=datetime.timezone.utc), 'commenter': 'znewman01', 'type': 'User'}, {'comment_id': 970026719, 'comment_body': 'IMO if your ternary operator spans 3 lines, better to just do an if/else', 'comment_created': datetime.datetime(2022, 9, 13, 19, 51, 57, tzinfo=datetime.timezone.utc), 'commenter': 'znewman01', 'type': 'User'}, {'comment_id': 970027587, 'comment_body': '`spec_version is not None or spec_version == ""1""` <- doesn\'t the latter condition imply the former? if `spec_version == ""1""` then it\'s definitely not `None`', 'comment_created': datetime.datetime(2022, 9, 13, 19, 53, 2, tzinfo=datetime.timezone.utc), 'commenter': 'znewman01', 'type': 'User'}, {'comment_id': 970030454, 'comment_body': 'So, we need to decide how to represent:\r\n\r\n1. spec version 1, everything lives in the root `/*`\r\n2. spec version 1, everything lives under `/1/*`\r\n\r\nThese should be different. I think (1) should be `None` and (2) should be `""1""`.\r\n\r\nThat means we should return `[None]`.', 'comment_created': datetime.datetime(2022, 9, 13, 19, 56, 38, tzinfo=datetime.timezone.utc), 'commenter': 'znewman01', 'type': 'User'}, {'comment_id': 970031947, 'comment_body': 'Maybe worth checking `e.status_code == 404`; otherwise it could be a real error.', 'comment_created': datetime.datetime(2022, 9, 13, 19, 58, 31, tzinfo=datetime.timezone.utc), 'commenter': 'znewman01', 'type': 'User'}, {'comment_id': 970033321, 'comment_body': 'I think it\'s a good idea to check that `SUPPORTED_VERSIONS == [""1""]`; it won\'t change for a long time.', 'comment_created': datetime.datetime(2022, 9, 13, 20, 0, 23, tzinfo=datetime.timezone.utc), 'commenter': 'znewman01', 'type': 'User'}, {'comment_id': 970088650, 'comment_body': 'I think now you need to account for the `None` case for `repository_versions`\r\n\r\nThis is actually starting to get a little confusing: there\'s ""version/path pairs"" (which come from the repository versions, and then there are just ""versions"" (from supported versions). `_get_spec_version` should pick a matching (version, path) pair.\r\n\r\nIt might be worth encoding that in the type system.', 'comment_created': datetime.datetime(2022, 9, 13, 21, 15, 9, tzinfo=datetime.timezone.utc), 'commenter': 'znewman01', 'type': 'User'}, {'comment_id': 970089542, 'comment_body': 'This is gonna be subtle when we have to worry about `None` too (just a warning)', 'comment_created': datetime.datetime(2022, 9, 13, 21, 16, 26, tzinfo=datetime.timezone.utc), 'commenter': 'znewman01', 'type': 'User'}, {'comment_id': 970090062, 'comment_body': 'Or maybe even just have a function from ""path"" to version and use that in `_get_spec_version`.', 'comment_created': datetime.datetime(2022, 9, 13, 21, 17, 9, tzinfo=datetime.timezone.utc), 'commenter': 'znewman01', 'type': 'User'}]","[{'commit_sha': 'fc5bd5c170a5644b08438565ed9346421f78de72', 'committer_username': 'abs007', 'committer_name': 'Abhisman', 'committer_email': 'abhisman.sarkar@gmail.com', 'commit_date': datetime.datetime(2019, 7, 30, 14, 18, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a4332b45c9942657b25165a3ff87c304cd2f9da', 'committer_username': 'abs007', 'committer_name': 'Abhisman', 'committer_email': 'abhisman.sarkar@gmail.com', 'commit_date': datetime.datetime(2019, 7, 30, 14, 18, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88c140a3bab59bc929b3bfda02caccd72b0a8a7b', 'committer_username': 'abs007', 'committer_name': 'Abhisman', 'committer_email': 'abhisman.sarkar@gmail.com', 'commit_date': datetime.datetime(2019, 7, 30, 14, 18, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '774a03951dfa35a4fa08aab15ac6939c72648e4a', 'committer_username': 'abs007', 'committer_name': 'Abhisman', 'committer_email': 'abhisman.sarkar@gmail.com', 'commit_date': datetime.datetime(2019, 7, 30, 14, 18, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8845ebdaf037baab0a4886fd02c00223463b6743', 'committer_username': 'abs007', 'committer_name': 'Abhisman', 'committer_email': 'abhisman.sarkar@gmail.com', 'commit_date': datetime.datetime(2019, 7, 30, 14, 18, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df46e3860e22391fe2d6814344f23264c4b966fb', 'committer_username': 'abs007', 'committer_name': 'Abhisman', 'committer_email': 'abhisman.sarkar@gmail.com', 'commit_date': datetime.datetime(2019, 7, 30, 14, 18, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f5094540c47fb72cbdd607f4a46348fb26cb15f', 'committer_username': 'abs007', 'committer_name': 'Abhisman', 'committer_email': 'abhisman.sarkar@gmail.com', 'commit_date': datetime.datetime(2019, 7, 30, 14, 18, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d82835da48f4162a7deccac1ba8ac420ca3e91f', 'committer_username': 'abs007', 'committer_name': 'Abhisman', 'committer_email': 'abhisman.sarkar@gmail.com', 'commit_date': datetime.datetime(2019, 7, 30, 14, 18, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e77d93e446dfa7ee90cace20eff22c24fcb69724', 'committer_username': 'abs007', 'committer_name': 'Abhisman', 'committer_email': 'abhisman.sarkar@gmail.com', 'commit_date': datetime.datetime(2019, 7, 30, 14, 18, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47fbc2b91196f2be31afb845ce12699ee138a8fc', 'committer_username': 'abs007', 'committer_name': 'Abhisman', 'committer_email': 'abhisman.sarkar@gmail.com', 'commit_date': datetime.datetime(2019, 7, 30, 14, 18, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '127bdbf270c62cb1a19641cabe0844038e2ce7d6', 'committer_username': 'abs007', 'committer_name': 'Abhisman', 'committer_email': 'abhisman.sarkar@gmail.com', 'commit_date': datetime.datetime(2019, 7, 30, 14, 18, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c9660fd8637fe4c1199f2aa8edd9343f1602218', 'committer_username': 'abs007', 'committer_name': 'Abhisman', 'committer_email': 'abhisman.sarkar@gmail.com', 'commit_date': datetime.datetime(2019, 7, 30, 14, 18, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70035696922f157468d79b81c550feb1bf75db57', 'committer_username': 'abs007', 'committer_name': 'Abhisman', 'committer_email': 'abhisman.sarkar@gmail.com', 'commit_date': datetime.datetime(2019, 7, 30, 14, 18, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8071718802222b1ba4341e4ca7f17725b0a98dcf', 'committer_username': 'abs007', 'committer_name': 'Abhisman', 'committer_email': 'abhisman.sarkar@gmail.com', 'commit_date': datetime.datetime(2019, 7, 30, 14, 18, 35, tzinfo=datetime.timezone.utc)}]",Abhisman,53483248,abhisman.sarkar@gmail.com,User,,41,,7,17
1064476759,PoC: Tap 14,"supersedes #2049

This pr is the proof of concept for TAP 14 for the TAP approval process. It should not be merged until that TAP is finalized.

Please fill in the fields below to submit a pull request.  The more information
that is provided, the better.

Fixes #2040

**Description of the changes being introduced by the pull request**:

**Please verify and check that the pull request fulfills the following
requirements**:

- [ ] The code follows the [Code Style Guidelines](https://github.com/secure-systems-lab/code-style-guidelines#code-style-guidelines)
- [ ] Tests have been added for the bug fix or new feature
- [ ] Docs have been added for the bug fix or new feature


",False,2114,https://api.github.com/repos/theupdateframework/python-tuf/pulls/2114,https://github.com/theupdateframework/python-tuf/pull/2114,closed,794,22,8,40,10,34,0,0,[],2022-09-22 17:47:25+00:00,2024-04-23 08:07:38+00:00,49990813.0,"578 days, 14:20:13","[{'comment_id': 979927673, 'comment_body': 'obligatory ""we should probably make a type for `spec_version`"" 🙂 ', 'comment_created': datetime.datetime(2022, 9, 26, 12, 4, 7, tzinfo=datetime.timezone.utc), 'commenter': 'znewman01', 'type': 'User'}, {'comment_id': 979929264, 'comment_body': 'probably worth refactoring into its own method', 'comment_created': datetime.datetime(2022, 9, 26, 12, 5, 11, tzinfo=datetime.timezone.utc), 'commenter': 'znewman01', 'type': 'User'}, {'comment_id': 979930037, 'comment_body': 'move this line into an `else` clause?', 'comment_created': datetime.datetime(2022, 9, 26, 12, 5, 44, tzinfo=datetime.timezone.utc), 'commenter': 'znewman01', 'type': 'User'}, {'comment_id': 979932327, 'comment_body': 'I would love to pull the parsing/types/etc. out into a `SupportedVersions` type that could be tested independently', 'comment_created': datetime.datetime(2022, 9, 26, 12, 7, 18, tzinfo=datetime.timezone.utc), 'commenter': 'znewman01', 'type': 'User'}, {'comment_id': 979933182, 'comment_body': ""That's probably a more natural home for e.g. `_get_spec_versions`"", 'comment_created': datetime.datetime(2022, 9, 26, 12, 7, 52, tzinfo=datetime.timezone.utc), 'commenter': 'znewman01', 'type': 'User'}, {'comment_id': 979933718, 'comment_body': '`List[str]` may be an out-of-date type now', 'comment_created': datetime.datetime(2022, 9, 26, 12, 8, 14, tzinfo=datetime.timezone.utc), 'commenter': 'znewman01', 'type': 'User'}, {'comment_id': 979944439, 'comment_body': 'IMO this is getting really hard to read. I think it would benefit a lot from a:\r\n\r\n```python\r\ndef _format_url(self, base: str, parts: List[str]):\r\n    return f""{base.strip(\'/\')}/{\'/\'.join([p.strip(\'/\') for p in parts])""\r\n\r\ndef _format_metadata_basename(rolename: str, version: Optional[int]) -> str:\r\n    encoded_name = parse.quote(rolename, """")\r\n    if version is None:\r\n        return f""{encoded_name.json}""\r\n    return f""{version}.{encoded_name}.json""\r\n```\r\n\r\nSo you could build the URL up as:\r\n\r\n```python\r\nurl = self._format_url(filter(None, [self._spec_version_dir, _format_basename(encoded_name, version)]))\r\n```', 'comment_created': datetime.datetime(2022, 9, 26, 12, 14, 42, tzinfo=datetime.timezone.utc), 'commenter': 'znewman01', 'type': 'User'}, {'comment_id': 979949196, 'comment_body': 'IMO clearer as a list comprehension with an `if` clause', 'comment_created': datetime.datetime(2022, 9, 26, 12, 16, 58, tzinfo=datetime.timezone.utc), 'commenter': 'znewman01', 'type': 'User'}, {'comment_id': 979951214, 'comment_body': 'Can we give this a more meaningful name?', 'comment_created': datetime.datetime(2022, 9, 26, 12, 17, 57, tzinfo=datetime.timezone.utc), 'commenter': 'znewman01', 'type': 'User'}, {'comment_id': 979951562, 'comment_body': 'Preference to pull this out into its own method.', 'comment_created': datetime.datetime(2022, 9, 26, 12, 18, 6, tzinfo=datetime.timezone.utc), 'commenter': 'znewman01', 'type': 'User'}, {'comment_id': 979953664, 'comment_body': 'Might be nice to introduce a `SpecVersion` class (basically a `version`/`path` tuple)', 'comment_created': datetime.datetime(2022, 9, 26, 12, 19, 6, tzinfo=datetime.timezone.utc), 'commenter': 'znewman01', 'type': 'User'}, {'comment_id': 979955597, 'comment_body': 'This would make the `int` conversion lines a little more bulletproof', 'comment_created': datetime.datetime(2022, 9, 26, 12, 20, 13, tzinfo=datetime.timezone.utc), 'commenter': 'znewman01', 'type': 'User'}, {'comment_id': 979957257, 'comment_body': 'I think that as-written this would accept `/1.root.json`, `/2/2.root.json`, `3.root.json` which feels wrong.', 'comment_created': datetime.datetime(2022, 9, 26, 12, 21, 18, tzinfo=datetime.timezone.utc), 'commenter': 'znewman01', 'type': 'User'}, {'comment_id': 979960648, 'comment_body': ""Maybe we want to say:\r\n\r\n```python\r\nfor next_version in range(lower_bound, upper_bound):\r\n    while supported_version_repos:\r\n        if it's in supported_version_repos[0]:\r\n            handle it!\r\n            break\r\n        else:\r\n            supported_version_repos.pop()\r\n```"", 'comment_created': datetime.datetime(2022, 9, 26, 12, 23, 37, tzinfo=datetime.timezone.utc), 'commenter': 'znewman01', 'type': 'User'}, {'comment_id': 979964409, 'comment_body': ""Thinking about this: it's totally possible that v2 root format will look totally different, so it seems wrong to try to load them the same way.\r\n\r\nI've thought about implementing TAP-14 as a *wrapper* around the Updater. Basically, it would expose the same interface and keep a dict of `{MajorVersion: Updater}`.\r\n\r\nThen, its job is to (1) parse the `supported-versions` and (2) delegate appropriately. This keeps the complexity of TAP-14 out of the Updater itself, and provides a more natural way to support a very-different v2."", 'comment_created': datetime.datetime(2022, 9, 26, 12, 26, 10, tzinfo=datetime.timezone.utc), 'commenter': 'znewman01', 'type': 'User'}, {'comment_id': 980369511, 'comment_body': 'I also thought about moving some of this into the metadata api, especially if we finalize the decision to sign this file in theupdateframework/taps#158', 'comment_created': datetime.datetime(2022, 9, 26, 18, 25, 39, tzinfo=datetime.timezone.utc), 'commenter': 'mnm678', 'type': 'User'}, {'comment_id': 980374481, 'comment_body': 'I agree in general, but `_load_root` is unique in that it has to look in directories for multiple supported versions in order to ensure that no root metadata is missed. If the root format is changed, then this function could be updated as part of the client update to use the correct format for the current root file that is being checked.', 'comment_created': datetime.datetime(2022, 9, 26, 18, 31, 46, tzinfo=datetime.timezone.utc), 'commenter': 'mnm678', 'type': 'User'}, {'comment_id': 981342832, 'comment_body': ""> I've thought about implementing TAP-14 as a _wrapper_ around the Updater. Basically, it would expose the same interface and keep a dict of `{MajorVersion: Updater}`.\r\n\r\nThis is a great idea. Legacy python-tuf implemented [TAP 4: Multiple repository consensus on entrusted targets](https://github.com/theupdateframework/taps/blob/master/tap4.md) (mapping file) support with a wrapper around the updater (see [`MultiRepoUpdater`](https://github.com/theupdateframework/python-tuf/blob/febe6c3dc30195078a5487d68d7db708e7de8479/tuf/client/updater.py#L161)). It could be useful to experiment with multiple wrappers around the updater and how they would interact, so that we can determine whether we need to come up with another pattern so that TAP implementations aren't mutually exclusive."", 'comment_created': datetime.datetime(2022, 9, 27, 14, 44, 30, tzinfo=datetime.timezone.utc), 'commenter': 'joshuagl', 'type': 'User'}, {'comment_id': 981469667, 'comment_body': ""That's a great point. We're hoping to take that approach in go-tuf for TAP 4 as well!\r\n\r\nInteractions sound a little tricky...I *think* we're okay, we'd put the TAP-4 wrapper as the outermost layer?\r\n\r\nWe can cross that bridge when we come to it."", 'comment_created': datetime.datetime(2022, 9, 27, 16, 34, 30, tzinfo=datetime.timezone.utc), 'commenter': 'znewman01', 'type': 'User'}, {'comment_id': 981602046, 'comment_body': ""Just added a test, this does ignore `3.root.json` in your example. The complication is that both the `supported_version_repos` look and the `next_version` loop have to break early in some (different) cases, which is where the additional complexity comes in. I'm happy to simplify if there's an easier way to represent this."", 'comment_created': datetime.datetime(2022, 9, 27, 18, 49, 44, tzinfo=datetime.timezone.utc), 'commenter': 'mnm678', 'type': 'User'}, {'comment_id': 982219909, 'comment_body': 'Yeah, my hunch is that ordering with TAP 4 at the outermost layer makes sense for TAP 4 + TAP 14.', 'comment_created': datetime.datetime(2022, 9, 28, 10, 17, 19, tzinfo=datetime.timezone.utc), 'commenter': 'joshuagl', 'type': 'User'}, {'comment_id': 984582961, 'comment_body': ""Nit: Please provide a type for `_spec_version` as I suspect that `mypy` won't be happy.\r\nSomething like:\r\n`self._spec_version: Optional[str] = None`\r\n"", 'comment_created': datetime.datetime(2022, 9, 30, 13, 17, 56, tzinfo=datetime.timezone.utc), 'commenter': 'MVrachev', 'type': 'User'}, {'comment_id': 984600870, 'comment_body': 'Where can we have a look into an example `spec_version.json` file?', 'comment_created': datetime.datetime(2022, 9, 30, 13, 35, 56, tzinfo=datetime.timezone.utc), 'commenter': 'MVrachev', 'type': 'User'}, {'comment_id': 984603198, 'comment_body': 'Are there recommendations or documentation somewhere on what format will the `supported-versions.json` file have?', 'comment_created': datetime.datetime(2022, 9, 30, 13, 38, tzinfo=datetime.timezone.utc), 'commenter': 'MVrachev', 'type': 'User'}, {'comment_id': 984608686, 'comment_body': 'Actually, you know the exact format of your return type (as we see below in the except cause) and I think it will be better if you describe it as:\r\n`List[Dict[Any]]`', 'comment_created': datetime.datetime(2022, 9, 30, 13, 41, 27, tzinfo=datetime.timezone.utc), 'commenter': 'MVrachev', 'type': 'User'}, {'comment_id': 984612088, 'comment_body': 'Nit, but still makes it more readable:\r\n```suggestion\r\n        repository_versions: List[str] = [\r\n```', 'comment_created': datetime.datetime(2022, 9, 30, 13, 44, 9, tzinfo=datetime.timezone.utc), 'commenter': 'MVrachev', 'type': 'User'}, {'comment_id': 984614565, 'comment_body': 'There are a lot of improvements I can suggest here to fit our style-guidelines, but will restrain myself for now as this is a proof of concept pr.', 'comment_created': datetime.datetime(2022, 9, 30, 13, 46, 45, tzinfo=datetime.timezone.utc), 'commenter': 'MVrachev', 'type': 'User'}, {'comment_id': 984620107, 'comment_body': ""I think I agree with @znewman01 if there are other use cases where you will need that tuple, but it seems as here the tuple doesn't mean `versions/path`, but `version/warning` where `warning` is even optional."", 'comment_created': datetime.datetime(2022, 9, 30, 13, 52, 18, tzinfo=datetime.timezone.utc), 'commenter': 'MVrachev', 'type': 'User'}, {'comment_id': 984621162, 'comment_body': 'Honestly, not sure why we return the `warning` and not directly print it.\r\nThis will save us from the need to return it, make a variable, etc.', 'comment_created': datetime.datetime(2022, 9, 30, 13, 53, 22, tzinfo=datetime.timezone.utc), 'commenter': 'MVrachev', 'type': 'User'}, {'comment_id': 984623745, 'comment_body': 'I think this is too complicated to be a one-liner.', 'comment_created': datetime.datetime(2022, 9, 30, 13, 55, 58, tzinfo=datetime.timezone.utc), 'commenter': 'MVrachev', 'type': 'User'}, {'comment_id': 984624745, 'comment_body': 'Annotation is needed for `supported_version_repos`.', 'comment_created': datetime.datetime(2022, 9, 30, 13, 56, 57, tzinfo=datetime.timezone.utc), 'commenter': 'MVrachev', 'type': 'User'}, {'comment_id': 984710230, 'comment_body': 'I see why you save the original content of `self._spec_version_dir` because you change `self._spec_version_dir` multiple times later, but I had to read it a couple of times.\r\n\r\nI suggest instead passing the `version_repo` variable to `download_metadata` and with this you remove:\r\n- `save_repo_version_dir` variable\r\n- `to_break` flag\r\n- the `if` check for `to_break` at the end of the inner cycle and you can directly return after you add to `supported_version_repos` list', 'comment_created': datetime.datetime(2022, 9, 30, 15, 26, 20, tzinfo=datetime.timezone.utc), 'commenter': 'MVrachev', 'type': 'User'}, {'comment_id': 997454693, 'comment_body': 'What happens if there\'s multiple nested folders? `ver_and_name = ""/foo/bar.json""`\r\n\r\nI like \r\n\r\n```python\r\n>>> ""foo/bar/baz.json"".partition(""/"")\r\n(\'foo\', \'/\', \'bar/baz.json\')\r\n>>> ""foo/bar/baz.json"".rpartition(""/"") \r\n(\'foo/bar\', \'/\', \'baz.json\')\r\n```\r\n\r\nFor making intent a little clearer there.\r\n\r\nYou can also `assert len(ver_and_name.split(""/"")  <= 2`', 'comment_created': datetime.datetime(2022, 10, 17, 19, 55, 13, tzinfo=datetime.timezone.utc), 'commenter': 'znewman01', 'type': 'User'}, {'comment_id': 997454946, 'comment_body': ""This isn't a thing anymore, right?"", 'comment_created': datetime.datetime(2022, 10, 17, 19, 55, 32, tzinfo=datetime.timezone.utc), 'commenter': 'znewman01', 'type': 'User'}]","[{'commit_sha': 'ce67fe4f40f0e890489d055e73ad6032cbd5107a', 'committer_username': 'abs007', 'committer_name': 'Abhisman', 'committer_email': 'abhisman.sarkar@gmail.com', 'commit_date': datetime.datetime(2019, 7, 30, 14, 18, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8c3bb5bd73e82988bc17b2c30a7e6170eb7b85a', 'committer_username': 'abs007', 'committer_name': 'Abhisman', 'committer_email': 'abhisman.sarkar@gmail.com', 'commit_date': datetime.datetime(2019, 7, 30, 14, 18, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d830a09b73ecf10fecfc0a0367398b6d1db84c1', 'committer_username': 'abs007', 'committer_name': 'Abhisman', 'committer_email': 'abhisman.sarkar@gmail.com', 'commit_date': datetime.datetime(2019, 7, 30, 14, 18, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c507c325f094a0d943654f67cdc779ab0076e05', 'committer_username': 'abs007', 'committer_name': 'Abhisman', 'committer_email': 'abhisman.sarkar@gmail.com', 'commit_date': datetime.datetime(2019, 7, 30, 14, 18, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ffbf4c4a317f612f564f4d99343e7ed7ef1e0a40', 'committer_username': 'abs007', 'committer_name': 'Abhisman', 'committer_email': 'abhisman.sarkar@gmail.com', 'commit_date': datetime.datetime(2019, 7, 30, 14, 18, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66b52f8680272ca5a8015a7be9feb2310579db5a', 'committer_username': 'abs007', 'committer_name': 'Abhisman', 'committer_email': 'abhisman.sarkar@gmail.com', 'commit_date': datetime.datetime(2019, 7, 30, 14, 18, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99a454e58c5b2adf233747491d274ea9ad97371c', 'committer_username': 'abs007', 'committer_name': 'Abhisman', 'committer_email': 'abhisman.sarkar@gmail.com', 'commit_date': datetime.datetime(2019, 7, 30, 14, 18, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b2e29b90e771cacfebca63b69d9c8886be80a1f', 'committer_username': 'abs007', 'committer_name': 'Abhisman', 'committer_email': 'abhisman.sarkar@gmail.com', 'commit_date': datetime.datetime(2019, 7, 30, 14, 18, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f95fdb508d890c5379c10dbf7e9752f8623d32fd', 'committer_username': 'abs007', 'committer_name': 'Abhisman', 'committer_email': 'abhisman.sarkar@gmail.com', 'commit_date': datetime.datetime(2019, 7, 30, 14, 18, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '856716095bfb36e0bc81cd6b134892ec033855f1', 'committer_username': 'abs007', 'committer_name': 'Abhisman', 'committer_email': 'abhisman.sarkar@gmail.com', 'commit_date': datetime.datetime(2019, 7, 30, 14, 18, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a70cc4848c36e148943c52e22676e1acdb3cdf49', 'committer_username': 'abs007', 'committer_name': 'Abhisman', 'committer_email': 'abhisman.sarkar@gmail.com', 'commit_date': datetime.datetime(2019, 7, 30, 14, 18, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '04231c17faf82487c62b228c138425bfdddf9f9d', 'committer_username': 'abs007', 'committer_name': 'Abhisman', 'committer_email': 'abhisman.sarkar@gmail.com', 'commit_date': datetime.datetime(2019, 7, 30, 14, 18, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3fda3d5c5f800fdd610928a96675fdffe6c4a02', 'committer_username': 'abs007', 'committer_name': 'Abhisman', 'committer_email': 'abhisman.sarkar@gmail.com', 'commit_date': datetime.datetime(2019, 7, 30, 14, 18, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5814a2c5422e7aa0cc129735109bca21b9613fb9', 'committer_username': 'abs007', 'committer_name': 'Abhisman', 'committer_email': 'abhisman.sarkar@gmail.com', 'commit_date': datetime.datetime(2019, 7, 30, 14, 18, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf3d41ceddc6904c12e82f217f001997c4fe3b66', 'committer_username': 'mnm678', 'committer_name': 'Marina Moore', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 30, 22, 11, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e0ddd4a82185cc2b1e3b747ef6c17d69aa7292e0', 'committer_username': 'mnm678', 'committer_name': 'Marina Moore', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 30, 22, 11, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c7be68c9b00fd200978d0345f59a3435ead8925', 'committer_username': 'mnm678', 'committer_name': 'Marina Moore', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 30, 22, 11, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '78f5bfcce676141ea8fa14be64aeea775a5ba5ea', 'committer_username': 'mnm678', 'committer_name': 'Marina Moore', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 30, 22, 11, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3b14938be98639e6239effb13553f4d9ee75771', 'committer_username': 'mnm678', 'committer_name': 'Marina Moore', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 30, 22, 11, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd65640b9012e9779d654eb1c64b3c740f7235ff2', 'committer_username': 'mnm678', 'committer_name': 'Marina Moore', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 30, 22, 11, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '250740d28c426b90f01180d117b2bf01bfc06218', 'committer_username': 'mnm678', 'committer_name': 'Marina Moore', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 30, 22, 11, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e7da4c89e4028715ea2eeef799369b0026ffd76', 'committer_username': 'mnm678', 'committer_name': 'Marina Moore', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 30, 22, 11, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2842d059fc8d94ac791da7623520cd7d4671fde3', 'committer_username': 'mnm678', 'committer_name': 'Marina Moore', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 30, 22, 11, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08b0c2364f41525a9025f5433a9b186ad498b0a2', 'committer_username': 'mnm678', 'committer_name': 'Marina Moore', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 30, 22, 11, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa75d78f7f9ec537ffe1013f7d812c7def56e0a1', 'committer_username': 'mnm678', 'committer_name': 'Marina Moore', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 30, 22, 11, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd3d4d7115b095f2de9a40c696da2636eed5f724', 'committer_username': 'mnm678', 'committer_name': 'Marina Moore', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 30, 22, 11, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d6847cb9dbea0ea5b2c72ff4bab2ae1ac202030', 'committer_username': 'mnm678', 'committer_name': 'Marina Moore', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 30, 22, 11, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '851b2d65b4d25460ca63308bc1dfd7458213d6be', 'committer_username': 'mnm678', 'committer_name': 'Marina Moore', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 30, 22, 11, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76567c66fd540e097786a5e50b4c2884a1b9ca61', 'committer_username': 'mnm678', 'committer_name': 'Marina Moore', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 30, 22, 11, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '515b4f2284c211e6b41b498c7d61b6b30e0d2fb7', 'committer_username': 'mnm678', 'committer_name': 'Marina Moore', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 30, 22, 11, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df2ecd40848c0035a1ec10a3dbd1ef7aef5d3d8b', 'committer_username': 'mnm678', 'committer_name': 'Marina Moore', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 30, 22, 11, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b7cf5d7944e31fa9c9edd201e1c38c00590eff1', 'committer_username': 'mnm678', 'committer_name': 'Marina Moore', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 30, 22, 11, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f57bac799aaad472a55f4affbc82b8ca43652d5a', 'committer_username': 'mnm678', 'committer_name': 'Marina Moore', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 30, 22, 11, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ffba951c1547705baf68cc3086e4014ca950350', 'committer_username': 'mnm678', 'committer_name': 'Marina Moore', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 30, 22, 11, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '81c97184ddf888ce492fe2452c6be42a6b0b692b', 'committer_username': 'mnm678', 'committer_name': 'Marina Moore', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 30, 22, 11, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db67863b1d63cfd867bf192395dad3c25b71ba5a', 'committer_username': 'mnm678', 'committer_name': 'Marina Moore', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 30, 22, 11, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b5bf7eed32071a98378dce20f5c211b36193ca9', 'committer_username': 'mnm678', 'committer_name': 'Marina Moore', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 30, 22, 11, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a2e58e20624ce6fafbc84323b8fffca4be4b87c3', 'committer_username': 'mnm678', 'committer_name': 'Marina Moore', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 30, 22, 11, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e77f033880244e50caed22674f163aac7f4ae32c', 'committer_username': 'mnm678', 'committer_name': 'Marina Moore', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 30, 22, 11, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd491d46c727a91b5caed605a05a4e3bdcb50a959', 'committer_username': 'mnm678', 'committer_name': 'Marina Moore', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 30, 22, 11, 19, tzinfo=datetime.timezone.utc)}]",Marina Moore,11727761,,User,,50,,0,26

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
7942805,python-tuf,theupdateframework/python-tuf,Python,269,1615,45,102,6251,89,25,3,"[{'id': 990569886, 'number': 2051, 'closed': datetime.datetime(2022, 7, 12, 7, 34, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 7, 17, 20, 25, tzinfo=datetime.timezone.utc), 'time_taken': 396854.0, 'time_delta': '4 days, 14:14:14', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 988417207, 'number': 2049, 'closed': datetime.datetime(2022, 11, 17, 14, 11, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 6, 8, 4, 49, tzinfo=datetime.timezone.utc), 'time_taken': 11599595.0, 'time_delta': '134 days, 6:06:35', 'additions': 1264, 'deletions': 4, 'state': 'closed'}, {'id': 979852850, 'number': 2041, 'closed': datetime.datetime(2022, 6, 27, 12, 47, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 27, 10, 8, 57, tzinfo=datetime.timezone.utc), 'time_taken': 9517.0, 'time_delta': '2:38:37', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 931478538, 'number': 2002, 'closed': datetime.datetime(2022, 5, 31, 12, 17, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 9, 17, 57, 13, tzinfo=datetime.timezone.utc), 'time_taken': 1880440.0, 'time_delta': '21 days, 18:20:40', 'additions': 4, 'deletions': 0, 'state': 'closed'}, {'id': 918369165, 'number': 1975, 'closed': datetime.datetime(2022, 5, 2, 7, 17, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 25, 16, 18, 48, tzinfo=datetime.timezone.utc), 'time_taken': 572299.0, 'time_delta': '6 days, 14:58:19', 'additions': 28, 'deletions': 7, 'state': 'closed'}, {'id': 915074366, 'number': 1963, 'closed': datetime.datetime(2022, 4, 25, 14, 59, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 21, 8, 45, 59, tzinfo=datetime.timezone.utc), 'time_taken': 367999.0, 'time_delta': '4 days, 6:13:19', 'additions': 28, 'deletions': 7, 'state': 'closed'}, {'id': 906279387, 'number': 1950, 'closed': datetime.datetime(2022, 4, 13, 7, 11, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 11, 17, 26, 49, tzinfo=datetime.timezone.utc), 'time_taken': 135893.0, 'time_delta': '1 day, 13:44:53', 'additions': 17, 'deletions': 17, 'state': 'closed'}, {'id': 905030623, 'number': 1949, 'closed': datetime.datetime(2022, 4, 11, 16, 47, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 9, 19, 0, 58, tzinfo=datetime.timezone.utc), 'time_taken': 164792.0, 'time_delta': '1 day, 21:46:32', 'additions': 17, 'deletions': 17, 'state': 'closed'}]"
