pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
663736409,refactor: litmus-portal authentication server,"# Authentication Server Refactor

> Part of #2483 and [GSoC Project](https://summerofcode.withgoogle.com/projects/#5058541729087488)

This PR comprehends a full re-write of litmus-portal's golang authentication server.

The server has been developed keeping in mind that the litmus-portal frontend does not need to make any change in request/response.

## Routes Included

| Type of Request 	|      Routes      	|               Functionality              	| Authorisation Required 	|
|-----------------	|:----------------:	|:----------------------------------------:	|------------------------	|
| POST            	| /login           	| Logs in the user and generates JWT Token 	| No                     	|
| GET             	| /users           	| Fetches all the users to be displayed    	| Yes                    	|
| POST            	| /create          	| Allows admin to create a user            	| Yes (with admin role)  	|
| POST            	| /update/password 	| Update password of logged in user        	| Yes                    	|
| POST            	| /reset/password  	| Allows admins to reset user's password   	| Yes (with admin role)  	|
| POST            	| /update/details  	| Allows user to update email and name     	| Yes                    	|

## Dependencies Used

```go
go 1.16
require (	
        github.com/dgrijalva/jwt-go v3.2.0+incompatible	
        github.com/gin-contrib/cors v1.3.1	
        github.com/gin-gonic/gin v1.7.2	
        github.com/sirupsen/logrus v1.4.2	
        go.mongodb.org/mongo-driver v1.5.3	
        golang.org/x/crypto v0.0.0-20210513164829-c07d793c2f9a
)
```

- [gin-gionic](https://github.com/gin-gonic/gin) 
- [mongo-driver](https://github.com/mongodb/mongo-go-driver)
- [logrus](https://github.com/sirupsen/logrus)
- [jwt-go](https://github.com/dgrijalva/jwt-go)

## Results

> The current authentication server and the re-written server were deployed on `Okteto` and tested

### Performance Gain

The current authentication server took **14 seconds** for an average response

![litmus_current_auth_marked](https://user-images.githubusercontent.com/31009634/121057340-cc583f00-c7dc-11eb-9635-0c17fc7851d4.png)


The re-written authentication server took **0.3 seconds** for an average response

![marked_new](https://user-images.githubusercontent.com/31009634/121057370-d37f4d00-c7dc-11eb-8ed2-9263ba697c2e.png)


> This is a boost in performance of almost `46 times` meanwhile keeping the functionality and the security the same.

### Easier Packaging of Code

The packages and folders have been completely simplified. Everything in the codebase has been decoupled for easier development and access.

Before: 
![old_directory](https://user-images.githubusercontent.com/31009634/121058281-cadb4680-c7dd-11eb-95c0-b4ac3a90f159.png)


After:
![new_directory](https://user-images.githubusercontent.com/31009634/121058256-c3b43880-c7dd-11eb-8744-d352c93b316f.png)


## Try out

You can find this codebase deployed on https://litmusportal-production-frontend-service-darthbenro008.cloud.okteto.net/ 
Username: `admin`
Password: `litmus`

Alternatively, you can also deploy this codebase on your own `Okteto Cluster` by [clicking here](https://cloud.okteto.com/#/deploy?repository=https://github.com/DarthBenro008/litmus&branch=okteto-testing) 

## ToDo
- Unit Testing and DB Mocking
",True,2867,https://api.github.com/repos/litmuschaos/litmus/pulls/2867,https://github.com/litmuschaos/litmus/pull/2867,closed,900,1744,40,24,4,64,2,0,"[{'name': 'area/litmus-portal'}, {'name': 'size/XXL'}]",2021-06-07 16:51:47+00:00,2021-06-23 10:06:11+00:00,1358064.0,"15 days, 17:14:24","[{'comment_id': 647317542, 'comment_body': 'Any specific reason for using POST instead of PUT  in update query?', 'comment_created': datetime.datetime(2021, 6, 8, 10, 33, 14, tzinfo=datetime.timezone.utc), 'commenter': 'SarthakJain26', 'type': 'User'}, {'comment_id': 647727593, 'comment_body': 'Typo, JW_SECRET -> JWT_SECRET', 'comment_created': datetime.datetime(2021, 6, 8, 19, 17, 32, tzinfo=datetime.timezone.utc), 'commenter': 'SarthakJain26', 'type': 'User'}, {'comment_id': 647733181, 'comment_body': 'Email is an optional field. It can be empty', 'comment_created': datetime.datetime(2021, 6, 8, 19, 26, 36, tzinfo=datetime.timezone.utc), 'commenter': 'SarthakJain26', 'type': 'User'}, {'comment_id': 647760768, 'comment_body': 'Better to sanitize the data before authenticating, so that trailing spaces could be trimmed', 'comment_created': datetime.datetime(2021, 6, 8, 20, 12, 34, tzinfo=datetime.timezone.utc), 'commenter': 'SarthakJain26', 'type': 'User'}, {'comment_id': 647766568, 'comment_body': 'Better to sanitize the data before creating, so that trailing spaces could be trimmed', 'comment_created': datetime.datetime(2021, 6, 8, 20, 22, 4, tzinfo=datetime.timezone.utc), 'commenter': 'SarthakJain26', 'type': 'User'}, {'comment_id': 647774263, 'comment_body': 'Typo: suddenly -> successfully ', 'comment_created': datetime.datetime(2021, 6, 8, 20, 34, 33, tzinfo=datetime.timezone.utc), 'commenter': 'SarthakJain26', 'type': 'User'}, {'comment_id': 647780369, 'comment_body': 'Should we use omitempty with ID, UserName, Role and Password? These fields will/should never be nil :thinking: ', 'comment_created': datetime.datetime(2021, 6, 8, 20, 44, 47, tzinfo=datetime.timezone.utc), 'commenter': 'SarthakJain26', 'type': 'User'}, {'comment_id': 647780739, 'comment_body': 'Same as above\r\n', 'comment_created': datetime.datetime(2021, 6, 8, 20, 45, 23, tzinfo=datetime.timezone.utc), 'commenter': 'SarthakJain26', 'type': 'User'}, {'comment_id': 647909878, 'comment_body': 'Changing the protocol will required changes from the frontend and as mentioned above, the server was re-written keeping in mind that there should be no changes in request/response as in the current authentication-server used by litmus-frontend. I would prefer PUT over POST. Had to choose PUT to avoid further changes in litmus-frontend.', 'comment_created': datetime.datetime(2021, 6, 9, 1, 56, 38, tzinfo=datetime.timezone.utc), 'commenter': 'DarthBenro008', 'type': 'User'}, {'comment_id': 647909993, 'comment_body': 'Will amend this.', 'comment_created': datetime.datetime(2021, 6, 9, 1, 57, 3, tzinfo=datetime.timezone.utc), 'commenter': 'DarthBenro008', 'type': 'User'}, {'comment_id': 647912102, 'comment_body': ""- We do not want to send Password while sending responses for `/users` GET route, hence omitempty is required.\r\n- I agree ID, UserName, Role are never be nil and is guaranteed from the server's side as there are validations and checks.\r\n- but `omitempty` is significant only when we are de-serialising the json/bson. Hence I think there is no difference if we write or do not write `omitempty`"", 'comment_created': datetime.datetime(2021, 6, 9, 2, 3, 32, tzinfo=datetime.timezone.utc), 'commenter': 'DarthBenro008', 'type': 'User'}, {'comment_id': 647912466, 'comment_body': '- The `/reset/password` POST route does not send a `Username`, hence `omitempty` is required ', 'comment_created': datetime.datetime(2021, 6, 9, 2, 4, 43, tzinfo=datetime.timezone.utc), 'commenter': 'DarthBenro008', 'type': 'User'}, {'comment_id': 647913024, 'comment_body': 'I do not seem to find the mentioned typo anywhere ðŸ˜… ', 'comment_created': datetime.datetime(2021, 6, 9, 2, 6, 41, tzinfo=datetime.timezone.utc), 'commenter': 'DarthBenro008', 'type': 'User'}, {'comment_id': 647922614, 'comment_body': 'The `litmus-frontend` already does this. As this a specific use-case API (only used by litmus-frontend), we can choose to avoid sanitisation of input data in favour to not add an additional dependency.', 'comment_created': datetime.datetime(2021, 6, 9, 2, 37, 2, tzinfo=datetime.timezone.utc), 'commenter': 'DarthBenro008', 'type': 'User'}, {'comment_id': 647925851, 'comment_body': '@DarthBenro008 its better to change this cc: @rajdas98 @gdsoumya ', 'comment_created': datetime.datetime(2021, 6, 9, 2, 47, 20, tzinfo=datetime.timezone.utc), 'commenter': 'ishangupta-ds', 'type': 'User'}, {'comment_id': 647927062, 'comment_body': ""@ishangupta-ds , I would like to confirm,  both the `/update/details` and `/update/password` routes would have `PUT` requests if we will be going ahead with it? \r\n\r\n## New Routes Table\r\n\r\n| Type of Request \t|      Routes      \t|               Functionality              \t| Authorisation Required \t|\r\n|-----------------\t|:----------------:\t|:----------------------------------------:\t|------------------------\t|\r\n| POST            \t| /login           \t| Logs in the user and generates JWT Token \t| No                     \t|\r\n| GET             \t| /users           \t| Fetches all the users to be displayed    \t| Yes                    \t|\r\n| POST            \t| /create          \t| Allows admin to create a user            \t| Yes (with admin role)  \t|\r\n| **PUT**            \t| /update/password \t| Update password of logged in user        \t| Yes                    \t|\r\n| POST            \t| /reset/password  \t| Allows admins to reset user's password   \t| Yes (with admin role)  \t|\r\n| **PUT**            \t| /update/details  \t| Allows user to update email and name     \t| Yes                    \t|\r\n"", 'comment_created': datetime.datetime(2021, 6, 9, 2, 50, 55, tzinfo=datetime.timezone.utc), 'commenter': 'DarthBenro008', 'type': 'User'}, {'comment_id': 647930157, 'comment_body': 'Ideally both should be updated @DarthBenro008 , awaiting comments from @rajdas98 and @gdsoumya too.', 'comment_created': datetime.datetime(2021, 6, 9, 3, 0, 21, tzinfo=datetime.timezone.utc), 'commenter': 'ishangupta-ds', 'type': 'User'}, {'comment_id': 647931059, 'comment_body': 'Handlers / controllers like this could have been placed in a separate file, this file can be kept just for all the routes. @DarthBenro008 ', 'comment_created': datetime.datetime(2021, 6, 9, 3, 3, 13, tzinfo=datetime.timezone.utc), 'commenter': 'ishangupta-ds', 'type': 'User'}, {'comment_id': 647932221, 'comment_body': 'should it not be for 24 hours?', 'comment_created': datetime.datetime(2021, 6, 9, 3, 7, 5, tzinfo=datetime.timezone.utc), 'commenter': 'ishangupta-ds', 'type': 'User'}, {'comment_id': 647932575, 'comment_body': 'Have you formatted using `gofmt` ?', 'comment_created': datetime.datetime(2021, 6, 9, 3, 8, 10, tzinfo=datetime.timezone.utc), 'commenter': 'ishangupta-ds', 'type': 'User'}, {'comment_id': 647933723, 'comment_body': 'Declare the collection name and field name as constants, then use.', 'comment_created': datetime.datetime(2021, 6, 9, 3, 12, 14, tzinfo=datetime.timezone.utc), 'commenter': 'ishangupta-ds', 'type': 'User'}, {'comment_id': 647933771, 'comment_body': 'same for this', 'comment_created': datetime.datetime(2021, 6, 9, 3, 12, 23, tzinfo=datetime.timezone.utc), 'commenter': 'ishangupta-ds', 'type': 'User'}, {'comment_id': 647934824, 'comment_body': 'Yes, the whole project has been linted using `gofmt`', 'comment_created': datetime.datetime(2021, 6, 9, 3, 15, 53, tzinfo=datetime.timezone.utc), 'commenter': 'DarthBenro008', 'type': 'User'}, {'comment_id': 647935259, 'comment_body': 'Oh, yes. It ideally should be 24 hours. Should we allow the user to set this via `env` or should we just change the multiplier to 1440 from 300?', 'comment_created': datetime.datetime(2021, 6, 9, 3, 17, 28, tzinfo=datetime.timezone.utc), 'commenter': 'DarthBenro008', 'type': 'User'}, {'comment_id': 647935618, 'comment_body': 'Use an env var @DarthBenro008 ', 'comment_created': datetime.datetime(2021, 6, 9, 3, 18, 54, tzinfo=datetime.timezone.utc), 'commenter': 'ishangupta-ds', 'type': 'User'}, {'comment_id': 647936149, 'comment_body': 'Const ', 'comment_created': datetime.datetime(2021, 6, 9, 3, 20, 41, tzinfo=datetime.timezone.utc), 'commenter': 'ishangupta-ds', 'type': 'User'}, {'comment_id': 647936245, 'comment_body': ""I do not want to export these functions (handlers) and make sure it's available under the same package and to the API only. The code architecture is highly inspired by Clean Architecture. Maybe the package name `routes` is misleading and could be changed to `handlers` instead?"", 'comment_created': datetime.datetime(2021, 6, 9, 3, 21, 1, tzinfo=datetime.timezone.utc), 'commenter': 'DarthBenro008', 'type': 'User'}, {'comment_id': 647939219, 'comment_body': '@DarthBenro008 by clean arch. we define the handler as a service, but in this case you have created a service file which has all component based services. There are two options - \r\n\r\n* Either you can create a custom middleware for the services if you feel these functions cannot be a part of the service routines.\r\n\r\n*  If they can be then i would suggest to move this logic to the services itself and make them proper handlers.\r\n\r\nAny approach can be taken but routing package should not have the handler logic or the middleware logic. It can be kept as a simple router with mapping of routes and their corresponding handlers.', 'comment_created': datetime.datetime(2021, 6, 9, 3, 31, 1, tzinfo=datetime.timezone.utc), 'commenter': 'ishangupta-ds', 'type': 'User'}, {'comment_id': 647941057, 'comment_body': 'Changing the package name to handlers will be confusing for the people looking for the routing map in future.', 'comment_created': datetime.datetime(2021, 6, 9, 3, 36, 57, tzinfo=datetime.timezone.utc), 'commenter': 'ishangupta-ds', 'type': 'User'}, {'comment_id': 647951111, 'comment_body': 'IMO, If we use query params in `/update/details` and  `/update/password`, then having `PUT` method makes sense. Otherwise, It will not make any difference if we use  `POST`.\r\n\r\n', 'comment_created': datetime.datetime(2021, 6, 9, 4, 10, 54, tzinfo=datetime.timezone.utc), 'commenter': 'imrajdas', 'type': 'User'}, {'comment_id': 647953130, 'comment_body': 'I think there will be a problem if we remove trailing spaces from the password in the backend. Example- `password[space]         ` and `password` both will pass, if we remove trailing spaces.', 'comment_created': datetime.datetime(2021, 6, 9, 4, 17, 58, tzinfo=datetime.timezone.utc), 'commenter': 'imrajdas', 'type': 'User'}, {'comment_id': 647953926, 'comment_body': ""IMO. It's better to remove `omitempty` if the fields are compulsory. "", 'comment_created': datetime.datetime(2021, 6, 9, 4, 20, 47, tzinfo=datetime.timezone.utc), 'commenter': 'imrajdas', 'type': 'User'}, {'comment_id': 647954733, 'comment_body': ""Let's leave it as a POST request for now, we can update it later along with the frontend. "", 'comment_created': datetime.datetime(2021, 6, 9, 4, 23, 15, tzinfo=datetime.timezone.utc), 'commenter': 'SarthakJain26', 'type': 'User'}, {'comment_id': 647956902, 'comment_body': '![Screenshot from 2021-06-09 09-57-57](https://user-images.githubusercontent.com/45846277/121293454-4554b500-c909-11eb-8d5f-8ac8de377098.png)\r\n\r\nIDK how its happening, but my system autocorrects successful-ly to suddenly :sweat_smile: ', 'comment_created': datetime.datetime(2021, 6, 9, 4, 30, 30, tzinfo=datetime.timezone.utc), 'commenter': 'SarthakJain26', 'type': 'User'}, {'comment_id': 647957638, 'comment_body': 'IMO we should atleast sanitise/validate username. Currently frontend is not handling this ', 'comment_created': datetime.datetime(2021, 6, 9, 4, 33, 4, tzinfo=datetime.timezone.utc), 'commenter': 'SarthakJain26', 'type': 'User'}, {'comment_id': 647957895, 'comment_body': 'Yes, that can be done', 'comment_created': datetime.datetime(2021, 6, 9, 4, 33, 48, tzinfo=datetime.timezone.utc), 'commenter': 'imrajdas', 'type': 'User'}, {'comment_id': 647958969, 'comment_body': '![image](https://user-images.githubusercontent.com/31009634/121293898-112dc400-c90a-11eb-9202-63c9d6d4d17b.png)\r\n\r\n![image](https://user-images.githubusercontent.com/31009634/121293952-2c98cf00-c90a-11eb-94ff-6b388b07fa0b.png)\r\n\r\n\r\n\r\nI assumed by validation, we are talking solely about trailing spaces, which are handled by the front-end as shown above. Is there any additional regex/username constraints we need to abide by?', 'comment_created': datetime.datetime(2021, 6, 9, 4, 36, 51, tzinfo=datetime.timezone.utc), 'commenter': 'DarthBenro008', 'type': 'User'}, {'comment_id': 647972591, 'comment_body': '@ishangupta-ds given the options, I think I will take the Controller approach (i.e an API oriented package rather than a service-oriented package as those functions as Gin Handlers). I will call these ""controllers"" as ""handlers"" in the codebase as they as Gin Handler funcs after all. I do not want to make these service middlewares as they depend on the API that handles the request.\r\n\r\nAn example of UserRouter definition after the change:\r\n\r\n```go\r\nfunc UserRouter(router *gin.Engine, service user.Service) {\r\n\trouter.POST(""/login"", handlers.LoginUser(service))\r\n\trouter.Use(middleware.JwtMiddleware())\r\n\trouter.POST(""/update/password"", handlers.UpdatePassword(service))\r\n\trouter.POST(""/reset/password"", handlers.ResetPassword(service))\r\n\trouter.POST(""/create"", handlers.CreateUser(service))\r\n\trouter.POST(""/update/details"", handlers.UpdateUser(service))\r\n\trouter.GET(""/users"", handlers.FetchUsers(service))\r\n}\r\n``` \r\n\r\n', 'comment_created': datetime.datetime(2021, 6, 9, 5, 16, 32, tzinfo=datetime.timezone.utc), 'commenter': 'DarthBenro008', 'type': 'User'}, {'comment_id': 647975604, 'comment_body': 'There should not be spaces at the end. ""admin "" should be trimmed to ""admin""', 'comment_created': datetime.datetime(2021, 6, 9, 5, 24, 54, tzinfo=datetime.timezone.utc), 'commenter': 'SarthakJain26', 'type': 'User'}, {'comment_id': 647977837, 'comment_body': 'Ah, yes. We will need to add sanitisation. I was thinking should I create a middleware giving validation as well as sanitisation definitions for each route and pass it in the router. Something similar to [Joi](https://www.npmjs.com/package/joi) in the NodeJS world? Or would it be overkill for this project?\r\n\r\ncc: @rajdas98 @gdsoumya @ishangupta-ds \r\n', 'comment_created': datetime.datetime(2021, 6, 9, 5, 31, 5, tzinfo=datetime.timezone.utc), 'commenter': 'DarthBenro008', 'type': 'User'}, {'comment_id': 647986825, 'comment_body': 'Sure !', 'comment_created': datetime.datetime(2021, 6, 9, 5, 53, 36, tzinfo=datetime.timezone.utc), 'commenter': 'ishangupta-ds', 'type': 'User'}, {'comment_id': 648477164, 'comment_body': 'Why is this DBName in config and the collection and field names in the main file? Also the port can be moved to config @DarthBenro008 ', 'comment_created': datetime.datetime(2021, 6, 9, 16, 26, 9, tzinfo=datetime.timezone.utc), 'commenter': 'ishangupta-ds', 'type': 'User'}, {'comment_id': 648483465, 'comment_body': 'Oops :sweat_smile: , I had taken the reference from the current authentication server, hence followed the same. It has been moved to configs @ishangupta-ds ', 'comment_created': datetime.datetime(2021, 6, 9, 16, 34, 10, tzinfo=datetime.timezone.utc), 'commenter': 'DarthBenro008', 'type': 'User'}, {'comment_id': 648487747, 'comment_body': 'Do a â€˜gofmtâ€™ and also remove the extra line.', 'comment_created': datetime.datetime(2021, 6, 9, 16, 40, 5, tzinfo=datetime.timezone.utc), 'commenter': 'ishangupta-ds', 'type': 'User'}, {'comment_id': 648496306, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2021, 6, 9, 16, 51, 29, tzinfo=datetime.timezone.utc), 'commenter': 'DarthBenro008', 'type': 'User'}, {'comment_id': 652476344, 'comment_body': 'Trimming should happen before empty check, the empty check will allow "" "" data which would imply empty data after trimming.', 'comment_created': datetime.datetime(2021, 6, 16, 8, 39, tzinfo=datetime.timezone.utc), 'commenter': 'gdsoumya', 'type': 'User'}, {'comment_id': 652477534, 'comment_body': 'Same', 'comment_created': datetime.datetime(2021, 6, 16, 8, 40, 26, tzinfo=datetime.timezone.utc), 'commenter': 'gdsoumya', 'type': 'User'}, {'comment_id': 652479409, 'comment_body': 'Should we put the password length/chars verification to the backend? "" "" password is a valid one according to this. Depending on frontend for checks/validation is not okay because we might have CLIs and external integrations so every check should be done on backend too.', 'comment_created': datetime.datetime(2021, 6, 16, 8, 42, 45, tzinfo=datetime.timezone.utc), 'commenter': 'gdsoumya', 'type': 'User'}, {'comment_id': 652479729, 'comment_body': 'applies for every place that updates/sets the password', 'comment_created': datetime.datetime(2021, 6, 16, 8, 43, 9, tzinfo=datetime.timezone.utc), 'commenter': 'gdsoumya', 'type': 'User'}, {'comment_id': 652481303, 'comment_body': 'Where is adminUser used in this function?', 'comment_created': datetime.datetime(2021, 6, 16, 8, 45, 5, tzinfo=datetime.timezone.utc), 'commenter': 'gdsoumya', 'type': 'User'}, {'comment_id': 652491431, 'comment_body': 'Unnecessary check for username, this prohibits creation of multiple admin accounts(which we can in the future) the role should only be the qualifying parameter.', 'comment_created': datetime.datetime(2021, 6, 16, 8, 56, 49, tzinfo=datetime.timezone.utc), 'commenter': 'gdsoumya', 'type': 'User'}, {'comment_id': 654157043, 'comment_body': 'is there any specific length of password length we need to abide by, or is it anything >= 2 characters?', 'comment_created': datetime.datetime(2021, 6, 18, 5, 47, 8, tzinfo=datetime.timezone.utc), 'commenter': 'DarthBenro008', 'type': 'User'}, {'comment_id': 654164970, 'comment_body': ""can you check the frontend, if it's not there we should add a standard one. Will have to discuss this if it's missing currently"", 'comment_created': datetime.datetime(2021, 6, 18, 6, 8, 33, tzinfo=datetime.timezone.utc), 'commenter': 'gdsoumya', 'type': 'User'}, {'comment_id': 654756308, 'comment_body': '@gdsoumya , I checked the frontend repo. We apparently are not doing any extensive checks and are just checking if the length is >= 0.\r\n\r\nhttps://github.com/litmuschaos/litmus/blob/302c7051a03d4f6a75d0425eb0601150479d3ffa/litmus-portal/frontend/src/views/Settings/AccountsTab/AccountSettings/index.tsx#L62-L75\r\n', 'comment_created': datetime.datetime(2021, 6, 19, 6, 25, 16, tzinfo=datetime.timezone.utc), 'commenter': 'DarthBenro008', 'type': 'User'}, {'comment_id': 655089518, 'comment_body': ""@DarthBenro008 Good to add standard checks for validation of username. For passwords let it be this way, we don't want to impose any hard checks on passwords as of now. cc: @gdsoumya "", 'comment_created': datetime.datetime(2021, 6, 21, 5, 46, 42, tzinfo=datetime.timezone.utc), 'commenter': 'SarthakJain26', 'type': 'User'}, {'comment_id': 655093370, 'comment_body': 'Not sure if not imposing strict rules is a good idea need to discuss this', 'comment_created': datetime.datetime(2021, 6, 21, 5, 56, 52, tzinfo=datetime.timezone.utc), 'commenter': 'gdsoumya', 'type': 'User'}, {'comment_id': 655120847, 'comment_body': '@gdsoumya @SarthakJain26 So should we let this be as it is for the time being and create another issue related to this? As i think the conclusion of the discussion will require changes in both the places (the authentication back-end server as well as the frontend)', 'comment_created': datetime.datetime(2021, 6, 21, 6, 58, 33, tzinfo=datetime.timezone.utc), 'commenter': 'DarthBenro008', 'type': 'User'}, {'comment_id': 655131795, 'comment_body': 'We decided on adding a STRICT_PASSWORD_POLICY env var to the auth server, if this is set to true by the user the password policy will be used in the code else it will skip. ', 'comment_created': datetime.datetime(2021, 6, 21, 7, 18, 53, tzinfo=datetime.timezone.utc), 'commenter': 'gdsoumya', 'type': 'User'}, {'comment_id': 655132249, 'comment_body': 'By default it will be false. you will need to add the env var to the auth server manifest too', 'comment_created': datetime.datetime(2021, 6, 21, 7, 19, 43, tzinfo=datetime.timezone.utc), 'commenter': 'gdsoumya', 'type': 'User'}, {'comment_id': 655215696, 'comment_body': '@gdsoumya have we decided on the password policy? if so, could you please share it?', 'comment_created': datetime.datetime(2021, 6, 21, 9, 23, 34, tzinfo=datetime.timezone.utc), 'commenter': 'DarthBenro008', 'type': 'User'}, {'comment_id': 655228215, 'comment_body': 'I think this is good for now :\r\n1. at least 8 char long\r\n2. at least 1 special character, 1 uppercase ,1 lowercase letter and 1 digit\r\n\r\nAbstract the password policy check into a diff function so that it can be updated independently later.', 'comment_created': datetime.datetime(2021, 6, 21, 9, 41, 39, tzinfo=datetime.timezone.utc), 'commenter': 'gdsoumya', 'type': 'User'}, {'comment_id': 656909856, 'comment_body': 'should be `at least 8 chars...`', 'comment_created': datetime.datetime(2021, 6, 23, 9, 12, 20, tzinfo=datetime.timezone.utc), 'commenter': 'gdsoumya', 'type': 'User'}]","[{'commit_sha': 'a69bd9e41e6c08f1f1e5ef88f4c22210d66d6def', 'committer_username': 'DarthBenro008', 'committer_name': 'Hemanth Krishna', 'committer_email': 'hkpdev008@gmail.com', 'commit_date': datetime.datetime(2017, 8, 14, 14, 32, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '365c4dca6b7ca9f945f5b7c29b3f8c5d03015a29', 'committer_username': 'DarthBenro008', 'committer_name': 'Hemanth Krishna', 'committer_email': 'hkpdev008@gmail.com', 'commit_date': datetime.datetime(2017, 8, 14, 14, 32, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cad7630281073ab97d2b5985ff2bf669f1b24dcc', 'committer_username': 'DarthBenro008', 'committer_name': 'Hemanth Krishna', 'committer_email': 'hkpdev008@gmail.com', 'commit_date': datetime.datetime(2017, 8, 14, 14, 32, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab50680287d1db4ac2818748e03f6cb0971dec6e', 'committer_username': 'DarthBenro008', 'committer_name': 'Hemanth Krishna', 'committer_email': 'hkpdev008@gmail.com', 'commit_date': datetime.datetime(2017, 8, 14, 14, 32, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd570a2deda95f70b759f0349fca9832b02328a51', 'committer_username': 'DarthBenro008', 'committer_name': 'Hemanth Krishna', 'committer_email': 'hkpdev008@gmail.com', 'commit_date': datetime.datetime(2017, 8, 14, 14, 32, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57778fa0624edf235289d7647b8e1ae6198f0005', 'committer_username': 'DarthBenro008', 'committer_name': 'Hemanth Krishna', 'committer_email': 'hkpdev008@gmail.com', 'commit_date': datetime.datetime(2017, 8, 14, 14, 32, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19243e8880bf90acf4b2c23ce74c4e58aef88fdf', 'committer_username': 'DarthBenro008', 'committer_name': 'Hemanth Krishna', 'committer_email': 'hkpdev008@gmail.com', 'commit_date': datetime.datetime(2017, 8, 14, 14, 32, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d9d088dace10479bebc5fd127fcefcb9aefc207', 'committer_username': 'DarthBenro008', 'committer_name': 'Hemanth Krishna', 'committer_email': 'hkpdev008@gmail.com', 'commit_date': datetime.datetime(2017, 8, 14, 14, 32, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5594c971f21a5e08e55016f9a78c59624fc7181c', 'committer_username': 'DarthBenro008', 'committer_name': 'Hemanth Krishna', 'committer_email': 'hkpdev008@gmail.com', 'commit_date': datetime.datetime(2017, 8, 14, 14, 32, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce73a27151f693c83445edc4d00e232b6bd3b8e1', 'committer_username': 'DarthBenro008', 'committer_name': 'Hemanth Krishna', 'committer_email': 'hkpdev008@gmail.com', 'commit_date': datetime.datetime(2017, 8, 14, 14, 32, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '870e58ce51ac18cf0775908606485325bf00cccc', 'committer_username': 'DarthBenro008', 'committer_name': 'Hemanth Krishna', 'committer_email': 'hkpdev008@gmail.com', 'commit_date': datetime.datetime(2017, 8, 14, 14, 32, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7fd4a72fefb199350914198b8ceb30a31116359', 'committer_username': 'DarthBenro008', 'committer_name': 'Hemanth Krishna', 'committer_email': 'hkpdev008@gmail.com', 'commit_date': datetime.datetime(2017, 8, 14, 14, 32, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cfdced6f627997da2d25e5bc7c96fb1e929c272a', 'committer_username': 'DarthBenro008', 'committer_name': 'Hemanth Krishna', 'committer_email': 'hkpdev008@gmail.com', 'commit_date': datetime.datetime(2017, 8, 14, 14, 32, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f2bc777fa12594927fd28dd1a3b55e5adf34f7e', 'committer_username': 'DarthBenro008', 'committer_name': 'Hemanth Krishna', 'committer_email': 'hkpdev008@gmail.com', 'commit_date': datetime.datetime(2017, 8, 14, 14, 32, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '30d6409ead6e19e2caaa417708dcc31f823bf19c', 'committer_username': 'DarthBenro008', 'committer_name': 'Hemanth Krishna', 'committer_email': 'hkpdev008@gmail.com', 'commit_date': datetime.datetime(2017, 8, 14, 14, 32, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '29e649c7bda75a741edffc3506baf9aafd770578', 'committer_username': 'DarthBenro008', 'committer_name': 'Hemanth Krishna', 'committer_email': 'hkpdev008@gmail.com', 'commit_date': datetime.datetime(2017, 8, 14, 14, 32, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eeecfe77d989b85b5529e156a5efcc6cbe22158e', 'committer_username': 'DarthBenro008', 'committer_name': 'Hemanth Krishna', 'committer_email': 'hkpdev008@gmail.com', 'commit_date': datetime.datetime(2017, 8, 14, 14, 32, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9f33db1c29aafba3d2f34b359bae0384e5642c7', 'committer_username': 'DarthBenro008', 'committer_name': 'Hemanth Krishna', 'committer_email': 'hkpdev008@gmail.com', 'commit_date': datetime.datetime(2017, 8, 14, 14, 32, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3a961014f6c0d817666c453bcb7afc70832d7db', 'committer_username': 'DarthBenro008', 'committer_name': 'Hemanth Krishna', 'committer_email': 'hkpdev008@gmail.com', 'commit_date': datetime.datetime(2017, 8, 14, 14, 32, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dca4e545dc794264ccede5af66d5589955100e5f', 'committer_username': 'DarthBenro008', 'committer_name': 'Hemanth Krishna', 'committer_email': 'hkpdev008@gmail.com', 'commit_date': datetime.datetime(2017, 8, 14, 14, 32, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02b2ab015f218b713e9597502edf5877b657a22d', 'committer_username': 'DarthBenro008', 'committer_name': 'Hemanth Krishna', 'committer_email': 'hkpdev008@gmail.com', 'commit_date': datetime.datetime(2017, 8, 14, 14, 32, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36177639d797ce9b76a5f31cd01355b88e9fb65d', 'committer_username': 'DarthBenro008', 'committer_name': 'Hemanth Krishna', 'committer_email': 'hkpdev008@gmail.com', 'commit_date': datetime.datetime(2017, 8, 14, 14, 32, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a852c413d63a820fb9c0de34eea5925e00c2bc9', 'committer_username': 'DarthBenro008', 'committer_name': 'Hemanth Krishna', 'committer_email': 'hkpdev008@gmail.com', 'commit_date': datetime.datetime(2017, 8, 14, 14, 32, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d889ef2f3a19ae0fa625cc27b5d8286070b7725', 'committer_username': 'DarthBenro008', 'committer_name': 'Hemanth Krishna', 'committer_email': 'hkpdev008@gmail.com', 'commit_date': datetime.datetime(2017, 8, 14, 14, 32, 9, tzinfo=datetime.timezone.utc)}]",Hemanth Krishna,31009634,hkpdev008@gmail.com,User,,86,,36,183
663736409,refactor: litmus-portal authentication server,"# Authentication Server Refactor

> Part of #2483 and [GSoC Project](https://summerofcode.withgoogle.com/projects/#5058541729087488)

This PR comprehends a full re-write of litmus-portal's golang authentication server.

The server has been developed keeping in mind that the litmus-portal frontend does not need to make any change in request/response.

## Routes Included

| Type of Request 	|      Routes      	|               Functionality              	| Authorisation Required 	|
|-----------------	|:----------------:	|:----------------------------------------:	|------------------------	|
| POST            	| /login           	| Logs in the user and generates JWT Token 	| No                     	|
| GET             	| /users           	| Fetches all the users to be displayed    	| Yes                    	|
| POST            	| /create          	| Allows admin to create a user            	| Yes (with admin role)  	|
| POST            	| /update/password 	| Update password of logged in user        	| Yes                    	|
| POST            	| /reset/password  	| Allows admins to reset user's password   	| Yes (with admin role)  	|
| POST            	| /update/details  	| Allows user to update email and name     	| Yes                    	|

## Dependencies Used

```go
go 1.16
require (	
        github.com/dgrijalva/jwt-go v3.2.0+incompatible	
        github.com/gin-contrib/cors v1.3.1	
        github.com/gin-gonic/gin v1.7.2	
        github.com/sirupsen/logrus v1.4.2	
        go.mongodb.org/mongo-driver v1.5.3	
        golang.org/x/crypto v0.0.0-20210513164829-c07d793c2f9a
)
```

- [gin-gionic](https://github.com/gin-gonic/gin) 
- [mongo-driver](https://github.com/mongodb/mongo-go-driver)
- [logrus](https://github.com/sirupsen/logrus)
- [jwt-go](https://github.com/dgrijalva/jwt-go)

## Results

> The current authentication server and the re-written server were deployed on `Okteto` and tested

### Performance Gain

The current authentication server took **14 seconds** for an average response

![litmus_current_auth_marked](https://user-images.githubusercontent.com/31009634/121057340-cc583f00-c7dc-11eb-9635-0c17fc7851d4.png)


The re-written authentication server took **0.3 seconds** for an average response

![marked_new](https://user-images.githubusercontent.com/31009634/121057370-d37f4d00-c7dc-11eb-8ed2-9263ba697c2e.png)


> This is a boost in performance of almost `46 times` meanwhile keeping the functionality and the security the same.

### Easier Packaging of Code

The packages and folders have been completely simplified. Everything in the codebase has been decoupled for easier development and access.

Before: 
![old_directory](https://user-images.githubusercontent.com/31009634/121058281-cadb4680-c7dd-11eb-95c0-b4ac3a90f159.png)


After:
![new_directory](https://user-images.githubusercontent.com/31009634/121058256-c3b43880-c7dd-11eb-8744-d352c93b316f.png)


## Try out

You can find this codebase deployed on https://litmusportal-production-frontend-service-darthbenro008.cloud.okteto.net/ 
Username: `admin`
Password: `litmus`

Alternatively, you can also deploy this codebase on your own `Okteto Cluster` by [clicking here](https://cloud.okteto.com/#/deploy?repository=https://github.com/DarthBenro008/litmus&branch=okteto-testing) 

## ToDo
- Unit Testing and DB Mocking
",True,2867,https://api.github.com/repos/litmuschaos/litmus/pulls/2867,https://github.com/litmuschaos/litmus/pull/2867,closed,900,1744,40,24,4,64,2,0,"[{'name': 'area/litmus-portal'}, {'name': 'size/XXL'}]",2021-06-07 16:51:47+00:00,2021-06-23 10:06:11+00:00,1358064.0,"15 days, 17:14:24","[{'comment_id': 647317542, 'comment_body': 'Any specific reason for using POST instead of PUT  in update query?', 'comment_created': datetime.datetime(2021, 6, 8, 10, 33, 14, tzinfo=datetime.timezone.utc), 'commenter': 'SarthakJain26', 'type': 'User'}, {'comment_id': 647727593, 'comment_body': 'Typo, JW_SECRET -> JWT_SECRET', 'comment_created': datetime.datetime(2021, 6, 8, 19, 17, 32, tzinfo=datetime.timezone.utc), 'commenter': 'SarthakJain26', 'type': 'User'}, {'comment_id': 647733181, 'comment_body': 'Email is an optional field. It can be empty', 'comment_created': datetime.datetime(2021, 6, 8, 19, 26, 36, tzinfo=datetime.timezone.utc), 'commenter': 'SarthakJain26', 'type': 'User'}, {'comment_id': 647760768, 'comment_body': 'Better to sanitize the data before authenticating, so that trailing spaces could be trimmed', 'comment_created': datetime.datetime(2021, 6, 8, 20, 12, 34, tzinfo=datetime.timezone.utc), 'commenter': 'SarthakJain26', 'type': 'User'}, {'comment_id': 647766568, 'comment_body': 'Better to sanitize the data before creating, so that trailing spaces could be trimmed', 'comment_created': datetime.datetime(2021, 6, 8, 20, 22, 4, tzinfo=datetime.timezone.utc), 'commenter': 'SarthakJain26', 'type': 'User'}, {'comment_id': 647774263, 'comment_body': 'Typo: suddenly -> successfully ', 'comment_created': datetime.datetime(2021, 6, 8, 20, 34, 33, tzinfo=datetime.timezone.utc), 'commenter': 'SarthakJain26', 'type': 'User'}, {'comment_id': 647780369, 'comment_body': 'Should we use omitempty with ID, UserName, Role and Password? These fields will/should never be nil :thinking: ', 'comment_created': datetime.datetime(2021, 6, 8, 20, 44, 47, tzinfo=datetime.timezone.utc), 'commenter': 'SarthakJain26', 'type': 'User'}, {'comment_id': 647780739, 'comment_body': 'Same as above\r\n', 'comment_created': datetime.datetime(2021, 6, 8, 20, 45, 23, tzinfo=datetime.timezone.utc), 'commenter': 'SarthakJain26', 'type': 'User'}, {'comment_id': 647909878, 'comment_body': 'Changing the protocol will required changes from the frontend and as mentioned above, the server was re-written keeping in mind that there should be no changes in request/response as in the current authentication-server used by litmus-frontend. I would prefer PUT over POST. Had to choose PUT to avoid further changes in litmus-frontend.', 'comment_created': datetime.datetime(2021, 6, 9, 1, 56, 38, tzinfo=datetime.timezone.utc), 'commenter': 'DarthBenro008', 'type': 'User'}, {'comment_id': 647909993, 'comment_body': 'Will amend this.', 'comment_created': datetime.datetime(2021, 6, 9, 1, 57, 3, tzinfo=datetime.timezone.utc), 'commenter': 'DarthBenro008', 'type': 'User'}, {'comment_id': 647912102, 'comment_body': ""- We do not want to send Password while sending responses for `/users` GET route, hence omitempty is required.\r\n- I agree ID, UserName, Role are never be nil and is guaranteed from the server's side as there are validations and checks.\r\n- but `omitempty` is significant only when we are de-serialising the json/bson. Hence I think there is no difference if we write or do not write `omitempty`"", 'comment_created': datetime.datetime(2021, 6, 9, 2, 3, 32, tzinfo=datetime.timezone.utc), 'commenter': 'DarthBenro008', 'type': 'User'}, {'comment_id': 647912466, 'comment_body': '- The `/reset/password` POST route does not send a `Username`, hence `omitempty` is required ', 'comment_created': datetime.datetime(2021, 6, 9, 2, 4, 43, tzinfo=datetime.timezone.utc), 'commenter': 'DarthBenro008', 'type': 'User'}, {'comment_id': 647913024, 'comment_body': 'I do not seem to find the mentioned typo anywhere ðŸ˜… ', 'comment_created': datetime.datetime(2021, 6, 9, 2, 6, 41, tzinfo=datetime.timezone.utc), 'commenter': 'DarthBenro008', 'type': 'User'}, {'comment_id': 647922614, 'comment_body': 'The `litmus-frontend` already does this. As this a specific use-case API (only used by litmus-frontend), we can choose to avoid sanitisation of input data in favour to not add an additional dependency.', 'comment_created': datetime.datetime(2021, 6, 9, 2, 37, 2, tzinfo=datetime.timezone.utc), 'commenter': 'DarthBenro008', 'type': 'User'}, {'comment_id': 647925851, 'comment_body': '@DarthBenro008 its better to change this cc: @rajdas98 @gdsoumya ', 'comment_created': datetime.datetime(2021, 6, 9, 2, 47, 20, tzinfo=datetime.timezone.utc), 'commenter': 'ishangupta-ds', 'type': 'User'}, {'comment_id': 647927062, 'comment_body': ""@ishangupta-ds , I would like to confirm,  both the `/update/details` and `/update/password` routes would have `PUT` requests if we will be going ahead with it? \r\n\r\n## New Routes Table\r\n\r\n| Type of Request \t|      Routes      \t|               Functionality              \t| Authorisation Required \t|\r\n|-----------------\t|:----------------:\t|:----------------------------------------:\t|------------------------\t|\r\n| POST            \t| /login           \t| Logs in the user and generates JWT Token \t| No                     \t|\r\n| GET             \t| /users           \t| Fetches all the users to be displayed    \t| Yes                    \t|\r\n| POST            \t| /create          \t| Allows admin to create a user            \t| Yes (with admin role)  \t|\r\n| **PUT**            \t| /update/password \t| Update password of logged in user        \t| Yes                    \t|\r\n| POST            \t| /reset/password  \t| Allows admins to reset user's password   \t| Yes (with admin role)  \t|\r\n| **PUT**            \t| /update/details  \t| Allows user to update email and name     \t| Yes                    \t|\r\n"", 'comment_created': datetime.datetime(2021, 6, 9, 2, 50, 55, tzinfo=datetime.timezone.utc), 'commenter': 'DarthBenro008', 'type': 'User'}, {'comment_id': 647930157, 'comment_body': 'Ideally both should be updated @DarthBenro008 , awaiting comments from @rajdas98 and @gdsoumya too.', 'comment_created': datetime.datetime(2021, 6, 9, 3, 0, 21, tzinfo=datetime.timezone.utc), 'commenter': 'ishangupta-ds', 'type': 'User'}, {'comment_id': 647931059, 'comment_body': 'Handlers / controllers like this could have been placed in a separate file, this file can be kept just for all the routes. @DarthBenro008 ', 'comment_created': datetime.datetime(2021, 6, 9, 3, 3, 13, tzinfo=datetime.timezone.utc), 'commenter': 'ishangupta-ds', 'type': 'User'}, {'comment_id': 647932221, 'comment_body': 'should it not be for 24 hours?', 'comment_created': datetime.datetime(2021, 6, 9, 3, 7, 5, tzinfo=datetime.timezone.utc), 'commenter': 'ishangupta-ds', 'type': 'User'}, {'comment_id': 647932575, 'comment_body': 'Have you formatted using `gofmt` ?', 'comment_created': datetime.datetime(2021, 6, 9, 3, 8, 10, tzinfo=datetime.timezone.utc), 'commenter': 'ishangupta-ds', 'type': 'User'}, {'comment_id': 647933723, 'comment_body': 'Declare the collection name and field name as constants, then use.', 'comment_created': datetime.datetime(2021, 6, 9, 3, 12, 14, tzinfo=datetime.timezone.utc), 'commenter': 'ishangupta-ds', 'type': 'User'}, {'comment_id': 647933771, 'comment_body': 'same for this', 'comment_created': datetime.datetime(2021, 6, 9, 3, 12, 23, tzinfo=datetime.timezone.utc), 'commenter': 'ishangupta-ds', 'type': 'User'}, {'comment_id': 647934824, 'comment_body': 'Yes, the whole project has been linted using `gofmt`', 'comment_created': datetime.datetime(2021, 6, 9, 3, 15, 53, tzinfo=datetime.timezone.utc), 'commenter': 'DarthBenro008', 'type': 'User'}, {'comment_id': 647935259, 'comment_body': 'Oh, yes. It ideally should be 24 hours. Should we allow the user to set this via `env` or should we just change the multiplier to 1440 from 300?', 'comment_created': datetime.datetime(2021, 6, 9, 3, 17, 28, tzinfo=datetime.timezone.utc), 'commenter': 'DarthBenro008', 'type': 'User'}, {'comment_id': 647935618, 'comment_body': 'Use an env var @DarthBenro008 ', 'comment_created': datetime.datetime(2021, 6, 9, 3, 18, 54, tzinfo=datetime.timezone.utc), 'commenter': 'ishangupta-ds', 'type': 'User'}, {'comment_id': 647936149, 'comment_body': 'Const ', 'comment_created': datetime.datetime(2021, 6, 9, 3, 20, 41, tzinfo=datetime.timezone.utc), 'commenter': 'ishangupta-ds', 'type': 'User'}, {'comment_id': 647936245, 'comment_body': ""I do not want to export these functions (handlers) and make sure it's available under the same package and to the API only. The code architecture is highly inspired by Clean Architecture. Maybe the package name `routes` is misleading and could be changed to `handlers` instead?"", 'comment_created': datetime.datetime(2021, 6, 9, 3, 21, 1, tzinfo=datetime.timezone.utc), 'commenter': 'DarthBenro008', 'type': 'User'}, {'comment_id': 647939219, 'comment_body': '@DarthBenro008 by clean arch. we define the handler as a service, but in this case you have created a service file which has all component based services. There are two options - \r\n\r\n* Either you can create a custom middleware for the services if you feel these functions cannot be a part of the service routines.\r\n\r\n*  If they can be then i would suggest to move this logic to the services itself and make them proper handlers.\r\n\r\nAny approach can be taken but routing package should not have the handler logic or the middleware logic. It can be kept as a simple router with mapping of routes and their corresponding handlers.', 'comment_created': datetime.datetime(2021, 6, 9, 3, 31, 1, tzinfo=datetime.timezone.utc), 'commenter': 'ishangupta-ds', 'type': 'User'}, {'comment_id': 647941057, 'comment_body': 'Changing the package name to handlers will be confusing for the people looking for the routing map in future.', 'comment_created': datetime.datetime(2021, 6, 9, 3, 36, 57, tzinfo=datetime.timezone.utc), 'commenter': 'ishangupta-ds', 'type': 'User'}, {'comment_id': 647951111, 'comment_body': 'IMO, If we use query params in `/update/details` and  `/update/password`, then having `PUT` method makes sense. Otherwise, It will not make any difference if we use  `POST`.\r\n\r\n', 'comment_created': datetime.datetime(2021, 6, 9, 4, 10, 54, tzinfo=datetime.timezone.utc), 'commenter': 'imrajdas', 'type': 'User'}, {'comment_id': 647953130, 'comment_body': 'I think there will be a problem if we remove trailing spaces from the password in the backend. Example- `password[space]         ` and `password` both will pass, if we remove trailing spaces.', 'comment_created': datetime.datetime(2021, 6, 9, 4, 17, 58, tzinfo=datetime.timezone.utc), 'commenter': 'imrajdas', 'type': 'User'}, {'comment_id': 647953926, 'comment_body': ""IMO. It's better to remove `omitempty` if the fields are compulsory. "", 'comment_created': datetime.datetime(2021, 6, 9, 4, 20, 47, tzinfo=datetime.timezone.utc), 'commenter': 'imrajdas', 'type': 'User'}, {'comment_id': 647954733, 'comment_body': ""Let's leave it as a POST request for now, we can update it later along with the frontend. "", 'comment_created': datetime.datetime(2021, 6, 9, 4, 23, 15, tzinfo=datetime.timezone.utc), 'commenter': 'SarthakJain26', 'type': 'User'}, {'comment_id': 647956902, 'comment_body': '![Screenshot from 2021-06-09 09-57-57](https://user-images.githubusercontent.com/45846277/121293454-4554b500-c909-11eb-8d5f-8ac8de377098.png)\r\n\r\nIDK how its happening, but my system autocorrects successful-ly to suddenly :sweat_smile: ', 'comment_created': datetime.datetime(2021, 6, 9, 4, 30, 30, tzinfo=datetime.timezone.utc), 'commenter': 'SarthakJain26', 'type': 'User'}, {'comment_id': 647957638, 'comment_body': 'IMO we should atleast sanitise/validate username. Currently frontend is not handling this ', 'comment_created': datetime.datetime(2021, 6, 9, 4, 33, 4, tzinfo=datetime.timezone.utc), 'commenter': 'SarthakJain26', 'type': 'User'}, {'comment_id': 647957895, 'comment_body': 'Yes, that can be done', 'comment_created': datetime.datetime(2021, 6, 9, 4, 33, 48, tzinfo=datetime.timezone.utc), 'commenter': 'imrajdas', 'type': 'User'}, {'comment_id': 647958969, 'comment_body': '![image](https://user-images.githubusercontent.com/31009634/121293898-112dc400-c90a-11eb-9202-63c9d6d4d17b.png)\r\n\r\n![image](https://user-images.githubusercontent.com/31009634/121293952-2c98cf00-c90a-11eb-94ff-6b388b07fa0b.png)\r\n\r\n\r\n\r\nI assumed by validation, we are talking solely about trailing spaces, which are handled by the front-end as shown above. Is there any additional regex/username constraints we need to abide by?', 'comment_created': datetime.datetime(2021, 6, 9, 4, 36, 51, tzinfo=datetime.timezone.utc), 'commenter': 'DarthBenro008', 'type': 'User'}, {'comment_id': 647972591, 'comment_body': '@ishangupta-ds given the options, I think I will take the Controller approach (i.e an API oriented package rather than a service-oriented package as those functions as Gin Handlers). I will call these ""controllers"" as ""handlers"" in the codebase as they as Gin Handler funcs after all. I do not want to make these service middlewares as they depend on the API that handles the request.\r\n\r\nAn example of UserRouter definition after the change:\r\n\r\n```go\r\nfunc UserRouter(router *gin.Engine, service user.Service) {\r\n\trouter.POST(""/login"", handlers.LoginUser(service))\r\n\trouter.Use(middleware.JwtMiddleware())\r\n\trouter.POST(""/update/password"", handlers.UpdatePassword(service))\r\n\trouter.POST(""/reset/password"", handlers.ResetPassword(service))\r\n\trouter.POST(""/create"", handlers.CreateUser(service))\r\n\trouter.POST(""/update/details"", handlers.UpdateUser(service))\r\n\trouter.GET(""/users"", handlers.FetchUsers(service))\r\n}\r\n``` \r\n\r\n', 'comment_created': datetime.datetime(2021, 6, 9, 5, 16, 32, tzinfo=datetime.timezone.utc), 'commenter': 'DarthBenro008', 'type': 'User'}, {'comment_id': 647975604, 'comment_body': 'There should not be spaces at the end. ""admin "" should be trimmed to ""admin""', 'comment_created': datetime.datetime(2021, 6, 9, 5, 24, 54, tzinfo=datetime.timezone.utc), 'commenter': 'SarthakJain26', 'type': 'User'}, {'comment_id': 647977837, 'comment_body': 'Ah, yes. We will need to add sanitisation. I was thinking should I create a middleware giving validation as well as sanitisation definitions for each route and pass it in the router. Something similar to [Joi](https://www.npmjs.com/package/joi) in the NodeJS world? Or would it be overkill for this project?\r\n\r\ncc: @rajdas98 @gdsoumya @ishangupta-ds \r\n', 'comment_created': datetime.datetime(2021, 6, 9, 5, 31, 5, tzinfo=datetime.timezone.utc), 'commenter': 'DarthBenro008', 'type': 'User'}, {'comment_id': 647986825, 'comment_body': 'Sure !', 'comment_created': datetime.datetime(2021, 6, 9, 5, 53, 36, tzinfo=datetime.timezone.utc), 'commenter': 'ishangupta-ds', 'type': 'User'}, {'comment_id': 648477164, 'comment_body': 'Why is this DBName in config and the collection and field names in the main file? Also the port can be moved to config @DarthBenro008 ', 'comment_created': datetime.datetime(2021, 6, 9, 16, 26, 9, tzinfo=datetime.timezone.utc), 'commenter': 'ishangupta-ds', 'type': 'User'}, {'comment_id': 648483465, 'comment_body': 'Oops :sweat_smile: , I had taken the reference from the current authentication server, hence followed the same. It has been moved to configs @ishangupta-ds ', 'comment_created': datetime.datetime(2021, 6, 9, 16, 34, 10, tzinfo=datetime.timezone.utc), 'commenter': 'DarthBenro008', 'type': 'User'}, {'comment_id': 648487747, 'comment_body': 'Do a â€˜gofmtâ€™ and also remove the extra line.', 'comment_created': datetime.datetime(2021, 6, 9, 16, 40, 5, tzinfo=datetime.timezone.utc), 'commenter': 'ishangupta-ds', 'type': 'User'}, {'comment_id': 648496306, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2021, 6, 9, 16, 51, 29, tzinfo=datetime.timezone.utc), 'commenter': 'DarthBenro008', 'type': 'User'}, {'comment_id': 652476344, 'comment_body': 'Trimming should happen before empty check, the empty check will allow "" "" data which would imply empty data after trimming.', 'comment_created': datetime.datetime(2021, 6, 16, 8, 39, tzinfo=datetime.timezone.utc), 'commenter': 'gdsoumya', 'type': 'User'}, {'comment_id': 652477534, 'comment_body': 'Same', 'comment_created': datetime.datetime(2021, 6, 16, 8, 40, 26, tzinfo=datetime.timezone.utc), 'commenter': 'gdsoumya', 'type': 'User'}, {'comment_id': 652479409, 'comment_body': 'Should we put the password length/chars verification to the backend? "" "" password is a valid one according to this. Depending on frontend for checks/validation is not okay because we might have CLIs and external integrations so every check should be done on backend too.', 'comment_created': datetime.datetime(2021, 6, 16, 8, 42, 45, tzinfo=datetime.timezone.utc), 'commenter': 'gdsoumya', 'type': 'User'}, {'comment_id': 652479729, 'comment_body': 'applies for every place that updates/sets the password', 'comment_created': datetime.datetime(2021, 6, 16, 8, 43, 9, tzinfo=datetime.timezone.utc), 'commenter': 'gdsoumya', 'type': 'User'}, {'comment_id': 652481303, 'comment_body': 'Where is adminUser used in this function?', 'comment_created': datetime.datetime(2021, 6, 16, 8, 45, 5, tzinfo=datetime.timezone.utc), 'commenter': 'gdsoumya', 'type': 'User'}, {'comment_id': 652491431, 'comment_body': 'Unnecessary check for username, this prohibits creation of multiple admin accounts(which we can in the future) the role should only be the qualifying parameter.', 'comment_created': datetime.datetime(2021, 6, 16, 8, 56, 49, tzinfo=datetime.timezone.utc), 'commenter': 'gdsoumya', 'type': 'User'}, {'comment_id': 654157043, 'comment_body': 'is there any specific length of password length we need to abide by, or is it anything >= 2 characters?', 'comment_created': datetime.datetime(2021, 6, 18, 5, 47, 8, tzinfo=datetime.timezone.utc), 'commenter': 'DarthBenro008', 'type': 'User'}, {'comment_id': 654164970, 'comment_body': ""can you check the frontend, if it's not there we should add a standard one. Will have to discuss this if it's missing currently"", 'comment_created': datetime.datetime(2021, 6, 18, 6, 8, 33, tzinfo=datetime.timezone.utc), 'commenter': 'gdsoumya', 'type': 'User'}, {'comment_id': 654756308, 'comment_body': '@gdsoumya , I checked the frontend repo. We apparently are not doing any extensive checks and are just checking if the length is >= 0.\r\n\r\nhttps://github.com/litmuschaos/litmus/blob/302c7051a03d4f6a75d0425eb0601150479d3ffa/litmus-portal/frontend/src/views/Settings/AccountsTab/AccountSettings/index.tsx#L62-L75\r\n', 'comment_created': datetime.datetime(2021, 6, 19, 6, 25, 16, tzinfo=datetime.timezone.utc), 'commenter': 'DarthBenro008', 'type': 'User'}, {'comment_id': 655089518, 'comment_body': ""@DarthBenro008 Good to add standard checks for validation of username. For passwords let it be this way, we don't want to impose any hard checks on passwords as of now. cc: @gdsoumya "", 'comment_created': datetime.datetime(2021, 6, 21, 5, 46, 42, tzinfo=datetime.timezone.utc), 'commenter': 'SarthakJain26', 'type': 'User'}, {'comment_id': 655093370, 'comment_body': 'Not sure if not imposing strict rules is a good idea need to discuss this', 'comment_created': datetime.datetime(2021, 6, 21, 5, 56, 52, tzinfo=datetime.timezone.utc), 'commenter': 'gdsoumya', 'type': 'User'}, {'comment_id': 655120847, 'comment_body': '@gdsoumya @SarthakJain26 So should we let this be as it is for the time being and create another issue related to this? As i think the conclusion of the discussion will require changes in both the places (the authentication back-end server as well as the frontend)', 'comment_created': datetime.datetime(2021, 6, 21, 6, 58, 33, tzinfo=datetime.timezone.utc), 'commenter': 'DarthBenro008', 'type': 'User'}, {'comment_id': 655131795, 'comment_body': 'We decided on adding a STRICT_PASSWORD_POLICY env var to the auth server, if this is set to true by the user the password policy will be used in the code else it will skip. ', 'comment_created': datetime.datetime(2021, 6, 21, 7, 18, 53, tzinfo=datetime.timezone.utc), 'commenter': 'gdsoumya', 'type': 'User'}, {'comment_id': 655132249, 'comment_body': 'By default it will be false. you will need to add the env var to the auth server manifest too', 'comment_created': datetime.datetime(2021, 6, 21, 7, 19, 43, tzinfo=datetime.timezone.utc), 'commenter': 'gdsoumya', 'type': 'User'}, {'comment_id': 655215696, 'comment_body': '@gdsoumya have we decided on the password policy? if so, could you please share it?', 'comment_created': datetime.datetime(2021, 6, 21, 9, 23, 34, tzinfo=datetime.timezone.utc), 'commenter': 'DarthBenro008', 'type': 'User'}, {'comment_id': 655228215, 'comment_body': 'I think this is good for now :\r\n1. at least 8 char long\r\n2. at least 1 special character, 1 uppercase ,1 lowercase letter and 1 digit\r\n\r\nAbstract the password policy check into a diff function so that it can be updated independently later.', 'comment_created': datetime.datetime(2021, 6, 21, 9, 41, 39, tzinfo=datetime.timezone.utc), 'commenter': 'gdsoumya', 'type': 'User'}, {'comment_id': 656909856, 'comment_body': 'should be `at least 8 chars...`', 'comment_created': datetime.datetime(2021, 6, 23, 9, 12, 20, tzinfo=datetime.timezone.utc), 'commenter': 'gdsoumya', 'type': 'User'}]","[{'commit_sha': 'a69bd9e41e6c08f1f1e5ef88f4c22210d66d6def', 'committer_username': 'DarthBenro008', 'committer_name': 'Hemanth Krishna', 'committer_email': 'hkpdev008@gmail.com', 'commit_date': datetime.datetime(2017, 8, 14, 14, 32, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '365c4dca6b7ca9f945f5b7c29b3f8c5d03015a29', 'committer_username': 'DarthBenro008', 'committer_name': 'Hemanth Krishna', 'committer_email': 'hkpdev008@gmail.com', 'commit_date': datetime.datetime(2017, 8, 14, 14, 32, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cad7630281073ab97d2b5985ff2bf669f1b24dcc', 'committer_username': 'DarthBenro008', 'committer_name': 'Hemanth Krishna', 'committer_email': 'hkpdev008@gmail.com', 'commit_date': datetime.datetime(2017, 8, 14, 14, 32, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab50680287d1db4ac2818748e03f6cb0971dec6e', 'committer_username': 'DarthBenro008', 'committer_name': 'Hemanth Krishna', 'committer_email': 'hkpdev008@gmail.com', 'commit_date': datetime.datetime(2017, 8, 14, 14, 32, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd570a2deda95f70b759f0349fca9832b02328a51', 'committer_username': 'DarthBenro008', 'committer_name': 'Hemanth Krishna', 'committer_email': 'hkpdev008@gmail.com', 'commit_date': datetime.datetime(2017, 8, 14, 14, 32, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57778fa0624edf235289d7647b8e1ae6198f0005', 'committer_username': 'DarthBenro008', 'committer_name': 'Hemanth Krishna', 'committer_email': 'hkpdev008@gmail.com', 'commit_date': datetime.datetime(2017, 8, 14, 14, 32, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19243e8880bf90acf4b2c23ce74c4e58aef88fdf', 'committer_username': 'DarthBenro008', 'committer_name': 'Hemanth Krishna', 'committer_email': 'hkpdev008@gmail.com', 'commit_date': datetime.datetime(2017, 8, 14, 14, 32, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d9d088dace10479bebc5fd127fcefcb9aefc207', 'committer_username': 'DarthBenro008', 'committer_name': 'Hemanth Krishna', 'committer_email': 'hkpdev008@gmail.com', 'commit_date': datetime.datetime(2017, 8, 14, 14, 32, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5594c971f21a5e08e55016f9a78c59624fc7181c', 'committer_username': 'DarthBenro008', 'committer_name': 'Hemanth Krishna', 'committer_email': 'hkpdev008@gmail.com', 'commit_date': datetime.datetime(2017, 8, 14, 14, 32, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce73a27151f693c83445edc4d00e232b6bd3b8e1', 'committer_username': 'DarthBenro008', 'committer_name': 'Hemanth Krishna', 'committer_email': 'hkpdev008@gmail.com', 'commit_date': datetime.datetime(2017, 8, 14, 14, 32, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '870e58ce51ac18cf0775908606485325bf00cccc', 'committer_username': 'DarthBenro008', 'committer_name': 'Hemanth Krishna', 'committer_email': 'hkpdev008@gmail.com', 'commit_date': datetime.datetime(2017, 8, 14, 14, 32, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7fd4a72fefb199350914198b8ceb30a31116359', 'committer_username': 'DarthBenro008', 'committer_name': 'Hemanth Krishna', 'committer_email': 'hkpdev008@gmail.com', 'commit_date': datetime.datetime(2017, 8, 14, 14, 32, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cfdced6f627997da2d25e5bc7c96fb1e929c272a', 'committer_username': 'DarthBenro008', 'committer_name': 'Hemanth Krishna', 'committer_email': 'hkpdev008@gmail.com', 'commit_date': datetime.datetime(2017, 8, 14, 14, 32, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f2bc777fa12594927fd28dd1a3b55e5adf34f7e', 'committer_username': 'DarthBenro008', 'committer_name': 'Hemanth Krishna', 'committer_email': 'hkpdev008@gmail.com', 'commit_date': datetime.datetime(2017, 8, 14, 14, 32, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '30d6409ead6e19e2caaa417708dcc31f823bf19c', 'committer_username': 'DarthBenro008', 'committer_name': 'Hemanth Krishna', 'committer_email': 'hkpdev008@gmail.com', 'commit_date': datetime.datetime(2017, 8, 14, 14, 32, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '29e649c7bda75a741edffc3506baf9aafd770578', 'committer_username': 'DarthBenro008', 'committer_name': 'Hemanth Krishna', 'committer_email': 'hkpdev008@gmail.com', 'commit_date': datetime.datetime(2017, 8, 14, 14, 32, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eeecfe77d989b85b5529e156a5efcc6cbe22158e', 'committer_username': 'DarthBenro008', 'committer_name': 'Hemanth Krishna', 'committer_email': 'hkpdev008@gmail.com', 'commit_date': datetime.datetime(2017, 8, 14, 14, 32, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9f33db1c29aafba3d2f34b359bae0384e5642c7', 'committer_username': 'DarthBenro008', 'committer_name': 'Hemanth Krishna', 'committer_email': 'hkpdev008@gmail.com', 'commit_date': datetime.datetime(2017, 8, 14, 14, 32, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3a961014f6c0d817666c453bcb7afc70832d7db', 'committer_username': 'DarthBenro008', 'committer_name': 'Hemanth Krishna', 'committer_email': 'hkpdev008@gmail.com', 'commit_date': datetime.datetime(2017, 8, 14, 14, 32, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dca4e545dc794264ccede5af66d5589955100e5f', 'committer_username': 'DarthBenro008', 'committer_name': 'Hemanth Krishna', 'committer_email': 'hkpdev008@gmail.com', 'commit_date': datetime.datetime(2017, 8, 14, 14, 32, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02b2ab015f218b713e9597502edf5877b657a22d', 'committer_username': 'DarthBenro008', 'committer_name': 'Hemanth Krishna', 'committer_email': 'hkpdev008@gmail.com', 'commit_date': datetime.datetime(2017, 8, 14, 14, 32, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36177639d797ce9b76a5f31cd01355b88e9fb65d', 'committer_username': 'DarthBenro008', 'committer_name': 'Hemanth Krishna', 'committer_email': 'hkpdev008@gmail.com', 'commit_date': datetime.datetime(2017, 8, 14, 14, 32, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a852c413d63a820fb9c0de34eea5925e00c2bc9', 'committer_username': 'DarthBenro008', 'committer_name': 'Hemanth Krishna', 'committer_email': 'hkpdev008@gmail.com', 'commit_date': datetime.datetime(2017, 8, 14, 14, 32, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d889ef2f3a19ae0fa625cc27b5d8286070b7725', 'committer_username': 'DarthBenro008', 'committer_name': 'Hemanth Krishna', 'committer_email': 'hkpdev008@gmail.com', 'commit_date': datetime.datetime(2017, 8, 14, 14, 32, 9, tzinfo=datetime.timezone.utc)}]",Hemanth Krishna,31009634,hkpdev008@gmail.com,User,,86,,36,183

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
85039965,litmus,litmuschaos/litmus,Go,677,4329,73,230,2912,373,72,41,"[{'id': 753370190, 'number': 3269, 'closed': datetime.datetime(2021, 10, 19, 13, 26, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 7, 16, 56, 41, tzinfo=datetime.timezone.utc), 'time_taken': 1024217.0, 'time_delta': '11 days, 20:30:17', 'additions': 37, 'deletions': 1, 'state': 'closed'}, {'id': 752875523, 'number': 3265, 'closed': datetime.datetime(2021, 10, 7, 13, 20, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 7, 6, 40, 51, tzinfo=datetime.timezone.utc), 'time_taken': 23999.0, 'time_delta': '6:39:59', 'additions': 110, 'deletions': 0, 'state': 'closed'}, {'id': 747211138, 'number': 3244, 'closed': datetime.datetime(2021, 10, 4, 6, 11, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 1, 3, 8, 29, tzinfo=datetime.timezone.utc), 'time_taken': 270204.0, 'time_delta': '3 days, 3:03:24', 'additions': 897, 'deletions': 0, 'state': 'closed'}, {'id': 747207781, 'number': 3243, 'closed': datetime.datetime(2021, 10, 7, 5, 27, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 1, 3, 2, 25, tzinfo=datetime.timezone.utc), 'time_taken': 527103.0, 'time_delta': '6 days, 2:25:03', 'additions': 24, 'deletions': 13, 'state': 'closed'}, {'id': 747206221, 'number': 3242, 'closed': datetime.datetime(2021, 10, 7, 5, 8, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 1, 2, 59, 45, tzinfo=datetime.timezone.utc), 'time_taken': 526150.0, 'time_delta': '6 days, 2:09:10', 'additions': 554, 'deletions': 4, 'state': 'closed'}, {'id': 688530410, 'number': 2997, 'closed': datetime.datetime(2021, 7, 13, 6, 42, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 13, 6, 39, 11, tzinfo=datetime.timezone.utc), 'time_taken': 172.0, 'time_delta': '0:02:52', 'additions': 5, 'deletions': 4, 'state': 'closed'}, {'id': 663736409, 'number': 2867, 'closed': datetime.datetime(2021, 6, 23, 10, 6, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 7, 16, 51, 47, tzinfo=datetime.timezone.utc), 'time_taken': 1358064.0, 'time_delta': '15 days, 17:14:24', 'additions': 900, 'deletions': 1744, 'state': 'closed'}, {'id': 643160832, 'number': 2794, 'closed': datetime.datetime(2021, 5, 15, 7, 42, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 12, 13, 24, 1, tzinfo=datetime.timezone.utc), 'time_taken': 238718.0, 'time_delta': '2 days, 18:18:38', 'additions': 0, 'deletions': 0, 'state': 'closed'}, {'id': 593195941, 'number': 2548, 'closed': datetime.datetime(2021, 3, 18, 6, 4, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 15, 16, 0, 22, tzinfo=datetime.timezone.utc), 'time_taken': 223468.0, 'time_delta': '2 days, 14:04:28', 'additions': 564, 'deletions': 421, 'state': 'closed'}]"
