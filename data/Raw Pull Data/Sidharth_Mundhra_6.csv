pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
609709270,Fixes a few buggy `_eval_as_leading_term` methods,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->
Closes #11465
Closes #14563
Fixes #20697
Fixes #21176
Fixes #21177
Fixes #21245
Fixes #21550 

#### Brief description of what is fixed or changed
`Add._eval_as_leading_term` - If the initially obtained leading term contained irrational or imaginary terms, `together` was insufficient to check whether the term was 0 or not, as it only cancels rational coefficients. `_mexpand` along with `factor` is being used instead now to fix this.

`Pow._eval_as_leading_term` - In a few cases where g is 0, but cannot be caught by `g.is_zero` (returns None), `NotImplementedError` was being raised. In these cases however, it is indeed possible to compute the leading term, so this case has been added. `_mexpand` at the last return is to make get a simplified answer (in cases like #20697), if cancelling of terms is possible.

`tan._eval_as_leading_term` and `cot._eval_as_leading_term` - Both methods were incomplete, and did not return the correct answer for angles outside their principle domains - 
(Before)
```py
>>> f = tan(pi*(x + S(3)/2))/(3*x)
>>> f.as_leading_term(x)
zoo/x
>>> f = cot(pi*(x + 4))/(3*x)
>>> f.as_leading_term(x)
zoo/x
```

#### Release Notes

<!-- Write the release notes for this release below between the BEGIN and END
statements. The basic format is a bulleted list with the name of the subpackage
and the release note for this PR. For example:

* solvers
  * Added a new solver for logarithmic equations.

* functions
  * Fixed a bug with log of integers.

or if no release note(s) should be included use:

NO ENTRY

See https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more
information on how to write release notes. The bot will check your release
notes automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
* core
  * Leading term methods of `Add` and `Pow` now simplify irrational and imaginary expressions
* functions
  * Leading term methods of `tan` and `cot` now work for angles outside their principle domain
<!-- END RELEASE NOTES -->
",True,21253,https://api.github.com/repos/sympy/sympy/pulls/21253,https://github.com/sympy/sympy/pull/21253,closed,103,52,14,10,5,42,1,0,[{'name': 'series'}],2021-04-06 09:48:55+00:00,2021-06-01 05:44:42+00:00,4823747.0,"55 days, 19:55:47","[{'comment_id': 607762028, 'comment_body': 'How about setting `n = 2*x0/S.Pi`, `if n.is_even: ...` and `if n.is_odd: ...`?', 'comment_created': datetime.datetime(2021, 4, 6, 11, 21, 8, tzinfo=datetime.timezone.utc), 'commenter': 'jksuom', 'type': 'User'}, {'comment_id': 607762518, 'comment_body': 'When is `factor` needed?', 'comment_created': datetime.datetime(2021, 4, 6, 11, 22, 8, tzinfo=datetime.timezone.utc), 'commenter': 'jksuom', 'type': 'User'}, {'comment_id': 607763231, 'comment_body': 'Is there a test for this case?', 'comment_created': datetime.datetime(2021, 4, 6, 11, 23, 23, tzinfo=datetime.timezone.utc), 'commenter': 'jksuom', 'type': 'User'}, {'comment_id': 607770613, 'comment_body': 'It is needed in - \r\n```py\r\ndef test_issue_13332():                                                         \r\n    assert limit(sqrt(30)*5**(-5*x - 1)*(46656*x)**x*(5*x + 2)**(5*x + 5*S.Half) *\r\n                (6*x + 2)**(-6*x - 5*S.Half), x, oo) == Rational(25, 36)\r\n```\r\nHere, at an intermediate stage, we get (on printing g, g.is_zero and self (on next line))\r\n```py\r\n-(_p + log(531441*(2*_w + 5)**5/(3125*(_w + 3)**6)))/(-log(_w) - 5*log(5) + 6*log(3)) None\r\n1/(_p/_w - 6*log(1 + 3/_w)/_w + 5*log(2 + 5/_w)/_w - 6*log(2)/_w + 6*log(6)/_w)\r\n```\r\nSince g.is_zero is returning None, we need to handle this case separately.\r\n\r\nMaybe a better fix would be changing - https://github.com/sympy/sympy/blob/0f782091845fbb52b26c3d55fb50240c260054b4/sympy/core/power.py#L1628 to `if g.is_zero is not False`', 'comment_created': datetime.datetime(2021, 4, 6, 11, 36, 6, tzinfo=datetime.timezone.utc), 'commenter': '0sidharth', 'type': 'User'}, {'comment_id': 607776771, 'comment_body': ""This is needed in - \r\n```py\r\ndef test_issue_17751():                                                         \r\n    a, b, c, x = symbols('a b c x', positive=True)                              \r\n    assert limit((a + 1)*x - sqrt((a + 1)**2*x**2 + b*x + c), x, oo) == -b/(2*a + 2)\r\n```\r\nAt an intermediate step, we need `(a**2 + 2*a + 1)/_w**2` to be converted to `(a + 1)**2/_w**2`, or else the output remains - \r\n```py\r\n      ⎛       ______________    ⎞\r\n      ⎜      ╱  2               ⎟\r\n∞⋅sign⎝a - ╲╱  a  + 2⋅a + 1  + 1⎠\r\n```\r\n(This cannot be further simplified in SymPy)"", 'comment_created': datetime.datetime(2021, 4, 6, 11, 46, 1, tzinfo=datetime.timezone.utc), 'commenter': '0sidharth', 'type': 'User'}, {'comment_id': 607788479, 'comment_body': '> if g.is_zero is not False\r\n\r\nHave you run tests with this?', 'comment_created': datetime.datetime(2021, 4, 6, 12, 5, 17, tzinfo=datetime.timezone.utc), 'commenter': 'jksuom', 'type': 'User'}, {'comment_id': 607799615, 'comment_body': 'Could `if new_expr.is_zero is not False:` be used?', 'comment_created': datetime.datetime(2021, 4, 6, 12, 23, 2, tzinfo=datetime.timezone.utc), 'commenter': 'jksuom', 'type': 'User'}, {'comment_id': 607812361, 'comment_body': 'I tried running tests, and it fails for examples like `g = (-_x + tan(_x))/_x`', 'comment_created': datetime.datetime(2021, 4, 6, 12, 40, 53, tzinfo=datetime.timezone.utc), 'commenter': '0sidharth', 'type': 'User'}, {'comment_id': 607818340, 'comment_body': ""It causes `RecursionError` with -\r\n```py\r\ndef test_issue_12769():                                                         \r\n    r, z, x = symbols('r z x', real=True)                                       \r\n    a, b, s0, K, F0, s, T = symbols('a b s0 K F0 s T', positive=True, real=True)\r\n    fx = (F0**b*K**b*r*s0 - sqrt((F0**2*K**(2*b)*a**2*(b - 1) + \\               \r\n        F0**(2*b)*K**2*a**2*(b - 1) + F0**(2*b)*K**(2*b)*s0**2*(b - 1)*(b**2 - 2*b + 1) - \\\r\n        2*F0**(2*b)*K**(b + 1)*a*r*s0*(b**2 - 2*b +  1) + \\                     \r\n        2*F0**(b + 1)*K**(2*b)*a*r*s0*(b**2 - 2*b + 1) - \\                      \r\n        2*F0**(b + 1)*K**(b + 1)*a**2*(b - 1))/((b - 1)*(b**2 - 2*b + 1))))*(b*r -  b - r + 1)\r\n                                                                                \r\n    assert fx.subs(K, F0).factor(deep=True) == limit(fx, K, F0).factor(deep=True)\r\n``` \r\n(particularly the limit part)\r\nwith `new_expr = F0**(2*b)*s0*(r - 1)`"", 'comment_created': datetime.datetime(2021, 4, 6, 12, 48, 52, tzinfo=datetime.timezone.utc), 'commenter': '0sidharth', 'type': 'User'}, {'comment_id': 608078443, 'comment_body': '> -(_p + log(531441*(2*_w + 5)**5/(3125*(_w + 3)**6)))/(-log(_w) - 5*log(5) + 6*log(3))\r\n\r\nIt seems that `_p` should have been replaced by `-log(_w)` (because `x, logx` are `_w, -_p`). Hence these substitutions act in the wrong direction: https://github.com/sympy/sympy/blob/ea3aedd21c2d6b0a0e1021382ad1c45441ab0060/sympy/core/power.py#L1599-L1601\r\n\r\nThis should probably be something like\r\n\r\n        if logx is not None:\r\n            b.subs(logx, log(x))\r\n    ', 'comment_created': datetime.datetime(2021, 4, 6, 18, 16, 17, tzinfo=datetime.timezone.utc), 'commenter': 'jksuom', 'type': 'User'}, {'comment_id': 608342840, 'comment_body': 'Changing it to - \r\n```py\r\n        if logx is not None:                                                    \r\n            b = b.subs(logx, log(x))                                            \r\n            self = b**e\r\n```\r\ncauses a lot of test failures. `_p` is indeed replaced by `-log(_w)` in the expressions entering this try block. The example I mentioned now raises ValueError in `Mul._eval_nseries`, and further, some mrv computations in the tests also raise the same error from here.\r\n\r\nFor `mrv(exp(-x + exp(-x)*exp(-x*log(x))), x)`, g and self are `-1/log(_w)` and `1/(-log(1/_w)/_w - 1/_w)`, and it raises `NotImplementedError` at the original try block in this review (L1665 in power.py)\r\n\r\nSome places in `test_aseries` also enter an infinite recursion. I tried debugging and looking around but have no clue why so many tests are failing in different fashions. Perhaps the code requires `_p` to remain in the expression.', 'comment_created': datetime.datetime(2021, 4, 7, 5, 7, 37, tzinfo=datetime.timezone.utc), 'commenter': '0sidharth', 'type': 'User'}, {'comment_id': 608358144, 'comment_body': 'What will happen if logx is not replaced either way?', 'comment_created': datetime.datetime(2021, 4, 7, 5, 53, 2, tzinfo=datetime.timezone.utc), 'commenter': 'jksuom', 'type': 'User'}, {'comment_id': 608365630, 'comment_body': 'I tried going through several examples and it looks like the original expression (self) never has -_p (logx) term. It only has terms in _w (and log(_w)). So, substituting logx for log(x) essentially does nothing. Maybe it was intended to substitute log(x) by logx.\r\n\r\nI tried changing it to `b = b.subs(log(x), logx)`, and in this case, the limit example works fine but there is one mrv computation failure in the tests (mentioned in my previous comment). This is because b.subs(log(x), logx) does not substitute `log(1/_w)` for `_p`, but the current implementation does.\r\n', 'comment_created': datetime.datetime(2021, 4, 7, 6, 12, 7, tzinfo=datetime.timezone.utc), 'commenter': '0sidharth', 'type': 'User'}, {'comment_id': 608435546, 'comment_body': 'There doesn\'t seem to exist any proper documentation on how `logx` should be treated by the core methods. In the expansion\r\n\r\n    f = c0*w^e0 + c1*w^e1 + ... + O(w^en),       where e0<e1<...<en, c0!=0\r\n\r\ngiven in the docstring of `gruntz`, the coefficients `ci` are only ""constant-like"", i.e., they may depend on slowly varying functions of `w` like `log(w)`. I think that is why `gruntz` makes `log(w)` a real constant before calling the series expansion code. But I\'m not clear when the core methods should make substitutions. If that was not expected, then obviously there would be no need to give `logx` as a call parameter.', 'comment_created': datetime.datetime(2021, 4, 7, 8, 11, 36, tzinfo=datetime.timezone.utc), 'commenter': 'jksuom', 'type': 'User'}, {'comment_id': 608577273, 'comment_body': ""It seems that the `logx` parameter should be added to all leading term methods. Otherwise the result will not be the same as the first term of a series expansion:\r\n```\r\nIn [9]: w, p = symbols('w p', positive=True)                                    \r\n\r\nIn [10]: f = log(1 + 3/w)/w                                                     \r\n\r\nIn [11]: f.as_leading_term(w)                                                   \r\nOut[11]: \r\n   ⎛3⎞\r\nlog⎜─⎟\r\n   ⎝w⎠\r\n──────\r\n  w   \r\n\r\nIn [12]: f.series(w, 0, 2, logx=-p)                                             \r\nOut[12]: \r\np + log(3)   1   w     ⎛ 2⎞\r\n────────── + ─ - ── + O⎝w ⎠\r\n    w        3   18        \r\n```"", 'comment_created': datetime.datetime(2021, 4, 7, 11, 42, 54, tzinfo=datetime.timezone.utc), 'commenter': 'jksuom', 'type': 'User'}, {'comment_id': 608640783, 'comment_body': 'It is possible to emulate the substitution by changing `log(1 + 3/w)` to `p + log(w + 3)`, etc. Then the leading term `f` of `b` becomes\r\n```\r\nIn [13]: b = p/w - 6*(p + log(w + 3))/w + 5*(p + log(2*w + 5))/w - 6*log(2)/w + \r\n    ...: 6*log(6)/w                                                             \r\n\r\nIn [14]: b.as_leading_term(w)                                                   \r\nOut[14]: \r\n-6⋅log(3) - 6⋅log(2) + 5⋅log(5) + 6⋅log(6)\r\n──────────────────────────────────────────\r\n                    w                     \r\n```\r\nwhich is different from the value computed above.', 'comment_created': datetime.datetime(2021, 4, 7, 13, 13, 38, tzinfo=datetime.timezone.utc), 'commenter': 'jksuom', 'type': 'User'}, {'comment_id': 608880224, 'comment_body': ""So, all _eval_as_leading_term methods should be changed to something like - \r\n```py\r\ndef _eval_as_leading_term(self, x, logx=None, cdir=0):\r\n    if logx is not None:\r\n       c, ex = symbols('c, ex', cls=Wild, exclude=[x])\r\n       b = b.replace(log(c*x**ex), log(c) + ex*logx)\r\n       self = b**e\r\n    # Continue original code\r\n```\r\nand calls to `_eval_as_leading_term`, `as_leading_term` and `leadterm` methods should also take a logx parameter, when they care being called inside `_eval_nseries` or `_eval_as_leading_term`.\r\n\r\nIs this the correct way to go about solving this?"", 'comment_created': datetime.datetime(2021, 4, 7, 18, 7, 29, tzinfo=datetime.timezone.utc), 'commenter': '0sidharth', 'type': 'User'}, {'comment_id': 608906204, 'comment_body': 'It should suffice to add the `logx` parameter to each call of `leadterm` or `as_leading_term`, and then handle the substitution only in `log._eval_as_leading_term`.', 'comment_created': datetime.datetime(2021, 4, 7, 18, 41, 25, tzinfo=datetime.timezone.utc), 'commenter': 'jksuom', 'type': 'User'}, {'comment_id': 609576348, 'comment_body': '`simplify` is a fairly expensive method. Something like `together` might suffice. Tests should be made as fast as possible.', 'comment_created': datetime.datetime(2021, 4, 8, 11, 4, 3, tzinfo=datetime.timezone.utc), 'commenter': 'jksuom', 'type': 'User'}, {'comment_id': 609603074, 'comment_body': 'This has the undesirable effect of splitting the terms having sums as coefficients into several terms with the same monomial: `(a + b)*x**2  -> a*x**2 + b*x**2`. Would it be possible to apply `_mexpand` earlier for each coefficient separately?', 'comment_created': datetime.datetime(2021, 4, 8, 11, 39, 30, tzinfo=datetime.timezone.utc), 'commenter': 'jksuom', 'type': 'User'}, {'comment_id': 609631765, 'comment_body': ""I am trying to handle the substition in `Expr.as_leading_term` as - \r\n```py\r\n       ...\r\n        if x not in self.free_symbols:\r\n            return self\r\n\r\n        expr = self\r\n        if isinstance(expr, log) and logx is not None:\r\n            arg = expr.args[0].together().factor()\r\n            expr = expand_log(self.func(arg))\r\n            expr = expr.subs(log(x), logx)\r\n        obj = expr._eval_as_leading_term(x, logx=logx, cdir=cdir)\r\n\r\n        if obj is not None:\r\n        ...\r\n```\r\nBut it keeps throwing recursion errors for many limits. It is a bit confusing and I am not able to see the source of error, so it would be very helpful if you could point out the error. I have also changed all _eval_as_leading_term methods to take logx as an argument (default None), and the examples you gave above are working with this - \r\n```py\r\nIn [1]: w, p = symbols('w p', positive=True)\r\n\r\nIn [2]: f = log(1 + 3/w)\r\n\r\nIn [3]: f.as_leading_term(w, logx=-p)\r\nOut[3]: p + log(3)\r\n\r\nIn [4]: f.series(w, 0, 2, logx=-p)\r\nOut[4]: \r\n         w        ⎛ 2⎞\r\nlog(3) + ─ + p + O⎝w ⎠\r\n         3            \r\n\r\n```"", 'comment_created': datetime.datetime(2021, 4, 8, 12, 15, 37, tzinfo=datetime.timezone.utc), 'commenter': '0sidharth', 'type': 'User'}, {'comment_id': 609632697, 'comment_body': 'It may also be possible to reunite the terms by calling `collect(x)` (either here or possibly at higher level in `series` or `nseries`).', 'comment_created': datetime.datetime(2021, 4, 8, 12, 16, 38, tzinfo=datetime.timezone.utc), 'commenter': 'jksuom', 'type': 'User'}, {'comment_id': 609875115, 'comment_body': 'It would be useful for maintenance to add a comment explaining the use of `factor`. What will happen if `together` is removed leaving `factor` alone?', 'comment_created': datetime.datetime(2021, 4, 8, 16, 21, 39, tzinfo=datetime.timezone.utc), 'commenter': 'jksuom', 'type': 'User'}, {'comment_id': 609933118, 'comment_body': 'I think this would be sufficient - https://github.com/sympy/sympy/blob/fea3004f11f70f62acc0cde5654c0a10ff40fd78/sympy/core/expr.py#L3033 I thought it would be inefficient to call `_mexpand` at an intermediate stage, so I have kept it in the final return.', 'comment_created': datetime.datetime(2021, 4, 8, 17, 27, 35, tzinfo=datetime.timezone.utc), 'commenter': '0sidharth', 'type': 'User'}, {'comment_id': 610518552, 'comment_body': 'I could not find the original example in #13332. Is the issue number correct? Maybe this test (and the fix) should be omitted for now.', 'comment_created': datetime.datetime(2021, 4, 9, 10, 26, 11, tzinfo=datetime.timezone.utc), 'commenter': 'jksuom', 'type': 'User'}, {'comment_id': 610613927, 'comment_body': ""The example is correct I believe - \r\n```bash\r\n$ cat a.py \r\nimport sympy as sp\r\n\r\ndef stirling(n):\r\n    return sp.sqrt(2 * sp.pi * n) * (n / sp.E)**n\r\n\r\ndef binom_stirling(n, k):\r\n    return stirling(n) / (stirling(k) * stirling(n - k))\r\n\r\nn, k = sp.symbols('n k')\r\n\r\nr0 = sp.simplify(binom_stirling(2*(3*k), k))\r\nr1 = sp.simplify(binom_stirling(2*(3*k+1), k))\r\nr = sp.simplify(r0 / r1)\r\n\r\nprint(r, k, sp.oo)\r\n\r\n$ python a.py \r\nsqrt(30)*5**(-5*k - 1)*(46656*k)**k*(5*k + 2)**(5*k + 5/2)*(6*k + 2)**(-6*k - 5/2) k oo\r\n```"", 'comment_created': datetime.datetime(2021, 4, 9, 13, 11, 22, tzinfo=datetime.timezone.utc), 'commenter': '0sidharth', 'type': 'User'}, {'comment_id': 610677278, 'comment_body': 'Okay, after a lot of debugging, I found another working diff, without this limit check - \r\n```diff\r\ndiff --git a/sympy/core/add.py b/sympy/core/add.py\r\nindex 3294b4ba79..09df1b5463 100644\r\n--- a/sympy/core/add.py\r\n+++ b/sympy/core/add.py\r\n@@ -1005,7 +1005,7 @@ def _eval_as_leading_term(self, x, cdir=0):\r\n         except TypeError:\r\n             return expr\r\n \r\n-        new_expr = new_expr.together().factor()\r\n+        new_expr = new_expr.together().trigsimp().factor()\r\n         if new_expr.is_Add:\r\n             new_expr = new_expr.simplify()\r\n \r\ndiff --git a/sympy/core/power.py b/sympy/core/power.py\r\nindex 0e58ceb01a..08567ce78a 100644\r\n--- a/sympy/core/power.py\r\n+++ b/sympy/core/power.py\r\n@@ -1659,14 +1659,10 @@ def mul(d1, d2):\r\n             else:\r\n                 raise NotImplementedError()\r\n         if not d.is_positive:\r\n-            g = (b - f).simplify()/f\r\n+            g = g.simplify()\r\n             _, d = g.leadterm(x)\r\n             if not d.is_positive:\r\n-                if limit(g/x**maxpow, x, 0) == 0:\r\n-                    # g has higher order zero\r\n-                    return f**e + e*f**e*g  # first term of binomial series\r\n-                else:\r\n-                    raise NotImplementedError()\r\n+                raise NotImplementedError()\r\n \r\n         gpoly = g._eval_nseries(x, n=ceiling(maxpow), logx=logx, cdir=cdir).removeO()\r\n         gterms = {}\r\n```\r\n\r\nHowever, I am not sure about the fact of adding simplification functions to new_expr in Add as and when we are finding failing test cases. In particular, trigsimp is needed for `new_expr = -2*(sin(a)**2 + cos(a)**2 - 1)`, which does not return 0 on `together()` or `factor()` calls.', 'comment_created': datetime.datetime(2021, 4, 9, 14, 35, 41, tzinfo=datetime.timezone.utc), 'commenter': '0sidharth', 'type': 'User'}, {'comment_id': 610689301, 'comment_body': ""At this point, it might make sense to replace all these various calls (after which again there is a chance of simplify being called), with just one call to `simplify()` directly. However, that also comes with it's own challenges and issues, mainly - \r\n```py\r\nIn [4]: limit(((1 + ((S(2)/3)**(x + 1)))**(2**x))/(2**((S(4)/3)**(x - 1))), x, oo) #Evaluates to oo in master\r\nOut[4]: \r\n    ⎛                         ⎛ x⎞⎞\r\n    ⎜     x - 1               ⎝2 ⎠⎟\r\n    ⎜ -4/3      ⎛   x + 1    ⎞    ⎟\r\nlim ⎝2         ⋅⎝2/3      + 1⎠    ⎠\r\nx─→∞                               \r\n\r\nIn [5]: a, b, c, x = symbols('a b c x', positive=True)\r\n\r\nIn [6]: limit((a + 1)*x - sqrt((a + 1)**2*x**2 + b*x + c), x, oo)\r\nOut[6]: \r\n      ⎛       ______________    ⎞\r\n      ⎜      ╱  2               ⎟\r\n∞⋅sign⎝a - ╲╱  a  + 2⋅a + 1  + 1⎠\r\n\r\n```\r\nMaybe the current block of `new_expr` is actually masking underlying issues with other leading term methods. What are your thoughts on this, and how should I proceed? Would it suffice to apply the diff I mentioned?"", 'comment_created': datetime.datetime(2021, 4, 9, 14, 49, 42, tzinfo=datetime.timezone.utc), 'commenter': '0sidharth', 'type': 'User'}, {'comment_id': 610744881, 'comment_body': 'Yeah actually `together` can be removed. In some previous version, it was not possible to remove `together`, but it is now.', 'comment_created': datetime.datetime(2021, 4, 9, 16, 4, 59, tzinfo=datetime.timezone.utc), 'commenter': '0sidharth', 'type': 'User'}, {'comment_id': 610767811, 'comment_body': '> new_expr = new_expr.together().trigsimp().factor()\r\n\r\nThis is beginning to look complicated. It seems that `.is_zero` would return None for potentially zero expressions. I would try something like this instead of many explicit simplifications as above:\r\n\r\n        iszero = new_expr.is_zero\r\n        if iszero == None:\r\n            new_expr = new_expr.simplify()\r\n            iszero = new_expr.is_zero\r\n        if iszero == True:\r\n            # simple leading term analysis gave ...\r\n            ', 'comment_created': datetime.datetime(2021, 4, 9, 16, 40, 59, tzinfo=datetime.timezone.utc), 'commenter': 'jksuom', 'type': 'User'}, {'comment_id': 614182433, 'comment_body': 'Since the `_mexpand` leads to expansion of things like `(a + 1)**2`, a `factor` is still needed, for `limit((a + 1)*x - sqrt((a + 1)**2*x**2 + b*x + c), x, oo)` (my previous comment)', 'comment_created': datetime.datetime(2021, 4, 15, 15, 41, 26, tzinfo=datetime.timezone.utc), 'commenter': '0sidharth', 'type': 'User'}, {'comment_id': 614251205, 'comment_body': 'good catch here', 'comment_created': datetime.datetime(2021, 4, 15, 17, 11, 49, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 618289580, 'comment_body': 'I would recommend `new_expr = factor_terms(new_expr.trigsimp().cancel())`', 'comment_created': datetime.datetime(2021, 4, 22, 10, 44, 38, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 618291947, 'comment_body': 'with the change I suggest, this becomes `-m**2/2 + n**2/2`', 'comment_created': datetime.datetime(2021, 4, 22, 10, 48, 24, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 618292794, 'comment_body': 'with the suggestion I made, cancel is not necessary here', 'comment_created': datetime.datetime(2021, 4, 22, 10, 49, 42, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 618294019, 'comment_body': 'with the change I suggest, this is `2/(2*cos(a)**2 - 1)`', 'comment_created': datetime.datetime(2021, 4, 22, 10, 51, 49, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 618295156, 'comment_body': ""An issue with this - \r\n```py\r\nIn [1]: a, b, c, x = symbols('a b c x', positive=True)\r\n\r\nIn [2]: limit((a + 1)*x - sqrt((a + 1)**2*x**2 + b*x + c), x, oo)\r\nOut[2]: \r\n      ⎛       ______________    ⎞\r\n      ⎜      ╱  2               ⎟\r\n∞⋅sign⎝a - ╲╱  a  + 2⋅a + 1  + 1⎠\r\n```\r\n(Currently outputs `-b/(2*a + 2)`)"", 'comment_created': datetime.datetime(2021, 4, 22, 10, 53, 43, tzinfo=datetime.timezone.utc), 'commenter': '0sidharth', 'type': 'User'}, {'comment_id': 618555401, 'comment_body': ""This highlights the importance of getting the expression into form *before* it enters the `limit` code. If `cse` were used on the expression before beginning and the assumptions copied to the substituted variable, the correct result is obtained in master:\r\n```python\r\n>>> cse(eq)\r\n([(x0, a + 1)], [x*x0 - sqrt(b*x + c + x**2*x0**2)])\r\n>>> r, e = _\r\n>>> x0=r[0][0]\r\n>>> _x0 = Symbol('x0',**r[0][1]._assumptions)\r\n>>> limit(e[0].subs(x0, _x0), x, oo).subs(_x0, r[0][1])\r\n-b/(2*(a + 1))\r\n```\r\nThe core workings should not have to deal with all the different ways to write expressions more than necessary. Even a wide-acting call like `simplify` should be used with great reservation (and preferably not at all)."", 'comment_created': datetime.datetime(2021, 4, 22, 16, 24, 35, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 629081265, 'comment_body': 'My exams are over and I will resume contributing now.\r\n\r\nI think this should be the place where the expression changes to a suitable form - https://github.com/sympy/sympy/blob/f17448928ce5955886ad810728c08a7193000290/sympy/series/gruntz.py#L683-L686 Should I apply `cse` on `e0`? I only see `cse` being used in one other place in the codebase (apart from printing and codegen), which is at https://github.com/sympy/sympy/blob/f17448928ce5955886ad810728c08a7193000290/sympy/solvers/ode/ode.py#L2681 So should `cse` be used in library code or is there any other preferred alternative?', 'comment_created': datetime.datetime(2021, 5, 10, 6, 35, 17, tzinfo=datetime.timezone.utc), 'commenter': '0sidharth', 'type': 'User'}, {'comment_id': 642222644, 'comment_body': 'When does `expand_mul` not suffice?', 'comment_created': datetime.datetime(2021, 5, 31, 5, 41, 19, tzinfo=datetime.timezone.utc), 'commenter': 'jksuom', 'type': 'User'}, {'comment_id': 642229718, 'comment_body': 'I had interpreted a result wrong, `expand_mul` does suffice', 'comment_created': datetime.datetime(2021, 5, 31, 6, 1, 46, tzinfo=datetime.timezone.utc), 'commenter': '0sidharth', 'type': 'User'}, {'comment_id': 642237199, 'comment_body': 'Right... it is for this case I had mentioned on gitter - \r\n```py\r\nIn [22]: -3*x + (x + S(3)/2 - sqrt(3)*I/2)**2 - S(3)/2 + 3*sqrt(3)*I/2\r\nOut[22]: \r\n                     2             \r\n       ⎛    3   √3⋅ⅈ⎞    3   3⋅√3⋅ⅈ\r\n-3⋅x + ⎜x + ─ - ────⎟  - ─ + ──────\r\n       ⎝    2    2  ⎠    2     2   \r\n\r\nIn [23]: _.nseries(x)\r\nOut[23]: \r\n                                  2              2         \r\n  6⋅x      6⋅√3⋅ⅈ⋅x            6⋅x       6⋅√3⋅ⅈ⋅x      ⎛ 6⎞\r\n──────── - ──────── - 3⋅x + ────────── - ────────── + O⎝x ⎠\r\n3 - √3⋅ⅈ   3 - √3⋅ⅈ         6 - 6⋅√3⋅ⅈ   6 - 6⋅√3⋅ⅈ        \r\n\r\nIn [24]: _.as_leading_term(x)\r\nOut[24]: \r\n-3⋅x⋅(1 + √3⋅ⅈ) \r\n────────────────\r\n    3 - √3⋅ⅈ\r\n```\r\nSo should `_mepxand` be kept? The series module tests all pass with `expand_mul` also.', 'comment_created': datetime.datetime(2021, 5, 31, 6, 21, 25, tzinfo=datetime.timezone.utc), 'commenter': '0sidharth', 'type': 'User'}]","[{'commit_sha': '7fca4a6bcf51afce4da1ee140c546ee134903a53', 'committer_username': '0sidharth', 'committer_name': 'Sidharth Mundhra', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 4, 11, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '355be15260a1ab818bffdf0705dc7a8a7d2b732b', 'committer_username': '0sidharth', 'committer_name': 'Sidharth Mundhra', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 4, 11, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb54049465ab05914885d92c13defe006710cdae', 'committer_username': '0sidharth', 'committer_name': 'Sidharth Mundhra', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 4, 11, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '748294e91983c144c7f77e3d1bce21b10868e6f7', 'committer_username': '0sidharth', 'committer_name': 'Sidharth Mundhra', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 4, 11, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a87f972f5490d3dc95a46f71302647c5d73f6f4e', 'committer_username': '0sidharth', 'committer_name': 'Sidharth Mundhra', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 4, 11, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cfb8b76eeacd94f4b8fe8563c9cb99853adddccd', 'committer_username': '0sidharth', 'committer_name': 'Sidharth Mundhra', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 4, 11, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c7f92d7503b75c5bd71813dbdc862f5ae3d326d0', 'committer_username': '0sidharth', 'committer_name': 'Sidharth Mundhra', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 4, 11, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2784e850185897315a1dd7225037cb788c2c8adf', 'committer_username': '0sidharth', 'committer_name': 'Sidharth Mundhra', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 4, 11, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4f4c0e469aaaccf3eabbe0a4c1ac1df1912544d', 'committer_username': '0sidharth', 'committer_name': 'Sidharth Mundhra', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 4, 11, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '721a509e25eb5c8c847bdbf175905770328e25da', 'committer_username': '0sidharth', 'committer_name': 'Sidharth Mundhra', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 4, 11, 16, tzinfo=datetime.timezone.utc)}]",Sidharth Mundhra,56464077,,User,,12,,15,22
664606680,[GSoC] A few leading term methods changed,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->
Fixes #20365
Fixes #21031
Fixes #21606

#### Brief description of what is fixed or changed
`Pow`, `exp`, `factorial` and `gamma` `_eval_as_leading_term` now raise `PoleError` when the argument is unbounded, instead of returning the original expression itself.
Add `LambertW._eval_as_leading_term` method
Fixed `besselj` and `bessely` leading term methods
Added `erfi` leading term method
Added `SingularityFunction` leading term method and power series expansion
Added `fresnels` and `fresnelc` leading term methods

#### Other comments
The previous implementation of `bound` parameter for `aseries` was buggy and misleading, and has broken after these changes. After thinking about what the `bound` parameter should actually represent, it should be coded properly. Consequently, the corresponding tests have been commented out for now.

#7529 and #7552 may be closed now as all the code in those PRs will be present in master
(For #7552, the code is there in #17303, so only one of the two need to remain open)

#### Release Notes

<!-- Write the release notes for this release below between the BEGIN and END
statements. The basic format is a bulleted list with the name of the subpackage
and the release note for this PR. For example:

* solvers
  * Added a new solver for logarithmic equations.

* functions
  * Fixed a bug with log of integers.

or if no release note(s) should be included use:

NO ENTRY

See https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more
information on how to write release notes. The bot will check your release
notes automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
* functions
  * `exp`, `factorial` and `gamma` `._eval_as_leading_term` now raises `PoleError` when the argument is unbounded
  * Add `LambertW`, `erfi`, `fresnels`, `fresnelc` and `SingularityFunction` leading term methods
  * Add `SingularityFunction` power series expansion
  * Fixed `besselj` and `bessely` leading term methods
* series
  * Limit code has better handling of `sign`
* core
  * `Pow._eval_as_leading_term` now raises `PoleError` when the argument is unbounded
  * `leadterm` now takes `logx` argument
<!-- END RELEASE NOTES -->
",True,21589,https://api.github.com/repos/sympy/sympy/pulls/21589,https://github.com/sympy/sympy/pull/21589,closed,460,237,36,25,2,30,4,0,"[{'name': 'series'}, {'name': 'core'}, {'name': 'GSoC'}, {'name': 'functions'}]",2021-06-08 09:48:52+00:00,2021-07-05 16:45:00+00:00,2357768.0,"27 days, 6:56:08","[{'comment_id': 647333427, 'comment_body': 'What is the purpose of this condition?', 'comment_created': datetime.datetime(2021, 6, 8, 11, 3, 14, tzinfo=datetime.timezone.utc), 'commenter': 'jksuom', 'type': 'User'}, {'comment_id': 647338153, 'comment_body': 'Many functions have proper power series expansions at infinity; rational functions, for example, have expansions everywhere. Those should usually be created by `nseries`. Asymptotic series may be located anywhere in the extended complex plane, not necessarily at infinity. `aseries` should be called only when a power series does not exist.', 'comment_created': datetime.datetime(2021, 6, 8, 11, 11, 7, tzinfo=datetime.timezone.utc), 'commenter': 'jksuom', 'type': 'User'}, {'comment_id': 647343812, 'comment_body': '`min` is sometimes `Order(0, x)` after the changes in this PR (specifically due to the removal of the try-except block, which causes this change to the example in `test_issue_13715`) so `min.getn()` throws an error', 'comment_created': datetime.datetime(2021, 6, 8, 11, 20, 10, tzinfo=datetime.timezone.utc), 'commenter': '0sidharth', 'type': 'User'}, {'comment_id': 647346138, 'comment_body': '```suggestion\r\n            arg = self.args[0]\r\n            arg0 = arg.subs(x, 0).cancel()\r\n```\r\nAlso `arg0` and `arg` swapped on the next lines.', 'comment_created': datetime.datetime(2021, 6, 8, 11, 23, 46, tzinfo=datetime.timezone.utc), 'commenter': 'jksuom', 'type': 'User'}, {'comment_id': 647349152, 'comment_body': 'Could `Order(1, x).contains(arg)` be tested by means of `arg0 = arg.subs(x, 0)`? (To avoid constructing `Order(1, x)` and calling `contains`.)', 'comment_created': datetime.datetime(2021, 6, 8, 11, 28, 40, tzinfo=datetime.timezone.utc), 'commenter': 'jksuom', 'type': 'User'}, {'comment_id': 650353381, 'comment_body': 'A space after # looks better.', 'comment_created': datetime.datetime(2021, 6, 12, 6, 16, 55, tzinfo=datetime.timezone.utc), 'commenter': 'jksuom', 'type': 'User'}, {'comment_id': 650354593, 'comment_body': 'Does this mean that `min` is `Order(0, x)`?  That could be tested by something like `min.expr == 0` without creating a new `Order(0, x)` and invoking `contains` (which is not cheap in general).', 'comment_created': datetime.datetime(2021, 6, 12, 6, 31, 29, tzinfo=datetime.timezone.utc), 'commenter': 'jksuom', 'type': 'User'}, {'comment_id': 650354845, 'comment_body': 'This looks like the same test as above in test_aseries. Maybe that alone would suffice?', 'comment_created': datetime.datetime(2021, 6, 12, 6, 34, 30, tzinfo=datetime.timezone.utc), 'commenter': 'jksuom', 'type': 'User'}, {'comment_id': 650408363, 'comment_body': ""This test is needed as the call here is to `series(x, oo)`, which raises `PoleError` on master (which doesn't call) `aseries`. Perhaps the test case in test_aseries can be removed"", 'comment_created': datetime.datetime(2021, 6, 12, 16, 11, 36, tzinfo=datetime.timezone.utc), 'commenter': '0sidharth', 'type': 'User'}, {'comment_id': 650410532, 'comment_body': 'Ok.', 'comment_created': datetime.datetime(2021, 6, 12, 16, 34, 59, tzinfo=datetime.timezone.utc), 'commenter': 'jksuom', 'type': 'User'}, {'comment_id': 651524322, 'comment_body': 'Is `cancel` necessary?', 'comment_created': datetime.datetime(2021, 6, 15, 7, 32, 29, tzinfo=datetime.timezone.utc), 'commenter': 'jksuom', 'type': 'User'}, {'comment_id': 659634235, 'comment_body': '`min.expr != 0` check is no longer needed', 'comment_created': datetime.datetime(2021, 6, 28, 9, 38, 12, tzinfo=datetime.timezone.utc), 'commenter': '0sidharth', 'type': 'User'}, {'comment_id': 659650864, 'comment_body': ""This change is also not needed, `logx` parameter can be kept, though it won't make a difference "", 'comment_created': datetime.datetime(2021, 6, 28, 10, 2, 23, tzinfo=datetime.timezone.utc), 'commenter': '0sidharth', 'type': 'User'}, {'comment_id': 660048484, 'comment_body': ""Shouldn't this have arg0?"", 'comment_created': datetime.datetime(2021, 6, 28, 19, 11, 37, tzinfo=datetime.timezone.utc), 'commenter': 'jksuom', 'type': 'User'}, {'comment_id': 660051872, 'comment_body': 'How about something like `z, a, n = self.args`?', 'comment_created': datetime.datetime(2021, 6, 28, 19, 17, 14, tzinfo=datetime.timezone.utc), 'commenter': 'jksuom', 'type': 'User'}, {'comment_id': 660295103, 'comment_body': 'This is probably intended to mean that `arg.subs(x, 0).is_zero`. However, it does not cover all such cases:\r\n```\r\nIn [18]: Order(x, x).contains(sqrt(x))                                          \r\nOut[18]: False\r\n```', 'comment_created': datetime.datetime(2021, 6, 29, 5, 38, 50, tzinfo=datetime.timezone.utc), 'commenter': 'jksuom', 'type': 'User'}, {'comment_id': 660296571, 'comment_body': 'This could probably be `arg.subs(x, 0).is_finite`. (`arg` should be well-behaved when `as_leading_term` does not raise.)', 'comment_created': datetime.datetime(2021, 6, 29, 5, 42, 48, tzinfo=datetime.timezone.utc), 'commenter': 'jksuom', 'type': 'User'}, {'comment_id': 661189160, 'comment_body': 'Could this be expressed in terms of `sign(x)`?', 'comment_created': datetime.datetime(2021, 6, 30, 7, 8, 58, tzinfo=datetime.timezone.utc), 'commenter': 'jksuom', 'type': 'User'}, {'comment_id': 661194513, 'comment_body': 'That would need the assumption that x is real. Should that be made?', 'comment_created': datetime.datetime(2021, 6, 30, 7, 17, 34, tzinfo=datetime.timezone.utc), 'commenter': '0sidharth', 'type': 'User'}, {'comment_id': 661225900, 'comment_body': 'Actually, it seems that `erfi(x)` will be of the order of `exp(x**2)` as `x` tends to infinity so there will be no leading term for real `x`. For pure imaginary `x`, it is bounded (`-I*erf(I*x)`), but that should not considered here. So it looks like the call should raise (or return unevaluated for now).', 'comment_created': datetime.datetime(2021, 6, 30, 8, 2, 54, tzinfo=datetime.timezone.utc), 'commenter': 'jksuom', 'type': 'User'}, {'comment_id': 662226560, 'comment_body': '`erf` has finite limits `+/-1` at `+/-oo` (unlike `erfi`) so this test need not be changed.', 'comment_created': datetime.datetime(2021, 7, 1, 12, 0, 38, tzinfo=datetime.timezone.utc), 'commenter': 'jksuom', 'type': 'User'}, {'comment_id': 662305377, 'comment_body': '`arg0` may be finite but not real.', 'comment_created': datetime.datetime(2021, 7, 1, 13, 47, 49, tzinfo=datetime.timezone.utc), 'commenter': 'jksuom', 'type': 'User'}, {'comment_id': 662350161, 'comment_body': 'We might have `arg = x + y` and `arg0 = y`. Then the result should be `erf(y)`.', 'comment_created': datetime.datetime(2021, 7, 1, 14, 39, 40, tzinfo=datetime.timezone.utc), 'commenter': 'jksuom', 'type': 'User'}, {'comment_id': 662351911, 'comment_body': 'The test could possibly be `if not arg0.is_infinite`.', 'comment_created': datetime.datetime(2021, 7, 1, 14, 41, 41, tzinfo=datetime.timezone.utc), 'commenter': 'jksuom', 'type': 'User'}, {'comment_id': 662374531, 'comment_body': '`cdir` should be in `limit(arg, x, 0, cdir=cdir)`.', 'comment_created': datetime.datetime(2021, 7, 1, 15, 8, 23, tzinfo=datetime.timezone.utc), 'commenter': 'jksuom', 'type': 'User'}, {'comment_id': 662424540, 'comment_body': 'We should probably put `logx` and `cdir` here as well.', 'comment_created': datetime.datetime(2021, 7, 1, 16, 13, 13, tzinfo=datetime.timezone.utc), 'commenter': 'jksuom', 'type': 'User'}, {'comment_id': 663480274, 'comment_body': 'Why does this fail?', 'comment_created': datetime.datetime(2021, 7, 4, 10, 13, tzinfo=datetime.timezone.utc), 'commenter': 'jksuom', 'type': 'User'}, {'comment_id': 663485372, 'comment_body': 'How shall `new_expr` be used?', 'comment_created': datetime.datetime(2021, 7, 4, 10, 55, 50, tzinfo=datetime.timezone.utc), 'commenter': 'jksuom', 'type': 'User'}, {'comment_id': 663488731, 'comment_body': 'It looks like `cancel().together(deep=True)` would give a better looking result. ', 'comment_created': datetime.datetime(2021, 7, 4, 11, 22, 30, tzinfo=datetime.timezone.utc), 'commenter': 'jksuom', 'type': 'User'}, {'comment_id': 663498547, 'comment_body': 'The result could probably be improved. I tried with `radsimp` but that raises\r\n```\r\nValueError: expecting a Symbol but got _Dummy_628 - sqrt(5)/2 + 1/2 - (1/2 - sqrt(5)/2)\r\n```\r\nIt looks like this would come from this line: https://github.com/sympy/sympy/blob/1a9577f9220fc24372ad4bd6d97059759a6b665c/sympy/series/order.py#L193\r\nbecause\r\n```\r\n(Pdb) p rs\r\n{_Dummy_628 - sqrt(5)/2 + 1/2 - (1/2 - sqrt(5)/2): x - sqrt(5)/2 + 1/2}\r\n```\r\nObviously, some simplification is necessary for `v - point[0]`.', 'comment_created': datetime.datetime(2021, 7, 4, 12, 41, 54, tzinfo=datetime.timezone.utc), 'commenter': 'jksuom', 'type': 'User'}]","[{'commit_sha': '6b4c5de999a9cea50905066e594b8346669b761d', 'committer_username': '0sidharth', 'committer_name': 'Sidharth Mundhra', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 4, 11, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7612cbba75434b1ba86f078cfaa326dbb9ee7cf', 'committer_username': '0sidharth', 'committer_name': 'Sidharth Mundhra', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 4, 11, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f292fb6fd3591ba6a75f1733f61915fcd63763b', 'committer_username': '0sidharth', 'committer_name': 'Sidharth Mundhra', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 4, 11, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bbf39d0bf1f501a53d5ecde4c6170a8e3a56978e', 'committer_username': '0sidharth', 'committer_name': 'Sidharth Mundhra', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 4, 11, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49232cc81174bf5faa5b3ca1160acb39441e493f', 'committer_username': '0sidharth', 'committer_name': 'Sidharth Mundhra', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 4, 11, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0427b3be052dc8d7de77aa35db4e4529cea47cbd', 'committer_username': '0sidharth', 'committer_name': 'Sidharth Mundhra', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 4, 11, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b6b23370113ac3460fba8e200a89416dfbb6cec', 'committer_username': '0sidharth', 'committer_name': 'Sidharth Mundhra', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 4, 11, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf1eb95c20d7b74e5bd30bfe03b17745f09faf23', 'committer_username': '0sidharth', 'committer_name': 'Sidharth Mundhra', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 4, 11, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68b70f0f736ffa80d62b19de17903360f2b583a5', 'committer_username': '0sidharth', 'committer_name': 'Sidharth Mundhra', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 4, 11, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2f9ff56f8a8eecb0f6cecf7e79fcca51606c92ba', 'committer_username': '0sidharth', 'committer_name': 'Sidharth Mundhra', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 4, 11, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f98b8b29f31347d6d0e78dc79ea608a04a379b84', 'committer_username': '0sidharth', 'committer_name': 'Sidharth Mundhra', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 4, 11, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b8e82efd7198b1993b23c0def2e482e080332bf8', 'committer_username': '0sidharth', 'committer_name': 'Sidharth Mundhra', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 4, 11, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19b48765a227f44351d08ebe4fa11a0eaf217b93', 'committer_username': '0sidharth', 'committer_name': 'Sidharth Mundhra', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 4, 11, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6c5e1dad7c66be214b17e9fa11517e03b5c9ae1', 'committer_username': '0sidharth', 'committer_name': 'Sidharth Mundhra', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 4, 11, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e5571734dc6dee74635c68bc209e4cb0c305557e', 'committer_username': '0sidharth', 'committer_name': 'Sidharth Mundhra', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 4, 11, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e16d0404e6b47d5c7bb576af62fd428ffbe00e47', 'committer_username': '0sidharth', 'committer_name': 'Sidharth Mundhra', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 4, 11, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4275b6dc55beb5f78dd2d929c0002f127e43ab57', 'committer_username': '0sidharth', 'committer_name': 'Sidharth Mundhra', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 4, 11, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '55fdd99000b2774c3c741197d94720a0e946b949', 'committer_username': '0sidharth', 'committer_name': 'Sidharth Mundhra', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 4, 11, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f283ec64ef54cfe4c21767a13f318fc8a9f06fb', 'committer_username': '0sidharth', 'committer_name': 'Sidharth Mundhra', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 4, 11, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dff3cf10838f13c4972ce7fd4739793ca8775d83', 'committer_username': '0sidharth', 'committer_name': 'Sidharth Mundhra', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 4, 11, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d1fb8279fc65e87a2f3d4a4d7518e5684b7f364', 'committer_username': '0sidharth', 'committer_name': 'Sidharth Mundhra', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 4, 11, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f810de8ee6416000574ffad763073e90fd7d37c', 'committer_username': '0sidharth', 'committer_name': 'Sidharth Mundhra', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 4, 11, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a69238a5fc7e50fc25b722c8e279791c02ed9725', 'committer_username': '0sidharth', 'committer_name': 'Sidharth Mundhra', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 4, 11, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c120829cede5d5910fc3f26e12f8651578b7c7d8', 'committer_username': '0sidharth', 'committer_name': 'Sidharth Mundhra', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 4, 11, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b9c8f8a31896c88c2d6943a6aae45329933b0f4', 'committer_username': '0sidharth', 'committer_name': 'Sidharth Mundhra', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 4, 11, 16, tzinfo=datetime.timezone.utc)}]",Sidharth Mundhra,56464077,,User,,12,,15,22
687283029,[GSoC] Improvements to `Limit.doit`,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->
Fixes #21530 
Fixes #21701 
#21721 

#### Brief description of what is fixed or changed
Some heuristics present in the `Limit.doit` code are no longer needed after #21589, so they are removed.
A factor of `1/gamma(nu + 1)` was missing from the `besselj._eval_as_leading_term`, which is now added.

#### Release Notes

<!-- Write the release notes for this release below between the BEGIN and END
statements. The basic format is a bulleted list with the name of the subpackage
and the release note for this PR. For example:

* solvers
  * Added a new solver for logarithmic equations.

* functions
  * Fixed a bug with log of integers.

or if no release note(s) should be included use:

NO ENTRY

See https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more
information on how to write release notes. The bot will check your release
notes automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
* functions
  * Fixed bugs related to direction in `floor` and `ceiling` leading terms
  * Fixed bugs in `sinh` and `cosh` leading terms
  * Added `Ei`, `Ci`, `Shi`, `Chi` leading term methods 
  * `sin` and `cos` now return `AccumBounds(-1, 1)` as the leading term at real infinities
<!-- END RELEASE NOTES -->
",True,21731,https://api.github.com/repos/sympy/sympy/pulls/21731,https://github.com/sympy/sympy/pull/21731,closed,177,101,17,12,2,8,1,0,[{'name': 'series'}],2021-07-11 06:26:57+00:00,2021-07-15 08:02:29+00:00,351332.0,"4 days, 1:35:32","[{'comment_id': 667716895, 'comment_body': '`cdir` cannot be used in this condition. It is the direction of `x`, not of `arg` (which may be `-x`).\r\n\r\nI think that `dir()` could be applied here.', 'comment_created': datetime.datetime(2021, 7, 12, 8, 10, 46, tzinfo=datetime.timezone.utc), 'commenter': 'jksuom', 'type': 'User'}, {'comment_id': 667852137, 'comment_body': '`cdir == -1` is too restrictive. `cdir`, when recomputed by `dir`, may have any value. `t*cdir` denotes the same direction for all positive values of `t`. In principle, `cdir` could be normalized to have absolute value `1` but then the expression would often have `sqrt` expressions in the denominator. In this case, a proper condition would be `cdir.is_negative`.', 'comment_created': datetime.datetime(2021, 7, 12, 11, 34, 14, tzinfo=datetime.timezone.utc), 'commenter': 'jksuom', 'type': 'User'}, {'comment_id': 667925892, 'comment_body': 'This would only apply to the real infinities `+/-oo`.', 'comment_created': datetime.datetime(2021, 7, 12, 13, 22, 44, tzinfo=datetime.timezone.utc), 'commenter': 'jksuom', 'type': 'User'}, {'comment_id': 668764737, 'comment_body': 'I would have expected something like this (without the comments):\r\n```\r\n    r = self.subs(x, 0)  # Can this be nan? Probably not in the current examples. \r\n    if arg0 == r:  # arg0 is an integer\r\n        ndir = arg.dir(x, cdir)  # new direction depending on arg\r\n        return r - 1 if ndir.is_negative else r\r\n```\r\n`dir` is cheaper than `leadterm`. Besides, `leadterm` is usually independent of `cdir` so the coefficient it returns may have wrong sign. (Consider `arg = arg0 + x`: `(arg - arg0).leadterm(x, cdir=cdir)` is `(1, 1)`.)\r\n', 'comment_created': datetime.datetime(2021, 7, 13, 13, 29, 39, tzinfo=datetime.timezone.utc), 'commenter': 'jksuom', 'type': 'User'}, {'comment_id': 668864334, 'comment_body': 'The problem is that `x.dir(x, cdir)` and `(-x).dir(x, cdir)` are both `0`, when `cdir=0`', 'comment_created': datetime.datetime(2021, 7, 13, 15, 15, 28, tzinfo=datetime.timezone.utc), 'commenter': '0sidharth', 'type': 'User'}, {'comment_id': 668884406, 'comment_body': 'We should try to make `cdir` nonzero in a case like this where it would matter. I think that is how it is done in `Limit.doit`. Anyway, we could probably set `cdir = 1` if it is zero.', 'comment_created': datetime.datetime(2021, 7, 13, 15, 38, 4, tzinfo=datetime.timezone.utc), 'commenter': 'jksuom', 'type': 'User'}, {'comment_id': 668911549, 'comment_body': 'We could also raise if `arg0 == r` and `cdir == 0` as then there is no twosided limit.', 'comment_created': datetime.datetime(2021, 7, 13, 16, 9, 44, tzinfo=datetime.timezone.utc), 'commenter': 'jksuom', 'type': 'User'}, {'comment_id': 669387555, 'comment_body': ""It seems that a slightly more careful investigation is needed if `cdir == 0`, We could have something like `limit(floor(-x**2, x, 0, dir='+-')`. I think that both `arg.dir(x, 1)` and `arg.dir(x, -1)` should be computed and an error raised only if they disagree. Otherwise the common value can be used in the sequel."", 'comment_created': datetime.datetime(2021, 7, 14, 8, 7, 31, tzinfo=datetime.timezone.utc), 'commenter': 'jksuom', 'type': 'User'}]","[{'commit_sha': '86b3cfbf4beddd46f605f6d42935eab46eacf230', 'committer_username': '0sidharth', 'committer_name': 'Sidharth Mundhra', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 4, 11, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e4b302be9ef6b51d03330ee5e1262efff19257d', 'committer_username': '0sidharth', 'committer_name': 'Sidharth Mundhra', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 4, 11, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e6e3392a43f0f333d041ab9fe4e070f48f2b9ff0', 'committer_username': '0sidharth', 'committer_name': 'Sidharth Mundhra', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 4, 11, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '86db39ccbc462d1a3fea90dc8dfb0e5612ce9719', 'committer_username': '0sidharth', 'committer_name': 'Sidharth Mundhra', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 4, 11, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '52b12930a3cf222583ddfc5104842d87d26da874', 'committer_username': '0sidharth', 'committer_name': 'Sidharth Mundhra', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 4, 11, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3cf7eaa929ac42c99221f302bbf557ccc6428d0d', 'committer_username': '0sidharth', 'committer_name': 'Sidharth Mundhra', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 4, 11, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2e6f5923d9b15f696868f3513bc3102121094606', 'committer_username': '0sidharth', 'committer_name': 'Sidharth Mundhra', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 4, 11, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e8095db993fb62dcfe1d570def6c11fd89d555b4', 'committer_username': '0sidharth', 'committer_name': 'Sidharth Mundhra', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 4, 11, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd444d3952fa408a4ca7d97bbbafc907ce742ba2', 'committer_username': '0sidharth', 'committer_name': 'Sidharth Mundhra', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 4, 11, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f1d65a0e07432ee941c807ab71dc8018d2a6868', 'committer_username': '0sidharth', 'committer_name': 'Sidharth Mundhra', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 4, 11, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '41940fff72a98b22c00e31061ec85746890e03ca', 'committer_username': '0sidharth', 'committer_name': 'Sidharth Mundhra', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 4, 11, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f7d3df7d291b093e8d6ffd64b1b2781f228e858', 'committer_username': '0sidharth', 'committer_name': 'Sidharth Mundhra', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 4, 11, 16, tzinfo=datetime.timezone.utc)}]",Sidharth Mundhra,56464077,,User,,12,,15,22
696325133,[GSoC] Limit bug fixes,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->
Fixes #9497
Fixes #18363
Fixes #21598
Fixes #21756 

#### Brief description of what is fixed or changed


#### Other comments


#### Release Notes

<!-- Write the release notes for this release below between the BEGIN and END
statements. The basic format is a bulleted list with the name of the subpackage
and the release note for this PR. For example:

* solvers
  * Added a new solver for logarithmic equations.

* functions
  * Fixed a bug with log of integers.

or if no release note(s) should be included use:

NO ENTRY

See https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more
information on how to write release notes. The bot will check your release
notes automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
* functions
  * Added `polylog` nseries expansion
  * Fixes bug in `erf` nseries expansion leading to wrong number of terms
  * `log` leading term method handles `zoo` better, thus raises more often
  * `binomial` leading term method added
* series
  * `Limit` now throws `NotImplementedError` if the point contains the variable wrt which limit is being found
<!-- END RELEASE NOTES -->
",True,21775,https://api.github.com/repos/sympy/sympy/pulls/21775,https://github.com/sympy/sympy/pull/21775,closed,199,86,11,9,3,3,0,0,[],2021-07-24 09:44:48+00:00,2021-07-25 16:21:45+00:00,110217.0,"1 day, 6:36:57","[{'comment_id': 675983342, 'comment_body': 'This comment relates to line 290 above.', 'comment_created': datetime.datetime(2021, 7, 24, 10, 47, 7, tzinfo=datetime.timezone.utc), 'commenter': 'jksuom', 'type': 'User'}, {'comment_id': 675985582, 'comment_body': '`pass` could be omitted.', 'comment_created': datetime.datetime(2021, 7, 24, 11, 8, 54, tzinfo=datetime.timezone.utc), 'commenter': 'jksuom', 'type': 'User'}, {'comment_id': 676108311, 'comment_body': 'This change is not needed, I will remove it in my next commit', 'comment_created': datetime.datetime(2021, 7, 25, 8, 31, 51, tzinfo=datetime.timezone.utc), 'commenter': '0sidharth', 'type': 'User'}]","[{'commit_sha': '0ff6eb21fb551d613b5915f22b1c122c905d5a42', 'committer_username': '0sidharth', 'committer_name': 'Sidharth Mundhra', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 4, 11, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd466838a47da0782c9b1bd5a5ac54ac17f3cb412', 'committer_username': '0sidharth', 'committer_name': 'Sidharth Mundhra', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 4, 11, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac76fc0f883c10532fd31a08f32e1564a9a38d46', 'committer_username': '0sidharth', 'committer_name': 'Sidharth Mundhra', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 4, 11, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25dbd7ba8f126033cb7d801ae617930783bb632f', 'committer_username': '0sidharth', 'committer_name': 'Sidharth Mundhra', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 4, 11, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cbe6f66018f71fff860444d14c0a2de0ac2d4a35', 'committer_username': '0sidharth', 'committer_name': 'Sidharth Mundhra', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 4, 11, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0db70733a1f0990f28ae77977cafc0f1aca5f28f', 'committer_username': '0sidharth', 'committer_name': 'Sidharth Mundhra', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 4, 11, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de505ae8972198efe181afacdb643893b3511735', 'committer_username': '0sidharth', 'committer_name': 'Sidharth Mundhra', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 4, 11, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a84f9834910b485cc30188fddd7b67a215c8d4e7', 'committer_username': '0sidharth', 'committer_name': 'Sidharth Mundhra', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 4, 11, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '038073cd1ba4c279998aa086151539c9e9bf37d2', 'committer_username': '0sidharth', 'committer_name': 'Sidharth Mundhra', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 4, 11, 16, tzinfo=datetime.timezone.utc)}]",Sidharth Mundhra,56464077,,User,,12,,15,22
700706619,[GSoC] Fixes regression in limits,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->

Fixes #21785
#### Brief description of what is fixed or changed

Fixes regression introduced due to changes in `_eval_as_leading_term`s
Comparison of `cdir < 0` can throw TypeError, changed to `re(cdir).is_negative`

#### Other comments
Grouped some similar tests in `test_limits.py`, to reduce number of test functions

#### Release Notes

<!-- Write the release notes for this release below between the BEGIN and END
statements. The basic format is a bulleted list with the name of the subpackage
and the release note for this PR. For example:

* solvers
  * Added a new solver for logarithmic equations.

* functions
  * Fixed a bug with log of integers.

or if no release note(s) should be included use:

NO ENTRY

See https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more
information on how to write release notes. The bot will check your release
notes automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
NO ENTRY
<!-- END RELEASE NOTES -->
",True,21805,https://api.github.com/repos/sympy/sympy/pulls/21805,https://github.com/sympy/sympy/pull/21805,closed,55,49,8,2,3,0,1,0,[{'name': 'series'}],2021-07-31 12:56:31+00:00,2021-07-31 16:40:12+00:00,13421.0,3:43:41,[],"[{'commit_sha': '0cc774680f307f731293396f20906f2b92804046', 'committer_username': '0sidharth', 'committer_name': 'Sidharth Mundhra', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 4, 11, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ca648ab9e600a31de90426c7d14e88f9e0d75fa', 'committer_username': '0sidharth', 'committer_name': 'Sidharth Mundhra', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 4, 11, 16, tzinfo=datetime.timezone.utc)}]",Sidharth Mundhra,56464077,,User,,12,,15,22
705872310,[GSoC] `mrv_leadterm` changes,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->
Fixes #6052
Closes #6350

#### Brief description of what is fixed or changed
`calculate_series` function of `gruntz` has been removed. Some changes across many other files for better `logx` handling.

#### Release Notes

<!-- Write the release notes for this release below between the BEGIN and END
statements. The basic format is a bulleted list with the name of the subpackage
and the release note for this PR. For example:

* solvers
  * Added a new solver for logarithmic equations.

* functions
  * Fixed a bug with log of integers.

or if no release note(s) should be included use:

NO ENTRY

See https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more
information on how to write release notes. The bot will check your release
notes automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
* series
  * Removed `calculate_series` function from `gruntz`
<!-- END RELEASE NOTES -->
",False,21837,https://api.github.com/repos/sympy/sympy/pulls/21837,https://github.com/sympy/sympy/pull/21837,open,148,81,21,13,4,9,4,0,"[{'name': 'series'}, {'name': 'GSoC'}, {'name': 'Please take over'}, {'name': 'Merge conflict'}]",2021-08-07 10:36:20+00:00,,0.0,,"[{'comment_id': 684722124, 'comment_body': 'Why `n + 1`?', 'comment_created': datetime.datetime(2021, 8, 8, 6, 16, 47, tzinfo=datetime.timezone.utc), 'commenter': 'jksuom', 'type': 'User'}, {'comment_id': 684756646, 'comment_body': ""That's a mistake, that was actually masking another bug (value of `n` was changing in the method), which I have changed now."", 'comment_created': datetime.datetime(2021, 8, 8, 11, 5, 13, tzinfo=datetime.timezone.utc), 'commenter': '0sidharth', 'type': 'User'}, {'comment_id': 690529027, 'comment_body': 'Does this give a wrong result?', 'comment_created': datetime.datetime(2021, 8, 17, 16, 22, 48, tzinfo=datetime.timezone.utc), 'commenter': 'jksuom', 'type': 'User'}, {'comment_id': 692033197, 'comment_body': 'This could probably be `return loggamma(z0)` as `gamma` is nonzero everywhere.', 'comment_created': datetime.datetime(2021, 8, 19, 11, 42, 36, tzinfo=datetime.timezone.utc), 'commenter': 'jksuom', 'type': 'User'}, {'comment_id': 692036589, 'comment_body': 'Strictly speaking, we should also handle the poles of `gamma(z)` at `z = 0, -1, -2, ...` but that does not seem necessary for now.', 'comment_created': datetime.datetime(2021, 8, 19, 11, 48, 5, tzinfo=datetime.timezone.utc), 'commenter': 'jksuom', 'type': 'User'}, {'comment_id': 693500256, 'comment_body': 'It can be changed to that when `logx` is None, otherwise it may give unexpected results', 'comment_created': datetime.datetime(2021, 8, 22, 13, 10, 3, tzinfo=datetime.timezone.utc), 'commenter': '0sidharth', 'type': 'User'}, {'comment_id': 761265137, 'comment_body': '```suggestion\r\n\r\n```', 'comment_created': datetime.datetime(2021, 12, 2, 16, 29, 46, tzinfo=datetime.timezone.utc), 'commenter': 'oscargus', 'type': 'User'}, {'comment_id': 761270013, 'comment_body': '```suggestion\r\n    from sympy import AccumBounds\r\n```', 'comment_created': datetime.datetime(2021, 12, 2, 16, 35, 9, tzinfo=datetime.timezone.utc), 'commenter': 'oscargus', 'type': 'User'}, {'comment_id': 761270621, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 12, 2, 16, 35, 52, tzinfo=datetime.timezone.utc), 'commenter': 'oscargus', 'type': 'User'}]","[{'commit_sha': 'dbd86f92bd2a7a12996ebf094a564ea3ebb621e5', 'committer_username': '0sidharth', 'committer_name': 'Sidharth Mundhra', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 4, 11, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c3be4d2205f618f4ba2b568212afc3f167b7167', 'committer_username': '0sidharth', 'committer_name': 'Sidharth Mundhra', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 4, 11, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99190bc1e6da5271aacdbfc73ec51c7240d50dde', 'committer_username': '0sidharth', 'committer_name': 'Sidharth Mundhra', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 4, 11, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '27eccb45e93fd7bd31bdc4747b11f6ebc15f21a0', 'committer_username': '0sidharth', 'committer_name': 'Sidharth Mundhra', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 4, 11, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd7a6d3f8f4fa6f3ccce88ecee8ed7596a61aa721', 'committer_username': '0sidharth', 'committer_name': 'Sidharth Mundhra', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 4, 11, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'adab68cf71ceb7c4b9a782c579d124ea35d4b788', 'committer_username': '0sidharth', 'committer_name': 'Sidharth Mundhra', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 4, 11, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90af98ceb6339a7cc550956e04f9b60e2e14fc4c', 'committer_username': '0sidharth', 'committer_name': 'Sidharth Mundhra', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 4, 11, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45007acead92caccad645fd0439c7d09715b9080', 'committer_username': '0sidharth', 'committer_name': 'Sidharth Mundhra', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 4, 11, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5255687367d3190fdc2dda678cf525900cab85c9', 'committer_username': '0sidharth', 'committer_name': 'Sidharth Mundhra', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 4, 11, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8be568743e9e019c0cdd103b621a8d231c839eb', 'committer_username': '0sidharth', 'committer_name': 'Sidharth Mundhra', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 4, 11, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '403a76e9404e9c6f2c82c1fd701cb4665880d103', 'committer_username': 'oscargus', 'committer_name': 'Oscar Gustafsson', 'committer_email': None, 'commit_date': datetime.datetime(2014, 7, 9, 13, 51, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef2de90322cd401dc269d9eaa3ddf1356da8e671', 'committer_username': 'oscargus', 'committer_name': 'Oscar Gustafsson', 'committer_email': None, 'commit_date': datetime.datetime(2014, 7, 9, 13, 51, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46d985ca4b89e9078af47793d0419ec43454ff1b', 'committer_username': 'oscargus', 'committer_name': 'Oscar Gustafsson', 'committer_email': None, 'commit_date': datetime.datetime(2014, 7, 9, 13, 51, 58, tzinfo=datetime.timezone.utc)}]",Sidharth Mundhra,56464077,,User,,12,,15,22

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
640534,sympy,sympy/sympy,Python,4367,12705,293,1320,58687,5124,14,718,"[{'id': 945172641, 'number': 23539, 'closed': None, 'created': datetime.datetime(2022, 5, 24, 5, 25, 19, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 26, 'deletions': 17, 'state': 'open'}, {'id': 748367650, 'number': 22213, 'closed': datetime.datetime(2021, 10, 4, 14, 28, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 3, 17, 29, 16, tzinfo=datetime.timezone.utc), 'time_taken': 75561.0, 'time_delta': '20:59:21', 'additions': 56, 'deletions': 26, 'state': 'closed'}, {'id': 745955531, 'number': 22182, 'closed': datetime.datetime(2021, 10, 1, 8, 6, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 29, 17, 22, 57, tzinfo=datetime.timezone.utc), 'time_taken': 139403.0, 'time_delta': '1 day, 14:43:23', 'additions': 15, 'deletions': 10, 'state': 'closed'}, {'id': 745521811, 'number': 22179, 'closed': datetime.datetime(2021, 9, 29, 11, 8, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 29, 8, 53, 33, tzinfo=datetime.timezone.utc), 'time_taken': 8117.0, 'time_delta': '2:15:17', 'additions': 7, 'deletions': 1, 'state': 'closed'}, {'id': 705872310, 'number': 21837, 'closed': None, 'created': datetime.datetime(2021, 8, 7, 10, 36, 20, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 148, 'deletions': 81, 'state': 'open'}, {'id': 700706619, 'number': 21805, 'closed': datetime.datetime(2021, 7, 31, 16, 40, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 31, 12, 56, 31, tzinfo=datetime.timezone.utc), 'time_taken': 13421.0, 'time_delta': '3:43:41', 'additions': 55, 'deletions': 49, 'state': 'closed'}, {'id': 696325133, 'number': 21775, 'closed': datetime.datetime(2021, 7, 25, 16, 21, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 24, 9, 44, 48, tzinfo=datetime.timezone.utc), 'time_taken': 110217.0, 'time_delta': '1 day, 6:36:57', 'additions': 199, 'deletions': 86, 'state': 'closed'}, {'id': 687283029, 'number': 21731, 'closed': datetime.datetime(2021, 7, 15, 8, 2, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 11, 6, 26, 57, tzinfo=datetime.timezone.utc), 'time_taken': 351332.0, 'time_delta': '4 days, 1:35:32', 'additions': 177, 'deletions': 101, 'state': 'closed'}, {'id': 664606680, 'number': 21589, 'closed': datetime.datetime(2021, 7, 5, 16, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 8, 9, 48, 52, tzinfo=datetime.timezone.utc), 'time_taken': 2357768.0, 'time_delta': '27 days, 6:56:08', 'additions': 460, 'deletions': 237, 'state': 'closed'}, {'id': 609709270, 'number': 21253, 'closed': datetime.datetime(2021, 6, 1, 5, 44, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 6, 9, 48, 55, tzinfo=datetime.timezone.utc), 'time_taken': 4823747.0, 'time_delta': '55 days, 19:55:47', 'additions': 103, 'deletions': 52, 'state': 'closed'}, {'id': 592361643, 'number': 21078, 'closed': datetime.datetime(2021, 3, 15, 15, 55, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 13, 13, 18, 9, tzinfo=datetime.timezone.utc), 'time_taken': 182226.0, 'time_delta': '2 days, 2:37:06', 'additions': 12, 'deletions': 8, 'state': 'closed'}, {'id': 585354701, 'number': 21042, 'closed': datetime.datetime(2021, 3, 5, 11, 3, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 5, 6, 20, 44, tzinfo=datetime.timezone.utc), 'time_taken': 16949.0, 'time_delta': '4:42:29', 'additions': 15, 'deletions': 10, 'state': 'closed'}, {'id': 574002081, 'number': 20967, 'closed': datetime.datetime(2021, 3, 13, 23, 13, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 16, 7, 56, 22, tzinfo=datetime.timezone.utc), 'time_taken': 2215044.0, 'time_delta': '25 days, 15:17:24', 'additions': 73, 'deletions': 21, 'state': 'closed'}, {'id': 565805923, 'number': 20896, 'closed': datetime.datetime(2021, 2, 6, 12, 2, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 2, 9, 35, 39, tzinfo=datetime.timezone.utc), 'time_taken': 354438.0, 'time_delta': '4 days, 2:27:18', 'additions': 2, 'deletions': 82, 'state': 'closed'}, {'id': 564836253, 'number': 20888, 'closed': datetime.datetime(2021, 2, 24, 13, 12, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 1, 4, 45, 34, tzinfo=datetime.timezone.utc), 'time_taken': 2017604.0, 'time_delta': '23 days, 8:26:44', 'additions': 124, 'deletions': 3, 'state': 'closed'}, {'id': 564832688, 'number': 20887, 'closed': datetime.datetime(2021, 2, 27, 10, 30, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 1, 4, 35, 45, tzinfo=datetime.timezone.utc), 'time_taken': 2267673.0, 'time_delta': '26 days, 5:54:33', 'additions': 39, 'deletions': 1, 'state': 'closed'}, {'id': 564826904, 'number': 20886, 'closed': datetime.datetime(2021, 3, 13, 9, 41, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 1, 4, 18, 19, tzinfo=datetime.timezone.utc), 'time_taken': 3475365.0, 'time_delta': '40 days, 5:22:45', 'additions': 146, 'deletions': 17, 'state': 'closed'}, {'id': 561678502, 'number': 20863, 'closed': datetime.datetime(2021, 2, 2, 11, 37, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 26, 10, 14, 57, tzinfo=datetime.timezone.utc), 'time_taken': 609770.0, 'time_delta': '7 days, 1:22:50', 'additions': 21, 'deletions': 12, 'state': 'closed'}, {'id': 555739713, 'number': 20803, 'closed': datetime.datetime(2021, 2, 12, 19, 30, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 15, 14, 38, 25, tzinfo=datetime.timezone.utc), 'time_taken': 2436743.0, 'time_delta': '28 days, 4:52:23', 'additions': 42, 'deletions': 9, 'state': 'closed'}, {'id': 552768596, 'number': 20776, 'closed': datetime.datetime(2021, 1, 25, 13, 2, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 11, 14, 12, tzinfo=datetime.timezone.utc), 'time_taken': 1205433.0, 'time_delta': '13 days, 22:50:33', 'additions': 7, 'deletions': 0, 'state': 'closed'}, {'id': 552727583, 'number': 20775, 'closed': datetime.datetime(2021, 1, 11, 17, 2, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 11, 13, 4, 11, tzinfo=datetime.timezone.utc), 'time_taken': 14305.0, 'time_delta': '3:58:25', 'additions': 14, 'deletions': 0, 'state': 'closed'}, {'id': 550477372, 'number': 20754, 'closed': datetime.datetime(2021, 2, 16, 16, 22, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 6, 14, 52, 55, tzinfo=datetime.timezone.utc), 'time_taken': 3547754.0, 'time_delta': '41 days, 1:29:14', 'additions': 26, 'deletions': 12, 'state': 'closed'}, {'id': 547841086, 'number': 20721, 'closed': datetime.datetime(2021, 1, 3, 11, 39, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 3, 6, 53, 2, tzinfo=datetime.timezone.utc), 'time_taken': 17178.0, 'time_delta': '4:46:18', 'additions': 19, 'deletions': 5, 'state': 'closed'}, {'id': 545965176, 'number': 20686, 'closed': datetime.datetime(2021, 1, 4, 6, 4, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 12, 28, 7, 12, 20, tzinfo=datetime.timezone.utc), 'time_taken': 600755.0, 'time_delta': '6 days, 22:52:35', 'additions': 23, 'deletions': 0, 'state': 'closed'}, {'id': 545673183, 'number': 20667, 'closed': datetime.datetime(2020, 12, 26, 15, 20, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 12, 26, 8, 58, 12, tzinfo=datetime.timezone.utc), 'time_taken': 22956.0, 'time_delta': '6:22:36', 'additions': 26, 'deletions': 0, 'state': 'closed'}, {'id': 543298724, 'number': 20639, 'closed': datetime.datetime(2021, 1, 10, 6, 33, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 12, 21, 7, 42, 53, tzinfo=datetime.timezone.utc), 'time_taken': 1723834.0, 'time_delta': '19 days, 22:50:34', 'additions': 62, 'deletions': 13, 'state': 'closed'}, {'id': 542516301, 'number': 20626, 'closed': datetime.datetime(2021, 1, 8, 6, 22, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 12, 18, 12, 32, 54, tzinfo=datetime.timezone.utc), 'time_taken': 1792200.0, 'time_delta': '20 days, 17:50:00', 'additions': 122, 'deletions': 42, 'state': 'closed'}, {'id': 538053304, 'number': 20588, 'closed': datetime.datetime(2020, 12, 18, 12, 6, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 12, 12, 12, 4, 3, tzinfo=datetime.timezone.utc), 'time_taken': 518542.0, 'time_delta': '6 days, 0:02:22', 'additions': 324, 'deletions': 67, 'state': 'closed'}]"
