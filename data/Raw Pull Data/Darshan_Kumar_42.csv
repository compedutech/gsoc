pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1375187682,add support for pack to extend base images using daemon,"## Summary
<!-- Provide a high-level summary of the change. -->
As pack already has access to a daemon, it can apply the dockerfiles directly, saving the extended build base image in the daemon which gives us great performance benefits. Thus it will not need to use the extender phase of lifecycle. Additionally it will drop the requirement that the image being extended must be published to a registry.

## Output
<!-- If applicable, please provide examples of the output changes. -->

![image](https://github.com/buildpacks/pack/assets/95537957/91020386-6bcd-4660-ad58-af9401c130b0)

![image](https://github.com/buildpacks/pack/assets/95537957/163f2f17-6c18-40cf-800e-52464e54a47d)

## Related
<!-- If this PR addresses an issue, please provide issue number below. -->

Resolves #1623 
",False,1791,https://api.github.com/repos/buildpacks/pack/pulls/1791,https://github.com/buildpacks/pack/pull/1791,open,1051,49,19,34,10,114,1,0,[{'name': 'type/enhancement'}],2023-06-02 06:25:43+00:00,,0.0,,"[{'comment_id': 1215665553, 'comment_body': 'Nice :) We should really offer better helpers for this in the lifecycle...', 'comment_created': datetime.datetime(2023, 6, 3, 17, 7, 22, tzinfo=datetime.timezone.utc), 'commenter': 'natalieparellano', 'type': 'User'}, {'comment_id': 1215665663, 'comment_body': ""I'd need to double check, but I believe the build context when extending with kaniko is the app directory"", 'comment_created': datetime.datetime(2023, 6, 3, 17, 8, 41, tzinfo=datetime.timezone.utc), 'commenter': 'natalieparellano', 'type': 'User'}, {'comment_id': 1215665716, 'comment_body': 'We probably need to come up with some unique identifier here', 'comment_created': datetime.datetime(2023, 6, 3, 17, 9, 21, tzinfo=datetime.timezone.utc), 'commenter': 'natalieparellano', 'type': 'User'}, {'comment_id': 1215665864, 'comment_body': ""Build arguments should additionally include a UUID, user_id, group_id, and any arguments that were defined by the extension in `extend-config.toml`. If it's possible to re-use lifecycle methods to construct these, that would be awesome :)"", 'comment_created': datetime.datetime(2023, 6, 3, 17, 10, 36, tzinfo=datetime.timezone.utc), 'commenter': 'natalieparellano', 'type': 'User'}, {'comment_id': 1256175123, 'comment_body': 'Rather than hard-code the uid/gid we can get this information from the builder image', 'comment_created': datetime.datetime(2023, 7, 7, 17, 29, 16, tzinfo=datetime.timezone.utc), 'commenter': 'natalieparellano', 'type': 'User'}, {'comment_id': 1256176631, 'comment_body': '```suggestion\r\n```\r\nWe should be able to remove this block. We can extend the build image using the daemon even when we are publishing the app image to a registry', 'comment_created': datetime.datetime(2023, 7, 7, 17, 30, 34, tzinfo=datetime.timezone.utc), 'commenter': 'natalieparellano', 'type': 'User'}, {'comment_id': 1256177951, 'comment_body': '```suggestion\r\n\t\t\tgroup.Go(func() error {\r\n\t\t\t\tl.logger.Info(style.Step(""EXTENDING (RUN)""))\r\n\t\t\t\treturn l.ExtendRun(ctx, buildCache, phaseFactory)\r\n\t\t\t})\r\n```\r\n(as we saw worse performance using the daemon to extend the run image due to the time spent saving the extended layers out of the daemon)', 'comment_created': datetime.datetime(2023, 7, 7, 17, 31, 37, tzinfo=datetime.timezone.utc), 'commenter': 'natalieparellano', 'type': 'User'}, {'comment_id': 1256182112, 'comment_body': ""We should add a test for this... or maybe we could just rework the existing tests for `ExtendBuild` to cover the daemon case, since we probably won't use kaniko ever to extend the build image"", 'comment_created': datetime.datetime(2023, 7, 7, 17, 35, tzinfo=datetime.timezone.utc), 'commenter': 'natalieparellano', 'type': 'User'}, {'comment_id': 1256183941, 'comment_body': 'Perhaps something like `<original-builder-image-tag>-extended-randString(10)`', 'comment_created': datetime.datetime(2023, 7, 7, 17, 35, 36, tzinfo=datetime.timezone.utc), 'commenter': 'natalieparellano', 'type': 'User'}, {'comment_id': 1256185207, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 7, 7, 17, 36, 26, tzinfo=datetime.timezone.utc), 'commenter': 'natalieparellano', 'type': 'User'}, {'comment_id': 1256185614, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 7, 7, 17, 36, 42, tzinfo=datetime.timezone.utc), 'commenter': 'natalieparellano', 'type': 'User'}, {'comment_id': 1256185817, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 7, 7, 17, 36, 49, tzinfo=datetime.timezone.utc), 'commenter': 'natalieparellano', 'type': 'User'}, {'comment_id': 1256187793, 'comment_body': 'As we get closer to completion we could remove some of the profiling stuff in favor of descriptive log messages', 'comment_created': datetime.datetime(2023, 7, 7, 17, 37, 56, tzinfo=datetime.timezone.utc), 'commenter': 'natalieparellano', 'type': 'User'}, {'comment_id': 1256189333, 'comment_body': 'Can we re-use structs from the lifecycle?', 'comment_created': datetime.datetime(2023, 7, 7, 17, 38, 36, tzinfo=datetime.timezone.utc), 'commenter': 'natalieparellano', 'type': 'User'}, {'comment_id': 1256195112, 'comment_body': ""It's too bad that the lifecycle doesn't expose a more usable library method for this... if possible I'd be open to improving this in the lifecycle vs copying logic over here"", 'comment_created': datetime.datetime(2023, 7, 7, 17, 42, 25, tzinfo=datetime.timezone.utc), 'commenter': 'natalieparellano', 'type': 'User'}, {'comment_id': 1256196953, 'comment_body': 'Could we make `func (e *Extender) dockerfileFor(kind, extID string)` in lifecycle/extender.go a static and public method to avoid duplicating this logic?', 'comment_created': datetime.datetime(2023, 7, 7, 17, 43, 40, tzinfo=datetime.timezone.utc), 'commenter': 'natalieparellano', 'type': 'User'}, {'comment_id': 1256198207, 'comment_body': ""This (to the end of the file) can all probably be deleted if we're not doing run image extension, right?"", 'comment_created': datetime.datetime(2023, 7, 7, 17, 44, 31, tzinfo=datetime.timezone.utc), 'commenter': 'natalieparellano', 'type': 'User'}, {'comment_id': 1256201822, 'comment_body': 'The build context should be the application workspace, see here: https://github.com/buildpacks/lifecycle/blob/e06b69b5acb14e441659178b13de4a38e7a2e612/internal/extend/kaniko/dockerfile_applier.go#L88', 'comment_created': datetime.datetime(2023, 7, 7, 17, 46, 45, tzinfo=datetime.timezone.utc), 'commenter': 'natalieparellano', 'type': 'User'}, {'comment_id': 1256203102, 'comment_body': ""Actually build.Dockerfiles can't change the base image, so we should be good here"", 'comment_created': datetime.datetime(2023, 7, 7, 17, 47, 10, tzinfo=datetime.timezone.utc), 'commenter': 'natalieparellano', 'type': 'User'}, {'comment_id': 1256209738, 'comment_body': 'We need to build these up from the contents of extend-config.toml, see here: https://github.com/buildpacks/lifecycle/blob/e06b69b5acb14e441659178b13de4a38e7a2e612/extender.go#L313-L317 and here: https://github.com/buildpacks/lifecycle/blob/e06b69b5acb14e441659178b13de4a38e7a2e612/extender.go#L428-L432', 'comment_created': datetime.datetime(2023, 7, 7, 17, 49, 35, tzinfo=datetime.timezone.utc), 'commenter': 'natalieparellano', 'type': 'User'}, {'comment_id': 1256210262, 'comment_body': 'What does this do?', 'comment_created': datetime.datetime(2023, 7, 7, 17, 49, 58, tzinfo=datetime.timezone.utc), 'commenter': 'natalieparellano', 'type': 'User'}, {'comment_id': 1256213707, 'comment_body': 'Can we also log warnings if the extension leaves the user as root and/or if the final user is different from the original user? See here: https://github.com/buildpacks/lifecycle/blob/e06b69b5acb14e441659178b13de4a38e7a2e612/extender.go#L354 and here: https://github.com/buildpacks/lifecycle/blob/e06b69b5acb14e441659178b13de4a38e7a2e612/extender.go#L361', 'comment_created': datetime.datetime(2023, 7, 7, 17, 52, 44, tzinfo=datetime.timezone.utc), 'commenter': 'natalieparellano', 'type': 'User'}, {'comment_id': 1256221471, 'comment_body': 'We\'ll need to write some unit tests for this method, which will involve using a mock for the daemon. This is done in the lifecycle (but mocking the kaniko ""dockerfile applier"") here: https://github.com/buildpacks/lifecycle/blob/e06b69b5acb14e441659178b13de4a38e7a2e612/extender_test.go#L74 and making assertions here: https://github.com/buildpacks/lifecycle/blob/e06b69b5acb14e441659178b13de4a38e7a2e612/extender_test.go#L233-L256', 'comment_created': datetime.datetime(2023, 7, 7, 17, 56, 24, tzinfo=datetime.timezone.utc), 'commenter': 'natalieparellano', 'type': 'User'}, {'comment_id': 1287641457, 'comment_body': 'We could likely do `archive.ReadDirAsTar(l.opts.AppPath, ""/workspace"", blah`', 'comment_created': datetime.datetime(2023, 8, 8, 20, 10, 39, tzinfo=datetime.timezone.utc), 'commenter': 'natalieparellano', 'type': 'User'}, {'comment_id': 1287644026, 'comment_body': ""Looks good :) let's also test 2 extensions if possible. Ideally we'd want to show that the state from the first extension is persisted to the second extension. This might be a bit tough with our mocks, but we could at least show that the image reference is threaded through."", 'comment_created': datetime.datetime(2023, 8, 8, 20, 13, 55, tzinfo=datetime.timezone.utc), 'commenter': 'natalieparellano', 'type': 'User'}, {'comment_id': 1295636905, 'comment_body': 'fixed in the latest commit', 'comment_created': datetime.datetime(2023, 8, 16, 9, 34, 32, tzinfo=datetime.timezone.utc), 'commenter': 'itsdarshankumar', 'type': 'User'}, {'comment_id': 1295638042, 'comment_body': 'added the tests :)', 'comment_created': datetime.datetime(2023, 8, 16, 9, 35, 37, tzinfo=datetime.timezone.utc), 'commenter': 'itsdarshankumar', 'type': 'User'}, {'comment_id': 1295638246, 'comment_body': 'done', 'comment_created': datetime.datetime(2023, 8, 16, 9, 35, 49, tzinfo=datetime.timezone.utc), 'commenter': 'itsdarshankumar', 'type': 'User'}, {'comment_id': 1295651693, 'comment_body': 'done', 'comment_created': datetime.datetime(2023, 8, 16, 9, 47, 19, tzinfo=datetime.timezone.utc), 'commenter': 'itsdarshankumar', 'type': 'User'}, {'comment_id': 1295652003, 'comment_body': 'done in the latest commit', 'comment_created': datetime.datetime(2023, 8, 16, 9, 47, 36, tzinfo=datetime.timezone.utc), 'commenter': 'itsdarshankumar', 'type': 'User'}, {'comment_id': 1295967054, 'comment_body': 'We should remove this or use the logger instead', 'comment_created': datetime.datetime(2023, 8, 16, 14, 1, 36, tzinfo=datetime.timezone.utc), 'commenter': 'natalieparellano', 'type': 'User'}, {'comment_id': 1296068847, 'comment_body': 'Update: maybe we can just get rid of this operation. `CNB_USER_ID` should still be set in the builder env, and the lifecycle will drop privileges to that user before running the build command.', 'comment_created': datetime.datetime(2023, 8, 16, 15, 14, 15, tzinfo=datetime.timezone.utc), 'commenter': 'natalieparellano', 'type': 'User'}, {'comment_id': 1296073591, 'comment_body': 'Or we could use `l.opts.Builder.UID()` etc', 'comment_created': datetime.datetime(2023, 8, 16, 15, 17, 56, tzinfo=datetime.timezone.utc), 'commenter': 'natalieparellano', 'type': 'User'}, {'comment_id': 1297061074, 'comment_body': 'done', 'comment_created': datetime.datetime(2023, 8, 17, 11, 1, 50, tzinfo=datetime.timezone.utc), 'commenter': 'itsdarshankumar', 'type': 'User'}, {'comment_id': 1297061196, 'comment_body': 'done', 'comment_created': datetime.datetime(2023, 8, 17, 11, 1, 58, tzinfo=datetime.timezone.utc), 'commenter': 'itsdarshankumar', 'type': 'User'}, {'comment_id': 1300195501, 'comment_body': '```suggestion\r\n\t""bytes""\r\n\t""context""\r\n\t""io""\r\n\t""path/filepath""\r\n\t""strconv""\r\n\t""strings""\r\n\t""testing""\r\n\r\n\t""github.com/apex/log""\r\n\t""github.com/docker/docker/api/types""\r\n\t""github.com/golang/mock/gomock""\r\n\t""github.com/heroku/color""\r\n\t""github.com/sclevine/spec""\r\n\t""github.com/sclevine/spec/report""\r\n\r\n\t""github.com/buildpacks/pack/pkg/archive""\r\n\t""github.com/buildpacks/pack/pkg/logging""\r\n\th ""github.com/buildpacks/pack/testhelpers""\r\n\t""github.com/buildpacks/pack/internal/build""\r\n\t""github.com/buildpacks/pack/internal/build/fakes""\r\n\tmockdocker ""github.com/buildpacks/pack/internal/build/mockdocker""\r\n```\r\nThis groups the imports by go standard library, external, and internal - you might need to additionally sort them', 'comment_created': datetime.datetime(2023, 8, 21, 14, 30, 7, tzinfo=datetime.timezone.utc), 'commenter': 'natalieparellano', 'type': 'User'}, {'comment_id': 1300196780, 'comment_body': ""Let's remove it for now..."", 'comment_created': datetime.datetime(2023, 8, 21, 14, 31, 8, tzinfo=datetime.timezone.utc), 'commenter': 'natalieparellano', 'type': 'User'}, {'comment_id': 1300197462, 'comment_body': ""I couldn't leave a code suggestion as the lines didn't change, but could we group the imports here as well?"", 'comment_created': datetime.datetime(2023, 8, 21, 14, 31, 40, tzinfo=datetime.timezone.utc), 'commenter': 'natalieparellano', 'type': 'User'}, {'comment_id': 1300199107, 'comment_body': 'Can we leave a code comment here that we are planning to deprecate the older method?', 'comment_created': datetime.datetime(2023, 8, 21, 14, 32, 49, tzinfo=datetime.timezone.utc), 'commenter': 'natalieparellano', 'type': 'User'}, {'comment_id': 1300200484, 'comment_body': 'Did we add the warnings anywhere?', 'comment_created': datetime.datetime(2023, 8, 21, 14, 33, 47, tzinfo=datetime.timezone.utc), 'commenter': 'natalieparellano', 'type': 'User'}, {'comment_id': 1300200652, 'comment_body': 'This can be deleted', 'comment_created': datetime.datetime(2023, 8, 21, 14, 33, 55, tzinfo=datetime.timezone.utc), 'commenter': 'natalieparellano', 'type': 'User'}, {'comment_id': 1300201043, 'comment_body': 'This still needs to be removed I think', 'comment_created': datetime.datetime(2023, 8, 21, 14, 34, 14, tzinfo=datetime.timezone.utc), 'commenter': 'natalieparellano', 'type': 'User'}, {'comment_id': 1300201219, 'comment_body': 'Same here', 'comment_created': datetime.datetime(2023, 8, 21, 14, 34, 22, tzinfo=datetime.timezone.utc), 'commenter': 'natalieparellano', 'type': 'User'}, {'comment_id': 1300201369, 'comment_body': 'Same here', 'comment_created': datetime.datetime(2023, 8, 21, 14, 34, 29, tzinfo=datetime.timezone.utc), 'commenter': 'natalieparellano', 'type': 'User'}, {'comment_id': 1300202089, 'comment_body': '```suggestion\r\nfunc WithUser(uid int, gid int) PhaseConfigProviderOperation {\r\n```\r\nMore descriptive and accurate, I think', 'comment_created': datetime.datetime(2023, 8, 21, 14, 35, 3, tzinfo=datetime.timezone.utc), 'commenter': 'natalieparellano', 'type': 'User'}, {'comment_id': 1300202576, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 8, 21, 14, 35, 27, tzinfo=datetime.timezone.utc), 'commenter': 'natalieparellano', 'type': 'User'}, {'comment_id': 1300202706, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 8, 21, 14, 35, 34, tzinfo=datetime.timezone.utc), 'commenter': 'natalieparellano', 'type': 'User'}, {'comment_id': 1300202967, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 8, 21, 14, 35, 46, tzinfo=datetime.timezone.utc), 'commenter': 'natalieparellano', 'type': 'User'}, {'comment_id': 1300203566, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 8, 21, 14, 36, 14, tzinfo=datetime.timezone.utc), 'commenter': 'natalieparellano', 'type': 'User'}, {'comment_id': 1300204784, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 8, 21, 14, 37, 8, tzinfo=datetime.timezone.utc), 'commenter': 'natalieparellano', 'type': 'User'}, {'comment_id': 1300205141, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 8, 21, 14, 37, 24, tzinfo=datetime.timezone.utc), 'commenter': 'natalieparellano', 'type': 'User'}, {'comment_id': 1303012758, 'comment_body': 'not yet, then we need to inspect the image as well\r\n', 'comment_created': datetime.datetime(2023, 8, 23, 13, 21, 4, tzinfo=datetime.timezone.utc), 'commenter': 'itsdarshankumar', 'type': 'User'}, {'comment_id': 1303015506, 'comment_body': 'done', 'comment_created': datetime.datetime(2023, 8, 23, 13, 23, 4, tzinfo=datetime.timezone.utc), 'commenter': 'itsdarshankumar', 'type': 'User'}, {'comment_id': 1303015783, 'comment_body': 'done', 'comment_created': datetime.datetime(2023, 8, 23, 13, 23, 16, tzinfo=datetime.timezone.utc), 'commenter': 'itsdarshankumar', 'type': 'User'}, {'comment_id': 1303016825, 'comment_body': 'done', 'comment_created': datetime.datetime(2023, 8, 23, 13, 24, 4, tzinfo=datetime.timezone.utc), 'commenter': 'itsdarshankumar', 'type': 'User'}, {'comment_id': 1303038189, 'comment_body': 'done', 'comment_created': datetime.datetime(2023, 8, 23, 13, 38, 56, tzinfo=datetime.timezone.utc), 'commenter': 'itsdarshankumar', 'type': 'User'}, {'comment_id': 1303038764, 'comment_body': 'done', 'comment_created': datetime.datetime(2023, 8, 23, 13, 39, 20, tzinfo=datetime.timezone.utc), 'commenter': 'itsdarshankumar', 'type': 'User'}, {'comment_id': 1303039795, 'comment_body': 'yes, it was for run-extension, removed it now', 'comment_created': datetime.datetime(2023, 8, 23, 13, 40, 2, tzinfo=datetime.timezone.utc), 'commenter': 'itsdarshankumar', 'type': 'User'}, {'comment_id': 1306054617, 'comment_body': ""Ideally here we'd also want to check that the options provided to the second Dockerfile are correct. `Dockerfile` and `BuildArgs` seem to be the most important to test."", 'comment_created': datetime.datetime(2023, 8, 25, 19, 10, 13, tzinfo=datetime.timezone.utc), 'commenter': 'natalieparellano', 'type': 'User'}, {'comment_id': 1306055917, 'comment_body': 'Nice comment :)', 'comment_created': datetime.datetime(2023, 8, 25, 19, 11, 5, tzinfo=datetime.timezone.utc), 'commenter': 'natalieparellano', 'type': 'User'}, {'comment_id': 1306056845, 'comment_body': ""nit: `filepath.Join` would be safer here for portability. But, we should probably also just skip these tests on Windows as extensions aren't supported there."", 'comment_created': datetime.datetime(2023, 8, 25, 19, 12, tzinfo=datetime.timezone.utc), 'commenter': 'natalieparellano', 'type': 'User'}, {'comment_id': 1306058387, 'comment_body': ""Aren't we removing the publish restriction?"", 'comment_created': datetime.datetime(2023, 8, 25, 19, 12, 45, tzinfo=datetime.timezone.utc), 'commenter': 'natalieparellano', 'type': 'User'}, {'comment_id': 1306064001, 'comment_body': 'I wonder if it might be better to use a UUID here, to avoid tagging over another image that might already be called `<builder>-extended`. However that might cause the number of images to in the daemon to balloon... I think we can leave it for now unless others feel strongly about it.', 'comment_created': datetime.datetime(2023, 8, 25, 19, 15, 5, tzinfo=datetime.timezone.utc), 'commenter': 'natalieparellano', 'type': 'User'}, {'comment_id': 1306065910, 'comment_body': ""nit: can we make this an anonymous function, or move it closer to where it's being used, so that it's easier for the reader?"", 'comment_created': datetime.datetime(2023, 8, 25, 19, 17, 23, tzinfo=datetime.timezone.utc), 'commenter': 'natalieparellano', 'type': 'User'}, {'comment_id': 1306068508, 'comment_body': 'Technically, a Dockerfile could change the user on the extended image, and we want to persist that user for the next Dockerfile. Can you get the config for the immediate extended image within this loop?', 'comment_created': datetime.datetime(2023, 8, 25, 19, 20, 42, tzinfo=datetime.timezone.utc), 'commenter': 'natalieparellano', 'type': 'User'}, {'comment_id': 1306072219, 'comment_body': '```suggestion\r\n\t\tfor _, arg := range dockerfile.Args {\r\n\t\t\tbuildArguments[arg.Name] = &arg.Value\r\n\t\t}\r\n```\r\nThis might read better', 'comment_created': datetime.datetime(2023, 8, 25, 19, 25, 21, tzinfo=datetime.timezone.utc), 'commenter': 'natalieparellano', 'type': 'User'}, {'comment_id': 1306089458, 'comment_body': 'Must the dockerfile reside within the build context? For example,\r\n\r\n`$  docker build -t test -f ./Dockerfile ../other-dir/`\r\n`$  docker build -t test -f ../other-dir/Dockerfile .`\r\n\r\nboth work when running the CLI.', 'comment_created': datetime.datetime(2023, 8, 25, 19, 47, 1, tzinfo=datetime.timezone.utc), 'commenter': 'natalieparellano', 'type': 'User'}, {'comment_id': 1306097894, 'comment_body': 'Ah nevermind, it appears that `docker build` copies the Dockerfile into the context :)', 'comment_created': datetime.datetime(2023, 8, 25, 19, 58, 21, tzinfo=datetime.timezone.utc), 'commenter': 'natalieparellano', 'type': 'User'}, {'comment_id': 1306315691, 'comment_body': 'then we need to inspect the image!', 'comment_created': datetime.datetime(2023, 8, 26, 4, 8, 38, tzinfo=datetime.timezone.utc), 'commenter': 'itsdarshankumar', 'type': 'User'}, {'comment_id': 1306315897, 'comment_body': 'done', 'comment_created': datetime.datetime(2023, 8, 26, 4, 10, 26, tzinfo=datetime.timezone.utc), 'commenter': 'itsdarshankumar', 'type': 'User'}, {'comment_id': 1306316170, 'comment_body': 'oops, forgot to change here, done', 'comment_created': datetime.datetime(2023, 8, 26, 4, 11, 17, tzinfo=datetime.timezone.utc), 'commenter': 'itsdarshankumar', 'type': 'User'}, {'comment_id': 1306317916, 'comment_body': 'done', 'comment_created': datetime.datetime(2023, 8, 26, 4, 19, 15, tzinfo=datetime.timezone.utc), 'commenter': 'itsdarshankumar', 'type': 'User'}, {'comment_id': 1306319248, 'comment_body': ""no, actually i did this bcs ideally we shouldn't export a loop variable's pointer so made a copy of the loop variable"", 'comment_created': datetime.datetime(2023, 8, 26, 4, 30, 31, tzinfo=datetime.timezone.utc), 'commenter': 'itsdarshankumar', 'type': 'User'}, {'comment_id': 1309595349, 'comment_body': 'done', 'comment_created': datetime.datetime(2023, 8, 30, 3, 40, 43, tzinfo=datetime.timezone.utc), 'commenter': 'itsdarshankumar', 'type': 'User'}, {'comment_id': 1309652246, 'comment_body': 'done', 'comment_created': datetime.datetime(2023, 8, 30, 4, 49, 34, tzinfo=datetime.timezone.utc), 'commenter': 'itsdarshankumar', 'type': 'User'}, {'comment_id': 1310810978, 'comment_body': 'I think we should document this in some place, maybe in the command help? ', 'comment_created': datetime.datetime(2023, 8, 30, 20, 54, 27, tzinfo=datetime.timezone.utc), 'commenter': 'jjbustamante', 'type': 'User'}, {'comment_id': 1310853814, 'comment_body': '@itsdarshankumar please take a look at this suggestion, I think is very valid to make test useful', 'comment_created': datetime.datetime(2023, 8, 30, 21, 35, 28, tzinfo=datetime.timezone.utc), 'commenter': 'jjbustamante', 'type': 'User'}, {'comment_id': 1311267141, 'comment_body': 'Can we have some tests for this file and these helper functions? ', 'comment_created': datetime.datetime(2023, 8, 31, 8, 17, 20, tzinfo=datetime.timezone.utc), 'commenter': 'dlion', 'type': 'User'}, {'comment_id': 1311447005, 'comment_body': 'yess sure:)', 'comment_created': datetime.datetime(2023, 8, 31, 10, 46, 36, tzinfo=datetime.timezone.utc), 'commenter': 'itsdarshankumar', 'type': 'User'}, {'comment_id': 1311447474, 'comment_body': 'will add in the help!', 'comment_created': datetime.datetime(2023, 8, 31, 10, 47, 2, tzinfo=datetime.timezone.utc), 'commenter': 'itsdarshankumar', 'type': 'User'}, {'comment_id': 1311447854, 'comment_body': 'yes eyes on it :)', 'comment_created': datetime.datetime(2023, 8, 31, 10, 47, 27, tzinfo=datetime.timezone.utc), 'commenter': 'itsdarshankumar', 'type': 'User'}, {'comment_id': 1321627483, 'comment_body': 'I think that makes sense - we do this in the lifecycle here: https://github.com/buildpacks/lifecycle/blob/aeb177ca468cc814ab47fac0cb878497495b5819/extender.go#L329', 'comment_created': datetime.datetime(2023, 9, 11, 14, 16, 27, tzinfo=datetime.timezone.utc), 'commenter': 'natalieparellano', 'type': 'User'}, {'comment_id': 1321630035, 'comment_body': 'I think that makes sense - we do this in the lifecycle here: https://github.com/buildpacks/lifecycle/blob/aeb177ca468cc814ab47fac0cb878497495b5819/extender.go#L329', 'comment_created': datetime.datetime(2023, 9, 11, 14, 18, 13, tzinfo=datetime.timezone.utc), 'commenter': 'natalieparellano', 'type': 'User'}, {'comment_id': 1321633715, 'comment_body': 'nit: can we group imports here?', 'comment_created': datetime.datetime(2023, 9, 11, 14, 20, 44, tzinfo=datetime.timezone.utc), 'commenter': 'natalieparellano', 'type': 'User'}, {'comment_id': 1321634906, 'comment_body': '```suggestion\r\n\t""github.com/buildpacks/pack/pkg/archive""\r\n\t""github.com/buildpacks/pack/pkg/logging""\r\n```', 'comment_created': datetime.datetime(2023, 9, 11, 14, 21, 38, tzinfo=datetime.timezone.utc), 'commenter': 'natalieparellano', 'type': 'User'}, {'comment_id': 1321635902, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 9, 11, 14, 22, 20, tzinfo=datetime.timezone.utc), 'commenter': 'natalieparellano', 'type': 'User'}, {'comment_id': 1321906635, 'comment_body': 'I\'m not able to leave a code suggestion, but lines 483-495 could become something like \r\n\r\n```\r\n\tkanikoCacheBindOp := NullOp()\r\n\tif l.platformAPI.AtLeast(""0.12"") {\r\n\t\tif l.runImageChanged() || l.hasExtensionsForRun() {\r\n\t\t\tregistryImages = append(registryImages, l.runImageAfterExtensions())\r\n\t\t}\r\n\t\tif l.hasExtensionsForRun() {\r\n\t\t\tkanikoCacheBindOp = WithBinds(fmt.Sprintf(""%s:%s"", kanikoCache.Name(), l.mountPaths.kanikoCacheDir()))\r\n\t\t}\r\n\t}\r\n```\r\n\r\nWe no longer need to provide `-build-image` to the restorer, because we don\'t need to fetch any information about it to provide to kaniko (since we\'re not using kaniko). This eliminates the requirement that the builder image must reside in a registry.', 'comment_created': datetime.datetime(2023, 9, 11, 18, 16, 23, tzinfo=datetime.timezone.utc), 'commenter': 'natalieparellano', 'type': 'User'}, {'comment_id': 1321917502, 'comment_body': ""I'm not totally sure where this would go... maybe a warning when we begin to extend the builder?"", 'comment_created': datetime.datetime(2023, 9, 11, 18, 27, 35, tzinfo=datetime.timezone.utc), 'commenter': 'natalieparellano', 'type': 'User'}, {'comment_id': 1349604879, 'comment_body': 'hey @dlion added the tests, sorry for getting late!', 'comment_created': datetime.datetime(2023, 10, 8, 1, 10, 5, tzinfo=datetime.timezone.utc), 'commenter': 'itsdarshankumar', 'type': 'User'}, {'comment_id': 1393205939, 'comment_body': 'Do we have a logger we can pass this message to?', 'comment_created': datetime.datetime(2023, 11, 14, 20, 6, 32, tzinfo=datetime.timezone.utc), 'commenter': 'natalieparellano', 'type': 'User'}, {'comment_id': 1393444760, 'comment_body': ""I'm not sure why we need to call `archive.AggregateError` here as `completeErr` is always nil, no?"", 'comment_created': datetime.datetime(2023, 11, 14, 23, 38, 36, tzinfo=datetime.timezone.utc), 'commenter': 'natalieparellano', 'type': 'User'}, {'comment_id': 1394359162, 'comment_body': 'To be fixed in https://github.com/itsdarshankumar/pack/pull/1', 'comment_created': datetime.datetime(2023, 11, 15, 15, 21, 21, tzinfo=datetime.timezone.utc), 'commenter': 'natalieparellano', 'type': 'User'}, {'comment_id': 1394359720, 'comment_body': 'To be fixed in https://github.com/itsdarshankumar/pack/pull/1', 'comment_created': datetime.datetime(2023, 11, 15, 15, 21, 48, tzinfo=datetime.timezone.utc), 'commenter': 'natalieparellano', 'type': 'User'}, {'comment_id': 1394360262, 'comment_body': 'To be fixed in https://github.com/itsdarshankumar/pack/pull/1', 'comment_created': datetime.datetime(2023, 11, 15, 15, 22, 9, tzinfo=datetime.timezone.utc), 'commenter': 'natalieparellano', 'type': 'User'}, {'comment_id': 1394360589, 'comment_body': 'To be fixed in https://github.com/itsdarshankumar/pack/pull/1', 'comment_created': datetime.datetime(2023, 11, 15, 15, 22, 23, tzinfo=datetime.timezone.utc), 'commenter': 'natalieparellano', 'type': 'User'}, {'comment_id': 1394369778, 'comment_body': ""I think we still need to do this, no? Have a look at `DoAndReturn` (we use this a bunch in the lifecycle) as a mechanism for testing some (but not all) inputs. This can be useful since one of the build args is a UUID and we can't predict its value in advance. "", 'comment_created': datetime.datetime(2023, 11, 15, 15, 28, 52, tzinfo=datetime.timezone.utc), 'commenter': 'natalieparellano', 'type': 'User'}, {'comment_id': 1394372281, 'comment_body': 'Is this still outstanding?', 'comment_created': datetime.datetime(2023, 11, 15, 15, 30, 38, tzinfo=datetime.timezone.utc), 'commenter': 'natalieparellano', 'type': 'User'}, {'comment_id': 1394373549, 'comment_body': 'Is it possible to write a test for this?', 'comment_created': datetime.datetime(2023, 11, 15, 15, 31, 31, tzinfo=datetime.timezone.utc), 'commenter': 'natalieparellano', 'type': 'User'}, {'comment_id': 1394382797, 'comment_body': 'Is this still outstanding? Some kind of messaging would surely help.', 'comment_created': datetime.datetime(2023, 11, 15, 15, 38, 12, tzinfo=datetime.timezone.utc), 'commenter': 'natalieparellano', 'type': 'User'}, {'comment_id': 1428358008, 'comment_body': 'We need to call the `archive.AggregateError` so that any error during the execution of the deferred function (`tarWriter.Close()`) will affect the final value of completeErr and gives the error in the return statement.', 'comment_created': datetime.datetime(2023, 12, 15, 18, 46, 34, tzinfo=datetime.timezone.utc), 'commenter': 'itsdarshankumar', 'type': 'User'}, {'comment_id': 1428358255, 'comment_body': 'done!', 'comment_created': datetime.datetime(2023, 12, 15, 18, 46, 50, tzinfo=datetime.timezone.utc), 'commenter': 'itsdarshankumar', 'type': 'User'}, {'comment_id': 1428451874, 'comment_body': 'done!', 'comment_created': datetime.datetime(2023, 12, 15, 20, 29, 48, tzinfo=datetime.timezone.utc), 'commenter': 'itsdarshankumar', 'type': 'User'}, {'comment_id': 1428460501, 'comment_body': 'args for `ImageBuildOptions` method of docker to make the image', 'comment_created': datetime.datetime(2023, 12, 15, 20, 40, 22, tzinfo=datetime.timezone.utc), 'commenter': 'itsdarshankumar', 'type': 'User'}, {'comment_id': 1428465234, 'comment_body': 'done!!', 'comment_created': datetime.datetime(2023, 12, 15, 20, 46, 37, tzinfo=datetime.timezone.utc), 'commenter': 'itsdarshankumar', 'type': 'User'}, {'comment_id': 1428465736, 'comment_body': 'done!', 'comment_created': datetime.datetime(2023, 12, 15, 20, 47, 14, tzinfo=datetime.timezone.utc), 'commenter': 'itsdarshankumar', 'type': 'User'}, {'comment_id': 1428466349, 'comment_body': 'added earlier!', 'comment_created': datetime.datetime(2023, 12, 15, 20, 48, 7, tzinfo=datetime.timezone.utc), 'commenter': 'itsdarshankumar', 'type': 'User'}, {'comment_id': 1428471303, 'comment_body': 'done!!', 'comment_created': datetime.datetime(2023, 12, 15, 20, 51, 27, tzinfo=datetime.timezone.utc), 'commenter': 'itsdarshankumar', 'type': 'User'}, {'comment_id': 1428471505, 'comment_body': 'done!!', 'comment_created': datetime.datetime(2023, 12, 15, 20, 51, 43, tzinfo=datetime.timezone.utc), 'commenter': 'itsdarshankumar', 'type': 'User'}, {'comment_id': 1436581787, 'comment_body': 'added!', 'comment_created': datetime.datetime(2023, 12, 26, 19, 13, 2, tzinfo=datetime.timezone.utc), 'commenter': 'itsdarshankumar', 'type': 'User'}, {'comment_id': 1436584046, 'comment_body': 'done!!\r\nadded a warning right after the start of phase', 'comment_created': datetime.datetime(2023, 12, 26, 19, 20, 36, tzinfo=datetime.timezone.utc), 'commenter': 'itsdarshankumar', 'type': 'User'}, {'comment_id': 1436584124, 'comment_body': '> I think we should document this in some place, maybe in the command help?\r\n\r\nalso added this too! would be surely helpful', 'comment_created': datetime.datetime(2023, 12, 26, 19, 20, 59, tzinfo=datetime.timezone.utc), 'commenter': 'itsdarshankumar', 'type': 'User'}, {'comment_id': 1436589407, 'comment_body': 'done in latest commit', 'comment_created': datetime.datetime(2023, 12, 26, 19, 39, 4, tzinfo=datetime.timezone.utc), 'commenter': 'itsdarshankumar', 'type': 'User'}, {'comment_id': 1436589571, 'comment_body': 'done!', 'comment_created': datetime.datetime(2023, 12, 26, 19, 39, 32, tzinfo=datetime.timezone.utc), 'commenter': 'itsdarshankumar', 'type': 'User'}, {'comment_id': 1436602944, 'comment_body': 'done!', 'comment_created': datetime.datetime(2023, 12, 26, 20, 25, 10, tzinfo=datetime.timezone.utc), 'commenter': 'itsdarshankumar', 'type': 'User'}]","[{'commit_sha': 'ca07b658a00f406cd88c0eeffe8902f9ccff1cb2', 'committer_username': 'itsdarshankumar', 'committer_name': 'Darshan Kumar', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 4, 15, 27, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'abdf62c431dab3248f8ccabc33e6231bb6a8b546', 'committer_username': 'itsdarshankumar', 'committer_name': 'Darshan Kumar', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 4, 15, 27, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c460c59ad9715ee1ef3373a86b5d5ec114b6573', 'committer_username': 'itsdarshankumar', 'committer_name': 'Darshan Kumar', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 4, 15, 27, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8710e464d91b14f9209375e5176dd6361440e849', 'committer_username': 'itsdarshankumar', 'committer_name': 'Darshan Kumar', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 4, 15, 27, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88c8fbdf753e7d8702f66930126012c5bd8182ce', 'committer_username': 'itsdarshankumar', 'committer_name': 'Darshan Kumar', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 4, 15, 27, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b8295c5ac15e5c0acebb5256b63e3d1bc3494120', 'committer_username': 'itsdarshankumar', 'committer_name': 'Darshan Kumar', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 4, 15, 27, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '98fd87d1b56e320add305e6af97786b49a275583', 'committer_username': 'itsdarshankumar', 'committer_name': 'Darshan Kumar', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 4, 15, 27, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ad4631dbd08d386e9aa08f8cb777d730f24a923', 'committer_username': 'itsdarshankumar', 'committer_name': 'Darshan Kumar', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 4, 15, 27, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '94662041de96c7ddd2d017db1e955a9b23b259dd', 'committer_username': 'itsdarshankumar', 'committer_name': 'Darshan Kumar', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 4, 15, 27, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e2fce6bc8cd76240a72c06db48311f959c8ee45', 'committer_username': 'itsdarshankumar', 'committer_name': 'Darshan Kumar', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 4, 15, 27, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8ac17142c46ccd06d9d75c0dd05795b8f96abee', 'committer_username': 'itsdarshankumar', 'committer_name': 'Darshan Kumar', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 4, 15, 27, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '888d1a82ec0dd4b83e28bb7f17374650bc8f0370', 'committer_username': 'itsdarshankumar', 'committer_name': 'Darshan Kumar', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 4, 15, 27, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f935dd23c0caa0d5c0bc3504c5c36613ebe90cdf', 'committer_username': 'itsdarshankumar', 'committer_name': 'Darshan Kumar', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 4, 15, 27, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38d0278a54b8c3a08149fed099c41bfd05f3902a', 'committer_username': 'itsdarshankumar', 'committer_name': 'Darshan Kumar', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 4, 15, 27, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b69ddad85c70150206987009c0d2af9e714eb955', 'committer_username': 'itsdarshankumar', 'committer_name': 'Darshan Kumar', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 4, 15, 27, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa78c43fc9ae44c0536ed14e371ae95691b83974', 'committer_username': 'itsdarshankumar', 'committer_name': 'Darshan Kumar', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 4, 15, 27, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57f88a21dba17e7902798fbfd10d29c8b7b8436f', 'committer_username': 'itsdarshankumar', 'committer_name': 'Darshan Kumar', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 4, 15, 27, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72c6fdef37b84d304189dfcd7ace390907473073', 'committer_username': 'itsdarshankumar', 'committer_name': 'Darshan Kumar', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 4, 15, 27, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02858bf0da3ff0382bb82190503bfd597b510659', 'committer_username': 'itsdarshankumar', 'committer_name': 'Darshan Kumar', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 4, 15, 27, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd33f1df95dc908edcbb6ca95425eb8e4863862af', 'committer_username': 'natalieparellano', 'committer_name': 'Natalie Arellano', 'committer_email': 'narellano@vmware.com', 'commit_date': datetime.datetime(2014, 3, 8, 21, 59, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40ca4f6e53787de67600fa8e378f0705ebd67e7f', 'committer_username': 'itsdarshankumar', 'committer_name': 'Darshan Kumar', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 4, 15, 27, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ca6ad194bb86104b01eea77d098dcd4e3737192', 'committer_username': 'itsdarshankumar', 'committer_name': 'Darshan Kumar', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 4, 15, 27, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e401acdcb1d41114e5d55e4ea61a5bc71b892c16', 'committer_username': 'itsdarshankumar', 'committer_name': 'Darshan Kumar', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 4, 15, 27, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd7ee2e4f05e58185e128b8524ce8b50e7c898a4', 'committer_username': 'natalieparellano', 'committer_name': 'Natalie Arellano', 'committer_email': 'narellano@vmware.com', 'commit_date': datetime.datetime(2014, 3, 8, 21, 59, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '77a2c5cc3bafb5032e4b6d8c179642e138e88334', 'committer_username': 'itsdarshankumar', 'committer_name': 'Darshan Kumar', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 4, 15, 27, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '147699b49b16f19793fac426577004059b85430a', 'committer_username': 'itsdarshankumar', 'committer_name': 'Darshan Kumar', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 4, 15, 27, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1311893b3681c3c5e46f2344e826bcc8afdffcdf', 'committer_username': 'itsdarshankumar', 'committer_name': 'Darshan Kumar', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 4, 15, 27, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e64a541410c3f9aa1810e059e9f81dfac0907b4', 'committer_username': 'itsdarshankumar', 'committer_name': 'Darshan Kumar', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 4, 15, 27, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb255dc33f3c490aab1c8d7c865eb29f11baedcb', 'committer_username': 'itsdarshankumar', 'committer_name': 'Darshan Kumar', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 4, 15, 27, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c560e9feae977a982e2636d056564848d07e5755', 'committer_username': 'itsdarshankumar', 'committer_name': 'Darshan Kumar', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 4, 15, 27, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7cf7e08d3849d0d42ee8ee99caeba80b18c8af43', 'committer_username': 'itsdarshankumar', 'committer_name': 'Darshan Kumar', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 4, 15, 27, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b416335945b051d5a9b347e3396b0deac437e200', 'committer_username': 'natalieparellano', 'committer_name': 'Natalie Arellano', 'committer_email': 'narellano@vmware.com', 'commit_date': datetime.datetime(2014, 3, 8, 21, 59, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b52e665ff73dff013e888b20fbc4a3482ae7f03', 'committer_username': 'itsdarshankumar', 'committer_name': 'Darshan Kumar', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 4, 15, 27, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'abb040c20663f6e17928e5021eb5d89d6b12cadb', 'committer_username': 'itsdarshankumar', 'committer_name': 'Darshan Kumar', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 4, 15, 27, 26, tzinfo=datetime.timezone.utc)}]",Darshan Kumar,95537957,,User,,33,,33,42

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
138544269,pack,buildpacks/pack,Go,283,2508,29,144,4557,125,69,29,"[{'id': 1375187682, 'number': 1791, 'closed': None, 'created': datetime.datetime(2023, 6, 2, 6, 25, 43, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 1051, 'deletions': 49, 'state': 'open'}, {'id': 1345589827, 'number': 1757, 'closed': datetime.datetime(2023, 5, 19, 16, 20, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 10, 14, 48, 10, tzinfo=datetime.timezone.utc), 'time_taken': 783169.0, 'time_delta': '9 days, 1:32:49', 'additions': 103, 'deletions': 20, 'state': 'closed'}, {'id': 1305220278, 'number': 1710, 'closed': datetime.datetime(2023, 4, 11, 14, 44, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 6, 20, 10, 37, tzinfo=datetime.timezone.utc), 'time_taken': 412437.0, 'time_delta': '4 days, 18:33:57', 'additions': 141, 'deletions': 64, 'state': 'closed'}, {'id': 1265203690, 'number': 1661, 'closed': datetime.datetime(2023, 3, 31, 16, 19, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 6, 21, 32, 13, tzinfo=datetime.timezone.utc), 'time_taken': 2141219.0, 'time_delta': '24 days, 18:46:59', 'additions': 980, 'deletions': 30, 'state': 'closed'}, {'id': 1222581212, 'number': 1616, 'closed': datetime.datetime(2023, 2, 16, 4, 47, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 1, 31, 2, 19, 54, tzinfo=datetime.timezone.utc), 'time_taken': 1391235.0, 'time_delta': '16 days, 2:27:15', 'additions': 554, 'deletions': 22, 'state': 'closed'}, {'id': 1219870278, 'number': 1611, 'closed': datetime.datetime(2023, 2, 1, 4, 12, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 1, 27, 20, 17, 47, tzinfo=datetime.timezone.utc), 'time_taken': 374110.0, 'time_delta': '4 days, 7:55:10', 'additions': 980, 'deletions': 28, 'state': 'closed'}, {'id': 1212180404, 'number': 1603, 'closed': datetime.datetime(2023, 2, 3, 20, 17, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 1, 20, 23, 40, 30, tzinfo=datetime.timezone.utc), 'time_taken': 1197447.0, 'time_delta': '13 days, 20:37:27', 'additions': 285, 'deletions': 0, 'state': 'closed'}, {'id': 1209461131, 'number': 1601, 'closed': datetime.datetime(2023, 1, 20, 23, 36, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 1, 19, 4, 29, 43, tzinfo=datetime.timezone.utc), 'time_taken': 155182.0, 'time_delta': '1 day, 19:06:22', 'additions': 412, 'deletions': 85, 'state': 'closed'}]"
