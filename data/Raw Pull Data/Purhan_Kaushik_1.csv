pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
617472702,[qa] Add mocks to unit tests,"Replaced calls with mocks for the following unit tests:

- [x] tests/snmp/base.py
- [x] tests/snmp/openwrt.py
- [x] tests/snmp/airos.py

Closes #46",True,48,https://api.github.com/repos/openwisp/netengine/pulls/48,https://github.com/openwisp/netengine/pull/48,closed,341,70,13,29,6,34,0,0,[],2021-04-18 12:04:10+00:00,2021-05-28 15:55:30+00:00,3469880.0,"40 days, 3:51:20","[{'comment_id': 615389578, 'comment_body': 'Is this test required anymore?', 'comment_created': datetime.datetime(2021, 4, 18, 12, 6, 3, tzinfo=datetime.timezone.utc), 'commenter': 'purhan', 'type': 'User'}, {'comment_id': 616110650, 'comment_body': 'Could you please share some context about why would it not be required?\r\nI mean we should want to test negative results too, correct?', 'comment_created': datetime.datetime(2021, 4, 19, 19, 11, 22, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 616114931, 'comment_body': 'This test checks if we can log into a device with wrong credentials. Since we will not be using a real device anymore there is no reason to check this here. We should assume that the SSH library we are using already does this, what do you think? Does my explanation make sense? :smile: ', 'comment_created': datetime.datetime(2021, 4, 19, 19, 18, 27, tzinfo=datetime.timezone.utc), 'commenter': 'purhan', 'type': 'User'}, {'comment_id': 616134033, 'comment_body': ""Hmm, although, it makes sense that the dependency should be checking this...\r\nbut I'd defer it to someone else for final word on this! :smile:"", 'comment_created': datetime.datetime(2021, 4, 19, 19, 50, 53, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 616223027, 'comment_body': 'I think the best thing to do in this case is to mock the underlying library call to raise the exception which is typicall raised when wrong credentials are passed and ensure our library behaves as we defined', 'comment_created': datetime.datetime(2021, 4, 19, 22, 38, 23, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 616224715, 'comment_body': ""Can you format this so it's readable please?\r\nAlso ensure there's the end line at the end of the file please."", 'comment_created': datetime.datetime(2021, 4, 19, 22, 42, 41, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 616535862, 'comment_body': 'Done, added back (https://github.com/openwisp/netengine/pull/48/commits/a87cc398b37aeda9bb619d3f145c0795bc2221e8)', 'comment_created': datetime.datetime(2021, 4, 20, 10, 3, 8, tzinfo=datetime.timezone.utc), 'commenter': 'purhan', 'type': 'User'}, {'comment_id': 616626536, 'comment_body': ""Because of limitations of JSON, the only way I could think of to maintain readability is to wrap every line in quotes and save the list of lines as value (Done in https://github.com/openwisp/netengine/pull/48/commits/3c20fd81375bfe8d58304986e0e44c46bece7f40). Please let me know if this is good enough. Other than that, I can't think of a good way to store a result, we could for example store a `.txt` file for each command, but with the SNMP tests we will have too many files (one for each OID)"", 'comment_created': datetime.datetime(2021, 4, 20, 12, 16, 54, tzinfo=datetime.timezone.utc), 'commenter': 'purhan', 'type': 'User'}, {'comment_id': 637447202, 'comment_body': ""let's update the repo URL"", 'comment_created': datetime.datetime(2021, 5, 22, 20, 25, 11, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 637447239, 'comment_body': ""why did you delete this? We may have to add more test dependencies in the future, it's always a good idea to have this file."", 'comment_created': datetime.datetime(2021, 5, 22, 20, 25, 48, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 637448985, 'comment_body': ""there's some extra lines here"", 'comment_created': datetime.datetime(2021, 5, 22, 20, 46, 5, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 637449002, 'comment_body': 'would be nice to offer the same functionality with a decorator so we can decorate test methods which would result in increased readability of the tests', 'comment_created': datetime.datetime(2021, 5, 22, 20, 46, 44, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 637449631, 'comment_body': ""what about using spymocks? I used this concept in firmware upgrader (I should have added more comments):\r\nhttps://github.com/openwisp/openwisp-firmware-upgrader/blob/master/openwisp_firmware_upgrader/tests/base.py#L182-L191\r\n\r\nIt's a mock that allows us to assert if methods have been called and anything else but also the real code is called.\r\n\r\nWe could implement a decorator which would work in 2 possible ways:\r\n\r\n- if real tests should not be run, it just uses the standard mock library\r\n- otherwise it does a spy mock, that is, the code is executed anyway but we also have a mock to assert if the calls have been really done as expected\r\n\r\nHowever, for the spy mock we could use something better / simpler:\r\n\r\n- https://wesmckinney.com/blog/spying-with-python-mocks/\r\n- https://github.com/beanbaginc/kgb this library implements this pattern"", 'comment_created': datetime.datetime(2021, 5, 22, 20, 53, 45, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 637832148, 'comment_body': 'I think using https://github.com/beanbaginc/kgb might yield cleaner tests, but anything that works is fine. ', 'comment_created': datetime.datetime(2021, 5, 24, 10, 0, 59, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 637876245, 'comment_body': ""```suggestion\r\n            'pysnmp.entity.rfc3413.oneliner.cmdgen.CommandGenerator.nextCmd',\r\n```\r\nI would write it as above, to make it explicit that it is an external library."", 'comment_created': datetime.datetime(2021, 5, 24, 11, 24, 47, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 637912037, 'comment_body': ""It is not clear to me what this test is doing. Can you please explain. \r\n\r\nFrom what I understood, it is testing this code\r\n\r\nhttps://github.com/openwisp/netengine/blob/4f409d85ce7d2e18a2463c6bd847cab7a7f67e47/netengine/backends/snmp/base.py#L100-L109\r\n\r\nBut, `self.getcmd_patcher` here is mocking `netengine.backends.snmp.base.cmdgen.CommandGenerator.getCmd` which is an external method and it can't raise `NetEngineError`. \r\n\r\nTo test whether `NetEngineError` is raised, I would somehow raise `IndexError` in above code. \r\n\r\nIs my understanding correct? \r\n\r\nIn the current test, if I replace  `self.device.get_value('.')` with a valid value then it should fail, right?"", 'comment_created': datetime.datetime(2021, 5, 24, 12, 33, 40, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 637916498, 'comment_body': ""```suggestion\r\n            'pysnmp.entity.rfc3413.oneliner.cmdgen.CommandGenerator.getCmd',\r\n```\r\nSimilarly here! "", 'comment_created': datetime.datetime(2021, 5, 24, 12, 41, 44, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 637918449, 'comment_body': '```suggestion\r\n            self.assertIsInstance(self.device.get_interfaces(), list)\r\n```\r\nI believe this is a better way to write this. Please update other occurrences also.', 'comment_created': datetime.datetime(2021, 5, 24, 12, 45, 8, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 637926672, 'comment_body': '@pandafy ~~Yes there is a mistake here, we don\'t need to raise an exception manually. Since there is no ""."" in the JSON file we stored it\'d raise an exception itself.~~\r\n\r\n> In the current test, if I replace self.device.get_value(\'.\') with a valid value then it should fail, right?\r\n\r\nYes but after doing what I said above ^, it works fine\r\n\r\nEdit: I was wrong. But I\'m noticing that this test fails on master, can you confirm this?', 'comment_created': datetime.datetime(2021, 5, 24, 12, 59, 31, tzinfo=datetime.timezone.utc), 'commenter': 'purhan', 'type': 'User'}, {'comment_id': 637931609, 'comment_body': 'We should be able to remove this also. ', 'comment_created': datetime.datetime(2021, 5, 24, 13, 8, 4, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 637993297, 'comment_body': 'i added this test in `tests/snmp/openwrt.py` and it failed with this error:\r\n\r\n```\r\n/home/pandafy/openwisp/venv-python2/lib/python2.7/site-packages/paramiko/transport.py:33: CryptographyDeprecationWarning: Python 2 is no longer supported by the Python core team. Support for it is now deprecated in cryptography, and will be removed in the next release.\r\n  from cryptography.hazmat.backends import default_backend\r\nE\r\n======================================================================\r\nERROR: test_get_value_error (tests.snmp.TestSNMPOpenWRT)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File ""/home/pandafy/openwisp/netengine/tests/snmp/openwrt.py"", line 21, in test_get_value_error\r\n    self.device.get_value(\'.\')\r\n  File ""/home/pandafy/openwisp/netengine/netengine/backends/snmp/base.py"", line 105, in get_value\r\n    result = self.get(oid)\r\n  File ""/home/pandafy/openwisp/netengine/netengine/backends/snmp/base.py"", line 83, in get\r\n    return self._command.getCmd(self.community, self.transport, self._oid(oid))\r\n  File ""/home/pandafy/openwisp/venv-python2/lib/python2.7/site-packages/pysnmp/entity/rfc3413/oneliner/cmdgen.py"", line 183, in getCmd\r\n    **kwargs):\r\n  File ""/home/pandafy/openwisp/venv-python2/lib/python2.7/site-packages/pysnmp/hlapi/asyncore/sync/cmdgen.py"", line 111, in getCmd\r\n    lookupMib=options.get(\'lookupMib\', True)))\r\n  File ""/home/pandafy/openwisp/venv-python2/lib/python2.7/site-packages/pysnmp/hlapi/asyncore/cmdgen.py"", line 130, in getCmd\r\n    vbProcessor.makeVarBinds(snmpEngine, varBinds), __cbFun,\r\n  File ""/home/pandafy/openwisp/venv-python2/lib/python2.7/site-packages/pysnmp/hlapi/varbinds.py"", line 39, in makeVarBinds\r\n    __varBinds.append(varBind.resolveWithMib(mibViewController, ignoreErrors=False))\r\n  File ""/home/pandafy/openwisp/venv-python2/lib/python2.7/site-packages/pysnmp/smi/rfc1902.py"", line 853, in resolveWithMib\r\n    self.__args[0].resolveWithMib(mibViewController)\r\n  File ""/home/pandafy/openwisp/venv-python2/lib/python2.7/site-packages/pysnmp/smi/rfc1902.py"", line 421, in resolveWithMib\r\n    self.__oid\r\n  File ""/home/pandafy/openwisp/venv-python2/lib/python2.7/site-packages/pysnmp/smi/view.py"", line 211, in getNodeNameByOid\r\n    (modName, nodeName, self)\r\nNoSuchObjectError: NoSuchObjectError({\'str\': ""Can\'t resolve node name :: at <pysnmp.smi.view.MibViewController object at 0x7f425e825950>""})\r\n-------------------- >> begin captured stdout << ---------------------\r\nDEBUG: SNMP GET .\r\n\r\n--------------------- >> end captured stdout << ----------------------\r\n\r\n----------------------------------------------------------------------\r\nRan 1 test in 0.092s\r\n\r\nFAILED (errors=1)\r\n```\r\n\r\nMaybe the internal working of `pysnmp` has evolved over time. You might need to tweak code too.\r\n\r\ncc @nemesisdesign ', 'comment_created': datetime.datetime(2021, 5, 24, 14, 31, 22, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 638700443, 'comment_body': 'The problem with https://github.com/beanbaginc/kgb is lack of a `patch` function like we are using in all the tests for this PR. To use it, it would require changing a lot of code.', 'comment_created': datetime.datetime(2021, 5, 25, 11, 28, 5, tzinfo=datetime.timezone.utc), 'commenter': 'purhan', 'type': 'User'}, {'comment_id': 639370866, 'comment_body': ""What better alternative do you propose @purhan? Having the possibility of asserting calls during real tests is a real game changer which we should pursue, only that way we'll be able to run tests with real devices and ensure they're not only returning the right output but we will also be confident our code really works as intended."", 'comment_created': datetime.datetime(2021, 5, 26, 3, 11, 59, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 639467372, 'comment_body': ""This [blog](https://wesmckinney.com/blog/spying-with-python-mocks/) you shared was helpful, I've now created spy mocks (in https://github.com/openwisp/netengine/pull/48/commits/74b1646aaf6183704765ba62b9b69bf09e0e09c1)\r\n\r\nThis also works with decorators, so we don't have to worry about that either :)"", 'comment_created': datetime.datetime(2021, 5, 26, 7, 26, 56, tzinfo=datetime.timezone.utc), 'commenter': 'purhan', 'type': 'User'}, {'comment_id': 639605750, 'comment_body': 'We should not capture exceptions using generic Exception class. This will hide the underlying cause in corner cases in future. Catch specific exceptions here that are being raised now. We will improve exception handling as we find more errors during developmen. ', 'comment_created': datetime.datetime(2021, 5, 26, 10, 40, 26, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 639608317, 'comment_body': ""I'm probably nitpicking here, can we move these classes to a specific `utils.py` file? "", 'comment_created': datetime.datetime(2021, 5, 26, 10, 44, 25, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 639618736, 'comment_body': ""Following up to my previous comment, here we don't know that exactly raised `NetEngineError`. Was it raised because connection to the device was not established? Or, was it raised because `.` can't be resolved to a node?"", 'comment_created': datetime.datetime(2021, 5, 26, 11, 0, 32, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 639739046, 'comment_body': ""@pandafy How about not catching the exception at all? I should've asked before making this change.\r\n\r\nPysnmp will raise an exception itself, should we just check for that in the tests?"", 'comment_created': datetime.datetime(2021, 5, 26, 13, 43, 6, tzinfo=datetime.timezone.utc), 'commenter': 'purhan', 'type': 'User'}, {'comment_id': 639748366, 'comment_body': ""To do that, I guess we should wait till https://github.com/openwisp/netengine/pull/57 is merged, so that we can create a `tests/utils.py` because currently `tests/utils/__init__.py` exists with a precedence over that file, and it's going to be removed anyway :smile: "", 'comment_created': datetime.datetime(2021, 5, 26, 13, 52, 51, tzinfo=datetime.timezone.utc), 'commenter': 'purhan', 'type': 'User'}, {'comment_id': 640099891, 'comment_body': 'I overlooked that `tests/utils/` already exist here. My main concern was removing this logic from `tests/static/__init__.py`. We can wait for the other PR to be merged.', 'comment_created': datetime.datetime(2021, 5, 26, 20, 31, 5, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 640100784, 'comment_body': 'The exception raised by pySNMP will have more information, so it seems like right thing to do. You can go ahead on this. ', 'comment_created': datetime.datetime(2021, 5, 26, 20, 32, 24, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 641539379, 'comment_body': '```suggestion\r\n    ./runtests.py\r\n```', 'comment_created': datetime.datetime(2021, 5, 28, 13, 14, 37, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 641539570, 'comment_body': ""```suggestion\r\n    DISABLE_MOCKS=1 TEST_SETTINGS_FILE='test-settings.json' ./runtests.py\r\n```"", 'comment_created': datetime.datetime(2021, 5, 28, 13, 14, 52, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 641654550, 'comment_body': '@purhan this should not be necessary, please double check', 'comment_created': datetime.datetime(2021, 5, 28, 15, 54, 49, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}]","[{'commit_sha': '2675672d145804b5b1666e4b5c5226a2d176bcbd', 'committer_username': 'purhan', 'committer_name': 'Purhan Kaushik', 'committer_email': 'purhan01@gmail.com', 'commit_date': datetime.datetime(2015, 2, 7, 14, 41, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68fa3ce305e9dae1b67ed1f324f78387a033d00a', 'committer_username': 'purhan', 'committer_name': 'Purhan Kaushik', 'committer_email': 'purhan01@gmail.com', 'commit_date': datetime.datetime(2015, 2, 7, 14, 41, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '642184796e2c5e9e673cf2f0174ba15769a701b3', 'committer_username': 'purhan', 'committer_name': 'Purhan Kaushik', 'committer_email': 'purhan01@gmail.com', 'commit_date': datetime.datetime(2015, 2, 7, 14, 41, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c20fd81375bfe8d58304986e0e44c46bece7f40', 'committer_username': 'purhan', 'committer_name': 'Purhan Kaushik', 'committer_email': 'purhan01@gmail.com', 'commit_date': datetime.datetime(2015, 2, 7, 14, 41, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a87cc398b37aeda9bb619d3f145c0795bc2221e8', 'committer_username': 'purhan', 'committer_name': 'Purhan Kaushik', 'committer_email': 'purhan01@gmail.com', 'commit_date': datetime.datetime(2015, 2, 7, 14, 41, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a9095a949528e021cc91ff994d88a8852cdd4d7', 'committer_username': 'purhan', 'committer_name': 'Purhan Kaushik', 'committer_email': 'purhan01@gmail.com', 'commit_date': datetime.datetime(2015, 2, 7, 14, 41, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f73205f0baf8d51212c29764b7dc718b893753bc', 'committer_username': 'purhan', 'committer_name': 'Purhan Kaushik', 'committer_email': 'purhan01@gmail.com', 'commit_date': datetime.datetime(2015, 2, 7, 14, 41, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dece4a08735b6b6584622fc0cad194a2c9cd6479', 'committer_username': 'purhan', 'committer_name': 'Purhan Kaushik', 'committer_email': 'purhan01@gmail.com', 'commit_date': datetime.datetime(2015, 2, 7, 14, 41, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd30ed47d9039f76b46246bd8876fb338a09d259', 'committer_username': 'purhan', 'committer_name': 'Purhan Kaushik', 'committer_email': 'purhan01@gmail.com', 'commit_date': datetime.datetime(2015, 2, 7, 14, 41, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a3e44477e05c49fd029c8c035608ada3532b8b1', 'committer_username': 'purhan', 'committer_name': 'Purhan Kaushik', 'committer_email': 'purhan01@gmail.com', 'commit_date': datetime.datetime(2015, 2, 7, 14, 41, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4485d43af977a6b2f51c99d0a0e9ff5527d5c629', 'committer_username': 'purhan', 'committer_name': 'Purhan Kaushik', 'committer_email': 'purhan01@gmail.com', 'commit_date': datetime.datetime(2015, 2, 7, 14, 41, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a000dbd033b748887af98300d2ac39ed84771a5', 'committer_username': 'purhan', 'committer_name': 'Purhan Kaushik', 'committer_email': 'purhan01@gmail.com', 'commit_date': datetime.datetime(2015, 2, 7, 14, 41, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '26c4f52a64f0d8e3d77ccf8191e53ffde7beb026', 'committer_username': 'purhan', 'committer_name': 'Purhan Kaushik', 'committer_email': 'purhan01@gmail.com', 'commit_date': datetime.datetime(2015, 2, 7, 14, 41, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6f4eb538f051f4ca1fa05f30adb905e2ee84c54', 'committer_username': 'purhan', 'committer_name': 'Purhan Kaushik', 'committer_email': 'purhan01@gmail.com', 'commit_date': datetime.datetime(2015, 2, 7, 14, 41, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4298bff42906f82defabeaf512649e062851ff4', 'committer_username': 'purhan', 'committer_name': 'Purhan Kaushik', 'committer_email': 'purhan01@gmail.com', 'commit_date': datetime.datetime(2015, 2, 7, 14, 41, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea5398c4ffa483cacdb81f90af6aab0b51fc6efc', 'committer_username': 'purhan', 'committer_name': 'Purhan Kaushik', 'committer_email': 'purhan01@gmail.com', 'commit_date': datetime.datetime(2015, 2, 7, 14, 41, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '873b6dc9c4ce1a8f946ebd5a252aefaadc03cc57', 'committer_username': 'purhan', 'committer_name': 'Purhan Kaushik', 'committer_email': 'purhan01@gmail.com', 'commit_date': datetime.datetime(2015, 2, 7, 14, 41, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e240ecdeae6613a3444257c065a47d1511158d9', 'committer_username': 'purhan', 'committer_name': 'Purhan Kaushik', 'committer_email': 'purhan01@gmail.com', 'commit_date': datetime.datetime(2015, 2, 7, 14, 41, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7cddc92262e790ab7528dc4e0bca83fb4ed1c98c', 'committer_username': 'purhan', 'committer_name': 'Purhan Kaushik', 'committer_email': 'purhan01@gmail.com', 'commit_date': datetime.datetime(2015, 2, 7, 14, 41, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'edf1ace318b8f3d4130d6bb415428f3cd5c022f8', 'committer_username': 'purhan', 'committer_name': 'Purhan Kaushik', 'committer_email': 'purhan01@gmail.com', 'commit_date': datetime.datetime(2015, 2, 7, 14, 41, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74b1646aaf6183704765ba62b9b69bf09e0e09c1', 'committer_username': 'purhan', 'committer_name': 'Purhan Kaushik', 'committer_email': 'purhan01@gmail.com', 'commit_date': datetime.datetime(2015, 2, 7, 14, 41, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5fd4ab4820cef0a5deb63837ea9a4d7c2c5c4bb6', 'committer_username': 'purhan', 'committer_name': 'Purhan Kaushik', 'committer_email': 'purhan01@gmail.com', 'commit_date': datetime.datetime(2015, 2, 7, 14, 41, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6fddaffd1bde0b48dbfa8cffcd7438e79405d5bf', 'committer_username': 'purhan', 'committer_name': 'Purhan Kaushik', 'committer_email': 'purhan01@gmail.com', 'commit_date': datetime.datetime(2015, 2, 7, 14, 41, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87de032d78ef947aefde405b2487ec3f76593370', 'committer_username': 'purhan', 'committer_name': 'Purhan Kaushik', 'committer_email': 'purhan01@gmail.com', 'commit_date': datetime.datetime(2015, 2, 7, 14, 41, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '740b7efc1a6602b4e36674b9beab8eed79484245', 'committer_username': 'purhan', 'committer_name': 'Purhan Kaushik', 'committer_email': 'purhan01@gmail.com', 'commit_date': datetime.datetime(2015, 2, 7, 14, 41, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eeac44eb1b197b9082861d0af38affa8f6a60881', 'committer_username': 'purhan', 'committer_name': 'Purhan Kaushik', 'committer_email': 'purhan01@gmail.com', 'commit_date': datetime.datetime(2015, 2, 7, 14, 41, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bba187c7c57e42a92aea624b15d8138d2eb621f5', 'committer_username': 'purhan', 'committer_name': 'Purhan Kaushik', 'committer_email': 'purhan01@gmail.com', 'commit_date': datetime.datetime(2015, 2, 7, 14, 41, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a40cf19d2a12c52df2bc8f74819cc0703fcd9fb', 'committer_username': 'purhan', 'committer_name': 'Purhan Kaushik', 'committer_email': 'purhan01@gmail.com', 'commit_date': datetime.datetime(2015, 2, 7, 14, 41, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61fc7ae323731dc83cf3a2d6c384b04dde568c11', 'committer_username': 'purhan', 'committer_name': 'Purhan Kaushik', 'committer_email': 'purhan01@gmail.com', 'commit_date': datetime.datetime(2015, 2, 7, 14, 41, 57, tzinfo=datetime.timezone.utc)}]",Purhan Kaushik,10897423,purhan01@gmail.com,User,,46,,8,41
662503622,[change] NetJSON DeviceMonitoring compliance #2,"Closes #2, closes #64, closes #65
Resolves part of #60 ",False,62,https://api.github.com/repos/openwisp/netengine/pulls/62,https://github.com/openwisp/netengine/pull/62,open,1193,446,18,20,6,40,0,0,[],2021-06-05 16:22:53+00:00,,0.0,,"[{'comment_id': 652501107, 'comment_body': 'Can you please share why `time.mktime` is used here? In OpenWrt backend, different approach is used to generate local_time value. ', 'comment_created': datetime.datetime(2021, 6, 16, 9, 8, 30, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 652520914, 'comment_body': 'We need to write better tests which ensures that individual statements are getting executed. Typing checking is good, but it does not tell much. ', 'comment_created': datetime.datetime(2021, 6, 16, 9, 33, 39, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 652522843, 'comment_body': 'I would use `error` instead of `warning`. Are you sure this line would be executed? Can you add test for it? \r\n\r\nIn such case, I believe an exception would be raised by either `datetime` or `struct` module. We should handle such case for both of them. ', 'comment_created': datetime.datetime(2021, 6, 16, 9, 36, 8, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 652645043, 'comment_body': ""You're right, this line won't be executed. I will remove it soon."", 'comment_created': datetime.datetime(2021, 6, 16, 12, 35, 52, tzinfo=datetime.timezone.utc), 'commenter': 'purhan', 'type': 'User'}, {'comment_id': 652645078, 'comment_body': 'With OpenWRT, we use a different OID, which returns an octal string and has to be converted first (for example: `\\x07\\xe5\\x06\\x0b\\x06\\x00\\r\\x00+\\x00\\x00`).\r\nWhile here we just get a human-readable string like this: `2020-02-03 13:01:14`, so we can just extract the information using this.', 'comment_created': datetime.datetime(2021, 6, 16, 12, 35, 56, tzinfo=datetime.timezone.utc), 'commenter': 'purhan', 'type': 'User'}, {'comment_id': 653481515, 'comment_body': 'It will be more efficient to get all three values in one request. Can you please do that? ', 'comment_created': datetime.datetime(2021, 6, 17, 11, 37, 1, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 653483206, 'comment_body': ""Can we use `int(datetime.strptime(epoch, '%Y-%m-%d %H:%M:%S').timestamp())`"", 'comment_created': datetime.datetime(2021, 6, 17, 11, 39, 50, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 654142925, 'comment_body': 'Yes :+1:, we can use this', 'comment_created': datetime.datetime(2021, 6, 18, 5, 5, 8, tzinfo=datetime.timezone.utc), 'commenter': 'purhan', 'type': 'User'}, {'comment_id': 654175964, 'comment_body': 'Done :+1: ', 'comment_created': datetime.datetime(2021, 6, 18, 6, 33, 38, tzinfo=datetime.timezone.utc), 'commenter': 'purhan', 'type': 'User'}, {'comment_id': 656358914, 'comment_body': 'Look at the output of the `free` command:\r\n\r\n```\r\n$ free\r\n              total        used        free      shared  buff/cache   available\r\nMem:       16267996     7406636     2508788     1475504     6352572     7158444\r\nSwap:       8388604       52600     8336004\r\n```\r\n\r\nSo far I see we have total, free, then something weird, for buffered and cached we have two different values but `free` shows them as one thing.\r\n\r\nCan you please double check and compare the output of these SNMP mibs with free?\r\n\r\nIs there a way to know the availeble memory? See https://www.linuxatemyram.com/ for more info.', 'comment_created': datetime.datetime(2021, 6, 22, 15, 52, 36, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 657097355, 'comment_body': ""@nemesisdesign is this output from an AirOS device? For me the output of `free` looks like this:\r\n```\r\nWA# free\r\n             total         used         free       shared      buffers\r\nMem:         61960        37960        24000            0         2020\r\n-/+ buffers:              35940        26020\r\nSwap:            0            0            0\r\n```\r\n\r\nHere are the corresponding values via SNMP:\r\n- RAM_total: `SNMPv2-SMI::enterprises.10002.1.1.1.1.1.0 = Gauge32: 61960`\r\n- RAM_buffered: `SNMPv2-SMI::enterprises.10002.1.1.1.1.3.0 = Gauge32: 2020`\r\n- RAM_free: `SNMPv2-SMI::enterprises.10002.1.1.1.1.2.0 = Gauge32: 24068`\r\n- RAM_cached: `SNMPv2-SMI::enterprises.10002.1.1.1.1.4.0 = Gauge32: 0`\r\n\r\nI'm a bit confused about the last one. On this old [thread](https://community.ui.com/questions/AP-Pro-become-disconnected-when-they-exhaust-RAM-on-3-2-1/497e0198-5727-4248-b1fa-8c13d6e41709) (and a few others in Ubiquiti forums) I found the following piece of info:\r\n```\r\n1.3.6.1.4.1.10002.1.1.1.1.1.0 # memTotal\r\n\r\n1.3.6.1.4.1.10002.1.1.1.1.2.0 # memFree\r\n\r\n1.3.6.1.4.1.10002.1.1.1.1.3.0 # memBuffer\r\n\r\n1.3.6.1.4.1.10002.1.1.1.1.4.0 # memCached\r\n\r\n1.3.6.1.4.1.10002.1.1.1.2.1.0 # swapTotal\r\n\r\n1.3.6.1.4.1.10002.1.1.1.2.2.0 # swapFree\r\n```\r\n\r\nI haven't found anything related to available memory yet, found nothing in the standard MIBs.\r\n\r\nPS: the output of `free` you shared looks similar to my OpenWRT device and in the openwrt backend you'll see exactly that data being collected."", 'comment_created': datetime.datetime(2021, 6, 23, 13, 26, 6, tzinfo=datetime.timezone.utc), 'commenter': 'purhan', 'type': 'User'}, {'comment_id': 657162545, 'comment_body': ""@purhan I see, then probably AirOS still uses an old linux kernel which doesn't support this, can you check what kernel version it uses?\r\n\r\nWhat abotu OpenWRT? Do we have the information of the available memory on OpenWRT?"", 'comment_created': datetime.datetime(2021, 6, 23, 14, 32, 27, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 657179966, 'comment_body': ""@nemesisdesign AirOS I use for testing is running on version: `2.6.32.68`.\r\nWith OpenWRT also, I didn't find anything related to available ram even though the kernel supports it.\r\nHere are some relevant OIDs I got from snmpwalk:\r\n```\r\nHOST-RESOURCES-MIB::hrStorageDescr.1 = STRING: Physical memory\r\nHOST-RESOURCES-MIB::hrStorageDescr.3 = STRING: Virtual memory\r\nHOST-RESOURCES-MIB::hrStorageDescr.6 = STRING: Memory buffers\r\nHOST-RESOURCES-MIB::hrStorageDescr.7 = STRING: Cached memory\r\nHOST-RESOURCES-MIB::hrStorageDescr.8 = STRING: Shared memory\r\nHOST-RESOURCES-MIB::hrStorageDescr.10 = STRING: Swap space\r\n```\r\nI believe this means these are the only host resources we can use then?"", 'comment_created': datetime.datetime(2021, 6, 23, 14, 50, 9, tzinfo=datetime.timezone.utc), 'commenter': 'purhan', 'type': 'User'}, {'comment_id': 657249669, 'comment_body': '@purhan this may be the memory, did you compare these values to what you can get from `free` or `cat /proc/meminfo`?\r\n\r\nRegarding AirOS I was not aware they used such an old kernel version. Did you already upgrade the AirOS firmware to the latest available version?', 'comment_created': datetime.datetime(2021, 6, 23, 15, 58, 6, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 663752902, 'comment_body': '> @purhan this may be the memory, did you compare these values to what you can get from `free` or `cat /proc/meminfo`?\r\n\r\nYes, the values match with the ones from `free`.\r\n \r\n> Regarding AirOS I was not aware they used such an old kernel version. Did you already upgrade the AirOS firmware to the latest available version?\r\n\r\nI have not upgraded yet, I will let you know more about this soon.', 'comment_created': datetime.datetime(2021, 7, 5, 8, 48, 51, tzinfo=datetime.timezone.utc), 'commenter': 'purhan', 'type': 'User'}, {'comment_id': 663839423, 'comment_body': 'Will it be possible to fetch both details in one request? What if neighbours change after receiving reply from first command?', 'comment_created': datetime.datetime(2021, 7, 5, 10, 57, 4, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 663850042, 'comment_body': ""I spent some time on this and this is what i found for OpenWrt device. \r\n\r\nFollowing is output for my laptop as neighbour of the router. I replaced my MAC with `FF FF FF FF FF FF`.\r\n\r\n```\r\n$ snmpwalk -v2c -c public  192.168.1.1 1.3.6.1.2.1.4.35.1.4\r\niso.3.6.1.2.1.4.35.1.4.5.1.4.192.168.1.136 = Hex-STRING: FF FF FF FF FF FF\r\niso.3.6.1.2.1.4.35.1.4.5.2.16.254.128.0.0.0.0.0.0.35.113.163.173.241.78.112.113 = Hex-STRING: FF FF FF FF FF FF\r\niso.3.6.1.2.1.4.35.1.4.5.2.16.254.128.0.0.0.0.0.0.77.92.143.78.43.2.155.123 = Hex-STRING: FF FF FF FF FF FF\r\n```\r\n\r\nYou need to pay attention for the OID here. For IPv4 addresses the 12th index is `4` and for IPv6 address 12th index is `16`. \r\n\r\nThe IPv6 addresses are represented in decimal octets here. You will have to convert them to hexadecimals. Check if there's an existing library which can do this to make our work simple. \r\n\r\nCheck this pseudocode for example, improve it wherever required:\r\n\r\n```\r\nfor neighbor in neighbors:\r\n    oid = neighbour[0][0].getOid()\r\n    if oid[12] == 4:\r\n        ip = oid[13:]\r\n    else:\r\n        ip = convert_decimal_octets_to_hexademical_blocks(oid[13:])\r\n```"", 'comment_created': datetime.datetime(2021, 7, 5, 11, 15, 56, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 664033686, 'comment_body': ""I compared memory results from netengine and running free command on OpenWrt and found some discrepancy. \r\n![Screenshot from 2021-07-05 21-34-04](https://user-images.githubusercontent.com/32094433/124497864-24349680-ddd9-11eb-976d-ba99b06b9ae3.png)\r\n\r\nWhile testing I ran the free command first for control, fetched resources using netengine and then executed the free command again in hope that I will get output from netengine somewhere between these two values. \r\n\r\nThe value of free memory was very off in my testing. We need to make sure that results from SNMP is same as from free command. Maybe we'll need to do some calculation manually. \r\n\r\n"", 'comment_created': datetime.datetime(2021, 7, 5, 16, 11, 29, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 664047612, 'comment_body': ""@pandafy I guess that's just a drawback of SNMP? I did some research on this and found some [discussions](https://serverfault.com/questions/640459/snmp-memory-values-do-not-match-free) but no luck"", 'comment_created': datetime.datetime(2021, 7, 5, 16, 43, 59, tzinfo=datetime.timezone.utc), 'commenter': 'purhan', 'type': 'User'}, {'comment_id': 664056789, 'comment_body': 'It may be possible, I will look into it', 'comment_created': datetime.datetime(2021, 7, 5, 17, 8, 23, tzinfo=datetime.timezone.utc), 'commenter': 'purhan', 'type': 'User'}, {'comment_id': 664056875, 'comment_body': 'Done :+1:', 'comment_created': datetime.datetime(2021, 7, 5, 17, 8, 35, tzinfo=datetime.timezone.utc), 'commenter': 'purhan', 'type': 'User'}, {'comment_id': 664390061, 'comment_body': 'If we are fetching `used` memory then why we are not showing it? ', 'comment_created': datetime.datetime(2021, 7, 6, 9, 25, 20, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 664393526, 'comment_body': ""Only because the [devicemonitoring](https://netjson.org/rfc.html#name-devicemonitoring) spec didn't mention it. If we use it somewhere then yes we can show it :+1: "", 'comment_created': datetime.datetime(2021, 7, 6, 9, 29, 49, tzinfo=datetime.timezone.utc), 'commenter': 'purhan', 'type': 'User'}, {'comment_id': 664440940, 'comment_body': 'Are you sure this is ASCII representation of IPv6? I am not sure about this. ', 'comment_created': datetime.datetime(2021, 7, 6, 10, 40, 9, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 664442789, 'comment_body': 'Can you please add comments how this function achieves the conversion? ', 'comment_created': datetime.datetime(2021, 7, 6, 10, 42, 57, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 664599695, 'comment_body': 'Yes, these are the ascii values converted into hexadecimal by this function. You can look at [this chart](https://www.garykessler.net/library/ascii.html) for example.\r\nFor example if an ip address is `fe80::....` then we should see something like `254.128....` in the oid, where 254 = FE, 128 = 80 and so on.', 'comment_created': datetime.datetime(2021, 7, 6, 14, 19, 31, tzinfo=datetime.timezone.utc), 'commenter': 'purhan', 'type': 'User'}, {'comment_id': 666043993, 'comment_body': 'Add reference to the source location. ', 'comment_created': datetime.datetime(2021, 7, 8, 9, 51, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 666988953, 'comment_body': ""@pandafy @nemesisdesign I upgraded the device to the latest firmware (v8.7.4). Output from free command appears to be the same:\r\n```\r\nWA# free\r\n             total         used         free       shared      buffers\r\nMem:         61960        45268        16692            0         4128\r\n-/+ buffers:              41140        20820\r\nSwap:            0            0            0\r\n```\r\nKernel version is the same for this (i.e. 2.6.32.68)\r\nI don't see a difference in the OIDs.\r\nTested netengine and the results are similar, so no noticeable difference yet."", 'comment_created': datetime.datetime(2021, 7, 9, 14, 24, 13, tzinfo=datetime.timezone.utc), 'commenter': 'purhan', 'type': 'User'}, {'comment_id': 672072287, 'comment_body': 'I think `to_dict` should always be run with `snmpdump=True` ', 'comment_created': datetime.datetime(2021, 7, 19, 7, 58, 5, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 678945449, 'comment_body': 'Why are you not directly creating Trie? ', 'comment_created': datetime.datetime(2021, 7, 29, 8, 37, 44, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 679193857, 'comment_body': ""This was a mistake, thanks I've changed it."", 'comment_created': datetime.datetime(2021, 7, 29, 14, 16, 57, tzinfo=datetime.timezone.utc), 'commenter': 'purhan', 'type': 'User'}, {'comment_id': 692526748, 'comment_body': 'I think we can avoid explaining what SNMP is, we assume peopel using this library will know.\r\n\r\nWe can however include information about how all the data is retrieved and give a few hints on how to use the base backend to create new SNMP backends for other systems (eg: indicate the python path for the base backend and explain anything important regarding it).', 'comment_created': datetime.datetime(2021, 8, 19, 22, 26, 6, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 692527065, 'comment_body': 'please list OpenWrt first. Please also link their respective pages', 'comment_created': datetime.datetime(2021, 8, 19, 22, 26, 58, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 692527355, 'comment_body': ""Are these parameters all mandatory?\r\nIs there any default value for any parameter?\r\nLet's make this explicit.\r\nThere's no need to write this table, sphinx has automations we can use to autodocument these things.\r\nPlease use it!\r\nRefer to the netjsonconfig documentation for examples:\r\nhttp://netjsonconfig.openwisp.org/en/latest/backends/openwrt.html#initialization\r\n\r\nI mean this:\r\n\r\n![Screenshot from 2021-08-19 17-31-32](https://user-images.githubusercontent.com/841044/130152817-1eb02414-a2d1-4d49-9b33-fe8e30ab2c5c.png)\r\n\r\nSee the source for more info: https://raw.githubusercontent.com/openwisp/netjsonconfig/master/docs/source/backends/openwrt.rst\r\n\r\nThe doc text is embedded in a docstring in the method itself.\r\n\r\nThis is a good practice, the docstring is also shown in some rich shells (bpython should show it, not sure about ipython)."", 'comment_created': datetime.datetime(2021, 8, 19, 22, 27, 43, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 692530056, 'comment_body': 'I suggest to do the same here and drop the table syntax which is painful to maintain', 'comment_created': datetime.datetime(2021, 8, 19, 22, 34, 24, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 692530555, 'comment_body': 'as in netjsonconfig, I suggest to make this a dedicated page, which should point to the base snmp page for the general concepts.\r\n\r\nSome information regarding methods can be duplicated (no problem with this if we use autodoc).', 'comment_created': datetime.datetime(2021, 8, 19, 22, 35, 29, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 692530764, 'comment_body': ""please let's switch from table sytnax which is painful to maintain to simple headings and list after headings."", 'comment_created': datetime.datetime(2021, 8, 19, 22, 36, 5, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 692530788, 'comment_body': ""please let's switch from table sytnax which is painful to maintain to simple headings and list after headings."", 'comment_created': datetime.datetime(2021, 8, 19, 22, 36, 9, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 692531399, 'comment_body': 'these methods are not documented above so why are we showing them in the example?\r\n\r\nI guess we can document (and keep public) `next` and `get_value`, but I would avoid documenting `uptime_tuple` because it would not be consistent with advising to use `to_netjson` and make all other internal methods private.', 'comment_created': datetime.datetime(2021, 8, 19, 22, 37, 32, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 692532527, 'comment_body': ""it's not a firmware, it's a backend."", 'comment_created': datetime.datetime(2021, 8, 19, 22, 40, 38, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}]","[{'commit_sha': 'd46b5685c4bf4f63a678687fb4cde8e499f6c9cd', 'committer_username': 'purhan', 'committer_name': 'Purhan Kaushik', 'committer_email': 'purhan01@gmail.com', 'commit_date': datetime.datetime(2015, 2, 7, 14, 41, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9168a274c92a134dbde76920fe9777bf827e731f', 'committer_username': 'purhan', 'committer_name': 'Purhan Kaushik', 'committer_email': 'purhan01@gmail.com', 'commit_date': datetime.datetime(2015, 2, 7, 14, 41, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cfa66506c04512ed1c600d4c45731088db9c709d', 'committer_username': 'purhan', 'committer_name': 'Purhan Kaushik', 'committer_email': 'purhan01@gmail.com', 'commit_date': datetime.datetime(2015, 2, 7, 14, 41, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c9962e2821cb2ce4b0c8fe8c27e0b8161eddc9ba', 'committer_username': 'purhan', 'committer_name': 'Purhan Kaushik', 'committer_email': 'purhan01@gmail.com', 'commit_date': datetime.datetime(2015, 2, 7, 14, 41, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8cd70894336cf7da49219aacd1b53dd6dd22b840', 'committer_username': 'purhan', 'committer_name': 'Purhan Kaushik', 'committer_email': 'purhan01@gmail.com', 'commit_date': datetime.datetime(2015, 2, 7, 14, 41, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da399656c06aa013f76fc9f88c957b3ccd29ea80', 'committer_username': 'purhan', 'committer_name': 'Purhan Kaushik', 'committer_email': 'purhan01@gmail.com', 'commit_date': datetime.datetime(2015, 2, 7, 14, 41, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '180033283d783460f1add4a4453a13251bddfe10', 'committer_username': 'purhan', 'committer_name': 'Purhan Kaushik', 'committer_email': 'purhan01@gmail.com', 'commit_date': datetime.datetime(2015, 2, 7, 14, 41, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cda0295cb18e5d61f383d5d348e61b4d30f59fd3', 'committer_username': 'purhan', 'committer_name': 'Purhan Kaushik', 'committer_email': 'purhan01@gmail.com', 'commit_date': datetime.datetime(2015, 2, 7, 14, 41, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0edc93abbd703078c5060a34f79b31a21b33cecb', 'committer_username': 'purhan', 'committer_name': 'Purhan Kaushik', 'committer_email': 'purhan01@gmail.com', 'commit_date': datetime.datetime(2015, 2, 7, 14, 41, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'acafe93b3307f0a0a5b12f9c7463327716e61840', 'committer_username': 'purhan', 'committer_name': 'Purhan Kaushik', 'committer_email': 'purhan01@gmail.com', 'commit_date': datetime.datetime(2015, 2, 7, 14, 41, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34f05c9d709ced7a62df6a4d62abe037ef7cbffc', 'committer_username': 'purhan', 'committer_name': 'Purhan Kaushik', 'committer_email': 'purhan01@gmail.com', 'commit_date': datetime.datetime(2015, 2, 7, 14, 41, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '034475ca65673c95242b4e993b81dae84497292a', 'committer_username': 'purhan', 'committer_name': 'Purhan Kaushik', 'committer_email': 'purhan01@gmail.com', 'commit_date': datetime.datetime(2015, 2, 7, 14, 41, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '995b7034fe10a872dfa407654568072d4f9b3733', 'committer_username': 'purhan', 'committer_name': 'Purhan Kaushik', 'committer_email': 'purhan01@gmail.com', 'commit_date': datetime.datetime(2015, 2, 7, 14, 41, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83a25dee3fb9196a87e3198555f7e48606c05633', 'committer_username': 'purhan', 'committer_name': 'Purhan Kaushik', 'committer_email': 'purhan01@gmail.com', 'commit_date': datetime.datetime(2015, 2, 7, 14, 41, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f377173bb4ac375f3d94a6c7c69eac3372be791', 'committer_username': 'purhan', 'committer_name': 'Purhan Kaushik', 'committer_email': 'purhan01@gmail.com', 'commit_date': datetime.datetime(2015, 2, 7, 14, 41, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5dc3cc66a5a6f873886953953e5e00d0d4c07d00', 'committer_username': 'purhan', 'committer_name': 'Purhan Kaushik', 'committer_email': 'purhan01@gmail.com', 'commit_date': datetime.datetime(2015, 2, 7, 14, 41, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd746f2d91f55c8f9b34374027af1b371d23b8f83', 'committer_username': 'purhan', 'committer_name': 'Purhan Kaushik', 'committer_email': 'purhan01@gmail.com', 'commit_date': datetime.datetime(2015, 2, 7, 14, 41, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56ea55112cbccf10a584abb8291ea41c6f59b750', 'committer_username': 'purhan', 'committer_name': 'Purhan Kaushik', 'committer_email': 'purhan01@gmail.com', 'commit_date': datetime.datetime(2015, 2, 7, 14, 41, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e6f1f1888bad553327d567fd90e978ffce08c53', 'committer_username': 'purhan', 'committer_name': 'Purhan Kaushik', 'committer_email': 'purhan01@gmail.com', 'commit_date': datetime.datetime(2015, 2, 7, 14, 41, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5424532015231d8bd311e8282dca74506dc485ab', 'committer_username': 'purhan', 'committer_name': 'Purhan Kaushik', 'committer_email': 'purhan01@gmail.com', 'commit_date': datetime.datetime(2015, 2, 7, 14, 41, 57, tzinfo=datetime.timezone.utc)}]",Purhan Kaushik,10897423,purhan01@gmail.com,User,,46,,8,41
679798784,[feature] Implement SNMP check #297,"Closes #297

<!--
Before submitting a Pull Request, please make sure you have read
the OpenWISP Contributing Guidelines:
http://openwisp.io/docs/developer/contributing.html#how-to-commit-your-changes-properly
-->

Checks:

- [x] I have manually tested the proposed changes
- [x] I have written new test cases to avoid regressions (if necessary)
- [x] I have updated the documentation (e.g. README.rst)
",False,309,https://api.github.com/repos/openwisp/openwisp-monitoring/pulls/309,https://github.com/openwisp/openwisp-monitoring/pull/309,open,789,200,25,14,5,33,0,0,[],2021-06-29 10:16:17+00:00,,0.0,,"[{'comment_id': 680377603, 'comment_body': 'this should be `False`. As I explained in our last call, the addition of the check will be manual for now.', 'comment_created': datetime.datetime(2021, 7, 31, 16, 16, 9, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 681623519, 'comment_body': ""TODO: Add documentation \r\n\r\nLeaving this here so we don't forget it moving ahead. "", 'comment_created': datetime.datetime(2021, 8, 3, 10, 10, 39, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 681630621, 'comment_body': 'Please use descriptive identifiers. `cred` will be better. ', 'comment_created': datetime.datetime(2021, 8, 3, 10, 21, 53, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 681637293, 'comment_body': 'This part of code is not super clear to me. I see you are creating a new Credential object if it not already existsm but where or how it is getting assigned to a Device. ', 'comment_created': datetime.datetime(2021, 8, 3, 10, 32, 21, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 682753059, 'comment_body': ""I forgot what my logic behind this was, but this is wrong apparently. Please check the new code, we don't need to create new credentials here so I have removed it. With netengine, the credentials are optional and we only need host to collect the info."", 'comment_created': datetime.datetime(2021, 8, 4, 16, 0, 23, tzinfo=datetime.timezone.utc), 'commenter': 'purhan', 'type': 'User'}, {'comment_id': 683385842, 'comment_body': ""Don't you think this will create database query every time the check is run?\r\nCan't we simply add a receiver for post_save signal of Credential objects? Whenever a credential is updated (which not be very often) update parameters of all related checks. \r\n\r\nWhat do you think about this?"", 'comment_created': datetime.datetime(2021, 8, 5, 11, 58, 28, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 683387395, 'comment_body': 'It is not clear to me, how will this raise an OperationalError? ', 'comment_created': datetime.datetime(2021, 8, 5, 12, 1, 1, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 683389783, 'comment_body': ""This code is exactly the same as following, isn't it? Can we make it reusable? \r\n\r\nhttps://github.com/openwisp/openwisp-monitoring/blob/9dd843c24d69a856b806d1a9d15ca913e02e9c2e/openwisp_monitoring/device/api/views.py#L451-L462"", 'comment_created': datetime.datetime(2021, 8, 5, 12, 4, 45, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 683401964, 'comment_body': 'Can you please explain why this was required? \r\n\r\nThe default value for data is `None`. If this part raised an AttributeError, the value of data will still remain `None` and in next lines the code will throw an error while performing `data.get()`. ', 'comment_created': datetime.datetime(2021, 8, 5, 12, 23, 15, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 683507793, 'comment_body': ""@purhan Why are we duplicating the credential parameters here? We shouldn't do this, I put the params field there to contain only special parameters, not things we can already fetch from elsewhere.\r\n\r\nLet's just fetch the credentials and use them, no duplication of data please, no need to cache it for now, let's not optimize this prematurely."", 'comment_created': datetime.datetime(2021, 8, 5, 14, 29, 18, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 683539250, 'comment_body': 'This method is copied from the ping check. Should I move it to the base class?', 'comment_created': datetime.datetime(2021, 8, 5, 15, 2, 36, tzinfo=datetime.timezone.utc), 'commenter': 'purhan', 'type': 'User'}, {'comment_id': 683655132, 'comment_body': 'ok I have changed it so its not cached anymore', 'comment_created': datetime.datetime(2021, 8, 5, 17, 32, 39, tzinfo=datetime.timezone.utc), 'commenter': 'purhan', 'type': 'User'}, {'comment_id': 684304159, 'comment_body': ""There was a mistake here but I've fixed it in the latest commit"", 'comment_created': datetime.datetime(2021, 8, 6, 15, 1, 18, tzinfo=datetime.timezone.utc), 'commenter': 'purhan', 'type': 'User'}, {'comment_id': 684304245, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 6, 15, 1, 26, tzinfo=datetime.timezone.utc), 'commenter': 'purhan', 'type': 'User'}, {'comment_id': 692549790, 'comment_body': 'I think we should call this just `SNMP`.', 'comment_created': datetime.datetime(2021, 8, 19, 23, 11, 11, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 692549868, 'comment_body': 'an alternative way', 'comment_created': datetime.datetime(2021, 8, 19, 23, 11, 21, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 692550117, 'comment_body': 'the agent is https://github.com/openwisp/openwrt-openwisp-monitoring, we should refer to it as the OpenWISP Monitoring Agent.', 'comment_created': datetime.datetime(2021, 8, 19, 23, 11, 56, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 692550931, 'comment_body': ""let's simplify this please: `OPENWISP_MONITORING_AUTO_SNMP`"", 'comment_created': datetime.datetime(2021, 8, 19, 23, 14, 29, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 692555495, 'comment_body': '`AUTO_SNMP_DEVICEMONITORING` > `AUTO_SNMP`', 'comment_created': datetime.datetime(2021, 8, 19, 23, 27, 19, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 692555560, 'comment_body': 'same here', 'comment_created': datetime.datetime(2021, 8, 19, 23, 27, 29, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 692555872, 'comment_body': '`SnmpDeviceMonitoring` > `Snmp`', 'comment_created': datetime.datetime(2021, 8, 19, 23, 28, 20, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 692556272, 'comment_body': 'auto_snmp_devicemonitoring_receiver > `auto_snmp_receiver`', 'comment_created': datetime.datetime(2021, 8, 19, 23, 29, 32, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 692556840, 'comment_body': 'please avoid this and create the check manually in the tests so we avoid having to change all the other tests (which is not good).', 'comment_created': datetime.datetime(2021, 8, 19, 23, 31, 2, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 692557351, 'comment_body': ""It's not very clear to me how OpenWrt or AirOS is chosen"", 'comment_created': datetime.datetime(2021, 8, 19, 23, 32, 38, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 692566202, 'comment_body': 'We should explain here how to use this check (how to enable it).\r\n\r\nCan you make the check inline in DeviceAdmin editable so it can be easier to add this check?\r\n\r\nPlease also add mention of this feature (SNMP support) at the bottom of the feature list in the beginnign of the README, linking the bullet point to this section, which should contain instructions on how to add the check, possibily using the device admin.', 'comment_created': datetime.datetime(2021, 8, 19, 23, 59, 5, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 693918349, 'comment_body': ""@nemesisdesign We are selecting a class from Netengine based on the type of connector. It's like a switch-case statement."", 'comment_created': datetime.datetime(2021, 8, 23, 12, 16, 52, tzinfo=datetime.timezone.utc), 'commenter': 'purhan', 'type': 'User'}, {'comment_id': 695465155, 'comment_body': 'This needs to be updated ', 'comment_created': datetime.datetime(2021, 8, 25, 7, 14, 41, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 695467898, 'comment_body': '```suggestion\r\n* Collection of monitoring information via `SNMP <#snmp>`_\r\n```', 'comment_created': datetime.datetime(2021, 8, 25, 7, 18, 43, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 695470877, 'comment_body': 'Please take a look at https://github.com/openwisp/openwisp-controller/tree/wireguard-vxlan#how-to-configure-automatic-provisioning-of-subnets-and-ips and try to right a detailed tutorial like that. \r\nSince you have developed this feature, you know where and what to configure. A user who never used OpenWISP may not find these instructions sufficient to be able to use this feature. \r\n\r\nBefore proceeding, please wait for confirmation by @nemesisdesign ', 'comment_created': datetime.datetime(2021, 8, 25, 7, 23, 5, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 695471288, 'comment_body': 'Link the SNMP section of the documentation here.', 'comment_created': datetime.datetime(2021, 8, 25, 7, 23, 38, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 695476908, 'comment_body': 'Why are we hard coding this information here? A setting would be better incase we want to add new backends. Not sure about this. ', 'comment_created': datetime.datetime(2021, 8, 25, 7, 31, 53, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 695982043, 'comment_body': ""@pandafy we can still add a setting later if we feel it can really be useful, at this stage it's not so urgent, right?"", 'comment_created': datetime.datetime(2021, 8, 25, 17, 46, 25, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 696673745, 'comment_body': 'I second this!', 'comment_created': datetime.datetime(2021, 8, 26, 14, 14, 43, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}]","[{'commit_sha': 'b2d10e0f4858e705a9bf608d36d68947d8b57328', 'committer_username': 'purhan', 'committer_name': 'Purhan Kaushik', 'committer_email': 'purhan01@gmail.com', 'commit_date': datetime.datetime(2015, 2, 7, 14, 41, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb6c9d04da58c5d180fa42da0b5c968dafe76dcb', 'committer_username': 'purhan', 'committer_name': 'Purhan Kaushik', 'committer_email': 'purhan01@gmail.com', 'commit_date': datetime.datetime(2015, 2, 7, 14, 41, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e92180821b25133a1815590d7f19ca9a0440ea2', 'committer_username': 'purhan', 'committer_name': 'Purhan Kaushik', 'committer_email': 'purhan01@gmail.com', 'commit_date': datetime.datetime(2015, 2, 7, 14, 41, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6753727f267877d4a0d8969338ee36ceb264bf96', 'committer_username': 'purhan', 'committer_name': 'Purhan Kaushik', 'committer_email': 'purhan01@gmail.com', 'commit_date': datetime.datetime(2015, 2, 7, 14, 41, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88ddeb47d3d603249dfdf810680835d9cc75c4a0', 'committer_username': 'purhan', 'committer_name': 'Purhan Kaushik', 'committer_email': 'purhan01@gmail.com', 'commit_date': datetime.datetime(2015, 2, 7, 14, 41, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64a4bf8c18668625beedfd158cdc040e1ed91874', 'committer_username': 'purhan', 'committer_name': 'Purhan Kaushik', 'committer_email': 'purhan01@gmail.com', 'commit_date': datetime.datetime(2015, 2, 7, 14, 41, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eba346f44e3a84500447805bfe236836ad08d1a2', 'committer_username': 'purhan', 'committer_name': 'Purhan Kaushik', 'committer_email': 'purhan01@gmail.com', 'commit_date': datetime.datetime(2015, 2, 7, 14, 41, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4274854c98770ccf2e927877bb2bee63fdf80d32', 'committer_username': 'purhan', 'committer_name': 'Purhan Kaushik', 'committer_email': 'purhan01@gmail.com', 'commit_date': datetime.datetime(2015, 2, 7, 14, 41, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8abfc5b37eafabd8b7098363a7d874f767625b41', 'committer_username': 'purhan', 'committer_name': 'Purhan Kaushik', 'committer_email': 'purhan01@gmail.com', 'commit_date': datetime.datetime(2015, 2, 7, 14, 41, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a08651c271689ff9d2f8dff93039f0c412c816d0', 'committer_username': 'purhan', 'committer_name': 'Purhan Kaushik', 'committer_email': 'purhan01@gmail.com', 'commit_date': datetime.datetime(2015, 2, 7, 14, 41, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b8056d8252674b4d3932f6a396e85836bdf16da9', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c4cfdab2d9e50fbbbc687088f61cdce14335f10', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd317b21393bb64390c6027a304fa18a41273dcfd', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aaad59aa7c332662b8673285f541f59b6732612b', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}]",Purhan Kaushik,10897423,purhan01@gmail.com,User,,46,,8,41

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
15380365,netengine,openwisp/netengine,Python,17,39,13,12,238,8,6,2,"[{'id': 662503622, 'number': 62, 'closed': None, 'created': datetime.datetime(2021, 6, 5, 16, 22, 53, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 1193, 'deletions': 446, 'state': 'open'}, {'id': 656394265, 'number': 59, 'closed': datetime.datetime(2021, 6, 2, 17, 34, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 28, 12, 23, tzinfo=datetime.timezone.utc), 'time_taken': 450668.0, 'time_delta': '5 days, 5:11:08', 'additions': 738, 'deletions': 625, 'state': 'closed'}, {'id': 653488475, 'number': 57, 'closed': datetime.datetime(2021, 5, 27, 20, 39, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 26, 9, 25, 33, tzinfo=datetime.timezone.utc), 'time_taken': 126832.0, 'time_delta': '1 day, 11:13:52', 'additions': 10, 'deletions': 20484, 'state': 'closed'}, {'id': 650779409, 'number': 54, 'closed': datetime.datetime(2021, 5, 26, 2, 57, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 23, 12, 18, 8, tzinfo=datetime.timezone.utc), 'time_taken': 225571.0, 'time_delta': '2 days, 14:39:31', 'additions': 26, 'deletions': 1286, 'state': 'closed'}, {'id': 646816031, 'number': 51, 'closed': datetime.datetime(2021, 5, 28, 12, 22, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 18, 14, 35, 16, tzinfo=datetime.timezone.utc), 'time_taken': 856047.0, 'time_delta': '9 days, 21:47:27', 'additions': 69, 'deletions': 0, 'state': 'closed'}, {'id': 617472702, 'number': 48, 'closed': datetime.datetime(2021, 5, 28, 15, 55, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 18, 12, 4, 10, tzinfo=datetime.timezone.utc), 'time_taken': 3469880.0, 'time_delta': '40 days, 3:51:20', 'additions': 341, 'deletions': 70, 'state': 'closed'}, {'id': 617431512, 'number': 47, 'closed': datetime.datetime(2021, 4, 20, 5, 35, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 18, 6, 35, 57, tzinfo=datetime.timezone.utc), 'time_taken': 169192.0, 'time_delta': '1 day, 22:59:52', 'additions': 94, 'deletions': 37, 'state': 'closed'}]"
248636968,openwisp-monitoring,openwisp/openwisp-monitoring,Python,107,160,12,21,573,42,19,9,"[{'id': 679798784, 'number': 309, 'closed': None, 'created': datetime.datetime(2021, 6, 29, 10, 16, 17, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 789, 'deletions': 200, 'state': 'open'}, {'id': 628654806, 'number': 294, 'closed': datetime.datetime(2021, 6, 30, 21, 23, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 2, 18, 27, 7, tzinfo=datetime.timezone.utc), 'time_taken': 5108193.0, 'time_delta': '59 days, 2:56:33', 'additions': 599, 'deletions': 14, 'state': 'closed'}, {'id': 574324541, 'number': 269, 'closed': datetime.datetime(2021, 2, 21, 15, 18, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 16, 16, 39, 11, tzinfo=datetime.timezone.utc), 'time_taken': 427149.0, 'time_delta': '4 days, 22:39:09', 'additions': 92, 'deletions': 386, 'state': 'closed'}]"
