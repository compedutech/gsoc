pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1597941353,Visualize cProfile logs and dumps ,"# Description of the changes made

_cProfile_ is a built-in Python module designed for lightweight and efficient profiling of Python programs. It provides a way to analyze code performance by collecting statistics about function calls, including the number of calls, total time spent, and time per call. Using _cProfile_, we can pinpoint bottlenecks, identify areas for optimization, and gain insights into the runtime behavior of their Python applications. The module is particularly useful for profiling and understanding the execution flow of functions within a program, aiding in the process of code optimization and performance improvement. In this pull request, _cProfile_ is utilized to gather profiling data, and the results are visualized using tools like _SnakeViz_ and _gprof2dot_ for enhanced analysis and interpretation.

## SnakeViz

SnakeViz is a web-based interactive viewer for cProfile or profile (Python built-in module) output.

### Profiling:  
- Profiling data generated by cProfile, a built-in Python profiling 
- Columns typically include `ncalls`, `tottime`,`percall`, `cumtime`, `percal`, `filename:lineno(function)`

### Visualization Plots:
- SnakeViz can generate visualizations like `icicle` and `sunburst` plots for profiling data.

### Definition:
```py
def visualize_profiling_data(profiling_path_prof, PORT=8998):
    """"""
    Visualize cProfile profiling data using SnakeViz.

    Args:
        profiling_path_prof (str): The path to the cProfile profiling data in `.prof` format.
        PORT (int): The port at which SnakeViz server runs (default is 8998), can be configured to any open port.

    Returns:
        Void. The SnakeViz starts running at the `PORT` showing the icicle and sunburst plots
    """"""

```

### Exiting the SnakeViz Server:
- To exit the SnakeViz server, a keyboard interrupt is needed.
- On Windows, press `Ctrl + C` or `Ctrl + Break`
- On Linux and macOS, press `Control + C`.

### Sample Icicle generated by SnakeViz (Trained baler for 2000 epochs)

![Screenshot from 2023-11-13 03-49-54](https://github.com/baler-collaboration/baler/assets/75798265/96006435-94a4-42a4-8f3f-a432d5329695)

## yelp-gprof2dot


### Directed Graphs (Di Graphs):

- A directed graph (digraph) is a graph that is made up of vertices (nodes) connected by directed edges.
- In the context of profiling, a directed graph can represent the flow of program execution. Nodes may correspond to functions or code blocks, and edges indicate the direction of execution from one node to another.

### Call Graphs:

- A call graph is a type of directed graph that represents the relationships between functions in a program.
- In the context of profiling, a call graph visualizes how functions call each other during program execution. Each node in the graph typically corresponds to a function, and directed edges show the flow of control from one function to another.

### Usage:

- Di graphs and call graphs are powerful tools for profiling and optimization, offering insights into the structure and behavior of the code.
- Visualization aids in comprehending complex relationships between functions, making it easier to comprehend the call order and time taken by the various parts of the function calls.

### Definition 

```py
def generate_call_graphs(func, profiling_path_pstats, output_path):
    """"""
    Generate call graphs and directed graphs (digraphs) for a given Python function.

    Args:
      func (callable): The Python function for which call graphs will be generated.
      profiling_path_pstats (str): The path to the profiling data in pstats format.
      output_path (str): The directory where the generated graphs will be saved.

    Returns:
     Void. The call graphs are created and saved in the `output_path` directory

    Note:
    - This function requires Graphviz to be installed and configured separately.
    - Ensure that the 'dot' executable from Graphviz is in the system's PATH.

    """"""
```
[Install Graphviz from here](https://graphviz.gitlab.io/download/)

### Sample call graph generated by yelp-gprof2dot (Trained baler for 2000 epochs)

![perform_training](https://github.com/baler-collaboration/baler/assets/75798265/9864efa2-a96e-4de8-84c4-02ca3cae150e)

## Replicate/Review the changes

1.  [Install Graphviz from here](https://graphviz.gitlab.io/download/)
2.  Train baler with the `--cProfile` flag

```sh
poetry run baler --project CFD_workspace CFD_project_animation --mode train --cProfile
```
The profiled outputs and plots will be stored at the location:
` workspaces/CFD_workspace/CFD_project_animation/output/profiling/`

3. Use Keyboard Interrupt to exit ",False,331,https://api.github.com/repos/baler-collaboration/baler/pulls/331,https://github.com/baler-collaboration/baler/pull/331,open,476,21,7,14,0,0,0,0,[],2023-11-12 22:47:34+00:00,,0.0,,[],"[{'commit_sha': '14c02b61d99ffc52ca01ce5924c9af9a7f4abf9e', 'committer_username': 'sanam2405', 'committer_name': 'Manas Pratim Biswas', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 10, 15, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5629e6e2c835d976c1bc7ecd52b0a1501d88743d', 'committer_username': 'sanam2405', 'committer_name': 'Manas Pratim Biswas', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 10, 15, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b57ab79a8525997837b9ecdc1906dc845f2e4e0', 'committer_username': 'sanam2405', 'committer_name': 'Manas Pratim Biswas', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 10, 15, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7598dca3d661db55cac287fe3de7e30cdd0f49c0', 'committer_username': 'sanam2405', 'committer_name': 'Manas Pratim Biswas', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 10, 15, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b59ff1b81025c44da22ad5bf6ea5bccc2e5740c3', 'committer_username': 'sanam2405', 'committer_name': 'Manas Pratim Biswas', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 10, 15, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '86381433f362eb5047c414ce1543517a853cbeed', 'committer_username': 'sanam2405', 'committer_name': 'Manas Pratim Biswas', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 10, 15, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f8a5002d947db6cdfefe64a4cc1ae614e96015e', 'committer_username': 'sanam2405', 'committer_name': 'Manas Pratim Biswas', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 10, 15, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6bb8fff9fe46e6663e56f88fbfc207a5058cbcaa', 'committer_username': 'sanam2405', 'committer_name': 'Manas Pratim Biswas', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 10, 15, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9fc72997c8f8eff52dbd53877f2030c4836b1328', 'committer_username': 'sanam2405', 'committer_name': 'Manas Pratim Biswas', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 10, 15, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5064fbc2a62452358efe6cdabbe03f2fe12c8ab2', 'committer_username': 'sanam2405', 'committer_name': 'Manas Pratim Biswas', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 10, 15, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'efaf464cf0e15669f7ae6dea3739e8a49efda674', 'committer_username': 'sanam2405', 'committer_name': 'Manas Pratim Biswas', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 10, 15, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b2dab693eb86815f82e0fffa43354a83a1fb948', 'committer_username': 'sanam2405', 'committer_name': 'Manas Pratim Biswas', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 10, 15, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67314801a799baba3f07bb1dc1e14dd15c059cc3', 'committer_username': 'sanam2405', 'committer_name': 'Manas Pratim Biswas', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 10, 15, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aea54b4c588da94de7556fcea78f30f2d3861b3a', 'committer_username': 'sanam2405', 'committer_name': 'Manas Pratim Biswas', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 10, 15, 26, 33, tzinfo=datetime.timezone.utc)}]",Manas Pratim Biswas,75798265,,User,,63,,33,64
1597302807,Implements codecarbon plots ,"### While profiling baler with codecarbon, the profiling logs can be stored as a `.CSV` file. This PR creates plots from the `.CSV `log file for better visualization of the energy profiles. 

For a sample `.CSV` as shown below 

![Screenshot from 2023-11-11 14-03-54](https://github.com/baler-collaboration/baler/assets/75798265/bc0eec23-41a7-416f-8d44-725ceaccb752)

The PR plots figures as 

![perform_training_plot1](https://github.com/baler-collaboration/baler/assets/75798265/e0d822c8-825c-4728-b093-b85970a3d696)

![perform_training_plot2](https://github.com/baler-collaboration/baler/assets/75798265/cf01ead9-6c21-4fd4-a438-9d07f0e3911a)

![perform_training_plot3](https://github.com/baler-collaboration/baler/assets/75798265/5004c098-9af7-4568-b3cd-a958111f0e90)

![perform_training_plot4](https://github.com/baler-collaboration/baler/assets/75798265/ba1eb87a-526c-4f5d-bc87-537b5c6aef44)

These plots are stored at the location `workspaces/CFD_workspace/CFD_project_animation/output/profiling` 
I have created an empty folder `profiling` under the `output` directory and added a `.gitkeep` 

![Screenshot from 2023-11-11 13-52-11](https://github.com/baler-collaboration/baler/assets/75798265/c3e1ccd4-cdda-4795-9897-35e6ec77cde6)

~**However it seems that the empty `profiling` folder is still getting ignored and not being pushed into GitHub. For now, this PR can be reviewed by explicitly creating the `profiling` folder but this needs to be fixed in the `.gitignore` which I am unable to figure out and I need help.**~

The `.gitignore` present in the root of baler directory has some issues. It is **not ignoring as intended**, in particular, if we add new contents/folders/files inside the `workspaces` directory. I fixed the above mentioned strikethrough issue by directly making an empty folder named `profiling` with a `.gitkeep ` inside and committed the changes on GitHub itself.
However the same doesn't seem to work when I do it locally. Git cannot track the empty folder and cannot push the empty folder into GitHub. Making changes to the `.gitignore` also doesn't seem to work.",False,330,https://api.github.com/repos/baler-collaboration/baler/pulls/330,https://github.com/baler-collaboration/baler/pull/330,open,341,14,6,10,0,0,0,0,[],2023-11-11 08:50:23+00:00,,0.0,,[],"[{'commit_sha': '14c02b61d99ffc52ca01ce5924c9af9a7f4abf9e', 'committer_username': 'sanam2405', 'committer_name': 'Manas Pratim Biswas', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 10, 15, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5629e6e2c835d976c1bc7ecd52b0a1501d88743d', 'committer_username': 'sanam2405', 'committer_name': 'Manas Pratim Biswas', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 10, 15, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b57ab79a8525997837b9ecdc1906dc845f2e4e0', 'committer_username': 'sanam2405', 'committer_name': 'Manas Pratim Biswas', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 10, 15, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7598dca3d661db55cac287fe3de7e30cdd0f49c0', 'committer_username': 'sanam2405', 'committer_name': 'Manas Pratim Biswas', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 10, 15, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b59ff1b81025c44da22ad5bf6ea5bccc2e5740c3', 'committer_username': 'sanam2405', 'committer_name': 'Manas Pratim Biswas', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 10, 15, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f8a5002d947db6cdfefe64a4cc1ae614e96015e', 'committer_username': 'sanam2405', 'committer_name': 'Manas Pratim Biswas', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 10, 15, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6bb8fff9fe46e6663e56f88fbfc207a5058cbcaa', 'committer_username': 'sanam2405', 'committer_name': 'Manas Pratim Biswas', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 10, 15, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9fc72997c8f8eff52dbd53877f2030c4836b1328', 'committer_username': 'sanam2405', 'committer_name': 'Manas Pratim Biswas', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 10, 15, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5064fbc2a62452358efe6cdabbe03f2fe12c8ab2', 'committer_username': 'sanam2405', 'committer_name': 'Manas Pratim Biswas', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 10, 15, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'efaf464cf0e15669f7ae6dea3739e8a49efda674', 'committer_username': 'sanam2405', 'committer_name': 'Manas Pratim Biswas', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 10, 15, 26, 33, tzinfo=datetime.timezone.utc)}]",Manas Pratim Biswas,75798265,,User,,63,,33,64
1420467540,Added -m flag while training baler. Fixes Import Error,"@exook 

Issue
- The command for training baler is presently `poetry run python baler --project CFD_workspace CFD_project_animation --mode train ` 
-  [Relative Imports Error](https://stackoverflow.com/questions/16981921/relative-imports-in-python-3) is thrown while running this command

Fix
- Using the `-m` flag fixes the issue.  
- `poetry run python -m baler --project CFD_workspace CFD_project_animation --mode train`

Screenshot of the error taken on my Linux machine
![Screenshot from 2023-07-05 11-19-01](https://github.com/baler-collaboration/baler/assets/75798265/bd3e322c-c1eb-43ff-8ea1-79eecf5eb544)


Screenshot of the error taken on my M1 MacBook Air
![Screenshot 2023-07-05 at 11 41 34 AM](https://github.com/baler-collaboration/baler/assets/75798265/5080d7ac-fac6-4fc5-8dcb-0f107190e272)
",False,286,https://api.github.com/repos/baler-collaboration/baler/pulls/286,https://github.com/baler-collaboration/baler/pull/286,closed,1,1,1,1,1,0,0,0,[],2023-07-05 06:12:57+00:00,2023-07-06 08:17:05+00:00,93848.0,"1 day, 2:04:08",[],"[{'commit_sha': '9723c50ae249f3378e150f685e1d589f78f7abc6', 'committer_username': 'sanam2405', 'committer_name': 'Manas Pratim Biswas', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 10, 15, 26, 33, tzinfo=datetime.timezone.utc)}]",Manas Pratim Biswas,75798265,,User,,63,,33,64
1411540056,MacOS Installation Issues Fixed,"- Dependencies related to python and numpy are fixed
- Instructions to add path to poetry while using a bash shell are added   

@exook @fritjof-b ",False,280,https://api.github.com/repos/baler-collaboration/baler/pulls/280,https://github.com/baler-collaboration/baler/pull/280,closed,103,37,3,3,4,0,0,0,[],2023-06-28 12:11:47+00:00,2023-06-30 03:55:10+00:00,143003.0,"1 day, 15:43:23",[],"[{'commit_sha': '5e143747fd7f6be78547975c431b67b53858c5ab', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'f9e3fe472173e3450a671ab6dc40b05d80dac8ad', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '9089d29e96446a8d92006048f4794d86502ba036', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Manas Pratim Biswas,75798265,,User,,63,,33,64

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
576188110,baler,baler-collaboration/baler,Python,24,30,7,29,774,27,16,5,"[{'id': 1597941353, 'number': 331, 'closed': None, 'created': datetime.datetime(2023, 11, 12, 22, 47, 34, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 476, 'deletions': 21, 'state': 'open'}, {'id': 1597302807, 'number': 330, 'closed': None, 'created': datetime.datetime(2023, 11, 11, 8, 50, 23, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 341, 'deletions': 14, 'state': 'open'}, {'id': 1420467540, 'number': 286, 'closed': datetime.datetime(2023, 7, 6, 8, 17, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 5, 6, 12, 57, tzinfo=datetime.timezone.utc), 'time_taken': 93848.0, 'time_delta': '1 day, 2:04:08', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 1411540056, 'number': 280, 'closed': datetime.datetime(2023, 6, 30, 3, 55, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 28, 12, 11, 47, tzinfo=datetime.timezone.utc), 'time_taken': 143003.0, 'time_delta': '1 day, 15:43:23', 'additions': 103, 'deletions': 37, 'state': 'closed'}, {'id': 1322195346, 'number': 255, 'closed': datetime.datetime(2023, 5, 16, 9, 17, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 20, 22, 17, 6, tzinfo=datetime.timezone.utc), 'time_taken': 2199601.0, 'time_delta': '25 days, 11:00:01', 'additions': 98, 'deletions': 0, 'state': 'closed'}, {'id': 1322072143, 'number': 254, 'closed': datetime.datetime(2023, 5, 16, 9, 17, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 20, 20, 19, 7, tzinfo=datetime.timezone.utc), 'time_taken': 2206690.0, 'time_delta': '25 days, 12:58:10', 'additions': 75, 'deletions': 4, 'state': 'closed'}]"
