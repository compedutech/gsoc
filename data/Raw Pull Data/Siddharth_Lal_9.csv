pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
521252940,"CompatHelper: bump compat for ""DataFrames"" to ""0.22""","This pull request changes the compat entry for the `DataFrames` package from `0.21` to `0.21, 0.22`.

This keeps the compat entries for earlier versions.

Note: I have not tested your package with this new compat entry. It is your responsibility to make sure that your package tests pass before you merge this pull request.",True,34,https://api.github.com/repos/JuliaAstro/CCDReduction.jl/pulls/34,https://github.com/JuliaAstro/CCDReduction.jl/pull/34,closed,1,1,1,1,1,0,0,0,[],2020-11-15 20:16:47+00:00,2020-11-16 04:54:54+00:00,31087.0,8:38:07,[],"[{'commit_sha': 'ec87dcbaac6d43305e683e61ae163c99640a037c', 'committer_username': 'github-actions[bot]', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 7, 30, 9, 30, 16, tzinfo=datetime.timezone.utc)}]",,41898282,,Bot,,0,,0,0
464177085,"Save compatible version of `filenames`, `arrays` and `ccds` function",This PR will mostly be taken from #30 with some minor modifications.,True,33,https://api.github.com/repos/JuliaAstro/CCDReduction.jl/pulls/33,https://github.com/JuliaAstro/CCDReduction.jl/pull/33,closed,505,38,4,21,5,33,0,0,[],2020-08-06 17:50:31+00:00,2020-08-26 20:05:24+00:00,1736093.0,"20 days, 2:14:53","[{'comment_id': 467609646, 'comment_body': ""Isn't it equivalent to\r\n```suggestion\r\n    filename = basename(path)\r\n```\r\n?"", 'comment_created': datetime.datetime(2020, 8, 9, 17, 41, 31, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 467612858, 'comment_body': 'Made the change, thank you!', 'comment_created': datetime.datetime(2020, 8, 9, 18, 16, tzinfo=datetime.timezone.utc), 'commenter': 'siddharthlal25', 'type': 'User'}, {'comment_id': 467677831, 'comment_body': ""I'm just thinking, do you need to specialize on `DataFrame` here? there's only one version of `ccds(x)` (the other is `ccds(f, x)`) and this way we can accept a much more expansive set of table types. For example, just because we return the collection as a DataFrame doesn't mean the user won't modify it or want to change it into a different type. As far as we are concerned, the only thing we need is the interface to `eachrow` and some property accessors. Theoretically the input could just be a vector of named tuples, if they're structured correctly!"", 'comment_created': datetime.datetime(2020, 8, 10, 3, 59, 13, tzinfo=datetime.timezone.utc), 'commenter': 'mileslucas', 'type': 'User'}, {'comment_id': 467679034, 'comment_body': 'I\'m torn here-\r\n\r\non one hand, it\'s _very_ clear and _very_ simple to only save via a keyword argument. However, consider `ccds(pipelin, coll; save_suffix=""_cal"")`. This won\'t actually save the files, and I now have to manually add `save=true` even though I may have assumed that it _would_ save!\r\n\r\nI would lean towards some automatic `save` behavior that can be overridden instead of requiring it. Something like\r\n```julia\r\nsave = any(!isnothing, (save_prefix, path, save_suffix))\r\n```', 'comment_created': datetime.datetime(2020, 8, 10, 4, 6, 16, tzinfo=datetime.timezone.utc), 'commenter': 'mileslucas', 'type': 'User'}, {'comment_id': 467679607, 'comment_body': '`write_data` and `getdata` offers some grammatical inconsistency. I would settle on `getdata` (mimics an astropy function, is *getting* the *data* as an array from the fits file) and `writefits` (matches grammar of no underscore, is *writing* the data to a *fits* file)\r\n\r\nlittle inconsistencies like this if we correct them now, hopefully we avoid burdening future developers and users!', 'comment_created': datetime.datetime(2020, 8, 10, 4, 9, 41, tzinfo=datetime.timezone.utc), 'commenter': 'mileslucas', 'type': 'User'}, {'comment_id': 468067705, 'comment_body': ""> Theoretically the input could just be a vector of named tuples, if they're structured correctly!\r\n\r\nI think the user would have to dig in a bit for putting up a correct vector of named tuples, and if the user doesn't do it correctly, it may lead to errors. That's why I thought of explicitly writing `DataFrame` in the description to avoid this confusion.\r\n\r\nAlthough, only writing `DataFrame` would not make sense, let's modify the docs, and keep it as:\r\n`df` can be a vector of named tuples or `DataFrame` with some specific properties.\r\n\r\nAlso, I am not sure about the compatibility of `eachrow` with vector of named tuples."", 'comment_created': datetime.datetime(2020, 8, 10, 17, 35, 50, tzinfo=datetime.timezone.utc), 'commenter': 'siddharthlal25', 'type': 'User'}, {'comment_id': 468069862, 'comment_body': ""So, should we remove the `save` keyword from the list of input parameters?\r\n\r\nPS: Keeping it would make sure that we will be saving (definitely sure!)\r\nWhereas it is possible that a user may set `save_prefix` without actually wanting to save it.\r\n\r\nPS: I don't think that makes a lot of sense.\r\nLet's remove save from keywords, what do you say?"", 'comment_created': datetime.datetime(2020, 8, 10, 17, 39, 51, tzinfo=datetime.timezone.utc), 'commenter': 'siddharthlal25', 'type': 'User'}, {'comment_id': 468070393, 'comment_body': 'Sure, I will switch to `writefits`!', 'comment_created': datetime.datetime(2020, 8, 10, 17, 40, 49, tzinfo=datetime.timezone.utc), 'commenter': 'siddharthlal25', 'type': 'User'}, {'comment_id': 468080567, 'comment_body': ""Actually, a user has to do extremely little to transfer between table types thanks to the Tables.jl interface. I'm away from my computer but I can easily take a dataframe from the collection function, turn it into a TypedTable from TypedTables.jl and there's no reason that shouldn't work with our function. So specializing in DataFrame means the users can't use anything else. My point is that we don't need the specialization AND it restricts our users, so why have it?"", 'comment_created': datetime.datetime(2020, 8, 10, 17, 58, 22, tzinfo=datetime.timezone.utc), 'commenter': 'mileslucas', 'type': 'User'}, {'comment_id': 468081158, 'comment_body': 'If you make save a keyword with a default value (like I just showed you) means that it will behave ""automatically"" but the user can still override it. Without the keyword argument the user can\'t override it.', 'comment_created': datetime.datetime(2020, 8, 10, 17, 59, 24, tzinfo=datetime.timezone.utc), 'commenter': 'mileslucas', 'type': 'User'}, {'comment_id': 468143371, 'comment_body': ""Ya, that's a point. Let's drop it!"", 'comment_created': datetime.datetime(2020, 8, 10, 19, 50, 29, tzinfo=datetime.timezone.utc), 'commenter': 'siddharthlal25', 'type': 'User'}, {'comment_id': 471169647, 'comment_body': 'maybe consider breaking this line up due to its length and re-ordering it so `save` appears _after_ the kwargs that it is based off of.', 'comment_created': datetime.datetime(2020, 8, 16, 22, 59, 28, tzinfo=datetime.timezone.utc), 'commenter': 'mileslucas', 'type': 'User'}, {'comment_id': 471169795, 'comment_body': '```suggestion\r\nLoads the data associated with each row of `collection` into an `Array` and applying `f` to the data.\r\n```', 'comment_created': datetime.datetime(2020, 8, 16, 23, 0, 48, tzinfo=datetime.timezone.utc), 'commenter': 'mileslucas', 'type': 'User'}, {'comment_id': 471170690, 'comment_body': '```suggestion\r\nThe output from `f` can be saved using the appropriate keyword arguments. The `save_prefix` argument will add a prefix to each filename delimited by `save_delim`. `save_suffix` will add a suffix prior to the extension, which can be manually provided via `ext`, similar to [`fitscollection`](@ref). Files will be saved in the directory they are stored unless `path` is given. Finally, `save` will default to `true` if any of the previous arguments are set, but can be manually overridden (useful for testing). Files will be saved using [`CCDReduction.writefits`](@ref).\r\n```', 'comment_created': datetime.datetime(2020, 8, 16, 23, 8, 37, tzinfo=datetime.timezone.utc), 'commenter': 'mileslucas', 'type': 'User'}, {'comment_id': 471170888, 'comment_body': '```suggestion\r\ndata = map(filenames(collection; path = ""~/data/tekdata"", save_prefix = ""retrieved_from_filename"")) do img\r\n```\r\n', 'comment_created': datetime.datetime(2020, 8, 16, 23, 10, 21, tzinfo=datetime.timezone.utc), 'commenter': 'mileslucas', 'type': 'User'}, {'comment_id': 471171128, 'comment_body': 'Is this exported? If not, I would change to `CCDReduction.getdata(::FITSIO.ImageHDU)`', 'comment_created': datetime.datetime(2020, 8, 16, 23, 12, 45, tzinfo=datetime.timezone.utc), 'commenter': 'mileslucas', 'type': 'User'}, {'comment_id': 471171290, 'comment_body': '```suggestion\r\nLoads the given HDU as an `Array`, permuting the dimensions appropriately.\r\n```', 'comment_created': datetime.datetime(2020, 8, 16, 23, 14, 19, tzinfo=datetime.timezone.utc), 'commenter': 'mileslucas', 'type': 'User'}, {'comment_id': 471327552, 'comment_body': ""Shouldn't we mention that it *just* gives the `filenames`?\r\n\r\n> Loads the data associated with each row of `collection` into an `Array`\r\n\r\nPS: This sounds like we are loading the images in an array"", 'comment_created': datetime.datetime(2020, 8, 17, 8, 37, 46, tzinfo=datetime.timezone.utc), 'commenter': 'siddharthlal25', 'type': 'User'}, {'comment_id': 471330240, 'comment_body': ""> Files will be saved in the directory they are stored unless `path` is given\r\n\r\nShould we implement this? Or should we leave this for user? (Haven't implemented this yet, as in rn one has to explicity mention the path)\r\n\r\nPS: I don't think it would be a trouble for the user to go for `path = @__DIR__`\r\nThoughts?"", 'comment_created': datetime.datetime(2020, 8, 17, 8, 42, 51, tzinfo=datetime.timezone.utc), 'commenter': 'siddharthlal25', 'type': 'User'}, {'comment_id': 472381585, 'comment_body': '`@__DIR__` would be the same directory as where this file is, that is definitely not what we want. I think the two options we have are either the original path or the current working directory. I think the one that makes more sense  is to have path default to the same directory as the file', 'comment_created': datetime.datetime(2020, 8, 18, 17, 59, 11, tzinfo=datetime.timezone.utc), 'commenter': 'mileslucas', 'type': 'User'}, {'comment_id': 472382205, 'comment_body': ""Ah, I was mistaken, I though based off the previous docstrings that this was `arrays`. Yes it should just say it returns the filenames, which wasn't clear before."", 'comment_created': datetime.datetime(2020, 8, 18, 18, 0, 14, tzinfo=datetime.timezone.utc), 'commenter': 'mileslucas', 'type': 'User'}, {'comment_id': 473315186, 'comment_body': '> Yes it should just say it returns the filename\r\n\r\nThis will not always return filenames, I mean it can return `CCDData` if we do:\r\n```\r\nfilenames(collection) do name\r\n    CCDData(name)\r\nend\r\n```', 'comment_created': datetime.datetime(2020, 8, 19, 20, 59, 21, tzinfo=datetime.timezone.utc), 'commenter': 'siddharthlal25', 'type': 'User'}, {'comment_id': 473460971, 'comment_body': ""careful, that's not what `filenames` returns. `filenames` actually returns an iterator of strings, roughly. The strings are the filenames. In the example you showed, the return value is a consequence of using this iterator, but the iterator itself is still over the filenames. Hopefully that makes some sense."", 'comment_created': datetime.datetime(2020, 8, 20, 0, 11, 2, tzinfo=datetime.timezone.utc), 'commenter': 'mileslucas', 'type': 'User'}, {'comment_id': 473464984, 'comment_body': ""```suggestion\r\nIterates over `collection` using each `path` and `hdu` to load data into a [`CCDData`](@ref).\r\n```\r\nI don't seen the need to include that extra detail at the sacrifice of grammatical flow"", 'comment_created': datetime.datetime(2020, 8, 20, 0, 17, 9, tzinfo=datetime.timezone.utc), 'commenter': 'mileslucas', 'type': 'User'}, {'comment_id': 473465520, 'comment_body': ""```suggestion\r\n```\r\nI don't think we need to explicitly state this"", 'comment_created': datetime.datetime(2020, 8, 20, 0, 18, 1, tzinfo=datetime.timezone.utc), 'commenter': 'mileslucas', 'type': 'User'}, {'comment_id': 473808577, 'comment_body': 'What would be a nice way of mentioning this in docs? i.e. it returns filenames but at the end it actually outputs an `Array` of `f` (function) operated on each filename.', 'comment_created': datetime.datetime(2020, 8, 20, 9, 25, 29, tzinfo=datetime.timezone.utc), 'commenter': 'siddharthlal25', 'type': 'User'}, {'comment_id': 474096346, 'comment_body': ""Well, that's still not true. Imagine the user creates a function that returns nothing. The output will then be a bunch of nothings! The output is in the users hands, so we shouldn't mention what the output is, or else we stand a chance of being wrong. All we can (and should) say is that it will apply the user function to the filename at each iteration"", 'comment_created': datetime.datetime(2020, 8, 20, 16, 1, 24, tzinfo=datetime.timezone.utc), 'commenter': 'mileslucas', 'type': 'User'}, {'comment_id': 474098890, 'comment_body': ""I've just realized we should throw a check here, too (for all 3 versions)\n`if save && !isnothing(processed_image)`"", 'comment_created': datetime.datetime(2020, 8, 20, 16, 5, 19, tzinfo=datetime.timezone.utc), 'commenter': 'mileslucas', 'type': 'User'}, {'comment_id': 474106799, 'comment_body': '~~Perfect, I will modify the docs!~~\r\n\r\nEdit:\r\n\r\nI agree that user can make a function that returns `nothing` and finally the array returned will contain `nothing`, but this does not make the point incorrect, because at the end we will still have an array of output values of `f` (containg nothing as mentioned in docs, i.e. it returns the output).\r\n\r\nThoughts?', 'comment_created': datetime.datetime(2020, 8, 20, 16, 17, 51, tzinfo=datetime.timezone.utc), 'commenter': 'siddharthlal25', 'type': 'User'}, {'comment_id': 474107963, 'comment_body': ""Shouldn't this be:\r\n`if save && (processed_image isa Array || processed_image isa CCDData)`?\r\nBecause we can only save `Array` and `CCDData`."", 'comment_created': datetime.datetime(2020, 8, 20, 16, 19, 37, tzinfo=datetime.timezone.utc), 'commenter': 'siddharthlal25', 'type': 'User'}, {'comment_id': 475734277, 'comment_body': ""I don't think we should use an if-statement to enforce type checking. We should let multiple dispatch handle that. The reasoning behind checking for `nothing` is functions *that don't have a return value*.\r\n\r\nThinking back on it, we probably shouldn't do this, since it would be weird to try saving something and failing silently- the user wouldn't see any error or warning that the data isn't being saved. If an error gets thrown (a method error for writefits) that'll fail loudly."", 'comment_created': datetime.datetime(2020, 8, 24, 16, 20, 9, tzinfo=datetime.timezone.utc), 'commenter': 'mileslucas', 'type': 'User'}, {'comment_id': 475737497, 'comment_body': 'The point I\'m trying to make is that all we need to describe is what makes this different from `arrays` and `ccds`. So instead of saying ""this returns a vector of arrays"" which is talking about the output of the user\'s own function, we should emphasize that this iterates and provides filenames. Anything beyond that is related to the user\'s function, and I don\'t think we should try writing documentation based on something we can\'t predict', 'comment_created': datetime.datetime(2020, 8, 24, 16, 25, 29, tzinfo=datetime.timezone.utc), 'commenter': 'mileslucas', 'type': 'User'}, {'comment_id': 475929656, 'comment_body': 'Pushed the changes!', 'comment_created': datetime.datetime(2020, 8, 24, 22, 28, 58, tzinfo=datetime.timezone.utc), 'commenter': 'siddharthlal25', 'type': 'User'}]","[{'commit_sha': '4d1c5a008a2e01aa35050a1866fa1c2c6084e6a3', 'committer_username': 'siddharthlal25', 'committer_name': 'Siddharth Lal', 'committer_email': 'siddharthlal25@gmail.com', 'commit_date': datetime.datetime(2017, 12, 18, 18, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2870b0c57cf1d506d83f9952d0c30cf691eb6bba', 'committer_username': 'siddharthlal25', 'committer_name': 'Siddharth Lal', 'committer_email': 'siddharthlal25@gmail.com', 'commit_date': datetime.datetime(2017, 12, 18, 18, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19351d90b6f4c69be31853f39dbe193de5f1a47a', 'committer_username': 'siddharthlal25', 'committer_name': 'Siddharth Lal', 'committer_email': 'siddharthlal25@gmail.com', 'commit_date': datetime.datetime(2017, 12, 18, 18, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c52f827716c23cc97b9430a9560a2fcc060b8f6', 'committer_username': 'siddharthlal25', 'committer_name': 'Siddharth Lal', 'committer_email': 'siddharthlal25@gmail.com', 'commit_date': datetime.datetime(2017, 12, 18, 18, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '436c58e748b884b5cb90f1ccecde21213b179a3a', 'committer_username': 'siddharthlal25', 'committer_name': 'Siddharth Lal', 'committer_email': 'siddharthlal25@gmail.com', 'commit_date': datetime.datetime(2017, 12, 18, 18, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '80aca63d3c93a3d448e5ac6413ea809596eed791', 'committer_username': 'siddharthlal25', 'committer_name': 'Siddharth Lal', 'committer_email': 'siddharthlal25@gmail.com', 'commit_date': datetime.datetime(2017, 12, 18, 18, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '246dc169a68666f63bb9eb73dcc33739e991ba31', 'committer_username': 'siddharthlal25', 'committer_name': 'Siddharth Lal', 'committer_email': 'siddharthlal25@gmail.com', 'commit_date': datetime.datetime(2017, 12, 18, 18, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9451ad27fc27ff6091925cbdfa9a014f292fd948', 'committer_username': 'siddharthlal25', 'committer_name': 'Siddharth Lal', 'committer_email': 'siddharthlal25@gmail.com', 'commit_date': datetime.datetime(2017, 12, 18, 18, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef4496475455b1efbb1c20b32bfa75f323d9af24', 'committer_username': 'siddharthlal25', 'committer_name': 'Siddharth Lal', 'committer_email': 'siddharthlal25@gmail.com', 'commit_date': datetime.datetime(2017, 12, 18, 18, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73f72c8e96480aa824756d5d22c8ad6d47235fcf', 'committer_username': 'siddharthlal25', 'committer_name': 'Siddharth Lal', 'committer_email': 'siddharthlal25@gmail.com', 'commit_date': datetime.datetime(2017, 12, 18, 18, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76664d4404b771e9988b8b8b47defd74f34ac8d3', 'committer_username': 'siddharthlal25', 'committer_name': 'Siddharth Lal', 'committer_email': 'siddharthlal25@gmail.com', 'commit_date': datetime.datetime(2017, 12, 18, 18, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b6964d9dbad9ecb8b33638d1ce99c28309768e0c', 'committer_username': 'siddharthlal25', 'committer_name': 'Siddharth Lal', 'committer_email': 'siddharthlal25@gmail.com', 'commit_date': datetime.datetime(2017, 12, 18, 18, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b80746589f6087db9ff73f3c09e67cb78ee02fec', 'committer_username': 'siddharthlal25', 'committer_name': 'Siddharth Lal', 'committer_email': 'siddharthlal25@gmail.com', 'commit_date': datetime.datetime(2017, 12, 18, 18, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3016debed2c593dd26d3ae39560dde587ea326d2', 'committer_username': 'siddharthlal25', 'committer_name': 'Siddharth Lal', 'committer_email': 'siddharthlal25@gmail.com', 'commit_date': datetime.datetime(2017, 12, 18, 18, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a63b3ff0cb0b690e6d2d3f48f5a41390e6ef3255', 'committer_username': 'siddharthlal25', 'committer_name': 'Siddharth Lal', 'committer_email': 'siddharthlal25@gmail.com', 'commit_date': datetime.datetime(2017, 12, 18, 18, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f933cd1a8a95b88d19362a0bb8f5e673cd35628', 'committer_username': 'siddharthlal25', 'committer_name': 'Siddharth Lal', 'committer_email': 'siddharthlal25@gmail.com', 'commit_date': datetime.datetime(2017, 12, 18, 18, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '32644f21fb18b227ba4b279b04d82284fad86a0e', 'committer_username': 'siddharthlal25', 'committer_name': 'Siddharth Lal', 'committer_email': 'siddharthlal25@gmail.com', 'commit_date': datetime.datetime(2017, 12, 18, 18, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '98aa01e366c9500c86fb1d67d8a7731b25a317f4', 'committer_username': 'siddharthlal25', 'committer_name': 'Siddharth Lal', 'committer_email': 'siddharthlal25@gmail.com', 'commit_date': datetime.datetime(2017, 12, 18, 18, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '31859f7031bb7d90cd29bfad13abe94858c826fb', 'committer_username': 'siddharthlal25', 'committer_name': 'Siddharth Lal', 'committer_email': 'siddharthlal25@gmail.com', 'commit_date': datetime.datetime(2017, 12, 18, 18, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4088e07ae081ef21fed0c95abeffc82a202a25e', 'committer_username': 'siddharthlal25', 'committer_name': 'Siddharth Lal', 'committer_email': 'siddharthlal25@gmail.com', 'commit_date': datetime.datetime(2017, 12, 18, 18, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe5c750096f32961f31ece9d5f8ec6d121da1bfc', 'committer_username': 'siddharthlal25', 'committer_name': 'Siddharth Lal', 'committer_email': 'siddharthlal25@gmail.com', 'commit_date': datetime.datetime(2017, 12, 18, 18, 14, tzinfo=datetime.timezone.utc)}]",Siddharth Lal,34659233,siddharthlal25@gmail.com,User,,30,,56,27
451493062,`CCDData` struct to store `ImageHDU`,"Last PR #30, in which we tried to make generators for `ImageHDU`s, after the iteration gets over all the FITS handles are closed and the collected `ImageHDU`s are not accessible.

Something like:
```
df = fitscollection(""..."")
hdus = collect(images(df))
trimmed = [trim(hdu, (:, 1040,1059)) for hdu in hdus]
```
This would error because all handles of read `ImageHDU`s are closed.

So, to solve this we introduce `CCDData` struct. This stores the header and image array, so even if the FITS handles are closed, we will still be able to access the data and header with ease.

Things to tackle in this PR:

- [x] New documentation

- [x] Tests for new Interface

- [x] Support for strings

- [x] Creating a function to create default header

- [x] work on `combine`

Checklist for next PRs:

1. Defining `==` for `CCDData`

2. Iterative and mapping versions of `images`, `filenames` and `arrays` on output of `fitscollection` using `CCDData` interface.

3. Dealing with `Symbols` as keys in header
",True,31,https://api.github.com/repos/JuliaAstro/CCDReduction.jl/pulls/31,https://github.com/JuliaAstro/CCDReduction.jl/pull/31,closed,521,279,7,37,33,61,0,0,[],2020-07-17 22:02:08+00:00,2020-08-06 15:14:10+00:00,1703522.0,"19 days, 17:12:02","[{'comment_id': 456715601, 'comment_body': '```suggestion\r\n# custom data type to hold ImageHDU\r\n```', 'comment_created': datetime.datetime(2020, 7, 17, 23, 37, 42, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 456715731, 'comment_body': 'The `*index*` functions have many methods, not just with a single index', 'comment_created': datetime.datetime(2020, 7, 17, 23, 38, 31, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 456716124, 'comment_body': ""Shouldn't this method have a `state` optional argument?"", 'comment_created': datetime.datetime(2020, 7, 17, 23, 40, 43, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 456721356, 'comment_body': 'Are you referring to this one?\r\n```\r\nsetindex!(A, v, I::Vararg{Int, N})\r\n```', 'comment_created': datetime.datetime(2020, 7, 18, 0, 7, 31, tzinfo=datetime.timezone.utc), 'commenter': 'siddharthlal25', 'type': 'User'}, {'comment_id': 456721472, 'comment_body': 'Yes, it should have one. I will add it.', 'comment_created': datetime.datetime(2020, 7, 18, 0, 8, 21, tzinfo=datetime.timezone.utc), 'commenter': 'siddharthlal25', 'type': 'User'}, {'comment_id': 456723040, 'comment_body': ""I'd do\r\n```suggestion\r\nBase.getindex(A::CCDData, inds...) = getindex(A.data, inds...)\r\nBase.setindex!(A::CCDData, v, inds...) = setindex!(A.data, v, inds...)\r\n```"", 'comment_created': datetime.datetime(2020, 7, 18, 0, 17, 43, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 457668004, 'comment_body': ""let's do\r\n```julia\r\nabstract type AbstractCCDData{T} <: AbstractMatrix{T}\r\nstruct CCDData{T,M<:AbstractMatrix{T}} <: AbstractCCDData{T}\r\n\r\nend\r\n```\r\n\r\nThis will allow future users to be able to easily extend and make their own `CCDData` type!"", 'comment_created': datetime.datetime(2020, 7, 20, 20, 19, 44, tzinfo=datetime.timezone.utc), 'commenter': 'mileslucas', 'type': 'User'}, {'comment_id': 457668873, 'comment_body': 'you should be able to get away with\r\n```julia\r\nBase.iterate(A::CCDData) = iterate(A.data)\r\nBase.iterate(A::CCDData, state) = iterate(A.data, state)\r\n```', 'comment_created': datetime.datetime(2020, 7, 20, 20, 21, 35, tzinfo=datetime.timezone.utc), 'commenter': 'mileslucas', 'type': 'User'}, {'comment_id': 457669501, 'comment_body': ""I think this function name should just be `CCDData` since it's acting as a constructor\r\n```suggestion\r\nCCDData(hdu::ImageHDU) = CCDData(getdata(hdu), read_header(hdu))\r\n```"", 'comment_created': datetime.datetime(2020, 7, 20, 20, 22, 50, tzinfo=datetime.timezone.utc), 'commenter': 'mileslucas', 'type': 'User'}, {'comment_id': 457669936, 'comment_body': ""you shouldn't need this function, right? If `CCDData <: AbstractArray` (and the implementation is correct) you shouldn't have to define any of these functions!"", 'comment_created': datetime.datetime(2020, 7, 20, 20, 23, 39, tzinfo=datetime.timezone.utc), 'commenter': 'mileslucas', 'type': 'User'}, {'comment_id': 457671718, 'comment_body': ""Hmm, interesting! Didn't see that support coming in, that would simplify a lot of things!\r\nI mean we just need to rewrite a bit of generator function and copy the mapping version from the previous PR. That makes the code so much simple! Thank you."", 'comment_created': datetime.datetime(2020, 7, 20, 20, 26, 56, tzinfo=datetime.timezone.utc), 'commenter': 'siddharthlal25', 'type': 'User'}, {'comment_id': 459030717, 'comment_body': 'Thoughts about docs? @mileslucas \r\nOnce this looks good, I will follow the same style to write docs for other functions.', 'comment_created': datetime.datetime(2020, 7, 22, 19, 26, 54, tzinfo=datetime.timezone.utc), 'commenter': 'siddharthlal25', 'type': 'User'}, {'comment_id': 459863691, 'comment_body': ""I'm not sure this filename describes the contents well. I think `ccddata.jl` is a good name."", 'comment_created': datetime.datetime(2020, 7, 24, 5, 52, 24, tzinfo=datetime.timezone.utc), 'commenter': 'mileslucas', 'type': 'User'}, {'comment_id': 459864070, 'comment_body': ""I feel like both should use `copy` if you're calling `copy`\r\n```suggestion\r\nBase.copy(ccd::CCDData) = CCDData(copy(ccd.data), copy(ccd.hdr))\r\n```"", 'comment_created': datetime.datetime(2020, 7, 24, 5, 54, tzinfo=datetime.timezone.utc), 'commenter': 'mileslucas', 'type': 'User'}, {'comment_id': 459867220, 'comment_body': 'The line ""The parameters can also be of mixed type, e.g. `frame` is an `Array` and `bias_frame` is `CCDData` or vice versa."" is unnecessary I think.\r\n\r\nAlso consider condensing these separate docs into main methods docstrings, just adding something like ""if either are strings they will be loaded into a [`CCDData`](@ref) first. The HDU loaded can be specified by...""', 'comment_created': datetime.datetime(2020, 7, 24, 6, 6, 5, tzinfo=datetime.timezone.utc), 'commenter': 'mileslucas', 'type': 'User'}, {'comment_id': 460164742, 'comment_body': '`Base.copy` is not defined for `FITSHeader`.', 'comment_created': datetime.datetime(2020, 7, 24, 16, 38, 14, tzinfo=datetime.timezone.utc), 'commenter': 'siddharthlal25', 'type': 'User'}, {'comment_id': 460231974, 'comment_body': 'okay, I would open an issue/PR at FITSIO and use `deepcopy` for now.', 'comment_created': datetime.datetime(2020, 7, 24, 18, 54, 58, tzinfo=datetime.timezone.utc), 'commenter': 'mileslucas', 'type': 'User'}, {'comment_id': 462700051, 'comment_body': 'docs :)', 'comment_created': datetime.datetime(2020, 7, 30, 2, 39, 25, tzinfo=datetime.timezone.utc), 'commenter': 'mileslucas', 'type': 'User'}, {'comment_id': 462700271, 'comment_body': 'docs, too.', 'comment_created': datetime.datetime(2020, 7, 30, 2, 40, 10, tzinfo=datetime.timezone.utc), 'commenter': 'mileslucas', 'type': 'User'}, {'comment_id': 462702149, 'comment_body': ""ehhh I think we should avoid depending on CFITSIO. Some long-term over-arching goals of FITSIO are to remove the dependency because CFITSIO is a c-library rather than a native julia implementation.\r\n\r\nYou can get `bitpix_from_type` using FITSIO, you'll just have to upper-bound the compat. Also it's small enough of a method you could just copy and paste it."", 'comment_created': datetime.datetime(2020, 7, 30, 2, 47, 26, tzinfo=datetime.timezone.utc), 'commenter': 'mileslucas', 'type': 'User'}, {'comment_id': 462702665, 'comment_body': 'probably more appropriate to PR into FITSIO.jl', 'comment_created': datetime.datetime(2020, 7, 30, 2, 49, 26, tzinfo=datetime.timezone.utc), 'commenter': 'mileslucas', 'type': 'User'}, {'comment_id': 462703868, 'comment_body': 'So, I would normally choose to keep as brief a docstring as possible, e.g. `[hdu = 1]`, since that encapsulates the behavior perfectly, and in cases like `combine` it avoids you implying any dimensionality.\r\n\r\nThis is totally up to your discretion, though, consistency is the most important!', 'comment_created': datetime.datetime(2020, 7, 30, 2, 54, 1, tzinfo=datetime.timezone.utc), 'commenter': 'mileslucas', 'type': 'User'}, {'comment_id': 462704025, 'comment_body': '\r\n```julia\r\n[`CCDData`](@ref)\r\n```', 'comment_created': datetime.datetime(2020, 7, 30, 2, 54, 40, tzinfo=datetime.timezone.utc), 'commenter': 'mileslucas', 'type': 'User'}, {'comment_id': 462705890, 'comment_body': 'This reads a little confusing- I\'m not sure it\'s really necessary for methods like `subtract_bias` where there is a clear ""frame of interest"" and a ""calibration frame"". Ideally, through the function name and the argument names it should be clear what is happening (I think so, although I may be wrong), and everything should just work.', 'comment_created': datetime.datetime(2020, 7, 30, 3, 1, 21, tzinfo=datetime.timezone.utc), 'commenter': 'mileslucas', 'type': 'User'}, {'comment_id': 462707037, 'comment_body': 'Similar to above, to ME it makes sense that you can\'t mutate on a string, so it shouldn\'t need an explanation. However, this requires knowledge of the idiosyncrasies of `!` methods, so from that viewpoint its not a terrible idea to explain it. \r\n\r\nIf you do explain it, you\'ll need to be more explicit. The first thing I would saw if I read this is ""why?"". Unfortunately, this means you\'ll be copying the same explanation to all the docstrings for consistency.\r\n\r\nSo I think either remove this or put an extra line explaining why- up to you!', 'comment_created': datetime.datetime(2020, 7, 30, 3, 5, 53, tzinfo=datetime.timezone.utc), 'commenter': 'mileslucas', 'type': 'User'}, {'comment_id': 462707177, 'comment_body': '```julia\r\n[`CCDData`](@ref)\r\n```', 'comment_created': datetime.datetime(2020, 7, 30, 3, 6, 33, tzinfo=datetime.timezone.utc), 'commenter': 'mileslucas', 'type': 'User'}, {'comment_id': 462707490, 'comment_body': 'combo of both my previous comments! The first half makes me ask ""why"" and the second half is a little hard to read/hard to understand.', 'comment_created': datetime.datetime(2020, 7, 30, 3, 7, 36, tzinfo=datetime.timezone.utc), 'commenter': 'mileslucas', 'type': 'User'}, {'comment_id': 462708000, 'comment_body': '```suggestion\r\nIf `frames` are strings, they will be loaded into [`CCDData`](@ref)s first. The HDU indices can be specified with `hdu` as either an integer or a tuple corresponding to each file.\r\n```', 'comment_created': datetime.datetime(2020, 7, 30, 3, 9, 47, tzinfo=datetime.timezone.utc), 'commenter': 'mileslucas', 'type': 'User'}, {'comment_id': 462708593, 'comment_body': ""I think this creates ambiguities if I were to call `combine(randn(512, 512))` ie combine one frame. I think this behavior should be allowed- if it doesn't work as is you'll just have to play around with typing the methods."", 'comment_created': datetime.datetime(2020, 7, 30, 3, 12, 6, tzinfo=datetime.timezone.utc), 'commenter': 'mileslucas', 'type': 'User'}, {'comment_id': 462734961, 'comment_body': ""Let's upper bound the `compat`."", 'comment_created': datetime.datetime(2020, 7, 30, 4, 54, 30, tzinfo=datetime.timezone.utc), 'commenter': 'siddharthlal25', 'type': 'User'}, {'comment_id': 462736351, 'comment_body': 'This one is not ambiguous:\r\n```\r\njulia> @which combine(randn(512, 512))\r\ncombine(frames::AbstractArray{#s27,N} where N where #s27<:Number...; method) in CCDReduction at /home/siddharth/.julia/dev/CCDReduction.jl/src/methods.jl:366\r\n```\r\nGoes to the `Vararg` version (because of `AbstractArray{<:Number}` typing)', 'comment_created': datetime.datetime(2020, 7, 30, 5, 0, 19, tzinfo=datetime.timezone.utc), 'commenter': 'siddharthlal25', 'type': 'User'}, {'comment_id': 462736774, 'comment_body': 'Let me look into it.', 'comment_created': datetime.datetime(2020, 7, 30, 5, 1, 57, tzinfo=datetime.timezone.utc), 'commenter': 'siddharthlal25', 'type': 'User'}, {'comment_id': 462869854, 'comment_body': 'Since this is not the in-place version, things can be a bit ambiguous about the header.\r\n\r\nUser thoughts:\r\n1. I am allocating a new `CCDData`, it will use the constructor `get_default_header` to get the header of the newly created struct.\r\n2. I am allocating a new `CCDData`, it will have the same header as the frame of interest.\r\n\r\nTherefore, I explicitly mentioned the source of the new header created. Thoughts?', 'comment_created': datetime.datetime(2020, 7, 30, 9, 27, 24, tzinfo=datetime.timezone.utc), 'commenter': 'siddharthlal25', 'type': 'User'}, {'comment_id': 462871487, 'comment_body': ""Let's remove this, explaining why strings are not supported would make the docs quite verbose, which may intimidate the user :laughing: "", 'comment_created': datetime.datetime(2020, 7, 30, 9, 30, 14, tzinfo=datetime.timezone.utc), 'commenter': 'siddharthlal25', 'type': 'User'}, {'comment_id': 462872593, 'comment_body': ""Let's use `[hdu = 1]`, this looks more appropriate!"", 'comment_created': datetime.datetime(2020, 7, 30, 9, 32, 14, tzinfo=datetime.timezone.utc), 'commenter': 'siddharthlal25', 'type': 'User'}, {'comment_id': 462876032, 'comment_body': 'When a user goes for a non-mutating function, the method creates a new instance of struct `CCDData`, right?\r\n\r\nNow, how will the user know, whether the header which was in output (new struct) was copied from ""calibration frame"" or generated using the `get_default_header`, are you following?', 'comment_created': datetime.datetime(2020, 7, 30, 9, 38, 14, tzinfo=datetime.timezone.utc), 'commenter': 'siddharthlal25', 'type': 'User'}, {'comment_id': 463171682, 'comment_body': 'To tackle `(::Array, ::CCDData)` (output will be an `Array`) case, I have mentioned the applicability:\r\n""header file of output (if applicable) is same as of the first parameter.""', 'comment_created': datetime.datetime(2020, 7, 30, 17, 54, 46, tzinfo=datetime.timezone.utc), 'commenter': 'siddharthlal25', 'type': 'User'}, {'comment_id': 463839381, 'comment_body': 'I would suggest this to allow patch compatibility\r\n```suggestion\r\nFITSIO = ""0.15""\r\n```', 'comment_created': datetime.datetime(2020, 7, 31, 21, 2, 58, tzinfo=datetime.timezone.utc), 'commenter': 'mileslucas', 'type': 'User'}, {'comment_id': 464110181, 'comment_body': 'maybe consider changing `images` to something else? Originally it was `images` because it generated `ImageHDU`s. Now it is generating `CCDData`, perhaps we rename to `ccds` (this is what ccdproc does), `data` (pretty ambiguous), `ccddata`?', 'comment_created': datetime.datetime(2020, 8, 2, 18, 44, 17, tzinfo=datetime.timezone.utc), 'commenter': 'mileslucas', 'type': 'User'}, {'comment_id': 464111445, 'comment_body': 'This is definitely not enough documentation for this struct. Some examples showing how it works (show how it is basically just an array!!), explain how headers are copied over/generated (very important! Show an example like `a + b` vs `b + a` returning different headers). Also, you don\'t need a docstring for every constructor, for example the constructor `CCDData(::AbstractMatrix)` can be shown in this docstring by just putting\r\n```julia\r\n""""""\r\n    CCDData(data, [hdr])\r\n```\r\nand explaining ""if `hdr` is not provided, a default will be constructed based on the data.""', 'comment_created': datetime.datetime(2020, 8, 2, 18, 56, 45, tzinfo=datetime.timezone.utc), 'commenter': 'mileslucas', 'type': 'User'}, {'comment_id': 464111495, 'comment_body': '`hdu` should be default to `1`. This is the norm.', 'comment_created': datetime.datetime(2020, 8, 2, 18, 57, 27, tzinfo=datetime.timezone.utc), 'commenter': 'mileslucas', 'type': 'User'}, {'comment_id': 464111626, 'comment_body': 'style, but this entire thing can be one-lined.\r\n```julia\r\nCCDData(path::AbstractString, hdu) = FITS(f -> CCDData(f[hdu]), path)\r\n```\r\nalso note `AbstractString` vs `String`', 'comment_created': datetime.datetime(2020, 8, 2, 18, 59, 12, tzinfo=datetime.timezone.utc), 'commenter': 'mileslucas', 'type': 'User'}, {'comment_id': 464111911, 'comment_body': ""from this line on down, you should probably switch to using `AbstractCCDData`. As I wrote before, if you define the interface like this\r\n```julia\r\ndata(ccd::CCDData) = ccd.data\r\nhdr(ccd::CCDData) = ccd.hdr\r\n```\r\nyou should have no problems.\r\n\r\nE.G\r\n\r\n```suggestion\r\nBase.size(ccd::AbstractCCDData) = size(data(ccd))\r\n```\r\n\r\n\r\nIf you don't do this, then `AbstractCCDData` is essentially worthless, as no methods have been defined for it, meaning any downstream users will have to completely implement _the exact same code that is being implemented here_."", 'comment_created': datetime.datetime(2020, 8, 2, 19, 2, 27, tzinfo=datetime.timezone.utc), 'commenter': 'mileslucas', 'type': 'User'}, {'comment_id': 464113840, 'comment_body': 'that language is still really hard to parse, in my opinion! A different way of saying the same thing is ""if `frame` is an `AbstractCCDData` the output will copy `frame`\'s header"". To me, this seems like the expected behavior, so it\'s weird to explicitly write out the documentation, but I guess it can\'t hurt.', 'comment_created': datetime.datetime(2020, 8, 2, 19, 22, tzinfo=datetime.timezone.utc), 'commenter': 'mileslucas', 'type': 'User'}, {'comment_id': 464149897, 'comment_body': ""Let's go with `ccds`, that would make life easier for the users that transition from ccdproc! Also, let's do this in the next PR, as in we can play along with generator code and then the saving versions in a clean piece of code.\r\nPS: The diff seems quite messy."", 'comment_created': datetime.datetime(2020, 8, 3, 1, 15, 18, tzinfo=datetime.timezone.utc), 'commenter': 'siddharthlal25', 'type': 'User'}, {'comment_id': 464149966, 'comment_body': 'Sure, will get that done!', 'comment_created': datetime.datetime(2020, 8, 3, 1, 15, 41, tzinfo=datetime.timezone.utc), 'commenter': 'siddharthlal25', 'type': 'User'}, {'comment_id': 464150210, 'comment_body': 'Ya, that looks much better than the current one!', 'comment_created': datetime.datetime(2020, 8, 3, 1, 17, 14, tzinfo=datetime.timezone.utc), 'commenter': 'siddharthlal25', 'type': 'User'}, {'comment_id': 464150623, 'comment_body': 'Sure, on it!', 'comment_created': datetime.datetime(2020, 8, 3, 1, 19, 34, tzinfo=datetime.timezone.utc), 'commenter': 'siddharthlal25', 'type': 'User'}, {'comment_id': 464161550, 'comment_body': 'Opened a PR https://github.com/JuliaAstro/FITSIO.jl/pull/140', 'comment_created': datetime.datetime(2020, 8, 3, 2, 17, 2, tzinfo=datetime.timezone.utc), 'commenter': 'siddharthlal25', 'type': 'User'}, {'comment_id': 464175942, 'comment_body': ""Okay, let's remove it from here and show some functionalities of `a + b` in `CCDData` struct docs, we can specify the header stuff over there."", 'comment_created': datetime.datetime(2020, 8, 3, 3, 27, 3, tzinfo=datetime.timezone.utc), 'commenter': 'siddharthlal25', 'type': 'User'}, {'comment_id': 464186010, 'comment_body': 'I think the functions `copy`, `convert`, `view`, `selectdim` and broadcast mechanics cannot be generalised for `AbstractCCDData` (let me know if that is possible). I would like to know your thoughts about the current implementation, what more modifications can we do?\r\nI tried to generalise broadcast mechanics and that leads to a lot of errors.\r\n\r\nEdit:\r\npushed the changes in [38d1213](https://github.com/JuliaAstro/CCDReduction.jl/pull/31/commits/38d1213ece08f4591c9778d4a48705b55a0307d8)', 'comment_created': datetime.datetime(2020, 8, 3, 4, 17, 27, tzinfo=datetime.timezone.utc), 'commenter': 'siddharthlal25', 'type': 'User'}, {'comment_id': 464756749, 'comment_body': 'How can we add `(@ref)` to link documentation of other packages?', 'comment_created': datetime.datetime(2020, 8, 4, 2, 7, 33, tzinfo=datetime.timezone.utc), 'commenter': 'siddharthlal25', 'type': 'User'}, {'comment_id': 464757240, 'comment_body': 'Pushed some docs in [d60e235](https://github.com/JuliaAstro/CCDReduction.jl/pull/31/commits/d60e235940b7c1250dec90ddd6b22c621ce671ef), let me know your thoughts about it. Thank you!', 'comment_created': datetime.datetime(2020, 8, 4, 2, 9, 36, tzinfo=datetime.timezone.utc), 'commenter': 'siddharthlal25', 'type': 'User'}, {'comment_id': 464787184, 'comment_body': ""you can't. Typically you can link to the package url or just don't link it."", 'comment_created': datetime.datetime(2020, 8, 4, 4, 9, 25, tzinfo=datetime.timezone.utc), 'commenter': 'mileslucas', 'type': 'User'}, {'comment_id': 464787967, 'comment_body': 'Yep, those things are probably going to unavoidable. What are the errors?', 'comment_created': datetime.datetime(2020, 8, 4, 4, 12, 21, tzinfo=datetime.timezone.utc), 'commenter': 'mileslucas', 'type': 'User'}, {'comment_id': 464806196, 'comment_body': 'All lines involving concrete types errors:\r\n```\r\nBase.copy(ccd::CCDData) = CCDData(copy(data(ccd)), deepcopy(hdr(ccd)))\r\nBase.convert(::Type{CCDData{T}}, ccd::CCDData{V}) where {T,V} = CCDData{T}(data(ccd), hdr(ccd))\r\nBase.view(ccd::CCDData, inds...) = CCDData(view(data(ccd), inds...), hdr(ccd))\r\nBase.selectdim(ccd::CCDData, d::Integer, idxs) = CCDData(selectdim(data(ccd), d, idxs), hdr(ccd))\r\n```\r\nand also the broadcast mechanics part:\r\n```\r\nfunction Base.similar(bc::Broadcast.Broadcasted{Broadcast.ArrayStyle{CCDData}}, ::Type{T}) where T\r\n    ccd = find_ccd(bc)\r\n    CCDData(similar(data(ccd), T, axes(bc)), hdr(ccd))\r\nend\r\n```\r\nBecause we are creating a new `CCDData` inside it, so we cannot substitute `AbstractCCDData` in place of `CCDData`\r\n\r\nThe errors were mostly of the form:\r\n```\r\nNo methods found\r\nAbstractCCDData(view(...), ::FITSHeader)\r\n```\r\nSame for `selectdim`, `copy` and `convert`', 'comment_created': datetime.datetime(2020, 8, 4, 5, 22, 27, tzinfo=datetime.timezone.utc), 'commenter': 'siddharthlal25', 'type': 'User'}, {'comment_id': 464806547, 'comment_body': 'Do we link it like [abc](www.google.com)?\r\n\r\nI tried this, but the REPL output for help gets messed up. (the link also becomes visible)', 'comment_created': datetime.datetime(2020, 8, 4, 5, 23, 53, tzinfo=datetime.timezone.utc), 'commenter': 'siddharthlal25', 'type': 'User'}, {'comment_id': 465408291, 'comment_body': ""by default the docstrings are going to show the full URL, not just a blue-text like you see with `@ref`, so that's the expected output."", 'comment_created': datetime.datetime(2020, 8, 5, 0, 48, 55, tzinfo=datetime.timezone.utc), 'commenter': 'mileslucas', 'type': 'User'}, {'comment_id': 465408806, 'comment_body': 'okay, that sounds about right, but give this a try for the broadcasting:\r\n```julia\r\nfunction Base.similar(bc::Broadcast.Broadcasted{Broadcast.ArrayStyle{CCD}}, ::Type{T}) where {T,CCD<:AbstractCCDData}\r\n    ccd = find_ccd(bc)\r\n    CCD(similar(data(ccd), T, axes(bc)), hdr(ccd))\r\nend\r\n```', 'comment_created': datetime.datetime(2020, 8, 5, 0, 50, 45, tzinfo=datetime.timezone.utc), 'commenter': 'mileslucas', 'type': 'User'}, {'comment_id': 465437322, 'comment_body': 'This part works pretty well:\r\n```\r\nBase.BroadcastStyle(::Type{<:CCDData}) = Broadcast.ArrayStyle{CCDData}()\r\nfunction Base.similar(bc::Broadcast.Broadcasted{Broadcast.ArrayStyle{CCD}}, ::Type{T}) where {T, CCD<:AbstractCCDData}\r\n    ccd = find_ccd(bc)\r\n    CCD(similar(data(ccd), T, axes(bc)), hdr(ccd))\r\nend\r\n""`A = find_ccd(As)` returns the first CCDData among the arguments.""\r\nfind_ccd(bc::Base.Broadcast.Broadcasted) = find_ccd(bc.args)\r\nfind_ccd(args::Tuple) = find_ccd(find_ccd(args[1]), Base.tail(args))\r\nfind_ccd(x) = x\r\nfind_ccd(::Tuple{}) = nothing\r\nfind_ccd(a::AbstractCCDData, rest) = a\r\nfind_ccd(::Any, rest) = find_ccd(rest)\r\n```\r\n\r\nI had trouble generalising this line:\r\n```\r\nBase.BroadcastStyle(::Type{<:CCDData}) = Broadcast.ArrayStyle{CCDData}()\r\n```\r\n\r\nI tried this:\r\n```\r\nBase.BroadcastStyle(::Type{T}) where {T<:AbstractCCDData} = Broadcast.ArrayStyle{T}()\r\n```\r\nBut that did not work. Any work around for this?', 'comment_created': datetime.datetime(2020, 8, 5, 2, 37, 6, tzinfo=datetime.timezone.utc), 'commenter': 'siddharthlal25', 'type': 'User'}, {'comment_id': 466484579, 'comment_body': ""For now, let's keep broadcast mechanics specific to subtype, we can discuss about this later!"", 'comment_created': datetime.datetime(2020, 8, 6, 15, 11, 32, tzinfo=datetime.timezone.utc), 'commenter': 'siddharthlal25', 'type': 'User'}]","[{'commit_sha': '51b145ad8cbafe3df05c1c5f604b7aa001f8898b', 'committer_username': 'siddharthlal25', 'committer_name': 'Siddharth Lal', 'committer_email': 'siddharthlal25@gmail.com', 'commit_date': datetime.datetime(2017, 12, 18, 18, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '076d8550f09eb5797dd39e0b4f5a1f0a449090c9', 'committer_username': 'siddharthlal25', 'committer_name': 'Siddharth Lal', 'committer_email': 'siddharthlal25@gmail.com', 'commit_date': datetime.datetime(2017, 12, 18, 18, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f2ad4fd721ea62a478a5b26e78dc20e9753c05c', 'committer_username': 'siddharthlal25', 'committer_name': 'Siddharth Lal', 'committer_email': 'siddharthlal25@gmail.com', 'commit_date': datetime.datetime(2017, 12, 18, 18, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '506f40588cfce7de2d58db0b21e942c92167d11e', 'committer_username': 'mileslucas', 'committer_name': 'Miles Lucas', 'committer_email': None, 'commit_date': datetime.datetime(2015, 9, 2, 20, 49, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc1efc3121dc1c1effc9b247005566e62661701b', 'committer_username': 'mileslucas', 'committer_name': 'Miles Lucas', 'committer_email': None, 'commit_date': datetime.datetime(2015, 9, 2, 20, 49, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa79da2ad28ae6e0b6f241d8f4c085fb099d612b', 'committer_username': 'mileslucas', 'committer_name': 'Miles Lucas', 'committer_email': None, 'commit_date': datetime.datetime(2015, 9, 2, 20, 49, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a6cceeb834430d770db7a22cabcb1237840512e4', 'committer_username': 'siddharthlal25', 'committer_name': 'Siddharth Lal', 'committer_email': 'siddharthlal25@gmail.com', 'commit_date': datetime.datetime(2017, 12, 18, 18, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b4117284e109c2ff6914d8e2667515ecc2a491a', 'committer_username': 'siddharthlal25', 'committer_name': 'Siddharth Lal', 'committer_email': 'siddharthlal25@gmail.com', 'commit_date': datetime.datetime(2017, 12, 18, 18, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72adbe3b8a7181061e212737567e0f23485ebf02', 'committer_username': 'siddharthlal25', 'committer_name': 'Siddharth Lal', 'committer_email': 'siddharthlal25@gmail.com', 'commit_date': datetime.datetime(2017, 12, 18, 18, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bada77c43d779798d409f3b18359ac876e19edcf', 'committer_username': 'siddharthlal25', 'committer_name': 'Siddharth Lal', 'committer_email': 'siddharthlal25@gmail.com', 'commit_date': datetime.datetime(2017, 12, 18, 18, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '263ebcaf8ed550567a189c567f1d5a248bc0e240', 'committer_username': 'siddharthlal25', 'committer_name': 'Siddharth Lal', 'committer_email': 'siddharthlal25@gmail.com', 'commit_date': datetime.datetime(2017, 12, 18, 18, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '940a46844776ee50a66c1f56e2d50c4f26deb4d8', 'committer_username': 'siddharthlal25', 'committer_name': 'Siddharth Lal', 'committer_email': 'siddharthlal25@gmail.com', 'commit_date': datetime.datetime(2017, 12, 18, 18, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4754d471c5808a74468a192ad4e10504c4c99026', 'committer_username': 'siddharthlal25', 'committer_name': 'Siddharth Lal', 'committer_email': 'siddharthlal25@gmail.com', 'commit_date': datetime.datetime(2017, 12, 18, 18, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3cf28d6b9d6f4b28320a5ee1e061f4ae531c26a', 'committer_username': 'siddharthlal25', 'committer_name': 'Siddharth Lal', 'committer_email': 'siddharthlal25@gmail.com', 'commit_date': datetime.datetime(2017, 12, 18, 18, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eaf7112903be4e9221a48dec672d23308498b7f6', 'committer_username': 'siddharthlal25', 'committer_name': 'Siddharth Lal', 'committer_email': 'siddharthlal25@gmail.com', 'commit_date': datetime.datetime(2017, 12, 18, 18, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a8fa84d950720716c7b2ff556f06332a898c3e2b', 'committer_username': 'siddharthlal25', 'committer_name': 'Siddharth Lal', 'committer_email': 'siddharthlal25@gmail.com', 'commit_date': datetime.datetime(2017, 12, 18, 18, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c693649f0acdb13bc13ff6212d16d4e83c018e0', 'committer_username': 'siddharthlal25', 'committer_name': 'Siddharth Lal', 'committer_email': 'siddharthlal25@gmail.com', 'commit_date': datetime.datetime(2017, 12, 18, 18, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b921aeb58e47b7a09e19e65402427288b29234c', 'committer_username': 'siddharthlal25', 'committer_name': 'Siddharth Lal', 'committer_email': 'siddharthlal25@gmail.com', 'commit_date': datetime.datetime(2017, 12, 18, 18, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8b0116483d943b3d9cfc5494f68e1eedacb113c', 'committer_username': 'siddharthlal25', 'committer_name': 'Siddharth Lal', 'committer_email': 'siddharthlal25@gmail.com', 'commit_date': datetime.datetime(2017, 12, 18, 18, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4da31d22d804036e9686b320d41bf4c27fc2c5d', 'committer_username': 'siddharthlal25', 'committer_name': 'Siddharth Lal', 'committer_email': 'siddharthlal25@gmail.com', 'commit_date': datetime.datetime(2017, 12, 18, 18, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '55055454dbc563cea7bb2d71fc9fff50c71784c7', 'committer_username': 'siddharthlal25', 'committer_name': 'Siddharth Lal', 'committer_email': 'siddharthlal25@gmail.com', 'commit_date': datetime.datetime(2017, 12, 18, 18, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1858a6d62e900dce4f107deb3f99a9a33fd5ef42', 'committer_username': 'siddharthlal25', 'committer_name': 'Siddharth Lal', 'committer_email': 'siddharthlal25@gmail.com', 'commit_date': datetime.datetime(2017, 12, 18, 18, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb715300c25feb104709d83a268875abf429e91c', 'committer_username': 'siddharthlal25', 'committer_name': 'Siddharth Lal', 'committer_email': 'siddharthlal25@gmail.com', 'commit_date': datetime.datetime(2017, 12, 18, 18, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0980f1c2507588f3ce9f014ba63559311b88e120', 'committer_username': 'siddharthlal25', 'committer_name': 'Siddharth Lal', 'committer_email': 'siddharthlal25@gmail.com', 'commit_date': datetime.datetime(2017, 12, 18, 18, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '534c20dab3ab8f6f2dd791adfd30fbe669344a4e', 'committer_username': 'siddharthlal25', 'committer_name': 'Siddharth Lal', 'committer_email': 'siddharthlal25@gmail.com', 'commit_date': datetime.datetime(2017, 12, 18, 18, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '55bb9b0392409d19ec2a4b39bcfeef5fcbc208dd', 'committer_username': 'siddharthlal25', 'committer_name': 'Siddharth Lal', 'committer_email': 'siddharthlal25@gmail.com', 'commit_date': datetime.datetime(2017, 12, 18, 18, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef280d047a9d84793e55cd3e33892c6c4b27c3ac', 'committer_username': 'siddharthlal25', 'committer_name': 'Siddharth Lal', 'committer_email': 'siddharthlal25@gmail.com', 'commit_date': datetime.datetime(2017, 12, 18, 18, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '89667d1b7db97ed011eac2bdc477b5e582873cfd', 'committer_username': 'siddharthlal25', 'committer_name': 'Siddharth Lal', 'committer_email': 'siddharthlal25@gmail.com', 'commit_date': datetime.datetime(2017, 12, 18, 18, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e30f439cbb1eaf07e5fab151015ef949ef09128c', 'committer_username': 'siddharthlal25', 'committer_name': 'Siddharth Lal', 'committer_email': 'siddharthlal25@gmail.com', 'commit_date': datetime.datetime(2017, 12, 18, 18, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b0f826fcff99324dd219278c08f483d3921c86cc', 'committer_username': 'siddharthlal25', 'committer_name': 'Siddharth Lal', 'committer_email': 'siddharthlal25@gmail.com', 'commit_date': datetime.datetime(2017, 12, 18, 18, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e942b31f8cb2dd9e5beb1d74cca9be128a89bc2', 'committer_username': 'siddharthlal25', 'committer_name': 'Siddharth Lal', 'committer_email': 'siddharthlal25@gmail.com', 'commit_date': datetime.datetime(2017, 12, 18, 18, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f9316ba04383e027a5fe0c8c3a57777bdef5937', 'committer_username': 'siddharthlal25', 'committer_name': 'Siddharth Lal', 'committer_email': 'siddharthlal25@gmail.com', 'commit_date': datetime.datetime(2017, 12, 18, 18, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '617b05b36249d61f7af0177d4779b01d053b3bd7', 'committer_username': 'siddharthlal25', 'committer_name': 'Siddharth Lal', 'committer_email': 'siddharthlal25@gmail.com', 'commit_date': datetime.datetime(2017, 12, 18, 18, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38d1213ece08f4591c9778d4a48705b55a0307d8', 'committer_username': 'siddharthlal25', 'committer_name': 'Siddharth Lal', 'committer_email': 'siddharthlal25@gmail.com', 'commit_date': datetime.datetime(2017, 12, 18, 18, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd60e235940b7c1250dec90ddd6b22c621ce671ef', 'committer_username': 'siddharthlal25', 'committer_name': 'Siddharth Lal', 'committer_email': 'siddharthlal25@gmail.com', 'commit_date': datetime.datetime(2017, 12, 18, 18, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c04689a171bfba59425653bba4ab98268ea96cbf', 'committer_username': 'siddharthlal25', 'committer_name': 'Siddharth Lal', 'committer_email': 'siddharthlal25@gmail.com', 'commit_date': datetime.datetime(2017, 12, 18, 18, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '473c203242e4dda6d203ba02f80283dea6a19257', 'committer_username': 'siddharthlal25', 'committer_name': 'Siddharth Lal', 'committer_email': 'siddharthlal25@gmail.com', 'commit_date': datetime.datetime(2017, 12, 18, 18, 14, tzinfo=datetime.timezone.utc)}]",Siddharth Lal,34659233,siddharthlal25@gmail.com,User,,30,,56,27

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
243471761,CCDReduction.jl,JuliaAstro/CCDReduction.jl,Julia,4,7,7,8,272,3,4,1,"[{'id': 1972290061, 'number': 45, 'closed': None, 'created': datetime.datetime(2024, 7, 16, 20, 17, 31, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 1, 'deletions': 1, 'state': 'open'}, {'id': 1972289958, 'number': 44, 'closed': datetime.datetime(2024, 7, 16, 21, 29, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 7, 16, 20, 17, 26, tzinfo=datetime.timezone.utc), 'time_taken': 4309.0, 'time_delta': '1:11:49', 'additions': 1, 'deletions': 0, 'state': 'closed'}, {'id': 549498202, 'number': 36, 'closed': datetime.datetime(2021, 7, 2, 2, 43, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 5, 20, 33, 50, tzinfo=datetime.timezone.utc), 'time_taken': 15314982.0, 'time_delta': '177 days, 6:09:42', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 521252940, 'number': 34, 'closed': datetime.datetime(2020, 11, 16, 4, 54, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 11, 15, 20, 16, 47, tzinfo=datetime.timezone.utc), 'time_taken': 31087.0, 'time_delta': '8:38:07', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 461854980, 'number': 32, 'closed': datetime.datetime(2020, 8, 9, 17, 36, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 2, 20, 18, 12, tzinfo=datetime.timezone.utc), 'time_taken': 595092.0, 'time_delta': '6 days, 21:18:12', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 442964875, 'number': 29, 'closed': datetime.datetime(2020, 7, 1, 20, 39, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 1, 20, 16, 41, tzinfo=datetime.timezone.utc), 'time_taken': 1353.0, 'time_delta': '0:22:33', 'additions': 1, 'deletions': 1, 'state': 'closed'}]"
