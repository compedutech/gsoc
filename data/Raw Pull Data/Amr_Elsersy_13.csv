pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
441562886,Plotting interface,"The Plotting Interface is responsible for Plotting the transport msgs that will be used from ign-gui and ign-gazebo plugins

it accepts the dragged fields from the TopicViewer plugin to register the fields to a specific chart

![Screenshot from 2020-08-25 06-45-28](https://user-images.githubusercontent.com/35613645/91252872-beaa5f00-e75e-11ea-9e6a-590b64bc04e7.png)

This is a UML Diagram for the code

![Plot_ClassDiagram](https://user-images.githubusercontent.com/35613645/86038903-f4beb180-ba41-11ea-8d2e-211e8d05c0c6.png)

@chapulina 
@claireyywang 
",True,89,https://api.github.com/repos/gazebosim/gz-gui/pulls/89,https://github.com/gazebosim/gz-gui/pull/89,closed,2460,0,16,3,0,85,2,1,"[{'name': 'enhancement'}, {'name': 'ðŸ”® dome'}]",2020-06-29 17:53:21+00:00,2020-08-27 00:46:29+00:00,5035988.0,"58 days, 6:53:08","[{'comment_id': 453952438, 'comment_body': ""We should do some checking to see if `drop.text` has a `,`. If it doesn't, print a warning and return."", 'comment_created': datetime.datetime(2020, 7, 13, 21, 46, 14, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 453953592, 'comment_body': ""Let's override the `LoadConfig` function so that you can set the title to something like  `Plotting`"", 'comment_created': datetime.datetime(2020, 7, 13, 21, 47, 48, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 453954263, 'comment_body': 'How about calling this plugin `TransportPlotting`? That may be clearer to end users.', 'comment_created': datetime.datetime(2020, 7, 13, 21, 48, 48, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 453955161, 'comment_body': ""Please document this class. It's especially important to document it because it's being installed and any downstream user could use it."", 'comment_created': datetime.datetime(2020, 7, 13, 21, 50, 2, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 453955700, 'comment_body': ""Let's move these member variables to `dataPtr` (i.e. `PlottingIfacePrivate`). This will allow us to change them even after releasing this."", 'comment_created': datetime.datetime(2020, 7, 13, 21, 50, 49, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 453955835, 'comment_body': 'Missing copyright for the QML files :wink: ', 'comment_created': datetime.datetime(2020, 7, 13, 21, 51, 3, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 453956719, 'comment_body': 'When I add a new chart I get this warning:\r\n\r\n`[GUI] [Wrn] [Application.cc:649] [QT] qrc:/qml/Chart.qml:218: ReferenceError: view is not defined`', 'comment_created': datetime.datetime(2020, 7, 13, 21, 52, 42, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 453957649, 'comment_body': '```suggestion\r\n  /// \\brief Private data member.\r\n  private: std::unique_ptr<PlottingIfacePrivate> dataPtr;\r\n```', 'comment_created': datetime.datetime(2020, 7, 13, 21, 54, 6, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 453958880, 'comment_body': ""Can the `Field`, `Topic` and `Transport` classes be moved to another `.hh` file under the `src` folder? The least we have in this header the better, because everything under `include` in installed and can't be changed after it is released."", 'comment_created': datetime.datetime(2020, 7, 13, 21, 55, 59, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 453959279, 'comment_body': 'Are all these indentation changes necessary?', 'comment_created': datetime.datetime(2020, 7, 13, 21, 56, 32, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 453968861, 'comment_body': ""alphabetize, and need to follow order of headers https://google.github.io/styleguide/cppguide.html#Names_and_Order_of_Includes \r\n\r\nI'd recommend following this rule for all other headers in files to avoid codecheck warnings on CI. "", 'comment_created': datetime.datetime(2020, 7, 13, 22, 10, 11, tzinfo=datetime.timezone.utc), 'commenter': 'claireyywang', 'type': 'User'}, {'comment_id': 453969317, 'comment_body': 'missing `/// \\brief`. maybe `const double _value`? ', 'comment_created': datetime.datetime(2020, 7, 13, 22, 10, 53, tzinfo=datetime.timezone.utc), 'commenter': 'claireyywang', 'type': 'User'}, {'comment_id': 453970072, 'comment_body': 'recommend function name start with verb if possible, ex. `GetValue()`. missing `/// \\brief`. also, can this be a `const` function? ', 'comment_created': datetime.datetime(2020, 7, 13, 22, 11, 59, tzinfo=datetime.timezone.utc), 'commenter': 'claireyywang', 'type': 'User'}, {'comment_id': 453970379, 'comment_body': 'missing `/// \\param[in]`', 'comment_created': datetime.datetime(2020, 7, 13, 22, 12, 26, tzinfo=datetime.timezone.utc), 'commenter': 'claireyywang', 'type': 'User'}, {'comment_id': 453970665, 'comment_body': ""`void` function doesn't need `/// \\return`"", 'comment_created': datetime.datetime(2020, 7, 13, 22, 12, 55, tzinfo=datetime.timezone.utc), 'commenter': 'claireyywang', 'type': 'User'}, {'comment_id': 453977320, 'comment_body': '`public` -> `protected` -> `private` https://google.github.io/styleguide/cppguide.html#Declaration_Order ', 'comment_created': datetime.datetime(2020, 7, 13, 22, 23, 6, tzinfo=datetime.timezone.utc), 'commenter': 'claireyywang', 'type': 'User'}, {'comment_id': 453984891, 'comment_body': ""@chapulina during last week's meeting, @AmrElsersy asked about how to connect `SIGNAL` and `SLOT` in this function cuz this line doesn't work. I vaguely remember doing it many months ago and there was a tricky syntax involved https://doc.qt.io/qt-5/signalsandslots.html#signals-and-slots-with-default-arguments but am not sure if that is the cause of issue. Any suggestions? "", 'comment_created': datetime.datetime(2020, 7, 13, 22, 34, 33, tzinfo=datetime.timezone.utc), 'commenter': 'claireyywang', 'type': 'User'}, {'comment_id': 453988311, 'comment_body': 'missing documentation on this function', 'comment_created': datetime.datetime(2020, 7, 13, 22, 41, 40, tzinfo=datetime.timezone.utc), 'commenter': 'claireyywang', 'type': 'User'}, {'comment_id': 459170876, 'comment_body': 'ok but how can i include them after moving them to a .hh file in the /src folder ?', 'comment_created': datetime.datetime(2020, 7, 23, 1, 27, 8, tzinfo=datetime.timezone.utc), 'commenter': 'AmrElsersy', 'type': 'User'}, {'comment_id': 459171236, 'comment_body': ""No :D \r\ni just add one line in the middle and all these changes are added\r\nthey don't have any changes except one line"", 'comment_created': datetime.datetime(2020, 7, 23, 1, 29, 1, tzinfo=datetime.timezone.utc), 'commenter': 'AmrElsersy', 'type': 'User'}, {'comment_id': 459176637, 'comment_body': 'For example:\r\n\r\n* `include/ignition/gui/PlottingInterface.hh`\r\n    * Declares `PlottingInterface`\r\n    * Doesn\'t need `Field`, `Topic` or `Transport`\r\n* `src/PlottingTransport.hh`\r\n   * Declares `Field`, `Topic` and `Transport` (just like you have here, but on a separate file)\r\n* `src/PlottingTransport.cc`\r\n    * Implements `Field`, `Topic` and `Transport`\r\n    * Includes `#include ""PlottingTransport.hh""`\r\n* `src/PlottingInterface.cc`\r\n    * Includes `#include ""PlottingTransport.hh""`\r\n    * Includes `#include ""ignition/gui/PlottingInterface.hh""`\r\n    * Implements `PlottingInterface`\r\n    * Uses `Field`, `Topic` or `Transport`\r\n\r\n', 'comment_created': datetime.datetime(2020, 7, 23, 1, 54, 12, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 459177126, 'comment_body': 'Does your editor have some setting to convert spaces into tabs or something like that? :monocle_face: I can help you revert these.', 'comment_created': datetime.datetime(2020, 7, 23, 1, 56, 21, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 459185774, 'comment_body': 'It was GetValue before but Louise recommended to be like ""Value"" instead :D ', 'comment_created': datetime.datetime(2020, 7, 23, 2, 36, 17, tzinfo=datetime.timezone.utc), 'commenter': 'AmrElsersy', 'type': 'User'}, {'comment_id': 459186048, 'comment_body': 'yeah, it was not void before, i just forgot to remove the comment :D ', 'comment_created': datetime.datetime(2020, 7, 23, 2, 37, 38, tzinfo=datetime.timezone.utc), 'commenter': 'AmrElsersy', 'type': 'User'}, {'comment_id': 468286110, 'comment_body': 'This should be\r\n\r\n```suggestion\r\n#define IGNITION_GUI_PLUGINS_TRANSPORTPLOTTING_HH_\r\n```', 'comment_created': datetime.datetime(2020, 8, 11, 2, 13, 17, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 468287498, 'comment_body': ""```suggestion\r\n            font.weight: Font.Bold\r\n```\r\n\r\nOtherwise there's this warning:\r\n\r\n`[GUI] [Wrn] [Application.cc:649] [QT] qrc:/qml/PlottingInterface.qml:91:26: Unable to assign [undefined] to int`"", 'comment_created': datetime.datetime(2020, 8, 11, 2, 18, 28, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 470216591, 'comment_body': 'I believe you can just use \r\n```suggestion\r\n  public: ~TransportPlotting() {};\r\n```', 'comment_created': datetime.datetime(2020, 8, 13, 20, 6, 4, tzinfo=datetime.timezone.utc), 'commenter': 'claireyywang', 'type': 'User'}, {'comment_id': 470216862, 'comment_body': 'then you can get rid of this part ', 'comment_created': datetime.datetime(2020, 8, 13, 20, 6, 27, tzinfo=datetime.timezone.utc), 'commenter': 'claireyywang', 'type': 'User'}, {'comment_id': 470217452, 'comment_body': 'what happened here? Is there a bug or do we need this test?', 'comment_created': datetime.datetime(2020, 8, 13, 20, 7, 34, tzinfo=datetime.timezone.utc), 'commenter': 'claireyywang', 'type': 'User'}, {'comment_id': 470306435, 'comment_body': 'can we group this with other quote include headers?', 'comment_created': datetime.datetime(2020, 8, 13, 23, 40, 50, tzinfo=datetime.timezone.utc), 'commenter': 'claireyywang', 'type': 'User'}, {'comment_id': 470311022, 'comment_body': '```suggestion\r\n  for (auto const &topic : topics)\r\n```\r\npass by reference to avoid making copy, and since we are not changing its value, use `const` to enforce the restriction', 'comment_created': datetime.datetime(2020, 8, 13, 23, 56, 44, tzinfo=datetime.timezone.utc), 'commenter': 'claireyywang', 'type': 'User'}, {'comment_id': 470311106, 'comment_body': '```suggestion\r\n    for (auto const &field : fields)\r\n```', 'comment_created': datetime.datetime(2020, 8, 13, 23, 57, 2, tzinfo=datetime.timezone.utc), 'commenter': 'claireyywang', 'type': 'User'}, {'comment_id': 470311198, 'comment_body': '```suggestion\r\n      for (auto const &chart : charts)\r\n```', 'comment_created': datetime.datetime(2020, 8, 13, 23, 57, 28, tzinfo=datetime.timezone.utc), 'commenter': 'claireyywang', 'type': 'User'}, {'comment_id': 470311535, 'comment_body': 'I don\'t think we should mention the other plugins here. `ign-gui` users don\'t have the `ComponentInspector`. Also, we shouldn\'t limit ourselves to these plugins. Nothing prevents a user from creating another plugin that has draggable topics, right?\r\n\r\n```suggestion\r\n            text: qsTr(""Drag & Drop plottable fields"")\r\n```', 'comment_created': datetime.datetime(2020, 8, 13, 23, 58, 47, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 470311941, 'comment_body': 'Can you document all these functions and properties? Use the `/** */` notation like here:\r\n\r\nhttps://github.com/ignitionrobotics/ign-gui/blob/58cedf4c96b4baf46a0c5c79234faf9e3dc4e924/src/plugins/world_control/WorldControl.qml#L50-L53', 'comment_created': datetime.datetime(2020, 8, 14, 0, 0, 12, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 470312936, 'comment_body': ""Just curious, you couldn't connect directly to `PlottingIface`'s `subscribe` slot here directly? The same goes for all the other connections being wrapped.\r\n"", 'comment_created': datetime.datetime(2020, 8, 14, 0, 4, 1, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 470312952, 'comment_body': '```suggestion\r\n          topic.first + ""-"" + field.first);\r\n```', 'comment_created': datetime.datetime(2020, 8, 14, 0, 4, 6, tzinfo=datetime.timezone.utc), 'commenter': 'claireyywang', 'type': 'User'}, {'comment_id': 470313148, 'comment_body': 'If we really need to forward these calls, can we order the parameters the same way on both of them?', 'comment_created': datetime.datetime(2020, 8, 14, 0, 4, 42, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 470313472, 'comment_body': 'Style: prefix all input arguments, for all functions, with `_`:\r\n\r\n```suggestion\r\n  function reallocateChart(_chart)\r\n```', 'comment_created': datetime.datetime(2020, 8, 14, 0, 5, 10, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 470314156, 'comment_body': 'Is it still a todo?', 'comment_created': datetime.datetime(2020, 8, 14, 0, 6, 21, tzinfo=datetime.timezone.utc), 'commenter': 'claireyywang', 'type': 'User'}, {'comment_id': 470314223, 'comment_body': 'oops, more bad indentation here and above\r\n\r\n```suggestion\r\n      ref = valueMsg->GetReflection();\r\n```', 'comment_created': datetime.datetime(2020, 8, 14, 0, 6, 29, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 470314650, 'comment_body': '```suggestion\r\n      this->dataPtr->node.Unsubscribe(topicIt->first);\r\n```', 'comment_created': datetime.datetime(2020, 8, 14, 0, 7, 9, tzinfo=datetime.timezone.utc), 'commenter': 'claireyywang', 'type': 'User'}, {'comment_id': 470315268, 'comment_body': ""This sounds like something strange to do inside this function. As a user, I'd expect just to receive `true` / `false`, without any other side effects."", 'comment_created': datetime.datetime(2020, 8, 14, 0, 8, 4, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 470315673, 'comment_body': '```suggestion\r\n      if (valueMsg)\r\n      {\r\n        valueMsg = ref->MutableMessage\r\n          (const_cast<google::protobuf::Message *>(valueMsg), field);\r\n      }\r\n```', 'comment_created': datetime.datetime(2020, 8, 14, 0, 8, 42, tzinfo=datetime.timezone.utc), 'commenter': 'claireyywang', 'type': 'User'}, {'comment_id': 470315850, 'comment_body': '```suggestion\r\n        valueMsg = ref->MutableMessage\r\n```', 'comment_created': datetime.datetime(2020, 8, 14, 0, 8, 58, tzinfo=datetime.timezone.utc), 'commenter': 'claireyywang', 'type': 'User'}, {'comment_id': 470316760, 'comment_body': '```suggestion\r\nstd::string &Topic::Name() const\r\n```', 'comment_created': datetime.datetime(2020, 8, 14, 0, 10, 17, tzinfo=datetime.timezone.utc), 'commenter': 'claireyywang', 'type': 'User'}, {'comment_id': 470344456, 'comment_body': 'This test is a bit fragile and it will probably fail on slower machines. What we usually do it wait in a loop until a certain condition is reached, with a maximum timeout. For example:\r\n\r\nhttps://github.com/ignitionrobotics/ign-gui/blob/58cedf4c96b4baf46a0c5c79234faf9e3dc4e924/src/plugins/publisher/Publisher_TEST.cc#L125-L132\r\n\r\nHere, instead of `received`, you could check the value of a field.', 'comment_created': datetime.datetime(2020, 8, 14, 0, 52, 19, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 470345141, 'comment_body': 'What are you trying to test here? Anything we can help with?', 'comment_created': datetime.datetime(2020, 8, 14, 0, 53, 21, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 470345677, 'comment_body': 'Always wrap multiple lines in `{}`', 'comment_created': datetime.datetime(2020, 8, 14, 0, 54, 9, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 470346262, 'comment_body': 'Is there a chance we get here and `valueMsg` is `nullptr`? Maybe is `MutableMessage` returns null? In that case, we should check that the pointer is valid before using it.', 'comment_created': datetime.datetime(2020, 8, 14, 0, 54, 59, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 470424518, 'comment_body': 'I think it could be removed ', 'comment_created': datetime.datetime(2020, 8, 14, 5, 54, 43, tzinfo=datetime.timezone.utc), 'commenter': 'AmrElsersy', 'type': 'User'}, {'comment_id': 470428350, 'comment_body': 'Yeah but it should be in the same format that is processed by the plugin\r\nwhich is  ""topic,field""\r\n\r\nbut ok i updated it ', 'comment_created': datetime.datetime(2020, 8, 14, 6, 8, 20, tzinfo=datetime.timezone.utc), 'commenter': 'AmrElsersy', 'type': 'User'}, {'comment_id': 470429408, 'comment_body': 'Yes i can do that, i do this to make the interactions between the UI and the Class through the PlottingInterface.qml only ðŸ‘€', 'comment_created': datetime.datetime(2020, 8, 14, 6, 11, 54, tzinfo=datetime.timezone.utc), 'commenter': 'AmrElsersy', 'type': 'User'}, {'comment_id': 470479809, 'comment_body': 'that was an old problem, but it tests small functionality, and i think it can be removed', 'comment_created': datetime.datetime(2020, 8, 14, 8, 19, 21, tzinfo=datetime.timezone.utc), 'commenter': 'AmrElsersy', 'type': 'User'}, {'comment_id': 470499120, 'comment_body': 'it was an old function i updated it to unsubscribe from all the topics that are outdated ', 'comment_created': datetime.datetime(2020, 8, 14, 8, 55, 33, tzinfo=datetime.timezone.utc), 'commenter': 'AmrElsersy', 'type': 'User'}, {'comment_id': 470514560, 'comment_body': 'what do you mean ? :D ', 'comment_created': datetime.datetime(2020, 8, 14, 9, 26, 45, tzinfo=datetime.timezone.utc), 'commenter': 'AmrElsersy', 'type': 'User'}, {'comment_id': 471829240, 'comment_body': 'got a compiler warning here on Ubuntu CI\r\n```\r\n/home/claire/gsoc_dome_ws/src/ign-gui/test/gtest/include/gtest/gtest.h:1444:11: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]\r\n   if (lhs == rhs) {\r\n```\r\nI recommend to either cast the `x` value to `int`, or use `EXPECT_NEAR(_msg.pose().position().x(), 10, 1e-6)` to get rid of the warning', 'comment_created': datetime.datetime(2020, 8, 17, 23, 29, 36, tzinfo=datetime.timezone.utc), 'commenter': 'claireyywang', 'type': 'User'}, {'comment_id': 471834148, 'comment_body': '```suggestion\r\n  public: ~PlottingInterface() {};\r\n```', 'comment_created': datetime.datetime(2020, 8, 17, 23, 46, 6, tzinfo=datetime.timezone.utc), 'commenter': 'claireyywang', 'type': 'User'}, {'comment_id': 471834319, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2020, 8, 17, 23, 46, 42, tzinfo=datetime.timezone.utc), 'commenter': 'claireyywang', 'type': 'User'}, {'comment_id': 472433681, 'comment_body': ""what's `let`, typo?"", 'comment_created': datetime.datetime(2020, 8, 18, 19, 35, 34, tzinfo=datetime.timezone.utc), 'commenter': 'claireyywang', 'type': 'User'}, {'comment_id': 472453899, 'comment_body': 'what is ""typo"" ? :D \r\nin this code i put the series\'s points into a list ""seriesArray"", as slots in cpp will not accept the series object itself', 'comment_created': datetime.datetime(2020, 8, 18, 20, 9, 48, tzinfo=datetime.timezone.utc), 'commenter': 'AmrElsersy', 'type': 'User'}, {'comment_id': 472586177, 'comment_body': '```suggestion\r\nimport Qt.labs.platform 1.0\r\n```\r\n\r\nUbuntu Bionic has version 1.0.\r\n\r\nI also had to install an extra dependency: `qml-module-qt-labs-platform`. Can you add it here?\r\n\r\nhttps://github.com/ignitionrobotics/ign-gui/blob/58cedf4c96b4baf46a0c5c79234faf9e3dc4e924/.github/ci/packages.apt#L12-L22\r\n\r\n', 'comment_created': datetime.datetime(2020, 8, 19, 1, 42, 5, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 472587380, 'comment_body': ""I had to change the `let` to `var` for the plugin to load. It looks like Qt only suppors ES6 (which introduces `let`) from version 5.12, but on Ubuntu Bionic we're on Qt 5.9.5."", 'comment_created': datetime.datetime(2020, 8, 19, 1, 46, 40, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 472617471, 'comment_body': 'ok done', 'comment_created': datetime.datetime(2020, 8, 19, 2, 51, 27, tzinfo=datetime.timezone.utc), 'commenter': 'AmrElsersy', 'type': 'User'}, {'comment_id': 473194616, 'comment_body': ""Let's remove this debug statement"", 'comment_created': datetime.datetime(2020, 8, 19, 17, 12, 39, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 473195353, 'comment_body': 'Instead of using `Rectangle` + `Text` + `MouseArea`, consider using `ToolButton`, which has that all ready for you.', 'comment_created': datetime.datetime(2020, 8, 19, 17, 14, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 473196371, 'comment_body': ""We already spoke about this, but I'll just mention here for completeness that we could use the time from the message's header if that's present."", 'comment_created': datetime.datetime(2020, 8, 19, 17, 15, 42, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 473212478, 'comment_body': ""I traced the problem that we're having in seeing the plotted points to the way these functions are specified. Our version of Qt/QML doesn't seem to support this format: `slotName: function(params){}`.\r\n\r\nInstead, this worked for me and I was able to see plotted points:\r\n\r\n```diff\r\ndiff --git a/include/ignition/gui/qml/PlottingInterface.qml b/include/ignition/gui/qml/PlottingInterface.qml\r\nindex 9b88bf7..de776e5 100644\r\n--- a/include/ignition/gui/qml/PlottingInterface.qml\r\n+++ b/include/ignition/gui/qml/PlottingInterface.qml\r\n@@ -230,12 +230,14 @@ Rectangle\r\n       }\r\n   }\r\n \r\n+   function handlePlot(_chart, _fieldID, _x, _y)\r\n+   {\r\n+     charts[_chart].appendPoint(_fieldID, _x, _y);\r\n+   }\r\n+\r\n   Connections {\r\n       target: PlottingIface\r\n-      onPlot : function (_chart, _fieldID, _x, _y)\r\n-      {\r\n-          charts[_chart].appendPoint(_fieldID, _x, _y);\r\n-      }\r\n+      onPlot: handlePlot(_chart, _fieldID, _x, _y)\r\n       onMoveChart :function() {\r\n           Object.keys(charts).forEach(function(key) {\r\n               charts[key].moveChart();\r\n```\r\n\r\nCan you change all connections to use this style? "", 'comment_created': datetime.datetime(2020, 8, 19, 17, 43, 29, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 473494467, 'comment_body': 'ok I used the ToolButton in other buttons that has Rectangle + Text + MouseArea\r\nbut this one specifically i found that i will write a bigger code to style the ToolButton as i want than the Rectangle + Text + MouseArea :D, so i keep it', 'comment_created': datetime.datetime(2020, 8, 20, 1, 3, 18, tzinfo=datetime.timezone.utc), 'commenter': 'AmrElsersy', 'type': 'User'}, {'comment_id': 474264365, 'comment_body': 'I\'m experiencing issue loading `icon` with Qt 5.9\r\n```\r\nfile:///home/claire/gsoc_dome_ws/src/ign-gui/include/ignition/gui/qml/PlottingInterface.qml:259 Cannot assign to non-existent property ""icon""\r\n```\r\nWith a bit of research, I found some people say `icon` doesn\'t work prior to Qt5.10 https://github.com/moonlight-stream/moonlight-qt/issues/53#issuecomment-417181817. I was wondering if this is another modern feature that needs to be adjusted', 'comment_created': datetime.datetime(2020, 8, 20, 20, 49, 42, tzinfo=datetime.timezone.utc), 'commenter': 'claireyywang', 'type': 'User'}, {'comment_id': 474282802, 'comment_body': 'here is a potential solution https://github.com/moonlight-stream/moonlight-qt/commit/0467c2f893cb35b7cab941d7a5d258f1e5731730#diff-81df80a5e56b87fa3890edbb06254763R75 \r\n\r\nThey used the icon image instead to make it compatible with Qt5.9', 'comment_created': datetime.datetime(2020, 8, 20, 21, 28, 25, tzinfo=datetime.timezone.utc), 'commenter': 'claireyywang', 'type': 'User'}, {'comment_id': 474288503, 'comment_body': 'ok great i will change it ', 'comment_created': datetime.datetime(2020, 8, 20, 21, 41, 11, tzinfo=datetime.timezone.utc), 'commenter': 'AmrElsersy', 'type': 'User'}, {'comment_id': 474362124, 'comment_body': 'We can remove this for now', 'comment_created': datetime.datetime(2020, 8, 21, 1, 45, 36, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 475008414, 'comment_body': '```suggestion\r\n// disable test on windows until we fix ""LNK2001 unresolved external symbol"" error\r\n#if not defined(_WIN32)\r\nTEST(PlottingInterfaceTest, Topic)\r\n```', 'comment_created': datetime.datetime(2020, 8, 21, 23, 23, 22, tzinfo=datetime.timezone.utc), 'commenter': 'claireyywang', 'type': 'User'}, {'comment_id': 475008531, 'comment_body': '```suggestion\r\n}\r\n#endif\r\n```', 'comment_created': datetime.datetime(2020, 8, 21, 23, 23, 56, tzinfo=datetime.timezone.utc), 'commenter': 'claireyywang', 'type': 'User'}, {'comment_id': 475157772, 'comment_body': 'Would it be possible to use the same plot names that we have on the main plugin?', 'comment_created': datetime.datetime(2020, 8, 23, 1, 45, 43, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 475157939, 'comment_body': ""Could you use the `Material.primary` color here? This way we're sure it matches the user's custom scheme."", 'comment_created': datetime.datetime(2020, 8, 23, 1, 48, 51, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 475157979, 'comment_body': 'This window is not respecting the dark mode', 'comment_created': datetime.datetime(2020, 8, 23, 1, 49, 35, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 475646863, 'comment_body': ""Let's remove all mentions of PDF because it's not supported yet. They should all be added at the same time once the feature is added."", 'comment_created': datetime.datetime(2020, 8, 24, 14, 18, 55, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 475647681, 'comment_body': 'Could you change the indentation of this and all QML files to be 2 spaces consistently?', 'comment_created': datetime.datetime(2020, 8, 24, 14, 20, 10, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 475648331, 'comment_body': 'Please document all properties', 'comment_created': datetime.datetime(2020, 8, 24, 14, 21, 8, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 475650099, 'comment_body': 'The transparent background on dark mode makes the UI elements look disconnected. How about just using `Material.background` here, which should change appropriately according to the theme?', 'comment_created': datetime.datetime(2020, 8, 24, 14, 23, 41, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 475652389, 'comment_body': 'Also remember to document all functions. And I recommend moving all functions and properties to the top, before any UI items.', 'comment_created': datetime.datetime(2020, 8, 24, 14, 26, 59, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 476744835, 'comment_body': '```suggestion\r\n#include <ignition/utilities/SuppressWarning.hh>\r\n\r\n#include <memory>\r\n```', 'comment_created': datetime.datetime(2020, 8, 25, 21, 20, 20, tzinfo=datetime.timezone.utc), 'commenter': 'claireyywang', 'type': 'User'}, {'comment_id': 476745523, 'comment_body': '```suggestion\r\n  IGN_UTILS_WARN_IGNORE__DLL_INTERFACE_MISSING\r\n  private: std::unique_ptr<PlottingInterface> dataPtr;\r\n  IGN_UTILS_WARN_RESUME__DLL_INTERFACE_MISSING\r\n```', 'comment_created': datetime.datetime(2020, 8, 25, 21, 21, 5, tzinfo=datetime.timezone.utc), 'commenter': 'claireyywang', 'type': 'User'}]","[{'commit_sha': 'a6c935b37f0f21aaa84ad285568805e4956f0f91', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bcfb672c35021f8b35a72729628fcb26d4e742d9', 'committer_username': 'chapulina', 'committer_name': 'Louise Poubel', 'committer_email': None, 'commit_date': datetime.datetime(2013, 10, 22, 22, 20, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f3b1b82fad07107197a519fb49d8606d9320608', 'committer_username': 'chapulina', 'committer_name': 'Louise Poubel', 'committer_email': None, 'commit_date': datetime.datetime(2013, 10, 22, 22, 20, 7, tzinfo=datetime.timezone.utc)}]",,35613645,,User,,53,,9,85
425714882,Transport Topics Plugin,"Topic Viewer Plugin

- Topics Viewer Plugin which lists all ign-transport topics that is currently published.
- Models each topic structure and shows its fields and nested fields
- Plot-able fields are drag-able to be used by the plotting tool

![Screenshot from 2020-08-25 04-56-59](https://user-images.githubusercontent.com/35613645/91365232-e7833080-e800-11ea-9ea5-d8411022f2da.png)
![Screenshot from 2020-08-25 05-01-07](https://user-images.githubusercontent.com/35613645/91365236-e94cf400-e800-11ea-9814-8d0179bc85f7.png)

",True,69,https://api.github.com/repos/gazebosim/gz-gui/pulls/69,https://github.com/gazebosim/gz-gui/pull/69,closed,1026,0,10,1,3,102,2,1,"[{'name': 'enhancement'}, {'name': 'ðŸ”® dome'}]",2020-06-01 02:18:24+00:00,2020-08-04 21:00:18+00:00,5596914.0,"64 days, 18:41:54","[{'comment_id': 433511820, 'comment_body': 'Style nitpick: could you keep these in alphabetical order?', 'comment_created': datetime.datetime(2020, 6, 1, 21, 56, 20, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 433513400, 'comment_body': 'Style nitpicks:\r\n\r\n* Name it `dataPtr`, all variables should use `camelCase`\r\n* Move its declaration to the bottom, after all functions and public members', 'comment_created': datetime.datetime(2020, 6, 1, 22, 0, 13, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 433513579, 'comment_body': 'Style nitpick: use 2-space indentation', 'comment_created': datetime.datetime(2020, 6, 1, 22, 0, 43, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 433522201, 'comment_body': 'Please document the setter and getter, and document what `true` or `false` mean.', 'comment_created': datetime.datetime(2020, 6, 1, 22, 25, 26, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 433522300, 'comment_body': 'Please document all `param[in]`s', 'comment_created': datetime.datetime(2020, 6, 1, 22, 25, 44, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 433524155, 'comment_body': '```suggestion\r\nTransportTopics::TransportTopics() : data_ptr(new TransportTopicsPrivate)\r\n```\r\n\r\nStyle: remove these spaces from all functions ', 'comment_created': datetime.datetime(2020, 6, 1, 22, 31, 26, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 433530109, 'comment_body': ""`QtCharts 2.3` is not available on Ubuntu Bionic, would it be ok to use version 2.2?\r\n\r\nI also think that this specific QML file is not using QtCharts, so maybe this line can be removed?\r\n\r\n---\r\n\r\nIn any case, when you do need to add this dependency, we need to make sure it's installed when running CI. So you'll need to add this line:\r\n\r\n```.diff\r\ndiff --git a/.github/workflows/ci-bionic.yml b/.github/workflows/ci-bionic.yml\r\nindex 448a2bd..5f51024 100644\r\n--- a/.github/workflows/ci-bionic.yml\r\n+++ b/.github/workflows/ci-bionic.yml\r\n@@ -20,6 +20,7 @@ jobs:\r\n             libprotobuf-dev\r\n             qtdeclarative5-dev\r\n             qtquickcontrols2-5-dev\r\n+            qml-module-qtcharts\r\n             qml-module-qtquick2\r\n             qml-module-qtquick-controls\r\n             qml-module-qtquick-controls2\r\n```"", 'comment_created': datetime.datetime(2020, 6, 1, 22, 50, 28, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 433544307, 'comment_body': ""Don't forget the copyright header for this file"", 'comment_created': datetime.datetime(2020, 6, 1, 23, 40, 1, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 433545992, 'comment_body': 'I noticed that the colors in this plugin are not following the application theme. If I go to the style settings and set the theme to ""dark"", this plugin is not changing its colors.\r\n\r\nI suggest you take a look at [what\'s being done](\r\nhttps://github.com/ignitionrobotics/ign-gazebo/blob/44951e3ddfd238f24182d4d80b1376f0d426bd43/src/gui/plugins/entity_tree/EntityTree.qml#L43-L55) for the `EntityTree` plugin. For the alternating colors:\r\n\r\n```\r\n  /**\r\n   * Color for even-numbered rows, according to current theme\r\n   */\r\n  property color even: (Material.theme == Material.Light) ?\r\n    Material.color(Material.Grey, Material.Shade100) :\r\n    Material.color(Material.Grey, Material.Shade800)\r\n\r\n  /**\r\n   * Color for odd-numbered rows, according to current theme\r\n   */\r\n  property color odd: (Material.theme == Material.Light) ?\r\n    Material.color(Material.Grey, Material.Shade200) :\r\n    Material.color(Material.Grey, Material.Shade900)\r\n```\r\n\r\nAnd for the highlight color we use `Material.accent`.', 'comment_created': datetime.datetime(2020, 6, 1, 23, 46, 15, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 433546594, 'comment_body': 'Clicking around some topics, I often get lots of these error messages:\r\n\r\n`[GUI] [Wrn] [Application.cc:649] [QT] file::/TransportTopics/TransportTopics.qml:24: TypeError: Cannot read property \'name\' of null`\r\n\r\nIf it\'s expected that `model` will be null sometimes, how about catching that case to prevent the warning? For example:\r\n\r\n`text: model === null ? """" : model.name`', 'comment_created': datetime.datetime(2020, 6, 1, 23, 48, 30, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 433547521, 'comment_body': ""Does each item need to be so tall? There's a lot of empty space right now:\r\n\r\n![topics_height](https://user-images.githubusercontent.com/5751272/83465246-2d11a680-a428-11ea-9761-0dd63f915671.png)\r\n"", 'comment_created': datetime.datetime(2020, 6, 1, 23, 51, 49, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 433548192, 'comment_body': 'Could you expand this into multiple lines, one for each property? That makes it easier to manage changes in the future.\r\n\r\nAlso, how about removing the header that says ""Topics""? Ignition GUI already adds a header to every plugin, so that feels repetitive.\r\n\r\n[Here](https://github.com/ignitionrobotics/ign-gazebo/blob/44951e3ddfd238f24182d4d80b1376f0d426bd43/src/gui/plugins/entity_tree/EntityTree.qml#L110-L112)\'s how we remove the header for `EntityTree` as an example.\r\n\r\n', 'comment_created': datetime.datetime(2020, 6, 1, 23, 54, 6, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 433548987, 'comment_body': 'How about overriding the [LoadConfig](https://ignitionrobotics.org/api/gui/3.1/classignition_1_1gui_1_1Plugin.html#a72064530af4cd247b994b905559fd4ee) function, so that you can give the plugin a default title like [here](https://github.com/ignitionrobotics/ign-gazebo/blob/44951e3ddfd238f24182d4d80b1376f0d426bd43/src/gui/plugins/entity_tree/EntityTree.cc#L255-L258)?', 'comment_created': datetime.datetime(2020, 6, 1, 23, 56, 54, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 433549378, 'comment_body': 'Remember to remove these leftover comments', 'comment_created': datetime.datetime(2020, 6, 1, 23, 58, 25, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 433550817, 'comment_body': ""I'm wondering if we really want this plugin to subscribe to topics. In the end, the plugin that will need the data will be the plotting plugin.\r\n\r\nSo maybe all this plugin should do is displaying all the topics / fields available, and making them draggable to any other plugins. Then the other plugin can decide what to do with it. If it needs the data, it will subscribe to it. Makes sense? This is how the old [TopicViewer](https://github.com/ignitionrobotics/ign-gui/blob/ign-gui0/include/ignition/gui/plugins/TopicViewer.hh) worked.\r\n\r\nThat plugin also displayed [this icon](https://github.com/ignitionrobotics/ign-gui/blob/ign-gui0/include/ignition/gui/images/graph_line.svg) next to each plottable field. Feel free to copy it here if you want :wink: "", 'comment_created': datetime.datetime(2020, 6, 2, 0, 3, 38, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 434806044, 'comment_body': '```suggestion\r\n\r\n//////////////////////////////////////////////////\r\n```\r\nstyle nitpick: add line segregation between each function ', 'comment_created': datetime.datetime(2020, 6, 3, 19, 35, 29, tzinfo=datetime.timezone.utc), 'commenter': 'claireyywang', 'type': 'User'}, {'comment_id': 434807821, 'comment_body': '```suggestion\r\n  try\r\n  {\r\n```\r\nstyle guide #3: braces need to be on their own lines', 'comment_created': datetime.datetime(2020, 6, 3, 19, 37, 53, tzinfo=datetime.timezone.utc), 'commenter': 'claireyywang', 'type': 'User'}, {'comment_id': 434812614, 'comment_body': '```suggestion\r\n      return true;\r\n```\r\nnitpick', 'comment_created': datetime.datetime(2020, 6, 3, 19, 44, 52, tzinfo=datetime.timezone.utc), 'commenter': 'claireyywang', 'type': 'User'}, {'comment_id': 434813365, 'comment_body': 'nitpick: misalignment? same with some other function params', 'comment_created': datetime.datetime(2020, 6, 3, 19, 46, 18, tzinfo=datetime.timezone.utc), 'commenter': 'claireyywang', 'type': 'User'}, {'comment_id': 436025122, 'comment_body': 'Thanks for changing the case. Now we just need to move it to the bottom. The order should be:\r\n\r\n* functions before variables\r\n* public before protected before privat\r\n\r\nUsually `dataPtr` is the very last one', 'comment_created': datetime.datetime(2020, 6, 5, 16, 16, 27, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 436026037, 'comment_body': ""How about moving these defines to the cc file since they're not used in the header?"", 'comment_created': datetime.datetime(2020, 6, 5, 16, 18, 13, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 436026632, 'comment_body': 'You can remove the blank lines above the 2 `class` lines', 'comment_created': datetime.datetime(2020, 6, 5, 16, 19, 27, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 436026795, 'comment_body': '```suggestion\r\n    /// \\brief Destructor\r\n    public: ~TopicViewer();\r\n```', 'comment_created': datetime.datetime(2020, 6, 5, 16, 19, 48, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 436027634, 'comment_body': 'Could you make these parameters `const std::string &`? This prevents unnecessary copies. We should always use `const &` with parameters that aren\'t ""plain old data"".\r\n\r\nThe same applies to all functions', 'comment_created': datetime.datetime(2020, 6, 5, 16, 21, 8, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 436028203, 'comment_body': '```suggestion\r\n    private: void AddField(QStandardItem *_parentItem,\r\n```\r\n\r\nStyle nitpick :wink: ', 'comment_created': datetime.datetime(2020, 6, 5, 16, 22, 5, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 436029095, 'comment_body': 'Style nitpick: avoid prefixing functions with `Get`. This is valid for other functions too.\r\n\r\n```suggestion\r\n    private: std::string TopicName(QStandardItem *_item);\r\n```', 'comment_created': datetime.datetime(2020, 6, 5, 16, 23, 48, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 436029526, 'comment_body': ""It's good to give it a default value at declaration. Also, the documentation could explain more explicitly what true and false mean."", 'comment_created': datetime.datetime(2020, 6, 5, 16, 24, 40, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 436030521, 'comment_body': '```suggestion\r\n  for (unsigned int i = 0; i < topics.size(); ++i)\r\n```\r\n\r\nSmall performance tip: always default to `++i` to prevent one extra increment ', 'comment_created': datetime.datetime(2020, 6, 5, 16, 26, 31, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 436030751, 'comment_body': '```suggestion\r\n//////////////////////////////////////////////////\r\nbool TopicViewer::PlottingMode()\r\n```', 'comment_created': datetime.datetime(2020, 6, 5, 16, 26, 56, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 436031274, 'comment_body': 'How about printing a warning / error if something is caught?\r\n\r\nAlso, it would be nice to catch the specific exception', 'comment_created': datetime.datetime(2020, 6, 5, 16, 28, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 436032209, 'comment_body': '```suggestion\r\nQStandardItem *TopicViewer::FactoryItem(std::string _name,\r\n```', 'comment_created': datetime.datetime(2020, 6, 5, 16, 29, 55, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 436033456, 'comment_body': 'I think some of these includes are not being used', 'comment_created': datetime.datetime(2020, 6, 5, 16, 32, 19, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 436034400, 'comment_body': ""The code checker won't check the QML files yet, but let's try to keep the lines under 80 chars for easier visualization"", 'comment_created': datetime.datetime(2020, 6, 5, 16, 34, 14, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 436042357, 'comment_body': 'Is `QtLocation` needed?', 'comment_created': datetime.datetime(2020, 6, 5, 16, 49, 58, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 436044909, 'comment_body': ""This version is also not available on Ubuntu Bionic. The highest we can go is `2.2`. I tested it here and I think we're not losing any features.\r\n\r\nAs a reference, see the [QtQuick Versions](https://doc.qt.io/qt-5/qtquickcontrols-index.html#versions) page. Bionic has Qt 5.9, so all the controls are <= 2.2."", 'comment_created': datetime.datetime(2020, 6, 5, 16, 55, 3, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 436045673, 'comment_body': ""I'm getting a lot of \r\n\r\n`[GUI] [Wrn] [Application.cc:649] [QT] file::/TopicViewer/TopicViewer.qml:76: TypeError: Cannot read property 'plottable' of null`\r\n\r\nHow about\r\n\r\n```suggestion\r\n            visible: model === null ? false : model.plottable\r\n```"", 'comment_created': datetime.datetime(2020, 6, 5, 16, 56, 29, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 436059649, 'comment_body': 'It would be nice to enable these tooltips', 'comment_created': datetime.datetime(2020, 6, 5, 17, 25, 10, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 436059799, 'comment_body': '```suggestion\r\n        id: item\r\n```', 'comment_created': datetime.datetime(2020, 6, 5, 17, 25, 29, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 438951516, 'comment_body': 'The dragging is working for me, but it always drags the text `TopicViewer`. I think it should drag information about the field being dragged so that the widget where it is dropped knows what topic to subscribe to and which field to plot.\r\n\r\nGazebo-classic uses a URI scheme like this: `topic?p=/fieldA/fieldB`\r\n\r\n![ploturi](https://user-images.githubusercontent.com/5751272/84420135-71dad180-abce-11ea-84dc-96d42956a995.png)\r\n', 'comment_created': datetime.datetime(2020, 6, 11, 17, 29, 42, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 439010287, 'comment_body': ""Not sure if this has been brought up before, but it'd be nice to add some unit tests for this plugin as sanity checks. Examples see `_TEST.cc` files in other plugin folders. "", 'comment_created': datetime.datetime(2020, 6, 11, 19, 10, 27, tzinfo=datetime.timezone.utc), 'commenter': 'claireyywang', 'type': 'User'}, {'comment_id': 439100334, 'comment_body': 'found a warning when testing with `ign gazebo -v 4 linear_battery_demo.sdf`\r\n```\r\n[GUI] [Wrn] [Application.cc:649] [QT] file::/TopicViewer/TopicViewer.qml:57: TypeError: Cannot read property of null\r\n```', 'comment_created': datetime.datetime(2020, 6, 11, 22, 13, 1, tzinfo=datetime.timezone.utc), 'commenter': 'claireyywang', 'type': 'User'}, {'comment_id': 441665129, 'comment_body': '```suggestion\r\nTopicViewer::TopicViewer() : Plugin(), dataPtr(new TopicViewerPrivate)\r\n```', 'comment_created': datetime.datetime(2020, 6, 17, 16, 14, 28, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 441665863, 'comment_body': 'Did you get a chance to triage these, @AmrElsersy ?', 'comment_created': datetime.datetime(2020, 6, 17, 16, 15, 39, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 441667199, 'comment_body': ""It's preferable to never use these catch-all headers because they bring a lot of things that we won't use. Instead, we should just include the headers we need.\r\n\r\nFor example: `#include <ignition/msgs/Factory.hh>`\r\n\r\nSo let's remove all of these:\r\n\r\n```\r\n#include <ignition/msgs.hh>\r\n#include <ignition/transport.hh>\r\n#include <ignition/common.hh>\r\n#include <ignition/gui.hh>\r\n```"", 'comment_created': datetime.datetime(2020, 6, 17, 16, 17, 57, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 441668018, 'comment_body': 'Can we move all these private functions and variables to `TopicViewerPrivate`?', 'comment_created': datetime.datetime(2020, 6, 17, 16, 19, 14, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 441669216, 'comment_body': '```suggestion\r\n    /// \\param[in] _path a set of concatenate strings of parent msgs\r\n```\r\n\r\nIt would be helpful to add an example here on the documentation', 'comment_created': datetime.datetime(2020, 6, 17, 16, 21, 20, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 441669921, 'comment_body': 'Can this function be `const`? The same for several ones below.', 'comment_created': datetime.datetime(2020, 6, 17, 16, 22, 30, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 441670282, 'comment_body': 'Can this comment be removed?', 'comment_created': datetime.datetime(2020, 6, 17, 16, 23, 4, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 441671303, 'comment_body': 'How about using the same pattern as Gazebo-classic? `topic?p=/fieldA/fieldB`\r\n\r\nThat works like a URI, so it should be easier to break apart using the `ignition::common::URI` class.', 'comment_created': datetime.datetime(2020, 6, 17, 16, 24, 46, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 441673395, 'comment_body': ""Also, I get messages like this when expanding items:\r\n\r\n`[GUI] [Wrn] [Application.cc:649] [QT] file::/TopicViewer/TopicViewer.qml:83: TypeError: Cannot read property 'topic' of null`\r\n\r\nIt would be good to check if `model` is `null`."", 'comment_created': datetime.datetime(2020, 6, 17, 16, 28, 8, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 441674648, 'comment_body': ""Can we remove all these debug messages? It's a bit spammy right now."", 'comment_created': datetime.datetime(2020, 6, 17, 16, 30, 11, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 441675454, 'comment_body': 'Is the concept of a ""plotting mode"" still necessary?', 'comment_created': datetime.datetime(2020, 6, 17, 16, 31, 30, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 441676690, 'comment_body': ""Is this really necessary? It's possible to publish messages that are not `ignition.msgs`, so it may be helpful for the user to see the full type name."", 'comment_created': datetime.datetime(2020, 6, 17, 16, 33, 40, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 441677379, 'comment_body': ""Do we want to print a warning if we can't create a message?"", 'comment_created': datetime.datetime(2020, 6, 17, 16, 34, 50, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 441677596, 'comment_body': 'This here probably should print and error', 'comment_created': datetime.datetime(2020, 6, 17, 16, 35, 10, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 441677726, 'comment_body': '```suggestion\r\n  for (int i = 0 ; i < msgDescriptor->field_count(); ++i)\r\n```', 'comment_created': datetime.datetime(2020, 6, 17, 16, 35, 22, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 441679001, 'comment_body': '```suggestion\r\n  std::deque<std::string> path;\r\n```\r\n\r\n:wink: ', 'comment_created': datetime.datetime(2020, 6, 17, 16, 37, 30, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 441680521, 'comment_body': 'Just a suggestion, you could substitute the `for` loop with:\r\n\r\n```\r\nreturn std::find(this->plotableTypes.begin(), this->plotableTypes.end(), _type)\r\n    != this->plotableTypes.end());\r\n```', 'comment_created': datetime.datetime(2020, 6, 17, 16, 39, 58, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 441681019, 'comment_body': 'Is this function ever used?', 'comment_created': datetime.datetime(2020, 6, 17, 16, 40, 44, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 442160959, 'comment_body': 'but almost all the functions is private :D \r\nthe interaction with the plugin is through the dragging so most of functions is private', 'comment_created': datetime.datetime(2020, 6, 18, 11, 35, 52, tzinfo=datetime.timezone.utc), 'commenter': 'AmrElsersy', 'type': 'User'}, {'comment_id': 442180840, 'comment_body': 'not any more \r\n', 'comment_created': datetime.datetime(2020, 6, 18, 12, 15, 41, tzinfo=datetime.timezone.utc), 'commenter': 'AmrElsersy', 'type': 'User'}, {'comment_id': 442182852, 'comment_body': 'there is already a lot of msgs types that will be like that like [Map] for example or any msg that is not ign-msg', 'comment_created': datetime.datetime(2020, 6, 18, 12, 19, 3, tzinfo=datetime.timezone.utc), 'commenter': 'AmrElsersy', 'type': 'User'}, {'comment_id': 442184676, 'comment_body': 'not any more, i will remove it', 'comment_created': datetime.datetime(2020, 6, 18, 12, 22, 18, tzinfo=datetime.timezone.utc), 'commenter': 'AmrElsersy', 'type': 'User'}, {'comment_id': 442354785, 'comment_body': ""I saw you made the input params const, which is great! But for the functions that are just getters, I think we could also make the function itself const, because they don't modify the object. For example:\r\n\r\n`private: std::string TopicName(const QStandardItem *_item) const;`"", 'comment_created': datetime.datetime(2020, 6, 18, 16, 30, 59, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 442807013, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 19, 12, 19, 23, tzinfo=datetime.timezone.utc), 'commenter': 'AmrElsersy', 'type': 'User'}, {'comment_id': 444508808, 'comment_body': 'Did you mean to edit the `Publisher` files?', 'comment_created': datetime.datetime(2020, 6, 23, 21, 6, 44, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 444509098, 'comment_body': 'Remember to add the copyright header to the test files too :wink: ', 'comment_created': datetime.datetime(2020, 6, 23, 21, 7, 21, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 444512465, 'comment_body': 'It\'s best practice to use `snake_case` for topic names, so I suggest:\r\n\r\n```suggestion\r\n    auto pubInt = node.Advertise<msgs::Int32>(""/int_topic"");\r\n```', 'comment_created': datetime.datetime(2020, 6, 23, 21, 14, 12, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 444514009, 'comment_body': ""How about adding something like this, so we're sure no other topics are listed?\r\n\r\n```\r\nelse\r\n{\r\n  EXPECT_TRUE(false);\r\n}\r\n```"", 'comment_created': datetime.datetime(2020, 6, 23, 21, 17, 22, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 444514262, 'comment_body': 'You could add an expectation for the size of `rowCount` before this loop', 'comment_created': datetime.datetime(2020, 6, 23, 21, 17, 55, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 444514446, 'comment_body': 'You can use `EXPECT_TRUE` here:\r\n\r\n```suggestion\r\n    EXPECT_TRUE(foundCollision);\r\n```', 'comment_created': datetime.datetime(2020, 6, 23, 21, 18, 21, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 444514778, 'comment_body': 'Is this sleep needed here?', 'comment_created': datetime.datetime(2020, 6, 23, 21, 19, 9, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 444673888, 'comment_body': 'no no i was trying to run it to see something and i commented it again :D\r\ni will modify that', 'comment_created': datetime.datetime(2020, 6, 24, 6, 33, 18, tzinfo=datetime.timezone.utc), 'commenter': 'AmrElsersy', 'type': 'User'}, {'comment_id': 444676328, 'comment_body': 'but the plugin lists the topics that is currently in the transport \r\nso this will make the test case fails if we publishing anything to the transport when performing the testing\r\nfor example, if you run the test while you are opening ign-gazebo this will make it fails', 'comment_created': datetime.datetime(2020, 6, 24, 6, 39, 55, tzinfo=datetime.timezone.utc), 'commenter': 'AmrElsersy', 'type': 'User'}, {'comment_id': 445006846, 'comment_body': 'Ahh yes, that makes sense. One way to work around this is to set a different partition in the beginning of the test, so that all nodes starting during the test can only see other nodes also in the test. Could you give this a try for example?\r\n\r\n`setenv(""IGN_PARTITION"", ""ign-gazebo-test"", 1);`\r\n\r\n', 'comment_created': datetime.datetime(2020, 6, 24, 16, 6, 19, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 445073766, 'comment_body': '```suggestion\r\n\r\n#include <ignition/plugin/Register.hh>\r\n\r\n#include ""TopicViewer.hh""\r\n```', 'comment_created': datetime.datetime(2020, 6, 24, 17, 59, 55, tzinfo=datetime.timezone.utc), 'commenter': 'claireyywang', 'type': 'User'}, {'comment_id': 445074265, 'comment_body': '```suggestion\r\n\r\nusing namespace ignition;\r\n```', 'comment_created': datetime.datetime(2020, 6, 24, 18, 0, 49, tzinfo=datetime.timezone.utc), 'commenter': 'claireyywang', 'type': 'User'}, {'comment_id': 445075060, 'comment_body': '```suggestion\r\n\r\n//////////////////////////////////////////////////\r\n```', 'comment_created': datetime.datetime(2020, 6, 24, 18, 2, 21, tzinfo=datetime.timezone.utc), 'commenter': 'claireyywang', 'type': 'User'}, {'comment_id': 445080212, 'comment_body': ""> there is already a lot of msgs types that will be like that like [Map] for example or any msg that is not ign-msg\r\n\r\nAre you suggesting not to print warning msg cuz then there would be too many? Otherwise it'd be a good idea to use `ignwarn` to output a warning message(see [example](https://github.com/ignitionrobotics/ign-gazebo/blob/44951e3ddfd238f24182d4d80b1376f0d426bd43/src/gui/plugins/align_tool/AlignTool.cc#L157)), which only shows up at verbose level 2 => `ign gazebo -v 2`"", 'comment_created': datetime.datetime(2020, 6, 24, 18, 11, 44, tzinfo=datetime.timezone.utc), 'commenter': 'claireyywang', 'type': 'User'}, {'comment_id': 445080973, 'comment_body': '```suggestion\r\n    ignerr << ""Null Descriptor of Msg: "" << _msgType << std::endl;\r\n    return;\r\n```', 'comment_created': datetime.datetime(2020, 6, 24, 18, 13, 6, tzinfo=datetime.timezone.utc), 'commenter': 'claireyywang', 'type': 'User'}, {'comment_id': 445084520, 'comment_body': '```suggestion\r\n    const google::protobuf::FieldDescriptor::Type &_type)\r\n```', 'comment_created': datetime.datetime(2020, 6, 24, 18, 19, 24, tzinfo=datetime.timezone.utc), 'commenter': 'claireyywang', 'type': 'User'}, {'comment_id': 445086183, 'comment_body': '```suggestion\r\n\r\n#include ""test_config.h""  // NOLINT(build/include)\r\n```\r\nwhat does the comment mean? Do we need it here?', 'comment_created': datetime.datetime(2020, 6, 24, 18, 22, 27, tzinfo=datetime.timezone.utc), 'commenter': 'claireyywang', 'type': 'User'}, {'comment_id': 447302016, 'comment_body': '```suggestion\r\n  return reinterpret_cast<QStandardItemModel *>(this->dataPtr->model);\r\n```\r\nuse two space indentation', 'comment_created': datetime.datetime(2020, 6, 29, 22, 46, 22, tzinfo=datetime.timezone.utc), 'commenter': 'claireyywang', 'type': 'User'}, {'comment_id': 447302605, 'comment_body': '```suggestion\r\n      continue;\r\n```\r\nuse two space indentation', 'comment_created': datetime.datetime(2020, 6, 29, 22, 48, 7, tzinfo=datetime.timezone.utc), 'commenter': 'claireyywang', 'type': 'User'}, {'comment_id': 447302778, 'comment_body': '```suggestion\r\n        msgFieldItem->setData(QVariant(true), PLOT_ROLE);\r\n```\r\nsame as above', 'comment_created': datetime.datetime(2020, 6, 29, 22, 48, 40, tzinfo=datetime.timezone.utc), 'commenter': 'claireyywang', 'type': 'User'}, {'comment_id': 447303063, 'comment_body': '```suggestion\r\n  return std::find(this->plotableTypes.begin(), this->plotableTypes.end(),\r\n```', 'comment_created': datetime.datetime(2020, 6, 29, 22, 49, 35, tzinfo=datetime.timezone.utc), 'commenter': 'claireyywang', 'type': 'User'}, {'comment_id': 447305193, 'comment_body': 'public before private? \r\n\r\nalso would be nice to add `/// \\brief` here ', 'comment_created': datetime.datetime(2020, 6, 29, 22, 55, 40, tzinfo=datetime.timezone.utc), 'commenter': 'claireyywang', 'type': 'User'}, {'comment_id': 447368747, 'comment_body': ""This documentation doesn't seem to match the class. Did you mean to document this on the `TopicModel` class?"", 'comment_created': datetime.datetime(2020, 6, 30, 2, 21, 8, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 447369063, 'comment_body': 'I think you can remove this header from here, and include `<ignition/common/Console.hh>` in the `.cc` file instead.\r\n', 'comment_created': datetime.datetime(2020, 6, 30, 2, 22, 19, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 447369327, 'comment_body': 'Could you alphabetize each group of includes? Like this:\r\n\r\n```\r\n#include <deque>\r\n#include <memory>\r\n#include <string>\r\n#include <vector>\r\n#include <QModelIndex>\r\n#include <QStandardItem>\r\n#include <QString>\r\n  \r\n#include <ignition/gui/Application.hh>\r\n#include <ignition/gui/Plugin.hh>\r\n\r\n#include <ignition/transport/MessageInfo.hh>\r\n#include <ignition/transport/Node.hh>\r\n#include <ignition/transport/Publisher.hh>\r\n```', 'comment_created': datetime.datetime(2020, 6, 30, 2, 23, 24, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 447369607, 'comment_body': 'Yup, we can move all of them!\r\n\r\nSo the `TopicViewer` class would only have all the public functions, and the private `dataPtr`. Then the `TopicViewerPrivate` has all the private functions and variables (as its public members).\r\n\r\nLet me know if you need help with this :wink: ', 'comment_created': datetime.datetime(2020, 6, 30, 2, 24, 26, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 447370383, 'comment_body': '```suggestion\r\n/////////////////////////////////////////////////\r\nTEST(TopicViewerTest, Model)\r\n```', 'comment_created': datetime.datetime(2020, 6, 30, 2, 27, 22, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 447371013, 'comment_body': ""I get this warning the first time I expand an item:\r\n\r\n`[GUI] [Wrn] [Application.cc:649] [QT] file::/TopicViewer/TopicViewer.qml:194: TypeError: Cannot read property 'y' of null`\r\n\r\nHow about checking that the `currentItem` is not null?"", 'comment_created': datetime.datetime(2020, 6, 30, 2, 29, 47, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 447371938, 'comment_body': ""Thanks for adding an animation! I think that animating the `y` position can be a bit confusing to the user though. It looks like the item is being dropped from the sky :smile: \r\n\r\n![collapse_topic](https://user-images.githubusercontent.com/5751272/86076502-0783b700-ba3f-11ea-9e26-ebf5c6e0c234.gif)\r\n\r\nHow about animating `height` instead? This way, the item starts small and grows until its full height.\r\n\r\nAlso, let's add the opposite animation for when the item is collapsed. So the the item expands and contracts as it comes and goes. How does that sound?"", 'comment_created': datetime.datetime(2020, 6, 30, 2, 33, 13, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 447379706, 'comment_body': ""`CreateModel` is only called in the constructor. This means this plugin won't know about new topics as they show up. I already mentioned this on another comment, but I think we should update the model periodically like this:\r\n\r\nhttps://github.com/ignitionrobotics/ign-gui/blob/560389770529d50a1b7c925c211ba0967fccd12b/src/plugins/TopicViewer.cc#L371-L374"", 'comment_created': datetime.datetime(2020, 6, 30, 3, 2, 17, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 447381233, 'comment_body': 'Style:\r\n\r\n```suggestion\r\n      this->AddField(msgItem, msgField->name(), messageType->name());\r\n```', 'comment_created': datetime.datetime(2020, 6, 30, 3, 7, 53, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 459708424, 'comment_body': '```suggestion\r\n    auto pubEcho = node.Advertise<msgs::Collision> (""/echo_topic"");\r\n```\r\n\r\nThis is currently failing to publish because of the type mismatch:\r\n\r\n```\r\nNode::Publisher::Publish() Type mismatch.\r\n        * Type advertised: ignition.msgs.StringMsg\r\n        * Type published: ignition.msgs.Collision\r\n```', 'comment_created': datetime.datetime(2020, 7, 23, 20, 27, 19, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 459708767, 'comment_body': 'The animation is quite slow right now :sweat_smile: How about making it much quicker:\r\n\r\n```suggestion\r\n            delay: 100\r\n```', 'comment_created': datetime.datetime(2020, 7, 23, 20, 27, 59, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 459708845, 'comment_body': '```suggestion\r\n            duration: 100;\r\n```', 'comment_created': datetime.datetime(2020, 7, 23, 20, 28, 9, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 459708894, 'comment_body': '```suggestion\r\n            duration: 100;\r\n```', 'comment_created': datetime.datetime(2020, 7, 23, 20, 28, 16, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 459710151, 'comment_body': '```suggestion\r\n            sourceSize.width: itemHeight * 0.4\r\n```\r\n\r\nThe icons on this plugin are bigger than the ones on the Entity Tree now. How about giving them the same size, multiplying by 0.4 instead? It will look like this:\r\n\r\n![iconsize_plot](https://user-images.githubusercontent.com/5751272/88335759-acb14880-cce8-11ea-8f8c-9da0e70b68c5.png)\r\n', 'comment_created': datetime.datetime(2020, 7, 23, 20, 30, 40, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 459717594, 'comment_body': ""The text is leaking when it's larger than the space available on the plugin. If you do this:\r\n\r\n```.diff\r\ndiff --git a/src/plugins/topic_viewer/TopicViewer.qml b/src/plugins/topic_viewer/TopicViewer.qml\r\nindex 93aa675..7aba69e 100644\r\n--- a/src/plugins/topic_viewer/TopicViewer.qml\r\n+++ b/src/plugins/topic_viewer/TopicViewer.qml\r\n@@ -164,12 +164,14 @@ TreeView {\r\n             font.pointSize: 12\r\n             anchors.leftMargin: 5\r\n             anchors.left: icon.right\r\n+            anchors.right: parent.right\r\n             y: icon.y\r\n+            elide: Text.ElideMiddle\r\n         }\r\n \r\n         ToolTip {\r\n             id: tool_tip\r\n```\r\n\r\nThen the text will elide in the middle (with ...) when there isn't enough space:\r\n\r\n![elide_topic](https://user-images.githubusercontent.com/5751272/88336917-ad4ade80-ccea-11ea-84ef-fdcbd1cc8bdb.gif)\r\n"", 'comment_created': datetime.datetime(2020, 7, 23, 20, 45, 5, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}]","[{'commit_sha': '673c6112db33ea7917c97f356c37d4361d57dce6', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}]",,35613645,,User,,53,,9,85
463086654,Plotting Components Plugin,"A plugin for handling **Components Plotting** that uses PlottingInterface
this includes

- Making the ComponentInspector plugin items are dragable to be dragged into the plotting interface

- Making a gazebo-plugin to handle charts subscription to that components and updates the plotting interface

![Screenshot from 2020-08-03 18-45-46](https://user-images.githubusercontent.com/35613645/89206954-423abb00-d5ba-11ea-8981-588eac92160e.png)

This class diagram shows the design and the integration between it and plotting interface

![Plotting_ClassDiagram](https://user-images.githubusercontent.com/35613645/89206962-45ce4200-d5ba-11ea-80cc-09fa02b62bf1.png)",True,270,https://api.github.com/repos/gazebosim/gz-sim/pulls/270,https://github.com/gazebosim/gz-sim/pull/270,closed,939,50,11,19,0,22,4,1,"[{'name': 'enhancement'}, {'name': 'GUI'}, {'name': 'ðŸ”® dome'}, {'name': 'beta'}]",2020-08-05 01:08:21+00:00,2020-09-23 01:09:08+00:00,4233647.0,"49 days, 0:00:47","[{'comment_id': 481562524, 'comment_body': 'Missing `\\brief`', 'comment_created': datetime.datetime(2020, 9, 2, 2, 23, 42, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 481564441, 'comment_body': ""The `typeId` is convenient to uniquely identify each component type, but it isn't very user friendly on the UI. For example, it's hard for a user to understand that the pose x, y and z are being plotted here:\r\n\r\n![model_plot](https://user-images.githubusercontent.com/5751272/91924965-e763b480-ec88-11ea-854a-e1138c204ac9.png)\r\n\r\nWould it be possible to use `typeName` when displaying component information? The internal bookkeeping can remain using `typeId`."", 'comment_created': datetime.datetime(2020, 9, 2, 2, 26, 36, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 481564660, 'comment_body': 'Be careful with indentation :wink: ', 'comment_created': datetime.datetime(2020, 9, 2, 2, 26, 52, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 481565363, 'comment_body': 'Can we keep the indentation? It helps communicate that the contents are iniside the header.', 'comment_created': datetime.datetime(2020, 9, 2, 2, 28, 1, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 481567244, 'comment_body': ""I think you can use `Entity` instead of `uint64_t`. This way, if we ever change `Entity`, this will be updated at the same time. You don't need to change the signals and slots."", 'comment_created': datetime.datetime(2020, 9, 2, 2, 30, 57, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 481569064, 'comment_body': 'You should check if `this->dataPtr->data.find(_attribute) != this->dataPtr->data.end()` before calling `AddChart`.\r\n\r\nThis also applies to other places.', 'comment_created': datetime.datetime(2020, 9, 2, 2, 33, 45, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 481573270, 'comment_body': ""These includes can all be in the `.cc` file. It's preferable to include on the cc file whenever possible, because they won't get added to everyone who includes this header."", 'comment_created': datetime.datetime(2020, 9, 2, 2, 40, 22, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 481573670, 'comment_body': ""Can you add a `brief` to this class explaining how it's supposed to be used?"", 'comment_created': datetime.datetime(2020, 9, 2, 2, 41, 2, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 481574987, 'comment_body': ""```suggestion\r\n  // Documentation inherited\r\n```\r\n\r\nNo need to document the inherited functions unless you're adding special functionality to them."", 'comment_created': datetime.datetime(2020, 9, 2, 2, 43, 8, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 481575703, 'comment_body': 'I think it would be helpful if your example also mentioned the string. For the ""x attribute in Pose3d Component"", what does `_attribute` look like?', 'comment_created': datetime.datetime(2020, 9, 2, 2, 44, 17, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 481576035, 'comment_body': 'Missing copyright header.\r\n\r\nAlso, it would be nice to add minimum layout sizes.', 'comment_created': datetime.datetime(2020, 9, 2, 2, 44, 47, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 481579031, 'comment_body': '```suggestion\r\n  igndbg << ""Unregister chart ["" << Id << ""]"" << std::endl;\r\n```', 'comment_created': datetime.datetime(2020, 9, 2, 2, 49, 30, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 481579159, 'comment_body': 'Style\r\n\r\n```suggestion\r\n  std::string id = std::to_string(_entity) + "","" + std::to_string(_typeId);\r\n```', 'comment_created': datetime.datetime(2020, 9, 2, 2, 49, 41, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 481936835, 'comment_body': 'yeah i already do that, in that if condition above it (and all other places) ', 'comment_created': datetime.datetime(2020, 9, 2, 9, 35, 43, tzinfo=datetime.timezone.utc), 'commenter': 'AmrElsersy', 'type': 'User'}, {'comment_id': 482066789, 'comment_body': 'ok i made the modification for that PR\r\nbut the main code of that will be in the PlottingInterface code so i will update the other PR ', 'comment_created': datetime.datetime(2020, 9, 2, 13, 26, 26, tzinfo=datetime.timezone.utc), 'commenter': 'AmrElsersy', 'type': 'User'}, {'comment_id': 488241131, 'comment_body': ""The Z looks closer to the plot icon than X and Y. I see you added  space before the other 2, so we should add here too:\r\n\r\n```suggestion\r\n            text: ' Z (' + unit + ')'\r\n```\r\n\r\n![z_space](https://user-images.githubusercontent.com/5751272/93141984-035c5280-f69a-11ea-9669-e62e13c0c3d9.png)\r\n"", 'comment_created': datetime.datetime(2020, 9, 14, 21, 53, 16, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 488241549, 'comment_body': 'Some of these includes are not used, like `Joint`. It would be good to go over the list and see what can be removed.', 'comment_created': datetime.datetime(2020, 9, 14, 21, 54, 17, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 488245366, 'comment_body': 'Instead of hardcoding 22, we should look for the `ign.gazebo.components` string and remove that if it exists. The reason is that developers can create different component types in their plugins, which may have different names.\r\n\r\n', 'comment_created': datetime.datetime(2020, 9, 14, 21, 59, 36, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 488251688, 'comment_body': ""Do the `PlotComponent`s need to be pointers or can they just be objects? Then we don't need to worry about deleting them. I think that this memory isn't being cleared right now."", 'comment_created': datetime.datetime(2020, 9, 14, 22, 8, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 488252458, 'comment_body': 'The same thing here about using plan objects instead of pointers.', 'comment_created': datetime.datetime(2020, 9, 14, 22, 8, 58, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 488619891, 'comment_body': ""Yeah, i add them at run time and i PlotData class dosn't have Copy Constructor to assign local variables to it without dynamically allocating (will require another PR to ign-gui code)\r\n\r\nanyway, i handled deleting them "", 'comment_created': datetime.datetime(2020, 9, 15, 12, 18, 35, tzinfo=datetime.timezone.utc), 'commenter': 'AmrElsersy', 'type': 'User'}, {'comment_id': 489007622, 'comment_body': ""Ok, I see now that you're deleting them when the plugin is destroyed, but I'm concerned about a memory leak when the components / data are removed from the map (`erase`), but their memory isn't cleared. Imagine if the user is subscribing and unsubscribing to many different topics over a long period of time, these can acummulate.\r\n\r\nIf plain objects don't work, how about using `std::shared_ptr`? Then you don't need to call `delete` and they will be cleared when you remove them from the map. We should try to use smart pointers as much as possible."", 'comment_created': datetime.datetime(2020, 9, 15, 21, 59, 53, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}]","[{'commit_sha': '0526c4eb528b249dd9121f654bf532e8afdee06f', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99f7633ebb93868b26c8191b2877d4037e54b2b9', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '925c66c61a6eba287f77959a2a9a6dc5d7758115', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e72f3c2f350d7ef2fd0fef55eeea6d3368d256b2', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd6dbd898d57e953f2cfca3dac3326bfda27640ff', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3201d8e54366c3d5bce2ab550551d8d2c7592e81', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6424f57299fcfe222065c267924b4245a6674510', 'committer_username': 'chapulina', 'committer_name': 'Louise Poubel', 'committer_email': None, 'commit_date': datetime.datetime(2013, 10, 22, 22, 20, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dcc6cd07cd93934e10861a1bfe3a63f4f95808f2', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e01c00c8030119269b2e26270e2e0c001bb0adb1', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0833f6b4689e64fb0976c15e02e8f88bf4bfea8', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6057d30d9b21cab550590c40c4780ba1ee899e5c', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '431aaf4ba8dc278982953c931ae5f2b0d7adf492', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f00bbeddad1de67ea9454917f6a785497a322c6', 'committer_username': 'claireyywang', 'committer_name': 'Claire Wang', 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 16, 15, 3, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '580f0ceb2f9daf5c75a05bbba28faf995c4e4b4c', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '125b79b5d6bb308831a3a6b01d1a5f28a06fd634', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b10c670d428fd3442fb3bf7830547609024340c', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '095b1fedec0dd8bc0c89769ae85b596a3f02cca1', 'committer_username': 'chapulina', 'committer_name': 'Louise Poubel', 'committer_email': None, 'commit_date': datetime.datetime(2013, 10, 22, 22, 20, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f8beefda6c00675aa8b113dc57804f54d830c1fb', 'committer_username': 'chapulina', 'committer_name': 'Louise Poubel', 'committer_email': None, 'commit_date': datetime.datetime(2013, 10, 22, 22, 20, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2fbf59567e66e03fff4d0f81164dc6aa130e8f28', 'committer_username': 'chapulina', 'committer_name': 'Louise Poubel', 'committer_email': None, 'commit_date': datetime.datetime(2013, 10, 22, 22, 20, 7, tzinfo=datetime.timezone.utc)}]",,35613645,,User,,53,,9,85
472836110,Plotting Header time,"**Improving Plotting performance** 
- **Points Limit** (setting max num of points per graph)
- enabling **OpenGL** for rendering the points (significant performance improvement)

**Plotting tool time** update:

Plotting according to the time that is associated with the header field of the msg if exists

for example, plotting a topic with a header time = sim time, makes the plotting stops if the simulation stops
 
![sim_time](https://user-images.githubusercontent.com/35613645/91105626-d0153d80-e670-11ea-84f8-c9b8818d1117.gif)

@chapulina @claireyywang ",True,115,https://api.github.com/repos/gazebosim/gz-gui/pulls/115,https://github.com/gazebosim/gz-gui/pull/115,closed,522,192,6,15,1,30,3,1,"[{'name': 'enhancement'}, {'name': 'ðŸ”® dome'}, {'name': 'beta'}]",2020-08-24 23:22:43+00:00,2020-09-10 23:34:37+00:00,1469514.0,"17 days, 0:11:54","[{'comment_id': 480380621, 'comment_body': 'Missing documentation for a few functions and variables. On other files too.', 'comment_created': datetime.datetime(2020, 8, 31, 20, 28, 8, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 480381803, 'comment_body': ""Could you add a comment explaining what's being done here?"", 'comment_created': datetime.datetime(2020, 8, 31, 20, 30, 30, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 480469897, 'comment_body': 'Indentation :wink: :wink: ', 'comment_created': datetime.datetime(2020, 8, 31, 23, 23, 45, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 480472837, 'comment_body': 'Style: always use `this`\r\n\r\n```suggestion\r\n  if (!this->HasHeader(_msg, headerTime))\r\n```', 'comment_created': datetime.datetime(2020, 8, 31, 23, 33, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 480473147, 'comment_body': 'How about calling this `PERIOD`?', 'comment_created': datetime.datetime(2020, 8, 31, 23, 34, 2, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 480473483, 'comment_body': 'I recommend returning here if not found, so the code below is less indented:\r\n\r\n```\r\nif (!found)\r\n  return;\r\n```', 'comment_created': datetime.datetime(2020, 8, 31, 23, 35, 5, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 480473895, 'comment_body': 'We should check that the `headerMsg` pointer is not `nullptr` before using it, and if it is, we return false.\r\n\r\nThe same goes for `stampMsg`.', 'comment_created': datetime.datetime(2020, 8, 31, 23, 36, 29, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 480506333, 'comment_body': '```suggestion\r\n//////////////////////////////////////////////////////\r\nvoid Topic::SetCurrentTime(const double &_time)\r\n```', 'comment_created': datetime.datetime(2020, 9, 1, 0, 43, 27, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 480507015, 'comment_body': '```suggestion\r\n  return this->dataPtr->time;\r\n```', 'comment_created': datetime.datetime(2020, 9, 1, 0, 44, 32, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 480534391, 'comment_body': 'Is the extra space intentional?', 'comment_created': datetime.datetime(2020, 9, 1, 1, 11, 40, tzinfo=datetime.timezone.utc), 'commenter': 'claireyywang', 'type': 'User'}, {'comment_id': 480544600, 'comment_body': 'check for nullptr before calling `fieldIt.second`', 'comment_created': datetime.datetime(2020, 9, 1, 1, 21, 10, tzinfo=datetime.timezone.utc), 'commenter': 'claireyywang', 'type': 'User'}, {'comment_id': 480545219, 'comment_body': 'could `field` be null?', 'comment_created': datetime.datetime(2020, 9, 1, 1, 21, 42, tzinfo=datetime.timezone.utc), 'commenter': 'claireyywang', 'type': 'User'}, {'comment_id': 480546549, 'comment_body': '2 space indent', 'comment_created': datetime.datetime(2020, 9, 1, 1, 22, 59, tzinfo=datetime.timezone.utc), 'commenter': 'claireyywang', 'type': 'User'}, {'comment_id': 480546898, 'comment_body': 'same as above', 'comment_created': datetime.datetime(2020, 9, 1, 1, 23, 19, tzinfo=datetime.timezone.utc), 'commenter': 'claireyywang', 'type': 'User'}, {'comment_id': 480549061, 'comment_body': 'By casting `double` to `int`, we are basically rounding down the digits. Will `_x` always be a integer number or is it possible for `_x` to be rounded down from `2.5` to `2`? Maybe adding a comment to explain the purpose of this type casting? ', 'comment_created': datetime.datetime(2020, 9, 1, 1, 25, 17, tzinfo=datetime.timezone.utc), 'commenter': 'claireyywang', 'type': 'User'}, {'comment_id': 480554680, 'comment_body': 'need to adjust indentation from 4 to 2 in this block', 'comment_created': datetime.datetime(2020, 9, 1, 1, 30, 32, tzinfo=datetime.timezone.utc), 'commenter': 'claireyywang', 'type': 'User'}, {'comment_id': 481502971, 'comment_body': 'this spacing is already there in all the COPYRIGHT sections', 'comment_created': datetime.datetime(2020, 9, 2, 0, 21, 12, tzinfo=datetime.timezone.utc), 'commenter': 'AmrElsersy', 'type': 'User'}, {'comment_id': 481536275, 'comment_body': 'Yeah sorry I think I was the one who sneaked this change into this PR when I rebased. :grimacing:  The correct copyright header has that spacing.', 'comment_created': datetime.datetime(2020, 9, 2, 1, 42, 13, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 481549602, 'comment_body': 'No, I check for null field for that string before calling that function', 'comment_created': datetime.datetime(2020, 9, 2, 2, 3, 1, tzinfo=datetime.timezone.utc), 'commenter': 'AmrElsersy', 'type': 'User'}, {'comment_id': 481552135, 'comment_body': 'this is just to prevent a compiler error of comparing the _x (which is time which is double) to a default integer number \r\ni use this as a flag that lets me know whether it has a header or not', 'comment_created': datetime.datetime(2020, 9, 2, 2, 7, 9, tzinfo=datetime.timezone.utc), 'commenter': 'AmrElsersy', 'type': 'User'}, {'comment_id': 482214826, 'comment_body': 'We need to be extra careful when passing raw pointers around, because they can be deleted before someone tries to access them. We should always use smart pointers if we can.\r\n\r\nI see that this pointer is being used to set the time reference at the moment of subscription. Would it be possible to hold that time as a `std::shared_ptr` and pass it here as an argument. For example:\r\n\r\n```\r\nvoid Transport::Subscribe(const std::string &_topic,\r\n                          const std::string &_fieldPath,\r\n                          int _chart, const std::shared_ptr<double> &_time)\r\n```\r\n\r\nAnd \r\n\r\n```\r\nvoid Topic::SetPlottingTimeRef(const std::shared_ptr<double> &_timePtr)\r\n```\r\n\r\nAnd\r\n\r\n```\r\npublic: std::shared_ptr<double> time;\r\n```\r\n\r\nThis way, multiple objects can hold pointers to the same time, and none of them can delete the pointer and leave the rest with a null pointer. \r\n\r\nFor this function, if you really need to return a double (not a pointer), you could return a copy of the value, something like this:\r\n\r\n```\r\ndouble PlottingInterface::Time() const\r\n{\r\n  return *this->dataPtr->time;\r\n}\r\n```', 'comment_created': datetime.datetime(2020, 9, 2, 16, 46, 45, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 482216386, 'comment_body': 'I think callers of this function would expect that whenever you set the reference, the pre-existing reference is updated. Is this check needed?', 'comment_created': datetime.datetime(2020, 9, 2, 16, 49, 19, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 482216517, 'comment_body': '```suggestion\r\n    return false;\r\n```', 'comment_created': datetime.datetime(2020, 9, 2, 16, 49, 33, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 482216656, 'comment_body': '```suggestion\r\n    return false;\r\n```', 'comment_created': datetime.datetime(2020, 9, 2, 16, 49, 47, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 482217396, 'comment_body': ""Here you're passing a reference to an object that will be destroyed soon. This is one of the reasons to use a smart pointer instead."", 'comment_created': datetime.datetime(2020, 9, 2, 16, 50, 56, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 482682518, 'comment_body': 'thanks for that :D ', 'comment_created': datetime.datetime(2020, 9, 3, 3, 34, 11, tzinfo=datetime.timezone.utc), 'commenter': 'AmrElsersy', 'type': 'User'}, {'comment_id': 483176800, 'comment_body': '```suggestion\r\n  /// \\param[in] Topic Pointer to the subscribed topic\r\n```', 'comment_created': datetime.datetime(2020, 9, 3, 18, 30, 39, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 483176995, 'comment_body': 'Still missing docs :wink: ', 'comment_created': datetime.datetime(2020, 9, 3, 18, 30, 53, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 483885388, 'comment_body': 'Why is this removed? ', 'comment_created': datetime.datetime(2020, 9, 5, 0, 4, 23, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 483891896, 'comment_body': 'i used that just for testing :D \r\nnot part of the code ', 'comment_created': datetime.datetime(2020, 9, 5, 0, 58, 22, tzinfo=datetime.timezone.utc), 'commenter': 'AmrElsersy', 'type': 'User'}]","[{'commit_sha': '994d25565018937b09e088b7107c48cee7463954', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab5ff051eb4492dd049393a475dfe112b834a7ae', 'committer_username': 'chapulina', 'committer_name': 'Louise Poubel', 'committer_email': None, 'commit_date': datetime.datetime(2013, 10, 22, 22, 20, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9652aa950b6740be29eeabce56789ec94095ded', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57d35d78a71719e8af9ba07b75056317af0d876e', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b41548d3d75ab76dd0a3b68799ace62aa478697a', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a358a5b4badc7d7f78411a5521a8291b99cd3241', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ef4375cc0736e016ef1c0378c54e21ec481ea93', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a4bbd2ac2563d13be8670cb02631b2caca100530', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '81e63dff50e82c4f590bf406efc060740744f000', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e153a6f4f88e75e8e06fc85802357c9acc51e34', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df659347c45d36f568f78276f02b5445a0902f15', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4da91bb7d19fc8f8458983e45431a3fe18448b40', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '077b41da48bcb45956e06efe16d068287b3172a4', 'committer_username': 'chapulina', 'committer_name': 'Louise Poubel', 'committer_email': None, 'commit_date': datetime.datetime(2013, 10, 22, 22, 20, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eed6e41a25fd09a1a1e75c77d94c6c018367440e', 'committer_username': 'chapulina', 'committer_name': 'Louise Poubel', 'committer_email': None, 'commit_date': datetime.datetime(2013, 10, 22, 22, 20, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5764dbcb02d85188c8f852a35ee831deffd01c9d', 'committer_username': 'chapulina', 'committer_name': 'Louise Poubel', 'committer_email': None, 'commit_date': datetime.datetime(2013, 10, 22, 22, 20, 7, tzinfo=datetime.timezone.utc)}]",,35613645,,User,,53,,9,85

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
255865284,gz-gui,gazebosim/gz-gui,C++,41,71,9,56,2279,62,98,5,"[{'id': 486083837, 'number': 124, 'closed': datetime.datetime(2020, 9, 14, 22, 16, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 13, 1, 28, 19, tzinfo=datetime.timezone.utc), 'time_taken': 161272.0, 'time_delta': '1 day, 20:47:52', 'additions': 19, 'deletions': 32, 'state': 'closed'}, {'id': 472836110, 'number': 115, 'closed': datetime.datetime(2020, 9, 10, 23, 34, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 24, 23, 22, 43, tzinfo=datetime.timezone.utc), 'time_taken': 1469514.0, 'time_delta': '17 days, 0:11:54', 'additions': 522, 'deletions': 192, 'state': 'closed'}, {'id': 441562886, 'number': 89, 'closed': datetime.datetime(2020, 8, 27, 0, 46, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 29, 17, 53, 21, tzinfo=datetime.timezone.utc), 'time_taken': 5035988.0, 'time_delta': '58 days, 6:53:08', 'additions': 2460, 'deletions': 0, 'state': 'closed'}, {'id': 425714882, 'number': 69, 'closed': datetime.datetime(2020, 8, 4, 21, 0, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 1, 2, 18, 24, tzinfo=datetime.timezone.utc), 'time_taken': 5596914.0, 'time_delta': '64 days, 18:41:54', 'additions': 1026, 'deletions': 0, 'state': 'closed'}]"
255865265,gz-sim,gazebosim/gz-sim,C++,252,646,17,135,6978,326,174,24,"[{'id': 665450112, 'number': 853, 'closed': datetime.datetime(2021, 9, 22, 22, 56, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 9, 0, 15, 19, tzinfo=datetime.timezone.utc), 'time_taken': 9153674.0, 'time_delta': '105 days, 22:41:14', 'additions': 1301, 'deletions': 509, 'state': 'closed'}, {'id': 463086654, 'number': 270, 'closed': datetime.datetime(2020, 9, 23, 1, 9, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 5, 1, 8, 21, tzinfo=datetime.timezone.utc), 'time_taken': 4233647.0, 'time_delta': '49 days, 0:00:47', 'additions': 939, 'deletions': 50, 'state': 'closed'}, {'id': 462287707, 'number': 267, 'closed': datetime.datetime(2020, 8, 3, 16, 54, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 3, 16, 52, 58, tzinfo=datetime.timezone.utc), 'time_taken': 114.0, 'time_delta': '0:01:54', 'additions': 8860, 'deletions': 1201, 'state': 'closed'}, {'id': 416751947, 'number': 133, 'closed': datetime.datetime(2020, 6, 7, 0, 51, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 12, 14, 10, 22, tzinfo=datetime.timezone.utc), 'time_taken': 2198479.0, 'time_delta': '25 days, 10:41:19', 'additions': 818, 'deletions': 0, 'state': 'closed'}]"
