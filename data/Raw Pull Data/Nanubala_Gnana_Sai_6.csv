pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
736265190,Update README.md,"@jonpsy 
Removed Space.",True,1,https://api.github.com/repos/jonpsy/GSoC-2021-mlpack/pulls/1,https://github.com/jonpsy/GSoC-2021-mlpack/pull/1,closed,0,1,1,1,1,0,0,0,[],2021-09-17 10:37:07+00:00,2021-09-17 10:37:32+00:00,25.0,0:00:25,[],"[{'commit_sha': '55ca695092950bb6e36685ff4e7210be8f2ae680', 'committer_username': 'waytoashutosh', 'committer_name': 'Ashutosh Kumar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 18, 16, 43, 43, tzinfo=datetime.timezone.utc)}]",Ashutosh Kumar,45975542,,User,,29,,15,14
670952625,Introduce Policy Methods for MOEA/D-DE,"Continuation of #269 

**Weight decomposition**
- [x] Tchebycheff
- [x] Weighted
- [x]  PBI

**Weigh Init**

- [x] Bayesian Bootstrap

**Testing**
- [x] ZDT


@zoq  @coatless @say4n ",True,293,https://api.github.com/repos/mlpack/ensmallen/pulls/293,https://github.com/mlpack/ensmallen/pull/293,closed,487,116,10,43,10,36,1,0,[{'name': 't: added feature'}],2021-06-16 02:40:21+00:00,2021-06-18 12:26:15+00:00,207954.0,"2 days, 9:45:54","[{'comment_id': 652308319, 'comment_body': 'I think it would be useful to call this `MOEADType` now and provide some aliases, see https://github.com/mlpack/ensmallen/blob/3497f276f4f8c399bcc565f723735a8dd7c86864/include/ensmallen_bits/sgd/sgd.hpp#L247-L253 for an example, that way we can keep using `MOEAD` in the tests and I think users will most probably go for the default policies as well, and in this case it seems odd to use `MOEAD<>`. Let me know what you think.', 'comment_created': datetime.datetime(2021, 6, 16, 2, 54, 18, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 652308969, 'comment_body': 'Okay, but we would need to write 3 (decomposition) x 4 (init) = 12 aliases.', 'comment_created': datetime.datetime(2021, 6, 16, 2, 56, 29, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 652309340, 'comment_body': 'And how do we name each of them, any ideas?', 'comment_created': datetime.datetime(2021, 6, 16, 2, 57, 7, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 652312401, 'comment_body': 'I would just go with `MOEA` for now, a user can always use `MOEAType<...>` or whatever we call this, and specify the policies same as the user would do right now.', 'comment_created': datetime.datetime(2021, 6, 16, 3, 0, 4, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 652316018, 'comment_body': 'How about\r\n\r\n```\r\nusing DefaultMOEAD = MOEAD<BayesianBootStrap, Tchebycheff>;\r\n```', 'comment_created': datetime.datetime(2021, 6, 16, 3, 5, 41, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 652316308, 'comment_body': 'I think that works.', 'comment_created': datetime.datetime(2021, 6, 16, 3, 6, 45, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 652317394, 'comment_body': 'The function and parameter description is missing, looks like that applies for every policy/method.', 'comment_created': datetime.datetime(2021, 6, 16, 3, 10, 4, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 652317995, 'comment_body': 'That one is so easy, love it.', 'comment_created': datetime.datetime(2021, 6, 16, 3, 12, 8, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 652318112, 'comment_body': '```suggestion\r\n//! Weight Init policies.\r\n```', 'comment_created': datetime.datetime(2021, 6, 16, 3, 12, 33, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 652318129, 'comment_body': '```suggestion\r\n//! Decomposition policies.\r\n```', 'comment_created': datetime.datetime(2021, 6, 16, 3, 12, 39, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 652318219, 'comment_body': '```suggestion\r\n        const InitPolicyType initPolicy = InitPolicyType(),\r\n```', 'comment_created': datetime.datetime(2021, 6, 16, 3, 13, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 652318381, 'comment_body': 'Nice catch!', 'comment_created': datetime.datetime(2021, 6, 16, 3, 13, 27, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 652318883, 'comment_body': 'I think we can be a little bit more verbose on the `DecompPolicyType` naming here, `DecompositionPolicyType`?', 'comment_created': datetime.datetime(2021, 6, 16, 3, 14, 58, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 652319652, 'comment_body': ""I would mark everything const here, just to make sure it's obvious the values do not change. "", 'comment_created': datetime.datetime(2021, 6, 16, 3, 17, 26, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 652319847, 'comment_body': '```suggestion\r\n    const size_t numPartitions  = FindNumParitions(numPoints, numObjectives);\r\n    const size_t validNumPoints = FindNumUniformPoints(numPartitions, numObjectives);\r\n```', 'comment_created': datetime.datetime(2021, 6, 16, 3, 18, 11, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 652319964, 'comment_body': '```suggestion\r\n      const size_t nextValidNumPoints = FindNumUniformPoints(numPartitions + 1, numObjectives);\r\n```', 'comment_created': datetime.datetime(2021, 6, 16, 3, 18, 34, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 652320202, 'comment_body': 'I see, this is what @coatless suggested?', 'comment_created': datetime.datetime(2021, 6, 16, 3, 19, 30, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 652320764, 'comment_body': '```suggestion\r\n *   title={MOEA/D: A multiobjective evolutionary algorithm based on decomposition},\r\n *   author={Zhang, Qingfu and Li, Hui},\r\n *   journal={IEEE Transactions on evolutionary computation},\r\n *   pages={712--731},\r\n *   year={2007}\r\n```', 'comment_created': datetime.datetime(2021, 6, 16, 3, 21, 17, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 652320847, 'comment_body': '```suggestion\r\n *   article{zhang2007moea,\r\n *   title={MOEA/D: A multiobjective evolutionary algorithm based on decomposition},\r\n *   author={Zhang, Qingfu and Li, Hui},\r\n *   journal={IEEE Transactions on evolutionary computation},\r\n *   pages={712--731},\r\n *   year={2007}\r\n```', 'comment_created': datetime.datetime(2021, 6, 16, 3, 21, 35, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 652320934, 'comment_body': '```suggestion\r\n *   title={MOEA/D: A multiobjective evolutionary algorithm based on decomposition},\r\n *   author={Zhang, Qingfu and Li, Hui},\r\n *   journal={IEEE Transactions on evolutionary computation},\r\n *   pages={712--731},\r\n *   year={2007}\r\n```', 'comment_created': datetime.datetime(2021, 6, 16, 3, 21, 51, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 652321049, 'comment_body': '```suggestion\r\n *   title={Multiobjective optimization problems with complicated Pareto sets, MOEA/D and NSGA-II},\r\n *   author={Li, Hui and Zhang, Qingfu},\r\n *   journal={IEEE transactions on evolutionary computation},\r\n *   pages={284--302},\r\n *   year={2008},\r\n```', 'comment_created': datetime.datetime(2021, 6, 16, 3, 22, 18, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 652325042, 'comment_body': 'Can we keep decomp policy? I have commented what it means. The problem is it gets too verbose and takes up lots of space. \n\nLet me know if you think otherwise. ', 'comment_created': datetime.datetime(2021, 6, 16, 3, 36, 14, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 652325431, 'comment_body': 'Okay.', 'comment_created': datetime.datetime(2021, 6, 16, 3, 37, 37, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 652349393, 'comment_body': 'No, this is a binomial coefficient. That one was Dirichilet', 'comment_created': datetime.datetime(2021, 6, 16, 4, 55, 16, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 652715239, 'comment_body': '```suggestion\r\n * The Penalty Based Boundary Intersection (PBI) decomposition policy.\r\n```', 'comment_created': datetime.datetime(2021, 6, 16, 13, 56, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 652783251, 'comment_body': '```suggestion\r\n   * policy.\r\n   *\r\n   * @param theta The penalty value.\r\n```', 'comment_created': datetime.datetime(2021, 6, 16, 15, 6, 57, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 652784455, 'comment_body': '```suggestion\r\n * The Tchebycheff Weight decomposition policy.\r\n```', 'comment_created': datetime.datetime(2021, 6, 16, 15, 8, 16, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 652785156, 'comment_body': '```suggestion\r\n * The Weighted Average decomposition policy.\r\n```', 'comment_created': datetime.datetime(2021, 6, 16, 15, 9, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 652785914, 'comment_body': '```suggestion\r\n//! Weight initialization policies.\r\n```', 'comment_created': datetime.datetime(2021, 6, 16, 15, 9, 50, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 652787338, 'comment_body': '```suggestion\r\n // Nothing to do here.\r\n```', 'comment_created': datetime.datetime(2021, 6, 16, 15, 11, 22, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 652789527, 'comment_body': '```suggestion\r\n * numbers which is guaranteed to sum up to 1.\r\n```', 'comment_created': datetime.datetime(2021, 6, 16, 15, 13, 41, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 652790618, 'comment_body': 'I think the paper below is good enough for a reference, so I would remove the link here.', 'comment_created': datetime.datetime(2021, 6, 16, 15, 14, 50, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 652856459, 'comment_body': 'Any reason why that one is commented out?', 'comment_created': datetime.datetime(2021, 6, 16, 16, 31, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 652858407, 'comment_body': 'We could add `/std:c++11` (https://docs.microsoft.com/en-us/cpp/build/reference/std-specify-language-standard-version?view=msvc-160) and see if that helps.', 'comment_created': datetime.datetime(2021, 6, 16, 16, 33, 36, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 652858516, 'comment_body': ""No reason! I was just testing against NSGA-II. I'll revert that be assured. "", 'comment_created': datetime.datetime(2021, 6, 16, 16, 33, 45, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 652942361, 'comment_body': ""Good ol' Windows."", 'comment_created': datetime.datetime(2021, 6, 16, 18, 24, 10, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}]","[{'commit_sha': '9e6b3cad229cb2cddc7f7ada44d2a7decfb22474', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c66ee3a09873134626ecb34121e86595e7e232c1', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2749d31e7e6251ff678c1135485bd7fe7b72e1d0', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd41c265202bf33a3a87ff8d990baaed832dd9727', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9242279aba796e031fd29526ae8f8e3b1be7f822', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e08c0c86c3c1462d3746bf380841fc45dbc4d061', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7505ecc6c74656b56a979ab474fcf532feb7460c', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dbc24bbe4c949d8e7b827def377855efcfd4dee2', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6868e2ca94949a1fbc6d448140369ab5fc2b06b1', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '945e21abb5a20b627033325e4e70b24257367811', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee41faad7d3852c9d9e1e0ce24dede8255ea5da9', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e1164e9521f250c2966943f5d526068fdbbf694', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cfed986674c732222ec4be16fe128c80b196fa56', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4692047af2670d1dcf4cafab1d4639360ba08815', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e092c4d26247c7fd4e5769887404cef336bd0ada', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ade51c915b3ac1a25c815eb9495282b47d600b44', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ec1f2e43071aa3a79e76cecef546d51bb10ee49', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8952378a0436b8358c3916d5327323db8e8b7cd9', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c02c5f9694e3f4002154fb69d5db26b028e0c7a', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9beaa5f0d47f0b7974d18fc163a079025ed4934e', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de612d3d099346cc1a1deecad9215e5f499c77f3', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e3e32365469e9d658ddb4511e0383875a4dd534', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d81b422d2ff9c842495aeac188aa11b253a29cd', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4997f550d2723d20c795acc51e749274fc2378ed', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd02d5e46aa8f66846d7bdced4109d2758dd40808', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '77bd44bed3dc7532e7bd4e53caa029f17459f13e', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '23ff19074ab30e511c8adb3318d9bd1a70871b74', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40c9aaad7ff228f284a3b9a839f6c8ccaf16b0ee', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c79f593ff2bdb582da23f75fcc512a21794a34ac', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d86a46a7b3a3ad84634fcef197d360d1b12cf0b', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be9f8b6346c496eb586d85b0dcd6de04598d5c4b', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1fbf162472fd61d507373a74f78bc58ccbca2b5', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79aa3f637a6cfa3db8b229b52c1d1e099798526d', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd7f2be2adb9e35a6316385ee39418e7c6dcb156b', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '955e7db555be645230b01b8d66b65225d41f1477', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e2b883dbdaca9a1b97e4304a7c78b5cfd355bc31', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3b865fcf0dbc9d14957dc259801ac142a73ac77', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd66c3d0ca95eb84f3a2234bcccfa0b6915c38d82', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '91ed336d0f30e02207f49bd1a3ca90c66fa95f3f', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a8b9018d83c5807cdf6939e452c88cad1d2f6797', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '18a4ca67e8155c0c03119701c547af79f68eb1c5', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd6cf8a1166da4f6b234e7ae39a76f5d532f0880', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff03b068482d6dde4a227108aff7b386cff95fa4', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}]",Nanubala Gnana Sai,45007169,,User,,73,,79,42
678135031,Refine Portfolio Notebook.,,True,160,https://api.github.com/repos/mlpack/examples/pulls/160,https://github.com/mlpack/examples/pull/160,closed,563,410,2,9,12,7,1,0,[{'name': 'c: examples'}],2021-06-25 19:30:03+00:00,2021-07-08 21:52:22+00:00,1131739.0,"13 days, 2:22:19","[{'comment_id': 659248003, 'comment_body': ""Can you run the code through e.g. https://jsonformatter.curiousconcept.com/ to make it easier to read, right now it's a single line/block."", 'comment_created': datetime.datetime(2021, 6, 27, 1, 48, 43, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 659248494, 'comment_body': 'Maybe use one of the solutions from:\r\n\r\nhttps://stackoverflow.com/questions/18734739/using-ipython-notebooks-under-version-control/\r\n\r\nor \r\n\r\nhttps://gist.github.com/pbugnion/ea2797393033b54674af', 'comment_created': datetime.datetime(2021, 6, 27, 1, 54, 56, tzinfo=datetime.timezone.utc), 'commenter': 'coatless', 'type': 'User'}, {'comment_id': 659248811, 'comment_body': 'Good idea we could integrate it into a git pre commit hook.', 'comment_created': datetime.datetime(2021, 6, 27, 1, 59, 39, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 661833760, 'comment_body': '```suggestion\r\n    ""     //! Generate the requested csv file.\\n"",\r\n```\r\n\r\nAdd extra space.', 'comment_created': datetime.datetime(2021, 6, 30, 21, 48, 56, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 661835486, 'comment_body': '@jonpsy With the other notebook in place, I think we can remove this one?', 'comment_created': datetime.datetime(2021, 6, 30, 21, 52, 34, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 664893219, 'comment_body': '```suggestion\r\n    ""//! Uncomment to generate the csv file.\\n"",\r\n```', 'comment_created': datetime.datetime(2021, 7, 6, 21, 34, 57, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 664893987, 'comment_body': 'We only generate the csv file if the cell above was run, I think it would be useful to be clear about that.', 'comment_created': datetime.datetime(2021, 7, 6, 21, 36, 31, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}]","[{'commit_sha': '1f3e412f89bdcfe1bf77910ef39ce1e7bf5433b1', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e26558260398614abc3417661a627cd13d98f9a', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '519d25027feb923e096bc53b537aa1704e0fefe6', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e61f764a7f7a479be7d9ed941bd9854a42d8552', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c4cbc3ffa0bf1017424a9d3cb006680cf341788', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c5e7527ab0e1ee30d37b37f09fe48060f34a018', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dffaaa229300ec9ee9cbdd985c2e8db2cba1d546', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84ecf9b28572095a8180b9cc6dc54cd8cb340b27', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '94343963889a87384926d83545ee4433fe08414d', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}]",Nanubala Gnana Sai,45007169,,User,,73,,79,42
678135031,Refine Portfolio Notebook.,,True,160,https://api.github.com/repos/mlpack/examples/pulls/160,https://github.com/mlpack/examples/pull/160,closed,563,410,2,9,12,7,1,0,[{'name': 'c: examples'}],2021-06-25 19:30:03+00:00,2021-07-08 21:52:22+00:00,1131739.0,"13 days, 2:22:19","[{'comment_id': 659248003, 'comment_body': ""Can you run the code through e.g. https://jsonformatter.curiousconcept.com/ to make it easier to read, right now it's a single line/block."", 'comment_created': datetime.datetime(2021, 6, 27, 1, 48, 43, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 659248494, 'comment_body': 'Maybe use one of the solutions from:\r\n\r\nhttps://stackoverflow.com/questions/18734739/using-ipython-notebooks-under-version-control/\r\n\r\nor \r\n\r\nhttps://gist.github.com/pbugnion/ea2797393033b54674af', 'comment_created': datetime.datetime(2021, 6, 27, 1, 54, 56, tzinfo=datetime.timezone.utc), 'commenter': 'coatless', 'type': 'User'}, {'comment_id': 659248811, 'comment_body': 'Good idea we could integrate it into a git pre commit hook.', 'comment_created': datetime.datetime(2021, 6, 27, 1, 59, 39, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 661833760, 'comment_body': '```suggestion\r\n    ""     //! Generate the requested csv file.\\n"",\r\n```\r\n\r\nAdd extra space.', 'comment_created': datetime.datetime(2021, 6, 30, 21, 48, 56, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 661835486, 'comment_body': '@jonpsy With the other notebook in place, I think we can remove this one?', 'comment_created': datetime.datetime(2021, 6, 30, 21, 52, 34, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 664893219, 'comment_body': '```suggestion\r\n    ""//! Uncomment to generate the csv file.\\n"",\r\n```', 'comment_created': datetime.datetime(2021, 7, 6, 21, 34, 57, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 664893987, 'comment_body': 'We only generate the csv file if the cell above was run, I think it would be useful to be clear about that.', 'comment_created': datetime.datetime(2021, 7, 6, 21, 36, 31, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}]","[{'commit_sha': '1f3e412f89bdcfe1bf77910ef39ce1e7bf5433b1', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e26558260398614abc3417661a627cd13d98f9a', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '519d25027feb923e096bc53b537aa1704e0fefe6', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e61f764a7f7a479be7d9ed941bd9854a42d8552', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c4cbc3ffa0bf1017424a9d3cb006680cf341788', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c5e7527ab0e1ee30d37b37f09fe48060f34a018', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dffaaa229300ec9ee9cbdd985c2e8db2cba1d546', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84ecf9b28572095a8180b9cc6dc54cd8cb340b27', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '94343963889a87384926d83545ee4433fe08414d', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}]",Nanubala Gnana Sai,45007169,,User,,73,,79,42
678135031,Refine Portfolio Notebook.,,True,160,https://api.github.com/repos/mlpack/examples/pulls/160,https://github.com/mlpack/examples/pull/160,closed,563,410,2,9,12,7,1,0,[{'name': 'c: examples'}],2021-06-25 19:30:03+00:00,2021-07-08 21:52:22+00:00,1131739.0,"13 days, 2:22:19","[{'comment_id': 659248003, 'comment_body': ""Can you run the code through e.g. https://jsonformatter.curiousconcept.com/ to make it easier to read, right now it's a single line/block."", 'comment_created': datetime.datetime(2021, 6, 27, 1, 48, 43, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 659248494, 'comment_body': 'Maybe use one of the solutions from:\r\n\r\nhttps://stackoverflow.com/questions/18734739/using-ipython-notebooks-under-version-control/\r\n\r\nor \r\n\r\nhttps://gist.github.com/pbugnion/ea2797393033b54674af', 'comment_created': datetime.datetime(2021, 6, 27, 1, 54, 56, tzinfo=datetime.timezone.utc), 'commenter': 'coatless', 'type': 'User'}, {'comment_id': 659248811, 'comment_body': 'Good idea we could integrate it into a git pre commit hook.', 'comment_created': datetime.datetime(2021, 6, 27, 1, 59, 39, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 661833760, 'comment_body': '```suggestion\r\n    ""     //! Generate the requested csv file.\\n"",\r\n```\r\n\r\nAdd extra space.', 'comment_created': datetime.datetime(2021, 6, 30, 21, 48, 56, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 661835486, 'comment_body': '@jonpsy With the other notebook in place, I think we can remove this one?', 'comment_created': datetime.datetime(2021, 6, 30, 21, 52, 34, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 664893219, 'comment_body': '```suggestion\r\n    ""//! Uncomment to generate the csv file.\\n"",\r\n```', 'comment_created': datetime.datetime(2021, 7, 6, 21, 34, 57, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 664893987, 'comment_body': 'We only generate the csv file if the cell above was run, I think it would be useful to be clear about that.', 'comment_created': datetime.datetime(2021, 7, 6, 21, 36, 31, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}]","[{'commit_sha': '1f3e412f89bdcfe1bf77910ef39ce1e7bf5433b1', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e26558260398614abc3417661a627cd13d98f9a', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '519d25027feb923e096bc53b537aa1704e0fefe6', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e61f764a7f7a479be7d9ed941bd9854a42d8552', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c4cbc3ffa0bf1017424a9d3cb006680cf341788', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c5e7527ab0e1ee30d37b37f09fe48060f34a018', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dffaaa229300ec9ee9cbdd985c2e8db2cba1d546', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84ecf9b28572095a8180b9cc6dc54cd8cb340b27', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '94343963889a87384926d83545ee4433fe08414d', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}]",Nanubala Gnana Sai,45007169,,User,,73,,79,42
678135031,Refine Portfolio Notebook.,,True,160,https://api.github.com/repos/mlpack/examples/pulls/160,https://github.com/mlpack/examples/pull/160,closed,563,410,2,9,12,7,1,0,[{'name': 'c: examples'}],2021-06-25 19:30:03+00:00,2021-07-08 21:52:22+00:00,1131739.0,"13 days, 2:22:19","[{'comment_id': 659248003, 'comment_body': ""Can you run the code through e.g. https://jsonformatter.curiousconcept.com/ to make it easier to read, right now it's a single line/block."", 'comment_created': datetime.datetime(2021, 6, 27, 1, 48, 43, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 659248494, 'comment_body': 'Maybe use one of the solutions from:\r\n\r\nhttps://stackoverflow.com/questions/18734739/using-ipython-notebooks-under-version-control/\r\n\r\nor \r\n\r\nhttps://gist.github.com/pbugnion/ea2797393033b54674af', 'comment_created': datetime.datetime(2021, 6, 27, 1, 54, 56, tzinfo=datetime.timezone.utc), 'commenter': 'coatless', 'type': 'User'}, {'comment_id': 659248811, 'comment_body': 'Good idea we could integrate it into a git pre commit hook.', 'comment_created': datetime.datetime(2021, 6, 27, 1, 59, 39, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 661833760, 'comment_body': '```suggestion\r\n    ""     //! Generate the requested csv file.\\n"",\r\n```\r\n\r\nAdd extra space.', 'comment_created': datetime.datetime(2021, 6, 30, 21, 48, 56, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 661835486, 'comment_body': '@jonpsy With the other notebook in place, I think we can remove this one?', 'comment_created': datetime.datetime(2021, 6, 30, 21, 52, 34, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 664893219, 'comment_body': '```suggestion\r\n    ""//! Uncomment to generate the csv file.\\n"",\r\n```', 'comment_created': datetime.datetime(2021, 7, 6, 21, 34, 57, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 664893987, 'comment_body': 'We only generate the csv file if the cell above was run, I think it would be useful to be clear about that.', 'comment_created': datetime.datetime(2021, 7, 6, 21, 36, 31, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}]","[{'commit_sha': '1f3e412f89bdcfe1bf77910ef39ce1e7bf5433b1', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e26558260398614abc3417661a627cd13d98f9a', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '519d25027feb923e096bc53b537aa1704e0fefe6', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e61f764a7f7a479be7d9ed941bd9854a42d8552', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c4cbc3ffa0bf1017424a9d3cb006680cf341788', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c5e7527ab0e1ee30d37b37f09fe48060f34a018', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dffaaa229300ec9ee9cbdd985c2e8db2cba1d546', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84ecf9b28572095a8180b9cc6dc54cd8cb340b27', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '94343963889a87384926d83545ee4433fe08414d', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}]",Nanubala Gnana Sai,45007169,,User,,73,,79,42
683052313,Rocket injector design optimization,,True,165,https://api.github.com/repos/mlpack/examples/pulls/165,https://github.com/mlpack/examples/pull/165,closed,445,0,5,12,11,5,2,0,"[{'name': 't: added feature'}, {'name': 'notebook'}]",2021-07-03 17:11:47+00:00,2021-07-14 22:59:41+00:00,971274.0,"11 days, 5:47:54","[{'comment_id': 668844162, 'comment_body': '```suggestion\r\n    ""It was the June of 1962, the company Rocketdyne was tasked with the heavy responsibility of sending a man to the moon as per Kennedy\'s bold promise. NASA, along with Rocketdyne, developed an F-1 engine capable of burning fuel of Olympic size swimming pool. On the D-day, when the engines ignited and the rocket was ready to take off, the engines exploded and the failure was catastrophic.\\n"",\r\n```\r\n\r\nNice background story.', 'comment_created': datetime.datetime(2021, 7, 13, 14, 54, 14, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 668849959, 'comment_body': '```suggestion\r\n    ""A rocket system consists of two liquid propellants, namely the fuel ($H_2$) and oxidiser ($O_2$). These propellants are stored in separate tanks, and pumped into the combustion chamber. The chamber houses the exothermic reaction between the propellants to release energy vital for the take-off process. For the reaction to occur readily, an injector mechanism is installed, which disperses these liquid propellants into tiny droplets and allow the mixing of the chemicals.\\n"",\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 15, 0, 8, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 668857183, 'comment_body': 'The part is great.', 'comment_created': datetime.datetime(2021, 7, 13, 15, 8, 5, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 668860349, 'comment_body': '```suggestion\r\n    ""a) **Maximum temperature at injector face** ($TF_{max}$): Prevent meltdown of the injector surface. Determines the thermal stability of the combustion chamber. \\n"",\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 15, 11, 21, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 669015910, 'comment_body': 'Haha, indeed!', 'comment_created': datetime.datetime(2021, 7, 13, 18, 34, 32, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}]","[{'commit_sha': '76721883c6f2b1d15c39f0209974fed1a7d747bf', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0efc27637595186adb166b29282626cf4a49a21b', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '04fe9256bdaf2b51804182052245f0ed9285c1cf', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3eb5210998733fe6b92c2c2eff78c0f9d24eb12', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14777d88badbe9cbbb741ab4fb9e48b8560d291f', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7418b684999721cccb19d385acd62350b5e267e2', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e66bf8bcc76027dcf293961613b911d32bec2377', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c9ee497d01020ea7d6a0f3ea61a8c8c01a91622e', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc3a54a7340e85fe22ae77ad231201580c0deb72', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '321e25a87753edbebb3bcf4f19f22b0161d8a590', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c5ff165fe2478775698a39dff162b9de5d95628', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14d46db9a91f71d7ab7726b31d393bceab4292de', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}]",Nanubala Gnana Sai,45007169,,User,,73,,79,42
683052313,Rocket injector design optimization,,True,165,https://api.github.com/repos/mlpack/examples/pulls/165,https://github.com/mlpack/examples/pull/165,closed,445,0,5,12,11,5,2,0,"[{'name': 't: added feature'}, {'name': 'notebook'}]",2021-07-03 17:11:47+00:00,2021-07-14 22:59:41+00:00,971274.0,"11 days, 5:47:54","[{'comment_id': 668844162, 'comment_body': '```suggestion\r\n    ""It was the June of 1962, the company Rocketdyne was tasked with the heavy responsibility of sending a man to the moon as per Kennedy\'s bold promise. NASA, along with Rocketdyne, developed an F-1 engine capable of burning fuel of Olympic size swimming pool. On the D-day, when the engines ignited and the rocket was ready to take off, the engines exploded and the failure was catastrophic.\\n"",\r\n```\r\n\r\nNice background story.', 'comment_created': datetime.datetime(2021, 7, 13, 14, 54, 14, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 668849959, 'comment_body': '```suggestion\r\n    ""A rocket system consists of two liquid propellants, namely the fuel ($H_2$) and oxidiser ($O_2$). These propellants are stored in separate tanks, and pumped into the combustion chamber. The chamber houses the exothermic reaction between the propellants to release energy vital for the take-off process. For the reaction to occur readily, an injector mechanism is installed, which disperses these liquid propellants into tiny droplets and allow the mixing of the chemicals.\\n"",\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 15, 0, 8, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 668857183, 'comment_body': 'The part is great.', 'comment_created': datetime.datetime(2021, 7, 13, 15, 8, 5, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 668860349, 'comment_body': '```suggestion\r\n    ""a) **Maximum temperature at injector face** ($TF_{max}$): Prevent meltdown of the injector surface. Determines the thermal stability of the combustion chamber. \\n"",\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 15, 11, 21, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 669015910, 'comment_body': 'Haha, indeed!', 'comment_created': datetime.datetime(2021, 7, 13, 18, 34, 32, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}]","[{'commit_sha': '76721883c6f2b1d15c39f0209974fed1a7d747bf', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0efc27637595186adb166b29282626cf4a49a21b', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '04fe9256bdaf2b51804182052245f0ed9285c1cf', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3eb5210998733fe6b92c2c2eff78c0f9d24eb12', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14777d88badbe9cbbb741ab4fb9e48b8560d291f', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7418b684999721cccb19d385acd62350b5e267e2', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e66bf8bcc76027dcf293961613b911d32bec2377', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c9ee497d01020ea7d6a0f3ea61a8c8c01a91622e', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc3a54a7340e85fe22ae77ad231201580c0deb72', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '321e25a87753edbebb3bcf4f19f22b0161d8a590', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c5ff165fe2478775698a39dff162b9de5d95628', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14d46db9a91f71d7ab7726b31d393bceab4292de', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}]",Nanubala Gnana Sai,45007169,,User,,73,,79,42
683052313,Rocket injector design optimization,,True,165,https://api.github.com/repos/mlpack/examples/pulls/165,https://github.com/mlpack/examples/pull/165,closed,445,0,5,12,11,5,2,0,"[{'name': 't: added feature'}, {'name': 'notebook'}]",2021-07-03 17:11:47+00:00,2021-07-14 22:59:41+00:00,971274.0,"11 days, 5:47:54","[{'comment_id': 668844162, 'comment_body': '```suggestion\r\n    ""It was the June of 1962, the company Rocketdyne was tasked with the heavy responsibility of sending a man to the moon as per Kennedy\'s bold promise. NASA, along with Rocketdyne, developed an F-1 engine capable of burning fuel of Olympic size swimming pool. On the D-day, when the engines ignited and the rocket was ready to take off, the engines exploded and the failure was catastrophic.\\n"",\r\n```\r\n\r\nNice background story.', 'comment_created': datetime.datetime(2021, 7, 13, 14, 54, 14, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 668849959, 'comment_body': '```suggestion\r\n    ""A rocket system consists of two liquid propellants, namely the fuel ($H_2$) and oxidiser ($O_2$). These propellants are stored in separate tanks, and pumped into the combustion chamber. The chamber houses the exothermic reaction between the propellants to release energy vital for the take-off process. For the reaction to occur readily, an injector mechanism is installed, which disperses these liquid propellants into tiny droplets and allow the mixing of the chemicals.\\n"",\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 15, 0, 8, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 668857183, 'comment_body': 'The part is great.', 'comment_created': datetime.datetime(2021, 7, 13, 15, 8, 5, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 668860349, 'comment_body': '```suggestion\r\n    ""a) **Maximum temperature at injector face** ($TF_{max}$): Prevent meltdown of the injector surface. Determines the thermal stability of the combustion chamber. \\n"",\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 15, 11, 21, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 669015910, 'comment_body': 'Haha, indeed!', 'comment_created': datetime.datetime(2021, 7, 13, 18, 34, 32, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}]","[{'commit_sha': '76721883c6f2b1d15c39f0209974fed1a7d747bf', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0efc27637595186adb166b29282626cf4a49a21b', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '04fe9256bdaf2b51804182052245f0ed9285c1cf', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3eb5210998733fe6b92c2c2eff78c0f9d24eb12', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14777d88badbe9cbbb741ab4fb9e48b8560d291f', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7418b684999721cccb19d385acd62350b5e267e2', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e66bf8bcc76027dcf293961613b911d32bec2377', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c9ee497d01020ea7d6a0f3ea61a8c8c01a91622e', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc3a54a7340e85fe22ae77ad231201580c0deb72', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '321e25a87753edbebb3bcf4f19f22b0161d8a590', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c5ff165fe2478775698a39dff162b9de5d95628', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14d46db9a91f71d7ab7726b31d393bceab4292de', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}]",Nanubala Gnana Sai,45007169,,User,,73,,79,42
356081446,Add NSGA2,"This PR implements the [Non-dominated Sorting Genetic Algorithm - II](https://www.iitk.ac.in/kangal/Deb_NSGA-II.pdf) by Kalyanmoy Deb.
~It is a Work in Progress.~ :)

TODO:
- [x] Implement NSGA-II
- [x] Add tests
- [x] Add documentation",True,149,https://api.github.com/repos/mlpack/ensmallen/pulls/149,https://github.com/mlpack/ensmallen/pull/149,closed,1356,14,12,126,99,311,2,0,"[{'name': 'c: optimizers'}, {'name': 't: added feature'}]",2019-12-22 12:22:59+00:00,2020-08-10 14:10:48+00:00,20051269.0,"232 days, 1:47:49","[{'comment_id': 361485982, 'comment_body': 'I think we should use `arma::vec` here, since that is the choice that is normally made in the library', 'comment_created': datetime.datetime(2019, 12, 26, 16, 11, 1, tzinfo=datetime.timezone.utc), 'commenter': 'favre49', 'type': 'User'}, {'comment_id': 361486889, 'comment_body': 'Do you think we should go with an indicator-based approach for evaluating the correctness of answers instead? It seems more robust', 'comment_created': datetime.datetime(2019, 12, 26, 16, 15, 38, tzinfo=datetime.timezone.utc), 'commenter': 'favre49', 'type': 'User'}, {'comment_id': 361487000, 'comment_body': 'I think we should go for a name like SchafferStudyFunction or SchaffarMultiObjFunction, since that would be consistent with the rest of the library, plus the function could apply to more than NSGA2.', 'comment_created': datetime.datetime(2019, 12, 26, 16, 16, 18, tzinfo=datetime.timezone.utc), 'commenter': 'favre49', 'type': 'User'}, {'comment_id': 361497884, 'comment_body': 'Yes, I was thinking of building a generic ABC for multi-objective functions and building up SCH on top of it.', 'comment_created': datetime.datetime(2019, 12, 26, 17, 19, 19, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 361498017, 'comment_body': 'Sure, will change it! ', 'comment_created': datetime.datetime(2019, 12, 26, 17, 19, 59, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 361498841, 'comment_body': 'Indicators can be explored. We have multiple choices there — convergence, cardinality etc. I implemented this range based check because the NSGA-II paper had these bounds specified for the optimal solution for the function. ', 'comment_created': datetime.datetime(2019, 12, 26, 17, 25, 24, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 361827322, 'comment_body': 'This list is meant to be alphabetical, could you put it in the right place?', 'comment_created': datetime.datetime(2019, 12, 29, 4, 55, 5, tzinfo=datetime.timezone.utc), 'commenter': 'favre49', 'type': 'User'}, {'comment_id': 361827493, 'comment_body': 'I think you meant to name this `MaxGenerations()`?', 'comment_created': datetime.datetime(2019, 12, 29, 5, 0, 54, tzinfo=datetime.timezone.utc), 'commenter': 'favre49', 'type': 'User'}, {'comment_id': 361827497, 'comment_body': ""I think for now we should name this `MutationProbability()`, since that's what we are using in `CNE`. Also perhaps we should change `CrossoverProb()` to `CrossoverRate()` since that's what we are using in `DE`. Just to make our API consistent :)"", 'comment_created': datetime.datetime(2019, 12, 29, 5, 0, 57, tzinfo=datetime.timezone.utc), 'commenter': 'favre49', 'type': 'User'}, {'comment_id': 361827517, 'comment_body': 'I believe this is called `MutationSize` in `CNE`, maybe we should change this too?', 'comment_created': datetime.datetime(2019, 12, 29, 5, 1, 35, tzinfo=datetime.timezone.utc), 'commenter': 'favre49', 'type': 'User'}, {'comment_id': 361827659, 'comment_body': 'Please put your braces in a new line, as per the [brace placement style guideline](https://github.com/mlpack/mlpack/wiki/DesignGuidelines#brace-placement). I think there are multiple places you can do this.', 'comment_created': datetime.datetime(2019, 12, 29, 5, 7, 19, tzinfo=datetime.timezone.utc), 'commenter': 'favre49', 'type': 'User'}, {'comment_id': 361827731, 'comment_body': 'Also make sure that the different lines are aligned please :)', 'comment_created': datetime.datetime(2019, 12, 29, 5, 10, 33, tzinfo=datetime.timezone.utc), 'commenter': 'favre49', 'type': 'User'}, {'comment_id': 361827832, 'comment_body': 'Do you think we could instead use an `arma::mat` since the size never changes?', 'comment_created': datetime.datetime(2019, 12, 29, 5, 14, 9, tzinfo=datetime.timezone.utc), 'commenter': 'favre49', 'type': 'User'}, {'comment_id': 361827841, 'comment_body': ""Is there any reason you chose to put this in it's own function? I think we could just put the for loop here with a comment as to it's purpose?"", 'comment_created': datetime.datetime(2019, 12, 29, 5, 14, 53, tzinfo=datetime.timezone.utc), 'commenter': 'favre49', 'type': 'User'}, {'comment_id': 361827989, 'comment_body': 'I think we could use an `arma::uvec` here as well?', 'comment_created': datetime.datetime(2019, 12, 29, 5, 20, tzinfo=datetime.timezone.utc), 'commenter': 'favre49', 'type': 'User'}, {'comment_id': 361828034, 'comment_body': 'Could this be an `arma::vec`?', 'comment_created': datetime.datetime(2019, 12, 29, 5, 21, 26, tzinfo=datetime.timezone.utc), 'commenter': 'favre49', 'type': 'User'}, {'comment_id': 362460907, 'comment_body': 'I separated ~the~ it to avoid repetition; the `EvaluateObjectives` function is used multiple (two) times in the Optimize function.', 'comment_created': datetime.datetime(2020, 1, 2, 12, 43, 24, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 362461586, 'comment_body': 'The default template parameter is `arma::mat` during instantiation (from `SchafferFunctionN1`). Should we explicitly state it here too?', 'comment_created': datetime.datetime(2020, 1, 2, 12, 46, 20, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 362462080, 'comment_body': 'Intermediate population size is `2 * populationSize`. Should we pre-allocate it?', 'comment_created': datetime.datetime(2020, 1, 2, 12, 48, 22, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 362462864, 'comment_body': '` crowdingDistance` is resized in the optimizer. It starts with a length of `populationSize` and is then resized to `population.size()`, which is `2 * populationSize`. Should we pre-allocate it too?', 'comment_created': datetime.datetime(2020, 1, 2, 12, 51, 57, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 362482316, 'comment_body': 'Yes I suppose that would make sense', 'comment_created': datetime.datetime(2020, 1, 2, 14, 2, 42, tzinfo=datetime.timezone.utc), 'commenter': 'favre49', 'type': 'User'}, {'comment_id': 362492099, 'comment_body': 'IMO it makes the most sense to do that. Another option would be to use `reserve()` to prevent reallocation of memory of the vector during addition, but as long as we add a comment for the reason why we have made it that size, pre-allocation should be fine.', 'comment_created': datetime.datetime(2020, 1, 2, 14, 31, 46, tzinfo=datetime.timezone.utc), 'commenter': 'favre49', 'type': 'User'}, {'comment_id': 362495338, 'comment_body': 'You should add a space between the `for` and the brackets, as per the design guideline [here](https://github.com/mlpack/mlpack/wiki/DesignGuidelines#spacing-for-operators)', 'comment_created': datetime.datetime(2020, 1, 2, 14, 41, 5, tzinfo=datetime.timezone.utc), 'commenter': 'favre49', 'type': 'User'}, {'comment_id': 362495755, 'comment_body': ""I don't think we need to use braces here since it only applies to one line"", 'comment_created': datetime.datetime(2020, 1, 2, 14, 42, 17, tzinfo=datetime.timezone.utc), 'commenter': 'favre49', 'type': 'User'}, {'comment_id': 362495839, 'comment_body': 'I think we can go with a single line here as well, no braces', 'comment_created': datetime.datetime(2020, 1, 2, 14, 42, 32, tzinfo=datetime.timezone.utc), 'commenter': 'favre49', 'type': 'User'}, {'comment_id': 362505777, 'comment_body': 'Could we reserve it to `2*populationSize` from the beginning?', 'comment_created': datetime.datetime(2020, 1, 2, 15, 9, 21, tzinfo=datetime.timezone.utc), 'commenter': 'favre49', 'type': 'User'}, {'comment_id': 362506039, 'comment_body': '`auto` is not recommended for Armadillo objects and expressions, see [here](http://arma.sourceforge.net/faq.html).', 'comment_created': datetime.datetime(2020, 1, 2, 15, 10, 10, tzinfo=datetime.timezone.utc), 'commenter': 'favre49', 'type': 'User'}, {'comment_id': 362506221, 'comment_body': 'You missed alignment here :)', 'comment_created': datetime.datetime(2020, 1, 2, 15, 10, 38, tzinfo=datetime.timezone.utc), 'commenter': 'favre49', 'type': 'User'}, {'comment_id': 362506932, 'comment_body': 'When lines wrap, the next line should be two tabs from where the previous line began.', 'comment_created': datetime.datetime(2020, 1, 2, 15, 12, 24, tzinfo=datetime.timezone.utc), 'commenter': 'favre49', 'type': 'User'}, {'comment_id': 362507138, 'comment_body': 'Missed a space here :). There are a couple other places where this applies, take a look.', 'comment_created': datetime.datetime(2020, 1, 2, 15, 12, 57, tzinfo=datetime.timezone.utc), 'commenter': 'favre49', 'type': 'User'}, {'comment_id': 362508672, 'comment_body': 'That brace needs to be on the next line. There are a couple other places where this needs to be done, take a look :).', 'comment_created': datetime.datetime(2020, 1, 2, 15, 16, 45, tzinfo=datetime.timezone.utc), 'commenter': 'favre49', 'type': 'User'}, {'comment_id': 362548158, 'comment_body': 'Yes sure!', 'comment_created': datetime.datetime(2020, 1, 2, 16, 58, 57, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 362552185, 'comment_body': 'On it. I am going through the design specs thoroughly and making the necessary changes.\r\n', 'comment_created': datetime.datetime(2020, 1, 2, 17, 10, 41, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 362552262, 'comment_body': 'Ok.\r\n\r\n', 'comment_created': datetime.datetime(2020, 1, 2, 17, 10, 54, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 362553803, 'comment_body': 'If there are an odd number of parents (say, n = 2k+1), the evolution procedure generates a 2n + 1 children (`while (children.size() <= population.size() {...}`). I think we should reserve `2 * populationSize + 1` for both cases (odd and even sized population) to be safe?', 'comment_created': datetime.datetime(2020, 1, 2, 17, 15, 48, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 362555075, 'comment_body': 'The URL seems to be suffering from a DoS?\r\n[This](https://web.archive.org/web/20190904040146/http://arma.sourceforge.net/faq.html) is the latest snapshot I could find.\r\n<img width=""1283"" alt=""Screenshot 2020-01-02 at 10 46 57 PM"" src=""https://user-images.githubusercontent.com/8839504/71681082-ca9d7700-2db1-11ea-848f-8bfac7d9e312.png"">\r\n', 'comment_created': datetime.datetime(2020, 1, 2, 17, 19, 44, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 362555151, 'comment_body': 'On it!', 'comment_created': datetime.datetime(2020, 1, 2, 17, 19, 56, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 362555265, 'comment_body': 'Yes, I am going through the spec. :)', 'comment_created': datetime.datetime(2020, 1, 2, 17, 20, 18, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 362560422, 'comment_body': 'Hm, seems fine on my side, let us know if you still encounter any issues.', 'comment_created': datetime.datetime(2020, 1, 2, 17, 36, 3, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 362561576, 'comment_body': ""Let's use `const std::vector<size_t>& ranks` here to avoid an extra copy, same applies to the `crowdingDistance` parameter."", 'comment_created': datetime.datetime(2020, 1, 2, 17, 39, 39, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 362562546, 'comment_body': 'The check include the first one, so this will never be reached.', 'comment_created': datetime.datetime(2020, 1, 2, 17, 42, 25, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 362563554, 'comment_body': ""It's working now! I think it was a temporary outage."", 'comment_created': datetime.datetime(2020, 1, 2, 17, 45, 34, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 362566104, 'comment_body': 'Can you use `arma::Col<ElemType>` here to make the function type agnostic; for an example see:\r\n\r\nhttps://github.com/mlpack/ensmallen/blob/e9bb969b1f9e63f570eb74e48a9a9ed5019ee109/include/ensmallen_bits/problems/schaffer_function_n2_impl.hpp#L31-L42', 'comment_created': datetime.datetime(2020, 1, 2, 17, 53, 19, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 362567765, 'comment_body': ""I guess another solution is to make this an optimizer parameter, that way we don't have to introduce a new function type that provides the `GetMaximum` and `GetMinimum` functions, which I think is unique to the optimizers that are already implemented."", 'comment_created': datetime.datetime(2020, 1, 2, 17, 58, 27, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 362568326, 'comment_body': 'I think we can pass those two parameters directly instead of creating another copy first.', 'comment_created': datetime.datetime(2020, 1, 2, 18, 0, 11, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 362568595, 'comment_body': ""Looks like we don't modify the population, so let's use `const std::vector<MatType>& population`."", 'comment_created': datetime.datetime(2020, 1, 2, 18, 1, 1, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 362730187, 'comment_body': ""My bad! It's going to be `==`."", 'comment_created': datetime.datetime(2020, 1, 3, 8, 15, 43, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 362730336, 'comment_body': 'Sure, will do!', 'comment_created': datetime.datetime(2020, 1, 3, 8, 16, 38, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 362731583, 'comment_body': 'I was thinking of inheriting the Schaffer N.1 function from an abstract base class ~of~ for multi-objective functions. This ABC can have the `GetMaximum` and `GetMinimum` as methods? ', 'comment_created': datetime.datetime(2020, 1, 3, 8, 23, 34, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 362731862, 'comment_body': 'Okay, will make the changes.', 'comment_created': datetime.datetime(2020, 1, 3, 8, 25, 11, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 362732757, 'comment_body': 'We are adding child nodes to the parent population near the end of the function!', 'comment_created': datetime.datetime(2020, 1, 3, 8, 30, 13, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 362932788, 'comment_body': ""Form a users point of view I'd rather do as little as possible to get the optimizer running, which I think would be passing the parameter to the optimizer at construction time. Let me know what you think."", 'comment_created': datetime.datetime(2020, 1, 3, 19, 31, 55, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 362932892, 'comment_body': 'Ahh, thanks for the clarification.', 'comment_created': datetime.datetime(2020, 1, 3, 19, 32, 19, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 362933113, 'comment_body': 'I see, that sounds reasonable.', 'comment_created': datetime.datetime(2020, 1, 3, 19, 32, 56, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 362933710, 'comment_body': 'I think to keep this simple, we could just list the required fields: author, title, journal, year, we can keep the url as well.', 'comment_created': datetime.datetime(2020, 1, 3, 19, 34, 54, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 362934028, 'comment_body': 'Minor style issue, remove the empty line here.', 'comment_created': datetime.datetime(2020, 1, 3, 19, 35, 57, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 362934434, 'comment_body': 'Should we rename the function to `MutationStrength()` as this is what the parameter is called?', 'comment_created': datetime.datetime(2020, 1, 3, 19, 37, 9, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 362934910, 'comment_body': 'Can you combine the two into one line?', 'comment_created': datetime.datetime(2020, 1, 3, 19, 38, 27, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 362935045, 'comment_body': 'See comment above.', 'comment_created': datetime.datetime(2020, 1, 3, 19, 38, 49, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 362936230, 'comment_body': ""Also, it's not guaranteed that the return type is `double`, so we should use something like: `typedef typename MatType::elem_type ElemType;` to be generic.\r\n\r\n"", 'comment_created': datetime.datetime(2020, 1, 3, 19, 42, 14, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 362936734, 'comment_body': 'Not sure, pre-allocate does have a huge effect on the runtime in this case, but if you think it does help, feel free to add it.', 'comment_created': datetime.datetime(2020, 1, 3, 19, 43, 57, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 362937414, 'comment_body': 'I think we can use a reference here.', 'comment_created': datetime.datetime(2020, 1, 3, 19, 46, 11, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 362937492, 'comment_body': 'See comment above.', 'comment_created': datetime.datetime(2020, 1, 3, 19, 46, 26, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 362937829, 'comment_body': 'Missing `.` at the end.', 'comment_created': datetime.datetime(2020, 1, 3, 19, 47, 28, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 362938461, 'comment_body': 'Looks like we can use `const MatType& parentA` here.', 'comment_created': datetime.datetime(2020, 1, 3, 19, 49, 12, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 363018499, 'comment_body': 'Uhm, is the user expected to create a new class (a new multi-objective problem) to use the library?\r\nThen we can go ahead and make the abstraction; otherwise, an optimizer parameter looks to be the better option.', 'comment_created': datetime.datetime(2020, 1, 4, 6, 3, 35, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 363018617, 'comment_body': '@favre49 suggested that we rename it to `MutationSize()` as CNE uses the same name. But, CNE has the variable named `mutationStrength` too, so that makes sense for CNE. We can rename it to `MutationStrength()`, what do you say?', 'comment_created': datetime.datetime(2020, 1, 4, 6, 6, 49, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 363018636, 'comment_body': 'Sure, will do.', 'comment_created': datetime.datetime(2020, 1, 4, 6, 8, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 363018647, 'comment_body': 'On it.', 'comment_created': datetime.datetime(2020, 1, 4, 6, 8, 6, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 363018983, 'comment_body': 'On it.', 'comment_created': datetime.datetime(2020, 1, 4, 6, 17, 10, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 363163863, 'comment_body': '`along with`', 'comment_created': datetime.datetime(2020, 1, 6, 5, 37, 39, tzinfo=datetime.timezone.utc), 'commenter': 'favre49', 'type': 'User'}, {'comment_id': 363163921, 'comment_body': '`generates`', 'comment_created': datetime.datetime(2020, 1, 6, 5, 38, 6, tzinfo=datetime.timezone.utc), 'commenter': 'favre49', 'type': 'User'}, {'comment_id': 363163952, 'comment_body': '`along with`', 'comment_created': datetime.datetime(2020, 1, 6, 5, 38, 20, tzinfo=datetime.timezone.utc), 'commenter': 'favre49', 'type': 'User'}, {'comment_id': 363164037, 'comment_body': 'I think the sentence is better if we say `further segregated into fronts`', 'comment_created': datetime.datetime(2020, 1, 6, 5, 38, 47, tzinfo=datetime.timezone.utc), 'commenter': 'favre49', 'type': 'User'}, {'comment_id': 363164111, 'comment_body': 'I think you added an extra space between the . and the ""for"" there.', 'comment_created': datetime.datetime(2020, 1, 6, 5, 39, 19, tzinfo=datetime.timezone.utc), 'commenter': 'favre49', 'type': 'User'}, {'comment_id': 363164215, 'comment_body': 'Please add a full stop at the end.', 'comment_created': datetime.datetime(2020, 1, 6, 5, 40, 1, tzinfo=datetime.timezone.utc), 'commenter': 'favre49', 'type': 'User'}, {'comment_id': 363164271, 'comment_body': 'You missed a full stop at the end here.', 'comment_created': datetime.datetime(2020, 1, 6, 5, 40, 28, tzinfo=datetime.timezone.utc), 'commenter': 'favre49', 'type': 'User'}, {'comment_id': 363164644, 'comment_body': 'This goes over 80 characters', 'comment_created': datetime.datetime(2020, 1, 6, 5, 42, 16, tzinfo=datetime.timezone.utc), 'commenter': 'favre49', 'type': 'User'}, {'comment_id': 363164754, 'comment_body': 'This also goes over 80 characters.', 'comment_created': datetime.datetime(2020, 1, 6, 5, 42, 50, tzinfo=datetime.timezone.utc), 'commenter': 'favre49', 'type': 'User'}, {'comment_id': 363165137, 'comment_body': ""Why do we make sure it is a multiple of 4? If this is the case, shouldn't we perform a check for the same?"", 'comment_created': datetime.datetime(2020, 1, 6, 5, 45, 31, tzinfo=datetime.timezone.utc), 'commenter': 'favre49', 'type': 'User'}, {'comment_id': 363166044, 'comment_body': ""We normally use Info to relay important information to the user, like if an important value has been changed, that we have terminated, stuff like that. I don't think we need it for every step here."", 'comment_created': datetime.datetime(2020, 1, 6, 5, 51, 23, tzinfo=datetime.timezone.utc), 'commenter': 'favre49', 'type': 'User'}, {'comment_id': 363166144, 'comment_body': 'I think we can make this one line :)', 'comment_created': datetime.datetime(2020, 1, 6, 5, 51, 53, tzinfo=datetime.timezone.utc), 'commenter': 'favre49', 'type': 'User'}, {'comment_id': 363166371, 'comment_body': 'Couple places here where we can remove braces.', 'comment_created': datetime.datetime(2020, 1, 6, 5, 53, 30, tzinfo=datetime.timezone.utc), 'commenter': 'favre49', 'type': 'User'}, {'comment_id': 363167476, 'comment_body': 'You could remove the braces here as well.', 'comment_created': datetime.datetime(2020, 1, 6, 6, 0, 7, tzinfo=datetime.timezone.utc), 'commenter': 'favre49', 'type': 'User'}, {'comment_id': 363167671, 'comment_body': 'Should we go with `else if` to remove the additional check?', 'comment_created': datetime.datetime(2020, 1, 6, 6, 1, 13, tzinfo=datetime.timezone.utc), 'commenter': 'favre49', 'type': 'User'}, {'comment_id': 363169022, 'comment_body': ""That's interesting, I never knew `and` was a thing in C++, and now I see alternative keywords have existed since C++98! It seems that MSVC does not support this without the `/Za` compiler flag, which is apparently also buggy. Perhaps better to use the normal `&&`?"", 'comment_created': datetime.datetime(2020, 1, 6, 6, 9, 21, tzinfo=datetime.timezone.utc), 'commenter': 'favre49', 'type': 'User'}, {'comment_id': 363169077, 'comment_body': 'We could remove braces here.', 'comment_created': datetime.datetime(2020, 1, 6, 6, 9, 43, tzinfo=datetime.timezone.utc), 'commenter': 'favre49', 'type': 'User'}, {'comment_id': 363169417, 'comment_body': 'Perhaps we could just `return (ranks[idxP] < ranks[idxQ])||(ranks[idxP] == ranks[idxQ] && crowdingDistance[idxP] > crowdingDistance[idxQ])` ?', 'comment_created': datetime.datetime(2020, 1, 6, 6, 11, 48, tzinfo=datetime.timezone.utc), 'commenter': 'favre49', 'type': 'User'}, {'comment_id': 363169543, 'comment_body': 'Should we remove this?', 'comment_created': datetime.datetime(2020, 1, 6, 6, 12, 40, tzinfo=datetime.timezone.utc), 'commenter': 'favre49', 'type': 'User'}, {'comment_id': 363169772, 'comment_body': ""I don't think we need this in a test."", 'comment_created': datetime.datetime(2020, 1, 6, 6, 14, 11, tzinfo=datetime.timezone.utc), 'commenter': 'favre49', 'type': 'User'}, {'comment_id': 363169910, 'comment_body': 'Since this is a new function type we will need documentation for this as well.', 'comment_created': datetime.datetime(2020, 1, 6, 6, 15, 2, tzinfo=datetime.timezone.utc), 'commenter': 'favre49', 'type': 'User'}, {'comment_id': 363210812, 'comment_body': 'The NSGA implementation by the author mentions that it needs to be multiple of 4. See [this](http://www.iitk.ac.in/kangal/codes/nsga2/nsga2-gnuplot-v1.1.6.tar.gz) archive. The concerned filename is `nsga2r.c`.', 'comment_created': datetime.datetime(2020, 1, 6, 9, 15, 42, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 363212047, 'comment_body': 'That would entail the equality case too!', 'comment_created': datetime.datetime(2020, 1, 6, 9, 18, 59, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 363212210, 'comment_body': 'Sure.', 'comment_created': datetime.datetime(2020, 1, 6, 9, 19, 26, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 363212798, 'comment_body': 'I think it is more readable if broken down. What do you say?', 'comment_created': datetime.datetime(2020, 1, 6, 9, 21, 14, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 363213237, 'comment_body': 'Yes, removing, it anyway gets redirected to stderr.', 'comment_created': datetime.datetime(2020, 1, 6, 9, 22, 27, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 363213400, 'comment_body': 'Alright.\r\n', 'comment_created': datetime.datetime(2020, 1, 6, 9, 22, 56, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 363213455, 'comment_body': 'Will do.', 'comment_created': datetime.datetime(2020, 1, 6, 9, 23, 6, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 363216594, 'comment_body': 'Maybe I\'m missing something, but I was saying we could use `else if ((calculatedObjectives[candidateP](i) < calculatedObjectives[candidateQ](i)))` . That would only consider the ""less than"" case right? We don\'t need to perform this check if we know the former is greater than the latter.', 'comment_created': datetime.datetime(2020, 1, 6, 9, 31, 57, tzinfo=datetime.timezone.utc), 'commenter': 'favre49', 'type': 'User'}, {'comment_id': 363217076, 'comment_body': 'I suppose that is true. Remove the extra braces though.', 'comment_created': datetime.datetime(2020, 1, 6, 9, 33, 13, tzinfo=datetime.timezone.utc), 'commenter': 'favre49', 'type': 'User'}, {'comment_id': 363220048, 'comment_body': ""Do you think this is implementation specific?.  I'm not really seeing where in your code this is necessary, or why it might be the case. If it is required, we should check for it and terminate if it isn't a multiple of four."", 'comment_created': datetime.datetime(2020, 1, 6, 9, 41, 36, tzinfo=datetime.timezone.utc), 'commenter': 'favre49', 'type': 'User'}, {'comment_id': 363220672, 'comment_body': 'Sure, will do!', 'comment_created': datetime.datetime(2020, 1, 6, 9, 43, 14, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 363220962, 'comment_body': 'Oh my bad, I got you wrong. :)', 'comment_created': datetime.datetime(2020, 1, 6, 9, 43, 59, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 363258952, 'comment_body': '`> 4` is required for the generation of Pareto fronts (in crowding distance assignment) but being a multiple of 4 may be implementation-specific. I have added checks in the Optimizer for these two conditions.', 'comment_created': datetime.datetime(2020, 1, 6, 11, 35, 50, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 363505986, 'comment_body': 'Can you add one or two more functions we can use for further testing?', 'comment_created': datetime.datetime(2020, 1, 6, 22, 6, 45, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 363604059, 'comment_body': 'Sure, will do!', 'comment_created': datetime.datetime(2020, 1, 7, 6, 14, 26, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 364220442, 'comment_body': 'Marcus, I have added the Fonsec Flemming test function too.\r\nLooks like there is test failure, working on it. ', 'comment_created': datetime.datetime(2020, 1, 8, 13, 6, 8, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 364895357, 'comment_body': 'Nice, let me know if you need any help with the debug process.', 'comment_created': datetime.datetime(2020, 1, 9, 18, 32, 6, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 365101262, 'comment_body': 'Yes, thanks! :)\r\nI am adding a couple of other test functions too to see if this is a one-off error.', 'comment_created': datetime.datetime(2020, 1, 10, 7, 26, 5, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 365536902, 'comment_body': 'All the problem function we provide are mainly for testing, a user has to implement there own function that implements the necessary methods, as defined in the documentation. An optimizer parameter has the benefit that a user can switch between optimizer without adding new function to an existing problem.', 'comment_created': datetime.datetime(2020, 1, 11, 19, 6, 22, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 367367024, 'comment_body': ""So, @zoq we need to add the limits for the individual objectives as well as the objectives to the `Optimize()` call?\r\n@favre49 was suggesting that since we have a new `MultiobjectiveFunctionType`, we can add that to the docs and make sure that the user is aware of the type. What do you say?\r\n\r\nAlso, apologies I couldn't revert back earlier as I was busy."", 'comment_created': datetime.datetime(2020, 1, 16, 11, 27, 46, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 368298169, 'comment_body': ""I'm still not convinced that this should be part of a specific function API (`MultiobjectiveFunctionType`): Bounding constraints aren't multi-objective function specific, more optimizer specific, for example PSO or CMAES use bounding constraints as well:\r\n\r\nhttps://github.com/mlpack/ensmallen/blob/51614c216e43b235b97ff9059f571c8f02e3de37/include/ensmallen_bits/pso/pso.hpp#L91-L92\r\n\r\nAre you aware of any library where this is part of the function? I looked into some but couldn't see anything related. But maybe you found something?"", 'comment_created': datetime.datetime(2020, 1, 19, 14, 28, 20, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 368311989, 'comment_body': 'Oh okay, I get you now! :)\r\nI am making the necessary changes.', 'comment_created': datetime.datetime(2020, 1, 19, 18, 18, 41, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 368317465, 'comment_body': ""Okay, I'll check some more libraries as well, maybe there is something we should add, that is currently missing."", 'comment_created': datetime.datetime(2020, 1, 19, 19, 54, 4, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 368706545, 'comment_body': '@zoq I recently came across [this](https://github.com/jMetal/jMetalPy/). \r\nThe files of interest are the [nsga2 optimizer](https://github.com/jMetal/jMetalPy/blob/6fae0a31159873a4dc27f1ea4d86af03b8371733/jmetal/algorithm/multiobjective/nsgaii.py#L37) and the [zdt problem](https://github.com/jMetal/jMetalPy/blob/6fae0a31159873a4dc27f1ea4d86af03b8371733/jmetal/problem/multiobjective/zdt.py#L33) implementation.', 'comment_created': datetime.datetime(2020, 1, 20, 19, 55, 20, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 370025455, 'comment_body': 'Marcus, I have added the bounds as optimizer parameters. Please have a look! :)', 'comment_created': datetime.datetime(2020, 1, 23, 10, 0, 50, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 370039693, 'comment_body': '@favre49 I have added the docs!', 'comment_created': datetime.datetime(2020, 1, 23, 10, 29, 40, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 370874927, 'comment_body': ""Reading this, I'm wondering if another approach is to allow the user to pass multiple functions instead of one function that is basically a wrapper for multiple functions. So I could do something like:\r\n\r\n```c++\r\ntypename MatType::elem_type Optimize(FunctionTypes& functions, MatType& iterate, CallbackTypes&&... callbacks)\r\n\r\nFunctionA functionA;\r\nFunctionB functionB;\r\n\r\nOptimizer opt;\r\nopt.Optimize(functionA, functionB, ...);\r\n```\r\n\r\nThis is just an idea, let me know what you think."", 'comment_created': datetime.datetime(2020, 1, 24, 22, 44, 44, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 370914951, 'comment_body': 'Marcus, I think we can introduce the interface you propose with function overloading (using variadic args) and them wrap the functions to have the interface of a `MultiObjectiveFunctionType`. What do you say?\r\n\r\nShould we do it as a separate PR?', 'comment_created': datetime.datetime(2020, 1, 25, 5, 17, 38, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 370952236, 'comment_body': ""So this sounds like you like to support both ideas and not select one of them? I'm not sure using another parameter pack besides the callbacks pack works, but maybe we can find a solution. Maybe we should write a simple PoC and see if we can pull it off."", 'comment_created': datetime.datetime(2020, 1, 25, 19, 48, 15, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 370973819, 'comment_body': 'Yes, I was wondering the same as the compiler would not know where to break the arguments between the two variadics.\nThis ""[solution](https://stackoverflow.com/questions/15043527/two-variadic-templates-for-a-single-function)"" wraps the first set of parameters in a tuple. But that\'s basically introducing a container class (in our case, say a vector of `ArbitraryFunctionType`).', 'comment_created': datetime.datetime(2020, 1, 26, 5, 3, 27, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 371025306, 'comment_body': 'Yeah, that could be tricky, I guess we could use something like: https://stackoverflow.com/a/40610296 since we have some knowledge about the types, like the seperator is an armadillo matrix type.', 'comment_created': datetime.datetime(2020, 1, 26, 19, 55, 40, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 371071853, 'comment_body': 'Sure, I will try and get back to you. \r\nAlso, Marcus, are we incorporating the PoC in this PR itself or do we keep the present interface(`MultiObjectiveFunctionType`) for now?', 'comment_created': datetime.datetime(2020, 1, 27, 5, 54, 22, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 371494907, 'comment_body': 'Undecided, I think if we can get the other option to work it would make the interface cleaner, and also I could use the exsisting function interface, which makes it super interesting. But I can see that you like to see this merged as well, and this will involve some work to adapt the design as well.\r\n\r\nThat said, I can look into a PoC and post it here, so the adjustment if needed are minimal. Let me know what you think.', 'comment_created': datetime.datetime(2020, 1, 27, 21, 34, 44, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 371607929, 'comment_body': 'Ok, Marcus, I am working on a PoC then and will revert back ASAP. :)\r\n\r\nUsing the existing function interface makes sense especially since we no longer have the bounds as a part of the `MultiObjectiveFunctionType`.', 'comment_created': datetime.datetime(2020, 1, 28, 4, 42, 3, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 372566523, 'comment_body': ""Sounds good, I'll will also look into a solution."", 'comment_created': datetime.datetime(2020, 1, 29, 18, 51, 27, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 372568535, 'comment_body': 'Sure! Thanks Marcus. :)', 'comment_created': datetime.datetime(2020, 1, 29, 18, 55, 19, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 374965716, 'comment_body': ""I tested different ideas, but I wasn't happy with anyone, but I think what works quite well is to use a tuple for the functions, as you proposed in another comment. What do you think should we go with that idea?"", 'comment_created': datetime.datetime(2020, 2, 4, 22, 42, 57, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 375637002, 'comment_body': 'Alright, I think using a tuple would be best since it would enable the use of existing functions. I am working on the conversion.\r\n\r\nI have a question though, what do we do of the multi-objective functions that were introduced as a part of this PR?', 'comment_created': datetime.datetime(2020, 2, 6, 4, 37, 19, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 376000275, 'comment_body': ""About the objective functions, I don't see a reason to remove them they pretty much follow the existing function/problem interface, maybe just remove the `NumObjectives()` function, since there is no really any need for it anymore. Let me know what you think."", 'comment_created': datetime.datetime(2020, 2, 6, 18, 15, 45, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 376001737, 'comment_body': 'Sure, will do!', 'comment_created': datetime.datetime(2020, 2, 6, 18, 18, 43, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 376002178, 'comment_body': 'Alright, thanks!', 'comment_created': datetime.datetime(2020, 2, 6, 18, 19, 35, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 376220641, 'comment_body': 'Marcus, we are presently trying to pass each of the individual objectives in the tuple.\r\n\r\nThen, we have to break the multi-objective functions introduced to be separate distinct objectives as well. I am thinking of introducing a getter for the objectives that returns a `std::tuple` of the objectives. Although using this might render the `Evaluate()` for the multi-objective functions redundant (they can be used by the other optimizers though) as we will directly use the elements from the tuple to compute the objective.\r\n\r\nAnother solution might be to have an overload, one with the present signature (uses a single multi-objective function) and another that takes in a `std::tuple` of multiple (1+) single objective functions.\r\n\r\nWhat do you say? (I think we are going back to the initial discussion we had. 😛)  ', 'comment_created': datetime.datetime(2020, 2, 7, 5, 31, 49, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 376732397, 'comment_body': ""Not sure I get the first idea, do you have an example, to illustrate it? As long as we provide a solid documentation about the interface it's fine. So for me it's fine if we just provide:\r\n\r\n```c++\r\nvoid Optimize(std::tuple functions, arma::mat iterate, CallBackTypes... callbacks);\r\n```"", 'comment_created': datetime.datetime(2020, 2, 8, 20, 29, 53, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 376766156, 'comment_body': ""For the first idea, I meant that presently we do:\r\n```cpp\r\nSchafferFunctionN1<arma::mat> SCH;\r\nNSGA2 opt;\r\n\r\narma::mat coords = SCH.GetInitialPoint();\r\n\r\nstd::vector<arma::mat> bestFront = opt.Optimize(SCH, coords);\r\n```\r\nin the tests, instead, I am proposing something like:\r\n\r\n```cpp\r\nSchafferFunctionN1<arma::mat> SCH;\r\nNSGA2 opt;\r\n\r\narma::mat coords = SCH.GetInitialPoint();\r\nauto objectives = SCH.GetObjectives();\r\n\r\nstd::vector<arma::mat> bestFront = opt.Optimize(objectives, coords);\r\n```\r\n\r\nThis will require formulating each individual objective for the multi-objective function as `ArbitraryFunctionType`s.\r\n\r\nThe rest of the implementation (we aren't going with the overload) shouldn't take much time after this.\r\n\r\n\r\n*Edit:*\r\nTo be more verbose, what I am saying is:\r\n\r\nLet us have private structs for the implemented multi-objective functions (SCH N.1 and Fonseca Flemming) in this PR for each of the objectives like as follows:\r\n```cpp\r\nstruct ObjectiveA\r\n{\r\n  arma::Col<typename MatType::elem_type> Evaluate(const MatType& coords)\r\n  {\r\n    return something;\r\n  }\r\n} objectiveA;\r\n```\r\nand, our `GetObjectives()` method for the multi-objective function class would be something like:\r\n\r\n```cpp\r\n//! Get objective functions.\r\nstd::tuple<ObjectiveA, ObjectiveB, ...> GetObjectives()\r\n{\r\n  return std::make_tuple(objectiveA, objectiveB, ...);\r\n}\r\n```\r\nWe don't need these appendages for single objective functions as we can use their `Evaluate()` methods as is.\r\n\r\nWhat do you say, Marcus?"", 'comment_created': datetime.datetime(2020, 2, 9, 8, 53, 42, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 376802767, 'comment_body': ""This does not work. 😭 \r\n\r\nI [checked](https://en.cppreference.com/w/cpp/utility/tuple/tuple_size) quite [a](https://www.murrayc.com/permalink/2015/12/05/modern-c-variadic-template-parameters-and-tuples/) few [places](http://www.cplusplus.com/reference/tuple/tuple_size/) but I haven't been able to resolve it. "", 'comment_created': datetime.datetime(2020, 2, 9, 18, 4, 32, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 376802976, 'comment_body': 'This fails as `std::get<i>` [requires](https://thispointer.com/c11-stdtuple-tutorial-examples/) `i` to be a compile-time constant.\r\n\r\nHowever, there seems to be a solution [here](https://www.justsoftwaresolutions.co.uk/cplusplus/getting-tuple-elements-with-runtime-index.html). I will try it.', 'comment_created': datetime.datetime(2020, 2, 9, 18, 7, 51, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 376805963, 'comment_body': 'So, `GetObjectives()` is basically a wrapper around the existing functions that returns a tuple?', 'comment_created': datetime.datetime(2020, 2, 9, 18, 49, 42, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 376806340, 'comment_body': 'You can use something like:\r\n\r\n```c++\r\ntemplate<std::size_t I = 0, typename... Tp>\r\ntypename std::enable_if<I == sizeof...(Tp), void>::type\r\nEvaluate(std::tuple<Tp...>& t)\r\n{\r\n  // Nothing to do here.\r\n}\r\n\r\ntemplate<std::size_t I = 0, typename... Tp>\r\ntypename std::enable_if<I < sizeof...(Tp), void>::type\r\nEvaluate(std::tuple<Tp...>& t)\r\n{\r\n  std::get<I>(t).Evalaute(....);\r\n  Evaluate<I + 1, Tp...>(t);\r\n}\r\n\r\n\r\nEvaluate(objectives, ...);\r\n```\r\n\r\nLet me know if I should clarify anything.', 'comment_created': datetime.datetime(2020, 2, 9, 18, 55, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 376811327, 'comment_body': 'Yes, Marcus.', 'comment_created': datetime.datetime(2020, 2, 9, 20, 8, 17, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 376812125, 'comment_body': 'Ah got it!\n\nSo, when we have 0 objectives, we use the first definition and the second definition otherwise. The second definition recursively calls itself as long as objectives exist.\n\nIf I am not wrong, this is SFINAE right? I would love to read up on it! :)', 'comment_created': datetime.datetime(2020, 2, 9, 20, 19, 49, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 376869529, 'comment_body': '`sizeof...()` solved it, thanks Marcus!', 'comment_created': datetime.datetime(2020, 2, 10, 5, 2, 56, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 378531983, 'comment_body': ""You are absolutely right, C++ 17 introduces `index_sequence` which will make the construct easier, but don't think we have C++ 17 support on most of the systems in the wild."", 'comment_created': datetime.datetime(2020, 2, 12, 21, 48, 9, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 378532380, 'comment_body': 'Nice catch!', 'comment_created': datetime.datetime(2020, 2, 12, 21, 48, 59, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 378656551, 'comment_body': '`index_sequence` looks really interesting. Especially the ability to do something like [this](https://en.cppreference.com/w/cpp/utility/integer_sequence):\r\n```cpp\r\ntemplate<typename T, T... ints>\r\nvoid print_sequence(std::integer_sequence<T, ints...> int_seq)\r\n{\r\n    std::cout << ""The sequence of size "" << int_seq.size() << "": "";\r\n    ((std::cout << ints << \' \'),...);\r\n    std::cout << \'\\n\';\r\n}\r\n```\r\nwould be great for debugging (with print statements 😛)!', 'comment_created': datetime.datetime(2020, 2, 13, 5, 23, 53, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 380304989, 'comment_body': '```suggestion\r\n*An optimizer for arbitrary multi-objective functions.*\r\n```', 'comment_created': datetime.datetime(2020, 2, 17, 17, 34, 33, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 380306824, 'comment_body': ""I don't have any opposition to adding these to `ensmallen.hpp`; what do you think?"", 'comment_created': datetime.datetime(2020, 2, 17, 17, 39, 44, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 380307535, 'comment_body': ""Can you add a newline to the end of this file? :) I know, it's a pedantic comment."", 'comment_created': datetime.datetime(2020, 2, 17, 17, 41, 58, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 380309894, 'comment_body': ""I can't seem to comment during a PR review on outdated code, so I can't continue this discussion directly: https://github.com/mlpack/ensmallen/pull/149#discussion_r370874927\r\n\r\nAnyway, I'm wondering if actually it would be better to just define a `MultiObjectiveArbitraryFunction` type with the following API:\r\n\r\n```\r\nclass MultiObjectiveArbitraryFunctionType\r\n{\r\n  // Evaluate all objectives.\r\n  arma::Col<typename MatType::elem_type> Evaluate(const MatType& coordinates);\r\n  // Get the number of objectives.\r\n  size_t NumObjectives() const;\r\n  // Evaluate an individual objective. (Is this useful?)\r\n  typename MatType::elem_type Evaluate(const MatType& coordinates, const size_t objective);\r\n\r\n};\r\n```\r\n\r\nIt's not clear to me if it's more useful to have the batch `Evaluate()` or the individual `Evaluate()` (or both).  We could also create a nice utility wrapper that automatically wraps all of the objectives it's given, like `MultiObjectiveWrapper<Function1, Function2, Function3, ...>`.\r\n\r\nThen, the code here could just be\r\n\r\n```\r\narma::mat coords = SCH.GetInitialPoint();\r\n\r\nstd::vector<arma::mat> bestFront = opt.Optimize(objectives, coords);\r\n```\r\n\r\nAnyway, I think this is pretty similar to the design you and @zoq are already converging on---hopefully my thoughts are helpful here. :+1:  When we do settle on something, we'll have to update `function_types.md`.  (Also, can we open issues to add more multi-objective optimizers?  It'd be nice to have a list of multi-objective optimizers that didn't just have NSGA2 in it. :))"", 'comment_created': datetime.datetime(2020, 2, 17, 17, 48, 29, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 380743199, 'comment_body': 'Yeah, I will move them to `ensmallen.hpp`. :)', 'comment_created': datetime.datetime(2020, 2, 18, 15, 25, 41, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 380743341, 'comment_body': 'Will do!', 'comment_created': datetime.datetime(2020, 2, 18, 15, 25, 52, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 380743799, 'comment_body': 'Fixing it in the next commit.', 'comment_created': datetime.datetime(2020, 2, 18, 15, 26, 29, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 380750506, 'comment_body': 'Ryan, we came up with the tuple of objectives so that we could just pass a number of single-objective functions to the optimizer.\r\n\r\n```\r\noptimizer.Optimize(std::make_tuple(objectiveA, objectiveB, ... ), ...);\r\n```\r\nThis way, we can use the preexisting `ArbitraryFunctionType`.\r\n\r\nWe can, however, have another utility wrapper with the current API that converts multiobjective functions (say, a new type named `ArbitraryMultiObjectiveFunctionType`) into a `std::tuple` of objectives along with their corresponding lower and upper bounds. What do you say?\r\n\r\nAlso, more MO optimizers would definitely be interesting!', 'comment_created': datetime.datetime(2020, 2, 18, 15, 35, 58, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 382377052, 'comment_body': ""Sure, the `std::tuple` approach works for me; I guess I hadn't realized that there was consensus earlier.  If so I would have written a lot less. :smile:\r\n\r\nCan I ask about the plan for documenting this approach?  Mostly I want to make sure it's visible and clear to users that they can do multi-objective optimization, and that they know how they can do it. :+1:"", 'comment_created': datetime.datetime(2020, 2, 21, 3, 13, 18, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 382418157, 'comment_body': 'Yes, Ryan, presently I have just added documentation for the NSGA2 optimizer to `doc/optimizers.md` file.  I think we should, however, illustrate the usage more verbosely for multi-objective optimisation framework. We can probably add documentation for multi-objective functions in `doc/function_types.md` too! \r\n\r\nWhat do you say? 😀 ', 'comment_created': datetime.datetime(2020, 2, 21, 6, 36, 28, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 382849141, 'comment_body': 'I think that this is reasonable; I do think that we should add some documentation in `doc/function_types.md` also to cover this---I suspect that users figure out what they can optimize by looking there first. :)', 'comment_created': datetime.datetime(2020, 2, 21, 23, 13, 20, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 383145006, 'comment_body': 'On it! :)', 'comment_created': datetime.datetime(2020, 2, 24, 9, 9, 38, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 384123144, 'comment_body': 'Ryan, I have added documentation to `doc/function_types.md`, please have a look when you can! 😄 ', 'comment_created': datetime.datetime(2020, 2, 25, 21, 0, 41, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 387033605, 'comment_body': ""I think we should go with the spelling `multi-objective`, since that's what's used most places (and as far as I'm aware is  grammatically correct). There are a couple other places to fix this."", 'comment_created': datetime.datetime(2020, 3, 3, 13, 55, 36, tzinfo=datetime.timezone.utc), 'commenter': 'favre49', 'type': 'User'}, {'comment_id': 387034039, 'comment_body': 'Very picky comment, you forgot the space :)', 'comment_created': datetime.datetime(2020, 3, 3, 13, 56, 16, tzinfo=datetime.timezone.utc), 'commenter': 'favre49', 'type': 'User'}, {'comment_id': 387034266, 'comment_body': 'You have to add a space here too :)', 'comment_created': datetime.datetime(2020, 3, 3, 13, 56, 35, tzinfo=datetime.timezone.utc), 'commenter': 'favre49', 'type': 'User'}, {'comment_id': 387034474, 'comment_body': 'Evaluate', 'comment_created': datetime.datetime(2020, 3, 3, 13, 56, 56, tzinfo=datetime.timezone.utc), 'commenter': 'favre49', 'type': 'User'}, {'comment_id': 387034681, 'comment_body': 'You forgot the newline after this.', 'comment_created': datetime.datetime(2020, 3, 3, 13, 57, 17, tzinfo=datetime.timezone.utc), 'commenter': 'favre49', 'type': 'User'}, {'comment_id': 387246312, 'comment_body': 'Alright, I will make the changes! :)', 'comment_created': datetime.datetime(2020, 3, 3, 19, 33, 46, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 387246456, 'comment_body': 'Sure!', 'comment_created': datetime.datetime(2020, 3, 3, 19, 34, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 387246608, 'comment_body': 'My bad. 😛 ', 'comment_created': datetime.datetime(2020, 3, 3, 19, 34, 17, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 387246766, 'comment_body': 'Adding.', 'comment_created': datetime.datetime(2020, 3, 3, 19, 34, 34, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 387247639, 'comment_body': 'On it. ', 'comment_created': datetime.datetime(2020, 3, 3, 19, 36, 18, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 388586075, 'comment_body': 'We can remove the extra empty line here.', 'comment_created': datetime.datetime(2020, 3, 5, 21, 48, 42, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 388587516, 'comment_body': ""Can you use `{}` here, and maybe don't align the function parameter? It's somewhat difficult to read."", 'comment_created': datetime.datetime(2020, 3, 5, 21, 51, 23, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 388588150, 'comment_body': 'There are two spaces between `size  of`.', 'comment_created': datetime.datetime(2020, 3, 5, 21, 52, 41, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 388589632, 'comment_body': 'What about we print the objectives as well? Also can you use the correct punctuation, see:\r\n\r\nhttps://github.com/mlpack/ensmallen/blob/b35b5acbdcc2795d1e30b016ca6691037c3a12f5/include/ensmallen_bits/sgd/sgd_impl.hpp#L172-L173\r\n\r\nfor an example.', 'comment_created': datetime.datetime(2020, 3, 5, 21, 54, 43, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 388589951, 'comment_body': 'Missing `.` at the end, there are other lines where this applies as well.', 'comment_created': datetime.datetime(2020, 3, 5, 21, 55, 18, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 388591077, 'comment_body': 'Missing stop `.` at the end, also should this be `DEBUG`, not sure we should print that to `Info`.', 'comment_created': datetime.datetime(2020, 3, 5, 21, 57, 37, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 388592032, 'comment_body': ""Could be `const arma::umat`, to show that the parameter isn't changed."", 'comment_created': datetime.datetime(2020, 3, 5, 21, 59, 44, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 388592381, 'comment_body': '`Reset and initialize fronts.`', 'comment_created': datetime.datetime(2020, 3, 5, 22, 0, 29, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 388592739, 'comment_body': 'Missing space between the `-` and `+` operation.', 'comment_created': datetime.datetime(2020, 3, 5, 22, 1, 10, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 389245775, 'comment_body': 'Yes, I am removing the debug statements. :)', 'comment_created': datetime.datetime(2020, 3, 7, 10, 48, 51, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 389246871, 'comment_body': ""@zoq the `calculatedObjectives` holds the objectives for the entire population, will I print that?\r\n(Since it'll have entries for each of the objectives for each candidate in the population.)"", 'comment_created': datetime.datetime(2020, 3, 7, 11, 6, 20, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 392527362, 'comment_body': 'Should we just go with `are simultaneously optimised. For this class the following [...]`?', 'comment_created': datetime.datetime(2020, 3, 13, 23, 30, 48, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 392527968, 'comment_body': 'I think it makes sense to reference the ArbitraryFunction type, because what this is basically a wrapper, so we should make sure that implements the same API.\r\n\r\nAlso, looking at the implementation we actually use, `std::tuple<ArbitraryFunctionType...>`, so not sure there is need for `ArbitraryMultiObjectiveFunction` here.', 'comment_created': datetime.datetime(2020, 3, 13, 23, 34, 3, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 392528659, 'comment_body': 'Maybe it make sense to use: `const arma::vec& lowerBound` here to be consistent with the rest of the codebase.', 'comment_created': datetime.datetime(2020, 3, 13, 23, 37, 42, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 392529658, 'comment_body': 'Looks like the parameters could fit in a single line, I find this somewhat difficult to read, I guess a small change like that could help to improve the readability.', 'comment_created': datetime.datetime(2020, 3, 13, 23, 43, 5, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 392529803, 'comment_body': 'Since this is a single expression, we could probably remove the extra `{}` to improve the readability?', 'comment_created': datetime.datetime(2020, 3, 13, 23, 43, 55, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 392529914, 'comment_body': 'Can we put this behind `population.begin(),` I think it will fit on that line.', 'comment_created': datetime.datetime(2020, 3, 13, 23, 44, 32, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 392530202, 'comment_body': 'Please use camel casing for all names.', 'comment_created': datetime.datetime(2020, 3, 13, 23, 46, 11, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 392586409, 'comment_body': 'Alright, I am rephrasing it.', 'comment_created': datetime.datetime(2020, 3, 14, 12, 54, 22, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 392586523, 'comment_body': 'Alright, I am changing both the upper and lower bounds to `const arma::vec&`', 'comment_created': datetime.datetime(2020, 3, 14, 12, 56, 19, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 392586581, 'comment_body': 'Alright!', 'comment_created': datetime.datetime(2020, 3, 14, 12, 57, 20, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 392586657, 'comment_body': 'Yes, earlier I had separated each of the parameters on separate lines as it was exceeding the column count. I am removing the braces.', 'comment_created': datetime.datetime(2020, 3, 14, 12, 58, 39, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 392586669, 'comment_body': 'Sure! :)', 'comment_created': datetime.datetime(2020, 3, 14, 12, 58, 53, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 392586723, 'comment_body': ""Ok, I'm refactoring them!"", 'comment_created': datetime.datetime(2020, 3, 14, 12, 59, 36, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 392674945, 'comment_body': 'Yes true, I added this example to showcase what implementing a multi-objective function (as demonstrated in `ArbitraryMultiObjectiveFunction`) might consist of. Should I remove it?', 'comment_created': datetime.datetime(2020, 3, 15, 13, 40, 34, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 393297061, 'comment_body': 'I would remove it, just to avoid any confusion, https://github.com/mlpack/ensmallen/pull/149/files#diff-b0e728716d6532048249f3bcf1562e03R1602 works as an example.', 'comment_created': datetime.datetime(2020, 3, 16, 20, 40, 33, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 393297737, 'comment_body': ""Looks like in the other examples we don't use a tab."", 'comment_created': datetime.datetime(2020, 3, 16, 20, 41, 51, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 393299015, 'comment_body': '```suggestion\r\n   * @tparam ArbitraryFunctionType std::tuple of multiple function types.\r\n```', 'comment_created': datetime.datetime(2020, 3, 16, 20, 44, 38, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 393300656, 'comment_body': '```suggestion\r\n    for (size_t q = 0; q < populationSize; q++)\r\n```', 'comment_created': datetime.datetime(2020, 3, 16, 20, 47, 3, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 393303290, 'comment_body': 'Do you think this should be a function parameter instead?', 'comment_created': datetime.datetime(2020, 3, 16, 20, 51, 45, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 394979905, 'comment_body': 'Uhm, my thought process was the optimizer returning the best front after optimisation, if need be, we can even return all the fronts later too trivially.', 'comment_created': datetime.datetime(2020, 3, 19, 12, 11, 2, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 402058501, 'comment_body': '```suggestion\r\nsimultaneously optimized. For this variety of problems, a class/struct\r\n```', 'comment_created': datetime.datetime(2020, 4, 2, 5, 24, 29, tzinfo=datetime.timezone.utc), 'commenter': 'favre49', 'type': 'User'}, {'comment_id': 402058571, 'comment_body': '```suggestion\r\nwith a specific API must be used which is illustrated in the file\r\n```', 'comment_created': datetime.datetime(2020, 4, 2, 5, 24, 39, tzinfo=datetime.timezone.utc), 'commenter': 'favre49', 'type': 'User'}, {'comment_id': 402058988, 'comment_body': 'We can remove this newline', 'comment_created': datetime.datetime(2020, 4, 2, 5, 26, 17, tzinfo=datetime.timezone.utc), 'commenter': 'favre49', 'type': 'User'}, {'comment_id': 402059917, 'comment_body': '```suggestion\r\n * optimization problems on arbitrary functions.\r\n```', 'comment_created': datetime.datetime(2020, 4, 2, 5, 29, 32, tzinfo=datetime.timezone.utc), 'commenter': 'favre49', 'type': 'User'}, {'comment_id': 402060279, 'comment_body': 'Can we enclose this in braces and put parameters on the same line (as far as possible)?', 'comment_created': datetime.datetime(2020, 4, 2, 5, 31, 7, tzinfo=datetime.timezone.utc), 'commenter': 'favre49', 'type': 'User'}, {'comment_id': 402060747, 'comment_body': 'Can we put this and next parameter in the same line in accordance with [this](https://github.com/mlpack/mlpack/wiki/DesignGuidelines#line-length-and-wrapping) style guideline', 'comment_created': datetime.datetime(2020, 4, 2, 5, 32, 57, tzinfo=datetime.timezone.utc), 'commenter': 'favre49', 'type': 'User'}, {'comment_id': 402060943, 'comment_body': 'Can we enclose this in braces?', 'comment_created': datetime.datetime(2020, 4, 2, 5, 33, 39, tzinfo=datetime.timezone.utc), 'commenter': 'favre49', 'type': 'User'}, {'comment_id': 402061054, 'comment_body': ""Let's enclose this in braces too"", 'comment_created': datetime.datetime(2020, 4, 2, 5, 34, 5, tzinfo=datetime.timezone.utc), 'commenter': 'favre49', 'type': 'User'}, {'comment_id': 402300549, 'comment_body': '```suggestion\r\n    ([#149](https://github.com/mlpack/ensmallen/pull/149)).\r\n```\r\n:)', 'comment_created': datetime.datetime(2020, 4, 2, 13, 11, 39, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 402301978, 'comment_body': ""Can we put this section just after the other function types?  Right now it's after `Alternate matrix types`, which isn't a function type.  I think it would make sense to put it above `Alternate matrix types`, either right after `Semidefinite programs` or possibly before `Constrained functions` (to me it doesn't matter too much which)."", 'comment_created': datetime.datetime(2020, 4, 2, 13, 13, 52, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 402303455, 'comment_body': ""Can you add the details here, in the same way that they exist for the other function types?  e.g., a clear description of what a multi-objective function is (mathematically) and what it means to optimize them simultaneously, plus a full description of the API and an example implementation of a function.  I know it's a lot to write, but I think it's really important that we get the documentation right.  Unclear documentation (or documentation that forces users to go digging in the source) is probably going to mean that users don't actually use the functionality, and I want to make sure the multi-objective optimizers you (and others) are implementing get widespread usage. :smile:"", 'comment_created': datetime.datetime(2020, 4, 2, 13, 16, 2, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 402304027, 'comment_body': 'It might be nice to wrap these long lines to 80 characters. :+1:', 'comment_created': datetime.datetime(2020, 4, 2, 13, 16, 57, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 402304927, 'comment_body': 'Can we be explicit about the type here?  In the documentation, just using `auto` might be confusing to users.  (They\'ll wonder ""ok, what is it?"" then have to go digging to find out.)', 'comment_created': datetime.datetime(2020, 4, 2, 13, 18, 21, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 402452558, 'comment_body': ""Sure, I'll get to it right away. :)"", 'comment_created': datetime.datetime(2020, 4, 2, 16, 37, 9, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 402453268, 'comment_body': ""Ah, I had an oversight on my part that the documentation in markdown files didn't follow the style guide. I'm changing them. "", 'comment_created': datetime.datetime(2020, 4, 2, 16, 38, 13, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 402453772, 'comment_body': 'Sure, on it.', 'comment_created': datetime.datetime(2020, 4, 2, 16, 39, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 402454092, 'comment_body': 'Okay, on it.', 'comment_created': datetime.datetime(2020, 4, 2, 16, 39, 32, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 405351564, 'comment_body': 'It seems we can remove this newline', 'comment_created': datetime.datetime(2020, 4, 8, 8, 34, 17, tzinfo=datetime.timezone.utc), 'commenter': 'favre49', 'type': 'User'}, {'comment_id': 405356215, 'comment_body': 'Could we align the parameters here as well?', 'comment_created': datetime.datetime(2020, 4, 8, 8, 41, 47, tzinfo=datetime.timezone.utc), 'commenter': 'favre49', 'type': 'User'}, {'comment_id': 439869425, 'comment_body': '```suggestion\r\n  const double tolerance = 1e-6;\r\n```', 'comment_created': datetime.datetime(2020, 6, 14, 21, 30, 19, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 439869468, 'comment_body': '```suggestion\r\n  NSGA2 opt(20, 4000, 0.5, 0.5, strength, tolerance, lowerBound, upperBound);\r\n```\r\n\r\nTo accelerate the test runtime.', 'comment_created': datetime.datetime(2020, 6, 14, 21, 30, 54, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 439869507, 'comment_body': '```suggestion\r\n  const double expectedLowerBound = -1.0 / sqrt(3);\r\n  const double expectedUpperBound = 1.0 / sqrt(3);\r\n```\r\n\r\nMinor style fix.', 'comment_created': datetime.datetime(2020, 6, 14, 21, 31, 22, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 439869527, 'comment_body': '```suggestion\r\n  bool allInRange = true;\r\n```\r\nMinor style fix.', 'comment_created': datetime.datetime(2020, 6, 14, 21, 31, 43, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 439869538, 'comment_body': '```suggestion\r\n      allInRange = false;\r\n```\r\n\r\nMinor style fix.', 'comment_created': datetime.datetime(2020, 6, 14, 21, 31, 56, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 439869636, 'comment_body': '```suggestion\r\n  for(size_t i = 0; i < bestFront.size(); i++)\r\n  {\r\n    const arma::mat solution = bestFront[i];\r\n    double valX = arma::as_scalar(solution(0));\r\n```', 'comment_created': datetime.datetime(2020, 6, 14, 21, 32, 56, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 439869707, 'comment_body': '```suggestion\r\n  REQUIRE(allInRange);\r\n```\r\n\r\nMinor style fix.', 'comment_created': datetime.datetime(2020, 6, 14, 21, 33, 40, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 439869730, 'comment_body': '```suggestion\r\n  bool allInRange = true;\r\n```\r\nMinor style fix.', 'comment_created': datetime.datetime(2020, 6, 14, 21, 34, 1, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 439869766, 'comment_body': '```suggestion\r\n  REQUIRE(allInRange);\r\n```\r\n\r\nMinor style fix.', 'comment_created': datetime.datetime(2020, 6, 14, 21, 34, 29, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 439869929, 'comment_body': '```suggestion\r\n  // Generate the population based on a uniform distribution around the given\r\n```', 'comment_created': datetime.datetime(2020, 6, 14, 21, 36, 22, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 439870231, 'comment_body': ""```suggestion\r\n        iterate.n_cols) - 0.5 + iterate);\r\n```\r\n\r\nAccording to https://arxiv.org/pdf/1901.00577.pdf it's easy for NSGA2 to fall into a local optimum, especially if the initial population isn't good. There are various strategies we could implement to compensate for that, in my tests the fix is quite stable."", 'comment_created': datetime.datetime(2020, 6, 14, 21, 40, 24, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 440482667, 'comment_body': '```suggestion\r\n    ([#149](https://github.com/mlpack/ensmallen/pull/149)).\r\n    \r\n```\r\n\r\nSuper simple suggestion, just spacing out the lines. :)', 'comment_created': datetime.datetime(2020, 6, 15, 22, 30, 56, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 440482825, 'comment_body': ""```suggestion\r\nHowever, when an optimizer's Optimize() method is called, two additional\r\n```\r\nActually I think this was correct before. :)"", 'comment_created': datetime.datetime(2020, 6, 15, 22, 31, 22, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 440483193, 'comment_body': ""```suggestion\r\nsimultaneously optimized to reach an optimum.\r\n```\r\nI know I am being pedantic---`optimum` is the single form, `optima` is plural.  Or, maybe, this should be `optima` since it's multiple objective optimization?  I guess, in this case, since it's plural, it would be `optima` not `an optima`?  I'm not sure what the intent is, so maybe my comment isn't helpful. :)"", 'comment_created': datetime.datetime(2020, 6, 15, 22, 32, 28, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 440487653, 'comment_body': 'To follow up on @zoq\'s [comment](https://github.com/mlpack/ensmallen/pull/149#discussion_r392527968), my understanding is that it\'s sufficient to simply pass a `std::tuple<ArbitraryFunctionType1, ArbitraryFunctionType2, ...>` to a multi-objective optimizer.  That\'s really nice because it\'s very low-overhead, and we can simply supply the example that @zoq linked to here: https://github.com/mlpack/ensmallen/pull/149/files#diff-b0e728716d6532048249f3bcf1562e03R1602\r\n\r\nI think it might be clearer if we replaced this example with another example that just strings together a couple arbitrary functions:\r\n\r\n```\r\nIn order to optimize a multi-objective function with ensmallen, a `std::tuple<>`\r\ncontaining multiple `ArbitraryFunctionType`s ([see here](#arbitrary-functions))\r\nshould be passed to a multi-objective optimizer\'s `Optimize()` function.\r\n\r\nAn example below simultaneously optimizes the generalized Rosenbrock function\r\nin 6 dimensions and the Wood function using [NSGA2](#nsga2).\r\n\r\n<details open>\r\n<summary>Click to collapse/expand example code.\r\n</summary>\r\n\r\nGeneralizedRosenbrockFunction rf(6);\r\nWoodFunction wf;\r\nstd::tuple<GeneralizedRosenbrockFunction, WoodFunction> objectives(rf, wf);\r\n\r\n// Create an initial point (a random point in 6 dimensions).\r\narma::mat initialPoint(6, 1, arma::fill::randu);\r\n\r\nNSGA2 optimizer;\r\nstd::vector<arma::mat> bestFront = optimizer.Optimize(initialPoint, coordinates);\r\n```\r\n\r\nI probably got the anchor links wrong there though, and I didn\'t test the code (I think it will work?).  It\'s just an idea---let me know what you think. My hope is just to provide the simplest possible documentation to users, so that they see that all they need is a `std::tuple<>` of arbitrary functions and then they think ""oh great, this is easy!"". Hopefully, at least. :)', 'comment_created': datetime.datetime(2020, 6, 15, 22, 45, 20, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 440487725, 'comment_body': 'Thanks for finding these little issues! :+1:', 'comment_created': datetime.datetime(2020, 6, 15, 22, 45, 35, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 440488060, 'comment_body': '```suggestion\r\n * [Multi-objective Functions in Wikipedia](https://en.wikipedia.org/wiki/Test_functions_for_optimization#Test_functions_for_multi-objective_optimization)\r\n  * [Multi-objective functions](#multi-objective-functions)\r\n```\r\nI think I got the anchor link right?', 'comment_created': datetime.datetime(2020, 6, 15, 22, 46, 31, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 440489695, 'comment_body': 'It looks like `Optimize()` here differs from other ensmallen optimizers in that it returns the best front, not the objective.  Do you think we should point that out in the multi-objective optimizers section?', 'comment_created': datetime.datetime(2020, 6, 15, 22, 51, 43, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 440490023, 'comment_body': ""I could see it either way---it matches the rest of the ensmallen optimizers better if it returns an objective value, but I'm not sure how feasible that is.  In either case, where it differs from the rest of the ensmallen optimizers I think that we should point that out in the documentation for sure. :)"", 'comment_created': datetime.datetime(2020, 6, 15, 22, 52, 48, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 453804941, 'comment_body': 'Hi @say4n, I am trying to implement MOEA/D using this PR as a reference and I have a doubt here, is `idx < numObjectives` correct? It is not necessary that the dimensions of the variable space and objective space are same. Sorry if I am missing something obvious.', 'comment_created': datetime.datetime(2020, 7, 13, 17, 16, 47, tzinfo=datetime.timezone.utc), 'commenter': 'UtR491', 'type': 'User'}, {'comment_id': 454343080, 'comment_body': 'Here, each gene of the child corresponds to a single objective. ', 'comment_created': datetime.datetime(2020, 7, 14, 13, 8, 55, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 454366196, 'comment_body': 'So an element of the population is not the coordinates of the point, but values of the objectives at that point?', 'comment_created': datetime.datetime(2020, 7, 14, 13, 44, 8, tzinfo=datetime.timezone.utc), 'commenter': 'UtR491', 'type': 'User'}, {'comment_id': 454388137, 'comment_body': 'Erm no, let me rephrase, the child contains the coordinates but there is a 1:1 correspondence to the coordinates and the objectives. You, use each of the coordinates to evaluate the objectives for each of the children.', 'comment_created': datetime.datetime(2020, 7, 14, 14, 14, 49, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 454399894, 'comment_body': '![c62e08ff7fa8999da75995c45b4d816a](https://user-images.githubusercontent.com/64355352/87437382-dd6bf080-c60b-11ea-898c-9e2758b7f03e.jpg)\r\nI think there is some miscommunication here. By ""coordinates of the point"", I mean ""x belonging to S"", i.e. the variable space, but you mean ""F"", i.e. the objective space. Is this right?', 'comment_created': datetime.datetime(2020, 7, 14, 14, 30, 41, tzinfo=datetime.timezone.utc), 'commenter': 'UtR491', 'type': 'User'}, {'comment_id': 454422193, 'comment_body': 'Wait. Each child has n (`numObjectives` here) number of m-vectors, each corresponding to an objective. Each of these m dimensions correspond to variables that each of the objectives require. For example, the [Fonseca-Flemming](https://github.com/say4n/ensmallen/blob/75ae7efbc4f1ce0e99164d576d5fa595cc6ab3a4/include/ensmallen_bits/problems/fonseca_flemming_function.hpp#L42) function has 2 objectives, each requiring 3 variables. ', 'comment_created': datetime.datetime(2020, 7, 14, 14, 59, 22, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 454478781, 'comment_body': 'Ahh! I get it now. Thank you for patiently answering my doubts. Really appreciated!', 'comment_created': datetime.datetime(2020, 7, 14, 16, 19, 44, tzinfo=datetime.timezone.utc), 'commenter': 'UtR491', 'type': 'User'}, {'comment_id': 454490119, 'comment_body': 'Not a problem, always a pleasure! 😄 ', 'comment_created': datetime.datetime(2020, 7, 14, 16, 37, 1, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 454491795, 'comment_body': 'Sure, I shall add it.', 'comment_created': datetime.datetime(2020, 7, 14, 16, 39, 37, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 454598111, 'comment_body': '```suggestion\r\n        return 1.0f - exp(- pow(coords[0] + 1.0f / sqrt(3), 2) -\r\n            - pow(coords[1] + 1.0f / sqrt(3), 2)\r\n            - pow(coords[2] + 1.0f / sqrt(3), 2));\r\n```\r\n\r\nSuper pedantic style issue from my side.', 'comment_created': datetime.datetime(2020, 7, 14, 19, 39, 43, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 454598244, 'comment_body': '```suggestion\r\n        return 1.0f - exp(- pow(coords[0] - 1.0f / sqrt(3), 2) -\r\n            - pow(coords[1] - 1.0f / sqrt(3), 2)\r\n            - pow(coords[2] - 1.0f / sqrt(3), 2));\r\n```\r\nSuper pedantic style issue from my side.', 'comment_created': datetime.datetime(2020, 7, 14, 19, 39, 59, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 454646977, 'comment_body': '```suggestion\r\n  for (size_t i = 0; i < bestFront.size(); i++)\r\n```\r\n\r\nJust one more minor style issue.', 'comment_created': datetime.datetime(2020, 7, 14, 21, 9, 52, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 454650300, 'comment_body': ""Correct me if I'm wrong but it looks like you haven't adapted the doc, so maybe it's easier to return a combined objective here, and provide another function called `Front` to access the best front, that way it matches the rest of the codebase and we don't have to point that out in the documentation. Let me know what you think, if you like I can provide a patch for the changes as well."", 'comment_created': datetime.datetime(2020, 7, 14, 21, 16, 21, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 455937823, 'comment_body': 'Hm, I was thinking we could take the same over the objectives, in which case we should also provide a method `Objectives` to return the objectives in a vector.', 'comment_created': datetime.datetime(2020, 7, 16, 17, 4, 48, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 455941933, 'comment_body': 'Hi @say4n sorry to bother you again. I thought I understood what you said but I am stuck again. I added lines to print the size of `child` and `lowerBound` just before this loop and the output for fonseca and flemming function was,\r\n```\r\nSize of child 3x1\r\nSize of lower bound, should be same as child 2x1\r\n``` \r\nX4000\r\nWhile the output makes complete sense to me, I fail to understand how is comparing vectors of different sizes right? If number of objectives is greater than the number of variables, there will be an `indexOutOfBounds` exception and if it is less how will we ensure that the later indices of child are within bounds?\r\nSorry again if I am missing something obvious.', 'comment_created': datetime.datetime(2020, 7, 16, 17, 11, 38, tzinfo=datetime.timezone.utc), 'commenter': 'UtR491', 'type': 'User'}, {'comment_id': 456052564, 'comment_body': ""I don't think I understand your comment. Erm, Marcus could you please explain it further. 😅\r\n\r\nDon't know if this is helpful here, but, `objectives` here is supplied by the user while calling `Optimize()`."", 'comment_created': datetime.datetime(2020, 7, 16, 20, 18, 8, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 456056120, 'comment_body': 'Ah, so the thing is you only have bounds stored per objective (to avoid duplication). If you n-objectives, you will have n corresponding upper and lower bounds. You can see the definitions of the bounds [here](https://github.com/say4n/ensmallen/blob/3c6aa81ca4a234bac8b49ff4ce595d3cf0e55282/tests/nsga2_test.cpp#L39) and [here](https://github.com/say4n/ensmallen/blob/3c6aa81ca4a234bac8b49ff4ce595d3cf0e55282/tests/nsga2_test.cpp#L81) for Schaffer N.1 and Fonseca Flemming functions respectively.\r\n\r\nEach child has a 3 elements for the case you cited because each of the objectives in Fonseca Flemming function are tri-variate. Each of these three variables must lie within lowerBound(i) and upperBound(i) for the i-th objective (there are 2 in this case, so i is either 0 or 1).', 'comment_created': datetime.datetime(2020, 7, 16, 20, 24, 51, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 456113001, 'comment_body': 'I was referring to the loss, the idea is to also return a single double, does that make sense?', 'comment_created': datetime.datetime(2020, 7, 16, 22, 26, 35, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 456277611, 'comment_body': ""Sorry again, but I think I am not able to grasp what you are saying. If,\r\n\r\n>  Each of these three variables must lie within lowerBound(i) and upperBound(i) for the i-th objective\r\n\r\nwill it not be sufficient to have one lowerBound (the biggest element in `lowerBound` array) variable and one upperBound (the smallest in `upperBound` array) variable. I am also not comfortable with the idea of comparing  `child[idx]` with `lowerBound(idx)` only, don't we need to make sure `child[idx]` is greater than all elements in `lowerBound` (or the greatest element in `lowerBound`). Also, what will happen when number of objectives is greater than the number of variables. Wouldn't having `lowerBound` and `upperBound` per variable make more sense? No matter how hard I try, I am not able to wrap my head around this concept, any help would be greatly appreciated. Thanks!"", 'comment_created': datetime.datetime(2020, 7, 17, 7, 49, 3, tzinfo=datetime.timezone.utc), 'commenter': 'UtR491', 'type': 'User'}, {'comment_id': 456288137, 'comment_body': ""Ah, uhm since we have multi objectives, we have to reduce the individual values from each objective, right? Also, I don't know of any indicator that can summarise the 'fitness' of the entire population (like the loss does in an ANN). \r\n\r\nWhat do you suggest?"", 'comment_created': datetime.datetime(2020, 7, 17, 8, 9, 48, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 456291722, 'comment_body': ""> I am also not comfortable with the idea of comparing child[idx] with lowerBound(idx) only, don't we need to make sure child[idx] is greater than all elements in lowerBound\r\n\r\nThe author's implementation of NSGA2 clips the variable in between the bounds. Which is what has been done [here](https://github.com/say4n/ensmallen/blob/3c6aa81ca4a234bac8b49ff4ce595d3cf0e55282/include/ensmallen_bits/nsga2/nsga2_impl.hpp#L258) post mutation.\r\n\r\n> What will happen when number of objectives is greater than the number of variables.\r\n\r\nIt doesn't matter since the bounds have been set per objective by the author. If you need them per variable, it is trivial to add it yourself. 😄 "", 'comment_created': datetime.datetime(2020, 7, 17, 8, 16, 53, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 456326972, 'comment_body': 'Just to make sure that I get it, in the paper there is an example in table 5 called WATER with 5 objectives and 3 variables. The constraints on each variable is different, x1 lies between 0.01 and 0.45 and x2 and x3 lie between 0.01 and 0.10. What will be the lowerBound and upperBound arrays in this particular example? I sincerely thank you for taking time to clarify this for me.', 'comment_created': datetime.datetime(2020, 7, 17, 9, 23, 21, tzinfo=datetime.timezone.utc), 'commenter': 'UtR491', 'type': 'User'}, {'comment_id': 456375694, 'comment_body': ""What paper are you talking of? (You'd have to follow a different structure for a different optimiser!)\r\n\r\nFor a different optimiser you can have per variable bounds, thats upto your discretion."", 'comment_created': datetime.datetime(2020, 7, 17, 11, 6, 40, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 456377344, 'comment_body': '[This](https://www.google.com/url?sa=t&source=web&rct=j&url=https://www.iitk.ac.in/kangal/Deb_NSGA-II.pdf&ved=2ahUKEwiI_J32ktTqAhWJXSsKHawzC3MQFjAPegQIARAB&usg=AOvVaw1BcJVhQKdt9xbdiQerMtR0). The paper on NSGA2. Actually I thought, if there are many multi objective optimizers, they should all look same from the outside.', 'comment_created': datetime.datetime(2020, 7, 17, 11, 10, 45, tzinfo=datetime.timezone.utc), 'commenter': 'UtR491', 'type': 'User'}, {'comment_id': 456378208, 'comment_body': ""Ah, so as we found out, per variable bounds haven't been added to this PR. :)\r\nAlso keep in mind, the table you talk of is for constrained problems, we aren't handling those (in this PR)!\r\n\r\nI hope that answers your question, feel free to submit a PR with additions (once this gets merged)."", 'comment_created': datetime.datetime(2020, 7, 17, 11, 13, 4, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 458467724, 'comment_body': 'I think that to match the API of the rest of the optimizers, it could be just fine to return a sum of the objectives, and then also perhaps provide an overload like\r\n\r\n```\r\ntypename MatType::elem_type Optimize(\r\n    std::tuple<ArbitraryFunctionType...>& objectives,\r\n    MatType& iterate,\r\n    arma::Col<typename MatType::elem_type>& finalObjectives,\r\n    CallbackTypes... callbacks);\r\n```\r\n\r\nand in this case `finalObjectives` will be filled with the final objective value.  What do you think?', 'comment_created': datetime.datetime(2020, 7, 22, 0, 41, 4, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 458628639, 'comment_body': ""Ah, I get it now. Sure, I'm looking into it."", 'comment_created': datetime.datetime(2020, 7, 22, 8, 35, 21, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 459448134, 'comment_body': '@rcurtin just to be sure, `calculatedObjectives` is of type `std::vector<arma::Col<MatType::elem_type>>` and we are reduces them by addition across the vector, right? \r\n\r\nBut, this will yield a `arma::Col<MatType::elem_type>` instead of the `MatType::elem_type` you suggested.\r\n\r\nHow do we get past this?', 'comment_created': datetime.datetime(2020, 7, 23, 13, 27, 52, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 459456797, 'comment_body': ""I'm not sure why the original return type you had was `std::vector<arma::Col<double>>`.  If that is supposed to be the objective value at the final iterate position for each individual objective function, shouldn't that just be `arma::Col<typename MatType::elem_type>`?  In any case, if you do have an `arma::Col` that contains all of the individual objective values, then you can just return `accu()` over that column vector.  Let me know if I missed something."", 'comment_created': datetime.datetime(2020, 7, 23, 13, 40, 43, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 459467824, 'comment_body': 'I was returning `std::vector<arma::Col<double>>` as it contained the evaluated objectives for all children across all objectives. So the vector was for each child in the population and then the column vector was for the multiple objectives.', 'comment_created': datetime.datetime(2020, 7, 23, 13, 55, 26, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 459478465, 'comment_body': 'When we call `Optimize()`, the user expects that ""the best"" coordinates are stored in the `MatType& iterate` parameter.  So in this sense the `Optimize()` function is a black-box interface in which you put a set of objective functions and get back one ""best"" coordinate.  So we should not return any information about all of the children in the population, just the best result.  Does that make sense?  Did I overlook anything?', 'comment_created': datetime.datetime(2020, 7, 23, 14, 9, 47, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 459480756, 'comment_body': 'Erm, in NSGA2, the algorithm outputs a set of ""best"" coordinates, not a single coordinate. Will I store a random (or, say the first) sample from this set in `MatType& iterate`?\r\n\r\n(I\'m setting it to the first coordinate from this set of coordiantes in the best front, temporarily, we can change this later if required.)', 'comment_created': datetime.datetime(2020, 7, 23, 14, 12, 55, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 459597041, 'comment_body': ""The first one is reasonable to me, we should still provide a method to access all, but that's easy to add."", 'comment_created': datetime.datetime(2020, 7, 23, 17, 3, 3, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 459597292, 'comment_body': 'Btw. thanks for keeping up with all the comments.', 'comment_created': datetime.datetime(2020, 7, 23, 17, 3, 30, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 459606534, 'comment_body': ""Marcus, the entire set of coordinates in the Pareto front are accessible using `Front()`.\r\nAlso, it's been a pleasure working with all of you! 😄 "", 'comment_created': datetime.datetime(2020, 7, 23, 17, 19, 18, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 459779270, 'comment_body': ""Ahh, right, I see what you mean.  It should definitely be possible to recover all the coordinates on the Pareto frontier (by the way should we call that `Frontier()`?  I'm not sure what the more commonly used terminology is.).\r\n\r\nFor each set of coordinates on the Pareto front, there are an associated set of objective values with each objective function.  So your choice to provide a `std::vector<arma::Col<typename MatType::elem_type>>` now makes sense to me---the `std::vector<>` wraps each set of coordinates in the Pareto frontier, and then the `arma::Col<>` holds the objective of every individual objective function associated with that set of coordinates.\r\n\r\nSo you can see that we can take the sum of each of those `arma::Col<typename MatType::elem_type>`s in order to produce a single `typename MatType::elem_type`, whose value is just the sum of all objectives for a given set of coordinates.  But if we want to return a single element representing how good the optimization was from `Optimize()`, then perhaps it makes sense to take the minimum of that summation across all sets of coordinates?  I'm not sure what the best option here.  It seems like that quantity could be useful as an indicator of how successful the optimization was.\r\n\r\nOverall, my hope is to maximize the similarity to all of the other `Optimize()` functions from all other optimizer types; if I overlooked something or if my suggestion doesn't make sense from the perspective of the multi-objective optimization literature, then we don't have to go with it. :smile:"", 'comment_created': datetime.datetime(2020, 7, 23, 23, 17, 31, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 459877802, 'comment_body': ""> (by the way should we call that Frontier()? I'm not sure what the more commonly used terminology is.).\r\n\r\nAll these terms are used interchangeably. Should we provide aliases?\r\n\r\n> But if we want to return a single element representing how good the optimization was from Optimize(), then perhaps it makes sense to take the minimum of that summation across all sets of coordinates?\r\n\r\nSure, this makes sense. 😃 \r\n\r\n\r\nAlso, Ryan, are the AppVeyor builds manually triggered?"", 'comment_created': datetime.datetime(2020, 7, 24, 6, 44, 18, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 460578092, 'comment_body': ""Hey @say4n, if you're willing, do you think you can handle this comment before merge?  Thanks! :+1:\r\n\r\nI guess we should update the last lines a bit, from\r\n\r\n```\r\n// Create an initial point (a random point in 6 dimensions).\r\narma::mat initialPoint(6, 1, arma::fill::randu);\r\n\r\nNSGA2 optimizer;\r\nstd::vector<arma::mat> bestFront = optimizer.Optimize(initialPoint, coordinates);\r\n```\r\n\r\nto\r\n\r\n```\r\n// Create an initial point (a random point in 6 dimensions).\r\narma::mat coordinates(6, 1, arma::fill::randu);\r\n\r\n// `coordinates` will be set to the coordinates on the best front that minimize the\r\n// sum of objective functions, and `bestFrontSum` will be the sum of all objectives\r\n// at that coordinate set.\r\ndouble bestFrontSum = Optimize(objectives, coordinates);\r\n// Set `bestFront` to contain all of the coordinates on the best front.\r\nstd::vector<arma::mat> bestFront = optimizer.Front();\r\n```\r\n\r\nMaybe the wording or description could be improved---feel free to modify if you like. :+1:"", 'comment_created': datetime.datetime(2020, 7, 26, 21, 55, 49, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 460578183, 'comment_body': ""```suggestion\r\n// obj will contain the minimum sum of objectiveA and objectiveB found on the best front.\r\ndouble obj = opt.Optimize(objectives, coords);\r\n```\r\nMaybe it's useful to clarify what `obj` is?  Let me know what you think. :+1:"", 'comment_created': datetime.datetime(2020, 7, 26, 21, 56, 49, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 460578661, 'comment_body': 'Maybe we should add something like...\r\n\r\n```\r\n*Note*: all multi-objective function optimizers have both the function `Optimize()` to find the\r\nbest front, and also the function `Front()` to return all sets of coordinates that are on the\r\nfront.\r\n```', 'comment_created': datetime.datetime(2020, 7, 26, 22, 1, 53, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 460578844, 'comment_body': ""Could we also add something to this quick description like this?\r\n\r\n```\r\nA multi-objective optimizer does not return just one set of coordinates at the\r\nminimum of all objective functions, but instead finds a *front* or *frontier* of\r\npossible coordinates that are Pareto-optimal (that is, no individual objective\r\nfunction's value can be reduced without increasing at least one other\r\nobjective function).\r\n```\r\n\r\nI don't know if that's the best description, feel free to change it. :+1:\r\n```"", 'comment_created': datetime.datetime(2020, 7, 26, 22, 3, 58, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 460579057, 'comment_body': '```suggestion\r\n typename MatType::elem_type Optimize(std::tuple<ArbitraryFunctionType...>& objectives,\r\n                                      MatType& iterate,\r\n                                      CallbackTypes&&... callbacks);\r\n```\r\nJust a little style fix. :)', 'comment_created': datetime.datetime(2020, 7, 26, 22, 6, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 460579109, 'comment_body': '```suggestion\r\n  //! Retrieve the best front (the Pareto frontier).  This returns an empty vector until `Optimize()`\r\n  //! has been called.\r\n```', 'comment_created': datetime.datetime(2020, 7, 26, 22, 6, 36, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 460760687, 'comment_body': ""Alright, I'm adding it!"", 'comment_created': datetime.datetime(2020, 7, 27, 9, 24, 3, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 460761539, 'comment_body': 'Sure, on it!', 'comment_created': datetime.datetime(2020, 7, 27, 9, 25, 30, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 462231769, 'comment_body': 'Hey @UtR491, I was wrong regarding the upper and lower bounds. I do have per variable bounds in this PR itself, I had forgotten to add the bound for the third variable for Foseca Flemming. 😭 ', 'comment_created': datetime.datetime(2020, 7, 29, 11, 34, 8, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 462532442, 'comment_body': 'This line is missing the optimizer.', 'comment_created': datetime.datetime(2020, 7, 29, 19, 22, 14, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 462534161, 'comment_body': '```suggestion\r\n| `arma::vec` | **`upperBound`** | Upper bound of the coordinates of the initial population. | `1` |\r\n```', 'comment_created': datetime.datetime(2020, 7, 29, 19, 25, 18, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 462534597, 'comment_body': 'Wondering if we should use 0, 1 as a default for the lower and upper bound?', 'comment_created': datetime.datetime(2020, 7, 29, 19, 26, 11, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 462536167, 'comment_body': '```suggestion\r\n * to non-dominated-sorting and crowding distance comparison.\r\n```\r\n\r\nI think you can also go with nondominatedsorting, but I think this is easier to read?', 'comment_created': datetime.datetime(2020, 7, 29, 19, 29, 4, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 462537556, 'comment_body': 'This is now the accumulated sum over the objective values.', 'comment_created': datetime.datetime(2020, 7, 29, 19, 31, 28, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 462538433, 'comment_body': '```suggestion\r\n        return 1.0f - exp(-pow(coords[0] + 1.0f / sqrt(3), 2) -\r\n```', 'comment_created': datetime.datetime(2020, 7, 29, 19, 33, 7, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 462538517, 'comment_body': '```suggestion\r\n        return 1.0f - exp(-pow(coords[0] - 1.0f / sqrt(3), 2) -\r\n```', 'comment_created': datetime.datetime(2020, 7, 29, 19, 33, 17, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 462540573, 'comment_body': 'I guess an alternative approach is to print out a warning and increase the `populationSize` accordingly, nothing we have to change here, I guess that applies to some other methods as well.', 'comment_created': datetime.datetime(2020, 7, 29, 19, 36, 59, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 462541105, 'comment_body': '```suggestion\r\n\r\n```\r\n\r\nJust remove the extra line here.', 'comment_created': datetime.datetime(2020, 7, 29, 19, 38, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 462545492, 'comment_body': 'Right, I guess something like this suggestion could work:\r\n\r\n```suggestion\r\nNSGA2 nsga;\r\ndouble bestFrontSum = nsga.Optimize(objectives, coordinates);\r\n```\r\n\r\nI think that could work, correct me if I overlooked something. :+1:', 'comment_created': datetime.datetime(2020, 7, 29, 19, 46, 16, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 462545844, 'comment_body': '```suggestion\r\n```\r\nNo need for the extra line here. :smile:', 'comment_created': datetime.datetime(2020, 7, 29, 19, 46, 57, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 462545991, 'comment_body': ""I'd agree, `non-dominated-sorting` seems easier to understand to me."", 'comment_created': datetime.datetime(2020, 7, 29, 19, 47, 17, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 462546409, 'comment_body': 'Ah, I think maybe we should; I guess that with this default, the coordinates of the initial population are only going to be `ones`?', 'comment_created': datetime.datetime(2020, 7, 29, 19, 48, 7, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 462546859, 'comment_body': '```suggestion\r\ntypename MatType::elem_type NSGA2::Optimize(\r\n    std::tuple<ArbitraryFunctionType...>& objectives,\r\n    MatType& iterate,\r\n    CallbackTypes&&... callbacks)\r\n```\r\nSimple style fix---the line was too long. :)', 'comment_created': datetime.datetime(2020, 7, 29, 19, 49, 5, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 462547362, 'comment_body': 'Do we have to handle `terminate` here?  (And for the other callbacks too?)', 'comment_created': datetime.datetime(2020, 7, 29, 19, 50, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 462548231, 'comment_body': ""Also, are these coordinates of the initial population, or are they constraints on the coordinates of the whole population during the search process?  If it's the latter, then we should probably clarify in the documentation that `lowerBound` and `upperBound` really need to be set for the technique to operate as intended."", 'comment_created': datetime.datetime(2020, 7, 29, 19, 51, 36, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 462552610, 'comment_body': ""Good point, usually we take a step at the end, so the for loop will terminate right after that, but in this case we don't."", 'comment_created': datetime.datetime(2020, 7, 29, 19, 59, 50, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 462571477, 'comment_body': ""Ahhhh, good point, I overlooked the `!terminate` in the for loop.  That's what all the other optimizers do, so I don't see a problem with just doing that here.  Maybe we could open some other issue to handle that if we wanted."", 'comment_created': datetime.datetime(2020, 7, 29, 20, 33, 56, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 462815433, 'comment_body': 'Yes, my bad! :)', 'comment_created': datetime.datetime(2020, 7, 30, 7, 53, 7, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 462816420, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2020, 7, 30, 7, 54, 51, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 462818053, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2020, 7, 30, 7, 57, 44, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 462821572, 'comment_body': 'Done. :)', 'comment_created': datetime.datetime(2020, 7, 30, 8, 4, 19, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 462823575, 'comment_body': 'Ah, right, so these are the constraints for the population for each of the variables involved during the search process. I think setting default parameters for these bounds do not make sense. \r\n\r\nI am temporarily setting `upperBound` to 1 and `lowerBound` to 0. \r\n\r\nI am also adding it in the documentation that these need to be explicitly initialized.', 'comment_created': datetime.datetime(2020, 7, 30, 8, 7, 53, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 462824193, 'comment_body': 'Yes, right, well I am setting the defaults to 0 and 1, _but_, should we set defaults for the bounds?', 'comment_created': datetime.datetime(2020, 7, 30, 8, 9, 2, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 462878920, 'comment_body': ""Ideally a user should set each parameter tailored to his objective, that said unless we want to put the bound at first I think there is not an easy way to provide defaults for the others. I think as long as we make it clear that the bound has to be set for almost all problems, I think it's fine."", 'comment_created': datetime.datetime(2020, 7, 30, 9, 43, 14, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 462879742, 'comment_body': 'Just to be consistent with the rest, we should use `const double lowerBound` and `const double upperBound ` here as well.', 'comment_created': datetime.datetime(2020, 7, 30, 9, 44, 48, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 462881085, 'comment_body': 'Sure, changing it.\r\n', 'comment_created': datetime.datetime(2020, 7, 30, 9, 47, 13, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 462952118, 'comment_body': 'Alright, I have added notes to the documentation.', 'comment_created': datetime.datetime(2020, 7, 30, 12, 13, 15, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}]","[{'commit_sha': '99478eab8258f340f1fe8c671dc3507e87945336', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79150db4ce649a08ee7dd5de9f86d66cd3aefecc', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4eed69a4565ad7733eee9bc56fe309062326860f', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ceeb7cc210fe113c4414678d567b481907aad6f0', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '274b0d74d07ec6e4deb95e453654c2c404df9b4d', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '80a9a12d3ae3177f3664834e7115eeb6dbb3c7e3', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c417b08b3894055fe2ef6b68d6707ad8218cce77', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '127953bd2fc2a60746adf83546c7605a5b281227', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e150f635d4c0cd562ce6d6fac6cd9a7f44c1b83a', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a352f60755494ba3b792dddc80b5b92a7e0eca3e', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a9fde7e7e71ab50f5d467d329a80855374a9b3f', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd7d62b04836945709e4922c52756e6457155fc81', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dbbf21738893ffa50826b86f80591402982b4060', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73c6fbd92ff8d497b68739db0383cffc47f3f19c', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '21df412cb0d266790c4525ad38dd5b0e97d7264c', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c734d10ed39d0db75518a181f90b1e539694433', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1fa339cd57e526419fb48ab1d324472c81b81dca', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eee7b78da48f4e820896d6e175883f464dd369d6', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39fe0e96d2442cd7a6404221d298fe0d8dbe049c', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e54c7ab7a19cac6b9f6e918a21303b6b9914bb4b', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '177ce878a8486efd256c5b1787e5148836f216e2', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '419b35a1a76369a3610a68f1bd21ef2da8c57266', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9fe48976bfdc6d2f791bb702f128c588493c71aa', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '78662ac930c6348b27cb37b92bbe1dc90e67be54', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '86276fa29bde0948ae1985fe7874f14d1b3dac8a', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b14d94dc90b1ef62ef661604c076f417175c9e7', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f74619fe7c19b5e53af13fd55dad6071395061aa', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b8695df78a3c23496f20677ea5417b2f0ffcee5f', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3498b0f01bca228c43a8456dda2c5a2476b61851', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '532040f356ce2f37a7c3a64aa9d9829a1fbad4d3', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d0d9f9a82d94008827f0cfecf0b0682b730f709', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da52154072fb7d86c0c5bf2ca5d19ba271717efb', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '216d1dfdbff13182406155545cc01f6313c71f0f', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be24de787c8c37998f810b06350c627fba890746', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47824790e635cb4c927c814200560dd5dcdae5b5', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cffac3ce6bd615f71e8ef62df7fb019b014425b5', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b7c1dac8ca72f784578dbfc8421b786d82e1e7b', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a11974a4eac02637b64cb917c4e6b0bed2063e42', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '603d9a18c19b5dd9228fc22f5bf754f4506aaf9a', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd7fd0a3af28a09ba3ec598702349d356624277a', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9618226d84b8b9ad97ae099c4794d6a282ed8f45', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '24fa27655db402b1db7a64ebefeeb595207bdf40', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb37702917603ca5e19a5645e6d695704398572d', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c9f992e3d696178dac637a02a2be4d576dbf9d2', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c6418b445c21330dde3f92dd66ab8cfd2940464', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16165f8cebaeff8919bb1655a725328f2ff80d14', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b01eb26829ffa5319f52bdbd165697766780bdde', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4ce416b3972bd9abd4df0e8e1b344888adfdf8d', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e5353694f45228ac2028e18495ab320fd90fa6d7', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '594d79369a0c177c69de27ec9e73ad58e46222da', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d8707d9f326e7b183856aaa573570812ae9a5c6', 'committer_username': 'zoq', 'committer_name': 'Marcus Edel', 'committer_email': 'marcus.edel@fu-berlin.de', 'commit_date': datetime.datetime(2013, 4, 20, 12, 45, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3052b9c92b121e48334ccee3da6a45a735f1aa5', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cee6461e693d3300c3c6f89327dae3be74f4a482', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d8ac2c05ab4f674f62aa1038322a8d60e930dbb', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8fb4578758b0e08a475e99d0d0b410deb6974e0a', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9867d927c5bba05ab6edc14eb93fde56a887ff7', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ac289a20d0e785cf164db8f314681bbdb83673a', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '13bdfc1f5c068d88d941776dbe741e5b51ad17d1', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '13c1857c57dfe9f3afb59270589c785e9bd69f97', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0dc99f08310565026faf9adaa5f81234996f0b15', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c187ad5b0c11fb981084cc206c8e518bf218d260', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76b71b2594a04cb6c822fad133da5ca93bfddd10', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '75183d00f76df7cacae9849c433f051ca3ad4cef', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e06d407afc958c09c13764244915d488bf0ee580', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bde5152db85fd15b3afec082351d5a302e8a8357', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b0d7ea5e7ddcb83a87255e17ddc73bd36cb8c0b2', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6ce7fe753c818555501ff5cd0373192fa44cd2c', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3a5a56fc8d420f025349e093db9b7d26850dceb', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '132e9679f722bbb60e58fd5f82ea13da53e602a0', 'committer_username': 'zoq', 'committer_name': 'Marcus Edel', 'committer_email': 'marcus.edel@fu-berlin.de', 'commit_date': datetime.datetime(2013, 4, 20, 12, 45, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12fe7e040360b4545d27645af8849727a7ec6af0', 'committer_username': 'Lasall', 'committer_name': 'Dominique Lasserre', 'committer_email': 'lasserre.d@gmail.com', 'commit_date': datetime.datetime(2012, 5, 14, 21, 5, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '525724c0d1d0d13a67aa7cc0614c97e5b2039b27', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '778b7ef8a018acabbad40a604d89650bdc0b3590', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '076e9648f406a88db045fc296afae1d6730b36c5', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e014370ec84149c361e7b3cc7d402dacd0cc4b87', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60ccb22f4528c3524c26d07d9ee5f786f60aeade', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '776f5aa546ad0d665d5b224063b3342f914e0abe', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f68144d8188cee989ed6a66a1fec4dbcd9658839', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca37423560a662216e58fe2f16b8245c36914fd6', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f0cbba7f98c45baaf1ebc2c51626a67bc5ea2a64', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1cb6d1ff18d3b73749894fbe1225ccecd75ffd5', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fdb6cdc72fec91da334adaeb48bd32aa518c3579', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c26c0cf2493bc1fc3c4d6514309141d85ea65b3e', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd49775b28fbfc5ae3f6223dd89ea352d1874416e', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b64a5a3627d5392514b82e2a3bc91cbf5336891f', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '75ae7efbc4f1ce0e99164d576d5fa595cc6ab3a4', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c0d3379bc3ba8ca1f47795b8c2d64830b0b7db7e', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fab76f600251790c4cc68ee97c8b0a55aafc6a08', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88f6500201d773821a4328278b7011e081dd8ebc', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a688988997763021803def8816026da4cb8bee17', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bfff7963a50c8a5a161a66b7e7a2f7ce53e4f305', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db4a84b93973abd1babe643f08b2dc047ad46aa6', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c79296626594889ac6882702bd19b049558d8ed', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c6aa81ca4a234bac8b49ff4ce595d3cf0e55282', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1da4b449cdbaf44d98f259d845e36ecaf0646ab9', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a8de350b9fd5ac4d8b8d1178ed9d0d5d4961db03', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03c4dcba3542ec8513a646fa555bce01953b935a', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '206145bd59dc2d0b5fe2b87c99b95328759ca209', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69ddc3948820723181270ed76b922e5f694c443e', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ae8fe3096c0c0ad3974545e5210d4a3b12ca478', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a3d23aba20f0cd5d50f61fc9cfb35a4418eb30c', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '178e2e0b4489fac11e8eb967ac766fbaae8f57b4', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20f67a67a5f6a688214cc1613140a118af589bc2', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e250f555582e5345cfadb62f1168ef74b5e7bbd1', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c29738afb98d3ccb3a8a2470fd23bcf82cafaca', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2840027df81cb70c156941dd9bbf44385d1d2cd3', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6631165b1188e8e50753a215b94a4ef53b732e7f', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '021bff545cfed0a4a4b2842a0bea5df9f75405f2', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e8c586c3054611d416c3ee3cf7fd04a1d9396e37', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f45b6533a63a94ff76ef9ae2a4f51399e416fcec', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14e13fc00fa98d996b2b910d0f39a9f83661d65d', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42ee14f08e06cb6703e246d27d59cd275a2c7449', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '457b1cbdd4f67a6eca68117a5bb4a7604fc7b3e3', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aec42c5fa671518aa33b544f0b3b1a52283bb72d', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08dff6ced625b2fb38ad4e3863a082859958d5e3', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c566b4a8c9bf15ac031f9413500156a4b0419359', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c5828ac3e0cee32f26edc9c536f82603de38efd', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c1a556209c73b7954953ace9cc90188ed929e1b', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8579650cb9c0e3584c63eef39b4bd954408920ae', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd2528f3f117450bd25959198b5df13bd8f94be11', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d13117a1f7e7697de09fade53c886c3418c0e89', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e68fbfeabe87a9b7d2b7a81b97f334be481a4724', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea5a54b77cf0a5d460b1479bfd4fd10fbc639112', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4110d0906bd825b7971e19eee1054127485dd54', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ddfb6c36c588951d78fe64b108ac0e5cea2596f9', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71e609bf2dcb971c619c0918f8b2293b638da526', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c9f1ac6e537eb6d996f08213fbd68436ef3e6cf', 'committer_username': 'say4n', 'committer_name': 'Sayan Goswami', 'committer_email': 'github@sayan.page', 'commit_date': datetime.datetime(2014, 9, 20, 3, 10, 53, tzinfo=datetime.timezone.utc)}]",Sayan Goswami,8839504,github@sayan.page,User,,102,,19,48
301507239,Framework for Multi-Objective Optimizations,"This PR will add a framework for multi-objective optimization. This will include the DTLZ problems, the NSGA-III optimizer and some indicators (hypervolume, generational distance, epsilon).",False,120,https://api.github.com/repos/mlpack/ensmallen/pulls/120,https://github.com/mlpack/ensmallen/pull/120,closed,1541,2,24,21,6,14,5,0,"[{'name': 'c: optimizers'}, {'name': 'c: tests'}, {'name': 's: keep open'}, {'name': 's: needs review'}, {'name': 't: added feature'}]",2019-07-26 11:41:14+00:00,2020-08-16 11:53:20+00:00,33437526.0,"387 days, 0:12:06","[{'comment_id': 307875550, 'comment_body': 'The Indentation is off, but I think you already mentioned this in IRC.', 'comment_created': datetime.datetime(2019, 7, 26, 19, 10, 21, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 310361561, 'comment_body': 'Have you folks considered using [`.clang-format`](https://clang.llvm.org/docs/ClangFormat.html) for autoformatting and adding an [`.editorconfig`](https://editorconfig.org/) to enforce the project style proactively?', 'comment_created': datetime.datetime(2019, 8, 3, 19, 53, 56, tzinfo=datetime.timezone.utc), 'commenter': 'coatless', 'type': 'User'}, {'comment_id': 310381531, 'comment_body': ""For mlpack we did setup a Jenkins Job that checks the style, I think we should do the same for ensmallen. About autoformatting, haven't tested it yet, maybe this is an option saves us some time."", 'comment_created': datetime.datetime(2019, 8, 4, 10, 51, 5, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 313013532, 'comment_body': 'We can bump the armadillo version as done here: https://github.com/mlpack/ensmallen/pull/119/files#diff-354f30a63fb0907d4ad57269548329e3 to fix the build issue.', 'comment_created': datetime.datetime(2019, 8, 12, 16, 29, 5, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 314001983, 'comment_body': 'It might be a good idea to cite: ""Scalable Multi-Objective Optimization Test Problems"". And add a simple class description for each function, similar to: https://github.com/mlpack/ensmallen/blob/master/include/ensmallen_bits/problems/himmelblau_function.hpp', 'comment_created': datetime.datetime(2019, 8, 14, 17, 46, 41, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 314002325, 'comment_body': 'Can you comment on each parameter.', 'comment_created': datetime.datetime(2019, 8, 14, 17, 47, 23, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 314002505, 'comment_body': 'looks like the indentation (2 spaces) is off.', 'comment_created': datetime.datetime(2019, 8, 14, 17, 47, 47, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 314003327, 'comment_body': 'Looks like we could put this outside the for loop and reuse the parameter for each iteration.', 'comment_created': datetime.datetime(2019, 8, 14, 17, 49, 35, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 314003826, 'comment_body': 'You could use ``asf.diag().fill(1e6)`` instead of the two for loops.', 'comment_created': datetime.datetime(2019, 8, 14, 17, 50, 45, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 314004143, 'comment_body': 'Please use camel casing for all names.', 'comment_created': datetime.datetime(2019, 8, 14, 17, 51, 26, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 314004815, 'comment_body': 'We could avoid another copy if we directly use ``nextPop.slice(i)`` and ``referenceSet.slice(randIdx)``.', 'comment_created': datetime.datetime(2019, 8, 14, 17, 52, 49, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 314173468, 'comment_body': ""Yup, I'll do the documentation once I finish the code for reference points"", 'comment_created': datetime.datetime(2019, 8, 15, 4, 49, 31, tzinfo=datetime.timezone.utc), 'commenter': 'favre49', 'type': 'User'}, {'comment_id': 314218404, 'comment_body': ""Yup, I'll fix it once testing is done. I just did it this way so it's easier to compare to the python numpy implementation"", 'comment_created': datetime.datetime(2019, 8, 15, 8, 32, 14, tzinfo=datetime.timezone.utc), 'commenter': 'favre49', 'type': 'User'}, {'comment_id': 314462694, 'comment_body': 'Okay, sounds good.', 'comment_created': datetime.datetime(2019, 8, 15, 19, 28, 43, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}]","[{'commit_sha': 'f3f77a2759d19a4a5e83a50fc0f3a92c2a262588', 'committer_username': 'favre49', 'committer_name': 'Rahul Prabhu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 19, 10, 48, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1eff83446d7dd8ae9c4d5e0c9789f6c98ee74e66', 'committer_username': 'favre49', 'committer_name': 'Rahul Prabhu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 19, 10, 48, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e403643dc716e8063e7fb6ad4108c1b9441d4fbf', 'committer_username': 'favre49', 'committer_name': 'Rahul Prabhu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 19, 10, 48, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd73697919f57454d891a37b1caa397f6b676fec4', 'committer_username': 'favre49', 'committer_name': 'Rahul Prabhu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 19, 10, 48, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3decdac3ec2aa6483eb077cdccc454470a9bae2', 'committer_username': 'favre49', 'committer_name': 'Rahul Prabhu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 19, 10, 48, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd39839efef75dd04663b247ad49db9ab12165619', 'committer_username': 'favre49', 'committer_name': 'Rahul Prabhu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 19, 10, 48, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b36791acd3086a2ca80a2d447f0151cae03b574c', 'committer_username': 'favre49', 'committer_name': 'Rahul Prabhu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 19, 10, 48, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd197d3ee47fc70bd06137b28c43c296b25a4df8', 'committer_username': 'favre49', 'committer_name': 'Rahul Prabhu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 19, 10, 48, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f31d942b0d302a663c01007425df57e92194a5b6', 'committer_username': 'favre49', 'committer_name': 'Rahul Prabhu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 19, 10, 48, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b1b92398237477c12c67a4793398cdc9fdca5c45', 'committer_username': 'favre49', 'committer_name': 'Rahul Prabhu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 19, 10, 48, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3443dd30a6e60c5e100a347c024b8b2d6b2aa91f', 'committer_username': 'favre49', 'committer_name': 'Rahul Prabhu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 19, 10, 48, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95db7f698a23b8c4d19b7100d5117066cb43283e', 'committer_username': 'favre49', 'committer_name': 'Rahul Prabhu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 19, 10, 48, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a525223ac88e3e7fe1c8d06ed097c719d2d015b', 'committer_username': 'favre49', 'committer_name': 'Rahul Prabhu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 19, 10, 48, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '992fc8da7392e6800017fc4f33c0f8af4dc08134', 'committer_username': 'favre49', 'committer_name': 'Rahul Prabhu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 19, 10, 48, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '351e4a035bae1138ad6a7e7cc5b33cc8eb17e383', 'committer_username': 'favre49', 'committer_name': 'Rahul Prabhu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 19, 10, 48, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '32f2cf2e0f9d82db0bb4ac8fc3ec9f3f3b469dbd', 'committer_username': 'favre49', 'committer_name': 'Rahul Prabhu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 19, 10, 48, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e0db9d148f36dfc7c6ead6916f34c2e014394132', 'committer_username': 'favre49', 'committer_name': 'Rahul Prabhu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 19, 10, 48, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '89423321ce00603aad495e021680ad1020ce2985', 'committer_username': 'favre49', 'committer_name': 'Rahul Prabhu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 19, 10, 48, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03ce6ce08cd687f624b5215b585c44808508e70a', 'committer_username': 'favre49', 'committer_name': 'Rahul Prabhu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 19, 10, 48, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0de2f492c3faa9c950d7e7295583059e89411d7e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'fbbe8a718f9eff5571ce5d80af5c7696f88c4019', 'committer_username': 'favre49', 'committer_name': 'Rahul Prabhu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 19, 10, 48, 23, tzinfo=datetime.timezone.utc)}]",Rahul Prabhu,40389657,,User,,26,,7,22
584685649,Improvise NSGA2,"Continuation of #262 .

The goal of this PR is to increase the efficiency of this code, enhance its expressibility and reducing its code size as much as possible.

Summary of my goals:

* Minimize usage of raw ```for``` loops
* Employing std & arma algorithms whenever possible
* Potential error fixes.
* Introduce OMP parallelism [https://ieeexplore.ieee.org/document/6968779] whether on this class or a separate class.

I have a few questions before I do that, let me know your thoughts on that.

Providing logs for the convenience of the reader. Stay tuned for more progress updates!

**LOGS**

**Main Loop**
- [x] Initial population should be within (lowerBound, upperBound) so that they exist inside the solution space [link](https://github.com/mlpack/ensmallen/pull/263#discussion_r588002920)
- [x] Incorporate CheckArbitraryFunctionTypeAPI<> for NSGA2.
- [x]  Add RequireDenseFloatingType for NSGA2

**Fast Non Dominated Sorting**
- [x] Discard the empty vector appended to the front. [link](https://github.com/mlpack/ensmallen/pull/263#discussion_r587526998)
- [x]  ```fronts.size() > 0``` ==> ```!fronts.empty()```

**Crowding Distance Assignment**
- [x] Pull the ```crowdingDistance``` 0 initialisation out of the function 
- [x] Remove ```fronts.size() > 0 ``` check, since empty front isn't passed at all. Refer the above section.
- [x]  ```crowdingDistance``` is filled using objective values not by taking average of ```crowdingDistance```
- [x]   ~The calculation seems to be very roundabout, need to confirm with @say4n. If you're reading this, can you check this [patch](https://drive.google.com/file/d/1KjrbkkKL6eviF7dUEjsCNr8BCW-6c4rg/view?usp=sharing)~ As discussed, going with the patch.


**Testing**
- [x] Check for different types of matrices, for ex: ```fmat```
",True,263,https://api.github.com/repos/mlpack/ensmallen/pulls/263,https://github.com/mlpack/ensmallen/pull/263,closed,365,77,4,54,28,47,1,0,[{'name': 'c: optimizers'}],2021-03-04 10:25:36+00:00,2021-04-14 00:04:39+00:00,3505143.0,"40 days, 13:39:03","[{'comment_id': 587363038, 'comment_body': ""Shouldn't we check if they're inside the upperBound && lowerBound? Am I missing something? \r\n\r\nAn example https://github.com/baopng/NSGA-II/blob/29a6ec33f87b32a7fb2596091e1a51c897106e7b/nsga2/problem.py#L20"", 'comment_created': datetime.datetime(2021, 3, 4, 10, 51, 35, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 587364203, 'comment_body': 'Setting the same value to the crowdingDistance of a front multiple times.', 'comment_created': datetime.datetime(2021, 3, 4, 10, 53, 28, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 587526998, 'comment_body': 'Caught a big fish here. Allow me to explain myself,\r\n\r\n- The while loop breaks when the newFront is empty. Note that the newFront is pushed **regardless** of any of the conditions.\r\n- At the terminate stage of our while loop, the nextFront is not updated at all! That means its an empty vector which gets pushed into our ```front```\r\n-  This causes the while loop to terminate\r\n\r\nResult?\r\n\r\nYou got an additional empty vector in your ```front``` set. Which causes smelly code.', 'comment_created': datetime.datetime(2021, 3, 4, 14, 43, 21, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 587527808, 'comment_body': 'Continuing on the ""big fish"", this causes this redundant if clause because of that empty vector. ', 'comment_created': datetime.datetime(2021, 3, 4, 14, 44, 24, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 587528272, 'comment_body': ""Since we're looping over all the fronts, can we not simply initialize ```crowdDistance``` ahead of calling this function?"", 'comment_created': datetime.datetime(2021, 3, 4, 14, 44, 54, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 587685286, 'comment_body': 'https://github.com/haris989/NSGA-II/blob/7680fd70c5202d0673aa26b9fb50a8e9c387623b/NSGA%20II.py#L76, notice there are no checks', 'comment_created': datetime.datetime(2021, 3, 4, 17, 46, 40, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 587863168, 'comment_body': ""The size of the objectives depends on the size of the population, which can increase in case of a crossover, so I don't think you can get away with a const matrix."", 'comment_created': datetime.datetime(2021, 3, 4, 22, 10, 33, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 587867533, 'comment_body': 'I have to check the paper, not sure if the constrained was only for the mutation/crossover step or for the initial population as well. Also might be good to reference the paper instead of another python implementation.', 'comment_created': datetime.datetime(2021, 3, 4, 22, 18, 54, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 588002920, 'comment_body': '```c++\r\n\t  \r\n\t  /*if limits are specified it generates the value in \r\n\t    range of minimum and maximum value of the variable*/\r\n\t  else\r\n\t    {\r\n\t      pop_ptr->ind[i].xreal[j] = d*(lim_r[j][1] - lim_r[j][0])+lim_r[j][0];\r\n\t    }\r\n```\r\n\r\nSource: realinit.h, Original Implementation in C, IITK Kanpur Genetics Laboratory.\r\n', 'comment_created': datetime.datetime(2021, 3, 5, 3, 17, 55, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 588969942, 'comment_body': ""I'd be wary of replacing simple loops with algorithms from the std namespace. I don't think there is any performance advantage -- in the end the code will do exactly the same thing.  At the same time, this change makes things harder to read/understand, which adds to the technical debt (ie. increases the maintenance burden).\r\n"", 'comment_created': datetime.datetime(2021, 3, 7, 4, 19, 32, tzinfo=datetime.timezone.utc), 'commenter': 'conradsnicta', 'type': 'User'}, {'comment_id': 588970014, 'comment_body': ""Again, a simple and effective 'for' loop was replaced with something more elaborate.  There is no need for this.\r\n"", 'comment_created': datetime.datetime(2021, 3, 7, 4, 20, 32, tzinfo=datetime.timezone.utc), 'commenter': 'conradsnicta', 'type': 'User'}, {'comment_id': 588970390, 'comment_body': 'I had a feeling I was overdoing it. Thanks for the review. ', 'comment_created': datetime.datetime(2021, 3, 7, 4, 25, 55, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 588970413, 'comment_body': 'Are you talking about the std::fill or std::for_each? ', 'comment_created': datetime.datetime(2021, 3, 7, 4, 26, 19, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 588970825, 'comment_body': ""Because I moved crowdingDistance zero intialisation out from the function. So instead of setting 0 to that vector per front, I did it at once. \n\nIf however you're talking about std::for_each, I'll revert that change. "", 'comment_created': datetime.datetime(2021, 3, 7, 4, 30, 29, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 589854716, 'comment_body': 'Nice catch!', 'comment_created': datetime.datetime(2021, 3, 9, 0, 42, 25, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 589855079, 'comment_body': '```suggestion\r\n    // Ensure population is within variable space.\r\n    for (size_t geneIdx = 0; geneIdx < numVariables; geneIdx++)\r\n    {\r\n      if (population[i][geneIdx] < lowerBound[geneIdx])\r\n        population[i][geneIdx] = lowerBound[geneIdx];\r\n      \r\n      if (population[i][geneIdx] > upperBound[geneIdx])\r\n        population[i][geneIdx] = upperBound[geneIdx];\r\n    }\r\n```\r\n\r\nWe tend to be picky about the style.', 'comment_created': datetime.datetime(2021, 3, 9, 0, 43, 33, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 589857728, 'comment_body': '```suggestion\r\n    // Discards unfit population from the R_{t} to yield P_{t+1}.\r\n```\r\n\r\nPedantic style fix.', 'comment_created': datetime.datetime(2021, 3, 9, 0, 50, 47, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 589857929, 'comment_body': '```suggestion\r\n  // Remove the empty final set.\r\n```\r\n\r\nAnother minor style fix, not sure I mentioned this at some point, but ensmallen follows https://github.com/mlpack/mlpack/wiki/DesignGuidelines.', 'comment_created': datetime.datetime(2021, 3, 9, 0, 51, 23, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 589859790, 'comment_body': 'I guess before the reset to zero, we got lucky, because in the `CrowdingDistanceAssignment` method we use `front[i + 1]` which should be undefined:\r\n\r\n```\r\ncrowdingDistance[front[i]] += (crowdingDistance[front[i - 1]] -\r\n            crowdingDistance[front[i + 1]])\r\n```\r\n\r\n', 'comment_created': datetime.datetime(2021, 3, 9, 0, 56, 41, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 589860742, 'comment_body': 'Ahh, nevermind we set it to zero before as well.', 'comment_created': datetime.datetime(2021, 3, 9, 0, 59, 6, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 589860881, 'comment_body': 'Looks like this causes a bad alloc.', 'comment_created': datetime.datetime(2021, 3, 9, 0, 59, 29, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 589940622, 'comment_body': 'The bad alloc is because I used ```!fronts.empty()``` instead of ```!fronts[i].empty()```. Lemme fix that ;)', 'comment_created': datetime.datetime(2021, 3, 9, 4, 51, 26, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 589954441, 'comment_body': ""@zoq  Regarding this, I think this implementation is wrong. Here's an excerpt from the paper\r\n\r\n![crowdingdistance](https://user-images.githubusercontent.com/45007169/110422835-19d1ec80-80c6-11eb-984a-702a6954aa76.png)\r\n\r\nNotice the equation should've been \r\n```c++\r\ncrowdingDistance[front[i]] += (fValue[i+1] - fValue[i-1])/(maxFval - minFval)\r\n```\r\n\r\nand not the average of crowdingDistances\r\n"", 'comment_created': datetime.datetime(2021, 3, 9, 5, 29, 50, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 589954671, 'comment_body': ""I've implemented it in this  [patch](https://drive.google.com/file/d/1KjrbkkKL6eviF7dUEjsCNr8BCW-6c4rg/view)"", 'comment_created': datetime.datetime(2021, 3, 9, 5, 30, 33, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 591857182, 'comment_body': 'Good, can you make the patch part of the PR?', 'comment_created': datetime.datetime(2021, 3, 10, 20, 43, 27, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 591877608, 'comment_body': ""I've no problem with that. Thing is, @say4n  has implemented assignment first and sorting later which I think is wrong but I guess he must have some reason. I was waiting for his review, very well, I'll add this patch on my PR."", 'comment_created': datetime.datetime(2021, 3, 10, 21, 17, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 592188353, 'comment_body': ""I think I had unrolled the first iteration of some parts of the optimisation loop to be outside the for loop. This had the benefit of instantiating some items as far as I recall. I don't remember all the details now so do take this with a grain of salt!\r\n\r\nAlso, sorry for the delays, I have a bunch of impending exams and a ton of work. 😢 "", 'comment_created': datetime.datetime(2021, 3, 11, 9, 16, 40, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 592195872, 'comment_body': ""Thanks for clarifying :). I'd say let's merge my patch for now as it is straightforward & adheres to the research paper directly. We can then try your optimization method and see how it all fits in."", 'comment_created': datetime.datetime(2021, 3, 11, 9, 27, 2, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 592210529, 'comment_body': 'Yes, for sure! Great work btw!!', 'comment_created': datetime.datetime(2021, 3, 11, 9, 46, 38, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 593805459, 'comment_body': ""I'm not sure I see the reason to change the name of the parameter here, but I don't mind to change it, but let's choose a more descriptive name here, I mean `population` is clear, but `Fval` is not really a parameter name that describes what the parameter is about. Let me know what you think."", 'comment_created': datetime.datetime(2021, 3, 13, 21, 47, 19, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 593805540, 'comment_body': 'See comment above.', 'comment_created': datetime.datetime(2021, 3, 13, 21, 47, 41, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 593805567, 'comment_body': 'See comment above.', 'comment_created': datetime.datetime(2021, 3, 13, 21, 47, 51, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 593805585, 'comment_body': 'See comment above.', 'comment_created': datetime.datetime(2021, 3, 13, 21, 48, 3, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 593805793, 'comment_body': 'Looks like the indentation is wrong here, it should be two spaces, and the next line should tabbed twice (4 spaces).', 'comment_created': datetime.datetime(2021, 3, 13, 21, 49, 54, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 593805929, 'comment_body': 'Should be tabbed twice (4 spaces).', 'comment_created': datetime.datetime(2021, 3, 13, 21, 51, 31, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 593805946, 'comment_body': 'Should we use `fValues` here?', 'comment_created': datetime.datetime(2021, 3, 13, 21, 51, 51, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 593805987, 'comment_body': 'See comments above.', 'comment_created': datetime.datetime(2021, 3, 13, 21, 52, 14, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 593805994, 'comment_body': 'Should be tabbed twice (4 spaces).', 'comment_created': datetime.datetime(2021, 3, 13, 21, 52, 32, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 593806144, 'comment_body': 'Can you check the indentation here?', 'comment_created': datetime.datetime(2021, 3, 13, 21, 54, 16, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 593806561, 'comment_body': 'Looks like it would be possible to use an `arma::vec` here, unless I missed something and doing so would make sorting more complex?', 'comment_created': datetime.datetime(2021, 3, 13, 21, 58, 4, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 593821250, 'comment_body': 'Thank you!', 'comment_created': datetime.datetime(2021, 3, 14, 0, 44, 43, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 593824257, 'comment_body': 'My reasoning is ```calculatedObjectives``` is too vague and lengthy on top of it. \r\n\r\n_""calculatedObjectives of what?""_  A user might ask.\r\n\r\nPerhaps ```Fval``` is bad naming, how about ```populationFitness```? ', 'comment_created': datetime.datetime(2021, 3, 14, 1, 20, 20, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 593825823, 'comment_body': 'Indeed, we need to store the fValues for the current objective, or are you talking about the naming?', 'comment_created': datetime.datetime(2021, 3, 14, 1, 39, 5, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 593826807, 'comment_body': ""So, if we're doing an assignment in a new line we should tab twice, right?"", 'comment_created': datetime.datetime(2021, 3, 14, 1, 50, 12, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 593979602, 'comment_body': 'I was talking about the name so the comment matches the parameter name.', 'comment_created': datetime.datetime(2021, 3, 14, 23, 29, 18, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 593979820, 'comment_body': ""Yes, everything that doesn't fit in the 80 character limit has to be tabbed twice. "", 'comment_created': datetime.datetime(2021, 3, 14, 23, 31, 6, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 608256675, 'comment_body': 'Can you use the same indentation here you used for the other `sort` and `transform`.', 'comment_created': datetime.datetime(2021, 4, 7, 0, 12, 47, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}]","[{'commit_sha': 'e8506960a06ea524fa1e4d376025bca508b44633', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '01dbfa3e7bb4f5b79c3ddfc740fd3c5cc0241e8f', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b2f525f5aa9682c4dc9f14473ed5d5ddb6a6347e', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b12d050fd5a309a208a05b60e139a7063536a254', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e508278039da5dacae3e992e22001b4e72df7911', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '31e96e2bb421d8d30b3a12edea49879e1efac48b', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69906e100c9a0b68cb45dd583e3c1c7959d73347', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eec6cad59493057f747c30e173ff44f7d388d249', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c290c3235b76ec821f2ff199370c01d4988c0ad', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f6af30aec074de0bfd384d31f6d2e9fad8a05d8', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6254ac14b2ddb47e2ca1673a35032384e9cc2e18', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a43c447c848281e0103e17e135e1a95566c78087', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a691584fa30a3d761ff346016a7b9568e4fb6d20', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f76c2f2ae71cddd4249ad00f2fecfb7628320214', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c19c5f687032e4724bc94dbc8f4eb0a909158a7d', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1ef11a077b6c1d5fe5ec03d6bacaeacc00cb2c9', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b0b51f570c9cb76e3c19398fd7cb4dfb7d723d0', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0256405a4f1a7d3f759c840a4d6e978b56195da4', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c388a0cac815e16dd096cfeaf267da60bfef634', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '679d9045393c50aa4f0a1bf59166ec05df9c1d45', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd18192e251e442c4e5d2c74227a323f71c92aa94', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d163131127bb4f4b82104d8a3d9c528991f03d5', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2689d5c19e0d9721f6fe346f6535c73bfadce15f', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9c049606ae0226bd1817ee966263ebedadcf108', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38f88ab2f26896a58e5965f2605940b871cb69eb', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ad7181e84c029599cf77a169f293ff008bba328', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70bfceebc52c4c53ec0cfc9dec0aff22e39a9dbc', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3b2ce932a4bcdf4ec0657fb70d37647d4e3122f', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c98b16acd15ef7defeea9e6514f80d728e81b6fe', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a975138f4eb4ddbf9900c50fb9daf7ce37b6b3e8', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15618563b9e12156727457315cc5f80a74813ab3', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12c513d26c0708a1b9b5e9b0e88a145fb1e31cea', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68157eede0e4dce983b389a275680d4cf650e631', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bad9062cd698267566b19ce0bf790bb462b64a16', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b986687494ede0990a84e0e8ef7499b1ff3e3f1d', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9f3e7b7f2b59940eb52c5c6f8406d5a3405b54b', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '252c50069602024024d314852c855eae3dc9d800', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f58e0eba43d7dc79f16864e0b86a587a36101bf8', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '846b01f16551d860bb26f305e552fc838dac1c9c', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36e43ae21fe45c2beae5b702a359436df02a00c8', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '400720aa15291d238f2ef9e18732fb900e327c59', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3f699a50879d56156082c98a7a2c48f9a4fd3ed', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb5f23db8b97527b8ee6aeb55fa7e93db5b9772f', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95bc44f4fa98ee228a3405c9d5ad017265be0beb', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c31f6ad51123754dda9778d6cb1070444de5544', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7eafb8a2f500f0e36e26ffa0e484ae6800cc3f10', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02d8d94c18a2c9d503185af2ea40acb502732c44', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c6e76e2c62bb7c176e0fe233e32c9da3f451db68', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '850612fd97b06f7dd9e97feea096e3bafd51fac6', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6714a178af1d7e1299f24699951c8905d500674b', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6be8403fbb43ad1dbe484a80dea07e5936e2096a', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a4f320a4183a5adac144a6f83726d38a7465596b', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9463b153d1d9b4132c30208eb1e484114bcfd245', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '33974ce3f7355a9da9fe67d3e5bbb327daba815f', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}]",Nanubala Gnana Sai,45007169,,User,,73,,79,42
612993137,Add MOO Indicators,"Ported ```igd.hpp``` and ```epsilon.hpp```. #120 

LOGS:
- [x] Move the code to utility/indicators/*
- [x] Register at ensmallen.hpp
- [x] Change ```bestFront``` type to ```arma::cube``` in ```nsga2.hpp```, ```nsga2_impl.hpp``` and ```nsga2_test.cpp```.
- [x] NSGA2 test passes.
- [x]  Optimize the code.
- [x]  Write a sample test for both float/double for each indicator and compare with a hand calculated value. 
- [x]  Minor doc fixes.
- [x]  Expose the Pareto frontier (in objective space) through a public interface.

Test IPythonNotebook: https://colab.research.google.com/drive/1pFvoeIdqo8FQgEw5nOx1ANXH8AvX9eR3?usp=sharing",True,285,https://api.github.com/repos/mlpack/ensmallen/pulls/285,https://github.com/mlpack/ensmallen/pull/285,closed,350,67,8,28,10,13,1,0,[{'name': 'c: optimizers'}],2021-04-11 01:57:39+00:00,2021-05-02 16:04:54+00:00,1865235.0,"21 days, 14:07:15","[{'comment_id': 611262901, 'comment_body': ""Is Indicate really the word we're going for? I'd suggest EvaluateFront / Evaluate or something like that. @zoq Your thoughts?"", 'comment_created': datetime.datetime(2021, 4, 11, 23, 41, 34, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 614511666, 'comment_body': ""`Evaluate` sounds good, also do you mind to put this into an existing optimizer, this is what we did for policies as well, and I'd like to keep the root folder clean. "", 'comment_created': datetime.datetime(2021, 4, 16, 2, 0, 47, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 614512653, 'comment_body': 'Looks like this would fit in one line.', 'comment_created': datetime.datetime(2021, 4, 16, 2, 4, 16, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 614514485, 'comment_body': 'I think we can remove one space here.', 'comment_created': datetime.datetime(2021, 4, 16, 2, 10, 20, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 614514646, 'comment_body': 'I think we can remove one space here.', 'comment_created': datetime.datetime(2021, 4, 16, 2, 10, 54, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 614587004, 'comment_body': ""> `Evaluate` sounds good, also do you mind to put this into an existing optimizer, this is what we did for policies as well, and I'd like to keep the root folder clean.\r\n\r\nThis is actually genius! So, maybe we could do \r\n```c++\r\n<MatType, ...ArbitraryFunctionType, IndicatorPolicy = ens::HyperVolume<MatType>> \r\ntypename MatType::elem_type Optimize()\r\n{\r\n/*code*/\r\nreturn IndicatorPolicy.Evaluate(bestFront);\r\n}\r\n```\r\nThis way Optimize would return a single value as per our choice of metric! Perfect!\r\nThen we could have ```indicator_policy/``` for nsga2 folder and others. But I would need to implement the same indicator code for each and every MOO optimizer, so that's the bad part. Am I following what you said correctly?"", 'comment_created': datetime.datetime(2021, 4, 16, 6, 17, 46, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 614596989, 'comment_body': ""Oh wait, I would need  reference front .... this won't work :("", 'comment_created': datetime.datetime(2021, 4, 16, 6, 41, 24, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 615017560, 'comment_body': 'Okay, as discussed, I will move this to utility/indicators and make it something similar to lmetric.hpp.', 'comment_created': datetime.datetime(2021, 4, 16, 17, 35, 36, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 619359067, 'comment_body': 'This description is too generic as all the indicators proposed in the paper satisfy this property. ', 'comment_created': datetime.datetime(2021, 4, 23, 16, 42, 57, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 619452342, 'comment_body': ""It's worth noting that, for maximization of objectives problem it's ```z-a``` but for minimization, it's ```a-z```. This is the error I was talking about before."", 'comment_created': datetime.datetime(2021, 4, 23, 19, 31, 27, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 622483527, 'comment_body': '```suggestion\r\n  //! Retrieve the Pareto optimal points in variable space. This returns an empty cube\r\n```\r\n\r\nMinor spelling fix and captial Pareto just to be consistent.', 'comment_created': datetime.datetime(2021, 4, 28, 19, 40, 52, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 622484631, 'comment_body': ""Can you use `{}` technically it's a single line, but I think with `{}` it's easier to read."", 'comment_created': datetime.datetime(2021, 4, 28, 19, 42, 39, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 622485188, 'comment_body': '```suggestion\r\n          frontRatio.replace(arma::datum::inf, -1.); // Handle zero division case.\r\n```', 'comment_created': datetime.datetime(2021, 4, 28, 19, 43, 38, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}]","[{'commit_sha': 'ec9a93b17114bab5f1871341cdd86bbe2533726c', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '176c24b4fb592368dbf91a67d706ad56620be5cc', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '80955a75e509cb188341970a33434e2a9f40308b', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7acf499ceb49ab9933e51db5568843432a614ff1', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e2b5747ccef28a7ecd4733f087b58b0ad8f26db', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '41832e401c485c4de6c5d847ab742defe58ff6cd', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8167ed1185c624f8cde6171ca6cc243bceb731d7', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc9d349f1f2985dda425f0aa7b7a83030aed0c67', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d903576021e96d456e1e525aeea39c8c11e9cce', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8613e1ba11c9bfc09ad648a600090949a861554e', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7302ce1093b1b134cd67f3bc37874affb8266679', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec75ddc04b1a9fad04908d4a041cfa6356a349de', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a26e2719602102bc5e33a854c081077838fb7640', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1bd37c9a32086b0524c4c1be5f4a9a35193ac16', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b56b5b99c585f35d1a03a1980a26a0ed5bc55b74', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a97749262686d9bf9b45fe7259408428db9d1f56', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '18f7f2a7365a44dfe2ecef102555d4d7dad464c5', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69361e98e55ef348c0a463bc01453db57fd1ab7b', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a62eda2ecc15e48a8260c396a87435c3f9982788', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9099b7400cbf2a6dc3d7fab3907cabe0bc2697d7', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f79de76681cf612b127d5e5343a48d0dd7810a8', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c013fcbaa60dc9270a28a0933c70ec4612fe5618', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '98ba659e86d3daf8b9e9266b2d56efd8941a2cdf', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70ed598f53631d8d3a255efc7224ee72b1db7923', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '284b2f9d30879c87356d117d58bf42daeae11233', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '00020ce08a6e9634b344ec5114377dbde33c360c', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e975ee968f3253964dcb05a1a327740b0df128fd', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a1504ef2aa5681ce8b722f4fbb96e15dcf4ba34', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}]",Nanubala Gnana Sai,45007169,,User,,73,,79,42
608425415,Recursively check for Evaluate() in MOO,"Refer #282 Section II.

Is there a strong reason for having ```template<MatType, FunctionType>``` instead of ```template<FunctionType, MatType>```, the problem is when we do recursive call, I need the FunctionType to be the at the end for it to work. I don't see any other way.

Infact if we go by ```template<MatType, FunctionType>```, I can integrate ```CheckMultiArbitraryFunctionTypeAPI()``` into ```CheckArbitraryFunctionTypeAPI()```, and it will work like normal + MOO checks.",True,283,https://api.github.com/repos/mlpack/ensmallen/pulls/283,https://github.com/mlpack/ensmallen/pull/283,closed,22,0,2,10,13,3,0,0,[],2021-04-03 18:28:09+00:00,2021-04-10 17:34:22+00:00,601573.0,"6 days, 23:06:13","[{'comment_id': 606695499, 'comment_body': ""I wouldn't need to do switch the order and then feed to ```CheckArbitraryFunctionTypeAPI``` , if not for this. "", 'comment_created': datetime.datetime(2021, 4, 3, 18, 30, 11, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 608254755, 'comment_body': 'Do you mind to use `0` instead of `0U` here and  you used that in a couple of other places as well, I know this is a preference, but ideally I like to keep the same style across the entire codebase.', 'comment_created': datetime.datetime(2021, 4, 7, 0, 6, 38, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 608255021, 'comment_body': '```suggestion\r\n      ""Please check that the corresponding FunctionType fully satisfies the requirements ""\r\n```\r\n\r\nMissing space at the end of the line.', 'comment_created': datetime.datetime(2021, 4, 7, 0, 7, 28, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}]","[{'commit_sha': '9fc7013d8d710afa36be6072812497829a494a9b', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '006929157260c50af531a8bc80a0032513fbca42', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ccf0dff819bd846cd74ed99e20c67595ffc78102', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '563457848e11d6553ced288ff47e3f15e8ecdf01', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '750043d20a7d74a0c89f1e71bf4e39bc93b4149e', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f4362b23ee3e7efee578f520c99a8a07ebe5a9c', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7bffa5df48be1ae295e1ce9d9cc14e2a5bced82f', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ecd483bd4b35bf6740d1d703efd1436642ede47', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '782b99476580e471915a29cb4890d6b8b9e73508', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad8538602d7811236621df312aae74ba949cb580', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}]",Nanubala Gnana Sai,45007169,,User,,73,,79,42
593784491,Adding ZDT Test Suite,"Pizza!

**Declared files**
- [x] ```zdt1_function.hpp```
- [x] ```zdt2_function.hpp```
- [x] ```zdt3_function.hpp```
- [x] ```zdt4_function.hpp```
- [ ] ~zdt5_function.hpp~ [skipping for now]
- [x] ```zdt6_function.hpp```

 **TODO**

- [x] Write docs for each declared files.
- [x] Write the interface for each declared files.
- [x] Test working against [pagmo](https://esa.github.io/pagmo2/docs/cpp/problems/zdt.html)
- [x] Test numerical stability and corner cases & add to test case.
- [x] Add in nsga2_test.cpp
- [x] Add Pareto Front for each problem suite.

Pareto Fronts plotting: https://colab.research.google.com/drive/1Hgmvj4ZQVdT6OgopLPabldeyaOm0DInI?usp=sharing
",True,273,https://api.github.com/repos/mlpack/ensmallen/pulls/273,https://github.com/mlpack/ensmallen/pull/273,closed,872,1,8,30,28,10,2,0,"[{'name': 'c: tests'}, {'name': 't: added feature'}]",2021-03-16 10:46:18+00:00,2021-06-14 16:30:45+00:00,7796667.0,"90 days, 5:44:27","[{'comment_id': 600073150, 'comment_body': '```suggestion\r\n * This is a 30-variable problem (n = 30) with a convex optimal set.\r\n```\r\n\r\nPedantic style issue.', 'comment_created': datetime.datetime(2021, 3, 24, 0, 52, 46, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 600073502, 'comment_body': '```suggestion\r\n * @tparam MatType Type of matrix to optimize.\r\n```\r\n\r\nThe format is name of the parameter followed by a description.', 'comment_created': datetime.datetime(2021, 3, 24, 0, 53, 47, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 600073801, 'comment_body': ""Let's stick to the style we use in the rest of the codebase, which is public followed by private at the bottom."", 'comment_created': datetime.datetime(2021, 3, 24, 0, 54, 46, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 600074725, 'comment_body': 'Might be a good idea to add a comment to `ObjectiveF1, ObjectiveF2`.', 'comment_created': datetime.datetime(2021, 3, 24, 0, 56, 44, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 600075063, 'comment_body': 'See comment at the beginning.', 'comment_created': datetime.datetime(2021, 3, 24, 0, 57, 32, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 600076027, 'comment_body': ""I would probably use it directly, since it's only used once and it's already an alias."", 'comment_created': datetime.datetime(2021, 3, 24, 1, 0, 16, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 646988592, 'comment_body': 'Can you add a simple description for the test on top?', 'comment_created': datetime.datetime(2021, 6, 7, 22, 43, 28, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 646989061, 'comment_body': ""Also, do you mind to add a comment, that we also tested the other ZDT functions, but due to runtime constraints left didn't include them in the test suite?"", 'comment_created': datetime.datetime(2021, 6, 7, 22, 44, 38, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 647045848, 'comment_body': 'Done, do you mind conforming ?', 'comment_created': datetime.datetime(2021, 6, 8, 1, 30, 59, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 647593183, 'comment_body': 'Thanks, looks perfect.', 'comment_created': datetime.datetime(2021, 6, 8, 16, 12, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}]","[{'commit_sha': '6924cf1c3200ce2274f1d19267c16a9298caf6ba', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ac386e1eca39c62d04ec18de2dfc72dd700dee6', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9f3dc28ea360e18fa1c2d086fa4b9256c13d236', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a62416b9745bf65b701f03438741707c0eb2874b', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d20f81cfb3a6f51ad61abd9d55d63fa4736b8ac', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8cbac229ad3c12cb730b5c69777b89d239b92722', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6894b7e03c8803510ebb24269ae1b6218338985a', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69520fbaa49c47dba00fb663c8f2e51ea5d74681', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '499458d20f8f48424d7afe49475464473f0d3461', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '24367895dfcaa56ec359bc1cd9e3314927c2c2d1', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c2dfef1556d5fc6c0a32908aaef39e6a9da9fd90', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7b26115f47a77c748762d08855e69c0f2c89854', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e6b130bb24aa738d5ea2cd0937f2d800e5c438dc', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f7bb9a73022603d80332583d7cbbbd03672f1b6', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a9a44f62ac9661e3c08ba590cb2461e519c33a4', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f36a517358c81665f41647072756f89d1dba95b1', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1276ef366bad090ae423cfbdb924b81df78b13de', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4baf1072e081b67d6720897c1dea7a7dbe745ff0', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd34aec8cf8c2a77edff1295a9343b71437778941', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4c3a633754a86f4cc4342b848616fdae0ec21f2', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '118bc4ebaa7559cd57f33909556ac931e31f35f8', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '32007546172044b50710249ff2c93778601c6450', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd40b12fa7703b6ec2b76965c82410b30859e6565', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c22ab240767ab733aeae87b16b4e584b887f1dd', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4136639d4ed1346412454907c357cb9c28860217', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a6e8291c66760f219131a86ebf6ad1723dfad378', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e6c4513df4307011020dd9a851d199e031d651e1', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '447f8086ff6f65db9c29e0f15038eb4022a22791', 'committer_username': 'zoq', 'committer_name': 'Marcus Edel', 'committer_email': 'marcus.edel@fu-berlin.de', 'commit_date': datetime.datetime(2013, 4, 20, 12, 45, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e9287df1a64cc77db527a107dff225cd2d68016', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c22c6fc42072aacdd1b72d9ae760c9f22c818f3e', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}]",Nanubala Gnana Sai,45007169,,User,,73,,79,42
642699247,Query Finance API for Stocks,@zoq This PR is from our discussion yesterday. Let me know if I'm missing something? Thanks,True,152,https://api.github.com/repos/mlpack/examples/pulls/152,https://github.com/mlpack/examples/pull/152,closed,108,0,2,7,9,10,1,0,[{'name': 'c: examples'}],2021-05-12 02:48:37+00:00,2021-05-16 00:45:16+00:00,338199.0,"3 days, 21:56:39","[{'comment_id': 631525848, 'comment_body': 'I would use a list/vector here, to make it possible to select an arbitrary number of stocks.', 'comment_created': datetime.datetime(2021, 5, 13, 2, 44, 40, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 631526525, 'comment_body': 'Fair point, but for ```pArgs = PyTuple_New(???);``` how do we solve this dilemma?', 'comment_created': datetime.datetime(2021, 5, 13, 2, 47, 26, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 631527196, 'comment_body': '`vector.size()` should work right?', 'comment_created': datetime.datetime(2021, 5, 13, 2, 49, 35, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 631527584, 'comment_body': 'Nvm', 'comment_created': datetime.datetime(2021, 5, 13, 2, 50, 54, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 631527902, 'comment_body': 'Yeah figured it a bit late, sorry ;D', 'comment_created': datetime.datetime(2021, 5, 13, 2, 52, 1, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 631528488, 'comment_body': ""No worries, I think it's still early for you?"", 'comment_created': datetime.datetime(2021, 5, 13, 2, 54, 4, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 631536810, 'comment_body': ""It's 08;00AM :) , "", 'comment_created': datetime.datetime(2021, 5, 13, 3, 24, 59, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 632161442, 'comment_body': ""I think we have to clean the output a little bit, currently it looks like:\r\n\r\n```\r\nDate,FB,SPY,TSLA,VWO\r\n2017-01-03,,,,\r\n2017-01-04,0.015538430288796578,0.005931741698259098,0.04505469532651002,0.009081899929760964\r\n2017-01-05,0.016544459273424822,-0.000794900870015501,-0.001057882082392652,0.010357334593872638\r\n2017-01-06,0.022452643227982155,0.0035712530195940715,0.009917574730655002,-0.004075439279352135\r\n2017-01-09,0.012001254208912376,-0.003306264442258735,0.00986347884473039,-0.0016351159187637503\r\n```\r\n\r\nbut I don't think armadillo is able to parse the data, maybe I'm wrong. But we should test it out and if not add some line to the python script to remove the first two lines and normalize the date as well."", 'comment_created': datetime.datetime(2021, 5, 13, 23, 24, 22, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 632222503, 'comment_body': ""I recall you sent me the python file for normalized data but I didn't understand why it was necessary and hence didn't use it. Now I realize it was for armadillo parsing, thanks for clarifying. "", 'comment_created': datetime.datetime(2021, 5, 14, 2, 3, 39, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 632838707, 'comment_body': 'Nice!', 'comment_created': datetime.datetime(2021, 5, 14, 22, 15, 2, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}]","[{'commit_sha': 'a9ac0ec6095c1142af4950eb1a9fdb1d906dc29a', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e39165b48c7ec83286050c64ca77f9e590c0d34', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a42db0ac516c2f26ee8b2e25a50a5f201e17489d', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f54573236e74a48e584aefed092411177d2491ce', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f32200fa3a4a960dbc776dc23ec8e653b89d97e', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56780f1cc1c2f29525c4812fe4305258411151e9', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2debd87137d20136c56fb577147fe0eeab8c4dde', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}]",Nanubala Gnana Sai,45007169,,User,,73,,79,42
652315561,Add MultiObjective Optimization Notebook,,True,155,https://api.github.com/repos/mlpack/examples/pulls/155,https://github.com/mlpack/examples/pull/155,closed,412,0,2,8,17,18,2,0,"[{'name': 't: added feature'}, {'name': 'c: examples'}]",2021-05-25 13:08:49+00:00,2021-05-28 04:18:23+00:00,227374.0,"2 days, 15:09:34","[{'comment_id': 638772803, 'comment_body': ""<p>@zoq I want to plot the scatter plot here, but its asking me <code>std::map&lt;std::string, std::string&gt; keywords</code>  , can you help me there? </p>\n<br/>\n\n _Reply via <a href='https://app.reviewnb.com/mlpack/examples/pull/155/discussion/'>ReviewNB</a>_ <div id='ReviewNBCommentContext-DoNotDelete' style='display:none' data-state='RESOLVED' data-cellIndex='27'/>"", 'comment_created': datetime.datetime(2021, 5, 25, 13, 11, 13, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 639081673, 'comment_body': 'If you just want to plot a simple scatter plot, something like:\r\n\r\n```c++\r\nstd::vector<double> x = arma::conv_to<std::vector<double>>::from(dataset.row(0));\r\nstd::vector<double> y = arma::conv_to<std::vector<double>>::from(dataset.row(1));\r\n\r\nplt::figure_size(800, 800);\r\nplt::scatter(x, y, 4);\r\n\r\nplt::xlabel(""Principal Component - 1"");\r\nplt::ylabel(""Principal Component - 2"");\r\nplt::title(""Projection of Pima Indians Diabetes dataset onto first two principal components"");\r\n```\r\n\r\nshould do the trick, you can checkout https://github.com/lava/matplotlib-cpp to get some more details. The scatter function that is implemented in the examples repo is to generate a scatter gif, see https://github.com/mlpack/examples/blob/master/pima_indians_diabetes_clustering_with_kmeans/pima-indians-diabetes-kmeans-cpp.ipynb for an example.\r\n\r\nLet me know if that is helpful.', 'comment_created': datetime.datetime(2021, 5, 25, 18, 30, 34, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 639201733, 'comment_body': 'Perfect!', 'comment_created': datetime.datetime(2021, 5, 25, 21, 1, 19, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 639765853, 'comment_body': ""It's already part of `#include <mlpack/xeus-cling.hpp>` so we can remove the extra line here."", 'comment_created': datetime.datetime(2021, 5, 26, 14, 11, 28, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 639768412, 'comment_body': 'Looks like this takes some time, would be a good idea to add some callbacks (https://ensmallen.org/docs.html#callback-documentation) to show some output in between and at the end (`PrintLoss`, `Report`).', 'comment_created': datetime.datetime(2021, 5, 26, 14, 14, 15, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 639769139, 'comment_body': '```suggestion\r\n    ""//! Store the X, Y coordinates of the Pareto Front.\\n"",\r\n```\r\n\r\nMissing stop at the end.', 'comment_created': datetime.datetime(2021, 5, 26, 14, 14, 57, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 639773048, 'comment_body': 'Do you think we could plot the optimization process as well, something like - https://www.machinelearningplus.com/wp-content/uploads/2020/10/ef-300x230.gif', 'comment_created': datetime.datetime(2021, 5, 26, 14, 19, 11, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 639774489, 'comment_body': 'Maybe it\'s a good idea to add a section about ""How to read the Efficient Frontier?\r\n"" see https://www.machinelearningplus.com/machine-learning/portfolio-optimization-python-example/ for an example to the example as well, what do you think?', 'comment_created': datetime.datetime(2021, 5, 26, 14, 20, 43, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 639883684, 'comment_body': '![report](https://user-images.githubusercontent.com/45007169/119694360-ca03f580-be6a-11eb-800e-c0430eb2e8b5.png)\r\n\r\nLooks kinda redundant. PrintLoss() is doing nothing, and Report() has the output as shown in the picture. I think we need to work on MOO callbacks.', 'comment_created': datetime.datetime(2021, 5, 26, 16, 13, 21, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 639884412, 'comment_body': 'We would need to query the generated Pareto Front per x number of generations, looks like the job of a callback?', 'comment_created': datetime.datetime(2021, 5, 26, 16, 14, 16, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 639982850, 'comment_body': ""I've written something similar under the Plotting section. The documentation you suggested explains efficient frontier by comparing it with other fronts, the problem is we can't generate multiple pareto fronts as of now."", 'comment_created': datetime.datetime(2021, 5, 26, 17, 40, 51, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 639999251, 'comment_body': 'Yes, this can be a custom callback, that is implemented as part of the notebook.', 'comment_created': datetime.datetime(2021, 5, 26, 17, 59, 4, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 640001166, 'comment_body': 'Interesting, yes I think we have to adapt the callbacks so that they work for multi-objective optimizers as well.', 'comment_created': datetime.datetime(2021, 5, 26, 18, 0, 29, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 640007500, 'comment_body': ""BTW, please try and run the notebook once. Our final pareto front isn't as cool as theirs :(."", 'comment_created': datetime.datetime(2021, 5, 26, 18, 6, 16, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 640007608, 'comment_body': 'I have seen that, but maybe we can improve that section a little bit e.g. by going into some more details what the plot is trying to visualize.', 'comment_created': datetime.datetime(2021, 5, 26, 18, 6, 27, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 640012632, 'comment_body': 'Agreed, I used https://lab.mlpack.org/ entered your fork and branch to run it, worked pretty well, except that the optimization step took a really long time.', 'comment_created': datetime.datetime(2021, 5, 26, 18, 14, 3, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 640473684, 'comment_body': 'Reg. our results, I do find it kinda odd for the results to be this slow in xeus-cling, my mid-tier laptop can knock it off within seconds. Also, I\'m worried about the diversity of the solution, if you recall one of the goals of MOEA is to have a uniform distribution of solutions, what\'s happening in our algorithm is producing a ""cluster"" of solutions.\r\n\r\nArguably, since each of the clusters is far apart the solution set is indeed ""diverse"" so we can\'t really blame the algorithm. I\'m not sure if NSGA-II is to blame or whether our implementation is wrong. It\'s also possible that our population size is too low to observe the actual Pareto Front but I\'m not going to let our users wait an eternity for that.', 'comment_created': datetime.datetime(2021, 5, 27, 9, 54, 6, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 640717132, 'comment_body': 'Yeah, seems odd to me, we should run some more experiments with different parameters. But I think for now this is good, the solution is still valid.', 'comment_created': datetime.datetime(2021, 5, 27, 15, 8, 59, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}]","[{'commit_sha': 'f910bcbe4aee453bdc465270699396ec07fc37f3', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'efdabf3c5c7b134c1052e79aabb28edca5911a25', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da81159d0b062f0a0cc38eff5c2a3999fb561bb3', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '705b131374831959cc18f7c27068d5fded74e82e', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34b84ddae2e5f9be8fe0ff64c49d6fb1d3eba3e6', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f18b6119e474321fbd743f5bd340dd9b67bcd54f', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f8bedd4e2199d787660a7db0ce0109a948b96947', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a6a9971f476171fec73b2861a20ec1ddab47d807', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}]",Nanubala Gnana Sai,45007169,,User,,73,,79,42
657133093,Make Callback flexible for MultiObjective Optimizers.,"Related to #282  

- [x] Create ```MOOTypedForms``` struct specifically for MOO related type forms.
- [x] Create ```GenerationalStepTaken```, replacement for StepTaken in MOO.
- [x] Register the above using ENS MACRO.
- [x] Write in built callback for Querying Front.
- [x] Adapt the tests for this.

@zoq Let me know if you agree with this methodology. You can check the commit message to see what I've done.",True,289,https://api.github.com/repos/mlpack/ensmallen/pulls/289,https://github.com/mlpack/ensmallen/pull/289,closed,300,5,8,15,8,11,1,0,[{'name': 't: added feature'}],2021-05-28 21:38:16+00:00,2021-06-04 13:58:24+00:00,577208.0,"6 days, 16:20:08","[{'comment_id': 641831033, 'comment_body': 'I would call this `ObjectivesVecType` and `objectives`, everything we pass is calculated in some form so no need to add a prefix for that at the same time this is closer to the existing `StepTakenFunction`.', 'comment_created': datetime.datetime(2021, 5, 28, 21, 52, 30, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 641832337, 'comment_body': 'It is indeed, but i wanted to differentiate between then because it will cause very long codes and might be polluting. \n\nSo, I created a separate MOOTypedForms specifically for MOO based works and then did ```hasBool``` and ```hasVoid``` in them. \n\nIf I were to add this in TypedForms I would have to add\n\n```hasMOObool``` and ```hasMOOVoid```. In my way, we get to not touch our old implementation at all, and add these functionalities. ', 'comment_created': datetime.datetime(2021, 5, 28, 21, 56, 57, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 642146721, 'comment_body': 'Not sure I see the connection, I was referring to the naming of the parameters here.', 'comment_created': datetime.datetime(2021, 5, 30, 23, 56, 24, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 642578549, 'comment_body': ""I was clarifying as to why its similar to ```StepTakenFunction```, I've applied your suggestion on the name change already :+1:. Looks like an instance of miscommunication, haha "", 'comment_created': datetime.datetime(2021, 5, 31, 15, 57, 52, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 643280101, 'comment_body': 'Let use multi-objective optimization here, just to make sure everyone knows what MOO means.', 'comment_created': datetime.datetime(2021, 6, 1, 16, 39, 24, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 643281867, 'comment_body': ""Looks like I can't pass `genCounter`."", 'comment_created': datetime.datetime(2021, 6, 1, 16, 40, 51, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 643282656, 'comment_body': '```suggestion\r\n```\r\n\r\nRemove the extra line here.', 'comment_created': datetime.datetime(2021, 6, 1, 16, 41, 26, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 643286401, 'comment_body': 'Yes, this is an internal private counter meant to be in sync with ```generations++``` inside the main loop of optimization. ', 'comment_created': datetime.datetime(2021, 6, 1, 16, 44, 29, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 643290195, 'comment_body': 'Think of it similar to ```steps``` in ```early_stop_at_min_loss.hpp```', 'comment_created': datetime.datetime(2021, 6, 1, 16, 47, 33, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 643308920, 'comment_body': 'Ah, as per convention, I should remove the doc from there. Sure!', 'comment_created': datetime.datetime(2021, 6, 1, 17, 1, 49, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 643966719, 'comment_body': ""Yes, let's remove it from the doc."", 'comment_created': datetime.datetime(2021, 6, 2, 13, 33, 22, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}]","[{'commit_sha': 'eb345f134600089488a8253817b56349ae85e603', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5853712ba1d2db2ce676fe01eafad6111f2bb3c3', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25c4af46bf3360a6ebc144358e1297a73fdaa5ba', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4a4515613052e3542b627e5f1abdc5aa579c76a9', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5afdcdd9e35acb2c643d4a14ab01e2f4d942e422', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5082d8213377f2927b10f986922f17a6da74dce9', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d05ff62ec068d8acb7fa02293e2dd1faf651410', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '873d951e2eb0ef2615013af7b5ca200dfe7e1513', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5e85c98744c4fa75af91b6d509dcf8785a2af1d', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7215436fe3e3e3ba07855d6593099eaf3b9dd72', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '526f1d449f705f1f23a2aa67fd06e657f5a698d9', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d4023c855b0341ccb723cb98a03586ec66a3f8b', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72ced21bb44abccee3008a658b567fe20f2d2dd5', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3eb05e9ddfcad631fe86c8934d370a01f999dec1', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d28ed41c6f280036cf52e0e202b30d8fc798e1c', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}]",Nanubala Gnana Sai,45007169,,User,,73,,79,42
587758415,Implement MOEA/D - DE,"This PR is a continuation of #210. Till now I've made these changes

Address issue #176 
* Naming changes
* Fixing algorithms 
* Wrapping codes into functions
* Argument passing fixed

****Important**: For more details regarding its testing and comparison against other algorithms. Refer [this](https://github.com/mlpack/ensmallen/issues/294)  discussion.

The following remains to be done

**TODO**
  

- [x] Adding more sanity checks
- [x] ~Let user explicitly choose whether they want to preserve diversity or not~ 
- [x] ~Use a Policy-based approach to delegate Weight initialization and Decomposition.~
- [x] Discard ```arma::mat``` for ```InputType``` and ```OutputType```.
- [x] Add test cases for various MatType: Stress testing and accuracy measurement. Schaffer and Fonseca pass currently for 
double.
- [x] Use the CheckArbitraryFunctionType API once that PR is merged.
- [x] Assert ```RequireDenseFloatingType``` InputType.
- [x] ~After ZDT is merged, test against it: report results. (or maybe do it in separate PR?)~

 **FIXME**
- [x] Handle zero weight condition in Tchebycheff decomposition
- [x] Updating Solutions 

**DOCUMENTATION**

- [x] Write about MOEA/D-DE in optimizer.md
- [x] Update History.MD
- [x]  Finalize docs.

**Memory**
- [x] Find and remove redundant & expensive matrix copy.
- [x] Find and remove leaks

**Testing**
- [x] Add callback test



**REVIEWS**
 Requesting @zoq @say4n @rcurtin  for reviews.
",True,269,https://api.github.com/repos/mlpack/ensmallen/pulls/269,https://github.com/mlpack/ensmallen/pull/269,closed,1334,1,9,128,22,38,2,0,"[{'name': 'c: optimizers'}, {'name': 's: keep open'}]",2021-03-09 10:28:26+00:00,2021-06-15 19:07:30+00:00,8498344.0,"98 days, 8:39:04","[{'comment_id': 593806989, 'comment_body': '```suggestion\r\noptimization subproblems and optimizes them simultaneously. Each subproblem randomly uses information from neighboring\r\n```', 'comment_created': datetime.datetime(2021, 3, 13, 22, 3, 7, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 593807027, 'comment_body': '```suggestion\r\n* `MOEAD(`_`populationSize, numGeneration, crossoverProb, mutationProb, mutationStrength, neighborSize, distributionIndex, lowerBound, neighborProb, differentialWeight, maxReplace, upperBound`_`)`\r\n```\r\n\r\nRemove some extra spaces.', 'comment_created': datetime.datetime(2021, 3, 13, 22, 3, 34, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 593807094, 'comment_body': 'Looks like not all parameters are listed here e.g. `numGeneration`.', 'comment_created': datetime.datetime(2021, 3, 13, 22, 4, 26, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 593807264, 'comment_body': ""```suggestion\r\n * @author Utkarsh Rai\r\n * @author Nanubala Gnana Sai\r\n *\r\n```\r\n\r\nThat's the format we used in other files."", 'comment_created': datetime.datetime(2021, 3, 13, 22, 6, 8, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 596509109, 'comment_body': ""The type should come before the method name unless it's a typename."", 'comment_created': datetime.datetime(2021, 3, 18, 2, 30, 57, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 596509385, 'comment_body': '```suggestion\r\n  // Sanity checks.\r\n```\r\n\r\nMissing stop at the end.', 'comment_created': datetime.datetime(2021, 3, 18, 2, 31, 59, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 596510835, 'comment_body': 'Let us put that in the constructor, see https://github.com/mlpack/ensmallen/blob/master/include/ensmallen_bits/adam/adam.hpp#L98 for an example.', 'comment_created': datetime.datetime(2021, 3, 18, 2, 36, 28, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 596511110, 'comment_body': '```suggestion\r\n    // Ignore distance from self.\r\n```\r\n\r\nMissing stop.', 'comment_created': datetime.datetime(2021, 3, 18, 2, 37, 20, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 596511562, 'comment_body': 'The indentation is off.', 'comment_created': datetime.datetime(2021, 3, 18, 2, 38, 30, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 596511958, 'comment_body': '```suggestion\r\n      bool sampleNeighbor = arma::randu() < neighborProb;\r\n```\r\n\r\nNo need for the extra `()`.', 'comment_created': datetime.datetime(2021, 3, 18, 2, 39, 48, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 596512243, 'comment_body': '```suggestion\r\n```\r\n\r\nRemove the extra empty line here.', 'comment_created': datetime.datetime(2021, 3, 18, 2, 40, 36, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 596512348, 'comment_body': 'The indentation is off.', 'comment_created': datetime.datetime(2021, 3, 18, 2, 40, 55, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 596512426, 'comment_body': 'The indentation is off.', 'comment_created': datetime.datetime(2021, 3, 18, 2, 41, 12, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 596512484, 'comment_body': 'The indentation is off.', 'comment_created': datetime.datetime(2021, 3, 18, 2, 41, 27, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 596512732, 'comment_body': 'The indentation is off.', 'comment_created': datetime.datetime(2021, 3, 18, 2, 42, 5, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 596512866, 'comment_body': 'The indentation is off.', 'comment_created': datetime.datetime(2021, 3, 18, 2, 42, 28, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 596513560, 'comment_body': 'Should start with a capital letter and end with a stop.', 'comment_created': datetime.datetime(2021, 3, 18, 2, 44, 34, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 596513953, 'comment_body': 'Can you write the same tests for `arma::fmat` as well?', 'comment_created': datetime.datetime(2021, 3, 18, 2, 45, 35, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 597192208, 'comment_body': 'This unearthed sooooo many problems. Thank you!', 'comment_created': datetime.datetime(2021, 3, 18, 19, 43, 5, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 650147287, 'comment_body': 'Maybe it makes sense to have `neighborProb` first followed by `neighborSize` instead of putting `distributionIndex` in between.', 'comment_created': datetime.datetime(2021, 6, 11, 17, 13, 19, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 650148111, 'comment_body': '```suggestion\r\n  // Check if upper bound is a vector of a single dimension.\r\n```', 'comment_created': datetime.datetime(2021, 6, 11, 17, 14, 39, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 650148955, 'comment_body': 'I guess, still a good idea to add `epsilon` into the constructor and use that parameter here.', 'comment_created': datetime.datetime(2021, 6, 11, 17, 16, 7, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 650149613, 'comment_body': '```suggestion\r\n          iterate.n_rows, iterate.n_cols) - 0.5 + iterate;\r\n```\r\n\r\nPedantic style issue.', 'comment_created': datetime.datetime(2021, 6, 11, 17, 17, 24, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 650150912, 'comment_body': '```suggestion\r\n```\r\n\r\nRemove the extra empty line here.', 'comment_created': datetime.datetime(2021, 6, 11, 17, 19, 44, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 650155659, 'comment_body': ""Maybe I missed something but shouldn't we use another crossover probability  for each gene?"", 'comment_created': datetime.datetime(2021, 6, 11, 17, 27, 42, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 650156080, 'comment_body': 'Could be `const` to make it obvious that the value will not change.', 'comment_created': datetime.datetime(2021, 6, 11, 17, 28, 29, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 650156947, 'comment_body': 'Would be nice to add a comment here.', 'comment_created': datetime.datetime(2021, 6, 11, 17, 30, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 650157068, 'comment_body': '```suggestion\r\n    for (size_t geneIdx = 0; geneIdx < numVariables; ++geneIdx)\r\n```', 'comment_created': datetime.datetime(2021, 6, 11, 17, 30, 13, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 650157472, 'comment_body': '```suggestion\r\n        value = 2.0 * rand + (1.0 - 2. * rand) *\r\n            std::pow(upperDelta, distributionIndex + 1.0);\r\n        perturbationFactor = std::pow(value, mutationPower) - 1.0;\r\n```', 'comment_created': datetime.datetime(2021, 6, 11, 17, 30, 51, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 650157701, 'comment_body': '```suggestion\r\n        value = 2.0 * (1.0 - rand) + 2.0 *(rand - 0.5) *\r\n            std::pow(lowerDelta, distributionIndex + 1.0);\r\n        perturbationFactor = 1.0 - std::pow(value, mutationPower);\r\n```', 'comment_created': datetime.datetime(2021, 6, 11, 17, 31, 18, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 650201381, 'comment_body': ""I think you mean delta should be generated inside the loop? That's a correct remark, I'll change that."", 'comment_created': datetime.datetime(2021, 6, 11, 18, 50, 58, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 650414745, 'comment_body': ""```suggestion\r\n        if (arma::randu() < crossoverProb)\r\n```\r\n\r\nit's only used once so no need to create an alias for the parameter."", 'comment_created': datetime.datetime(2021, 6, 12, 17, 21, 35, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 650414933, 'comment_body': '```suggestion\r\n      std::tie(r2, r3) =\r\n          Mating(subProblemIdx, neighborIndices, sampleNeighbor);\r\n```\r\n\r\nAs mentioned in the comments, maybe you can check your editor configuration, those things are easy to catch, like in this example you used tabs and spaces.', 'comment_created': datetime.datetime(2021, 6, 12, 17, 23, 5, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 650414994, 'comment_body': '```suggestion\r\n    candidate = arma::min(arma::max(candidate, lowerBound), upperBound);\r\n```\r\n', 'comment_created': datetime.datetime(2021, 6, 12, 17, 24, 6, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 650415011, 'comment_body': '```suggestion\r\n    arma::cube paretoSet = opt.ParetoSet();\r\n```', 'comment_created': datetime.datetime(2021, 6, 12, 17, 24, 25, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 650419040, 'comment_body': '```suggestion\r\n      size_t replaceCounter = 0;\r\n```\r\n\r\nTo be consistent.', 'comment_created': datetime.datetime(2021, 6, 12, 18, 8, 53, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 650419070, 'comment_body': '```suggestion\r\n        iterate.n_rows, iterate.n_cols) - 0.5 + iterate;\r\n```', 'comment_created': datetime.datetime(2021, 6, 12, 18, 9, 25, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 650419149, 'comment_body': '```suggestion\r\n  std::tuple<size_t, size_t> Mating(size_t subProblemIdx,\r\n                                     const arma::umat& neighborSize,\r\n                                     bool sampleNeighbor);\r\n```', 'comment_created': datetime.datetime(2021, 6, 12, 18, 10, 8, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}]","[{'commit_sha': '0419469103c1662ce055159142e10308974d6a99', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19425d4d78db5bcbefe8e72a0a022ed475ccdba5', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '91df7068c5528bcc2c5ebe3a54f6e6644f8c6f3b', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d91ccc37fc7e9fc1e32823362477b7c568063ea', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a52f1ad5f4455c8b6a60357d537731ace0e03740', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb414e68edce830d98a963f6476b20c346c97592', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3cd94aeb67a5dc96dd351652b22d53429ec85ccc', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '28be655f0571065b8a6e588873735a7c725e4e11', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ded4a43837e0ab18dd697a4d0215b5006ab67b9e', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b01e7fab18bd6d4d38f48cbfc808cf49924dd754', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a07b38a3ac876295fda2f1b2e96075305deb0c8', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f4c348a316c43c3321b816add7c6cbf95cedbabc', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3b812a2834d9d5406d61780efc13c567c62080b', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad8383ebadd0757df97b5b70f4898d2be493c97a', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09ec4a23ac6f7f1872d25fe3e6d22c927291f3a3', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ae80352d852c33052784d5358053b7b7f0d6fbe', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '89f6b8fb4134a41ad8eb18eff547d1d976b1f8e4', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd69c899bfd67dbbcc62ec4a77aa10cd9fa5614c6', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a4dcccd26a030e8bbfbf137e8c253a317cfdca0f', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99f6f2b630fe9f5487657549e83c67fa489d5972', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73a3b90c1cdae0f6293cffcabfa92095e43068b1', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd67ed85dd0fe1683b054d0736eb3dc247282ae3f', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c281336e64e32e29e1b99a01d81d990951a9a933', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd794746062fcb190ecbf14c496906ebee8d67b14', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d50c879fc0778260b7acd4dcf471e96beb1b194', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed5ad0e53b0821ae17cbdb462c852066bba66b21', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '101137095336d1993282a3f164f2e612ac6e1f45', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '41d58bc65233182a625b0670d60080f3c4518127', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b8fe49f7c63b945cd41a0f9cf3c3906f9754488', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b1ba5a21236068c8b2b30387d16ca05838593c78', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08b24f1bc8e0ddd78fce97983b5c811b016af849', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fefcaa6b1fb6effb480e55f38918a415bf0a60e5', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57815a59b057fcba13145aa878889080380173fa', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b2ae1312dce879a143e86eebd33cc22664a2739', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aecbe43c3be2e643e4edfc9e7582e85732d75aee', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2e8ba4d1446deacd6822a1889e8e1d73706dfd90', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c067fcc68e48a8a84da2dca4c1996bdd19fdee58', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee92ed0f7ba58669b118c23fe90d15ae16929c68', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf9ec55754e7898e636f735f890da73999b4f29c', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e04519b9369d8254e2149aa9715c44d145ad3fad', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c380dd5d7d117a7758ac8a1c739bb246f647b6a3', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cab48a009d94f8db9466cbbad0ac18c4adfd76fe', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eaf86e9c221cec050ee8c3f19dc2b416b1f03473', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e73e79de9bec96a52ff807542dff68348522dc65', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b1bd1445ce071488379a694043eceb82cf9e0455', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '288b3d710a8a94291ceb7078effb39290f030b49', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '33bcfca29d86c4673b82ee18ccbb5c8872d39d68', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c388bde9ea151b6d1caebbe9bef12e19b5cc739e', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be8e45b45ac7cb803f15b7c97be83c556c2af02f', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f30929c310c2e13b932b3835edbf8c3e480df41', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f1488ab44e1117982759a6e1d2a34073301d28e9', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e27bdf1f237299940fdefdb49844848cf762e6b', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd2615d5471b50d174d132459d095796e5be05d34', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73ef983352b520d47b677179cac5fa71d51ebfd8', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f38f6a1d44e22e75577b0e206831ce1674ec9b07', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a95c0e647a3a2668ba72c1cfdf108480de607c53', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a52d9ab101258b2ed792cf9d2c047aef04c3086', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c888154b08c85f19816df4b6eaecbe722deed0f', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c602dc13869697007d51ddb515b0f8b43320b208', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f516864104e943bbb75881f3307a32a465babb00', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83e0850cc7be997e19bd3f0f51506652b2b9bb7b', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'faa94ab15bc3c1877b11aeb2884c13b75151fe36', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c849873522c1ddb0ab529337c603cfcf5e1feff9', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d7eec84b9e72cad9158d759eec0934ffa6a5c3e', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bfde39de2f326377246cff7bc3f8979ec09fe55f', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47c981ec3a9daa2b4f5a622e71b68e3f1ffcc332', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e515851b405196946d7cb3cc33baafd02da75a54', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ce3bd3d140fc22051099fdb3711dd027871a98b', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1149301fa59405c9cd3f886ea42c3fb1bb2f6623', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '391e164fb700ae528b3d158acf00feb795204b2f', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e086bf2bd05a2bb9df318b69ac552398da3405e1', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '410eb50fd27b0ff8d2d6aecf52a726321c3ff509', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6703d070016c0e7693a6e1185aa31bdaded2fbfd', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a44da082b2376d8d458670234207697f4b62e0cd', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57c8d70a024782304f0b0bb918fa2148a146af62', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '80a2f851b6e9a610a58e2e737f6bb997a43facc3', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b4f862d73f01e493a9b1d8ddcd027d17fab3a227', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'efa5a2efbd597da5ec2fff6014495daa989d6ac0', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c11b532bcf5c4623d8e7df6cecd9126324aabef', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2822fae878a1424b92f0214dd66ce77abedc5f2c', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5fb082a95ad317a7c1b8d5c0b2e98c7c936cf963', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '274f9f06e98aef5682e98f2a2dea69af49393297', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34366e7237e9153e896db8ddfafa56aa7b945576', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '556ded8c4850d06e734d485c3647b11ed95ed37e', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62dc59099ccf794cd9ed59d4da37f48f08b0271c', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d7ad342ee30afe4e3b5305667d784a3a9a5a553', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd4b475b8caffd05cc63212a566d09e30985d115', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f597ddd11f5419cc25ef355ca0e215c984a84dd', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08fa726dc188f39a40076f9c5e3de1d68b3bc2ac', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5adfba0bbdbbbf2c4c3c382f73cad2f0ea782981', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a068a6e40dc5c5aeee17b3ca6e0e1ac37f56f87f', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5f49a00a284aaa58ecf584233dcb8e894eaf101', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd2a396cde113297140196a4980011396cc9b7015', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '950e36c2d0c1da619518d5ab472c2724264e899e', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6acbe14bfbf916ba18982e0ee2b2812d4af08f41', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb587225d4a2c62128b6e6bb81f219b03e5f19da', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd2522667ed80feb929b6e19cfa1b924dd2ebd92', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7505121ee6985a3b9ae0d907b42537a9aa37b9ca', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0828c7bfe490fe54920b6ea669bf569d4eef531c', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e4fa69b08c3eef0a79657c920641365e2d9f566', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3404708708e362b66379b50ce1d83d809752d9b6', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4824e72f93d6e85ffdb5ad357772419712ae00a4', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d93405f5b6665d814973e383643bf3f524bdd09', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf850f50d16622de4969c5b750a847e2f004eb73', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '27404cdaad554457c0f50654dee51804b9e2456c', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad9f355503df3b0c94bf8e05e09b7bd3333f89e3', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '80fbf6c9e803c747b517ea46edbd89fa28460a67', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1dadc1bbb0bcb5f516dd69bb02d0b711268716f9', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '604209a0f7bd12e87a8b4f6a7e6f5dbd56895e2e', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '81e07bf4555331c805e749212f878449d4cd8868', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a646f7c1361499e46355a71d35c96f8bf1854421', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3267c42e4d4908aadd17d4de068f3ef70b70818a', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b0c4c1b7b12de9ad6b0b7ab1944f5fb181d6b3a1', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa54aade4aa50013d894f6738e054d7428505de3', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d9e73c13934b519cc117981b9ac74f997faef31', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '287bf825fa8c356a4a51f6d485f2782b2b39abce', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60d19c48d7b3b2d662f4c6ca1f71fd876a9d473f', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'edd089a72b3c21efe7d667bcc956f191255f9949', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7178fef0e5ec159cd374619eeb0f0aff4c948db', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53cae18ff6338a7a73cc9c811411e5e57833f8e8', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e893dfd3ee3bcb5abf5ae0d1ce06821b7dd7e8ee', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b1fa440fda5f62a66cf7becced5443922ef80ce4', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a2a7ef166b7d469a8c0fcc153266f51f03ddbe83', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d794cb4bc47f5d2a59d58e8830e14975d8f338c', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40e44d4ede078d7347ee6d84874638c99e3afcb2', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5cd6bc8c29b02ef69632af9055e4e084355ce426', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da7683b770867355c8d9c5d03f3b5ed363931089', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '973d4a7bccfa9a4dce3c02428dcffa3abbff2373', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}]",Nanubala Gnana Sai,45007169,,User,,73,,79,42
670952625,Introduce Policy Methods for MOEA/D-DE,"Continuation of #269 

**Weight decomposition**
- [x] Tchebycheff
- [x] Weighted
- [x]  PBI

**Weigh Init**

- [x] Bayesian Bootstrap

**Testing**
- [x] ZDT


@zoq  @coatless @say4n ",True,293,https://api.github.com/repos/mlpack/ensmallen/pulls/293,https://github.com/mlpack/ensmallen/pull/293,closed,487,116,10,43,10,36,1,0,[{'name': 't: added feature'}],2021-06-16 02:40:21+00:00,2021-06-18 12:26:15+00:00,207954.0,"2 days, 9:45:54","[{'comment_id': 652308319, 'comment_body': 'I think it would be useful to call this `MOEADType` now and provide some aliases, see https://github.com/mlpack/ensmallen/blob/3497f276f4f8c399bcc565f723735a8dd7c86864/include/ensmallen_bits/sgd/sgd.hpp#L247-L253 for an example, that way we can keep using `MOEAD` in the tests and I think users will most probably go for the default policies as well, and in this case it seems odd to use `MOEAD<>`. Let me know what you think.', 'comment_created': datetime.datetime(2021, 6, 16, 2, 54, 18, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 652308969, 'comment_body': 'Okay, but we would need to write 3 (decomposition) x 4 (init) = 12 aliases.', 'comment_created': datetime.datetime(2021, 6, 16, 2, 56, 29, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 652309340, 'comment_body': 'And how do we name each of them, any ideas?', 'comment_created': datetime.datetime(2021, 6, 16, 2, 57, 7, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 652312401, 'comment_body': 'I would just go with `MOEA` for now, a user can always use `MOEAType<...>` or whatever we call this, and specify the policies same as the user would do right now.', 'comment_created': datetime.datetime(2021, 6, 16, 3, 0, 4, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 652316018, 'comment_body': 'How about\r\n\r\n```\r\nusing DefaultMOEAD = MOEAD<BayesianBootStrap, Tchebycheff>;\r\n```', 'comment_created': datetime.datetime(2021, 6, 16, 3, 5, 41, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 652316308, 'comment_body': 'I think that works.', 'comment_created': datetime.datetime(2021, 6, 16, 3, 6, 45, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 652317394, 'comment_body': 'The function and parameter description is missing, looks like that applies for every policy/method.', 'comment_created': datetime.datetime(2021, 6, 16, 3, 10, 4, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 652317995, 'comment_body': 'That one is so easy, love it.', 'comment_created': datetime.datetime(2021, 6, 16, 3, 12, 8, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 652318112, 'comment_body': '```suggestion\r\n//! Weight Init policies.\r\n```', 'comment_created': datetime.datetime(2021, 6, 16, 3, 12, 33, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 652318129, 'comment_body': '```suggestion\r\n//! Decomposition policies.\r\n```', 'comment_created': datetime.datetime(2021, 6, 16, 3, 12, 39, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 652318219, 'comment_body': '```suggestion\r\n        const InitPolicyType initPolicy = InitPolicyType(),\r\n```', 'comment_created': datetime.datetime(2021, 6, 16, 3, 13, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 652318381, 'comment_body': 'Nice catch!', 'comment_created': datetime.datetime(2021, 6, 16, 3, 13, 27, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 652318883, 'comment_body': 'I think we can be a little bit more verbose on the `DecompPolicyType` naming here, `DecompositionPolicyType`?', 'comment_created': datetime.datetime(2021, 6, 16, 3, 14, 58, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 652319652, 'comment_body': ""I would mark everything const here, just to make sure it's obvious the values do not change. "", 'comment_created': datetime.datetime(2021, 6, 16, 3, 17, 26, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 652319847, 'comment_body': '```suggestion\r\n    const size_t numPartitions  = FindNumParitions(numPoints, numObjectives);\r\n    const size_t validNumPoints = FindNumUniformPoints(numPartitions, numObjectives);\r\n```', 'comment_created': datetime.datetime(2021, 6, 16, 3, 18, 11, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 652319964, 'comment_body': '```suggestion\r\n      const size_t nextValidNumPoints = FindNumUniformPoints(numPartitions + 1, numObjectives);\r\n```', 'comment_created': datetime.datetime(2021, 6, 16, 3, 18, 34, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 652320202, 'comment_body': 'I see, this is what @coatless suggested?', 'comment_created': datetime.datetime(2021, 6, 16, 3, 19, 30, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 652320764, 'comment_body': '```suggestion\r\n *   title={MOEA/D: A multiobjective evolutionary algorithm based on decomposition},\r\n *   author={Zhang, Qingfu and Li, Hui},\r\n *   journal={IEEE Transactions on evolutionary computation},\r\n *   pages={712--731},\r\n *   year={2007}\r\n```', 'comment_created': datetime.datetime(2021, 6, 16, 3, 21, 17, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 652320847, 'comment_body': '```suggestion\r\n *   article{zhang2007moea,\r\n *   title={MOEA/D: A multiobjective evolutionary algorithm based on decomposition},\r\n *   author={Zhang, Qingfu and Li, Hui},\r\n *   journal={IEEE Transactions on evolutionary computation},\r\n *   pages={712--731},\r\n *   year={2007}\r\n```', 'comment_created': datetime.datetime(2021, 6, 16, 3, 21, 35, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 652320934, 'comment_body': '```suggestion\r\n *   title={MOEA/D: A multiobjective evolutionary algorithm based on decomposition},\r\n *   author={Zhang, Qingfu and Li, Hui},\r\n *   journal={IEEE Transactions on evolutionary computation},\r\n *   pages={712--731},\r\n *   year={2007}\r\n```', 'comment_created': datetime.datetime(2021, 6, 16, 3, 21, 51, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 652321049, 'comment_body': '```suggestion\r\n *   title={Multiobjective optimization problems with complicated Pareto sets, MOEA/D and NSGA-II},\r\n *   author={Li, Hui and Zhang, Qingfu},\r\n *   journal={IEEE transactions on evolutionary computation},\r\n *   pages={284--302},\r\n *   year={2008},\r\n```', 'comment_created': datetime.datetime(2021, 6, 16, 3, 22, 18, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 652325042, 'comment_body': 'Can we keep decomp policy? I have commented what it means. The problem is it gets too verbose and takes up lots of space. \n\nLet me know if you think otherwise. ', 'comment_created': datetime.datetime(2021, 6, 16, 3, 36, 14, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 652325431, 'comment_body': 'Okay.', 'comment_created': datetime.datetime(2021, 6, 16, 3, 37, 37, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 652349393, 'comment_body': 'No, this is a binomial coefficient. That one was Dirichilet', 'comment_created': datetime.datetime(2021, 6, 16, 4, 55, 16, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 652715239, 'comment_body': '```suggestion\r\n * The Penalty Based Boundary Intersection (PBI) decomposition policy.\r\n```', 'comment_created': datetime.datetime(2021, 6, 16, 13, 56, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 652783251, 'comment_body': '```suggestion\r\n   * policy.\r\n   *\r\n   * @param theta The penalty value.\r\n```', 'comment_created': datetime.datetime(2021, 6, 16, 15, 6, 57, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 652784455, 'comment_body': '```suggestion\r\n * The Tchebycheff Weight decomposition policy.\r\n```', 'comment_created': datetime.datetime(2021, 6, 16, 15, 8, 16, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 652785156, 'comment_body': '```suggestion\r\n * The Weighted Average decomposition policy.\r\n```', 'comment_created': datetime.datetime(2021, 6, 16, 15, 9, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 652785914, 'comment_body': '```suggestion\r\n//! Weight initialization policies.\r\n```', 'comment_created': datetime.datetime(2021, 6, 16, 15, 9, 50, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 652787338, 'comment_body': '```suggestion\r\n // Nothing to do here.\r\n```', 'comment_created': datetime.datetime(2021, 6, 16, 15, 11, 22, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 652789527, 'comment_body': '```suggestion\r\n * numbers which is guaranteed to sum up to 1.\r\n```', 'comment_created': datetime.datetime(2021, 6, 16, 15, 13, 41, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 652790618, 'comment_body': 'I think the paper below is good enough for a reference, so I would remove the link here.', 'comment_created': datetime.datetime(2021, 6, 16, 15, 14, 50, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 652856459, 'comment_body': 'Any reason why that one is commented out?', 'comment_created': datetime.datetime(2021, 6, 16, 16, 31, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 652858407, 'comment_body': 'We could add `/std:c++11` (https://docs.microsoft.com/en-us/cpp/build/reference/std-specify-language-standard-version?view=msvc-160) and see if that helps.', 'comment_created': datetime.datetime(2021, 6, 16, 16, 33, 36, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 652858516, 'comment_body': ""No reason! I was just testing against NSGA-II. I'll revert that be assured. "", 'comment_created': datetime.datetime(2021, 6, 16, 16, 33, 45, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 652942361, 'comment_body': ""Good ol' Windows."", 'comment_created': datetime.datetime(2021, 6, 16, 18, 24, 10, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}]","[{'commit_sha': '9e6b3cad229cb2cddc7f7ada44d2a7decfb22474', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c66ee3a09873134626ecb34121e86595e7e232c1', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2749d31e7e6251ff678c1135485bd7fe7b72e1d0', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd41c265202bf33a3a87ff8d990baaed832dd9727', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9242279aba796e031fd29526ae8f8e3b1be7f822', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e08c0c86c3c1462d3746bf380841fc45dbc4d061', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7505ecc6c74656b56a979ab474fcf532feb7460c', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dbc24bbe4c949d8e7b827def377855efcfd4dee2', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6868e2ca94949a1fbc6d448140369ab5fc2b06b1', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '945e21abb5a20b627033325e4e70b24257367811', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee41faad7d3852c9d9e1e0ce24dede8255ea5da9', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e1164e9521f250c2966943f5d526068fdbbf694', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cfed986674c732222ec4be16fe128c80b196fa56', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4692047af2670d1dcf4cafab1d4639360ba08815', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e092c4d26247c7fd4e5769887404cef336bd0ada', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ade51c915b3ac1a25c815eb9495282b47d600b44', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ec1f2e43071aa3a79e76cecef546d51bb10ee49', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8952378a0436b8358c3916d5327323db8e8b7cd9', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c02c5f9694e3f4002154fb69d5db26b028e0c7a', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9beaa5f0d47f0b7974d18fc163a079025ed4934e', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de612d3d099346cc1a1deecad9215e5f499c77f3', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e3e32365469e9d658ddb4511e0383875a4dd534', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d81b422d2ff9c842495aeac188aa11b253a29cd', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4997f550d2723d20c795acc51e749274fc2378ed', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd02d5e46aa8f66846d7bdced4109d2758dd40808', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '77bd44bed3dc7532e7bd4e53caa029f17459f13e', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '23ff19074ab30e511c8adb3318d9bd1a70871b74', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40c9aaad7ff228f284a3b9a839f6c8ccaf16b0ee', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c79f593ff2bdb582da23f75fcc512a21794a34ac', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d86a46a7b3a3ad84634fcef197d360d1b12cf0b', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be9f8b6346c496eb586d85b0dcd6de04598d5c4b', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1fbf162472fd61d507373a74f78bc58ccbca2b5', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79aa3f637a6cfa3db8b229b52c1d1e099798526d', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd7f2be2adb9e35a6316385ee39418e7c6dcb156b', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '955e7db555be645230b01b8d66b65225d41f1477', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e2b883dbdaca9a1b97e4304a7c78b5cfd355bc31', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3b865fcf0dbc9d14957dc259801ac142a73ac77', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd66c3d0ca95eb84f3a2234bcccfa0b6915c38d82', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '91ed336d0f30e02207f49bd1a3ca90c66fa95f3f', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a8b9018d83c5807cdf6939e452c88cad1d2f6797', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '18a4ca67e8155c0c03119701c547af79f68eb1c5', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd6cf8a1166da4f6b234e7ae39a76f5d532f0880', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff03b068482d6dde4a227108aff7b386cff95fa4', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}]",Nanubala Gnana Sai,45007169,,User,,73,,79,42
673213154,Add Das-Dennis weight initialization method,"Continuing #293 

- [x] Add uniform_init.hpp.
- [x] Use ```DefaultMOEAD = MOEAD<Uniform, Tchebycheff>```.
- [x]  Use ```BBSMOEAD = MOEAD<BayesianBootstrap, Tchebycheff>```
- [x] Test and verify its working locally.
- [x] Document uniform_init.hpp.
- [x] Add documentation in optimizers.md.
- [x] HISTORY.md.",True,295,https://api.github.com/repos/mlpack/ensmallen/pulls/295,https://github.com/mlpack/ensmallen/pull/295,closed,236,21,5,19,11,22,2,0,"[{'name': 'c: optimizers'}, {'name': 't: added feature'}]",2021-06-18 06:48:26+00:00,2021-06-23 18:23:59+00:00,473733.0,"5 days, 11:35:33","[{'comment_id': 654183464, 'comment_body': 'Any cleaner way to insert an element into a vector?', 'comment_created': datetime.datetime(2021, 6, 18, 6, 49, 50, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 654249475, 'comment_body': ""I was wondering why there's an integer overflow happening here; then it hit me. ```std::tgamma(300)``` is shooting off to infinity. This is a very naive approach to finding Binomial Coefficient, I guess I could utilize the fact that the denominator and numerator cancel out a lot of terms. Though it'll certainly be nice if armadillo had a support for this algorithm built-in cc/ @conradsnicta "", 'comment_created': datetime.datetime(2021, 6, 18, 8, 36, 42, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 654518789, 'comment_body': 'Was the test failing with `populationSize = 150`?', 'comment_created': datetime.datetime(2021, 6, 18, 15, 24, 48, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 654518918, 'comment_body': '```suggestion\r\n * The Uniform (Das Dennis) methodology of Weight Initialization.\r\n```', 'comment_created': datetime.datetime(2021, 6, 18, 15, 25, 1, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 654519118, 'comment_body': '```suggestion\r\n * For more information, see the following:\r\n *\r\n```', 'comment_created': datetime.datetime(2021, 6, 18, 15, 25, 21, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 654519716, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 6, 18, 15, 26, 17, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 654521038, 'comment_body': ""It's not super clean, but I think it works, at least this way we can avoid the std::vector conversion."", 'comment_created': datetime.datetime(2021, 6, 18, 15, 28, 23, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 654522074, 'comment_body': 'Note to myself, check that part in more depth.', 'comment_created': datetime.datetime(2021, 6, 18, 15, 29, 59, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 654531088, 'comment_body': 'Add [this](https://www.geeksforgeeks.org/space-and-time-efficient-binomial-coefficient/)  to your notes.', 'comment_created': datetime.datetime(2021, 6, 18, 15, 44, 52, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 654534461, 'comment_body': ""![image](https://user-images.githubusercontent.com/45007169/122586740-a7848700-d07a-11eb-9486-77d2257eb429.png)\r\n\r\nThis is because the binomial coefficient value (H) should equate to the size of the population. This algorithm is restrictive in that way. You can read Section IV (If I recall correctly) of the cited paper to know more. To ensure this, you can find I've added an ```if``` statement inside ```Generate``` method to catch a mismatch. \r\n\r\nThe main point is, there is only a certain number of points that can be generated uniformly given the number of partitions(gaps between points) and the number of objectives. "", 'comment_created': datetime.datetime(2021, 6, 18, 15, 50, 46, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 654608278, 'comment_body': '```suggestion\r\n  size_t FindNumUniformPoints(const size_t numObjectives,\r\n                              const size_t numPartitions)\r\n```\r\n\r\nJust to trigger the CI.', 'comment_created': datetime.datetime(2021, 6, 18, 18, 17, 27, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 655608228, 'comment_body': ""Slight hiccup, we actually need to use one of ensmallen's output streams:\r\n\r\nPerhaps, we should use: \r\n\r\n```\r\nstd::ostream& Info\r\n```\r\n\r\nhttps://github.com/mlpack/ensmallen/blob/0af8004ff989ed4cce3a2bcaf7eeabb1313ac913/include/ensmallen_bits/log.hpp#L73-L77"", 'comment_created': datetime.datetime(2021, 6, 21, 18, 21, 24, tzinfo=datetime.timezone.utc), 'commenter': 'coatless', 'type': 'User'}, {'comment_id': 655610716, 'comment_body': 'Thanks', 'comment_created': datetime.datetime(2021, 6, 21, 18, 25, 21, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 655633168, 'comment_body': '```suggestion\r\n          << "" cannot be generated uniformly.\\n "" << ""Either choose numPoints as ""\r\n          << validNumPoints << "" (numPartition = "" << numPartitions << "") or ""\r\n          << ""numPoints as "" << nextValidNumPoints << "" (numPartition = ""\r\n          << numPartitions + 1 << "")."";\r\n```\r\n\r\nJust one last minor style issue here as well.', 'comment_created': datetime.datetime(2021, 6, 21, 19, 2, 27, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 655641510, 'comment_body': 'Okay so, I used  ```oss```  for throwing out error. Which should happen regardless of ```ENS_PRINT_INFO```.  So, once I put message inside ```oss```, I used ```std::logic_error(oss.str());```. Which I guess is the norm in our library.', 'comment_created': datetime.datetime(2021, 6, 21, 19, 16, 36, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 655781141, 'comment_body': ""Agreed, I don't think this needs special handling, since this is for throwing an exception instead of outputting something, @coatless correct me if I'm wrong."", 'comment_created': datetime.datetime(2021, 6, 21, 23, 56, 21, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 655781895, 'comment_body': '```suggestion\r\n   ([#295](https://github.com/mlpack/ensmallen/pull/295)).\r\n\r\n```', 'comment_created': datetime.datetime(2021, 6, 21, 23, 58, 28, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 656407638, 'comment_body': '@zoq you are correct. We do not have to worry about `oss` under `throw`. As an example, this pattern is used quite frequently elsewhere: \r\n\r\nhttps://github.com/mlpack/ensmallen/blob/1e70823989a67c89dc4909ff4152bd650b3abb77/include/ensmallen_bits/problems/logistic_regression_function_impl.hpp\r\n', 'comment_created': datetime.datetime(2021, 6, 22, 16, 50, 51, tzinfo=datetime.timezone.utc), 'commenter': 'coatless', 'type': 'User'}, {'comment_id': 656408343, 'comment_body': ""So, this doesn't need to change to using the `Info` portion. Whoops! "", 'comment_created': datetime.datetime(2021, 6, 22, 16, 51, 46, tzinfo=datetime.timezone.utc), 'commenter': 'coatless', 'type': 'User'}, {'comment_id': 656410914, 'comment_body': 'So, thinking about this... The lambda usage is nice, but should we maybe prefer to write this as a standalone function? Similar to the link post? Also, I think the code on the link post is 1-1 with what is written here. Do we need to worry about licensing? ', 'comment_created': datetime.datetime(2021, 6, 22, 16, 55, 12, tzinfo=datetime.timezone.utc), 'commenter': 'coatless', 'type': 'User'}, {'comment_id': 656416227, 'comment_body': ""The reason for making it lambda inside the function was to secure the scope, it won't be used elsewhere. Regarding the heavy correlation, GFG (Geeks for geeks) is kinda open-sourced, and is made to help people(like Stack Overflow). Besides, finding Binomial Coefficient in O(n) isn't a ground breaking research that we're using without citing :) ."", 'comment_created': datetime.datetime(2021, 6, 22, 17, 2, 33, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 657155500, 'comment_body': ""According to https://www.geeksforgeeks.org/copyright-information/ this is fine, but let's add a comment which references the source for the code."", 'comment_created': datetime.datetime(2021, 6, 23, 14, 25, 7, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}]","[{'commit_sha': '60f92647a2affb1509892758f46c07a24db4b032', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96a1998ab60be602407d6c06e37b89670b0e1286', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd7be57a90b488eb35a4ee40e16b4396a6ffd4edc', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '275ded335d3118ef196fdb02905f4b38dc549711', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '501d486fa35ca470f37526cdbf6f9e5427cb9a4c', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf1a9e7e03bb97e9f6c64b53ae62381c735ac5a8', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dbfcf7e20fa1277c1081283743574c7dd06dc485', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ebc527c097f5caa951ba019e49af03f382a70cb', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a8c664ece0c6ffcc9f8ebd23bb559ab0f8e674af', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd98f82599b48e10c7301d2dbaa426a258cef84fd', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9c5d7f3d613c443fbed3740cd7d5e0f20231a22', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c0b4673b495c9baa5f50654f8f7810699bf0594', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50f1245e0198b5f03029b72ad9cc39ef8d1eb5c2', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb3dc29b09fbb3d56bb7c42940f97eecc870f209', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f297c7abde96a1880c028ad9291384799982bb0', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '239916188f3d932976ba061f87d06054b1decaa7', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3268605bd7b31cbed2ecc2fbd0fae1c9b89418c1', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb893f683ca0786d442acc6ebf2ad38c3247cb17', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ac18870ef7246ede3f98e011969fdef6dffb1c6', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}]",Nanubala Gnana Sai,45007169,,User,,73,,79,42
673503071,Add Dirichlet Weight Initialization,"Continuing #293 

- [x] Added dirichilet_init.hpp
- [x] Test and verify locally.
- [x] ```using DirichletMOEAD = MOEAD<Dirichlet, Tchebycheff>```
- [x] Document in dirichlet_init.hpp
- [x] Add documentation in optimizers.md
- [x] History.md",True,296,https://api.github.com/repos/mlpack/ensmallen/pulls/296,https://github.com/mlpack/ensmallen/pull/296,closed,161,20,5,6,9,10,0,0,[],2021-06-18 14:03:46+00:00,2021-06-23 19:54:19+00:00,453033.0,"5 days, 5:50:33","[{'comment_id': 654458725, 'comment_body': '@zoq  Not sure what should be the source ?', 'comment_created': datetime.datetime(2021, 6, 18, 14, 5, 28, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 654524261, 'comment_body': ""I don't think there is one we should reference here."", 'comment_created': datetime.datetime(2021, 6, 18, 15, 33, 36, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 654595324, 'comment_body': 'Generation functions usually allow for the underlying distribution shape to change, e.g.:\r\n\r\n```cpp\r\nrandom.my_dist(n, shape1, shape2)\r\n```\r\n\r\nSo, this is going to generate a dirichlet under `alpha = 1`/ shape = 1. Or: \r\n\r\n```cpp\r\nrandom.my_dist(n, alpha = 1)\r\n```\r\n\r\nIs that the desired outcome? ', 'comment_created': datetime.datetime(2021, 6, 18, 17, 50, 9, tzinfo=datetime.timezone.utc), 'commenter': 'coatless', 'type': 'User'}, {'comment_id': 654617567, 'comment_body': ""So, thinking about this... We have a gamma distribution given as: \r\n\r\n```\r\nY_i ~ gamma(alpha_i, 1)\r\n```\r\n\r\nFrom there, we're creating the normalization of:\r\n\r\n```\r\nX = sum_{i = 1}^{n} Y_i\r\nV = (Y_1/X, Y_2/X, ... Y_n/X) ~ Dirchlet(alpha_1, ... alpha_n)\r\n```\r\nhttps://en.wikipedia.org/wiki/Dirichlet_distribution#Gamma_distribution\r\n\r\nLooking at: \r\n\r\nhttp://arma.sourceforge.net/docs.html#normalise\r\n\r\n`normalise` is giving is a unit _p_-norm. With `p = 1`, we're getting: \r\n\r\n```\r\nX = sum abs(Y_i)\r\n```\r\n\r\nThe `abs()` goes against the summation component, but gamma RVs will always be > 0.\r\n\r\nSo, long story short... We're doing one extra operation, but the end outcome will be the same. "", 'comment_created': datetime.datetime(2021, 6, 18, 18, 37, 52, tzinfo=datetime.timezone.utc), 'commenter': 'coatless', 'type': 'User'}, {'comment_id': 654623206, 'comment_body': 'alpha = 1. See [this](https://cs.stackexchange.com/a/132116).', 'comment_created': datetime.datetime(2021, 6, 18, 18, 50, 33, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 654638125, 'comment_body': ""I think ```p=1``` gives something like\r\n\r\n```std::sqrt( elem0^2 + elem1^2 + elem2^2 ..... elemn^2)``` and not the sum if I've gotten this correctly. I suppose you're saying, assuming X = sum abs(Y_i); abs part is unnecessary?"", 'comment_created': datetime.datetime(2021, 6, 18, 19, 25, 48, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 654672252, 'comment_body': 'Nope, that would be `p=2`/ l2-norm. This is using an l1-norm by column.\r\n\r\n`p=1` gives: \r\n\r\n```cpp\r\nstd::pow( abs(elem0)^1 + abs(elem1)^1 + abs(elem2)^1 ..... abs(elemn)^1, 1.0);\r\n```\r\nor:\r\n\r\n```\r\n(abs(elem0)^1 + abs(elem1^1 + abs(elem2^1  + ..... + abs(elemn^1))^1 \r\n= abs(elem0)^1 + abs(elem1)^1 + abs(elem2)^1  + ..... +  abs(elemn)^1 \r\n= abs(elem0) + abs(elem1) + abs(elem2) + ..... + abs(elemn)\r\n```\r\n\r\n I think by-column is correct instead of by-row due to the weights being structured `numObjectives x numPoints` (norm across objectives under a single point) ', 'comment_created': datetime.datetime(2021, 6, 18, 20, 54, 2, tzinfo=datetime.timezone.utc), 'commenter': 'coatless', 'type': 'User'}, {'comment_id': 654731514, 'comment_body': ""Okay, so this weight policy is being designed with a specific application in mind so that `alpha` doesn't need to be flexible."", 'comment_created': datetime.datetime(2021, 6, 19, 1, 41, 55, tzinfo=datetime.timezone.utc), 'commenter': 'coatless', 'type': 'User'}, {'comment_id': 654737029, 'comment_body': 'Yes, since we want uniform distribution. The alphas vectors are set to ones vector.', 'comment_created': datetime.datetime(2021, 6, 19, 2, 41, 46, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 654737570, 'comment_body': 'Yes, I\'ve done it in a column basis so the normalization of each point is ensured. Just revised L-norms, I was mistaken about the L1 norm formula, thanks for pointing it out.\r\n\r\nI think the ""abs"" part shouldn\'t really be that of a concern, either way, we know each element is > 0. We have one line of code which do the thing for us, and I really don\'t think the additional ""abs"" would severely hinder the performance.\r\n', 'comment_created': datetime.datetime(2021, 6, 19, 2, 48, 2, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}]","[{'commit_sha': 'ee1bb9760aa96a27d468a78c0ead753be4ab26b8', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fde96643fc0f85857bddbe422abf8bf1f247f403', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf38624cf51c5b30320c5ed2d5a51c29b309f34b', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b9b011ea013976e1078a2ee6615c06d24df07fc7', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96006fa6b2646d6fb1a88044dca53dffa3116a79', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9835cd1149076be103e79caee346750f1236cdcd', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}]",Nanubala Gnana Sai,45007169,,User,,73,,79,42
683856061,"Release version 2.17.0: ""25 Din Mein Paisa Double""","This automatically-generated pull request adds the commits necessary to make the 2.17.0 release.

Once the PR is merged, mlpack-bot will tag the release as HEAD~1 (so that it doesn't include the new HISTORY block) and publish it.

Or, well, hopefully that will happen someday.

When you merge this PR, be sure to merge it using a *rebase*.

### Changelog


 * CheckArbitraryFunctionTypeAPI extended for MOO support ([#283](https://github.com/mlpack/ensmallen/pull/283)).

 * Refactor NSGA2 ([#263](https://github.com/mlpack/ensmallen/pull/263), [#304](https://github.com/mlpack/ensmallen/pull/304)).

 * Add Indicators for Multiobjective optimizers ([#285](https://github.com/mlpack/ensmallen/pull/285)).

 * Make Callback flexible for MultiObjective Optimizers ([#289](https://github.com/mlpack/ensmallen/pull/289)).

 * Add ZDT Test Suite ([#273](https://github.com/mlpack/ensmallen/pull/273)).

 * Add MOEA-D/DE Optimizer ([#269](https://github.com/mlpack/ensmallen/pull/269)).

 * Introduce Policy Methods for MOEA/D-DE ([#293](https://github.com/mlpack/ensmallen/pull/293)).

 * Add Das-Dennis weight initialization method ([#295](https://github.com/mlpack/ensmallen/pull/295)).

 * Add Dirichlet Weight Initialization ([#296](https://github.com/mlpack/ensmallen/pull/296)).

 * Improved installation and compilation instructions ([#300](https://github.com/mlpack/ensmallen/pull/300)).

 * Disable building the tests by default for faster installation ([#303](https://github.com/mlpack/ensmallen/pull/303)).

 * Modify matrix initialisation to take into account default element zeroing in Armadillo 10.5 ([#305](https://github.com/mlpack/ensmallen/pull/305)).",False,308,https://api.github.com/repos/mlpack/ensmallen/pulls/308,https://github.com/mlpack/ensmallen/pull/308,closed,19,15,3,3,10,2,2,0,"[{'name': 's: unlabeled'}, {'name': 's: unanswered'}]",2021-07-05 17:38:42+00:00,2021-07-06 15:03:42+00:00,77100.0,21:25:00,"[{'comment_id': 664101282, 'comment_body': 'Actually, @jonpsy, I just realized, this date is backwards with the format we have been using in other places---this says May 7, but it should be `2021-07-05` (e.g. July 5).  Did you change anything in the script having to do with the date?', 'comment_created': datetime.datetime(2021, 7, 5, 19, 30, 14, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 664187984, 'comment_body': ""Ah my bad, didn't change the script. I just wrote in YYYY/DD/MM format by mistake in HISTORY.md"", 'comment_created': datetime.datetime(2021, 7, 6, 2, 2, 53, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}]","[{'commit_sha': 'c03d3bd407ed5bac1ccd717fcdba2bf9be63ef58', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee32616add2bed839dfbaad3443c87712ef80dcb', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd18952db2eee0dc8afe29cbb73062409b75207c3', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}]",Nanubala Gnana Sai,45007169,,User,,73,,79,42
678135031,Refine Portfolio Notebook.,,True,160,https://api.github.com/repos/mlpack/examples/pulls/160,https://github.com/mlpack/examples/pull/160,closed,563,410,2,9,12,7,1,0,[{'name': 'c: examples'}],2021-06-25 19:30:03+00:00,2021-07-08 21:52:22+00:00,1131739.0,"13 days, 2:22:19","[{'comment_id': 659248003, 'comment_body': ""Can you run the code through e.g. https://jsonformatter.curiousconcept.com/ to make it easier to read, right now it's a single line/block."", 'comment_created': datetime.datetime(2021, 6, 27, 1, 48, 43, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 659248494, 'comment_body': 'Maybe use one of the solutions from:\r\n\r\nhttps://stackoverflow.com/questions/18734739/using-ipython-notebooks-under-version-control/\r\n\r\nor \r\n\r\nhttps://gist.github.com/pbugnion/ea2797393033b54674af', 'comment_created': datetime.datetime(2021, 6, 27, 1, 54, 56, tzinfo=datetime.timezone.utc), 'commenter': 'coatless', 'type': 'User'}, {'comment_id': 659248811, 'comment_body': 'Good idea we could integrate it into a git pre commit hook.', 'comment_created': datetime.datetime(2021, 6, 27, 1, 59, 39, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 661833760, 'comment_body': '```suggestion\r\n    ""     //! Generate the requested csv file.\\n"",\r\n```\r\n\r\nAdd extra space.', 'comment_created': datetime.datetime(2021, 6, 30, 21, 48, 56, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 661835486, 'comment_body': '@jonpsy With the other notebook in place, I think we can remove this one?', 'comment_created': datetime.datetime(2021, 6, 30, 21, 52, 34, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 664893219, 'comment_body': '```suggestion\r\n    ""//! Uncomment to generate the csv file.\\n"",\r\n```', 'comment_created': datetime.datetime(2021, 7, 6, 21, 34, 57, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 664893987, 'comment_body': 'We only generate the csv file if the cell above was run, I think it would be useful to be clear about that.', 'comment_created': datetime.datetime(2021, 7, 6, 21, 36, 31, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}]","[{'commit_sha': '1f3e412f89bdcfe1bf77910ef39ce1e7bf5433b1', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e26558260398614abc3417661a627cd13d98f9a', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '519d25027feb923e096bc53b537aa1704e0fefe6', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e61f764a7f7a479be7d9ed941bd9854a42d8552', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c4cbc3ffa0bf1017424a9d3cb006680cf341788', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c5e7527ab0e1ee30d37b37f09fe48060f34a018', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dffaaa229300ec9ee9cbdd985c2e8db2cba1d546', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84ecf9b28572095a8180b9cc6dc54cd8cb340b27', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '94343963889a87384926d83545ee4433fe08414d', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}]",Nanubala Gnana Sai,45007169,,User,,73,,79,42
681938332,Added util to print gif,Yet to test its working via a simple cpp file.,True,164,https://api.github.com/repos/mlpack/examples/pulls/164,https://github.com/mlpack/examples/pull/164,closed,124,0,2,3,5,0,1,0,[{'name': 't: added feature'}],2021-07-01 15:00:33+00:00,2021-07-08 01:21:44+00:00,555671.0,"6 days, 10:21:11",[],"[{'commit_sha': 'b0f34e90c337974fcf69a5d86af90060460e99a8', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca593a95ceab3e516d412571cd2331560c708931', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '240d6045bbdc5ba2da3146ce12dc990ee842a8df', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}]",Nanubala Gnana Sai,45007169,,User,,73,,79,42
683052313,Rocket injector design optimization,,True,165,https://api.github.com/repos/mlpack/examples/pulls/165,https://github.com/mlpack/examples/pull/165,closed,445,0,5,12,11,5,2,0,"[{'name': 't: added feature'}, {'name': 'notebook'}]",2021-07-03 17:11:47+00:00,2021-07-14 22:59:41+00:00,971274.0,"11 days, 5:47:54","[{'comment_id': 668844162, 'comment_body': '```suggestion\r\n    ""It was the June of 1962, the company Rocketdyne was tasked with the heavy responsibility of sending a man to the moon as per Kennedy\'s bold promise. NASA, along with Rocketdyne, developed an F-1 engine capable of burning fuel of Olympic size swimming pool. On the D-day, when the engines ignited and the rocket was ready to take off, the engines exploded and the failure was catastrophic.\\n"",\r\n```\r\n\r\nNice background story.', 'comment_created': datetime.datetime(2021, 7, 13, 14, 54, 14, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 668849959, 'comment_body': '```suggestion\r\n    ""A rocket system consists of two liquid propellants, namely the fuel ($H_2$) and oxidiser ($O_2$). These propellants are stored in separate tanks, and pumped into the combustion chamber. The chamber houses the exothermic reaction between the propellants to release energy vital for the take-off process. For the reaction to occur readily, an injector mechanism is installed, which disperses these liquid propellants into tiny droplets and allow the mixing of the chemicals.\\n"",\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 15, 0, 8, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 668857183, 'comment_body': 'The part is great.', 'comment_created': datetime.datetime(2021, 7, 13, 15, 8, 5, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 668860349, 'comment_body': '```suggestion\r\n    ""a) **Maximum temperature at injector face** ($TF_{max}$): Prevent meltdown of the injector surface. Determines the thermal stability of the combustion chamber. \\n"",\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 15, 11, 21, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 669015910, 'comment_body': 'Haha, indeed!', 'comment_created': datetime.datetime(2021, 7, 13, 18, 34, 32, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}]","[{'commit_sha': '76721883c6f2b1d15c39f0209974fed1a7d747bf', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0efc27637595186adb166b29282626cf4a49a21b', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '04fe9256bdaf2b51804182052245f0ed9285c1cf', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3eb5210998733fe6b92c2c2eff78c0f9d24eb12', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14777d88badbe9cbbb741ab4fb9e48b8560d291f', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7418b684999721cccb19d385acd62350b5e267e2', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e66bf8bcc76027dcf293961613b911d32bec2377', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c9ee497d01020ea7d6a0f3ea61a8c8c01a91622e', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc3a54a7340e85fe22ae77ad231201580c0deb72', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '321e25a87753edbebb3bcf4f19f22b0161d8a590', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c5ff165fe2478775698a39dff162b9de5d95628', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14d46db9a91f71d7ab7726b31d393bceab4292de', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}]",Nanubala Gnana Sai,45007169,,User,,73,,79,42
695627771,Add Unity simulator and interactive graph for Rocket Injector notebook.,"Continuing #165 

Simulator repository: https://github.com/FieryBlade-313/BusterinGaaz",True,171,https://api.github.com/repos/mlpack/examples/pulls/171,https://github.com/mlpack/examples/pull/171,closed,2401,65,2,7,10,0,2,0,"[{'name': 's: needs review'}, {'name': 'notebook'}]",2021-07-23 02:38:32+00:00,2021-08-06 01:05:07+00:00,1203995.0,"13 days, 22:26:35",[],"[{'commit_sha': '4015170b44950d45e2f1f5650c4f8e4b4c8fbba4', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90b79da0ee8de4b06c842b1a4a44fb1acc2aec57', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6fbb09f7e32193c1926a1fc581acf923d43a5adc', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e46cf273abbcba4cef87658952c729df2a5f91f4', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b955c767b8f97a4e9116e6860b15bc3488bd8ac3', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd084b84f3272bc2743342dc5d17b5062374cc597', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74517156efdfb7e057b94e27a3c5c88723608813', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}]",Nanubala Gnana Sai,45007169,,User,,73,,79,42
705996230,Implement Envelope Q-Learning Algorithm,"Envelope Q-Learning (EQL) is a multi-objective reinforcement learning algorithm that focuses on optimizing a set of objectives rather than a single objective. The algorithm learns a deterministic single policy model, however, it can adapt to user-specified preference at the execution phase thus covering the entire preference space. 

**TODO:**

- [x] Implement ```BestAction```.
- [x] Write logic for setting ```target``` value.
- [x] Write logic for feeding input to network.
- [ ]  Complete ```PrioritizedEQLReplay```.
- [x]  Complete ```BackwardEQL```
- [ ]  Distribution of ```D_w``` should be provided by user.
- [x] Implement homotopy loss.


@zoq  @coatless @say4n @shrit 

Original paper: https://arxiv.org/abs/1908.08342.
",False,3029,https://api.github.com/repos/mlpack/mlpack/pulls/3029,https://github.com/mlpack/mlpack/pull/3029,closed,1442,0,15,54,2,14,4,1,"[{'name': 's: stale'}, {'name': 's: needs review'}, {'name': 'c: methods'}, {'name': 't: added feature'}]",2021-08-08 07:13:45+00:00,2023-04-11 04:56:16+00:00,52782151.0,"610 days, 21:42:31","[{'comment_id': 684733553, 'comment_body': 'I want to set the distribution of the preference vector, how do I do it? For ex: whether preference weights are sampled from gaussian or gamma distribution during training.  The D_w part in the paper\r\n\r\n![image](https://user-images.githubusercontent.com/45007169/128625263-6a6cc6f3-93e3-4290-9781-911a70b8a298.png)\r\n', 'comment_created': datetime.datetime(2021, 8, 8, 7, 59, 48, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 684736324, 'comment_body': 'In the **policy adaptation** part just after the algorithm, they mention using a multivariate gaussian with m means and a single standard deviation to sample the preference vector from. However, I am not quite sure if they use the same distribution for learning too.\r\n\r\n![IMG_7F7ED162ED5D-1](https://user-images.githubusercontent.com/8839504/128625849-b1a99af6-3ef8-4b7d-88e0-08f2a63cf110.jpeg)\r\n\r\n', 'comment_created': datetime.datetime(2021, 8, 8, 8, 21, 17, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 684738092, 'comment_body': 'Yes true! The code agrees with you as well. Here\'s what they\'ve done in code:\r\n\r\n```python\r\n        if preference is None:\r\n            if self.w_kept is None:\r\n                self.w_kept = torch.randn(self.model_.reward_size)\r\n                self.w_kept = (torch.abs(self.w_kept) / \\\r\n                               torch.norm(self.w_kept, p=1)).type(FloatTensor)\r\n            preference = self.w_kept\r\n```\r\n\r\nI guess this is the ""assumption part"", because preference distribution was ```None```.  However, we should equip users with the ability to set preference distribution. ', 'comment_created': datetime.datetime(2021, 8, 8, 8, 35, 28, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 684738988, 'comment_body': 'We could keep it as an optional argument and default to the multi-variate gaussian too; as the authors did. :)', 'comment_created': datetime.datetime(2021, 8, 8, 8, 42, 54, tzinfo=datetime.timezone.utc), 'commenter': 'say4n', 'type': 'User'}, {'comment_id': 693067478, 'comment_body': ""We usually use `= 0` for initialization, because this will just use the default constructor and  it's not immediately clear that that means zero initialization."", 'comment_created': datetime.datetime(2021, 8, 20, 16, 19, 5, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 693067831, 'comment_body': '```suggestion\r\n    const size_t gap = batchSize * actionSize;\r\n```\r\n\r\nJust to point out this is something that will not change in the while loop.', 'comment_created': datetime.datetime(2021, 8, 20, 16, 19, 42, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 693068398, 'comment_body': '```suggestion\r\n  return arma::index_max(arma::reshape(arma::sum(extWeights % actionValues, 0),\r\n      actionSize, extendedSize), 0);\r\n```\r\n\r\nShould be tabbed twice.', 'comment_created': datetime.datetime(2021, 8, 20, 16, 20, 32, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 693073441, 'comment_body': 'See comments above.', 'comment_created': datetime.datetime(2021, 8, 20, 16, 28, 37, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 693075116, 'comment_body': ""Did this so that it's clear that those args are for ```arma::reshape```, the meaning would be lost if use the normal tabbings."", 'comment_created': datetime.datetime(2021, 8, 20, 16, 31, 18, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 743366256, 'comment_body': 'See how this plays out? Now it acts just like a `outputLossLayer` ', 'comment_created': datetime.datetime(2021, 11, 5, 3, 21, 23, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 743366484, 'comment_body': ""I'm a little worried about the gradient, will it work as expected assuming `error` is correct? @zoq "", 'comment_created': datetime.datetime(2021, 11, 5, 3, 22, 10, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 743372518, 'comment_body': ""@zoq  Perhaps we could wrap it inside a policy? Like `lambdaUpdatePolicy`, it's a little awkward to hold state of `lambda`, `lambdaInit` & `lambda_delta` inside our `EQL` class."", 'comment_created': datetime.datetime(2021, 11, 5, 3, 44, 50, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 749515177, 'comment_body': 'Either is fine, right now we only have a single update strategy, but I can see that a policy could make sense here anyway.', 'comment_created': datetime.datetime(2021, 11, 15, 16, 57, 37, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 749515478, 'comment_body': 'I think so.', 'comment_created': datetime.datetime(2021, 11, 15, 16, 57, 56, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}]","[{'commit_sha': 'dfbbaf925618015f994e941a53752cd91c599f91', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'deaf3a9fc18c8c8f5dc385dac58fc967dffd9294', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '526e644707670f3d8bb5c5025df68b74759f7e78', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f90392f563b6097483f181667b75bdaa13908105', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9dfcc5b910e59a2980f99ddd8c7e5d24031d6798', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96dd777f0e984bce2ae53ed5e084e85114a3adb7', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46fe1d13ec22c04da6c71722ac1231b10ad679a4', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9c0297f8b5b31111248f85198887e5ddfa7ec3f', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c93bfedbbf6c50531f29f20790c951f3f5edf51', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11f0787755320d191d96a520cb86f76b10d5feb6', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1d58dc25ac89d3a827f605ea2e3ad001dcb3887', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd6d63eaf4fe4fa5c0d32465691a26bd58e253bd0', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61c92be9cb352aadcd0fa41e2a636760477738b6', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e2db02942ef930db590113b84969b94780590b11', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f88388c3c6590761401a11882a73c532b0c883f3', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1cb80cce669107eefb1306ad6809273eaab17c8f', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b37480a16356fd4a80298b2a91a5a62ee077835', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c55b415cd3907068aafceadc6bea7fe1993bdd7', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e19435549745aecdec245f8f3c6cad526f3483fd', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e63764283893e4ee7ed4085a94daac3dbea3022e', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef2d4a4258604d5c61b688fd01a165e39143bea6', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9197985daccd229cc797fcf505af3db86d549e0e', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e5c02fb3d82cb11a7ae9113f3fa9a0add576446', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c8eaf5b33226da212e47ff44b2510f01a38bc0e', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c97300b14cb2da0d98caf7eb8dfbb43896f19c8f', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '94ae5a3515efe6b0f17364e9cb59c219c62c0e92', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c83e35a07980785e38e4cdb21d88ebf9a370a66b', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e6d02cf82ef10aea6196d0069292c0bb5063005', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3df27b4e1c8a669ebbed35aa88d3d305549dc0d6', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1948d0986973b4f4f741d612f5a3c708371bd70c', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '100e35fbb4366f3a80a2139532c52b8700fccde5', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c434183c831b6fa9cf3850f965765bb5980724e7', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3667cdf5b588a21fadffd03aa2d7e1b0739788d2', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c81f457e3f1d45a31ffe1392c7004b67fc687d9', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1d0d27c857e87a4fbb69afafc660561b97693ba', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4f188ec11414998c8ffe8e5e32858b3496f1a0c', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8fd027be1e9efedccfe4d1f800694e180484df34', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d4ff5f36d7a6f104310b68dec2a7ccf6d7c4326', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88e27a94446e853716896b68558fbb7c8d42c5f1', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9eceb0aa2e271a33e58dde95a7be4b08f741b33e', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60a3009d2eeb5dee579caef5598251382229b1e1', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc35a5f46ed419481d449adfef716a36e95b8b4d', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d085a6b2147d006fb97314aba565a6a1e3e421b', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'acb7c7ccb3334c0786cc8c342143bae15c61622e', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b9754080ee24d594223b76b021962a01f5471bfe', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c84d0301eba7ab0e144605ccab1b624d6aea678', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2bb9e1c53defcc39e3b85f9e570a2b6b525effde', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ada0acd1c201a6e576394e60ba804fbd8831af8b', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bdae4c8443bea6cd826625a67e03bd0538c6ba7d', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c338a8a554c3af01b74bd86ed679bacf4cf4df1b', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '759d1162dcb8b0dce66544956cf259e18ebf5f8e', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5db9153a4950c6c1e1a5444a5dcfccbb2cb61712', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb19ab0d18549c2640b58b469fda5dc52bc06be3', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2e793156a12584941d30b6461f7298f215613cfe', 'committer_username': 'jonpsy', 'committer_name': 'Nanubala Gnana Sai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 13, 14, 32, 16, tzinfo=datetime.timezone.utc)}]",Nanubala Gnana Sai,45007169,,User,,73,,79,42

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
374488427,GSoC-2021-mlpack,jonpsy/GSoC-2021-mlpack,,1,11,2,2,32,0,1,0,"[{'id': 736265190, 'number': 1, 'closed': datetime.datetime(2021, 9, 17, 10, 37, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 17, 10, 37, 7, tzinfo=datetime.timezone.utc), 'time_taken': 25.0, 'time_delta': '0:00:25', 'additions': 0, 'deletions': 1, 'state': 'closed'}]"
151348135,ensmallen,mlpack/ensmallen,C++,119,734,34,87,3480,16,1,9,[]
92665356,examples,mlpack/examples,Jupyter Notebook,89,116,24,37,1035,5,1,2,[]
28149409,mlpack,mlpack/mlpack,C++,1591,4978,183,321,30199,24,11,15,[]
