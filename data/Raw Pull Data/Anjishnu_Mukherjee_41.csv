pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
391905351,Added accessor methods for ANN layers.,"This PR adds accessor methods for different layer parameters. The tests are present in the ann_layer_tests.cpp file and all of them have a similarity in their names (each one ends with LayerParametersTest).

Note : After messing up my PR in #2307, I deleted my fork and re-did everything in this new forked branch. All the changes are still the same. And I am yet to complete writing tests for this. 
This solves Issue #2258 temporarily to some extent for now. ",True,2321,https://api.github.com/repos/mlpack/mlpack/pulls/2321,https://github.com/mlpack/mlpack/pull/2321,closed,490,0,23,13,11,9,1,0,[{'name': 'c: methods'}],2020-03-21 20:06:12+00:00,2020-05-10 15:39:33+00:00,4304001.0,"49 days, 19:33:21","[{'comment_id': 421683602, 'comment_body': 'Hey @iamshnoo, Thanks for working on this one, Do you think we could change this to the following for clarity\r\n\r\n```suggestion\r\n  //! Get the number of inputs.\r\n```', 'comment_created': datetime.datetime(2020, 5, 7, 17, 47, 52, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 421685855, 'comment_body': '```suggestion\r\n  //! Get the width of each sample.\r\n```\r\n\r\nI think the description should be same in setter as well as getters. Let me know what you think. Thanks a lot!', 'comment_created': datetime.datetime(2020, 5, 7, 17, 51, 32, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 421688609, 'comment_body': '```suggestion\r\n  // Parameter : outSize.\r\n```\r\n:)', 'comment_created': datetime.datetime(2020, 5, 7, 17, 56, 9, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 421689061, 'comment_body': '```suggestion\r\n  // Parameter order: inSize, outSize, rho.\r\n```', 'comment_created': datetime.datetime(2020, 5, 7, 17, 56, 54, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 421689504, 'comment_body': '```suggestion\r\n  // Parameter order: inSize, outSize, rho.\r\n```', 'comment_created': datetime.datetime(2020, 5, 7, 17, 57, 39, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 421689686, 'comment_body': '```suggestion\r\n  // Parameter order : inSize, outSize.\r\n```', 'comment_created': datetime.datetime(2020, 5, 7, 17, 57, 57, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 421690107, 'comment_body': 'Hey, Could you please add a full stop at the end of the comments, Thanks a lot.', 'comment_created': datetime.datetime(2020, 5, 7, 17, 58, 40, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 421690483, 'comment_body': '```suggestion\r\n  // Parameter order : scale, sizeAverage.\r\n```', 'comment_created': datetime.datetime(2020, 5, 7, 17, 59, 11, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 421714424, 'comment_body': 'Thanks for adding the tests!', 'comment_created': datetime.datetime(2020, 5, 7, 18, 39, 59, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}]","[{'commit_sha': '8573c2ac1316ee384bcddc3d6a87370412d2ea3a', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2f6e02f872e5d949363bd5c960df5c3f13ad1403', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0d898018891194fbb27ad2f42936cb4b241b4c2', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15fe804d63f1ea2eb4d307c8e0928f13c3bb25c1', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '80b728854eefa7fbb441e476e8705bd3b6c3cfb5', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '415f6bbd757855b3712f4e6be34a6a544ca6633a', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38b6c8ee7ba54ce9a80fe55eba852492c5fc5313', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8aa12236603819c7fd39bf0b8f79deefe5e29930', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5588fa5ba29a4b2ff99342417bcfaf8e840bdfbd', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a18ebebf6892d1f7802a103449ce99fb243d2a1', 'committer_username': 'zoq', 'committer_name': 'Marcus Edel', 'committer_email': 'marcus.edel@fu-berlin.de', 'commit_date': datetime.datetime(2013, 4, 20, 12, 45, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34b14aa32a9d6121f242b28b87507ad19cda4e78', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '533c3b79ce33d3e8a9aad51f5b7d5014909e01cb', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aba57a737537da36e655862a6e052f2a6139acae', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}]",Anjishnu,45921510,,User,,40,,28,55
396193271,Adding MultiLabel SoftMargin Loss,"In this PR, I am adding the Multi Label Soft Margin Loss function. 
[Here](https://github.com/iamshnoo/mlpack-testing/blob/master/Multi_Label_Soft_Margin_Loss.ipynb) is a link to a Jupyter notebook to verify the outcomes presented in the test cases added.",True,2345,https://api.github.com/repos/mlpack/mlpack/pulls/2345,https://github.com/mlpack/mlpack/pull/2345,closed,324,0,5,56,49,97,3,0,"[{'name': 's: keep open'}, {'name': 'c: methods'}, {'name': 't: added feature'}]",2020-03-31 09:21:43+00:00,2021-08-14 19:07:24+00:00,43321541.0,"501 days, 9:45:41","[{'comment_id': 401552300, 'comment_body': 'Could you adjust these to keep them within 80 characters.\r\nAlso could you align them properly with the previous line.\r\nThanks.', 'comment_created': datetime.datetime(2020, 4, 1, 11, 43, 17, tzinfo=datetime.timezone.utc), 'commenter': 'ojhalakshya', 'type': 'User'}, {'comment_id': 401552590, 'comment_body': 'Could you correct this comment alignment.\r\nThanks.', 'comment_created': datetime.datetime(2020, 4, 1, 11, 43, 52, tzinfo=datetime.timezone.utc), 'commenter': 'ojhalakshya', 'type': 'User'}, {'comment_id': 401553595, 'comment_body': 'Could you remove this line and put a line between 57 and 58.\r\nAlso you can refer to other loss functions to see the writing style maybe.\r\nThanks.', 'comment_created': datetime.datetime(2020, 4, 1, 11, 45, 53, tzinfo=datetime.timezone.utc), 'commenter': 'ojhalakshya', 'type': 'User'}, {'comment_id': 401557911, 'comment_body': ""Yeah definitely. I don't know, something weird must have happened when saving the files locally most probably. Because, when I had written down these things, everything was according to the style format for other functions. üíÅüèª\r\n\r\nAnyway, thanks for pointing it out. I will correct the styling issues and will also include the tests in a commit within a couple of days. "", 'comment_created': datetime.datetime(2020, 4, 1, 11, 54, 8, tzinfo=datetime.timezone.utc), 'commenter': 'iamshnoo', 'type': 'User'}, {'comment_id': 401558155, 'comment_body': 'üëçüèª', 'comment_created': datetime.datetime(2020, 4, 1, 11, 54, 35, tzinfo=datetime.timezone.utc), 'commenter': 'iamshnoo', 'type': 'User'}, {'comment_id': 401558269, 'comment_body': 'üëçüèª', 'comment_created': datetime.datetime(2020, 4, 1, 11, 54, 45, tzinfo=datetime.timezone.utc), 'commenter': 'iamshnoo', 'type': 'User'}, {'comment_id': 401703509, 'comment_body': ""I figured out the reason for this happening. For the git diff that you are viewing in the browser, tab size is rendered as 8 spaces. Whereas locally for VS Code, I have the setting as tab size = 2 spaces. So, for me, it appeared as if all the indentations were perfect, but in the browser, everything got messed up. \r\n\r\nNote to self : I probably haven't figured out a small detail yet. Need to fix this later."", 'comment_created': datetime.datetime(2020, 4, 1, 15, 26, 49, tzinfo=datetime.timezone.utc), 'commenter': 'iamshnoo', 'type': 'User'}, {'comment_id': 403741884, 'comment_body': 'Keeping the operation out of the if-else statement could reduce a couple of lines :)', 'comment_created': datetime.datetime(2020, 4, 5, 18, 49, 46, tzinfo=datetime.timezone.utc), 'commenter': 'sreenikSS', 'type': 'User'}, {'comment_id': 403752869, 'comment_body': 'Done. I changed both the if-else constructs and saved about 10 lines :sweat_smile: ', 'comment_created': datetime.datetime(2020, 4, 5, 20, 28, 3, tzinfo=datetime.timezone.utc), 'commenter': 'iamshnoo', 'type': 'User'}, {'comment_id': 403861070, 'comment_body': ""Hey could you also serialise the parameters here. I'll do complete review once I read more about the loss function. Thanks."", 'comment_created': datetime.datetime(2020, 4, 6, 6, 44, 11, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 404516515, 'comment_body': ""Do we need to have the weight matrix here?\r\nThe definition of the loss function doesn't state its use. I know pytorch takes it as an input (by default it is none). However in your implementation this is a required parameter (not sure why). I might have missed something. Let me know what you think."", 'comment_created': datetime.datetime(2020, 4, 7, 3, 38, 19, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 404516844, 'comment_body': 'We use camel-case in mlpack for declarations. Kindly refer to our style [guidelines](https://github.com/mlpack/mlpack/wiki/DesignGuidelines).', 'comment_created': datetime.datetime(2020, 4, 7, 3, 39, 29, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 404517493, 'comment_body': ""I think I raised this question in another PR, Are these parameters needed?\r\n\r\n> Hmm, Could you explain why we need to do this, I might be missing something. I don't think this is needed here. \r\nRefer : [1](https://github.com/mlpack/mlpack/blob/master/src/mlpack/methods/ann/loss_functions/mean_squared_logarithmic_error.hpp), [2](https://github.com/mlpack/mlpack/blob/master/src/mlpack/methods/ann/loss_functions/kl_divergence.hpp), [3](https://github.com/mlpack/mlpack/blob/master/src/mlpack/methods/ann/loss_functions/mean_squared_error.hpp)"", 'comment_created': datetime.datetime(2020, 4, 7, 3, 42, 19, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 404518685, 'comment_body': 'Hi @iamshnoo, Could you help me in understanding why we are taking the mean twice in line 42. Since weights might not be needed. I think this will be handled once you handle the above comments.', 'comment_created': datetime.datetime(2020, 4, 7, 3, 47, 34, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 404518972, 'comment_body': 'Could you just keep the comment as `Simple test for the multiLabel softmargin loss function.` I know its a pick comment. Sorry :)', 'comment_created': datetime.datetime(2020, 4, 7, 3, 48, 50, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 404519188, 'comment_body': 'This seems like a lot of lines. Could you refer to how matices are declared in other tests. I think that looks cleaner. Let me know what you think.', 'comment_created': datetime.datetime(2020, 4, 7, 3, 49, 51, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 404678764, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 4, 7, 9, 45, 59, tzinfo=datetime.timezone.utc), 'commenter': 'iamshnoo', 'type': 'User'}, {'comment_id': 404684225, 'comment_body': ""In the PyTorch implementation, default value of weight is None. In case the default is used, the weights matrix is initialized with all 1's and otherwise, the specified values for each class will be used. In my implementation here, I simply feel that keeping the weight matrix as  compulsory input in the constructor offers the end user more flexibility than having to access it via accessor methods. Also, this allows the user to be more conscious when choosing the weights for each class. They can choose it to be all 1's or they can assign separate weights for each class, but whatever they do they will focus on it once only when they are initializing the loss function and won't need to bother about it after that. This is why I have gone for this approach. @kartikdutt18 \r\n\r\nComing to the definition of the function, some definitions include the weight matrix and some don't. The PyTorch implementation includes it and so I have included it."", 'comment_created': datetime.datetime(2020, 4, 7, 9, 54, 57, tzinfo=datetime.timezone.utc), 'commenter': 'iamshnoo', 'type': 'User'}, {'comment_id': 404684589, 'comment_body': 'Aaah! Force of habit. \r\nThanks for noticing, changed it!', 'comment_created': datetime.datetime(2020, 4, 7, 9, 55, 35, tzinfo=datetime.timezone.utc), 'commenter': 'iamshnoo', 'type': 'User'}, {'comment_id': 404684996, 'comment_body': ""Right! I didn't notice your comments in those PRs previously and wasn't aware. Removed them."", 'comment_created': datetime.datetime(2020, 4, 7, 9, 56, 18, tzinfo=datetime.timezone.utc), 'commenter': 'iamshnoo', 'type': 'User'}, {'comment_id': 404687157, 'comment_body': ""Assume a 3*3 input (as in the test case).\r\nThe inner mean computes a ```3*3``` matrix with 3 identical columns because of the multiplication with the weights matrix. To go from 3 columns to 1 column (so that the output matches the form of output in the PyTorch implementation with reduction='none'), I use the outer mean.\r\n\r\nI have explained the need for the weights parameter in the comment above. Let's continue this discussion in that thread for simplicity."", 'comment_created': datetime.datetime(2020, 4, 7, 9, 59, 47, tzinfo=datetime.timezone.utc), 'commenter': 'iamshnoo', 'type': 'User'}, {'comment_id': 404687467, 'comment_body': 'Okay :)', 'comment_created': datetime.datetime(2020, 4, 7, 10, 0, 17, tzinfo=datetime.timezone.utc), 'commenter': 'iamshnoo', 'type': 'User'}, {'comment_id': 404688524, 'comment_body': 'Changed it to match the format for other test cases :)\r\n[Edit] Found out soon enough that I made a mistake while doing so!', 'comment_created': datetime.datetime(2020, 4, 7, 10, 2, 4, tzinfo=datetime.timezone.utc), 'commenter': 'iamshnoo', 'type': 'User'}, {'comment_id': 404700300, 'comment_body': ""Since C++ doesn't really have None type for objects (not pointers), So here the constructor can't be called without passing the weight matrix. The weights matrix is used when there is class imbalance and I think most people won't be passing weights matrix as input as it might not gel very well with the API. If you want to keep the weights matrix, I would personally prefer setting it to a default matrix. Let me know what you think."", 'comment_created': datetime.datetime(2020, 4, 7, 10, 21, 56, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 404705400, 'comment_body': ""I would like to keep it. How would I do that without following the current implementation? Because, I need the weight matrix to be of the size (1,numClasses) and hence I can't just set it to a default value within the constructor parameter list itself, can I?"", 'comment_created': datetime.datetime(2020, 4, 7, 10, 30, 54, tzinfo=datetime.timezone.utc), 'commenter': 'iamshnoo', 'type': 'User'}, {'comment_id': 404758805, 'comment_body': ""I am probably missing something somewhere. But, isn't this the primary way to initialize a 2D matrix with particular values in each cell? "", 'comment_created': datetime.datetime(2020, 4, 7, 12, 11, 26, tzinfo=datetime.timezone.utc), 'commenter': 'iamshnoo', 'type': 'User'}, {'comment_id': 404993461, 'comment_body': 'You could do the following:\r\n\r\n```\r\n mat = arma::mat(""1.0000 1.000 1.000 2.0000 2.0000 \\\r\n      2.0000 2.000 2.5000 3.0000 3.0000"");\r\n mat.reshape(5, 2);\r\n```\r\n\r\nI think I haven\'t seen this declaration in any file other than convolution_test (not the layer)', 'comment_created': datetime.datetime(2020, 4, 7, 17, 39, 53, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 405471315, 'comment_body': 'Is it manually calculated or by using any framework? If manually then please mention it as a comment, else you can leave it as it is. Same for all the other values.', 'comment_created': datetime.datetime(2020, 4, 8, 12, 2, 45, tzinfo=datetime.timezone.utc), 'commenter': 'sreenikSS', 'type': 'User'}, {'comment_id': 405486310, 'comment_body': ""Yes. I have provided a link to a ipynb notebook to verify all the calculations in the first comment in this thread. All the values mentioned in any of the test cases can be checked from that notebook. The framework in question is PyTorch.\r\n\r\nThe notebook has the PyTorch implementation and also an armadillo implementation to reproduce these results. The outputs are also provided along with the implementations.\r\n\r\nI haven't calculated the values manually using the formula for the loss function."", 'comment_created': datetime.datetime(2020, 4, 8, 12, 29, 13, tzinfo=datetime.timezone.utc), 'commenter': 'iamshnoo', 'type': 'User'}, {'comment_id': 406191394, 'comment_body': ""Oh. Didn't notice the ipynb notebook. Thanks :)"", 'comment_created': datetime.datetime(2020, 4, 9, 13, 9, 51, tzinfo=datetime.timezone.utc), 'commenter': 'sreenikSS', 'type': 'User'}, {'comment_id': 406218671, 'comment_body': ':)', 'comment_created': datetime.datetime(2020, 4, 9, 13, 50, 37, tzinfo=datetime.timezone.utc), 'commenter': 'iamshnoo', 'type': 'User'}, {'comment_id': 406234987, 'comment_body': 'So what I would do incase I had to use a weight matrix then, I would have a private weight matrix with setters and getters. Constructor will initialise the matrix to default value of 1. User can then set weights. This is similar to weights for other layers. Having an unnecessary matrix in constructor will be a hinderance to most users. Let me know what you think.', 'comment_created': datetime.datetime(2020, 4, 9, 14, 13, 45, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 406236311, 'comment_body': ""Since this will always be a vector why don't we use a vector?"", 'comment_created': datetime.datetime(2020, 4, 9, 14, 15, 39, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 406239022, 'comment_body': ""The reason I felt weight matrix as input is redundant because of this. User shouldn't set this to 1 if he doesn't want to change weight for different classes."", 'comment_created': datetime.datetime(2020, 4, 9, 14, 19, 20, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 406241857, 'comment_body': ""I have thought of this too. The reason why I keep wanting to go with the current implementation is simply that I feel users should be consciously choosing the weights when they are using a very specific loss function such as this one. So, even if they want to go with the default implementations, they initialise a weight vector and also if they want to give different weights to each class, they have to initialise a weight vector. That's the idea I am going for. I totally get your point. But, I would like at least one more person's opinion on this before I  change the implementation. Let me know if you have further suggestions. Thanks!"", 'comment_created': datetime.datetime(2020, 4, 9, 14, 23, 35, tzinfo=datetime.timezone.utc), 'commenter': 'iamshnoo', 'type': 'User'}, {'comment_id': 406244137, 'comment_body': ""> The reason I felt weight matrix as input is redundant because of this. User shouldn't set this to 1 if he doesn't want to change weight for different classes.\r\n\r\n@sreenikSS, what do you think about this?\r\n"", 'comment_created': datetime.datetime(2020, 4, 9, 14, 26, 38, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 406245474, 'comment_body': ""> So what I would do incase I had to use a weight matrix then, I would have a private weight matrix with setters and getters. Constructor will initialise the matrix to default value of 1. User can then set weights. This is similar to weights for other layers. Having an unnecessary matrix in constructor will be a hinderance to most users. Let me know what you think.\r\n\r\nYep. I have thought of this too. In fact, this was the implementation I was going for initially, before I thought of going with the current implementation. I have explained my reasoning in a response to your comment below.  \r\n\r\nThe main idea I am going for is that the **users should be consciously choosing the weight values irrespective of whether they are using the default values or not, when they are using a specific loss function like this where the weights can be specified for each class**. For some reason that appeals to me more somehow. I would like some more opinion on this from others as well. Changing the implementation shouldn't take much time, compared to gathering opinions :) "", 'comment_created': datetime.datetime(2020, 4, 9, 14, 28, 34, tzinfo=datetime.timezone.utc), 'commenter': 'iamshnoo', 'type': 'User'}, {'comment_id': 406249393, 'comment_body': ""\r\nHmm, **Let's wait then**. It's just that we can add this to multiple loss functions here and if that was to be done they shouldn't hinder with existing loss functions implementation. Also I think no other framework (Keras, PyTorch, Tensorflow) asks users to set the weight to 1. Mainly because most users will prefer if they wrote less code on their side."", 'comment_created': datetime.datetime(2020, 4, 9, 14, 33, 51, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 406249807, 'comment_body': 'Yep. I will go ahead and change this. Thanks for pointing out. ', 'comment_created': datetime.datetime(2020, 4, 9, 14, 34, 26, tzinfo=datetime.timezone.utc), 'commenter': 'iamshnoo', 'type': 'User'}, {'comment_id': 406282240, 'comment_body': ""@kartikdutt18 I think I have a common solution to your problem, which can take into account both your idea and mine! Let's have 2 constructors for the loss function. The default constructor is the one which most users will be using and that will set the weights to 1 without the users having to write anything extra. And then we can have the overloaded constructor, which will follow the current implementation and require the user to specify the weights. I think this is going to be a much more neat idea than having to use accessor functions to modify the weight vector(which I am not sure as of yet is possible or not, explained below)! Let me know what you think of this. Thanks!\r\n\r\nAlso, I had a doubt. Assume that we wanted to use accessor methods. Once the loss function is instantiated using the constructor, and Added to the model, where exactly will the user be able to use a setter method to modify the weight. Is that even possible? Like, how exactly will I be modifying the Forward function in that case, if at all that is possible? Would be really helpful if you can provide an example so that I can visualize it better. "", 'comment_created': datetime.datetime(2020, 4, 9, 15, 19, 41, tzinfo=datetime.timezone.utc), 'commenter': 'iamshnoo', 'type': 'User'}, {'comment_id': 406284877, 'comment_body': '> Also, I had a doubt. Assume that we wanted to use accessor methods. Once the loss function is instantiated using the constructor, and Added to the model, where exactly will the user be able to use a setter method to modify the weight. Is that even possible? Like, how exactly will I be modifying the Forward function in that case, if at all that is possible? Would be really helpful if you can provide an example so that I can visualize it better.\r\n\r\nI can clarify on this. Maybe you could refer to implementation of any layer. I would suggest going through the tests for transposed convolution. I think that should help. Let me know if I need to clarify something there.\r\n\r\nFor the overloaded constructor, that is also a possible solution.', 'comment_created': datetime.datetime(2020, 4, 9, 15, 23, 44, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 406285482, 'comment_body': 'Or there is  a PR open for depthwise convolution maybe you could refer to tests for that as well.', 'comment_created': datetime.datetime(2020, 4, 9, 15, 24, 35, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 406288711, 'comment_body': 'Sure! I will go through the code for the transposed convolution files and then let you know whether I decide to go ahead with the overloaded constructor approach or the the accessor methods approach. Either way, I should be done with this by tomorrow.', 'comment_created': datetime.datetime(2020, 4, 9, 15, 28, 40, tzinfo=datetime.timezone.utc), 'commenter': 'iamshnoo', 'type': 'User'}, {'comment_id': 406355562, 'comment_body': 'I decided to go ahead with the overloaded constructor approach. ', 'comment_created': datetime.datetime(2020, 4, 9, 17, 17, 25, tzinfo=datetime.timezone.utc), 'commenter': 'iamshnoo', 'type': 'User'}, {'comment_id': 406425770, 'comment_body': 'Should this be `const arma::rowvec& weights`?', 'comment_created': datetime.datetime(2020, 4, 9, 19, 24, 24, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 406426566, 'comment_body': '```suggestion\r\n  output = -(target % (1 - sigmoid) - (1 - target) % sigmoid) %\r\n```', 'comment_created': datetime.datetime(2020, 4, 9, 19, 25, 56, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 406426765, 'comment_body': ""```suggestion\r\n  // Value calculated using torch.nn.MultiLabelSoftMarginLoss(reduction='sum').\r\n```"", 'comment_created': datetime.datetime(2020, 4, 9, 19, 26, 23, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 406426932, 'comment_body': ""```suggestion\r\n  // Value calculated using torch.nn.MultiLabelSoftMarginLoss(reduction='mean').\r\n```"", 'comment_created': datetime.datetime(2020, 4, 9, 19, 26, 40, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 406432976, 'comment_body': ""@kartikdutt18 the usability issue you have pointed out looks reasonable to me. Even though the specialty of this loss is allowing the user to set weights as what @iamshnoo has pointed out, I don't think forcing the user to pass a vector would be a good idea.\r\n\r\nHowever, the idea of overloading constructors looks good to me."", 'comment_created': datetime.datetime(2020, 4, 9, 19, 38, 17, tzinfo=datetime.timezone.utc), 'commenter': 'sreenikSS', 'type': 'User'}, {'comment_id': 406460715, 'comment_body': 'Yes. I overlooked this completely. Thank you for pointing this out. :) ', 'comment_created': datetime.datetime(2020, 4, 9, 20, 33, 12, tzinfo=datetime.timezone.utc), 'commenter': 'iamshnoo', 'type': 'User'}, {'comment_id': 406597358, 'comment_body': ""Ohk, I think I will show the code of what I thought in the evening today. I don't mind going for overloaded operator but I think the way, layers are implemented might be a better approach."", 'comment_created': datetime.datetime(2020, 4, 10, 4, 30, 12, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 406796802, 'comment_body': ""Hey, I am not sure if this is correct. Weights are assigned to each class and input is definitely shuffled, multiplying with weights like this doesn't ensure that we multiplied the first class with weight[0].\r\nExample:\r\n```\r\ngroundTruth = [2, 3, 1]\r\nweights = [1, 0.9, 0.5]\r\nloss = reduce([0.9 * loss_function, 0.5 * loss_function, 1 * loss_function])\r\n// Current implementation:\r\nloss = reduce([1 * loss_function, 0.9 * loss_function, 0.5 * loss_function])"", 'comment_created': datetime.datetime(2020, 4, 10, 15, 1, 1, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 406797180, 'comment_body': ""I have started working on the implementation, I'll open a PR in couple of hours."", 'comment_created': datetime.datetime(2020, 4, 10, 15, 1, 54, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 406811087, 'comment_body': 'Can you directly commit to this branch? Or maybe, if you would like, suggest a change in the code review itself using the github feature to do so and I will integrate that in this PR directly?', 'comment_created': datetime.datetime(2020, 4, 10, 15, 33, 19, tzinfo=datetime.timezone.utc), 'commenter': 'iamshnoo', 'type': 'User'}, {'comment_id': 406811788, 'comment_body': ""I don't think I can commit directly in your branch. I am making changes in cross-entropy loss function so that it can be used as a reference."", 'comment_created': datetime.datetime(2020, 4, 10, 15, 34, 55, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 406812304, 'comment_body': ""> suggest a change in the code review itself using the github feature to do so and I will integrate that in this PR directly?\r\n\r\nI am trying to figure out the best way to implement this as well and I don't want to suggest something that doesn't build / work as desired."", 'comment_created': datetime.datetime(2020, 4, 10, 15, 36, 10, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 406813373, 'comment_body': '> input is definitely shuffled\r\n\r\nIs this mentioned somewhere? Like, how are you ```definitely``` sure about this?\r\nThe [PyTorch](https://github.com/pytorch/pytorch/blob/a91097bdfb0618e15bb5b7ec96869da3c7ba278a/torch/nn/functional.py#L2666) implementation of the function does not have shuffling involved as far as I can see.\r\n\r\nWithout considering the part about reduction for the moment, the PyTorch source code is basically just the following :\r\n\r\n```python\r\ndef logsigmoid(x):\r\n  return torch.log(1/(1+torch.exp(-x)))\r\n\r\ndef loss(x,y, w):\r\n  loss = -(y * logsigmoid(x) + (1 - y) * logsigmoid(-x))\r\n  loss = loss * w\r\n  loss = loss.sum(dim=1) / input.size(1)\r\n  return loss\r\n```', 'comment_created': datetime.datetime(2020, 4, 10, 15, 38, 29, tzinfo=datetime.timezone.utc), 'commenter': 'iamshnoo', 'type': 'User'}, {'comment_id': 406814748, 'comment_body': ""> I don't think I can commit directly in your branch. \r\n\r\nLook at point 6 of [this](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/commenting-on-a-pull-request) link. Can you do that for this PR? I didn't know about this feature until zoq's review yesterday, where he did something similar and I managed to add that as a commit (see commit 1c1d33d above)."", 'comment_created': datetime.datetime(2020, 4, 10, 15, 41, 43, tzinfo=datetime.timezone.utc), 'commenter': 'iamshnoo', 'type': 'User'}, {'comment_id': 406821900, 'comment_body': 'Ohk, so here is weighted loss from documentation : `\\text{loss}(x, class) = weight[class] \\left(-x[class] + \\log\\left(\\sum_j \\exp(x[j])\\right)\\right)`\r\nAs you can see loss of each class is multiplied with its weight (weight[class]). The reason we do this is : The input might not be of the format 0, 1, 2 and hence we multiply loss as weight[0], weight[1] and weight[2].  I think you can refer to weighted loss for more info. \r\n\r\nI can try that as well.', 'comment_created': datetime.datetime(2020, 4, 10, 15, 58, 12, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 406826281, 'comment_body': ""> I think you can refer to weighted loss for more info.\r\n\r\nCould you post the link for this please? I can't seem to be able to find itüôà\r\n"", 'comment_created': datetime.datetime(2020, 4, 10, 16, 8, 44, tzinfo=datetime.timezone.utc), 'commenter': 'iamshnoo', 'type': 'User'}, {'comment_id': 406831014, 'comment_body': '```\r\nweights = {1: 1\r\n\t\t   2: 0.9\r\n\t\t   3: 0.5};\r\n\r\ngrounTruth = {3, 2, 1};\r\ninput = {2.5, 1.5, 0.5};\r\nloss_function = abs(input - target);\r\nloss = reduction({0.5, 0.5, 0.5});\r\n// if reduction == sum => loss = sum(loss) = 1.5;\r\nloss_function = reduce({0.5 * 0.5, 0.9 * 0.5, 1 * 0.5});\r\n\r\n```\r\n@ojhalakshya will explain it better.', 'comment_created': datetime.datetime(2020, 4, 10, 16, 19, 55, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 406838726, 'comment_body': '> Hey, I am not sure if this is correct. Weights are assigned to each class and input is definitely shuffled, multiplying with weights like this doesn\'t ensure that we multiplied the first class with weight[0].\r\n> Example:\r\n> \r\n> ```\r\n> groundTruth = [2, 3, 1]\r\n> weights = [1, 0.9, 0.5]\r\n> loss = reduce([0.9 * loss_function, 0.5 * loss_function, 1 * loss_function])\r\n> // Current implementation:\r\n> loss = reduce([1 * loss_function, 0.9 * loss_function, 0.5 * loss_function])\r\n> ```\r\n\r\nAs far as I can see for now,\r\n```\r\n  rowvec A = arma::mat(""1 0.9 0.5"");\r\n  rowvec B = shift(A, -1);\r\n```\r\n\r\nshould achieve this shuffle in the weight vector that you have given an example of. \r\nSo, are you suggesting I do this to the weights vector, before it is multiplied?\r\n@kartikdutt18 ', 'comment_created': datetime.datetime(2020, 4, 10, 16, 38, 37, tzinfo=datetime.timezone.utc), 'commenter': 'iamshnoo', 'type': 'User'}, {'comment_id': 406845836, 'comment_body': 'Hi @iamshnoo \r\nI am attaching a photo of some explanations that might help here based on the previous conversations above, I have made them relatable.\r\nDo tell me if it helps.\r\n![WhatsApp Image 2020-04-10 at 10 20 39 PM](https://user-images.githubusercontent.com/57477999/79008013-1a8e9580-7b7a-11ea-8f6d-87531c47bb95.jpeg)\r\n\r\nThanks.\r\n', 'comment_created': datetime.datetime(2020, 4, 10, 16, 55, 15, tzinfo=datetime.timezone.utc), 'commenter': 'ojhalakshya', 'type': 'User'}, {'comment_id': 406847207, 'comment_body': ""> ```\r\n> groundTruth = [2, 3, 1]\r\n> ```\r\n\r\nThe groundTruth or the class labels will be one-hot encoded. See the test case for an example.\r\n\r\nSo, basically,\r\nwhen I say input = [ 2.5 1.5 0.5 ], that is just 1 input and not 3 different inputs.\r\nThe integer value of the ground truth corresponding to this is just 1 single number, either 2 or 3 or 1 and not [2, 3, 1]\r\n\r\n> The input might not be of the format 0, 1, 2 \r\n\r\nSo, I don't understand what you mean by this. Maybe some more explanation about this would be helpful and also the source from where you are referring this. \r\n\r\n> hence we multiply loss as weight[0], weight[1] and weight[2].\r\n\r\nWhen i write a = b * w (the current implementation),\r\nisn't that basically saying a = [ b[0] * w[0], b[1] * w[1], b[2] * w[2] ]. So, what exactly are you asking to change? I am not quite sure about this either I guess."", 'comment_created': datetime.datetime(2020, 4, 10, 16, 58, 19, tzinfo=datetime.timezone.utc), 'commenter': 'iamshnoo', 'type': 'User'}, {'comment_id': 406848221, 'comment_body': '> I am attaching a photo of some explanations that might help here based on the previous conversations above, I have made them relatable.\r\n\r\nI am taking a look at this and will get back in a few minutes. I will update this particular comment with all further questions I have about the image.\r\nAlso, I need to see the reference or some legit source from where you concluded the NOTE in the image, because the PyTorch source code that I have linked to above does not perform this operation, which you have hinted over here.', 'comment_created': datetime.datetime(2020, 4, 10, 17, 0, 29, tzinfo=datetime.timezone.utc), 'commenter': 'iamshnoo', 'type': 'User'}, {'comment_id': 406867120, 'comment_body': 'Hmm, Do you mind running tests with weight matrices, shuffled input and verifying from pytorch?', 'comment_created': datetime.datetime(2020, 4, 10, 17, 45, 22, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 406867548, 'comment_body': 'Hi @kartikdutt18  @ojhalakshya can you please take a look at this. \r\n![understanding](https://user-images.githubusercontent.com/45921510/79012530-24b59180-7b84-11ea-97ce-708453b0b2d5.jpeg)\r\n\r\n\r\nThanks!\r\n', 'comment_created': datetime.datetime(2020, 4, 10, 17, 46, 31, tzinfo=datetime.timezone.utc), 'commenter': 'iamshnoo', 'type': 'User'}, {'comment_id': 406868183, 'comment_body': '> Hmm, Do you mind running tests with weight matrices, shuffled input and verifying from pytorch?\r\n\r\nSure I can do that. Can you please have a look at the image I posted above and mention the inputs, targets and weights you want me to test with?', 'comment_created': datetime.datetime(2020, 4, 10, 17, 48, 12, tzinfo=datetime.timezone.utc), 'commenter': 'iamshnoo', 'type': 'User'}, {'comment_id': 406868925, 'comment_body': 'I think you can decide that, I am fine with anything as long as it ensures that this implementation does what it intends to do.', 'comment_created': datetime.datetime(2020, 4, 10, 17, 50, 3, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 406869386, 'comment_body': 'Cool! But, do you realize the point I am trying to make in the image I posted?', 'comment_created': datetime.datetime(2020, 4, 10, 17, 51, 4, tzinfo=datetime.timezone.utc), 'commenter': 'iamshnoo', 'type': 'User'}, {'comment_id': 406871537, 'comment_body': ""Yes I do, unfortunately I can't give a lot of time to this PR or the one that I just opened. I am working on another PR that is kind of top-priority for me. If I get a chance, I will get back to you tomorrow with a working code in the other PR. Also I will provide a reference for the same. I look forward to your test results (with the current implementation)."", 'comment_created': datetime.datetime(2020, 4, 10, 17, 56, 22, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 406874146, 'comment_body': 'Okay! Thank you so much for all the help :)', 'comment_created': datetime.datetime(2020, 4, 10, 18, 2, 51, tzinfo=datetime.timezone.utc), 'commenter': 'iamshnoo', 'type': 'User'}, {'comment_id': 406880956, 'comment_body': ""Ohk, I was going through the some references, this is what I found:\r\n1. This implementation only works for OHE.\r\n2. Multi-Labels loss functions will always have input as OHE.\r\n\r\nThis will fail if that isn't the case. So maybe this will work (after you add tests).\r\nWhat I was talking about was the case when the target wasn't OHE as that is the case with many loss functions."", 'comment_created': datetime.datetime(2020, 4, 10, 18, 19, 32, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 406881388, 'comment_body': 'Reference: https://arxiv.org/pdf/1702.05659.pdf', 'comment_created': datetime.datetime(2020, 4, 10, 18, 20, 36, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 406892734, 'comment_body': '> 1. This implementation only works for OHE.\r\n> 2. Multi-Labels loss functions will always have input as OHE.\r\n\r\nExactly my point too. Thank you for verifying this.\r\nI will definitely write down some testing for more cases as we discussed today and get back to you tomorrow with this.\r\n\r\n', 'comment_created': datetime.datetime(2020, 4, 10, 18, 48, 35, tzinfo=datetime.timezone.utc), 'commenter': 'iamshnoo', 'type': 'User'}, {'comment_id': 406907140, 'comment_body': ""@kartikdutt18 thanks for the excellent inputs. There is a lot going on in this thread, I don't think I am all caught up with it currently. Maybe I'll take some time and then review or suggest if I think any further development is needed.\r\n@iamshnoo great work!\r\n@ojhalakshya thanks for taking out time to write it down. It is highly appreciated. But I think what you have written makes sense for a regression problem. I am not sure if it works in this particular scenario. Maybe I am missing something or I need to take a closer look :)\r\n\r\nHowever, I think I will just mention this once as a reminder (although I am sure everyone knows this): The output of the last layer of nodes of a neural network (called **input** in mlpack) is fed to the loss function. So for a classification task, there **has** to be one node for each class. Instead of *n_classes* number of output nodes if just one node is there, then it will technically be a regression task (in which case the loss function should be differently written)."", 'comment_created': datetime.datetime(2020, 4, 10, 19, 27, 22, tzinfo=datetime.timezone.utc), 'commenter': 'sreenikSS', 'type': 'User'}, {'comment_id': 420166004, 'comment_body': 'Hey could you leave an empty line here.', 'comment_created': datetime.datetime(2020, 5, 5, 14, 45, 15, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 420168365, 'comment_body': 'I think we should have only 2 test cases i.e. MultiLabelSoftMarginLossWeightedTest and MultiLabelSoftMarginLossTest containing test for both reductions. The same was done for other layers in ann.', 'comment_created': datetime.datetime(2020, 5, 5, 14, 48, 33, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 420172379, 'comment_body': ""I can do this. Just one question. I did this because KLDiv loss function has 2 separate tests - one with mean reduction and another without, thus I thought it would make more sense to split the tests into 4 parts - for all combinations of weights and reductions. Don't you think that would make it easier going forward with the weighted losses for other loss functions? I am okay with whatever you suggest though."", 'comment_created': datetime.datetime(2020, 5, 5, 14, 53, 8, tzinfo=datetime.timezone.utc), 'commenter': 'iamshnoo', 'type': 'User'}, {'comment_id': 420172578, 'comment_body': 'Sure. Will do.', 'comment_created': datetime.datetime(2020, 5, 5, 14, 53, 22, tzinfo=datetime.timezone.utc), 'commenter': 'iamshnoo', 'type': 'User'}, {'comment_id': 420180283, 'comment_body': ""I think only KL Divergence does that. Other than that, most have a single loss function. You can refer to this [one](https://github.com/mlpack/mlpack/blob/944f15048d73178ad98de409f6ae7e3a4c329d82/src/mlpack/tests/loss_functions_test.cpp#L624) for example. Also most of the open PRs follow the same. \r\n\r\n> one with mean reduction and another without, thus I thought it would make more sense to split the tests into 4 parts - for all combinations of weights and reductions.\r\n\r\nIn Ann layer tests, we generally add tests in one test case unless a new parameter was added. So Reduction is a common parameter so we can 1 test case testing both sum and mean. At least that way we won't end up 4 times the test cases. Let me know if this makes sense.\r\n\r\n> Don't you think that would make it easier going forward with the weighted losses for other loss functions?\r\n\r\nI think having a different test for weighted makes sense because that way when other loss functions also support weighted we won't have to change original tests but only add new ones."", 'comment_created': datetime.datetime(2020, 5, 5, 15, 3, 24, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 420189465, 'comment_body': 'Okay! Cool. I will re-arrange the code for the test cases into 2 blocks.', 'comment_created': datetime.datetime(2020, 5, 5, 15, 15, 41, tzinfo=datetime.timezone.utc), 'commenter': 'iamshnoo', 'type': 'User'}, {'comment_id': 420190092, 'comment_body': 'Awesome! Thanks again. :)', 'comment_created': datetime.datetime(2020, 5, 5, 15, 16, 34, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 429011419, 'comment_body': 'Hey @iamshnoo, it seems like this can cause `nan` problem for large values. You can refer to #2371. Amphan has turned pretty dangerous üò¢. Hope you are safe Anjishnu.', 'comment_created': datetime.datetime(2020, 5, 22, 2, 30, 8, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 429378438, 'comment_body': ""Regarding the point you raised about the calculation of ```logSigmoid``` and ```logSigmoidNeg```, quite valid points indeed. If I was expecting input to be a large enough number, this raises the possibility of giving ```nan```. But, this being a loss function and not an activation function(unlike in PR 2371) is applied at the end of a forward pass and almost always in conjunction with a softmax layer, which will keep all the values in input in the range of 0 to 1. So, I don't think we need to bother at all about ```input``` being a large number for this case. \r\n\r\nLet me know what you think about this! I will get back as and when I can manage some network."", 'comment_created': datetime.datetime(2020, 5, 22, 17, 48, 11, tzinfo=datetime.timezone.utc), 'commenter': 'iamshnoo', 'type': 'User'}, {'comment_id': 429508351, 'comment_body': 'That makes sense. Thanks for the clarification.', 'comment_created': datetime.datetime(2020, 5, 23, 3, 4, 8, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 432974034, 'comment_body': '```suggestion\r\n * @file methods/ann/loss_functions/multilabel_softmargin_loss.hpp\r\n```', 'comment_created': datetime.datetime(2020, 5, 31, 18, 56, 14, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 432974051, 'comment_body': '```suggestion\r\n * @file methods/ann/loss_functions/multilabel_softmargin_loss_impl.hpp\r\n```', 'comment_created': datetime.datetime(2020, 5, 31, 18, 56, 31, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 432974525, 'comment_body': 'Might be easier to understand what happens here, if we provide a second constructor to set the weights. Let me know what you think.', 'comment_created': datetime.datetime(2020, 5, 31, 19, 2, 23, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 432974616, 'comment_body': ""This could go into the other constructor, see comment above, that way we don't set this in each call of forward."", 'comment_created': datetime.datetime(2020, 5, 31, 19, 3, 12, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 432975803, 'comment_body': 'Hi zoq, if you look at commit f298c7a4fceceb9e99c90a91b66e7c91cf858ceb, on May 5th, there I re-designed the API of this function to the current format after a long discussion above with @kartikdutt18. The conclusion of that discussion can be seen in [this comment](https://github.com/mlpack/mlpack/pull/2345#issuecomment-621237947). \r\n\r\nSo, I think initially I had done what you are suggesting (let me know if you mean otherwise) using a overloaded constructor to set the weights. But then Kartik wanted me to design the API like this. \r\n\r\nI am okay with both. Even though I would prefer the approach with an overloaded constructor ', 'comment_created': datetime.datetime(2020, 5, 31, 19, 18, 40, tzinfo=datetime.timezone.utc), 'commenter': 'iamshnoo', 'type': 'User'}, {'comment_id': 432975838, 'comment_body': 'Totally agree! Detailed comment above.', 'comment_created': datetime.datetime(2020, 5, 31, 19, 19, 14, tzinfo=datetime.timezone.utc), 'commenter': 'iamshnoo', 'type': 'User'}, {'comment_id': 432976551, 'comment_body': ""I thought I suggested using a reset parameter so this initialized only in the first pass. I am using my phone so sorry I can't take a look at the code. Similar thing is done in adaptive pooling layers. Regards. "", 'comment_created': datetime.datetime(2020, 5, 31, 19, 28, 50, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 432977236, 'comment_body': ""Hmm, I am guessing the other constructor would also have weights as param and probably a reduction also as param. It might ve redundant to have two constructors with same parameters. We would only have one forward function so we would have take into account both cases. For initialization we check if the vector is empty, if yes, we set reset to true and in forward pass we initialize the weights equal to input features and we set reset to false so we don't initialize every iteration. If weights are passed then we set reset to false and copy weights so no initialization in forward pass. Maybe I missed something, let me know what you think.\nRegards. "", 'comment_created': datetime.datetime(2020, 5, 31, 19, 37, 27, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 433031501, 'comment_body': 'Hmm, The weights will be initialised every time in forward pass here, You should set weighted to true here to prevent that from happening. As shown [here](https://github.com/mlpack/mlpack/pull/2345#issuecomment-620726423), we use reset to prevent weights from being initialized every time i.e. If user has not passed weights they will be initialized once in forward pass.', 'comment_created': datetime.datetime(2020, 6, 1, 3, 57, 22, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 433032412, 'comment_body': ""In terms of API wouldn't an overloaded constructor be redundant. I am guessing one constructor will be with parameter reduction and one with both reduction and weights parameter. We can simply have one constructor and set weights to default value and in forward pass set them to 1 only in the first pass. This allows us to have a forward function which doesn't depend on which constructors object we are dealing with. I have left a comment explaining something similar. "", 'comment_created': datetime.datetime(2020, 6, 1, 4, 3, 15, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 433136414, 'comment_body': 'Agreed! This was something I missed completely. Corrected in the commit 77463d8a4a260c697a6d4705ca30d38a1503c3ef.\r\nThanks to both zoq and you for pointing this out.', 'comment_created': datetime.datetime(2020, 6, 1, 9, 37, 34, tzinfo=datetime.timezone.utc), 'commenter': 'iamshnoo', 'type': 'User'}]","[{'commit_sha': 'e1eb983f1b34d44514d52f39284c51462ca750d1', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72693570de29cf9a10fff7fe15a39b005becf4e2', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3c3bb7e81a13463e6d56a06ecc122ef56b07ee2', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '92af4404c2c87b2416c319c94ea84c962561f16f', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b2604b0aa1a1fd964acca459b150d92b1b986c19', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc6335d4fa19f7cf6f52ef541bfee34344d04af2', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b6275ec4afdd8e2fb23612aad33229879962d0c4', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b42c36014e3b8bb43bde808e2e39585ba663c12b', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90c48aedc3081731d22eb265040603c21c67b775', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c0a3ef6e23e5122ce37eb372a2473ca4e2eea019', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '194f3ed29dce506b9c65d53ecd9b5883ccbd29f1', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8280f15d18ee283f509e0742752d020443d736c', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6783aa72949bfc312e00100afa04152c1f6b7386', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71e1a89b4ae4feb3f7111e5a8da972e2c0bdd5e4', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '43d3506e75bd6a679384087c7ec6d344776c41fc', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a346c1a60d7b1997d30d697eaf4d1fcbd2d6578c', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa4b596d9c3e7e149e2370bb772aebed1cd77028', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '503185b9c6e23e4117f8e7ddc9735eaca8f0a925', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c43613fa6a498d16a3e1d49a9f3cdac3aa4560d', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b06486f1c4f3e38ee943cd702ee34e88e2b38759', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67ec433ba107b551d4c2b952c1b6c54b167adce7', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ec768f9780d3225e1587239e9ed7a71ac017d36', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab55a5e705d94720842718a670df8ce36efb069d', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '697944c00c5702212038257a2d7fd072f07a0b0b', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70eb8bc76f24b912cc47d38cf4775caacfb49d76', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '81fece78abcfbab5498f4bae43667082a53f1f1e', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '952145725836c47840f16c3e35f1ba023de86d23', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba11c43da0661e992b1ae8649f2a1ae124f066c3', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3089f635c3ce8e9b75821458e3e9bfd72141b72d', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e4da86b839feec1c55edbcf16954cdf7ce49e9e', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17806e073d9e7c68326c61f118559ae0df81f0bb', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e2eef8a5c9ce60a2205105d53563b18cc8a3c375', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ddda95959dbbe82df2adfd73208184f8a85d6d7', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '86fec6822c93215b29cf7f3787d9810282fc61ec', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '43d91dbcab3de2b20155b96ed9853d8623a56baf', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c1d33dba3afb87b1fd887a263f8196dc44276f8', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c395ed319cecf84191fc2c01a7763c35a30c007b', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb17f316d4a5e7a77c28da172fc8a64a6e2ceda4', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dcd02d93d6470b91379ecba42c71560e02a5240f', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a450f715f2a08496bb93e04d8926fb8228d4520a', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56ce6faf690ed44512d7604a3bb136b4347494f6', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f298c7a4fceceb9e99c90a91b66e7c91cf858ceb', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9789fdea56e3f271783a29b681f7e9e4b3303741', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3068cc034a5932a3355c027787aa7d07b74b338', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '478280969ef6d2c18eb982bb31cab6a80f797849', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4541966ac9829068faf7a24fa2ee13311d6d8703', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6470ae8cdd9c88ff0bd4a6ce5af6ebb55dcb09a4', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34153d541acf067ca3f0268e0b1d7638ad8349a4', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c5a24d60d7ad66bb4013aacf6b71606c51b1f988', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b2a3ac39361b43a187eeaf05ed990baa85e465f', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6340e64bdcf7ee6c49798d6bcfa29c0bac1c2f39', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '77463d8a4a260c697a6d4705ca30d38a1503c3ef', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '733db6a95c66c57d458490f27607e2bdfde89912', 'committer_username': 'jeffin143', 'committer_name': 'jeffin sam', 'committer_email': 'jeffinsam@karunya.edu.in', 'commit_date': datetime.datetime(2016, 8, 28, 2, 44, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '180f91770dfa6058bf99c5001eef3e0aebba34ce', 'committer_username': 'jeffin143', 'committer_name': 'jeffin sam', 'committer_email': 'jeffinsam@karunya.edu.in', 'commit_date': datetime.datetime(2016, 8, 28, 2, 44, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ebaa6c3161b6a538a5258439ccb675dfc8f00ea7', 'committer_username': 'jeffin143', 'committer_name': 'jeffin sam', 'committer_email': 'jeffinsam@karunya.edu.in', 'commit_date': datetime.datetime(2016, 8, 28, 2, 44, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf61e977fde3da4cd713ef96ef7b6b1007b48803', 'committer_username': 'jeffin143', 'committer_name': 'jeffin sam', 'committer_email': 'jeffinsam@karunya.edu.in', 'commit_date': datetime.datetime(2016, 8, 28, 2, 44, 32, tzinfo=datetime.timezone.utc)}]",Anjishnu,45921510,,User,,40,,28,55
443489246,UnPooling layer,"Introducing the unpooling layer. Not writing test cases till we can solve #2439 .
Explanation for the working of the layer is also available in a comment in that issue.",False,2493,https://api.github.com/repos/mlpack/mlpack/pulls/2493,https://github.com/mlpack/mlpack/pull/2493,closed,329,0,5,3,1,0,4,0,"[{'name': 's: stale'}, {'name': 's: needs review'}, {'name': 'c: methods'}, {'name': 't: added feature'}]",2020-07-02 12:37:01+00:00,2021-07-25 10:19:19+00:00,33514938.0,"387 days, 21:42:18",[],"[{'commit_sha': 'da1a39cd0fa5e89f647a876b3b161ab6412d7e67', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d588ee4ee272170779b5902f235e666212145f9', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '501bbc00c509494114926aea0856ebd5b7b0cf8e', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}]",Anjishnu,45921510,,User,,40,,28,55
443491120,Soft Margin Loss function,"Relevant issue : #2200 
PyTorch docs : [here](https://pytorch.org/docs/stable/nn.html#softmarginloss)

To compare bare-bones armadillo implementation with PyTorch implementation, see this [Google Colab notebook](https://colab.research.google.com/drive/1W4ndom2jMmsGhraNf17VacOzk2Q748k8?usp=sharing).",True,2494,https://api.github.com/repos/mlpack/mlpack/pulls/2494,https://github.com/mlpack/mlpack/pull/2494,closed,230,0,4,3,3,0,3,0,"[{'name': 's: keep open'}, {'name': 'c: methods'}, {'name': 't: added feature'}]",2020-07-02 12:40:45+00:00,2020-08-05 04:31:51+00:00,2908266.0,"33 days, 15:51:06",[],"[{'commit_sha': 'c237368e746d040eda2147f6bfd3c10fc54b1cc0', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b39a893bba0a2d0be7e75777e35ea76c261efc9', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be400f36d9b57ace4c5e8291533816a4a8b1dc69', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}]",Anjishnu,45921510,,User,,40,,28,55
443493616,Re-design ANN loss functions along with some bug fixes,"Trying to solve #2444 .
Also re-designs some of the loss functions to adapt them for a future PR that will allow none-type reduction support.

Google Colab notebooks and brief description of the problem for each of the loss functions can be checked from the first comment of the linked issue above. (I might be wrong about some of these, please let me know if I am and also how I should go about correcting them.)

I have divided each loss function into a separate commit for the first 11 commits to this branch, so that it might be easier to review.",False,2495,https://api.github.com/repos/mlpack/mlpack/pulls/2495,https://github.com/mlpack/mlpack/pull/2495,closed,682,248,23,14,2,6,4,0,"[{'name': 's: stale'}, {'name': 's: needs review'}, {'name': 'c: methods'}, {'name': 't: added feature'}]",2020-07-02 12:45:31+00:00,2022-01-02 05:00:52+00:00,47405721.0,"548 days, 16:15:21","[{'comment_id': 448978106, 'comment_body': 'I think if `reduction = true`, mean loss has to be returned.', 'comment_created': datetime.datetime(2020, 7, 2, 12, 52, 3, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 448978346, 'comment_body': 'same here... and many other places.', 'comment_created': datetime.datetime(2020, 7, 2, 12, 52, 23, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 448982670, 'comment_body': ""I am returning sum, when ```reduction = true```.\r\nI am doing that for each and every loss function, so there shouldn't be any non-uniformity, I guess.\r\n\r\nIs there any specific reason why I should return mean instead of sum, when ```reduction = true```?\r\n(apart from the fact, that PyTorch does it)"", 'comment_created': datetime.datetime(2020, 7, 2, 12, 59, 20, tzinfo=datetime.timezone.utc), 'commenter': 'iamshnoo', 'type': 'User'}, {'comment_id': 448989419, 'comment_body': 'Not a big deal. But it just looked counter-intuitive. Any new user would expect that ""reduced"" form is less than ""non-reduced"" form. (It\'s like swapping the keys `Home` and `End` in your keyboard)', 'comment_created': datetime.datetime(2020, 7, 2, 13, 9, 45, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 448998185, 'comment_body': 'The non-reduced form is a vector / matrix / cube.\r\nFor all the loss functions I have touched on above, the non-reduced loss is stored in the variable loss.\r\nAnd the reduced form is a single number, either the sum or the mean of all the values in the loss variable.\r\n\r\nThe reason why I preferred the sum reduction is simply that sum will have a greater value than mean for all cases, which might be more effective when back propagating it through previous layers. \r\n\r\nLets wait for some more opinions on this.\r\nIf more people feel this is counter-intuitive, I will swap them back to what you suggested :)', 'comment_created': datetime.datetime(2020, 7, 2, 13, 23, 14, tzinfo=datetime.timezone.utc), 'commenter': 'iamshnoo', 'type': 'User'}, {'comment_id': 453894630, 'comment_body': ""If we do this for all the other functions, which I think you do, it's fine for me."", 'comment_created': datetime.datetime(2020, 7, 13, 19, 54, 30, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}]","[{'commit_sha': '48cb4e9307ec358ea8cf6d001af9e7a9ba3edf21', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c2c9b4395c85e9cee7f0684c2c32b9f29edbe48', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2bed8ee54e1058723c4edf816834c780580dff23', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e941dc8624b4eb6ee01179dc3d47e99818f16f69', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c03fd4d7b1ed71722a289fc0dea6e6e2d992032', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79a1fc588fa20658cadad99d170b72423fb830fd', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '483afb67f20c906ec9c6ec1daebd36c928d38fb9', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90da3d75c18d68101b0637dd9adfba40d50f095e', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9bf84d0290400b47a968bff728d3f9ed2e7e91b9', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b00ea1e7a02ee66783c5a270e493eb345600120b', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5dec1321c4d4c490e25bb38f6108aa2668ee22c', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '892999e2f3dcd91a80f0994ec21fb29acd09c627', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f9521d91cbccc30e3c215221e3585cff63295e5', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '474da101c182b58d632532ccfcb62f9496c0d0a7', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}]",Anjishnu,45921510,,User,,40,,28,55
466199233,Instance Norm.,"Instance Norm Layer.

***Note :*** Currently ""InstanceNormLayerTest"" and ""InstanceNormLayerParametersTest"" pass. ""GradientInstanceNormLayerTest"" crashes and gives weird memory errors for reasons unknown to me as of yet (I need some help debugging this, please.) I am probably missing something minor with the Gradient test calculations.

To compare armadillo functionality implementation with PyTorch implementations, take a look at this [Google Colab notebook](https://colab.research.google.com/drive/18E8a-LTHFOpqa6w53vOsjRz7nbRHLvaf?usp=sharing).

The basic idea followed for this implementation is that, Instance Norm applied on a (N,C,H,W) input is equivalent to Batch Norm applied on a (1,N*C,H,W) input. So, this layer is implemented as a BatchNorm wrapper layer.
This idea is same as the one followed by the original author of the paper [here](https://github.com/DmitryUlyanov/texture_nets/blob/master/InstanceNormalization.lua) and also the same as the PyTorch implementation [here](https://github.com/pytorch/pytorch/pull/1283).",False,2562,https://api.github.com/repos/mlpack/mlpack/pulls/2562,https://github.com/mlpack/mlpack/pull/2562,closed,553,0,6,4,6,2,4,0,"[{'name': 's: stale'}, {'name': 's: needs review'}, {'name': 'c: methods'}, {'name': 't: added feature'}]",2020-08-11 15:57:48+00:00,2022-01-02 05:00:51+00:00,43938183.0,"508 days, 13:03:03","[{'comment_id': 470163057, 'comment_body': '```suggestion\r\n               const double eps = 1e-5,\r\n               const bool average = true,\r\n               const double momentum = 0.1);\r\n```\r\n\r\nJust to align the parameter with the first one.', 'comment_created': datetime.datetime(2020, 8, 13, 18, 32, 39, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 470163474, 'comment_body': '```suggestion\r\n  if (deterministic)\r\n```\r\n\r\nMinor style issue, missing space.', 'comment_created': datetime.datetime(2020, 8, 13, 18, 33, 29, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}]","[{'commit_sha': 'db20e2de18e05c39b8f912d6f9bd90b52e0d19c0', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4a503b3e0302eb763fdcf7a568ee29f494a6085', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9153520c9ad36c40794da4b8164221fd67459a5d', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e0671d3d2beb68e0129a9e7012ec9989c28cd04a', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}]",Anjishnu,45921510,,User,,40,,28,55
466200102,Pixel Shuffle layer,"Pixel Shuffle layer

To compare PyTorch/numpy implementation with mlpack/armadillo implementation of the functionality, check this [Google Colab notebook](https://colab.research.google.com/drive/1JZaptTDo2ey8GcwnJMFh3IwSAlqd7in_?usp=sharing).

![pixel_shuffle](https://user-images.githubusercontent.com/45921510/89920092-a3493b00-dc19-11ea-96ab-8a0547060aa0.jpeg)",True,2563,https://api.github.com/repos/mlpack/mlpack/pulls/2563,https://github.com/mlpack/mlpack/pull/2563,closed,437,1,7,13,13,6,3,0,"[{'name': 's: keep open'}, {'name': 'c: methods'}, {'name': 't: added feature'}]",2020-08-11 15:59:16+00:00,2021-02-26 15:57:08+00:00,17193472.0,"198 days, 23:57:52","[{'comment_id': 476108782, 'comment_body': ""I am not sure if this situation will ever arise but it might be better to future-proof and include one test for a single-batch input and then this one for 2 batches to help pin-point the source of error (if any).\r\n\r\nI'm not 100% sure that this is required, so do let me know what you think."", 'comment_created': datetime.datetime(2020, 8, 25, 3, 19, 21, tzinfo=datetime.timezone.utc), 'commenter': 'sreenikSS', 'type': 'User'}, {'comment_id': 476114632, 'comment_body': 'We can get rid of this empty line :)', 'comment_created': datetime.datetime(2020, 8, 25, 3, 27, 57, tzinfo=datetime.timezone.utc), 'commenter': 'sreenikSS', 'type': 'User'}, {'comment_id': 583395790, 'comment_body': ""This has already been discussed, but we're now waiting on the serialization to be updated to use cereal."", 'comment_created': datetime.datetime(2021, 2, 26, 5, 39, 11, tzinfo=datetime.timezone.utc), 'commenter': 'birm', 'type': 'User'}, {'comment_id': 583402413, 'comment_body': 'I have made a continuation to this PR.', 'comment_created': datetime.datetime(2021, 2, 26, 6, 1, 19, tzinfo=datetime.timezone.utc), 'commenter': 'abhinav-anand-addepar', 'type': 'User'}, {'comment_id': 583402857, 'comment_body': 'You can see them at #2833 ', 'comment_created': datetime.datetime(2021, 2, 26, 6, 2, 43, tzinfo=datetime.timezone.utc), 'commenter': 'abhinav-anand-addepar', 'type': 'User'}, {'comment_id': 583738724, 'comment_body': 'Ah, sorry I missed it!', 'comment_created': datetime.datetime(2021, 2, 26, 15, 56, 5, tzinfo=datetime.timezone.utc), 'commenter': 'birm', 'type': 'User'}]","[{'commit_sha': 'c84a4e510b98a17d8883b928871f315cb30b4cd7', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64dd26145a1b1c02593c105a10e2622d1aa33634', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '448fc6f553dc6ea5c6049c80f366610993137610', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5da525cde653ee3ed2bd5c4c979bdacdbd9b7959', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '438cc009898dad31326636af9f3d47d908ced4af', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b95f5f055654ff8b8dd508b64ba08e6de5081eb', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c6cd6b860c3e56c76c2df9abe0bfe17c3bf7d1e1', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cbb151000528700e9c57933030fc71e4c0803b70', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22880feebce0c147cca5fbeb6ce079526801f090', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '034117a1305dced58ee38a587c2c4c83c251975d', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '860d35e6231505a7536400d1b9a1ca20629dabce', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '513030c7e3a930f8b753b37ffe9e152c13eb0f1d', 'committer_username': 'zoq', 'committer_name': 'Marcus Edel', 'committer_email': 'marcus.edel@fu-berlin.de', 'commit_date': datetime.datetime(2013, 4, 20, 12, 45, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '06ed1d6ddaaf11e6b6123ee48f8f2a7cb5867336', 'committer_username': 'zoq', 'committer_name': 'Marcus Edel', 'committer_email': 'marcus.edel@fu-berlin.de', 'commit_date': datetime.datetime(2013, 4, 20, 12, 45, 34, tzinfo=datetime.timezone.utc)}]",Anjishnu,45921510,,User,,40,,28,55
466201209,Spatial Dropout layer,"Spatial Dropout Layer

To compare PyTorch/numpy implementation with mlpack/armadillo implementation of the functionality, check this [Google Colab notebook](https://colab.research.google.com/drive/13TbYROndyUb7xvY0AIXJ5Px87yhW0ewh?usp=sharing).

![types_of_dropout](https://user-images.githubusercontent.com/45921510/89920271-d5f33380-dc19-11ea-9a5d-7b356fab467b.jpeg)",True,2564,https://api.github.com/repos/mlpack/mlpack/pulls/2564,https://github.com/mlpack/mlpack/pull/2564,closed,397,0,7,10,3,8,2,0,"[{'name': 'c: methods'}, {'name': 't: added feature'}]",2020-08-11 16:00:42+00:00,2020-08-28 14:52:36+00:00,1464714.0,"16 days, 22:51:54","[{'comment_id': 470739864, 'comment_body': 'Just to be consistent with the rest of the codebase I would use `const` for each parameter here.', 'comment_created': datetime.datetime(2020, 8, 14, 16, 50, 57, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 470740197, 'comment_body': 'We can remove the empty line here.', 'comment_created': datetime.datetime(2020, 8, 14, 16, 51, 33, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 470740969, 'comment_body': 'Maybe I missed something, but if this is the only place where we use `inputImage` and `outputImage` I would directly use `inputTemp.slice(n)` and `outputTemp.slice(n)`.', 'comment_created': datetime.datetime(2020, 8, 14, 16, 53, 12, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 470741074, 'comment_body': 'See comment above.', 'comment_created': datetime.datetime(2020, 8, 14, 16, 53, 23, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 470741414, 'comment_body': 'I think the values are from the pytorch implementation?', 'comment_created': datetime.datetime(2020, 8, 14, 16, 54, 6, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 470775832, 'comment_body': 'The expected output and expected g matrices are from the Pytorch implementation.  I have added a comment for that a few lines below this.\r\nThe input matrix and the gy matrix are filled with random values (not specific to any particular implementation).', 'comment_created': datetime.datetime(2020, 8, 14, 18, 4, 50, tzinfo=datetime.timezone.utc), 'commenter': 'iamshnoo', 'type': 'User'}, {'comment_id': 471148213, 'comment_body': 'Thanks for the clarification.', 'comment_created': datetime.datetime(2020, 8, 16, 19, 19, 8, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 476391673, 'comment_body': 'Which notes? I think I am missing something.', 'comment_created': datetime.datetime(2020, 8, 25, 11, 56, 53, tzinfo=datetime.timezone.utc), 'commenter': 'sreenikSS', 'type': 'User'}]","[{'commit_sha': 'eb792c3efaadb6869eb34b5fb559c537a088f4a8', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f1f1963fe3ba54a9641d138b99fb39b88ddcac1b', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b28ff7b192e4c8c71bb875fd76454b1a12b0238', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72d47ea707bef9b1b8b7eb951ecb1f6f96f80f1e', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a570fe847d395d43a4f18e07478b06e88c811079', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a4722fdb7e665cf63e1b7ece3da61ed507236ba', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9186269eab2db84a70562a991330775d4f691276', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c06ed3bfaa554c41cf7c8d4c0c42eda5ecf0640', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8cae5f1b74efcca5ca8ef0d94c48729b00570c07', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c134420b198a1e8d5bc620a92ef5b4c9eab5dcad', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}]",Anjishnu,45921510,,User,,40,,28,55

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
28149409,mlpack,mlpack/mlpack,C++,1592,4989,183,321,30207,27,11,16,"[{'id': 466201209, 'number': 2564, 'closed': datetime.datetime(2020, 8, 28, 14, 52, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 11, 16, 0, 42, tzinfo=datetime.timezone.utc), 'time_taken': 1464714.0, 'time_delta': '16 days, 22:51:54', 'additions': 397, 'deletions': 0, 'state': 'closed'}, {'id': 466200102, 'number': 2563, 'closed': datetime.datetime(2021, 2, 26, 15, 57, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 11, 15, 59, 16, tzinfo=datetime.timezone.utc), 'time_taken': 17193472.0, 'time_delta': '198 days, 23:57:52', 'additions': 437, 'deletions': 1, 'state': 'closed'}, {'id': 466199233, 'number': 2562, 'closed': datetime.datetime(2022, 1, 2, 5, 0, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 11, 15, 57, 48, tzinfo=datetime.timezone.utc), 'time_taken': 43938183.0, 'time_delta': '508 days, 13:03:03', 'additions': 553, 'deletions': 0, 'state': 'closed'}, {'id': 443493616, 'number': 2495, 'closed': datetime.datetime(2022, 1, 2, 5, 0, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 2, 12, 45, 31, tzinfo=datetime.timezone.utc), 'time_taken': 47405721.0, 'time_delta': '548 days, 16:15:21', 'additions': 682, 'deletions': 248, 'state': 'closed'}, {'id': 443491120, 'number': 2494, 'closed': datetime.datetime(2020, 8, 5, 4, 31, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 2, 12, 40, 45, tzinfo=datetime.timezone.utc), 'time_taken': 2908266.0, 'time_delta': '33 days, 15:51:06', 'additions': 230, 'deletions': 0, 'state': 'closed'}, {'id': 443489246, 'number': 2493, 'closed': datetime.datetime(2021, 7, 25, 10, 19, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 2, 12, 37, 1, tzinfo=datetime.timezone.utc), 'time_taken': 33514938.0, 'time_delta': '387 days, 21:42:18', 'additions': 329, 'deletions': 0, 'state': 'closed'}, {'id': 396193271, 'number': 2345, 'closed': datetime.datetime(2021, 8, 14, 19, 7, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 31, 9, 21, 43, tzinfo=datetime.timezone.utc), 'time_taken': 43321541.0, 'time_delta': '501 days, 9:45:41', 'additions': 324, 'deletions': 0, 'state': 'closed'}, {'id': 391905351, 'number': 2321, 'closed': datetime.datetime(2020, 5, 10, 15, 39, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 21, 20, 6, 12, tzinfo=datetime.timezone.utc), 'time_taken': 4304001.0, 'time_delta': '49 days, 19:33:21', 'additions': 490, 'deletions': 0, 'state': 'closed'}, {'id': 389482120, 'number': 2307, 'closed': datetime.datetime(2020, 3, 22, 19, 15, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 16, 20, 36, 34, tzinfo=datetime.timezone.utc), 'time_taken': 513557.0, 'time_delta': '5 days, 22:39:17', 'additions': 155, 'deletions': 1, 'state': 'closed'}, {'id': 385605484, 'number': 2269, 'closed': datetime.datetime(2020, 3, 17, 14, 50, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 9, 14, 0, 19, tzinfo=datetime.timezone.utc), 'time_taken': 694231.0, 'time_delta': '8 days, 0:50:31', 'additions': 2454, 'deletions': 2370, 'state': 'closed'}]"
