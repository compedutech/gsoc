pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
457981987,Recipient box typeahead for streams and topics,,False,746,https://api.github.com/repos/zulip/zulip-terminal/pulls/746,https://github.com/zulip/zulip-terminal/pull/746,closed,210,32,6,5,3,43,1,0,[{'name': 'size: XL'}],2020-07-28 18:37:54+00:00,2020-08-18 17:18:32+00:00,1809638.0,"20 days, 22:40:38","[{'comment_id': 461794042, 'comment_body': ""There are no pinned stream considerations here - I'm not using the existing function.\r\nRefactoring `match_streams` looks a little hard, and pinning order is not super important to this PR - so I'd like to deal with this in a follow-up."", 'comment_created': datetime.datetime(2020, 7, 28, 18, 42, 22, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 461801212, 'comment_body': 'Though one hacky way to use the current `match_streams` would be to pass `[(stream_name, stream_name)..]` in `data`.', 'comment_created': datetime.datetime(2020, 7, 28, 18, 54, 59, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 463850878, 'comment_body': ""Don't you think pinning preferences should be relevant here?"", 'comment_created': datetime.datetime(2020, 7, 31, 21, 19, 19, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 463866015, 'comment_body': 'This gets set only on set-up, so if the stream is changed before the message is sent, the topic autocomplete uses the stream used at initialization. This is the same issue present with another PR, maybe?', 'comment_created': datetime.datetime(2020, 7, 31, 22, 4, 17, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 464970607, 'comment_body': ""They are certainly an improvement, but I don't see it as being a necessity for this particular feature. I'll make a temp fix but open an issue and make a follow-up PR for refactoring `match_stream`"", 'comment_created': datetime.datetime(2020, 8, 4, 11, 3, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 464988261, 'comment_body': 'Yes, I can fix it now that #738 is merged', 'comment_created': datetime.datetime(2020, 8, 4, 11, 40, 18, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 466450087, 'comment_body': ""This method name doesn't describe what it's getting it from at the call site (`stream_name` is not required), and in python we can often avoid needing a `get_` prefix (unlike other languages) - though I know other methods don't all follow that pattern right now. What do you think about something like `stream_id_from_name`?"", 'comment_created': datetime.datetime(2020, 8, 6, 14, 23, 33, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 466495911, 'comment_body': ""Is this change necessary, given the next commit? Aren't you moving it back?"", 'comment_created': datetime.datetime(2020, 8, 6, 15, 27, 55, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 467196723, 'comment_body': 'The git diff is a bit weird so it looks a little strange, but this statement stays in the same method. ', 'comment_created': datetime.datetime(2020, 8, 7, 18, 15, 10, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 467198239, 'comment_body': ""I'm not sure what to do about the existing `generic_autocomplete` tests now, since now they span two different methods. Changing them to check for `_process_typeaheads` would be hard because the parameters would get complex. (Because we'd have to create lists of suggestions)"", 'comment_created': datetime.datetime(2020, 8, 7, 18, 18, 31, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 467225788, 'comment_body': 'Is this okay, or should `match_stream` be refactored?', 'comment_created': datetime.datetime(2020, 8, 7, 19, 19, 12, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 467226135, 'comment_body': ""`matched_stream[0]` and `matched_stream[1]` have the same data, but I've used both of them for the sake of consistency."", 'comment_created': datetime.datetime(2020, 8, 7, 19, 19, 59, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 469626564, 'comment_body': ""I'm glad to have this marked, but this case does not actually seem to fail? (the other one too)"", 'comment_created': datetime.datetime(2020, 8, 13, 0, 37, 2, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 469633297, 'comment_body': 'This is ok to leave for now, but we should likely add a comment since it looks a little strange.', 'comment_created': datetime.datetime(2020, 8, 13, 0, 58, 50, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 469633369, 'comment_body': ""Again, worth another comment. When this is refactored, we'd likely change the name too, so that comment should be noticed/updated then. Meanwhile it should explain the strange calling behavior.\r\n\r\nThis also looks strange for the topic case, so perhaps another comment there?"", 'comment_created': datetime.datetime(2020, 8, 13, 0, 59, 3, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 469634134, 'comment_body': ""This only returns one stream id? The name implies otherwise.\r\n\r\nThis method or something like it is used/introduced in #772 now, right? Is this a dependency one way or another between PRs? A tidied version of that commit would be OK to include here as it indicates it maintains the stream id, separately from the topic-matching logic in this commit. It'd be a bonus to include in it any other places we either do something similar (name -> id) or should be keeping it synchronized and currently aren't, though the latter may be too much for one commit, and we don't want to hold this up."", 'comment_created': datetime.datetime(2020, 8, 13, 1, 1, 9, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 469645670, 'comment_body': 'This seems fine for now, but in future we may end up with stream names changing, so this may be a valid response, not an error in the application.', 'comment_created': datetime.datetime(2020, 8, 13, 1, 33, 19, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 469647473, 'comment_body': 'It would be good to have similar names for these two methods - they do a similar purpose, right?', 'comment_created': datetime.datetime(2020, 8, 13, 1, 39, 52, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 469649804, 'comment_body': 'I think we could mention both keys here.\r\n\r\nTypo in commit text.', 'comment_created': datetime.datetime(2020, 8, 13, 1, 49, 3, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 469652917, 'comment_body': 'This is resolved by the change at the end  of this commit?', 'comment_created': datetime.datetime(2020, 8, 13, 2, 0, 55, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 469654133, 'comment_body': 'This is a very general method name - is there anything more specific we could use?', 'comment_created': datetime.datetime(2020, 8, 13, 2, 5, 49, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 469654476, 'comment_body': ""minor: These are 'countable', so 'fewer' would be more accurate than 'less'"", 'comment_created': datetime.datetime(2020, 8, 13, 2, 7, 5, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 469656156, 'comment_body': ""While accurate, are these literally invalid state? Do they represent internal state that should not happen? If we're testing the range of inputs, should we cover those that the typeahead footer understands/expects?\r\n\r\nIt's also difficult knowing whether to test this method directly, rather than just cases where it's used, which I think you're getting the feeling of from your other review comment."", 'comment_created': datetime.datetime(2020, 8, 13, 2, 13, 53, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 469660582, 'comment_body': 'This is an example formatting rather than specific, right? If so, worth a comment.', 'comment_created': datetime.datetime(2020, 8, 13, 2, 30, 33, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 469836081, 'comment_body': ""I'm using this just to deal with the mypy error of the method not having a return value. Do I return something like `''` instead?"", 'comment_created': datetime.datetime(2020, 8, 13, 9, 54, 40, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 470025614, 'comment_body': 'Well, we could do various things in case of error (empty string, `None`, custom exception, general exception), as long as we ""handle"" them somehow. mypy only knows return types, so exceptions act as a fix for this at some level from its perspective - and not always in a wrong way. As I said, having this exception is fine as long as we expect all stream names to be valid and otherwise it being an internal error - so here we don\'t expect to handle it. Later we might change it to be something that callers are expected to handle.', 'comment_created': datetime.datetime(2020, 8, 13, 15, 11, 29, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 470065024, 'comment_body': 'Okay, this should be fine for now because the recipient validity check ensures that stream names are always valid.', 'comment_created': datetime.datetime(2020, 8, 13, 16, 10, 20, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 470070055, 'comment_body': 'Yes that should keep `stream_id` in sync', 'comment_created': datetime.datetime(2020, 8, 13, 16, 18, 42, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 470196953, 'comment_body': ""@neiljp I'm not sure whose internal state you're referring to - is that zt or readline? They are invalid, in the sense that they are indexes that do not exist for the array under consideration.\r\n\r\nWe don't have to cover all cases for footer since it is tested completely in `test_ui`?\r\n\r\nI think it is okay to test method in isolation, as long as we cover all the cases for invalid states. This would mean that other tests for autocomplete methods will require fewer test parameters, but they would be difficult to write because we'd have to use lists instead, unless of course we use really small lists."", 'comment_created': datetime.datetime(2020, 8, 13, 19, 29, 15, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 470275584, 'comment_body': 'This was merged via the commit in #772, so this should be good for now.', 'comment_created': datetime.datetime(2020, 8, 13, 22, 7, 12, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 471113992, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2020, 8, 16, 13, 35, 11, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 471115732, 'comment_body': 'Added', 'comment_created': datetime.datetime(2020, 8, 16, 13, 52, 31, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 471117347, 'comment_body': 'I kept it general because there are multiple things happening here - returning typeahead after checking for state constraints, and setting suggestions to footer.', 'comment_created': datetime.datetime(2020, 8, 16, 14, 8, 19, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 471120214, 'comment_body': ""Ohh, since this is a readline problem, we'd have to test for the actual writebox contents instead of testing the autocomplete methods."", 'comment_created': datetime.datetime(2020, 8, 16, 14, 35, 27, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 471130389, 'comment_body': 'Added', 'comment_created': datetime.datetime(2020, 8, 16, 16, 13, 13, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 471130396, 'comment_body': 'Added', 'comment_created': datetime.datetime(2020, 8, 16, 16, 13, 18, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 471130554, 'comment_body': 'FIxed', 'comment_created': datetime.datetime(2020, 8, 16, 16, 14, 53, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 471130814, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2020, 8, 16, 16, 17, 12, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 471131318, 'comment_body': 'Added a normal case to make sure test works properly', 'comment_created': datetime.datetime(2020, 8, 16, 16, 23, 3, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 471134757, 'comment_body': ""I hope this is okay, we don't have wrapping text for topics, nor do we support typeahead for it in message box"", 'comment_created': datetime.datetime(2020, 8, 16, 16, 58, 42, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 472309784, 'comment_body': ""By invalid, I meant whether these are states that we shouldn't reach inside ZT when we call this method. If so, how much of them should we test? If they can be reached, then of course we could test them, but there may be something more meaningful than 'invalid' to describe them.\r\n\r\nThe challenge here is that these methods are quite internal to all the typeahead and have been changing around recently with all the development of this area!\r\n\r\nSome of this is tested elsewhere - we certainly should consider whether we're over-testing the autocomplete to some degree?"", 'comment_created': datetime.datetime(2020, 8, 18, 16, 4, 11, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 472312736, 'comment_body': ""minor: 2nd commit title: While 'move into new method' is fine, you might consider 'Extract (into) method' in future, in line with the refactoring terminology?\r\n(eg. https://refactoring.guru/extract-method)"", 'comment_created': datetime.datetime(2020, 8, 18, 16, 8, 54, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 472336787, 'comment_body': 'Not yet! ;)', 'comment_created': datetime.datetime(2020, 8, 18, 16, 46, 19, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}]","[{'commit_sha': 'd5878b7b6ead46b5195bbc3b9cbd23554aa72537', 'committer_username': 'kaustubh-nair', 'committer_name': 'Kaustubh Nair', 'committer_email': 'kaustubh.nair108@gmail.com', 'commit_date': datetime.datetime(2017, 7, 15, 13, 2, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e204e433095dffcf6ff3fa9a6376d43b01625feb', 'committer_username': 'kaustubh-nair', 'committer_name': 'Kaustubh Nair', 'committer_email': 'kaustubh.nair108@gmail.com', 'commit_date': datetime.datetime(2017, 7, 15, 13, 2, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd64930e03df2190cf871eb0c220cf4ddc155499', 'committer_username': 'kaustubh-nair', 'committer_name': 'Kaustubh Nair', 'committer_email': 'kaustubh.nair108@gmail.com', 'commit_date': datetime.datetime(2017, 7, 15, 13, 2, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e076baff19b351c1823e86f68ea52e7b8b5e24a', 'committer_username': 'kaustubh-nair', 'committer_name': 'Kaustubh Nair', 'committer_email': 'kaustubh.nair108@gmail.com', 'commit_date': datetime.datetime(2017, 7, 15, 13, 2, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64ce68407cd0b198100432b0e9ab626024b9ee46', 'committer_username': 'kaustubh-nair', 'committer_name': 'Kaustubh Nair', 'committer_email': 'kaustubh.nair108@gmail.com', 'commit_date': datetime.datetime(2017, 7, 15, 13, 2, 30, tzinfo=datetime.timezone.utc)}]",Kaustubh Nair,30197132,kaustubh.nair108@gmail.com,User,,48,,71,79
455085802,Order typeahead by narrow/recipients,"This PR orders the mentions typeahead such that participants/subscribers in the current conversation are shown first.
There are two parts to this:

**Part 1: Add ordering logic (Commits 1 & 2)** - This is done by adding a `recipient_user_ids` attribute to `WriteBox`, storing the user ids of the participants. This is supported only for private messages because subscriber data for streams is not available. Note that storing recipient ids in `MessageBox` is necessary because there is no other way to obtain the user ids.
**Part 2: Add subscriber data for streams thus enabling ordering (Commits 4 & 5)** - Set `include_subscribers` to True while fetching initial data to get stream subscriber data. Just store this in `WriteBox.recipient_user_ids` and voila!",False,730,https://api.github.com/repos/zulip/zulip-terminal/pulls/730,https://github.com/zulip/zulip-terminal/pull/730,closed,171,61,6,5,4,37,2,0,"[{'name': 'size: XL'}, {'name': 'PR needs review'}]",2020-07-22 12:25:44+00:00,2020-08-05 23:09:25+00:00,1248221.0,"14 days, 10:43:41","[{'comment_id': 459149730, 'comment_body': 'Oops :)', 'comment_created': datetime.datetime(2020, 7, 23, 0, 2, 44, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 459154522, 'comment_body': 'I understand why you\'ve selected this ordering, to have groups later, but we should consider adding explicit group autocomplete soon given we\'ve deprioritized groups here - groups are not ""in"" a stream or PM/huddle (as it stands), so will potentially be last after however many other users (hundreds?), or require a lot of text to exclude users. This might be a case of having `@*` be a trigger for groups and `@**` for users?', 'comment_created': datetime.datetime(2020, 7, 23, 0, 20, 51, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 459157342, 'comment_body': ""I'm doubting if we want to have ourselves first, perhaps instead somehow 'last', since mentioning oneself seems a rare occurrence - and certainly if you autocomplete from `@` each time then you end up needing to skip past yourself every time!"", 'comment_created': datetime.datetime(2020, 7, 23, 0, 31, 51, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 459158340, 'comment_body': ""You mention this in the commit text, but it's not clear to me why `recipient_ids` is bad?"", 'comment_created': datetime.datetime(2020, 7, 23, 0, 35, 44, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 459165041, 'comment_body': 'This is from server version 2.1 (which is our claimed minimum version), and there was information available previously by default, so this seems OK to depend upon.', 'comment_created': datetime.datetime(2020, 7, 23, 1, 3, 25, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 459173535, 'comment_body': ""I'm not sure we need to do all this? We're currently returning the data directly from `stream_dict` in the next commit?"", 'comment_created': datetime.datetime(2020, 7, 23, 1, 39, 25, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 459223953, 'comment_body': ""Yes group typeahead requires more thought, we could either have a separate trigger for groups or process both group and user typeahead together and give groups some 'middle' priority. For example first name match > group match > last name match, though the first name > last name difference doesn't exist yet either."", 'comment_created': datetime.datetime(2020, 7, 23, 5, 38, 45, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 459225094, 'comment_body': ""I'm not sure, when you say 'recipient' would you associate it to large members of a stream?\r\n'subscribers' isn't the right fit for private messages either though, since you can't choose to subscribe.\r\n"", 'comment_created': datetime.datetime(2020, 7, 23, 5, 43, 31, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 459225288, 'comment_body': 'Oh right, I missed this :+1:', 'comment_created': datetime.datetime(2020, 7, 23, 5, 44, 21, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 459237996, 'comment_body': 'Opened #732', 'comment_created': datetime.datetime(2020, 7, 23, 6, 28, 20, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 459762532, 'comment_body': 'Perhaps add commits between the ones you push, for debugging, to drop in the push but which you can put back? :)', 'comment_created': datetime.datetime(2020, 7, 23, 22, 26, 59, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 459765583, 'comment_body': ""I think we want to have a term which works for both PMs and streams, and subscribers really only applies to the latter, as you say.\r\n\r\n`recipient` (`_id` and `display_`) is already used in the messages from the server, in messages. When someone posts privately, it's clear that users are the recipients. When posting to a stream, the stream is the 'direct' recipient, but according to the server knowledge of stream subscribers then it forwards it to the 'final recipients', ie. users.\r\n\r\nIn this case, what do you think about `recipient_user_ids`?"", 'comment_created': datetime.datetime(2020, 7, 23, 22, 35, 14, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 459774956, 'comment_body': 'A default argument like this is one of the traps in python. If we truly need a default argument then we need to use `None` as default.\r\n\r\nNote that there are other calls to `private_box_view`, and at least `x` can cause a crash right now. We could work around that in the first instance, but ultimately I think we want to update subscribers/recipients when the stream/users list is updated. For example, if I compose to #**announce**, but edit it to go to #**test here**, then autocomplete is still based on announce right now.', 'comment_created': datetime.datetime(2020, 7, 23, 23, 3, 51, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 459775796, 'comment_body': 'Typo here. I assume the rest of this block is unchanged from the previous iteration?', 'comment_created': datetime.datetime(2020, 7, 23, 23, 6, 20, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 459877697, 'comment_body': 'Oh no, I keep forgetting to check for these :facepalm: ', 'comment_created': datetime.datetime(2020, 7, 24, 6, 43, 53, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 459968110, 'comment_body': 'Yes, no new changes here.', 'comment_created': datetime.datetime(2020, 7, 24, 10, 15, 12, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 459968225, 'comment_body': 'Sounds good.', 'comment_created': datetime.datetime(2020, 7, 24, 10, 15, 28, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 459976229, 'comment_body': ""OK, a shallow copy is causing the crash here rather than the change in recipients. I think it is fine to not have the current user stored in the recipients at all? That would also be consistent with the other recipient data we're storing in `MessageBox`\r\n"", 'comment_created': datetime.datetime(2020, 7, 24, 10, 35, 3, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 459977972, 'comment_body': 'Updating subscribers requires a little more discussion, opened #737  ', 'comment_created': datetime.datetime(2020, 7, 24, 10, 39, 41, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 459981230, 'comment_body': ""On second thought, this wouldn't be too hard I'll fix this in the same PR"", 'comment_created': datetime.datetime(2020, 7, 24, 10, 47, 52, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 460329391, 'comment_body': ""I know that we're not modifying the list right now, but this would be safer if we treated this as `Optional[List[int]]=None`, as I suggested in the last review, in case we later do so. Here's an article discussing this: https://towardsdatascience.com/python-pitfall-mutable-default-arguments-9385e8265422"", 'comment_created': datetime.datetime(2020, 7, 24, 23, 30, 59, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 460330730, 'comment_body': ""Is this at the wrong indent level? It overwrites `self.recipient_ids` if it's a PM to self."", 'comment_created': datetime.datetime(2020, 7, 24, 23, 37, 54, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 460344817, 'comment_body': 'Making this change seems like a good opportunity to also refactor the code itself to prepare for the next commit, ie. to join the if/elif sequence incorporate the `update`?', 'comment_created': datetime.datetime(2020, 7, 25, 1, 5, 44, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 460345257, 'comment_body': 'You seem to have lost this function in this iteration of the PR.\r\n\r\nWorth adding a test?', 'comment_created': datetime.datetime(2020, 7, 25, 1, 9, 51, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 460347669, 'comment_body': ""We don't have a user id with 13?"", 'comment_created': datetime.datetime(2020, 7, 25, 1, 30, 44, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 460368996, 'comment_body': ""Writebox doesn't have any tests at all (except for typeahead) so I'll just add a test for this line and open an issue for the rest."", 'comment_created': datetime.datetime(2020, 7, 25, 5, 43, 58, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 460424896, 'comment_body': ""Oh no, that's horrible!"", 'comment_created': datetime.datetime(2020, 7, 25, 17, 13, 37, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 460426118, 'comment_body': ""I'm assuming you mean using `update` for identifying mute events?"", 'comment_created': datetime.datetime(2020, 7, 25, 17, 26, 59, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 460428205, 'comment_body': ""I don't like it when git gets confused like this :disappointed: "", 'comment_created': datetime.datetime(2020, 7, 25, 17, 51, 41, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 460428865, 'comment_body': 'Opened #739', 'comment_created': datetime.datetime(2020, 7, 25, 18, 0, 11, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 460447561, 'comment_body': ""Another approach I've seen which we could try here is to use the type checker and only allow passing in a `Sequence`, but the change you've made looks fine."", 'comment_created': datetime.datetime(2020, 7, 25, 21, 17, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 460449709, 'comment_body': 'Is this intentional?', 'comment_created': datetime.datetime(2020, 7, 25, 21, 45, 37, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 460450027, 'comment_body': ""Why not return a new list in the method, and skip the need for the deepcopy? Alternatively, we're only using it here so far, so we could change it to be `get_other_subscribers_in_stream` and incorporate the extra code below?"", 'comment_created': datetime.datetime(2020, 7, 25, 21, 50, 30, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 460489529, 'comment_body': ""Yes, this test deals only with muting, I'll move this to the previous commit though"", 'comment_created': datetime.datetime(2020, 7, 26, 7, 7, 42, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 460490040, 'comment_body': 'Thismethod can be used for displaying subscriber counts.', 'comment_created': datetime.datetime(2020, 7, 26, 7, 13, 14, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 460490318, 'comment_body': 'Returning a new list is the same as using deepcopy(I think?), so I would just be moving the deepcopy to the model?', 'comment_created': datetime.datetime(2020, 7, 26, 7, 15, 53, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 460542266, 'comment_body': ""OK, modified it to `get_other_subscribers_in_stream()` and used the `stream_dict` directly for subscribers counts. Removed the test because I don't see a point in writing an entire test just for a simple `assert_called_once_with()`. This can added when the whole method is tested."", 'comment_created': datetime.datetime(2020, 7, 26, 15, 44, 10, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}]","[{'commit_sha': '01081601c8a3052c49639a91abcd088f97ec37d4', 'committer_username': 'kaustubh-nair', 'committer_name': 'Kaustubh Nair', 'committer_email': 'kaustubh.nair108@gmail.com', 'commit_date': datetime.datetime(2017, 7, 15, 13, 2, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '266b02734c775d7362d2c1110446defa34a352f5', 'committer_username': 'kaustubh-nair', 'committer_name': 'Kaustubh Nair', 'committer_email': 'kaustubh.nair108@gmail.com', 'commit_date': datetime.datetime(2017, 7, 15, 13, 2, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd751b82e324a74c7ca1e1001a0129d795e09bb50', 'committer_username': 'kaustubh-nair', 'committer_name': 'Kaustubh Nair', 'committer_email': 'kaustubh.nair108@gmail.com', 'commit_date': datetime.datetime(2017, 7, 15, 13, 2, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a8f7bbef8df55cdda999e405e1852f291b31e2b2', 'committer_username': 'kaustubh-nair', 'committer_name': 'Kaustubh Nair', 'committer_email': 'kaustubh.nair108@gmail.com', 'commit_date': datetime.datetime(2017, 7, 15, 13, 2, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c84676f9cdb81374ea152bd53c5d0aaa578c7d7', 'committer_username': 'kaustubh-nair', 'committer_name': 'Kaustubh Nair', 'committer_email': 'kaustubh.nair108@gmail.com', 'commit_date': datetime.datetime(2017, 7, 15, 13, 2, 30, tzinfo=datetime.timezone.utc)}]",Kaustubh Nair,30197132,kaustubh.nair108@gmail.com,User,,48,,71,79
465202143,model: Ignore peer subscription events for unsubscribed streams.,"Since Model.stream_dict does not contain data for unsubscribed streams,
trying to handle this event raises exceptions.",False,768,https://api.github.com/repos/zulip/zulip-terminal/pulls/768,https://github.com/zulip/zulip-terminal/pull/768,closed,21,2,2,1,2,4,1,0,[{'name': 'size: S'}],2020-08-09 21:00:47+00:00,2020-08-10 18:28:12+00:00,77245.0,21:27:25,"[{'comment_id': 467628452, 'comment_body': ""I chose not to create a new variable for `event[stream_id]` because I'm not sure if all events will contain `stream_id`"", 'comment_created': datetime.datetime(2020, 8, 9, 21, 1, 51, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 467631791, 'comment_body': 'Do you mean refactoring it above the if/elif chain?\r\n\r\nCould we add spaces in there after the keywords again?', 'comment_created': datetime.datetime(2020, 8, 9, 21, 39, 31, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 467918412, 'comment_body': ""Yes, I meant making a new variable outside the if/elif block.\r\n\r\nIsn't there a rule available for the spaces? I couldn't find any"", 'comment_created': datetime.datetime(2020, 8, 10, 13, 52, 2, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 467932088, 'comment_body': ""I'm not sure if there's a correct way to test this. The missing check previously raised a `KeyError` because the stream id was missing in `stream_dict`. So I need to test if a `KeyError` is not raised, which can be tested without an assertion?\r\n\r\nRegardless, the call to `_handle_subscription_event` does not do anything at all so there isn't anything to be asserted in the first place."", 'comment_created': datetime.datetime(2020, 8, 10, 14, 12, 34, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}]","[{'commit_sha': 'e66085085c0b19ad837ca9364b007279b00ac041', 'committer_username': 'kaustubh-nair', 'committer_name': 'Kaustubh Nair', 'committer_email': 'kaustubh.nair108@gmail.com', 'commit_date': datetime.datetime(2017, 7, 15, 13, 2, 30, tzinfo=datetime.timezone.utc)}]",Kaustubh Nair,30197132,kaustubh.nair108@gmail.com,User,,48,,71,79
387430293,ui/footer: Display typeahead suggestions in footer.,"Part of typeahead followups #448 
GIF: 
![footer_new](https://user-images.githubusercontent.com/30197132/76884619-f8b83080-68a3-11ea-988b-4568916e673c.gif)

",False,540,https://api.github.com/repos/zulip/zulip-terminal/pulls/540,https://github.com/zulip/zulip-terminal/pull/540,closed,174,34,6,6,20,127,2,0,"[{'name': 'size: XL'}, {'name': 'PR needs review'}]",2020-03-12 19:24:22+00:00,2020-06-30 01:18:25+00:00,9438843.0,"109 days, 5:54:03","[{'comment_id': 392686786, 'comment_body': 'It is not required to break this line into another.', 'comment_created': datetime.datetime(2020, 3, 15, 15, 52, 59, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 392686899, 'comment_body': 'Extra space?', 'comment_created': datetime.datetime(2020, 3, 15, 15, 54, 13, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 392687616, 'comment_body': ""I think the names `*_list` aren't as descriptive of what the variables hold. Maybe something like `*_suggestions`  would be more appropriate?\r\n`group_suggestions`, `combined_suggestions`, for instance."", 'comment_created': datetime.datetime(2020, 3, 15, 16, 2, 33, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 393132241, 'comment_body': ""We already have a list called `group_typeahead` so `group_suggestions` would be a bit confusing. I've added `group_typeahead_text` instead"", 'comment_created': datetime.datetime(2020, 3, 16, 15, 59, 53, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 393187165, 'comment_body': ""I see what you are saying but since the purpose of the list is to hold 'suggestions', `*_suggestions` would be a good alternative. Also, in my opinion, typeahead and suggestions won't be as confusing.  :)"", 'comment_created': datetime.datetime(2020, 3, 16, 17, 17, 42, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 393532254, 'comment_body': 'Yeah, on second-thought, `_suggestions` sounds better.', 'comment_created': datetime.datetime(2020, 3, 17, 9, 6, 40, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 398455079, 'comment_body': 'Could you rename `n`? It is not as descriptive.', 'comment_created': datetime.datetime(2020, 3, 26, 10, 12, 4, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 398460144, 'comment_body': ""Shouldn't the text here be '#' or something which actually triggers `autocomplete_streams`?\r\n\r\nNote that the test works here because you're explicitly calling the mentioned function (line 168) in the test code."", 'comment_created': datetime.datetime(2020, 3, 26, 10, 20, 23, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 398470466, 'comment_body': 'minor: Maybe use the docstring format that has been used everywhere in the codebase.', 'comment_created': datetime.datetime(2020, 3, 26, 10, 37, 13, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 398475664, 'comment_body': 'More precise type annotation for `state` would be `int`?', 'comment_created': datetime.datetime(2020, 3, 26, 10, 45, 51, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 398484162, 'comment_body': 'You can use `if not footer_text` here or can even make the block a one-liner.', 'comment_created': datetime.datetime(2020, 3, 26, 11, 0, 8, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 398491459, 'comment_body': 'You can parameterize the number of suggestions rather than hard-coding (`3`) it here to make it more readable. Also, you might want to add a little variation in the number of suggestions along with that.', 'comment_created': datetime.datetime(2020, 3, 26, 11, 13, 14, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 398494773, 'comment_body': 'You might want to use the `write_box` fixture that is already defined.', 'comment_created': datetime.datetime(2020, 3, 26, 11, 19, 7, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 398498437, 'comment_body': 'We could use a test case for silent mentions.', 'comment_created': datetime.datetime(2020, 3, 26, 11, 25, 28, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 398511741, 'comment_body': 'Nice work! :+1: ', 'comment_created': datetime.datetime(2020, 3, 26, 11, 49, 58, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 398511990, 'comment_body': 'We could use a test for this.', 'comment_created': datetime.datetime(2020, 3, 26, 11, 50, 25, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 398863700, 'comment_body': 'These new local fixtures seem OK, but it may be worth investigating if it would be more straightforward to extract common fixtures related to the groups and pinned streams.', 'comment_created': datetime.datetime(2020, 3, 26, 20, 16, 23, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 398865526, 'comment_body': 'While this reuses a variable name, my preference would be to give it a different name (`limited_typeahead`?) or to simply place the `:num_suggestions` into the try clause.', 'comment_created': datetime.datetime(2020, 3, 26, 20, 19, 45, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 398867023, 'comment_body': ""I'm wary of this refactoring. While I'm not averse to for loops, I think this could be simpler by constructing a filtered name list, and then a 'styled' list for the typeahead.\r\n\r\nSee main review note too."", 'comment_created': datetime.datetime(2020, 3, 26, 20, 22, 25, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 399186201, 'comment_body': '@neiljp You mean combine the fixtures for streams and groups in the writebox fixture?', 'comment_created': datetime.datetime(2020, 3, 27, 11, 2, 7, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 399457075, 'comment_body': 'Well, I recall pinning tests doing something similar to what you have here.\r\n\r\n', 'comment_created': datetime.datetime(2020, 3, 27, 18, 19, 10, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 406005586, 'comment_body': 'I wanted the `autocomplete_*` functions to return only the list of names, and do the styling in `generic_autocomplete`. But this becomes complicated for mentions, since groups and users have different styling', 'comment_created': datetime.datetime(2020, 4, 9, 7, 23, 18, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 406008076, 'comment_body': ""Writing tests is a little difficult, so I've let this be since its a small change."", 'comment_created': datetime.datetime(2020, 4, 9, 7, 28, 26, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 406050250, 'comment_body': ""While I like the idea of extracting the common elements into `write_box`, this could make some testing elements more complex - eg. see my comments on @preetmishra 's search PR."", 'comment_created': datetime.datetime(2020, 4, 9, 8, 44, 27, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 406050739, 'comment_body': 'This name seems wrong; left over from rebase?', 'comment_created': datetime.datetime(2020, 4, 9, 8, 45, 19, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 406050883, 'comment_body': 'Same here?', 'comment_created': datetime.datetime(2020, 4, 9, 8, 45, 32, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 406057902, 'comment_body': ""I know you're working on the footer, but this is adding even more duplication. This would really benefit from a refactor."", 'comment_created': datetime.datetime(2020, 4, 9, 8, 57, 42, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 406059371, 'comment_body': 'I can understand this, but am wondering if instead of`Tuple[List[str], List[str]]` it might be cleaner with `List[Tuple[str, str]]`; then you would just return one list and index into the tuple? This means you can build it at the same time in the comprehensions.', 'comment_created': datetime.datetime(2020, 4, 9, 9, 0, 1, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 406060010, 'comment_body': ""If you're going to test the actual text, can we extract the style as a parameter at least?"", 'comment_created': datetime.datetime(2020, 4, 9, 9, 1, 15, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 406060672, 'comment_body': 'Is this a duplication of, or replacing, the code you just refactored in the other PR?', 'comment_created': datetime.datetime(2020, 4, 9, 9, 2, 22, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 406062610, 'comment_body': ""Without this commit, what is the expected behavior? The commit describes the new behavior, but not the previous - is this an enhancement on the footer code, or a requirement for it to work 'properly'?"", 'comment_created': datetime.datetime(2020, 4, 9, 9, 5, 42, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 406074985, 'comment_body': ""I've explained this in a comment in the discussion above, but I think I'll add it to the commit text too.\r\nThis commit fixes the problem of the footer continuing to display the suggestions once user is done with auto-complete. Once the footer is set, there's no way of knowing 'when' to reset the footer. Ideally this should be squashed with the previous commit while merging, but I've kept them seperate so there is a little distinction while reviewing."", 'comment_created': datetime.datetime(2020, 4, 9, 9, 27, 2, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 406087050, 'comment_body': 'Would it be enough to keep the elements for streams, mentions, and emojis in different fixtures? I would not prefer to keep things as they are - there would be considerable duplication in `test_generic_autocomplete_set_footer`. \r\n@preetmishra Would that work for your PR?', 'comment_created': datetime.datetime(2020, 4, 9, 9, 47, 57, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 406158182, 'comment_body': 'Good catch', 'comment_created': datetime.datetime(2020, 4, 9, 12, 8, 58, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 406158503, 'comment_body': 'Good idea; I can use the fixture from `conftest.py` too.', 'comment_created': datetime.datetime(2020, 4, 9, 12, 9, 34, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 406181031, 'comment_body': '@kaustubh-nair I would need a way to define what streams I want to be pinned (in parametrize) for every test case. Given the way we construct `pinned_streams`, it seems that we would need further refactoring just to accomplish that. I am thinking of _not_ using `streams_fixture` in https://github.com/zulip/zulip-terminal/pull/530#discussion_r403516773. Thoughts?', 'comment_created': datetime.datetime(2020, 4, 9, 12, 51, 47, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 406370325, 'comment_body': ""I've dealt with this in the new refactor for `generic_autocomplete`"", 'comment_created': datetime.datetime(2020, 4, 9, 17, 43, 24, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 406373360, 'comment_body': 'Would it be a better idea to write a new set of test for testing pinned streams? The current streams test can be modified to not take pinning into consideration. This should decrease the fixture set but it will require very close inspection of the existing fixtures.', 'comment_created': datetime.datetime(2020, 4, 9, 17, 48, 27, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 406382663, 'comment_body': '@kaustubh-nair Could you explain how that would address my concern (that I mentioned in the previous comment)?', 'comment_created': datetime.datetime(2020, 4, 9, 18, 4, 50, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 406399793, 'comment_body': 'Since the objective is to make pinned tests more explicit, one way to do it would be to test them seperately - this way you get more control over the way pinned streams are generated without affecting the current tests a lot. Does that make sense?\r\nIn any case, the `write_box` attributes for streams will require refactoring, so let me know what works best for you.', 'comment_created': datetime.datetime(2020, 4, 9, 18, 35, 1, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 406630524, 'comment_body': 'Yes, ""more control over the way pinned streams are generated"" would be better. :+1: ', 'comment_created': datetime.datetime(2020, 4, 10, 6, 58, 57, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 433094915, 'comment_body': ""This is a temp fix. @preetmishra what do you think about refactoring `match_streams` to match only using stream names? I don't mind doing it myself, asking for inputs."", 'comment_created': datetime.datetime(2020, 6, 1, 8, 0, 52, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 433148129, 'comment_body': ""It could work for `autocomplete_streams` as the 'formatting' that is applied to each stream is simple. However, I think formatting/rebuilding buttons in `update_streams`, after every search,  would be an overhead."", 'comment_created': datetime.datetime(2020, 6, 1, 10, 5, 29, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 434965829, 'comment_body': ""I understand why you have this commit here, as with many matches it could take up many lines of footer, right?\r\n\r\nThis seems reasonable as a v1, but I think we should consider adding a `[more]` (or similar) marker, so users are aware if some suggestions have been removed. Otherwise they may think that all the matches are listed.\r\n\r\nFor a v2 then we could consider aspects like fitting the width of the screen (this already wraps onto two lines for some of my uses of ZT), or maybe a width-multiple (eg. 2 lines).\r\n\r\nAn alternative v2, or v3, *could* be to have a side-scrolling widget that shows 'all' results, but we can discuss before trying any of that, and there are other features to consider first."", 'comment_created': datetime.datetime(2020, 6, 4, 3, 3, 7, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 434971828, 'comment_body': ""Can we improve the name of this method and the parameter(s)? Aren't we passing a format string and generating 'formatted' versions?"", 'comment_created': datetime.datetime(2020, 6, 4, 3, 28, 51, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 435026303, 'comment_body': ""In this commit, it is a temporary fix, but later we end up with nested tuples with duplicate information, eg. `(('name', '#**name**'), 'name')`\r\n\r\nThe issue seems to be that the previous code was a `(formatted_name, name)` pair, but your new code generates a `(name, formatted_name)` pair? If you adjust the new code to be in the opposite order then you won't need the fix later on, as the revised `generate_typeaheads` will be exactly what we need?"", 'comment_created': datetime.datetime(2020, 6, 4, 6, 45, 5, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 435028105, 'comment_body': ""I'm wondering if we might benefit from a leading space (or similar) here before all the entries, as when the first entry is highlighted it doesn't stand out very well?"", 'comment_created': datetime.datetime(2020, 6, 4, 6, 49, 18, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 435033763, 'comment_body': 'Is the type ignore necessary due to the nested tuples?\r\n\r\nCan we just return `None` here as before and handle the success below the try block?', 'comment_created': datetime.datetime(2020, 6, 4, 7, 1, 28, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 435035178, 'comment_body': 'Can we be consistent with the style here, between the autocomplete functions?', 'comment_created': datetime.datetime(2020, 6, 4, 7, 4, 25, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 435059383, 'comment_body': 'These two lines are to enable calculation of the expected result? If so, maybe move them into a block with the assert?', 'comment_created': datetime.datetime(2020, 6, 4, 7, 50, 47, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 435060573, 'comment_body': ""This is likely where we'll start to include ids, and those can be included in at least mentions. I'm not sure if there is ambiguity in other cases?"", 'comment_created': datetime.datetime(2020, 6, 4, 7, 52, 49, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 435062685, 'comment_body': ""This does make the commit rather big; I'm not sure at this point how to split it, as it seems non-ideal right now to have it stay in the autocomplete state between commits."", 'comment_created': datetime.datetime(2020, 6, 4, 7, 56, 43, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 435200393, 'comment_body': ""I had actually implemented this before. The initial version could cycle through all possible suggestions, but I changed it to something simpler on Aman's suggestion.\r\nIf you want to have a look I have a working version of that on my fork ( https://github.com/kaustubh-nair/zulip-terminal/tree/autocomplete_footer_v1 ) "", 'comment_created': datetime.datetime(2020, 6, 4, 12, 2, 50, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 435201482, 'comment_body': 'Another option to `[more]` would be something like `....` ? Could use unicode characters for dot too.', 'comment_created': datetime.datetime(2020, 6, 4, 12, 4, 57, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 435853377, 'comment_body': ""@neiljp I don't see where the nested tuples are being generated?"", 'comment_created': datetime.datetime(2020, 6, 5, 11, 13, 13, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 435916460, 'comment_body': ""There's already 1 space before and after each entry. Should I add another one before?"", 'comment_created': datetime.datetime(2020, 6, 5, 13, 21, 58, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 435923966, 'comment_body': ""We can't return `None` here because we still need to set the footer when the exception is raised. The exception is raised when a user has cycled through all the suggestions and returns back to the non-completed state.(Or goes back using `ctrl+r`)"", 'comment_created': datetime.datetime(2020, 6, 5, 13, 34, 7, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 435926070, 'comment_body': ""The tuples are of the form `('#**announce**', 'announce')`. I need to set the type to `Tuple[Optional[str], Optional[str]]` which doesn't fit the line so I added type ignore. mypy doesn't allow line breaks for type declarations(https://github.com/python/mypy/issues/4511)\r\n\r\nBut I changed it from list to tuple for consistency."", 'comment_created': datetime.datetime(2020, 6, 5, 13, 37, 23, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 436016697, 'comment_body': 'My bad, found it. I had forgotten `generate_typeaheads` returns a list of tuples.', 'comment_created': datetime.datetime(2020, 6, 5, 16, 1, 6, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 436018296, 'comment_body': ""There isn't any in emojis, and I doubt there would be much in streams either."", 'comment_created': datetime.datetime(2020, 6, 5, 16, 3, 58, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 436088807, 'comment_body': 'Added `[more]` to the end of footer text', 'comment_created': datetime.datetime(2020, 6, 5, 18, 16, 58, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 436090486, 'comment_body': 'I still have to do this hacky stuff to generate the structure again.\r\nIt would be a lot more useful if `match_stream` only took a list of stream names and returned the matched list. Styling of the list could be done after that. But I guess, there would be problems in changing `match_streams` this due to the buttons?', 'comment_created': datetime.datetime(2020, 6, 5, 18, 20, 28, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 438416248, 'comment_body': ""This at least gives an indication, though I think we could refine the text, or perhaps style it differently to show it's not one of the matches."", 'comment_created': datetime.datetime(2020, 6, 10, 21, 23, 37, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 438417156, 'comment_body': ""To clarify, I suggested this so that when the first option is selected in the list, that it doesn't blend in with the left side of the screen? So a 'fixed' space, a little like any `more` text, but at the start?"", 'comment_created': datetime.datetime(2020, 6, 10, 21, 25, 34, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 438445959, 'comment_body': ""In the exceptional case, this just seems to flow through the `set_typeahead_footer` and does a `set_footer_text('')` and `return None`? So my point is why not handle that case explicitly and avoid the need for handling `Optional[str]` rather than `str`?"", 'comment_created': datetime.datetime(2020, 6, 10, 22, 39, 29, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 438452878, 'comment_body': ""I think it would be reasonable to adapt `match_stream` to also return the text it is matching against too. That's a pretty minimal change, particularly if we later generalize `match_stream` to be useful for other matching, which seems likely?"", 'comment_created': datetime.datetime(2020, 6, 10, 23, 0, 48, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 438473600, 'comment_body': ""It'd be useful to prefix this and similar boolean values with a `is_` (or sometimes `in_` or similar)"", 'comment_created': datetime.datetime(2020, 6, 11, 0, 11, 4, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 438474493, 'comment_body': ""Doesn't `set_footer_called` represent `expect_footer_was_reset` or similar?\r\n(partly that's since `set_footer` is called elsewhere and doesn't just reset it, so this is confusing?)"", 'comment_created': datetime.datetime(2020, 6, 11, 0, 14, 20, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 438475897, 'comment_body': ""I'm mostly happy with this separation at this point, though leaving the UI as it is in the previous commit just seems a bit messy."", 'comment_created': datetime.datetime(2020, 6, 11, 0, 19, 33, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 438974520, 'comment_body': 'I could squash before merging?', 'comment_created': datetime.datetime(2020, 6, 11, 18, 2, 17, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 438982455, 'comment_body': ""@neiljp  Ah, I see. So you want to call `set_footer_text( )` from this method itself instead of going to `set_typeahead_footer( )`? Well, that's certainly not a problem - only thing would be the `  [more]  ` addition would be duplicated."", 'comment_created': datetime.datetime(2020, 6, 11, 18, 16, 48, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 440560718, 'comment_body': ""This is a new refactor compared to previous versions?\r\n\r\nTo clarify, `state` can be `None`, or an integer in that range, right? We could note that in the code if so, as the readline code doesn't make it overly clear - maybe their example could be clearer this way too, though I suppose that depends on whether users are using forward and reverse autocomplete?\r\n\r\nSince the range does seem cleaner than the exceptions in our specific case, this seems reasonable, though it's unclear if it's better for larger num_suggestions than just relying on an exception - while `range` is a generator, we're still using it every time. Checking for not None and within bounds may be simpler, particularly since we know it's [-n..n]."", 'comment_created': datetime.datetime(2020, 6, 16, 3, 11, 15, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 440586362, 'comment_body': '`suggestions` here is the same name as the new fixture, so is that fixture being used?', 'comment_created': datetime.datetime(2020, 6, 16, 4, 58, 7, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 440586425, 'comment_body': 'hightlighted and similar typos?', 'comment_created': datetime.datetime(2020, 6, 16, 4, 58, 23, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 440587178, 'comment_body': 'Tighten the type down here?', 'comment_created': datetime.datetime(2020, 6, 16, 5, 1, 16, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 440587839, 'comment_body': ""You loosened this type compared to the last iteration? What's the reasoning?"", 'comment_created': datetime.datetime(2020, 6, 16, 5, 4, 18, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 440588412, 'comment_body': 'You only use the second element of the tuple? Why are you passing in both?\r\n\r\nSee another comment, where I suggest unzipping the list of tuples first.', 'comment_created': datetime.datetime(2020, 6, 16, 5, 6, 46, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 440588873, 'comment_body': ""It's fine to leave for now."", 'comment_created': datetime.datetime(2020, 6, 16, 5, 8, 10, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 440590135, 'comment_body': 'minor: as per a comment from an earlier review cycle, this could have a `in_` prefix.\r\n\r\nThat would make it read `if self.in_typeahead_mode:` and similar elsewhere, so read more clearly.', 'comment_created': datetime.datetime(2020, 6, 16, 5, 12, 53, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 440591490, 'comment_body': 'minor: break the entire list onto the next line in these cases.', 'comment_created': datetime.datetime(2020, 6, 16, 5, 18, 4, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 440592356, 'comment_body': ""If this patch works, this shouldn't need such a complex assignment, as per the other test in this commit."", 'comment_created': datetime.datetime(2020, 6, 16, 5, 21, 22, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 440594012, 'comment_body': 'This is new compared to the last version?', 'comment_created': datetime.datetime(2020, 6, 16, 5, 27, 23, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 440594513, 'comment_body': 'It would be clearer if the logic above this conditional was in this else statement?\r\n\r\nThe leading space looks good!', 'comment_created': datetime.datetime(2020, 6, 16, 5, 29, 9, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 440597186, 'comment_body': 'Would it make sense to unzip the list of tuples here, so you could set typeahead to one element without the `[0]`, and pass the other unzipped list to `set_typeahead_footer` not as a list of tuples?', 'comment_created': datetime.datetime(2020, 6, 16, 5, 38, 19, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 440597427, 'comment_body': ""We return an `Optional`, so what's the problem here?"", 'comment_created': datetime.datetime(2020, 6, 16, 5, 39, 21, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 440690357, 'comment_body': 'Yes, this is new.', 'comment_created': datetime.datetime(2020, 6, 16, 8, 49, 48, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 440695384, 'comment_body': 'I tried using `range` for a huge 20-digit number and it still works without any time delay.', 'comment_created': datetime.datetime(2020, 6, 16, 8, 57, 27, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 440697712, 'comment_body': ""I used `range` because it's easier to write, than specifying bounds explicitly.\r\nAnd the range is not `[-n , n]`, but rather `[-n, n)`. So I'd have to check for negative/positive states and compare those separately. This is a lot more concise."", 'comment_created': datetime.datetime(2020, 6, 16, 9, 1, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 440792523, 'comment_body': 'What do you mean by this? Complex assignment of the patch?', 'comment_created': datetime.datetime(2020, 6, 16, 11, 54, 59, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 440794015, 'comment_body': 'Oops the fixture was being used before I pushed the refactor. Nothing misses your eye, does it? ;)', 'comment_created': datetime.datetime(2020, 6, 16, 11, 57, 38, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 440990215, 'comment_body': 'Re a large range, that likely depends on `state`?\r\n\r\nAlso, I was leaning towards the more explicit `state is not None and -n <= state < n`, which is pretty clear and involves no data-structure.', 'comment_created': datetime.datetime(2020, 6, 16, 16, 36, 48, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 440991998, 'comment_body': 'As per the other test, you have eg. `set_typeahead_footer = mocker.patch(...`, which is enough to patch the method, and then you can test that local variable later.', 'comment_created': datetime.datetime(2020, 6, 16, 16, 39, 34, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 441078353, 'comment_body': ""I can't make this `List[str]` because I need to do assign a tuple for highlighting\r\n```\r\nsuggestions[state] = ('code', suggestions[state])\r\n```"", 'comment_created': datetime.datetime(2020, 6, 16, 19, 4, 9, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 441079033, 'comment_body': ""The older version was `List[Tuple[str, str]]` which didn't cause problems here."", 'comment_created': datetime.datetime(2020, 6, 16, 19, 5, 26, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 441085038, 'comment_body': 'I have the same assignment in the other test too. I tried this and a local assignment does not work. Probably because `set_typeahead_footer` is called using `write_box.view`?', 'comment_created': datetime.datetime(2020, 6, 16, 19, 16, 23, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 441085361, 'comment_body': 'Fixed by refactoring `match_stream`', 'comment_created': datetime.datetime(2020, 6, 16, 19, 17, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 441085493, 'comment_body': 'Fixed by refactoring `match_stream`', 'comment_created': datetime.datetime(2020, 6, 16, 19, 17, 17, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 441086497, 'comment_body': 'Oh right, that can work too', 'comment_created': datetime.datetime(2020, 6, 16, 19, 19, 6, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 441090797, 'comment_body': 'The type is not determined by the return type, but by \r\n```\r\ntypeahead = reduced_typeaheads[state]\r\n```', 'comment_created': datetime.datetime(2020, 6, 16, 19, 27, 22, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 441094809, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2020, 6, 16, 19, 35, 7, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 441116063, 'comment_body': 'Any suggestions for this?\r\nThough, I think its good enough - as a user gets used to using ZT they would have figured out `[more]` is not a match', 'comment_created': datetime.datetime(2020, 6, 16, 20, 16, 55, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 441180481, 'comment_body': ""This is a good start, certainly. This indicates to the user that there are more than those listed, which is important. However, it doesn't indicate aspects such as how to get the rest, how many more there are, etc. How best to show that may be debatable, so this seems like a good aspect to add to the general improvements to make to typeahead (maybe in the tracking issue)."", 'comment_created': datetime.datetime(2020, 6, 16, 22, 36, 46, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 441457018, 'comment_body': 'As `splits[0]` has two occurrences now (line 498 and line 501), it might be clearer to extract it as a variable - `stream_name`.', 'comment_created': datetime.datetime(2020, 6, 17, 10, 50, 9, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 441797482, 'comment_body': 'Updated - thanks for the review :+1:', 'comment_created': datetime.datetime(2020, 6, 17, 19, 56, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 444559654, 'comment_body': ""Let's at least add a leading space after the `if` here.\r\n\r\nIs there no space to fit `-len(...) <= state < len(...)` on one line? That would be clearer.\r\n\r\nThe commit text refers to `state`? If so, we should refer to it?"", 'comment_created': datetime.datetime(2020, 6, 23, 23, 18, 27, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 444562061, 'comment_body': ""That's the idea ;)"", 'comment_created': datetime.datetime(2020, 6, 23, 23, 26, 17, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 444562788, 'comment_body': ""Commit text says 'blank footer is displayed when there are no matches', but this is contradicted later."", 'comment_created': datetime.datetime(2020, 6, 23, 23, 28, 39, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 444563072, 'comment_body': 'It would be good to test this separately (to make sure this fails before the code is present), but all of `write_box.view` is mocked in the fixture, so do we need to patch it?\r\n\r\nIf so, the same applies to the other change below, in this commit.', 'comment_created': datetime.datetime(2020, 6, 23, 23, 29, 47, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 444568360, 'comment_body': ""Wouldn't this change of typing belong in the commit with the if/else change and explanation of the values passed in?"", 'comment_created': datetime.datetime(2020, 6, 23, 23, 48, 45, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 444570596, 'comment_body': ""We should be able to specify a type for this in a comment, and honestly I'm surprised that mypy doesn't figure this out."", 'comment_created': datetime.datetime(2020, 6, 23, 23, 56, 29, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 444575442, 'comment_body': ""Right, but from a logical perspective, we just know we have a `List[str]` coming in. You don't *have* to assign to the same name, and perhaps it would be clearer if you didn't? It doesn't really make much sense to have the not-found case be 'suggestions' by name, either."", 'comment_created': datetime.datetime(2020, 6, 24, 0, 14, 16, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 444575712, 'comment_body': 'I see you moved a lot of the suggestions code into the conditional block (if/else) - it looks easier to read :+1:\r\n\r\nHowever, we only need this line if there are suggestions, so can it move into the block too?', 'comment_created': datetime.datetime(2020, 6, 24, 0, 15, 21, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 444577400, 'comment_body': ""minor: To avoid the footer getting 'stuck' before the next commit, we could just use the time parameter here?"", 'comment_created': datetime.datetime(2020, 6, 24, 0, 21, 42, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 444581899, 'comment_body': 'minor: I think I mentioned both `is_` and `in_`, but consider the commit text you have: ""If the user is not in typeahead mode"". Based on expressing that in code,  `in_` probably works better, right? You could even have `is_in_` since you have space to be verbose - assuming we leave the `not` from the commit text, to be a logical operator.', 'comment_created': datetime.datetime(2020, 6, 24, 0, 39, 48, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 444582377, 'comment_body': 'Is the same simplification possible here, as discussed elsewhere? Can we just remove this line, since the entire view is mocked already?', 'comment_created': datetime.datetime(2020, 6, 24, 0, 41, 34, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 444582762, 'comment_body': 'Please have blank lines around the actual test method to emphasize it. We can skip the blank L236 too.', 'comment_created': datetime.datetime(2020, 6, 24, 0, 43, 9, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 444758664, 'comment_body': ""Added. \r\n\r\nNo, the whole thing doesn't fit in one line."", 'comment_created': datetime.datetime(2020, 6, 24, 9, 16, 36, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 444769508, 'comment_body': ""Ah, right, this doesn't need to be patched at all."", 'comment_created': datetime.datetime(2020, 6, 24, 9, 35, 24, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 444773550, 'comment_body': ""Did this, but if `ctrl f` is pressed 10 times, the help text will change 10 times. I guess we could let this slide since it's fixed in the next commit."", 'comment_created': datetime.datetime(2020, 6, 24, 9, 42, 48, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 444783230, 'comment_body': ""When I assign it to a new name, I would still need a `List[Any]` type annotation?\r\n\r\nSo the best place to do it would be \r\n```python3\r\nfooter_text = list(map(lambda x: ' ' + x + ' ', suggestions))\r\n```\r\nBut the type annotation will not fit in this line, so I'd end up doing\r\n```python3\r\nfooter_text = suggestions  # type: List[Any]\r\n```\r\nIs it really worth adding a new line to copy a variable just to typecast it?"", 'comment_created': datetime.datetime(2020, 6, 24, 9, 59, 25, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 444784913, 'comment_body': 'Yeah, adding a type for `typeahead = reduced_typeaheads[state]` would be ideal but it does not fit the line', 'comment_created': datetime.datetime(2020, 6, 24, 10, 2, 31, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 444801859, 'comment_body': ""It belongs in this commit because I'm doing an explicit `state = None` in this commit which wasn't required before."", 'comment_created': datetime.datetime(2020, 6, 24, 10, 35, 26, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 445351976, 'comment_body': 'What is this line for?', 'comment_created': datetime.datetime(2020, 6, 25, 7, 13, 37, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 445352472, 'comment_body': ""As per on czo, I'd suggest using a list comprehension, and perhaps shortening the name."", 'comment_created': datetime.datetime(2020, 6, 25, 7, 14, 46, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 445352869, 'comment_body': ""Right, but `state` can be `None` in any case? Isn't that the point of the if/else block? Otherwise `if state is not None...` is meaningless if we're ensuring that `state` is an `int`. So that commit would be about ensuring you cover the cases in the if/else, and also demonstrating the inputs via the type hint."", 'comment_created': datetime.datetime(2020, 6, 25, 7, 15, 26, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 445353670, 'comment_body': ""I'd really prefer we just type this. We could look into relaxing the line length somewhat in any case."", 'comment_created': datetime.datetime(2020, 6, 25, 7, 17, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 446517522, 'comment_body': 'Oops forgot to update this test after the recent refactor. Fixed.', 'comment_created': datetime.datetime(2020, 6, 27, 11, 58, 25, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}]","[{'commit_sha': '6e5beef163e94d49e6dd2d7614fd6a75271fd79f', 'committer_username': 'kaustubh-nair', 'committer_name': 'Kaustubh Nair', 'committer_email': 'kaustubh.nair108@gmail.com', 'commit_date': datetime.datetime(2017, 7, 15, 13, 2, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '928fb992385918cf23fe00ff36fa75b5ccbab902', 'committer_username': 'kaustubh-nair', 'committer_name': 'Kaustubh Nair', 'committer_email': 'kaustubh.nair108@gmail.com', 'commit_date': datetime.datetime(2017, 7, 15, 13, 2, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef85f21dff5718f4e908fcfb43a0deaaa7475126', 'committer_username': 'kaustubh-nair', 'committer_name': 'Kaustubh Nair', 'committer_email': 'kaustubh.nair108@gmail.com', 'commit_date': datetime.datetime(2017, 7, 15, 13, 2, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38ed12eb81a972aead4dac98bbe00ffc775a96b5', 'committer_username': 'kaustubh-nair', 'committer_name': 'Kaustubh Nair', 'committer_email': 'kaustubh.nair108@gmail.com', 'commit_date': datetime.datetime(2017, 7, 15, 13, 2, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f2c7eead3fb7fa7be92b0ef3ff5d2a0c79157d1', 'committer_username': 'kaustubh-nair', 'committer_name': 'Kaustubh Nair', 'committer_email': 'kaustubh.nair108@gmail.com', 'commit_date': datetime.datetime(2017, 7, 15, 13, 2, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '998398dabbf50105025fa825c331b1cdecf00dc9', 'committer_username': 'kaustubh-nair', 'committer_name': 'Kaustubh Nair', 'committer_email': 'kaustubh.nair108@gmail.com', 'commit_date': datetime.datetime(2017, 7, 15, 13, 2, 30, tzinfo=datetime.timezone.utc)}]",Kaustubh Nair,30197132,kaustubh.nair108@gmail.com,User,,48,,71,79
428054749,Topic editing improvements,"This PR can (and probably should) be merged in two parts - 
## Part 1
**Allow editing of topics after message edit time limit expires** (Commits 1-3) - This improvement is basically done by adding a `msg_body_edit_enabled`attribute to `WriteBox` for differentiating topic-only editing from topic+body editing. After adding this, two changes need to be done - 
1. Modify `WriteBox` UI so that focus is not set to message box if only topic editing is permitted. Additional test for `TAB`/`CYCLE_COMPOSE_BOX` keypress has been added in commit 1
2. Do not send message content in the server request if its editing is not permitted. This requires a model refactor to make content optional which has been done in commit 2.

## Part 2
**Let user specify propagate mode while editing**(Commits 4-8) - This is done by adding a button in `WriteBox` header which opens up a popup to select propagate mode. This popup is initially read-only, and checkboxes are added for selection in the last commit. Tests for this part are lacking, which I'll add after a little feedback.

## Follow-ups:
1. Adding community editing support.",False,675,https://api.github.com/repos/zulip/zulip-terminal/pulls/675,https://github.com/zulip/zulip-terminal/pull/675,closed,159,25,7,4,12,32,2,0,"[{'name': 'size: XL'}, {'name': 'feedback wanted'}]",2020-06-04 19:54:40+00:00,2020-08-30 00:52:34+00:00,7448274.0,"86 days, 4:57:54","[{'comment_id': 435680539, 'comment_body': 'Good adjustment, but maybe mention that we can still edit the topic?', 'comment_created': datetime.datetime(2020, 6, 5, 4, 14, 12, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 435680939, 'comment_body': 'This does seem to make it not editable, but tab on the topic seems to put the focus on it nevertheless?\r\n\r\nIn a similar way, should we be allowing the stream to be edited?', 'comment_created': datetime.datetime(2020, 6, 5, 4, 15, 58, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 438484386, 'comment_body': ""I'm definitely convinced of making this change (selectively avoiding tabbing to the boxes) for when editing, or maybe even for replying, but generally we've allowed free entry of stream names here, rather than just the current narrow - which seems to be the behavior after this change. If this was updated to accept a selection/autocomplete-only, this would seem more feasible a change; I'm not sure we should lose the stream-edit feature while that's not the case though, so perhaps stick to just for editing existing messages?\r\n\r\nOther than the above, right now the biggest issue appears to be that after this commit, sending a message causes ZT to crash (`Text` doesn't have an `edit_text` attribute), so we'll need to change this in any case."", 'comment_created': datetime.datetime(2020, 6, 11, 0, 52, 36, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 438485861, 'comment_body': 'Putting the changes to this method and the associated tests in their own earlier commit would be much clearer.', 'comment_created': datetime.datetime(2020, 6, 11, 0, 58, 25, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 438486796, 'comment_body': 'We can parametrize this  more simply?', 'comment_created': datetime.datetime(2020, 6, 11, 1, 2, 3, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 438488781, 'comment_body': ""There's a lot of duplication of calling this method with similar parameters."", 'comment_created': datetime.datetime(2020, 6, 11, 1, 10, 20, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 441194530, 'comment_body': ""Since each of these can be `None`, are we just treating the interface as passing that explicitly if they don't want it changed?\r\n\r\nPerhaps we should re-order parameters and make topic & content required to be named, with defaults?"", 'comment_created': datetime.datetime(2020, 6, 16, 23, 19, 42, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 441194872, 'comment_body': 'If both `topic` and `content` are `None`, is the function call valid, or is it a logic error? Should we assert on their values at the top of the method?\r\n\r\nUPDATE: You fixed this with the assert already :+1: We could add a test for the assert case.', 'comment_created': datetime.datetime(2020, 6, 16, 23, 20, 52, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 441940831, 'comment_body': ""This would benefit from a name-change? The expected behavior has changed, ie. editing should succeed now.\r\n\r\nNot in your commit yet, but there's also a typo."", 'comment_created': datetime.datetime(2020, 6, 18, 2, 59, 5, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 441941109, 'comment_body': 'It would be useful to have some ids here.', 'comment_created': datetime.datetime(2020, 6, 18, 3, 0, 12, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 441941482, 'comment_body': ""Not all existing tests do this, but when there's reasonable amount of setup and/or assert code, it looks good to visually separate the tested code from those parts with a blank line each side."", 'comment_created': datetime.datetime(2020, 6, 18, 3, 1, 43, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 442236015, 'comment_body': 'minor: We could add an assert here for checking if either one of it is `None`, but not both.\r\n```\r\nassert content is not None or topic is not None\r\n```', 'comment_created': datetime.datetime(2020, 6, 18, 13, 43, 45, tzinfo=datetime.timezone.utc), 'commenter': 'sumanthvrao', 'type': 'User'}, {'comment_id': 442835727, 'comment_body': ""Why is this necessary? I don't remember this in the previous iteration."", 'comment_created': datetime.datetime(2020, 6, 19, 13, 19, 21, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 442839541, 'comment_body': ""I'm not sure why these are on the same line?"", 'comment_created': datetime.datetime(2020, 6, 19, 13, 26, 50, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 442841240, 'comment_body': ""Most of this test code is independent of this commit, right? That is, you're effectively adding the first parameter, to change the behavior of the key. So it would be fine to have this test in a separate commit first."", 'comment_created': datetime.datetime(2020, 6, 19, 13, 30, 8, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 443220540, 'comment_body': 'How do I test an assert statement?', 'comment_created': datetime.datetime(2020, 6, 21, 13, 39, 58, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 443220597, 'comment_body': 'Making an empty request in unnecessary.', 'comment_created': datetime.datetime(2020, 6, 21, 13, 40, 46, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 443589062, 'comment_body': ""Well, `key` didn't require a new line by itself? :man_shrugging: "", 'comment_created': datetime.datetime(2020, 6, 22, 14, 14, 41, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 463057607, 'comment_body': ""Removed, I don't think this is important to this PR"", 'comment_created': datetime.datetime(2020, 7, 30, 14, 55, 15, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 463058582, 'comment_body': 'Updated commit to only have `content` as optional since no-change edits are supposed to be fixed at the server side. So, assert statement removed.', 'comment_created': datetime.datetime(2020, 7, 30, 14, 56, 36, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 470894891, 'comment_body': 'Is there a reason for this renaming of topic -> subject? We should be migrating in the opposite direction, unless there is some reason in the API that we are still constrained to use `subject`.\r\n\r\nThis makes up what seems like a lot of changes around the core (original?) ones in this commit.', 'comment_created': datetime.datetime(2020, 8, 14, 22, 45, 38, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 470935265, 'comment_body': ""Minor: let's keep this with the other stream cases, preferably next to the case with similar initial conditions?"", 'comment_created': datetime.datetime(2020, 8, 15, 4, 15, 36, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 470936143, 'comment_body': 'Is this the only added line? Everything below looks indented and reformatted; maybe this would be cleaner with a return here instead, as the nesting has become very deep.', 'comment_created': datetime.datetime(2020, 8, 15, 4, 27, 10, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 470936425, 'comment_body': ""While it's in this test, it's worth noting in the commit text that the commit now allows topic editing only for cases where realm editing is enabled."", 'comment_created': datetime.datetime(2020, 8, 15, 4, 31, 13, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 470936559, 'comment_body': 'With the 3 valid values for this, we could use a `Union` of `Literal` values?', 'comment_created': datetime.datetime(2020, 8, 15, 4, 33, 8, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 470936808, 'comment_body': 'Why is this `change_all` when it was previously `change_one`?\r\n\r\nTypos of propagate in commit text?', 'comment_created': datetime.datetime(2020, 8, 15, 4, 36, 13, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 470953384, 'comment_body': 'Added', 'comment_created': datetime.datetime(2020, 8, 15, 8, 18, 16, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 470953406, 'comment_body': 'Added', 'comment_created': datetime.datetime(2020, 8, 15, 8, 18, 35, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 470953540, 'comment_body': ""I wasn't aware the server accepted `topic`. \r\n\r\nChanged to `topic` in `update_stream_message` and mentioned it in commit"", 'comment_created': datetime.datetime(2020, 8, 15, 8, 20, 11, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 470953562, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2020, 8, 15, 8, 20, 18, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 470953580, 'comment_body': 'Good idea; fixed', 'comment_created': datetime.datetime(2020, 8, 15, 8, 20, 31, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 470953602, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2020, 8, 15, 8, 20, 45, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}]","[{'commit_sha': '578ab63346736576da65692aee6bd6834cac64d1', 'committer_username': 'kaustubh-nair', 'committer_name': 'Kaustubh Nair', 'committer_email': 'kaustubh.nair108@gmail.com', 'commit_date': datetime.datetime(2017, 7, 15, 13, 2, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f09ab912c9edf87b10d24c8796576fad012c7f5a', 'committer_username': 'kaustubh-nair', 'committer_name': 'Kaustubh Nair', 'committer_email': 'kaustubh.nair108@gmail.com', 'commit_date': datetime.datetime(2017, 7, 15, 13, 2, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83f542b0e5db4cde73a2870f5abe75a1904ff80e', 'committer_username': 'kaustubh-nair', 'committer_name': 'Kaustubh Nair', 'committer_email': 'kaustubh.nair108@gmail.com', 'commit_date': datetime.datetime(2017, 7, 15, 13, 2, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d1ff0625fa4271f2544dfa7aadf0d9c9c1baae5', 'committer_username': 'kaustubh-nair', 'committer_name': 'Kaustubh Nair', 'committer_email': 'kaustubh.nair108@gmail.com', 'commit_date': datetime.datetime(2017, 7, 15, 13, 2, 30, tzinfo=datetime.timezone.utc)}]",Kaustubh Nair,30197132,kaustubh.nair108@gmail.com,User,,48,,71,79
460495992,model/boxes: Allow users to post stream messages without a topic.,"This follows the convention used by other Zulip clients to
automatically post a message without a topic, or a topic with only
whitespaces, to a topic named '(no topic)'.

Tests amended.

Fixes #754.",False,757,https://api.github.com/repos/zulip/zulip-terminal/pulls/757,https://github.com/zulip/zulip-terminal/pull/757,closed,57,10,2,2,4,2,2,0,"[{'name': 'enhancement'}, {'name': 'size: L'}]",2020-07-31 20:40:15+00:00,2020-08-09 03:32:13+00:00,715918.0,"8 days, 6:51:58","[{'comment_id': 466075858, 'comment_body': ""Re first commit: it would be useful to describe more of the reason for the refactor in the title and/or summary. That's made clearer in the second commit but just reading this commit it's less clear."", 'comment_created': datetime.datetime(2020, 8, 6, 0, 25, 54, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 466077490, 'comment_body': 'Perhaps we should use `re.fullmatch` here to simplify?', 'comment_created': datetime.datetime(2020, 8, 6, 0, 31, 23, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}]","[{'commit_sha': '215e82bf365dce4a4a73cba60c6b197ff6616b5c', 'committer_username': 'kaustubh-nair', 'committer_name': 'Kaustubh Nair', 'committer_email': 'kaustubh.nair108@gmail.com', 'commit_date': datetime.datetime(2017, 7, 15, 13, 2, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '123aabbc15f1ff710e17918dd8e34e1e60547f4f', 'committer_username': 'kaustubh-nair', 'committer_name': 'Kaustubh Nair', 'committer_email': 'kaustubh.nair108@gmail.com', 'commit_date': datetime.datetime(2017, 7, 15, 13, 2, 30, tzinfo=datetime.timezone.utc)}]",Kaustubh Nair,30197132,kaustubh.nair108@gmail.com,User,,48,,71,79
472010394,Refresh topic list view on update message events,,False,785,https://api.github.com/repos/zulip/zulip-terminal/pulls/785,https://github.com/zulip/zulip-terminal/pull/785,closed,88,15,2,1,4,5,6,0,"[{'name': 'bug'}, {'name': 'high priority'}, {'name': 'has conflicts'}, {'name': 'size: XL'}, {'name': 'feedback wanted'}, {'name': 'PR needs review'}]",2020-08-22 16:55:18+00:00,2020-11-22 19:01:57+00:00,7956399.0,"92 days, 2:06:39","[{'comment_id': 478784185, 'comment_body': 'This appears to be the only current place where this code occurs, and while I know this is a refactoring aimed purely at the following commit, it would be useful to combine the extraction/encapsulation of this method with related ones. That could be anywhere we update the `contents`, which is anywhere near `is_in_topic_view` (which we could move to a renamed property, perhaps)', 'comment_created': datetime.datetime(2020, 8, 28, 1, 40, 1, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 478785463, 'comment_body': ""While this seems reasonable as a v0, don't these events allow us to reorder what we already have instead?"", 'comment_created': datetime.datetime(2020, 8, 28, 1, 45, 5, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 479670903, 'comment_body': ""@neiljp No, as I mentioned on czo, due to the topic data in the index never being complete, there is no way of knowing when a topic is empty (i.e doesn't have any messages left).\r\n\r\nIt would be useful if the backend response could include an extra flag when this happens, though it's not present currently AFAIK."", 'comment_created': datetime.datetime(2020, 8, 29, 17, 23, 9, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 479687132, 'comment_body': ""Let's discuss on #zulip-terminal."", 'comment_created': datetime.datetime(2020, 8, 29, 20, 27, 48, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 487178380, 'comment_body': ""I've done this by making two methods, one each for updating topics view and stream view, and making minor tweaks in `update_stream_view` (previously `update_structure`). I hope this covers everything."", 'comment_created': datetime.datetime(2020, 9, 11, 17, 10, 40, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}]","[{'commit_sha': '1cbaef1830b16992832115a41e6d00a92e684847', 'committer_username': 'kaustubh-nair', 'committer_name': 'Kaustubh Nair', 'committer_email': 'kaustubh.nair108@gmail.com', 'commit_date': datetime.datetime(2017, 7, 15, 13, 2, 30, tzinfo=datetime.timezone.utc)}]",Kaustubh Nair,30197132,kaustubh.nair108@gmail.com,User,,48,,71,79
436754366,Toggle stream settings,"This PR adds checkboxes to `StreamInfoView` for toggling muted and pinned settings for streams.

There are two parts to this PR and a bunch of minor refactors:
**1. Add support for muting** - We already handle mute events, so all we have to do here is add a checkbox that will toggle mute status.
**2. Add support for pinning** - First support for pinning events are added, then a checkbox is added to `StreamInfoView`.
",True,695,https://api.github.com/repos/zulip/zulip-terminal/pulls/695,https://github.com/zulip/zulip-terminal/pull/695,closed,248,48,8,7,4,64,1,0,[{'name': 'size: XL'}],2020-06-18 20:46:19+00:00,2020-07-27 06:06:52+00:00,3316833.0,"38 days, 9:20:33","[{'comment_id': 443004509, 'comment_body': ""I know this is the label used in the webapp, but it does read a bit strangely to me for some reason. Consistency with the webapp may be important, but this seems like an 'action' rather than a status. Maybe something to think about for a v2, or discuss with frontend.\r\n\r\nOne idea would be 'muted', which leaves out 'Stream', but perhaps we want a 'Title' above the checkboxes in any case, ie. something like 'Stream settings'?"", 'comment_created': datetime.datetime(2020, 6, 19, 19, 11, 51, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 443005323, 'comment_body': ""I'm not sure how you plan to develop this further, but it may be useful to simply extract the label text used later and place a `len` expression in here, so the code will express what is happening rather than needing another comment."", 'comment_created': datetime.datetime(2020, 6, 19, 19, 14, 4, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 443007448, 'comment_body': ""I like this, though this may be something we want to standardize on throughout rather than hard-coding. You might like to include that change in a commit with things like extracting the stream 'triangle' and a few other things we've discussed? Maybe in a file in `config`?"", 'comment_created': datetime.datetime(2020, 6, 19, 19, 19, 56, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 443008154, 'comment_body': 'Do we need this `self`?', 'comment_created': datetime.datetime(2020, 6, 19, 19, 21, 53, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 443009316, 'comment_body': ""Possibly for a separate refactor later (or before this), we could consider just passing in the `stream_id`, since we're already calling into the `model` to activate the muting, so could call in to fetch whatever details are required. We don't actually use the color right now."", 'comment_created': datetime.datetime(2020, 6, 19, 19, 25, 10, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 443010005, 'comment_body': ""`new_state` is unused; did this code come from somewhere else? Should we name it accordingly or elide it, if it's unused?"", 'comment_created': datetime.datetime(2020, 6, 19, 19, 27, 1, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 443011578, 'comment_body': 'Blank lines around this line, ideally.', 'comment_created': datetime.datetime(2020, 6, 19, 19, 31, 18, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 443237090, 'comment_body': 'Yes, a status message would be more appropriate in case of a checkbox.', 'comment_created': datetime.datetime(2020, 6, 21, 16, 48, 18, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 443241342, 'comment_body': ""It's urwids default function signature for callback functions"", 'comment_created': datetime.datetime(2020, 6, 21, 17, 45, 9, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 443241663, 'comment_body': ""Hmm, I still need a comment to explain why I'm adding 4"", 'comment_created': datetime.datetime(2020, 6, 21, 17, 49, 47, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 443241912, 'comment_body': 'I need it while testing', 'comment_created': datetime.datetime(2020, 6, 21, 17, 53, 19, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 443249489, 'comment_body': ""Added stream header indicator for now, I'll make a new issue for moving the rest of them"", 'comment_created': datetime.datetime(2020, 6, 21, 19, 28, 8, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 443708748, 'comment_body': ""I didn't use `model.is_muted_stream()` because I can't figure out a way to mock it during testing, without rewriting the whole test."", 'comment_created': datetime.datetime(2020, 6, 22, 17, 13, 31, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 443709072, 'comment_body': ""I'm not sure why this works, but `mocker.patch('controller', 'model.is_muted', return_value=False)` doesn't."", 'comment_created': datetime.datetime(2020, 6, 22, 17, 14, 9, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 444310266, 'comment_body': 'We may want to use names that are more descriptive so that it is easier for our end-users to depict what modifies which UI element.\r\n\r\nSee also [#zulip-terminal > Unicode characters](https://chat.zulip.org/#narrow/stream/206-zulip-terminal/topic/Unicode.20characters/near/862659).', 'comment_created': datetime.datetime(2020, 6, 23, 15, 24, 26, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 444319460, 'comment_body': '@kaustubh-nair Which 4?', 'comment_created': datetime.datetime(2020, 6, 23, 15, 37, 26, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 444352283, 'comment_body': ""Ah, sorry this is outdated\r\nThis is what I'm referring to\r\n```python3\r\n        # Add 4 to stream settings label for accomodating checkbox.\r\n        width = max(len(desc) + 2, len(title) + 4,\r\n                    len(muted_setting.label) + 4)\r\n```"", 'comment_created': datetime.datetime(2020, 6, 23, 16, 26, 11, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 444353348, 'comment_body': '@preetmishra We could do that but I thought it would be better to stick to standard names from wikipedia?\r\nThe problem with names related to UI elements is that the same characters may be reused in a lot of places, for e.g. lineboxes.', 'comment_created': datetime.datetime(2020, 6, 23, 16, 27, 51, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 444593250, 'comment_body': ""@kaustubh-nair There are quite a few cases not included in commit - I thought you were going to put this into a separate PR/issue?\r\n\r\nI agree with @preetmishra that we probably want semantic names rather than direct ones, ie. here the equivalent of 'stream-topic-separator' rather than the currently-used version. That would mean we could change in one place and all the code+tests should update, and ZT run with different characters."", 'comment_created': datetime.datetime(2020, 6, 24, 1, 25, 26, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 444597085, 'comment_body': ""If this works, that's fine for now. Mocks can be mysterious ;)"", 'comment_created': datetime.datetime(2020, 6, 24, 1, 41, 4, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 444598904, 'comment_body': 'Is this necessary?', 'comment_created': datetime.datetime(2020, 6, 24, 1, 47, 39, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 444599250, 'comment_body': ""These both use the same common prefix, so let's introduce a variable for all that common prefix to improve the readability."", 'comment_created': datetime.datetime(2020, 6, 24, 1, 49, 10, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 444600678, 'comment_body': 'Same for self.stream_id? (re for debugging? If so, maybe keep a do-not-merge commit holding those changes separate?)', 'comment_created': datetime.datetime(2020, 6, 24, 1, 54, 39, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 444601617, 'comment_body': 'Ah, I see you add more during this PR; I had expected the others we already have first, though.', 'comment_created': datetime.datetime(2020, 6, 24, 1, 58, 18, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 444604678, 'comment_body': 'If these two values vary, is this really a bugfix rather than refactor?', 'comment_created': datetime.datetime(2020, 6, 24, 2, 10, 25, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 444605060, 'comment_body': 'As per another comment, is this a bugfix for muted streams?', 'comment_created': datetime.datetime(2020, 6, 24, 2, 11, 41, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 444605745, 'comment_body': ""Did the model changes expose something different here?\r\n\r\nLooking at the unread counts handling being here, I'd love to move that into a model method to mark a stream/topic muted; it's rather hacky being in UI code."", 'comment_created': datetime.datetime(2020, 6, 24, 2, 14, 9, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 444807816, 'comment_body': 'There are a lot of unicode characters in lineboxes so it will be a little time-consuming, hence a new PR would be better.\r\n\r\n', 'comment_created': datetime.datetime(2020, 6, 24, 10, 48, 6, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 444808643, 'comment_body': '@neiljp How would you specify semantic names for lines in lineboxes that uses a different style in each corner?\r\nAlso the same lines are used as pane seperators, hence I thought a general name would be better.', 'comment_created': datetime.datetime(2020, 6, 24, 10, 49, 55, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 444810679, 'comment_body': 'To clarify, I meant while writing the tests.\r\nI need a way to obtain the checkbox object while testing it\r\n\r\nRefer to tests above in the same commit\r\n```python3\r\nmute_checkbox = self.stream_info_view.stream_info_content[4]\r\n```', 'comment_created': datetime.datetime(2020, 6, 24, 10, 54, 4, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 444814173, 'comment_body': ""This is testing `classify_unread_counts`, which as per old behavior, did not update `all_msgs` for muted streams. This was done instead in the UI while generating stream buttons. \r\nThis commit moved that part into `classify_unread_counts`, hence there's a change in the values returned.\r\nThe overall external behavior did not change, so I'm not sure if it's correct to call it a bugfix"", 'comment_created': datetime.datetime(2020, 6, 24, 11, 1, 3, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 444814558, 'comment_body': 'Yeah, that seems like a useful refactor too.', 'comment_created': datetime.datetime(2020, 6, 24, 11, 1, 50, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 444902944, 'comment_body': 'The +4 is `len([UNICODE]SPACE)`.\r\n\r\nAlso, there is a typo in the comment.', 'comment_created': datetime.datetime(2020, 6, 24, 13, 43, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 446197964, 'comment_body': 'Used in the callback, moved to next commit.', 'comment_created': datetime.datetime(2020, 6, 26, 13, 53, 15, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 448065968, 'comment_body': ""If parametrizing with one value, it's clearer to put it as the default parameter in the test function signature."", 'comment_created': datetime.datetime(2020, 7, 1, 1, 27, 48, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 448072683, 'comment_body': 'Add blank lines around? :)', 'comment_created': datetime.datetime(2020, 7, 1, 1, 55, 16, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 448072814, 'comment_body': ""You're not noting the multiple areas that are affected in commit titles - it can be a little work to update that, but it makes it more obvious when multiple files are updated and even hint whether changes might be split into multiple commits."", 'comment_created': datetime.datetime(2020, 7, 1, 1, 55, 40, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 448073622, 'comment_body': ""As elsewhere, if there is just one value, it's more obvious when it's just default values in the test function list, though this could also be unpacked in the function - it'd also avoid the need to deepcopy?\r\n\r\nminor: these might also be clearer with `initial_` prefixes."", 'comment_created': datetime.datetime(2020, 7, 1, 1, 59, 8, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 448079160, 'comment_body': ""It would be useful to have this as common code with the initial sorting? To ensure we don't have any differences given the duplication. "", 'comment_created': datetime.datetime(2020, 7, 1, 2, 21, 19, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 448086397, 'comment_body': ""I'd prefer to avoid this, particularly outside the `Model`; maybe just a nested function? In closer context I'm not sure we'd need the detailed docstring, of course.\r\n\r\nIn a broader sense, this suggests - along with the is-pinned method - that we could consider a different data structure here? I haven't examined every use though. This could be a later change."", 'comment_created': datetime.datetime(2020, 7, 1, 2, 51, 1, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 448089207, 'comment_body': ""Isn't it going to be bad if we return an empty list, too?"", 'comment_created': datetime.datetime(2020, 7, 1, 3, 3, 56, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 451024484, 'comment_body': ""This differs from Preet's commit slightly; it would be good to indicate something like 'Adjusted by *Kaustubh* to retain custom popup width for now because...'\r\n\r\nAlso, the commit title indicates 'core' is affected, when it's not."", 'comment_created': datetime.datetime(2020, 7, 7, 17, 21, 58, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 451027183, 'comment_body': ""Do you still intend to break out the unicode characters into a separate PR?\r\n\r\nWe can discuss whether we want to isolate line-box specializations; for isolating the characters I would suggest focusing on the others first, though we can certainly discuss those first too, or brainstorm a list (in that topic above?).\r\n\r\nWhile unicode does describe what these are, I'd propose something more specific if we can (all my review is unicode!), though my first thought of 'symbols' isn't necessarily much better."", 'comment_created': datetime.datetime(2020, 7, 7, 17, 26, 31, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 452573009, 'comment_body': ""It's not just `views.py` that you've edited here; it'd be good to see that in the commit area."", 'comment_created': datetime.datetime(2020, 7, 10, 1, 21, 22, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 452574685, 'comment_body': 'Again, this is a refactor which involves `buttons` too.', 'comment_created': datetime.datetime(2020, 7, 10, 1, 27, 59, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 452576724, 'comment_body': 'Is this connected/relevant? Do you use an auto-formatter?', 'comment_created': datetime.datetime(2020, 7, 10, 1, 36, 26, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 452581195, 'comment_body': ""This doesn't depend upon whether the left panel is showing the topics, so forcibly switches out of topic view. I tested this by having two ZT sessions side by side."", 'comment_created': datetime.datetime(2020, 7, 10, 1, 55, 50, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 452610828, 'comment_body': 'Ah, my bad. I am fixing that (area in the commit title) in my WIP PR.', 'comment_created': datetime.datetime(2020, 7, 10, 4, 4, 27, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 454612326, 'comment_body': 'I intend to remove this commit, opened #717 ', 'comment_created': datetime.datetime(2020, 7, 14, 20, 5, 51, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 456346344, 'comment_body': 'Unrelated, so opened #722', 'comment_created': datetime.datetime(2020, 7, 17, 10, 0, 59, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 456355356, 'comment_body': 'When I add all of them, I usually exceed the line limit so I just add the file with the major changes.', 'comment_created': datetime.datetime(2020, 7, 17, 10, 19, 55, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 456788818, 'comment_body': ""@kaustubh-nair Note that the +2 is extra width which we had was for the center alignment. We might want to remove it as we're not using the alignment with `Text`."", 'comment_created': datetime.datetime(2020, 7, 18, 13, 10, 55, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 456789654, 'comment_body': ""Could we accept the `popup_width` from here and compare other widths with it later in the subsequent commits? That would avoid the calculation that you're doing in https://github.com/zulip/zulip-terminal/pull/695/commits/89e53d41bc190524e256aeac06fffed1446a4842#diff-5b93264509b3ec67b9370b2bcbaa7798R1002."", 'comment_created': datetime.datetime(2020, 7, 18, 13, 21, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 456789818, 'comment_body': '(See also https://github.com/zulip/zulip-terminal/pull/695#discussion_r456789654.)', 'comment_created': datetime.datetime(2020, 7, 18, 13, 23, 2, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 456808041, 'comment_body': 'Yeah, that sounds like a good idea, updated :+1: ', 'comment_created': datetime.datetime(2020, 7, 18, 16, 59, 26, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 460372164, 'comment_body': ""Note that you can save a few characters with `file/file/file:` vs `file: file: file:`, which we should note in a 'commit style' guide somewhere (and/or update gitlint rules) as we seem to have settled on something like that now."", 'comment_created': datetime.datetime(2020, 7, 25, 6, 25, 28, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 460372501, 'comment_body': ""This resolves the situation of it being in topic view when it's updated, but the view doesn't update when you toggle back into stream view."", 'comment_created': datetime.datetime(2020, 7, 25, 6, 29, 50, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 460423176, 'comment_body': ""If this is not used anywhere other than model, let's place it in `model.py` somewhere?"", 'comment_created': datetime.datetime(2020, 7, 25, 16, 56, 10, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 460423497, 'comment_body': 'These sizes are quite different - thoughts on which one we should really use?', 'comment_created': datetime.datetime(2020, 7, 25, 17, 0, 7, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 460549822, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2020, 7, 26, 16, 58, 34, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 460550104, 'comment_body': ""I hope it is okay to put it here because I can't make it a class method. I don't see a reason to make this a static method, so this was the only choice.\r\nAlso, I don't think I understand why `_stream_info_from_subscriptions()` is a static method? Why would you need static methods at all when there is only one `Model` instance?"", 'comment_created': datetime.datetime(2020, 7, 26, 17, 1, 38, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 460551538, 'comment_body': 'Yes, these should be the same - checkbox is a box widget here. Updated.', 'comment_created': datetime.datetime(2020, 7, 26, 17, 15, 56, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 460605237, 'comment_body': 'Could we retain focus on that stream too?', 'comment_created': datetime.datetime(2020, 7, 27, 1, 37, 25, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 460660251, 'comment_body': ""This is fine here for now. I'm expecting there may be more refactoring of stream data in the near future, so just having it local to the model is sufficient.\r\n\r\nA static method is just in a different namespace. I think the only difference we could make would be to have it with a leading underscore, but we're not really consistent otherwise right now.\r\n\r\nI think `_stream_info_from_subscriptions` might be inlined in future. The advantage is that the individual functions can be tested, and static methods are guaranteed not to modify any data in an object, except potentially that passed in - which can be caught with a type checker, ideally."", 'comment_created': datetime.datetime(2020, 7, 27, 5, 51, 8, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}]","[{'commit_sha': '788762feb9b5ac0e02c281ea2fee75bbb31d385f', 'committer_username': 'preetmishra', 'committer_name': 'Preet Mishra', 'committer_email': 'ipreetmishra@gmail.com', 'commit_date': datetime.datetime(2018, 9, 26, 17, 5, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be92d52cb102abdb591d56f3fe25cdee30e93d78', 'committer_username': 'kaustubh-nair', 'committer_name': 'Kaustubh Nair', 'committer_email': 'kaustubh.nair108@gmail.com', 'commit_date': datetime.datetime(2017, 7, 15, 13, 2, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f2f183a7a3d3cd0e082dc25911d194a47b64e2c', 'committer_username': 'kaustubh-nair', 'committer_name': 'Kaustubh Nair', 'committer_email': 'kaustubh.nair108@gmail.com', 'commit_date': datetime.datetime(2017, 7, 15, 13, 2, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '740a2e477bfb0f8b906b5b310282e8f699af82be', 'committer_username': 'kaustubh-nair', 'committer_name': 'Kaustubh Nair', 'committer_email': 'kaustubh.nair108@gmail.com', 'commit_date': datetime.datetime(2017, 7, 15, 13, 2, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '344769e095e0aee3ba8e57f6956238d4b6aa6dd0', 'committer_username': 'kaustubh-nair', 'committer_name': 'Kaustubh Nair', 'committer_email': 'kaustubh.nair108@gmail.com', 'commit_date': datetime.datetime(2017, 7, 15, 13, 2, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34ddadae3a1a288189e479252bb3c92b714a9247', 'committer_username': 'kaustubh-nair', 'committer_name': 'Kaustubh Nair', 'committer_email': 'kaustubh.nair108@gmail.com', 'commit_date': datetime.datetime(2017, 7, 15, 13, 2, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '32a2a21e8cc4fbf0227a9740e1d82c1259c1c6ab', 'committer_username': 'kaustubh-nair', 'committer_name': 'Kaustubh Nair', 'committer_email': 'kaustubh.nair108@gmail.com', 'commit_date': datetime.datetime(2017, 7, 15, 13, 2, 30, tzinfo=datetime.timezone.utc)}]",Kaustubh Nair,30197132,kaustubh.nair108@gmail.com,User,,48,,71,79
437049965,Fix unmuting unread counts bug,,False,697,https://api.github.com/repos/zulip/zulip-terminal/pulls/697,https://github.com/zulip/zulip-terminal/pull/697,closed,46,19,1,3,2,5,3,0,"[{'name': 'bug'}, {'name': 'size: L'}, {'name': 'PR needs review'}]",2020-06-19 11:30:51+00:00,2020-06-30 23:39:38+00:00,994127.0,"11 days, 12:08:47","[{'comment_id': 444588246, 'comment_body': ""In the previous refactoring we missed the point that this now occurs 'later' - in another method! So it would be useful to improve the comment here."", 'comment_created': datetime.datetime(2020, 6, 24, 1, 5, 15, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 444589065, 'comment_body': ""Perhaps it would be clearer here to also put the `key`s inline, so we don't then need the key variables, including the extra variable you add in the second commit."", 'comment_created': datetime.datetime(2020, 6, 24, 1, 8, 36, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 444589274, 'comment_body': 'This may be typed using `TypeVar`s?', 'comment_created': datetime.datetime(2020, 6, 24, 1, 9, 21, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 447428793, 'comment_body': 'As I mentioned via PM, this would be a good change to make separately. If you know which parameters require the `total=False` then we can also note that, as with python 3.6 we should be able to inherit `TypedDict`s, and remove the need for every parameter to be non-total. This could also be used effectively for API versioning.', 'comment_created': datetime.datetime(2020, 6, 30, 6, 0, 35, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 447429173, 'comment_body': 'Good catch of the `mypy` bug! It would be useful to put a comment here referring to why it is necessary to use the `lambda`, referring to eg. the `mypy` issue.', 'comment_created': datetime.datetime(2020, 6, 30, 6, 1, 40, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}]","[{'commit_sha': '9347530c3d87328ecad58b992218bff42c8d9e92', 'committer_username': 'kaustubh-nair', 'committer_name': 'Kaustubh Nair', 'committer_email': 'kaustubh.nair108@gmail.com', 'commit_date': datetime.datetime(2017, 7, 15, 13, 2, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a07d1179a48f1f23b16448de9d260fef4549a98', 'committer_username': 'kaustubh-nair', 'committer_name': 'Kaustubh Nair', 'committer_email': 'kaustubh.nair108@gmail.com', 'commit_date': datetime.datetime(2017, 7, 15, 13, 2, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '537f36ee69b72caecb0b0f7dea500c9ee8450c3a', 'committer_username': 'kaustubh-nair', 'committer_name': 'Kaustubh Nair', 'committer_email': 'kaustubh.nair108@gmail.com', 'commit_date': datetime.datetime(2017, 7, 15, 13, 2, 30, tzinfo=datetime.timezone.utc)}]",Kaustubh Nair,30197132,kaustubh.nair108@gmail.com,User,,48,,71,79
456483318,Check validity of recipients on manual modification,"Users can manually alter the recipients/stream name, but there is
currently to check in place to ensure validity of these modifications.
This commit checks the recipients everytime the user presses TAB on the
boxes (stream name and recipients for private messages).",True,738,https://api.github.com/repos/zulip/zulip-terminal/pulls/738,https://github.com/zulip/zulip-terminal/pull/738,closed,37,6,2,2,3,12,1,0,[{'name': 'size: M'}],2020-07-24 20:46:10+00:00,2020-08-01 18:58:31+00:00,684741.0,"7 days, 22:12:21","[{'comment_id': 461995324, 'comment_body': 'Typo: I think the commit description should be \r\n\r\n> currently **no** check in place', 'comment_created': datetime.datetime(2020, 7, 29, 2, 8, 6, tzinfo=datetime.timezone.utc), 'commenter': 'sumanthvrao', 'type': 'User'}, {'comment_id': 461997265, 'comment_body': ""This seems potentially costly. Unless I'm mistaken, we already have this data in `self.user_dict[email]` through subscription."", 'comment_created': datetime.datetime(2020, 7, 29, 2, 15, 4, tzinfo=datetime.timezone.utc), 'commenter': 'sumanthvrao', 'type': 'User'}, {'comment_id': 462326195, 'comment_body': 'Good point :+1:', 'comment_created': datetime.datetime(2020, 7, 29, 14, 7, 24, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 463759704, 'comment_body': 'No space before bracket currently.', 'comment_created': datetime.datetime(2020, 7, 31, 18, 15, 2, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 463769212, 'comment_body': ""This works for some cases, but assumes precise separation in this way - eg it fails for 'email1 , email2', which is unexpected (and the feedback isn't clear?)\r\n\r\nThat said, we don't currently really validate what gets passed to the API calls, and could likely use ids instead of emails in future based on a general migration to use ids there in the server."", 'comment_created': datetime.datetime(2020, 7, 31, 18, 36, 16, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 463776424, 'comment_body': ""It seems reasonable to inline `invalid_emails_str` (it's only used in the conditional), and perhaps make `footer_text` more descriptive?"", 'comment_created': datetime.datetime(2020, 7, 31, 18, 53, 6, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 463807886, 'comment_body': '@neiljp  I can fix the issue with the spaces, but what is the expected feedback?', 'comment_created': datetime.datetime(2020, 7, 31, 20, 2, 49, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 463808826, 'comment_body': 'How about ""User(s) not found with email(s) - abc@abc, abc@xyq"" ?', 'comment_created': datetime.datetime(2020, 7, 31, 20, 4, 12, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 463810424, 'comment_body': 'Or just ""Could not find email(s) - abc@abc, abc@asd""?', 'comment_created': datetime.datetime(2020, 7, 31, 20, 6, 23, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 463846675, 'comment_body': ""The current situation is twofold:\r\n* that it complains about 'email1 , email2', where I would expect it to be fine - I should have indicated that both are 'valid' in my thought-experiment/test-case. That is, I'd expect 'email1,email2', 'email1, email2' and 'email1 , email2' to be valid? That said, I'm not sure what the server accepts in terms of whitespace of this kind\r\n* the message produced is also a problem. eg. 'chat2406@chat.zulip.org ' also fails but shows what looks like a valid address in the error message, similar for the cases above without `, ` between emails."", 'comment_created': datetime.datetime(2020, 7, 31, 21, 13, 19, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 463848014, 'comment_body': 'To clarify, I only meant the *name* of `footer_text` could be more descriptive.\r\n\r\nI think the current text itself is fine, though you could add the parentheses to accommodate the single-recipient case.', 'comment_created': datetime.datetime(2020, 7, 31, 21, 15, 14, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 463982180, 'comment_body': ""The server ignores whitespaces completely so it doesn't matter where it is. I fixed the code to follow the same, so this should not be a problem anymore."", 'comment_created': datetime.datetime(2020, 8, 1, 17, 22, 46, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}]","[{'commit_sha': '5254bb93d19780e4805b476a484f5392cfcfe8e9', 'committer_username': 'kaustubh-nair', 'committer_name': 'Kaustubh Nair', 'committer_email': 'kaustubh.nair108@gmail.com', 'commit_date': datetime.datetime(2017, 7, 15, 13, 2, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c308e0df7043f6f29bed54f00ad96fd4a46ddb3', 'committer_username': 'kaustubh-nair', 'committer_name': 'Kaustubh Nair', 'committer_email': 'kaustubh.nair108@gmail.com', 'commit_date': datetime.datetime(2017, 7, 15, 13, 2, 30, tzinfo=datetime.timezone.utc)}]",Kaustubh Nair,30197132,kaustubh.nair108@gmail.com,User,,48,,71,79
450207847,Ignore mouse click if compose box is open.,"Clicking on messages/user names when the compose box is open causes the
current message to be lost. This commits ignores the mouse click to
prevent the typed data to be lost, though better handling can be done
when the drafts feature is implemented.

Also, stored controller as an attribute for UsersView. Tests amended for
this.

Test added for mouse click event.

Fixes #652.",False,720,https://api.github.com/repos/zulip/zulip-terminal/pulls/720,https://github.com/zulip/zulip-terminal/pull/720,closed,50,9,3,1,4,2,4,0,"[{'name': 'bug'}, {'name': 'high priority'}, {'name': 'size: L'}, {'name': 'PR needs review'}]",2020-07-16 13:43:32+00:00,2020-07-19 17:45:38+00:00,273726.0,"3 days, 4:02:06","[{'comment_id': 456097869, 'comment_body': 'This is common to both cases, which suggests this could be in a common `controller.is_composing_message_now()` or similar?', 'comment_created': datetime.datetime(2020, 7, 16, 21, 49, 38, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 456835134, 'comment_body': ""minor: this would be more transparent as `in_editor_mode` or similar?\r\n\r\nConsider using `ids` since eg. `True` isn't that obvious in the test summary. Maybe a local fixture given it's used twice?"", 'comment_created': datetime.datetime(2020, 7, 18, 22, 44, 6, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}]","[{'commit_sha': 'acae7a0c1c8d2d22cfed6a7a4d24a49d22193332', 'committer_username': 'kaustubh-nair', 'committer_name': 'Kaustubh Nair', 'committer_email': 'kaustubh.nair108@gmail.com', 'commit_date': datetime.datetime(2017, 7, 15, 13, 2, 30, tzinfo=datetime.timezone.utc)}]",Kaustubh Nair,30197132,kaustubh.nair108@gmail.com,User,,48,,71,79
444185367,WIP: Add reactions to messages,,False,707,https://api.github.com/repos/zulip/zulip-terminal/pulls/707,https://github.com/zulip/zulip-terminal/pull/707,closed,487,34,7,11,4,0,2,0,"[{'name': 'has conflicts'}, {'name': 'size: XL'}]",2020-07-03 20:29:36+00:00,2021-08-17 05:39:52+00:00,35370616.0,"409 days, 9:10:16",[],"[{'commit_sha': 'a825d8ec96a2106d424d2344398c3de80ca45e2d', 'committer_username': 'kaustubh-nair', 'committer_name': 'Kaustubh Nair', 'committer_email': 'kaustubh.nair108@gmail.com', 'commit_date': datetime.datetime(2017, 7, 15, 13, 2, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5061998229c83966915e0b1f1b6f44585e74f470', 'committer_username': 'kaustubh-nair', 'committer_name': 'Kaustubh Nair', 'committer_email': 'kaustubh.nair108@gmail.com', 'commit_date': datetime.datetime(2017, 7, 15, 13, 2, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '168b3bed388d0374ff968dbe4593c57d4e8815d7', 'committer_username': 'kaustubh-nair', 'committer_name': 'Kaustubh Nair', 'committer_email': 'kaustubh.nair108@gmail.com', 'commit_date': datetime.datetime(2017, 7, 15, 13, 2, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad092e17040fe50d2190361ac351f7731f34f023', 'committer_username': 'kaustubh-nair', 'committer_name': 'Kaustubh Nair', 'committer_email': 'kaustubh.nair108@gmail.com', 'commit_date': datetime.datetime(2017, 7, 15, 13, 2, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dfa56db25511a3286a77d8e2d96d7ec0c653c3d8', 'committer_username': 'kaustubh-nair', 'committer_name': 'Kaustubh Nair', 'committer_email': 'kaustubh.nair108@gmail.com', 'commit_date': datetime.datetime(2017, 7, 15, 13, 2, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f76d9329750f06baf6e27b7e1e18616832e0224', 'committer_username': 'kaustubh-nair', 'committer_name': 'Kaustubh Nair', 'committer_email': 'kaustubh.nair108@gmail.com', 'commit_date': datetime.datetime(2017, 7, 15, 13, 2, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e235ef7faf3424cb40630136b6ce8b71fda3163', 'committer_username': 'kaustubh-nair', 'committer_name': 'Kaustubh Nair', 'committer_email': 'kaustubh.nair108@gmail.com', 'commit_date': datetime.datetime(2017, 7, 15, 13, 2, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b862b3ca0de382919a0679a8532e8c2dc84e5c9b', 'committer_username': 'kaustubh-nair', 'committer_name': 'Kaustubh Nair', 'committer_email': 'kaustubh.nair108@gmail.com', 'commit_date': datetime.datetime(2017, 7, 15, 13, 2, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '566f291a91a37ac26b01a5bd6716b3b592733b87', 'committer_username': 'kaustubh-nair', 'committer_name': 'Kaustubh Nair', 'committer_email': 'kaustubh.nair108@gmail.com', 'commit_date': datetime.datetime(2017, 7, 15, 13, 2, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '82a6f5204bbeac59bb01bdce54d0e9581cdb1a3a', 'committer_username': 'kaustubh-nair', 'committer_name': 'Kaustubh Nair', 'committer_email': 'kaustubh.nair108@gmail.com', 'commit_date': datetime.datetime(2017, 7, 15, 13, 2, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a51268189b8a18c4956164bfde8f3da77adace4c', 'committer_username': 'kaustubh-nair', 'committer_name': 'Kaustubh Nair', 'committer_email': 'kaustubh.nair108@gmail.com', 'commit_date': datetime.datetime(2017, 7, 15, 13, 2, 30, tzinfo=datetime.timezone.utc)}]",Kaustubh Nair,30197132,kaustubh.nair108@gmail.com,User,,48,,71,79
444943115,Emoji data storage improvements and custom emoji support,"The main points of this PR are:
* Currently emoji data only has emoji names. This PR makes the emoji data more complete, by storing other properties like emoji code, and emoji type. They are necessary for sending emoji data while adding reactions to messages. Additionally, a distinction between default and custom emojis would be nice, in case we'd want this data in the future.
* Adds support for custom emojis by fetching them from the server and storing them in the model. Since custom emojis are stored in the model, we might as well store the default ones too - instead of fetching emojis from two different places.
* A bunch of variable/filename renaming commits to facilitate this change.
* Adding zulip_extra_emoji to list of emojis",False,710,https://api.github.com/repos/zulip/zulip-terminal/pulls/710,https://github.com/zulip/zulip-terminal/pull/710,closed,1736,1620,13,7,5,37,3,0,"[{'name': 'size: XL'}, {'name': 'PR blocks other PR'}, {'name': 'PR ready to be merged'}]",2020-07-06 18:47:33+00:00,2020-10-16 17:42:00+00:00,8808867.0,"101 days, 22:54:27","[{'comment_id': 466667653, 'comment_body': 'Use a different quote style to avoid all the escaping here?', 'comment_created': datetime.datetime(2020, 8, 6, 20, 28, 24, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 466668490, 'comment_body': 'Is this newline necessary here? Having them on one line would be clearer - does this make them that long?', 'comment_created': datetime.datetime(2020, 8, 6, 20, 30, 3, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 466684082, 'comment_body': 'These appear to be user ids. If so, we could correlate these to ones we use in other fixtures?\r\n\r\nWe may want to take into account the variation between 2.1 and 3+ here due to https://www.zulipchat.com/api/get-custom-emoji', 'comment_created': datetime.datetime(2020, 8, 6, 21, 1, 32, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 466686924, 'comment_body': ""It's worth noting that this is deactivated in a comment - that's why this doesn't correlate to the `custom_emojis` fixture, presumably."", 'comment_created': datetime.datetime(2020, 8, 6, 21, 7, 29, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 466687854, 'comment_body': 'Typo in your commit summary.', 'comment_created': datetime.datetime(2020, 8, 6, 21, 9, 37, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 466692588, 'comment_body': ""We could `TypedDict` the emoji types? There's even scope for using `Literal` here given the limited set of emoji-types, though we need to understand the realm vs custom vs zulip-extra."", 'comment_created': datetime.datetime(2020, 8, 6, 21, 20, 20, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 466692982, 'comment_body': 'This looks like it would be cleaner as a comprehension?', 'comment_created': datetime.datetime(2020, 8, 6, 21, 21, 14, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 466694486, 'comment_body': ':fearful: ', 'comment_created': datetime.datetime(2020, 8, 6, 21, 24, 33, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 466695721, 'comment_body': 'What are you trying to state by this?', 'comment_created': datetime.datetime(2020, 8, 6, 21, 27, 18, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 466696205, 'comment_body': 'Is this really `active_emoji_data`, given the qualifier on the custom emojis?', 'comment_created': datetime.datetime(2020, 8, 6, 21, 28, 28, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 466698454, 'comment_body': 'Are these all `realm_emoji`? In reactions we have unicode/realm/zulip_extra?', 'comment_created': datetime.datetime(2020, 8, 6, 21, 33, 48, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 466701721, 'comment_body': ""Can we end up with duplicates here? Is that OK? Custom emoji can override unicode ones, I believe, but I'm not sure how we want to handle that situation."", 'comment_created': datetime.datetime(2020, 8, 6, 21, 41, 41, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 467009257, 'comment_body': 'Yeah, the line becomes too long for `mypy`.', 'comment_created': datetime.datetime(2020, 8, 7, 12, 29, 12, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 467011227, 'comment_body': 'Makes sure that `model.emoji_data` contains both `unicode_emoji` and `custom_emoji`', 'comment_created': datetime.datetime(2020, 8, 7, 12, 33, 24, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 467015159, 'comment_body': 'Custom emojis are all `realm_emoji`', 'comment_created': datetime.datetime(2020, 8, 7, 12, 41, 44, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 467017436, 'comment_body': 'The active qualifier is only on custom emoji, but this contains `unicode_emoji` too?', 'comment_created': datetime.datetime(2020, 8, 7, 12, 46, 19, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 467017837, 'comment_body': 'Do we consider `unicode_emojis` active by default?', 'comment_created': datetime.datetime(2020, 8, 7, 12, 47, 9, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 467025516, 'comment_body': ""I didn't consider this. The dictionary has emoji name as keys so it cannot have duplicates.\r\nSince custom emojis are added later, the unicode ones with the same names are quietly removed. This does seem to achieve what we want - the overriding is taken care of automatically - but is it okay to achieve it this way?"", 'comment_created': datetime.datetime(2020, 8, 7, 13, 1, 47, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 467026299, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2020, 8, 7, 13, 3, 26, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 467027809, 'comment_body': ""We're not using this right now, it would be simpler if I just remove the attribute?"", 'comment_created': datetime.datetime(2020, 8, 7, 13, 6, 24, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 467128277, 'comment_body': '`set` logic seems appropriate for this, perhaps?', 'comment_created': datetime.datetime(2020, 8, 7, 15, 58, 17, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 467130052, 'comment_body': ""I'm not sure we can deactivate unicode emoji, though I see what you mean. At least partially I was trying to make the variable name obvious in the sense that if a custom emoji was deactivated subsequent to this point, then we might think to check - in the same way that `stream_dict` doesn't really describe `active_stream_subscriptions`."", 'comment_created': datetime.datetime(2020, 8, 7, 16, 1, 23, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 468093122, 'comment_body': '`response` is not typed so it cannot determine `custom_emojis` automatically.', 'comment_created': datetime.datetime(2020, 8, 10, 18, 21, 24, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 468165264, 'comment_body': 'This rename commit makes various changes, but is fairly easy to read. However, it would be useful to see the changes listed in the commit summary.\r\n\r\n(you also have a typo in the summary)', 'comment_created': datetime.datetime(2020, 8, 10, 20, 24, 35, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 468165606, 'comment_body': 'minor: the file is `emoji_names`, so that would be better in the commit title.', 'comment_created': datetime.datetime(2020, 8, 10, 20, 25, 11, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 468169322, 'comment_body': ""minor: my remaining thought here regarding the 'type' is that this data is *all* unicode_emoji, so we could add the type when we use it from the file - balanced against this being in the exact format we need already, of course! Of course, this file is generated, though it adds ~1500 lines with the identical text on individual lines."", 'comment_created': datetime.datetime(2020, 8, 10, 20, 32, 47, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 468170984, 'comment_body': ""What is `emoji_data`? (you've changed to 'active_' below)"", 'comment_created': datetime.datetime(2020, 8, 10, 20, 36, 5, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 468180634, 'comment_body': ""If you're leaving some data out, I'd consider adding a comment that this isn't the full response format, but is missing parts x or y as of versions A or B (as per api changelog)"", 'comment_created': datetime.datetime(2020, 8, 10, 20, 55, 40, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 468195518, 'comment_body': ""If this handles the 'custom emoji can replace unicode emoji' case, then can we add a test case for it?"", 'comment_created': datetime.datetime(2020, 8, 10, 21, 26, 57, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 472385357, 'comment_body': ""This can't be done inline right?"", 'comment_created': datetime.datetime(2020, 8, 18, 18, 6, 9, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 472492844, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2020, 8, 18, 21, 5, 57, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 472503539, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2020, 8, 18, 21, 28, 18, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 472503588, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2020, 8, 18, 21, 28, 24, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 472503718, 'comment_body': 'Fixed. Missed this between commits', 'comment_created': datetime.datetime(2020, 8, 18, 21, 28, 39, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 472503777, 'comment_body': 'Added.', 'comment_created': datetime.datetime(2020, 8, 18, 21, 28, 47, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 472503824, 'comment_body': 'Added.', 'comment_created': datetime.datetime(2020, 8, 18, 21, 28, 52, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 479607279, 'comment_body': ""You've modified the original, so this seems reasonable :+1:"", 'comment_created': datetime.datetime(2020, 8, 29, 4, 46, 19, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}]","[{'commit_sha': '9402272f38676fc6eb7f09c0e169edbe955c1d28', 'committer_username': 'kaustubh-nair', 'committer_name': 'Kaustubh Nair', 'committer_email': 'kaustubh.nair108@gmail.com', 'commit_date': datetime.datetime(2017, 7, 15, 13, 2, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e6b0e4f5b4d97c5fcf93187567641ec0f9458254', 'committer_username': 'kaustubh-nair', 'committer_name': 'Kaustubh Nair', 'committer_email': 'kaustubh.nair108@gmail.com', 'commit_date': datetime.datetime(2017, 7, 15, 13, 2, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '750da44a498109070c5e6986e5c1262abe8a1cde', 'committer_username': 'kaustubh-nair', 'committer_name': 'Kaustubh Nair', 'committer_email': 'kaustubh.nair108@gmail.com', 'commit_date': datetime.datetime(2017, 7, 15, 13, 2, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1348ff756673f2180dfd1f8236aa4799f2e905a6', 'committer_username': 'kaustubh-nair', 'committer_name': 'Kaustubh Nair', 'committer_email': 'kaustubh.nair108@gmail.com', 'commit_date': datetime.datetime(2017, 7, 15, 13, 2, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '746db1827102a440f2896aea24329b30c2cd7061', 'committer_username': 'kaustubh-nair', 'committer_name': 'Kaustubh Nair', 'committer_email': 'kaustubh.nair108@gmail.com', 'commit_date': datetime.datetime(2017, 7, 15, 13, 2, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee19a8ebc1d628c67aa55aca224ad86ad4cb8631', 'committer_username': 'kaustubh-nair', 'committer_name': 'Kaustubh Nair', 'committer_email': 'kaustubh.nair108@gmail.com', 'commit_date': datetime.datetime(2017, 7, 15, 13, 2, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '644618c33bba3135ef3781ee5a0c716332af3338', 'committer_username': 'kaustubh-nair', 'committer_name': 'Kaustubh Nair', 'committer_email': 'kaustubh.nair108@gmail.com', 'commit_date': datetime.datetime(2017, 7, 15, 13, 2, 30, tzinfo=datetime.timezone.utc)}]",Kaustubh Nair,30197132,kaustubh.nair108@gmail.com,User,,48,,71,79
447393100,model: Notify user if a request fails.,"This commit displays an error message in the footer for server requests
involving user interactions. By this the user can be notified for
different failures like:
* Hitting API rate limits.
* Posting in streams where user doesn't have the required permissions.
* Message sending/editing errors.
* Toggling reaction errors.
* etc.

Error responses from some requests are not displayed, since they are not
triggered directly by a user action. Example of these include event
polling requests, event registration, and updating presence.

Fixes #427.",False,714,https://api.github.com/repos/zulip/zulip-terminal/pulls/714,https://github.com/zulip/zulip-terminal/pull/714,closed,64,10,4,3,6,3,3,0,"[{'name': 'enhancement'}, {'name': 'size: L'}, {'name': 'PR needs review'}]",2020-07-10 11:44:25+00:00,2020-07-30 21:39:50+00:00,1763725.0,"20 days, 9:55:25","[{'comment_id': 453273399, 'comment_body': 'Given the apparent similarity in all this error handling, please use a new method for this.\r\n\r\nPutting this in a function should make testing simple?', 'comment_created': datetime.datetime(2020, 7, 12, 6, 14, 15, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 455106666, 'comment_body': ""Is this to overcome pytest's caching issue or just to reuse the `dict`?"", 'comment_created': datetime.datetime(2020, 7, 15, 14, 43, 24, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 455150990, 'comment_body': 'Just for reuse', 'comment_created': datetime.datetime(2020, 7, 15, 15, 43, 38, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}]","[{'commit_sha': '33c2be35105c7aae24f6c2fbc09273fdf564f09c', 'committer_username': 'kaustubh-nair', 'committer_name': 'Kaustubh Nair', 'committer_email': 'kaustubh.nair108@gmail.com', 'commit_date': datetime.datetime(2017, 7, 15, 13, 2, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3460187a58e4bf295009bccbe782f23a41f37b86', 'committer_username': 'kaustubh-nair', 'committer_name': 'Kaustubh Nair', 'committer_email': 'kaustubh.nair108@gmail.com', 'commit_date': datetime.datetime(2017, 7, 15, 13, 2, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f1e98f5b3117a657c49d6a00e0c89605cf6288e7', 'committer_username': 'kaustubh-nair', 'committer_name': 'Kaustubh Nair', 'committer_email': 'kaustubh.nair108@gmail.com', 'commit_date': datetime.datetime(2017, 7, 15, 13, 2, 30, tzinfo=datetime.timezone.utc)}]",Kaustubh Nair,30197132,kaustubh.nair108@gmail.com,User,,48,,71,79
445474104,Fix message updating bugs due to found_newest,"This PR fixes an update message bug which is caused by two different sources.
1. When a stream is not fully loaded, `Model.found_newest` is set to`False`. Now if a message is received on other streams which are fully loaded, it won't be appended to the view due to `found_newest` state. This is fixed by maintaining found_newest for each narrow.
2. On switching between narrows, `found_newest` is set to `False` in the `Controller`. This obviously prevents appending of new  messagea in the narrow, unless `down` is pressed.

Similar bugs are present (now fixed) for sending messages, since they too use the same `Model._handle_message_event` for adding messages to the view.",True,711,https://api.github.com/repos/zulip/zulip-terminal/pulls/711,https://github.com/zulip/zulip-terminal/pull/711,closed,22,21,3,4,3,19,2,0,"[{'name': 'size: M'}, {'name': 'PR needs review'}]",2020-07-07 15:04:15+00:00,2020-07-15 22:23:06+00:00,717531.0,"8 days, 7:18:51","[{'comment_id': 451162200, 'comment_body': 'I can see the advantage of this change, but this would be better supported with an example for this particular code in the commit text.', 'comment_created': datetime.datetime(2020, 7, 7, 21, 46, 1, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 451164544, 'comment_body': 'Spacing?\r\n\r\nYou did this elsewhere; are you trying to avoid the condition and code block aligning?', 'comment_created': datetime.datetime(2020, 7, 7, 21, 51, 14, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 451170846, 'comment_body': ""I understand this is just an update to existing code, but it would be great if we could treat `found_newest` as an attribute private to the Model; if we could do that refactor first, this commit would also be smaller and cleaner.\r\n\r\nDirectly setting data in another class like this is something I'm always open to removing, as it typically leads to simplification and removes the need to check between classes when updating code - and this is a small repo! "", 'comment_created': datetime.datetime(2020, 7, 7, 22, 6, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 451523710, 'comment_body': 'I forgot the spacing.\r\nCode block aligning?', 'comment_created': datetime.datetime(2020, 7, 8, 12, 57, 53, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 451540687, 'comment_body': ""See how `and` and `if` get aligned if you add the space.\r\n```python3\r\n        if (hasattr(self.controller, 'view')\r\n            and self.found_newest[repr(self.narrow)]):\r\n            if self.msg_list.log:\r\n```\r\nThe alignment triggers a linting error which could be fixed with either:\r\n```python3\r\n        if (hasattr(self.controller, 'view')\r\n                and self.found_newest[repr(self.narrow)]):\r\n            if self.msg_list.log:\r\n```\r\nor:\r\n```python3\r\n        if (\r\n            hasattr(self.controller, 'view')\r\n            and self.found_newest[repr(self.narrow)]\r\n           ):\r\n            if self.msg_list.log:\r\n```"", 'comment_created': datetime.datetime(2020, 7, 8, 13, 24, 7, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 451567065, 'comment_body': ""Ah, I didn't know that thanks :+1:"", 'comment_created': datetime.datetime(2020, 7, 8, 13, 59, 56, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 451633929, 'comment_body': 'Added, is this what you were referring to?', 'comment_created': datetime.datetime(2020, 7, 8, 15, 29, 24, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 451635091, 'comment_body': 'Is this name okay? I think its implicitly understood that found_newest is updated per narrow. Or should I name this `set_found_newest_for_current_narrow()`?', 'comment_created': datetime.datetime(2020, 7, 8, 15, 30, 59, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 451854442, 'comment_body': ""That should be sufficient, though 'kind of guarantees' is not as helpful as it could be, if perhaps just in phrasing."", 'comment_created': datetime.datetime(2020, 7, 8, 22, 13, 46, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 451866049, 'comment_body': ""While I'm replying here to the naming issue, note that the only places in code outside of the `Model` where this is being called (and where the value was previously set), are in the narrowing methods, if we definitely change narrow; can you see that? Given that, I think this can just be a private helper function used by other model methods, or even just set directly, given this is so simple."", 'comment_created': datetime.datetime(2020, 7, 8, 22, 46, 13, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 451871523, 'comment_body': 'Note my other comment about whether we need this function, but it may be worth investigating clarifying these tests, perhaps adding notes why these are set, or changing the test names to be clearer.', 'comment_created': datetime.datetime(2020, 7, 8, 23, 2, 42, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 451882813, 'comment_body': ""When requiring a method to access data, or just hiding it in an object/class, I find it useful to have an underscore prefix. That both gives a visual indication elsewhere if we're touching something we shouldn't be (ie. potentially hacky code), but also in making this kind of transition it's a variable rename, so anything that depended upon `Model.found_newest` would fail with a name error."", 'comment_created': datetime.datetime(2020, 7, 8, 23, 38, 21, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 453318599, 'comment_body': 'Instead of checking its `type`, could we do just an empty dictionary check?\r\n```\r\nassert model._have_last_message == {}\r\n```', 'comment_created': datetime.datetime(2020, 7, 12, 13, 45, 17, tzinfo=datetime.timezone.utc), 'commenter': 'sumanthvrao', 'type': 'User'}, {'comment_id': 453319991, 'comment_body': ""FWIW, moving it to the next line could avoid line length issue and avoid the extra variable.\r\n```\r\nself._have_last_message[narrow_str] = (\r\n                    len(response['messages']) < query_range)\r\n```"", 'comment_created': datetime.datetime(2020, 7, 12, 13, 58, 28, tzinfo=datetime.timezone.utc), 'commenter': 'sumanthvrao', 'type': 'User'}, {'comment_id': 453341227, 'comment_body': ""It's working now but wasn't in a previous version and I forgot why :sweat_smile: \r\nUpdated :+1: "", 'comment_created': datetime.datetime(2020, 7, 12, 17, 15, 4, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 453341261, 'comment_body': 'Yes that would be better :+1: ', 'comment_created': datetime.datetime(2020, 7, 12, 17, 15, 16, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 454739846, 'comment_body': ""This commit claims just to be `model`, but it also affects `core`... however if you switch the order of the next commit and this one, you'll remove the `core` lines first and this commit will be just fine (and smaller)"", 'comment_created': datetime.datetime(2020, 7, 15, 1, 41, 4, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 454740101, 'comment_body': ""See my related comment, but you didn't update the commit title here either - though if you reorder this will become just `core:`"", 'comment_created': datetime.datetime(2020, 7, 15, 1, 42, 4, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 454745373, 'comment_body': ""Maybe add 'go to stream A' to the reproduce instructions in the commit text?"", 'comment_created': datetime.datetime(2020, 7, 15, 2, 1, 20, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}]","[{'commit_sha': '5755f3a8926b5a692263604bdf13521a02f579ae', 'committer_username': 'kaustubh-nair', 'committer_name': 'Kaustubh Nair', 'committer_email': 'kaustubh.nair108@gmail.com', 'commit_date': datetime.datetime(2017, 7, 15, 13, 2, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84f974671a46864175c20406a0fd71d2150343e2', 'committer_username': 'kaustubh-nair', 'committer_name': 'Kaustubh Nair', 'committer_email': 'kaustubh.nair108@gmail.com', 'commit_date': datetime.datetime(2017, 7, 15, 13, 2, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd01ec4392dd49a48645ff1b5e46a7fea969a50e5', 'committer_username': 'kaustubh-nair', 'committer_name': 'Kaustubh Nair', 'committer_email': 'kaustubh.nair108@gmail.com', 'commit_date': datetime.datetime(2017, 7, 15, 13, 2, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '541dc69d321c4f6601fa2e578a60803a9722049f', 'committer_username': 'kaustubh-nair', 'committer_name': 'Kaustubh Nair', 'committer_email': 'kaustubh.nair108@gmail.com', 'commit_date': datetime.datetime(2017, 7, 15, 13, 2, 30, tzinfo=datetime.timezone.utc)}]",Kaustubh Nair,30197132,kaustubh.nair108@gmail.com,User,,48,,71,79
422429935,Improve tests for Model._handle_message_event,This should hopefully be a fix for #642 #574 and #566 ,False,670,https://api.github.com/repos/zulip/zulip-terminal/pulls/670,https://github.com/zulip/zulip-terminal/pull/670,open,68,46,1,6,6,13,4,0,"[{'name': 'further discussion required'}, {'name': 'has conflicts'}, {'name': 'size: XL'}, {'name': 'PR needs review'}]",2020-05-24 15:32:38+00:00,,0.0,,"[{'comment_id': 429658228, 'comment_body': 'If we want this kind of information, we should probably use `message_fixture` in  here?', 'comment_created': datetime.datetime(2020, 5, 24, 17, 32, 17, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 429658698, 'comment_body': ""As per my recent message on #learning, unfortunately while I like the idea of `xfail`, it is non-ideal in that we're not sure which assert is expected to fail, though that's all we have (though will disappear if we squash commits - which we can do here, I think?)\r\n\r\nWe should discuss this as a separate point, but one possibility is that rather than testing the calls to the mocks, we could check for a change in state. That would be testing the change in behavior, not just whether methods are called."", 'comment_created': datetime.datetime(2020, 5, 24, 17, 38, 39, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 429661371, 'comment_body': ""This uses `model`, which has an initial default narrow of 'all messages', so this doesn't replicate the 'in a different narrow' test case we started with. This didn't turn out to be the issue, so I'm not sure if we want to explore behavior over different narrows."", 'comment_created': datetime.datetime(2020, 5, 24, 18, 13, 59, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 429662572, 'comment_body': ""minor: follow this with a newline, and possibly add a comment to this block re updating counts and how the message needs to be in the index to be identified by `set_count`.\r\n\r\nFrom other conversations, I wonder if we might update `set_count` to just accept the message(s) themselves to avoid an index dependence, but that's another discussion. That would avoid the coupling between these two actions (add to index, set count), as the message need not necessarily be in the index."", 'comment_created': datetime.datetime(2020, 5, 24, 18, 27, 38, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 429662747, 'comment_body': 'I understand this is a simple adjustment from the previous commit and so a small diff, but I wonder if this should shrink onto one line now.', 'comment_created': datetime.datetime(2020, 5, 24, 18, 29, 43, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 429662820, 'comment_body': 'For a one-parameter entry, this is just `True`, ie. the parentheses are unnecessary.', 'comment_created': datetime.datetime(2020, 5, 24, 18, 30, 32, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 429664825, 'comment_body': ""Being in a different narrow won't make a difference since it's only `found_newest` which affects behaviour?"", 'comment_created': datetime.datetime(2020, 5, 24, 18, 54, 39, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 429665118, 'comment_body': '@neiljp As in, change in state of unread counts and index?', 'comment_created': datetime.datetime(2020, 5, 24, 18, 58, 33, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 429667338, 'comment_body': 'Renamed the test to `test__handle_message_event_set_count_found_newest`, since we are not directly considering different narrows.\r\n\r\nPS. Now that I look at this, it feels a little too much to write such a big test for such a small change.\r\nWouldn\'t a comment saying ""Update counts irrespective of found_newest"" have been enough?', 'comment_created': datetime.datetime(2020, 5, 24, 19, 29, 23, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 431818973, 'comment_body': 'Doing this because `model_message_event` is a really long variable name.', 'comment_created': datetime.datetime(2020, 5, 28, 13, 5, 36, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}]","[{'commit_sha': 'f01e009ada6219ac02d59a7bee5411ef66eace0b', 'committer_username': 'kaustubh-nair', 'committer_name': 'Kaustubh Nair', 'committer_email': 'kaustubh.nair108@gmail.com', 'commit_date': datetime.datetime(2017, 7, 15, 13, 2, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '35cc26eb7dc5e67fef03f2d0ecaf0a406261982e', 'committer_username': 'kaustubh-nair', 'committer_name': 'Kaustubh Nair', 'committer_email': 'kaustubh.nair108@gmail.com', 'commit_date': datetime.datetime(2017, 7, 15, 13, 2, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ff94e25e0c0e0e0c729e0f3ab79b14c18a7692e', 'committer_username': 'kaustubh-nair', 'committer_name': 'Kaustubh Nair', 'committer_email': 'kaustubh.nair108@gmail.com', 'commit_date': datetime.datetime(2017, 7, 15, 13, 2, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd8b920aa9d850edf421f620a21ea4bdc060f4c2', 'committer_username': 'kaustubh-nair', 'committer_name': 'Kaustubh Nair', 'committer_email': 'kaustubh.nair108@gmail.com', 'commit_date': datetime.datetime(2017, 7, 15, 13, 2, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3e046e5abe6de1064b94ce20342ae6e2f7c904b', 'committer_username': 'kaustubh-nair', 'committer_name': 'Kaustubh Nair', 'committer_email': 'kaustubh.nair108@gmail.com', 'commit_date': datetime.datetime(2017, 7, 15, 13, 2, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6795d239603eab01b7d56927bb8163141766aa65', 'committer_username': 'kaustubh-nair', 'committer_name': 'Kaustubh Nair', 'committer_email': 'kaustubh.nair108@gmail.com', 'commit_date': datetime.datetime(2017, 7, 15, 13, 2, 30, tzinfo=datetime.timezone.utc)}]",Kaustubh Nair,30197132,kaustubh.nair108@gmail.com,User,,48,,71,79
451336233,Multiple footer reset bug fix,"This PR introduces a queue to keep track of the currently active sleep threads, and resets the footer only if the queue is empty.

Fixes #647
(Alternate fix: #748)",False,725,https://api.github.com/repos/zulip/zulip-terminal/pulls/725,https://github.com/zulip/zulip-terminal/pull/725,closed,41,10,2,2,2,9,3,0,"[{'name': 'bug'}, {'name': 'size: L'}, {'name': 'has conflicts'}]",2020-07-17 18:18:53+00:00,2022-03-13 06:08:16+00:00,52141763.0,"603 days, 11:49:23","[{'comment_id': 456731953, 'comment_body': ""Since it is a test, I think ti should start with `test_*`. Added I think pytest won't run this unless it starts with `test__reset_footer_.....`. \r\n\r\nDo you want to remove the two blank lines below (81, 83)? It feels a little odd. And if we can save some space and not decrease readability, we should go for it."", 'comment_created': datetime.datetime(2020, 7, 18, 1, 23, 57, tzinfo=datetime.timezone.utc), 'commenter': 'sumanthvrao', 'type': 'User'}, {'comment_id': 456732365, 'comment_body': 'Same comment as previous, it should begin with `test__.....`', 'comment_created': datetime.datetime(2020, 7, 18, 1, 27, 43, tzinfo=datetime.timezone.utc), 'commenter': 'sumanthvrao', 'type': 'User'}, {'comment_id': 456876315, 'comment_body': ""Oops, good catch - the tests weren't running.\r\n\r\n@neiljp Suggests having blank lines surrounding the method under test :sweat_smile: "", 'comment_created': datetime.datetime(2020, 7, 19, 8, 3, 22, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 456876637, 'comment_body': 'I tried something different here - this is more of an integration test rather than the unit tests we have everywhere.', 'comment_created': datetime.datetime(2020, 7, 19, 8, 6, 50, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 456876815, 'comment_body': '(Also, pytest cannot call methods asynchronously?)', 'comment_created': datetime.datetime(2020, 7, 19, 8, 8, 11, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 456894695, 'comment_body': 'The blank lines clarify the arrange, act and assert segments. Personally, I like having them. :wink:', 'comment_created': datetime.datetime(2020, 7, 19, 11, 6, 32, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 457070413, 'comment_body': ""While this does add extra spacing, this is a style I've been moving towards for the reasons that @preetmishra mentioned.\r\n\r\nThat said, if a test needs zero setup, I might be tempted to avoid the one blank line, but consistency would still be good and we don't currently have many of those - perhaps unfortunately."", 'comment_created': datetime.datetime(2020, 7, 20, 5, 41, 52, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 457073617, 'comment_body': ""There may be a plugin for `pytest` to work with asychronous behavior, but currently we have a simpler solution where our `asynch` decorator knows whether it's in a test environment."", 'comment_created': datetime.datetime(2020, 7, 20, 5, 48, 31, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 457788398, 'comment_body': 'Sure looks like a cleaner style. 👍 ', 'comment_created': datetime.datetime(2020, 7, 21, 1, 50, 59, tzinfo=datetime.timezone.utc), 'commenter': 'sumanthvrao', 'type': 'User'}]","[{'commit_sha': '166cb0c2f56ac0df965ebe25e6e9dd59c7108d0e', 'committer_username': 'kaustubh-nair', 'committer_name': 'Kaustubh Nair', 'committer_email': 'kaustubh.nair108@gmail.com', 'commit_date': datetime.datetime(2017, 7, 15, 13, 2, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '113c49563a608fc309d72e71d079273e1800c551', 'committer_username': 'kaustubh-nair', 'committer_name': 'Kaustubh Nair', 'committer_email': 'kaustubh.nair108@gmail.com', 'commit_date': datetime.datetime(2017, 7, 15, 13, 2, 30, tzinfo=datetime.timezone.utc)}]",Kaustubh Nair,30197132,kaustubh.nair108@gmail.com,User,,48,,71,79
458059544,bugfix: ui: Do not update footer if new text is same as current.,"This prevents rapid footer updates if an error message is triggered
multiple times. An example of this would be a user holding-down/pressing
too often the edit message key on a message that cannot be edited.

This fix does not account for updates that might happen for different
messages, but we can safely assume that the time difference between such
messages would not be too small and such a bug would most likely not
occur.

Test added.

Fixes #647.",True,748,https://api.github.com/repos/zulip/zulip-terminal/pulls/748,https://github.com/zulip/zulip-terminal/pull/748,closed,14,0,2,1,2,0,3,0,"[{'name': 'bug'}, {'name': 'size: S'}, {'name': 'PR ready to be merged'}]",2020-07-28 21:17:02+00:00,2022-03-13 06:21:01+00:00,51181439.0,"592 days, 9:03:59",[],"[{'commit_sha': 'f3d878f3bc1f8d9fc9e5dc62d9d2c1dab65b3f2f', 'committer_username': 'kaustubh-nair', 'committer_name': 'Kaustubh Nair', 'committer_email': 'kaustubh.nair108@gmail.com', 'commit_date': datetime.datetime(2017, 7, 15, 13, 2, 30, tzinfo=datetime.timezone.utc)}]",Kaustubh Nair,30197132,kaustubh.nair108@gmail.com,User,,48,,71,79
420628847,Show loading screen in urwid.,"These commits are not perfectly isolated, because there are a lot of things to be done here:
* Show `LoadingView` first and run `Model` and `View` initialization asynchronously.
* Move settings from `run.py` to `LoadingView`
* Move spinning cursor from `Controller` to `LoadingView`",False,667,https://api.github.com/repos/zulip/zulip-terminal/pulls/667,https://github.com/zulip/zulip-terminal/pull/667,open,93,48,6,4,4,4,3,0,"[{'name': 'has conflicts'}, {'name': 'size: XL'}, {'name': 'PR needs review'}]",2020-05-20 09:33:17+00:00,,0.0,,"[{'comment_id': 469281381, 'comment_body': 'Do we need to capture stdout here again? We already do this now in the previous commit in the `__init__` stage itself.', 'comment_created': datetime.datetime(2020, 8, 12, 14, 0, 13, tzinfo=datetime.timezone.utc), 'commenter': 'sumanthvrao', 'type': 'User'}, {'comment_id': 469287269, 'comment_body': ""Is this something necessary for this commit? Couldn't we move this to the previous commit where you introduce the `set_spinner` class?"", 'comment_created': datetime.datetime(2020, 8, 12, 14, 8, 42, tzinfo=datetime.timezone.utc), 'commenter': 'sumanthvrao', 'type': 'User'}, {'comment_id': 556710631, 'comment_body': 'Is this necessary in this commit?', 'comment_created': datetime.datetime(2021, 1, 13, 17, 41, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}]","[{'commit_sha': '20666f3d421796c9dfa76634e978bb87329a22c5', 'committer_username': 'kaustubh-nair', 'committer_name': 'Kaustubh Nair', 'committer_email': 'kaustubh.nair108@gmail.com', 'commit_date': datetime.datetime(2017, 7, 15, 13, 2, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '589ea84500fb5c75b936c48703887d9e51774fa2', 'committer_username': 'kaustubh-nair', 'committer_name': 'Kaustubh Nair', 'committer_email': 'kaustubh.nair108@gmail.com', 'commit_date': datetime.datetime(2017, 7, 15, 13, 2, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d8009eddb62bb8a001ca114ff3edc3b4b762024', 'committer_username': 'kaustubh-nair', 'committer_name': 'Kaustubh Nair', 'committer_email': 'kaustubh.nair108@gmail.com', 'commit_date': datetime.datetime(2017, 7, 15, 13, 2, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ae1f2adf00193f563c35b00816ddc95b2572997', 'committer_username': 'kaustubh-nair', 'committer_name': 'Kaustubh Nair', 'committer_email': 'kaustubh.nair108@gmail.com', 'commit_date': datetime.datetime(2017, 7, 15, 13, 2, 30, tzinfo=datetime.timezone.utc)}]",Kaustubh Nair,30197132,kaustubh.nair108@gmail.com,User,,48,,71,79
306269895,Show tutorial at start.,"@neiljp if you think this PR is easier to review, then I will push the changes in the other PR. I did a complete change of commits. Let me know your thoughts on this.",False,457,https://api.github.com/repos/zulip/zulip-terminal/pulls/457,https://github.com/zulip/zulip-terminal/pull/457,open,411,119,9,8,5,7,3,0,"[{'name': 'enhancement'}, {'name': 'has conflicts'}, {'name': 'size: XL'}]",2019-08-11 10:03:47+00:00,,0.0,,"[{'comment_id': 314170382, 'comment_body': 'The only attribute used in this method is `self.zuliprc_path`; to keep things organized, this suggests we could keep the zuliprc-handling methods together, perhaps in a different module?', 'comment_created': datetime.datetime(2019, 8, 15, 4, 23, 49, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 314170635, 'comment_body': 'While this is good to keep separate, I would include this with (or just before) the commit that uses `TUTORIAL`.', 'comment_created': datetime.datetime(2019, 8, 15, 4, 25, 54, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 314170895, 'comment_body': ""This version, including in the other PR, now doesn't have the `asynch`, right? Did you agree about the possibility of things happening out of order?"", 'comment_created': datetime.datetime(2019, 8, 15, 4, 28, 7, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 314578099, 'comment_body': 'Okay, I will move it into  helper.py.', 'comment_created': datetime.datetime(2019, 8, 16, 4, 16, 39, tzinfo=datetime.timezone.utc), 'commenter': 'amanagr', 'type': 'User'}, {'comment_id': 314578301, 'comment_body': ""I had removed it in the later commits in the last PR too. I think you mentioned that you didn't review the last PR fully."", 'comment_created': datetime.datetime(2019, 8, 16, 4, 18, 41, tzinfo=datetime.timezone.utc), 'commenter': 'amanagr', 'type': 'User'}, {'comment_id': 394986938, 'comment_body': 'Typo :)', 'comment_created': datetime.datetime(2020, 3, 19, 12, 24, 38, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 395029398, 'comment_body': 'The tutorial file is not final yet. I have a lot of things to add to it. I am thinking of doing it after this PR gets merged. I will correct the typo though :) thanks.', 'comment_created': datetime.datetime(2020, 3, 19, 13, 36, 56, tzinfo=datetime.timezone.utc), 'commenter': 'amanagr', 'type': 'User'}]","[{'commit_sha': '0921efa90e41a75d96471e39ecdb2ae383966170', 'committer_username': 'amanagr', 'committer_name': 'Aman Agrawal', 'committer_email': 'amanagr@zulip.com', 'commit_date': datetime.datetime(2017, 1, 14, 20, 19, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '52ffc5d9dcf1bb91037ab73832a57010ac82f312', 'committer_username': 'amanagr', 'committer_name': 'Aman Agrawal', 'committer_email': 'amanagr@zulip.com', 'commit_date': datetime.datetime(2017, 1, 14, 20, 19, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eabc8510e17e7c826d9c03e275c40884687d1ee8', 'committer_username': 'amanagr', 'committer_name': 'Aman Agrawal', 'committer_email': 'amanagr@zulip.com', 'commit_date': datetime.datetime(2017, 1, 14, 20, 19, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b8527a5313867972cf45bcef82c709e87695d03', 'committer_username': 'amanagr', 'committer_name': 'Aman Agrawal', 'committer_email': 'amanagr@zulip.com', 'commit_date': datetime.datetime(2017, 1, 14, 20, 19, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03a3cb56fcd8d981bf7b42a26ff938af4eb6ce8b', 'committer_username': 'amanagr', 'committer_name': 'Aman Agrawal', 'committer_email': 'amanagr@zulip.com', 'commit_date': datetime.datetime(2017, 1, 14, 20, 19, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f962f375d93dcf6423ab07a7f03117ffeaa5eff', 'committer_username': 'amanagr', 'committer_name': 'Aman Agrawal', 'committer_email': 'amanagr@zulip.com', 'commit_date': datetime.datetime(2017, 1, 14, 20, 19, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f1ef6b7c85905816876c299571b26be2c6405284', 'committer_username': 'amanagr', 'committer_name': 'Aman Agrawal', 'committer_email': 'amanagr@zulip.com', 'commit_date': datetime.datetime(2017, 1, 14, 20, 19, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '116e547f1b920f85c602d15afa971da2b356cd9d', 'committer_username': 'amanagr', 'committer_name': 'Aman Agrawal', 'committer_email': 'amanagr@zulip.com', 'commit_date': datetime.datetime(2017, 1, 14, 20, 19, 42, tzinfo=datetime.timezone.utc)}]",Aman Agrawal,25124304,amanagr@zulip.com,User,,73,,7,92
455085629,refactor: model: Use a TypedDict in pinned/unpinned streams.,"The nested list storing stream properties in model.unpinned_streams and
model.pinned_streams is changed to a TypedDict for better readability.

Tests amended.",False,729,https://api.github.com/repos/zulip/zulip-terminal/pulls/729,https://github.com/zulip/zulip-terminal/pull/729,closed,112,70,9,1,2,12,2,0,"[{'name': 'size: XL'}, {'name': 'PR needs review'}]",2020-07-22 12:25:22+00:00,2020-08-21 16:44:57+00:00,2607575.0,"30 days, 4:19:35","[{'comment_id': 458919167, 'comment_body': 'Possible refactor - we could just save `self.properties` and not have so many variables.', 'comment_created': datetime.datetime(2020, 7, 22, 16, 23, 32, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 458943249, 'comment_body': '\r\nPossible refactor - we could just save self.properties and not have so many variables.\r\n', 'comment_created': datetime.datetime(2020, 7, 22, 16, 58, 8, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 458945073, 'comment_body': ""Something very odd here - I think it could be a mypy bug - I can't use dictionary comprehension or even a for loop to generate this dictionary being passed inside `StreamData`.\r\n\r\nThis causes it to fail\r\n```python3\r\n sorted([StreamData({key: stream[key] for key in stream_keys})\r\n                    for stream in subscriptions if not stream['pin_to_top']],\r\n                   key=lambda s: s['name'].lower()),\r\n```"", 'comment_created': datetime.datetime(2020, 7, 22, 17, 0, 59, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 459118275, 'comment_body': 'The solution you have here is good for now. A comment noting the `stream_id` -> `id` choice would be useful.\r\n\r\nThis is essentially an (extra) `__init__` for `StreamData`, so we might move towards a class or dataclass in future.', 'comment_created': datetime.datetime(2020, 7, 22, 22, 25, 11, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 464006568, 'comment_body': ""Minor: make the layout more consistent, eg. if the last two elements don't fit on a line for some, make that be the case for all of them."", 'comment_created': datetime.datetime(2020, 8, 1, 22, 31, 19, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 464006956, 'comment_body': 'As per the comment, some other code checks for some of these properties and uses them if it exists, so removing them is a problem in that case. Others which are used only occasionally seem fine to extract on-demand, particularly if used only once.', 'comment_created': datetime.datetime(2020, 8, 1, 22, 35, 35, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 470941778, 'comment_body': 'These are changing from the full pinned stream data (abbreviated to just the name - first entry), to just the names (to generate the data in the test)?', 'comment_created': datetime.datetime(2020, 8, 15, 5, 43, 41, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 470942143, 'comment_body': ""I'm not sure if this could be used to fix the test issue, or whether we should test it differently."", 'comment_created': datetime.datetime(2020, 8, 15, 5, 48, 51, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 470942318, 'comment_body': 'A regular list comprehension (not list constructor with generator expression) may simplify this onto one line?', 'comment_created': datetime.datetime(2020, 8, 15, 5, 51, 20, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 474737783, 'comment_body': 'That is correct', 'comment_created': datetime.datetime(2020, 8, 21, 14, 34, 20, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 474739600, 'comment_body': 'Test issue? You mean the mypy problem?', 'comment_created': datetime.datetime(2020, 8, 21, 14, 37, 21, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 474793858, 'comment_body': ""I think this wasn't passing travis?"", 'comment_created': datetime.datetime(2020, 8, 21, 16, 12, 4, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}]","[{'commit_sha': '4b33052a4d06d8e26188905555af4d1eaa66b1b6', 'committer_username': 'kaustubh-nair', 'committer_name': 'Kaustubh Nair', 'committer_email': 'kaustubh.nair108@gmail.com', 'commit_date': datetime.datetime(2017, 7, 15, 13, 2, 30, tzinfo=datetime.timezone.utc)}]",Kaustubh Nair,30197132,kaustubh.nair108@gmail.com,User,,48,,71,79
456663409,Move unicode characters to new file,"Currently covered the following characters:
* Topic-stream separator `▶` (Merged)
* Message content marker `▒` (Merged)
* Quoted text marker `░` (Merged)
* Message header divider `━` (Merged)
* Checkbox tick mark `✓` (Merged)
* Application title bar divider = `═`
* pinned streams divider = `-`
* List title bar divider = `━`

Fixes #717 ",True,741,https://api.github.com/repos/zulip/zulip-terminal/pulls/741,https://github.com/zulip/zulip-terminal/pull/741,closed,26,13,3,3,2,6,1,0,[{'name': 'size: M'}],2020-07-25 20:06:38+00:00,2020-07-27 17:59:54+00:00,165196.0,"1 day, 21:53:16","[{'comment_id': 460478467, 'comment_body': 'There seems to be only one occurance of `stream_topic_separator` further below, so we could just replace that with `STREAM_TOPIC_SEPARATOR` instead of doing this substitution.', 'comment_created': datetime.datetime(2020, 7, 26, 4, 55, 34, tzinfo=datetime.timezone.utc), 'commenter': 'sumanthvrao', 'type': 'User'}, {'comment_id': 460574246, 'comment_body': 'Agreed :+1:', 'comment_created': datetime.datetime(2020, 7, 26, 21, 13, 58, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 460586579, 'comment_body': 'I do think having a placeholder works, but was there a reason you chose `{}`?', 'comment_created': datetime.datetime(2020, 7, 26, 23, 26, 9, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 460591041, 'comment_body': 'Maybe `MESSAGE_CONTENT_MARKER`?', 'comment_created': datetime.datetime(2020, 7, 27, 0, 6, 38, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 460591442, 'comment_body': ""Maybe combine these two lines now, as with the other case?\r\n\r\nI'm aware the name likely came from the variable, but maybe `QUOTED_TEXT_MARKER`?"", 'comment_created': datetime.datetime(2020, 7, 27, 0, 9, 53, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 460708160, 'comment_body': 'It is smaller than using a word, and `{}` automatically suggests that there is something to be substituted here, since `.format()` using the same notation. So it will make the parameters easier to understand.', 'comment_created': datetime.datetime(2020, 7, 27, 7, 51, 53, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}]","[{'commit_sha': 'ca5c964ae9c4f36bb84a4cd08a39640b3a672762', 'committer_username': 'kaustubh-nair', 'committer_name': 'Kaustubh Nair', 'committer_email': 'kaustubh.nair108@gmail.com', 'commit_date': datetime.datetime(2017, 7, 15, 13, 2, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ff16e8f8760bae78c934d057dec8d208cf5016a', 'committer_username': 'kaustubh-nair', 'committer_name': 'Kaustubh Nair', 'committer_email': 'kaustubh.nair108@gmail.com', 'commit_date': datetime.datetime(2017, 7, 15, 13, 2, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5549aa3c71c2025242e2bcbbd95e581cd7a9268f', 'committer_username': 'kaustubh-nair', 'committer_name': 'Kaustubh Nair', 'committer_email': 'kaustubh.nair108@gmail.com', 'commit_date': datetime.datetime(2017, 7, 15, 13, 2, 30, tzinfo=datetime.timezone.utc)}]",Kaustubh Nair,30197132,kaustubh.nair108@gmail.com,User,,48,,71,79
460522714,Move unread_count from StreamButton updates to Model.,"Currently, logic for updating unread counts after muting/unmuting
streams is present in StreamButton. This commit moves this logic to the
Model.

unread_counts['streams'] has been changed to defaultdict(int) so that it
returns 0 when a stream id is not present.

Tests amended.

Fixes #722.",True,758,https://api.github.com/repos/zulip/zulip-terminal/pulls/758,https://github.com/zulip/zulip-terminal/pull/758,closed,14,54,5,1,1,1,2,0,"[{'name': 'size: L'}, {'name': 'PR needs review'}]",2020-07-31 21:15:37+00:00,2020-08-14 06:15:20+00:00,1155583.0,"13 days, 8:59:43","[{'comment_id': 465085300, 'comment_body': 'This is now simple enough to not require a test', 'comment_created': datetime.datetime(2020, 8, 4, 14, 18, 41, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}]","[{'commit_sha': '5c2b6d242da557eb2adf2e0172b0a55c84156fcb', 'committer_username': 'kaustubh-nair', 'committer_name': 'Kaustubh Nair', 'committer_email': 'kaustubh.nair108@gmail.com', 'commit_date': datetime.datetime(2017, 7, 15, 13, 2, 30, tzinfo=datetime.timezone.utc)}]",Kaustubh Nair,30197132,kaustubh.nair108@gmail.com,User,,48,,71,79
433272915,README: Update pip install command.,"Update the command to install development requirements using pip.
Zsh does not match expressions unless surrounded with quotes.
Thus, executing the command without quotes causes it to fail.",True,683,https://api.github.com/repos/zulip/zulip-terminal/pulls/683,https://github.com/zulip/zulip-terminal/pull/683,closed,2,2,1,1,1,0,0,0,[],2020-06-11 18:58:56+00:00,2020-06-11 19:48:27+00:00,2971.0,0:49:31,[],"[{'commit_sha': '14f3eb130ba5b6431e33004412b133fe7a10a221', 'committer_username': 'kaustubh-nair', 'committer_name': 'Kaustubh Nair', 'committer_email': 'kaustubh.nair108@gmail.com', 'commit_date': datetime.datetime(2017, 7, 15, 13, 2, 30, tzinfo=datetime.timezone.utc)}]",Kaustubh Nair,30197132,kaustubh.nair108@gmail.com,User,,48,,71,79

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
122704772,zulip-terminal,zulip/zulip-terminal,Python,243,612,18,81,2276,423,3,165,"[{'id': 477046282, 'number': 793, 'closed': None, 'created': datetime.datetime(2020, 9, 1, 12, 28, 9, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 59, 'deletions': 20, 'state': 'open'}, {'id': 472010394, 'number': 785, 'closed': datetime.datetime(2020, 11, 22, 19, 1, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 22, 16, 55, 18, tzinfo=datetime.timezone.utc), 'time_taken': 7956399.0, 'time_delta': '92 days, 2:06:39', 'additions': 88, 'deletions': 15, 'state': 'closed'}, {'id': 467004483, 'number': 772, 'closed': datetime.datetime(2020, 8, 27, 6, 49, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 12, 20, 59, 19, tzinfo=datetime.timezone.utc), 'time_taken': 1245012.0, 'time_delta': '14 days, 9:50:12', 'additions': 71, 'deletions': 3, 'state': 'closed'}, {'id': 465202143, 'number': 768, 'closed': datetime.datetime(2020, 8, 10, 18, 28, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 9, 21, 0, 47, tzinfo=datetime.timezone.utc), 'time_taken': 77245.0, 'time_delta': '21:27:25', 'additions': 21, 'deletions': 2, 'state': 'closed'}, {'id': 460522714, 'number': 758, 'closed': datetime.datetime(2020, 8, 14, 6, 15, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 31, 21, 15, 37, tzinfo=datetime.timezone.utc), 'time_taken': 1155583.0, 'time_delta': '13 days, 8:59:43', 'additions': 14, 'deletions': 54, 'state': 'closed'}, {'id': 460495992, 'number': 757, 'closed': datetime.datetime(2020, 8, 9, 3, 32, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 31, 20, 40, 15, tzinfo=datetime.timezone.utc), 'time_taken': 715918.0, 'time_delta': '8 days, 6:51:58', 'additions': 57, 'deletions': 10, 'state': 'closed'}, {'id': 458059544, 'number': 748, 'closed': datetime.datetime(2022, 3, 13, 6, 21, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 28, 21, 17, 2, tzinfo=datetime.timezone.utc), 'time_taken': 51181439.0, 'time_delta': '592 days, 9:03:59', 'additions': 14, 'deletions': 0, 'state': 'closed'}, {'id': 457981987, 'number': 746, 'closed': datetime.datetime(2020, 8, 18, 17, 18, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 28, 18, 37, 54, tzinfo=datetime.timezone.utc), 'time_taken': 1809638.0, 'time_delta': '20 days, 22:40:38', 'additions': 210, 'deletions': 32, 'state': 'closed'}, {'id': 456663409, 'number': 741, 'closed': datetime.datetime(2020, 7, 27, 17, 59, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 25, 20, 6, 38, tzinfo=datetime.timezone.utc), 'time_taken': 165196.0, 'time_delta': '1 day, 21:53:16', 'additions': 26, 'deletions': 13, 'state': 'closed'}, {'id': 456483318, 'number': 738, 'closed': datetime.datetime(2020, 8, 1, 18, 58, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 24, 20, 46, 10, tzinfo=datetime.timezone.utc), 'time_taken': 684741.0, 'time_delta': '7 days, 22:12:21', 'additions': 37, 'deletions': 6, 'state': 'closed'}, {'id': 455085802, 'number': 730, 'closed': datetime.datetime(2020, 8, 5, 23, 9, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 22, 12, 25, 44, tzinfo=datetime.timezone.utc), 'time_taken': 1248221.0, 'time_delta': '14 days, 10:43:41', 'additions': 171, 'deletions': 61, 'state': 'closed'}, {'id': 455085629, 'number': 729, 'closed': datetime.datetime(2020, 8, 21, 16, 44, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 22, 12, 25, 22, tzinfo=datetime.timezone.utc), 'time_taken': 2607575.0, 'time_delta': '30 days, 4:19:35', 'additions': 112, 'deletions': 70, 'state': 'closed'}, {'id': 451336233, 'number': 725, 'closed': datetime.datetime(2022, 3, 13, 6, 8, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 17, 18, 18, 53, tzinfo=datetime.timezone.utc), 'time_taken': 52141763.0, 'time_delta': '603 days, 11:49:23', 'additions': 41, 'deletions': 10, 'state': 'closed'}, {'id': 450207847, 'number': 720, 'closed': datetime.datetime(2020, 7, 19, 17, 45, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 16, 13, 43, 32, tzinfo=datetime.timezone.utc), 'time_taken': 273726.0, 'time_delta': '3 days, 4:02:06', 'additions': 50, 'deletions': 9, 'state': 'closed'}, {'id': 449127592, 'number': 718, 'closed': None, 'created': datetime.datetime(2020, 7, 14, 21, 39, 20, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 125, 'deletions': 4, 'state': 'open'}, {'id': 447393100, 'number': 714, 'closed': datetime.datetime(2020, 7, 30, 21, 39, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 10, 11, 44, 25, tzinfo=datetime.timezone.utc), 'time_taken': 1763725.0, 'time_delta': '20 days, 9:55:25', 'additions': 64, 'deletions': 10, 'state': 'closed'}, {'id': 445474104, 'number': 711, 'closed': datetime.datetime(2020, 7, 15, 22, 23, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 7, 15, 4, 15, tzinfo=datetime.timezone.utc), 'time_taken': 717531.0, 'time_delta': '8 days, 7:18:51', 'additions': 22, 'deletions': 21, 'state': 'closed'}, {'id': 444943115, 'number': 710, 'closed': datetime.datetime(2020, 10, 16, 17, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 6, 18, 47, 33, tzinfo=datetime.timezone.utc), 'time_taken': 8808867.0, 'time_delta': '101 days, 22:54:27', 'additions': 1736, 'deletions': 1620, 'state': 'closed'}, {'id': 444185367, 'number': 707, 'closed': datetime.datetime(2021, 8, 17, 5, 39, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 3, 20, 29, 36, tzinfo=datetime.timezone.utc), 'time_taken': 35370616.0, 'time_delta': '409 days, 9:10:16', 'additions': 487, 'deletions': 34, 'state': 'closed'}, {'id': 437049965, 'number': 697, 'closed': datetime.datetime(2020, 6, 30, 23, 39, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 19, 11, 30, 51, tzinfo=datetime.timezone.utc), 'time_taken': 994127.0, 'time_delta': '11 days, 12:08:47', 'additions': 46, 'deletions': 19, 'state': 'closed'}, {'id': 436754366, 'number': 695, 'closed': datetime.datetime(2020, 7, 27, 6, 6, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 18, 20, 46, 19, tzinfo=datetime.timezone.utc), 'time_taken': 3316833.0, 'time_delta': '38 days, 9:20:33', 'additions': 248, 'deletions': 48, 'state': 'closed'}, {'id': 433714473, 'number': 686, 'closed': datetime.datetime(2020, 6, 15, 7, 37, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 12, 14, 30, 19, tzinfo=datetime.timezone.utc), 'time_taken': 234410.0, 'time_delta': '2 days, 17:06:50', 'additions': 90, 'deletions': 16, 'state': 'closed'}, {'id': 433272915, 'number': 683, 'closed': datetime.datetime(2020, 6, 11, 19, 48, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 11, 18, 58, 56, tzinfo=datetime.timezone.utc), 'time_taken': 2971.0, 'time_delta': '0:49:31', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 428054749, 'number': 675, 'closed': datetime.datetime(2020, 8, 30, 0, 52, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 4, 19, 54, 40, tzinfo=datetime.timezone.utc), 'time_taken': 7448274.0, 'time_delta': '86 days, 4:57:54', 'additions': 159, 'deletions': 25, 'state': 'closed'}, {'id': 422429935, 'number': 670, 'closed': None, 'created': datetime.datetime(2020, 5, 24, 15, 32, 38, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 68, 'deletions': 46, 'state': 'open'}, {'id': 420628847, 'number': 667, 'closed': None, 'created': datetime.datetime(2020, 5, 20, 9, 33, 17, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 93, 'deletions': 48, 'state': 'open'}, {'id': 406175653, 'number': 608, 'closed': datetime.datetime(2020, 4, 22, 8, 49, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 20, 16, 42, 27, tzinfo=datetime.timezone.utc), 'time_taken': 144441.0, 'time_delta': '1 day, 16:07:21', 'additions': 11, 'deletions': 26, 'state': 'closed'}, {'id': 400843274, 'number': 583, 'closed': None, 'created': datetime.datetime(2020, 4, 8, 13, 19, 8, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 85, 'deletions': 7, 'state': 'open'}, {'id': 396860256, 'number': 572, 'closed': datetime.datetime(2020, 4, 9, 0, 17, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 1, 9, 4, 52, tzinfo=datetime.timezone.utc), 'time_taken': 659564.0, 'time_delta': '7 days, 15:12:44', 'additions': 89, 'deletions': 107, 'state': 'closed'}, {'id': 390315579, 'number': 548, 'closed': None, 'created': datetime.datetime(2020, 3, 18, 9, 20, 27, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 257, 'deletions': 1, 'state': 'open'}, {'id': 387430293, 'number': 540, 'closed': datetime.datetime(2020, 6, 30, 1, 18, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 12, 19, 24, 22, tzinfo=datetime.timezone.utc), 'time_taken': 9438843.0, 'time_delta': '109 days, 5:54:03', 'additions': 174, 'deletions': 34, 'state': 'closed'}, {'id': 386417396, 'number': 535, 'closed': None, 'created': datetime.datetime(2020, 3, 10, 23, 52, 48, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 140, 'deletions': 40, 'state': 'open'}, {'id': 386249571, 'number': 532, 'closed': datetime.datetime(2020, 3, 11, 19, 4, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 10, 16, 51, 21, tzinfo=datetime.timezone.utc), 'time_taken': 94411.0, 'time_delta': '1 day, 2:13:31', 'additions': 28, 'deletions': 8, 'state': 'closed'}, {'id': 385973498, 'number': 531, 'closed': datetime.datetime(2020, 3, 15, 2, 50, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 10, 7, 18, 50, tzinfo=datetime.timezone.utc), 'time_taken': 415923.0, 'time_delta': '4 days, 19:32:03', 'additions': 44, 'deletions': 1, 'state': 'closed'}, {'id': 384843725, 'number': 525, 'closed': datetime.datetime(2020, 3, 25, 0, 10, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 6, 14, 15, 45, tzinfo=datetime.timezone.utc), 'time_taken': 1590879.0, 'time_delta': '18 days, 9:54:39', 'additions': 1670, 'deletions': 1, 'state': 'closed'}, {'id': 367840395, 'number': 497, 'closed': datetime.datetime(2020, 3, 10, 23, 53, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 28, 5, 59, 10, tzinfo=datetime.timezone.utc), 'time_taken': 3693258.0, 'time_delta': '42 days, 17:54:18', 'additions': 111, 'deletions': 23, 'state': 'closed'}]"
