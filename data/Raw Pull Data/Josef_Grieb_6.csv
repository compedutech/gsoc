pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
437039204,Draft - io_uring - GSoC 2020,"**This draft can be build on Linux Kernel 5.9-rc1 and Linux Kernel 5.8.3**
I came up with some ideas on how to implement it, but I'm not sure what is the right way, so feel free to comment.

I created an event Hashmap to keep track of what kind of events are coming off the completion queue, that means you have to save the `eventId` to the submission queue->user_data to identify events

**Write**
* io_uring events are not in order by default but write events in netty should be in order, there is a flag for that `IOSQE_IO_LINK ` (related to one channel)
* This function `doWrite(ChannelOutboundBuffer in)` writes until `readableBytes` is 0, so that means you have to store `Bytebuf` somewhere

**Accept**
* you need the address of the peer socket to create a new `ChildChannel`. One solution would be to save the filedescriptor in the event `ServerChannel` because `acceptedAddress` argument is saved in `AbstractIOUringServerChannel` to call `serverChannel.createNewChildChannel`
* My idea is whenever accept event is executed, a new accept event is started in `EventLoop`

**Read**
* I'm wondering how to get the pipeline instance to `fireChannelRead(ByteBuf)` in `EventLoop` and have to save `Bytebuf`(as mentioned above)  or is it possible to get the same `Bytebuf` reference from `ByteAllocatorHandle`? 
* as discussed above, save the file descriptor in `Event` and then invoke `pipeline.fireChannelRead`, WDYT?
* How often is` Channel.read` called or `doBeginRead` called? 

what's the difference between `ByteBufUtil.threadLocalDirectBuffer` and `isDirectBufferPooled`?

what about naming? `IOUringSocketChannel`, `IO_UringSocketChannel` or `UringSocketChannel` WDYT?

#10142
",False,10356,https://api.github.com/repos/netty/netty/pulls/10356,https://github.com/netty/netty/pull/10356,closed,8131,24,75,106,70,293,0,0,[],2020-06-19 11:06:19+00:00,2020-09-07 08:04:26+00:00,6901087.0,"79 days, 20:58:07","[{'comment_id': 442810900, 'comment_body': '`Copyright 2014 The Netty Project` -> `Copyright 2020 The Netty Project`', 'comment_created': datetime.datetime(2020, 6, 19, 12, 27, 56, tzinfo=datetime.timezone.utc), 'commenter': 'hyperxpro', 'type': 'User'}, {'comment_id': 442811015, 'comment_body': '`Copyright 2014 The Netty Project` -> `Copyright 2020 The Netty Project`', 'comment_created': datetime.datetime(2020, 6, 19, 12, 28, 9, tzinfo=datetime.timezone.utc), 'commenter': 'hyperxpro', 'type': 'User'}, {'comment_id': 442811147, 'comment_body': '`Copyright 2014 The Netty Project` -> `Copyright 2020 The Netty Project`', 'comment_created': datetime.datetime(2020, 6, 19, 12, 28, 26, tzinfo=datetime.timezone.utc), 'commenter': 'hyperxpro', 'type': 'User'}, {'comment_id': 442811194, 'comment_body': '`Copyright 2014 The Netty Project` -> `Copyright 2020 The Netty Project`', 'comment_created': datetime.datetime(2020, 6, 19, 12, 28, 32, tzinfo=datetime.timezone.utc), 'commenter': 'hyperxpro', 'type': 'User'}, {'comment_id': 442811225, 'comment_body': '`Copyright 2014 The Netty Project` -> `Copyright 2020 The Netty Project`', 'comment_created': datetime.datetime(2020, 6, 19, 12, 28, 38, tzinfo=datetime.timezone.utc), 'commenter': 'hyperxpro', 'type': 'User'}, {'comment_id': 442811263, 'comment_body': '`Copyright 2014 The Netty Project` -> `Copyright 2020 The Netty Project`', 'comment_created': datetime.datetime(2020, 6, 19, 12, 28, 43, tzinfo=datetime.timezone.utc), 'commenter': 'hyperxpro', 'type': 'User'}, {'comment_id': 442811300, 'comment_body': '`Copyright 2014 The Netty Project` -> `Copyright 2020 The Netty Project`', 'comment_created': datetime.datetime(2020, 6, 19, 12, 28, 49, tzinfo=datetime.timezone.utc), 'commenter': 'hyperxpro', 'type': 'User'}, {'comment_id': 442811343, 'comment_body': '`Copyright 2014 The Netty Project` -> `Copyright 2020 The Netty Project`', 'comment_created': datetime.datetime(2020, 6, 19, 12, 28, 55, tzinfo=datetime.timezone.utc), 'commenter': 'hyperxpro', 'type': 'User'}, {'comment_id': 442811428, 'comment_body': '`Copyright 2014 The Netty Project` -> `Copyright 2020 The Netty Project`', 'comment_created': datetime.datetime(2020, 6, 19, 12, 29, 7, tzinfo=datetime.timezone.utc), 'commenter': 'hyperxpro', 'type': 'User'}, {'comment_id': 442811467, 'comment_body': '`Copyright 2014 The Netty Project` -> `Copyright 2020 The Netty Project`', 'comment_created': datetime.datetime(2020, 6, 19, 12, 29, 12, tzinfo=datetime.timezone.utc), 'commenter': 'hyperxpro', 'type': 'User'}, {'comment_id': 442811519, 'comment_body': '`Copyright 2014 The Netty Project` -> `Copyright 2020 The Netty Project`', 'comment_created': datetime.datetime(2020, 6, 19, 12, 29, 18, tzinfo=datetime.timezone.utc), 'commenter': 'hyperxpro', 'type': 'User'}, {'comment_id': 442811640, 'comment_body': 'Missing license header', 'comment_created': datetime.datetime(2020, 6, 19, 12, 29, 35, tzinfo=datetime.timezone.utc), 'commenter': 'hyperxpro', 'type': 'User'}, {'comment_id': 445576098, 'comment_body': 'use `LongObjectHashMap` instead', 'comment_created': datetime.datetime(2020, 6, 25, 13, 54, 2, tzinfo=datetime.timezone.utc), 'commenter': 'franz1981', 'type': 'User'}, {'comment_id': 448252178, 'comment_body': ""If the reformatting of this file is really necessary, then please place it in its own commit, separate from any other changes you've made to this file (if any)."", 'comment_created': datetime.datetime(2020, 7, 1, 9, 54, 55, tzinfo=datetime.timezone.utc), 'commenter': 'chrisvest', 'type': 'User'}, {'comment_id': 448257151, 'comment_body': ""At this time, RHEL 8.2 is the latest version, and it ships with kernel version 4.18: https://access.redhat.com/articles/3078\r\n\r\nWe need at least a 5.5 kernel to get the ACCEPT and CONNECT system calls.\r\nI'm not sure what enforcer rule would do that, though."", 'comment_created': datetime.datetime(2020, 7, 1, 10, 3, 55, tzinfo=datetime.timezone.utc), 'commenter': 'chrisvest', 'type': 'User'}, {'comment_id': 448260524, 'comment_body': ""Why do we have two profiles? I guess they serve different purposes, but it's not clear to me what those are.\r\n\r\n(or 3 when counting `linux-aarch64` as well)"", 'comment_created': datetime.datetime(2020, 7, 1, 10, 10, 32, tzinfo=datetime.timezone.utc), 'commenter': 'chrisvest', 'type': 'User'}, {'comment_id': 448272835, 'comment_body': 'Ring size should be configurable, somehow. If nothing else, then at least with a `SystemPropertyUtil.getInt()`.', 'comment_created': datetime.datetime(2020, 7, 1, 10, 34, 46, tzinfo=datetime.timezone.utc), 'commenter': 'chrisvest', 'type': 'User'}, {'comment_id': 448275985, 'comment_body': '`fd` should be `int` throughout; io_uring uses `_s32` for file descriptors.', 'comment_created': datetime.datetime(2020, 7, 1, 10, 41, 30, tzinfo=datetime.timezone.utc), 'commenter': 'chrisvest', 'type': 'User'}, {'comment_id': 448277424, 'comment_body': 'Use `PlatformDependent.normalizedOs()`.', 'comment_created': datetime.datetime(2020, 7, 1, 10, 44, 15, tzinfo=datetime.timezone.utc), 'commenter': 'chrisvest', 'type': 'User'}, {'comment_id': 448281999, 'comment_body': 'I think we should throw on this condition as well, or make it available to some `ensureAvailability()` check, similar to what `Epoll` does. This outcome is basically the same situation as when we find ourselves on a non-Linux OS.', 'comment_created': datetime.datetime(2020, 7, 1, 10, 53, 37, tzinfo=datetime.timezone.utc), 'commenter': 'chrisvest', 'type': 'User'}, {'comment_id': 448310690, 'comment_body': ""I think this API is too chatty. JNI calls are somewhat heavy, and it'd be better to do as few of them as possible. I think they also make debugging harder. It'd be better if we manipulated the SQEs, CQEs, and their rings, in Java.\r\n\r\nTo be honest, I'd prefer if we just used JNI to pass through to the native calls, system calls, and constants, that we need. I realise that's a big change to ask for, though."", 'comment_created': datetime.datetime(2020, 7, 1, 11, 53, 15, tzinfo=datetime.timezone.utc), 'commenter': 'chrisvest', 'type': 'User'}, {'comment_id': 448329011, 'comment_body': ""Looks like the existing Netty `FileDescriptor` class can be used here as well.\r\n\r\nFor the purpose of writing tests, it would be even better if `FileDescriptor` also had a factory method that use  `mkstemp` and `unlink` to create unique temporary files. That would be safe from races when tests run concurrently, and it wouldn't litter the file system."", 'comment_created': datetime.datetime(2020, 7, 1, 12, 29, 39, tzinfo=datetime.timezone.utc), 'commenter': 'chrisvest', 'type': 'User'}, {'comment_id': 448331816, 'comment_body': ""A good thing to add to this test would be to read the data back and verify it's what we meant to write."", 'comment_created': datetime.datetime(2020, 7, 1, 12, 34, 42, tzinfo=datetime.timezone.utc), 'commenter': 'chrisvest', 'type': 'User'}, {'comment_id': 448333869, 'comment_body': ""Also, the `12` is the `byteArray.length`. It'd be more clear what is being tested if you used the array length, instead of the integer literal."", 'comment_created': datetime.datetime(2020, 7, 1, 12, 38, 23, tzinfo=datetime.timezone.utc), 'commenter': 'chrisvest', 'type': 'User'}, {'comment_id': 448337859, 'comment_body': 'Convention is to use camelCase for test names. This test could be called `canWriteToFile`, considering what it does.', 'comment_created': datetime.datetime(2020, 7, 1, 12, 46, 11, tzinfo=datetime.timezone.utc), 'commenter': 'chrisvest', 'type': 'User'}, {'comment_id': 448359420, 'comment_body': 'I think this `io_uring_wait_cqe` and `io_uring_submit` should be one operation. The `io_uring_submit` function sets `min_complete` to zero, and this one sets `to_submit` to zero, so likely the control loop would have to make two system calls to make meaningful progress. If you could do both in one call, like how `io_uring_enter` itself is designed, then we could amortise the call overhead even more. This way, I imagine the event loop as basically a control loop for managing the queues, if that makes sense.', 'comment_created': datetime.datetime(2020, 7, 1, 13, 23, 5, tzinfo=datetime.timezone.utc), 'commenter': 'chrisvest', 'type': 'User'}, {'comment_id': 448364104, 'comment_body': 'We need to capture the error condition when the `ring_fd` is `-1`. We should especially watch out for `ENOSYS`.', 'comment_created': datetime.datetime(2020, 7, 1, 13, 30, 15, tzinfo=datetime.timezone.utc), 'commenter': 'chrisvest', 'type': 'User'}, {'comment_id': 448434028, 'comment_body': ""thats true, I also noticed later after finish JNI C part... I'm working on it right now (https://github.com/netty/netty/pull/10356#issuecomment-651223112) to access and modified the rings buffers it via unsafe"", 'comment_created': datetime.datetime(2020, 7, 1, 15, 13, 51, tzinfo=datetime.timezone.utc), 'commenter': '1Jo1', 'type': 'User'}, {'comment_id': 448700976, 'comment_body': ""👍  oh my mistake I didn't want to commit this "", 'comment_created': datetime.datetime(2020, 7, 2, 1, 37, 45, tzinfo=datetime.timezone.utc), 'commenter': '1Jo1', 'type': 'User'}, {'comment_id': 448705787, 'comment_body': 'good point, not only do we need a check when building the jar, we need to make sure that a check is done on runtime', 'comment_created': datetime.datetime(2020, 7, 2, 1, 56, 37, tzinfo=datetime.timezone.utc), 'commenter': '1Jo1', 'type': 'User'}, {'comment_id': 448707273, 'comment_body': 'yeah we need only 2 profiles for aarch64 and x86, but we still need maven-enforcer-plugin, so we have to move it somewhere', 'comment_created': datetime.datetime(2020, 7, 2, 2, 2, 39, tzinfo=datetime.timezone.utc), 'commenter': '1Jo1', 'type': 'User'}, {'comment_id': 448919930, 'comment_body': ""I just noticed that Ubuntu 20.04 LTS which is Linux Kernel 5.4, my idea was to support 5.4 Linux Kernel, the next Ubuntu LTS will be release in 2 years and Ubuntu 21.04 with Linux kernel 5.5/5.6, my suggestion would be to work on 5.5 is also easier at the beginning and then let's see how difficult is that to implement the normal syscalls accept and connect to io_uring @normanmaurer what do you think?\r\n"", 'comment_created': datetime.datetime(2020, 7, 2, 10, 57, 31, tzinfo=datetime.timezone.utc), 'commenter': '1Jo1', 'type': 'User'}, {'comment_id': 450744263, 'comment_body': ""I think I'll do it when I do it when I have more tests 👍 "", 'comment_created': datetime.datetime(2020, 7, 7, 9, 49, 47, tzinfo=datetime.timezone.utc), 'commenter': '1Jo1', 'type': 'User'}, {'comment_id': 450745426, 'comment_body': 'yeah I guess I wrote too much C..', 'comment_created': datetime.datetime(2020, 7, 7, 9, 51, 41, tzinfo=datetime.timezone.utc), 'commenter': '1Jo1', 'type': 'User'}, {'comment_id': 450789628, 'comment_body': ""The nice part of the Java Memory Model is that you don't forcibly need these to be exposed with Unsafe but you can provide a variant using a dummy atomic long field updater (to be load/stored or using a lazy set to get release semantic) that is portable and won't need Unsafe at all "", 'comment_created': datetime.datetime(2020, 7, 7, 11, 17, 52, tzinfo=datetime.timezone.utc), 'commenter': 'franz1981', 'type': 'User'}, {'comment_id': 450794586, 'comment_body': ""I'm not so familiar with the java memory model, how does memory reordering work in java? do you have a small example?"", 'comment_created': datetime.datetime(2020, 7, 7, 11, 28, 9, tzinfo=datetime.timezone.utc), 'commenter': '1Jo1', 'type': 'User'}, {'comment_id': 450795769, 'comment_body': ""that means when I use atomic -> it's like a memory barrier acquire or release right? "", 'comment_created': datetime.datetime(2020, 7, 7, 11, 30, 37, tzinfo=datetime.timezone.utc), 'commenter': '1Jo1', 'type': 'User'}, {'comment_id': 450823392, 'comment_body': 'Atomic set -> full fence (seq cst barrier)\r\nAtomic get -> load fence (acquire barrier)\r\nAtomic lazy set -> store fence (release barrier)', 'comment_created': datetime.datetime(2020, 7, 7, 12, 23, 41, tzinfo=datetime.timezone.utc), 'commenter': 'franz1981', 'type': 'User'}, {'comment_id': 451518335, 'comment_body': 'Fedora 32 has a 5.6 kernel, so that could be an option for testing things out.', 'comment_created': datetime.datetime(2020, 7, 8, 12, 49, 24, tzinfo=datetime.timezone.utc), 'commenter': 'chrisvest', 'type': 'User'}, {'comment_id': 451520610, 'comment_body': 'Installing the latest kernel manually is better because shifting the development environment is a little painful job.', 'comment_created': datetime.datetime(2020, 7, 8, 12, 52, 55, tzinfo=datetime.timezone.utc), 'commenter': 'hyperxpro', 'type': 'User'}, {'comment_id': 451526243, 'comment_body': ""We don't specifically need the barriers (since we can `getVolatile` or `putVolatile`) but we do need to use Unsafe, because we are manipulating the rings that reside in native memory. To avoid Unsafe in this case, we'll need to use VarHandles, but 4.1 (that this PR aimed at) is baselined on Java 7."", 'comment_created': datetime.datetime(2020, 7, 8, 13, 1, 43, tzinfo=datetime.timezone.utc), 'commenter': 'chrisvest', 'type': 'User'}, {'comment_id': 451533323, 'comment_body': 'If you instead make `getIntVolatile` available and use that, then there would be no need for the `loadFence` here.', 'comment_created': datetime.datetime(2020, 7, 8, 13, 12, 48, tzinfo=datetime.timezone.utc), 'commenter': 'chrisvest', 'type': 'User'}, {'comment_id': 451533720, 'comment_body': ""Likewise if you make `putIntVolatile` available and use that, you won't need the `storeFence` here."", 'comment_created': datetime.datetime(2020, 7, 8, 13, 13, 28, tzinfo=datetime.timezone.utc), 'commenter': 'chrisvest', 'type': 'User'}, {'comment_id': 451542807, 'comment_body': 'This is another good place where `putIntVolatile` can be used, and we can remove the `storeFence` call.', 'comment_created': datetime.datetime(2020, 7, 8, 13, 27, 1, tzinfo=datetime.timezone.utc), 'commenter': 'chrisvest', 'type': 'User'}, {'comment_id': 451608361, 'comment_body': 'For the SQE ring, I think we need to read the `head` value with `getIntVolatile`.', 'comment_created': datetime.datetime(2020, 7, 8, 14, 54, 24, tzinfo=datetime.timezone.utc), 'commenter': 'chrisvest', 'type': 'User'}, {'comment_id': 451610280, 'comment_body': 'putIntOrdered should be enough if the release semantic is needed here', 'comment_created': datetime.datetime(2020, 7, 8, 14, 56, 54, tzinfo=datetime.timezone.utc), 'commenter': 'franz1981', 'type': 'User'}, {'comment_id': 451610465, 'comment_body': 'putIntOrdered should be enough if the release semantic is needed here', 'comment_created': datetime.datetime(2020, 7, 8, 14, 57, 10, tzinfo=datetime.timezone.utc), 'commenter': 'franz1981', 'type': 'User'}, {'comment_id': 451620166, 'comment_body': 'I am currently testing it on a fedora 32 5.7. kernel, @hyperxpro I think we can still find a solution to support 5.4 later(if the prototype is finish)', 'comment_created': datetime.datetime(2020, 7, 8, 15, 10, 17, tzinfo=datetime.timezone.utc), 'commenter': '1Jo1', 'type': 'User'}, {'comment_id': 451621338, 'comment_body': ""+1... let's keep it simple for now."", 'comment_created': datetime.datetime(2020, 7, 8, 15, 11, 53, tzinfo=datetime.timezone.utc), 'commenter': 'normanmaurer', 'type': 'User'}, {'comment_id': 451629032, 'comment_body': ""`putIntVolatile` and `putIntOrdered` what's the difference?"", 'comment_created': datetime.datetime(2020, 7, 8, 15, 22, 32, tzinfo=datetime.timezone.utc), 'commenter': '1Jo1', 'type': 'User'}, {'comment_id': 451631788, 'comment_body': 'Ordered *should* (is a JMM impl detail TBH) be:\r\nStoreStore;LoadStore;PUT\r\n\r\nwhile volatile, instead:\r\nStoreStore;LoadStore;PUT;StoreLoad\r\n\r\nStoreLoad is often implemented as a full memory barrier (in many archs), while StoreStore; LoadStore; is a release memory barrier in practice', 'comment_created': datetime.datetime(2020, 7, 8, 15, 26, 27, tzinfo=datetime.timezone.utc), 'commenter': 'franz1981', 'type': 'User'}, {'comment_id': 451813507, 'comment_body': 'it would make more sense to use `putIntOrdered` as it is also used in liburing the release memory barrier https://github.com/axboe/liburing/blob/master/src/include/liburing.h#L150', 'comment_created': datetime.datetime(2020, 7, 8, 20, 42, 19, tzinfo=datetime.timezone.utc), 'commenter': '1Jo1', 'type': 'User'}, {'comment_id': 452246273, 'comment_body': 'These can be `static`.', 'comment_created': datetime.datetime(2020, 7, 9, 14, 9, 53, tzinfo=datetime.timezone.utc), 'commenter': 'chrisvest', 'type': 'User'}, {'comment_id': 452246596, 'comment_body': 'These can be `static`.', 'comment_created': datetime.datetime(2020, 7, 9, 14, 10, 21, tzinfo=datetime.timezone.utc), 'commenter': 'chrisvest', 'type': 'User'}, {'comment_id': 452247499, 'comment_body': 'Nit: Use `Integer.BYTES` instead.', 'comment_created': datetime.datetime(2020, 7, 9, 14, 11, 32, tzinfo=datetime.timezone.utc), 'commenter': 'chrisvest', 'type': 'User'}, {'comment_id': 452258421, 'comment_body': 'I really like that these are enums. 👍 ', 'comment_created': datetime.datetime(2020, 7, 9, 14, 26, 46, tzinfo=datetime.timezone.utc), 'commenter': 'chrisvest', 'type': 'User'}, {'comment_id': 452263189, 'comment_body': 'These Event objects are a good idea. They define the life cycle of an asynchronous operation, and I suspect they will have an important role to play when the code is further along. 👍 ', 'comment_created': datetime.datetime(2020, 7, 9, 14, 33, 13, tzinfo=datetime.timezone.utc), 'commenter': 'chrisvest', 'type': 'User'}, {'comment_id': 452679811, 'comment_body': ""Now that we do our barriers on the Java side, we don't need this file anymore. The barriers defined here are either not used, or they are used only in macros in `io_uring.h` that in turn are not used. We can remove all this unused code."", 'comment_created': datetime.datetime(2020, 7, 10, 7, 47, 18, tzinfo=datetime.timezone.utc), 'commenter': 'chrisvest', 'type': 'User'}, {'comment_id': 452683798, 'comment_body': 'Not sure if we need to support DEC Alpha CPUs… 😄 ', 'comment_created': datetime.datetime(2020, 7, 10, 7, 55, 29, tzinfo=datetime.timezone.utc), 'commenter': 'chrisvest', 'type': 'User'}, {'comment_id': 452689087, 'comment_body': ""Depending on where you want to take the design, this class _could_ grow to become a facade for both queues, so submitting tasks and taking completions happens here. That would make this class the central place where we know how many tasks have been queued up, how many have been submitted, and how many completions are waiting to be consumed. We could use this information to dynamically decide when and how often to call `io_uring_enter`.\r\n\r\nIt's not something you have to do now. Getting a simple integration up and running is a more important first step. Bt it's something to consider when you think about where to take the design."", 'comment_created': datetime.datetime(2020, 7, 10, 8, 5, 49, tzinfo=datetime.timezone.utc), 'commenter': 'chrisvest', 'type': 'User'}, {'comment_id': 454871400, 'comment_body': ""I don't think there will compiler memory reordering because of that https://github.com/netty/netty/blob/692238f6da4beb8e6698e214bfadc7d1135225d6/transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringSubmissionQueue.java#L125\r\nwhat do you think? @chrisvest "", 'comment_created': datetime.datetime(2020, 7, 15, 8, 11, 27, tzinfo=datetime.timezone.utc), 'commenter': '1Jo1', 'type': 'User'}, {'comment_id': 454871660, 'comment_body': 'thanks :)', 'comment_created': datetime.datetime(2020, 7, 15, 8, 11, 56, tzinfo=datetime.timezone.utc), 'commenter': '1Jo1', 'type': 'User'}, {'comment_id': 454872812, 'comment_body': 'yes especially in the eventloop', 'comment_created': datetime.datetime(2020, 7, 15, 8, 13, 56, tzinfo=datetime.timezone.utc), 'commenter': '1Jo1', 'type': 'User'}, {'comment_id': 454875052, 'comment_body': 'haha yeah we dont need that 👍 ', 'comment_created': datetime.datetime(2020, 7, 15, 8, 17, 39, tzinfo=datetime.timezone.utc), 'commenter': '1Jo1', 'type': 'User'}, {'comment_id': 454910316, 'comment_body': ""yeah good point 👍  it would be much more efficient to call less `io_uring_enter`, I'm really excited to try this flag `IOURING_SETUP_SQPOLL`, But I'm not sure if you can change it dynamically, probably not so easy "", 'comment_created': datetime.datetime(2020, 7, 15, 9, 15, 42, tzinfo=datetime.timezone.utc), 'commenter': '1Jo1', 'type': 'User'}, {'comment_id': 455011603, 'comment_body': ""The `head` field is updated by the kernel. It's the memory visibility semantics I'm after in this case."", 'comment_created': datetime.datetime(2020, 7, 15, 12, 26, 12, tzinfo=datetime.timezone.utc), 'commenter': 'chrisvest', 'type': 'User'}, {'comment_id': 456274731, 'comment_body': 'nit: revert', 'comment_created': datetime.datetime(2020, 7, 17, 7, 43, 13, tzinfo=datetime.timezone.utc), 'commenter': 'normanmaurer', 'type': 'User'}, {'comment_id': 456274928, 'comment_body': 'nit: Add license header ', 'comment_created': datetime.datetime(2020, 7, 17, 7, 43, 38, tzinfo=datetime.timezone.utc), 'commenter': 'normanmaurer', 'type': 'User'}, {'comment_id': 456275125, 'comment_body': 'nit: group with the other `netty_` headers ', 'comment_created': datetime.datetime(2020, 7, 17, 7, 44, tzinfo=datetime.timezone.utc), 'commenter': 'normanmaurer', 'type': 'User'}, {'comment_id': 456275356, 'comment_body': 'nit: add `{ }` to match coding style of Netty ', 'comment_created': datetime.datetime(2020, 7, 17, 7, 44, 30, tzinfo=datetime.timezone.utc), 'commenter': 'normanmaurer', 'type': 'User'}, {'comment_id': 456275466, 'comment_body': 'for all files: Use 4 spaces not 2....', 'comment_created': datetime.datetime(2020, 7, 17, 7, 44, 43, tzinfo=datetime.timezone.utc), 'commenter': 'normanmaurer', 'type': 'User'}, {'comment_id': 456275697, 'comment_body': 'nit: add `{ }`', 'comment_created': datetime.datetime(2020, 7, 17, 7, 45, 10, tzinfo=datetime.timezone.utc), 'commenter': 'normanmaurer', 'type': 'User'}, {'comment_id': 456275744, 'comment_body': 'nit: add `{ }`', 'comment_created': datetime.datetime(2020, 7, 17, 7, 45, 14, tzinfo=datetime.timezone.utc), 'commenter': 'normanmaurer', 'type': 'User'}, {'comment_id': 456276114, 'comment_body': 'put `got labels` at the end of the function ', 'comment_created': datetime.datetime(2020, 7, 17, 7, 45, 55, tzinfo=datetime.timezone.utc), 'commenter': 'normanmaurer', 'type': 'User'}, {'comment_id': 456276577, 'comment_body': 'should signal this back somehow so we can fail the creation of the `EventLoop` ?', 'comment_created': datetime.datetime(2020, 7, 17, 7, 46, 48, tzinfo=datetime.timezone.utc), 'commenter': 'normanmaurer', 'type': 'User'}, {'comment_id': 456301631, 'comment_body': 'nit: missing CRLF', 'comment_created': datetime.datetime(2020, 7, 17, 8, 35, 5, tzinfo=datetime.timezone.utc), 'commenter': 'normanmaurer', 'type': 'User'}, {'comment_id': 456301849, 'comment_body': 'Where is this coming from ?', 'comment_created': datetime.datetime(2020, 7, 17, 8, 35, 24, tzinfo=datetime.timezone.utc), 'commenter': 'normanmaurer', 'type': 'User'}, {'comment_id': 456301895, 'comment_body': 'nit: missing CRLF', 'comment_created': datetime.datetime(2020, 7, 17, 8, 35, 29, tzinfo=datetime.timezone.utc), 'commenter': 'normanmaurer', 'type': 'User'}, {'comment_id': 456301967, 'comment_body': 'Where is this coming from ?', 'comment_created': datetime.datetime(2020, 7, 17, 8, 35, 36, tzinfo=datetime.timezone.utc), 'commenter': 'normanmaurer', 'type': 'User'}, {'comment_id': 456302111, 'comment_body': 'package-private ?', 'comment_created': datetime.datetime(2020, 7, 17, 8, 35, 50, tzinfo=datetime.timezone.utc), 'commenter': 'normanmaurer', 'type': 'User'}, {'comment_id': 456302437, 'comment_body': '`throw` otherwise ?', 'comment_created': datetime.datetime(2020, 7, 17, 8, 36, 32, tzinfo=datetime.timezone.utc), 'commenter': 'normanmaurer', 'type': 'User'}, {'comment_id': 456302889, 'comment_body': 'This seems incorrect... you should just call `doWriteBytes` in a loop until there is nothing left in the buffer.', 'comment_created': datetime.datetime(2020, 7, 17, 8, 37, 25, tzinfo=datetime.timezone.utc), 'commenter': 'normanmaurer', 'type': 'User'}, {'comment_id': 456303183, 'comment_body': '`throw....` otherwise ? ', 'comment_created': datetime.datetime(2020, 7, 17, 8, 38, 1, tzinfo=datetime.timezone.utc), 'commenter': 'normanmaurer', 'type': 'User'}, {'comment_id': 456303411, 'comment_body': 'this method name is not correct and also the java docs as this has nothing todo with epoll', 'comment_created': datetime.datetime(2020, 7, 17, 8, 38, 30, tzinfo=datetime.timezone.utc), 'commenter': 'normanmaurer', 'type': 'User'}, {'comment_id': 456303576, 'comment_body': 'you at least need to fail the promise if its not supported', 'comment_created': datetime.datetime(2020, 7, 17, 8, 38, 51, tzinfo=datetime.timezone.utc), 'commenter': 'normanmaurer', 'type': 'User'}, {'comment_id': 456303808, 'comment_body': 'nit: missing CRLF', 'comment_created': datetime.datetime(2020, 7, 17, 8, 39, 19, tzinfo=datetime.timezone.utc), 'commenter': 'normanmaurer', 'type': 'User'}, {'comment_id': 456304135, 'comment_body': 'nit: missing CRLF', 'comment_created': datetime.datetime(2020, 7, 17, 8, 39, 56, tzinfo=datetime.timezone.utc), 'commenter': 'normanmaurer', 'type': 'User'}, {'comment_id': 456304419, 'comment_body': 'I think this should be final and package-private ?', 'comment_created': datetime.datetime(2020, 7, 17, 8, 40, 25, tzinfo=datetime.timezone.utc), 'commenter': 'normanmaurer', 'type': 'User'}, {'comment_id': 456304584, 'comment_body': 'nit: remove empty line ', 'comment_created': datetime.datetime(2020, 7, 17, 8, 40, 41, tzinfo=datetime.timezone.utc), 'commenter': 'normanmaurer', 'type': 'User'}, {'comment_id': 456304909, 'comment_body': 'Why is this type needed at all if we not add any functionality ?', 'comment_created': datetime.datetime(2020, 7, 17, 8, 41, 16, tzinfo=datetime.timezone.utc), 'commenter': 'normanmaurer', 'type': 'User'}, {'comment_id': 456305465, 'comment_body': 'package-private and final?', 'comment_created': datetime.datetime(2020, 7, 17, 8, 42, 21, tzinfo=datetime.timezone.utc), 'commenter': 'normanmaurer', 'type': 'User'}, {'comment_id': 456305526, 'comment_body': 'package-private and final?', 'comment_created': datetime.datetime(2020, 7, 17, 8, 42, 29, tzinfo=datetime.timezone.utc), 'commenter': 'normanmaurer', 'type': 'User'}, {'comment_id': 456305629, 'comment_body': 'final ?', 'comment_created': datetime.datetime(2020, 7, 17, 8, 42, 39, tzinfo=datetime.timezone.utc), 'commenter': 'normanmaurer', 'type': 'User'}, {'comment_id': 456305745, 'comment_body': 'remove `protected`', 'comment_created': datetime.datetime(2020, 7, 17, 8, 42, 50, tzinfo=datetime.timezone.utc), 'commenter': 'normanmaurer', 'type': 'User'}, {'comment_id': 456305915, 'comment_body': 'nit: remove empty line', 'comment_created': datetime.datetime(2020, 7, 17, 8, 43, 9, tzinfo=datetime.timezone.utc), 'commenter': 'normanmaurer', 'type': 'User'}, {'comment_id': 456305947, 'comment_body': 'nit: remove empty line', 'comment_created': datetime.datetime(2020, 7, 17, 8, 43, 12, tzinfo=datetime.timezone.utc), 'commenter': 'normanmaurer', 'type': 'User'}, {'comment_id': 456306000, 'comment_body': 'nit: remove empty line', 'comment_created': datetime.datetime(2020, 7, 17, 8, 43, 16, tzinfo=datetime.timezone.utc), 'commenter': 'normanmaurer', 'type': 'User'}, {'comment_id': 456306033, 'comment_body': 'nit: remove empty line', 'comment_created': datetime.datetime(2020, 7, 17, 8, 43, 21, tzinfo=datetime.timezone.utc), 'commenter': 'normanmaurer', 'type': 'User'}, {'comment_id': 456306077, 'comment_body': 'final', 'comment_created': datetime.datetime(2020, 7, 17, 8, 43, 25, tzinfo=datetime.timezone.utc), 'commenter': 'normanmaurer', 'type': 'User'}, {'comment_id': 456306118, 'comment_body': 'nit: remove empty line', 'comment_created': datetime.datetime(2020, 7, 17, 8, 43, 30, tzinfo=datetime.timezone.utc), 'commenter': 'normanmaurer', 'type': 'User'}, {'comment_id': 456306292, 'comment_body': 'final and package-private ?', 'comment_created': datetime.datetime(2020, 7, 17, 8, 43, 49, tzinfo=datetime.timezone.utc), 'commenter': 'normanmaurer', 'type': 'User'}, {'comment_id': 456306607, 'comment_body': 'this seems to be unused ?', 'comment_created': datetime.datetime(2020, 7, 17, 8, 44, 26, tzinfo=datetime.timezone.utc), 'commenter': 'normanmaurer', 'type': 'User'}, {'comment_id': 456306943, 'comment_body': ""Why do we need this one at all and can't just use `DefaultServerSocketChannelConfig` ?"", 'comment_created': datetime.datetime(2020, 7, 17, 8, 45, 4, tzinfo=datetime.timezone.utc), 'commenter': 'normanmaurer', 'type': 'User'}, {'comment_id': 456307047, 'comment_body': 'missing license header', 'comment_created': datetime.datetime(2020, 7, 17, 8, 45, 15, tzinfo=datetime.timezone.utc), 'commenter': 'normanmaurer', 'type': 'User'}, {'comment_id': 456307198, 'comment_body': 'final ', 'comment_created': datetime.datetime(2020, 7, 17, 8, 45, 31, tzinfo=datetime.timezone.utc), 'commenter': 'normanmaurer', 'type': 'User'}, {'comment_id': 456307415, 'comment_body': 'why does this just call super ? In this case you should just remove the override ', 'comment_created': datetime.datetime(2020, 7, 17, 8, 45, 58, tzinfo=datetime.timezone.utc), 'commenter': 'normanmaurer', 'type': 'User'}, {'comment_id': 456307505, 'comment_body': 'This looks incorrect ', 'comment_created': datetime.datetime(2020, 7, 17, 8, 46, 6, tzinfo=datetime.timezone.utc), 'commenter': 'normanmaurer', 'type': 'User'}, {'comment_id': 456307561, 'comment_body': 'remove empty line ', 'comment_created': datetime.datetime(2020, 7, 17, 8, 46, 13, tzinfo=datetime.timezone.utc), 'commenter': 'normanmaurer', 'type': 'User'}, {'comment_id': 456307611, 'comment_body': 'missing CRLF', 'comment_created': datetime.datetime(2020, 7, 17, 8, 46, 21, tzinfo=datetime.timezone.utc), 'commenter': 'normanmaurer', 'type': 'User'}, {'comment_id': 456307753, 'comment_body': ""Why you can't use DefaultServerSocketChannelConfig `"", 'comment_created': datetime.datetime(2020, 7, 17, 8, 46, 36, tzinfo=datetime.timezone.utc), 'commenter': 'normanmaurer', 'type': 'User'}, {'comment_id': 456307847, 'comment_body': 'missing license header ', 'comment_created': datetime.datetime(2020, 7, 17, 8, 46, 45, tzinfo=datetime.timezone.utc), 'commenter': 'normanmaurer', 'type': 'User'}, {'comment_id': 456308128, 'comment_body': 'you will need fo fix all the above methods :)', 'comment_created': datetime.datetime(2020, 7, 17, 8, 47, 16, tzinfo=datetime.timezone.utc), 'commenter': 'normanmaurer', 'type': 'User'}, {'comment_id': 456308420, 'comment_body': 'again this seems to be useless and should be replaced by using `DefaultSocketChannelConfig` directly', 'comment_created': datetime.datetime(2020, 7, 17, 8, 47, 48, tzinfo=datetime.timezone.utc), 'commenter': 'normanmaurer', 'type': 'User'}, {'comment_id': 456308468, 'comment_body': 'missing license header ', 'comment_created': datetime.datetime(2020, 7, 17, 8, 47, 54, tzinfo=datetime.timezone.utc), 'commenter': 'normanmaurer', 'type': 'User'}, {'comment_id': 456308691, 'comment_body': 'package-private and final ?', 'comment_created': datetime.datetime(2020, 7, 17, 8, 48, 21, tzinfo=datetime.timezone.utc), 'commenter': 'normanmaurer', 'type': 'User'}, {'comment_id': 456308938, 'comment_body': 'nit: formatting ', 'comment_created': datetime.datetime(2020, 7, 17, 8, 48, 47, tzinfo=datetime.timezone.utc), 'commenter': 'normanmaurer', 'type': 'User'}, {'comment_id': 456463296, 'comment_body': 'package-private and final ?', 'comment_created': datetime.datetime(2020, 7, 17, 14, 4, 16, tzinfo=datetime.timezone.utc), 'commenter': 'normanmaurer', 'type': 'User'}, {'comment_id': 456463635, 'comment_body': 'nit: would be nice to add a few links via `<a href...`', 'comment_created': datetime.datetime(2020, 7, 17, 14, 4, 50, tzinfo=datetime.timezone.utc), 'commenter': 'normanmaurer', 'type': 'User'}, {'comment_id': 456464134, 'comment_body': 'nit: you can use `writeCharSequence(...)` directly', 'comment_created': datetime.datetime(2020, 7, 17, 14, 5, 38, tzinfo=datetime.timezone.utc), 'commenter': 'normanmaurer', 'type': 'User'}, {'comment_id': 456464439, 'comment_body': ""shouldn't this be a long ?"", 'comment_created': datetime.datetime(2020, 7, 17, 14, 6, 9, tzinfo=datetime.timezone.utc), 'commenter': 'normanmaurer', 'type': 'User'}, {'comment_id': 456464871, 'comment_body': 'consider using `assertArrayEquals(...)`', 'comment_created': datetime.datetime(2020, 7, 17, 14, 6, 50, tzinfo=datetime.timezone.utc), 'commenter': 'normanmaurer', 'type': 'User'}, {'comment_id': 456478674, 'comment_body': 'file descriptors are ints', 'comment_created': datetime.datetime(2020, 7, 17, 14, 29, 31, tzinfo=datetime.timezone.utc), 'commenter': 'chrisvest', 'type': 'User'}, {'comment_id': 457447276, 'comment_body': ""@normanmaurer  I don't know how to do it, what about throwing a Java Exception in JNI?"", 'comment_created': datetime.datetime(2020, 7, 20, 14, 38, 9, tzinfo=datetime.timezone.utc), 'commenter': '1Jo1', 'type': 'User'}, {'comment_id': 457448723, 'comment_body': 'liburing ', 'comment_created': datetime.datetime(2020, 7, 20, 14, 39, 41, tzinfo=datetime.timezone.utc), 'commenter': '1Jo1', 'type': 'User'}, {'comment_id': 457467631, 'comment_body': 'the idea is throw it in `submissionQueue.add` for example if the submissionQueue is full', 'comment_created': datetime.datetime(2020, 7, 20, 14, 59, 57, tzinfo=datetime.timezone.utc), 'commenter': '1Jo1', 'type': 'User'}, {'comment_id': 457471456, 'comment_body': 'I think throwing an exception is fine. The `netty_unix_errors_throwIOExceptionErrorNo` function can help with that.', 'comment_created': datetime.datetime(2020, 7, 20, 15, 4, 6, tzinfo=datetime.timezone.utc), 'commenter': 'chrisvest', 'type': 'User'}, {'comment_id': 457585498, 'comment_body': '@normanmaurer yeah I thought it would be useful later,  `javaSocket` is required for DefaultSocketChannelConfig, but I dont know how to convert an `linuxSocket` into `javaSocket`', 'comment_created': datetime.datetime(2020, 7, 20, 17, 46, 54, tzinfo=datetime.timezone.utc), 'commenter': '1Jo1', 'type': 'User'}, {'comment_id': 457588780, 'comment_body': 'same here, javaSocket required..', 'comment_created': datetime.datetime(2020, 7, 20, 17, 52, 34, tzinfo=datetime.timezone.utc), 'commenter': '1Jo1', 'type': 'User'}, {'comment_id': 457616110, 'comment_body': ""@normanmaurer yeah the problem is  I cant read the next `ByteBuf` because I must first remove the bytes in ChannelOutboundBuffer\r\nI need to map that somehow in EventLoop, I'll think about it tomorrow, to keep it simple I thought one write should be enough "", 'comment_created': datetime.datetime(2020, 7, 20, 18, 41, 47, tzinfo=datetime.timezone.utc), 'commenter': '1Jo1', 'type': 'User'}, {'comment_id': 457703562, 'comment_body': 'Should be `iouring` instead of `uring` in my opinion.', 'comment_created': datetime.datetime(2020, 7, 20, 21, 31, 21, tzinfo=datetime.timezone.utc), 'commenter': 'hyperxpro', 'type': 'User'}, {'comment_id': 457704725, 'comment_body': 'All `System.out.println(Object)` should be removed.', 'comment_created': datetime.datetime(2020, 7, 20, 21, 34, 7, tzinfo=datetime.timezone.utc), 'commenter': 'hyperxpro', 'type': 'User'}, {'comment_id': 457708333, 'comment_body': "" it's only temporary, it is easier to debug"", 'comment_created': datetime.datetime(2020, 7, 20, 21, 42, 36, tzinfo=datetime.timezone.utc), 'commenter': '1Jo1', 'type': 'User'}, {'comment_id': 457708778, 'comment_body': 'Oh okay, makes sense.', 'comment_created': datetime.datetime(2020, 7, 20, 21, 43, 38, tzinfo=datetime.timezone.utc), 'commenter': 'hyperxpro', 'type': 'User'}, {'comment_id': 457723905, 'comment_body': ""@normanmaurer it's temporary, I don't quite understand how that works with the wakeups in the eventloop"", 'comment_created': datetime.datetime(2020, 7, 20, 22, 19, 31, tzinfo=datetime.timezone.utc), 'commenter': '1Jo1', 'type': 'User'}, {'comment_id': 458428146, 'comment_body': '@normanmaurer  yeah it would be easier to read, but we need boolean for no error because of unmap:\r\n```\r\nerr:\r\n     io_uring_unmap_rings(sq, cq);\r\n     return ret;\r\n```', 'comment_created': datetime.datetime(2020, 7, 21, 22, 35, 8, tzinfo=datetime.timezone.utc), 'commenter': '1Jo1', 'type': 'User'}, {'comment_id': 458436323, 'comment_body': 'no boolean is required :relaxed:\r\n```\r\n\tcq->khead = cq->ring_ptr + p->cq_off.head;\r\n\tcq->ktail = cq->ring_ptr + p->cq_off.tail;\r\n\tcq->kring_mask = cq->ring_ptr + p->cq_off.ring_mask;\r\n\tcq->kring_entries = cq->ring_ptr + p->cq_off.ring_entries;\r\n\tcq->koverflow = cq->ring_ptr + p->cq_off.overflow;\r\n\tcq->cqes = cq->ring_ptr + p->cq_off.cqes;\r\n\r\n\treturn 0;\r\nerr:\r\n\tio_uring_unmap_rings(sq, cq);\r\n\treturn ret;\r\n```', 'comment_created': datetime.datetime(2020, 7, 21, 22, 57, 48, tzinfo=datetime.timezone.utc), 'commenter': '1Jo1', 'type': 'User'}, {'comment_id': 458677266, 'comment_body': 'I thought it would be useful later', 'comment_created': datetime.datetime(2020, 7, 22, 9, 57, 1, tzinfo=datetime.timezone.utc), 'commenter': '1Jo1', 'type': 'User'}, {'comment_id': 458697050, 'comment_body': 'what do you mean exactly?', 'comment_created': datetime.datetime(2020, 7, 22, 10, 34, 12, tzinfo=datetime.timezone.utc), 'commenter': '1Jo1', 'type': 'User'}, {'comment_id': 458723858, 'comment_body': 'maybe we should use `io_uring` ', 'comment_created': datetime.datetime(2020, 7, 22, 11, 29, 20, tzinfo=datetime.timezone.utc), 'commenter': '1Jo1', 'type': 'User'}, {'comment_id': 458796714, 'comment_body': 'yeah I fixed that', 'comment_created': datetime.datetime(2020, 7, 22, 13, 36, 31, tzinfo=datetime.timezone.utc), 'commenter': '1Jo1', 'type': 'User'}, {'comment_id': 458848376, 'comment_body': 'These fence methods are not used anymore.', 'comment_created': datetime.datetime(2020, 7, 22, 14, 46, 3, tzinfo=datetime.timezone.utc), 'commenter': 'chrisvest', 'type': 'User'}, {'comment_id': 458850261, 'comment_body': ""Don't forget to end files on line breaks."", 'comment_created': datetime.datetime(2020, 7, 22, 14, 48, 24, tzinfo=datetime.timezone.utc), 'commenter': 'chrisvest', 'type': 'User'}, {'comment_id': 458851741, 'comment_body': '📌 ', 'comment_created': datetime.datetime(2020, 7, 22, 14, 50, 10, tzinfo=datetime.timezone.utc), 'commenter': 'chrisvest', 'type': 'User'}, {'comment_id': 459243955, 'comment_body': 'I\'ve been thinking about this `sleep` call a lot. It\'s been keeping me up at night. Ideally, a quiesced system should not have any CPU usage, and the way to achieve that is to deschedule threads until they have something to do. But here we are faced with the question of what to block on: we have both the `taskQueue`, which we need to process in order to submit CQEs to the kernel, and we have the completion queue, which we need to process in order for the rest of the system to make progress. In a single thread, we cannot wait for both, so the solution here is to wait for neither and instead poll at regular intervals and rely on sleep to avoid busy spinning. A system that relies on sleeping like this, will never quiesce, though.\r\n\r\nThere are two solutions that I can think of: 1) protect the submission queue with a lock, and move the CQE submissions and `io_uring_enter(fd, to_submit, 0, 0, 0)` to the task submitting threads, or 2) break the event loop into two threads, where one is responsible for submitting CQEs and waits on the `taskQueue`, and the other is responsible for processing completions and waits in `io_uring_enter(fd, 0, min_complete, IORING_ENTER_GETEVENTS, 0)`.\r\n\r\nThe second approach is awkward because the `SingleThreadedEventLoop` is supposed to just be one thread, and creating more using the user-supplied `Executor` or `ThreadFactory` might violate their assumptions and constraints. On the other hand, taking locks and doing system calls when submitting tasks can also be unexpected to client code, plus it\'s not really obvious how this is supposed to interact with the ""scheduled"" part of the `ScheduledExecutorService` API that event loops are required to implement.\r\n\r\nI\'m partial towards the second approach, and creating the completion thread with `new Thread`. The implications seem easier to understand and reason about. Some care needs to be taken around shutdown and exception handling, so we don\'t leave it dangling or loose it to an exception.', 'comment_created': datetime.datetime(2020, 7, 23, 6, 45, 6, tzinfo=datetime.timezone.utc), 'commenter': 'chrisvest', 'type': 'User'}, {'comment_id': 459253563, 'comment_body': ""I don't see a good existing method to get the address in a convenient format, so just add some JNI methods to allocate some direct byte buffers with this data. Then you can use `io.netty.channel.unix.Buffer.memoryAddress()` to get the pointers out that you need here."", 'comment_created': datetime.datetime(2020, 7, 23, 7, 10, 3, tzinfo=datetime.timezone.utc), 'commenter': 'chrisvest', 'type': 'User'}, {'comment_id': 459255102, 'comment_body': ""You can also store all of the relevant data on the `Event` object, and change `submissionQueue.add` to take the event object itself as a parameter.\r\n\r\nThen when the event loop needs to re-enqueue the ACCEPT comment, it just needs to set a new event id and send the same event object back. Then you'd get the address cached for free."", 'comment_created': datetime.datetime(2020, 7, 23, 7, 13, 47, tzinfo=datetime.timezone.utc), 'commenter': 'chrisvest', 'type': 'User'}, {'comment_id': 459720100, 'comment_body': ""yeah I would also prefer the second approach, it's probably rare that threads will have to wait for a lock, as we will use lock for each channel which means we move all `Channel` changes to taskQueue something like that `readOperation(Event event)` so we dont need a lock for the completion queue only for the submission queue and if the user write something( which is a EventLoop Thread but I'm not sure)"", 'comment_created': datetime.datetime(2020, 7, 23, 20, 50, 18, tzinfo=datetime.timezone.utc), 'commenter': '1Jo1', 'type': 'User'}, {'comment_id': 459722079, 'comment_body': 'I think ChannelPipeline is shared between the Channels, the this approach lock for each channel would not work...\r\nor is ChannelPipeLine thread safe?', 'comment_created': datetime.datetime(2020, 7, 23, 20, 54, 24, tzinfo=datetime.timezone.utc), 'commenter': '1Jo1', 'type': 'User'}, {'comment_id': 460052302, 'comment_body': 'Typo here', 'comment_created': datetime.datetime(2020, 7, 24, 13, 29, 29, tzinfo=datetime.timezone.utc), 'commenter': 'soasada', 'type': 'User'}, {'comment_id': 460395493, 'comment_body': ""I think the Unsafe naming isn't very explanatory. I would either name it \r\n- loadLoadFence; so you get [LoadLoad]\r\n- loadAcquireFence, so get [LoadLoad][LoadStore]\r\n\r\n\r\n"", 'comment_created': datetime.datetime(2020, 7, 25, 11, 26, 25, tzinfo=datetime.timezone.utc), 'commenter': 'pveentjer', 'type': 'User'}, {'comment_id': 460775193, 'comment_body': 'I don\'t think I understand what you mean by ""move all `Channel` changes to taskQueue"", or why the channels need to be locked.', 'comment_created': datetime.datetime(2020, 7, 27, 9, 49, 41, tzinfo=datetime.timezone.utc), 'commenter': 'chrisvest', 'type': 'User'}, {'comment_id': 461074111, 'comment_body': ""yeah good point, probably we dont need that anymore, currently we use getIntVolatile and putIntOrdered instead,\r\nI could add this as a comment so it's easier to understand 👍 "", 'comment_created': datetime.datetime(2020, 7, 27, 18, 7, 7, tzinfo=datetime.timezone.utc), 'commenter': '1Jo1', 'type': 'User'}, {'comment_id': 461147505, 'comment_body': '@chrisvest My approach would be that the completionQueue thread(io_uring_enter) get the event object via Hashmap which is then added to the `taskQueue`\r\nFor example(pseudo code):\r\n```\r\n        public Runnable readEvent(final Event event) {\r\n            final int test = 2233;\r\n            final Runnable readRunnable = new Runnable() {\r\n\r\n                @Override\r\n                public void run() {\r\n\r\n                    ByteBuf byteBuf = event.getReadBuffer();\r\n                    int localReadAmount = event.getRes();\r\n                    if (localReadAmount > 0) {\r\n                        byteBuf.writerIndex(byteBuf.writerIndex() + localReadAmount);\r\n                    }\r\n\r\n                    final IOUringRecvByteAllocatorHandle allocHandle =\r\n                            (IOUringRecvByteAllocatorHandle) event.getAbstractIOUringChannel().unsafe()\r\n                                                                  .recvBufAllocHandle();\r\n                    final ChannelPipeline pipeline = event.getAbstractIOUringChannel().pipeline();\r\n\r\n                    allocHandle.lastBytesRead(localReadAmount);\r\n                    if (allocHandle.lastBytesRead() <= 0) {\r\n                        // nothing was read, release the buffer.\r\n                        byteBuf.release();\r\n                        byteBuf = null;\r\n                        break;\r\n                    }\r\n\r\n                    allocHandle.incMessagesRead(1);\r\n                    //readPending = false;\r\n                    pipeline.fireChannelRead(byteBuf);\r\n                }\r\n            };\r\n\r\n\r\n            return readRunnable;\r\n        }\r\n```\r\nI think we dont need a lock for the read and accept event because only one thread submission queue will modify the channel data\r\nhttps://github.com/1Jo1/netty/blob/io-uring/transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringEventLoop.java#L156\r\nhttps://github.com/1Jo1/netty/blob/io-uring/transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringSocketChannel.java#L60\r\n  \r\nBut the user and the submission queue thread will modify the same `ChannelOutboundBuffer` instance so we need a lock the for the write event\r\nhttps://github.com/1Jo1/netty/blob/io-uring/transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringEventLoop.java#L171\r\nhttps://github.com/1Jo1/netty/blob/io-uring/transport-native-io_uring/src/main/java/io/netty/channel/uring/AbstractIOUringChannel.java#L173\r\ndoes that make sense?\r\n', 'comment_created': datetime.datetime(2020, 7, 27, 20, 23, 52, tzinfo=datetime.timezone.utc), 'commenter': '1Jo1', 'type': 'User'}, {'comment_id': 461342400, 'comment_body': 'nit: please move to other `transport-native-*` declarations ', 'comment_created': datetime.datetime(2020, 7, 28, 6, 15, 51, tzinfo=datetime.timezone.utc), 'commenter': 'normanmaurer', 'type': 'User'}, {'comment_id': 461342728, 'comment_body': 'nit: please consider adding some ""docs"" to the structs to make it easier to understand the codebase later on ', 'comment_created': datetime.datetime(2020, 7, 28, 6, 16, 45, tzinfo=datetime.timezone.utc), 'commenter': 'normanmaurer', 'type': 'User'}, {'comment_id': 461343266, 'comment_body': 'nit: usually we prefer to use `== 1` or `!= 0` in branches. Consider doing so everywhere (there are multiple lines of code that are affected. ', 'comment_created': datetime.datetime(2020, 7, 28, 6, 18, 20, tzinfo=datetime.timezone.utc), 'commenter': 'normanmaurer', 'type': 'User'}, {'comment_id': 461343445, 'comment_body': 'nit: add `{...}` for the sake of readability. ', 'comment_created': datetime.datetime(2020, 7, 28, 6, 18, 48, tzinfo=datetime.timezone.utc), 'commenter': 'normanmaurer', 'type': 'User'}, {'comment_id': 461343564, 'comment_body': 'nit: add `{...}` for the sake of readability. ', 'comment_created': datetime.datetime(2020, 7, 28, 6, 19, 5, tzinfo=datetime.timezone.utc), 'commenter': 'normanmaurer', 'type': 'User'}, {'comment_id': 461343741, 'comment_body': 'nit: seems like you use 8 spaces for indention... we use 4. Please update all files ', 'comment_created': datetime.datetime(2020, 7, 28, 6, 19, 31, tzinfo=datetime.timezone.utc), 'commenter': 'normanmaurer', 'type': 'User'}, {'comment_id': 461344271, 'comment_body': 'I think you should either use a non void return value and return `-errno` here or put an exception on the stack so it will be thrown once we leave JNI land. ', 'comment_created': datetime.datetime(2020, 7, 28, 6, 20, 41, tzinfo=datetime.timezone.utc), 'commenter': 'normanmaurer', 'type': 'User'}, {'comment_id': 461345220, 'comment_body': 'nit: this needs some love to allow shading of netty. Please see how we do this in other JNI code in epoll. ', 'comment_created': datetime.datetime(2020, 7, 28, 6, 23, 8, tzinfo=datetime.timezone.utc), 'commenter': 'normanmaurer', 'type': 'User'}, {'comment_id': 461345523, 'comment_body': 'nit: add `CRLF` otherwise this will fail check-style ', 'comment_created': datetime.datetime(2020, 7, 28, 6, 23, 55, tzinfo=datetime.timezone.utc), 'commenter': 'normanmaurer', 'type': 'User'}, {'comment_id': 461345709, 'comment_body': 'Please add `CRLF` as otherwise this will fail check style', 'comment_created': datetime.datetime(2020, 7, 28, 6, 24, 30, tzinfo=datetime.timezone.utc), 'commenter': 'normanmaurer', 'type': 'User'}, {'comment_id': 461346373, 'comment_body': ""sorry I don't get what you are saying... To me it seems like if we don't have a memoryAddress we will never be able to make progress so we need to throw. If what you are saying is that this will never happen we should add at least an assert and add a comment. "", 'comment_created': datetime.datetime(2020, 7, 28, 6, 26, 14, tzinfo=datetime.timezone.utc), 'commenter': 'normanmaurer', 'type': 'User'}, {'comment_id': 461346491, 'comment_body': 'Same comment as above ', 'comment_created': datetime.datetime(2020, 7, 28, 6, 26, 32, tzinfo=datetime.timezone.utc), 'commenter': 'normanmaurer', 'type': 'User'}, {'comment_id': 461346573, 'comment_body': 'Any problems with that ?', 'comment_created': datetime.datetime(2020, 7, 28, 6, 26, 45, tzinfo=datetime.timezone.utc), 'commenter': 'normanmaurer', 'type': 'User'}, {'comment_id': 461346634, 'comment_body': 'nit: cleanup and remove ', 'comment_created': datetime.datetime(2020, 7, 28, 6, 26, 53, tzinfo=datetime.timezone.utc), 'commenter': 'normanmaurer', 'type': 'User'}, {'comment_id': 461346811, 'comment_body': 'nit: `new UnsupportedOperationException()`', 'comment_created': datetime.datetime(2020, 7, 28, 6, 27, 19, tzinfo=datetime.timezone.utc), 'commenter': 'normanmaurer', 'type': 'User'}, {'comment_id': 461346855, 'comment_body': 'nit: remove ', 'comment_created': datetime.datetime(2020, 7, 28, 6, 27, 26, tzinfo=datetime.timezone.utc), 'commenter': 'normanmaurer', 'type': 'User'}, {'comment_id': 461347278, 'comment_body': 'I would remove it for now if not needed. More code == more bugs ;)', 'comment_created': datetime.datetime(2020, 7, 28, 6, 28, 33, tzinfo=datetime.timezone.utc), 'commenter': 'normanmaurer', 'type': 'User'}, {'comment_id': 461347659, 'comment_body': 'nit: this definition is not needed and you can define it directly on assignment in the if block below. ', 'comment_created': datetime.datetime(2020, 7, 28, 6, 29, 29, tzinfo=datetime.timezone.utc), 'commenter': 'normanmaurer', 'type': 'User'}, {'comment_id': 461348628, 'comment_body': 'Why you need these overrides at all if they just delegate ?', 'comment_created': datetime.datetime(2020, 7, 28, 6, 31, 54, tzinfo=datetime.timezone.utc), 'commenter': 'normanmaurer', 'type': 'User'}, {'comment_id': 461348757, 'comment_body': 'Everything that returns `null` needs to be fixed. ', 'comment_created': datetime.datetime(2020, 7, 28, 6, 32, 12, tzinfo=datetime.timezone.utc), 'commenter': 'normanmaurer', 'type': 'User'}, {'comment_id': 461349046, 'comment_body': 'why we need this class if it basically just offer the same as `Socket` ?', 'comment_created': datetime.datetime(2020, 7, 28, 6, 32, 54, tzinfo=datetime.timezone.utc), 'commenter': 'normanmaurer', 'type': 'User'}, {'comment_id': 461577926, 'comment_body': ""Okay, right… I'm not sure how that `ChannelOutboundBuffer` is normally handled, but it looks like a single-threaded object. It sounds correct, then, to move the completion processing back onto the task queue like you describe. Looks like epoll, kqueue, and NIO, avoid the lock by using blocking writes, if I'm reading it correctly."", 'comment_created': datetime.datetime(2020, 7, 28, 13, 27, 6, tzinfo=datetime.timezone.utc), 'commenter': 'chrisvest', 'type': 'User'}, {'comment_id': 461672814, 'comment_body': ""@chrisvest yeah exactly :) I'm not sure which approach is more efficient: avoid the lock by using blocking writes or use a lock?"", 'comment_created': datetime.datetime(2020, 7, 28, 15, 29, 1, tzinfo=datetime.timezone.utc), 'commenter': '1Jo1', 'type': 'User'}, {'comment_id': 461675442, 'comment_body': ""I guess it's easier to implement the `avoid the lock` approach"", 'comment_created': datetime.datetime(2020, 7, 28, 15, 32, 41, tzinfo=datetime.timezone.utc), 'commenter': '1Jo1', 'type': 'User'}, {'comment_id': 461701264, 'comment_body': 'there are two related problems\r\n`io_uring_enter` can return https://www.mankier.com/2/io_uring_enter#EBUSY but we can avoid if we keep track of events and use kernel mask which means that https://github.com/1Jo1/netty/blob/io-uring/transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringSubmissionQueue.java#L81\r\nit is possible that existing events which are not executed are overwritten', 'comment_created': datetime.datetime(2020, 7, 28, 16, 9, 29, tzinfo=datetime.timezone.utc), 'commenter': '1Jo1', 'type': 'User'}, {'comment_id': 461703483, 'comment_body': 'oh yeah good point, we should add assert & comment for the memoryAddress', 'comment_created': datetime.datetime(2020, 7, 28, 16, 12, 47, tzinfo=datetime.timezone.utc), 'commenter': '1Jo1', 'type': 'User'}, {'comment_id': 461705540, 'comment_body': 'same comment as above :) javaSocket required...', 'comment_created': datetime.datetime(2020, 7, 28, 16, 15, 53, tzinfo=datetime.timezone.utc), 'commenter': '1Jo1', 'type': 'User'}, {'comment_id': 461712999, 'comment_body': 'oh yeah good point but remoteAddress and localAddress are required ', 'comment_created': datetime.datetime(2020, 7, 28, 16, 27, 5, tzinfo=datetime.timezone.utc), 'commenter': '1Jo1', 'type': 'User'}, {'comment_id': 461772553, 'comment_body': ""no I just checked it in IntelliJ, it's four spaces, but it looks like more than 4 spaces in Github..that's weird"", 'comment_created': datetime.datetime(2020, 7, 28, 18, 4, 28, tzinfo=datetime.timezone.utc), 'commenter': '1Jo1', 'type': 'User'}, {'comment_id': 461868805, 'comment_body': 'no I just fixed that ', 'comment_created': datetime.datetime(2020, 7, 28, 20, 47, 29, tzinfo=datetime.timezone.utc), 'commenter': '1Jo1', 'type': 'User'}, {'comment_id': 461878084, 'comment_body': 'Can we have IP_TRANSPARENT and other options from Epoll?', 'comment_created': datetime.datetime(2020, 7, 28, 21, 4, 26, tzinfo=datetime.timezone.utc), 'commenter': 'hyperxpro', 'type': 'User'}, {'comment_id': 462260763, 'comment_body': ""I'm not able to recreate the problem on my end. Are you sure the first process had really been terminated?\r\n`SO_REUSEADDR` sounds like something that should be explicitly opted into by the integrator code."", 'comment_created': datetime.datetime(2020, 7, 29, 12, 29, 52, tzinfo=datetime.timezone.utc), 'commenter': 'chrisvest', 'type': 'User'}, {'comment_id': 462306944, 'comment_body': ""that's strange.. I'm sure the first process had been terminated, I think the reason the server file descriptor is not closed after the termination https://docs.fedoraproject.org/en-US/Fedora_Security_Team/1/html/Defensive_Coding/sect-Defensive_Coding-Tasks-Descriptors-Child_Processes.html\r\nin epoll we do not close server file descriptor when sending SIGTERM\r\nI just saw that SO_REUSEADDR is set here https://github.com/netty/netty/blob/4.1/transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollServerSocketChannelConfig.java#L39"", 'comment_created': datetime.datetime(2020, 7, 29, 13, 41, 18, tzinfo=datetime.timezone.utc), 'commenter': '1Jo1', 'type': 'User'}, {'comment_id': 462340353, 'comment_body': 'are you sure that\'s right HEAD commit? https://github.com/1Jo1/netty/commit/97b4537ab1e3bbb62f59802b18808fa48b38ad27  I just testet it again and I\'m able to do it\r\nLog Message:\r\n`Exception in thread ""main"" io.netty.channel.unix.Errors$NativeIoException: bind(..) failed: Address already in use`\r\n`EventLoop Accept Res: -9`', 'comment_created': datetime.datetime(2020, 7, 29, 14, 25, 12, tzinfo=datetime.timezone.utc), 'commenter': '1Jo1', 'type': 'User'}, {'comment_id': 462400403, 'comment_body': ""I tested 8c9b874a2d40a894e9ab7a57eb85e9d3a5027c52 (first running prototype). When I comment out the reuse port on the HEAD commit, then I also get `Address already in use`. It's not really obvious which change introduced the failure, in between those two commits."", 'comment_created': datetime.datetime(2020, 7, 29, 15, 45, 11, tzinfo=datetime.timezone.utc), 'commenter': 'chrisvest', 'type': 'User'}, {'comment_id': 462424721, 'comment_body': 'ah okay the error occurred when I used socket non blocking as far as I know https://github.com/netty/netty/commit/97b4537ab1e3bbb62f59802b18808fa48b38ad27\r\nhttps://github.com/netty/netty/blob/97b4537ab1e3bbb62f59802b18808fa48b38ad27/transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringSubmissionQueue.java#L105', 'comment_created': datetime.datetime(2020, 7, 29, 16, 20, 23, tzinfo=datetime.timezone.utc), 'commenter': '1Jo1', 'type': 'User'}, {'comment_id': 462434549, 'comment_body': 'interesting, i got the same error in epoll when i removed that\r\nhttps://github.com/netty/netty/blob/4.1/transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollServerSocketChannelConfig.java#L39', 'comment_created': datetime.datetime(2020, 7, 29, 16, 35, 58, tzinfo=datetime.timezone.utc), 'commenter': '1Jo1', 'type': 'User'}, {'comment_id': 463380803, 'comment_body': 'sorry I dont get it', 'comment_created': datetime.datetime(2020, 7, 31, 3, 1, 13, tzinfo=datetime.timezone.utc), 'commenter': '1Jo1', 'type': 'User'}, {'comment_id': 463612450, 'comment_body': ""@1Jo1 Okay, in that case I think it's fine to just follow the precedent set by epoll."", 'comment_created': datetime.datetime(2020, 7, 31, 13, 31, 53, tzinfo=datetime.timezone.utc), 'commenter': 'chrisvest', 'type': 'User'}, {'comment_id': 463930874, 'comment_body': 'https://github.com/netty/netty/blob/4.1/transport-native-epoll/src/main/c/netty_epoll_linuxsocket.c#L713', 'comment_created': datetime.datetime(2020, 8, 1, 6, 41, 10, tzinfo=datetime.timezone.utc), 'commenter': 'johnou', 'type': 'User'}, {'comment_id': 465510657, 'comment_body': ""I see 2 problems here (I'm sure you see them as well)\r\n\r\n1: litter\r\n2: data copying\r\n\r\nThe litter part can easily be resolved; but the data copying part is a bit harder.  Perhaps it is better to drop the object completely and expose the index into the CQE-array and have a bunch of utility methods that read the fields on the returned CQE array index?\r\n\r\nThis way you don't get litter and don't get data copying.  But.. you get some more complex addressing logic.. "", 'comment_created': datetime.datetime(2020, 8, 5, 6, 51, 16, tzinfo=datetime.timezone.utc), 'commenter': 'pveentjer', 'type': 'User'}, {'comment_id': 465511409, 'comment_body': 'Perhaps drop the IOUring prefix? It makes the code more verbose to read', 'comment_created': datetime.datetime(2020, 8, 5, 6, 52, 50, tzinfo=datetime.timezone.utc), 'commenter': 'pveentjer', 'type': 'User'}, {'comment_id': 465522004, 'comment_body': ""yeah uring is already in the package and it's not shared."", 'comment_created': datetime.datetime(2020, 8, 5, 7, 16, 5, tzinfo=datetime.timezone.utc), 'commenter': 'johnou', 'type': 'User'}, {'comment_id': 465544089, 'comment_body': ""yeah I'm aware of this litter problem, the same for other classes like `Event`\r\nto expose the index into CQE-array is actually a good idea 👍 \r\nI don't think I understand what you mean by 'copying data problem', why is the copying of primitive data types a performance issue? we would still copying data in utility methods right?"", 'comment_created': datetime.datetime(2020, 8, 5, 7, 58, 29, tzinfo=datetime.timezone.utc), 'commenter': '1Jo1', 'type': 'User'}, {'comment_id': 465565113, 'comment_body': ""If you would use an intermediate Java object to get data from the completion queue entries to the 'caller'. \r\n\r\nThen you go from c record -> java member fields -> caller. \r\n\r\nSo you have an intermediate copy of the data and this is one of the things io_uring tries to prevent if I understand the design correctly. Per entry, this would be 64 bytes of wasted memory bandwidth.\r\n\r\nSo what you, in theory, could do is to have a CQE without any field apart from an 'address' where the data of the c-record can be found. So something like this.\r\n```\r\npublic final class IOUringCqe {\r\n   long cqe;   \r\n\r\n    public long getEventId() {\r\n        return PlatformDependent.getLong(cqe + CQE_USER_DATA_FIELD);\r\n    }\r\n```\r\nThis way you can still offer an idomatic Java API without having the extra data copy.\r\n\r\nAnd to fix the litter problem; you could leave it up to the caller to pass an object to fill. Example:\r\n```\r\n public IOUringCqe peek(IOUringCqe entry) {\r\n    long head = toUnsignedLong(PlatformDependent.getIntVolatile(kHeadAddress));\r\n\r\n    if (head != toUnsignedLong(PlatformDependent.getInt(kTailAddress))) {\r\n        long index = head & toUnsignedLong(PlatformDependent.getInt(kringMaskAddress));\r\n        long cqe = index * CQE_SIZE + completionQueueArrayAddress;\r\n        entry.cqe = cqe;\r\n        //Ensure that the kernel only sees the new value of the head index after the CQEs have been read.\r\n        PlatformDependent.putIntOrdered(kHeadAddress, (int) (head + 1));\r\n        return entry;\r\n    }\r\n    return null;\r\n  }\r\n```\r\n\r\nI'm sure I have introduced bugs here, but I hope you get the idea. \r\n\r\nSo the caller needs to make sure it pools a IOUringCqe entry."", 'comment_created': datetime.datetime(2020, 8, 5, 8, 35, 10, tzinfo=datetime.timezone.utc), 'commenter': 'pveentjer', 'type': 'User'}, {'comment_id': 465573386, 'comment_body': ""Another approach:\r\n\r\n```\r\npublic final class IOUringCqeAccessor {\r\n \r\n    public static getEventId(long cqe) {\r\n       return PlatformDependent.getLong(cqe + CQE_USER_DATA_FIELD);\r\n    }\r\n\r\n    public static int getRes(long cqe {\r\n       return PlatformDependent.getInt(cqe + CQE_RES_FIELD);\r\n    }\r\n\r\n    public long getFlags(long cqe) {\r\n       return  toUnsignedLong(PlatformDependent.getInt(cqe + CQE_FLAGS_FIELD));\r\n    }\r\n}\r\n```\r\n\r\nSo the peek returns the 'long' cqe. And then this accessor can be used to access the content.\r\n\r\nThis way you also don't get litter and no unwanted data copying."", 'comment_created': datetime.datetime(2020, 8, 5, 8, 49, 33, tzinfo=datetime.timezone.utc), 'commenter': 'pveentjer', 'type': 'User'}, {'comment_id': 465637526, 'comment_body': 'We can rename package `io.netty.channel.uring` to `io.netty.channel.iouring` and drop all IOUring prefix for internal classes.', 'comment_created': datetime.datetime(2020, 8, 5, 10, 47, 26, tzinfo=datetime.timezone.utc), 'commenter': 'hyperxpro', 'type': 'User'}, {'comment_id': 466824383, 'comment_body': ""I would prefer the first approach 👍 \r\n\r\n> So you have an intermediate copy of the data and this is one of the things io_uring tries to prevent if I understand the design correctly.\r\n\r\nthat's true, but these buffers for read/write operation are significantly larger (for example in netty 500 Bytes) than some integer/long variables\r\n\r\n> Per entry, this would be 64 bytes of wasted memory bandwidth.\r\n\r\nno the wasted stack memory bandwidth would be: int + long + long = 20 Bytes\r\n"", 'comment_created': datetime.datetime(2020, 8, 7, 5, 12, 25, tzinfo=datetime.timezone.utc), 'commenter': '1Jo1', 'type': 'User'}, {'comment_id': 466826887, 'comment_body': ""@hyperxpro good idea, let's do that 👍 what about public classes? :)  "", 'comment_created': datetime.datetime(2020, 8, 7, 5, 22, 10, tzinfo=datetime.timezone.utc), 'commenter': '1Jo1', 'type': 'User'}, {'comment_id': 466888328, 'comment_body': 'We can keep `IOUring` prefix in public classes such as `IOUringEventLoopGroup`.', 'comment_created': datetime.datetime(2020, 8, 7, 8, 6, 46, tzinfo=datetime.timezone.utc), 'commenter': 'hyperxpro', 'type': 'User'}, {'comment_id': 467311412, 'comment_body': 'If we keep `eventfd` maybe some of the methods common with epoll could be moved to `transport-native-unix-common`', 'comment_created': datetime.datetime(2020, 8, 7, 22, 24, 32, tzinfo=datetime.timezone.utc), 'commenter': 'njhill', 'type': 'User'}, {'comment_id': 467311834, 'comment_body': 'nit: some inconsistency in function names `eventFd` / `event_fd`', 'comment_created': datetime.datetime(2020, 8, 7, 22, 26, 2, tzinfo=datetime.timezone.utc), 'commenter': 'njhill', 'type': 'User'}, {'comment_id': 467317912, 'comment_body': 'or preferable imo would be `IoUring`', 'comment_created': datetime.datetime(2020, 8, 7, 22, 50, 28, tzinfo=datetime.timezone.utc), 'commenter': 'njhill', 'type': 'User'}, {'comment_id': 467487969, 'comment_body': 'If the ~CQE~ SQE array is zeroed upfront then can avoid writes of the never-used fields here (like ioprio, padding, ...)', 'comment_created': datetime.datetime(2020, 8, 8, 17, 47, 56, tzinfo=datetime.timezone.utc), 'commenter': 'njhill', 'type': 'User'}, {'comment_id': 467646039, 'comment_body': 'I wonder if we could simplify and do without the `Event` class, `eventIdCounter` and `events` map?\r\n\r\nEach channel will have at most one in-flight operation in each direction, so how about for the userdata just use the fd itself plus some simple flag(s) to indicate the operation type? (64 bits is plenty) Likewise there will be at most one outstanding timer op for the ring, so a constant could be used for that.', 'comment_created': datetime.datetime(2020, 8, 10, 0, 6, 46, tzinfo=datetime.timezone.utc), 'commenter': 'njhill', 'type': 'User'}, {'comment_id': 467646462, 'comment_body': 'Would it be more accurate to call this `Entry` (as in SQE) or `Operation` since the ""events"" are really just the completions I think?', 'comment_created': datetime.datetime(2020, 8, 10, 0, 10, 45, tzinfo=datetime.timezone.utc), 'commenter': 'njhill', 'type': 'User'}, {'comment_id': 467646589, 'comment_body': 'Similarly how about `OpType`?', 'comment_created': datetime.datetime(2020, 8, 10, 0, 12, 4, tzinfo=datetime.timezone.utc), 'commenter': 'njhill', 'type': 'User'}, {'comment_id': 467666713, 'comment_body': ""I guess this part is probably still WIP but noticed a few things:\r\n- Absolute time (deadline) is currently being specified as relative. Need to either convert to relative, or what would be even nicer is to keep everything absolute so the conversions aren't needed every time (I guess we would align our nanotime clock up-front in that case)\r\n- You are currently setting `off` in the SQE to 0 so _any_ event will trigger its completion meaning it will need to be resubmitted every time, not only after the timeout has elapsed. Instead of this, maybe we could set it to some number larger than the CQ size?\r\n- Since it could be used so often I wonder if it would make sense to reserve an SQ array slot for the timeout op? Then each time it's used only the time value would need to be set, and a constant index would be added to the CQ ring. Wdyt?"", 'comment_created': datetime.datetime(2020, 8, 10, 2, 47, 58, tzinfo=datetime.timezone.utc), 'commenter': 'njhill', 'type': 'User'}, {'comment_id': 467667086, 'comment_body': 'Event processing would go below this try/finally... the `finally` block is intended to be the first thing done after waking up from a the blocking wait', 'comment_created': datetime.datetime(2020, 8, 10, 2, 50, 34, tzinfo=datetime.timezone.utc), 'commenter': 'njhill', 'type': 'User'}, {'comment_id': 467998044, 'comment_body': 'Does the `-EAGAIN` bug you mentioned (with [this](https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?h=v5.8&id=e697deed834de15d2322d0619d51893022c90ea2) fix) apply to READ as well as ACCEPT? If not we may want to avoid the linking for READ if the goal is still to support pre-5.7 kernels since my understanding is that there will be significant overhead from the async offload', 'comment_created': datetime.datetime(2020, 8, 10, 15, 39, 59, tzinfo=datetime.timezone.utc), 'commenter': 'njhill', 'type': 'User'}, {'comment_id': 468009354, 'comment_body': ""I was assuming we probably won't want to submit reads and writes immediately and instead defer to the event loop run method, where it will happen in batch either the next time we're ready to block-wait or maybe have some time/iteration threshold after which a non-blocking submission is made even if there's still remaining tasks. i.e. `ioUringEnter` would _only_ be called from `IOUringEventLoop#run`. The motivation of course is to minimize syscalls. WDYT?"", 'comment_created': datetime.datetime(2020, 8, 10, 15, 55, 24, tzinfo=datetime.timezone.utc), 'commenter': 'njhill', 'type': 'User'}, {'comment_id': 468009701, 'comment_body': 'Same comment as above about deferring submissions.', 'comment_created': datetime.datetime(2020, 8, 10, 15, 55, 59, tzinfo=datetime.timezone.utc), 'commenter': 'njhill', 'type': 'User'}, {'comment_id': 468019887, 'comment_body': ""For non-blocking case do we need to `POLLOUT` here on `-EAGAIN` if we aren't assuming FAST_POLL capability?"", 'comment_created': datetime.datetime(2020, 8, 10, 16, 12, 26, tzinfo=datetime.timezone.utc), 'commenter': 'njhill', 'type': 'User'}, {'comment_id': 468517958, 'comment_body': ""I think you mean SQE right? I don't think the kernel reset all fields to zero, because liburing does the same thing, https://github.com/axboe/liburing/blob/master/src/include/liburing.h#L197 any idea how do that more efficient? "", 'comment_created': datetime.datetime(2020, 8, 11, 11, 43, 52, tzinfo=datetime.timezone.utc), 'commenter': '1Jo1', 'type': 'User'}, {'comment_id': 468580901, 'comment_body': 'I think all sqe entries gonna be reuse, the user application is responsible for that as far as I know', 'comment_created': datetime.datetime(2020, 8, 11, 13, 31, 44, tzinfo=datetime.timezone.utc), 'commenter': '1Jo1', 'type': 'User'}, {'comment_id': 468584874, 'comment_body': ""oh yeah good point 👍 it could work, I'll think about that"", 'comment_created': datetime.datetime(2020, 8, 11, 13, 37, 29, tzinfo=datetime.timezone.utc), 'commenter': '1Jo1', 'type': 'User'}, {'comment_id': 468585617, 'comment_body': 'yeah `Entry` sounds good 👍 ', 'comment_created': datetime.datetime(2020, 8, 11, 13, 38, 32, tzinfo=datetime.timezone.utc), 'commenter': '1Jo1', 'type': 'User'}, {'comment_id': 468587231, 'comment_body': 'yeah it sounds better', 'comment_created': datetime.datetime(2020, 8, 11, 13, 40, 49, tzinfo=datetime.timezone.utc), 'commenter': '1Jo1', 'type': 'User'}, {'comment_id': 468591242, 'comment_body': 'good point, I already mentioned that here https://github.com/netty/netty/pull/10356#issuecomment-671840722\r\nioUringWait does not need to block, I first check whether I find an entry in the SQE', 'comment_created': datetime.datetime(2020, 8, 11, 13, 46, 22, tzinfo=datetime.timezone.utc), 'commenter': '1Jo1', 'type': 'User'}, {'comment_id': 468631567, 'comment_body': ""Sorry yes meant SQE. Right, IIUC app owns the whole SQE array and reuse strategy for the entries, kernel never writes to it. So we can zero the whole thing up-front and after than don't need to touch fields that we know for our purposes will never be anything but 0 (like the padding). I'm guessing liburing zeros every time since it's more general purpose, it doesn't know that the app will never use certain fields. Not sure why even the padding is zero'd every time but maybe just because it doesn't know for sure what the app is doing with the mem between uses. Or I could still be missing something... :)"", 'comment_created': datetime.datetime(2020, 8, 11, 14, 37, 5, tzinfo=datetime.timezone.utc), 'commenter': 'njhill', 'type': 'User'}, {'comment_id': 468640346, 'comment_body': 'Right, in my response to that comment I was about to point back to this one to say we are thinking along the same lines :) will put other thoughts there.', 'comment_created': datetime.datetime(2020, 8, 11, 14, 48, 53, tzinfo=datetime.timezone.utc), 'commenter': 'njhill', 'type': 'User'}, {'comment_id': 470050583, 'comment_body': 'yeah we need to poll ~~READ~~ and ACCEPT operation, yeah the basic idea was application to check if there any data here, according to this commit [IORING_FEAT_FAST_POLL](https://git.kernel.dk/cgit/linux-block/commit/?h=for-5.7/io_uring&id=d7718a9d25a61442da8ee8aeeff6a0097f0ccfd6) `""that poll<link>other_op is fast as well""` which means dont have overhead from async offload, but we still get the POLL event in CQE, it would be quite handy to have this feature `IGNORE_CQE`', 'comment_created': datetime.datetime(2020, 8, 13, 15, 47, 43, tzinfo=datetime.timezone.utc), 'commenter': '1Jo1', 'type': 'User'}, {'comment_id': 470058719, 'comment_body': '`POLLOUT` it is already planned, is your idea to POLLOUT before WRITEV(link) event?', 'comment_created': datetime.datetime(2020, 8, 13, 16, 0, 10, tzinfo=datetime.timezone.utc), 'commenter': '1Jo1', 'type': 'User'}, {'comment_id': 470090347, 'comment_body': ""If initial target is 5.7 then IIUC the kernel handles with FAST_POLL and so it's a non-issue. My comment above was w.r.t to pre-5.7 case"", 'comment_created': datetime.datetime(2020, 8, 13, 16, 52, 23, tzinfo=datetime.timezone.utc), 'commenter': 'njhill', 'type': 'User'}, {'comment_id': 470626063, 'comment_body': ""IOURING_SETUP_SQPOLL is priviledged, so let's not do anything that depends on it."", 'comment_created': datetime.datetime(2020, 8, 14, 13, 33, 35, tzinfo=datetime.timezone.utc), 'commenter': 'chrisvest', 'type': 'User'}, {'comment_id': 470630404, 'comment_body': ""For long-term robustness of the code, I think it's better to overwrite the entire SQE every time. It would be difficult to debug entries ever end up littered from prior uses."", 'comment_created': datetime.datetime(2020, 8, 14, 13, 41, 15, tzinfo=datetime.timezone.utc), 'commenter': 'chrisvest', 'type': 'User'}, {'comment_id': 470631548, 'comment_body': ""Let's capture a bit more information when this happens."", 'comment_created': datetime.datetime(2020, 8, 14, 13, 43, 25, tzinfo=datetime.timezone.utc), 'commenter': 'chrisvest', 'type': 'User'}, {'comment_id': 470638665, 'comment_body': 'I\'d flip this if-else around, so ""if event type is accept, then set flags, otherwise zero.""', 'comment_created': datetime.datetime(2020, 8, 14, 13, 55, 32, tzinfo=datetime.timezone.utc), 'commenter': 'chrisvest', 'type': 'User'}, {'comment_id': 470640175, 'comment_body': ""Let's remember to do something better than printing stack traces. There's a couple of places like this."", 'comment_created': datetime.datetime(2020, 8, 14, 13, 58, 6, tzinfo=datetime.timezone.utc), 'commenter': 'chrisvest', 'type': 'User'}, {'comment_id': 470691036, 'comment_body': ""I'm not really a fan of having EventType diverge from the native operations enum that defines the OP_ numbers. I'll try to explain more in the IOUringEventLoop."", 'comment_created': datetime.datetime(2020, 8, 14, 15, 21, 38, tzinfo=datetime.timezone.utc), 'commenter': 'chrisvest', 'type': 'User'}, {'comment_id': 470719266, 'comment_body': ""Looks like comments about the wake up and blocking behaviour is a bit all over the place, so I'll add more… here.\n\nYou created the `Native.ioUringRegisterEventFd` plumbing, but you are not using it anywhere.\nAs I read the `io_uring_register` documentation, the registered eventfd will be notified when there are completions ready to be processed.\n\nGiven this, the problem of having two separate things to block on for one thread, could then be solved by having the task queue also implement its blocking behaviour using eventfd, and then the io_uring and the task queue could both use the same eventfd.\nThe single event loop thread would never block on either directly - only on the eventfd.\n\nI think this would give us the blocking behaviour we want, and we would side-step the problem of getting CQEs from eventfd reads inside io_uring, there would be no need for enqueueing extra SQEs for the purpose of unblocking the io_uring - no timeouts, not eventfd reads - plus we'd avoid the bugs you found in that part of the kernel code (assuming I've correctly understood the nature of those bugs)."", 'comment_created': datetime.datetime(2020, 8, 14, 16, 10, 31, tzinfo=datetime.timezone.utc), 'commenter': 'chrisvest', 'type': 'User'}, {'comment_id': 470728618, 'comment_body': ""@njhill I agree but I would't zero the whole think up front (like padding) avoid more calls(putLong etc.) only the zero the field we dont use(like padding)\r\nor do you have any idea how to write zeroes only at once?"", 'comment_created': datetime.datetime(2020, 8, 14, 16, 28, 36, tzinfo=datetime.timezone.utc), 'commenter': '1Jo1', 'type': 'User'}, {'comment_id': 470734092, 'comment_body': ""@chrisvest I don't feel super strongly but can't really see how this would be fragile since it's the only place that SQEs are written and the fields that _are_ set are going to be overwritten every time? (and same applies to any fields that might be used in future which aren't now)"", 'comment_created': datetime.datetime(2020, 8, 14, 16, 39, 48, tzinfo=datetime.timezone.utc), 'commenter': 'njhill', 'type': 'User'}, {'comment_id': 470742638, 'comment_body': 'christ, you mean the whole square entry and not all square entries every time right?', 'comment_created': datetime.datetime(2020, 8, 14, 16, 56, 38, tzinfo=datetime.timezone.utc), 'commenter': '1Jo1', 'type': 'User'}, {'comment_id': 470749349, 'comment_body': 'I just realized I there may be some misunderstanding re what I was suggesting. By ""up front"" I mean zero the entire SQ array (all SQE slots) only once when the ring itself is first created (right after `io_uring_setup`). I\'m _not_ suggesting to zero each SQE slot each time it\'s used or to do any conditional setting of any fields.', 'comment_created': datetime.datetime(2020, 8, 14, 17, 10, 11, tzinfo=datetime.timezone.utc), 'commenter': 'njhill', 'type': 'User'}, {'comment_id': 470753766, 'comment_body': ""@chrisvest I'm not sure I'm understanding this right, I'm guessing the tasks queue executes eventfd.write when there is a new task added, right? just like in the wakeup method?\r\nhow do we deal with scheduled tasks without io_uring timeouts?"", 'comment_created': datetime.datetime(2020, 8, 14, 17, 18, 54, tzinfo=datetime.timezone.utc), 'commenter': '1Jo1', 'type': 'User'}, {'comment_id': 470771063, 'comment_body': ""@njhill we could use `memset` for that in JNI, I'm guessing it wouldn't make sense to zero each SQE slot each time, since the kernel reads the sqe entry which we submitted"", 'comment_created': datetime.datetime(2020, 8, 14, 17, 54, 49, tzinfo=datetime.timezone.utc), 'commenter': '1Jo1', 'type': 'User'}, {'comment_id': 470775902, 'comment_body': ""@chrisvest it's an interesting idea but if I'm wondering the same as @1Jo1 re scheduled wakeups. We would need to put the eventfd in an epoll along with a timerfd I think (as is done currently for epoll transport). I also think that this would entail a greater number of syscalls which is the primary thing we're trying to avoid. IIUC we would still need to make io_uring_enter calls to submit events, and would lose the advantage of combining this with the blocking.\r\n\r\nRelative to that, the cost/inconvenience of ignoring the occasional otherwise-redundant CQE seems insignificant. And as mentioned in other comments I think there's a way we can use io_uring timeout (with 0) for the wakeup without requiring expensive sync of the SQ. Then eventfd goes away altogether."", 'comment_created': datetime.datetime(2020, 8, 14, 18, 4, 59, tzinfo=datetime.timezone.utc), 'commenter': 'njhill', 'type': 'User'}, {'comment_id': 470947035, 'comment_body': ""I agree, it's not really good solution, even we remove `POLL_EVENTFD` we still need to distinguish between POLL_LINK(maybe we should change it to `POLL_READ`) to check when the socket is readable  and POLL_WRITE(is not exit yet) for writeable\r\nI'm not sure how do that, any idea how do that? maybe sub types?"", 'comment_created': datetime.datetime(2020, 8, 15, 6, 55, 50, tzinfo=datetime.timezone.utc), 'commenter': '1Jo1', 'type': 'User'}, {'comment_id': 471353712, 'comment_body': ""> I'm not sure I'm understanding this right, I'm guessing the tasks queue executes eventfd.write when there is a new task added, right? just like in the wakeup method?\r\n\r\nYes, that's what I had in mind.\r\n\r\n> how do we deal with scheduled tasks without io_uring timeouts?\r\n\r\nAh, right, timeouts make sense for scheduled tasks.\r\n\r\n> And as mentioned in other comments I think there's a way we can use io_uring timeout (with 0) for the wakeup without requiring expensive sync of the SQ. Then eventfd goes away altogether.\r\n\r\nI've read those comments, but I still don't understand how it's supposed to work. Does it include a way for the submission of tasks to unblock the event loop thread (how?), or will the thread poll the task queue periodically via timeout wakeups? Or is it spinning?"", 'comment_created': datetime.datetime(2020, 8, 17, 9, 25, 54, tzinfo=datetime.timezone.utc), 'commenter': 'chrisvest', 'type': 'User'}, {'comment_id': 471651990, 'comment_body': '@chrisvest the overall structure would remain similar to `EpollEventLoop`\'s. Before the event loop enters a blocking `io_uring_enter` call, it changes the `nextWakeupNanos` atomic long from `AWAKE` to a different value, before which task-submission wakeups can\'t occur (since they are blocked by a CAS of that value). At this point, whoever wins the CAS of `nextWakeupNanos` back to `AWAKE` ""owns"" the next position in the SQ.\r\n\r\nInstead of calling `eventfd_write`, the `wakeup` method will add a zero-timeout entry to the SQ (I propose having a dedicated ""constant"" SQE in the SQ array for this), increment the queue\'s head by 1 and call `io_uring_enter` with `to_submit=1` which will wake up the event loop currently blocked in its own `io_uring_enter`. Upon resuming, the EL will know whether it was woken by task submission thread based on whether the zero-timeout CQE is present. If not, it will also detect the race based on whether it wins its immediate CAS of `nextWakeupNanos` back to `AWAKE`.\r\n\r\nIn the first case it just skips over the next position in the SQ. In the second (race) case, some additional care is needed if the zero-timeout CQE has still not been seen at the point that the EL wants to submit new SQEs (i.e. the next time it calls io_uring_enter). I can think of some variations of how to handle this and not sure which is optimal overall performance-wise. One possibility is to have the waker thread\'s increment of the SQ head ptr be atomic, have the EL track the fact it\'s in this state (with simple flag) and for it to also perform atomic increments of the SQ head itself while it is. To make this safe the EL would actually first (over)write the same zero-timeout SQE index to the SQ to ensure that it\'s set. It shouldn\'t matter which order the kernel receives the corresponding submission calls, their `to_submit` values will add up to the correct value. WDYT?', 'comment_created': datetime.datetime(2020, 8, 17, 17, 36, 29, tzinfo=datetime.timezone.utc), 'commenter': 'njhill', 'type': 'User'}, {'comment_id': 471666173, 'comment_body': 'How about having this OpType enum match the real op constants and just use it when filling-in SQEs. Other more specific constants could be defined to distinguish between the kind of events we care about, and set those into a few of the bits of the userdata per [this](https://github.com/netty/netty/pull/10356#discussion_r467646039) related suggestion.', 'comment_created': datetime.datetime(2020, 8, 17, 18, 2, 30, tzinfo=datetime.timezone.utc), 'commenter': 'njhill', 'type': 'User'}, {'comment_id': 472052249, 'comment_body': ""@njhill I think this makes sense. Thanks for writing it up. I don't see anything obviously wrong with the waker atomically bumping the pointer, but I also haven't investigated it sufficiently to be confident that it's correct. Lock-free algorithms are extremely subtle. Overall I agree with this approach, and think it would be the best solution if we can make it work."", 'comment_created': datetime.datetime(2020, 8, 18, 9, 42, 37, tzinfo=datetime.timezone.utc), 'commenter': 'chrisvest', 'type': 'User'}, {'comment_id': 474046665, 'comment_body': '@njhill timeout wakeup lock free sounds interesting\r\n\r\n>  Before the event loop enters a blocking io_uring_enter call, it sets the nextWakeupNanos atomic long to AWAKE\r\n\r\nI guess you mean to set atomic long to NONE or scheduledTask nanoseconds right?  maybe I missed something', 'comment_created': datetime.datetime(2020, 8, 20, 14, 56, 4, tzinfo=datetime.timezone.utc), 'commenter': '1Jo1', 'type': 'User'}, {'comment_id': 474118424, 'comment_body': '@1Jo1 good catch, yes my mistake and sorry for the unnecessary confusion... will edit it (the second reference of `AWAKE` is intended of course... i.e. after wakeup)', 'comment_created': datetime.datetime(2020, 8, 20, 16, 36, 10, tzinfo=datetime.timezone.utc), 'commenter': 'njhill', 'type': 'User'}, {'comment_id': 474982670, 'comment_body': ""I expect we'll probably want to set `IORING_FEAT_NODROP`?"", 'comment_created': datetime.datetime(2020, 8, 21, 21, 43, 37, tzinfo=datetime.timezone.utc), 'commenter': 'njhill', 'type': 'User'}, {'comment_id': 475047252, 'comment_body': ""we don't need that, this feature is filled in by the kernel -> https://www.mankier.com/2/io_uring_setup#IORING_FEAT_NODROP, but we need to check at the beginning that IORING_FEAT_NODROP and other features exist or just a kernel version check\r\nwe should keep track how many events are in the sqe and. cqe to avoid a EBUSY(io_uring_enter)"", 'comment_created': datetime.datetime(2020, 8, 22, 5, 4, 38, tzinfo=datetime.timezone.utc), 'commenter': '1Jo1', 'type': 'User'}, {'comment_id': 475207899, 'comment_body': ""I'm not sure how do we get read byteBuf for the read event or just declare a readBuffer in channel? :) "", 'comment_created': datetime.datetime(2020, 8, 23, 11, 29, 47, tzinfo=datetime.timezone.utc), 'commenter': '1Jo1', 'type': 'User'}, {'comment_id': 475227789, 'comment_body': 'Yep exactly just have a field in the channel :+1:.', 'comment_created': datetime.datetime(2020, 8, 23, 14, 42, 43, tzinfo=datetime.timezone.utc), 'commenter': 'njhill', 'type': 'User'}, {'comment_id': 479684676, 'comment_body': 'Logger tracef and checking isTrace first', 'comment_created': datetime.datetime(2020, 8, 29, 20, 0, 2, tzinfo=datetime.timezone.utc), 'commenter': 'franz1981', 'type': 'User'}, {'comment_id': 482177888, 'comment_body': 'Maybe this is what you have in mind already but it maybe would be good to move some of this common functionality to `transport-native-unix-common` module', 'comment_created': datetime.datetime(2020, 9, 2, 15, 49, 39, tzinfo=datetime.timezone.utc), 'commenter': 'njhill', 'type': 'User'}, {'comment_id': 482181389, 'comment_body': ""Are you sure we need to use POLLOUT? I may not understand it completely but I thought the io_uring magic meant that it will handle this by itself. If that's correct, i'm not sure whether you can opt-out... the only reason for doing so that I can think of would be to release intermediate ByteBufs / complete intermediate promises slightly earlier..."", 'comment_created': datetime.datetime(2020, 9, 2, 15, 54, 26, tzinfo=datetime.timezone.utc), 'commenter': 'njhill', 'type': 'User'}, {'comment_id': 482183743, 'comment_body': ""If eventfd continues to be used for the wakeups, we may need to add similar logic as is in epoll which uses this flag to ensure it's not written to after being closed on channel shutdown."", 'comment_created': datetime.datetime(2020, 9, 2, 15, 57, 42, tzinfo=datetime.timezone.utc), 'commenter': 'njhill', 'type': 'User'}, {'comment_id': 482196989, 'comment_body': ""yep we should most likely consider this at some point... Let's get it working first :)"", 'comment_created': datetime.datetime(2020, 9, 2, 16, 18, 15, tzinfo=datetime.timezone.utc), 'commenter': 'normanmaurer', 'type': 'User'}, {'comment_id': 482197382, 'comment_body': 'Yes I think we still need this... Once all tests are passing (we are really close) we can reconsider.', 'comment_created': datetime.datetime(2020, 9, 2, 16, 18, 51, tzinfo=datetime.timezone.utc), 'commenter': 'normanmaurer', 'type': 'User'}, {'comment_id': 482197549, 'comment_body': 'good point... I think eventFd is the way to go', 'comment_created': datetime.datetime(2020, 9, 2, 16, 19, 7, tzinfo=datetime.timezone.utc), 'commenter': 'normanmaurer', 'type': 'User'}, {'comment_id': 482199350, 'comment_body': ':+1: I guess if you see it actually taking that code path with latest kernel then it probably proves me wrong anyhow :)', 'comment_created': datetime.datetime(2020, 9, 2, 16, 21, 53, tzinfo=datetime.timezone.utc), 'commenter': 'njhill', 'type': 'User'}, {'comment_id': 482727176, 'comment_body': 'io_uring doesnt handle POLLOUT as far as I know', 'comment_created': datetime.datetime(2020, 9, 3, 6, 14, 13, tzinfo=datetime.timezone.utc), 'commenter': '1Jo1', 'type': 'User'}, {'comment_id': 482728543, 'comment_body': 'here some more details https://lore.kernel.org/io-uring/f118a29d-1672-93f4-6ef9-4630feaa17ab@gmail.com/', 'comment_created': datetime.datetime(2020, 9, 3, 6, 18, 1, tzinfo=datetime.timezone.utc), 'commenter': '1Jo1', 'type': 'User'}, {'comment_id': 483088409, 'comment_body': ""Thanks @1Jo1 that's interesting/useful thread to read. Maybe this is a naive question but I wonder if it makes sense to use blocking sockets? It seems the FAST_POLL function kind of assumes that when applied to sockets."", 'comment_created': datetime.datetime(2020, 9, 3, 16, 0, 21, tzinfo=datetime.timezone.utc), 'commenter': 'njhill', 'type': 'User'}, {'comment_id': 483091881, 'comment_body': '@njhill there are multiple problems with using blocking sockets:\r\n - memory usage... If for example you have 1M connections you may end up with a lot of allocated memory that is ""sitting"" on read to complete. This just doesn\'t scale\r\n - this makes the whole ""fireChannelReadComplete()"" not work as we don\'t know when there is nothing left to read.. ', 'comment_created': datetime.datetime(2020, 9, 3, 16, 4, 53, tzinfo=datetime.timezone.utc), 'commenter': 'normanmaurer', 'type': 'User'}, {'comment_id': 483143465, 'comment_body': 'Thanks @normanmaurer, that makes sense. So is the related fix for the latest bug you found required for the tests to pass?\r\n\r\nI guess we could still later consider using poll<link>read in conjunction with fixed buffers (would need some interesting coordination with the bytebuf allocators though...)', 'comment_created': datetime.datetime(2020, 9, 3, 17, 30, 53, tzinfo=datetime.timezone.utc), 'commenter': 'njhill', 'type': 'User'}, {'comment_id': 483422530, 'comment_body': ""From what I can see in the doc, the default behaviour of `IORING_OP_TIMEOUT` is to also complete if any other event completes first, i.e. it won't persist across calls to io_uring_enter with GET_EVENTS.\r\n\r\nSo something might need to be tweaked, maybe just to pass a very large value for the `len` field which should make timeouts stick until expired or cancelled."", 'comment_created': datetime.datetime(2020, 9, 4, 6, 51, 31, tzinfo=datetime.timezone.utc), 'commenter': 'njhill', 'type': 'User'}]","[{'commit_sha': '07e2e23a7d1437a9ff17707a9cf14276de8c7e60', 'committer_username': '1Jo1', 'committer_name': 'Josef Grieb', 'committer_email': 'josef.grieb@gmail.com', 'commit_date': datetime.datetime(2014, 10, 3, 9, 46, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '187ec6dffdf4308f0b002fb10dbfcb5ff2b0f9b6', 'committer_username': '1Jo1', 'committer_name': 'Josef Grieb', 'committer_email': 'josef.grieb@gmail.com', 'commit_date': datetime.datetime(2014, 10, 3, 9, 46, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '962a3433caa473cc8e810ff47c60884126892070', 'committer_username': '1Jo1', 'committer_name': 'Josef Grieb', 'committer_email': 'josef.grieb@gmail.com', 'commit_date': datetime.datetime(2014, 10, 3, 9, 46, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '692238f6da4beb8e6698e214bfadc7d1135225d6', 'committer_username': '1Jo1', 'committer_name': 'Josef Grieb', 'committer_email': 'josef.grieb@gmail.com', 'commit_date': datetime.datetime(2014, 10, 3, 9, 46, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a56cd1959fd31b51cf807a10048bd8e60155346', 'committer_username': '1Jo1', 'committer_name': 'Josef Grieb', 'committer_email': 'josef.grieb@gmail.com', 'commit_date': datetime.datetime(2014, 10, 3, 9, 46, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '247e14a2b124fe967aa0c08dae0dc48eb0cb5a62', 'committer_username': '1Jo1', 'committer_name': 'Josef Grieb', 'committer_email': 'josef.grieb@gmail.com', 'commit_date': datetime.datetime(2014, 10, 3, 9, 46, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '339d5f15659aa4a131d06427961f1220eccad826', 'committer_username': '1Jo1', 'committer_name': 'Josef Grieb', 'committer_email': 'josef.grieb@gmail.com', 'commit_date': datetime.datetime(2014, 10, 3, 9, 46, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c9b874a2d40a894e9ab7a57eb85e9d3a5027c52', 'committer_username': '1Jo1', 'committer_name': 'Josef Grieb', 'committer_email': 'josef.grieb@gmail.com', 'commit_date': datetime.datetime(2014, 10, 3, 9, 46, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb1c8e49918c3bc075b8f4ab74e2ea20cdc8d794', 'committer_username': '1Jo1', 'committer_name': 'Josef Grieb', 'committer_email': 'josef.grieb@gmail.com', 'commit_date': datetime.datetime(2014, 10, 3, 9, 46, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97b4537ab1e3bbb62f59802b18808fa48b38ad27', 'committer_username': '1Jo1', 'committer_name': 'Josef Grieb', 'committer_email': 'josef.grieb@gmail.com', 'commit_date': datetime.datetime(2014, 10, 3, 9, 46, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df847591289a1bb7c25c7d915233038056d9205c', 'committer_username': '1Jo1', 'committer_name': 'Josef Grieb', 'committer_email': 'josef.grieb@gmail.com', 'commit_date': datetime.datetime(2014, 10, 3, 9, 46, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a29b8c5cb363b74b090299f5f33dba63411fbddb', 'committer_username': '1Jo1', 'committer_name': 'Josef Grieb', 'committer_email': 'josef.grieb@gmail.com', 'commit_date': datetime.datetime(2014, 10, 3, 9, 46, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3c28143a8689641460e2e5f44a01bae4caf1b39', 'committer_username': '1Jo1', 'committer_name': 'Josef Grieb', 'committer_email': 'josef.grieb@gmail.com', 'commit_date': datetime.datetime(2014, 10, 3, 9, 46, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc9ada411b86b12c26a6ef2a1f8d9688c3a3f50b', 'committer_username': '1Jo1', 'committer_name': 'Josef Grieb', 'committer_email': 'josef.grieb@gmail.com', 'commit_date': datetime.datetime(2014, 10, 3, 9, 46, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71c33eaec3db20c963ae2021dadcdaaadae0956e', 'committer_username': '1Jo1', 'committer_name': 'Josef Grieb', 'committer_email': 'josef.grieb@gmail.com', 'commit_date': datetime.datetime(2014, 10, 3, 9, 46, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf6a14effbf288975a9900225471f4ec2774af63', 'committer_username': '1Jo1', 'committer_name': 'Josef Grieb', 'committer_email': 'josef.grieb@gmail.com', 'commit_date': datetime.datetime(2014, 10, 3, 9, 46, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1117c6fdb8854e62bb58a533258cd0828ffeb9ff', 'committer_username': '1Jo1', 'committer_name': 'Josef Grieb', 'committer_email': 'josef.grieb@gmail.com', 'commit_date': datetime.datetime(2014, 10, 3, 9, 46, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d464d5ab49d17060971d64f1bc5ad93109df2de', 'committer_username': '1Jo1', 'committer_name': 'Josef Grieb', 'committer_email': 'josef.grieb@gmail.com', 'commit_date': datetime.datetime(2014, 10, 3, 9, 46, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96e0e5cc91c1b0425fa24f5e63ff025bfc9f5638', 'committer_username': '1Jo1', 'committer_name': 'Josef Grieb', 'committer_email': 'josef.grieb@gmail.com', 'commit_date': datetime.datetime(2014, 10, 3, 9, 46, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '01602843016ad9269ac433960645812937670d52', 'committer_username': '1Jo1', 'committer_name': 'Josef Grieb', 'committer_email': 'josef.grieb@gmail.com', 'commit_date': datetime.datetime(2014, 10, 3, 9, 46, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3a0395ac270b371192e46dcd7dc2a0b514d8743', 'committer_username': '1Jo1', 'committer_name': 'Josef Grieb', 'committer_email': 'josef.grieb@gmail.com', 'commit_date': datetime.datetime(2014, 10, 3, 9, 46, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b10b4ca6e7992533e53c785df34bf89313da0c3e', 'committer_username': '1Jo1', 'committer_name': 'Josef Grieb', 'committer_email': 'josef.grieb@gmail.com', 'commit_date': datetime.datetime(2014, 10, 3, 9, 46, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9b3f293a5dc865a16b0da28d0f60cbdcac15d32', 'committer_username': '1Jo1', 'committer_name': 'Josef Grieb', 'committer_email': 'josef.grieb@gmail.com', 'commit_date': datetime.datetime(2014, 10, 3, 9, 46, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8435c0ce1f052771dbdf59483ea59d2469ecf9b7', 'committer_username': '1Jo1', 'committer_name': 'Josef Grieb', 'committer_email': 'josef.grieb@gmail.com', 'commit_date': datetime.datetime(2014, 10, 3, 9, 46, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b62668d1d0dd525627936f9b039a06ad2c022ee0', 'committer_username': 'normanmaurer', 'committer_name': 'Norman Maurer', 'committer_email': 'norman_maurer@apple.com', 'commit_date': datetime.datetime(2010, 10, 14, 13, 33, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16530998a3250323a6506243a705c86e1e87d352', 'committer_username': 'normanmaurer', 'committer_name': 'Norman Maurer', 'committer_email': 'norman_maurer@apple.com', 'commit_date': datetime.datetime(2010, 10, 14, 13, 33, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '191f0de6ee0904298f30d11232e9cfa18f2b51b9', 'committer_username': 'normanmaurer', 'committer_name': 'Norman Maurer', 'committer_email': 'norman_maurer@apple.com', 'commit_date': datetime.datetime(2010, 10, 14, 13, 33, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e13cc929dcce1f4dbe8666722dd66fd59e036657', 'committer_username': 'normanmaurer', 'committer_name': 'Norman Maurer', 'committer_email': 'norman_maurer@apple.com', 'commit_date': datetime.datetime(2010, 10, 14, 13, 33, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9576c939d8fa44d3d45d787253b4d31ae8cbb370', 'committer_username': 'normanmaurer', 'committer_name': 'Norman Maurer', 'committer_email': 'norman_maurer@apple.com', 'commit_date': datetime.datetime(2010, 10, 14, 13, 33, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3229d7e55378a9bbf606a1f655de9eb0e095ad7f', 'committer_username': 'normanmaurer', 'committer_name': 'Norman Maurer', 'committer_email': 'norman_maurer@apple.com', 'commit_date': datetime.datetime(2010, 10, 14, 13, 33, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49449b300e3ca925b6fb638e7c1d6ba1a53ad634', 'committer_username': 'normanmaurer', 'committer_name': 'Norman Maurer', 'committer_email': 'norman_maurer@apple.com', 'commit_date': datetime.datetime(2010, 10, 14, 13, 33, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '63c490470cfebca2dab3d4abfea9b9518c1df33e', 'committer_username': '1Jo1', 'committer_name': 'Josef Grieb', 'committer_email': 'josef.grieb@gmail.com', 'commit_date': datetime.datetime(2014, 10, 3, 9, 46, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ab424f3c6a993524910a830f7087a74f2e94820', 'committer_username': '1Jo1', 'committer_name': 'Josef Grieb', 'committer_email': 'josef.grieb@gmail.com', 'commit_date': datetime.datetime(2014, 10, 3, 9, 46, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56ace4228f71c8c27f0a297ecaef310ac7cbb700', 'committer_username': '1Jo1', 'committer_name': 'Josef Grieb', 'committer_email': 'josef.grieb@gmail.com', 'commit_date': datetime.datetime(2014, 10, 3, 9, 46, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '65e854004244605df9d5240a65712963cd331220', 'committer_username': 'normanmaurer', 'committer_name': 'Norman Maurer', 'committer_email': 'norman_maurer@apple.com', 'commit_date': datetime.datetime(2010, 10, 14, 13, 33, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3cdb1d60ae71bbbbf30b75201a04a6d2013d3e55', 'committer_username': '1Jo1', 'committer_name': 'Josef Grieb', 'committer_email': 'josef.grieb@gmail.com', 'commit_date': datetime.datetime(2014, 10, 3, 9, 46, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11e169e17a41b9e068b1a4e09f8d603e7f4d37fc', 'committer_username': 'normanmaurer', 'committer_name': 'Norman Maurer', 'committer_email': 'norman_maurer@apple.com', 'commit_date': datetime.datetime(2010, 10, 14, 13, 33, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9fcd2926f1615ffd4f55891ffb04923f15c340c4', 'committer_username': '1Jo1', 'committer_name': 'Josef Grieb', 'committer_email': 'josef.grieb@gmail.com', 'commit_date': datetime.datetime(2014, 10, 3, 9, 46, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8096b2c15f18b9afe00802d1bdc84879e1310c96', 'committer_username': '1Jo1', 'committer_name': 'Josef Grieb', 'committer_email': 'josef.grieb@gmail.com', 'commit_date': datetime.datetime(2014, 10, 3, 9, 46, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15e7f910f0c42a21edfd877af729ca088ad51fda', 'committer_username': '1Jo1', 'committer_name': 'Josef Grieb', 'committer_email': 'josef.grieb@gmail.com', 'commit_date': datetime.datetime(2014, 10, 3, 9, 46, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b863aacad45524f3085e69e369dd1f38ab05580b', 'committer_username': 'normanmaurer', 'committer_name': 'Norman Maurer', 'committer_email': 'norman_maurer@apple.com', 'commit_date': datetime.datetime(2010, 10, 14, 13, 33, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '946dc3973fa2a9e89c90851382f9616dcb3913b1', 'committer_username': '1Jo1', 'committer_name': 'Josef Grieb', 'committer_email': 'josef.grieb@gmail.com', 'commit_date': datetime.datetime(2014, 10, 3, 9, 46, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '356ce5fdc0bc7434f31c5e84ea7392e5a666a011', 'committer_username': '1Jo1', 'committer_name': 'Josef Grieb', 'committer_email': 'josef.grieb@gmail.com', 'commit_date': datetime.datetime(2014, 10, 3, 9, 46, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a5449a7904cc29bec2a02f819410d53982b8472', 'committer_username': '1Jo1', 'committer_name': 'Josef Grieb', 'committer_email': 'josef.grieb@gmail.com', 'commit_date': datetime.datetime(2014, 10, 3, 9, 46, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '37944ccffdcf39a7b0e58141b2d796e1a6b37622', 'committer_username': '1Jo1', 'committer_name': 'Josef Grieb', 'committer_email': 'josef.grieb@gmail.com', 'commit_date': datetime.datetime(2014, 10, 3, 9, 46, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6e6f543c0da8f0eef17bdda7d4f3614c0112d93', 'committer_username': 'normanmaurer', 'committer_name': 'Norman Maurer', 'committer_email': 'norman_maurer@apple.com', 'commit_date': datetime.datetime(2010, 10, 14, 13, 33, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '43fc06e9cf3169362faee1821e7986dd158e2c25', 'committer_username': '1Jo1', 'committer_name': 'Josef Grieb', 'committer_email': 'josef.grieb@gmail.com', 'commit_date': datetime.datetime(2014, 10, 3, 9, 46, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3585492e99cca1eac0d95588636e32ec283d103', 'committer_username': 'normanmaurer', 'committer_name': 'Norman Maurer', 'committer_email': 'norman_maurer@apple.com', 'commit_date': datetime.datetime(2010, 10, 14, 13, 33, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f77aa54f18133a3ba2b6585d79f2f4132a6339b8', 'committer_username': '1Jo1', 'committer_name': 'Josef Grieb', 'committer_email': 'josef.grieb@gmail.com', 'commit_date': datetime.datetime(2014, 10, 3, 9, 46, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '076c35f7852ac9d7593ccffc9cf889a78ecc5e6c', 'committer_username': 'normanmaurer', 'committer_name': 'Norman Maurer', 'committer_email': 'norman_maurer@apple.com', 'commit_date': datetime.datetime(2010, 10, 14, 13, 33, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05289a3f5eb038289a0a12036aecccb0e3a91aa0', 'committer_username': '1Jo1', 'committer_name': 'Josef Grieb', 'committer_email': 'josef.grieb@gmail.com', 'commit_date': datetime.datetime(2014, 10, 3, 9, 46, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '242890899eca8f240ba26c9f8c6020fceb6847f5', 'committer_username': '1Jo1', 'committer_name': 'Josef Grieb', 'committer_email': 'josef.grieb@gmail.com', 'commit_date': datetime.datetime(2014, 10, 3, 9, 46, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2820edc207e23eed67e3b1e820addb8ec9a338de', 'committer_username': '1Jo1', 'committer_name': 'Josef Grieb', 'committer_email': 'josef.grieb@gmail.com', 'commit_date': datetime.datetime(2014, 10, 3, 9, 46, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e41c68b1515a3597d1c1537c0123751510930fc1', 'committer_username': 'normanmaurer', 'committer_name': 'Norman Maurer', 'committer_email': 'norman_maurer@apple.com', 'commit_date': datetime.datetime(2010, 10, 14, 13, 33, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ddf9983e83c8f01dca54158f7e7b586afb77ae8', 'committer_username': '1Jo1', 'committer_name': 'Josef Grieb', 'committer_email': 'josef.grieb@gmail.com', 'commit_date': datetime.datetime(2014, 10, 3, 9, 46, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '186b9eb6ab9cb31823e3f5179485dfab0008b7c9', 'committer_username': 'normanmaurer', 'committer_name': 'Norman Maurer', 'committer_email': 'norman_maurer@apple.com', 'commit_date': datetime.datetime(2010, 10, 14, 13, 33, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74c0d3dfa7c2f8528553b2d2f21d04b96616fe2d', 'committer_username': '1Jo1', 'committer_name': 'Josef Grieb', 'committer_email': 'josef.grieb@gmail.com', 'commit_date': datetime.datetime(2014, 10, 3, 9, 46, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '28db67c42b5382cd32593c4fbdea77da57eb4899', 'committer_username': 'normanmaurer', 'committer_name': 'Norman Maurer', 'committer_email': 'norman_maurer@apple.com', 'commit_date': datetime.datetime(2010, 10, 14, 13, 33, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1a582d798c2aa9ff22954ef1b9cf3a5d9aaeb92', 'committer_username': '1Jo1', 'committer_name': 'Josef Grieb', 'committer_email': 'josef.grieb@gmail.com', 'commit_date': datetime.datetime(2014, 10, 3, 9, 46, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e5b5400e610c4072f72d75a6fa911add1493a8e', 'committer_username': 'normanmaurer', 'committer_name': 'Norman Maurer', 'committer_email': 'norman_maurer@apple.com', 'commit_date': datetime.datetime(2010, 10, 14, 13, 33, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57884e2e05e91cdec62fe88fd602cff0053d35ae', 'committer_username': '1Jo1', 'committer_name': 'Josef Grieb', 'committer_email': 'josef.grieb@gmail.com', 'commit_date': datetime.datetime(2014, 10, 3, 9, 46, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '663c44cd45c583d66cf462a3d4f73d2a52178fb9', 'committer_username': 'normanmaurer', 'committer_name': 'Norman Maurer', 'committer_email': 'norman_maurer@apple.com', 'commit_date': datetime.datetime(2010, 10, 14, 13, 33, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70682b238f4c5bd2de124cc1a91b78269f481b74', 'committer_username': '1Jo1', 'committer_name': 'Josef Grieb', 'committer_email': 'josef.grieb@gmail.com', 'commit_date': datetime.datetime(2014, 10, 3, 9, 46, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05d88970258537ca58aaf93c8594a3dc2ff6afbf', 'committer_username': 'normanmaurer', 'committer_name': 'Norman Maurer', 'committer_email': 'norman_maurer@apple.com', 'commit_date': datetime.datetime(2010, 10, 14, 13, 33, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51e20ecd3c3d4142dd454fcd073806778b33e502', 'committer_username': '1Jo1', 'committer_name': 'Josef Grieb', 'committer_email': 'josef.grieb@gmail.com', 'commit_date': datetime.datetime(2014, 10, 3, 9, 46, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '614323e13239d814ef5c30ad79a03a96d46b4bbc', 'committer_username': 'normanmaurer', 'committer_name': 'Norman Maurer', 'committer_email': 'norman_maurer@apple.com', 'commit_date': datetime.datetime(2010, 10, 14, 13, 33, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c2a10effde8009244c6e2385a939b25d33dfccd8', 'committer_username': '1Jo1', 'committer_name': 'Josef Grieb', 'committer_email': 'josef.grieb@gmail.com', 'commit_date': datetime.datetime(2014, 10, 3, 9, 46, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d7d52954beb672e751f55c3ba90629191a1fbe8', 'committer_username': 'normanmaurer', 'committer_name': 'Norman Maurer', 'committer_email': 'norman_maurer@apple.com', 'commit_date': datetime.datetime(2010, 10, 14, 13, 33, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bfc51bffd8bb540074f3a78757315abdfff5d5cc', 'committer_username': '1Jo1', 'committer_name': 'Josef Grieb', 'committer_email': 'josef.grieb@gmail.com', 'commit_date': datetime.datetime(2014, 10, 3, 9, 46, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e6a3d6483e597b2e7452d047a74cc7ffa5f319b', 'committer_username': 'normanmaurer', 'committer_name': 'Norman Maurer', 'committer_email': 'norman_maurer@apple.com', 'commit_date': datetime.datetime(2010, 10, 14, 13, 33, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '75459d7ac769e7332b20313c8d1190bdd1945826', 'committer_username': '1Jo1', 'committer_name': 'Josef Grieb', 'committer_email': 'josef.grieb@gmail.com', 'commit_date': datetime.datetime(2014, 10, 3, 9, 46, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e8e2cc0eb786b76cfcba4da7ac12560bc745deb', 'committer_username': 'normanmaurer', 'committer_name': 'Norman Maurer', 'committer_email': 'norman_maurer@apple.com', 'commit_date': datetime.datetime(2010, 10, 14, 13, 33, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c7f6ba0a559d668db58b80b80f7d79fae9b0ac21', 'committer_username': '1Jo1', 'committer_name': 'Josef Grieb', 'committer_email': 'josef.grieb@gmail.com', 'commit_date': datetime.datetime(2014, 10, 3, 9, 46, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5423eb9401d00008b662968a1a6b8f5509a0dcd4', 'committer_username': 'normanmaurer', 'committer_name': 'Norman Maurer', 'committer_email': 'norman_maurer@apple.com', 'commit_date': datetime.datetime(2010, 10, 14, 13, 33, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '77a133344fe760267a84bb9ef7cc5aaba2e1a343', 'committer_username': '1Jo1', 'committer_name': 'Josef Grieb', 'committer_email': 'josef.grieb@gmail.com', 'commit_date': datetime.datetime(2014, 10, 3, 9, 46, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a0cc8a7c03bcf6d1a0c6f1ce2f06af47fdefac9', 'committer_username': 'normanmaurer', 'committer_name': 'Norman Maurer', 'committer_email': 'norman_maurer@apple.com', 'commit_date': datetime.datetime(2010, 10, 14, 13, 33, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b4e7f046d592e1eb1caa203a8870c99828702d06', 'committer_username': '1Jo1', 'committer_name': 'Josef Grieb', 'committer_email': 'josef.grieb@gmail.com', 'commit_date': datetime.datetime(2014, 10, 3, 9, 46, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c0ddac2c831eba951cb28d3a27a4ce50e5f793f4', 'committer_username': 'normanmaurer', 'committer_name': 'Norman Maurer', 'committer_email': 'norman_maurer@apple.com', 'commit_date': datetime.datetime(2010, 10, 14, 13, 33, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44f2cba67a4cfcc3d320925d3959096536c15d3d', 'committer_username': '1Jo1', 'committer_name': 'Josef Grieb', 'committer_email': 'josef.grieb@gmail.com', 'commit_date': datetime.datetime(2014, 10, 3, 9, 46, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74fd0c1375c17a4e684bcf83b415f78e9c0b881d', 'committer_username': 'normanmaurer', 'committer_name': 'Norman Maurer', 'committer_email': 'norman_maurer@apple.com', 'commit_date': datetime.datetime(2010, 10, 14, 13, 33, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47f199653fd3ec24d347c731a1d24f1beeb8bb82', 'committer_username': 'normanmaurer', 'committer_name': 'Norman Maurer', 'committer_email': 'norman_maurer@apple.com', 'commit_date': datetime.datetime(2010, 10, 14, 13, 33, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bcc37d078fd4b8a6c63f1681a6921f03d5a8131a', 'committer_username': '1Jo1', 'committer_name': 'Josef Grieb', 'committer_email': 'josef.grieb@gmail.com', 'commit_date': datetime.datetime(2014, 10, 3, 9, 46, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '823eaaffb33a267754c00a86d6e2262428239762', 'committer_username': '1Jo1', 'committer_name': 'Josef Grieb', 'committer_email': 'josef.grieb@gmail.com', 'commit_date': datetime.datetime(2014, 10, 3, 9, 46, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c0dc26a2f6bf103809fa92333cf4287059e77f62', 'committer_username': 'normanmaurer', 'committer_name': 'Norman Maurer', 'committer_email': 'norman_maurer@apple.com', 'commit_date': datetime.datetime(2010, 10, 14, 13, 33, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66ff2a2e2379d396bc5dd15fe4dd08a1d3b31780', 'committer_username': '1Jo1', 'committer_name': 'Josef Grieb', 'committer_email': 'josef.grieb@gmail.com', 'commit_date': datetime.datetime(2014, 10, 3, 9, 46, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '59f77c24b97e1fcd952eccc0117e0550a983f3a6', 'committer_username': '1Jo1', 'committer_name': 'Josef Grieb', 'committer_email': 'josef.grieb@gmail.com', 'commit_date': datetime.datetime(2014, 10, 3, 9, 46, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5691fe8a44862c5f4cdfff603bd9363bdfc2c617', 'committer_username': '1Jo1', 'committer_name': 'Josef Grieb', 'committer_email': 'josef.grieb@gmail.com', 'commit_date': datetime.datetime(2014, 10, 3, 9, 46, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f57fcd6c4a6706dba802d0bb809375e9b70150f1', 'committer_username': 'normanmaurer', 'committer_name': 'Norman Maurer', 'committer_email': 'norman_maurer@apple.com', 'commit_date': datetime.datetime(2010, 10, 14, 13, 33, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1c6f111f5ba8c280fe2aea8d1ce56e36d037dc3', 'committer_username': 'normanmaurer', 'committer_name': 'Norman Maurer', 'committer_email': 'norman_maurer@apple.com', 'commit_date': datetime.datetime(2010, 10, 14, 13, 33, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '865512df49a706bbb6e7e9961267f24cb74c8722', 'committer_username': '1Jo1', 'committer_name': 'Josef Grieb', 'committer_email': 'josef.grieb@gmail.com', 'commit_date': datetime.datetime(2014, 10, 3, 9, 46, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a55313ed75ce41d8c6628cb939510baddbd28b0f', 'committer_username': '1Jo1', 'committer_name': 'Josef Grieb', 'committer_email': 'josef.grieb@gmail.com', 'commit_date': datetime.datetime(2014, 10, 3, 9, 46, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1440b4fa0c328176d4922013c33d9aa6eab5242b', 'committer_username': 'normanmaurer', 'committer_name': 'Norman Maurer', 'committer_email': 'norman_maurer@apple.com', 'commit_date': datetime.datetime(2010, 10, 14, 13, 33, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b35976559365534e63b746cfb7f796b8733723f', 'committer_username': 'normanmaurer', 'committer_name': 'Norman Maurer', 'committer_email': 'norman_maurer@apple.com', 'commit_date': datetime.datetime(2010, 10, 14, 13, 33, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0631824dcdcda694bb256a30ccfe2644c8854567', 'committer_username': 'normanmaurer', 'committer_name': 'Norman Maurer', 'committer_email': 'norman_maurer@apple.com', 'commit_date': datetime.datetime(2010, 10, 14, 13, 33, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c294908bfd8090f276c897b1cf9c668490084ea', 'committer_username': '1Jo1', 'committer_name': 'Josef Grieb', 'committer_email': 'josef.grieb@gmail.com', 'commit_date': datetime.datetime(2014, 10, 3, 9, 46, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e13c5cfd9526b32326ae2b47a13b64439b96c30', 'committer_username': '1Jo1', 'committer_name': 'Josef Grieb', 'committer_email': 'josef.grieb@gmail.com', 'commit_date': datetime.datetime(2014, 10, 3, 9, 46, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6545d80d23de478802d3b6eb4fe495331b0e0dd9', 'committer_username': 'normanmaurer', 'committer_name': 'Norman Maurer', 'committer_email': 'norman_maurer@apple.com', 'commit_date': datetime.datetime(2010, 10, 14, 13, 33, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa7f07774fc43e376b8bbca63cc3c34444df13d1', 'committer_username': 'normanmaurer', 'committer_name': 'Norman Maurer', 'committer_email': 'norman_maurer@apple.com', 'commit_date': datetime.datetime(2010, 10, 14, 13, 33, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61b8eaf26338bd3325d3470fbf6f301edcb39429', 'committer_username': 'normanmaurer', 'committer_name': 'Norman Maurer', 'committer_email': 'norman_maurer@apple.com', 'commit_date': datetime.datetime(2010, 10, 14, 13, 33, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '55460eea2ea3ac4d2006cd6048c842b1e98fde9e', 'committer_username': '1Jo1', 'committer_name': 'Josef Grieb', 'committer_email': 'josef.grieb@gmail.com', 'commit_date': datetime.datetime(2014, 10, 3, 9, 46, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c42a37f677a26dc19da5bf111e1ce087fbcbc14', 'committer_username': 'normanmaurer', 'committer_name': 'Norman Maurer', 'committer_email': 'norman_maurer@apple.com', 'commit_date': datetime.datetime(2010, 10, 14, 13, 33, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c6db51ba1f3b4403426d4a7d95c857d0300a0256', 'committer_username': '1Jo1', 'committer_name': 'Josef Grieb', 'committer_email': 'josef.grieb@gmail.com', 'commit_date': datetime.datetime(2014, 10, 3, 9, 46, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dfca8116486bd5dc350fab8dd007fa3183ed8872', 'committer_username': 'normanmaurer', 'committer_name': 'Norman Maurer', 'committer_email': 'norman_maurer@apple.com', 'commit_date': datetime.datetime(2010, 10, 14, 13, 33, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ccd5a6e411962b7441000d0aa7e0a8be14298c3b', 'committer_username': 'normanmaurer', 'committer_name': 'Norman Maurer', 'committer_email': 'norman_maurer@apple.com', 'commit_date': datetime.datetime(2010, 10, 14, 13, 33, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '89a2513a387252d432805982250aab6b6a78c3ae', 'committer_username': '1Jo1', 'committer_name': 'Josef Grieb', 'committer_email': 'josef.grieb@gmail.com', 'commit_date': datetime.datetime(2014, 10, 3, 9, 46, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c465e2f1ba13de4bb77e72e38006a09f4fb164b', 'committer_username': '1Jo1', 'committer_name': 'Josef Grieb', 'committer_email': 'josef.grieb@gmail.com', 'commit_date': datetime.datetime(2014, 10, 3, 9, 46, 18, tzinfo=datetime.timezone.utc)}]",Josef Grieb,9006797,josef.grieb@gmail.com,User,,76,,33,39

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
1064563,netty,netty/netty,Java,15856,33209,1742,782,11523,607,19,43,"[{'id': 508789997, 'number': 10725, 'closed': datetime.datetime(2020, 10, 26, 13, 43, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 23, 7, 57, 19, tzinfo=datetime.timezone.utc), 'time_taken': 279975.0, 'time_delta': '3 days, 5:46:15', 'additions': 63, 'deletions': 65, 'state': 'closed'}, {'id': 496908058, 'number': 10632, 'closed': datetime.datetime(2020, 10, 9, 9, 19, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 2, 13, 29, 30, tzinfo=datetime.timezone.utc), 'time_taken': 589802.0, 'time_delta': '6 days, 19:50:02', 'additions': 19, 'deletions': 8, 'state': 'closed'}, {'id': 489060762, 'number': 10586, 'closed': datetime.datetime(2020, 9, 23, 7, 55, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 18, 4, 22, 48, tzinfo=datetime.timezone.utc), 'time_taken': 444784.0, 'time_delta': '5 days, 3:33:04', 'additions': 20, 'deletions': 20, 'state': 'closed'}, {'id': 486187617, 'number': 10568, 'closed': datetime.datetime(2020, 9, 13, 18, 3, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 13, 14, 10, 24, tzinfo=datetime.timezone.utc), 'time_taken': 13965.0, 'time_delta': '3:52:45', 'additions': 17, 'deletions': 75, 'state': 'closed'}, {'id': 483458840, 'number': 10561, 'closed': datetime.datetime(2020, 9, 10, 14, 25, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 10, 7, 0, 24, tzinfo=datetime.timezone.utc), 'time_taken': 26694.0, 'time_delta': '7:24:54', 'additions': 12, 'deletions': 54, 'state': 'closed'}, {'id': 481869278, 'number': 10548, 'closed': datetime.datetime(2020, 10, 29, 8, 50, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 8, 8, 17, 47, tzinfo=datetime.timezone.utc), 'time_taken': 4408387.0, 'time_delta': '51 days, 0:33:07', 'additions': 8074, 'deletions': 34, 'state': 'closed'}, {'id': 437039204, 'number': 10356, 'closed': datetime.datetime(2020, 9, 7, 8, 4, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 19, 11, 6, 19, tzinfo=datetime.timezone.utc), 'time_taken': 6901087.0, 'time_delta': '79 days, 20:58:07', 'additions': 8131, 'deletions': 24, 'state': 'closed'}, {'id': 426356553, 'number': 10333, 'closed': datetime.datetime(2020, 6, 2, 9, 52, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 2, 5, 20, 19, tzinfo=datetime.timezone.utc), 'time_taken': 16356.0, 'time_delta': '4:32:36', 'additions': 23, 'deletions': 1, 'state': 'closed'}]"
