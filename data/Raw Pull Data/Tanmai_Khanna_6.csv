pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
444293615,Wordbound blanks in transfer,"## Chunker

- Wordbound blanks are a part of transfer word as a new side: blank.
- Are ignored in pattern matching
- Wordbound blanks are added just before the output LU from the LU that the lem/lemh/whole is clipped from.
- If the lem/lemh/whole comes from a variable in the output then the blank comes from the LU which the lemma comes from, by tracing its variable assignment in `<let>`.
- No regression. Stream without wordbound blanks work as-is.
- Normal blanks don't move around while wordbound blanks move around.
- When MLUs are formed the blanks are merged.
- Removed code added for secondary tags.
- Added test for transfer.

Chunker Examples:
Transfer Input:
```
^The<det><def><sp>/El<det><def><GD><ND>$ [[tbqum2bhp]]^big<adj><sint>/grande<adj><mf>$ [[t:b:qum2bhp; t:i:M0JZW3Q]]^red<adj>/rojo<adj>$ ^dog<n><sg>/perro<n><GD><sg>$[
]
```
Transfer Output:
```
^El<det><def><m><sg>$ ^perro<n><m><sg>$ [[t:b:qum2bhp; t:i:M0JZW3Q]]^rojo<adj><m><sg>$ [[tbqum2bhp]]^grande<adj><mf><sg>$[
]
```

## Interchunk
Since contents of chunks cannot be modified, inter chunk needs no modification

## Postchunk
- wordbound blanks are ignored in pattern matching
- Wordbound blanks are added just before the output LU from the LU that the lem/lemh/whole is clipped from.
- If the lem/lemh comes from a variable in the output then the blank comes from the LU which the lemma comes from, by tracing its variable assignment in `<let>`.
- No regression. Stream without wordbound blanks work as-is.
- Normal blanks don't move around while wordbound blanks move around.
- When MLUs are formed the blanks are merged.
- Added test for postchunk.

Examples:
Postchunk Input:
```
^Det_adj<SA>{^el<det><def>$ [[t:b:qum2bhp]]^grande# test<adj>$}$ ^inf<SV><vblex><pres><p3><ND>{[[t:i:M0JZW3Q]]^vivir<vblex><3>$}$ ^default<default>{[[t:b:qum2bhp; t:i:M0JZW3Q]]^rojo<adj>$}$ ^nom<SN><sg>{^perro<n><3>$}$ ^nom<SN><sg>{[[t:s:123456]]^test<n><3># abc$}$ ^have_enc_pp<SV><tx><tps><PD><ND>{[[t:x:1234ab]]^xyz<cnjadv>$ [[t:s:p2rthg]]^abc<vbhaver><ger>$ [[t:x:y265hk]]^uvwx<vblex><pp>$}$ ^have_enc_pp<SV><tx><tps><PD><ND>{[[t:x:1234ab; t:y:poposj]]^xyz<cnjadv>$ [[t:s:p2rthg; t:b:123456]]^abc<vbhaver><ger>$ [[t:x:y265hk]]^uvwx<vblex><pp>$}$[
]
```
Postchunk Output:
```
^El<det><def>$ [[t:b:qum2bhp]]^grande# test<adj>$ [[t:i:M0JZW3Q]]^vivir<vblex><pres><p3><ND>$ [[t:b:qum2bhp; t:i:M0JZW3Q]]^rojo<adj>$ ^perro<n>$ [[t:s:123456]]^test<n># abc$ [[t:x:1234ab; t:s:p2rthg]]^xyz<cnjadv>+abc<vbhaver><ger>$ [[t:x:y265hk]]^uvwx<vblex><pp>$ [[t:x:1234ab; t:y:poposj; t:s:p2rthg; t:b:123456]]^xyz<cnjadv>+abc<vbhaver><ger>$ [[t:x:y265hk]]^uvwx<vblex><pp>$[
]
```

## Tests: https://gist.github.com/khannatanmai/ebb29851a21d0a247a3807fc72590561",True,90,https://api.github.com/repos/apertium/apertium/pulls/90,https://github.com/apertium/apertium/pull/90,closed,710,205,13,23,1,0,0,0,[],2020-07-04 14:53:58+00:00,2020-07-07 10:47:58+00:00,244440.0,"2 days, 19:54:00",[],"[{'commit_sha': '8b02e2259666a198556208106d7f9817c6efd59f', 'committer_username': 'khannatanmai', 'committer_name': 'Tanmai Khanna', 'committer_email': 'khanna.tanmai@gmail.com', 'commit_date': datetime.datetime(2017, 3, 11, 19, 41, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b004fe8e03578ae9b724236cc7afaf4ca505b1fd', 'committer_username': 'khannatanmai', 'committer_name': 'Tanmai Khanna', 'committer_email': 'khanna.tanmai@gmail.com', 'commit_date': datetime.datetime(2017, 3, 11, 19, 41, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '01917806ca6bf8cfec9f6609fbb4f829d80f84af', 'committer_username': 'khannatanmai', 'committer_name': 'Tanmai Khanna', 'committer_email': 'khanna.tanmai@gmail.com', 'commit_date': datetime.datetime(2017, 3, 11, 19, 41, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '75e491f6e4db74f632b1b55603057b92dc9d5051', 'committer_username': 'khannatanmai', 'committer_name': 'Tanmai Khanna', 'committer_email': 'khanna.tanmai@gmail.com', 'commit_date': datetime.datetime(2017, 3, 11, 19, 41, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7872423673d9600012a4c1dcf352b342b0209ec3', 'committer_username': 'khannatanmai', 'committer_name': 'Tanmai Khanna', 'committer_email': 'khanna.tanmai@gmail.com', 'commit_date': datetime.datetime(2017, 3, 11, 19, 41, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e08154701f661cd48ff5456760e6e456122194b1', 'committer_username': 'khannatanmai', 'committer_name': 'Tanmai Khanna', 'committer_email': 'khanna.tanmai@gmail.com', 'commit_date': datetime.datetime(2017, 3, 11, 19, 41, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d1189943a23d672685c5d0c95f4345aef51acaa', 'committer_username': 'khannatanmai', 'committer_name': 'Tanmai Khanna', 'committer_email': 'khanna.tanmai@gmail.com', 'commit_date': datetime.datetime(2017, 3, 11, 19, 41, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73f6f5c2a6303a7952999d6fc7d85a9126f69c47', 'committer_username': 'khannatanmai', 'committer_name': 'Tanmai Khanna', 'committer_email': 'khanna.tanmai@gmail.com', 'commit_date': datetime.datetime(2017, 3, 11, 19, 41, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab7eb070490ad178df083abdd431ca2635a499c8', 'committer_username': 'khannatanmai', 'committer_name': 'Tanmai Khanna', 'committer_email': 'khanna.tanmai@gmail.com', 'commit_date': datetime.datetime(2017, 3, 11, 19, 41, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f0bf7ef40bf084b75193f2b5917ed4513abb72c9', 'committer_username': 'khannatanmai', 'committer_name': 'Tanmai Khanna', 'committer_email': 'khanna.tanmai@gmail.com', 'commit_date': datetime.datetime(2017, 3, 11, 19, 41, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d989095f9abbed2d9ce2da36aa9dfdafeb6732c', 'committer_username': 'khannatanmai', 'committer_name': 'Tanmai Khanna', 'committer_email': 'khanna.tanmai@gmail.com', 'commit_date': datetime.datetime(2017, 3, 11, 19, 41, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c3db17503ada22217e1d84cf838f5efa43a00e7', 'committer_username': 'khannatanmai', 'committer_name': 'Tanmai Khanna', 'committer_email': 'khanna.tanmai@gmail.com', 'commit_date': datetime.datetime(2017, 3, 11, 19, 41, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3533cbceb6efd7161a074788b06d9a433ee37955', 'committer_username': 'khannatanmai', 'committer_name': 'Tanmai Khanna', 'committer_email': 'khanna.tanmai@gmail.com', 'commit_date': datetime.datetime(2017, 3, 11, 19, 41, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a8f4195e268302a8aae7956be0a0d17619872b50', 'committer_username': 'khannatanmai', 'committer_name': 'Tanmai Khanna', 'committer_email': 'khanna.tanmai@gmail.com', 'commit_date': datetime.datetime(2017, 3, 11, 19, 41, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4951adf2ca095ba6fe3e9899bf090455ac6248d2', 'committer_username': 'khannatanmai', 'committer_name': 'Tanmai Khanna', 'committer_email': 'khanna.tanmai@gmail.com', 'commit_date': datetime.datetime(2017, 3, 11, 19, 41, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2cdaf71c6de388d05ff17093b4a4b9c14f7417e3', 'committer_username': 'khannatanmai', 'committer_name': 'Tanmai Khanna', 'committer_email': 'khanna.tanmai@gmail.com', 'commit_date': datetime.datetime(2017, 3, 11, 19, 41, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3046a32c80a67a75180f0255697c332fd24f9e7a', 'committer_username': 'khannatanmai', 'committer_name': 'Tanmai Khanna', 'committer_email': 'khanna.tanmai@gmail.com', 'commit_date': datetime.datetime(2017, 3, 11, 19, 41, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5086e3d82d275c5c87ec44e9347c6e9ea38992db', 'committer_username': 'khannatanmai', 'committer_name': 'Tanmai Khanna', 'committer_email': 'khanna.tanmai@gmail.com', 'commit_date': datetime.datetime(2017, 3, 11, 19, 41, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '504a4580497b7835d0a6af61ea4d0a978722bf22', 'committer_username': 'khannatanmai', 'committer_name': 'Tanmai Khanna', 'committer_email': 'khanna.tanmai@gmail.com', 'commit_date': datetime.datetime(2017, 3, 11, 19, 41, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e1e7d0eb481a6ea49443f67ef3e710faf6ce0ca', 'committer_username': 'khannatanmai', 'committer_name': 'Tanmai Khanna', 'committer_email': 'khanna.tanmai@gmail.com', 'commit_date': datetime.datetime(2017, 3, 11, 19, 41, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c7f039f7e02b8fad316decd2bb61b79f0592550', 'committer_username': 'khannatanmai', 'committer_name': 'Tanmai Khanna', 'committer_email': 'khanna.tanmai@gmail.com', 'commit_date': datetime.datetime(2017, 3, 11, 19, 41, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fbaed6d6d83454bbb4f1bd39f33f380e5ab12e82', 'committer_username': 'khannatanmai', 'committer_name': 'Tanmai Khanna', 'committer_email': 'khanna.tanmai@gmail.com', 'commit_date': datetime.datetime(2017, 3, 11, 19, 41, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c788768b2f9e78f06836bfef3458069a3d20565', 'committer_username': 'khannatanmai', 'committer_name': 'Tanmai Khanna', 'committer_email': 'khanna.tanmai@gmail.com', 'commit_date': datetime.datetime(2017, 3, 11, 19, 41, 1, tzinfo=datetime.timezone.utc)}]",Tanmai Khanna,26350622,khanna.tanmai@gmail.com,User,,20,,16,15
452749655,Output wordbound blank automatically if there's only one LU in the matching pattern,"- If matching pattern has only one LU, then the wordbound blank of that LU is output with all the output LUs of that rule. (Single stage transfer, chunker and postchunk).
- Small fix: blank output when rule doesn't match in single stage transfer.
- No regression in regression tests (run on eng-spa and spa-cat).
- Added tests for transfer and postchunk.",True,94,https://api.github.com/repos/apertium/apertium/pulls/94,https://github.com/apertium/apertium/pull/94,closed,124,6,7,6,0,0,0,0,[],2020-07-19 20:10:33+00:00,2020-07-20 08:12:31+00:00,43318.0,12:01:58,[],"[{'commit_sha': '725d31f1ce4cb24d4597475ecb3dfb24e6b06da0', 'committer_username': 'khannatanmai', 'committer_name': 'Tanmai Khanna', 'committer_email': 'khanna.tanmai@gmail.com', 'commit_date': datetime.datetime(2017, 3, 11, 19, 41, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '334cc0fb54aba89554b6f6df8a29631351555fea', 'committer_username': 'khannatanmai', 'committer_name': 'Tanmai Khanna', 'committer_email': 'khanna.tanmai@gmail.com', 'commit_date': datetime.datetime(2017, 3, 11, 19, 41, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '06f90c25b9e809ef9cfbee3a64265d7716704a96', 'committer_username': 'khannatanmai', 'committer_name': 'Tanmai Khanna', 'committer_email': 'khanna.tanmai@gmail.com', 'commit_date': datetime.datetime(2017, 3, 11, 19, 41, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2eaca76754a802cf353588babc462c582b592a4d', 'committer_username': 'khannatanmai', 'committer_name': 'Tanmai Khanna', 'committer_email': 'khanna.tanmai@gmail.com', 'commit_date': datetime.datetime(2017, 3, 11, 19, 41, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15d83f8e020cb486dfb1a4eeee76c043f680dac7', 'committer_username': 'khannatanmai', 'committer_name': 'Tanmai Khanna', 'committer_email': 'khanna.tanmai@gmail.com', 'commit_date': datetime.datetime(2017, 3, 11, 19, 41, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11dca8e2948efc5654ba4bf62e0542a30380665e', 'committer_username': 'khannatanmai', 'committer_name': 'Tanmai Khanna', 'committer_email': 'khanna.tanmai@gmail.com', 'commit_date': datetime.datetime(2017, 3, 11, 19, 41, 1, tzinfo=datetime.timezone.utc)}]",Tanmai Khanna,26350622,khanna.tanmai@gmail.com,User,,20,,16,15
474908680,Superblank ordering in transfer,"Since the blank reordering is now handled by wordbound blanks, superblanks don't need to reorder anymore and the user doesn't need to be troubled with the blank positions in the transfer rules.

Blanks are now stored as a queue and printed in the rule output wherever the user has provided a ``<b/>``. If there are more ``<b/>`` after all the blanks are printed, they'll be spaces. Also, if there are blanks remaining in the queue after the rule has finished outputting, then the remaining ones will be output after the rule output. When the remaining blanks are flushed then spaces are ignored.

NOTE: ``<b pos=""X""/>`` is now the same as ``<b/>``

EXAMPLE 1:
Input:
```
[blank1] ^worda<det>/wordta<det>$ ;[blank2]; ^wordb<adj>/wordtb<adj>$ [blank3];  ^hun<n><acr>/ho<n><acr>$ [blank4]
```
There's no ``<b/>`` in rule output, so all blanks after flushed after rule output.

Output:
```
[blank1] ^test1<adj>{^wordta<det>$^wordtb<adj>$^ho<n><acr>$}$ ;[blank2];  [blank3];   [blank4]
```

EXAMPLE 2:
Input: 
```
[blank1] ^wordb<adj>/wordtb<adj>$ ;[blank2]; ^worda<det>/wordta<det>$ [blank3];  ^hun<n><acr>/ho<n><acr>$ [blank4]
```
There's one ``<b/>`` in rule output, so it prints one and flushes the rest.

Output:
```
[blank1] ^test1<det>{^wordta<det>$ ;[blank2]; ^ho<n><acr>$}$ [blank3];   [blank4]
```

This has been implemented for the chunker, interchunk, and postchunk.

Added lots of tests for this functionality as well.",True,102,https://api.github.com/repos/apertium/apertium/pulls/102,https://github.com/apertium/apertium/pull/102,closed,631,156,15,6,2,0,0,0,[],2020-08-27 19:38:01+00:00,2020-08-29 12:33:32+00:00,147331.0,"1 day, 16:55:31",[],"[{'commit_sha': '8d420a7ea454a35308c4e8db917b5a5c626fcbd0', 'committer_username': 'khannatanmai', 'committer_name': 'Tanmai Khanna', 'committer_email': 'khanna.tanmai@gmail.com', 'commit_date': datetime.datetime(2017, 3, 11, 19, 41, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0698361fb3573215c50d0aa8926b74fca287e084', 'committer_username': 'khannatanmai', 'committer_name': 'Tanmai Khanna', 'committer_email': 'khanna.tanmai@gmail.com', 'commit_date': datetime.datetime(2017, 3, 11, 19, 41, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66ea1399c6a97936b84c725e027a8c5671894b80', 'committer_username': 'khannatanmai', 'committer_name': 'Tanmai Khanna', 'committer_email': 'khanna.tanmai@gmail.com', 'commit_date': datetime.datetime(2017, 3, 11, 19, 41, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b164be07371be852949941484b127f99ac864c8b', 'committer_username': 'khannatanmai', 'committer_name': 'Tanmai Khanna', 'committer_email': 'khanna.tanmai@gmail.com', 'commit_date': datetime.datetime(2017, 3, 11, 19, 41, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '925e61b0b084c32e323057ee33a4e2cac5842c2a', 'committer_username': 'khannatanmai', 'committer_name': 'Tanmai Khanna', 'committer_email': 'khanna.tanmai@gmail.com', 'commit_date': datetime.datetime(2017, 3, 11, 19, 41, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '691b6f75c18112d8462198278bb04a4d79a63d0e', 'committer_username': 'khannatanmai', 'committer_name': 'Tanmai Khanna', 'committer_email': 'khanna.tanmai@gmail.com', 'commit_date': datetime.datetime(2017, 3, 11, 19, 41, 1, tzinfo=datetime.timezone.utc)}]",Tanmai Khanna,26350622,khanna.tanmai@gmail.com,User,,20,,16,15
466312018,Wordbound blanks in Recursive Transfer,"- Wordbound blanks are read as part of LUs as a new side->wblank.
- Wblanks reorder with the LUs in transfer based on where the lemma is clipped from.
- Works even if lemma is clipped into a variable and the variable is later added in the output.
- No regression. Stream without wordbound blanks work as-is.
- Normal blanks don't move around while wordbound blanks move around.
- Tests added.
- When MLUs are formed the blanks are merged.
- MLU tests added.",True,65,https://api.github.com/repos/apertium/apertium-recursive/pulls/65,https://github.com/apertium/apertium-recursive/pull/65,closed,1108,520,28,20,7,14,0,0,[],2020-08-11 19:34:51+00:00,2020-08-12 17:13:15+00:00,77904.0,21:38:24,"[{'comment_id': 468844306, 'comment_body': 'extraneous debug comment', 'comment_created': datetime.datetime(2020, 8, 11, 20, 27, 3, tzinfo=datetime.timezone.utc), 'commenter': 'mr-martian', 'type': 'User'}, {'comment_id': 468853202, 'comment_body': 'The rtx equivalent is probably\r\n```\r\ngender = m f mf;\r\nnumber = sg pl sp;\r\n\r\nn: _.gender.number;\r\nadj: _.gender.number;\r\nvblex: _.number;\r\nNP: _;\r\nV: _;\r\n\r\nNP -> adj %n [$%number=2.number/tl, $%lemvar=1.lemh/tl] { 2 _1 1[lemh=$%lemvar, number=2.number/sl] } ;\r\n\r\nV -> %vblex [$%number=(if ($%number = """") sg else $%number), $%lemvar=1.lemh/tl] { 1[lemh=$%lemvar, number=$%number] } ;\r\n```', 'comment_created': datetime.datetime(2020, 8, 11, 20, 43, 37, tzinfo=datetime.timezone.utc), 'commenter': 'mr-martian', 'type': 'User'}, {'comment_id': 468860216, 'comment_body': ""Syntax Error hmm:\r\n```\r\n$ rtx-comp tests/WblankVariable.rtx test.bin\r\nSyntax error on line 10 of tests/WblankVariable.rtx: expected '/', found '$'\r\nNP -> adj %n [$%number=2.number/tl, $%lemvar=1.lemh/tl] { 2 _1 1[lemh=$%lemvar, number=2.number/sl] } ;\r\n                                   ^^^\r\n```"", 'comment_created': datetime.datetime(2020, 8, 11, 20, 56, 53, tzinfo=datetime.timezone.utc), 'commenter': 'khannatanmai', 'type': 'User'}, {'comment_id': 468860684, 'comment_body': 'will remove in last commit', 'comment_created': datetime.datetime(2020, 8, 11, 20, 57, 47, tzinfo=datetime.timezone.utc), 'commenter': 'khannatanmai', 'type': 'User'}, {'comment_id': 468864415, 'comment_body': 'syntax issue fixed in 9982536', 'comment_created': datetime.datetime(2020, 8, 11, 21, 5, 19, tzinfo=datetime.timezone.utc), 'commenter': 'mr-martian', 'type': 'User'}, {'comment_id': 469404387, 'comment_body': 'Why was this changed?', 'comment_created': datetime.datetime(2020, 8, 12, 16, 56, 27, tzinfo=datetime.timezone.utc), 'commenter': 'mr-martian', 'type': 'User'}, {'comment_id': 469405251, 'comment_body': 'Seems like maybe this should be the other order?', 'comment_created': datetime.datetime(2020, 8, 12, 16, 57, 49, tzinfo=datetime.timezone.utc), 'commenter': 'mr-martian', 'type': 'User'}, {'comment_id': 469406282, 'comment_body': 'It gives an error to have a default value in the declaration. The default value is there in the cc file so nothing really changes.', 'comment_created': datetime.datetime(2020, 8, 12, 16, 59, 27, tzinfo=datetime.timezone.utc), 'commenter': 'khannatanmai', 'type': 'User'}, {'comment_id': 469407434, 'comment_body': ""I don't see the initializers in the .cc"", 'comment_created': datetime.datetime(2020, 8, 12, 17, 1, 21, tzinfo=datetime.timezone.utc), 'commenter': 'mr-martian', 'type': 'User'}, {'comment_id': 469407669, 'comment_body': 'as in `wblank, other->wblank`', 'comment_created': datetime.datetime(2020, 8, 12, 17, 1, 45, tzinfo=datetime.timezone.utc), 'commenter': 'mr-martian', 'type': 'User'}, {'comment_id': 469409754, 'comment_body': 'Yeah it seems like it but apparently other is the first one in order and the current chunk is the second one.', 'comment_created': datetime.datetime(2020, 8, 12, 17, 5, 24, tzinfo=datetime.timezone.utc), 'commenter': 'khannatanmai', 'type': 'User'}, {'comment_id': 469409916, 'comment_body': 'See the conjoined LU tests', 'comment_created': datetime.datetime(2020, 8, 12, 17, 5, 41, tzinfo=datetime.timezone.utc), 'commenter': 'khannatanmai', 'type': 'User'}, {'comment_id': 469412182, 'comment_body': 'weird, but ok', 'comment_created': datetime.datetime(2020, 8, 12, 17, 9, 42, tzinfo=datetime.timezone.utc), 'commenter': 'mr-martian', 'type': 'User'}, {'comment_id': 469412399, 'comment_body': 'Right, I moved it earlier, but forgot to add it again. Added', 'comment_created': datetime.datetime(2020, 8, 12, 17, 9, 56, tzinfo=datetime.timezone.utc), 'commenter': 'khannatanmai', 'type': 'User'}]","[{'commit_sha': 'c0d456810ce59da758ea805d8b3c7017a4820a76', 'committer_username': 'khannatanmai', 'committer_name': 'Tanmai Khanna', 'committer_email': 'khanna.tanmai@gmail.com', 'commit_date': datetime.datetime(2017, 3, 11, 19, 41, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa7a03034b6c019d98d9033a3db935aa10c0e4d6', 'committer_username': 'khannatanmai', 'committer_name': 'Tanmai Khanna', 'committer_email': 'khanna.tanmai@gmail.com', 'commit_date': datetime.datetime(2017, 3, 11, 19, 41, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a37e5b84fed83a1d099268c36fd16708dd441f17', 'committer_username': 'khannatanmai', 'committer_name': 'Tanmai Khanna', 'committer_email': 'khanna.tanmai@gmail.com', 'commit_date': datetime.datetime(2017, 3, 11, 19, 41, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3689ac0efee42d897269dee4768b59e81f1ccf36', 'committer_username': 'khannatanmai', 'committer_name': 'Tanmai Khanna', 'committer_email': 'khanna.tanmai@gmail.com', 'commit_date': datetime.datetime(2017, 3, 11, 19, 41, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38b1060d382e6693598709f92369b46d946164a1', 'committer_username': 'khannatanmai', 'committer_name': 'Tanmai Khanna', 'committer_email': 'khanna.tanmai@gmail.com', 'commit_date': datetime.datetime(2017, 3, 11, 19, 41, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b91d5f09fca6e256934114723740419f786e9674', 'committer_username': 'khannatanmai', 'committer_name': 'Tanmai Khanna', 'committer_email': 'khanna.tanmai@gmail.com', 'commit_date': datetime.datetime(2017, 3, 11, 19, 41, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2839a4af7c63b7653198cbf8cd5ac1c13c7a46e7', 'committer_username': 'khannatanmai', 'committer_name': 'Tanmai Khanna', 'committer_email': 'khanna.tanmai@gmail.com', 'commit_date': datetime.datetime(2017, 3, 11, 19, 41, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11a0a3bf3470cf78c04f658490ce383e25052199', 'committer_username': 'khannatanmai', 'committer_name': 'Tanmai Khanna', 'committer_email': 'khanna.tanmai@gmail.com', 'commit_date': datetime.datetime(2017, 3, 11, 19, 41, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62374cf018ebabcca7d6f4bd1f2a8afd8ef6e3ad', 'committer_username': 'khannatanmai', 'committer_name': 'Tanmai Khanna', 'committer_email': 'khanna.tanmai@gmail.com', 'commit_date': datetime.datetime(2017, 3, 11, 19, 41, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9982536ab311a9b4472ac6d724927379ca137025', 'committer_username': 'mr-martian', 'committer_name': 'Daniel Swanson', 'committer_email': 'popcorn.tomato.dude@gmail.com', 'commit_date': datetime.datetime(2013, 8, 31, 2, 12, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '43b2234597f7702638dc24e0da2d8f26b43cca19', 'committer_username': 'khannatanmai', 'committer_name': 'Tanmai Khanna', 'committer_email': 'khanna.tanmai@gmail.com', 'commit_date': datetime.datetime(2017, 3, 11, 19, 41, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5cc5f81d32fd3ea9f9650fcf38385ae8152864d3', 'committer_username': 'khannatanmai', 'committer_name': 'Tanmai Khanna', 'committer_email': 'khanna.tanmai@gmail.com', 'commit_date': datetime.datetime(2017, 3, 11, 19, 41, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57e2e1bd0faf3d4bbd0f07049caf50ffaef2991a', 'committer_username': 'khannatanmai', 'committer_name': 'Tanmai Khanna', 'committer_email': 'khanna.tanmai@gmail.com', 'commit_date': datetime.datetime(2017, 3, 11, 19, 41, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9571e681e9200bf50fdb5ec3ece2c142ff4c1306', 'committer_username': 'khannatanmai', 'committer_name': 'Tanmai Khanna', 'committer_email': 'khanna.tanmai@gmail.com', 'commit_date': datetime.datetime(2017, 3, 11, 19, 41, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4479b4108558b25133bc015337445bc606452fff', 'committer_username': 'khannatanmai', 'committer_name': 'Tanmai Khanna', 'committer_email': 'khanna.tanmai@gmail.com', 'commit_date': datetime.datetime(2017, 3, 11, 19, 41, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25192fd3d123006563de31156e4faf0aa8da6d64', 'committer_username': 'khannatanmai', 'committer_name': 'Tanmai Khanna', 'committer_email': 'khanna.tanmai@gmail.com', 'commit_date': datetime.datetime(2017, 3, 11, 19, 41, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b529a0422526f7f8cc4829dca8c45498d312f226', 'committer_username': 'khannatanmai', 'committer_name': 'Tanmai Khanna', 'committer_email': 'khanna.tanmai@gmail.com', 'commit_date': datetime.datetime(2017, 3, 11, 19, 41, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc1d56d4419f2789dc8b0bd6ed5be0aceb8954c7', 'committer_username': 'khannatanmai', 'committer_name': 'Tanmai Khanna', 'committer_email': 'khanna.tanmai@gmail.com', 'commit_date': datetime.datetime(2017, 3, 11, 19, 41, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d43c25395eb95eaabd3312b3c68af689399c352', 'committer_username': 'khannatanmai', 'committer_name': 'Tanmai Khanna', 'committer_email': 'khanna.tanmai@gmail.com', 'commit_date': datetime.datetime(2017, 3, 11, 19, 41, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88b494ea9fe6efacc246ae54942042c86d6b9d6b', 'committer_username': 'khannatanmai', 'committer_name': 'Tanmai Khanna', 'committer_email': 'khanna.tanmai@gmail.com', 'commit_date': datetime.datetime(2017, 3, 11, 19, 41, 1, tzinfo=datetime.timezone.utc)}]",Tanmai Khanna,26350622,khanna.tanmai@gmail.com,User,,20,,16,15
445654563,Wordbound blanks distribute to parts in pretransfer,"Pretty straightforward.
Turns an expected failure test into a passing one.

Examples:
```
Input:
[[t:i:abc123]]^a<vblex><pres>+c<po># b$

Output:
[[t:i:abc123]]^a# b<vblex><pres>$ [[t:i:abc123]]^c<po>$
```

```
Input:
[[t:i:xyz456]]^a<vblex><pres>+c<po>+d<po># b$

Output:
[[t:i:xyz456]]^a# b<vblex><pres>$ [[t:i:xyz456]]^c<po>$ [[t:i:xyz456]]^d<po>$
```",True,93,https://api.github.com/repos/apertium/apertium/pulls/93,https://github.com/apertium/apertium/pull/93,closed,80,15,3,1,0,0,1,0,[{'name': 'pretransfer'}],2020-07-07 20:26:24+00:00,2020-07-07 21:37:55+00:00,4291.0,1:11:31,[],"[{'commit_sha': '2c8bab827d92f8f4755ca867b65c608907f9295d', 'committer_username': 'khannatanmai', 'committer_name': 'Tanmai Khanna', 'committer_email': 'khanna.tanmai@gmail.com', 'commit_date': datetime.datetime(2017, 3, 11, 19, 41, 1, tzinfo=datetime.timezone.utc)}]",Tanmai Khanna,26350622,khanna.tanmai@gmail.com,User,,20,,16,15
448924044,Merge wordbound blanks and add to all LUs in output,"Since there is no aligning in -separable rules, this seems to be the safest solution of distributing information on output LUs.

For multiwords (many to one), this will work fine, and for one to many as well. For many to many, this will duplicate some information. Still thinking of better ways to deal with this.

Example:
Input:
```
^the<det><def><sp>$ [[t:i:123456]]^Aragonese<n><sg>$ [[t:b:basfs]]^take<vblex><past>$ [[t:s:123545]]^Ramiro<np><ant><m><sg>$ [[t:x:abc123]]^out of<pr>$ [[t:y:vdfdrf]]^a<det><ind><sg>$
^monastery<n><sg>$ ^and<cnjcoo>$ ^make<vblex><pp>$ ^prpers<prn><obj><p3><m><sg>$ ^king<n><sg>$^.<sent>$

[[t:b:basfs]]^take<vblex><past>$ [[t:s:123545]]^Ramiro<np><ant><m><sg>$ [[t:x:abc123]]^out<adv>$ ^of<pr>$ [[t:y:vdfdrf]]^a<det><ind><sg>$
```

Output:
```
^the<det><def><sp>$ [[t:i:123456]]^Aragonese<n><sg>$ [[t:b:basfs; t:s:123545; t:x:abc123]]^take# out<vblex><sep><past>$ [[t:b:basfs; t:s:123545; t:x:abc123]]^Ramiro<np><ant><m><sg>$ [[t:b:basfs; t:s:123545; t:x:abc123]]^of<pr>$ [[t:y:vdfdrf]]^a<det><ind><sg>$
^monastery<n><sg>$ ^and<cnjcoo>$ ^make<vblex><pp>$ ^prpers<prn><obj><p3><m><sg>$ ^king<n><sg>$^.<sent>$

[[t:b:basfs; t:s:123545; t:x:abc123]]^take# out<vblex><sep><past>$ [[t:b:basfs; t:s:123545; t:x:abc123]]^Ramiro<np><ant><m><sg>$ [[t:b:basfs; t:s:123545; t:x:abc123]]^<adv>$ ^of<pr>$ [[t:y:vdfdrf]]^a<det><ind><sg>$
```",True,29,https://api.github.com/repos/apertium/apertium-separable/pulls/29,https://github.com/apertium/apertium-separable/pull/29,closed,32,5,1,2,0,0,0,0,[],2020-07-14 14:39:57+00:00,2020-07-14 14:55:30+00:00,933.0,0:15:33,[],"[{'commit_sha': 'b8478faa17948cc6f1a66e70f02bcba42faa575a', 'committer_username': 'khannatanmai', 'committer_name': 'Tanmai Khanna', 'committer_email': 'khanna.tanmai@gmail.com', 'commit_date': datetime.datetime(2017, 3, 11, 19, 41, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f8ab549f2233d23275911e12faa39c8d9315d939', 'committer_username': 'khannatanmai', 'committer_name': 'Tanmai Khanna', 'committer_email': 'khanna.tanmai@gmail.com', 'commit_date': datetime.datetime(2017, 3, 11, 19, 41, 1, tzinfo=datetime.timezone.utc)}]",Tanmai Khanna,26350622,khanna.tanmai@gmail.com,User,,20,,16,15
449727495,Wordbound blanks parsed as normal blanks,"- Parsing wordbound blanks as normal blanks for analysis, generation, biltrans, postgeneration.
- Also removed unused code for secondary tags.
- Added a test for wordbound blank analysis.",True,101,https://api.github.com/repos/apertium/lttoolbox/pulls/101,https://github.com/apertium/lttoolbox/pull/101,closed,140,58,4,6,0,0,0,0,[],2020-07-15 20:48:45+00:00,2020-07-15 21:07:05+00:00,1100.0,0:18:20,[],"[{'commit_sha': 'e8a5741af3f95daebcce0b270f7875501cb8955e', 'committer_username': 'khannatanmai', 'committer_name': 'Tanmai Khanna', 'committer_email': 'khanna.tanmai@gmail.com', 'commit_date': datetime.datetime(2017, 3, 11, 19, 41, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3ed60bc06a60cbe9b0870d9bf8fefc4c7bacddb', 'committer_username': 'khannatanmai', 'committer_name': 'Tanmai Khanna', 'committer_email': 'khanna.tanmai@gmail.com', 'commit_date': datetime.datetime(2017, 3, 11, 19, 41, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '65cf9ea9485fa011c0e047fc0764a119cc173996', 'committer_username': 'khannatanmai', 'committer_name': 'Tanmai Khanna', 'committer_email': 'khanna.tanmai@gmail.com', 'commit_date': datetime.datetime(2017, 3, 11, 19, 41, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '496c9830b6d527c16c90148b5a804e13cf44e8bf', 'committer_username': 'khannatanmai', 'committer_name': 'Tanmai Khanna', 'committer_email': 'khanna.tanmai@gmail.com', 'commit_date': datetime.datetime(2017, 3, 11, 19, 41, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2953ae3a6aaf2365dbbf9738b58bb619f392f03c', 'committer_username': 'khannatanmai', 'committer_name': 'Tanmai Khanna', 'committer_email': 'khanna.tanmai@gmail.com', 'commit_date': datetime.datetime(2017, 3, 11, 19, 41, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '735b38be3043db0cab131ee75e80eaed03191375', 'committer_username': 'khannatanmai', 'committer_name': 'Tanmai Khanna', 'committer_email': 'khanna.tanmai@gmail.com', 'commit_date': datetime.datetime(2017, 3, 11, 19, 41, 1, tzinfo=datetime.timezone.utc)}]",Tanmai Khanna,26350622,khanna.tanmai@gmail.com,User,,20,,16,15
470015742,Parse wordbound blanks as normal blanks in hfst-proc,"Changes made to the tokeniser in hfst-proc, such that wordbound blanks are parsed as normal blanks.",True,478,https://api.github.com/repos/hfst/hfst/pulls/478,https://github.com/hfst/hfst/pull/478,closed,38,1,2,3,0,0,0,0,[],2020-08-19 08:47:37+00:00,2020-08-19 08:48:45+00:00,68.0,0:01:08,[],"[{'commit_sha': '2ea36928f9d450b027f469385477937f47065368', 'committer_username': 'khannatanmai', 'committer_name': 'Tanmai Khanna', 'committer_email': 'khanna.tanmai@gmail.com', 'commit_date': datetime.datetime(2017, 3, 11, 19, 41, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a7fb4aa89ba9f728c55b877cf8d324a77251b73', 'committer_username': 'khannatanmai', 'committer_name': 'Tanmai Khanna', 'committer_email': 'khanna.tanmai@gmail.com', 'commit_date': datetime.datetime(2017, 3, 11, 19, 41, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '756aaf2d406d3fb09ae09108d1b4b00cbe408b9f', 'committer_username': 'khannatanmai', 'committer_name': 'Tanmai Khanna', 'committer_email': 'khanna.tanmai@gmail.com', 'commit_date': datetime.datetime(2017, 3, 11, 19, 41, 1, tzinfo=datetime.timezone.utc)}]",Tanmai Khanna,26350622,khanna.tanmai@gmail.com,User,,20,,16,15
450841667,Parsing wordbound blanks with the lexical unit,"- New attribute in the Lexical Unit class:
```wordbound_blank (str): The wordbound blank of the lexical unit.```
- Wordbound blanks are parsed as part of the lexical unit. So if input: ``[[t:b:123456]]^My/My<det><pos><sp>$``, then the string member ``LexicalUnit.lexical_unit`` will be: ``[[t:b:123456]]^My/My<det><pos><sp>``, as opposed to the usual ``My/My<det><pos><sp>``.
- ``LexicalUnit.word_form`` contains only the surface form ``My``, and ``LexicalUnit.wordbound_blank`` contains ``[[t:b:123456]]``.
- Tests added.
- Closes #36 ",True,37,https://api.github.com/repos/apertium/streamparser/pulls/37,https://github.com/apertium/streamparser/pull/37,closed,54,3,2,10,8,13,0,0,[],2020-07-17 06:53:30+00:00,2020-09-06 21:35:19+00:00,4459309.0,"51 days, 14:41:49","[{'comment_id': 484006062, 'comment_body': '```suggestion\r\n        if ""]]^"" in cohort[0]:\r\n```', 'comment_created': datetime.datetime(2020, 9, 6, 1, 5, 22, tzinfo=datetime.timezone.utc), 'commenter': 'sushain97', 'type': 'User'}, {'comment_id': 484006087, 'comment_body': 'Do you want to limit this split? i.e. \r\n```suggestion\r\n            split_form = cohort[0].split(""]]^"", 1)\r\n```', 'comment_created': datetime.datetime(2020, 9, 6, 1, 5, 57, tzinfo=datetime.timezone.utc), 'commenter': 'sushain97', 'type': 'User'}, {'comment_id': 484006117, 'comment_body': 'If the split is limited, you can name each element, i.e.\r\n`wordbound_blank, wordform = cohort[0].split(...)`', 'comment_created': datetime.datetime(2020, 9, 6, 1, 6, 33, tzinfo=datetime.timezone.utc), 'commenter': 'sushain97', 'type': 'User'}, {'comment_id': 484006212, 'comment_body': 'Extra newlines?', 'comment_created': datetime.datetime(2020, 9, 6, 1, 8, 5, tzinfo=datetime.timezone.utc), 'commenter': 'sushain97', 'type': 'User'}, {'comment_id': 484018290, 'comment_body': ""sure, although ]]^ cant occur in it more than once, but doesn't hurt"", 'comment_created': datetime.datetime(2020, 9, 6, 4, 6, 35, tzinfo=datetime.timezone.utc), 'commenter': 'khannatanmai', 'type': 'User'}, {'comment_id': 484035900, 'comment_body': ""Isn't it possible to have `[[]]`? In that case, you would get the same result, right? It feels like this ought to be `None` here instead. What do you think?"", 'comment_created': datetime.datetime(2020, 9, 6, 7, 46, 40, tzinfo=datetime.timezone.utc), 'commenter': 'sushain97', 'type': 'User'}, {'comment_id': 484037109, 'comment_body': ""It can be ``None``. But no, ``[[]]`` isn't possible."", 'comment_created': datetime.datetime(2020, 9, 6, 7, 58, 43, tzinfo=datetime.timezone.utc), 'commenter': 'khannatanmai', 'type': 'User'}, {'comment_id': 484037624, 'comment_body': 'What do you think provides better semantics/a nicer API here?', 'comment_created': datetime.datetime(2020, 9, 6, 8, 4, 8, tzinfo=datetime.timezone.utc), 'commenter': 'sushain97', 'type': 'User'}, {'comment_id': 484038070, 'comment_body': ""In case someone wants to concatenate the wordbound blanks with the LU or combine wblanks, it might be better to return an empty string rather than ``None``. But I don't use python much so you'd be a better judge of that."", 'comment_created': datetime.datetime(2020, 9, 6, 8, 8, 31, tzinfo=datetime.timezone.utc), 'commenter': 'khannatanmai', 'type': 'User'}, {'comment_id': 484039687, 'comment_body': ""That's a good point. How does other apertium tooling behave in the presence of `[[]]^...`?\r\n\r\nI generally prefer having empty string and `None` having different semantics (i.e. this should be `= None` IMO) but it's not a strongly held opinion in this particular case."", 'comment_created': datetime.datetime(2020, 9, 6, 8, 24, 44, tzinfo=datetime.timezone.utc), 'commenter': 'sushain97', 'type': 'User'}, {'comment_id': 484040010, 'comment_body': ""With other tools, the wordbound_blank member is an empty string if there's no attached wblank. I have no strong opinion here either, mostly I think it won't make much of a difference, and if they wanna concatenate and stuff they can check for ``None`` first anyway, so I'll just change it."", 'comment_created': datetime.datetime(2020, 9, 6, 8, 27, 50, tzinfo=datetime.timezone.utc), 'commenter': 'khannatanmai', 'type': 'User'}, {'comment_id': 484041968, 'comment_body': ""hmmm I can't just change it to ``None``?"", 'comment_created': datetime.datetime(2020, 9, 6, 8, 47, 12, tzinfo=datetime.timezone.utc), 'commenter': 'khannatanmai', 'type': 'User'}, {'comment_id': 484103231, 'comment_body': ""Ok I've decided to keep it as an empty string. It'll be much more helpful and consistent with other tools."", 'comment_created': datetime.datetime(2020, 9, 6, 18, 59, 35, tzinfo=datetime.timezone.utc), 'commenter': 'khannatanmai', 'type': 'User'}]","[{'commit_sha': '31202405071d58c8f0e72fe4ead3c5e32373639c', 'committer_username': 'khannatanmai', 'committer_name': 'Tanmai Khanna', 'committer_email': 'khanna.tanmai@gmail.com', 'commit_date': datetime.datetime(2017, 3, 11, 19, 41, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12e8f975dbdf58ce197c4e4770d5db14871bb5d2', 'committer_username': 'khannatanmai', 'committer_name': 'Tanmai Khanna', 'committer_email': 'khanna.tanmai@gmail.com', 'commit_date': datetime.datetime(2017, 3, 11, 19, 41, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e80ba9e7b5830c91af496cffb04d92cca5750e6', 'committer_username': 'khannatanmai', 'committer_name': 'Tanmai Khanna', 'committer_email': 'khanna.tanmai@gmail.com', 'commit_date': datetime.datetime(2017, 3, 11, 19, 41, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d5cc3e0549856d3fa3f4289824f00632df16999', 'committer_username': 'khannatanmai', 'committer_name': 'Tanmai Khanna', 'committer_email': 'khanna.tanmai@gmail.com', 'commit_date': datetime.datetime(2017, 3, 11, 19, 41, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44064bba0e21b6718a7ec07b43e0c0ef7e8c8f4b', 'committer_username': 'khannatanmai', 'committer_name': 'Tanmai Khanna', 'committer_email': 'khanna.tanmai@gmail.com', 'commit_date': datetime.datetime(2017, 3, 11, 19, 41, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef9b5f13691f6e4c4ba9d4008e98bd64dc1da639', 'committer_username': 'khannatanmai', 'committer_name': 'Tanmai Khanna', 'committer_email': 'khanna.tanmai@gmail.com', 'commit_date': datetime.datetime(2017, 3, 11, 19, 41, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '806311fe1c4bdfc1f9e639bf5e301140458456d4', 'committer_username': 'khannatanmai', 'committer_name': 'Tanmai Khanna', 'committer_email': 'khanna.tanmai@gmail.com', 'commit_date': datetime.datetime(2017, 3, 11, 19, 41, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93601610d690508e4d2b0012b03de3087006dfd7', 'committer_username': 'khannatanmai', 'committer_name': 'Tanmai Khanna', 'committer_email': 'khanna.tanmai@gmail.com', 'commit_date': datetime.datetime(2017, 3, 11, 19, 41, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4dd06177dca1635767035faadaad35af169df30d', 'committer_username': 'khannatanmai', 'committer_name': 'Tanmai Khanna', 'committer_email': 'khanna.tanmai@gmail.com', 'commit_date': datetime.datetime(2017, 3, 11, 19, 41, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '94cb1cde5c31e59f0a0fc32cb0d844721085ca66', 'committer_username': 'khannatanmai', 'committer_name': 'Tanmai Khanna', 'committer_email': 'khanna.tanmai@gmail.com', 'commit_date': datetime.datetime(2017, 3, 11, 19, 41, 1, tzinfo=datetime.timezone.utc)}]",Tanmai Khanna,26350622,khanna.tanmai@gmail.com,User,,20,,16,15
454674174,Wordbound blank handling in post generation,"- Wordbound blanks merge when words merge.
- Wordbound blanks apply to all output words when output of postgen rule are more than input words.
- No regression for postgeneration without wordbound blanks.
- Lots of tests added.

Example:
Input:
```
[[t:b:Z9eiLA]]El[[/]] [[t:s:8AjRFw]]perro[[/]] [[t:i:4_tPUA]]~de[[/]] [[t:b:123445]]el[[/]] [[t:i:wSM6RQ]]amigo[[/]][]
```

Output:
```
[[t:b:Z9eiLA]]El[[/]] [[t:s:8AjRFw]]perro[[/]] [[t:i:4_tPUA; t:b:123445]]del[[/]] [[t:i:wSM6RQ]]amigo[[/]][]
```

For more examples see ``PostgenerationWordboundBlankTest`` in ``lttoolbox/tests/lt_proc/__init__.py``.",True,102,https://api.github.com/repos/apertium/lttoolbox/pulls/102,https://github.com/apertium/lttoolbox/pull/102,closed,363,11,4,5,0,0,0,0,[],2020-07-21 18:29:04+00:00,2020-07-22 13:48:28+00:00,69564.0,19:19:24,[],"[{'commit_sha': 'ca9d8042ea322f14a3ee1944082b192c5f8577cc', 'committer_username': 'khannatanmai', 'committer_name': 'Tanmai Khanna', 'committer_email': 'khanna.tanmai@gmail.com', 'commit_date': datetime.datetime(2017, 3, 11, 19, 41, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f4c956c199957fe05f1530e0dcefd8d0511ed57c', 'committer_username': 'khannatanmai', 'committer_name': 'Tanmai Khanna', 'committer_email': 'khanna.tanmai@gmail.com', 'commit_date': datetime.datetime(2017, 3, 11, 19, 41, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ffba25dde80ef66c8c3e9ff03e5af0513c9087bf', 'committer_username': 'khannatanmai', 'committer_name': 'Tanmai Khanna', 'committer_email': 'khanna.tanmai@gmail.com', 'commit_date': datetime.datetime(2017, 3, 11, 19, 41, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ddd7736532a1675e12dad31bf3f23dcdd0463a7', 'committer_username': 'khannatanmai', 'committer_name': 'Tanmai Khanna', 'committer_email': 'khanna.tanmai@gmail.com', 'commit_date': datetime.datetime(2017, 3, 11, 19, 41, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd76fe7d7e23b879f37c7fb140493b82adac1f62f', 'committer_username': 'khannatanmai', 'committer_name': 'Tanmai Khanna', 'committer_email': 'khanna.tanmai@gmail.com', 'commit_date': datetime.datetime(2017, 3, 11, 19, 41, 1, tzinfo=datetime.timezone.utc)}]",Tanmai Khanna,26350622,khanna.tanmai@gmail.com,User,,20,,16,15
469638978,Parsing wblanks and prefix tags in the tagger,"Changes made to the parser such that it parses wblanks as normal blanks, and also accepts prefix tags.

Example Input:
```
[[t:b:Z9eiLA]]^I/Prpers<prn><subj><p1><mf><sg>$ ^am/<test><test2>be<vbser><pres><p1><sg>$ [[t:b:QjZnxQ]]^David/<testl><testm>David<np><cog><sg>/<test1><test3>David<np><ant><m><sg>$[[t:b:QjZnxQ]]^./.<sent>$[]
```

Example Output:
```
[[t:b:Z9eiLA]]^Prpers<prn><subj><p1><mf><sg>$ ^be<test><test2><vbser><pres><p1><sg>$ [[t:b:QjZnxQ]]^David<testl><testm><np><cog><sg>$[[t:b:QjZnxQ]]^.<sent>$[]
```

May close #92 ",True,98,https://api.github.com/repos/apertium/apertium/pulls/98,https://github.com/apertium/apertium/pull/98,closed,22,24,1,2,1,0,0,0,[],2020-08-18 17:31:28+00:00,2020-08-20 06:06:45+00:00,131717.0,"1 day, 12:35:17",[],"[{'commit_sha': 'e543cbb3cbbaec27d86a392164c551eb1f80aba1', 'committer_username': 'khannatanmai', 'committer_name': 'Tanmai Khanna', 'committer_email': 'khanna.tanmai@gmail.com', 'commit_date': datetime.datetime(2017, 3, 11, 19, 41, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2e954db0dc39f7e87d6ba805f64cf47b251ab429', 'committer_username': 'khannatanmai', 'committer_name': 'Tanmai Khanna', 'committer_email': 'khanna.tanmai@gmail.com', 'commit_date': datetime.datetime(2017, 3, 11, 19, 41, 1, tzinfo=datetime.timezone.utc)}]",Tanmai Khanna,26350622,khanna.tanmai@gmail.com,User,,20,,16,15

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
124332071,apertium,apertium/apertium,C++,25,86,19,39,926,51,10,3,"[{'id': 479397786, 'number': 105, 'closed': datetime.datetime(2020, 9, 4, 7, 58, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 4, 7, 45, 23, tzinfo=datetime.timezone.utc), 'time_taken': 815.0, 'time_delta': '0:13:35', 'additions': 3, 'deletions': 27, 'state': 'closed'}, {'id': 474908680, 'number': 102, 'closed': datetime.datetime(2020, 8, 29, 12, 33, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 27, 19, 38, 1, tzinfo=datetime.timezone.utc), 'time_taken': 147331.0, 'time_delta': '1 day, 16:55:31', 'additions': 631, 'deletions': 156, 'state': 'closed'}, {'id': 469638978, 'number': 98, 'closed': datetime.datetime(2020, 8, 20, 6, 6, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 18, 17, 31, 28, tzinfo=datetime.timezone.utc), 'time_taken': 131717.0, 'time_delta': '1 day, 12:35:17', 'additions': 22, 'deletions': 24, 'state': 'closed'}, {'id': 452749655, 'number': 94, 'closed': datetime.datetime(2020, 7, 20, 8, 12, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 19, 20, 10, 33, tzinfo=datetime.timezone.utc), 'time_taken': 43318.0, 'time_delta': '12:01:58', 'additions': 124, 'deletions': 6, 'state': 'closed'}, {'id': 445654563, 'number': 93, 'closed': datetime.datetime(2020, 7, 7, 21, 37, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 7, 20, 26, 24, tzinfo=datetime.timezone.utc), 'time_taken': 4291.0, 'time_delta': '1:11:31', 'additions': 80, 'deletions': 15, 'state': 'closed'}, {'id': 444293615, 'number': 90, 'closed': datetime.datetime(2020, 7, 7, 10, 47, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 4, 14, 53, 58, tzinfo=datetime.timezone.utc), 'time_taken': 244440.0, 'time_delta': '2 days, 19:54:00', 'additions': 710, 'deletions': 205, 'state': 'closed'}, {'id': 416777593, 'number': 73, 'closed': datetime.datetime(2020, 5, 19, 15, 19, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 12, 14, 51, 18, tzinfo=datetime.timezone.utc), 'time_taken': 606470.0, 'time_delta': '7 days, 0:27:50', 'additions': 196, 'deletions': 17, 'state': 'closed'}, {'id': 306643775, 'number': 55, 'closed': datetime.datetime(2019, 8, 13, 6, 17, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 8, 12, 20, 15, 13, tzinfo=datetime.timezone.utc), 'time_taken': 36109.0, 'time_delta': '10:01:49', 'additions': 159, 'deletions': 19, 'state': 'closed'}, {'id': 285840283, 'number': 50, 'closed': datetime.datetime(2019, 6, 6, 15, 7, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 6, 6, 14, 53, 14, tzinfo=datetime.timezone.utc), 'time_taken': 874.0, 'time_delta': '0:14:34', 'additions': 82, 'deletions': 18, 'state': 'closed'}]"
188633887,apertium-recursive,apertium/apertium-recursive,C++,4,6,13,6,318,40,5,2,"[{'id': 466312018, 'number': 65, 'closed': datetime.datetime(2020, 8, 12, 17, 13, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 11, 19, 34, 51, tzinfo=datetime.timezone.utc), 'time_taken': 77904.0, 'time_delta': '21:38:24', 'additions': 1108, 'deletions': 520, 'state': 'closed'}]"
124332305,apertium-separable,apertium/apertium-separable,Python,5,4,13,12,277,6,7,2,"[{'id': 448924044, 'number': 29, 'closed': datetime.datetime(2020, 7, 14, 14, 55, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 14, 14, 39, 57, tzinfo=datetime.timezone.utc), 'time_taken': 933.0, 'time_delta': '0:15:33', 'additions': 32, 'deletions': 5, 'state': 'closed'}]"
124332211,lttoolbox,apertium/lttoolbox,C++,22,18,15,35,626,38,21,5,"[{'id': 454674174, 'number': 102, 'closed': datetime.datetime(2020, 7, 22, 13, 48, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 21, 18, 29, 4, tzinfo=datetime.timezone.utc), 'time_taken': 69564.0, 'time_delta': '19:19:24', 'additions': 363, 'deletions': 11, 'state': 'closed'}, {'id': 449727495, 'number': 101, 'closed': datetime.datetime(2020, 7, 15, 21, 7, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 15, 20, 48, 45, tzinfo=datetime.timezone.utc), 'time_taken': 1100.0, 'time_delta': '0:18:20', 'additions': 140, 'deletions': 58, 'state': 'closed'}, {'id': 418230052, 'number': 83, 'closed': datetime.datetime(2020, 5, 17, 15, 21, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 14, 20, 29, 18, tzinfo=datetime.timezone.utc), 'time_taken': 240734.0, 'time_delta': '2 days, 18:52:14', 'additions': 58, 'deletions': 2, 'state': 'closed'}]"
53049391,hfst,hfst/hfst,C++,33,117,20,27,3889,150,12,3,"[{'id': 470015742, 'number': 478, 'closed': datetime.datetime(2020, 8, 19, 8, 48, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 19, 8, 47, 37, tzinfo=datetime.timezone.utc), 'time_taken': 68.0, 'time_delta': '0:01:08', 'additions': 38, 'deletions': 1, 'state': 'closed'}]"
28061210,streamparser,apertium/streamparser,Python,6,13,10,6,102,8,3,2,"[{'id': 450841667, 'number': 37, 'closed': datetime.datetime(2020, 9, 6, 21, 35, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 17, 6, 53, 30, tzinfo=datetime.timezone.utc), 'time_taken': 4459309.0, 'time_delta': '51 days, 14:41:49', 'additions': 54, 'deletions': 3, 'state': 'closed'}]"
