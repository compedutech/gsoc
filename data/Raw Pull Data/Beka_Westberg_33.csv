pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
432116913,Component Processing Support,"### Description

Adds support for processing enums. This PR only handles the turning-java-into-data part of the process, not turning-data-into stuff. For example, this doesn't modify simple-components.json, nor does it do anything with translation.

This supports 2 ways of defining option lists.
1) Using the OptionList as the parameter type:
    ````
    @SimpleProperty
    public void FavoriteAnimal(Animal anim) {}
    ````
2) Using an `@Options` annotation on the parameter, passing it an OptionList class:
    ```
    @SimpleProperty
    public void FavoriteAnimal(@Options(Animal.class) String anim) {}
    ```

I also created 3 enums Direction, MapFeature, and ScreenAnimation, and added them to the relevant components. And it actually compiles this time :D

### Important Notes

* I have some TODOs that require feedback.
* I decided to go with `OptionList` and `@Options` instead of `Dropdown` and `@Dropdown` for names. Totally willing to change it to something else though.
* ~~There is a compilation issue. I had to add the Options.java and OptionList.java file to the CommonConstants target so that the enums defined under /common could access them. But then this gives me errors during compilation. See the paste [here](https://pastebin.com/Pnge0pv7). I'm not sure how to fix this issue.~~ Fixed!

### Testing

I went through all of the different places we could want to specify and option list and made sure they were being properly read. For each place I tested both ways of defining option lists mentioned above.

* Getter return types.
* Setter parameters.
* Both of the above together.
* Method return types.
* Method parameters.
* Both of the above together.
* Event parameters.

### Recommended Method for Reviewing
1. Refamiliarize self with this method of upgrading components.
   Note: You can use the ""Viewed"" button to keep track of what you have and have not looked at.
   ![ViewedButton](https://user-images.githubusercontent.com/25440652/88081937-f443a300-cb35-11ea-9f9a-ece73a519919.png)
    1. Review [Direction](https://github.com/BeksOmega/appinventor-sources/pull/3/files#diff-15e1941c7003a4a9650d9cf802e8cf9f) and [Sprite](https://github.com/BeksOmega/appinventor-sources/pull/3/files#diff-6caab879cd904ec90213ccca352b52f6).
    2. Review [MapFeature](https://github.com/BeksOmega/appinventor-sources/pull/3/files#diff-3ea81d355cef6c7532035e69839666ec), [Circle](https://github.com/BeksOmega/appinventor-sources/pull/3/files#diff-9f20de188e0ebe5559c1d2b9f80f7416), [LineString](https://github.com/BeksOmega/appinventor-sources/pull/3/files#diff-7510abf46a434e6256ba038e3397f8b6), [Marker](https://github.com/BeksOmega/appinventor-sources/pull/3/files#diff-c9f4ef56597c15bc1221a69006d79ce2), [Polygon](https://github.com/BeksOmega/appinventor-sources/pull/3/files#diff-69e63fc59487c22c7b57bcb193fe7407), and [Rectangle](https://github.com/BeksOmega/appinventor-sources/pull/3/files#diff-a6d63c0d0691cc8e1cde0c7bb60048cc).
    3. Review [ScreenAnimation](https://github.com/BeksOmega/appinventor-sources/pull/3/files#diff-5cd98b3a9c154e2a7ebb2c540fa3fa5d), [Form](https://github.com/BeksOmega/appinventor-sources/pull/3/files#diff-da60669a19a4224b36297d6b9f891733), and [AnimationUtil](https://github.com/BeksOmega/appinventor-sources/pull/3/files#diff-aef4652664ce463a5c39725ae3f1fae3).

2. Review the additions to the ComponentProcessor that process OptionLists and return HelperKeys. From [elementToHelperKey](https://github.com/BeksOmega/appinventor-sources/pull/3/files#diff-6974a53a12838239a1c808e17a441cd2R1670) to [varElementToParameter](https://github.com/BeksOmega/appinventor-sources/pull/3/files#diff-6974a53a12838239a1c808e17a441cd2R1866).
3. Review the other changes to the ComponentProcessor and subclasses (which involve moving from type strings to TypeMirrors to represent types).

You can definitely do these steps in chunks and take breaks in between.
",True,3,https://api.github.com/repos/BeksOmega/appinventor-sources/pulls/3,https://github.com/BeksOmega/appinventor-sources/pull/3,closed,1197,245,20,9,4,50,0,0,[],2020-06-09 23:29:29+00:00,2020-07-30 23:00:24+00:00,4404655.0,"50 days, 23:30:55","[{'comment_id': 437840695, 'comment_body': ""I think these should be fine to remove because they're private (correct?).\r\n\r\nOther constants like the the ones for map features have to stay b/c they're public."", 'comment_created': datetime.datetime(2020, 6, 10, 3, 33, 47, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 438232119, 'comment_body': 'I think this method of cloning the helper is fine because the helper is immutatable. If the `.helper` of the original `Parameter` is reassigned, the old `HelperKey` which has been assigned to the new clone will continue to exist correct? Or is this a misconception I have about Java?', 'comment_created': datetime.datetime(2020, 6, 10, 15, 54, 49, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 460424457, 'comment_body': 'I think that these are *not* removable. Any other Java class definition can import this interface, and use any constant within it in a qualified way (such as Component.DIRECTION_NORTH), or, if the class is declared to implement the interface, can use an unqualified reference (just DIRECTION_NORTH). Since extension developers could do this (I think?), these are not removable. ', 'comment_created': datetime.datetime(2020, 7, 25, 17, 8, 57, tzinfo=datetime.timezone.utc), 'commenter': 'fturbak', 'type': 'User'}, {'comment_id': 460424604, 'comment_body': ""Sweet! I'll add them back in :D"", 'comment_created': datetime.datetime(2020, 7, 25, 17, 10, 20, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 460425293, 'comment_body': 'For comparison, you should also include an example of *using* the @Option annotation. ', 'comment_created': datetime.datetime(2020, 7, 25, 17, 17, 46, tzinfo=datetime.timezone.utc), 'commenter': 'fturbak', 'type': 'User'}, {'comment_id': 460431148, 'comment_body': 'Evan has recommended making OptionList generic over the type of underlying value to support better Java typechecking, as in :\r\n\r\n    public interface OptionList<T> \r\n        public T getValue();\r\n    }\r\n\r\nI agree with Evan that you should make this change. So the header for Direction should change to \r\n\r\n    public enum Direction implements OptionList<Integer>\r\n\r\nAnd other enum definitions should be similarly changed. \r\n\r\nNote that for new-style completely-abstract enums in which getValue should return the enum itself, you can write something like\r\n\r\n    public enum Season implements OptionList<Season>\r\n\r\n(I have checked that the self-reference in type in this example works fine in Java.) \r\n\r\n\r\n\r\nNote that for new-style fully ', 'comment_created': datetime.datetime(2020, 7, 25, 18, 28, 59, tzinfo=datetime.timezone.utc), 'commenter': 'fturbak', 'type': 'User'}, {'comment_id': 460431635, 'comment_body': 'I strongly recommend that the instance method getValue() and the static value get() be renamed to be more informative.  In particular, getValue() could be renamed to something like toConcreteValue(), toRawValue(), toUnderlyingValue(), toBackingValue(). Similarly, get() could be renamed to fromConcreteValue(), fromRawValue(), fromUnderlyingValue(), fromBackingValue().  I like the ""to""/""from"" pair because they suggest these act as inverses. \r\n\r\nOf course, the OptionList definition needs to be modified accordingly. \r\n\r\nThis is something you, Evan, and I can decide in our 2020/07/27 meeting. ', 'comment_created': datetime.datetime(2020, 7, 25, 18, 34, 6, tzinfo=datetime.timezone.utc), 'commenter': 'fturbak', 'type': 'User'}, {'comment_id': 460431815, 'comment_body': 'The name ""get"" is not very informative. See the above note about renaming. ', 'comment_created': datetime.datetime(2020, 7, 25, 18, 35, 40, tzinfo=datetime.timezone.utc), 'commenter': 'fturbak', 'type': 'User'}, {'comment_id': 460431877, 'comment_body': ""As noted above, implement Evan's suggestion for making this generic in the value type."", 'comment_created': datetime.datetime(2020, 7, 25, 18, 36, 36, tzinfo=datetime.timezone.utc), 'commenter': 'fturbak', 'type': 'User'}, {'comment_id': 460433550, 'comment_body': 'In the latest approach, it seems that the methods with  ...Abstract are no longer necessary. ', 'comment_created': datetime.datetime(2020, 7, 25, 18, 55, 51, tzinfo=datetime.timezone.utc), 'commenter': 'fturbak', 'type': 'User'}, {'comment_id': 460433718, 'comment_body': ""The way I understand Evan's most recent approach is that setters should take the enumeration type and should have a deprecated overload version that takes the concrete type. "", 'comment_created': datetime.datetime(2020, 7, 25, 18, 58, 2, tzinfo=datetime.timezone.utc), 'commenter': 'fturbak', 'type': 'User'}, {'comment_id': 460433840, 'comment_body': 'The same comments for openScreenAnimation apply to closeScreenAnimation, as well as to similar getters/setters elsewhere. ', 'comment_created': datetime.datetime(2020, 7, 25, 18, 59, 24, tzinfo=datetime.timezone.utc), 'commenter': 'fturbak', 'type': 'User'}, {'comment_id': 460436071, 'comment_body': '""assciated"" => ""associated""', 'comment_created': datetime.datetime(2020, 7, 25, 19, 24, 50, tzinfo=datetime.timezone.utc), 'commenter': 'fturbak', 'type': 'User'}, {'comment_id': 460436243, 'comment_body': 'You are correct!', 'comment_created': datetime.datetime(2020, 7, 25, 19, 26, 27, tzinfo=datetime.timezone.utc), 'commenter': 'fturbak', 'type': 'User'}, {'comment_id': 460437990, 'comment_body': 'I know that you imagine that dropdown options in general may be only one of several kinds of helpers. However, the names ""HelperKey"" and ""HelperType"" are so generic that someone scanning the code for how option information information is collected may have a hard time understanding that ""Helper"" is at all related to options. At they very least, you should added numerous comments to make this connection clear. E.g., (1) where HelperKey and HelperType classes are declared, emphasize that the single current use case of Helpers are options and (2) at key points where HelperKey instances are declared, emphasize that they\'re used to collect option info. ', 'comment_created': datetime.datetime(2020, 7, 25, 19, 46, 59, tzinfo=datetime.timezone.utc), 'commenter': 'fturbak', 'type': 'User'}, {'comment_id': 460445135, 'comment_body': ""Two things: \r\n\r\n(1) The second call to `clazz.getEnumConstants()` should be replaced by `constants`; there's no need to evaluate it again since it's already been named.\r\n\r\n(2) .getEnumConstants() can return null for a non-enum class, so you should do one of the following: \r\n(a) Have a comment explaining why this can't happen (e.g. we expect all enums should implement the OptionList marker interface, and above if there were no getValue method required by this interface, a false would have already been returned, so control can't get to this point). \r\n(b) Adding an assertion `assert constants != null;`, which can be done in conjunction with a comment like that in (a)\r\n(c) Have a conditional that handles a null value for `constants` (e.g., by returning false) which can be done with a comment like that in (a) \r\n"", 'comment_created': datetime.datetime(2020, 7, 25, 20, 46, 39, tzinfo=datetime.timezone.utc), 'commenter': 'fturbak', 'type': 'User'}, {'comment_id': 460448656, 'comment_body': 'Event though I understood this back in June, now in July I needed to look at simple_components.json (from a following PR) in order to understand a concrete example of what\'s involved. I think it would be super helpful to include one such concrete example here in the comments to ground the reader. E.g., OptionList collects information so that the following helper info can be associated with the Direction parameter in the Ball.Bounce method: \r\n\r\n""helper"": {\r\n    ""type"": ""OPTION_LIST"",\r\n    ""data"": {\r\n      ""className"": ""com.google.appinventor.components.common.Direction"",\r\n      ""key"": ""Direction"",\r\n      ""tag"": ""Direction"",\r\n      ""defaultOpt"": ""East"",\r\n      ""options"": [\r\n        { ""name"": ""North"", ""value"": ""1"", ""description"": ""Option for North"", ""deprecated"": ""false"" },\r\n        { ""name"": ""Northeast"", ""value"": ""2"", ""description"": ""Option for Northeast"", ""deprecated"": ""false"" },\r\n        { ""name"": ""East"", ""value"": ""3"", ""description"": ""Option for East"", ""deprecated"": ""false"" },\r\n        { ""name"": ""Southeast"", ""value"": ""4"", ""description"": ""Option for Southeast"", ""deprecated"": ""false"" },\r\n        { ""name"": ""South"", ""value"": ""-1"", ""description"": ""Option for South"", ""deprecated"": ""false"" },\r\n        { ""name"": ""Southwest"", ""value"": ""-2"", ""description"": ""Option for Southwest"", ""deprecated"": ""false"" },\r\n        { ""name"": ""West"", ""value"": ""-3"", ""description"": ""Option for West"", ""deprecated"": ""false"" },\r\n        { ""name"": ""Northwest"", ""value"": ""-4"", ""description"": ""Option for Northwest"", ""deprecated"": ""false"" }\r\n      ]\r\n    }\r\n', 'comment_created': datetime.datetime(2020, 7, 25, 21, 31, 10, tzinfo=datetime.timezone.utc), 'commenter': 'fturbak', 'type': 'User'}, {'comment_id': 460448727, 'comment_body': 'In the comment, please give a concrete example of where it is not exactly the class name. ', 'comment_created': datetime.datetime(2020, 7, 25, 21, 32, 2, tzinfo=datetime.timezone.utc), 'commenter': 'fturbak', 'type': 'User'}, {'comment_id': 460449315, 'comment_body': ""Why doesn't a OptionList also include the type of the concrete value that underlies the abstract value?  Is this because it can be determined by the type of the parameter, property, or method with which this helper is associated?  I ask because the values are always stored as a string, and from that string representation alone there is not enough information to determine the value type. "", 'comment_created': datetime.datetime(2020, 7, 25, 21, 40, 2, tzinfo=datetime.timezone.utc), 'commenter': 'fturbak', 'type': 'User'}, {'comment_id': 460450026, 'comment_body': ""(1) It's worth a comment (either here, or when processing the fields below) that the purpose of collecting the enum constants here is to be able to filter the field names processed below to *only* focus on the enum names. \r\n(2) Although collecting the concrete values that underly the enum constants here can't be bad, it's not clear to me that this information is ever used by the rest of the system in the latest design. "", 'comment_created': datetime.datetime(2020, 7, 25, 21, 50, 29, tzinfo=datetime.timezone.utc), 'commenter': 'fturbak', 'type': 'User'}, {'comment_id': 460450650, 'comment_body': 'It\'s worth a comment here that for an enumeration, .getEnclosedElements() lists not only all the enum constants, but also method names. E.g., for Direction, here are the ""extra"" field name it includes: ""value"", ""lookup"", ""values"", ""valueOf"", ""<init>"", ""getValue"", ""get"", ""<clinit>"". This is why it\'s necessary to filter by the names in namesToValues. ', 'comment_created': datetime.datetime(2020, 7, 25, 21, 59, 7, tzinfo=datetime.timezone.utc), 'commenter': 'fturbak', 'type': 'User'}, {'comment_id': 460450981, 'comment_body': 'Justify this line with a comment. I.e., in YAIL code generation, you will want an easy test to determine which types represent abstract options. You have chosen to do that by having every such type end with ""Enum""', 'comment_created': datetime.datetime(2020, 7, 25, 22, 3, 19, tzinfo=datetime.timezone.utc), 'commenter': 'fturbak', 'type': 'User'}, {'comment_id': 460457487, 'comment_body': 'Good idea! [Done](https://github.com/BeksOmega/appinventor-sources/pull/3/files#diff-6974a53a12838239a1c808e17a441cd2R2365).', 'comment_created': datetime.datetime(2020, 7, 25, 23, 37, 32, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 460457489, 'comment_body': '[Done :D](https://github.com/BeksOmega/appinventor-sources/pull/3/files#diff-6974a53a12838239a1c808e17a441cd2R1837)', 'comment_created': datetime.datetime(2020, 7, 25, 23, 37, 35, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 460457496, 'comment_body': ""(1) I added it up [where namesToValues is declared](https://github.com/BeksOmega/appinventor-sources/pull/3/files#diff-6974a53a12838239a1c808e17a441cd2R1819).\r\n(2) Yeah, I'm not sure what's going on with the current design so I'm not going to touch any of that until after monday hehe."", 'comment_created': datetime.datetime(2020, 7, 25, 23, 37, 38, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 460457497, 'comment_body': 'Ope actually it is always the class name! I don\'t think there\'s anything in the code that means it has to be... but I\'m not 100% sure. I\'ll just change this to say ""It is always the simplified class name.""\r\n\r\nThanks for the catch!', 'comment_created': datetime.datetime(2020, 7, 25, 23, 37, 43, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 460457499, 'comment_body': '[Done :D](https://github.com/BeksOmega/appinventor-sources/pull/3/files#diff-6974a53a12838239a1c808e17a441cd2R773)', 'comment_created': datetime.datetime(2020, 7, 25, 23, 37, 46, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 460457513, 'comment_body': '(1) Thanks for the catch! I totally missed that.\r\n\r\n(2) I decide to add an [informative error](https://github.com/BeksOmega/appinventor-sources/pull/3/files#diff-6974a53a12838239a1c808e17a441cd2R1822) if the constants array is null. I think this covers both the nullability problem and informs readers of what we expect.', 'comment_created': datetime.datetime(2020, 7, 25, 23, 37, 50, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 460457518, 'comment_body': 'Done! ([1](https://github.com/BeksOmega/appinventor-sources/pull/3/files#diff-6974a53a12838239a1c808e17a441cd2R733), [2](https://github.com/BeksOmega/appinventor-sources/pull/3/files#diff-6974a53a12838239a1c808e17a441cd2R723), [3](https://github.com/BeksOmega/appinventor-sources/pull/3/files#diff-6974a53a12838239a1c808e17a441cd2R1781))', 'comment_created': datetime.datetime(2020, 7, 25, 23, 37, 55, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 460457521, 'comment_body': '[Done :D](https://github.com/BeksOmega/appinventor-sources/pull/3/files#diff-6974a53a12838239a1c808e17a441cd2R1714)', 'comment_created': datetime.datetime(2020, 7, 25, 23, 37, 59, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 460457539, 'comment_body': '[Done =)](https://github.com/BeksOmega/appinventor-sources/pull/3/files#diff-f0355e8e44afe002f0977ff65b025ec2R18)', 'comment_created': datetime.datetime(2020, 7, 25, 23, 38, 11, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 460457540, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2020, 7, 25, 23, 38, 18, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 460457720, 'comment_body': ""Currently it doesn't collect them because that info isn't being used anywhere. The dropdown block always returns an abstract type, so it doesn't need to know about the concrete type. And block inputs get the concrete type from the parameter types, not from the OptionList info.\r\n\r\nSo yeah! It would be pretty easy to grab the concrete type info if we wanted to grab it, and that might make the system more robust. I just couldn't think of a use case for it at the time hehe."", 'comment_created': datetime.datetime(2020, 7, 25, 23, 40, 54, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 460551282, 'comment_body': ""These sound like good options! I don't so much like to the toConcreteValue() and fromConcreteValue() b/c that doesn't make sense for enums that have themselves as their value. But I'm cool with any of them =)"", 'comment_created': datetime.datetime(2020, 7, 26, 17, 13, 7, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 460555466, 'comment_body': '[Done](https://github.com/BeksOmega/appinventor-sources/pull/3/files#diff-6269db0c3cc7a9e6198e281c58dcf275R12)! I also added the ability to [require a static ""get"" method](https://github.com/BeksOmega/appinventor-sources/pull/3/files#diff-6974a53a12838239a1c808e17a441cd2R1821) with a matching type. Once we finalize the names I can change it :D', 'comment_created': datetime.datetime(2020, 7, 26, 17, 55, 16, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 461213258, 'comment_body': 'It is now the finalized name [""fromUnderlyingValue""](https://github.com/BeksOmega/appinventor-sources/pull/3/files#diff-6974a53a12838239a1c808e17a441cd2R1853).', 'comment_created': datetime.datetime(2020, 7, 27, 22, 46, 33, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 461213401, 'comment_body': 'For future peoples: We decided on toUnderlyingValue and fromUnderlyingValue', 'comment_created': datetime.datetime(2020, 7, 27, 22, 46, 57, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 461213722, 'comment_body': 'Note for future people: We decided against redesigning the component upgrading. This applies to below comments as well.', 'comment_created': datetime.datetime(2020, 7, 27, 22, 47, 56, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 461214008, 'comment_body': '[Done!](https://github.com/BeksOmega/appinventor-sources/pull/3/commits/79bca2685edb0a2ecbf44aee767c358fa185bb7e)', 'comment_created': datetime.datetime(2020, 7, 27, 22, 48, 46, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 462387835, 'comment_body': ""Good. I want to resolve this thread, but don't know how to do that ..."", 'comment_created': datetime.datetime(2020, 7, 29, 15, 27, 35, tzinfo=datetime.timezone.utc), 'commenter': 'fturbak', 'type': 'User'}, {'comment_id': 462390471, 'comment_body': 'Great! Consider this resolved.', 'comment_created': datetime.datetime(2020, 7, 29, 15, 31, 9, tzinfo=datetime.timezone.utc), 'commenter': 'fturbak', 'type': 'User'}, {'comment_id': 462390968, 'comment_body': 'Future peoples appreciate your comment!', 'comment_created': datetime.datetime(2020, 7, 29, 15, 31, 50, tzinfo=datetime.timezone.utc), 'commenter': 'fturbak', 'type': 'User'}, {'comment_id': 462492578, 'comment_body': ""Hold on: if it's always exactly the class name, then why have it at all? There has to be a reason to justify having it. And I imagine that translation would be simplified by not having a different thing that needs to be translated. Can the notion of tag just be removed? "", 'comment_created': datetime.datetime(2020, 7, 29, 18, 12, 31, tzinfo=datetime.timezone.utc), 'commenter': 'fturbak', 'type': 'User'}, {'comment_id': 462499669, 'comment_body': 'Change ""get method"" to ""fromUnderlyingValue method""', 'comment_created': datetime.datetime(2020, 7, 29, 18, 24, 25, tzinfo=datetime.timezone.utc), 'commenter': 'fturbak', 'type': 'User'}, {'comment_id': 462508043, 'comment_body': 'Hmm, are you saying you want to remove the tag from the block? or remove the tag from the data structure? If you want to have the tag on the block I think we need store that data somewhere so that it can be passed into blockly. ', 'comment_created': datetime.datetime(2020, 7, 29, 18, 39, 7, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 462533939, 'comment_body': 'This should now also include this extra line: \r\n      ""underlyingType"": ""java.lang.Integer"",', 'comment_created': datetime.datetime(2020, 7, 29, 19, 24, 54, tzinfo=datetime.timezone.utc), 'commenter': 'fturbak', 'type': 'User'}, {'comment_id': 462536802, 'comment_body': '[Done!](https://github.com/BeksOmega/appinventor-sources/pull/3/commits/730fe3f1a503c9902701a360d2e2783769c5dc12)', 'comment_created': datetime.datetime(2020, 7, 29, 19, 30, 10, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 462536823, 'comment_body': '[And done :D](https://github.com/BeksOmega/appinventor-sources/pull/3/commits/730fe3f1a503c9902701a360d2e2783769c5dc12)', 'comment_created': datetime.datetime(2020, 7, 29, 19, 30, 12, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 462558280, 'comment_body': 'I\'m probably confused, so please help to deconfuse me. I\'m observing that in simple-components.json, we see the following pattern for options: \r\n\r\n      ""className"": ""com.google.appinventor.components.common.Direction"",\r\n      ""key"": ""Direction"",\r\n      ""tag"": ""Direction"",\r\n\r\nThat is, we have three fields that are very closely related: key and tag always seem to be exactly the same, and both seem to be derivable from the className as its last component. As a general rule, you don\'t want to have independent fields that contain similar information that must be kept in sync by the programmer when the values of some fields are automatically computable from others.  Now *maybe* I can see that there are cases where the tag name, which is presented to the App Inventor programmer, might differ from the name of the underlying Java class, Or perhaps it\'s just convenient not to have to perform string operations on the class name to extract the tag. But why have both key and tag if they\'re always the same?  Couldn\'t we get rid of key and always use the tag instead? ', 'comment_created': datetime.datetime(2020, 7, 29, 20, 9, 29, tzinfo=datetime.timezone.utc), 'commenter': 'fturbak', 'type': 'User'}, {'comment_id': 462572836, 'comment_body': ""Yeah for the current implementation we could get rid of one or the other if you want. They just represent different things, which is why I kept them separate.\r\n\r\nThe key is not held in the OptionList data type in the ComponentProcessor (as you've noticed). It is attained by the ComponentDescriptorGenerator when it goes through the optionLists_ dictionary. The key is the dictionary key. Because we can't store all of our optionLists in an optionList dictionary in simple_components.json (for backwards compatibility reasons) I decided to add the key to the option list data so that an identical dictionary could be constructed in Blockly's component_database.js.\r\n\r\nThere's no reason that the key has to be the same as the tag name. Eg we could store the fully-qualified class name as the key instead. (Maybe in the future we would want to add some functionality to do that if two simplified class names come into conflict). There's also no reason that the tag has to be the same as the simplified class name. They act completely independently, and there would be no consequences to changing one or the other.\r\n\r\nSo personally, I would prefer to keep them separate to give future work greater flexibility.\r\n\r\nI definitely see your argument for removing one or the other though, as in the current implementation they are always the same."", 'comment_created': datetime.datetime(2020, 7, 29, 20, 36, 29, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}]","[{'commit_sha': '4548b2f91a1f493b7b60a61e0f8a59f548732413', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '674c781ebdede49e6a3e23c1b54e89663d4c20d1', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df195c0e4727df99f55dfc65f6999788a7f7d427', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b63c3dbc1f52ec4cd236a0175bc165656c8f5471', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f65aec267640b37b6630651f3c2ee6015a729f36', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb7127c88f1f7d8d5c4fa595e78d056baac1d27f', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99ddf5e4b03349ad593e9d382e611ba0ce0f9999', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79bca2685edb0a2ecbf44aee767c358fa185bb7e', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '730fe3f1a503c9902701a360d2e2783769c5dc12', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}]",Beka Westberg,25440652,,User,,35,,0,99
432718151,Add Java->simple_components->Blockly path,"### Description

Depends on #3 

Modifies the ComponentDescriptorGenerator to add OptionList info to the simple_components.json file. The component_database (Blockly side) then reads that json to populate a new `optionLists_` dictionary. It also adds helper keys to all of the associated properties, methods, and parameters.

### Testing

Added logging and tested that Direction, MapFeature, and ScreenAnimation were all properly read and populated. Also tested that OptionsLists defined by extensions get properly populated.

### Recommended Method for Reviewing
1. Review the changes to the [component descriptor generator](https://github.com/BeksOmega/appinventor-sources/pull/4/files?file-filters%5B%5D=.java#diff-0baff13a84be099f9cdfd928caefc21e). Check that the changes create the expected output (given at the top of the file).
2. Review the changes to the [component database](https://github.com/BeksOmega/appinventor-sources/pull/4/files#diff-7f92aaa2f89110a614c406da22dc510c).",True,4,https://api.github.com/repos/BeksOmega/appinventor-sources/pulls/4,https://github.com/BeksOmega/appinventor-sources/pull/4,closed,250,13,2,4,0,14,0,0,[],2020-06-10 21:42:10+00:00,2020-08-07 16:45:46+00:00,4993416.0,"57 days, 19:03:36","[{'comment_id': 462568961, 'comment_body': ""Since your code performs method.getYailReturnType() for this case, wouldn't it be more accurate and consistent to write YAIL-TYPE here rather than RETURN-TYPE?"", 'comment_created': datetime.datetime(2020, 7, 29, 20, 29, 23, tzinfo=datetime.timezone.utc), 'commenter': 'fturbak', 'type': 'User'}, {'comment_id': 462571442, 'comment_body': ""I'm not sure where the right place is to say this, but: early on, we had a discussion about whether helper information for an option should be stored in one place within the simple-components.json file, or whether it should be duplicated at each use of that information. This implementation chooses the latter approach. *Somewhere* in this file (don't know where), the fact that this was a design choice should be mentioned, as should the (1) reasons for choosing this particular choice and (2) whether it would make sense in the future to revisit this choice. \r\n\r\nAlso, I didn't realize until studying the details of component_database.js that *that* is the place where you remove the duplication. This needs to be explained better in the comments within component_database.js!"", 'comment_created': datetime.datetime(2020, 7, 29, 20, 33, 50, tzinfo=datetime.timezone.utc), 'commenter': 'fturbak', 'type': 'User'}, {'comment_id': 462581844, 'comment_body': ""This definition is fine, but FWIW you might be able to simplify it with the StringJoiner class:\r\nhttps://docs.oracle.com/javase/8/docs/api/java/util/StringJoiner.html\r\n\r\nAlso, let me take this opportunity to rail against Java's lack of (1) tuples and (2) a convenient extensible array type (it does have ArrayList and Vector, but they're not easy to use). This kind of tedious example is *so* much easier to express in languages that have these features, like JavaScript and Python. "", 'comment_created': datetime.datetime(2020, 7, 29, 20, 53, 26, tzinfo=datetime.timezone.utc), 'commenter': 'fturbak', 'type': 'User'}, {'comment_id': 462583271, 'comment_body': ""Also, I just double-checked with Evan on this: it's OK to use features (like StringJoiner) added in Java 8 as long as the code is not executed on the mobile device itself, in which case only features in Java 7 and earlier must be used. Since the annotation processor is not run on the phone, it's OK to use Java 8 features in it. "", 'comment_created': datetime.datetime(2020, 7, 29, 20, 56, 5, tzinfo=datetime.timezone.utc), 'commenter': 'fturbak', 'type': 'User'}, {'comment_id': 462604804, 'comment_body': ""You need to mention in the comment here about how the map in optionsList_ is used to de-duplicate the duplicated optionList info in simpleComponents, so that every option is represented exactly once in the component database, and everything that needs to refer to the optionList does so via the optionList's key.  This field is used in conjunction with the processOptionList method to achieve this behavior. \r\n\r\n"", 'comment_created': datetime.datetime(2020, 7, 29, 21, 38, 8, tzinfo=datetime.timezone.utc), 'commenter': 'fturbak', 'type': 'User'}, {'comment_id': 462606031, 'comment_body': 'Should say here that this method is used in conjunction with the optionLists_ field to de-duplicated duplicated optionList information in simple-components.json. ', 'comment_created': datetime.datetime(2020, 7, 29, 21, 40, 38, tzinfo=datetime.timezone.utc), 'commenter': 'fturbak', 'type': 'User'}, {'comment_id': 462607588, 'comment_body': 'Should add a comment above this line explaining that the first time optionList annotation information is encountered in simple-components.json, that information is cached by the optionList key in the map held in the optionLists_ field.  All calls to processOptionList return the HelperKey that will be used to retrieve the information from this map. ', 'comment_created': datetime.datetime(2020, 7, 29, 21, 44, 10, tzinfo=datetime.timezone.utc), 'commenter': 'fturbak', 'type': 'User'}, {'comment_id': 462681088, 'comment_body': 'Hehe indeed! Idk why I put RETURN-TYPE before. Thanks for the catch :D [Done](https://github.com/BeksOmega/appinventor-sources/pull/4/files#diff-0baff13a84be099f9cdfd928caefc21eR87)', 'comment_created': datetime.datetime(2020, 7, 30, 1, 30, 25, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 462681105, 'comment_body': '[Done!](https://github.com/BeksOmega/appinventor-sources/pull/4/files#diff-0baff13a84be099f9cdfd928caefc21eR98)', 'comment_created': datetime.datetime(2020, 7, 30, 1, 30, 29, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 462681113, 'comment_body': '[Done!](https://github.com/BeksOmega/appinventor-sources/pull/4/files#diff-7f92aaa2f89110a614c406da22dc510cR150)', 'comment_created': datetime.datetime(2020, 7, 30, 1, 30, 33, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 462681133, 'comment_body': '[Done =)](https://github.com/BeksOmega/appinventor-sources/pull/4/files#diff-7f92aaa2f89110a614c406da22dc510cR466)', 'comment_created': datetime.datetime(2020, 7, 30, 1, 30, 36, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 462681156, 'comment_body': '[Done :D](https://github.com/BeksOmega/appinventor-sources/pull/4/files#diff-7f92aaa2f89110a614c406da22dc510cR472)', 'comment_created': datetime.datetime(2020, 7, 30, 1, 30, 38, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 462687722, 'comment_body': ""Is [this](https://github.com/BeksOmega/appinventor-sources/pull/4/files#diff-0baff13a84be099f9cdfd928caefc21eR424) like what you were thinking of?\r\n\r\n> Also, let me take this opportunity to rail against Java's lack of (1) tuples and (2) a convenient extensible array type (it does have ArrayList and Vector, but they're not easy to use). This kind of tedious example is so much easier to express in languages that have these features, like JavaScript and Python.\r\n\r\nYes, so much yes hehe. Java is not my favorite language..."", 'comment_created': datetime.datetime(2020, 7, 30, 1, 52, 29, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 467048999, 'comment_body': 'Thanks for modifying the code to use StringJoiner, which makes the code clearer and avoids special cases for separators. ', 'comment_created': datetime.datetime(2020, 8, 7, 13, 43, 48, tzinfo=datetime.timezone.utc), 'commenter': 'fturbak', 'type': 'User'}]","[{'commit_sha': '61bd2d9732c837264a3c6ae8bc2ceee46d2bb27a', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '246131cd52b1f2b804c0d693d6c1eca754a503ce', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1599b3fc72facf0338d543ecae909e83c91a9de0', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f8c043ca18a82f671708b1c2e72c78bb8de72d1f', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}]",Beka Westberg,25440652,,User,,35,,0,99
435372908,Add dropdown blocks & update component input checks,"### Description

Depends on #4 

This pull request does 4 things:
1) Modifies the blocks that represent methods and property setters so that if they represent an upgraded component they will accept either the primitive-type block (for backwards compat) or the abstracted dropdown block.

    For example the **block** associated with this method would only accept a primitive string block:
    ```
    @SimpleFunction
    public void MakeDance(String animal) { }
    ```

    This one would only accept a dropdown block:
    ```
    @SimpleFunction
    public void MakeDance(Animal animal) { }
    ```

    And this one would accept either:
    ```
    @Simplefunction
    public void MakeDance(@Options(Animal.class) String animal) { }
    ```

2) Adds a definition for the dropdown block. The block constructs itself based on its mutator which looks like the following:
    ```
    <mutation key=""myKey""/>
    ```

    It uses the string key (e.g. myKey) to look up the OptionList it is associated with in the Blockly-side component_database.js

3) Modifies the runtime.scm file so that enums (which are represented by dropdown blocks) can be coerced to strings or numbers (for backwards compat). [Edit: this won't be used right now because everything is concrete, but it is best to leave it in]
4) Modifies the runtime.scm file so that enums can be compared with more primitive values (for backwards compat). [Edit: again for now this won't be used]

### Testing

If you would like to pull this pull request and test you can do the following:
1) Checkout the pull request using [github's instructions](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/checking-out-pull-requests-locally#modifying-an-inactive-pull-request-locally).
2) Run `ant clean` and `ant` in your root App Inventor directory.
3) Run `ant installplay` while your phone is connected to your computer to load a new companion.
4) Run your local app inventor instance.
5) Create a new project and navigate to the blocks tab.
5) Open your browser's console and paste the following code:
```
Blockly.Xml.domToWorkspace(
  Blockly.Xml.textToDom(
    '<xml>' +
      '<block type=""helpers_dropdown""><mutation key=""Direction""/></block>' +
      '<block type=""helpers_dropdown""><mutation key=""ScreenAnimation""/></block>' +
      '<block type=""helpers_dropdown""><mutation key=""MapFeature""/></block>' +
    '</xml>'),
  Blockly.mainWorkspace);
```
6) Play around with the resulting dropdown blocks.

I tested all of the upgraded component blocks to make sure they accept both the primitive and abstract blocks. I also tested comparing their return values against the primitive and abstract blocks.

I also created some test components. One component used the upgrade method of annotations to define the dropdown blocks. Another used the new style method of using the enum as the parameter type. I did things like:
* Assigning primitive and abstract types to old-style blocks.
* Assigning abstract types to new blocks (and making sure it didn't accept primitive types)
* Attempting to assign primitive types to new-style blocks using variables (errors were properly thrown).
* Attempting to assign the incorrect abstract type to a new style block (errors were properly thrown).
* Comparing old-style returns against primitive and abstract types.

I feel pretty confident that all of the block stuff is working!

### Recommend Method for Reviewing
1) Review the [FieldInvalidDropdown](https://github.com/BeksOmega/appinventor-sources/pull/5/files?file-filters%5B%5D=.js#diff-a61ef7a00c00fadab2852fa9827eebd8).
2) Review the [utilities file](https://github.com/BeksOmega/appinventor-sources/pull/5/files?file-filters%5B%5D=.js#diff-1ac27aeae3d0c8c2f286cb805e34ca6f).
3) Review the [helper block definition](https://github.com/BeksOmega/appinventor-sources/pull/5/files?file-filters%5B%5D=.js#diff-7aa12b3497a5f408877d090b517399d8).
4) Review the [component block changes](https://github.com/BeksOmega/appinventor-sources/pull/5/files?file-filters%5B%5D=.js#diff-d759fc0ff054590505afd7fd2c809365).
5) Review the [helper block code generator](https://github.com/BeksOmega/appinventor-sources/pull/5/files?file-filters%5B%5D=.js#diff-d35c20a05deb9a8155ed1aba5cb73da0).
6) Review the changes to [runtime.scm](https://github.com/BeksOmega/appinventor-sources/pull/5/files?file-filters%5B%5D=.scm#diff-919464dac4d96743f3dd7b71efe472ec).",True,5,https://api.github.com/repos/BeksOmega/appinventor-sources/pulls/5,https://github.com/BeksOmega/appinventor-sources/pull/5,closed,437,18,7,4,3,33,0,0,[],2020-06-16 17:48:58+00:00,2020-08-07 16:53:08+00:00,4489450.0,"51 days, 23:04:10","[{'comment_id': 457641353, 'comment_body': 'Bad name mangling solution. But it seems to be the best solution we have currently -- Lyn', 'comment_created': datetime.datetime(2020, 7, 20, 19, 28, 19, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 462940081, 'comment_body': 'You have several spots where you say ""Remove this code after Blockly update"". Does this mean that the latest version of Blockly already does this, but because App Inventor is currently still using an old version of Blockly, you\'ve needed to temporarily copy in some new functionality? ', 'comment_created': datetime.datetime(2020, 7, 30, 11, 47, 16, tzinfo=datetime.timezone.utc), 'commenter': 'fturbak', 'type': 'User'}, {'comment_id': 462940870, 'comment_body': 'If I understand the logic correctly, doValueUpdate_ can only be called on values displayed in the dropdown, all of which are necessarily valid, so the dropdown block with such a selected value cannot be bad. Is that correct? If so, update the comment here to make that more explicit. ', 'comment_created': datetime.datetime(2020, 7, 30, 11, 49, 15, tzinfo=datetime.timezone.utc), 'commenter': 'fturbak', 'type': 'User'}, {'comment_id': 462946327, 'comment_body': 'I\'m not understanding whether the validation you\'re doing in this file can somehow interact badly with the opt_validator expected by the superclass. The validation code in this file does *not* refer to opt_validator in any way, but I\'m not 100% sure that it can\'t be called by some sort of inheritance mechanism. What I\'m worried about is this: the code in this file assumes that every option in the ""normal"" list of options is valid. But what if opt_validator were to indicate that some of these ""normal"" values were *not* valid. Would this cause a problem for the code in this file? Or is this situation impossible? ', 'comment_created': datetime.datetime(2020, 7, 30, 12, 0, 58, tzinfo=datetime.timezone.utc), 'commenter': 'fturbak', 'type': 'User'}, {'comment_id': 462948115, 'comment_body': ""If I'm correctly understanding doValueInvalid_ below, it is necessary to provide a pair in opt_InvalidOptions *only* in the case where the displayed value is *different* from the underlying value. If the displayed and underlying values are the same, doValueInvalid_ will handle the display of the invalid value even if there's no corresponding pair in opt_invalidOptions. So this subtlety should be clarified in the comments somewhere. "", 'comment_created': datetime.datetime(2020, 7, 30, 12, 5, 5, tzinfo=datetime.timezone.utc), 'commenter': 'fturbak', 'type': 'User'}, {'comment_id': 462952109, 'comment_body': 'Name mangling isn\'t necessarily ""bad"". I now agree that this is perhaps the simplest way to handle the treatment of enums in terms of Blockly and Yail types. ', 'comment_created': datetime.datetime(2020, 7, 30, 12, 13, 14, tzinfo=datetime.timezone.utc), 'commenter': 'fturbak', 'type': 'User'}, {'comment_id': 462958736, 'comment_body': 'Am I correct in thinking that although this is the correct decision for Stage 1 of your implementation, that this will change in future stages. E.g., in Stage 2, will the abstract (Enum) option type be included in the returned type list? If so, would be worth having a comment for the future along these lines. ', 'comment_created': datetime.datetime(2020, 7, 30, 12, 25, 53, tzinfo=datetime.timezone.utc), 'commenter': 'fturbak', 'type': 'User'}, {'comment_id': 462959297, 'comment_body': '""hander"" => ""handled""', 'comment_created': datetime.datetime(2020, 7, 30, 12, 26, 53, tzinfo=datetime.timezone.utc), 'commenter': 'fturbak', 'type': 'User'}, {'comment_id': 462959720, 'comment_body': ""I'm unsure what to do about tooltips. What would the tooltip say? And it needs to be translated, added additional hassle. "", 'comment_created': datetime.datetime(2020, 7, 30, 12, 27, 44, tzinfo=datetime.timezone.utc), 'commenter': 'fturbak', 'type': 'User'}, {'comment_id': 462962714, 'comment_body': ""You have chosen for this to be the abstract (Enum) type rather than the underlying type, which is worth emphasizing in a comment. I'm still trying to get it straight in my head what the implications of this decision are. Where this output type is used by the rest of the system? For Blockly type checking? For Yail code generation? Both? I would just like the implications of this decision to be clearly documented at this point."", 'comment_created': datetime.datetime(2020, 7, 30, 12, 33, 31, tzinfo=datetime.timezone.utc), 'commenter': 'fturbak', 'type': 'User'}, {'comment_id': 462965578, 'comment_body': ""Just to check my understanding: given that the display name and the underlying value are the same here, won't your doVallueInvalid_ function handle this correctly even if you didn't list the deprecated pairs here?"", 'comment_created': datetime.datetime(2020, 7, 30, 12, 38, 50, tzinfo=datetime.timezone.utc), 'commenter': 'fturbak', 'type': 'User'}, {'comment_id': 462970855, 'comment_body': ""Please move this comment down below the `var code = ...` below, and add additional explanation that at this stage of the implementation the underlying value (cached in the 'value' field of of the option) is being returned for easy backwards compatibility, but future stages will return the abstract (enum) value, whose code you already show in the comment."", 'comment_created': datetime.datetime(2020, 7, 30, 12, 48, 7, tzinfo=datetime.timezone.utc), 'commenter': 'fturbak', 'type': 'User'}, {'comment_id': 462972025, 'comment_body': 'I just wanted to point out that *this* is the reason I asked you to record the type of the underlying value in simple_components.json, else you would not be able to perform this check here. ', 'comment_created': datetime.datetime(2020, 7, 30, 12, 50, 14, tzinfo=datetime.timezone.utc), 'commenter': 'fturbak', 'type': 'User'}, {'comment_id': 462975882, 'comment_body': ""Presumably this check is necessary so that we can't treat a value of one enum type (e.g. HorizontalAlignment) as another (e.g., VerticalAlignment)? If this is correct, please clarify this fact in a comment here. "", 'comment_created': datetime.datetime(2020, 7, 30, 12, 56, 51, tzinfo=datetime.timezone.utc), 'commenter': 'fturbak', 'type': 'User'}, {'comment_id': 462977591, 'comment_body': ""In Stage 1, isn't it the case that enum types can never make it into the generated code? So can't any handling of enums in runtime.scm be delayed until a future stage? "", 'comment_created': datetime.datetime(2020, 7, 30, 12, 59, 52, tzinfo=datetime.timezone.utc), 'commenter': 'fturbak', 'type': 'User'}, {'comment_id': 462977888, 'comment_body': 'This needs to be `arg:toUnderlyingValue`, right? ', 'comment_created': datetime.datetime(2020, 7, 30, 13, 0, 19, tzinfo=datetime.timezone.utc), 'commenter': 'fturbak', 'type': 'User'}, {'comment_id': 462980964, 'comment_body': ""I don't understand this either!"", 'comment_created': datetime.datetime(2020, 7, 30, 13, 5, 35, tzinfo=datetime.timezone.utc), 'commenter': 'fturbak', 'type': 'User'}, {'comment_id': 463154521, 'comment_body': 'So... do you think I should remove the coersion? Or should I remove the TODO?\r\n\r\nPersonally I like living dangerously >:D', 'comment_created': datetime.datetime(2020, 7, 30, 17, 24, 21, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 463154547, 'comment_body': 'Yikes! Yes it does. [Fixed](https://github.com/BeksOmega/appinventor-sources/pull/5/files#diff-919464dac4d96743f3dd7b71efe472ec)', 'comment_created': datetime.datetime(2020, 7, 30, 17, 24, 24, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 463154572, 'comment_body': ""It could be delayed, but I still have doubts about us getting that far by the end of the summer hehe. There's little harm (imo) in leaving it in, so I'd rather leave it in. Basically the same reason we left the new-style support in the ComponentProcessor."", 'comment_created': datetime.datetime(2020, 7, 30, 17, 24, 27, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 463154590, 'comment_body': '[Done :D](https://github.com/BeksOmega/appinventor-sources/pull/5/files#diff-919464dac4d96743f3dd7b71efe472ecR1369)', 'comment_created': datetime.datetime(2020, 7, 30, 17, 24, 29, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 463154615, 'comment_body': 'Yes :D It is necessary if we want to return concrete values!', 'comment_created': datetime.datetime(2020, 7, 30, 17, 24, 32, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 463154654, 'comment_body': '[Done!](https://github.com/BeksOmega/appinventor-sources/pull/5/files#diff-d35c20a05deb9a8155ed1aba5cb73da0R22)', 'comment_created': datetime.datetime(2020, 7, 30, 17, 24, 35, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 463154686, 'comment_body': ""For this PR yes! You have a correct understanding of the system :D\r\n\r\nBut in the [translation PR](https://github.com/BeksOmega/appinventor-sources/pull/7) they become translated. And I really don't want to move those changes into that PR because that will cause me rebase nightmares lol."", 'comment_created': datetime.datetime(2020, 7, 30, 17, 24, 38, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 463154712, 'comment_body': 'Output types are currently only used for blockly-side connection checking. The only types that get encoded into yail are input types, so that arguements can be coerced before being passed to Java / Yail primitives.\r\n\r\nAdded [here](https://github.com/BeksOmega/appinventor-sources/pull/5/files#diff-7aa12b3497a5f408877d090b517399d8R50).\r\n', 'comment_created': datetime.datetime(2020, 7, 30, 17, 24, 42, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 463154734, 'comment_body': ""Yeah I think that in most cases dropdown options should be self explanatory. Plus normally we'd generate tooltips from Javadoc but enum constants apparently don't have javadoc support... so we'd have to build a whole new system.\r\n\r\nI removed the TODO."", 'comment_created': datetime.datetime(2020, 7, 30, 17, 24, 45, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 463154762, 'comment_body': '[Done =)](https://github.com/BeksOmega/appinventor-sources/pull/5/files#diff-7aa12b3497a5f408877d090b517399d8R30)', 'comment_created': datetime.datetime(2020, 7, 30, 17, 24, 48, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 463154785, 'comment_body': '[Done :D](https://github.com/BeksOmega/appinventor-sources/pull/5/files#diff-d759fc0ff054590505afd7fd2c809365R1208)', 'comment_created': datetime.datetime(2020, 7, 30, 17, 24, 51, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 463154842, 'comment_body': '[Done!](https://github.com/BeksOmega/appinventor-sources/pull/5/files#diff-a61ef7a00c00fadab2852fa9827eebd8R23)', 'comment_created': datetime.datetime(2020, 7, 30, 17, 24, 54, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 463154875, 'comment_body': 'Yep I forgot to handle the optional validator hehe. Added [here](https://github.com/BeksOmega/appinventor-sources/pull/5/files#diff-a61ef7a00c00fadab2852fa9827eebd8R124).', 'comment_created': datetime.datetime(2020, 7, 30, 17, 24, 57, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 463154915, 'comment_body': 'Your logic is indeed correct =) [Updated](https://github.com/BeksOmega/appinventor-sources/pull/5/files#diff-a61ef7a00c00fadab2852fa9827eebd8R89).', 'comment_created': datetime.datetime(2020, 7, 30, 17, 25, 1, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 463154953, 'comment_body': 'Yes!', 'comment_created': datetime.datetime(2020, 7, 30, 17, 25, 5, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 467055371, 'comment_body': 'Based on the conversation from our Aug 6 2020 meeting, I recommend leaving a longer comment (1) changing ""I"" to ""Beka"" (or something else indicating it\'s you) or even ""Beka and Lyn"" and (2) explaining in more detail the nature of the confusion. ', 'comment_created': datetime.datetime(2020, 8, 7, 13, 54, 11, tzinfo=datetime.timezone.utc), 'commenter': 'fturbak', 'type': 'User'}]","[{'commit_sha': '4dbcc73752b40c3ad9eb0775106d388509192fbc', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f2883255b3a98e65a804a4bbe305600255883d5', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b2282a3eb262801123ab4db7d19b1c89bfcd54dd', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57f8bd4395c9a2275918e5fd919bab5619e4011d', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}]",Beka Westberg,25440652,,User,,35,,0,99
437230406,Add blocks to drawer,"### Description

Depends on #5

This PR does 3 things:
1. Refactor some drawer code (just moved stuff around).
2. Add stand-alone dropdown blocks to the flyout. The live at the bottom of the drawer, right above the component block.
3. Add dropdown blocks to inputs on methods and setters.

### Testing

![Input2](https://user-images.githubusercontent.com/25440652/85165461-bc85ca80-b21a-11ea-97cd-28f87202dff5.png)
![Input1](https://user-images.githubusercontent.com/25440652/85165463-bc85ca80-b21a-11ea-9ef9-132b50b91863.png)
![StandAlone3](https://user-images.githubusercontent.com/25440652/85165464-bd1e6100-b21a-11ea-8158-df51c7f73553.png)
![StandAlone2](https://user-images.githubusercontent.com/25440652/85165465-bd1e6100-b21a-11ea-9fbb-664fbd9f42dd.png)
![StandAlone1](https://user-images.githubusercontent.com/25440652/85165466-bd1e6100-b21a-11ea-80fe-8583aba314d4.png)

### Recommended Method for Review
Review changes commit-wise.",True,6,https://api.github.com/repos/BeksOmega/appinventor-sources/pulls/6,https://github.com/BeksOmega/appinventor-sources/pull/6,closed,199,39,1,3,2,15,0,0,[],2020-06-19 17:55:07+00:00,2020-08-12 16:12:31+00:00,4659444.0,"53 days, 22:17:24","[{'comment_id': 463047412, 'comment_body': 'Elaborate: create helper blocks at bottom of drawer, right above the component block. ', 'comment_created': datetime.datetime(2020, 7, 30, 14, 41, 29, tzinfo=datetime.timezone.utc), 'commenter': 'fturbak', 'type': 'User'}, {'comment_id': 463048607, 'comment_body': 'Add a comment: collect helper keys used in events, methods, and properties so that can add relevant helper blocks for the component near the bottom of its drawer. ', 'comment_created': datetime.datetime(2020, 7, 30, 14, 43, 4, tzinfo=datetime.timezone.utc), 'commenter': 'fturbak', 'type': 'User'}, {'comment_id': 463050806, 'comment_body': 'Perhaps add comment: determine if any parameters have option types for which corresponding dropdown blocks should be added at bottom of drawer. ', 'comment_created': datetime.datetime(2020, 7, 30, 14, 45, 52, tzinfo=datetime.timezone.utc), 'commenter': 'fturbak', 'type': 'User'}, {'comment_id': 463052306, 'comment_body': 'Should comment these two lines to clarify their purpose. The first adds dropdown blocks related to parameter types to bottom of drawer. The second adds dropdown blocks as arguments to any socket expecting an option type. ', 'comment_created': datetime.datetime(2020, 7, 30, 14, 47, 58, tzinfo=datetime.timezone.utc), 'commenter': 'fturbak', 'type': 'User'}, {'comment_id': 463053453, 'comment_body': 'Add comment that this adds dropdown blocks to setter input when property is a dropdown type. ', 'comment_created': datetime.datetime(2020, 7, 30, 14, 49, 32, tzinfo=datetime.timezone.utc), 'commenter': 'fturbak', 'type': 'User'}, {'comment_id': 463054137, 'comment_body': 'Add comment that this adds dropdown blocks to end of drawer for any properties that involve option types. ', 'comment_created': datetime.datetime(2020, 7, 30, 14, 50, 28, tzinfo=datetime.timezone.utc), 'commenter': 'fturbak', 'type': 'User'}, {'comment_id': 463055032, 'comment_body': ""Cool: I didn't know about this .bind method for binding-this-within-functions before reading your code. Thanks for teaching me. "", 'comment_created': datetime.datetime(2020, 7, 30, 14, 51, 42, tzinfo=datetime.timezone.utc), 'commenter': 'fturbak', 'type': 'User'}, {'comment_id': 463059230, 'comment_body': 'Thanks for noticing this can be simplified!', 'comment_created': datetime.datetime(2020, 7, 30, 14, 57, 26, tzinfo=datetime.timezone.utc), 'commenter': 'fturbak', 'type': 'User'}, {'comment_id': 463169665, 'comment_body': 'Yeah I love bind! Way prettier than doing some kind of `var that = this;` closure. Bleh!', 'comment_created': datetime.datetime(2020, 7, 30, 17, 51, 27, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 463169722, 'comment_body': '[Done!](https://github.com/BeksOmega/appinventor-sources/pull/6/files#diff-821d087189d5b8ffc56be276ecf335ccR387)', 'comment_created': datetime.datetime(2020, 7, 30, 17, 51, 33, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 463169754, 'comment_body': '[Done :D](https://github.com/BeksOmega/appinventor-sources/pull/6/files#diff-821d087189d5b8ffc56be276ecf335ccR378)', 'comment_created': datetime.datetime(2020, 7, 30, 17, 51, 38, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 463169789, 'comment_body': '[Done =)](https://github.com/BeksOmega/appinventor-sources/pull/6/files#diff-821d087189d5b8ffc56be276ecf335ccR342)', 'comment_created': datetime.datetime(2020, 7, 30, 17, 51, 41, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 463169810, 'comment_body': '[Done!](https://github.com/BeksOmega/appinventor-sources/pull/6/files#diff-821d087189d5b8ffc56be276ecf335ccR320)', 'comment_created': datetime.datetime(2020, 7, 30, 17, 51, 44, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 463169856, 'comment_body': '[Done =)](https://github.com/BeksOmega/appinventor-sources/pull/6/files#diff-821d087189d5b8ffc56be276ecf335ccR280)', 'comment_created': datetime.datetime(2020, 7, 30, 17, 51, 47, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 463169875, 'comment_body': '[Done!](https://github.com/BeksOmega/appinventor-sources/pull/6/files#diff-821d087189d5b8ffc56be276ecf335ccR392)', 'comment_created': datetime.datetime(2020, 7, 30, 17, 51, 50, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}]","[{'commit_sha': '4da5f4a4f8c3b84a01cce0238d5665186e858970', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d83f94685bbd6f08c42470a67615ee7ddff54f3', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '716fcbd89e625d640302685f90238a8942241546', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}]",Beka Westberg,25440652,,User,,35,,0,99
463666567,Add helper blocks to event param flydowns,"### Description

Depends on #6 

Adds helper blocks to the setter inputs of lexical_variable_set blocks inside of flydowns:
![Flydown](https://user-images.githubusercontent.com/25440652/89468765-007e5180-d72d-11ea-9bc4-18404c2e80d9.png)

Also moves a lot of drawer code into a new utils_xml.js file so that it can be accessible to things besides the drawer (such as flydowns).

### Testing

I reorganized a lot of the drawer code, so I tested that all flyouts work:
* Normal block flyouts (controls, dictionaries, etc)
* Procedure flyouts (which have special logic)
* Component flyouts (such as Screen)
* Special component flyouts (like Canvas) which have hard-coded helper blocks.

### Recommended Method for Review
Commit-wise",True,26,https://api.github.com/repos/BeksOmega/appinventor-sources/pulls/26,https://github.com/BeksOmega/appinventor-sources/pull/26,closed,221,156,5,3,0,3,0,1,[],2020-08-05 22:05:00+00:00,2020-08-18 19:33:28+00:00,1114108.0,"12 days, 21:28:28","[{'comment_id': 471637169, 'comment_body': 'Space between `for` and `(`', 'comment_created': datetime.datetime(2020, 8, 17, 17, 20, 39, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 471734258, 'comment_body': 'Given that this is only called once, it seems like it would be better to just have it in line with where it is used.', 'comment_created': datetime.datetime(2020, 8, 17, 19, 41, 56, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 471737992, 'comment_body': 'Missing a JSdoc comment text.', 'comment_created': datetime.datetime(2020, 8, 17, 19, 49, 36, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}]","[{'commit_sha': '8c1fa8bd14977b687e9bff10298d3460ec497b1a', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1dadb4f6984a540ecad7ebde9420803b832fd939', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b0cde35eae4408bd4551a0f6eab0b2697480de34', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}]",Beka Westberg,25440652,,User,,35,,0,99
437330386,Add translation of dropdown blocks,"### Description

Depends on #5 

This pull request adds the ability to internationalize OptionList tags and OptionList Option names.

### Testing

1. Added the following to the bottom of the OdeMessages_es_ES.properties file.
```
directionOptionList = Test1
directionNorthOption = Test2
```
2. Switched to Spanish.
3. Observed that the blocks were ""properly"" translated.
Spanish:
![Spanish](https://user-images.githubusercontent.com/25440652/85185641-b824d600-b249-11ea-9f36-ebffe92b2a5d.png)

English:
![English](https://user-images.githubusercontent.com/25440652/85185644-ba873000-b249-11ea-8dbd-6a26b4ef0da9.png)

### Recommended Method for Review
1. Review changes to the [component translation generator](https://github.com/BeksOmega/appinventor-sources/pull/7/files#diff-9b3399c49903798dd38a7bb414eecdde) (this generates the files which are used to populate the translations).
2. Review the [component database changes](https://github.com/BeksOmega/appinventor-sources/pull/7/files#diff-7f92aaa2f89110a614c406da22dc510c). These are primarily reorganization things (changing a giant if-else into a switch). But it did add the [getInternationalizedOptionName](https://github.com/BeksOmega/appinventor-sources/pull/7/files#diff-7f92aaa2f89110a614c406da22dc510cR749) and [getInternationalizedOptionListTag](https://github.com/BeksOmega/appinventor-sources/pull/7/files#diff-7f92aaa2f89110a614c406da22dc510cR763) functions.
3. Review changes to the [dropdown block definition](https://github.com/BeksOmega/appinventor-sources/pull/7/files#diff-7aa12b3497a5f408877d090b517399d8).",True,7,https://api.github.com/repos/BeksOmega/appinventor-sources/pulls/7,https://github.com/BeksOmega/appinventor-sources/pull/7,closed,144,34,3,2,0,1,0,0,[],2020-06-19 23:27:36+00:00,2020-08-12 16:15:17+00:00,4639661.0,"53 days, 16:47:41","[{'comment_id': 468992528, 'comment_body': 'Slightly pedantic but I would recommend including the `break;` here even though it is redundant.', 'comment_created': datetime.datetime(2020, 8, 12, 4, 5, 2, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}]","[{'commit_sha': '4a8021808fb4fc290d9b11e695e71bcde62ae156', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2275e31388d03a5e20a7a9ebfba8493466df7bc1', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}]",Beka Westberg,25440652,,User,,35,,0,99
441705811,Add typeblock support for dropdown blocks,"### Description

Depends on #7 

Adds the ability to get dropdown blocks via typeblock. Typeblock allows you to click on the workspace, and start typing. You will then be able to select from matching blocks, and it will be added to your workspace.

### Testing

1. Began typing Direction
2. Observed that all of the direction options were available.
3. Selected Direction: North.
4. Observed how the dropdown block was correctly added to the workspace.

### Recommended Method for Review
1. Read the below and ask Beka any questions.
Typeblock works by looking at each block definition for a typeblock function. It then calls that function. The function should return an array of objects of the following form:
```
{
  translatedName: ""the thing to type to get the block - translated into the current language"",
  mutatorAttribute: {  // Optional
    attributeName1: ""attribute value 1"",
    attributeName2: ""attribute value 2"",
    attributeNameEtc: ""attribute value etc""
  }
}
```

In this case the mutator attributes are the key to get the helper data, and the value of the dropdown we want to select.

2. Review the changes.
",True,10,https://api.github.com/repos/BeksOmega/appinventor-sources/pulls/10,https://github.com/BeksOmega/appinventor-sources/pull/10,closed,35,1,2,2,3,4,0,0,[],2020-06-29 23:52:54+00:00,2020-08-12 16:19:26+00:00,3774392.0,"43 days, 16:26:32","[{'comment_id': 469010427, 'comment_body': 'In RTL languages the whole page text will be reversed (eventually), so the character order here should still render properly.', 'comment_created': datetime.datetime(2020, 8, 12, 5, 18, 24, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 469010516, 'comment_body': ""Although I do know there's something peculiar around punctuation. Given that we don't currently support RTL languages I would say this is fine for now."", 'comment_created': datetime.datetime(2020, 8, 12, 5, 18, 53, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 469012074, 'comment_body': ""Do we need the colon here? It isn't present in the block. That could confuse people."", 'comment_created': datetime.datetime(2020, 8, 12, 5, 24, 35, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 469377311, 'comment_body': 'I decided to remove it :D', 'comment_created': datetime.datetime(2020, 8, 12, 16, 11, 34, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}]","[{'commit_sha': '46958ea2cd1c05e242ba2338ef001d3213e6ec3a', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a990729a60462c329084abbf238fe2e0128b8d2d', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}]",Beka Westberg,25440652,,User,,35,,0,99
437591245,Add upgrading to dropdowns,"### Description

Depends on #5

This PR adds some new upgraders to versioning.js so that we can automatically change user's constant blocks to dropdown blocks.

### Testing

I created a test project using the production ai2 editor. It included the following blocks:
![Old](https://user-images.githubusercontent.com/25440652/85233544-09ed6d80-b3bc-11ea-820b-05f7d97897ea.png)

I think passed that project to this version of ai and go these blocks:
![Upgraded](https://user-images.githubusercontent.com/25440652/85233548-0f4ab800-b3bc-11ea-8eea-b79dd081ac35.png)

Which is what was expected.

Here is the zipped .aia: [test6.zip](https://github.com/BeksOmega/appinventor-sources/files/4810153/test6.zip)

### Recommended Method for Review
1) Review the new methods in [versioning.js](https://github.com/BeksOmega/appinventor-sources/pull/8/files#diff-96198d9d4cd1f3db6c38212f6ae28745R960)
2) Review the rest of the code, which upgrades the Ball, ImageSprite, and Form (Screen) components. ",True,8,https://api.github.com/repos/BeksOmega/appinventor-sources/pulls/8,https://github.com/BeksOmega/appinventor-sources/pull/8,closed,158,6,3,1,0,0,0,0,[],2020-06-21 19:39:59+00:00,2020-08-12 16:17:28+00:00,4480649.0,"51 days, 20:37:29",[],"[{'commit_sha': 'd049c2af6bd0ac462a8378b5943de2b65d6cdd3a', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}]",Beka Westberg,25440652,,User,,35,,0,99
455213797,Add HorizontalAlignment and VerticalAlignment,"### Description

Depends on #8 

This ended up being a lot easier than I thought it would be. All of the components that use horizontal and vertical alignment use the following values:

Horizontal
* Left (1)
* Center (3)
* Right (2)

Vertical
* Top (1)
* Center (2)
* Bottom (3)

The problem was that the docs were really messed up.

So I've added support for alignment in the Form (Screen), Marker, and Arrangement components.

### Testing

Tested that all of the blocks properly appear in the drawer.

I also tested setting each property using the dropdown block and the Do It feature.

### Recommended Method for Review
Commit-wise.",True,14,https://api.github.com/repos/BeksOmega/appinventor-sources/pulls/14,https://github.com/BeksOmega/appinventor-sources/pull/14,closed,425,123,12,7,0,1,0,0,[],2020-07-22 16:05:56+00:00,2020-08-12 16:23:19+00:00,1815443.0,"21 days, 0:17:23","[{'comment_id': 468177611, 'comment_body': ""I didn't even know HorizontalScrollArrangements and VerticalScrollArrangements had been added to App Inventor until reading this code. You learn something new every day!"", 'comment_created': datetime.datetime(2020, 8, 10, 20, 49, 37, tzinfo=datetime.timezone.utc), 'commenter': 'fturbak', 'type': 'User'}]","[{'commit_sha': 'b0ead22d8bced9c6178d15f725834a2af08adead', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db0db26f7172731b9b45e4765076a0b34252e4da', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2915aef791c65d3a654b85c45de72685d62bd42c', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc1cfdd35fdf8d63da1c69e72abed64433ddcae3', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e314264a3c992532e817a669d3f1583643d1d733', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0adfb3b4fb03a5e7442ec438f959ea5e4064e0a3', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9135d9fc20c49761ef7446af267ab1f91220de41', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}]",Beka Westberg,25440652,,User,,35,,0,99
455258441,Add ScreenOrientation,"### Description

Depends on #8 

Added ScreenOrienation to the Form (Screen) component.

### Testing

* Tested that the blocks properly appeared in the drawer.
* Tested that I can set the orientation using the dropdown block.
* Tested that I can se the orientaiton using a string block with arbitrary casing.

### Recommended Method for Review
Commit-wise",True,15,https://api.github.com/repos/BeksOmega/appinventor-sources/pulls/15,https://github.com/BeksOmega/appinventor-sources/pull/15,closed,104,48,5,5,1,4,0,0,[],2020-07-22 17:34:07+00:00,2020-08-31 16:29:09+00:00,3452102.0,"39 days, 22:55:02","[{'comment_id': 471056646, 'comment_body': ""It would be interesting if in addition to encoding the string value used in the blocks to also encode the integer constant that is passed to `setRequestedOrientation` call. This would eliminate the need for the switch statement. Possible name for the getter is `getOrientationConstant()`.\r\n\r\nThe one problem is that I don't think the component common package is compiled with android.jar on the classpath, so you may need to add it in build.xml to make it compile."", 'comment_created': datetime.datetime(2020, 8, 16, 2, 43, 48, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 471151358, 'comment_body': ""Ok I was a bit confused. I'm not sure if you wanted me to add the actual constants as documented [here](https://developer.android.com/reference/android/content/pm/ActivityInfo#SCREEN_ORIENTATION_BEHIND). Or if you wanted me to add calls to ActivityInfo.X\r\n\r\nI decided to add the raw constants because I assume that evaluating any of the gingerbread values on a pre-gingerbread device would cause an error. As such we would need to hard code those constants anyway. So I figured hard coding the rest wouldn't be a problem."", 'comment_created': datetime.datetime(2020, 8, 16, 19, 52, 52, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 480240235, 'comment_body': 'Minor whitespace issue: space between `for` and `(`', 'comment_created': datetime.datetime(2020, 8, 31, 16, 20, 24, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 480241085, 'comment_body': 'Minor whitespace issue: space between `switch` and `(`', 'comment_created': datetime.datetime(2020, 8, 31, 16, 21, 45, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}]","[{'commit_sha': '26b64336f6bd74750d74dd482077bdc46cd4fd8d', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0aa8d9cb29eaf7ff37b5339a58ec9a340592a30e', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3282c63cb3c443be24afd8a5a19d79685bdb794f', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '803680fdbf0e8e662d7f56748e0ff1c70b443a4b', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49c57b0a256db0b69375c2006b51eb8f259a297c', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}]",Beka Westberg,25440652,,User,,35,,0,99
455846128,Add Map and Navigation component enums,"### Description

Depends on #6 

Added Units (Metric, Imperial), MapType (Road, Aerial, Terrain) and TransportMethod (Foot, Car, Bicycle, Wheelchair) definitions.

Added these to the Map and Navigation components.

### Testing

* Tested that all helper blocks showed up properly in the drawer.
* Tested that all values could be set using helper blocks and concrete blocks.

### Recommended Method for Review
Commit-Wise


",True,16,https://api.github.com/repos/BeksOmega/appinventor-sources/pulls/16,https://github.com/BeksOmega/appinventor-sources/pull/16,closed,325,66,11,8,0,6,0,0,[],2020-07-23 17:09:41+00:00,2020-08-18 18:57:15+00:00,2252854.0,"26 days, 1:47:34","[{'comment_id': 471056982, 'comment_body': 'Either line 2068 or 2070 has the wrong indentation. I think this line should be one space to the left.', 'comment_created': datetime.datetime(2020, 8, 16, 2, 48, 37, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 471056983, 'comment_body': 'Indentation', 'comment_created': datetime.datetime(2020, 8, 16, 2, 48, 49, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 471057219, 'comment_body': ""After having reviewed a few of these, I'm wondering if we should have a utility method that constructs the HashMap given the class. If so, it could go into a different PR since it's not specific to this change."", 'comment_created': datetime.datetime(2020, 8, 16, 2, 51, 54, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 471057348, 'comment_body': ""I'd like to rename this ScaleUnits so that in the future if we wanted to have a class with more concrete units (m, cm, ft, etc.) we could. This is more of a class of units rather than a specific set of units."", 'comment_created': datetime.datetime(2020, 8, 16, 2, 54, 26, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 471153860, 'comment_body': ""Filed an [issue](https://github.com/BeksOmega/appinventor-sources/issues/28#issue-679816867). I'll move it into the main repo if I don't get that change in by the end of August."", 'comment_created': datetime.datetime(2020, 8, 16, 20, 21, 6, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 471900137, 'comment_body': '@BeksOmega sounds good to me.', 'comment_created': datetime.datetime(2020, 8, 18, 4, 1, 15, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}]","[{'commit_sha': '221e9861b17e920ae71ca0f71c90e430c9bbe3f5', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac34891326414f68a69f6925160c7eceab81fef3', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd7295408f5fcc933e422229329852820efe26c9e', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2e573f3a09e654fc0ac224df545d4a24698117cc', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a646a10abf37ca54f26ea8eed9a92ad87be16aac', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '928f8d4db3ee9981a8d42d31538ee72b907dab0e', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec5fe579eacdde333168ab192d855b2c03922938', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34f5857428d6620a8399aa447d200404b17263b0', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}]",Beka Westberg,25440652,,User,,35,,0,99
455987815,Add Permissions,"### Description

Depends on #11 

Added Permission type.

Upgraded the Form (screen) to use Permissions.

### Testing

* Tested that blocks showed up correctly.
* Tested AskForPermissions using the Permission block.
* Tested comparing the Permission block against permissionName returned in PermissionGranted event.

### Recommended Method for Review
Commit-wise",True,17,https://api.github.com/repos/BeksOmega/appinventor-sources/pulls/17,https://github.com/BeksOmega/appinventor-sources/pull/17,closed,105,7,5,4,7,6,0,1,[],2020-07-23 22:43:17+00:00,2020-08-31 18:36:54+00:00,3354817.0,"38 days, 19:53:37","[{'comment_id': 471901840, 'comment_body': ""This comment isn't specific to this PR, but it seems like the option types are not fully qualified. This could have implications for extensions. Do you have a sense of the difficulty to make use of FQCNs for the options values rather than the simple name?"", 'comment_created': datetime.datetime(2020, 8, 18, 4, 9, 3, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 472418497, 'comment_body': ""Mr. Lyn and I discussed this, and we came to the conclusion that because the SCN is displayed on the block we wouldn't want to allow for OptionLists with conflicting SCNs. So rather than change the option values be to be based on the FQCN I'd rather change the ComponentProcessor to give a more explicit error if a developer creates a conflicting SCN.\r\n\r\nThat's just my opinion though :D"", 'comment_created': datetime.datetime(2020, 8, 18, 19, 7, 25, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 476520396, 'comment_body': ""It's an open world problem though, and so changing it in the component processor only detects collisions with extensions and core types. If internally we always use the FQCN (we can still present the simple name) then two extensions can have the same short name while internally maintaining two separate types. Generally, extension authors tend to prefix their extensions with some unique prefix, so this is likely a non-issue anyway."", 'comment_created': datetime.datetime(2020, 8, 25, 15, 3, 44, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 476570295, 'comment_body': '> It\'s an open world problem though, and so changing it in the component processor only detects collisions with extensions and core types.\r\n\r\nGood point, I didn\'t consider different extensions having conflicts with eachother.\r\n\r\nAfaik changing the dropdown blocks to be keyed by FQCN should be possible, but it would take some effort because I\'d want to change the JSON representation to remove the ""key"" property from the dropdown data, and that change would have to flow through all of the other systems.\r\n\r\nBut if we do want to change it it is definitely better to do so before we release. Currently the SCNs are saved in the XML, and if you changed it to need the FQCN later there would be no way to cleanly upgrade extensions defining dropdown blocks. If we change it before release we can have the XML store the FQCN and everything will be consistent.\r\n\r\nSo do you want me to go ahead and look into this? Note it might be better to do so after the last few dropdown block PRs are in, that way I can fix up everything at once without worrying about rebasing changes.', 'comment_created': datetime.datetime(2020, 8, 25, 16, 14, 27, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 480242462, 'comment_body': 'Move to previous line.', 'comment_created': datetime.datetime(2020, 8, 31, 16, 24, 2, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 480242824, 'comment_body': '""toa"" => ""to a""', 'comment_created': datetime.datetime(2020, 8, 31, 16, 24, 35, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}]","[{'commit_sha': '503925aca196fed63fec6e6e28a7016531b2a060', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '232d81071f93325a7c0e651a2c9b1dbcb5443c7e', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c1887492f8130e7dcdccd96221165334e782aa9', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e79fc7bad7a41bc47be0b47df7fc7514768a58b5', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}]",Beka Westberg,25440652,,User,,35,,0,99
456517351,Add PhoneCall and Texting component enums,"### Description

Depends on #6

Added EndedStatus and StartedStatus for the PhoneCall component. Added ReceivingState for the Texting component.

### Testing

I had trouble testing this one because I couldn't get the PhoneCall events to fire (even on the released version of App Inventor). I also couldn't get the Texting events to fire on either version. I'm not sure if this is something I'm doing wrong, or it's a bug.

But the blocks do show up, and for the Texting component at least the values seem to be getting handled correctly.

### Recommended Method for Review
Commit-Wise
",True,18,https://api.github.com/repos/BeksOmega/appinventor-sources/pulls/18,https://github.com/BeksOmega/appinventor-sources/pull/18,closed,243,66,8,6,0,3,0,1,[],2020-07-24 22:35:10+00:00,2020-08-17 18:49:58+00:00,2060088.0,"23 days, 20:14:48","[{'comment_id': 471060151, 'comment_body': ""I think the indentation here should be 1 more space in so that `'Texting'` is two spaces in from `Blockly`."", 'comment_created': datetime.datetime(2020, 8, 16, 3, 34, 15, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 471606265, 'comment_body': ""Update the comment here now that `undetermined` isn't a valid option."", 'comment_created': datetime.datetime(2020, 8, 17, 16, 45, 48, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 471606983, 'comment_body': 'Code style: space between `if` and `(`. Note you can run `ant checkstyle` before committing changes to see if any rules are violated.', 'comment_created': datetime.datetime(2020, 8, 17, 16, 47, 7, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}]","[{'commit_sha': '860399775b28fccea8831300fa0dadb569cc9416', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '80f33de223ea433d9c84efc73662a28d81da8250', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c5ec7825e75781fb4435db6cb616a2088bf86c86', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84548e954e70088ff5e2482d241073cd707ea2cd', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '528b1945e6d0987f75993d50a67b6cbdda2f8fa1', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '409f12673d660f306c7496f6f3195a0c4bd8b7c2', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}]",Beka Westberg,25440652,,User,,35,,0,99
456527367,Add Sensitivity,"### Description

Depends on #6 

Add Sensitivity (Weak, Moderate, Strong). Upgrade AccelerometerSensor to use it.

### Testing

Used the following blocks, and the Do It feature to test that the sensitivity was being properly applied to and used by the Acceleromerter sensor. After changing the sensitivity I felt a noticable difference in how hard I had to shake the phone to get the event to trigger.

![blocks (3)](https://user-images.githubusercontent.com/25440652/88442514-a515a080-cdc9-11ea-8a5a-ba61877dad19.png)

### Recommended Method for Review
Commit-wise.",True,19,https://api.github.com/repos/BeksOmega/appinventor-sources/pulls/19,https://github.com/BeksOmega/appinventor-sources/pull/19,closed,88,19,5,3,0,0,0,0,[],2020-07-24 23:20:59+00:00,2020-08-16 20:22:24+00:00,1976485.0,"22 days, 21:01:25",[],"[{'commit_sha': '50da35f0cd460bd60e21e0b90559e6ccbc1281b6', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60114572e9886e2052341a2642c238a3cd954df8', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a9cb4dc96b582216cfbf230d088cfef6df9bcdf', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}]",Beka Westberg,25440652,,User,,35,,0,99
458132985,Add Ev3 Sensor Modes,"### Description

Depends on #8 

Adds ColorSensorMode (reflected, ambient, color) for the Lego Ev3ColorSensor. Adds GyroSensorMode (angle, rate) for Lego Ev3GyroSensor.

Also removes old methods like SetReflectedMode and SetAngleMode from components, because there's no reason to have them now that we have informative dropdowns.

### Testing

#### Upgrading
I tested that blocks get properly upgraded using this project: [test10.zip](https://github.com/BeksOmega/appinventor-sources/files/4997095/test10.zip)

They go from this:
![BeforeUpgrade](https://user-images.githubusercontent.com/25440652/88846043-e7f4c100-d199-11ea-9e8b-5a9b328005d4.png)

To this:
![AfterUpgrade](https://user-images.githubusercontent.com/25440652/88846048-ea571b00-d199-11ea-8551-adff1d084dbb.png)

#### Functionality

I wasn't able to test the functionality as I don't own an Ev3. But I did test that setting and getting the values works as expected

### Recommended Method for Review
Commit-wise
",True,21,https://api.github.com/repos/BeksOmega/appinventor-sources/pulls/21,https://github.com/BeksOmega/appinventor-sources/pull/21,closed,419,175,9,16,1,19,0,1,[],2020-07-29 00:59:00+00:00,2020-08-31 15:56:21+00:00,2905041.0,"33 days, 14:57:21","[{'comment_id': 476432760, 'comment_body': 'Continuation indent should be +4, not +2.', 'comment_created': datetime.datetime(2020, 8, 25, 13, 5, 44, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 476432851, 'comment_body': ""I'd keep this on the previous line."", 'comment_created': datetime.datetime(2020, 8, 25, 13, 5, 52, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 476433264, 'comment_body': 'See previous comments.', 'comment_created': datetime.datetime(2020, 8, 25, 13, 6, 34, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 476433352, 'comment_body': 'See previous comments.', 'comment_created': datetime.datetime(2020, 8, 25, 13, 6, 42, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 476433482, 'comment_body': 'Remove extraneous logging.', 'comment_created': datetime.datetime(2020, 8, 25, 13, 6, 56, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 476433535, 'comment_body': 'Remove extraneous logging.', 'comment_created': datetime.datetime(2020, 8, 25, 13, 7, 3, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 476436114, 'comment_body': 'Remove extraneous logging.', 'comment_created': datetime.datetime(2020, 8, 25, 13, 10, 58, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 476436201, 'comment_body': 'Remove extraneous logging.', 'comment_created': datetime.datetime(2020, 8, 25, 13, 11, 5, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 476438631, 'comment_body': 'It seems unintuitive to me that we plug a block called `UltrasonicSensorMode` into a property called `Unit`. I think we should rename this to `UltrasonicSensorUnit` instead to match the corresponding property.', 'comment_created': datetime.datetime(2020, 8, 25, 13, 14, 46, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 476439061, 'comment_body': ""Did you just bump this to test? We normally don't increase it until we actually merge the whole change."", 'comment_created': datetime.datetime(2020, 8, 25, 13, 15, 21, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 476442333, 'comment_body': 'Need to return after dispatching the error or put `setMode(mode)` in an `else` clause.', 'comment_created': datetime.datetime(2020, 8, 25, 13, 20, 24, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 476443091, 'comment_body': 'You can remove the commented-out constants.', 'comment_created': datetime.datetime(2020, 8, 25, 13, 21, 31, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 476443172, 'comment_body': 'Ditto.', 'comment_created': datetime.datetime(2020, 8, 25, 13, 21, 39, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 476443769, 'comment_body': 'Need to either return after dispatching the error or put the `setMode` call in an `else` statement.', 'comment_created': datetime.datetime(2020, 8, 25, 13, 22, 34, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 476446536, 'comment_body': ""I believe that you're correct. The checker logic uses -1 to indicate that data has yet to be received. Given that changing the mode changes the value space of the data being received it really ought to reset the previous value to indicate no data has been received in the new value space. Otherwise, the comparisons occurring in that code are really apples to oranges (or angles to rates). I would recommend not changing it here and filing a bug instead on the main repo."", 'comment_created': datetime.datetime(2020, 8, 25, 13, 26, 37, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 476447612, 'comment_body': ""I would prefer wrapping after the last comma that occurs < 100 characters, rather than putting all of the arguments on the new line (personal preference here, the guide allows what you're doing)."", 'comment_created': datetime.datetime(2020, 8, 25, 13, 28, 7, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 476447752, 'comment_body': 'Indentation should be 4 spaces. Yes, the old code is wrong here.', 'comment_created': datetime.datetime(2020, 8, 25, 13, 28, 19, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 476586131, 'comment_body': 'Done added issue [here](https://github.com/mit-cml/appinventor-sources/issues/2291). I also added the issue number in the source.', 'comment_created': datetime.datetime(2020, 8, 25, 16, 38, 45, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 480159964, 'comment_body': 'Need to use `this.mode` on the left hand side, otherwise this is a no-op assigning the parameter mode to itself. Alternatively, rename the parameter to newMode similar to the other files.', 'comment_created': datetime.datetime(2020, 8, 31, 14, 15, 5, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}]","[{'commit_sha': '310a8a5a4be887da4f485233237524c7c0036765', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a1196d6ed27d592357fc5c45fe914988bb611ce', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a7eddd74553e872fbc4bdfcf55ef42ca9c08da0', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b742059c235bd6d9f12a30a8b38c21d36bc9fa58', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ea2de66894e50e12bebdde06fadd0e59f289117', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '842581399ee6918d11158c4fa6969a0f2ccf244c', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3b369cef2e092ac6e3c08677be9cdae3e104339', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09bac1d69dde997459cee7ca793419d6b1b32868', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f855a4cb951e9785b7c20331ff6be09a1706c222', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07402dfa2256b017fe3e58cc75380202b78e1b22', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2620789939d581c596cb11bb3bfc7e7e7b4c41c2', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd934a3e7c6ccd282464995c1607247a61873f69e', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '976b542ee669e413169f86094cd824cc29f1b995', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '31df7c6cae7f774cff8fc682581449527c2563e6', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8d720b81b9d4eade89ad6514654780e22579355', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e1daf639e45014569fdd5cdc294d320bc293e21', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}]",Beka Westberg,25440652,,User,,35,,0,99
459657913,Add Lego NXT Dropdown Blocks,"### Description

Depends on #8 

Adds lots and lots of dropdown blocks to go with the NxtDirectCommands component. Hopefully this will make it semi usable without having to dig up Lego documentation!

### Testing

I tested that blocks get properly upgraded using this project: [test11.zip](https://github.com/BeksOmega/appinventor-sources/files/5004135/test11.zip)

I was not able to test functionality as I don't own an Nxt :cry: 

### Recommended Method for Review
Commit-wise

Also note this PR looks longer than it is. There were some functions that had a lot of parameters, and I decided to sprend them out 1 param per line for readability.",True,22,https://api.github.com/repos/BeksOmega/appinventor-sources/pulls/22,https://github.com/BeksOmega/appinventor-sources/pull/22,closed,744,183,21,8,0,32,0,1,[],2020-07-30 22:58:02+00:00,2020-08-31 16:06:58+00:00,2740136.0,"31 days, 17:08:56","[{'comment_id': 476452683, 'comment_body': 'Continuation indent is +4.', 'comment_created': datetime.datetime(2020, 8, 25, 13, 35, 4, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 476452797, 'comment_body': ""I'd prefer keeping this on the previous line."", 'comment_created': datetime.datetime(2020, 8, 25, 13, 35, 12, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 476456802, 'comment_body': 'Remove blank line here.', 'comment_created': datetime.datetime(2020, 8, 25, 13, 40, 57, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 476457750, 'comment_body': ""It's not clear to me how this is used."", 'comment_created': datetime.datetime(2020, 8, 25, 13, 42, 10, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 476459411, 'comment_body': 'Remove extraneous newlines at end of file (there needs to be only 1).', 'comment_created': datetime.datetime(2020, 8, 25, 13, 44, 30, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 476459883, 'comment_body': 'Remove extraneous newlines.', 'comment_created': datetime.datetime(2020, 8, 25, 13, 45, 4, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 476460818, 'comment_body': 'The emacs file-local variable should be `mode:` I think you replaced it as part of a global find and replace.', 'comment_created': datetime.datetime(2020, 8, 25, 13, 46, 25, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 476460949, 'comment_body': 'Remove extraneous newlines.', 'comment_created': datetime.datetime(2020, 8, 25, 13, 46, 35, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 476470370, 'comment_body': ""These names don't seem to match the Direct Commands appendix linked (see table on page 7). That document seems to match the old constants defined in the App Inventor sources. Where did these names come from?"", 'comment_created': datetime.datetime(2020, 8, 25, 13, 59, 1, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 476479804, 'comment_body': 'Continuation indent should be +4', 'comment_created': datetime.datetime(2020, 8, 25, 14, 10, 58, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 476479986, 'comment_body': ""I'd prefer to keep this on the previous line."", 'comment_created': datetime.datetime(2020, 8, 25, 14, 11, 13, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 476480385, 'comment_body': 'See previous comments.', 'comment_created': datetime.datetime(2020, 8, 25, 14, 11, 43, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 476482936, 'comment_body': 'Continuation indentation is +4.', 'comment_created': datetime.datetime(2020, 8, 25, 14, 15, 10, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 476483074, 'comment_body': 'Prefer to keep this on the previous line.', 'comment_created': datetime.datetime(2020, 8, 25, 14, 15, 17, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 476485162, 'comment_body': 'I think if these are invalid we should report it. Previously, we just wrote through regardless of whether the value was correct, so returning here is a change in behavior.', 'comment_created': datetime.datetime(2020, 8, 25, 14, 18, 5, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 476485207, 'comment_body': 'Ditto.', 'comment_created': datetime.datetime(2020, 8, 25, 14, 18, 10, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 476485388, 'comment_body': 'Continuation indent is +4.', 'comment_created': datetime.datetime(2020, 8, 25, 14, 18, 26, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 476485495, 'comment_body': 'Keep this with the previous line.', 'comment_created': datetime.datetime(2020, 8, 25, 14, 18, 35, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 476485606, 'comment_body': 'See earlier notes about error reporting.', 'comment_created': datetime.datetime(2020, 8, 25, 14, 18, 43, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 476486274, 'comment_body': 'Continuation indent +4.', 'comment_created': datetime.datetime(2020, 8, 25, 14, 19, 38, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 476486377, 'comment_body': 'Keep with previous line.', 'comment_created': datetime.datetime(2020, 8, 25, 14, 19, 46, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 476486729, 'comment_body': 'Space between `)` and `String`', 'comment_created': datetime.datetime(2020, 8, 25, 14, 20, 13, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 476487819, 'comment_body': 'Argument formatting.', 'comment_created': datetime.datetime(2020, 8, 25, 14, 21, 36, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 476595109, 'comment_body': ""Some of the old values would accept either lowercase values or uppercase values. Eg for motor ports you could have 'A' or 'a'. So upgrading should support this as well.\r\n\r\nRather than making a separate function for enums like NxtMotorPort (that support both cases) I just added it to this function, because I figured there was no harm in being forgiving.\r\n\r\nIf you like I can create a separate function that allows for both cases."", 'comment_created': datetime.datetime(2020, 8, 25, 16, 53, 17, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 476609336, 'comment_body': 'Haha thanks for the catch!', 'comment_created': datetime.datetime(2020, 8, 25, 17, 16, 28, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 476609392, 'comment_body': 'I thought some of the names provided by the appendix weren\'t very clear. For example the ""SWITCH"" sensor is actually a touch sensor.\r\n\r\nI came up with the names based on the descriptions provided in [this document](http://www.ni.com/pdf/manuals/372574c.pdf) page 22.', 'comment_created': datetime.datetime(2020, 8, 25, 17, 16, 32, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 480101966, 'comment_body': ""I think this is fine because I don't expect there are other places in the code where you'd have different semantics for items that differ only by case."", 'comment_created': datetime.datetime(2020, 8, 31, 12, 39, 18, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 480103110, 'comment_body': 'Minor whitespace issue: space between `for` and `(`', 'comment_created': datetime.datetime(2020, 8, 31, 12, 41, 26, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 480103301, 'comment_body': 'Minor whitespace issue: space between `for` and `(`', 'comment_created': datetime.datetime(2020, 8, 31, 12, 41, 47, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 480103463, 'comment_body': 'Minor whitespace issue: space between `for` and `(`', 'comment_created': datetime.datetime(2020, 8, 31, 12, 42, 9, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 480104349, 'comment_body': 'Minor whitespace issue: space between `for` and `(`', 'comment_created': datetime.datetime(2020, 8, 31, 12, 43, 47, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 480108136, 'comment_body': 'Should be `%d` because the argument being provided is an `int`. This is true of the other messages added here as well.', 'comment_created': datetime.datetime(2020, 8, 31, 12, 50, 54, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}]","[{'commit_sha': 'a5d15f7f32b35fa4b64a423b81469bcb86b1b8d2', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'caf234518cee390e3cfc1285127e458b13588dd5', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f4b88edc8b13f3a8a4cbf98005d3b38c80b954b1', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8479230d305a53745b982f21ba6176fd004de034', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5f45fa46d70f4042b12e92e76e95b670dba247e', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '319571756badbdca65adbf68b47a38e7b3f75145', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84936155cf1579ec3253c4778f37f67f051e382d', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '59609dda22979424df6109d05c2058e5138753b2', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}]",Beka Westberg,25440652,,User,,35,,0,99
464278796,Add YandexLangs,"### Description

Depends on #8 

Adds a dropdown for all of the languages that [Yandex supports](https://yandex.com/support/translate/supported-langs.html) (except for Elvish because I couldn't find a working country code).

### Testing

Tested that blocks get properly upgraded using this project.: [test12.zip](https://github.com/BeksOmega/appinventor-sources/files/5038160/test12.zip)

Tested that it can be used for translations. (It's actually really fun to pick options from the dropdown and try them out hehe).

### Recommended Method for Review

Commit-Wise
",False,27,https://api.github.com/repos/BeksOmega/appinventor-sources/pulls/27,https://github.com/BeksOmega/appinventor-sources/pull/27,closed,157,3,5,4,1,8,0,1,[],2020-08-06 21:44:13+00:00,2020-08-31 16:07:56+00:00,2139823.0,"24 days, 18:23:43","[{'comment_id': 479418289, 'comment_body': 'Per other PRs, move this onto the previous line.', 'comment_created': datetime.datetime(2020, 8, 28, 16, 42, 11, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 479423360, 'comment_body': ""Recommend changing the name of this to `Language` so it isn't specific to Yandex."", 'comment_created': datetime.datetime(2020, 8, 28, 16, 52, 13, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 479423462, 'comment_body': 'Per previous PRs, move this onto the previous line.', 'comment_created': datetime.datetime(2020, 8, 28, 16, 52, 26, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 479437084, 'comment_body': ""It actually is specific to Yandex. It only includes the subset of languages that Yandex supports. https://yandex.com/support/translate/supported-langs.html Other components may have different subsets of languages they support, so I thought it might be better to indicate that this was for yandex specifically.\r\n\r\nWhat's your opinion on it though?"", 'comment_created': datetime.datetime(2020, 8, 28, 17, 19, 37, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 479468960, 'comment_body': 'Those components would still reject an invalid language, so I think it would be fine. We may want to have the languages contain both their ISO 639-1 and ISO-639-2 tags so that components/extensions can take a Language block and get the necessary tag. We could employ filtering similar to what you implemented for assets if the component takes a strict subset of the languages.', 'comment_created': datetime.datetime(2020, 8, 28, 18, 27, 37, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 479469232, 'comment_body': 'TextToSpeech as an example.', 'comment_created': datetime.datetime(2020, 8, 28, 18, 28, 15, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 479508566, 'comment_body': '> We may want to have the languages contain both their ISO 639-1 and ISO-639-2 tags so that components/extensions can take a Language block and get the necessary tag. We could employ filtering similar to what you implemented for assets if the component takes a strict subset of the languages.\r\n\r\nHmm given these extra features I think it may be better to implement Languages as their own annotation & helper block, rather than using the dropdowns for them. We could add a property to the annotation specifying which kind of ISO tags the function prefers. We could also add the filtering without having to clutter up the OptionList definition with that.\r\n\r\nHow would you feel about investigating that approach?', 'comment_created': datetime.datetime(2020, 8, 28, 19, 59, 38, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 479520038, 'comment_body': 'We could consider having LanguageISO1 and LanguageISO2, although given that the languages themselves are the ""base"" object and having different serializations (ISO 639-1 vs ISO 639-2). I would say this isn\'t critical to finishing the project so let\'s table it for now and decide the design later once the rest has been merged.', 'comment_created': datetime.datetime(2020, 8, 28, 20, 28, 14, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}]","[{'commit_sha': 'b4a9b25eceb154ba1621bfb9fa02a3759a287d06', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4faab009644335c40ef6d07a2fb44e8511470433', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad18a2945c3233e0ebc97ebdfb54b09171382bcd', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e12242e7b14886ae549fd2fb0dac1ba649b26966', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}]",Beka Westberg,25440652,,User,,35,,0,99
461513001,Implement Stage 2,"### Description

Depends on #10 

Implements all of the abstraction stuff:
* Sanitizing method and getter return values.
* Sanitizing event parameter values.
* Dropdown blocks returning different values depending on companion version.
* Allowing dropdown blocks to be dictionary keys.

Important Note: I couldn't get the protect-enum macro to work from the getFormYail() function, and I couldn't get *any* logging working. So I need some help :/

And another note: This PR is maximally backwards compatible. If you think any backwards compatibility stuff should be removed for maintainability, simplicity, etc, I am happy to remove it =)

### Testing

* Tested that methods and getters are sanitized properly depending on the version of the companion.
* Tested that event params are sanitized properly depending on the version of the companion.
* Tested that enum values can be used to access both the value and the underlying value from the dictionary.

Both this:
![blocks (2)](https://user-images.githubusercontent.com/25440652/89112176-cef74480-d413-11ea-9e21-f281be1fec6f.png)

And this:
![blocks (3)](https://user-images.githubusercontent.com/25440652/89112181-d3236200-d413-11ea-85ae-db3e75befb78.png)

return ""East value""!

### Recommended Method for Review
Commit-Wise",True,24,https://api.github.com/repos/BeksOmega/appinventor-sources/pulls/24,https://github.com/BeksOmega/appinventor-sources/pull/24,closed,280,48,11,13,8,30,0,1,[],2020-08-01 23:27:50+00:00,2020-08-31 19:52:39+00:00,2579089.0,"29 days, 20:24:49","[{'comment_id': 469013204, 'comment_body': 'Copyright year should be 2020 as this is a new file.', 'comment_created': datetime.datetime(2020, 8, 12, 5, 28, 39, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 477546419, 'comment_body': 'Minor whitespace issue: space between `(DeclaredType)` and `type`.', 'comment_created': datetime.datetime(2020, 8, 26, 19, 43, 39, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 477546557, 'comment_body': 'Minor whitespace issue: Missing newline at EOF', 'comment_created': datetime.datetime(2020, 8, 26, 19, 43, 54, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 477547833, 'comment_body': 'Maybe I am missing something, but why is this change here instead of another PR related specifically to the ScreenAnimation? It seems like this could have been done in stage 1.', 'comment_created': datetime.datetime(2020, 8, 26, 19, 46, 11, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 477547881, 'comment_body': 'Ditto.', 'comment_created': datetime.datetime(2020, 8, 26, 19, 46, 16, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 477578838, 'comment_body': 'Sort order of imports should have android come first.', 'comment_created': datetime.datetime(2020, 8, 26, 20, 45, 44, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 477618639, 'comment_body': 'Add a Javadoc to describe the class.', 'comment_created': datetime.datetime(2020, 8, 26, 22, 13, 12, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 477618873, 'comment_body': ""I don't think we want this to be public, otherwise other classes (e.g., extensions) could modify it. Also, is there any reason it couldn't be final?"", 'comment_created': datetime.datetime(2020, 8, 26, 22, 13, 51, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 479237676, 'comment_body': 'Add `@param` and `@returns` Javadoc annotations to describe the parameters/return value.', 'comment_created': datetime.datetime(2020, 8, 28, 12, 33, 23, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 479269367, 'comment_body': ""It's not really standard to return from inside a finally block. You should catch the exception(s) thrown in the try block and return value from there as well as return from inside the try block."", 'comment_created': datetime.datetime(2020, 8, 28, 13, 6, 39, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 479270520, 'comment_body': 'Add `@param` and `@returns` annotations to describe the arguments and return values.', 'comment_created': datetime.datetime(2020, 8, 28, 13, 8, 4, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 479275704, 'comment_body': 'Given that fromUnderlyingValue could return false, you will want to capture the return value and only replace the argument if it is null. Otherwise, a call to a method that takes an `int` will cause a null dereference trying to unwrap the null Integer object into its primitive value.\r\n\r\nAlternatively, we may want to throw a RuntimeError here due to the arguments not being coercible (see coerce-args in runtime.scm).', 'comment_created': datetime.datetime(2020, 8, 28, 13, 13, 51, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 479293268, 'comment_body': 'May want to check that we are only doing this for public methods.', 'comment_created': datetime.datetime(2020, 8, 28, 13, 32, 43, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 479306804, 'comment_body': 'Indentation should only be 2 in from the if statement.', 'comment_created': datetime.datetime(2020, 8, 28, 13, 47, 5, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 479352755, 'comment_body': ""`protect-enum` actually needs to be sent as part of the companion YAIL from the browser as well as older companions won't have the macro definition."", 'comment_created': datetime.datetime(2020, 8, 28, 14, 45, 15, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 479353152, 'comment_body': 'Missing semicolon', 'comment_created': datetime.datetime(2020, 8, 28, 14, 45, 55, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 479356236, 'comment_body': 'Only 2 spaces indent from `(`', 'comment_created': datetime.datetime(2020, 8, 28, 14, 51, 1, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 479356426, 'comment_body': 'if statement should be indented 2 from the start of the let statement.', 'comment_created': datetime.datetime(2020, 8, 28, 14, 51, 18, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 479356542, 'comment_body': 'Same on indentation here.', 'comment_created': datetime.datetime(2020, 8, 28, 14, 51, 31, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 479357177, 'comment_body': 'Might want to add a comment before to document why/what it is for.', 'comment_created': datetime.datetime(2020, 8, 28, 14, 52, 30, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 479357334, 'comment_body': 'Indentation here should be 2 for each new scope.', 'comment_created': datetime.datetime(2020, 8, 28, 14, 52, 46, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 479504570, 'comment_body': 'Yeah these changes do belong in Stage 1, I just missed them. ScreenAnimation was one of the first 3 properties I upgraded, and we were originally thinking you would only need to add the `@Options` annotation on either the getter or the setter of a getter-setter pair (not both).\r\n\r\nWhen we changed this over I forgot to upgrade it, but it still worked in Stage 1. But Stage 2 requires annotations on both, which is how I discovered this bug.\r\n\r\nI can separate the change into a different PR if ya like.', 'comment_created': datetime.datetime(2020, 8, 28, 19, 50, 6, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 479504620, 'comment_body': 'Just removed it since this file no longer includes logging.', 'comment_created': datetime.datetime(2020, 8, 28, 19, 50, 14, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 479504659, 'comment_body': 'Changed to private static final =)', 'comment_created': datetime.datetime(2020, 8, 28, 19, 50, 18, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 479504701, 'comment_body': 'I\'m a bit confused about what you\'re saying. Shouldn\'t fromUnderlyingValue always return a valid OptionList in this case because this function is for coercing args of events? For example:\r\n\r\n``` java\r\n@SimpleEvent\r\npublic void MyTestEvent(@Options(SomeEnum.class) int val) {\r\n  dispatchEvent(this, ""MyTestEvent"", val);\r\n}\r\n```\r\n\r\nIn the above case shouldn\'t val always be a valid underlying value of SomeEnum? If there aren\'t any bugs in the component that is.\r\n\r\nI kind of feel like that\'s not what you\'re talking about though. Could you give me an example of the problem you\'re thinking of?', 'comment_created': datetime.datetime(2020, 8, 28, 19, 50, 23, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 479504730, 'comment_body': ""I know but I couldn't get it working :/ I tried to add the macro via the getFormYail() function, but it wasn't working. I also couldn't get *any* logging to work, so I didn't know how to debug it.\r\n\r\nDo you have any advice / know how I could add some logging?"", 'comment_created': datetime.datetime(2020, 8, 28, 19, 50, 26, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 480201997, 'comment_body': 'There is the `(android-log)` function that you can use. There are other examples in this file where it is used.', 'comment_created': datetime.datetime(2020, 8, 31, 15, 20, 36, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 480323130, 'comment_body': ""Assuming this gets merged it won't matter much because we will squash everything into a single change."", 'comment_created': datetime.datetime(2020, 8, 31, 18, 52, 57, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 480355676, 'comment_body': ""There are a number of situations where we might have a closed set of known options but for whatever reason the option set itself is open world. One example is ScreenOrientation, where the set of options available at SDK 7 or whatever is smaller than it is today. Granted we enforce this to be closed even though newer versions of Android might add more ScreenOrientation options. The second scenario is where a value might be returned by an external-to-App Inventor component. For example, in the case of the Web component we have a set of known HttpStatus codes (e.g., HttpStatus.OK, HttpStatus.NotFound). However, various applications built on top of HTTP might return status codes not defined in the original spec. So if we were to introduce an options item for HttpStatus, which we might use with Web's GotText event with its responseCode parameter, there's a reasonable set of options that make sense/are common to expose as an option but the set is technically open. A server could return error code 599, for example, which might be specific to the server's software. I think it's still valuable for us to allow an option list for common values but not keep the set closed."", 'comment_created': datetime.datetime(2020, 8, 31, 19, 37, 13, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 480358067, 'comment_body': ""Gotcha! I'll add logic to make sure that if we get a concrete value which isn't defined in the OptionList we return the concrete value."", 'comment_created': datetime.datetime(2020, 8, 31, 19, 42, 8, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}]","[{'commit_sha': 'f983e8dd37452ab5f96db307ab628cc9e4c984ae', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42714cda088b7677cea4dc064cfc80c934c2cd35', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68e955d94c01e093a91ff6243db308545cdeaeb0', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '04dcddc59f48b38b61be01b00f68e09cd28a836b', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '758fc36abca4c39cad7fdfc4617c59de8bb9d6da', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '773bb9a727bc32f528dbf3211f744656e957e2fd', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f522deb54e7c819c6325b23ffc0dac88baa5f043', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc12c59d21bc4424e6a5bdabcb023fc6bb725446', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40fd8804f6ef21ac2dc206248b0b58305402e8c5', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9fe4e8c2b856feb7b27ba501bc91c8d602114c68', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b2b30036269e3c704d6de25228087013e5cb120', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b02632c9cc57eab0d5f7121f24a1e4bfc5f68c29', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47e2bda77d1e9a25c82395abeb39d9d451618d16', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}]",Beka Westberg,25440652,,User,,35,,0,99
462280528,Add screen names block,"### Description

Depends on #10

Adds a screen names block that can be passed to blocks like:
![blocks (2)](https://user-images.githubusercontent.com/25440652/85959540-e8f3c200-b951-11ea-8d16-f5d38d6e7dec.png)

which require a screen name.

**Important Note**: Currently this does not include any upgraders because it's not in the right branch path. They can always be added later.

### Testing

1. Created Screen1 and Screen2.
2. Added the following blocks to Screen1:
    <img width=""381"" alt=""blocks"" src=""https://user-images.githubusercontent.com/25440652/85959519-c5307c00-b951-11ea-83ea-249b6d693739.png"">
3. Connected to the companion and observed that the app correctly switched to Screen2.
4. Removed Screen2.
5. Observed that the block was marked as a bad block:
    <img width=""381"" alt=""blocks (1)"" src=""https://user-images.githubusercontent.com/25440652/85959520-c8c40300-b951-11ea-80da-44eaab055e3e.png"">
6. Added Screen2 again.
7. Observed that the block was no longer marked as a bad block.
8. Removed Screen2 again.
9. Selected Screen1 in dropdown.
10. Observed that the block was no longer marked as a bad block.",True,25,https://api.github.com/repos/BeksOmega/appinventor-sources/pulls/25,https://github.com/BeksOmega/appinventor-sources/pull/25,closed,254,18,14,15,4,19,0,1,[],2020-08-03 16:36:48+00:00,2020-08-16 19:24:36+00:00,1133268.0,"13 days, 2:47:48","[{'comment_id': 470161849, 'comment_body': ""Given that there isn't any configuration required for the operation, it seems like we don't need to wrap the upgrade function in a closure."", 'comment_created': datetime.datetime(2020, 8, 13, 18, 30, 50, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 470163027, 'comment_body': ""I'm curious about the motivation to use the DOM representation instead of the workspace here. It seems like it would be straightforward to iterate over all of the blocks looking for instances of `controls_openAnotherScreen` and `controls_openAnotherScreenWithStartValue` and replace the value input, if it's of type `text`, with the corresponding option block."", 'comment_created': datetime.datetime(2020, 8, 13, 18, 32, 37, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 470167764, 'comment_body': 'Rather than doing this, it might be better to have `YaBlocksEditor` implement `ProjectChangeListener` and have it register with with `Project` object held by its corresponding `YaProjectEditor`. This way each editor can receive updates when a node is added or removed without tightly coupling the behavior here.', 'comment_created': datetime.datetime(2020, 8, 13, 18, 40, 39, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 470168274, 'comment_body': 'If my advice above is taken, this can revert back as `YaBlocksEditor` will be informed via `onProjectNodeRemoved`.', 'comment_created': datetime.datetime(2020, 8, 13, 18, 41, 28, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 470170091, 'comment_body': ""I'm not sure why this is necessary. The screens haven't actually been removed from the project, so to remove them seems odd to me."", 'comment_created': datetime.datetime(2020, 8, 13, 18, 44, 27, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 470170774, 'comment_body': 'The options for the screen names did not appear in typeblocking when I tried it.', 'comment_created': datetime.datetime(2020, 8, 13, 18, 45, 44, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 470171829, 'comment_body': 'Clean up console logs.', 'comment_created': datetime.datetime(2020, 8, 13, 18, 47, 40, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 470173415, 'comment_body': 'The array here gets shared by all instances of Blockly.WorkspaceSvg. You may want to initialize this field in Blockly.Blocklyeditor.create instead so that it is per-workspace.', 'comment_created': datetime.datetime(2020, 8, 13, 18, 50, 33, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 470276173, 'comment_body': ""Yeah this could be done completely with the workspace representation. The reason I went with dom was just to be consistent with the other upgraders I've written. The method and setter upgraders have to be in dom form because that's what the 'findAllX' functions expect.\r\n\r\nI can change it over if you want :D"", 'comment_created': datetime.datetime(2020, 8, 13, 22, 8, 52, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 470276190, 'comment_body': ""Yeah this was actually because of the .prototype sharing you mentioned! No clue how I've been coding js for this long and didn't know about that haha. Since I removed that and switched to the ProjectChangeListener strategy I removed this as well :D"", 'comment_created': datetime.datetime(2020, 8, 13, 22, 8, 54, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 470976937, 'comment_body': ""It's fine to leave it as is, I just expected give your comfort with the Blockly API that approach would have been faster to implement."", 'comment_created': datetime.datetime(2020, 8, 15, 13, 17, 32, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 470977106, 'comment_body': ""I'd prefer that we use `indexOf` for maximal compatibility."", 'comment_created': datetime.datetime(2020, 8, 15, 13, 19, 33, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 470977112, 'comment_body': 'Ditto.', 'comment_created': datetime.datetime(2020, 8, 15, 13, 19, 43, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 470997798, 'comment_body': 'In `onClose` we should probably remove this as a change listener.', 'comment_created': datetime.datetime(2020, 8, 15, 14, 53, 44, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 470998177, 'comment_body': ""I believe this will only get you the top level blocks. You'll want to do `blocksRep.getElementsByTagName('block')` to get all of the blocks. You may want to test this upgrader with a slightly less trivial nesting of blocks to make sure."", 'comment_created': datetime.datetime(2020, 8, 15, 14, 58, 21, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 471026639, 'comment_body': ""Coolio! That's an easy fix :D I was just under the impression that Pavi was using es6 classes in his project."", 'comment_created': datetime.datetime(2020, 8, 15, 19, 31, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 471028339, 'comment_body': ""Gosh that's a scary bug. Thank's for the catch! Fixed & tested :D"", 'comment_created': datetime.datetime(2020, 8, 15, 19, 53, 31, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 471053906, 'comment_body': ""I think he's using them for the example extensions, but in the cases where extension developers want to reach the most users they'll need to either transpile with something like webpack or write straight ES5."", 'comment_created': datetime.datetime(2020, 8, 16, 2, 2, 13, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 471054347, 'comment_body': 'One minor optimization would be to store the value of the indexOf call and then reuse it within the if statement.', 'comment_created': datetime.datetime(2020, 8, 16, 2, 9, 31, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}]","[{'commit_sha': '86e92f9799bae7b38fb576346755f751525e1c09', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c1851ff46ad6ea1789eec14d1118a3a64e03a3b', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '55b9f53ae9d1b12737dee564b0ef1d598f43ef02', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1017de497054d62865908875fb287c2763b378be', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc66326c98ba693fe7a532ba77ef9c0520a3eeb9', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0cde55b47ca8b73a5701007c514ce5a429b7bdae', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b8260c723d610fc10584b65e3d98fa3172695da0', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de297b569ca790a6d1eca309387afd9fbc286448', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac63727009a186a92c163c731d155df1d0dd0b2b', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd585df56dafdc0dbc951c159d73809a0706ba78c', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba0fa565f033d520b0ce5239fc960f4d527a753f', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7f771ad520885ad99570daaaf0339d6e42e8f05', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f1cccd2886b1be8bab794be65c7160cde4f78aed', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51164d0e6da2ff033241cb3e7d172e8b3c754616', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9bd425f71b2e9932ab5ef41ee8b30144e98ae5ab', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}]",Beka Westberg,25440652,,User,,35,,0,99
443014012,Add assets block,"### Description

Depends #25

Adds an assets block which can be passed to blocks like `Image.Picture` which require an the name of an asset. Adds an annotation for associating asset blocks with parameters.

I also added filtering by file type, but I'm not sure that I like the behavior. Currently it removes non-matching file names from the dropdown, so it might be better if it was a warning instead. But it feels like the complications to the code outweight the benefits of the user.

Luckily I kept all of that in separate commits, so it'll be easy to revert if desired.

**Important Note**: This PR doesn't include any upgraders because it's not in the right branch path. They can always be added later.

### Testing

1) Uploaded a 2 files to the Media panel.
2) Accessed the asset block via typeblock.
3) Deleted the selected asset via the Media panel.
4) Observed how the block was correctly marked as a badBlock().
![BadBlock](https://user-images.githubusercontent.com/25440652/86295377-4fbfe800-bbab-11ea-819d-1f88b5f1327d.png)

5) Reuploaded the file.
6) Observed how the block was unmarked.
7) Deleted both files from the Media panel.
8) Observed how the block correctly displayed that there were no assets available.
![NoAssets](https://user-images.githubusercontent.com/25440652/86295382-52bad880-bbab-11ea-9bd6-1415a9ffb797.png)

9) Reuploaded both files.
10) Observed how the dropdown was correctly displayed.",True,11,https://api.github.com/repos/BeksOmega/appinventor-sources/pulls/11,https://github.com/BeksOmega/appinventor-sources/pull/11,closed,644,102,28,16,11,33,0,1,[],2020-07-01 21:59:10+00:00,2020-08-31 17:51:41+00:00,5255551.0,"60 days, 19:52:31","[{'comment_id': 471739958, 'comment_body': ""Lots of imports added here, but they don't appear to be used elsewhere in this file."", 'comment_created': datetime.datetime(2020, 8, 17, 19, 53, 52, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 471760449, 'comment_body': ""I'm confused by why this is here, given that it affects screens. What's the motivation for this addition? It also appears redundant."", 'comment_created': datetime.datetime(2020, 8, 17, 20, 35, 27, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 471766565, 'comment_body': 'You should also remove the event listener when the block is disposed, otherwise we will just get a pile of these event listeners for every block added/deleted.', 'comment_created': datetime.datetime(2020, 8, 17, 20, 48, 10, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 471767165, 'comment_body': 'See my comment about the screen version of this code.', 'comment_created': datetime.datetime(2020, 8, 17, 20, 49, 27, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 471776797, 'comment_body': 'Missing new line at end of file.', 'comment_created': datetime.datetime(2020, 8, 17, 21, 10, 13, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 471778627, 'comment_body': ""I think you didn't mean to bump this based on your TODO comment."", 'comment_created': datetime.datetime(2020, 8, 17, 21, 14, 15, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 471779741, 'comment_body': 'Add the `@return` here so we know the type of this thing.', 'comment_created': datetime.datetime(2020, 8, 17, 21, 16, 35, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 471782087, 'comment_body': 'Why are we using a string with a space versus an empty string here?', 'comment_created': datetime.datetime(2020, 8, 17, 21, 21, 38, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 471889603, 'comment_body': 'Space between `for` and `(`, and a space before the `:`', 'comment_created': datetime.datetime(2020, 8, 18, 3, 17, 9, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 471889682, 'comment_body': 'I think we should also toLowerCase and sort the filter values. Otherwise, the following annotations are different:\r\n\r\n1. `@Assets({"".ext1"", "".ext2""})`\r\n2. `@Assets({"".ext2"", "".ext1""})`\r\n3. `@Assets({"".EXT1"", "".EXT2""))`\r\n4. `@Assets({"".EXT2"", "".EXT1""))`\r\n', 'comment_created': datetime.datetime(2020, 8, 18, 3, 17, 33, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 471892145, 'comment_body': ""If you're making this generic, it would be good to also make uses of it generic. Right now all of your functions return `HelperKey` and should either be `HelperKey<?>` or specify a specific type in the `<>`."", 'comment_created': datetime.datetime(2020, 8, 18, 3, 27, 39, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 471892632, 'comment_body': 'If key is out of bounds we should probably return `[]` instead of causing an error to be thrown.', 'comment_created': datetime.datetime(2020, 8, 18, 3, 29, 38, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 471896942, 'comment_body': 'I think the recommended best practice is to just use `function findIndex(..)` instead of assigning the anonymous function to a variable.', 'comment_created': datetime.datetime(2020, 8, 18, 3, 47, 50, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 471897359, 'comment_body': ""There is a minor optimization that can be done here if the filter is sorted where you use binary search on the registered filters using the target filter. Since the elements are ordered, if they don't match starting from the first element you can fail quickly and move to the next potential registered element. I'm not sure it would warrant a rewrite this late in the game but you may just want to note it as a TODO."", 'comment_created': datetime.datetime(2020, 8, 18, 3, 49, 38, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 471898568, 'comment_body': ""Don't forget to update the comment."", 'comment_created': datetime.datetime(2020, 8, 18, 3, 54, 33, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 472552252, 'comment_body': 'Thanks for the catch! I used to have a ProjectChangeListener in this file, but I put it in the YaBlocksEditor file instead.', 'comment_created': datetime.datetime(2020, 8, 18, 23, 39, 58, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 472552282, 'comment_body': ""Yeah this PR has gotten very messy over time... If I were to rewrite it I'd make it much easier to review haha.\r\n\r\nSo I had a [listener inside the FieldInvalidDropdown](https://github.com/BeksOmega/appinventor-sources/pull/11/files#diff-a61ef7a00c00fadab2852fa9827eebd8L44) but I realized it wasn't necessary for the helpers_dropdown blocks, so I moved the listeners into the screens & assets fields.\r\n\r\n> You should also remove the event listener when the block is disposed, otherwise we will just get a pile of these event listeners for every block added/deleted.\r\n\r\nThanks for the catch! Actually these should be assigned to the onchange property. Those get removed automatically."", 'comment_created': datetime.datetime(2020, 8, 18, 23, 40, 5, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 472552352, 'comment_body': 'Good point!', 'comment_created': datetime.datetime(2020, 8, 18, 23, 40, 19, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 472552373, 'comment_body': ""Is there a better way to structure this than making it generic? It feels like I'm trying to bring my untyped JS brain to Java, and there may be a better pattern for this. Any opinions?\r\n\r\nAlso fixed :D"", 'comment_created': datetime.datetime(2020, 8, 18, 23, 40, 24, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 472552398, 'comment_body': 'If the key is out of bounds it will return undefined. That works in all situations where this is called from :D', 'comment_created': datetime.datetime(2020, 8, 18, 23, 40, 28, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 472552428, 'comment_body': ""I think .every does fail quickly, so now that we are sorting the filter elements inside the ComponentProcessor we should get that benefit :D\r\n\r\nBut I think that you're advising that we should sort the filters in this.filters_ in addition to the elements in each filter. I'll add a TODO for that."", 'comment_created': datetime.datetime(2020, 8, 18, 23, 40, 33, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 480081339, 'comment_body': ""You may want to filter and only do this if the node is a YoungAndroidFormNode. Otherwise, you'll call this up to three times for the .scm, .bky, and .yail files for each screen."", 'comment_created': datetime.datetime(2020, 8, 31, 11, 57, 33, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 480081579, 'comment_body': 'Minor code style: space between `(YoungAndroidSourceNode)` and `node` in the cast.', 'comment_created': datetime.datetime(2020, 8, 31, 11, 58, 1, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 480081811, 'comment_body': 'See earlier comments about node type and styling.', 'comment_created': datetime.datetime(2020, 8, 31, 11, 58, 31, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 480081883, 'comment_body': 'See earlier comments about node type and styling.', 'comment_created': datetime.datetime(2020, 8, 31, 11, 58, 40, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 480084266, 'comment_body': 'You should change the return type of `Blockly.Blocks.Utilities.assetKeyToBlocklyType` to match this function then as it is the only place that it is called from. This return allows for undefined but the caller does not.', 'comment_created': datetime.datetime(2020, 8, 31, 12, 4, 3, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 480085412, 'comment_body': ""Rather than create an anonymous inner type here subclassing ArrayList, you could instead break the initialization into a separate `static` block:\r\n\r\n```java\r\nprotected final List<List<String>> filters;\r\n\r\nstatic {\r\n  filters = new ArrayList<String>();\r\n  filters.add(new ArrayList<String>());\r\n}\r\n```\r\n\r\nIMO it's more understandable to most people than the double-curly notation."", 'comment_created': datetime.datetime(2020, 8, 31, 12, 6, 33, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 480092973, 'comment_body': ""Given how it is used in the code, it seems like there are two approaches you could take.\r\n\r\nOption 1: Don't use generics. Make the key type be `Object` and continue to cast as you've done where `getKey` is used. That's effectively what happens when you specify the generic as `<?>` or leave it unspecified.\r\n\r\nOption 2: Don't make this final and create two new subclasses that specify the key type:\r\n\r\n```java\r\nprotected class OptionHelperKey extends HelperKey<String> {\r\n  protected OptionHelperKey(String key) {\r\n    super(HelperType.OPTION_LIST, key);\r\n  }\r\n}\r\n\r\nprotected class AssetHelperKey extends HelperKey<Integer> {\r\n  protected AssetHelperKey(Integer key) {\r\n    super(HelperType.ASSET, key);\r\n  }\r\n}\r\n```\r\n\r\nand then in ComponentDescriptorGenerator in your switch where you handle the helper type you can cast to either OptionHelperKey or AssetHelperKey.\r\n\r\nEither option is fine because the cast that occurs at runtime will fail if for whatever reason the type is wrong. Generics are really intended for compile time type safety checks, but we're mixing the different types of key helpers into a single data structure."", 'comment_created': datetime.datetime(2020, 8, 31, 12, 22, 21, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 480093538, 'comment_body': ""I'm curious how this approach will work with extensions. If you and I both create an extension with a filter, can't we end up with the same index? When we load these two extensions into App Inventor, do we end up selecting the same (potentially incorrect) filter?\r\n\r\nI recall we decided to drop filtering for now, but you may want to leave a TODO here to think about that."", 'comment_created': datetime.datetime(2020, 8, 31, 12, 23, 34, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 480281550, 'comment_body': ""> Option 2: Don't make this final and create two new subclasses that specify the key type:\r\n\r\nOk this does seem like the more Java way to do things. And I was going to switch it over. But then I was thinking it makes the HelperType kind of confusing when the type is encoded in the actual class, but I don't want to get rid of the HelperType because that makes it more consistent with the js side of the implementation.\r\n\r\nSo if I was doing this was purely a Java project I'd definitely move to Option 2, but since I want future people to understand how the Java and JS parts match, I'm going to move to Option 1.  I've added the above context to the source.\r\n\r\nIf you have a different opinion though, I'm happy to do it the other way."", 'comment_created': datetime.datetime(2020, 8, 31, 17, 35, 17, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 480281626, 'comment_body': 'I think [this](https://github.com/BeksOmega/appinventor-sources/pull/11#discussion_r480084266) was meant to go here:\r\n> You should change the return type of Blockly.Blocks.Utilities.assetKeyToBlocklyType to match this function then as it is the only place that it is called from. This return allows for undefined but the caller does not.', 'comment_created': datetime.datetime(2020, 8, 31, 17, 35, 23, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 480281887, 'comment_body': ""I wasn't able to add it inside a `static` block b/c the list isn't static. So I moved it to a constructor for the ComponentProcessor instead."", 'comment_created': datetime.datetime(2020, 8, 31, 17, 35, 52, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 480281975, 'comment_body': 'There are no conflict problems wrt extensions because the index in the list in the ComponentProcessor doesn\'t get encoded in the simple_components.json file. The only info that gets sent to the component_database.js is the actual filter. Eg:\r\n```\r\n   ""type"": ""ASSET"",\r\n    ""data"": {\r\n      ""filter"": [ "".jpeg"" ]\r\n    }\r\n```\r\n\r\nAnd then the component_database de-duplicates all the data and comes up with its own new set of indices.\r\n\r\nAnd because none of the filter data gets saved to XML (all of the behavior is encoded in the connection checks) we don\'t have any trouble with round tripping using this system.\r\n\r\nTL:DR already covered, shouldn\'t be anything to worry about.', 'comment_created': datetime.datetime(2020, 8, 31, 17, 36, 2, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}]","[{'commit_sha': 'd925fb1cf534e8ffb408bda0acce73a784547dc5', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '27490257a5a8f9370363a9f60a02c10ff0b94ab9', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0935882f9b31df57da804dc6b9627ba92babe0e8', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c031bb4e4fc5c9e303564d2d71fbe06c12def17', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10d5cf1d48d1cda2399b30ec3eba83a3770c1797', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ccb13cf216a71fb89787fc0a6dd8cf89eae9ec2b', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab0cf4802e309cb0cddd055604a79ff5278be84c', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '59183edc98dbad55c8700cecded9d824b1aa4cd8', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '35b805d8132ad9b8d5a745932cd08526f865aa53', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3d70d8cb9f3b5bd500d8b3e66ea428fee6f3ff6', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '29a58fe3df2c3728f6b0a522c59bc48853600ff4', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c64619f670fbcf83cfee619c34489574301ccb1', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e7c9006dcfc2b8e4506aeb71c7d0c6282b43999', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '103e07001d67404908d2cb4c8ada6d81a7975f2c', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20c264ae2731ad4115cdc9ec396a41ec808ed153', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b78a4a0496200516c3dfbd993e851f5386c2953', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}]",Beka Westberg,25440652,,User,,35,,0,99
439393327,Clean up flydowns,"### Description

I did some reformatting which means this will probably be easiest to review commit-wise. Here is a slightly more detailed position of each commit:

Commit 1: Reformats the field_parameter_flyout.js file so that it is more readable.
Commit 2: Removes the unused opt_codename & this.eventParam code. These were supposed to be used for internationalization, but they are not. Instead getEventParam creates a map (well parallel arrays, but same thing) of translated names -> untranslated names and uses that to find the event param.
Commit 3: Deletes the procedure flydown because it is unused.
Commit 4: Reformats the field_flydown.js file so that it is more readable.
Commit 5: Adds a new event flydown. This handles component event parameters.
Commit 6: Makes displayLocation optional (since it was already being used that way).
Commit 7: Fixes the position of event parameter flydowns when they are arranged horizontally.

Currently on master the flydown is always displayed to the right.
![Horiz](https://user-images.githubusercontent.com/25440652/85607067-9ab88900-b608-11ea-965f-3a70bfe1ea33.png)
![Vertical](https://user-images.githubusercontent.com/25440652/85607072-9c824c80-b608-11ea-93a4-3d18db4dc146.png)

Which doesn't match procedures.
![ProcedureHorizontal](https://user-images.githubusercontent.com/25440652/85607087-9ee4a680-b608-11ea-85ef-295060173ab9.png)
![ProcedureVertical](https://user-images.githubusercontent.com/25440652/85607114-a310c400-b608-11ea-8e6f-173478449faf.png)

### Testing

#### I18n
1. Created the following blocks:
![TestBlocks](https://user-images.githubusercontent.com/25440652/85613997-541a5d00-b60f-11ea-915c-62aa2f5957fc.png)

2. Switched to Spanish:
![Spanish](https://user-images.githubusercontent.com/25440652/85614007-57154d80-b60f-11ea-9226-1227109fcf04.png)

3. Observed that the blocks matched the behavior in production.

#### Arrange Horiz/Vert Option
Observed that the arrange option comes before the collapse option:
![BeforeCollapsed](https://user-images.githubusercontent.com/25440652/85614664-f63a4500-b60f-11ea-8f76-fe0cffb80e4b.png)

Observed that if a return procedure has variables the inline inputs option is removed:
![NoInline](https://user-images.githubusercontent.com/25440652/85614670-f8040880-b60f-11ea-94f4-e120920cfedb.png)

Observed that if a return procedures /does not have/ variables the inline inputs option is available:
![WithInline](https://user-images.githubusercontent.com/25440652/85614677-f9cdcc00-b60f-11ea-8c20-c0fb1a33e1fe.png)

### Additional Info

While technically this is blocking me from adding dropdown blocks in flydowns, that is not a super high priority.
",True,2215,https://api.github.com/repos/mit-cml/appinventor-sources/pulls/2215,https://github.com/mit-cml/appinventor-sources/pull/2215,closed,221,177,6,11,4,24,3,0,"[{'name': 'pull request: ready to push to Gerrit'}, {'name': 'technical debt'}, {'name': 'affects: master'}]",2020-06-24 18:50:44+00:00,2020-09-10 21:36:25+00:00,6749141.0,"78 days, 2:45:41","[{'comment_id': 456671483, 'comment_body': ""Are there specific style conventions you're following in making these changes?"", 'comment_created': datetime.datetime(2020, 7, 17, 20, 58, 43, tzinfo=datetime.timezone.utc), 'commenter': 'fturbak', 'type': 'User'}, {'comment_id': 456683696, 'comment_body': 'That appears to be correct!', 'comment_created': datetime.datetime(2020, 7, 17, 21, 33, 37, tzinfo=datetime.timezone.utc), 'commenter': 'fturbak', 'type': 'User'}, {'comment_id': 456690918, 'comment_body': ""Yes :D I am following the [google's javascript styleguide](https://google.github.io/styleguide/jsguide.html) which is also the guide the App Inventor uses. In particular I am making these files conform to the [column limit](https://google.github.io/styleguide/jsguide.html#formatting-column-limit) and [linewrapping](https://google.github.io/styleguide/jsguide.html#formatting-line-wrapping) rules which greatly aid readability.\r\n\r\nThere are other things in App Inventor's javascript code which could be changed, eg naming convensions, comment formating, more thorough jsdoc. But I really feel like the line wrapping gives you the best return on investment."", 'comment_created': datetime.datetime(2020, 7, 17, 21, 56, 41, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 456714920, 'comment_body': ""This is equivalent to the previous code, but I'm not convinced that it's an improvement in terms of clarity, and I don't see this covered in the JavaScript style guide. What's your justification for making this change?"", 'comment_created': datetime.datetime(2020, 7, 17, 23, 34, 19, tzinfo=datetime.timezone.utc), 'commenter': 'fturbak', 'type': 'User'}, {'comment_id': 456715423, 'comment_body': 'The ...  at the beginning of this comment continues the ... at the end of the previous comment. ', 'comment_created': datetime.datetime(2020, 7, 17, 23, 36, 43, tzinfo=datetime.timezone.utc), 'commenter': 'fturbak', 'type': 'User'}, {'comment_id': 456716081, 'comment_body': ""I don't agree that breaking this into two lines improves readabililty.  If the line were overly long or scale was used elsewhere, that would be a different story. So what's the justification for changing this? "", 'comment_created': datetime.datetime(2020, 7, 17, 23, 40, 30, tzinfo=datetime.timezone.utc), 'commenter': 'fturbak', 'type': 'User'}, {'comment_id': 456717831, 'comment_body': 'Oops, my bad. I now see that `scale` *is* used elsewhere below, so I withdraw the above comment. ', 'comment_created': datetime.datetime(2020, 7, 17, 23, 49, 31, tzinfo=datetime.timezone.utc), 'commenter': 'fturbak', 'type': 'User'}, {'comment_id': 456719121, 'comment_body': ""This line is now incorrect, since `x` and `y` are now unbound variables. To be consistent with your changes, you'd need to change these to `xy.x` and `xy.y` respectively.  Now I see that you've made this correction in your last commit of this PR, but I'm confused how this situation is handled in terms of reviewing an individual commit within a PR. I don't like the idea of approving a commit that has a clear bug. What is the convention for handling this? "", 'comment_created': datetime.datetime(2020, 7, 17, 23, 56, tzinfo=datetime.timezone.utc), 'commenter': 'fturbak', 'type': 'User'}, {'comment_id': 456787652, 'comment_body': ""I don't understand the meaning of the `=` in `string=`, nor do I understand the `!` in `!ParameterDescriptor`. I can't find these in the JavaScript style guide. Are they explained elsewhere?"", 'comment_created': datetime.datetime(2020, 7, 18, 12, 57, 24, tzinfo=datetime.timezone.utc), 'commenter': 'fturbak', 'type': 'User'}, {'comment_id': 456787851, 'comment_body': ""I'm confused. In order to give this the correct default value as specified above, shouldn't this line be:\r\n`this.displayLocation = opt_displayLocation ? opt_displayLocation : Blockly.FieldFlydown.DISPLAY_RIGHT`?"", 'comment_created': datetime.datetime(2020, 7, 18, 13, 0, 5, tzinfo=datetime.timezone.utc), 'commenter': 'fturbak', 'type': 'User'}, {'comment_id': 456816204, 'comment_body': ""[Returning early](https://medium.com/better-programming/are-early-returns-any-good-eed4b4d03866) is a just a programming style which I tend to like. I do think it generally improves clarity, and I think having an entire method wrapped in an if statement leads to worse code if the complexity of this function ever grows. But if you don't like it I can revert."", 'comment_created': datetime.datetime(2020, 7, 18, 18, 37, 12, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 456817954, 'comment_body': ""I'm not sure that there's a convention in this situation. But then again I don't necessarily think of it as approving commits. I think of it more like more like you're approving the whole PR, but you're just looking at the changes in the PR in a way that makes it easier to review them (in this case commit-wise)."", 'comment_created': datetime.datetime(2020, 7, 18, 18, 58, 2, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 460273871, 'comment_body': 'Ping on this question.', 'comment_created': datetime.datetime(2020, 7, 24, 20, 31, 17, tzinfo=datetime.timezone.utc), 'commenter': 'fturbak', 'type': 'User'}, {'comment_id': 460273967, 'comment_body': 'Ping on this question.', 'comment_created': datetime.datetime(2020, 7, 24, 20, 31, 31, tzinfo=datetime.timezone.utc), 'commenter': 'fturbak', 'type': 'User'}, {'comment_id': 460274411, 'comment_body': 'Lyn agrees that this fixes the bug reported in an earlier commit on this PR>', 'comment_created': datetime.datetime(2020, 7, 24, 20, 32, 34, tzinfo=datetime.timezone.utc), 'commenter': 'fturbak', 'type': 'User'}, {'comment_id': 460445564, 'comment_body': ""Those are part of the Closure type system. {TypeName=} means the param is optional. {!TypeName} means the param must be non-null. The full extent of the Closure type system is quite deep so don't feel the need to read the whole thing, but [here](https://github.com/google/closure-compiler/wiki/Types-in-the-Closure-Type-System) is where you can find the documentation."", 'comment_created': datetime.datetime(2020, 7, 25, 20, 52, 10, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 460445797, 'comment_body': ""It's not necessary in this case because [the logic](https://github.com/mit-cml/appinventor-sources/blob/c796aca85faa57f69ba214767a20636f9c0a3645/appinventor/blocklyeditor/src/field_flydown.js#L176) uses an else for the default.\r\n```\r\n  if (this.displayLocation === Blockly.FieldFlydown.DISPLAY_BELOW) {\r\n    y = y + borderBBox.height * flydown.workspace_.scale;\r\n  } else { // if (this.displayLocation === Blockly.FieldFlydown.DISPLAY_RIGHT) {\r\n    x = x + borderBBox.width * flydown.workspace_.scale;\r\n  }\r\n```\r\n\r\nWe could make it explicit if you want though.\r\n"", 'comment_created': datetime.datetime(2020, 7, 25, 20, 55, 3, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 460445885, 'comment_body': ""Also note that this App Inventor isn't very strict about type annotations, but I figured I could fix these ones up while I was in the area."", 'comment_created': datetime.datetime(2020, 7, 25, 20, 56, 3, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 462365047, 'comment_body': 'Fair enough. A key benefit I see is using less indentation. The notion of getting unusual cases out of the way early is also compelling. ', 'comment_created': datetime.datetime(2020, 7, 29, 14, 56, 55, tzinfo=datetime.timezone.utc), 'commenter': 'fturbak', 'type': 'User'}, {'comment_id': 462370260, 'comment_body': ""Thanks for the explanation and link. I didn't know about this before, but now I do, thanks to you!"", 'comment_created': datetime.datetime(2020, 7, 29, 15, 3, 52, tzinfo=datetime.timezone.utc), 'commenter': 'fturbak', 'type': 'User'}, {'comment_id': 462371331, 'comment_body': 'Understanding the default behavior via the logic you highlighted is subtle and nonobvious. Please instead use the conditional expression I recommended. ', 'comment_created': datetime.datetime(2020, 7, 29, 15, 5, 15, tzinfo=datetime.timezone.utc), 'commenter': 'fturbak', 'type': 'User'}, {'comment_id': 462387474, 'comment_body': ""I want to resolve this comment thread (and others), but can't figure out how to do that. Please see my email on this. "", 'comment_created': datetime.datetime(2020, 7, 29, 15, 27, 5, tzinfo=datetime.timezone.utc), 'commenter': 'fturbak', 'type': 'User'}, {'comment_id': 462416755, 'comment_body': '[Done =)](https://github.com/mit-cml/appinventor-sources/pull/2215/commits/2ad8a205d6ab74ac7327de118baa9f78ecf897a6)', 'comment_created': datetime.datetime(2020, 7, 29, 16, 8, 29, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 483794818, 'comment_body': 'Indentation here should be 2 spaces.', 'comment_created': datetime.datetime(2020, 9, 4, 18, 50, 43, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}]","[{'commit_sha': 'ba613a0f6f57ce6b29d307b4643d5fde0e953eb2', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fea04bace7d0ee59596f6c866d6fff32e045cf17', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c7a618c1c47d03ca35e822ee4faffda442c5e012', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '324da0de1d3ee42cb031d769b023d3168227eded', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14f95cbe68a0512d70d16c115dbc77bfd2885360', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5853e93c1b8ed87db7354bb47f51b9799ba0379', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '29fc247658b5b78a650cf1ab8cbd882c1dc9949e', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62291ab564fa9ff7e3cf19b6c6f591676e704527', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a036feff882c5a08d4afa23694203843889371d8', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1c81c823d766d897b983559fec5acfa548af834', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ad8a205d6ab74ac7327de118baa9f78ecf897a6', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}]",Beka Westberg,25440652,,User,,35,,0,99
441563276,Fix deprecation being inconsistent,"### Description

Resolves #2216 

Now all feature types correctly react like this:
![Deprecation](https://user-images.githubusercontent.com/25440652/86038715-3590d900-b9f6-11ea-949e-7505cb4feec5.png)

### Testing
Could not replicate the behavior from #2216 

### Additional Info

Question: Why do we disable the blocks? The code gen should still work. There's also a problem that if you re-enable them there is no red ""bad block"" highlight:
![Re-Enabled](https://user-images.githubusercontent.com/25440652/86039032-b64fd500-b9f6-11ea-80e4-fa676a55aade.png)",True,2219,https://api.github.com/repos/mit-cml/appinventor-sources/pulls/2219,https://github.com/mit-cml/appinventor-sources/pull/2219,closed,28,26,2,3,5,4,3,1,"[{'name': 'bug'}, {'name': 'pull request: ON GERRIT'}, {'name': 'affects: master'}]",2020-06-29 17:54:12+00:00,2021-02-22 21:57:20+00:00,20577788.0,"238 days, 4:03:08","[{'comment_id': 458246016, 'comment_body': 'Setting the block to disabled overrides the visible effect of `badBlock`, so you could eliminate this call.', 'comment_created': datetime.datetime(2020, 7, 21, 16, 53, 22, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 458247384, 'comment_body': 'Yeah I thought it was weird that the behavior was to disabled blocks. Will fix :D', 'comment_created': datetime.datetime(2020, 7, 21, 16, 55, 29, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 564926667, 'comment_body': ""I think we are mixing two different issues here. In the case where `data` is undefined, the block definition no longer exists. This is a truly `badBlock` and can't generate code because we don't have enough information to do so. In the case where the item is marked deprecated, the underlying code still exists and so we could disable the block (re-enabling will restore the old behavior) with the expectation that some day the block will go away. Alternatively, we could include an error message stating that the block is deprecated and should be removed. This mainly applies to extensions as if we do remove a block we usually have an upgrader to substitute in the replacement. Extensions don't have upgraders though so can't provide similar support."", 'comment_created': datetime.datetime(2021, 1, 27, 0, 13, 40, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 565738150, 'comment_body': 'Ok I changed it so that if the functions `@Deprecated` the blocks are disabled. If the functions are removed, the blocks are marked as `badBlock`s.\r\n\r\nSo if you **deprecate** the functions for the blocks in the test aia, they look like this:\r\n![Deprecation](https://user-images.githubusercontent.com/25440652/86038715-3590d900-b9f6-11ea-949e-7505cb4feec5.png)\r\n\r\nIf you **remove** the functions, they look like this:\r\n![removed-blocks](https://user-images.githubusercontent.com/25440652/106072519-31788700-60bd-11eb-98b7-6b2fd62c98de.png)\r\n', 'comment_created': datetime.datetime(2021, 1, 28, 0, 33, 23, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}]","[{'commit_sha': '464af20c8eb95e076fdfc3c9a110e3122cc6c66e', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f07ea460044e406b63a4fbe204a621330c84fd2a', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19b8e49c5ee2afa949c5408ceb0ff9cb9693fd3b', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}]",Beka Westberg,25440652,,User,,35,,0,99
448480321,Fix instance typing and cleanup typing,"### Description

1) Fixes 'InstantInTime' typing. Functions do not work as input checks.
2) Reformats the YailTypeToBlocklyTypeMap so that it is more readable.
3) Adds support for an opt_currentType that can be passed to YailTypeToBlocklyType. This is helpful for my current dropdowns project because we must get the Blockly types of the abstract (enum) type and the concrete type separately, then combine them.

",True,2240,https://api.github.com/repos/mit-cml/appinventor-sources/pulls/2240,https://github.com/mit-cml/appinventor-sources/pull/2240,closed,72,26,1,3,9,4,3,1,"[{'name': 'bug'}, {'name': 'pull request: ON GERRIT'}, {'name': 'affects: master'}]",2020-07-13 20:45:09+00:00,2020-12-04 21:03:37+00:00,12442708.0,"144 days, 0:18:28","[{'comment_id': 486649972, 'comment_body': ""If we are going to look up by strings, we should quote the keys in the above dictionaries so that if we decide to move to advanced compilation the obfuscation doesn't take us by surprise."", 'comment_created': datetime.datetime(2020, 9, 10, 21, 42, 8, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 486650105, 'comment_body': 'Can we drop this log?', 'comment_created': datetime.datetime(2020, 9, 10, 21, 42, 28, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 486651406, 'comment_body': ""How is `opt_currentType` used? I don't see it referenced anywhere in this PR."", 'comment_created': datetime.datetime(2020, 9, 10, 21, 45, 29, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 487322399, 'comment_body': ""I thought it would be helpful for some of the connection checks w/ the dropdown blocks, but it turned out to not be necessary. I've removed it now =)"", 'comment_created': datetime.datetime(2020, 9, 11, 22, 46, 59, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}]","[{'commit_sha': '3ea078f4e1c5560b34407ffeb5bf4a8ee38f422b', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '023f3731a83b5765ecb1d1a46afbd2a2da04e870', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '332bf2aa26cda0d4d4d47f961213ac1703aae647', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}]",Beka Westberg,25440652,,User,,35,,0,99
464218025,Add max flyout width,"### Description

Closes https://github.com/mit-cml/appinventor-sources/issues/2156

Adds a maximum width to the flyout (300px). This does not add horizontal scrolling, because after seeing the simple width-limiting behavior I don't believe it is necessary. In all of the components/drawers I have tested 300px is large enough that you can see what the block will do before selecting it.

I think that adding horizontal scrolling will just make this code more difficult to maintain in the future. If you want to use two scrollbars you have to interact with a Blockly.ScrollbarPair rather than a Blockly.Scrollbar, and they have different interfaces. I would recommend staying away from anything related to coordinates, if at all possible.

But I'm still open to the possibility. Tell me whatcha think =)

![Procedures](https://user-images.githubusercontent.com/25440652/89572289-c9b44400-d7dd-11ea-84c8-eb24e21c2612.png)
![Dictionaries](https://user-images.githubusercontent.com/25440652/89572294-cae57100-d7dd-11ea-8f69-f9003c13c2a4.png)
![Screen](https://user-images.githubusercontent.com/25440652/89572298-cc169e00-d7dd-11ea-80b9-fc9ba7c17bb0.png)
![Backpack](https://user-images.githubusercontent.com/25440652/89572302-cd47cb00-d7dd-11ea-8158-ff6ea1b5cd23.png)

",False,8,https://api.github.com/repos/mit-cml/blockly/pulls/8,https://github.com/mit-cml/blockly/pull/8,closed,21,1,1,1,2,0,0,0,[],2020-08-06 19:20:50+00:00,2022-03-28 02:31:36+00:00,51693046.0,"598 days, 7:10:46",[],"[{'commit_sha': '6c87c54e5e56bf78ecfc1c5041723ed017621d40', 'committer_username': 'BeksOmega', 'committer_name': 'Beka Westberg', 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 30, 19, 43, 4, tzinfo=datetime.timezone.utc)}]",Beka Westberg,25440652,,User,,35,,0,99

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
162500843,appinventor-sources,BeksOmega/appinventor-sources,Java,0,0,2,235,3378,2,54,0,"[{'id': 473404075, 'number': 29, 'closed': datetime.datetime(2020, 8, 28, 17, 20, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 25, 19, 15, 46, tzinfo=datetime.timezone.utc), 'time_taken': 252292.0, 'time_delta': '2 days, 22:04:52', 'additions': 3, 'deletions': 3, 'state': 'closed'}, {'id': 464278796, 'number': 27, 'closed': datetime.datetime(2020, 8, 31, 16, 7, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 6, 21, 44, 13, tzinfo=datetime.timezone.utc), 'time_taken': 2139823.0, 'time_delta': '24 days, 18:23:43', 'additions': 157, 'deletions': 3, 'state': 'closed'}, {'id': 463666567, 'number': 26, 'closed': datetime.datetime(2020, 8, 18, 19, 33, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 5, 22, 5, tzinfo=datetime.timezone.utc), 'time_taken': 1114108.0, 'time_delta': '12 days, 21:28:28', 'additions': 221, 'deletions': 156, 'state': 'closed'}, {'id': 462280528, 'number': 25, 'closed': datetime.datetime(2020, 8, 16, 19, 24, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 3, 16, 36, 48, tzinfo=datetime.timezone.utc), 'time_taken': 1133268.0, 'time_delta': '13 days, 2:47:48', 'additions': 254, 'deletions': 18, 'state': 'closed'}, {'id': 461513001, 'number': 24, 'closed': datetime.datetime(2020, 8, 31, 19, 52, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 1, 23, 27, 50, tzinfo=datetime.timezone.utc), 'time_taken': 2579089.0, 'time_delta': '29 days, 20:24:49', 'additions': 280, 'deletions': 48, 'state': 'closed'}, {'id': 459660385, 'number': 23, 'closed': datetime.datetime(2020, 7, 30, 23, 7, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 30, 23, 5, 6, tzinfo=datetime.timezone.utc), 'time_taken': 130.0, 'time_delta': '0:02:10', 'additions': 221, 'deletions': 177, 'state': 'closed'}, {'id': 459657913, 'number': 22, 'closed': datetime.datetime(2020, 8, 31, 16, 6, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 30, 22, 58, 2, tzinfo=datetime.timezone.utc), 'time_taken': 2740136.0, 'time_delta': '31 days, 17:08:56', 'additions': 744, 'deletions': 183, 'state': 'closed'}, {'id': 458132985, 'number': 21, 'closed': datetime.datetime(2020, 8, 31, 15, 56, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 29, 0, 59, tzinfo=datetime.timezone.utc), 'time_taken': 2905041.0, 'time_delta': '33 days, 14:57:21', 'additions': 419, 'deletions': 175, 'state': 'closed'}, {'id': 456672419, 'number': 20, 'closed': datetime.datetime(2020, 8, 1, 23, 28, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 25, 21, 47, 9, tzinfo=datetime.timezone.utc), 'time_taken': 610879.0, 'time_delta': '7 days, 1:41:19', 'additions': 1860, 'deletions': 301, 'state': 'closed'}, {'id': 456527367, 'number': 19, 'closed': datetime.datetime(2020, 8, 16, 20, 22, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 24, 23, 20, 59, tzinfo=datetime.timezone.utc), 'time_taken': 1976485.0, 'time_delta': '22 days, 21:01:25', 'additions': 88, 'deletions': 19, 'state': 'closed'}, {'id': 456517351, 'number': 18, 'closed': datetime.datetime(2020, 8, 17, 18, 49, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 24, 22, 35, 10, tzinfo=datetime.timezone.utc), 'time_taken': 2060088.0, 'time_delta': '23 days, 20:14:48', 'additions': 243, 'deletions': 66, 'state': 'closed'}, {'id': 455987815, 'number': 17, 'closed': datetime.datetime(2020, 8, 31, 18, 36, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 23, 22, 43, 17, tzinfo=datetime.timezone.utc), 'time_taken': 3354817.0, 'time_delta': '38 days, 19:53:37', 'additions': 105, 'deletions': 7, 'state': 'closed'}, {'id': 455846128, 'number': 16, 'closed': datetime.datetime(2020, 8, 18, 18, 57, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 23, 17, 9, 41, tzinfo=datetime.timezone.utc), 'time_taken': 2252854.0, 'time_delta': '26 days, 1:47:34', 'additions': 325, 'deletions': 66, 'state': 'closed'}, {'id': 455258441, 'number': 15, 'closed': datetime.datetime(2020, 8, 31, 16, 29, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 22, 17, 34, 7, tzinfo=datetime.timezone.utc), 'time_taken': 3452102.0, 'time_delta': '39 days, 22:55:02', 'additions': 104, 'deletions': 48, 'state': 'closed'}, {'id': 455213797, 'number': 14, 'closed': datetime.datetime(2020, 8, 12, 16, 23, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 22, 16, 5, 56, tzinfo=datetime.timezone.utc), 'time_taken': 1815443.0, 'time_delta': '21 days, 0:17:23', 'additions': 425, 'deletions': 123, 'state': 'closed'}, {'id': 448403385, 'number': 13, 'closed': datetime.datetime(2020, 7, 21, 15, 4, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 13, 17, 54, 23, tzinfo=datetime.timezone.utc), 'time_taken': 681023.0, 'time_delta': '7 days, 21:10:23', 'additions': 1020, 'deletions': 298, 'state': 'closed'}, {'id': 448372228, 'number': 12, 'closed': datetime.datetime(2020, 7, 21, 15, 4, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 13, 16, 48, 8, tzinfo=datetime.timezone.utc), 'time_taken': 684995.0, 'time_delta': '7 days, 22:16:35', 'additions': 954, 'deletions': 293, 'state': 'closed'}, {'id': 443014012, 'number': 11, 'closed': datetime.datetime(2020, 8, 31, 17, 51, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 1, 21, 59, 10, tzinfo=datetime.timezone.utc), 'time_taken': 5255551.0, 'time_delta': '60 days, 19:52:31', 'additions': 644, 'deletions': 102, 'state': 'closed'}, {'id': 441705811, 'number': 10, 'closed': datetime.datetime(2020, 8, 12, 16, 19, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 29, 23, 52, 54, tzinfo=datetime.timezone.utc), 'time_taken': 3774392.0, 'time_delta': '43 days, 16:26:32', 'additions': 35, 'deletions': 1, 'state': 'closed'}, {'id': 441122645, 'number': 9, 'closed': datetime.datetime(2020, 7, 21, 19, 36, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 28, 22, 14, 7, tzinfo=datetime.timezone.utc), 'time_taken': 1977718.0, 'time_delta': '22 days, 21:21:58', 'additions': 1645, 'deletions': 239, 'state': 'closed'}, {'id': 437591245, 'number': 8, 'closed': datetime.datetime(2020, 8, 12, 16, 17, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 21, 19, 39, 59, tzinfo=datetime.timezone.utc), 'time_taken': 4480649.0, 'time_delta': '51 days, 20:37:29', 'additions': 158, 'deletions': 6, 'state': 'closed'}, {'id': 437330386, 'number': 7, 'closed': datetime.datetime(2020, 8, 12, 16, 15, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 19, 23, 27, 36, tzinfo=datetime.timezone.utc), 'time_taken': 4639661.0, 'time_delta': '53 days, 16:47:41', 'additions': 144, 'deletions': 34, 'state': 'closed'}, {'id': 437230406, 'number': 6, 'closed': datetime.datetime(2020, 8, 12, 16, 12, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 19, 17, 55, 7, tzinfo=datetime.timezone.utc), 'time_taken': 4659444.0, 'time_delta': '53 days, 22:17:24', 'additions': 199, 'deletions': 39, 'state': 'closed'}, {'id': 435372908, 'number': 5, 'closed': datetime.datetime(2020, 8, 7, 16, 53, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 16, 17, 48, 58, tzinfo=datetime.timezone.utc), 'time_taken': 4489450.0, 'time_delta': '51 days, 23:04:10', 'additions': 437, 'deletions': 18, 'state': 'closed'}, {'id': 432718151, 'number': 4, 'closed': datetime.datetime(2020, 8, 7, 16, 45, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 10, 21, 42, 10, tzinfo=datetime.timezone.utc), 'time_taken': 4993416.0, 'time_delta': '57 days, 19:03:36', 'additions': 250, 'deletions': 13, 'state': 'closed'}, {'id': 432116913, 'number': 3, 'closed': datetime.datetime(2020, 7, 30, 23, 0, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 9, 23, 29, 29, tzinfo=datetime.timezone.utc), 'time_taken': 4404655.0, 'time_delta': '50 days, 23:30:55', 'additions': 1197, 'deletions': 245, 'state': 'closed'}, {'id': 429323814, 'number': 2, 'closed': datetime.datetime(2020, 6, 10, 16, 19, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 6, 17, 12, 46, tzinfo=datetime.timezone.utc), 'time_taken': 342412.0, 'time_delta': '3 days, 23:06:52', 'additions': 160, 'deletions': 88, 'state': 'closed'}, {'id': 426274867, 'number': 1, 'closed': datetime.datetime(2020, 6, 10, 16, 19, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 2, 0, 2, 8, tzinfo=datetime.timezone.utc), 'time_taken': 749862.0, 'time_delta': '8 days, 16:17:42', 'additions': 438, 'deletions': 42, 'state': 'closed'}]"
4787136,appinventor-sources,mit-cml/appinventor-sources,Java,2045,1464,143,239,3423,597,12,164,"[{'id': 476509594, 'number': 2301, 'closed': datetime.datetime(2021, 5, 14, 12, 23, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 31, 20, 0, 40, tzinfo=datetime.timezone.utc), 'time_taken': 22090987.0, 'time_delta': '255 days, 16:23:07', 'additions': 6452, 'deletions': 1347, 'state': 'closed'}, {'id': 474126867, 'number': 2294, 'closed': datetime.datetime(2021, 2, 19, 20, 22, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 26, 20, 8, 26, tzinfo=datetime.timezone.utc), 'time_taken': 15293628.0, 'time_delta': '177 days, 0:13:48', 'additions': 6, 'deletions': 0, 'state': 'closed'}, {'id': 469677005, 'number': 2286, 'closed': datetime.datetime(2020, 8, 27, 21, 4, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 18, 18, 53, 52, tzinfo=datetime.timezone.utc), 'time_taken': 785430.0, 'time_delta': '9 days, 2:10:30', 'additions': 222, 'deletions': 28, 'state': 'closed'}, {'id': 448480321, 'number': 2240, 'closed': datetime.datetime(2020, 12, 4, 21, 3, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 13, 20, 45, 9, tzinfo=datetime.timezone.utc), 'time_taken': 12442708.0, 'time_delta': '144 days, 0:18:28', 'additions': 72, 'deletions': 26, 'state': 'closed'}, {'id': 441563276, 'number': 2219, 'closed': datetime.datetime(2021, 2, 22, 21, 57, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 29, 17, 54, 12, tzinfo=datetime.timezone.utc), 'time_taken': 20577788.0, 'time_delta': '238 days, 4:03:08', 'additions': 28, 'deletions': 26, 'state': 'closed'}, {'id': 439393327, 'number': 2215, 'closed': datetime.datetime(2020, 9, 10, 21, 36, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 24, 18, 50, 44, tzinfo=datetime.timezone.utc), 'time_taken': 6749141.0, 'time_delta': '78 days, 2:45:41', 'additions': 221, 'deletions': 177, 'state': 'closed'}, {'id': 431293293, 'number': 2206, 'closed': datetime.datetime(2020, 6, 9, 14, 5, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 8, 17, 37, 7, tzinfo=datetime.timezone.utc), 'time_taken': 73728.0, 'time_delta': '20:28:48', 'additions': 15, 'deletions': 2, 'state': 'closed'}, {'id': 430293447, 'number': 2204, 'closed': datetime.datetime(2020, 6, 8, 12, 13, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 7, 18, 56, 5, tzinfo=datetime.timezone.utc), 'time_taken': 62242.0, 'time_delta': '17:17:22', 'additions': 4, 'deletions': 4, 'state': 'closed'}, {'id': 428128255, 'number': 2201, 'closed': datetime.datetime(2020, 6, 9, 1, 31, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 4, 22, 45, 35, tzinfo=datetime.timezone.utc), 'time_taken': 355570.0, 'time_delta': '4 days, 2:46:10', 'additions': 195, 'deletions': 113, 'state': 'closed'}, {'id': 412706321, 'number': 2181, 'closed': datetime.datetime(2020, 5, 7, 20, 14, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 4, 2, 4, tzinfo=datetime.timezone.utc), 'time_taken': 324624.0, 'time_delta': '3 days, 18:10:24', 'additions': 13, 'deletions': 17, 'state': 'closed'}, {'id': 410305598, 'number': 2179, 'closed': datetime.datetime(2020, 4, 28, 19, 23, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 28, 19, 10, 1, tzinfo=datetime.timezone.utc), 'time_taken': 816.0, 'time_delta': '0:13:36', 'additions': 1, 'deletions': 0, 'state': 'closed'}, {'id': 408980586, 'number': 2178, 'closed': datetime.datetime(2020, 4, 27, 15, 3, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 25, 22, 36, 41, tzinfo=datetime.timezone.utc), 'time_taken': 145623.0, 'time_delta': '1 day, 16:27:03', 'additions': 3, 'deletions': 6, 'state': 'closed'}, {'id': 408801773, 'number': 2177, 'closed': datetime.datetime(2020, 5, 7, 14, 19, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 24, 23, 5, 31, tzinfo=datetime.timezone.utc), 'time_taken': 1091668.0, 'time_delta': '12 days, 15:14:28', 'additions': 39, 'deletions': 9, 'state': 'closed'}, {'id': 406960794, 'number': 2171, 'closed': datetime.datetime(2022, 3, 28, 2, 31, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 21, 23, 32, 52, tzinfo=datetime.timezone.utc), 'time_taken': 60922709.0, 'time_delta': '705 days, 2:58:29', 'additions': 2061, 'deletions': 70, 'state': 'closed'}, {'id': 403317065, 'number': 2164, 'closed': datetime.datetime(2020, 4, 14, 21, 56, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 14, 17, 26, 32, tzinfo=datetime.timezone.utc), 'time_taken': 16217.0, 'time_delta': '4:30:17', 'additions': 15, 'deletions': 14, 'state': 'closed'}, {'id': 400352423, 'number': 2154, 'closed': datetime.datetime(2020, 4, 7, 17, 0, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 7, 15, 49, 22, tzinfo=datetime.timezone.utc), 'time_taken': 4292.0, 'time_delta': '1:11:32', 'additions': 1, 'deletions': 0, 'state': 'closed'}, {'id': 396663554, 'number': 2137, 'closed': datetime.datetime(2020, 4, 16, 12, 47, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 31, 23, 16, 16, tzinfo=datetime.timezone.utc), 'time_taken': 1344697.0, 'time_delta': '15 days, 13:31:37', 'additions': 123, 'deletions': 51, 'state': 'closed'}, {'id': 396498922, 'number': 2136, 'closed': datetime.datetime(2020, 4, 14, 21, 59, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 31, 17, 58, 45, tzinfo=datetime.timezone.utc), 'time_taken': 1224016.0, 'time_delta': '14 days, 4:00:16', 'additions': 21, 'deletions': 0, 'state': 'closed'}, {'id': 394880580, 'number': 2121, 'closed': datetime.datetime(2020, 4, 16, 15, 36, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 27, 17, 25, 17, tzinfo=datetime.timezone.utc), 'time_taken': 1721456.0, 'time_delta': '19 days, 22:10:56', 'additions': 219558, 'deletions': 164, 'state': 'closed'}, {'id': 394298905, 'number': 2117, 'closed': datetime.datetime(2020, 3, 27, 16, 51, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 26, 17, 3, 18, tzinfo=datetime.timezone.utc), 'time_taken': 85674.0, 'time_delta': '23:47:54', 'additions': 4, 'deletions': 3, 'state': 'closed'}, {'id': 393326443, 'number': 2115, 'closed': datetime.datetime(2020, 3, 25, 17, 55, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 25, 0, 49, 55, tzinfo=datetime.timezone.utc), 'time_taken': 61528.0, 'time_delta': '17:05:28', 'additions': 3, 'deletions': 3, 'state': 'closed'}, {'id': 387458205, 'number': 2099, 'closed': datetime.datetime(2020, 3, 27, 17, 50, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 12, 20, 30, 7, tzinfo=datetime.timezone.utc), 'time_taken': 1286424.0, 'time_delta': '14 days, 21:20:24', 'additions': 88, 'deletions': 55, 'state': 'closed'}, {'id': 385852833, 'number': 2091, 'closed': datetime.datetime(2020, 3, 17, 20, 56, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 9, 22, 43, 26, tzinfo=datetime.timezone.utc), 'time_taken': 684773.0, 'time_delta': '7 days, 22:12:53', 'additions': 34, 'deletions': 18, 'state': 'closed'}, {'id': 385170382, 'number': 2086, 'closed': datetime.datetime(2020, 3, 12, 18, 45, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 7, 16, 53, 25, tzinfo=datetime.timezone.utc), 'time_taken': 438714.0, 'time_delta': '5 days, 1:51:54', 'additions': 2, 'deletions': 1, 'state': 'closed'}, {'id': 382144926, 'number': 2075, 'closed': datetime.datetime(2020, 3, 18, 19, 59, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 2, 2, 44, 28, tzinfo=datetime.timezone.utc), 'time_taken': 1444485.0, 'time_delta': '16 days, 17:14:45', 'additions': 110, 'deletions': 0, 'state': 'closed'}, {'id': 381968569, 'number': 2074, 'closed': datetime.datetime(2020, 3, 27, 15, 44, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 1, 0, 48, 38, tzinfo=datetime.timezone.utc), 'time_taken': 2300174.0, 'time_delta': '26 days, 14:56:14', 'additions': 992, 'deletions': 99, 'state': 'closed'}, {'id': 381605786, 'number': 2073, 'closed': datetime.datetime(2020, 3, 2, 18, 58, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 28, 21, 34, 28, tzinfo=datetime.timezone.utc), 'time_taken': 249858.0, 'time_delta': '2 days, 21:24:18', 'additions': 36, 'deletions': 0, 'state': 'closed'}, {'id': 380593895, 'number': 2068, 'closed': datetime.datetime(2020, 3, 20, 1, 44, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 27, 1, 44, 44, tzinfo=datetime.timezone.utc), 'time_taken': 1900799.0, 'time_delta': '21 days, 23:59:59', 'additions': 32, 'deletions': 7, 'state': 'closed'}, {'id': 378787067, 'number': 2057, 'closed': datetime.datetime(2020, 2, 26, 21, 56, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 24, 2, 35, 34, tzinfo=datetime.timezone.utc), 'time_taken': 242472.0, 'time_delta': '2 days, 19:21:12', 'additions': 8, 'deletions': 2, 'state': 'closed'}, {'id': 375874888, 'number': 2037, 'closed': datetime.datetime(2020, 2, 19, 19, 7, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 16, 21, 22, 35, tzinfo=datetime.timezone.utc), 'time_taken': 251124.0, 'time_delta': '2 days, 21:45:24', 'additions': 57, 'deletions': 0, 'state': 'closed'}, {'id': 375873418, 'number': 2036, 'closed': datetime.datetime(2020, 2, 19, 19, 7, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 16, 21, 10, 34, tzinfo=datetime.timezone.utc), 'time_taken': 251799.0, 'time_delta': '2 days, 21:56:39', 'additions': 29, 'deletions': 46, 'state': 'closed'}, {'id': 373427504, 'number': 2026, 'closed': datetime.datetime(2020, 2, 21, 21, 28, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 11, 0, 54, 34, tzinfo=datetime.timezone.utc), 'time_taken': 938061.0, 'time_delta': '10 days, 20:34:21', 'additions': 393, 'deletions': 88, 'state': 'closed'}]"
50697145,blockly,mit-cml/blockly,JavaScript,46,24,10,68,1896,0,24,0,"[{'id': 464218025, 'number': 8, 'closed': datetime.datetime(2022, 3, 28, 2, 31, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 6, 19, 20, 50, tzinfo=datetime.timezone.utc), 'time_taken': 51693046.0, 'time_delta': '598 days, 7:10:46', 'additions': 21, 'deletions': 1, 'state': 'closed'}, {'id': 401123062, 'number': 6, 'closed': datetime.datetime(2020, 4, 14, 21, 56, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 8, 23, 6, 17, tzinfo=datetime.timezone.utc), 'time_taken': 514204.0, 'time_delta': '5 days, 22:50:04', 'additions': 14, 'deletions': 9, 'state': 'closed'}]"
