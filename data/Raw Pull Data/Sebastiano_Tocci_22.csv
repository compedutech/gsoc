pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1422522743,Identity verification feature,"Fixes #337

- [x] This pr contains no AI generated code
- [x] cargo fmt has been run
- [ ] cargo clippy has been run
- [ ] cargo test has been run and passes
- [ ] book chapter included (if relevant)
- [ ] design document included (if relevant)
",True,1819,https://api.github.com/repos/kanidm/kanidm/pulls/1819,https://github.com/kanidm/kanidm/pull/1819,closed,3113,368,44,9,9,114,0,0,[],2023-07-06 09:11:02+00:00,2023-08-16 11:02:49+00:00,3549107.0,"41 days, 1:51:47","[{'comment_id': 1257001471, 'comment_body': 'trace!() ', 'comment_created': datetime.datetime(2023, 7, 8, 4, 58, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1257001586, 'comment_body': 'Why not use kanidm_proto? ', 'comment_created': datetime.datetime(2023, 7, 8, 4, 59, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1257199966, 'comment_body': 'Rightt ', 'comment_created': datetime.datetime(2023, 7, 8, 9, 45, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Seba-T', 'type': 'User'}, {'comment_id': 1257200098, 'comment_body': 'Cause I didn’t think of that :p ', 'comment_created': datetime.datetime(2023, 7, 8, 9, 46, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Seba-T', 'type': 'User'}, {'comment_id': 1260471484, 'comment_body': 'I don\'t think you want filter_all here, you want ""filter"". ', 'comment_created': datetime.datetime(2023, 7, 12, 1, 59, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1260473051, 'comment_body': ""You'll never need to externally create the ec keys, the server will generate these internally."", 'comment_created': datetime.datetime(2023, 7, 12, 2, 2, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1260474526, 'comment_body': ""Also you should be making persons, not accounts. service accounts don't need to verify each other! humans do :) \r\n"", 'comment_created': datetime.datetime(2023, 7, 12, 2, 5, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1260475384, 'comment_body': 'This should be returned from the server when you get the TOTP so we can just the TOTP window server side and then the ui reflects that.\r\n', 'comment_created': datetime.datetime(2023, 7, 12, 2, 7, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1260475998, 'comment_body': ""totp's are ints."", 'comment_created': datetime.datetime(2023, 7, 12, 2, 8, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1260476090, 'comment_body': 'spaces? ', 'comment_created': datetime.datetime(2023, 7, 12, 2, 8, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1260477015, 'comment_body': 'Wrap in experimental features for now IMO. ', 'comment_created': datetime.datetime(2023, 7, 12, 2, 10, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1260480541, 'comment_body': 'I think there is a generic version of this in lib.rs (do_request).', 'comment_created': datetime.datetime(2023, 7, 12, 2, 16, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1260483360, 'comment_body': 'This might be better as a debug assert since the only time this is called is during create?', 'comment_created': datetime.datetime(2023, 7, 12, 2, 21, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1260724432, 'comment_body': ""alright, but I'm not entirely sure I get the difference "", 'comment_created': datetime.datetime(2023, 7, 12, 7, 27, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Seba-T', 'type': 'User'}, {'comment_id': 1260731771, 'comment_body': 'sure!', 'comment_created': datetime.datetime(2023, 7, 12, 7, 33, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Seba-T', 'type': 'User'}, {'comment_id': 1260735782, 'comment_body': 'yep, I was using it inside the `make_request` function, but now I reckon that namewise it doesn\'t make much sense. I think I should rather call it something like ""do_typed_request"" to differentiate from the already existing do_request ', 'comment_created': datetime.datetime(2023, 7, 12, 7, 37, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Seba-T', 'type': 'User'}, {'comment_id': 1262186595, 'comment_body': ""I'm not sure we need another crate here, can't we use proto? Or do these types need to be buried into their respective parts? I think a whole crate here is the wrong way. "", 'comment_created': datetime.datetime(2023, 7, 13, 8, 12, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1262189202, 'comment_body': 'I actually think thing is impossible since URL normalisation of /v1/person//_identify would fold the // to /? \r\n\r\nRegardless, even if it\'s empty, I still think being consistent here with the rest of the server and pasing it down to the event for lookup will still find that ""id doesn\'t exist"". ', 'comment_created': datetime.datetime(2023, 7, 13, 8, 14, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1262191816, 'comment_body': 'So here you\'ll need to make a new type of ""event"". You can see this in server/lib/src/idm/serviceaccount.rs where an GenerateApiTokenEvent is used. We want to wrap every ""request"" to an ""event"" type which completely encapsulates the request, this way we can always forge events in testing to simulate what was sent to us via the event layers. So have a look an trace something like that to undestand the layers here. ', 'comment_created': datetime.datetime(2023, 7, 13, 8, 16, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1262192157, 'comment_body': 'Similar here, with a unique event as above. ', 'comment_created': datetime.datetime(2023, 7, 13, 8, 16, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1262192257, 'comment_body': 'And here.', 'comment_created': datetime.datetime(2023, 7, 13, 8, 16, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1262195203, 'comment_body': 'And of course, once you make your event type that reflects what the API is requesting, you can then write tests for it in the idm module! (before you implement the handlers to actually do what the event requests). ', 'comment_created': datetime.datetime(2023, 7, 13, 8, 18, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1262218143, 'comment_body': 'fixed!', 'comment_created': datetime.datetime(2023, 7, 13, 8, 36, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Seba-T', 'type': 'User'}, {'comment_id': 1262219210, 'comment_body': 'yeah, as a matter of fact I thought I was using proto :p ', 'comment_created': datetime.datetime(2023, 7, 13, 8, 37, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Seba-T', 'type': 'User'}, {'comment_id': 1262956950, 'comment_body': ""I'm pretty sure the route just wouldn't match if there's nothing there."", 'comment_created': datetime.datetime(2023, 7, 13, 19, 7, 40, tzinfo=datetime.timezone.utc), 'commenter': 'yaleman', 'type': 'User'}, {'comment_id': 1263414358, 'comment_body': 'I thought that I could achieve the same by passing the user own uuid: if the server sees that the user sent its own uuid it just tells him if the feature is available or not on his account ', 'comment_created': datetime.datetime(2023, 7, 14, 7, 45, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Seba-T', 'type': 'User'}, {'comment_id': 1264753484, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2023, 7, 16, 22, 1, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Seba-T', 'type': 'User'}, {'comment_id': 1264806480, 'comment_body': ""Why are you importing this? I don't see you using it? "", 'comment_created': datetime.datetime(2023, 7, 17, 3, 16, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1264806639, 'comment_body': 'This looks good! ', 'comment_created': datetime.datetime(2023, 7, 17, 3, 16, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1264806768, 'comment_body': 'A more verbose fn name here would be good IMO. Note that (most) other fn\'s define the http verb type so this could be something like ""person_post_identify_user"". ', 'comment_created': datetime.datetime(2023, 7, 17, 3, 17, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1264807428, 'comment_body': 'Spaces between the different  asserts, you can also do a single assert with:\r\n`assert!(matches!(Err(StatusCode::FORBIDDEN), res));`', 'comment_created': datetime.datetime(2023, 7, 17, 3, 19, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1264807669, 'comment_body': ""space :) lets the codes breaaaathe. \r\n\r\nIt helps the reader deliniate one case from the next else it's hard to know if it's all part of one blob or separate. "", 'comment_created': datetime.datetime(2023, 7, 17, 3, 21, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1264807882, 'comment_body': 'For once, too much space 🤣', 'comment_created': datetime.datetime(2023, 7, 17, 3, 22, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1264808034, 'comment_body': 'Perfect! This looks really good! ', 'comment_created': datetime.datetime(2023, 7, 17, 3, 22, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1266652499, 'comment_body': 'Yeah dumb autoimports stuff ', 'comment_created': datetime.datetime(2023, 7, 18, 11, 44, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Seba-T', 'type': 'User'}, {'comment_id': 1266652748, 'comment_body': 'Thanks! :)', 'comment_created': datetime.datetime(2023, 7, 18, 11, 45, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Seba-T', 'type': 'User'}, {'comment_id': 1266653602, 'comment_body': 'I like the single patter more tbh ', 'comment_created': datetime.datetime(2023, 7, 18, 11, 46, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Seba-T', 'type': 'User'}, {'comment_id': 1266654252, 'comment_body': 'Damn this is unheard of xD ', 'comment_created': datetime.datetime(2023, 7, 18, 11, 46, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Seba-T', 'type': 'User'}, {'comment_id': 1268704749, 'comment_body': 'thanks :) ', 'comment_created': datetime.datetime(2023, 7, 19, 21, 47, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Seba-T', 'type': 'User'}, {'comment_id': 1268868173, 'comment_body': ""I don't think it needs a partialvalue? If there are no query selectors rn, then we don't need this. "", 'comment_created': datetime.datetime(2023, 7, 20, 2, 39, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1268868326, 'comment_body': 'This should be the validated and deserialised key state, not the DER bytes here. ', 'comment_created': datetime.datetime(2023, 7, 20, 2, 39, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1268868738, 'comment_body': 'I don\'t think the word ""Personal"" is needed here. ', 'comment_created': datetime.datetime(2023, 7, 20, 2, 40, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1268868941, 'comment_body': 'Tests? ', 'comment_created': datetime.datetime(2023, 7, 20, 2, 40, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1268869078, 'comment_body': ""You know what I'm about to say here ... :) "", 'comment_created': datetime.datetime(2023, 7, 20, 2, 41, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1268869308, 'comment_body': 'This needs to handle mods too. Because else how do we generate keys for users that already exist? ', 'comment_created': datetime.datetime(2023, 7, 20, 2, 41, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1268869441, 'comment_body': 'Wrong class type. Only *humans* need to verify each other, not accounts. Accounts also include machine/service accounts. ', 'comment_created': datetime.datetime(2023, 7, 20, 2, 42, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1268869658, 'comment_body': 'Tests? You probably should get into the habit of writing the tests first before you impl a wall of feature. :) ', 'comment_created': datetime.datetime(2023, 7, 20, 2, 42, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1268869746, 'comment_body': 'You know what :) ', 'comment_created': datetime.datetime(2023, 7, 20, 2, 42, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1268870000, 'comment_body': 'See below - wrong class. ', 'comment_created': datetime.datetime(2023, 7, 20, 2, 43, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1268870174, 'comment_body': ""Should probably just comment that it's an EC key because it could be used for other things. "", 'comment_created': datetime.datetime(2023, 7, 20, 2, 43, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1268870339, 'comment_body': ""Also given it's an ECKey, it's not limited to ECDH, so name this ECKEY not ECDH. "", 'comment_created': datetime.datetime(2023, 7, 20, 2, 44, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1269154418, 'comment_body': ""actually I started with that, but then I got into much trouble when I tried to insert something like `EcKey<Public>` in a `SmolSet`, as it was complaining that the key didn't have `Eq` or `PartialEq`. That's why I went for the bytes "", 'comment_created': datetime.datetime(2023, 7, 20, 8, 52, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Seba-T', 'type': 'User'}, {'comment_id': 1269172643, 'comment_body': ""dang I'll develop a tool that checks for spaces after functions :p "", 'comment_created': datetime.datetime(2023, 7, 20, 9, 7, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Seba-T', 'type': 'User'}, {'comment_id': 1270006594, 'comment_body': 'yeah I wrote the plugin on the fly just to see how the main tests were doing, but I still need to thoroughly think about what the plugin is supposed to do ', 'comment_created': datetime.datetime(2023, 7, 20, 22, 5, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Seba-T', 'type': 'User'}, {'comment_id': 1270006846, 'comment_body': 'yep .. ', 'comment_created': datetime.datetime(2023, 7, 20, 22, 5, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Seba-T', 'type': 'User'}, {'comment_id': 1270223862, 'comment_body': ""Do we actually even need idx keys here? I don't think we will be able to query this type, I think we return an empty vec. "", 'comment_created': datetime.datetime(2023, 7, 21, 4, 55, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1270224062, 'comment_body': 'I think this is a good idea, it allows us to check presence this way. ', 'comment_created': datetime.datetime(2023, 7, 21, 4, 56, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1270224974, 'comment_body': ""I don't think this is valid? This will only drop this functions reference to self, it won't actually null the value.\r\n"", 'comment_created': datetime.datetime(2023, 7, 21, 4, 58, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1270225197, 'comment_body': 'Given the fn clear() maybe this needs to be Option<PubOrPrivEcKey> because we need to represent abscence due to delayed cleanup of empty attrs. ', 'comment_created': datetime.datetime(2023, 7, 21, 4, 58, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1270440517, 'comment_body': 'yeah I added it at 2am because it was throwing some `InvalidSyntax` error on startup so I started doing random shit ', 'comment_created': datetime.datetime(2023, 7, 21, 9, 14, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Seba-T', 'type': 'User'}, {'comment_id': 1270442641, 'comment_body': ""Yeah but as I wrote it I got entangled like A LOT in ensuring I used the right `PartialValue`. Since it has such a different name from `EcKey` or something it's hard to spot where you're using the wrong PartialValue. Maybe we should introduce another variant with no data associated to it just for clarity? "", 'comment_created': datetime.datetime(2023, 7, 21, 9, 16, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Seba-T', 'type': 'User'}, {'comment_id': 1271615188, 'comment_body': ""Yeah, that's the wrong way to approach a problem :) "", 'comment_created': datetime.datetime(2023, 7, 24, 0, 51, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1271615316, 'comment_body': 'I don\'t think we really are going to be querying for this value anyway so does the partialvalue even matter? About the only query I can imagine is ""presence"" and that doesn\'t even need a PV. There are no other selectors available.\r\n', 'comment_created': datetime.datetime(2023, 7, 24, 0, 51, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1271615579, 'comment_body': ""Also going to make a suggestion that for now EcKey for the moment is private key only, not public.\r\n\r\nThis way when we have trusts we can have a seperate EcPublicKey type to ensure at a type level we don't actually leak the private key across a trust boundary. \r\n\r\nDoes that sound reasonable? "", 'comment_created': datetime.datetime(2023, 7, 24, 0, 52, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1274198978, 'comment_body': 'I was trusting the api tests to handle everything, yet after thinking about it I realized they depend on too many things, so more specific tests could help ', 'comment_created': datetime.datetime(2023, 7, 25, 23, 1, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Seba-T', 'type': 'User'}, {'comment_id': 1274290256, 'comment_body': 'Yeah, the api tests are good to test user facing interacitons, but all your complex and precise state tests should be in the event handling code such as here. ', 'comment_created': datetime.datetime(2023, 7, 26, 2, 4, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1282541061, 'comment_body': 'No indexes for this attr. ', 'comment_created': datetime.datetime(2023, 8, 3, 1, 7, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1282541498, 'comment_body': 'I think we should actually just make this a private key only. I think public will have to eventually be a seperate type to allow for splitting the values and ensuring at a type/attr level we don\'t leak across trust boundaries. \r\n\r\nHow angy will you be if I ask you to make this ""EC_KEY_PRIVATE"" rather than EC_KEY? ', 'comment_created': datetime.datetime(2023, 8, 3, 1, 9, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1282541644, 'comment_body': ""don't need unique here, I think it just adds cost to the update of these values, and it requires indexing. "", 'comment_created': datetime.datetime(2023, 8, 3, 1, 9, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1282541713, 'comment_body': 'As above, I think we go EC_KEY_PRIVATE.', 'comment_created': datetime.datetime(2023, 8, 3, 1, 9, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1282544467, 'comment_body': ""Just because it's in repl proto, doesn't mean it needs repl in the name. "", 'comment_created': datetime.datetime(2023, 8, 3, 1, 16, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1282545215, 'comment_body': ""I don't think we need to be able to query these keys. Why would we need to look up a key by it's ID? We only need to lookup the users spn/name, and the key is associated. "", 'comment_created': datetime.datetime(2023, 8, 3, 1, 18, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1282545514, 'comment_body': 'I think this should be private only. ', 'comment_created': datetime.datetime(2023, 8, 3, 1, 19, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1282546584, 'comment_body': 'I think given the above, this could be change to rehydrate the vaue from the db/repl as a private key, but then the struct should have\r\n\r\n```\r\npriv: EcKey<Private>\r\npublic: EcKey<Public>\r\n```\r\nThis way we only have to do the private -> public extract once on load from disk or update, and then we can rely on the entries being Arc counted and we can return references etc. ', 'comment_created': datetime.datetime(2023, 8, 3, 1, 22, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1282549052, 'comment_body': 'I wonder if there is a way to do this neater, like having a tuple that swaps the clients like:\r\n\r\n```\r\nlet (client_left, client right) = if user_a_uuid < user_b_uuid {\r\n    client_a, client_b\r\n} else {\r\n    client_b, client_a\r\n};\r\n```', 'comment_created': datetime.datetime(2023, 8, 3, 1, 27, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1282550365, 'comment_body': ""Add a test that asserts that the totps on both sides are never the same. The totp I give you shouldn't be the same as the totp you give me. I think you've missed this in your cryptographic code, I can't see where you invert the secret based on uuid order. "", 'comment_created': datetime.datetime(2023, 8, 3, 1, 31, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1282835325, 'comment_body': 'very mildly :p, but actually makes sense', 'comment_created': datetime.datetime(2023, 8, 3, 8, 26, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Seba-T', 'type': 'User'}, {'comment_id': 1282866638, 'comment_body': 'niiice way better than how I was doing it before', 'comment_created': datetime.datetime(2023, 8, 3, 8, 50, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Seba-T', 'type': 'User'}, {'comment_id': 1282877872, 'comment_body': 'Basically from the document we wrote back in march we ruled that each user secret would be composed by the shared ecdh secret and the user own uuid, so `user a` will have `totp_secret_a = shared_ecdh_secret + user_a_uuid` and `user b` will have `totp_secret_b = shared_ecdh_secret + user_b_uuid`\r\n\r\nIn `get_self_totp_secret` I have\r\n> let Some(self_uuid) = ident.get_uuid() else {\r\n            return Err(OperationError::NotAuthenticated)\r\n        };\r\n        shared_key.extend_from_slice(self_uuid.as_bytes());\r\n\r\n\r\nwhile in `get_other_user_totp_secret`\r\n>  shared_key.extend_from_slice(target.as_bytes());\r\n', 'comment_created': datetime.datetime(2023, 8, 3, 8, 58, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Seba-T', 'type': 'User'}, {'comment_id': 1282994151, 'comment_body': 'Yep :)', 'comment_created': datetime.datetime(2023, 8, 3, 10, 21, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Seba-T', 'type': 'User'}, {'comment_id': 1282994473, 'comment_body': 'Yeah clippy was screaming at me for that', 'comment_created': datetime.datetime(2023, 8, 3, 10, 22, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Seba-T', 'type': 'User'}, {'comment_id': 1292978564, 'comment_body': 'sync_allowed should be false. ', 'comment_created': datetime.datetime(2023, 8, 14, 5, 11, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1292979087, 'comment_body': ""Still good to have a test case proving that the totps aren't the same :) "", 'comment_created': datetime.datetime(2023, 8, 14, 5, 12, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1293144230, 'comment_body': 'rightt ', 'comment_created': datetime.datetime(2023, 8, 14, 8, 19, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Seba-T', 'type': 'User'}, {'comment_id': 1293148576, 'comment_body': ""Isn't this checking that? Or do you mean in some other way?"", 'comment_created': datetime.datetime(2023, 8, 14, 8, 22, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Seba-T', 'type': 'User'}, {'comment_id': 1294136965, 'comment_body': 'Oh how did I miss this. ', 'comment_created': datetime.datetime(2023, 8, 15, 2, 53, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1294565878, 'comment_body': ""*.d.ts files being here show you're building in debug mode, which is fine while working on things - but you need to run `build_wasm_release.sh` to get the optimized build please.\r\n\r\n`server/web_ui/pkg/kanidmd_web_ui_bg.wasm Binary file modified BIN +12.2 MB (810%)`  <+=- this is why 😄 "", 'comment_created': datetime.datetime(2023, 8, 15, 13, 0, 2, tzinfo=datetime.timezone.utc), 'commenter': 'yaleman', 'type': 'User'}, {'comment_id': 1294572637, 'comment_body': ""You don't need the false's here because the default covers them."", 'comment_created': datetime.datetime(2023, 8, 15, 13, 4, 51, tzinfo=datetime.timezone.utc), 'commenter': 'yaleman', 'type': 'User'}, {'comment_id': 1294573605, 'comment_body': ""```suggestion\r\n        // if we are the first it means now it's time to go for ProvideCode, otherwise we just confirm that the code is correct\r\n```"", 'comment_created': datetime.datetime(2023, 8, 15, 13, 5, 58, tzinfo=datetime.timezone.utc), 'commenter': 'yaleman', 'type': 'User'}, {'comment_id': 1294575873, 'comment_body': ""This should identify who it's missing for"", 'comment_created': datetime.datetime(2023, 8, 15, 13, 8, 7, tzinfo=datetime.timezone.utc), 'commenter': 'yaleman', 'type': 'User'}, {'comment_id': 1294576454, 'comment_body': 'The UUID should be included in the log, especially since it says ""with the given UUID"" 😄 ', 'comment_created': datetime.datetime(2023, 8, 15, 13, 8, 39, tzinfo=datetime.timezone.utc), 'commenter': 'yaleman', 'type': 'User'}, {'comment_id': 1294576694, 'comment_body': 'The UUID should be included in the log, especially since it says ""with the given UUID"" 😄', 'comment_created': datetime.datetime(2023, 8, 15, 13, 8, 50, tzinfo=datetime.timezone.utc), 'commenter': 'yaleman', 'type': 'User'}, {'comment_id': 1294576879, 'comment_body': ""This should identify who it's missing for"", 'comment_created': datetime.datetime(2023, 8, 15, 13, 9, 2, tzinfo=datetime.timezone.utc), 'commenter': 'yaleman', 'type': 'User'}, {'comment_id': 1294582544, 'comment_body': 'I alphabetised these! (ok, except for mail but it was being weird.) Please put it in the right place 😃 ', 'comment_created': datetime.datetime(2023, 8, 15, 13, 14, 36, tzinfo=datetime.timezone.utc), 'commenter': 'yaleman', 'type': 'User'}, {'comment_id': 1294586560, 'comment_body': 'This should log an error-level message and return an operation error, not panic.', 'comment_created': datetime.datetime(2023, 8, 15, 13, 17, 53, tzinfo=datetime.timezone.utc), 'commenter': 'yaleman', 'type': 'User'}, {'comment_id': 1294592964, 'comment_body': ""Is this TODO-do'd? 😄 "", 'comment_created': datetime.datetime(2023, 8, 15, 13, 23, 57, tzinfo=datetime.timezone.utc), 'commenter': 'yaleman', 'type': 'User'}, {'comment_id': 1294593509, 'comment_body': 'Does it work or not? 🤔 ', 'comment_created': datetime.datetime(2023, 8, 15, 13, 24, 29, tzinfo=datetime.timezone.utc), 'commenter': 'yaleman', 'type': 'User'}, {'comment_id': 1294595558, 'comment_body': '```suggestion\r\n    ""The identity verification feature is currently unavailable for this account 😢"";\r\n```', 'comment_created': datetime.datetime(2023, 8, 15, 13, 26, 21, tzinfo=datetime.timezone.utc), 'commenter': 'yaleman', 'type': 'User'}, {'comment_id': 1294596474, 'comment_body': ""can't guarantee this, it'll panic"", 'comment_created': datetime.datetime(2023, 8, 15, 13, 27, 10, tzinfo=datetime.timezone.utc), 'commenter': 'yaleman', 'type': 'User'}, {'comment_id': 1294598119, 'comment_body': ""```suggestion\r\n    // each main view has its own function, that is the start view (even though it's displayed for few ms), the id_display_and_submit view\r\n```"", 'comment_created': datetime.datetime(2023, 8, 15, 13, 28, 38, tzinfo=datetime.timezone.utc), 'commenter': 'yaleman', 'type': 'User'}, {'comment_id': 1294860589, 'comment_body': ""Yeah but even if it did when I unwrap the option I use `unwrap_or_default`, here with `.ok` I'm just transforming the Result into Option so I don't think it will panic even if it's `Err`. But yeah prob I should remove the comment then "", 'comment_created': datetime.datetime(2023, 8, 15, 16, 40, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Seba-T', 'type': 'User'}, {'comment_id': 1294914574, 'comment_body': 'sure :) ', 'comment_created': datetime.datetime(2023, 8, 15, 17, 36, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Seba-T', 'type': 'User'}, {'comment_id': 1294918397, 'comment_body': 'wopsies ', 'comment_created': datetime.datetime(2023, 8, 15, 17, 41, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Seba-T', 'type': 'User'}, {'comment_id': 1294921347, 'comment_body': 'I agree but currently the ValueSet trait expects a direct result, so I went for the same approach as in `Jwt` for example.\r\nThere we have something like\r\n```\r\n fn to_repl_v1(&self) -> ReplAttrV1 {\r\n        ReplAttrV1::JwsKeyEs256 { set: self.set.iter()\r\n            .map(|k| {\r\n                #[allow(clippy::expect_used)]\r\n                k.private_key_to_der()\r\n                    .expect(""Unable to process private key to der, likely corrupted. You must restore from backup."")\r\n            })\r\n            .map(|b| b.into())\r\n            .collect()\r\n        }\r\n    }\r\n```\r\nI could open an issue for this tho', 'comment_created': datetime.datetime(2023, 8, 15, 17, 44, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Seba-T', 'type': 'User'}, {'comment_id': 1294922952, 'comment_body': 'yep :)', 'comment_created': datetime.datetime(2023, 8, 15, 17, 46, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Seba-T', 'type': 'User'}, {'comment_id': 1294929264, 'comment_body': ""Errrr let's say it's not harming anyone for the time being. I mean it's a very hacky solution to get the transition to work the way I'd want it, but it's very unreliable and most of the times it's as if it didn't exist. If we remove it everything else should just work fine"", 'comment_created': datetime.datetime(2023, 8, 15, 17, 53, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Seba-T', 'type': 'User'}, {'comment_id': 1295209259, 'comment_body': 'but this one has a `Result<>` response, which is why I mentioned it 😄 \r\n\r\n```rust\r\nfn merge(&mut self, other: &super::ValueSet) -> Result<(), kanidm_proto::v1::OperationError> {\r\n```', 'comment_created': datetime.datetime(2023, 8, 15, 22, 31, 3, tzinfo=datetime.timezone.utc), 'commenter': 'yaleman', 'type': 'User'}, {'comment_id': 1295209962, 'comment_body': ""That's what I get for reviewing code at midnight, you're right the `.ok` coerces it into a `None`, my bad 😊 \r\n\r\nThe comment's misleading however 👍🏻 "", 'comment_created': datetime.datetime(2023, 8, 15, 22, 32, 21, tzinfo=datetime.timezone.utc), 'commenter': 'yaleman', 'type': 'User'}, {'comment_id': 1295218961, 'comment_body': 'fixed it :)', 'comment_created': datetime.datetime(2023, 8, 15, 22, 50, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Seba-T', 'type': 'User'}, {'comment_id': 1295220585, 'comment_body': ""Yep, it's a bummer that some do and some other don't. I wonder if soon we'll have to pay the tech debt again on this one :p "", 'comment_created': datetime.datetime(2023, 8, 15, 22, 53, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Seba-T', 'type': 'User'}, {'comment_id': 1295223030, 'comment_body': ""If I remember correctly William also mentioned that the valueset trait could be redesigned, since it's based on the assumption that every value will be stored in a set, and that's not always true, as it's the case for the EcdhKey.\r\nIf this ever happens it could also fix the return values of the trait functions. "", 'comment_created': datetime.datetime(2023, 8, 15, 22, 58, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Seba-T', 'type': 'User'}, {'comment_id': 1295242648, 'comment_body': 'Yeah, I think it needs a redesign with schema to have the multivalue type removed from schema, and value being single/multi is a property of the type instead. ', 'comment_created': datetime.datetime(2023, 8, 15, 23, 42, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1295407344, 'comment_body': ""Either way, less panics, more errors in the meantime please 😃 Then this one's ready to go!"", 'comment_created': datetime.datetime(2023, 8, 16, 5, 50, 44, tzinfo=datetime.timezone.utc), 'commenter': 'yaleman', 'type': 'User'}, {'comment_id': 1295547469, 'comment_body': ""Wopsies I must be blind I thought you wanted me to remove the expect on the method that didn't return the result. \r\nAnyway I fixed it! "", 'comment_created': datetime.datetime(2023, 8, 16, 8, 19, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Seba-T', 'type': 'User'}]","[{'commit_sha': '6d8acf184b214286f5b2eb74acd436167d8b17aa', 'committer_username': 'Seba-T', 'committer_name': 'Sebastiano Tocci', 'committer_email': 'sebastiano.tocci@proton.me', 'commit_date': datetime.datetime(2017, 5, 17, 10, 31, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c29f196759a593488704d2cfff38f478d0c9403c', 'committer_username': 'Seba-T', 'committer_name': 'Sebastiano Tocci', 'committer_email': 'sebastiano.tocci@proton.me', 'commit_date': datetime.datetime(2017, 5, 17, 10, 31, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cfbe5810e185f9d46ae321e9b392175c8de38e96', 'committer_username': 'Seba-T', 'committer_name': 'Sebastiano Tocci', 'committer_email': 'sebastiano.tocci@proton.me', 'commit_date': datetime.datetime(2017, 5, 17, 10, 31, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a01340e674101b9888dffe5f5d3292880678d0c7', 'committer_username': 'Seba-T', 'committer_name': 'Sebastiano Tocci', 'committer_email': 'sebastiano.tocci@proton.me', 'commit_date': datetime.datetime(2017, 5, 17, 10, 31, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '33749fd20a10a96d4e91f26e583fe582cf33aec6', 'committer_username': 'Seba-T', 'committer_name': 'Sebastiano Tocci', 'committer_email': 'sebastiano.tocci@proton.me', 'commit_date': datetime.datetime(2017, 5, 17, 10, 31, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5512961dc1375b49df18a14bc0cea3193c4658f8', 'committer_username': 'Seba-T', 'committer_name': 'Sebastiano Tocci', 'committer_email': 'sebastiano.tocci@proton.me', 'commit_date': datetime.datetime(2017, 5, 17, 10, 31, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '795093a8541abd813405c5cff2c7754ae38249ef', 'committer_username': 'Seba-T', 'committer_name': 'Sebastiano Tocci', 'committer_email': 'sebastiano.tocci@proton.me', 'commit_date': datetime.datetime(2017, 5, 17, 10, 31, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'edd32fb466419e6851a4954c53c797f84fbdb576', 'committer_username': 'Seba-T', 'committer_name': 'Sebastiano Tocci', 'committer_email': 'sebastiano.tocci@proton.me', 'commit_date': datetime.datetime(2017, 5, 17, 10, 31, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '30fdfd36ab631dfb97d9583121059ded4cc778db', 'committer_username': 'Seba-T', 'committer_name': 'Sebastiano Tocci', 'committer_email': 'sebastiano.tocci@proton.me', 'commit_date': datetime.datetime(2017, 5, 17, 10, 31, 21, tzinfo=datetime.timezone.utc)}]",Sebastiano Tocci,28754257,sebastiano.tocci@proton.me,User,,12,,21,15
1481854485,idv cli,"Fixes ..nothing :p 

Checklist

- [x] This pr contains no AI generated code
- [x] cargo fmt has been run
- [x] cargo clippy has been run
- [x] cargo test has been run and passes
- [x] book chapter included (if relevant)
- [ ] design document included (if relevant)
",True,2001,https://api.github.com/repos/kanidm/kanidm/pulls/2001,https://github.com/kanidm/kanidm/pull/2001,closed,1392,9,16,22,9,40,5,0,"[{'name': 'enhancement'}, {'name': 'internals'}, {'name': 'kanidm (cli)'}, {'name': 'kanidmd'}, {'name': 'api'}]",2023-08-20 17:13:38+00:00,2023-08-23 10:51:25+00:00,236267.0,"2 days, 17:37:47","[{'comment_id': 1299442463, 'comment_body': 'workspace 🥳 ', 'comment_created': datetime.datetime(2023, 8, 20, 22, 11, 2, tzinfo=datetime.timezone.utc), 'commenter': 'yaleman', 'type': 'User'}, {'comment_id': 1299442916, 'comment_body': '```suggestion\r\n            Self::disposable_warning_view(s, ""The code should be a 5 or 6 digit number!"");\r\n```', 'comment_created': datetime.datetime(2023, 8, 20, 22, 15, 2, tzinfo=datetime.timezone.utc), 'commenter': 'yaleman', 'type': 'User'}, {'comment_id': 1299443545, 'comment_body': '```suggestion\r\n        eprintln!(""Internal callback error in the CLI\'s logic loop, please restart or log an issue with the Kanidm project if it continues to occur.""); // TODO: add an error ID (internal error, restart)\r\n```', 'comment_created': datetime.datetime(2023, 8, 20, 22, 20, 42, tzinfo=datetime.timezone.utc), 'commenter': 'yaleman', 'type': 'User'}, {'comment_id': 1299443631, 'comment_body': '```suggestion\r\n        eprintln!(""Internal callback error in the CLI\'s TUI, please restart or log an issue with the Kanidm project if it continues to occur.""); // TODO: add an error ID (internal error, restart)\r\n```', 'comment_created': datetime.datetime(2023, 8, 20, 22, 21, 57, tzinfo=datetime.timezone.utc), 'commenter': 'yaleman', 'type': 'User'}, {'comment_id': 1299443765, 'comment_body': 'Yes 😄 ', 'comment_created': datetime.datetime(2023, 8, 20, 22, 22, 52, tzinfo=datetime.timezone.utc), 'commenter': 'yaleman', 'type': 'User'}, {'comment_id': 1299443888, 'comment_body': 'More regexy\r\n\r\n```suggestion\r\n        Regex::new(r""^\\d{5,6}$"").expect(""Failed to parse VALIDATE_TOTP_RE"") // TODO: add an error ID (internal error, restart)\r\n```', 'comment_created': datetime.datetime(2023, 8, 20, 22, 23, 53, tzinfo=datetime.timezone.utc), 'commenter': 'yaleman', 'type': 'User'}, {'comment_id': 1299444209, 'comment_body': 'Tests to put somewhere near it\r\n\r\n```rust\r\n    assert!(VALIDATE_TOTP_RE.is_match(""123456""));\r\n    assert!(VALIDATE_TOTP_RE.is_match(""12345""));\r\n    assert!(!VALIDATE_TOTP_RE.is_match(""1234567""));\r\n    assert!(!VALIDATE_TOTP_RE.is_match(""1234""));\r\n```', 'comment_created': datetime.datetime(2023, 8, 20, 22, 26, 6, tzinfo=datetime.timezone.utc), 'commenter': 'yaleman', 'type': 'User'}, {'comment_id': 1299444435, 'comment_body': '```suggestion\r\n                        eprintln!(""Failed to parse your SPN from the system\'s whoami endpoint, exiting!""); // TODO: add an error ID (internal/web response error, restart)\r\n```', 'comment_created': datetime.datetime(2023, 8, 20, 22, 28, 13, tzinfo=datetime.timezone.utc), 'commenter': 'yaleman', 'type': 'User'}, {'comment_id': 1299444461, 'comment_body': '```suggestion\r\n                                eprintln!(""Authentication with cached token failed, can\'t query information.""); // TODO: add an error ID (login, or clear token cache)\r\n```', 'comment_created': datetime.datetime(2023, 8, 20, 22, 28, 32, tzinfo=datetime.timezone.utc), 'commenter': 'yaleman', 'type': 'User'}, {'comment_id': 1299444496, 'comment_body': '```suggestion\r\n                        println!(""Error querying whoami endpoint: {:?}"", e);  // TODO: add an error ID (internal/web response error, restart or check connectivity)\r\n```', 'comment_created': datetime.datetime(2023, 8, 20, 22, 29, tzinfo=datetime.timezone.utc), 'commenter': 'yaleman', 'type': 'User'}, {'comment_id': 1299444551, 'comment_body': '```suggestion\r\n        eprint!(""Failed to send the initial start message to the controller! Aborting...""); // TODO: add an error ID (internal error, restart)\r\n```', 'comment_created': datetime.datetime(2023, 8, 20, 22, 29, 25, tzinfo=datetime.timezone.utc), 'commenter': 'yaleman', 'type': 'User'}, {'comment_id': 1299444564, 'comment_body': '```suggestion\r\n        eprintln!(""The UI thread returned an error, please restart the program. Error was: {:?}"", e); // TODO: add an error ID (internal error, restart)\r\n```', 'comment_created': datetime.datetime(2023, 8, 20, 22, 29, 36, tzinfo=datetime.timezone.utc), 'commenter': 'yaleman', 'type': 'User'}, {'comment_id': 1299444597, 'comment_body': 'Similar to above', 'comment_created': datetime.datetime(2023, 8, 20, 22, 30, 1, tzinfo=datetime.timezone.utc), 'commenter': 'yaleman', 'type': 'User'}, {'comment_id': 1299444603, 'comment_body': 'Similar to above', 'comment_created': datetime.datetime(2023, 8, 20, 22, 30, 5, tzinfo=datetime.timezone.utc), 'commenter': 'yaleman', 'type': 'User'}, {'comment_id': 1299445896, 'comment_body': '```suggestion\r\n        s.add_layer(TextView::new(""Loading, please wait...""));\r\n```', 'comment_created': datetime.datetime(2023, 8, 20, 22, 38, 29, tzinfo=datetime.timezone.utc), 'commenter': 'yaleman', 'type': 'User'}, {'comment_id': 1299446053, 'comment_body': '```suggestion\r\n                .expect(""TOTP countdown view failed to send msg to controller""); // TODO: add an error ID (internal error, restart)\r\n```', 'comment_created': datetime.datetime(2023, 8, 20, 22, 39, 14, tzinfo=datetime.timezone.utc), 'commenter': 'yaleman', 'type': 'User'}, {'comment_id': 1299446196, 'comment_body': '```suggestion\r\n                .dismiss_button(""Cancel""),\r\n```', 'comment_created': datetime.datetime(2023, 8, 20, 22, 40, 18, tzinfo=datetime.timezone.utc), 'commenter': 'yaleman', 'type': 'User'}, {'comment_id': 1299446310, 'comment_body': '```suggestion\r\n                    ""Failed to parse server response, please start again."", // TODO: add error ID (internal error, restart)\r\n```', 'comment_created': datetime.datetime(2023, 8, 20, 22, 41, 24, tzinfo=datetime.timezone.utc), 'commenter': 'yaleman', 'type': 'User'}, {'comment_id': 1299446386, 'comment_body': 'Matching the other UI elements, Continue/Cancel\r\n\r\n```suggestion\r\n                .button(""Continue"", move |s| {\r\n```', 'comment_created': datetime.datetime(2023, 8, 20, 22, 42, 20, tzinfo=datetime.timezone.utc), 'commenter': 'yaleman', 'type': 'User'}, {'comment_id': 1299446531, 'comment_body': '```suggestion\r\n                                        ""Internal error, couldn\'t get the \'totp-input\' view, please restart the program."", // TODO: add an error ID (internal error, restart)\r\n```', 'comment_created': datetime.datetime(2023, 8, 20, 22, 43, 38, tzinfo=datetime.timezone.utc), 'commenter': 'yaleman', 'type': 'User'}, {'comment_id': 1299446658, 'comment_body': '```suggestion\r\n                                        ""Internal error, couldn\'t get the \'id-user-input\' view, please restart the program."", // TODO: add an error ID (internal error, restart)\r\n```', 'comment_created': datetime.datetime(2023, 8, 20, 22, 44, 55, tzinfo=datetime.timezone.utc), 'commenter': 'yaleman', 'type': 'User'}, {'comment_id': 1299446745, 'comment_body': '```suggestion\r\n            error_msg: ""The user identification flow is in an invalid state 😵😵"".to_string(), // TODO: add an error ID (internal error, restart)\r\n```', 'comment_created': datetime.datetime(2023, 8, 20, 22, 45, 39, tzinfo=datetime.timezone.utc), 'commenter': 'yaleman', 'type': 'User'}, {'comment_id': 1299447110, 'comment_body': 'Re-wording mainly because ""doesn\'t belong"" implies you might have gotten someone else\'s 😄 \r\n\r\n```suggestion\r\n                    IdentifyUserMsg::SubmitCode { other_id, .. } => IdentifyUserState::Error { \r\n                    error_title: ""🚨 Identity verification failed 🚨"".to_string() ,\r\n                    error_msg: format!(""The provided code doesn\'t match, please try again.""), \r\n                    },\r\n```', 'comment_created': datetime.datetime(2023, 8, 20, 22, 48, 49, tzinfo=datetime.timezone.utc), 'commenter': 'yaleman', 'type': 'User'}, {'comment_id': 1299447246, 'comment_body': '\r\nAdding a ""what do to about it"" statement gives the user somewhere to go 😄 \r\n\r\n```suggestion\r\n            IdentifyUserResponse::IdentityVerificationUnavailable => IdentifyUserState::Error { \r\n            error_title: ""Feature unavailable"".to_string() ,\r\n            error_msg: ""The identity verification feature is not enabled for your account, please contact an administrator."".to_string(), \r\n            },\r\n```', 'comment_created': datetime.datetime(2023, 8, 20, 22, 50, 6, tzinfo=datetime.timezone.utc), 'commenter': 'yaleman', 'type': 'User'}, {'comment_id': 1299453255, 'comment_body': 'Should I duplicate them also for the cli :thinking: ? Should I move the regex to a shared place?  ', 'comment_created': datetime.datetime(2023, 8, 20, 23, 34, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Seba-T', 'type': 'User'}, {'comment_id': 1299453536, 'comment_body': 'My only issue with moving it to proto is that it kinda felt misplaced, like everything inside proto is some sort of message, this would be quite different from everything else. ', 'comment_created': datetime.datetime(2023, 8, 20, 23, 36, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Seba-T', 'type': 'User'}, {'comment_id': 1299454649, 'comment_body': ""You could probably dump the regex entirely, and just do a length check since you're already validating it's a number with the u32 parse"", 'comment_created': datetime.datetime(2023, 8, 20, 23, 44, 6, tzinfo=datetime.timezone.utc), 'commenter': 'yaleman', 'type': 'User'}, {'comment_id': 1299457049, 'comment_body': 'yep that actually makes lots of sense. Initially I didn\'t do it because I thought ""what if in the future we want to parse something that\'s not a number and we\'ll have to write the regex from scratch"", but actually if that ever happens then we\'ll write the regex as needed. ', 'comment_created': datetime.datetime(2023, 8, 20, 23, 58, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Seba-T', 'type': 'User'}, {'comment_id': 1299460054, 'comment_body': 'yess :) ', 'comment_created': datetime.datetime(2023, 8, 21, 0, 12, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Seba-T', 'type': 'User'}, {'comment_id': 1299599411, 'comment_body': ""For now I'd like this to be a separate feature and in it's own file. \r\n\r\nWhat about a simple text-only version like the credential reset dialogue? Not every terminal can do tui. "", 'comment_created': datetime.datetime(2023, 8, 21, 4, 57, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1299872282, 'comment_body': 'I actually started doing it that way, but i ended up with many rough edges, like no closable pop ups, no countdown, and something else I can’t remember now. Still doable though. I still have that version and it’s like 80% complete, should I add it somewhere?', 'comment_created': datetime.datetime(2023, 8, 21, 9, 40, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Seba-T', 'type': 'User'}, {'comment_id': 1299894663, 'comment_body': ""As nice as all the features are, the user just needs to get prompted with the token and told they've got x minutes to complete it, and success/errors if it fails 😄\r\n\r\nThe prettiness can happen in the web UI which has *much* better native handling for such things."", 'comment_created': datetime.datetime(2023, 8, 21, 9, 59, 16, tzinfo=datetime.timezone.utc), 'commenter': 'yaleman', 'type': 'User'}, {'comment_id': 1300322048, 'comment_body': ""Alright then :) I think I got everything working, I'll push shortly. "", 'comment_created': datetime.datetime(2023, 8, 21, 15, 59, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Seba-T', 'type': 'User'}, {'comment_id': 1300733093, 'comment_body': 'Yes, you have. Have you tried just having a loop and updating your state each loop iteration?', 'comment_created': datetime.datetime(2023, 8, 21, 23, 2, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1300735493, 'comment_body': ""Don't add the exclaimation here, it adds too much panic. "", 'comment_created': datetime.datetime(2023, 8, 21, 23, 7, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1300788326, 'comment_body': ""I considered it but I couldn't overcome my feelings for purely functional stuff. Using `mut` in a function argument was too much for my little heart to handle :crying_cat_face:. I'll begrudgingly fix it though"", 'comment_created': datetime.datetime(2023, 8, 22, 0, 45, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Seba-T', 'type': 'User'}, {'comment_id': 1300788868, 'comment_body': 'sure :) ', 'comment_created': datetime.datetime(2023, 8, 22, 0, 46, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Seba-T', 'type': 'User'}, {'comment_id': 1300789462, 'comment_body': ""Rust isn't functional. And if you treat it like it is, you'll hit stack depth and crash. Sometimes the simple way, is the right way. "", 'comment_created': datetime.datetime(2023, 8, 22, 0, 47, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1300792628, 'comment_body': ""Yes btw that was actually happening at one point lol. I was doing the totp refetch in the dumbest of ways by recursively calling the function and since I had some very poor logic going on it would make batches of 100 calls to itself .. let's say it didn't last more than 20 seconds. Lesson learned "", 'comment_created': datetime.datetime(2023, 8, 22, 0, 55, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Seba-T', 'type': 'User'}, {'comment_id': 1300798447, 'comment_body': 'fixed! ', 'comment_created': datetime.datetime(2023, 8, 22, 1, 8, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Seba-T', 'type': 'User'}]","[{'commit_sha': '20ea00cc36f55b448d3b288985c57e3b11933c0d', 'committer_username': 'Seba-T', 'committer_name': 'Sebastiano Tocci', 'committer_email': 'sebastiano.tocci@proton.me', 'commit_date': datetime.datetime(2017, 5, 17, 10, 31, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'feb08981cd2a87fc3c29965a761214ead84e1da2', 'committer_username': 'Seba-T', 'committer_name': 'Sebastiano Tocci', 'committer_email': 'sebastiano.tocci@proton.me', 'commit_date': datetime.datetime(2017, 5, 17, 10, 31, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '499bbf828d0de79a326808b909a05906555fb231', 'committer_username': 'Seba-T', 'committer_name': 'Sebastiano Tocci', 'committer_email': 'sebastiano.tocci@proton.me', 'commit_date': datetime.datetime(2017, 5, 17, 10, 31, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c409909779e0a81d5e2c7c7ffe39acf2f2c1ebe2', 'committer_username': 'Seba-T', 'committer_name': 'Sebastiano Tocci', 'committer_email': 'sebastiano.tocci@proton.me', 'commit_date': datetime.datetime(2017, 5, 17, 10, 31, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ddeca0d8ad51c264d7a8732fe2831f94bf685478', 'committer_username': 'Seba-T', 'committer_name': 'Sebastiano Tocci', 'committer_email': 'sebastiano.tocci@proton.me', 'commit_date': datetime.datetime(2017, 5, 17, 10, 31, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6dbe4f435bbb5943dced06f172e3bf0404c4195d', 'committer_username': 'Seba-T', 'committer_name': 'Sebastiano Tocci', 'committer_email': 'sebastiano.tocci@proton.me', 'commit_date': datetime.datetime(2017, 5, 17, 10, 31, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '78a5cd206783be5d374e83987bc85d7acd0d7959', 'committer_username': 'Seba-T', 'committer_name': 'Sebastiano Tocci', 'committer_email': 'sebastiano.tocci@proton.me', 'commit_date': datetime.datetime(2017, 5, 17, 10, 31, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dfb9a98e69b9848d546c2f0a04455e722c78fb88', 'committer_username': 'Seba-T', 'committer_name': 'Sebastiano Tocci', 'committer_email': 'sebastiano.tocci@proton.me', 'commit_date': datetime.datetime(2017, 5, 17, 10, 31, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15e3ecb14ccb7cae61fe339cdcc6da3e2244b4b0', 'committer_username': 'Seba-T', 'committer_name': 'Sebastiano Tocci', 'committer_email': 'sebastiano.tocci@proton.me', 'commit_date': datetime.datetime(2017, 5, 17, 10, 31, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c888101a5cd6ad07565d745597886acebee5788f', 'committer_username': 'Seba-T', 'committer_name': 'Sebastiano Tocci', 'committer_email': 'sebastiano.tocci@proton.me', 'commit_date': datetime.datetime(2017, 5, 17, 10, 31, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19e02188388b4822775933b1fa855a1498de351b', 'committer_username': 'Seba-T', 'committer_name': 'Sebastiano Tocci', 'committer_email': 'sebastiano.tocci@proton.me', 'commit_date': datetime.datetime(2017, 5, 17, 10, 31, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d382b99dc956b477451925e8d966164945c9e8d', 'committer_username': 'Seba-T', 'committer_name': 'Sebastiano Tocci', 'committer_email': 'sebastiano.tocci@proton.me', 'commit_date': datetime.datetime(2017, 5, 17, 10, 31, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cdb577e8d704f36ce61c12c14355f9fb82621d43', 'committer_username': 'Seba-T', 'committer_name': 'Sebastiano Tocci', 'committer_email': 'sebastiano.tocci@proton.me', 'commit_date': datetime.datetime(2017, 5, 17, 10, 31, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '77904c5fb14b6b64074d250ba29923afbc017a1a', 'committer_username': 'Seba-T', 'committer_name': 'Sebastiano Tocci', 'committer_email': 'sebastiano.tocci@proton.me', 'commit_date': datetime.datetime(2017, 5, 17, 10, 31, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6539394a1ebb8328b7b700d121d3855bea551af5', 'committer_username': 'Seba-T', 'committer_name': 'Sebastiano Tocci', 'committer_email': 'sebastiano.tocci@proton.me', 'commit_date': datetime.datetime(2017, 5, 17, 10, 31, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03bb5b9985fe396d249e1762846fe5a8d3172c82', 'committer_username': 'Seba-T', 'committer_name': 'Sebastiano Tocci', 'committer_email': 'sebastiano.tocci@proton.me', 'commit_date': datetime.datetime(2017, 5, 17, 10, 31, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd29a8d12c9b23de3211cf2ea0995e94676465116', 'committer_username': 'Seba-T', 'committer_name': 'Sebastiano Tocci', 'committer_email': 'sebastiano.tocci@proton.me', 'commit_date': datetime.datetime(2017, 5, 17, 10, 31, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e132fcd36ed1c57039040d0aef7e1a2668cf5343', 'committer_username': 'Seba-T', 'committer_name': 'Sebastiano Tocci', 'committer_email': 'sebastiano.tocci@proton.me', 'commit_date': datetime.datetime(2017, 5, 17, 10, 31, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d11b2aff22ad241535e6d34b5a827d6f98c01fc', 'committer_username': 'Seba-T', 'committer_name': 'Sebastiano Tocci', 'committer_email': 'sebastiano.tocci@proton.me', 'commit_date': datetime.datetime(2017, 5, 17, 10, 31, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42957302d55913c9817f059eae849826e3ae23e8', 'committer_username': 'Seba-T', 'committer_name': 'Sebastiano Tocci', 'committer_email': 'sebastiano.tocci@proton.me', 'commit_date': datetime.datetime(2017, 5, 17, 10, 31, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f7451412da65e08d23c7086355ebec5d87d0632d', 'committer_username': 'Seba-T', 'committer_name': 'Sebastiano Tocci', 'committer_email': 'sebastiano.tocci@proton.me', 'commit_date': datetime.datetime(2017, 5, 17, 10, 31, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '35f1390a76b9ba987560f39f3664bd4b3152dd52', 'committer_username': 'Seba-T', 'committer_name': 'Sebastiano Tocci', 'committer_email': 'sebastiano.tocci@proton.me', 'commit_date': datetime.datetime(2017, 5, 17, 10, 31, 21, tzinfo=datetime.timezone.utc)}]",Sebastiano Tocci,28754257,sebastiano.tocci@proton.me,User,,12,,21,15
1372951750,Crono expression parser fix,"Fixes #1676

- [x] This pr contains no AI generated code
- [x] cargo fmt has been run
- [x] cargo clippy has been run
- [x] cargo test has been run and passes
- [ ] book chapter included (if relevant)
- [ ] design document included (if relevant)
",True,1682,https://api.github.com/repos/kanidm/kanidm/pulls/1682,https://github.com/kanidm/kanidm/pull/1682,closed,31,8,3,4,0,3,0,0,[],2023-05-31 21:20:33+00:00,2023-06-03 03:07:30+00:00,193617.0,"2 days, 5:46:57","[{'comment_id': 1212353937, 'comment_body': 'Since we\'re automatically rewriting a configuration item here, can you please add a `debug` statement to show the ""supplied"" vs ""parsed"" output? ""don\'t surprise the users"" is important. 😄 ', 'comment_created': datetime.datetime(2023, 5, 31, 21, 50, 12, tzinfo=datetime.timezone.utc), 'commenter': 'yaleman', 'type': 'User'}, {'comment_id': 1212397113, 'comment_body': 'oh crap I used info, is that alright too?', 'comment_created': datetime.datetime(2023, 5, 31, 22, 57, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Seba-T', 'type': 'User'}, {'comment_id': 1212424292, 'comment_body': ""Yeah, given it's only on startup that'll be fine. Thanks."", 'comment_created': datetime.datetime(2023, 5, 31, 23, 52, 21, tzinfo=datetime.timezone.utc), 'commenter': 'yaleman', 'type': 'User'}]","[{'commit_sha': '217b61e7d5a7ca79471ae1df5f305472d19b8a85', 'committer_username': 'Seba-T', 'committer_name': 'Sebastiano Tocci', 'committer_email': 'sebastiano.tocci@proton.me', 'commit_date': datetime.datetime(2017, 5, 17, 10, 31, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '810aadf221328e97958906dc31326ce434d305fe', 'committer_username': 'Seba-T', 'committer_name': 'Sebastiano Tocci', 'committer_email': 'sebastiano.tocci@proton.me', 'commit_date': datetime.datetime(2017, 5, 17, 10, 31, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '297dea2081ff2c9ac624732f23a769d43f6500a4', 'committer_username': 'Seba-T', 'committer_name': 'Sebastiano Tocci', 'committer_email': 'sebastiano.tocci@proton.me', 'commit_date': datetime.datetime(2017, 5, 17, 10, 31, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba71cca1610c9e47119e7b427ab23f609079ca18', 'committer_username': 'Seba-T', 'committer_name': 'Sebastiano Tocci', 'committer_email': 'sebastiano.tocci@proton.me', 'commit_date': datetime.datetime(2017, 5, 17, 10, 31, 21, tzinfo=datetime.timezone.utc)}]",Sebastiano Tocci,28754257,sebastiano.tocci@proton.me,User,,12,,21,15
1390227370,added pre_cand entries to both pre_modify and pre_batch_modify plugin…,"adds pre_cand entries to pre_modify and pre_batch_modify plugin functions 

- [x] This pr contains no AI generated code
- [x] cargo fmt has been run
- [x] cargo clippy has been run
- [x] cargo test has been run and passes
- [ ] book chapter included (if relevant)
- [ ] design document included (if relevant)
",True,1732,https://api.github.com/repos/kanidm/kanidm/pulls/1732,https://github.com/kanidm/kanidm/pull/1732,closed,51,21,13,1,0,0,0,0,[],2023-06-13 09:35:24+00:00,2023-06-13 09:46:42+00:00,678.0,0:11:18,[],"[{'commit_sha': '844e52d71a28e8f2903c21aab83ca90e3ada43f7', 'committer_username': 'Seba-T', 'committer_name': 'Sebastiano Tocci', 'committer_email': 'sebastiano.tocci@proton.me', 'commit_date': datetime.datetime(2017, 5, 17, 10, 31, 21, tzinfo=datetime.timezone.utc)}]",Sebastiano Tocci,28754257,sebastiano.tocci@proton.me,User,,12,,21,15
1392184469,fixed return value of add_ava_int,"add_ava_int was returning the wrong value when the entry didn't exist and was added from scratch
- [x] This pr contains no AI generated code
- [x] cargo fmt has been run
- [x] cargo clippy has been run
- [x] cargo test has been run and passes
- [ ] book chapter included (if relevant)
- [ ] design document included (if relevant)
",True,1735,https://api.github.com/repos/kanidm/kanidm/pulls/1735,https://github.com/kanidm/kanidm/pull/1735,closed,2,2,1,1,0,0,0,0,[],2023-06-14 11:14:10+00:00,2023-06-14 11:28:43+00:00,873.0,0:14:33,[],"[{'commit_sha': 'fa7162f8a7fc35250129f5f4c97b99f56a75f43c', 'committer_username': 'Seba-T', 'committer_name': 'Sebastiano Tocci', 'committer_email': 'sebastiano.tocci@proton.me', 'commit_date': datetime.datetime(2017, 5, 17, 10, 31, 21, tzinfo=datetime.timezone.utc)}]",Sebastiano Tocci,28754257,sebastiano.tocci@proton.me,User,,12,,21,15
1388242799,Name change history,"Fixes #345
It's a very draftish implementation of #345, it's missing most of the features, such as the ability to claim the name and the option to turn it off
- [x] This pr contains no AI generated code
- [ ] cargo fmt has been run
- [ ] cargo clippy has been run
- [ ] cargo test has been run and passes
- [ ] book chapter included (if relevant)
- [ ] design document included (if relevant)

- [x] This pr contains no AI generated code
- [ ] cargo fmt has been run
- [ ] cargo clippy has been run
- [ ] cargo test has been run and passes
- [ ] book chapter included (if relevant)
- [ ] design document included (if relevant)
",True,1727,https://api.github.com/repos/kanidm/kanidm/pulls/1727,https://github.com/kanidm/kanidm/pull/1727,closed,551,51,16,6,6,49,0,0,[],2023-06-12 08:49:05+00:00,2023-06-28 08:34:44+00:00,1381539.0,"15 days, 23:45:39","[{'comment_id': 1227338232, 'comment_body': 'Should be in numerical order in the file, so move this down to the bottom of the list IMO. ', 'comment_created': datetime.datetime(2023, 6, 12, 23, 29, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1227338324, 'comment_body': 'Shouldn\'t this be ""name history"" not ""name update""? ', 'comment_created': datetime.datetime(2023, 6, 12, 23, 30, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1227339967, 'comment_body': ""I don't think you need a pre_create hook here. "", 'comment_created': datetime.datetime(2023, 6, 12, 23, 33, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1227340147, 'comment_body': 'What is the intent of this function? ', 'comment_created': datetime.datetime(2023, 6, 12, 23, 33, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1227340242, 'comment_body': 'formatting, spaces between fn and }. ', 'comment_created': datetime.datetime(2023, 6, 12, 23, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1230374764, 'comment_body': 'Can you move this? ', 'comment_created': datetime.datetime(2023, 6, 15, 3, 18, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1230374845, 'comment_body': 'formatting ?', 'comment_created': datetime.datetime(2023, 6, 15, 3, 18, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1230374999, 'comment_body': 'What needs to happen here? ', 'comment_created': datetime.datetime(2023, 6, 15, 3, 18, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1230375856, 'comment_body': 'Should also check that ""old_old_name"" still is present. ', 'comment_created': datetime.datetime(2023, 6, 15, 3, 20, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1230376050, 'comment_body': 'Should there be another test to check what happens if the user changes their name to the *same* value as it currently is? ', 'comment_created': datetime.datetime(2023, 6, 15, 3, 21, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1233419530, 'comment_body': 'space', 'comment_created': datetime.datetime(2023, 6, 19, 0, 38, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1233419564, 'comment_body': 'space', 'comment_created': datetime.datetime(2023, 6, 19, 0, 39, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1233419598, 'comment_body': 'space', 'comment_created': datetime.datetime(2023, 6, 19, 0, 39, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1233419638, 'comment_body': 'space', 'comment_created': datetime.datetime(2023, 6, 19, 0, 39, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1233419649, 'comment_body': 'space', 'comment_created': datetime.datetime(2023, 6, 19, 0, 39, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1233419673, 'comment_body': 'space', 'comment_created': datetime.datetime(2023, 6, 19, 0, 39, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1233419694, 'comment_body': 'space', 'comment_created': datetime.datetime(2023, 6, 19, 0, 39, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1233419720, 'comment_body': 'space', 'comment_created': datetime.datetime(2023, 6, 19, 0, 39, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1234532101, 'comment_body': 'fixed! ', 'comment_created': datetime.datetime(2023, 6, 19, 22, 41, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Seba-T', 'type': 'User'}, {'comment_id': 1234532116, 'comment_body': 'fixed!', 'comment_created': datetime.datetime(2023, 6, 19, 22, 41, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Seba-T', 'type': 'User'}, {'comment_id': 1234532186, 'comment_body': 'fixed :)\r\n', 'comment_created': datetime.datetime(2023, 6, 19, 22, 41, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Seba-T', 'type': 'User'}, {'comment_id': 1234532245, 'comment_body': 'fixed ', 'comment_created': datetime.datetime(2023, 6, 19, 22, 42, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Seba-T', 'type': 'User'}, {'comment_id': 1234532273, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2023, 6, 19, 22, 42, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Seba-T', 'type': 'User'}, {'comment_id': 1234532321, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2023, 6, 19, 22, 42, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Seba-T', 'type': 'User'}, {'comment_id': 1234532352, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2023, 6, 19, 22, 42, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Seba-T', 'type': 'User'}, {'comment_id': 1234532379, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2023, 6, 19, 22, 42, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Seba-T', 'type': 'User'}, {'comment_id': 1234546466, 'comment_body': ""Why do you think it's stupid? "", 'comment_created': datetime.datetime(2023, 6, 19, 23, 14, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1234547011, 'comment_body': ""I don't think you need to clone here."", 'comment_created': datetime.datetime(2023, 6, 19, 23, 15, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1234547428, 'comment_body': ""There may be an easier way to do this that avoids allocating a hashset.\r\n\r\nAlso worth noting that while hashsets are cool and all, they are *expensive* to allocate and free. It's better to simply have a btreeset for small sets. \r\n\r\nBUT - IMO there is likely a way to achieve this without needing a hashset at all :) "", 'comment_created': datetime.datetime(2023, 6, 19, 23, 17, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1237091284, 'comment_body': 'because I think it returns the first name it finds, whereas there could be multiple previous names if we had multiple updates ', 'comment_created': datetime.datetime(2023, 6, 21, 14, 22, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Seba-T', 'type': 'User'}, {'comment_id': 1237092658, 'comment_body': 'I nearly rewrote everything following what you wrote above so the hashset just disappeared :p ', 'comment_created': datetime.datetime(2023, 6, 21, 14, 23, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Seba-T', 'type': 'User'}, {'comment_id': 1237887969, 'comment_body': ""This shouldn't be part of this trait. Should be removed. "", 'comment_created': datetime.datetime(2023, 6, 22, 1, 35, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1237888086, 'comment_body': ""No todos in production - plus this isn't needed on the *read* transaction anyway. "", 'comment_created': datetime.datetime(2023, 6, 22, 1, 35, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1237888218, 'comment_body': 'Should be in impl queryServerWrite NOT in impl QueryServerTransaction for QueryServerWrite. ', 'comment_created': datetime.datetime(2023, 6, 22, 1, 36, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1237888627, 'comment_body': 'Read up on how SmolSet works :) ', 'comment_created': datetime.datetime(2023, 6, 22, 1, 37, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1237888671, 'comment_body': 'What about in insert checked? ', 'comment_created': datetime.datetime(2023, 6, 22, 1, 37, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1237889286, 'comment_body': 'Why does this need a hashset? ', 'comment_created': datetime.datetime(2023, 6, 22, 1, 38, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1237889843, 'comment_body': ""I think the behaviour we want is that we want the name history to show the time when a name was *added* not the time when it was *removed* from the account. If you do it as removed, you'll hit replication issues.\r\n\r\nSo how would you re-model this part of the code so that when you create the entry, the cid of the create and name is added? When the modify shows a new name, add the new name to the history rather than the old one? "", 'comment_created': datetime.datetime(2023, 6, 22, 1, 39, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1238494044, 'comment_body': 'wopsies :p ', 'comment_created': datetime.datetime(2023, 6, 22, 12, 59, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Seba-T', 'type': 'User'}, {'comment_id': 1241360151, 'comment_body': ""move this into the if condition one line down, since it's only needed in that part. "", 'comment_created': datetime.datetime(2023, 6, 26, 1, 12, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1243082379, 'comment_body': 'Add a check for len > 8 here', 'comment_created': datetime.datetime(2023, 6, 27, 2, 58, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1243082446, 'comment_body': 'should be > 8, not >=. ', 'comment_created': datetime.datetime(2023, 6, 27, 2, 59, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1243659836, 'comment_body': ""wait but wouldn't this allow to have 9 elements in the set? Suppose the current size is 9, using your condition we would remove the 9th element to then add a new 9th right back, bringing the size back to 9. Whereas if we have 8 elements, we remove the 8th and we add a new one, the max size will still be 8"", 'comment_created': datetime.datetime(2023, 6, 27, 12, 32, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Seba-T', 'type': 'User'}, {'comment_id': 1243663906, 'comment_body': 'done! ', 'comment_created': datetime.datetime(2023, 6, 27, 12, 36, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Seba-T', 'type': 'User'}, {'comment_id': 1243669517, 'comment_body': 'Just tried with > instead of >= and it\'s not passing the history full test \r\n`thread \'plugins::namehistory::tests::name_purge_and_set_with_filled_history\' panicked at \'assertion failed: !c.contains(&PartialValue::new_utf8s(&\\""old_name1\\"")) &&\\n    c.contains(&PartialValue::new_utf8s(&\\""new_name\\""))\', server/lib/src/plugins/namehistory.rs:261:24`', 'comment_created': datetime.datetime(2023, 6, 27, 12, 40, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Seba-T', 'type': 'User'}, {'comment_id': 1244614438, 'comment_body': 'Nah, this is the right way to do it :) feel free to remove this comment. ', 'comment_created': datetime.datetime(2023, 6, 28, 3, 13, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1244789756, 'comment_body': 'Sure!', 'comment_created': datetime.datetime(2023, 6, 28, 7, 15, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Seba-T', 'type': 'User'}, {'comment_id': 1244792522, 'comment_body': ""Also resolve these github conversations once youve actioned them, it makes it easier to see what you've done/havent :) "", 'comment_created': datetime.datetime(2023, 6, 28, 7, 18, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1244829031, 'comment_body': 'Wow I never noticed the resolve button :p ', 'comment_created': datetime.datetime(2023, 6, 28, 7, 51, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Seba-T', 'type': 'User'}]","[{'commit_sha': 'b6ebb0183806cee92fe770e495310f58e4a9900e', 'committer_username': 'Seba-T', 'committer_name': 'Sebastiano Tocci', 'committer_email': 'sebastiano.tocci@proton.me', 'commit_date': datetime.datetime(2017, 5, 17, 10, 31, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8891fbc22245ed85f25022177c9598bc4330148f', 'committer_username': 'Seba-T', 'committer_name': 'Sebastiano Tocci', 'committer_email': 'sebastiano.tocci@proton.me', 'commit_date': datetime.datetime(2017, 5, 17, 10, 31, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fab946d839fd44b68248a0786a7e1bdf103d4499', 'committer_username': 'Seba-T', 'committer_name': 'Sebastiano Tocci', 'committer_email': 'sebastiano.tocci@proton.me', 'commit_date': datetime.datetime(2017, 5, 17, 10, 31, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56b394363ea5c62f987f92e22e26983861705e44', 'committer_username': 'Seba-T', 'committer_name': 'Sebastiano Tocci', 'committer_email': 'sebastiano.tocci@proton.me', 'commit_date': datetime.datetime(2017, 5, 17, 10, 31, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0dc9cde70a4d1d51a58d535476d2ff2598c2ca9a', 'committer_username': 'Seba-T', 'committer_name': 'Sebastiano Tocci', 'committer_email': 'sebastiano.tocci@proton.me', 'commit_date': datetime.datetime(2017, 5, 17, 10, 31, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c9644116aa9b1b3ff79d7fa08401c0328e6ec6a', 'committer_username': 'Seba-T', 'committer_name': 'Sebastiano Tocci', 'committer_email': 'sebastiano.tocci@proton.me', 'commit_date': datetime.datetime(2017, 5, 17, 10, 31, 21, tzinfo=datetime.timezone.utc)}]",Sebastiano Tocci,28754257,sebastiano.tocci@proton.me,User,,12,,21,15
1438072918,Unix gid duplicate fix,"Fixes #1875

Checklist

- [x] This pr contains no AI generated code
- [x] cargo fmt has been run
- [x] cargo clippy has been run
- [x] cargo test has been run and passes
- [ ] book chapter included (if relevant)
- [ ] design document included (if relevant)
",True,1876,https://api.github.com/repos/kanidm/kanidm/pulls/1876,https://github.com/kanidm/kanidm/pull/1876,closed,21,7,3,4,0,7,0,1,[],2023-07-17 20:59:37+00:00,2023-07-18 23:44:51+00:00,96314.0,"1 day, 2:45:14","[{'comment_id': 1265974124, 'comment_body': 'What happens if the user changes another attribute but not the gid here now? I think this purge needs to be associated only if a gid is actually set too. ', 'comment_created': datetime.datetime(2023, 7, 17, 22, 48, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1265974362, 'comment_body': 'Change another attribute and check the gid stays the same ;) ', 'comment_created': datetime.datetime(2023, 7, 17, 22, 48, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1265978267, 'comment_body': 'I think I should move it inside the map then ', 'comment_created': datetime.datetime(2023, 7, 17, 22, 56, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Seba-T', 'type': 'User'}, {'comment_id': 1265978793, 'comment_body': 'Or just restructure the code to make it clearer what the intent is. ', 'comment_created': datetime.datetime(2023, 7, 17, 22, 58, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1265978937, 'comment_body': 'what other attributes can I change besides the gid? Because in `GroupUnixExtend` I just see `pub gidnumber: Option<u32>,`', 'comment_created': datetime.datetime(2023, 7, 17, 22, 58, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Seba-T', 'type': 'User'}, {'comment_id': 1265979383, 'comment_body': '🤔 good point. But if the person runs the command with a ""None"" in the gid it should be idempotent and not change the gid. ', 'comment_created': datetime.datetime(2023, 7, 17, 22, 59, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1265981054, 'comment_body': ""agreed, so I'll ensure that won't happen \r\n"", 'comment_created': datetime.datetime(2023, 7, 17, 23, 2, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Seba-T', 'type': 'User'}]","[{'commit_sha': 'bd6eb440f747d0f4ed037e9f82aa3f13a72c9c75', 'committer_username': 'Seba-T', 'committer_name': 'Sebastiano Tocci', 'committer_email': 'sebastiano.tocci@proton.me', 'commit_date': datetime.datetime(2017, 5, 17, 10, 31, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd05d287d94059a6e71feb26c09a7e3aacc45c891', 'committer_username': 'Seba-T', 'committer_name': 'Sebastiano Tocci', 'committer_email': 'sebastiano.tocci@proton.me', 'commit_date': datetime.datetime(2017, 5, 17, 10, 31, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec5f34a4b6e812069d9f69584925289d4b709bda', 'committer_username': 'Seba-T', 'committer_name': 'Sebastiano Tocci', 'committer_email': 'sebastiano.tocci@proton.me', 'commit_date': datetime.datetime(2017, 5, 17, 10, 31, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca9c0cc477df53ddd78cfffacca47282604dde14', 'committer_username': 'Seba-T', 'committer_name': 'Sebastiano Tocci', 'committer_email': 'sebastiano.tocci@proton.me', 'commit_date': datetime.datetime(2017, 5, 17, 10, 31, 21, tzinfo=datetime.timezone.utc)}]",Sebastiano Tocci,28754257,sebastiano.tocci@proton.me,User,,12,,21,15
1443159172,added hsts header middleware,"Fixes #1823 

Checklist

- [x] This pr contains no AI generated code
- [x] cargo fmt has been run
- [x] cargo clippy has been run
- [x] cargo test has been run and passes
- [ ] book chapter included (if relevant)
- [ ] design document included (if relevant)
",True,1882,https://api.github.com/repos/kanidm/kanidm/pulls/1882,https://github.com/kanidm/kanidm/pull/1882,closed,23,0,3,2,0,2,0,0,[],2023-07-20 15:43:51+00:00,2023-07-22 20:16:10+00:00,189139.0,"2 days, 4:32:19","[{'comment_id': 1271057492, 'comment_body': 'We should be using the object out of `http::header` for this\r\n\r\n```suggestion\r\n    headers.insert(http::header::STRICT_TRANSPORT_SECURITY, hsts_header);\r\n```', 'comment_created': datetime.datetime(2023, 7, 21, 20, 13, 40, tzinfo=datetime.timezone.utc), 'commenter': 'yaleman', 'type': 'User'}, {'comment_id': 1271277478, 'comment_body': 'fixed! ', 'comment_created': datetime.datetime(2023, 7, 22, 10, 8, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Seba-T', 'type': 'User'}]","[{'commit_sha': 'e558bfb2af6fb6f8f910576f6f241df89dac5730', 'committer_username': 'Seba-T', 'committer_name': 'Sebastiano Tocci', 'committer_email': 'sebastiano.tocci@proton.me', 'commit_date': datetime.datetime(2017, 5, 17, 10, 31, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da87f384270fb4fe6019bac99dc50991de5e1750', 'committer_username': 'Seba-T', 'committer_name': 'Sebastiano Tocci', 'committer_email': 'sebastiano.tocci@proton.me', 'commit_date': datetime.datetime(2017, 5, 17, 10, 31, 21, tzinfo=datetime.timezone.utc)}]",Sebastiano Tocci,28754257,sebastiano.tocci@proton.me,User,,12,,21,15
1458079830,added compression layer for the pkg route,"Fixes #1827 

Checklist

- [x] This pr contains no AI generated code
- [x] cargo fmt has been run
- [x] cargo clippy has been run
- [x] cargo test has been run and passes
- [ ] book chapter included (if relevant)
- [ ] design document included (if relevant)
",True,1928,https://api.github.com/repos/kanidm/kanidm/pulls/1928,https://github.com/kanidm/kanidm/pull/1928,closed,4,2,1,1,1,2,0,0,[],2023-08-01 13:08:24+00:00,2023-08-01 22:10:46+00:00,32542.0,9:02:22,"[{'comment_id': 1281174293, 'comment_body': ""Oooooh, that's awesome! Ignore my original comment, early morning search fail 🥳 "", 'comment_created': datetime.datetime(2023, 8, 1, 21, 30, 11, tzinfo=datetime.timezone.utc), 'commenter': 'yaleman', 'type': 'User'}, {'comment_id': 1281615328, 'comment_body': ""I too stumbled across this feature entirely by mistake. Looks like we're not the only ones who wanted to serve pre compressed stuff :p "", 'comment_created': datetime.datetime(2023, 8, 2, 9, 2, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Seba-T', 'type': 'User'}]","[{'commit_sha': 'f8f07a576ca02cc40c502d60bf4b37a460d40074', 'committer_username': 'Seba-T', 'committer_name': 'Sebastiano Tocci', 'committer_email': 'sebastiano.tocci@proton.me', 'commit_date': datetime.datetime(2017, 5, 17, 10, 31, 21, tzinfo=datetime.timezone.utc)}]",Sebastiano Tocci,28754257,sebastiano.tocci@proton.me,User,,12,,21,15
1458640381,fixed serialization of oauth2 token scope,"Fixes #1929 

Checklist

- [x] This pr contains no AI generated code
- [x] cargo fmt has been run
- [x] cargo clippy has been run
- [x] cargo test has been run and passes
- [ ] book chapter included (if relevant)
- [ ] design document included (if relevant)
",True,1930,https://api.github.com/repos/kanidm/kanidm/pulls/1930,https://github.com/kanidm/kanidm/pull/1930,closed,21,2,3,1,3,2,0,0,[],2023-08-01 19:23:55+00:00,2023-08-01 23:50:57+00:00,16022.0,4:27:02,"[{'comment_id': 1281249670, 'comment_body': ""That's actually cool."", 'comment_created': datetime.datetime(2023, 8, 1, 23, 50, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1281617764, 'comment_body': 'Yeah I thought about updating all our existing `serde(skip_serialize_if = ""Option::is_none)`, but I think that would be better places in its own pr. ', 'comment_created': datetime.datetime(2023, 8, 2, 9, 3, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Seba-T', 'type': 'User'}]","[{'commit_sha': 'f8ca26fcf26883745ff488cd9d7e4aca74d9406a', 'committer_username': 'Seba-T', 'committer_name': 'Sebastiano Tocci', 'committer_email': 'sebastiano.tocci@proton.me', 'commit_date': datetime.datetime(2017, 5, 17, 10, 31, 21, tzinfo=datetime.timezone.utc)}]",Sebastiano Tocci,28754257,sebastiano.tocci@proton.me,User,,12,,21,15
1459445130,replaced `skip_serializing_if` with `skip_serializing_none`,"all the single `#[serde(skip_serializing_if = ""Option::is_none"")]` got replaced with the more readable 
`#[skip_serializing_none]`, which has to be specified only once per struct 

- [x] This pr contains no AI generated code
- [x] cargo fmt has been run
- [x] cargo clippy has been run
- [x] cargo test has been run and passes
- [ ] book chapter included (if relevant)
- [ ] design document included (if relevant)
",True,1932,https://api.github.com/repos/kanidm/kanidm/pulls/1932,https://github.com/kanidm/kanidm/pull/1932,closed,30,84,9,3,1,2,0,0,[],2023-08-02 09:27:58+00:00,2023-08-02 22:51:31+00:00,48213.0,13:23:33,"[{'comment_id': 1281717501, 'comment_body': 'This should be a workspace import', 'comment_created': datetime.datetime(2023, 8, 2, 10, 29, 38, tzinfo=datetime.timezone.utc), 'commenter': 'yaleman', 'type': 'User'}, {'comment_id': 1281718062, 'comment_body': '```suggestion\r\nserde_with = { workspace = true }\r\n```', 'comment_created': datetime.datetime(2023, 8, 2, 10, 30, 16, tzinfo=datetime.timezone.utc), 'commenter': 'yaleman', 'type': 'User'}]","[{'commit_sha': 'ab2b11acb6af005d307069dfb019b7bf0912e75a', 'committer_username': 'Seba-T', 'committer_name': 'Sebastiano Tocci', 'committer_email': 'sebastiano.tocci@proton.me', 'commit_date': datetime.datetime(2017, 5, 17, 10, 31, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4b5bece761ad473989f3f5c33702296554fa925', 'committer_username': 'Seba-T', 'committer_name': 'Sebastiano Tocci', 'committer_email': 'sebastiano.tocci@proton.me', 'commit_date': datetime.datetime(2017, 5, 17, 10, 31, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02b834e16993ddb3c0e27f2952c54584ad1b0ceb', 'committer_username': 'Seba-T', 'committer_name': 'Sebastiano Tocci', 'committer_email': 'sebastiano.tocci@proton.me', 'commit_date': datetime.datetime(2017, 5, 17, 10, 31, 21, tzinfo=datetime.timezone.utc)}]",Sebastiano Tocci,28754257,sebastiano.tocci@proton.me,User,,12,,21,15
1465168706,Adding a way to specify different server configs when using the #[kanidmd_testkit::test] macro,"Fixes #1934 

Checklist

- [x] This pr contains no AI generated code
- [x] cargo fmt has been run
- [x] cargo clippy has been run
- [x] cargo test has been run and passes
- [ ] book chapter included (if relevant)
- [ ] design document included (if relevant)
",True,1953,https://api.github.com/repos/kanidm/kanidm/pulls/1953,https://github.com/kanidm/kanidm/pull/1953,closed,75,13,6,1,3,0,0,0,[],2023-08-07 12:38:21+00:00,2023-08-08 10:01:18+00:00,76977.0,21:22:57,[],"[{'commit_sha': '0e24b5573504a5042b7c49225d36e31803ee1b66', 'committer_username': 'Seba-T', 'committer_name': 'Sebastiano Tocci', 'committer_email': 'sebastiano.tocci@proton.me', 'commit_date': datetime.datetime(2017, 5, 17, 10, 31, 21, tzinfo=datetime.timezone.utc)}]",Sebastiano Tocci,28754257,sebastiano.tocci@proton.me,User,,12,,21,15
1469457367,Configurable session timeouts,"Fixes #1939

Checklist

- [x] This pr contains no AI generated code
- [x] cargo fmt has been run
- [x] cargo clippy has been run
- [x] cargo test has been run and passes
- [ ] book chapter included (if relevant)
- [ ] design document included (if relevant)
",True,1965,https://api.github.com/repos/kanidm/kanidm/pulls/1965,https://github.com/kanidm/kanidm/pull/1965,closed,738,146,25,7,8,27,3,0,"[{'name': 'enhancement'}, {'name': 'internals'}, {'name': 'kanidmd'}]",2023-08-09 23:43:55+00:00,2023-08-22 01:00:43+00:00,1041408.0,"12 days, 1:16:48","[{'comment_id': 1289394450, 'comment_body': 'The default\'s 0 which would end badly, we should set it to the other (and log an error)\r\n```suggestion\r\n            .map(|s| match s[0].parse::<u32>() {\r\n            Ok(val) => val,\r\n            Err(err) => {\r\n                admin_err!(""Failed to parse authsession_expiry API response {:?} to u32: {:?}"", s, err);\r\n                DEFAULT_AUTH_SESSION_EXPIRY\r\n            }\r\n        });\r\n```', 'comment_created': datetime.datetime(2023, 8, 10, 0, 35, 39, tzinfo=datetime.timezone.utc), 'commenter': 'yaleman', 'type': 'User'}, {'comment_id': 1289395714, 'comment_body': 'See previous comment about defaults 😄 ', 'comment_created': datetime.datetime(2023, 8, 10, 0, 37, 40, tzinfo=datetime.timezone.utc), 'commenter': 'yaleman', 'type': 'User'}, {'comment_id': 1289400763, 'comment_body': '😁 \r\n```suggestion\r\n            // TODO: probably it would be more efficient to introduce a single check for each of the possible system configs\r\n```', 'comment_created': datetime.datetime(2023, 8, 10, 0, 48, 26, tzinfo=datetime.timezone.utc), 'commenter': 'yaleman', 'type': 'User'}, {'comment_id': 1289409125, 'comment_body': 'smol nitpick\r\n\r\n```suggestion\r\n                admin_error!(?e, ""Failed to retrieve authsession_expiry from system configuration"");\r\n```', 'comment_created': datetime.datetime(2023, 8, 10, 1, 1, 21, tzinfo=datetime.timezone.utc), 'commenter': 'yaleman', 'type': 'User'}, {'comment_id': 1289409357, 'comment_body': 'smol nitpick\r\n\r\n```suggestion\r\n                admin_error!(?e, ""Failed to retrieve privilege_expiry from system configuration"");\r\n```', 'comment_created': datetime.datetime(2023, 8, 10, 1, 1, 44, tzinfo=datetime.timezone.utc), 'commenter': 'yaleman', 'type': 'User'}, {'comment_id': 1290136976, 'comment_body': ""actually I don't think we can use `admin_err!`  inside the client lib, so I went for a custom error variant inside the ClientError enum "", 'comment_created': datetime.datetime(2023, 8, 10, 13, 30, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Seba-T', 'type': 'User'}, {'comment_id': 1290807362, 'comment_body': ""Oh, client lib, that's my derp. Just use the logging `error!()` which should be in the crate"", 'comment_created': datetime.datetime(2023, 8, 11, 0, 57, 47, tzinfo=datetime.timezone.utc), 'commenter': 'yaleman', 'type': 'User'}, {'comment_id': 1292928713, 'comment_body': 'space above this line. ', 'comment_created': datetime.datetime(2023, 8, 14, 3, 0, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1292929117, 'comment_body': 'Should probably be a seperate ACP for IDM_ACP_SYSTEM_CONFIG_SESSION_EXP, and then we tie it to the group member instead? That matches in with the other future changes to fine-grain acp later. ', 'comment_created': datetime.datetime(2023, 8, 14, 3, 2, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1292929314, 'comment_body': 'debug/trace rather than dbg in production code here. ', 'comment_created': datetime.datetime(2023, 8, 14, 3, 2, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1292929643, 'comment_body': 'trace or debug. ', 'comment_created': datetime.datetime(2023, 8, 14, 3, 3, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1292930445, 'comment_body': 'I think rather then a pair of u32, this should be ""default_account_policy"" and a struct of ""AccountPolicy"" which contains the u32s.) This is because we\'ll need to extend this for more policies later, and this ""fan out"" of cowcell does have a minor cost at run time that we want to somewhat avoid. This would also let you do ""AccountPolicy::default"" in the validate cred step and prevent too many arcs in fn calls, and make it easier to extend account policy later. As well, it\'ll let us later, overlay and combine the account policy from the system and the user\'s resulting set of policy once we add that.\r\n\r\n', 'comment_created': datetime.datetime(2023, 8, 14, 3, 6, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1293212265, 'comment_body': 'should we also move the pw badlist cache inside this `AccountPolicy`?', 'comment_created': datetime.datetime(2023, 8, 14, 9, 17, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Seba-T', 'type': 'User'}, {'comment_id': 1293214091, 'comment_body': ""I was just fighting against failing tests, I didn't mean to leave it in prod :p "", 'comment_created': datetime.datetime(2023, 8, 14, 9, 19, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Seba-T', 'type': 'User'}, {'comment_id': 1294002178, 'comment_body': 'sure!', 'comment_created': datetime.datetime(2023, 8, 14, 21, 49, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Seba-T', 'type': 'User'}, {'comment_id': 1294128721, 'comment_body': 'Actually yes! This is an EXCELLENT idea :)', 'comment_created': datetime.datetime(2023, 8, 15, 2, 30, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1294129028, 'comment_body': ""Naughty naughty :P  It's why trace! is good here since that's meants to be developer-level logs we can accidentally leave in. We plan to do a big overhaul of log messages soon to make sure they are all at proper levels and details. "", 'comment_created': datetime.datetime(2023, 8, 15, 2, 30, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1294129146, 'comment_body': ""I feel like you do this just to see if I'm paying attention :P "", 'comment_created': datetime.datetime(2023, 8, 15, 2, 31, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1294419995, 'comment_body': 'awesome! ', 'comment_created': datetime.datetime(2023, 8, 15, 10, 12, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Seba-T', 'type': 'User'}, {'comment_id': 1295179355, 'comment_body': 'Dang you got me /s ', 'comment_created': datetime.datetime(2023, 8, 15, 22, 4, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Seba-T', 'type': 'User'}, {'comment_id': 1299527068, 'comment_body': 'What does this dbg(x) here do? ', 'comment_created': datetime.datetime(2023, 8, 21, 2, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1299527933, 'comment_body': 'Could these all be coallesced into a single ""reload_system_account_policy""? ', 'comment_created': datetime.datetime(2023, 8, 21, 2, 49, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 1299874495, 'comment_body': 'Actually, yes 😄 ', 'comment_created': datetime.datetime(2023, 8, 21, 9, 42, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Seba-T', 'type': 'User'}, {'comment_id': 1299877106, 'comment_body': 'Add more pollution to your terminal when you run the test :p. It’s just a leftover from when I was fightings against the test, I’ll remove it ', 'comment_created': datetime.datetime(2023, 8, 21, 9, 44, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Seba-T', 'type': 'User'}, {'comment_id': 1300769663, 'comment_body': 'This should use the `enum Attribute.into()`', 'comment_created': datetime.datetime(2023, 8, 22, 0, 3, 51, tzinfo=datetime.timezone.utc), 'commenter': 'yaleman', 'type': 'User'}, {'comment_id': 1300769684, 'comment_body': 'This should use the `enum Attribute.into()`', 'comment_created': datetime.datetime(2023, 8, 22, 0, 3, 55, tzinfo=datetime.timezone.utc), 'commenter': 'yaleman', 'type': 'User'}, {'comment_id': 1300786545, 'comment_body': 'Done :) ', 'comment_created': datetime.datetime(2023, 8, 22, 0, 40, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Seba-T', 'type': 'User'}]","[{'commit_sha': '742c4e7ed8bb708f38e1fbab01a217fd4ce0eb85', 'committer_username': 'Seba-T', 'committer_name': 'Sebastiano Tocci', 'committer_email': 'sebastiano.tocci@proton.me', 'commit_date': datetime.datetime(2017, 5, 17, 10, 31, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8faf8d8f02e373eba71900032c159a104ef16a58', 'committer_username': 'Seba-T', 'committer_name': 'Sebastiano Tocci', 'committer_email': 'sebastiano.tocci@proton.me', 'commit_date': datetime.datetime(2017, 5, 17, 10, 31, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '087621cc9ab9b26516f12f8c0a5b5a9879e9e2b6', 'committer_username': 'Seba-T', 'committer_name': 'Sebastiano Tocci', 'committer_email': 'sebastiano.tocci@proton.me', 'commit_date': datetime.datetime(2017, 5, 17, 10, 31, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '00ec7898ba758ce1f20d282daf8d83867bc615e4', 'committer_username': 'Seba-T', 'committer_name': 'Sebastiano Tocci', 'committer_email': 'sebastiano.tocci@proton.me', 'commit_date': datetime.datetime(2017, 5, 17, 10, 31, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09f9d5de4ea58accfdb3d718f862f79caadaac3c', 'committer_username': 'Seba-T', 'committer_name': 'Sebastiano Tocci', 'committer_email': 'sebastiano.tocci@proton.me', 'commit_date': datetime.datetime(2017, 5, 17, 10, 31, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '267988ab04cdb5c180c9c02b5cb19fa334c6af89', 'committer_username': 'Seba-T', 'committer_name': 'Sebastiano Tocci', 'committer_email': 'sebastiano.tocci@proton.me', 'commit_date': datetime.datetime(2017, 5, 17, 10, 31, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70b04efdb379ef8aa24e5090bee84962d5e3a897', 'committer_username': 'Seba-T', 'committer_name': 'Sebastiano Tocci', 'committer_email': 'sebastiano.tocci@proton.me', 'commit_date': datetime.datetime(2017, 5, 17, 10, 31, 21, tzinfo=datetime.timezone.utc)}]",Sebastiano Tocci,28754257,sebastiano.tocci@proton.me,User,,12,,21,15

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
168782501,kanidm,kanidm/kanidm,Rust,171,2532,22,87,2019,201,14,9,"[{'id': 2001345649, 'number': 2949, 'closed': datetime.datetime(2024, 8, 3, 0, 37, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 8, 2, 18, 45, 13, tzinfo=datetime.timezone.utc), 'time_taken': 21157.0, 'time_delta': '5:52:37', 'additions': 92, 'deletions': 9, 'state': 'closed'}, {'id': 1995389531, 'number': 2942, 'closed': datetime.datetime(2024, 8, 12, 3, 56, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 7, 31, 1, 17, 31, tzinfo=datetime.timezone.utc), 'time_taken': 1046335.0, 'time_delta': '12 days, 2:38:55', 'additions': 430, 'deletions': 7, 'state': 'closed'}, {'id': 1971268816, 'number': 2909, 'closed': datetime.datetime(2024, 7, 30, 2, 11, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 7, 16, 10, 38, 2, tzinfo=datetime.timezone.utc), 'time_taken': 1179179.0, 'time_delta': '13 days, 15:32:59', 'additions': 997, 'deletions': 118, 'state': 'closed'}, {'id': 1931543571, 'number': 2846, 'closed': datetime.datetime(2024, 7, 4, 0, 38, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 6, 21, 0, 21, 16, tzinfo=datetime.timezone.utc), 'time_taken': 1124215.0, 'time_delta': '13 days, 0:16:55', 'additions': 92, 'deletions': 0, 'state': 'closed'}, {'id': 1931479864, 'number': 2845, 'closed': datetime.datetime(2024, 6, 21, 1, 24, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 6, 20, 22, 56, 24, tzinfo=datetime.timezone.utc), 'time_taken': 8913.0, 'time_delta': '2:28:33', 'additions': 175, 'deletions': 124, 'state': 'closed'}, {'id': 1906209385, 'number': 2820, 'closed': datetime.datetime(2024, 6, 7, 0, 18, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 6, 6, 1, 6, 36, tzinfo=datetime.timezone.utc), 'time_taken': 83498.0, 'time_delta': '23:11:38', 'additions': 201, 'deletions': 28, 'state': 'closed'}, {'id': 1830602706, 'number': 2712, 'closed': datetime.datetime(2024, 4, 23, 0, 30, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 4, 19, 0, 37, 32, tzinfo=datetime.timezone.utc), 'time_taken': 345186.0, 'time_delta': '3 days, 23:53:06', 'additions': 90, 'deletions': 18, 'state': 'closed'}, {'id': 1771143264, 'number': 2653, 'closed': datetime.datetime(2024, 4, 9, 2, 47, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 3, 14, 0, 43, 42, tzinfo=datetime.timezone.utc), 'time_taken': 2253831.0, 'time_delta': '26 days, 2:03:51', 'additions': 829, 'deletions': 73, 'state': 'closed'}, {'id': 1741541616, 'number': 2580, 'closed': datetime.datetime(2024, 2, 24, 0, 34, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 2, 24, 0, 26, tzinfo=datetime.timezone.utc), 'time_taken': 493.0, 'time_delta': '0:08:13', 'additions': 31, 'deletions': 40, 'state': 'closed'}, {'id': 1741528817, 'number': 2579, 'closed': datetime.datetime(2024, 2, 24, 0, 18, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 2, 24, 0, 2, 41, tzinfo=datetime.timezone.utc), 'time_taken': 957.0, 'time_delta': '0:15:57', 'additions': 21, 'deletions': 4, 'state': 'closed'}, {'id': 1486270569, 'number': 2023, 'closed': datetime.datetime(2023, 8, 23, 12, 40, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 23, 11, 38, 35, tzinfo=datetime.timezone.utc), 'time_taken': 3711.0, 'time_delta': '1:01:51', 'additions': 23, 'deletions': 11, 'state': 'closed'}, {'id': 1481854485, 'number': 2001, 'closed': datetime.datetime(2023, 8, 23, 10, 51, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 20, 17, 13, 38, tzinfo=datetime.timezone.utc), 'time_taken': 236267.0, 'time_delta': '2 days, 17:37:47', 'additions': 1392, 'deletions': 9, 'state': 'closed'}, {'id': 1469457367, 'number': 1965, 'closed': datetime.datetime(2023, 8, 22, 1, 0, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 9, 23, 43, 55, tzinfo=datetime.timezone.utc), 'time_taken': 1041408.0, 'time_delta': '12 days, 1:16:48', 'additions': 738, 'deletions': 146, 'state': 'closed'}, {'id': 1467305528, 'number': 1957, 'closed': datetime.datetime(2023, 8, 31, 1, 31, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 8, 18, 7, 17, tzinfo=datetime.timezone.utc), 'time_taken': 1927439.0, 'time_delta': '22 days, 7:23:59', 'additions': 223, 'deletions': 2, 'state': 'closed'}, {'id': 1465168706, 'number': 1953, 'closed': datetime.datetime(2023, 8, 8, 10, 1, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 7, 12, 38, 21, tzinfo=datetime.timezone.utc), 'time_taken': 76977.0, 'time_delta': '21:22:57', 'additions': 75, 'deletions': 13, 'state': 'closed'}, {'id': 1459445130, 'number': 1932, 'closed': datetime.datetime(2023, 8, 2, 22, 51, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 2, 9, 27, 58, tzinfo=datetime.timezone.utc), 'time_taken': 48213.0, 'time_delta': '13:23:33', 'additions': 30, 'deletions': 84, 'state': 'closed'}, {'id': 1458640381, 'number': 1930, 'closed': datetime.datetime(2023, 8, 1, 23, 50, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 1, 19, 23, 55, tzinfo=datetime.timezone.utc), 'time_taken': 16022.0, 'time_delta': '4:27:02', 'additions': 21, 'deletions': 2, 'state': 'closed'}, {'id': 1458079830, 'number': 1928, 'closed': datetime.datetime(2023, 8, 1, 22, 10, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 1, 13, 8, 24, tzinfo=datetime.timezone.utc), 'time_taken': 32542.0, 'time_delta': '9:02:22', 'additions': 4, 'deletions': 2, 'state': 'closed'}, {'id': 1443159172, 'number': 1882, 'closed': datetime.datetime(2023, 7, 22, 20, 16, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 20, 15, 43, 51, tzinfo=datetime.timezone.utc), 'time_taken': 189139.0, 'time_delta': '2 days, 4:32:19', 'additions': 23, 'deletions': 0, 'state': 'closed'}, {'id': 1438072918, 'number': 1876, 'closed': datetime.datetime(2023, 7, 18, 23, 44, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 17, 20, 59, 37, tzinfo=datetime.timezone.utc), 'time_taken': 96314.0, 'time_delta': '1 day, 2:45:14', 'additions': 21, 'deletions': 7, 'state': 'closed'}, {'id': 1422522743, 'number': 1819, 'closed': datetime.datetime(2023, 8, 16, 11, 2, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 6, 9, 11, 2, tzinfo=datetime.timezone.utc), 'time_taken': 3549107.0, 'time_delta': '41 days, 1:51:47', 'additions': 3113, 'deletions': 368, 'state': 'closed'}, {'id': 1392184469, 'number': 1735, 'closed': datetime.datetime(2023, 6, 14, 11, 28, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 14, 11, 14, 10, tzinfo=datetime.timezone.utc), 'time_taken': 873.0, 'time_delta': '0:14:33', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 1390227370, 'number': 1732, 'closed': datetime.datetime(2023, 6, 13, 9, 46, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 13, 9, 35, 24, tzinfo=datetime.timezone.utc), 'time_taken': 678.0, 'time_delta': '0:11:18', 'additions': 51, 'deletions': 21, 'state': 'closed'}, {'id': 1388242799, 'number': 1727, 'closed': datetime.datetime(2023, 6, 28, 8, 34, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 12, 8, 49, 5, tzinfo=datetime.timezone.utc), 'time_taken': 1381539.0, 'time_delta': '15 days, 23:45:39', 'additions': 551, 'deletions': 51, 'state': 'closed'}, {'id': 1378484335, 'number': 1705, 'closed': datetime.datetime(2023, 7, 4, 9, 28, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 5, 8, 2, 30, tzinfo=datetime.timezone.utc), 'time_taken': 2510767.0, 'time_delta': '29 days, 1:26:07', 'additions': 132, 'deletions': 2, 'state': 'closed'}, {'id': 1372951750, 'number': 1682, 'closed': datetime.datetime(2023, 6, 3, 3, 7, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 31, 21, 20, 33, tzinfo=datetime.timezone.utc), 'time_taken': 193617.0, 'time_delta': '2 days, 5:46:57', 'additions': 31, 'deletions': 8, 'state': 'closed'}, {'id': 1365487159, 'number': 1658, 'closed': datetime.datetime(2023, 5, 26, 0, 43, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 26, 0, 37, 55, tzinfo=datetime.timezone.utc), 'time_taken': 356.0, 'time_delta': '0:05:56', 'additions': 5, 'deletions': 5, 'state': 'closed'}, {'id': 1259493088, 'number': 1416, 'closed': datetime.datetime(2023, 7, 5, 1, 51, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 1, 21, 59, 11, tzinfo=datetime.timezone.utc), 'time_taken': 10813940.0, 'time_delta': '125 days, 3:52:20', 'additions': 158, 'deletions': 0, 'state': 'closed'}, {'id': 1258998010, 'number': 1415, 'closed': datetime.datetime(2023, 3, 7, 4, 33, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 1, 15, 15, 49, tzinfo=datetime.timezone.utc), 'time_taken': 479882.0, 'time_delta': '5 days, 13:18:02', 'additions': 23, 'deletions': 3, 'state': 'closed'}]"
