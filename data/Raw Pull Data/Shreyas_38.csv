pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
907985631,[execution] Add schedule_result_t alias template.,"- Alias schedule_result_t gives the result type of schedule

Signed-off-by: Shreyas Atre <shreyasatre16@gmail.com>


## Any background context you want to provide?

- https://github.com/STEllAR-GROUP/hpx/issues/5045#issuecomment-868810753
- [X] I have added a new feature and have added tests to go along with it.
- [ ] I have fixed a bug and have added a regression test.
- [ ] I have added a test using random numbers; I have made sure it uses a seed, and that the random numbers generated are valid inputs for the tests.
",True,5846,https://api.github.com/repos/STEllAR-GROUP/hpx/pulls/5846,https://github.com/STEllAR-GROUP/hpx/pull/5846,closed,14,0,2,2,5,0,4,0,"[{'name': 'type: enhancement'}, {'name': 'type: compatibility issue'}, {'name': 'category: executors'}, {'name': 'category: senders/receivers'}]",2022-04-12 17:40:50+00:00,2022-05-26 12:46:40+00:00,3783950.0,"43 days, 19:05:50",[],"[{'commit_sha': '66b5348192ec08e166be7f6b1b08770a789bce8e', 'committer_username': 'SAtacker', 'committer_name': 'Shreyas Atre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 4, 16, 36, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62479f3dff3da141d5d170dd6fd4cecf035ddd69', 'committer_username': 'SAtacker', 'committer_name': 'Shreyas Atre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 4, 16, 36, 2, tzinfo=datetime.timezone.utc)}]",Shreyas Atre,61797109,,User,,59,,86,82
916674408,[hpx::execution] Added forwarding_scheduler_query,"Signed-off-by: Shreyas Atre <shreyasatre16@gmail.com>

## Proposed Changes

- [X] [forwarding_scheduler_query](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2300r4.html#spec-execution.schedulers.queries.forwarding_scheduler_query)
- [x] [get_forward_progress_guarantee](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2300r4.html#spec-execution.schedulers.queries.get_forward_progress_guarantee)
- [x] [this_thread::execute_may_block_caller](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2300r4.html#spec-execution.schedulers.queries.execute_may_block_caller)

## Checklist

- [X] Unit test - forwarding_scheduler_query
- [x] Unit test - get_forward_progress_guarantee
- [x] Unit test - execute_may_block_caller",True,5865,https://api.github.com/repos/STEllAR-GROUP/hpx/pulls/5865,https://github.com/STEllAR-GROUP/hpx/pull/5865,closed,250,7,9,6,12,0,3,0,"[{'name': 'type: enhancement'}, {'name': 'type: compatibility issue'}, {'name': 'category: senders/receivers'}]",2022-04-22 17:40:44+00:00,2022-06-03 17:30:40+00:00,3628196.0,"41 days, 23:49:56",[],"[{'commit_sha': 'ef949b7182d35cbb7f895365c999920e919d7dba', 'committer_username': 'SAtacker', 'committer_name': 'Shreyas Atre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 4, 16, 36, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53f984920c62aae6ab41087ba7124a30ce1a466d', 'committer_username': 'SAtacker', 'committer_name': 'Shreyas Atre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 4, 16, 36, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c573a7fb733c694b0ba38ca64d6dc6c8c4dc75d', 'committer_username': 'SAtacker', 'committer_name': 'Shreyas Atre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 4, 16, 36, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc1373a9f2a6d6e4332c6eef522a82c37a4166ff', 'committer_username': 'SAtacker', 'committer_name': 'Shreyas Atre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 4, 16, 36, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e8362571c98d2e3af6ed7960add5b84a012fca6a', 'committer_username': 'SAtacker', 'committer_name': 'Shreyas Atre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 4, 16, 36, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '919e8134b3661fd79ea03fb4c7f232d2cb462f3c', 'committer_username': 'SAtacker', 'committer_name': 'Shreyas Atre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 4, 16, 36, 2, tzinfo=datetime.timezone.utc)}]",Shreyas Atre,61797109,,User,,59,,86,82
965033641,"[P2300] enhancements: receiver_of, sender_of improvements","Signed-off-by: Shreyas Atre <shreyasatre16@gmail.com>

## Proposed Changes

  - The `receiver_of` concept takes a receiver and an instance of the `completion_signatures<>` class template.
  - The `sender_of` concept defines the requirements for a sender type that on successful completion sends the specified set of value types.

## Checklist

- [x] receiver_of tests
- [x] sender_of tests
",True,5920,https://api.github.com/repos/STEllAR-GROUP/hpx/pulls/5920,https://github.com/STEllAR-GROUP/hpx/pull/5920,closed,360,37,4,5,2,17,3,0,"[{'name': 'type: enhancement'}, {'name': 'type: compatibility issue'}, {'name': 'category: senders/receivers'}]",2022-06-12 15:52:40+00:00,2022-07-01 18:59:10+00:00,1652790.0,"19 days, 3:06:30","[{'comment_id': 906381565, 'comment_body': ""What happens if the sender's completion signatures don't expose a `sends_stopped`?"", 'comment_created': datetime.datetime(2022, 6, 24, 20, 22, 14, tzinfo=datetime.timezone.utc), 'commenter': 'hkaiser', 'type': 'User'}, {'comment_id': 906382102, 'comment_body': 'Did you mean:\r\n```suggestion\r\n                is_receiver_of_v<R, CS>>\r\n```', 'comment_created': datetime.datetime(2022, 6, 24, 20, 23, 19, tzinfo=datetime.timezone.utc), 'commenter': 'hkaiser', 'type': 'User'}, {'comment_id': 906382568, 'comment_body': ""What if the sender's completion signatures don't expose a dependent type `value_types`?"", 'comment_created': datetime.datetime(2022, 6, 24, 20, 24, 8, tzinfo=datetime.timezone.utc), 'commenter': 'hkaiser', 'type': 'User'}, {'comment_id': 906382892, 'comment_body': ""Same here, what if the sender's completion signatures don't expose a dependent type `error_types`?"", 'comment_created': datetime.datetime(2022, 6, 24, 20, 24, 43, tzinfo=datetime.timezone.utc), 'commenter': 'hkaiser', 'type': 'User'}, {'comment_id': 906384388, 'comment_body': 'I think this would be sufficient:\r\n```suggestion\r\n                        typename CS::template error_types<meta::pack>>::value>\r\n```', 'comment_created': datetime.datetime(2022, 6, 24, 20, 26, 22, tzinfo=datetime.timezone.utc), 'commenter': 'hkaiser', 'type': 'User'}, {'comment_id': 906385013, 'comment_body': 'Can we simplify this?\r\n```suggestion\r\n                    typename CS::template value_types<meta::pack,\r\n                        meta::pack>>::value &&\r\n```', 'comment_created': datetime.datetime(2022, 6, 24, 20, 27, 1, tzinfo=datetime.timezone.utc), 'commenter': 'hkaiser', 'type': 'User'}, {'comment_id': 906386203, 'comment_body': 'Not critical, but more of a consistency issue: in HPX we generally use `typename` instead of `class` for template parameter definitions. ', 'comment_created': datetime.datetime(2022, 6, 24, 20, 28, 12, tzinfo=datetime.timezone.utc), 'commenter': 'hkaiser', 'type': 'User'}, {'comment_id': 906393349, 'comment_body': 'Apparently, we have overdone this. P2300 defines `sender_of` as:\r\n```\r\ntemplate<class S, class E = no_env, class... Ts>\r\n  concept sender_of =\r\n    sender<S, E> &&\r\n    same_as<\r\n      type-list<Ts...>,\r\n      value_types_of_t<S, E, type-list, type_identity_t>\r\n    >;\r\n```\r\nIOW, all we need to check is whether the possible arguments to `set_value()` match the given list of arguments. The confusion was caused (well, my confusion) by the fact that there are two different concepts: `sender_of` and `sender_to`. The first checks the value-types only while the second verifies that `connect()` can be called on a particular pair of a sender and a receiver:\r\n```\r\ntemplate<class S, class R>\r\n  concept sender_to =\r\n    sender<S, env_of_t<R>> &&\r\n    receiver_of<R, completion_signatures_of_t<S, env_of_t<R>>> &&\r\n    requires (S&& s, R&& r) {\r\n      execution::connect(std::forward<S>(s), std::forward<R>(r));\r\n    };\r\n```\r\n\r\nTo make the picture complete, there is a `receiver_of` concept that verifies whether a given receiver type can handle the given completion signatures:\r\n```\r\ntemplate <class T, class Completions>\r\n  concept receiver_of =\r\n    receiver<T> &&\r\n    requires (Completions* completions) {\r\n        []<valid-completion-for<T>...Sigs>(completion_signatures<Sigs...>*)\r\n        {}(completions);\r\n    };\r\n```\r\n\r\nI apologize for the confusion but it seems you will have to revisit your implementation of `is_sender_of` one more time.', 'comment_created': datetime.datetime(2022, 6, 24, 20, 37, 25, tzinfo=datetime.timezone.utc), 'commenter': 'hkaiser', 'type': 'User'}, {'comment_id': 906401860, 'comment_body': ""Hi, thanks for clarifying, I was going to do it https://github.com/STEllAR-GROUP/hpx/commit/86cca5e08514ce457bbdab472a51b728cadfa4f3 but then I thought maybe it's supposed to be this way. I could have mentioned it to you, sorry.\nLet me redo this and also think over the other comments.\nThanks "", 'comment_created': datetime.datetime(2022, 6, 24, 20, 54, 9, tzinfo=datetime.timezone.utc), 'commenter': 'SAtacker', 'type': 'User'}, {'comment_id': 906643859, 'comment_body': 'Noted, will change it.', 'comment_created': datetime.datetime(2022, 6, 25, 6, 38, 41, tzinfo=datetime.timezone.utc), 'commenter': 'SAtacker', 'type': 'User'}, {'comment_id': 906643944, 'comment_body': 'Yes, got it.', 'comment_created': datetime.datetime(2022, 6, 25, 6, 39, 38, tzinfo=datetime.timezone.utc), 'commenter': 'SAtacker', 'type': 'User'}, {'comment_id': 906644342, 'comment_body': 'It will not reach this point as `is_sender_v` will evaluate as false [ref](https://github.com/SAtacker/hpx/blob/p2300_enhancements/libs/core/execution_base/include/hpx/execution_base/completion_signatures.hpp#L654). Thus `is_sender_of` is false. ', 'comment_created': datetime.datetime(2022, 6, 25, 6, 44, 7, tzinfo=datetime.timezone.utc), 'commenter': 'SAtacker', 'type': 'User'}, {'comment_id': 906644381, 'comment_body': 'Yes, thanks. got it.', 'comment_created': datetime.datetime(2022, 6, 25, 6, 44, 36, tzinfo=datetime.timezone.utc), 'commenter': 'SAtacker', 'type': 'User'}, {'comment_id': 906644580, 'comment_body': '[This](https://github.com/SAtacker/hpx/blob/p2300_enhancements/libs/core/execution_base/include/hpx/execution_base/completion_signatures.hpp#L654) will evaluate as false', 'comment_created': datetime.datetime(2022, 6, 25, 6, 46, 48, tzinfo=datetime.timezone.utc), 'commenter': 'SAtacker', 'type': 'User'}, {'comment_id': 906644686, 'comment_body': 'Yes, thanks', 'comment_created': datetime.datetime(2022, 6, 25, 6, 47, 50, tzinfo=datetime.timezone.utc), 'commenter': 'SAtacker', 'type': 'User'}, {'comment_id': 906753155, 'comment_body': '> IOW, all we need to check is whether the possible arguments to set_value() match the given list of arguments.\r\n\r\n~~IOW, we need to check if set_value is invocable with the given list of arguments?~~', 'comment_created': datetime.datetime(2022, 6, 26, 4, 19, 39, tzinfo=datetime.timezone.utc), 'commenter': 'SAtacker', 'type': 'User'}, {'comment_id': 906753244, 'comment_body': '~~If it is invocable then it implies that the types match, is this implementation okay or I should go by with some other mechanism?~~', 'comment_created': datetime.datetime(2022, 6, 26, 4, 21, 30, tzinfo=datetime.timezone.utc), 'commenter': 'SAtacker', 'type': 'User'}]","[{'commit_sha': '86cca5e08514ce457bbdab472a51b728cadfa4f3', 'committer_username': 'SAtacker', 'committer_name': 'Shreyas Atre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 4, 16, 36, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2f2b5ed5af8d22efa684114dedb102548af58813', 'committer_username': 'SAtacker', 'committer_name': 'Shreyas Atre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 4, 16, 36, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1590b496c70884d082eb430d310c86e63d59bd35', 'committer_username': 'SAtacker', 'committer_name': 'Shreyas Atre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 4, 16, 36, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb8bcbd91e3719e8336618f9bff1207626c8a731', 'committer_username': 'SAtacker', 'committer_name': 'Shreyas Atre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 4, 16, 36, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '103c011726266731762d8dc3f4b4892fd4939008', 'committer_username': 'SAtacker', 'committer_name': 'Shreyas Atre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 4, 16, 36, 2, tzinfo=datetime.timezone.utc)}]",Shreyas Atre,61797109,,User,,59,,86,82
990784094,[P2300] Added fundamental coroutine_traits for S/R,"Signed-off-by: Shreyas Atre <shreyasatre16@gmail.com>

## Proposed Changes

  - Awaiter traits
  - Awaitable traits
  - `get_awaiter`

## Checklist

- [X] Awaiter traits tests
- [x] awaitable traits tests
- [x] get waiter tests
",True,5945,https://api.github.com/repos/STEllAR-GROUP/hpx/pulls/5945,https://github.com/STEllAR-GROUP/hpx/pull/5945,closed,593,8,9,15,13,50,3,0,"[{'name': 'type: enhancement'}, {'name': 'type: compatibility issue'}, {'name': 'category: senders/receivers'}]",2022-07-07 20:17:36+00:00,2022-07-25 14:14:27+00:00,1533411.0,"17 days, 17:56:51","[{'comment_id': 916885590, 'comment_body': 'We already have a similar facility here: https://github.com/STEllAR-GROUP/hpx/blob/84801de6a0003336287f2e4dd3da7138352c419f/libs/core/type_support/include/hpx/type_support/pack.hpp#L122-L140', 'comment_created': datetime.datetime(2022, 7, 8, 14, 42, 17, tzinfo=datetime.timezone.utc), 'commenter': 'hkaiser', 'type': 'User'}, {'comment_id': 916887855, 'comment_body': ""Please use `typename` for template parameters (for consistency's sake with the rest of the library)"", 'comment_created': datetime.datetime(2022, 7, 8, 14, 44, 57, tzinfo=datetime.timezone.utc), 'commenter': 'hkaiser', 'type': 'User'}, {'comment_id': 916888888, 'comment_body': 'Please explicitly initialize to `false` instead of default constructing. Also, could these variables be `inline constexpr`?', 'comment_created': datetime.datetime(2022, 7, 8, 14, 46, 3, tzinfo=datetime.timezone.utc), 'commenter': 'hkaiser', 'type': 'User'}, {'comment_id': 916890200, 'comment_body': 'Nitpicking: in other places we have written this as `inline constexpr bool ...`.', 'comment_created': datetime.datetime(2022, 7, 8, 14, 47, 29, tzinfo=datetime.timezone.utc), 'commenter': 'hkaiser', 'type': 'User'}, {'comment_id': 916892203, 'comment_body': 'We usually use the `_v` postfix for variables, not `_t`.', 'comment_created': datetime.datetime(2022, 7, 8, 14, 49, 38, tzinfo=datetime.timezone.utc), 'commenter': 'hkaiser', 'type': 'User'}, {'comment_id': 916894584, 'comment_body': ""Could you use `HPX_FORWARD(Awaitable, await)` instead of `(Awaitable&&) await`, please? I know, it's the same ... just for consistency's sake again."", 'comment_created': datetime.datetime(2022, 7, 8, 14, 52, 16, tzinfo=datetime.timezone.utc), 'commenter': 'hkaiser', 'type': 'User'}, {'comment_id': 916894630, 'comment_body': 'Yes, thanks', 'comment_created': datetime.datetime(2022, 7, 8, 14, 52, 20, tzinfo=datetime.timezone.utc), 'commenter': 'SAtacker', 'type': 'User'}, {'comment_id': 916895947, 'comment_body': 'Okay, noted', 'comment_created': datetime.datetime(2022, 7, 8, 14, 53, 48, tzinfo=datetime.timezone.utc), 'commenter': 'SAtacker', 'type': 'User'}, {'comment_id': 916896454, 'comment_body': ""the `void` is not needed (it's the default for `enable_if`)"", 'comment_created': datetime.datetime(2022, 7, 8, 14, 54, 23, tzinfo=datetime.timezone.utc), 'commenter': 'hkaiser', 'type': 'User'}, {'comment_id': 916896725, 'comment_body': 'Yes, I think these should be `inline constexpr`. I shall make the change', 'comment_created': datetime.datetime(2022, 7, 8, 14, 54, 43, tzinfo=datetime.timezone.utc), 'commenter': 'SAtacker', 'type': 'User'}, {'comment_id': 916897693, 'comment_body': 'Right, oops. Need to be careful with these. Especially the template/class, sorry for making you remind me.', 'comment_created': datetime.datetime(2022, 7, 8, 14, 55, 46, tzinfo=datetime.timezone.utc), 'commenter': 'SAtacker', 'type': 'User'}, {'comment_id': 916914351, 'comment_body': 'Yes, definitely, I have seen `HPX_FORWARD` but was not sure if it did the same. Great!', 'comment_created': datetime.datetime(2022, 7, 8, 15, 14, 43, tzinfo=datetime.timezone.utc), 'commenter': 'SAtacker', 'type': 'User'}, {'comment_id': 916914755, 'comment_body': 'Noted', 'comment_created': datetime.datetime(2022, 7, 8, 15, 15, 14, tzinfo=datetime.timezone.utc), 'commenter': 'SAtacker', 'type': 'User'}, {'comment_id': 917375778, 'comment_body': ""I think it's different\r\none_of is true if any one of the `Ts` matches with the given `T`. `any_of` only checks whether `is_false<Ts>` right?\r\nContext HPX\r\n```\r\nutil::any_of<is_one_way_executor<T>,\r\n            is_never_blocking_one_way_executor<T>, is_bulk_one_way_executor<T>,\r\n            is_two_way_executor<T>, is_bulk_two_way_executor<T>>\r\n```\r\nWhere as I want to check if `is_same<int,bool,void>` (false) `is_same<bool, bool,void>` (true) `is_same<void, bool, void>` (true) ..."", 'comment_created': datetime.datetime(2022, 7, 10, 10, 40, 51, tzinfo=datetime.timezone.utc), 'commenter': 'SAtacker', 'type': 'User'}, {'comment_id': 922850373, 'comment_body': 'FWIW, there also is `is_any_executor<T>` that resolves to true if any of the above conditions are true.', 'comment_created': datetime.datetime(2022, 7, 17, 15, 30, 6, tzinfo=datetime.timezone.utc), 'commenter': 'hkaiser', 'type': 'User'}, {'comment_id': 922851387, 'comment_body': 'I think all of this file should be wrapped into a \r\n```\r\n#include <hpx/config.hpp>\r\n\r\n#if defined(HPX_HAVE_CXX20_COROUTINES)\r\n...\r\n#endif\r\n```', 'comment_created': datetime.datetime(2022, 7, 17, 15, 38, 44, tzinfo=datetime.timezone.utc), 'commenter': 'hkaiser', 'type': 'User'}, {'comment_id': 922851711, 'comment_body': 'This should be added to the tests only if `HPX_WITH_CXX20_COROUTINES` is On. E.g. somethig like:\r\n```suggestion\r\n)\r\nif(HPX_WITH_CXX20_COROUTINES)\r\n  set(tests ${tests} coroutine_traits)\r\nendif()\r\n```', 'comment_created': datetime.datetime(2022, 7, 17, 15, 41, 20, tzinfo=datetime.timezone.utc), 'commenter': 'hkaiser', 'type': 'User'}, {'comment_id': 922851770, 'comment_body': 'Please use `#include <...>` for including HPX headers.', 'comment_created': datetime.datetime(2022, 7, 17, 15, 41, 48, tzinfo=datetime.timezone.utc), 'commenter': 'hkaiser', 'type': 'User'}, {'comment_id': 922853593, 'comment_body': ""I have tried `HPX_HAVE_CXX20_COROUTINES` but it doesn't seem to work. All config being unchanged now suddenly it found no target `coroutine_traits_test`"", 'comment_created': datetime.datetime(2022, 7, 17, 15, 57, 13, tzinfo=datetime.timezone.utc), 'commenter': 'SAtacker', 'type': 'User'}, {'comment_id': 922853704, 'comment_body': ""I had experimented with it but it didn't work. I have coroutines support yet, `HPX_HAVE_CXX20_COROUTINES` is not defined."", 'comment_created': datetime.datetime(2022, 7, 17, 15, 58, 4, tzinfo=datetime.timezone.utc), 'commenter': 'SAtacker', 'type': 'User'}, {'comment_id': 922854246, 'comment_body': 'I tried to find `is_any_executor` but could not.', 'comment_created': datetime.datetime(2022, 7, 17, 16, 2, 35, tzinfo=datetime.timezone.utc), 'commenter': 'SAtacker', 'type': 'User'}, {'comment_id': 922859963, 'comment_body': '```\r\n-- Performing Test HPX_WITH_CXX20_COROUTINES - Failed\r\n-- Performing Test HPX_WITH_CXX20_EXPERIMENTAL_SIMD - Failed\r\n-- Performing Test HPX_WITH_CXX20_LAMBDA_CAPTURE - Success\r\n```', 'comment_created': datetime.datetime(2022, 7, 17, 16, 11, 43, tzinfo=datetime.timezone.utc), 'commenter': 'SAtacker', 'type': 'User'}, {'comment_id': 922860797, 'comment_body': 'I have loaded the module llvm/12.0.1', 'comment_created': datetime.datetime(2022, 7, 17, 16, 18, 46, tzinfo=datetime.timezone.utc), 'commenter': 'SAtacker', 'type': 'User'}, {'comment_id': 922860892, 'comment_body': '```\r\n[satacker@medusa01 build]$ git diff\r\ndiff --git a/cmake/tests/cxx20_coroutines.cpp b/cmake/tests/cxx20_coroutines.cpp\r\nindex bba9190fac..460dee3609 100644\r\n--- a/cmake/tests/cxx20_coroutines.cpp\r\n+++ b/cmake/tests/cxx20_coroutines.cpp\r\n@@ -5,7 +5,13 @@\r\n //  file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)\r\n \r\n // This tests whether C++20 coroutines are supported\r\n+#if __has_include(<coroutine>)\r\n #include <coroutine>\r\n+namespace coro = std;\r\n+#else\r\n+#include <experimental/coroutine>\r\n+namespace coro = std::experimental;\r\n+#endif\r\n \r\n struct resumable\r\n {\r\n@@ -19,12 +25,12 @@ struct resumable\r\n             return {};\r\n         }\r\n \r\n-        std::suspend_never initial_suspend() const noexcept\r\n+        coro::suspend_never initial_suspend() const noexcept\r\n         {\r\n             return {};\r\n         }\r\n \r\n-        std::suspend_never final_suspend() const noexcept\r\n+        coro::suspend_never final_suspend() const noexcept\r\n         {\r\n             return {};\r\n         }\r\n@@ -41,7 +47,7 @@ struct resumable\r\n     {\r\n         return 42;\r\n     }\r\n-    void await_suspend(std::coroutine_handle<promise_type>) const noexcept {}\r\n+    void await_suspend(coro::coroutine_handle<promise_type>) const noexcept {}\r\n };\r\n \r\n resumable test()\r\n```\r\nMade it work', 'comment_created': datetime.datetime(2022, 7, 17, 16, 19, 41, tzinfo=datetime.timezone.utc), 'commenter': 'SAtacker', 'type': 'User'}, {'comment_id': 922882991, 'comment_body': ""Sorry, it's `hpx::traits::is_executor_any<T>`."", 'comment_created': datetime.datetime(2022, 7, 17, 19, 3, 49, tzinfo=datetime.timezone.utc), 'commenter': 'hkaiser', 'type': 'User'}, {'comment_id': 922883300, 'comment_body': 'This has issues if the `coro` is `std::experimental`, any suggestions?', 'comment_created': datetime.datetime(2022, 7, 17, 19, 7, 11, tzinfo=datetime.timezone.utc), 'commenter': 'SAtacker', 'type': 'User'}, {'comment_id': 922883307, 'comment_body': ""You might want to make this safer by saying:\r\n```\r\n#if defined(__has_include)\r\n#if __has_include(<coroutine>)\r\n...\r\n#endif\r\n#endif\r\n```\r\nas some older compilers don't support `__has_include()`\r\n"", 'comment_created': datetime.datetime(2022, 7, 17, 19, 7, 20, tzinfo=datetime.timezone.utc), 'commenter': 'hkaiser', 'type': 'User'}, {'comment_id': 922883436, 'comment_body': 'Note, we generally use `HPX_WITH_XXX` during configuration time and a corresponding `HPX_HAVE_XXX` as preprocessor constants to be used during compilation.', 'comment_created': datetime.datetime(2022, 7, 17, 19, 8, 38, tzinfo=datetime.timezone.utc), 'commenter': 'hkaiser', 'type': 'User'}, {'comment_id': 922883524, 'comment_body': 'What issues?', 'comment_created': datetime.datetime(2022, 7, 17, 19, 9, 15, tzinfo=datetime.timezone.utc), 'commenter': 'hkaiser', 'type': 'User'}, {'comment_id': 922883740, 'comment_body': 'https://github.com/STEllAR-GROUP/hpx/pull/5945/commits/c8090feefb12261d618a345e9d7302f03acf7584 fixed it for llvm/12.0.1 module', 'comment_created': datetime.datetime(2022, 7, 17, 19, 10, 31, tzinfo=datetime.timezone.utc), 'commenter': 'SAtacker', 'type': 'User'}, {'comment_id': 922884039, 'comment_body': 'https://pastebin.com/2hmJjAEU @hkaiser ', 'comment_created': datetime.datetime(2022, 7, 17, 19, 13, 52, tzinfo=datetime.timezone.utc), 'commenter': 'SAtacker', 'type': 'User'}, {'comment_id': 922884228, 'comment_body': ""I'd suggest aliasing the namespaces to `namespace hpx::coro` to avoid name clashes for users. E.g. something like:\r\n```suggestion\r\n#if __has_include(<coroutine>)\r\n#include <coroutine>\r\nnamespace hpx {\r\n    namespace coro = std;\r\n}\r\n#else\r\n#include <experimental/coroutine>\r\nnamespace hpx {\r\n    namespace coro = std::experimental;\r\n}\r\n#endif\r\n```\r\nor even better import the necessary names into `hpx::coro` instead of aliasing the whole namespace `std`. This should also go into a separate header file to avoid duplicating the declarations "", 'comment_created': datetime.datetime(2022, 7, 17, 19, 15, 42, tzinfo=datetime.timezone.utc), 'commenter': 'hkaiser', 'type': 'User'}, {'comment_id': 922884488, 'comment_body': 'Thanks :+1: ', 'comment_created': datetime.datetime(2022, 7, 17, 19, 18, 23, tzinfo=datetime.timezone.utc), 'commenter': 'SAtacker', 'type': 'User'}, {'comment_id': 922885411, 'comment_body': 'We currently specialize `coroutine_traits` in `namespace std` (here: https://github.com/STEllAR-GROUP/hpx/blob/master/libs/core/futures/include/hpx/futures/traits/detail/future_await_traits.hpp#L197). If you add support for coroutines that are in `std::experimental`, this specialization will need to go into that namespace as well. ', 'comment_created': datetime.datetime(2022, 7, 17, 19, 25, 54, tzinfo=datetime.timezone.utc), 'commenter': 'hkaiser', 'type': 'User'}, {'comment_id': 922885743, 'comment_body': ""What I meant is that you need to explicitly say what 'original' namespace the coroutine_traits base template is defined:\r\n```\r\nnamespace HPX_CORO_NAMESPACE {\r\n...\r\n}\r\n```\r\nwhere `HPX_CORO_NAMESPACE` is either `std` or `std::experimental`."", 'comment_created': datetime.datetime(2022, 7, 17, 19, 29, 7, tzinfo=datetime.timezone.utc), 'commenter': 'hkaiser', 'type': 'User'}, {'comment_id': 926040290, 'comment_body': 'This #ifdef is not needed anymore.', 'comment_created': datetime.datetime(2022, 7, 20, 20, 46, 39, tzinfo=datetime.timezone.utc), 'commenter': 'hkaiser', 'type': 'User'}, {'comment_id': 926040681, 'comment_body': 'Nitpick: we usually place the `#pragma once` first in the file.', 'comment_created': datetime.datetime(2022, 7, 20, 20, 47, 10, tzinfo=datetime.timezone.utc), 'commenter': 'hkaiser', 'type': 'User'}, {'comment_id': 926041686, 'comment_body': 'This change would simplify things:\r\n```suggestion\r\n#include <hpx/config.hpp>\r\n```', 'comment_created': datetime.datetime(2022, 7, 20, 20, 48, 34, tzinfo=datetime.timezone.utc), 'commenter': 'hkaiser', 'type': 'User'}, {'comment_id': 926042013, 'comment_body': '```suggestion\r\n#if defined(HPX_HAVE_CXX20_COROUTINES)\r\n\r\n#include <hpx/concepts/has_member_xxx.hpp>\r\n#include <type_traits>\r\n```', 'comment_created': datetime.datetime(2022, 7, 20, 20, 49, 1, tzinfo=datetime.timezone.utc), 'commenter': 'hkaiser', 'type': 'User'}, {'comment_id': 926042936, 'comment_body': ""Should this be\r\n```suggestion\r\n    else\r\n    {\r\n        return;\r\n    }\r\n```\r\n? IOW, what's the return type if `std::is_same_v<Promise, void>`?"", 'comment_created': datetime.datetime(2022, 7, 20, 20, 50, 15, tzinfo=datetime.timezone.utc), 'commenter': 'hkaiser', 'type': 'User'}, {'comment_id': 926044805, 'comment_body': '```suggestion\r\n            return HPX_FORWARD(Awaitable, await).operator co_await();\r\n```', 'comment_created': datetime.datetime(2022, 7, 20, 20, 52, 57, tzinfo=datetime.timezone.utc), 'commenter': 'hkaiser', 'type': 'User'}, {'comment_id': 926045519, 'comment_body': 'This misses an EOL character.', 'comment_created': datetime.datetime(2022, 7, 20, 20, 54, 3, tzinfo=datetime.timezone.utc), 'commenter': 'hkaiser', 'type': 'User'}, {'comment_id': 926045753, 'comment_body': 'This misses an EOL character.', 'comment_created': datetime.datetime(2022, 7, 20, 20, 54, 21, tzinfo=datetime.timezone.utc), 'commenter': 'hkaiser', 'type': 'User'}, {'comment_id': 926047099, 'comment_body': 'Does this file miss a `#include <hpx/config/coroutines_support.hpp>`?', 'comment_created': datetime.datetime(2022, 7, 20, 20, 56, 4, tzinfo=datetime.timezone.utc), 'commenter': 'hkaiser', 'type': 'User'}, {'comment_id': 926067387, 'comment_body': 'It has https://github.com/STEllAR-GROUP/hpx/blob/ce7b0096f7a9354dfb1f6219ec5d2ecd9b8b76da/libs/core/futures/include/hpx/futures/traits/detail/future_await_traits.hpp#L9', 'comment_created': datetime.datetime(2022, 7, 20, 21, 24, 57, tzinfo=datetime.timezone.utc), 'commenter': 'SAtacker', 'type': 'User'}, {'comment_id': 926069093, 'comment_body': 'It should be void', 'comment_created': datetime.datetime(2022, 7, 20, 21, 27, 26, tzinfo=datetime.timezone.utc), 'commenter': 'SAtacker', 'type': 'User'}, {'comment_id': 926085335, 'comment_body': ""> It should be void\r\n\r\nIn this case I'm surprised it compiles as is. Or does `await.await_suspend(hpx::coro::coroutine_handle<Promise>{});` always return `void` as well?"", 'comment_created': datetime.datetime(2022, 7, 20, 21, 53, 58, tzinfo=datetime.timezone.utc), 'commenter': 'hkaiser', 'type': 'User'}, {'comment_id': 926086364, 'comment_body': 'Yes, I know. We always try to make every file self-contained in terms of the `#include`s it requires. Otherwise removing `#include <hpx/config.hpp>` from the other file (for whatever reason) may break the compilation of this file.', 'comment_created': datetime.datetime(2022, 7, 20, 21, 55, 46, tzinfo=datetime.timezone.utc), 'commenter': 'hkaiser', 'type': 'User'}, {'comment_id': 926372344, 'comment_body': 'Thanks, this should have some tests. Also, await_suspend should always accept a coroutine handle --> [p1288](https://www.open-std.org/JTC1/SC22/wg21/docs/papers/2018/p1288r0.pdf) page 6', 'comment_created': datetime.datetime(2022, 7, 21, 7, 59, 5, tzinfo=datetime.timezone.utc), 'commenter': 'SAtacker', 'type': 'User'}, {'comment_id': 926955533, 'comment_body': 'Since `await_suspend` should either return `void` or `bool`, this code needs more attention. In the case that `await_suspend` returns a `bool` this will not compile as is (the different return paths would return different types). Thus the patch I suggested will be necessary.', 'comment_created': datetime.datetime(2022, 7, 21, 17, 51, 20, tzinfo=datetime.timezone.utc), 'commenter': 'hkaiser', 'type': 'User'}]","[{'commit_sha': '691494680e76de1662e5d165b70a257c6dfe7916', 'committer_username': 'SAtacker', 'committer_name': 'Shreyas Atre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 4, 16, 36, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b0a893993d78b29574dc93e3c56a6d69a3e8525', 'committer_username': 'SAtacker', 'committer_name': 'Shreyas Atre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 4, 16, 36, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a836e9a338e2131ba00a8eec3205401771bd8b70', 'committer_username': 'SAtacker', 'committer_name': 'Shreyas Atre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 4, 16, 36, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0ebcb5160d2890d73136032788a1ee2fca25634', 'committer_username': 'SAtacker', 'committer_name': 'Shreyas Atre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 4, 16, 36, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c80289ed448438efe9e6d25ed059417fad3f0d4', 'committer_username': 'SAtacker', 'committer_name': 'Shreyas Atre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 4, 16, 36, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5fc191f84b0141f0bb0d39a81cbb2fb3e7035c41', 'committer_username': 'SAtacker', 'committer_name': 'Shreyas Atre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 4, 16, 36, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8090feefb12261d618a345e9d7302f03acf7584', 'committer_username': 'SAtacker', 'committer_name': 'Shreyas Atre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 4, 16, 36, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '019767758f5560bb786992c92a23499024eebcad', 'committer_username': 'SAtacker', 'committer_name': 'Shreyas Atre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 4, 16, 36, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa09f2072216df73a1fe11b5ad65a1ce6a13807b', 'committer_username': 'SAtacker', 'committer_name': 'Shreyas Atre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 4, 16, 36, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e63d9348ad7efa8732df211b8e8fd9ac0278fab', 'committer_username': 'SAtacker', 'committer_name': 'Shreyas Atre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 4, 16, 36, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce7b0096f7a9354dfb1f6219ec5d2ecd9b8b76da', 'committer_username': 'SAtacker', 'committer_name': 'Shreyas Atre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 4, 16, 36, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd790b03d3cb40de2125d56fd81cdbdcf4951787a', 'committer_username': 'SAtacker', 'committer_name': 'Shreyas Atre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 4, 16, 36, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '246dfd9ca23c72cd0576400b9643946c985744f6', 'committer_username': 'SAtacker', 'committer_name': 'Shreyas Atre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 4, 16, 36, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c2117dd8ff45eb040fe6e639a775b229a58be703', 'committer_username': 'SAtacker', 'committer_name': 'Shreyas Atre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 4, 16, 36, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '842b859044ee4ee50f00f411e63ba72de984d6bd', 'committer_username': 'SAtacker', 'committer_name': 'Shreyas Atre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 4, 16, 36, 2, tzinfo=datetime.timezone.utc)}]",Shreyas Atre,61797109,,User,,59,,86,82
1038970910,P2300 enhancements,"Fixes #5838 

## Proposed Changes

  - Adapt `get_completion_signatures` when Sender is a `awaitable`
  - `as_awaitable_t` with `receiver_base`, `sender_awaitable_base`
  - `promise_base`, `operation_base`
  - `connect_awaitable` to adapt connect mentioned in [spec](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2300r5.html#spec-execution.senders.connect) 2.2
  - `with_awaitable_senders`

## Any background context you want to provide?

- Utility `as_awaitable_t` to transform an object into one that is awaitable within a particular coroutine.
- Utility `with_awaitable_senders` used as the base class of a coroutine promise type, makes senders awaitable in that coroutine type

## Checklist

- [x] I have added a new feature and have added tests to go along with it.
",True,5990,https://api.github.com/repos/STEllAR-GROUP/hpx/pulls/5990,https://github.com/STEllAR-GROUP/hpx/pull/5990,closed,1354,9,10,40,10,23,3,0,"[{'name': 'type: enhancement'}, {'name': 'type: compatibility issue'}, {'name': 'category: senders/receivers'}]",2022-08-28 21:46:59+00:00,2022-10-27 16:15:18+00:00,5164099.0,"59 days, 18:28:19","[{'comment_id': 993437346, 'comment_body': 'Should this go into the meta module here: https://github.com/STEllAR-GROUP/hpx/blob/master/libs/core/type_support/include/hpx/type_support/meta.hpp?', 'comment_created': datetime.datetime(2022, 10, 12, 13, 6, 21, tzinfo=datetime.timezone.utc), 'commenter': 'hkaiser', 'type': 'User'}, {'comment_id': 993437947, 'comment_body': 'Same here, should this go into the `meta` header?', 'comment_created': datetime.datetime(2022, 10, 12, 13, 6, 56, tzinfo=datetime.timezone.utc), 'commenter': 'hkaiser', 'type': 'User'}, {'comment_id': 993440986, 'comment_body': '```suggestion\r\n            constexpr bool await_ready() const noexcept\r\n```', 'comment_created': datetime.datetime(2022, 10, 12, 13, 9, 42, tzinfo=datetime.timezone.utc), 'commenter': 'hkaiser', 'type': 'User'}, {'comment_id': 993446643, 'comment_body': 'What purpose does the `HPX_FORWARD` serve here? Could `Value` ever be a rvalue reference? If you wanted to make sure the value from `std::get<1>(result)` was moved out, you would have to write `HPX_MOVE(std::get<1>(result))` instead.', 'comment_created': datetime.datetime(2022, 10, 12, 13, 14, 45, tzinfo=datetime.timezone.utc), 'commenter': 'hkaiser', 'type': 'User'}, {'comment_id': 993450362, 'comment_body': 'Would you mind not naming this `expected_t`, just to avoid confusion with `std::expected` from C++23.', 'comment_created': datetime.datetime(2022, 10, 12, 13, 17, 59, tzinfo=datetime.timezone.utc), 'commenter': 'hkaiser', 'type': 'User'}, {'comment_id': 993504004, 'comment_body': ""```suggestion\r\n                        // coroutine's stopped handler.\r\n```"", 'comment_created': datetime.datetime(2022, 10, 12, 13, 59, 5, tzinfo=datetime.timezone.utc), 'commenter': 'hkaiser', 'type': 'User'}, {'comment_id': 993505442, 'comment_body': 'Do we actually need to call `std::terminate`?', 'comment_created': datetime.datetime(2022, 10, 12, 14, 0, 11, tzinfo=datetime.timezone.utc), 'commenter': 'hkaiser', 'type': 'User'}, {'comment_id': 993506376, 'comment_body': '```suggestion\r\n    inline constexpr bool is_derived_from_v = std::is_base_of_v<B, A>&&\r\n```', 'comment_created': datetime.datetime(2022, 10, 12, 14, 0, 57, tzinfo=datetime.timezone.utc), 'commenter': 'hkaiser', 'type': 'User'}, {'comment_id': 993507249, 'comment_body': '```suggestion\r\n        constexpr hpx::coro::suspend_always initial_suspend() noexcept\r\n```', 'comment_created': datetime.datetime(2022, 10, 12, 14, 1, 35, tzinfo=datetime.timezone.utc), 'commenter': 'hkaiser', 'type': 'User'}, {'comment_id': 993510073, 'comment_body': 'Can this be removed?', 'comment_created': datetime.datetime(2022, 10, 12, 14, 3, 31, tzinfo=datetime.timezone.utc), 'commenter': 'hkaiser', 'type': 'User'}, {'comment_id': 993510767, 'comment_body': '```suggestion\r\n                return hpx::functional::tag_invoke(\r\n```', 'comment_created': datetime.datetime(2022, 10, 12, 14, 4, 3, tzinfo=datetime.timezone.utc), 'commenter': 'hkaiser', 'type': 'User'}, {'comment_id': 993635310, 'comment_body': 'Or should it even be: \r\n```suggestion\r\n                return as_awaitable(HPX_FORWARD(Awaitable, await), *this);\r\n```', 'comment_created': datetime.datetime(2022, 10, 12, 15, 48, 32, tzinfo=datetime.timezone.utc), 'commenter': 'hkaiser', 'type': 'User'}, {'comment_id': 993643162, 'comment_body': '```suggestion\r\n#include <hpx/config.hpp>\r\n\r\n#if defined(HPX_HAVE_CXX20_COROUTINES)\r\n#include <hpx/assert.hpp>\r\n#include <hpx/datastructures/variant.hpp>\r\n#include <hpx/execution_base/completion_signatures.hpp>\r\n#include <hpx/execution_base/get_env.hpp>\r\n#include <hpx/execution_base/traits/coroutine_traits.hpp>\r\n#include <hpx/functional/detail/tag_fallback_invoke.hpp>\r\n#include <hpx/type_support/meta.hpp>\r\n\r\n#include <exception>\r\n#include <system_error>\r\n#include <utility>\r\n\r\n```', 'comment_created': datetime.datetime(2022, 10, 12, 15, 54, 15, tzinfo=datetime.timezone.utc), 'commenter': 'hkaiser', 'type': 'User'}, {'comment_id': 994583955, 'comment_body': 'Alright', 'comment_created': datetime.datetime(2022, 10, 13, 12, 33, 39, tzinfo=datetime.timezone.utc), 'commenter': 'SAtacker', 'type': 'User'}, {'comment_id': 994599572, 'comment_body': 'yes, thanks', 'comment_created': datetime.datetime(2022, 10, 13, 12, 48, 36, tzinfo=datetime.timezone.utc), 'commenter': 'SAtacker', 'type': 'User'}, {'comment_id': 994638930, 'comment_body': 'Can the `result` hold an `rvalue` type?', 'comment_created': datetime.datetime(2022, 10, 13, 13, 22, 30, tzinfo=datetime.timezone.utc), 'commenter': 'SAtacker', 'type': 'User'}, {'comment_id': 994641377, 'comment_body': 'Does `coroutine_expected_result_t` sound better?', 'comment_created': datetime.datetime(2022, 10, 13, 13, 24, 31, tzinfo=datetime.timezone.utc), 'commenter': 'SAtacker', 'type': 'User'}, {'comment_id': 994652890, 'comment_body': ""That's what the standard implementation is doing. Their reasoning convinced me - [ref](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2300r5.html#design-native-coro-unwind)"", 'comment_created': datetime.datetime(2022, 10, 13, 13, 33, 52, tzinfo=datetime.timezone.utc), 'commenter': 'SAtacker', 'type': 'User'}, {'comment_id': 994654814, 'comment_body': 'But for HPX, I think we can call something other than std::terminate as we even launch our own main function.', 'comment_created': datetime.datetime(2022, 10, 13, 13, 35, 29, tzinfo=datetime.timezone.utc), 'commenter': 'SAtacker', 'type': 'User'}, {'comment_id': 994655643, 'comment_body': 'Yes, sorry.', 'comment_created': datetime.datetime(2022, 10, 13, 13, 36, 12, tzinfo=datetime.timezone.utc), 'commenter': 'SAtacker', 'type': 'User'}, {'comment_id': 995910621, 'comment_body': 'Understood, the latter one seems best suited.', 'comment_created': datetime.datetime(2022, 10, 14, 15, 56, 40, tzinfo=datetime.timezone.utc), 'commenter': 'SAtacker', 'type': 'User'}, {'comment_id': 995914796, 'comment_body': 'Yes, thanks', 'comment_created': datetime.datetime(2022, 10, 14, 16, 1, 27, tzinfo=datetime.timezone.utc), 'commenter': 'SAtacker', 'type': 'User'}, {'comment_id': 998259287, 'comment_body': 'Codacy is complaining about this type having private data members but no constructors. I know that this is a false positive and I have tried to convince it to ignore the issue. Could you please add a \r\n```\r\n    with_awaitable_senders_base() = default;\r\n```\r\nto this class to silence the warning?', 'comment_created': datetime.datetime(2022, 10, 18, 13, 48, 48, tzinfo=datetime.timezone.utc), 'commenter': 'hkaiser', 'type': 'User'}]","[{'commit_sha': 'c4f7aa19351ee24f24f501fb52532badb98fd310', 'committer_username': 'SAtacker', 'committer_name': 'Shreyas Atre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 4, 16, 36, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dee3df4d0110377babca191880fc89057010754d', 'committer_username': 'SAtacker', 'committer_name': 'Shreyas Atre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 4, 16, 36, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '54e5eddba0eae9f189aac24cd29e2d39e5a85ea1', 'committer_username': 'SAtacker', 'committer_name': 'Shreyas Atre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 4, 16, 36, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99c46d105d42057b88c3cebf56df97f3f93f4561', 'committer_username': 'SAtacker', 'committer_name': 'Shreyas Atre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 4, 16, 36, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f707536b3ad3c77fae397255ea3704a36ecb75b', 'committer_username': 'SAtacker', 'committer_name': 'Shreyas Atre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 4, 16, 36, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c309e533a0b003865851b5032921bd86e25aaa4a', 'committer_username': 'SAtacker', 'committer_name': 'Shreyas Atre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 4, 16, 36, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de4fb42d53f96b65fdfc6b6e430eeb217fb9cc08', 'committer_username': 'SAtacker', 'committer_name': 'Shreyas Atre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 4, 16, 36, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc077e543f6c04a4d8d3a3e8731fb90bb6ae09ee', 'committer_username': 'SAtacker', 'committer_name': 'Shreyas Atre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 4, 16, 36, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c5ec6b56993adb4b2c705c1d520ca7b17c8b8dde', 'committer_username': 'SAtacker', 'committer_name': 'Shreyas Atre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 4, 16, 36, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '65f89b49cec722a4a8998f8e6a998c6883449e66', 'committer_username': 'SAtacker', 'committer_name': 'Shreyas Atre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 4, 16, 36, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9fe68baebfd6211d9a840b2cb7385b203c1b3597', 'committer_username': 'SAtacker', 'committer_name': 'Shreyas Atre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 4, 16, 36, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd73ce0d5d42befa2ef1a9297492149162de8454b', 'committer_username': 'SAtacker', 'committer_name': 'Shreyas Atre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 4, 16, 36, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dcc9d9ae4c51669e1e032b47a452c14e8fc11344', 'committer_username': 'SAtacker', 'committer_name': 'Shreyas Atre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 4, 16, 36, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '92b8b28b4694e5a004455b0ea9266034dade8ce7', 'committer_username': 'SAtacker', 'committer_name': 'Shreyas Atre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 4, 16, 36, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90b6e45823572cb18bb5ecf8b943dac682129f8b', 'committer_username': 'SAtacker', 'committer_name': 'Shreyas Atre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 4, 16, 36, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e8f191383a285b4c5d5496a713a8e63d39ab8313', 'committer_username': 'SAtacker', 'committer_name': 'Shreyas Atre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 4, 16, 36, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5100f778e49ed5958b0b0065942dc51caf3e803f', 'committer_username': 'SAtacker', 'committer_name': 'Shreyas Atre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 4, 16, 36, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88060f9e882962579f73cb81cc7663eeab502d6f', 'committer_username': 'SAtacker', 'committer_name': 'Shreyas Atre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 4, 16, 36, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ff0377236e6adea881d8d7f541b9343056ccf2d', 'committer_username': 'SAtacker', 'committer_name': 'Shreyas Atre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 4, 16, 36, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '337f39cded507eeff3a47ff3654982a7f6aa65cc', 'committer_username': 'SAtacker', 'committer_name': 'Shreyas Atre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 4, 16, 36, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec6d137a1c1b1783ba88cbc7b682ff0306b7fd46', 'committer_username': 'SAtacker', 'committer_name': 'Shreyas Atre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 4, 16, 36, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e0be0eaf8b9e8825bf136e02ed1d5c83360bc3f', 'committer_username': 'SAtacker', 'committer_name': 'Shreyas Atre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 4, 16, 36, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc8827509902d4e17bd89758758847627befc823', 'committer_username': 'SAtacker', 'committer_name': 'Shreyas Atre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 4, 16, 36, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '331d8ce9f7104791487bd3a8bda6e1813d4fa931', 'committer_username': 'SAtacker', 'committer_name': 'Shreyas Atre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 4, 16, 36, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e5b5cf4e6c9f9be19a3fd4ad0ab7a6201cf1bc83', 'committer_username': 'SAtacker', 'committer_name': 'Shreyas Atre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 4, 16, 36, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25a32baeb710ac4f683db0cb604036a7c40093d2', 'committer_username': 'SAtacker', 'committer_name': 'Shreyas Atre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 4, 16, 36, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d9eadeda8e32b8a67f2ea0f726cc0853fb128f3', 'committer_username': 'SAtacker', 'committer_name': 'Shreyas Atre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 4, 16, 36, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '21e243f6eafa008762fb2acb060f98d24deb634a', 'committer_username': 'SAtacker', 'committer_name': 'Shreyas Atre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 4, 16, 36, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c41518f41bc0ad8f29d661b385aa2480d65b2518', 'committer_username': 'SAtacker', 'committer_name': 'Shreyas Atre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 4, 16, 36, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b3a17dbe4de13332483ff3cb7972b2b4eb4a1c2', 'committer_username': 'SAtacker', 'committer_name': 'Shreyas Atre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 4, 16, 36, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'adfe93cfa887b7af86fcec0e901a98a23c29ad71', 'committer_username': 'SAtacker', 'committer_name': 'Shreyas Atre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 4, 16, 36, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8320d000065ebb41b6870419b141c1de448a94c9', 'committer_username': 'SAtacker', 'committer_name': 'Shreyas Atre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 4, 16, 36, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2af3c53ae4130f91ff236fbb1f1b54562d21c7bf', 'committer_username': 'SAtacker', 'committer_name': 'Shreyas Atre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 4, 16, 36, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66fc3c0d93b2b128a12196e5431d79783bd62b9a', 'committer_username': 'SAtacker', 'committer_name': 'Shreyas Atre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 4, 16, 36, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b06440e5cd1f2fb777ab48508114aec4c799cac9', 'committer_username': 'SAtacker', 'committer_name': 'Shreyas Atre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 4, 16, 36, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2684c915a52dca1a4677c9559fd78c51f52b5585', 'committer_username': 'SAtacker', 'committer_name': 'Shreyas Atre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 4, 16, 36, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22ec7f2bff4a7bb10d49080464872a6a616d6be6', 'committer_username': 'SAtacker', 'committer_name': 'Shreyas Atre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 4, 16, 36, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '593b79e60aa070378e0ef817560e48432a1434ae', 'committer_username': 'SAtacker', 'committer_name': 'Shreyas Atre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 4, 16, 36, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd4dd522f28141557961f26f657f68fa92afc8b7', 'committer_username': 'SAtacker', 'committer_name': 'Shreyas Atre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 4, 16, 36, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c3f76e20713c6610aba50018d6c5125ce69a329', 'committer_username': 'hkaiser', 'committer_name': 'Hartmut Kaiser', 'committer_email': None, 'commit_date': datetime.datetime(2011, 1, 17, 0, 45, 44, tzinfo=datetime.timezone.utc)}]",Shreyas Atre,61797109,,User,,59,,86,82
1049312524,[awaitables] fix: get_completion_signatures to test for await-ability with a promise type.,"fixes: https://github.com/brycelelbach/wg21_p2300_std_execution/issues/598

Assumptions: 
1. Used Promise type and Environment analogously  

Questions:
1. If the above assumptions are false as there may or may not be a state associated with the promise type, what should be a better approach?

TODO:
1. Change std_execution.bs

Signed-off-by: Shreyas Atre <shreyasatre16@gmail.com>

",True,602,https://api.github.com/repos/NVIDIA/stdexec/pulls/602,https://github.com/NVIDIA/stdexec/pull/602,closed,152,4,3,6,0,9,0,0,[],2022-09-07 23:17:15+00:00,2022-09-30 00:26:48+00:00,1904973.0,"22 days, 1:09:33","[{'comment_id': 967506943, 'comment_body': ""I think we want awaitables to satisfy the `__sender` concept checks here. We shouldn't need an extra test for awaitables if `get_completion_signatures` is doing the right thing."", 'comment_created': datetime.datetime(2022, 9, 9, 21, 54, 50, tzinfo=datetime.timezone.utc), 'commenter': 'ericniebler', 'type': 'User'}, {'comment_id': 967507226, 'comment_body': ""I'm curious why this is needed. What happens if you pass `no_env` to the `__awaitable` concept?"", 'comment_created': datetime.datetime(2022, 9, 9, 21, 55, 28, tzinfo=datetime.timezone.utc), 'commenter': 'ericniebler', 'type': 'User'}, {'comment_id': 967662339, 'comment_body': 'Because `__sender` concepts validates the `completion_signatures` using the following \r\nhttps://github.com/brycelelbach/wg21_p2300_std_execution/blob/2aaf6eb131a1d04c0b3e0dc00f2ce3b960477da1/include/execution.hpp#L298-L304\r\nWe can see that for all the awaitables `no_env` and a specific environment would give different completion_signatures`\r\n', 'comment_created': datetime.datetime(2022, 9, 10, 14, 43, 9, tzinfo=datetime.timezone.utc), 'commenter': 'SAtacker', 'type': 'User'}, {'comment_id': 967663654, 'comment_body': ""I guessed that `__awaitable<Sender, Env>` would be specific to that Env, if it is no_env then the promise type is void. If a `no_env` is used for this concept, then it wouldn't satisfy as `await_transform` wouldn't exist.\r\nThe following overload will be considered instead of `void*` one\r\nhttps://github.com/brycelelbach/wg21_p2300_std_execution/blob/2aaf6eb131a1d04c0b3e0dc00f2ce3b960477da1/include/coroutine.hpp#L63-L73\r\n\r\nPlease correct me if I am wrong."", 'comment_created': datetime.datetime(2022, 9, 10, 14, 52, 48, tzinfo=datetime.timezone.utc), 'commenter': 'SAtacker', 'type': 'User'}, {'comment_id': 968913891, 'comment_body': ""> If a `no_env` is used for this concept, then it wouldn't satisfy as `await_transform` wouldn't exist.\r\n\r\nIt would, actually! The concept is checking whether a call to `__get_awaiter` with an argument of type `_Promise*` is well-formed. Clearly _this_ overload would not be selected when `_Promise` is `no_env` because `no_env` doesn't have an `await_transform` member.\r\n\r\nBut! There is another overload of `__get_awaiter` that doesn't require that, and it accepts a `void*` instead of a `_Promise*`. And (here's the key bit) a `_Promise*` pointer is implicitly convertible to a `void*` one.\r\n\r\nSo the `__awaitable` concept doesn't require you to map `no_env` into a `void` first. You can just pass `no_env` to it."", 'comment_created': datetime.datetime(2022, 9, 12, 20, 43, 58, tzinfo=datetime.timezone.utc), 'commenter': 'ericniebler', 'type': 'User'}, {'comment_id': 968933664, 'comment_body': 'This is the real problem with your patch. The `sender` concept is used without an environment to test whether a type has ""sender-ness"" even when it is only really a sender when used with a certain environment type.\r\n\r\nFor instance, imagine `Sndr` is the type of the expression `execution::read(execution::get_scheduler)` (which is a sender that reads a scheduler out of the environment and passes it to the receiver\'s `set_value`). The type `Sndr` is only really a sender -- i.e., can only be connected to a receiver -- if that receiver\'s environment has a scheduler to give it. And yet `sender<Sndr>` would evaluate to true.\r\n\r\nThat\'s because the `read` sender hooks `get_completion_signatures` to return `dependent_completion_signatures<no_env>` when passed a `no_env`. That is basically like the sender responding to ""are you a sender?"" with ""reply hazy. ask again later"" instead of ""yes"" or ""no"".\r\n\r\nThis is used to constrain sender adaptors to only accept things that look sender-ish, even though there isn\'t yet an environment available. Without that, we would have no way to reject obvious nonsense like `execution::then( emphatically-not-a-sender, fn )`.\r\n\r\nWith your patch, you won\'t be able to use just about _any_ sender adaptor with a type that is awaitable in only certain coroutine types.\r\n\r\nThe real solution would look a little like the current one with `dependent_completion_signatures`. I can think of an awaitable type implementing a dummy `operator co_await` that returns a known awaitable type that the library knows to mean ""ask again later"". Let\'s call it `dependent_awaitable`, and it can look like this:\r\n\r\n```c++\r\nstruct dependent_awaitable {\r\n  bool await_ready();\r\n  void await_suspend(std::coroutine_handle<no_env>);\r\n  dependent_awaitable await_resume();\r\n};\r\n```\r\n\r\nThen the `__awaitable< Awaitable, no_env >` test will succeed (yay!) and we can have `get_completion_signatures` return `dependent_completion_signatures<no_env>` for such cases.\r\n\r\nMake sense?\r\n\r\nThink I\'ll code this up to be sure I\'m not smoking dope.', 'comment_created': datetime.datetime(2022, 9, 12, 21, 10, 11, tzinfo=datetime.timezone.utc), 'commenter': 'ericniebler', 'type': 'User'}, {'comment_id': 969695744, 'comment_body': 'Got it, (and tried it), how silly of me.', 'comment_created': datetime.datetime(2022, 9, 13, 14, 21, 40, tzinfo=datetime.timezone.utc), 'commenter': 'SAtacker', 'type': 'User'}, {'comment_id': 969717869, 'comment_body': '> This is the real problem with your patch. The `sender` concept is used without an environment to test whether a type has ""sender-ness"" even when it is only really a sender when used with a certain environment type.\r\n> \r\n> For instance, imagine `Sndr` is the type of the expression `execution::read(execution::get_scheduler)` (which is a sender that reads a scheduler out of the environment and passes it to the receiver\'s `set_value`). The type `Sndr` is only really a sender -- i.e., can only be connected to a receiver -- if that receiver\'s environment has a scheduler to give it. And yet `sender<Sndr>` would evaluate to true.\r\n> \r\n> That\'s because the `read` sender hooks `get_completion_signatures` to return `dependent_completion_signatures<no_env>` when passed a `no_env`. That is basically like the sender responding to ""are you a sender?"" with ""reply hazy. ask again later"" instead of ""yes"" or ""no"".\r\n> \r\n> This is used to constrain sender adaptors to only accept things that look sender-ish, even though there isn\'t yet an environment available. Without that, we would have no way to reject obvious nonsense like `execution::then( emphatically-not-a-sender, fn )`.\r\n> \r\n> With your patch, you won\'t be able to use just about _any_ sender adaptor with a type that is awaitable in only certain coroutine types.\r\n> \r\n> The real solution would look a little like the current one with `dependent_completion_signatures`. I can think of an awaitable type implementing a dummy `operator co_await` that returns a known awaitable type that the library knows to mean ""ask again later"". Let\'s call it `dependent_awaitable`, and it can look like this:\r\n> \r\n> ```c++\r\n> struct dependent_awaitable {\r\n>   bool await_ready();\r\n>   void await_suspend(std::coroutine_handle<no_env>);\r\n>   dependent_awaitable await_resume();\r\n> };\r\n> ```\r\n> \r\n> Then the `__awaitable< Awaitable, no_env >` test will succeed (yay!) and we can have `get_completion_signatures` return `dependent_completion_signatures<no_env>` for such cases.\r\n> \r\n> Make sense?\r\n> \r\n> Think I\'ll code this up to be sure I\'m not smoking dope.\r\n\r\nYes, it makes sense. That\'s really good, I couldn\'t think that far. Thanks for explaining in detail, appreciate it.', 'comment_created': datetime.datetime(2022, 9, 13, 14, 39, 36, tzinfo=datetime.timezone.utc), 'commenter': 'SAtacker', 'type': 'User'}, {'comment_id': 984112150, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2022, 9, 30, 0, 18, 20, tzinfo=datetime.timezone.utc), 'commenter': 'ericniebler', 'type': 'User'}]","[{'commit_sha': '4c6ec21496e8c5b93b81f65e0592737e6dcc305a', 'committer_username': 'SAtacker', 'committer_name': 'Shreyas Atre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 4, 16, 36, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2aaf6eb131a1d04c0b3e0dc00f2ce3b960477da1', 'committer_username': 'SAtacker', 'committer_name': 'Shreyas Atre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 4, 16, 36, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47c8003a416afb9e1b3d4de0acf8f6714e4e03e8', 'committer_username': 'ericniebler', 'committer_name': 'Eric Niebler', 'committer_email': 'eric.niebler@gmail.com', 'commit_date': datetime.datetime(2010, 3, 18, 23, 38, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b3e344222be63371ca812c943a37edd30e50983', 'committer_username': 'ericniebler', 'committer_name': 'Eric Niebler', 'committer_email': 'eric.niebler@gmail.com', 'commit_date': datetime.datetime(2010, 3, 18, 23, 38, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '819b0ab5db78983b6bdc929786f666a0d739122d', 'committer_username': 'ericniebler', 'committer_name': 'Eric Niebler', 'committer_email': 'eric.niebler@gmail.com', 'commit_date': datetime.datetime(2010, 3, 18, 23, 38, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f817057480262b9375e79615d79c70ee57ce092', 'committer_username': 'ericniebler', 'committer_name': 'Eric Niebler', 'committer_email': 'eric.niebler@gmail.com', 'commit_date': datetime.datetime(2010, 3, 18, 23, 38, 53, tzinfo=datetime.timezone.utc)}]",Shreyas Atre,61797109,,User,,59,,86,82

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
4455628,hpx,STEllAR-GROUP/hpx,C++,429,2493,126,239,29398,134,75,34,"[{'id': 1692240844, 'number': 6425, 'closed': datetime.datetime(2024, 4, 28, 16, 23, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 1, 23, 17, 35, 19, tzinfo=datetime.timezone.utc), 'time_taken': 8290102.0, 'time_delta': '95 days, 22:48:22', 'additions': 6, 'deletions': 2, 'state': 'closed'}, {'id': 1365173295, 'number': 6257, 'closed': datetime.datetime(2023, 5, 26, 21, 34, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 25, 18, 37, 42, tzinfo=datetime.timezone.utc), 'time_taken': 96999.0, 'time_delta': '1 day, 2:56:39', 'additions': 41, 'deletions': 5, 'state': 'closed'}, {'id': 1309309642, 'number': 6220, 'closed': datetime.datetime(2024, 1, 13, 19, 56, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 11, 15, 55, 57, tzinfo=datetime.timezone.utc), 'time_taken': 23947232.0, 'time_delta': '277 days, 4:00:32', 'additions': 1457, 'deletions': 251, 'state': 'closed'}, {'id': 1197509869, 'number': 6139, 'closed': datetime.datetime(2023, 3, 9, 14, 48, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 1, 14, 9, 51, 54, tzinfo=datetime.timezone.utc), 'time_taken': 4683412.0, 'time_delta': '54 days, 4:56:52', 'additions': 882, 'deletions': 491, 'state': 'closed'}, {'id': 1104356801, 'number': 6059, 'closed': datetime.datetime(2022, 11, 6, 16, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 30, 9, 51, 52, tzinfo=datetime.timezone.utc), 'time_taken': 628088.0, 'time_delta': '7 days, 6:28:08', 'additions': 9, 'deletions': 7, 'state': 'closed'}, {'id': 1038970910, 'number': 5990, 'closed': datetime.datetime(2022, 10, 27, 16, 15, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 28, 21, 46, 59, tzinfo=datetime.timezone.utc), 'time_taken': 5164099.0, 'time_delta': '59 days, 18:28:19', 'additions': 1354, 'deletions': 9, 'state': 'closed'}, {'id': 1019770033, 'number': 5977, 'closed': datetime.datetime(2022, 8, 8, 13, 44, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 8, 3, 42, 42, tzinfo=datetime.timezone.utc), 'time_taken': 36094.0, 'time_delta': '10:01:34', 'additions': 8, 'deletions': 0, 'state': 'closed'}, {'id': 1016535599, 'number': 5974, 'closed': datetime.datetime(2022, 8, 7, 16, 33, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 3, 16, 8, 14, tzinfo=datetime.timezone.utc), 'time_taken': 347088.0, 'time_delta': '4 days, 0:24:48', 'additions': 179, 'deletions': 14, 'state': 'closed'}, {'id': 990784094, 'number': 5945, 'closed': datetime.datetime(2022, 7, 25, 14, 14, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 7, 20, 17, 36, tzinfo=datetime.timezone.utc), 'time_taken': 1533411.0, 'time_delta': '17 days, 17:56:51', 'additions': 593, 'deletions': 8, 'state': 'closed'}, {'id': 965033641, 'number': 5920, 'closed': datetime.datetime(2022, 7, 1, 18, 59, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 12, 15, 52, 40, tzinfo=datetime.timezone.utc), 'time_taken': 1652790.0, 'time_delta': '19 days, 3:06:30', 'additions': 360, 'deletions': 37, 'state': 'closed'}, {'id': 916674408, 'number': 5865, 'closed': datetime.datetime(2022, 6, 3, 17, 30, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 22, 17, 40, 44, tzinfo=datetime.timezone.utc), 'time_taken': 3628196.0, 'time_delta': '41 days, 23:49:56', 'additions': 250, 'deletions': 7, 'state': 'closed'}, {'id': 907985631, 'number': 5846, 'closed': datetime.datetime(2022, 5, 26, 12, 46, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 12, 17, 40, 50, tzinfo=datetime.timezone.utc), 'time_taken': 3783950.0, 'time_delta': '43 days, 19:05:50', 'additions': 14, 'deletions': 0, 'state': 'closed'}]"
366188419,stdexec,NVIDIA/stdexec,C++,147,1472,55,52,2207,93,31,11,"[{'id': 1049312524, 'number': 602, 'closed': datetime.datetime(2022, 9, 30, 0, 26, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 7, 23, 17, 15, tzinfo=datetime.timezone.utc), 'time_taken': 1904973.0, 'time_delta': '22 days, 1:09:33', 'additions': 152, 'deletions': 4, 'state': 'closed'}]"
