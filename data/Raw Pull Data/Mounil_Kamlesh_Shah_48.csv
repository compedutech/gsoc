pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
913028426,[WIP]  Add docstrings to each source file and add linting for developer-file-overview.,"**What does this PR do?**
- This PR adds docstrings to the source files in the codebase
- Add a CI Action which ensures the document matches the expectations from the docstrings
- Generate the document from docstrings

Fixes #892 


**Tested?** <!-- Fine to leave some of these unchecked if this is a draft/work-in-progress -->
- [x] Manually
- [x] Existing tests (adapted, if necessary)
- [ ] New tests added (for any new behavior)
- [x] Passed linting & tests (each commit)

**Commit flow**
- first commit: Adds docstrings to the source files
- second commit: Adds linting for developer-file-overview.md",True,1208,https://api.github.com/repos/zulip/zulip-terminal/pulls/1208,https://github.com/zulip/zulip-terminal/pull/1208,closed,111,6,3,2,12,105,3,0,"[{'name': 'size: XL'}, {'name': 'PR awaiting update'}, {'name': 'area: infrastructure'}]",2022-04-19 12:07:39+00:00,2022-09-10 01:17:10+00:00,12402571.0,"143 days, 13:09:31","[{'comment_id': 853638551, 'comment_body': 'Is there a reason there is a line break here?\r\n\r\nThere appear to be other examples too.', 'comment_created': datetime.datetime(2022, 4, 20, 0, 50, 5, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 853639646, 'comment_body': ""We shouldn't lose any information in this transition, so we want to either split the docstring in some way, or migrate some information into a comment."", 'comment_created': datetime.datetime(2022, 4, 20, 0, 53, 23, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 853656127, 'comment_body': 'Is this 4 for the blank lines? It would be cleaner to detect these and skip them.\r\n\r\nIf not, can we also skip them?', 'comment_created': datetime.datetime(2022, 4, 20, 1, 38, 53, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 853661480, 'comment_body': ""`get` is very approximate/vague; I'd suggest something more specific like `extract`."", 'comment_created': datetime.datetime(2022, 4, 20, 1, 54, 27, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 853664645, 'comment_body': ""Generally this looks reasonable. I'm torn over improving the diagnostics as you have below; it's potentially useful, but ultimately we're just noting there's a difference and that the fix script should be run."", 'comment_created': datetime.datetime(2022, 4, 20, 2, 2, 56, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 853664902, 'comment_body': 'Double string?', 'comment_created': datetime.datetime(2022, 4, 20, 2, 3, 48, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 853665144, 'comment_body': 'Fits on one line, or not?', 'comment_created': datetime.datetime(2022, 4, 20, 2, 4, 25, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 853680527, 'comment_body': ""I'm not sure if we *really* need to pad with spaces (markdown will render fine in any case), but I suppose people may look at the file in the terminal.\r\n\r\nIf so, I'd suggest we use the COLUMN_WIDTHS tuple to generate this."", 'comment_created': datetime.datetime(2022, 4, 20, 2, 44, 40, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 853681378, 'comment_body': ""It's not so important, but we can use the `/` style instead of `join` in many/all cases."", 'comment_created': datetime.datetime(2022, 4, 20, 2, 47, 3, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 853685403, 'comment_body': ""This is being called repeatedly; is there a reason we can't simplify to open the file and write once, once we have all the data?"", 'comment_created': datetime.datetime(2022, 4, 20, 2, 57, 59, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 853688060, 'comment_body': ""total_files is really the input to this function; you might make it a constant, perhaps, if we don't calculate it dynamically at the moment.\r\n\r\nTo put it a different way this 'get' or 'extract' of the docstrings is separate from the calculation of which paths to extract them from."", 'comment_created': datetime.datetime(2022, 4, 20, 3, 5, 50, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 853691180, 'comment_body': 'This also applies to other pathlib options to other functions.', 'comment_created': datetime.datetime(2022, 4, 20, 3, 15, 12, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 854410983, 'comment_body': ""It was to avoid horizontal scrolling across those files. I'll remove the line breaks."", 'comment_created': datetime.datetime(2022, 4, 20, 17, 58, 43, tzinfo=datetime.timezone.utc), 'commenter': 'mounilKshah', 'type': 'User'}, {'comment_id': 854415261, 'comment_body': ""The description in the file-overview is different from that in the `color.py` file, hence I had retained the description from the file-overview. I'll look for a way to include this string without any loss of information."", 'comment_created': datetime.datetime(2022, 4, 20, 18, 3, 54, tzinfo=datetime.timezone.utc), 'commenter': 'mounilKshah', 'type': 'User'}, {'comment_id': 854420414, 'comment_body': ""The last 4 lines of file-overview are [hard coded](https://github.com/zulip/zulip-terminal/pull/1208/files#diff-2ed47285f7c803803527b645e26c80f37db9583f2c8146b9eeeace9d969bc925R179) and not extracted from any file as there aren't any file(s) corresponding to the `zulipterminal/scripts` and `zulipterminal/themes` folders. Their description is added at the end of the file (the last 4 lines to be precise). Hence, while extracting the docstrings for linting, I avoided taking them into consideration."", 'comment_created': datetime.datetime(2022, 4, 20, 18, 10, 21, tzinfo=datetime.timezone.utc), 'commenter': 'mounilKshah', 'type': 'User'}, {'comment_id': 854420809, 'comment_body': ""I'll rectify this."", 'comment_created': datetime.datetime(2022, 4, 20, 18, 10, 52, tzinfo=datetime.timezone.utc), 'commenter': 'mounilKshah', 'type': 'User'}, {'comment_id': 854421036, 'comment_body': ""It does. I'll rectify this."", 'comment_created': datetime.datetime(2022, 4, 20, 18, 11, 6, tzinfo=datetime.timezone.utc), 'commenter': 'mounilKshah', 'type': 'User'}, {'comment_id': 854425634, 'comment_body': ""I guess the file path strings vary depending upon the OS right? Windows might have `\\` while Unix and Linux have `/`? Considering these differences, I thought of using something that was independent of the user's system."", 'comment_created': datetime.datetime(2022, 4, 20, 18, 17, 5, tzinfo=datetime.timezone.utc), 'commenter': 'mounilKshah', 'type': 'User'}, {'comment_id': 859408287, 'comment_body': 'To clarify, I was referring to the behavior of `/` for Path and PurePath.\r\n(https://docs.python.org/3/library/pathlib.html#operators)', 'comment_created': datetime.datetime(2022, 4, 27, 5, 49, 56, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 859417670, 'comment_body': ""Oh. I tried this out. It works pretty well. I'll replace all instances of `join()` with `/`."", 'comment_created': datetime.datetime(2022, 4, 27, 6, 9, 10, tzinfo=datetime.timezone.utc), 'commenter': 'mounilKshah', 'type': 'User'}, {'comment_id': 859419461, 'comment_body': ""The overview file doesn't need the extra line. For now I'd suggest simplifying your code and moving it to a comment in the file."", 'comment_created': datetime.datetime(2022, 4, 27, 6, 12, 18, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 859420036, 'comment_body': 'Note that github is indicating a deleted space here.', 'comment_created': datetime.datetime(2022, 4, 27, 6, 13, 24, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 859427996, 'comment_body': 'This can written as `ROOT_DIRECTORY / ""zulipterminal""` per my other point.', 'comment_created': datetime.datetime(2022, 4, 27, 6, 27, 27, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 859429305, 'comment_body': ""This does work, but is fragile - if we change this behavior or add other folders like this we need to do extra work, and we're already doing it twice. It is cleaner to make a data-structure that represents special cases and then process it. That will allow it to include the 4 other constants you defined lower down."", 'comment_created': datetime.datetime(2022, 4, 27, 6, 29, 20, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 859430791, 'comment_body': 'Generally this should represent a \'bug\' - we don\'t want descriptions to be ""too long"", otherwise the file doesn\'t represent an overview and the descriptions could get long.\r\n\r\nI think you added this to handle the case of the text being multiple lines in one case? If so, as per a comment there, simply make the non-matching text into a comment for now.', 'comment_created': datetime.datetime(2022, 4, 27, 6, 31, 48, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 859434264, 'comment_body': ""I'm not sure why the change in this 3rd (?) commit isn't in the original commit?"", 'comment_created': datetime.datetime(2022, 4, 27, 6, 37, 11, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 859682554, 'comment_body': ""Yes. It was to handle the case of `color.py` which had a description too long to fit within the docstring column.\r\n\r\nRe bug: I'll make changes to throw an error in case the docstring is longer than the column width."", 'comment_created': datetime.datetime(2022, 4, 27, 11, 28, 36, tzinfo=datetime.timezone.utc), 'commenter': 'mounilKshah', 'type': 'User'}, {'comment_id': 859799009, 'comment_body': ""The original commit had line breaks for longer docstrings. After your comments, I removed those line breaks, and the file with removed line breaks added in the third commit. As said above, I'll make the commit flow cleaner."", 'comment_created': datetime.datetime(2022, 4, 27, 13, 26, 14, tzinfo=datetime.timezone.utc), 'commenter': 'mounilKshah', 'type': 'User'}, {'comment_id': 859830626, 'comment_body': 'Maybe lets add the ""For further details..."" line in the `developer-file-overview.md`. Linking to the theme contribution guide from the overview doc make sense.', 'comment_created': datetime.datetime(2022, 4, 27, 13, 54, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 859839192, 'comment_body': 'Are you suggesting to do something similar to [this](https://github.com/zulip/zulip-terminal/pull/1208/files#diff-0bb745d3e470b3a0c93da4298bceebbdf4d2f1f0cf8a7624c0f2f4e5991e5ac9R20)?', 'comment_created': datetime.datetime(2022, 4, 27, 14, 1, 11, tzinfo=datetime.timezone.utc), 'commenter': 'mounilKshah', 'type': 'User'}, {'comment_id': 859964228, 'comment_body': 'Seems like Neil has a different opinion.\r\nIn general I feel the theme contributing guide is not accessible from anywhere unless you open the `themes` directory or `color.py`. (Is it linked from anywhere?) Maybe a link that directs interested users/developers from the README/FAQ or any other relevant documentation could help.\r\n\r\nAdding a link might be a problem while parsing though.', 'comment_created': datetime.datetime(2022, 4, 27, 15, 49, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 860522911, 'comment_body': 'We can always document these folders or improve this process later, and of course other documentation linkage is great to add otherwise.\r\n\r\nThis issue/PR is about decentralizing the data in this file and making it easy to keep it in sync.', 'comment_created': datetime.datetime(2022, 4, 28, 6, 18, 39, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 860532432, 'comment_body': ""It's good to avoid hard-coded numbers; it's fairly obvious which variable this comes."", 'comment_created': datetime.datetime(2022, 4, 28, 6, 35, 9, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 865499993, 'comment_body': 'We should aim to keep the text matching in this PR; we can later update the docstrings and re-run if we want to update everything together.', 'comment_created': datetime.datetime(2022, 5, 5, 1, 13, 30, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 865500390, 'comment_body': 'These are already defined in `DOCSTRINGS_FOR_NO_FILE_FOLDERS`.', 'comment_created': datetime.datetime(2022, 5, 5, 1, 15, 15, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 865500972, 'comment_body': ""This commit fails here, since you're passing an argument."", 'comment_created': datetime.datetime(2022, 5, 5, 1, 17, 34, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 865505725, 'comment_body': 'In a few locations you refer to values of variables like this - there is little use in us using variables if we have to update the comments throughout the code at the same time :)', 'comment_created': datetime.datetime(2022, 5, 5, 1, 36, 39, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 865506868, 'comment_body': '...`docstrings`?', 'comment_created': datetime.datetime(2022, 5, 5, 1, 41, 33, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 865510353, 'comment_body': 'There are equivalent functions for use with pathlib for these commands and others which we should likely move towards to be consistent - .parent, .name, .relative_to.', 'comment_created': datetime.datetime(2022, 5, 5, 1, 56, 48, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 865512251, 'comment_body': ""Before you cast, check what type it is, and whether you really need to cast. Then if you do, I'd recommend always adding a comment unless it's really obvious.\r\n\r\nWhat is the type here? Why did you add a cast, given we're not running mypy on this by default?"", 'comment_created': datetime.datetime(2022, 5, 5, 2, 4, 35, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 865512696, 'comment_body': ""I wouldn't expect something which modifies things to be a linter, so save this for the next commit only."", 'comment_created': datetime.datetime(2022, 5, 5, 2, 6, 31, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 866486933, 'comment_body': ""Okay.\r\n\r\nActually, I was being overly cautious regarding the type and hence kept the cast function. I tested the code without the cast and it works well. I'll remove it in the updated commit(s)."", 'comment_created': datetime.datetime(2022, 5, 6, 4, 48, 33, tzinfo=datetime.timezone.utc), 'commenter': 'mounilKshah', 'type': 'User'}, {'comment_id': 868746372, 'comment_body': 'By using `reveal_type` with `mypy`, this is apparently `Optional[str]` - this may be important since some modules may end up having no docstring :)', 'comment_created': datetime.datetime(2022, 5, 10, 2, 7, 17, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 868843020, 'comment_body': ""This change should go into the previous 1/2 commit(s) - it's a valid change to the document based on the style you're going with here."", 'comment_created': datetime.datetime(2022, 5, 10, 5, 57, 42, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 868844003, 'comment_body': ""This entry doesn't match, but the diff should disappear if the docstring matches what we currently have."", 'comment_created': datetime.datetime(2022, 5, 10, 5, 59, 37, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 868845183, 'comment_body': 'I appreciate the exploration of a different name here; what do you think about TABLE_OFFSET ?', 'comment_created': datetime.datetime(2022, 5, 10, 6, 1, 55, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 868852104, 'comment_body': 'This will likely be clearer with comprehensions, including up to folders_and_files.', 'comment_created': datetime.datetime(2022, 5, 10, 6, 14, 39, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 868853907, 'comment_body': 'This function is fine at this point, though for more general code I would suggest using iteration over the indices or something similar to avoid the duplication.', 'comment_created': datetime.datetime(2022, 5, 10, 6, 17, 37, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 868855110, 'comment_body': 'typo', 'comment_created': datetime.datetime(2022, 5, 10, 6, 19, 40, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 868858218, 'comment_body': ""I don't recall if this function was more complex previously, but I think it would be clearer to inline the body into the one place it's called. It does very little and you're using WRITE_INDEX (or similar) in both the function and just before it."", 'comment_created': datetime.datetime(2022, 5, 10, 6, 24, 43, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 868861312, 'comment_body': 'Meaningful?', 'comment_created': datetime.datetime(2022, 5, 10, 6, 29, 41, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 868861733, 'comment_body': 'Why is this here? Why not use it as the loop variable?', 'comment_created': datetime.datetime(2022, 5, 10, 6, 30, 21, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 868862903, 'comment_body': 'Would it be simpler/clearer to have the folder part at the start before this loop? This would avoid the need for the conditional logic.', 'comment_created': datetime.datetime(2022, 5, 10, 6, 32, 8, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 868864386, 'comment_body': 'Are you concerned about accidentally calling with True?', 'comment_created': datetime.datetime(2022, 5, 10, 6, 34, 36, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 868864990, 'comment_body': ""There aren't many left, but this could be a variable."", 'comment_created': datetime.datetime(2022, 5, 10, 6, 35, 26, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 890717141, 'comment_body': ""Could be more detailed?\r\n\r\nIn a few of these, seems like there's no new info added other than what could be assumed from the filename."", 'comment_created': datetime.datetime(2022, 6, 7, 2, 43, 58, tzinfo=datetime.timezone.utc), 'commenter': 'plugyawn', 'type': 'User'}, {'comment_id': 890717655, 'comment_body': 'Maybe some contrast with the definition for ui.py would help.', 'comment_created': datetime.datetime(2022, 6, 7, 2, 45, 28, tzinfo=datetime.timezone.utc), 'commenter': 'plugyawn', 'type': 'User'}, {'comment_id': 890718849, 'comment_body': 'Missing newline?', 'comment_created': datetime.datetime(2022, 6, 7, 2, 48, 22, tzinfo=datetime.timezone.utc), 'commenter': 'plugyawn', 'type': 'User'}, {'comment_id': 894248252, 'comment_body': ""It's better to place all the hard-coded values at the same place.\r\n(see TABLE_OFFSET and BLANK_LINE)"", 'comment_created': datetime.datetime(2022, 6, 10, 7, 47, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 894254612, 'comment_body': ""The standard naming of `as file` would be sufficient here. Same with the `to_write` below. It is pretty obvious from the file name, mode and `readlines` that it's a `developer_file_to_read`."", 'comment_created': datetime.datetime(2022, 6, 10, 7, 54, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 894255558, 'comment_body': 'Apart from that, I believe we don\'t need the + in `""r+""` here?', 'comment_created': datetime.datetime(2022, 6, 10, 7, 56, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 894266676, 'comment_body': 'To avoid confusion between text and name, lets use the term cell(s) instead?\r\n* That way `pad_column_cells()` would be more apt than `column_text_with_spaces()`\r\n* and `padded_folder_cell`, `padded_file_cell`, `padded_desc_cell` would be more meaningful.', 'comment_created': datetime.datetime(2022, 6, 10, 8, 9, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 894274910, 'comment_body': ""`files_and_docstrings_to_add` isn't true to it's meaning as the same variable is used even when there are no files and only folders and docstrings are added.\r\n\r\nMaybe using `table_markdown` is more apt? It definitely make the following more intuitive:\r\n```python\r\ntable_markdown.append(new_col)\r\n```"", 'comment_created': datetime.datetime(2022, 6, 10, 8, 18, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 894278575, 'comment_body': 'Continuing the previous thought, extend can be used here to make it shorter:\r\n```python\r\ntable_markdown.extend([new_col, BLANK_COLUMN])\r\n```', 'comment_created': datetime.datetime(2022, 6, 10, 8, 21, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 894282618, 'comment_body': ""Maybe just using `i` here is enough as iterator is misleading because range returns an iterator object. It's like saying `for iterator in iterator`."", 'comment_created': datetime.datetime(2022, 6, 10, 8, 25, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 894289385, 'comment_body': 'The logic in the if condition and the Error statement do not match here.', 'comment_created': datetime.datetime(2022, 6, 10, 8, 33, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 894307668, 'comment_body': ""In this case glob matches files and folders so it's not `path_to_folder`. Try using a `/` at the end of the pattern. That way you may also avoid the parent logic right below this."", 'comment_created': datetime.datetime(2022, 6, 10, 8, 53, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 894308330, 'comment_body': 'I believe all of this can be done in the previous for loop itself?', 'comment_created': datetime.datetime(2022, 6, 10, 8, 54, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 894309544, 'comment_body': 'Is the extra space in each cell responsible for the `+ 1`?', 'comment_created': datetime.datetime(2022, 6, 10, 8, 55, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 894316045, 'comment_body': 'What exactly is ""computed"" here? Does `existing_doc_dict` sound better. I\'m not sure though. What do others think here?', 'comment_created': datetime.datetime(2022, 6, 10, 9, 3, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 894319555, 'comment_body': 'Use the same slicing iterator you used in the other function here to keep the same style.\r\n`for column in doc_data[TABLE_OFFSET-1:]`', 'comment_created': datetime.datetime(2022, 6, 10, 9, 7, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 894323025, 'comment_body': 'Here the description and help text sound opposite to each other. The description sounds like we are linting and fixing the docstrings based on the markdown file but we are doing the opposite.', 'comment_created': datetime.datetime(2022, 6, 10, 9, 11, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 894323987, 'comment_body': 'Even the name of the file sounds that way.', 'comment_created': datetime.datetime(2022, 6, 10, 9, 12, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 894330639, 'comment_body': 'Suppose someone changes the markdown file and then runs fix seeing this error, they loose everything they wrote right?\r\n\r\nI believe the markdown file is not to be edited after this PR (atleast the table). Should we add a `Generated by code. DO NOT EDIT` warning at the top of the file?', 'comment_created': datetime.datetime(2022, 6, 10, 9, 20, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 898285089, 'comment_body': 'This data is intended to initially match the text in the overview file.', 'comment_created': datetime.datetime(2022, 6, 15, 18, 21, 36, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 898300014, 'comment_body': 'This could benefit from describing what was successful :)', 'comment_created': datetime.datetime(2022, 6, 15, 18, 40, 38, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 898715274, 'comment_body': 'You can extend the cell terminology here as well and also use tuple from the start.\r\n* `padded_cells = ()`\r\n* `given_text` -> `text`\r\n* `remaining_spaces` -> `padding`\r\n* `final_text` -> `padded_cell`\r\n* append becomes add', 'comment_created': datetime.datetime(2022, 6, 16, 5, 49, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 898718155, 'comment_body': 'Is it better to move `in_color` to helper.py now? Would it cause any circular dependency issues? Maybe @neiljp can comment on it.', 'comment_created': datetime.datetime(2022, 6, 16, 5, 55, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 898720229, 'comment_body': 'Nothing about this particular change has been mentioned in the commit text. Do you intend to separate this out?', 'comment_created': datetime.datetime(2022, 6, 16, 5, 59, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 898721074, 'comment_body': 'read next to a read and write next to a write looks weird, so we can remove at least that?', 'comment_created': datetime.datetime(2022, 6, 16, 6, 1, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 898722771, 'comment_body': 'Do you want to use `line` here or `col(umn)`? Both are technically correct but cell, column and table fit a pattern.', 'comment_created': datetime.datetime(2022, 6, 16, 6, 4, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 898727995, 'comment_body': 'Since space isn\'t included in the docstring, shouldn\'t we just say `""{file} has docstring longer than to {int(COLUMN_WIDTHS[2])}""`?\r\nSimilarily we can remove the = and +1 from the if condition?', 'comment_created': datetime.datetime(2022, 6, 16, 6, 10, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 898733399, 'comment_body': ""Probably using `complete_directory_path.glob('*.py')` makes the code simpler here. You can then directly do `file.name`"", 'comment_created': datetime.datetime(2022, 6, 16, 6, 20, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 898748527, 'comment_body': 'Considering the pattern, maybe call it `new_row`? As we are adding new _rows_ in each iteration?', 'comment_created': datetime.datetime(2022, 6, 16, 6, 44, 59, tzinfo=datetime.timezone.utc), 'commenter': 'mounilKshah', 'type': 'User'}, {'comment_id': 898796252, 'comment_body': 'Oh sorry, I meant rows everywhere I said columns. :laughing: ', 'comment_created': datetime.datetime(2022, 6, 16, 7, 47, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 898827929, 'comment_body': 'What it returns is a Path object so `file_name` should be `file` (or similar).', 'comment_created': datetime.datetime(2022, 6, 16, 8, 23, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 899373145, 'comment_body': 'This function is unnecessary. Python f-strings have this built in.\r\n\r\n```pycon\r\n>>> folder = ""zulipterminal""\r\n>>> file = ""api_types.py""\r\n>>> docstring = ""Preliminary Zulip API types defined in python, to allow type checking""\r\n>>> print(f""| {folder:23}| {file:20}| {docstring:103}|\\n"")\r\n| zulipterminal          | api_types.py        | Preliminary Zulip API types defined in python, to allow type checking                                  |\r\n```\r\n\r\n(The widths can be computed expressions too. [Documentation](https://docs.python.org/3/reference/lexical_analysis.html#f-strings).)', 'comment_created': datetime.datetime(2022, 6, 16, 17, 50, 57, tzinfo=datetime.timezone.utc), 'commenter': 'andersk', 'type': 'User'}, {'comment_id': 899751630, 'comment_body': ""Aah, I remember using this a while back but it didn't cross my mind. Let's use this."", 'comment_created': datetime.datetime(2022, 6, 17, 4, 28, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 900120004, 'comment_body': 'This can be closed.', 'comment_created': datetime.datetime(2022, 6, 17, 13, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 900120327, 'comment_body': 'This also can be closed.', 'comment_created': datetime.datetime(2022, 6, 17, 13, 32, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 900412969, 'comment_body': 'Thank you for this suggestion @andersk 💯 ', 'comment_created': datetime.datetime(2022, 6, 17, 18, 23, 21, tzinfo=datetime.timezone.utc), 'commenter': 'mounilKshah', 'type': 'User'}, {'comment_id': 903335631, 'comment_body': 'Was this name change to ensure everything fits on 1 line?\r\nMaybe `DESC_FOR_NO_FILE_FOLDERS` is a better name?', 'comment_created': datetime.datetime(2022, 6, 22, 6, 37, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 928343061, 'comment_body': 'The parser is defined but not used. I tried `-h` here and it did nothing.', 'comment_created': datetime.datetime(2022, 7, 25, 1, 8, 25, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 928352428, 'comment_body': 'Yes, I agree with this adding a comment for this :+1:\r\n\r\nWe do something similar (in python) for the generated unicode emoji file.', 'comment_created': datetime.datetime(2022, 7, 25, 1, 44, 51, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 928353770, 'comment_body': 'I also think this could be more explicit what\'s going to happen, eg.\r\n`..."": docstrings do not match those listed in {overviewfile}""`\r\nand also using `""update {overviewfile} from docstrings""` instead of just \'fix\'?', 'comment_created': datetime.datetime(2022, 7, 25, 1, 49, 24, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 928355531, 'comment_body': ""It is cleaner to define the tool filename as a variable if you're using it multiple times (2+), whether simply explicitly, or generated. You're also outputting the same text as in the above section, so it would be clean to output similar text for both without duplication."", 'comment_created': datetime.datetime(2022, 7, 25, 1, 55, 13, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 945978920, 'comment_body': ""Resolving this comment now I've opened #1246."", 'comment_created': datetime.datetime(2022, 8, 15, 17, 38, 15, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 946202831, 'comment_body': 'There were some references like this left behind just now, so I rolled those into my partial merge.', 'comment_created': datetime.datetime(2022, 8, 15, 22, 54, 38, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 946207091, 'comment_body': ""@mounilKshah We didn't address this before I did the partial merge, but an extra commit updating the overview file and adjusting the fixing code to take that into account should be doable?"", 'comment_created': datetime.datetime(2022, 8, 15, 23, 4, 36, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 946224399, 'comment_body': ""While color is nice, it doesn't always render well depending on the background, or in different situations like `tools/lint-docstring|less`. This would be cleanly solved if we used something like the `crayons` library.\r\n\r\nWeren't the color changes previously in another commit? I think it'd be cleaner to have that separately, if we do end up doing so.\r\n\r\nIn terms of use in the main app, we could move to crayons there too, though ultimately I hope we can move to a loading screen instead, ie. load urwid very early, as explored in at least one PR."", 'comment_created': datetime.datetime(2022, 8, 15, 23, 42, 57, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 946230173, 'comment_body': ""Am I understanding correctly that folder_name is a variable retained through the loop to cope with no folder value when there are files? (eg. the core.py row)\r\nIf so, that deserves a comment.\r\n\r\nThis code combined *could* lead to folder_name being undefined here, if the table was not formatted correctly. It works now as there's a folder at the top of the file."", 'comment_created': datetime.datetime(2022, 8, 15, 23, 57, 55, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 946232498, 'comment_body': 'This is also triggered if a docstring/file is **removed**, eg. removing the scripts or themes entry.', 'comment_created': datetime.datetime(2022, 8, 16, 0, 3, 59, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 946233137, 'comment_body': ""Is there a reason you're not using fstrings here and elsewhere in this commit?"", 'comment_created': datetime.datetime(2022, 8, 16, 0, 5, 55, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 946246444, 'comment_body': 'These assert statements do work, with the downside that they only show one error result, even if there are more than one.\r\n\r\nIt also feels like using exceptions in this way is not particularly elegant or clean either.', 'comment_created': datetime.datetime(2022, 8, 16, 0, 44, 39, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}]","[{'commit_sha': 'c119496746451085a89f83ee7b0a4cd032b9baec', 'committer_username': 'mounilKshah', 'committer_name': 'Mounil Shah', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 23, 17, 43, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '26e358713647f217f3fa9645a35c807e7b9826e3', 'committer_username': 'mounilKshah', 'committer_name': 'Mounil Shah', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 23, 17, 43, 22, tzinfo=datetime.timezone.utc)}]",Mounil Shah,47925568,,User,,22,,86,21
1052114118,lint-and-test: Add job to run docstring linting.,"<!-- Please see https://github.com/zulip/zulip-terminal#contributor-guidelines ! -->

**What does this PR do?**  <!-- Overall description goes here -->

Adds the docstring linting from #1208 to CI, fully fixing #892.

**Tested?** <!-- Fine to leave some of these unchecked if this is a draft/work-in-progress -->
- [x] Manually",True,1254,https://api.github.com/repos/zulip/zulip-terminal/pulls/1254,https://github.com/zulip/zulip-terminal/pull/1254,closed,17,0,1,1,0,0,2,0,"[{'name': 'size: S'}, {'name': 'area: infrastructure'}]",2022-09-10 01:23:11+00:00,2022-09-15 02:15:29+00:00,435138.0,"5 days, 0:52:18",[],"[{'commit_sha': 'dbf16399da976c99f0e7d4ad78f53f26fcf63d24', 'committer_username': 'neiljp', 'committer_name': 'Neil Pilgrim', 'committer_email': None, 'commit_date': datetime.datetime(2014, 11, 5, 10, 28, 12, tzinfo=datetime.timezone.utc)}]",Neil Pilgrim,9568999,,User,,25,,43,59
1073590381,Add support for is_muted event,"This commit contains changes made to _handle_subscription_event() for handling is_muted events added under ZFL 139. Fixes #1251.

**What does this PR do?**
This PR adds support for `is_muted` events as a consequence of ZFL 139.

Fixes #1251 

[Update to modern API elements #T965 #T1236 #T1237](https://chat.zulip.org/#narrow/stream/206-zulip-terminal/topic/Update.20to.20modern.20API.20elements.20.23T965.20.23T1236.20.23T1237)

**Tested?**
- [x] Manually
- [x] Existing tests (adapted, if necessary)
- [x] New tests added (for any new behavior)
- [x] Passed linting & tests (each commit)


**Commit flow**
- This commit adds support for `is_muted` event

**Notes & Questions**
- Currently, `in_home_view` and `is_muted` are being supported by the server. However, as per ZFL 139, `in_home_view` shall be deprecated in the future.
",True,1260,https://api.github.com/repos/zulip/zulip-terminal/pulls/1260,https://github.com/zulip/zulip-terminal/pull/1260,closed,50,12,2,1,1,0,3,0,"[{'name': 'size: L'}, {'name': 'area: event handling'}, {'name': 'api migrations'}]",2022-10-01 15:41:51+00:00,2022-10-02 06:26:09+00:00,53058.0,14:44:18,[],"[{'commit_sha': 'daf9cb8994044a23d4303a46f3dcbd9c55441e36', 'committer_username': 'mounilKshah', 'committer_name': 'Mounil Shah', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 23, 17, 43, 22, tzinfo=datetime.timezone.utc)}]",Mounil Shah,47925568,,User,,22,,86,21
977076427,"Remove support for Subscription[""in_home_view""]","**What does this PR do?**
Migrates `in_home_view` to `is_muted` for Subscription.
Partially fix towards #965.

[#zulip-terminal>Update to modern API elements (support v2.1) #T965](https://chat.zulip.org/#narrow/stream/206-zulip-terminal/topic/Update.20to.20modern.20API.20elements.20.28support.20v2.2E1.29.20.23T965)


**Tested?**
- [x] Manually
- [x] Existing tests (adapted, if necessary)
- [ ] New tests added (for any new behavior)
- [x] Passed linting & tests (each commit)

**Commit flow**
- First commit contains the UI changes for the migration
- Second commit contains changes made to the test functions",True,1237,https://api.github.com/repos/zulip/zulip-terminal/pulls/1237,https://github.com/zulip/zulip-terminal/pull/1237,closed,13,9,4,1,3,3,5,0,"[{'name': 'area: tests'}, {'name': 'size: S'}, {'name': 'PR awaiting update'}, {'name': 'area: refactoring'}, {'name': 'api migrations'}]",2022-06-23 12:20:52+00:00,2022-07-31 03:39:16+00:00,3251904.0,"37 days, 15:18:24","[{'comment_id': 905601438, 'comment_body': ""Same as in #1236, it'd be good to leave `in_home_view` in a block but commented out, with a note that we don't support it, etc. Maybe move it to the bottom in a separate block; I think we do that in another type."", 'comment_created': datetime.datetime(2022, 6, 23, 23, 59, 44, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 905604074, 'comment_body': ""What's the rationale here? Did you test this manually? Or is it from some API docs?\r\n\r\nGenerally my understanding is that in_home_view is still present in the API; the idea is to move to the updated version since it's present in all our supported versions and the other is deprecated.\r\n\r\n"", 'comment_created': datetime.datetime(2022, 6, 24, 0, 4, 42, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 933919752, 'comment_body': 'I fixed this minor change in my push before merging.', 'comment_created': datetime.datetime(2022, 7, 31, 3, 32, 47, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}]","[{'commit_sha': 'f665d84bc3e43aab0643c93a8d47366dc6eb3d3a', 'committer_username': 'mounilKshah', 'committer_name': 'Mounil Shah', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 23, 17, 43, 22, tzinfo=datetime.timezone.utc)}]",Mounil Shah,47925568,,User,,22,,86,21
1032026969,Add handling for User update events,"**What does this PR do?**
The PR is for handling any changes made with respect to the users' meta data ie, meta data of the current user and that of other users.

Fixes #988 



**Tested?**
- [x] Manually
- [x] Existing tests (adapted, if necessary)
- [ ] New tests added (for any new behavior)
- [x] Passed linting & tests (each commit)

**Commit flow**
- Only one commit currently: Updates data structures in the codebase as per the events received.

**Notes & Questions**
- Yet to imbibe UI changes for the user events.
",False,1249,https://api.github.com/repos/zulip/zulip-terminal/pulls/1249,https://github.com/zulip/zulip-terminal/pull/1249,open,97,0,3,3,3,25,6,0,"[{'name': 'GSoC'}, {'name': 'size: L'}, {'name': 'has conflicts'}, {'name': 'area: event handling'}, {'name': 'PR awaiting update'}, {'name': 'missing feature: user'}]",2022-08-21 11:50:14+00:00,,0.0,,"[{'comment_id': 950879414, 'comment_body': 'I think this can only be ""update"" for now? Certainly if we only handle that, then it makes sense to make this a literal too.', 'comment_created': datetime.datetime(2022, 8, 21, 17, 48, 55, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 950880954, 'comment_body': ""I'd leave email in but commented, based on the API. It's deprecated and we should be able to use user_id anyhow."", 'comment_created': datetime.datetime(2022, 8, 21, 18, 3, 29, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 950884344, 'comment_body': ""This does provide a set of names which the person object may contain, so supports type checking at some level.\r\n\r\nYou seem to be missing some possible elements of this, though? If some aren't used right now then we can comment them out, with a note to indicate that we don't handle them. That will cause mypy to alert us if we use fields that aren't explicitly listed.\r\n(I referred to https://zulip.com/api/get-events#realm_user-update)\r\n\r\nI know the API refers to it as person, but I think we should use a more specific name for the type here given the module namespace, maybe even `RealmUserEventPerson` to indicate it's only used there.\r\n\r\nFor now I would be happy with the current format with the additional elements, perhaps with blank lines between each group of fields. These type additions would be fine in a separate early commit before you use them.\r\n\r\nHowever, it also doesn't represent the actual API, where eg. if we get full_name then nothing other than the user_id common to all cases should be present? So we should be able to encode that in the typing here. Closer to merging we could consider adjusting the separate commit to improve the typing as I mention above, or even after this PR."", 'comment_created': datetime.datetime(2022, 8, 21, 18, 35, 34, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 950884390, 'comment_body': 'Debug?', 'comment_created': datetime.datetime(2022, 8, 21, 18, 36, 5, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 950885031, 'comment_body': ""Shouldn't person should always be in these events? If not, this is an application error. In some sense this conditional is fine, but if it's not present for some future reason, we'll silently not update anything?"", 'comment_created': datetime.datetime(2022, 8, 21, 18, 42, 19, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 950885141, 'comment_body': ""The line that's common to both branches of the conditional can be outside of it."", 'comment_created': datetime.datetime(2022, 8, 21, 18, 43, 26, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 950886267, 'comment_body': ""Do I understand that this is to avoid updating the personal data if the role is updated?\r\n\r\nDoesn't this function always call `update_realm_user`? If so, can we restructure this to be simpler?"", 'comment_created': datetime.datetime(2022, 8, 21, 18, 52, 56, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 950886618, 'comment_body': 'old code?', 'comment_created': datetime.datetime(2022, 8, 21, 18, 56, 42, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 950887910, 'comment_body': ""Can you skip a lot of this logic by just using realm_user? It's not immutable."", 'comment_created': datetime.datetime(2022, 8, 21, 19, 9, 14, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 956574554, 'comment_body': 'Yeah, it was to print the events containing realm user update. As this is still in draft stage, I thought of keeping it for reference for anybody testing this.', 'comment_created': datetime.datetime(2022, 8, 27, 12, 1, 55, tzinfo=datetime.timezone.utc), 'commenter': 'mounilKshah', 'type': 'User'}, {'comment_id': 956661053, 'comment_body': ""Let's keep the Event types all ending with `Event`. See my other comment if you were confused about me mentioning it could only be 'update'."", 'comment_created': datetime.datetime(2022, 8, 28, 4, 35, 3, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 956661913, 'comment_body': 'When the type is noted like that, it\'s treated as a forward reference to the type, so essentially just becomes `str`. See https://peps.python.org/pep-0484/#forward-references\r\n\r\n> I think this can only be ""update"" for now? Certainly if we only handle that, then it makes sense to make this a literal too.\r\n\r\nWhat I meant here was to use a Literal type, like we do for the event type names (eg. `realm_user` here):\r\nsee https://docs.python.org/3.9/library/typing.html#typing.Literal', 'comment_created': datetime.datetime(2022, 8, 28, 4, 47, 39, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 956662331, 'comment_body': ""The layout looks better here and I can see you've extended them, but they don't seem to match the API still?\r\nThe API link from the last review has more fields than you have here, and I'm not seeing display_email or profile_data? Did you seem them elsewhere? Do the docs need updating?"", 'comment_created': datetime.datetime(2022, 8, 28, 4, 54, 25, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 956662582, 'comment_body': ""If you think it's useful, it's good to leave such things in a separate followup commit, since then cleaning up should be easier and you can label the commit appropriately."", 'comment_created': datetime.datetime(2022, 8, 28, 4, 58, 6, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 956663343, 'comment_body': 'It was fine without the _update suffix here too - we want to maintain consistency with the similar functions, just as with the other event types in api_types.py.', 'comment_created': datetime.datetime(2022, 8, 28, 5, 9, 43, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 956730265, 'comment_body': '`display_email` and `profile_data` are actually present in the commit. Did you mean to say `delivery_email` instead of `display_email`?', 'comment_created': datetime.datetime(2022, 8, 28, 13, 35, 53, tzinfo=datetime.timezone.utc), 'commenter': 'mounilKshah', 'type': 'User'}, {'comment_id': 956742848, 'comment_body': ""I don't see `display_email` in the API, or `profile_data`, but they were in the commit."", 'comment_created': datetime.datetime(2022, 8, 28, 15, 9, 11, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 979267483, 'comment_body': ""In comparing the fields that can be updated, this one stands out as different from the remaining one field possible (custom_profile_field), unless I'm missing another use of email?"", 'comment_created': datetime.datetime(2022, 9, 24, 16, 3, 4, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 979270135, 'comment_body': ""The user_id is common in all cases, so let's specify and build it in the test function.\r\n\r\nRather than setting the variable in the test function, you can alternatively list it as a default argument value, as long as it's a non-mutable value."", 'comment_created': datetime.datetime(2022, 9, 24, 16, 20, 51, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 979270305, 'comment_body': ""There a lot of test cases & ids, so it's simpler to keep them inline - then later we wouldn't have to check where in each list to add/remove/edit them, or to move them around."", 'comment_created': datetime.datetime(2022, 9, 24, 16, 22, 37, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 979271052, 'comment_body': ""I'm guessing the `1` is the index into initial_data that corresponds to `user_id=11`?\r\n\r\nIf that's the case, it would be more reliable to make that explicit in the test code, eg. if the initial data gets reordered at a later stage, this would make this test fail even though it's functionally correct?"", 'comment_created': datetime.datetime(2022, 9, 24, 16, 28, 37, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 979331005, 'comment_body': 'The `email` field does not exist under `RealmUserEventPerson`, rather we get `new_email` from the API. However, in `model.initial_data[""realm_users""]`, we use `email` and not `new_email`. Hence, in the updated code (under `Model._handle_realm_user_events()`, where we now have a conditional for replacing the `new_email` key with the `email` key, mypy returns an error.', 'comment_created': datetime.datetime(2022, 9, 24, 23, 41, 12, tzinfo=datetime.timezone.utc), 'commenter': 'mounilKshah', 'type': 'User'}, {'comment_id': 979331706, 'comment_body': ""Okay, I'll add a comment for this 👍 "", 'comment_created': datetime.datetime(2022, 9, 24, 23, 49, 59, tzinfo=datetime.timezone.utc), 'commenter': 'mounilKshah', 'type': 'User'}, {'comment_id': 979355284, 'comment_body': ""Ah, I see your point. Can we avoid that by moving the conditional into the loop where we've found the user-id?"", 'comment_created': datetime.datetime(2022, 9, 25, 5, 7, 18, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 979355536, 'comment_body': 'OK, let me just read the code again, I may just merge these first two commits roughly as they are.', 'comment_created': datetime.datetime(2022, 9, 25, 5, 10, 21, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}]","[{'commit_sha': '669a834893cef95dd13f05f9f8f856119cc707c4', 'committer_username': 'mounilKshah', 'committer_name': 'Mounil Shah', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 23, 17, 43, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6cfeae46024e94bb03480a296269ba0f3aaf7827', 'committer_username': 'mounilKshah', 'committer_name': 'Mounil Shah', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 23, 17, 43, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '359dd01f48edf7bc559e5a3d88e33b4a2b2ac666', 'committer_username': 'mounilKshah', 'committer_name': 'Mounil Shah', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 23, 17, 43, 22, tzinfo=datetime.timezone.utc)}]",Mounil Shah,47925568,,User,,22,,86,21
1059617829,Add support for keywords in searchbar,"**What does this PR do?**
This PR is to add support for keywords in search bar.

Fixes #638 

Channel discussion:
[Expand search support #T638 #T1258](https://chat.zulip.org/#narrow/stream/206-zulip-terminal/topic/Expand.20search.20support.20.23T638.20.23T1258)

**Tested?**
- [x] Manually
- [x] Existing tests (adapted, if necessary)
- [x] New tests added (for any new behavior)
- [x] Passed linting & tests (each commit)

**Commit flow**
- One commit: Support only for stream and topic keywords

**Notes & Questions**
- This is a WIP PR. It currently only has support for stream and topic name keywords.
- As per the discussions, the plan ahead would be to:
  - Extend support to other keywords for narrows supported by ZT
  - Provide auto-populated text for the current narrow in the search bar
  - Write tests

",False,1258,https://api.github.com/repos/zulip/zulip-terminal/pulls/1258,https://github.com/zulip/zulip-terminal/pull/1258,open,162,7,4,3,2,25,4,0,"[{'name': 'has conflicts'}, {'name': 'size: XL'}, {'name': 'PR needs review'}, {'name': 'area: message search'}]",2022-09-18 19:46:35+00:00,,0.0,,"[{'comment_id': 981890453, 'comment_body': ""Note the conditional fails right now if in all messages - I know that's not covered yet :)\r\n\r\nYour logic appears to be as follows, so let me know if there's a difference. The first method, which you've prefixed with `update_`, adds text onto the search query `text` and returns it. The second method extracts the special prefixes in the result, and converts to the tuple. Also, this PR force sets the narrow - so we need to be extra careful there, like in the previous iteration where it was set to all-messages if no stream (search) text was entered!\r\n\r\nIf the logic as described above is correct, it probably sounds rather complex, difficult to test, and maybe you even wonder why I suggested this approach?\r\n\r\nThe difference is that we don't need to pass the original search text between functions here. The fundamental operations are:\r\n- generate search text for current narrow (the model knows the current narrow, so no args)\r\n- combine that text with the (current) user-entered search text\r\n- translate total search text into `<some format for doing search>` (the tuple right now)\r\n\r\nThis means the first function can be tested very easily given a list of 'standard' non-search narrows we support, and the last with expected inputs from the first (along with various search strings). So depending how you express this, 3 commits might be appropriate in the end.\r\n\r\nLater, the first function can be used to prefill the UI instead :)"", 'comment_created': datetime.datetime(2022, 9, 28, 2, 47, 27, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 981890744, 'comment_body': '1. The logic here may change, but note that due to the guaranteed equality, we can use `""stream""` instead to simplify.\r\n2. It may also be clearer generally if you express what large expressions, here with the replace methods represent (ie. with a new variable) and why it\'s there (by name?).', 'comment_created': datetime.datetime(2022, 9, 28, 2, 48, 13, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 981891106, 'comment_body': 'This seems to be a duplicate?', 'comment_created': datetime.datetime(2022, 9, 28, 2, 49, 10, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 981897094, 'comment_body': ""The name while WIP doesn't matter too much, but now we're firming up the logic, let's make this name more expressive. If I see `check_for_prefixes(something)` in code, it doesn't tell me what it does (I can think of various meanings), or why it returns what it does do - I can look it up in an editor or IDE, but better to read right there :)\r\n\r\nSo, maybe think what goes in the blank:\r\n```python3\r\nsearch_query, search_narrow = self.<BLANK>(final_search_query)\r\n```\r\n\r\nWhile some/many ZT functions don't have docstrings (or comments) since they're older, some are very simple and ideally well-named that it may be sufficient to understand what's happening when they're used without them.\r\n\r\nYou might also rename the other function, if you change the logic of what it does."", 'comment_created': datetime.datetime(2022, 9, 28, 3, 4, 37, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 981900822, 'comment_body': ""We're doing the same word.split operation a lot here, potentially repeatedly, and it likely will appear in other branches I suspect :)"", 'comment_created': datetime.datetime(2022, 9, 28, 3, 13, 26, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 987428814, 'comment_body': ""This looks more complete than the previous version :+1:\r\n\r\nNote that all the internal code refers to the model data. This suggests the function belongs in the model.\r\n\r\nAlso note that we adapt the passed-in string as a return value. It's good to keep each function for one purpose, so leaving the string handling (eg. appending) for the query as something outside of this function."", 'comment_created': datetime.datetime(2022, 10, 5, 0, 18, 29, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 987429436, 'comment_body': ""Using inline 'case' ids for the tests would make it clear what you're testing."", 'comment_created': datetime.datetime(2022, 10, 5, 0, 20, 13, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 987429958, 'comment_body': 'Is this the correct format? My memory is that each sublist is 2 elements long.', 'comment_created': datetime.datetime(2022, 10, 5, 0, 21, 55, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 987431665, 'comment_body': 'Other narrows: all messages, starred.', 'comment_created': datetime.datetime(2022, 10, 5, 0, 26, 33, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 987432821, 'comment_body': ""I wouldn't expect to see spaces around the output search text."", 'comment_created': datetime.datetime(2022, 10, 5, 0, 30, 2, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 987433045, 'comment_body': ""It'd be great to see some 'space-filled' examples here, like with the other function tests."", 'comment_created': datetime.datetime(2022, 10, 5, 0, 30, 50, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 987434570, 'comment_body': 'It would be good to see various of these replacement operations tested - other than testing the code, it also demonstrates the input->output one might expect, on reading the tests.', 'comment_created': datetime.datetime(2022, 10, 5, 0, 35, 15, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 988111416, 'comment_body': 'See https://github.com/zulip/zulip-terminal/blob/main/zulipterminal/model.py#L288, for example.', 'comment_created': datetime.datetime(2022, 10, 5, 16, 18, 10, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 988225221, 'comment_body': ""Yes, I got it now. I actually didn't realise that all the users under `pm_with` are mentioned under the same string."", 'comment_created': datetime.datetime(2022, 10, 5, 18, 32, 42, tzinfo=datetime.timezone.utc), 'commenter': 'mounilKshah', 'type': 'User'}, {'comment_id': 988460446, 'comment_body': 'Still?', 'comment_created': datetime.datetime(2022, 10, 6, 0, 47, 11, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 988592485, 'comment_body': ""My primary remaining concern, given we're potentially taking a pause on this after your work, is this direct setting of the narrow here. Doing so means we potentially don't update other data which would otherwise be set, via eg. model.set_narrow or _narrow_to or something which also updated the UI.\r\n\r\nRight now the positive is that the narrow *shouldn't* change, unless a user enters extra search text - and not all combinations work. For now I'd suggest we alert the user with a simple warning popup (popup_with_message), if the search looks like a complicated search which would require setting the narrow, ie. if the old and new narrows wouldn't match.\r\n\r\nExamples of cases where this can happen is being in all messages, and adding eg. `is:starred some search text`, in which case the narrow changes. That 'works', but then adding `stream:general` or similar does not. So it'd be good to be consistent for now."", 'comment_created': datetime.datetime(2022, 10, 6, 6, 20, 33, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 988596904, 'comment_body': 'Can this be simplified/updated?', 'comment_created': datetime.datetime(2022, 10, 6, 6, 27, 36, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 988599781, 'comment_body': ""Minor: The logic here is fairly simple and sets just one primary name, so a much shorter variable name should be fine, within reason - and make it easier to read :) The text gets returned as the name of the function, so the function name can explain what the 'additional_search_query_text` means on it's own."", 'comment_created': datetime.datetime(2022, 10, 6, 6, 32, 10, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 988602433, 'comment_body': ""As before, I'd expect the output text to not have any surrounding spaces."", 'comment_created': datetime.datetime(2022, 10, 6, 6, 36, 9, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 990701633, 'comment_body': ""This can lead to lead to two narrowing operations for a topic narrow. That's not necessarily bad, but it should be noted, or else worked around."", 'comment_created': datetime.datetime(2022, 10, 8, 22, 16, 41, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 990702649, 'comment_body': 'Update this name given the new implementation.', 'comment_created': datetime.datetime(2022, 10, 8, 22, 24, 29, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1000038852, 'comment_body': 'This function no longer just extracts keywords, it also sets the base narrow.', 'comment_created': datetime.datetime(2022, 10, 20, 0, 30, 50, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1000040301, 'comment_body': 'Spelling?', 'comment_created': datetime.datetime(2022, 10, 20, 0, 34, 47, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1000040791, 'comment_body': 'Are these changes just tidying, or required? If tidying, better to keep in a separate commit.', 'comment_created': datetime.datetime(2022, 10, 20, 0, 36, 6, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1009887015, 'comment_body': 'They are required changes. The `final_narrow` is created only when the narrow exists in the org, else the test case fails.', 'comment_created': datetime.datetime(2022, 10, 31, 21, 26, 34, tzinfo=datetime.timezone.utc), 'commenter': 'mounilKshah', 'type': 'User'}]","[{'commit_sha': 'c0ed5ac6044665c4d57c3ba09455605ed68bb812', 'committer_username': 'mounilKshah', 'committer_name': 'Mounil Shah', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 23, 17, 43, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a5531c0a2c9b8689f323a3e5f2de2dfbd8f2c7e', 'committer_username': 'mounilKshah', 'committer_name': 'Mounil Shah', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 23, 17, 43, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '912bcbca03195276f3bb5c66122a2e0b18971bde', 'committer_username': 'mounilKshah', 'committer_name': 'Mounil Shah', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 23, 17, 43, 22, tzinfo=datetime.timezone.utc)}]",Mounil Shah,47925568,,User,,22,,86,21
981064364,[WIP] Add subscribe/unsubscribe feature.,"### Moved to #1266

**What does this PR do?**
This PR is to add subscribe-unsubcribe toggle for all streams present in the stream. 
Currently, the commit in the PR only works for a single stream.
Partial fix for #570 



Discussion topic:
[zulip-terminal>Add provision to subscribe to streams](https://chat.zulip.org/#narrow/stream/206-zulip-terminal/topic/Add.20provision.20to.20subscribe.20to.20streams)

**Tested?**
- [ ] Manually
- [ ] Existing tests (adapted, if necessary)
- [ ] New tests added (for any new behavior)
- [ ] Passed linting & tests (each commit)

**Commit flow**
- Popup for subscribe/unsubscribe toggle

**Notes & Questions**
- Works only for one stream and it has to be in the same session. Needs to be extended to all streams
- Does not update the stream view, nor the messages in the MiddleColumn


**Visual changes**
- To be added",False,1240,https://api.github.com/repos/zulip/zulip-terminal/pulls/1240,https://github.com/zulip/zulip-terminal/pull/1240,closed,0,0,0,0,0,0,2,0,"[{'name': 'size: XS'}, {'name': 'area: event handling'}]",2022-06-28 08:03:30+00:00,2022-10-15 13:06:21+00:00,9435771.0,"109 days, 5:02:51",[],[],Mounil Shah,47925568,,User,,22,,86,21
976806166,[WIP] Migrate message['subject'] to message['topic'],"**What does this PR do?**
This commit migrates the ZT to newer API elements. Here, the migration is from message['subject'] to message['topic'].
Partial fix for #965

Discussion:
[#zulip-terminal>Update to modern API elements (support v2.1) #T965](https://chat.zulip.org/#narrow/stream/206-zulip-terminal/topic/Update.20to.20modern.20API.20elements.20.28support.20v2.2E1.29.20.23T965)

**Tested?**
- [x] Manually
- [x] Existing tests (adapted, if necessary)
- [ ] New tests added (for any new behavior)
- [ ] Passed linting & tests (each commit)

**Commit flow**
- First commit updates message element from `subject` to `topic`
- Second commit refactors the tests to accommodate this migration

**Notes & Questions**
- Fixes item 4 on #965 
",False,1236,https://api.github.com/repos/zulip/zulip-terminal/pulls/1236,https://github.com/zulip/zulip-terminal/pull/1236,open,74,65,12,1,4,6,5,0,"[{'name': 'has conflicts'}, {'name': 'size: XL'}, {'name': 'area: refactoring'}, {'name': 'api migrations'}, {'name': 'area: API spec'}]",2022-06-23 08:25:42+00:00,,0.0,,"[{'comment_id': 905586444, 'comment_body': 'This is a separate migration. It may be OK in this PR, but certainly in another commit.', 'comment_created': datetime.datetime(2022, 6, 23, 23, 37, 4, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 905586763, 'comment_body': 'As per a comment in the stream, it may be cleaner to separate the compose and message parts of the topic migration into separate commits (with associated test changes in each).', 'comment_created': datetime.datetime(2022, 6, 23, 23, 37, 59, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 905588157, 'comment_body': ""I'd suggest we comment out the subject, with a trailing comment referring to the migration.\r\nIn an ideal world that would mean using subject would cause a type error, but currently this TypedDict has total=False, so that won't happen (yet)."", 'comment_created': datetime.datetime(2022, 6, 23, 23, 39, 13, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 905589860, 'comment_body': 'Do you have support for this migration?', 'comment_created': datetime.datetime(2022, 6, 23, 23, 40, 55, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 905591924, 'comment_body': 'Do you have support for this migration in the API?', 'comment_created': datetime.datetime(2022, 6, 23, 23, 42, 49, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 905679744, 'comment_body': ""No. As `subject` was changed to `topic`, I felt it would be good to rename this accordingly. But as the API is still the same, I'll retain the original names for this and `orig_topic`"", 'comment_created': datetime.datetime(2022, 6, 24, 3, 3, 9, tzinfo=datetime.timezone.utc), 'commenter': 'mounilKshah', 'type': 'User'}]","[{'commit_sha': '57df32ebc28c7add8dc671cee1f9f1bb34b61553', 'committer_username': 'mounilKshah', 'committer_name': 'Mounil Shah', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 23, 17, 43, 22, tzinfo=datetime.timezone.utc)}]",Mounil Shah,47925568,,User,,22,,86,21
900584830,Showing Bot Markers.,"<!-- Please see https://github.com/zulip/zulip-terminal#contributor-guidelines ! -->

**What does this PR do?**  <!-- Overall description goes here -->
Adds bot markers to bots.

<!-- If fixing a filed bug or new feature, add 'Fixes #<issue>' or 'Partial fix for #<issue>' -->
Partial fix for #1155. 

<!-- Add a link to a discussion on chat.zulip.org, if relevant -->

**Tested?** <!-- Fine to leave some of these unchecked if this is a draft/work-in-progress -->
- [x] Manually
- [x] Existing tests (adapted, if necessary)
- [ ] New tests added (for any new behavior)
- [x] Passed linting & tests (each commit)
<!-- Code must pass CI (GitHub Actions) before merging - look for the green tick! -->

<!-- See https://github.com/zulip/zulip-terminal#commit-style -->
**Commit flow** <!-- if more than one commit; add/delete/fill-in as appropriate -->
- first commit adds BOT_MARKER to symbols.py. Currently set to robot face, U+1F916 (🤖). 
- second commit adds necessary changes in ui_mappings.py to associate BOT_MARKER with the ""bot"" status, as compared to the ""inactive"" status they were assigned earlier.
- third commit checks if it is indeed a bot and associates the marker to it. 
<!-- For example:
- first commit doing some thing
- maybe multiple commits doing similar things
-->

**Notes & Questions** <!-- if any; add/delete/fill-in as appropriate -->
- unsure about how to fix the black background against the robot emoji. I'm guessing it's because it's not a traditional character? I couldn't really choose a better character.
<!-- For example:
- this doesn't include feature X (yet?)
- unsure about Y
- should this do Z?
-->


**Visual changes** <!-- if any; add/delete/fill-in with screenshot/diagram as appropriate -->

<img width=""381"" alt=""Screenshot 2022-04-06 at 12 00 38 AM"" src=""https://user-images.githubusercontent.com/76529011/161825214-a8831408-2d17-478c-af77-40c1d9c0fece.png"">

",False,1187,https://api.github.com/repos/zulip/zulip-terminal/pulls/1187,https://github.com/zulip/zulip-terminal/pull/1187,closed,33,9,10,7,9,10,4,0,"[{'name': 'area: UI'}, {'name': 'size: M'}, {'name': 'PR awaiting update'}, {'name': 'PR replaced by another PR'}]",2022-04-05 18:31:52+00:00,2023-04-12 21:34:09+00:00,32151737.0,"372 days, 3:02:17","[{'comment_id': 867222051, 'comment_body': 'This is not a pawn unicode character, in this first commit.', 'comment_created': datetime.datetime(2022, 5, 6, 21, 18, 25, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 867222396, 'comment_body': 'Was this supposed to be in the first commit?', 'comment_created': datetime.datetime(2022, 5, 6, 21, 19, 9, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 867222610, 'comment_body': 'This change looks like a reformat that belongs in another commit?', 'comment_created': datetime.datetime(2022, 5, 6, 21, 19, 40, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 867222851, 'comment_body': 'Same here with the reformat. This should go where the original code was.', 'comment_created': datetime.datetime(2022, 5, 6, 21, 20, 15, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 893112248, 'comment_body': ""Bots don't have status - hence the marker - so let's avoid doing the work just above this and treat a bot specially, like with the user running the application, in a block further up."", 'comment_created': datetime.datetime(2022, 6, 9, 6, 22, 9, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 939547834, 'comment_body': ""Did you understand my suggestion? You've not replied or updated for it."", 'comment_created': datetime.datetime(2022, 8, 6, 16, 27, 8, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 939548449, 'comment_body': ""Have you tested this? See Mounil's comment on the PR to test for that bot user, eg. Notification bot or Welcome bot."", 'comment_created': datetime.datetime(2022, 8, 6, 16, 33, 37, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 939583640, 'comment_body': 'This needs to be in more than one style (and aligned) - I still get the previous bad styling/highlighting behavior in eg. gruvbox_dark.\r\n\r\nWhile arguable, I would also place this commit before the other in order to have good styling available before you use it. The other commit may still ""work"" (if incompletely/wrongly visually), but in addition it reads strangely, specifically like a bugfix.', 'comment_created': datetime.datetime(2022, 8, 6, 22, 56, 46, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 939599663, 'comment_body': ""This is different behavior than what you had before, and what we have now, so it at least warrants mentioning what changed in the commit text. I'd almost suggest this could be a separate commit, since it's a different change - the ordering, not the icon."", 'comment_created': datetime.datetime(2022, 8, 7, 3, 3, 47, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 940852868, 'comment_body': 'Rebased anda added a new commit.', 'comment_created': datetime.datetime(2022, 8, 9, 3, 17, 30, tzinfo=datetime.timezone.utc), 'commenter': 'plugyawn', 'type': 'User'}]","[{'commit_sha': '0ed43fa45ed912e00fccc100d06d6f708f451ffd', 'committer_username': 'plugyawn', 'committer_name': 'Progyan', 'committer_email': 'progyan.das@iitgn.ac.in', 'commit_date': datetime.datetime(2020, 12, 23, 15, 55, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b1e3ea6129e01e54496c69c10adf7e27d8ac80a8', 'committer_username': 'plugyawn', 'committer_name': 'Progyan', 'committer_email': 'progyan.das@iitgn.ac.in', 'commit_date': datetime.datetime(2020, 12, 23, 15, 55, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e036de29034a3db08623d6ae08aad7315235657', 'committer_username': 'plugyawn', 'committer_name': 'Progyan', 'committer_email': 'progyan.das@iitgn.ac.in', 'commit_date': datetime.datetime(2020, 12, 23, 15, 55, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c0a29a79f4f575e175b469404caa5b5403a9e6c7', 'committer_username': 'plugyawn', 'committer_name': 'Progyan', 'committer_email': 'progyan.das@iitgn.ac.in', 'commit_date': datetime.datetime(2020, 12, 23, 15, 55, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34ac8853eea04f0c774d3ae388a0b88038b2fb3d', 'committer_username': 'plugyawn', 'committer_name': 'Progyan', 'committer_email': 'progyan.das@iitgn.ac.in', 'commit_date': datetime.datetime(2020, 12, 23, 15, 55, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c73c5df97db7287a8ecc3ccca998ec3a13a4168f', 'committer_username': 'plugyawn', 'committer_name': 'Progyan', 'committer_email': 'progyan.das@iitgn.ac.in', 'commit_date': datetime.datetime(2020, 12, 23, 15, 55, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7004c87897d1744c5a02c976afc7fd3d91f59dc5', 'committer_username': 'plugyawn', 'committer_name': 'Progyan', 'committer_email': 'progyan.das@iitgn.ac.in', 'commit_date': datetime.datetime(2020, 12, 23, 15, 55, 22, tzinfo=datetime.timezone.utc)}]",Progyan,76529011,progyan.das@iitgn.ac.in,User,,64,,19,57
913128563,hotkeys: Add linting for hotkeys.,"Fixes #1209

<!-- Please see https://github.com/zulip/zulip-terminal#contributor-guidelines ! -->
Adds GitHub Actions and changes to ``lint-all`` for linting ``generate_hotkeys.py``

**What does this PR do?**  <!-- Overall description goes here -->

<!-- If fixing a filed bug or new feature, add 'Fixes #<issue>' or 'Partial fix for #<issue>' -->

<!-- Add a link to a discussion on chat.zulip.org, if relevant -->

**Tested?** <!-- Fine to leave some of these unchecked if this is a draft/work-in-progress -->
- [x] Manually
- [ ] Existing tests (adapted, if necessary)
- [ ] New tests added (for any new behavior)
- [x] Passed linting & tests (each commit)
<!-- Code must pass CI (GitHub Actions) before merging - look for the green tick! -->

<!-- See https://github.com/zulip/zulip-terminal#commit-style -->
**Commit flow** <!-- if more than one commit; add/delete/fill-in as appropriate -->
<!-- For example:
- first commit doing some thing
- maybe multiple commits doing similar things
-->

**Notes & Questions** <!-- if any; add/delete/fill-in as appropriate -->
<!-- For example:
- this doesn't include feature X (yet?)
- unsure about Y
- should this do Z?
-->

**Interactions** <!-- if any; add/delete/fill-in as appropriate -->
<!-- eg.
- Waiting on #<PR>
- Blocks #<PR>
-->

**Visual changes** <!-- if any; add/delete/fill-in with screenshot/diagram as appropriate -->
",True,1210,https://api.github.com/repos/zulip/zulip-terminal/pulls/1210,https://github.com/zulip/zulip-terminal/pull/1210,closed,153,16,3,11,6,89,3,0,"[{'name': 'area: hotkeys'}, {'name': 'size: XL'}, {'name': 'area: infrastructure'}]",2022-04-19 13:29:24+00:00,2022-08-21 02:39:16+00:00,10674592.0,"123 days, 13:09:52","[{'comment_id': 866528868, 'comment_body': 'I suppose duplicate checking need not be done for each `help_text` inside the for loop?', 'comment_created': datetime.datetime(2022, 5, 6, 6, 37, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 866529927, 'comment_body': 'Continuing the previous comment, if `for key in keys_list` can be pulled out of the for loop then I suppose the above can also be combined into the for loop below?', 'comment_created': datetime.datetime(2022, 5, 6, 6, 39, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 866530545, 'comment_body': 'Any reason for keeping the above comments?', 'comment_created': datetime.datetime(2022, 5, 6, 6, 40, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 867437429, 'comment_body': 'I meant to say, if we can move duplicate checking to the end, then we can do everything in 1 for loop itself.', 'comment_created': datetime.datetime(2022, 5, 8, 5, 31, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 867437706, 'comment_body': ""Here, do you mean to `extend` instead of `append`? \r\nAs appending would not check if, `q` for example is also in `['ctrl a', 'q']`"", 'comment_created': datetime.datetime(2022, 5, 8, 5, 34, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 867439454, 'comment_body': 'I will change it to extend', 'comment_created': datetime.datetime(2022, 5, 8, 5, 57, 16, tzinfo=datetime.timezone.utc), 'commenter': 'srdeotarse', 'type': 'User'}, {'comment_id': 867452443, 'comment_body': 'Note that you have to change the rest of the `key_list` logic as well.', 'comment_created': datetime.datetime(2022, 5, 8, 8, 7, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 869790450, 'comment_body': ""What's the motivation for this refactoring?"", 'comment_created': datetime.datetime(2022, 5, 11, 1, 16, 19, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 869792052, 'comment_body': 'If this is just for checking duplicates, please name it more specifically than this.', 'comment_created': datetime.datetime(2022, 5, 11, 1, 21, 5, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 869792210, 'comment_body': 'This may be simpler with a comprehension?', 'comment_created': datetime.datetime(2022, 5, 11, 1, 21, 38, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 869792335, 'comment_body': 'Exit with what value?', 'comment_created': datetime.datetime(2022, 5, 11, 1, 22, 1, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 870108499, 'comment_body': 'GitHub Actions cannot import from ``zulipterminal.config.keys`` thus the refactoring of imports.', 'comment_created': datetime.datetime(2022, 5, 11, 9, 56, 37, tzinfo=datetime.timezone.utc), 'commenter': 'srdeotarse', 'type': 'User'}, {'comment_id': 871440690, 'comment_body': 'You can even bring it out of the for loop to do it just the once.', 'comment_created': datetime.datetime(2022, 5, 12, 14, 18, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 871442614, 'comment_body': ""Not sure I like the new name. Can't think of a better one right now though."", 'comment_created': datetime.datetime(2022, 5, 12, 14, 20, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 871456950, 'comment_body': 'Sure, I will bring that comprehension out of the for loop.', 'comment_created': datetime.datetime(2022, 5, 12, 14, 32, 29, tzinfo=datetime.timezone.utc), 'commenter': 'srdeotarse', 'type': 'User'}, {'comment_id': 873096697, 'comment_body': ""This kind of explanation belongs in the commit text, and possibly a comment in the file.\r\n\r\nUnless I missed it, you didn't discuss what error you may have had and why you took this approach.\r\n\r\nIt's good you separated this out into another commit, since it's clearer it's a refactor."", 'comment_created': datetime.datetime(2022, 5, 15, 1, 49, 37, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 889497728, 'comment_body': 'What is the reasoning here for using the second `dict` inside the main `dict`?\r\nLater `categories[action]` is anyway converted into a list of tuples using `items()`.\r\nSo why not just store it as a list of tuples in the first place?\r\n\r\nAnother point here is, you are looping through the large ~70 `KEY_BINDINGS` for every category (6). Instead why not try using a `defaultdict(list)` and run through `KEY_BINDINGS` only once?', 'comment_created': datetime.datetime(2022, 6, 4, 7, 17, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 889498107, 'comment_body': ""Here why do we want to generate the `ORIGINAL_OUTPUT_FILE`, i.e., not exit, even though it's not in sync?"", 'comment_created': datetime.datetime(2022, 6, 4, 7, 22, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 889498291, 'comment_body': 'I believe this can be pulled out of the inner for loop?', 'comment_created': datetime.datetime(2022, 6, 4, 7, 24, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 889498692, 'comment_body': ""I'm not aware of the style here. Is it basically everything except numbers and full stop?\r\n(as the above doesn't have all special characters?)"", 'comment_created': datetime.datetime(2022, 6, 4, 7, 28, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 889498860, 'comment_body': 'You can also use `re.compile` once before the for loop to speed up the regex matching.', 'comment_created': datetime.datetime(2022, 6, 4, 7, 30, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 889498970, 'comment_body': 'We might want to add ""detected."" at the end of this print statement?', 'comment_created': datetime.datetime(2022, 6, 4, 7, 32, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 889499615, 'comment_body': 'This help text is a bit hard to read and understand. Maybe something like `""Lint hotkeys.md for key description style and key duplication""`?', 'comment_created': datetime.datetime(2022, 6, 4, 7, 39, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 889499914, 'comment_body': 'Does `""--lint-only""` sound better here than `""--check-only""`?', 'comment_created': datetime.datetime(2022, 6, 4, 7, 43, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 889647104, 'comment_body': ""`isort` uses `--check-only`, which is where I heard it before I expect. I'm not sure what `zulint` uses in the main project, if there's a similar flag."", 'comment_created': datetime.datetime(2022, 6, 5, 4, 30, 33, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 889651284, 'comment_body': ""This isn't a refactor here, as you're changing the behavior.\r\n\r\nAlso, this is now never going to update the original file automatically, which it did before?\r\n\r\nMy original thought was to perhaps extract the generation code under this line into a function that would write to the appropriate file object, which you could do in a refactor commit first. However, while it is more explicit doing a direct file comparison, we might instead compare the contents of the existing file with the string that the generation function would write - so the extracted function would instead just generate a string?"", 'comment_created': datetime.datetime(2022, 6, 5, 5, 30, 17, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 889737090, 'comment_body': 'Best to use a named argument here for clarity.', 'comment_created': datetime.datetime(2022, 6, 5, 21, 8, 2, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 889739792, 'comment_body': ""This symbol indicates there's a missing newline at the end of the file."", 'comment_created': datetime.datetime(2022, 6, 5, 21, 36, 18, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 892043013, 'comment_body': 'Why the change here?', 'comment_created': datetime.datetime(2022, 6, 8, 8, 0, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 892050303, 'comment_body': ""Let's try an see if we can simplify the diffs here.\r\nWhy not first create the functions in their original place in one commit. Then change the ordering on those functions in another commit. We can squash them later while merging, if needed.\r\n\r\nAlso, I don't think we need this and the below comment now that they are pretty obvious?"", 'comment_created': datetime.datetime(2022, 6, 8, 8, 7, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 892060181, 'comment_body': 'Here as well, we can keep the original style of:\r\n```python\r\nhotkeys_file_string += (\r\n    f""## {HELP_CATEGORIES[action]}\\n""\r\n    ""|Command|Key Combination|\\n""\r\n    ""| :--- | :---: |\\n""\r\n)\r\n```\r\nwhich I\'m hoping would improve the diffs, if `categories = read_help_categories()` was inserted inside `with open` in the previous commit.', 'comment_created': datetime.datetime(2022, 6, 8, 8, 17, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 892267728, 'comment_body': ""According to your suggestion of using a defaultdict(list) for categories, and loping through 70 ``KEY_BINDINGS`` at once, order of categories in defaultdict is according to order of keys in ``config/keys`` which don't follow the order of ``HELP_CATEGORIES``. Therefore, I have used the ``HELP_CATEGORIES`` ordering."", 'comment_created': datetime.datetime(2022, 6, 8, 11, 56, 53, tzinfo=datetime.timezone.utc), 'commenter': 'srdeotarse', 'type': 'User'}, {'comment_id': 892268995, 'comment_body': 'Sure, I will remove the comments and split the ordering of functions into 2 commits.', 'comment_created': datetime.datetime(2022, 6, 8, 11, 58, 21, tzinfo=datetime.timezone.utc), 'commenter': 'srdeotarse', 'type': 'User'}, {'comment_id': 892446546, 'comment_body': 'Here, the `various_key_combinations` is printed with the `kbd` tags. I think it would be more readable if it is written without the tags.', 'comment_created': datetime.datetime(2022, 6, 8, 14, 20, 32, tzinfo=datetime.timezone.utc), 'commenter': 'mounilKshah', 'type': 'User'}, {'comment_id': 893477453, 'comment_body': 'Aah, I see. Makes sense.', 'comment_created': datetime.datetime(2022, 6, 9, 13, 4, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 893483797, 'comment_body': 'The question above was to see if a regex like `""^[^\\d.]*$""` would be more suitable.\r\nI\'d wait for @neiljp to clarify the description style here.', 'comment_created': datetime.datetime(2022, 6, 9, 13, 10, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 893598273, 'comment_body': 'For the ``help_text`` description style, text string except ``.`` and some ``special characters`` are working for now. But, exactly what ``special_characters`` should be allowed that needs some discussion. ', 'comment_created': datetime.datetime(2022, 6, 9, 14, 44, 29, tzinfo=datetime.timezone.utc), 'commenter': 'srdeotarse', 'type': 'User'}, {'comment_id': 894778735, 'comment_body': 'Earlier also listing ``categories`` into dict was outside ``with open``. So I think diff is clearer if ``categories = read_help_categories`` is outside ``with open``', 'comment_created': datetime.datetime(2022, 6, 10, 18, 0, 32, tzinfo=datetime.timezone.utc), 'commenter': 'srdeotarse', 'type': 'User'}, {'comment_id': 894984569, 'comment_body': ""Here don't move `OUTPUT_FILE` and `SCRIPT_NAME` to the top of the functions, then look at the diffs.\r\nYou can also move the creation of `various_key_combination()` into another commit. That will make the diffs even more easier to read."", 'comment_created': datetime.datetime(2022, 6, 11, 6, 26, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 894984878, 'comment_body': ""Here, I meant all such multi-line `write()`'s. You missed atleast one at the top.\r\nRe categories, I meant change the position in the previous commit. Try with and without this and see the difference."", 'comment_created': datetime.datetime(2022, 6, 11, 6, 30, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 908117600, 'comment_body': 'Use the same multiline format as before here as well', 'comment_created': datetime.datetime(2022, 6, 28, 7, 11, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 908120300, 'comment_body': 'This can go into a different commit as `get_hotkeys_file_string` is a refactor while `compare_hotkeys_file` is a new feature.', 'comment_created': datetime.datetime(2022, 6, 28, 7, 14, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 908125929, 'comment_body': ""Maybe it's better to add this function in one commit then add `--check-only` and main changes in another commit."", 'comment_created': datetime.datetime(2022, 6, 28, 7, 20, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 908128349, 'comment_body': 'Maybe bring this up on the stream then.', 'comment_created': datetime.datetime(2022, 6, 28, 7, 23, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 908131104, 'comment_body': 'Did you mean `hotkeys.md` here?', 'comment_created': datetime.datetime(2022, 6, 28, 7, 26, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 908138667, 'comment_body': 'Here as well.', 'comment_created': datetime.datetime(2022, 6, 28, 7, 34, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 910606184, 'comment_body': 'Using `hotkeys.md` instead of `Hot Keys` makes sense in both this and the below print statements as well.', 'comment_created': datetime.datetime(2022, 6, 30, 4, 58, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 918568435, 'comment_body': 'This will give a different behaviour. Here, I meant either create the `lint_hotkeys_file()` function in 1 commit and argparse and check-only related changes in another or do it the other way round. This is because there is a lot happening in this commit.', 'comment_created': datetime.datetime(2022, 7, 12, 5, 43, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 918571355, 'comment_body': ""After resolving errors you are supposed to run linting again to check if there are no more errors. (We want to avoid juggling between 2 commands.)\r\nOnce this says `no linting errors`, we are anyway comparing the 2 files where it will say `the files are not in sync` if that's the case."", 'comment_created': datetime.datetime(2022, 7, 12, 5, 49, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 918571929, 'comment_body': 'Here if the files are not in sync then print `Run generate_hotkeys....` and exit with exit_flag = 1', 'comment_created': datetime.datetime(2022, 7, 12, 5, 50, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 918578054, 'comment_body': ""Re this commit text, you shouldn't be to refer to the previous git history because once it's merged it's like it never existed so it wouldn't make sense unless it's for the reviewer. You should mostly talk about what this commit is doing."", 'comment_created': datetime.datetime(2022, 7, 12, 6, 3, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 918579789, 'comment_body': 'Here you can do both replaces one after the other, like so.\r\n`str.replace().replace()`', 'comment_created': datetime.datetime(2022, 7, 12, 6, 6, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 919136336, 'comment_body': 'I should add ``Run generate_hotkeys....`` in ``compare_hotkeys_file`` function if files are not in sync, as we need to instruct running the command every time hot keys are not in sync.', 'comment_created': datetime.datetime(2022, 7, 12, 15, 51, 19, tzinfo=datetime.timezone.utc), 'commenter': 'srdeotarse', 'type': 'User'}, {'comment_id': 920765936, 'comment_body': 'But then when you run `./tootls/generate_hotkeys` it will show `Run ./tootls/generate_hotkeys`.', 'comment_created': datetime.datetime(2022, 7, 14, 5, 32, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 920767414, 'comment_body': 'I think you undid whatever you did here? ', 'comment_created': datetime.datetime(2022, 7, 14, 5, 36, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 920769725, 'comment_body': 'Maybe just say, ""Rerun this command after resolving errors in config/keys.py"".\r\n\r\nAlso the thing is we are effectively linting the markdown file but we are doing it my linting keys.py. So it might confuse the user as to what they should edit if says ""to lint hotkeys.md""', 'comment_created': datetime.datetime(2022, 7, 14, 5, 40, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 921804273, 'comment_body': 'Oh black took effect. Why not just use `key_combinations_list` in the print statement instead of undoing whatever was done in the `various_key_combinations()` function.  (What does `"" / "".join(key_combinations_list)` look like?)', 'comment_created': datetime.datetime(2022, 7, 15, 4, 38, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 921804521, 'comment_body': ""Also I don't like that fact that `various_key_combinations` is both a variable name and a function name."", 'comment_created': datetime.datetime(2022, 7, 15, 4, 39, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 922688348, 'comment_body': 'I have used ``"" / "".join(key_combinations_list)`` in my recent commit, it shows key combinations like ``ctrl _`` instead of earlier ``ctrl + _`` and also for two key combinations it shows something like ``up / ctrl p``.', 'comment_created': datetime.datetime(2022, 7, 16, 14, 52, 44, tzinfo=datetime.timezone.utc), 'commenter': 'srdeotarse', 'type': 'User'}, {'comment_id': 922830429, 'comment_body': 'I think it makes sense to show it this way as we are anyway asking them to edit config/keys.py (`ctlr _`) and not the markdown file (`ctrl + _`). The other one might be confusing if we show markdown and expect them to edit python.', 'comment_created': datetime.datetime(2022, 7, 17, 13, 1, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 924126666, 'comment_body': ""I don't think you have updated this, i.e., removing this from the `compare` function and adding it here."", 'comment_created': datetime.datetime(2022, 7, 19, 6, 55, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 924130315, 'comment_body': 'you could probably squash this with the linting commit.', 'comment_created': datetime.datetime(2022, 7, 19, 7, 0, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 924132714, 'comment_body': 'You can probably split this commit into 2 since a lot is happening here. One for checking description style and the other for checking key combination duplication.', 'comment_created': datetime.datetime(2022, 7, 19, 7, 3, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 931053869, 'comment_body': 'This probably belongs in the next commit?', 'comment_created': datetime.datetime(2022, 7, 27, 13, 19, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 931061074, 'comment_body': 'Lets just say `No hotkey linting errors`? As it maybe confusing if there are `no errors in hotkeys.md` but you are still asking me to `update hotkeys.md`', 'comment_created': datetime.datetime(2022, 7, 27, 13, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 948637419, 'comment_body': ""If this was anything other than docstring, it would have been reformatted by black, but this is one thing black won't do for us, so we need to wrap it (and others) sensibly ourselves."", 'comment_created': datetime.datetime(2022, 8, 18, 4, 26, 4, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 948638994, 'comment_body': ""The commit title isn't accurate - yes, you're refactoring into functions, but you're *also* refactoring it to generate the text first and write it at the end.\r\n\r\nI would suggest putting that second refactor (into string-then-write form) first in a commit before this, then have this commit but with the extraction of the function for the writing of the file at the same time (which you have in the last refactor commit right now)."", 'comment_created': datetime.datetime(2022, 8, 18, 4, 30, 15, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 948640161, 'comment_body': ""I'm not really convinced about the benefit of breaking out this small function. We can leave it in for now and drop the commit later if that's the case."", 'comment_created': datetime.datetime(2022, 8, 18, 4, 33, 45, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 948643540, 'comment_body': 'The return value is not used here. Is that intentional?', 'comment_created': datetime.datetime(2022, 8, 18, 4, 42, 28, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 948648269, 'comment_body': ""I would expect a little more detail as to what it does (and also by default).\r\n\r\nThe linting is only with the 'check only' option after all."", 'comment_created': datetime.datetime(2022, 8, 18, 4, 54, 29, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 948648732, 'comment_body': ""Unless you plan on calling `main` as `main()`, then I'm not sure why you have a default argument here."", 'comment_created': datetime.datetime(2022, 8, 18, 4, 55, 38, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 948692861, 'comment_body': ""If a function returns a bool then it's often useful to name it in a way that reads well in a conditional context. While you've not used it above - though maybe you could avoid writing the file if they're the same? - we'd currently have:\r\n```python3\r\nif compare_hotkeys_file(some_string):\r\n    ...\r\n```\r\nCompare that to something like: (if I understand the code)\r\n```python3\r\nif current_file_matches_string(some_string):\r\n    ...\r\n```\r\nFunctionally they're the same, but the latter is likely clearer for someone trying to understand the code (including yourself, eg. some years later!).\r\n\r\nOther bool-returning functions might start with `is_` or `has_` for similar reasons, ie. they're yes/no questions."", 'comment_created': datetime.datetime(2022, 8, 18, 6, 15, 53, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 948709316, 'comment_body': 'check_duplicate_keys appears unused in this commit.', 'comment_created': datetime.datetime(2022, 8, 18, 6, 41, 17, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 948711548, 'comment_body': 'This is inaccurate with split commits.', 'comment_created': datetime.datetime(2022, 8, 18, 6, 44, 30, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 948720697, 'comment_body': ""> Maybe it's better to add this function in one commit then add --check-only and main changes in another commit.\r\n\r\nIn the main app I would definitely agree - it would be difficult to split commits otherwise since there are layers of functions calling each other which could make a commit very large. In that case it can be clearer to define new functions (and their tests to check behavior), then incrementally connect them together. The alternative is to make an initial valid working feature and then improve it, which I think we could do here.\r\n\r\nWhen there are tests then it builds confidence in the code, so having functionality built up over multiple commits is less concerning; here we're mainly relying upon manual testing, so I'd favor the --check-only be right after this commit, and that would also make it easier to squash them back together before merging if we wished."", 'comment_created': datetime.datetime(2022, 8, 18, 6, 56, 42, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 948722013, 'comment_body': 'It would be better to break this string into multiple strings which the interpreter will put together automatically (no need for `+`) - ie. avoid a very long string.', 'comment_created': datetime.datetime(2022, 8, 18, 6, 58, 22, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 948724032, 'comment_body': 'It would be good to have hotkeys.md in a variable, to avoid the duplication.', 'comment_created': datetime.datetime(2022, 8, 18, 7, 1, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 948726350, 'comment_body': 'This should be `sys.exit`.', 'comment_created': datetime.datetime(2022, 8, 18, 7, 3, 54, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 949408260, 'comment_body': '``description="" Generate or update hotkeys.md file based on changes in config/keys.py by default. To lint hotkeys add \'--check-only\' option.""``\r\nHow about this description? @neiljp ', 'comment_created': datetime.datetime(2022, 8, 18, 17, 21, 14, tzinfo=datetime.timezone.utc), 'commenter': 'srdeotarse', 'type': 'User'}, {'comment_id': 949459386, 'comment_body': ""The first sentence is all that's necessary - I think this is only shown in the help text, and in that case the option will be listed below. So if the option is well-described, we don't need to include it here.\r\n\r\nThe 'by default' could be in parentheses, perhaps? As I mentioned elsewhere, it would be cleaner to use string substitution for the file names which are used throughout, and likely refer to the variables in docstrings instead.\r\n(alternatively, some of those functions could take in file parameters, but let's leave that change for this PR)"", 'comment_created': datetime.datetime(2022, 8, 18, 18, 23, 13, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 949496442, 'comment_body': ""Thanks for pointing this out @Rohitth007, though I think this was in the original version from early 2021?\r\n\r\nIt's a good refactor to have, though being outside of the main application I'm not convinced the optimization is required :) However, it's good this filtering pattern, as this might be more warranted where we partition a larger data-structure there, eg. users based on presence."", 'comment_created': datetime.datetime(2022, 8, 18, 18, 57, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 949509547, 'comment_body': 'Having tested this today (via adjusting the regex), the ""should..."" part runs into the end of the key output - so maybe actually output it on the next line with a slight indent?', 'comment_created': datetime.datetime(2022, 8, 18, 19, 13, 43, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 949516193, 'comment_body': ""I just looked at this today separately after following earlier discussions in the PR and stream. I think this matches the original intent to some extent, ie. avoiding a `.` at the end of the description, though in addition also excluding digits, which I don't think was discussed?\r\n\r\nThat said, I think I prefer the original regex you had, since it should ensure some degree of consistency with what we have now - though possibly we want ` ` in place of `\\s` to avoid newlines, tabs, etc\r\n\r\nIn any case, this seems like something we may want to change in future, so having it as a constant at the top seems useful, much like we have for KEYS_TO_EXCLUDE right now."", 'comment_created': datetime.datetime(2022, 8, 18, 19, 23, 3, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 949517691, 'comment_body': 'I added a separate comment for this just now; the original aim was eg. detect `.`, but something like the original regex above would benefit consistency.', 'comment_created': datetime.datetime(2022, 8, 18, 19, 24, 59, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 949518703, 'comment_body': 'This still seems to be the case?', 'comment_created': datetime.datetime(2022, 8, 18, 19, 26, 20, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 949825914, 'comment_body': 'I have extracted writing of ``hotkeys_file_string`` variable to ``hotkeys.md`` file in a new function ``write_hotkeys_file`` if thats what you meant? @neiljp ', 'comment_created': datetime.datetime(2022, 8, 19, 5, 57, 52, tzinfo=datetime.timezone.utc), 'commenter': 'srdeotarse', 'type': 'User'}, {'comment_id': 949848327, 'comment_body': 'I have used return value for ``compare_hotkeys_file`` to output different statement based on return value.', 'comment_created': datetime.datetime(2022, 8, 19, 6, 37, 28, tzinfo=datetime.timezone.utc), 'commenter': 'srdeotarse', 'type': 'User'}, {'comment_id': 949848885, 'comment_body': '@neiljp It is intentional as I have used return value [here](https://github.com/zulip/zulip-terminal/pull/1210/files#r949848327) for linting. ', 'comment_created': datetime.datetime(2022, 8, 19, 6, 38, 19, tzinfo=datetime.timezone.utc), 'commenter': 'srdeotarse', 'type': 'User'}]","[{'commit_sha': '63058a08b3489f65ee42170a2b7f5aaf55bdc7c3', 'committer_username': 'srdeotarse', 'committer_name': 'Shivam Deotarse', 'committer_email': 'srdeotarse@outlook.com', 'commit_date': datetime.datetime(2019, 8, 7, 16, 56, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '311085ea6a55215dfabae91d9177d1822c329c2e', 'committer_username': 'srdeotarse', 'committer_name': 'Shivam Deotarse', 'committer_email': 'srdeotarse@outlook.com', 'commit_date': datetime.datetime(2019, 8, 7, 16, 56, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f7af71755450d9ab37a89c9e35ff9e7cbbe8051', 'committer_username': 'srdeotarse', 'committer_name': 'Shivam Deotarse', 'committer_email': 'srdeotarse@outlook.com', 'commit_date': datetime.datetime(2019, 8, 7, 16, 56, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5cffe0e7d0c53858a57fcc409144cfe6e52f54ff', 'committer_username': 'srdeotarse', 'committer_name': 'Shivam Deotarse', 'committer_email': 'srdeotarse@outlook.com', 'commit_date': datetime.datetime(2019, 8, 7, 16, 56, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '314e4d932b479921ebbb90ddfdbaab4d73ebcb3e', 'committer_username': 'srdeotarse', 'committer_name': 'Shivam Deotarse', 'committer_email': 'srdeotarse@outlook.com', 'commit_date': datetime.datetime(2019, 8, 7, 16, 56, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1d54bb3ba6ec3c6178859008aa6a727146fd08c', 'committer_username': 'neiljp', 'committer_name': 'Neil Pilgrim', 'committer_email': None, 'commit_date': datetime.datetime(2014, 11, 5, 10, 28, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a34dbb99a80cb260693b18be73fb5411162ca873', 'committer_username': 'srdeotarse', 'committer_name': 'Shivam Deotarse', 'committer_email': 'srdeotarse@outlook.com', 'commit_date': datetime.datetime(2019, 8, 7, 16, 56, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce7fcd95c9ac78d0d93c5860ce11da0b49b1160b', 'committer_username': 'srdeotarse', 'committer_name': 'Shivam Deotarse', 'committer_email': 'srdeotarse@outlook.com', 'commit_date': datetime.datetime(2019, 8, 7, 16, 56, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ce8233c1cebaa718388522ee7b92dcf5727b89d', 'committer_username': 'srdeotarse', 'committer_name': 'Shivam Deotarse', 'committer_email': 'srdeotarse@outlook.com', 'commit_date': datetime.datetime(2019, 8, 7, 16, 56, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c63bfc596678436b776778d2214070d04b28d405', 'committer_username': 'srdeotarse', 'committer_name': 'Shivam Deotarse', 'committer_email': 'srdeotarse@outlook.com', 'commit_date': datetime.datetime(2019, 8, 7, 16, 56, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '94314119f98a092b6d75cf8b366375498342439a', 'committer_username': 'srdeotarse', 'committer_name': 'Shivam Deotarse', 'committer_email': 'srdeotarse@outlook.com', 'commit_date': datetime.datetime(2019, 8, 7, 16, 56, 14, tzinfo=datetime.timezone.utc)}]",Shivam Deotarse,53873549,srdeotarse@outlook.com,User,,19,,8,5
924385587,User-friendly date and time formatting.,"<!-- Please see https://github.com/zulip/zulip-terminal#contributor-guidelines ! -->

**What does this PR do?**  <!-- Overall description goes here -->
Adds user friendly times to the user and message info views. The current view just includes the timestamp, which is hard to decipher.

<!-- If fixing a filed bug or new feature, add 'Fixes #<issue>' or 'Partial fix for #<issue>' -->

Partial fix for issues #1211  and addresses #1086

<!-- Add a link to a discussion on chat.zulip.org, if relevant -->

**Tested?** <!-- Fine to leave some of these unchecked if this is a draft/work-in-progress -->
- [x] Manually
- [x] Existing tests (adapted, if necessary)
- [x] New tests added (for any new behavior)
- [x] Passed linting & tests (each commit)
<!-- Code must pass CI (GitHub Actions) before merging - look for the green tick! -->

<!-- See https://github.com/zulip/zulip-terminal#commit-style -->
**Commit flow** <!-- if more than one commit; add/delete/fill-in as appropriate -->
<!-- For example:
- first commit doing some thing
- maybe multiple commits doing similar things
-->
- first commit adds a helper function to friendly-fy the timestamps.
- second commit implements the helper function in views.py for message and user info popups.

**Notes & Questions** <!-- if any; add/delete/fill-in as appropriate -->
<!-- For example:
- this doesn't include feature X (yet?)
- unsure about Y
- should this do Z?
-->

**Interactions** <!-- if any; add/delete/fill-in as appropriate -->
<!-- eg.
- Waiting on #<PR>
- Blocks #<PR>
-->

**Visual changes** <!-- if any; add/delete/fill-in with screenshot/diagram as appropriate -->
For message info:
<img width=""297"" alt=""Screenshot 2022-04-29 at 1 11 14 PM"" src=""https://user-images.githubusercontent.com/76529011/165903412-7c1b8ecf-e24f-4ed8-8441-bbb7efa64b4a.png"">

For user info:
<img width=""567"" alt=""Screenshot 2022-04-29 at 1 11 01 PM"" src=""https://user-images.githubusercontent.com/76529011/165903373-d3b5d0a8-6e6f-448a-8bb8-2484fcf8d73a.png"">


",False,1218,https://api.github.com/repos/zulip/zulip-terminal/pulls/1218,https://github.com/zulip/zulip-terminal/pull/1218,open,79,6,3,3,7,5,5,0,"[{'name': 'enhancement'}, {'name': 'area: UI'}, {'name': 'size: L'}, {'name': 'has conflicts'}, {'name': 'PR needs review'}]",2022-04-29 20:03:41+00:00,,0.0,,"[{'comment_id': 862542509, 'comment_body': 'For users who have been inactive for longer than two weeks, the `data[""last_active""]` is empty. This is causing ZT to crash for such users when I tried running it.', 'comment_created': datetime.datetime(2022, 5, 2, 0, 21, tzinfo=datetime.timezone.utc), 'commenter': 'mounilKshah', 'type': 'User'}, {'comment_id': 872735727, 'comment_body': ""We'll want to keep these lint fixes in the commit in which they were introduced. If you do an interactive rebase and edit the previous commit and run `make fix`, then when you continue the rebase, these changes should likely drop out of this commit (or similarly in later commits, in other complex PRs)."", 'comment_created': datetime.datetime(2022, 5, 13, 19, 43, 50, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 872988929, 'comment_body': ""Oh, okay! Didn't know, I'll try it out."", 'comment_created': datetime.datetime(2022, 5, 14, 14, 46, 21, tzinfo=datetime.timezone.utc), 'commenter': 'plugyawn', 'type': 'User'}, {'comment_id': 892482809, 'comment_body': ""Instead of writing what the function does in the commit message, I think it would be more convenient to write it as comments within the function body, so that the next person working on it doesn't have to search for the respective commit(s)."", 'comment_created': datetime.datetime(2022, 6, 8, 14, 48, 27, tzinfo=datetime.timezone.utc), 'commenter': 'mounilKshah', 'type': 'User'}, {'comment_id': 892484873, 'comment_body': 'The value of `time_string` is assigned only in the first conditional, but not returned/used anywhere.', 'comment_created': datetime.datetime(2022, 6, 8, 14, 50, 1, tzinfo=datetime.timezone.utc), 'commenter': 'mounilKshah', 'type': 'User'}]","[{'commit_sha': 'eb064c3004263c7819de563fed8deeb19743030c', 'committer_username': 'plugyawn', 'committer_name': 'Progyan', 'committer_email': 'progyan.das@iitgn.ac.in', 'commit_date': datetime.datetime(2020, 12, 23, 15, 55, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90dc95139141aa630f3b05343931787402ac61fa', 'committer_username': 'plugyawn', 'committer_name': 'Progyan', 'committer_email': 'progyan.das@iitgn.ac.in', 'commit_date': datetime.datetime(2020, 12, 23, 15, 55, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62c59851f9b3e54fab6cf852f67406412f7dbdf1', 'committer_username': 'plugyawn', 'committer_name': 'Progyan', 'committer_email': 'progyan.das@iitgn.ac.in', 'commit_date': datetime.datetime(2020, 12, 23, 15, 55, 22, tzinfo=datetime.timezone.utc)}]",Progyan,76529011,progyan.das@iitgn.ac.in,User,,64,,19,57
1057222389,Add id to users with same name,"<!-- Please see https://github.com/zulip/zulip-terminal#contributor-guidelines ! -->

**What does this PR do?**  <!-- Overall description goes here -->
On the Zulip terminal, users with same name weren't discernable because they were considered the same users. This PR compares users based on their user id and then displays the user id beside their user name if they have the same user name.
<!-- If fixing a filed bug or new feature, add 'Fixes #<issue>' or 'Partial fix for #<issue>' -->
Fixes #1151 
<!-- Add a link to a discussion on chat.zulip.org, if relevant -->

**Tested?** <!-- Fine to leave some of these unchecked if this is a draft/work-in-progress -->
- [x] Manually
- [x] Existing tests (adapted, if necessary)
- [x] New tests added (for any new behavior)
- [x] Passed linting & tests (each commit)
<!-- Code must pass CI (GitHub Actions) before merging - look for the green tick! -->

<!-- See https://github.com/zulip/zulip-terminal#commit-style -->
**Commit flow** <!-- if more than one commit; add/delete/fill-in as appropriate -->
**first commit** -> comparing users based on user_id instead of name so that a separate header can be displayed


**second commit** -> displaying user_id beside all the users who have same name as more than one user in the list of all users. Adding a new style class so that the appended user_id doesn't look like a part of the username


**third commit** -> changing label from `names` to `msg_sender` in all colour themes
<!-- For example:
- first commit doing some thing
- maybe multiple commits doing similar things
-->

**Notes & Questions** <!-- if any; add/delete/fill-in as appropriate -->
This makes users with same name have different headers by appending the id to the author name and shows it as a visually separate addition.
<!-- For example:
- this doesn't include feature X (yet?)
- unsure about Y
- should this do Z?
-->

**Interactions** <!-- if any; add/delete/fill-in as appropriate -->
- Waiting on PR review 
<!-- eg.
- Waiting on PR review 
- Blocks #<PR>
-->

**Visual changes** <!-- if any; add/delete/fill-in with screenshot/diagram as appropriate -->
Before:
<img width=""1055"" alt=""Screenshot 2022-09-13 at 7 44 25 PM"" src=""https://user-images.githubusercontent.com/71403193/190386027-0ca765df-39e2-4e72-8552-3893fdb0c747.png"">

After:
<img width=""426"" alt=""Screenshot 2022-10-21 at 11 48 24 AM"" src=""https://user-images.githubusercontent.com/71403193/197126388-5d3bdf0c-1ab8-4a48-ba12-89c488cd2725.png"">


",False,1255,https://api.github.com/repos/zulip/zulip-terminal/pulls/1255,https://github.com/zulip/zulip-terminal/pull/1255,open,103,10,4,3,3,33,4,0,"[{'name': 'bug'}, {'name': 'size: XL'}, {'name': 'area: message rendering'}, {'name': 'PR needs review'}]",2022-09-15 10:55:03+00:00,,0.0,,"[{'comment_id': 979221160, 'comment_body': 'I think it would be better/safer if you used `.get()` to access the count, instead of using the index.', 'comment_created': datetime.datetime(2022, 9, 24, 10, 38, 20, tzinfo=datetime.timezone.utc), 'commenter': 'mounilKshah', 'type': 'User'}, {'comment_id': 979221371, 'comment_body': ""This commented code seems redundant. If you don't think it is necessary to the PR, then you may remove it."", 'comment_created': datetime.datetime(2022, 9, 24, 10, 40, 20, tzinfo=datetime.timezone.utc), 'commenter': 'mounilKshah', 'type': 'User'}, {'comment_id': 998766902, 'comment_body': 'It would be great to combine this code change with additions to the tests to confirm this works as expected, and continues doing so. I think those tests are in `tests/ui/test_ui_tools.py`.', 'comment_created': datetime.datetime(2022, 10, 18, 22, 26, 35, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 998768311, 'comment_body': 'I think this is a formatting change only, from the previous commit?\r\n\r\nYou may find `tools/check-branch` helpful here, which runs `make check` on each commit in a branch (assuming main and upstream/main are up to date)', 'comment_created': datetime.datetime(2022, 10, 18, 22, 29, 17, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 998769997, 'comment_body': 'Does this need both?\r\n\r\nIn the previous commit the author key was changed to use author_id; here you change it back but add an author_id one.', 'comment_created': datetime.datetime(2022, 10, 18, 22, 32, 43, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 998776446, 'comment_body': ""This returns a bool, but is typed as int. Does mypy note this?\r\n\r\nI know I noted a suggested commit structure in the stream, but I didn't remember this code at that time. It would be useful to add this method (and ideally a test for it) in a separate commit first, then use it in a separate next one where you use it.\r\n\r\nNote that you don't need the inline conditional form here (`x if expr else y`), if the function is returning a bool, since the conditional itself (`expr`) is an expression resulting in a bool.\r\n\r\nFor bool-returning functions, it's good to name them using a `is_` or similar form, so they read well when they're used."", 'comment_created': datetime.datetime(2022, 10, 18, 22, 44, 44, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 998777905, 'comment_body': ""This isn't a dict, so a `_counter` suffix is sufficient.\r\n\r\nRe the comment on 1136, it's generally preferable to improve names than depend on comments for what a variable is for, which themselves are only in one location. Comments are still useful for eg. why things are the way they are."", 'comment_created': datetime.datetime(2022, 10, 18, 22, 47, 54, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 998778944, 'comment_body': 'Counter is apparently a subclass of dict, but it would be better to type and initialize it differently here if we can, to match what we later assign it.', 'comment_created': datetime.datetime(2022, 10, 18, 22, 50, 4, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 998783806, 'comment_body': ""This change, with accompanying adjustments, is a perfectly fine separate refactor commit.\r\n\r\nGenerally more commits are better than fewer, since they're more difficult to separate later. However, note that these are ideally structured commits rather than commits that one does from just adding fixes to previous code in a branch."", 'comment_created': datetime.datetime(2022, 10, 18, 23, 0, 24, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 998785678, 'comment_body': ""I think we'll probably want a space between the name and user id."", 'comment_created': datetime.datetime(2022, 10, 18, 23, 4, 13, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 998913948, 'comment_body': 'Okay, refactoring name to `user_name_counter` instead of `user_name_dict_count`', 'comment_created': datetime.datetime(2022, 10, 19, 3, 45, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Sushmey', 'type': 'User'}, {'comment_id': 998914034, 'comment_body': ""Sorry missed changing the return type to bool. No, mypy didn't note this. \r\nRefactoring the name to `is_user_name_duplicate`\r\n\r\nYes, I don't need inline condition, thank you!"", 'comment_created': datetime.datetime(2022, 10, 19, 3, 45, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Sushmey', 'type': 'User'}, {'comment_id': 998914433, 'comment_body': 'Yes, initialized it now as `Counter()` instead of `dict()`', 'comment_created': datetime.datetime(2022, 10, 19, 3, 46, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Sushmey', 'type': 'User'}, {'comment_id': 998915458, 'comment_body': ""Nope, both are not needed. Will remove it in a separate commit since I might to change test cases since it's failing some assertion test"", 'comment_created': datetime.datetime(2022, 10, 19, 3, 49, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Sushmey', 'type': 'User'}, {'comment_id': 998922175, 'comment_body': 'Okay, making that change in both test cases, and boxes.py ', 'comment_created': datetime.datetime(2022, 10, 19, 4, 7, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Sushmey', 'type': 'User'}, {'comment_id': 1000183176, 'comment_body': ""So this wasn't purely a refactor since adding a new style class to the urwid Text widget needed me to change the TextType also so that it would pass all `make check` checks. \r\n\r\nBut I understand what you meant by keeping commits structured, hopefully the newer ones I made are more suitable"", 'comment_created': datetime.datetime(2022, 10, 20, 6, 15, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Sushmey', 'type': 'User'}, {'comment_id': 1015694438, 'comment_body': 'Do these spacing changes belong in a different commit?', 'comment_created': datetime.datetime(2022, 11, 7, 17, 15, 23, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1015706281, 'comment_body': 'It\'s good to see the description of these cases in the commit text, though often that\'s a good place to describe (if necessary) the \'why\' of the change rather than the \'what\'.\r\n\r\nInstead, you could use a comment after each line. However, you may see use of `case` elsewhere in test files, which is a rename of a pytest import which you can use as a prefix before each tuple, and allows you to add an `id=""some_description""` inline.\r\n\r\nAs well as there being an inline description when reading the test, if you run something like `pytest -v -k is_user_name_dup` you\'ll see each test case run separately with a useful description name :)', 'comment_created': datetime.datetime(2022, 11, 7, 17, 27, 22, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1015708449, 'comment_body': ""You've introduced this name in a commit in this branch, so there's generally no need to rename it in a separate refactor commit, unless it has a different use - just name it 'correctly' when it is first introduced :)"", 'comment_created': datetime.datetime(2022, 11, 7, 17, 29, 31, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1015709386, 'comment_body': 'Is there an equivalent type in `typing` we can use for the type too?', 'comment_created': datetime.datetime(2022, 11, 7, 17, 30, 30, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1016062018, 'comment_body': ""I had thought at that time that it made sense for them to be in a different commit with other little refactors but now I've squashed it with other previous commits"", 'comment_created': datetime.datetime(2022, 11, 8, 1, 39, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Sushmey', 'type': 'User'}, {'comment_id': 1016062282, 'comment_body': 'Yep, fair. Done!', 'comment_created': datetime.datetime(2022, 11, 8, 1, 39, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Sushmey', 'type': 'User'}, {'comment_id': 1016079229, 'comment_body': ""I didn't know this. Thank you for pointing it out to me. I've added the cases with relevant messages."", 'comment_created': datetime.datetime(2022, 11, 8, 2, 18, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Sushmey', 'type': 'User'}, {'comment_id': 1145290889, 'comment_body': ""It is confusing that you're changing the text here - why do we expect this user to show as a duplicate? In particular, this test is not specifically regarding how duplicates should be shown.\r\n\r\nThis test may need an update, but likely to ensure that we're treating the user as not a duplicate, via a simple mock.\r\n\r\nI'd suggest the code with this change would be better accompanied by an additional test: given the message before and the current one, what happens if each sender is a duplicate, and what do you expect it to look like?"", 'comment_created': datetime.datetime(2023, 3, 22, 19, 12, 33, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1145293011, 'comment_body': 'Why is this updated? Does this behavior need updating too, as a follow-up?', 'comment_created': datetime.datetime(2023, 3, 22, 19, 14, 39, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1145293937, 'comment_body': 'This may be clearer as an f-string?', 'comment_created': datetime.datetime(2023, 3, 22, 19, 15, 43, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1145294262, 'comment_body': 'Nor here.', 'comment_created': datetime.datetime(2023, 3, 22, 19, 16, 8, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1145298553, 'comment_body': 'This does not appear to need this update?\r\n\r\nI understand the desire to keep this message data up to date. We should likely be using something like a `message_fixture` from `conftest.py`. These tests were initially copy and pasted quite a lot, so a good refactor in a different commit/PR would be to simplify these by using our standard fixtures. One possible point to check is whether these are fixtures representing messages we receive from the server, and whether we update them later in the model (eg. modernize message response).', 'comment_created': datetime.datetime(2023, 3, 22, 19, 20, 41, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1145330748, 'comment_body': 'This is now new behavior, so while it passes existing tests, it would be good to extend or add a test to illustrate this, and include it in this commit.', 'comment_created': datetime.datetime(2023, 3, 22, 19, 48, 9, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1145997092, 'comment_body': ""So I tried changing it back to normal (i.e. name without user id) but it was still passing the duplicate name condition and appending `None`. At first I thought the test user_list has `alice` as a common name but changing it to a unique name also gave the same results. Then I realised the `this_msg` and `last_msg` in the test function are derived from the same parameters and they have the same sender name (although different `sender_id`) and that's why its always appending the `sender_id` to the name.\r\n\r\nI agree with the point that this function may need an update "", 'comment_created': datetime.datetime(2023, 3, 23, 10, 45, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Sushmey', 'type': 'User'}, {'comment_id': 1146011231, 'comment_body': ""The function is merely checking update of author status so might not need that change. At that time I thought it'd need it since we were shifting from comparing based on `sender_full_name` to `sender_id`. Changing it back now"", 'comment_created': datetime.datetime(2023, 3, 23, 10, 58, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Sushmey', 'type': 'User'}, {'comment_id': 1146012011, 'comment_body': 'Yep f-strings are cleaner. Thank you for the suggestion!', 'comment_created': datetime.datetime(2023, 3, 23, 10, 58, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Sushmey', 'type': 'User'}, {'comment_id': 1484339563, 'comment_body': ""I looked into this a bit more and realised there's no way to include the duplicate username case in the earlier function where we test headers  without appending the userid to every name in the parameters because we are keeping the same message and varying just a few attributes. Also, added a mock response as `false` for the `is_user_name_duplicate` function so that it doesn't fail for the reasons mentioned earlier, and since duplicate usernames aren't what we are testing in that test anyway.\r\n\r\nFinally, I decided to make a new test for testing the specific case where username is a duplicate where it would need userid appended to it. \r\n\r\n"", 'comment_created': datetime.datetime(2024, 2, 9, 13, 47, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Sushmey', 'type': 'User'}]","[{'commit_sha': '6a03942c2768d20d4e35c7645744f6f5e0f7ad66', 'committer_username': 'Sushmey', 'committer_name': 'Sushmey', 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 16, 17, 52, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '35e776ff22cfb46a6f95a8f221ed6dfbb61e8372', 'committer_username': 'Sushmey', 'committer_name': 'Sushmey', 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 16, 17, 52, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6e560509e27f36dcf10b0e1da771b831815ba01', 'committer_username': 'Sushmey', 'committer_name': 'Sushmey', 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 16, 17, 52, 17, tzinfo=datetime.timezone.utc)}]",Sushmey,71403193,,User,,24,,19,13
901423925,[WIP] Collapse large messages and scroll through them,"**What does this PR do?**
This PR contains code to scroll a large message without changing the focus.
Addresses #1168

[#zulip-terminal>Condense large messages #T1094](https://chat.zulip.org/#narrow/stream/206-zulip-terminal/topic/Condense.20large.20messages.20.23T1094)

**Tested?**
- [x] Manually
- [ ] Existing tests (adapted, if necessary)
- [ ] New tests added (for any new behavior)
- [ ] Passed linting & tests (each commit)

**Commit flow** <!-- if more than one commit; add/delete/fill-in as appropriate -->
<!-- For example:
- first commit doing some thing
- maybe multiple commits doing similar things
-->

**Notes & Questions** <!-- if any; add/delete/fill-in as appropriate -->
<!-- For example:
- this doesn't include feature X (yet?)
- unsure about Y
- should this do Z?
-->
- This commit is still a work in progress.

**Interactions** <!-- if any; add/delete/fill-in as appropriate -->
<!-- eg.
- Waiting on #<PR>
- Blocks #<PR>
-->

**Visual changes** <!-- if any; add/delete/fill-in with screenshot/diagram as appropriate -->
",False,1188,https://api.github.com/repos/zulip/zulip-terminal/pulls/1188,https://github.com/zulip/zulip-terminal/pull/1188,open,22,6,1,1,0,0,1,0,[{'name': 'size: M'}],2022-04-06 12:05:18+00:00,,0.0,,[],"[{'commit_sha': '1b92f23b6fb010cbb5471fd9ce49b82cb49b32ba', 'committer_username': 'mounilKshah', 'committer_name': 'Mounil Shah', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 23, 17, 43, 22, tzinfo=datetime.timezone.utc)}]",Mounil Shah,47925568,,User,,22,,86,21
950173387,README: Add fetch-upstream command,"**What does this PR do?**
This PR makes it easier to clone the Zulip Terminal repository and setup upstream for the remote repository.

**Discussion:**
[zulip-terminal>Development Workflow](https://chat.zulip.org/#narrow/stream/206-zulip-terminal/topic/Development.20Workflow/near/1372760)

**Tested?**
- [x] Manually
- [x] Existing tests (adapted, if necessary)
- [x] Passed linting & tests (each commit)",False,1231,https://api.github.com/repos/zulip/zulip-terminal/pulls/1231,https://github.com/zulip/zulip-terminal/pull/1231,closed,14,4,1,1,1,3,2,0,"[{'name': 'size: S'}, {'name': 'area: documentation'}]",2022-05-29 03:00:22+00:00,2022-06-12 05:34:38+00:00,1218856.0,"14 days, 2:34:16","[{'comment_id': 885245272, 'comment_body': 'Does other documentation like this describe `YOUR_USERNAME`?', 'comment_created': datetime.datetime(2022, 5, 31, 6, 26, 8, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 885266170, 'comment_body': ""Maybe adjust this line to refer to the 'repository directory from the previous section' or similar?"", 'comment_created': datetime.datetime(2022, 5, 31, 6, 55, 56, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 886835473, 'comment_body': ""Only [Zulip](https://zulip.readthedocs.io/en/latest/git/cloning.html#step-1b-clone-to-your-machine) has it as `YOUR_USERNAME`. Zulip-mobile and desktop don't have instructions regarding cloning the _forked_ repository."", 'comment_created': datetime.datetime(2022, 6, 1, 13, 52, 52, tzinfo=datetime.timezone.utc), 'commenter': 'mounilKshah', 'type': 'User'}]","[{'commit_sha': 'b02898a2ffb82641967effb6f2af0862bbf2b0cb', 'committer_username': 'mounilKshah', 'committer_name': 'Mounil Shah', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 23, 17, 43, 22, tzinfo=datetime.timezone.utc)}]",Mounil Shah,47925568,,User,,22,,86,21
812241511,Added heading-style for all the four themes,"**What does this PR do?** 
This PR emphasises the headings present in the message.
Fixes #1095 

**Discussion on the dev community:**
[#zulip-terminal> Emphasising heading styles #T1095](https://chat.zulip.org/#narrow/stream/206-zulip-terminal/topic/Emphasising.20heading.20styles.20.23T1095)

**Tested?**
- [x] Manually
- [x] Existing tests (adapted, if necessary)
- [x] New tests added (for any new behavior)
- [x] Passed linting & tests (each commit)

**Commit flow** 
- Only one commit which contains all the changes made and the test cases updated and added for heading-styles.

**Notes & Questions** 
- Tests have been added for the heading styles.
- This PR resolves the [#T1095](https://github.com/zulip/zulip-terminal/issues/1095)
- At present, h1-h6 have the same implementation for a particular theme.


**Visual changes**

**After implementing the heading-styles:**

**`zt_dark`**

![zt_dark](https://user-images.githubusercontent.com/47925568/147804087-bf7dfa1e-ab63-4dd5-bf65-dbbb19c22323.png)

**`zt_light`**

![zt_light](https://user-images.githubusercontent.com/47925568/147804106-708a7c97-9f78-4919-8fbe-a482111855b0.png)

**`zt_blue`**

![zt_blue](https://user-images.githubusercontent.com/47925568/147804119-236f892d-f33a-448b-9840-ed243e265c15.png)

**`gruvbox`**

![gruvbox](https://user-images.githubusercontent.com/47925568/147804126-f255e6af-3e89-4169-a65b-587829ee0764.png)


",True,1146,https://api.github.com/repos/zulip/zulip-terminal/pulls/1146,https://github.com/zulip/zulip-terminal/pull/1146,closed,14,0,7,1,2,0,2,0,"[{'name': 'size: S'}, {'name': 'area: message rendering'}]",2021-12-31 04:56:54+00:00,2022-01-18 19:16:04+00:00,1606750.0,"18 days, 14:19:10",[],"[{'commit_sha': '1689e9ca510ca6f75ffd3928e9289a5bd7523d86', 'committer_username': 'mounilKshah', 'committer_name': 'Mounil Shah', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 23, 17, 43, 22, tzinfo=datetime.timezone.utc)}]",Mounil Shah,47925568,,User,,22,,86,21
879159569,Added stream_post_policy to the streaminfo view,"**What does this PR do?**
This PR contains commit which add the `stream_post_policy` to the streaminfo view. Test case for the same have been added under `tests/ui_tools/test_popups.py`
Partial fix for #1119.

Link to discussion on chat.zulip.org:
[#zulip-terminal>Adding elements to stream info](https://chat.zulip.org/#narrow/stream/206-zulip-terminal/topic/Adding.20elements.20to.20stream.20info.20.28issue.20.23T1119.29)

**Tested?**
- [x] Manually
- [x] Existing tests (adapted, if necessary)
- [x] New tests added (for any new behavior)
- [x] Passed linting & tests (each commit)

**Commit flow**
- Contains code for adding `stream_post_policy` and the updated `test_popup_height` function

**Visual changes**

## Before the commt:
![image](https://user-images.githubusercontent.com/47925568/158197668-413f4bf8-d735-4c6b-8149-97588b0e1a35.png)

## After the commit:
![image](https://user-images.githubusercontent.com/47925568/158197971-866df257-4ced-4881-b125-1c6e4abdde8d.png)


",True,1165,https://api.github.com/repos/zulip/zulip-terminal/pulls/1165,https://github.com/zulip/zulip-terminal/pull/1165,closed,55,14,3,2,3,9,4,0,"[{'name': 'area: UI'}, {'name': 'size: L'}, {'name': 'PR ready to be merged'}, {'name': 'missing feature: user'}]",2022-03-14 14:53:57+00:00,2022-03-27 01:54:49+00:00,1076452.0,"12 days, 11:00:52","[{'comment_id': 829722313, 'comment_body': 'This likely belongs in `ui_mappings.py`', 'comment_created': datetime.datetime(2022, 3, 18, 6, 24, 38, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 830342345, 'comment_body': 'This is what I meant about the start of the other PR code, where there is something simpler.', 'comment_created': datetime.datetime(2022, 3, 18, 20, 50, 1, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 830655746, 'comment_body': 'Okay, I will add this under a separate commit for `ui_mappings.py`.', 'comment_created': datetime.datetime(2022, 3, 20, 18, 28, 21, tzinfo=datetime.timezone.utc), 'commenter': 'mounilKshah', 'type': 'User'}, {'comment_id': 830655798, 'comment_body': 'I will go through it once again and make the required changes.', 'comment_created': datetime.datetime(2022, 3, 20, 18, 28, 58, tzinfo=datetime.timezone.utc), 'commenter': 'mounilKshah', 'type': 'User'}, {'comment_id': 831688580, 'comment_body': 'This is not the same as in the title of the commit?', 'comment_created': datetime.datetime(2022, 3, 22, 1, 16, 13, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 831689020, 'comment_body': ""Let's skip the trailing `.` - no other fields in the popup have this, and we can always add it uniformly later."", 'comment_created': datetime.datetime(2022, 3, 22, 1, 17, 33, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 831689580, 'comment_body': ""We're adding new functionality here, so it is not a refactor commit. In any case we should mention the file being updated, as in the zulip-terminal code style section."", 'comment_created': datetime.datetime(2022, 3, 22, 1, 18, 59, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 831691737, 'comment_body': 'Where we\'re using default values, it is clearer if you use `""text"" in some_dict`, as that indicates we\'re testing for membership. The cost is similar, but ""fetch and return an error value, which we test against"" is not as obvious as explicitly using `in`.', 'comment_created': datetime.datetime(2022, 3, 22, 1, 24, 53, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 832453413, 'comment_body': 'This was added under the first commit which made changes only to `ui_mappings.py` so that it could be merged using `git cherry-pick` if required.', 'comment_created': datetime.datetime(2022, 3, 22, 17, 40, 24, tzinfo=datetime.timezone.utc), 'commenter': 'mounilKshah', 'type': 'User'}]","[{'commit_sha': 'ab49f2365e2745dcebeb1562436945c90a821a05', 'committer_username': 'mounilKshah', 'committer_name': 'Mounil Shah', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 23, 17, 43, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd108f2d8e7ce76b9e0b915071a65058b2c3e3087', 'committer_username': 'mounilKshah', 'committer_name': 'Mounil Shah', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 23, 17, 43, 22, tzinfo=datetime.timezone.utc)}]",Mounil Shah,47925568,,User,,22,,86,21
835170895,Restrict posting messages on streams having moderators/admins only,"**What does this PR do?** 
- Added `is_unauthorised_to_post()` function to verify if a user is allowed to message in the given stream or not
- If the user is not allowed, restrict compose box from opening
- Print a warning in the footer
- Test functions (can post and can-not post) for `is_unauthorised_to_post()` function
Partly fixes #682 

**Discussion on developer channel:**
[#zulip-terminal> [Restrict sending messages to streams #T1149 #T682](https://chat.zulip.org/#narrow/stream/206-zulip-terminal/topic/Restrict.20sending.20messages.20to.20streams.20.23T1149.20.23T682)
[#api-documentation>stream_post_policy (API docs)](https://chat.zulip.org/#narrow/stream/412-api-documentation/topic/stream_post_policy.20.28API.20docs.29)

**Tested?**
- [x] Manually
- [x] Existing tests
- [ ] Passed linting & tests (each commit)
- [x] New tests added

**Commit flow** 
Only one commit which contains all the changes made
- Creating `is_unauthorised_to_post()` in `model.py`
- Using that function in `boxes.py`, the compose box is opened only when the user is authorised to send a message to the stream
- Two new test functions added to `test_model.py`:
  -`test_is_unauthorised_to_post_in_stream_can_post()` and 
  -`test_is_unauthorised_to_post_in_stream_cannot_post()`

**Notes & Questions**
The current changes have covered the following cases:
- Reply to a message in stream (r/enter)
- Reply quoting the current message text (>)
- Reply (in the same stream) mentioning the sender of the current message (@)

Use cases is still pending:
- New message to a stream
- Draft whose stream post policies have been changed
- _Full_ member

## Example

### Before implementing the changes
![before_changes](https://user-images.githubusercontent.com/47925568/159153149-383ff760-eeba-4449-9edb-c56b3b08746c.gif)


Here, upon pressing enter/r for replying to the message in the announce stream, the compose box opens even though the user does not have permission to post on that stream


### After implementing the changes
![after_changes](https://user-images.githubusercontent.com/47925568/159153143-2a732e35-a4db-47c0-b1bd-b39edfb16383.gif)


Upon trying to reply to the message in the stream, no compose box pops up and a warning is displayed in the footer informing the user about the restrictions due to the stream post policy.
",False,1149,https://api.github.com/repos/zulip/zulip-terminal/pulls/1149,https://github.com/zulip/zulip-terminal/pull/1149,open,364,8,3,3,5,33,5,0,"[{'name': 'enhancement'}, {'name': 'area: UI'}, {'name': 'has conflicts'}, {'name': 'size: XL'}, {'name': 'PR awaiting update'}]",2022-01-29 16:59:40+00:00,,0.0,,"[{'comment_id': 795121488, 'comment_body': ""Note that every time you're returning `True` you have a output a variant of a message, and otherwise return `False`. When I see this style it suggests combining those two parts into the return value somehow, either as `None` or an error string (the type being `Optional[str]`), or a tuple to unpack at call sites.\r\n\r\nOther than being simpler, this decouples the checking logic from the action to perform - and that also makes it easier to test.\r\n\r\nThe other note I'd make is that while we do have some general code still in `helper.py`, it's good to look at the objects used in a function, since that can guide where a function really belongs; putting the controller usage in your function aside, based on what I say above, almost all of the data being examined is in the model, so this function probably belongs there. While we have some left-over code that does pass in the model, this can also indicate that this belongs in the model, or similarly for other classes.\r\n\r\nI'd also suggest a more descriptive name; this might vary depending on the return type you select."", 'comment_created': datetime.datetime(2022, 1, 30, 3, 41, 41, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 795122226, 'comment_body': ""This will look different with the other changes I suggest, but note that if you have a return, then you can simply place the original code where it was (perhaps with a blank line between). That will likely make the 'diff' from this PR smaller and easier to read, at least on github (some tools are clever enough to understand the indents changing)."", 'comment_created': datetime.datetime(2022, 1, 30, 3, 53, 32, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 796536709, 'comment_body': 'Thank you for the feedback! I will modify the function as per your suggestions and move it to `model.py`.\r\nAlso, I had a query regarding the _warning message_. Should the warning be different for each of the cases of `stream_post_policy` or should it be a common warning?', 'comment_created': datetime.datetime(2022, 2, 1, 12, 16, 15, tzinfo=datetime.timezone.utc), 'commenter': 'mounilKshah', 'type': 'User'}, {'comment_id': 797179866, 'comment_body': ""Extra detail in each case of why they cannot post would be useful to a user. Note that you don't need to have the error message in the check function, but you may be able to output the warning as a string with one or more elements filled in from the 'can I post' function return value(s); either approach can work."", 'comment_created': datetime.datetime(2022, 2, 2, 0, 27, 10, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 798099580, 'comment_body': 'This expression is repeated in the conditional and here, so it would be cleaner to hoist it before the conditional into a variable, in each of the 3 cases.', 'comment_created': datetime.datetime(2022, 2, 2, 23, 30, 55, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 798106535, 'comment_body': 'As with the other file, extracting these two elements above the conditional will make each branch of the conditional much easier to read if you give these good names.', 'comment_created': datetime.datetime(2022, 2, 2, 23, 46, 20, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 798108609, 'comment_body': 'Quite a few of your mypy errors are since these return types are not equivalent to `bool`. I mentioned what it could be in the last review.', 'comment_created': datetime.datetime(2022, 2, 2, 23, 50, 55, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 798114172, 'comment_body': ""I'm guessing `get_user_info` could work here, but the type is wrong so mypy is complaining.\r\n\r\nDo we need more than the `get_user_info`?\r\n\r\nIn principle we could track the role of the user who is running the app separately, but we already have the logic in `get_user_info`. That method does currently do a lot of work which we won't use here, however."", 'comment_created': datetime.datetime(2022, 2, 3, 0, 4, 14, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 798115509, 'comment_body': 'This includes all users; a ""full user"" is subtly different and can be time-limited (eg. so new members cannot write to some streams). Check the zulip help documentation.', 'comment_created': datetime.datetime(2022, 2, 3, 0, 7, 40, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 798116902, 'comment_body': ""If you're unsure of a type, you can check similar methods that use it. This is an `int`, and we normally use `stream_id`."", 'comment_created': datetime.datetime(2022, 2, 3, 0, 11, 1, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 798229699, 'comment_body': 'Yes, that is the definition which had been [suggested](https://chat.zulip.org/#narrow/stream/412-api-documentation/topic/stream_post_policy.20.28API.20docs.29/near/1319730) on the `#api-documentation>stream_post_policy stream`.\r\nHowever, as suggested by Tim in the [#api-documentation>stream_post_policy](https://chat.zulip.org/#narrow/stream/412-api-documentation/topic/stream_post_policy.20.28API.20docs.29/near/1319836), I checked with the [help center documentation](https://zulip.com/help/roles-and-permissions) and here they have mentioned that a _full member_ is\r\n\r\n> **Member**: Has access to all public streams. Member is the default role for most users. Some organization settings allow an organization to restrict the permissions of new members; Members who do not have those restrictions are called full members.\r\n\r\nSo the definition is not limited to the new members who are members for the `waiting_period_threshold`. Hence, I kept a separate conditional statement for this as well.', 'comment_created': datetime.datetime(2022, 2, 3, 5, 49, 34, tzinfo=datetime.timezone.utc), 'commenter': 'mounilKshah', 'type': 'User'}, {'comment_id': 798920042, 'comment_body': ""Ah, OK, so you know about it but you've left the `waiting_period_threshold` part unimplemented at this point?"", 'comment_created': datetime.datetime(2022, 2, 3, 19, 56, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 799271465, 'comment_body': ""I too thought of eliminating the use of the function by extracting value of the `role` variable alone. However, going through the changelogs, I noticed that `role` was introduced in Zulip 4.0 (ZFL 59) and the moderator role was added in Zulip 4.0 (ZFL 60), so using `role` alone can cause problems with respect to backwards compatibility. We would also have to use the `is_admin` and `is_owner` attributes to make sure it runs smoothly for earlier versions as well.\r\n\r\nOne way to do it would be following your suggestion about assigning the user information to a variable using just the first three lines of `get_user_info`. After assigning, we can verify whether the given user exists or not (as the mypy error is due to the `Optional` return type of `get_user_info`). I tried this on my local machine and mypy didn't throw any errors for it."", 'comment_created': datetime.datetime(2022, 2, 4, 8, 55, 21, tzinfo=datetime.timezone.utc), 'commenter': 'mounilKshah', 'type': 'User'}, {'comment_id': 799282826, 'comment_body': ""I hadn't actually thought about its implementation yet. However, I'll look into it.\r\nOn a side note, I couldn't find any references to `waiting_period_threshold` in the terminal repository nor in the (API and Developer) documentation. Can you please guide me on that?"", 'comment_created': datetime.datetime(2022, 2, 4, 9, 8, 8, tzinfo=datetime.timezone.utc), 'commenter': 'mounilKshah', 'type': 'User'}, {'comment_id': 800246388, 'comment_body': ""You've done this, but note that you've replaced a `.get` with an index; this may or may not be a problem, but this will be clearer once you have test cases for different server versions."", 'comment_created': datetime.datetime(2022, 2, 6, 23, 9, 47, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 800247004, 'comment_body': ""I'm a little wary of duplicating the logic in this new method. That said, let's get it working and tested against some known server responses, and we can refactor next."", 'comment_created': datetime.datetime(2022, 2, 6, 23, 15, 19, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 800247157, 'comment_body': 'I see you posted about that; you could check the server code in the meantime.', 'comment_created': datetime.datetime(2022, 2, 6, 23, 16, 27, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 800305783, 'comment_body': 'Considering your suggestion regarding `get_user_info` doing a lot more than what we need here, I considered this logic as an alternative to using the `get_user_info` function within the new method.', 'comment_created': datetime.datetime(2022, 2, 7, 4, 19, 33, tzinfo=datetime.timezone.utc), 'commenter': 'mounilKshah', 'type': 'User'}, {'comment_id': 825490655, 'comment_body': ""This is confusing, since we already have self.stream_dict; I'd suggest just using `stream` as generally we don't encode the type in a name.\r\n\r\nMore generally, we should somehow state that the stream id should be valid, otherwise we'll get a keyerror here. In most cases here that shouldn't be an issue, but you could eg. add an assert before this, which is more explicit. Alternatively we could treat this more softly, as per the user case where you return an error text instead.\r\n\r\nFor that and the nonexistent user case, a simple test would be good too."", 'comment_created': datetime.datetime(2022, 3, 13, 19, 4, 46, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 829614464, 'comment_body': ""`stream_post_policy == 3` appears to only be valid for **full** members, not all members. The distinction between these depends on how a server is configured, which I don't believe we detect right now."", 'comment_created': datetime.datetime(2022, 3, 18, 0, 42, 43, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 829629140, 'comment_body': 'Similarly here.', 'comment_created': datetime.datetime(2022, 3, 18, 1, 24, 8, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 829714857, 'comment_body': 'In future servers there will likely be only `stream_post_policy`, so maybe we should check for the role here?\r\n\r\nCould we simplify the conditionals overall, since `== 2` and `is_announcement_only` are the same?', 'comment_created': datetime.datetime(2022, 3, 18, 6, 2, 5, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 829721037, 'comment_body': 'This may be clearer if we hoist the `.get` results into variables above the conditionals.', 'comment_created': datetime.datetime(2022, 3, 18, 6, 20, 55, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 829721304, 'comment_body': 'Maybe we should lint for print statements :)', 'comment_created': datetime.datetime(2022, 3, 18, 6, 21, 46, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 829912084, 'comment_body': ""Okay, I'll rename it to `stream`.\r\n\r\nI will add a case within the `is_unauthorised_to_post` function to check whether the `stream_id` is valid or not and return a string in case it is invalid."", 'comment_created': datetime.datetime(2022, 3, 18, 11, 24, 32, tzinfo=datetime.timezone.utc), 'commenter': 'mounilKshah', 'type': 'User'}, {'comment_id': 829917741, 'comment_body': ""Actually, `role` falls under ZFL 59, whereas `is_admin`, `is_guest` and `is_owner` are under ZFL 8/10. Hence, I felt that we could do the checking without using `role`. However, I'll add `role`.\r\n\r\n`is_announcement_only` got deprecated after [ZFL 1](https://zulip.com/api/update-stream#parameter-stream_post_policy) right? Hence, I decided to keep both so that it can function the same even after we stop support for v2.1."", 'comment_created': datetime.datetime(2022, 3, 18, 11, 33, 20, tzinfo=datetime.timezone.utc), 'commenter': 'mounilKshah', 'type': 'User'}, {'comment_id': 829919121, 'comment_body': ""Alright, I'll make the required changes."", 'comment_created': datetime.datetime(2022, 3, 18, 11, 35, 35, tzinfo=datetime.timezone.utc), 'commenter': 'mounilKshah', 'type': 'User'}, {'comment_id': 829920337, 'comment_body': 'Oh sorry. I completely forgot to remove it before pushing the commit.', 'comment_created': datetime.datetime(2022, 3, 18, 11, 37, 31, tzinfo=datetime.timezone.utc), 'commenter': 'mounilKshah', 'type': 'User'}, {'comment_id': 830285784, 'comment_body': 'This is cleaner :+1:\r\n\r\nI think this could be combined with an extraction from `get_user_info` into a new method, since I believe the code is effectively the same? We discussed this previously, and I think we now have the same behavior?\r\n\r\nThis is possibly missing `is_moderator`, though that might be an edge case.', 'comment_created': datetime.datetime(2022, 3, 18, 19, 10, 17, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 837083909, 'comment_body': '@neiljp \r\nIn my opinion the condition can be changed to – `""stream_post_policy"" in stream`\r\nApart from this, the rest of the function seems fine to me in the current condition.', 'comment_created': datetime.datetime(2022, 3, 29, 6, 2, 50, tzinfo=datetime.timezone.utc), 'commenter': 'mounilKshah', 'type': 'User'}, {'comment_id': 895207219, 'comment_body': 'Here you can use ``report_warning`` function in ``core.py``', 'comment_created': datetime.datetime(2022, 6, 12, 16, 59, 30, tzinfo=datetime.timezone.utc), 'commenter': 'srdeotarse', 'type': 'User'}, {'comment_id': 895207372, 'comment_body': 'Here also you can use ``report_warning`` function in ``core.py``', 'comment_created': datetime.datetime(2022, 6, 12, 17, 0, 43, tzinfo=datetime.timezone.utc), 'commenter': 'srdeotarse', 'type': 'User'}, {'comment_id': 895207825, 'comment_body': 'Also, when we open the compose box (current narrow is ``unrestricted_stream``) by using ``c`` shortcut for new message and press ``ctrl``+``d`` to send a message, it shows ``error`` ``footer_text``.\r\nTo keep the styling uniform, maybe we can use ``report_error`` instead of ``report_warning``', 'comment_created': datetime.datetime(2022, 6, 12, 17, 5, 6, tzinfo=datetime.timezone.utc), 'commenter': 'srdeotarse', 'type': 'User'}]","[{'commit_sha': '5aa9d49e59ac7b6967592d5d90d60bb500b551d7', 'committer_username': 'mounilKshah', 'committer_name': 'Mounil Shah', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 23, 17, 43, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0bbe86ebb5137ef4313f70cad1e4ee75873a9df7', 'committer_username': 'mounilKshah', 'committer_name': 'Mounil Shah', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 23, 17, 43, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'afb562548426556b741728699bd042781bad5688', 'committer_username': 'mounilKshah', 'committer_name': 'Mounil Shah', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 23, 17, 43, 22, tzinfo=datetime.timezone.utc)}]",Mounil Shah,47925568,,User,,22,,86,21

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
122704772,zulip-terminal,zulip/zulip-terminal,Python,243,612,18,81,2276,423,3,165,"[{'id': 1481362604, 'number': 1424, 'closed': datetime.datetime(2023, 9, 3, 6, 48, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 19, 6, 31, 5, tzinfo=datetime.timezone.utc), 'time_taken': 1297073.0, 'time_delta': '15 days, 0:17:53', 'additions': 80, 'deletions': 34, 'state': 'closed'}, {'id': 1306752309, 'number': 1375, 'closed': None, 'created': datetime.datetime(2023, 4, 9, 13, 38, 20, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 23, 'deletions': 12, 'state': 'open'}, {'id': 1088204944, 'number': 1266, 'closed': None, 'created': datetime.datetime(2022, 10, 15, 17, 25, 39, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 92, 'deletions': 1, 'state': 'open'}, {'id': 1073590381, 'number': 1260, 'closed': datetime.datetime(2022, 10, 2, 6, 26, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 1, 15, 41, 51, tzinfo=datetime.timezone.utc), 'time_taken': 53058.0, 'time_delta': '14:44:18', 'additions': 50, 'deletions': 12, 'state': 'closed'}, {'id': 1059617829, 'number': 1258, 'closed': None, 'created': datetime.datetime(2022, 9, 18, 19, 46, 35, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 162, 'deletions': 7, 'state': 'open'}, {'id': 1032026969, 'number': 1249, 'closed': None, 'created': datetime.datetime(2022, 8, 21, 11, 50, 14, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 97, 'deletions': 0, 'state': 'open'}, {'id': 981064364, 'number': 1240, 'closed': datetime.datetime(2022, 10, 15, 13, 6, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 28, 8, 3, 30, tzinfo=datetime.timezone.utc), 'time_taken': 9435771.0, 'time_delta': '109 days, 5:02:51', 'additions': 0, 'deletions': 0, 'state': 'closed'}, {'id': 977076427, 'number': 1237, 'closed': datetime.datetime(2022, 7, 31, 3, 39, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 23, 12, 20, 52, tzinfo=datetime.timezone.utc), 'time_taken': 3251904.0, 'time_delta': '37 days, 15:18:24', 'additions': 13, 'deletions': 9, 'state': 'closed'}, {'id': 976806166, 'number': 1236, 'closed': None, 'created': datetime.datetime(2022, 6, 23, 8, 25, 42, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 74, 'deletions': 65, 'state': 'open'}, {'id': 950173387, 'number': 1231, 'closed': datetime.datetime(2022, 6, 12, 5, 34, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 29, 3, 0, 22, tzinfo=datetime.timezone.utc), 'time_taken': 1218856.0, 'time_delta': '14 days, 2:34:16', 'additions': 14, 'deletions': 4, 'state': 'closed'}, {'id': 913028426, 'number': 1208, 'closed': datetime.datetime(2022, 9, 10, 1, 17, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 19, 12, 7, 39, tzinfo=datetime.timezone.utc), 'time_taken': 12402571.0, 'time_delta': '143 days, 13:09:31', 'additions': 111, 'deletions': 6, 'state': 'closed'}, {'id': 901423925, 'number': 1188, 'closed': None, 'created': datetime.datetime(2022, 4, 6, 12, 5, 18, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 22, 'deletions': 6, 'state': 'open'}, {'id': 879159569, 'number': 1165, 'closed': datetime.datetime(2022, 3, 27, 1, 54, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 14, 14, 53, 57, tzinfo=datetime.timezone.utc), 'time_taken': 1076452.0, 'time_delta': '12 days, 11:00:52', 'additions': 55, 'deletions': 14, 'state': 'closed'}, {'id': 835170895, 'number': 1149, 'closed': None, 'created': datetime.datetime(2022, 1, 29, 16, 59, 40, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 364, 'deletions': 8, 'state': 'open'}, {'id': 825849602, 'number': 1148, 'closed': datetime.datetime(2022, 1, 18, 20, 27, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 1, 18, 20, 25, 50, tzinfo=datetime.timezone.utc), 'time_taken': 100.0, 'time_delta': '0:01:40', 'additions': 639, 'deletions': 96, 'state': 'closed'}, {'id': 812241511, 'number': 1146, 'closed': datetime.datetime(2022, 1, 18, 19, 16, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 12, 31, 4, 56, 54, tzinfo=datetime.timezone.utc), 'time_taken': 1606750.0, 'time_delta': '18 days, 14:19:10', 'additions': 14, 'deletions': 0, 'state': 'closed'}]"
