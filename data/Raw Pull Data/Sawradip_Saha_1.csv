pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1468481426,Timm Models integration to Optimum-intel,"This PR is a part of **Google Summer of Code 2023** project  `Showcase performance of PyTorch Image Models (Timm) with OpenVINO ` under [Openvino-toolkit](https://github.com/openvinotoolkit/openvino).

## Goal
Main goal of this PR is seamless integration of Timm library(hosting **1100+ pytorch computer vision models**, as of writing this) into the OpenVino ecosystem. And as Timm is now part of huggingface ecosystem, the integrations done through Optimum-intel.

## Project Details and Mentors
**Contributor**: Sawradip Saha
**Organization**: OpenVino-toolkit
**Size of project**: 175 hours
**Mentors**: Alexander Kozlov, Liubov Talamanova

### Background

Timm is a collection of pre-trained and optimized models for deep learning in computer vision. By providing a wide array(1100+ as of now) of state-of-the-art models with ease of use, it encourages research and development in the field of computer vision, making cutting-edge technology accessible to both professionals and enthusiasts.

OpenVINO is a toolkit designed to fast-track the development of high-performance computer vision and deep learning inference. By offering optimization across multiple hardware types, including CPUs, GPUs, and FPGAs, OpenVINO allows for efficient deployment in various environments.

The integration of Timm with OpenVINO combines the robust and accessible models from Timm with the high-performance and flexibility of OpenVINO. This synergy enables enhanced performance and scalability, making it an ideal solution for various applications ranging from research to production deployment.

## Implementation Details
As most of Timm models are for Image-classification or feature-extraction, the integration is done through `OVModelForImageClassification`, so the user can load models like any other Huggingface models from HuggingFace Hub. Note that, previously the attempt to load the models in this ways raised a number of errors and unexpected behavious, similar to loading through `AutoModelForImageClassification` some of which are mentioned [here](https://github.com/huggingface/transformers/issues/25282).

Aditionally,
* A feature extractor `TimmImageProcessor` has been implemented, as `transformers` didn't have any dedicated feature-extractor/image-precessor to handle the processor according to provided model config.
* Several tests have been added, to test these new features.
* Relevant changes to the docs.

## Example:
With this PR we can load and use Timm models from [hub](https://huggingface.co/timm) like this:
```
import torch
from optimum.intel import OVModelForImageClassification
model_id = ""timm/vit_tiny_patch16_224.augreg_in21k""
hf_model = OVModelForImageClassification.from_pretrained(model_id, export=True)
out = hf_model(pixel_values = torch.zeros((5, 3, hf_model.config.image_size, hf_model.config.image_size)))
print(out.logits.shape)
```
or

```
import requests
from PIL import Image
from optimum.intel.openvino.modeling_timm import TimmImageProcessor
from optimum.intel import OVModelForImageClassification

url = ""http://images.cocodataset.org/val2017/000000039769.jpg""
image = Image.open(requests.get(url, stream=True).raw)
model_id = ""timm/vit_tiny_patch16_224.augreg_in21k""
preprocessor = TimmImageProcessor.from_pretrained(model_id)
inputs = preprocessor(images=image, return_tensors='pt')
ov_model = OVModelForImageClassification.from_pretrained(model_id, export=True)
outputs = ov_model(pixel_values=inputs[""pixel_values""])
```

",True,404,https://api.github.com/repos/huggingface/optimum-intel/pulls/404,https://github.com/huggingface/optimum-intel/pull/404,closed,473,2,5,19,8,23,0,0,[],2023-08-09 12:00:40+00:00,2023-08-23 14:50:58+00:00,1219818.0,"14 days, 2:50:18","[{'comment_id': 1290301445, 'comment_body': ""I don't think we need such a model hierarchy, with TimmPreTrainedModel, TimmModel, etc. At least Optimum-Intel is not the place for such classes. What is required is just to put the logic of model creation and prefetch into the .from_timm() method of OVModelForTimm. Moreover, OVModelForTimm itself is not needed since there is no intent to expose it. It can be just a utility function or class that is not inherited from HF hierarchy at all."", 'comment_created': datetime.datetime(2023, 8, 10, 15, 18, 36, tzinfo=datetime.timezone.utc), 'commenter': 'AlexKoff88', 'type': 'User'}, {'comment_id': 1290302289, 'comment_body': 'Loss is not needed at all in the context of further export to OpenVINO.', 'comment_created': datetime.datetime(2023, 8, 10, 15, 19, 11, tzinfo=datetime.timezone.utc), 'commenter': 'AlexKoff88', 'type': 'User'}, {'comment_id': 1290305418, 'comment_body': ""I didn't expect but this is great that you created it. I just wonder how much from the overall Timm preprocessing options this class supports and how we will validate it?"", 'comment_created': datetime.datetime(2023, 8, 10, 15, 21, 34, tzinfo=datetime.timezone.utc), 'commenter': 'AlexKoff88', 'type': 'User'}, {'comment_id': 1292353061, 'comment_body': 'I have removed that section.\r\n', 'comment_created': datetime.datetime(2023, 8, 12, 15, 45, 42, tzinfo=datetime.timezone.utc), 'commenter': 'sawradip', 'type': 'User'}, {'comment_id': 1292353199, 'comment_body': 'I have removed the hierarchy as much as possible, leaving a small placeholder model to contain the `timm` models.\r\n', 'comment_created': datetime.datetime(2023, 8, 12, 15, 46, 55, tzinfo=datetime.timezone.utc), 'commenter': 'sawradip', 'type': 'User'}, {'comment_id': 1292698841, 'comment_body': 'You used `ViTOnnxConfig` as a base class here. Does it mean that only ViT models from Timm will work here?', 'comment_created': datetime.datetime(2023, 8, 13, 7, 26, 25, tzinfo=datetime.timezone.utc), 'commenter': 'AlexKoff88', 'type': 'User'}, {'comment_id': 1292699145, 'comment_body': 'I would inherit from `VisionOnnxConfig` to make it safer.', 'comment_created': datetime.datetime(2023, 8, 13, 7, 27, 30, tzinfo=datetime.timezone.utc), 'commenter': 'AlexKoff88', 'type': 'User'}, {'comment_id': 1292699522, 'comment_body': 'I think we should have a test which:\r\n- load a timm model from hub\r\n- saves it in IR locally (.save_pretrained)\r\n- loads IR and does inference (random data is ok)', 'comment_created': datetime.datetime(2023, 8, 13, 7, 30, 15, tzinfo=datetime.timezone.utc), 'commenter': 'AlexKoff88', 'type': 'User'}, {'comment_id': 1293226928, 'comment_body': 'I have fixed that.\r\n', 'comment_created': datetime.datetime(2023, 8, 14, 9, 30, 54, tzinfo=datetime.timezone.utc), 'commenter': 'sawradip', 'type': 'User'}, {'comment_id': 1293227410, 'comment_body': 'A test `test_timm_save_and_infer` is added.', 'comment_created': datetime.datetime(2023, 8, 14, 9, 31, 20, tzinfo=datetime.timezone.utc), 'commenter': 'sawradip', 'type': 'User'}, {'comment_id': 1293229369, 'comment_body': 'I also wonder. Though I have added and used the class, it would be better if we had any methodical way for validating.', 'comment_created': datetime.datetime(2023, 8, 14, 9, 32, 36, tzinfo=datetime.timezone.utc), 'commenter': 'sawradip', 'type': 'User'}, {'comment_id': 1296778023, 'comment_body': 'I think this bit was a fix from a previous PR to avoid downloading ONNX weights when the OV ones are available.', 'comment_created': datetime.datetime(2023, 8, 17, 7, 19, 21, tzinfo=datetime.timezone.utc), 'commenter': 'fxmarty', 'type': 'User'}, {'comment_id': 1296780777, 'comment_body': 'Is this to support the ONNX export of timm models? Do you think it would be useful to move it (later) in optimum main repo?', 'comment_created': datetime.datetime(2023, 8, 17, 7, 21, 59, tzinfo=datetime.timezone.utc), 'commenter': 'fxmarty', 'type': 'User'}, {'comment_id': 1296783102, 'comment_body': 'Could you put a comment here pointing at what this class is adapted / copied from (if it is)?', 'comment_created': datetime.datetime(2023, 8, 17, 7, 24, 5, tzinfo=datetime.timezone.utc), 'commenter': 'fxmarty', 'type': 'User'}, {'comment_id': 1296813143, 'comment_body': 'Thanks, @fxmarty for the review. It could be useful in case ORT supports such models as well. We are moving to direct PyTorch import of model to OpenVINO as you can see in https://github.com/huggingface/optimum-intel/pull/397. So, this part will be definitely revised after PR #397 is merged. So far, I would keep it as is.', 'comment_created': datetime.datetime(2023, 8, 17, 7, 45, 42, tzinfo=datetime.timezone.utc), 'commenter': 'AlexKoff88', 'type': 'User'}, {'comment_id': 1296813593, 'comment_body': '@sawradip, can you please answer.', 'comment_created': datetime.datetime(2023, 8, 17, 7, 46, 9, tzinfo=datetime.timezone.utc), 'commenter': 'AlexKoff88', 'type': 'User'}, {'comment_id': 1296862235, 'comment_body': 'It is adapted from ViTImageProcessor - https://github.com/huggingface/transformers/blob/main/src/transformers/models/vit/image_processing_vit.py \r\n\r\nI have added a comment.', 'comment_created': datetime.datetime(2023, 8, 17, 8, 29, 14, tzinfo=datetime.timezone.utc), 'commenter': 'sawradip', 'type': 'User'}, {'comment_id': 1296867740, 'comment_body': 'Merged the main branch. Hope this is solved.', 'comment_created': datetime.datetime(2023, 8, 17, 8, 33, 56, tzinfo=datetime.timezone.utc), 'commenter': 'sawradip', 'type': 'User'}, {'comment_id': 1297004791, 'comment_body': 'Have you pushed?\r\n\r\nI still see this PR branch reverting the fix: https://github.com/sawradip/optimum-intel/blob/integrate_timm/optimum/intel/openvino/modeling_diffusion.py#L229', 'comment_created': datetime.datetime(2023, 8, 17, 10, 9, 2, tzinfo=datetime.timezone.utc), 'commenter': 'fxmarty', 'type': 'User'}, {'comment_id': 1297012718, 'comment_body': 'Now its fixed.   Right?', 'comment_created': datetime.datetime(2023, 8, 17, 10, 15, 9, tzinfo=datetime.timezone.utc), 'commenter': 'sawradip', 'type': 'User'}, {'comment_id': 1297063555, 'comment_body': 'It is, thank you!', 'comment_created': datetime.datetime(2023, 8, 17, 11, 4, 11, tzinfo=datetime.timezone.utc), 'commenter': 'fxmarty', 'type': 'User'}, {'comment_id': 1297064194, 'comment_body': 'Sounds good!', 'comment_created': datetime.datetime(2023, 8, 17, 11, 4, 50, tzinfo=datetime.timezone.utc), 'commenter': 'fxmarty', 'type': 'User'}, {'comment_id': 1303354046, 'comment_body': ""I don't think `timm` should become a hard dependency "", 'comment_created': datetime.datetime(2023, 8, 23, 17, 48, 6, tzinfo=datetime.timezone.utc), 'commenter': 'echarlaix', 'type': 'User'}]","[{'commit_sha': 'ceda79060fca28cf19c1e2dbce8b32833c374019', 'committer_username': 'sawradip', 'committer_name': 'Sawradip Saha', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 28, 10, 2, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34d8c3d950517821a42c186e00ccd6cd25a23373', 'committer_username': 'sawradip', 'committer_name': 'Sawradip Saha', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 28, 10, 2, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf3b7db5e39bfcd400de25a2c6045d7d842696e5', 'committer_username': 'sawradip', 'committer_name': 'Sawradip Saha', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 28, 10, 2, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8beba035217d4965eacee84b35509bcf2f89dc97', 'committer_username': 'sawradip', 'committer_name': 'Sawradip Saha', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 28, 10, 2, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf6e017ddbd1fc4dccd32f4009eeef8e229525b2', 'committer_username': 'sawradip', 'committer_name': 'Sawradip Saha', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 28, 10, 2, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '656b05b8a0392f8f8b48113d1f7cc8c689297ad4', 'committer_username': 'sawradip', 'committer_name': 'Sawradip Saha', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 28, 10, 2, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2adcb1b52045d45805f57de44306bfaedeea127d', 'committer_username': 'sawradip', 'committer_name': 'Sawradip Saha', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 28, 10, 2, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '055624703cf993ca7fe89791760267b2abebd336', 'committer_username': 'sawradip', 'committer_name': 'Sawradip Saha', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 28, 10, 2, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1303c97c6d42ad8aba6f8fca8992da84df8a5162', 'committer_username': 'sawradip', 'committer_name': 'Sawradip Saha', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 28, 10, 2, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ecedcde77bde28e5102ffb351c5a4b7d742889be', 'committer_username': 'sawradip', 'committer_name': 'Sawradip Saha', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 28, 10, 2, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2458b036ebcd1920092f3105c54bf567fe0fbee3', 'committer_username': 'sawradip', 'committer_name': 'Sawradip Saha', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 28, 10, 2, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '52b03e2e5c60ffcf747df24122b29e501a1b2bf4', 'committer_username': 'sawradip', 'committer_name': 'Sawradip Saha', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 28, 10, 2, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b0f1d66c0b4ab4f6939bc7a997acbf478cbcea22', 'committer_username': 'sawradip', 'committer_name': 'Sawradip Saha', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 28, 10, 2, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '988fa4e5396e758a25eed7f12c3127fa8db73632', 'committer_username': 'sawradip', 'committer_name': 'Sawradip Saha', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 28, 10, 2, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3cff5f110388c7ed7b4adc5b85b2884e9ddf7bb', 'committer_username': 'sawradip', 'committer_name': 'Sawradip Saha', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 28, 10, 2, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9dadb9af5a2a735015372fac890cd73f648bd67d', 'committer_username': 'sawradip', 'committer_name': 'Sawradip Saha', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 28, 10, 2, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b463c41f2fa2e81e488a309d725c4b7de50af18c', 'committer_username': 'sawradip', 'committer_name': 'Sawradip Saha', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 28, 10, 2, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a2b3d38f7e223961a131fd07bb1431a0cb1a4048', 'committer_username': 'sawradip', 'committer_name': 'Sawradip Saha', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 28, 10, 2, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f3c28cb531a30d5b016d94026a1b63d6150df7c', 'committer_username': 'sawradip', 'committer_name': 'Sawradip Saha', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 28, 10, 2, 27, tzinfo=datetime.timezone.utc)}]",Sawradip Saha,67541368,,User,,66,,37,31

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
496192011,optimum-intel,huggingface/optimum-intel,Jupyter Notebook,105,374,37,56,843,50,63,35,"[{'id': 1468481426, 'number': 404, 'closed': datetime.datetime(2023, 8, 23, 14, 50, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 9, 12, 0, 40, tzinfo=datetime.timezone.utc), 'time_taken': 1219818.0, 'time_delta': '14 days, 2:50:18', 'additions': 473, 'deletions': 2, 'state': 'closed'}, {'id': 1468355644, 'number': 403, 'closed': datetime.datetime(2023, 8, 9, 10, 52, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 9, 10, 33, 55, tzinfo=datetime.timezone.utc), 'time_taken': 1105.0, 'time_delta': '0:18:25', 'additions': 170286, 'deletions': 3, 'state': 'closed'}, {'id': 1417743051, 'number': 368, 'closed': datetime.datetime(2023, 8, 14, 12, 11, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 3, 9, 35, 15, tzinfo=datetime.timezone.utc), 'time_taken': 3638157.0, 'time_delta': '42 days, 2:35:57', 'additions': 5, 'deletions': 2, 'state': 'closed'}, {'id': 1414319484, 'number': 364, 'closed': datetime.datetime(2023, 7, 3, 6, 39, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 30, 5, 37, 41, tzinfo=datetime.timezone.utc), 'time_taken': 262937.0, 'time_delta': '3 days, 1:02:17', 'additions': 0, 'deletions': 0, 'state': 'closed'}]"
