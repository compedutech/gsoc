pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
662989184,Polygon Collision Detection GSOC 2021,"


# Polygon based Collision Detection System, GSOC 2021
This pull request contributes to the collision detection system (#1882) in the ENIGMA, adding a completely new feature of using polygons for detecting collisions instead of the other two options available, BBOX, and Precise. It uses simple or complex polygons to mask objects for collisions while extending the interface for the Collision Detection System that is used by PRECISE and BBOX collision Systems and also provides Polygons as separate resources that can be used for Collisions and Drawing.

## 1. Noteworthy Changes
### 1.1. Polygons
I added a new class of Engine resources to use, **Polygons**, which are closed shapes defined by a set of points that can be assigned to objects for detecting collisions. 
- Added a new class plus file called ``polygon_internal.h`` in the ``UniversalSystems/Resources/``.
- Added a new structure, ``Diagonals`` that store the internal diagonal information of a polygon, and is used for triangulation (see below).
- Added a new structure, ``MinMaxProjection`` to store projection data used for collision detection (see below).
- The ``Polygon`` class stores the following information in it:
	- ``std::vector<glm::vec2> points`` are the main polygon points that are stored in a clockwise fashion, with the assumption that the polygon formed from the points is a close region.
	- ``std::vector<glm::vec2> offsetPoints`` are the polygon points that are offset, stored to improve time performance by caching them once.
	- ``std::vector<Diagonal> diagonals`` are the internal diagonals of the polygons after triangulation, stored to improve time performance by caching them once.
	- ``int height, width`` are the dimensions of the bounding box of the original polygon
	- ``glm::vec2 offset`` is the offset point inside the polygon that is considered the origin inside ENIGMA and LGM. This is the point where the ``x`` and ``y`` of an instance will reside over. 
	- ``bool concave`` indicates whether a polygon is concave (true) or convex (false). 
![Convex and Concave polygon difference](https://drive.google.com/uc?export=view&id=1OsZ_m5tYReDnpZecs7BbLZnau1yCfP7H)
- The ``Polygon`` class includes the following noteworthy methods:
	- ``void addPoint(point)`` adds a polygon point, assuming that the function is used to add points in a clockwise manner and that the point added closes the polygon with the first point. This function is overloaded to work with both ``glm::vec2`` and a tuple of ``double``
 ![Points are added in the clockwise winding order](https://drive.google.com/uc?export=view&id=1Pyx1fpojuRSFQiGZisRFKgBN7k_NAXWx)
	- ``void removePoints(point)``remove the polygon point, assuming that the point before and after this point will form a line segment and complete the polygon.
- In addition to holding the ``Polygon`` and the ``Diagonal`` class, the file ``polygon_internal.h`` also has some important mathematical functions that are used for computation throughout the codebase:
	- ``rotateVector(vector, angle, pivot)`` rotates the vector from the given pivot to the angle specified (radians), and returns the rotated vector. 
	- ``computeLeftNormal(vector)`` computes the left side normal of a vector (see image)
![Difference between Left and Right Normal](https://drive.google.com/uc?export=view&id=1p5G2S3HM4Cgqft5fr_jCFeeVCK9AJHr_)
	- ``angleBetweenVectors`` computes the angle between vectors using the x-axis as the origin vector. The angle is computed in radians. 

Added the file ``polygon.h`` which complete Interface for Creating, Editing, and Manipulating Polygons inside GML Scripts, with functions that can be extended to IDE as well like LGM or RGM. These functions are the main interface for ENIGMA users to use the new system. Some of the noteworthy functions in this are:
- ``polygon_add(height, width)`` adds a new polygon resource inside the ``AssetArray<Polygon> polygons``. The ``AssetArray`` is an external resource list that can be accessed by both ``enigma`` and ``enigma_user`` namespaces. This function returns ``int polygon_id`` which is the ``AssetArray`` assigned ID to the polygon resource and must be provided to use subsequent interface functions
- ``polygon_add_point(polygonID, point)`` Adds the point according to the above-mentioned assumptions in the polygon with the ID specified. 
- ``polygon_remove_point(polygonID, point)`` removes the point according to the above-mentioned assumptions in the polygon with the ID specified.
- ``polygon_set_offset(polygonID, x, y)`` sets the offset of the polygon resource with the ID specified.
- ``polygon_decompose()`` calls the triangulation of the concave polygon, to decompose into smaller subpolygons (see Triangulation for details).

Finally, it includes a complete API interface for Attaching and Transforming Polygons with Objects and Instances. 
- Added ``int polygon_index`` in the ``Universal_System/Object_Tiers/collisions_object.h``. This ensures that each instance of the ``collisions_object`` has a polygon attached to it. By default, this value is `-1` to signal that no polygons are attached.
- Added ``gs_scalar polygon_xscale, polygon_yscale, polygon_angle`` inside ``Universal_System/Object_Tiers/collisions_object.h``. 
	- These instance attributes are used to transform the polygon per instance. They can be accessed and used by the user in the GML scripts to scale (x and y-axis) and rotate the polygon. 
	- This transformation is independent of the actual polygon stored as a resource, meaning many different instances and objects can use the same polygon shape and transform them. 
	- This allows more flexibility and ease to ENIGMA users. 
![The same squared polygon is used to create the walls, the larger box, and the diamond](https://drive.google.com/uc?export=view&id=1VIHMS0sTcKcPmZC5rhN0thVDOXwwsGHf)
- Added the following transformation functions inside ``Universal_System\Resources\polygon_internal.h``. In each case, points are sent by reference to reduce the redundant copying of vectors.:
	- ``offsetPoints(points, x, y)`` to add the offset into the list of points. 
	- ``rotatePoints(points, angle, origin)`` to rotate the list of points about the origin and the angle specified in radians. 
	- ``scalePoints(points, scale_x, scale_y)`` to scale the list of points on the `x` and the `y` axes. 
	- ``transformPoints(points, x, y, angle, origin, scale_x, scale_y)`` combines the above 3 functions into a single operation, for efficient computation that is at a needed per-frame basis.   
### 1.2. Collision Detection
The main collision detection function works in 6 layers inside the ENIGMA's engine and is listed down from core to interface:
- Projection Layer computes the MinMax projection of vectors and points in polygon and ellipse cases.
- Separating Axis Theorem Layer computes the actual collision detection between the polygon shapes (convex only) using the MinMax projections. This handles cases for both elliptical and simple polygon shapes
- Polygon-case Layer abstracts Concave collision detection from the interface functions, by providing a single point for any polygon collision. 
- Collision-Shape Layer is the first layer to abstract from mathematics. It computes collision checks for different shapes and also incorporates Bounding Box collision checks
-  Main Layer computes collision detection between instances and handles all the instance, transformation, and object-related logic. This is the layer that can benefit from a Broadphase collision system (see Future Works).
- Interface Layer is the existing GML Layer that falls in the ``enigma_namespace``, and is ENIGMA's API. This layer acts as an adapter to multiple different collision systems and is therefore implemented by each system independently. 
The block diagram illustrates the architecture that is implemented, and then the functions are detailed. 
![Layer Visualised](https://drive.google.com/uc?export=view&id=1AmK2IsANErZMW2j1mycDPwAc18YpaDiA)
- Projection Layer
	- This is added in the file ``Collision_Systems\Polygon\polygon_collision_util.h``
	- ``getMinMaxProjection(points, axis)`` computes the project of all the points in the list on the specified axis. This is done by computing the dot product of the point with the axes and finding minimum and maximums. It returns the structure ``MinMaxProjection`` with the min and max values of the project as well as the indices of the points that correspond to those. ![The MinMax Projection visualized](http://back2basic.phatcode.net/images/min_max_projection.png)
	- ``getEllipseProjectionPoints(angle, x, y, rx, ry)`` computes the projection of the ellipse formed at (x, y) with rx and ry being the radii on x and y-axis respectively. This assumes that the ellipse is perfectly horizontal (aligned with the x-axis) and computes its projection at the specified angle. 
![MinMax Projection from Ellipse](https://drive.google.com/uc?export=view&id=1eH6P61EzZWH1zt1v9iX885lHrJuHAVaG)
- SAT Layer
	- The SAT layer is added in the file ``Collision_Systems\Polygon\polygon_collision_util.h``
	- ``get_polygon_polygon_collision(poly1, poly2)`` function checks whether or not two simple polygon points are colliding or not. It first computed the normals of the edges of the points provided, and iterate over the MinMax Projection of all the points on those axes one by one. If there is a single axis without overlap then there is no collision happening and it returns false. Otherwise, we have a collision and it returns true.
	- ``get_polygon_ellipse_collision(poly1, x, y, rx, ry)`` function works similarly but computes collision between a simple polygon and an ellipse. The method is the same as above, It just computes the ellipse projections. 
	
- Polygon-case Layer
	- This is added in the file ``Collision_Systems\Polygon\polygon_collision_util.h``
	- ``get_complex_polygon_collision()`` has a lot of parameters. The function acts as a bridge between instances and collision functions. It does that by
		- First, we compute the transformed points of the polygon from the instance's attributes like ``polygon_angle, polygon_xscale, polygon_yscale, x, y``. 
		- The pivot for rotation is used from the offset of the polygon and is retrieved here from the ``Polygon::getOffset()`` function.
		- For a convex polygon, it uses the SAT Layer normally.
		- For concave polygons, It retrieves the ``subpolygons`` from the ``polygon`` resource, iterates over all subpolygons, and applies transformations. It then computes collision using SAT Layer with each subpolygon.
	- ``get_complex_ellipse_collision()`` works similarly as above, the difference being the collision check between polygon and an ellipse. The function takes all the parameters needed to compute the ellipse, and also runs through the concave collision case. 
 - Collision-Shape Layer
	 - Added in the file ``Collision_Systems\Polygon\polygon_collision_util.h``
	 - ``get_polygon_inst_collision(inst1, inst2, x, y)`` computes instance instance collision that both have polygons attached to them. The optional argument of x and y can be used for the offset. 
	 - ``get_polygon_point_collision(inst, x, y)`` computes collision with a point by creating a small Box around the point and using that shape for collision checks.
	 -  ``get_polygon_bbox_collisions(inst, inst, x, y)`` computes collision between an instance with a polygon and an instance with a BBOX. BBOX of polygons is computed using their minimum and maximum Points.
![Bounding box of a polygon](https://user-images.githubusercontent.com/66216239/98363307-0be46000-202f-11eb-8dea-2b44504f7b89.png)
- Main Layer 
	- The main layer functions are added in the ``Collision_Systems\Polygon\PolygonImpl.h`` file.
	- All the main layer function follows the same pattern, which can be briefed as:
		- Fetching the calling instance and checking for collision flags like ``solid``, ``notme``, and the existence of a collision mask, either ``sprite_index`` or ``polygon_index``.
		- Fetch the polygon points associated with the instance, and iterate over all other instances of the ``object`` that is given in the parameter
		- Check for collision and return appropriate ``object_collisions*`` with the colliding instance.
	- This is applied to the functions:
		- ``collide_inst_inst()``
		- ``collide_inst_rect()``
		- ``collide_inst_line()``
		- ``collide_inst_point()``
		- ``collide_inst_ellipse()``
		- ``collide_inst_circle()``
	- ``get_colliding_bbox_instances(x1, y1, object, solid_only)``  returns a vector of all the instances that are colliding with their BBOX on the given point. This function is used to query the collision system once and is used by:
		- ``destroy_inst_point()`` to destroy all instances on the point
		- ``change_inst_point`` to change all instances into another one on a point.
- Interface Layer
	- The functions are added in the file ``Collision_Systems\Polygon\Polygonfuncs.cpp``. 
	- The majority of the interface functions are simply using the Collision layer functions, with little to no interference. This is true for all the functions. 

### 1.3. Triangulation
For the collision system to support concave polygons, they need to be first decomposed into smaller convex polygons that can be used by the SAT layer. Concave to Convex Polygon Decomposition using simple Triangulation methods, to handle collision checks for Concave Polygons. 
- Triangulation functions are added in the ``Universal_System\Resources\polygon_internal.h`` file.
- Functions for checking points against each other:
	- ``areaOfTriangle(a, b, c)`` computes the area bounded by the three points
	- ``pointLeft(a, b, c)`` checks if point `c` is on the left of the line segment formed by `a` and `b`.
	- ``pointLeftOn(a, b, c)`` checks if point `c` is on the left or on the line segment formed by `a` and `b`.
	- ``pointCollinear(a, b, c)`` checks if point `c` is collinear to the line segment `a` and `b`.
	- ``pointBetween(a, b, c)`` checks if point `c` is in between the line segment `a` and `b`
![Point functions visualised](https://drive.google.com/uc?export=view&id=1hYHsomd9HJjdCQkfKGhEAEH82xwp4Zs-)
- Functions for detecting line segment intersection
	- ``properIntersection(a, b, c d)`` checks if there is a proper intersection between the line `(a, b)` and `(c, d)`
	- `intersection(a, b, c, d)` checks for intersection between line `(a, b)` and `(c, d)`
![Point functions visualised](https://drive.google.com/uc?export=view&id=1hcNqlgBMAFt-_NBK1iyErt70XFZpEKgC)
- Functions for checking diagonals
	- `diagonal(points, i, j)` checks is the line segment `(points[i], points[j])` a diagonal
	- `diagonalInCone(points, i, j)` checks is the line segment `(points[i], points[j])` a diagonal and in cone
	- `internalDiagonal(points, i, j)` checks is the line segment `(points[i], points[j])` an internal diagonal of the closed polygon.
![Point functions visualised](https://drive.google.com/uc?export=view&id=1xEKlX06H3LVyOUxnTrp2z2xjW2yIQ_4G)
- The above mathematical functions are used to perform clipping of the points to form subpolygons and store them inside `Polygon::subpolygons`
	- `clipEar(points, i)` removes the `ith` point from the `points`
	- `triangulate(points, subpolygons, diagonals)` is the main recursive function to compute triangulation of the given `points` and store them as `subpolygons` and the internal `diagonals` that triangulate it.
![Point functions visualised](https://drive.google.com/uc?export=view&id=1X7sZNs1XYkpRK_8vBiVJEH53Yool6-7H) 
- I added the function `Polygon::decomposeConcave()` to perform triangulation on the `Polygon` and cache the `subpolygons` and the `diagonals` formed after it. If a polygon is flagged as `concave` then:
	- This function is called on every `addPoint(point)` and `removePoint(point)` to recompute triangulations.
	- This function is called after setting the flag as `concave` to `true`
	- Can be called by ENIGMA user using the interface function `polygon_decompose_concave(polygon_id)`
### 1.4. Drawing
I added general methods for Drawing Polygons, with options for colors, outline, and their Axis Aligned Bounding Boxes (AABB). All code added in the file ``Graphics_Systems\General\GSpolygon.h``. These functions are interface and can be directly called from GML scripts inside ENIGMA. All the functions work by first fetching the polygon points and computing the transformed points from the transformation that the callee provides. 
 - ``draw_polygon(id)`` draws the outline of the polygon.
 - ``draw_polygon_bbox(id)`` draws the outline of the polygon along with its Bounding Box
 - ``draw_polygon_sub(id)`` draws the outline of the polygon along with its internal diagonals for subpolygon.
 - ``draw_polygon_color(id)`` colored version of the function
 - ``draw_polygon_bbox_color(id)`` colored version of the function
 - ``draw_polygon_sub_color(id)`` colored version of the function
![MinMax Projection from Ellipse](https://drive.google.com/uc?export=view&id=16yMPhblwgPasZQqNuA0qF7A0oOX-_Z0G)

### 1.5. Testing
Added Testcases Game inside the `Tests` directory, which encompasses Polygon collision checks for all major functions. The game file is found at `CommandLine/testing/Tests/polygon_collision.gmx`. The test cases test for all of the interface functions mentioned above for three different sets of polygons:
- Triangle vs Triangle
- Irregular Octagon vs Irregular Octagon
- Concave vs Concave
The game creates three instances of each set that uses the same polygon resources, and apply different transformations to them. It then tests for all the collision functions, collision events, movements (bounce, contact), and instance creation and deletion. 
The testcases are integerated onto ENIGMA's TestHarness framework, that is incorporeted on Github's CI. This is done by providing the configuration file on which the testcase game is compiled and executed on at `CommandLine/testing/Tests/polygon_collision.cpp`
### 1.6. Miscellaneous Changes
- Added ``int polygonID`` inside ``CompilerSource/backend/resources/GmObject.h`` to store polygonID attached by an object for LGM.
- Added new lines for the code compilation in ``CompilerSource/compiler/components/write_object_data.cpp`` file to add ``polygonID`` inside the instance creation code. 
- Fixed a bug where attaching GDB caused memory leaks due to non-static initialisation of instances and ``objectdata`` in ``CompilerSource/compiler/components/write_object_data.cpp``.
- Refactored redudant `get_bbox_border` function inside `precImpl.h`, `bbox_impl.h` and `polygon_impl.h` into a single static function inside the file `collisions_general.h`

## 2. Benchmarking
The collision system PR won't be complete without some stress tests and benchmarking against other collision systems. 
1. The first benchmark test is done using multiple diamonds as instances and objects and checking for collision against a rectangle. Below are the results obtained after running an averaging over 15 compilations. 
##### `collision_rectangle` benchmark
| Branch                   | Time| CPU RAM (MB)  | GPU RAM (MB) |
|--------------------------|-----|---------------|--------------|
| Polygon | :heavy_minus_sign: 113 | :heavy_minus_sign: 11.2          | :heavy_minus_sign: 176.3|
| Precise           | :small_red_triangle: 119| :heavy_minus_sign: 11.3 (-/+ 2) | :small_red_triangle: 412.3           |
| BBOX               | :small_red_triangle_down: 080 | :heavy_minus_sign: 10.6 (-/+ 2) | :small_red_triangle_down: 139.5           |
The results shows that the Polygon collision system performs almost the same in terms of time complexity against the Precise system, providing the same level of accuracy in collision detection while using fewer GPU resources. 
2. The second benchmark test is done using a concave polygon shape and a diamond, and testing for collision against them. The results are obtained over 15 compilations, and are shown below:
##### `place_free` benchmark
| Branch                   | Time| CPU RAM (MB)  | GPU RAM (MB) |
|--------------------------|-----|---------------|--------------|
| Polygon | :heavy_minus_sign: 131 | :heavy_minus_sign: 12.0          | :heavy_minus_sign: 80.1|
| Precise           | :small_red_triangle_down: 084| :heavy_minus_sign: 13.5 (-/+ 2) | :small_red_triangle: 98.8           |
| BBOX               | :small_red_triangle_down: 043 | :heavy_minus_sign: 13.2 (-/+ 2) | :small_red_triangle_down: 90.2           |
The test performs adequate in the Polygon collision system, give great accuracy and a reduce amount of GPU usage as compared to Precise System. 

## 3. Demonstrations
1. The first demonstration of the system can be downloaded from: https://drive.google.com/file/d/1oIUjVktzTAFgk4xev5Yjpp0fyZRfCKHZ/view?usp=sharing 
It consists of a single room with 3 different objects sharing the same base polygon (box). The demo shows the movement, collision, transformations, and robustness of the system. ![MinMax Projection from Ellipse](https://drive.google.com/uc?export=view&id=1QNlMDygpbVyAHU97WJLyoUm_BSVa0Fsm)
2. The second demonstration can be downloaded from: https://drive.google.com/file/d/1zREl5gK6-_pZx5LNvL3W_sOLei9hcGxA/view?usp=sharing 
This demo consists of 2 concave polygons, a shape, and a star, running collision detection against each other and against an ellipse. The demo showcases the movement, collision, and transformations for a concave polygon. 
![MinMax Projection from Ellipse](https://drive.google.com/uc?export=view&id=1_D80bJ6PV1CDxMMAZRWERyrqfmuvlbl_)

## 4. Future Work
Some of the work that was not covered in the time period of GSOC, and is left are as below
- Implementation of a Broadphase detection system. The design decisions regarding Data structures and algorithms are yet to be made. ![Broadphase collision detection](https://uploads.toptal.io/blog/image/127136/toptal-blog-image-1536860439039-de0a153ffc976acf1518901b1b7334ac.png)
- Generalisation and Optimisation of common collision functions shared across different collision systems.
- Optimisation of the Concave polygon decomposition, for which the Hertel-Mehlhorn Algorithm can be because it can easily integrate with the Polygon Triangulation method. This will significantly reduce the performance overhead for collision computation of concave polygons. 
![MinMax Projection from Ellipse](https://drive.google.com/uc?export=view&id=1CSsJNMgbBvRJ7rM7M9OHra9bqtFFRYkn)
-  Support and API for the IDE, whether that is LGM or RGM in the future, to provide users an intuitive GUI for using Polygons.",True,2229,https://api.github.com/repos/enigma-dev/enigma-dev/pulls/2229,https://github.com/enigma-dev/enigma-dev/pull/2229,closed,5874,37,56,34,1,66,1,0,[{'name': 'GSOC-Done'}],2021-06-06 16:03:01+00:00,2021-08-26 15:53:42+00:00,6997841.0,"80 days, 23:50:41","[{'comment_id': 654971753, 'comment_body': 'seems like good place for constexpr instead. ', 'comment_created': datetime.datetime(2021, 6, 20, 18, 26, 8, tzinfo=datetime.timezone.utc), 'commenter': 'fundies', 'type': 'User'}, {'comment_id': 655503846, 'comment_body': 'Good readme for your repo, but I think I like ours better for the main repo. 😉', 'comment_created': datetime.datetime(2021, 6, 21, 15, 49, 23, tzinfo=datetime.timezone.utc), 'commenter': 'JoshDreamland', 'type': 'User'}, {'comment_id': 655508914, 'comment_body': '(style nit) if we put a newline after the opening brace, we should put one before the closing brace. I imagine you had added something here and then later deleted it. It might be worth reverting the whitespace-only files before we merge this.\r\n\r\nIn general, I\'m always happier with code I send out for review if I give it a quick glance-over for changes I don\'t mean to include before mailing it. It may sound obvious, but as your career goes on, you\'ll think, ""nah, I\'m fine"" and you\'ll laugh because there\'s just literally never a point where a multi-file change won\'t have *something* silly or accidental in it.', 'comment_created': datetime.datetime(2021, 6, 21, 15, 55, 47, tzinfo=datetime.timezone.utc), 'commenter': 'JoshDreamland', 'type': 'User'}, {'comment_id': 655521405, 'comment_body': ""on formatting: prefer spaces to tabs; we've been trying to follow Google style, which would be this:\r\n\r\n```\r\nnamespace enigma {\r\n\r\nconstexpr int NULL_POINT = -1;\r\nconstexpr double precision = 4e-10;\r\n\r\nclass Vector2D {\r\n private:\r\n  double x;\r\n  double y;\r\n\r\n public:\r\n  Vector2D();\r\n```\r\n\r\nI'm not a huge style pedant, but if you are curious, Google publishes their style guide [here](https://google.github.io/styleguide/cppguide.html). If you would like me to pick other style nits, I'm happy to do so. Personally, the only thing I care about is tabs vs spaces and end-of-line marks (using `\\n` not `\\r\\n`), because editors auto-updating those is noisy and ugly."", 'comment_created': datetime.datetime(2021, 6, 21, 16, 9, 40, tzinfo=datetime.timezone.utc), 'commenter': 'JoshDreamland', 'type': 'User'}, {'comment_id': 655522390, 'comment_body': '(Here and elsewhere) This is definitely correct, but we can\'t pull this unless you grant us (and our users) some usage rights to the code. 😉\r\n\r\nYou can choose a license yourself (e.g. Apache, MIT, GPL) or you can write a blurb about using the same license as the rest of the ENIGMA engine. We\'re still sorting out some licensing issues ourselves, so I\'m not terribly picky about this, but as-written, it\'s effectively ""all rights reserved.""', 'comment_created': datetime.datetime(2021, 6, 21, 16, 11, 3, tzinfo=datetime.timezone.utc), 'commenter': 'JoshDreamland', 'type': 'User'}, {'comment_id': 655525349, 'comment_body': ""At a high-level, it makes tons of sense for Vector2D to have a getMagnitude()... *but*, you generally don't want to use this method, and having it around might promote using it.\r\n\r\nWhat I mean is, most of the usages of getMagnitude are going to look like this:\r\n```cpp\r\nif (vec1.getMagnitude() < vec2.getMagnitude()) {\r\n  // within range; fire collision event\r\n}\r\n```\r\n\r\nThat's nice and easy to read, but it's inefficient.\r\n\r\nConsider offering a getMagnitudeSquared instead:\r\n```cpp\r\nif (vec1.getMagnitudeSquared() < vec2.getMagnitudeSquared()) {\r\n  // within range; fire collision event\r\n}\r\n```\r\n\r\nJust as easy to read, much more efficient."", 'comment_created': datetime.datetime(2021, 6, 21, 16, 15, 9, tzinfo=datetime.timezone.utc), 'commenter': 'JoshDreamland', 'type': 'User'}, {'comment_id': 655529276, 'comment_body': ""re: equal(), copy(); generally, I'd prefer C++'s operator overloading for this."", 'comment_created': datetime.datetime(2021, 6, 21, 16, 20, 39, tzinfo=datetime.timezone.utc), 'commenter': 'JoshDreamland', 'type': 'User'}, {'comment_id': 655530817, 'comment_body': ""For these getters and very simple computations, consider inlining the definition in the header so that we don't need `-flto` to get optimal code. The optimizer will replace the function call with a direct read of the data, that way, which can really speed things up."", 'comment_created': datetime.datetime(2021, 6, 21, 16, 22, 41, tzinfo=datetime.timezone.utc), 'commenter': 'JoshDreamland', 'type': 'User'}, {'comment_id': 655537401, 'comment_body': ""Okay, before you put a ton of work into this file, let me lead with a disclaimer: Harrikiri had written something like this a while back, and we ended up deleting it in favor of GLM. I'm hoping you can use glm::vec2 in place of this. That said, I wanted to leave some comments on what you'd written in the hopes they'll be helpful later."", 'comment_created': datetime.datetime(2021, 6, 21, 16, 31, 39, tzinfo=datetime.timezone.utc), 'commenter': 'JoshDreamland', 'type': 'User'}, {'comment_id': 655538809, 'comment_body': ""This class, I do think we'll need."", 'comment_created': datetime.datetime(2021, 6, 21, 16, 33, 45, tzinfo=datetime.timezone.utc), 'commenter': 'JoshDreamland', 'type': 'User'}, {'comment_id': 655541057, 'comment_body': ""I'm skeptical of having the base polygon class keep track of an angle for itself. Each instance will have an `image_angle` that I'd expect to use for collision purposes. I'd expect any angle inherent to the polygon class to just be represented in the coordinates of the points (it's sufficiently expensive to copy out points/subpolygons that we'd want a separate class for a rotated polygon instance)."", 'comment_created': datetime.datetime(2021, 6, 21, 16, 37, 12, tzinfo=datetime.timezone.utc), 'commenter': 'JoshDreamland', 'type': 'User'}, {'comment_id': 655541607, 'comment_body': ""nit: struct fields are public by default, so this line doesn't do anything (and I normally don't see it written)"", 'comment_created': datetime.datetime(2021, 6, 21, 16, 37, 56, tzinfo=datetime.timezone.utc), 'commenter': 'JoshDreamland', 'type': 'User'}, {'comment_id': 655543513, 'comment_body': ""This one's a bigger pain, so feel free to ignore this comment. Generally we overload `operator<<(std::ofstream &, T)` rather than declaring a `T::print()`. Another consideration is just `std::string toString()` so that it's easy to print the type wherever."", 'comment_created': datetime.datetime(2021, 6, 21, 16, 40, 42, tzinfo=datetime.timezone.utc), 'commenter': 'JoshDreamland', 'type': 'User'}, {'comment_id': 655544703, 'comment_body': ""I'd inline these, as well (like you did on lines 90-92)."", 'comment_created': datetime.datetime(2021, 6, 21, 16, 42, 28, tzinfo=datetime.timezone.utc), 'commenter': 'JoshDreamland', 'type': 'User'}, {'comment_id': 655546027, 'comment_body': '(nit) you can just write `-y`, but the optimizer will emit the same code either way, so not a big deal', 'comment_created': datetime.datetime(2021, 6, 21, 16, 44, 29, tzinfo=datetime.timezone.utc), 'commenter': 'JoshDreamland', 'type': 'User'}, {'comment_id': 655546956, 'comment_body': ""Interestingly, with operator=, you don't even need to implement this; you can just write `Vector2D &operator=(const Vector2D &other) = default;` in the header and the right thing will happen."", 'comment_created': datetime.datetime(2021, 6, 21, 16, 45, 55, tzinfo=datetime.timezone.utc), 'commenter': 'JoshDreamland', 'type': 'User'}, {'comment_id': 655548139, 'comment_body': 'When naming methods, try to capture how expensive something is in the naming. In this case, I would call this ComputeAngle or CalculateAngle rather than getAngle (or, in Google style, angle() for a pure getter). Generally, if something is called getFoo, I expect the implementation to just return some cached value.', 'comment_created': datetime.datetime(2021, 6, 21, 16, 47, 41, tzinfo=datetime.timezone.utc), 'commenter': 'JoshDreamland', 'type': 'User'}, {'comment_id': 655548828, 'comment_body': ""This is another good example; I think this one's probably more obvious, but I'd still call it ComputeNormals or CalculateNorms or whatever just to be obvious that some math will be happening."", 'comment_created': datetime.datetime(2021, 6, 21, 16, 48, 40, tzinfo=datetime.timezone.utc), 'commenter': 'JoshDreamland', 'type': 'User'}, {'comment_id': 655564050, 'comment_body': 'nit: nullptr', 'comment_created': datetime.datetime(2021, 6, 21, 17, 11, 40, tzinfo=datetime.timezone.utc), 'commenter': 'JoshDreamland', 'type': 'User'}, {'comment_id': 655586978, 'comment_body': ""This has got to exist somewhere else, right? I think it'd be good to unify this logic a little better.\r\n\r\nThe most clever thing we could do is register mask generator functions for a given collision_type (i.e. have a `map<collision_type, void *(*)()>`). Another thing we could do is just extract the precise mask generator and the other generators somewhere common to be called from these sorts of switches.\r\n\r\nI think it would also be helpful to have these collision masks extend some kind of base class. Maybe we don't want to use virtual dispatch for the actual logic, but it would be nice to be able to delete them normally (or put them in a unique_ptr) rather than requiring free_collision_mask.\r\n\r\nDon't worry about all that in this PR, though."", 'comment_created': datetime.datetime(2021, 6, 21, 17, 47, 2, tzinfo=datetime.timezone.utc), 'commenter': 'JoshDreamland', 'type': 'User'}, {'comment_id': 655589367, 'comment_body': 'oh, I\'m sorry; this must have been cofusing. I don\'t think we want to generate collision masks for each entity. This might be a good way to test collision_point, or something, but in general, ""precise"" masks are just a way of using sprites themselves as collision masks. If this is confusing, let\'s discuss on Discord.', 'comment_created': datetime.datetime(2021, 6, 21, 17, 50, 38, tzinfo=datetime.timezone.utc), 'commenter': 'JoshDreamland', 'type': 'User'}, {'comment_id': 655590001, 'comment_body': 'I think fundies and I are hoping that mask_name covers us, if not sprite_name. We can iterate on this, I suppose.', 'comment_created': datetime.datetime(2021, 6, 21, 17, 51, 35, tzinfo=datetime.timezone.utc), 'commenter': 'JoshDreamland', 'type': 'User'}, {'comment_id': 655595620, 'comment_body': ""These files are how LGM communicates stuff to ENIGMA. I don't think LGM will ever have a polygon editor, so we shouldn't need this file. RGM probably will, but it'll go through the proto interface."", 'comment_created': datetime.datetime(2021, 6, 21, 18, 0, 18, tzinfo=datetime.timezone.utc), 'commenter': 'JoshDreamland', 'type': 'User'}, {'comment_id': 655597257, 'comment_body': ""Yup; you're on the right track."", 'comment_created': datetime.datetime(2021, 6, 21, 18, 2, 52, tzinfo=datetime.timezone.utc), 'commenter': 'JoshDreamland', 'type': 'User'}, {'comment_id': 655597945, 'comment_body': ""Actually, this'll require support from LGM, which I don't expect to get. We should probably kill resources/Polygon.h and revert this file."", 'comment_created': datetime.datetime(2021, 6, 21, 18, 3, 59, tzinfo=datetime.timezone.utc), 'commenter': 'JoshDreamland', 'type': 'User'}, {'comment_id': 655605966, 'comment_body': ""`(right+1)*xscale-1` is a little whacky; so basically, we want to add whatever fractional pixels xscale introduces to our boundary?  Could you add a comment about what happens if we don't do that? (i.e. if we just use `right * xscale`)"", 'comment_created': datetime.datetime(2021, 6, 21, 18, 17, 32, tzinfo=datetime.timezone.utc), 'commenter': 'JoshDreamland', 'type': 'User'}, {'comment_id': 655620839, 'comment_body': ""Is this for a fast BBox check before the polygon check? I wouldn't do this much math (the faster this coarse check is, the better).\r\n\r\nLet me suggest two alternatives:\r\n1. Compute the radius of each polygon from its origin ahead of time (on construct, or when a point is added), and test `sqr(inst1->x - inst2->x) + sqr(inst1->y - inst2->y) < sqr(poly1->radius + poly2->radius)`\r\n2. Use the radius to compute a maximal bounding box—or rather, the smallest bounding box that will accommodate the polygon at any angle.\r\n"", 'comment_created': datetime.datetime(2021, 6, 21, 18, 41, 55, tzinfo=datetime.timezone.utc), 'commenter': 'JoshDreamland', 'type': 'User'}, {'comment_id': 655634277, 'comment_body': 'For readability, it might be good to do one or more of these:\r\n- Move the definition of `quad` closer to this switch() (it\'s only used here)\r\n- Rename `quad` to  `quadrant`\r\n- Inline the quadrant calculation and just comment ""quadrant of the move_contact angle""\r\n\r\nTo be honest, I\'m a little apprehensive of special-casing on the angle quadrant, as it\'s never worked out well for me, but your results are looking pretty good, so let\'s run with it. 🙂', 'comment_created': datetime.datetime(2021, 6, 21, 19, 4, 16, tzinfo=datetime.timezone.utc), 'commenter': 'JoshDreamland', 'type': 'User'}, {'comment_id': 655646370, 'comment_body': ""It seems inefficient (maintenance-wise) to duplicate these methods between collision systems... wouldn't surprise me if we were doing this already. I think it would be better to just give collision systems a way to enumerate instances within a region, so we can iterate them inside a main `instance_[de]activate_region` method. Since we're currently not using any broad-phase spatial hashing structures for this, I believe we could just pass an instance_list iterator to the method and have it either wrap the iterator or copy hits into some temp container."", 'comment_created': datetime.datetime(2021, 6, 21, 19, 25, 4, tzinfo=datetime.timezone.utc), 'commenter': 'JoshDreamland', 'type': 'User'}, {'comment_id': 655650814, 'comment_body': 'These two routines are another great example: the collision system should provide a means of querying for instances at a point, and then some main function should use that collection or iterator to do the change logic. Otherwise we just end up with a bunch of identical implementations save for one line of effective change.', 'comment_created': datetime.datetime(2021, 6, 21, 19, 32, 49, tzinfo=datetime.timezone.utc), 'commenter': 'JoshDreamland', 'type': 'User'}, {'comment_id': 670240804, 'comment_body': 'I would require some guidance regarding this, As I was not aware of this. I can remove all these comments if that is whats required?', 'comment_created': datetime.datetime(2021, 7, 15, 8, 18, 6, tzinfo=datetime.timezone.utc), 'commenter': 'nabeelDanish', 'type': 'User'}, {'comment_id': 670248464, 'comment_body': 'We have converted to GLM::vec2, so should I mark this as resolved?', 'comment_created': datetime.datetime(2021, 7, 15, 8, 28, 24, tzinfo=datetime.timezone.utc), 'commenter': 'nabeelDanish', 'type': 'User'}, {'comment_id': 670250198, 'comment_body': 'This is something that I guess @fundies mentioned about having polygon transformations per instance instead of per polygon. If I am getting this correct, than this is something that I am working on now', 'comment_created': datetime.datetime(2021, 7, 15, 8, 30, 31, tzinfo=datetime.timezone.utc), 'commenter': 'nabeelDanish', 'type': 'User'}, {'comment_id': 670251029, 'comment_body': 'Thanks. this line will be removed ...', 'comment_created': datetime.datetime(2021, 7, 15, 8, 31, 38, tzinfo=datetime.timezone.utc), 'commenter': 'nabeelDanish', 'type': 'User'}, {'comment_id': 681408293, 'comment_body': 'Need to return this by reference (for efficiency, and so object metadata can be added dynamically). If that was the cause of another crash... well, it should be easy to track down.', 'comment_created': datetime.datetime(2021, 8, 3, 3, 33, 58, tzinfo=datetime.timezone.utc), 'commenter': 'JoshDreamland', 'type': 'User'}, {'comment_id': 681409842, 'comment_body': ""Nits on Google style: Opening braces on the same line as the function/condition (we're not super consistent about that on this project), indent function parameters to just after the opening parenthesis unless you begin the first one on a newline (we almost never do that), and be consistent about whether * and & go with the type or with the varname (you can generally tell whether fundies or I wrote something by which one it's using). No spaces around the username in a TODO comment, and output parameters come after input parameters in function prototypes.\r\n\r\n(These are all optional/FYI)"", 'comment_created': datetime.datetime(2021, 8, 3, 3, 39, 13, tzinfo=datetime.timezone.utc), 'commenter': 'JoshDreamland', 'type': 'User'}, {'comment_id': 681410732, 'comment_body': 'Probably a good place to use auto since the engine flip-flops a lot between single and double precision. But honestly, I would have probably just inlined these.', 'comment_created': datetime.datetime(2021, 8, 3, 3, 42, 6, tzinfo=datetime.timezone.utc), 'commenter': 'JoshDreamland', 'type': 'User'}, {'comment_id': 681412212, 'comment_body': ""Was this by fundies? Go ahead and add his name to the license rather than trying to create a custom blame layer. If it's just from some tutorial, make sure there's no licensing concern, but otherwise either link to that or don't bother setting it off."", 'comment_created': datetime.datetime(2021, 8, 3, 3, 47, 2, tzinfo=datetime.timezone.utc), 'commenter': 'JoshDreamland', 'type': 'User'}, {'comment_id': 681412483, 'comment_body': ""We have these all over the place. There's also std::min/max. Probably better not to put them in yet another header.\r\n\r\nAlso of note: templates are always static, and inline just means that you're declaring the method inline (in this file) which is also automatic."", 'comment_created': datetime.datetime(2021, 8, 3, 3, 47, 55, tzinfo=datetime.timezone.utc), 'commenter': 'JoshDreamland', 'type': 'User'}, {'comment_id': 681421725, 'comment_body': 'Did we ever discuss why you needed to generate bitmasks for primitive shapes?', 'comment_created': datetime.datetime(2021, 8, 3, 4, 18, 42, tzinfo=datetime.timezone.utc), 'commenter': 'JoshDreamland', 'type': 'User'}, {'comment_id': 681422172, 'comment_body': 'Why did you delete the newline from the end of this file?', 'comment_created': datetime.datetime(2021, 8, 3, 4, 20, 27, tzinfo=datetime.timezone.utc), 'commenter': 'JoshDreamland', 'type': 'User'}, {'comment_id': 681425099, 'comment_body': ""I'm not sure about this one, myself, but I would assume so. These functions are terribly monotonous; this might be a place to use a template to handle collision checking an arbitrary instance, so that instance iteration logic (for activated and deactivated instances alike) can be reused. For example, you could pass a class that contains x, y, and radius and calls `collision_circle` in `operator()` to handle `instance_deactivate_circle`. I'm happy to help you with the template magic as needed."", 'comment_created': datetime.datetime(2021, 8, 3, 4, 30, 4, tzinfo=datetime.timezone.utc), 'commenter': 'JoshDreamland', 'type': 'User'}, {'comment_id': 681425758, 'comment_body': 'Wait, does this code not already exist under the ""Precise"" collision system?', 'comment_created': datetime.datetime(2021, 8, 3, 4, 32, 21, tzinfo=datetime.timezone.utc), 'commenter': 'JoshDreamland', 'type': 'User'}, {'comment_id': 681426435, 'comment_body': 'I believe this comment is not yet resolved.', 'comment_created': datetime.datetime(2021, 8, 3, 4, 34, 33, tzinfo=datetime.timezone.utc), 'commenter': 'JoshDreamland', 'type': 'User'}, {'comment_id': 681428522, 'comment_body': ""Okay, this is weird. I thought you wrapped this in a function. Where's it being declared, in this context?"", 'comment_created': datetime.datetime(2021, 8, 3, 4, 40, 49, tzinfo=datetime.timezone.utc), 'commenter': 'JoshDreamland', 'type': 'User'}, {'comment_id': 681429203, 'comment_body': ""Google style leaves these uninvented, but comments the closing brace for the namespace. I'm fine with indenting it, but prefer two spaces (like elsewhere in the project)."", 'comment_created': datetime.datetime(2021, 8, 3, 4, 42, 47, tzinfo=datetime.timezone.utc), 'commenter': 'JoshDreamland', 'type': 'User'}, {'comment_id': 681993816, 'comment_body': 'This one is only here for debugging. Although I am not even using it now, so I don\'t think we need this method, since there isn\'t much sense in ""printing"" a polygon. I can overload the output stream operator If you want, but you would have to guide me on what to print.', 'comment_created': datetime.datetime(2021, 8, 3, 18, 15, 23, tzinfo=datetime.timezone.utc), 'commenter': 'nabeelDanish', 'type': 'User'}, {'comment_id': 682847369, 'comment_body': 'This is removed, since there is no use for this', 'comment_created': datetime.datetime(2021, 8, 4, 18, 9, 27, tzinfo=datetime.timezone.utc), 'commenter': 'nabeelDanish', 'type': 'User'}, {'comment_id': 683005781, 'comment_body': ""I am sorry I couldn't understand this earlier and I thought It was resolved when I implemented this method. I agree this approach is very inefficient, and a cleaner approach would be to make a separate function for querying. I'll refactor this in an upcoming commit.\r\n"", 'comment_created': datetime.datetime(2021, 8, 4, 22, 39, 33, tzinfo=datetime.timezone.utc), 'commenter': 'nabeelDanish', 'type': 'User'}, {'comment_id': 683007395, 'comment_body': ""I am sorry this was a fun comment that I added it was supposed to be removed. I can't tell who wrote this function but it seems to be written redundantly across different collision systems. So I removed all of those and made a single implementation here. "", 'comment_created': datetime.datetime(2021, 8, 4, 22, 43, 28, tzinfo=datetime.timezone.utc), 'commenter': 'nabeelDanish', 'type': 'User'}, {'comment_id': 683008061, 'comment_body': 'Yes, and that is why I tried removing them and putting them in a single header file. I tried to make this into a separate PR but that is currently failing CI. ', 'comment_created': datetime.datetime(2021, 8, 4, 22, 45, 10, tzinfo=datetime.timezone.utc), 'commenter': 'nabeelDanish', 'type': 'User'}, {'comment_id': 683008499, 'comment_body': ""No, I don't think so. This is a file that I do not fully understand what is doing, but I included it because it is found in other collision systems and I thought that I will implement it as well. "", 'comment_created': datetime.datetime(2021, 8, 4, 22, 46, 33, tzinfo=datetime.timezone.utc), 'commenter': 'nabeelDanish', 'type': 'User'}, {'comment_id': 683009219, 'comment_body': ""OK I don't remember this but fixed this in the new commits"", 'comment_created': datetime.datetime(2021, 8, 4, 22, 48, 20, tzinfo=datetime.timezone.utc), 'commenter': 'nabeelDanish', 'type': 'User'}, {'comment_id': 683009794, 'comment_body': 'It does, and this should be refactored into a single file that I tried to make in the collisions general folder. ', 'comment_created': datetime.datetime(2021, 8, 4, 22, 49, 42, tzinfo=datetime.timezone.utc), 'commenter': 'nabeelDanish', 'type': 'User'}, {'comment_id': 683011126, 'comment_body': 'If you are referring to `objectdata` then this is refactored into an `AssetArray` now and it is being declared on `line 40` of this file. ', 'comment_created': datetime.datetime(2021, 8, 4, 22, 52, 50, tzinfo=datetime.timezone.utc), 'commenter': 'nabeelDanish', 'type': 'User'}, {'comment_id': 691923621, 'comment_body': 'I think the conversation is resolved!', 'comment_created': datetime.datetime(2021, 8, 19, 9, 0, 12, tzinfo=datetime.timezone.utc), 'commenter': 'nabeelDanish', 'type': 'User'}, {'comment_id': 692020143, 'comment_body': 'Converting these functions to more generalizable will improve code consistency and will decrease the redundancy that we are seeing here. This links back to the collision generalization issue that I mentioned earlier. I would love to have some template usage here', 'comment_created': datetime.datetime(2021, 8, 19, 11, 21, 25, tzinfo=datetime.timezone.utc), 'commenter': 'nabeelDanish', 'type': 'User'}, {'comment_id': 692020469, 'comment_body': 'Understood, This will be changed in an upcoming commit', 'comment_created': datetime.datetime(2021, 8, 19, 11, 21, 55, tzinfo=datetime.timezone.utc), 'commenter': 'nabeelDanish', 'type': 'User'}, {'comment_id': 692021479, 'comment_body': 'This has been resolved in commit #22e732b. I am marking this as resolved', 'comment_created': datetime.datetime(2021, 8, 19, 11, 23, 33, tzinfo=datetime.timezone.utc), 'commenter': 'nabeelDanish', 'type': 'User'}, {'comment_id': 692512242, 'comment_body': 'It was a mistake on the earlier commits, and so this has been removed in the later commits.', 'comment_created': datetime.datetime(2021, 8, 19, 21, 54, 4, tzinfo=datetime.timezone.utc), 'commenter': 'nabeelDanish', 'type': 'User'}, {'comment_id': 692512752, 'comment_body': 'I believe this was fixed in the later commits. ', 'comment_created': datetime.datetime(2021, 8, 19, 21, 55, tzinfo=datetime.timezone.utc), 'commenter': 'nabeelDanish', 'type': 'User'}, {'comment_id': 692513501, 'comment_body': 'The Vector2D class was refactored. I am trying to follow the Google Style and so would love to get feedback on it. VS Code auto-styling feature seems to not work for me at the moment, ', 'comment_created': datetime.datetime(2021, 8, 19, 21, 56, 26, tzinfo=datetime.timezone.utc), 'commenter': 'nabeelDanish', 'type': 'User'}, {'comment_id': 692523072, 'comment_body': 'Thanks for the style nit, This will be fixed in an upcoming commit. ', 'comment_created': datetime.datetime(2021, 8, 19, 22, 17, 16, tzinfo=datetime.timezone.utc), 'commenter': 'nabeelDanish', 'type': 'User'}, {'comment_id': 692524059, 'comment_body': 'I can change this to auto for the code consistency, however, there are places where we need double-precision, especially when working with transformations and concavity. I am not sure if the change will propagate in the codebase, but this can be refactored. ', 'comment_created': datetime.datetime(2021, 8, 19, 22, 19, 31, tzinfo=datetime.timezone.utc), 'commenter': 'nabeelDanish', 'type': 'User'}, {'comment_id': 692525075, 'comment_body': 'This one is a bit tricky to get correct style-wise. I wanted to make sure the list of arguments was readable so I added a new line to separate some of them. About the consistency of * and &, I usually put the * on the right of the type and & on the left of the parameter. I think this is the inconsistency that you mentioned.', 'comment_created': datetime.datetime(2021, 8, 19, 22, 21, 58, tzinfo=datetime.timezone.utc), 'commenter': 'nabeelDanish', 'type': 'User'}, {'comment_id': 692882250, 'comment_body': 'Also because we do have `cs_scalar` if people want to change it. Those fields may need to be changed later.\r\n\r\nAlthough Nabeel makes a great point about affine transformations, perhaps we could make another scalar for transforms.', 'comment_created': datetime.datetime(2021, 8, 20, 11, 46, 7, tzinfo=datetime.timezone.utc), 'commenter': 'RobertBColton', 'type': 'User'}]","[{'commit_sha': 'cab225571994c2d99b0fa4e8d1b9b99b458ebd92', 'committer_username': 'nabeelDanish', 'committer_name': 'Nabeel Danish', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 21, 4, 9, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2abfa02e9e45266baaadbdc5d357db244d68b1a8', 'committer_username': 'nabeelDanish', 'committer_name': 'Nabeel Danish', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 21, 4, 9, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1b149f5e771a2d9fe82de89ff89cc7ded072649', 'committer_username': 'nabeelDanish', 'committer_name': 'Nabeel Danish', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 21, 4, 9, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5004ca32bcf3ff82842bf78b392c7e691c35df6a', 'committer_username': 'nabeelDanish', 'committer_name': 'Nabeel Danish', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 21, 4, 9, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa243bf1947625c684c7ca34874f987bc5dde161', 'committer_username': 'nabeelDanish', 'committer_name': 'Nabeel Danish', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 21, 4, 9, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c663525615f5055c9b490c3ac692fe2bdb79282a', 'committer_username': 'nabeelDanish', 'committer_name': 'Nabeel Danish', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 21, 4, 9, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee26b578d51ac627ed07d0122504f4a4d58545ec', 'committer_username': 'nabeelDanish', 'committer_name': 'Nabeel Danish', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 21, 4, 9, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe4fb14687c7da8cf28f1bd6933f739e2b12b765', 'committer_username': 'nabeelDanish', 'committer_name': 'Nabeel Danish', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 21, 4, 9, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf02612c1ef50b4dc11f974a15e755a87fc42c2e', 'committer_username': 'nabeelDanish', 'committer_name': 'Nabeel Danish', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 21, 4, 9, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd6a3773cfb696cce984f57b254a25c7bbc5deb78', 'committer_username': 'nabeelDanish', 'committer_name': 'Nabeel Danish', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 21, 4, 9, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '565a31fb2a65239770fd627a0615640186b3334d', 'committer_username': 'nabeelDanish', 'committer_name': 'Nabeel Danish', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 21, 4, 9, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3fcd0b6702281cef0dc356c455b33b541286380b', 'committer_username': 'nabeelDanish', 'committer_name': 'Nabeel Danish', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 21, 4, 9, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08491613578d01c9000386e444a6f852a2a2b956', 'committer_username': 'nabeelDanish', 'committer_name': 'Nabeel Danish', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 21, 4, 9, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '27df2e927200b413ea6d4db1d5825af559db06e9', 'committer_username': 'nabeelDanish', 'committer_name': 'Nabeel Danish', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 21, 4, 9, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b5a80a19610c5a72fae2692d5b07a8fa723798f', 'committer_username': 'nabeelDanish', 'committer_name': 'Nabeel Danish', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 21, 4, 9, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6398f96ba776489a75f11af5fe9265be97657d73', 'committer_username': 'nabeelDanish', 'committer_name': 'Nabeel Danish', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 21, 4, 9, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2fb206dec43c644225c87a550b8566be506ec268', 'committer_username': 'nabeelDanish', 'committer_name': 'Nabeel Danish', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 21, 4, 9, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c1ab3c36d6fdae73bafa082ab7fac03c632afac', 'committer_username': 'nabeelDanish', 'committer_name': 'Nabeel Danish', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 21, 4, 9, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '989978f7b57b1c6893f80f17cc1a763a56425cbc', 'committer_username': 'nabeelDanish', 'committer_name': 'Nabeel Danish', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 21, 4, 9, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3aadf38442bbeadc244d37828b61d36b0b96afd4', 'committer_username': 'nabeelDanish', 'committer_name': 'Nabeel Danish', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 21, 4, 9, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22e732b94ba963f4f4848d8c0df145ed2528ddc0', 'committer_username': 'nabeelDanish', 'committer_name': 'Nabeel Danish', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 21, 4, 9, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '652afe8df9feb3ba97ef535ddc8b62ad6b617e92', 'committer_username': 'nabeelDanish', 'committer_name': 'Nabeel Danish', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 21, 4, 9, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf81e91b430d23ea8d8fa240d3ebe6628708b883', 'committer_username': 'nabeelDanish', 'committer_name': 'Nabeel Danish', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 21, 4, 9, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '501ad9c253b1a393c00091572541ae8fd7c0bdb1', 'committer_username': 'nabeelDanish', 'committer_name': 'Nabeel Danish', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 21, 4, 9, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e937f4b4db1c3ae3346a54abc9aa0754f2280c7', 'committer_username': 'nabeelDanish', 'committer_name': 'Nabeel Danish', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 21, 4, 9, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'befa223bb044f70f5eaa764786a3932bebad6f2a', 'committer_username': 'nabeelDanish', 'committer_name': 'Nabeel Danish', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 21, 4, 9, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5be1a8063f0d350372134e27300f1eec2b885f1a', 'committer_username': 'nabeelDanish', 'committer_name': 'Nabeel Danish', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 21, 4, 9, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '430310150683e8d5371c718e8c6d5d5e5de01026', 'committer_username': 'nabeelDanish', 'committer_name': 'Nabeel Danish', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 21, 4, 9, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3cab86c0468f4cfc018ade6528d11cee8972d168', 'committer_username': 'nabeelDanish', 'committer_name': 'Nabeel Danish', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 21, 4, 9, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '268bb954a2d09001f76c55e9d6d0b36b53802866', 'committer_username': 'nabeelDanish', 'committer_name': 'Nabeel Danish', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 21, 4, 9, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9865c122521d490654145ce96ecb4602f9611810', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '11a6e4e3a49ca9c6c371e484f76bf991fdd401ee', 'committer_username': 'nabeelDanish', 'committer_name': 'Nabeel Danish', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 21, 4, 9, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa11a3292feeabdf9c6d119bb2754d5a665978ea', 'committer_username': 'nabeelDanish', 'committer_name': 'Nabeel Danish', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 21, 4, 9, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd415830e21d4053ab9bb9fa3f71fff60ec02396f', 'committer_username': 'fundies', 'committer_name': 'Greg Williamson', 'committer_email': None, 'commit_date': datetime.datetime(2012, 1, 7, 22, 27, 1, tzinfo=datetime.timezone.utc)}]",Nabeel Danish,54344466,,User,,25,,29,31

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
3319723,enigma-dev,enigma-dev/enigma-dev,C++,120,334,31,69,4788,149,50,37,"[{'id': 697163367, 'number': 2247, 'closed': datetime.datetime(2022, 6, 10, 18, 27, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 26, 16, 8, 34, tzinfo=datetime.timezone.utc), 'time_taken': 27569911.0, 'time_delta': '319 days, 2:18:31', 'additions': 172, 'deletions': 351, 'state': 'closed'}, {'id': 662989184, 'number': 2229, 'closed': datetime.datetime(2021, 8, 26, 15, 53, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 6, 16, 3, 1, tzinfo=datetime.timezone.utc), 'time_taken': 6997841.0, 'time_delta': '80 days, 23:50:41', 'additions': 5874, 'deletions': 37, 'state': 'closed'}]"
