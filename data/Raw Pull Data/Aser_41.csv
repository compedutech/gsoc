pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1458918950,GSoC Add ONNX Support for GatherElements,"Merge with: https://github.com/opencv/opencv_extra/pull/1082

### Pull Request Readiness Checklist

See details at https://github.com/opencv/opencv/wiki/How_to_contribute#making-a-good-pull-request

- [x] I agree to contribute to the project under Apache 2 License.
- [x] To the best of my knowledge, the proposed patch is not based on a code under GPL or another license that is incompatible with OpenCV
- [x] The PR is proposed to the proper branch
- [x] There is a reference to the original bug report and related work
- [x] There is accuracy test, performance test and test data in opencv_extra repository, if applicable
      Patch to opencv_extra has the same branch name.
- [x] The feature is well documented and sample code can be built with the project CMake

Adds support to the ONNX operator GatherElements [operator docs](https://github.com/onnx/onnx/blob/main/docs/Operators.md#GatherElements)
Added tests to opencv_extra at pull request https://github.com/opencv/opencv_extra/pull/1082",True,24092,https://api.github.com/repos/opencv/opencv/pulls/24092,https://github.com/opencv/opencv/pull/24092,closed,303,3,8,19,9,50,3,1,"[{'name': 'GSoC'}, {'name': 'category: dnn'}, {'name': 'category: dnn (onnx)'}]",2023-08-02 00:12:38+00:00,2023-10-18 07:41:48+00:00,6679750.0,"77 days, 7:29:10","[{'comment_id': 1281433663, 'comment_body': 'Thanks for contribution! Please add a brief description about the difference between `Gather` and `GatherElements`', 'comment_created': datetime.datetime(2023, 8, 2, 6, 2, 50, tzinfo=datetime.timezone.utc), 'commenter': 'dkurt', 'type': 'User'}, {'comment_id': 1281435239, 'comment_body': 'Please do not forget to open a pull request to https://github.com/opencv/opencv_extra/ with the same branch name: `GSoC_Support_GatherElements_ONNX`', 'comment_created': datetime.datetime(2023, 8, 2, 6, 5, 13, tzinfo=datetime.timezone.utc), 'commenter': 'dkurt', 'type': 'User'}, {'comment_id': 1281436070, 'comment_body': 'unused variable', 'comment_created': datetime.datetime(2023, 8, 2, 6, 6, 35, tzinfo=datetime.timezone.utc), 'commenter': 'dkurt', 'type': 'User'}, {'comment_id': 1281436590, 'comment_body': 'missed return?', 'comment_created': datetime.datetime(2023, 8, 2, 6, 7, 24, tzinfo=datetime.timezone.utc), 'commenter': 'dkurt', 'type': 'User'}, {'comment_id': 1281511633, 'comment_body': '`Functor` is not needed.', 'comment_created': datetime.datetime(2023, 8, 2, 7, 33, 20, tzinfo=datetime.timezone.utc), 'commenter': 'fengyuentau', 'type': 'User'}, {'comment_id': 1281512611, 'comment_body': 'There is no reduction operations in `GatherElements`. So we most likely do not need this dispatcher.', 'comment_created': datetime.datetime(2023, 8, 2, 7, 34, 18, tzinfo=datetime.timezone.utc), 'commenter': 'fengyuentau', 'type': 'User'}, {'comment_id': 1287886247, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2023, 8, 9, 3, 19, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Aser-Abdelfatah', 'type': 'User'}, {'comment_id': 1287886593, 'comment_body': 'Removed it in the new commit!', 'comment_created': datetime.datetime(2023, 8, 9, 3, 20, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Aser-Abdelfatah', 'type': 'User'}, {'comment_id': 1287886894, 'comment_body': 'removed it in the second commit', 'comment_created': datetime.datetime(2023, 8, 9, 3, 21, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Aser-Abdelfatah', 'type': 'User'}, {'comment_id': 1287886941, 'comment_body': 'removed it in the second commit', 'comment_created': datetime.datetime(2023, 8, 9, 3, 21, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Aser-Abdelfatah', 'type': 'User'}, {'comment_id': 1289372704, 'comment_body': 'done: https://github.com/opencv/opencv_extra/pull/1082', 'comment_created': datetime.datetime(2023, 8, 9, 23, 59, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Aser-Abdelfatah', 'type': 'User'}, {'comment_id': 1289374849, 'comment_body': 'I reverted to the first commit since it was working correctly and passed the tests. Essentially, I edited the dispatcher from the original implementation of scatter, and this dispatcher essentially just calls forward_impl<T>(). I decided to keep the dispatchers just to account for the data type of the output and since they were in harmony with the rest of the implementation in terms of the use of the template.', 'comment_created': datetime.datetime(2023, 8, 10, 0, 4, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Aser-Abdelfatah', 'type': 'User'}, {'comment_id': 1289374994, 'comment_body': 'Nope!', 'comment_created': datetime.datetime(2023, 8, 10, 0, 4, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Aser-Abdelfatah', 'type': 'User'}, {'comment_id': 1289375982, 'comment_body': 'The functor used is  just \r\n`        auto rd = [](const T& a, const T& b) { return b; };\r\n`\r\nThis is different from the original implementation of Scatter, where there are different functors. Once again, I decided to keep it to avoid missing with data types and templates.', 'comment_created': datetime.datetime(2023, 8, 10, 0, 6, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Aser-Abdelfatah', 'type': 'User'}, {'comment_id': 1305224180, 'comment_body': 'Add a check here to check whether `indices` are provided as constant since the implementation relies on that:\r\n\r\n```cpp\r\nCV_CheckTrue(constBlobs.find(node_proto.input(1)) != constBlobs.end(), ""DNN/ONNX-GatherElements: indices must be constant"";\r\n```', 'comment_created': datetime.datetime(2023, 8, 25, 6, 24, 12, tzinfo=datetime.timezone.utc), 'commenter': 'fengyuentau', 'type': 'User'}, {'comment_id': 1305232375, 'comment_body': 'Extra calls consume extra time. We should try to save time, especially when it\'s inference. You can try something like this:\r\n\r\n```cpp\r\ntemplate<typename T>\r\nvoid forward_impl(const Mat& data, const Mat& indices,  Mat& out) {\r\n// ...\r\nfor (size_t i = 0; i < total; i++) {\r\n    *tmp_p_out = *tmp_p_data;\r\n}\r\n}\r\n\r\ntemplate<typename... Args>\r\ninline void typeDispatch(const int type, Args&&... args)\r\n{\r\n    switch (type)\r\n    {\r\n        case CV_8U:\r\n            forward_impl<uint8_t>(std::forward<Args>(args)...);\r\n            break;\r\n        case CV_32S:\r\n            forward_impl<int32_t>(std::forward<Args>(args)...);\r\n            break;\r\n        case CV_32F:\r\n            forward_impl<float>(std::forward<Args>(args)...);\r\n            break;\r\n        default:\r\n            CV_Error(cv::Error::BadDepth, ""DNN/GatherElements: Unsupported type."");\r\n    };\r\n}\r\n```', 'comment_created': datetime.datetime(2023, 8, 25, 6, 32, 30, tzinfo=datetime.timezone.utc), 'commenter': 'fengyuentau', 'type': 'User'}, {'comment_id': 1305243234, 'comment_body': 'Could you also add a accuracy test here to test the raft model? Before this, you need to put your changes from https://github.com/opencv/opencv_extra/pull/1085 to https://github.com/opencv/opencv_extra/pull/1082 so that our CI system can detect the changes and then run the tests.', 'comment_created': datetime.datetime(2023, 8, 25, 6, 41, 7, tzinfo=datetime.timezone.utc), 'commenter': 'fengyuentau', 'type': 'User'}, {'comment_id': 1305891542, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 8, 25, 16, 33, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Aser-Abdelfatah', 'type': 'User'}, {'comment_id': 1305892166, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 8, 25, 16, 34, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Aser-Abdelfatah', 'type': 'User'}, {'comment_id': 1305909495, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 8, 25, 16, 49, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Aser-Abdelfatah', 'type': 'User'}, {'comment_id': 1305909738, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 8, 25, 16, 49, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Aser-Abdelfatah', 'type': 'User'}, {'comment_id': 1308282062, 'comment_body': 'Change `required` to false before the test run. This is needed for large models tests to optionally skip it if there is no file on the CI:\r\n```cpp\r\nrequired = false;\r\ntestONNXModels(""RAFT"", npy, 0, 0, false, true, 2);\r\n```', 'comment_created': datetime.datetime(2023, 8, 29, 6, 41, 17, tzinfo=datetime.timezone.utc), 'commenter': 'dkurt', 'type': 'User'}, {'comment_id': 1309336165, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 8, 29, 20, 44, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Aser-Abdelfatah', 'type': 'User'}, {'comment_id': 1338085535, 'comment_body': 'sounds like a bug here', 'comment_created': datetime.datetime(2023, 9, 27, 6, 8, 18, tzinfo=datetime.timezone.utc), 'commenter': 'vpisarev', 'type': 'User'}, {'comment_id': 1341258461, 'comment_body': 'Forward model only once and request both outputs', 'comment_created': datetime.datetime(2023, 9, 29, 11, 37, 50, tzinfo=datetime.timezone.utc), 'commenter': 'dkurt', 'type': 'User'}, {'comment_id': 1341261767, 'comment_body': '@fengyuentau, can we reduce input resolution as minimul as possible to cover required checks for a new layer? `240x180` or lower.', 'comment_created': datetime.datetime(2023, 9, 29, 11, 40, 36, tzinfo=datetime.timezone.utc), 'commenter': 'dkurt', 'type': 'User'}, {'comment_id': 1341959814, 'comment_body': 'It may be feasible, but the model may be sensitive to the input shape. The intention was we use the model in opencv_zoo for accuracy or performance testing. If the model is shape-sensitive in the end, we have to replace the model in the zoo with one with a smaller input shape. That could be some trouble.', 'comment_created': datetime.datetime(2023, 9, 30, 13, 2, 25, tzinfo=datetime.timezone.utc), 'commenter': 'fengyuentau', 'type': 'User'}, {'comment_id': 1342151596, 'comment_body': 'Can you please reduce precision to FP16? Some changes in `blobFromNPY` will be required.', 'comment_created': datetime.datetime(2023, 10, 1, 15, 31, 51, tzinfo=datetime.timezone.utc), 'commenter': 'dkurt', 'type': 'User'}, {'comment_id': 1349454182, 'comment_body': 'I will handle this problem after we can run this model. Currently we are facing some other issues running this model.', 'comment_created': datetime.datetime(2023, 10, 7, 3, 43, 18, tzinfo=datetime.timezone.utc), 'commenter': 'fengyuentau', 'type': 'User'}, {'comment_id': 1349485472, 'comment_body': 'We need to refactor this implementation because it is just tooooooo slow, leading to a very long inference with the RAFT model (it has **160!!!** GatherElements operators). Perf with `GatherElements(data:FLOAT[2700, 1, 2914], indices:INT64[2700, 1, 81])`:\r\n[ort_benchmark.zip](https://github.com/opencv/opencv/files/12837145/ort_benchmark.zip)\r\n\r\n| this impl | ort |\r\n| - | - |\r\n| 15415.07 ms | 0.15ms |', 'comment_created': datetime.datetime(2023, 10, 7, 8, 18, 3, tzinfo=datetime.timezone.utc), 'commenter': 'fengyuentau', 'type': 'User'}, {'comment_id': 1349487384, 'comment_body': 'How about we just check the smaller output? This model has two outputs, one of which has shape [1, 2, 45, 60] and file size 21KB, the other of which has shape [1, 2, 360, 480] and file size 1.32MB. The bigger output is calculated from the smaller output. I think it also makes sense if we just check the smaller one. In this case, we can avoid replacing models.', 'comment_created': datetime.datetime(2023, 10, 7, 8, 33, 3, tzinfo=datetime.timezone.utc), 'commenter': 'fengyuentau', 'type': 'User'}, {'comment_id': 1349654662, 'comment_body': 'Improvement:\r\n\r\nPrevious impl by Aser: 15415.07 ms\r\nAfter removing meaningless for loop: 1ms\r\nSpeedup: 0.49ms\r\nort: 0.15 ms', 'comment_created': datetime.datetime(2023, 10, 8, 8, 50, 32, tzinfo=datetime.timezone.utc), 'commenter': 'fengyuentau', 'type': 'User'}, {'comment_id': 1349655149, 'comment_body': 'I found that even though problems of `GatherElements` have been fixed, the inference results of RAFT between ours and onnxruntime are different. Need an investigation into this problem.', 'comment_created': datetime.datetime(2023, 10, 8, 8, 54, 13, tzinfo=datetime.timezone.utc), 'commenter': 'fengyuentau', 'type': 'User'}, {'comment_id': 1349841644, 'comment_body': '> I found that even though problems of `GatherElements` have been fixed, the inference results of RAFT between ours and onnxruntime are different. Need an investigation into this problem.\r\n\r\nI found we have different results on the InstanceNorm layer from ONNX Runtime. Let me fix it.', 'comment_created': datetime.datetime(2023, 10, 9, 3, 43, 47, tzinfo=datetime.timezone.utc), 'commenter': 'fengyuentau', 'type': 'User'}, {'comment_id': 1350050177, 'comment_body': ""@fengyuentau, thanks for the investigation. If the biggest output is computed from the smallest one, it's a good ides to check the smallest only as it will cover most critical layers."", 'comment_created': datetime.datetime(2023, 10, 9, 9, 18, 9, tzinfo=datetime.timezone.utc), 'commenter': 'dkurt', 'type': 'User'}, {'comment_id': 1351280809, 'comment_body': 'Below is the internal output difference of a node in the model. The final outputs are still very different:\r\n\r\n```\r\n./opencv/modules/dnn/test/test_common.impl.hpp:76: Failure\r\nExpected: (normL1) <= (l1), actual: 0.0965853 vs 1e-05\r\n  |ref| = 0.47372817993164062\r\n./opencv/modules/dnn/test/test_common.impl.hpp:79: Failure\r\nExpected: (normInf) <= (lInf), actual: 0.474318 vs 0.0001\r\n  |ref| = 0.47372817993164062\r\n./opencv/modules/dnn/test/test_common.impl.hpp:76: Failure\r\nExpected: (normL1) <= (l1), actual: 0.581241 vs 1e-05\r\n  |ref| = 3.5230345726013184\r\n./opencv/modules/dnn/test/test_common.impl.hpp:79: Failure\r\nExpected: (normInf) <= (lInf), actual: 4.38871 vs 0.0001\r\n  |ref| = 3.5230345726013184\r\n```\r\n\r\n---\r\n\r\nWith https://github.com/opencv/opencv/pull/24378, the difference is reduced to\r\n\r\n```\r\n[ RUN      ] Test_ONNX_layers.RAFT/0, where GetParam() = OCV/CPU\r\n/Users/fengyuantao/Workspace/fytao/projects/gsoc_optical_flow/opencv/modules/dnn/test/test_common.impl.hpp:76: Failure\r\nExpected: (normL1) <= (l1), actual: 0.00010332 vs 1e-05\r\n  |ref| = 410.04229736328125\r\n/Users/fengyuantao/Workspace/fytao/projects/gsoc_optical_flow/opencv/modules/dnn/test/test_common.impl.hpp:79: Failure\r\nExpected: (normInf) <= (lInf), actual: 0.00147033 vs 0.0001\r\n  |ref| = 410.04229736328125\r\n[  FAILED  ] Test_ONNX_layers.RAFT/0, where GetParam() = OCV/CPU (1738 ms)\r\n[----------] 1 test from Test_ONNX_layers (1738 ms total)\r\n```\r\n\r\nStill need a further investigation.', 'comment_created': datetime.datetime(2023, 10, 10, 2, 57, 7, tzinfo=datetime.timezone.utc), 'commenter': 'fengyuentau', 'type': 'User'}, {'comment_id': 1351615268, 'comment_body': 'Seems good, as for me. l1=2e-4 and lInf=2e-3', 'comment_created': datetime.datetime(2023, 10, 10, 6, 38, 4, tzinfo=datetime.timezone.utc), 'commenter': 'dkurt', 'type': 'User'}, {'comment_id': 1353964405, 'comment_body': 'Found another bug on the element-wise layer, see https://github.com/opencv/opencv/issues/24385.', 'comment_created': datetime.datetime(2023, 10, 11, 3, 15, 3, tzinfo=datetime.timezone.utc), 'commenter': 'fengyuentau', 'type': 'User'}, {'comment_id': 1353979755, 'comment_body': 'Finally dnn can achieve the same accuracy with https://github.com/opencv/opencv/pull/24386 (greater fix), with or without #24378 (instancenorm).', 'comment_created': datetime.datetime(2023, 10, 11, 3, 53, 42, tzinfo=datetime.timezone.utc), 'commenter': 'fengyuentau', 'type': 'User'}, {'comment_id': 1358040240, 'comment_body': 'This RAFT model takes nearly 2s for a single inference on my mac m1. I think we still need to replace with a smaller input scale version.', 'comment_created': datetime.datetime(2023, 10, 13, 9, 45, 18, tzinfo=datetime.timezone.utc), 'commenter': 'fengyuentau', 'type': 'User'}, {'comment_id': 1358094736, 'comment_body': 'https://github.com/opencv/opencv/actions/runs/6506670391/job/17672657622?pr=24092\r\n```\r\n[ RUN      ] Test_ONNX_nets.RAFT/0, where GetParam() = OCV/CPU\r\n/Users/opencv-cn/GHA-OCV-1/_work/opencv/opencv/opencv/modules/dnn/test/test_common.impl.hpp:79: Failure\r\nExpected: (normInf) <= (lInf), actual: 0.000179291 vs 0.00014\r\n  |ref| = 0.47372817993164062\r\n[  FAILED  ] Test_ONNX_nets.RAFT/0, where GetParam() = OCV/CPU (1957 ms)\r\n[ RUN      ] Test_ONNX_nets.RAFT/1, where GetParam() = OCV/CPU_FP16\r\n/Users/opencv-cn/GHA-OCV-1/_work/opencv/opencv/opencv/modules/dnn/test/test_common.impl.hpp:79: Failure\r\nExpected: (normInf) <= (lInf), actual: 0.000179291 vs 0.00014\r\n```', 'comment_created': datetime.datetime(2023, 10, 13, 10, 40, 34, tzinfo=datetime.timezone.utc), 'commenter': 'dkurt', 'type': 'User'}, {'comment_id': 1360022356, 'comment_body': 'Tested with a smaller input one but the time is almost the same. Lets keep what we have. Also I found that we have almost the same inference time compared to ONNX Runtime.', 'comment_created': datetime.datetime(2023, 10, 16, 2, 7, 25, tzinfo=datetime.timezone.utc), 'commenter': 'fengyuentau', 'type': 'User'}, {'comment_id': 1360026281, 'comment_body': 'Solved.', 'comment_created': datetime.datetime(2023, 10, 16, 2, 16, 31, tzinfo=datetime.timezone.utc), 'commenter': 'fengyuentau', 'type': 'User'}, {'comment_id': 1360026769, 'comment_body': 'Thank you for the note. Already tuned the threshold.', 'comment_created': datetime.datetime(2023, 10, 16, 2, 17, 44, tzinfo=datetime.timezone.utc), 'commenter': 'fengyuentau', 'type': 'User'}, {'comment_id': 1360431583, 'comment_body': 'I suggest to add a tag to this test `applyTestTag(CV_TEST_TAG_LONG, CV_TEST_TAG_DEBUG_VERYLONG, CV_TEST_TAG_MEMORY_2GB);` to skip as long. PR is ready and might be merged.', 'comment_created': datetime.datetime(2023, 10, 16, 10, 7, 29, tzinfo=datetime.timezone.utc), 'commenter': 'dkurt', 'type': 'User'}, {'comment_id': 1360479830, 'comment_body': '> I suggest to add a tag to this test `applyTestTag(CV_TEST_TAG_LONG, CV_TEST_TAG_DEBUG_VERYLONG, CV_TEST_TAG_MEMORY_2GB);` to skip as long. PR is ready and might be merged.\r\n\r\nThank you for the tips. I almost forgot these flags!', 'comment_created': datetime.datetime(2023, 10, 16, 10, 53, 23, tzinfo=datetime.timezone.utc), 'commenter': 'fengyuentau', 'type': 'User'}, {'comment_id': 1360480012, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2023, 10, 16, 10, 53, 34, tzinfo=datetime.timezone.utc), 'commenter': 'fengyuentau', 'type': 'User'}, {'comment_id': 1364875338, 'comment_body': 'Implementation should handle FP16 datatype too\r\n\r\n```\r\n[  FAILED  ] 3 tests, listed below:\r\n[  FAILED  ] Test_ONNX_conformance.Layer_Test/test_gather_elements_0_OCV_OCL_FP16, where GetParam() = (test_gather_elements_0, OCV/OCL_FP16)\r\n[  FAILED  ] Test_ONNX_conformance.Layer_Test/test_gather_elements_1_OCV_OCL_FP16, where GetParam() = (test_gather_elements_1, OCV/OCL_FP16)\r\n[  FAILED  ] Test_ONNX_conformance.Layer_Test/test_gather_elements_negative_indices_OCV_OCL_FP16, where GetParam() = (test_gather_elements_negative_indices, OCV/OCL_FP16)\r\n```\r\n\r\nhttps://pullrequest.opencv.org/buildbot/builders/4_x-lin64/builds/100283\r\n', 'comment_created': datetime.datetime(2023, 10, 19, 4, 54, 28, tzinfo=datetime.timezone.utc), 'commenter': 'opencv-alalek', 'type': 'User'}, {'comment_id': 1364876991, 'comment_body': 'Ok, I will do this.', 'comment_created': datetime.datetime(2023, 10, 19, 4, 56, 49, tzinfo=datetime.timezone.utc), 'commenter': 'fengyuentau', 'type': 'User'}, {'comment_id': 1364997208, 'comment_body': 'See https://github.com/opencv/opencv/pull/24427', 'comment_created': datetime.datetime(2023, 10, 19, 6, 48, 7, tzinfo=datetime.timezone.utc), 'commenter': 'fengyuentau', 'type': 'User'}]","[{'commit_sha': '86bd690809dd51fea21c91f64e2c27cb758afd50', 'committer_username': 'Aser-Abdelfatah', 'committer_name': 'Aser Atawya', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 2, 19, 39, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4fee29e4bab22f20b6293ea949b8b020003a775b', 'committer_username': 'Aser-Abdelfatah', 'committer_name': 'Aser Atawya', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 2, 19, 39, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '421b3ce78f96c4a7b3c4f7e96e820b76ec9f6611', 'committer_username': 'Aser-Abdelfatah', 'committer_name': 'Aser Atawya', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 2, 19, 39, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab3b5a3d44a762ccf482bc1ace94718b9c827617', 'committer_username': 'Aser-Abdelfatah', 'committer_name': 'Aser Atawya', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 2, 19, 39, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b99e1ab19f08b22ab35f16c49a4018c666ab0676', 'committer_username': 'Aser-Abdelfatah', 'committer_name': 'Aser Atawya', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 2, 19, 39, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ff95a2914fedc512cfdf22dc04ed557377f129e', 'committer_username': 'Aser-Abdelfatah', 'committer_name': 'Aser Atawya', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 2, 19, 39, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '873bfd45db3d823d0f28c91f475ad1ed215e7e3a', 'committer_username': 'Aser-Abdelfatah', 'committer_name': 'Aser Atawya', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 2, 19, 39, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '611b32f9dc0de9f21909067d7ee9703f52602d12', 'committer_username': 'fengyuentau', 'committer_name': 'Yuantao Feng', 'committer_email': 'yuantao.feng@opencv.org.cn', 'commit_date': datetime.datetime(2016, 2, 13, 15, 34, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '501ebafcd03f305103961f9aba21ff1c7cb84eae', 'committer_username': 'fengyuentau', 'committer_name': 'Yuantao Feng', 'committer_email': 'yuantao.feng@opencv.org.cn', 'commit_date': datetime.datetime(2016, 2, 13, 15, 34, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72ab5764f4d20b5f454620a8c98c038e0616f4b0', 'committer_username': 'fengyuentau', 'committer_name': 'Yuantao Feng', 'committer_email': 'yuantao.feng@opencv.org.cn', 'commit_date': datetime.datetime(2016, 2, 13, 15, 34, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3bf49440a98362c8810c18ffb491a0e56914b357', 'committer_username': 'fengyuentau', 'committer_name': 'Yuantao Feng', 'committer_email': 'yuantao.feng@opencv.org.cn', 'commit_date': datetime.datetime(2016, 2, 13, 15, 34, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd949dbdcebad2fb0d5fe70d782a9ac3913c4a8ca', 'committer_username': 'fengyuentau', 'committer_name': 'Yuantao Feng', 'committer_email': 'yuantao.feng@opencv.org.cn', 'commit_date': datetime.datetime(2016, 2, 13, 15, 34, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e2fec12f99bfd5e8a504d4ae6d6efdc37ea48394', 'committer_username': 'fengyuentau', 'committer_name': 'Yuantao Feng', 'committer_email': 'yuantao.feng@opencv.org.cn', 'commit_date': datetime.datetime(2016, 2, 13, 15, 34, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d3be8e4b9ea7236d39e213708263e6dedd6aa84', 'committer_username': 'fengyuentau', 'committer_name': 'Yuantao Feng', 'committer_email': 'yuantao.feng@opencv.org.cn', 'commit_date': datetime.datetime(2016, 2, 13, 15, 34, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2dd7b21137ff7bc44015643cc1a491b2aa07cfcb', 'committer_username': 'fengyuentau', 'committer_name': 'Yuantao Feng', 'committer_email': 'yuantao.feng@opencv.org.cn', 'commit_date': datetime.datetime(2016, 2, 13, 15, 34, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c3a8a15e72066625f94e6434a10b28f9471d523', 'committer_username': 'fengyuentau', 'committer_name': 'Yuantao Feng', 'committer_email': 'yuantao.feng@opencv.org.cn', 'commit_date': datetime.datetime(2016, 2, 13, 15, 34, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac3ea424f887187ad2b6b50cd6cc558e96b1c87a', 'committer_username': 'fengyuentau', 'committer_name': 'Yuantao Feng', 'committer_email': 'yuantao.feng@opencv.org.cn', 'commit_date': datetime.datetime(2016, 2, 13, 15, 34, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e8e1637ed12f41aac183ead6c4f77e662a03171c', 'committer_username': 'fengyuentau', 'committer_name': 'Yuantao Feng', 'committer_email': 'yuantao.feng@opencv.org.cn', 'commit_date': datetime.datetime(2016, 2, 13, 15, 34, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83031aae7e61b247747d7e22f2f194415781bd99', 'committer_username': 'fengyuentau', 'committer_name': 'Yuantao Feng', 'committer_email': 'yuantao.feng@opencv.org.cn', 'commit_date': datetime.datetime(2016, 2, 13, 15, 34, 5, tzinfo=datetime.timezone.utc)}]",Aser Atawya,47282229,,User,,34,,12,18
1469464627,GSoC Add ONNX Support for GatherElements,"Merge with https://github.com/opencv/opencv/pull/24092

This pull request serves as an addition to the pull request ""GSoC Add ONNX Support for GatherElements #24092"", which is submitted to the original OpenCV repository. It contains three tests to the GatherElements operator. 
The three tests are sourced from:
* https://github.com/onnx/onnx/tree/main/onnx/backend/test/data/node/test_gather_elements_0
* https://github.com/onnx/onnx/tree/main/onnx/backend/test/data/node/test_gather_elements_1
* https://github.com/onnx/onnx/tree/main/onnx/backend/test/data/node/test_gather_elements_negative_indices
And the models were configured using the code provided by Yuantao Feng at https://github.com/fengyuentau/onnx_utils to confirm output shape in pre-run.

---

Reference outputs for `optical_flow_estimation_raft_2023aug.onnx` is generated with the following script:

```python
import cv2 as cv
import numpy as np

img1 = cv.imread(""./opencv_extra/testdata/gpu/opticalflow/frame0.png"")
img2 = cv.imread(""./opencv_extra/testdata/gpu/opticalflow/frame1.png"")

img1_blob = cv.cvtColor(img1, cv.COLOR_BGR2RGB)
img1_blob = cv.resize(img1_blob, (480, 360))
# source: (1, 3, 388, 584)
# target: 1, 3, 360, 480
img1_blob = cv.dnn.blobFromImage(img1_blob)
# source:  (1, 3, 388, 584)
# target: 1, 3, 360, 480
img2_blob = cv.cvtColor(img2, cv.COLOR_BGR2RGB)
img2_blob = cv.resize(img2_blob, (480, 360))
img2_blob = cv.dnn.blobFromImage(img2_blob)
print(img1_blob.shape, img2_blob.shape)

import onnxruntime as ort
net = ort.InferenceSession(""optical_flow_estimation_raft_2023aug.onnx"", providers=[""CPUExecutionProvider""])
output = net.run([""12007"", ""12006""], {""0"": img1_blob, ""1"": img2_blob})
np.save(""output_optical_flow_estimation_raft_2023aug_0.npy"", output[0])
np.save(""output_optical_flow_estimation_raft_2023aug_1.npy"", output[1])
print(output[0].shape)
print(output[1].shape)
```",True,1082,https://api.github.com/repos/opencv/opencv_extra/pulls/1082,https://github.com/opencv/opencv_extra/pull/1082,closed,5,0,2,2,16,11,1,0,[{'name': 'DNN'}],2023-08-09 23:57:43+00:00,2023-10-17 15:21:43+00:00,5930640.0,"68 days, 15:24:00","[{'comment_id': 1308277138, 'comment_body': 'Please share a source of that link in comment (i.e. origin repository)', 'comment_created': datetime.datetime(2023, 8, 29, 6, 35, 18, tzinfo=datetime.timezone.utc), 'commenter': 'dkurt', 'type': 'User'}, {'comment_id': 1308277781, 'comment_body': ""Use `GDrive` class for Google Drive models:\r\n```\r\ndownloader=GDrive('1yWIbF4birkpZMhNNhqzy75d4EvJW-UXE'),\r\n```"", 'comment_created': datetime.datetime(2023, 8, 29, 6, 36, 7, tzinfo=datetime.timezone.utc), 'commenter': 'dkurt', 'type': 'User'}, {'comment_id': 1308278258, 'comment_body': 'Too big file. What are the data type and dimensions?', 'comment_created': datetime.datetime(2023, 8, 29, 6, 36, 41, tzinfo=datetime.timezone.utc), 'commenter': 'dkurt', 'type': 'User'}, {'comment_id': 1309341545, 'comment_body': 'The model is sourced from here https://github.com/Aser-Abdelfatah/opencv_zoo/tree/gsoc_RAFT_Model_ONNX/models/optical_flow_estimation_raft', 'comment_created': datetime.datetime(2023, 8, 29, 20, 50, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Aser-Abdelfatah', 'type': 'User'}, {'comment_id': 1309823975, 'comment_body': 'I mean it there an officially distributed model? There is a little chance that custom file will be available for a long time.', 'comment_created': datetime.datetime(2023, 8, 30, 7, 38, 41, tzinfo=datetime.timezone.utc), 'commenter': 'dkurt', 'type': 'User'}, {'comment_id': 1309848403, 'comment_body': 'This share link is actually from the opencv.org google drive. I uploaded it to OpenCV Shared -> Deep Models if you have access to it.\r\n\r\n---\r\n\r\nSource of the model is from https://github.com/PINTO0309/PINTO_model_zoo/tree/main/252_RAFT, where it uses external cloud drive called wasabi stoarge.', 'comment_created': datetime.datetime(2023, 8, 30, 7, 57, 19, tzinfo=datetime.timezone.utc), 'commenter': 'fengyuentau', 'type': 'User'}]","[{'commit_sha': '127d9f1fe3707f058a2f74d1b8645309bdf04fa8', 'committer_username': 'Aser-Abdelfatah', 'committer_name': 'Aser Atawya', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 2, 19, 39, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9bba87de78d54b6416defd470b56707cf78aaa7b', 'committer_username': 'fengyuentau', 'committer_name': 'Yuantao Feng', 'committer_email': 'yuantao.feng@opencv.org.cn', 'commit_date': datetime.datetime(2016, 2, 13, 15, 34, 5, tzinfo=datetime.timezone.utc)}]",Aser Atawya,47282229,,User,,34,,12,18
1432148672,Google Summer of Code: Adding RAFT Optical Flow Model using ONNX Format,Adding RAFT in ONNX to the OpenCV model zoo. ,True,197,https://api.github.com/repos/opencv/opencv_zoo/pulls/197,https://github.com/opencv/opencv_zoo/pull/197,closed,490,0,8,5,0,3,1,1,[{'name': 'GSoC'}],2023-07-13 00:22:03+00:00,2023-10-17 03:23:30+00:00,8305287.0,"96 days, 3:01:27","[{'comment_id': 1305281240, 'comment_body': 'Align comments to the code', 'comment_created': datetime.datetime(2023, 8, 25, 7, 19, 1, tzinfo=datetime.timezone.utc), 'commenter': 'fengyuentau', 'type': 'User'}, {'comment_id': 1361465381, 'comment_body': 'eol before eof', 'comment_created': datetime.datetime(2023, 10, 17, 3, 21, 39, tzinfo=datetime.timezone.utc), 'commenter': 'fengyuentau', 'type': 'User'}, {'comment_id': 1361466010, 'comment_body': 'also add version control here, needs latest opencv-dev or >= 4.9.0', 'comment_created': datetime.datetime(2023, 10, 17, 3, 23, 15, tzinfo=datetime.timezone.utc), 'commenter': 'fengyuentau', 'type': 'User'}]","[{'commit_sha': '3c81e931785cf463829efbd8b9fdbdcc6b3a2021', 'committer_username': 'Aser-Abdelfatah', 'committer_name': 'Aser Atawya', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 2, 19, 39, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a525b5452eda68d1975bfc7c665f290039194de', 'committer_username': 'Aser-Abdelfatah', 'committer_name': 'Aser Atawya', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 2, 19, 39, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47b428015adfca7215456c7c59183fd1f56829a5', 'committer_username': 'Aser-Abdelfatah', 'committer_name': 'Aser Atawya', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 2, 19, 39, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '58f5c127ea930d29df37a2937889a0ce64cb389a', 'committer_username': 'Aser-Abdelfatah', 'committer_name': 'Aser Atawya', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 2, 19, 39, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d9330db40744d97f647c8b118f5dcfbc473f61b', 'committer_username': 'Aser-Abdelfatah', 'committer_name': 'Aser Atawya', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 2, 19, 39, 20, tzinfo=datetime.timezone.utc)}]",Aser Atawya,47282229,,User,,34,,12,18
1432148672,Google Summer of Code: Adding RAFT Optical Flow Model using ONNX Format,Adding RAFT in ONNX to the OpenCV model zoo. ,True,197,https://api.github.com/repos/opencv/opencv_zoo/pulls/197,https://github.com/opencv/opencv_zoo/pull/197,closed,490,0,8,5,0,3,1,1,[{'name': 'GSoC'}],2023-07-13 00:22:03+00:00,2023-10-17 03:23:30+00:00,8305287.0,"96 days, 3:01:27","[{'comment_id': 1305281240, 'comment_body': 'Align comments to the code', 'comment_created': datetime.datetime(2023, 8, 25, 7, 19, 1, tzinfo=datetime.timezone.utc), 'commenter': 'fengyuentau', 'type': 'User'}, {'comment_id': 1361465381, 'comment_body': 'eol before eof', 'comment_created': datetime.datetime(2023, 10, 17, 3, 21, 39, tzinfo=datetime.timezone.utc), 'commenter': 'fengyuentau', 'type': 'User'}, {'comment_id': 1361466010, 'comment_body': 'also add version control here, needs latest opencv-dev or >= 4.9.0', 'comment_created': datetime.datetime(2023, 10, 17, 3, 23, 15, tzinfo=datetime.timezone.utc), 'commenter': 'fengyuentau', 'type': 'User'}]","[{'commit_sha': '3c81e931785cf463829efbd8b9fdbdcc6b3a2021', 'committer_username': 'Aser-Abdelfatah', 'committer_name': 'Aser Atawya', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 2, 19, 39, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a525b5452eda68d1975bfc7c665f290039194de', 'committer_username': 'Aser-Abdelfatah', 'committer_name': 'Aser Atawya', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 2, 19, 39, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47b428015adfca7215456c7c59183fd1f56829a5', 'committer_username': 'Aser-Abdelfatah', 'committer_name': 'Aser Atawya', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 2, 19, 39, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '58f5c127ea930d29df37a2937889a0ce64cb389a', 'committer_username': 'Aser-Abdelfatah', 'committer_name': 'Aser Atawya', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 2, 19, 39, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d9330db40744d97f647c8b118f5dcfbc473f61b', 'committer_username': 'Aser-Abdelfatah', 'committer_name': 'Aser Atawya', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 2, 19, 39, 20, tzinfo=datetime.timezone.utc)}]",Aser Atawya,47282229,,User,,34,,12,18
1458918950,GSoC Add ONNX Support for GatherElements,"Merge with: https://github.com/opencv/opencv_extra/pull/1082

### Pull Request Readiness Checklist

See details at https://github.com/opencv/opencv/wiki/How_to_contribute#making-a-good-pull-request

- [x] I agree to contribute to the project under Apache 2 License.
- [x] To the best of my knowledge, the proposed patch is not based on a code under GPL or another license that is incompatible with OpenCV
- [x] The PR is proposed to the proper branch
- [x] There is a reference to the original bug report and related work
- [x] There is accuracy test, performance test and test data in opencv_extra repository, if applicable
      Patch to opencv_extra has the same branch name.
- [x] The feature is well documented and sample code can be built with the project CMake

Adds support to the ONNX operator GatherElements [operator docs](https://github.com/onnx/onnx/blob/main/docs/Operators.md#GatherElements)
Added tests to opencv_extra at pull request https://github.com/opencv/opencv_extra/pull/1082",True,24092,https://api.github.com/repos/opencv/opencv/pulls/24092,https://github.com/opencv/opencv/pull/24092,closed,303,3,8,19,9,50,3,1,"[{'name': 'GSoC'}, {'name': 'category: dnn'}, {'name': 'category: dnn (onnx)'}]",2023-08-02 00:12:38+00:00,2023-10-18 07:41:48+00:00,6679750.0,"77 days, 7:29:10","[{'comment_id': 1281433663, 'comment_body': 'Thanks for contribution! Please add a brief description about the difference between `Gather` and `GatherElements`', 'comment_created': datetime.datetime(2023, 8, 2, 6, 2, 50, tzinfo=datetime.timezone.utc), 'commenter': 'dkurt', 'type': 'User'}, {'comment_id': 1281435239, 'comment_body': 'Please do not forget to open a pull request to https://github.com/opencv/opencv_extra/ with the same branch name: `GSoC_Support_GatherElements_ONNX`', 'comment_created': datetime.datetime(2023, 8, 2, 6, 5, 13, tzinfo=datetime.timezone.utc), 'commenter': 'dkurt', 'type': 'User'}, {'comment_id': 1281436070, 'comment_body': 'unused variable', 'comment_created': datetime.datetime(2023, 8, 2, 6, 6, 35, tzinfo=datetime.timezone.utc), 'commenter': 'dkurt', 'type': 'User'}, {'comment_id': 1281436590, 'comment_body': 'missed return?', 'comment_created': datetime.datetime(2023, 8, 2, 6, 7, 24, tzinfo=datetime.timezone.utc), 'commenter': 'dkurt', 'type': 'User'}, {'comment_id': 1281511633, 'comment_body': '`Functor` is not needed.', 'comment_created': datetime.datetime(2023, 8, 2, 7, 33, 20, tzinfo=datetime.timezone.utc), 'commenter': 'fengyuentau', 'type': 'User'}, {'comment_id': 1281512611, 'comment_body': 'There is no reduction operations in `GatherElements`. So we most likely do not need this dispatcher.', 'comment_created': datetime.datetime(2023, 8, 2, 7, 34, 18, tzinfo=datetime.timezone.utc), 'commenter': 'fengyuentau', 'type': 'User'}, {'comment_id': 1287886247, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2023, 8, 9, 3, 19, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Aser-Abdelfatah', 'type': 'User'}, {'comment_id': 1287886593, 'comment_body': 'Removed it in the new commit!', 'comment_created': datetime.datetime(2023, 8, 9, 3, 20, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Aser-Abdelfatah', 'type': 'User'}, {'comment_id': 1287886894, 'comment_body': 'removed it in the second commit', 'comment_created': datetime.datetime(2023, 8, 9, 3, 21, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Aser-Abdelfatah', 'type': 'User'}, {'comment_id': 1287886941, 'comment_body': 'removed it in the second commit', 'comment_created': datetime.datetime(2023, 8, 9, 3, 21, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Aser-Abdelfatah', 'type': 'User'}, {'comment_id': 1289372704, 'comment_body': 'done: https://github.com/opencv/opencv_extra/pull/1082', 'comment_created': datetime.datetime(2023, 8, 9, 23, 59, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Aser-Abdelfatah', 'type': 'User'}, {'comment_id': 1289374849, 'comment_body': 'I reverted to the first commit since it was working correctly and passed the tests. Essentially, I edited the dispatcher from the original implementation of scatter, and this dispatcher essentially just calls forward_impl<T>(). I decided to keep the dispatchers just to account for the data type of the output and since they were in harmony with the rest of the implementation in terms of the use of the template.', 'comment_created': datetime.datetime(2023, 8, 10, 0, 4, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Aser-Abdelfatah', 'type': 'User'}, {'comment_id': 1289374994, 'comment_body': 'Nope!', 'comment_created': datetime.datetime(2023, 8, 10, 0, 4, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Aser-Abdelfatah', 'type': 'User'}, {'comment_id': 1289375982, 'comment_body': 'The functor used is  just \r\n`        auto rd = [](const T& a, const T& b) { return b; };\r\n`\r\nThis is different from the original implementation of Scatter, where there are different functors. Once again, I decided to keep it to avoid missing with data types and templates.', 'comment_created': datetime.datetime(2023, 8, 10, 0, 6, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Aser-Abdelfatah', 'type': 'User'}, {'comment_id': 1305224180, 'comment_body': 'Add a check here to check whether `indices` are provided as constant since the implementation relies on that:\r\n\r\n```cpp\r\nCV_CheckTrue(constBlobs.find(node_proto.input(1)) != constBlobs.end(), ""DNN/ONNX-GatherElements: indices must be constant"";\r\n```', 'comment_created': datetime.datetime(2023, 8, 25, 6, 24, 12, tzinfo=datetime.timezone.utc), 'commenter': 'fengyuentau', 'type': 'User'}, {'comment_id': 1305232375, 'comment_body': 'Extra calls consume extra time. We should try to save time, especially when it\'s inference. You can try something like this:\r\n\r\n```cpp\r\ntemplate<typename T>\r\nvoid forward_impl(const Mat& data, const Mat& indices,  Mat& out) {\r\n// ...\r\nfor (size_t i = 0; i < total; i++) {\r\n    *tmp_p_out = *tmp_p_data;\r\n}\r\n}\r\n\r\ntemplate<typename... Args>\r\ninline void typeDispatch(const int type, Args&&... args)\r\n{\r\n    switch (type)\r\n    {\r\n        case CV_8U:\r\n            forward_impl<uint8_t>(std::forward<Args>(args)...);\r\n            break;\r\n        case CV_32S:\r\n            forward_impl<int32_t>(std::forward<Args>(args)...);\r\n            break;\r\n        case CV_32F:\r\n            forward_impl<float>(std::forward<Args>(args)...);\r\n            break;\r\n        default:\r\n            CV_Error(cv::Error::BadDepth, ""DNN/GatherElements: Unsupported type."");\r\n    };\r\n}\r\n```', 'comment_created': datetime.datetime(2023, 8, 25, 6, 32, 30, tzinfo=datetime.timezone.utc), 'commenter': 'fengyuentau', 'type': 'User'}, {'comment_id': 1305243234, 'comment_body': 'Could you also add a accuracy test here to test the raft model? Before this, you need to put your changes from https://github.com/opencv/opencv_extra/pull/1085 to https://github.com/opencv/opencv_extra/pull/1082 so that our CI system can detect the changes and then run the tests.', 'comment_created': datetime.datetime(2023, 8, 25, 6, 41, 7, tzinfo=datetime.timezone.utc), 'commenter': 'fengyuentau', 'type': 'User'}, {'comment_id': 1305891542, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 8, 25, 16, 33, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Aser-Abdelfatah', 'type': 'User'}, {'comment_id': 1305892166, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 8, 25, 16, 34, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Aser-Abdelfatah', 'type': 'User'}, {'comment_id': 1305909495, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 8, 25, 16, 49, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Aser-Abdelfatah', 'type': 'User'}, {'comment_id': 1305909738, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 8, 25, 16, 49, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Aser-Abdelfatah', 'type': 'User'}, {'comment_id': 1308282062, 'comment_body': 'Change `required` to false before the test run. This is needed for large models tests to optionally skip it if there is no file on the CI:\r\n```cpp\r\nrequired = false;\r\ntestONNXModels(""RAFT"", npy, 0, 0, false, true, 2);\r\n```', 'comment_created': datetime.datetime(2023, 8, 29, 6, 41, 17, tzinfo=datetime.timezone.utc), 'commenter': 'dkurt', 'type': 'User'}, {'comment_id': 1309336165, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 8, 29, 20, 44, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Aser-Abdelfatah', 'type': 'User'}, {'comment_id': 1338085535, 'comment_body': 'sounds like a bug here', 'comment_created': datetime.datetime(2023, 9, 27, 6, 8, 18, tzinfo=datetime.timezone.utc), 'commenter': 'vpisarev', 'type': 'User'}, {'comment_id': 1341258461, 'comment_body': 'Forward model only once and request both outputs', 'comment_created': datetime.datetime(2023, 9, 29, 11, 37, 50, tzinfo=datetime.timezone.utc), 'commenter': 'dkurt', 'type': 'User'}, {'comment_id': 1341261767, 'comment_body': '@fengyuentau, can we reduce input resolution as minimul as possible to cover required checks for a new layer? `240x180` or lower.', 'comment_created': datetime.datetime(2023, 9, 29, 11, 40, 36, tzinfo=datetime.timezone.utc), 'commenter': 'dkurt', 'type': 'User'}, {'comment_id': 1341959814, 'comment_body': 'It may be feasible, but the model may be sensitive to the input shape. The intention was we use the model in opencv_zoo for accuracy or performance testing. If the model is shape-sensitive in the end, we have to replace the model in the zoo with one with a smaller input shape. That could be some trouble.', 'comment_created': datetime.datetime(2023, 9, 30, 13, 2, 25, tzinfo=datetime.timezone.utc), 'commenter': 'fengyuentau', 'type': 'User'}, {'comment_id': 1342151596, 'comment_body': 'Can you please reduce precision to FP16? Some changes in `blobFromNPY` will be required.', 'comment_created': datetime.datetime(2023, 10, 1, 15, 31, 51, tzinfo=datetime.timezone.utc), 'commenter': 'dkurt', 'type': 'User'}, {'comment_id': 1349454182, 'comment_body': 'I will handle this problem after we can run this model. Currently we are facing some other issues running this model.', 'comment_created': datetime.datetime(2023, 10, 7, 3, 43, 18, tzinfo=datetime.timezone.utc), 'commenter': 'fengyuentau', 'type': 'User'}, {'comment_id': 1349485472, 'comment_body': 'We need to refactor this implementation because it is just tooooooo slow, leading to a very long inference with the RAFT model (it has **160!!!** GatherElements operators). Perf with `GatherElements(data:FLOAT[2700, 1, 2914], indices:INT64[2700, 1, 81])`:\r\n[ort_benchmark.zip](https://github.com/opencv/opencv/files/12837145/ort_benchmark.zip)\r\n\r\n| this impl | ort |\r\n| - | - |\r\n| 15415.07 ms | 0.15ms |', 'comment_created': datetime.datetime(2023, 10, 7, 8, 18, 3, tzinfo=datetime.timezone.utc), 'commenter': 'fengyuentau', 'type': 'User'}, {'comment_id': 1349487384, 'comment_body': 'How about we just check the smaller output? This model has two outputs, one of which has shape [1, 2, 45, 60] and file size 21KB, the other of which has shape [1, 2, 360, 480] and file size 1.32MB. The bigger output is calculated from the smaller output. I think it also makes sense if we just check the smaller one. In this case, we can avoid replacing models.', 'comment_created': datetime.datetime(2023, 10, 7, 8, 33, 3, tzinfo=datetime.timezone.utc), 'commenter': 'fengyuentau', 'type': 'User'}, {'comment_id': 1349654662, 'comment_body': 'Improvement:\r\n\r\nPrevious impl by Aser: 15415.07 ms\r\nAfter removing meaningless for loop: 1ms\r\nSpeedup: 0.49ms\r\nort: 0.15 ms', 'comment_created': datetime.datetime(2023, 10, 8, 8, 50, 32, tzinfo=datetime.timezone.utc), 'commenter': 'fengyuentau', 'type': 'User'}, {'comment_id': 1349655149, 'comment_body': 'I found that even though problems of `GatherElements` have been fixed, the inference results of RAFT between ours and onnxruntime are different. Need an investigation into this problem.', 'comment_created': datetime.datetime(2023, 10, 8, 8, 54, 13, tzinfo=datetime.timezone.utc), 'commenter': 'fengyuentau', 'type': 'User'}, {'comment_id': 1349841644, 'comment_body': '> I found that even though problems of `GatherElements` have been fixed, the inference results of RAFT between ours and onnxruntime are different. Need an investigation into this problem.\r\n\r\nI found we have different results on the InstanceNorm layer from ONNX Runtime. Let me fix it.', 'comment_created': datetime.datetime(2023, 10, 9, 3, 43, 47, tzinfo=datetime.timezone.utc), 'commenter': 'fengyuentau', 'type': 'User'}, {'comment_id': 1350050177, 'comment_body': ""@fengyuentau, thanks for the investigation. If the biggest output is computed from the smallest one, it's a good ides to check the smallest only as it will cover most critical layers."", 'comment_created': datetime.datetime(2023, 10, 9, 9, 18, 9, tzinfo=datetime.timezone.utc), 'commenter': 'dkurt', 'type': 'User'}, {'comment_id': 1351280809, 'comment_body': 'Below is the internal output difference of a node in the model. The final outputs are still very different:\r\n\r\n```\r\n./opencv/modules/dnn/test/test_common.impl.hpp:76: Failure\r\nExpected: (normL1) <= (l1), actual: 0.0965853 vs 1e-05\r\n  |ref| = 0.47372817993164062\r\n./opencv/modules/dnn/test/test_common.impl.hpp:79: Failure\r\nExpected: (normInf) <= (lInf), actual: 0.474318 vs 0.0001\r\n  |ref| = 0.47372817993164062\r\n./opencv/modules/dnn/test/test_common.impl.hpp:76: Failure\r\nExpected: (normL1) <= (l1), actual: 0.581241 vs 1e-05\r\n  |ref| = 3.5230345726013184\r\n./opencv/modules/dnn/test/test_common.impl.hpp:79: Failure\r\nExpected: (normInf) <= (lInf), actual: 4.38871 vs 0.0001\r\n  |ref| = 3.5230345726013184\r\n```\r\n\r\n---\r\n\r\nWith https://github.com/opencv/opencv/pull/24378, the difference is reduced to\r\n\r\n```\r\n[ RUN      ] Test_ONNX_layers.RAFT/0, where GetParam() = OCV/CPU\r\n/Users/fengyuantao/Workspace/fytao/projects/gsoc_optical_flow/opencv/modules/dnn/test/test_common.impl.hpp:76: Failure\r\nExpected: (normL1) <= (l1), actual: 0.00010332 vs 1e-05\r\n  |ref| = 410.04229736328125\r\n/Users/fengyuantao/Workspace/fytao/projects/gsoc_optical_flow/opencv/modules/dnn/test/test_common.impl.hpp:79: Failure\r\nExpected: (normInf) <= (lInf), actual: 0.00147033 vs 0.0001\r\n  |ref| = 410.04229736328125\r\n[  FAILED  ] Test_ONNX_layers.RAFT/0, where GetParam() = OCV/CPU (1738 ms)\r\n[----------] 1 test from Test_ONNX_layers (1738 ms total)\r\n```\r\n\r\nStill need a further investigation.', 'comment_created': datetime.datetime(2023, 10, 10, 2, 57, 7, tzinfo=datetime.timezone.utc), 'commenter': 'fengyuentau', 'type': 'User'}, {'comment_id': 1351615268, 'comment_body': 'Seems good, as for me. l1=2e-4 and lInf=2e-3', 'comment_created': datetime.datetime(2023, 10, 10, 6, 38, 4, tzinfo=datetime.timezone.utc), 'commenter': 'dkurt', 'type': 'User'}, {'comment_id': 1353964405, 'comment_body': 'Found another bug on the element-wise layer, see https://github.com/opencv/opencv/issues/24385.', 'comment_created': datetime.datetime(2023, 10, 11, 3, 15, 3, tzinfo=datetime.timezone.utc), 'commenter': 'fengyuentau', 'type': 'User'}, {'comment_id': 1353979755, 'comment_body': 'Finally dnn can achieve the same accuracy with https://github.com/opencv/opencv/pull/24386 (greater fix), with or without #24378 (instancenorm).', 'comment_created': datetime.datetime(2023, 10, 11, 3, 53, 42, tzinfo=datetime.timezone.utc), 'commenter': 'fengyuentau', 'type': 'User'}, {'comment_id': 1358040240, 'comment_body': 'This RAFT model takes nearly 2s for a single inference on my mac m1. I think we still need to replace with a smaller input scale version.', 'comment_created': datetime.datetime(2023, 10, 13, 9, 45, 18, tzinfo=datetime.timezone.utc), 'commenter': 'fengyuentau', 'type': 'User'}, {'comment_id': 1358094736, 'comment_body': 'https://github.com/opencv/opencv/actions/runs/6506670391/job/17672657622?pr=24092\r\n```\r\n[ RUN      ] Test_ONNX_nets.RAFT/0, where GetParam() = OCV/CPU\r\n/Users/opencv-cn/GHA-OCV-1/_work/opencv/opencv/opencv/modules/dnn/test/test_common.impl.hpp:79: Failure\r\nExpected: (normInf) <= (lInf), actual: 0.000179291 vs 0.00014\r\n  |ref| = 0.47372817993164062\r\n[  FAILED  ] Test_ONNX_nets.RAFT/0, where GetParam() = OCV/CPU (1957 ms)\r\n[ RUN      ] Test_ONNX_nets.RAFT/1, where GetParam() = OCV/CPU_FP16\r\n/Users/opencv-cn/GHA-OCV-1/_work/opencv/opencv/opencv/modules/dnn/test/test_common.impl.hpp:79: Failure\r\nExpected: (normInf) <= (lInf), actual: 0.000179291 vs 0.00014\r\n```', 'comment_created': datetime.datetime(2023, 10, 13, 10, 40, 34, tzinfo=datetime.timezone.utc), 'commenter': 'dkurt', 'type': 'User'}, {'comment_id': 1360022356, 'comment_body': 'Tested with a smaller input one but the time is almost the same. Lets keep what we have. Also I found that we have almost the same inference time compared to ONNX Runtime.', 'comment_created': datetime.datetime(2023, 10, 16, 2, 7, 25, tzinfo=datetime.timezone.utc), 'commenter': 'fengyuentau', 'type': 'User'}, {'comment_id': 1360026281, 'comment_body': 'Solved.', 'comment_created': datetime.datetime(2023, 10, 16, 2, 16, 31, tzinfo=datetime.timezone.utc), 'commenter': 'fengyuentau', 'type': 'User'}, {'comment_id': 1360026769, 'comment_body': 'Thank you for the note. Already tuned the threshold.', 'comment_created': datetime.datetime(2023, 10, 16, 2, 17, 44, tzinfo=datetime.timezone.utc), 'commenter': 'fengyuentau', 'type': 'User'}, {'comment_id': 1360431583, 'comment_body': 'I suggest to add a tag to this test `applyTestTag(CV_TEST_TAG_LONG, CV_TEST_TAG_DEBUG_VERYLONG, CV_TEST_TAG_MEMORY_2GB);` to skip as long. PR is ready and might be merged.', 'comment_created': datetime.datetime(2023, 10, 16, 10, 7, 29, tzinfo=datetime.timezone.utc), 'commenter': 'dkurt', 'type': 'User'}, {'comment_id': 1360479830, 'comment_body': '> I suggest to add a tag to this test `applyTestTag(CV_TEST_TAG_LONG, CV_TEST_TAG_DEBUG_VERYLONG, CV_TEST_TAG_MEMORY_2GB);` to skip as long. PR is ready and might be merged.\r\n\r\nThank you for the tips. I almost forgot these flags!', 'comment_created': datetime.datetime(2023, 10, 16, 10, 53, 23, tzinfo=datetime.timezone.utc), 'commenter': 'fengyuentau', 'type': 'User'}, {'comment_id': 1360480012, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2023, 10, 16, 10, 53, 34, tzinfo=datetime.timezone.utc), 'commenter': 'fengyuentau', 'type': 'User'}, {'comment_id': 1364875338, 'comment_body': 'Implementation should handle FP16 datatype too\r\n\r\n```\r\n[  FAILED  ] 3 tests, listed below:\r\n[  FAILED  ] Test_ONNX_conformance.Layer_Test/test_gather_elements_0_OCV_OCL_FP16, where GetParam() = (test_gather_elements_0, OCV/OCL_FP16)\r\n[  FAILED  ] Test_ONNX_conformance.Layer_Test/test_gather_elements_1_OCV_OCL_FP16, where GetParam() = (test_gather_elements_1, OCV/OCL_FP16)\r\n[  FAILED  ] Test_ONNX_conformance.Layer_Test/test_gather_elements_negative_indices_OCV_OCL_FP16, where GetParam() = (test_gather_elements_negative_indices, OCV/OCL_FP16)\r\n```\r\n\r\nhttps://pullrequest.opencv.org/buildbot/builders/4_x-lin64/builds/100283\r\n', 'comment_created': datetime.datetime(2023, 10, 19, 4, 54, 28, tzinfo=datetime.timezone.utc), 'commenter': 'opencv-alalek', 'type': 'User'}, {'comment_id': 1364876991, 'comment_body': 'Ok, I will do this.', 'comment_created': datetime.datetime(2023, 10, 19, 4, 56, 49, tzinfo=datetime.timezone.utc), 'commenter': 'fengyuentau', 'type': 'User'}, {'comment_id': 1364997208, 'comment_body': 'See https://github.com/opencv/opencv/pull/24427', 'comment_created': datetime.datetime(2023, 10, 19, 6, 48, 7, tzinfo=datetime.timezone.utc), 'commenter': 'fengyuentau', 'type': 'User'}]","[{'commit_sha': '86bd690809dd51fea21c91f64e2c27cb758afd50', 'committer_username': 'Aser-Abdelfatah', 'committer_name': 'Aser Atawya', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 2, 19, 39, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4fee29e4bab22f20b6293ea949b8b020003a775b', 'committer_username': 'Aser-Abdelfatah', 'committer_name': 'Aser Atawya', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 2, 19, 39, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '421b3ce78f96c4a7b3c4f7e96e820b76ec9f6611', 'committer_username': 'Aser-Abdelfatah', 'committer_name': 'Aser Atawya', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 2, 19, 39, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab3b5a3d44a762ccf482bc1ace94718b9c827617', 'committer_username': 'Aser-Abdelfatah', 'committer_name': 'Aser Atawya', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 2, 19, 39, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b99e1ab19f08b22ab35f16c49a4018c666ab0676', 'committer_username': 'Aser-Abdelfatah', 'committer_name': 'Aser Atawya', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 2, 19, 39, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ff95a2914fedc512cfdf22dc04ed557377f129e', 'committer_username': 'Aser-Abdelfatah', 'committer_name': 'Aser Atawya', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 2, 19, 39, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '873bfd45db3d823d0f28c91f475ad1ed215e7e3a', 'committer_username': 'Aser-Abdelfatah', 'committer_name': 'Aser Atawya', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 2, 19, 39, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '611b32f9dc0de9f21909067d7ee9703f52602d12', 'committer_username': 'fengyuentau', 'committer_name': 'Yuantao Feng', 'committer_email': 'yuantao.feng@opencv.org.cn', 'commit_date': datetime.datetime(2016, 2, 13, 15, 34, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '501ebafcd03f305103961f9aba21ff1c7cb84eae', 'committer_username': 'fengyuentau', 'committer_name': 'Yuantao Feng', 'committer_email': 'yuantao.feng@opencv.org.cn', 'commit_date': datetime.datetime(2016, 2, 13, 15, 34, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72ab5764f4d20b5f454620a8c98c038e0616f4b0', 'committer_username': 'fengyuentau', 'committer_name': 'Yuantao Feng', 'committer_email': 'yuantao.feng@opencv.org.cn', 'commit_date': datetime.datetime(2016, 2, 13, 15, 34, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3bf49440a98362c8810c18ffb491a0e56914b357', 'committer_username': 'fengyuentau', 'committer_name': 'Yuantao Feng', 'committer_email': 'yuantao.feng@opencv.org.cn', 'commit_date': datetime.datetime(2016, 2, 13, 15, 34, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd949dbdcebad2fb0d5fe70d782a9ac3913c4a8ca', 'committer_username': 'fengyuentau', 'committer_name': 'Yuantao Feng', 'committer_email': 'yuantao.feng@opencv.org.cn', 'commit_date': datetime.datetime(2016, 2, 13, 15, 34, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e2fec12f99bfd5e8a504d4ae6d6efdc37ea48394', 'committer_username': 'fengyuentau', 'committer_name': 'Yuantao Feng', 'committer_email': 'yuantao.feng@opencv.org.cn', 'commit_date': datetime.datetime(2016, 2, 13, 15, 34, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d3be8e4b9ea7236d39e213708263e6dedd6aa84', 'committer_username': 'fengyuentau', 'committer_name': 'Yuantao Feng', 'committer_email': 'yuantao.feng@opencv.org.cn', 'commit_date': datetime.datetime(2016, 2, 13, 15, 34, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2dd7b21137ff7bc44015643cc1a491b2aa07cfcb', 'committer_username': 'fengyuentau', 'committer_name': 'Yuantao Feng', 'committer_email': 'yuantao.feng@opencv.org.cn', 'commit_date': datetime.datetime(2016, 2, 13, 15, 34, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c3a8a15e72066625f94e6434a10b28f9471d523', 'committer_username': 'fengyuentau', 'committer_name': 'Yuantao Feng', 'committer_email': 'yuantao.feng@opencv.org.cn', 'commit_date': datetime.datetime(2016, 2, 13, 15, 34, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac3ea424f887187ad2b6b50cd6cc558e96b1c87a', 'committer_username': 'fengyuentau', 'committer_name': 'Yuantao Feng', 'committer_email': 'yuantao.feng@opencv.org.cn', 'commit_date': datetime.datetime(2016, 2, 13, 15, 34, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e8e1637ed12f41aac183ead6c4f77e662a03171c', 'committer_username': 'fengyuentau', 'committer_name': 'Yuantao Feng', 'committer_email': 'yuantao.feng@opencv.org.cn', 'commit_date': datetime.datetime(2016, 2, 13, 15, 34, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83031aae7e61b247747d7e22f2f194415781bd99', 'committer_username': 'fengyuentau', 'committer_name': 'Yuantao Feng', 'committer_email': 'yuantao.feng@opencv.org.cn', 'commit_date': datetime.datetime(2016, 2, 13, 15, 34, 5, tzinfo=datetime.timezone.utc)}]",Aser Atawya,47282229,,User,,34,,12,18
1469464627,GSoC Add ONNX Support for GatherElements,"Merge with https://github.com/opencv/opencv/pull/24092

This pull request serves as an addition to the pull request ""GSoC Add ONNX Support for GatherElements #24092"", which is submitted to the original OpenCV repository. It contains three tests to the GatherElements operator. 
The three tests are sourced from:
* https://github.com/onnx/onnx/tree/main/onnx/backend/test/data/node/test_gather_elements_0
* https://github.com/onnx/onnx/tree/main/onnx/backend/test/data/node/test_gather_elements_1
* https://github.com/onnx/onnx/tree/main/onnx/backend/test/data/node/test_gather_elements_negative_indices
And the models were configured using the code provided by Yuantao Feng at https://github.com/fengyuentau/onnx_utils to confirm output shape in pre-run.

---

Reference outputs for `optical_flow_estimation_raft_2023aug.onnx` is generated with the following script:

```python
import cv2 as cv
import numpy as np

img1 = cv.imread(""./opencv_extra/testdata/gpu/opticalflow/frame0.png"")
img2 = cv.imread(""./opencv_extra/testdata/gpu/opticalflow/frame1.png"")

img1_blob = cv.cvtColor(img1, cv.COLOR_BGR2RGB)
img1_blob = cv.resize(img1_blob, (480, 360))
# source: (1, 3, 388, 584)
# target: 1, 3, 360, 480
img1_blob = cv.dnn.blobFromImage(img1_blob)
# source:  (1, 3, 388, 584)
# target: 1, 3, 360, 480
img2_blob = cv.cvtColor(img2, cv.COLOR_BGR2RGB)
img2_blob = cv.resize(img2_blob, (480, 360))
img2_blob = cv.dnn.blobFromImage(img2_blob)
print(img1_blob.shape, img2_blob.shape)

import onnxruntime as ort
net = ort.InferenceSession(""optical_flow_estimation_raft_2023aug.onnx"", providers=[""CPUExecutionProvider""])
output = net.run([""12007"", ""12006""], {""0"": img1_blob, ""1"": img2_blob})
np.save(""output_optical_flow_estimation_raft_2023aug_0.npy"", output[0])
np.save(""output_optical_flow_estimation_raft_2023aug_1.npy"", output[1])
print(output[0].shape)
print(output[1].shape)
```",True,1082,https://api.github.com/repos/opencv/opencv_extra/pulls/1082,https://github.com/opencv/opencv_extra/pull/1082,closed,5,0,2,2,16,11,1,0,[{'name': 'DNN'}],2023-08-09 23:57:43+00:00,2023-10-17 15:21:43+00:00,5930640.0,"68 days, 15:24:00","[{'comment_id': 1308277138, 'comment_body': 'Please share a source of that link in comment (i.e. origin repository)', 'comment_created': datetime.datetime(2023, 8, 29, 6, 35, 18, tzinfo=datetime.timezone.utc), 'commenter': 'dkurt', 'type': 'User'}, {'comment_id': 1308277781, 'comment_body': ""Use `GDrive` class for Google Drive models:\r\n```\r\ndownloader=GDrive('1yWIbF4birkpZMhNNhqzy75d4EvJW-UXE'),\r\n```"", 'comment_created': datetime.datetime(2023, 8, 29, 6, 36, 7, tzinfo=datetime.timezone.utc), 'commenter': 'dkurt', 'type': 'User'}, {'comment_id': 1308278258, 'comment_body': 'Too big file. What are the data type and dimensions?', 'comment_created': datetime.datetime(2023, 8, 29, 6, 36, 41, tzinfo=datetime.timezone.utc), 'commenter': 'dkurt', 'type': 'User'}, {'comment_id': 1309341545, 'comment_body': 'The model is sourced from here https://github.com/Aser-Abdelfatah/opencv_zoo/tree/gsoc_RAFT_Model_ONNX/models/optical_flow_estimation_raft', 'comment_created': datetime.datetime(2023, 8, 29, 20, 50, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Aser-Abdelfatah', 'type': 'User'}, {'comment_id': 1309823975, 'comment_body': 'I mean it there an officially distributed model? There is a little chance that custom file will be available for a long time.', 'comment_created': datetime.datetime(2023, 8, 30, 7, 38, 41, tzinfo=datetime.timezone.utc), 'commenter': 'dkurt', 'type': 'User'}, {'comment_id': 1309848403, 'comment_body': 'This share link is actually from the opencv.org google drive. I uploaded it to OpenCV Shared -> Deep Models if you have access to it.\r\n\r\n---\r\n\r\nSource of the model is from https://github.com/PINTO0309/PINTO_model_zoo/tree/main/252_RAFT, where it uses external cloud drive called wasabi stoarge.', 'comment_created': datetime.datetime(2023, 8, 30, 7, 57, 19, tzinfo=datetime.timezone.utc), 'commenter': 'fengyuentau', 'type': 'User'}]","[{'commit_sha': '127d9f1fe3707f058a2f74d1b8645309bdf04fa8', 'committer_username': 'Aser-Abdelfatah', 'committer_name': 'Aser Atawya', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 2, 19, 39, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9bba87de78d54b6416defd470b56707cf78aaa7b', 'committer_username': 'fengyuentau', 'committer_name': 'Yuantao Feng', 'committer_email': 'yuantao.feng@opencv.org.cn', 'commit_date': datetime.datetime(2016, 2, 13, 15, 34, 5, tzinfo=datetime.timezone.utc)}]",Aser Atawya,47282229,,User,,34,,12,18

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
5108051,opencv,opencv/opencv,C++,55710,77621,2656,2195,34493,2601,6,134,"[{'id': 1458918950, 'number': 24092, 'closed': datetime.datetime(2023, 10, 18, 7, 41, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 2, 0, 12, 38, tzinfo=datetime.timezone.utc), 'time_taken': 6679750.0, 'time_delta': '77 days, 7:29:10', 'additions': 303, 'deletions': 3, 'state': 'closed'}, {'id': 1430601587, 'number': 23975, 'closed': datetime.datetime(2023, 8, 3, 19, 50, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 12, 5, 35, 24, tzinfo=datetime.timezone.utc), 'time_taken': 1952091.0, 'time_delta': '22 days, 14:14:51', 'additions': 134, 'deletions': 0, 'state': 'closed'}]"
5108029,opencv_extra,opencv/opencv_extra,,1581,915,96,201,1802,25,6,25,"[{'id': 1488674808, 'number': 1085, 'closed': datetime.datetime(2023, 8, 25, 15, 59, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 24, 20, 49, 2, tzinfo=datetime.timezone.utc), 'time_taken': 69034.0, 'time_delta': '19:10:34', 'additions': 7, 'deletions': 0, 'state': 'closed'}, {'id': 1469464627, 'number': 1082, 'closed': datetime.datetime(2023, 10, 17, 15, 21, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 9, 23, 57, 43, tzinfo=datetime.timezone.utc), 'time_taken': 5930640.0, 'time_delta': '68 days, 15:24:00', 'additions': 5, 'deletions': 0, 'state': 'closed'}]"
390637491,opencv_zoo,opencv/opencv_zoo,Python,181,600,26,25,154,13,1,6,"[{'id': 1432148672, 'number': 197, 'closed': datetime.datetime(2023, 10, 17, 3, 23, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 13, 0, 22, 3, tzinfo=datetime.timezone.utc), 'time_taken': 8305287.0, 'time_delta': '96 days, 3:01:27', 'additions': 490, 'deletions': 0, 'state': 'closed'}]"
