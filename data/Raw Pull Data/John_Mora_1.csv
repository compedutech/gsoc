pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
432719855,[BEAM-9198] BeamSQL aggregation analytics functionality,"**Google Summer of Code 2020: Main PR for BEAM-9198** 

**Student:** John Mora - @jhnmora000 
**Mentor:** Rui Wang - @amaliujia 

**Project Link:**
[Link](https://summerofcode.withgoogle.com/projects/#5433722863616000)

**Description:**
Implement aggregation analytics functionality for Apache Beam.

**Google Summer of Code 2020 Proposal:**

- [Proposal](https://docs.google.com/document/d/1nUbV45iL_avgAewYYTkyHHJWY8ZaVcFuky-dQ-pcE0M/edit?usp=sharing)

**Design Doc:**

- [Document](https://docs.google.com/document/d/1tJapdA7ZNwkU0NaK7p-em0XnpHqNE1pKIXw9hVJkIUg/edit?usp=sharing)

**Additional PRs:**
- [Support for ZetaSQL](https://github.com/apache/beam/pull/12595 )
- [Concept-proof implementation of Window Functions](https://github.com/apache/beam/pull/11845)
- [Implement value_nth test](https://github.com/apache/beam/pull/12314)

------------------------

Thank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:

 - [ ] [**Choose reviewer(s)**](https://beam.apache.org/contribute/#make-your-change) and mention them in a comment (`R: @username`).
 - [ ] Format the pull request title like `[BEAM-XXX] Fixes bug in ApproximateQuantiles`, where you replace `BEAM-XXX` with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.
 - [ ] Update `CHANGES.md` with noteworthy changes.
 - [ ] If this contribution is large, please file an Apache [Individual Contributor License Agreement](https://www.apache.org/licenses/icla.pdf).

See the [Contributor Guide](https://beam.apache.org/contribute) for more tips on [how to make review process smoother](https://beam.apache.org/contribute/#make-reviewers-job-easier).

Post-Commit Tests Status (on master branch)
------------------------------------------------------------------------------------------------

Lang | SDK | Apex | Dataflow | Flink | Samza | Spark
--- | --- | --- | --- | --- | --- | ---
Go | [![Build Status](https://builds.apache.org/job/beam_PostCommit_Go/lastCompletedBuild/badge/icon)](https://builds.apache.org/job/beam_PostCommit_Go/lastCompletedBuild/) | --- | --- | [![Build Status](https://builds.apache.org/job/beam_PostCommit_Go_VR_Flink/lastCompletedBuild/badge/icon)](https://builds.apache.org/job/beam_PostCommit_Go_VR_Flink/lastCompletedBuild/) | --- | [![Build Status](https://builds.apache.org/job/beam_PostCommit_Go_VR_Spark/lastCompletedBuild/badge/icon)](https://builds.apache.org/job/beam_PostCommit_Go_VR_Spark/lastCompletedBuild/)
Java | [![Build Status](https://builds.apache.org/job/beam_PostCommit_Java/lastCompletedBuild/badge/icon)](https://builds.apache.org/job/beam_PostCommit_Java/lastCompletedBuild/) | [![Build Status](https://builds.apache.org/job/beam_PostCommit_Java_ValidatesRunner_Apex/lastCompletedBuild/badge/icon)](https://builds.apache.org/job/beam_PostCommit_Java_ValidatesRunner_Apex/lastCompletedBuild/) | [![Build Status](https://builds.apache.org/job/beam_PostCommit_Java_ValidatesRunner_Dataflow/lastCompletedBuild/badge/icon)](https://builds.apache.org/job/beam_PostCommit_Java_ValidatesRunner_Dataflow/lastCompletedBuild/)<br>[![Build Status](https://builds.apache.org/job/beam_PostCommit_Java_ValidatesRunner_Dataflow_Java11/lastCompletedBuild/badge/icon)](https://builds.apache.org/job/beam_PostCommit_Java_ValidatesRunner_Dataflow_Java11/lastCompletedBuild/) | [![Build Status](https://builds.apache.org/job/beam_PostCommit_Java_ValidatesRunner_Flink/lastCompletedBuild/badge/icon)](https://builds.apache.org/job/beam_PostCommit_Java_ValidatesRunner_Flink/lastCompletedBuild/)<br>[![Build Status](https://builds.apache.org/job/beam_PostCommit_Java_ValidatesRunner_Flink_Java11/lastCompletedBuild/badge/icon)](https://builds.apache.org/job/beam_PostCommit_Java_ValidatesRunner_Flink_Java11/lastCompletedBuild/)<br>[![Build Status](https://builds.apache.org/job/beam_PostCommit_Java_PVR_Flink_Batch/lastCompletedBuild/badge/icon)](https://builds.apache.org/job/beam_PostCommit_Java_PVR_Flink_Batch/lastCompletedBuild/)<br>[![Build Status](https://builds.apache.org/job/beam_PostCommit_Java_PVR_Flink_Streaming/lastCompletedBuild/badge/icon)](https://builds.apache.org/job/beam_PostCommit_Java_PVR_Flink_Streaming/lastCompletedBuild/) | [![Build Status](https://builds.apache.org/job/beam_PostCommit_Java_ValidatesRunner_Samza/lastCompletedBuild/badge/icon)](https://builds.apache.org/job/beam_PostCommit_Java_ValidatesRunner_Samza/lastCompletedBuild/) | [![Build Status](https://builds.apache.org/job/beam_PostCommit_Java_ValidatesRunner_Spark/lastCompletedBuild/badge/icon)](https://builds.apache.org/job/beam_PostCommit_Java_ValidatesRunner_Spark/lastCompletedBuild/)<br>[![Build Status](https://builds.apache.org/job/beam_PostCommit_Java_PVR_Spark_Batch/lastCompletedBuild/badge/icon)](https://builds.apache.org/job/beam_PostCommit_Java_PVR_Spark_Batch/lastCompletedBuild/)<br>[![Build Status](https://builds.apache.org/job/beam_PostCommit_Java_ValidatesRunner_SparkStructuredStreaming/lastCompletedBuild/badge/icon)](https://builds.apache.org/job/beam_PostCommit_Java_ValidatesRunner_SparkStructuredStreaming/lastCompletedBuild/)
Python | [![Build Status](https://builds.apache.org/job/beam_PostCommit_Python2/lastCompletedBuild/badge/icon)](https://builds.apache.org/job/beam_PostCommit_Python2/lastCompletedBuild/)<br>[![Build Status](https://builds.apache.org/job/beam_PostCommit_Python35/lastCompletedBuild/badge/icon)](https://builds.apache.org/job/beam_PostCommit_Python35/lastCompletedBuild/)<br>[![Build Status](https://builds.apache.org/job/beam_PostCommit_Python36/lastCompletedBuild/badge/icon)](https://builds.apache.org/job/beam_PostCommit_Python36/lastCompletedBuild/)<br>[![Build Status](https://builds.apache.org/job/beam_PostCommit_Python37/lastCompletedBuild/badge/icon)](https://builds.apache.org/job/beam_PostCommit_Python37/lastCompletedBuild/) | --- | [![Build Status](https://builds.apache.org/job/beam_PostCommit_Py_VR_Dataflow/lastCompletedBuild/badge/icon)](https://builds.apache.org/job/beam_PostCommit_Py_VR_Dataflow/lastCompletedBuild/)<br>[![Build Status](https://builds.apache.org/job/beam_PostCommit_Py_VR_Dataflow_V2/lastCompletedBuild/badge/icon)](https://builds.apache.org/job/beam_PostCommit_Py_VR_Dataflow_V2/lastCompletedBuild/)<br>[![Build Status](https://builds.apache.org/job/beam_PostCommit_Py_ValCont/lastCompletedBuild/badge/icon)](https://builds.apache.org/job/beam_PostCommit_Py_ValCont/lastCompletedBuild/) | [![Build Status](https://builds.apache.org/job/beam_PreCommit_Python2_PVR_Flink_Cron/lastCompletedBuild/badge/icon)](https://builds.apache.org/job/beam_PreCommit_Python2_PVR_Flink_Cron/lastCompletedBuild/)<br>[![Build Status](https://builds.apache.org/job/beam_PostCommit_Python35_VR_Flink/lastCompletedBuild/badge/icon)](https://builds.apache.org/job/beam_PostCommit_Python35_VR_Flink/lastCompletedBuild/) | --- | [![Build Status](https://builds.apache.org/job/beam_PostCommit_Python_VR_Spark/lastCompletedBuild/badge/icon)](https://builds.apache.org/job/beam_PostCommit_Python_VR_Spark/lastCompletedBuild/)
XLang | --- | --- | --- | [![Build Status](https://builds.apache.org/job/beam_PostCommit_XVR_Flink/lastCompletedBuild/badge/icon)](https://builds.apache.org/job/beam_PostCommit_XVR_Flink/lastCompletedBuild/) | --- | --- | [![Build Status](https://builds.apache.org/job/beam_PostCommit_XVR_Spark/lastCompletedBuild/badge/icon)](https://builds.apache.org/job/beam_PostCommit_XVR_Spark/lastCompletedBuild/)

Pre-Commit Tests Status (on master branch)
------------------------------------------------------------------------------------------------

--- |Java | Python | Go | Website
--- | --- | --- | --- | ---
Non-portable | [![Build Status](https://builds.apache.org/job/beam_PreCommit_Java_Cron/lastCompletedBuild/badge/icon)](https://builds.apache.org/job/beam_PreCommit_Java_Cron/lastCompletedBuild/) | [![Build Status](https://builds.apache.org/job/beam_PreCommit_Python_Cron/lastCompletedBuild/badge/icon)](https://builds.apache.org/job/beam_PreCommit_Python_Cron/lastCompletedBuild/)<br>[![Build Status](https://builds.apache.org/job/beam_PreCommit_PythonLint_Cron/lastCompletedBuild/badge/icon)](https://builds.apache.org/job/beam_PreCommit_PythonLint_Cron/lastCompletedBuild/) | [![Build Status](https://builds.apache.org/job/beam_PreCommit_Go_Cron/lastCompletedBuild/badge/icon)](https://builds.apache.org/job/beam_PreCommit_Go_Cron/lastCompletedBuild/) | [![Build Status](https://builds.apache.org/job/beam_PreCommit_Website_Cron/lastCompletedBuild/badge/icon)](https://builds.apache.org/job/beam_PreCommit_Website_Cron/lastCompletedBuild/) 
Portable | --- | [![Build Status](https://builds.apache.org/job/beam_PreCommit_Portable_Python_Cron/lastCompletedBuild/badge/icon)](https://builds.apache.org/job/beam_PreCommit_Portable_Python_Cron/lastCompletedBuild/) | --- | ---

See [.test-infra/jenkins/README](https://github.com/apache/beam/blob/master/.test-infra/jenkins/README.md) for trigger phrase, status and link of all Jenkins jobs.
",True,11975,https://api.github.com/repos/apache/beam/pulls/11975,https://github.com/apache/beam/pull/11975,closed,925,3,9,8,15,25,3,0,"[{'name': 'java'}, {'name': 'extensions'}, {'name': 'sql'}]",2020-06-10 21:46:28+00:00,2020-07-15 00:58:09+00:00,2949101.0,"34 days, 3:11:41","[{'comment_id': 439795902, 'comment_body': 'I am wondering if this transform can be reused? https://github.com/apache/beam/blob/master/sdks/java/extensions/sorter/src/main/java/org/apache/beam/sdk/extensions/sorter/SortValues.java', 'comment_created': datetime.datetime(2020, 6, 14, 6, 12, 21, tzinfo=datetime.timezone.utc), 'commenter': 'amaliujia', 'type': 'User'}, {'comment_id': 439795971, 'comment_body': 'It does not bad to start from this ParDo though. I posted that transform just for curiosity. Not required to use SortValues at this moment.', 'comment_created': datetime.datetime(2020, 6, 14, 6, 13, 49, tzinfo=datetime.timezone.utc), 'commenter': 'amaliujia', 'type': 'User'}, {'comment_id': 439796555, 'comment_body': ""This is nice to use schema's transforms."", 'comment_created': datetime.datetime(2020, 6, 14, 6, 25, tzinfo=datetime.timezone.utc), 'commenter': 'amaliujia', 'type': 'User'}, {'comment_id': 439796682, 'comment_body': ""Interesting. I didn't know that there is no aggregate calls in WindowRel.\r\n\r\nDo you know where those calls are defined?"", 'comment_created': datetime.datetime(2020, 6, 14, 6, 26, 56, tzinfo=datetime.timezone.utc), 'commenter': 'amaliujia', 'type': 'User'}, {'comment_id': 439796776, 'comment_body': 'Can you paste logical plan of this query in to comments? Just to help me better understand what Calcite produces at least on Logical plan level.', 'comment_created': datetime.datetime(2020, 6, 14, 6, 28, 8, tzinfo=datetime.timezone.utc), 'commenter': 'amaliujia', 'type': 'User'}, {'comment_id': 439799050, 'comment_body': 'O now I see. The calls are in `Group`.', 'comment_created': datetime.datetime(2020, 6, 14, 7, 5, 43, tzinfo=datetime.timezone.utc), 'commenter': 'amaliujia', 'type': 'User'}, {'comment_id': 442376683, 'comment_body': '`BeamCalcRel(expr#0..3=[{inputs}], item=[$t0], purchases=[$t2], category=[$t1], total_purchases=[$t3])\r\n  BeamWindowRel(window#0=[window(partition {1} order by [2] rows between UNBOUNDED PRECEDING and CURRENT ROW aggs [SUM($2)])])\r\n    BeamIOSourceRel(table=[[beam, PCOLLECTION]])`', 'comment_created': datetime.datetime(2020, 6, 18, 17, 7, 33, tzinfo=datetime.timezone.utc), 'commenter': 'jhnmora000', 'type': 'User'}, {'comment_id': 444547096, 'comment_body': 'Thanks. Support PartitionBy and OrderBy is huge!', 'comment_created': datetime.datetime(2020, 6, 23, 22, 39, 56, tzinfo=datetime.timezone.utc), 'commenter': 'amaliujia', 'type': 'User'}, {'comment_id': 444547328, 'comment_body': 'Add java doc for classes (java doc means comments starts with `/*` and ends with `*/`', 'comment_created': datetime.datetime(2020, 6, 23, 22, 40, 39, tzinfo=datetime.timezone.utc), 'commenter': 'amaliujia', 'type': 'User'}, {'comment_id': 444547705, 'comment_body': 'Add a test that includes DESC for ORDER BY? ', 'comment_created': datetime.datetime(2020, 6, 23, 22, 41, 46, tzinfo=datetime.timezone.utc), 'commenter': 'amaliujia', 'type': 'User'}, {'comment_id': 444548154, 'comment_body': 'Add a test or add a checkArgument to disable (either one works for me) for NULL last or NULL first in ORDER BY.\r\n\r\nFor NULL handling, depends on you, you can leave it for future PRs.\r\n', 'comment_created': datetime.datetime(2020, 6, 23, 22, 43, 7, tzinfo=datetime.timezone.utc), 'commenter': 'amaliujia', 'type': 'User'}, {'comment_id': 444549317, 'comment_body': 'Better to use `checkArgument` to stop execution when you are seeing an unsupported case.\r\n\r\nSee: https://www.baeldung.com/guava-preconditions', 'comment_created': datetime.datetime(2020, 6, 23, 22, 46, 29, tzinfo=datetime.timezone.utc), 'commenter': 'amaliujia', 'type': 'User'}, {'comment_id': 444549355, 'comment_body': 'Same', 'comment_created': datetime.datetime(2020, 6, 23, 22, 46, 38, tzinfo=datetime.timezone.utc), 'commenter': 'amaliujia', 'type': 'User'}, {'comment_id': 444549399, 'comment_body': 'Same', 'comment_created': datetime.datetime(2020, 6, 23, 22, 46, 45, tzinfo=datetime.timezone.utc), 'commenter': 'amaliujia', 'type': 'User'}, {'comment_id': 444549427, 'comment_body': 'Same', 'comment_created': datetime.datetime(2020, 6, 23, 22, 46, 49, tzinfo=datetime.timezone.utc), 'commenter': 'amaliujia', 'type': 'User'}, {'comment_id': 444549752, 'comment_body': 'Based on your implementation below, it will be really awesome that you add what is supported or what are constrains. Then you can gradually update this java doc once you add new features. ', 'comment_created': datetime.datetime(2020, 6, 23, 22, 47, 46, tzinfo=datetime.timezone.utc), 'commenter': 'amaliujia', 'type': 'User'}, {'comment_id': 444550097, 'comment_body': 'Even though you will stop executions on some unsupported cases, I think it is still ok to keep this class definition (e.g. no need to remove those unused field).', 'comment_created': datetime.datetime(2020, 6, 23, 22, 48, 52, tzinfo=datetime.timezone.utc), 'commenter': 'amaliujia', 'type': 'User'}, {'comment_id': 444550293, 'comment_body': 'Add a function java doc to describe your choice of cost and why.', 'comment_created': datetime.datetime(2020, 6, 23, 22, 49, 29, tzinfo=datetime.timezone.utc), 'commenter': 'amaliujia', 'type': 'User'}, {'comment_id': 444552391, 'comment_body': 'The mock key generation here could be simplified by, something like\r\n\r\n```\r\n              windowedStream\r\n                  .apply(WithKeys.of(""dummy""))\r\n                  .apply(GroupByKey.create())\r\n```\r\n\r\nnote that maybe do not for many schema manipulation.  ', 'comment_created': datetime.datetime(2020, 6, 23, 22, 55, 48, tzinfo=datetime.timezone.utc), 'commenter': 'amaliujia', 'type': 'User'}, {'comment_id': 444552876, 'comment_body': 'Can you skip sort transform when there is no order by? Also leave a comment to say migrate to SortValues transform in the future.', 'comment_created': datetime.datetime(2020, 6, 23, 22, 57, 24, tzinfo=datetime.timezone.utc), 'commenter': 'amaliujia', 'type': 'User'}, {'comment_id': 444553117, 'comment_body': 'Add a comment to explain what this piece of code is doing. Basically it stops converting in the OVER clause case.', 'comment_created': datetime.datetime(2020, 6, 23, 22, 58, 6, tzinfo=datetime.timezone.utc), 'commenter': 'amaliujia', 'type': 'User'}, {'comment_id': 444553184, 'comment_body': 'Class java doc will be very helpful.', 'comment_created': datetime.datetime(2020, 6, 23, 22, 58, 21, tzinfo=datetime.timezone.utc), 'commenter': 'amaliujia', 'type': 'User'}, {'comment_id': 445107329, 'comment_body': 'In fact, if there is no order by but only partition by, combine per key will be the best API because backend can do combiner lift optimizations, which works as follow:\r\n\r\nKV -> GroupByKey -> KV -> Combine\r\ncan be optimized as\r\nKV -> local combine -> K Combined V -> GroupByKey -> Combine all combined Vs.\r\n\r\nSo basically there could be a pre-combine before shuffle (GroupByKey), and after that each worker will only need to combine those pre-combined value (because of associativity rule).  This optimization will reduce lots of data through shuffle.\r\n\r\nI think this can be left for a future work. Please log a JIRA to document this idea.', 'comment_created': datetime.datetime(2020, 6, 24, 19, 1, 21, tzinfo=datetime.timezone.utc), 'commenter': 'amaliujia', 'type': 'User'}, {'comment_id': 449962950, 'comment_body': 'I added a comment in the JIRA issue of the project [`issue`](https://issues.apache.org/jira/browse/BEAM-9198?focusedCommentId=17151728&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-17151728)', 'comment_created': datetime.datetime(2020, 7, 6, 3, 8, 43, tzinfo=datetime.timezone.utc), 'commenter': 'jhnmora000', 'type': 'User'}, {'comment_id': 453159661, 'comment_body': 'Can you remove the ""Experiment"" from class? I am going to merge this PR so it won\'t be experiment anymore.', 'comment_created': datetime.datetime(2020, 7, 11, 5, 44, 58, tzinfo=datetime.timezone.utc), 'commenter': 'amaliujia', 'type': 'User'}]","[{'commit_sha': 'cda6813683c513ec4c3cdcee3299ecdcd683373f', 'committer_username': 'jhnmora000', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 3, 23, 4, 38, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '548fe5e0466e2e929a5ab323ba4e6ad23fea864f', 'committer_username': 'amaliujia', 'committer_name': 'Rui Wang', 'committer_email': None, 'commit_date': datetime.datetime(2012, 7, 8, 13, 34, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4881b5983042526600dbbb9802ff0e968a0b469', 'committer_username': 'jhnmora000', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 3, 23, 4, 38, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6115948f2e67556c0c7f1b6e030f09a7f015c27f', 'committer_username': 'jhnmora000', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 3, 23, 4, 38, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1866d371b400a39ae97683984818f1e9d2c82ff7', 'committer_username': 'jhnmora000', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 3, 23, 4, 38, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b2c7334986a7e03c50603041422df460a75f3bab', 'committer_username': 'jhnmora000', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 3, 23, 4, 38, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a29d54818c0f2fbb2db2d3c6e925f14685e4d051', 'committer_username': 'jhnmora000', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 3, 23, 4, 38, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e536782d6103843dfe65cc3e3ced7c81b53129f', 'committer_username': 'jhnmora000', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 3, 23, 4, 38, 26, tzinfo=datetime.timezone.utc)}]",,48849676,,User,,5,,0,2

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
50904245,beam,apache/beam,Java,4207,7738,262,1678,42996,4444,147,78,"[{'id': 468393441, 'number': 12595, 'closed': datetime.datetime(2020, 12, 13, 1, 58, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 16, 3, 59, 15, tzinfo=datetime.timezone.utc), 'time_taken': 10274346.0, 'time_delta': '118 days, 21:59:06', 'additions': 602, 'deletions': 9, 'state': 'closed'}, {'id': 456695586, 'number': 12375, 'closed': datetime.datetime(2020, 7, 26, 19, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 26, 3, 26, 10, tzinfo=datetime.timezone.utc), 'time_taken': 59030.0, 'time_delta': '16:23:50', 'additions': 318, 'deletions': 11, 'state': 'closed'}, {'id': 453044450, 'number': 12314, 'closed': datetime.datetime(2020, 10, 4, 2, 35, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 20, 4, 42, 34, tzinfo=datetime.timezone.utc), 'time_taken': 6558766.0, 'time_delta': '75 days, 21:52:46', 'additions': 324, 'deletions': 11, 'state': 'closed'}, {'id': 452997171, 'number': 12313, 'closed': datetime.datetime(2020, 7, 22, 5, 48, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 20, 3, 19, 51, tzinfo=datetime.timezone.utc), 'time_taken': 181693.0, 'time_delta': '2 days, 2:28:13', 'additions': 179, 'deletions': 2, 'state': 'closed'}, {'id': 432719855, 'number': 11975, 'closed': datetime.datetime(2020, 7, 15, 0, 58, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 10, 21, 46, 28, tzinfo=datetime.timezone.utc), 'time_taken': 2949101.0, 'time_delta': '34 days, 3:11:41', 'additions': 925, 'deletions': 3, 'state': 'closed'}, {'id': 424226184, 'number': 11845, 'closed': datetime.datetime(2020, 5, 28, 21, 44, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 28, 3, 30, 19, tzinfo=datetime.timezone.utc), 'time_taken': 65651.0, 'time_delta': '18:14:11', 'additions': 192, 'deletions': 0, 'state': 'closed'}, {'id': 400427750, 'number': 11333, 'closed': datetime.datetime(2020, 5, 4, 18, 32, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 7, 18, 21, 44, tzinfo=datetime.timezone.utc), 'time_taken': 2333434.0, 'time_delta': '27 days, 0:10:34', 'additions': 124, 'deletions': 1, 'state': 'closed'}]"
