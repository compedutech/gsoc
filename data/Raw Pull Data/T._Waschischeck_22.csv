pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
431845537,[Feature] Concatenate option for IDFileConverter,"- added a flag which allows the user to convert the top hits to one fasta entry

- changed the way the fasta output is written

- added TOPP tests for idXML to fasta conversion

This feature is needed for the database suitability metric.",True,4781,https://api.github.com/repos/OpenMS/OpenMS/pulls/4781,https://github.com/OpenMS/OpenMS/pull/4781,closed,124,15,9,11,1,17,0,0,[],2020-06-09 14:42:24+00:00,2020-06-12 14:53:14+00:00,259850.0,"3 days, 0:10:50","[{'comment_id': 437634023, 'comment_body': 'Maybe condense the information a bit and be more precise:\r\n - `Setting this flag will ...` is just additional payload.... remove.\r\n - replace `entry` with more specific `protein sequence` and `protein`\r\n\r\n??', 'comment_created': datetime.datetime(2020, 6, 9, 18, 28, 20, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 437635136, 'comment_body': '[KP]|P sites are created in any case. The question is just how this affects the preceeding peptides if a peptide starts with P.\r\n', 'comment_created': datetime.datetime(2020, 6, 9, 18, 30, 24, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 437635354, 'comment_body': 'separately', 'comment_created': datetime.datetime(2020, 6, 9, 18, 30, 46, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 437635604, 'comment_body': '`String all_p;`', 'comment_created': datetime.datetime(2020, 6, 9, 18, 31, 12, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 437639628, 'comment_body': ""- do you really want the modified peptide sequence, not the unmodified one?\r\n- calling `toString()` is expensive. Compute it once and use it for comparing to 'P'.\r\n- you are missing an `else`..."", 'comment_created': datetime.datetime(2020, 6, 9, 18, 38, 32, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 437639914, 'comment_body': 'use a range-based for loop for brevity', 'comment_created': datetime.datetime(2020, 6, 9, 18, 39, 4, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 437641735, 'comment_body': 'writing out all hits when in non-concat mode is a bit inconsistent.\r\nDo we actually want this?\r\nIf yes, should there be an option of how many hits to write (default=1) for both modes?', 'comment_created': datetime.datetime(2020, 6, 9, 18, 42, 10, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 437963968, 'comment_body': ""I'm not sure if we want this. This is the way it is done currently, but I'll happily add an input option for this."", 'comment_created': datetime.datetime(2020, 6, 10, 8, 48, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Waschi97', 'type': 'User'}, {'comment_id': 437972295, 'comment_body': 'I think it would be good to have this option. Yes, not necessarily for this project, but in general.', 'comment_created': datetime.datetime(2020, 6, 10, 9, 1, 17, tzinfo=datetime.timezone.utc), 'commenter': 'jpfeuffer', 'type': 'User'}, {'comment_id': 438856159, 'comment_body': 'Just make it <= 0.\r\nAvoids extra code and exporting 0 entries is nothing anyone would ever want', 'comment_created': datetime.datetime(2020, 6, 11, 15, 8, 4, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 438856603, 'comment_body': 'Very thorough. Nice', 'comment_created': datetime.datetime(2020, 6, 11, 15, 8, 44, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 438857020, 'comment_body': 'A value of zero or less', 'comment_created': datetime.datetime(2020, 6, 11, 15, 9, 24, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 438858300, 'comment_body': 'Seq is used in all cases. Move before if clause?', 'comment_created': datetime.datetime(2020, 6, 11, 15, 11, 15, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 438861054, 'comment_body': 'Maybe take this description as ´const char* CONCAT_PEPTIDE = ""concatenated peptide"";´ which you place into the library and use from all places you need it (see Constants.h?) ', 'comment_created': datetime.datetime(2020, 6, 11, 15, 15, 10, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 439303933, 'comment_body': ""Your thought is that this can later be used again for searching for those peptides in the db suitability tool, right?\r\nThis wouldn't work though, because the description is lost during the peptide identification search, isn't it?\r\nOr am I missing something here?"", 'comment_created': datetime.datetime(2020, 6, 12, 9, 13, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Waschi97', 'type': 'User'}, {'comment_id': 439306747, 'comment_body': 'very good thinking! :)\r\nprepend it to the identifier then?', 'comment_created': datetime.datetime(2020, 6, 12, 9, 18, 56, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 439307053, 'comment_body': '(omit spaces and other funny stuff, use underscores if required)', 'comment_created': datetime.datetime(2020, 6, 12, 9, 19, 30, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}]","[{'commit_sha': '09ea557297a717138991bedeecaf05b702b3cfe5', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84b5124a2724c9b9f280471a1f8d07b1b964dcba', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d09ab133d24130fb7ad544c1d0464034f3cd90e', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec355c2fe3bd46f14f5a42d2ac6ea6c71519a2c6', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c1f284b4d67bddc17e710293c59f745d3dd5c24', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '065868df33e12b995690cbd04cddb457cda14d70', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50f6a03c7ad68d4f5fd14493446841c6583eb440', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a2bee04f3635a75205742b3d36886fcc2fbfa43a', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8503e3d392a8dd9fcc9a8506f7185193a64341e3', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15e396177490e3b9d86e8d432d6db3b9da89b20c', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69bb6ae094540e4c50b8d5190ef99436433c4d4b', 'committer_username': 'jpfeuffer', 'committer_name': 'Julianus Pfeuffer', 'committer_email': 'julianus.pfeuffer@pfizer.com', 'commit_date': datetime.datetime(2014, 7, 8, 12, 37, 39, tzinfo=datetime.timezone.utc)}]",TomW,39636547,,User,,5,,0,0
437768956,Database Suitability TOPP Tool,"- db suitability score, ms2-id-rate & tsv output

- test for the new tool",True,4791,https://api.github.com/repos/OpenMS/OpenMS/pulls/4791,https://github.com/OpenMS/OpenMS/pull/4791,closed,231641,30972,15,16,4,46,0,0,[],2020-06-22 08:21:08+00:00,2020-07-09 13:26:54+00:00,1487146.0,"17 days, 5:05:46","[{'comment_id': 443403801, 'comment_body': 'missing `@endcond` at the very end. See other TOPP tools', 'comment_created': datetime.datetime(2020, 6, 22, 8, 41, 2, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 443404214, 'comment_body': 'you can add a citation and cite the original paper.\r\nMaybe also do this in the class description above.', 'comment_created': datetime.datetime(2020, 6, 22, 8, 41, 45, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 443404973, 'comment_body': 'is this the mzML used for peptide id? :)', 'comment_created': datetime.datetime(2020, 6, 22, 8, 43, 2, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 443405433, 'comment_body': 'is this the combined DBEngine + DeNovoEngine search?\r\nWhat Engines are supported? (also add to main docu)', 'comment_created': datetime.datetime(2020, 6, 22, 8, 43, 55, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 443406325, 'comment_body': ""What does this contain. i can see it's `tsv` format from the specs. Provide some useful information here.\r\nE.g what are the column names?"", 'comment_created': datetime.datetime(2020, 6, 22, 8, 45, 27, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 443407647, 'comment_body': 'not sure what the description means...\r\nand fractions in OpenMS are usually given as 0.0 - 1.0. (set a valid range to enforce this)', 'comment_created': datetime.datetime(2020, 6, 22, 8, 47, 47, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 443408597, 'comment_body': 'what is re-ranking? Short description here and longer description in the docs.\r\ntypo in `yeild`, but `underestimate quality` is probably more accurate?', 'comment_created': datetime.datetime(2020, 6, 22, 8, 49, 30, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 443409488, 'comment_body': 'not what you wanted probably.\r\n`setMSLevels`?', 'comment_created': datetime.datetime(2020, 6, 22, 8, 51, 3, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 443410825, 'comment_body': 'no copy, take by const ref. Also for other assignments below', 'comment_created': datetime.datetime(2020, 6, 22, 8, 53, 13, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 443411279, 'comment_body': 'the metavalue might not exist... and this will crash hard', 'comment_created': datetime.datetime(2020, 6, 22, 8, 54, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 443411914, 'comment_body': 'add a header...', 'comment_created': datetime.datetime(2020, 6, 22, 8, 55, 6, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 443412329, 'comment_body': 'do not use `endl` unless you want to flush to console/disk at this very moment. Otherwise its just slow', 'comment_created': datetime.datetime(2020, 6, 22, 8, 55, 46, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 443412691, 'comment_body': 'FDR needs to run...', 'comment_created': datetime.datetime(2020, 6, 22, 8, 56, 19, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 443425418, 'comment_body': 'using `-1` for all of these is a bit dangerous on the off-chance that a score is -1 for some (unknown) search engine.\r\nYou could switch to Infitinity or some other extreme (numeric_limits<double>::max()) ....\r\n', 'comment_created': datetime.datetime(2020, 6, 22, 9, 18, 30, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 443425646, 'comment_body': 'add documentation to all functions', 'comment_created': datetime.datetime(2020, 6, 22, 9, 18, 48, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 443427521, 'comment_body': 'partial_sort is enough?', 'comment_created': datetime.datetime(2020, 6, 22, 9, 22, 7, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 443429059, 'comment_body': 'simply sort the first `novor_fract`*N of N positions (or `(1-novor_fract)*N in reverse order to save on sorting effort). And then grab the diff at that very position.\r\nNo need for the two loops below!?', 'comment_created': datetime.datetime(2020, 6, 22, 9, 24, 44, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 443433331, 'comment_body': 'deal with DB-case here first, and omit the large if-block for deNovo...\r\nless indentations for the reader', 'comment_created': datetime.datetime(2020, 6, 22, 9, 32, 5, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 443433668, 'comment_body': 'technically, the hit could be shared between DB and deNovo...\r\nAnd should then be counted as DB, right?', 'comment_created': datetime.datetime(2020, 6, 22, 9, 32, 41, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 443434485, 'comment_body': 'should we then just ignore decoy hits and look for the next target? (except if its the top hit, as above. then we skip over the whole PSM)', 'comment_created': datetime.datetime(2020, 6, 22, 9, 34, 7, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 443435463, 'comment_body': 'this code is duplicated. Make it a function or a class, which gets passed a PeptideHit (or even better the PepID) and computes everything you want to know.', 'comment_created': datetime.datetime(2020, 6, 22, 9, 35, 49, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 443436802, 'comment_body': '`Writing`', 'comment_created': datetime.datetime(2020, 6, 22, 9, 38, 17, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 443437953, 'comment_body': 'not the classical way to interpret ID rate. Mention that this only counts deNovo IDs', 'comment_created': datetime.datetime(2020, 6, 22, 9, 40, 18, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 443439115, 'comment_body': 'currently, its not `only`. But if you fix the check above that should be fine.', 'comment_created': datetime.datetime(2020, 6, 22, 9, 42, 25, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 443440757, 'comment_body': 'Not for this meta value though, right? PeptideIndexer should be enough for that.\r\nIf you need to ensure that FDR ran, you need to check for a q-value/FDR score (check IDScoreSwitcher findScoreType functionality).', 'comment_created': datetime.datetime(2020, 6, 22, 9, 45, 24, tzinfo=datetime.timezone.utc), 'commenter': 'jpfeuffer', 'type': 'User'}, {'comment_id': 443441761, 'comment_body': 'maybe add the total number of identified MS2 spectra, e.g. `123 / 456 (30%) of all hits were found using the database.`\r\nsame for deNovo', 'comment_created': datetime.datetime(2020, 6, 22, 9, 47, 14, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 443442216, 'comment_body': '`Database suitability (score in [0, 1]): ...` ??', 'comment_created': datetime.datetime(2020, 6, 22, 9, 48, 1, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 443442795, 'comment_body': 'name number of total MS2 spectra and of identified MS2 spectra (deNovo + DB)', 'comment_created': datetime.datetime(2020, 6, 22, 9, 49, 2, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 443447240, 'comment_body': ""yes and this should happen here right?\r\n`is_novo` will only stay 'true' as long as each accessions contains `CONCAT_PEPTIDE` and if this isn't found in at least one accession the hit will be counted as DB\r\n"", 'comment_created': datetime.datetime(2020, 6, 22, 9, 56, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Waschi97', 'type': 'User'}, {'comment_id': 443447412, 'comment_body': 'add the tool to the doxygen page here:\r\nhttps://abibuilder.informatik.uni-tuebingen.de/archive/openms/Documentation/nightly/html/TOPP_documentation.html\r\n\r\nmaybe a new section `Quality Control` is suitable now, since we can also move the QC tool there (currently at `Misc`).\r\n', 'comment_created': datetime.datetime(2020, 6, 22, 9, 57, 2, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 443449570, 'comment_body': 'ahh... right. my bad.', 'comment_created': datetime.datetime(2020, 6, 22, 10, 0, 48, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 443452055, 'comment_body': ""My thought process was, if the first hit is a target-novo hit and the second one is a decoy hit it wouldn't make sense to consider re-ranking even if the third hit would be a target-db hit. But technically those could of cause still score close to each other..."", 'comment_created': datetime.datetime(2020, 6, 22, 10, 5, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Waschi97', 'type': 'User'}, {'comment_id': 443453926, 'comment_body': ""While calculating the decoy cut-off all hits are checked to have this meta-value. I thought it wouldn't be necessary to check for existence, but I guess it would be safer to still check.."", 'comment_created': datetime.datetime(2020, 6, 22, 10, 8, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Waschi97', 'type': 'User'}, {'comment_id': 443459195, 'comment_body': 'Another thing to consider: peptides can (rarely) map to both target and decoy proteins yielding ""target+decoy"" (I think) for the meta-value. How would you handle those? Most of the time handling them as targets is fine but you should keep it in mind.', 'comment_created': datetime.datetime(2020, 6, 22, 10, 19, 2, tzinfo=datetime.timezone.utc), 'commenter': 'jpfeuffer', 'type': 'User'}, {'comment_id': 444775376, 'comment_body': 'You can actually specify the citation in the constructor, such that it is correctly formatted and printed when running it on the command line.', 'comment_created': datetime.datetime(2020, 6, 24, 9, 45, 57, tzinfo=datetime.timezone.utc), 'commenter': 'jpfeuffer', 'type': 'User'}, {'comment_id': 444776092, 'comment_body': 'Hm as I mentioned. Here it probably would be better to do something like:\r\nstartsWith(""target"") in case you have a ""target+decoy"" peptide.', 'comment_created': datetime.datetime(2020, 6, 24, 9, 47, 12, tzinfo=datetime.timezone.utc), 'commenter': 'jpfeuffer', 'type': 'User'}, {'comment_id': 444776913, 'comment_body': 'Yes, this will come in the next commit! :)', 'comment_created': datetime.datetime(2020, 6, 24, 9, 48, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Waschi97', 'type': 'User'}, {'comment_id': 444781631, 'comment_body': '(as a separate parameter to the constructor, I mean)', 'comment_created': datetime.datetime(2020, 6, 24, 9, 56, 27, tzinfo=datetime.timezone.utc), 'commenter': 'jpfeuffer', 'type': 'User'}, {'comment_id': 444842755, 'comment_body': '`size_t` or `Size` is the ""native"" type of `exp.size()`', 'comment_created': datetime.datetime(2020, 6, 24, 12, 0, 12, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 444873735, 'comment_body': 'value of cut_off is undefined .. and might never be defined...', 'comment_created': datetime.datetime(2020, 6, 24, 12, 58, 36, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 444874193, 'comment_body': 'no need for else ...{} if using continue above', 'comment_created': datetime.datetime(2020, 6, 24, 12, 59, 24, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 444875147, 'comment_body': 'break afterwards? otherwise you might compare 1st vs 3rd', 'comment_created': datetime.datetime(2020, 6, 24, 13, 0, 57, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 444891628, 'comment_body': 'can be `const set<String> accesssions = `\r\njust to avoid the copy if `hit.extractProteinAccessionsSet()` returns an l-value (in the future)', 'comment_created': datetime.datetime(2020, 6, 24, 13, 26, 43, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 444892589, 'comment_body': 'also for all the other UInt64 occurrences', 'comment_created': datetime.datetime(2020, 6, 24, 13, 28, 3, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 449056218, 'comment_body': 'Hmm.. I think it would be better to leave it blank or configure it with the folder of \\@DOXYGEN_DOT_EXECUTABLE\\@', 'comment_created': datetime.datetime(2020, 7, 2, 14, 47, 26, tzinfo=datetime.timezone.utc), 'commenter': 'jpfeuffer', 'type': 'User'}, {'comment_id': 449060182, 'comment_body': 'whoops - yes of cause!\r\n', 'comment_created': datetime.datetime(2020, 7, 2, 14, 53, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Waschi97', 'type': 'User'}]","[{'commit_sha': 'f81b52eca9d004700edb843933c5ae53c9cc4f79', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '322b5e1f37414f920b570eadd27bcc1886ee4f1a', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dbe2e71784fc595c8363aa4dfba3d4c2199869f0', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '21c80814081ba83db978387dd373ecf9e1117e28', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53dcb0773fb3c62efd6533cebae35c980133878b', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '98a65a77ca4940e79eee8247aa7ef1ec359e9012', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f71b268fc9ff56f9ee2ed81334e28e3780bc6e93', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5558f42d4813167f229f8b9515a6c0ab5efc71a2', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b4184f4fed8b90163b2974282523ddd9c6bc101', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '291fe98fdce7a0be14dcb1e1a3d4bb08200745c0', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5460f4b84d1e9ee46f70226bfd55a74651b5eb5', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '767944c4d0b03add770fb852fdd149d6e3849cea', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ebafdd6463acdff3abfac831216bd91450f6223', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d92e9cf128a8e5b7be6593905863563fb9eecc8', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa86f1faedc8e808edbdd3cfc0550d382626c4c7', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e7455e41bf55252800813b49d86ec76397d076e', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}]",TomW,39636547,,User,,5,,0,0
449494257,FDR filtering in DBSuitability Tool,"- added FDR input option

- tool now only counts hits with q-value less than or equal to given FDR

- changed test output files accordingly",True,4814,https://api.github.com/repos/OpenMS/OpenMS/pulls/4814,https://github.com/OpenMS/OpenMS/pull/4814,closed,82,28,4,3,1,10,0,0,[],2020-07-15 13:50:07+00:00,2020-07-16 22:17:08+00:00,116821.0,"1 day, 8:27:01","[{'comment_id': 455105441, 'comment_body': 'I would probably call it scoreBetterThanFDR_ since the score is actually lower.', 'comment_created': datetime.datetime(2020, 7, 15, 14, 41, 42, tzinfo=datetime.timezone.utc), 'commenter': 'jpfeuffer', 'type': 'User'}, {'comment_id': 455118640, 'comment_body': 'The new statements and maybe some old stuff assumes that the hits are sorted. I wonder if we should add a Precondition or make sure that this is actually the case.', 'comment_created': datetime.datetime(2020, 7, 15, 14, 56, 39, tzinfo=datetime.timezone.utc), 'commenter': 'jpfeuffer', 'type': 'User'}, {'comment_id': 455119103, 'comment_body': 'Only 8 hits are filtered at a 1% FDR?', 'comment_created': datetime.datetime(2020, 7, 15, 14, 57, 19, tzinfo=datetime.timezone.utc), 'commenter': 'jpfeuffer', 'type': 'User'}, {'comment_id': 455146035, 'comment_body': 'Yeah.. I think I changed the name but forgot to change the return values. Since I use this to check if a hit should be skipped, I thought `scoreHigherThanFDR_` would be the better name. But you are right: true and false should than be the other way around.', 'comment_created': datetime.datetime(2020, 7, 15, 15, 35, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Waschi97', 'type': 'User'}, {'comment_id': 455147714, 'comment_body': 'Yes, this would probably be a good idea.\r\nIs there a convenient way of doing this? Of cause I can just check while calculating the decoy cut-off..', 'comment_created': datetime.datetime(2020, 7, 15, 15, 38, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Waschi97', 'type': 'User'}, {'comment_id': 455149549, 'comment_body': 'Actually because the return values of `scoreHigherThanFDR_` are the wrong way around, there will only be 8 hits left. Which makes me want to add a seperate test for the FDR parameter..', 'comment_created': datetime.datetime(2020, 7, 15, 15, 41, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Waschi97', 'type': 'User'}, {'comment_id': 455160831, 'comment_body': 'Hm yes or just change the FDR parameter for the tests.', 'comment_created': datetime.datetime(2020, 7, 15, 15, 59, 47, tzinfo=datetime.timezone.utc), 'commenter': 'jpfeuffer', 'type': 'User'}, {'comment_id': 455161433, 'comment_body': 'I think a hits.sort() before you do anything on the hits should be fine. Not too much overhead.', 'comment_created': datetime.datetime(2020, 7, 15, 16, 0, 46, tzinfo=datetime.timezone.utc), 'commenter': 'jpfeuffer', 'type': 'User'}, {'comment_id': 455653959, 'comment_body': 'Ah yes you want to sort by q-value.. I think the ranking should be the same with the normal score. Then you can use pep_id.sort(). Which is more concise and a bit faster (since it does not access meta values). But yes, maybe this is a bit safer. Up to you since it is probably not a bottleneck.', 'comment_created': datetime.datetime(2020, 7, 16, 9, 31, 41, tzinfo=datetime.timezone.utc), 'commenter': 'jpfeuffer', 'type': 'User'}, {'comment_id': 455673782, 'comment_body': ""While the ranking should be the same for the score from which the q-value was calculated, I'm not sure that this is necessarily the case for any other score. That's why I decided to make sure the sorting is done by q-value."", 'comment_created': datetime.datetime(2020, 7, 16, 10, 4, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Waschi97', 'type': 'User'}]","[{'commit_sha': '5a26db72aa841ba6b84bd06e115b314a2e70c34d', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67fe1d0f19290e215f64d372b347a85e6625c6a0', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ee2837e248937c3dd1d9ea4667db6a999158f2f', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}]",TomW,39636547,,User,,5,,0,0
464059678,DatabaseSuitability functions exported into the library,"- Added a new class `DBSuitability` which can be used to calculate database suitability.

- This class now also calculates q-values by itself.

- Added a second compute function to `Ms2IdentificationRate`, which works with a vector of PeptideIdentifications.
-> Also needed to add some new member functions to avoid code duplication.

- Changed the DatabaseSuitability TOPPTool to use these classes

- also in `Ms2IdentificationRate`: Changed the name of the parameter `no_fdr` to `no_index` since the metric doesn't need a q-value but target/decoy annotation. Therefore I also changed the name of this parameter in `QualityControl`.


- Test for new `DBSuitability` class

- Test the new compute function in `Ms2IdentificationRate`, change old tests to work with some of the changes

- Change TOPP docu of `DatabaseSuitability`",True,4866,https://api.github.com/repos/OpenMS/OpenMS/pulls/4866,https://github.com/OpenMS/OpenMS/pull/4866,closed,20308,25787,14,35,14,82,0,0,[],2020-08-06 14:21:11+00:00,2020-08-24 19:54:08+00:00,1575177.0,"18 days, 5:32:57","[{'comment_id': 467022050, 'comment_body': 'when referring to parameters, just `@p ...` to get proper highlighting, e.g. `@p ....`\r\nbut here, you can go classical\r\n```\r\n@param id ...\r\n@param counter ...\r\n``` \r\nto make it a bit more structured', 'comment_created': datetime.datetime(2020, 8, 7, 12, 55, 22, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 467024899, 'comment_body': 'the interface is a bit... complicated?!\r\nhow about `static bool isTargetPeptide(PepID, count_unmatched)`\r\ni.e. use the return value as counter and go\r\n`counter += isTargetPeptide(...)` in calling code?', 'comment_created': datetime.datetime(2020, 8, 7, 13, 0, 37, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 467025195, 'comment_body': 'document that you are only looking at the first hit....', 'comment_created': datetime.datetime(2020, 8, 7, 13, 1, 12, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 467026093, 'comment_body': 'all these are counts right?\r\nmaybe `_count` as suffix?', 'comment_created': datetime.datetime(2020, 8, 7, 13, 2, 59, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 467026632, 'comment_body': 'rename to `assume_all_target`?', 'comment_created': datetime.datetime(2020, 8, 7, 13, 4, 2, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 467026824, 'comment_body': 'rename?', 'comment_created': datetime.datetime(2020, 8, 7, 13, 4, 26, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 467070298, 'comment_body': 'replace tabs with spaces', 'comment_created': datetime.datetime(2020, 8, 7, 14, 18, 56, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 467070611, 'comment_body': 'return by `const&`', 'comment_created': datetime.datetime(2020, 8, 7, 14, 19, 25, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 467078278, 'comment_body': 'using an iterator here is dangerous, since you do not know if its valid after the sorting (not sure if this is garanteed by the std.\r\nBetter just compute the index and do `begin() + index`.', 'comment_created': datetime.datetime(2020, 8, 7, 14, 31, 38, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 467078679, 'comment_body': 'even better=faster should be https://en.cppreference.com/w/cpp/algorithm/nth_element.\r\n', 'comment_created': datetime.datetime(2020, 8, 7, 14, 32, 17, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 467079094, 'comment_body': 'double check that percentile is in the range [0,1]', 'comment_created': datetime.datetime(2020, 8, 7, 14, 32, 58, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 467079482, 'comment_body': 'and then check that the index is less than `diffs.size()` (segfaults otherwise)', 'comment_created': datetime.datetime(2020, 8, 7, 14, 33, 39, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 467079997, 'comment_body': 'use `diffs[index]` to avoid using an (invalid) iterator', 'comment_created': datetime.datetime(2020, 8, 7, 14, 34, 33, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 467080624, 'comment_body': 'taking by const& does not hurt (and might give speed if a non-temporary is returned one day)...', 'comment_created': datetime.datetime(2020, 8, 7, 14, 35, 35, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 467093406, 'comment_body': '`{ ""true"", ""false"" }`', 'comment_created': datetime.datetime(2020, 8, 7, 14, 56, 25, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 467094444, 'comment_body': '`[optional] FDR is only applied if input has not undergone FDR`', 'comment_created': datetime.datetime(2020, 8, 7, 14, 58, 11, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 467095181, 'comment_body': 'push back a result here, and work on a reference to the last item in the vector.\r\nThe default values should reflect that nothing could be computed', 'comment_created': datetime.datetime(2020, 8, 7, 14, 59, 29, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 467095618, 'comment_body': '.. because then you can simply leave the function here \r\n`if (pep_ids.empty) return;` to avoid a segfault when checking the first element', 'comment_created': datetime.datetime(2020, 8, 7, 15, 0, 9, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 467097628, 'comment_body': '`pep_ids.sort()` and be done', 'comment_created': datetime.datetime(2020, 8, 7, 15, 3, 40, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 467103613, 'comment_body': 'FDR is forbidden', 'comment_created': datetime.datetime(2020, 8, 7, 15, 14, 19, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 468471210, 'comment_body': 'Maybe add `Preliminary tests have shown that DB suitability is rather stable across common FDR thresholds from 0-5%).` ?', 'comment_created': datetime.datetime(2020, 8, 11, 10, 9, 19, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 468472421, 'comment_body': 'dangerous.\r\nCommonly, one would pass by copy and document that this function needs to change the input.\r\nAdvanced users can then `std::move()` the argument into the function to avoid the copy (but loose their handle on the data).', 'comment_created': datetime.datetime(2020, 8, 11, 10, 11, 43, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 468473929, 'comment_body': 'I still find this misleading, because this function only cares about decoy scores and has nothing to do with deNovo.\r\nRephrase to what the parameter actually does (and maybe rename it)?\r\n\r\nOr maybe write both explanations, saying that the current one is the one from the paper?', 'comment_created': datetime.datetime(2020, 8, 11, 10, 15, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 468474327, 'comment_body': '`too low`', 'comment_created': datetime.datetime(2020, 8, 11, 10, 15, 41, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 468474536, 'comment_body': '`their top10`', 'comment_created': datetime.datetime(2020, 8, 11, 10, 16, 4, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 468474748, 'comment_body': '`at least one database protein`', 'comment_created': datetime.datetime(2020, 8, 11, 10, 16, 28, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 468475393, 'comment_body': '`has a higher q-value than a given FDR, i.e. does not pass FDR.`', 'comment_created': datetime.datetime(2020, 8, 11, 10, 17, 41, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 468475524, 'comment_body': '`bool failsFDR(...)` ?', 'comment_created': datetime.datetime(2020, 8, 11, 10, 18, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 468475840, 'comment_body': 'or `passesFDR(...)` (usually one tries to use non-negative names)', 'comment_created': datetime.datetime(2020, 8, 11, 10, 18, 40, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 468476591, 'comment_body': '`annotation`', 'comment_created': datetime.datetime(2020, 8, 11, 10, 20, 6, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 468476968, 'comment_body': 'can you rename that `MS2_id_rate:force_no_pep_index` to `MS2_id_rate:assume_all_target` or so?', 'comment_created': datetime.datetime(2020, 8, 11, 10, 20, 47, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 468477176, 'comment_body': '`return (id.getHits()[0].getMetaValue(""target_decoy"") == ""target"")`?', 'comment_created': datetime.datetime(2020, 8, 11, 10, 21, 15, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 468477585, 'comment_body': '`deNovo` ?', 'comment_created': datetime.datetime(2020, 8, 11, 10, 22, 2, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 468478145, 'comment_body': 'no need for `else` after exception above.', 'comment_created': datetime.datetime(2020, 8, 11, 10, 23, 7, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 468481614, 'comment_body': '`too low`', 'comment_created': datetime.datetime(2020, 8, 11, 10, 29, 40, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 468482415, 'comment_body': '`index + 1`??\r\nThen you must also lookup `diffs[index+1]`.\r\nPlease double check!', 'comment_created': datetime.datetime(2020, 8, 11, 10, 31, 15, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 468485668, 'comment_body': '... threshold', 'comment_created': datetime.datetime(2020, 8, 11, 10, 37, 36, tzinfo=datetime.timezone.utc), 'commenter': 'jpfeuffer', 'type': 'User'}, {'comment_id': 468486090, 'comment_body': 'name it `denovo_only_quality`?', 'comment_created': datetime.datetime(2020, 8, 11, 10, 38, 31, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 468486619, 'comment_body': 'add a sanity check that all PepIDs in `novo_peps` are actually deNovo protein hits?\r\nOtherwise the user can accidentally pass the wrong idXML and hell will break loose?', 'comment_created': datetime.datetime(2020, 8, 11, 10, 39, 32, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 468549472, 'comment_body': 'do this only in this function or change all occurrences?', 'comment_created': datetime.datetime(2020, 8, 11, 12, 42, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Waschi97', 'type': 'User'}, {'comment_id': 469522101, 'comment_body': '```suggestion\r\n  class OPENMS_DLLAPI DBSuitability:\r\n```\r\nmaybe call the class and file something more descriptive like DBSuitability?', 'comment_created': datetime.datetime(2020, 8, 12, 20, 31, 14, tzinfo=datetime.timezone.utc), 'commenter': 'hroest', 'type': 'User'}, {'comment_id': 469525767, 'comment_body': 'can you document the output a bit more clear, how am I supposed to use this? What do I do with these results, what does the `suitability` parameter tell me? How do I now know whether the DB is suitable for the file or not? do I look at all entries in the vector?', 'comment_created': datetime.datetime(2020, 8, 12, 20, 34, 24, tzinfo=datetime.timezone.utc), 'commenter': 'hroest', 'type': 'User'}, {'comment_id': 469526464, 'comment_body': 'please comment all members\r\n\r\n```suggestion\r\n      double suitability = 0; ///< Value between 0 and 1 where 1 signifies ... \r\n```', 'comment_created': datetime.datetime(2020, 8, 12, 20, 34, 55, tzinfo=datetime.timezone.utc), 'commenter': 'hroest', 'type': 'User'}, {'comment_id': 469811982, 'comment_body': 'good point', 'comment_created': datetime.datetime(2020, 8, 13, 9, 13, 30, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 470616549, 'comment_body': '`too strict`', 'comment_created': datetime.datetime(2020, 8, 14, 13, 15, 36, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 470617426, 'comment_body': 'revert to old name', 'comment_created': datetime.datetime(2020, 8, 14, 13, 17, 22, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 471071697, 'comment_body': ""please extend documentation a bit. e.g., without only refering back to the tool.\r\nAlso it's not clear how the multiple usage works."", 'comment_created': datetime.datetime(2020, 8, 16, 6, 19, 49, tzinfo=datetime.timezone.utc), 'commenter': 'timosachsenberg', 'type': 'User'}, {'comment_id': 471455533, 'comment_body': '```suggestion\r\n  * To calculate the suitability of a database for a specific mzML for identification search, it\r\n```', 'comment_created': datetime.datetime(2020, 8, 17, 12, 50, 3, tzinfo=datetime.timezone.utc), 'commenter': 'jpfeuffer', 'type': 'User'}, {'comment_id': 471455821, 'comment_body': '```suggestion\r\n  * This class will calculate q-values by itself and will throw an error if any q-value calculation was done beforehand.\r\n```', 'comment_created': datetime.datetime(2020, 8, 17, 12, 50, 36, tzinfo=datetime.timezone.utc), 'commenter': 'jpfeuffer', 'type': 'User'}, {'comment_id': 471456190, 'comment_body': '```suggestion\r\n  * Therefore old results will not be overridden by a new call. This vector then can be returned using getResults().\r\n```', 'comment_created': datetime.datetime(2020, 8, 17, 12, 51, 18, tzinfo=datetime.timezone.utc), 'commenter': 'jpfeuffer', 'type': 'User'}, {'comment_id': 471456330, 'comment_body': '```suggestion\r\n  * This class serves as the library representation of @ref TOPP_DatabaseDBSuitability\r\n```', 'comment_created': datetime.datetime(2020, 8, 17, 12, 51, 32, tzinfo=datetime.timezone.utc), 'commenter': 'jpfeuffer', 'type': 'User'}, {'comment_id': 471456718, 'comment_body': '```suggestion\r\n    *                cut_off_fract - percentile that determines which cut-off will be returned\r\n```', 'comment_created': datetime.datetime(2020, 8, 17, 12, 52, 8, tzinfo=datetime.timezone.utc), 'commenter': 'jpfeuffer', 'type': 'User'}, {'comment_id': 471491323, 'comment_body': '```suggestion\r\n    * @param cut_off_fract  percentile that determines which cut-off will be returned\r\n```', 'comment_created': datetime.datetime(2020, 8, 17, 13, 48, 56, tzinfo=datetime.timezone.utc), 'commenter': 'jpfeuffer', 'type': 'User'}, {'comment_id': 471491834, 'comment_body': '```suggestion\r\n    * @throws               MissingInformation if no more than 20% of the peptide IDs have two decoys in their top ten peptide Hits\r\n```', 'comment_created': datetime.datetime(2020, 8, 17, 13, 49, 42, tzinfo=datetime.timezone.utc), 'commenter': 'jpfeuffer', 'type': 'User'}, {'comment_id': 471492257, 'comment_body': '```suggestion\r\n    * @brief Tests if a PeptideHit has a lower q-value than the given FDR threshold, i.e. passes FDR\r\n```', 'comment_created': datetime.datetime(2020, 8, 17, 13, 50, 18, tzinfo=datetime.timezone.utc), 'commenter': 'jpfeuffer', 'type': 'User'}, {'comment_id': 471492478, 'comment_body': '```suggestion\r\n    defaults_.setValue(""cut_off_fract"", 1., ""Percentile to determine which decoy cut-off to use."");\r\n```', 'comment_created': datetime.datetime(2020, 8, 17, 13, 50, 39, tzinfo=datetime.timezone.utc), 'commenter': 'jpfeuffer', 'type': 'User'}, {'comment_id': 471494275, 'comment_body': '```suggestion\r\n      OPENMS_LOG_WARN << ""Identifications could not be assigned to either the database or the deNovo protein. Probably your FDR threshold is too strict."" << endl;\r\n```', 'comment_created': datetime.datetime(2020, 8, 17, 13, 53, 29, tzinfo=datetime.timezone.utc), 'commenter': 'jpfeuffer', 'type': 'User'}, {'comment_id': 471495147, 'comment_body': '```suggestion\r\n    registerDoubleOption_(""cut_off_fract"", ""<double>"", 1, ""Percentile to determine which decoy cut-off to use. \'1\' use the highest cut-off to \'0\' use the lowest one."", false, true);\r\n```', 'comment_created': datetime.datetime(2020, 8, 17, 13, 54, 54, tzinfo=datetime.timezone.utc), 'commenter': 'jpfeuffer', 'type': 'User'}, {'comment_id': 471495797, 'comment_body': '```suggestion\r\n    registerFlag_(""MS2_id_rate:assume_all_target"", ""Forces the metric to run even if target/decoy annotation is missing (accepts all pep_ids as target hits)."", false);\r\n```', 'comment_created': datetime.datetime(2020, 8, 17, 13, 55, 49, tzinfo=datetime.timezone.utc), 'commenter': 'jpfeuffer', 'type': 'User'}, {'comment_id': 472201702, 'comment_body': 'should be `@p cut_off_fract`... but see below', 'comment_created': datetime.datetime(2020, 8, 18, 13, 35, 54, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 472202363, 'comment_body': 'Mention that PepIndexer is required (its only mentioned in the parameter help so far).\r\n', 'comment_created': datetime.datetime(2020, 8, 18, 13, 36, 46, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 472207619, 'comment_body': ""this is the `reranking_cutoff_percentile` (or along those lines)?\r\n\r\n`Swap a top-scoring deNovo hit with a lower scoring DB hit if their xcorr score difference is less than threshold 't'.\r\n't' is determined as the percentile (this parameter) in the list of all sorted score differences between two decoy hits of a PSM.` ??\r\n.... phew..."", 'comment_created': datetime.datetime(2020, 8, 18, 13, 43, 56, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 472207940, 'comment_body': 'is `1` a good default?', 'comment_created': datetime.datetime(2020, 8, 18, 13, 44, 24, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 472214630, 'comment_body': ""having duplicated parameters (even though its just 3) is bad for maintenance.\r\nYou can define the parameters in the class and simply make new TOPPSubsection 'algorithm' as done in other tools which just takes the Param from the class.\r\nTo pass the parameters, simply extract them back (done in many other tools) -- see MSSimulator etc.."", 'comment_created': datetime.datetime(2020, 8, 18, 13, 53, 48, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 472216399, 'comment_body': 'stay with `no_rerank` in the class (and also the TOPP tool by using a subsection).\r\nReplace all occurrences of `force_no_re_rank` in the PR.', 'comment_created': datetime.datetime(2020, 8, 18, 13, 56, 15, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 472224244, 'comment_body': 'Yes, thanks, this is really important.', 'comment_created': datetime.datetime(2020, 8, 18, 14, 7, tzinfo=datetime.timezone.utc), 'commenter': 'jpfeuffer', 'type': 'User'}, {'comment_id': 472226720, 'comment_body': '`Swap a top-scoring deNovo hit with a lower scoring DB hit if their xcorr score difference is in the given percentile of all score differences between the first two decoy hits of a PSM.`', 'comment_created': datetime.datetime(2020, 8, 18, 14, 10, 31, tzinfo=datetime.timezone.utc), 'commenter': 'jpfeuffer', 'type': 'User'}, {'comment_id': 472227421, 'comment_body': 'Percentile implies sorted.\r\nAnd it should be clear that it is about this param. Especially if we rename to ..._percentile.', 'comment_created': datetime.datetime(2020, 8, 18, 14, 11, 32, tzinfo=datetime.timezone.utc), 'commenter': 'jpfeuffer', 'type': 'User'}, {'comment_id': 472259431, 'comment_body': ""should be, right?\r\n'1' results in the highest difference being used as a cut-off. This is the least strict and it's guaranteed to work."", 'comment_created': datetime.datetime(2020, 8, 18, 14, 53, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Waschi97', 'type': 'User'}, {'comment_id': 472945747, 'comment_body': 'Yes it is guaranteed to work, but does it produce nice results on average?\r\nWhat do you use for benchmarking?', 'comment_created': datetime.datetime(2020, 8, 19, 11, 4, 17, tzinfo=datetime.timezone.utc), 'commenter': 'jpfeuffer', 'type': 'User'}, {'comment_id': 472958709, 'comment_body': ""For benchmarking 0.99 was used because that's the setting from the original paper and we wanted comparable results. What would produce the nicest results on average wasn't tested. That's probably not a bad idea though..."", 'comment_created': datetime.datetime(2020, 8, 19, 11, 29, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Waschi97', 'type': 'User'}, {'comment_id': 475563476, 'comment_body': 'should be `TOPP_DatabaseSuitability`', 'comment_created': datetime.datetime(2020, 8, 24, 12, 29, 53, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 475564341, 'comment_body': '`crucial`\r\n', 'comment_created': datetime.datetime(2020, 8, 24, 12, 31, 31, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 475564586, 'comment_body': 'will it `crash` or rather `complain`?', 'comment_created': datetime.datetime(2020, 8, 24, 12, 31, 57, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 475567117, 'comment_body': 'add a comment why this is not a const& (`vector is modified internally, and is thus copied`) or similar', 'comment_created': datetime.datetime(2020, 8, 24, 12, 36, 40, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 475569248, 'comment_body': 'so this is still reversed?\r\nSwap in the next PR?\r\n', 'comment_created': datetime.datetime(2020, 8, 24, 12, 40, 44, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 475569540, 'comment_body': 'mention what large/small values mean', 'comment_created': datetime.datetime(2020, 8, 24, 12, 41, 19, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 475631964, 'comment_body': 'Yes, it is sorted descending. But since I take the actual percentile now and not the (1 - percentile) one like before, this is essentially swapped.', 'comment_created': datetime.datetime(2020, 8, 24, 13, 58, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Waschi97', 'type': 'User'}, {'comment_id': 475777052, 'comment_body': ""My bad, the `greater<double>()` isn't needed anymore."", 'comment_created': datetime.datetime(2020, 8, 24, 17, 24, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Waschi97', 'type': 'User'}, {'comment_id': 475853449, 'comment_body': 'This change was expected?', 'comment_created': datetime.datetime(2020, 8, 24, 19, 47, 2, tzinfo=datetime.timezone.utc), 'commenter': 'jpfeuffer', 'type': 'User'}, {'comment_id': 475855795, 'comment_body': 'Yeah, it was. Since the default for the `rerank_cutoff_percentile` changed, I had to change either the test or the test files.\r\nI decided to change the test files, so that the default is tested.', 'comment_created': datetime.datetime(2020, 8, 24, 19, 51, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Waschi97', 'type': 'User'}, {'comment_id': 475856531, 'comment_body': 'Ah okay', 'comment_created': datetime.datetime(2020, 8, 24, 19, 53, 1, tzinfo=datetime.timezone.utc), 'commenter': 'jpfeuffer', 'type': 'User'}]","[{'commit_sha': '6f5f89441a5c134e7bad575d08fa3a0a38db51d3', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73649efddf6bff1127d0f2275f791ceb0eca9c6a', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '78b840ff672eba2c550202ce63211f9e862f51ed', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9b7b64cea856a074c27cf6c3e5cdb873b4f13d5', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '300e4dc1235e4aef52acb0a9b76f0280d1f19bca', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0cb8945f7be895eeee1e4414fa61f4250cfc1d7a', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '065201d5e1792d5b6cf089cde4db19af08f97548', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e6840c6e7c041a33c81959547ba5cdbf851c8b47', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd27ef1767f17466d856df6ec954e294dc390b56f', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2cc23e78e43cc3f0641c888df9760285e6331ac7', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fcf424db94bb02150dfc5cb7ce049eeeb46c4be8', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c5d4bf4afa470ccec50656fd4142ea1a56d1068', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6844ab0eb4767d017bc2ede98b90c1722a46025f', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd248329666a167b6d156d61e45ff856fade22163', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4eac72c806bc8ef3d18cc80b27e1b361d2040605', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3f307cba4effd55c8e1a198f21a9607b1726b1e', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fdc15eb4762a980a6f9fec548575707950daae24', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e95d3d4720407ae36d0655afa0e43efdcc504cfe', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '01dbfab24baf5906fc4c8a1ad095b80e8a38bd69', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7dba99bf89d7533b29efea3710bee98d963ba7ac', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b9da89f7f30b5e800a4e096df1dd7ed5227db06c', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '94937efc46924797d684509b1329cbccbb75a07d', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c2f967f9607a2831825eb6d492e2d25e1c6edbb9', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b8bab8dc5560e110da2716f44f7f1c413fa4b03b', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b8cfb98a572e25342ac4dc87e784869946b6528', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95abfb9db585819b2f195f3a610660be340e261d', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b7cc223373c35d8b8142e0818e1d70eedc155d7', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c2557323c6c9b26c533718055f6047aa86984276', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9085b38d74cd4bfabcebca1eb105269fbd69587a', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa38301ab6b06d50795e2715ca4367e3c553b3d6', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b78b81f3a440009bc45b3abdea38e21b602e6aa5', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a3d46ab0173e34f0eff39ce13c8aec2be20cf8a', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56fb8a44a0db67ef883310cc453d4be2fca032bf', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8777715ded59163f0b51e67770d0c75408f2824c', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e720c5415fdc5156d5776d81a0ec7945cbd5e64', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}]",TomW,39636547,,User,,5,,0,0
468032902,Adapter Parameters Written as MetaValues to SearchParameters,"- Added a static function to `DefaultParamHandler` that writes a `Param` object to a `MetaInfoInterface`

This allows to replicate a identification search with the same parameters. This will be used for a (hopefully) better DBSuitability calculation later.

- Changed all identification search adapters to use this funtion and write their parameters to the `SearchParameters` of the first `ProteinIdentification`

- Changed the test files of the adapters accordingly

- Also changed Novor test files - resolves #4878

- Added a test for the new function to the `DefaultParamHandler_test`",True,4887,https://api.github.com/repos/OpenMS/OpenMS/pulls/4887,https://github.com/OpenMS/OpenMS/pull/4887,closed,874,274,30,21,3,8,0,0,[],2020-08-14 15:01:10+00:00,2020-08-18 16:57:35+00:00,352585.0,"4 days, 1:56:25","[{'comment_id': 471572300, 'comment_body': '```suggestion\r\n    * @param write_here  a MetaInfoInterface object into which the meta values will be written \r\n```', 'comment_created': datetime.datetime(2020, 8, 17, 15, 49, 1, tzinfo=datetime.timezone.utc), 'commenter': 'jpfeuffer', 'type': 'User'}, {'comment_id': 471572719, 'comment_body': ""```suggestion\r\n    * @param prefix      will be added in front of the parameter name with a ':' as the meta value key\r\n```"", 'comment_created': datetime.datetime(2020, 8, 17, 15, 49, 36, tzinfo=datetime.timezone.utc), 'commenter': 'jpfeuffer', 'type': 'User'}, {'comment_id': 471573852, 'comment_body': 'why commented out?', 'comment_created': datetime.datetime(2020, 8, 17, 15, 51, 23, tzinfo=datetime.timezone.utc), 'commenter': 'jpfeuffer', 'type': 'User'}, {'comment_id': 472065272, 'comment_body': 'Mention that this is a param prefix as later found in the INI file for a TOPP tool.\r\nAnd give an example, to make it less abstract', 'comment_created': datetime.datetime(2020, 8, 18, 10, 5, 40, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 472066056, 'comment_body': 'key_prefix?', 'comment_created': datetime.datetime(2020, 8, 18, 10, 7, 8, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 472066564, 'comment_body': 'Check if the tool actually exists?\r\nor just use the internal tool name and get rid of the parameter altogether?', 'comment_created': datetime.datetime(2020, 8, 18, 10, 7, 56, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 472067501, 'comment_body': 'Forgot colon in between?\r\nBetter: ensure that prefix ends in colon or add if not', 'comment_created': datetime.datetime(2020, 8, 18, 10, 9, 38, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 472069129, 'comment_body': 'Test with prefix as well', 'comment_created': datetime.datetime(2020, 8, 18, 10, 12, 24, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}]","[{'commit_sha': '3af668db7a0539235b2755b22aa8604f5a541c48', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '075e379d1c2996291efccf561ea82cfc5aecd1bc', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2805c9102573c0cead1bb9869a7e0515b6821ee3', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '176c0ce9382656f9a81e573138c103fa285bede6', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39a7eb96fcca65139d2ee95c5bd3662e317ef4f7', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93c2b3c4e50b452ea1c91b32a848de79114dfb45', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '860b6d68108f73c72d9f00919007a992a2699023', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '736c2a98432bbc943f11ffbea271b7eb9d1e0c19', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '953a8989c7fc70e31f00a4baabefa0465f4c3c87', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d3d5b542b8ff68041f47ae221b612c7ccc02722', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4163e3a2a54be6accfedf23c0e1c617ed44f1de', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ee9c043267f9d287821e870e04c2ec112392a9c', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5612907a34478fcd3b40e877eb739863f40762af', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70ba7cd787ad30614ccf8c596c14d8678bdec2e8', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c012173928ca4ec0bf0de15ad6c2b2395c8018e8', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2758d5142081e2e0c69bc236c3b073e2313df4eb', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4329be9fe5844f763984ed3062e18ce9b31e69e0', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'caf1ba2657201293f5ef9a6b094ef13b0ff8552e', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50d4ee573ec07618ff82a13d2a60b69724959f6a', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '136a71571ec28eb053e2591bc8506c3c6bb38b2f', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e878f6e3a7168dbea28cfcd9b1e05840010ecba', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}]",TomW,39636547,,User,,5,,0,0
476257389,Calculating a Corrected Database Suitability,"**[edit from Chris: this is an extension of GSoC and already goes beyond what was required to complete the project successfully!]**

The number of top deNovo hits is corrected with a correction factor. This results in the database suitability behaving linear rather than hyperbolic.

This factor is calculated as the ratio of top database hits needed for a suitability of 1.0 and the number of deNovo identifications found when only searching with the deNovo ""database"".
The later is calculated with an internal call of a search adapter (the one found in the search parameters, i.e. the one the user used).
To calculate the number of top db hits at suitability 1.0 an extrapolation is needed. Since it was observed that both top deNovo and database hits behave linear this extrapolation can be done.
A second internal identification search is done with a smaller sample of the database in question. The top deNovo and database hits for this sampled database are calculated and used for the extrapolation.

----------------------------------------------------------------------------------------------------------------------------------------------

The algorithm described above was implemented into `DBSuitability`.

`DatabaseSuitability` TOPP tool input changed to have all needed data for the correction.

Still to do:
- [x] adapt docu

- [x] change class test for `DBSuitability` and TOPP test for `DatabaseSuitability`",True,4905,https://api.github.com/repos/OpenMS/OpenMS/pulls/4905,https://github.com/OpenMS/OpenMS/pull/4905,closed,181268,124477,25,96,14,77,0,0,[],2020-08-31 12:10:51+00:00,2022-01-05 14:23:52+00:00,42516781.0,"492 days, 2:13:01","[{'comment_id': 480093105, 'comment_body': '`results_.push_back(SuitabilityData());` avoids accidentally referring back to `d`, which would be a mistake', 'comment_created': datetime.datetime(2020, 8, 31, 12, 22, 36, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 480093555, 'comment_body': 'call this `subsampling_rate`? `ratio` is a bit misleading', 'comment_created': datetime.datetime(2020, 8, 31, 12, 23, 37, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 480094820, 'comment_body': '`appendDecoys`?', 'comment_created': datetime.datetime(2020, 8, 31, 12, 25, 27, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 480095811, 'comment_body': '`*data` is very generic.\r\nPrepend with `suitability_` + `_sampled/_full` instead?', 'comment_created': datetime.datetime(2020, 8, 31, 12, 27, 18, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 480097461, 'comment_body': 'technically, you need `(full - sampled) / (1 - ratio)`, right?', 'comment_created': datetime.datetime(2020, 8, 31, 12, 30, 19, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 480100398, 'comment_body': 'put these three lines which compute corrected factors into a member of `data`, e.g. `setCorrectionFactor(double factor)`', 'comment_created': datetime.datetime(2020, 8, 31, 12, 36, 17, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 480101395, 'comment_body': 'you are looking for any infix?\r\nPrefix + `:` should be enough?', 'comment_created': datetime.datetime(2020, 8, 31, 12, 38, 12, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 480102291, 'comment_body': 'forgot putting the key of this hit into `p`?', 'comment_created': datetime.datetime(2020, 8, 31, 12, 39, 55, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 480102803, 'comment_body': 'maybe make two separate loops?\r\none for finding the adapter name, the other for extracting the keys?\r\n', 'comment_created': datetime.datetime(2020, 8, 31, 12, 40, 51, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 480103098, 'comment_body': 'would automatic extraction using all names from ToolHandler that end in ""Adapter"" also work?', 'comment_created': datetime.datetime(2020, 8, 31, 12, 41, 25, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 480103368, 'comment_body': '`ListUtils::concatenate(...)`', 'comment_created': datetime.datetime(2020, 8, 31, 12, 41, 57, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 480103825, 'comment_body': 'Does ParamXMLFile not take care of this?', 'comment_created': datetime.datetime(2020, 8, 31, 12, 42, 48, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 480104586, 'comment_body': 'Dont think so, e.g. FidoAdapter and a few others do not do DB search', 'comment_created': datetime.datetime(2020, 8, 31, 12, 44, 14, tzinfo=datetime.timezone.utc), 'commenter': 'jpfeuffer', 'type': 'User'}, {'comment_id': 480104681, 'comment_body': 'sanity check: make sure these parameters exist. Otherwise you create new ones which will be ignored (or crash the tool)', 'comment_created': datetime.datetime(2020, 8, 31, 12, 44, 25, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 480106094, 'comment_body': 'probably not the right kind of exception?', 'comment_created': datetime.datetime(2020, 8, 31, 12, 47, 3, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 480107160, 'comment_body': 'we should really have a function `Param::overwriteValue` which checks if the value exists and fails otherwise....\r\nThis would make this much more safe...\r\n@jpfeuffer , opinions?', 'comment_created': datetime.datetime(2020, 8, 31, 12, 49, 2, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 480107538, 'comment_body': 'const &', 'comment_created': datetime.datetime(2020, 8, 31, 12, 49, 46, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 480107580, 'comment_body': 'const &', 'comment_created': datetime.datetime(2020, 8, 31, 12, 49, 53, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 480107999, 'comment_body': 'slow. store FDR in double value outside of loop', 'comment_created': datetime.datetime(2020, 8, 31, 12, 50, 38, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 480108223, 'comment_body': 'ratio --> subsampling_rate ?', 'comment_created': datetime.datetime(2020, 8, 31, 12, 51, 4, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 480111067, 'comment_body': '`fasta_data` is const... why does this work???\r\n\r\nplease use \r\n```\r\n  std::random_device rd;\r\n  std::mt19937 g(rd());\r\n  std::shuffle(v.begin(), v.end(), g);\r\n```\r\nsince `random_shuffle` is removed in C++17...', 'comment_created': datetime.datetime(2020, 8, 31, 12, 56, 16, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 480115291, 'comment_body': 'yes definitely. I often had problems when misspelling.', 'comment_created': datetime.datetime(2020, 8, 31, 13, 4, 1, tzinfo=datetime.timezone.utc), 'commenter': 'jpfeuffer', 'type': 'User'}, {'comment_id': 480116317, 'comment_body': 'append directly to `fasta`?\r\nyou can also reserve beforehand', 'comment_created': datetime.datetime(2020, 8, 31, 13, 5, 46, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 480118238, 'comment_body': 'this would also have the advantage that the description etc stays the same. Currently, setValue() removes it....', 'comment_created': datetime.datetime(2020, 8, 31, 13, 9, 14, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 480125496, 'comment_body': 'agree, I was confused.', 'comment_created': datetime.datetime(2020, 8, 31, 13, 19, 25, tzinfo=datetime.timezone.utc), 'commenter': 'jpfeuffer', 'type': 'User'}, {'comment_id': 545724356, 'comment_body': 'I know this was just refactored from existing code, by in my mind, this should be \r\n`return std::string(""(*_"") + ListUtils::concatenate<std::string>(getAffixes(), ""|*_"") +"")$"";`\r\n\r\nIs there a test for this?', 'comment_created': datetime.datetime(2020, 12, 18, 9, 57, 8, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 545726506, 'comment_body': '`then` --> `than`', 'comment_created': datetime.datetime(2020, 12, 18, 10, 1, 2, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 545731408, 'comment_body': ""these three members should be private, just to make sure they are not modified 'by hand', but only via this function.\r\nYou'd also need three small `double getCorrectionFactor() const { return corr_factor; }` etc functions in the header then."", 'comment_created': datetime.datetime(2020, 12, 18, 10, 10, 17, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 545732637, 'comment_body': 'you need platform independent paths here.\r\nTry `m.load(File::find(""./examples/BSA/BSA1.mzML""));`', 'comment_created': datetime.datetime(2020, 12, 18, 10, 12, 37, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 545734211, 'comment_body': 'this testfile still needs some actual tests... :)', 'comment_created': datetime.datetime(2020, 12, 18, 10, 15, 31, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 545771926, 'comment_body': 'Maybe change all comments to doxygen doc? ""///""\r\nAt least on the public methods?', 'comment_created': datetime.datetime(2020, 12, 18, 11, 28, 24, tzinfo=datetime.timezone.utc), 'commenter': 'jpfeuffer', 'type': 'User'}, {'comment_id': 545775400, 'comment_body': 'I think you are right.', 'comment_created': datetime.datetime(2020, 12, 18, 11, 35, 53, tzinfo=datetime.timezone.utc), 'commenter': 'jpfeuffer', 'type': 'User'}, {'comment_id': 545776056, 'comment_body': 'What is with the rest? Needed at some point?', 'comment_created': datetime.datetime(2020, 12, 18, 11, 37, 16, tzinfo=datetime.timezone.utc), 'commenter': 'jpfeuffer', 'type': 'User'}, {'comment_id': 545776559, 'comment_body': 'Is Xcorr *needed* for re-ranking? Or also only recommended?', 'comment_created': datetime.datetime(2020, 12, 18, 11, 38, 18, tzinfo=datetime.timezone.utc), 'commenter': 'jpfeuffer', 'type': 'User'}, {'comment_id': 545778718, 'comment_body': ""```suggestion\r\n    * This formula can be simplified in a way that the maximum number of deNovo hits isn't needed:\r\n```"", 'comment_created': datetime.datetime(2020, 12, 18, 11, 42, 59, tzinfo=datetime.timezone.utc), 'commenter': 'jpfeuffer', 'type': 'User'}, {'comment_id': 545779208, 'comment_body': 'Still true with Comet support?', 'comment_created': datetime.datetime(2020, 12, 18, 11, 44, 2, tzinfo=datetime.timezone.utc), 'commenter': 'jpfeuffer', 'type': 'User'}, {'comment_id': 545779392, 'comment_body': '```suggestion\r\n    *                           this happens when another adapter than CometAdapter was used\r\n```', 'comment_created': datetime.datetime(2020, 12, 18, 11, 44, 25, tzinfo=datetime.timezone.utc), 'commenter': 'jpfeuffer', 'type': 'User'}, {'comment_id': 545779800, 'comment_body': 'Does the fasta need to be copied here?', 'comment_created': datetime.datetime(2020, 12, 18, 11, 45, 17, tzinfo=datetime.timezone.utc), 'commenter': 'jpfeuffer', 'type': 'User'}, {'comment_id': 545780035, 'comment_body': '```suggestion\r\n    * @throws              MissingInformation if none of the adapters above is found in the meta values\r\n```', 'comment_created': datetime.datetime(2020, 12, 18, 11, 45, 44, tzinfo=datetime.timezone.utc), 'commenter': 'jpfeuffer', 'type': 'User'}, {'comment_id': 545780251, 'comment_body': '```suggestion\r\n    * @brief Executes the workflow from search adapter, followed by PeptideIndexer and finishes with FDR\r\n```', 'comment_created': datetime.datetime(2020, 12, 18, 11, 46, 11, tzinfo=datetime.timezone.utc), 'commenter': 'jpfeuffer', 'type': 'User'}, {'comment_id': 545780428, 'comment_body': '```suggestion\r\n    * Make sure the search adapter you wish to use is built on your system and the executable is on your PATH variable.\r\n```', 'comment_created': datetime.datetime(2020, 12, 18, 11, 46, 32, tzinfo=datetime.timezone.utc), 'commenter': 'jpfeuffer', 'type': 'User'}, {'comment_id': 545781084, 'comment_body': 'Here too, can you take it by const-ref? you are copying the entries for the return value anyway right?', 'comment_created': datetime.datetime(2020, 12, 18, 11, 47, 52, tzinfo=datetime.timezone.utc), 'commenter': 'jpfeuffer', 'type': 'User'}, {'comment_id': 545781511, 'comment_body': '```suggestion\r\n    *                   this happens when another adapter than CometAdapter was used\r\n```', 'comment_created': datetime.datetime(2020, 12, 18, 11, 48, 44, tzinfo=datetime.timezone.utc), 'commenter': 'jpfeuffer', 'type': 'User'}, {'comment_id': 545783414, 'comment_body': '""Make sure"" does not fit anymore if Comet is not mandatory', 'comment_created': datetime.datetime(2020, 12, 18, 11, 52, 46, tzinfo=datetime.timezone.utc), 'commenter': 'jpfeuffer', 'type': 'User'}, {'comment_id': 545791560, 'comment_body': 'Ah you are shuffling. You could instead just draw random numbers in the range of the indices and copy out the according fasta entries. Might be worthwhile for gigabytes of fast.\r\nThere is also an on-disc fasta file container I think. But this has no random access.', 'comment_created': datetime.datetime(2020, 12, 18, 12, 9, 57, tzinfo=datetime.timezone.utc), 'commenter': 'jpfeuffer', 'type': 'User'}, {'comment_id': 545792242, 'comment_body': 'See comment at subsampleFasta method', 'comment_created': datetime.datetime(2020, 12, 18, 12, 11, 32, tzinfo=datetime.timezone.utc), 'commenter': 'jpfeuffer', 'type': 'User'}, {'comment_id': 545793135, 'comment_body': 'Is this documented?', 'comment_created': datetime.datetime(2020, 12, 18, 12, 13, 24, tzinfo=datetime.timezone.utc), 'commenter': 'jpfeuffer', 'type': 'User'}, {'comment_id': 545794629, 'comment_body': 'fixed seed?', 'comment_created': datetime.datetime(2020, 12, 18, 12, 16, 52, tzinfo=datetime.timezone.utc), 'commenter': 'jpfeuffer', 'type': 'User'}, {'comment_id': 545794995, 'comment_body': 'How about shuffling the indices instead? Then you can take the fasta as const ref.', 'comment_created': datetime.datetime(2020, 12, 18, 12, 17, 37, tzinfo=datetime.timezone.utc), 'commenter': 'jpfeuffer', 'type': 'User'}, {'comment_id': 545796698, 'comment_body': 'Here, since it is a private method if you assume the Hits in the IDs to be sorted (by e.g. sorting them before manually).\r\nOr by not caring if the IDs come out sorted, you could also take the IDs as (const) ref.', 'comment_created': datetime.datetime(2020, 12, 18, 12, 21, 25, tzinfo=datetime.timezone.utc), 'commenter': 'jpfeuffer', 'type': 'User'}, {'comment_id': 545824433, 'comment_body': 'instanciating the regex is very expensive IFAIR.\r\nMaybe make it a member variable?\r\nHow are we doing speedwise anyway?\r\n', 'comment_created': datetime.datetime(2020, 12, 18, 13, 16, 51, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 545826780, 'comment_body': ""should be 'without' decoy, right?\r\nBecause internally, you append decoys after subsampling.\r\n"", 'comment_created': datetime.datetime(2020, 12, 18, 13, 21, 35, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 545829319, 'comment_body': 'the `Right` is a bit confusing IMHO.\r\nMaybe `extractScore`?', 'comment_created': datetime.datetime(2020, 12, 18, 13, 26, 18, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 545829491, 'comment_body': 'typo', 'comment_created': datetime.datetime(2020, 12, 18, 13, 26, 37, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 545832502, 'comment_body': 'this effectively copies `pep_ids` from the calling scope.\r\nyou need to modify the content, right?\r\nthe cleanest is probably to use `std::vector<PeptideIdentification>&& pep_ids` and then call it using `compute(std::move(peptides), ....)`...\r\nOr just take by reference, but make it clear in the docs that the content will be modified.', 'comment_created': datetime.datetime(2020, 12, 18, 13, 32, 15, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 545832756, 'comment_body': 'also the other vectors could be taken by reference instead of copy?', 'comment_created': datetime.datetime(2020, 12, 18, 13, 32, 43, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 545833407, 'comment_body': 'maybe make this a member of `SuitabilityData`? Just to be closer to the data model?', 'comment_created': datetime.datetime(2020, 12, 18, 13, 33, 56, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 545838267, 'comment_body': 'could be any percentile, right? not the first necessarily.\r\n', 'comment_created': datetime.datetime(2020, 12, 18, 13, 42, 59, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 545839826, 'comment_body': 'a complicated way of saying `if (key == a)` ???', 'comment_created': datetime.datetime(2020, 12, 18, 13, 45, 45, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 545840933, 'comment_body': ""ahh.. ok. you actually want the prefix, right?\r\nMaybe annotate that...\r\nand maybe also inlcude the ':' in the comparison?"", 'comment_created': datetime.datetime(2020, 12, 18, 13, 47, 33, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 545843198, 'comment_body': 'you could just move the temporary file?', 'comment_created': datetime.datetime(2020, 12, 18, 13, 51, 41, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 545843822, 'comment_body': 'accept vector as `const &` and ...', 'comment_created': datetime.datetime(2020, 12, 18, 13, 52, 56, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 545845318, 'comment_body': 'shuffle a new vector of indices\r\n(the DB could be huge...)\r\n```\r\nstd::vector<int> rnd_indices(fasta_data.size()) ;\r\nstd::iota (std::begin(rnd_indices), std::end(rnd_indices), 0); // Fill with 0, 1, ....\r\nshuffle(rnd_indices.begin(), rnd_indices.end(), g);\r\n```', 'comment_created': datetime.datetime(2020, 12, 18, 13, 55, 35, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 545846328, 'comment_body': '... then iterate through\r\n`for (const int i : rnd_indices) ....`\r\nuntil you have enough data collected', 'comment_created': datetime.datetime(2020, 12, 18, 13, 57, 22, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 545847051, 'comment_body': 'pass vector by const &', 'comment_created': datetime.datetime(2020, 12, 18, 13, 58, 35, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 604277274, 'comment_body': '[https://github.com/OpenMS/OpenMS/blob/bce23c9b4596bc86a10966d36363874cb6bd29fd/src/openms/include/OpenMS/QC/DBSuitability.h#L248](url)\r\nYes, it is. Though maybe it would make sense to make this a parameter?', 'comment_created': datetime.datetime(2021, 3, 30, 17, 2, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Waschi97', 'type': 'User'}, {'comment_id': 613100506, 'comment_body': 'why copy the string?', 'comment_created': datetime.datetime(2021, 4, 14, 9, 45, 33, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 613110047, 'comment_body': 'to search for the decoy pattern in line 646 the accession needs to be lower case', 'comment_created': datetime.datetime(2021, 4, 14, 9, 59, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Waschi97', 'type': 'User'}, {'comment_id': 613128321, 'comment_body': 'setting `data.cutoff` (or any other member of `data`) is a bit dangerous, since you never know what `data` was previously populated with (maybe the user passed in an old object?).\r\nBetter create a fresh `SuitabilityData` locally, and return it.\r\nOr was there a specific reason to do it this way?', 'comment_created': datetime.datetime(2021, 4, 14, 10, 27, 57, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 613130043, 'comment_body': 'possible reason why the number of proteins does not change much during subsamping: you use ALL hits.\r\nBetter use the top hit only?', 'comment_created': datetime.datetime(2021, 4, 14, 10, 30, 41, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 613131509, 'comment_body': 'ok, that;s why you copy...\r\nbut then maybe do `if (boost::regex_search(String(acc).toLower(), decoy_pattern_))`, to make the copy later\r\n', 'comment_created': datetime.datetime(2021, 4, 14, 10, 33, 11, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 613136140, 'comment_body': ""median is more robust?!\r\nIf the number of items is even, it's a bit weird, because you must decide which of both 'median' items to take (they are equally far away from the computed median). Thus you either always underestimate, or always overestimate...\r\nThe only solution is to sample an odd number of times. Then the median is well defined."", 'comment_created': datetime.datetime(2021, 4, 14, 10, 40, 41, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 613141528, 'comment_body': ""Ahh.. Yes, that could be the reason. I'll try that."", 'comment_created': datetime.datetime(2021, 4, 14, 10, 49, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Waschi97', 'type': 'User'}, {'comment_id': 613155974, 'comment_body': ""I use the mean to calculate the median by hand. Because I want the value which is closest to the mean, right? `Math::median` just gives me the value which is located in the middle of the sorted list, which isn't always the same. Am I wrong?"", 'comment_created': datetime.datetime(2021, 4, 14, 11, 14, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Waschi97', 'type': 'User'}, {'comment_id': 613161329, 'comment_body': 'This is done because an empty `SuitabilityData` object is pushed into the results vector at the very beginning and all changes are made on a reference to that object.\r\nI guess I could implement a `clear()` function and clear the object at the beginning of `calculateSuitability_`.', 'comment_created': datetime.datetime(2021, 4, 14, 11, 23, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Waschi97', 'type': 'User'}, {'comment_id': 613169839, 'comment_body': 'somewhat...\r\nthe median can be miles away from the mean... so better not trust the mean in any way.', 'comment_created': datetime.datetime(2021, 4, 14, 11, 38, 4, tzinfo=datetime.timezone.utc), 'commenter': 'cbielow', 'type': 'User'}, {'comment_id': 630347706, 'comment_body': '```suggestion\r\n    * @brief Extracts the worst score that still passes a FDR (q-value) threshold\r\n```', 'comment_created': datetime.datetime(2021, 5, 11, 16, 38, 56, tzinfo=datetime.timezone.utc), 'commenter': 'jpfeuffer', 'type': 'User'}]","[{'commit_sha': '3af668db7a0539235b2755b22aa8604f5a541c48', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '075e379d1c2996291efccf561ea82cfc5aecd1bc', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2805c9102573c0cead1bb9869a7e0515b6821ee3', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '176c0ce9382656f9a81e573138c103fa285bede6', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39a7eb96fcca65139d2ee95c5bd3662e317ef4f7', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93c2b3c4e50b452ea1c91b32a848de79114dfb45', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '860b6d68108f73c72d9f00919007a992a2699023', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '736c2a98432bbc943f11ffbea271b7eb9d1e0c19', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '953a8989c7fc70e31f00a4baabefa0465f4c3c87', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d3d5b542b8ff68041f47ae221b612c7ccc02722', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4163e3a2a54be6accfedf23c0e1c617ed44f1de', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ee9c043267f9d287821e870e04c2ec112392a9c', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5612907a34478fcd3b40e877eb739863f40762af', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70ba7cd787ad30614ccf8c596c14d8678bdec2e8', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c012173928ca4ec0bf0de15ad6c2b2395c8018e8', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2758d5142081e2e0c69bc236c3b073e2313df4eb', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4329be9fe5844f763984ed3062e18ce9b31e69e0', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'caf1ba2657201293f5ef9a6b094ef13b0ff8552e', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22d9ddccbb976931f49ef23525c77d673f477137', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '409b105bc00c56a48ecde1a5d5b8b7d385dcc2f8', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd265763ae43a7158163a5b1464a83cd90155a5d3', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf7220cf0bf601fe246a0e2d0ee69c2c08f29a44', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '601f08f9519b6e73c4e36691e4d7b54673d5291e', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '483239604ba65c6b9e25278e8bf3d5572a9ab0f1', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d3451341762147fd8290c86518dfe6ecaa4d8ef', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fac5756c5e1a374b95a6e4794c9d1d6715c6cb25', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3acd078ff02eba2b8487f6caaca88ea0f32df6f4', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d7c8e06783d9a22fda0a4409acef2c1651a83b2', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1a5bd889bdf4c44d5115187c3aebea560298e77', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f446bd4b59a9c867c4c38146343fe2eeb015f0fa', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec86f6a26cffbf3c082dac8f4205f696810814d0', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '322e8ea8250b732698e5d4d78b4d469f5ca778dd', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e18f08faa8cff1384424e14afe35a50e77bb5cda', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '652df288b71e2021b273802c6ac1419717b2810a', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e28ef4748de0fb1434fe88f36cb81c4f3cc58757', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e5fcf27acf15174203fdc4d605d170fc3e62e034', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd9a50f10ab63e4694ef4bd1c50a8a8c977bd42e', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b372fc22c1342ab4d5f49249aafaaf2a3a22ba5f', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e74f76bbdfc1164d926baa302588ea0de20056c2', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c0cd806c7b1af16f9c08a3b3cb2e0ddb70cad84', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c21927c128cc8bf0bfa189202e3a69bb3237643', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ea16115f41f8ba40df9740adb845acbc33eaa19', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e72e8cb3a50a3f40938c7f35b4fb069b89b8e0ec', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b22a376a32619365165f66d70a3021d23389f15c', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db1075563f20d3c0e8a35bd2367a27eb4a636cd4', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '076bddf6f66b22e72bf038919a24a4b08a53ed20', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b3de865add383ceeb222774e0a9b1d52062fcf1', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e8ecdeca78dae1b1d8174ed5a7cc254068d8abf2', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '37900d944fe7fe584c41451ef987857861545a79', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e1f088c392ac8b6735bea0a3d6cc6fae0856fd0', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e490b0acf46d3ddbde45faaefb3e55072af0b60', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b1d36372421e9dcca811b55e494e91af26f73fe', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b1e4c78558f9cb74e528f15cb6ad76e4b751144', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c6dc4a8c4950ea00cd267052de63a0d66ede9b2', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '89ff4fec0ee55dc4afc84608699ed64d58b3d4d5', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8eec96654cf392520c0dbae9254f42e203dc9fac', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7cd708e80842a16d48a2c531348f69c19eae20d5', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c7776281889c2dfad9c3d14c061fa17c47aab5b4', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'baf01927288600bcb00778c581c1bdf1b8818272', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6a88d883d58192835bd44a0ce0ca507b3514850', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab9bef991ebc9bfaf909386ad2e66890271b7543', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aae2396c493b617af381f2a87190d61ec7eabfb9', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de390388e76de9c305ddbb8203a413d5a0cd0539', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07ed292eac55b83d435bcc5c1bf0df96c8da0feb', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a2220b1f01f8b8b48ade4d689b33b56b66b9583', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bce23c9b4596bc86a10966d36363874cb6bd29fd', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '06078a87f62941b5cf1d32e29a5d8bc43c7b8e5e', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f117d6b3ba7f975503098479d24901bffaa6229', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9144c07e1d709c26e3d99d5aff1bf59b50703d79', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '024bf6f4e5e644d21b2e5fbc790071e75a79f693', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f15ab03e699a545dbb1aec21ad957c700552245a', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '948e185425f2045e4399f3cbea579178bf9d5802', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c70cff5b4f7293897ce9d4f0ddc190bfd1d8015', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba4469c7823366924c335410007a5e8c42d5d0cd', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '636c387dc475459ad49248aa64f85487f2f37ffc', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '647a0c99c158ba9a85bd2a3fba160e963dbdcb64', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc8836b3891ef2bd57556263bb52747ba490ecad', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '78b28cd56573483f8dfd5dd55ad918fdb042ddb0', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e2a508a462c4482901e40eb773d4b0a5b44915dd', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '52e8d51e8bd60ca51c747481860f6e6e3d0f23c6', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57f5ee4591a21a7daffcdec1736ce9461ba009eb', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '703aa3c39aedc26c42630c728c02c56aa40cb1c3', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3089c648994669b0d260c12a6e13831030db0986', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7462b346095567cd6f6c886ff62f40a521679aa1', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8afdc88d5b1dcecf0ed457f0c8cf709f75075868', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '102fb5138f71dd71a530e8087e9dc87ebb1c32de', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48e21c86ac9e3614e0420dd273fbddaff62526af', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b8952a0860ead385bb19d03fc76ec81e2f5d65a8', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '37aa2790bfc357ae65c2b33a5fea3e508eff61c6', 'committer_username': 'Waschi97', 'committer_name': 'TomW', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 25, 22, 34, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03896de2283d31a6d5315632a57b563d123d9b51', 'committer_username': 'timosachsenberg', 'committer_name': 'Timo Sachsenberg', 'committer_email': 'timo.sachsenberg@uni-tuebingen.de', 'commit_date': datetime.datetime(2013, 10, 29, 12, 31, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9186f6085d55fe369b63c0f8308a5226ca74b58a', 'committer_username': 'timosachsenberg', 'committer_name': 'Timo Sachsenberg', 'committer_email': 'timo.sachsenberg@uni-tuebingen.de', 'commit_date': datetime.datetime(2013, 10, 29, 12, 31, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '41cf703ec261810aa051bed2906cb1e4a3d79fd6', 'committer_username': 'cbielow', 'committer_name': 'Chris Bielow', 'committer_email': 'chris.bielow@fu-berlin.de', 'commit_date': datetime.datetime(2013, 11, 22, 9, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3358bf0c40dbb12c8389410075a5945e17168277', 'committer_username': 'cbielow', 'committer_name': 'Chris Bielow', 'committer_email': 'chris.bielow@fu-berlin.de', 'commit_date': datetime.datetime(2013, 11, 22, 9, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc33906427f5f5cd3d4c9f9604859d5873c93cdf', 'committer_username': 'cbielow', 'committer_name': 'Chris Bielow', 'committer_email': 'chris.bielow@fu-berlin.de', 'commit_date': datetime.datetime(2013, 11, 22, 9, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f1e3d3c48832960b8caf47cdf45addd7975ff01', 'committer_username': 'cbielow', 'committer_name': 'Chris Bielow', 'committer_email': 'chris.bielow@fu-berlin.de', 'commit_date': datetime.datetime(2013, 11, 22, 9, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a6835334bb3e3ef8b5cd390a283fe6e4e3bccbc1', 'committer_username': 'timosachsenberg', 'committer_name': 'Timo Sachsenberg', 'committer_email': 'timo.sachsenberg@uni-tuebingen.de', 'commit_date': datetime.datetime(2013, 10, 29, 12, 31, 58, tzinfo=datetime.timezone.utc)}]",TomW,39636547,,User,,5,,0,0

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
15763403,OpenMS,OpenMS/OpenMS,C++,313,475,31,231,33828,647,99,51,"[{'id': 944352973, 'number': 6134, 'closed': datetime.datetime(2022, 5, 23, 15, 28, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 23, 12, 11, 26, tzinfo=datetime.timezone.utc), 'time_taken': 11842.0, 'time_delta': '3:17:22', 'additions': 20, 'deletions': 14, 'state': 'closed'}, {'id': 908755355, 'number': 6039, 'closed': None, 'created': datetime.datetime(2022, 4, 13, 10, 20, 48, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 544, 'deletions': 29, 'state': 'open'}, {'id': 900068807, 'number': 6023, 'closed': datetime.datetime(2022, 4, 8, 11, 53, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 5, 10, 55, 39, tzinfo=datetime.timezone.utc), 'time_taken': 262687.0, 'time_delta': '3 days, 0:58:07', 'additions': 480, 'deletions': 332, 'state': 'closed'}, {'id': 898945294, 'number': 6020, 'closed': datetime.datetime(2022, 4, 5, 7, 44, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 4, 12, 14, 21, tzinfo=datetime.timezone.utc), 'time_taken': 70182.0, 'time_delta': '19:29:42', 'additions': 4, 'deletions': 1, 'state': 'closed'}, {'id': 894401520, 'number': 6011, 'closed': datetime.datetime(2022, 4, 4, 12, 14, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 30, 12, 50, 9, tzinfo=datetime.timezone.utc), 'time_taken': 429833.0, 'time_delta': '4 days, 23:23:53', 'additions': 5, 'deletions': 1, 'state': 'closed'}, {'id': 888630320, 'number': 6002, 'closed': datetime.datetime(2022, 4, 1, 14, 23, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 24, 17, 19, 33, tzinfo=datetime.timezone.utc), 'time_taken': 680650.0, 'time_delta': '7 days, 21:04:10', 'additions': 679, 'deletions': 115, 'state': 'closed'}, {'id': 881230872, 'number': 5949, 'closed': datetime.datetime(2022, 3, 16, 18, 42, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 16, 11, 14, 30, tzinfo=datetime.timezone.utc), 'time_taken': 26872.0, 'time_delta': '7:27:52', 'additions': 37, 'deletions': 12, 'state': 'closed'}, {'id': 869442613, 'number': 5883, 'closed': datetime.datetime(2022, 3, 4, 13, 26, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 2, 11, 41, 14, tzinfo=datetime.timezone.utc), 'time_taken': 179114.0, 'time_delta': '2 days, 1:45:14', 'additions': 557, 'deletions': 212, 'state': 'closed'}, {'id': 646667912, 'number': 5322, 'closed': datetime.datetime(2021, 5, 18, 14, 15, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 18, 11, 34, 1, tzinfo=datetime.timezone.utc), 'time_taken': 9685.0, 'time_delta': '2:41:25', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 586765072, 'number': 5213, 'closed': datetime.datetime(2021, 3, 25, 21, 7, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 8, 13, 19, tzinfo=datetime.timezone.utc), 'time_taken': 1496916.0, 'time_delta': '17 days, 7:48:36', 'additions': 2476, 'deletions': 1445, 'state': 'closed'}, {'id': 578433350, 'number': 5185, 'closed': datetime.datetime(2021, 2, 23, 15, 44, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 23, 13, 4, 30, tzinfo=datetime.timezone.utc), 'time_taken': 9623.0, 'time_delta': '2:40:23', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 574271822, 'number': 5169, 'closed': datetime.datetime(2021, 3, 27, 13, 38, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 16, 15, 21, 46, tzinfo=datetime.timezone.utc), 'time_taken': 3363384.0, 'time_delta': '38 days, 22:16:24', 'additions': 1299, 'deletions': 792, 'state': 'closed'}, {'id': 572639776, 'number': 5167, 'closed': datetime.datetime(2021, 2, 16, 9, 12, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 12, 16, 45, 1, tzinfo=datetime.timezone.utc), 'time_taken': 318444.0, 'time_delta': '3 days, 16:27:24', 'additions': 182, 'deletions': 338, 'state': 'closed'}, {'id': 564893304, 'number': 5148, 'closed': datetime.datetime(2021, 2, 1, 6, 49, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 1, 6, 23, 7, tzinfo=datetime.timezone.utc), 'time_taken': 1579.0, 'time_delta': '0:26:19', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 559890515, 'number': 5136, 'closed': datetime.datetime(2021, 1, 29, 16, 6, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 22, 11, 9, 16, tzinfo=datetime.timezone.utc), 'time_taken': 622635.0, 'time_delta': '7 days, 4:57:15', 'additions': 12495, 'deletions': 2, 'state': 'closed'}, {'id': 553431189, 'number': 5126, 'closed': datetime.datetime(2021, 1, 22, 15, 4, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 12, 12, 43, 5, tzinfo=datetime.timezone.utc), 'time_taken': 872457.0, 'time_delta': '10 days, 2:20:57', 'additions': 88, 'deletions': 51, 'state': 'closed'}, {'id': 476257389, 'number': 4905, 'closed': datetime.datetime(2022, 1, 5, 14, 23, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 31, 12, 10, 51, tzinfo=datetime.timezone.utc), 'time_taken': 42516781.0, 'time_delta': '492 days, 2:13:01', 'additions': 181268, 'deletions': 124477, 'state': 'closed'}, {'id': 468032902, 'number': 4887, 'closed': datetime.datetime(2020, 8, 18, 16, 57, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 14, 15, 1, 10, tzinfo=datetime.timezone.utc), 'time_taken': 352585.0, 'time_delta': '4 days, 1:56:25', 'additions': 874, 'deletions': 274, 'state': 'closed'}, {'id': 464059678, 'number': 4866, 'closed': datetime.datetime(2020, 8, 24, 19, 54, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 6, 14, 21, 11, tzinfo=datetime.timezone.utc), 'time_taken': 1575177.0, 'time_delta': '18 days, 5:32:57', 'additions': 20308, 'deletions': 25787, 'state': 'closed'}, {'id': 462242631, 'number': 4840, 'closed': datetime.datetime(2020, 8, 3, 16, 32, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 3, 15, 23, 43, tzinfo=datetime.timezone.utc), 'time_taken': 4146.0, 'time_delta': '1:09:06', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 449494257, 'number': 4814, 'closed': datetime.datetime(2020, 7, 16, 22, 17, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 15, 13, 50, 7, tzinfo=datetime.timezone.utc), 'time_taken': 116821.0, 'time_delta': '1 day, 8:27:01', 'additions': 82, 'deletions': 28, 'state': 'closed'}, {'id': 437768956, 'number': 4791, 'closed': datetime.datetime(2020, 7, 9, 13, 26, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 22, 8, 21, 8, tzinfo=datetime.timezone.utc), 'time_taken': 1487146.0, 'time_delta': '17 days, 5:05:46', 'additions': 231641, 'deletions': 30972, 'state': 'closed'}, {'id': 431845537, 'number': 4781, 'closed': datetime.datetime(2020, 6, 12, 14, 53, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 9, 14, 42, 24, tzinfo=datetime.timezone.utc), 'time_taken': 259850.0, 'time_delta': '3 days, 0:10:50', 'additions': 124, 'deletions': 15, 'state': 'closed'}, {'id': 418026587, 'number': 4723, 'closed': datetime.datetime(2020, 5, 19, 14, 27, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 14, 14, 15, 52, tzinfo=datetime.timezone.utc), 'time_taken': 432690.0, 'time_delta': '5 days, 0:11:30', 'additions': 128, 'deletions': 131, 'state': 'closed'}, {'id': 416697079, 'number': 4718, 'closed': datetime.datetime(2020, 5, 14, 23, 15, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 12, 12, 36, 40, tzinfo=datetime.timezone.utc), 'time_taken': 211119.0, 'time_delta': '2 days, 10:38:39', 'additions': 9, 'deletions': 4, 'state': 'closed'}, {'id': 278243031, 'number': 4102, 'closed': datetime.datetime(2019, 5, 13, 12, 10, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 5, 13, 12, 1, 43, tzinfo=datetime.timezone.utc), 'time_taken': 498.0, 'time_delta': '0:08:18', 'additions': 5874, 'deletions': 1161, 'state': 'closed'}]"
