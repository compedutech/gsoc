pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
997273909,[Feature][Registry] Support etcd as registry ,"<!--Thanks very much for contributing to Apache DolphinScheduler. Please review https://dolphinscheduler.apache.org/en-us/community/development/pull-request.html before opening a pull request.-->


## Purpose of the pull request

Close #8975

## Brief change log
Add CRUD
Add Subscribe
Add Lock
Add ConnectStateListener

## Verify this pull request

This change added tests and can be verified as follows:
Add persistTest to test for CRUD
Add lockTest for lock

TODO add connectStateListener Test
",True,10981,https://api.github.com/repos/apache/dolphinscheduler/pulls/10981,https://github.com/apache/dolphinscheduler/pull/10981,closed,2088,4,27,43,21,51,3,1,"[{'name': 'backend'}, {'name': 'release cherry-pick'}, {'name': 'gsoc'}]",2022-07-15 02:00:32+00:00,2022-09-06 14:25:19+00:00,4623887.0,"53 days, 12:24:47","[{'comment_id': 921744029, 'comment_body': 'Consider also using `Duration` type, and format the codes please.', 'comment_created': datetime.datetime(2022, 7, 15, 2, 4, 28, tzinfo=datetime.timezone.utc), 'commenter': 'kezhenxu94', 'type': 'User'}, {'comment_id': 921744057, 'comment_body': '```suggestion\r\n    private Duration retryMaxDuration=Duration.ofMillis(1500);\r\n```', 'comment_created': datetime.datetime(2022, 7, 15, 2, 4, 34, tzinfo=datetime.timezone.utc), 'commenter': 'kezhenxu94', 'type': 'User'}, {'comment_id': 921744266, 'comment_body': 'This should be `test` scope', 'comment_created': datetime.datetime(2022, 7, 15, 2, 5, 11, tzinfo=datetime.timezone.utc), 'commenter': 'kezhenxu94', 'type': 'User'}, {'comment_id': 921744374, 'comment_body': ""Don't set this here"", 'comment_created': datetime.datetime(2022, 7, 15, 2, 5, 33, tzinfo=datetime.timezone.utc), 'commenter': 'kezhenxu94', 'type': 'User'}, {'comment_id': 921751990, 'comment_body': 'The time unit for these two parameters is set by the ChronUnitRetry in jetcd.  The type of these two parameters is long, but the type of retryMaxDuration is Duration.\r\n\r\nYou can see the reference of these three parameters in EtcdRegistry.java line 51 to 54.', 'comment_created': datetime.datetime(2022, 7, 15, 2, 28, 4, tzinfo=datetime.timezone.utc), 'commenter': 'wjf222', 'type': 'User'}, {'comment_id': 921754815, 'comment_body': ""```suggestion\r\nIf you want to set the registry center as mysql, you need to set the registry properties in master/worker/api's appplication.yml\r\n```"", 'comment_created': datetime.datetime(2022, 7, 15, 2, 36, 26, tzinfo=datetime.timezone.utc), 'commenter': 'kezhenxu94', 'type': 'User'}, {'comment_id': 921754931, 'comment_body': 'License header', 'comment_created': datetime.datetime(2022, 7, 15, 2, 36, 52, tzinfo=datetime.timezone.utc), 'commenter': 'kezhenxu94', 'type': 'User'}, {'comment_id': 921759367, 'comment_body': ""> The time unit for these two parameters is set by the ChronUnitRetry in jetcd. The type of these two parameters is long, but the type of retryMaxDuration is Duration.\r\n> \r\n> You can see the reference of these three parameters in EtcdRegistry.java line 51 to 54.\r\n\r\nHi, you don't have to just copy the type from JETCD client, using `Duration` as type in our own configurations is for users' convenient, they can just set something like `1s`, `500ms`, without knowing what's the time unit of the config. Also, users don't care what types we pass into `EtcdRegistry.java`, let's provide simplicity to users"", 'comment_created': datetime.datetime(2022, 7, 15, 2, 49, 39, tzinfo=datetime.timezone.utc), 'commenter': 'kezhenxu94', 'type': 'User'}, {'comment_id': 921759942, 'comment_body': 'This sentence is not complete...', 'comment_created': datetime.datetime(2022, 7, 15, 2, 51, 15, tzinfo=datetime.timezone.utc), 'commenter': 'kezhenxu94', 'type': 'User'}, {'comment_id': 921760705, 'comment_body': ""I don't think this is a good way to implement the connectivity state listener, why do you choose to use reflection instead of some native method of jetcd client?"", 'comment_created': datetime.datetime(2022, 7, 15, 2, 53, 28, tzinfo=datetime.timezone.utc), 'commenter': 'kezhenxu94', 'type': 'User'}, {'comment_id': 921877160, 'comment_body': ""> > The time unit for these two parameters is set by the ChronUnitRetry in jetcd. The type of these two parameters is long, but the type of retryMaxDuration is Duration.\r\n> > You can see the reference of these three parameters in EtcdRegistry.java line 51 to 54.\r\n> \r\n> Hi, you don't have to just copy the type from JETCD client, using `Duration` as type in our own configurations is for users' convenient, they can just set something like `1s`, `500ms`, without knowing what's the time unit of the config. Also, users don't care what types we pass into `EtcdRegistry.java`, let's provide simplicity to users\r\n\r\nYou are right,I fix this in [Modify the type of delay](https://github.com/apache/dolphinscheduler/pull/10981/commits/ba5f7687f8842427e4fea67b56f7f1125e48b9d4)"", 'comment_created': datetime.datetime(2022, 7, 15, 7, 8, 26, tzinfo=datetime.timezone.utc), 'commenter': 'wjf222', 'type': 'User'}, {'comment_id': 921884048, 'comment_body': 'Ok, I will try to use keepalive in lease client to listen for connection status.', 'comment_created': datetime.datetime(2022, 7, 15, 7, 18, 56, tzinfo=datetime.timezone.utc), 'commenter': 'wjf222', 'type': 'User'}, {'comment_id': 921930820, 'comment_body': ""> I don't think this is a good way to implement the connectivity state listener, why do you choose to use reflection instead of some native method of jetcd client?\r\n\r\nI made the problem complicated. I only need to periodically try to connect to Etcd, and the connection status can be judged by the connection result.\r\nI have removed the reflection related code. Now, i use the client to apply for a lease to determine whether the connection is successful in [Using the lease to listen connection state](https://github.com/apache/dolphinscheduler/pull/10981/commits/d3ecd2a6eed4af52395d2547ef7486cf435d03a1)"", 'comment_created': datetime.datetime(2022, 7, 15, 8, 18, 43, tzinfo=datetime.timezone.utc), 'commenter': 'wjf222', 'type': 'User'}, {'comment_id': 922597169, 'comment_body': '```suggestion\n * the {@code onUpdate} function is triggered\n```\n', 'comment_created': datetime.datetime(2022, 7, 16, 1, 25, 41, tzinfo=datetime.timezone.utc), 'commenter': 'kezhenxu94', 'type': 'User'}, {'comment_id': 922597265, 'comment_body': '```suggestion\n * Connection state between client and registry center(Etcd, MySql, Zookeeper)\n```\n', 'comment_created': datetime.datetime(2022, 7, 16, 1, 26, 19, tzinfo=datetime.timezone.utc), 'commenter': 'kezhenxu94', 'type': 'User'}, {'comment_id': 922597330, 'comment_body': '```suggestion\n    // The event type {ADD, REMOVE, UPDATE}\n```\n', 'comment_created': datetime.datetime(2022, 7, 16, 1, 26, 56, tzinfo=datetime.timezone.utc), 'commenter': 'kezhenxu94', 'type': 'User'}, {'comment_id': 922597422, 'comment_body': 'This is verbose as the function signatures already indicate that. \n', 'comment_created': datetime.datetime(2022, 7, 16, 1, 27, 51, tzinfo=datetime.timezone.utc), 'commenter': 'kezhenxu94', 'type': 'User'}, {'comment_id': 922597517, 'comment_body': '```suggestion\n     * @return {@code true} if succeeded.\n```\n', 'comment_created': datetime.datetime(2022, 7, 16, 1, 29, 8, tzinfo=datetime.timezone.utc), 'commenter': 'kezhenxu94', 'type': 'User'}, {'comment_id': 922597628, 'comment_body': '```suggestion\n     * Remove the path from the subscribe list.\n```\n', 'comment_created': datetime.datetime(2022, 7, 16, 1, 30, 11, tzinfo=datetime.timezone.utc), 'commenter': 'kezhenxu94', 'type': 'User'}, {'comment_id': 922597886, 'comment_body': '```suggestion\n     * Add a connection listener to collection.\n```\n', 'comment_created': datetime.datetime(2022, 7, 16, 1, 31, 36, tzinfo=datetime.timezone.utc), 'commenter': 'kezhenxu94', 'type': 'User'}, {'comment_id': 922598724, 'comment_body': '```suggestion\n     * @return {@code true} if key exists.\n```\n', 'comment_created': datetime.datetime(2022, 7, 16, 1, 33, 48, tzinfo=datetime.timezone.utc), 'commenter': 'kezhenxu94', 'type': 'User'}, {'comment_id': 922598789, 'comment_body': ""```suggestion\nIf you want to set the registry center as etcd, you need to set the registry properties in master/worker/api's appplication.yml\n```\n"", 'comment_created': datetime.datetime(2022, 7, 16, 1, 34, 34, tzinfo=datetime.timezone.utc), 'commenter': 'kezhenxu94', 'type': 'User'}, {'comment_id': 922599726, 'comment_body': ""Remove this. Don't explain codes if they are already very clear. "", 'comment_created': datetime.datetime(2022, 7, 16, 1, 36, 49, tzinfo=datetime.timezone.utc), 'commenter': 'kezhenxu94', 'type': 'User'}, {'comment_id': 922599878, 'comment_body': '```suggestion\n    private ConnectionState currentConnectivityState() {\n```\n', 'comment_created': datetime.datetime(2022, 7, 16, 1, 37, 51, tzinfo=datetime.timezone.utc), 'commenter': 'kezhenxu94', 'type': 'User'}, {'comment_id': 922600343, 'comment_body': ""Why can't we just simplify this to\n\n```suggestion\n            if (connectionState != ConnectionState.SUSPENDED) {\n                connectionState = currentConnectionState;\n                triggerListener(connectionState);\n```\n\n@ruanwenjun I think the api should also notify even if the previous state is suspended and if the listener isn't interested in this they can just ignored. "", 'comment_created': datetime.datetime(2022, 7, 16, 1, 41, 15, tzinfo=datetime.timezone.utc), 'commenter': 'kezhenxu94', 'type': 'User'}, {'comment_id': 922601112, 'comment_body': 'Reword this there is no channel anymore', 'comment_created': datetime.datetime(2022, 7, 16, 1, 44, 24, tzinfo=datetime.timezone.utc), 'commenter': 'kezhenxu94', 'type': 'User'}, {'comment_id': 922601151, 'comment_body': 'This is no needed right?', 'comment_created': datetime.datetime(2022, 7, 16, 1, 44, 37, tzinfo=datetime.timezone.utc), 'commenter': 'kezhenxu94', 'type': 'User'}, {'comment_id': 926524325, 'comment_body': 'Yes, in fact, for all state changes, we need to notify the listener.\r\nI wrote these logic in MysqlRegistry, since we need to generate `ConnectionState.RECONNECTED` state :), but the state we story in memory is just `RECONNECTED` and `RECONNECTED`.', 'comment_created': datetime.datetime(2022, 7, 21, 10, 38, 1, tzinfo=datetime.timezone.utc), 'commenter': 'ruanwenjun', 'type': 'User'}, {'comment_id': 933918952, 'comment_body': '```suggestion\r\n        if (StringUtils.isNotEmpty(registryProperties.getUser()) && (StringUtils.isNotEmpty(registryProperties.getPassword()))) {\r\n```', 'comment_created': datetime.datetime(2022, 7, 31, 3, 20, 45, tzinfo=datetime.timezone.utc), 'commenter': 'caishunfeng', 'type': 'User'}, {'comment_id': 933919097, 'comment_body': ""If throw ExecutionException, should we call `Thread.currentThread().interrupt()`? It's better to handle separately, WDYT?"", 'comment_created': datetime.datetime(2022, 7, 31, 3, 23, 22, tzinfo=datetime.timezone.utc), 'commenter': 'caishunfeng', 'type': 'User'}, {'comment_id': 933919553, 'comment_body': ""It's better to use the more precise method name, such as `deleteByPrefix(String keyPrefix)`"", 'comment_created': datetime.datetime(2022, 7, 31, 3, 30, tzinfo=datetime.timezone.utc), 'commenter': 'caishunfeng', 'type': 'User'}, {'comment_id': 933919560, 'comment_body': '```suggestion\r\n     * @param the key prefix\r\n```', 'comment_created': datetime.datetime(2022, 7, 31, 3, 30, 11, tzinfo=datetime.timezone.utc), 'commenter': 'caishunfeng', 'type': 'User'}, {'comment_id': 933919987, 'comment_body': ':+1: ', 'comment_created': datetime.datetime(2022, 7, 31, 3, 36, 54, tzinfo=datetime.timezone.utc), 'commenter': 'caishunfeng', 'type': 'User'}, {'comment_id': 933920182, 'comment_body': 'I only marked one place', 'comment_created': datetime.datetime(2022, 7, 31, 3, 39, 19, tzinfo=datetime.timezone.utc), 'commenter': 'caishunfeng', 'type': 'User'}, {'comment_id': 933920190, 'comment_body': 'I only marked one place', 'comment_created': datetime.datetime(2022, 7, 31, 3, 39, 25, tzinfo=datetime.timezone.utc), 'commenter': 'caishunfeng', 'type': 'User'}, {'comment_id': 933956733, 'comment_body': ""This is a function from the Registry interface, maybe we can start an Issue to see other people's opinions"", 'comment_created': datetime.datetime(2022, 7, 31, 9, 30, 58, tzinfo=datetime.timezone.utc), 'commenter': 'wjf222', 'type': 'User'}, {'comment_id': 933956997, 'comment_body': 'I also think deleteByPrefix can better reflect the meaning of the function', 'comment_created': datetime.datetime(2022, 7, 31, 9, 32, 35, tzinfo=datetime.timezone.utc), 'commenter': 'wjf222', 'type': 'User'}, {'comment_id': 934453115, 'comment_body': 'why don‘t we design to make it configurable', 'comment_created': datetime.datetime(2022, 8, 1, 12, 6, 2, tzinfo=datetime.timezone.utc), 'commenter': 'MichaelDeSteven', 'type': 'User'}, {'comment_id': 934455681, 'comment_body': '```suggestion\r\n * This is one of the implementation of {@link Registry}, with this implementation, you need to rely on Etcd cluster to\r\n```', 'comment_created': datetime.datetime(2022, 8, 1, 12, 9, 23, tzinfo=datetime.timezone.utc), 'commenter': 'MichaelDeSteven', 'type': 'User'}, {'comment_id': 935087863, 'comment_body': ""This parameter is only used inside this function and has nothing to do with etcd clusters.So I didn't make it configurable"", 'comment_created': datetime.datetime(2022, 8, 2, 3, 47, 40, tzinfo=datetime.timezone.utc), 'commenter': 'wjf222', 'type': 'User'}, {'comment_id': 939603219, 'comment_body': 'if this is only used in UT, please change the scope to test.', 'comment_created': datetime.datetime(2022, 8, 7, 3, 58, 38, tzinfo=datetime.timezone.utc), 'commenter': 'ruanwenjun', 'type': 'User'}, {'comment_id': 939603263, 'comment_body': ""```suggestion\r\nIf you want to set the registry center as zookeeper, you need to set the registry properties in master/worker/api's appplication.yml\r\n```"", 'comment_created': datetime.datetime(2022, 8, 7, 3, 59, 52, tzinfo=datetime.timezone.utc), 'commenter': 'ruanwenjun', 'type': 'User'}, {'comment_id': 939603312, 'comment_body': '```suggestion\r\nThis module is the zookeeper registry plugin module, this plugin will use zookeeper as the registry center.\r\n```', 'comment_created': datetime.datetime(2022, 8, 7, 4, 0, 31, tzinfo=datetime.timezone.utc), 'commenter': 'ruanwenjun', 'type': 'User'}, {'comment_id': 939603603, 'comment_body': 'Please add timeout.', 'comment_created': datetime.datetime(2022, 8, 7, 4, 3, 48, tzinfo=datetime.timezone.utc), 'commenter': 'ruanwenjun', 'type': 'User'}, {'comment_id': 939603896, 'comment_body': 'Do we need to check if the `threadLocalLockMap.get()` will null?', 'comment_created': datetime.datetime(2022, 8, 7, 4, 8, 37, tzinfo=datetime.timezone.utc), 'commenter': 'ruanwenjun', 'type': 'User'}, {'comment_id': 939603969, 'comment_body': '```suggestion\r\n            throw new RegistryException(""etcd get lock error, lockKey: "" + key, e);\r\n```', 'comment_created': datetime.datetime(2022, 8, 7, 4, 9, 47, tzinfo=datetime.timezone.utc), 'commenter': 'ruanwenjun', 'type': 'User'}, {'comment_id': 939604029, 'comment_body': '```suggestion\r\n            throw new RegistryException(""etcd check key is existed error, key: "" + key, e);\r\n```', 'comment_created': datetime.datetime(2022, 8, 7, 4, 10, 14, tzinfo=datetime.timezone.utc), 'commenter': 'ruanwenjun', 'type': 'User'}, {'comment_id': 939604042, 'comment_body': '```suggestion\r\n    private volatile ConnectionState connectionState;\r\n```', 'comment_created': datetime.datetime(2022, 8, 7, 4, 10, 26, tzinfo=datetime.timezone.utc), 'commenter': 'kezhenxu94', 'type': 'User'}, {'comment_id': 939604197, 'comment_body': '```suggestion\r\n    private static final long TIME_TO_LIVE_SECONDS = 30L;\r\n```', 'comment_created': datetime.datetime(2022, 8, 7, 4, 12, 7, tzinfo=datetime.timezone.utc), 'commenter': 'kezhenxu94', 'type': 'User'}, {'comment_id': 939604267, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2022, 8, 7, 4, 13, 35, tzinfo=datetime.timezone.utc), 'commenter': 'ruanwenjun', 'type': 'User'}, {'comment_id': 943310151, 'comment_body': 'If this is null, the remove function will throw an exception', 'comment_created': datetime.datetime(2022, 8, 11, 10, 1, 4, tzinfo=datetime.timezone.utc), 'commenter': 'wjf222', 'type': 'User'}]","[{'commit_sha': 'de09ac4e6c2163ad02495f74417632a43ebfbeb8', 'committer_username': 'wjf222', 'committer_name': 'wjf', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 9, 5, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73c45b521394a1148c4b5b186d334093a49949e6', 'committer_username': 'wjf222', 'committer_name': 'wjf', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 9, 5, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9774bd38a427424568048ced09051c1af52b49c7', 'committer_username': 'wjf222', 'committer_name': 'wjf', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 9, 5, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e45adbb8f27a4ccb0321b25e038fa9b079cb8c8f', 'committer_username': 'wjf222', 'committer_name': 'wjf', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 9, 5, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4aa9bcce85ede0d4322fb13c42cc955e8024b517', 'committer_username': 'wjf222', 'committer_name': 'wjf', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 9, 5, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf64c9c676416601068d35b7ffe9baa7df65a3f7', 'committer_username': 'wjf222', 'committer_name': 'wjf', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 9, 5, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '63edd4fe66ca04996b9530027f4df759f82b6e0c', 'committer_username': 'wjf222', 'committer_name': 'wjf', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 9, 5, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c806757ff8e3e59924d802d2c4e1aa67e82e41c7', 'committer_username': 'wjf222', 'committer_name': 'wjf', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 9, 5, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d13bf546738818ad4e35caa119f540b7605780e', 'committer_username': 'wjf222', 'committer_name': 'wjf', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 9, 5, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '112ff370ceca3275bf1fa52a19f4da918ea9fec2', 'committer_username': 'wjf222', 'committer_name': 'wjf', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 9, 5, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '65d0b9d78401478d0f15830b1f949e725771a20a', 'committer_username': 'wjf222', 'committer_name': 'wjf', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 9, 5, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba5f7687f8842427e4fea67b56f7f1125e48b9d4', 'committer_username': 'wjf222', 'committer_name': 'wjf', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 9, 5, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3ecd2a6eed4af52395d2547ef7486cf435d03a1', 'committer_username': 'wjf222', 'committer_name': 'wjf', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 9, 5, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48dc9982af58b5015110469c3857312de858d0c4', 'committer_username': 'wjf222', 'committer_name': 'wjf', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 9, 5, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a857a3054d1df20f89c13029fd8aedae87b647dd', 'committer_username': 'wjf222', 'committer_name': 'wjf', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 9, 5, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b909991db6889faa8c97c937f418f27abebd58d', 'committer_username': 'wjf222', 'committer_name': 'wjf', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 9, 5, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe50f9de8f226a4c61e91e76ad946ccad0286287', 'committer_username': 'wjf222', 'committer_name': 'wjf', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 9, 5, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd41a2076a27f5b1976c24605988b0c8a0b1434f3', 'committer_username': 'wjf222', 'committer_name': 'wjf', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 9, 5, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95f8ff37aa3844a4efdf2774983e1077a9751000', 'committer_username': 'wjf222', 'committer_name': 'wjf', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 9, 5, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b071775a74fc549def61cb04ba5afc20bf8ec429', 'committer_username': 'wjf222', 'committer_name': 'wjf', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 9, 5, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aecbdd91271bd06603bb26cab85744f12efb4a9c', 'committer_username': 'wjf222', 'committer_name': 'wjf', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 9, 5, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0019abb63030c234d063793799f68963ca395cad', 'committer_username': 'wjf222', 'committer_name': 'wjf', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 9, 5, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64a512b0ea4ef78a70598a44228ee247b6592603', 'committer_username': 'wjf222', 'committer_name': 'wjf', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 9, 5, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '019cfb42e1c461249dca44833e648146921f0c70', 'committer_username': 'wjf222', 'committer_name': 'wjf', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 9, 5, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c2d94ca1b500a21267e55754e355b3360b762af', 'committer_username': 'wjf222', 'committer_name': 'wjf', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 9, 5, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '33c6aba65461e17440c7d7792e9c36ed65faa6e5', 'committer_username': 'wjf222', 'committer_name': 'wjf', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 9, 5, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47f1172a563129939ecba4b336cca1f9d9cf9ab6', 'committer_username': 'wjf222', 'committer_name': 'wjf', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 9, 5, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b1735c1bfb14ac9d32ee4420178f5af26911e0f', 'committer_username': 'wjf222', 'committer_name': 'wjf', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 9, 5, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5e93f40d3ad77d72a30c2fcb544a2d665e54974', 'committer_username': 'wjf222', 'committer_name': 'wjf', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 9, 5, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08b6b2e7e0d08bc48f1edb73717e98e7021dfc06', 'committer_username': 'wjf222', 'committer_name': 'wjf', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 9, 5, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea4fc8bd5662fba7910800e82195cc3ea1bb9a47', 'committer_username': 'wjf222', 'committer_name': 'wjf', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 9, 5, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '716f4b8bd961a6190ab650c7644437f5d3fd89c1', 'committer_username': 'wjf222', 'committer_name': 'wjf', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 9, 5, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef67f86cf78232f6eb5e85e5febd967ae5624269', 'committer_username': 'wjf222', 'committer_name': 'wjf', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 9, 5, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc365504c67b599c8bbc33687f3f57cc1f892eb2', 'committer_username': 'wjf222', 'committer_name': 'wjf', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 9, 5, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cdb19ea0fa43f5cd7d42cd763126ab94059354f2', 'committer_username': 'wjf222', 'committer_name': 'wjf', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 9, 5, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '638e309dd6a027e032453cd055c161ac879a748f', 'committer_username': 'wjf222', 'committer_name': 'wjf', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 9, 5, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eaa2a19da4134ef1800c60c9efddfcdf92d89b3b', 'committer_username': 'wjf222', 'committer_name': 'wjf', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 9, 5, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '98745105f8b824fc98c2e48abfe1ac158f0eaadb', 'committer_username': 'wjf222', 'committer_name': 'wjf', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 9, 5, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a8ea4045761f8f987b4d8334fee7f602c51d502c', 'committer_username': 'wjf222', 'committer_name': 'wjf', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 9, 5, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd2063d6bc06be83c1f6f24754f2ca8a7c0021617', 'committer_username': 'wjf222', 'committer_name': 'wjf', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 9, 5, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e792ea7ecdcf130da140b26f06a483fabf22e0fc', 'committer_username': 'wjf222', 'committer_name': 'wjf', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 9, 5, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '123bc4a2c774554e92f6485f1c137cc60439e716', 'committer_username': 'wjf222', 'committer_name': 'wjf', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 9, 5, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '290c15cc6b9966d9b9181a7482b8718a0538a827', 'committer_username': 'wjf222', 'committer_name': 'wjf', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 9, 5, 57, tzinfo=datetime.timezone.utc)}]",wjf,52238329,,User,,16,,9,10

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
173335706,dolphinscheduler,apache/dolphinscheduler,Java,4548,12591,331,595,8481,351,29,33,"[{'id': 997273909, 'number': 10981, 'closed': datetime.datetime(2022, 9, 6, 14, 25, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 15, 2, 0, 32, tzinfo=datetime.timezone.utc), 'time_taken': 4623887.0, 'time_delta': '53 days, 12:24:47', 'additions': 2088, 'deletions': 4, 'state': 'closed'}, {'id': 979730166, 'number': 10633, 'closed': datetime.datetime(2022, 6, 29, 3, 20, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 27, 8, 16, 46, tzinfo=datetime.timezone.utc), 'time_taken': 155047.0, 'time_delta': '1 day, 19:04:07', 'additions': 0, 'deletions': 15, 'state': 'closed'}, {'id': 974607267, 'number': 10542, 'closed': datetime.datetime(2022, 6, 22, 9, 31, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 22, 5, 52, 43, tzinfo=datetime.timezone.utc), 'time_taken': 13118.0, 'time_delta': '3:38:38', 'additions': 4, 'deletions': 12, 'state': 'closed'}]"
