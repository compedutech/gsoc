pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
635538854,NF: extend the align workflow with Rigid+IsoScaling and Rigid+Scaling,"Part of #2276 

### Proposed changes
- Add RigidIsoScaling and RigidScaling options to the align workflow
- Update corresponding tests


By the way, I've noticed that the registration parameters defined [here](https://github.com/dipy/dipy/pull/2390/files#diff-b6bf9b9a51f8dfc421e3896b6ea103012d81d9eae8b07e252e0f5a66a220f42fL204) are not used as the [setup_random_transform ](https://github.com/dipy/dipy/blob/master/dipy/align/tests/test_parzenhist.py#L259)function calculates them randomly.",True,2390,https://api.github.com/repos/dipy/dipy/pulls/2390,https://github.com/dipy/dipy/pull/2390,closed,361,615,5,11,10,8,1,0,[{'name': 'type:Enhancement'}],2021-05-09 08:02:51+00:00,2021-07-22 06:37:01+00:00,6388450.0,"73 days, 22:34:10","[{'comment_id': 658018665, 'comment_body': 'Can you intialize it to `False`', 'comment_created': datetime.datetime(2021, 6, 24, 14, 49, 25, tzinfo=datetime.timezone.utc), 'commenter': 'skoudoro', 'type': 'User'}, {'comment_id': 658018924, 'comment_body': '`bool, optional`', 'comment_created': datetime.datetime(2021, 6, 24, 14, 49, 44, tzinfo=datetime.timezone.utc), 'commenter': 'skoudoro', 'type': 'User'}, {'comment_id': 658023503, 'comment_body': 'code duplication: you can do \r\n\r\n```python\r\nrigid, xopt, fopt = reg.optimize(static, moving, transform, None,\r\n                                         static_affine, moving_affine,\r\n                                         starting_affine=starting_affine,\r\n                                         ret_metric=True)\r\nif ret_metric:\r\n    return rigid.affine, xopt, fopt\r\nreturn rigid.affine\r\n```', 'comment_created': datetime.datetime(2021, 6, 24, 14, 54, 48, tzinfo=datetime.timezone.utc), 'commenter': 'skoudoro', 'type': 'User'}, {'comment_id': 658024585, 'comment_body': 'same comment as above', 'comment_created': datetime.datetime(2021, 6, 24, 14, 56, tzinfo=datetime.timezone.utc), 'commenter': 'skoudoro', 'type': 'User'}, {'comment_id': 658025789, 'comment_body': 'you need to respect the order of the parameter, it is confusing otherwise', 'comment_created': datetime.datetime(2021, 6, 24, 14, 57, 22, tzinfo=datetime.timezone.utc), 'commenter': 'skoudoro', 'type': 'User'}, {'comment_id': 658026118, 'comment_body': 'same comment as above', 'comment_created': datetime.datetime(2021, 6, 24, 14, 57, 43, tzinfo=datetime.timezone.utc), 'commenter': 'skoudoro', 'type': 'User'}, {'comment_id': 666999135, 'comment_body': 'can you add a test for that? (`npt.assert_raises(ValueError, ...)`)', 'comment_created': datetime.datetime(2021, 7, 9, 14, 37, 58, tzinfo=datetime.timezone.utc), 'commenter': 'skoudoro', 'type': 'User'}, {'comment_id': 670238890, 'comment_body': 'done!', 'comment_created': datetime.datetime(2021, 7, 15, 8, 15, 29, tzinfo=datetime.timezone.utc), 'commenter': 'drombas', 'type': 'User'}]","[{'commit_sha': '437052e6d3613e63ac922d2f53a5396a1cf43c9d', 'committer_username': 'drombas', 'committer_name': 'David Romero-Bascones', 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 13, 9, 57, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e2468691d8b96f22a266042c9f4f0841bc457116', 'committer_username': 'drombas', 'committer_name': 'David Romero-Bascones', 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 13, 9, 57, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cbaa2d3f57bcf47fc87f60c76c820bb9f33cc6c7', 'committer_username': 'drombas', 'committer_name': 'David Romero-Bascones', 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 13, 9, 57, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '658ddba24b907ce3413f6e81a698fd5c2ee6c907', 'committer_username': 'drombas', 'committer_name': 'David Romero-Bascones', 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 13, 9, 57, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9046aa4232ee0693dd263028196ffc0f35d4238', 'committer_username': 'drombas', 'committer_name': 'David Romero-Bascones', 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 13, 9, 57, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba33ce17bb86b4d21b475ae46c4b6a12bd5715f2', 'committer_username': 'drombas', 'committer_name': 'David Romero-Bascones', 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 13, 9, 57, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48224caade79c3983b759a431bfd1f911cab01f1', 'committer_username': 'drombas', 'committer_name': 'David Romero-Bascones', 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 13, 9, 57, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '114760923dd2122424cc19ddcab1a459a1dccbc6', 'committer_username': 'drombas', 'committer_name': 'David Romero-Bascones', 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 13, 9, 57, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e7bba10e2afa37bf747cc81e4bc67a57f4b28cd', 'committer_username': 'drombas', 'committer_name': 'David Romero-Bascones', 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 13, 9, 57, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd4286a77ebc644e374920216eca812e21d14c42', 'committer_username': 'drombas', 'committer_name': 'David Romero-Bascones', 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 13, 9, 57, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cdd5723017c3e9be0b14567c4a77caf4b43fb2ca', 'committer_username': 'drombas', 'committer_name': 'David Romero-Bascones', 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 13, 9, 57, 44, tzinfo=datetime.timezone.utc)}]",David Romero-Bascones,50577357,,User,,13,,2,10
696909507,[WIP] NF: Population specific bundle atlas creation,"Hi! This is part of GSoC 2021. 

### Goal 
Given the segmented bundles of several subjects as input, compute a bundle atlas that is representative of that population.

### Implementation
The input bundles are combined in pairs following a tree structure until a single bundle is obtained:
<p align=""center"">
 <img src=""https://user-images.githubusercontent.com/50577357/126971092-044400f6-41b8-472d-81ba-73df14b3abb4.png"" width=""600"" height=""300"" >
</p>

The main logic is implemented in ``atlasing.bundles.compute_bundle_atlas()`` and consists of these steps:
1. Check input arguments and retrieve the list of bundles and subjects to be processed
2. Preprocess the bundles (set the number of points per streamline, remove bundles with few streamlines...)
3. Create the tree structure with ``atlasing.bundles.get_pairwise_tree()``
4. Build the atlas by following the tree. At each pair, bundles are aligned and then combined by ``atlasing.bundles.combine_bundles()``, which implements several methods to match the streamlines and combine them into a single bundle.

**Comments**
This is WIP as we are still testing different approaches and need to reach a final decision on: 
- [ ] Which input file formats to support (currently it only supports trk)
- [ ] Which bundle combination methods to support

### List of tasks:
- [x] Create atlasing module and first tests
- [x] Extend the coverage of atlasing module tests
- [x] Add tests for the workflow
- [x] Polish docstrings and comments
- [ ] Create an example/tutorial",False,2425,https://api.github.com/repos/dipy/dipy/pulls/2425,https://github.com/dipy/dipy/pull/2425,open,967,2,11,9,6,41,0,0,[],2021-07-26 10:44:50+00:00,,0.0,,"[{'comment_id': 682096022, 'comment_body': 'This error could be more informative: \r\n```suggestion\r\n        raise ValueError(f\'You provided a distance input {distance}, but the possible options are: ""mdf"" or ""mdf_se""\')\r\n```', 'comment_created': datetime.datetime(2021, 8, 3, 20, 55, 39, tzinfo=datetime.timezone.utc), 'commenter': 'arokem', 'type': 'User'}, {'comment_id': 682096331, 'comment_body': 'Same here: what value did the user provide? What are valid options?', 'comment_created': datetime.datetime(2021, 8, 3, 20, 56, 11, tzinfo=datetime.timezone.utc), 'commenter': 'arokem', 'type': 'User'}, {'comment_id': 682127057, 'comment_body': 'Please use Python logging instead of bare `print` calls', 'comment_created': datetime.datetime(2021, 8, 3, 21, 52, 23, tzinfo=datetime.timezone.utc), 'commenter': 'arokem', 'type': 'User'}, {'comment_id': 682127454, 'comment_body': 'Please use logging instead of bare calls to `print`', 'comment_created': datetime.datetime(2021, 8, 3, 21, 53, 12, tzinfo=datetime.timezone.utc), 'commenter': 'arokem', 'type': 'User'}, {'comment_id': 682127773, 'comment_body': '```suggestion\r\n    # Get subjects (from in_dir or a BIDS-like participants.tsv file)\r\n```', 'comment_created': datetime.datetime(2021, 8, 3, 21, 53, 55, tzinfo=datetime.timezone.utc), 'commenter': 'arokem', 'type': 'User'}, {'comment_id': 682129409, 'comment_body': ""I wonder whether this shouldn't go into `dipy.viz`"", 'comment_created': datetime.datetime(2021, 8, 3, 21, 57, 23, tzinfo=datetime.timezone.utc), 'commenter': 'arokem', 'type': 'User'}, {'comment_id': 682243289, 'comment_body': 'Not in my experience ðŸ˜„ ', 'comment_created': datetime.datetime(2021, 8, 4, 2, 39, 31, tzinfo=datetime.timezone.utc), 'commenter': 'arokem', 'type': 'User'}, {'comment_id': 682244937, 'comment_body': 'This can be pretty long, no?', 'comment_created': datetime.datetime(2021, 8, 4, 2, 44, 42, tzinfo=datetime.timezone.utc), 'commenter': 'arokem', 'type': 'User'}, {'comment_id': 690252850, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 17, 10, 47, 28, tzinfo=datetime.timezone.utc), 'commenter': 'drombas', 'type': 'User'}, {'comment_id': 690253121, 'comment_body': 'Done, thanks!', 'comment_created': datetime.datetime(2021, 8, 17, 10, 47, 55, tzinfo=datetime.timezone.utc), 'commenter': 'drombas', 'type': 'User'}, {'comment_id': 690256380, 'comment_body': 'I putted there cause I use it to save the output as png files but makes sense to move it to ``dipy.viz``. @skoudoro what do you think?', 'comment_created': datetime.datetime(2021, 8, 17, 10, 52, 24, tzinfo=datetime.timezone.utc), 'commenter': 'drombas', 'type': 'User'}, {'comment_id': 690257439, 'comment_body': 'Yes but I found it useful as a safety check. Using logger.debug() might be a good option?', 'comment_created': datetime.datetime(2021, 8, 17, 10, 54, 5, tzinfo=datetime.timezone.utc), 'commenter': 'drombas', 'type': 'User'}, {'comment_id': 690257529, 'comment_body': 'Good catch', 'comment_created': datetime.datetime(2021, 8, 17, 10, 54, 13, tzinfo=datetime.timezone.utc), 'commenter': 'drombas', 'type': 'User'}, {'comment_id': 690259185, 'comment_body': ""I don't remember where I saw it xD. Anyway, it looks like nothing crashes without it."", 'comment_created': datetime.datetime(2021, 8, 17, 10, 56, 48, tzinfo=datetime.timezone.utc), 'commenter': 'drombas', 'type': 'User'}, {'comment_id': 690688143, 'comment_body': 'population-specific streamline-based bundle atlases. ', 'comment_created': datetime.datetime(2021, 8, 17, 20, 11, 53, tzinfo=datetime.timezone.utc), 'commenter': 'BramshQamar', 'type': 'User'}, {'comment_id': 690688796, 'comment_body': 'items or bundles?', 'comment_created': datetime.datetime(2021, 8, 17, 20, 13, tzinfo=datetime.timezone.utc), 'commenter': 'BramshQamar', 'type': 'User'}, {'comment_id': 690691011, 'comment_body': ""Does this create a whole-brain atlas from given bundles? eg: merging all bundles to create one whole brain atlas. Or does it create one atlas bundle per bundle type? I think it's the second one. Maybe just rephrase it."", 'comment_created': datetime.datetime(2021, 8, 17, 20, 16, 26, tzinfo=datetime.timezone.utc), 'commenter': 'BramshQamar', 'type': 'User'}, {'comment_id': 690692485, 'comment_body': ""Let's just use the word 'bundle' since it is a bundle-specific atlas or do you think this is more generic and could be used for other purposes? If it's the second, then maybe we need to move it to utils? "", 'comment_created': datetime.datetime(2021, 8, 17, 20, 18, 49, tzinfo=datetime.timezone.utc), 'commenter': 'BramshQamar', 'type': 'User'}, {'comment_id': 690695308, 'comment_body': 'How about the variable name `single`?', 'comment_created': datetime.datetime(2021, 8, 17, 20, 23, 7, tzinfo=datetime.timezone.utc), 'commenter': 'BramshQamar', 'type': 'User'}, {'comment_id': 690696414, 'comment_body': 'How about the variable name `unmatched`?', 'comment_created': datetime.datetime(2021, 8, 17, 20, 24, 50, tzinfo=datetime.timezone.utc), 'commenter': 'BramshQamar', 'type': 'User'}, {'comment_id': 690697681, 'comment_body': 'It would be nice to add a list of all available comb_methods for this function.', 'comment_created': datetime.datetime(2021, 8, 17, 20, 26, 54, tzinfo=datetime.timezone.utc), 'commenter': 'BramshQamar', 'type': 'User'}, {'comment_id': 690697983, 'comment_body': 'And a short description of what each method does.', 'comment_created': datetime.datetime(2021, 8, 17, 20, 27, 24, tzinfo=datetime.timezone.utc), 'commenter': 'BramshQamar', 'type': 'User'}, {'comment_id': 690698923, 'comment_body': ""Same as above (list of distances supported). Also, explain why ramdom_pick doesn't need distance."", 'comment_created': datetime.datetime(2021, 8, 17, 20, 28, 47, tzinfo=datetime.timezone.utc), 'commenter': 'BramshQamar', 'type': 'User'}, {'comment_id': 690699596, 'comment_body': 'Remind me why we are reshaping streamlines here?', 'comment_created': datetime.datetime(2021, 8, 17, 20, 29, 43, tzinfo=datetime.timezone.utc), 'commenter': 'BramshQamar', 'type': 'User'}, {'comment_id': 690701219, 'comment_body': 'Define this function outside of the `combine_bundles` function so others can also use it. ', 'comment_created': datetime.datetime(2021, 8, 17, 20, 32, 14, tzinfo=datetime.timezone.utc), 'commenter': 'BramshQamar', 'type': 'User'}, {'comment_id': 690701707, 'comment_body': 'Maybe it would be better to have it where other distance functions are defined.', 'comment_created': datetime.datetime(2021, 8, 17, 20, 32, 59, tzinfo=datetime.timezone.utc), 'commenter': 'BramshQamar', 'type': 'User'}, {'comment_id': 690703270, 'comment_body': 'compute the bundle atlas', 'comment_created': datetime.datetime(2021, 8, 17, 20, 35, 17, tzinfo=datetime.timezone.utc), 'commenter': 'BramshQamar', 'type': 'User'}, {'comment_id': 690705164, 'comment_body': 'Add a list of available options. ', 'comment_created': datetime.datetime(2021, 8, 17, 20, 38, 16, tzinfo=datetime.timezone.utc), 'commenter': 'BramshQamar', 'type': 'User'}, {'comment_id': 690707041, 'comment_body': 'Do you think we should make this point more explicit that this method assumes bundles to be in standard space and not in the native space. If they are in native space then provide bundles in standard space for registration. wE should write this at the start of the function. Should we add a flag for that?', 'comment_created': datetime.datetime(2021, 8, 17, 20, 41, 17, tzinfo=datetime.timezone.utc), 'commenter': 'BramshQamar', 'type': 'User'}, {'comment_id': 690708973, 'comment_body': '`atlas` is a list that has final atlas bundles (eg: AF_L, CST_L, etc) and `atlas_merged` is whole_brain created by putting all bundles in one object?', 'comment_created': datetime.datetime(2021, 8, 17, 20, 44, 20, tzinfo=datetime.timezone.utc), 'commenter': 'BramshQamar', 'type': 'User'}, {'comment_id': 690711160, 'comment_body': 'Atlasing has started', 'comment_created': datetime.datetime(2021, 8, 17, 20, 47, 43, tzinfo=datetime.timezone.utc), 'commenter': 'BramshQamar', 'type': 'User'}, {'comment_id': 690712123, 'comment_body': 'unmatched bundle', 'comment_created': datetime.datetime(2021, 8, 17, 20, 49, 6, tzinfo=datetime.timezone.utc), 'commenter': 'BramshQamar', 'type': 'User'}, {'comment_id': 690716452, 'comment_body': 'what is `expected_n_reg`?', 'comment_created': datetime.datetime(2021, 8, 17, 20, 55, 37, tzinfo=datetime.timezone.utc), 'commenter': 'BramshQamar', 'type': 'User'}, {'comment_id': 690717522, 'comment_body': 'Did you generate this data? ', 'comment_created': datetime.datetime(2021, 8, 17, 20, 57, 22, tzinfo=datetime.timezone.utc), 'commenter': 'BramshQamar', 'type': 'User'}, {'comment_id': 690721649, 'comment_body': ""I think we should drop the word 'Discrete'. "", 'comment_created': datetime.datetime(2021, 8, 17, 21, 3, 50, tzinfo=datetime.timezone.utc), 'commenter': 'BramshQamar', 'type': 'User'}, {'comment_id': 690721932, 'comment_body': 'Add some more details', 'comment_created': datetime.datetime(2021, 8, 17, 21, 4, 17, tzinfo=datetime.timezone.utc), 'commenter': 'BramshQamar', 'type': 'User'}, {'comment_id': 690722209, 'comment_body': 'Same comment as in the other functions. ', 'comment_created': datetime.datetime(2021, 8, 17, 21, 4, 47, tzinfo=datetime.timezone.utc), 'commenter': 'BramshQamar', 'type': 'User'}, {'comment_id': 690724065, 'comment_body': ""You can just `return atlas, atlas_merged`\r\n`atlas_merged` can be None if there isn't one. This way the function output will be consistent (returns fixed number of objects)."", 'comment_created': datetime.datetime(2021, 8, 17, 21, 8, 2, tzinfo=datetime.timezone.utc), 'commenter': 'BramshQamar', 'type': 'User'}, {'comment_id': 690724671, 'comment_body': 'Will solve the issue in the workflow as well where you have written the same function call twice with if and else conditions. ', 'comment_created': datetime.datetime(2021, 8, 17, 21, 8, 56, tzinfo=datetime.timezone.utc), 'commenter': 'BramshQamar', 'type': 'User'}, {'comment_id': 690725579, 'comment_body': 'You can call it one time and just always have it return two outputs. See my comment above in `compute_atlas_bundle `function.', 'comment_created': datetime.datetime(2021, 8, 17, 21, 10, 21, tzinfo=datetime.timezone.utc), 'commenter': 'BramshQamar', 'type': 'User'}, {'comment_id': 702110136, 'comment_body': 'Why unlist and relist here?', 'comment_created': datetime.datetime(2021, 9, 3, 19, 6, 43, tzinfo=datetime.timezone.utc), 'commenter': 'BramshQamar', 'type': 'User'}]","[{'commit_sha': 'e322d37c899035018b1827a1e090b57b15c0e546', 'committer_username': 'drombas', 'committer_name': 'David Romero-Bascones', 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 13, 9, 57, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a9279f8844aa7d57837fd03a7cf287a965909c9', 'committer_username': 'drombas', 'committer_name': 'David Romero-Bascones', 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 13, 9, 57, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '105c3c72e91720b53b901df5be7ca183e6ef9586', 'committer_username': 'drombas', 'committer_name': 'David Romero-Bascones', 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 13, 9, 57, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9634d816f3ba917f70b3e666dec7961d1d1b1c9', 'committer_username': 'drombas', 'committer_name': 'David Romero-Bascones', 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 13, 9, 57, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8dd523d72af19754faaaf45b3f6e143098ac667a', 'committer_username': 'drombas', 'committer_name': 'David Romero-Bascones', 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 13, 9, 57, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db45ca5ab167c86084a19cc528d9f8c69a05717b', 'committer_username': 'drombas', 'committer_name': 'David Romero-Bascones', 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 13, 9, 57, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e52726c96f2ee8977d4aa5eeb0a31310e285de3', 'committer_username': 'drombas', 'committer_name': 'David Romero-Bascones', 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 13, 9, 57, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c9dda4c7426d162d32ff433172943a0e74283fc0', 'committer_username': 'drombas', 'committer_name': 'David Romero-Bascones', 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 13, 9, 57, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e352978a930962ee6188e567c836a7c1c5dc6b5', 'committer_username': 'drombas', 'committer_name': 'David Romero-Bascones', 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 13, 9, 57, 44, tzinfo=datetime.timezone.utc)}]",David Romero-Bascones,50577357,,User,,13,,2,10

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
505209,dipy,dipy/dipy,Python,434,697,54,163,14303,188,25,54,"[{'id': 872911983, 'number': 2553, 'closed': datetime.datetime(2022, 9, 30, 16, 26, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 7, 9, 53, 13, tzinfo=datetime.timezone.utc), 'time_taken': 17908380.0, 'time_delta': '207 days, 6:33:00', 'additions': 665, 'deletions': 5, 'state': 'closed'}, {'id': 696909507, 'number': 2425, 'closed': None, 'created': datetime.datetime(2021, 7, 26, 10, 44, 50, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 967, 'deletions': 2, 'state': 'open'}, {'id': 635538854, 'number': 2390, 'closed': datetime.datetime(2021, 7, 22, 6, 37, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 9, 8, 2, 51, tzinfo=datetime.timezone.utc), 'time_taken': 6388450.0, 'time_delta': '73 days, 22:34:10', 'additions': 361, 'deletions': 615, 'state': 'closed'}, {'id': 629060092, 'number': 2385, 'closed': datetime.datetime(2021, 5, 4, 20, 47, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 3, 12, 10, 28, tzinfo=datetime.timezone.utc), 'time_taken': 117431.0, 'time_delta': '1 day, 8:37:11', 'additions': 97, 'deletions': 66, 'state': 'closed'}, {'id': 609785304, 'number': 2352, 'closed': datetime.datetime(2021, 4, 25, 12, 55, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 6, 11, 49, 39, tzinfo=datetime.timezone.utc), 'time_taken': 1645523.0, 'time_delta': '19 days, 1:05:23', 'additions': 433, 'deletions': 261, 'state': 'closed'}, {'id': 600837256, 'number': 2341, 'closed': datetime.datetime(2021, 4, 20, 18, 48, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 25, 15, 26, 47, tzinfo=datetime.timezone.utc), 'time_taken': 2258485.0, 'time_delta': '26 days, 3:21:25', 'additions': 30, 'deletions': 30, 'state': 'closed'}]"
