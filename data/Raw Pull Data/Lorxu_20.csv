pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
594163457,"chore: fix imports, replace Region with BlockArea and BlockRegion",,True,19,https://api.github.com/repos/Terasology/TutorialWorldGeneration/pulls/19,https://github.com/Terasology/TutorialWorldGeneration/pull/19,closed,381,373,21,5,1,16,3,0,"[{'name': 'Topic: WorldGen'}, {'name': 'Type: Chore'}, {'name': 'Topic: Stabilization'}]",2021-03-16 18:59:44+00:00,2021-06-08 18:53:23+00:00,7257219.0,"83 days, 23:53:39","[{'comment_id': 596292676, 'comment_body': 'code style\r\n```suggestion\r\n            } else {\r\n```', 'comment_created': datetime.datetime(2021, 3, 17, 18, 44, 34, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 596413511, 'comment_body': '`BlockRegion` does not have a member function `createFromCenterExtents`\r\nplease try to compile the code before pushing\r\n```suggestion\r\n            BlockRegion walls = BlockRegion(centerHousePosition).expand(extent);\r\n            BlockRegion inside = BlockRegion(centerHousePosition).expand(extent - 1);\r\n```', 'comment_created': datetime.datetime(2021, 3, 17, 22, 2, 43, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 596413736, 'comment_body': 'I recommend leveraging the [IntelliJ code optimization feature](https://www.jetbrains.com/help/idea/reformat-and-rearrange-code.html)\r\n```suggestion\r\n        for (Vector2ic position : processArea) {\r\n```', 'comment_created': datetime.datetime(2021, 3, 17, 22, 3, 12, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 596420795, 'comment_body': 'Please stick with `TeraMath.floorToInt` for the time being, this should still be available for use - eventually it might be moved to joml, though.', 'comment_created': datetime.datetime(2021, 3, 17, 22, 17, 53, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 596420856, 'comment_body': 'see above', 'comment_created': datetime.datetime(2021, 3, 17, 22, 18, 1, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 598276594, 'comment_body': 'I think we need to provide Vector3ic to chunk.setBlock() method in lines 48 and 50. But Chunks.toRelative(position) returns Vector3i. ', 'comment_created': datetime.datetime(2021, 3, 21, 13, 3, 30, tzinfo=datetime.timezone.utc), 'commenter': 'mahela97', 'type': 'User'}, {'comment_id': 598277783, 'comment_body': '`Vector3i` is a **subtype** of `Vector3ic` - you can use the non-constant `Vector3i` wherever the constant variant is required. :nerd_face: \r\n\r\nThe other way this does not hold. In that case, we have to turn the constant vector into a mutable one - by allocating a new vector instance and making a copy of our vector like so:\r\n\r\n```java\r\nVector3i mutableVector = new Vector3i(constantVector);\r\n```', 'comment_created': datetime.datetime(2021, 3, 21, 13, 12, 13, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 598278049, 'comment_body': ""A problem in this line could be that `position` is immutable but `Chunks.toRelative(...)` tries to modify it. There are multiple ways to solve this, for instance:\r\n\r\n```java\r\n// pass a mutable copy of 'position' to the method\r\nChunks.toRelative(new Vector3i(position))\r\n\r\n// pass the immutable vector as is, but provide a new mutable vector to store the result in\r\nChunks.toRelative(position, new Vector3i())\r\n```\r\n\r\nIn case this all happens in a loop we can make a small performance improvement by re-using the same mutable vector in some cases. But one step at a time :wink: "", 'comment_created': datetime.datetime(2021, 3, 21, 13, 14, 42, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 598280393, 'comment_body': 'Yes changing it to\r\n chunk.setBlock(Chunks.toRelative(new Vector3i(position)), dirt); \r\nfixed the problem for me.', 'comment_created': datetime.datetime(2021, 3, 21, 13, 30, 23, tzinfo=datetime.timezone.utc), 'commenter': 'mahela97', 'type': 'User'}, {'comment_id': 598784364, 'comment_body': ""Isn't it like this?\r\n\r\n```suggestion\r\n           BlockRegion walls = new BlockRegion(centerHousePosition).expand(0,extent,0);\r\n            BlockRegion inside =new BlockRegion(centerHousePosition).expand(0,extent - 1,0);\r\n```"", 'comment_created': datetime.datetime(2021, 3, 22, 14, 49, 5, tzinfo=datetime.timezone.utc), 'commenter': 'mahela97', 'type': 'User'}, {'comment_id': 598840784, 'comment_body': 'Since we need to provide Vector3ic,\r\n\r\n```suggestion\r\n                    chunk.setBlock(Chunks.toRelative(new Vector3i(newBlockPosition)), stone);\r\n```', 'comment_created': datetime.datetime(2021, 3, 22, 15, 43, 31, tzinfo=datetime.timezone.utc), 'commenter': 'mahela97', 'type': 'User'}, {'comment_id': 646383884, 'comment_body': ""As these tutorial modules should not only explain the concept, but also display good/best practice use. Thefore, let's talk math üë®\u200düè´ \r\n\r\n`chunk.setBlock(...)` does take a position for read-only access, i.e., it does not store the instance you pass in. We can make use of this property to only having a single instance of `Vector3i` that we modify in-place in the loop. As `Chunks.toRelative` (with single argument) also modifies the vector in-place, we cannot pass in the `newBlockPosition` loop variable. \r\n\r\nA typical pattern that we applied in many places already is to use a single temporary vector instance to be reused in the loop:\r\n\r\n```java\r\nVector3i tmp = new Vector3i();\r\nfor (Vector3ic newBlockPosition : walls) {\r\n\tif (chunkRegion.getRegion().contains(newBlockPosition)\r\n    \t\t&& !inside.contains(newBlockPosition)) {\r\n    \tchunk.setBlock(Chunks.toRelative(newBlockPosition, tmp), stone);\r\n}\r\n```\r\n\r\nHere, we also make use of the two-argument variant of `Chunks.toRelative` which will store the result in the second argument `dest` - in this case our `tmp` variable."", 'comment_created': datetime.datetime(2021, 6, 7, 8, 39, 6, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 646388652, 'comment_body': 'Is there any specific reason you moved `walls.expand(extent, extent, extent);` last here, and do it in a spearate statement? Do you see any advantage in doing this?\r\n\r\nWhat do you think of keeping it the same as before, creating both regions from the center position and respective extents?\r\n```suggestion\r\n            BlockRegion walls = new BlockRegion(centerHousePosition).expand(extent, extent, extent);\r\n            BlockRegion inside = new BlockRegion(centerHousePosition).expand(extent - 1, extent - 1, extent - 1);\r\n```\r\n\r\nAnother option might be to create the outer wall region first, and then shrink the region again by the wall thickness.\r\n```suggestion\r\n            BlockRegion walls = new BlockRegion(centerHousePosition).expand(extent, extent, extent);\r\n            BlockRegion inside = new BlockRegion(walls).expand(-1, -1, -1);\r\n```', 'comment_created': datetime.datetime(2021, 6, 7, 8, 45, 34, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 646811196, 'comment_body': 'Thanks, these look like good ideas (and I realize I missed some discussion about them above). I went ahead and made the changes.', 'comment_created': datetime.datetime(2021, 6, 7, 17, 44, 11, tzinfo=datetime.timezone.utc), 'commenter': 'naalit', 'type': 'User'}, {'comment_id': 646949156, 'comment_body': ':+1: ', 'comment_created': datetime.datetime(2021, 6, 7, 21, 22, 3, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 646951108, 'comment_body': ""That's an odd linebreak :thinking: Does it come from auto-formatting in IntelliJ? Sometimes you can help the formatter along with some manual linebreaks...\r\n\r\n```java\r\n        lakeNoise = new SubSampledNoise(\r\n        \t\tnew BrownianNoise(new PerlinNoise(seed + 3), 4), \r\n        \t\tnew Vector2f(0.001f, 0.001f), 1);\r\n```"", 'comment_created': datetime.datetime(2021, 6, 7, 21, 25, 34, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}]","[{'commit_sha': 'cf96e2e10620f3b161e427ed98b6e23498abeebd', 'committer_username': 'sin3point14', 'committer_name': 'Manas', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 24, 17, 30, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ad8d3971a7398e7c6d1619c6aad2a707e74c58a', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ebc72d556751d2190c222ffa6b3829a4a6a17d4b', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b6d945aeecb59c99115bdbc2f8c36aedb25d22e', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '318e11e7c22506538510b9b317051822e1c1f572', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}]",Manas,43549821,,User,,68,,12,66
668441323,doc: update tutorial to match code,"Now that the code has been updated to work again, and the actual tutorial is in the repo, I updated the examples in the tutorial to match the new code.",True,21,https://api.github.com/repos/Terasology/TutorialWorldGeneration/pulls/21,https://github.com/Terasology/TutorialWorldGeneration/pull/21,closed,82,76,13,1,0,4,0,0,[],2021-06-11 18:36:22+00:00,2021-06-12 11:05:12+00:00,59330.0,16:28:50,"[{'comment_id': 650291410, 'comment_body': ""I understand why we have the tmp vector here, but I'm finding this is a case where I dislike the readability of the result.\r\n\r\nHaving `Chunks.toRelative(position, tmp)` as a method that modifies `tmp` is fine.  \r\nAnd I _know_ the reason it returns itself as the return value is so you can chain other vector method calls on the end of it.\r\n\r\nBut gosh, to the casual reader it looks for all the world like we're just passing in some uninitialized variable there, or writing something to that object but then never _using_ that result."", 'comment_created': datetime.datetime(2021, 6, 11, 22, 19, 52, tzinfo=datetime.timezone.utc), 'commenter': 'keturn', 'type': 'User'}, {'comment_id': 650297203, 'comment_body': ""I guess one alternative would be\r\n```java\r\nChunks.toRelative(position, relativePosition)\r\nchunk.setBlock(relativePosition, dirt)\r\n```\r\n\r\nWe could also take advantage of the fact that this rasterizer is so simple to come up with other alternatives, but I guess since this example is a starting place to build other things on, that's a reason for it to keep using this iterate-over-every-position technique."", 'comment_created': datetime.datetime(2021, 6, 11, 22, 40, 24, tzinfo=datetime.timezone.utc), 'commenter': 'keturn', 'type': 'User'}, {'comment_id': 650298382, 'comment_body': '""ignoring the is""? looks like that comment got mangled', 'comment_created': datetime.datetime(2021, 6, 11, 22, 44, 40, tzinfo=datetime.timezone.utc), 'commenter': 'keturn', 'type': 'User'}, {'comment_id': 650379702, 'comment_body': ""That's valid feedback here :+1: I'm not sure about the best way to write this kind of code, so having somebody read and understand it who is not familiar with it helps a lot.\r\n\r\nAnother alternative to what you proposed is to store the current position in `tmp` more explicitly, and then to the computation of `toRelative` only on a single argument:\r\n\r\n```java\r\ntmp.set(position);\r\nchunk.setBlock(Chunks.toRelative(tmp), dirt);\r\n```\r\n\r\nYour suggestion could be made even more verbose here by adding in another assignment (where I hope it gets optimized away by the JIT compiler):\r\n\r\n```java\r\nrelativePosition = Chunks.toRelative(position, relativePosition);\r\nchunk.setBlock(relativePosition, dirt);\r\n```"", 'comment_created': datetime.datetime(2021, 6, 12, 11, 3, 16, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}]","[{'commit_sha': '13d41e9306a3b39c1492b03419bd7f0785715364', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}]",Sylvie Dirkswager,13039463,,User,,44,,0,11
712652040,doc: update tutorial with some new API features,"This updates the tutorial to add a section about the new methods on `Biome` for configurable rasterization and block tinting, and a page on facet provider update priority (added in https://github.com/MovingBlocks/Terasology/pull/4833) using simple mesas as a somewhat flimsy example. I also added a note on the Noise page that `BrownianNoise` can go outside of `[-1, 1]`, which bit me fairly recently, and corrected a couple typos.",True,22,https://api.github.com/repos/Terasology/TutorialWorldGeneration/pulls/22,https://github.com/Terasology/TutorialWorldGeneration/pull/22,closed,237,11,12,1,0,0,1,0,[{'name': 'Category: Doc'}],2021-08-13 22:12:41+00:00,2021-08-15 10:33:15+00:00,130834.0,"1 day, 12:20:34",[],"[{'commit_sha': 'd6c20bf73c2bc6825193941bf4af5a23c6ca0ca3', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}]",Sylvie Dirkswager,13039463,,User,,44,,0,11
665386037,feat: Rivers,"I've created a new facet for rivers and a provider which uses the same algorithm as CoreWorlds for placing rivers. The elevation adjustment is different, though, because CoreWorlds' rivers just carve into the surface up to 16 blocks, which isn't enough to get to sea level in terrain like mountains. Instead, I ended up calculating a sloped riverbed at sea level and then doing a linear interpolation between that and the actual terrain based on how close we are to a river (see `RiverToElevationProvider.java`). This works okay, but I still wish it was a little smoother:

![Screenshot from 2021-06-08 09-23-41](https://user-images.githubusercontent.com/13039463/121263224-ee080380-c87a-11eb-8cd6-f41ad3274441.png)
![Screenshot from 2021-06-08 17-07-00](https://user-images.githubusercontent.com/13039463/121264048-2825d500-c87c-11eb-82f9-65019fd21431.png)

It already increases the humidity near rivers, as you can see in the pictures; I think it's a little too much at this point, but it will have to be adjusted again anyway when I add the new biomes.

I also noticed that if `SimplexHillsAndMountainsProvider` requires the `SurfaceHumidity` facet, and `RiverToElevationProvider` updates it, then even if I add `RiverToElevationProvider` after `SimplexHillsAndMountainsProvider`, `RiverToElevationProvider` always runs first. I'm not sure if that was intended, but I just removed the climate dependency from `SimplexHillsAndMountainsProvider` and replaced it with noise, since the climate was constant anyway and thus not actually used, so it doesn't make anything worse.",True,145,https://api.github.com/repos/Terasology/MetalRenegades/pulls/145,https://github.com/Terasology/MetalRenegades/pull/145,closed,174,121,8,6,2,1,2,1,"[{'name': 'Type: Improvement'}, {'name': 'Topic: WorldGen'}]",2021-06-08 22:14:48+00:00,2021-06-09 21:18:40+00:00,83032.0,23:03:52,"[{'comment_id': 648370116, 'comment_body': 'I would rather use the full name `mountainIntensityData` here instead of an abbreviation for better readability', 'comment_created': datetime.datetime(2021, 6, 9, 14, 31, 30, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}]","[{'commit_sha': '0302b2278378dd17cc038ce2e3dc0b9b92fb4074', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ae59d18ec8ddaa0ce2d1f23b931383b9a117230', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ad20d6c69e23bb0bbcd05ff022902688b6d721f', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d1b0ec1deccbf684dbad3867601f95a36c4ff7a', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9bef7668571faa485dd0a6ed7881f30fc9352c8', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff56441b20d5dfe2e40e01277191c4705e7f9167', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}]",Sylvie Dirkswager,13039463,,User,,44,,0,11
668377085,feat: variable steepness of river banks,"The main outstanding problem with rivers was that they didn't look great when they happened to be placed in high mountains: the sides weren't steep enough to be canyons, but were too steep to look nice otherwise. In this PR, I added a noise function to determine steepness, so decent canyons sometimes form and sometimes it's more like a gentle river valley.

![steep](https://user-images.githubusercontent.com/13039463/121725077-660a3f80-caae-11eb-9cf9-7a3db004cf6f.png)
<p align=center><i>A mountainous area with high steepness, forming a canyon.</i></p>

![Screenshot from 2021-06-11 12-08-19](https://user-images.githubusercontent.com/13039463/121725084-686c9980-caae-11eb-81c5-e00b45856a5b.png)
<p align=center><i>A mountainous area with low steepness, where the terrain slowly and naturally slopes downward to the river.</i></p>

I think after this, rivers should be ""good enough"" - I'd still like to add dry riverbeds, but that can be done later, and change the humidity, but that will need to be done when I add new biomes anyway.",True,147,https://api.github.com/repos/Terasology/MetalRenegades/pulls/147,https://github.com/Terasology/MetalRenegades/pull/147,closed,27,4,2,1,0,1,2,0,"[{'name': 'Type: Improvement'}, {'name': 'Topic: WorldGen'}]",2021-06-11 17:23:45+00:00,2021-06-12 13:47:12+00:00,73407.0,20:23:27,"[{'comment_id': 650394282, 'comment_body': ':+1: valid point, and good explanation why this somehow feels more realistic than before.', 'comment_created': datetime.datetime(2021, 6, 12, 13, 42, 50, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}]","[{'commit_sha': 'd3264c3fbc866f9249258c3376ba4e93e00b78cd', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}]",Sylvie Dirkswager,13039463,,User,,44,,0,11
682153154,fix: new river curve with consistent width,"Previously, rivers were often way too wide, mostly when their steepness was very low. This switches to a different river curve with a consistent, fairly narrow width. It actually uses two curves, one for above water and one for below - you can see the details on [this graph](https://www.desmos.com/calculator/ahmr6ttsye). The actual math is pretty much meaningless, I just messed with it until it looked nice. Some examples:
![Screenshot from 2021-07-01 15-08-56](https://user-images.githubusercontent.com/13039463/124186353-d3900700-da81-11eb-8d2d-3983126d65be.png)
*A steep canyon*
![Screenshot from 2021-07-01 15-24-32](https://user-images.githubusercontent.com/13039463/124186359-d4c13400-da81-11eb-9694-13a86679186f.png)
*A much less steep river, with the same width*",True,151,https://api.github.com/repos/Terasology/MetalRenegades/pulls/151,https://github.com/Terasology/MetalRenegades/pull/151,closed,12,5,1,4,0,1,2,0,"[{'name': 'Type: Improvement'}, {'name': 'Topic: WorldGen'}]",2021-07-01 20:38:52+00:00,2021-07-03 20:28:17+00:00,172165.0,"1 day, 23:49:25","[{'comment_id': 663343282, 'comment_body': 'Could you please add the link to the graph visualization with a short comment here - I think it is really helpful to understand what is going on, and how some parameters affect the overall result.', 'comment_created': datetime.datetime(2021, 7, 3, 9, 33, 56, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}]","[{'commit_sha': '941f56188a8b2a35a9e5f26ffbf3e037a0d31ba4', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b51a596cec70c8f796e708f5e6819f9779a6e04', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5653c3ee884255ff4e8b719eeddddb77579bfbda', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49fac085bb1c2f8adfa66a9e9f0fdec70b71d773', 'committer_username': 'skaldarnar', 'committer_name': 'Tobias Nett', 'committer_email': None, 'commit_date': datetime.datetime(2012, 2, 18, 10, 28, 41, tzinfo=datetime.timezone.utc)}]",Sylvie Dirkswager,13039463,,User,,44,,0,11
682937086,fix: stop discoverables and the player from spawning underwater,"This PR makes discoverables skip spawn locations below sea level, and adds the SpawnPlateau from CoreWorlds to keep the player from spawning underwater. Both were already much rarer with https://github.com/Terasology/MetalRenegades/pull/151, since it makes rivers much smaller, but still possible, so this actually fixes the problems.",True,152,https://api.github.com/repos/Terasology/MetalRenegades/pulls/152,https://github.com/Terasology/MetalRenegades/pull/152,closed,11,2,2,2,0,0,2,0,"[{'name': 'Type: Bug'}, {'name': 'Topic: WorldGen'}]",2021-07-03 00:46:43+00:00,2021-07-03 12:28:52+00:00,42129.0,11:42:09,[],"[{'commit_sha': 'e5fcc8da9c276a61f80eac5b47f497636341bff6', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d8ee4c7e2e588806a8eaafa10bc39e703a1214e', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}]",Sylvie Dirkswager,13039463,,User,,44,,0,11
688251202,fix: clamp steepness to avoid inverted rivers,"Noise with multiple octaves like rivers use can actually go a little bit beyond the [0, 1] range. If the steepness went below 0, it would lead to inverted rivers like this (seed nc4ndFDUGz1gUfXj, x: 70, z: 1400; may or may not be reproducible there). Clamping the steepness to the correct range fixes this artifact.

![Terasology-210712180432-1920x1080](https://user-images.githubusercontent.com/13039463/125367445-c4407180-e33d-11eb-978e-9dd1685c4dd6.png)",True,157,https://api.github.com/repos/Terasology/MetalRenegades/pulls/157,https://github.com/Terasology/MetalRenegades/pull/157,closed,1,1,1,1,0,0,1,0,[{'name': 'Type: Bug'}],2021-07-12 23:22:42+00:00,2021-07-13 20:04:56+00:00,74534.0,20:42:14,[],"[{'commit_sha': '49f6e961639ef24881a7a71dc0326559f47d6504', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}]",Sylvie Dirkswager,13039463,,User,,44,,0,11
699806339,feat: shallower or completely dry rivers in drier areas,"This raises the riverbed by up to `maxDepth` blocks in dry areas, so that the river is shallower and sometimes doesn't have water at all. It still needs some tweaks, especially to the river biome allocation, and to make sure that it doesn't mess with other rivers too much; I'd also like canyons without water to be more common, but I'm not sure how feasible that actually is.

![Terasology-210729145154-1536x864](https://user-images.githubusercontent.com/13039463/127557889-4e134128-0e61-4e03-a097-e7e69786cebf.png)
",True,159,https://api.github.com/repos/Terasology/MetalRenegades/pulls/159,https://github.com/Terasology/MetalRenegades/pull/159,closed,8,2,1,2,1,0,2,0,"[{'name': 'Type: Improvement'}, {'name': 'Topic: WorldGen'}]",2021-07-29 20:02:39+00:00,2021-07-30 22:21:03+00:00,94704.0,"1 day, 2:18:24",[],"[{'commit_sha': '1f90ada4227ccfec3d8307cba8fe7a8320985b25', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2edaddccab1e33ed583e7cca55d975366278ccf2', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}]",Sylvie Dirkswager,13039463,,User,,44,,0,11
596872210,Add methods for querying block types to Biome interface,"Currently, the biome API doesn't specify anything about biomes, and rasterizers have to use a switch statement over all supported biome types to generate blocks. That means biomes can't really be reused between games and rasterizers without copying a bunch of code.

This pull request adds some basic properties on biomes, which should just enough to remove hardcoded biome types in most rasterizers. For example, here's the updated portion of CoreWorlds' `SolidRasterizer`, with no reference to specific `CoreBiome`s:

```java
private Block getSurfaceBlock(Biome type, float heightAboveSea) {
    if (type.hasHighAltitudeSnow() && heightAboveSea > type.getSnowHeight()) {
        return snow;
    } else {
        return type.getSurfaceBlock();
    }
}

private Block getBelowSurfaceBlock(float density, Biome type) {
    if (density <= type.getSoilDepth()) {
        return type.getSoilBlock();
    } else {
        return type.getSolidBlock();
    }
}
```

Some of that logic could be moved to `Biome`, for example a method `Block getBelowSurfaceBlock(float density)`, but going too far in that direction could also lead to code duplication as @4Denthusiast pointed out on Discord.

This change doesn't break any existing code: biomes don't have to implement it since all the new methods have default implementations, and rasterizers can keep switching on biome types until the biomes they care about implement it. However, because methods like `getSurfaceBlock()` have default implementations, they need to get the `BlockManager` from the `CoreRegistry` and get the block from it each time they're called, which theoretically isn't good for performance, but it doesn't seem noticeable in practice. Implementers of `Biome` can get the blocks once and store them in instance variables like rasterizers do right now, so it's not a problem there.

This doesn't make biomes completely reusable, for example, plant generation and any biome-specific surface generation still need to be hardcoded in other phases. Eventually methods related to those things could be added to `Biome`, or could be kept separate.",True,12,https://api.github.com/repos/Terasology/BiomesAPI/pulls/12,https://github.com/Terasology/BiomesAPI/pull/12,closed,30,1,2,3,1,6,0,0,[],2021-03-19 20:54:00+00:00,2021-03-23 21:01:19+00:00,346039.0,"4 days, 0:07:19","[{'comment_id': 598102963, 'comment_body': '**suggestion.** Hm, on the one hand we abstract over what _soil_ and _solid_ blocks exactly are (the biome is completely free to decide whether ""soil"" is actually dirt/soil, or something else), we hard-code the idea of high altitudes leading to snow. \r\nI\'d recommend to align this with the other APIs above, e.g., by offering \r\n\r\n```java\r\n\r\ndefault int getHighAltitudeHeight() {\r\n\treturn 96;\r\n}\r\n\r\ndefault Block getHighAltitudeBlock() {\r\n    BlockManager blockManager = CoreRegistry.get(BlockManager.class);\r\n    return blockManager.getBlock(""CoreAssets:snow"");\r\n}\r\n```\r\n\r\nWith that, I\'d think the APIs would be more consistent.', 'comment_created': datetime.datetime(2021, 3, 20, 12, 0, 53, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 598102999, 'comment_body': '**thought.** This leads to the question what the ""high altitude"" special case makes it special, what it can influence, and how many other ""special cases"" there are (does the high altitude have an impact on soil depth, does it change the surface block, ...).\r\n\r\nIn the end, this boils down to expressing conditions, I guess. ', 'comment_created': datetime.datetime(2021, 3, 20, 12, 1, 10, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 598133735, 'comment_body': ""That makes sense, I hadn't thought of that. When there isn't a separate high altitude block, are you thinking it would return the same as the surface block and `getHighAltitudeHeight()` wouldn't matter? Or `getHighAltitudeHeight()` could return some very large number, I guess. "", 'comment_created': datetime.datetime(2021, 3, 20, 16, 53, 13, tzinfo=datetime.timezone.utc), 'commenter': 'naalit', 'type': 'User'}, {'comment_id': 598135413, 'comment_body': ""I think no matter how complex this API gets, it won't be able to accommodate all cases (strata, for example). At some point, we have to give up and just use a custom rasterizer, unless we want to move most of the rasterization logic into `Biome`, so the question is where to draw the line. Maybe it would be a good idea to try porting all the existing biomes to this API and see what they need? I've done that with the `CoreBiome`s, but nothing else."", 'comment_created': datetime.datetime(2021, 3, 20, 17, 7, 46, tzinfo=datetime.timezone.utc), 'commenter': 'naalit', 'type': 'User'}, {'comment_id': 598137229, 'comment_body': ""The case of high altitude and the case of strata could both be accommodated by passing a position argument. I think that would be enough ot a reason to make it worth introducing. There is the additional complication that the `Biome` would need to know the sea level too in order to put the snow at the right height relative to that. I guess you could just pass the height relative to sea level instead (which then doesn't allow horizontal patterning, but that's only hypothetical now anyway), or you could pass the whole `Region`, which would allow the `Biome` to retreive the sea level itself, but that seems a bit overkill."", 'comment_created': datetime.datetime(2021, 3, 20, 17, 25, 20, tzinfo=datetime.timezone.utc), 'commenter': '4Denthusiast', 'type': 'User'}, {'comment_id': 598143090, 'comment_body': 'Another option:\n\n```java\nBlock getSurfaceBlock(Vector3ic pos, int seaLevel);\n\nBlock getBelowSurfaceBlock(Vector3ic pos, float density);\n```\n\nThat should support strata and varying soil depth too.', 'comment_created': datetime.datetime(2021, 3, 20, 18, 19, 26, tzinfo=datetime.timezone.utc), 'commenter': 'naalit', 'type': 'User'}]","[{'commit_sha': '19616cabf6342aa499a810d16fa08585c8165e8d', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a15169c7d3685b916b7616829b9e69c043b71c69', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '30bfb8fddf0d30fccbe376d0285167ed3a8b4282', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}]",Sylvie Dirkswager,13039463,,User,,44,,0,11
600139788,feat: Update CoreBiome and SolidRasterizer to use new Biome API for querying block types,"Now that https://github.com/Terasology/BiomesAPI/pull/12 is merged, the new API can be used for `CoreBiome`s. This doesn't change the generated terrain at all, just moves per-biome code from `SolidRasterizer` to `CoreBiome`.

I'm not sure how the dependency should be changed - should I change the minimum version of BiomesAPI to 4.1.1-SNAPSHOT? The version number hasn't changed since the API change, so it's possible to have BiomesAPI with that version number but without the new API, but maybe that's fine since it's a snapshot version.",True,35,https://api.github.com/repos/Terasology/CoreWorlds/pulls/35,https://github.com/Terasology/CoreWorlds/pull/35,closed,74,66,2,3,2,0,2,0,"[{'name': 'Type: Improvement'}, {'name': 'Topic: WorldGen'}]",2021-03-24 22:27:29+00:00,2021-06-12 08:53:42+00:00,6863173.0,"79 days, 10:26:13",[],"[{'commit_sha': 'c9854b37cef1cd5ed43fa6255ad5a4d87c809016', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a12de0f657f63ee7029f1722ae9984a2c57ca091', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3937f73e10ebf1a40ad33a69bf01ee7aa4569d45', 'committer_username': 'skaldarnar', 'committer_name': 'Tobias Nett', 'committer_email': None, 'commit_date': datetime.datetime(2012, 2, 18, 10, 28, 41, tzinfo=datetime.timezone.utc)}]",Sylvie Dirkswager,13039463,,User,,44,,0,11
670004398,chore: update SolidRasterizer to use new Biome API to query block types,"Now that CoreWorlds uses the new API (https://github.com/Terasology/CoreWorlds/pull/35), DynamicCities can use it as well. It makes the rasterizer much simpler, and allows Metal Renegades (which uses DynamicCities' SolidRasterizer) to add new biomes without changing the rasterizer. This change shouldn't change the behavior of anything, if it does something else probably needs to be updated.",True,99,https://api.github.com/repos/Terasology/DynamicCities/pulls/99,https://github.com/Terasology/DynamicCities/pull/99,closed,2,56,1,1,0,0,2,0,"[{'name': 'Type: Chore'}, {'name': 'Topic: WorldGen'}]",2021-06-15 02:30:24+00:00,2021-06-15 20:10:13+00:00,63589.0,17:39:49,[],"[{'commit_sha': 'b7598c4d18c0c0177ddadd9ba26d5c9b25211ab0', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}]",Sylvie Dirkswager,13039463,,User,,44,,0,11
673645586,fix: pass world position to biome methods,"In https://github.com/Terasology/CoreWorlds/pull/35, I forgot to convert the position to world coordinates before passing it to chunk methods. The only thing that affects right now is that mountain biomes don't have snow at high altitudes, but it also means that new biomes using the API will be rasterized incorrectly. This PR just converts to world coordinates before passing the position to the biome methods.",True,38,https://api.github.com/repos/Terasology/CoreWorlds/pulls/38,https://github.com/Terasology/CoreWorlds/pull/38,closed,5,2,1,1,2,0,2,0,"[{'name': 'Type: Bug'}, {'name': 'Topic: WorldGen'}]",2021-06-18 18:06:54+00:00,2021-06-20 18:08:08+00:00,172874.0,"2 days, 0:01:14",[],"[{'commit_sha': '70246585b8618f4192db1ddecc9698c9f089ec53', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}]",Sylvie Dirkswager,13039463,,User,,44,,0,11
673647585,fix: pass world position to biome methods,"In https://github.com/Terasology/DynamicCities/pull/99, I forgot to convert the position to world coordinates before passing it to chunk methods. This is exactly the same as https://github.com/Terasology/CoreWorlds/pull/38.",True,100,https://api.github.com/repos/Terasology/DynamicCities/pulls/100,https://github.com/Terasology/DynamicCities/pull/100,closed,5,2,1,1,0,0,2,0,"[{'name': 'Type: Bug'}, {'name': 'Topic: WorldGen'}]",2021-06-18 18:11:17+00:00,2021-06-20 18:08:10+00:00,172613.0,"1 day, 23:56:53",[],"[{'commit_sha': '2fd02ae40f007515b13738eaa62f09d222f9b127', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}]",Sylvie Dirkswager,13039463,,User,,44,,0,11
696266647,feat: restore biome-based grass and foliage tinting,"<!-- Thanks for submitting a pull request for Terasology! :-)
Please fill in some details about the PR, below.
If the PR contains source code please make sure to run Checkstyle on it first.
If you add unit tests we'll love you forever! 

You might also want to read ""How to Work on a PR Efficiently"":
https://github.com/MovingBlocks/Terasology/wiki/How-to-Work-on-a-PR-Efficiently
-->

### Contains

This is a rewrite of https://github.com/MovingBlocks/Terasology/pull/3802 which uses biome information instead of facet information, which is available to clients, so it won't break multiplayer. It contains multiple PRs for different modules: https://github.com/Terasology/CoreRendering/pull/68, https://github.com/Terasology/BiomesAPI/pull/17, and https://github.com/Terasology/CoreWorlds/pull/41.

### How to test

Look at grass and plants in some different biomes, and make sure the game still works, especially multiplayer.

![Terasology-210723180809-1920x1080](https://user-images.githubusercontent.com/13039463/126852349-22448a1d-a608-4168-88ea-8774ae248b8a.png)
",True,4828,https://api.github.com/repos/MovingBlocks/Terasology/pulls/4828,https://github.com/MovingBlocks/Terasology/pull/4828,closed,228,11,11,4,0,5,3,0,"[{'name': 'Topic: Rendering'}, {'name': 'Type: Improvement'}, {'name': 'Topic: WorldGen'}]",2021-07-24 00:34:45+00:00,2021-07-30 18:48:39+00:00,584034.0,"6 days, 18:13:54","[{'comment_id': 676188418, 'comment_body': ""I'm not sure if we want this exposed, but the data was already public."", 'comment_created': datetime.datetime(2021, 7, 25, 19, 0, 25, tzinfo=datetime.timezone.utc), 'commenter': 'naalit', 'type': 'User'}, {'comment_id': 676894374, 'comment_body': 'In which sense was it public before? Could you derive the value manually just by using public methods?', 'comment_created': datetime.datetime(2021, 7, 26, 19, 46, 25, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 676895945, 'comment_body': ""How often is this called (and how often do we believe will this be called)? \r\n\r\nWe're creating a new `Color` with each call here. As `Color` is very similar to the JOML vectors we may borrow the same patterns from the math types. For them, we try to avoid creation of new instances, and instead rely on a destination parameter. This basically shifts the responsibility to create instances to the caller site - which hopefully knows better what they can cache or reuse."", 'comment_created': datetime.datetime(2021, 7, 26, 19, 49, 4, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 677011678, 'comment_body': 'This is called once per block that supports tinting every time a chunk mesh is generated, so that sounds like a good idea.', 'comment_created': datetime.datetime(2021, 7, 26, 23, 33, 12, tzinfo=datetime.timezone.utc), 'commenter': 'naalit', 'type': 'User'}, {'comment_id': 677685081, 'comment_body': ""Yes: `Texture.getData()` is public, and `TextureData.getBuffers()` is public, so this function could be implemented anywhere using only public methods. But `Texture.getData()` has a comment saying `// TODO: Remove when no longer needed`, which is the main reason I'm cautious of this."", 'comment_created': datetime.datetime(2021, 7, 27, 18, 8, 39, tzinfo=datetime.timezone.utc), 'commenter': 'naalit', 'type': 'User'}]","[{'commit_sha': '625a2e167276799329156435c6ff6da7c65befc0', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a4ee696a2f1f60580139aff3bdca61f8561705bc', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d067d5554b361f9e6e0d67d6577891410b6d17f', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '067c60ec7936664348eea0728a7714499ab5c34d', 'committer_username': 'pollend', 'committer_name': 'Michael Pollind', 'committer_email': None, 'commit_date': datetime.datetime(2011, 6, 16, 15, 26, 27, tzinfo=datetime.timezone.utc)}]",Sylvie Dirkswager,13039463,,User,,44,,0,11
696266798,feat: restore biome-based grass and foliage tinting,This modifies the shaders to support https://github.com/MovingBlocks/Terasology/pull/4828. The shading logic is copied from https://github.com/MovingBlocks/Terasology/pull/3802.,True,68,https://api.github.com/repos/Terasology/CoreRendering/pulls/68,https://github.com/Terasology/CoreRendering/pull/68,closed,22,0,2,1,0,4,3,0,"[{'name': 'Type: Improvement'}, {'name': 'Topic: Rendering'}, {'name': 'Topic: WorldGen'}]",2021-07-24 00:35:51+00:00,2021-07-30 18:49:28+00:00,584017.0,"6 days, 18:13:37","[{'comment_id': 676018181, 'comment_body': 'Does grass have a hard-coded mask? Not sure we ever had that, but I think being able to provide an override-able texture as mask for generic blocks would be great. Would it be hard to support that?', 'comment_created': datetime.datetime(2021, 7, 24, 16, 24, 42, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 676025647, 'comment_body': 'umm not sure you can do anything about this though?', 'comment_created': datetime.datetime(2021, 7, 24, 17, 38, 37, tzinfo=datetime.timezone.utc), 'commenter': 'pollend', 'type': 'User'}, {'comment_id': 676183823, 'comment_body': ""No idea how feasible that is, but right now it's just hardcoded in the engine. See the right side of this texture: https://github.com/MovingBlocks/Terasology/blob/develop/engine/src/main/resources/org/terasology/engine/assets/textures/effects.png"", 'comment_created': datetime.datetime(2021, 7, 25, 18, 18, 47, tzinfo=datetime.timezone.utc), 'commenter': 'naalit', 'type': 'User'}, {'comment_id': 676439696, 'comment_body': 'good part: we already take the mask out of a texture file üòÉ \r\n\r\nbad part: it is hard-coded for a very specific block üôà \r\n\r\nThis would probably be worth a follow-up later on to see whether we can (a) at least override the `effects.png` texture to match the mask with different grass textures (e.g., in Light and Shadow), and (b) specify arbitrary effect masks in the block definition.', 'comment_created': datetime.datetime(2021, 7, 26, 9, 27, 31, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}]","[{'commit_sha': 'bfbd30c38a8cf14ae9e2819db587b2572fc1dca2', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}]",Sylvie Dirkswager,13039463,,User,,44,,0,11
696267293,feat: restore biome-based grass and foliage tinting,"This adds methods to `Biome` for querying the average humidity and temperature values, and a system to lookup foliage colors based on those values, for https://github.com/MovingBlocks/Terasology/pull/4828.",True,17,https://api.github.com/repos/Terasology/BiomesAPI/pulls/17,https://github.com/Terasology/BiomesAPI/pull/17,closed,69,0,2,3,0,1,1,0,[{'name': 'Type: Improvement'}],2021-07-24 00:39:20+00:00,2021-07-30 19:12:25+00:00,585185.0,"6 days, 18:33:05","[{'comment_id': 676018775, 'comment_body': 'This is basically the same code, except for the texture we do the lookup on. If this is intentionally so, we could introduce a common function taking the `biome` and the `lut` used in both places.', 'comment_created': datetime.datetime(2021, 7, 24, 16, 30, 59, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}]","[{'commit_sha': '5e3da04c440d4e45463e2d26765eb346fca56bab', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b8d9a1330b79423c8ee88e843abc89afb71ce649', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f4a967686fb760a8aca6d2f427f93103edc42b8', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}]",Sylvie Dirkswager,13039463,,User,,44,,0,11
700550078,feat: add support for biome-based block tinting,"This updates FlowingLiquids to support block tinting as implemented in https://github.com/MovingBlocks/Terasology/pull/4828, which is required because FlowingLiquids has its own mesh generator for liquids.",True,35,https://api.github.com/repos/Terasology/FlowingLiquids/pulls/35,https://github.com/Terasology/FlowingLiquids/pull/35,closed,13,3,2,1,0,0,0,0,[],2021-07-30 20:40:03+00:00,2021-07-30 22:09:59+00:00,5396.0,1:29:56,[],"[{'commit_sha': 'a6dbd84516ca0eef4289d9d289d6d50f493d05dd', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}]",Sylvie Dirkswager,13039463,,User,,44,,0,11
696267744,feat: restore biome-based grass and foliage tinting,"Adds humidity and temperature values for `CoreBiome`, using the API provided by https://github.com/Terasology/BiomesAPI/pull/17. Part of https://github.com/MovingBlocks/Terasology/pull/4828.",True,41,https://api.github.com/repos/Terasology/CoreWorlds/pulls/41,https://github.com/Terasology/CoreWorlds/pull/41,closed,41,0,1,1,0,0,0,0,[],2021-07-24 00:42:57+00:00,2021-07-30 19:47:26+00:00,587069.0,"6 days, 19:04:29",[],"[{'commit_sha': '3b6a51fcd84329f88f51135bf8c1347a79992cac', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}]",Sylvie Dirkswager,13039463,,User,,44,,0,11
700558041,feat: block tinting support for MR biomes and dry grass in scrublands,"Now that block tinting is supported, this PR uses it for dry grass in scrublands instead of dirt.
![Terasology-210730155050-1920x1080](https://user-images.githubusercontent.com/13039463/127710791-7fd34e23-c340-4a0c-b526-2894660b6b1b.png)
![Terasology-210730153236-1920x1080](https://user-images.githubusercontent.com/13039463/127710829-2adca165-dfac-4436-afef-3295f1aca0e0.png)

I'm not sure if it's quite dramatic enough, but I don't think it's possible to get much more without changing the tinting lookup tables in the engine.",True,160,https://api.github.com/repos/Terasology/MetalRenegades/pulls/160,https://github.com/Terasology/MetalRenegades/pull/160,closed,31,1,1,3,0,0,2,0,"[{'name': 'Type: Improvement'}, {'name': 'Topic: WorldGen'}]",2021-07-30 20:59:09+00:00,2021-08-01 19:47:15+00:00,168486.0,"1 day, 22:48:06",[],"[{'commit_sha': 'c391114ea8ad0e1c81d79cdb6be2f2459b46f0e1', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f220694377d45965f0f17c13c9bb8cf410f36938', 'committer_username': 'skaldarnar', 'committer_name': 'Tobias Nett', 'committer_email': None, 'commit_date': datetime.datetime(2012, 2, 18, 10, 28, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67bac55d3d7ea4502179b897006ccff066c2a883', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}]",Sylvie Dirkswager,13039463,,User,,44,,0,11
713049607,fix: enable block tinting in LOD chunks,"Updates for the API changes in https://github.com/MovingBlocks/Terasology/pull/4847, querying biomes from the `ChunkView` used for meshing instead of the `WorldProvider`.",True,18,https://api.github.com/repos/Terasology/BiomesAPI/pulls/18,https://github.com/Terasology/BiomesAPI/pull/18,closed,30,6,3,1,0,2,0,0,[],2021-08-16 01:25:36+00:00,2021-08-23 15:14:35+00:00,654539.0,"7 days, 13:48:59","[{'comment_id': 691594656, 'comment_body': 'Should there be a `set` method of this form for symmetry?', 'comment_created': datetime.datetime(2021, 8, 18, 20, 52, 20, tzinfo=datetime.timezone.utc), 'commenter': 'keturn', 'type': 'User'}, {'comment_id': 692424856, 'comment_body': 'Maybe - there are already `setBiome` methods operating on a `Chunk`, though, without corresponding `getBiome`s.', 'comment_created': datetime.datetime(2021, 8, 19, 19, 34, 39, tzinfo=datetime.timezone.utc), 'commenter': 'naalit', 'type': 'User'}]","[{'commit_sha': 'c710d9ccc8cc93f3329d827b54627ab1f0c5fdda', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}]",Sylvie Dirkswager,13039463,,User,,44,,0,11
713049312,fix: enable block tinting in LOD chunks,"<!-- Thanks for submitting a pull request for Terasology! :-)
Please fill in some details about the PR, below.
If the PR contains source code please make sure to run Checkstyle on it first.
If you add unit tests we'll love you forever! 

You might also want to read ""How to Work on a PR Efficiently"":
https://github.com/MovingBlocks/Terasology/wiki/How-to-Work-on-a-PR-Efficiently
-->

### Contains

Block tinting previously queried biome information from the `WorldProvider`. But LOD chunks are never added to the world, just meshed and rendered. All the necessary data is still there, so this switches to passing block tinting systems a `ChunkView` from which to derive necessary information, which really makes more sense anyway.

### How to test

With https://github.com/Terasology/BiomesAPI/pull/18, try enabling LOD chunks in Core Gameplay or Metal Renegades and check that grass and leaves change color in different biomes in LOD chunks.

Here's an example, although it might be hard to see without zooming in:
![Terasology-210815201323-1920x1080](https://user-images.githubusercontent.com/13039463/129499686-df3fde89-3528-403f-97fe-0e2eae8ad8aa.png)
",True,4847,https://api.github.com/repos/MovingBlocks/Terasology/pulls/4847,https://github.com/MovingBlocks/Terasology/pull/4847,closed,23,21,4,2,1,0,1,0,[{'name': 'Type: Bug'}],2021-08-16 01:24:44+00:00,2021-08-23 14:56:18+00:00,653494.0,"7 days, 13:31:34",[],"[{'commit_sha': 'dc2171efaa0cddf1990dd1603dd8f71e222a81ff', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b30c4eb35ea15f12c8e0987536eb310a79be1928', 'committer_username': 'keturn', 'committer_name': 'Kevin Turner', 'committer_email': None, 'commit_date': datetime.datetime(2009, 5, 12, 20, 0, 44, tzinfo=datetime.timezone.utc)}]",Sylvie Dirkswager,13039463,,User,,44,,0,11
707639238,refactor: remove dependency on AnotherWorld,"GrowingFlora currently depends on AnotherWorld, but there isn't much reason for that to be the case. I moved some utilities here and to the engine (see https://github.com/MovingBlocks/Terasology/pull/4849, which this PR depends on) and updated some references, which was enough to remove the dependency. Behavior shouldn't change, except that it no longer considers parent biomes for `AnotherWorldsBiome`s, and it also no longer has a bug where branch angles were snapped to whole numbers of radians.

Eventually, it would be nice to remove the dependency on ClimateConditions (or hopefully make it optional so that climate still affects growth if it is present), since Metal Renegades would like to use GrowingFlora but doesn't necessarily want to enable ClimateConditions.",True,38,https://api.github.com/repos/Terasology/GrowingFlora/pulls/38,https://github.com/Terasology/GrowingFlora/pull/38,closed,363,260,27,6,0,5,1,0,[{'name': 'Type: Refactoring'}],2021-08-10 19:51:34+00:00,2021-08-17 21:55:34+00:00,612240.0,"7 days, 2:04:00","[{'comment_id': 690710538, 'comment_body': 'Is there no variant to pass a vector to `noise.noise(pos)`? If that is missing, we should add it...', 'comment_created': datetime.datetime(2021, 8, 17, 20, 46, 44, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 690715579, 'comment_body': ""This whole system will only be initialized if all it's dependencies can be met. If ClimateConditions is not loaded, we'll see logs like the following, and the whole feature is not present. \r\n\r\n```\r\n22:47:03.042 [main] WARN  o.t.e.core.ComponentSystemManager - Skip system GrowingFlora:SaplingInitializeSystem for loading - possibly missing optional dependencies\r\n22:47:03.045 [main] WARN  o.t.e.core.ComponentSystemManager - Skip system GrowingFlora:PlantGrowingSystem for loading - possibly missing optional dependencies\r\n```\r\n\r\nI think this is fine for now, but we can definitely improve on this, e.g., by basing those plant definition on something else if the `environmentSystem` is not present.\r\n\r\nI think this is something for another PR, though. Maybe Terasology/SimpleFarming#120 can give some reference."", 'comment_created': datetime.datetime(2021, 8, 17, 20, 54, 20, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 690735682, 'comment_body': ""I actually fixed this right before this comment. Those systems are needed for plants to grow, so skipping them isn't great."", 'comment_created': datetime.datetime(2021, 8, 17, 21, 27, 47, tzinfo=datetime.timezone.utc), 'commenter': 'naalit', 'type': 'User'}, {'comment_id': 690736299, 'comment_body': ""No, there isn't. Should that be added to the main `Noise` interface?"", 'comment_created': datetime.datetime(2021, 8, 17, 21, 28, 48, tzinfo=datetime.timezone.utc), 'commenter': 'naalit', 'type': 'User'}, {'comment_id': 690749922, 'comment_body': 'I think that makes sense, yes. We can use a default implementation for that to only touch that one file.', 'comment_created': datetime.datetime(2021, 8, 17, 21, 54, 33, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}]","[{'commit_sha': '0d04871ca3f51444e566a3430f542c920a672138', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd46d7e9233bf8ce83f47e368c0e455ac6f915ce', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'efbf6d807725a4c666a7ba4d3aadcfee789ad5b1', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5e9cea80c87d6fc4ea50f1795d84ebe16a7e169', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f5e8ffe4ca18e0a7b18dac8756a99942c7ba476', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd11aa62814783215844fbdbe94eb268aa340a277', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}]",Sylvie Dirkswager,13039463,,User,,44,,0,11
714598397,fix: planted saplings will actually grow,"Planted saplings may have grown in the past a small percentage of the time, but now they do it reliably. Try testing with https://github.com/Terasology/MetalRenegades/pull/161, `give BaobabSapling` or `give MetalRenegades:CypressSapling`, plant it, probably increase the time dilation, and wait a bit.

Trees that generate in the world almost always still don't grow, and that's partially because `OnActivatedComponent` events aren't sent until something interacts with a block with an attached entity (e.g. looking at it, this is what causes https://github.com/Terasology/GrowingFlora/issues/2) and partially because of other problems I haven't figured out yet.",True,40,https://api.github.com/repos/Terasology/GrowingFlora/pulls/40,https://github.com/Terasology/GrowingFlora/pull/40,closed,6,5,1,1,0,0,1,0,[{'name': 'Type: Bug'}],2021-08-17 22:10:34+00:00,2021-08-18 21:07:12+00:00,82598.0,22:56:38,[],"[{'commit_sha': 'a25856479c1e71d9a17a3ea05789dc2e20ea1e5c', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}]",Sylvie Dirkswager,13039463,,User,,44,,0,11
713642676,feat: add random distribution utilities from AnotherWorld,"<!-- Thanks for submitting a pull request for Terasology! :-)
Please fill in some details about the PR, below.
If the PR contains source code please make sure to run Checkstyle on it first.
If you add unit tests we'll love you forever! 

You might also want to read ""How to Work on a PR Efficiently"":
https://github.com/MovingBlocks/Terasology/wiki/How-to-Work-on-a-PR-Efficiently
-->

### Contains

This adds two utilities for working with different probability distributions which were previously part of AnotherWorld: `PDist` representing a probability distribution which can be sampled from, and `DiscreteDistribution<T>` (previously `ChanceRandomizer<T>`) which picks from a list of weighted choices. This is the successor to https://github.com/Terasology/CoreWorlds/pull/43, this time in the engine and with a rewritten `DiscreteDistribution`; these utilities are used in GrowingFlora, but seem more widely useful as well.

",True,4849,https://api.github.com/repos/MovingBlocks/Terasology/pulls/4849,https://github.com/MovingBlocks/Terasology/pull/4849,closed,185,0,2,3,0,0,1,0,[{'name': 'Type: Improvement'}],2021-08-16 18:09:04+00:00,2021-08-17 21:29:37+00:00,98433.0,"1 day, 3:20:33",[],"[{'commit_sha': '98a0213067713554d4286a97b4b0387d19f7ab7f', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '086a1d3c048f96499f135339ecf2b0d11ae73e34', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b9a743f9d8c7e47d98f57bbf67553d6258ba95c3', 'committer_username': 'skaldarnar', 'committer_name': 'Tobias Nett', 'committer_email': None, 'commit_date': datetime.datetime(2012, 2, 18, 10, 28, 41, tzinfo=datetime.timezone.utc)}]",Sylvie Dirkswager,13039463,,User,,44,,0,11
709700306,feat: cypress/juniper and baobab trees with GrowingFlora,"Adds [juniper trees](https://en.wikipedia.org/wiki/Juniper) to steppes and [baobabs](https://en.wikipedia.org/wiki/Adansonia_digitata) to scrublands, using GrowingFlora and the assets from PlantPack. It depends on https://github.com/Terasology/GrowingFlora/pull/38. Juniper trees are a type of cypress, so I'm using the cypress assets, and they do naturally appear in the American West; baobab trees actually live in Africa, but it's a similar environment and I think they make scrublands a lot more interesting, and baobab already exists in PlantPack unlike other tree species which would make more sense geographically.

I don't think the trees actually grow currently, although I haven't tested it extensively, and they're a lot more unpredictable than CoreWorlds' tree generation, so they sometimes end up really weird-looking. They're also cut off at chunk boundaries (https://github.com/Terasology/GrowingFlora/issues/39). However, they have the potential to look nicer than CoreWorlds trees, and they're certainly a lot more varied.

![Terasology-210809170259-1920x1080](https://user-images.githubusercontent.com/13039463/129108416-46491edb-1e7d-4e53-a88c-ae6ec7a6c91a.png)
*A baobab*

![Terasology-210810134415-1920x1080](https://user-images.githubusercontent.com/13039463/129108454-e8f814c4-517c-4ea3-8f2a-ffede437b3e7.png)
*A bent juniper tree*

![Terasology-210811145859-1920x1080](https://user-images.githubusercontent.com/13039463/129108460-aa4034b3-7104-48ca-9edb-7b78ded8a854.png)
*An example of how the variation can sometimes lead to weird-looking trees*",True,161,https://api.github.com/repos/Terasology/MetalRenegades/pulls/161,https://github.com/Terasology/MetalRenegades/pull/161,closed,274,0,15,5,0,2,2,0,"[{'name': 'Type: Improvement'}, {'name': 'Topic: WorldGen'}]",2021-08-11 21:56:46+00:00,2021-08-18 20:43:54+00:00,600428.0,"6 days, 22:47:08","[{'comment_id': 688925105, 'comment_body': 'From a bit of testing I\'d increase the probability a bit here...\r\n```suggestion\r\n        super(PlantType.TREE, Cypress.ID, ""MetalRenegades:steppe"", 0.5f, 0.0014f);\r\n```', 'comment_created': datetime.datetime(2021, 8, 14, 12, 29, 31, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 688925244, 'comment_body': 'since growing flora has a hard dependency on ClimateConditions this will automatically enable the player effects such as slow down due to heat or cold - do we want that right now in Metal Renegades?', 'comment_created': datetime.datetime(2021, 8, 14, 12, 30, 48, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}]","[{'commit_sha': 'a4d0497ed6d3bfa34e5cebf435b596d181ce4fbd', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ba90d79efdb92151012a35e5d41d57874a41150', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd3b034c0b3822045f18c21576342ef91d336e92', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2f641e75a34c13fdcac36de912fa5208c9602c8d', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eee7313343d976f19700c8ea193486558e9b4074', 'committer_username': 'skaldarnar', 'committer_name': 'Tobias Nett', 'committer_email': None, 'commit_date': datetime.datetime(2012, 2, 18, 10, 28, 41, tzinfo=datetime.timezone.utc)}]",Sylvie Dirkswager,13039463,,User,,44,,0,11
673653572,feat: basic biomes,"This PR introduces four new biomes, which are provided in stages. First the `BaseBiomeProvider` fills the world with desert and scrubland, then the `RiverToElevationProvider` and `SimplexHillsAndMountainsProvider` add river and rocky biomes respectively based on those terrain features. The steppe biome isn't currently generated, but will be generated in high-altitude flat areas, like the tops of mesas when those are added; it will also have trees, which will be added then as well.",True,149,https://api.github.com/repos/Terasology/MetalRenegades/pulls/149,https://github.com/Terasology/MetalRenegades/pull/149,closed,352,6,8,3,4,9,2,0,"[{'name': 'Type: Improvement'}, {'name': 'Topic: WorldGen'}]",2021-06-18 18:24:08+00:00,2021-06-27 19:36:04+00:00,781916.0,"9 days, 1:11:56","[{'comment_id': 654968156, 'comment_body': 'this initially sounds like a reasonable distribution. How big are these biomes with the given noise (average in-game blocks to travel to ""cross"" a biome)?', 'comment_created': datetime.datetime(2021, 6, 20, 17, 52, 32, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 654968716, 'comment_body': ""What would be a good way to vary this hard cutoff line here?\r\n\r\nJust another noise layer to go a few blocks up and down here and there? This is some small improvement that I'd like to see for various transitions."", 'comment_created': datetime.datetime(2021, 6, 20, 17, 57, 34, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 654977482, 'comment_body': ""Yeah, using a noise value to modify the constant 15 here would work. I'm a little wary of having too many noise functions everywhere, but this one seems justified."", 'comment_created': datetime.datetime(2021, 6, 20, 19, 20, 4, tzinfo=datetime.timezone.utc), 'commenter': 'naalit', 'type': 'User'}, {'comment_id': 654978353, 'comment_body': ""In my experience it's usually not that far, a few hundred blocks maybe? I'm not sure if there's any way to determine that from the noise parameters, I've just been using trial and error."", 'comment_created': datetime.datetime(2021, 6, 20, 19, 28, 35, tzinfo=datetime.timezone.utc), 'commenter': 'naalit', 'type': 'User'}, {'comment_id': 659166222, 'comment_body': ""It isn't extremely apparent to me why this would imply a 65% chance of desert."", 'comment_created': datetime.datetime(2021, 6, 26, 13, 9, 2, tzinfo=datetime.timezone.utc), 'commenter': 'agent-q1', 'type': 'User'}, {'comment_id': 659168101, 'comment_body': ""Skimming through the implementation of FloraProvider, I'm guessing the first set of numbers tell how likely each type of vegetation is and the second set of numbers tell how likely vegetation will be able to grow on that biome. The probability distribution for every biome is the same. Does this mean that the proportion of flowers in a desert would be the same as the proportion of flowers in a river biome? I think it might be better to have a different set of probabilities for different biomes. For example, cactii would be more common in deserts than in rivers.(even though the probability of any vegetation growing would be much lesser in a desert)"", 'comment_created': datetime.datetime(2021, 6, 26, 13, 28, 44, tzinfo=datetime.timezone.utc), 'commenter': 'agent-q1', 'type': 'User'}, {'comment_id': 659190244, 'comment_body': 'Yes, the probabilities for each type are the same for each biome. However, desert is somewhat different; cacti are actually treated as trees and handled by the DefaultTreeProvider, which only spawns them in deserts, and mushrooms are hardcoded not to generate in deserts. So the probabilities for the desert biome are actually:\r\n\r\n- Cactus: 0.04\r\n- Grass: 0.0085\r\n- Flower: 0.0001\r\n\r\nwhich seems pretty reasonable to me. That said, a way to change type probabilities per biome might be useful in the future.', 'comment_created': datetime.datetime(2021, 6, 26, 16, 34, 58, tzinfo=datetime.timezone.utc), 'commenter': 'naalit', 'type': 'User'}, {'comment_id': 659365949, 'comment_body': ""You get to 65% based on 1.3/2, where 1.3 is the range [-1, 0.3] and 2 is from the range [-1, 1]. \r\n\r\nAfter adding the white noise transition here it's effectively 65% ¬±Œµ where 0 ‚â§ Œµ ‚â§ 0.003."", 'comment_created': datetime.datetime(2021, 6, 27, 19, 31, 1, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 663386523, 'comment_body': ""Thanks for the explanation!\r\nIt's surprising to me that noise has a uniform probability distribution over it's entire range. Intuitively I felt that the values closer to 0 might have a higher chance. But now that I think about it. It might be a reasonable assumption"", 'comment_created': datetime.datetime(2021, 7, 3, 17, 2, 52, tzinfo=datetime.timezone.utc), 'commenter': 'agent-q1', 'type': 'User'}]","[{'commit_sha': '9c3a67387ac73bb3e387d9e0f9d6656e9193287d', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6fa9cfc13258f1b01ba9cbf4e2639af80f805961', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9614c3fdcb078c35aa9192f37545f40b8d266d40', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}]",Sylvie Dirkswager,13039463,,User,,44,,0,11
691743231,feat: add world preview colors for new biomes,"This adds a facet layer for the new biomes, which is pretty much just a copy of the relevant one in CoreWorlds with the new biomes added. The colors are just meant to look okay and distinguish the biomes well - here's an example with all of them:

![preview](https://user-images.githubusercontent.com/13039463/126008291-0c03809b-7837-475b-8c5f-8ec7fb4bc662.png)
",True,158,https://api.github.com/repos/Terasology/MetalRenegades/pulls/158,https://github.com/Terasology/MetalRenegades/pull/158,closed,49,0,1,1,0,0,2,0,"[{'name': 'Type: Improvement'}, {'name': 'Topic: WorldGen'}]",2021-07-16 21:06:36+00:00,2021-07-17 13:25:06+00:00,58710.0,16:18:30,[],"[{'commit_sha': 'd3b324da28eee17f9994fe045c57c46cc6b6d9e3', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}]",Sylvie Dirkswager,13039463,,User,,44,,0,11
716286745,feat: tweak distribution of grass and dry rivers,"This makes grass much more common in scrublands, and makes dry riverbeds slightly less common. It should make the world look a little better in general.",True,165,https://api.github.com/repos/Terasology/MetalRenegades/pulls/165,https://github.com/Terasology/MetalRenegades/pull/165,closed,2,1,2,1,0,0,0,0,[],2021-08-19 21:52:52+00:00,2021-08-23 15:25:42+00:00,322370.0,"3 days, 17:32:50",[],"[{'commit_sha': '0c1734d00b47b288dc585ef4cc799686eed1190e', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}]",Sylvie Dirkswager,13039463,,User,,44,,0,11
680456650,feat: rock strata in rocky biome,"This is a pretty simple implementation of rock strata. It uses some rock types from GenericRocks, but I made a new sandstone texture since the one from GenericRocks was somewhat jarring in strata. (It's probably not ideal to have a separate sandstone block just for MR, so if other people also want to change the one from GenericRocks we could do that, or add a new type called something else.)

![Screenshot from 2021-06-29 19-49-31](https://user-images.githubusercontent.com/13039463/123885853-eb497d00-d913-11eb-8dc7-a4cded24563b.png)",True,150,https://api.github.com/repos/Terasology/MetalRenegades/pulls/150,https://github.com/Terasology/MetalRenegades/pull/150,closed,59,4,3,6,2,5,2,0,"[{'name': 'Type: Improvement'}, {'name': 'Topic: WorldGen'}]",2021-06-30 00:59:27+00:00,2021-07-06 21:22:38+00:00,591791.0,"6 days, 20:23:11","[{'comment_id': 661058610, 'comment_body': ""The `2` here is a hardcoded seed. That's obviously not a great idea, but the biome initializer doesn't currently have access to the seed - the biome initializer doesn't even run per-world. I'm not sure what the best solution is here, but it seems like a similar problem to one I just noticed where the game crashes if you open the world configuration dialog because the biome initializer is running before assets are available."", 'comment_created': datetime.datetime(2021, 6, 30, 1, 2, 19, tzinfo=datetime.timezone.utc), 'commenter': 'naalit', 'type': 'User'}, {'comment_id': 663342753, 'comment_body': 'Please just update the texture of the Sandstone in Generic Rocks.\r\n\r\nFor the future. Please consider everything in Generic Rocks and Soils as placeholder textures that can be replaced or modified to fit better into the world.', 'comment_created': datetime.datetime(2021, 7, 3, 9, 28, 39, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 663351986, 'comment_body': ""As I understand, the first term `pos.y() * 0.05`, handles the changing of the modulus for every 20 blocks. The term `noise * rocks.length` is there to bring in some variation. The `+ 1000` exists to make the term positive before it's plugged into the modulus. I'm confused as to why there is a `Math.abs` again on the outside. To handle negative modulus values, at least in C++, I've seen people use something along the lines of \r\n```\r\nint idx = (int) ((float) pos.y() * 0.05 + noise * rocks.length) % rocks.length;\r\nif(idx<0) idx+= rocks.length;\r\n```\r\nSo have a look at that if you think that works better/ is more readable.\r\n\r\nSecondly, it's not clear as to why in the term `noise * rocks.length` the noise is scaled by the number of strata layers. If I'm not wrong, this term controls the amplitude of the line between different strata, So `noise * 10` would cause that line to be a wave with a larger amplitude compared to `noise * 2`. I would expect it to be scaled by a constant instead. \r\n\r\nLastly, I was wondering if it would be possible to have different heights for different strata layers. I think this would be useful because having equally large sections of both dark and light blocks leads to very high contrast to the scenery. We could try experimenting with having deep layers of light blocks, with short layers of dark blocks in between and see if that  looks better.\r\n\r\n\r\n"", 'comment_created': datetime.datetime(2021, 7, 3, 11, 5, 1, tzinfo=datetime.timezone.utc), 'commenter': 'agent-q1', 'type': 'User'}, {'comment_id': 664851944, 'comment_body': "":+1: yep, that's a pattern we use in several places, either as explicit as here, or behind some abstraction layer."", 'comment_created': datetime.datetime(2021, 7, 6, 20, 19, 42, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 664854879, 'comment_body': 'I think you can use `org.joml.Math.clamp(min, max, val)` here:\r\n\r\n```suggestion\r\n        int idx = Math.clamp(0, rocks.length -1 , (int) (noise * rocks.length));\r\n```', 'comment_created': datetime.datetime(2021, 7, 6, 20, 24, 41, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}]","[{'commit_sha': 'ede33b290fbf58b3a3e0d9f50de22367989aa400', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9431953354eaa16241adf51115bfa3ecad801b7c', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d1a9aab26bdadf69c6f054c647eb60b2cf81e68', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef4f28e57224cac1a2a0e37b2788da078d9d71cc', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2cb2d9212fbe84e9d793bd7a3b8c7a1ade08a85c', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed0c4dacd0cce64e604fae8dcd388683849ad1fc', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}]",Sylvie Dirkswager,13039463,,User,,44,,0,11
683912977,feat: update sandstone and slate textures,"This replaces the sandstone texture with a new one and lightens the slate texture a little bit. This change is motivated by https://github.com/Terasology/MetalRenegades/pull/150, which uses those blocks in strata. With the previous textures the strata felt jarring, because there was so much contrast.

I don't think anything else uses GenericRocks, but if it does, we should make sure this doesn't make it look worse.

Before:
![Terasology-210705143055-1920x1080](https://user-images.githubusercontent.com/13039463/124513679-efa4e880-dda0-11eb-8cb9-8f568c853ddc.png)

After:
![Terasology-210705145035-1920x1080](https://user-images.githubusercontent.com/13039463/124513704-00edf500-dda1-11eb-911f-776236b4e7d5.png)
and close up on the new sandstone texture:
![Terasology-210705145111-1920x1080](https://user-images.githubusercontent.com/13039463/124513732-1400c500-dda1-11eb-9dea-035011b49807.png)",True,3,https://api.github.com/repos/Terasology/GenericRocks/pulls/3,https://github.com/Terasology/GenericRocks/pull/3,closed,0,0,2,1,0,0,2,0,"[{'name': 'Type: Improvement'}, {'name': 'Topic: UI/UX'}]",2021-07-05 20:09:47+00:00,2021-07-06 20:54:44+00:00,89097.0,"1 day, 0:44:57",[],"[{'commit_sha': 'dd5aaac9e3801a1da6111fc58e01d4bd063e8cce', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}]",Sylvie Dirkswager,13039463,,User,,44,,0,11
685494333,feat: variable-size mesas based on noise,"This adds mesas/buttes/plateaus based on noise which is scaled very sharply. They have mostly flat sides and tops, but they vary in height based on another noise which is changes more slowly. The tops have the steppe biome, and strata are visible all along the sides.

A large mesa:
![Terasology-210707151042-1920x1080](https://user-images.githubusercontent.com/13039463/124824078-84414f00-df37-11eb-8824-88aee7f7ea53.png)

Some smaller buttes:
![Terasology-210707151403-1920x1080](https://user-images.githubusercontent.com/13039463/124824293-cbc7db00-df37-11eb-90c8-39553759a9cc.png)

This is what happens when there's a fluctuation in a higher octave at the exact right level, I think it's a nice effect:
![Terasology-210707151416-1920x1080](https://user-images.githubusercontent.com/13039463/124824294-cc607180-df37-11eb-8ec0-3810f704ea1f.png)

Right now rivers going through mesas don't look very good, so I'm still working on the interaction between those.",True,155,https://api.github.com/repos/Terasology/MetalRenegades/pulls/155,https://github.com/Terasology/MetalRenegades/pull/155,closed,82,33,6,9,1,8,2,0,"[{'name': 'Type: Improvement'}, {'name': 'Topic: WorldGen'}]",2021-07-07 20:35:02+00:00,2021-07-24 13:06:27+00:00,1441885.0,"16 days, 16:31:25","[{'comment_id': 667319857, 'comment_body': ""`slopeHeight/1+slopeHeight` gives you the proportion of the sloping part of the mesa I'm guessing?"", 'comment_created': datetime.datetime(2021, 7, 10, 10, 4, 57, tzinfo=datetime.timezone.utc), 'commenter': 'agent-q1', 'type': 'User'}, {'comment_id': 667324565, 'comment_body': 'Is the `- 0.5f * smoothness` arbitrary?\r\nI guess the `+ 1` is to allow you to extract the lower part of the noise function. ', 'comment_created': datetime.datetime(2021, 7, 10, 10, 55, 16, tzinfo=datetime.timezone.utc), 'commenter': 'agent-q1', 'type': 'User'}, {'comment_id': 667325046, 'comment_body': 'This is for when rivers go through the mesa?', 'comment_created': datetime.datetime(2021, 7, 10, 11, 0, 41, tzinfo=datetime.timezone.utc), 'commenter': 'agent-q1', 'type': 'User'}, {'comment_id': 668251854, 'comment_body': ""The `- 0.5f * smoothness` is so that the slope ends exactly where the mesa wall starts (halfway past the threshold), so there's a smooth boundary instead of a jump.\r\nRight, the `+ 1` is just for scaling, since we want the slope to appear on `x <- [threshold, 1]` instead of `x <- [threshold-1, 1]` which is what you'd get with just `x - threshold` (where `x` is the noise value)."", 'comment_created': datetime.datetime(2021, 7, 12, 20, 59, 9, tzinfo=datetime.timezone.utc), 'commenter': 'naalit', 'type': 'User'}, {'comment_id': 671691612, 'comment_body': ""Maybe add brackets to make it clearer as so.\r\n`mesaData[i] * TeraMath.fadePerlin(TeraMath.clamp(humidSteepness*(1 - humidityData[i]/humidMax ));`\r\nIn this form, it is clearer as to why mesas don't sprout when `humidityData[i] > humidMax`"", 'comment_created': datetime.datetime(2021, 7, 17, 12, 31, 25, tzinfo=datetime.timezone.utc), 'commenter': 'agent-q1', 'type': 'User'}, {'comment_id': 671702908, 'comment_body': 'humidityData[i] ranges from 0 to 0.6 right?', 'comment_created': datetime.datetime(2021, 7, 17, 14, 18, 46, tzinfo=datetime.timezone.utc), 'commenter': 'agent-q1', 'type': 'User'}, {'comment_id': 671704200, 'comment_body': ""The function above gets clamped when `humidityData[i]` lies from `0 to 0.9*humidMax` .  The way it's implemented now, we need both the mesa noise to have a certain (high) value as well as humidity noise to have a certain (low) value. I would expect the probability of both of these happening to be fairly low. Could we try and implement something simpler where we do a check for the humidity, and spawn a mesa only when the humidity isn't very high? Base Humidity everywhere lies in the range 0 to 0.3 and only near rivers can it take a higher value than 0.3 right? "", 'comment_created': datetime.datetime(2021, 7, 17, 14, 31, 36, tzinfo=datetime.timezone.utc), 'commenter': 'agent-q1', 'type': 'User'}, {'comment_id': 672538849, 'comment_body': ""Yes, the humidity goes from 0 to 0.3 naturally, and then higher near rivers. If it's under 0.2, it's a desert, and above it's a scrubland. So the humidity threshold of 0.18 there essentially just means that mesas only spawn in deserts - there's actually about a 60% chance of it being below 0.18.\r\n\r\n> In this form, it is clearer as to why mesas don't sprout when humidityData[i] > humidMax\r\n\r\nI agree, I'll change it."", 'comment_created': datetime.datetime(2021, 7, 19, 18, 37, 41, tzinfo=datetime.timezone.utc), 'commenter': 'naalit', 'type': 'User'}]","[{'commit_sha': '2e52c86c52144aa7f6e887a8bf2d719bba94269b', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e475b48ceca9fb0dbb4e8545a58a5054400abd5a', 'committer_username': 'skaldarnar', 'committer_name': 'Tobias Nett', 'committer_email': None, 'commit_date': datetime.datetime(2012, 2, 18, 10, 28, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a597bab8c2c2c39b88a1114bed5c6db2a34cee5', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4d2c51c298166e6c54e50c0303ca7ab4ab65bd6', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d8f615e25fb73e1a7a7d6bb50c68a0d25b4f1c1', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5c54d4448530f4d76ba3e9ae5db65ef286f5831', 'committer_username': 'skaldarnar', 'committer_name': 'Tobias Nett', 'committer_email': None, 'commit_date': datetime.datetime(2012, 2, 18, 10, 28, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a6b7d1daef68ff7cf3c3dc30ea1c768c0f8aa5a1', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea890e6c7f996c83ad165eff2cd9900ec76a03bc', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96b0b81f0e5f0669874f823e6d87335ae417fba7', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}]",Sylvie Dirkswager,13039463,,User,,44,,0,11
690291814,feat: rework chunk ordering using Reactor,"### Contains

This is a rewrite of https://github.com/MovingBlocks/Terasology/pull/4773 to use Reactor for concurrency (see https://github.com/MovingBlocks/Terasology/issues/4798 and https://github.com/MovingBlocks/Terasology/pull/4786). It does the same thing as the old PR, but is a lot simpler and has more reliable concurrency. Performace should be about the same.

### How to test

Try flying around the world with this PR - it should be the same as https://github.com/MovingBlocks/Terasology/pull/4773 and much better than normal.",False,4822,https://api.github.com/repos/MovingBlocks/Terasology/pulls/4822,https://github.com/MovingBlocks/Terasology/pull/4822,open,446,482,9,23,7,24,2,0,"[{'name': 'Type: Improvement'}, {'name': 'Topic: Concurrency'}]",2021-07-14 23:44:38+00:00,,0.0,,"[{'comment_id': 670791262, 'comment_body': 'While 5 is long enough for my computer, it appears that the CI machine does unfortunately need 30 seconds to generate all the chunks. It probably has a lot of threads running at once.', 'comment_created': datetime.datetime(2021, 7, 15, 20, 41, 48, tzinfo=datetime.timezone.utc), 'commenter': 'naalit', 'type': 'User'}, {'comment_id': 671734812, 'comment_body': ""I think that we should try to explain what we're doing here when writing new methods, or at least add a docstring to `region` to make it simpler for others to figure out what is happening here."", 'comment_created': datetime.datetime(2021, 7, 17, 19, 29, 40, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 671735353, 'comment_body': 'Not sure which one is ""better"", as this is already pretty clear in what it does. In general, I try to push the side effect to the outside, e.g., instead of adding to another list from a `forEach` I\'d do:\r\n\r\n```suggestion\r\n        chunksInRange.addAll(\r\n            relevanceSystem.neededChunks()\r\n                .filter(pos -> !chunksInRange.contains(pos))\r\n                .collect(Collectors.toList());\r\n```\r\n\r\nHowever, this has the additional collector in place we don\'t really need here, and the original solution is pretty clean already.', 'comment_created': datetime.datetime(2021, 7, 17, 19, 35, 53, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 671735518, 'comment_body': 'Could there be duplicates ending up in `chunksInRange` for some reason?', 'comment_created': datetime.datetime(2021, 7, 17, 19, 37, 9, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 671736694, 'comment_body': 'Can we move this inside the `if` to only create a new instance if we really need it?', 'comment_created': datetime.datetime(2021, 7, 17, 19, 51, 9, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 671747890, 'comment_body': 'use the parallel scheduler this is cpu bounded. we probably also want to limit the number of subscribers to the number of cores on the machine.\r\n```suggestion\r\n        Flux<Chunk> stream = chunkStream.subscribeOn(Schedulers.parallel());\r\n        for (int i = 0; i < NUM_TASK_THREADS; i++) {\r\n```', 'comment_created': datetime.datetime(2021, 7, 17, 21, 53, 16, tzinfo=datetime.timezone.utc), 'commenter': 'pollend', 'type': 'User'}, {'comment_id': 671750140, 'comment_body': 'what is the reasoning behind this. seems so strange to me. so we have 2 threads pushing chunks to the same concurrent map and at the same time we also attempt to iterate over the collection. there is going to be a lot of thread contention with locking the individual tasks, and the map itself. ', 'comment_created': datetime.datetime(2021, 7, 17, 22, 19, 11, tzinfo=datetime.timezone.utc), 'commenter': 'pollend', 'type': 'User'}, {'comment_id': 671905421, 'comment_body': ""I don't think so, the only place we add to `chunksInRange` is the line above which `filter`s out duplicates."", 'comment_created': datetime.datetime(2021, 7, 18, 22, 15, 51, tzinfo=datetime.timezone.utc), 'commenter': 'naalit', 'type': 'User'}, {'comment_id': 671905533, 'comment_body': ""That's a good idea, I just moved this code from somewhere else in the file but I'll change it."", 'comment_created': datetime.datetime(2021, 7, 18, 22, 16, 49, tzinfo=datetime.timezone.utc), 'commenter': 'naalit', 'type': 'User'}, {'comment_id': 671906200, 'comment_body': ""I am using the parallel scheduler, but with a name and limiting it to `NUM_TASK_THREADS` threads. From the docs, it sounds like that's the only difference between `newParallel` and `parallel`. More than `NUM_TASK_THREADS` workers wouldn't be helpful as there are only that many subscriptions, so are you just talking about the case where the host CPU has less than `NUM_TASK_THREADS` cores?"", 'comment_created': datetime.datetime(2021, 7, 18, 22, 22, 44, tzinfo=datetime.timezone.utc), 'commenter': 'naalit', 'type': 'User'}, {'comment_id': 671908502, 'comment_body': ""just realized this is a consuming operation so maybe push the operation to boundedElastic(). should re-claim the thread when we're finished. "", 'comment_created': datetime.datetime(2021, 7, 18, 22, 43, 44, tzinfo=datetime.timezone.utc), 'commenter': 'pollend', 'type': 'User'}, {'comment_id': 671911224, 'comment_body': ""Do you mean when the player is standing still and chunk generation has finished, or after a world is closed? In the former case, I don't think that usually happens for very long, so I would guess that reclaiming the workers would have more overhead; in the latter case, the whole scheduler is already disposed after the world is closed."", 'comment_created': datetime.datetime(2021, 7, 18, 23, 8, 2, tzinfo=datetime.timezone.utc), 'commenter': 'naalit', 'type': 'User'}, {'comment_id': 672616054, 'comment_body': 'That is a little bit clearer, but I think I would prefer keeping it as is to avoid allocating the extra list.', 'comment_created': datetime.datetime(2021, 7, 19, 20, 41, 2, tzinfo=datetime.timezone.utc), 'commenter': 'naalit', 'type': 'User'}, {'comment_id': 672618170, 'comment_body': ""Oh wait, duplicates actually are possible when there are multiple clients connected with overlapping relevance regions, since there will be duplicates in `neededChunks`. However, that shouldn't actually cause any problems because the code to generate chunks checks `currentlyProcessing` first."", 'comment_created': datetime.datetime(2021, 7, 19, 20, 44, 23, tzinfo=datetime.timezone.utc), 'commenter': 'naalit', 'type': 'User'}, {'comment_id': 674463322, 'comment_body': ""this is kind of strange, seems like something just so it passes the unit test. I'm not sure this is a good direction that resolves the test?"", 'comment_created': datetime.datetime(2021, 7, 22, 2, 42, 51, tzinfo=datetime.timezone.utc), 'commenter': 'pollend', 'type': 'User'}, {'comment_id': 674996039, 'comment_body': ""It just doesn't use separate threads in the pipeline tests. I agree that that's not ideal, but it's better than adding `Thread.sleep(1000)` after each `Flux.create()`, which is basically what we'd have to do otherwise to ensure that the subscription actually happens before we try to submit chunks (that was what was causing the failing test).\r\n\r\nI guess another option would be adding another signal object for waiting until subscription happens, plus a flag to check if it's already subscribed - that would probably work, but I'm not sure it would actually be less intrusive. If you think that would be better, though, I can do that."", 'comment_created': datetime.datetime(2021, 7, 22, 17, 8, 43, tzinfo=datetime.timezone.utc), 'commenter': 'naalit', 'type': 'User'}, {'comment_id': 675000753, 'comment_body': 'just make  Schduler a parameter then you can use the FIFO scheduler. \r\n\r\n', 'comment_created': datetime.datetime(2021, 7, 22, 17, 15, 44, tzinfo=datetime.timezone.utc), 'commenter': 'pollend', 'type': 'User'}, {'comment_id': 675257229, 'comment_body': ""Good idea, I've just implemented that. Unfortunately there isn't an existing scheduler that runs everything immediately on the same thread, but a custom one that does that was just a 10 line anonymous class."", 'comment_created': datetime.datetime(2021, 7, 23, 1, 27, 52, tzinfo=datetime.timezone.utc), 'commenter': 'naalit', 'type': 'User'}, {'comment_id': 676965557, 'comment_body': 'I think that doing away with the complexity of multi-threading during tests hopefully helps to fight flakiness and instability. \r\n\r\nHowever, this also means that we\'re not testing the ""real thing"" here. The good part still is that if something goes wrong in the end at runtime we know to start looking at the concurrency parts...\r\n\r\n@keturn might this pitfall be also occurring in Pathfinding, even without using Reactor?', 'comment_created': datetime.datetime(2021, 7, 26, 21, 44, 27, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 677015275, 'comment_body': ""I do agree, it's unfortunate that the concurrent version doesn't work reliably on CI. I'd kind of still like to be able to run it concurrently on my computer, since it does work reliably on a normal computer, but I don't know if there's a nice way to do that."", 'comment_created': datetime.datetime(2021, 7, 26, 23, 42, 43, tzinfo=datetime.timezone.utc), 'commenter': 'naalit', 'type': 'User'}, {'comment_id': 677049860, 'comment_body': ""Important thing to know (for newbies like me to the Flux API): This emitter function we're passing to Flux.create (on line 460) is called with a new sink _for each subscriber._\r\n\r\nThat's how we're managing to add multiple chunk-processing subscribers to this without having each subscriber process the _same_ chunks."", 'comment_created': datetime.datetime(2021, 7, 27, 1, 27, 12, tzinfo=datetime.timezone.utc), 'commenter': 'keturn', 'type': 'User'}, {'comment_id': 677056630, 'comment_body': ""I'd like fewer levels of nested scope here.\r\n\r\nThere's some state in fields of this LocalChunkProvider instance, some state captured in the scope of each invocation of `chunkFlux` (`currentlyProcessing`), we're synchronizing on something in line 463 which is probably LocalChunkProvider but might be this anonymous Consumer object we're passing to `sink.onRequest`.\r\n\r\nI think it'd be worth using more named methods (and maybe even a new class) to make it clearer what state lives where and what its lifetime is."", 'comment_created': datetime.datetime(2021, 7, 27, 1, 46, 33, tzinfo=datetime.timezone.utc), 'commenter': 'keturn', 'type': 'User'}, {'comment_id': 677075791, 'comment_body': ""A _lot_ of the complexity of this code is there explicitly for the reason of allowing chunk generation to happen in parallel.\r\n\r\nIf there were only a single-threaded sink processing things from a queue, there's a lot of synchronization and `currentyProcessing` sorts of variables we wouldn't need.\r\n\r\nIf we are never testing the multi-threaded scenarios, we're seriously undermining the value of our tests."", 'comment_created': datetime.datetime(2021, 7, 27, 2, 42, 57, tzinfo=datetime.timezone.utc), 'commenter': 'keturn', 'type': 'User'}, {'comment_id': 677843311, 'comment_body': ""I agree, named methods would be good and I think `currentlyProcessing` should just be a member variable. I'll change that, and add some comments explaining when things get called too, since I agree that it's not very intuitive."", 'comment_created': datetime.datetime(2021, 7, 27, 22, 28, 35, tzinfo=datetime.timezone.utc), 'commenter': 'naalit', 'type': 'User'}]","[{'commit_sha': '2f05f313268584fbd91351ea97fb2940ffee366b', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5516beeb86252b4a41742fa997d8a41e480e46af', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '28d27b6c919b37d271398b92d2a742f1208dab23', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f11bbe88a7538e92f98c8efe30351617aed878a', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd7781e56ff2c126b66f363a13c6d695ebfffb7c3', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34733b50689321237677cdad3932c6f9aad3c536', 'committer_username': 'pollend', 'committer_name': 'Michael Pollind', 'committer_email': None, 'commit_date': datetime.datetime(2011, 6, 16, 15, 26, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b6387018326ed385b1ba6e0bf30d7d18d924640', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb48853fe2dccf4e616cc34e189fd18bf9932901', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d55cfb319f438e237b89455468fbc5515a0c15f', 'committer_username': 'pollend', 'committer_name': 'Michael Pollind', 'committer_email': None, 'commit_date': datetime.datetime(2011, 6, 16, 15, 26, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cafe2bf670d8892db5d6d558e59d9898fdeb50bd', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5179c121dd86aa093bd36ee1d8f0556265bb0a9', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5dc62136d168afa9962a850cfecb375eaba5cc4b', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c38115c8806f11a687542baf8a70fe03ccf4ea93', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb0fc87cd686b7b0e95305c58199994a9b8a7cdb', 'committer_username': 'pollend', 'committer_name': 'Michael Pollind', 'committer_email': None, 'commit_date': datetime.datetime(2011, 6, 16, 15, 26, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0f01d65e58d76db5fc63e823a1e673c7d2f3627', 'committer_username': 'pollend', 'committer_name': 'Michael Pollind', 'committer_email': None, 'commit_date': datetime.datetime(2011, 6, 16, 15, 26, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c50d659dfd5e91af94e3039385189b881b9d75f0', 'committer_username': 'DarkWeird', 'committer_name': 'Nail Khanipov', 'committer_email': None, 'commit_date': datetime.datetime(2012, 11, 5, 6, 16, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7acfc584443f3a6a3bf6534b476d371d0f0a83b0', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3407b5e7571c78dbee2b2d08ccfd2d188d4561df', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd7d75de38d3d6c603eec33cbd2e8bfcb7a93d9a', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '41977a8ece061e570629bc8f29451a51c60f22d9', 'committer_username': 'pollend', 'committer_name': 'Michael Pollind', 'committer_email': None, 'commit_date': datetime.datetime(2011, 6, 16, 15, 26, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb8915041342d6157cdcaa21f7b4b52670a4bff6', 'committer_username': 'pollend', 'committer_name': 'Michael Pollind', 'committer_email': None, 'commit_date': datetime.datetime(2011, 6, 16, 15, 26, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5cb4aaaf65182598fe6f60f58c5899628df788b0', 'committer_username': 'pollend', 'committer_name': 'Michael Pollind', 'committer_email': None, 'commit_date': datetime.datetime(2011, 6, 16, 15, 26, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e469b17873d089251663695b7e89578ca1cc670a', 'committer_username': 'pollend', 'committer_name': 'Michael Pollind', 'committer_email': None, 'commit_date': datetime.datetime(2011, 6, 16, 15, 26, 27, tzinfo=datetime.timezone.utc)}]",Sylvie Dirkswager,13039463,,User,,44,,0,11
678217020,fix: make BlockArea.iterator() use the same order as noise and facet data,"<!-- Thanks for submitting a pull request for Terasology! :-)
Please fill in some details about the PR, below.
If the PR contains source code please make sure to run Checkstyle on it first.
If you add unit tests we'll love you forever! 

You might also want to read ""How to Work on a PR Efficiently"":
https://github.com/MovingBlocks/Terasology/wiki/How-to-Work-on-a-PR-Efficiently
-->

### Contains

Many facet providers use raw arrays of facet data and precalculated noise, which is more efficient. To get the position as well as the index, it would make sense to use `BlockArea.iterator()` and call `next()` on each loop. The problem is, facet and noise data increase the x coordinate first (`(0, 0), (1,  0), (2, 0)...`), but `BlockArea.iterator()` increases the y coordinate first (`(0, 1), (0, 1), (0, 2)...`). There's no good reason for that that I could find, so this PR switches it to the more intuitive x-first order that everything else uses, making it possible to both get the block positions and use subsampled noise efficiently in a facet provider.

### Outstanding before merging

Was there any reason for the y-first order here?",True,4797,https://api.github.com/repos/MovingBlocks/Terasology/pulls/4797,https://github.com/MovingBlocks/Terasology/pull/4797,closed,29,4,2,4,2,1,1,0,[{'name': 'Type: Bug'}],2021-06-25 22:40:27+00:00,2021-06-30 13:40:27+00:00,399600.0,"4 days, 15:00:00","[{'comment_id': 659121815, 'comment_body': ""can you add a test for this case. I think this doesn't cover the case if you call next() twice in a row without findNext(). I think I made the same mistake in BlockRegion. "", 'comment_created': datetime.datetime(2021, 6, 26, 5, 19, 59, tzinfo=datetime.timezone.utc), 'commenter': 'pollend', 'type': 'User'}]","[{'commit_sha': 'd5cf622683cbc10cf6207623603eaba2d29cd0f4', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8576d106a648fb334f3fbe57427c00ff78400627', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79ced0d4d85b38ad748085329e2aace2b705a318', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9843e94bd07b43560ec8c692f48ae80474b20bca', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}]",Sylvie Dirkswager,13039463,,User,,44,,0,11
663068326,fix: world generation with zones,"### Contains

When fixing https://github.com/Terasology/TutorialWorldGeneration/pull/19, I noticed that the zoned world generator doesn't work anymore. Only the first zone added to a `WorldBuilder` actually appears in the world. It turns out this is because `WorldBuilder` deduplicates rasterizers based on class (but curiously, only rasterizers which don't have dependencies), so it sees three `Zone`s and decides that they're equivalent and it only needs to rasterize the first one. This is invalid for zones, and it's also invalid for any rasterizer with per-instance configuration, which may not be used now but would be a good thing to support. This PR just gets rid of the deduplication.

### How to test

Checkout https://github.com/Terasology/TutorialWorldGeneration/pull/19, and try creating a world with the `ZonedSimplex` generator. Previously, the ground wouldn't generate and you would fall infinitely; after this PR, it should generate a normal-looking world.

### Outstanding before merging

Was there any case where the deduplication that `WorldBuilder` was doing is actually needed? If so, we may want to use some other criteria for deduplication or something.",True,4751,https://api.github.com/repos/MovingBlocks/Terasology/pulls/4751,https://github.com/MovingBlocks/Terasology/pull/4751,closed,1,1,1,2,1,0,2,0,"[{'name': 'Type: Bug'}, {'name': 'Topic: WorldGen'}]",2021-06-06 23:03:33+00:00,2021-06-07 21:51:56+00:00,82103.0,22:48:23,[],"[{'commit_sha': 'd0c5cdf91bf9788a1296d70ac802bcb212540067', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec113159cb24b57885a696e92f6fa5b2755648b4', 'committer_username': 'skaldarnar', 'committer_name': 'Tobias Nett', 'committer_email': None, 'commit_date': datetime.datetime(2012, 2, 18, 10, 28, 41, tzinfo=datetime.timezone.utc)}]",Sylvie Dirkswager,13039463,,User,,44,,0,11
617364709,fix: Update for engine PR MovingBlocks/Terasology#4614,"https://github.com/MovingBlocks/Terasology/pull/4614 changed the type signature of `BlockMeshPart.appendTo()` to require a `ChunkView`, so this updates `FlowingLiquids` to provide one. It's a very small change, because the `ChunkView` was already available at the call sites.

`FlowingLiquids` should compile again now.",True,33,https://api.github.com/repos/Terasology/FlowingLiquids/pulls/33,https://github.com/Terasology/FlowingLiquids/pull/33,closed,2,2,2,1,0,0,0,0,[],2021-04-17 18:54:00+00:00,2021-04-17 19:25:49+00:00,1909.0,0:31:49,[],"[{'commit_sha': '78f0b527526a63c9250a9bd16e71c983ac89257b', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}]",Sylvie Dirkswager,13039463,,User,,44,,0,11
606044298,fix: could place blocks inside the player,"<!-- Thanks for submitting a pull request for Terasology! :-)
Please fill in some details about the PR, below.
If the PR contains source code please make sure to run Checkstyle on it first.
If you add unit tests we'll love you forever! 

You might also want to read ""How to Work on a PR Efficiently"":
https://github.com/MovingBlocks/Terasology/wiki/How-to-Work-on-a-PR-Efficiently
-->

### Contains

Disallows placing blocks inside the player. The restriction on placing blocks inside colliders was broken, so you could place blocks inside of yourself. This was mentioned briefly in the org meeting as a problem with jumping and placing blocks below you.

It turns out it was due to calling `btCollisionObject.getUserPointer()` to get a collider's attached entity, which returns a `long` which casts implicitly into an `Object` through `Long`, instead of getting `.userData`. The entity data is set with `.userData`, so it should be accessed the same way.

The margins of the bounding box had been messed up at some point as well, making it so you couldn't place blocks near the player, so I put them back to a reasonable position.

### How to test

Try looking down and placing blocks inside your feet - it shouldn't work. You should still be able to place blocks near you: try walking up to a block at waist height and placing one on top of it, or placing a block next to the one you're standing on.
",True,4608,https://api.github.com/repos/MovingBlocks/Terasology/pulls/4608,https://github.com/MovingBlocks/Terasology/pull/4608,closed,8,8,2,3,2,0,1,0,[{'name': 'Type: Bug'}],2021-03-31 17:21:04+00:00,2021-04-01 02:53:17+00:00,34333.0,9:32:13,[],"[{'commit_sha': 'd49a243322d82fb5c8659e56b3a8cb6193a8f8cf', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4fdb17f95bb14f78ff579e844c8c8fc28ef354d9', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ddcf1b87bb702c59892261c7e863d120039d0cdc', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}]",Sylvie Dirkswager,13039463,,User,,44,,0,11
597367717,Don't move the camera when window is refocused,"<!-- Thanks for submitting a pull request for Terasology! :-)
Please fill in some details about the PR, below.
If the PR contains source code please make sure to run Checkstyle on it first.
If you add unit tests we'll love you forever! 

You might also want to read ""How to Work on a PR Efficiently"":
https://github.com/MovingBlocks/Terasology/wiki/How-to-Work-on-a-PR-Efficiently
-->

### Contains

Fix the camera position resetting to look at the sky when the window is unfocused and then focused again. It just resets the mouse position whenever the window is focused, which also means that if you unfocus, move the mouse, and focus again, the camera doesn't move.

### How to test

Start the game, move the camera, alt-tab to another window, then alt-tab back. The camera shouldn't move.",True,4590,https://api.github.com/repos/MovingBlocks/Terasology/pulls/4590,https://github.com/MovingBlocks/Terasology/pull/4590,closed,16,7,1,5,0,4,1,0,[{'name': 'Type: Bug'}],2021-03-20 22:11:05+00:00,2021-03-26 03:46:52+00:00,452147.0,"5 days, 5:35:47","[{'comment_id': 598166829, 'comment_body': ""suggestion: Since we don't need to calculate and store the delta, you could assign these directly to xpos and ypos without the intermediate local variable."", 'comment_created': datetime.datetime(2021, 3, 20, 22, 21, 5, tzinfo=datetime.timezone.utc), 'commenter': 'keturn', 'type': 'User'}, {'comment_id': 598211153, 'comment_body': 'can this be replaced with a Vector2d;', 'comment_created': datetime.datetime(2021, 3, 21, 2, 49, 1, tzinfo=datetime.timezone.utc), 'commenter': 'pollend', 'type': 'User'}, {'comment_id': 598330788, 'comment_body': ""Yes, it can. That does make it shorter, as long as we're fine with `newPos.sub(pos, posDelta)` being somewhat harder to read than `xposDelta = x - this.xpos`."", 'comment_created': datetime.datetime(2021, 3, 21, 20, 9, 40, tzinfo=datetime.timezone.utc), 'commenter': 'naalit', 'type': 'User'}, {'comment_id': 600116526, 'comment_body': ""It would also require corresponding changes to the `update` method which uses those fields.\r\n\r\nI know I've encouraged a bit of scope creep here by bringing up the code duplication in `update` and the use of `rewind`, but we should probably not stack _all_ of the possible clean-ups we can think of in to this bugfix PR."", 'comment_created': datetime.datetime(2021, 3, 24, 2, 36, 38, tzinfo=datetime.timezone.utc), 'commenter': 'keturn', 'type': 'User'}]","[{'commit_sha': '3679e60830fa0aba1e35e0105cc480f0b8e34efb', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd92b2bf6b4f42c38ab49159b69b7443902e3201c', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f266c0854bd65e33b8ee32dadfa51c5d995f829', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a550cbe89887171ccce920890550191ee7d2120a', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c9344e2a578ed7d149a0bf0d2545046ef8da6a77', 'committer_username': 'skaldarnar', 'committer_name': 'Tobias Nett', 'committer_email': None, 'commit_date': datetime.datetime(2012, 2, 18, 10, 28, 41, tzinfo=datetime.timezone.utc)}]",Sylvie Dirkswager,13039463,,User,,44,,0,11
716286007,feat: make render distance for (partially) transparent blocks adjustable,"<!-- Thanks for submitting a pull request for Terasology! :-)
Please fill in some details about the PR, below.
If the PR contains source code please make sure to run Checkstyle on it first.
If you add unit tests we'll love you forever! 

You might also want to read ""How to Work on a PR Efficiently"":
https://github.com/MovingBlocks/Terasology/wiki/How-to-Work-on-a-PR-Efficiently
-->

### Contains

Transparent blocks like leaves and grass are usually invisible beyond a certain distance. This is actually because the game will only render transparent blocks in the closest 64 chunks to the player. This PR disables the limit by default, but it can be re-enabled and the limit changed with a slider in the video settings.

### How to test

Look at some trees in the distance, and make sure they still have leaves. Then set the limit to 64 or something and see the difference. I've been testing in Metal Renegades, which might be easier because you can see trees further away.",True,4858,https://api.github.com/repos/MovingBlocks/Terasology/pulls/4858,https://github.com/MovingBlocks/Terasology/pull/4858,closed,55,32,7,5,3,0,2,0,"[{'name': 'Type: Bug'}, {'name': 'Topic: Rendering'}]",2021-08-19 21:51:14+00:00,2021-08-26 18:34:29+00:00,592995.0,"6 days, 20:43:15",[],"[{'commit_sha': '1bb2fe0464f756fb043292c3e81d19a596485bef', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c4d1e15f56dbe5f573c9d92edd3fa6fbb505ae7', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69bc54fca6a00a9dd3dde5adcb709b37a6287cae', 'committer_username': 'jdrueckert', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 7, 14, 31, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f57673be6cc3847b899a5f5a63f6f08df0279b66', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c7186c3ab6511f5732b2c357fc94a89b8d66876e', 'committer_username': 'skaldarnar', 'committer_name': 'Tobias Nett', 'committer_email': None, 'commit_date': datetime.datetime(2012, 2, 18, 10, 28, 41, tzinfo=datetime.timezone.utc)}]",Sylvie Dirkswager,13039463,,User,,44,,0,11
691751575,fix: use correct tile size for minimap grid,"The tile size of the WorldAtlas varies based on the loaded modules. The minimap has code to query the actual tile size, but it's been commented out ever since it was added 6 years ago, with a comment about security issues which I can't find any more information on. It's using a hardcoded tile size right now, which is causing problems in Metal Renegades. This PR switches to querying the actual tile size; if it does still have security issues, a different solution will probably be required.

![map-old](https://user-images.githubusercontent.com/13039463/126009826-c467a771-c63e-4d31-83fc-cf6fe870f61b.png)
*How the map looks in MR right now - colors are messed up and a grid pattern is visible at all zoom levels except for -8.*

![map-new](https://user-images.githubusercontent.com/13039463/126009827-781000fb-8277-484c-98b1-1f4a69c40e20.png)
*How it looks after this PR, on the same terrain.*",True,30,https://api.github.com/repos/Terasology/Minimap/pulls/30,https://github.com/Terasology/Minimap/pull/30,closed,4,5,1,1,0,1,1,0,[{'name': 'Type: Bug'}],2021-07-16 21:26:12+00:00,2021-07-17 10:14:03+00:00,46071.0,12:47:51,"[{'comment_id': 671593717, 'comment_body': 'probably something to do with CoreRegistry. there are some long term plans to replace it with gestalt-DI.', 'comment_created': datetime.datetime(2021, 7, 17, 2, 15, 34, tzinfo=datetime.timezone.utc), 'commenter': 'pollend', 'type': 'User'}]","[{'commit_sha': '21a0e4d2e8dec9915739d2d8ec16b0841af10425', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}]",Sylvie Dirkswager,13039463,,User,,44,,0,11
685460280,fix: add initialize() method to Biome,"Adds a method `initialize()`, which is called when biomes are registered. This provides a place to perform initialization, like getting blocks from the `BlockManager`, which needs to be done after systems are registered (so it doesn't happen at all in the world preview during pregeneration).",True,16,https://api.github.com/repos/Terasology/BiomesAPI/pulls/16,https://github.com/Terasology/BiomesAPI/pull/16,closed,6,0,2,1,0,0,2,0,"[{'name': 'Type: Bug'}, {'name': 'Topic: WorldGen'}]",2021-07-07 19:38:21+00:00,2021-07-09 17:15:40+00:00,164239.0,"1 day, 21:37:19",[],"[{'commit_sha': 'a3546a86a363402a1b351cc849fc33e199b6fe9d', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}]",Sylvie Dirkswager,13039463,,User,,44,,0,11
685461283,fix: move block caching to Biome.initialize,"Because the BlockManager isn't used until after systems are registered, this should fix the world setup and preview screens for CoreGameplay (https://github.com/MovingBlocks/Terasology/issues/4801). Depends on https://github.com/Terasology/BiomesAPI/pull/16.",True,39,https://api.github.com/repos/Terasology/CoreWorlds/pulls/39,https://github.com/Terasology/CoreWorlds/pull/39,closed,3,0,1,1,0,0,2,0,"[{'name': 'Type: Bug'}, {'name': 'Topic: WorldGen'}]",2021-07-07 19:40:12+00:00,2021-07-09 17:30:54+00:00,165042.0,"1 day, 21:50:42",[],"[{'commit_sha': 'e6db9736d220acf4f6662c994f1d8ad87dee11d9', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}]",Sylvie Dirkswager,13039463,,User,,44,,0,11
685463590,fix: move block caching to Biome.initialize,"The same thing as https://github.com/Terasology/CoreWorlds/pull/39, but for the MR-specific biomes. After both PRs, the world setup and preview screens should work again.",True,154,https://api.github.com/repos/Terasology/MetalRenegades/pulls/154,https://github.com/Terasology/MetalRenegades/pull/154,closed,12,8,1,1,0,0,2,0,"[{'name': 'Type: Bug'}, {'name': 'Topic: WorldGen'}]",2021-07-07 19:44:30+00:00,2021-07-09 17:31:09+00:00,164799.0,"1 day, 21:46:39",[],"[{'commit_sha': '09653f6e56a2b8c66d5347f6864e5cdb27c2dc69', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}]",Sylvie Dirkswager,13039463,,User,,44,,0,11
685465671,fix: move block caching out of static initializer,"This moves getting red and black dice blocks from the BlockManager to the `initialize()` method of the rasterizer instead of having them in static constructors. Alongside https://github.com/Terasology/CoreWorlds/pull/39, it should fix the world setup and preview screens in LaS.",True,223,https://api.github.com/repos/Terasology/LightAndShadow/pulls/223,https://github.com/Terasology/LightAndShadow/pull/223,closed,6,4,1,2,0,2,1,0,[{'name': 'Type: Bug'}],2021-07-07 19:48:15+00:00,2021-07-08 19:14:50+00:00,84395.0,23:26:35,"[{'comment_id': 665662108, 'comment_body': ""Is there any reason these were `static` before? I just made them instance variables, since they're initialized with the other instance variables, and there's only ever one instance of the rasterizer anyway."", 'comment_created': datetime.datetime(2021, 7, 7, 19, 49, 47, tzinfo=datetime.timezone.utc), 'commenter': 'naalit', 'type': 'User'}, {'comment_id': 666454252, 'comment_body': ""I don't think so. Probably was a checkstyle fix or something like that that we did without looking in too much detail."", 'comment_created': datetime.datetime(2021, 7, 8, 19, 13, 12, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}]","[{'commit_sha': 'e56426c9a9aa04ffc1ada55ad904004b0ea9c6c9', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c86f7221cf8605ab66dae0afdeee9cb6059006cf', 'committer_username': 'ahv15', 'committer_name': 'Harshit', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 9, 17, 8, tzinfo=datetime.timezone.utc)}]",Sylvie Dirkswager,13039463,,User,,44,,0,11
711707743,feat: make facet providers scalable to enable LOD chunks,"LOD chunks still don't actually show up with this enabled, and I haven't figured out why yet, but this and https://github.com/Terasology/DynamicCities/pull/103 is at least part of what's required for them to work.",True,162,https://api.github.com/repos/Terasology/MetalRenegades/pulls/162,https://github.com/Terasology/MetalRenegades/pull/162,closed,36,48,7,2,0,1,2,0,"[{'name': 'Type: Improvement'}, {'name': 'Topic: WorldGen'}]",2021-08-12 22:28:11+00:00,2021-08-15 09:56:43+00:00,214112.0,"2 days, 11:28:32","[{'comment_id': 688679225, 'comment_body': 'This is need to have the LOD chunks properly lit. This is what it looks without this additional rasterizer:\r\n\r\n![Terasology-210813190644-1920x1055](https://user-images.githubusercontent.com/1448874/129398411-801caef2-97f3-466e-81e9-df732a8e968e.png)\r\n', 'comment_created': datetime.datetime(2021, 8, 13, 17, 40, 38, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}]","[{'commit_sha': '07c27075df98ff67b8e436db0860b9facca855bc', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df319e59d910156f36c4840b021b7e0fe9401310', 'committer_username': 'skaldarnar', 'committer_name': 'Tobias Nett', 'committer_email': None, 'commit_date': datetime.datetime(2012, 2, 18, 10, 28, 41, tzinfo=datetime.timezone.utc)}]",Sylvie Dirkswager,13039463,,User,,44,,0,11
711707483,feat: make SolidRasterizer and ResourceProvider scalable to enable LOD chunks,"There's no reason for it not to be, it just hadn't been implemented. This is required for the terrain to generate when using LOD chunks in Metal Renegades (https://github.com/Terasology/MetalRenegades/pull/162).",True,103,https://api.github.com/repos/Terasology/DynamicCities/pulls/103,https://github.com/Terasology/DynamicCities/pull/103,closed,24,32,2,4,0,5,2,0,"[{'name': 'Type: Improvement'}, {'name': 'Topic: WorldGen'}]",2021-08-12 22:27:58+00:00,2021-08-15 09:56:14+00:00,214096.0,"2 days, 11:28:16","[{'comment_id': 688678710, 'comment_body': 'Is division correct here, or should it be a multiplication? :zany_face: ', 'comment_created': datetime.datetime(2021, 8, 13, 17, 39, 52, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 688812384, 'comment_body': 'If the result of the `ResourceProvider` only has an effect in the actual ""real"" chunks, maybe we should bail out early if the `scale` is not 1?', 'comment_created': datetime.datetime(2021, 8, 13, 22, 35, 50, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 688960623, 'comment_body': 'Well, we need *a* `ResourceFacet` so that `CompatibleRasterizer`s can add resources to it. I guess an alternative would be to make `CompatibleRasterizer` check for a null resource facet and ignore it.', 'comment_created': datetime.datetime(2021, 8, 14, 16, 26, 27, tzinfo=datetime.timezone.utc), 'commenter': 'naalit', 'type': 'User'}, {'comment_id': 688966872, 'comment_body': ""My main concern here is that if we use the wrong operation it will only confuse people in the future :see_no_evil: So, even if it does not directly matter I'd put a value here that at least makes sense from the mathematical point of view."", 'comment_created': datetime.datetime(2021, 8, 14, 16, 37, 16, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 689061727, 'comment_body': '```suggestion\r\n        ResourceFacet facet = new ResourceFacet(region.getRegion(), border, gridSize);\r\n```', 'comment_created': datetime.datetime(2021, 8, 15, 9, 42, 23, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}]","[{'commit_sha': 'a8dd7e615f724c5ea05e6bc14d9efba98a513eff', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a17c721a6381d5412b3eef6d127b85b4d8ef3d6', 'committer_username': 'skaldarnar', 'committer_name': 'Tobias Nett', 'committer_email': None, 'commit_date': datetime.datetime(2012, 2, 18, 10, 28, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '933b13cf3bf84ac7355e870363d6befd2d0b09f5', 'committer_username': 'skaldarnar', 'committer_name': 'Tobias Nett', 'committer_email': None, 'commit_date': datetime.datetime(2012, 2, 18, 10, 28, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73a0ac1470450798c4a4a315d03dd00028dbb9da', 'committer_username': 'skaldarnar', 'committer_name': 'Tobias Nett', 'committer_email': None, 'commit_date': datetime.datetime(2012, 2, 18, 10, 28, 41, tzinfo=datetime.timezone.utc)}]",Sylvie Dirkswager,13039463,,User,,44,,0,11
698224903,feat: add priority to Updates annotation of facet providers,"<!-- Thanks for submitting a pull request for Terasology! :-)
Please fill in some details about the PR, below.
If the PR contains source code please make sure to run Checkstyle on it first.
If you add unit tests we'll love you forever! 

You might also want to read ""How to Work on a PR Efficiently"":
https://github.com/MovingBlocks/Terasology/wiki/How-to-Work-on-a-PR-Efficiently
-->

### Contains

`WorldBuilder` comes up with the order to run facet providers in based on their annotations - `@Requires`, `@Produces`, and `@Updates`. But right now, there's no way to control order between `@Updates` providers - for example, a river provider should update the elevation after a mountain provider, so that rivers are carved into mountains and not the other way around. This PR adds a mechanism to do that, another field on `@Updates(value = ..., priority = UpdatePriority.PRIORITY_HIGH)` with similar effect to the existing event handler priority mechanism. This also ended up simplifying the provider ordering code.

There's now a circular dependency in `CoreWorlds`, since `SpawnPlateauProvider` requires `SurfaceRoughnessFacet` and `SimplexRoughnessProvider` requires `ElevationFacet`, which can be resolved by explicitly giving `SpawnPlateauProvider` a lower priority - there's even a nice error message that suggests the correct change. Required changes to other world generators should be similarly minor and straightforward.",True,4833,https://api.github.com/repos/MovingBlocks/Terasology/pulls/4833,https://github.com/MovingBlocks/Terasology/pull/4833,closed,135,72,3,5,0,10,2,0,"[{'name': 'Type: Improvement'}, {'name': 'Topic: WorldGen'}]",2021-07-27 22:21:09+00:00,2021-08-10 19:37:22+00:00,1199773.0,"13 days, 21:16:13","[{'comment_id': 677947076, 'comment_body': 'why not just use an enum?', 'comment_created': datetime.datetime(2021, 7, 28, 3, 33, 1, tzinfo=datetime.timezone.utc), 'commenter': 'pollend', 'type': 'User'}, {'comment_id': 678543517, 'comment_body': ""I'm just doing the same thing as [`EventPriority`](https://github.com/MovingBlocks/Terasology/blob/develop/engine/src/main/java/org/terasology/engine/entitySystem/event/EventPriority.java), I'm not sure why that's done that way."", 'comment_created': datetime.datetime(2021, 7, 28, 18, 14, 2, tzinfo=datetime.timezone.utc), 'commenter': 'naalit', 'type': 'User'}, {'comment_id': 679492682, 'comment_body': ""I'm pretty sure we're not using an enum for event priority because the main goal here is to resolve non-determinism due to same priority. In many cases these default threshold already help to sort out whether something should run with low or high priority, but we may need the fine-grained support to run a `NORMAL + 10` (slightly earlier than the rest of normal prio, but after high prio). \r\n\r\nGiven that, I'm wondering whether the defaults for PRODUCES and REQUIRES are good as they are here, or whether they should be way higher/lower (maybe even Integer.MIN` and `Integer.MAX`)."", 'comment_created': datetime.datetime(2021, 7, 29, 21, 18, 23, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 679503347, 'comment_body': 'Should this add the numeric value in parentheses behind the human readable name? This might help to bring this in proportion to custom priorities if they ever appear close to each other in a log.', 'comment_created': datetime.datetime(2021, 7, 29, 21, 38, 46, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 679519558, 'comment_body': ""Is that one big `if` around the rest, with no `else`? If so, I'd move this out of the `forEach` and use a `.filter(r -> r.value() == providedFacet)` for that."", 'comment_created': datetime.datetime(2021, 7, 29, 22, 13, 39, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 679557881, 'comment_body': ""> Given that, I'm wondering whether the defaults for PRODUCES and REQUIRES are good as they are here, or whether they should be way higher/lower (maybe even Integer.MINandInteger.MAX`).\r\n\r\nI think that makes sense for `PRODUCES`, since it's impossible for anything to update the facet before it's produced. But some things actually want to run after `REQUIRES`, specifically the `SpawnPlateauProvider` from `CoreWorlds`, although those conflicts can often also be fixed by changing the `Requires` to `Updates` on other providers  (`SimplexRoughnessProvider` in this case would pretend to update `ElevationFacet`)."", 'comment_created': datetime.datetime(2021, 7, 29, 23, 59, 2, tzinfo=datetime.timezone.utc), 'commenter': 'naalit', 'type': 'User'}, {'comment_id': 680199796, 'comment_body': 'That totally makes sense to me. Is it possible to annotate the priority in `@Requires` as well?', 'comment_created': datetime.datetime(2021, 7, 30, 20, 24, 17, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 680209566, 'comment_body': ""No, the idea is that if you need fine-grained control over when something reads the facet, you should just use `@Updates`. Of course, that is somewhat inconsistent with being able to `@Update` after `@Require`-ing like I did with the `SpawnPlateauProvider`, but I'm not sure what the best solution would be - it feels like any way of doing this is bad for modularity."", 'comment_created': datetime.datetime(2021, 7, 30, 20, 45, 33, tzinfo=datetime.timezone.utc), 'commenter': 'naalit', 'type': 'User'}, {'comment_id': 680549332, 'comment_body': 'you can use them like ranges\r\n\r\nif priority < a\r\nelse if priority < b\r\nelse if priority < c\r\nelse if priority < d\r\nelse if priority < e\r\n\r\nPRIORITY_<type>(value)\r\n', 'comment_created': datetime.datetime(2021, 8, 1, 18, 38, 41, tzinfo=datetime.timezone.utc), 'commenter': 'pollend', 'type': 'User'}, {'comment_id': 685372746, 'comment_body': 'Could you please provide some Javadoc what this method is doing (could also be a general follow-up PR to add docstrings if you prefer). I few things I noticed from just looking at the PR\r\n\r\n- `orderedProviders` is a ""destination"" parameter and is populated in this method\r\n- `providedBy` is updated\r\n- there is a ""hidden"" recursion via `addRequirements`', 'comment_created': datetime.datetime(2021, 8, 9, 17, 8, 37, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}]","[{'commit_sha': '56c07d786fa96b6dcf605e8a7503b079e644a01c', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '993e9aa5e85fc9cf43a378492c720886cf7b86dd', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '607c55bbfc58829d42156265571ed74c469fc3c9', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2e82ae3096a809bf8282b42589c10bd2c6781af7', 'committer_username': 'pollend', 'committer_name': 'Michael Pollind', 'committer_email': None, 'commit_date': datetime.datetime(2011, 6, 16, 15, 26, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '032fe78d05756d8c421f45d96676aaa46b08279d', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}]",Sylvie Dirkswager,13039463,,User,,44,,0,11
712569487,feat: add explicit facet provider priority,"Now that facet provider ordering can be made explicit, this PR enforces the ordering `BaseBiomeProvider -> RiverProvider -> SimplexHillsAndMountainsProvider -> RiverToElevationProvider`. This also fixes a bug where scrublands would always generate around rivers because the river increases the humidity; now that rivers aren't generated until after the base biomes, this doesn't happen.",True,163,https://api.github.com/repos/Terasology/MetalRenegades/pulls/163,https://github.com/Terasology/MetalRenegades/pull/163,closed,9,5,4,2,0,0,2,0,"[{'name': 'Type: Improvement'}, {'name': 'Topic: WorldGen'}]",2021-08-13 19:04:48+00:00,2021-08-15 10:03:49+00:00,140341.0,"1 day, 14:59:01",[],"[{'commit_sha': 'bcb30fabb3d1099d148a4d52e0df4a4ca0a6fa83', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de486943ba98dde3637493f70ddd2cc0a888616d', 'committer_username': 'skaldarnar', 'committer_name': 'Tobias Nett', 'committer_email': None, 'commit_date': datetime.datetime(2012, 2, 18, 10, 28, 41, tzinfo=datetime.timezone.utc)}]",Sylvie Dirkswager,13039463,,User,,44,,0,11
706107555,fix: circular dependency with new facet update priority,"This fixes the circular dependency which is recognized by https://github.com/MovingBlocks/Terasology/pull/4833, which is the only change needed to make it work again. However, eventually it'd probably be a good idea to add explicit priorities to other CoreWorlds facet providers to make it more deterministic.",True,42,https://api.github.com/repos/Terasology/CoreWorlds/pulls/42,https://github.com/Terasology/CoreWorlds/pull/42,closed,3,2,1,1,0,1,2,0,"[{'name': 'Type: Bug'}, {'name': 'Type: Chore'}]",2021-08-08 21:14:03+00:00,2021-08-10 20:06:00+00:00,168717.0,"1 day, 22:51:57","[{'comment_id': 685366850, 'comment_body': 'hm, scheduling the update after other facet providers require it sounds odd - I hope that can be fixed when giving the other providers better priorities.', 'comment_created': datetime.datetime(2021, 8, 9, 16, 59, 47, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}]","[{'commit_sha': '771d2a9d8b4b2aa70e64335f816fb50c51bde45e', 'committer_username': 'naalit', 'committer_name': 'Sylvie Dirkswager', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 24, 20, 43, 2, tzinfo=datetime.timezone.utc)}]",Sylvie Dirkswager,13039463,,User,,44,,0,11

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
25500347,TutorialWorldGeneration,Terasology/TutorialWorldGeneration,Java,21,10,23,18,63,2,1,0,"[{'id': 594163457, 'number': 19, 'closed': datetime.datetime(2021, 6, 8, 18, 53, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 16, 18, 59, 44, tzinfo=datetime.timezone.utc), 'time_taken': 7257219.0, 'time_delta': '83 days, 23:53:39', 'additions': 381, 'deletions': 373, 'state': 'closed'}]"
187640743,MetalRenegades,Terasology/MetalRenegades,Java,16,6,22,18,392,22,4,2,[]
262592617,BiomesAPI,Terasology/BiomesAPI,Java,4,0,23,11,54,2,3,1,[]
260667085,CoreWorlds,Terasology/CoreWorlds,Java,8,3,23,11,80,3,4,2,"[{'id': 458793446, 'number': 10, 'closed': datetime.datetime(2020, 7, 30, 17, 35, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 30, 1, 5, 16, tzinfo=datetime.timezone.utc), 'time_taken': 59391.0, 'time_delta': '16:29:51', 'additions': 11, 'deletions': 10, 'state': 'closed'}, {'id': 440818921, 'number': 7, 'closed': datetime.datetime(2020, 7, 9, 14, 21, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 26, 23, 1, 13, tzinfo=datetime.timezone.utc), 'time_taken': 1092017.0, 'time_delta': '12 days, 15:20:17', 'additions': 77, 'deletions': 0, 'state': 'closed'}]"
59501378,DynamicCities,Terasology/DynamicCities,Java,13,17,24,21,253,15,7,1,[]
1438007,Terasology,MovingBlocks/Terasology,Java,1334,3661,188,339,12023,469,57,35,"[{'id': 594166602, 'number': 4583, 'closed': datetime.datetime(2021, 3, 21, 2, 0, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 16, 19, 4, 27, tzinfo=datetime.timezone.utc), 'time_taken': 370591.0, 'time_delta': '4 days, 6:56:31', 'additions': 17, 'deletions': 2, 'state': 'closed'}, {'id': 437546890, 'number': 4059, 'closed': datetime.datetime(2020, 6, 27, 2, 5, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 21, 13, 40, 12, tzinfo=datetime.timezone.utc), 'time_taken': 476714.0, 'time_delta': '5 days, 12:25:14', 'additions': 67, 'deletions': 36, 'state': 'closed'}, {'id': 387284877, 'number': 3853, 'closed': datetime.datetime(2020, 3, 18, 2, 26, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 12, 14, 43, 24, tzinfo=datetime.timezone.utc), 'time_taken': 474206.0, 'time_delta': '5 days, 11:43:26', 'additions': 10, 'deletions': 0, 'state': 'closed'}, {'id': 375853000, 'number': 3833, 'closed': datetime.datetime(2020, 3, 3, 5, 34, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 16, 17, 51, 51, tzinfo=datetime.timezone.utc), 'time_taken': 1338165.0, 'time_delta': '15 days, 11:42:45', 'additions': 1, 'deletions': 0, 'state': 'closed'}]"
196867852,CoreRendering,Terasology/CoreRendering,Java,10,2,18,13,118,7,4,4,[]
128555236,FlowingLiquids,Terasology/FlowingLiquids,Java,4,0,23,11,72,6,5,2,[]
15893271,GrowingFlora,Terasology/GrowingFlora,Java,9,1,19,17,159,3,7,0,[]
226375498,GenericRocks,Terasology/GenericRocks,,2,0,24,6,10,0,3,0,"[{'id': 451695794, 'number': 1, 'closed': datetime.datetime(2020, 7, 18, 15, 30, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 18, 4, 35, 22, tzinfo=datetime.timezone.utc), 'time_taken': 39320.0, 'time_delta': '10:55:20', 'additions': 2, 'deletions': 2, 'state': 'closed'}]"
15458107,Minimap,Terasology/Minimap,Java,7,5,18,15,87,1,6,0,[]
13895206,LightAndShadow,Terasology/LightAndShadow,Java,22,8,19,28,429,31,15,6,[]
