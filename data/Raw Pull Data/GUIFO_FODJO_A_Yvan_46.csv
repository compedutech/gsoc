pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
691980424,Addition of class and operations on tensors,,True,210,https://api.github.com/repos/PolyMathOrg/PolyMath/pulls/210,https://github.com/PolyMathOrg/PolyMath/pull/210,closed,368,0,3,22,4,36,0,0,[],2021-07-17 19:51:51+00:00,2021-07-30 10:43:27+00:00,1090296.0,"12 days, 14:51:36","[{'comment_id': 673825823, 'comment_body': 'I would appreciate this being a little more intention revealing: is this the dimension of the tensor? The rank? ', 'comment_created': datetime.datetime(2021, 7, 21, 9, 46, 25, tzinfo=datetime.timezone.utc), 'commenter': 'hemalvarambhia', 'type': 'User'}, {'comment_id': 673902208, 'comment_body': 'From the test, this could be elementAt', 'comment_created': datetime.datetime(2021, 7, 21, 11, 49, 7, tzinfo=datetime.timezone.utc), 'commenter': 'hemalvarambhia', 'type': 'User'}, {'comment_id': 674153524, 'comment_body': 'You could use `inject` here', 'comment_created': datetime.datetime(2021, 7, 21, 16, 36, 29, tzinfo=datetime.timezone.utc), 'commenter': 'hemalvarambhia', 'type': 'User'}, {'comment_id': 675202530, 'comment_body': 'It would help me understand this message better if the argument name was clearer ', 'comment_created': datetime.datetime(2021, 7, 22, 22, 27, 49, tzinfo=datetime.timezone.utc), 'commenter': 'hemalvarambhia', 'type': 'User'}, {'comment_id': 675951610, 'comment_body': 'This is due to the fact that we choose to browse the tensors according to the rows', 'comment_created': datetime.datetime(2021, 7, 24, 5, 28, 8, tzinfo=datetime.timezone.utc), 'commenter': 'YvanGuifo', 'type': 'User'}, {'comment_id': 675965068, 'comment_body': 'So what does `anArray` mean? Are you really referring to a row? If that is true, a rename would support my understanding ', 'comment_created': datetime.datetime(2021, 7, 24, 7, 51, 6, tzinfo=datetime.timezone.utc), 'commenter': 'hemalvarambhia', 'type': 'User'}, {'comment_id': 676266742, 'comment_body': 'This is a method to construct rank 0 (scalar) vector.', 'comment_created': datetime.datetime(2021, 7, 26, 3, 25, 18, tzinfo=datetime.timezone.utc), 'commenter': 'SergeStinckwich', 'type': 'User'}, {'comment_id': 676266936, 'comment_body': 'Agree. @YvanGuifo can you do it?', 'comment_created': datetime.datetime(2021, 7, 26, 3, 26, 9, tzinfo=datetime.timezone.utc), 'commenter': 'SergeStinckwich', 'type': 'User'}, {'comment_id': 676267644, 'comment_body': 'no, ``getPosition:`` convert a n dimensional coordinate to 1D index. But agree that ``getPosition:`` is maybe not a good name.', 'comment_created': datetime.datetime(2021, 7, 26, 3, 28, 35, tzinfo=datetime.timezone.utc), 'commenter': 'SergeStinckwich', 'type': 'User'}, {'comment_id': 676267997, 'comment_body': '``anArray`` is used to initialize the rows of a tensor.', 'comment_created': datetime.datetime(2021, 7, 26, 3, 30, 3, tzinfo=datetime.timezone.utc), 'commenter': 'SergeStinckwich', 'type': 'User'}, {'comment_id': 676482284, 'comment_body': 'I agree this name is misleading. Also,for ranks > 2, there are no rows or columns any  more.\n\nSuggestion: fromNestedArray:\n', 'comment_created': datetime.datetime(2021, 7, 26, 10, 29, 6, tzinfo=datetime.timezone.utc), 'commenter': 'khinsen', 'type': 'User'}, {'comment_id': 676485367, 'comment_body': 'The tests are misleading. The return value is the index into the  flattened  version.\n\nsuggestion: flattenedIndexOf:', 'comment_created': datetime.datetime(2021, 7, 26, 10, 33, 47, tzinfo=datetime.timezone.utc), 'commenter': 'khinsen', 'type': 'User'}, {'comment_id': 676571214, 'comment_body': 'no, this idea is to replace ``getPosition:`` by  ``flattenedIndexOf:``. ', 'comment_created': datetime.datetime(2021, 7, 26, 12, 47, 41, tzinfo=datetime.timezone.utc), 'commenter': 'SergeStinckwich', 'type': 'User'}, {'comment_id': 676660828, 'comment_body': 'It is done', 'comment_created': datetime.datetime(2021, 7, 26, 14, 31, 59, tzinfo=datetime.timezone.utc), 'commenter': 'YvanGuifo', 'type': 'User'}, {'comment_id': 676886703, 'comment_body': 'How about `fromScalar:` for this method, in analogy to the newly named `fromNestedArray:`?', 'comment_created': datetime.datetime(2021, 7, 26, 19, 32, 59, tzinfo=datetime.timezone.utc), 'commenter': 'khinsen', 'type': 'User'}, {'comment_id': 676888584, 'comment_body': 'This method looks like an accessor, but I don\'t think it should be one. The use of an array to store the elements is an implementation detail. What users might want is a conversion to a (flat) array, which I\'d then call `asArray`. I\'d then rename the instance variable `array` to `elements` and have an accessor of that name for internal use (marked ""private"").', 'comment_created': datetime.datetime(2021, 7, 26, 19, 36, 23, tzinfo=datetime.timezone.utc), 'commenter': 'khinsen', 'type': 'User'}, {'comment_id': 676889680, 'comment_body': ""I'd expect a method called `first` to be similar to `Collection >> first`, i.e. be equivalent to `at: 1`. Maybe the instance variable `first` should be renamed as well to get a better name for its accessor."", 'comment_created': datetime.datetime(2021, 7, 26, 19, 38, 15, tzinfo=datetime.timezone.utc), 'commenter': 'khinsen', 'type': 'User'}, {'comment_id': 676889987, 'comment_body': 'Is there a good reason for not calling this `at:`?', 'comment_created': datetime.datetime(2021, 7, 26, 19, 38, 47, tzinfo=datetime.timezone.utc), 'commenter': 'khinsen', 'type': 'User'}, {'comment_id': 676890193, 'comment_body': 'Is there a good reason for not calling this `at:put:`?', 'comment_created': datetime.datetime(2021, 7, 26, 19, 39, 14, tzinfo=datetime.timezone.utc), 'commenter': 'khinsen', 'type': 'User'}, {'comment_id': 676891477, 'comment_body': 'The example values used in this test case are not well chosen, because they are `1 to: n` reshaped. This means that `flattenedIndexOf:` and `get:` return the same values, making is harder to understand what is going on.', 'comment_created': datetime.datetime(2021, 7, 26, 19, 41, 29, tzinfo=datetime.timezone.utc), 'commenter': 'khinsen', 'type': 'User'}, {'comment_id': 677028493, 'comment_body': ""first came from Numpy's naming but I agree this is colliding with Collection>>first Idea for a better name?"", 'comment_created': datetime.datetime(2021, 7, 27, 0, 21, 13, tzinfo=datetime.timezone.utc), 'commenter': 'SergeStinckwich', 'type': 'User'}, {'comment_id': 677028681, 'comment_body': 'I agree', 'comment_created': datetime.datetime(2021, 7, 27, 0, 21, 45, tzinfo=datetime.timezone.utc), 'commenter': 'SergeStinckwich', 'type': 'User'}, {'comment_id': 677028721, 'comment_body': 'Agree also', 'comment_created': datetime.datetime(2021, 7, 27, 0, 21, 53, tzinfo=datetime.timezone.utc), 'commenter': 'SergeStinckwich', 'type': 'User'}, {'comment_id': 677208177, 'comment_body': 'Normally you can contract tensors (check the literature) such that rank 2 tensors become rank 0 eg trace. Is this the intent here?', 'comment_created': datetime.datetime(2021, 7, 27, 7, 53, 54, tzinfo=datetime.timezone.utc), 'commenter': 'hemalvarambhia', 'type': 'User'}, {'comment_id': 677306892, 'comment_body': 'no this this is reshape like in Numpy: https://numpy.org/doc/stable/reference/generated/numpy.reshape.html\r\nChanging the dimension of the n-dimensional arrays without changing the contents.', 'comment_created': datetime.datetime(2021, 7, 27, 10, 6, 14, tzinfo=datetime.timezone.utc), 'commenter': 'SergeStinckwich', 'type': 'User'}, {'comment_id': 677601217, 'comment_body': ""Ah, so we're copying numpy completely. Non blocking, but not sure if that's wise choice. Is the code quality is good? If it is, fine, go ahead. If not, then do we want those practices brought over?"", 'comment_created': datetime.datetime(2021, 7, 27, 16, 12, 9, tzinfo=datetime.timezone.utc), 'commenter': 'hemalvarambhia', 'type': 'User'}, {'comment_id': 677605537, 'comment_body': 'We are not copying completely. This is more an inspiration especially for the internal implementation as one 1D array', 'comment_created': datetime.datetime(2021, 7, 27, 16, 17, 49, tzinfo=datetime.timezone.utc), 'commenter': 'SergeStinckwich', 'type': 'User'}, {'comment_id': 677762287, 'comment_body': ""At this point I would advise we choose wisely. Let's revisit the decision to largely follow numpy again in the future."", 'comment_created': datetime.datetime(2021, 7, 27, 20, 6, 11, tzinfo=datetime.timezone.utc), 'commenter': 'hemalvarambhia', 'type': 'User'}, {'comment_id': 678266526, 'comment_body': 'Bias warning: I was part of the team that designed the basic NumPy Python API (back when it was called `Numeric`).\r\n\r\nThe basics of NumPy were heavily inspired by APL, and even 25 years later I still believe that was a good choice, and so I think we should follow the same path here. Over the years, the NumPy API got bloated, so I definitely don\'t recommend to follow NumPy everywhere.\r\n\r\nYour reference to contraction points to the real problem: it\'s not a good idea to use the term ""tensor"" for what is really an N-dimensional array without any implied semantics.', 'comment_created': datetime.datetime(2021, 7, 28, 12, 46, 37, tzinfo=datetime.timezone.utc), 'commenter': 'khinsen', 'type': 'User'}, {'comment_id': 678338896, 'comment_body': ""I am inclined to agree. Tensors are have a defined algebra and if this isn't a Tensor, then let's correct that. I agree that we should not use Numpy terminology everywhere (where the naming is clear and domain-driven, we should).\r\n\r\nGenerally, where we can let's choose the names from Mathematics."", 'comment_created': datetime.datetime(2021, 7, 28, 14, 10, 6, tzinfo=datetime.timezone.utc), 'commenter': 'hemalvarambhia', 'type': 'User'}, {'comment_id': 678343913, 'comment_body': '@khinsen What is APL?', 'comment_created': datetime.datetime(2021, 7, 28, 14, 15, 32, tzinfo=datetime.timezone.utc), 'commenter': 'hemalvarambhia', 'type': 'User'}, {'comment_id': 678588378, 'comment_body': 'The very first interactive language based on N-dimensional arrays. Developed by Ken Iverson at IBM, first published in the 1960s. Details: https://en.wikipedia.org/wiki/APL_(programming_language)', 'comment_created': datetime.datetime(2021, 7, 28, 19, 21, 30, tzinfo=datetime.timezone.utc), 'commenter': 'khinsen', 'type': 'User'}, {'comment_id': 678639347, 'comment_body': ' Thanks. @hemalvarambhia what would be the appropriate name for this class ?', 'comment_created': datetime.datetime(2021, 7, 28, 20, 45, 28, tzinfo=datetime.timezone.utc), 'commenter': 'YvanGuifo', 'type': 'User'}, {'comment_id': 678641704, 'comment_body': 'How about MultidimensionalArray or MultiDimensionalArray ? I get the feeling this may be what @khinsen meant', 'comment_created': datetime.datetime(2021, 7, 28, 20, 49, 8, tzinfo=datetime.timezone.utc), 'commenter': 'hemalvarambhia', 'type': 'User'}, {'comment_id': 678645258, 'comment_body': 'Thank you. I think I need to discuss it with @khinsen and @SergeStinckwich to make the choice.', 'comment_created': datetime.datetime(2021, 7, 28, 20, 54, 50, tzinfo=datetime.timezone.utc), 'commenter': 'YvanGuifo', 'type': 'User'}, {'comment_id': 679629046, 'comment_body': '``PMArray`` is not informative enough I guess, ``PMNDArray`` (n-dimensional array) is better.', 'comment_created': datetime.datetime(2021, 7, 30, 3, 53, 14, tzinfo=datetime.timezone.utc), 'commenter': 'SergeStinckwich', 'type': 'User'}]","[{'commit_sha': '805149ddbb1a81e6a88841e479603bf25f17bf0f', 'committer_username': 'YvanGuifo', 'committer_name': 'Yvan Guifo', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 2, 12, 17, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d6033e068d4b7f2a434eaea09581a40c1733c03', 'committer_username': 'YvanGuifo', 'committer_name': 'Yvan Guifo', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 2, 12, 17, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc9056da20a246232c24dc52adc8aa2483ade4a6', 'committer_username': 'YvanGuifo', 'committer_name': 'Yvan Guifo', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 2, 12, 17, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3df00c5976e36edc73d0916aba3d1bad76f9ecb4', 'committer_username': 'YvanGuifo', 'committer_name': 'Yvan Guifo', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 2, 12, 17, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b1b923d697af60d6f49c039ddd3df5a227d5a9be', 'committer_username': 'YvanGuifo', 'committer_name': 'Yvan Guifo', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 2, 12, 17, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3d803a31387c9749ea797515926a975e8f04a03', 'committer_username': 'YvanGuifo', 'committer_name': 'Yvan Guifo', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 2, 12, 17, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0d567dcd7bade434767155415d102801a30393f', 'committer_username': 'YvanGuifo', 'committer_name': 'Yvan Guifo', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 2, 12, 17, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb2ba9aba40a6b8945885f095d0aa769824b057d', 'committer_username': 'YvanGuifo', 'committer_name': 'Yvan Guifo', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 2, 12, 17, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4de26bd6a6f6f7ec80c39f8c91336cc7f912da3d', 'committer_username': 'YvanGuifo', 'committer_name': 'Yvan Guifo', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 2, 12, 17, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4f52debf9aca45cb2f1d24e9930552e297b4ac5', 'committer_username': 'YvanGuifo', 'committer_name': 'Yvan Guifo', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 2, 12, 17, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c9d247ec140d5037a4beef57e641a514672c845', 'committer_username': 'YvanGuifo', 'committer_name': 'Yvan Guifo', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 2, 12, 17, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88aab4109f500f2b88686b82f033af494755993b', 'committer_username': 'YvanGuifo', 'committer_name': 'Yvan Guifo', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 2, 12, 17, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ae081b0aee31aef25d1a4292cbf3741a0cb031d', 'committer_username': 'YvanGuifo', 'committer_name': 'Yvan Guifo', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 2, 12, 17, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8062a30d166f82ea2ff4ff29e892ee6402aa8628', 'committer_username': 'YvanGuifo', 'committer_name': 'Yvan Guifo', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 2, 12, 17, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e8455f10f252ffaa7e8b89daf241d446fdb0cad4', 'committer_username': 'YvanGuifo', 'committer_name': 'Yvan Guifo', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 2, 12, 17, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b28871f93512115a0312d9aa50f71d9d3b881ec3', 'committer_username': 'YvanGuifo', 'committer_name': 'Yvan Guifo', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 2, 12, 17, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '605be14ef1018b52637570bd833e1af3c9f7cb1d', 'committer_username': 'YvanGuifo', 'committer_name': 'Yvan Guifo', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 2, 12, 17, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ebc072125a99583bbce6dccebda1a196cfd4fbf4', 'committer_username': 'YvanGuifo', 'committer_name': 'Yvan Guifo', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 2, 12, 17, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a713dc845f57b450f50aaac6303875b50b66b66', 'committer_username': 'YvanGuifo', 'committer_name': 'Yvan Guifo', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 2, 12, 17, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'edf3d8b97b3cd5f2c9edbb2bd7df1e07bc0573b3', 'committer_username': 'YvanGuifo', 'committer_name': 'Yvan Guifo', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 2, 12, 17, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1c3525fd0b5c938d15a5c36518ab102fe72be74', 'committer_username': 'YvanGuifo', 'committer_name': 'Yvan Guifo', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 2, 12, 17, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a77c47e79675a90fb38f3fa4184cb6a8dfa3b6b', 'committer_username': 'YvanGuifo', 'committer_name': 'Yvan Guifo', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 2, 12, 17, 58, tzinfo=datetime.timezone.utc)}]",Yvan Guifo,56076081,,User,,20,,0,6
701246509,Addition of matrix product,"It contains :
- A method allowing to check that the matrices which one wishes to multiply have the same shape.
- A method to calculate the Hadamard product
- And test methods for this Hadamard product",True,213,https://api.github.com/repos/PolyMathOrg/PolyMath/pulls/213,https://github.com/PolyMathOrg/PolyMath/pull/213,closed,78,4,3,7,4,15,0,0,[],2021-08-02 08:19:31+00:00,2021-08-12 08:11:49+00:00,863538.0,"9 days, 23:52:18","[{'comment_id': 680781570, 'comment_body': 'Maybe use ``aPMNDArray`` instead of ``anArray``, because this is not an instance of ``Array`` class.', 'comment_created': datetime.datetime(2021, 8, 2, 8, 37, 30, tzinfo=datetime.timezone.utc), 'commenter': 'SergeStinckwich', 'type': 'User'}, {'comment_id': 680886996, 'comment_body': 'Ok. Thanks', 'comment_created': datetime.datetime(2021, 8, 2, 11, 19, 14, tzinfo=datetime.timezone.utc), 'commenter': 'YvanGuifo', 'type': 'User'}, {'comment_id': 683795200, 'comment_body': 'This is the normal flow, is that correct? If so, consider moving this out of the block and have run after the check. `ifFalse` becomes a guard clause. The code, in my opinion, then becomes a little more maintainable. ', 'comment_created': datetime.datetime(2021, 8, 5, 21, 20, 20, tzinfo=datetime.timezone.utc), 'commenter': 'hemalvarambhia', 'type': 'User'}, {'comment_id': 683795404, 'comment_body': 'Really nice name!', 'comment_created': datetime.datetime(2021, 8, 5, 21, 20, 45, tzinfo=datetime.timezone.utc), 'commenter': 'hemalvarambhia', 'type': 'User'}, {'comment_id': 683795904, 'comment_body': 'My suggestion is to emphasise in the test method name, the fact that it fails.', 'comment_created': datetime.datetime(2021, 8, 5, 21, 21, 43, tzinfo=datetime.timezone.utc), 'commenter': 'hemalvarambhia', 'type': 'User'}, {'comment_id': 684595963, 'comment_body': 'Agree, something like:\r\n```Smalltalk\r\n(self hasSameShapeAs: aPMNDArray)\r\n   ifFalse: [ShapeMismatch signal].\r\n^ self class new array: ((self asArray) with: (aPMNDArray asArray) collect: [:a :b| a*b])\r\n\t\twithShape: self shape\r\n```', 'comment_created': datetime.datetime(2021, 8, 7, 7, 2, 29, tzinfo=datetime.timezone.utc), 'commenter': 'SergeStinckwich', 'type': 'User'}, {'comment_id': 684620896, 'comment_body': 'Ok. Thanks', 'comment_created': datetime.datetime(2021, 8, 7, 11, 21, 15, tzinfo=datetime.timezone.utc), 'commenter': 'YvanGuifo', 'type': 'User'}, {'comment_id': 684627943, 'comment_body': 'Spacing would help me in `a*b`', 'comment_created': datetime.datetime(2021, 8, 7, 12, 35, 12, tzinfo=datetime.timezone.utc), 'commenter': 'hemalvarambhia', 'type': 'User'}, {'comment_id': 684628062, 'comment_body': 'Suggestion: In the tests, see if you can give these better names', 'comment_created': datetime.datetime(2021, 8, 7, 12, 36, 20, tzinfo=datetime.timezone.utc), 'commenter': 'hemalvarambhia', 'type': 'User'}, {'comment_id': 684628170, 'comment_body': 'Suggestion: extract the expected outcome to an intention revealing variable e.g. `expectedHadamardProduct`', 'comment_created': datetime.datetime(2021, 8, 7, 12, 37, 35, tzinfo=datetime.timezone.utc), 'commenter': 'hemalvarambhia', 'type': 'User'}, {'comment_id': 685192228, 'comment_body': 'Hi @hemalvarambhia  you suggest I change `testHadamardProduct` to `expectedHadamardProduct`', 'comment_created': datetime.datetime(2021, 8, 9, 13, 28, 9, tzinfo=datetime.timezone.utc), 'commenter': 'YvanGuifo', 'type': 'User'}, {'comment_id': 685414813, 'comment_body': 'No, and I apologise for lack of clarity on my part. The `PMNDArray fromNestedArray...` part of the assertion should be extracted to a local variable called `expectedHadamardProduct`', 'comment_created': datetime.datetime(2021, 8, 9, 18, 11, 21, tzinfo=datetime.timezone.utc), 'commenter': 'hemalvarambhia', 'type': 'User'}, {'comment_id': 685509926, 'comment_body': ""Thank you @hemalvarambhia  but I do not really understand the interest of defining a local variable in this test. Unless I don't quite understand the suggested idea"", 'comment_created': datetime.datetime(2021, 8, 9, 20, 47, 42, tzinfo=datetime.timezone.utc), 'commenter': 'YvanGuifo', 'type': 'User'}, {'comment_id': 685513057, 'comment_body': ""My reasoning around this is for documentation. I think extracting a local variable will be better for the test and make its role in the test explicit.\n\nDo you feel otherwise? If so, what is it I am missing that justifies not extracting a variable?\nIf you'd prefer not to extract a variable for now, that's fine. My preference is to do that now but this is not a blocking suggestion. "", 'comment_created': datetime.datetime(2021, 8, 9, 20, 52, 47, tzinfo=datetime.timezone.utc), 'commenter': 'hemalvarambhia', 'type': 'User'}, {'comment_id': 686796100, 'comment_body': 'OK. No, I understand the concerns of readability and documentation mentioned', 'comment_created': datetime.datetime(2021, 8, 11, 12, 47, 5, tzinfo=datetime.timezone.utc), 'commenter': 'YvanGuifo', 'type': 'User'}]","[{'commit_sha': '7ecac4f0ae711b68f8b042d6845e8d5543409234', 'committer_username': 'YvanGuifo', 'committer_name': 'Yvan Guifo', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 2, 12, 17, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f8f80a964b7225208659a15fb405bf5ee7d6e6c', 'committer_username': 'YvanGuifo', 'committer_name': 'Yvan Guifo', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 2, 12, 17, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '82b3c473ca8a5d00b3e3e0d63b480bce16e50852', 'committer_username': 'YvanGuifo', 'committer_name': 'Yvan Guifo', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 2, 12, 17, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca301185afaf329cbb574a0eeaa2db02cc45c9fd', 'committer_username': 'YvanGuifo', 'committer_name': 'Yvan Guifo', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 2, 12, 17, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4f7ad633c6e17889184d074ad70492169dd4e79', 'committer_username': 'YvanGuifo', 'committer_name': 'Yvan Guifo', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 2, 12, 17, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a29df053d67bc2c51b48b297f04c7c3ad1abbafe', 'committer_username': 'YvanGuifo', 'committer_name': 'Yvan Guifo', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 2, 12, 17, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1cc5e008b6c52b0313d2db2ece523ba94b20bbe', 'committer_username': 'YvanGuifo', 'committer_name': 'Yvan Guifo', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 2, 12, 17, 58, tzinfo=datetime.timezone.utc)}]",Yvan Guifo,56076081,,User,,20,,0,6

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
54906925,PolyMath,PolyMathOrg/PolyMath,Smalltalk,41,168,21,30,1631,56,9,0,"[{'id': 701246509, 'number': 213, 'closed': datetime.datetime(2021, 8, 12, 8, 11, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 2, 8, 19, 31, tzinfo=datetime.timezone.utc), 'time_taken': 863538.0, 'time_delta': '9 days, 23:52:18', 'additions': 78, 'deletions': 4, 'state': 'closed'}, {'id': 691980424, 'number': 210, 'closed': datetime.datetime(2021, 7, 30, 10, 43, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 17, 19, 51, 51, tzinfo=datetime.timezone.utc), 'time_taken': 1090296.0, 'time_delta': '12 days, 14:51:36', 'additions': 368, 'deletions': 0, 'state': 'closed'}]"
