pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
663402374,Fixes #3289: New Proto classes for Platform Parameters,"<!--
  - Thanks for submitting code to Oppia! Please fill out the following as part of
  - your pull request so we can review your code more easily.
  -->

## Explanation
<!--
  - Explain what your PR does. If this PR fixes an existing bug, please include
  - ""Fixes #bugnum:"" in the explanation so that GitHub can auto-close the issue
  - when this PR is merged.
  -->
Fixes #3289 
This PR introduces new Proto Classes which will be used to implement Platform Parameter Project in Oppia. This PR is reffered as PR-1.1 in the Milestones. ( /cc @Sarthak2601 )

## Checklist
<!-- Please tick the relevant boxes by putting an ""x"" in them. -->
- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The PR explanation includes the words ""Fixes #bugnum: ..."" (or ""Fixes part of #bugnum"" if the PR only partially fixes an issue).
- [x] The PR follows the [style guide](https://github.com/oppia/oppia-android/wiki/Coding-style-guide).
- [x] The PR does not contain any unnecessary auto-generated code from Android Studio.
- [x] The PR is made from a branch that's **not** called ""develop"".
- [x] The PR is made from a branch that is up-to-date with ""develop"".
- [x] The PR's branch is based on ""develop"" and not on any other branch.
- [x] The PR is **assigned** to an appropriate reviewer in both the **Assignees** and the **Reviewers** sections.
",True,3269,https://api.github.com/repos/oppia/oppia-android/pulls/3269,https://github.com/oppia/oppia-android/pull/3269,closed,38,0,2,14,12,60,0,0,[],2021-06-07 09:51:19+00:00,2021-06-28 16:43:25+00:00,1839126.0,"21 days, 6:52:06","[{'comment_id': 646760464, 'comment_body': ""Parameter is a very generic term -- I'd suggest using something more specific to this feature, like `PlatformParameter` for parity with the backend as well as explicitly identifying what type of parameter it is. I'm not sure `PlatformParameter` is specific enough either, though, @vinitamurthi WDYT?\r\n(Note that if this changes we would also want to apply the new name to the below protos as well)"", 'comment_created': datetime.datetime(2021, 6, 7, 16, 34, 57, tzinfo=datetime.timezone.utc), 'commenter': 'jcqli', 'type': 'User'}, {'comment_id': 646761777, 'comment_body': 'nit: remove the empty lines between the fields and above `value`', 'comment_created': datetime.datetime(2021, 6, 7, 16, 35, 50, tzinfo=datetime.timezone.utc), 'commenter': 'jcqli', 'type': 'User'}, {'comment_id': 646762191, 'comment_body': 'nit: `oneof value {`', 'comment_created': datetime.datetime(2021, 6, 7, 16, 36, 7, tzinfo=datetime.timezone.utc), 'commenter': 'jcqli', 'type': 'User'}, {'comment_id': 646763562, 'comment_body': 'nit: can remove one of the empty lines', 'comment_created': datetime.datetime(2021, 6, 7, 16, 37, 3, tzinfo=datetime.timezone.utc), 'commenter': 'jcqli', 'type': 'User'}, {'comment_id': 646769582, 'comment_body': 'Could this be:\r\n```\r\noneof value {\r\n  boolean\r\n  int\r\n  string\r\n}\r\n```\r\ninstead?\r\n\r\nThis eliminates a layer of nesting and could provide more readability: you would access the value as `ParameterWithName.value` instead of `ParameterWithName.value.value`. Let me know if there is a reason we want a distinct`Parameter` type, I might have missed it in the proposal.', 'comment_created': datetime.datetime(2021, 6, 7, 16, 43, 57, tzinfo=datetime.timezone.utc), 'commenter': 'jcqli', 'type': 'User'}, {'comment_id': 646770890, 'comment_body': 'nit: can remove this empty line', 'comment_created': datetime.datetime(2021, 6, 7, 16, 45, 39, tzinfo=datetime.timezone.utc), 'commenter': 'jcqli', 'type': 'User'}, {'comment_id': 646796724, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 7, 17, 23, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 646797207, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 7, 17, 24, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 646797412, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 7, 17, 24, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 646797567, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 7, 17, 24, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 646798576, 'comment_body': 'This sounds better I guess. @vinitamurthi WDYT?', 'comment_created': datetime.datetime(2021, 6, 7, 17, 26, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 646809192, 'comment_body': 'Also @jcqli the usage for current ParameterWithName will be like  `ParameterWithName.value.string` OR `ParameterWithName.value.boolean` OR `ParameterWithName.value.integer`', 'comment_created': datetime.datetime(2021, 6, 7, 17, 41, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 647967181, 'comment_body': '+1 on this name being generic. I think PlatformParameter should be ok though because that is what we intend to call it in the rest of the feature', 'comment_created': datetime.datetime(2021, 6, 9, 5, 0, 52, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 647968419, 'comment_body': ""I agree with Jacque, even if it is `ParameterWithName.value.string` and not `Parameter.value.value`, @jcqli 's suggestion reduces that nesting, and moreover hides the implementation detail well"", 'comment_created': datetime.datetime(2021, 6, 9, 5, 4, 40, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 647998884, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 9, 6, 20, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 647998964, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 9, 6, 20, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 648475816, 'comment_body': 'Ah I wonder if naming this `PlatformParameter` and naming the above `PlatformParameter` => `PlatformParamaterValue` or `PlatformParameterValueWrapper` might better represent these data objects. Since this object itself is identifying the parameter flag (both its name and its value) and the above proto defines the value type and abstracts it out for the map. This would look something like:\r\n```\r\nmessage PlatformParameterValueWrapper { oneof value {...} }\r\n\r\nmessage PlatformParamterMap { map<string, PlatformParameterValueWrapper> }\r\n\r\nmessage PlatformParamter { string name, oneof value {...} }\r\n```', 'comment_created': datetime.datetime(2021, 6, 9, 16, 24, 32, tzinfo=datetime.timezone.utc), 'commenter': 'jcqli', 'type': 'User'}, {'comment_id': 648481641, 'comment_body': 'nit: space before PlatformParameter', 'comment_created': datetime.datetime(2021, 6, 9, 16, 31, 48, tzinfo=datetime.timezone.utc), 'commenter': 'jcqli', 'type': 'User'}, {'comment_id': 648500937, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 9, 16, 57, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 648603439, 'comment_body': '@jcqli although I am not sure about the names but we will have to revert back to the original structures. Because while retrieving the values from the ParameterDatabase (in a domain level controller) we will get individual PlatfromParameterWithName type objects (which you are calling in the comment above as PlatformParameter). These objects will be needed to be stored in a PlatformParameterMap before using them. But PlatformParameterMap is map of String and PlatformParameter (which you are calling in the comment above as PlatformParameterValueWrapper). Hence we will be needed to first take out the value from PlatformParameterWithName and then make a PlatformParameter object out of it before getting mapped. This could have been avoided if we went back to previous structure of storing an Object of PlatformParameter in the PlatformParameterWithName Object. @vinitamurthi WDYT?', 'comment_created': datetime.datetime(2021, 6, 9, 19, 12, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 648670841, 'comment_body': ""Yup, this was the tradeoff I was thinking about with data type conversions. I think you're right that using the PlatformParameter proto would be better and streamline the conversion, though I think that you'll have to convert to / from these types later on anyways when receiving the JSON and when using the values."", 'comment_created': datetime.datetime(2021, 6, 9, 20, 43, 20, tzinfo=datetime.timezone.utc), 'commenter': 'jcqli', 'type': 'User'}, {'comment_id': 648964639, 'comment_body': 'Yeah agreed.', 'comment_created': datetime.datetime(2021, 6, 10, 8, 26, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 649699847, 'comment_body': 'Formatting seems off--we use 2 spaces for indentation in proto files (see others for reference).', 'comment_created': datetime.datetime(2021, 6, 11, 5, 29, 12, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 649700355, 'comment_body': 'This should describe what the message represents in a fragment statement, and provide context around what the thing is:\r\n\r\n``Corresponds to platform parameters that can be used to configure application behavior (including gating features).``', 'comment_created': datetime.datetime(2021, 6, 11, 5, 30, 41, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 649700543, 'comment_body': 'Should be ``value_type`` per conventional use of oneofs elsewhere in the codebase.', 'comment_created': datetime.datetime(2021, 6, 11, 5, 31, 15, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 649700703, 'comment_body': ""Just: ``Value of the parameter.`` is probably sufficient. The fact that it's a oneof implies that it can be one of the other types (or unspecified)."", 'comment_created': datetime.datetime(2021, 6, 11, 5, 31, 43, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 649700861, 'comment_body': 'This can probably be a bit more specific: ``Indicates a boolean-typed platform parameter.``\r\n\r\nDitto for the other 2.', 'comment_created': datetime.datetime(2021, 6, 11, 5, 32, 7, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 649701004, 'comment_body': ""Nit here & below: space before ``{``.\r\n\r\nI'm curious this & the indentation passed buf. @anandwana001 do we need to enable more strict checks for proto files?"", 'comment_created': datetime.datetime(2021, 6, 11, 5, 32, 30, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 649701436, 'comment_body': ""I suggest 'parameters' since it's a map. This is counter to protobuf best practices, but is inline with ours (happy to discuss why I prefer this approach if anyone disagrees (: )."", 'comment_created': datetime.datetime(2021, 6, 11, 5, 33, 51, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 649701563, 'comment_body': 'All proto fields should have documentation. In this case, we should explain what the map is mapping from & to.', 'comment_created': datetime.datetime(2021, 6, 11, 5, 34, 10, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 649701706, 'comment_body': ""Do we actually need this class if it's only for when the app is running? Why not use a Kotlin map in that case?"", 'comment_created': datetime.datetime(2021, 6, 11, 5, 34, 39, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 649701860, 'comment_body': ""Possibly a clearer name: ``PlatformParameters`` though I'm not sure since I'm a bit unclear how this type will be used. Can you provide a bit more context or a direct link to the part in your proposal that explains this?"", 'comment_created': datetime.datetime(2021, 6, 11, 5, 35, 10, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 649702242, 'comment_body': 'Why not always pair a name with platform parameters? They are expected to have one, and for compile-time only parameters we can have a special case for when the name is undefined (empty), e.g.:\r\n\r\n```proto\r\n// The name of the platform parameter, or empty if the parameter is only defined locally.\r\nstring name = 1;\r\n...\r\n```', 'comment_created': datetime.datetime(2021, 6, 11, 5, 36, 7, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 649702702, 'comment_body': ""Nit: ``Format of platform parameters stored on disk.`` Is probably sufficient. For the second part, do we specifically benefit from matching the JSON response? It seems unimportant here (though using a 'repeated' still seems fine regardless, but I don't think we care about retaining any particular order--do we?)."", 'comment_created': datetime.datetime(2021, 6, 11, 5, 37, 21, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 649703121, 'comment_body': 'Or maybe: ``Platform parameters cached from the backend.`` might be clearer on the context.\r\n\r\nGiven that, it might also be worthwhile to name the overall structure ``RemotePlatformParameterDatabase`` since we actually have 2 types of parameters (local & remote), and it seems this is only storing the latter--is that correct?', 'comment_created': datetime.datetime(2021, 6, 11, 5, 38, 32, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 649706808, 'comment_body': 'Yeah a normal Map aould work too. /cc @vinitamurthi ', 'comment_created': datetime.datetime(2021, 6, 11, 5, 48, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 649707864, 'comment_body': ""We didn't included the name of the Parameter in this proto class becuase when it was being used in the ParameterMap so we had a repetition of names, once as a key and second inside the object being stored as value. /cc @vinitamurthi "", 'comment_created': datetime.datetime(2021, 6, 11, 5, 51, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 649710661, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 11, 5, 59, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 649711039, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 11, 6, 0, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 649711406, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 11, 6, 0, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 649711582, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 11, 6, 1, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 649711945, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 11, 6, 2, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 649712168, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 11, 6, 3, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 649715824, 'comment_body': ""Done.\r\nNo we don't need that specifically I just mentioned it because I think by following this structure we are keeping ourselves open to consume Parameters in any Data structure we want (currently a Map). Also Yes, this format will retain the order of parameters from the JSON."", 'comment_created': datetime.datetime(2021, 6, 11, 6, 12, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 649716889, 'comment_body': ""That's True that it is stoting the Remote Parameters. Done"", 'comment_created': datetime.datetime(2021, 6, 11, 6, 15, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 649717535, 'comment_body': 'Not an issue now as We will replace it with a normal Kotlin Map', 'comment_created': datetime.datetime(2021, 6, 11, 6, 16, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 649717578, 'comment_body': 'Not an issue now as We will replace it with a normal Kotlin Map', 'comment_created': datetime.datetime(2021, 6, 11, 6, 16, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 649717590, 'comment_body': 'Not an issue now as We will replace it with a normal Kotlin Map', 'comment_created': datetime.datetime(2021, 6, 11, 6, 17, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 649717617, 'comment_body': 'Not an issue now as We will replace it with a normal Kotlin Map', 'comment_created': datetime.datetime(2021, 6, 11, 6, 17, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 651221339, 'comment_body': 'Ah I see. How important is the map? An alternate approach might be just to store a repeated list of the parameters and build the map at runtime. ', 'comment_created': datetime.datetime(2021, 6, 14, 19, 33, 53, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 651221736, 'comment_body': 'Got it. I think this also helps address the way to store it, too', 'comment_created': datetime.datetime(2021, 6, 14, 19, 34, 32, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 651226175, 'comment_body': 'Yeah', 'comment_created': datetime.datetime(2021, 6, 14, 19, 41, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 651238433, 'comment_body': 'Actually the map is formed only at the runtime. It has a keyset that corresponds to all the platform names. The value set of this map contains PlatformParameter objects which currently wrap only the value of a particular parameter. But if we would have also stored the names inside PlatformParameter objects then there would have been unnecessary repititon of the names in the key-value pairs of map. We avoided this problem by using a complete new proto (PlatformParameterWithName) class which contains both the name and value of Platform Parameters.', 'comment_created': datetime.datetime(2021, 6, 14, 20, 1, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 652999361, 'comment_body': 'You can omit this visibility since it will be used by java_lite_proto_library in this same package.', 'comment_created': datetime.datetime(2021, 6, 16, 19, 53, 45, tzinfo=datetime.timezone.utc), 'commenter': 'fsharpasharp', 'type': 'User'}, {'comment_id': 653443691, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 17, 10, 38, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 655836257, 'comment_body': 'Proto files are indented with 2 spaces, not 4--please fix.', 'comment_created': datetime.datetime(2021, 6, 22, 2, 47, 3, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 655837820, 'comment_body': ""Hmm, I think I might be missing something. Is this the compile-time name of the parameter, or the server name? If the former, it seems wrong not to include it in the PlatformParameter since that is, conceptually, a parameter. I see the point that it would be duplicated, but I don't see that it's an actual issue here. Having access to the parameter name in PlatformParameter seems like a good design, and to some extent expected. PlatformParameter providing a value without the context of the name is a bit confusing.\r\n\r\nOr am I missing some key design aspect of this?\r\n\r\n@vinitamurthi in case you have thoughts."", 'comment_created': datetime.datetime(2021, 6, 22, 2, 51, 45, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 656203079, 'comment_body': 'Done. Its just because of default formatting that is done by andorid studio', 'comment_created': datetime.datetime(2021, 6, 22, 13, 8, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 656207151, 'comment_body': 'These are simply Parameter names as we are not using different Proto structure based on whether it is a compile time or runtime parameter.', 'comment_created': datetime.datetime(2021, 6, 22, 13, 12, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 656289932, 'comment_body': ""I think its okay if we add the name in the internal message. We would be duplicating the name but I think that's not a big issue"", 'comment_created': datetime.datetime(2021, 6, 22, 14, 41, 43, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}]","[{'commit_sha': 'b085c41e195b0e55c4c55108e86afd4a26f17a0b', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83f73301df85277f4faad2db06e3a76d21a1c814', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c0787cb91352e3ee05cb4d43f6debaa9ed5307f', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36e9619994e63bda5086dafb2a16902b12b8eec0', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93761bda02f5cefdaf26afc46e903509fbdd671b', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96083088cb7719af314e6cc0b7d5b9d6edd2165c', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'daeae25e47809c2db5d82d5ccf7d4401981e20a4', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe63e7af5de9d75630342895e9f232d823bf5f89', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2010e1766fb27707052afa3094e89318ca822d22', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c457f68acb192fad57159055f0b276db08416882', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0cff20517cebafee9c3e615c3b1431f082f53d4a', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b8d838e6cb5f84da4f01749577b6543134fd441', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9f7f34d74af0ad861bfbbb65e4ea262cd0789ee', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd5e4c748801345f52921ad81fcc26ac122d864b1', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}]",Arjun Gupta,64064110,arjupta.90@gmail.com,User,,26,,35,44
669111625,Fix #3322: Platform parameter singleton and Generic Interface,"<!--
  - Thanks for submitting code to Oppia! Please fill out the following as part of
  - your pull request so we can review your code more easily.
  -->

## Explanation
<!--
  - Explain what your PR does. If this PR fixes an existing bug, please include
  - ""Fixes #bugnum:"" in the explanation so that GitHub can auto-close the issue
  - when this PR is merged.
  -->
Fixes #3322 
This PR introduces a new domain layer Singleton class which will help with storing and providing platform parameter values. This PR also includes a Generic Interface whose implementations will be provided containing Platform Parameters. (This PR is stacked over #3269). /cc @Sarthak2601 

## Checklist
<!-- Please tick the relevant boxes by putting an ""x"" in them. -->
- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The PR explanation includes the words ""Fixes #bugnum: ..."" (or ""Fixes part of #bugnum"" if the PR only partially fixes an issue).
- [x] The PR follows the [style guide](https://github.com/oppia/oppia-android/wiki/Coding-style-guide).
- [x] The PR does not contain any unnecessary auto-generated code from Android Studio.
- [x] The PR is made from a branch that's **not** called ""develop"".
- [x] The PR is made from a branch that is up-to-date with ""develop"".
- [x] The PR's branch is based on ""develop"" and not on any other branch.
- [x] The PR is **assigned** to an appropriate reviewer in both the **Assignees** and the **Reviewers** sections.
",True,3323,https://api.github.com/repos/oppia/oppia-android/pulls/3323,https://github.com/oppia/oppia-android/pull/3323,closed,292,0,6,37,19,109,1,0,[{'name': 'PR: LGTM'}],2021-06-13 20:34:53+00:00,2021-07-07 03:08:48+00:00,2010835.0,"23 days, 6:33:55","[{'comment_id': 651368659, 'comment_body': ""Can this be made private? Since we'll be accessing individual values we probably want to hide this."", 'comment_created': datetime.datetime(2021, 6, 15, 0, 47, 30, tzinfo=datetime.timezone.utc), 'commenter': 'jcqli', 'type': 'User'}, {'comment_id': 651370437, 'comment_body': ""Be sure to add any [KDoc blocks](https://developer.android.com/kotlin/style-guide#documentation) for public functions (ditto to below function). Main ones to document are parameters, return values, and exceptions, there are plenty of examples in the codebase for this :)\r\n\r\nIt might also be better to name this `setPlatformParameterMap` since `init` suggests that the initialization of the class which isn't quite accurate (and also update the test names)."", 'comment_created': datetime.datetime(2021, 6, 15, 0, 52, 54, tzinfo=datetime.timezone.utc), 'commenter': 'jcqli', 'type': 'User'}, {'comment_id': 651371230, 'comment_body': ""I'm wondering if we might want to introduce some error-handling with this -- particularly if this gets called twice, we might want to handle that since that indicates something wrong with setting platform parameters. @vinitamurthi  WDYT?"", 'comment_created': datetime.datetime(2021, 6, 15, 0, 55, 22, tzinfo=datetime.timezone.utc), 'commenter': 'jcqli', 'type': 'User'}, {'comment_id': 651371736, 'comment_body': 'This could probably be it\'s own test `testSingleton_initialPlatformParameterMap_isEmpty` and then you won\'t need to check it for all the tests.\r\n\r\nAlso, if we rename the `initPlatformParameterMap` function above this test could then better represent the ""initial"" state case.', 'comment_created': datetime.datetime(2021, 6, 15, 0, 56, 57, tzinfo=datetime.timezone.utc), 'commenter': 'jcqli', 'type': 'User'}, {'comment_id': 651373572, 'comment_body': ""This can also be it's own test `testSingleton_init/setPlatformParameterMap_isNotEmpty()` and then testing for each value type can just check the value."", 'comment_created': datetime.datetime(2021, 6, 15, 1, 2, 41, tzinfo=datetime.timezone.utc), 'commenter': 'jcqli', 'type': 'User'}, {'comment_id': 651373885, 'comment_body': ""I recommend putting these in the class since they're specific to this class being tested."", 'comment_created': datetime.datetime(2021, 6, 15, 1, 3, 36, tzinfo=datetime.timezone.utc), 'commenter': 'jcqli', 'type': 'User'}, {'comment_id': 651374225, 'comment_body': 'This can be a class constant too for consistency.', 'comment_created': datetime.datetime(2021, 6, 15, 1, 4, 50, tzinfo=datetime.timezone.utc), 'commenter': 'jcqli', 'type': 'User'}, {'comment_id': 651374299, 'comment_body': ""I think there's an `isNull()` check you can use here."", 'comment_created': datetime.datetime(2021, 6, 15, 1, 5, 5, tzinfo=datetime.timezone.utc), 'commenter': 'jcqli', 'type': 'User'}, {'comment_id': 651374672, 'comment_body': 'We probably want this to be `oppia_api_visibility`', 'comment_created': datetime.datetime(2021, 6, 15, 1, 6, 19, tzinfo=datetime.timezone.utc), 'commenter': 'jcqli', 'type': 'User'}, {'comment_id': 651375100, 'comment_body': 'This might need some more detail to explain how they correspond to the defined protos and why we want this interface.', 'comment_created': datetime.datetime(2021, 6, 15, 1, 7, 44, tzinfo=datetime.timezone.utc), 'commenter': 'jcqli', 'type': 'User'}, {'comment_id': 651479381, 'comment_body': ""It cannot be private, as the inline function (getPlatformParameter) can't acces it. But there can be a workaround like this code snippet - \r\n\r\n      /** Retrieve individual PlatformParameter, if it exists in the platformParameterMap. */\r\n      fun <T : Any> getPlatformParameter(name: String): PlatformParameter<T>? {\r\n        if (platformParameterMap.isEmpty()) return null\r\n        val parameter = platformParameterMap[name] ?: return null\r\n        return object : PlatformParameter<T> {\r\n           override val value: T\r\n            get() = when (getClass<KClass<T>>()) {\r\n              0 -> parameter.string as T\r\n              1 -> parameter.integer as T\r\n              2 -> parameter.boolean as T\r\n              else -> null as T\r\n            }\r\n        }\r\n      }\r\n      \r\n      private inline fun <reified T> getClass(): Int {\r\n         return when (T::class) {\r\n          String::class -> 0\r\n          Int::class -> 1\r\n          Boolean::class -> 2\r\n          else -> 3\r\n       }\r\n      }\r\n\r\nNow we can keep the map to be a private var, does this Looks good to you? @jcqli "", 'comment_created': datetime.datetime(2021, 6, 15, 6, 17, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 651480076, 'comment_body': 'After changing the name of the function to setPlatformParameterMap a clash occured between the setter for platformParameterMap and the function.', 'comment_created': datetime.datetime(2021, 6, 15, 6, 19, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 651480544, 'comment_body': 'Okay got it', 'comment_created': datetime.datetime(2021, 6, 15, 6, 20, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 651480910, 'comment_body': 'Sure will do that', 'comment_created': datetime.datetime(2021, 6, 15, 6, 20, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 651481993, 'comment_body': ""You mean to say I should put these into PlatformParameterSingleton? If yes then isn't it wrong to put the test specific constants in a Production class. @jcqli "", 'comment_created': datetime.datetime(2021, 6, 15, 6, 22, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 651482242, 'comment_body': 'Sure will do it', 'comment_created': datetime.datetime(2021, 6, 15, 6, 23, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 651482376, 'comment_body': 'Sure will do it', 'comment_created': datetime.datetime(2021, 6, 15, 6, 23, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 651482980, 'comment_body': 'Oh! will update this in the base PR ( as this change came after rebasing this PR over the branch that it is stacked upon)', 'comment_created': datetime.datetime(2021, 6, 15, 6, 24, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 651483084, 'comment_body': 'Okay', 'comment_created': datetime.datetime(2021, 6, 15, 6, 25, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 652796423, 'comment_body': 'Oh I meant below in this test class! Around line 38.', 'comment_created': datetime.datetime(2021, 6, 16, 15, 21, 11, tzinfo=datetime.timezone.utc), 'commenter': 'jcqli', 'type': 'User'}, {'comment_id': 652798007, 'comment_body': 'Nice! I think this can be written as `assertThat(platformParameterSingleton.platformParameterMap).isEmpty()`', 'comment_created': datetime.datetime(2021, 6, 16, 15, 22, 54, tzinfo=datetime.timezone.utc), 'commenter': 'jcqli', 'type': 'User'}, {'comment_id': 652801232, 'comment_body': ""Hm interesting. I've never used inline functions but I would say the original implementation is probably better since the private function isn't adding any code clarity. @vinitamurthi WDYT?\r\n\r\nAlso, what's the reason for using an inline function?"", 'comment_created': datetime.datetime(2021, 6, 16, 15, 26, 25, tzinfo=datetime.timezone.utc), 'commenter': 'jcqli', 'type': 'User'}, {'comment_id': 652802563, 'comment_body': 'nit: add newline at the end of the file', 'comment_created': datetime.datetime(2021, 6, 16, 15, 27, 52, tzinfo=datetime.timezone.utc), 'commenter': 'jcqli', 'type': 'User'}, {'comment_id': 652803270, 'comment_body': ""This might be better as a class constant since it's being used in nearly every test. That way we don't have to reconstruct it every time."", 'comment_created': datetime.datetime(2021, 6, 16, 15, 28, 37, tzinfo=datetime.timezone.utc), 'commenter': 'jcqli', 'type': 'User'}, {'comment_id': 652812090, 'comment_body': 'Ah got it, is there a reason we are writing our own setter then?  If this is meant to initialize the map only once then I recommend adding error handling if the map has already been initialized. Otherwise why not use the existing setter?', 'comment_created': datetime.datetime(2021, 6, 16, 15, 37, 51, tzinfo=datetime.timezone.utc), 'commenter': 'jcqli', 'type': 'User'}, {'comment_id': 653315618, 'comment_body': 'The reason for inline function is to use \\<reified T\\>, This is because we want to know which class does T belongs to, which was not possible without using a  \\<reified T\\>', 'comment_created': datetime.datetime(2021, 6, 17, 7, 50, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 653316729, 'comment_body': 'Yeah we can use the default setter also. I will find about how to implement the same functionality with it ', 'comment_created': datetime.datetime(2021, 6, 17, 7, 51, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 653318172, 'comment_body': 'Yeah, Done', 'comment_created': datetime.datetime(2021, 6, 17, 7, 53, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 653320934, 'comment_body': 'Yeah that can be done its just that in previous tests that I worked, they had constant like this outside of the class ([ test file ](https://github.com/ARJUPTA/oppia-android/blob/9a691d448ed7f7eaeeb7471938669c78e8a875ff/app/src/sharedTest/java/org/oppia/android/app/options/ReadingTextSizeFragmentTest.kt#L79)from my earlier PR) ', 'comment_created': datetime.datetime(2021, 6, 17, 7, 57, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 653321615, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 17, 7, 57, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 653322145, 'comment_body': 'Yeah, Done', 'comment_created': datetime.datetime(2021, 6, 17, 7, 58, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 653662285, 'comment_body': ""That's fair -- I don't think we have any specific conventions on how to do this so I'll leave it up to you. If you do choose to leave as is, they probably should be `private` and should be named `STRING_PLATFORM_PARAMETER_NAME` etc."", 'comment_created': datetime.datetime(2021, 6, 17, 15, 14, 16, tzinfo=datetime.timezone.utc), 'commenter': 'jcqli', 'type': 'User'}, {'comment_id': 653673220, 'comment_body': ""I did some additional research and I believe I understand now why we have to use the inline function. I'll leave this thread open in case Vinita has additional thoughts."", 'comment_created': datetime.datetime(2021, 6, 17, 15, 24, 58, tzinfo=datetime.timezone.utc), 'commenter': 'jcqli', 'type': 'User'}, {'comment_id': 653679460, 'comment_body': ""Hm maybe `Generic interface that is used to provide Platform Parameter Values corresponding to the [PlatformParameter] proto values. Objects that implement this interface will override the [value] property to store the actual platform parameter value.`\r\n\r\nAs another thought, could this be a generic class rather than an interface? That way we won't have different classes for each value type."", 'comment_created': datetime.datetime(2021, 6, 17, 15, 30, 36, tzinfo=datetime.timezone.utc), 'commenter': 'jcqli', 'type': 'User'}, {'comment_id': 653754107, 'comment_body': '@vinitamurthi PTAL', 'comment_created': datetime.datetime(2021, 6, 17, 16, 57, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 653755079, 'comment_body': 'Okay noted', 'comment_created': datetime.datetime(2021, 6, 17, 16, 58, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 653759681, 'comment_body': 'This was point was throughly discussed during proposal reviews and also for the submission of additional info. This approach has been suggested by @BenHenning and @vinitamurthi collectively and it matches the way in which we implement a testable feature. (Help us to provide mocks easily). So @vinitamurthi is the best person to take a look at your suggestion.', 'comment_created': datetime.datetime(2021, 6, 17, 17, 2, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 653791149, 'comment_body': ""Sounds good, I must've missed that part  -- thanks for the clarification! Could you point me to where that's explained in the proposal? "", 'comment_created': datetime.datetime(2021, 6, 17, 17, 33, 27, tzinfo=datetime.timezone.utc), 'commenter': 'jcqli', 'type': 'User'}, {'comment_id': 653897793, 'comment_body': 'We will discuss on this in the team meet as there was a email thread regarding the discussion', 'comment_created': datetime.datetime(2021, 6, 17, 20, 6, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 654890182, 'comment_body': ""Instead of using an `inline function` and `<reified T>` to get the platform value type, can't we make use of the proto objects here? We already have defined value types through which we can decide which kind of value we'll be returning. This way the variable can also be made private. "", 'comment_created': datetime.datetime(2021, 6, 20, 7, 19, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 654891066, 'comment_body': 'I think the `if` clause works fine here -- might be worth adding tests for this to check for regression. ', 'comment_created': datetime.datetime(2021, 6, 20, 7, 27, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 654973572, 'comment_body': 'We can make use of the Proto classes but doing so will include a bug. For example when we use getPlatformParameter\\<String\\>(""param1"") , we expect a parameter with name -> ""param1"" and a value of String type. But in case we depend on Proto class to set the type of value that is going inside PlatformParameter implementation then this can create a RunTime exception when the Proto has a different data type (than String) stored in the same name of ""param1""', 'comment_created': datetime.datetime(2021, 6, 20, 18, 42, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 654974392, 'comment_body': 'I guess the current tests have this use case. (indirectly tested)', 'comment_created': datetime.datetime(2021, 6, 20, 18, 50, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 657243081, 'comment_body': ""Which test is this in? I'm not sure this edge case is tested."", 'comment_created': datetime.datetime(2021, 6, 23, 15, 51, 15, tzinfo=datetime.timezone.utc), 'commenter': 'jcqli', 'type': 'User'}, {'comment_id': 657245556, 'comment_body': 'Be sure to remove any commented-out code here.', 'comment_created': datetime.datetime(2021, 6, 23, 15, 53, 32, tzinfo=datetime.timezone.utc), 'commenter': 'jcqli', 'type': 'User'}, {'comment_id': 657252584, 'comment_body': 'I see this has been renamed, were there collisions with the setter?', 'comment_created': datetime.datetime(2021, 6, 23, 16, 1, 37, tzinfo=datetime.timezone.utc), 'commenter': 'jcqli', 'type': 'User'}, {'comment_id': 657253267, 'comment_body': 'It looks like we are using the proto objects for type-checking now, is that right?', 'comment_created': datetime.datetime(2021, 6, 23, 16, 2, 26, tzinfo=datetime.timezone.utc), 'commenter': 'jcqli', 'type': 'User'}, {'comment_id': 657254041, 'comment_body': ""It looks like we're sticking with the interface implementation -- could you highlight the main reasons for this decision? I know we discussed it but could be useful as a record for others viewing this PR."", 'comment_created': datetime.datetime(2021, 6, 23, 16, 3, 26, tzinfo=datetime.timezone.utc), 'commenter': 'jcqli', 'type': 'User'}, {'comment_id': 657632485, 'comment_body': 'I think we should add a test specific to this use case. The existing tests dont seem to add that', 'comment_created': datetime.datetime(2021, 6, 24, 5, 17, 35, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 657632576, 'comment_body': '+1', 'comment_created': datetime.datetime(2021, 6, 24, 5, 17, 52, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 657632680, 'comment_body': 'Add a test where we call init twice', 'comment_created': datetime.datetime(2021, 6, 24, 5, 18, 16, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 657632993, 'comment_body': 'What happens when we do a getStringPlatformParameter but pass BOOLEAN_PLATFORM_PARAMETER_NAME to it? Can we add a test like this?', 'comment_created': datetime.datetime(2021, 6, 24, 5, 19, 12, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 657849395, 'comment_body': 'I guess No, we have now made three different functions one each for different data type (String/Int/Boolean). This way we are sure about the type of PlatformParameter to be expected and also in case of any mismatch of the required value type and the cached value type we provide defalt parameter', 'comment_created': datetime.datetime(2021, 6, 24, 11, 7, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 657851410, 'comment_body': 'As the property is now private we need a setter to access it', 'comment_created': datetime.datetime(2021, 6, 24, 11, 10, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 657851827, 'comment_body': 'Okay I will add a test for this too', 'comment_created': datetime.datetime(2021, 6, 24, 11, 11, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 657853568, 'comment_body': 'We are sticking with the Interface impl of PlatformParamter so as to be consistent in the way we test features in our codebase. After discussion there was specific point on why we cannot use a Generic Class instead of Generic Interface.', 'comment_created': datetime.datetime(2021, 6, 24, 11, 14, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 657854575, 'comment_body': 'I have kept the code here in order to compare the previous approach of using a single generic function instead of three different functions. But as everyone seems okay with this new approach so I can remove it now', 'comment_created': datetime.datetime(2021, 6, 24, 11, 15, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 657884425, 'comment_body': 'it should return null. Added the test for it', 'comment_created': datetime.datetime(2021, 6, 24, 12, 3, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 657884520, 'comment_body': 'Added ', 'comment_created': datetime.datetime(2021, 6, 24, 12, 3, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 658062429, 'comment_body': 'nit: add space after `if`', 'comment_created': datetime.datetime(2021, 6, 24, 15, 37, 30, tzinfo=datetime.timezone.utc), 'commenter': 'jcqli', 'type': 'User'}, {'comment_id': 658066864, 'comment_body': 'What was the specific point? I remember there was a chain of errors occurring when I played around with it but it might be useful to document those here as well if you remember!', 'comment_created': datetime.datetime(2021, 6, 24, 15, 42, 55, tzinfo=datetime.timezone.utc), 'commenter': 'jcqli', 'type': 'User'}, {'comment_id': 658068548, 'comment_body': ""Ah the calls to `parameter.valueTypeCase.equals(ParameterValue.ValueTypeCase.STRING)` are what I mean by using the protos for type-checking, as opposed to using the function generics to get the types. I like this more than the earlier iteration since I thin kit's more aligned with what we want this getter to be, nice job!"", 'comment_created': datetime.datetime(2021, 6, 24, 15, 44, 50, tzinfo=datetime.timezone.utc), 'commenter': 'jcqli', 'type': 'User'}, {'comment_id': 658122406, 'comment_body': 'Thanks. ', 'comment_created': datetime.datetime(2021, 6, 24, 16, 52, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 659181348, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 26, 15, 35, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 659467646, 'comment_body': 'Re: linter errors, I believe the `javax` imports should go at the end.', 'comment_created': datetime.datetime(2021, 6, 28, 4, 17, 21, tzinfo=datetime.timezone.utc), 'commenter': 'jcqli', 'type': 'User'}, {'comment_id': 659468112, 'comment_body': 'I believe you can do `isNotEmpty()` (ditto elsewhere this is used).', 'comment_created': datetime.datetime(2021, 6, 28, 4, 19, 19, tzinfo=datetime.timezone.utc), 'commenter': 'jcqli', 'type': 'User'}, {'comment_id': 659468380, 'comment_body': ""I'd also add a check that the map != empty map to guarantee nothing weird is happening with second map."", 'comment_created': datetime.datetime(2021, 6, 28, 4, 20, 19, tzinfo=datetime.timezone.utc), 'commenter': 'jcqli', 'type': 'User'}, {'comment_id': 659468413, 'comment_body': 'I see `testSingleton_initPlatformParameterMapTwice_checkIsNotUpdatedTwice`, left a quick follow-up.', 'comment_created': datetime.datetime(2021, 6, 28, 4, 20, 30, tzinfo=datetime.timezone.utc), 'commenter': 'jcqli', 'type': 'User'}, {'comment_id': 659968068, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 28, 17, 10, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 659969878, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 28, 17, 12, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 659973235, 'comment_body': 'Although if we check that the value of map is equal to mockMap that means it is not equal to emptyMap, but adding that check just to be sure', 'comment_created': datetime.datetime(2021, 6, 28, 17, 17, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 660735161, 'comment_body': ""Could we rename this as PlatformParameterValue? Since it's just holding the value, and that lets us avoid naming collisions with the proto type"", 'comment_created': datetime.datetime(2021, 6, 29, 15, 32, 41, tzinfo=datetime.timezone.utc), 'commenter': 'jcqli', 'type': 'User'}, {'comment_id': 660809850, 'comment_body': 'add kdoc ', 'comment_created': datetime.datetime(2021, 6, 29, 17, 9, 3, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 660811595, 'comment_body': 'private function', 'comment_created': datetime.datetime(2021, 6, 29, 17, 11, 32, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 661130949, 'comment_body': 'Get --> Gets. Also add a `@return` annotation (See https://kotlinlang.org/docs/kotlin-doc.html#kdoc-syntax for an example)', 'comment_created': datetime.datetime(2021, 6, 30, 4, 58, 12, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 661131407, 'comment_body': 'Change comment to -> `Initializes a [platformParameterMap] in case it is empty.`\r\nTechnically you can initialize it as an empty map, and if you do that it will keep initializing it if this method is called', 'comment_created': datetime.datetime(2021, 6, 30, 4, 59, 38, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 661131469, 'comment_body': 'Also add the @param in KDoc (See https://kotlinlang.org/docs/kotlin-doc.html#kdoc-syntax for an example of `@param` and `@return` annotations)', 'comment_created': datetime.datetime(2021, 6, 30, 4, 59, 46, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 661132149, 'comment_body': 'Retrieve --> Retrieves. Add `@param` and `@return` annotations', 'comment_created': datetime.datetime(2021, 6, 30, 5, 1, 52, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 661132205, 'comment_body': 'Same comment as above', 'comment_created': datetime.datetime(2021, 6, 30, 5, 2, 4, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 661132234, 'comment_body': 'Same comment as above', 'comment_created': datetime.datetime(2021, 6, 30, 5, 2, 11, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 661132701, 'comment_body': 'Can you not do `ParameterValue.newBuilder().setString(...).build()`? That should create the default instance anyway (same comment below)', 'comment_created': datetime.datetime(2021, 6, 30, 5, 3, 44, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 661133154, 'comment_body': 'Add a new line before the assert. This is just to separate the lines of code that is setting up the test, and the lines of code that is checking if the result is as expected', 'comment_created': datetime.datetime(2021, 6, 30, 5, 5, 8, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 661133625, 'comment_body': 'Platform Parameter Values --> platform parameter values ', 'comment_created': datetime.datetime(2021, 6, 30, 5, 6, 29, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 661133738, 'comment_body': '```suggestion\r\n */\r\n```', 'comment_created': datetime.datetime(2021, 6, 30, 5, 6, 51, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 661347572, 'comment_body': 'Yeah that will be better. Done\r\n/cc @vinitamurthi ', 'comment_created': datetime.datetime(2021, 6, 30, 10, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 661348750, 'comment_body': 'Sorry for the mistake. I actually meant that there was ""no specific point on why we cannot use a Generic Class""', 'comment_created': datetime.datetime(2021, 6, 30, 10, 54, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 661349687, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 30, 10, 56, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 661354231, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 30, 11, 3, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 661355807, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 30, 11, 6, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 661361977, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 30, 11, 13, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 661372445, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 30, 11, 28, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 661372516, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 30, 11, 28, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 661372752, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 30, 11, 28, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 661374276, 'comment_body': 'Yeah this is better. Done', 'comment_created': datetime.datetime(2021, 6, 30, 11, 30, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 661374842, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 30, 11, 31, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 661375327, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 30, 11, 32, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 661376397, 'comment_body': 'This is neccessary for KDoc. So cannot remove this asterisk', 'comment_created': datetime.datetime(2021, 6, 30, 11, 33, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 661613460, 'comment_body': ""The format suggested by Vinita here is a standard format of the comment block. \r\nCheck here for reference - `promotedlist/ComingSoonTopicsListView.kt`\r\n\r\nOfficial reference - https://kotlinlang.org/docs/kotlin-doc.html#kdoc-syntax\r\n\r\nDon't know why ktlint doesn't catch this, creating an issue for tracking this. "", 'comment_created': datetime.datetime(2021, 6, 30, 16, 0, 36, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 661618941, 'comment_body': 'Issue created https://github.com/oppia/oppia-android/issues/3394', 'comment_created': datetime.datetime(2021, 6, 30, 16, 7, 33, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 661622833, 'comment_body': 'mention the type to prevent `Type inference` warnings. \r\n\r\nOfficial reference - https://kotlinlang.org/spec/type-inference.html', 'comment_created': datetime.datetime(2021, 6, 30, 16, 12, 20, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 661649352, 'comment_body': 'I have made the change, but just confirming that Android Studio was not giving any warnings on this point. So was this a manual check thing or something which can be detected automatically in some way', 'comment_created': datetime.datetime(2021, 6, 30, 16, 47, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 662124598, 'comment_body': 'oh, It was giving a warning for me, `red line` under the `mapOf()`', 'comment_created': datetime.datetime(2021, 7, 1, 9, 16, 50, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 662220573, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 1, 11, 50, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 662817593, 'comment_body': 'ah, I missed this earlier, is passing a nullable in `assertThat` is a good idea? \r\n\r\nWhat happens if we pass a null value to `assertThat`? \r\nAlso, does the testing goes correctly if passing a null value?\r\nOr can we modify the test something like where we confirm that we will get the desired value and null never shows up? ', 'comment_created': datetime.datetime(2021, 7, 2, 7, 58, 49, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 663007074, 'comment_body': '@anandwana001 This nullable result is part of our logic.\r\nWe pass a name to the gettter method (inside singleton) then this getter method looks for the parameter corresponding to this name in the map. If it find this map then it returns that PlatformParameter instance but if in case there is no such parameter in the map then in that case this getter method returns null. Now it is the responsibility of the dagger module to provide a default PlatformParameter whenever singleton returns null. \r\n\r\nSo for our test -> We are checking that after passing in the correct name (means name of a parameter which exists in map) do we have the required value. This required value is not going to be null and should be equal to true value (which we set at the start of the test). \r\n\r\nHence this single assertThat covers a test for both cases ie it checks that the returned value should not be null and it should be equal to the true value. ', 'comment_created': datetime.datetime(2021, 7, 2, 13, 19, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 663324675, 'comment_body': 'nit: add newline above KDoc `@` fields (but each `@` line should be next to each other).', 'comment_created': datetime.datetime(2021, 7, 3, 6, 16, 56, tzinfo=datetime.timezone.utc), 'commenter': 'jcqli', 'type': 'User'}, {'comment_id': 663437257, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 4, 2, 55, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 664164029, 'comment_body': 'This could be a val with a mutable list, instead, where you clear & perform a ``putAll`` to reinitialize it versus changing the parameter itself.', 'comment_created': datetime.datetime(2021, 7, 6, 0, 20, 56, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 664752414, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 6, 17, 34, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}]","[{'commit_sha': 'b085c41e195b0e55c4c55108e86afd4a26f17a0b', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83f73301df85277f4faad2db06e3a76d21a1c814', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c0787cb91352e3ee05cb4d43f6debaa9ed5307f', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36e9619994e63bda5086dafb2a16902b12b8eec0', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93761bda02f5cefdaf26afc46e903509fbdd671b', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96083088cb7719af314e6cc0b7d5b9d6edd2165c', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'daeae25e47809c2db5d82d5ccf7d4401981e20a4', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe63e7af5de9d75630342895e9f232d823bf5f89', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2010e1766fb27707052afa3094e89318ca822d22', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c457f68acb192fad57159055f0b276db08416882', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0cff20517cebafee9c3e615c3b1431f082f53d4a', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b8d838e6cb5f84da4f01749577b6543134fd441', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9f7f34d74af0ad861bfbbb65e4ea262cd0789ee', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd5e4c748801345f52921ad81fcc26ac122d864b1', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '291e7ab5fdcd3a55cf52321ea3800cfac84098f5', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e5f1ab59d9a1e38ae316430cb6857d5fda6b6360', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c7d9162d777ee4777b0e88e0662891988e4cbae', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '069f199491076ad3f07186457996d1b1e7844a4e', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5978909397dcd5e6547dd86208c8e482cdcc813d', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0eaa8ffa1c4412bd863c3f60ef3a5189c7aa7c04', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e6f1370177980b082a7120aad2236aa6ac552cc2', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c035598d1fc8d48e77d4164dac8ee7c8bb2b5a22', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f8407871be99ff01e232e89b5eef791a8c40e72', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '06bca11cfb077243ff2db695387f36df64fe2746', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44209edfdc4e4f3df7cdef09bd64b2cd13a18fa8', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f77ad420f5a4e7d5c92bd29cfd7618fab190b8a6', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64f098c5cc6da4009bb2f48df3edf656de7050dd', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8b3b2a05b953ad0075e8f71d1baa801d0af261d', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cbcd1fbaf69f2d337a76353ad3d6b51aae5931f2', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d256a3ba082a4bdd55451b621199ddbcf18dec9', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57f20ac37daf96ea56b6e1c299cbcf2404dd4686', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '21fd4ae959f11d29047eae2ff5dd4e591d3c4a1c', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b8a19cefce58abfd89c86c06f7bebb9b4e68a1e1', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22340e198306a9b7f9fead45afdedafef135ceb1', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '75afce0a3f3ad65d5b5cbda43a0be17ead104555', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f4a283151290aee49c9e14c7deb233e92a7479e', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e8bcdf783915395bafb5b66917e1146ed901743', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}]",Arjun Gupta,64064110,arjupta.90@gmail.com,User,,26,,35,44
675758655,Fix #3360: Platform Parameter Dagger Module and Constants File [BLOCKED on #3323],"<!--
  - Thanks for submitting code to Oppia! Please fill out the following as part of
  - your pull request so we can review your code more easily.
  -->

## Explanation
<!--
  - Explain what your PR does. If this PR fixes an existing bug, please include
  - ""Fixes #bugnum:"" in the explanation so that GitHub can auto-close the issue
  - when this PR is merged.
  -->
Fixes #3360
This PR introduce a new Dagger Module which will provide the PlatformParameters and a Parameter Constants file to store the annotations, names, default values at one place.

**Note** - This PR containes the changes from [PR1.2](https://github.com/oppia/oppia-android/pull/3269) and [PR1.2](https://github.com/oppia/oppia-android/pull/3323) which were made from the fork of Oppia Repository, This PR is made directly from Oppia-Android repository in order to help us with Stacking PRs. Both of the previous PRs were almost reviewed so instead of reopening them we will copy the changes made in them here in order to develop over those changes. Any further change in these two PRs will be included here also (manually copy pasted) till the time those PRs are merged. Any further PR that will be made afterwards, will be stacked based on this PR (if needed).
/cc @Sarthak2601 

Change associated with this PR -
 - ApplicationComponent
 - PlatformParameterModule
 - TestPlatformParameterModule
 - PlatformParameterConstants
 - PlatformParameterModuleTest

Rest of the files are from previous two PRs.

## Checklist
<!-- Please tick the relevant boxes by putting an ""x"" in them. -->
- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The PR explanation includes the words ""Fixes #bugnum: ..."" (or ""Fixes part of #bugnum"" if the PR only partially fixes an issue).
- [x] The PR follows the [style guide](https://github.com/oppia/oppia-android/wiki/Coding-style-guide).
- [x] The PR does not contain any unnecessary auto-generated code from Android Studio.
- [x] The PR is made from a branch that's **not** called ""develop"".
- [x] The PR is made from a branch that is up-to-date with ""develop"".
- [x] The PR's branch is based on ""develop"" and not on any other branch.
- [x] The PR is **assigned** to an appropriate reviewer in both the **Assignees** and the **Reviewers** sections.
",True,3361,https://api.github.com/repos/oppia/oppia-android/pulls/3361,https://github.com/oppia/oppia-android/pull/3361,closed,288,4,7,17,12,83,1,0,[{'name': 'PR: LGTM'}],2021-06-22 21:05:41+00:00,2021-07-07 15:21:20+00:00,1275339.0,"14 days, 18:15:39","[{'comment_id': 657231025, 'comment_body': 'or maybe `/* Platform Parameter Module that provides values for the individual Platform Parameters. */`', 'comment_created': datetime.datetime(2021, 6, 23, 15, 38, 50, tzinfo=datetime.timezone.utc), 'commenter': 'jcqli', 'type': 'User'}, {'comment_id': 657234253, 'comment_body': 'nit: newline at end of file', 'comment_created': datetime.datetime(2021, 6, 23, 15, 42, 29, tzinfo=datetime.timezone.utc), 'commenter': 'jcqli', 'type': 'User'}, {'comment_id': 657234901, 'comment_body': 'nit: add empty new line before this', 'comment_created': datetime.datetime(2021, 6, 23, 15, 43, 15, tzinfo=datetime.timezone.utc), 'commenter': 'jcqli', 'type': 'User'}, {'comment_id': 657886105, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 24, 12, 6, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 657886171, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 24, 12, 6, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 657886655, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 24, 12, 7, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 659180825, 'comment_body': '@jcqli I will need some help over this. \r\n### Aim \r\nWhat I am trying to do here is that I want to initialise the platformParameterMap in the PlatformPrameterSingleton so that FakePlatformParameterModule can retrieve the value of TestParam from it and provide it via Dagger to us. \r\n\r\n### Problem \r\nAs the **setUpTestApplication**( ) is already called before every test (becuase it is in the @Before anotated method) hence the **testPlatformParameter** is injected before any test starts (which in turn injects the default parameter because the **platformParameterSingleton** initally have its **platformParameterMap** to be empty). This hinders the test to inject a platform parameter at runtime. \r\n\r\n### Tried solution \r\nI have tried to call the **setUpTestApplication** later in the tests so that **platformParameterSingleton** can be initialised before the **testPlatformParameter** is injected , but this method fails as the platformParameterSingleton is itself injected.', 'comment_created': datetime.datetime(2021, 6, 26, 15, 31, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 659469833, 'comment_body': ""Hm I think what you want to do is actually use the real platform parameter module with a test singleton. Since this it the PlatformParameterModuleTest, we want to make sure that our production module is functioning as expected. That said, the PlatformParameterModule is currently empty so it's unclear what needs to be tested right now."", 'comment_created': datetime.datetime(2021, 6, 28, 4, 26, 12, tzinfo=datetime.timezone.utc), 'commenter': 'jcqli', 'type': 'User'}, {'comment_id': 660743230, 'comment_body': 'What is this used for?', 'comment_created': datetime.datetime(2021, 6, 29, 15, 41, 31, tzinfo=datetime.timezone.utc), 'commenter': 'jcqli', 'type': 'User'}, {'comment_id': 660744039, 'comment_body': ""Is this going to be implemented in the next PR? Please add a comment to clarify why this is empty or that it's going to be implemented later."", 'comment_created': datetime.datetime(2021, 6, 29, 15, 42, 25, tzinfo=datetime.timezone.utc), 'commenter': 'jcqli', 'type': 'User'}, {'comment_id': 660745794, 'comment_body': 'Maybe `PlatformParameterTestModule` to match current naming conventions.', 'comment_created': datetime.datetime(2021, 6, 29, 15, 44, 30, tzinfo=datetime.timezone.utc), 'commenter': 'jcqli', 'type': 'User'}, {'comment_id': 660746484, 'comment_body': ""I'd specify String type somewhere in the constant name since we probably want to test all three param types."", 'comment_created': datetime.datetime(2021, 6, 29, 15, 45, 19, tzinfo=datetime.timezone.utc), 'commenter': 'jcqli', 'type': 'User'}, {'comment_id': 660747795, 'comment_body': ""I would rename these to `testModule` since that's what we want to check -- the prod module, not the fake, even if we are using a test object to do so."", 'comment_created': datetime.datetime(2021, 6, 29, 15, 46, 58, tzinfo=datetime.timezone.utc), 'commenter': 'jcqli', 'type': 'User'}, {'comment_id': 660748535, 'comment_body': ""Maybe `platformParameterMapWithValues` so it's clear that this map represents set values?"", 'comment_created': datetime.datetime(2021, 6, 29, 15, 47, 45, tzinfo=datetime.timezone.utc), 'commenter': 'jcqli', 'type': 'User'}, {'comment_id': 660749852, 'comment_body': ""Maybe `parameterValue` since it's different than the `testPlatformParameter` class var."", 'comment_created': datetime.datetime(2021, 6, 29, 15, 49, 11, tzinfo=datetime.timezone.utc), 'commenter': 'jcqli', 'type': 'User'}, {'comment_id': 660751796, 'comment_body': '`testFakeModule_doNotInitPlatformParameterMap_retrieveTestParameter_returnsDefaultValue` (ditto elsewhere)', 'comment_created': datetime.datetime(2021, 6, 29, 15, 51, 26, tzinfo=datetime.timezone.utc), 'commenter': 'jcqli', 'type': 'User'}, {'comment_id': 660756043, 'comment_body': 'Add test parameters this for all the other parameter types as well (probably want to update the annotation as well).', 'comment_created': datetime.datetime(2021, 6, 29, 15, 56, 24, tzinfo=datetime.timezone.utc), 'commenter': 'jcqli', 'type': 'User'}, {'comment_id': 660757126, 'comment_body': ""I agree with @vinitamurthi's suggestion -- this could probably inherit from the `PlatformParameterSingleton` so that we can reuse the getters and also lets us use more of the prod code."", 'comment_created': datetime.datetime(2021, 6, 29, 15, 57, 34, tzinfo=datetime.timezone.utc), 'commenter': 'jcqli', 'type': 'User'}, {'comment_id': 660759172, 'comment_body': ""I'd add the test constants you used in `FakePlatformParameterModule` and then getting the constants form this file so that it is more aligned with prod code."", 'comment_created': datetime.datetime(2021, 6, 29, 16, 0, 3, tzinfo=datetime.timezone.utc), 'commenter': 'jcqli', 'type': 'User'}, {'comment_id': 661133988, 'comment_body': '+1', 'comment_created': datetime.datetime(2021, 6, 30, 5, 7, 39, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 661134196, 'comment_body': 'Add a new line at EOF. Also I think these changes were accidentally added so you probably want to revert this change', 'comment_created': datetime.datetime(2021, 6, 30, 5, 8, 11, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 661134426, 'comment_body': 'Change comment to --> `Dagger module that provides values for individual Platform Parameters`', 'comment_created': datetime.datetime(2021, 6, 30, 5, 8, 44, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 661134662, 'comment_body': 'I am ignoring this file because it was reviewed in another PR. If theres anything I should see here please let me know!', 'comment_created': datetime.datetime(2021, 6, 30, 5, 9, 28, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 661134706, 'comment_body': 'Add a KDoc', 'comment_created': datetime.datetime(2021, 6, 30, 5, 9, 38, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 661134834, 'comment_body': 'I think this can be replaced with `ParameterValue.newBuilder().setString(...).build()`', 'comment_created': datetime.datetime(2021, 6, 30, 5, 10, 3, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 661134918, 'comment_body': '+1', 'comment_created': datetime.datetime(2021, 6, 30, 5, 10, 13, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 661135057, 'comment_body': '+1, only change is not to call it fake module because its not fake anymore', 'comment_created': datetime.datetime(2021, 6, 30, 5, 10, 38, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 661135291, 'comment_body': '+1', 'comment_created': datetime.datetime(2021, 6, 30, 5, 11, 12, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 661398357, 'comment_body': 'File added mistakenly. Reverting it', 'comment_created': datetime.datetime(2021, 6, 30, 12, 6, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 661530115, 'comment_body': 'File added mistakenly. Reverting it', 'comment_created': datetime.datetime(2021, 6, 30, 14, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 661535730, 'comment_body': 'Yes this is going to be implemented in the next PR for providing ""SplashScreenToast"" PlatformParameter', 'comment_created': datetime.datetime(2021, 6, 30, 14, 34, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 661540154, 'comment_body': 'I prefer using the name what you mentioned previously - ""TestPlatformParameterModule""', 'comment_created': datetime.datetime(2021, 6, 30, 14, 39, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 661543684, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 30, 14, 43, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 661545040, 'comment_body': 'Okay, Done', 'comment_created': datetime.datetime(2021, 6, 30, 14, 44, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 661549692, 'comment_body': 'I had used this same name ""mockPlatformParameterMap"" in the PlatformParameterSingletonTest. Should I chage it there too?', 'comment_created': datetime.datetime(2021, 6, 30, 14, 49, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 661551913, 'comment_body': 'I have changed it to mockStringPlatformParameter, just to be specific about String Parameter', 'comment_created': datetime.datetime(2021, 6, 30, 14, 51, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 661554140, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 30, 14, 54, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 661563666, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 30, 15, 4, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 661572599, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 30, 15, 14, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 661573018, 'comment_body': 'Okay, Done', 'comment_created': datetime.datetime(2021, 6, 30, 15, 15, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 661594133, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 30, 15, 38, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 661594909, 'comment_body': 'Yes you can ignore. Also I have listed the files which needs to be reviwed for this PR (ie the files that are not copied from previous one and are associated with this PR only) in the top most comment ', 'comment_created': datetime.datetime(2021, 6, 30, 15, 39, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 661599103, 'comment_body': 'Done. (In the previous PR-1.2, I have renamed the PlatformParameter Generic Interface to be PlatformParameterValue, therefore the KDoc is not able to identify that class right now. After when PR-1.2 gets merged, I will update this PR with develop to resolve this KDoc issue)', 'comment_created': datetime.datetime(2021, 6, 30, 15, 44, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 661599258, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 30, 15, 44, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 662241467, 'comment_body': 'Add an issue number for the TODO', 'comment_created': datetime.datetime(2021, 7, 1, 12, 23, 37, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 662242260, 'comment_body': '```suggestion\r\n  */\r\n```', 'comment_created': datetime.datetime(2021, 7, 1, 12, 24, 51, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 662242432, 'comment_body': '```suggestion\r\n*/\r\n```', 'comment_created': datetime.datetime(2021, 7, 1, 12, 25, 5, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 662244113, 'comment_body': 'Maybe rewrite this as : ```Retrieves a [PlatformParameter] of [String] type given a parameter name. Note that this function overrides the original implementation present in  [getStringPlatformParameter] so as to return a value from the [mockPlatformParameterMap] as opposed to the [platformParameterMap]```\r\nSomething on these lines. Same suggestion for the below methods', 'comment_created': datetime.datetime(2021, 7, 1, 12, 27, 40, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 662244342, 'comment_body': '```suggestion\r\n*/\r\n```', 'comment_created': datetime.datetime(2021, 7, 1, 12, 27, 58, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 662244490, 'comment_body': '```suggestion\r\n     */\r\n```', 'comment_created': datetime.datetime(2021, 7, 1, 12, 28, 13, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 662244643, 'comment_body': '```suggestion\r\n */\r\n```', 'comment_created': datetime.datetime(2021, 7, 1, 12, 28, 27, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 662245123, 'comment_body': '+1 I still see the parameters here. Can we move them into the fake module?', 'comment_created': datetime.datetime(2021, 7, 1, 12, 29, 5, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 662639107, 'comment_body': ""Also add tests that if you have a partial map it returns defaults or expected value (e.g. if the map only has integer or boolean, it returns those values but requesting a string returns the default string). You probably don't need all ways to do this but a couple to check that you get expected values or expected defaults."", 'comment_created': datetime.datetime(2021, 7, 1, 23, 3, 50, tzinfo=datetime.timezone.utc), 'commenter': 'jcqli', 'type': 'User'}, {'comment_id': 662639468, 'comment_body': ""I think it's fine in the singleton test, the reason being that in this test file we are explicitly testing with values and without so this makes it clear that this map has the explicit parameter values."", 'comment_created': datetime.datetime(2021, 7, 1, 23, 5, 1, tzinfo=datetime.timezone.utc), 'commenter': 'jcqli', 'type': 'User'}, {'comment_id': 662640329, 'comment_body': '+1 this is a really good description!', 'comment_created': datetime.datetime(2021, 7, 1, 23, 8, 1, tzinfo=datetime.timezone.utc), 'commenter': 'jcqli', 'type': 'User'}, {'comment_id': 662641204, 'comment_body': ""Oh I was actually saying move them from the test module to this file since in prod we're retrieving parameters and values from this constants file.\r\n\r\nWhat we probably really want to do is add a `TestPlatformParameterConstants` file for these test values or have them in the test file directly. @vinitamurthi WDYT?"", 'comment_created': datetime.datetime(2021, 7, 1, 23, 10, 52, tzinfo=datetime.timezone.utc), 'commenter': 'jcqli', 'type': 'User'}, {'comment_id': 663227482, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 2, 20, 11, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 663260561, 'comment_body': ""We have implmented new Testing approach now which doesn't require us to have a Fake Singleton at all. Kindly take a look"", 'comment_created': datetime.datetime(2021, 7, 2, 21, 49, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 663261458, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 2, 21, 53, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 663262700, 'comment_body': ""Since we only need to use these constants wherever the FakeModule is being used. So we can either \r\n- Shift these constants to FakeModule or\r\n- Include both the Fake Module and constants inside the TestClass because we won't test the Fake Module anywhere else in Future I guess"", 'comment_created': datetime.datetime(2021, 7, 2, 21, 57, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 663263182, 'comment_body': 'This file has been deleted as per the new approach', 'comment_created': datetime.datetime(2021, 7, 2, 21, 59, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 663263438, 'comment_body': 'This file has been deleted as per the new approach', 'comment_created': datetime.datetime(2021, 7, 2, 22, 0, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 663263467, 'comment_body': 'This file has been deleted as per the new approach', 'comment_created': datetime.datetime(2021, 7, 2, 22, 0, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 663263695, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 2, 22, 1, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 663263741, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 2, 22, 1, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 663263784, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 2, 22, 1, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 663266584, 'comment_body': 'Done. Added a single test case after removing the string parameter from the map and testing for its default value while other have the normal value. I guess it is explainatory enough. LMK if we need to add tests for other types too', 'comment_created': datetime.datetime(2021, 7, 2, 22, 12, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 663317036, 'comment_body': 'I am okay with either approach as long as we move it out of this file because if I understand correctly, this is in the util module which will be included in the prod build. But this seems to be only for tests, so we should move it to  `utility/src/test/...` or in `testing/...`\r\nHope this makes sense! \r\n ', 'comment_created': datetime.datetime(2021, 7, 3, 4, 49, 16, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 663324943, 'comment_body': 'Nice, looks good!', 'comment_created': datetime.datetime(2021, 7, 3, 6, 20, 35, tzinfo=datetime.timezone.utc), 'commenter': 'jcqli', 'type': 'User'}, {'comment_id': 663325116, 'comment_body': 'maybe `testModule_initPlatformParameterMapPartially_returnsExpectedDefaultsAndValues` since this checks all the types.', 'comment_created': datetime.datetime(2021, 7, 3, 6, 22, 41, tzinfo=datetime.timezone.utc), 'commenter': 'jcqli', 'type': 'User'}, {'comment_id': 663325254, 'comment_body': ""`testStringPlatformParameterProvider` or even `stringPlatformParameterProvider` since it's not the object, it's a provider for the object (ditto elsewhere)."", 'comment_created': datetime.datetime(2021, 7, 3, 6, 23, 55, tzinfo=datetime.timezone.utc), 'commenter': 'jcqli', 'type': 'User'}, {'comment_id': 663325378, 'comment_body': ""Was it giving build errors before? I don't see it used in this file but maybe it's an indirect dependency."", 'comment_created': datetime.datetime(2021, 7, 3, 6, 25, 41, tzinfo=datetime.timezone.utc), 'commenter': 'jcqli', 'type': 'User'}, {'comment_id': 663330078, 'comment_body': ""Let's try to avoid using `// ktlint-disable` max-line-length and we can try to keep things under 100 char long. "", 'comment_created': datetime.datetime(2021, 7, 3, 7, 16, 8, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 663330129, 'comment_body': '```suggestion\r\n      fun build(): TestApplicationComponent\r\n```', 'comment_created': datetime.datetime(2021, 7, 3, 7, 16, 45, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 663330151, 'comment_body': '```suggestion\r\n    private val component: TestApplicationComponent by lazy {\r\n```', 'comment_created': datetime.datetime(2021, 7, 3, 7, 16, 56, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 663330301, 'comment_body': 'same with `domain/src/test/java/org/oppia/android/domain/platformparameter/PlatformParameterSingletonTest.kt` file', 'comment_created': datetime.datetime(2021, 7, 3, 7, 18, 34, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 663387419, 'comment_body': '+1', 'comment_created': datetime.datetime(2021, 7, 3, 17, 11, 55, tzinfo=datetime.timezone.utc), 'commenter': 'jcqli', 'type': 'User'}, {'comment_id': 663388011, 'comment_body': ""Agree, don't want in prod. I see it in the test module so that's fine for it!"", 'comment_created': datetime.datetime(2021, 7, 3, 17, 18, 1, tzinfo=datetime.timezone.utc), 'commenter': 'jcqli', 'type': 'User'}, {'comment_id': 663437619, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 4, 3, 0, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 663437837, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 4, 3, 3, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 663437952, 'comment_body': 'This is here because we have mentioned this class in the KDoc. ', 'comment_created': datetime.datetime(2021, 7, 4, 3, 4, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 663437971, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 4, 3, 5, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 663438032, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 4, 3, 6, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}]","[{'commit_sha': '369e8e5d726c5d1916e356a54e31bd59a69f7f9d', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a2a006af01506777a00680701e1024cbc7fe6e49', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1b75c915812e712f83621ea052c1eadefe96941', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '43738f4eb6a9909d4ba7bed39ae35b099de51ade', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c2b4b04f974051dcc8b90931880a05272d039d5a', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57109d68c53046103fcb1fe871c18b1e25086241', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '666e14ad26324b04168536f27357626ff47cac83', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5929d60610f10678771f039497bb0ef084d3d99d', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd558a3fa92e03805af1ec329bb9f83f83ea4984', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff6515cc5e0d42717a27fb3a32120ccc398a8b88', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d03b8f874d4ed8b6b538a0af5779a0ce989a48d', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96bc9b51603d27ce92eff4f61f8701b5b9da2346', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '18ab909c4960bf1f0961e42210d0db18e729c849', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '918bdfc0c08073307e0ab8736dbb272dba897cb7', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36bebc1b95eaf28358c52c40616c52a6f418be11', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fae6f90a241d7029b0363abbf35ee99e17ecaa74', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b50d3c237f9ac5b46a51a77e3361162afe8f3f8c', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}]",Arjun Gupta,64064110,arjupta.90@gmail.com,User,,26,,35,44
685299491,Fix #3386: Introduce a PlatformParameterController,"<!--
  - Thanks for submitting code to Oppia! Please fill out the following as part of
  - your pull request so we can review your code more easily.
  -->

## Explanation
<!--
  - Explain what your PR does. If this PR fixes an existing bug, please include
  - ""Fixes #bugnum:"" in the explanation so that GitHub can auto-close the issue
  - when this PR is merged.
  -->

Fixes #3386
Introduce a domain level Controller for Platform Parameter. This PR is replica of https://github.com/oppia/oppia-android/pull/3387 (it was completely approved but got closed accidentally).

## Checklist
<!-- Please tick the relevant boxes by putting an ""x"" in them. -->
- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The PR explanation includes the words ""Fixes #bugnum: ..."" (or ""Fixes part of #bugnum"" if the PR only partially fixes an issue).
- [x] The PR follows the [style guide](https://github.com/oppia/oppia-android/wiki/Coding-style-guide).
- [x] The PR does not contain any unnecessary auto-generated code from Android Studio.
- [x] The PR is made from a branch that's **not** called ""develop"".
- [x] The PR is made from a branch that is up-to-date with ""develop"".
- [x] The PR's branch is based on ""develop"" and not on any other branch.
- [x] The PR is **assigned** to an appropriate reviewer in both the **Assignees** and the **Reviewers** sections.
",True,3430,https://api.github.com/repos/oppia/oppia-android/pulls/3430,https://github.com/oppia/oppia-android/pull/3430,closed,333,0,2,5,2,0,1,1,[{'name': 'PR: LGTM'}],2021-07-07 15:30:33+00:00,2021-07-08 02:40:48+00:00,40215.0,11:10:15,[],"[{'commit_sha': 'b2c1ec84bac254a64d98de9aa89f7108d20a3147', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1edd03605ca654f40ed49a9815ef032a457ce7d1', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '995de9eecab2c3b1a4adc1414f8cc74ed06cf48e', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a04e7f7370a4b7eaf267f9fa35c3f096144f094', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1258df8b2d128398350001f9c9f20a7410908c16', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}]",Arjun Gupta,64064110,arjupta.90@gmail.com,User,,26,,35,44
685705345,Fix #3401: Introduced SplashScreenWelcomeMsg PlatformParameter,"<!--
  - Thanks for submitting code to Oppia! Please fill out the following as part of
  - your pull request so we can review your code more easily.
  -->

## Explanation
<!--
  - Explain what your PR does. If this PR fixes an existing bug, please include
  - ""Fixes #bugnum:"" in the explanation so that GitHub can auto-close the issue
  - when this PR is merged.
  -->

Fixes #3401 
This PR introduces SplashScreenWelcomeMsg PlatformParameter for testing the implementation of Compile Time Platform Parameters. Also this PR is a replica of https://github.com/oppia/oppia-android/pull/3405

## Screenshots
![Screenshot 2021-07-07 121030](https://user-images.githubusercontent.com/64064110/124712195-9d88d200-df1c-11eb-929c-a2f6b317ee56.png)

| Test 1 | Test 2 |
|:-:|:-:|
|![Screenshot_1625639975](https://user-images.githubusercontent.com/64064110/124712138-89dd6b80-df1c-11eb-8f62-9aad1a1eef2d.png) | ![Screenshot_1625639982](https://user-images.githubusercontent.com/64064110/124712149-8d70f280-df1c-11eb-9d4a-b1a9cf975f7a.png) |

## Checklist
<!-- Please tick the relevant boxes by putting an ""x"" in them. -->
- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The PR explanation includes the words ""Fixes #bugnum: ..."" (or ""Fixes part of #bugnum"" if the PR only partially fixes an issue).
- [x] The PR follows the [style guide](https://github.com/oppia/oppia-android/wiki/Coding-style-guide).
- [x] The PR does not contain any unnecessary auto-generated code from Android Studio.
- [x] The PR is made from a branch that's **not** called ""develop"".
- [x] The PR is made from a branch that is up-to-date with ""develop"".
- [x] The PR's branch is based on ""develop"" and not on any other branch.
- [x] The PR is **assigned** to an appropriate reviewer in both the **Assignees** and the **Reviewers** sections.
",True,3441,https://api.github.com/repos/oppia/oppia-android/pulls/3441,https://github.com/oppia/oppia-android/pull/3441,closed,547,62,104,10,3,6,0,1,[],2021-07-08 05:47:29+00:00,2021-07-08 23:38:17+00:00,64248.0,17:50:48,"[{'comment_id': 665890336, 'comment_body': 'Maybe `processPlatformParameters` since ""loading status"" seems like a UI thing.', 'comment_created': datetime.datetime(2021, 7, 8, 5, 55, 40, tzinfo=datetime.timezone.utc), 'commenter': 'jcqli', 'type': 'User'}, {'comment_id': 665891285, 'comment_body': ""Write as // comment since we don't need a public KDoc."", 'comment_created': datetime.datetime(2021, 7, 8, 5, 57, 58, tzinfo=datetime.timezone.utc), 'commenter': 'jcqli', 'type': 'User'}, {'comment_id': 665912678, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 8, 6, 44, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 665912721, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 8, 6, 44, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 666333526, 'comment_body': 'Add espresso screenshot test result', 'comment_created': datetime.datetime(2021, 7, 8, 16, 9, 47, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 666334600, 'comment_body': 'They are already added in the PR comment @anandwana001 \r\n', 'comment_created': datetime.datetime(2021, 7, 8, 16, 11, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}]","[{'commit_sha': 'dd222ae9aa8f83afadb9fc272d35fc326553a0e0', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66cee530405d97f37be5268d6a5b7a7d6c4cd017', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a537cf69d3c24bb46caf7d459712bfbcd40850bc', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '91d9664444536cc6b85669933f9360b36450d369', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f28be7c1ce4b9ebff00bb8fe9a9b8ddeb8f4853', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '030a5b66058787fba992ab8ec9ecc4747e9596c4', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73a3b30d4746085484a0e203e8dfe12afdf6448f', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '01d02b06551a08199037879ffadc4426de91ac5c', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ab069e70eed3b7d48a1e8bf8358a8a55c9a61cd', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e2f462fbb1c7d1b4fb1f07bbdbcac65efbcbe23', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}]",Arjun Gupta,64064110,arjupta.90@gmail.com,User,,26,,35,44
691829573,Fix #3485: Added GaeModels along with PlatformParameterService and its Mock,"<!--
  - Thanks for submitting code to Oppia! Please fill out the following as part of
  - your pull request so we can review your code more easily.
  -->

## Explanation
<!--
  - Explain what your PR does. If this PR fixes an existing bug, please include
  - ""Fixes #bugnum:"" in the explanation so that GitHub can auto-close the issue
  - when this PR is merged.
  -->
Fixes #3485 
PlatformParameter API & Gae Models for hooking up the backend and including Mock Platform Parameter Service for representing fake network response.

## Checklist
<!-- Please tick the relevant boxes by putting an ""x"" in them. -->
- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The PR explanation includes the words ""Fixes #bugnum: ..."" (or ""Fixes part of #bugnum"" if the PR only partially fixes an issue).
- [x] The PR follows the [style guide](https://github.com/oppia/oppia-android/wiki/Coding-style-guide).
- [x] The PR does not contain any unnecessary auto-generated code from Android Studio.
- [x] The PR is made from a branch that's **not** called ""develop"".
- [x] The PR is made from a branch that is up-to-date with ""develop"".
- [x] The PR's branch is based on ""develop"" and not on any other branch.
- [x] The PR is **assigned** to an appropriate reviewer in both the **Assignees** and the **Reviewers** sections.
",True,3489,https://api.github.com/repos/oppia/oppia-android/pulls/3489,https://github.com/oppia/oppia-android/pull/3489,closed,509,36,18,22,5,78,0,1,[],2021-07-17 03:42:22+00:00,2021-08-04 11:09:12+00:00,1582010.0,"18 days, 7:26:50","[{'comment_id': 672722015, 'comment_body': ""Maybe `GaePlatformParameterList` so it's more distinct from `GaePlatformParameter`?"", 'comment_created': datetime.datetime(2021, 7, 20, 0, 29, 43, tzinfo=datetime.timezone.utc), 'commenter': 'jcqli', 'type': 'User'}, {'comment_id': 672722550, 'comment_body': 'Is there no backend for this yet? I had thought the backend was done in a previous project.', 'comment_created': datetime.datetime(2021, 7, 20, 0, 31, 11, tzinfo=datetime.timezone.utc), 'commenter': 'jcqli', 'type': 'User'}, {'comment_id': 672827144, 'comment_body': 'Newline between the summary fragment & at-aprams.', 'comment_created': datetime.datetime(2021, 7, 20, 5, 57, 36, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 672827344, 'comment_body': ""```suggestion\r\n   * @return the [PlatformParameterService] implementation\r\n```\r\n\r\nNit: at-params don't end in punctuation unless they're multi-lined."", 'comment_created': datetime.datetime(2021, 7, 20, 5, 58, 2, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 672827580, 'comment_body': '```suggestion\r\n/** Service that provides access to the Oppia platform parameter endpoint. */\r\n```', 'comment_created': datetime.datetime(2021, 7, 20, 5, 58, 36, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 672827969, 'comment_body': ""There is: https://github.com/oppia/oppia/blob/develop/core/controllers/platform_feature.py#L28.\r\n\r\nOr, is this blocking on updating that API? (in which case, shouldn't that happen first?)"", 'comment_created': datetime.datetime(2021, 7, 20, 5, 59, 35, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 672828318, 'comment_body': ""platform_type also should be populated. It's important for the backend to know the request is originating from Android."", 'comment_created': datetime.datetime(2021, 7, 20, 6, 0, 19, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 672828544, 'comment_body': 'Nit: platform & parameter should be lowercase here.', 'comment_created': datetime.datetime(2021, 7, 20, 6, 0, 49, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 672828801, 'comment_body': ""Please add KDocs for these public vals. It may be useful to link to Oppia's backend domain objects to help provide context for these."", 'comment_created': datetime.datetime(2021, 7, 20, 6, 1, 20, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 672828908, 'comment_body': 'Ditto here--should have KDoc.', 'comment_created': datetime.datetime(2021, 7, 20, 6, 1, 37, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 672829053, 'comment_body': ""Perhaps instead: ``Data class for a list of [GaePlatformParameter]s evaluated by Oppia's backend.``"", 'comment_created': datetime.datetime(2021, 7, 20, 6, 1, 57, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 672830272, 'comment_body': 'In general, we want to avoid control flow in tests since it makes them harder to verify as correct.\r\n\r\nInstead, I suggest having separate tests for each case we want to verify: string, integer, and boolean. Further, you can also have a separate initial test to verify that the response for version 1 is successful to avoid needing to repeat that assertion in each test.', 'comment_created': datetime.datetime(2021, 7, 20, 6, 4, 46, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 672830845, 'comment_body': 'Just ``listOf`` should be sufficient here.', 'comment_created': datetime.datetime(2021, 7, 20, 6, 6, 17, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 672831258, 'comment_body': 'I suggest instead splitting these into separate files for each annotation, and pairing the name/default/server value with those files. You can then add KDocs for each one to explain what that test parameter is.', 'comment_created': datetime.datetime(2021, 7, 20, 6, 7, 14, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 672831360, 'comment_body': 'Perhaps instead: ``TEST_STRING_PARAM_SERVER_VALUE``? Note it would be helpful in the KDoc I suggest adding per the above to explain that this value is only used if the mock parameter service is set up in a test (& how to do that, e.g. by adding its corresponding module).', 'comment_created': datetime.datetime(2021, 7, 20, 6, 7, 27, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 673049852, 'comment_body': '@BenHenning and @jcqli currently we have an endpoint in Oppia for platform parameters but making any changes to it was discussed to be put in the Future Works in the Proposal. Thats why I have mentioned this as TODO becuase we have not confirmed that whether we will be sending version number to the backend or the names of paramaters to be returned in the response. //cc: @vinitamurthi ', 'comment_created': datetime.datetime(2021, 7, 20, 11, 48, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 673050514, 'comment_body': 'Yes, that will be better', 'comment_created': datetime.datetime(2021, 7, 20, 11, 49, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 673062459, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 20, 12, 7, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 673062721, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 20, 12, 8, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 673063399, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 20, 12, 9, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 673076170, 'comment_body': 'Done. \r\nThese are the reference files for the allowed value of platform_type\r\n\r\n- [https://github.com/oppia/oppia/blob/b1846a839bfb72a5430031fcd2e27638004ad92b/core/domain/platform_parameter_domain.py#L78](https://github.com/oppia/oppia/blob/b1846a839bfb72a5430031fcd2e27638004ad92b/core/domain/platform_parameter_domain.py#L78)\r\n- [https://github.com/oppia/oppia/blob/b1846a839bfb72a5430031fcd2e27638004ad92b/assets/constants.ts#L5830](https://github.com/oppia/oppia/blob/b1846a839bfb72a5430031fcd2e27638004ad92b/assets/constants.ts#L5830)\r\n', 'comment_created': datetime.datetime(2021, 7, 20, 12, 28, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 673077046, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 20, 12, 29, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 673110057, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 20, 13, 13, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 673112642, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 20, 13, 17, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 673173105, 'comment_body': ""Done. \r\nAs currently this response structure is not followed in the Oppia backend so we can't have any reference to such objects."", 'comment_created': datetime.datetime(2021, 7, 20, 14, 25, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 673173373, 'comment_body': 'Done.\r\nDitto as above', 'comment_created': datetime.datetime(2021, 7, 20, 14, 25, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 673203007, 'comment_body': 'Done. Though I am not sure about the difficulty to test, can you explain a bit more?', 'comment_created': datetime.datetime(2021, 7, 20, 14, 57, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 673248430, 'comment_body': 'Ack, make an issue for it an include the issue # here then.', 'comment_created': datetime.datetime(2021, 7, 20, 15, 49, 45, tzinfo=datetime.timezone.utc), 'commenter': 'jcqli', 'type': 'User'}, {'comment_id': 673294663, 'comment_body': 'I am confused about this suggested change. Can you explain what is the need to split the annotations into a separate file from the constants. \r\nAlso these are just Test constants so I guess it will be okay to put them in one file and we can follow this suggestion with the Prod Constants.', 'comment_created': datetime.datetime(2021, 7, 20, 16, 49, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 673297644, 'comment_body': 'I am taking up on the suggestion for renaming the constant but for the latter part (documenting their use) I will include it in the Wiki.', 'comment_created': datetime.datetime(2021, 7, 20, 16, 52, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 673325905, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 20, 17, 19, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 673376893, 'comment_body': ""Each annotation usually is its own file (ex: https://github.com/oppia/oppia-android/blob/develop/domain/src/main/java/org/oppia/android/domain/feedbackreporting/ReportSchemaVersion.kt)\r\nThat said, it also makes sense to me to keep them altogether in this file as they're only test constants but I'll defer to Ben on his thoughts on this."", 'comment_created': datetime.datetime(2021, 7, 20, 18, 23, 43, tzinfo=datetime.timezone.utc), 'commenter': 'jcqli', 'type': 'User'}, {'comment_id': 673716626, 'comment_body': ""This actually seems concerning to me. We shouldn't be setting up the model layer for an endpoint format that doesn't exist. Either these API endpoint representations should match the current backend, or the current backend should be updated to fit these. Otherwise, the system isn't going to work. 'Future work' should be optional, not required, pieces of work beyond the defined requirements for the system to work within spec."", 'comment_created': datetime.datetime(2021, 7, 21, 7, 9, 39, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 674706011, 'comment_body': 'Yeah understood now. I will include this thing in the Wiki (as a step while creating a Platform Parameter). Other than that I also prefer to keep test constants in one file.', 'comment_created': datetime.datetime(2021, 7, 22, 11, 17, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 674738093, 'comment_body': 'Maybe change to `testPlatformParameterService_getPlatformParameterUsingMockService_verifyNonNullResponse` or `testPlatformParameterService_getPlatformParameterUsingMockService_verifySuccessfulResponse` to make it clearer', 'comment_created': datetime.datetime(2021, 7, 22, 12, 10, 56, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 674738801, 'comment_body': 'Do we need a test for a failure case? For e.g. getting a wrong version number?', 'comment_created': datetime.datetime(2021, 7, 22, 12, 11, 59, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 674784146, 'comment_body': 'Okay sure', 'comment_created': datetime.datetime(2021, 7, 22, 13, 14, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 674787213, 'comment_body': ""A failed response will be handled by Work Manager and not the service itself. Also while testing we use MockRetrofit instance with 100% success rate. So I guess we don't need any failure handling tests."", 'comment_created': datetime.datetime(2021, 7, 22, 13, 18, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 674795295, 'comment_body': 'named arguments will look good clean here for function `getPlatformParametersByVersion`', 'comment_created': datetime.datetime(2021, 7, 22, 13, 28, 37, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 674858696, 'comment_body': 'Done. PTAL @anandwana001 ', 'comment_created': datetime.datetime(2021, 7, 22, 14, 34, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 675354465, 'comment_body': '2 spaces before this TODO (it should be aligned with other members of the class).', 'comment_created': datetime.datetime(2021, 7, 23, 7, 19, 16, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 675354799, 'comment_body': 'This method ought to have a KDoc. I suggest explaining briefly what this does, but if possible I suggest including a permalink to the Oppia web documentation for this endpoint.', 'comment_created': datetime.datetime(2021, 7, 23, 7, 19, 57, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 675356406, 'comment_body': 'More idiomatic:\r\n\r\n```suggestion\r\n    assertThat(responseBody).containsEntry(TEST_STRING_PARAM_NAME, TEST_STRING_PARAM_SERVER_VALUE)\r\n```\r\n\r\n(May need line wrapping)\r\n\r\nDitto for the other tests.', 'comment_created': datetime.datetime(2021, 7, 23, 7, 23, 13, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 675356951, 'comment_body': 'I suggest also testing:\r\n- Different payloads based on different parameters passed in\r\n- Cases when the query fails and an error is thrown (such as 4xx and 5xx errors)', 'comment_created': datetime.datetime(2021, 7, 23, 7, 24, 26, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 675357977, 'comment_body': 'You may need additional methods in this class orchestrate it for specific scenarios (like arranging the parameter map, handling cases with different parameters, introducing errors, etc. that we will want to introduce in some test cases.\r\n\r\nAlso, the different behaviors introduced into this mock ought to be tested with a dedicated MockPlatformParameterServiceTest suite.', 'comment_created': datetime.datetime(2021, 7, 23, 7, 26, 32, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 675359032, 'comment_body': ""All public members should have KDocs--that's actually expected everywhere in the codebase. It also solves a different purpose than the wiki: wikis provide high-level context or instructions, not specific details on how to use a particular value or component, or what that thing represents."", 'comment_created': datetime.datetime(2021, 7, 23, 7, 28, 31, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 675360953, 'comment_body': 'What benefit do we gain from keeping them in one file? I think we can evaluate the merits of both approaches.\r\n\r\nI lean toward the convention of keeping files as specific as possible (oftentimes having overly generic packages/classes/utilities can result in them growing unboundedly due to not having a clear idea what should go into that component; maintaining specific files helps keep things focused).\r\n\r\nI also find the current name confusing. This file really contains annotations and constants, not just contains. Either we should rename it, or keep the annotations and constants in 2 separate files. If we do the latter, I suspect organizing the annotations as individual files with their constants included will be clearer and easier to find when searching for code vs. the alternative considerations. This is another benefit from the per-file convention: it makes code discovery easier.', 'comment_created': datetime.datetime(2021, 7, 23, 7, 32, 8, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 675363548, 'comment_body': 'Sure. One benefit you can derive from automated tests is that they verify production code is working correctly. However, what verifies that the test itself is correct? It\'s not reasonable to write tests for the test, so we need to use humans to verify that the tests are correct (i.e. by code reviews, ensuring they pass/fail when expected, and other processes). However, we have a problem: the fact that humans make a lot of mistakes is the reason we all need tests in the first place. How can we rely on ourselves to ensure tests are also correct?\r\n\r\nGenerally, it comes down to following different coding practices that make tests as easy to understand as possible so that we can quite literally ""run them in our heads"" when reading them. A large part of test correctness validation comes from code review (unlike production code which comes from running the code and verifying the tests we verified as correct pass against that production code).\r\n\r\nSomething like control flow is both easy to mess up when writing it, and easy to miss mistakes for reviewers. For that reason, we try to avoid it to make the tests clearer. You may notice a general principle of preferring code de-duplication for production code, but code duplication for tests since generic coding patterns that reduce code duplication can be complicated and difficult to verify as a human with confidence.\r\n\r\nDoes this help provide more context into the \'why\'?', 'comment_created': datetime.datetime(2021, 7, 23, 7, 37, 26, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 675365449, 'comment_body': 'Also, this should probably say something more like ""Change the URL to point to the updated endpoint.""\r\n\r\nThe current backend _is_ ready, we just want to change it.', 'comment_created': datetime.datetime(2021, 7, 23, 7, 41, 16, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 675365846, 'comment_body': 'We ought to verify that this is being set correctly via the mock.', 'comment_created': datetime.datetime(2021, 7, 23, 7, 42, 1, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 675843344, 'comment_body': 'Yeah it was a great explanation. Thank you very much', 'comment_created': datetime.datetime(2021, 7, 23, 20, 15, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 675854710, 'comment_body': 'Yeah this explaination helps us to understand the need to have separate files. Including this change', 'comment_created': datetime.datetime(2021, 7, 23, 20, 40, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 675867992, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 23, 21, 11, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 675869110, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 23, 21, 13, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 675881515, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 23, 21, 46, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 675885321, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 23, 21, 58, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 675988689, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 24, 11, 40, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 675988845, 'comment_body': ""A failed response will be handled by Work Manager and not the service itself. Also while testing we use MockRetrofit instance with 100% success rate. So I guess we don't need any failure handling tests."", 'comment_created': datetime.datetime(2021, 7, 24, 11, 42, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 675988892, 'comment_body': 'Ditto as above', 'comment_created': datetime.datetime(2021, 7, 24, 11, 42, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 679655387, 'comment_body': '```suggestion\r\n   * @param version app version at from build time\r\n   * @param platformType type of client from which the request is made. It should have\r\n   *     a default value of ""Android"" for Oppia-Android.\r\n   * @return platform parameter values mapped to their names\r\n```\r\n\r\nMain changes:\r\n- Type information is not explicitly defined (since Kotlin is a strongly typed language, we just need to look at the function declaration to get the types)\r\n- at-param clauses stay together\r\n- No \'-\'\r\n- Param fragments don\'t end in punctuation unless they are multi-sentence\r\n- KDoc continuation for at-params is +4 spaces', 'comment_created': datetime.datetime(2021, 7, 30, 5, 20, 34, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 679655518, 'comment_body': 'Can you pin this to a specific commit hash rather than referencing develop? If the file moves or is renamed in the future, this doc string will become invalid.', 'comment_created': datetime.datetime(2021, 7, 30, 5, 21, 3, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 679655711, 'comment_body': '```suggestion\r\n   * Retrieves map of platform parameters where the keys corresponds to parameter\r\n```\r\n\r\n""This function"" is implied for the summary fragment and can be omitted (in the same way that ""This class"" is omitted from class-level KDoc summary fragments).', 'comment_created': datetime.datetime(2021, 7, 30, 5, 21, 41, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 679656603, 'comment_body': 's/Platform Parameter/platform parameter/\r\n\r\nand\r\n\r\ns/Test String/test string/\r\n\r\nIn general, we should only capitalize things which are names. Ditto everywhere else in this PR, plus similar cases (like Integer, Boolean, etc.).', 'comment_created': datetime.datetime(2021, 7, 30, 5, 24, 10, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 679656916, 'comment_body': '```suggestion\r\nPackage for test-specific platform parameter utilities and helpers.\r\n```', 'comment_created': datetime.datetime(2021, 7, 30, 5, 25, 11, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 679657292, 'comment_body': ""You're welcome--I'm glad that helped."", 'comment_created': datetime.datetime(2021, 7, 30, 5, 26, 31, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 679659033, 'comment_body': ""I think that's reasonable, though testing failure cases via the mock probably is valuable (see my comment below)."", 'comment_created': datetime.datetime(2021, 7, 30, 5, 31, 34, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 679659711, 'comment_body': ""Which comment are you referring to? I think the needs of testing this mock are quite different than for PlatformParameterService. In particular, we do need a way to simulate different conditions including failures to ensure that the downstream work manager PR handles them correctly. The mock is used to orchestrate these.\r\n\r\nWhile you may not need to add that functionality to the mock in this PR (it could be added in the later PR when it's needed), we should still have a test suite for verifying that this mock properly sets up the platform parameter service. Testing test utilities is pretty important--test utilities with bugs can result in false passing/failing suites for tests that depend on them."", 'comment_created': datetime.datetime(2021, 7, 30, 5, 33, 34, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 682333376, 'comment_body': '```suggestion\r\n    ""//testing/src/main/java/org/oppia/android/testing/network"",\r\n```\r\n\r\nCan be simplified.', 'comment_created': datetime.datetime(2021, 8, 4, 6, 46, 36, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 682380519, 'comment_body': 'Understood. Added the Tests for MockPlatformParameterService for now', 'comment_created': datetime.datetime(2021, 8, 4, 7, 58, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 682388997, 'comment_body': 'Understood. Done', 'comment_created': datetime.datetime(2021, 8, 4, 8, 9, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 682391645, 'comment_body': 'Done. Pointing to the latest commit for this file', 'comment_created': datetime.datetime(2021, 8, 4, 8, 13, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 682392696, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 4, 8, 14, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 682393652, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 4, 8, 16, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 682394772, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 4, 8, 17, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 682464422, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 4, 9, 50, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 682483487, 'comment_body': ""Did you mean to change this to point to the test file? That's not expected, I think, since tests don't technically define the actual contract of a component's interface."", 'comment_created': datetime.datetime(2021, 8, 4, 10, 17, 23, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 682484292, 'comment_body': 'Also: keep in mind you can just use the first ~6 characters of the hash to keep it shorter (to check, just navigate to the shorter URL & make sure it works correctly).', 'comment_created': datetime.datetime(2021, 8, 4, 10, 18, 36, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 682486886, 'comment_body': ""No I didn't meant to point to test file. My mistake. Changing it to actual code file. (https://github.com/oppia/oppia/blob/50f5cffdfccf19dad4d7144addb44a74cad23d3c/core/controllers/platform_feature.py)"", 'comment_created': datetime.datetime(2021, 8, 4, 10, 22, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}]","[{'commit_sha': '405fc4478296c46217fdae78e6e5319a49c28858', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c51a1846b84370fcde4cde0d7e88a34e3920ab23', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd7a01c57ee49c62faff6809daa418dbb30afa493', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b2aa5536e5e4ba2338807d7299bcc230149ef642', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3de99ed12113952e0860e353a88562600577f7ab', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc6e47ae773dbd9eb7cfa9179de56ef541637378', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1879820820b2df4f5f2de78c3d674377e198dc11', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44dabec547df0a273281736774e06a6429ffcba0', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ffcc93acea3b27022ecc283a1239d6c4d054a514', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e36b11b827f4bc277c0592e58f31aac7c95af0c2', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '235208a82d918638eaadb6f50d40509a0d73af25', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '779282d766380170e08d8b1ee5f6b43db53aa5e7', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0309e33ab2671030da6d115c5e5d9a9ba9fc37d5', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8586e6f7f8a4f1d6006058d5984be25a5dc654b8', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f59305d8102ca564c424608baad2c5f3e8dffdab', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c642b474ef525fe8a37536445a6d897613a9cc67', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd354c0567fa8679ef5161bf4f8927161304058a5', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af760faeb4bbdb90e30c10c7678bbf0305adab13', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f1efe7e3121471b96f6cb703fa32195d468c78a', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4fa3761e31b701f14932ca86c56c2c00e35c1fa6', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '54c595bd0b1e8303285b1588bf34847d2c51e13b', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c02a0ec3c52cfe7e73dd85731464409700db62fe', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}]",Arjun Gupta,64064110,arjupta.90@gmail.com,User,,26,,35,44
711273520,Fix #3674: Added new test cases in PlatformParameterIntegrationTest,"<!--
  - Thanks for submitting code to Oppia! Please fill out the following as part of
  - your pull request so we can review your code more easily.
  -->

## Explanation
<!--
  - Explain what your PR does. If this PR fixes an existing bug, please include
  - ""Fixes #bugnum:"" in the explanation so that GitHub can auto-close the issue
  - when this PR is merged.
  -->
Fixed #3674 
Updated PlatformParameterIntegrationTest to include test based on refreshing with SyncUpWorker.

Target PR date: 11 August 2021
Target completion date: 16 August 2021
## Checklist
<!-- Please tick the relevant boxes by putting an ""x"" in them. -->
- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The PR explanation includes the words ""Fixes #bugnum: ..."" (or ""Fixes part of #bugnum"" if the PR only partially fixes an issue).
- [x] The PR follows the [style guide](https://github.com/oppia/oppia-android/wiki/Coding-style-guide).
- [x] The PR does not contain any unnecessary auto-generated code from Android Studio.
- [x] The PR is made from a branch that's **not** called ""develop"".
- [x] The PR is made from a branch that is up-to-date with ""develop"".
- [x] The PR's branch is based on ""develop"" and not on any other branch.
- [x] The PR is **assigned** to an appropriate reviewer in both the **Assignees** and the **Reviewers** sections.
",True,3675,https://api.github.com/repos/oppia/oppia-android/pulls/3675,https://github.com/oppia/oppia-android/pull/3675,closed,239,24,8,93,6,27,1,1,[{'name': 'PR: LGTM'}],2021-08-12 17:09:21+00:00,2021-08-21 09:17:51+00:00,749310.0,"8 days, 16:08:30","[{'comment_id': 688646791, 'comment_body': 'Why do we use this instead of @Inject for the context?', 'comment_created': datetime.datetime(2021, 8, 13, 16, 43, 13, tzinfo=datetime.timezone.utc), 'commenter': 'jcqli', 'type': 'User'}, {'comment_id': 688651956, 'comment_body': 'Recommend removing the comment and changing the `TEST_OBJECT_AS_PARAM_VALUE` => `TEST_UNSUPPORTED_OBJECT_AS_PARAM_VALUE`', 'comment_created': datetime.datetime(2021, 8, 13, 16, 52, 2, tzinfo=datetime.timezone.utc), 'commenter': 'jcqli', 'type': 'User'}, {'comment_id': 688652466, 'comment_body': 'Can probably remove this comment.', 'comment_created': datetime.datetime(2021, 8, 13, 16, 52, 57, tzinfo=datetime.timezone.utc), 'commenter': 'jcqli', 'type': 'User'}, {'comment_id': 689072113, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 15, 11, 7, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 689072125, 'comment_body': 'Yeah, Done.', 'comment_created': datetime.datetime(2021, 8, 15, 11, 7, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 689252410, 'comment_body': 'Add a KDoc for this function now that you have opened it up!', 'comment_created': datetime.datetime(2021, 8, 16, 5, 45, 56, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 689253317, 'comment_body': 'Maybe I didnt completely understand -- why are we updating this here with an empty list? Dont we want the DB to have some initial values? Or if you are using the initial value as empty, lets instead have the initial value explicitly as false ', 'comment_created': datetime.datetime(2021, 8, 16, 5, 48, 46, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 689385239, 'comment_body': 'Changed it to @Inject format. I was debugging with InstrumentationRegistry I guess.', 'comment_created': datetime.datetime(2021, 8, 16, 9, 37, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 689398588, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 16, 9, 57, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 689404982, 'comment_body': 'Yeah we can have a false value in the database which will be better proof that the values changed.', 'comment_created': datetime.datetime(2021, 8, 16, 10, 7, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 689697557, 'comment_body': 'Can this fit on a a single line?\r\n```suggestion\r\n    listOf<PlatformParameter>(mockSplashScreenWelcomeMsgParam)\r\n```', 'comment_created': datetime.datetime(2021, 8, 16, 16, 46, 42, tzinfo=datetime.timezone.utc), 'commenter': 'jcqli', 'type': 'User'}, {'comment_id': 689698626, 'comment_body': 'For clarity, probably can do:\r\n```suggestion\r\n    launch(SplashTestActivity::class.java).use { scenario ->\r\n```\r\n\r\nand also use `activity` below, ditto elsewhere.', 'comment_created': datetime.datetime(2021, 8, 16, 16, 48, 13, tzinfo=datetime.timezone.utc), 'commenter': 'jcqli', 'type': 'User'}, {'comment_id': 689698864, 'comment_body': '```suggestion\r\n      scenario.onActivity { activity.splashTestActivityPresenter.loadPlatformParameters() }\r\n```', 'comment_created': datetime.datetime(2021, 8, 16, 16, 48, 35, tzinfo=datetime.timezone.utc), 'commenter': 'jcqli', 'type': 'User'}, {'comment_id': 689819938, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 16, 20, 0, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 689820053, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 16, 20, 0, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 689820116, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 16, 20, 0, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 690205816, 'comment_body': ""shouldn't be the name says `setUpApplicationForVersionName` ?"", 'comment_created': datetime.datetime(2021, 8, 17, 9, 40, 33, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 690224874, 'comment_body': 'Yeah. Done', 'comment_created': datetime.datetime(2021, 8, 17, 10, 5, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 691030411, 'comment_body': 'Please add KDocs for these values.', 'comment_created': datetime.datetime(2021, 8, 18, 8, 42, 46, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 691031094, 'comment_body': '```suggestion\r\n    ""//testing/src/main/java/org/oppia/android/testing/network"",\r\n```\r\n\r\nSimplification.', 'comment_created': datetime.datetime(2021, 8, 18, 8, 43, 38, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 691299980, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 18, 14, 35, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 691301254, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 18, 14, 36, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 693320180, 'comment_body': 'welcome message\r\n\r\nDitto in other KDocs.', 'comment_created': datetime.datetime(2021, 8, 21, 7, 39, 38, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 693323746, 'comment_body': ""This flow seems a bit odd; shouldn't the app be set up before launching the test activity?"", 'comment_created': datetime.datetime(2021, 8, 21, 8, 15, 24, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 693325832, 'comment_body': 'We are doing so because we needed to change the app version for testing the work request for different network response. But if we were doing so before the activity is launched then the SplashTestActivity was not able to be launched by tests. @anandwana001, @vinitamurthi  and @jcqli are known of this issue but thre is no such fix for this as based on our research. Also even if we are doing it this way, we actually fetch the values after the work request is completed. Therefore it still checks the integration correctly', 'comment_created': datetime.datetime(2021, 8, 21, 8, 37, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 693326441, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 21, 8, 43, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Arjupta', 'type': 'User'}, {'comment_id': 693328422, 'comment_body': ""I'd need more info on what specifically is preventing us from doing the other approach, but given this is a test arrangement I'm not too bothered by this."", 'comment_created': datetime.datetime(2021, 8, 21, 9, 3, 12, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}]","[{'commit_sha': '405fc4478296c46217fdae78e6e5319a49c28858', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c51a1846b84370fcde4cde0d7e88a34e3920ab23', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd7a01c57ee49c62faff6809daa418dbb30afa493', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b2aa5536e5e4ba2338807d7299bcc230149ef642', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3de99ed12113952e0860e353a88562600577f7ab', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc6e47ae773dbd9eb7cfa9179de56ef541637378', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1879820820b2df4f5f2de78c3d674377e198dc11', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44dabec547df0a273281736774e06a6429ffcba0', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ffcc93acea3b27022ecc283a1239d6c4d054a514', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e36b11b827f4bc277c0592e58f31aac7c95af0c2', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '235208a82d918638eaadb6f50d40509a0d73af25', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '779282d766380170e08d8b1ee5f6b43db53aa5e7', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0309e33ab2671030da6d115c5e5d9a9ba9fc37d5', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8586e6f7f8a4f1d6006058d5984be25a5dc654b8', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f59305d8102ca564c424608baad2c5f3e8dffdab', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c642b474ef525fe8a37536445a6d897613a9cc67', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd354c0567fa8679ef5161bf4f8927161304058a5', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71085090ffbc13d14de65fb9fcba48370dc10fd0', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57dfce47211189b070961c15f47ad3b03451ffcd', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76515bf34311105d0afcd346f077aa90a32729e3', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c05d72e7b9f518800e8b47345496689ec0fe044', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0cb44cbbef42c55e8413da13caf9b09859621595', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e310e9e75005165aff96e5ee54f9f2c360d2e84d', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e1a4280904b3679c3e47d6a6b26b687a0fd75b7', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ba3a8f16241d3bc65d10955f205167b9ef34597', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67d895144738c7524c74d55cbfb5aae28f490978', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af760faeb4bbdb90e30c10c7678bbf0305adab13', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f1efe7e3121471b96f6cb703fa32195d468c78a', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39c4c0f0dcccd6eec68fbfcdd1e89569a2cd6817', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4fa3761e31b701f14932ca86c56c2c00e35c1fa6', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e372afa1b359fcccfb02f76ae68c57ef2e015bf', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '78fb15f96bc3d92d59ef48a23b138a161bb3fd88', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4919b3ec2408c6b8bfdf89398431c4290192d316', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67c7229fa45ac8a069002a3e6232d96cd97053d6', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '54c595bd0b1e8303285b1588bf34847d2c51e13b', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c02a0ec3c52cfe7e73dd85731464409700db62fe', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d28f7c30188129654390f090211e5d0708aaa1f', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a06625af22929c3fe20255b7f6e86f16d74ede64', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '63c4e64fb67d02a438ba943353d0f4d2960f8a94', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '423297e11ecd51d3707d19d28ef48fd2910cc1c2', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62873676659fdc633121a238c8f5382c92eea844', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3380cb5c97e61c701b1e308b0ee7c5b30d1fc20', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd675113f3aa1e49145aef10b9938e5c47b1edeca', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5996ad93ca35c15427d4ea062a3d11d7501c294a', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd1ba92c332c0c4716f38d4d12354bc16ffee120c', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5fc1be6904608953bfb9e513fe84bb9e324858c', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f95364d3d71f3aa76a2696e36c76005c926ab0aa', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2426f2a015d4ab3f7cecf5e65a031f6e56b0ecc', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed04cb56f675100de8efbda37b42df61f411e4ed', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d99b3ae05ac8eb24a33b4aa108b55938977a79f', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa40bd9ee35df483c4be1dff7c31150cc69c5aca', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e66553792703d97373cf6c0b72691fbafad91614', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dbf17e0ddf62001c499414c54bc00be1a99a9be8', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8459bd6df4f6a210798e4eae86e581c27bb064d6', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b34d92254cb4aabd386d0e5d3c2cd373de1bd9f3', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3db3313dfcc0c3038a7498230c59b4fe3b4a171', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5fb3f310703984966927b8389a32c70fa3b80c3', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53a91f458f48315e9ccc38638ece8db292ed5979', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a6823527ea9c6b82d97c6bc2a396375c1898fc9b', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90fb14bb610924f0e188d10422d448f1512ebbb1', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07adb308ad130b8d18f2cba23ee8419318f838f6', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07e5c82a1bf724283a9b6cef20f741372bf034b3', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '970b7785719e3b6ccab3829bbb6095192e8b60d6', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4cf9a81a0a2852091af7dc9631e1a92ff09fbd67', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5524d48a6b1c227982eb3d41c7a14c3626fe6566', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8bd0cfbebcebb53865b5d90c41577f04770ddbb6', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8d47f090ca84f31722971af0c8ecca0e551d39f', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66048b043924936f661190db06f6b4b9c24fe1c2', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a6ca5c09e085387422484548fdb33b0cfecf7745', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '33bea69d74df1890777e4bb1f30d0cb9600b9f44', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '855fb7e48bb18fd7a8a9b1b1cd3f352a274fd1cd', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '366144f9acc3e6f1dc4e5d5b90a28584681d2e38', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3351d1bed4cafb2bc0ab40c637ffe0471e16fb7', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0df9af6ae832c08af9cda86f8648f27b54357b39', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a74a419f2e0c85e0195ba42eb778fdb6a9e7149', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1926e34fbde69d2db3f339aa367ccbd89ab4c7a1', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76e42989d9b9aa78ea60f64a332e65502ac10376', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '52910fb2f290e8923a8930a5d911b7fad56dae43', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '934436a0d379024e558b87f8eab26c0536450e1d', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf495a6c1a45134c6098df8723bd23dd32b8902d', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e013cff6b12fc23ef6e7ec88188e40dd98857ad', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd82db862f11d4a4f9fb7b5627a899f9f59e3b225', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'abf010bc27a7d168f92577f01bb0612373f7a63e', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b154c51efba11cad72bac375a2e93b1eb6dd1aa', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90e5587157180da42a9acf74d0e4cd721cd71b58', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '29c8dff6f51769cdf92fd1a68d8cc5b4f2e24897', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '82fde0edc7283c456cee984d0b73f49cc2c2279d', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e6f5f3567e97ebbb5d3987ac741be2a16449256f', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c08224a7ad00a922888f9c361376c3b690a8350a', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c4e7da44c3a93dbc2efd29759c38636d324fd40', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'edf07ce543566e263993d743d1d1ad698dcecc8a', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51ef97eda55d9dde4a71ba6dfccf1b8a44d8daf6', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c30bd6a7ded491e6adb13126efd3a44256adee36', 'committer_username': 'Arjupta', 'committer_name': 'Arjun Gupta', 'committer_email': 'arjupta.90@gmail.com', 'commit_date': datetime.datetime(2020, 4, 21, 6, 56, 12, tzinfo=datetime.timezone.utc)}]",Arjun Gupta,64064110,arjupta.90@gmail.com,User,,26,,35,44

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
148093817,oppia-android,oppia/oppia-android,Kotlin,507,306,21,172,2042,499,137,14,"[{'id': 711273520, 'number': 3675, 'closed': datetime.datetime(2021, 8, 21, 9, 17, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 12, 17, 9, 21, tzinfo=datetime.timezone.utc), 'time_taken': 749310.0, 'time_delta': '8 days, 16:08:30', 'additions': 239, 'deletions': 24, 'state': 'closed'}, {'id': 698978002, 'number': 3606, 'closed': datetime.datetime(2021, 8, 20, 21, 43, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 28, 20, 2, 48, tzinfo=datetime.timezone.utc), 'time_taken': 1993271.0, 'time_delta': '23 days, 1:41:11', 'additions': 1812, 'deletions': 461, 'state': 'closed'}, {'id': 691829573, 'number': 3489, 'closed': datetime.datetime(2021, 8, 4, 11, 9, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 17, 3, 42, 22, tzinfo=datetime.timezone.utc), 'time_taken': 1582010.0, 'time_delta': '18 days, 7:26:50', 'additions': 509, 'deletions': 36, 'state': 'closed'}, {'id': 690109687, 'number': 3478, 'closed': datetime.datetime(2021, 7, 23, 8, 26, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 14, 17, 51, 56, tzinfo=datetime.timezone.utc), 'time_taken': 743656.0, 'time_delta': '8 days, 14:34:16', 'additions': 8, 'deletions': 48, 'state': 'closed'}, {'id': 685705345, 'number': 3441, 'closed': datetime.datetime(2021, 7, 8, 23, 38, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 8, 5, 47, 29, tzinfo=datetime.timezone.utc), 'time_taken': 64248.0, 'time_delta': '17:50:48', 'additions': 547, 'deletions': 62, 'state': 'closed'}, {'id': 685299491, 'number': 3430, 'closed': datetime.datetime(2021, 7, 8, 2, 40, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 7, 15, 30, 33, tzinfo=datetime.timezone.utc), 'time_taken': 40215.0, 'time_delta': '11:10:15', 'additions': 333, 'deletions': 0, 'state': 'closed'}, {'id': 683107244, 'number': 3405, 'closed': datetime.datetime(2021, 7, 8, 16, 4, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 4, 3, 17, 46, tzinfo=datetime.timezone.utc), 'time_taken': 391609.0, 'time_delta': '4 days, 12:46:49', 'additions': 583, 'deletions': 64, 'state': 'closed'}, {'id': 679725968, 'number': 3387, 'closed': datetime.datetime(2021, 7, 7, 13, 4, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 29, 8, 40, 46, tzinfo=datetime.timezone.utc), 'time_taken': 707021.0, 'time_delta': '8 days, 4:23:41', 'additions': 0, 'deletions': 0, 'state': 'closed'}, {'id': 675758655, 'number': 3361, 'closed': datetime.datetime(2021, 7, 7, 15, 21, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 22, 21, 5, 41, tzinfo=datetime.timezone.utc), 'time_taken': 1275339.0, 'time_delta': '14 days, 18:15:39', 'additions': 288, 'deletions': 4, 'state': 'closed'}, {'id': 669111625, 'number': 3323, 'closed': datetime.datetime(2021, 7, 7, 3, 8, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 13, 20, 34, 53, tzinfo=datetime.timezone.utc), 'time_taken': 2010835.0, 'time_delta': '23 days, 6:33:55', 'additions': 292, 'deletions': 0, 'state': 'closed'}, {'id': 663402374, 'number': 3269, 'closed': datetime.datetime(2021, 6, 28, 16, 43, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 7, 9, 51, 19, tzinfo=datetime.timezone.utc), 'time_taken': 1839126.0, 'time_delta': '21 days, 6:52:06', 'additions': 38, 'deletions': 0, 'state': 'closed'}, {'id': 619532627, 'number': 3104, 'closed': datetime.datetime(2021, 5, 13, 17, 5, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 20, 17, 40, 6, tzinfo=datetime.timezone.utc), 'time_taken': 1985107.0, 'time_delta': '22 days, 23:25:07', 'additions': 404, 'deletions': 214, 'state': 'closed'}, {'id': 597561840, 'number': 2959, 'closed': datetime.datetime(2021, 4, 29, 0, 32, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 21, 20, 57, 11, tzinfo=datetime.timezone.utc), 'time_taken': 3296113.0, 'time_delta': '38 days, 3:35:13', 'additions': 18, 'deletions': 0, 'state': 'closed'}, {'id': 594087385, 'number': 2929, 'closed': datetime.datetime(2021, 6, 9, 19, 22, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 16, 17, 2, 12, tzinfo=datetime.timezone.utc), 'time_taken': 7352431.0, 'time_delta': '85 days, 2:20:31', 'additions': 339, 'deletions': 584, 'state': 'closed'}, {'id': 568930310, 'number': 2649, 'closed': datetime.datetime(2021, 2, 18, 5, 42, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 7, 7, 54, 30, tzinfo=datetime.timezone.utc), 'time_taken': 942477.0, 'time_delta': '10 days, 21:47:57', 'additions': 4, 'deletions': 0, 'state': 'closed'}, {'id': 568112964, 'number': 2626, 'closed': datetime.datetime(2021, 2, 5, 6, 49, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 5, 5, 59, 20, tzinfo=datetime.timezone.utc), 'time_taken': 2996.0, 'time_delta': '0:49:56', 'additions': 6, 'deletions': 1, 'state': 'closed'}, {'id': 567689247, 'number': 2625, 'closed': datetime.datetime(2021, 3, 15, 15, 52, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 4, 14, 56, 27, tzinfo=datetime.timezone.utc), 'time_taken': 3372945.0, 'time_delta': '39 days, 0:55:45', 'additions': 21, 'deletions': 11, 'state': 'closed'}, {'id': 560463157, 'number': 2548, 'closed': datetime.datetime(2021, 1, 29, 15, 55, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 23, 17, 39, 53, tzinfo=datetime.timezone.utc), 'time_taken': 512126.0, 'time_delta': '5 days, 22:15:26', 'additions': 3, 'deletions': 0, 'state': 'closed'}, {'id': 557424950, 'number': 2519, 'closed': datetime.datetime(2021, 1, 21, 15, 57, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 19, 13, 19, 27, tzinfo=datetime.timezone.utc), 'time_taken': 182278.0, 'time_delta': '2 days, 2:37:58', 'additions': 4, 'deletions': 1, 'state': 'closed'}, {'id': 556865613, 'number': 2511, 'closed': datetime.datetime(2021, 1, 24, 8, 0, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 18, 14, 58, 2, tzinfo=datetime.timezone.utc), 'time_taken': 493354.0, 'time_delta': '5 days, 17:02:34', 'additions': 1, 'deletions': 0, 'state': 'closed'}, {'id': 556751075, 'number': 2509, 'closed': datetime.datetime(2021, 2, 5, 7, 34, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 18, 11, 47, 2, tzinfo=datetime.timezone.utc), 'time_taken': 1540060.0, 'time_delta': '17 days, 19:47:40', 'additions': 11, 'deletions': 2, 'state': 'closed'}, {'id': 556738446, 'number': 2508, 'closed': datetime.datetime(2021, 1, 28, 15, 54, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 18, 11, 24, 22, tzinfo=datetime.timezone.utc), 'time_taken': 880190.0, 'time_delta': '10 days, 4:29:50', 'additions': 9, 'deletions': 1, 'state': 'closed'}, {'id': 556712323, 'number': 2507, 'closed': datetime.datetime(2021, 1, 27, 17, 6, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 18, 10, 45, 34, tzinfo=datetime.timezone.utc), 'time_taken': 800473.0, 'time_delta': '9 days, 6:21:13', 'additions': 8, 'deletions': 65, 'state': 'closed'}, {'id': 552833807, 'number': 2457, 'closed': datetime.datetime(2021, 2, 8, 14, 5, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 11, 15, 42, 13, tzinfo=datetime.timezone.utc), 'time_taken': 2413425.0, 'time_delta': '27 days, 22:23:45', 'additions': 2, 'deletions': 7, 'state': 'closed'}, {'id': 552810158, 'number': 2456, 'closed': datetime.datetime(2021, 2, 3, 10, 21, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 11, 15, 15, 37, tzinfo=datetime.timezone.utc), 'time_taken': 1969570.0, 'time_delta': '22 days, 19:06:10', 'additions': 12, 'deletions': 8, 'state': 'closed'}, {'id': 552798109, 'number': 2454, 'closed': datetime.datetime(2021, 1, 25, 19, 31, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 11, 14, 57, 26, tzinfo=datetime.timezone.utc), 'time_taken': 1226060.0, 'time_delta': '14 days, 4:34:20', 'additions': 4, 'deletions': 2, 'state': 'closed'}, {'id': 552792683, 'number': 2453, 'closed': datetime.datetime(2021, 1, 25, 19, 30, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 11, 14, 49, 18, tzinfo=datetime.timezone.utc), 'time_taken': 1226497.0, 'time_delta': '14 days, 4:41:37', 'additions': 8, 'deletions': 6, 'state': 'closed'}, {'id': 525909851, 'number': 2160, 'closed': datetime.datetime(2020, 11, 23, 18, 48, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 11, 23, 18, 12, 57, tzinfo=datetime.timezone.utc), 'time_taken': 2148.0, 'time_delta': '0:35:48', 'additions': 446, 'deletions': 226, 'state': 'closed'}, {'id': 525695457, 'number': 2158, 'closed': datetime.datetime(2020, 11, 23, 16, 1, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 11, 23, 12, 26, 26, tzinfo=datetime.timezone.utc), 'time_taken': 12908.0, 'time_delta': '3:35:08', 'additions': 259, 'deletions': 123, 'state': 'closed'}, {'id': 525334080, 'number': 2153, 'closed': datetime.datetime(2020, 11, 23, 6, 54, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 11, 22, 18, 26, 49, tzinfo=datetime.timezone.utc), 'time_taken': 44863.0, 'time_delta': '12:27:43', 'additions': 279, 'deletions': 144, 'state': 'closed'}, {'id': 525102977, 'number': 2151, 'closed': datetime.datetime(2020, 11, 23, 13, 3, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 11, 21, 9, 8, 22, tzinfo=datetime.timezone.utc), 'time_taken': 186914.0, 'time_delta': '2 days, 3:55:14', 'additions': 257, 'deletions': 0, 'state': 'closed'}, {'id': 521933682, 'number': 2121, 'closed': datetime.datetime(2020, 11, 21, 7, 38, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 11, 16, 20, 30, 29, tzinfo=datetime.timezone.utc), 'time_taken': 385658.0, 'time_delta': '4 days, 11:07:38', 'additions': 157, 'deletions': 85, 'state': 'closed'}, {'id': 521251552, 'number': 2115, 'closed': datetime.datetime(2020, 11, 17, 7, 46, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 11, 15, 20, 6, 41, tzinfo=datetime.timezone.utc), 'time_taken': 128418.0, 'time_delta': '1 day, 11:40:18', 'additions': 47, 'deletions': 27, 'state': 'closed'}, {'id': 521018982, 'number': 2114, 'closed': datetime.datetime(2020, 11, 17, 16, 58, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 11, 14, 15, 15, 12, tzinfo=datetime.timezone.utc), 'time_taken': 265403.0, 'time_delta': '3 days, 1:43:23', 'additions': 86, 'deletions': 56, 'state': 'closed'}, {'id': 521007847, 'number': 2113, 'closed': datetime.datetime(2020, 11, 16, 16, 48, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 11, 14, 13, 39, 38, tzinfo=datetime.timezone.utc), 'time_taken': 184129.0, 'time_delta': '2 days, 3:08:49', 'additions': 93, 'deletions': 65, 'state': 'closed'}, {'id': 521000482, 'number': 2112, 'closed': datetime.datetime(2020, 11, 15, 14, 39, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 11, 14, 12, 25, 44, tzinfo=datetime.timezone.utc), 'time_taken': 94427.0, 'time_delta': '1 day, 2:13:47', 'additions': 43, 'deletions': 27, 'state': 'closed'}, {'id': 520978431, 'number': 2111, 'closed': datetime.datetime(2020, 11, 19, 6, 5, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 11, 14, 8, 29, 28, tzinfo=datetime.timezone.utc), 'time_taken': 423389.0, 'time_delta': '4 days, 21:36:29', 'additions': 92, 'deletions': 37, 'state': 'closed'}, {'id': 520972552, 'number': 2110, 'closed': datetime.datetime(2020, 11, 16, 18, 18, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 11, 14, 7, 18, 26, tzinfo=datetime.timezone.utc), 'time_taken': 212396.0, 'time_delta': '2 days, 10:59:56', 'additions': 13, 'deletions': 11, 'state': 'closed'}, {'id': 513664885, 'number': 2070, 'closed': datetime.datetime(2020, 11, 10, 20, 26, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 11, 1, 17, 54, 19, tzinfo=datetime.timezone.utc), 'time_taken': 786738.0, 'time_delta': '9 days, 2:32:18', 'additions': 161, 'deletions': 119, 'state': 'closed'}, {'id': 510594694, 'number': 2049, 'closed': datetime.datetime(2020, 10, 29, 7, 37, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 27, 9, 13, 25, tzinfo=datetime.timezone.utc), 'time_taken': 167067.0, 'time_delta': '1 day, 22:24:27', 'additions': 17, 'deletions': 22, 'state': 'closed'}, {'id': 508867041, 'number': 2034, 'closed': datetime.datetime(2020, 10, 27, 14, 50, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 23, 10, 19, 23, tzinfo=datetime.timezone.utc), 'time_taken': 361885.0, 'time_delta': '4 days, 4:31:25', 'additions': 55, 'deletions': 33, 'state': 'closed'}, {'id': 508079112, 'number': 2030, 'closed': datetime.datetime(2020, 10, 23, 10, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 22, 7, 26, 9, tzinfo=datetime.timezone.utc), 'time_taken': 96831.0, 'time_delta': '1 day, 2:53:51', 'additions': 67, 'deletions': 41, 'state': 'closed'}, {'id': 503616544, 'number': 2010, 'closed': datetime.datetime(2020, 10, 17, 8, 24, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 14, 20, 17, 54, tzinfo=datetime.timezone.utc), 'time_taken': 216412.0, 'time_delta': '2 days, 12:06:52', 'additions': 12, 'deletions': 8, 'state': 'closed'}, {'id': 501736873, 'number': 1999, 'closed': datetime.datetime(2020, 12, 27, 17, 42, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 12, 18, 21, 45, tzinfo=datetime.timezone.utc), 'time_taken': 6564073.0, 'time_delta': '75 days, 23:21:13', 'additions': 82, 'deletions': 69, 'state': 'closed'}, {'id': 501041908, 'number': 1973, 'closed': datetime.datetime(2020, 10, 16, 6, 35, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 10, 21, 46, 9, tzinfo=datetime.timezone.utc), 'time_taken': 463788.0, 'time_delta': '5 days, 8:49:48', 'additions': 2, 'deletions': 7, 'state': 'closed'}, {'id': 501035401, 'number': 1972, 'closed': datetime.datetime(2020, 10, 13, 5, 35, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 10, 20, 50, 10, tzinfo=datetime.timezone.utc), 'time_taken': 204335.0, 'time_delta': '2 days, 8:45:35', 'additions': 2, 'deletions': 8, 'state': 'closed'}, {'id': 493610996, 'number': 1910, 'closed': datetime.datetime(2020, 9, 27, 18, 39, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 26, 18, 22, 58, tzinfo=datetime.timezone.utc), 'time_taken': 87405.0, 'time_delta': '1 day, 0:16:45', 'additions': 69, 'deletions': 69, 'state': 'closed'}]"
