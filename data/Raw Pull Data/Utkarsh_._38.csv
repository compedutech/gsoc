pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
375609112,Zero Dissipation ERK6(5),"Hi, I have currently implemented RK6(5) based on the paper (It does not account for zero dissipation yet, some basic changes needs to be done) [here](https://www.researchgate.net/publication/225779373_Runge-Kutta_pairs_for_periodic_initial_value_problems) which is the basis of paper mentioned in  #867. However, since this is my first attempt, I may have made some errors and sim tests are failing. Can anyone help where to possibly search for errors. Thanks.",True,1033,https://api.github.com/repos/SciML/OrdinaryDiffEq.jl/pulls/1033,https://github.com/SciML/OrdinaryDiffEq.jl/pull/1033,closed,376,2,6,7,13,11,0,0,[],2020-02-14 23:08:21+00:00,2020-02-22 01:23:35+00:00,612914.0,"7 days, 2:15:14","[{'comment_id': 379836874, 'comment_body': ""looks like omega isn't used?"", 'comment_created': datetime.datetime(2020, 2, 15, 15, 10, 52, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}, {'comment_id': 379839338, 'comment_body': 'Actually, I am testing for convergence of paper I mentioned in my earlier comment, which had constant variables. The paper for zero dissipation requires only to change b4 b5 b6 to a function of omega which I will implement after this just to be sure that original coefficients are leading to convergence or not.', 'comment_created': datetime.datetime(2020, 2, 15, 15, 53, 54, tzinfo=datetime.timezone.utc), 'commenter': 'utkarsh530', 'type': 'User'}, {'comment_id': 379849287, 'comment_body': '```suggestion\r\n    β6 = T1(1144867463//6520294355)\r\n```', 'comment_created': datetime.datetime(2020, 2, 15, 18, 56, 45, tzinfo=datetime.timezone.utc), 'commenter': 'kanav99', 'type': 'User'}, {'comment_id': 379849302, 'comment_body': '```suggestion\r\n    β8 = T1(79524953//2351253316)\r\n```', 'comment_created': datetime.datetime(2020, 2, 15, 18, 57, 7, tzinfo=datetime.timezone.utc), 'commenter': 'kanav99', 'type': 'User'}, {'comment_id': 382519704, 'comment_body': 'Parameterize this', 'comment_created': datetime.datetime(2020, 2, 21, 10, 55, 53, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}, {'comment_id': 382519774, 'comment_body': '```suggestion\r\nstruct FRK65{T} <: OrdinaryDiffEqAdaptiveAlgorithm\r\n```', 'comment_created': datetime.datetime(2020, 2, 21, 10, 56, 2, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}, {'comment_id': 382519891, 'comment_body': '```suggestion\r\n  omega::T\r\n```', 'comment_created': datetime.datetime(2020, 2, 21, 10, 56, 11, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}, {'comment_id': 382781309, 'comment_body': 'instead, make this 6.5 and keep the same testtol. Looks like super convergence. What does plot(sim3) look like?', 'comment_created': datetime.datetime(2020, 2, 21, 20, 5, 45, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}, {'comment_id': 382803014, 'comment_body': ""Here's the plot: \r\n![plot](https://user-images.githubusercontent.com/37050056/75071212-ec49ed80-551a-11ea-8134-542dfd8cbc93.png)\r\n`sim3.�est[:l∞]=6.547286289246398`\r\n![plot1](https://user-images.githubusercontent.com/37050056/75071214-ece28400-551a-11ea-91a1-c67f347dce1c.png)\r\n`sim3.�est[:l∞]=5.862512678209683`\r\nA test is failing if setting it to 6.5 and same testtol."", 'comment_created': datetime.datetime(2020, 2, 21, 20, 59, 40, tzinfo=datetime.timezone.utc), 'commenter': 'utkarsh530', 'type': 'User'}, {'comment_id': 382818364, 'comment_body': ""huh, that's weird. Instead of defining at `testTol1`, just put the larger value right in the code there and I'll accept."", 'comment_created': datetime.datetime(2020, 2, 21, 21, 39, 47, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}, {'comment_id': 382823648, 'comment_body': 'Done. By the way, what is super convergence?', 'comment_created': datetime.datetime(2020, 2, 21, 21, 54, 8, tzinfo=datetime.timezone.utc), 'commenter': 'utkarsh530', 'type': 'User'}]","[{'commit_sha': '304840eb4474d19031d35c5b6eae1abf22d3f90f', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51d4f375275ae5937c2734d956ca1c0777a31362', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5fa04275ed96608475057744b63e1b58ec2c89e', 'committer_username': 'ChrisRackauckas', 'committer_name': 'Christopher Rackauckas', 'committer_email': 'accounts@chrisrackauckas.com', 'commit_date': datetime.datetime(2012, 6, 4, 7, 19, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17c83f3a1a03f0b8553dc7e95cdfb6d8bb8b4272', 'committer_username': 'ChrisRackauckas', 'committer_name': 'Christopher Rackauckas', 'committer_email': 'accounts@chrisrackauckas.com', 'commit_date': datetime.datetime(2012, 6, 4, 7, 19, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c2e67de0e09c121570a80c9821650012c790cb42', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a4e064258857bb18ffa1d0042b66f7536def55ed', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c15a2792bf3aa532a5e484a0baa6370962605c1c', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}]",Utkarsh,37050056,,User,,79,,14,27
378722116,Phase Fitted RK8(7) with zero dissipation,"Please review this PR for zero dissipation RK8(7) #867 . I have implemented [this](https://www.sciencedirect.com/science/article/pii/S037704271730095X), required coefficients taken from [here](https://www.sciencedirect.com/science/article/pii/0771050X81900103). I had checked for Bessel Function, the solutions are overlapping but with a warning: `┌Warning: Interrupted. Larger maxiters is needed.
└ @ DiffEqBase C:\Users\Utkarsh\.julia\packages\DiffEqBase\T0uMB\src\integrator_interface.jl:319
retcode: MaxIters`. Also for convergence tests, which set of problems to use since I saw that for higher-order we are not using `ode_convergence_tests.jl`?. Thanks.",True,1047,https://api.github.com/repos/SciML/OrdinaryDiffEq.jl/pulls/1047,https://github.com/SciML/OrdinaryDiffEq.jl/pull/1047,closed,383,1,7,4,10,0,0,0,[],2020-02-23 16:10:06+00:00,2020-02-26 06:41:04+00:00,225058.0,"2 days, 14:30:58",[],"[{'commit_sha': 'bb92b2b319f35249e688db2f72904cbe55aab103', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e15224d52a8a2ae7b95cfa0df20bf9249e8579d', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '01e1cbf919a511b816ee3ce8f2d02e2243803303', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f870c84c4d57bce1eaddfbe7374f695bb0d380e', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}]",Utkarsh,37050056,,User,,79,,14,27
382525573,"Attempt at RKM Mead, Renaut","Hi, I have implemented RKM according to PR #625. I have adjusted `dts`  for convergence and test is passing for 1D_Linear and failing for 2D Linear. Please help me if there are any errors or where to look for debugging. I have attached plots. 
![plot_mead](https://user-images.githubusercontent.com/37050056/75703377-5dd52900-5cdd-11ea-8c52-ea7dc124b43e.png)
`println(sim3.�est[:l∞]) = 4.129508563384341`
![plot_mead_1](https://user-images.githubusercontent.com/37050056/75703423-734a5300-5cdd-11ea-8f1f-d7467813aec7.png)
`println(sim3.�est[:l∞]) = 3.246210068864696`
Note: some weird behaviour is happening if setting dts a mutiples of 1/2.
@ChrisRackauckas @kanav99 ",True,1052,https://api.github.com/repos/SciML/OrdinaryDiffEq.jl/pulls/1052,https://github.com/SciML/OrdinaryDiffEq.jl/pull/1052,closed,162,1,6,23,6,7,0,0,[],2020-03-02 17:58:38+00:00,2020-03-10 20:09:27+00:00,699049.0,"8 days, 2:10:49","[{'comment_id': 389585352, 'comment_body': 'here fsallast = f(u, p, t+dt), but in IIP code ... (1/2)', 'comment_created': datetime.datetime(2020, 3, 9, 10, 50, 7, tzinfo=datetime.timezone.utc), 'commenter': 'kanav99', 'type': 'User'}, {'comment_id': 389586873, 'comment_body': ""fsallast = k6. which is wrong\r\nI don't think this algo is a FSAL algorithm, so you can set `isfsal` to false for this algorithm, and calculate `k1` at the starting of perform step and dont calculate `fsallast` at all. Am I right @ChrisRackauckas ? (2/2)"", 'comment_created': datetime.datetime(2020, 3, 9, 10, 53, 12, tzinfo=datetime.timezone.utc), 'commenter': 'kanav99', 'type': 'User'}, {'comment_id': 389928706, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2020, 3, 9, 20, 0, 56, tzinfo=datetime.timezone.utc), 'commenter': 'utkarsh530', 'type': 'User'}, {'comment_id': 389928777, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2020, 3, 9, 20, 1, 4, tzinfo=datetime.timezone.utc), 'commenter': 'utkarsh530', 'type': 'User'}, {'comment_id': 390461916, 'comment_body': '```suggestion\r\n  k1 = integrator.fsalfirst\r\n```', 'comment_created': datetime.datetime(2020, 3, 10, 16, 52, 1, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}, {'comment_id': 390462377, 'comment_body': 'this should come from fsal', 'comment_created': datetime.datetime(2020, 3, 10, 16, 52, 41, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}, {'comment_id': 390462851, 'comment_body': 'need an fsal call at the end here', 'comment_created': datetime.datetime(2020, 3, 10, 16, 53, 22, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}]","[{'commit_sha': '3b9834a401353f076a234360f35b583c4d5a70c4', 'committer_username': 'keshavseksaria', 'committer_name': 'Keshav Seksaria', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 25, 8, 4, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b062ed6888acd7f0da5e48b1f3058d4dc36d8da5', 'committer_username': 'keshavseksaria', 'committer_name': 'Keshav Seksaria', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 25, 8, 4, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a15c7e4236187e19e16e560bba68b7fd1c0ed50', 'committer_username': 'keshavseksaria', 'committer_name': 'Keshav Seksaria', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 25, 8, 4, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c440267cf3c3bbebb2feaf0e8d5a7f5c4648d40', 'committer_username': 'keshavseksaria', 'committer_name': 'Keshav Seksaria', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 25, 8, 4, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b311ceba69b58c051e5f40a3c86cd829eff43653', 'committer_username': 'keshavseksaria', 'committer_name': 'Keshav Seksaria', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 25, 8, 4, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '773f465e73c54b5dbe9daad37151babff47a2294', 'committer_username': 'keshavseksaria', 'committer_name': 'Keshav Seksaria', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 25, 8, 4, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a12209d6d594ac19c6174ea87b016e8a822e365', 'committer_username': 'keshavseksaria', 'committer_name': 'Keshav Seksaria', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 25, 8, 4, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67961346287d99bef8d21ceb378370b2c2d18468', 'committer_username': 'keshavseksaria', 'committer_name': 'Keshav Seksaria', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 25, 8, 4, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5cf935f2c5135d699e4bf4728f960df269055eab', 'committer_username': 'keshavseksaria', 'committer_name': 'Keshav Seksaria', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 25, 8, 4, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6899d11501a756d7aedec19897f449693d08c38d', 'committer_username': 'keshavseksaria', 'committer_name': 'Keshav Seksaria', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 25, 8, 4, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '936899de829c1408c4be3143d6243308b8141ee5', 'committer_username': 'keshavseksaria', 'committer_name': 'Keshav Seksaria', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 25, 8, 4, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a93af841970e83d7a6c8ac98630f1caeabd8e9e7', 'committer_username': 'keshavseksaria', 'committer_name': 'Keshav Seksaria', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 25, 8, 4, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb246a86ad07cb1444347c5a3c41f8dd233bab63', 'committer_username': 'keshavseksaria', 'committer_name': 'Keshav Seksaria', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 25, 8, 4, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '862374b74a999fbf2d857241b88922cc78750249', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa1cddad4263bc5e5f552ad0dfb02501760e8acc', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1712541993c7526c0fa14c1ab55770995204d954', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd45b5289af6eeb312c7794d1521eb56c707ae407', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2cfff770dc6122e68f9ca0e1572a403fe1be3e45', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7295bfb35a6a7c2b8ef93476dc3a91155d02632c', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ddc5e0289bf6112c1fbff931d294a98292038a63', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dae6f03d76d84889f084f1678585eacfd0a2bea0', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38df32de6b04c0e5c342cd930bdefbed82fea207', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3eeeec9cc74a13c7e69984bd8aaa3aa82945bf1c', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}]",Utkarsh,37050056,,User,,79,,14,27
385301844,WIP: BDF Fixes,"Hi, I am trying to fix random errors in BDF popping in travis build. I removed some `similar` allocations which I found to be suspicious. Testing more fixes.
@ChrisRackauckas @kanav99 ",True,1058,https://api.github.com/repos/SciML/OrdinaryDiffEq.jl/pulls/1058,https://github.com/SciML/OrdinaryDiffEq.jl/pull/1058,closed,5,4,1,2,5,2,0,0,[],2020-03-08 19:12:08+00:00,2020-03-09 00:09:37+00:00,17849.0,4:57:29,"[{'comment_id': 389408818, 'comment_body': 'intentional?', 'comment_created': datetime.datetime(2020, 3, 8, 21, 53, 56, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}, {'comment_id': 389409952, 'comment_body': '```suggestion\r\n@cache mutable struct ABDF2ConstantCache{N,dtType,rate_prototype} <: OrdinaryDiffEqConstantCache\r\n```', 'comment_created': datetime.datetime(2020, 3, 8, 22, 7, 45, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}]","[{'commit_sha': 'a5a9df3b68014876a6def5c90f3b213533781ef5', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b0989f09da5901afaf83f4a056c70fd512e9eb5', 'committer_username': 'ChrisRackauckas', 'committer_name': 'Christopher Rackauckas', 'committer_email': 'accounts@chrisrackauckas.com', 'commit_date': datetime.datetime(2012, 6, 4, 7, 19, 50, tzinfo=datetime.timezone.utc)}]",Utkarsh,37050056,,User,,79,,14,27
389062745,"Fix ::Array{Float64,1} use case in QNDF",Fixes #1076. @ChrisRackauckas please review.,True,1085,https://api.github.com/repos/SciML/OrdinaryDiffEq.jl/pulls/1085,https://github.com/SciML/OrdinaryDiffEq.jl/pull/1085,closed,11,11,2,4,7,1,0,0,[],2020-03-16 08:19:19+00:00,2020-03-17 13:14:59+00:00,104140.0,"1 day, 4:55:40","[{'comment_id': 392998922, 'comment_body': '```suggestion\r\n    ϕ .+= γₖ[i]*D[i]\r\n```', 'comment_created': datetime.datetime(2020, 3, 16, 12, 48, 7, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}]","[{'commit_sha': '1e4b949ee50aceeb70150279ed5d49e4d97781f6', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b1bc75dd1d6c5a6b3c293af3285f8e99f680e1b1', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15b8672570758f008783167f7198d198d1289502', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c8adb1eb60b57869b9bfe27f594fdb7e1d95f3e', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}]",Utkarsh,37050056,,User,,79,,14,27
390506808,[WIP] Fixes for QNDF and QBDF Tests,"As mentioned in issue #1077, Mass Matrix Accuracy Tests fail for QNDFs, all algorithms have been corrected except QNDF [WIP]. Some general improvements and optimisations. 
@ChrisRackauckas please review.",True,1088,https://api.github.com/repos/SciML/OrdinaryDiffEq.jl/pulls/1088,https://github.com/SciML/OrdinaryDiffEq.jl/pull/1088,closed,42,37,3,3,2,3,0,0,[],2020-03-18 15:32:26+00:00,2020-03-18 17:18:55+00:00,6389.0,1:46:29,"[{'comment_id': 394456794, 'comment_body': 'ahh yes, much much safer.', 'comment_created': datetime.datetime(2020, 3, 18, 15, 56, 50, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}, {'comment_id': 394458161, 'comment_body': 'if qndf1 is the only one effected, why is this changed?', 'comment_created': datetime.datetime(2020, 3, 18, 15, 58, 23, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}, {'comment_id': 394460891, 'comment_body': 'QBDF was passing also before', 'comment_created': datetime.datetime(2020, 3, 18, 16, 1, 48, tzinfo=datetime.timezone.utc), 'commenter': 'utkarsh530', 'type': 'User'}]","[{'commit_sha': '74843f8c9f3fff097d971cb783fe78f1d829be01', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '310f6ba43d6fcaba197faf32a279953db42b1661', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '242fd7481ffa5497e6744497f6bc1a026bc2ab8d', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}]",Utkarsh,37050056,,User,,79,,14,27
402015830,[WIP]Improvements in adaptivity of QNDF,"I had found some inconsistencies which I am addressing here:

1. QNDF is VSVO(variable step variable order). Currently, the MATLAB suite paper didn't mention on how to change order. So while looking on PRs, I found this paper [here](https://www.sciencedirect.com/science/article/pii/S1877050914002683) which states how to reject steps and select orders.
2. Although the solution obtaining with current QNDF was accurate (I checked with graphs and extreme values, any full-proof method on how to compare the solution with likes of RODAS5 will be appreciated), the no. of steps it took to reach t_final was mammoth (around 600k array dimension). 
3. What I anticipate was happening that, from setting integrator.EEst, the cache.h changes in the next step. However, the current code was directly making changes to cache.h, without changing integrator.EEst adhering to pass/fail, although the correct step was being calculated, but was superseded by previously setting integrator.EEst. Hence made required changes as in the PR.

Results:

Before fixing: 
```
@time sol = solve(prob,QNDF(),abstol=1/10^14,reltol=1/10^14)
141.594930 seconds (38.52 M allocations: 1.798 GiB, 0.94% gc time)
retcode: Success
Interpolation: 3rd order Hermite
t: 614872-element Array{Float64,1}
```
After fixing:
```
@time sol = solve(prob,QNDF(),abstol=1/10^14,reltol=1/10^14)
  3.439076 seconds (1.32 M allocations: 61.825 MiB)
retcode: Success
Interpolation: 3rd order Hermite
t: 1715-element Array{Float64,1}
```

Contrast to RODAS5 which takes 1243 steps and ode15s takes 1210 steps.

For consistency of solution:
```
sol = solve(prob, QNDF())
sol1 = solve(prob, MATLABDiffEq.ode15s())
sol2 = solve(prob, Rodas5())
julia> plot(sol,linewidth = 3,tspan=(0.0,5.0))
julia> plot!(sol3,lw = 3,ls = :dash,tspan=(0.0,5.0))
```
![qndf](https://user-images.githubusercontent.com/37050056/79013371-39932480-7b86-11ea-8655-5e28aabd1c92.png)

@ChrisRackauckas @kanav99 please review.",False,1106,https://api.github.com/repos/SciML/OrdinaryDiffEq.jl/pulls/1106,https://github.com/SciML/OrdinaryDiffEq.jl/pull/1106,open,7,7,1,2,1,7,0,0,[],2020-04-10 18:26:48+00:00,,0.0,,"[{'comment_id': 407841674, 'comment_body': 'agreed, this is weird...', 'comment_created': datetime.datetime(2020, 4, 14, 3, 16, 33, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}, {'comment_id': 407841750, 'comment_body': 'why >k?', 'comment_created': datetime.datetime(2020, 4, 14, 3, 16, 53, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}, {'comment_id': 408281792, 'comment_body': ""Yeah, I guess there's some rectification required. (Was done because 1st step is calculated using BDF (cnt = 1), and then NDF is used. That's why set it EEst to 1 when cnt>k)."", 'comment_created': datetime.datetime(2020, 4, 14, 16, 42, 49, tzinfo=datetime.timezone.utc), 'commenter': 'utkarsh530', 'type': 'User'}, {'comment_id': 408282689, 'comment_body': 'but after k steps it should be safe to be changing around the stepsize?', 'comment_created': datetime.datetime(2020, 4, 14, 16, 44, 11, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}, {'comment_id': 408290777, 'comment_body': 'Are you talking about `integrator.EEst`?  I assume it must be safe. But let me look into it further to make adaptivity more logical. Can you suggest something? It might be confusing to using use `cnt>k` (as k=1 initially) as I only intend that after 1st step, rest must be handled by another block.', 'comment_created': datetime.datetime(2020, 4, 14, 16, 56, 26, tzinfo=datetime.timezone.utc), 'commenter': 'utkarsh530', 'type': 'User'}, {'comment_id': 408598140, 'comment_body': ""this means stepsize won't change after 5 iterations, that's basically non-adaptive stepsizing"", 'comment_created': datetime.datetime(2020, 4, 15, 5, 58, 16, tzinfo=datetime.timezone.utc), 'commenter': 'kanav99', 'type': 'User'}, {'comment_id': 408627926, 'comment_body': ""> The ode15s is not allowed to change either the order or the step size until a minimum of\r\n(k + 2) consecutive steps are given using the same order formula and the same step size. If one\r\nstep is unsuccessful, the order of the method or the step size are reduced. When the compulsory\r\n(k + 2) successful steps are given, it is possible to change the order and the step size. In this\r\ncase, the step sizes which correspond to orders (k − 1) (for k > 1), k and (k + 1) (whenever the\r\nmaximum order defined has not been reached) are calculated.\r\n\r\nThis is from the paper, this doesn't look consistent with your implementation"", 'comment_created': datetime.datetime(2020, 4, 15, 7, 13, 44, tzinfo=datetime.timezone.utc), 'commenter': 'kanav99', 'type': 'User'}]","[{'commit_sha': 'c0da5927c8d5b14d72408af271666a784b6abf83', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71dc5f46e7285c7e6811340d723f356cca0c81a7', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}]",Utkarsh,37050056,,User,,79,,14,27
411706736,Failed step handling in NDF,"Hi,

Previously failed step in NDF was not working properly. There were some possible bugs in the code like simple returning the function without the value which was happening in the `stepsize_and_order` function and simply returning the `perform_step` function was not calculating at that `t` again.
I hope to convert in into controller because that would be a neat implementation. (Trying to find what is the current problem in the step-sizing, I have got some leads and will implement them iteratively). 
@ChrisRackauckas @kanav99 could you please have a look?",True,1125,https://api.github.com/repos/SciML/OrdinaryDiffEq.jl/pulls/1125,https://github.com/SciML/OrdinaryDiffEq.jl/pull/1125,closed,37,31,2,1,1,1,0,0,[],2020-04-30 16:38:46+00:00,2020-05-01 16:53:11+00:00,87265.0,"1 day, 0:14:25","[{'comment_id': 418629530, 'comment_body': ""that's a big difference haha"", 'comment_created': datetime.datetime(2020, 5, 1, 16, 51, 52, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}]","[{'commit_sha': '0f629cf15b0e5761c9d3b849a884ebba54a41ff9', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}]",Utkarsh,37050056,,User,,79,,14,27
415374768,Conditions for order and step change in NDFs,"Hi,

I have made some changes referring to the paper [here](https://www.sciencedirect.com/science/article/pii/S1877050914002683). It states that order and step-size must not be changed for at least order+2 iterations, which was not implemented I guess. Please have a look. Also, Shampine's Paper only mentions about error estimator, it does not say anything about order and step-size changes, hence referring the paper. 
@ChrisRackauckas @kanav99 ",True,1130,https://api.github.com/repos/SciML/OrdinaryDiffEq.jl/pulls/1130,https://github.com/SciML/OrdinaryDiffEq.jl/pull/1130,closed,26,27,3,7,23,2,0,0,[],2020-05-08 18:45:53+00:00,2020-05-27 16:26:06+00:00,1633213.0,"18 days, 21:40:13","[{'comment_id': 430835732, 'comment_body': 'cleanup', 'comment_created': datetime.datetime(2020, 5, 27, 3, 21, 55, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}, {'comment_id': 430841334, 'comment_body': '```suggestion\r\n    integrator.cache.nconsteps += 1\r\n```', 'comment_created': datetime.datetime(2020, 5, 27, 3, 47, 10, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}]","[{'commit_sha': '7603fabe7904ca01fda80b83bf1db4388741ee01', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '187cd60f20acb6e3cda9c7f5497c1348d395be76', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1dfb371e9f5b407c2c488c48e5b45c1d1966e1ac', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8f83aaa9b369bd1ce129ba58eb3baed43b6bfab', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2571b1c9477ab42af39b18bd276cc4dce9d084b2', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4df7dfb03d97c275982bc8cda8f6c6963adb51d3', 'committer_username': 'ChrisRackauckas', 'committer_name': 'Christopher Rackauckas', 'committer_email': 'accounts@chrisrackauckas.com', 'commit_date': datetime.datetime(2012, 6, 4, 7, 19, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '04d81d33f6ef81a3fc2afd71915a411b5eef5556', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}]",Utkarsh,37050056,,User,,79,,14,27
416852419,Ndf Controllers,"As said in #1130, the order and step changes for NDF are moved to `controllers.jl`. Please review.

1. I assumed `qold` to be change in `dt` for failed step-size by looking at other implementations. Am I correct?
2. There is some redundant logic I think. First, we calculate q for `stepsize_controller`. Then we check val `integrator.accept_step` and call `step_accept_controller` which checks for some edge cases of `q`. In this implementation, how update the order? should I move it to step_accept_controller and `step_reject_controller` or current `QNDF_stepsize_and_order!` checking conditions for `integrator.EEst <=1.0` is fine?
3. What to put in the controller field in `QNDF` struct [here](https://github.com/SciML/OrdinaryDiffEq.jl/blob/master/src/algorithms.jl#L552-L557)?
I made a separate PR because further moving with diagnosing the problem, overhauling was needed. Your views are highly appreciated.
4. Is the implementation complete? Some optimisations required?
@ChrisRackauckas @kanav99 please review.",True,1132,https://api.github.com/repos/SciML/OrdinaryDiffEq.jl/pulls/1132,https://github.com/SciML/OrdinaryDiffEq.jl/pull/1132,closed,192,164,4,10,22,7,0,0,[],2020-05-12 16:59:48+00:00,2020-05-24 04:50:44+00:00,993056.0,"11 days, 11:50:56","[{'comment_id': 424193404, 'comment_body': '```suggestion\r\n    q = one(integrator.qold) #quasi-contsant steps    \r\n```', 'comment_created': datetime.datetime(2020, 5, 13, 6, 10, 21, tzinfo=datetime.timezone.utc), 'commenter': 'kanav99', 'type': 'User'}, {'comment_id': 424193948, 'comment_body': ""we should have a better variable name for number of failed steps. It's fine if the paper uses `c` and we can make this change later"", 'comment_created': datetime.datetime(2020, 5, 13, 6, 11, 59, tzinfo=datetime.timezone.utc), 'commenter': 'kanav99', 'type': 'User'}, {'comment_id': 424354549, 'comment_body': 'Made the requested changes.', 'comment_created': datetime.datetime(2020, 5, 13, 11, 7, 12, tzinfo=datetime.timezone.utc), 'commenter': 'utkarsh530', 'type': 'User'}, {'comment_id': 427465817, 'comment_body': 'in fact, this should probably be a static array.', 'comment_created': datetime.datetime(2020, 5, 19, 17, 14, 18, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}, {'comment_id': 427465982, 'comment_body': '```suggestion\r\n  γₖ = SA[sum(1//j for j in 1:k) for k in 1:6]\r\n```\r\n\r\nSee https://github.com/JuliaArrays/StaticArrays.jl', 'comment_created': datetime.datetime(2020, 5, 19, 17, 14, 35, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}, {'comment_id': 427466965, 'comment_body': 'I guess it changes ', 'comment_created': datetime.datetime(2020, 5, 19, 17, 16, 4, tzinfo=datetime.timezone.utc), 'commenter': 'kanav99', 'type': 'User'}, {'comment_id': 429551493, 'comment_body': ""yup it's unsafe with aliasing, good catch"", 'comment_created': datetime.datetime(2020, 5, 23, 14, 36, 51, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}]","[{'commit_sha': '29b6ae5ba1d04cf9a6b767de113f024745d47c8f', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f641f2e08fee99c176db23f0957c27b41d31d1b', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c01dd177022ba974d3dca927629e19465142347d', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c35ab7eeaf8b3e5e92ce6fb0b85ab7589e9a8aeb', 'committer_username': 'ChrisRackauckas', 'committer_name': 'Christopher Rackauckas', 'committer_email': 'accounts@chrisrackauckas.com', 'commit_date': datetime.datetime(2012, 6, 4, 7, 19, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e560448c05c37de6867ff06ca1d1fc8fb699b3c3', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b4b77bd3898a5e2f788e82976aac155e16da7128', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '523689af2e8447af011f34705637e408968c24f0', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40edcecd54edfeae4fe41b8b552487f2b8d21a04', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72a09b3b0decef11d20ad3b1a2fa525d71e8286e', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d25b60387443f4b1e7e8328d30833588277bed9', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}]",Utkarsh,37050056,,User,,79,,14,27
426089376,[WIP] Fix quasi-constant step-size,"Hi,
I trying to investigate some issues in BDF and NDF methods regarding step-sizing and adaptivity. In continuation of my work in #1130, these are some changes which improve the condition of our native methods. Eg, in this problem:
```
    function test!(du, u, p, t)
        du[1] = -10 * u[1]
        du[2] = -0.01 * u[2]
    end
    u0 = [1.01;1.01]
    tspan = (0.0, 1.0)
    prob = ODEProblem(test!, u0, tspan)
```
Before
```
julia> @time sol = solve(prob, QNDF(),dt=0.0003762464317199949)
  0.001269 seconds (2.00 k allocations: 96.031 KiB)
retcode: Success
Interpolation: 3rd order Hermite
t: 57-element Array{Float64,1}:
 0.0
 0.0003762464317199949
 0.0007524928634399898
 0.0011287392951599847
 ⋮
 0.9160247003917301
 0.9561793519118824
 0.9963340034320347
 1.0
u: 57-element Array{Array{Float64,1},1}:
 [1.01, 1.01]
 [1.0062141551458024, 1.0099961999253373]
 [1.002439322196357, 1.0099923998617577]
 [0.998677935857326, 1.009988599811753]
 ⋮
 [0.0002270227078929404, 1.0007912559599195]
 [0.00016161620087708244, 1.0003895490017316]
 [0.00011505302152898248, 0.9999880032770568]
 [0.00011095671901396133, 0.9999513448278741]
```
After:
```
julia> @time sol = solve(prob, QNDF(),dt=0.0003762464317199949)
  0.000682 seconds (1.39 k allocations: 68.281 KiB)
retcode: Success
Interpolation: 3rd order Hermite
t: 48-element Array{Float64,1}:
 0.0
 0.0003762464317199949
 0.0007524928634399898
 0.004318468156626569
 ⋮
 0.8571814866852462
 0.8945742353712266
 0.931966984057207
 1.0
u: 48-element Array{Array{Float64,1},1}:
 [1.01, 1.01]
 [1.0062141551458024, 1.0099961999253373]
 [1.002439322196357, 1.0099923998617577]
 [0.967732287953072, 1.0099563848613449]
 ⋮
 [0.00023724772286501733, 1.0013796875312944]
 [0.0001633863073823495, 1.0010053140829667]
 [0.0001125213183378095, 1.0006310806294636]
 [5.5999380529975196e-5, 0.9999505527476182]
```
There's a slight decrease in the allocations as well. 
For more stiff problem something like POLLU, benchmarks have improved for high tolerances up to 10^-14 (Iterations have been going above max iterations in that case, now that's resolved but can do much better).

I tried to investigate what was causing the problem, it seems the current step-sizing when increases the order, the step-size tends to get rejected before scaling to a smaller one, resulting in smaller step-size and increasing failed iterations. I found this [paper](https://dl.acm.org/doi/pdf/10.1145/355626.355636) which was originally mentioned in the Shampine's paper is a good reference from which I would be making some changes to try to make it better.

Regarding benchmarking and making the method faster, in the IIP version there's seems to be some increasing time allocations from `linsolve` which I did mentioned earlier and Chris pointed out they are working on that.
@ChrisRackauckas @kanav99 let me know I am on the right track and if there's something else I should pivot onto.",True,1158,https://api.github.com/repos/SciML/OrdinaryDiffEq.jl/pulls/1158,https://github.com/SciML/OrdinaryDiffEq.jl/pull/1158,closed,2,2,1,1,0,0,0,0,[],2020-06-01 16:29:52+00:00,2020-06-11 17:38:25+00:00,868113.0,"10 days, 1:08:33",[],"[{'commit_sha': '5eae4f9f6eab06eff294dd81291460a96805ba2c', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}]",Utkarsh,37050056,,User,,79,,14,27
426089376,[WIP] Fix quasi-constant step-size,"Hi,
I trying to investigate some issues in BDF and NDF methods regarding step-sizing and adaptivity. In continuation of my work in #1130, these are some changes which improve the condition of our native methods. Eg, in this problem:
```
    function test!(du, u, p, t)
        du[1] = -10 * u[1]
        du[2] = -0.01 * u[2]
    end
    u0 = [1.01;1.01]
    tspan = (0.0, 1.0)
    prob = ODEProblem(test!, u0, tspan)
```
Before
```
julia> @time sol = solve(prob, QNDF(),dt=0.0003762464317199949)
  0.001269 seconds (2.00 k allocations: 96.031 KiB)
retcode: Success
Interpolation: 3rd order Hermite
t: 57-element Array{Float64,1}:
 0.0
 0.0003762464317199949
 0.0007524928634399898
 0.0011287392951599847
 ⋮
 0.9160247003917301
 0.9561793519118824
 0.9963340034320347
 1.0
u: 57-element Array{Array{Float64,1},1}:
 [1.01, 1.01]
 [1.0062141551458024, 1.0099961999253373]
 [1.002439322196357, 1.0099923998617577]
 [0.998677935857326, 1.009988599811753]
 ⋮
 [0.0002270227078929404, 1.0007912559599195]
 [0.00016161620087708244, 1.0003895490017316]
 [0.00011505302152898248, 0.9999880032770568]
 [0.00011095671901396133, 0.9999513448278741]
```
After:
```
julia> @time sol = solve(prob, QNDF(),dt=0.0003762464317199949)
  0.000682 seconds (1.39 k allocations: 68.281 KiB)
retcode: Success
Interpolation: 3rd order Hermite
t: 48-element Array{Float64,1}:
 0.0
 0.0003762464317199949
 0.0007524928634399898
 0.004318468156626569
 ⋮
 0.8571814866852462
 0.8945742353712266
 0.931966984057207
 1.0
u: 48-element Array{Array{Float64,1},1}:
 [1.01, 1.01]
 [1.0062141551458024, 1.0099961999253373]
 [1.002439322196357, 1.0099923998617577]
 [0.967732287953072, 1.0099563848613449]
 ⋮
 [0.00023724772286501733, 1.0013796875312944]
 [0.0001633863073823495, 1.0010053140829667]
 [0.0001125213183378095, 1.0006310806294636]
 [5.5999380529975196e-5, 0.9999505527476182]
```
There's a slight decrease in the allocations as well. 
For more stiff problem something like POLLU, benchmarks have improved for high tolerances up to 10^-14 (Iterations have been going above max iterations in that case, now that's resolved but can do much better).

I tried to investigate what was causing the problem, it seems the current step-sizing when increases the order, the step-size tends to get rejected before scaling to a smaller one, resulting in smaller step-size and increasing failed iterations. I found this [paper](https://dl.acm.org/doi/pdf/10.1145/355626.355636) which was originally mentioned in the Shampine's paper is a good reference from which I would be making some changes to try to make it better.

Regarding benchmarking and making the method faster, in the IIP version there's seems to be some increasing time allocations from `linsolve` which I did mentioned earlier and Chris pointed out they are working on that.
@ChrisRackauckas @kanav99 let me know I am on the right track and if there's something else I should pivot onto.",True,1158,https://api.github.com/repos/SciML/OrdinaryDiffEq.jl/pulls/1158,https://github.com/SciML/OrdinaryDiffEq.jl/pull/1158,closed,2,2,1,1,0,0,0,0,[],2020-06-01 16:29:52+00:00,2020-06-11 17:38:25+00:00,868113.0,"10 days, 1:08:33",[],"[{'commit_sha': '5eae4f9f6eab06eff294dd81291460a96805ba2c', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}]",Utkarsh,37050056,,User,,79,,14,27
428033737,Update QNDF2 to new multistep solver,"https://www.mathworks.com/help/pdf_doc/otherdocs/ode_suite.pdf

I have used this equation :
![image](https://user-images.githubusercontent.com/37050056/83800144-96ade100-a6c4-11ea-886c-22dc5111d40c.png)",True,1164,https://api.github.com/repos/SciML/OrdinaryDiffEq.jl/pulls/1164,https://github.com/SciML/OrdinaryDiffEq.jl/pull/1164,closed,45,16,2,4,2,0,0,0,[],2020-06-04 19:08:09+00:00,2020-06-05 01:31:58+00:00,23029.0,6:23:49,[],"[{'commit_sha': '5b1de0940435bacc25c24ee3c6d21e7c6420404a', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d2c90ef3f66bbbf75b18c2e47156ad9c27410af', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46a5de5ceb956df59143cac01c7c5493e60404f3', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34a3d1b7066cfafd6f99a07659b489a3b0e4d431', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}]",Utkarsh,37050056,,User,,79,,14,27
428504199,Update QNDF to new nlsolver,,True,1165,https://api.github.com/repos/SciML/OrdinaryDiffEq.jl/pulls/1165,https://github.com/SciML/OrdinaryDiffEq.jl/pull/1165,closed,48,22,2,3,11,6,0,0,[],2020-06-05 14:49:58+00:00,2020-06-06 15:15:59+00:00,87961.0,"1 day, 0:26:01","[{'comment_id': 435984510, 'comment_body': ""I am out of sync due to the MLH things, but we don't handle mass matrix intrinsically in nlsolve? tmp depending on mass matrix sounds spectical"", 'comment_created': datetime.datetime(2020, 6, 5, 15, 7, 58, tzinfo=datetime.timezone.utc), 'commenter': 'kanav99', 'type': 'User'}, {'comment_id': 435984723, 'comment_body': 'this is nice', 'comment_created': datetime.datetime(2020, 6, 5, 15, 8, 18, tzinfo=datetime.timezone.utc), 'commenter': 'kanav99', 'type': 'User'}, {'comment_id': 435996807, 'comment_body': 'No, this is right.', 'comment_created': datetime.datetime(2020, 6, 5, 15, 27, 53, tzinfo=datetime.timezone.utc), 'commenter': 'YingboMa', 'type': 'User'}, {'comment_id': 436001592, 'comment_body': 'Alright 👍 I need to see the new nlsolver changes.', 'comment_created': datetime.datetime(2020, 6, 5, 15, 35, 44, tzinfo=datetime.timezone.utc), 'commenter': 'kanav99', 'type': 'User'}, {'comment_id': 436053209, 'comment_body': ""I'm a bit surprised about the mix of broadcasted and non-broadcasted expressions (not only in these lines, here it would be just `uprev .+ sum(D)`, but also above e.g. in `ϕ += γₖ[i] * D[i]`). Shouldn't we consistently use broadcasting? Or does it still impact performance?"", 'comment_created': datetime.datetime(2020, 6, 5, 17, 12, 5, tzinfo=datetime.timezone.utc), 'commenter': 'devmotion', 'type': 'User'}, {'comment_id': 436090606, 'comment_body': ""Yeah I agree, actually, there's some dimensional problem like that D is 1x5 matrix and γ is 6-Array, hence probably the person who did before looped using []; it was originally defined like that. We can change it probably for more consistent operation using broadcast, maybe in another PR."", 'comment_created': datetime.datetime(2020, 6, 5, 18, 20, 43, tzinfo=datetime.timezone.utc), 'commenter': 'utkarsh530', 'type': 'User'}]","[{'commit_sha': 'a357d78d8f2b2af9fce19ff88b6f39b1113e1286', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '37a9748362957c19ef66463478e7742c20089f10', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd38e0f2ebd3ec8bf82c9f1abac0423ec7bc48b91', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}]",Utkarsh,37050056,,User,,79,,14,27
432003706,QNDF Fixes,"In continuation of comments mentioned in #1158 , here are some fixes made in QNDF.
Results:
```
    function test!(du, u, p, t)
        du[1] = -10 * u[1]
        du[2] = -0.01 * u[2]
    end
    u0 = [1.01;1.01]
    tspan = (0.0, 1.0)
    prob = ODEProblem(test!, u0, tspan)
    @time sol = solve(prob, QNDF()) 
```
Before:
```
julia> @time sol = solve(prob, QNDF())
  0.000780 seconds (2.08 k allocations: 101.531 KiB)
julia> sol.destats
DiffEqBase.DEStats
Number of function 1 evaluations:                  361
Number of function 2 evaluations:                  0
Number of W matrix evaluations:                    57
Number of linear solves:                           243
Number of Jacobians created:                       1
Number of nonlinear solver iterations:             243
Number of nonlinear solver convergence failures:   0
Number of rootfind condition calls:                0
Number of accepted steps:                          68
Number of rejected steps:                          46

```
After
```
julia> @time sol = solve(prob, QNDF())
  0.000682 seconds (1.57 k allocations: 81.781 KiB)
julia> sol.destats
DiffEqBase.DEStats
Number of function 1 evaluations:                  247
Number of function 2 evaluations:                  0
Number of W matrix evaluations:                    28
Number of linear solves:                           173
Number of Jacobians created:                       1
Number of nonlinear solver iterations:             173
Number of nonlinear solver convergence failures:   0
Number of rootfind condition calls:                0
Number of accepted steps:                          70
Number of rejected steps:                          11
```
@ChrisRackauckas @kanav99 please review.",False,1173,https://api.github.com/repos/SciML/OrdinaryDiffEq.jl/pulls/1173,https://github.com/SciML/OrdinaryDiffEq.jl/pull/1173,closed,39,17,2,5,3,11,0,0,[],2020-06-09 18:56:46+00:00,2022-01-25 07:28:46+00:00,51366720.0,"594 days, 12:32:00","[{'comment_id': 438739169, 'comment_body': 'Why is qold used as dt? I think qold is unitless', 'comment_created': datetime.datetime(2020, 6, 11, 12, 15, 4, tzinfo=datetime.timezone.utc), 'commenter': 'kanav99', 'type': 'User'}, {'comment_id': 438740299, 'comment_body': 'there must be a better way to fill it recursively with zeros\r\n', 'comment_created': datetime.datetime(2020, 6, 11, 12, 17, 19, tzinfo=datetime.timezone.utc), 'commenter': 'kanav99', 'type': 'User'}, {'comment_id': 438741577, 'comment_body': 'I have changed some definitions here https://github.com/SciML/OrdinaryDiffEq.jl/pull/1173/files#diff-c90c88b38a0b685e7edd6abc54fa1ef8R147-R151', 'comment_created': datetime.datetime(2020, 6, 11, 12, 19, 55, tzinfo=datetime.timezone.utc), 'commenter': 'utkarsh530', 'type': 'User'}, {'comment_id': 438746015, 'comment_body': 'You would probably need to change definitions at many places for q and qold. Also this wont work with units. qold and q are used as ratios, make sure that nothing funny is happening. Also this would make a problem for composite algorithms, but that can be handled later', 'comment_created': datetime.datetime(2020, 6, 11, 12, 28, 48, tzinfo=datetime.timezone.utc), 'commenter': 'kanav99', 'type': 'User'}, {'comment_id': 438748342, 'comment_body': ""https://github.com/SciML/OrdinaryDiffEq.jl/blob/master/src/integrators/controllers.jl#L33\r\nhttps://github.com/SciML/OrdinaryDiffEq.jl/blob/master/src/integrators/controllers.jl#L108\r\nI tried to follow what was done in the standard step-size controller and how q and qold were used by `step_accept_controller` and `step_reject_controller`. Let me know if it's okay."", 'comment_created': datetime.datetime(2020, 6, 11, 12, 33, 26, tzinfo=datetime.timezone.utc), 'commenter': 'utkarsh530', 'type': 'User'}, {'comment_id': 438749781, 'comment_body': ""ohh, that's... strange. I think we have a separate issue then. Surprised this works with units."", 'comment_created': datetime.datetime(2020, 6, 11, 12, 36, 10, tzinfo=datetime.timezone.utc), 'commenter': 'kanav99', 'type': 'User'}, {'comment_id': 438750805, 'comment_body': ""Yup there's a difference of `q` & `qold` as to how algorithms use them."", 'comment_created': datetime.datetime(2020, 6, 11, 12, 38, 3, tzinfo=datetime.timezone.utc), 'commenter': 'utkarsh530', 'type': 'User'}, {'comment_id': 438950382, 'comment_body': ""yeah... it's kind of kludgy and probably is worth refactoring."", 'comment_created': datetime.datetime(2020, 6, 11, 17, 27, 37, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}, {'comment_id': 438951687, 'comment_body': 'I would definitely like to look into it!', 'comment_created': datetime.datetime(2020, 6, 11, 17, 29, 59, tzinfo=datetime.timezone.utc), 'commenter': 'utkarsh530', 'type': 'User'}, {'comment_id': 438952492, 'comment_body': ""I don't know of one 🥘"", 'comment_created': datetime.datetime(2020, 6, 11, 17, 31, 23, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}, {'comment_id': 438989585, 'comment_body': ""Doesn't solve the problem, but one could also just iterate over `D` and `D2` without writing down the indices explicitly. Would still use `fill!` recursively but one doesn't have to know and write down the dimensions explicitly."", 'comment_created': datetime.datetime(2020, 6, 11, 18, 30, 17, tzinfo=datetime.timezone.utc), 'commenter': 'devmotion', 'type': 'User'}]","[{'commit_sha': '20f17c524803be549d0add0945bc68d766e57364', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b48778ce2a9b1ffabe776fe99e1c9cc55f49d4a', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '132e259f5e283c68cfb185f7a38f7af0b1facbe4', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '43c36fce35113996bd9b72e0538783b57f5199ee', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee9468f4c7a90a2e48832f32daeb732a8fab7045', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}]",Utkarsh,37050056,,User,,79,,14,27
433304704,New KenCarp4,"Addresses #860.
[WIP] The current implementation is only for SplitODEProblem. OOP passes convergence tests, IIP has first-order convergence.",True,1177,https://api.github.com/repos/SciML/OrdinaryDiffEq.jl/pulls/1177,https://github.com/SciML/OrdinaryDiffEq.jl/pull/1177,closed,760,16,7,18,25,8,0,0,[],2020-06-11 20:01:10+00:00,2020-06-19 21:41:38+00:00,697228.0,"8 days, 1:40:28","[{'comment_id': 439039765, 'comment_body': 'is this a new derivation?\r\n', 'comment_created': datetime.datetime(2020, 6, 11, 20, 8, 49, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}, {'comment_id': 439043753, 'comment_body': 'Nope its from KenCarp4, by mistake it got copied. I have to implement stage predictors for  `ODEProblem`. Could we use predictors from KenCarp5 till stage 7 for the new KenCarp4?', 'comment_created': datetime.datetime(2020, 6, 11, 20, 14, 8, tzinfo=datetime.timezone.utc), 'commenter': 'utkarsh530', 'type': 'User'}, {'comment_id': 439045034, 'comment_body': ""It's always best to interpolate when you can, so find the ordering on the `c_i` and use that to know what to interpolate by. Then for the others try an build a decent low-order extrapolation"", 'comment_created': datetime.datetime(2020, 6, 11, 20, 15, 48, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}, {'comment_id': 441147577, 'comment_body': 'Do you have to cast these?\r\n', 'comment_created': datetime.datetime(2020, 6, 16, 21, 17, 35, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}, {'comment_id': 441148030, 'comment_body': 'we will want a dispatch that goes straight to Float64, since bigs will allocate if large enough, so surprisingly the startup time in these functions can get measurable.', 'comment_created': datetime.datetime(2020, 6, 16, 21, 18, 35, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}, {'comment_id': 442258594, 'comment_body': 'I guess, we should use broadcasting in this branch as well?\r\n```suggestion\r\n    z₁ = dt .* integrator.fsalfirst\r\n```', 'comment_created': datetime.datetime(2020, 6, 18, 14, 14, 5, tzinfo=datetime.timezone.utc), 'commenter': 'devmotion', 'type': 'User'}, {'comment_id': 442260424, 'comment_body': 'It seems here and below there are many places where we could use broadcasting - is the general strategy to use it? Or is it not really needed for the typical use cases such as static arrays?\r\n\r\nIn any case, I think we should consistently use either broadcasting or not (apart from, e.g., when broadcasting impacts performance too much as a workaround).', 'comment_created': datetime.datetime(2020, 6, 18, 14, 16, 34, tzinfo=datetime.timezone.utc), 'commenter': 'devmotion', 'type': 'User'}, {'comment_id': 442264352, 'comment_body': 'it\'s not needed, but we ""should"". However, StaticArrays had a bug for a bit that their broadcasting was a lot slower, which is why a lot of the out of place stuff doesn\'t do broadcasting. If that\'s fixed then we should though.', 'comment_created': datetime.datetime(2020, 6, 18, 14, 21, 58, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}]","[{'commit_sha': 'bc35eea2ddcc7f89934beb98aa36ea7048d6cb69', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f43cffb72d51615f02af4b2e6626e682e4928888', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '54a4d07253bd40015c5b38ad3f9fa505d403ef43', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9ac666c746272deded5debb235f11ce69f394bf', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd18beb1504e262663f59528c7c1b6205088cdfe9', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f3f0b405e147c4d1677b76bc3dc36a40973e851', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee32d42404293345b3563405200512666904b18f', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe0f44ab28e546c672dda0507053c933f206ad45', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e15706185707a6e0a0544e6405db1136eb7040f', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1fe16d00400e3733e05bd8fcd675a25c2cef97b', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c8bb05e0865584117d46eb1099b38a95a0f88b4', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4a90ee17be1f69ae81a48827a770266a91db1774', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '012ecc72cb825bc20bfa51fa88b63e6e45806ef0', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aee7d4d4ff2350737694245775eb502f99cddfd2', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a82afda09e1791c10fb0aa75fa524d9549d33fc', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf0a639c9f5fc81eaeaca19d0f609f4c04b92948', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c8b1bf868ef04d66e087e140d5751046d2b0c95', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1a8819b29faa22b24724ea89840ecade48ee727', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}]",Utkarsh,37050056,,User,,79,,14,27
433884960,Fix redundant copies of tdir_t in tstops heap,"Fixes https://github.com/SciML/DifferentialEquations.jl/issues/616

MWE:
```
tspan = (0.0, 365.0)
prob = ODEProblem(system, u0, tspan)
integrator = init(prob, Tsit5())
step!(integrator, 365.0, true)
#integrator.t = 365.0
step!(integrator, 365.0, true)
#Warning: dt <= dtmin. Aborting.
```
Cause: `integrator.opts.tstops` has `tspan[end]` pushed into the heap.  A duplicate copy is pushed in heap after `step!(integrator,365.0,true)` for eg. `[365.0,365,0]`. The `handle_stop` removes only the top element when integration has reach `tspan[end]`. And then it pushes another `tstop` into heap which causes `integrator.dt = 0` because top element hasn't changed. Hence we need to remove all similar copies of` tspan[end]` from the heap, hence the change.",True,1178,https://api.github.com/repos/SciML/OrdinaryDiffEq.jl/pulls/1178,https://github.com/SciML/OrdinaryDiffEq.jl/pull/1178,closed,4,1,1,1,0,0,0,0,[],2020-06-12 21:06:59+00:00,2020-06-13 00:46:17+00:00,13158.0,3:39:18,[],"[{'commit_sha': 'f8745b4dbe739fafcdf6e2a2d16e982815f6cea9', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}]",Utkarsh,37050056,,User,,79,,14,27
436668371,New KenCarp5,"Addresses #860 .

Benchmarks:

POLLU:
![wp_kencarp58_pollu](https://user-images.githubusercontent.com/37050056/85053858-c37bf100-b1b8-11ea-882e-09e309133d7c.png)
ROBER:
![wp_kencarp58_rober](https://user-images.githubusercontent.com/37050056/85053865-c676e180-b1b8-11ea-9bab-d268eec99abb.png)

Allen Cahn:
![wp_kencarp58_allen_cahn](https://user-images.githubusercontent.com/37050056/85053853-c0810080-b1b8-11ea-85b1-03b1a0652777.png)

@ChrisRackauckas @kanav99  please review.",True,1187,https://api.github.com/repos/SciML/OrdinaryDiffEq.jl/pulls/1187,https://github.com/SciML/OrdinaryDiffEq.jl/pull/1187,closed,826,3,7,14,1,0,0,0,[],2020-06-18 17:40:14+00:00,2020-06-19 03:01:41+00:00,33687.0,9:21:27,[],"[{'commit_sha': 'b76f325da210eec035add266a37390a2e6515366', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46b3fa50f7f3dd9019b443ec2fbb7049e666e859', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4ea22339c1d8bf89f18e35ae4c305c12be87f64', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f7f1a4ad7270e7e0113d2ea8b979dd6c5b4d1325', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d9cbd715a5d1df2717d378ba60506de6148377f', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b060370bea707641260bad0cbaabdce9805b7efd', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50e608011fe144103ee475c54a222c930f862301', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1fc993047af252e33f246ebd50daf1f46ff6a8b', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'adf7eaa5c43c5ce0b0960abddc17683eeb90350c', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e693e472dd0b4b395b88e1403a84ba2d521369e3', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'efe71b6723c72eaa9136930751fa04528d9e2f2e', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61cd4ef024b6fd68b4777af6383ca9829a1bcfe4', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96c7b8a49165a2b48531d33724242e4b1fb3993c', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8185a645c3107defcf5e40c9aad2281e2023ed93', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}]",Utkarsh,37050056,,User,,79,,14,27
438027959,KenCarp47 & KenCarp58 Tests,"Hi,
I have added a bunch of tests for new KenCarp methods. Please have a look.
@ChrisRackauckas @kanav99 ",True,1189,https://api.github.com/repos/SciML/OrdinaryDiffEq.jl/pulls/1189,https://github.com/SciML/OrdinaryDiffEq.jl/pull/1189,closed,39,1,5,4,7,1,0,0,[],2020-06-22 15:43:10+00:00,2020-06-25 16:25:15+00:00,261725.0,"3 days, 0:42:05","[{'comment_id': 443715760, 'comment_body': 'We can have similar autodiff tests for KenCarp58', 'comment_created': datetime.datetime(2020, 6, 22, 17, 26, 27, tzinfo=datetime.timezone.utc), 'commenter': 'kanav99', 'type': 'User'}]","[{'commit_sha': '3d8694e8f2a1e8edf6fdc322485f28a53e4eaa56', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '41911de1e84c4b8b426abaf60054e60b9dcd786c', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e89707bd2ff375a229b8fe45b8c0a2831910eea2', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aeaf9b521072fa02184f6d2e37bc915436ff57fc', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}]",Utkarsh,37050056,,User,,79,,14,27
440219642,Split methods test timeout fix in Travis,"As discussed [here](https://github.com/SciML/OrdinaryDiffEq.jl/pull/1189#issuecomment-649678345), adding print statements to prevent timeout in CI. Let's see the output of Travis now.",True,1192,https://api.github.com/repos/SciML/OrdinaryDiffEq.jl/pulls/1192,https://github.com/SciML/OrdinaryDiffEq.jl/pull/1192,closed,8,0,1,1,0,0,0,0,[],2020-06-25 19:39:36+00:00,2020-06-26 01:20:24+00:00,20448.0,5:40:48,[],"[{'commit_sha': '2a7e27e862d6711dc5d31c185211af1022e094bd', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}]",Utkarsh,37050056,,User,,79,,14,27
444148222,Add sequences for ImplicitEulerExtrapolation,"Hi,

I added a choice of sequences in ImplicitEulerExtrapolation similar to seulex. The default sequence is set to Bulirsch. There we some minor improvements in the method. Comparing with seulex:

```
function test!(du, u, p, t)
     du[1] = -10 * u[1]
     du[2] = -0.01 * u[2]
 end
 u0 = [1.01;1.01]
 tspan = (0.0, 1.0)
 prob = ODEProblem(test!, u0, tspan)
```
```
julia> sol = solve(prob,seulex())
retcode: Success
Interpolation: 1st order linear
t: 12-element Array{Float64,1}:
 0.0
 1.0e-6
 7.957010852370433e-6
 5.6357010852370424e-5
 ⋮
 0.171697546989057
 0.362553477748044
 0.8757951760869469
 1.0
u: 12-element Array{Array{Float64,1},1}:
 [1.01, 1.01]
 [1.0099899000505004, 1.0099999898999994]
 [1.009919637387684, 1.0099999196341929]
 [1.0094309545603295, 1.0099994307943505]
 ⋮
 [0.18151135597475912, 1.0082673426661455]
 [0.02691950277797022, 1.006344839833677]
 [0.00015776855888100059, 1.001193090258896]
 [4.575739308257184e-5, 0.9999503320867008]
```

```
julia> sol = solve(prob,ImplicitEulerExtrapolation(),dt=1e-6)
┌ Warning: Threading in `ImplicitEulerExtrapolation` is currently disabled. Thus `threading` has been changed from `true` to `false`.
└ @ OrdinaryDiffEq C:\Users\Utkarsh\.julia\dev\OrdinaryDiffEq\src\algorithms.jl:65
retcode: Success
Interpolation: 3rd order Hermite
t: 14-element Array{Float64,1}:
 0.0
 1.0e-6
 1.1e-5
 0.00011099999999999999
 ⋮
 0.33900999182564423
 0.5605959154883677
 0.8354148791156211
 1.0
u: 14-element Array{Array{Float64,1},1}:
 [1.01, 1.01]
 [1.0099899000505, 1.0099999899]
 [1.0098889061104441, 1.009999888900006]
 [1.0088795221484086, 1.0099988789006225]
 ⋮
 [0.03404236668264801, 1.006581796382659]
 [0.0037126518729961797, 1.00435382215883]
 [0.00023777180592478287, 1.0015974566391057]
 [4.585389370221542e-5, 0.999950332087402]
```
I will make changes on adaptive step-sizing (which seems to be different from Hairer II for seulex) after this. It would help me compare benchmarks across different sequences.
@ChrisRackauckas please review.",True,1199,https://api.github.com/repos/SciML/OrdinaryDiffEq.jl/pulls/1199,https://github.com/SciML/OrdinaryDiffEq.jl/pull/1199,closed,79,29,4,7,1,0,0,0,[],2020-07-03 17:35:53+00:00,2020-07-04 15:26:27+00:00,78634.0,21:50:34,[],"[{'commit_sha': 'b0900acc1fa48bf504567f519b8e785fde75b41f', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f7477985292d407fa4649be80561a38782b96e08', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9b5d007e8d29e8689ab499220ca921cad3cb861', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc4cede05bde319b516ca5a22635c89a8c7dab9d', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a4278e2d65f88959df7bd5cc1aecc12c65f6e659', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46b469c3f5ceb6564b3abe5177d84ddf07531dda', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd4c7a7fc6a2a97af06ee6a1366e673358b8448d', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}]",Utkarsh,37050056,,User,,79,,14,27
444307696,DEstats update in Extrapolation Methods & fixes,"Hi,
I have made two fixes in this PR:
1. `integrator.destats.nf` has been updated where a function call is made.
2. According to the [thesis](https://github.com/AlthausKonstantin/Extrapolation/blob/master/Bachelor%20Theseis.pdf), it uses 2*subsequence for internal discretisation, so I guess it was a fluke that 4 * subsequence was being used. Even the stage_number calculation [here](https://github.com/SciML/OrdinaryDiffEq.jl/blob/master/src/caches/extrapolation_caches.jl#L370-L376) assumes that we are using the latter one. There would be trade-off I guess in the function evaluations and accuracy, so let me know to how judge that. (We can also update to use 4 * subsequence and update the corresponding work). Also the native code [here](https://github.com/AlthausKonstantin/Extrapolation/blob/master/Solver/adaptive-extrapolation-Hairer%26Wanner.jl#L318) and [here](https://github.com/AlthausKonstantin/Extrapolation/blob/master/Solver/adaptive-extrapolation-Hairer%26Wanner.jl#L422-L431) uses the argument that I just mentioned. 

A snippet from the thesis:
![image](https://user-images.githubusercontent.com/37050056/86517532-54a0c800-be47-11ea-8094-e718600aaaf9.png)
@ChrisRackauckas please have a look.
",True,1200,https://api.github.com/repos/SciML/OrdinaryDiffEq.jl/pulls/1200,https://github.com/SciML/OrdinaryDiffEq.jl/pull/1200,closed,55,25,1,3,4,0,0,0,[],2020-07-04 17:10:34+00:00,2020-07-04 21:01:09+00:00,13835.0,3:50:35,[],"[{'commit_sha': '6e2d9beca82c60cf783dc39771f304cf671f7945', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1bc05fd64020806a7378e56f69ac9a06c79f08c2', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3b27d61381293cfef2e98ed2edbf34d9a8bfece', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}]",Utkarsh,37050056,,User,,79,,14,27
444822095,Sequence factor option in explicit-extrapolation midpoint methods,"As discussed in #1200 , I have added choice in algorithms to set `sequence_factor`.
I would also be comparing benchmarks across this parameter as your comment had said earlier.
@ChrisRackauckas have a look.",True,1202,https://api.github.com/repos/SciML/OrdinaryDiffEq.jl/pulls/1202,https://github.com/SciML/OrdinaryDiffEq.jl/pull/1202,closed,58,34,3,8,3,0,0,0,[],2020-07-06 14:44:44+00:00,2020-07-08 23:51:44+00:00,205620.0,"2 days, 9:07:00",[],"[{'commit_sha': '070eb2a456b5117f534e8d6e912f19bea5776644', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4a2ab6ec67c8c18bad9037beec71059ad0bc6c44', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c9635de9c9f82b4ab66c2daf7082e28cf146ff13', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b4fb4ff5948d4e720157b58cfdce80c90f9d1889', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ff5d414e9eb036c462b4a5e0de3a0cc5d4a7742', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74a64e728fdd7652f7026b9dae11aaadbca46ba5', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1adb4859d48813394bca473ee973d08a1e9ec87d', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71b8803df1c5e7bc6973bf2c3fabda3a6a64b4a8', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}]",Utkarsh,37050056,,User,,79,,14,27
444920585,Updating recalculating Jacobian in internal discretisation,"Hi,

I had asked previously about `calc_W!` calculating Jacobian again or not. So I checked its dependent upon `do_newJW` in derivative utils, which I guess depends upon the type of function, time-step etc. Since we are using `calc_W!` inside the loop where we are computing at `t` from different time-steps, Jacobian won't be changed; but according to conditions of `calc_W!` it will change again. Hence we can call `calc_J` once and then `jacobian2W`, which we reduce significant Jacobian computations. I wanted to verify whether it's alright or there's something missing or wrong,

Results:
```
julia> function test!(du, u, p, t)
            du[1] = -10 * u[1]
            du[2] = -0.01 * u[2]
        end
test! (generic function with 1 method)

julia>  u0 = [1.01;1.01]
2-element Array{Float64,1}:
 1.01
 1.01

julia>  tspan = (0.0, 1.0)
(0.0, 1.0)

julia>  prob = ODEProblem(test!, u0, tspan)
ODEProblem with uType Array{Float64,1} and tType Float64. In-place: true
timespan: (0.0, 1.0)
u0: [1.01, 1.01]
```
Before:
```
julia> sol = solve(prob, ImplicitEulerExtrapolation())
┌ Warning: Threading in `ImplicitEulerExtrapolation` is currently disabled. Thus `threading` has been changed from `true` to `false`.
└ @ OrdinaryDiffEq C:\Users\Utkarsh\.julia\dev\OrdinaryDiffEq\src\algorithms.jl:79
retcode: Success
Interpolation: 3rd order Hermite
t: 16-element Array{Float64,1}:
 0.0
 0.042676515843044854
 0.07432852139229627
 0.10598052694154769
 0.1617777834747844
 0.21810866954096592
 0.28237844251361827
 0.35143631054963526
 0.4252212722171894
 0.5030685784491105
 0.5848092495899999
 0.6707947178492887
 0.7624982468589633
 0.8635353868350443
 0.981433582767741
 1.0
u: 16-element Array{Array{Float64,1},1}:
 [1.01, 1.01]
 [0.6591707591090262, 1.0095690591517938]
 [0.48043329650596045, 1.0092495608636434]
 [0.3500865822553578, 1.008930163687104]
 [0.2004026417080523, 1.0083673653630436]
 [0.11410792653171879, 1.0077995030472857]
 [0.060018366105715114, 1.0071520006910952]
 [0.030094280777413034, 1.0064567230911077]
 [0.0143940781149894, 1.005714383285022]
 [0.006611041082558029, 1.0049317663918564]
 [0.0029206357630524363, 1.004110664054499]
 [0.001236761409709058, 1.0032476458864499]
 [0.0004946684169200564, 1.0023280541039707]
 [0.0001802616283618548, 1.0013158419461423]
 [5.606965003850673e-5, 1.0001360042733092]
 [4.656883995064487e-5, 0.999950332086739]

julia> sol.destats
DiffEqBase.DEStats
Number of function 1 evaluations:                  328
Number of function 2 evaluations:                  0
Number of W matrix evaluations:                    74
Number of linear solves:                           236
Number of Jacobians created:                       74
Number of nonlinear solver iterations:             0
Number of nonlinear solver convergence failures:   0
Number of rootfind condition calls:                0
Number of accepted steps:                          15
Number of rejected steps:                          0
```
After:
```
julia> sol = solve(prob, ImplicitEulerExtrapolation())
┌ Warning: Threading in `ImplicitEulerExtrapolation` is currently disabled. Thus `threading` has been changed from `true` to `false`.
└ @ OrdinaryDiffEq C:\Users\Utkarsh\.julia\dev\OrdinaryDiffEq\src\algorithms.jl:79
retcode: Success
Interpolation: 3rd order Hermite
t: 16-element Array{Float64,1}:
 0.0
 0.042676515843044854
 0.07432852139229627
 0.10598052694154769
 0.1617777834747844
 0.21810866954096592
 0.28237844251361827
 0.35143631054963526
 0.4252212722171894
 0.5030685784491105
 0.5848092495899999
 0.6707947178492887
 0.7624982468589633
 0.8635353868350443
 0.981433582767741
 1.0
u: 16-element Array{Array{Float64,1},1}:
 [1.01, 1.01]
 [0.6591707591090262, 1.0095690591517938]
 [0.48043329650596045, 1.0092495608636434]
 [0.3500865822553578, 1.008930163687104]
 [0.2004026417080523, 1.0083673653630436]
 [0.11410792653171879, 1.0077995030472857]
 [0.060018366105715114, 1.0071520006910952]
 [0.030094280777413034, 1.0064567230911077]
 [0.0143940781149894, 1.005714383285022]
 [0.006611041082558029, 1.0049317663918564]
 [0.0029206357630524363, 1.004110664054499]
 [0.001236761409709058, 1.0032476458864499]
 [0.0004946684169200564, 1.0023280541039707]
 [0.0001802616283618548, 1.0013158419461423]
 [5.606965003850673e-5, 1.0001360042733092]
 [4.656883995064487e-5, 0.999950332086739]

julia> sol.destats
DiffEqBase.DEStats
Number of function 1 evaluations:                  269
Number of function 2 evaluations:                  0
Number of W matrix evaluations:                    74
Number of linear solves:                           236
Number of Jacobians created:                       15
Number of nonlinear solver iterations:             0
Number of nonlinear solver convergence failures:   0
Number of rootfind condition calls:                0
Number of accepted steps:                          15
Number of rejected steps:                          0
```
@ChrisRackauckas @kanav99 can you have a look if it's okay to proceed to make changes in other methods?",True,1203,https://api.github.com/repos/SciML/OrdinaryDiffEq.jl/pulls/1203,https://github.com/SciML/OrdinaryDiffEq.jl/pull/1203,closed,33,13,1,8,1,1,0,0,[],2020-07-06 17:54:12+00:00,2020-07-08 23:52:28+00:00,194296.0,"2 days, 5:58:16","[{'comment_id': 450589214, 'comment_body': 'should be possible to do the same to the multithreading version too, right?', 'comment_created': datetime.datetime(2020, 7, 7, 3, 18, 8, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}]","[{'commit_sha': 'cde109059348e69efb11cca3627a3c31771974f2', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '145aaf423c6e4d5d5cba9dd7d970e57002404994', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c72142de08764b6f06f71ce319da19037395324', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a86fed2afce65423dbb778922284a0d865ec40f', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d04cd250d7647179fde80633c72dd98b81d3cd9', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34636fd18b67957746ce8cc0b09f1f65221dc542', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a8b4bed7c5690a1ff9e5510dca7743969d28d517', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e8ef6f27f6c7f4b44c1d143fbb53c38e79a0692', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}]",Utkarsh,37050056,,User,,79,,14,27
447774339,Update T calculation in adaptive step-sizing of Implicit Extrapolation Methods,"Hi, 
It seems to me that while calculating T for higher-order for using in adaptive step-sizing, the calculation was being done using explicit midpoint rule. Since we are using Semi-Implicit Method in Implicit Midpoint, the T update for higher-order must be done using that formula. The changes also reflect the results:
(Prob with Low Tolerance)
```function test!(du, u, p, t)
     du[1] = -10 * u[1]
     du[2] = -0.01 * u[2]
 end
 u0 = [1.01;1.01]
 tspan = (0.0, 1.0)
 prob = ODEProblem(test!, u0, tspan)
```
**Deuflhard adaptivity**

Before:
```
julia> sol = solve(prob2,ImplicitDeuflhardExtrapolation(),abstol=1/10^10,reltol=1/10^10)
retcode: Success
Interpolation: 3rd order Hermite
t: 888-element Array{Float64,1}:
 0.0
 0.017050171615874587
 0.05115051484762376
 0.06772480113669428
 ⋮
 0.9867500091857027
 0.9940131961176869
 0.9972786827976968
 1.0
u: 888-element Array{Array{Float64,1},1}:
 [1.01, 1.01]
 [0.8516740589157609, 1.0098278079466156]
 [0.6055883479052939, 1.0094835119044607]
 [0.5130932479154474, 1.0093162110819989]
 ⋮
 [5.23629936377725e-5, 1.0000828341921708]
 [4.8695694504693576e-5, 1.00001019894432]
 [4.713122586873632e-5, 0.9999775442776444]
 [4.5865930152960936e-5, 0.9999503320869795]

julia> sol.destats
DiffEqBase.DEStats
Number of function 1 evaluations:                  23690
Number of function 2 evaluations:                  0
Number of W matrix evaluations:                    3583
Number of linear solves:                           10914
Number of Jacobians created:                       1775
Number of nonlinear solver iterations:             0
Number of nonlinear solver convergence failures:   0
Number of rootfind condition calls:                0
Number of accepted steps:                          887
Number of rejected steps:                          888
```
After:
```
julia> sol = solve(prob,ImplicitDeuflhardExtrapolation(),abstol=1/10^10,reltol=1/10^10)
retcode: Success
Interpolation: 3rd order Hermite
t: 23-element Array{Float64,1}:
 0.0
 0.07426470725777685
 0.07723529554808793
 0.08226746560099449
 ⋮
 0.943872811790557
 0.953854546431799
 0.980860403378464
 1.0
u: 23-element Array{Array{Float64,1},1}:
 [1.01, 1.01]
 [0.4806111567565677, 1.0092502049077194]
 [0.46654414888144063, 1.0092202246846091]
 [0.44364777756059715, 1.0091694402844846]
 ⋮
 [8.037750923138577e-5, 1.0005117336262639]
 [7.274186326961106e-5, 1.0004118701840938]
 [5.552639423099845e-5, 1.0001417368631054]
 [4.5854003520698434e-5, 0.9999503320866616]

julia> sol.destats
DiffEqBase.DEStats
Number of function 1 evaluations:                  527
Number of function 2 evaluations:                  0
Number of W matrix evaluations:                    113
Number of linear solves:                           578
Number of Jacobians created:                       30
Number of nonlinear solver iterations:             0
Number of nonlinear solver convergence failures:   0
Number of rootfind condition calls:                0
Number of accepted steps:                          22
Number of rejected steps:                          8
```
**HairerWanner Adaptivity**
Before:
```
julia> sol = solve(prob,ImplicitHairerWannerExtrapolation(),abstol=1/10^10,reltol=1/10^10)
retcode: Success
Interpolation: 3rd order Hermite
t: 164-element Array{Float64,1}:
 0.0
 0.018597328040457235
 0.023893516271022718
 0.026376811462331555
 ⋮
 0.9322661429166624
 0.9550863670182133
 0.9763483387938785
 1.0
u: 164-element Array{Array{Float64,1},1}:
 [1.01, 1.01]
 [0.8385987376513978, 1.0098121844516683]
 [0.7953405972534116, 1.0097587043138219]
 [0.7758331585604524, 1.0097336293358183]
 ⋮
 [9.026948329027718e-5, 1.0006278664497013]
 [7.185119271214167e-5, 1.000399546980653]
 [5.8089068333537456e-5, 1.0001868649223309]
 [4.585392861744542e-5, 0.9999503320866869]

julia> sol.destats
DiffEqBase.DEStats
Number of function 1 evaluations:                  4765
Number of function 2 evaluations:                  0
Number of W matrix evaluations:                    983
Number of linear solves:                           3956
Number of Jacobians created:                       326
Number of nonlinear solver iterations:             0
Number of nonlinear solver convergence failures:   0
Number of rootfind condition calls:                0
Number of accepted steps:                          163
Number of rejected steps:                          163
```
After
```
julia> sol = solve(prob,ImplicitHairerWannerExtrapolation(),abstol=1/10^10,reltol=1/10^10)
retcode: Success
Interpolation: 3rd order Hermite
t: 6-element Array{Float64,1}:
 0.0
 0.07426470725777685
 0.22142252720664862
 0.4615506878742195
 0.760831972088764
 1.0
u: 6-element Array{Array{Float64,1},1}:
 [1.01, 1.01]
 [0.4806111567565677, 1.0092502049077194]
 [0.11033049240135955, 1.0077661065595556]
 [0.009996137130707792, 1.0053490794867768]
 [0.0005012681466757007, 1.0023447557826006]
 [4.5853928719958735e-5, 0.9999503320866611]

julia> sol.destats
DiffEqBase.DEStats
Number of function 1 evaluations:                  274
Number of function 2 evaluations:                  0
Number of W matrix evaluations:                    36
Number of linear solves:                           298
Number of Jacobians created:                       5
Number of nonlinear solver iterations:             0
Number of nonlinear solver convergence failures:   0
Number of rootfind condition calls:                0
Number of accepted steps:                          5
Number of rejected steps:                          0
```
@ChrisRackauckas @kanav99 can you have a look if these changes are acceptable?",True,1208,https://api.github.com/repos/SciML/OrdinaryDiffEq.jl/pulls/1208,https://github.com/SciML/OrdinaryDiffEq.jl/pull/1208,closed,35,11,1,7,2,2,0,0,[],2020-07-11 14:23:50+00:00,2020-07-12 20:42:00+00:00,109090.0,"1 day, 6:18:10","[{'comment_id': 453234354, 'comment_body': ""what's this?"", 'comment_created': datetime.datetime(2020, 7, 11, 20, 58, 28, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}, {'comment_id': 453307195, 'comment_body': 'This is for the `T[n_curr + 1]` approximation using `h = sequence[n_curr+1]`. The mentioned code solves the semi-implicit Euler equation for the starting step. Then rest iteration for semi-implicit midpoint follows. This is similar to https://github.com/SciML/OrdinaryDiffEq.jl/blob/master/src/perform_step/extrapolation_perform_step.jl#L1646-L1666. Previously T[n_curr + 1] approximation was being done using explicit-midpoint, which I guess got copied from extrapolation methods adaptivity. Since we are now dealing with implicit methods, we should use the semi-implicit formula for getting T[n_curr + 1] as mentioned in the attached link [here](https://github.com/SciML/OrdinaryDiffEq.jl/blob/master/src/perform_step/extrapolation_perform_step.jl#L1646-L1666).', 'comment_created': datetime.datetime(2020, 7, 12, 11, 57, 5, tzinfo=datetime.timezone.utc), 'commenter': 'utkarsh530', 'type': 'User'}]","[{'commit_sha': '3a8e59e5710e6108d9c9a936602e312373016372', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '33d8be7c0b17557c5b18d5fc4153e3e8f8482c6e', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ca9ea85999c961802a53b65f08f5ab9684b4530', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b01f366bf11e00e4372b572e0b68e16e6850e49', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '59f5f8d70d3329aa1dac83e3a715b145b61ced77', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2cc382ec5bfca336ebd7f35f3ebff9d7c1a6a078', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ccbd076cc0b71e008724948da91dbf00202d8694', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}]",Utkarsh,37050056,,User,,79,,14,27
448367984,Update Work Calculation in Implicit Extrapolation Methods,"SODEX and SEULEX have same work calculation, hence referring this:
**Hairer Wanner Adaptivity**
https://github.com/luchr/ODEInterface.jl/blob/master/src/Seulex.jl#L393-L399
**Deuflhard Adaptivity**
https://link.springer.com/article/10.1007/BF01418332
Also, resorting back to `4 * subdiving_sequence` instead to `2 * subdiving_sequence` to avoid maxiters in Stiff ODE Problems.",True,1209,https://api.github.com/repos/SciML/OrdinaryDiffEq.jl/pulls/1209,https://github.com/SciML/OrdinaryDiffEq.jl/pull/1209,closed,49,17,2,6,4,0,0,0,[],2020-07-13 16:39:32+00:00,2020-07-15 00:15:58+00:00,113786.0,"1 day, 7:36:26",[],"[{'commit_sha': '0bf286965994e2f63fb26fa2367b0672420abf9d', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '29595bc1a911d82a2d62b6aa0df580d705aa20aa', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '821051cdd3a0822991ea16b0854d20be57cf532f', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62d32395473185139a4ab71e5b6f44c05bd573a9', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b29d1d2d7c2330feb78baf69fc620f48c69d9660', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b3e0257a590f5481180603ff988dcd7c23b2adf', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}]",Utkarsh,37050056,,User,,79,,14,27
451261662,Fix overflow in Implicit Extrapolation methods,"Hi,
Previously our solvers weren't working well with stiff problems. It was happening because often computing the T Array, the RHS would overflow. Hence According to Hairer II, we need to check the stability of iterations, which is implemented in these solvers. The results are good with fewer step rejections and no need to use BigFloats now on.
![image](https://user-images.githubusercontent.com/37050056/87810497-b6672600-c87a-11ea-9b36-d3402a9489cf.png)
(I have currently implemented part b)
**Deuflhard Adaptivity**
Tested on ROBER ODE:
Before:
```
julia> sol = solve(prob,ImplicitDeuflhardExtrapolation())
┌ Warning: Instability detected. Aborting
└ @ DiffEqBase C:\Users\Utkarsh\.julia\packages\DiffEqBase\uSSHl\src\integrator_interface.jl:349
retcode: Unstable
Interpolation: 3rd order Hermite
t: 1-element Array{Float64,1}:
 0.0
u: 1-element Array{Array{Float64,1},1}:
 [1.0, 0.0, 0.0]
```
After:
```
julia> sol = solve(prob,ImplicitDeuflhardExtrapolation())
retcode: Success
Interpolation: 3rd order Hermite
t: 266-element Array{Float64,1}:
      0.0
      0.0015609382820287144
      0.0032217252350683883
      0.01982959476546512
      ⋮
  98098.71397471431
  98336.37472787502
 100000.0
u: 266-element Array{Array{Float64,1},1}:
 [1.0, 0.0, 0.0]
 [0.9999375686612252, 3.419772436599121e-5, 2.8233614409315348e-5]
 [0.9998711793059183, 3.643895343817835e-5, 9.238244240272467e-5]
 [0.9992097316972253, 3.637778804778818e-5, 0.0007538906470362338]
 ⋮
 [0.016984699279155385, 6.958893419099181e-8, 0.9763523642123009]
 [0.016945267341560107, 6.941164337956342e-8, 0.9763868133849163]
 [0.016692488863459237, 6.836399668715074e-8, 0.9766241235297372]

julia> sol.destats
DiffEqBase.DEStats
Number of function 1 evaluations:                  7099
Number of function 2 evaluations:                  0
Number of W matrix evaluations:                    1465
Number of linear solves:                           8244
Number of Jacobians created:                       914
Number of nonlinear solver iterations:             0
Number of nonlinear solver convergence failures:   0
Number of rootfind condition calls:                0
Number of accepted steps:                          265
Number of rejected steps:                          53
```
**HairerWanner Adaptivity**

Before:
```
julia> sol = solve(prob,ImplicitHairerWannerExtrapolation())
┌ Warning: Instability detected. Aborting
└ @ DiffEqBase C:\Users\Utkarsh\.julia\packages\DiffEqBase\uSSHl\src\integrator_interface.jl:349
retcode: Unstable
Interpolation: 3rd order Hermite
t: 1-element Array{Float64,1}:
 0.0
u: 1-element Array{Array{Float64,1},1}:
 [1.0, 0.0, 0.0]
```
After:
```
julia> sol = solve(prob,ImplicitHairerWannerExtrapolation())
retcode: Success
Interpolation: 3rd order Hermite
t: 747-element Array{Float64,1}:
      0.0
      0.0015609382820287144
      0.005947311862904938
      0.017875507821567417
      ⋮
  99827.4274364894
  99913.71371824469
 100000.0
u: 747-element Array{Array{Float64,1},1}:
 [1.0, 0.0, 0.0]
 [0.9999375686612252, 3.419772436599121e-5, 2.8233614409315348e-5]
 [0.9997623217678924, 3.6481272624923937e-5, 0.0002011974708534907]
 [0.9992873280073079, 3.6392577401366066e-5, 0.0006762799286862737]
 ⋮
 [0.018102928740776507, 7.342822706468105e-8, 0.9869765617695905]
 [0.018088653760709415, 7.331417850048177e-8, 0.9869904796337489]
 [0.018074656738217017, 7.324062302959472e-8, 0.9870043742819968]

julia> sol.destats
DiffEqBase.DEStats
Number of function 1 evaluations:                  22121
Number of function 2 evaluations:                  0
Number of W matrix evaluations:                    4034
Number of linear solves:                           25407
Number of Jacobians created:                       2161
Number of nonlinear solver iterations:             0
Number of nonlinear solver convergence failures:   0
Number of rootfind condition calls:                0
Number of accepted steps:                          746
Number of rejected steps:                          0
```
@ChrisRackauckas @kanav99 ",True,1211,https://api.github.com/repos/SciML/OrdinaryDiffEq.jl/pulls/1211,https://github.com/SciML/OrdinaryDiffEq.jl/pull/1211,closed,62,11,2,6,2,1,0,0,[],2020-07-17 16:44:00+00:00,2020-07-18 16:06:22+00:00,84142.0,23:22:22,"[{'comment_id': 456562190, 'comment_body': 'I see. Nice!', 'comment_created': datetime.datetime(2020, 7, 17, 16, 58, 20, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}]","[{'commit_sha': '97b02124cc6221b20ef94c2a4cb0ba184cc38b18', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a68b96840f36fa13b912fea4e8e687d3e8abe113', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '173f7ca213a4100d3ee93d91affe6ce4cbb78af9', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aef6a39d2c4ff0e54c317f45c2ddc1765c403933', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '18e8f8fda26e240d875a783dc7fdfe8e00f9d2e3', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6aceb79f8e080dbce111c163ee61905f33812f13', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}]",Utkarsh,37050056,,User,,79,,14,27
452682216,Add Gragg's smoothing to Implicit Hairer Wanner Extrapolation,"Hi, I have added Gragg's Smoothing in Implicit Extrapolation Methods in the in-place version.
![image](https://user-images.githubusercontent.com/37050056/87880914-30321780-ca13-11ea-8798-b905f42abdfc.png)
I have tested on ROBER problem,
The results are better now for especially ImplicitHairerWanner for eg.:
Before:
```
julia> sol = solve(prob,ImplicitHairerWannerExtrapolation())
retcode: Success
Interpolation: 3rd order Hermite
t: 747-element Array{Float64,1}:
      0.0
      0.0015609382820287144
      0.005947311862904938
      0.017875507821567417
      0.21419373297455405
      3.4452645219507922
     14.17595103549799
     45.72140722571571
    136.72463715323127
    360.0337463837034
    791.7377120761394
    842.4930986170706
    902.9450866695021
      ⋮
  98617.40624567194
  98694.73172896286
  98864.85989529881
  98952.72199598706
  99133.22298583384
  99239.38548077142
  99670.94665679023
  99712.07832469145
  99769.90324865252
  99827.4274364894
  99913.71371824469
 100000.0
u: 747-element Array{Array{Float64,1},1}:
 [1.0, 0.0, 0.0]
 [0.9999375686612252, 3.419772436599121e-5, 2.8233614409315348e-5]
 [0.9997623217678924, 3.6481272624923937e-5, 0.0002011974708534907]
 [0.9992873280073079, 3.6392577401366066e-5, 0.0006762799286862737]
 [0.9917821490821827, 3.50291948169626e-5, 0.00818282252912719]
 [0.9142532826118859, 2.3437837422793913e-5, 0.08572175541978577]
 [0.8126877839209197, 1.4130319867668001e-5, 0.18726378652315454]
 [0.7021160977468687, 8.677123330594477e-6, 0.29778174212910896]
 [0.5809830077630976, 5.3393812358882494e-6, 0.41876702297581186]
 [0.4622526802215967, 3.391675819683235e-6, 0.5363477776038761]
 [0.37633002823808775, 2.551157834742878e-6, 0.6334016071005959]
 [0.36809363642017884, 2.4217840521649283e-6, 0.6415694016779914]
 [0.3589617388519237, 2.279226012583151e-6, 0.6506123658686606]
 ⋮
 [0.01827910876881332, 7.417640762370387e-8, 0.9867795201981193]
 [0.018266103109520673, 7.406920272092818e-8, 0.9867922427360799]
 [0.01823448553630541, 7.379547926302563e-8, 0.9868201702124244]
 [0.018220603977110332, 7.381257697774555e-8, 0.9868345502165281]
 [0.018193892307383427, 7.379776987027918e-8, 0.98686402276212]
 [0.018175805890085682, 7.364240824122424e-8, 0.9868813200158614]
 [0.01812850575053794, 7.362446005221851e-8, 0.9869512653567989]
 [0.018121803049209413, 7.357623461065652e-8, 0.9869579215902864]
 [0.018112316518646383, 7.349616427443333e-8, 0.9869672710777913]
 [0.018102928740776507, 7.342822706468105e-8, 0.9869765617695905]
 [0.018088653760709415, 7.331417850048177e-8, 0.9869904796337489]
 [0.018074656738217017, 7.324062302959472e-8, 0.9870043742819968]
julia> sol.destats
DiffEqBase.DEStats
Number of function 1 evaluations:                  22121
Number of function 2 evaluations:                  0
Number of W matrix evaluations:                    4034
Number of linear solves:                           25407
Number of Jacobians created:                       2161
Number of nonlinear solver iterations:             0
Number of nonlinear solver convergence failures:   0
Number of rootfind condition calls:                0
Number of accepted steps:                          746
Number of rejected steps:                          0
```
After:
```
julia> sol = solve(prob,ImplicitHairerWannerExtrapolation())
retcode: Success
Interpolation: 3rd order Hermite
t: 62-element Array{Float64,1}:
      0.0
      0.0015609382820287144
      0.005825835783645151
      0.01567575045726786
      0.16947966893502833
      1.743871372983346
      9.306194996461432
     31.770571909730194
     99.75191412340172
    251.80711169599098
    536.8233987024881
   1047.4098500692314
   1277.3618197236628
      ⋮
  43133.7921812233
  44533.0199685061
  50055.47993946205
  50143.549394361304
  50645.7867089978
  53200.886884522
  67639.73166022974
  67726.34146826199
  68290.34600170281
  71327.41288918354
  88525.6423629744
 100000.0
u: 62-element Array{Array{Float64,1},1}:
 [1.0, 0.0, 0.0]
 [0.9999375686612398, 3.419788713381114e-5, 2.8233451626510687e-5]
 [0.9997671708792938, 3.6480839574421016e-5, 0.0001963617819497166]
 [0.9993747529950145, 3.6408757655733936e-5, 0.0005888518373725846]
 [0.9934418204907772, 3.532707974034257e-5, 0.006522860595101827]
 [0.9473878487210842, 2.7843504922838892e-5, 0.05258355109327624]
 [0.8469989043693693, 1.6688688600730842e-5, 0.152974647487413]
 [0.7387518670436833, 1.0136165147203725e-5, 0.26123561998272277]
 [0.6174763123317458, 6.160142276754425e-6, 0.38247879318679445]
 [0.5076171597118828, 4.028549430990326e-6, 0.4920810102753788]
 [0.4131543327232221, 2.7803011885121084e-6, 0.5858827290916845]
 [0.3290933691209731, 1.940403291877344e-6, 0.6680100908138078]
 [0.3045872886094369, 1.7328634339264573e-6, 0.6916504292086891]
 ⋮
 [0.036616402611313, 1.537768134569056e-7, 0.9519856200593746]
 [0.0356457232493685, 1.495630266061263e-7, 0.9529511700095585]
 [0.0322879960671094, 1.348414844453152e-7, 0.95628613653051]
 [0.03223986774524779, 1.3479187702398253e-7, 0.9563342193567873]
 [0.031969297577572324, 1.336219095630056e-7, 0.9566055821982409]
 [0.030652705785227934, 1.2794923477669555e-7, 0.957916211258885]
 [0.02521614608213966, 1.0470432195780831e-7, 0.9636204815970087]
 [0.025187746750192412, 1.0451690725493389e-7, 0.9636488960956322]
 [0.025003614528729616, 1.0373405338488132e-7, 0.9638323513852816]
 [0.02405705910224919, 9.971021115537788e-8, 0.9647748199881884]
 [0.019750460767379453, 8.151428218922708e-8, 0.9689778794510242]
 [0.017683441147082677, 7.276944652347233e-8, 0.9710151320645249]

julia> sol.destats
DiffEqBase.DEStats
Number of function 1 evaluations:                  2413
Number of function 2 evaluations:                  0
Number of W matrix evaluations:                    334
Number of linear solves:                           2680
Number of Jacobians created:                       142
Number of nonlinear solver iterations:             0
Number of nonlinear solver convergence failures:   0
Number of rootfind condition calls:                0
Number of accepted steps:                          61
Number of rejected steps:                          4
```


Deuflhard:
Before:
```
julia> sol = solve(prob,ImplicitDeuflhardExtrapolation())
retcode: Success
Interpolation: 3rd order Hermite
t: 266-element Array{Float64,1}:
      0.0
      0.0015609382820287144
      0.0032217252350683883
      0.01982959476546512
      0.18590829006943244
      1.7413117435097187
     17.295346277912582
    120.40325314382655
    190.3944315840111
    506.1534205826651
    565.634619320892
    598.4393273694461
    680.4510974908312
      ⋮
  81804.89423174993
  82130.8440492469
  85390.34222421655
  87153.7514292188
  87478.99321562044
  90731.41107963688
  91889.98469468227
  92211.32729231728
  95424.75326866735
  98098.71397471431
  98336.37472787502
 100000.0
u: 266-element Array{Array{Float64,1},1}:
 [1.0, 0.0, 0.0]
 [0.9999375686612252, 3.419772436599121e-5, 2.8233614409315348e-5]
 [0.9998711793059183, 3.643895343817835e-5, 9.238244240272467e-5]
 [0.9992097316972253, 3.637778804778818e-5, 0.0007538906470362338]
 [0.9928287617193092, 3.521636664652303e-5, 0.007136022376041776]
 [0.9474470086527546, 2.785254568935326e-5, 0.05252224935480626]
 [0.7953203081193456, 1.3017081009911101e-5, 0.20443773423933295]
 [0.5952845474350942, 5.813522451020289e-6, 0.40353817157384103]
 [0.5400931658705648, 4.602543847951828e-6, 0.457970574063262]
 [0.4253840881465049, 3.2407089171974766e-6, 0.5783195793910817]
 [0.4109172894786555, 2.9404459423460187e-6, 0.5926057436798334]
 [0.40357968338912564, 2.8495014912796716e-6, 0.599786471588226]
 [0.3868933970296751, 2.515299797208381e-6, 0.6161456892001972]
 ⋮
 [0.01998871820907305, 8.213120459754458e-8, 0.9735499870593487]
 [0.01991198409721469, 8.179236729457067e-8, 0.9736157287027103]
 [0.0192477725379255, 7.902060244101943e-8, 0.9742500999139704]
 [0.018886062606549125, 7.75200123989674e-8, 0.9745755543568018]
 [0.018817248416069667, 7.721588401073183e-8, 0.974634005683447]
 [0.01822420128055194, 7.474675317483454e-8, 0.9751992533253037]
 [0.018006900233900017, 7.384467127131498e-8, 0.975391638098227]
 [0.017947275546914818, 7.358412815835018e-8, 0.975444051635461]
 [0.017419860734750027, 7.139025081357386e-8, 0.9759518448313058]
 [0.016984699279155385, 6.958893419099181e-8, 0.9763523642123009]
 [0.016945267341560107, 6.941164337956342e-8, 0.9763868133849163]
 [0.016692488863459237, 6.836399668715074e-8, 0.9766241235297372]

julia> sol.destats
DiffEqBase.DEStats
Number of function 1 evaluations:                  7099
Number of function 2 evaluations:                  0
Number of W matrix evaluations:                    1465
Number of linear solves:                           8244
Number of Jacobians created:                       914
Number of nonlinear solver iterations:             0
Number of nonlinear solver convergence failures:   0
Number of rootfind condition calls:                0
Number of accepted steps:                          265
Number of rejected steps:                          53
```
After:
```
julia> sol = solve(prob,ImplicitDeuflhardExtrapolation())
retcode: Success
Interpolation: 3rd order Hermite
t: 238-element Array{Float64,1}:
      0.0
      0.0015609382820287144
      0.0042454723295892935
      0.029509752478930486
      0.2821525539723424
      0.9802049506971475
      7.9607289179451985
     42.86334875418545
    181.12050062696358
    367.5378832812985
    467.71759214187045
    968.6161364447304
   1561.7986114039966
      ⋮
  95991.17030758501
  96241.72216336094
  96618.47341505639
  96724.14612083588
  97582.89606077307
  97658.43055887391
  98351.2193903415
  98557.31696654881
  99099.71976692814
  99212.25479606213
  99970.34941668982
 100000.0
u: 238-element Array{Array{Float64,1},1}:
 [1.0, 0.0, 0.0]
 [0.9999375686612398, 3.419788713381114e-5, 2.8233451626510687e-5]
 [0.999830277761131, 3.647109670792945e-5, 0.0001333153896490659]
 [0.998826234301541, 3.6307781285570585e-5, 0.0011376038450111674]
 [0.9893123533365569, 3.4589944277119534e-5, 0.010653144824928492]
 [0.9670226757764754, 3.083615170325988e-5, 0.03294646506326185]
 [0.8589064777985862, 1.7697035488578012e-5, 0.14106282809314252]
 [0.7089743786664564, 8.893577392121487e-6, 0.2912525601972607]
 [0.5479361514090116, 4.689845391400004e-6, 0.4523450631756651]
 [0.4610754185612017, 3.3451587753888765e-6, 0.5389705094034931]
 [0.4308687174969683, 2.983944662508429e-6, 0.5690461965630191]
 [0.33974358771128393, 2.0507854359197013e-6, 0.6590164840052891]
 [0.2832917190561938, 1.728914720740022e-6, 0.7167899660502243]
 ⋮
 [0.019285560116060703, 7.813484646054062e-8, 0.9872673442966365]
 [0.019240090145882963, 7.791283753667864e-8, 0.987313099966667]
 [0.01917241941506847, 7.768521372975455e-8, 0.987381499686431]
 [0.01915359242064408, 7.756468387858009e-8, 0.9874005937206731]
 [0.019006102642926487, 7.699848522840611e-8, 0.9875543550002359]
 [0.018992787593113673, 7.690441695418321e-8, 0.9875677670644417]
 [0.018872777535653508, 7.643113865622336e-8, 0.9876898996057886]
 [0.01883711632155089, 7.625320151518994e-8, 0.9877259298059433]
 [0.018745844184231607, 7.592805567135533e-8, 0.9878201020471566]
 [0.01872677174623929, 7.580055909846064e-8, 0.9878395230929707]
 [0.01860287157598028, 7.533940618105638e-8, 0.987969314524561]
 [0.018597829263500777, 7.527824202117365e-8, 0.9879743563769822]

julia> sol.destats
DiffEqBase.DEStats
Number of function 1 evaluations:                  9579
Number of function 2 evaluations:                  0
Number of W matrix evaluations:                    1762
Number of linear solves:                           11100
Number of Jacobians created:                       908
Number of nonlinear solver iterations:             0
Number of nonlinear solver convergence failures:   0
Number of rootfind condition calls:                0
Number of accepted steps:                          237
Number of rejected steps:                          2
```
I had also tested results on Van-der pol, the results followed same trend in ImplicitHairerWanner, but some different results persisted in Deuflhard's case. The algorithm was returning `Maxiters` when tested with these changes while working well on the master. Should we implement smoothing in Deuflhard's case?
@ChrisRackauckas @kanav99 could you please have a look?
",True,1212,https://api.github.com/repos/SciML/OrdinaryDiffEq.jl/pulls/1212,https://github.com/SciML/OrdinaryDiffEq.jl/pull/1212,closed,19,5,2,6,11,0,0,0,[],2020-07-19 17:41:50+00:00,2020-07-20 21:43:47+00:00,100917.0,"1 day, 4:01:57",[],"[{'commit_sha': '54c0a12b0077e46723eb121e24f1c0cfb0148817', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f08e75038537066a043754b4afc1eeb180f639f1', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a51c75da787eb9463e1db269a6f5c59b0f733aa3', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd647c40c550412eacf213ac5cfea1dbfb19cb00b', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2974e0c80c38984bfce4686d1f80e3cf3c467d6e', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '778d160614810abb5469cc5ed16c65892c7b01fd', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}]",Utkarsh,37050056,,User,,79,,14,27
454703930,[WIP] Multi-threading in Implicit Extrapolation Methods,"Hi, I was trying to implement multi-threading in Implicit Methods. The solution works well for linear problems but fails to work with stiff ODE solvers like ROBER. I have currently set threading to false.
For eg. with linear prob:
```
function test!(du, u, p, t)
     du[1] = -10 * u[1]
     du[2] = -0.01 * u[2]
end

 u0 = [1.01;1.01]
 tspan = (0.0, 1.0)
 prob = ODEProblem(test!, u0, tspan)

julia> sol = solve(prob,ImplicitHairerWannerExtrapolation())
retcode: Success
Interpolation: 3rd order Hermite
t: 4-element Array{Float64,1}:
 0.0
 0.14142128552668443
 0.6936335582956652
 1.0
u: 4-element Array{Array{Float64,1},1}:
 [1.01, 1.01]
 [0.24554807552111685, 1.0085726545392213]
 [0.000980888946727344, 1.0030185419206692]
 [4.582336314440907e-5, 0.9999503320866617]

julia> sol = solve(prob,ImplicitHairerWannerExtrapolation(threading=true))
retcode: Success
Interpolation: 3rd order Hermite
t: 4-element Array{Float64,1}:
 0.0
 0.14142128552668443
 0.6936335582956652
 1.0
u: 4-element Array{Array{Float64,1},1}:
 [1.01, 1.01]
 [0.24554807552111685, 1.0085726545392213]
 [0.000980888946727344, 1.0030185419206692]
 [4.582336314440907e-5, 0.9999503320866617]
```
But in the case of ROBER:
```
julia>  sol = solve(prob,ImplicitHairerWannerExtrapolation())
retcode: Success
Interpolation: 3rd order Hermite
t: 62-element Array{Float64,1}:
      0.0
      0.0015609382820287144
      0.005825835783645151
      0.01567575045726786
      0.16947966893502833
      1.743871372983346
      9.306194996461432
     31.770571909730194
     99.75191412340172
    251.80711169599098
    536.8233987024881
   1047.4098500692314
   1277.3618197236628
      ⋮
  43133.7921812233
  44533.0199685061
  50055.47993946205
  50143.549394361304
  50645.7867089978
  53200.886884522
  67639.73166022974
  67726.34146826199
  68290.34600170281
  71327.41288918354
  88525.6423629744
 100000.0
u: 62-element Array{Array{Float64,1},1}:
 [1.0, 0.0, 0.0]
 [0.9999375686612398, 3.419788713381114e-5, 2.8233451626510687e-5]
 [0.9997671708792938, 3.6480839574421016e-5, 0.0001963617819497166]
 [0.9993747529950145, 3.6408757655733936e-5, 0.0005888518373725846]
 [0.9934418204907772, 3.532707974034257e-5, 0.006522860595101827]
 [0.9473878487210842, 2.7843504922838892e-5, 0.05258355109327624]
 [0.8469989043693693, 1.6688688600730842e-5, 0.152974647487413]
 [0.7387518670436833, 1.0136165147203725e-5, 0.26123561998272277]
 [0.6174763123317458, 6.160142276754425e-6, 0.38247879318679445]
 [0.5076171597118828, 4.028549430990326e-6, 0.4920810102753788]
 [0.4131543327232221, 2.7803011885121084e-6, 0.5858827290916845]
 [0.3290933691209731, 1.940403291877344e-6, 0.6680100908138078]
 [0.3045872886094369, 1.7328634339264573e-6, 0.6916504292086891]
 ⋮
 [0.036616402611313, 1.537768134569056e-7, 0.9519856200593746]
 [0.0356457232493685, 1.495630266061263e-7, 0.9529511700095585]
 [0.0322879960671094, 1.348414844453152e-7, 0.95628613653051]
 [0.03223986774524779, 1.3479187702398253e-7, 0.9563342193567873]
 [0.031969297577572324, 1.336219095630056e-7, 0.9566055821982409]
 [0.030652705785227934, 1.2794923477669555e-7, 0.957916211258885]
 [0.02521614608213966, 1.0470432195780831e-7, 0.9636204815970087]
 [0.025187746750192412, 1.0451690725493389e-7, 0.9636488960956322]
 [0.025003614528729616, 1.0373405338488132e-7, 0.9638323513852816]
 [0.02405705910224919, 9.971021115537788e-8, 0.9647748199881884]
 [0.019750460767379453, 8.151428218922708e-8, 0.9689778794510242]
 [0.017683441147082677, 7.276944652347233e-8, 0.9710151320645249]
```

```
julia> sol = solve(prob,ImplicitHairerWannerExtrapolation(threading=true))
┌ Warning: Instability detected. Aborting
└ @ DiffEqBase C:\Users\Utkarsh\.julia\packages\DiffEqBase\uSSHl\src\integrator_interface.jl:349
retcode: Unstable
Interpolation: 3rd order Hermite
t: 1-element Array{Float64,1}:
 0.0
u: 1-element Array{Array{Float64,1},1}:
 [1.0, 0.0, 0.0]
```
The instability is showing because of the overflow.
@ChrisRackauckas @kanav99 could you please guide what's going wrong and how to debug it? Thank you.",True,1213,https://api.github.com/repos/SciML/OrdinaryDiffEq.jl/pulls/1213,https://github.com/SciML/OrdinaryDiffEq.jl/pull/1213,closed,173,49,3,6,2,5,0,0,[],2020-07-21 19:33:58+00:00,2020-07-23 12:17:28+00:00,146610.0,"1 day, 16:43:30","[{'comment_id': 458340267, 'comment_body': 'It seems to me that this if block might be the culprit because now we have enabled multi-threading, how to check for stability correctly? @ChrisRackauckas ', 'comment_created': datetime.datetime(2020, 7, 21, 19, 35, 41, tzinfo=datetime.timezone.utc), 'commenter': 'utkarsh530', 'type': 'User'}, {'comment_id': 458385304, 'comment_body': ""there should be a switch, and if one thread goes unstable they should all abort. It's okay if some start to do their next computation, as long as then they all then sync up after"", 'comment_created': datetime.datetime(2020, 7, 21, 21, 1, 33, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}, {'comment_id': 458789148, 'comment_body': 'Okay let me try to implement it', 'comment_created': datetime.datetime(2020, 7, 22, 13, 25, 31, tzinfo=datetime.timezone.utc), 'commenter': 'utkarsh530', 'type': 'User'}, {'comment_id': 458903424, 'comment_body': 'I have fixed with a switch which breaks the threading loop:\r\nResults:\r\n```\r\njulia> sol = solve(prob,ImplicitHairerWannerExtrapolation(threading=true))\r\nretcode: Success\r\nInterpolation: 3rd order Hermite\r\nt: 62-element Array{Float64,1}:\r\n      0.0\r\n      0.0015609382820287144\r\n      0.005825835783645151\r\n      0.01567575045726786\r\n      0.16947966893502833\r\n      1.743871372983346\r\n      9.306194996461432\r\n     31.770571909730194\r\n     99.75191412340172\r\n    251.80711169599098\r\n    536.8233987024881\r\n   1047.4098500692314\r\n   1277.3618197236628\r\n      ⋮\r\n  43133.7921812233\r\n  44533.0199685061\r\n  50055.47993946205\r\n  50143.549394361304\r\n  50645.7867089978\r\n  53200.886884522\r\n  67639.73166022974\r\n  67726.34146826199\r\n  68290.34600170281\r\n  71327.41288918354\r\n  88525.6423629744\r\n 100000.0\r\nu: 62-element Array{Array{Float64,1},1}:\r\n [1.0, 0.0, 0.0]\r\n [0.9999375686612398, 3.419788713381114e-5, 2.8233451626510687e-5]\r\n [0.9997671708792938, 3.6480839574421016e-5, 0.0001963617819497166]\r\n [0.9993747529950145, 3.6408757655733936e-5, 0.0005888518373725846]\r\n [0.9934418204907772, 3.532707974034257e-5, 0.006522860595101827]\r\n [0.9473878487210842, 2.7843504922838892e-5, 0.05258355109327624]\r\n [0.8469989043693693, 1.6688688600730842e-5, 0.152974647487413]\r\n [0.7387518670436833, 1.0136165147203725e-5, 0.26123561998272277]\r\n [0.6174763123317458, 6.160142276754425e-6, 0.38247879318679445]\r\n [0.5076171597118828, 4.028549430990326e-6, 0.4920810102753788]\r\n [0.4131543327232221, 2.7803011885121084e-6, 0.5858827290916845]\r\n [0.3290933691209731, 1.940403291877344e-6, 0.6680100908138078]\r\n [0.3045872886094369, 1.7328634339264573e-6, 0.6916504292086891]\r\n ⋮\r\n [0.036616402611313, 1.537768134569056e-7, 0.9519856200593746]\r\n [0.0356457232493685, 1.495630266061263e-7, 0.9529511700095585]\r\n [0.0322879960671094, 1.348414844453152e-7, 0.95628613653051]\r\n [0.03223986774524779, 1.3479187702398253e-7, 0.9563342193567873]\r\n [0.031969297577572324, 1.336219095630056e-7, 0.9566055821982409]\r\n [0.030652705785227934, 1.2794923477669555e-7, 0.957916211258885]\r\n [0.02521614608213966, 1.0470432195780831e-7, 0.9636204815970087]\r\n [0.025187746750192412, 1.0451690725493389e-7, 0.9636488960956322]\r\n [0.025003614528729616, 1.0373405338488132e-7, 0.9638323513852816]\r\n [0.02405705910224919, 9.971021115537788e-8, 0.9647748199881884]\r\n [0.019750460767379453, 8.151428218922708e-8, 0.9689778794510242]\r\n [0.017683441147082677, 7.276944652347233e-8, 0.9710151320645249]\r\n\r\njulia> versioninfo()\r\nJulia Version 1.4.1\r\nCommit 381693d3df* (2020-04-14 17:20 UTC)\r\nPlatform Info:\r\n  OS: Windows (x86_64-w64-mingw32)\r\n  CPU: Intel(R) Core(TM) i7-9750H CPU @ 2.60GHz\r\n  WORD_SIZE: 64\r\n  LIBM: libopenlibm\r\n  LLVM: libLLVM-8.0.1 (ORCJIT, skylake)\r\nEnvironment:\r\n  JULIA_NUM_THREADS = 6\r\n```', 'comment_created': datetime.datetime(2020, 7, 22, 16, 1, 8, tzinfo=datetime.timezone.utc), 'commenter': 'utkarsh530', 'type': 'User'}, {'comment_id': 459404951, 'comment_body': 'what was the main cause of the issue before?', 'comment_created': datetime.datetime(2020, 7, 23, 12, 16, 52, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}]","[{'commit_sha': 'e59ddec028b5866e8480a1ba078f4a73100f15ad', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c51587ac75c489c61283e4b513df5899e7a47d08', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5432df4532f7b83e44d5201fe2eaaf8acea64a94', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c48db5997ecbd255dca28da54c017360bf287dc3', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0b3b228bbf2e59cd0f0021d3fe9ced46b34533e', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36bb1f863b867d5595f7f3096ceacd03e455376b', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}]",Utkarsh,37050056,,User,,79,,14,27
456444748,Multi-threading for Implicit Extrapolation Methods,"Hi, I have added multi-threading for all Implicit Extrapolation Methods. I have also appended tests for threading as well as missing regression tests for `ImplicitHairerWannerExtrapolation`.
@ChrisRackauckas @kanav99 please have a look.",True,1215,https://api.github.com/repos/SciML/OrdinaryDiffEq.jl/pulls/1215,https://github.com/SciML/OrdinaryDiffEq.jl/pull/1215,closed,422,93,4,8,1,0,0,0,[],2020-07-24 19:09:24+00:00,2020-07-24 23:08:16+00:00,14332.0,3:58:52,[],"[{'commit_sha': '62644a8b5f9f8ce92062d22fff29c781331daef4', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '037e690db90a215cfeef39754fc515a62de460da', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9533f7ca8837c33924cadeeca7c2d00a6716a3f6', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7bcd8fb014514b5d91081db2438b2d68183e343b', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e8b293154a7b82004c09741b65e939f47d68954c', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '59ce8182e0ae1738ef9d609d9cb44210ae066053', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6789b8519b5d60ac99dc32cb8059e6825b5c4c4c', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '879b0822008cf410d1735f31ce431653a81898c7', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}]",Utkarsh,37050056,,User,,79,,14,27
456792459,Update Work Calculation in ImplicitEulerExtrapolation,"Hi, I have updated work calculation to take account of the Jacobian, using Hairer Wanner Adaptivity, as mentioned in Hairer II. After that, I will update adaptivity coinciding with Hairer Wanner.
Work Calculation:
![image](https://user-images.githubusercontent.com/37050056/88487544-a39fd000-cfa3-11ea-83e2-02f6e24b26a0.png)

@ChrisRackauckas @kanav99 can you have a look?",True,1217,https://api.github.com/repos/SciML/OrdinaryDiffEq.jl/pulls/1217,https://github.com/SciML/OrdinaryDiffEq.jl/pull/1217,closed,23,7,2,3,1,0,0,0,[],2020-07-26 19:12:32+00:00,2020-07-28 18:38:26+00:00,170754.0,"1 day, 23:25:54",[],"[{'commit_sha': '515e68ad26cc9de54b358f95cab0c6ded944e8ca', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15b872ed4a8db25add8d2cb22bdbaf8c67f0b395', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3bb96c3de9674fcc789461eca6f4ac0c55c893ac', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}]",Utkarsh,37050056,,User,,79,,14,27
462311028,Update step-sizing in Implicit Euler Extrapolation,"Hi, I have updated `ImplicitEulerExtrapolation` with Hairer Wanner Adaptivity as written previously. The results are much better, but as I suggested earlier, it would be beneficial if we use barycentric extrapolation instead of Richardson's extrapolation. However, I made these changes earlier with Richardson's extrapolation and we could decide and review these changes. I feel that we should implement barycentric extrapolation from Implicit Euler from scratch because it would result in our caches being optimised and better control rather altering the previous one. What are your views? Maybe we could keep them both.

@ChrisRackauckas @kanav99 could you please share your thoughts on how to proceed and review this?",True,1230,https://api.github.com/repos/SciML/OrdinaryDiffEq.jl/pulls/1230,https://github.com/SciML/OrdinaryDiffEq.jl/pull/1230,closed,137,79,6,8,4,0,0,0,[],2020-08-03 17:40:30+00:00,2020-08-06 12:12:49+00:00,239539.0,"2 days, 18:32:19",[],"[{'commit_sha': 'f8e1b1913e719568aca1184c6a79d99f195ece5c', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b8dbf09815c1e7fe77701a8299a2fef8035bccd', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1299497bb704cd92af45909007690a5cd7bed3f3', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a85c0e2a32552286273db4b576625373b28043b1', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ead9f0f64dd727e96a2e2679c292c0fce7dc31ae', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '543c7e9bc757eb0357d2eff2de0e1ad97121b10e', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f37d2b9ceb42ae36d0b86b92d5544918d441f9f', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d6a556d25a63615072f4df020dc37162225be11', 'committer_username': 'ChrisRackauckas', 'committer_name': 'Christopher Rackauckas', 'committer_email': 'accounts@chrisrackauckas.com', 'commit_date': datetime.datetime(2012, 6, 4, 7, 19, 50, tzinfo=datetime.timezone.utc)}]",Utkarsh,37050056,,User,,79,,14,27
462897465,[WIP] Implicit Euler Barycentric Extrapolation,"Hi, I added Implicit Euler Barycentric Extrapolation for testing purposes. There are changes yet to be made in the threading version, just checking and optimising the non-threaded version first. The subdividing sequence is also non-scaled version because overflow is not happening currently, but could be altered to improve accuracy. There's a significant improvement in the adaptivity before it used to take around ~1500 steps:
Results:
ROBER
```
julia> sol = solve(prob,ImplicitEulerBarycentricExtrapolation())
retcode: Success
Interpolation: 3rd order Hermite
t: 94-element Array{Float64,1}:
      0.0
      0.0007804691410143572
      0.0020788828568038082
      0.003745452933172179
      0.0084424003426813
      0.0418329803433523
      0.133784229911673
      0.3384336202132905
      0.7313132675982609
      1.4125147343331985
      2.5230877716117215
      4.281548271455018
      7.045611435626178
      ⋮
  62648.50145195949
  65635.82890254141
  68738.97544769452
  71961.72009630663
  75307.96337879008
  78781.73162439177
  82387.18109883313
  86128.60243765338
  90010.4261880201
  94037.22756386714
  98213.7312904604
 100000.0
u: 94-element Array{Array{Float64,1},1}:
 [1.0, 0.0, 0.0]
 [0.9999687819531755, 2.5793343142065786e-5, 5.425156076064023e-6]
 [0.9999168592309505, 3.561487797285224e-5, 4.594463839514755e-5]
 [0.9998502554786627, 3.6447941071366455e-5, 0.00011110126239552879]
 [0.9996628068352206, 3.646655208881115e-5, 0.0002985178267423984]
 [0.9983418169119611, 3.625038824023791e-5, 0.0016203913155380977]
 [0.9948007859121666, 3.565818573699484e-5, 0.005165184262085637]
 [0.9873810658864121, 3.4423364301628644e-5, 0.01259805313700003]
 [0.9746316583052161, 3.235602952432764e-5, 0.025385306598872455]
 [0.9560313901304092, 2.9504080225050206e-5, 0.04407758767798024]
 [0.9320591950344825, 2.6152200865266426e-5, 0.06825025010532088]
 [0.9036429101017482, 2.2659726771098243e-5, 0.09707934871519779]
 [0.8716431391604512, 1.9309241634938164e-5, 0.12990287373566714]
 ⋮
 [0.07508899269616687, 2.2282789745212505e-7, 1.346886620637566]
 [0.0728600717302911, 2.1552375489749652e-7, 1.3512342478116077]
 [0.07069581686858023, 2.0847537801101814e-7, 1.3554594845591335]
 [0.06859441042136237, 2.0167270965594892e-7, 1.359565505087804]
 [0.06655408205699063, 1.9510615325495652e-7, 1.3635554211491425]
 [0.06457310785286369, 1.8876654816039375e-7, 1.3674322815498123]
 [0.06264980949188631, 1.82645146988374e-7, 1.3711990715613445]
 [0.06078255333325592, 1.7673359394083105e-7, 1.3748587127511176]
 [0.05896974903846737, 1.7102390302901e-7, 1.378414063853706]
 [0.05720984875215139, 1.6550843930270433e-7, 1.3818679206855131]
 [0.055501346283446704, 1.6017990118525416e-7, 1.385223016191019]
 [0.05509199750732979, 1.5895545543706158e-7, 1.3865807077512788]

julia> sol.destats
DiffEqBase.DEStats
Number of function 1 evaluations:                  951
Number of function 2 evaluations:                  0
Number of W matrix evaluations:                    357
Number of linear solves:                           1213
Number of Jacobians created:                       98
Number of nonlinear solver iterations:             0
Number of nonlinear solver convergence failures:   0
Number of rootfind condition calls:                0
Number of accepted steps:                          93
Number of rejected steps:                          0
```

However, while just running tests locally, the convergence order is fixed to 1, but the regression tests are passing:
```
julia> @testset ""Testing ImplicitEulerBarycentricExtrapolation"" begin
         for prob in problem_array, seq in sequence_array
           global dts

           # Convergence test
           for j = 1:6
             alg = ImplicitEulerBarycentricExtrapolation(min_order = j,
               init_order = j, max_order=j,
               sequence = seq,threading=false)
             sim = test_convergence(dts,prob,alg)
                   @test sim.�est[:final] ≈ 2*(alg.n_init+1) atol=testTol
           end

           # Regression test
           alg = ImplicitEulerBarycentricExtrapolation(max_order=9, min_order=1,
             init_order=9, sequence=seq,threading=false)
                 sol = solve(prob, alg, reltol=1e-3)
           @test length(sol.u) < 10
         end
       end
┌ Warning: The range of extrapolation orders and/or the initial order given to the
│       `ImplicitEulerBarycentricExtrapolation` algorithm are not valid and have been changed:
│       Minimal order:  1 -->  2
│       Maximal order:  1 -->  4
│       Initial order:  1 -->  3
└ @ OrdinaryDiffEq C:\Users\Utkarsh\.julia\dev\OrdinaryDiffEq\src\algorithms.jl:286
Testing ImplicitEulerBarycentricExtrapolation: Test Failed at REPL[153]:11
  Expression: ≈(sim.�est[:final], 2 * (alg.n_init + 1), atol = testTol)
   Evaluated: 0.9958819159862579153841019701376346095592753223093247634461212374182920307646815 ≈ 8 (atol=0.2)
Stacktrace:
 [1] macro expansion at .\REPL[153]:11 [inlined]
 [2] macro expansion at D:\buildbot\worker\package_win64\build\usr\share\julia\stdlib\v1.4\Test\src\Test.jl:1113 [inlined]
 [3] top-level scope at .\REPL[153]:2
┌ Warning: The range of extrapolation orders and/or the initial order given to the
│       `ImplicitEulerBarycentricExtrapolation` algorithm are not valid and have been changed:
│       Minimal order:  2 -->  2
│       Maximal order:  2 -->  4
│       Initial order:  2 -->  3
└ @ OrdinaryDiffEq C:\Users\Utkarsh\.julia\dev\OrdinaryDiffEq\src\algorithms.jl:286
```
@ChrisRackauckas @kanav99 could have a look, please? Could you point out what's going wrong or how to debug it?",True,1232,https://api.github.com/repos/SciML/OrdinaryDiffEq.jl/pulls/1232,https://github.com/SciML/OrdinaryDiffEq.jl/pull/1232,closed,721,7,6,7,3,0,0,0,[],2020-08-04 17:16:03+00:00,2020-08-05 13:32:36+00:00,72993.0,20:16:33,[],"[{'commit_sha': '063b08762304d83adeb315796144c0c66aa5bb84', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5bf5fc48fa5bc3260f9c93450a0628b737cc0bc', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b15f1a553e23ae8c00d722497d8af1e5ea367fec', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '24a764297b9b357b651ab80bcfd83d652e8f94e6', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b4752bfec5fccb4388ebfa2c98c192f3da657fd', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '86b497c8179e8c25bfa4e86659b97a4da4d8d10a', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fec8d2ba2835ae284a256df904eff6428b8c1d48', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}]",Utkarsh,37050056,,User,,79,,14,27
464224033,Update work calculation and minor fix,"Hi,
It seems that I used the SODEX formula to calculate the work but SEULEX has a different work formula owing to all Euler steps rather than Euler and Midpoint steps in SODEX. (To start the algorithm in the semi-implicit midpoint, the first step to being implicit Euler, hence an extra calculation which is invalid in SEULEX) I have updated my calculation henceforth:
![image](https://user-images.githubusercontent.com/37050056/89572532-d8831100-d846-11ea-86d0-f465173ded72.png)
Source: SEULEX, Hairer II
By mistake, I deleted one line while merging the code, which is also updated.
@ChrisRackauckas @kanav99 please have a look.",True,1233,https://api.github.com/repos/SciML/OrdinaryDiffEq.jl/pulls/1233,https://github.com/SciML/OrdinaryDiffEq.jl/pull/1233,closed,3,2,2,1,3,0,0,0,[],2020-08-06 19:34:01+00:00,2020-08-07 14:52:46+00:00,69525.0,19:18:45,[],"[{'commit_sha': 'dd636e63e6bba7089737fd4b858b7a742fc1c4fe', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}]",Utkarsh,37050056,,User,,79,,14,27
464790763,Fix tests in ImplicitEulerExtrapolation,"Hi, I was checking implementation changes in ImplicitEulerExtrapolation, the current master tests were failing https://gitlab.com/JuliaGPU/OrdinaryDiffEq.jl/-/jobs/676218514. I have updated them. I also reflected the changes in out-of-place version too.
@ChrisRackauckas @kanav99 please have a look.",True,1235,https://api.github.com/repos/SciML/OrdinaryDiffEq.jl/pulls/1235,https://github.com/SciML/OrdinaryDiffEq.jl/pull/1235,closed,281,49,4,9,7,0,0,0,[],2020-08-07 19:54:25+00:00,2020-08-11 05:12:15+00:00,292670.0,"3 days, 9:17:50",[],"[{'commit_sha': '9712d30b6df2023a31af063e87625e78c57f5964', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19a9e31c7a6d59ab482a8775d14c715ab816e9d5', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd6715cefd2b699e01ae03fb68a3ab41c10d789e9', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fbe55f6cb8cf6e535f037132971cc12e5d6dd967', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be6781715d767acfa4c3b33c6b4f17bcdee3bb12', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '381480b6e13a10bb4ee828e136c91224ef701790', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '035fb81bc39ee76c8d26e427d20066c666fa054f', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bacf67cca246c695fbd061e17b1ff9a4a1c57f23', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f781a23f2a03aad12cae28c0bd3cd218395565a6', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}]",Utkarsh,37050056,,User,,79,,14,27
466341153,Fixed order convergence issue in Implicit Euler Barycentric Extrapolation,"Hi, I have fixed convergence problem in Barycentric Extrapolation with Euler. As discussed, the extrapolation tableaus were needed to be computed again, hence that tweak perfectly worked! I have also added tests for them, which pass. Now we have two extrapolation techniques to compare from, which could result in more advanced extrapolation methods if we change internal discretisation algorithms, preferring symmetric methods.

@ChrisRackauckas @kanav99 please have a look. 

For a toy problem,

```
function test!(du, u, p, t)
     du[1] = -10 * u[1]
     du[2] = -0.01 * u[2]
end

u0 = [1.01;1.01]
tspan = (0.0, 1.0)
prob = ODEProblem(test!, u0, tspan)
```
Before:
```
julia> sol = solve(prob,ImplicitEulerBarycentricExtrapolation())
retcode: Success
Interpolation: 3rd order Hermite
t: 9-element Array{Float64,1}:
 0.0
 0.14142128552668443
 0.2780272759539433
 0.4110557126096235
 0.5417814315634208
 0.6722254549411346
 0.806786304236512
 0.9373172065432285
 1.0
u: 9-element Array{Array{Float64,1},1}:
 [1.01, 1.01]
 [0.26674995730851403, 1.0085727413625734]
 [0.07353416522476973, 1.0071959921112192]
 [0.02092849505472619, 1.0058571024461516]
 [0.006080376349195759, 1.004543121498971]
 [0.001770998089497328, 1.003233682787281]
 [0.0005115122571015183, 1.0018847395800585]
 [0.00015292412480571354, 1.0005779256977014]
 [8.364736330835655e-5, 0.9999509555752092]
```
After:
```
julia> sol = solve(prob,ImplicitEulerBarycentricExtrapolation())
retcode: Success
Interpolation: 3rd order Hermite
t: 6-element Array{Float64,1}:
 0.0
 0.14142128552668443
 0.30105767845704157
 0.5416823359017102
 0.8167726142875619
 1.0
u: 6-element Array{Array{Float64,1},1}:
 [1.01, 1.01]
 [0.24552817144504027, 1.0085726545392086]
 [0.049754336472556324, 1.0069638899619424]
 [0.004494800520229466, 1.004543799386166]
 [0.00028828261365154153, 1.0017841944945796]
 [4.6156045107244305e-5, 0.9999503320866552]
```",True,1239,https://api.github.com/repos/SciML/OrdinaryDiffEq.jl/pulls/1239,https://github.com/SciML/OrdinaryDiffEq.jl/pull/1239,closed,163,14,4,10,0,0,0,0,[],2020-08-11 20:33:41+00:00,2020-08-12 01:52:48+00:00,19147.0,5:19:07,[],"[{'commit_sha': '7db28cc63abd720b95cb8e8aa8349b6e60b7896e', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40a91cafb32d9089d7985a081a0ed7d941b5553e', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '972de01b1898eb3ab91cbdaeecc0750efa9adcac', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'baa0f78c190dc0d043b6fe8a356a67217ac2b6bd', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc881bed1cbed8737692efe92eceea7e9cf24d70', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db9142c69660dbe62da09c29ba8e46adae4b163e', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '183ed15cfb2ff9e7dfd100b9786b28b9c8d5973f', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6561ecbeacd558c533ffe2eea5fc6d2c0e41689', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c46ab4f2e74d330ea0deea6940845bff8b19be8', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb90c85bc85869a4f425b697547c78b16c802b4b', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}]",Utkarsh,37050056,,User,,79,,14,27
467552254,Fixes in ImplicitEulerBarycentricExtrapolation,"Hi, I have updated smoothing & added API for `sequence_factor` in `ImplicitEulerBarycentricExtrapolation`. These were the results of ROBER:

Before:
```
julia> sol = solve(prob,ImplicitEulerBarycentricExtrapolation())
retcode: Success
Interpolation: 3rd order Hermite
t: 735-element Array{Float64,1}:
      0.0
      0.0007804691410143572
      0.0012928049122421024
      0.001779230376630409
      0.0026976189518879076
      0.004593247494614582
      0.00982318681252459
      0.025959211527813317
      0.05894138201023005
      0.1146170213220058
      0.19933421448633254
      0.32028280317149244
      0.48582348927340346
      ⋮
  97324.95480371919
  97583.81595095301
  97840.36909624105
  98096.00071610826
  98373.70841384509
  98639.57039005749
  98900.12151184973
  99158.34730893603
  99415.64279645523
  99695.14359951086
  99972.01821800332
 100000.0
u: 735-element Array{Array{Float64,1},1}:
 [1.0, 0.0, 0.0]
 [0.9999687819984653, 2.5378969289930586e-5, 5.842280671100004e-6]
 [0.9999482913189734, 3.2469924947677e-5, 2.301534305749022e-5]
 [0.9999288406100082, 3.508785552155402e-5, 3.8694780903763995e-5]
 [0.9998921267953147, 3.632197031955678e-5, 7.326487299495826e-5]
 [0.9998163893448577, 3.6491566881699283e-5, 0.00014861617376977164]
 [0.9996077345523073, 3.646162117036865e-5, 0.00035736400329775664]
 [0.9989667349721589, 3.637160569177917e-5, 0.0009986547529333139]
 [0.9976693482594007, 3.618034114668738e-5, 0.002296523179421331]
 [0.9955173445672584, 3.585168447721858e-5, 0.004449001326174204]
 [0.9923306680361907, 3.5355219052201335e-5, 0.007635786241278095]
 [0.9879536883502447, 3.466830210889213e-5, 0.01201209910926726]
 [0.982264774182583, 3.3778584463574584e-5, 0.017699339681656823]
 ⋮
 [0.16101311610756355, 3.6409483951866994e-7, 1.7717393859724986]
 [0.16097698503207641, 3.6380026699353855e-7, 1.7727617084153096]
 [0.16093965370430868, 3.635063893124764e-7, 1.7737733180299007]
 [0.16090188330881788, 3.632135954299369e-7, 1.7747796907692384]
 [0.1608763891096321, 3.6293869407092225e-7, 1.7758710320410174]
 [0.16084433237478693, 3.626506634003173e-7, 1.7769143132863736]
 [0.16080941606305643, 3.623608463786976e-7, 1.7779351961855394]
 [0.16077329295908052, 3.620716770995924e-7, 1.7789453922557155]
 [0.16073672555084775, 3.617835555782565e-7, 1.7799503674176607]
 [0.16071244700492104, 3.6151331295537085e-7, 1.781040158149396]
 [0.1606867406194908, 3.61236959550888e-7, 1.7821180917835804]
 [0.1606270267919411, 3.608284157304295e-7, 1.7822270910875606]
julia> sol.destats
DiffEqBase.DEStats
Number of function 1 evaluations:                  31374
Number of function 2 evaluations:                  0
Number of W matrix evaluations:                    10393
Number of linear solves:                           39398
Number of Jacobians created:                       2372
Number of nonlinear solver iterations:             0
Number of nonlinear solver convergence failures:   0
Number of rootfind condition calls:                0
Number of accepted steps:                          734
Number of rejected steps:                          1633
```
After:
```
julia> sol = solve(prob,ImplicitEulerBarycentricExtrapolation())
retcode: Success
Interpolation: 3rd order Hermite
t: 80-element Array{Float64,1}:
      0.0
      0.0015609382820287144
      0.0038833624899373516
      0.007502342478267317
      0.024797873022477254
      0.07304938472754041
      0.17841192362251737
      0.3767745550872523
      0.7173315557285374
      1.2695427726421196
      2.136016246092731
      3.473535050518359
      5.52378127166028
      ⋮
  26528.645070333834
  31180.844798025428
  36055.85564540747
  41250.527799529336
  46868.45389663336
  53029.789859258875
  59880.259286347835
  67602.40709501403
  76429.57743665235
  86661.53553388221
  98673.80510369067
 100000.0
u: 80-element Array{Array{Float64,1},1}:
 [1.0, 0.0, 0.0]
 [0.999937568656632, 3.4174828624568736e-5, 2.8256514751432795e-5]
 [0.9998447429788678, 3.648042892008056e-5, 0.00011869563872186919]
 [0.999700268799024, 3.6468807903125026e-5, 0.0002631849882886165]
 [0.9990127168280291, 3.634190683624001e-5, 0.0009510040183157015]
 [0.9971195432746125, 3.599428585378989e-5, 0.0028450427445917714]
 [0.9931080631276625, 3.5266676833273e-5, 0.006858401954158697]
 [0.985974468238819, 3.400306866655391e-5, 0.013995096573923994]
 [0.974827869309884, 3.210673918577629e-5, 0.025145520857089876]
 [0.9591060476597548, 2.959426080847843e-5, 0.04087011128598496]
 [0.9386786980737309, 2.6610030853776247e-5, 0.06129597463639398]
 [0.9137910043678629, 2.3386199837557187e-5, 0.08617425179404514]
 [0.8849129246853812, 2.0170425688698916e-5, 0.11503293969183888]
 ⋮
 [0.09856757789434414, 3.7724875480643603e-7, 1.0446766292627245]
 [0.09177208085963502, 3.4524614406375155e-7, 1.0628588307439415]
 [0.0857940504723483, 3.179650772058156e-7, 1.078918314585921]
 [0.08040166581436958, 2.940185916026992e-7, 1.0934916532085452]
 [0.075440378384415, 2.7251744314580534e-7, 1.1069993554082842]
 [0.07080032410738986, 2.528526433822939e-7, 1.1197389562419766]
 [0.06639983411652342, 2.3458814227485295e-7, 1.1319313741124781]
 [0.06217593865895769, 2.1740051333283115e-7, 1.1437474068379008]
 [0.05807915754085324, 2.0104528715423021e-7, 1.155322060447837]
 [0.0540716184557164, 1.853413163074036e-7, 1.1667591854190698]
 [0.05012928481110871, 1.7017324867228753e-7, 1.178123401832567]
 [0.04965327738747586, 1.6839170489581858e-7, 1.1792639536172758]
julia> sol.destats
DiffEqBase.DEStats
Number of function 1 evaluations:                  1467
Number of function 2 evaluations:                  0
Number of W matrix evaluations:                    295
Number of linear solves:                           1681
Number of Jacobians created:                       83
Number of nonlinear solver iterations:             0
Number of nonlinear solver convergence failures:   0
Number of rootfind condition calls:                0
Number of accepted steps:                          79
Number of rejected steps:                          0 
```
I will attach the benchmarks of the same problem shortly.
@ChrisRackauckas @kanav99 please have a look.",True,1243,https://api.github.com/repos/SciML/OrdinaryDiffEq.jl/pulls/1243,https://github.com/SciML/OrdinaryDiffEq.jl/pull/1243,closed,23,19,3,6,1,0,0,0,[],2020-08-13 18:07:35+00:00,2020-08-14 17:18:06+00:00,83431.0,23:10:31,[],"[{'commit_sha': 'ec605181c1f732f17f2b4bd80eeb377bb324ec7f', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f6d51571b754d31f58122b47b2bf1db8c3c852e', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee6ef4ea58b7f3e21c887ad29a2f2eb21d00e905', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'afea1859756f4c067a31589505179ac1d44917e7', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab193862dcfc852fd2ec6d0e7468486b17ad7fc8', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '972317c4e4ea7537b57f1a84db8e8a20391de217', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}]",Utkarsh,37050056,,User,,79,,14,27
468341468,Order and step-sizing fixes in Implicit Euler Extrapolation Methods,"Hi, so I had checked step-sizing implementation for Implicit Euler Extrapolation Methods. The order scaling was being used of Midpoint Methods which are of higher-order, hence resulting in small step-sizes.  It is fixed now in `controllers.jl` with correct order step-sizing and also updated in `alg_utils.jl`. The order window has been changed to default Hairer code values as mentioned here https://github.com/luchr/ODEInterface.jl/blob/master/src/Seulex.jl#L336-L338.

Results:
Before:
```
julia> sol = solve(prob,ImplicitEulerBarycentricExtrapolation())
retcode: Success
Interpolation: 3rd order Hermite
t: 80-element Array{Float64,1}:
      0.0
      0.0015609382820287144
      0.0038833624899373516
      0.007502342478267317
      0.024797873022477254
      0.07304938472754041
      0.17841192362251737
      0.3767745550872523
      0.7173315557285374
      1.2695427726421196
      2.136016246092731
      3.473535050518359
      5.52378127166028
      ⋮
  26528.645070333834
  31180.844798025428
  36055.85564540747
  41250.527799529336
  46868.45389663336
  53029.789859258875
  59880.259286347835
  67602.40709501403
  76429.57743665235
  86661.53553388221
  98673.80510369067
 100000.0
u: 80-element Array{Array{Float64,1},1}:
 [1.0, 0.0, 0.0]
 [0.999937568656632, 3.4174828624568736e-5, 2.8256514751432795e-5]
 [0.9998447429788678, 3.648042892008056e-5, 0.00011869563872186919]
 [0.999700268799024, 3.6468807903125026e-5, 0.0002631849882886165]
 [0.9990127168280291, 3.634190683624001e-5, 0.0009510040183157015]
 [0.9971195432746125, 3.599428585378989e-5, 0.0028450427445917714]
 [0.9931080631276625, 3.5266676833273e-5, 0.006858401954158697]
 [0.985974468238819, 3.400306866655391e-5, 0.013995096573923994]
 [0.974827869309884, 3.210673918577629e-5, 0.025145520857089876]
 [0.9591060476597548, 2.959426080847843e-5, 0.04087011128598496]
 [0.9386786980737309, 2.6610030853776247e-5, 0.06129597463639398]
 [0.9137910043678629, 2.3386199837557187e-5, 0.08617425179404514]
 [0.8849129246853812, 2.0170425688698916e-5, 0.11503293969183888]
 ⋮
 [0.09856757789434414, 3.7724875480643603e-7, 1.0446766292627245]
 [0.09177208085963502, 3.4524614406375155e-7, 1.0628588307439415]
 [0.0857940504723483, 3.179650772058156e-7, 1.078918314585921]
 [0.08040166581436958, 2.940185916026992e-7, 1.0934916532085452]
 [0.075440378384415, 2.7251744314580534e-7, 1.1069993554082842]
 [0.07080032410738986, 2.528526433822939e-7, 1.1197389562419766]
 [0.06639983411652342, 2.3458814227485295e-7, 1.1319313741124781]
 [0.06217593865895769, 2.1740051333283115e-7, 1.1437474068379008]
 [0.05807915754085324, 2.0104528715423021e-7, 1.155322060447837]
 [0.0540716184557164, 1.853413163074036e-7, 1.1667591854190698]
 [0.05012928481110871, 1.7017324867228753e-7, 1.178123401832567]
 [0.04965327738747586, 1.6839170489581858e-7, 1.1792639536172758]
julia> sol.destats
DiffEqBase.DEStats
Number of function 1 evaluations:                  1467
Number of function 2 evaluations:                  0
Number of W matrix evaluations:                    295
Number of linear solves:                           1681
Number of Jacobians created:                       83
Number of nonlinear solver iterations:             0
Number of nonlinear solver convergence failures:   0
Number of rootfind condition calls:                0
Number of accepted steps:                          79
Number of rejected steps:                          0
```
After:
```
julia> sol = solve(prob,ImplicitEulerBarycentricExtrapolation())
retcode: Success
Interpolation: 3rd order Hermite
t: 38-element Array{Float64,1}:
      0.0
      0.0019895916617064663
      0.01069580615688682
      0.13622727097111514
      1.9462158334088258
      5.5752843582279645
     13.781845437376278
     34.07685512942656
     99.02265309345259
    227.44016199230782
    347.2351102898627
    529.3359987937949
    739.7400402695904
      ⋮
   7650.788363787001
   9095.893639719112
  11040.033656727233
  13737.191756433422
  17611.554210817994
  23197.090881970995
  31319.04274886979
  40966.225811987424
  49446.46793573887
  59890.19493863742
  77533.18742686865
 100000.0
u: 38-element Array{Array{Float64,1},1}:
 [1.0, 0.0, 0.0]
 [0.9999204291393691, 3.5561185041121356e-5, 4.400967561260886e-5]
 [0.9995729559223238, 3.644642952896081e-5, 0.00039011041609949995]
 [0.994694537695402, 3.555312970053462e-5, 0.005270839698152516]
 [0.942799839980213, 2.7178123922722368e-5, 0.05719602148659764]
 [0.8843085150876675, 2.0089558270704015e-5, 0.11571878419341841]
 [0.8151453811674056, 1.4302247412452992e-5, 0.1849116710073444]
 [0.7319424907408939, 9.831783949413653e-6, 0.2681550535743972]
 [0.6188560096987714, 6.1818853000485e-6, 0.3818285529815796]
 [0.5232799324643338, 4.243528290332341e-6, 0.4807485075624622]
 [0.4723137834333632, 3.4750626494168956e-6, 0.5334800338739247]
 [0.4207263939079945, 2.8280332276717456e-6, 0.586882312762292]
 [0.3821356482406467, 2.402080628448163e-6, 0.6297112063291876]
 ⋮
 [0.16491794942656252, 7.189209483624563e-7, 0.9164558075422301]
 [0.1554180870952484, 6.626886949474939e-7, 0.9371371701605717]
 [0.14537427725267418, 6.048659083705944e-7, 0.9605390583967856]
 [0.13462413739231938, 5.450737202766779e-7, 0.9872311349508216]
 [0.12299702279641862, 4.830764171287055e-7, 1.0178361471252302]
 [0.11001871844103826, 4.182640327891675e-7, 1.051659642831036]
 [0.09683670918952411, 3.5591436078449825e-7, 1.0878571227195948]
 [0.08557637457011254, 3.0572022320626515e-7, 1.1192890635607418]
 [0.0777968905854029, 2.72780085477308e-7, 1.1404974359146611]
 [0.07059752682956451, 2.4310440195287806e-7, 1.161273325722123]
 [0.06129612078370883, 2.0629784026809529e-7, 1.1878833034246667]
 [0.05262483532980392, 1.73522393239353e-7, 1.2122395832464197]

julia> sol.destats
DiffEqBase.DEStats
Number of function 1 evaluations:                  1027
Number of function 2 evaluations:                  0
Number of W matrix evaluations:                    176
Number of linear solves:                           1164
Number of Jacobians created:                       41
Number of nonlinear solver iterations:             0
Number of nonlinear solver convergence failures:   0
Number of rootfind condition calls:                0
Number of accepted steps:                          37
Number of rejected steps:                          0
```
We have become much closer to SEULEX which is around ~ 24 steps. I didn't find any optimal init_order, so using the default one.
@ChrisRackauckas @kanav99 please have a look.",True,1244,https://api.github.com/repos/SciML/OrdinaryDiffEq.jl/pulls/1244,https://github.com/SciML/OrdinaryDiffEq.jl/pull/1244,closed,41,21,3,4,0,0,0,0,[],2020-08-15 16:54:56+00:00,2020-08-15 23:06:44+00:00,22308.0,6:11:48,[],"[{'commit_sha': '1058f1ec21363a8ddcdb519d5aeaa986f4792e9c', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f0d77e968ebbbd396829ef36af41d017a333484e', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '80fe426581efd5c49988ce22064c8db8535d8aa9', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d6b233b6a7a134a7c7329a011710dfbbca52b2f', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}]",Utkarsh,37050056,,User,,79,,14,27
468468985,Fix similar->zero causing NaN dt,"https://github.com/SciML/DifferentialEquations.jl/issues/636. There were some similar initialisations in initdt.jl which was causing integrator.dt to be NaN.
@ChrisRackauckas ",True,1245,https://api.github.com/repos/SciML/OrdinaryDiffEq.jl/pulls/1245,https://github.com/SciML/OrdinaryDiffEq.jl/pull/1245,closed,3,3,1,1,0,0,0,0,[],2020-08-16 16:59:38+00:00,2020-08-16 21:22:38+00:00,15780.0,4:23:00,[],"[{'commit_sha': '252897a7ff2387af57a1a8cb48513706cb9c4fa0', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}]",Utkarsh,37050056,,User,,79,,14,27
468972537,Allocation fixes in Implicit Extrapolation Methods,,True,1246,https://api.github.com/repos/SciML/OrdinaryDiffEq.jl/pulls/1246,https://github.com/SciML/OrdinaryDiffEq.jl/pull/1246,closed,32,12,2,4,2,0,0,0,[],2020-08-17 17:36:52+00:00,2020-08-18 21:54:58+00:00,101886.0,"1 day, 4:18:06",[],"[{'commit_sha': 'b8f2a1ac06642396b8f77b421b9a8f0df8e78e2f', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6856d7b286d74f0f1210cb0c02020b565790058e', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa6fa80109bb4d10957964d27700d2c999ac11c8', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b4a92d52a80d453fd65aa7799cfbe20cfab6d1b1', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}]",Utkarsh,37050056,,User,,79,,14,27
471135867,Allocation fixes in controllers for Hairer Wanner Methods,"Hi, we were not previously caching `work` and `dt_new` arrays which were required in controllers calculation, and hence being redundant allocation was happening. I have made a fix for these methods. The performance improvement is not humongous, but unnecessary allocations have been swooped away. 

Before:
```
julia> for tfinal = 1.0:2.0:30.0
           tspan = (0.0, tfinal)
           prob = ODEProblem(test!, u0, tspan)
           integrator = init(prob, ExtrapolationMidpointHairerWanner(), save_everystep = false)
           @time solve!(integrator)
       end
  1.555949 seconds (3.29 M allocations: 150.225 MiB, 4.37% gc time)
  0.000075 seconds (95 allocations: 12.891 KiB)
  0.000206 seconds (141 allocations: 19.172 KiB)
  0.000194 seconds (186 allocations: 25.469 KiB)
  0.000195 seconds (186 allocations: 25.469 KiB)
  0.000114 seconds (188 allocations: 25.672 KiB)
  0.000184 seconds (233 allocations: 31.938 KiB)
  0.000165 seconds (280 allocations: 38.391 KiB)
  0.000279 seconds (281 allocations: 38.406 KiB)
  0.000198 seconds (326 allocations: 44.703 KiB)
  0.000181 seconds (326 allocations: 44.703 KiB)
  0.000209 seconds (328 allocations: 44.906 KiB)
  0.000207 seconds (373 allocations: 51.172 KiB)
  0.000287 seconds (420 allocations: 57.625 KiB)
  0.000351 seconds (420 allocations: 57.625 KiB)
```
After:
```
julia> for tfinal = 1.0:2.0:30.0
           tspan = (0.0, tfinal)
           prob = ODEProblem(test!, u0, tspan)
           integrator = init(prob, ExtrapolationMidpointHairerWanner(), save_everystep = false)
           @time solve!(integrator)
       end
  0.156939 seconds (368.53 k allocations: 17.480 MiB)
  0.000054 seconds (77 allocations: 10.672 KiB)
  0.000073 seconds (113 allocations: 15.828 KiB)
  0.000093 seconds (150 allocations: 21.031 KiB)
  0.000214 seconds (150 allocations: 21.031 KiB)
  0.000095 seconds (152 allocations: 21.234 KiB)
  0.000192 seconds (188 allocations: 26.391 KiB)
  0.000195 seconds (226 allocations: 31.734 KiB)
  0.000197 seconds (226 allocations: 31.734 KiB)
  0.000156 seconds (263 allocations: 36.938 KiB)
  0.000192 seconds (263 allocations: 36.938 KiB)
  0.000311 seconds (265 allocations: 37.141 KiB)
  0.000217 seconds (301 allocations: 42.297 KiB)
  0.000207 seconds (339 allocations: 47.641 KiB)
  0.000250 seconds (339 allocations: 47.641 KiB)
```
And proportional changes in other methods.",True,1251,https://api.github.com/repos/SciML/OrdinaryDiffEq.jl/pulls/1251,https://github.com/SciML/OrdinaryDiffEq.jl/pull/1251,closed,60,22,2,2,0,0,0,0,[],2020-08-20 17:56:40+00:00,2020-08-20 20:21:15+00:00,8675.0,2:24:35,[],"[{'commit_sha': '05e4841708d79c41c3ef860d7e70fe557a93d149', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70bd2d9938cb83e36735b4610e94f6ccc8d1da83', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}]",Utkarsh,37050056,,User,,79,,14,27
472180594,Higher order calculations in ImplicitEulerExtrapolation,"Hi, so I was checking whether Implicit Euler with Aitken Neville works with higher-order or not. It turns out that it overflows, and we need to reduce the `dt` at which we are computing. Hence, I made a fix similar to other Implicit Methods.
For eg.
**using high order like 20 in ROBER ODE:**
Before:
```
julia> sol = solve(prob,ImplicitEulerExtrapolation(min_order = 20))
┌ Warning: Threading in `ImplicitEulerExtrapolation` is currently disabled. Thus `threading` has been changed from `true` to `false`.
└ @ OrdinaryDiffEq C:\Users\Utkarsh\.julia\dev\OrdinaryDiffEq\src\algorithms.jl:83
┌ Warning: Instability detected. Aborting
└ @ DiffEqBase C:\Users\Utkarsh\.julia\packages\DiffEqBase\dKNbf\src\integrator_interface.jl:349
retcode: Unstable
Interpolation: 3rd order Hermite
t: 1-element Array{Float64,1}:
 0.0
u: 1-element Array{Array{Float64,1},1}:
 [1.0, 0.0, 0.0]
```
After:
```
julia> sol = solve(prob,ImplicitEulerExtrapolation(min_order = 20))
┌ Warning: Threading in `ImplicitEulerExtrapolation` is currently disabled. Thus `threading` has been changed from `true` to `false`.
└ @ OrdinaryDiffEq C:\Users\Utkarsh\.julia\dev\OrdinaryDiffEq\src\algorithms.jl:83
retcode: Success
Interpolation: 3rd order Hermite
t: 21-element Array{Float64,1}:
      0.0
      0.0015609382820287144
      0.011001749605620578
      0.06775757172412648
      0.36983974389820923
      1.2962698391952399
      3.727942365172029
      9.943568634020206
     26.518773814266726
     74.81637205296006
    233.42581098519383
    832.7345676290291
   2158.145539152609
   4617.786637793755
   8190.726946702099
  12775.039383312673
  23739.63765698102
  34582.62996253259
  56226.64660513247
  95508.56166612636
 100000.0
u: 21-element Array{Array{Float64,1},1}:
 [1.0, 0.0, 0.0]
 [0.9999375686614472, 3.419779507102845e-5, 2.8233543696178877e-5]
 [0.9995607692774234, 3.644310635560517e-5, 0.00040278761661060946]
 [0.9973253987875421, 3.603212015972786e-5, 0.0026385690927053767]
 [0.9862150979775987, 3.404561128801746e-5, 0.013750857308980647]
 [0.9584052224151375, 2.9486668787613843e-5, 0.041565483842833414]
 [0.9097046229790426, 2.2893296159717246e-5, 0.0902746733906135]
 [0.8418190697228017, 1.626899663050772e-5, 0.1581710179338828]
 [0.7562003655408687, 1.0935494405337653e-5, 0.2437983374789446]
 [0.649673994337944, 6.998439936510152e-6, 0.3503301375385432]
 [0.5170762184830957, 4.174558895618247e-6, 0.48293123536812804]
 [0.35928741460840796, 2.219941119577383e-6, 0.6407221213062583]
 [0.24709599501952081, 1.3059484842979802e-6, 0.7529144704674314]
 [0.16970248920687017, 8.151387513513569e-7, 0.8303084850268713]
 [0.12170588283853598, 5.532304675683344e-7, 0.8783055386991467]
 [0.09128398865668488, 4.012783156482845e-7, 0.9087282987499247]
 [0.05864932261618709, 2.4900386324924527e-7, 0.9414159506628607]
 [0.043853527781572026, 1.8333665735582641e-7, 0.9562424263516499]
 [0.029640188048821736, 1.2209433890434602e-7, 0.9707482303660615]
 [0.019270179932253242, 7.84833194615212e-8, 0.9820219281140218]
 [0.018475338753422835, 7.517616781533427e-8, 0.9828168096391945]
```
@ChrisRackauckas @kanav99 could you please have a look?",True,1254,https://api.github.com/repos/SciML/OrdinaryDiffEq.jl/pulls/1254,https://github.com/SciML/OrdinaryDiffEq.jl/pull/1254,closed,85,7,2,6,2,11,0,0,[],2020-08-23 21:33:19+00:00,2020-09-04 02:22:37+00:00,967758.0,"11 days, 4:49:18","[{'comment_id': 475271725, 'comment_body': ""Just a minor comment regarding the style: it's usually more common (IIRC also throughout DiffEq) to not add brackets here, see, e.g., the [style guide in the docs](https://docs.julialang.org/en/v1/manual/style-guide/#Don't-parenthesize-conditions-1.) Hence I suggest to write instead\r\n```suggestion\r\n        if index<=2 && j>=2\r\n```"", 'comment_created': datetime.datetime(2020, 8, 23, 21, 53, 29, tzinfo=datetime.timezone.utc), 'commenter': 'devmotion', 'type': 'User'}, {'comment_id': 475271761, 'comment_body': '```suggestion\r\n          if integrator.opts.internalnorm(diff1[1],t)<integrator.opts.internalnorm(diff2[1],t)\r\n```', 'comment_created': datetime.datetime(2020, 8, 23, 21, 53, 49, tzinfo=datetime.timezone.utc), 'commenter': 'devmotion', 'type': 'User'}, {'comment_id': 475271787, 'comment_body': '```suggestion\r\n              if index<=2 && j>=2\r\n```', 'comment_created': datetime.datetime(2020, 8, 23, 21, 54, 5, tzinfo=datetime.timezone.utc), 'commenter': 'devmotion', 'type': 'User'}, {'comment_id': 475271813, 'comment_body': '```suggestion\r\n                if integrator.opts.internalnorm(diff1[Threads.threadid()],t)<integrator.opts.internalnorm(diff2[Threads.threadid()],t)\r\n```', 'comment_created': datetime.datetime(2020, 8, 23, 21, 54, 26, tzinfo=datetime.timezone.utc), 'commenter': 'devmotion', 'type': 'User'}, {'comment_id': 475271837, 'comment_body': '```suggestion\r\n  if integrator.force_stepfail\r\n```', 'comment_created': datetime.datetime(2020, 8, 23, 21, 54, 42, tzinfo=datetime.timezone.utc), 'commenter': 'devmotion', 'type': 'User'}, {'comment_id': 475271883, 'comment_body': '```suggestion\r\n        if index<=2 && j>=2\r\n```', 'comment_created': datetime.datetime(2020, 8, 23, 21, 55, 4, tzinfo=datetime.timezone.utc), 'commenter': 'devmotion', 'type': 'User'}, {'comment_id': 475271905, 'comment_body': '```suggestion\r\n          if integrator.opts.internalnorm(diff1,t)<integrator.opts.internalnorm(diff2,t)\r\n```', 'comment_created': datetime.datetime(2020, 8, 23, 21, 55, 16, tzinfo=datetime.timezone.utc), 'commenter': 'devmotion', 'type': 'User'}, {'comment_id': 475271921, 'comment_body': '```suggestion\r\n              if index<=2 && j>=2\r\n```', 'comment_created': datetime.datetime(2020, 8, 23, 21, 55, 28, tzinfo=datetime.timezone.utc), 'commenter': 'devmotion', 'type': 'User'}, {'comment_id': 475271942, 'comment_body': '```suggestion\r\n                if integrator.opts.internalnorm(diff1,t)<integrator.opts.internalnorm(diff2,t)\r\n```', 'comment_created': datetime.datetime(2020, 8, 23, 21, 55, 38, tzinfo=datetime.timezone.utc), 'commenter': 'devmotion', 'type': 'User'}, {'comment_id': 475271972, 'comment_body': '```suggestion\r\n    if integrator.force_stepfail\r\n```', 'comment_created': datetime.datetime(2020, 8, 23, 21, 55, 52, tzinfo=datetime.timezone.utc), 'commenter': 'devmotion', 'type': 'User'}, {'comment_id': 475546298, 'comment_body': ""Thanks @devmotion for pointing in out, I didn't know about it. I will keep that in mind 😃 ."", 'comment_created': datetime.datetime(2020, 8, 24, 11, 55, 55, tzinfo=datetime.timezone.utc), 'commenter': 'utkarsh530', 'type': 'User'}]","[{'commit_sha': 'a716623fac668c853ba6a7e107c9adc4bec61d76', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1741f23447e81c12f6c60a82a7359b31d684b81', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a58320f3ba81ca24817fcffa9d5b51ee33711f27', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dbea5509015984e62a7799fe4aed1674ead23007', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd954b66f50a9b117b98de3d2c304eac5d7355c95', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '32d503ee29487599b3ef60110083f77868290ec8', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}]",Utkarsh,37050056,,User,,79,,14,27
418990936,MATLAB solver stats,"As discussed in #18 , I have exported stats from MATLAB into a `Dict`. I have also changed the implementation to directly compute the `mxsol` struct sol we can integrate new options. I had used extra `eval_string` because of the incompatibility of `MATLAB.jl` to parse nested structs. Incremented the patch version too. Also should no. of LU decompositions parameter MATLAB should be linked to what in `DEStats`?",True,20,https://api.github.com/repos/SciML/MATLABDiffEq.jl/pulls/20,https://github.com/SciML/MATLABDiffEq.jl/pull/20,closed,21,4,2,5,1,0,0,0,[],2020-05-16 16:30:38+00:00,2020-05-16 18:42:43+00:00,7925.0,2:12:05,[],"[{'commit_sha': '28bdf41c298b6e2ac1b7f872d1a6ab33b3a64a97', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e73c34acf7f776d0d3aaf1c360e22d181093fb3', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e93bf2f4a9cdecf46e7a351307900b8b2884b2b', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d84c92b6432f771f4b5e65e071bde296694fca3', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e63c4ba9768d754eeeccc0e72644f95f1dd124a', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}]",Utkarsh,37050056,,User,,79,,14,27
418023129,Change saveat handling similar to DiffEq,Fixes #17 ,True,18,https://api.github.com/repos/SciML/MATLABDiffEq.jl/pulls/18,https://github.com/SciML/MATLABDiffEq.jl/pull/18,closed,6,1,1,2,5,2,0,0,[],2020-05-14 14:10:31+00:00,2020-05-14 14:25:34+00:00,903.0,0:15:03,"[{'comment_id': 425173718, 'comment_body': '`tspan = Array(prob.tspan[1]:saveat:prob.tspan[2])`', 'comment_created': datetime.datetime(2020, 5, 14, 14, 19, 6, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}, {'comment_id': 425173846, 'comment_body': '```suggestion\r\n        tspan = Array(prob.tspan[1]:saveat:prob.tspan[2])\r\n```', 'comment_created': datetime.datetime(2020, 5, 14, 14, 19, 15, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}]","[{'commit_sha': '3642512378a799aa4da8516b809eef59bda396d0', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '59d5fe85c293bb26fc7965fc81d34128103f9f4d', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}]",Utkarsh,37050056,,User,,79,,14,27
439322760,Fix Typos and added new KenCarp methods,,True,377,https://api.github.com/repos/SciML/DiffEqDocs.jl/pulls/377,https://github.com/SciML/DiffEqDocs.jl/pull/377,closed,10,6,2,3,2,0,0,0,[],2020-06-24 16:39:40+00:00,2020-06-25 14:43:01+00:00,79401.0,22:03:21,[],"[{'commit_sha': 'e2f46a72a0743efa4745a1a3282f365d3c1de0a8', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45558e5666e58df4b8e6155699798be8801afae0', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e47969f845eb3075b88f8d03719788c5198d3666', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}]",Utkarsh,37050056,,User,,79,,14,27
440928214,Broken example in Implicit Extrapolation Methods and typo fix,"https://docs.sciml.ai/stable/solvers/ode_solve/#Parallelized-Implicit-Extrapolation-Methods-1

MWE:
```
julia> alg = ImplicitEulerExtrapolation(max_order=7,min_order=4,init_order=4,sequence=:bulirsch)
ERROR: MethodError: no method matching ImplicitEulerExtrapolation(; max_order=7, min_order=4, init_order=4, sequence=:bulirsch)
Closest candidates are:
  ImplicitEulerExtrapolation(; chunk_size, autodiff, diff_type, linsolve, max_order, min_order, init_order, threading) at C:\Users\Utkarsh\.julia\dev\OrdinaryDiffEq\src\algorithms.jl:63 got unsupported keyword argument ""sequence""
Stacktrace:
 [1] kwerr(::NamedTuple{(:max_order, :min_order, :init_order, :sequence),Tuple{Int64,Int64,Int64,Symbol}}, ::Type{T} where T) at .\error.jl:157
 [2] top-level scope at REPL[64]:1
```
@ChrisRackauckas ",True,379,https://api.github.com/repos/SciML/DiffEqDocs.jl/pulls/379,https://github.com/SciML/DiffEqDocs.jl/pull/379,closed,3,3,1,1,0,0,0,0,[],2020-06-27 15:47:10+00:00,2020-06-27 16:15:17+00:00,1687.0,0:28:07,[],"[{'commit_sha': 'a7e3f3f23f2b7e6478df5460c45b33451f97a67d', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}]",Utkarsh,37050056,,User,,79,,14,27
457839794,Update Parallel Extrapolation Docs,@ChrisRackauckas I have updated the docs. Please have a look.,True,388,https://api.github.com/repos/SciML/DiffEqDocs.jl/pulls/388,https://github.com/SciML/DiffEqDocs.jl/pull/388,closed,6,3,1,2,0,0,0,0,[],2020-07-28 14:15:43+00:00,2020-07-28 14:16:57+00:00,74.0,0:01:14,[],"[{'commit_sha': 'f4d0e108af09ae72a5bc1747bbea4a0fa890d609', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '012cd98b730fb64bc10259956234c577a1de163b', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}]",Utkarsh,37050056,,User,,79,,14,27
442230815,Update Benchmarks to new DiffEqDevTools,"Hi, I was fiddling around with Benchmarks and saw this documentation was not updated to the new build at DiffEqDevTools. MWE:

```
julia> tspan = [0,10]
2-element Array{Int64,1}:
  0
 10

julia> setups = [Dict(:alg=>:DP5)
                 Dict(:abstol=>1e-3,:reltol=>1e-6,:alg=>:ode45) # Fix ODE to be normal
                 Dict(:alg=>:dopri5)]
3-element Array{Dict{Symbol,V} where V,1}:
 Dict(:alg => :DP5)
 Dict{Symbol,Any}(:alg => :ode45,:reltol => 1.0e-6,:abstol => 0.001)
 Dict(:alg => :dopri5)

julia> prob = DifferentialEquations.prob_ode_large2Dlinear
ERROR: UndefVarError: prob_ode_large2Dlinear not defined
Stacktrace:
 [1] getproperty(::Module, ::Symbol) at .\Base.jl:26
 [2] top-level scope at REPL[40]:1

julia> names = [""DifferentialEquations"";""ODE"";""ODEInterface""]
3-element Array{String,1}:
 ""DifferentialEquations""
 ""ODE""
 ""ODEInterface""

julia> shoot = Shootout(prob,tspan,setups;dt=1/2^(10),names=names)
ERROR: MethodError: no method matching Shootout(::ODEProblem{Array{Float64,2},Tuple{Float64,Float64},true,Float64,ODEFunction{true,DiffEqProblemLibrary.ODEProblemLibrary.var""#5#6"",LinearAlgebra.UniformScaling{Bool},DiffEqProblemLibrary.ODEProblemLibrary.var""#7#8"",Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}},DiffEqBase.StandardODEProblem}, ::Array{Int64,1}, ::Array{Dict{Symbol,V} where V,1}; dt=0.0009765625, names=[""DifferentialEquations"", ""ODE"", ""ODEInterface""])
Closest candidates are:
  Shootout(::Any, ::Any, ::Any, ::Any, ::Any, ::Any, ::Any, ::Any, ::Any, ::Any) at C:\Users\Utkarsh\.julia\packages\DiffEqDevTools\nDVct\src\benchmark.jl:5 got unsupported keyword arguments ""dt"", ""names""
  Shootout(::Array{Dict{Symbol,Any},1}, ::Any, ::Any, ::Any, ::Any, ::Any, ::Array{String,1}, ::Int64, ::Int64, ::String) at C:\Users\Utkarsh\.julia\packages\DiffEqDevTools\nDVct\src\benchmark.jl:5 got unsupported keyword arguments ""dt"", ""names""
  Shootout(::Any, ::Any; appxsol, names, error_estimate, numruns, seconds, kwargs...) at C:\Users\Utkarsh\.julia\packages\DiffEqDevTools\nDVct\src\benchmark.jl:31
Stacktrace:
 [1] top-level scope at REPL[42]:1
``` 

```
julia> abstols = 1./10.^(3:10)
ERROR: syntax: invalid syntax ""1./""; add space(s) to clarify
Stacktrace:
 [1] top-level scope at REPL[42]:0

julia> reltols = 1./10.^(3:10)
ERROR: syntax: invalid syntax ""1./""; add space(s) to clarify
Stacktrace:
 [1] top-level scope at REPL[42]:0

julia> wp = WorkPrecision(prob,tspan,abstols,reltols;alg=:DP5,name=""Dormand-Prince 4/5"")
ERROR: Inappropiate solve command. The arguments do not make sense. Likely, you gave an algorithm which does not actually exist (or does not `<:DiffEqBase.DEAlgorithm`)
Stacktrace:
 [1] error(::String) at .\error.jl:33
 [2] __solve(::ODEProblem{Array{Float64,2},Tuple{Float64,Float64},true,Float64,ODEFunction{true,DiffEqProblemLibrary.ODEProblemLibrary.var""#5#6"",LinearAlgebra.UniformScaling{Bool},DiffEqProblemLibrary.ODEProblemLibrary.var""#7#8"",Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}},DiffEqBase.StandardODEProblem}, ::Array{Int64,1}; default_set::Bool, second_time::Bool, kwargs::Base.Iterators.Pairs{Symbol,Any,NTuple{5,Symbol},NamedTuple{(:alg, :abstol, :reltol, :timeseries_errors, :dense_errors),Tuple{Symbol,Float64,Float64,Bool,Bool}}}) at C:\Users\Utkarsh\.julia\packages\DiffEqBase\LGnTa\src\solve.jl:278
 [3] solve_call(::ODEProblem{Array{Float64,2},Tuple{Float64,Float64},true,Float64,ODEFunction{true,DiffEqProblemLibrary.ODEProblemLibrary.var""#5#6"",LinearAlgebra.UniformScaling{Bool},DiffEqProblemLibrary.ODEProblemLibrary.var""#7#8"",Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}},DiffEqBase.StandardODEProblem}, ::Array{Int64,1}; merge_callbacks::Bool, kwargs::Base.Iterators.Pairs{Symbol,Any,NTuple{5,Symbol},NamedTuple{(:alg, :abstol, :reltol, :timeseries_errors, :dense_errors),Tuple{Symbol,Float64,Float64,Bool,Bool}}}) at C:\Users\Utkarsh\.julia\packages\DiffEqBase\LGnTa\src\solve.jl:96
 [4] solve_up(::ODEProblem{Array{Float64,2},Tuple{Float64,Float64},true,Float64,ODEFunction{true,DiffEqProblemLibrary.ODEProblemLibrary.var""#5#6"",LinearAlgebra.UniformScaling{Bool},DiffEqProblemLibrary.ODEProblemLibrary.var""#7#8"",Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}},DiffEqBase.StandardODEProblem}, ::Nothing, ::Array{Float64,2}, ::Float64, ::Array{Int64,1}; kwargs::Base.Iterators.Pairs{Symbol,Any,NTuple{5,Symbol},NamedTuple{(:alg, :abstol, :reltol, :timeseries_errors, :dense_errors),Tuple{Symbol,Float64,Float64,Bool,Bool}}}) at C:\Users\Utkarsh\.julia\packages\DiffEqBase\LGnTa\src\solve.jl:128
 [5] solve(::ODEProblem{Array{Float64,2},Tuple{Float64,Float64},true,Float64,ODEFunction{true,DiffEqProblemLibrary.ODEProblemLibrary.var""#5#6"",LinearAlgebra.UniformScaling{Bool},DiffEqProblemLibrary.ODEProblemLibrary.var""#7#8"",Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}},DiffEqBase.StandardODEProblem}, ::Array{Int64,1}; sensealg::Nothing, u0::Nothing, p::Nothing, kwargs::Base.Iterators.Pairs{Symbol,Any,NTuple{5,Symbol},NamedTuple{(:alg, :abstol, :reltol, :timeseries_errors, :dense_errors),Tuple{Symbol,Float64,Float64,Bool,Bool}}}) at C:\Users\Utkarsh\.julia\packages\DiffEqBase\LGnTa\src\solve.jl:106
 [6] WorkPrecision(::ODEProblem{Array{Float64,2},Tuple{Float64,Float64},true,Float64,ODEFunction{true,DiffEqProblemLibrary.ODEProblemLibrary.var""#5#6"",LinearAlgebra.UniformScaling{Bool},DiffEqProblemLibrary.ODEProblemLibrary.var""#7#8"",Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}},DiffEqBase.StandardODEProblem}, ::Array{Int64,1}, ::Array{Float64,1}, ::Array{Float64,1}, ::Nothing; name::String, appxsol::Nothing, error_estimate::Symbol, numruns::Int64, seconds::Int64, kwargs::Base.Iterators.Pairs{Symbol,Symbol,Tuple{Symbol},NamedTuple{(:alg,),Tuple{Symbol}}}) at C:\Users\Utkarsh\.julia\packages\DiffEqDevTools\nDVct\src\benchmark.jl:183
 [7] top-level scope at REPL[45]:1
```

```
julia> wp_set = WorkPrecisionSet(prob,tspan,abstols,reltols,setups;dt=1/2^4,numruns=2)
ERROR: MethodError: no method matching WorkPrecisionSet(::ODEProblem{Array{Float64,2},Tuple{Float64,Float64},true,Float64,ODEFunction{true,DiffEqProblemLibrary.ODEProblemLibrary.var""#5#6"",LinearAlgebra.UniformScaling{Bool},DiffEqProblemLibrary.ODEProblemLibrary.var""#7#8"",Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}},DiffEqBase.StandardODEProblem}, ::Array{Int64,1}, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Dict{Symbol,V} where V,1}; dt=0.0625, numruns=2)
Closest candidates are:
  WorkPrecisionSet(::Any, ::Any, ::Any, ::Any, ::Any, ::Any, ::Any, ::Any, ::Any) at C:\Users\Utkarsh\.julia\packages\DiffEqDevTools\nDVct\src\benchmark.jl:152 got unsupported keyword arguments ""dt"", ""numruns""
  WorkPrecisionSet(::DiffEqBase.AbstractRODEProblem, ::Any, ::Any, ::Any, ::Any; numruns, numruns_error, print_names, names, appxsol_setup, error_estimate, parallel_type, kwargs...) at C:\Users\Utkarsh\.julia\packages\DiffEqDevTools\nDVct\src\benchmark.jl:316
  WorkPrecisionSet(::Any, ::Any, ::Any, ::Any; print_names, names, appxsol, error_estimate, test_dt, kwargs...) at C:\Users\Utkarsh\.julia\packages\DiffEqDevTools\nDVct\src\benchmark.jl:239
  ...
Stacktrace:
 [1] top-level scope at REPL[46]:1

julia> setups = [Dict(:alg=>:RK4);Dict(:alg=>:Euler);Dict(:alg=>:BS3);
                 Dict(:alg=>:Midpoint);Dict(:alg=>:BS5);Dict(:alg=>:DP5)]
6-element Array{Dict{Symbol,Symbol},1}:
 Dict(:alg => :RK4)
 Dict(:alg => :Euler)
 Dict(:alg => :BS3)
 Dict(:alg => :Midpoint)
 Dict(:alg => :BS5)
 Dict(:alg => :DP5)

julia> wp_set = WorkPrecisionSet(prob,tspan,abstols,reltols,setups;dt=1/2^4,numruns=2)
ERROR: MethodError: no method matching WorkPrecisionSet(::ODEProblem{Array{Float64,2},Tuple{Float64,Float64},true,Float64,ODEFunction{true,DiffEqProblemLibrary.ODEProblemLibrary.var""#5#6"",LinearAlgebra.UniformScaling{Bool},DiffEqProblemLibrary.ODEProblemLibrary.var""#7#8"",Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}},DiffEqBase.StandardODEProblem}, ::Array{Int64,1}, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Dict{Symbol,Symbol},1}; dt=0.0625, numruns=2)
Closest candidates are:
  WorkPrecisionSet(::Any, ::Any, ::Any, ::Any, ::Any, ::Any, ::Any, ::Any, ::Any) at C:\Users\Utkarsh\.julia\packages\DiffEqDevTools\nDVct\src\benchmark.jl:152 got unsupported keyword arguments ""dt"", ""numruns""
  WorkPrecisionSet(::DiffEqBase.AbstractRODEProblem, ::Any, ::Any, ::Any, ::Any; numruns, numruns_error, print_names, names, appxsol_setup, error_estimate, parallel_type, kwargs...) at C:\Users\Utkarsh\.julia\packages\DiffEqDevTools\nDVct\src\benchmark.jl:316
  WorkPrecisionSet(::Any, ::Any, ::Any, ::Any; print_names, names, appxsol, error_estimate, test_dt, kwargs...) at C:\Users\Utkarsh\.julia\packages\DiffEqDevTools\nDVct\src\benchmark.jl:239
  ...
Stacktrace:
 [1] top-level scope at REPL[48]:1
```
@ChrisRackauckas please have a look.",True,20,https://api.github.com/repos/SciML/DiffEqDevDocs.jl/pulls/20,https://github.com/SciML/DiffEqDevDocs.jl/pull/20,closed,17,15,1,3,1,0,0,0,[],2020-06-30 18:53:15+00:00,2020-06-30 23:40:28+00:00,17233.0,4:47:13,[],"[{'commit_sha': '4ae5ceb2f89c7cc6c540ea26ff78bbe93de443dd', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '696710a891400e14884b15bce5c0dc36b5e3a57b', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd66154d393b1cb5dd337784d7fde61aa1255659c', 'committer_username': 'utkarsh530', 'committer_name': 'Utkarsh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 4, 20, 16, 49, tzinfo=datetime.timezone.utc)}]",Utkarsh,37050056,,User,,79,,14,27

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
71651195,OrdinaryDiffEq.jl,SciML/OrdinaryDiffEq.jl,Julia,199,527,19,142,8695,334,53,36,"[{'id': 889416841, 'number': 1631, 'closed': datetime.datetime(2022, 3, 25, 12, 51, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 25, 12, 0, 59, tzinfo=datetime.timezone.utc), 'time_taken': 3014.0, 'time_delta': '0:50:14', 'additions': 4, 'deletions': 0, 'state': 'closed'}, {'id': 828945702, 'number': 1579, 'closed': datetime.datetime(2022, 1, 22, 0, 32, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 1, 21, 21, 14, 22, tzinfo=datetime.timezone.utc), 'time_taken': 11891.0, 'time_delta': '3:18:11', 'additions': 34, 'deletions': 9, 'state': 'closed'}, {'id': 701094610, 'number': 1462, 'closed': None, 'created': datetime.datetime(2021, 8, 2, 4, 2, 30, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 5, 'deletions': 1, 'state': 'open'}, {'id': 472180594, 'number': 1254, 'closed': datetime.datetime(2020, 9, 4, 2, 22, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 23, 21, 33, 19, tzinfo=datetime.timezone.utc), 'time_taken': 967758.0, 'time_delta': '11 days, 4:49:18', 'additions': 85, 'deletions': 7, 'state': 'closed'}, {'id': 471135867, 'number': 1251, 'closed': datetime.datetime(2020, 8, 20, 20, 21, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 20, 17, 56, 40, tzinfo=datetime.timezone.utc), 'time_taken': 8675.0, 'time_delta': '2:24:35', 'additions': 60, 'deletions': 22, 'state': 'closed'}, {'id': 468972537, 'number': 1246, 'closed': datetime.datetime(2020, 8, 18, 21, 54, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 17, 17, 36, 52, tzinfo=datetime.timezone.utc), 'time_taken': 101886.0, 'time_delta': '1 day, 4:18:06', 'additions': 32, 'deletions': 12, 'state': 'closed'}, {'id': 468468985, 'number': 1245, 'closed': datetime.datetime(2020, 8, 16, 21, 22, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 16, 16, 59, 38, tzinfo=datetime.timezone.utc), 'time_taken': 15780.0, 'time_delta': '4:23:00', 'additions': 3, 'deletions': 3, 'state': 'closed'}, {'id': 468341468, 'number': 1244, 'closed': datetime.datetime(2020, 8, 15, 23, 6, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 15, 16, 54, 56, tzinfo=datetime.timezone.utc), 'time_taken': 22308.0, 'time_delta': '6:11:48', 'additions': 41, 'deletions': 21, 'state': 'closed'}, {'id': 467552254, 'number': 1243, 'closed': datetime.datetime(2020, 8, 14, 17, 18, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 13, 18, 7, 35, tzinfo=datetime.timezone.utc), 'time_taken': 83431.0, 'time_delta': '23:10:31', 'additions': 23, 'deletions': 19, 'state': 'closed'}, {'id': 466341153, 'number': 1239, 'closed': datetime.datetime(2020, 8, 12, 1, 52, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 11, 20, 33, 41, tzinfo=datetime.timezone.utc), 'time_taken': 19147.0, 'time_delta': '5:19:07', 'additions': 163, 'deletions': 14, 'state': 'closed'}, {'id': 464790763, 'number': 1235, 'closed': datetime.datetime(2020, 8, 11, 5, 12, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 7, 19, 54, 25, tzinfo=datetime.timezone.utc), 'time_taken': 292670.0, 'time_delta': '3 days, 9:17:50', 'additions': 281, 'deletions': 49, 'state': 'closed'}, {'id': 464224033, 'number': 1233, 'closed': datetime.datetime(2020, 8, 7, 14, 52, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 6, 19, 34, 1, tzinfo=datetime.timezone.utc), 'time_taken': 69525.0, 'time_delta': '19:18:45', 'additions': 3, 'deletions': 2, 'state': 'closed'}, {'id': 462897465, 'number': 1232, 'closed': datetime.datetime(2020, 8, 5, 13, 32, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 4, 17, 16, 3, tzinfo=datetime.timezone.utc), 'time_taken': 72993.0, 'time_delta': '20:16:33', 'additions': 721, 'deletions': 7, 'state': 'closed'}, {'id': 462311028, 'number': 1230, 'closed': datetime.datetime(2020, 8, 6, 12, 12, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 3, 17, 40, 30, tzinfo=datetime.timezone.utc), 'time_taken': 239539.0, 'time_delta': '2 days, 18:32:19', 'additions': 137, 'deletions': 79, 'state': 'closed'}, {'id': 456792459, 'number': 1217, 'closed': datetime.datetime(2020, 7, 28, 18, 38, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 26, 19, 12, 32, tzinfo=datetime.timezone.utc), 'time_taken': 170754.0, 'time_delta': '1 day, 23:25:54', 'additions': 23, 'deletions': 7, 'state': 'closed'}, {'id': 456444748, 'number': 1215, 'closed': datetime.datetime(2020, 7, 24, 23, 8, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 24, 19, 9, 24, tzinfo=datetime.timezone.utc), 'time_taken': 14332.0, 'time_delta': '3:58:52', 'additions': 422, 'deletions': 93, 'state': 'closed'}, {'id': 454703930, 'number': 1213, 'closed': datetime.datetime(2020, 7, 23, 12, 17, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 21, 19, 33, 58, tzinfo=datetime.timezone.utc), 'time_taken': 146610.0, 'time_delta': '1 day, 16:43:30', 'additions': 173, 'deletions': 49, 'state': 'closed'}, {'id': 452682216, 'number': 1212, 'closed': datetime.datetime(2020, 7, 20, 21, 43, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 19, 17, 41, 50, tzinfo=datetime.timezone.utc), 'time_taken': 100917.0, 'time_delta': '1 day, 4:01:57', 'additions': 19, 'deletions': 5, 'state': 'closed'}, {'id': 451261662, 'number': 1211, 'closed': datetime.datetime(2020, 7, 18, 16, 6, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 17, 16, 44, tzinfo=datetime.timezone.utc), 'time_taken': 84142.0, 'time_delta': '23:22:22', 'additions': 62, 'deletions': 11, 'state': 'closed'}, {'id': 448367984, 'number': 1209, 'closed': datetime.datetime(2020, 7, 15, 0, 15, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 13, 16, 39, 32, tzinfo=datetime.timezone.utc), 'time_taken': 113786.0, 'time_delta': '1 day, 7:36:26', 'additions': 49, 'deletions': 17, 'state': 'closed'}, {'id': 447774339, 'number': 1208, 'closed': datetime.datetime(2020, 7, 12, 20, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 11, 14, 23, 50, tzinfo=datetime.timezone.utc), 'time_taken': 109090.0, 'time_delta': '1 day, 6:18:10', 'additions': 35, 'deletions': 11, 'state': 'closed'}, {'id': 444920585, 'number': 1203, 'closed': datetime.datetime(2020, 7, 8, 23, 52, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 6, 17, 54, 12, tzinfo=datetime.timezone.utc), 'time_taken': 194296.0, 'time_delta': '2 days, 5:58:16', 'additions': 33, 'deletions': 13, 'state': 'closed'}, {'id': 444822095, 'number': 1202, 'closed': datetime.datetime(2020, 7, 8, 23, 51, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 6, 14, 44, 44, tzinfo=datetime.timezone.utc), 'time_taken': 205620.0, 'time_delta': '2 days, 9:07:00', 'additions': 58, 'deletions': 34, 'state': 'closed'}, {'id': 444307696, 'number': 1200, 'closed': datetime.datetime(2020, 7, 4, 21, 1, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 4, 17, 10, 34, tzinfo=datetime.timezone.utc), 'time_taken': 13835.0, 'time_delta': '3:50:35', 'additions': 55, 'deletions': 25, 'state': 'closed'}, {'id': 444148222, 'number': 1199, 'closed': datetime.datetime(2020, 7, 4, 15, 26, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 3, 17, 35, 53, tzinfo=datetime.timezone.utc), 'time_taken': 78634.0, 'time_delta': '21:50:34', 'additions': 79, 'deletions': 29, 'state': 'closed'}, {'id': 440219642, 'number': 1192, 'closed': datetime.datetime(2020, 6, 26, 1, 20, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 25, 19, 39, 36, tzinfo=datetime.timezone.utc), 'time_taken': 20448.0, 'time_delta': '5:40:48', 'additions': 8, 'deletions': 0, 'state': 'closed'}, {'id': 438027959, 'number': 1189, 'closed': datetime.datetime(2020, 6, 25, 16, 25, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 22, 15, 43, 10, tzinfo=datetime.timezone.utc), 'time_taken': 261725.0, 'time_delta': '3 days, 0:42:05', 'additions': 39, 'deletions': 1, 'state': 'closed'}, {'id': 436668371, 'number': 1187, 'closed': datetime.datetime(2020, 6, 19, 3, 1, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 18, 17, 40, 14, tzinfo=datetime.timezone.utc), 'time_taken': 33687.0, 'time_delta': '9:21:27', 'additions': 826, 'deletions': 3, 'state': 'closed'}, {'id': 433884960, 'number': 1178, 'closed': datetime.datetime(2020, 6, 13, 0, 46, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 12, 21, 6, 59, tzinfo=datetime.timezone.utc), 'time_taken': 13158.0, 'time_delta': '3:39:18', 'additions': 4, 'deletions': 1, 'state': 'closed'}, {'id': 433304704, 'number': 1177, 'closed': datetime.datetime(2020, 6, 19, 21, 41, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 11, 20, 1, 10, tzinfo=datetime.timezone.utc), 'time_taken': 697228.0, 'time_delta': '8 days, 1:40:28', 'additions': 760, 'deletions': 16, 'state': 'closed'}, {'id': 432003706, 'number': 1173, 'closed': datetime.datetime(2022, 1, 25, 7, 28, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 9, 18, 56, 46, tzinfo=datetime.timezone.utc), 'time_taken': 51366720.0, 'time_delta': '594 days, 12:32:00', 'additions': 39, 'deletions': 17, 'state': 'closed'}, {'id': 428504199, 'number': 1165, 'closed': datetime.datetime(2020, 6, 6, 15, 15, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 5, 14, 49, 58, tzinfo=datetime.timezone.utc), 'time_taken': 87961.0, 'time_delta': '1 day, 0:26:01', 'additions': 48, 'deletions': 22, 'state': 'closed'}, {'id': 428033737, 'number': 1164, 'closed': datetime.datetime(2020, 6, 5, 1, 31, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 4, 19, 8, 9, tzinfo=datetime.timezone.utc), 'time_taken': 23029.0, 'time_delta': '6:23:49', 'additions': 45, 'deletions': 16, 'state': 'closed'}, {'id': 427926561, 'number': 1163, 'closed': datetime.datetime(2020, 6, 4, 17, 41, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 4, 15, 39, 55, tzinfo=datetime.timezone.utc), 'time_taken': 7290.0, 'time_delta': '2:01:30', 'additions': 50, 'deletions': 22, 'state': 'closed'}, {'id': 426089376, 'number': 1158, 'closed': datetime.datetime(2020, 6, 11, 17, 38, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 1, 16, 29, 52, tzinfo=datetime.timezone.utc), 'time_taken': 868113.0, 'time_delta': '10 days, 1:08:33', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 420292272, 'number': 1141, 'closed': datetime.datetime(2020, 5, 19, 18, 32, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 19, 18, 32, 30, tzinfo=datetime.timezone.utc), 'time_taken': 24.0, 'time_delta': '0:00:24', 'additions': 173, 'deletions': 153, 'state': 'closed'}, {'id': 416852419, 'number': 1132, 'closed': datetime.datetime(2020, 5, 24, 4, 50, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 12, 16, 59, 48, tzinfo=datetime.timezone.utc), 'time_taken': 993056.0, 'time_delta': '11 days, 11:50:56', 'additions': 192, 'deletions': 164, 'state': 'closed'}, {'id': 415374768, 'number': 1130, 'closed': datetime.datetime(2020, 5, 27, 16, 26, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 8, 18, 45, 53, tzinfo=datetime.timezone.utc), 'time_taken': 1633213.0, 'time_delta': '18 days, 21:40:13', 'additions': 26, 'deletions': 27, 'state': 'closed'}, {'id': 411706736, 'number': 1125, 'closed': datetime.datetime(2020, 5, 1, 16, 53, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 30, 16, 38, 46, tzinfo=datetime.timezone.utc), 'time_taken': 87265.0, 'time_delta': '1 day, 0:14:25', 'additions': 37, 'deletions': 31, 'state': 'closed'}, {'id': 402015830, 'number': 1106, 'closed': None, 'created': datetime.datetime(2020, 4, 10, 18, 26, 48, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 7, 'deletions': 7, 'state': 'open'}, {'id': 395433493, 'number': 1098, 'closed': datetime.datetime(2020, 3, 30, 6, 45, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 30, 6, 23, 19, tzinfo=datetime.timezone.utc), 'time_taken': 1346.0, 'time_delta': '0:22:26', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 393994487, 'number': 1094, 'closed': datetime.datetime(2020, 3, 28, 1, 53, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 26, 7, 9, 18, tzinfo=datetime.timezone.utc), 'time_taken': 153867.0, 'time_delta': '1 day, 18:44:27', 'additions': 34, 'deletions': 25, 'state': 'closed'}, {'id': 390506808, 'number': 1088, 'closed': datetime.datetime(2020, 3, 18, 17, 18, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 18, 15, 32, 26, tzinfo=datetime.timezone.utc), 'time_taken': 6389.0, 'time_delta': '1:46:29', 'additions': 42, 'deletions': 37, 'state': 'closed'}, {'id': 389062745, 'number': 1085, 'closed': datetime.datetime(2020, 3, 17, 13, 14, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 16, 8, 19, 19, tzinfo=datetime.timezone.utc), 'time_taken': 104140.0, 'time_delta': '1 day, 4:55:40', 'additions': 11, 'deletions': 11, 'state': 'closed'}, {'id': 385301844, 'number': 1058, 'closed': datetime.datetime(2020, 3, 9, 0, 9, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 8, 19, 12, 8, tzinfo=datetime.timezone.utc), 'time_taken': 17849.0, 'time_delta': '4:57:29', 'additions': 5, 'deletions': 4, 'state': 'closed'}, {'id': 382525573, 'number': 1052, 'closed': datetime.datetime(2020, 3, 10, 20, 9, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 2, 17, 58, 38, tzinfo=datetime.timezone.utc), 'time_taken': 699049.0, 'time_delta': '8 days, 2:10:49', 'additions': 162, 'deletions': 1, 'state': 'closed'}, {'id': 378722116, 'number': 1047, 'closed': datetime.datetime(2020, 2, 26, 6, 41, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 23, 16, 10, 6, tzinfo=datetime.timezone.utc), 'time_taken': 225058.0, 'time_delta': '2 days, 14:30:58', 'additions': 383, 'deletions': 1, 'state': 'closed'}, {'id': 375609112, 'number': 1033, 'closed': datetime.datetime(2020, 2, 22, 1, 23, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 14, 23, 8, 21, tzinfo=datetime.timezone.utc), 'time_taken': 612914.0, 'time_delta': '7 days, 2:15:14', 'additions': 376, 'deletions': 2, 'state': 'closed'}]"
77259111,MATLABDiffEq.jl,SciML/MATLABDiffEq.jl,Julia,12,20,6,13,133,2,3,1,"[{'id': 418990936, 'number': 20, 'closed': datetime.datetime(2020, 5, 16, 18, 42, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 16, 16, 30, 38, tzinfo=datetime.timezone.utc), 'time_taken': 7925.0, 'time_delta': '2:12:05', 'additions': 21, 'deletions': 4, 'state': 'closed'}, {'id': 418049311, 'number': 19, 'closed': datetime.datetime(2020, 5, 16, 18, 42, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 14, 14, 51, 53, tzinfo=datetime.timezone.utc), 'time_taken': 186652.0, 'time_delta': '2 days, 3:50:52', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 418023129, 'number': 18, 'closed': datetime.datetime(2020, 5, 14, 14, 25, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 14, 14, 10, 31, tzinfo=datetime.timezone.utc), 'time_taken': 903.0, 'time_delta': '0:15:03', 'additions': 6, 'deletions': 1, 'state': 'closed'}]"
72511713,DiffEqDocs.jl,SciML/DiffEqDocs.jl,Julia,239,270,15,196,2367,28,8,6,"[{'id': 457839794, 'number': 388, 'closed': datetime.datetime(2020, 7, 28, 14, 16, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 28, 14, 15, 43, tzinfo=datetime.timezone.utc), 'time_taken': 74.0, 'time_delta': '0:01:14', 'additions': 6, 'deletions': 3, 'state': 'closed'}, {'id': 440928214, 'number': 379, 'closed': datetime.datetime(2020, 6, 27, 16, 15, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 27, 15, 47, 10, tzinfo=datetime.timezone.utc), 'time_taken': 1687.0, 'time_delta': '0:28:07', 'additions': 3, 'deletions': 3, 'state': 'closed'}, {'id': 439322760, 'number': 377, 'closed': datetime.datetime(2020, 6, 25, 14, 43, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 24, 16, 39, 40, tzinfo=datetime.timezone.utc), 'time_taken': 79401.0, 'time_delta': '22:03:21', 'additions': 10, 'deletions': 6, 'state': 'closed'}]"
73450222,DiffEqDevDocs.jl,SciML/DiffEqDevDocs.jl,Julia,18,8,4,26,182,2,3,1,"[{'id': 442230815, 'number': 20, 'closed': datetime.datetime(2020, 6, 30, 23, 40, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 30, 18, 53, 15, tzinfo=datetime.timezone.utc), 'time_taken': 17233.0, 'time_delta': '4:47:13', 'additions': 17, 'deletions': 15, 'state': 'closed'}]"
