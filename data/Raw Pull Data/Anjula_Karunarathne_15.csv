pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
422113186,Desktop: KeymapService: Initial implementation,"This PR includes the initial implementation of the `KeymapService` service. This service is responsible for abstracting the in-memory keymap. 

It's now possible to correctly parse `keymap-desktop.json` file and update the keymap.

* Replaces hardcoded [Accelerators](https://www.electronjs.org/docs/api/accelerator) of menu items defined in the `ElectronClient/app.js` and `ElectronClient/plugins/goToAnything.jsx` files with the `getAccelerator()` method defined in the service class mentioned above.
* Provides a simple `setAccelerator()` method for updating the in-memory keymap.
* Provides method `getKeymap()` which compares current keymap with default keymap and returns an object with the changes. This object can be converted to a string and saved to the disk.
* Provides method `setKeymap()` which accepts a custom keymap object as the parameter, validates, checks for duplicate Accelerators in the current platform and updates the in-memory keymap.
* Uses static method `isAccelerator()` method for validating Accelerator strings.
* Provides methods `resetCommand()` and `resetKeymap()` which resets shortcut for a single command and restores the entire keymap to default respectively.

The service is implemented using TypeScript classes and interfaces. All the methods currently implemented have been unit tested.",True,3252,https://api.github.com/repos/laurent22/joplin/pulls/3252,https://github.com/laurent22/joplin/pull/3252,closed,622,40,8,15,16,70,1,0,[{'name': 'desktop'}],2020-05-22 19:43:10+00:00,2020-08-02 11:26:56+00:00,6191026.0,"71 days, 15:43:46","[{'comment_id': 434730290, 'comment_body': 'As this is a draft, I guess you plan to remove the label from here at some point? As discussed it shouldn\'t be here as a shortcut essentially maps some keys to an action. The *action* might have a label, which will be displayed in the menu, toolbar tooltip, etc. but that property shouldn\'t be defined here. Currently it\'s set mostly on the menu items so there\'s probably some refactoring to do so that this label and other properties of the action can be accessed from elsewhere.\r\n\r\nProbably we should have structures like this:\r\n\r\n```\r\nconst shortcut = { accelerator: ""CommandOrControl+N"", command: ""newNoteItem"", section: ""File"" }\r\n```\r\n\r\nand elsewhere:\r\n\r\n```\r\nconst command = { name: ""newNoteItem"", label: _(""New note"") }\r\n```', 'comment_created': datetime.datetime(2020, 6, 3, 17, 19, 3, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 434732567, 'comment_body': ""As the keymapHandler maintains some state I feel it would be best to define it has a class, to make it clear what's a property or not. Later you will want to inject a logger, maybe a dispatcher, etc. and for all this it's more convenient to have a class.\r\n\r\nIt's also a bit to be consistent with the rest of the application where services like this are defined as classes. See for example the services defined in lib/services. I think you should create something like this too and make it extend `BaseService`."", 'comment_created': datetime.datetime(2020, 6, 3, 17, 23, 2, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 434739502, 'comment_body': ""Agreed! I'll refactor."", 'comment_created': datetime.datetime(2020, 6, 3, 17, 34, 53, tzinfo=datetime.timezone.utc), 'commenter': 'anjulalk', 'type': 'User'}, {'comment_id': 434746686, 'comment_body': ""I kept the labels so that the GUI editor can iterate over all shortcuts and display them. I guess we can remove the labels, and then hard-code command names and labels as you've mentioned in the GUI editor until we get the actions refactored?\r\n\r\nThanks for reviewing! "", 'comment_created': datetime.datetime(2020, 6, 3, 17, 47, 29, tzinfo=datetime.timezone.utc), 'commenter': 'anjulalk', 'type': 'User'}, {'comment_id': 443151114, 'comment_body': ""All this should be part of KeymapService.\r\n\r\nLet's not support comments in the JSON file for now - it will have to be either valid JSON or it's an error. Also if you strip off comments, I guess you should put them back when the file is modified from the editor and it's getting needlessly complicated. I suppose later on we could use a more advanced JSON parser to support comments, trailing commas, etc. but for now basic JSON.parse is fine."", 'comment_created': datetime.datetime(2020, 6, 20, 18, 39, 19, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 443151148, 'comment_body': 'Error should be displayed to the user with an explanation on how to fix the problem. For example, by giving the line number where the error happens.', 'comment_created': datetime.datetime(2020, 6, 20, 18, 39, 51, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 443151232, 'comment_body': ""The default seems to be `['darwin', 'win32', 'linux', 'freebsd']` so maybe you could remove the platforms property in that case? If platforms property is missing, assume that it works on all platforms (like for the Setting class)."", 'comment_created': datetime.datetime(2020, 6, 20, 18, 41, 14, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 443151334, 'comment_body': ""Why is there a dynamic check for the platform when you already have a platform property. There should be two shortcuts:\r\n\r\n```\r\n{ accelerator: 'Shift+Command+F', command: 'focusSearch', platforms: ['darwin'] },\r\n{ accelerator: 'F6', command: 'focusSearch', platforms: ['win32', 'linux', 'freebsd'] },\r\n```\r\n"", 'comment_created': datetime.datetime(2020, 6, 20, 18, 42, 37, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 443151439, 'comment_body': '`synchronize`', 'comment_created': datetime.datetime(2020, 6, 20, 18, 44, 9, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 443151445, 'comment_body': '`hideApp`', 'comment_created': datetime.datetime(2020, 6, 20, 18, 44, 15, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 443151479, 'comment_body': 'What does ""closeWindow"" do? Exit the app completely or just hide the window?', 'comment_created': datetime.datetime(2020, 6, 20, 18, 44, 47, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 443151527, 'comment_body': 'Same here - the default config should be static without dynamic check on platform.', 'comment_created': datetime.datetime(2020, 6, 20, 18, 45, 17, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 443151557, 'comment_body': 'F1 should be `help`', 'comment_created': datetime.datetime(2020, 6, 20, 18, 45, 38, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 443151572, 'comment_body': '""gotoAnything""', 'comment_created': datetime.datetime(2020, 6, 20, 18, 45, 54, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 443151652, 'comment_body': ""Please only use strict equality `===`. And I feel there should be not any missing accelerator - if you try to get a command and it's not in the list that should be an error."", 'comment_created': datetime.datetime(2020, 6, 20, 18, 47, 12, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 443151734, 'comment_body': ""Please use async/await. Also I couldn't see why a promise was needed?"", 'comment_created': datetime.datetime(2020, 6, 20, 18, 48, 41, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 443151802, 'comment_body': 'Please create a separate function to validate a keymap.\r\n\r\nWhat does the user do when a keymap is not valid? How do we tell them?', 'comment_created': datetime.datetime(2020, 6, 20, 18, 49, 42, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 443151956, 'comment_body': 'Why an underscore in `_accelerator`?', 'comment_created': datetime.datetime(2020, 6, 20, 18, 51, 58, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 443151979, 'comment_body': 'What does this function do?', 'comment_created': datetime.datetime(2020, 6, 20, 18, 52, 21, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 443197894, 'comment_body': 'You have twice the same shortcut - ""options"" and ""preferences"". The preferences are generally called ""config screen"" in the doc, so let\'s called the shortcut ""config"".', 'comment_created': datetime.datetime(2020, 6, 21, 8, 55, 24, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 444308890, 'comment_body': 'This is a utility function for the GUI editor. Basically it converts ""CommandOrControl+X"" into ""Control+X"" on Windows/Linux and ""Command+X"" on Mac. If we\'re seperating the default keymaps then this is no longer needed.', 'comment_created': datetime.datetime(2020, 6, 23, 15, 22, 30, tzinfo=datetime.timezone.utc), 'commenter': 'anjulalk', 'type': 'User'}, {'comment_id': 444978780, 'comment_body': ""If there's an error in the JSON formatting, now it'll be shown in an error dialogue to the user (Standard error message thrown by the `JSON.parse()` function)\r\n\r\nI've also added more helpful error messages.\r\n\r\nHowever it's a bit complicated to find the line number of some object. I think we'll have to write a mini JSON parser to do that. Is that really necessary?"", 'comment_created': datetime.datetime(2020, 6, 24, 15, 25, 24, tzinfo=datetime.timezone.utc), 'commenter': 'anjulalk', 'type': 'User'}, {'comment_id': 445612955, 'comment_body': ""Hide and Close window seems to be the same. But there are two menu items. I really don't know why.."", 'comment_created': datetime.datetime(2020, 6, 25, 14, 44, 2, tzinfo=datetime.timezone.utc), 'commenter': 'anjulalk', 'type': 'User'}, {'comment_id': 446577263, 'comment_body': ""> However it's a bit complicated to find the line number of some object. I think we'll have to write a mini JSON parser to do that. Is that really necessary?\r\n\r\nNo that's fine - we just display the errors the lib gives us. If they aren't very good then so be it. Later we can indeed think about using a more advanced parser with comment support, better error message, etc. but that's later."", 'comment_created': datetime.datetime(2020, 6, 27, 23, 10, 35, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 446577730, 'comment_body': 'If the class overrides BaseService, that should not be needed. You can access `this.logger()` from BaseService.', 'comment_created': datetime.datetime(2020, 6, 27, 23, 17, 42, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 446577829, 'comment_body': 'Not needed as it inherits from BaseService', 'comment_created': datetime.datetime(2020, 6, 27, 23, 19, 13, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 446578047, 'comment_body': 'What happens in case of an error? Can the app starts? What keyboard shortcuts are available?', 'comment_created': datetime.datetime(2020, 6, 27, 23, 22, 2, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 446578318, 'comment_body': 'Thanks for adding the error message. Could you also on each error message mentions the item that\'s failing? i.e. `Couldn\'t find the ""command"" property on keymap item ${JSON.stringify(item)}` That will make it easier to identify the faulty item.', 'comment_created': datetime.datetime(2020, 6, 27, 23, 25, 51, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 446578442, 'comment_body': ""I don't see this method being referenced outside of the class. If that's indeed the case, please mark it as private. In general, please mark all non-public methods as private."", 'comment_created': datetime.datetime(2020, 6, 27, 23, 27, 43, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 446578678, 'comment_body': ""The role of this method, according to its name, is to validate the keymap, so it shouldn't have any side-effects like resetting the keymap. Any side effect should be done where the error is caught (if it is caught somewhere)."", 'comment_created': datetime.datetime(2020, 6, 27, 23, 30, 21, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 446578749, 'comment_body': ""I don't understand what are these contextSets or why they are being set in this method (considering the method doesn't return anything). Could you clarify what it is?"", 'comment_created': datetime.datetime(2020, 6, 27, 23, 31, 16, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 446578840, 'comment_body': 'Not needed', 'comment_created': datetime.datetime(2020, 6, 27, 23, 32, 56, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 449191299, 'comment_body': ""Sorry about that. I'll remove it."", 'comment_created': datetime.datetime(2020, 7, 2, 18, 14, 47, tzinfo=datetime.timezone.utc), 'commenter': 'anjulalk', 'type': 'User'}, {'comment_id': 449192538, 'comment_body': 'Errors are shown in a message box. The app will be closed when user presses the OK button.', 'comment_created': datetime.datetime(2020, 7, 2, 18, 17, 21, tzinfo=datetime.timezone.utc), 'commenter': 'anjulalk', 'type': 'User'}, {'comment_id': 449194984, 'comment_body': ""This error is shown next to another error message:\r\n```\r\ntry {\r\n    this.validateKeymapItem(item); // Throws if there are any issues in the keymap item\r\n    this.setAccelerator(item.command, item.accelerator);\r\n} catch (err) {\r\n    throw new Error(\r\n        `Keymap item ${JSON.stringify(item)} is invalid!\\nReason: ${err.message}`\r\n    );\r\n}\r\n```\r\nPlease let me know if it should be in the format you've mentioned. I'll change it if needed.\r\n"", 'comment_created': datetime.datetime(2020, 7, 2, 18, 22, 28, tzinfo=datetime.timezone.utc), 'commenter': 'anjulalk', 'type': 'User'}, {'comment_id': 449195690, 'comment_body': ""I agree. I'll add the reset method call to where it's caught."", 'comment_created': datetime.datetime(2020, 7, 2, 18, 23, 56, tzinfo=datetime.timezone.utc), 'commenter': 'anjulalk', 'type': 'User'}, {'comment_id': 449201999, 'comment_body': 'It\'s an object that keeps record of Accelerators used in each context. \r\nFor example:\r\n```\r\n{\r\n    default: (\'Ctrl+X\', \'Ctrl+Z\', ..........), // Set\r\n    contextA: (\'Ctrl+Shift+X\', \'Ctrl+Shift+Z\', ..........) // Set\r\n    contextB:  (\'Ctrl+Alt+Shift+T\', \'Ctrl+Shift+F10\', ......) // Set\r\n}\r\n```\r\n\r\nEach keymap item has a ""context"" property. If not, ""default"" will be the context of that keymap item.\r\n\r\nAll accelerators are divided to contexts and kept in the appropriate sets. Each accelerator is checked if it already exists in their context, and then added into the set.', 'comment_created': datetime.datetime(2020, 7, 2, 18, 37, 22, tzinfo=datetime.timezone.utc), 'commenter': 'anjulalk', 'type': 'User'}, {'comment_id': 449758680, 'comment_body': 'Then it was already good, thanks!', 'comment_created': datetime.datetime(2020, 7, 4, 9, 55, 27, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 449759334, 'comment_body': ""I know we went back and forth with this context issue, but I'm wondering, do we need it at this point? Like if you remove this concept altogether, would your implementation still work? If it does, let's remove it for now but please let me know."", 'comment_created': datetime.datetime(2020, 7, 4, 10, 5, 40, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 449766672, 'comment_body': ""Understood. It's not really useful at the moment. I'll remove it, and it'll work just fine."", 'comment_created': datetime.datetime(2020, 7, 4, 11, 50, 49, tzinfo=datetime.timezone.utc), 'commenter': 'anjulalk', 'type': 'User'}, {'comment_id': 450333136, 'comment_body': '`!item`', 'comment_created': datetime.datetime(2020, 7, 6, 16, 17, 10, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 450335477, 'comment_body': ""We should be strict about the input we accept, so this function should not be needed, and the getWeight function either. Now that you've split config between macOS and the rest, this is even less necessary since we don't have CommandOrControl anymore."", 'comment_created': datetime.datetime(2020, 7, 6, 16, 20, 46, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 450335824, 'comment_body': 'What does this function do?', 'comment_created': datetime.datetime(2020, 7, 6, 16, 21, 21, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 450336621, 'comment_body': ""This is a get function but it's mutating data. Why does it need to change customKeymap?"", 'comment_created': datetime.datetime(2020, 7, 6, 16, 22, 37, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 450336934, 'comment_body': 'what if the item is not found?', 'comment_created': datetime.datetime(2020, 7, 6, 16, 23, 5, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 450341209, 'comment_body': ""This should be done in a loadKeymap which will take a keymap file path as input. That way you won't need a dependency to Setting and it will make the class dependencies more obvious."", 'comment_created': datetime.datetime(2020, 7, 6, 16, 29, 51, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 450451869, 'comment_body': ""It's for validating accelerators. Electron silently disables shortcuts if we provide invalid accelerators for menu items. This function is used for validating accelerators in the `keymap-desktop.json` file. The program will crash if the user provides invalid accelerators."", 'comment_created': datetime.datetime(2020, 7, 6, 20, 6, 5, tzinfo=datetime.timezone.utc), 'commenter': 'anjulalk', 'type': 'User'}, {'comment_id': 450454598, 'comment_body': ""Okay, I'll remove this."", 'comment_created': datetime.datetime(2020, 7, 6, 20, 12, 4, tzinfo=datetime.timezone.utc), 'commenter': 'anjulalk', 'type': 'User'}, {'comment_id': 450455683, 'comment_body': ""This currently accepts modifiers like CommandOrControl, CmdOrCtrl because I was planning to support all valid Electron accelerators. But if we are strictly not accepting those modifiers, I'll have to make some changes."", 'comment_created': datetime.datetime(2020, 7, 6, 20, 14, 27, tzinfo=datetime.timezone.utc), 'commenter': 'anjulalk', 'type': 'User'}, {'comment_id': 450456718, 'comment_body': ""It's not mutating any data. Initial value of `customKeymap` is just `[]`.\r\n\r\n"", 'comment_created': datetime.datetime(2020, 7, 6, 20, 16, 34, tzinfo=datetime.timezone.utc), 'commenter': 'anjulalk', 'type': 'User'}, {'comment_id': 450457965, 'comment_body': ""Thanks for pointing that out. I'll add a throw here."", 'comment_created': datetime.datetime(2020, 7, 6, 20, 19, 23, tzinfo=datetime.timezone.utc), 'commenter': 'anjulalk', 'type': 'User'}, {'comment_id': 450458103, 'comment_body': ""Okay, I'll move this into a function."", 'comment_created': datetime.datetime(2020, 7, 6, 20, 19, 41, tzinfo=datetime.timezone.utc), 'commenter': 'anjulalk', 'type': 'User'}, {'comment_id': 450461488, 'comment_body': ""This function is not really useful at the moment. It's for finding the changed shortcuts so that it can be saved to `keymap-desktop.json` file.\r\n\r\nFor example,\r\n1. User changes/resets shortcuts for some commands with the GUI editor, and then\r\n2. The service runs this function, convert the `customKeymap` object to JSON and save it. "", 'comment_created': datetime.datetime(2020, 7, 6, 20, 26, 57, tzinfo=datetime.timezone.utc), 'commenter': 'anjulalk', 'type': 'User'}, {'comment_id': 453851452, 'comment_body': ""If it's not really used at the moment, would it be possible to remove it? I don't quite understand its purpose and I feel checking for changes, reset, etc. would be a task for the front-end, but maybe I'm missing something, or perhaps the function should be named differently."", 'comment_created': datetime.datetime(2020, 7, 13, 18, 35, 44, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 453854195, 'comment_body': ""That's a lot of duplicated code. I think the KeymapService should be passed as a dependency to the CommandService, then in `CommandService::commandToMenuItem` you can set the accelerator there directly. That way instead of `cmdService.commandToMenuItem('focusElementSideBar', keymapService.getAccelerator('focusElementSideBar')),` you'd have just `cmdService.commandToMenuItem('focusElementSideBar)`.\r\n\r\nIt's the purpose of this commandToMenuItem function - to reduce boiler plate code when creating a menu item, and that should include setting up the accelerator."", 'comment_created': datetime.datetime(2020, 7, 13, 18, 40, 30, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 453855099, 'comment_body': '`isAccelerator` is perhaps a bit vague - for example it could be to check if the provided accelerator is currently defined or not. Since the function is for validation, perhaps `validateAccelerator` would be better?', 'comment_created': datetime.datetime(2020, 7, 13, 18, 42, 11, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 456829844, 'comment_body': 'I\'ve added it to commandToMenuItem. Please have a look.\r\n\r\nSince not all menu items have keyboard shortcuts, I\'ve added an extra check to verify that the `commandName` is in the current keymap so that it\'ll not call `getAccelerator()` if that command has no shortcut, preventing an unnecessary try catch block. There\'s no ""error"" to catch in such scenario because it\'s not really an error.  But I\'ll remove that if it\'s unnecessary.', 'comment_created': datetime.datetime(2020, 7, 18, 21, 30, 51, tzinfo=datetime.timezone.utc), 'commenter': 'anjulalk', 'type': 'User'}, {'comment_id': 457387910, 'comment_body': 'That should be passed as a dependency to initialize() (like the store now). This makes it easier to control the initialization order, or indeed to find bugs in the program when we realize that for example the keymap service is initialized after the command service. Dependency injection also makes it easier to test.', 'comment_created': datetime.datetime(2020, 7, 20, 13, 34, 20, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 457388215, 'comment_body': 'Please remove this file', 'comment_created': datetime.datetime(2020, 7, 20, 13, 34, 41, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 457388740, 'comment_body': ""If package.json hasn't change, this file should not be included so please remove it."", 'comment_created': datetime.datetime(2020, 7, 20, 13, 35, 13, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 459995468, 'comment_body': 'Sorry about that. I removed the file.', 'comment_created': datetime.datetime(2020, 7, 24, 11, 24, 36, tzinfo=datetime.timezone.utc), 'commenter': 'anjulalk', 'type': 'User'}, {'comment_id': 459997371, 'comment_body': ""I believe this is from a merge commit which had a new dependency for `aws-sdk` package. But I rebased on the latest commit on master so that I wouldn't need to commit this file, just to be sure.."", 'comment_created': datetime.datetime(2020, 7, 24, 11, 29, 30, tzinfo=datetime.timezone.utc), 'commenter': 'anjulalk', 'type': 'User'}, {'comment_id': 460000552, 'comment_body': 'I see. I added an extra parameter for the KeymapService instance to the initialize() function. The instance is now created in the `app.js` file and passed to CommandService.', 'comment_created': datetime.datetime(2020, 7, 24, 11, 37, 31, tzinfo=datetime.timezone.utc), 'commenter': 'anjulalk', 'type': 'User'}, {'comment_id': 460185133, 'comment_body': ""Tests should not be platform-specific, because if you make changes to one platform code, the tests might pass even though something is broken in another platform. It's best to pass the platform name to the KeymapService constructor for example. You can default the value to shim.platformName() if you want, but it should be possible to set it to something else.\r\n\r\nThis comment applies to all the uses of shim.isMac in the tests."", 'comment_created': datetime.datetime(2020, 7, 24, 17, 17, 9, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 460352421, 'comment_body': ""Thanks for pointing that out. I faced this exact situation situation after splitting the keymap into macOS and other platforms. What I did was either use the CI to see if tests had been passed, or boot up macOS in a VM and perform tests manually.\r\n\r\nProviding a method to change the platform will enable it to test for both platforms at once. I'll come up with a solution to this."", 'comment_created': datetime.datetime(2020, 7, 25, 2, 19, 27, tzinfo=datetime.timezone.utc), 'commenter': 'anjulalk', 'type': 'User'}, {'comment_id': 460398506, 'comment_body': ""Yes when we build the apps on CI (Travis and Appveyor) we could technically run platform-specific tests, however it's nice too to be able to run them all locally, and for that the easiest way (at least in this case) is to provide the platform to the service.\r\n\r\nBy the way, rather than changing the keymap based on a boolean (isMac) please make it change based on a string (platformName). So for now, your code would be very similar, just checking for platformName = 'darwin', but later we also have the option to add support for other platform-specific shortcuts."", 'comment_created': datetime.datetime(2020, 7, 25, 12, 4, 55, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 463982236, 'comment_body': 'Since KeymapService is a TypeScript file, you should import it with `import KeymapService from ""lib/services/KeymapService""` so as to benefit from type-checking.', 'comment_created': datetime.datetime(2020, 8, 1, 17, 23, 40, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 463982306, 'comment_body': 'Once you\'ve updated the import statement, the ""typeof KeymapService"" should no longer be needed, and you can just do `keymapService:KeymapService`', 'comment_created': datetime.datetime(2020, 8, 1, 17, 24, 27, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 463982502, 'comment_body': 'Why throw an exception here? It should be either ""darwin"" or ""default"". There\'s no need to list all the supported platforms. That way if it\'s a platform we don\'t know about it will work instead of crashing for no particular reason.', 'comment_created': datetime.datetime(2020, 8, 1, 17, 26, 22, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 464019111, 'comment_body': ""Thanks for pointing that out. I'll update it right away."", 'comment_created': datetime.datetime(2020, 8, 2, 1, 44, 38, tzinfo=datetime.timezone.utc), 'commenter': 'anjulalk', 'type': 'User'}]","[{'commit_sha': 'f18fb95aab2b244b047f281758e8e617d42454ee', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '461b4e1f9b54ece9f89dd550897260461367341c', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '45997b84870930a282e6fb988bf7d62f382f5882', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'aadd77aa4df1734bf40c8be66c538fe6c4a3a9c8', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b7ab5308c0a62181f7a8f4b4889e780197193dce', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '301cf6650dd619ebba9e82d6f57825bcf716a34e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '46417556f221d20db76b53780046b1ff7e81ccbd', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '549a38160d01f7db741518d71d3f4345adbc01b6', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'e19ad56a10b6357aef7fa80b461d25325facbafa', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'd55cc1c6324fffbbb262c6720db9d914b250f600', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '9736c36fdaee3e243832c8f0f94ff398a669d3e2', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'fd00a47987435f0b053b8b52c41b482060eedbfe', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '2b584c9d36667fb2ec4d7897b1684fa9106cab4b', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '0503576b67b59b82e485f62d8293d78d38a8b46b', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'd84cbcbe6f2e9e752f3d774dd256330409726048', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Anjula Karunarathne,26695184,,User,,9,,41,64
452081461,Desktop: Keyboard shortcut editor,"Contains the implementation of Keyboard shortcut editor GUI. This PR includes,
* Integration with KeymapService and CommandService
* Display a list of available commands along with their keyboard shortcuts
* Allow editing a keyboard shortcut, or reset it to the default shortcut
* Synchronize changes with the `keymap-desktop.json` file in the profile directory
* Search for keyboard shortcuts by their command name or label",True,3525,https://api.github.com/repos/laurent22/joplin/pulls/3525,https://github.com/laurent22/joplin/pull/3525,closed,760,107,16,53,13,72,1,0,[{'name': 'desktop'}],2020-07-18 18:53:26+00:00,2020-09-06 12:00:25+00:00,4295219.0,"49 days, 17:06:59","[{'comment_id': 457585564, 'comment_body': 'That should be loaded inside the component, using useEffect for example. In general, only constants or functions can be defined outside the component. Any state-related variables should be defined inside the component (or as hooks).', 'comment_created': datetime.datetime(2020, 7, 20, 17, 47, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 457585950, 'comment_body': 'Please define an `interface Props` to list the supported properties. `theme` is a number by the way.', 'comment_created': datetime.datetime(2020, 7, 20, 17, 47, 42, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 457586235, 'comment_body': 'Styles should be defined using `buildStyle()` (see other components for examples)', 'comment_created': datetime.datetime(2020, 7, 20, 17, 48, 13, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 457586477, 'comment_body': ""For consistency with the rest of the code base, please don't use underscore-variables. By convention, copies of state should be named `newKeymap`"", 'comment_created': datetime.datetime(2020, 7, 20, 17, 48, 41, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 457587157, 'comment_body': ""You should probably use `useCallback` for this and updateAccelerator otherwise you'll have issues with stale state."", 'comment_created': datetime.datetime(2020, 7, 20, 17, 49, 50, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 457587817, 'comment_body': 'Please put one component per file. Also please put everything under gui/KeymapConfig/', 'comment_created': datetime.datetime(2020, 7, 20, 17, 51, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 457588380, 'comment_body': ""Please don't use `any` when the property has a specific type, in this case `number`. Also likewise all props should be defined in an interface."", 'comment_created': datetime.datetime(2020, 7, 20, 17, 51, 56, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 457588833, 'comment_body': 'Please define callback handlers in separate functions.', 'comment_created': datetime.datetime(2020, 7, 20, 17, 52, 41, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 457589387, 'comment_body': 'Please name the event `event`, like in the rest of the codebase.', 'comment_created': datetime.datetime(2020, 7, 20, 17, 53, 38, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 457589840, 'comment_body': '`domToElectronAccelerator`. Only classes or components should start with an uppercase.', 'comment_created': datetime.datetime(2020, 7, 20, 17, 54, 24, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 457589993, 'comment_body': 'domToElectronKey', 'comment_created': datetime.datetime(2020, 7, 20, 17, 54, 40, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 457591067, 'comment_body': ""I think I've seen this code in KeyMapService. It should only be in one place. In fact I'm not entirely sure you should have a utils class when you already have KeyMapService. It's going to cause duplicate functionalities and code."", 'comment_created': datetime.datetime(2020, 7, 20, 17, 56, 30, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 457591836, 'comment_body': ""Could you make it throw an error here instead of returning null? Normally all commands must be declared early and it's not declared, it means there's a bug somewhere which should be fixed."", 'comment_created': datetime.datetime(2020, 7, 20, 17, 57, 50, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 460021633, 'comment_body': ""It's a bit different. But I refactored the function so that it can use the same RegEx you've mentioned. \r\n\r\n> In fact I'm not entirely sure you should have a utils class when you already have KeyMapService.\r\n\r\nI see. I'll be adding these two functions to KeymapService as static functions once that PR gets merged."", 'comment_created': datetime.datetime(2020, 7, 24, 12, 28, 39, tzinfo=datetime.timezone.utc), 'commenter': 'anjulalk', 'type': 'User'}, {'comment_id': 460396847, 'comment_body': ""I've added a throw to the function."", 'comment_created': datetime.datetime(2020, 7, 25, 11, 44, 12, tzinfo=datetime.timezone.utc), 'commenter': 'anjulalk', 'type': 'User'}, {'comment_id': 460397041, 'comment_body': ""I've made a folder and put the components in different files. However I included `TopActions` right into `KeymapConfigScreen` because it didn't seem necessary to have it's own component. The shortcut recorder however is defined in it's own file. I've also separated the styles from the component."", 'comment_created': datetime.datetime(2020, 7, 25, 11, 46, 19, tzinfo=datetime.timezone.utc), 'commenter': 'anjulalk', 'type': 'User'}, {'comment_id': 460397328, 'comment_body': ""Indeed I was putting it at the risk of having a stale state. As a solution, I passed a function to useState(), which changes state by comparing it to previous state. But I don't understand why useCallback() is neccessary to prevent stale state? I'll be glad if you could point me if there's an issue."", 'comment_created': datetime.datetime(2020, 7, 25, 11, 50, 3, tzinfo=datetime.timezone.utc), 'commenter': 'anjulalk', 'type': 'User'}, {'comment_id': 460397515, 'comment_body': ""As I understand, the optimization from useCallback() isn't significant in this case (as there's not many elements here) and will turn out to be an overhead?"", 'comment_created': datetime.datetime(2020, 7, 25, 11, 52, 17, tzinfo=datetime.timezone.utc), 'commenter': 'anjulalk', 'type': 'User'}, {'comment_id': 460397637, 'comment_body': ""Sorry about that. I'll try to watch out for naming convention mismatches from now on."", 'comment_created': datetime.datetime(2020, 7, 25, 11, 54, 19, tzinfo=datetime.timezone.utc), 'commenter': 'anjulalk', 'type': 'User'}, {'comment_id': 460397781, 'comment_body': ""I've passed a state initialization function to useState(). It'll only be initialized once per lifetime."", 'comment_created': datetime.datetime(2020, 7, 25, 11, 55, 42, tzinfo=datetime.timezone.utc), 'commenter': 'anjulalk', 'type': 'User'}, {'comment_id': 460397847, 'comment_body': ""> theme is a number by the way.\r\n\r\nThanks for pointing that out. I've corrected it and created separate interfaces for each component."", 'comment_created': datetime.datetime(2020, 7, 25, 11, 56, 38, tzinfo=datetime.timezone.utc), 'commenter': 'anjulalk', 'type': 'User'}, {'comment_id': 464456163, 'comment_body': 'Please always use `import` when importing a TypeScript file into another TypeScript file to benefit from type checking.', 'comment_created': datetime.datetime(2020, 8, 3, 14, 38, 9, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 464457248, 'comment_body': ""I assume this will come from KeymapService later on? (i.e. there shouldn't be a static list of commands in this component)."", 'comment_created': datetime.datetime(2020, 8, 3, 14, 39, 48, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 464460270, 'comment_body': 'A child component should not directly set data on the parent. Instead please use event handlers: `onSubmit`, `onCancel`. All React components should be controlled ones: https://reactjs.org/docs/forms.html#controlled-components', 'comment_created': datetime.datetime(2020, 8, 3, 14, 44, 35, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 464462011, 'comment_body': '""Search...""', 'comment_created': datetime.datetime(2020, 8, 3, 14, 47, 19, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 464463604, 'comment_body': 'It\'s a minor thing but please don\'t name the style elements as ""somethingStyle"" since we know it\'s a style. So ""containerStyle"" => ""container"", ""topActionsStyle"" => ""topActions"", etc.', 'comment_created': datetime.datetime(2020, 8, 3, 14, 49, 51, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 464464108, 'comment_body': 'As this is shared with mobile, please check that mobile still works.', 'comment_created': datetime.datetime(2020, 8, 3, 14, 50, 36, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 470895552, 'comment_body': ""I've checked it and it works without any issue.."", 'comment_created': datetime.datetime(2020, 8, 14, 22, 48, 34, tzinfo=datetime.timezone.utc), 'commenter': 'anjulalk', 'type': 'User'}, {'comment_id': 471039230, 'comment_body': ""No conditional within _() as translation won't work"", 'comment_created': datetime.datetime(2020, 8, 15, 22, 19, 20, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 471039435, 'comment_body': 'Do the labels get updated when the user changes the language ? ', 'comment_created': datetime.datetime(2020, 8, 15, 22, 21, 52, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 471039762, 'comment_body': 'Yes keymapService should make use of the `events` package and dispatch events when the keymap is saved. The component should not dispatch any event', 'comment_created': datetime.datetime(2020, 8, 15, 22, 26, 45, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 471040072, 'comment_body': 'Please wrap in a div', 'comment_created': datetime.datetime(2020, 8, 15, 22, 31, 50, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 471040120, 'comment_body': 'No need to pass the errorMessage param since it’s part of the component state', 'comment_created': datetime.datetime(2020, 8, 15, 22, 32, 37, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 471040355, 'comment_body': 'Please add a Search label for accessibility purposes.', 'comment_created': datetime.datetime(2020, 8, 15, 22, 35, 50, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 471040448, 'comment_body': 'Please don’t use extend, just list all the props', 'comment_created': datetime.datetime(2020, 8, 15, 22, 37, 17, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 471040540, 'comment_body': 'default lowercase', 'comment_created': datetime.datetime(2020, 8, 15, 22, 38, 56, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 471040625, 'comment_body': 'Use shim.fsDriver for file operations', 'comment_created': datetime.datetime(2020, 8, 15, 22, 40, 13, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 471040696, 'comment_body': 'Use eventEmitter', 'comment_created': datetime.datetime(2020, 8, 15, 22, 41, 13, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 471040741, 'comment_body': 'getCommandNames', 'comment_created': datetime.datetime(2020, 8, 15, 22, 41, 49, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 471041160, 'comment_body': 'The child component logic should be decoupled from that of the parent. ShortcutRecorder should only take three event handlers: onSave, onCancel, onReset then on the parent component you handle the business logic to set keymap.\r\n\r\nIn fact I don’t see anything in this component to cancel input but that should be present', 'comment_created': datetime.datetime(2020, 8, 15, 22, 48, 23, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 471041243, 'comment_body': 'Please name it themeId for compatibility with the coming ui update ', 'comment_created': datetime.datetime(2020, 8, 15, 22, 49, 34, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 471041480, 'comment_body': '<s>Regarding these three functions above, could you refactor using useReducer? I believe that’s really how it should be done in this case because a setter that calls a setter will be hard to maintain long term.', 'comment_created': datetime.datetime(2020, 8, 15, 22, 53, 8, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 471042718, 'comment_body': 'Actually ignore this as once you’ll have refactored ShortcutRecorder you won’t need this layer of indirection, with setters calling setters, anymore.', 'comment_created': datetime.datetime(2020, 8, 15, 23, 11, 14, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 474366565, 'comment_body': ""I wrapped this logic in a function. Now it's working even after changing the language."", 'comment_created': datetime.datetime(2020, 8, 21, 2, 2, 51, tzinfo=datetime.timezone.utc), 'commenter': 'anjulalk', 'type': 'User'}, {'comment_id': 474366804, 'comment_body': ""I've updated the logic to use handlers instead. Thanks for pointing that out."", 'comment_created': datetime.datetime(2020, 8, 21, 2, 3, 48, tzinfo=datetime.timezone.utc), 'commenter': 'anjulalk', 'type': 'User'}, {'comment_id': 474653927, 'comment_body': 'Please remove this layer of indirection, you can call onSave, etc. directly where you need it.', 'comment_created': datetime.datetime(2020, 8, 21, 12, 3, 50, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 474654311, 'comment_body': ""Please pass an event object to the event handler. As a general rule, we should always pass an event handler rather than individual parameter as it's easier to maintain. So call onSave({ commandName, accelerator: newAccelerator });"", 'comment_created': datetime.datetime(2020, 8, 21, 12, 4, 47, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 474654412, 'comment_body': 'Call onCancel({ commandName });', 'comment_created': datetime.datetime(2020, 8, 21, 12, 5, 1, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 474654789, 'comment_body': 'onReset({ commandName });', 'comment_created': datetime.datetime(2020, 8, 21, 12, 5, 49, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 474656853, 'comment_body': 'Please don\'t use try/catch for this. For example if you try to get the label for ""quit"" and there\'s an unrelated error, due to some mistake in the label() call. With your code, you would return a valid value and silence the error in a way that makes it very hard to debug.\r\n\r\nFirst check if the command exists and if it does get the label from there, otherwise do your case statement.', 'comment_created': datetime.datetime(2020, 8, 21, 12, 10, 21, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 474658502, 'comment_body': '\tconst [error, setError] = useState(null);\r\n\r\nBasically send back the complete error and calling code should handle it.', 'comment_created': datetime.datetime(2020, 8, 21, 12, 14, 11, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 474660347, 'comment_body': ""No need to pass keymapService as a dependency, it's global."", 'comment_created': datetime.datetime(2020, 8, 21, 12, 18, 14, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 474661041, 'comment_body': ""Please remember not to silence error. Even if the error object doesn't have a message property, it doesn't mean there's no error."", 'comment_created': datetime.datetime(2020, 8, 21, 12, 19, 44, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 475117958, 'comment_body': ""Okay, it makes sense. I'll modify the code to pass data as an object to handlers."", 'comment_created': datetime.datetime(2020, 8, 22, 18, 32, 31, tzinfo=datetime.timezone.utc), 'commenter': 'anjulalk', 'type': 'User'}, {'comment_id': 475118003, 'comment_body': ""I'll remove it and call the handlers directly."", 'comment_created': datetime.datetime(2020, 8, 22, 18, 32, 53, tzinfo=datetime.timezone.utc), 'commenter': 'anjulalk', 'type': 'User'}, {'comment_id': 475118963, 'comment_body': ""I haven't accounted for that kind of an issue. Thanks for pointing that out. ~~I'm adding an `exists()` method to CommandService. Please let me know if there's an issue with that.~~\r\n\r\nIn `CommandService.commandByName()` method,\r\n```\r\n\tprivate commandByName(name:string, options:CommandByNameOptions = null):Command {\r\n\t\toptions = {\r\n\t\t\tmustExist: true,\r\n\t\t\truntimeMustBeRegistered: false,\r\n\t\t};\r\n\r\n\t        ...\r\n```\r\n\r\n`options` parameter is reassigned to default values, even if they are passed to the method. Was this intentional by any chance? \r\n\r\n"", 'comment_created': datetime.datetime(2020, 8, 22, 18, 45, tzinfo=datetime.timezone.utc), 'commenter': 'anjulalk', 'type': 'User'}, {'comment_id': 475122399, 'comment_body': ""That approach seems better. I'll proceed with it."", 'comment_created': datetime.datetime(2020, 8, 22, 19, 23, 50, tzinfo=datetime.timezone.utc), 'commenter': 'anjulalk', 'type': 'User'}, {'comment_id': 475149499, 'comment_body': ""I've enabled overriding these default values of `options` object for now, and I was able make my `exists()` method work."", 'comment_created': datetime.datetime(2020, 8, 22, 23, 40, 32, tzinfo=datetime.timezone.utc), 'commenter': 'anjulalk', 'type': 'User'}, {'comment_id': 475263767, 'comment_body': 'This will render differently and sometimes strangely depending on the operating system so please use an icon (Font Awesome is always loaded).', 'comment_created': datetime.datetime(2020, 8, 23, 20, 35, 42, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 475263874, 'comment_body': 'These error messages should be part of the error object (in `error.message`), then here you can print error.message directly.', 'comment_created': datetime.datetime(2020, 8, 23, 20, 36, 52, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 475264856, 'comment_body': ""Could you extend JoplinError and simply set the code to some string? I think the details object with potentially multiple error causes seem unnecessarily complex. The keymap shortcut should be validated when the user inputs it anyway so we shouldn't have so much complexity going on. Check what they type, throw back an error with a message and that's almost all we need."", 'comment_created': datetime.datetime(2020, 8, 23, 20, 41, 55, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 475322324, 'comment_body': ""I see. In that case I'll add some error handling to the ShortcutRecorder component. I'll update it."", 'comment_created': datetime.datetime(2020, 8, 24, 3, 27, 6, tzinfo=datetime.timezone.utc), 'commenter': 'anjulalk', 'type': 'User'}, {'comment_id': 475323425, 'comment_body': 'Is it okay to keep just an array of invalid Keymap items, so that we can show the little status icon next to the shortcut? ', 'comment_created': datetime.datetime(2020, 8, 24, 3, 32, 6, tzinfo=datetime.timezone.utc), 'commenter': 'anjulalk', 'type': 'User'}, {'comment_id': 475654518, 'comment_body': ""What could cause the keymap to have multiple invalid items? If an item is invalid it shouldn't be possible to save it anyway, so there could only be one invalid item (the currently active, but unsaved, one), or am I missing something?"", 'comment_created': datetime.datetime(2020, 8, 24, 14, 29, 49, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 476566204, 'comment_body': ""No, you're right. We should prevent the user from causing the error by validating the shortcut before the user sets it. \r\nI'm working on it at the moment. I'll push an update in the next 24 hours."", 'comment_created': datetime.datetime(2020, 8, 25, 16, 8, 3, tzinfo=datetime.timezone.utc), 'commenter': 'anjulalk', 'type': 'User'}, {'comment_id': 479627453, 'comment_body': ""Looks like the Search label hasn't been added yet?"", 'comment_created': datetime.datetime(2020, 8, 29, 8, 51, 7, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 479627889, 'comment_body': 'Please remove the altMessage property - error should only have one message. In fact, as far as I can see there\'s no actual use for the KeymapError object anymore so please remove KeymapError and use a regular Error object.\r\n\r\nTo throw the error, please use this:\r\n\r\n```js\r\nnew Error(_(\'Accelerator ""%s"" is already used for command ""%s"".\', item.accelerator, originalItem.command));\r\n```', 'comment_created': datetime.datetime(2020, 8, 29, 8, 56, 21, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 479794217, 'comment_body': ""Thanks for mentioning the example. I agree that it's unneccessary. My initial idea was give a friendly error message in the GUI. \r\nI'll replace them with one message. "", 'comment_created': datetime.datetime(2020, 8, 30, 17, 19, 45, tzinfo=datetime.timezone.utc), 'commenter': 'anjulalk', 'type': 'User'}, {'comment_id': 479804968, 'comment_body': 'Please call `await keymapService.saveCustomKeymap(filePath);` directly from here. You\'re importing KeymapService into this component anyway so the additional layer of indirection is unnecessary. Also it\'s best to keep React hooks small. So if you really wanted to use a hook here, it would be best to create a new one like ""useImportExport"" and put the import/export feature there, but it won\'t be necessary to do it now.', 'comment_created': datetime.datetime(2020, 8, 30, 19, 10, 3, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 479805135, 'comment_body': ""As an error here is unlikely, let's not create a new translatable string for it. So just `bridge().showErrorMessageBox(err.message);` for now would work."", 'comment_created': datetime.datetime(2020, 8, 30, 19, 12, 5, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 479816041, 'comment_body': ""Sure, I'll remove it right away."", 'comment_created': datetime.datetime(2020, 8, 30, 21, 10, 39, tzinfo=datetime.timezone.utc), 'commenter': 'anjulalk', 'type': 'User'}, {'comment_id': 479816201, 'comment_body': ""I agree, it's unneccessary. I'll remove it and call the method directly."", 'comment_created': datetime.datetime(2020, 8, 30, 21, 12, 15, tzinfo=datetime.timezone.utc), 'commenter': 'anjulalk', 'type': 'User'}]","[{'commit_sha': 'f09a896187e04dcdb7c86c2a273e01e2fca8a389', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '476315719fe1dd6757ba1224ef84efbca97d8b83', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '2b8bf90d67f3d81370af35aedd50745623bc9c3c', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '5ba4c907037f47636075ca3b4ea42fd9eaa569de', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '66c53752fb6a5cd3d2e0e0642158774d361137b1', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '5a46b5d9c76ce70cb197bcf4bdbf2ab679afc652', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'cd5d5741f9332f4cca933b6fd2b375344bfc786c', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '0f91db7320a2e430e6fad84aba1a578af179f142', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '8440a9c919147fad4ddc658c57fde62ca49e004b', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '3465af9aa8edc527b4a720336aea049d01072e21', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'fa08c285c08145e0be70aa506d8b49024cfe12e2', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '57a68b9f2de376adad5b2e581647fe58551cc923', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'de493e6b5a37d26bf613cda4c0ef9bfc5ddaed57', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '51bc13f8e26e9b22f0925418feab57fda1e14774', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '52dbc6e5d1e61ac61970a51c9027b688384da993', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '0b309d96bcdc209a5308653282a10119efa07a50', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '8ca3aa04faaae245e903b7422b7c5f237cb99e00', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '42c7122126af96e60b13b6169e03f01ecb268cbb', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '1e636363d205aead6ed00c174ba8131186736b95', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '264dd21257ce55c31770539a62078621d8c72b5b', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '5294b687c9f68ae93ba5f846664ec27a549a76b3', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'c36f80514dfd31adcbc89fa10ea289f3420d40d8', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '88122abadabfa9f98ab571d6abd0a53ac2af709f', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'd98878d262d24fb0faccd539800c2d3c5f2f9663', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '9758161f465c55634d071fdf2919b502a4bab479', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '1b6ac9fe650508fe7d7eacaedd0d5b64ff8b8ff7', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a12f4a1b303a1f2fdf633b7b99bbed7b8a44899a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '3005f587b5aedb1aeca97aa938565af19324c3cf', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '8a70a9718c0193b360f9dd40a24e014a54693b19', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'cda1a8f2112a1c31a1121fa32d20c136e2da3533', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'd2aa3f99dae57c3ff91d49eaca4016dde4586098', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'c86d97d413452fc3cc664068aac793007a45fac8', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '4e3b67568efcb83cbfe3599c803981e9569b6850', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '670075f37c0ce75879ca28a6d2365f2f754856ac', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '06723da291ca70085089f532644c748d533084a7', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '374ddc3d60ef7d2c72795f4637b0e4b838108521', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '3252dde718c24873c8416289b8f65a3e4a5e4029', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'd2b346d7cae817709bf2770dac5b22e25fc2bf2f', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '206bd487692d949ac3c02bf1742247f08851b805', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '3568c70d1fc9ee517ba10c1f59ed8926fba367f8', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '43b2bc1496dc1939c71075c0408b52b7f626de88', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'e274acda7a9502fdee887ba57a05563ad373b94e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'bc367485588af2b460bc7ee4a5674be12ef7c4e4', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '989b3d2b198ba0188aef83e92d062fdfd7f27c37', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '6ab5ccc39e6f8347f502deb9c73b30defc8ceff4', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '471210f27811dc564572b9f37f6e3ea604a82cd3', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'd5732ff4788e8780ce0affce86df33eae3c0bd10', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '8ca20ad085c45005ff49100ee4bb39eb08538763', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'e6643b9710fd636b46ca3b9963f9b42ebd3dccb6', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a6d793bd39ed346baef8cd6ea8ea8e4b23cc0c37', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '80b831dcc9410165676c40576b9584ef22d46148', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '88f530054bd65d55c6f04c2614c1ccdfb8f4aa12', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '0bd89c9c25bb1ff9fa24c67483da6e1cea0fe6db', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Anjula Karunarathne,26695184,,User,,9,,41,64

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
79162682,joplin,laurent22/joplin,TypeScript,4859,44770,483,642,11761,419,244,19,"[{'id': 452081461, 'number': 3525, 'closed': datetime.datetime(2020, 9, 6, 12, 0, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 18, 18, 53, 26, tzinfo=datetime.timezone.utc), 'time_taken': 4295219.0, 'time_delta': '49 days, 17:06:59', 'additions': 760, 'deletions': 107, 'state': 'closed'}, {'id': 439261742, 'number': 3414, 'closed': datetime.datetime(2020, 6, 24, 22, 54, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 24, 14, 52, 36, tzinfo=datetime.timezone.utc), 'time_taken': 28901.0, 'time_delta': '8:01:41', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 423043516, 'number': 3277, 'closed': datetime.datetime(2020, 5, 27, 15, 54, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 26, 7, 53, 53, tzinfo=datetime.timezone.utc), 'time_taken': 115241.0, 'time_delta': '1 day, 8:00:41', 'additions': 3, 'deletions': 3, 'state': 'closed'}, {'id': 422113186, 'number': 3252, 'closed': datetime.datetime(2020, 8, 2, 11, 26, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 22, 19, 43, 10, tzinfo=datetime.timezone.utc), 'time_taken': 6191026.0, 'time_delta': '71 days, 15:43:46', 'additions': 622, 'deletions': 40, 'state': 'closed'}, {'id': 402737509, 'number': 3049, 'closed': datetime.datetime(2020, 4, 14, 2, 52, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 13, 17, 2, 58, tzinfo=datetime.timezone.utc), 'time_taken': 35360.0, 'time_delta': '9:49:20', 'additions': 3, 'deletions': 2, 'state': 'closed'}, {'id': 402300746, 'number': 3029, 'closed': datetime.datetime(2020, 4, 12, 8, 59, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 12, 7, 35, 10, tzinfo=datetime.timezone.utc), 'time_taken': 5031.0, 'time_delta': '1:23:51', 'additions': 8, 'deletions': 6, 'state': 'closed'}, {'id': 385792576, 'number': 2708, 'closed': datetime.datetime(2020, 3, 15, 9, 49, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 9, 20, 7, 36, tzinfo=datetime.timezone.utc), 'time_taken': 481309.0, 'time_delta': '5 days, 13:41:49', 'additions': 2, 'deletions': 1, 'state': 'closed'}, {'id': 385247457, 'number': 2686, 'closed': datetime.datetime(2020, 3, 28, 13, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 8, 9, 52, 11, tzinfo=datetime.timezone.utc), 'time_taken': 1739569.0, 'time_delta': '20 days, 3:12:49', 'additions': 150, 'deletions': 11, 'state': 'closed'}, {'id': 381847841, 'number': 2619, 'closed': datetime.datetime(2020, 3, 1, 11, 12, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 29, 13, 6, 7, tzinfo=datetime.timezone.utc), 'time_taken': 79576.0, 'time_delta': '22:06:16', 'additions': 17, 'deletions': 8, 'state': 'closed'}, {'id': 378114179, 'number': 2542, 'closed': datetime.datetime(2020, 2, 21, 5, 53, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 21, 5, 44, 4, tzinfo=datetime.timezone.utc), 'time_taken': 545.0, 'time_delta': '0:09:05', 'additions': 6, 'deletions': 6, 'state': 'closed'}, {'id': 372809598, 'number': 2480, 'closed': datetime.datetime(2020, 2, 11, 9, 49, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 9, 9, 39, 22, tzinfo=datetime.timezone.utc), 'time_taken': 173427.0, 'time_delta': '2 days, 0:10:27', 'additions': 1, 'deletions': 1, 'state': 'closed'}]"
