pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
447508848,[JENKINS-54072] Publish warnings in GitHub pull requests using Checks API,"- [x] Publish issues and statistics: https://github.com/XiongKezhi/codingstyle/pull/1/checks?check_run_id=858533400
- [x] Add tests
- [x] Parse HTML warning description
- [x] beautify the output
- [ ] ...",True,550,https://api.github.com/repos/jenkinsci/warnings-ng-plugin/pulls/550,https://github.com/jenkinsci/warnings-ng-plugin/pull/550,closed,692,34,18,21,22,76,1,0,[{'name': 'feature'}],2020-07-10 15:38:11+00:00,2020-07-28 23:11:36+00:00,1582405.0,"18 days, 7:33:25","[{'comment_id': 452925275, 'comment_body': 'the case should be consistent for each section\r\n```suggestion\r\n                        + ""- ### %d outstanding Issues\\n""\r\n```', 'comment_created': datetime.datetime(2020, 7, 10, 15, 46, 27, tzinfo=datetime.timezone.utc), 'commenter': 'timja', 'type': 'User'}, {'comment_id': 452925733, 'comment_body': 'I think presentation layer code should be extracted to a different class', 'comment_created': datetime.datetime(2020, 7, 10, 15, 47, 16, tzinfo=datetime.timezone.utc), 'commenter': 'timja', 'type': 'User'}, {'comment_id': 452926746, 'comment_body': 'hmm I see check annotations showing up on unchanged files do we want that?\r\n\r\nhttps://github.com/XiongKezhi/codingstyle/pull/1/files', 'comment_created': datetime.datetime(2020, 7, 10, 15, 49, 9, tzinfo=datetime.timezone.utc), 'commenter': 'timja', 'type': 'User'}, {'comment_id': 452928540, 'comment_body': ""I don't think Neutral is the same as Warning\r\n\r\npossibly:\r\n```suggestion\r\n                return ChecksConclusion.FAILURE;\r\n```"", 'comment_created': datetime.datetime(2020, 7, 10, 15, 52, 12, tzinfo=datetime.timezone.utc), 'commenter': 'timja', 'type': 'User'}, {'comment_id': 452931543, 'comment_body': ""I looked into how safe this is,\r\nIt seems like it in the current state it will only work if all builds are using a github app.\r\n\r\nIf the API and implementation was separated out to different plugins (which I think it needs to be so that warnings-ng doesn't have to depend on github-branch-source) then it would fall back to a NullChecksPublisher and it would be far safer. In that case it would only fail for users with the github-checks plugin installed when they don't have a github app configured.\r\n\r\nThoughts?"", 'comment_created': datetime.datetime(2020, 7, 10, 15, 57, 38, tzinfo=datetime.timezone.utc), 'commenter': 'timja', 'type': 'User'}, {'comment_id': 452932948, 'comment_body': ""I'm not sure how we can recognize the changed files of a PR, maybe just report new or delta issues?"", 'comment_created': datetime.datetime(2020, 7, 10, 16, 0, 12, tzinfo=datetime.timezone.utc), 'commenter': 'XiongKezhi', 'type': 'User'}, {'comment_id': 452939034, 'comment_body': 'probably a separate change, should be doable though', 'comment_created': datetime.datetime(2020, 7, 10, 16, 11, 38, tzinfo=datetime.timezone.utc), 'commenter': 'timja', 'type': 'User'}, {'comment_id': 452958872, 'comment_body': ""Not all builds, but builds from a github-branch-source project, for other project builds, they will still get `NullChecksPublisher` which is safe to use.\r\n\r\nBut for the stable use of warnings-plugin (since it is going to be used for ci.jenkin.io), maybe it's better to split the plugin before releasing this feature for warnings-ng? @uhafner"", 'comment_created': datetime.datetime(2020, 7, 10, 16, 50, 54, tzinfo=datetime.timezone.utc), 'commenter': 'XiongKezhi', 'type': 'User'}, {'comment_id': 453095679, 'comment_body': '```suggestion\r\n                .withName(labelProvider.getName())\r\n```', 'comment_created': datetime.datetime(2020, 7, 10, 21, 59, 32, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 453096488, 'comment_body': '```suggestion\r\n                        .withTitle(labelProvider.getLinkName())\r\n```', 'comment_created': datetime.datetime(2020, 7, 10, 22, 1, 18, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 453099281, 'comment_body': 'I think it can happen that files will get a new (or old warning) that is in a file that is not part of the PR. Simple use case: add a new checkstyle rule to the configuration. Maybe it makes sense to add it as a configurable option later? \r\n\r\nI think in the beginning we should start with new warnings only:\r\n\r\n```suggestion\r\n                        .withAnnotations(extractChecksAnnotations(result.getNewIssues()))\r\n```\r\n\r\n(It would make sense to have this configurable for a job later)', 'comment_created': datetime.datetime(2020, 7, 10, 22, 8, 10, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 453104331, 'comment_body': '```suggestion\r\n                .withDetailsURL(action.getAbsoluteUrl())\r\n```', 'comment_created': datetime.datetime(2020, 7, 10, 22, 25, 58, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 453104613, 'comment_body': 'Required later:\r\n```\r\nLabelProvider labelProvider = action.getLabelProvider();\r\n```', 'comment_created': datetime.datetime(2020, 7, 10, 22, 27, 3, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 453104831, 'comment_body': 'This code would be better placed in a separate class', 'comment_created': datetime.datetime(2020, 7, 10, 22, 27, 55, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 453106857, 'comment_body': 'On the other hand: in order to test everything it makes sense to use all warnings. Otherwise we need to change the sources to get some output...', 'comment_created': datetime.datetime(2020, 7, 10, 22, 35, 32, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 453107083, 'comment_body': '```suggestion\r\n        return ""* Low: "" + low + ""\\n""\r\n```', 'comment_created': datetime.datetime(2020, 7, 10, 22, 36, 25, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 453107174, 'comment_body': 'I think it would make more sense to sort the other way round (in the output)', 'comment_created': datetime.datetime(2020, 7, 10, 22, 36, 53, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 453107510, 'comment_body': 'WARNING vs. FAILED is a Jenkins specific concept that does not exist in Github', 'comment_created': datetime.datetime(2020, 7, 10, 22, 38, 17, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 453108359, 'comment_body': 'The warnings plugin uses the magic value of `0` to indicate a warning for the whole file. Maybe I should map that to real values in `analysis-model`. However, columns can be 0 if not used, is this a problem or do we need to suppress the call in such cases?', 'comment_created': datetime.datetime(2020, 7, 10, 22, 41, 42, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 453110340, 'comment_body': ""We cannot release the changes in the warning plugin before we do an official release of the Checks API to the update center anyway. \r\n\r\nShouldn't the `ChecksPublisherFactory` return a `NullPublisher` if the GitHub App is not configured for the run?"", 'comment_created': datetime.datetime(2020, 7, 10, 22, 49, 53, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 453179104, 'comment_body': ""GitHub accepts 0 for the line field, but when using 0, the annotation will not be shown on the file changes view, it will only show in the check run page, so maybe GitHub thinks the same way as you do. \r\n\r\nFor columns, I didn't see anything different with or without it, same for multiple lines annotation :shrug:"", 'comment_created': datetime.datetime(2020, 7, 11, 10, 0, 31, tzinfo=datetime.timezone.utc), 'commenter': 'XiongKezhi', 'type': 'User'}, {'comment_id': 453179896, 'comment_body': 'ah, currently not, but it can be easily done if it is safer.', 'comment_created': datetime.datetime(2020, 7, 11, 10, 10, 45, tzinfo=datetime.timezone.utc), 'commenter': 'XiongKezhi', 'type': 'User'}, {'comment_id': 453181606, 'comment_body': 'yes it should be done', 'comment_created': datetime.datetime(2020, 7, 11, 10, 33, 30, tzinfo=datetime.timezone.utc), 'commenter': 'timja', 'type': 'User'}, {'comment_id': 453189167, 'comment_body': 'Probably use configuration later, so is the configuration a responsibility for consumers instead of the API itself?\r\n\r\nBTW, what kind of tests we need here? Unit test (test the `ChecksDetails` constructed) or integration as well?', 'comment_created': datetime.datetime(2020, 7, 11, 12, 14, 58, tzinfo=datetime.timezone.utc), 'commenter': 'XiongKezhi', 'type': 'User'}, {'comment_id': 453191144, 'comment_body': 'Prefer using `labelProvider.getId()` since the doc uses ""code-coverage"" as an example.', 'comment_created': datetime.datetime(2020, 7, 11, 12, 38, 45, tzinfo=datetime.timezone.utc), 'commenter': 'XiongKezhi', 'type': 'User'}, {'comment_id': 453206206, 'comment_body': 'what doc? name is fine imo', 'comment_created': datetime.datetime(2020, 7, 11, 15, 34, 17, tzinfo=datetime.timezone.utc), 'commenter': 'timja', 'type': 'User'}, {'comment_id': 453206441, 'comment_body': 'the GitHub doc for check run: https://docs.github.com/en/rest/reference/checks#check-runs.', 'comment_created': datetime.datetime(2020, 7, 11, 15, 36, 43, tzinfo=datetime.timezone.utc), 'commenter': 'XiongKezhi', 'type': 'User'}, {'comment_id': 453207631, 'comment_body': ""from what I've seen elsewhere including the checks on this PR everyone else is putting human readable names there."", 'comment_created': datetime.datetime(2020, 7, 11, 15, 51, 21, tzinfo=datetime.timezone.utc), 'commenter': 'timja', 'type': 'User'}, {'comment_id': 453207780, 'comment_body': 'maybe use line 1?', 'comment_created': datetime.datetime(2020, 7, 11, 15, 53, 6, tzinfo=datetime.timezone.utc), 'commenter': 'timja', 'type': 'User'}, {'comment_id': 453208598, 'comment_body': ""I'll change it then"", 'comment_created': datetime.datetime(2020, 7, 11, 16, 1, 13, tzinfo=datetime.timezone.utc), 'commenter': 'XiongKezhi', 'type': 'User'}, {'comment_id': 453208862, 'comment_body': 'Anything else can we do here for `INACTIVE` quality gate?', 'comment_created': datetime.datetime(2020, 7, 11, 16, 4, 19, tzinfo=datetime.timezone.utc), 'commenter': 'XiongKezhi', 'type': 'User'}, {'comment_id': 453314560, 'comment_body': ""I have not met such warnings for the whole file, what kind of these warnings are? Shouldn't the biggest unit in a file for these static analysis tools is class instead of the whole file?"", 'comment_created': datetime.datetime(2020, 7, 12, 13, 8, 19, tzinfo=datetime.timezone.utc), 'commenter': 'XiongKezhi', 'type': 'User'}, {'comment_id': 453327588, 'comment_body': ""A search for `.hasLineStart(0)` in my test suite returns 77 matches 😄 So there are a lot of them. I don't know if that is useful though..."", 'comment_created': datetime.datetime(2020, 7, 12, 15, 3, 48, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 453328029, 'comment_body': ""I don't think so for the moment. If users want to fail a GitHub check because of some warnings but do not want to configure a quality gate in Jenkins then they need to open a feature request in the warnings plugin."", 'comment_created': datetime.datetime(2020, 7, 12, 15, 6, 39, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 453328758, 'comment_body': 'Yes, it makes sense that consumers may offer configuration properties for the Checks API. \r\n', 'comment_created': datetime.datetime(2020, 7, 12, 15, 12, 48, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 453328959, 'comment_body': ""For the tests: I don't think that we need integration tests. It is already kind of hard to test the API with GitHub so using the warnings plugin in these tests will make it even harder. But I think the class can be easily tested using a unit test. (And if not we can see this as a proof that the API might be changed a little bit to support testing)"", 'comment_created': datetime.datetime(2020, 7, 12, 15, 14, 52, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 453329462, 'comment_body': 'Agree on the unit-test. \r\n\r\nFor the configurations, I\'m implementing the ""disable checks publishing"" feature as a start, I\'ll push it later, then we can discuss more other configurations. ', 'comment_created': datetime.datetime(2020, 7, 12, 15, 18, 53, tzinfo=datetime.timezone.utc), 'commenter': 'XiongKezhi', 'type': 'User'}, {'comment_id': 453333421, 'comment_body': ""consumers responsibility, I would go with new only for now, it's simple to introduce a spotbugs / checkstyle error for demonstration purposes"", 'comment_created': datetime.datetime(2020, 7, 12, 15, 55, 46, tzinfo=datetime.timezone.utc), 'commenter': 'timja', 'type': 'User'}, {'comment_id': 453333658, 'comment_body': ""how about\r\n```suggestion\r\n     * Publishes checks to platforms. Afterwards, all warnings are available in corresponding platform's UI, e.g. GitHub checks.\r\n```"", 'comment_created': datetime.datetime(2020, 7, 12, 15, 58, 38, tzinfo=datetime.timezone.utc), 'commenter': 'timja', 'type': 'User'}, {'comment_id': 453347204, 'comment_body': 'Booleans should not include is at the start the getter will include that', 'comment_created': datetime.datetime(2020, 7, 12, 18, 17, 40, tzinfo=datetime.timezone.utc), 'commenter': 'timja', 'type': 'User'}, {'comment_id': 453347244, 'comment_body': 'Should be isChecksPublishingDisabled and the pmd disable removed ', 'comment_created': datetime.datetime(2020, 7, 12, 18, 18, 10, tzinfo=datetime.timezone.utc), 'commenter': 'timja', 'type': 'User'}, {'comment_id': 453348539, 'comment_body': 'I would probably call it publishChecks.', 'comment_created': datetime.datetime(2020, 7, 12, 18, 31, 11, tzinfo=datetime.timezone.utc), 'commenter': 'timja', 'type': 'User'}, {'comment_id': 453412483, 'comment_body': 'Just follows the similar options: https://github.com/jenkinsci/warnings-ng-plugin/blob/b2b19b29067e381c3e4902030e1e6123da8ee1c1/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesRecorder.java#L104\r\n\r\nIs this style used because the optional is used for disabling a feature? @uhafner ', 'comment_created': datetime.datetime(2020, 7, 13, 3, 11, 53, tzinfo=datetime.timezone.utc), 'commenter': 'XiongKezhi', 'type': 'User'}, {'comment_id': 454199959, 'comment_body': 'Note that using a positive setting and `true` as default will only work for new freestyle jobs. Existing jobs will not publish the results and need to be manually reconfigured. (This is no big thing, I just want to make sure that you are aware of this issue.) ', 'comment_created': datetime.datetime(2020, 7, 14, 8, 43, 50, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 454238945, 'comment_body': ""oh, I didn't aware that, maybe it's better to make it backward compatible."", 'comment_created': datetime.datetime(2020, 7, 14, 9, 51, 4, tzinfo=datetime.timezone.utc), 'commenter': 'XiongKezhi', 'type': 'User'}, {'comment_id': 454247919, 'comment_body': 'Should be fine...', 'comment_created': datetime.datetime(2020, 7, 14, 10, 7, 34, tzinfo=datetime.timezone.utc), 'commenter': 'timja', 'type': 'User'}, {'comment_id': 454335434, 'comment_body': 'This is not related to backward compatibility. The question is just if existing users (of Freestyle jobs!) should automatically use the GitHub checks or not. For me it is also ok that they need to manually enable.', 'comment_created': datetime.datetime(2020, 7, 14, 12, 56, 34, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 454986850, 'comment_body': 'Remove `//` comments. These comments typically get out of sync soon.', 'comment_created': datetime.datetime(2020, 7, 15, 11, 38, 59, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 454987405, 'comment_body': 'If you have 2 builds use a variable `reference` for the first one and `run` or `build` for the second one (to make it consistent to most of my other tests)', 'comment_created': datetime.datetime(2020, 7, 15, 11, 40, 6, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 454987655, 'comment_body': '```suggestion\r\n                        + ""- ### %d outstanding issues\\n""\r\n```', 'comment_created': datetime.datetime(2020, 7, 15, 11, 40, 38, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 454995680, 'comment_body': 'inline variable', 'comment_created': datetime.datetime(2020, 7, 15, 11, 56, 18, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 454995729, 'comment_body': 'inline', 'comment_created': datetime.datetime(2020, 7, 15, 11, 56, 25, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 454995914, 'comment_body': '```suggestion\r\n    private ChecksDetails createExpectedDetails() {\r\n```', 'comment_created': datetime.datetime(2020, 7, 15, 11, 56, 47, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 454996274, 'comment_body': 'Do you have an example output that shows how this is rendered?', 'comment_created': datetime.datetime(2020, 7, 15, 11, 57, 25, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 454997068, 'comment_body': 'What are the requirements on GitHub side for the resolution of the filenames? Do they want relative paths starting from the repository root?', 'comment_created': datetime.datetime(2020, 7, 15, 11, 58, 58, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 455029824, 'comment_body': 'No for this specific report :)\r\n\r\nI just copied the checkstyle.xml file from other test cases and constructed the annotation based on what the warnings publisher should do for it.', 'comment_created': datetime.datetime(2020, 7, 15, 12, 56, 50, tzinfo=datetime.timezone.utc), 'commenter': 'XiongKezhi', 'type': 'User'}, {'comment_id': 455031424, 'comment_body': ""Not officially documented by GitHub, but from what I have done, it's relative paths from the repository root."", 'comment_created': datetime.datetime(2020, 7, 15, 12, 59, 33, tzinfo=datetime.timezone.utc), 'commenter': 'XiongKezhi', 'type': 'User'}, {'comment_id': 455034482, 'comment_body': 'Ok, then using `getFileName` should work. (This is not always so easy since people sometimes design jobs using a complex directory layout. Then it is already hard for my plugin to refer to the correct source code location)', 'comment_created': datetime.datetime(2020, 7, 15, 13, 4, 42, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 455035484, 'comment_body': 'Ok, then I have to wait until I see it in action on my machine. I just wondered if `- ### ` is valid in markdown since the hashes are used for headers. ', 'comment_created': datetime.datetime(2020, 7, 15, 13, 6, 16, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 455036073, 'comment_body': 'Is there any specific reason that you sometimes use `*` and sometimes `-` for bullet points?\r\n', 'comment_created': datetime.datetime(2020, 7, 15, 13, 7, 13, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 455043570, 'comment_body': ""No, I just googled `- ###` because I want the bullet points with smaller text than `##`.\r\n\r\nThe markdown just don't have a unified standard, `- ###` is valid in GitHub but not valid in somewhere else (say the preview tool: https://markdownlivepreview.com/)\r\n\r\nTurns out `* ###` is supported by GitHub as well, just tried it. I'll make them consistent."", 'comment_created': datetime.datetime(2020, 7, 15, 13, 18, 12, tzinfo=datetime.timezone.utc), 'commenter': 'XiongKezhi', 'type': 'User'}, {'comment_id': 455128355, 'comment_body': '```suggestion\r\n                        .withAnnotations(extractChecksAnnotations(result.getNewIssues(), labelProvider))\r\n```', 'comment_created': datetime.datetime(2020, 7, 15, 15, 10, 50, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 455129146, 'comment_body': 'Then you get for CheckStyle, SpotBugs a detailed description as well:\r\n```suggestion\r\n                        .withRawDetails(labelProvider.getDescription(issue))\r\n```\r\nThis description will contain HTML tags...', 'comment_created': datetime.datetime(2020, 7, 15, 15, 12, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 455748258, 'comment_body': ""the GitHub just supports markdown (or HTML tag) on the summary and description of the whole output, but not for these specific annotations.\r\n\r\nI'll find a way to extract the plain text as the description (`message` field) and left the HTML in the `raw_details` field."", 'comment_created': datetime.datetime(2020, 7, 16, 12, 28, 23, tzinfo=datetime.timezone.utc), 'commenter': 'XiongKezhi', 'type': 'User'}, {'comment_id': 455752355, 'comment_body': 'Is the `getMessage` method in `Issue` just extract the message from the HTML? Then we do not need any further changes.', 'comment_created': datetime.datetime(2020, 7, 16, 12, 35, 52, tzinfo=datetime.timezone.utc), 'commenter': 'XiongKezhi', 'type': 'User'}, {'comment_id': 455781630, 'comment_body': 'The `message` in `Issue` returns the header of an issue. The `description` returns additional information for that issue (from the parsed content). And the `description` of the `labelProvider` does return a HTML description of the bug pattern for specific tools (CheckStyle, Spotbugs, PMD), from the tools website or jar file. This part is not in the parsed content. If that part is empty the `labelProvider` does return the `description` of the issue. So none of the methods removes the HTML. ', 'comment_created': datetime.datetime(2020, 7, 16, 13, 23, 10, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 457066689, 'comment_body': 'It would make the test more readable if you would also check the value of the quality gate via `getAnalysisResult()`. From the test one does not see that there are only 6 warnings in the build.', 'comment_created': datetime.datetime(2020, 7, 20, 5, 33, 57, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 457067229, 'comment_body': 'Can you wrap that part in a method and call it with `QualityGateResult.FAILURE` and `QualityGateResult.UNSTABLE`. Then we can see that both types correctly map to `ChecksConclusion.FAILURE`', 'comment_created': datetime.datetime(2020, 7, 20, 5, 35, 10, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 457079870, 'comment_body': ""Is the idea here to replace a `<a>` with plain text? Or shouldn't this be `[text](url)`?"", 'comment_created': datetime.datetime(2020, 7, 20, 6, 1, 16, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 457354037, 'comment_body': ""The message field doesn't support markdown"", 'comment_created': datetime.datetime(2020, 7, 20, 12, 51, 20, tzinfo=datetime.timezone.utc), 'commenter': 'XiongKezhi', 'type': 'User'}, {'comment_id': 461585805, 'comment_body': 'Is this version number ok? Some incompatible changes (new property for the pipeline script) added.', 'comment_created': datetime.datetime(2020, 7, 28, 13, 37, 45, tzinfo=datetime.timezone.utc), 'commenter': 'XiongKezhi', 'type': 'User'}, {'comment_id': 461589870, 'comment_body': ""don't worry about the version it will be set during release\r\n\r\n```suggestion\r\n    <revision>8.4.0</revision>\r\n```"", 'comment_created': datetime.datetime(2020, 7, 28, 13, 43, 15, tzinfo=datetime.timezone.utc), 'commenter': 'timja', 'type': 'User'}, {'comment_id': 461616194, 'comment_body': 'but it will always fail CI which is annoying for development before the release', 'comment_created': datetime.datetime(2020, 7, 28, 14, 16, 24, tzinfo=datetime.timezone.utc), 'commenter': 'XiongKezhi', 'type': 'User'}, {'comment_id': 461628590, 'comment_body': 'why does it fail CI?', 'comment_created': datetime.datetime(2020, 7, 28, 14, 32, 17, tzinfo=datetime.timezone.utc), 'commenter': 'timja', 'type': 'User'}, {'comment_id': 461631416, 'comment_body': 'since it breaks the semantic versioning:\r\n\r\n```\r\n[ERROR] Failed to execute goal org.revapi:revapi-maven-plugin:0.11.4:check (run-revapi) on project warnings-ng: The following API problems caused the build to fail:\r\n[ERROR] java.field.serialVersionUIDChanged: field io.jenkins.plugins.analysis.core.steps.PublishIssuesStep.serialVersionUID: serialVersionUID constant changed. Objects serialized using the old version of the class will no longer be deserializable. (breaks semantic versioning)\r\n[ERROR] java.field.serialVersionUIDChanged: field io.jenkins.plugins.analysis.core.steps.RecordIssuesStep.serialVersionUID: serialVersionUID constant changed. Objects serialized using the old version of the class will no longer be deserializable. (breaks semantic versioning)\r\n```', 'comment_created': datetime.datetime(2020, 7, 28, 14, 35, 41, tzinfo=datetime.timezone.utc), 'commenter': 'XiongKezhi', 'type': 'User'}, {'comment_id': 461636797, 'comment_body': 'Ah ok', 'comment_created': datetime.datetime(2020, 7, 28, 14, 42, 11, tzinfo=datetime.timezone.utc), 'commenter': 'timja', 'type': 'User'}]","[{'commit_sha': '84bd84b6519a5f2fca0c506bfafcf0e895e14571', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a237d0043011bb986f232e5838801b16d52fc2f9', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e1e25913aab0f15f972cf8605ec7b610675f6c5', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b98237755af8d1d1861f2bda6efeb6c637ea0761', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2f36d693948c4c3d45310d5cc677cc202c0efe4c', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02e3a70424737b979403d797e661826008de4f75', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff0cb0c740f3ade13b7d0b146225b377f6b76a46', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4230adf53d5dcd2d3710375d349969e90f6d427f', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '31db276268701389a46434cbf266a858b4b2caca', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12726c3fafc429f0bda3ecc96c9469367367434f', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8081ee558f1bab5578a0be8487ac239df741d9e', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c4883a1a12aa17d9be8cd7b88101bb80032ae6d', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '108e9c8beed839d3136acb8b12d3cb7faf4f37d7', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64335cd8c8384c2a535d9499bc8e51c8683048a4', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d8acf4851163ea9fac22cdb1aca5270c607c8cd', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '171778206d877605c26ff6ceeab862412e487a14', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '52bf01bdaa523940c1c9ff456b4c3cbe2a1e4209', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '91975e787406b013eb2133b223b5c5db4c9819a3', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd46852b45cfd8e4b2b122d8b92d6968a696affc', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af01e607274011e50e53192a89593244984d5ca0', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff27c99551e681198ead36d8e8884e779dc63337', 'committer_username': 'uhafner', 'committer_name': 'Ullrich Hafner', 'committer_email': None, 'commit_date': datetime.datetime(2010, 11, 30, 12, 54, 6, tzinfo=datetime.timezone.utc)}]",Kezhi Xiong,30348893,august.xkz@gmail.com,User,,43,,36,26
453073313,Integrate with Checks Api - Allows publishing coverage to GitHub checks,"Example: https://github.com/XiongKezhi/codingstyle/pull/3/checks?check_run_id=888545163
- [x] Publish coverage as checks
- [x] Add tests
- [x] Add health report
- [x] Add configurations
- [x] ...",True,169,https://api.github.com/repos/jenkinsci/code-coverage-api-plugin/pulls/169,https://github.com/jenkinsci/code-coverage-api-plugin/pull/169,closed,573,5,6,20,4,37,1,0,[{'name': 'enhancement'}],2020-07-20 05:30:42+00:00,2020-08-04 14:55:09+00:00,1329867.0,"15 days, 9:24:27","[{'comment_id': 457114143, 'comment_body': 'not sure which field it is as they have the same text currently but can a summary go on the check status on the right hand side\r\n\r\n![image](https://user-images.githubusercontent.com/21194782/87909135-8e84e780-ca5f-11ea-938e-1e1e3cfbfd24.png)\r\n', 'comment_created': datetime.datetime(2020, 7, 20, 7, 4, 10, tzinfo=datetime.timezone.utc), 'commenter': 'timja', 'type': 'User'}, {'comment_id': 457115334, 'comment_body': ""consider putting this at the start of the line so that the emoji's are all aligned"", 'comment_created': datetime.datetime(2020, 7, 20, 7, 6, 2, tzinfo=datetime.timezone.utc), 'commenter': 'timja', 'type': 'User'}, {'comment_id': 457115704, 'comment_body': 'coverage is normally summarised as a percentage, not out of the number of lines covered', 'comment_created': datetime.datetime(2020, 7, 20, 7, 6, 36, tzinfo=datetime.timezone.utc), 'commenter': 'timja', 'type': 'User'}, {'comment_id': 457116017, 'comment_body': 'seems irrelevant to the user', 'comment_created': datetime.datetime(2020, 7, 20, 7, 7, 6, tzinfo=datetime.timezone.utc), 'commenter': 'timja', 'type': 'User'}, {'comment_id': 457116826, 'comment_body': 'use the jenkins bom instead of choosing all these versions directly\r\n\r\nhttps://github.com/jenkinsci/bom\r\n\r\nyou could introduce it in a separate PR to reduce the diff here as well', 'comment_created': datetime.datetime(2020, 7, 20, 7, 8, 30, tzinfo=datetime.timezone.utc), 'commenter': 'timja', 'type': 'User'}, {'comment_id': 457117212, 'comment_body': ""shouldn't be needed,\r\n\r\nrun:\r\n`mvn incrementals:incrementalify`\r\n\r\nhttps://github.com/jenkinsci/incrementals-tools"", 'comment_created': datetime.datetime(2020, 7, 20, 7, 9, 9, tzinfo=datetime.timezone.utc), 'commenter': 'timja', 'type': 'User'}, {'comment_id': 457117447, 'comment_body': '```suggestion\r\n        <version>4.3</version>\r\n```', 'comment_created': datetime.datetime(2020, 7, 20, 7, 9, 32, tzinfo=datetime.timezone.utc), 'commenter': 'timja', 'type': 'User'}, {'comment_id': 457973547, 'comment_body': ""`title` field in the `output` object. Then I'll change that part in warnings checks as well."", 'comment_created': datetime.datetime(2020, 7, 21, 9, 47, 45, tzinfo=datetime.timezone.utc), 'commenter': 'XiongKezhi', 'type': 'User'}, {'comment_id': 457991295, 'comment_body': 'take a look at this plugin: https://github.com/jenkinsci/github-coverage-reporter-plugin', 'comment_created': datetime.datetime(2020, 7, 21, 10, 19, 23, tzinfo=datetime.timezone.utc), 'commenter': 'timja', 'type': 'User'}, {'comment_id': 458320824, 'comment_body': ""Can this ever return null? If so, you don't want to do line 25"", 'comment_created': datetime.datetime(2020, 7, 21, 18, 59, 2, tzinfo=datetime.timezone.utc), 'commenter': 'jeffpearce', 'type': 'User'}, {'comment_id': 458322858, 'comment_body': ""Oh, I see. It returns a `NullChecksPublisher` if it can't find one"", 'comment_created': datetime.datetime(2020, 7, 21, 19, 2, 43, tzinfo=datetime.timezone.utc), 'commenter': 'jeffpearce', 'type': 'User'}, {'comment_id': 458589016, 'comment_body': 'I would prefer to see line and branch coverage in the title.', 'comment_created': datetime.datetime(2020, 7, 22, 7, 26, 30, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 458590566, 'comment_body': 'I wonder if it would make sense to separate the total report and the delta report? Maybe we can discuss that topic in our meeting today. This question is also relevant for the analysis report (new and total warnings).', 'comment_created': datetime.datetime(2020, 7, 22, 7, 29, 20, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 458591510, 'comment_body': 'Move inside the `try` then `action = null` and the `if` is not required at all.', 'comment_created': datetime.datetime(2020, 7, 22, 7, 30, 58, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 458593037, 'comment_body': 'This looks somewhat strange (but this is from the existing code). When does the report \r\n- return `null`\r\n- throw an `CoverageException`', 'comment_created': datetime.datetime(2020, 7, 22, 7, 33, 54, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 458597813, 'comment_body': ""Wouldn't it be simpler to have a table with two rows (titles and values) that contains a column for each type? Then it would not occupy so much place."", 'comment_created': datetime.datetime(2020, 7, 22, 7, 42, 54, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 458601770, 'comment_body': ""What is the default sorting? It looks ok in the PR results but I'm not sure if this is just some coincidence. "", 'comment_created': datetime.datetime(2020, 7, 22, 7, 49, 48, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 458602206, 'comment_body': 'The coverage report also has a quality gate that we should check.', 'comment_created': datetime.datetime(2020, 7, 22, 7, 50, 28, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 458603295, 'comment_body': '(*Conditional* actually is the wrong name, but this is something that needs to be changed in the coverage API and not in your PR)', 'comment_created': datetime.datetime(2020, 7, 22, 7, 52, 15, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 459839152, 'comment_body': 'but our plugin is currently not released, so we need this to download the checks dependencies', 'comment_created': datetime.datetime(2020, 7, 24, 3, 46, 43, tzinfo=datetime.timezone.utc), 'commenter': 'XiongKezhi', 'type': 'User'}, {'comment_id': 459874097, 'comment_body': 'That’s automatically added by the maven profile that incrementals adds behind the scenes', 'comment_created': datetime.datetime(2020, 7, 24, 6, 32, 35, tzinfo=datetime.timezone.utc), 'commenter': 'timja', 'type': 'User'}, {'comment_id': 460170238, 'comment_body': 'Done, see: https://github.com/XiongKezhi/codingstyle/pull/3/checks?check_run_id=907434646', 'comment_created': datetime.datetime(2020, 7, 24, 16, 48, 5, tzinfo=datetime.timezone.utc), 'commenter': 'XiongKezhi', 'type': 'User'}, {'comment_id': 460171261, 'comment_body': 'I refactored my code, see field `COVERAGE_TYPES` in `CoverageChecksPublisher`, so I think the default sorting order is no longer a problem for us.', 'comment_created': datetime.datetime(2020, 7, 24, 16, 50, 1, tzinfo=datetime.timezone.utc), 'commenter': 'XiongKezhi', 'type': 'User'}, {'comment_id': 460212235, 'comment_body': 'release this?', 'comment_created': datetime.datetime(2020, 7, 24, 18, 12, 37, tzinfo=datetime.timezone.utc), 'commenter': 'timja', 'type': 'User'}, {'comment_id': 460360155, 'comment_body': 'the table format: https://github.com/XiongKezhi/codingstyle/pull/3/checks?check_run_id=907434646', 'comment_created': datetime.datetime(2020, 7, 25, 3, 50, 17, tzinfo=datetime.timezone.utc), 'commenter': 'XiongKezhi', 'type': 'User'}, {'comment_id': 460360767, 'comment_body': ""I just tried to keep the `try-catch` section as small as possible for easier exception locating, so isn't this a concern?"", 'comment_created': datetime.datetime(2020, 7, 25, 3, 59, 21, tzinfo=datetime.timezone.utc), 'commenter': 'XiongKezhi', 'type': 'User'}, {'comment_id': 460364585, 'comment_body': 'I refactored my code to get `CoverageAction` directly from `run` instead of changing this `CoverageProcessor`.', 'comment_created': datetime.datetime(2020, 7, 25, 4, 45, 39, tzinfo=datetime.timezone.utc), 'commenter': 'XiongKezhi', 'type': 'User'}, {'comment_id': 460410153, 'comment_body': ""I would remove this line, it's obvious you're talking about coverage and github is truncating it in the UI\r\n```suggestion\r\n```"", 'comment_created': datetime.datetime(2020, 7, 25, 14, 29, 23, tzinfo=datetime.timezone.utc), 'commenter': 'timja', 'type': 'User'}, {'comment_id': 460413015, 'comment_body': 'more trimming\r\n```suggestion\r\n            lineTitle = extractChecksTitle(""Line"", ""target branch"", lineCoverage,\r\n```', 'comment_created': datetime.datetime(2020, 7, 25, 15, 0, 13, tzinfo=datetime.timezone.utc), 'commenter': 'timja', 'type': 'User'}, {'comment_id': 460506524, 'comment_body': 'Don’t we want to default to publishing? Change to skipPublishingChecks?', 'comment_created': datetime.datetime(2020, 7, 26, 10, 0, 1, tzinfo=datetime.timezone.utc), 'commenter': 'timja', 'type': 'User'}, {'comment_id': 460507280, 'comment_body': ""either is ok, I'll change it"", 'comment_created': datetime.datetime(2020, 7, 26, 10, 8, 31, tzinfo=datetime.timezone.utc), 'commenter': 'XiongKezhi', 'type': 'User'}, {'comment_id': 460627355, 'comment_body': ""I'm ready to release it now, but we may need to refactor some part since we have to publish checks for  `Queue.WaitingItem` instead of `Run` for `queued` state, is that ok? (I believe nothing changes in the consumer side after the that)"", 'comment_created': datetime.datetime(2020, 7, 27, 3, 25, 5, tzinfo=datetime.timezone.utc), 'commenter': 'XiongKezhi', 'type': 'User'}, {'comment_id': 460698770, 'comment_body': 'Would it then make sense to use the same name in the warnings plugin as well? This will help users to write their pipeline scripts.', 'comment_created': datetime.datetime(2020, 7, 27, 7, 33, 36, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 462077585, 'comment_body': 'can you fix this please?', 'comment_created': datetime.datetime(2020, 7, 29, 6, 53, 34, tzinfo=datetime.timezone.utc), 'commenter': 'timja', 'type': 'User'}, {'comment_id': 462140255, 'comment_body': 'ok, done now.', 'comment_created': datetime.datetime(2020, 7, 29, 8, 47, 29, tzinfo=datetime.timezone.utc), 'commenter': 'XiongKezhi', 'type': 'User'}, {'comment_id': 462265372, 'comment_body': ""what's this for?"", 'comment_created': datetime.datetime(2020, 7, 29, 12, 38, 5, tzinfo=datetime.timezone.utc), 'commenter': 'timja', 'type': 'User'}, {'comment_id': 462275702, 'comment_body': 'oops, unused import...', 'comment_created': datetime.datetime(2020, 7, 29, 12, 55, 39, tzinfo=datetime.timezone.utc), 'commenter': 'XiongKezhi', 'type': 'User'}]","[{'commit_sha': '5151596197dc4eb00762466dcd13afaf428eacc7', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44a9d37bcd194200d420922d8c3eb13839abc02f', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '518553a66e042871578cd984b3bb2ecc8b4f94fd', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7eece865ec13ccefd117d612286ec99851cce3d', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc7380f2bb1a63b18f940b4a598ca4efd276d10d', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e132dbaad6bd88e39c00c27c48827a836796c85', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0dc4fd07669276ece146bd1dccd69c7673ed1d1c', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'efefb2198a682529952ae6df98a8b838b99f9616', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e93bd360ca9aa6bb21681b9e8268d148b50e39aa', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42e525cef8f80103f6dc63002d8304e641fff273', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a9c1b7d4461cee42da99d9644bfacede8518887', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9009e8e0110813f1e1b63a4e6942491a6626b8e5', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5128e44525921e621081267ac0eb6c38878298a', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c04d09b5b8a5b66ef63277b6b91765e8acc1aa5', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b547fb11168b27bf2f046ea139a450f5f65c2a2b', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dafdf86a64fff1d52956e54b8e6feba94cf49b14', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51b1d245f459543ee77269cbff245d0a833bb3ec', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f99c04532b0662acafdb87eb7c0f77b233dc169', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af687f7c468e7f0214b0a948cf15db7e855d28cd', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c6bb16372c1e75531a3ea1c6cb2fc702c783881c', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}]",Kezhi Xiong,30348893,august.xkz@gmail.com,User,,43,,36,26
463498125,Add pipeline support,"Target pipeline:
```
publishChecks(
    name: ""check"", 
    detailsURL: ""ci.jenkins.io"", 
    status: ""COMPLETED"",
    conclusion: ""SUCCESS"",
    output: [
        title: ""output"",
        summary: ""summary"",
        text: ""text"",
        annotations: [
            [path: ""src/main/foo.java"", startLine: 0, endLine: 0, annotationLevel: ""WARNING"", message: ""foo test""],
            [path: ""src/main/bar.java"", startLine: 1, endLine: 1, annotationLevel: ""WARNING"", message: ""bar test""]
        ],
        images: [
            [alt: ""foo alt"", imageUrl: ""foo url"", caption: ""foo image""],    
            [alt: ""foo alt"", imageUrl: ""foo url"", caption: ""foo image""]
        ]
    ],
    actions: [
        [label: ""foo label"", description: ""foo action"", identifier: ""foo identifier""],
        [label: ""bar label"", description: ""bar action"", identifier: ""bar identifier""]
    ]
)

```

- [x] Implement publish checks step
- [x] Add tests",True,7,https://api.github.com/repos/jenkinsci/checks-api-plugin/pulls/7,https://github.com/jenkinsci/checks-api-plugin/pull/7,closed,462,16,20,22,11,13,1,1,[{'name': 'enhancement'}],2020-08-05 16:17:04+00:00,2020-08-25 07:50:36+00:00,1697612.0,"19 days, 15:33:32","[{'comment_id': 466524634, 'comment_body': ""Is it worth separating our pipeline models from our API models?\r\n\r\nSo that they don't get polluted with all the setters etc required by stapler?"", 'comment_created': datetime.datetime(2020, 8, 6, 16, 9, 57, tzinfo=datetime.timezone.utc), 'commenter': 'timja', 'type': 'User'}, {'comment_id': 466527508, 'comment_body': 'I really think we should flatten this down so that users don\'t have to do:\r\n\r\n```\r\npublishChecks(\r\n    name: ""check"", \r\n    detailsURL: ""ci.jenkins.io"", \r\n    status: ""COMPLETED"",\r\n    conclusion: ""SUCCESS"",\r\n    output: [\r\n        title: ""output"",\r\n        summary: ""summary"",\r\n        text: ""text"",\r\n        annotations: [\r\n            [path: ""src/main/foo.java"", startLine: 0, endLine: 0, annotationLevel: ""WARNING"", message: ""foo test""],\r\n            [path: ""src/main/bar.java"", startLine: 1, endLine: 1, annotationLevel: ""WARNING"", message: ""bar test""]\r\n        ],\r\n        images: [\r\n            [alt: ""foo alt"", imageUrl: ""foo url"", caption: ""foo image""],    \r\n            [alt: ""foo alt"", imageUrl: ""foo url"", caption: ""foo image""]\r\n        ]\r\n    ],\r\n)\r\n```\r\n\r\n\r\ninstead a simple usage would be;\r\n\r\n```\r\npublishChecks(\r\n  name: ""MyCheck"",\r\n  conclusion: ""success"",\r\n  summary: ""Everything is OK!""\r\n)\r\n```\r\n\r\ni.e. it would be good to start from a users perspective, and look at some scenarios of what they want to use it for.\r\n\r\nMost users probably won\'t user annotations / images\r\nThey will just want to set a status, with some messaging I would expect\r\n\r\n', 'comment_created': datetime.datetime(2020, 8, 6, 16, 14, 33, tzinfo=datetime.timezone.utc), 'commenter': 'timja', 'type': 'User'}, {'comment_id': 466534840, 'comment_body': ""yeah, I didn't consider the user scenarios and afraid too many fields will explode this class, so just flattened the first level checks `ChecksDetails`. \r\n\r\nAfter your example, one pipeline usage I can come up with now is that users may want to publish checks to more precisely indicate the stages (especially for their customized ones). "", 'comment_created': datetime.datetime(2020, 8, 6, 16, 27, 2, tzinfo=datetime.timezone.utc), 'commenter': 'XiongKezhi', 'type': 'User'}, {'comment_id': 467571605, 'comment_body': ""Shouldn't this be `detailsUrl`? (If not make sure that `imageUrl` will use the same capitalization)"", 'comment_created': datetime.datetime(2020, 8, 9, 11, 25, 42, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 472513156, 'comment_body': 'I think it would make sense to add `config.jelly` and `*-help.html` files for the fields (you already have the text in the JavaDoc of the `ChecksOutput` classes). Then the online documentation (Snippet Generator and [Online Reference](https://www.jenkins.io/doc/pipeline/steps/)) has some more details. You can open the Snippet Generator using the ""Pipeline Syntax"" link on a job page.', 'comment_created': datetime.datetime(2020, 8, 18, 21, 49, 45, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 472514590, 'comment_body': 'The text is shown in the Snippet Generator and [Online Reference](https://www.jenkins.io/doc/pipeline/steps/warnings-ng/) (and should be part of Messages)', 'comment_created': datetime.datetime(2020, 8, 18, 21, 53, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 472516255, 'comment_body': 'Is there an exception thrown? Then make it specific.', 'comment_created': datetime.datetime(2020, 8, 18, 21, 56, 56, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 472520167, 'comment_body': '```suggestion\r\n        assertThat(descriptor.getRequiredContext().toArray())\r\n                .contains(Run.class, TaskListener.class);\r\n```', 'comment_created': datetime.datetime(2020, 8, 18, 22, 6, 19, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 475495525, 'comment_body': 'Extract to a method `asDisplayName` or something similar and reuse in line 154.', 'comment_created': datetime.datetime(2020, 8, 24, 10, 18, 47, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 475502059, 'comment_body': '(Or extract the whole loop as method that accepts any enum)', 'comment_created': datetime.datetime(2020, 8, 24, 10, 27, 51, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 475507487, 'comment_body': 'Optional (since we have no I18n yet in the whole project): it would make sense to create a `Messages.properties` file and add all UI labels (example: https://github.com/jenkinsci/forensics-api-plugin/blob/master/src/main/resources/io/jenkins/plugins/forensics/miner/Messages.properties). Then you can replace these strings with the constant in the generated `Messages` class (example: https://github.com/jenkinsci/forensics-api-plugin/blob/master/src/main/java/io/jenkins/plugins/forensics/miner/ForensicsJobAction.java#L34). \r\n\r\nBut we can postpone that part to the after GSoC work.', 'comment_created': datetime.datetime(2020, 8, 24, 10, 33, 39, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 475509876, 'comment_body': ""Shouldn't this file be named `help-conclusion.html`?"", 'comment_created': datetime.datetime(2020, 8, 24, 10, 38, 5, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 475509946, 'comment_body': ""Shouldn't this file be named `help-status`?"", 'comment_created': datetime.datetime(2020, 8, 24, 10, 38, 16, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}]","[{'commit_sha': '4554ac687685d17bc1c6261cb410916cfc958637', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4021e61a5ab3d1794d2c8e13086e44a13d7c3c93', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da26987f7e164c24f98cdb598cbd3ed021ffca6d', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '143d3fe3fc7884f462d41474df73a35b559b7474', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '30bf5f4b42bdaffc9b774b4aeb55ef610fa99709', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61c0c048d2b7b118514b706c2bd95e774457f5ac', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3dfead120c0f2172188f8d6d560413015749549e', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10181d3073055e811051e7233dc1f93e6ec637ae', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df506b4aa6ba640c98f5aca7814e02245475076a', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef35458b3aa7af98b130fddd47647f6fd833aefb', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2104d5bd953c197d220bf3e06f054f87d0886d5', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd2d77da26859149ea41fd72a7d23fa57662c8ca3', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '32c685fc2acbde08af1ebb4c0eed1365a08f11fb', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72b71edfce0863b1a5ec1bf5bda8fa825578cea8', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '863ad53ebaf16504a8a110808e92f42db50f0758', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b40659a23d88975f6cba6f8445ccde1c195db9a', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe6a4e8679b52765e88dad2983ec1c288c24fb31', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6df75980b28de1c506df4d91b971f5f1d78c5ea2', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c2643e4ce388abac856b7dfb077e3a3f7e4f7653', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '463e1c1fa939882aa4770697f898c85e53caf913', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f981ea8225c268200a06739f762f414059e73140', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16a3d3ff6dcd0e714e5ef69913aa273766f81ef6', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}]",Kezhi Xiong,30348893,august.xkz@gmail.com,User,,43,,36,26
467503511,Add subscriber for check run event in order to handle rerun request,"For the request payload example, see https://github.com/jenkinsci/github-checks-plugin/blob/8273ee1bc151e0b1b94bfa9a5a9d8e88c3e29b7f/src/test/resources/io/jenkins/plugins/checks/github/CheckRunGHEventSubscriberTest/check-run-event-with-rerun-action.json",True,25,https://api.github.com/repos/jenkinsci/github-checks-plugin/pulls/25,https://github.com/jenkinsci/github-checks-plugin/pull/25,closed,1239,0,6,14,3,6,1,0,[{'name': 'enhancement'}],2020-08-13 16:39:16+00:00,2020-09-02 14:10:04+00:00,1719048.0,"19 days, 21:30:48","[{'comment_id': 470677457, 'comment_body': ""ouch this seems like an expensive way of doing it, but I guess there's no better way"", 'comment_created': datetime.datetime(2020, 8, 14, 14, 57, 50, tzinfo=datetime.timezone.utc), 'commenter': 'timja', 'type': 'User'}, {'comment_id': 470678163, 'comment_body': 'so do we need this method? seems like it should be available?', 'comment_created': datetime.datetime(2020, 8, 14, 14, 59, 1, tzinfo=datetime.timezone.utc), 'commenter': 'timja', 'type': 'User'}, {'comment_id': 470711713, 'comment_body': 'yes, the plugins I saw are doing this way, iterating all the jobs...', 'comment_created': datetime.datetime(2020, 8, 14, 15, 55, 47, tzinfo=datetime.timezone.utc), 'commenter': 'XiongKezhi', 'type': 'User'}, {'comment_id': 470714602, 'comment_body': ""this method is available, but using the object from github-api is better since we don't have to parse the json again, and more safe.\r\n\r\nthe github-api has released 1.116, may just need to wait two or three days, the github-api-plugin will follow up"", 'comment_created': datetime.datetime(2020, 8, 14, 16, 1, 13, tzinfo=datetime.timezone.utc), 'commenter': 'XiongKezhi', 'type': 'User'}, {'comment_id': 470732652, 'comment_body': 'kk', 'comment_created': datetime.datetime(2020, 8, 14, 16, 36, 52, tzinfo=datetime.timezone.utc), 'commenter': 'timja', 'type': 'User'}, {'comment_id': 471072214, 'comment_body': 'I don’t think we want this tbh, I would just rerun the last build otherwise it will likely confuse users ', 'comment_created': datetime.datetime(2020, 8, 16, 6, 25, 19, tzinfo=datetime.timezone.utc), 'commenter': 'timja', 'type': 'User'}]","[{'commit_sha': 'f9f14a3622939cb38b9d469e8fe470fbe2c17f82', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f7bbd6070c8a15b3bb5ae5f4dbd9e3297da82f79', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8273ee1bc151e0b1b94bfa9a5a9d8e88c3e29b7f', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a570c0cc34095e402d389165cde0786d8506d0f', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a2bca5dc29f49fb694e66d18ea9fb7c1c514314', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a745f896cff17542ea9f31218e136c54d8171b58', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5360d5b8b3c7f8f2af7b274172ce14fc97874e21', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07241e1a92219020ed7e9444366138d869a409e2', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6942cb0fd53f11083fe8e56f273eac1f5f9743f1', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea060be67dad522ab6c31444fc4274955ac6e918', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd1e33d4f1584460637a943d5f4fc765073e5223', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d37ad1f23f2559038879f26efe25c6b803370eb', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b7883f0d75cc6c843c43abe80d1bc29cf0ec506', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5eca6310e08d339b8d02d71cbf6792357f7c286e', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}]",Kezhi Xiong,30348893,august.xkz@gmail.com,User,,43,,36,26
447508848,[JENKINS-54072] Publish warnings in GitHub pull requests using Checks API,"- [x] Publish issues and statistics: https://github.com/XiongKezhi/codingstyle/pull/1/checks?check_run_id=858533400
- [x] Add tests
- [x] Parse HTML warning description
- [x] beautify the output
- [ ] ...",True,550,https://api.github.com/repos/jenkinsci/warnings-ng-plugin/pulls/550,https://github.com/jenkinsci/warnings-ng-plugin/pull/550,closed,692,34,18,21,22,76,1,0,[{'name': 'feature'}],2020-07-10 15:38:11+00:00,2020-07-28 23:11:36+00:00,1582405.0,"18 days, 7:33:25","[{'comment_id': 452925275, 'comment_body': 'the case should be consistent for each section\r\n```suggestion\r\n                        + ""- ### %d outstanding Issues\\n""\r\n```', 'comment_created': datetime.datetime(2020, 7, 10, 15, 46, 27, tzinfo=datetime.timezone.utc), 'commenter': 'timja', 'type': 'User'}, {'comment_id': 452925733, 'comment_body': 'I think presentation layer code should be extracted to a different class', 'comment_created': datetime.datetime(2020, 7, 10, 15, 47, 16, tzinfo=datetime.timezone.utc), 'commenter': 'timja', 'type': 'User'}, {'comment_id': 452926746, 'comment_body': 'hmm I see check annotations showing up on unchanged files do we want that?\r\n\r\nhttps://github.com/XiongKezhi/codingstyle/pull/1/files', 'comment_created': datetime.datetime(2020, 7, 10, 15, 49, 9, tzinfo=datetime.timezone.utc), 'commenter': 'timja', 'type': 'User'}, {'comment_id': 452928540, 'comment_body': ""I don't think Neutral is the same as Warning\r\n\r\npossibly:\r\n```suggestion\r\n                return ChecksConclusion.FAILURE;\r\n```"", 'comment_created': datetime.datetime(2020, 7, 10, 15, 52, 12, tzinfo=datetime.timezone.utc), 'commenter': 'timja', 'type': 'User'}, {'comment_id': 452931543, 'comment_body': ""I looked into how safe this is,\r\nIt seems like it in the current state it will only work if all builds are using a github app.\r\n\r\nIf the API and implementation was separated out to different plugins (which I think it needs to be so that warnings-ng doesn't have to depend on github-branch-source) then it would fall back to a NullChecksPublisher and it would be far safer. In that case it would only fail for users with the github-checks plugin installed when they don't have a github app configured.\r\n\r\nThoughts?"", 'comment_created': datetime.datetime(2020, 7, 10, 15, 57, 38, tzinfo=datetime.timezone.utc), 'commenter': 'timja', 'type': 'User'}, {'comment_id': 452932948, 'comment_body': ""I'm not sure how we can recognize the changed files of a PR, maybe just report new or delta issues?"", 'comment_created': datetime.datetime(2020, 7, 10, 16, 0, 12, tzinfo=datetime.timezone.utc), 'commenter': 'XiongKezhi', 'type': 'User'}, {'comment_id': 452939034, 'comment_body': 'probably a separate change, should be doable though', 'comment_created': datetime.datetime(2020, 7, 10, 16, 11, 38, tzinfo=datetime.timezone.utc), 'commenter': 'timja', 'type': 'User'}, {'comment_id': 452958872, 'comment_body': ""Not all builds, but builds from a github-branch-source project, for other project builds, they will still get `NullChecksPublisher` which is safe to use.\r\n\r\nBut for the stable use of warnings-plugin (since it is going to be used for ci.jenkin.io), maybe it's better to split the plugin before releasing this feature for warnings-ng? @uhafner"", 'comment_created': datetime.datetime(2020, 7, 10, 16, 50, 54, tzinfo=datetime.timezone.utc), 'commenter': 'XiongKezhi', 'type': 'User'}, {'comment_id': 453095679, 'comment_body': '```suggestion\r\n                .withName(labelProvider.getName())\r\n```', 'comment_created': datetime.datetime(2020, 7, 10, 21, 59, 32, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 453096488, 'comment_body': '```suggestion\r\n                        .withTitle(labelProvider.getLinkName())\r\n```', 'comment_created': datetime.datetime(2020, 7, 10, 22, 1, 18, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 453099281, 'comment_body': 'I think it can happen that files will get a new (or old warning) that is in a file that is not part of the PR. Simple use case: add a new checkstyle rule to the configuration. Maybe it makes sense to add it as a configurable option later? \r\n\r\nI think in the beginning we should start with new warnings only:\r\n\r\n```suggestion\r\n                        .withAnnotations(extractChecksAnnotations(result.getNewIssues()))\r\n```\r\n\r\n(It would make sense to have this configurable for a job later)', 'comment_created': datetime.datetime(2020, 7, 10, 22, 8, 10, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 453104331, 'comment_body': '```suggestion\r\n                .withDetailsURL(action.getAbsoluteUrl())\r\n```', 'comment_created': datetime.datetime(2020, 7, 10, 22, 25, 58, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 453104613, 'comment_body': 'Required later:\r\n```\r\nLabelProvider labelProvider = action.getLabelProvider();\r\n```', 'comment_created': datetime.datetime(2020, 7, 10, 22, 27, 3, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 453104831, 'comment_body': 'This code would be better placed in a separate class', 'comment_created': datetime.datetime(2020, 7, 10, 22, 27, 55, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 453106857, 'comment_body': 'On the other hand: in order to test everything it makes sense to use all warnings. Otherwise we need to change the sources to get some output...', 'comment_created': datetime.datetime(2020, 7, 10, 22, 35, 32, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 453107083, 'comment_body': '```suggestion\r\n        return ""* Low: "" + low + ""\\n""\r\n```', 'comment_created': datetime.datetime(2020, 7, 10, 22, 36, 25, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 453107174, 'comment_body': 'I think it would make more sense to sort the other way round (in the output)', 'comment_created': datetime.datetime(2020, 7, 10, 22, 36, 53, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 453107510, 'comment_body': 'WARNING vs. FAILED is a Jenkins specific concept that does not exist in Github', 'comment_created': datetime.datetime(2020, 7, 10, 22, 38, 17, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 453108359, 'comment_body': 'The warnings plugin uses the magic value of `0` to indicate a warning for the whole file. Maybe I should map that to real values in `analysis-model`. However, columns can be 0 if not used, is this a problem or do we need to suppress the call in such cases?', 'comment_created': datetime.datetime(2020, 7, 10, 22, 41, 42, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 453110340, 'comment_body': ""We cannot release the changes in the warning plugin before we do an official release of the Checks API to the update center anyway. \r\n\r\nShouldn't the `ChecksPublisherFactory` return a `NullPublisher` if the GitHub App is not configured for the run?"", 'comment_created': datetime.datetime(2020, 7, 10, 22, 49, 53, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 453179104, 'comment_body': ""GitHub accepts 0 for the line field, but when using 0, the annotation will not be shown on the file changes view, it will only show in the check run page, so maybe GitHub thinks the same way as you do. \r\n\r\nFor columns, I didn't see anything different with or without it, same for multiple lines annotation :shrug:"", 'comment_created': datetime.datetime(2020, 7, 11, 10, 0, 31, tzinfo=datetime.timezone.utc), 'commenter': 'XiongKezhi', 'type': 'User'}, {'comment_id': 453179896, 'comment_body': 'ah, currently not, but it can be easily done if it is safer.', 'comment_created': datetime.datetime(2020, 7, 11, 10, 10, 45, tzinfo=datetime.timezone.utc), 'commenter': 'XiongKezhi', 'type': 'User'}, {'comment_id': 453181606, 'comment_body': 'yes it should be done', 'comment_created': datetime.datetime(2020, 7, 11, 10, 33, 30, tzinfo=datetime.timezone.utc), 'commenter': 'timja', 'type': 'User'}, {'comment_id': 453189167, 'comment_body': 'Probably use configuration later, so is the configuration a responsibility for consumers instead of the API itself?\r\n\r\nBTW, what kind of tests we need here? Unit test (test the `ChecksDetails` constructed) or integration as well?', 'comment_created': datetime.datetime(2020, 7, 11, 12, 14, 58, tzinfo=datetime.timezone.utc), 'commenter': 'XiongKezhi', 'type': 'User'}, {'comment_id': 453191144, 'comment_body': 'Prefer using `labelProvider.getId()` since the doc uses ""code-coverage"" as an example.', 'comment_created': datetime.datetime(2020, 7, 11, 12, 38, 45, tzinfo=datetime.timezone.utc), 'commenter': 'XiongKezhi', 'type': 'User'}, {'comment_id': 453206206, 'comment_body': 'what doc? name is fine imo', 'comment_created': datetime.datetime(2020, 7, 11, 15, 34, 17, tzinfo=datetime.timezone.utc), 'commenter': 'timja', 'type': 'User'}, {'comment_id': 453206441, 'comment_body': 'the GitHub doc for check run: https://docs.github.com/en/rest/reference/checks#check-runs.', 'comment_created': datetime.datetime(2020, 7, 11, 15, 36, 43, tzinfo=datetime.timezone.utc), 'commenter': 'XiongKezhi', 'type': 'User'}, {'comment_id': 453207631, 'comment_body': ""from what I've seen elsewhere including the checks on this PR everyone else is putting human readable names there."", 'comment_created': datetime.datetime(2020, 7, 11, 15, 51, 21, tzinfo=datetime.timezone.utc), 'commenter': 'timja', 'type': 'User'}, {'comment_id': 453207780, 'comment_body': 'maybe use line 1?', 'comment_created': datetime.datetime(2020, 7, 11, 15, 53, 6, tzinfo=datetime.timezone.utc), 'commenter': 'timja', 'type': 'User'}, {'comment_id': 453208598, 'comment_body': ""I'll change it then"", 'comment_created': datetime.datetime(2020, 7, 11, 16, 1, 13, tzinfo=datetime.timezone.utc), 'commenter': 'XiongKezhi', 'type': 'User'}, {'comment_id': 453208862, 'comment_body': 'Anything else can we do here for `INACTIVE` quality gate?', 'comment_created': datetime.datetime(2020, 7, 11, 16, 4, 19, tzinfo=datetime.timezone.utc), 'commenter': 'XiongKezhi', 'type': 'User'}, {'comment_id': 453314560, 'comment_body': ""I have not met such warnings for the whole file, what kind of these warnings are? Shouldn't the biggest unit in a file for these static analysis tools is class instead of the whole file?"", 'comment_created': datetime.datetime(2020, 7, 12, 13, 8, 19, tzinfo=datetime.timezone.utc), 'commenter': 'XiongKezhi', 'type': 'User'}, {'comment_id': 453327588, 'comment_body': ""A search for `.hasLineStart(0)` in my test suite returns 77 matches 😄 So there are a lot of them. I don't know if that is useful though..."", 'comment_created': datetime.datetime(2020, 7, 12, 15, 3, 48, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 453328029, 'comment_body': ""I don't think so for the moment. If users want to fail a GitHub check because of some warnings but do not want to configure a quality gate in Jenkins then they need to open a feature request in the warnings plugin."", 'comment_created': datetime.datetime(2020, 7, 12, 15, 6, 39, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 453328758, 'comment_body': 'Yes, it makes sense that consumers may offer configuration properties for the Checks API. \r\n', 'comment_created': datetime.datetime(2020, 7, 12, 15, 12, 48, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 453328959, 'comment_body': ""For the tests: I don't think that we need integration tests. It is already kind of hard to test the API with GitHub so using the warnings plugin in these tests will make it even harder. But I think the class can be easily tested using a unit test. (And if not we can see this as a proof that the API might be changed a little bit to support testing)"", 'comment_created': datetime.datetime(2020, 7, 12, 15, 14, 52, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 453329462, 'comment_body': 'Agree on the unit-test. \r\n\r\nFor the configurations, I\'m implementing the ""disable checks publishing"" feature as a start, I\'ll push it later, then we can discuss more other configurations. ', 'comment_created': datetime.datetime(2020, 7, 12, 15, 18, 53, tzinfo=datetime.timezone.utc), 'commenter': 'XiongKezhi', 'type': 'User'}, {'comment_id': 453333421, 'comment_body': ""consumers responsibility, I would go with new only for now, it's simple to introduce a spotbugs / checkstyle error for demonstration purposes"", 'comment_created': datetime.datetime(2020, 7, 12, 15, 55, 46, tzinfo=datetime.timezone.utc), 'commenter': 'timja', 'type': 'User'}, {'comment_id': 453333658, 'comment_body': ""how about\r\n```suggestion\r\n     * Publishes checks to platforms. Afterwards, all warnings are available in corresponding platform's UI, e.g. GitHub checks.\r\n```"", 'comment_created': datetime.datetime(2020, 7, 12, 15, 58, 38, tzinfo=datetime.timezone.utc), 'commenter': 'timja', 'type': 'User'}, {'comment_id': 453347204, 'comment_body': 'Booleans should not include is at the start the getter will include that', 'comment_created': datetime.datetime(2020, 7, 12, 18, 17, 40, tzinfo=datetime.timezone.utc), 'commenter': 'timja', 'type': 'User'}, {'comment_id': 453347244, 'comment_body': 'Should be isChecksPublishingDisabled and the pmd disable removed ', 'comment_created': datetime.datetime(2020, 7, 12, 18, 18, 10, tzinfo=datetime.timezone.utc), 'commenter': 'timja', 'type': 'User'}, {'comment_id': 453348539, 'comment_body': 'I would probably call it publishChecks.', 'comment_created': datetime.datetime(2020, 7, 12, 18, 31, 11, tzinfo=datetime.timezone.utc), 'commenter': 'timja', 'type': 'User'}, {'comment_id': 453412483, 'comment_body': 'Just follows the similar options: https://github.com/jenkinsci/warnings-ng-plugin/blob/b2b19b29067e381c3e4902030e1e6123da8ee1c1/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesRecorder.java#L104\r\n\r\nIs this style used because the optional is used for disabling a feature? @uhafner ', 'comment_created': datetime.datetime(2020, 7, 13, 3, 11, 53, tzinfo=datetime.timezone.utc), 'commenter': 'XiongKezhi', 'type': 'User'}, {'comment_id': 454199959, 'comment_body': 'Note that using a positive setting and `true` as default will only work for new freestyle jobs. Existing jobs will not publish the results and need to be manually reconfigured. (This is no big thing, I just want to make sure that you are aware of this issue.) ', 'comment_created': datetime.datetime(2020, 7, 14, 8, 43, 50, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 454238945, 'comment_body': ""oh, I didn't aware that, maybe it's better to make it backward compatible."", 'comment_created': datetime.datetime(2020, 7, 14, 9, 51, 4, tzinfo=datetime.timezone.utc), 'commenter': 'XiongKezhi', 'type': 'User'}, {'comment_id': 454247919, 'comment_body': 'Should be fine...', 'comment_created': datetime.datetime(2020, 7, 14, 10, 7, 34, tzinfo=datetime.timezone.utc), 'commenter': 'timja', 'type': 'User'}, {'comment_id': 454335434, 'comment_body': 'This is not related to backward compatibility. The question is just if existing users (of Freestyle jobs!) should automatically use the GitHub checks or not. For me it is also ok that they need to manually enable.', 'comment_created': datetime.datetime(2020, 7, 14, 12, 56, 34, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 454986850, 'comment_body': 'Remove `//` comments. These comments typically get out of sync soon.', 'comment_created': datetime.datetime(2020, 7, 15, 11, 38, 59, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 454987405, 'comment_body': 'If you have 2 builds use a variable `reference` for the first one and `run` or `build` for the second one (to make it consistent to most of my other tests)', 'comment_created': datetime.datetime(2020, 7, 15, 11, 40, 6, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 454987655, 'comment_body': '```suggestion\r\n                        + ""- ### %d outstanding issues\\n""\r\n```', 'comment_created': datetime.datetime(2020, 7, 15, 11, 40, 38, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 454995680, 'comment_body': 'inline variable', 'comment_created': datetime.datetime(2020, 7, 15, 11, 56, 18, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 454995729, 'comment_body': 'inline', 'comment_created': datetime.datetime(2020, 7, 15, 11, 56, 25, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 454995914, 'comment_body': '```suggestion\r\n    private ChecksDetails createExpectedDetails() {\r\n```', 'comment_created': datetime.datetime(2020, 7, 15, 11, 56, 47, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 454996274, 'comment_body': 'Do you have an example output that shows how this is rendered?', 'comment_created': datetime.datetime(2020, 7, 15, 11, 57, 25, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 454997068, 'comment_body': 'What are the requirements on GitHub side for the resolution of the filenames? Do they want relative paths starting from the repository root?', 'comment_created': datetime.datetime(2020, 7, 15, 11, 58, 58, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 455029824, 'comment_body': 'No for this specific report :)\r\n\r\nI just copied the checkstyle.xml file from other test cases and constructed the annotation based on what the warnings publisher should do for it.', 'comment_created': datetime.datetime(2020, 7, 15, 12, 56, 50, tzinfo=datetime.timezone.utc), 'commenter': 'XiongKezhi', 'type': 'User'}, {'comment_id': 455031424, 'comment_body': ""Not officially documented by GitHub, but from what I have done, it's relative paths from the repository root."", 'comment_created': datetime.datetime(2020, 7, 15, 12, 59, 33, tzinfo=datetime.timezone.utc), 'commenter': 'XiongKezhi', 'type': 'User'}, {'comment_id': 455034482, 'comment_body': 'Ok, then using `getFileName` should work. (This is not always so easy since people sometimes design jobs using a complex directory layout. Then it is already hard for my plugin to refer to the correct source code location)', 'comment_created': datetime.datetime(2020, 7, 15, 13, 4, 42, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 455035484, 'comment_body': 'Ok, then I have to wait until I see it in action on my machine. I just wondered if `- ### ` is valid in markdown since the hashes are used for headers. ', 'comment_created': datetime.datetime(2020, 7, 15, 13, 6, 16, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 455036073, 'comment_body': 'Is there any specific reason that you sometimes use `*` and sometimes `-` for bullet points?\r\n', 'comment_created': datetime.datetime(2020, 7, 15, 13, 7, 13, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 455043570, 'comment_body': ""No, I just googled `- ###` because I want the bullet points with smaller text than `##`.\r\n\r\nThe markdown just don't have a unified standard, `- ###` is valid in GitHub but not valid in somewhere else (say the preview tool: https://markdownlivepreview.com/)\r\n\r\nTurns out `* ###` is supported by GitHub as well, just tried it. I'll make them consistent."", 'comment_created': datetime.datetime(2020, 7, 15, 13, 18, 12, tzinfo=datetime.timezone.utc), 'commenter': 'XiongKezhi', 'type': 'User'}, {'comment_id': 455128355, 'comment_body': '```suggestion\r\n                        .withAnnotations(extractChecksAnnotations(result.getNewIssues(), labelProvider))\r\n```', 'comment_created': datetime.datetime(2020, 7, 15, 15, 10, 50, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 455129146, 'comment_body': 'Then you get for CheckStyle, SpotBugs a detailed description as well:\r\n```suggestion\r\n                        .withRawDetails(labelProvider.getDescription(issue))\r\n```\r\nThis description will contain HTML tags...', 'comment_created': datetime.datetime(2020, 7, 15, 15, 12, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 455748258, 'comment_body': ""the GitHub just supports markdown (or HTML tag) on the summary and description of the whole output, but not for these specific annotations.\r\n\r\nI'll find a way to extract the plain text as the description (`message` field) and left the HTML in the `raw_details` field."", 'comment_created': datetime.datetime(2020, 7, 16, 12, 28, 23, tzinfo=datetime.timezone.utc), 'commenter': 'XiongKezhi', 'type': 'User'}, {'comment_id': 455752355, 'comment_body': 'Is the `getMessage` method in `Issue` just extract the message from the HTML? Then we do not need any further changes.', 'comment_created': datetime.datetime(2020, 7, 16, 12, 35, 52, tzinfo=datetime.timezone.utc), 'commenter': 'XiongKezhi', 'type': 'User'}, {'comment_id': 455781630, 'comment_body': 'The `message` in `Issue` returns the header of an issue. The `description` returns additional information for that issue (from the parsed content). And the `description` of the `labelProvider` does return a HTML description of the bug pattern for specific tools (CheckStyle, Spotbugs, PMD), from the tools website or jar file. This part is not in the parsed content. If that part is empty the `labelProvider` does return the `description` of the issue. So none of the methods removes the HTML. ', 'comment_created': datetime.datetime(2020, 7, 16, 13, 23, 10, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 457066689, 'comment_body': 'It would make the test more readable if you would also check the value of the quality gate via `getAnalysisResult()`. From the test one does not see that there are only 6 warnings in the build.', 'comment_created': datetime.datetime(2020, 7, 20, 5, 33, 57, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 457067229, 'comment_body': 'Can you wrap that part in a method and call it with `QualityGateResult.FAILURE` and `QualityGateResult.UNSTABLE`. Then we can see that both types correctly map to `ChecksConclusion.FAILURE`', 'comment_created': datetime.datetime(2020, 7, 20, 5, 35, 10, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 457079870, 'comment_body': ""Is the idea here to replace a `<a>` with plain text? Or shouldn't this be `[text](url)`?"", 'comment_created': datetime.datetime(2020, 7, 20, 6, 1, 16, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 457354037, 'comment_body': ""The message field doesn't support markdown"", 'comment_created': datetime.datetime(2020, 7, 20, 12, 51, 20, tzinfo=datetime.timezone.utc), 'commenter': 'XiongKezhi', 'type': 'User'}, {'comment_id': 461585805, 'comment_body': 'Is this version number ok? Some incompatible changes (new property for the pipeline script) added.', 'comment_created': datetime.datetime(2020, 7, 28, 13, 37, 45, tzinfo=datetime.timezone.utc), 'commenter': 'XiongKezhi', 'type': 'User'}, {'comment_id': 461589870, 'comment_body': ""don't worry about the version it will be set during release\r\n\r\n```suggestion\r\n    <revision>8.4.0</revision>\r\n```"", 'comment_created': datetime.datetime(2020, 7, 28, 13, 43, 15, tzinfo=datetime.timezone.utc), 'commenter': 'timja', 'type': 'User'}, {'comment_id': 461616194, 'comment_body': 'but it will always fail CI which is annoying for development before the release', 'comment_created': datetime.datetime(2020, 7, 28, 14, 16, 24, tzinfo=datetime.timezone.utc), 'commenter': 'XiongKezhi', 'type': 'User'}, {'comment_id': 461628590, 'comment_body': 'why does it fail CI?', 'comment_created': datetime.datetime(2020, 7, 28, 14, 32, 17, tzinfo=datetime.timezone.utc), 'commenter': 'timja', 'type': 'User'}, {'comment_id': 461631416, 'comment_body': 'since it breaks the semantic versioning:\r\n\r\n```\r\n[ERROR] Failed to execute goal org.revapi:revapi-maven-plugin:0.11.4:check (run-revapi) on project warnings-ng: The following API problems caused the build to fail:\r\n[ERROR] java.field.serialVersionUIDChanged: field io.jenkins.plugins.analysis.core.steps.PublishIssuesStep.serialVersionUID: serialVersionUID constant changed. Objects serialized using the old version of the class will no longer be deserializable. (breaks semantic versioning)\r\n[ERROR] java.field.serialVersionUIDChanged: field io.jenkins.plugins.analysis.core.steps.RecordIssuesStep.serialVersionUID: serialVersionUID constant changed. Objects serialized using the old version of the class will no longer be deserializable. (breaks semantic versioning)\r\n```', 'comment_created': datetime.datetime(2020, 7, 28, 14, 35, 41, tzinfo=datetime.timezone.utc), 'commenter': 'XiongKezhi', 'type': 'User'}, {'comment_id': 461636797, 'comment_body': 'Ah ok', 'comment_created': datetime.datetime(2020, 7, 28, 14, 42, 11, tzinfo=datetime.timezone.utc), 'commenter': 'timja', 'type': 'User'}]","[{'commit_sha': '84bd84b6519a5f2fca0c506bfafcf0e895e14571', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a237d0043011bb986f232e5838801b16d52fc2f9', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e1e25913aab0f15f972cf8605ec7b610675f6c5', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b98237755af8d1d1861f2bda6efeb6c637ea0761', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2f36d693948c4c3d45310d5cc677cc202c0efe4c', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02e3a70424737b979403d797e661826008de4f75', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff0cb0c740f3ade13b7d0b146225b377f6b76a46', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4230adf53d5dcd2d3710375d349969e90f6d427f', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '31db276268701389a46434cbf266a858b4b2caca', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12726c3fafc429f0bda3ecc96c9469367367434f', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8081ee558f1bab5578a0be8487ac239df741d9e', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c4883a1a12aa17d9be8cd7b88101bb80032ae6d', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '108e9c8beed839d3136acb8b12d3cb7faf4f37d7', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64335cd8c8384c2a535d9499bc8e51c8683048a4', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d8acf4851163ea9fac22cdb1aca5270c607c8cd', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '171778206d877605c26ff6ceeab862412e487a14', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '52bf01bdaa523940c1c9ff456b4c3cbe2a1e4209', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '91975e787406b013eb2133b223b5c5db4c9819a3', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd46852b45cfd8e4b2b122d8b92d6968a696affc', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af01e607274011e50e53192a89593244984d5ca0', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff27c99551e681198ead36d8e8884e779dc63337', 'committer_username': 'uhafner', 'committer_name': 'Ullrich Hafner', 'committer_email': None, 'commit_date': datetime.datetime(2010, 11, 30, 12, 54, 6, tzinfo=datetime.timezone.utc)}]",Kezhi Xiong,30348893,august.xkz@gmail.com,User,,43,,36,26
453073313,Integrate with Checks Api - Allows publishing coverage to GitHub checks,"Example: https://github.com/XiongKezhi/codingstyle/pull/3/checks?check_run_id=888545163
- [x] Publish coverage as checks
- [x] Add tests
- [x] Add health report
- [x] Add configurations
- [x] ...",True,169,https://api.github.com/repos/jenkinsci/code-coverage-api-plugin/pulls/169,https://github.com/jenkinsci/code-coverage-api-plugin/pull/169,closed,573,5,6,20,4,37,1,0,[{'name': 'enhancement'}],2020-07-20 05:30:42+00:00,2020-08-04 14:55:09+00:00,1329867.0,"15 days, 9:24:27","[{'comment_id': 457114143, 'comment_body': 'not sure which field it is as they have the same text currently but can a summary go on the check status on the right hand side\r\n\r\n![image](https://user-images.githubusercontent.com/21194782/87909135-8e84e780-ca5f-11ea-938e-1e1e3cfbfd24.png)\r\n', 'comment_created': datetime.datetime(2020, 7, 20, 7, 4, 10, tzinfo=datetime.timezone.utc), 'commenter': 'timja', 'type': 'User'}, {'comment_id': 457115334, 'comment_body': ""consider putting this at the start of the line so that the emoji's are all aligned"", 'comment_created': datetime.datetime(2020, 7, 20, 7, 6, 2, tzinfo=datetime.timezone.utc), 'commenter': 'timja', 'type': 'User'}, {'comment_id': 457115704, 'comment_body': 'coverage is normally summarised as a percentage, not out of the number of lines covered', 'comment_created': datetime.datetime(2020, 7, 20, 7, 6, 36, tzinfo=datetime.timezone.utc), 'commenter': 'timja', 'type': 'User'}, {'comment_id': 457116017, 'comment_body': 'seems irrelevant to the user', 'comment_created': datetime.datetime(2020, 7, 20, 7, 7, 6, tzinfo=datetime.timezone.utc), 'commenter': 'timja', 'type': 'User'}, {'comment_id': 457116826, 'comment_body': 'use the jenkins bom instead of choosing all these versions directly\r\n\r\nhttps://github.com/jenkinsci/bom\r\n\r\nyou could introduce it in a separate PR to reduce the diff here as well', 'comment_created': datetime.datetime(2020, 7, 20, 7, 8, 30, tzinfo=datetime.timezone.utc), 'commenter': 'timja', 'type': 'User'}, {'comment_id': 457117212, 'comment_body': ""shouldn't be needed,\r\n\r\nrun:\r\n`mvn incrementals:incrementalify`\r\n\r\nhttps://github.com/jenkinsci/incrementals-tools"", 'comment_created': datetime.datetime(2020, 7, 20, 7, 9, 9, tzinfo=datetime.timezone.utc), 'commenter': 'timja', 'type': 'User'}, {'comment_id': 457117447, 'comment_body': '```suggestion\r\n        <version>4.3</version>\r\n```', 'comment_created': datetime.datetime(2020, 7, 20, 7, 9, 32, tzinfo=datetime.timezone.utc), 'commenter': 'timja', 'type': 'User'}, {'comment_id': 457973547, 'comment_body': ""`title` field in the `output` object. Then I'll change that part in warnings checks as well."", 'comment_created': datetime.datetime(2020, 7, 21, 9, 47, 45, tzinfo=datetime.timezone.utc), 'commenter': 'XiongKezhi', 'type': 'User'}, {'comment_id': 457991295, 'comment_body': 'take a look at this plugin: https://github.com/jenkinsci/github-coverage-reporter-plugin', 'comment_created': datetime.datetime(2020, 7, 21, 10, 19, 23, tzinfo=datetime.timezone.utc), 'commenter': 'timja', 'type': 'User'}, {'comment_id': 458320824, 'comment_body': ""Can this ever return null? If so, you don't want to do line 25"", 'comment_created': datetime.datetime(2020, 7, 21, 18, 59, 2, tzinfo=datetime.timezone.utc), 'commenter': 'jeffpearce', 'type': 'User'}, {'comment_id': 458322858, 'comment_body': ""Oh, I see. It returns a `NullChecksPublisher` if it can't find one"", 'comment_created': datetime.datetime(2020, 7, 21, 19, 2, 43, tzinfo=datetime.timezone.utc), 'commenter': 'jeffpearce', 'type': 'User'}, {'comment_id': 458589016, 'comment_body': 'I would prefer to see line and branch coverage in the title.', 'comment_created': datetime.datetime(2020, 7, 22, 7, 26, 30, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 458590566, 'comment_body': 'I wonder if it would make sense to separate the total report and the delta report? Maybe we can discuss that topic in our meeting today. This question is also relevant for the analysis report (new and total warnings).', 'comment_created': datetime.datetime(2020, 7, 22, 7, 29, 20, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 458591510, 'comment_body': 'Move inside the `try` then `action = null` and the `if` is not required at all.', 'comment_created': datetime.datetime(2020, 7, 22, 7, 30, 58, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 458593037, 'comment_body': 'This looks somewhat strange (but this is from the existing code). When does the report \r\n- return `null`\r\n- throw an `CoverageException`', 'comment_created': datetime.datetime(2020, 7, 22, 7, 33, 54, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 458597813, 'comment_body': ""Wouldn't it be simpler to have a table with two rows (titles and values) that contains a column for each type? Then it would not occupy so much place."", 'comment_created': datetime.datetime(2020, 7, 22, 7, 42, 54, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 458601770, 'comment_body': ""What is the default sorting? It looks ok in the PR results but I'm not sure if this is just some coincidence. "", 'comment_created': datetime.datetime(2020, 7, 22, 7, 49, 48, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 458602206, 'comment_body': 'The coverage report also has a quality gate that we should check.', 'comment_created': datetime.datetime(2020, 7, 22, 7, 50, 28, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 458603295, 'comment_body': '(*Conditional* actually is the wrong name, but this is something that needs to be changed in the coverage API and not in your PR)', 'comment_created': datetime.datetime(2020, 7, 22, 7, 52, 15, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 459839152, 'comment_body': 'but our plugin is currently not released, so we need this to download the checks dependencies', 'comment_created': datetime.datetime(2020, 7, 24, 3, 46, 43, tzinfo=datetime.timezone.utc), 'commenter': 'XiongKezhi', 'type': 'User'}, {'comment_id': 459874097, 'comment_body': 'That’s automatically added by the maven profile that incrementals adds behind the scenes', 'comment_created': datetime.datetime(2020, 7, 24, 6, 32, 35, tzinfo=datetime.timezone.utc), 'commenter': 'timja', 'type': 'User'}, {'comment_id': 460170238, 'comment_body': 'Done, see: https://github.com/XiongKezhi/codingstyle/pull/3/checks?check_run_id=907434646', 'comment_created': datetime.datetime(2020, 7, 24, 16, 48, 5, tzinfo=datetime.timezone.utc), 'commenter': 'XiongKezhi', 'type': 'User'}, {'comment_id': 460171261, 'comment_body': 'I refactored my code, see field `COVERAGE_TYPES` in `CoverageChecksPublisher`, so I think the default sorting order is no longer a problem for us.', 'comment_created': datetime.datetime(2020, 7, 24, 16, 50, 1, tzinfo=datetime.timezone.utc), 'commenter': 'XiongKezhi', 'type': 'User'}, {'comment_id': 460212235, 'comment_body': 'release this?', 'comment_created': datetime.datetime(2020, 7, 24, 18, 12, 37, tzinfo=datetime.timezone.utc), 'commenter': 'timja', 'type': 'User'}, {'comment_id': 460360155, 'comment_body': 'the table format: https://github.com/XiongKezhi/codingstyle/pull/3/checks?check_run_id=907434646', 'comment_created': datetime.datetime(2020, 7, 25, 3, 50, 17, tzinfo=datetime.timezone.utc), 'commenter': 'XiongKezhi', 'type': 'User'}, {'comment_id': 460360767, 'comment_body': ""I just tried to keep the `try-catch` section as small as possible for easier exception locating, so isn't this a concern?"", 'comment_created': datetime.datetime(2020, 7, 25, 3, 59, 21, tzinfo=datetime.timezone.utc), 'commenter': 'XiongKezhi', 'type': 'User'}, {'comment_id': 460364585, 'comment_body': 'I refactored my code to get `CoverageAction` directly from `run` instead of changing this `CoverageProcessor`.', 'comment_created': datetime.datetime(2020, 7, 25, 4, 45, 39, tzinfo=datetime.timezone.utc), 'commenter': 'XiongKezhi', 'type': 'User'}, {'comment_id': 460410153, 'comment_body': ""I would remove this line, it's obvious you're talking about coverage and github is truncating it in the UI\r\n```suggestion\r\n```"", 'comment_created': datetime.datetime(2020, 7, 25, 14, 29, 23, tzinfo=datetime.timezone.utc), 'commenter': 'timja', 'type': 'User'}, {'comment_id': 460413015, 'comment_body': 'more trimming\r\n```suggestion\r\n            lineTitle = extractChecksTitle(""Line"", ""target branch"", lineCoverage,\r\n```', 'comment_created': datetime.datetime(2020, 7, 25, 15, 0, 13, tzinfo=datetime.timezone.utc), 'commenter': 'timja', 'type': 'User'}, {'comment_id': 460506524, 'comment_body': 'Don’t we want to default to publishing? Change to skipPublishingChecks?', 'comment_created': datetime.datetime(2020, 7, 26, 10, 0, 1, tzinfo=datetime.timezone.utc), 'commenter': 'timja', 'type': 'User'}, {'comment_id': 460507280, 'comment_body': ""either is ok, I'll change it"", 'comment_created': datetime.datetime(2020, 7, 26, 10, 8, 31, tzinfo=datetime.timezone.utc), 'commenter': 'XiongKezhi', 'type': 'User'}, {'comment_id': 460627355, 'comment_body': ""I'm ready to release it now, but we may need to refactor some part since we have to publish checks for  `Queue.WaitingItem` instead of `Run` for `queued` state, is that ok? (I believe nothing changes in the consumer side after the that)"", 'comment_created': datetime.datetime(2020, 7, 27, 3, 25, 5, tzinfo=datetime.timezone.utc), 'commenter': 'XiongKezhi', 'type': 'User'}, {'comment_id': 460698770, 'comment_body': 'Would it then make sense to use the same name in the warnings plugin as well? This will help users to write their pipeline scripts.', 'comment_created': datetime.datetime(2020, 7, 27, 7, 33, 36, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 462077585, 'comment_body': 'can you fix this please?', 'comment_created': datetime.datetime(2020, 7, 29, 6, 53, 34, tzinfo=datetime.timezone.utc), 'commenter': 'timja', 'type': 'User'}, {'comment_id': 462140255, 'comment_body': 'ok, done now.', 'comment_created': datetime.datetime(2020, 7, 29, 8, 47, 29, tzinfo=datetime.timezone.utc), 'commenter': 'XiongKezhi', 'type': 'User'}, {'comment_id': 462265372, 'comment_body': ""what's this for?"", 'comment_created': datetime.datetime(2020, 7, 29, 12, 38, 5, tzinfo=datetime.timezone.utc), 'commenter': 'timja', 'type': 'User'}, {'comment_id': 462275702, 'comment_body': 'oops, unused import...', 'comment_created': datetime.datetime(2020, 7, 29, 12, 55, 39, tzinfo=datetime.timezone.utc), 'commenter': 'XiongKezhi', 'type': 'User'}]","[{'commit_sha': '5151596197dc4eb00762466dcd13afaf428eacc7', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44a9d37bcd194200d420922d8c3eb13839abc02f', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '518553a66e042871578cd984b3bb2ecc8b4f94fd', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7eece865ec13ccefd117d612286ec99851cce3d', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc7380f2bb1a63b18f940b4a598ca4efd276d10d', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e132dbaad6bd88e39c00c27c48827a836796c85', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0dc4fd07669276ece146bd1dccd69c7673ed1d1c', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'efefb2198a682529952ae6df98a8b838b99f9616', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e93bd360ca9aa6bb21681b9e8268d148b50e39aa', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42e525cef8f80103f6dc63002d8304e641fff273', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a9c1b7d4461cee42da99d9644bfacede8518887', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9009e8e0110813f1e1b63a4e6942491a6626b8e5', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5128e44525921e621081267ac0eb6c38878298a', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c04d09b5b8a5b66ef63277b6b91765e8acc1aa5', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b547fb11168b27bf2f046ea139a450f5f65c2a2b', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dafdf86a64fff1d52956e54b8e6feba94cf49b14', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51b1d245f459543ee77269cbff245d0a833bb3ec', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f99c04532b0662acafdb87eb7c0f77b233dc169', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af687f7c468e7f0214b0a948cf15db7e855d28cd', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c6bb16372c1e75531a3ea1c6cb2fc702c783881c', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}]",Kezhi Xiong,30348893,august.xkz@gmail.com,User,,43,,36,26
463498125,Add pipeline support,"Target pipeline:
```
publishChecks(
    name: ""check"", 
    detailsURL: ""ci.jenkins.io"", 
    status: ""COMPLETED"",
    conclusion: ""SUCCESS"",
    output: [
        title: ""output"",
        summary: ""summary"",
        text: ""text"",
        annotations: [
            [path: ""src/main/foo.java"", startLine: 0, endLine: 0, annotationLevel: ""WARNING"", message: ""foo test""],
            [path: ""src/main/bar.java"", startLine: 1, endLine: 1, annotationLevel: ""WARNING"", message: ""bar test""]
        ],
        images: [
            [alt: ""foo alt"", imageUrl: ""foo url"", caption: ""foo image""],    
            [alt: ""foo alt"", imageUrl: ""foo url"", caption: ""foo image""]
        ]
    ],
    actions: [
        [label: ""foo label"", description: ""foo action"", identifier: ""foo identifier""],
        [label: ""bar label"", description: ""bar action"", identifier: ""bar identifier""]
    ]
)

```

- [x] Implement publish checks step
- [x] Add tests",True,7,https://api.github.com/repos/jenkinsci/checks-api-plugin/pulls/7,https://github.com/jenkinsci/checks-api-plugin/pull/7,closed,462,16,20,22,11,13,1,1,[{'name': 'enhancement'}],2020-08-05 16:17:04+00:00,2020-08-25 07:50:36+00:00,1697612.0,"19 days, 15:33:32","[{'comment_id': 466524634, 'comment_body': ""Is it worth separating our pipeline models from our API models?\r\n\r\nSo that they don't get polluted with all the setters etc required by stapler?"", 'comment_created': datetime.datetime(2020, 8, 6, 16, 9, 57, tzinfo=datetime.timezone.utc), 'commenter': 'timja', 'type': 'User'}, {'comment_id': 466527508, 'comment_body': 'I really think we should flatten this down so that users don\'t have to do:\r\n\r\n```\r\npublishChecks(\r\n    name: ""check"", \r\n    detailsURL: ""ci.jenkins.io"", \r\n    status: ""COMPLETED"",\r\n    conclusion: ""SUCCESS"",\r\n    output: [\r\n        title: ""output"",\r\n        summary: ""summary"",\r\n        text: ""text"",\r\n        annotations: [\r\n            [path: ""src/main/foo.java"", startLine: 0, endLine: 0, annotationLevel: ""WARNING"", message: ""foo test""],\r\n            [path: ""src/main/bar.java"", startLine: 1, endLine: 1, annotationLevel: ""WARNING"", message: ""bar test""]\r\n        ],\r\n        images: [\r\n            [alt: ""foo alt"", imageUrl: ""foo url"", caption: ""foo image""],    \r\n            [alt: ""foo alt"", imageUrl: ""foo url"", caption: ""foo image""]\r\n        ]\r\n    ],\r\n)\r\n```\r\n\r\n\r\ninstead a simple usage would be;\r\n\r\n```\r\npublishChecks(\r\n  name: ""MyCheck"",\r\n  conclusion: ""success"",\r\n  summary: ""Everything is OK!""\r\n)\r\n```\r\n\r\ni.e. it would be good to start from a users perspective, and look at some scenarios of what they want to use it for.\r\n\r\nMost users probably won\'t user annotations / images\r\nThey will just want to set a status, with some messaging I would expect\r\n\r\n', 'comment_created': datetime.datetime(2020, 8, 6, 16, 14, 33, tzinfo=datetime.timezone.utc), 'commenter': 'timja', 'type': 'User'}, {'comment_id': 466534840, 'comment_body': ""yeah, I didn't consider the user scenarios and afraid too many fields will explode this class, so just flattened the first level checks `ChecksDetails`. \r\n\r\nAfter your example, one pipeline usage I can come up with now is that users may want to publish checks to more precisely indicate the stages (especially for their customized ones). "", 'comment_created': datetime.datetime(2020, 8, 6, 16, 27, 2, tzinfo=datetime.timezone.utc), 'commenter': 'XiongKezhi', 'type': 'User'}, {'comment_id': 467571605, 'comment_body': ""Shouldn't this be `detailsUrl`? (If not make sure that `imageUrl` will use the same capitalization)"", 'comment_created': datetime.datetime(2020, 8, 9, 11, 25, 42, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 472513156, 'comment_body': 'I think it would make sense to add `config.jelly` and `*-help.html` files for the fields (you already have the text in the JavaDoc of the `ChecksOutput` classes). Then the online documentation (Snippet Generator and [Online Reference](https://www.jenkins.io/doc/pipeline/steps/)) has some more details. You can open the Snippet Generator using the ""Pipeline Syntax"" link on a job page.', 'comment_created': datetime.datetime(2020, 8, 18, 21, 49, 45, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 472514590, 'comment_body': 'The text is shown in the Snippet Generator and [Online Reference](https://www.jenkins.io/doc/pipeline/steps/warnings-ng/) (and should be part of Messages)', 'comment_created': datetime.datetime(2020, 8, 18, 21, 53, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 472516255, 'comment_body': 'Is there an exception thrown? Then make it specific.', 'comment_created': datetime.datetime(2020, 8, 18, 21, 56, 56, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 472520167, 'comment_body': '```suggestion\r\n        assertThat(descriptor.getRequiredContext().toArray())\r\n                .contains(Run.class, TaskListener.class);\r\n```', 'comment_created': datetime.datetime(2020, 8, 18, 22, 6, 19, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 475495525, 'comment_body': 'Extract to a method `asDisplayName` or something similar and reuse in line 154.', 'comment_created': datetime.datetime(2020, 8, 24, 10, 18, 47, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 475502059, 'comment_body': '(Or extract the whole loop as method that accepts any enum)', 'comment_created': datetime.datetime(2020, 8, 24, 10, 27, 51, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 475507487, 'comment_body': 'Optional (since we have no I18n yet in the whole project): it would make sense to create a `Messages.properties` file and add all UI labels (example: https://github.com/jenkinsci/forensics-api-plugin/blob/master/src/main/resources/io/jenkins/plugins/forensics/miner/Messages.properties). Then you can replace these strings with the constant in the generated `Messages` class (example: https://github.com/jenkinsci/forensics-api-plugin/blob/master/src/main/java/io/jenkins/plugins/forensics/miner/ForensicsJobAction.java#L34). \r\n\r\nBut we can postpone that part to the after GSoC work.', 'comment_created': datetime.datetime(2020, 8, 24, 10, 33, 39, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 475509876, 'comment_body': ""Shouldn't this file be named `help-conclusion.html`?"", 'comment_created': datetime.datetime(2020, 8, 24, 10, 38, 5, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}, {'comment_id': 475509946, 'comment_body': ""Shouldn't this file be named `help-status`?"", 'comment_created': datetime.datetime(2020, 8, 24, 10, 38, 16, tzinfo=datetime.timezone.utc), 'commenter': 'uhafner', 'type': 'User'}]","[{'commit_sha': '4554ac687685d17bc1c6261cb410916cfc958637', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4021e61a5ab3d1794d2c8e13086e44a13d7c3c93', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da26987f7e164c24f98cdb598cbd3ed021ffca6d', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '143d3fe3fc7884f462d41474df73a35b559b7474', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '30bf5f4b42bdaffc9b774b4aeb55ef610fa99709', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61c0c048d2b7b118514b706c2bd95e774457f5ac', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3dfead120c0f2172188f8d6d560413015749549e', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10181d3073055e811051e7233dc1f93e6ec637ae', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df506b4aa6ba640c98f5aca7814e02245475076a', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef35458b3aa7af98b130fddd47647f6fd833aefb', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2104d5bd953c197d220bf3e06f054f87d0886d5', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd2d77da26859149ea41fd72a7d23fa57662c8ca3', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '32c685fc2acbde08af1ebb4c0eed1365a08f11fb', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72b71edfce0863b1a5ec1bf5bda8fa825578cea8', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '863ad53ebaf16504a8a110808e92f42db50f0758', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b40659a23d88975f6cba6f8445ccde1c195db9a', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe6a4e8679b52765e88dad2983ec1c288c24fb31', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6df75980b28de1c506df4d91b971f5f1d78c5ea2', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c2643e4ce388abac856b7dfb077e3a3f7e4f7653', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '463e1c1fa939882aa4770697f898c85e53caf913', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f981ea8225c268200a06739f762f414059e73140', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16a3d3ff6dcd0e714e5ef69913aa273766f81ef6', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}]",Kezhi Xiong,30348893,august.xkz@gmail.com,User,,43,,36,26
467503511,Add subscriber for check run event in order to handle rerun request,"For the request payload example, see https://github.com/jenkinsci/github-checks-plugin/blob/8273ee1bc151e0b1b94bfa9a5a9d8e88c3e29b7f/src/test/resources/io/jenkins/plugins/checks/github/CheckRunGHEventSubscriberTest/check-run-event-with-rerun-action.json",True,25,https://api.github.com/repos/jenkinsci/github-checks-plugin/pulls/25,https://github.com/jenkinsci/github-checks-plugin/pull/25,closed,1239,0,6,14,3,6,1,0,[{'name': 'enhancement'}],2020-08-13 16:39:16+00:00,2020-09-02 14:10:04+00:00,1719048.0,"19 days, 21:30:48","[{'comment_id': 470677457, 'comment_body': ""ouch this seems like an expensive way of doing it, but I guess there's no better way"", 'comment_created': datetime.datetime(2020, 8, 14, 14, 57, 50, tzinfo=datetime.timezone.utc), 'commenter': 'timja', 'type': 'User'}, {'comment_id': 470678163, 'comment_body': 'so do we need this method? seems like it should be available?', 'comment_created': datetime.datetime(2020, 8, 14, 14, 59, 1, tzinfo=datetime.timezone.utc), 'commenter': 'timja', 'type': 'User'}, {'comment_id': 470711713, 'comment_body': 'yes, the plugins I saw are doing this way, iterating all the jobs...', 'comment_created': datetime.datetime(2020, 8, 14, 15, 55, 47, tzinfo=datetime.timezone.utc), 'commenter': 'XiongKezhi', 'type': 'User'}, {'comment_id': 470714602, 'comment_body': ""this method is available, but using the object from github-api is better since we don't have to parse the json again, and more safe.\r\n\r\nthe github-api has released 1.116, may just need to wait two or three days, the github-api-plugin will follow up"", 'comment_created': datetime.datetime(2020, 8, 14, 16, 1, 13, tzinfo=datetime.timezone.utc), 'commenter': 'XiongKezhi', 'type': 'User'}, {'comment_id': 470732652, 'comment_body': 'kk', 'comment_created': datetime.datetime(2020, 8, 14, 16, 36, 52, tzinfo=datetime.timezone.utc), 'commenter': 'timja', 'type': 'User'}, {'comment_id': 471072214, 'comment_body': 'I don’t think we want this tbh, I would just rerun the last build otherwise it will likely confuse users ', 'comment_created': datetime.datetime(2020, 8, 16, 6, 25, 19, tzinfo=datetime.timezone.utc), 'commenter': 'timja', 'type': 'User'}]","[{'commit_sha': 'f9f14a3622939cb38b9d469e8fe470fbe2c17f82', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f7bbd6070c8a15b3bb5ae5f4dbd9e3297da82f79', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8273ee1bc151e0b1b94bfa9a5a9d8e88c3e29b7f', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a570c0cc34095e402d389165cde0786d8506d0f', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a2bca5dc29f49fb694e66d18ea9fb7c1c514314', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a745f896cff17542ea9f31218e136c54d8171b58', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5360d5b8b3c7f8f2af7b274172ce14fc97874e21', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07241e1a92219020ed7e9444366138d869a409e2', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6942cb0fd53f11083fe8e56f273eac1f5f9743f1', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea060be67dad522ab6c31444fc4274955ac6e918', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd1e33d4f1584460637a943d5f4fc765073e5223', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d37ad1f23f2559038879f26efe25c6b803370eb', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b7883f0d75cc6c843c43abe80d1bc29cf0ec506', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5eca6310e08d339b8d02d71cbf6792357f7c286e', 'committer_username': 'XiongKezhi', 'committer_name': 'Kezhi Xiong', 'committer_email': 'august.xkz@gmail.com', 'commit_date': datetime.datetime(2017, 7, 21, 14, 29, 3, tzinfo=datetime.timezone.utc)}]",Kezhi Xiong,30348893,august.xkz@gmail.com,User,,43,,36,26

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
152814648,warnings-ng-plugin,jenkinsci/warnings-ng-plugin,Java,273,334,17,284,9244,8,11,8,"[{'id': 475348688, 'number': 602, 'closed': datetime.datetime(2020, 8, 29, 8, 53, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 28, 11, 24, 3, tzinfo=datetime.timezone.utc), 'time_taken': 77368.0, 'time_delta': '21:29:28', 'additions': 27, 'deletions': 0, 'state': 'closed'}, {'id': 464588493, 'number': 573, 'closed': datetime.datetime(2020, 8, 9, 13, 8, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 7, 12, 53, 41, tzinfo=datetime.timezone.utc), 'time_taken': 173707.0, 'time_delta': '2 days, 0:15:07', 'additions': 56, 'deletions': 14, 'state': 'closed'}, {'id': 462847526, 'number': 568, 'closed': datetime.datetime(2020, 8, 9, 21, 37, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 4, 15, 39, 39, tzinfo=datetime.timezone.utc), 'time_taken': 453442.0, 'time_delta': '5 days, 5:57:22', 'additions': 20, 'deletions': 12, 'state': 'closed'}, {'id': 447508848, 'number': 550, 'closed': datetime.datetime(2020, 7, 28, 23, 11, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 10, 15, 38, 11, tzinfo=datetime.timezone.utc), 'time_taken': 1582405.0, 'time_delta': '18 days, 7:33:25', 'additions': 692, 'deletions': 34, 'state': 'closed'}, {'id': 382415234, 'number': 414, 'closed': datetime.datetime(2020, 3, 5, 19, 35, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 2, 14, 28, 23, tzinfo=datetime.timezone.utc), 'time_taken': 277621.0, 'time_delta': '3 days, 5:07:01', 'additions': 118, 'deletions': 38, 'state': 'closed'}, {'id': 378123518, 'number': 389, 'closed': datetime.datetime(2020, 2, 23, 10, 42, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 21, 6, 23, 52, tzinfo=datetime.timezone.utc), 'time_taken': 188327.0, 'time_delta': '2 days, 4:18:47', 'additions': 63, 'deletions': 6, 'state': 'closed'}, {'id': 375790883, 'number': 379, 'closed': datetime.datetime(2020, 2, 17, 8, 47, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 16, 5, 51, 55, tzinfo=datetime.timezone.utc), 'time_taken': 96931.0, 'time_delta': '1 day, 2:55:31', 'additions': 42, 'deletions': 0, 'state': 'closed'}]"
131619335,code-coverage-api-plugin,jenkinsci/code-coverage-api-plugin,Java,77,111,13,50,1993,13,3,1,"[{'id': 453073313, 'number': 169, 'closed': datetime.datetime(2020, 8, 4, 14, 55, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 20, 5, 30, 42, tzinfo=datetime.timezone.utc), 'time_taken': 1329867.0, 'time_delta': '15 days, 9:24:27', 'additions': 573, 'deletions': 5, 'state': 'closed'}]"
281973921,checks-api-plugin,jenkinsci/checks-api-plugin,Java,28,41,11,18,353,15,2,2,"[{'id': 666718554, 'number': 115, 'closed': None, 'created': datetime.datetime(2021, 6, 10, 9, 49, 13, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 61, 'deletions': 20, 'state': 'open'}, {'id': 666469942, 'number': 114, 'closed': datetime.datetime(2021, 6, 10, 6, 51, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 10, 3, 40, 36, tzinfo=datetime.timezone.utc), 'time_taken': 11465.0, 'time_delta': '3:11:05', 'additions': 22, 'deletions': 29, 'state': 'closed'}, {'id': 578471168, 'number': 87, 'closed': datetime.datetime(2021, 2, 28, 5, 38, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 23, 13, 59, 58, tzinfo=datetime.timezone.utc), 'time_taken': 401919.0, 'time_delta': '4 days, 15:38:39', 'additions': 358, 'deletions': 15, 'state': 'closed'}, {'id': 578201570, 'number': 86, 'closed': datetime.datetime(2021, 2, 23, 7, 36, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 23, 6, 50, 50, tzinfo=datetime.timezone.utc), 'time_taken': 2752.0, 'time_delta': '0:45:52', 'additions': 19, 'deletions': 18, 'state': 'closed'}, {'id': 574170746, 'number': 85, 'closed': datetime.datetime(2021, 2, 21, 13, 15, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 16, 12, 48, 9, tzinfo=datetime.timezone.utc), 'time_taken': 433627.0, 'time_delta': '5 days, 0:27:07', 'additions': 175, 'deletions': 34, 'state': 'closed'}, {'id': 569321588, 'number': 78, 'closed': datetime.datetime(2021, 2, 8, 10, 19, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 8, 9, 40, 7, tzinfo=datetime.timezone.utc), 'time_taken': 2378.0, 'time_delta': '0:39:38', 'additions': 19, 'deletions': 2, 'state': 'closed'}, {'id': 568929011, 'number': 77, 'closed': datetime.datetime(2021, 2, 7, 8, 13, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 7, 7, 42, 59, tzinfo=datetime.timezone.utc), 'time_taken': 1833.0, 'time_delta': '0:30:33', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 544160750, 'number': 62, 'closed': datetime.datetime(2020, 12, 22, 15, 47, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 12, 22, 14, 32, 37, tzinfo=datetime.timezone.utc), 'time_taken': 4517.0, 'time_delta': '1:15:17', 'additions': 5, 'deletions': 1, 'state': 'closed'}, {'id': 544133069, 'number': 61, 'closed': datetime.datetime(2020, 12, 22, 15, 51, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 12, 22, 13, 45, 10, tzinfo=datetime.timezone.utc), 'time_taken': 7594.0, 'time_delta': '2:06:34', 'additions': 2, 'deletions': 0, 'state': 'closed'}, {'id': 544019057, 'number': 59, 'closed': datetime.datetime(2020, 12, 23, 2, 21, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 12, 22, 10, 16, 11, tzinfo=datetime.timezone.utc), 'time_taken': 57943.0, 'time_delta': '16:05:43', 'additions': 229, 'deletions': 0, 'state': 'closed'}, {'id': 543839571, 'number': 58, 'closed': datetime.datetime(2020, 12, 22, 13, 6, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 12, 22, 3, 18, 34, tzinfo=datetime.timezone.utc), 'time_taken': 35247.0, 'time_delta': '9:47:27', 'additions': 5, 'deletions': 5, 'state': 'closed'}, {'id': 538014669, 'number': 52, 'closed': datetime.datetime(2020, 12, 21, 7, 40, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 12, 12, 11, 7, 38, tzinfo=datetime.timezone.utc), 'time_taken': 765197.0, 'time_delta': '8 days, 20:33:17', 'additions': 110, 'deletions': 33, 'state': 'closed'}, {'id': 529102690, 'number': 49, 'closed': datetime.datetime(2020, 12, 20, 6, 25, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 11, 29, 12, 36, 45, tzinfo=datetime.timezone.utc), 'time_taken': 1792134.0, 'time_delta': '20 days, 17:48:54', 'additions': 405, 'deletions': 3, 'state': 'closed'}, {'id': 499835003, 'number': 31, 'closed': datetime.datetime(2020, 10, 25, 16, 16, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 8, 10, 56, 38, tzinfo=datetime.timezone.utc), 'time_taken': 1488009.0, 'time_delta': '17 days, 5:20:09', 'additions': 134, 'deletions': 11, 'state': 'closed'}, {'id': 491791813, 'number': 30, 'closed': datetime.datetime(2020, 9, 25, 15, 36, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 23, 13, 42, 46, tzinfo=datetime.timezone.utc), 'time_taken': 179597.0, 'time_delta': '2 days, 1:53:17', 'additions': 3, 'deletions': 35, 'state': 'closed'}, {'id': 477684085, 'number': 25, 'closed': datetime.datetime(2020, 9, 3, 2, 13, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 2, 9, 14, 6, tzinfo=datetime.timezone.utc), 'time_taken': 61136.0, 'time_delta': '16:58:56', 'additions': 0, 'deletions': 13, 'state': 'closed'}, {'id': 474700380, 'number': 22, 'closed': datetime.datetime(2020, 8, 28, 9, 17, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 27, 13, 27, 19, tzinfo=datetime.timezone.utc), 'time_taken': 71390.0, 'time_delta': '19:49:50', 'additions': 104, 'deletions': 0, 'state': 'closed'}, {'id': 473337191, 'number': 18, 'closed': datetime.datetime(2020, 8, 26, 8, 41, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 25, 16, 58, 45, tzinfo=datetime.timezone.utc), 'time_taken': 56561.0, 'time_delta': '15:42:41', 'additions': 88, 'deletions': 5, 'state': 'closed'}, {'id': 473023884, 'number': 17, 'closed': datetime.datetime(2020, 8, 25, 8, 14, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 25, 8, 11, 51, tzinfo=datetime.timezone.utc), 'time_taken': 184.0, 'time_delta': '0:03:04', 'additions': 7, 'deletions': 0, 'state': 'closed'}, {'id': 468465616, 'number': 13, 'closed': datetime.datetime(2020, 8, 21, 1, 54, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 16, 16, 27, 38, tzinfo=datetime.timezone.utc), 'time_taken': 379633.0, 'time_delta': '4 days, 9:27:13', 'additions': 39, 'deletions': 16, 'state': 'closed'}, {'id': 466488701, 'number': 12, 'closed': datetime.datetime(2020, 8, 12, 5, 16, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 12, 3, 46, 27, tzinfo=datetime.timezone.utc), 'time_taken': 5399.0, 'time_delta': '1:29:59', 'additions': 1, 'deletions': 4, 'state': 'closed'}, {'id': 465129478, 'number': 8, 'closed': datetime.datetime(2020, 8, 10, 14, 38, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 9, 9, 31, 20, tzinfo=datetime.timezone.utc), 'time_taken': 104839.0, 'time_delta': '1 day, 5:07:19', 'additions': 92, 'deletions': 4, 'state': 'closed'}, {'id': 463498125, 'number': 7, 'closed': datetime.datetime(2020, 8, 25, 7, 50, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 5, 16, 17, 4, tzinfo=datetime.timezone.utc), 'time_taken': 1697612.0, 'time_delta': '19 days, 15:33:32', 'additions': 462, 'deletions': 16, 'state': 'closed'}, {'id': 462863768, 'number': 6, 'closed': datetime.datetime(2020, 8, 4, 16, 28, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 4, 16, 8, 13, tzinfo=datetime.timezone.utc), 'time_taken': 1237.0, 'time_delta': '0:20:37', 'additions': 17, 'deletions': 2, 'state': 'closed'}, {'id': 462857056, 'number': 5, 'closed': datetime.datetime(2020, 8, 4, 16, 8, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 4, 15, 56, 9, tzinfo=datetime.timezone.utc), 'time_taken': 755.0, 'time_delta': '0:12:35', 'additions': 20, 'deletions': 36, 'state': 'closed'}, {'id': 461953517, 'number': 4, 'closed': datetime.datetime(2020, 8, 4, 3, 4, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 3, 5, 37, 20, tzinfo=datetime.timezone.utc), 'time_taken': 77223.0, 'time_delta': '21:27:03', 'additions': 168, 'deletions': 91, 'state': 'closed'}, {'id': 459761906, 'number': 1, 'closed': datetime.datetime(2020, 8, 1, 3, 43, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 31, 4, 2, 27, tzinfo=datetime.timezone.utc), 'time_taken': 85267.0, 'time_delta': '23:41:07', 'additions': 155, 'deletions': 71, 'state': 'closed'}]"
277514667,github-checks-plugin,jenkinsci/github-checks-plugin,Java,38,79,10,21,583,32,1,2,"[{'id': 692477036, 'number': 186, 'closed': datetime.datetime(2021, 7, 19, 11, 4, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 19, 10, 23, 29, tzinfo=datetime.timezone.utc), 'time_taken': 2488.0, 'time_delta': '0:41:28', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 629921352, 'number': 159, 'closed': datetime.datetime(2021, 5, 5, 13, 36, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 4, 16, 7, 21, tzinfo=datetime.timezone.utc), 'time_taken': 77329.0, 'time_delta': '21:28:49', 'additions': 241, 'deletions': 4, 'state': 'closed'}, {'id': 593167049, 'number': 140, 'closed': datetime.datetime(2021, 3, 15, 17, 18, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 15, 15, 23, 18, tzinfo=datetime.timezone.utc), 'time_taken': 6927.0, 'time_delta': '1:55:27', 'additions': 17, 'deletions': 7, 'state': 'closed'}, {'id': 570816355, 'number': 125, 'closed': datetime.datetime(2021, 2, 10, 8, 13, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 10, 4, 52, 48, tzinfo=datetime.timezone.utc), 'time_taken': 12071.0, 'time_delta': '3:21:11', 'additions': 36, 'deletions': 2, 'state': 'closed'}, {'id': 570509417, 'number': 124, 'closed': datetime.datetime(2021, 2, 10, 8, 11, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 9, 18, 26, 57, tzinfo=datetime.timezone.utc), 'time_taken': 49459.0, 'time_delta': '13:44:19', 'additions': 75, 'deletions': 25, 'state': 'closed'}, {'id': 562635819, 'number': 116, 'closed': datetime.datetime(2021, 2, 10, 10, 57, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 27, 16, 33, 33, tzinfo=datetime.timezone.utc), 'time_taken': 1189427.0, 'time_delta': '13 days, 18:23:47', 'additions': 64, 'deletions': 13, 'state': 'closed'}, {'id': 556488056, 'number': 107, 'closed': datetime.datetime(2021, 1, 18, 7, 54, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 18, 3, 45, 17, tzinfo=datetime.timezone.utc), 'time_taken': 14964.0, 'time_delta': '4:09:24', 'additions': 5, 'deletions': 1, 'state': 'closed'}, {'id': 556485575, 'number': 106, 'closed': datetime.datetime(2021, 1, 18, 9, 7, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 18, 3, 36, 15, tzinfo=datetime.timezone.utc), 'time_taken': 19884.0, 'time_delta': '5:31:24', 'additions': 0, 'deletions': 12, 'state': 'closed'}, {'id': 552303285, 'number': 102, 'closed': datetime.datetime(2021, 1, 11, 7, 11, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 10, 15, 45, 39, tzinfo=datetime.timezone.utc), 'time_taken': 55544.0, 'time_delta': '15:25:44', 'additions': 28, 'deletions': 1, 'state': 'closed'}, {'id': 545809377, 'number': 98, 'closed': datetime.datetime(2020, 12, 27, 14, 34, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 12, 27, 13, 41, 50, tzinfo=datetime.timezone.utc), 'time_taken': 3131.0, 'time_delta': '0:52:11', 'additions': 10, 'deletions': 27, 'state': 'closed'}, {'id': 545785857, 'number': 97, 'closed': datetime.datetime(2020, 12, 27, 11, 13, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 12, 27, 9, 41, 35, tzinfo=datetime.timezone.utc), 'time_taken': 5489.0, 'time_delta': '1:31:29', 'additions': 8, 'deletions': 6, 'state': 'closed'}, {'id': 523965034, 'number': 81, 'closed': datetime.datetime(2020, 11, 19, 14, 14, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 11, 19, 13, 45, 53, tzinfo=datetime.timezone.utc), 'time_taken': 1696.0, 'time_delta': '0:28:16', 'additions': 3, 'deletions': 3, 'state': 'closed'}, {'id': 511673459, 'number': 73, 'closed': datetime.datetime(2020, 11, 10, 2, 35, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 28, 16, 21, 12, tzinfo=datetime.timezone.utc), 'time_taken': 1073643.0, 'time_delta': '12 days, 10:14:03', 'additions': 346, 'deletions': 166, 'state': 'closed'}, {'id': 504218986, 'number': 66, 'closed': datetime.datetime(2020, 10, 25, 16, 36, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 15, 16, 11, 47, tzinfo=datetime.timezone.utc), 'time_taken': 865481.0, 'time_delta': '10 days, 0:24:41', 'additions': 288, 'deletions': 2, 'state': 'closed'}, {'id': 502232007, 'number': 64, 'closed': datetime.datetime(2020, 10, 14, 2, 4, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 13, 11, 51, 11, tzinfo=datetime.timezone.utc), 'time_taken': 51211.0, 'time_delta': '14:13:31', 'additions': 1, 'deletions': 2, 'state': 'closed'}, {'id': 473880767, 'number': 38, 'closed': datetime.datetime(2020, 8, 27, 9, 43, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 26, 12, 44, 5, tzinfo=datetime.timezone.utc), 'time_taken': 75564.0, 'time_delta': '20:59:24', 'additions': 37, 'deletions': 143, 'state': 'closed'}, {'id': 473027238, 'number': 37, 'closed': datetime.datetime(2020, 8, 27, 10, 57, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 25, 8, 17, 47, tzinfo=datetime.timezone.utc), 'time_taken': 182357.0, 'time_delta': '2 days, 2:39:17', 'additions': 8, 'deletions': 0, 'state': 'closed'}, {'id': 472159523, 'number': 34, 'closed': datetime.datetime(2020, 8, 25, 5, 20, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 23, 18, 20, 25, tzinfo=datetime.timezone.utc), 'time_taken': 126013.0, 'time_delta': '1 day, 11:00:13', 'additions': 401, 'deletions': 278, 'state': 'closed'}, {'id': 471573719, 'number': 33, 'closed': datetime.datetime(2020, 8, 21, 11, 58, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 21, 11, 18, 8, tzinfo=datetime.timezone.utc), 'time_taken': 2447.0, 'time_delta': '0:40:47', 'additions': 27, 'deletions': 6, 'state': 'closed'}, {'id': 468458456, 'number': 27, 'closed': datetime.datetime(2020, 8, 24, 8, 23, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 16, 15, 24, 10, tzinfo=datetime.timezone.utc), 'time_taken': 665938.0, 'time_delta': '7 days, 16:58:58', 'additions': 83, 'deletions': 7, 'state': 'closed'}, {'id': 467503511, 'number': 25, 'closed': datetime.datetime(2020, 9, 2, 14, 10, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 13, 16, 39, 16, tzinfo=datetime.timezone.utc), 'time_taken': 1719048.0, 'time_delta': '19 days, 21:30:48', 'additions': 1239, 'deletions': 0, 'state': 'closed'}, {'id': 464658444, 'number': 22, 'closed': datetime.datetime(2020, 8, 11, 7, 5, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 7, 15, 11, 18, tzinfo=datetime.timezone.utc), 'time_taken': 316459.0, 'time_delta': '3 days, 15:54:19', 'additions': 176, 'deletions': 32, 'state': 'closed'}, {'id': 462902460, 'number': 19, 'closed': datetime.datetime(2020, 8, 4, 18, 56, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 4, 17, 26, 37, tzinfo=datetime.timezone.utc), 'time_taken': 5411.0, 'time_delta': '1:30:11', 'additions': 23, 'deletions': 9, 'state': 'closed'}, {'id': 462589784, 'number': 17, 'closed': datetime.datetime(2020, 8, 4, 9, 34, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 4, 7, 41, 38, tzinfo=datetime.timezone.utc), 'time_taken': 6751.0, 'time_delta': '1:52:31', 'additions': 44, 'deletions': 21, 'state': 'closed'}, {'id': 461833911, 'number': 13, 'closed': datetime.datetime(2020, 8, 4, 6, 40, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 2, 17, 12, 52, tzinfo=datetime.timezone.utc), 'time_taken': 134854.0, 'time_delta': '1 day, 13:27:34', 'additions': 451, 'deletions': 207, 'state': 'closed'}, {'id': 447774912, 'number': 6, 'closed': datetime.datetime(2020, 7, 12, 7, 44, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 11, 14, 29, 10, tzinfo=datetime.timezone.utc), 'time_taken': 62149.0, 'time_delta': '17:15:49', 'additions': 136, 'deletions': 6, 'state': 'closed'}, {'id': 444787192, 'number': 4, 'closed': datetime.datetime(2020, 7, 6, 14, 4, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 6, 13, 46, 40, tzinfo=datetime.timezone.utc), 'time_taken': 1052.0, 'time_delta': '0:17:32', 'additions': 1, 'deletions': 38, 'state': 'closed'}]"
