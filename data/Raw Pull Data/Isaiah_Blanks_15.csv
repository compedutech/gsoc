pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
663937789,Skeleton classes for world-gen project,"# Description
This PR contains classes that represent the skeleton of the world-gen project

# Testing
There should be a couple of print statements showing that the Generators are called. The Generator Implementation classes should have their build() method called

# Outstanding Work
Several aspects of this PR may need to be changed in the future, including the data structure used to hold the Generators and the particular way those Generators are instantiated
",True,596,https://api.github.com/repos/MovingBlocks/DestinationSol/pulls/596,https://github.com/MovingBlocks/DestinationSol/pull/596,closed,412,0,10,6,1,40,0,0,[],2021-06-07 21:51:46+00:00,2021-06-22 21:54:55+00:00,1296189.0,"15 days, 0:03:09","[{'comment_id': 647763014, 'comment_body': ""Can you give a bit more description about how it works? I'd assume that the `WorldBuilder` is responsible for, well, world-building, but the class-level doc should give a bit more description about how that works, especially given the modular `Generator` framework."", 'comment_created': datetime.datetime(2021, 6, 8, 20, 16, 21, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 647763839, 'comment_body': 'Maybe ""any class that has the @WorldGenerator annotation"" ? It might convey how the annotation is used more accurately', 'comment_created': datetime.datetime(2021, 6, 8, 20, 17, 45, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 647765403, 'comment_body': 'Should these be arrays of the relevant types of generators? Meaning, ArrayLists of type `SolSystemGenerator`, `PlanetGenerator`, and `MazeGenerator`, respectively', 'comment_created': datetime.datetime(2021, 6, 8, 20, 20, 16, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 647834793, 'comment_body': 'This should probably have a TODO in front of it, right?', 'comment_created': datetime.datetime(2021, 6, 8, 22, 21, 54, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 649989252, 'comment_body': '""those that""', 'comment_created': datetime.datetime(2021, 6, 11, 13, 43, 42, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 650004454, 'comment_body': 'This line is kinda unclear, especially given the use of the word ""System"" elsewhere used to mean a solar system. Something like ""the game\'s context"" might be better.\r\n\r\nTbh, I don\'t think the constructor necessarily needs Javadoc, unless you\'re talking about what actually happens when you initialize an instance of the class. Maybe @Cervator or @NicholasBatesNZ can chime in here.', 'comment_created': datetime.datetime(2021, 6, 11, 14, 3, 24, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 650007694, 'comment_body': ""I think building the actual systems should be separate from the setup code. Even if it's called right after in `SolGame`, it still is conceptually separate, and moving it to a separate method call (`worldBuilder.build()`) allows for it to be created whenever makes the most sense."", 'comment_created': datetime.datetime(2021, 6, 11, 14, 7, 27, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 650009085, 'comment_body': 'Can you elaborate what framework? While it may be clear from context now, think about a person who is designing their own feature generator, without having followed the creation of this code. What will help that person understand how to use this code?', 'comment_created': datetime.datetime(2021, 6, 11, 14, 9, 18, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 650010805, 'comment_body': '""of a Maze generator"" ?', 'comment_created': datetime.datetime(2021, 6, 11, 14, 11, 44, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 650011184, 'comment_body': 'Can you elaborate on what the contract is?', 'comment_created': datetime.datetime(2021, 6, 11, 14, 12, 15, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 650011459, 'comment_body': 'See above', 'comment_created': datetime.datetime(2021, 6, 11, 14, 12, 37, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 650011631, 'comment_body': 'See above', 'comment_created': datetime.datetime(2021, 6, 11, 14, 12, 49, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 650011849, 'comment_body': 'See above', 'comment_created': datetime.datetime(2021, 6, 11, 14, 13, 6, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 650017356, 'comment_body': 'What available features? An example might clarify things', 'comment_created': datetime.datetime(2021, 6, 11, 14, 20, 17, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 650019772, 'comment_body': 'This can be simplified using `generators.clone()`. I wonder if this should make a deep copy, though. @NicholasBatesNZ @Cervator ?', 'comment_created': datetime.datetime(2021, 6, 11, 14, 23, 18, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 650023496, 'comment_body': ""I'm not sure I understand. Does this build the actual SolSystem? If it does, wouldn't the FeatureGenerators have been initialized beforehand?"", 'comment_created': datetime.datetime(2021, 6, 11, 14, 28, 10, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 650023732, 'comment_body': 'See above', 'comment_created': datetime.datetime(2021, 6, 11, 14, 28, 25, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 650178159, 'comment_body': ""@IsaacLic The FeatureGenerators are the next step in the world-gen process. Meaning first the SolSystem's own features are generated (belts, position in the world, deciding which Features to use), then the FeatureGenerators themselves are built (i.e. Planets, Mazes, etc. have their own build() function, and SolSystemGenerator will finish up by calling those). I think the chart in the proposal clarifies a little bit [here](https://docs.google.com/document/d/12KnOR3guxP6OKnrY9TX_29dOwVF7fi1Paa3bJNJS4qo/edit)"", 'comment_created': datetime.datetime(2021, 6, 11, 18, 7, 46, tzinfo=datetime.timezone.utc), 'commenter': 'IsaiahBlanks', 'type': 'User'}, {'comment_id': 650233943, 'comment_body': 'That makes sense. How about ""set up the broader SolSystem"" and ""use FeatureGenerators to do X"" ? That might clarify the relationship between the two', 'comment_created': datetime.datetime(2021, 6, 11, 19, 59, 2, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 650236714, 'comment_body': ""Yeah I'd leave off Javadoc on constructors that don't do anything particularly unusual. With a little luck the variables being set themselves have good enough Javadoc to not also need them here."", 'comment_created': datetime.datetime(2021, 6, 11, 20, 4, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Cervator', 'type': 'User'}, {'comment_id': 653791532, 'comment_body': ""I think the way that Javadoc works is that when you generate a page of documentation, the comment will show up specifically for the method or field that directly follows. In this case, that'd be `solSystemGenerators`. The comment should probably either be copied for the next field or changed into a single-line comment. "", 'comment_created': datetime.datetime(2021, 6, 17, 17, 33, 47, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 653792043, 'comment_body': 'What testing purposes?', 'comment_created': datetime.datetime(2021, 6, 17, 17, 34, 16, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 654006972, 'comment_body': ""I think the discussion in Discord about random vs selected generators is worthwhile, but shouldn't hold back the basic worldgen structure from progressing. If you rename this something like `initializeSolarSystemGeneratorsUsingRandomGenerators()` and rename `build()` to `buildUsingRandomGenerators()`, that leaves open the possibility of using selected generators without needing to code a specific implementation of that idea. Lmk if that makes sense to you"", 'comment_created': datetime.datetime(2021, 6, 17, 22, 21, 35, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 654007947, 'comment_body': 'What does this do? if this is only for testing, a comment to make that clear could be useful :)', 'comment_created': datetime.datetime(2021, 6, 17, 22, 22, 45, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 654010875, 'comment_body': 'Will the subclasses _create_ the planets/mazes, or will they _be_ the planets/mazes? It could be that I\'m not understanding how you\'re using the word ""feature"", but it sounds like the subclasses will be instances of features, meaning that the subclasses would be Planet instances.', 'comment_created': datetime.datetime(2021, 6, 17, 22, 26, 12, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 654027513, 'comment_body': 'TODO here', 'comment_created': datetime.datetime(2021, 6, 17, 22, 45, 29, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 654032624, 'comment_body': ""This checks asserts that the list itself is not null, not that the generators themselves exist. checking its size might be more in line with what you're trying to do"", 'comment_created': datetime.datetime(2021, 6, 17, 22, 51, 36, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 654032816, 'comment_body': 'Same here', 'comment_created': datetime.datetime(2021, 6, 17, 22, 51, 47, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 654463630, 'comment_body': ""@IsaacLic Yeah I think the word 'be' is more correct. I had meant create as in place themselves into the world. Meaning each SolarSystemGenerator will pick whichever FeatureGenerators it wants to use, and then those FeatureGenerators will be capable of placing an instance of themselves into the game\r\n\r\nEdit: After our discussion on Discord, the Generator classes will be responsible for building their respective Classes. Those will be represented in the game during runtime using the classes already in place."", 'comment_created': datetime.datetime(2021, 6, 18, 14, 11, 57, tzinfo=datetime.timezone.utc), 'commenter': 'IsaiahBlanks', 'type': 'User'}, {'comment_id': 654479787, 'comment_body': '@IsaacLic @Cervator mentioned that putting comments on getters and setters is probably not necessary. The field it retrieves already has a comment by it. ', 'comment_created': datetime.datetime(2021, 6, 18, 14, 32, 14, tzinfo=datetime.timezone.utc), 'commenter': 'IsaiahBlanks', 'type': 'User'}, {'comment_id': 654494079, 'comment_body': '@IsaacLic see the message I posted in discord', 'comment_created': datetime.datetime(2021, 6, 18, 14, 51, 59, tzinfo=datetime.timezone.utc), 'commenter': 'IsaiahBlanks', 'type': 'User'}, {'comment_id': 654526235, 'comment_body': '@IsaacLic I think the change you are suggesting makes sense (though I might think `initializeRandomSolarSystemGenerators()` might by a little less wordy. What do you think?)', 'comment_created': datetime.datetime(2021, 6, 18, 15, 36, 44, tzinfo=datetime.timezone.utc), 'commenter': 'IsaiahBlanks', 'type': 'User'}, {'comment_id': 654850036, 'comment_body': 'No star imports please. https://stackoverflow.com/questions/3587071/disable-intellij-starred-package-imports', 'comment_created': datetime.datetime(2021, 6, 19, 22, 58, 36, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 654850549, 'comment_body': 'Two questions:\r\n1) Do we really need the cast here?\r\n2) Is it necessary to take a deep copy or could we instead use the references with `featureGenerators.addAll(generators)`?', 'comment_created': datetime.datetime(2021, 6, 19, 23, 5, 54, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 654850696, 'comment_body': ""`for(` -> `for (` for consistency\r\n(could also use a `.forEach` lambda but that's not important :P )"", 'comment_created': datetime.datetime(2021, 6, 19, 23, 7, 48, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 654850712, 'comment_body': 'star import', 'comment_created': datetime.datetime(2021, 6, 19, 23, 8, 6, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 655030265, 'comment_body': 'Sounds good to me :)', 'comment_created': datetime.datetime(2021, 6, 21, 2, 4, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 655031020, 'comment_body': 'SolarSystemGenerator ?', 'comment_created': datetime.datetime(2021, 6, 21, 2, 7, 25, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 655031353, 'comment_body': 'those _that_ subclass FeatureGenerator', 'comment_created': datetime.datetime(2021, 6, 21, 2, 8, 54, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 655032601, 'comment_body': 'I believe `arraylist.clone()` actually makes a shallow copy, so either could work', 'comment_created': datetime.datetime(2021, 6, 21, 2, 13, 38, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}]","[{'commit_sha': 'ff04410683d57aefae1d7e59ac8b62260d19a199', 'committer_username': 'IsaiahBlanks', 'committer_name': 'Isaiah Blanks', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 23, 19, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3f756ffebf92432a21979c3f4c871115a916e22', 'committer_username': 'IsaiahBlanks', 'committer_name': 'Isaiah Blanks', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 23, 19, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9cbb23af143fce288f2c9d784da96914efd3530d', 'committer_username': 'IsaiahBlanks', 'committer_name': 'Isaiah Blanks', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 23, 19, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '63567f5baf8a93b904ba490a530548d8aa8f016c', 'committer_username': 'IsaiahBlanks', 'committer_name': 'Isaiah Blanks', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 23, 19, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4beacae7a6bff4834cc215a106f5d65bde087e45', 'committer_username': 'IsaiahBlanks', 'committer_name': 'Isaiah Blanks', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 23, 19, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '33fb5d6e4f53502a0b1d2a003cb9b88b84e8b4f1', 'committer_username': 'IsaiahBlanks', 'committer_name': 'Isaiah Blanks', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 23, 19, 20, 29, tzinfo=datetime.timezone.utc)}]",Isaiah Blanks,60236774,,User,,16,,7,5
676370845,Initial SolarSystemGenerator design,"# Description
This PR defines some initial sections of the SolarSystemGenerator class. This class is an abstract class that will handle much of the logic behind SolarSystem generation. So far, this code creates placements for SolarSystems and Mazes, and generates the correct number of SolarSystemGenerators, MazeGenerators, and PlanetGenerators.

# Testing
When you run the game, you will see print statements describing what position has been set for each generator created (these do not show up in the actual game yet).

# Design Questions

1. I'm not sure about my use of Class variable to instantiate new Maze and Planet generators in the SolarSystemGenerator class. Previously, the code just called featureGenerator.build() on each available FeatureGenerator. The issue with this is that each FeatureGenerator actually needs to be initialized as it's own object, instead of being a reference to the one is the list (So that they can each have their own position, size, etc.). However, I'm unsure if this is the best way to handle that. 

2. Another issue is the order of world generation. Currently, WorldBuilder places each SolarSystemGenerator before calling the build method of each system. This means that the radius of the System has to be determined before build() is called. Therefore, the value of how many planets the SolarSystemGenerator will create needs to be known before any methods from SolarSystemGeneratorImpl can be called. Therefore, the only way for SolarSystemGeneratorImplementations to set the number of planets before their build() method is called is to pass it into the super() constructor. That way it can be taken into account when the superclass's constructor builds the system radius. 
- It might seem like it would be best to create the SystemRadius during the build() phase of SolarSystemGenerator, however that is problematic because it would mean the WorldBuilder would have to position the System _after_ the build method of SolarSystemGenerator. This would position Mazes wrong, as it would not be possible to place them relative to the SolarSystem position. The WorldBuilder _could_ place the Mazes, but then it would need references to each MazeGeneratorImpl from the SolarSystemGenerators. Also, since SolarSystemGenerators have mazes associated to them in this design, it seems it would be best for them to handle the Maze placement.


",True,597,https://api.github.com/repos/MovingBlocks/DestinationSol/pulls/597,https://github.com/MovingBlocks/DestinationSol/pull/597,closed,1761,160,40,10,2,118,0,0,[],2021-06-23 14:59:44+00:00,2021-07-18 04:49:13+00:00,2123369.0,"24 days, 13:49:29","[{'comment_id': 658025676, 'comment_body': ""I think for this field, it's important to have clear documentation about what this field should represent. The way we discussed it, radius corresponds to the distance from the center to the farthest element in the system. A modder designing a new module might not realize that, though. Imagine someone building a system with only asteroids and no planets, sun, etc - they might think that the radius is zero, which will cause their asteroids to be placed inside another system.\r\n\r\nIt might be worth having a further discussion about documentation for interfaces and abstract classes. In my opinion, they should have documentation on either the variables or the getters/setters, so that people who want to extend it know what it is and how it works."", 'comment_created': datetime.datetime(2021, 6, 24, 14, 57, 14, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 658029746, 'comment_body': ""I don't _think_ this comment is necessary, but it'd be worth asking @NicholasBatesNZ or @Cervator."", 'comment_created': datetime.datetime(2021, 6, 24, 15, 1, 44, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 658035123, 'comment_body': 'I think ""get"" is a bit misleading here - you\'re calculating it, not retrieving an existing value', 'comment_created': datetime.datetime(2021, 6, 24, 15, 6, 53, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 658174220, 'comment_body': 'period', 'comment_created': datetime.datetime(2021, 6, 24, 18, 8, 27, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 658176680, 'comment_body': ""To clarify: it's 20 angles at a given radius length, right? And then after those 20, it increases again?"", 'comment_created': datetime.datetime(2021, 6, 24, 18, 12, 10, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 658191075, 'comment_body': 'Why is this publically settable?', 'comment_created': datetime.datetime(2021, 6, 24, 18, 34, 15, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 658780850, 'comment_body': ""The default value for a boolean is False, so you don't need this line"", 'comment_created': datetime.datetime(2021, 6, 25, 13, 52, 16, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 658783340, 'comment_body': 'I think ""generate"" is the wrong word - it sounds to me like an object is being created, not a number being calculated', 'comment_created': datetime.datetime(2021, 6, 25, 13, 55, 41, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 658786675, 'comment_body': ""I'm not sure what this does. Does it calculate how high the surface of the planet is relative to its core? If so, how does that help with the radius determination?"", 'comment_created': datetime.datetime(2021, 6, 25, 14, 0, 7, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 658800121, 'comment_body': ""Can you break this line up into a few lines? It's hard to tell what's going on here"", 'comment_created': datetime.datetime(2021, 6, 25, 14, 18, 3, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 658822993, 'comment_body': 'Will every system have its radius calculated the same way? If not, how can this be made more modular, so that modders can change some aspects without re-writing everything? Something to think about', 'comment_created': datetime.datetime(2021, 6, 25, 14, 47, 40, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 658934418, 'comment_body': ""What if a system doesn't have any mazes?"", 'comment_created': datetime.datetime(2021, 6, 25, 17, 41, 28, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 658934924, 'comment_body': 'Why is it negative?', 'comment_created': datetime.datetime(2021, 6, 25, 17, 42, 22, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 658935280, 'comment_body': ""Shouldn't this be times the number of planets minus one?"", 'comment_created': datetime.datetime(2021, 6, 25, 17, 43, 2, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 658935600, 'comment_body': '""checks"", ""placed""', 'comment_created': datetime.datetime(2021, 6, 25, 17, 43, 38, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 658935911, 'comment_body': '""two-maze SolarSystems"" ?', 'comment_created': datetime.datetime(2021, 6, 25, 17, 44, 11, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 658936563, 'comment_body': 'Is this supposed to be package-level?', 'comment_created': datetime.datetime(2021, 6, 25, 17, 45, 17, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 658963271, 'comment_body': ""Yep! This is the game's original logic "", 'comment_created': datetime.datetime(2021, 6, 25, 18, 34, 13, tzinfo=datetime.timezone.utc), 'commenter': 'IsaiahBlanks', 'type': 'User'}, {'comment_id': 663028495, 'comment_body': ""If you'll be using the Class to make a new instance, why not store the Class, rather than an instance that isn't getting used?"", 'comment_created': datetime.datetime(2021, 7, 2, 13, 50, 25, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 663033187, 'comment_body': ')', 'comment_created': datetime.datetime(2021, 7, 2, 13, 57, 11, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 663033561, 'comment_body': 'Can you clarify that in the documentation?', 'comment_created': datetime.datetime(2021, 7, 2, 13, 57, 41, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 663034649, 'comment_body': 'Why is this public? Is this going to be called by other classes?', 'comment_created': datetime.datetime(2021, 7, 2, 13, 59, 18, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 663038672, 'comment_body': 'If this is happening before the positioning, it should be earlier in the file (for readability)', 'comment_created': datetime.datetime(2021, 7, 2, 14, 5, 6, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 663056295, 'comment_body': 'Is this distance from the center of the system?', 'comment_created': datetime.datetime(2021, 7, 2, 14, 30, 37, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 663056539, 'comment_body': ""Shouldn't it be twice this?"", 'comment_created': datetime.datetime(2021, 7, 2, 14, 30, 59, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 663056721, 'comment_body': 'Documentation please :)', 'comment_created': datetime.datetime(2021, 7, 2, 14, 31, 16, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 663064624, 'comment_body': 'I think that this should have a different name, given that it doesn\'t have the normal setter structure. Maybe ""calculateRadius"" ?', 'comment_created': datetime.datetime(2021, 7, 2, 14, 43, 33, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 663065417, 'comment_body': 'The constant should probably be moved into `SunGenerator`', 'comment_created': datetime.datetime(2021, 7, 2, 14, 44, 50, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 663066710, 'comment_body': 'Why is this both here and in MazeGenerator?', 'comment_created': datetime.datetime(2021, 7, 2, 14, 46, 49, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 663069732, 'comment_body': 'In my opinion, these should be passed in as parameters, rather than fields with default values. This seems a bit magic-number-y to me.', 'comment_created': datetime.datetime(2021, 7, 2, 14, 51, 14, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 663077093, 'comment_body': ""While I think the code should be flexible enough to accommodate multiple suns, I don't think that flexibility should be hard-coded into the abstract class. Even though a solar system COULD have two or more suns, it's highly unusual, and isn't a choice that should be explicitly presented to modders, in my opinion."", 'comment_created': datetime.datetime(2021, 7, 2, 15, 2, 8, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 663086437, 'comment_body': 'What happens if there are too many mazes? For example, what if a modder decided to do 100 mazes? ', 'comment_created': datetime.datetime(2021, 7, 2, 15, 16, 5, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 663090657, 'comment_body': 'Should you be adding the gap twice? If so, maybe it should be named ""HALF_PLANET_GAP""', 'comment_created': datetime.datetime(2021, 7, 2, 15, 22, 48, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 663091828, 'comment_body': 'typo - belt, not best', 'comment_created': datetime.datetime(2021, 7, 2, 15, 24, 24, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 663096976, 'comment_body': ""Does the fact that this uses `planetDistances` mean that this must be called after `calculatePlanetPositions()`? If so, you should make some sort of structural requirement to keep them in the right order, so that a modder can't decide to put them in a different order. "", 'comment_created': datetime.datetime(2021, 7, 2, 15, 32, 44, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 663098135, 'comment_body': 'If this isn\'t only representing the planet gap, perhaps it should be renamed to something more general. I don\'t know what exactly, but ""buffer"" might be a useful word', 'comment_created': datetime.datetime(2021, 7, 2, 15, 34, 42, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 663176121, 'comment_body': ""Make sure to auto-format all of your files - otherwise you'll miss small formatting thing like this (the curly brace should have a space before it)"", 'comment_created': datetime.datetime(2021, 7, 2, 18, 6, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 663176917, 'comment_body': ""Like what I said before - these totally do not look like they have any essential order to them. Maybe I'd think that the sun should come first, but I would not have thought that the planets MUST come before the belts."", 'comment_created': datetime.datetime(2021, 7, 2, 18, 7, 59, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 663178189, 'comment_body': ""_IF_ you're building architecture for a system with two suns, this test won't accurately cover that case ;)"", 'comment_created': datetime.datetime(2021, 7, 2, 18, 10, 46, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 663178935, 'comment_body': 'Very good and helpful comment :)', 'comment_created': datetime.datetime(2021, 7, 2, 18, 12, 30, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 663188388, 'comment_body': ""As I said above, I don't think we should have this in the main body of the code. Trying to build the core systems with this as an option is going to make for some overly complex core code. Leave it to modders to solve the three-body problem ;)"", 'comment_created': datetime.datetime(2021, 7, 2, 18, 34, 25, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 663195906, 'comment_body': ')', 'comment_created': datetime.datetime(2021, 7, 2, 18, 52, 9, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 663197338, 'comment_body': ""Can you add a getDiameter function to FeatureGenerator? While it's not strictly necessary, it'd be nicer to read ;)"", 'comment_created': datetime.datetime(2021, 7, 2, 18, 55, 22, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 663201549, 'comment_body': ""These four lines seem to me like they should really be one method with four parameters, possibly in the abstract class's constructor"", 'comment_created': datetime.datetime(2021, 7, 2, 19, 5, 36, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 663201723, 'comment_body': 'These do not seem like they require a specific order, even though they do', 'comment_created': datetime.datetime(2021, 7, 2, 19, 6, 3, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 663202492, 'comment_body': 'Is there a way that this could be partially or fully moved into the abstract class? Modders will have to copy-paste several lines of code for the basic build process to happen', 'comment_created': datetime.datetime(2021, 7, 2, 19, 8, 1, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 663208304, 'comment_body': 'That would be diameter (width means from one side to the other). I took that name from the current codebase', 'comment_created': datetime.datetime(2021, 7, 2, 19, 22, 12, tzinfo=datetime.timezone.utc), 'commenter': 'IsaiahBlanks', 'type': 'User'}, {'comment_id': 663213348, 'comment_body': ""I meant to have these numbers here as the 'default' values, so if a modder in their implementation didn't want to, they wouldn't have to call setPlanetCount() or whichever value they don't want to set\r\n\r\n"", 'comment_created': datetime.datetime(2021, 7, 2, 19, 34, 32, tzinfo=datetime.timezone.utc), 'commenter': 'IsaiahBlanks', 'type': 'User'}, {'comment_id': 664947263, 'comment_body': 'These actually do not have a specific order. Each one just get random Planet, Maze, Belt, or Sun types and adds instances of them to the activeFeatureGenerators list', 'comment_created': datetime.datetime(2021, 7, 6, 23, 54, 59, tzinfo=datetime.timezone.utc), 'commenter': 'IsaiahBlanks', 'type': 'User'}, {'comment_id': 665662370, 'comment_body': 'What are these?', 'comment_created': datetime.datetime(2021, 7, 7, 19, 50, 13, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 665662742, 'comment_body': 'What are these?', 'comment_created': datetime.datetime(2021, 7, 7, 19, 50, 49, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 665662922, 'comment_body': 'What are these?', 'comment_created': datetime.datetime(2021, 7, 7, 19, 51, 7, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 665664743, 'comment_body': ""What are these? I'm guessing these fields were copy-pasted from the old code. Can you figure out what they represent and name them accordingly, so that others don't have to rummage through the rest of the codebase to figure out what they are? ;)"", 'comment_created': datetime.datetime(2021, 7, 7, 19, 54, 8, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 665665175, 'comment_body': 'Maybe ""isHard"" might be a better name? ""hard"" does not sound like specifically a boolean', 'comment_created': datetime.datetime(2021, 7, 7, 19, 54, 48, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 665667455, 'comment_body': ""This should probably be generified, rather than specifically loading the configs from `engine`. The way that this line is set up doesn't allow for modders to add configs. Ask me on Discord if that's unclear - I did a bit of research on this for #593."", 'comment_created': datetime.datetime(2021, 7, 7, 19, 58, 36, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 665769345, 'comment_body': ""I think it'd be good if we could have a wiki page for how the config file needs to be laid out, if we don't have a page for that already. It might be worth noting the requirements as you go - things such as this line and the difficulty thing before."", 'comment_created': datetime.datetime(2021, 7, 7, 23, 29, 51, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 665873081, 'comment_body': 'See above about generification', 'comment_created': datetime.datetime(2021, 7, 8, 5, 8, 8, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 665873141, 'comment_body': 'same', 'comment_created': datetime.datetime(2021, 7, 8, 5, 8, 17, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 665873305, 'comment_body': 'What do you mean?', 'comment_created': datetime.datetime(2021, 7, 8, 5, 8, 47, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 665873565, 'comment_body': 'What do these do?', 'comment_created': datetime.datetime(2021, 7, 8, 5, 9, 26, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 665882302, 'comment_body': 'I wonder if the Builder pattern might be better here, to avoid having a bunch of parameters listed like this', 'comment_created': datetime.datetime(2021, 7, 8, 5, 34, 39, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 665883746, 'comment_body': ""Technically, I _think_  it's not an instance if it's the actual Class "", 'comment_created': datetime.datetime(2021, 7, 8, 5, 38, 17, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 667097734, 'comment_body': ""@IsaacLic Turns out most of the parameters are pretty useless, as the are only used to pass in empty arrays or objects, and then those are set from JSON data by the load() method. I'm changing it so that those empty objects are initialized in the constructor instead of being passed in"", 'comment_created': datetime.datetime(2021, 7, 9, 17, 11, 57, tzinfo=datetime.timezone.utc), 'commenter': 'IsaiahBlanks', 'type': 'User'}, {'comment_id': 667156970, 'comment_body': 'See `BeltConfigManager` about my JSON comments', 'comment_created': datetime.datetime(2021, 7, 9, 19, 4, 54, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 667157901, 'comment_body': 'This should be made module-friendly', 'comment_created': datetime.datetime(2021, 7, 9, 19, 6, 53, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 667166500, 'comment_body': 'Excellent javadoc', 'comment_created': datetime.datetime(2021, 7, 9, 19, 25, 26, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 667167498, 'comment_body': ""What's the difference between this and `positionInSolarSystem`?"", 'comment_created': datetime.datetime(2021, 7, 9, 19, 27, 41, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 667169053, 'comment_body': ""Small organizational thing: I'd pair each getter with each setter, rather than having all the setters followed by all the getters."", 'comment_created': datetime.datetime(2021, 7, 9, 19, 30, 56, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 667169436, 'comment_body': '""for for""', 'comment_created': datetime.datetime(2021, 7, 9, 19, 31, 49, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 667170811, 'comment_body': 'Unfortunately it will be hard to change the name, as it needs to be named the same as the key in the JSON will be named', 'comment_created': datetime.datetime(2021, 7, 9, 19, 34, 45, tzinfo=datetime.timezone.utc), 'commenter': 'IsaiahBlanks', 'type': 'User'}, {'comment_id': 667172164, 'comment_body': ""Shouldn't this only be adding the Orbital radius size?"", 'comment_created': datetime.datetime(2021, 7, 9, 19, 37, 55, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 667173440, 'comment_body': ""Interesting design decision - let's discuss on Discord"", 'comment_created': datetime.datetime(2021, 7, 9, 19, 40, 36, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 667174886, 'comment_body': 'This should probably be a single constant', 'comment_created': datetime.datetime(2021, 7, 9, 19, 43, 46, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 667176622, 'comment_body': 'Is there a way that we can make use of multiple `MazeGenerators` in one system?', 'comment_created': datetime.datetime(2021, 7, 9, 19, 47, 39, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 667177336, 'comment_body': ""I'm not clear on what this does"", 'comment_created': datetime.datetime(2021, 7, 9, 19, 49, 9, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 667177851, 'comment_body': 'I think this line of comment is likely unnecessary', 'comment_created': datetime.datetime(2021, 7, 9, 19, 50, 16, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 667178647, 'comment_body': 'You do still need a while loop to ensure that the sun actually gets created', 'comment_created': datetime.datetime(2021, 7, 9, 19, 51, 57, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 667178928, 'comment_body': 'Good thinking', 'comment_created': datetime.datetime(2021, 7, 9, 19, 52, 32, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 667179561, 'comment_body': 'Probably too much space ;)', 'comment_created': datetime.datetime(2021, 7, 9, 19, 53, 57, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 667214015, 'comment_body': ""@IsaacLic positionInSolarSystem represents the cardinal order of this orbital. Like the orbital closes to the sun is orbital 0, then orbital 1, etc. I'll come up with a better name\r\n"", 'comment_created': datetime.datetime(2021, 7, 9, 21, 12, 55, tzinfo=datetime.timezone.utc), 'commenter': 'IsaiahBlanks', 'type': 'User'}, {'comment_id': 667215086, 'comment_body': ""@IsaacLic The sun adds radius to the total SolarSystem radius while not being in an orbital (since it is in the center of the system it doesn't orbit anything, but it still has width so it contributes to the radius).\r\n\r\nMaybe a good way to think of it is that the first orbital starts at the edge of the sun"", 'comment_created': datetime.datetime(2021, 7, 9, 21, 15, 33, tzinfo=datetime.timezone.utc), 'commenter': 'IsaiahBlanks', 'type': 'User'}, {'comment_id': 670059694, 'comment_body': 'Use `//TODO: comment` so that it gets highlighted for future action', 'comment_created': datetime.datetime(2021, 7, 15, 1, 30, 36, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 670062254, 'comment_body': '```java\r\nprivate ModuleManager moduleManager = context.get(ModuleManager.class);\r\n...\r\nsolarSystemGeneratorTypes.addAll(moduleManager.getEnvironment().getSubtypesOf(SolarSystemGenerator.class));\r\n```', 'comment_created': datetime.datetime(2021, 7, 15, 1, 38, 35, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 670062976, 'comment_body': 'No javadocs? :cry: ', 'comment_created': datetime.datetime(2021, 7, 15, 1, 40, 53, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 670063805, 'comment_body': ""I get that this variable doesn't live very long but please don't get into the habit of single letter names. Something like `generator` would be better"", 'comment_created': datetime.datetime(2021, 7, 15, 1, 43, 26, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 670065031, 'comment_body': 'You should be using a logger rather than stdio.\r\n```java\r\nprivate static final Logger logger = LoggerFactory.getLogger(WorldBuilder.class);\r\n... // any of:\r\nlogger.info(""msg"");\r\nlogger.debug(""msg"");\r\nlogger.error(""msg"");\r\n```\r\n', 'comment_created': datetime.datetime(2021, 7, 15, 1, 47, 36, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 670065654, 'comment_body': 'You should be using the `SolMath` vector pool. Ask in discord for help with this if needed', 'comment_created': datetime.datetime(2021, 7, 15, 1, 49, 24, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 670067011, 'comment_body': 'Is this pre-existing code?\r\nIf so it would be nice if you could extract it into a method somewhere where both places can call it to avoid duplicated code.\r\nOtherwise try to avoid using a `while (true)` loop and instead give up after a certain distance.', 'comment_created': datetime.datetime(2021, 7, 15, 1, 53, 34, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 670067348, 'comment_body': ""I'm assuming you've checked that this method isn't expecting radians rather than degrees :+1: "", 'comment_created': datetime.datetime(2021, 7, 15, 1, 54, 34, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 670068028, 'comment_body': 'logger', 'comment_created': datetime.datetime(2021, 7, 15, 1, 56, 38, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 670068249, 'comment_body': 'vector pool', 'comment_created': datetime.datetime(2021, 7, 15, 1, 57, 17, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 670068589, 'comment_body': 'No single letter variable names please', 'comment_created': datetime.datetime(2021, 7, 15, 1, 58, 15, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 670069169, 'comment_body': 'Please avoid single letter prefixes too - `float atmosphereHeight`', 'comment_created': datetime.datetime(2021, 7, 15, 2, 0, 7, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 670069257, 'comment_body': '`groundHeight`', 'comment_created': datetime.datetime(2021, 7, 15, 2, 0, 23, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 670069754, 'comment_body': 'logger', 'comment_created': datetime.datetime(2021, 7, 15, 2, 1, 39, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 670070085, 'comment_body': 'Are there unused imports now due to this?', 'comment_created': datetime.datetime(2021, 7, 15, 2, 2, 49, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 670071350, 'comment_body': 'Why are you excluding assets from this module?', 'comment_created': datetime.datetime(2021, 7, 15, 2, 6, 51, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 670072898, 'comment_body': 'Javadocs please :)', 'comment_created': datetime.datetime(2021, 7, 15, 2, 11, 17, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 670072990, 'comment_body': 'two letter variable name', 'comment_created': datetime.datetime(2021, 7, 15, 2, 11, 30, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 670073311, 'comment_body': ""What's this?"", 'comment_created': datetime.datetime(2021, 7, 15, 2, 12, 40, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 670073409, 'comment_body': 'Why are you excluding this module?', 'comment_created': datetime.datetime(2021, 7, 15, 2, 12, 58, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 670073573, 'comment_body': 'Javadocs?', 'comment_created': datetime.datetime(2021, 7, 15, 2, 13, 30, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 670073637, 'comment_body': 'two letter variable name', 'comment_created': datetime.datetime(2021, 7, 15, 2, 13, 44, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 670074100, 'comment_body': 'Logger', 'comment_created': datetime.datetime(2021, 7, 15, 2, 15, 1, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 670074212, 'comment_body': '``//TODO:``', 'comment_created': datetime.datetime(2021, 7, 15, 2, 15, 16, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 670074288, 'comment_body': 'Logger', 'comment_created': datetime.datetime(2021, 7, 15, 2, 15, 34, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 670074477, 'comment_body': 'vector pool', 'comment_created': datetime.datetime(2021, 7, 15, 2, 16, 3, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 670074704, 'comment_body': 'Maybe add a newline here', 'comment_created': datetime.datetime(2021, 7, 15, 2, 16, 47, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 670074783, 'comment_body': 'Maybe add a newline here', 'comment_created': datetime.datetime(2021, 7, 15, 2, 17, 4, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 670074997, 'comment_body': '```suggestion\r\n    protected float calculateSolarSystemRadius() {\r\n```', 'comment_created': datetime.datetime(2021, 7, 15, 2, 17, 48, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 670075066, 'comment_body': 'logger', 'comment_created': datetime.datetime(2021, 7, 15, 2, 18, 5, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 670075190, 'comment_body': 'vector pool', 'comment_created': datetime.datetime(2021, 7, 15, 2, 18, 30, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 670075318, 'comment_body': 'Same radian degrees comment as eariler', 'comment_created': datetime.datetime(2021, 7, 15, 2, 18, 58, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 670075432, 'comment_body': 'vector pool', 'comment_created': datetime.datetime(2021, 7, 15, 2, 19, 19, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 670075504, 'comment_body': 'logger', 'comment_created': datetime.datetime(2021, 7, 15, 2, 19, 38, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 670075650, 'comment_body': 'logger', 'comment_created': datetime.datetime(2021, 7, 15, 2, 20, 2, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 670076803, 'comment_body': 'If it only checks two angles then why is the first argument a list?', 'comment_created': datetime.datetime(2021, 7, 15, 2, 23, 25, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 670076950, 'comment_body': 'single letter var name', 'comment_created': datetime.datetime(2021, 7, 15, 2, 23, 58, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}]","[{'commit_sha': '9297ad40536e62e7ae573494b8074c0b5439c0a8', 'committer_username': 'IsaiahBlanks', 'committer_name': 'Isaiah Blanks', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 23, 19, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5001c5e56047337872602fd3593f03490cde93f9', 'committer_username': 'IsaiahBlanks', 'committer_name': 'Isaiah Blanks', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 23, 19, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e78fae33810d5ed006422e217ce3d6437972caaf', 'committer_username': 'IsaiahBlanks', 'committer_name': 'Isaiah Blanks', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 23, 19, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa5bad01c0d738ca543b16d636baa68b2355e4de', 'committer_username': 'IsaiahBlanks', 'committer_name': 'Isaiah Blanks', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 23, 19, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '507d5f7614a4125733225df5d9856e31d337230c', 'committer_username': 'IsaiahBlanks', 'committer_name': 'Isaiah Blanks', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 23, 19, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e4b7e171b233f9a2b1ab757a20f9cb3cce605fd', 'committer_username': 'IsaiahBlanks', 'committer_name': 'Isaiah Blanks', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 23, 19, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f278dbba226b1bc071624627ec5b745847ec045', 'committer_username': 'IsaiahBlanks', 'committer_name': 'Isaiah Blanks', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 23, 19, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eeb45d732425a4aec6235ea19dc5055c8f23830f', 'committer_username': 'IsaiahBlanks', 'committer_name': 'Isaiah Blanks', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 23, 19, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da88560966cef219a3f7fab3be83624cc4a1fe80', 'committer_username': 'IsaiahBlanks', 'committer_name': 'Isaiah Blanks', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 23, 19, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d70657101dd3e45008491b53869bac21666e322', 'committer_username': 'IsaiahBlanks', 'committer_name': 'Isaiah Blanks', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 23, 19, 20, 29, tzinfo=datetime.timezone.utc)}]",Isaiah Blanks,60236774,,User,,16,,7,5
694441128,Initial PlanetGenerator Setup,"<!-- Thanks for submitting a pull request for Destination Sol! :-)
Please fill in some brief details below about the PR.
If it contains source code please make sure to do everything in the pre pull request checklist first.
If you add unit tests we'll love you forever! -->

# Description
This PR adds the default implementation of Planets to the new modular world-gen system. It also sets up the game so that SolarSystems and Planets generated by Generator classes show up in the game.

In this implementation, many options are available to the Planet via getting the config in your particular implementation, and then changing various values

# Testing
Run the game, and you should see SolarSystems running with Planets in them, but no belts and no mazes. There are two types of SolarSystems that will generate, the default systems and large SolarSystems. Generate a world with a good amount of systems (at least 4) to make sure you see the different types.

# Outstanding Work
Two features still need to be added for Planets. One is the ability to place custom objects/ modify terrain, which will involve modularizing the PlanetObjectsBuilder class to accept types of objects, instead of specific objects. The other is the ability to load custom PlanetConfig files. Additionally, tests need to be written still. There is an issue with testing PlanetGenerators as the require the PlanetConfigs class to be loaded, and this seems to be dependent on the class CollisionMeshLoader, which is throwing an error when running tests
",True,602,https://api.github.com/repos/MovingBlocks/DestinationSol/pulls/602,https://github.com/MovingBlocks/DestinationSol/pull/602,closed,993,128,28,5,1,18,0,0,[],2021-07-21 14:39:00+00:00,2021-07-30 22:19:22+00:00,805222.0,"9 days, 7:40:22","[{'comment_id': 677738872, 'comment_body': 'Happy New Year! Wait, it is almost August? 😁 ', 'comment_created': datetime.datetime(2021, 7, 27, 19, 29, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Cervator', 'type': 'User'}, {'comment_id': 677739837, 'comment_body': ""I love seeing variables documented like this, although maybe that's just a weird personal thing. Although I'd use single line javadoc - even if the code is private it highlights nicely in an IDE and I figure it would actually show with javadoc preview even if javadoc generation doesn't exact it. So in other words:\r\n\r\n`/** Frequency at which clouds will generate */`\r\n\r\nI'd also leave a newline between each set of var + javadoc. Although again I dunno if this is just a rare personal preference or what not."", 'comment_created': datetime.datetime(2021, 7, 27, 19, 30, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Cervator', 'type': 'User'}, {'comment_id': 677741036, 'comment_body': '`OrbitalEnemiesBuilder` maybe? Rather than ""Orbit"" alone\r\n\r\nElsewhere too like the nice javadoc has ""Orbit Enemies"" which reads funny, ""orbital enemies"" would be entirely natural :-)', 'comment_created': datetime.datetime(2021, 7, 27, 19, 32, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Cervator', 'type': 'User'}, {'comment_id': 677742845, 'comment_body': 'Is package scope intentional here? Or meant to be public/private/protected?', 'comment_created': datetime.datetime(2021, 7, 27, 19, 35, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Cervator', 'type': 'User'}, {'comment_id': 677746912, 'comment_body': 'Any way to narrow this catch a little? Going straight for `Exception` is a tad wide :-)\r\n\r\nI realize this is probably still an improvement on prior state as-is!', 'comment_created': datetime.datetime(2021, 7, 27, 19, 41, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Cervator', 'type': 'User'}, {'comment_id': 677748035, 'comment_body': ""Avoid inlining values from constants, inline the name of the constant instead. Odds it'll get changed in one place but not the other is much worse than 1 in 1,000,000,000 ;-)"", 'comment_created': datetime.datetime(2021, 7, 27, 19, 43, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Cervator', 'type': 'User'}, {'comment_id': 677748995, 'comment_body': 'I realize this is a first pass and is really just something ""less"" than testing against true forever in a potentially infinite loop, but a billion with 20 checks per increment is about infinite anyway 🤔 I wonder how we can make this more .... proportional somehow', 'comment_created': datetime.datetime(2021, 7, 27, 19, 44, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Cervator', 'type': 'User'}, {'comment_id': 677750699, 'comment_body': 'Huh? This confuses me. The name is `createPlanet`  yet it just _prepares_ for a given planet to be available for generation? `instantiatePlanet` ? `preconfigurePlanet` ? Something? Probably some naming or structure here could be clearer.', 'comment_created': datetime.datetime(2021, 7, 27, 19, 47, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Cervator', 'type': 'User'}, {'comment_id': 677752555, 'comment_body': ""This comment reads mildly confusingly and may be overly detailed since the logic is in the body of the method itself and may very well change over time. The logic itself is likely to convoluted itself and should be tidier and more extensible, but that's probably a problem to refactor at another time. Maybe just a re-read to see if this could be made a little cleaner (the comment) but not too much since it'll probably get rewritten later?"", 'comment_created': datetime.datetime(2021, 7, 27, 19, 50, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Cervator', 'type': 'User'}, {'comment_id': 677774144, 'comment_body': 'I wonder if ""density"" here is the right word, another possible refactoring that could be bigger than this PR / do sometime later. When I read density I think a desired target state of x ships per y area. But is it really more like a _probability_ to spawn ships that is based on a desired target density? Generally spawn chances are thought of in probabilities, although I can see how a target ""coverage"" of sorts could be a goal. *If* I\'m even reading that right - you could have logic that would go past a target ""density"" depending on how it was written.', 'comment_created': datetime.datetime(2021, 7, 27, 20, 24, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Cervator', 'type': 'User'}, {'comment_id': 677776335, 'comment_body': 'The _percentage_ of the atmosphere? Huh. As in, related to height/distance from the surface of a planet? I guess in theory you could think of an atmosphere as thinning out (thus lower percentage the higher you go), but I wonder if a simply height offset or something would be clearer (I could imagine exotic / magical atmospheres that could be equally thick from surface to top...) . As usual probably a separate refactor.', 'comment_created': datetime.datetime(2021, 7, 27, 20, 28, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Cervator', 'type': 'User'}, {'comment_id': 677777570, 'comment_body': '""its"" creation being relevant to the planet generator or a planet itself? Nitpick :-) ', 'comment_created': datetime.datetime(2021, 7, 27, 20, 30, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Cervator', 'type': 'User'}, {'comment_id': 677777975, 'comment_body': 'Magic number (descriptive constant for `180` probably would be good?)', 'comment_created': datetime.datetime(2021, 7, 27, 20, 31, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Cervator', 'type': 'User'}, {'comment_id': 677779211, 'comment_body': '""Built"" sounds funny to me here. ""Generated"" ? What exact state are the planets in before, after, and what happens next? Is surface feature placement and other stuff still to do? This is where again a diagram or two would be awesome to show the phases / state changes :-)', 'comment_created': datetime.datetime(2021, 7, 27, 20, 33, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Cervator', 'type': 'User'}, {'comment_id': 677780800, 'comment_body': 'Might be good with a quick TODO to note why this is commented out ', 'comment_created': datetime.datetime(2021, 7, 27, 20, 35, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Cervator', 'type': 'User'}, {'comment_id': 680239916, 'comment_body': 'Not really needed right this moment, but it may be worth simply declaring a constant Vector2 somewhere with the NaN values rather than create a new one every check?', 'comment_created': datetime.datetime(2021, 7, 30, 21, 54, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Cervator', 'type': 'User'}, {'comment_id': 680240373, 'comment_body': 'The comment definitely helps, these values are still magic numbers though :-) Also a low priority but likely replacement with constants would be nice. That would also limit the need for the comment being lengthy if the name of the constants make the code self-documenting (and extra details could go on javadoc on the constants)', 'comment_created': datetime.datetime(2021, 7, 30, 21, 55, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Cervator', 'type': 'User'}, {'comment_id': 680241187, 'comment_body': ""Better 👍 There are still a _lot_ of RuntimeExceptions that are possible. Not necessarily needed to go more narrow right now, but in addition to printing the stacktrace might it be worthwhile logging a more specific message to this place in the code and its expectations? IIRC there's also a logger method that ends up including the printed stacktrace anyway."", 'comment_created': datetime.datetime(2021, 7, 30, 21, 58, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Cervator', 'type': 'User'}]","[{'commit_sha': '1aeeb5a87c709ea0c27af0b2f73b88942777fdd5', 'committer_username': 'IsaiahBlanks', 'committer_name': 'Isaiah Blanks', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 23, 19, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b0bc03d8c017c41cd18a3e484cfbedb9ceb2772', 'committer_username': 'IsaiahBlanks', 'committer_name': 'Isaiah Blanks', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 23, 19, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b70f8d9ca3ea4ccc84dfe651e9d1f3a519e319f2', 'committer_username': 'IsaiahBlanks', 'committer_name': 'Isaiah Blanks', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 23, 19, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf78f99380f1ac4e28cbbcb1aac60c290c14cd36', 'committer_username': 'IsaiahBlanks', 'committer_name': 'Isaiah Blanks', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 23, 19, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49d33fd25ee98c71fd396cda1f0de6a820c0c9de', 'committer_username': 'IsaiahBlanks', 'committer_name': 'Isaiah Blanks', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 23, 19, 20, 29, tzinfo=datetime.timezone.utc)}]",Isaiah Blanks,60236774,,User,,16,,7,5
702897474,Maze Generators and Belts Generators,"<!-- Thanks for submitting a pull request for Destination Sol! :-)
Please fill in some brief details below about the PR.
If it contains source code please make sure to do everything in the pre pull request checklist first.
If you add unit tests we'll love you forever! -->

# Description
This PR adds Belts and Mazes using Generator classes. It brings the GSoC 2021 Destination: Sol project up to have all the features of develop, but now modular! It includes tests for the BeltGenerator and MazeGenerator classes. 

# Testing
Load up the game, especially with 4 or more Solar Systems. You'll see belts and mazes througout the Systems. There are two types of belts and two types of mazes to see. They should generate properly.

# Notes
There is still more to be done on the GSoC 2021 project, including writing a tutorial for doing mods and a few other things.


",True,603,https://api.github.com/repos/MovingBlocks/DestinationSol/pulls/603,https://github.com/MovingBlocks/DestinationSol/pull/603,closed,699,155,26,6,0,16,0,0,[],2021-08-04 02:51:21+00:00,2021-08-19 01:51:03+00:00,1292382.0,"14 days, 22:59:42","[{'comment_id': 683120838, 'comment_body': ""This isn't very informative, especially at info level ;-)\r\n\r\nYou coould perhaps throw in some sort of details from the belt config? If this gets triggered per belt is there anything unique about each belt we could log?"", 'comment_created': datetime.datetime(2021, 8, 5, 4, 32, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Cervator', 'type': 'User'}, {'comment_id': 683120986, 'comment_body': 'Eh?', 'comment_created': datetime.datetime(2021, 8, 5, 4, 32, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Cervator', 'type': 'User'}, {'comment_id': 683122995, 'comment_body': 'The need for this cast (and later similar stuff) seems like a code smell of some sort. Near midnight so my brain is too hazy to describe it better 😅 ', 'comment_created': datetime.datetime(2021, 8, 5, 4, 39, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Cervator', 'type': 'User'}, {'comment_id': 683430024, 'comment_body': ""@Cervator this was the cause of the bug causing the first system to be harder than it should have been. I'll inline an explanation"", 'comment_created': datetime.datetime(2021, 8, 5, 13, 1, 6, tzinfo=datetime.timezone.utc), 'commenter': 'IsaiahBlanks', 'type': 'User'}, {'comment_id': 683769775, 'comment_body': ""Can you add some documentation for this class to explain what it does? I know you didn't write it, but it'd help leave the codebase a cleaner place ;)"", 'comment_created': datetime.datetime(2021, 8, 5, 20, 36, 24, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 683772608, 'comment_body': ""What does the removed code do? (I'm asking for my own understanding of the changes, not because you need to add a comment or something)"", 'comment_created': datetime.datetime(2021, 8, 5, 20, 41, 22, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 683820159, 'comment_body': 'This is nitpicking: consistency in having the getter first, then the setter, might be a bit nicer for readability. This PR looks very good so far! ', 'comment_created': datetime.datetime(2021, 8, 5, 22, 13, 36, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 683820610, 'comment_body': 'Is there no setter?', 'comment_created': datetime.datetime(2021, 8, 5, 22, 14, 32, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 683823122, 'comment_body': 'I assume the same thing @Cervator said above applies here', 'comment_created': datetime.datetime(2021, 8, 5, 22, 20, 36, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 683823288, 'comment_body': 'What does this do?', 'comment_created': datetime.datetime(2021, 8, 5, 22, 20, 57, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 684819108, 'comment_body': 'I think this one has to do with the way `Context` works', 'comment_created': datetime.datetime(2021, 8, 8, 19, 33, 9, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 684819529, 'comment_body': ""Why are you declaring it a `FeatureGenerator` instance if it is a `BeltGenerator`? If you're going to cast it, you should probably either do that here or at the beginning of the previous `if` (before the line `Class<? ...`)"", 'comment_created': datetime.datetime(2021, 8, 8, 19, 36, 45, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 685671752, 'comment_body': ""You won't be setting the SystemBelt object, you will just be calling instantiateSystemBelt() at the end of your generator's build() method"", 'comment_created': datetime.datetime(2021, 8, 10, 3, 57, 45, tzinfo=datetime.timezone.utc), 'commenter': 'IsaiahBlanks', 'type': 'User'}, {'comment_id': 685672053, 'comment_body': ""I have no idea. It doesn't need to be there, I'll delete it"", 'comment_created': datetime.datetime(2021, 8, 10, 3, 58, 54, tzinfo=datetime.timezone.utc), 'commenter': 'IsaiahBlanks', 'type': 'User'}, {'comment_id': 685674229, 'comment_body': ""Good point, I'll address that."", 'comment_created': datetime.datetime(2021, 8, 10, 4, 6, 17, tzinfo=datetime.timezone.utc), 'commenter': 'IsaiahBlanks', 'type': 'User'}, {'comment_id': 687894676, 'comment_body': 'It creates a maze object if object should be a maze (the legacy code marked mazes with a negative ground height). This whole method is no longer accessed, maybe even the whole class', 'comment_created': datetime.datetime(2021, 8, 12, 16, 19, 16, tzinfo=datetime.timezone.utc), 'commenter': 'IsaiahBlanks', 'type': 'User'}]","[{'commit_sha': '04221a460e08e90bca3a1c48de0a13a536e402ef', 'committer_username': 'IsaiahBlanks', 'committer_name': 'Isaiah Blanks', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 23, 19, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b4da4db585d7704c3824be0bbe8e5b606c8e218a', 'committer_username': 'IsaiahBlanks', 'committer_name': 'Isaiah Blanks', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 23, 19, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa3ecc26e3d2c3c9c27c48b6b03fc7ae15d6bc77', 'committer_username': 'IsaiahBlanks', 'committer_name': 'Isaiah Blanks', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 23, 19, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53c6c45180d1928e73fe1ba70f3874c310538ee1', 'committer_username': 'IsaiahBlanks', 'committer_name': 'Isaiah Blanks', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 23, 19, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a72e9c4bf6d746c0c89141d641df5aa256bf26a3', 'committer_username': 'IsaiahBlanks', 'committer_name': 'Isaiah Blanks', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 23, 19, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6643dfa15ab922d9e0a0621778dcd154575df03f', 'committer_username': 'IsaiahBlanks', 'committer_name': 'Isaiah Blanks', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 23, 19, 20, 29, tzinfo=datetime.timezone.utc)}]",Isaiah Blanks,60236774,,User,,16,,7,5
717004301,Maze Layout System,"<!-- Thanks for submitting a pull request for Destination Sol! :-)
Please fill in some brief details below about the PR.
If it contains source code please make sure to do everything in the pre pull request checklist first.
If you add unit tests we'll love you forever! -->

# Description
This PR adds a system for users to add their own custom maze layouts. These are represented in JSON by 2D arrays, and in the game as areas where mazes tiles do or do not generate. Also in this PR, WorldBuilder is renamed to GalaxyBuilder.

# Testing
Fly around until you find a smaller Maze. If you are lucky, it will by a SpiralMaze. You'll be able to tell by the spiral shape the maze forms (it is a bit too big to see at once, fly around the maze a bit to tell).

# Outstanding Work
This one involves loading in JSON so I wasn't sure how to write unit tests for it, but that still need to be done. 
",True,604,https://api.github.com/repos/MovingBlocks/DestinationSol/pulls/604,https://github.com/MovingBlocks/DestinationSol/pull/604,closed,327,61,21,3,2,4,0,0,[],2021-08-20 21:19:30+00:00,2021-09-12 00:42:33+00:00,1912983.0,"22 days, 3:23:03","[{'comment_id': 693533053, 'comment_body': 'I assume this was an accident', 'comment_created': datetime.datetime(2021, 8, 22, 17, 32, 30, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 693533992, 'comment_body': ""Is there any particular reason why you're making this a field?"", 'comment_created': datetime.datetime(2021, 8, 22, 17, 40, 33, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 694441249, 'comment_body': 'Could you add a bit of documentation to explain how this works?', 'comment_created': datetime.datetime(2021, 8, 24, 2, 23, 55, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 694443596, 'comment_body': 'Just confirming this was intentional - resolve this if it was', 'comment_created': datetime.datetime(2021, 8, 24, 2, 30, 34, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}]","[{'commit_sha': '3a2dfbc70837b0e6a8aec0c87ff08b5982f8b4ff', 'committer_username': 'IsaiahBlanks', 'committer_name': 'Isaiah Blanks', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 23, 19, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0538a7a38baa22b229f8c6b0131ee157936b4c49', 'committer_username': 'IsaiahBlanks', 'committer_name': 'Isaiah Blanks', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 23, 19, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15ec638a06b1b314f6e41b8429530abff58c2f77', 'committer_username': 'IsaiahBlanks', 'committer_name': 'Isaiah Blanks', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 23, 19, 20, 29, tzinfo=datetime.timezone.utc)}]",Isaiah Blanks,60236774,,User,,16,,7,5

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
34216921,DestinationSol,MovingBlocks/DestinationSol,Java,123,327,35,64,2181,58,6,9,"[{'id': 717004301, 'number': 604, 'closed': datetime.datetime(2021, 9, 12, 0, 42, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 20, 21, 19, 30, tzinfo=datetime.timezone.utc), 'time_taken': 1912983.0, 'time_delta': '22 days, 3:23:03', 'additions': 327, 'deletions': 61, 'state': 'closed'}, {'id': 702897474, 'number': 603, 'closed': datetime.datetime(2021, 8, 19, 1, 51, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 4, 2, 51, 21, tzinfo=datetime.timezone.utc), 'time_taken': 1292382.0, 'time_delta': '14 days, 22:59:42', 'additions': 699, 'deletions': 155, 'state': 'closed'}, {'id': 694441128, 'number': 602, 'closed': datetime.datetime(2021, 7, 30, 22, 19, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 21, 14, 39, tzinfo=datetime.timezone.utc), 'time_taken': 805222.0, 'time_delta': '9 days, 7:40:22', 'additions': 993, 'deletions': 128, 'state': 'closed'}, {'id': 676370845, 'number': 597, 'closed': datetime.datetime(2021, 7, 18, 4, 49, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 23, 14, 59, 44, tzinfo=datetime.timezone.utc), 'time_taken': 2123369.0, 'time_delta': '24 days, 13:49:29', 'additions': 1761, 'deletions': 160, 'state': 'closed'}, {'id': 663937789, 'number': 596, 'closed': datetime.datetime(2021, 6, 22, 21, 54, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 7, 21, 51, 46, tzinfo=datetime.timezone.utc), 'time_taken': 1296189.0, 'time_delta': '15 days, 0:03:09', 'additions': 412, 'deletions': 0, 'state': 'closed'}, {'id': 607767827, 'number': 593, 'closed': datetime.datetime(2021, 9, 29, 2, 17, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 2, 2, 10, 20, tzinfo=datetime.timezone.utc), 'time_taken': 15552426.0, 'time_delta': '180 days, 0:07:06', 'additions': 229, 'deletions': 8, 'state': 'closed'}]"
