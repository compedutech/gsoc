pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
700949309,Mean Average Precision,"Fixes #{520}

Description:
Created a COCO Style Implementation for mAP metric. Both of them are calculated at once since both require similar calculation and have similar use case. The overall implementation is complicated so any advice to simplify it is appreciated.
Check list:

- [x] New tests are added (if a new feature is added)
- [x] New doc strings: description and/or example code are in RST format
- [x] Documentation is updated (if required)
",False,2130,https://api.github.com/repos/pytorch/ignite/pulls/2130,https://github.com/pytorch/ignite/pull/2130,open,719,0,5,40,3,53,1,0,[{'name': 'module: metrics'}],2021-08-01 17:13:58+00:00,,0.0,,"[{'comment_id': 688996992, 'comment_body': 'Compute the Mean Average Precision, right ?', 'comment_created': datetime.datetime(2021, 8, 14, 22, 5, 10, tzinfo=datetime.timezone.utc), 'commenter': 'sdesrozis', 'type': 'User'}, {'comment_id': 688997028, 'comment_body': 'Why not MeanAveragePrecision ?', 'comment_created': datetime.datetime(2021, 8, 14, 22, 5, 38, tzinfo=datetime.timezone.utc), 'commenter': 'sdesrozis', 'type': 'User'}, {'comment_id': 688997045, 'comment_body': 'Is it possible to wrap in an enum inside the class ?', 'comment_created': datetime.datetime(2021, 8, 14, 22, 6, 10, tzinfo=datetime.timezone.utc), 'commenter': 'sdesrozis', 'type': 'User'}, {'comment_id': 688997119, 'comment_body': 'Could we use some default values here ?', 'comment_created': datetime.datetime(2021, 8, 14, 22, 7, 20, tzinfo=datetime.timezone.utc), 'commenter': 'sdesrozis', 'type': 'User'}, {'comment_id': 688997350, 'comment_body': 'Could the output be a dict rather than a tensor ? It would help the user and ease the print of the results\r\n```python\r\ndef compute(self) -> Dict\r\n    # â€¦\r\n    return {\r\n        ""all"": self._summarize(),\r\n        ""all@0.5"": self._summarize(iou_thr=0.5),\r\n        ""all@0.75"": self._summarize(iou_thr=0.75),\r\n        ""small"": self._summarize(area_rng=""small""),\r\n        ""medium"": self._summarize(area_rng=""medium""),\r\n        ""large"": self._summarize(area_rng=""large""),\r\n    }\r\n```', 'comment_created': datetime.datetime(2021, 8, 14, 22, 9, 34, tzinfo=datetime.timezone.utc), 'commenter': 'sdesrozis', 'type': 'User'}, {'comment_id': 688997463, 'comment_body': 'Use defaults to simplify the usage', 'comment_created': datetime.datetime(2021, 8, 14, 22, 10, 31, tzinfo=datetime.timezone.utc), 'commenter': 'sdesrozis', 'type': 'User'}, {'comment_id': 688997614, 'comment_body': 'This example is not user friendly. Explain what the arguments are supposed to be and the meaning.', 'comment_created': datetime.datetime(2021, 8, 14, 22, 12, 24, tzinfo=datetime.timezone.utc), 'commenter': 'sdesrozis', 'type': 'User'}, {'comment_id': 689028101, 'comment_body': ""I don't understand what you are suggesting, can you please elaborate a bit?"", 'comment_created': datetime.datetime(2021, 8, 15, 4, 32, 32, tzinfo=datetime.timezone.utc), 'commenter': 'gucifer', 'type': 'User'}, {'comment_id': 691433405, 'comment_body': 'it misses `__all__ = [...]`', 'comment_created': datetime.datetime(2021, 8, 18, 16, 48, 59, tzinfo=datetime.timezone.utc), 'commenter': 'sdesrozis', 'type': 'User'}, {'comment_id': 691434168, 'comment_body': ""Is there a test of this method ? To keep it private (and don't show it in the doc), please use a private naming (like `_iou`)"", 'comment_created': datetime.datetime(2021, 8, 18, 16, 49, 58, tzinfo=datetime.timezone.utc), 'commenter': 'sdesrozis', 'type': 'User'}, {'comment_id': 691435983, 'comment_body': 'The naming of the `Y` variable does not respect the PEP8 convention. Please fix and check the file.', 'comment_created': datetime.datetime(2021, 8, 18, 16, 52, 17, tzinfo=datetime.timezone.utc), 'commenter': 'sdesrozis', 'type': 'User'}, {'comment_id': 691436547, 'comment_body': ""Add a comment to explain the format of the tensors.\r\n\r\nGlobally, formulas like `pa = P[2] * P[3]` can't be understood without explanation. Please, think about the devs who will have maintain this code."", 'comment_created': datetime.datetime(2021, 8, 18, 16, 53, 4, tzinfo=datetime.timezone.utc), 'commenter': 'sdesrozis', 'type': 'User'}, {'comment_id': 691438226, 'comment_body': 'Why the array is filled in reverse order ? ', 'comment_created': datetime.datetime(2021, 8, 18, 16, 55, 16, tzinfo=datetime.timezone.utc), 'commenter': 'sdesrozis', 'type': 'User'}, {'comment_id': 691439859, 'comment_body': 'Could we have iscrowd optional ?', 'comment_created': datetime.datetime(2021, 8, 18, 16, 57, 24, tzinfo=datetime.timezone.utc), 'commenter': 'sdesrozis', 'type': 'User'}, {'comment_id': 691440883, 'comment_body': 'area, crowd, ignore are not so trivial. Could you explain ? This docstring is the root of the doc, it should be extremely clear.', 'comment_created': datetime.datetime(2021, 8, 18, 16, 58, 42, tzinfo=datetime.timezone.utc), 'commenter': 'sdesrozis', 'type': 'User'}, {'comment_id': 691445429, 'comment_body': '`all` shoudl be excluded', 'comment_created': datetime.datetime(2021, 8, 18, 17, 5, 4, tzinfo=datetime.timezone.utc), 'commenter': 'sdesrozis', 'type': 'User'}, {'comment_id': 691447188, 'comment_body': 'Naming is not PEP8 compliant.\r\n\r\nAnyway, the labels would be included in the class. Sorry, it was not a good idea to have it in a specific class. Please, add the labels statically in the class\r\n\r\n```python\r\nclass MeanAveragePrecision(Metric):\r\n    __id = 0\r\n   __category_id = 1\r\n   ...\r\n\r\n   def __init(...):\r\n      ....\r\n```', 'comment_created': datetime.datetime(2021, 8, 18, 17, 7, 38, tzinfo=datetime.timezone.utc), 'commenter': 'sdesrozis', 'type': 'User'}, {'comment_id': 691448888, 'comment_body': 'Could you improve the design to avoid the stack ?', 'comment_created': datetime.datetime(2021, 8, 18, 17, 10, 5, tzinfo=datetime.timezone.utc), 'commenter': 'sdesrozis', 'type': 'User'}, {'comment_id': 691449837, 'comment_body': 'Add a few comments to help the understanding please', 'comment_created': datetime.datetime(2021, 8, 18, 17, 11, 30, tzinfo=datetime.timezone.utc), 'commenter': 'sdesrozis', 'type': 'User'}, {'comment_id': 691451290, 'comment_body': 'why not use the full `y` and `y_pred` instead of extracting parts of the data ? It means having `iou` in the class and not as a generic and public method.', 'comment_created': datetime.datetime(2021, 8, 18, 17, 13, 39, tzinfo=datetime.timezone.utc), 'commenter': 'sdesrozis', 'type': 'User'}, {'comment_id': 691451848, 'comment_body': 'The name of the method is not relevant. Choose a better name and add a few comments please.', 'comment_created': datetime.datetime(2021, 8, 18, 17, 14, 29, tzinfo=datetime.timezone.utc), 'commenter': 'sdesrozis', 'type': 'User'}, {'comment_id': 691453743, 'comment_body': 'useless', 'comment_created': datetime.datetime(2021, 8, 18, 17, 17, 5, tzinfo=datetime.timezone.utc), 'commenter': 'sdesrozis', 'type': 'User'}, {'comment_id': 691454858, 'comment_body': 'The exception seems weird. Could you explain ?', 'comment_created': datetime.datetime(2021, 8, 18, 17, 18, 40, tzinfo=datetime.timezone.utc), 'commenter': 'sdesrozis', 'type': 'User'}, {'comment_id': 691455317, 'comment_body': 'Does this comment have any meaning ?', 'comment_created': datetime.datetime(2021, 8, 18, 17, 19, 17, tzinfo=datetime.timezone.utc), 'commenter': 'sdesrozis', 'type': 'User'}, {'comment_id': 691457718, 'comment_body': '```python\r\nrange_index = list(self.object_area_ranges.keys()).index(area_range)\r\n```\r\n?', 'comment_created': datetime.datetime(2021, 8, 18, 17, 22, 24, tzinfo=datetime.timezone.utc), 'commenter': 'sdesrozis', 'type': 'User'}, {'comment_id': 691458919, 'comment_body': 'if 0.5 and 0.75 are not values from tresholds, what happen ? ', 'comment_created': datetime.datetime(2021, 8, 18, 17, 24, 6, tzinfo=datetime.timezone.utc), 'commenter': 'sdesrozis', 'type': 'User'}, {'comment_id': 691460142, 'comment_body': '```python\r\nif not dist.is_available():\r\n    return\r\nif not dist.is_initialized():\r\n    return\r\n```\r\nPlease keep it simple...', 'comment_created': datetime.datetime(2021, 8, 18, 17, 25, 46, tzinfo=datetime.timezone.utc), 'commenter': 'sdesrozis', 'type': 'User'}, {'comment_id': 691462551, 'comment_body': '```python\r\ncombined_eval_imgs = defaultdict(list)\r\nfor eval_imgs in eval_gather_dicts:\r\n    for key, value in eval_imgs.items():\r\n        combined_eval_imgs[key] += value\r\n```\r\nWhat do you think ?', 'comment_created': datetime.datetime(2021, 8, 18, 17, 29, 4, tzinfo=datetime.timezone.utc), 'commenter': 'sdesrozis', 'type': 'User'}, {'comment_id': 691465195, 'comment_body': 'why should all be excluded? We have to compute it atleast once.', 'comment_created': datetime.datetime(2021, 8, 18, 17, 32, 35, tzinfo=datetime.timezone.utc), 'commenter': 'gucifer', 'type': 'User'}, {'comment_id': 691481689, 'comment_body': 'It improves code readability to pass only the bounding boxes. Otherwise it would become difficult to track what is being passed where, if a new person reads it.', 'comment_created': datetime.datetime(2021, 8, 18, 17, 55, 8, tzinfo=datetime.timezone.utc), 'commenter': 'gucifer', 'type': 'User'}, {'comment_id': 691482145, 'comment_body': 'And for the public iou method, I can make it a static method inside MeanAveragePrecision class.', 'comment_created': datetime.datetime(2021, 8, 18, 17, 55, 45, tzinfo=datetime.timezone.utc), 'commenter': 'gucifer', 'type': 'User'}, {'comment_id': 691755653, 'comment_body': 'Because of confidence sorting used in self._eval_images and self._compute_iou.', 'comment_created': datetime.datetime(2021, 8, 19, 3, 41, 50, tzinfo=datetime.timezone.utc), 'commenter': 'gucifer', 'type': 'User'}, {'comment_id': 691755954, 'comment_body': 'We could, but since we already have crowd field in the input, better to check it here itself than checking it elsewhere first and passing None.', 'comment_created': datetime.datetime(2021, 8, 19, 3, 42, 48, tzinfo=datetime.timezone.utc), 'commenter': 'gucifer', 'type': 'User'}, {'comment_id': 691756289, 'comment_body': 'I kept it as it is since it will get complicated....., did you check it again like we discussed on discord?', 'comment_created': datetime.datetime(2021, 8, 19, 3, 43, 51, tzinfo=datetime.timezone.utc), 'commenter': 'gucifer', 'type': 'User'}, {'comment_id': 691757228, 'comment_body': ""If the recording threshold(self.rec_thresholds) doesn't exist in the recall(rc) tensor, it will return len(rc) + 1 for that value. So we use try and except to skip past that value."", 'comment_created': datetime.datetime(2021, 8, 19, 3, 47, 5, tzinfo=datetime.timezone.utc), 'commenter': 'gucifer', 'type': 'User'}, {'comment_id': 691757299, 'comment_body': 'It will return -1.', 'comment_created': datetime.datetime(2021, 8, 19, 3, 47, 19, tzinfo=datetime.timezone.utc), 'commenter': 'gucifer', 'type': 'User'}, {'comment_id': 691835800, 'comment_body': 'I mean crowd may not be an input. Typically, this could not be an input for a lot of datasets', 'comment_created': datetime.datetime(2021, 8, 19, 6, 54, 48, tzinfo=datetime.timezone.utc), 'commenter': 'sdesrozis', 'type': 'User'}, {'comment_id': 691839804, 'comment_body': 'From https://github.com/pytorch/vision/blob/759c5b6dc2dfe46735bf724839f815b5cd79af09/torchvision/models/detection/mask_rcnn.py#L27\r\n\r\nIt would be simpler to handle a dict format rather than a plain tensor format. What do you think ? It would be easier to have optional crowd, ignore, etc.', 'comment_created': datetime.datetime(2021, 8, 19, 7, 1, 26, tzinfo=datetime.timezone.utc), 'commenter': 'sdesrozis', 'type': 'User'}, {'comment_id': 691840524, 'comment_body': '`area` can be deduced from height and width, it can be removed.', 'comment_created': datetime.datetime(2021, 8, 19, 7, 2, 41, tzinfo=datetime.timezone.utc), 'commenter': 'sdesrozis', 'type': 'User'}, {'comment_id': 691842165, 'comment_body': 'Does this function tested ?', 'comment_created': datetime.datetime(2021, 8, 19, 7, 5, 40, tzinfo=datetime.timezone.utc), 'commenter': 'sdesrozis', 'type': 'User'}, {'comment_id': 691842916, 'comment_body': 'why `y` and `y_pred` are not passed directly ?  ', 'comment_created': datetime.datetime(2021, 8, 19, 7, 7, tzinfo=datetime.timezone.utc), 'commenter': 'sdesrozis', 'type': 'User'}, {'comment_id': 691913238, 'comment_body': 'Compare it against pycocotools iou function in test?', 'comment_created': datetime.datetime(2021, 8, 19, 8, 46, 37, tzinfo=datetime.timezone.utc), 'commenter': 'gucifer', 'type': 'User'}, {'comment_id': 691916223, 'comment_body': '`crowd` parameter never initialized', 'comment_created': datetime.datetime(2021, 8, 19, 8, 50, 28, tzinfo=datetime.timezone.utc), 'commenter': 'sdesrozis', 'type': 'User'}, {'comment_id': 691926246, 'comment_body': ""It is a parameter from user side. We can't use it..."", 'comment_created': datetime.datetime(2021, 8, 19, 9, 3, 38, tzinfo=datetime.timezone.utc), 'commenter': 'sdesrozis', 'type': 'User'}, {'comment_id': 693362654, 'comment_body': 'Sizes of tensor (ie B) have no sense. We talked about a list of dict, one per image. So image_id should be an int (or a tensor of size one), etc. ', 'comment_created': datetime.datetime(2021, 8, 21, 14, 43, 49, tzinfo=datetime.timezone.utc), 'commenter': 'sdesrozis', 'type': 'User'}, {'comment_id': 693362806, 'comment_body': 'We donâ€™t use assert in ignite, but exception.', 'comment_created': datetime.datetime(2021, 8, 21, 14, 45, 14, tzinfo=datetime.timezone.utc), 'commenter': 'sdesrozis', 'type': 'User'}, {'comment_id': 693363183, 'comment_body': 'I donâ€™t see why y_predâ€™s boxes should be sorted by score. Moreover, that is not mentioned in the iou method.', 'comment_created': datetime.datetime(2021, 8, 21, 14, 48, 35, tzinfo=datetime.timezone.utc), 'commenter': 'sdesrozis', 'type': 'User'}, {'comment_id': 693477857, 'comment_body': ""iou method is generic, for 'a' y_bbox and 'b' y_pred_bbox it return a matrix of size 'a x b' containing all the respective ious. We are passing it sorted list because in eval_image function we are sorting y_preds according to confidence as well for greedy matching."", 'comment_created': datetime.datetime(2021, 8, 22, 10, 14, 8, tzinfo=datetime.timezone.utc), 'commenter': 'gucifer', 'type': 'User'}, {'comment_id': 694320546, 'comment_body': '`outputs` is defined as a tuple but seems considered as a list. ', 'comment_created': datetime.datetime(2021, 8, 23, 21, 26, 21, tzinfo=datetime.timezone.utc), 'commenter': 'sdesrozis', 'type': 'User'}, {'comment_id': 694320745, 'comment_body': 'A test is required.', 'comment_created': datetime.datetime(2021, 8, 23, 21, 26, 43, tzinfo=datetime.timezone.utc), 'commenter': 'sdesrozis', 'type': 'User'}, {'comment_id': 694320886, 'comment_body': 'A test is required', 'comment_created': datetime.datetime(2021, 8, 23, 21, 27, tzinfo=datetime.timezone.utc), 'commenter': 'sdesrozis', 'type': 'User'}, {'comment_id': 694322321, 'comment_body': 'A test is required ', 'comment_created': datetime.datetime(2021, 8, 23, 21, 29, 23, tzinfo=datetime.timezone.utc), 'commenter': 'sdesrozis', 'type': 'User'}, {'comment_id': 694325518, 'comment_body': 'Maybe it should be done in the method instead of here ?', 'comment_created': datetime.datetime(2021, 8, 23, 21, 35, 25, tzinfo=datetime.timezone.utc), 'commenter': 'sdesrozis', 'type': 'User'}]","[{'commit_sha': '1dfaa075f3af47b253a5e25fe54cda2b6e43cacf', 'committer_username': 'gucifer', 'committer_name': 'Arpan Parikh', 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 10, 6, 1, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e029eeb4af6201e83b491d19bd44d65693fa1f42', 'committer_username': 'gucifer', 'committer_name': 'Arpan Parikh', 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 10, 6, 1, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b9785ccb79fe524ff9bb5e753c1d8a328f1fa5e', 'committer_username': 'gucifer', 'committer_name': 'Arpan Parikh', 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 10, 6, 1, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95d5f6a3109dc3cb259492e1f9620fbb12f74e12', 'committer_username': 'gucifer', 'committer_name': 'Arpan Parikh', 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 10, 6, 1, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8445d7e01cd4ac2b84c53e2ec19ccad3b8c5ffa1', 'committer_username': 'gucifer', 'committer_name': 'Arpan Parikh', 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 10, 6, 1, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f44582d7a5245e4ca2dee46942f1469d9c93be2b', 'committer_username': 'gucifer', 'committer_name': 'Arpan Parikh', 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 10, 6, 1, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f485bef9a4925699484321fe6da82567a7344a6', 'committer_username': 'gucifer', 'committer_name': 'Arpan Parikh', 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 10, 6, 1, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4a2428e8b28c287f41e585157ade12e25a332490', 'committer_username': 'gucifer', 'committer_name': 'Arpan Parikh', 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 10, 6, 1, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3159a1d96b8547e7c3cda14461614f12ad49ba56', 'committer_username': 'gucifer', 'committer_name': 'Arpan Parikh', 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 10, 6, 1, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1af4f795260d54ce2ab93793fcab1c096d604326', 'committer_username': 'gucifer', 'committer_name': 'Arpan Parikh', 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 10, 6, 1, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3de6cfaab6ca1c813aaffe216a79a914fa6d74f', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '17de296879a83c612a2804a7c1bc6067026f26a5', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'c0a9ea2195e95d30c47cdd33bcb4887dfecc305e', 'committer_username': 'gucifer', 'committer_name': 'Arpan Parikh', 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 10, 6, 1, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3bc6d658162addb3bf54391586a810a01a352653', 'committer_username': 'gucifer', 'committer_name': 'Arpan Parikh', 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 10, 6, 1, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '067ff3ea4d0b0939a2c46b57e4cad037d2835649', 'committer_username': 'gucifer', 'committer_name': 'Arpan Parikh', 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 10, 6, 1, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20a83646603dcbf0c9d14bd6aa0a934357d38c6d', 'committer_username': 'gucifer', 'committer_name': 'Arpan Parikh', 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 10, 6, 1, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c68523e0175b515345f785c577104d23f3c0f462', 'committer_username': 'gucifer', 'committer_name': 'Arpan Parikh', 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 10, 6, 1, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '41f20cb25ba571abe6db6a46cca6f566544559e0', 'committer_username': 'gucifer', 'committer_name': 'Arpan Parikh', 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 10, 6, 1, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4cf53ab38e343857bc687b26ff9dca55e618f8a3', 'committer_username': 'gucifer', 'committer_name': 'Arpan Parikh', 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 10, 6, 1, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16723d2f0934f160d18412b54f20fd5c5e48e51f', 'committer_username': 'gucifer', 'committer_name': 'Arpan Parikh', 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 10, 6, 1, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '939eb56edf99e97601e7c43ff063917472d07c35', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '2bc3adfe6492f73fd30e1e2a83e15021dfb914b0', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'e65e2545f731409fcaaccab664ea839570ce2138', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '8c5b54ba7570d9d8da4ac798987fb7aeb7a052b3', 'committer_username': 'sdesrozis', 'committer_name': 'Sylvain Desroziers', 'committer_email': 'sylvain.desroziers@gmail.com', 'commit_date': datetime.datetime(2014, 11, 30, 22, 3, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b48fe43f4286ff5626b9e425be133079918c4e5a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'e2417aa745bdb5762009ae2a1a536a4d5b4808ee', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'd49240d1fe9bb76366d5ac22b1231d5ea778df79', 'committer_username': 'gucifer', 'committer_name': 'Arpan Parikh', 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 10, 6, 1, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '221c1bc957ed48773f56dfa62c54c9f722cf0a50', 'committer_username': 'gucifer', 'committer_name': 'Arpan Parikh', 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 10, 6, 1, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '154b568aab76dc26a5936a317afb28e7d4059229', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '5e212ed5e265a81cba8f80e89810b8c76214b039', 'committer_username': 'gucifer', 'committer_name': 'Arpan Parikh', 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 10, 6, 1, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a0628f94f64c1c1f8a9d0653671e9508ae5d7a2', 'committer_username': 'gucifer', 'committer_name': 'Arpan Parikh', 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 10, 6, 1, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc43c09ade947a4efd58b3dcdcd7439ca70dc97e', 'committer_username': 'gucifer', 'committer_name': 'Arpan Parikh', 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 10, 6, 1, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '197f0b421283033edcc5ccf4310e354c46eec948', 'committer_username': 'gucifer', 'committer_name': 'Arpan Parikh', 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 10, 6, 1, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c94a99d837e3fe1226e0c857c221f33e13138ff9', 'committer_username': 'gucifer', 'committer_name': 'Arpan Parikh', 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 10, 6, 1, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e30223cf054dea1b8b4be2d4400f941a1862347', 'committer_username': 'gucifer', 'committer_name': 'Arpan Parikh', 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 10, 6, 1, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73f3a3fb17b4fe88f97ed6dbdece3f4d43123f7f', 'committer_username': 'gucifer', 'committer_name': 'Arpan Parikh', 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 10, 6, 1, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e85f7c23b3b3f5fea95e6beecc97b93f1f0abfb3', 'committer_username': 'sdesrozis', 'committer_name': 'Sylvain Desroziers', 'committer_email': 'sylvain.desroziers@gmail.com', 'commit_date': datetime.datetime(2014, 11, 30, 22, 3, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e6eed403b897cf85463dee5b293f697ee32eee1f', 'committer_username': 'gucifer', 'committer_name': 'Arpan Parikh', 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 10, 6, 1, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c1210d34f922e93ec20b59a8c9ba2d4f2327991', 'committer_username': 'gucifer', 'committer_name': 'Arpan Parikh', 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 10, 6, 1, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5710292651f4bda628aee1f7e0e7edc5c7b20a1', 'committer_username': 'gucifer', 'committer_name': 'Arpan Parikh', 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 10, 6, 1, 4, tzinfo=datetime.timezone.utc)}]",Arpan Parikh,22112335,,User,,36,,8,6

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
111835796,ignite,pytorch/ignite,Python,610,4506,60,213,1716,154,31,41,"[{'id': 718375870, 'number': 2176, 'closed': datetime.datetime(2021, 8, 24, 14, 25, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 24, 3, 23, 44, tzinfo=datetime.timezone.utc), 'time_taken': 39703.0, 'time_delta': '11:01:43', 'additions': 4, 'deletions': 4, 'state': 'closed'}, {'id': 700949309, 'number': 2130, 'closed': None, 'created': datetime.datetime(2021, 8, 1, 17, 13, 58, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 719, 'deletions': 0, 'state': 'open'}, {'id': 684538991, 'number': 2099, 'closed': datetime.datetime(2021, 9, 4, 13, 32, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 6, 17, 0, 33, tzinfo=datetime.timezone.utc), 'time_taken': 5171507.0, 'time_delta': '59 days, 20:31:47', 'additions': 122, 'deletions': 0, 'state': 'closed'}, {'id': 682600210, 'number': 2094, 'closed': datetime.datetime(2021, 7, 2, 20, 45, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 2, 12, 45, 23, tzinfo=datetime.timezone.utc), 'time_taken': 28795.0, 'time_delta': '7:59:55', 'additions': 18, 'deletions': 2, 'state': 'closed'}, {'id': 678352486, 'number': 2084, 'closed': datetime.datetime(2021, 6, 27, 14, 2, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 26, 15, 27, 47, tzinfo=datetime.timezone.utc), 'time_taken': 81295.0, 'time_delta': '22:34:55', 'additions': 12, 'deletions': 3, 'state': 'closed'}, {'id': 678316992, 'number': 2082, 'closed': datetime.datetime(2021, 6, 26, 15, 10, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 26, 10, 40, 19, tzinfo=datetime.timezone.utc), 'time_taken': 16238.0, 'time_delta': '4:30:38', 'additions': 2, 'deletions': 0, 'state': 'closed'}, {'id': 672478756, 'number': 2061, 'closed': datetime.datetime(2021, 6, 18, 12, 59, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 17, 10, 15, 59, tzinfo=datetime.timezone.utc), 'time_taken': 96203.0, 'time_delta': '1 day, 2:43:23', 'additions': 11, 'deletions': 5, 'state': 'closed'}, {'id': 672422502, 'number': 2060, 'closed': datetime.datetime(2021, 6, 17, 10, 6, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 17, 9, 13, 33, tzinfo=datetime.timezone.utc), 'time_taken': 3159.0, 'time_delta': '0:52:39', 'additions': 505, 'deletions': 0, 'state': 'closed'}, {'id': 668841172, 'number': 2053, 'closed': datetime.datetime(2021, 6, 25, 22, 7, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 12, 11, 1, 47, tzinfo=datetime.timezone.utc), 'time_taken': 1163136.0, 'time_delta': '13 days, 11:05:36', 'additions': 576, 'deletions': 112, 'state': 'closed'}, {'id': 666651402, 'number': 2049, 'closed': datetime.datetime(2021, 6, 16, 13, 6, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 10, 8, 30, 19, tzinfo=datetime.timezone.utc), 'time_taken': 534953.0, 'time_delta': '6 days, 4:35:53', 'additions': 502, 'deletions': 0, 'state': 'closed'}, {'id': 665672847, 'number': 2047, 'closed': datetime.datetime(2021, 6, 9, 21, 1, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 9, 8, 13, 58, tzinfo=datetime.timezone.utc), 'time_taken': 46042.0, 'time_delta': '12:47:22', 'additions': 2, 'deletions': 0, 'state': 'closed'}, {'id': 660717154, 'number': 2029, 'closed': datetime.datetime(2021, 6, 9, 9, 54, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 3, 8, 48, 56, tzinfo=datetime.timezone.utc), 'time_taken': 522337.0, 'time_delta': '6 days, 1:05:37', 'additions': 390, 'deletions': 0, 'state': 'closed'}, {'id': 610700476, 'number': 1911, 'closed': datetime.datetime(2021, 4, 7, 17, 9, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 7, 14, 9, 29, tzinfo=datetime.timezone.utc), 'time_taken': 10792.0, 'time_delta': '2:59:52', 'additions': 9, 'deletions': 3, 'state': 'closed'}, {'id': 603745020, 'number': 1895, 'closed': datetime.datetime(2021, 3, 30, 19, 27, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 30, 12, 57, 36, tzinfo=datetime.timezone.utc), 'time_taken': 23370.0, 'time_delta': '6:29:30', 'additions': 98900, 'deletions': 0, 'state': 'closed'}, {'id': 593638939, 'number': 1804, 'closed': datetime.datetime(2021, 3, 16, 9, 34, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 16, 7, 11, 42, tzinfo=datetime.timezone.utc), 'time_taken': 8597.0, 'time_delta': '2:23:17', 'additions': 25, 'deletions': 11, 'state': 'closed'}, {'id': 592550407, 'number': 1789, 'closed': datetime.datetime(2021, 3, 16, 5, 57, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 14, 14, 10, 52, tzinfo=datetime.timezone.utc), 'time_taken': 143222.0, 'time_delta': '1 day, 15:47:02', 'additions': 18, 'deletions': 2, 'state': 'closed'}, {'id': 591454263, 'number': 1772, 'closed': datetime.datetime(2021, 3, 14, 13, 6, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 12, 7, 56, 26, tzinfo=datetime.timezone.utc), 'time_taken': 191425.0, 'time_delta': '2 days, 5:10:25', 'additions': 742, 'deletions': 0, 'state': 'closed'}, {'id': 576372870, 'number': 1650, 'closed': datetime.datetime(2021, 3, 12, 7, 40, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 19, 10, 55, 6, tzinfo=datetime.timezone.utc), 'time_taken': 1802719.0, 'time_delta': '20 days, 20:45:19', 'additions': 484, 'deletions': 0, 'state': 'closed'}, {'id': 572359534, 'number': 1634, 'closed': datetime.datetime(2021, 2, 19, 10, 55, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 12, 8, 26, 13, tzinfo=datetime.timezone.utc), 'time_taken': 613761.0, 'time_delta': '7 days, 2:29:21', 'additions': 131, 'deletions': 0, 'state': 'closed'}]"
