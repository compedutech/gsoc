pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
425939573,html representation for jupyter notebooks,"## Description
This PR implements the html representation for arviz.InferenceData object in jupyter notebooks. Related to discussion in #1066.
<!--
Thank you so much for your PR! To help us review your contribution, please consider the following points:

- The PR title should summarize the changes, for example ""Add new group argument for the pair plot"".
  Avoid non-descriptive titles such as ""Addresses issue #348"".

- The description should provide at least 1-2 sentences describing the pull request in detail and
  link to any relevant issues.

- Please prefix the title of incomplete contributions with [WIP] (to indicate a work in
  progress). WIPs may be useful to (1) indicate you are working on something to avoid
  duplicated work, (2) request broad review of functionality or API, or (3) seek collaborators. -->

## Checklist
<!-- Feel free to remove check-list items aren't relevant to your change -->

- [x] Follows [official](https://github.com/arviz-devs/arviz/blob/master/CONTRIBUTING.md#pull-request-checklist) PR format
- [x] Code style  correct (follows pylint and black guidelines)
- [ ] Changes are listed in [changelog](https://github.com/arviz-devs/arviz/blob/master/CHANGELOG.md#v0xx-unreleased)

<!--
Also, please consider reading the contributing guidelines and code of conduct carefully before submitting the PR. They are available at
- https://github.com/arviz-devs/arviz/blob/master/CONTRIBUTING.md
- https://github.com/arviz-devs/arviz/blob/master/CODE_OF_CONDUCT.md

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in. Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",True,1217,https://api.github.com/repos/arviz-devs/arviz/pulls/1217,https://github.com/arviz-devs/arviz/pull/1217,closed,37789,879,9,32,9,33,0,0,[],2020-06-01 12:09:14+00:00,2020-06-09 19:20:54+00:00,717100.0,"8 days, 7:11:40","[{'comment_id': 433266554, 'comment_body': 'Would change object to `InferenceData` so this docstring can be read without having to refer to class name', 'comment_created': datetime.datetime(2020, 6, 1, 14, 26, 53, tzinfo=datetime.timezone.utc), 'commenter': 'canyon289', 'type': 'User'}, {'comment_id': 433269084, 'comment_body': ""Are these `+=` operators adding strings together? If so could this be changed to another method of string concat? The reason I ask is that `+=` is typically used for numbers or other things and it's confusing to see it used as strings.\r\n\r\nIts typically not used for string concats for the reasons detailed in the article below\r\n\r\nhttps://wiki.python.org/moin/PythonSpeed/PerformanceTips#String_Concatenation"", 'comment_created': datetime.datetime(2020, 6, 1, 14, 31, 10, tzinfo=datetime.timezone.utc), 'commenter': 'canyon289', 'type': 'User'}, {'comment_id': 433271944, 'comment_body': 'I would change this python function to a class that of structure. Reason for this is that\r\n\r\n1. Function doesn\'t do anything but return values\r\n2. Defining objects in a function scope makes it hard to ""get at them"" without running function\r\n3. In future use case we only want one of these things we still need to deal with the other 2 because with a function call we always get them\r\n4. In the code where this is used it\'ll make it more clear that computation likely isn\'t happening but were just ""grabbing a template""\r\n\r\n\r\n\r\n```\r\nHTMLTemplates:\r\n    html_template = xyz\r\n```\r\n\r\nAs a sidenote DataClasses would be great but they were introduced in 3.7 so if we use them here they will break ArviZ for Python 3.6 users\r\n', 'comment_created': datetime.datetime(2020, 6, 1, 14, 35, 56, tzinfo=datetime.timezone.utc), 'commenter': 'canyon289', 'type': 'User'}, {'comment_id': 433279151, 'comment_body': ""I would also rename `func` to `ds`, `group` or `data` so the name is related to the object it stores. Maybe something like:\r\n\r\n```\r\nfor group in self._groups_all:\r\n    ds = getattr(...\r\n```\r\n\r\nI'd also use `_groups_all` given that groups start hidden and users can expand the desired ones"", 'comment_created': datetime.datetime(2020, 6, 1, 14, 48, 6, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 433287503, 'comment_body': 'I am not sure about this. html repr is the default for xarray now (we could require a version where this is already default) so this will generally have no effect, and if it were not the default, it means the user has specifically changed it so undoing the change in the background and with no option to override it seems like a bad idea.\r\n\r\nHow does xarray choose between html repr and ""regular"" print? Maybe we can check xarray defaults us too to choose one or the other? ', 'comment_created': datetime.datetime(2020, 6, 1, 15, 1, 28, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 433288322, 'comment_body': ""I'd rename the `template` string to something more suited, maybe `html_repr`?"", 'comment_created': datetime.datetime(2020, 6, 1, 15, 2, 59, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 433293127, 'comment_body': 'given that the group name is added to the `id` I am guessing the id is arbitrary and the class is what defines the format used. Is that so? If so, can this be renamed so it becomes more clear what is happening? \r\n\r\nIf I am not mistaken, in `{1}` we put the whole html_repr of the xarray dataset corresponding to the group at hand, so having xr, dataset and coord but no az, idata nor group in id section is confusing.', 'comment_created': datetime.datetime(2020, 6, 1, 15, 10, 58, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 433445982, 'comment_body': ""@canyon289 Thanks for the suggestion. I'd keep it in mind for the future. I also learnt a lot of other tricks too from the article :)"", 'comment_created': datetime.datetime(2020, 6, 1, 19, 36, 17, tzinfo=datetime.timezone.utc), 'commenter': 'percygautam', 'type': 'User'}, {'comment_id': 433446487, 'comment_body': ""Okay, I understand. I've changed it to class."", 'comment_created': datetime.datetime(2020, 6, 1, 19, 37, 11, tzinfo=datetime.timezone.utc), 'commenter': 'percygautam', 'type': 'User'}, {'comment_id': 433451647, 'comment_body': 'I understand the issue, I tried to solve it by saving the default style and reapplying after the display of html_repr.\r\nxarray is doing like [this](https://github.com/jsignell/xarray/blob/1d960933ab252e0f79f7e050e6c9261d55568057/xarray/core/common.py#L138) The default option is ""text"". ', 'comment_created': datetime.datetime(2020, 6, 1, 19, 47, 48, tzinfo=datetime.timezone.utc), 'commenter': 'percygautam', 'type': 'User'}, {'comment_id': 433452283, 'comment_body': ""Yes, the id is arbitrary. I left it as it is when I first tinkered with xarray's code and forgot to change it. I've changed it."", 'comment_created': datetime.datetime(2020, 6, 1, 19, 49, 10, tzinfo=datetime.timezone.utc), 'commenter': 'percygautam', 'type': 'User'}, {'comment_id': 433802595, 'comment_body': 'I would mimic xarray behaviour. If display style is text we should not print the html repr. \r\n\r\nThe default in latest xarray is already html https://github.com/pydata/xarray/blob/master/xarray/core/options.py#L23 so we should probably require xarray>=0.15.1. I think we should have html repr by default so requiring this or later xarray version would make it default.\r\n\r\nNote that you are reading the code of a fork which is hundreds of commits behind xarray repo (which is why it still has text as default). Here is the link to official repo: https://github.com/pydata/xarray', 'comment_created': datetime.datetime(2020, 6, 2, 11, 22, 7, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 433843140, 'comment_body': 'Currently the vertical spacing between groups is very large. I think this could be due to `ul` being part of the element template as this is defining a different list for each group. Can you try moving it to the html template so that we have a single list (only one `ul` defined in html template) and the groups are then elements of this single list (one `li` per group)', 'comment_created': datetime.datetime(2020, 6, 2, 12, 39, 49, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 434061980, 'comment_body': 'Okay, I understand. I was reading the fork of the guy who implemented the html_repr for xarray a long time ago.', 'comment_created': datetime.datetime(2020, 6, 2, 17, 49, 57, tzinfo=datetime.timezone.utc), 'commenter': 'percygautam', 'type': 'User'}, {'comment_id': 434573283, 'comment_body': 'Why is this import here? Shouldnt it be at the top of the module?', 'comment_created': datetime.datetime(2020, 6, 3, 13, 39, 10, tzinfo=datetime.timezone.utc), 'commenter': 'canyon289', 'type': 'User'}, {'comment_id': 434574139, 'comment_body': 'Expand docstring. Contains html templates for what?\r\n\r\nWould change this to something along the lines of contains html templates for InferenceData repr', 'comment_created': datetime.datetime(2020, 6, 3, 13, 40, 6, tzinfo=datetime.timezone.utc), 'commenter': 'canyon289', 'type': 'User'}, {'comment_id': 434574901, 'comment_body': 'Instread of using numbers for string interpolation, using named arguments would make this easier to read and harder to mess up', 'comment_created': datetime.datetime(2020, 6, 3, 13, 40, 51, tzinfo=datetime.timezone.utc), 'commenter': 'canyon289', 'type': 'User'}, {'comment_id': 434575218, 'comment_body': 'No change required but just curious what is so specific about this style?', 'comment_created': datetime.datetime(2020, 6, 3, 13, 41, 18, tzinfo=datetime.timezone.utc), 'commenter': 'canyon289', 'type': 'User'}, {'comment_id': 435426857, 'comment_body': ""The xarray uses the style `min-width:400px; max-width:700px;` for sections. For single xarray dataset max-width is used, while when used in sub-section min-width is used.\r\nSo, we are overwriting our own style over xarray's style."", 'comment_created': datetime.datetime(2020, 6, 4, 17, 28, 27, tzinfo=datetime.timezone.utc), 'commenter': 'percygautam', 'type': 'User'}, {'comment_id': 436125235, 'comment_body': 'could it be you modified that and rolled back the changes? I have a vague memory of `f""<pre>{escape(repr(self))}</pre>""` but now I an not sure. Either way, this clearly has to be changed to use the xarray default instead of overriding it', 'comment_created': datetime.datetime(2020, 6, 5, 19, 37, 32, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 436126063, 'comment_body': ""I think you'll need this to keep both black and numpydoc happy: https://github.com/arviz-devs/arviz/blob/master/arviz/rcparams.py#L28"", 'comment_created': datetime.datetime(2020, 6, 5, 19, 39, 36, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 436225748, 'comment_body': 'This `ul`/`li` change is also marked as resolved but it is not and again I have a vague memory of seeing the `ul` moved to html instead of element template :/', 'comment_created': datetime.datetime(2020, 6, 6, 1, 37, 33, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 436261242, 'comment_body': ""Yes, that's the case. I apologize for these discrepancies. I have corrected the ones I found."", 'comment_created': datetime.datetime(2020, 6, 6, 11, 31, 23, tzinfo=datetime.timezone.utc), 'commenter': 'percygautam', 'type': 'User'}, {'comment_id': 436270984, 'comment_body': 'NIT, test should have docstring', 'comment_created': datetime.datetime(2020, 6, 6, 13, 56, 11, tzinfo=datetime.timezone.utc), 'commenter': 'canyon289', 'type': 'User'}, {'comment_id': 436270998, 'comment_body': 'This is gerat', 'comment_created': datetime.datetime(2020, 6, 6, 13, 56, 18, tzinfo=datetime.timezone.utc), 'commenter': 'canyon289', 'type': 'User'}, {'comment_id': 436271014, 'comment_body': 'Cool!', 'comment_created': datetime.datetime(2020, 6, 6, 13, 56, 32, tzinfo=datetime.timezone.utc), 'commenter': 'canyon289', 'type': 'User'}, {'comment_id': 436271458, 'comment_body': '> > I am going to request tests before merge. IMO all code should be tested if it can, and this is no exception :). I would add a test that calls `_repr_html_` directly and tests that the html string is returned.\r\n> > I would also add a tests the correct repr is returned without an explicit call. I assume this will require some mocking and to ""trick"" the non jupyter notebook test to provide the html repr.\r\n> \r\n> I have added the basic test. How do I add the second test? I looked through but couldn\'t find the way.\r\n\r\nThis is going to be  fun one. Making tests is sometimes a puzzle and harder than the actual programming itself, but important if you want you feature to be stable and not broken by any others.\r\n\r\nIn the test you\'ll have to monkeypatch `OPTIONS` to so when the test executes the value is `text` to test that this if condition works. Just being up front here it\'s going to be hard and confusing, but youre going to learn a lot more about python.\r\n\r\nI don\'t want to block this whole PR for that one thing though. We can merge but I really would like you to add this test in a followup PR. At a minimum create an issue so we can track\r\n\r\n\r\nhttps://docs.pytest.org/en/latest/monkeypatch.html', 'comment_created': datetime.datetime(2020, 6, 6, 14, 2, 43, tzinfo=datetime.timezone.utc), 'commenter': 'canyon289', 'type': 'User'}, {'comment_id': 436289606, 'comment_body': 'I think it will not be necessary to monekypatch because the display style option is already customizable similarly to an rcParam. We can start the test by setting the `display_style` to `text`/`html`, make sure the correct repr is returned and then finish the test by going back to the original displaystyle (much like your original implementation of the repr @percygautam). ', 'comment_created': datetime.datetime(2020, 6, 6, 18, 22, 31, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 436290615, 'comment_body': 'I would make this assert more specific to check all required elements are present (at least partially). i.e. for html repr to work, we need our custom part (we could check for group names being present for example), the dataset repr should be present too (we could check for variable names of for Coordinate section title being present) and also style inherited from xarray (we could test a generic line/command from the style to assert is is correclty being appended to the repr)', 'comment_created': datetime.datetime(2020, 6, 6, 18, 37, 35, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 436319468, 'comment_body': 'Its typically bad practice to have tests rely on global state like rcparam although in this case lets just do it cause monkeypatching would be annoying :D', 'comment_created': datetime.datetime(2020, 6, 7, 2, 56, 33, tzinfo=datetime.timezone.utc), 'commenter': 'canyon289', 'type': 'User'}, {'comment_id': 436385111, 'comment_body': ""I am okay with both options. We can currently implement the test using rcParams, and create the issue to track the monkeypatch test and merge this PR. I will implement the test later.\r\nThe `html_repr` really facilitates to check other methods that I am adding, so it'll be better to merge this one as soon as possible."", 'comment_created': datetime.datetime(2020, 6, 7, 17, 35, 24, tzinfo=datetime.timezone.utc), 'commenter': 'percygautam', 'type': 'User'}, {'comment_id': 436659246, 'comment_body': 'Agree with merging as soon as possible! Seems like youre only a couple linting errors away :)', 'comment_created': datetime.datetime(2020, 6, 8, 12, 35, 40, tzinfo=datetime.timezone.utc), 'commenter': 'canyon289', 'type': 'User'}]","[{'commit_sha': 'abd6430ee768a04fab90adcc65e4eecacfc843ee', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b3caf8c65618c1da8ba716142f3a2b2a998e5c8', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '13cb79c20fec8f39aad5755b4560b65b25a9abf8', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22bb29f5666ab9ac46ce82e20d496042141f44ac', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c30a54e62267f34ded903803306ab5b908c1f954', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e670a8d9e0a4367b9f3a23c54b404b2685ae6ab6', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '350cf5ed3c893574e587332db44b8d543c5512ad', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '567b82cae8ee49cc207fd7dbdfab8d45a2a9f115', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '391fe27407ef13bc614b50ce9851c6abd38c5686', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f55d99aeecaf944f4ef9daa9d7aee558e57acad0', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b18ab34a8dfcf51ccda7a4ad56b7c45da573ef33', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd43b60a803c48e3081b01d0238afc97342addb2', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e8912364f63a7cc733677b6f4fbc7986afcb1e93', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93c3dcdd009bfa3d54ab0a0a75e0d733f929f24b', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd547c391fbeacab706f8346bf71f8eb04a228735', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '766bc4b67d6ad16158e4248bbe74f12d053ea17d', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a283a2e465593cded0807a62a3ab3524d771c355', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64862b2a8caff2cf6b4abda4fd1df120b631a89b', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bfc0523e0c387b3abfce73d69da6ed608e71b407', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f0e8d8dc3f301d52197e062fce600390937a8d4d', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '981f640ad4baf1ee0bb9b3ae88bc34d51d091a5f', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f955c4f0f51073f8f622db3447934f9e378d4baa', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e6659345d5c0efe3542e3a387f0e94b2afa4e47c', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '940a956726d219587257b9fc45d9fbf4d0736dbb', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a2035e735b31c836f4ff0c322155a78a3ecb462a', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4a49cdeb48d27d68b293d062b41778f4ab99295', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '850fd230d25a60f50a97de3d65e25d9d36a15144', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '550f1bc5206edc0ca3d9a46715b8c51621330b29', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c08f288851af0e4c148e99f95d987169141b0e31', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '30ecaab45f5d38c0881b745ef52b8a13e73f85bc', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb75e3b5e2153fe2b7654c4ded66d36211665386', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '696b8a480e458c13e771fe04da18a822d0514e4a', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}]",Piyush Gautam,20489158,gautampiyus@gmail.com,User,,12,,10,6
428066342,Add to_dict method to InferenceData object,"## Description
This PR adds the `to_dict` method to InferenceData object. 
<!--
Thank you so much for your PR! To help us review your contribution, please consider the following points:

- The PR title should summarize the changes, for example ""Add new group argument for the pair plot"".
  Avoid non-descriptive titles such as ""Addresses issue #348"".

- The description should provide at least 1-2 sentences describing the pull request in detail and
  link to any relevant issues.

- Please prefix the title of incomplete contributions with [WIP] (to indicate a work in
  progress). WIPs may be useful to (1) indicate you are working on something to avoid
  duplicated work, (2) request broad review of functionality or API, or (3) seek collaborators. -->

## Checklist
<!-- Feel free to remove check-list items aren't relevant to your change -->

- [x] Follows [official](https://github.com/arviz-devs/arviz/blob/master/CONTRIBUTING.md#pull-request-checklist) PR format
- [x] New features are properly documented (with an example if appropriate)?
- [x] Includes new or updated tests to cover the new feature
- [x] Code style  correct (follows pylint and black guidelines)
- [x] Changes are listed in [changelog](https://github.com/arviz-devs/arviz/blob/master/CHANGELOG.md#v0xx-unreleased)

<!--
Also, please consider reading the contributing guidelines and code of conduct carefully before submitting the PR. They are available at
- https://github.com/arviz-devs/arviz/blob/master/CONTRIBUTING.md
- https://github.com/arviz-devs/arviz/blob/master/CODE_OF_CONDUCT.md

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in. Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",True,1223,https://api.github.com/repos/arviz-devs/arviz/pulls/1223,https://github.com/arviz-devs/arviz/pull/1223,closed,259,26,5,18,6,12,0,0,[],2020-06-04 20:19:32+00:00,2020-08-13 10:51:27+00:00,6013915.0,"69 days, 14:31:55","[{'comment_id': 439826561, 'comment_body': 'I think this can be initialized straight away of use some kind of defaultdict. There is no possibility of ret already having coords nor dims/pred_dims so it is not necessary to use setdefault (there is no possibility of overwriting a user introduced key)', 'comment_created': datetime.datetime(2020, 6, 14, 12, 47, 10, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 439826792, 'comment_body': 'it would be more versatile to use `self._group_names` (like in `map` or `sel`). ', 'comment_created': datetime.datetime(2020, 6, 14, 12, 49, 23, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 439827803, 'comment_body': 'I would rename many of these variables to make the code easier to understand. \r\n* `xr_data` -> `ds`/`dataset` (or use group and modify group in loop to group_name)\r\n  * xarray datasets have a [dictionary interface](http://xarray.pydata.org/en/stable/api.html#dictionary-interface) so there is not need to do `.data_vars`, looping over `xarray.Dataset.items()` does the same.\r\n* `key` -> `var_name`\r\n* `value` -> `da`/`dataarray`\r\n* `k_` -> `dim`/`coord_name`\r\n* `v_` -> `coord_values`', 'comment_created': datetime.datetime(2020, 6, 14, 13, 1, 22, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 439828800, 'comment_body': 'maybe it is a rebase issue, but this should not be removed', 'comment_created': datetime.datetime(2020, 6, 14, 13, 13, 42, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 439828834, 'comment_body': 'these should also be added to docstring', 'comment_created': datetime.datetime(2020, 6, 14, 13, 14, 16, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 447077318, 'comment_body': 'This will either create groups `posterior` and `warmup_posterior` or `posterior`. Not sure if this it should work like this.', 'comment_created': datetime.datetime(2020, 6, 29, 15, 55, 4, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 448536667, 'comment_body': ""I checked for only `warmup_posterior` case, and I don't think InferenceData supports this case. But I am not sure about this?"", 'comment_created': datetime.datetime(2020, 7, 1, 18, 14, 46, tzinfo=datetime.timezone.utc), 'commenter': 'percygautam', 'type': 'User'}, {'comment_id': 465324736, 'comment_body': 'I know `from_pyro` is missing them, but `pred_coords` should also be present. At least pymc3 via the `from_pymc3_predictions` allows having dimensions with the same name in predictions and ""non-predictions"" while having different coordinate values. What I\'m not so sure is if we should use `pred_dims` and `pred_coords` alone or it would be better to use `pred_dims` and `{**coords, **pred_coords}` so that repeated dims are overriden from coords using pred_coords but coords is still available', 'comment_created': datetime.datetime(2020, 8, 4, 20, 55, 14, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 467160410, 'comment_body': ""I think it'll be better to go with the second option here. "", 'comment_created': datetime.datetime(2020, 8, 7, 17, 0, 44, tzinfo=datetime.timezone.utc), 'commenter': 'percygautam', 'type': 'User'}, {'comment_id': 467171293, 'comment_body': 'sounds good', 'comment_created': datetime.datetime(2020, 8, 7, 17, 23, 8, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 467590629, 'comment_body': '@percygautam can you open an issue so we remember to add these to from_pyro and similars?', 'comment_created': datetime.datetime(2020, 8, 9, 14, 31, 1, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 467591585, 'comment_body': ""I'd use https://github.com/arviz-devs/arviz/blob/master/arviz/tests/helpers.py#L171 as it is more complete regarding groups and variables, data_random is a subset by design, otherwise, if it had all groups, it would not be of use to test extend for example, below with the warmup test, data_random has to be used"", 'comment_created': datetime.datetime(2020, 8, 9, 14, 39, 41, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}]","[{'commit_sha': '9d761ab41c554580096a171474da7a50aa174224', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9bb44bdad62feea8b235e30930148fafd4a71e48', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2230dd276c5df6510727287ca58b8bb0a9fd9e0b', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c28e186f5154b60147a39520b222af68e72e33f4', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bac2a860307a538363121b9553be2ef307767c7a', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '517586f1c5cab5ba12425652e6af434a09722b91', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9cbccf0dbd1bf001adc219c5fc983cbfadc1affa', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '316635622e87f4c4c12b078278024d9eb0294ae3', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12a795383886c14be305c1b391bbc9c9c564fce6', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '29f03e77aedde6e610b694eebec90f4b5f02119c', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d55dde65668a28e99e67436e606f8e1cbb442bb', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49217cc0777158fbf75fd43dae785e170fd46b8e', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f0450bc8cfe3e68d383f32d637d94d60dd903b46', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8282701acd70f6e160297060b170edff4d94a218', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cead0be8272f103e5c99382d8aca31f36f3a5f9a', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '24ad35792fa0f10c48fdf5b8ba8a626e7628c460', 'committer_username': 'ahartikainen', 'committer_name': 'Ari Hartikainen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 3, 6, 50, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fdd08d0c418c276b11e4a82063c88837c22b4c60', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a760c19b3540bbe4374714c7570eeda4ad8002e', 'committer_username': 'ahartikainen', 'committer_name': 'Ari Hartikainen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 3, 6, 50, 38, tzinfo=datetime.timezone.utc)}]",Piyush Gautam,20489158,gautampiyus@gmail.com,User,,12,,10,6
437451201,added methods from xr.Dataset,"## Description
Related to #1066 
<!--
Thank you so much for your PR! To help us review your contribution, please consider the following points:

- The PR title should summarize the changes, for example ""Add new group argument for the pair plot"".
  Avoid non-descriptive titles such as ""Addresses issue #348"".

- The description should provide at least 1-2 sentences describing the pull request in detail and
  link to any relevant issues.

- Please prefix the title of incomplete contributions with [WIP] (to indicate a work in
  progress). WIPs may be useful to (1) indicate you are working on something to avoid
  duplicated work, (2) request broad review of functionality or API, or (3) seek collaborators. -->

## Checklist
<!-- Feel free to remove check-list items aren't relevant to your change -->

- [x] Follows [official](https://github.com/arviz-devs/arviz/blob/master/CONTRIBUTING.md#pull-request-checklist) PR format
- [x] New features are properly documented (with an example if appropriate)?
- [x] Includes new or updated tests to cover the new feature
- [x] Code style  correct (follows pylint and black guidelines)
- [ ] Changes are listed in [changelog](https://github.com/arviz-devs/arviz/blob/master/CHANGELOG.md#v0xx-unreleased)

<!--
Also, please consider reading the contributing guidelines and code of conduct carefully before submitting the PR. They are available at
- https://github.com/arviz-devs/arviz/blob/master/CONTRIBUTING.md
- https://github.com/arviz-devs/arviz/blob/master/CODE_OF_CONDUCT.md

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in. Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",True,1254,https://api.github.com/repos/arviz-devs/arviz/pulls/1254,https://github.com/arviz-devs/arviz/pull/1254,closed,514,8,4,29,5,55,0,0,[],2020-06-20 19:28:55+00:00,2020-07-27 19:27:42+00:00,3196727.0,"36 days, 23:58:47","[{'comment_id': 446911721, 'comment_body': 'Have not tried yet, so could be completely wrong, please check. I fear that the loop will only work for one of the ways of calling stack (first example), and not the other (second example). I would find this quite confusing. Here are the two examples:\r\n\r\n```\r\narr = xr.DataArray( \r\n     np.arange(6).reshape(2, 3), \r\n     coords=[(""x"", [""a"", ""b""]), (""y"", [0, 1, 2])]\r\n) \r\nexample_1= arr.stack(z=(""x"", ""y""))\r\nexample_2 = arr.stack({""z"": (""x"", ""y"")})\r\n```\r\n\r\nNote: I think `idata.sel` does the same too, so we should probably decide what do want ArviZ to do automatically and if this behaviour of kwargs working automatically vs dicts not working automatically is desired or should be fixed.', 'comment_created': datetime.datetime(2020, 6, 29, 11, 53, 48, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 446914365, 'comment_body': 'This looks really good! I think what will need more work is the docstring, can you generate docs locally and see what is generated? \r\n\r\nIdeally docstring would containg description of `groups`, `filter_groups` and `inplace`, and then not sure if link to xarray docs or copy of xarray docstring', 'comment_created': datetime.datetime(2020, 6, 29, 11, 58, 25, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 446914475, 'comment_body': 'Thanks!', 'comment_created': datetime.datetime(2020, 6, 29, 11, 58, 39, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 446916587, 'comment_body': 'I think this should be a function from `xarray.testing`, probably `assert_identical`', 'comment_created': datetime.datetime(2020, 6, 29, 12, 2, 24, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 446917601, 'comment_body': 'Also, the `_wrap_xarray_method` was a bad skeleton to test things like this (which is why it is private unlike `map`), it should be removed now.', 'comment_created': datetime.datetime(2020, 6, 29, 12, 4, 5, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 446920356, 'comment_body': 'modify to use intersphinx, see https://arviz-devs.github.io/arviz/developer_guide.html#hyperlinks', 'comment_created': datetime.datetime(2020, 6, 29, 12, 8, 56, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 446922964, 'comment_body': 'simplify to \r\n\r\n    :meth:`xarray:xarray.Dataset.isel`\r\n\r\nthe example is `idata.sel` is pedagogical to show how would one use custom hyperlink text.', 'comment_created': datetime.datetime(2020, 6, 29, 12, 13, 31, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 446923798, 'comment_body': 'Noticed the line:\r\n\r\n    We can therefore link to matplotlib docs on Axes.plot from any docstring using :meth:`matplotlib.axes.Axes.plot`.\r\n\r\nis wrong, it should be:\r\n\r\n    We can therefore link to matplotlib docs on Axes.plot from any docstring using :meth:`mpl:matplotlib.axes.Axes.plot`.', 'comment_created': datetime.datetime(2020, 6, 29, 12, 14, 53, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 449521604, 'comment_body': ""Yeah, you're probably right. I have done the changes for the stack. Should I also correct other methods too, or wait for the lab-meeting?"", 'comment_created': datetime.datetime(2020, 7, 3, 10, 56, 11, tzinfo=datetime.timezone.utc), 'commenter': 'percygautam', 'type': 'User'}, {'comment_id': 449551035, 'comment_body': 'For the record, I sent a PR yesterday to fix this, everything should be correct now. There is surely plenty of room for improvement though', 'comment_created': datetime.datetime(2020, 7, 3, 12, 11, 28, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 449551338, 'comment_body': ""I'd wait for lab meeting"", 'comment_created': datetime.datetime(2020, 7, 3, 12, 12, 16, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 450434533, 'comment_body': 'should the first arg just be `self`', 'comment_created': datetime.datetime(2020, 7, 6, 19, 28, 7, tzinfo=datetime.timezone.utc), 'commenter': 'ahartikainen', 'type': 'User'}, {'comment_id': 450435452, 'comment_body': ""why this method doesn't need a self argument?"", 'comment_created': datetime.datetime(2020, 7, 6, 19, 30, 4, tzinfo=datetime.timezone.utc), 'commenter': 'ahartikainen', 'type': 'User'}, {'comment_id': 450435778, 'comment_body': 'Can you give a small comment about the args order? What should be there?\r\n\r\nThe first args[0] is self, but also data in later steps?', 'comment_created': datetime.datetime(2020, 7, 6, 19, 30, 45, tzinfo=datetime.timezone.utc), 'commenter': 'ahartikainen', 'type': 'User'}, {'comment_id': 450439304, 'comment_body': 'is that \\ needed?', 'comment_created': datetime.datetime(2020, 7, 6, 19, 38, 21, tzinfo=datetime.timezone.utc), 'commenter': 'ahartikainen', 'type': 'User'}, {'comment_id': 450439533, 'comment_body': 'Is there any whitespace left between desc and params?', 'comment_created': datetime.datetime(2020, 7, 6, 19, 38, 53, tzinfo=datetime.timezone.utc), 'commenter': 'ahartikainen', 'type': 'User'}, {'comment_id': 450439732, 'comment_body': 'what does this do?', 'comment_created': datetime.datetime(2020, 7, 6, 19, 39, 19, tzinfo=datetime.timezone.utc), 'commenter': 'ahartikainen', 'type': 'User'}, {'comment_id': 450440848, 'comment_body': 'Can we add example for `draw, chain --> samples`', 'comment_created': datetime.datetime(2020, 7, 6, 19, 41, 40, tzinfo=datetime.timezone.utc), 'commenter': 'ahartikainen', 'type': 'User'}, {'comment_id': 450441906, 'comment_body': '```suggestion\r\n            When `inplace==True` perform selection in-place and return `None`\r\n```', 'comment_created': datetime.datetime(2020, 7, 6, 19, 43, 55, tzinfo=datetime.timezone.utc), 'commenter': 'ahartikainen', 'type': 'User'}, {'comment_id': 450442291, 'comment_body': 'is coordinates also included in dimensions', 'comment_created': datetime.datetime(2020, 7, 6, 19, 44, 45, tzinfo=datetime.timezone.utc), 'commenter': 'ahartikainen', 'type': 'User'}, {'comment_id': 450442681, 'comment_body': '```suggestion\r\n            If ``True``, modify the InferenceData object in-place,\r\n```\r\n\r\nShould we use in-place in all occurrences?', 'comment_created': datetime.datetime(2020, 7, 6, 19, 45, 37, tzinfo=datetime.timezone.utc), 'commenter': 'ahartikainen', 'type': 'User'}, {'comment_id': 450444385, 'comment_body': 'Is this function meant for general users or only developers / advanced users?', 'comment_created': datetime.datetime(2020, 7, 6, 19, 49, 24, tzinfo=datetime.timezone.utc), 'commenter': 'ahartikainen', 'type': 'User'}, {'comment_id': 451600731, 'comment_body': 'I would make it private', 'comment_created': datetime.datetime(2020, 7, 8, 14, 44, 11, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 451606178, 'comment_body': 'doc idea, in addition to passing func (and self) to `extend_xr_method` we could also pass a parameter like `see_also : list of str` so that in addition to having a docstring composed only of description plus general parameters, A `See Also` section would also be present linking to the xarray method being extended and the strings in `see_also` argument. I think [hdi](https://arviz-devs.github.io/arviz/generated/arviz.hdi.html#arviz.hdi) is a good example of See Also usage', 'comment_created': datetime.datetime(2020, 7, 8, 14, 51, 32, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 451607243, 'comment_body': 'in the line of comments above, I think using `func(xr_data, *args, **kwargs)` will make things easier to follow and it will happen naturally if using `self` as suggested by Ari', 'comment_created': datetime.datetime(2020, 7, 8, 14, 52, 53, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 451613303, 'comment_body': 'I would remove this comment and the one below', 'comment_created': datetime.datetime(2020, 7, 8, 15, 0, 49, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 451627691, 'comment_body': 'can you add some more methods? The ones from the subset I am using the most or I think will be used the most but that are still missing are: `assign`, `assign_coords`, `sortby`\r\n\r\nSome SO answers [1](https://stackoverflow.com/questions/61827061/xarray-make-two-dataarrays-in-the-same-dataset-use-the-same-coordinate-system), [2](https://stackoverflow.com/questions/59504320/how-do-i-subdivide-refine-a-dimension-in-an-xarray-dataset) of ArviZy calculations heavily requiring xarrray.', 'comment_created': datetime.datetime(2020, 7, 8, 15, 20, 36, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 451629326, 'comment_body': 'Here I think `sum` and `quantile` could be useful too', 'comment_created': datetime.datetime(2020, 7, 8, 15, 22, 58, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 451633894, 'comment_body': 'I think it will be easier to initialize `ds` with `from_dict`, especially because I think that the created inference data should have several groups, otherwise we cannot test that the method is applied to all desired groups and **not** applied to the excluded groups. For example with 3 groups, the method can be applied to two of them and not to the third, and there are not too much groups to test each of the 3 manually. Having said that, maybe it makes more sense to create a helper function to compare an inference data to a list of datasets or something like this. I can try to think about some useful api for the helper.', 'comment_created': datetime.datetime(2020, 7, 8, 15, 29, 21, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 451635499, 'comment_body': 'kudos on testing both inplace values, however, I think it would make the test easier to follow if a fixture was used for that. `test_sel` can be a template on `inplace`, not so much on the helper I was talking about above.', 'comment_created': datetime.datetime(2020, 7, 8, 15, 31, 36, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 452345203, 'comment_body': 'I have changed it.', 'comment_created': datetime.datetime(2020, 7, 9, 16, 32, 59, tzinfo=datetime.timezone.utc), 'commenter': 'percygautam', 'type': 'User'}, {'comment_id': 452345380, 'comment_body': 'Done. Thanks!!', 'comment_created': datetime.datetime(2020, 7, 9, 16, 33, 17, tzinfo=datetime.timezone.utc), 'commenter': 'percygautam', 'type': 'User'}, {'comment_id': 452345796, 'comment_body': ""It's not needed. I was just experimenting with the docstring."", 'comment_created': datetime.datetime(2020, 7, 9, 16, 34, 2, tzinfo=datetime.timezone.utc), 'commenter': 'percygautam', 'type': 'User'}, {'comment_id': 452346350, 'comment_body': 'No, I will correct it.', 'comment_created': datetime.datetime(2020, 7, 9, 16, 35, 2, tzinfo=datetime.timezone.utc), 'commenter': 'percygautam', 'type': 'User'}, {'comment_id': 452348629, 'comment_body': 'This is used to create wrapper function which wraps around func. You can check it out [here](https://docs.python.org/3/library/functools.html#functools.wraps).', 'comment_created': datetime.datetime(2020, 7, 9, 16, 38, 45, tzinfo=datetime.timezone.utc), 'commenter': 'percygautam', 'type': 'User'}, {'comment_id': 452349403, 'comment_body': 'I will add examples to all the added methods. Thanks!', 'comment_created': datetime.datetime(2020, 7, 9, 16, 40, tzinfo=datetime.timezone.utc), 'commenter': 'percygautam', 'type': 'User'}, {'comment_id': 452349968, 'comment_body': 'Yes they are included.\r\n', 'comment_created': datetime.datetime(2020, 7, 9, 16, 40, 55, tzinfo=datetime.timezone.utc), 'commenter': 'percygautam', 'type': 'User'}, {'comment_id': 452358612, 'comment_body': 'Should I also add the description of the xarray method in `see also`?', 'comment_created': datetime.datetime(2020, 7, 9, 16, 55, 27, tzinfo=datetime.timezone.utc), 'commenter': 'percygautam', 'type': 'User'}, {'comment_id': 452361296, 'comment_body': ""Yeah, I am planning to add a `equals` method to InferenceData, similar to `xarray's` one."", 'comment_created': datetime.datetime(2020, 7, 9, 16, 59, 55, tzinfo=datetime.timezone.utc), 'commenter': 'percygautam', 'type': 'User'}, {'comment_id': 453199414, 'comment_body': 'I think self should also go here', 'comment_created': datetime.datetime(2020, 7, 11, 14, 16, 20, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 453199466, 'comment_body': 'and these ones would become `self._extend...`', 'comment_created': datetime.datetime(2020, 7, 11, 14, 16, 53, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 453213404, 'comment_body': ""I don't think this will work like this. I think as `_extend_xr_method` is a helper function, this can be defined outside the class(maybe in `base.py`)?"", 'comment_created': datetime.datetime(2020, 7, 11, 16, 55, 15, tzinfo=datetime.timezone.utc), 'commenter': 'percygautam', 'type': 'User'}, {'comment_id': 453213438, 'comment_body': 'this is returning error `self not defined`', 'comment_created': datetime.datetime(2020, 7, 11, 16, 55, 41, tzinfo=datetime.timezone.utc), 'commenter': 'percygautam', 'type': 'User'}, {'comment_id': 453214512, 'comment_body': ""I don't know, maybe ask in slack to get some advise on this? I am confused by the fact that the `wrapper` uses `_group_names` which is a private method (and I think it should be) so it should be part of idata class, maybe the wrapped method definitions should go in `__init__`? :confused: "", 'comment_created': datetime.datetime(2020, 7, 11, 17, 8, 38, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 456933642, 'comment_body': ""Hey, I don't remember what was decided in the lab-meeting. Is it discussed? What to do in this case?"", 'comment_created': datetime.datetime(2020, 7, 19, 17, 25, 45, tzinfo=datetime.timezone.utc), 'commenter': 'percygautam', 'type': 'User'}, {'comment_id': 459542385, 'comment_body': ""i'd use `idata` or `data`, `dataset` is very confusing as it seems like this is an xarray dataset"", 'comment_created': datetime.datetime(2020, 7, 23, 15, 36, 32, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 459543915, 'comment_body': 'I think this can be made a fixture, which can then be used with all methods, no need to create the idata every time. see https://github.com/arviz-devs/arviz/pull/1315/files#diff-98d6c3c4d2b318798dcd501599fa5127 with the `data_random`. `test_sel` could also use it so its code can be simplified', 'comment_created': datetime.datetime(2020, 7, 23, 15, 38, 45, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 459549714, 'comment_body': ' more methods to add: chunk, unify_chunks, load, compute, persist', 'comment_created': datetime.datetime(2020, 7, 23, 15, 47, 12, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 460430213, 'comment_body': 'I think idata copy will not be a copy which means that the asserts below `assert_identical` are not asserting what we want to check, instead `assert_identical(idata_copy.posterior, idata.posterior)` would work, and therefore the `sum` is actually having no effect. \r\n\r\nIn addition to using `.copy()` (I think idata already has the method), it is probably better to not use `sum()` but to use `sum(dim=""draw"")`, therefore in the situation I am talking about above, test would fail due to `draw` dim not being present', 'comment_created': datetime.datetime(2020, 7, 25, 18, 17, 27, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 460431016, 'comment_body': ""Okay, I understand. But I don't think we have the `.copy` method for idata (yet). Using deepcopy."", 'comment_created': datetime.datetime(2020, 7, 25, 18, 27, 5, tzinfo=datetime.timezone.utc), 'commenter': 'percygautam', 'type': 'User'}, {'comment_id': 460436795, 'comment_body': 'what was the issue with module scope? I think all the other fixtures use it.', 'comment_created': datetime.datetime(2020, 7, 25, 19, 33, 25, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 460437513, 'comment_body': 'In views of `extend` method which will require multiple inference data objects, I propose the following pattern used in https://github.com/arviz-devs/arviz/blob/master/arviz/tests/helpers.py#L43:\r\n\r\n```\r\ndef create_data_random(groups=None, seed=10):\r\n    if groups is None:\r\n        groups = [""posterior"", ""sample_stats"", ""observed_data"", ""posterior_predictive""]\r\n    rng = np.random.default_rng(seed)\r\n    data = rng.normal(size=(4, 500, 8))\r\n    idata_dict = dict(\r\n        posterior={""a"": data[..., 0], ""b"": data},\r\n        sample_stats={""a"": data[..., 0], ""b"": data},\r\n        observed_data={""b"": data[0, 0, :]},\r\n        posterior_predictive={""a"": data[..., 0], ""b"": data},\r\n        prior={""a"": data[..., 0], ""b"": data},\r\n        prior_predictive={""a"": data[..., 0], ""b"": data},\r\n    )\r\n    idata = from_dict(**{group: ary for group, ary in idata_dict.items() if group in groups})\r\n    return idata\r\n\r\n@pytest.fixture(scope=""module"")\r\ndef data_random():\r\n    idata = create_data_random()\r\n    return idata\r\n```', 'comment_created': datetime.datetime(2020, 7, 25, 19, 41, 20, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 460548804, 'comment_body': 'The tests were failing for some cases in tests which used `inplace` like `isel`, as `inplace=True`is changing the data and datarandom was being generated only once if the scope is module. I changed the scope to function (default) so that data is generated everytime.', 'comment_created': datetime.datetime(2020, 7, 26, 16, 47, 50, tzinfo=datetime.timezone.utc), 'commenter': 'percygautam', 'type': 'User'}, {'comment_id': 460549585, 'comment_body': 'Yeah, good idea!', 'comment_created': datetime.datetime(2020, 7, 26, 16, 55, 48, tzinfo=datetime.timezone.utc), 'commenter': 'percygautam', 'type': 'User'}, {'comment_id': 461067515, 'comment_body': '@OriolAbril What about this one?\r\n', 'comment_created': datetime.datetime(2020, 7, 27, 17, 55, 22, tzinfo=datetime.timezone.utc), 'commenter': 'percygautam', 'type': 'User'}]","[{'commit_sha': '14d5bb028f8c7de15d8fc5c55198e017bc7d102f', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd19a0d6aa30b2beac30efcce810fa77d0a6f1c8a', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e62354a21c4bde7426b55a42733c99f3c53e0cd1', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60e8ea0f24c1204f75fead25a63e46e1898925ee', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd5437cbcb45a6ba8b2eeae1e5198ff70b0c72f05', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ca6aa2fb338b2f8f86dbe3aec22d869d8624929', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0198c5fb5e92910272d3d6843ce251c4f42398d', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3bebab15eaf1aa648d11c942a97081c2d77df77d', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0cf4c842d8439ab88f66d9dfa724aae411125d6f', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22358fb1a93a68a3c9425be02d33e4fe08f1e180', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f8ede3796f294990136deee2d01b7e10cb95685', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d7b9cb2a9bd9f01862beb3f90e855fa3f91a2a9', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '81ddefe7bcd3c02beea7719052e1f574f25702db', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d48c4834a3508dddc35f9448425a32611d61db0', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce01b2d6cfab3707c759d2398e64df029096bfc0', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b0b23eb51cccfd5f861b05d958be4f880b794ab6', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '068f5f016c52a3e0e766d66290e4ef4f64d3378d', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ec5f2e26e4e468cd31b7ec920bab14f6cfd7c51', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7001f6b013ea19103f1290d5e5d7ec6d542ffb2a', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3134a8fce8a77c78c9dde4a0fadfe2e3402dea91', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87863635b5cf42b90866b8c621d81c78880b9fea', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5bf3bcacc27d1b4a9067a1960c5182b0ff8fe822', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f1abd78a645d247162ba1520543d8798486f469b', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '642181419666fa00404107caa00face914bcf8c4', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dacbdd770ef5b83c193b324250bd499be216c78c', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17977fc77c5c8d9ac4474eee7bfa98226f62d236', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb64bf5faf671627670c4dff5829b92707bda853', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71971f324e46f4aed0a3f96f0d278a58bba1784c', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe4e5e239bcb0b33d054b69180b74457d5430d1d', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}]",Piyush Gautam,20489158,gautampiyus@gmail.com,User,,12,,10,6
450392512,Add custom methods for InferenceData,"## Description
In continuation with the #1223 and #1254 . Related to #1066 . FIx #1239 
<!--
Thank you so much for your PR! To help us review your contribution, please consider the following points:

- The PR title should summarize the changes, for example ""Add new group argument for the pair plot"".
  Avoid non-descriptive titles such as ""Addresses issue #348"".

- The description should provide at least 1-2 sentences describing the pull request in detail and
  link to any relevant issues.

- Please prefix the title of incomplete contributions with [WIP] (to indicate a work in
  progress). WIPs may be useful to (1) indicate you are working on something to avoid
  duplicated work, (2) request broad review of functionality or API, or (3) seek collaborators. -->

## Checklist
<!-- Feel free to remove check-list items aren't relevant to your change -->

- [x] Follows [official](https://github.com/arviz-devs/arviz/blob/master/CONTRIBUTING.md#pull-request-checklist) PR format
- [x] New features are properly documented (with an example if appropriate)?
- [x] Includes new or updated tests to cover the new feature
- [x] Code style  correct (follows pylint and black guidelines)
- [ ] Changes are listed in [changelog](https://github.com/arviz-devs/arviz/blob/master/CHANGELOG.md#v0xx-unreleased)

<!--
Also, please consider reading the contributing guidelines and code of conduct carefully before submitting the PR. They are available at
- https://github.com/arviz-devs/arviz/blob/master/CONTRIBUTING.md
- https://github.com/arviz-devs/arviz/blob/master/CODE_OF_CONDUCT.md

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in. Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",True,1300,https://api.github.com/repos/arviz-devs/arviz/pulls/1300,https://github.com/arviz-devs/arviz/pull/1300,closed,161,1,2,15,4,32,0,0,[],2020-07-16 18:03:34+00:00,2020-08-08 17:55:41+00:00,1986727.0,"22 days, 23:52:07","[{'comment_id': 456966621, 'comment_body': '```suggestion\r\n        group_dict: dict of {str : dict or xarray.Dataset}, optional\r\n```', 'comment_created': datetime.datetime(2020, 7, 19, 23, 4, 7, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 456967549, 'comment_body': 'The above is following the guidance on pandas docstring guide, however, pandas docs also use the pattern `dict of str -> dict or xarray.Dataset`. Here I kind of prefer the first alternative due to the or, in general both are fine.', 'comment_created': datetime.datetime(2020, 7, 19, 23, 13, 43, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 456968144, 'comment_body': 'I would try to mimic xarray, may be even use [this same function](https://github.com/pydata/xarray/blob/1be777fe725a85b8cc0f65a2bc41f4bc2ba18043/xarray/core/utils.py#L256). This implementation behaves differently from xarray in the sense that kwargs overwrite group_dict whereas in xarray both of them being present raises an error\r\n', 'comment_created': datetime.datetime(2020, 7, 19, 23, 19, 37, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 456968601, 'comment_body': 'see for example [isel](https://github.com/pydata/xarray/blob/master/xarray/core/dataarray.py#L1042) as an example of how dict/kwargs are implemented', 'comment_created': datetime.datetime(2020, 7, 19, 23, 23, 47, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 456968818, 'comment_body': ""isn't a `continue` needed here to actually skip the group? I am more inclined towards erroring though, more or less like concat does."", 'comment_created': datetime.datetime(2020, 7, 19, 23, 25, 53, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 456969057, 'comment_body': 'this will not work for groups without `chain`, `draw` dims. I think a possible fix could be provided by #1201, until then maybe documenting that is enough', 'comment_created': datetime.datetime(2020, 7, 19, 23, 28, 37, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 456969492, 'comment_body': '```suggestion\r\n            if dataset:\r\n                setattr(self, group, dataset)\r\n                if group.startswith(WARMUP_TAG):\r\n                    self._groups_warmup.append(group)\r\n                else:\r\n                    self._groups.append(group)\r\n```', 'comment_created': datetime.datetime(2020, 7, 19, 23, 32, 34, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 456970035, 'comment_body': 'I would split that into several functions, one function to test ""normal"" behaviour, one for error, another for warning...', 'comment_created': datetime.datetime(2020, 7, 19, 23, 38, 11, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 456970119, 'comment_body': 'assert both `prior` is in `_groups` and that `prior` is an attribute of `idata`, also a warmup group should also be checked', 'comment_created': datetime.datetime(2020, 7, 19, 23, 39, 2, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 457577556, 'comment_body': 'Sorry, it was intended to add continue here. My mistake. Will raise error!', 'comment_created': datetime.datetime(2020, 7, 20, 17, 33, 12, tzinfo=datetime.timezone.utc), 'commenter': 'percygautam', 'type': 'User'}, {'comment_id': 457585304, 'comment_body': 'Should I add a warning for this?\r\n', 'comment_created': datetime.datetime(2020, 7, 20, 17, 46, 33, tzinfo=datetime.timezone.utc), 'commenter': 'percygautam', 'type': 'User'}, {'comment_id': 458027888, 'comment_body': 'sounds good', 'comment_created': datetime.datetime(2020, 7, 21, 11, 31, 38, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 460130935, 'comment_body': 'I just realized that this could raise the error after having already added some groups, not sure it is the best way to go about it. how about:\r\n\r\n```\r\n...\r\nrepeated_groups = [group for group in group_dict.keys() if group in self._groups]\r\nif repeated_groups:\r\n    raise ValueError(""{} group(s) already exists."".format(repeated_groups))\r\nfor group, dataset in ...\r\n```', 'comment_created': datetime.datetime(2020, 7, 24, 15, 37, 29, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 460135358, 'comment_body': 'We could also add the option of taking dataarrays, for example if someone has a single observed variable and generates the posterior predictive or log likelihood manually, it will most commonly be generated as a dataarray instead of a dataset. I think `convert_to_inference_data` handles both dataset and dataarray, we could do the same here', 'comment_created': datetime.datetime(2020, 7, 24, 15, 45, 1, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 460135873, 'comment_body': 'it got duplicated somehow', 'comment_created': datetime.datetime(2020, 7, 24, 15, 45, 58, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 460142291, 'comment_body': 'If you add the fixture in the methods pr you can use it here too to simplify tests', 'comment_created': datetime.datetime(2020, 7, 24, 15, 56, 43, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 460142705, 'comment_body': 'the `match` argument in `pytest.warns` should be used to make sure the right warning is being triggered', 'comment_created': datetime.datetime(2020, 7, 24, 15, 57, 27, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 460143252, 'comment_body': ""I think this can be skipped as it's the xarray function the one that raises the error, we can trust them."", 'comment_created': datetime.datetime(2020, 7, 24, 15, 58, 27, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 460143430, 'comment_body': 'same comment on `match`', 'comment_created': datetime.datetime(2020, 7, 24, 15, 58, 47, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 460144531, 'comment_body': 'I like the function, not sure about the name though, I know it was my proposal in the issue, but I think we can find a better one, merge will probably be confusing ', 'comment_created': datetime.datetime(2020, 7, 24, 16, 0, 35, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 460209756, 'comment_body': 'Yeah, makes sense. Thanks!', 'comment_created': datetime.datetime(2020, 7, 24, 18, 7, 7, tzinfo=datetime.timezone.utc), 'commenter': 'percygautam', 'type': 'User'}, {'comment_id': 460211658, 'comment_body': 'Yeah, no idea how!!', 'comment_created': datetime.datetime(2020, 7, 24, 18, 11, 21, tzinfo=datetime.timezone.utc), 'commenter': 'percygautam', 'type': 'User'}, {'comment_id': 460212684, 'comment_body': 'How does `join` or `extend` sound?', 'comment_created': datetime.datetime(2020, 7, 24, 18, 13, 38, tzinfo=datetime.timezone.utc), 'commenter': 'percygautam', 'type': 'User'}, {'comment_id': 460430627, 'comment_body': 'I like extend!', 'comment_created': datetime.datetime(2020, 7, 25, 18, 22, 11, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 463794350, 'comment_body': '```suggestion\r\n                        ""Concatenating overlapping groups is not supported unless `dim` is defined.""\r\n                        "" Valid dimensions are `chain` and `draw`. Alternatively, use extend to combine""\r\n                        "" InferenceData with overlapping groups""\r\n                    )\r\n```\r\n\r\nwith no commas present this should create a single long string instead of a tuple', 'comment_created': datetime.datetime(2020, 7, 31, 19, 33, 5, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 463794617, 'comment_body': '```suggestion\r\n        other : InferenceData\r\n```', 'comment_created': datetime.datetime(2020, 7, 31, 19, 33, 50, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 463796117, 'comment_body': '```suggestion\r\n        """"""Extend InferenceData with groups from another InferenceData.\r\n```', 'comment_created': datetime.datetime(2020, 7, 31, 19, 37, 16, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 463807442, 'comment_body': ""```suggestion\r\n        join : {'left', 'right'}, default 'left' \r\n            Defines how the two decide which group to keep when the same group is\r\n            present in both objects. 'left' will discard the group in ``other`` whereas 'right' \r\n            will keep the group in ``other`` and discard the one in ``self``.\r\n```"", 'comment_created': datetime.datetime(2020, 7, 31, 20, 2, 15, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 463808099, 'comment_body': 'Can you add a See also section linking to `concat` and to `add_groups`. Similar thing for the other two so that they link each other.', 'comment_created': datetime.datetime(2020, 7, 31, 20, 3, 8, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 463810345, 'comment_body': 'can you use the fixture from the other PR to simplify and reduce duplicated code? You can use the fixture and (for `extend`) create `idata2 = create_...` to get a 2nd idata which is different from the fixture', 'comment_created': datetime.datetime(2020, 7, 31, 20, 6, 16, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 463811577, 'comment_body': 'I think we should avoid merging to describe what `extend` does. Maybe extending or combining', 'comment_created': datetime.datetime(2020, 7, 31, 20, 7, 56, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 463984886, 'comment_body': 'Yeah, I will. I was waiting for other PR to merge and then forget altogether.', 'comment_created': datetime.datetime(2020, 8, 1, 17, 55, 30, tzinfo=datetime.timezone.utc), 'commenter': 'percygautam', 'type': 'User'}]","[{'commit_sha': 'bb0577c5bdbaf9a63db7bdbe81f87c02cd643243', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9558da3d101b754d8488099897bd183425e144fc', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd5452ae9662751ed292718ef2802311760fb4a3', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db6ef2fd5d59cc2409f2215f5deba18163fcf227', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c4e6133fe8e89abc3a9a91e22c9e6bb67cb3020', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11fb6b077f3dea119e7bcab748681276197a0436', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e22d8bc1faac4d1015601403f2628944c0fa13bd', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9cc38028af33b1c044609eae682e289e2b4fa047', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a79bc9e5b6ecf2311f024e3be643789827996afd', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9795002ef4d5e06fd667bc4d622a6ec3a3b244bf', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3eb1f866f32b58244fcde5afb40027078b205a7', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '37aa409b8adc9fd6417184c20bb4c42da74f3c76', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '85c0a836b3814c4014bbd1ae9016c0674144ad34', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c39df52d5dbdc024ea5bcdc40e672e1ce4f5351', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2e6f79d34186488b7676b32fa9f3e156dc35b7e9', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}]",Piyush Gautam,20489158,gautampiyus@gmail.com,User,,12,,10,6
467562620,Add JSON converter,"## Description
As per discussed in the channel, this PR implements the methods `from_json` and `to_json`.
<!--
Thank you so much for your PR! To help us review your contribution, please consider the following points:

- The PR title should summarize the changes, for example ""Add new group argument for the pair plot"".
  Avoid non-descriptive titles such as ""Addresses issue #348"".

- The description should provide at least 1-2 sentences describing the pull request in detail and
  link to any relevant issues.

- Please prefix the title of incomplete contributions with [WIP] (to indicate a work in
  progress). WIPs may be useful to (1) indicate you are working on something to avoid
  duplicated work, (2) request broad review of functionality or API, or (3) seek collaborators. -->

## Checklist
<!-- Feel free to remove check-list items aren't relevant to your change -->

- [x] Follows [official](https://github.com/arviz-devs/arviz/blob/master/CONTRIBUTING.md#pull-request-checklist) PR format
- [x] Includes a sample plot to visually illustrate the changes (only for plot-related functions)
- [x] New features are properly documented (with an example if appropriate)?
- [x] Includes new or updated tests to cover the new feature
- [x] Code style  correct (follows pylint and black guidelines)
- [ ] Changes are listed in [changelog](https://github.com/arviz-devs/arviz/blob/master/CHANGELOG.md#v0xx-unreleased)

<!--
Also, please consider reading the contributing guidelines and code of conduct carefully before submitting the PR. They are available at
- https://github.com/arviz-devs/arviz/blob/master/CONTRIBUTING.md
- https://github.com/arviz-devs/arviz/blob/master/CODE_OF_CONDUCT.md

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in. Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",True,1349,https://api.github.com/repos/arviz-devs/arviz/pulls/1349,https://github.com/arviz-devs/arviz/pull/1349,closed,129,1,6,13,7,27,0,0,[],2020-08-13 18:29:58+00:00,2020-08-20 11:59:43+00:00,581385.0,"6 days, 17:29:45","[{'comment_id': 470170843, 'comment_body': 'We should try to import first in try-except\r\n\r\n    import ujson as json\r\n\r\nThere are actually couple of drop-in placements for json. Should we have a function that decides which of the libs is used?', 'comment_created': datetime.datetime(2020, 8, 13, 18, 45, 50, tzinfo=datetime.timezone.utc), 'commenter': 'ahartikainen', 'type': 'User'}, {'comment_id': 470171869, 'comment_body': ""We should check would it be faster to read json in `rb` vs `r`\r\n\r\n(Probably doesn't matter, ujson is muchmuch faster)"", 'comment_created': datetime.datetime(2020, 8, 13, 18, 47, 45, tzinfo=datetime.timezone.utc), 'commenter': 'ahartikainen', 'type': 'User'}, {'comment_id': 470172909, 'comment_body': 'Should we just use `.dump`?\r\n\r\nThis will create a copy of the data in-memory, `dump` might use less ram.', 'comment_created': datetime.datetime(2020, 8, 13, 18, 49, 39, tzinfo=datetime.timezone.utc), 'commenter': 'ahartikainen', 'type': 'User'}, {'comment_id': 471704185, 'comment_body': 'should this use `filepath`', 'comment_created': datetime.datetime(2020, 8, 17, 18, 43, 3, tzinfo=datetime.timezone.utc), 'commenter': 'ahartikainen', 'type': 'User'}, {'comment_id': 471707157, 'comment_body': 'would ""wb"" work here?', 'comment_created': datetime.datetime(2020, 8, 17, 18, 47, 1, tzinfo=datetime.timezone.utc), 'commenter': 'ahartikainen', 'type': 'User'}, {'comment_id': 471714074, 'comment_body': 'oh, I must have missed this', 'comment_created': datetime.datetime(2020, 8, 17, 19, 0, 17, tzinfo=datetime.timezone.utc), 'commenter': 'percygautam', 'type': 'User'}, {'comment_id': 471714154, 'comment_body': 'Yes, it should', 'comment_created': datetime.datetime(2020, 8, 17, 19, 0, 27, tzinfo=datetime.timezone.utc), 'commenter': 'percygautam', 'type': 'User'}, {'comment_id': 471715174, 'comment_body': ""It's returning the error `TypeError: a bytes-like object is required, not 'str'`."", 'comment_created': datetime.datetime(2020, 8, 17, 19, 2, 20, tzinfo=datetime.timezone.utc), 'commenter': 'percygautam', 'type': 'User'}, {'comment_id': 471724269, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2020, 8, 17, 19, 20, 50, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 471724424, 'comment_body': '```suggestion\r\n    """"""Convert `data` with numpy.ndarray-like values to JSON-serializable form.\r\n    \r\n    Returns a new dictionary.\r\n```', 'comment_created': datetime.datetime(2020, 8, 17, 19, 21, 8, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 471724564, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2020, 8, 17, 19, 21, 25, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 471728017, 'comment_body': 'I would mimic io_netcdf and have the function in `inference_data.py` and this function call `idata.from_netcdf`', 'comment_created': datetime.datetime(2020, 8, 17, 19, 28, 39, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 471796069, 'comment_body': 'Here, now that `to_netcdf` has already been around for a while, I would actually diverge from its behaviour. I think that having grooups, coords and dims here is very confusing, we have had several issues and questions about people undestanding that `group=""prior""` means that only the prior is stored, similar thing for coords. \r\n\r\nI personally think we can force users to convert manually before calling `to_json` and have `to_json` accept only inferencedata objects. cc @ahartikainen @aloctavodia \r\n\r\nOtherwise, I would modify the docsting to be _extremely_ clear on this. All three parameters should be explicit in that they are ignored if the input is inferencedata and they should link to convert_to_inference_data', 'comment_created': datetime.datetime(2020, 8, 17, 21, 54, 17, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 471797464, 'comment_body': 'should we add an `__iter__` method to inferencedata or use a dict_like behaviour? looping over groups seems like something that should be possible and part of the public api. cc @ahartikainen @aloctavodia @canyon289 @AlexAndorra ', 'comment_created': datetime.datetime(2020, 8, 17, 21, 57, 35, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 472391288, 'comment_body': ""I'm fine with this suggestion"", 'comment_created': datetime.datetime(2020, 8, 18, 18, 16, 48, tzinfo=datetime.timezone.utc), 'commenter': 'ahartikainen', 'type': 'User'}, {'comment_id': 472391916, 'comment_body': 'Yes, that sounds reasonable.', 'comment_created': datetime.datetime(2020, 8, 18, 18, 17, 41, tzinfo=datetime.timezone.utc), 'commenter': 'ahartikainen', 'type': 'User'}, {'comment_id': 472424850, 'comment_body': 'Cool, ai think dict like is what will be more intuitive so users can choose items, keys or values, maybe renaming keys to groups?\r\n\r\nIt could be done in another PR, just thought of this here\r\n', 'comment_created': datetime.datetime(2020, 8, 18, 19, 19, 27, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 472427930, 'comment_body': ""Yes, I'll implement that!"", 'comment_created': datetime.datetime(2020, 8, 18, 19, 24, 23, tzinfo=datetime.timezone.utc), 'commenter': 'percygautam', 'type': 'User'}, {'comment_id': 472430276, 'comment_body': 'Actually that was causing circular import error as we are using `from_dict` and it imports InferenceData. ', 'comment_created': datetime.datetime(2020, 8, 18, 19, 28, 58, tzinfo=datetime.timezone.utc), 'commenter': 'percygautam', 'type': 'User'}, {'comment_id': 472467791, 'comment_body': 'Not sure I follow, ideally, inference_data will NOT import io_json, only io_json will import inference_data.py, so io_json does not even need to import json. I think that should avoid circular imports', 'comment_created': datetime.datetime(2020, 8, 18, 20, 25, 11, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 472482727, 'comment_body': 'In that case, `from_json` will be implemented in InferenceData, which would require the import of `from_dict` in `inference_data.py`.  As `from_dict` import InferenceData, that would still raise circular import error.', 'comment_created': datetime.datetime(2020, 8, 18, 20, 46, tzinfo=datetime.timezone.utc), 'commenter': 'percygautam', 'type': 'User'}, {'comment_id': 472495922, 'comment_body': ""Ooohh, true, I completely forgot from_dict was not an inferencedata method :sweat_smile: (it's to_dict only? none of them?) This is fine then"", 'comment_created': datetime.datetime(2020, 8, 18, 21, 12, 17, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 473301975, 'comment_body': '```suggestion\r\n    Function utilizes ujson -module to accelerate the process if available.\r\n```', 'comment_created': datetime.datetime(2020, 8, 19, 20, 33, 36, tzinfo=datetime.timezone.utc), 'commenter': 'ahartikainen', 'type': 'User'}, {'comment_id': 473342202, 'comment_body': '```suggestion\r\n    Will use the faster `ujson` (https://github.com/ultrajson/ultrajson) if it is available.\r\n```', 'comment_created': datetime.datetime(2020, 8, 19, 21, 31, 30, tzinfo=datetime.timezone.utc), 'commenter': 'ColCarroll', 'type': 'User'}, {'comment_id': 473342320, 'comment_body': '```suggestion\r\n    WARNING: Only idempotent in case `idata` is InferenceData.\r\n```', 'comment_created': datetime.datetime(2020, 8, 19, 21, 31, 39, tzinfo=datetime.timezone.utc), 'commenter': 'ColCarroll', 'type': 'User'}, {'comment_id': 473678695, 'comment_body': '@percygautam  maybe use this one?', 'comment_created': datetime.datetime(2020, 8, 20, 7, 11, 21, tzinfo=datetime.timezone.utc), 'commenter': 'ahartikainen', 'type': 'User'}, {'comment_id': 473682436, 'comment_body': 'okay sure', 'comment_created': datetime.datetime(2020, 8, 20, 7, 15, 51, tzinfo=datetime.timezone.utc), 'commenter': 'percygautam', 'type': 'User'}]","[{'commit_sha': 'ea090c68fa866088b268d3e034b2e46f520acfcc', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9c92ee66a0110d591a09afdd9648cb49dd84d4b', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02483551bbf2483cd9da85705573eac6f136fb8c', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2e7bf81961142164991ae2f0efceb7747214c39f', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ca3c74fd8fd4f988949eb29c4aad9b8b56bd280', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7fab469dee3ea3e1994e3d7cb79436f0f46b873f', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c15ce0624572514da5488df8fa03533b7fce4070', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd289e569320ce404e48f8fbfb7bd22455ec9310d', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af54caf86dd4be842d4f9ef120a15dd88764c591', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f52d291fff78bd8e9b942ea916839411577dbe52', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a3cff03a7df6060b7a63cf67811920336a83e3c', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ead4f9ffcf559ca16b2d0cfd1978b4f081ef862c', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11452bb8a13f5ea8de8d4fcd4a642c23e377d5f9', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}]",Piyush Gautam,20489158,gautampiyus@gmail.com,User,,12,,10,6
464759665,Documentation changes,"## Description
Modified the `extend_xr_method` to include docstring and examples. In continuation with the #1223 and #1254 and #1300. Related to #1066 .
<!--
Thank you so much for your PR! To help us review your contribution, please consider the following points:

- The PR title should summarize the changes, for example ""Add new group argument for the pair plot"".
  Avoid non-descriptive titles such as ""Addresses issue #348"".

- The description should provide at least 1-2 sentences describing the pull request in detail and
  link to any relevant issues.

- Please prefix the title of incomplete contributions with [WIP] (to indicate a work in
  progress). WIPs may be useful to (1) indicate you are working on something to avoid
  duplicated work, (2) request broad review of functionality or API, or (3) seek collaborators. -->

## Checklist
<!-- Feel free to remove check-list items aren't relevant to your change -->

- [x] Follows [official](https://github.com/arviz-devs/arviz/blob/master/CONTRIBUTING.md#pull-request-checklist) PR format
- [x] Code style  correct (follows pylint and black guidelines)
- [x] Changes are listed in [changelog](https://github.com/arviz-devs/arviz/blob/master/CHANGELOG.md#v0xx-unreleased)

<!--
Also, please consider reading the contributing guidelines and code of conduct carefully before submitting the PR. They are available at
- https://github.com/arviz-devs/arviz/blob/master/CONTRIBUTING.md
- https://github.com/arviz-devs/arviz/blob/master/CODE_OF_CONDUCT.md

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in. Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",True,1338,https://api.github.com/repos/arviz-devs/arviz/pulls/1338,https://github.com/arviz-devs/arviz/pull/1338,closed,243,20,3,7,2,5,0,0,[],2020-08-07 18:47:27+00:00,2021-01-16 01:28:59+00:00,13934492.0,"161 days, 6:41:32","[{'comment_id': 467592170, 'comment_body': 'strings are not mutable, so there is no need to do the `None` trick like with dicts or lists. You can directy set the default to `doc="""",`...', 'comment_created': datetime.datetime(2020, 8, 9, 14, 44, 28, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 467592747, 'comment_body': 'can you document the different args here now that there are several?', 'comment_created': datetime.datetime(2020, 8, 9, 14, 48, 57, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 467592826, 'comment_body': 'check the breaklines. with numpydoc, docstrings should have a single sentence in the first line (generally goes right after the """""" too, not below), then one empty line and then the extended description. Same thing for breaklines between sections.', 'comment_created': datetime.datetime(2020, 8, 9, 14, 49, 39, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 467593211, 'comment_body': 'Using some example to stack chain and draw dims into `sample` one will probably be easier to follow and understand for users', 'comment_created': datetime.datetime(2020, 8, 9, 14, 53, 45, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 467593283, 'comment_body': 'you are importing arviz as az, thus this should be `az.from_dict`, I also recommend not using dataset due to confusion with xarray datasets, better use `data`, `idata`, the name of the model like radon or eight_schools...', 'comment_created': datetime.datetime(2020, 8, 9, 14, 54, 30, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}]","[{'commit_sha': '54351833220df96b816a7f9d09feefdde2bea876', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e2aec416a22d5fcdd7ef383f795229c846729ec', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a3ee1c75a9b83990687567a555f164371ec3c0a', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '926872cade07fca9ef5f2303e1bb748ca372d443', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b80a3a669238497a53ca029a3f6c0edec928e103', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c45eca1bfc459329237b132d4aaca4ca480c6f48', 'committer_username': 'OriolAbril', 'committer_name': 'Oriol Abril-Pla', 'committer_email': None, 'commit_date': datetime.datetime(2016, 11, 25, 10, 47, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8567170202f2f6609b465d23173ea357f2f5505e', 'committer_username': 'OriolAbril', 'committer_name': 'Oriol Abril-Pla', 'committer_email': None, 'commit_date': datetime.datetime(2016, 11, 25, 10, 47, 47, tzinfo=datetime.timezone.utc)}]",Piyush Gautam,20489158,gautampiyus@gmail.com,User,,12,,10,6
470424663,add __iter__ method,"## Description
Related to discussion in #1349.
<!--
Thank you so much for your PR! To help us review your contribution, please consider the following points:

- The PR title should summarize the changes, for example ""Add new group argument for the pair plot"".
  Avoid non-descriptive titles such as ""Addresses issue #348"".

- The description should provide at least 1-2 sentences describing the pull request in detail and
  link to any relevant issues.

- Please prefix the title of incomplete contributions with [WIP] (to indicate a work in
  progress). WIPs may be useful to (1) indicate you are working on something to avoid
  duplicated work, (2) request broad review of functionality or API, or (3) seek collaborators. -->

## Checklist
<!-- Feel free to remove check-list items aren't relevant to your change -->

- [x] Follows [official](https://github.com/arviz-devs/arviz/blob/master/CONTRIBUTING.md#pull-request-checklist) PR format
- [x] Includes new or updated tests to cover the new feature
- [x] Code style  correct (follows pylint and black guidelines)
- [ ] Changes are listed in [changelog](https://github.com/arviz-devs/arviz/blob/master/CHANGELOG.md#v0xx-unreleased)

<!--
Also, please consider reading the contributing guidelines and code of conduct carefully before submitting the PR. They are available at
- https://github.com/arviz-devs/arviz/blob/master/CONTRIBUTING.md
- https://github.com/arviz-devs/arviz/blob/master/CODE_OF_CONDUCT.md

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in. Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",True,1356,https://api.github.com/repos/arviz-devs/arviz/pulls/1356,https://github.com/arviz-devs/arviz/pull/1356,closed,45,1,3,13,3,13,0,0,[],2020-08-19 20:04:56+00:00,2020-09-23 15:38:36+00:00,3008020.0,"34 days, 19:33:40","[{'comment_id': 473303452, 'comment_body': ""Do we wan't to expose this with `__iter__` or with `.keys`, `.items`, `.values`?\r\n\r\nOr how dict does it?"", 'comment_created': datetime.datetime(2020, 8, 19, 20, 36, 35, tzinfo=datetime.timezone.utc), 'commenter': 'ahartikainen', 'type': 'User'}, {'comment_id': 473304156, 'comment_body': 'I think we can assume all groups are found as an attribute, so nothing needs to be changed here.\r\n\r\nIf user add stuff `_groups_all` let it fail.', 'comment_created': datetime.datetime(2020, 8, 19, 20, 37, 58, tzinfo=datetime.timezone.utc), 'commenter': 'ahartikainen', 'type': 'User'}, {'comment_id': 473304406, 'comment_body': 'Are these still needed? `.pylintrc` should have a ignore for these.', 'comment_created': datetime.datetime(2020, 8, 19, 20, 38, 25, tzinfo=datetime.timezone.utc), 'commenter': 'ahartikainen', 'type': 'User'}, {'comment_id': 475241851, 'comment_body': 'Yeah, it ignores all these. I have added it as a habit. WIll remove.', 'comment_created': datetime.datetime(2020, 8, 23, 17, 1, 25, tzinfo=datetime.timezone.utc), 'commenter': 'percygautam', 'type': 'User'}, {'comment_id': 475242148, 'comment_body': 'In my opinion, `__iter__` will be more useful. Maybe we can add a `.groups` function (like keys) which will be more intuitive . What are your thoughts on this @OriolAbril ?', 'comment_created': datetime.datetime(2020, 8, 23, 17, 4, 33, tzinfo=datetime.timezone.utc), 'commenter': 'percygautam', 'type': 'User'}, {'comment_id': 475552728, 'comment_body': 'I think dict like will be more flexible. \r\n\r\nWhat will iter loop over? Group names? Xarray datasets? A tuple of (group name, dataset)? I think all 3 can have their uses, hence my preference for the dict like approach, as I said somewhere, renaming the `keys` to something else, maybe `groups`. __iter __ could do the same as keys as it happens for dicts or we could eventually decide on forcing expliciteness and have __iter __ raise an error explaining the 3 alternatives', 'comment_created': datetime.datetime(2020, 8, 24, 12, 8, 53, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 476641723, 'comment_body': ""Ok, I'll do that."", 'comment_created': datetime.datetime(2020, 8, 25, 18, 7, 14, tzinfo=datetime.timezone.utc), 'commenter': 'percygautam', 'type': 'User'}, {'comment_id': 476649698, 'comment_body': 'Should I add `groups` and `filter_groups` args to these?', 'comment_created': datetime.datetime(2020, 8, 25, 18, 22, 5, tzinfo=datetime.timezone.utc), 'commenter': 'percygautam', 'type': 'User'}, {'comment_id': 478141262, 'comment_body': 'I think its probably better to keep the functions as close as possible as dict counterparts, so no extra arguments. \r\n\r\nIt is true however that there is no clear way of subsetting an inferencedata on a group basis other than deleting groups. Should there be a way to do that? or doing `for ... in idata... if <condition>` is enough?', 'comment_created': datetime.datetime(2020, 8, 27, 5, 33, 27, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 478143495, 'comment_body': 'for `groups` a list is fine because we already have that same list. here however, I think using generators will perform better\r\n\r\n```suggestion\r\n        for group in self._groups_all:\r\n            yield getattr(self, group)\r\n```', 'comment_created': datetime.datetime(2020, 8, 27, 5, 37, 6, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 478144009, 'comment_body': 'same comment as above.\r\n\r\n```suggestion\r\n        for group in self._groups_all:\r\n            yield (group, getattr(self, group))\r\n```', 'comment_created': datetime.datetime(2020, 8, 27, 5, 37, 54, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 478599458, 'comment_body': 'I think adding extra arguments with default values should not be much of a problem as we can still use `groups()` similar to `keys()`. I think this will be a cleaner way to subset the idata groups.', 'comment_created': datetime.datetime(2020, 8, 27, 18, 0, 36, tzinfo=datetime.timezone.utc), 'commenter': 'percygautam', 'type': 'User'}, {'comment_id': 478621567, 'comment_body': ""I have a slight preference towards having a subsetting function and the looping ones separated because is that setting, one can do any of `idata.<subsetting>.items()`, `idata.<subsetting>` or `idata.items()` whereas adding the subsetting inside `items()` and `groups` would not allow pure subsetting yet. But again, it's a slight preference, let's see what other people thinks cc @ahartikainen @aloctavodia @AlexAndorra "", 'comment_created': datetime.datetime(2020, 8, 27, 18, 41, 42, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}]","[{'commit_sha': 'c4f43e80cf1b5cc66f1b44b74830d6eae851aedc', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a50fb32177c46fca454c9d6a7577d10dec92052', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3abc7c4b8389d395e7d747635cca23f794d6daf', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46331bcf496fd32dc8436054ee53f4d63a30e0f3', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a11b40244fd5cd0c35cd5513216cd35386e42dd', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3f82e87a4887644892e9918df6babeb14f01b73', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60ecb1d4a1c5549b54ce085dc957091f81162161', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '683068abd7417bc9b69e681ffd2ec89e00854ebc', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1471d4030d4b0b7fc3dcf9d9ae09afa102702e8d', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b1c3037bd3e55365d7d55e3642cb41bcae16149', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cde6248b0a9024692dbaf86ff9397fadca232f2d', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'df412d02034b3674d8ba890c643615411fd83a84', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '47a86cae5e466b99e8de927e9968a1d887dcdb21', 'committer_username': 'ahartikainen', 'committer_name': 'Ari Hartikainen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 3, 6, 50, 38, tzinfo=datetime.timezone.utc)}]",Piyush Gautam,20489158,gautampiyus@gmail.com,User,,12,,10,6
471212559,Add attr  and name to idata,"## Description
Related to the discussion being held in the channel.
<!--
Thank you so much for your PR! To help us review your contribution, please consider the following points:

- The PR title should summarize the changes, for example ""Add new group argument for the pair plot"".
  Avoid non-descriptive titles such as ""Addresses issue #348"".

- The description should provide at least 1-2 sentences describing the pull request in detail and
  link to any relevant issues.

- Please prefix the title of incomplete contributions with [WIP] (to indicate a work in
  progress). WIPs may be useful to (1) indicate you are working on something to avoid
  duplicated work, (2) request broad review of functionality or API, or (3) seek collaborators. -->

## Checklist
<!-- Feel free to remove check-list items aren't relevant to your change -->

- [ ] Follows [official](https://github.com/arviz-devs/arviz/blob/master/CONTRIBUTING.md#pull-request-checklist) PR format
- [ ] Includes a sample plot to visually illustrate the changes (only for plot-related functions)
- [x] New features are properly documented (with an example if appropriate)?
- [x] Includes new or updated tests to cover the new feature
- [x] Code style  correct (follows pylint and black guidelines)
- [ ] Changes are listed in [changelog](https://github.com/arviz-devs/arviz/blob/master/CHANGELOG.md#v0xx-unreleased)

<!--
Also, please consider reading the contributing guidelines and code of conduct carefully before submitting the PR. They are available at
- https://github.com/arviz-devs/arviz/blob/master/CONTRIBUTING.md
- https://github.com/arviz-devs/arviz/blob/master/CODE_OF_CONDUCT.md

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in. Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",True,1357,https://api.github.com/repos/arviz-devs/arviz/pulls/1357,https://github.com/arviz-devs/arviz/pull/1357,closed,82,33,3,16,11,1,0,0,[],2020-08-20 20:02:54+00:00,2022-01-16 16:37:36+00:00,44397282.0,"513 days, 20:34:42","[{'comment_id': 489733968, 'comment_body': 'Accepted kwargs should be docummented. ', 'comment_created': datetime.datetime(2020, 9, 16, 20, 26, 32, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}]","[{'commit_sha': '9cc5d58d52f65b6c53079b40001aab903d641c37', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb0a6c9b29b7bf3915450fcba90f1ba19e200611', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f32e23398aa903c3734972d07953c0ded8ba457b', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae6daae90a3156943731bf200d27818137fa2049', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53cbd7d08ea1f883d8969f0d4ea5d381a71c5f58', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a729944c9a0969b09d3aea21209d3f3d280b94e3', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0035f5bffd60d90ede62d4db401bf47ceb5b0c2e', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5de8b2952e1460045dda9ec468db26c36b70df08', 'committer_username': 'percygautam', 'committer_name': 'Piyush Gautam', 'committer_email': 'gautampiyus@gmail.com', 'commit_date': datetime.datetime(2016, 7, 16, 10, 28, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb16c59384db054cc974742b36439d0a563f759e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '993445fc0bf81f7902411f576bb8283a031d3d39', 'committer_username': 'ahartikainen', 'committer_name': 'Ari Hartikainen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 3, 6, 50, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '584290fba816916aac3a40b61b139534f1cbab03', 'committer_username': 'ahartikainen', 'committer_name': 'Ari Hartikainen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 3, 6, 50, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e3051c8e91a2dce76490e1f5d7b3a52d68366e3', 'committer_username': 'ahartikainen', 'committer_name': 'Ari Hartikainen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 3, 6, 50, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4217373a84f4753066f4c0fac17cca97b05c7ca0', 'committer_username': 'ahartikainen', 'committer_name': 'Ari Hartikainen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 3, 6, 50, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a4b26463d75aa8683e3d7b1fe486e090d01b0e5', 'committer_username': 'ahartikainen', 'committer_name': 'Ari Hartikainen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 3, 6, 50, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '169a980301597ea19234f4d2fb4ff54771ddef1e', 'committer_username': 'ahartikainen', 'committer_name': 'Ari Hartikainen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 3, 6, 50, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd5c4c406eacfda53ce1ba3b3bae939a8f4d2098', 'committer_username': 'ahartikainen', 'committer_name': 'Ari Hartikainen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 3, 6, 50, 38, tzinfo=datetime.timezone.utc)}]",Piyush Gautam,20489158,gautampiyus@gmail.com,User,,12,,10,6

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
39890704,arviz,arviz-devs/arviz,Python,394,1574,47,161,1557,179,7,9,"[{'id': 471212559, 'number': 1357, 'closed': datetime.datetime(2022, 1, 16, 16, 37, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 20, 20, 2, 54, tzinfo=datetime.timezone.utc), 'time_taken': 44397282.0, 'time_delta': '513 days, 20:34:42', 'additions': 82, 'deletions': 33, 'state': 'closed'}, {'id': 470424663, 'number': 1356, 'closed': datetime.datetime(2020, 9, 23, 15, 38, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 19, 20, 4, 56, tzinfo=datetime.timezone.utc), 'time_taken': 3008020.0, 'time_delta': '34 days, 19:33:40', 'additions': 45, 'deletions': 1, 'state': 'closed'}, {'id': 467562620, 'number': 1349, 'closed': datetime.datetime(2020, 8, 20, 11, 59, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 13, 18, 29, 58, tzinfo=datetime.timezone.utc), 'time_taken': 581385.0, 'time_delta': '6 days, 17:29:45', 'additions': 129, 'deletions': 1, 'state': 'closed'}, {'id': 464759665, 'number': 1338, 'closed': datetime.datetime(2021, 1, 16, 1, 28, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 7, 18, 47, 27, tzinfo=datetime.timezone.utc), 'time_taken': 13934492.0, 'time_delta': '161 days, 6:41:32', 'additions': 243, 'deletions': 20, 'state': 'closed'}, {'id': 450392512, 'number': 1300, 'closed': datetime.datetime(2020, 8, 8, 17, 55, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 16, 18, 3, 34, tzinfo=datetime.timezone.utc), 'time_taken': 1986727.0, 'time_delta': '22 days, 23:52:07', 'additions': 161, 'deletions': 1, 'state': 'closed'}, {'id': 437451201, 'number': 1254, 'closed': datetime.datetime(2020, 7, 27, 19, 27, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 20, 19, 28, 55, tzinfo=datetime.timezone.utc), 'time_taken': 3196727.0, 'time_delta': '36 days, 23:58:47', 'additions': 514, 'deletions': 8, 'state': 'closed'}, {'id': 432614753, 'number': 1234, 'closed': datetime.datetime(2020, 6, 10, 18, 57, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 10, 18, 0, 38, tzinfo=datetime.timezone.utc), 'time_taken': 3400.0, 'time_delta': '0:56:40', 'additions': 11146, 'deletions': 13126, 'state': 'closed'}, {'id': 428066342, 'number': 1223, 'closed': datetime.datetime(2020, 8, 13, 10, 51, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 4, 20, 19, 32, tzinfo=datetime.timezone.utc), 'time_taken': 6013915.0, 'time_delta': '69 days, 14:31:55', 'additions': 259, 'deletions': 26, 'state': 'closed'}, {'id': 425939573, 'number': 1217, 'closed': datetime.datetime(2020, 6, 9, 19, 20, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 1, 12, 9, 14, tzinfo=datetime.timezone.utc), 'time_taken': 717100.0, 'time_delta': '8 days, 7:11:40', 'additions': 37789, 'deletions': 879, 'state': 'closed'}, {'id': 402232468, 'number': 1148, 'closed': datetime.datetime(2020, 6, 11, 19, 50, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 11, 18, 57, 21, tzinfo=datetime.timezone.utc), 'time_taken': 5273577.0, 'time_delta': '61 days, 0:52:57', 'additions': 327, 'deletions': 1, 'state': 'closed'}, {'id': 388281764, 'number': 1117, 'closed': datetime.datetime(2020, 4, 2, 17, 14, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 14, 12, 10, 22, tzinfo=datetime.timezone.utc), 'time_taken': 1659862.0, 'time_delta': '19 days, 5:04:22', 'additions': 198, 'deletions': 69, 'state': 'closed'}, {'id': 385302149, 'number': 1111, 'closed': datetime.datetime(2020, 3, 14, 0, 27, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 8, 19, 15, 8, tzinfo=datetime.timezone.utc), 'time_taken': 450731.0, 'time_delta': '5 days, 5:12:11', 'additions': 51, 'deletions': 1, 'state': 'closed'}, {'id': 376332167, 'number': 1076, 'closed': datetime.datetime(2020, 2, 20, 9, 34, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 17, 22, 14, 31, tzinfo=datetime.timezone.utc), 'time_taken': 213593.0, 'time_delta': '2 days, 11:19:53', 'additions': 37, 'deletions': 3, 'state': 'closed'}, {'id': 376314460, 'number': 1075, 'closed': datetime.datetime(2020, 2, 18, 12, 39, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 17, 21, 5, 27, tzinfo=datetime.timezone.utc), 'time_taken': 56039.0, 'time_delta': '15:33:59', 'additions': 4, 'deletions': 1, 'state': 'closed'}, {'id': 376074142, 'number': 1073, 'closed': datetime.datetime(2020, 3, 2, 19, 22, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 17, 10, 59, 24, tzinfo=datetime.timezone.utc), 'time_taken': 1239795.0, 'time_delta': '14 days, 8:23:15', 'additions': 147, 'deletions': 86, 'state': 'closed'}, {'id': 371558644, 'number': 1047, 'closed': datetime.datetime(2020, 2, 13, 14, 31, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 5, 20, 0, tzinfo=datetime.timezone.utc), 'time_taken': 671510.0, 'time_delta': '7 days, 18:31:50', 'additions': 94, 'deletions': 27, 'state': 'closed'}, {'id': 371512654, 'number': 1046, 'closed': datetime.datetime(2020, 2, 6, 11, 58, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 5, 18, 6, 46, tzinfo=datetime.timezone.utc), 'time_taken': 64290.0, 'time_delta': '17:51:30', 'additions': 101, 'deletions': 14, 'state': 'closed'}, {'id': 370266430, 'number': 1040, 'closed': datetime.datetime(2020, 2, 11, 22, 42, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 3, 11, 25, 55, tzinfo=datetime.timezone.utc), 'time_taken': 731797.0, 'time_delta': '8 days, 11:16:37', 'additions': 47, 'deletions': 16, 'state': 'closed'}, {'id': 368730530, 'number': 1037, 'closed': datetime.datetime(2020, 2, 10, 20, 40, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 29, 19, 37, 47, tzinfo=datetime.timezone.utc), 'time_taken': 1040590.0, 'time_delta': '12 days, 1:03:10', 'additions': 45, 'deletions': 3, 'state': 'closed'}, {'id': 367723735, 'number': 1033, 'closed': datetime.datetime(2020, 1, 27, 23, 13, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 27, 21, 55, 22, tzinfo=datetime.timezone.utc), 'time_taken': 4663.0, 'time_delta': '1:17:43', 'additions': 2, 'deletions': 0, 'state': 'closed'}, {'id': 367210747, 'number': 1028, 'closed': datetime.datetime(2020, 1, 26, 18, 45, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 26, 12, 4, 43, tzinfo=datetime.timezone.utc), 'time_taken': 24054.0, 'time_delta': '6:40:54', 'additions': 46, 'deletions': 2, 'state': 'closed'}, {'id': 366499109, 'number': 1024, 'closed': datetime.datetime(2020, 2, 13, 12, 3, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 23, 18, 20, 13, tzinfo=datetime.timezone.utc), 'time_taken': 1791768.0, 'time_delta': '20 days, 17:42:48', 'additions': 135, 'deletions': 72, 'state': 'closed'}, {'id': 365309580, 'number': 1017, 'closed': datetime.datetime(2020, 1, 22, 12, 14, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 21, 13, 38, 13, tzinfo=datetime.timezone.utc), 'time_taken': 81363.0, 'time_delta': '22:36:03', 'additions': 61, 'deletions': 15, 'state': 'closed'}, {'id': 364580905, 'number': 1013, 'closed': datetime.datetime(2020, 1, 26, 2, 31, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 19, 21, 16, 16, tzinfo=datetime.timezone.utc), 'time_taken': 537289.0, 'time_delta': '6 days, 5:14:49', 'additions': 16, 'deletions': 0, 'state': 'closed'}, {'id': 363328878, 'number': 1010, 'closed': datetime.datetime(2020, 1, 22, 13, 37, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 15, 20, 42, 59, tzinfo=datetime.timezone.utc), 'time_taken': 579300.0, 'time_delta': '6 days, 16:55:00', 'additions': 138, 'deletions': 0, 'state': 'closed'}, {'id': 363311963, 'number': 1009, 'closed': datetime.datetime(2020, 1, 18, 17, 38, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 15, 19, 58, 54, tzinfo=datetime.timezone.utc), 'time_taken': 250774.0, 'time_delta': '2 days, 21:39:34', 'additions': 44, 'deletions': 29, 'state': 'closed'}, {'id': 363225126, 'number': 1006, 'closed': datetime.datetime(2020, 6, 14, 20, 47, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 15, 16, 26, 6, tzinfo=datetime.timezone.utc), 'time_taken': 13062062.0, 'time_delta': '151 days, 4:21:02', 'additions': 4, 'deletions': 10, 'state': 'closed'}, {'id': 362827758, 'number': 1001, 'closed': datetime.datetime(2020, 1, 15, 14, 13, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 14, 20, 37, 47, tzinfo=datetime.timezone.utc), 'time_taken': 63349.0, 'time_delta': '17:35:49', 'additions': 3, 'deletions': 2, 'state': 'closed'}, {'id': 362310415, 'number': 994, 'closed': datetime.datetime(2020, 1, 17, 20, 52, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 13, 20, 37, 53, tzinfo=datetime.timezone.utc), 'time_taken': 346498.0, 'time_delta': '4 days, 0:14:58', 'additions': 272, 'deletions': 253, 'state': 'closed'}]"
