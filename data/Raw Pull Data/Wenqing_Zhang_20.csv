pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
435780013,[GSoC] High Level API and Samples for Scene Text Detection and Recognition,"**Merge with extra**: opencv/opencv_extra#773
High-Level API and Samples for Scene Text Detection and Recognition
This is my project in GSoC 2020: OpenCV Text/Digit detection & recognition projects.

Short Video: https://drive.google.com/file/d/1IlGpRRhPCifC9TRzuhq0_G1P6MkP33BJ/view?usp=sharing

For more information:
https://github.com/HannibalAPE/opencv/blob/text_det_recog_demo/doc/tutorials/dnn/dnn_text_spotting/dnn_text_spotting.markdown

<cut/>

TODO LIST:

- Scene Text Recognition:
- [x] Samples
- [x] High-Level API (CRNN)

- Scene Text Detection:
- [x] Samples
- [x] High-Level API (DB & EAST)

- Scene Text Spotting:
- [x] Samples

- Document:
- [x] Tutorials

### Pull Request Readiness Checklist

- [x] I agree to contribute to the project under OpenCV (Apache 2) License.
- [x] To the best of my knowledge, the proposed patch is not based on a code under GPL or other license that is incompatible with OpenCV
- [x] The PR is proposed to proper branch
- [x] There is reference to original bug report and related work
- [x] There is accuracy test, performance test and test data in opencv_extra repository, if applicable
      But the patch to opencv_extra does not have the same branch name. see as follows.
- [x] The feature is well documented and sample code can be built with the project CMake

```
opencv_extra=text_det_rec

build_image:Custom=centos:7
buildworker:Custom=linux-1
```",True,17570,https://api.github.com/repos/opencv/opencv/pulls/17570,https://github.com/opencv/opencv/pull/17570,closed,2340,182,19,17,16,118,3,1,"[{'name': 'category: samples'}, {'name': 'GSoC'}, {'name': 'category: dnn'}]",2020-06-17 11:11:18+00:00,2020-12-03 18:47:40+00:00,14628982.0,"169 days, 7:36:22","[{'comment_id': 441492168, 'comment_body': '`decodeSeq[-1]` \r\n\r\n`-1` is illegal, maybe use `decodeSeq.back()` instead ?', 'comment_created': datetime.datetime(2020, 6, 17, 12, 1, 54, tzinfo=datetime.timezone.utc), 'commenter': 'berak', 'type': 'User'}, {'comment_id': 441497857, 'comment_body': 'just curious -- is there a pretrained onnx model (link) ?', 'comment_created': datetime.datetime(2020, 6, 17, 12, 13, 7, tzinfo=datetime.timezone.utc), 'commenter': 'berak', 'type': 'User'}, {'comment_id': 441516734, 'comment_body': 'Fix it.\r\nI got the right result with index -1, so I thought a negative index may be supported now. :(\r\nThank you.', 'comment_created': datetime.datetime(2020, 6, 17, 12, 46, 16, tzinfo=datetime.timezone.utc), 'commenter': 'HannibalAPE', 'type': 'User'}, {'comment_id': 441518806, 'comment_body': 'Maybe I can upload models to Google Drive.\r\nI am not sure about it, and I will ask my mentor.', 'comment_created': datetime.datetime(2020, 6, 17, 12, 49, 46, tzinfo=datetime.timezone.utc), 'commenter': 'HannibalAPE', 'type': 'User'}, {'comment_id': 453691282, 'comment_body': 'Where is this file?', 'comment_created': datetime.datetime(2020, 7, 13, 14, 29, 27, tzinfo=datetime.timezone.utc), 'commenter': 'bhack', 'type': 'User'}, {'comment_id': 453706880, 'comment_body': 'I have already put the data into opencv/opencv_extra, but it has not been merged yet.\r\nhttps://github.com/opencv/opencv_extra/pull/773\r\nThe name of image has been changed into ""text_rec_test.png"", and I will push again when the data is ready.\r\nThanks for your review.\r\n\r\n', 'comment_created': datetime.datetime(2020, 7, 13, 14, 50, 41, tzinfo=datetime.timezone.utc), 'commenter': 'HannibalAPE', 'type': 'User'}, {'comment_id': 453718770, 'comment_body': ""Please push the new name. You don't need to wait the merge. See [this step](https://pullrequest.opencv.org/buildbot/builders/precommit_linux64/builds/26892/steps/Merge%20opencv_extra%20with%20test%20branch/logs/stdio) in the build pipeline."", 'comment_created': datetime.datetime(2020, 7, 13, 15, 6, 53, tzinfo=datetime.timezone.utc), 'commenter': 'bhack', 'type': 'User'}, {'comment_id': 453739569, 'comment_body': 'You could use something like https://github.com/opencv/opencv/blob/73959fed4581556d8e6b770987c819adfacceb87/modules/video/perf/perf_bgfg_mog2.cpp#L30', 'comment_created': datetime.datetime(2020, 7, 13, 15, 35, 52, tzinfo=datetime.timezone.utc), 'commenter': 'bhack', 'type': 'User'}, {'comment_id': 454052567, 'comment_body': 'I feel confused that this file is only a sample for scene text detection, not an API. Is there anything related to the test?\r\nWhy should I change CV_Assert into SkipTestException?\r\nThank you.', 'comment_created': datetime.datetime(2020, 7, 14, 2, 0, 24, tzinfo=datetime.timezone.utc), 'commenter': 'HannibalAPE', 'type': 'User'}, {'comment_id': 454052587, 'comment_body': 'Thank you.\r\nSadly, I still get an error in ""Linux x64 Debug"", but I find that the test_dnn in ""Linux x64"" passed. I am not sure about the difference between these two tests.\r\n\r\nIs there any detailed log information containing which line throws out the error.\r\nI can only get ""error: (-215: Assertion failed) dims <= 2 in function \'at\' thrown in the test body."" in https://pullrequest.opencv.org/buildbot/builders/precommit_linux64_no_opt/builds/24676/steps/test_dnn/logs/stdio\r\n\r\nI think I have tested the API successfully, and you can see more information in https://github.com/HannibalAPE/opencv/blob/text_det_recog_demo/doc/tutorials/dnn/dnn_scene_text_det_and_rec/scene_text_recognition.markdown', 'comment_created': datetime.datetime(2020, 7, 14, 2, 0, 28, tzinfo=datetime.timezone.utc), 'commenter': 'HannibalAPE', 'type': 'User'}, {'comment_id': 454053316, 'comment_body': 'Yes check only for test.', 'comment_created': datetime.datetime(2020, 7, 14, 2, 3, 19, tzinfo=datetime.timezone.utc), 'commenter': 'bhack', 'type': 'User'}, {'comment_id': 454069670, 'comment_body': '> I still get an error in ""Linux x64 Debug"", but I find that the test_dnn in ""Linux x64"" passed. I am not sure about the difference between these two tests.\r\n\r\nObviously, it is ""Debug"" mode (with extra checks).', 'comment_created': datetime.datetime(2020, 7, 14, 3, 1, 1, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 454079183, 'comment_body': '@alalek Thanks for your reminder.', 'comment_created': datetime.datetime(2020, 7, 14, 3, 37, 21, tzinfo=datetime.timezone.utc), 'commenter': 'HannibalAPE', 'type': 'User'}, {'comment_id': 483214039, 'comment_body': 'Create standalone .cpp file for example code and embed snippets into documentation only.\r\n\r\nYou can adopt sample file below or create new one.', 'comment_created': datetime.datetime(2020, 9, 3, 19, 44, 29, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 483214476, 'comment_body': '> 1\r\n\r\nAvoid magic numbers.\r\n`IMREAD_COLOR`', 'comment_created': datetime.datetime(2020, 9, 3, 19, 45, 16, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 483214803, 'comment_body': '`127.5, 0, 0, 0`\r\n\r\nor\r\n\r\n`127.5, 127.5, 127.5, 127.5`\r\n\r\n?\r\n', 'comment_created': datetime.datetime(2020, 9, 3, 19, 45, 54, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 483216855, 'comment_body': 'External links on images are not allowed.\r\nMake image as a part of documentation tree instead (but please avoid adding images with bad license terms)', 'comment_created': datetime.datetime(2020, 9, 3, 19, 50, 5, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 483219788, 'comment_body': 'Exposing of private API is not allowed in OpenCV Public headers.\r\nYou can use PImpl pattern with static `create()` or static local functions.', 'comment_created': datetime.datetime(2020, 9, 3, 19, 56, 21, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 483413544, 'comment_body': 'I have changed the private functions into static local functions in the dnn/src/model.cpp\r\nThank you for your help, and please check whether it is ok.', 'comment_created': datetime.datetime(2020, 9, 4, 6, 28, 23, tzinfo=datetime.timezone.utc), 'commenter': 'HannibalAPE', 'type': 'User'}, {'comment_id': 483415430, 'comment_body': 'I am not sure about your confusion here.\r\nWhen I specify the `mean` parameter to `Scalar(127.5)`, all the values of the input image will subtract the mean (127.5) in the normalization step.', 'comment_created': datetime.datetime(2020, 9, 4, 6, 33, 32, tzinfo=datetime.timezone.utc), 'commenter': 'HannibalAPE', 'type': 'User'}, {'comment_id': 483971470, 'comment_body': '4.5 ?', 'comment_created': datetime.datetime(2020, 9, 5, 17, 36, 30, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 483971638, 'comment_body': '> 1\r\n\r\nPlease avoid using of magic numbers.\r\nUse `IMREAD_COLOR` instead.', 'comment_created': datetime.datetime(2020, 9, 5, 17, 38, 47, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 483971821, 'comment_body': 'Please use `samples::findFile()` for better file searching experience.', 'comment_created': datetime.datetime(2020, 9, 5, 17, 40, 42, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 484193182, 'comment_body': 'Which are possible values?', 'comment_created': datetime.datetime(2020, 9, 7, 5, 42, 16, tzinfo=datetime.timezone.utc), 'commenter': 'dkurt', 'type': 'User'}, {'comment_id': 484193334, 'comment_body': 'Why we need to limit this number?', 'comment_created': datetime.datetime(2020, 9, 7, 5, 42, 51, tzinfo=datetime.timezone.utc), 'commenter': 'dkurt', 'type': 'User'}, {'comment_id': 484193379, 'comment_body': 'What does unclip ratio?', 'comment_created': datetime.datetime(2020, 9, 7, 5, 43, 6, tzinfo=datetime.timezone.utc), 'commenter': 'dkurt', 'type': 'User'}, {'comment_id': 484193772, 'comment_body': 'Please test existing EAST model as well. Does it fit current API?', 'comment_created': datetime.datetime(2020, 9, 7, 5, 44, 37, tzinfo=datetime.timezone.utc), 'commenter': 'dkurt', 'type': 'User'}, {'comment_id': 484194196, 'comment_body': 'No need to put vocabulary at recognition step. Add a method such `setVocabulary`', 'comment_created': datetime.datetime(2020, 9, 7, 5, 46, 11, tzinfo=datetime.timezone.utc), 'commenter': 'dkurt', 'type': 'User'}, {'comment_id': 484194539, 'comment_body': 'https://github.com/opencv/opencv/blob/b45273eccb01323f5615b8900fd35407b1148939/modules/dnn/test/test_tf_importer.cpp#L817', 'comment_created': datetime.datetime(2020, 9, 7, 5, 47, 35, tzinfo=datetime.timezone.utc), 'commenter': 'dkurt', 'type': 'User'}, {'comment_id': 484195062, 'comment_body': 'Is that possible to rewrite https://github.com/opencv/opencv/blob/master/samples/dnn/text_detection.cpp instead? This way we can proof that new API is a good replacement for old approach.', 'comment_created': datetime.datetime(2020, 9, 7, 5, 49, 36, tzinfo=datetime.timezone.utc), 'commenter': 'dkurt', 'type': 'User'}, {'comment_id': 484195348, 'comment_body': 'As for me, too much samples with the same meaning - high level API should be as flexible as possible', 'comment_created': datetime.datetime(2020, 9, 7, 5, 50, 37, tzinfo=datetime.timezone.utc), 'commenter': 'dkurt', 'type': 'User'}, {'comment_id': 484283935, 'comment_body': '`Scalar(127.5)` only initializes the 1st element, so that would be (127.5, 0, 0, 0)', 'comment_created': datetime.datetime(2020, 9, 7, 8, 45, 16, tzinfo=datetime.timezone.utc), 'commenter': 'berak', 'type': 'User'}, {'comment_id': 484293949, 'comment_body': 'I have deleted the samples in samples/cpp/tutorial_code/dnn/text_spotting, and only embed snippets in the tutorial.', 'comment_created': datetime.datetime(2020, 9, 7, 9, 2, 6, tzinfo=datetime.timezone.utc), 'commenter': 'HannibalAPE', 'type': 'User'}, {'comment_id': 484295285, 'comment_body': 'I have modified the `TextRecognitionModel` class, please check it again.', 'comment_created': datetime.datetime(2020, 9, 7, 9, 4, 7, tzinfo=datetime.timezone.utc), 'commenter': 'HannibalAPE', 'type': 'User'}, {'comment_id': 484296680, 'comment_body': 'It only supports ""CTC-greedy"" now, and I will add more decoding methods in the future, such as Beam Searching.', 'comment_created': datetime.datetime(2020, 9, 7, 9, 6, 22, tzinfo=datetime.timezone.utc), 'commenter': 'HannibalAPE', 'type': 'User'}, {'comment_id': 484306625, 'comment_body': 'We can get good detection results with these parameters, for more information you can refer to the [paper](https://arxiv.org/abs/1911.08947) and [code](https://github.com/MhLiao/DB).\r\n', 'comment_created': datetime.datetime(2020, 9, 7, 9, 22, 48, tzinfo=datetime.timezone.utc), 'commenter': 'HannibalAPE', 'type': 'User'}, {'comment_id': 484308831, 'comment_body': 'In some difficult cases, the output map of the network is full of small noise, and `maxCandidates` can avoid wasting inference time.', 'comment_created': datetime.datetime(2020, 9, 7, 9, 26, 28, tzinfo=datetime.timezone.utc), 'commenter': 'HannibalAPE', 'type': 'User'}, {'comment_id': 484318646, 'comment_body': 'This detection method is to detect the kernel of each text instance, so we should ""expand"" the kernel into the final result by the \'unclipRatio\'.', 'comment_created': datetime.datetime(2020, 9, 7, 9, 43, 5, tzinfo=datetime.timezone.utc), 'commenter': 'HannibalAPE', 'type': 'User'}, {'comment_id': 484326281, 'comment_body': 'The methods of scene text detection can be divided into (1) regression-based method and (2) segmentation-based method.\r\nThe original method (EAST) in text_detection.cpp is a regression-based method, while the new method is a segmentation-based method. Different post-processing is needed in the inference for them, so we can not directly rewrite the text_detection.cpp with my API. We should add at least two post-processing in the `TextDetectionModel` for the mentioned two kinds of methods.\r\n\r\nThe methods of scene text recognition can be divided into (1) CTC-based method and (2) Attention-based method.\r\nAll of the samples adopts the CTC-based method (CRNN) for recognition because the current DNN module can not support some layers. In the following months, I will put some issues about them which are quite needed.\r\n\r\nAs you see, this is the first version of APIs for text detection and recognition. I will keep working on it and add more methods to make it as flexible as possible in the future.', 'comment_created': datetime.datetime(2020, 9, 7, 9, 56, 18, tzinfo=datetime.timezone.utc), 'commenter': 'HannibalAPE', 'type': 'User'}, {'comment_id': 484382857, 'comment_body': 'Thank you.\r\nI have tested it and changed it to `Scalar(127.5, 127.5, 127.5)`.', 'comment_created': datetime.datetime(2020, 9, 7, 11, 49, 49, tzinfo=datetime.timezone.utc), 'commenter': 'HannibalAPE', 'type': 'User'}, {'comment_id': 484432988, 'comment_body': 'I have updated all `imread` with `samples::findFile()`', 'comment_created': datetime.datetime(2020, 9, 7, 13, 29, 56, tzinfo=datetime.timezone.utc), 'commenter': 'HannibalAPE', 'type': 'User'}, {'comment_id': 484435053, 'comment_body': 'I have changed it to 4.5', 'comment_created': datetime.datetime(2020, 9, 7, 13, 34, 9, tzinfo=datetime.timezone.utc), 'commenter': 'HannibalAPE', 'type': 'User'}, {'comment_id': 484435559, 'comment_body': 'I will check all my code to avoid it, thank you.', 'comment_created': datetime.datetime(2020, 9, 7, 13, 35, 5, tzinfo=datetime.timezone.utc), 'commenter': 'HannibalAPE', 'type': 'User'}, {'comment_id': 484554931, 'comment_body': 'User should know the options so it must be documented or we can add enum', 'comment_created': datetime.datetime(2020, 9, 7, 19, 50, 6, tzinfo=datetime.timezone.utc), 'commenter': 'dkurt', 'type': 'User'}, {'comment_id': 484555154, 'comment_body': 'I mean that this line is then converted to documentation so users should know how this parameter changes the behavior', 'comment_created': datetime.datetime(2020, 9, 7, 19, 51, 33, tzinfo=datetime.timezone.utc), 'commenter': 'dkurt', 'type': 'User'}, {'comment_id': 484555672, 'comment_body': 'I just worry that we introduce an API which is not generic. Initial idea for the High Level API to help users start fast. Initially, we designed it for object detection networks which also have different post-processing depends on network family.', 'comment_created': datetime.datetime(2020, 9, 7, 19, 54, 43, tzinfo=datetime.timezone.utc), 'commenter': 'dkurt', 'type': 'User'}, {'comment_id': 484961760, 'comment_body': 'I have updated the parameter description for a better understanding.', 'comment_created': datetime.datetime(2020, 9, 8, 14, 24, 45, tzinfo=datetime.timezone.utc), 'commenter': 'HannibalAPE', 'type': 'User'}, {'comment_id': 484969102, 'comment_body': 'I understand it, and I also have the aspiration to bring the latest topologies and algorithms to OpenCV.\r\nAs I discussed with the mentors before GSoC, we agreed on the current APIs to be the first version. I think it is a work in progress, and it is needed to be updated with more algorithms in the future.', 'comment_created': datetime.datetime(2020, 9, 8, 14, 34, 6, tzinfo=datetime.timezone.utc), 'commenter': 'HannibalAPE', 'type': 'User'}, {'comment_id': 488148406, 'comment_body': '`const Mat& prediction, const String& decodeType`', 'comment_created': datetime.datetime(2020, 9, 14, 18, 49, 8, tzinfo=datetime.timezone.utc), 'commenter': 'dkurt', 'type': 'User'}, {'comment_id': 488148536, 'comment_body': '`const String&`', 'comment_created': datetime.datetime(2020, 9, 14, 18, 49, 18, tzinfo=datetime.timezone.utc), 'commenter': 'dkurt', 'type': 'User'}, {'comment_id': 488148687, 'comment_body': '`= {}`', 'comment_created': datetime.datetime(2020, 9, 14, 18, 49, 37, tzinfo=datetime.timezone.utc), 'commenter': 'dkurt', 'type': 'User'}, {'comment_id': 488149242, 'comment_body': 'what does it mean ""official code""?', 'comment_created': datetime.datetime(2020, 9, 14, 18, 50, 34, tzinfo=datetime.timezone.utc), 'commenter': 'dkurt', 'type': 'User'}, {'comment_id': 488149535, 'comment_body': 'do not use `this->` for class fields', 'comment_created': datetime.datetime(2020, 9, 14, 18, 51, 2, tzinfo=datetime.timezone.utc), 'commenter': 'dkurt', 'type': 'User'}, {'comment_id': 488150176, 'comment_body': 'please reduce code duplication - create a vector of inputs and process it after', 'comment_created': datetime.datetime(2020, 9, 14, 18, 52, 8, tzinfo=datetime.timezone.utc), 'commenter': 'dkurt', 'type': 'User'}, {'comment_id': 488150586, 'comment_body': 'Just use `std::min` and `std::max`', 'comment_created': datetime.datetime(2020, 9, 14, 18, 52, 55, tzinfo=datetime.timezone.utc), 'commenter': 'dkurt', 'type': 'User'}, {'comment_id': 488152509, 'comment_body': '> we agreed on the current APIs to be the first version\r\n\r\nwe cannot merge something draft in `opencv/opencv`. API should be scalable and at least cover all the known topologies. There are multiple text detection and recognition network already supported by OpenCV (see the notes from https://github.com/opencv/opencv/blob/master/samples/dnn/text_detection.cpp). So introduced API should manage them.', 'comment_created': datetime.datetime(2020, 9, 14, 18, 56, 23, tzinfo=datetime.timezone.utc), 'commenter': 'dkurt', 'type': 'User'}, {'comment_id': 488344976, 'comment_body': 'Ok, I will add those topologies to my API in this month. \r\nI have to prepare for a test this week.', 'comment_created': datetime.datetime(2020, 9, 15, 2, 29, 19, tzinfo=datetime.timezone.utc), 'commenter': 'HannibalAPE', 'type': 'User'}, {'comment_id': 495437281, 'comment_body': 'The API can support EAST now, and there is a code testing for EAST in test_model.cpp.\r\n`TEST_P(Test_Model, TextDetectionByEAST)`\r\n\r\nI have applied my APIs to samples/dnn/text_detection.cpp and tested it successfully with the previous models.\r\nBut, I am not sure about how to change the file name, because the text_detection.cpp and scene_text_spotting.cpp do the same thing with different algorithms. Do you have any suggestions?', 'comment_created': datetime.datetime(2020, 9, 26, 9, 27, 15, tzinfo=datetime.timezone.utc), 'commenter': 'HannibalAPE', 'type': 'User'}, {'comment_id': 495437460, 'comment_body': 'I have checked all my codes to update some input parameters with `const &`.', 'comment_created': datetime.datetime(2020, 9, 26, 9, 29, 40, tzinfo=datetime.timezone.utc), 'commenter': 'HannibalAPE', 'type': 'User'}, {'comment_id': 495437783, 'comment_body': ""I have put the official code's URL of this algorithm at the top of these comments."", 'comment_created': datetime.datetime(2020, 9, 26, 9, 32, 48, tzinfo=datetime.timezone.utc), 'commenter': 'HannibalAPE', 'type': 'User'}, {'comment_id': 495438059, 'comment_body': 'I have updated it. Please check whether I get your mind. Thank you.', 'comment_created': datetime.datetime(2020, 9, 26, 9, 35, 48, tzinfo=datetime.timezone.utc), 'commenter': 'HannibalAPE', 'type': 'User'}, {'comment_id': 495443089, 'comment_body': ""shouldn't it be:\r\n\r\n    (float)frame.rows() / impl->size.height;"", 'comment_created': datetime.datetime(2020, 9, 26, 10, 32, 40, tzinfo=datetime.timezone.utc), 'commenter': 'berak', 'type': 'User'}, {'comment_id': 495446184, 'comment_body': 'Yes, I am sorry about it. The input width and height are the same, so I did not find it.', 'comment_created': datetime.datetime(2020, 9, 26, 11, 12, 19, tzinfo=datetime.timezone.utc), 'commenter': 'HannibalAPE', 'type': 'User'}, {'comment_id': 498730692, 'comment_body': 'typo', 'comment_created': datetime.datetime(2020, 10, 2, 10, 3, 42, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 498730926, 'comment_body': '@vpisarev Please take a look on this statement.\r\n\r\nIt is not clear what and where is patented.\r\n\r\nPatented and copyrighted samples is not a good idea.', 'comment_created': datetime.datetime(2020, 10, 2, 10, 4, 19, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 498731359, 'comment_body': 'OpenCV Public API should not expose internal implementation details. Such details should be moved into .cpp files', 'comment_created': datetime.datetime(2020, 10, 2, 10, 5, 26, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 499517976, 'comment_body': 'Why is this information dropped?', 'comment_created': datetime.datetime(2020, 10, 5, 11, 8, 19, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 499556457, 'comment_body': 'The previous models are taken from this link, but I also provide some other models.\r\nHow about putting this information into the tutorial in detail? or just leave it here?\r\nDo you have any suggestions?', 'comment_created': datetime.datetime(2020, 10, 5, 12, 21, 17, tzinfo=datetime.timezone.utc), 'commenter': 'HannibalAPE', 'type': 'User'}, {'comment_id': 499571252, 'comment_body': 'I feel confused here, because the `vocabulary` is a member of the `TextRecognitionModel` class.\r\nIf both of the private and protected members are not allowed, I should define such details as static local variants/functions?\r\nFor a better understanding, can you show me any proper implementation manners in other existing files?\r\n', 'comment_created': datetime.datetime(2020, 10, 5, 12, 46, 58, tzinfo=datetime.timezone.utc), 'commenter': 'HannibalAPE', 'type': 'User'}, {'comment_id': 499571793, 'comment_body': 'sry, I will check it again.', 'comment_created': datetime.datetime(2020, 10, 5, 12, 47, 53, tzinfo=datetime.timezone.utc), 'commenter': 'HannibalAPE', 'type': 'User'}, {'comment_id': 499587128, 'comment_body': 'Something like this: https://github.com/opencv/opencv/blob/c3e8a82c9c0b18432627fe100db332b42d64b8d3/modules/dnn/src/model.cpp#L16', 'comment_created': datetime.datetime(2020, 10, 5, 13, 12, 26, tzinfo=datetime.timezone.utc), 'commenter': 'dkurt', 'type': 'User'}, {'comment_id': 499589904, 'comment_body': 'Why we need this?', 'comment_created': datetime.datetime(2020, 10, 5, 13, 16, 32, tzinfo=datetime.timezone.utc), 'commenter': 'dkurt', 'type': 'User'}, {'comment_id': 499590750, 'comment_body': 'Please use `stl` - resize and insert', 'comment_created': datetime.datetime(2020, 10, 5, 13, 17, 44, tzinfo=datetime.timezone.utc), 'commenter': 'dkurt', 'type': 'User'}, {'comment_id': 500027464, 'comment_body': 'I wrote it to keep consistent with the previous `text_deteciton.cpp`, and it gives users a choice to specify the output names.\r\nMaybe it is not necessary, and I have removed it.', 'comment_created': datetime.datetime(2020, 10, 6, 6, 13, 18, tzinfo=datetime.timezone.utc), 'commenter': 'HannibalAPE', 'type': 'User'}, {'comment_id': 500028545, 'comment_body': 'I have re-implemented my API in this way, please check it. \r\nThank you for your help.', 'comment_created': datetime.datetime(2020, 10, 6, 6, 16, 22, tzinfo=datetime.timezone.utc), 'commenter': 'HannibalAPE', 'type': 'User'}, {'comment_id': 500037923, 'comment_body': 'Do I need to add some other information?\r\nPatent Name: 一种基于可微分二值化的实时文本检测方法\r\nPublication Number: CN110781967A', 'comment_created': datetime.datetime(2020, 10, 6, 6, 40, 30, tzinfo=datetime.timezone.utc), 'commenter': 'HannibalAPE', 'type': 'User'}, {'comment_id': 500158873, 'comment_body': 'We need to initialize the `vocabulary` with the input `voc`, so I think `assign` is a better choice than `insert`.\r\nPlease check it and let me know if it is not good. Thank you for your help.', 'comment_created': datetime.datetime(2020, 10, 6, 10, 9, 25, tzinfo=datetime.timezone.utc), 'commenter': 'HannibalAPE', 'type': 'User'}, {'comment_id': 504013765, 'comment_body': '@vpisarev Please take a look on it.\r\nThank you for your suggestions in advance.', 'comment_created': datetime.datetime(2020, 10, 13, 14, 46, 52, tzinfo=datetime.timezone.utc), 'commenter': 'HannibalAPE', 'type': 'User'}, {'comment_id': 514357758, 'comment_body': '@alalek I have talked with Vadim by email, and I have removed the patent information.', 'comment_created': datetime.datetime(2020, 10, 29, 15, 37, 46, tzinfo=datetime.timezone.utc), 'commenter': 'HannibalAPE', 'type': 'User'}, {'comment_id': 514358312, 'comment_body': 'I have put these information back to it.', 'comment_created': datetime.datetime(2020, 10, 29, 15, 38, 28, tzinfo=datetime.timezone.utc), 'commenter': 'HannibalAPE', 'type': 'User'}, {'comment_id': 514504500, 'comment_body': '> fillPoly\r\n\r\nIt is a bad idea to use ""drawing"" functions in algorithms implementations.', 'comment_created': datetime.datetime(2020, 10, 29, 19, 14, 1, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 514636258, 'comment_body': 'API looks over-complicated for common class.\r\nNot sure that we really need to support custom **contours** as part of such basic API.', 'comment_created': datetime.datetime(2020, 10, 30, 0, 8, 6, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 514636814, 'comment_body': '> decodeType\r\n\r\nThis is algorithm / model parameter.\r\n(it is not intended to be changed between multiple ""recognize"" calls for different frames).\r\n\r\nMust be moved into constructor / `::create()` methods and `.get` (may be `.set`) properties.\r\n\r\n---\r\n\r\n/cc @dkurt @l-bat @vpisarev ', 'comment_created': datetime.datetime(2020, 10, 30, 0, 10, 30, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 514642968, 'comment_body': '> Ptr<Voc> voc;\r\n\r\nPlease keep only one ""implementation"" pointer (it is already in Model::impl).\r\n\r\n(perhaps ""Bridge"" design pattern should be applied here)', 'comment_created': datetime.datetime(2020, 10, 30, 0, 34, 29, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 514643792, 'comment_body': 'If there is a reference/link on patented DNN model in this patch then it is still better to provide such type of information near the corresponding link (instead of whole sample).', 'comment_created': datetime.datetime(2020, 10, 30, 0, 37, 42, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 514757043, 'comment_body': 'Is there any better solution? The official post-processing uses this function to do it\r\n> https://github.com/MhLiao/DB/blob/f08c44faa1b4790039381203a8079d73a77494b4/structure/representers/seg_detector_representer.py#L203', 'comment_created': datetime.datetime(2020, 10, 30, 3, 5, 35, tzinfo=datetime.timezone.utc), 'commenter': 'HannibalAPE', 'type': 'User'}, {'comment_id': 518534816, 'comment_body': 'The idea of adding this optional parameter is proposed by Vadim in the last months.\r\nI think it can be another choice for users?', 'comment_created': datetime.datetime(2020, 11, 6, 5, 43, 9, tzinfo=datetime.timezone.utc), 'commenter': 'HannibalAPE', 'type': 'User'}, {'comment_id': 518536321, 'comment_body': 'I moved `decodeType` into `Voc`, but I have noticed that you propose to update cv::dnn::Model class in https://github.com/opencv/opencv/pull/18711.\r\nHence, I need to wait for that pr to be merged, and update my codes?', 'comment_created': datetime.datetime(2020, 11, 6, 5, 48, 43, tzinfo=datetime.timezone.utc), 'commenter': 'HannibalAPE', 'type': 'User'}, {'comment_id': 518573573, 'comment_body': 'Just `vocabulary = voc;` should work fine.', 'comment_created': datetime.datetime(2020, 11, 6, 7, 46, 2, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 518573980, 'comment_body': ""Main concern here:\r\n- this contours parameter is optional for User, but it is not optional for extending implementation for supporting of other DL models which can't work with contours."", 'comment_created': datetime.datetime(2020, 11, 6, 7, 46, 57, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 518763246, 'comment_body': 'ok, I understant that, and have removed it.', 'comment_created': datetime.datetime(2020, 11, 6, 13, 51, 2, tzinfo=datetime.timezone.utc), 'commenter': 'HannibalAPE', 'type': 'User'}, {'comment_id': 527358594, 'comment_body': 'I wonder whether I need to add `samples::findFile()` whenever I open files?\r\nDo I need to change `TextRecognitionModel recognizer(modelPath)` into `TextRecognitionModel recognizer(samples::findFile(modelPath))` ?\r\nDoes it slow the speed?', 'comment_created': datetime.datetime(2020, 11, 20, 2, 44, 38, tzinfo=datetime.timezone.utc), 'commenter': 'HannibalAPE', 'type': 'User'}, {'comment_id': 527396841, 'comment_body': '`samples::findFile()` helps to use file by name (instead of full path) from `<opencv>/samples/data` location.\r\n\r\nModel file is not stored there (and no plans to put it there due its size).', 'comment_created': datetime.datetime(2020, 11, 20, 4, 54, 13, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 528212332, 'comment_body': 'Is there any `confidences` scoring in DB detection algo?', 'comment_created': datetime.datetime(2020, 11, 21, 16, 6, 39, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 528212449, 'comment_body': 'There is an issue with ObjC binding generator with contours handling (`std::vector< std::vector<Point> >` type).\r\nI will take a look on this on next week.', 'comment_created': datetime.datetime(2020, 11, 21, 16, 7, 39, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 528449806, 'comment_body': 'https://github.com/HannibalAPE/opencv/blob/f59aa6d4ae76e08f199e56ae94235295e0380076/modules/dnn/src/model.cpp#L972\r\n\r\nYou can regard the return of `contourScore()` as a kind of `confidence`, but it is only used to filter some bad detection results. It is not the same meaning as those in general object detection algorithms.', 'comment_created': datetime.datetime(2020, 11, 23, 2, 50, 52, tzinfo=datetime.timezone.utc), 'commenter': 'HannibalAPE', 'type': 'User'}, {'comment_id': 531049082, 'comment_body': '@alalek \r\nI think this function can not sort the points into the right order (bottomLeft, topLeft, topRight, bottomRight) in some cases.\r\n> -i=path/to/evaluation_data_det/IC15/test_images/img_5.jpg\r\n-dmp=path/to/DB_IC15_resnet50.onnx\r\n-iw=1280 -ih=736 -rmp=path/to/crnn_cs.onnx\r\n -vp=path/to/alphabet_94.txt\r\n-rgb=1\r\n\r\nBy the above setting, you can reproduce the errors. \r\nYou can find the test image [here](https://drive.google.com/uc?export=dowload&id=149tAhIcvfCYeyufRoZ9tmc2mZDKE_XrF)\r\n', 'comment_created': datetime.datetime(2020, 11, 26, 14, 2, 17, tzinfo=datetime.timezone.utc), 'commenter': 'HannibalAPE', 'type': 'User'}, {'comment_id': 531571860, 'comment_body': '> 3-j\r\n\r\nPlease check this part of code too (do we really need to reorder points?)', 'comment_created': datetime.datetime(2020, 11, 27, 12, 23, 35, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 531585799, 'comment_body': '`minAreaRect()` may return boxes with angle -90.\r\n\r\nPlease check latest commit with workarounds.', 'comment_created': datetime.datetime(2020, 11, 27, 12, 54, 25, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 532441057, 'comment_body': 'I have removed it, and updated the `rotateVec` in `unclip`.', 'comment_created': datetime.datetime(2020, 11, 30, 9, 7, 59, tzinfo=datetime.timezone.utc), 'commenter': 'HannibalAPE', 'type': 'User'}, {'comment_id': 532536324, 'comment_body': 'Why we need to derive implementations for algorithms? Is seems to me that more optimal introduce a parameter which can indicate EAST or DB model.', 'comment_created': datetime.datetime(2020, 11, 30, 11, 43, 46, tzinfo=datetime.timezone.utc), 'commenter': 'dkurt', 'type': 'User'}, {'comment_id': 532539658, 'comment_body': 'There are different returned results (type).\r\nAlso there is different set of configuration parameters. It is really hard to properly handle with checks both/multiple sets in one instance. We should not create GOD classes.', 'comment_created': datetime.datetime(2020, 11, 30, 11, 49, 50, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 533395401, 'comment_body': ""Actually `RotatedRect` doesn't work well with perspective transformations (like [this one](https://www.pngwing.com/en/free-png-pdprp)).\r\n\r\nPerhaps we need 4 points in API with strong order (bl, tl, tr, br - according to `targetVertices`) which should be used with `getPerspectiveTransform()` to get more accurate results.\r\n\r\nI will try to update API on this week."", 'comment_created': datetime.datetime(2020, 12, 1, 13, 10, 58, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 533497563, 'comment_body': 'I can not open the above link. Can you share it with google drive?', 'comment_created': datetime.datetime(2020, 12, 1, 15, 23, 25, tzinfo=datetime.timezone.utc), 'commenter': 'HannibalAPE', 'type': 'User'}, {'comment_id': 533605259, 'comment_body': 'It is similar to side boxes of cube from [here](https://en.wikipedia.org/wiki/Perspective_(graphical)#/media/File:Perspective1.jpg).', 'comment_created': datetime.datetime(2020, 12, 1, 17, 48, 10, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 533617267, 'comment_body': ""However, DL models may not work with perspective transformations (EAST output doesn't know anything about that) and they just detect rotated text.\r\n\r\nany thoughts?"", 'comment_created': datetime.datetime(2020, 12, 1, 18, 6, 58, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 533880609, 'comment_body': 'It depends on different DL models. Some methods can output irregular quadrilaterals.\r\n\r\nFrom my side, the perspective transformation is a temporary replacement, or just a choice for the four-point outputs. (rotated boxes and irregular quadrilaterals)\r\n\r\nThere is a popular and fast text recognition algorithm `ASTER` which adopts `Thin Plate Spline Transformation` in its rectification network. (like [this](https://github.com/ayumiymk/aster.pytorch/blob/master/overview.png)).\r\nI am not sure whether the TPS transformation is implemented in OpenCV, maybe not?\r\nYou can refer to [this](https://github.com/ayumiymk/aster.pytorch/blob/be670046c775b54de79766208f0c59321ae1eccf/lib/models/tps_spatial_transformer.py#L98).\r\n\r\nBy the way, ASTER is also an algorithm from our lab, and we are glad to contribute it to OpenCV.\r\nHowever, there are some things to do before.\r\n1) support TPS transformation\r\n2) update LSTM in modules/dnn/src/onnx/onnx_importer.cpp\r\nwe need to set [these parameters](https://github.com/opencv/opencv/blob/ef0eed8d3c63b64bacc755dc4ffe5358a2cf30a7/modules/dnn/src/onnx/onnx_importer.cpp#L904) non-zero, but it is not supported now.\r\n3) support [GRU layer](https://pytorch.org/docs/stable/generated/torch.nn.GRU.html?highlight=gru#torch.nn.GRU)\r\n4) ...\r\n\r\nI suppose to work on it after this PR.', 'comment_created': datetime.datetime(2020, 12, 2, 3, 57, 39, tzinfo=datetime.timezone.utc), 'commenter': 'HannibalAPE', 'type': 'User'}, {'comment_id': 534574687, 'comment_body': '> -mp=path/to/DB_TD500_resnet50.onnx\r\n> -ih=736 -iw=736\r\n\r\nPlease check model parameters here (and above near model download links).\r\nThis set performs better: `-ih=736 -iw=1280` (on `IC15/test_images/img_5.jpg`)\r\n\r\nBTW, It make sense to put some defaults into `TextDetectionModel_DB` ctor.', 'comment_created': datetime.datetime(2020, 12, 3, 0, 27, 22, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 534576163, 'comment_body': 'Added strong requirements for results to avoid ""points reordering"" in sample code.', 'comment_created': datetime.datetime(2020, 12, 3, 0, 31, 19, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 534576569, 'comment_body': 'Any thoughts about `Point` vs `Point2f`?', 'comment_created': datetime.datetime(2020, 12, 3, 0, 32, 16, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 534577403, 'comment_body': '@HannibalAPE Could you please check preserving order of vertexes in `unclip()` call?', 'comment_created': datetime.datetime(2020, 12, 3, 0, 34, 40, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 534627195, 'comment_body': 'Actually, DB_TD500_resnet50.onnx and DB_IC15_resnet50.onnx are prepared for different datasets (i.e. TD500 and IC15) respectively, which aims to perform better performance on each benchmark. The recommended settings do not cover the above case (use DB_TD500_resnet50.onnx on IC15 images).\r\n\r\nIf it is needed, I can train a new model with different datasets together. What is your opinion?', 'comment_created': datetime.datetime(2020, 12, 3, 2, 48, 23, tzinfo=datetime.timezone.utc), 'commenter': 'HannibalAPE', 'type': 'User'}, {'comment_id': 534629444, 'comment_body': 'Thanks for explanation. That makes sense.\r\n\r\n> I can train a new model\r\n\r\nThis can be an activity after this PR merge.', 'comment_created': datetime.datetime(2020, 12, 3, 2, 54, 47, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 534635866, 'comment_body': 'I think `Point` is okay.', 'comment_created': datetime.datetime(2020, 12, 3, 3, 13, 53, tzinfo=datetime.timezone.utc), 'commenter': 'HannibalAPE', 'type': 'User'}, {'comment_id': 534797951, 'comment_body': 'You can find that the performance of QUAD is worse than RBOX in Table. 3 and the authors do not provide official code and models.\r\nSome good re-implementations of EAST only support RBOX.\r\nTF: https://github.com/argman/EAST\r\nPyTorch: https://github.com/songdejia/EAST', 'comment_created': datetime.datetime(2020, 12, 3, 7, 23, 7, tzinfo=datetime.timezone.utc), 'commenter': 'HannibalAPE', 'type': 'User'}, {'comment_id': 781764104, 'comment_body': 'Is there a tutorial on training custom models and converting existing models to onnx?', 'comment_created': datetime.datetime(2022, 1, 11, 5, 16, 40, tzinfo=datetime.timezone.utc), 'commenter': 'xulihang', 'type': 'User'}]","[{'commit_sha': '7ead0f6e7393cbb4095443719f3395d35e617e50', 'committer_username': 'HannibalAPE', 'committer_name': 'Wenqing Zhang', 'committer_email': 'GordonZhangwq@gmail.com', 'commit_date': datetime.datetime(2016, 5, 5, 5, 47, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd1a2df94981a6c380453bbb460ed2a2a7a4af241', 'committer_username': 'HannibalAPE', 'committer_name': 'Wenqing Zhang', 'committer_email': 'GordonZhangwq@gmail.com', 'commit_date': datetime.datetime(2016, 5, 5, 5, 47, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7cd72937502811652566b25cc7cba843c037f4da', 'committer_username': 'HannibalAPE', 'committer_name': 'Wenqing Zhang', 'committer_email': 'GordonZhangwq@gmail.com', 'commit_date': datetime.datetime(2016, 5, 5, 5, 47, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e3ccedc988e3eb687f467c201d6686b19ef6b18', 'committer_username': 'HannibalAPE', 'committer_name': 'Wenqing Zhang', 'committer_email': 'GordonZhangwq@gmail.com', 'commit_date': datetime.datetime(2016, 5, 5, 5, 47, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e27f385dbb732c16ec3c51dd5e9887f11e4ef7f', 'committer_username': 'HannibalAPE', 'committer_name': 'Wenqing Zhang', 'committer_email': 'GordonZhangwq@gmail.com', 'commit_date': datetime.datetime(2016, 5, 5, 5, 47, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed69fe9ddda0c18820358a5c27c7aa2acf51c18d', 'committer_username': 'HannibalAPE', 'committer_name': 'Wenqing Zhang', 'committer_email': 'GordonZhangwq@gmail.com', 'commit_date': datetime.datetime(2016, 5, 5, 5, 47, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '232aef8086fc1d2b24b097b2544b8dfeb26570e7', 'committer_username': 'HannibalAPE', 'committer_name': 'Wenqing Zhang', 'committer_email': 'GordonZhangwq@gmail.com', 'commit_date': datetime.datetime(2016, 5, 5, 5, 47, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '757c41ef9ef27422831818e48308db90c91368a2', 'committer_username': 'HannibalAPE', 'committer_name': 'Wenqing Zhang', 'committer_email': 'GordonZhangwq@gmail.com', 'commit_date': datetime.datetime(2016, 5, 5, 5, 47, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd326705415a62a5dfbbbdc079167a3a969a010ae', 'committer_username': 'HannibalAPE', 'committer_name': 'Wenqing Zhang', 'committer_email': 'GordonZhangwq@gmail.com', 'commit_date': datetime.datetime(2016, 5, 5, 5, 47, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f59aa6d4ae76e08f199e56ae94235295e0380076', 'committer_username': 'alalek', 'committer_name': 'Alexander Alekhin', 'committer_email': 'alexander.a.alekhin@gmail.com', 'commit_date': datetime.datetime(2013, 7, 10, 11, 32, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '63672da2d5f24bc7056184e09f79523c9d24ee68', 'committer_username': 'HannibalAPE', 'committer_name': 'Wenqing Zhang', 'committer_email': 'GordonZhangwq@gmail.com', 'commit_date': datetime.datetime(2016, 5, 5, 5, 47, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca1f5d9cf85be266d815de8f4fe1fbbf26e7855e', 'committer_username': 'alalek', 'committer_name': 'Alexander Alekhin', 'committer_email': 'alexander.a.alekhin@gmail.com', 'commit_date': datetime.datetime(2013, 7, 10, 11, 32, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9aebabe058eb14e6189d8f72d5432414516316de', 'committer_username': 'HannibalAPE', 'committer_name': 'Wenqing Zhang', 'committer_email': 'GordonZhangwq@gmail.com', 'commit_date': datetime.datetime(2016, 5, 5, 5, 47, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b4a0300cd832a8c53db00d667a2cadc3e286f8b1', 'committer_username': 'HannibalAPE', 'committer_name': 'Wenqing Zhang', 'committer_email': 'GordonZhangwq@gmail.com', 'commit_date': datetime.datetime(2016, 5, 5, 5, 47, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e403b7b4da540b0637583527d4862d2dba5262d0', 'committer_username': 'alalek', 'committer_name': 'Alexander Alekhin', 'committer_email': 'alexander.a.alekhin@gmail.com', 'commit_date': datetime.datetime(2013, 7, 10, 11, 32, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7052539c9d30873d0ae224aac099b35d34309bb', 'committer_username': 'alalek', 'committer_name': 'Alexander Alekhin', 'committer_email': 'alexander.a.alekhin@gmail.com', 'commit_date': datetime.datetime(2013, 7, 10, 11, 32, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1eb24dabf72eca3449677cbbf1611c5950f7e068', 'committer_username': 'HannibalAPE', 'committer_name': 'Wenqing Zhang', 'committer_email': 'GordonZhangwq@gmail.com', 'commit_date': datetime.datetime(2016, 5, 5, 5, 47, 17, tzinfo=datetime.timezone.utc)}]",Wenqing Zhang,19200715,GordonZhangwq@gmail.com,User,,4,,11,13

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
5108051,opencv,opencv/opencv,C++,55707,77548,2656,2194,34484,2604,6,135,"[{'id': 435780013, 'number': 17570, 'closed': datetime.datetime(2020, 12, 3, 18, 47, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 17, 11, 11, 18, tzinfo=datetime.timezone.utc), 'time_taken': 14628982.0, 'time_delta': '169 days, 7:36:22', 'additions': 2340, 'deletions': 182, 'state': 'closed'}]"
