pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
890153877,Add Container and Block for Text,Tried starting at creating a simple textual recipe based on ImageFolders dataset recipe. This specifically works for `imdb` and similar datasets. Any feedback is highly appreciated. ,True,207,https://api.github.com/repos/FluxML/FastAI.jl/pulls/207,https://github.com/FluxML/FastAI.jl/pull/207,closed,160,9,10,25,8,25,0,0,[],2022-03-26 06:30:11+00:00,2022-05-12 10:38:51+00:00,4075720.0,"47 days, 4:08:40","[{'comment_id': 839285578, 'comment_body': ""Some more documentation on what this represents would be great. Is this a sentence, a paragraph? A `checkblock` is also needed. The convention is not to put `Block` in the name of `Block`s, so depending on what this represents, we may be able to find a more precise term.\r\n\r\nWhat tasks does this adress? Is there a need for different text-related blocks to solve other tasks? I'm. not super familiar with deep NLP, but these questions may help making this more precise."", 'comment_created': datetime.datetime(2022, 3, 31, 7, 48, 23, tzinfo=datetime.timezone.utc), 'commenter': 'lorenzoh', 'type': 'User'}, {'comment_id': 839286185, 'comment_body': 'We can drop this until we need to add Makie.jl recipes', 'comment_created': datetime.datetime(2022, 3, 31, 7, 49, 4, tzinfo=datetime.timezone.utc), 'commenter': 'lorenzoh', 'type': 'User'}, {'comment_id': 839286618, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2022, 3, 31, 7, 49, 33, tzinfo=datetime.timezone.utc), 'commenter': 'lorenzoh', 'type': 'User'}, {'comment_id': 839288111, 'comment_body': 'We should hold off on exporting everything except the block\r\n```suggestion\r\nexport TextBlock\r\n```', 'comment_created': datetime.datetime(2022, 3, 31, 7, 51, 16, tzinfo=datetime.timezone.utc), 'commenter': 'lorenzoh', 'type': 'User'}, {'comment_id': 839966715, 'comment_body': ""Ok. I'll remove this."", 'comment_created': datetime.datetime(2022, 3, 31, 19, 52, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Chandu-4444', 'type': 'User'}, {'comment_id': 839998004, 'comment_body': ""> Some more documentation on what this represents would be great. Is this a sentence, a paragraph?\r\n\r\nThe initial idea was to replicate `struct Image{N} <: Block end`. I haven't specified the dimension `N` as I'm not sure on incorporating it with textual data. Is it the length? Can that be the vocabulary size? Or can we just leave this as it is? (Maybe we can discuss this). \r\n\r\n> Is there a need for different text-related blocks to solve other tasks?\r\n\r\nMost text-related tasks revolve around classification and sentiment analysis (Which are single label prediction tasks). There are some more tasks that involve predicting multiple labels like topic modeling (Need more than one label to be predicted). Finally, there are some unsupervised techniques like text generation, text summarization.\r\n\r\nI guess all the observations for the above tasks can be represented using a block of the same type?\r\n\r\n> Is this a sentence, a paragraph?\r\n\r\nI think the better name would be `Paragraph` rather than `TextBlock` as most if not all of the text data has a single paragraph (multiple sentences) as an individual observation (We can consider a sentence as a paragraph too!). "", 'comment_created': datetime.datetime(2022, 3, 31, 20, 37, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Chandu-4444', 'type': 'User'}, {'comment_id': 840647768, 'comment_body': ""Doesn't `nobs` fall back to `length` now (or vice versa)? Trying to understand why the nested ternary is necessary."", 'comment_created': datetime.datetime(2022, 4, 1, 14, 34, 54, tzinfo=datetime.timezone.utc), 'commenter': 'ToucheSir', 'type': 'User'}, {'comment_id': 840649925, 'comment_body': ""Was this meant to be \r\n```suggestion\r\n    blocks = (TextBlock(), Label(unique(eachobs(labels))))\r\n```\r\n? Given the lines below, I'd recommend declaring them separately and doing the tuple packing in the return."", 'comment_created': datetime.datetime(2022, 4, 1, 14, 36, 33, tzinfo=datetime.timezone.utc), 'commenter': 'ToucheSir', 'type': 'User'}, {'comment_id': 840653261, 'comment_body': '```suggestion\r\n        filefilterfn = f -> !occursin(f, ""tmp_clas|tmp_lm|unsup"")\r\n```\r\nA comment about why directories with these file names are to be avoided would be good too.', 'comment_created': datetime.datetime(2022, 4, 1, 14, 39, 3, tzinfo=datetime.timezone.utc), 'commenter': 'ToucheSir', 'type': 'User'}, {'comment_id': 840656944, 'comment_body': '```suggestion\r\nfunction replace_all_caps(t::String)\r\n    t = replace(t, r""([A-Z]+[^a-z\\s]*)(?=(\\s|$))"" => s""xxup \\1"")\r\n    return replace(t, r""([A-Z]*[^a-z\\s]+)(?=(\\s|$))"" => lowercase)\r\nend\r\n\r\n""""""\r\n    replace_sentence_case(String)\r\n\r\nReplace tokens in Sentence Case by their lower verions and add xxmaj before.\r\n""""""\r\nfunction replace_sentence_case(t::String)\r\n    t = replace(t, r""(?<!\\w)([A-Z][A-Z0-9]*[a-z0-9]+)(?!\\w)"" => s""xxmaj \\1"")\r\n    return replace(t, r""(?<!\\w)([A-Z][A-Z0-9]*[a-z0-9]+)(?!\\w)"" => lowercase)\r\nend\r\n\r\nconvert_lowercase(t::String) = string(""xxbos "", lowercase(t))\r\n\r\n```\r\nNot sure if the type annotations are necessary.', 'comment_created': datetime.datetime(2022, 4, 1, 14, 42, 58, tzinfo=datetime.timezone.utc), 'commenter': 'ToucheSir', 'type': 'User'}, {'comment_id': 840660559, 'comment_body': '```suggestion\r\n        return read(file, String)\r\n```\r\nPer last signature in https://docs.julialang.org/en/v1/base/io-network/#Base.read.', 'comment_created': datetime.datetime(2022, 4, 1, 14, 46, 48, tzinfo=datetime.timezone.utc), 'commenter': 'ToucheSir', 'type': 'User'}, {'comment_id': 840781403, 'comment_body': 'I guess we can Include the data from `unsup` folder for unsupervised text classification later. And the other two directories were just some metadata for language models. ', 'comment_created': datetime.datetime(2022, 4, 1, 17, 20, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Chandu-4444', 'type': 'User'}, {'comment_id': 840820404, 'comment_body': ""Here, If the split is set to true then it checks for the corresponding loadfile mapobs and parentname mapobs by using `length(data)` which returns 2 when we have a valid `data` when using split. The next case would be checking for total obs in the data, done by `nobs(data)` return 50000 in this case. If none of this happens, we throw an error.\r\n\r\nThis is how I've seen it was implemented in `Vision/recipes.jl`."", 'comment_created': datetime.datetime(2022, 4, 1, 18, 18, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Chandu-4444', 'type': 'User'}, {'comment_id': 840825865, 'comment_body': ""Even this is how I've seen it was implemented in `Vision/recipes.jl`. But if it seems reasonable to do it this way, we can change it."", 'comment_created': datetime.datetime(2022, 4, 1, 18, 26, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Chandu-4444', 'type': 'User'}, {'comment_id': 841349649, 'comment_body': 'Got it. I think there needs to be a bit more documentation on this across recipes (or at least more well-named things in code so that one can figure out what all the `[2]` business is about, but that need not concern this PR.', 'comment_created': datetime.datetime(2022, 4, 4, 3, 59, 17, tzinfo=datetime.timezone.utc), 'commenter': 'ToucheSir', 'type': 'User'}, {'comment_id': 841403758, 'comment_body': 'FastAI.jl does not use MLUtils.jl yet, see #196. Yes for the docs.', 'comment_created': datetime.datetime(2022, 4, 4, 6, 33, 13, tzinfo=datetime.timezone.utc), 'commenter': 'lorenzoh', 'type': 'User'}, {'comment_id': 841407847, 'comment_body': ""> The initial idea was to replicate struct Image{N} <: Block end. I haven't specified the dimension N as I'm not sure on incorporating it with textual data. Is it the length? Can that be the vocabulary size? Or can we just leave this as it is? (Maybe we can discuss this).\r\n\r\nDon't think this is necessary. As described in the documentation of `Block`, the block should only hold information that is constant for all observations, so encoding vocab size here would mean we assume it is fixed for all observations in a dataset which is too restrictive.\r\n\r\n> I guess all the observations for the above tasks can be represented using a block of the same type?\r\n\r\nYeah, that sounds like it 👍 \r\n\r\n> I think the better name would be Paragraph rather than TextBlock as most if not all of the text data has a single paragraph (multiple sentences) as an individual observation (We can consider a sentence as a paragraph too!).\r\n\r\n`Paragraph` is good :)"", 'comment_created': datetime.datetime(2022, 4, 4, 6, 40, 35, tzinfo=datetime.timezone.utc), 'commenter': 'lorenzoh', 'type': 'User'}, {'comment_id': 841664769, 'comment_body': ""> Paragraph is good :)\r\n\r\nYes, that's what I thought would be more reasonable. Changed it now."", 'comment_created': datetime.datetime(2022, 4, 4, 12, 9, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Chandu-4444', 'type': 'User'}, {'comment_id': 841682867, 'comment_body': ""I've now removed the annotations."", 'comment_created': datetime.datetime(2022, 4, 4, 12, 31, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Chandu-4444', 'type': 'User'}, {'comment_id': 856891040, 'comment_body': '`Paragraph` can have variable length, right? Let\'s put this in `mockblock` so that we don\'t bake in invariants that don\'t need to hold: \r\n```suggestion\r\nFastAI.mockblock(::Paragraph) = randstring("" ABCEEFGHIJKLMNOPQESRUVWXYZ 1234567890 abcdefghijklmnopqrstynwxyz\\n\\t.,"", rand(10:40))\r\n```', 'comment_created': datetime.datetime(2022, 4, 23, 13, 9, 13, tzinfo=datetime.timezone.utc), 'commenter': 'lorenzoh', 'type': 'User'}, {'comment_id': 856891408, 'comment_body': 'This is brittle in that it will break when a new recipe is added to `""imdb""` and goes into the internals of the dataset registry. This should test `finddatasets(""imdb"", B)` returns _at least one_ recipe for some block `B` we want to test.', 'comment_created': datetime.datetime(2022, 4, 23, 13, 12, 26, tzinfo=datetime.timezone.utc), 'commenter': 'lorenzoh', 'type': 'User'}, {'comment_id': 856891492, 'comment_body': 'Some inline tests for these preprocessing steps would be good to have, too', 'comment_created': datetime.datetime(2022, 4, 23, 13, 13, 35, tzinfo=datetime.timezone.utc), 'commenter': 'lorenzoh', 'type': 'User'}, {'comment_id': 856891692, 'comment_body': ""Yeah, that's more reasonable thing to do."", 'comment_created': datetime.datetime(2022, 4, 23, 13, 16, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Chandu-4444', 'type': 'User'}, {'comment_id': 856891904, 'comment_body': ""Yeah, that's in my to-do list. Just wanted to make sure they're necessary. I'll add some tests in my next commit."", 'comment_created': datetime.datetime(2022, 4, 23, 13, 18, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Chandu-4444', 'type': 'User'}, {'comment_id': 856891972, 'comment_body': ""Sure. I'll update the test."", 'comment_created': datetime.datetime(2022, 4, 23, 13, 19, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Chandu-4444', 'type': 'User'}]","[{'commit_sha': 'a8d0f526b36879cbc2fa17e062d11d5854fbbeea', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ea531c91ab243c761bb7680f981c4acc4c15493', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c533ce3e99a2156f58c94bde415b6fd73d3846ef', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50cfd2ef08013a20bb2ee3c8421fdda5c065c0f9', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e51b866151bb9da3efbbd9b16e7749c111af51c8', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15f710c29d6fc2849047ff8e16480e74e46f1846', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d5e4baef22a79025cc52149c600fbfd6eea022b', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd44e1b042936b19e620811d4675132f9f41ac094', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e714966f6565668c6ac22ce731513a55ca15a964', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '357eaf08e69392a5750a3d4609ca03e69c072fdb', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cbebcb67344d3a1eca23a59ee447f6be759f2c6c', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a18d72d1afe4d8d54111d6883d837a36ed71e50a', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a1266aac3b83553241deee7d06e7fc9e2581944', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd94c94e3864244e3f0e99a2fe767ee61d40e353c', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce50151e3068f62a75dba595fc6bd54cdaf90dc7', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db511fb82085c0bbd2c700c623a65c5ff3c88bdd', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'afc479fd9574b8401e3cff55b22ec529a4337845', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a779cf708be721f7092f46e09d0ba6848937183', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '98df8ec30969e5bb546bc234768d6955ced6e2fc', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b6224b404de740b29cfbc8c4e09d6802ad8fb0a9', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14a96d0ddc77ac337519961e9f2f023c5042c1ba', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb561b7d02d0ccb225934075ccbb9373445bd8b5', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a17345c87b68cad01e6283fe3d68f7e9b149c66', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70405acd76f330107b7d53f7ee8e8f395b442835', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '290ae32e7b1ca502fc93e1a86aa250658cf1f72a', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}]",Chandra Kiran G,52241074,,User,,29,,27,28
979091326,Text classification task,"Implemented the text encodings and `TextClassificationTask`. Still need to do numericalization and a few more encodings. Then will focus on writing docstrings and tests.
",True,245,https://api.github.com/repos/FluxML/FastAI.jl/pulls/245,https://github.com/FluxML/FastAI.jl/pull/245,closed,604,26,18,16,3,24,0,0,[],2022-06-25 16:43:43+00:00,2022-07-18 13:37:06+00:00,1976003.0,"22 days, 20:53:23","[{'comment_id': 911945062, 'comment_body': ""Can you add the symbols used here as you did for WordTokenizers? Then it's easier to see where variables come from and the namespace isn't polluted"", 'comment_created': datetime.datetime(2022, 7, 1, 13, 5, 5, tzinfo=datetime.timezone.utc), 'commenter': 'lorenzoh', 'type': 'User'}, {'comment_id': 911945149, 'comment_body': 'Same as for TextAnalysis\r\n\r\n', 'comment_created': datetime.datetime(2022, 7, 1, 13, 5, 12, tzinfo=datetime.timezone.utc), 'commenter': 'lorenzoh', 'type': 'User'}, {'comment_id': 911945700, 'comment_body': ""I think we shouldn't export the replace_* and convert_* functions for now as the high-level exported interface should be used via the encodings or tasks."", 'comment_created': datetime.datetime(2022, 7, 1, 13, 5, 55, tzinfo=datetime.timezone.utc), 'commenter': 'lorenzoh', 'type': 'User'}, {'comment_id': 911947291, 'comment_body': ""Let's call this block `Tokens`, to make clear it's multiple tokens. These blocks representing intermediate steps in the data pipeline also won't be exported (same as e.g. `ImageTensor`), so a short name is fine I think."", 'comment_created': datetime.datetime(2022, 7, 1, 13, 7, 55, tzinfo=datetime.timezone.utc), 'commenter': 'lorenzoh', 'type': 'User'}, {'comment_id': 911948284, 'comment_body': ""let's make `base_tfms` a constant in the module scope, i.e. `const DEFAULT_SANITIZERS`.\r\n\r\nThen this definition becomes `Sanitize() = Sanitize(DEFAULT_SANITIZERS)`"", 'comment_created': datetime.datetime(2022, 7, 1, 13, 9, 9, tzinfo=datetime.timezone.utc), 'commenter': 'lorenzoh', 'type': 'User'}, {'comment_id': 911949286, 'comment_body': '```suggestion\r\nencodedblock(::Sanitize, block::Paragraph) = block\r\n```', 'comment_created': datetime.datetime(2022, 7, 1, 13, 10, 22, tzinfo=datetime.timezone.utc), 'commenter': 'lorenzoh', 'type': 'User'}, {'comment_id': 911949856, 'comment_body': ""Do we ever need multiple tokenizers? I'm not super familiar with it.\r\n\r\nIf yes, it should be the same as above, i.e. make this a `DEFAULT_TOKENIZERS`"", 'comment_created': datetime.datetime(2022, 7, 1, 13, 11, 4, tzinfo=datetime.timezone.utc), 'commenter': 'lorenzoh', 'type': 'User'}, {'comment_id': 911951443, 'comment_body': '```suggestion\r\nusing DataStructures: OrderedDict\r\n```', 'comment_created': datetime.datetime(2022, 7, 1, 13, 13, 6, tzinfo=datetime.timezone.utc), 'commenter': 'lorenzoh', 'type': 'User'}, {'comment_id': 911951669, 'comment_body': 'Do these work?', 'comment_created': datetime.datetime(2022, 7, 1, 13, 13, 25, tzinfo=datetime.timezone.utc), 'commenter': 'lorenzoh', 'type': 'User'}, {'comment_id': 912517175, 'comment_body': ""Yes, I checked it and it's working fine."", 'comment_created': datetime.datetime(2022, 7, 3, 17, 45, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Chandu-4444', 'type': 'User'}, {'comment_id': 912517485, 'comment_body': 'Then I would leave them uncommented so CI can do its work :)', 'comment_created': datetime.datetime(2022, 7, 3, 17, 49, 3, tzinfo=datetime.timezone.utc), 'commenter': 'ToucheSir', 'type': 'User'}, {'comment_id': 912517613, 'comment_body': '```suggestion\r\n    lookup_table = Dict{String,Int{()\r\n```', 'comment_created': datetime.datetime(2022, 7, 3, 17, 50, 20, tzinfo=datetime.timezone.utc), 'commenter': 'ToucheSir', 'type': 'User'}, {'comment_id': 912517672, 'comment_body': '```suggestion\r\n    sanitized_Data = map(i -> encode(enc1, Training(), Paragraph(), getobs(data, i)[1]), 1:25000)\r\n```\r\nThis upper bound is a little odd to me. Why is it fixed at 250k?', 'comment_created': datetime.datetime(2022, 7, 3, 17, 51, 18, tzinfo=datetime.timezone.utc), 'commenter': 'ToucheSir', 'type': 'User'}, {'comment_id': 912517679, 'comment_body': 'Ditto here.', 'comment_created': datetime.datetime(2022, 7, 3, 17, 51, 32, tzinfo=datetime.timezone.utc), 'commenter': 'ToucheSir', 'type': 'User'}, {'comment_id': 912517819, 'comment_body': '```suggestion\r\n    return [vocabulary[token] for token in obs]\r\n```', 'comment_created': datetime.datetime(2022, 7, 3, 17, 52, 53, tzinfo=datetime.timezone.utc), 'commenter': 'ToucheSir', 'type': 'User'}, {'comment_id': 912517857, 'comment_body': 'Is `tfms` always a Vector? This can probably be constrained further.', 'comment_created': datetime.datetime(2022, 7, 3, 17, 53, 37, tzinfo=datetime.timezone.utc), 'commenter': 'ToucheSir', 'type': 'User'}, {'comment_id': 912518437, 'comment_body': ""Sure! now that I've changed the structure of `block`s a bit I need to modify these."", 'comment_created': datetime.datetime(2022, 7, 3, 17, 58, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Chandu-4444', 'type': 'User'}, {'comment_id': 912519438, 'comment_body': ""That is the total number of samples in `data`. I should have used `numobs(data)` instead. I'll change this now."", 'comment_created': datetime.datetime(2022, 7, 3, 18, 8, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Chandu-4444', 'type': 'User'}, {'comment_id': 912519974, 'comment_body': ""Hmm.. Not always a vector and it can be empty too. But if one transform is used that'll probably be used along with a couple of other transforms like remove_puncts, stripping case etc."", 'comment_created': datetime.datetime(2022, 7, 3, 18, 13, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Chandu-4444', 'type': 'User'}, {'comment_id': 912520623, 'comment_body': 'What can it be other than a vector? Can you enumerate the possible types?', 'comment_created': datetime.datetime(2022, 7, 3, 18, 19, 56, tzinfo=datetime.timezone.utc), 'commenter': 'ToucheSir', 'type': 'User'}, {'comment_id': 912520677, 'comment_body': 'Can you `mapobs` over `data` directly then?', 'comment_created': datetime.datetime(2022, 7, 3, 18, 20, 32, tzinfo=datetime.timezone.utc), 'commenter': 'ToucheSir', 'type': 'User'}, {'comment_id': 912521173, 'comment_body': ""I mean it can either be empty (empty vector?) or a vector. For example, in the case of text generation, we don't have any sanitization for the input data and here sanitization step can be skipped. But yes! it'll always be a vector then. "", 'comment_created': datetime.datetime(2022, 7, 3, 18, 25, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Chandu-4444', 'type': 'User'}, {'comment_id': 912530035, 'comment_body': ""I didn't get that. Can you please elaborate?"", 'comment_created': datetime.datetime(2022, 7, 3, 19, 50, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Chandu-4444', 'type': 'User'}, {'comment_id': 912546882, 'comment_body': 'Instead of mapping over the indices of data and calling `getobs` for each index, why not just call `mapobs` with data?', 'comment_created': datetime.datetime(2022, 7, 3, 22, 57, 52, tzinfo=datetime.timezone.utc), 'commenter': 'ToucheSir', 'type': 'User'}]","[{'commit_sha': '03971dc5b44dc6e1e9f8fd14617fb1fbd0f49792', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f4ccd98050199c694e095fe290db3612b5c96064', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e145f8c8f3bf33b0ba5b4385d8a30ceb14baa80', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4ce96874604f10943d4f562c1e9500eacea1392', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0db0336c3a8eb5a04c23d117b35017891d81a9a1', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d5c7ec62c970c892624b2a23360db51de213bbe', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9181089957246764c06a47bea074e057c44e96c8', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c50f871d898fe56800f6f35809cd693dde4fb14', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef92e9899a11648b192393010631db77182be64b', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a53765c4eaa9907214ec224526be2f7ea774ef7', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b61f25525f23b76b5886909371a27ed273a5d74c', 'committer_username': 'lorenzoh', 'committer_name': None, 'committer_email': 'lorenz.ohly@gmail.com', 'commit_date': datetime.datetime(2017, 5, 19, 17, 4, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '513c7df33ff20b5606d895ca35a811a96b548a4e', 'committer_username': 'lorenzoh', 'committer_name': None, 'committer_email': 'lorenz.ohly@gmail.com', 'commit_date': datetime.datetime(2017, 5, 19, 17, 4, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53044722e8e7ce9d45abe02cb76f100c8db2d014', 'committer_username': 'lorenzoh', 'committer_name': None, 'committer_email': 'lorenz.ohly@gmail.com', 'commit_date': datetime.datetime(2017, 5, 19, 17, 4, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '00bf770a7c740c146dc352ea83ca63bf8fe103d5', 'committer_username': 'lorenzoh', 'committer_name': None, 'committer_email': 'lorenz.ohly@gmail.com', 'commit_date': datetime.datetime(2017, 5, 19, 17, 4, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '485e73c13b57edcb3dc99de7a53034c75d2ff45d', 'committer_username': 'lorenzoh', 'committer_name': None, 'committer_email': 'lorenz.ohly@gmail.com', 'commit_date': datetime.datetime(2017, 5, 19, 17, 4, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d63b57717d846a50742ffd8dc2713526014882a', 'committer_username': 'lorenzoh', 'committer_name': None, 'committer_email': 'lorenz.ohly@gmail.com', 'commit_date': datetime.datetime(2017, 5, 19, 17, 4, 52, tzinfo=datetime.timezone.utc)}]",Chandra Kiran G,52241074,,User,,29,,27,28
1004064922,Textmodel integration,"Can do the following:

```julia
lm = FastText.LanguageModel(true)
classifier = FastText.TextClassifier(lm)
FastText.train_classifier!(classifier) # Would throw an error as I haven't fully enabled the model to work with FastAI's data container.
```


",False,250,https://api.github.com/repos/FluxML/FastAI.jl/pulls/250,https://github.com/FluxML/FastAI.jl/pull/250,open,305651,23,15,41,7,44,0,0,[],2022-07-21 11:30:17+00:00,,0.0,,"[{'comment_id': 934038789, 'comment_body': 'Are these temporary for testing the PR or do they come from TextModels? If the latter, I would get rid of them.', 'comment_created': datetime.datetime(2022, 7, 31, 21, 1, 1, tzinfo=datetime.timezone.utc), 'commenter': 'ToucheSir', 'type': 'User'}, {'comment_id': 934038865, 'comment_body': ""```suggestion\r\n            Base.Fix2(de, true),\r\n```\r\nOtherwise the model won't be serializable."", 'comment_created': datetime.datetime(2022, 7, 31, 21, 1, 37, tzinfo=datetime.timezone.utc), 'commenter': 'ToucheSir', 'type': 'User'}, {'comment_id': 934038955, 'comment_body': 'Likewise, I think this repeated lambda should be pulled out into a helper function of some sort.', 'comment_created': datetime.datetime(2022, 7, 31, 21, 2, 33, tzinfo=datetime.timezone.utc), 'commenter': 'ToucheSir', 'type': 'User'}, {'comment_id': 934039123, 'comment_body': 'Enforcing all the drop probabilities to Float64 seems like a bad idea. We could either weaken it to something like `AbstractFloat` or drop the annotation altogether. ', 'comment_created': datetime.datetime(2022, 7, 31, 21, 3, 34, tzinfo=datetime.timezone.utc), 'commenter': 'ToucheSir', 'type': 'User'}, {'comment_id': 934039240, 'comment_body': ""```suggestion\r\nstruct LanguageModel\r\n```\r\nBoth fields of this struct are abstract types, so we'll have to think about that sooner or later. Until then, can this be immutable?"", 'comment_created': datetime.datetime(2022, 7, 31, 21, 4, 36, tzinfo=datetime.timezone.utc), 'commenter': 'ToucheSir', 'type': 'User'}, {'comment_id': 934039341, 'comment_body': '```suggestion\r\n    seq = [i[sample_index] for i in batches[batch_index][sample_seq_index]]\r\n```\r\nThis can be a comprehension.', 'comment_created': datetime.datetime(2022, 7, 31, 21, 5, 53, tzinfo=datetime.timezone.utc), 'commenter': 'ToucheSir', 'type': 'User'}, {'comment_id': 934039408, 'comment_body': 'Some explanation of  what `[2]` means here would help. Giving it a variable name is the easiest choice, but a comment about the general expected input format of `batches` would be even better.', 'comment_created': datetime.datetime(2022, 7, 31, 21, 6, 45, tzinfo=datetime.timezone.utc), 'commenter': 'ToucheSir', 'type': 'User'}, {'comment_id': 934039671, 'comment_body': ""I would get rid of this. If it's needed for the training code, we can discuss how to replace it."", 'comment_created': datetime.datetime(2022, 7, 31, 21, 9, 6, tzinfo=datetime.timezone.utc), 'commenter': 'ToucheSir', 'type': 'User'}, {'comment_id': 934039774, 'comment_body': '```suggestion\r\nFlux.trainable(m::DroppedEmbeddings) = (; emb=m.emb)\r\n```\r\n', 'comment_created': datetime.datetime(2022, 7, 31, 21, 9, 57, tzinfo=datetime.timezone.utc), 'commenter': 'ToucheSir', 'type': 'User'}, {'comment_id': 934040871, 'comment_body': ""@lorenzoh I don't believe we have any utils for this in Flux or FastAI, right? Haven't kept up with the list of callbacks."", 'comment_created': datetime.datetime(2022, 7, 31, 21, 21, 8, tzinfo=datetime.timezone.utc), 'commenter': 'ToucheSir', 'type': 'User'}, {'comment_id': 934040909, 'comment_body': '```suggestion\r\nFlux.@functor AWD_LSTM (layer,)\r\n```', 'comment_created': datetime.datetime(2022, 7, 31, 21, 21, 47, tzinfo=datetime.timezone.utc), 'commenter': 'ToucheSir', 'type': 'User'}, {'comment_id': 935319065, 'comment_body': 'I don’t think so. This also seems very model-specific so it’s  maybe best to keep it as part of the model.', 'comment_created': datetime.datetime(2022, 8, 2, 9, 20, 14, tzinfo=datetime.timezone.utc), 'commenter': 'lorenzoh', 'type': 'User'}, {'comment_id': 935375636, 'comment_body': ""Yes, they're just temporary for training the model."", 'comment_created': datetime.datetime(2022, 8, 2, 10, 15, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Chandu-4444', 'type': 'User'}, {'comment_id': 935393147, 'comment_body': ""That won't be necessary right now, I'll remove this."", 'comment_created': datetime.datetime(2022, 8, 2, 10, 32, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Chandu-4444', 'type': 'User'}, {'comment_id': 935393419, 'comment_body': 'OK.', 'comment_created': datetime.datetime(2022, 8, 2, 10, 32, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Chandu-4444', 'type': 'User'}, {'comment_id': 952819518, 'comment_body': 'These are now replaced by `state0` and stored in `Recur`', 'comment_created': datetime.datetime(2022, 8, 23, 16, 0, 57, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 952822535, 'comment_body': 'Flux has `Flux.dropout_mask(x, p)` which replaces this', 'comment_created': datetime.datetime(2022, 8, 23, 16, 3, 10, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 952823028, 'comment_body': 'This needs a type parameter', 'comment_created': datetime.datetime(2022, 8, 23, 16, 3, 38, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 952824210, 'comment_body': 'We need `init`, `initb`, and `init_state` separately here', 'comment_created': datetime.datetime(2022, 8, 23, 16, 4, 33, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 952826176, 'comment_body': '```suggestion\r\nFlux.trainable(m::WeightDroppedLSTMCell) = (Wi = m.Wi, Wh = m.Wh, b = m.b)\r\n```', 'comment_created': datetime.datetime(2022, 8, 23, 16, 6, 7, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 952826911, 'comment_body': 'This can be deleted once the `state0` changes are incorporated correctly.', 'comment_created': datetime.datetime(2022, 8, 23, 16, 6, 43, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 952924836, 'comment_body': '```suggestion\r\n    Wi = Flux._isactive(m) ? m.Wi .* m.maskWi : m.Wi\r\n    Wh = Flux._isactive(m) ? m.Wh .* m.maskWh : m.Wh\r\n```', 'comment_created': datetime.datetime(2022, 8, 23, 17, 23, 45, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 952926344, 'comment_body': '```suggestion\r\nfunction Flux.reset!(layer::Flux.Recur{<:WeightDroppedLSTMCell})\r\n    maskWi = drop_mask(layer.cell.Wi, layer.cell.p)\r\n    maskWh = drop_mask(layer.cell.Wh, layer.cell.p)\r\n    layer.state = (layer.cell.state0..., maskWi, maskWh)\r\n    \r\n    return nothing\r\nend\r\n```', 'comment_created': datetime.datetime(2022, 8, 23, 17, 25, 24, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 952927583, 'comment_body': '```suggestion\r\n    maskWi = drop_mask(cell.Wi, cell.p)\r\n    maskWh = drop_mask(cell.Wh, cell.p)\r\n    hidden = (cell.state0..., maskWi, maskWh)\r\n```', 'comment_created': datetime.datetime(2022, 8, 23, 17, 26, 43, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 952928488, 'comment_body': 'Remove these fields too', 'comment_created': datetime.datetime(2022, 8, 23, 17, 27, 41, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 952930607, 'comment_body': 'Why does it only mask part of the bias @Chandu-4444?', 'comment_created': datetime.datetime(2022, 8, 23, 17, 30, 7, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 952933093, 'comment_body': '```suggestion\r\n        :auto,\r\n```', 'comment_created': datetime.datetime(2022, 8, 23, 17, 32, 59, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 952954487, 'comment_body': 'This should have a type', 'comment_created': datetime.datetime(2022, 8, 23, 17, 57, 47, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 952954636, 'comment_body': '```suggestion\r\n            :auto\r\n```', 'comment_created': datetime.datetime(2022, 8, 23, 17, 57, 59, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 952954804, 'comment_body': '```suggestion\r\n    dropped = Flux._isactive(de) ? de.emb .* de.mask : de.emb\r\n```', 'comment_created': datetime.datetime(2022, 8, 23, 17, 58, 13, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 952955079, 'comment_body': 'Overload `Flux.reset!` here', 'comment_created': datetime.datetime(2022, 8, 23, 17, 58, 33, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 952955244, 'comment_body': '```suggestion\r\nstruct PooledDense{F, S, T}\r\n    W::S\r\n    b::T\r\n    σ::F\r\nend\r\n```', 'comment_created': datetime.datetime(2022, 8, 23, 17, 58, 46, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 952955473, 'comment_body': '```suggestion\r\n             initW = Flux.glorot_uniform, initb = Flux.zeros32)\r\n```', 'comment_created': datetime.datetime(2022, 8, 23, 17, 59, 3, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 953172903, 'comment_body': 'As promised, here\'s the proposal from our call today:\r\n```julia\r\nmutable struct VarDropCell{F}\r\n    p::F\r\n    active::Union{Bool, Nothing} # matches other norm layers\r\nend\r\n@functor VarDropCell\r\n\r\nVarDropCell(p::Real=0.0) = VarDropCell(p, nothing)\r\n\r\nfunction (vd::VarDropCell)((has_mask, mask), x)\r\n    if Flux._isactive(vd)\r\n        mask = has_mask ? mask : drop_mask(x, vd.p)\r\n        return (true, mask), x .* mask\r\n    elseif !has_mask\r\n        return (has_mask, mask), x\r\n    else\r\n        error(""Mask set but layer is in test mode. Call `reset!` to clear the mask."")\r\n    end\r\nend\r\n\r\n# The single-element array keeps Recur happy.\r\n# Limitation: typeof(p) must == typeof(<inputs>)\r\nVarDrop(p::Real) = Recur(VarDropCell(p), ones(typeof(p), 1, 1))\r\n```\r\nPlus bits to make `testmode!`, `_isactive` and `reset!` work properly.', 'comment_created': datetime.datetime(2022, 8, 23, 22, 54, 57, tzinfo=datetime.timezone.utc), 'commenter': 'ToucheSir', 'type': 'User'}, {'comment_id': 956353088, 'comment_body': ""Since it is ported from TextModels.jl I'm not completely sure of this. Even Flux.jl has this line [this](https://github.com/FluxML/Flux.jl/blob/a377cb0637557b4c189fcc904bec65df9a124eb0/src/layers/recurrent.jl#L292).\r\nWould be helpful if someone could explain the reason."", 'comment_created': datetime.datetime(2022, 8, 26, 18, 59, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Chandu-4444', 'type': 'User'}, {'comment_id': 959662094, 'comment_body': 'This comment is still outstanding.', 'comment_created': datetime.datetime(2022, 8, 31, 14, 31, 11, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 961025821, 'comment_body': '```suggestion\r\nstruct TextClassifier{A,F,Q}\r\n```', 'comment_created': datetime.datetime(2022, 9, 1, 19, 26, 4, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 961026760, 'comment_body': '```suggestion\r\nFlux.@functor TextClassifier\r\nFlux.trainable(m::TextClassifier) = (rnn_layers = m.rnn_layers, linear_layers = m.linear_layers)\r\n```', 'comment_created': datetime.datetime(2022, 9, 1, 19, 27, 24, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 961065922, 'comment_body': 'No luck! The problem still remains the same.', 'comment_created': datetime.datetime(2022, 9, 1, 20, 18, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Chandu-4444', 'type': 'User'}, {'comment_id': 963981375, 'comment_body': 'This has to be an abstract array type so that GPU arrays (`CuVector`s) also work', 'comment_created': datetime.datetime(2022, 9, 6, 17, 16, 34, tzinfo=datetime.timezone.utc), 'commenter': 'lorenzoh', 'type': 'User'}, {'comment_id': 964871958, 'comment_body': '```suggestion\r\n    maskWi = Flux.dropout_mask(Flux.rng_from_array(cell.Wi), cell.Wi, cell.p)\r\n    maskWh = Flux.dropout_mask(Flux.rng_from_array(cell.Wh), cell.Wh, cell.p)\r\n```', 'comment_created': datetime.datetime(2022, 9, 7, 13, 50, 13, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 964872308, 'comment_body': '```suggestion\r\n    maskWi = Flux.dropout_mask(Flux.rng_from_array(layer.cell.Wi), layer.cell.Wi, layer.cell.p)\r\n    maskWh = Flux.dropout_mask(Flux.rng_from_array(layer.cell.Wh), layer.cell.Wh, layer.cell.p)\r\n```', 'comment_created': datetime.datetime(2022, 9, 7, 13, 50, 32, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 964872595, 'comment_body': '```suggestion\r\n        mask = has_mask ? mask : Flux.dropout_mask(Flux.rng_from_array(x), x, vd.p)\r\n```', 'comment_created': datetime.datetime(2022, 9, 7, 13, 50, 46, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 964873031, 'comment_body': 'Bumping this comment', 'comment_created': datetime.datetime(2022, 9, 7, 13, 51, 7, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}]","[{'commit_sha': '8194f3f900902e58a4d76a0ab80bf04e64c9884f', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76622307e9b8282c0f926329ad599ca7dfefe646', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1418e5084f52fd9a5785d262c6789297ca488ad2', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b682105535a1be631fa66640efdec0577400c425', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1064bc1ea2fb1f67b729eaddd9df1c6db7fa138', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '345ced1150b3eb5463ecd1160c3e24c329d7a288', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46b6826766be4e81be8fb05a78aa70e66bfd59a2', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '388e8acee6d51bcc5c822b2020aa3092053d645a', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8bfe705beb1d7accf579a63f246ca5edc389a687', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2482aaa8ec78b6b460d176f018a9f56df995ca41', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8bc930db4f8eb89ed8ba108d7f76597920fee36d', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3882b1d26f6d6d45a7fd26f1fc24f0bf27d4a652', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '30579894262a0feed30d0cb4dbba64e726398ba6', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '307fde18247e6c5f8e7af7e5554e90e6386c0e9a', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '075a21e99bccf4981d97a162e939c97ac3c21ab6', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f16ec2c5f88d1f7b426cbf4f32db5a9cfa685717', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '346963045d0884fe33902f322cfc7080aa0efe12', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '974a6224e44851879b4325ff0197f5599dd4a5e8', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d44bbd63a990ea585ceb44108ba99177db451d1', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ad9a12a41e87fddbf23fa91d5281af6b5fdd669', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '080a0180b71471c9be97c3a84a81de135326f45f', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '922334d27b0bb533990820412ef5efb9f8311265', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce34be1713491f772392758f1afa008db2051ae0', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6cea9027036e5b053b744202f5e74930abc2a33a', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5159fb80b76686a5273a273ab5d994c9bef47c63', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c6b69f7e8c51d451827361429945326f89fa9d07', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '164fe21c4e178d8d03beef67229d7bb1330821b8', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ce6df2049b72af7675dcb968a7b35a9cf2223cf', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '712d9c8c9215bc766cd00d89228f073bce22619e', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d6504b113e3465bab5d1957aa357a1b60c42c58', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5af6edb79fed7c4df7d3d6a390776401d683c1c4', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '659e6d1762875df68d6304638fdc2228c05f378f', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a151b20d696d4c916ba3873a751ca0b7eae3e41', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12bc9abd478ae6782354231abe039198ad55da88', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '35c345f906d6aefdf375565404ceef389075f29c', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cceee4612139b5f4285d1970cc8071ed232b6b0e', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f7d51f6e00e2d2103b586e6f21e8a71fc8f31a28', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90c9a79da0eda2915ba2b9ad16dfe4acd495be3a', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e7de6d798fd5eae9e9b426edd094be5c3e570d6', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1418b32472a2f5483d491543d45f4ee9397e7c0', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c04d1990a834da2faf2f22fa7d99ffb015cc0fa', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}]",Chandra Kiran G,52241074,,User,,29,,27,28
1004064922,Textmodel integration,"Can do the following:

```julia
lm = FastText.LanguageModel(true)
classifier = FastText.TextClassifier(lm)
FastText.train_classifier!(classifier) # Would throw an error as I haven't fully enabled the model to work with FastAI's data container.
```


",False,250,https://api.github.com/repos/FluxML/FastAI.jl/pulls/250,https://github.com/FluxML/FastAI.jl/pull/250,open,305651,23,15,41,7,44,0,0,[],2022-07-21 11:30:17+00:00,,0.0,,"[{'comment_id': 934038789, 'comment_body': 'Are these temporary for testing the PR or do they come from TextModels? If the latter, I would get rid of them.', 'comment_created': datetime.datetime(2022, 7, 31, 21, 1, 1, tzinfo=datetime.timezone.utc), 'commenter': 'ToucheSir', 'type': 'User'}, {'comment_id': 934038865, 'comment_body': ""```suggestion\r\n            Base.Fix2(de, true),\r\n```\r\nOtherwise the model won't be serializable."", 'comment_created': datetime.datetime(2022, 7, 31, 21, 1, 37, tzinfo=datetime.timezone.utc), 'commenter': 'ToucheSir', 'type': 'User'}, {'comment_id': 934038955, 'comment_body': 'Likewise, I think this repeated lambda should be pulled out into a helper function of some sort.', 'comment_created': datetime.datetime(2022, 7, 31, 21, 2, 33, tzinfo=datetime.timezone.utc), 'commenter': 'ToucheSir', 'type': 'User'}, {'comment_id': 934039123, 'comment_body': 'Enforcing all the drop probabilities to Float64 seems like a bad idea. We could either weaken it to something like `AbstractFloat` or drop the annotation altogether. ', 'comment_created': datetime.datetime(2022, 7, 31, 21, 3, 34, tzinfo=datetime.timezone.utc), 'commenter': 'ToucheSir', 'type': 'User'}, {'comment_id': 934039240, 'comment_body': ""```suggestion\r\nstruct LanguageModel\r\n```\r\nBoth fields of this struct are abstract types, so we'll have to think about that sooner or later. Until then, can this be immutable?"", 'comment_created': datetime.datetime(2022, 7, 31, 21, 4, 36, tzinfo=datetime.timezone.utc), 'commenter': 'ToucheSir', 'type': 'User'}, {'comment_id': 934039341, 'comment_body': '```suggestion\r\n    seq = [i[sample_index] for i in batches[batch_index][sample_seq_index]]\r\n```\r\nThis can be a comprehension.', 'comment_created': datetime.datetime(2022, 7, 31, 21, 5, 53, tzinfo=datetime.timezone.utc), 'commenter': 'ToucheSir', 'type': 'User'}, {'comment_id': 934039408, 'comment_body': 'Some explanation of  what `[2]` means here would help. Giving it a variable name is the easiest choice, but a comment about the general expected input format of `batches` would be even better.', 'comment_created': datetime.datetime(2022, 7, 31, 21, 6, 45, tzinfo=datetime.timezone.utc), 'commenter': 'ToucheSir', 'type': 'User'}, {'comment_id': 934039671, 'comment_body': ""I would get rid of this. If it's needed for the training code, we can discuss how to replace it."", 'comment_created': datetime.datetime(2022, 7, 31, 21, 9, 6, tzinfo=datetime.timezone.utc), 'commenter': 'ToucheSir', 'type': 'User'}, {'comment_id': 934039774, 'comment_body': '```suggestion\r\nFlux.trainable(m::DroppedEmbeddings) = (; emb=m.emb)\r\n```\r\n', 'comment_created': datetime.datetime(2022, 7, 31, 21, 9, 57, tzinfo=datetime.timezone.utc), 'commenter': 'ToucheSir', 'type': 'User'}, {'comment_id': 934040871, 'comment_body': ""@lorenzoh I don't believe we have any utils for this in Flux or FastAI, right? Haven't kept up with the list of callbacks."", 'comment_created': datetime.datetime(2022, 7, 31, 21, 21, 8, tzinfo=datetime.timezone.utc), 'commenter': 'ToucheSir', 'type': 'User'}, {'comment_id': 934040909, 'comment_body': '```suggestion\r\nFlux.@functor AWD_LSTM (layer,)\r\n```', 'comment_created': datetime.datetime(2022, 7, 31, 21, 21, 47, tzinfo=datetime.timezone.utc), 'commenter': 'ToucheSir', 'type': 'User'}, {'comment_id': 935319065, 'comment_body': 'I don’t think so. This also seems very model-specific so it’s  maybe best to keep it as part of the model.', 'comment_created': datetime.datetime(2022, 8, 2, 9, 20, 14, tzinfo=datetime.timezone.utc), 'commenter': 'lorenzoh', 'type': 'User'}, {'comment_id': 935375636, 'comment_body': ""Yes, they're just temporary for training the model."", 'comment_created': datetime.datetime(2022, 8, 2, 10, 15, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Chandu-4444', 'type': 'User'}, {'comment_id': 935393147, 'comment_body': ""That won't be necessary right now, I'll remove this."", 'comment_created': datetime.datetime(2022, 8, 2, 10, 32, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Chandu-4444', 'type': 'User'}, {'comment_id': 935393419, 'comment_body': 'OK.', 'comment_created': datetime.datetime(2022, 8, 2, 10, 32, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Chandu-4444', 'type': 'User'}, {'comment_id': 952819518, 'comment_body': 'These are now replaced by `state0` and stored in `Recur`', 'comment_created': datetime.datetime(2022, 8, 23, 16, 0, 57, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 952822535, 'comment_body': 'Flux has `Flux.dropout_mask(x, p)` which replaces this', 'comment_created': datetime.datetime(2022, 8, 23, 16, 3, 10, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 952823028, 'comment_body': 'This needs a type parameter', 'comment_created': datetime.datetime(2022, 8, 23, 16, 3, 38, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 952824210, 'comment_body': 'We need `init`, `initb`, and `init_state` separately here', 'comment_created': datetime.datetime(2022, 8, 23, 16, 4, 33, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 952826176, 'comment_body': '```suggestion\r\nFlux.trainable(m::WeightDroppedLSTMCell) = (Wi = m.Wi, Wh = m.Wh, b = m.b)\r\n```', 'comment_created': datetime.datetime(2022, 8, 23, 16, 6, 7, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 952826911, 'comment_body': 'This can be deleted once the `state0` changes are incorporated correctly.', 'comment_created': datetime.datetime(2022, 8, 23, 16, 6, 43, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 952924836, 'comment_body': '```suggestion\r\n    Wi = Flux._isactive(m) ? m.Wi .* m.maskWi : m.Wi\r\n    Wh = Flux._isactive(m) ? m.Wh .* m.maskWh : m.Wh\r\n```', 'comment_created': datetime.datetime(2022, 8, 23, 17, 23, 45, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 952926344, 'comment_body': '```suggestion\r\nfunction Flux.reset!(layer::Flux.Recur{<:WeightDroppedLSTMCell})\r\n    maskWi = drop_mask(layer.cell.Wi, layer.cell.p)\r\n    maskWh = drop_mask(layer.cell.Wh, layer.cell.p)\r\n    layer.state = (layer.cell.state0..., maskWi, maskWh)\r\n    \r\n    return nothing\r\nend\r\n```', 'comment_created': datetime.datetime(2022, 8, 23, 17, 25, 24, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 952927583, 'comment_body': '```suggestion\r\n    maskWi = drop_mask(cell.Wi, cell.p)\r\n    maskWh = drop_mask(cell.Wh, cell.p)\r\n    hidden = (cell.state0..., maskWi, maskWh)\r\n```', 'comment_created': datetime.datetime(2022, 8, 23, 17, 26, 43, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 952928488, 'comment_body': 'Remove these fields too', 'comment_created': datetime.datetime(2022, 8, 23, 17, 27, 41, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 952930607, 'comment_body': 'Why does it only mask part of the bias @Chandu-4444?', 'comment_created': datetime.datetime(2022, 8, 23, 17, 30, 7, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 952933093, 'comment_body': '```suggestion\r\n        :auto,\r\n```', 'comment_created': datetime.datetime(2022, 8, 23, 17, 32, 59, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 952954487, 'comment_body': 'This should have a type', 'comment_created': datetime.datetime(2022, 8, 23, 17, 57, 47, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 952954636, 'comment_body': '```suggestion\r\n            :auto\r\n```', 'comment_created': datetime.datetime(2022, 8, 23, 17, 57, 59, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 952954804, 'comment_body': '```suggestion\r\n    dropped = Flux._isactive(de) ? de.emb .* de.mask : de.emb\r\n```', 'comment_created': datetime.datetime(2022, 8, 23, 17, 58, 13, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 952955079, 'comment_body': 'Overload `Flux.reset!` here', 'comment_created': datetime.datetime(2022, 8, 23, 17, 58, 33, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 952955244, 'comment_body': '```suggestion\r\nstruct PooledDense{F, S, T}\r\n    W::S\r\n    b::T\r\n    σ::F\r\nend\r\n```', 'comment_created': datetime.datetime(2022, 8, 23, 17, 58, 46, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 952955473, 'comment_body': '```suggestion\r\n             initW = Flux.glorot_uniform, initb = Flux.zeros32)\r\n```', 'comment_created': datetime.datetime(2022, 8, 23, 17, 59, 3, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 953172903, 'comment_body': 'As promised, here\'s the proposal from our call today:\r\n```julia\r\nmutable struct VarDropCell{F}\r\n    p::F\r\n    active::Union{Bool, Nothing} # matches other norm layers\r\nend\r\n@functor VarDropCell\r\n\r\nVarDropCell(p::Real=0.0) = VarDropCell(p, nothing)\r\n\r\nfunction (vd::VarDropCell)((has_mask, mask), x)\r\n    if Flux._isactive(vd)\r\n        mask = has_mask ? mask : drop_mask(x, vd.p)\r\n        return (true, mask), x .* mask\r\n    elseif !has_mask\r\n        return (has_mask, mask), x\r\n    else\r\n        error(""Mask set but layer is in test mode. Call `reset!` to clear the mask."")\r\n    end\r\nend\r\n\r\n# The single-element array keeps Recur happy.\r\n# Limitation: typeof(p) must == typeof(<inputs>)\r\nVarDrop(p::Real) = Recur(VarDropCell(p), ones(typeof(p), 1, 1))\r\n```\r\nPlus bits to make `testmode!`, `_isactive` and `reset!` work properly.', 'comment_created': datetime.datetime(2022, 8, 23, 22, 54, 57, tzinfo=datetime.timezone.utc), 'commenter': 'ToucheSir', 'type': 'User'}, {'comment_id': 956353088, 'comment_body': ""Since it is ported from TextModels.jl I'm not completely sure of this. Even Flux.jl has this line [this](https://github.com/FluxML/Flux.jl/blob/a377cb0637557b4c189fcc904bec65df9a124eb0/src/layers/recurrent.jl#L292).\r\nWould be helpful if someone could explain the reason."", 'comment_created': datetime.datetime(2022, 8, 26, 18, 59, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Chandu-4444', 'type': 'User'}, {'comment_id': 959662094, 'comment_body': 'This comment is still outstanding.', 'comment_created': datetime.datetime(2022, 8, 31, 14, 31, 11, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 961025821, 'comment_body': '```suggestion\r\nstruct TextClassifier{A,F,Q}\r\n```', 'comment_created': datetime.datetime(2022, 9, 1, 19, 26, 4, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 961026760, 'comment_body': '```suggestion\r\nFlux.@functor TextClassifier\r\nFlux.trainable(m::TextClassifier) = (rnn_layers = m.rnn_layers, linear_layers = m.linear_layers)\r\n```', 'comment_created': datetime.datetime(2022, 9, 1, 19, 27, 24, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 961065922, 'comment_body': 'No luck! The problem still remains the same.', 'comment_created': datetime.datetime(2022, 9, 1, 20, 18, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Chandu-4444', 'type': 'User'}, {'comment_id': 963981375, 'comment_body': 'This has to be an abstract array type so that GPU arrays (`CuVector`s) also work', 'comment_created': datetime.datetime(2022, 9, 6, 17, 16, 34, tzinfo=datetime.timezone.utc), 'commenter': 'lorenzoh', 'type': 'User'}, {'comment_id': 964871958, 'comment_body': '```suggestion\r\n    maskWi = Flux.dropout_mask(Flux.rng_from_array(cell.Wi), cell.Wi, cell.p)\r\n    maskWh = Flux.dropout_mask(Flux.rng_from_array(cell.Wh), cell.Wh, cell.p)\r\n```', 'comment_created': datetime.datetime(2022, 9, 7, 13, 50, 13, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 964872308, 'comment_body': '```suggestion\r\n    maskWi = Flux.dropout_mask(Flux.rng_from_array(layer.cell.Wi), layer.cell.Wi, layer.cell.p)\r\n    maskWh = Flux.dropout_mask(Flux.rng_from_array(layer.cell.Wh), layer.cell.Wh, layer.cell.p)\r\n```', 'comment_created': datetime.datetime(2022, 9, 7, 13, 50, 32, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 964872595, 'comment_body': '```suggestion\r\n        mask = has_mask ? mask : Flux.dropout_mask(Flux.rng_from_array(x), x, vd.p)\r\n```', 'comment_created': datetime.datetime(2022, 9, 7, 13, 50, 46, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 964873031, 'comment_body': 'Bumping this comment', 'comment_created': datetime.datetime(2022, 9, 7, 13, 51, 7, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}]","[{'commit_sha': '8194f3f900902e58a4d76a0ab80bf04e64c9884f', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76622307e9b8282c0f926329ad599ca7dfefe646', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1418e5084f52fd9a5785d262c6789297ca488ad2', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b682105535a1be631fa66640efdec0577400c425', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1064bc1ea2fb1f67b729eaddd9df1c6db7fa138', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '345ced1150b3eb5463ecd1160c3e24c329d7a288', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46b6826766be4e81be8fb05a78aa70e66bfd59a2', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '388e8acee6d51bcc5c822b2020aa3092053d645a', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8bfe705beb1d7accf579a63f246ca5edc389a687', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2482aaa8ec78b6b460d176f018a9f56df995ca41', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8bc930db4f8eb89ed8ba108d7f76597920fee36d', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3882b1d26f6d6d45a7fd26f1fc24f0bf27d4a652', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '30579894262a0feed30d0cb4dbba64e726398ba6', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '307fde18247e6c5f8e7af7e5554e90e6386c0e9a', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '075a21e99bccf4981d97a162e939c97ac3c21ab6', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f16ec2c5f88d1f7b426cbf4f32db5a9cfa685717', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '346963045d0884fe33902f322cfc7080aa0efe12', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '974a6224e44851879b4325ff0197f5599dd4a5e8', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d44bbd63a990ea585ceb44108ba99177db451d1', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ad9a12a41e87fddbf23fa91d5281af6b5fdd669', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '080a0180b71471c9be97c3a84a81de135326f45f', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '922334d27b0bb533990820412ef5efb9f8311265', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce34be1713491f772392758f1afa008db2051ae0', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6cea9027036e5b053b744202f5e74930abc2a33a', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5159fb80b76686a5273a273ab5d994c9bef47c63', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c6b69f7e8c51d451827361429945326f89fa9d07', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '164fe21c4e178d8d03beef67229d7bb1330821b8', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ce6df2049b72af7675dcb968a7b35a9cf2223cf', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '712d9c8c9215bc766cd00d89228f073bce22619e', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d6504b113e3465bab5d1957aa357a1b60c42c58', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5af6edb79fed7c4df7d3d6a390776401d683c1c4', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '659e6d1762875df68d6304638fdc2228c05f378f', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a151b20d696d4c916ba3873a751ca0b7eae3e41', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12bc9abd478ae6782354231abe039198ad55da88', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '35c345f906d6aefdf375565404ceef389075f29c', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cceee4612139b5f4285d1970cc8071ed232b6b0e', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f7d51f6e00e2d2103b586e6f21e8a71fc8f31a28', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90c9a79da0eda2915ba2b9ad16dfe4acd495be3a', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e7de6d798fd5eae9e9b426edd094be5c3e570d6', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1418b32472a2f5483d491543d45f4ee9397e7c0', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c04d1990a834da2faf2f22fa7d99ffb015cc0fa', 'committer_username': 'Chandu-4444', 'committer_name': 'Chandra Kiran G', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 26, 10, 26, 50, tzinfo=datetime.timezone.utc)}]",Chandra Kiran G,52241074,,User,,29,,27,28

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
265704822,FastAI.jl,FluxML/FastAI.jl,Julia,52,585,25,24,341,27,22,8,"[{'id': 1034216969, 'number': 258, 'closed': None, 'created': datetime.datetime(2022, 8, 23, 13, 44, 13, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 305789, 'deletions': 50, 'state': 'open'}, {'id': 1004064922, 'number': 250, 'closed': None, 'created': datetime.datetime(2022, 7, 21, 11, 30, 17, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 305651, 'deletions': 23, 'state': 'open'}, {'id': 995801013, 'number': 248, 'closed': datetime.datetime(2022, 7, 18, 15, 10, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 13, 18, 12, 13, tzinfo=datetime.timezone.utc), 'time_taken': 421088.0, 'time_delta': '4 days, 20:58:08', 'additions': 1007, 'deletions': 7, 'state': 'closed'}, {'id': 979091326, 'number': 245, 'closed': datetime.datetime(2022, 7, 18, 13, 37, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 25, 16, 43, 43, tzinfo=datetime.timezone.utc), 'time_taken': 1976003.0, 'time_delta': '22 days, 20:53:23', 'additions': 604, 'deletions': 26, 'state': 'closed'}, {'id': 973854669, 'number': 242, 'closed': datetime.datetime(2022, 6, 29, 5, 11, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 21, 17, 28, 32, tzinfo=datetime.timezone.utc), 'time_taken': 647005.0, 'time_delta': '7 days, 11:43:25', 'additions': 55, 'deletions': 2, 'state': 'closed'}, {'id': 890153877, 'number': 207, 'closed': datetime.datetime(2022, 5, 12, 10, 38, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 26, 6, 30, 11, tzinfo=datetime.timezone.utc), 'time_taken': 4075720.0, 'time_delta': '47 days, 4:08:40', 'additions': 160, 'deletions': 9, 'state': 'closed'}, {'id': 831759271, 'number': 194, 'closed': datetime.datetime(2022, 1, 27, 8, 3, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 1, 25, 18, 38, 59, tzinfo=datetime.timezone.utc), 'time_taken': 134699.0, 'time_delta': '1 day, 13:24:59', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 830117293, 'number': 193, 'closed': datetime.datetime(2022, 1, 24, 12, 48, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 1, 24, 8, 26, 32, tzinfo=datetime.timezone.utc), 'time_taken': 15691.0, 'time_delta': '4:21:31', 'additions': 5, 'deletions': 1, 'state': 'closed'}]"
