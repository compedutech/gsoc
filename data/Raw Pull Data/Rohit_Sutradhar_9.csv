pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
683825435,Tutorial for parallel_for_ and Universal Intrinsic (GSoC '21),"This pull request is a part of the Google Summer of Code 2021 project. Here is an overview of the project:
- Tutorial for parallel_for_:
  - Updated the parallel_for_ tutorial. The tutorial includes a simple function and benchmarks it's performance after using parallel_for_
  - Files Updated:
    - Added: [how_to_use_OpenCV_parallel_for_new.markdown](https://github.com/r0hit2005/opencv/tree/master/doc/tutorials/core/how_to_use_OpenCV_parallel_for_new)
    - Added: [how_to_use_OpenCV_parallel_for_new.cpp](https://github.com/r0hit2005/opencv/tree/master/samples/cpp/tutorial_code/core/how_to_use_OpenCV_parallel_for_)
 - Tutorial for Universal Intrinsic:
   - Added a new tutorial for Universal Intrinsic. The tutorial consists of two parts:
     - Basics of how to use universal intrinsic
     - Demonstration on how to vectorize convolution
   - Files Updated:
     - Added: [univ_intrin.markdown](https://github.com/r0hit2005/opencv/tree/master/doc/tutorials/core/univ_intrin)
     - Added: [univ_intrin.cpp](https://github.com/r0hit2005/opencv/tree/master/samples/cpp/tutorial_code/core/univ_intrin)


### Pull Request Readiness Checklist

See details at https://github.com/opencv/opencv/wiki/How_to_contribute#making-a-good-pull-request

- [ ] I agree to contribute to the project under Apache 2 License.
- [ ] To the best of my knowledge, the proposed patch is not based on a code under GPL or other license that is incompatible with OpenCV
- [ ] The PR is proposed to proper branch
- [ ] There is reference to original bug report and related work
- [ ] There is accuracy test, performance test and test data in opencv_extra repository, if applicable
      Patch to opencv_extra has the same branch name.
- [ ] The feature is well documented and sample code can be built with the project CMake

```
force_builders=linux,docs
```",True,20361,https://api.github.com/repos/opencv/opencv/pulls/20361,https://github.com/opencv/opencv/pull/20361,closed,1065,2,8,12,9,29,2,1,"[{'name': 'category: documentation'}, {'name': 'GSoC'}]",2021-07-05 16:28:45+00:00,2021-09-15 16:50:50+00:00,6222125.0,"72 days, 0:22:05","[{'comment_id': 675406394, 'comment_body': 'It would be better to use something like ""functionality"" or ""feature"" etc instead of ""module"" because UI is a part of OpenCV core module. So using UI doesn\'t add additional module dependencies to the code', 'comment_created': datetime.datetime(2021, 7, 23, 8, 53, 41, tzinfo=datetime.timezone.utc), 'commenter': 'terfendail', 'type': 'User'}, {'comment_id': 675421713, 'comment_body': 'replace ""architecture"" with ""instruction set""(or subset) ', 'comment_created': datetime.datetime(2021, 7, 23, 9, 18, 51, tzinfo=datetime.timezone.utc), 'commenter': 'terfendail', 'type': 'User'}, {'comment_id': 675423526, 'comment_body': 'Maybe portable instead of universal?', 'comment_created': datetime.datetime(2021, 7, 23, 9, 22, 8, tzinfo=datetime.timezone.utc), 'commenter': 'terfendail', 'type': 'User'}, {'comment_id': 675425581, 'comment_body': 'This section should be either combined with above one or named in some other way. Also please remove SIMD explanation if the section be retained separate.', 'comment_created': datetime.datetime(2021, 7, 23, 9, 25, 37, tzinfo=datetime.timezone.utc), 'commenter': 'terfendail', 'type': 'User'}, {'comment_id': 675431846, 'comment_body': ""Actually structures representing registers aren't based on v_reg for real architecture dependent implementations. v_reg is used to emulate hardware registers in scalar-based software implementation of intrinsics(which could be used if no hardware SIMD is available at all or for specific debugging cases)"", 'comment_created': datetime.datetime(2021, 7, 23, 9, 36, 28, tzinfo=datetime.timezone.utc), 'commenter': 'terfendail', 'type': 'User'}, {'comment_id': 675481985, 'comment_body': ""'ksize' is never used"", 'comment_created': datetime.datetime(2021, 7, 23, 10, 58, 43, tzinfo=datetime.timezone.utc), 'commenter': 'terfendail', 'type': 'User'}, {'comment_id': 686659370, 'comment_body': 'Could you please use Wide Universal Intrinsics approach for all operations except loading. WUI approach make the code suitable for any platform regardless of the exact register size and so is the preferred way to use universal intrinsics. Fixed register width approach should be used for really specific cases(which are definitely outside of the basic tutorial scope) and usually such implementations in the library code are a legacy.', 'comment_created': datetime.datetime(2021, 8, 11, 9, 27, 17, tzinfo=datetime.timezone.utc), 'commenter': 'terfendail', 'type': 'User'}, {'comment_id': 686713568, 'comment_body': 'Could you elaborate on what this means? v_reg structures may represent both wide registers, if supported, and primitive registers in case of scaler implementations, right?', 'comment_created': datetime.datetime(2021, 8, 11, 10, 45, 2, tzinfo=datetime.timezone.utc), 'commenter': 'r0hit05', 'type': 'User'}, {'comment_id': 693339479, 'comment_body': ""`by vectorization` -> `by manual vectorization`\r\n'make improvements to` -> `autovectorize`\r\nto make cleaner the reason why vectorization could yield no benefit"", 'comment_created': datetime.datetime(2021, 8, 21, 10, 52, 53, tzinfo=datetime.timezone.utc), 'commenter': 'terfendail', 'type': 'User'}, {'comment_id': 693339587, 'comment_body': 'Do you mean `column and row`?', 'comment_created': datetime.datetime(2021, 8, 21, 10, 53, 55, tzinfo=datetime.timezone.utc), 'commenter': 'terfendail', 'type': 'User'}, {'comment_id': 693339750, 'comment_body': 'Looks like `declare a` is a typo', 'comment_created': datetime.datetime(2021, 8, 21, 10, 55, 22, tzinfo=datetime.timezone.utc), 'commenter': 'terfendail', 'type': 'User'}, {'comment_id': 693340778, 'comment_body': ""'v_reg' structures used only for software implementation of Universal Intrinsics(or Wide Universal Intrinsics depending on configuration) that compute result using scalar code instead of actual SIMD CPU operations. This implementation could be used as a reference or for various specific configurations with special requirements. However all existing implementations for particular hardware map structures to physical registers in accordance with architecture/compiler guidance."", 'comment_created': datetime.datetime(2021, 8, 21, 11, 6, 26, tzinfo=datetime.timezone.utc), 'commenter': 'terfendail', 'type': 'User'}, {'comment_id': 693362191, 'comment_body': ""I actually meant each column. I'll make the change\r\n"", 'comment_created': datetime.datetime(2021, 8, 21, 14, 39, 8, tzinfo=datetime.timezone.utc), 'commenter': 'r0hit05', 'type': 'User'}, {'comment_id': 693698805, 'comment_body': 'ParallelMandelbrot is a typo', 'comment_created': datetime.datetime(2021, 8, 23, 6, 39, tzinfo=datetime.timezone.utc), 'commenter': 'terfendail', 'type': 'User'}, {'comment_id': 693700116, 'comment_body': 'Here should be just `rows`', 'comment_created': datetime.datetime(2021, 8, 23, 6, 41, 25, tzinfo=datetime.timezone.utc), 'commenter': 'terfendail', 'type': 'User'}, {'comment_id': 693734234, 'comment_body': ""typo: 'depends ON the'"", 'comment_created': datetime.datetime(2021, 8, 23, 7, 40, 54, tzinfo=datetime.timezone.utc), 'commenter': 'terfendail', 'type': 'User'}, {'comment_id': 693751732, 'comment_body': ""`v_store` defined so the type compatibility check will be performed. Actually it's impossible to store integer values to float pointer without additional treatment. One would have to either v_reinterpret register values or type cast the pointer"", 'comment_created': datetime.datetime(2021, 8, 23, 8, 6, 59, tzinfo=datetime.timezone.utc), 'commenter': 'terfendail', 'type': 'User'}, {'comment_id': 693802920, 'comment_body': '@note If the pointer and the register have different datatype, you can typecast the pointer before calling `v_store`, or store the values in the in a different data-type and then use the `v_reinterpret_` functions to convert the registers into proper type.\r\n\r\nIs this fine?', 'comment_created': datetime.datetime(2021, 8, 23, 9, 17, 45, tzinfo=datetime.timezone.utc), 'commenter': 'r0hit05', 'type': 'User'}, {'comment_id': 693990139, 'comment_body': ""Reinterpret and pointer casting could lead to wrong interpretation(if this reinterpretation isn't intended). I mean type correctness is checked here. So one have to either use proper types or do special treatment to mark casting intended.\r\n Maybe reduce notice to `Ensure **ptr** has the same type as register or cast  the register into the proper type before carrying out operations.`?"", 'comment_created': datetime.datetime(2021, 8, 23, 13, 50, 12, tzinfo=datetime.timezone.utc), 'commenter': 'terfendail', 'type': 'User'}, {'comment_id': 694019458, 'comment_body': ""What I actually wanted to convey was that it's not feasible to simply typecast a pointer to another type as this does not change the way the data is stored and thus leads to incorrect interpretation.\r\n\r\n"", 'comment_created': datetime.datetime(2021, 8, 23, 14, 23, 28, tzinfo=datetime.timezone.utc), 'commenter': 'r0hit05', 'type': 'User'}, {'comment_id': 702314278, 'comment_body': '> C= Parallel C/C++ Programming Language Extension (3rdparty library, should be explicitly enabled)\r\n\r\nIt is deprecated and dropped.', 'comment_created': datetime.datetime(2021, 9, 4, 18, 27, 39, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 702314396, 'comment_body': ""> https://docs.opencv.org/...\r\n\r\nDon't put direct links on docs site.\r\nUse Doxygen references instead."", 'comment_created': datetime.datetime(2021, 9, 4, 18, 28, 52, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 702314598, 'comment_body': '> `<!-- <br> -->`\r\n\r\nneeded?', 'comment_created': datetime.datetime(2021, 9, 4, 18, 30, 43, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 702314692, 'comment_body': ""> resimg.png\r\n\r\nWe don't need lossless format for documentation. Please use .jpg instead."", 'comment_created': datetime.datetime(2021, 9, 4, 18, 32, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 702314803, 'comment_body': '> Implentatation\r\n\r\ntypo', 'comment_created': datetime.datetime(2021, 9, 4, 18, 32, 46, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 702314883, 'comment_body': '> https://docs.opencv.org/...\r\n\r\nditto', 'comment_created': datetime.datetime(2021, 9, 4, 18, 33, 29, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 702314962, 'comment_body': 'Please avoid indentation in namespaces', 'comment_created': datetime.datetime(2021, 9, 4, 18, 34, 44, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 702700915, 'comment_body': 'How do I refer to the documentation?', 'comment_created': datetime.datetime(2021, 9, 6, 8, 20, 9, tzinfo=datetime.timezone.utc), 'commenter': 'r0hit05', 'type': 'User'}, {'comment_id': 702811839, 'comment_body': 'Use `@ref <id>`, where `<id>`:\r\n\r\n- is a tutorial identifier (see the first line of tutorial page)\r\n- or identifier of code group, for this case it is [here](https://github.com/opencv/opencv/blob/4.5.3/modules/core/include/opencv2/core.hpp#L93)', 'comment_created': datetime.datetime(2021, 9, 6, 11, 0, 33, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}]","[{'commit_sha': '6d989c91e0f49f8541ea2242a097b0a847b95176', 'committer_username': 'r0hit05', 'committer_name': 'Rohit Sutradhar', 'committer_email': 'rohitsutradhar311@gmail.com', 'commit_date': datetime.datetime(2018, 6, 7, 16, 2, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f64ba2c6287f36226a07ec4562143ef5afb6f22c', 'committer_username': 'r0hit05', 'committer_name': 'Rohit Sutradhar', 'committer_email': 'rohitsutradhar311@gmail.com', 'commit_date': datetime.datetime(2018, 6, 7, 16, 2, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac27752144e43c4b65e57c0c299c5e163a40d248', 'committer_username': 'r0hit05', 'committer_name': 'Rohit Sutradhar', 'committer_email': 'rohitsutradhar311@gmail.com', 'commit_date': datetime.datetime(2018, 6, 7, 16, 2, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2e98a7cd25e61590dcc269a33b0094151dbf2c8d', 'committer_username': 'r0hit05', 'committer_name': 'Rohit Sutradhar', 'committer_email': 'rohitsutradhar311@gmail.com', 'commit_date': datetime.datetime(2018, 6, 7, 16, 2, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e906078acff0042178eae59105ebe122ebb34f55', 'committer_username': 'r0hit05', 'committer_name': 'Rohit Sutradhar', 'committer_email': 'rohitsutradhar311@gmail.com', 'commit_date': datetime.datetime(2018, 6, 7, 16, 2, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '104558e17e890f5b0312b0644bd446c871276cac', 'committer_username': 'r0hit05', 'committer_name': 'Rohit Sutradhar', 'committer_email': 'rohitsutradhar311@gmail.com', 'commit_date': datetime.datetime(2018, 6, 7, 16, 2, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87b287f7cd42e9bfb452729d0f797e2b50be7c2d', 'committer_username': 'r0hit05', 'committer_name': 'Rohit Sutradhar', 'committer_email': 'rohitsutradhar311@gmail.com', 'commit_date': datetime.datetime(2018, 6, 7, 16, 2, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73e23ce83326ec761140981e9405e4a2d91ce5cc', 'committer_username': 'r0hit05', 'committer_name': 'Rohit Sutradhar', 'committer_email': 'rohitsutradhar311@gmail.com', 'commit_date': datetime.datetime(2018, 6, 7, 16, 2, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce89a621c6f7ef67c6784db8a284f2c22ad4e4e4', 'committer_username': 'r0hit05', 'committer_name': 'Rohit Sutradhar', 'committer_email': 'rohitsutradhar311@gmail.com', 'commit_date': datetime.datetime(2018, 6, 7, 16, 2, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '297fbf54c92465886342cd04205a2350b687c66a', 'committer_username': 'r0hit05', 'committer_name': 'Rohit Sutradhar', 'committer_email': 'rohitsutradhar311@gmail.com', 'commit_date': datetime.datetime(2018, 6, 7, 16, 2, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '607b48477f93246a9ccfd05dd96f7a5726212b64', 'committer_username': 'r0hit05', 'committer_name': 'Rohit Sutradhar', 'committer_email': 'rohitsutradhar311@gmail.com', 'commit_date': datetime.datetime(2018, 6, 7, 16, 2, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e8e0c3faba35db71f0eeb98801085ddfa001db1f', 'committer_username': 'r0hit05', 'committer_name': 'Rohit Sutradhar', 'committer_email': 'rohitsutradhar311@gmail.com', 'commit_date': datetime.datetime(2018, 6, 7, 16, 2, 12, tzinfo=datetime.timezone.utc)}]",Rohit Sutradhar,40035473,rohitsutradhar311@gmail.com,User,,18,,8,10

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
5108051,opencv,opencv/opencv,C++,55708,77594,2655,2195,34493,2598,6,132,"[{'id': 683825435, 'number': 20361, 'closed': datetime.datetime(2021, 9, 15, 16, 50, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 5, 16, 28, 45, tzinfo=datetime.timezone.utc), 'time_taken': 6222125.0, 'time_delta': '72 days, 0:22:05', 'additions': 1065, 'deletions': 2, 'state': 'closed'}, {'id': 640785593, 'number': 20066, 'closed': datetime.datetime(2021, 5, 11, 16, 12, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 11, 15, 3, 17, tzinfo=datetime.timezone.utc), 'time_taken': 4137.0, 'time_delta': '1:08:57', 'additions': 27, 'deletions': 0, 'state': 'closed'}]"
