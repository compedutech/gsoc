pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
415572147,reduced time for goes_suvi fetch test,"<!--
We know that working on sunpy and submitting pull requests takes effort, and we appreciate your time.
Thank you.

Please be aware that everyone has to follow our code of conduct:
https://github.com/sunpy/sunpy/blob/master/CODE_OF_CONDUCT.rst

Also these comments are hidden when you submit this github pull request.

We have several automatic features that run when a pull request is open.
They can appear daunting but do not worry about them!
Here is a brief explanation of them: https://docs.sunpy.org/en/latest/dev_guide/pr_review_procedure.html#continuous-integration.
-->

### Description
<!--
Provide a general description of what your pull request does.

If the pull request closes any open issues you can add this.
If you replace <Issue Number> with a number GitHub will automatically link it.
If it doesn't, please remove the following line.
-->

Fixes #4099 .
It reduces test time for `test_fetch_working` from 9 seconds to 2 seconds on my system.
Specified a wavelength so that scraper opens just one directry instead of 6.
More information here: https://github.com/sunpy/sunpy/issues/4099#issuecomment-626128885 .
",True,4131,https://api.github.com/repos/sunpy/sunpy/pulls/4131,https://github.com/sunpy/sunpy/pull/4131,closed,6,4,1,1,6,0,1,0,[{'name': 'No Changelog Entry Needed'}],2020-05-09 12:57:29+00:00,2020-05-10 17:25:23+00:00,102474.0,"1 day, 4:27:54",[],"[{'commit_sha': '778f24973ba304afd55e21a712f060a5f679e275', 'committer_username': 'abhijeetmanhas', 'committer_name': 'Abhijeet Manhas', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 13, 15, 21, tzinfo=datetime.timezone.utc)}]",Abhijeet Manhas,43112347,,User,,51,,254,156
415681161,href fix in scraper,"<!--
We know that working on sunpy and submitting pull requests takes effort, and we appreciate your time.
Thank you.

Please be aware that everyone has to follow our code of conduct:
https://github.com/sunpy/sunpy/blob/master/CODE_OF_CONDUCT.rst

Also these comments are hidden when you submit this github pull request.

We have several automatic features that run when a pull request is open.
They can appear daunting but do not worry about them!
Here is a brief explanation of them: https://docs.sunpy.org/en/latest/dev_guide/pr_review_procedure.html#continuous-integration.
-->

### Description
<!--
Provide a general description of what your pull request does.

If the pull request closes any open issues you can add this.
If you replace <Issue Number> with a number GitHub will automatically link it.
If it doesn't, please remove the following line.
-->

More info here https://github.com/sunpy/sunpy/pull/3812#discussion_r422460309
In short, we didn't checked href can be None and may give error here https://github.com/sunpy/sunpy/blob/553d60538ecb6fb955fc28d428372c17f0501557/sunpy/util/scraper.py#L234 
By working on #3812 , I found the source website do have some href which are **None**.
Also, sometimes path to files maybe relative to just domain, not always to directory they are in, so checking that by verifying if href for files begin with `\` .


",True,4132,https://api.github.com/repos/sunpy/sunpy/pulls/4132,https://github.com/sunpy/sunpy/pull/4132,closed,22,2,3,3,4,0,2,0,"[{'name': 'net'}, {'name': 'Merge When CI Passes'}]",2020-05-10 07:24:37+00:00,2020-05-10 18:43:45+00:00,40748.0,11:19:08,[],"[{'commit_sha': '310b59a86742ae365b292a3bac8fe3beb52be666', 'committer_username': 'abhijeetmanhas', 'committer_name': 'Abhijeet Manhas', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 13, 15, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3223831adbf7d7d18706a7c6fafeded27a94fe9e', 'committer_username': 'abhijeetmanhas', 'committer_name': 'Abhijeet Manhas', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 13, 15, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9bac651439cae0f91a3ef1fc4b4f410e8fb5271a', 'committer_username': 'abhijeetmanhas', 'committer_name': 'Abhijeet Manhas', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 13, 15, 21, tzinfo=datetime.timezone.utc)}]",Abhijeet Manhas,43112347,,User,,51,,254,156
434115299,Fixed wrong satno. in XRS overlap URLs,"<!--
We know that working on sunpy and submitting pull requests takes effort, and we appreciate your time.
Thank you.

Please be aware that everyone has to follow our code of conduct:
https://github.com/sunpy/sunpy/blob/master/CODE_OF_CONDUCT.rst

Also these comments are hidden when you submit this github pull request.

We have several automatic features that run when a pull request is open.
They can appear daunting but do not worry about them!
Here is a brief explanation of them: https://docs.sunpy.org/en/latest/dev_guide/pr_review_procedure.html#continuous-integration.
-->

### Description
<!--
Provide a general description of what your pull request does.

If the pull request closes any open issues you can add this.
If you replace <Issue Number> with a number GitHub will automatically link it.
If it doesn't, please remove the following line.
-->

Fixes #4207.
I have added a test which won't pass on upstream.
",True,4288,https://api.github.com/repos/sunpy/sunpy/pulls/4288,https://github.com/sunpy/sunpy/pull/4288,closed,13,4,3,2,3,3,0,0,[],2020-06-14 08:56:18+00:00,2020-06-16 09:12:06+00:00,173748.0,"2 days, 0:15:48","[{'comment_id': 439816465, 'comment_body': 'What are the kwargs for?', 'comment_created': datetime.datetime(2020, 6, 14, 10, 49, 1, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 439819401, 'comment_body': 'Kwargs had satellite number as argument. So as overlap URL method will call `get_url_for_timerange` two times, (when timerange overlaps a certain date) , the information about which satellite number it have to search for is not lost.', 'comment_created': datetime.datetime(2020, 6, 14, 11, 25, 22, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 440031340, 'comment_body': ""```suggestion\r\nFixed a bug in `~sunpy.net.dataretriever.sources.goes.XRSClient._get_url_for_timerange` which returned incorrect URLs\r\nbecause of not using ``**kwargs`` in the client's ``_get_overlap_urls()`` method.\r\n```"", 'comment_created': datetime.datetime(2020, 6, 15, 9, 2, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}]","[{'commit_sha': '0f39d5862a6089d5776def2b2b3cd38e3d8efbee', 'committer_username': 'abhijeetmanhas', 'committer_name': 'Abhijeet Manhas', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 13, 15, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8e213c24ff775b1ab18879c57fb884190180896', 'committer_username': 'abhijeetmanhas', 'committer_name': 'Abhijeet Manhas', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 13, 15, 21, tzinfo=datetime.timezone.utc)}]",Abhijeet Manhas,43112347,,User,,51,,254,156
437587486,Added a show method for base_Client,"<!--
We know that working on sunpy and submitting pull requests takes effort, and we appreciate your time.
Thank you.

Please be aware that everyone has to follow our code of conduct:
https://github.com/sunpy/sunpy/blob/master/CODE_OF_CONDUCT.rst

Also these comments are hidden when you submit this github pull request.

We have several automatic features that run when a pull request is open.
They can appear daunting but do not worry about them!
Here is a brief explanation of them: https://docs.sunpy.org/en/latest/dev_guide/pr_review_procedure.html#continuous-integration.
-->

### Description
<!--
Provide a general description of what your pull request does.

If the pull request closes any open issues you can add this.
If you replace <Issue Number> with a number GitHub will automatically link it.
If it doesn't, please remove the following line.
-->

Fixes #556 
This would enable users to specify the columns they want to see in the Query results for vso, jsoc and DR clients.
",True,4309,https://api.github.com/repos/sunpy/sunpy/pulls/4309,https://github.com/sunpy/sunpy/pull/4309,closed,272,6,12,2,4,13,1,0,[{'name': 'net'}],2020-06-21 19:09:02+00:00,2020-06-26 13:15:01+00:00,410759.0,"4 days, 18:05:59","[{'comment_id': 443248244, 'comment_body': 'Does this mean I can not do `.show()`', 'comment_created': datetime.datetime(2020, 6, 21, 19, 12, 30, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 443248265, 'comment_body': '```suggestion\r\n            Any extra keywords to refine the search. Generated from the\r\n```', 'comment_created': datetime.datetime(2020, 6, 21, 19, 12, 41, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 443252171, 'comment_body': 'yes, now its possible.', 'comment_created': datetime.datetime(2020, 6, 21, 20, 2, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 443253194, 'comment_body': 'Is this not a list?', 'comment_created': datetime.datetime(2020, 6, 21, 20, 16, 30, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 443254207, 'comment_body': ""Method is expected to be used as\r\n`q.show('Start Time', 'Instrument', 'Source')`\r\nnot as \r\n`q.show(['Start Time', 'Instrument', 'Source'])`\r\nso it is a tuple since *args passed to python method are always tuple.\r\n"", 'comment_created': datetime.datetime(2020, 6, 21, 20, 30, 25, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 443256671, 'comment_body': ""But a user doesn't input a tuple tho?"", 'comment_created': datetime.datetime(2020, 6, 21, 21, 3, 49, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 443258129, 'comment_body': 'Hmm, user specify column names as args to the method.\r\nHowever `type(cols)` do give a tuple.', 'comment_created': datetime.datetime(2020, 6, 21, 21, 23, 14, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 443828690, 'comment_body': 'Is this a mistake?', 'comment_created': datetime.datetime(2020, 6, 22, 21, 11, 22, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 443832080, 'comment_body': ""I'm sorry. I'll ensure this won't happen in future."", 'comment_created': datetime.datetime(2020, 6, 22, 21, 18, 19, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 443835165, 'comment_body': ""It's fine."", 'comment_created': datetime.datetime(2020, 6, 22, 21, 25, 7, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 445015138, 'comment_body': '```suggestion\r\ndef mock_query_object(LCClient):\r\n```\r\nand everywhere else.', 'comment_created': datetime.datetime(2020, 6, 24, 16, 19, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 445019647, 'comment_body': 'I did not notice. ', 'comment_created': datetime.datetime(2020, 6, 24, 16, 26, 43, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 445044044, 'comment_body': 'Oh, resolved it in all files.\r\nI blindly copied spellings from already existing function here.\r\n\r\nhttps://github.com/sunpy/sunpy/blob/db314114f0148d16610dda10f18ea0876942cd61/sunpy/net/dataretriever/sources/tests/test_goes_suvi.py#L65', 'comment_created': datetime.datetime(2020, 6, 24, 17, 7, 6, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}]","[{'commit_sha': 'e0cfffa29df2db59406bf509eb43bd3a95e19bc8', 'committer_username': 'abhijeetmanhas', 'committer_name': 'Abhijeet Manhas', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 13, 15, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd1b5075f97c54252527f4bf7761d5c11b1fd0d4f', 'committer_username': 'abhijeetmanhas', 'committer_name': 'Abhijeet Manhas', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 13, 15, 21, tzinfo=datetime.timezone.utc)}]",Abhijeet Manhas,43112347,,User,,51,,254,156
438771568,Added method to extract metadata from url using parse,"<!--
We know that working on sunpy and submitting pull requests takes effort, and we appreciate your time.
Thank you.

Please be aware that everyone has to follow our code of conduct:
https://github.com/sunpy/sunpy/blob/master/CODE_OF_CONDUCT.rst

Also these comments are hidden when you submit this github pull request.

We have several automatic features that run when a pull request is open.
They can appear daunting but do not worry about them!
Here is a brief explanation of them: https://docs.sunpy.org/en/latest/dev_guide/pr_review_procedure.html#continuous-integration.
-->

### Description
<!--
Provide a general description of what your pull request does.

If the pull request closes any open issues you can add this.
If you replace <Issue Number> with a number GitHub will automatically link it.
If it doesn't, please remove the following line.
-->

It is a split of #4213 in which a new method is added for scraper changes which would possibly be backward compatible.
",True,4313,https://api.github.com/repos/sunpy/sunpy/pulls/4313,https://github.com/sunpy/sunpy/pull/4313,closed,1462,1,6,4,7,6,2,0,"[{'name': 'net'}, {'name': 'util'}]",2020-06-23 19:23:08+00:00,2020-06-26 13:34:52+00:00,238304.0,"2 days, 18:11:44","[{'comment_id': 444757858, 'comment_body': ""This function name isn't great, python method names are supposed to use snake_case.\r\n\r\nI am not sure what a good name for this function is, it's doing a few things (calling filelist as well as running things through parse). Do we want to see this become the main entry point for scraper in a land where you use parse for everything?"", 'comment_created': datetime.datetime(2020, 6, 24, 9, 15, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 444775080, 'comment_body': 'What are you using the translator for out of interest?', 'comment_created': datetime.datetime(2020, 6, 24, 9, 45, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 444840705, 'comment_body': 'Yes, `filelist` will become internal function for scraper and the client would only be using the `extractMetaURLs` method.', 'comment_created': datetime.datetime(2020, 6, 24, 11, 56, 10, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 444841202, 'comment_body': ""I'm using it for converting the things in url to what we want to show them in the table.\r\nAs for example.\r\nIn `NorHClient`, if url contains `tca` then it translates to `17*u.GHz` in the response table. It is optional param, not always required for most of the clients."", 'comment_created': datetime.datetime(2020, 6, 24, 11, 57, 10, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 444851475, 'comment_body': 'On one hand this feels like something which should be done after the call to this method and not as a part of it. What do you think, is this sufficiently useful to warrant it adding extra complexity here?', 'comment_created': datetime.datetime(2020, 6, 24, 12, 17, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 444903881, 'comment_body': 'Agreed. We it should be a `GenericClient` method, not a part of scraper method. Since as a function, it should only return the metadata from url string and nothing else. The final dict can be formed later by using this extracted info and other fixed client attr values.', 'comment_created': datetime.datetime(2020, 6, 24, 13, 44, 19, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}]","[{'commit_sha': 'e160d4b6972417792055e9bfe4e1d1b4731a0a97', 'committer_username': 'abhijeetmanhas', 'committer_name': 'Abhijeet Manhas', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 13, 15, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '810915d6109cb94f12f5dd1d4afc170848a4fa82', 'committer_username': 'abhijeetmanhas', 'committer_name': 'Abhijeet Manhas', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 13, 15, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9df6be4741c404fd336e6c9cef560c31d0ddce72', 'committer_username': 'abhijeetmanhas', 'committer_name': 'Abhijeet Manhas', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 13, 15, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e8f26e2bdb90c95a58e25950946334ef84d7c36', 'committer_username': 'abhijeetmanhas', 'committer_name': 'Abhijeet Manhas', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 13, 15, 21, tzinfo=datetime.timezone.utc)}]",Abhijeet Manhas,43112347,,User,,51,,254,156
402096495,Supporting Post search filtering again for VSO,"
Fixes #3833 
I converted all `zeep.objects.QueryResponseBlock` to a `hashedresponse` class which have `__hash__` function defined, so doesn't gives error while we make sets or compare them, used by `attrs` to filter out the required records.

Used codereference from this thread https://stackoverflow.com/questions/1305532/convert-nested-python-dict-to-object


",True,4011,https://api.github.com/repos/sunpy/sunpy/pulls/4011,https://github.com/sunpy/sunpy/pull/4011,closed,77,6,4,4,7,19,1,0,[{'name': 'net'}],2020-04-10 22:55:13+00:00,2020-08-10 12:15:20+00:00,10502407.0,"121 days, 13:20:07","[{'comment_id': 407185109, 'comment_body': 'Can we filter by other attrs other than time? ', 'comment_created': datetime.datetime(2020, 4, 12, 11, 32, 45, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 407185308, 'comment_body': '```suggestion\r\nclass HashableResponse:\r\n```', 'comment_created': datetime.datetime(2020, 4, 12, 11, 34, 24, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 407185342, 'comment_body': 'Each one of these needs a test. ', 'comment_created': datetime.datetime(2020, 4, 12, 11, 34, 46, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 407185425, 'comment_body': '```suggestion\r\n\r\n    References\r\n    ----------\r\n    * https://stackoverflow.com/a/1305682\r\n    """"""\r\n```', 'comment_created': datetime.datetime(2020, 4, 12, 11, 35, 33, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 407185532, 'comment_body': '```suggestion\r\n    Enables hashing of objects returned from `zeep.Client` using the ``fileid`` of a ""record item"".\r\n```', 'comment_created': datetime.datetime(2020, 4, 12, 11, 36, 39, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 407185551, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2020, 4, 12, 11, 36, 49, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 407185628, 'comment_body': '```suggestion\r\n        A ""QueryResponseBlock"" returned from the `sunpy.net.vso.VSOClient`.\r\n```', 'comment_created': datetime.datetime(2020, 4, 12, 11, 37, 30, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 407185699, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2020, 4, 12, 11, 38, 12, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 407185742, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2020, 4, 12, 11, 38, 31, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 407185976, 'comment_body': '```suggestion\r\nWhen sunpy moved to using Zeep for 1.0, we broke the ability to filter search results from the `sunpy.net.vso.VSOClient`.\r\nThis feature has been restored by enabling the hashing of the the results from the `sunpy.net.vso.VSOClient` using the ""fileid"".\r\n```', 'comment_created': datetime.datetime(2020, 4, 12, 11, 40, 31, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 407186118, 'comment_body': '```suggestion\r\n                setattr(self, a, [HashableResponse(x) if isinstance(x, dict) else x for x in b])\r\n```', 'comment_created': datetime.datetime(2020, 4, 12, 11, 41, 48, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 407186121, 'comment_body': '```suggestion\r\n                setattr(self, a, HashableResponse(b) if isinstance(b, dict) else b)\r\n```', 'comment_created': datetime.datetime(2020, 4, 12, 11, 41, 48, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 407205944, 'comment_body': 'Yes. With instruments , wavelengths too. Adding a test for them.', 'comment_created': datetime.datetime(2020, 4, 12, 14, 27, 53, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 407384291, 'comment_body': ""https://github.com/sunpy/sunpy/blob/master/sunpy/net/vso/attrs.py#L327 @nabobalis it will always fail for wavelengths since vso returns a string and not a astropy quantity so `.to(` will always fail. A lot of thing have to be changed about how we handle wavelength in attrs.\r\n\r\nThe wave attribute looks like this :\r\n\r\n```\r\n{\r\n    'wavemin': '6173',\r\n    'wavemax': '6174',\r\n    'waveunit': 'Angstrom',\r\n    'wavetype': 'NARROW'\r\n}\r\n```\r\nI confirmed from VSO api that units can be any of these:\r\n\r\n`Angstrom`, `GHz`, `keV`and so making required changes to `attrs.py`."", 'comment_created': datetime.datetime(2020, 4, 13, 8, 51, 23, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 407448163, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 4, 13, 12, 8, 12, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 464572683, 'comment_body': '```suggestion\r\nThe ability to to filter search results from the `~sunpy.net.vso.VSOClient` was broken.\r\nThis has now been restored.\r\n```', 'comment_created': datetime.datetime(2020, 8, 3, 17, 56, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 464615725, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 3, 19, 24, 39, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 464618581, 'comment_body': 'Not `__repr__`?', 'comment_created': datetime.datetime(2020, 8, 3, 19, 30, 53, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 464619522, 'comment_body': 'oh. Sorry. Updated now.', 'comment_created': datetime.datetime(2020, 8, 3, 19, 33, 4, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}]","[{'commit_sha': 'da61b2521401286fdeac57a7e2e2e6ad5945ab89', 'committer_username': 'abhijeetmanhas', 'committer_name': 'Abhijeet Manhas', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 13, 15, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4977b2c16924509167a6a3df1efe99bcaa35562f', 'committer_username': 'abhijeetmanhas', 'committer_name': 'Abhijeet Manhas', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 13, 15, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2554fbc8251eaa500d1b7000201da807caadbaf5', 'committer_username': 'abhijeetmanhas', 'committer_name': 'Abhijeet Manhas', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 13, 15, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d094e9d6c1c43148d34e6dd020e42b8213583e8', 'committer_username': 'abhijeetmanhas', 'committer_name': 'Abhijeet Manhas', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 13, 15, 21, tzinfo=datetime.timezone.utc)}]",Abhijeet Manhas,43112347,,User,,51,,254,156
407948644,Created Fido Client for Gong synoptic maps,"<!--
We know that working on sunpy and submitting pull requests takes effort, and we appreciate your time.
Thank you.

Please be aware that everyone has to follow our code of conduct:
https://github.com/sunpy/sunpy/blob/master/CODE_OF_CONDUCT.rst

Also these comments are hidden when you submit this github pull request.

We have several automatic features that run when a pull request is open.
They can appear daunting but do not worry about them!
Here is a brief explanation of them: https://docs.sunpy.org/en/latest/dev_guide/pr_review_procedure.html#continuous-integration.
-->

### Description
<!--
Provide a general description of what your pull request does.

If the pull request closes any open issues you can add this.
If you replace <Issue Number> with a number GitHub will automatically link it.
If it doesn't, please remove the following line.
-->

Fixes https://github.com/dstansby/pfsspy/issues/165

This will enable users to search and download the meged data product for GONG using Fido, giving the timerange. The url pattern is like this,

`https://gong2.nso.edu/oQR/zqs/%Y%m/mrzqs%y%m%d/mrzqs%y%m%dt%H%Mc\d4_\d3.fits.gz`
Here `\d4` and `\d3` are Carringtion rotation number and Initital carr-long for synoptic map respectively.

Used scraper partially, I can't write client only using scraper since it scraper needs everything to be defined in the pattern, which won't be the case for these two attributes. It doesn't supports custom regex.",True,4055,https://api.github.com/repos/sunpy/sunpy/pulls/4055,https://github.com/sunpy/sunpy/pull/4055,closed,145,5,7,9,14,41,1,0,[{'name': 'net'}],2020-04-23 14:09:17+00:00,2020-11-14 18:44:59+00:00,17728542.0,"205 days, 4:35:42","[{'comment_id': 414496406, 'comment_body': 'It is possible to download different types of data from GONG, so I think we need to put some more thought into making `_can_handle_query` more specific.\r\n\r\nWe need an attribute that specifies we are looking for a synoptic map (as opposed to full disk observation), and an attribute that specifies that we are looking for magnetic field (more specifically, radial magnetic field?) data. I will open this in a new issue, so people can see/comment on ideas for these attributes (and whether we need to make any new ones).', 'comment_created': datetime.datetime(2020, 4, 24, 11, 16, 51, tzinfo=datetime.timezone.utc), 'commenter': 'dstansby', 'type': 'User'}, {'comment_id': 414740101, 'comment_body': 'Thanks for the reivew, I have added physobs and extentType now.', 'comment_created': datetime.datetime(2020, 4, 24, 17, 24, 22, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 417566086, 'comment_body': '@dstansby this is green now, can be reviewed, I have done all suggested changes till now.', 'comment_created': datetime.datetime(2020, 4, 29, 19, 43, 1, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 420962775, 'comment_body': '```suggestion\r\n                            if timerange.start <= tstamp <= timerange.end:\r\n```', 'comment_created': datetime.datetime(2020, 5, 6, 17, 24, 41, tzinfo=datetime.timezone.utc), 'commenter': 'dpshelio', 'type': 'User'}, {'comment_id': 421031768, 'comment_body': 'Shouldn\'t all that be ""done"" by the scrapper? I believe you can put a wildcard if you don\'t know how it goes (like the last digits)... Ok, you can\'t! but with my new pr #4107', 'comment_created': datetime.datetime(2020, 5, 6, 19, 16, 29, tzinfo=datetime.timezone.utc), 'commenter': 'dpshelio', 'type': 'User'}, {'comment_id': 421032611, 'comment_body': 'Why is this needed?', 'comment_created': datetime.datetime(2020, 5, 6, 19, 18, tzinfo=datetime.timezone.utc), 'commenter': 'dpshelio', 'type': 'User'}, {'comment_id': 421034183, 'comment_body': ""Aren't you removing the `.gz` on line 112? why are you then zipping it back without the `gz` suffix?"", 'comment_created': datetime.datetime(2020, 5, 6, 19, 20, 47, tzinfo=datetime.timezone.utc), 'commenter': 'dpshelio', 'type': 'User'}, {'comment_id': 421352158, 'comment_body': ""Yes, I removed `.gz` in line 112 to just get what the filename of extracted file should be. I haven't done any extraction there.\r\n`local_fpath` contains path to future extracted file, which is currently empty when I opened it in write mode, and write `f` object to it, which contains the extracted file object in `fits`."", 'comment_created': datetime.datetime(2020, 5, 7, 9, 3, 59, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 421352915, 'comment_body': ""This PR will be very helpful. I'll change the code to depend on #4107 after it is merged."", 'comment_created': datetime.datetime(2020, 5, 7, 9, 5, 13, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 428183836, 'comment_body': ""sorry I've not commented earlier. I don't understand why you want to unzip the file. I believe fits, and map, reads zipped files fine. I'd prefer to keep the files zipped in my computer."", 'comment_created': datetime.datetime(2020, 5, 20, 17, 25, 52, tzinfo=datetime.timezone.utc), 'commenter': 'dpshelio', 'type': 'User'}, {'comment_id': 428469933, 'comment_body': 'Cool, keeping it zipped then. Thanks for the review!', 'comment_created': datetime.datetime(2020, 5, 21, 6, 29, 47, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 434013590, 'comment_body': 'What is a merged data product? ', 'comment_created': datetime.datetime(2020, 6, 2, 16, 30, 8, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 434056449, 'comment_body': 'Changed to \r\n```Created `~sunpy.net.dataretriever.sources.GongSynopticClient` for accessing Magnetogram Synoptic Map Archives of NSO-GONG.```.', 'comment_created': datetime.datetime(2020, 6, 2, 17, 40, 37, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 434717905, 'comment_body': ""This test is testing the same multiple times, I would parametrise it.\r\nThe input argument could be a tuple of query that contains `(time), (time, Instrument('gong')), ....` and that tied with a `True` or `False` value."", 'comment_created': datetime.datetime(2020, 6, 3, 16, 57, 33, tzinfo=datetime.timezone.utc), 'commenter': 'dpshelio', 'type': 'User'}, {'comment_id': 434794797, 'comment_body': 'I don\'t really like `assert` on loops, if one fails, you only get a ""report"" of that one, and not whether others did too.\r\n```suggestion\r\n    assert all(map(lambda x: x.endswith(\'.gz\'), response))\r\n```', 'comment_created': datetime.datetime(2020, 6, 3, 19, 13, 36, tzinfo=datetime.timezone.utc), 'commenter': 'dpshelio', 'type': 'User'}, {'comment_id': 434806871, 'comment_body': '```suggestion\r\n    Searches data hosted by the `National Solar Observatory. <gong2.nso.edu/oQR/zqs/>`__\r\n```', 'comment_created': datetime.datetime(2020, 6, 3, 19, 36, 41, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 434806916, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2020, 6, 3, 19, 36, 45, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 434807243, 'comment_body': '```suggestion\r\n            The time range required.\r\n```', 'comment_created': datetime.datetime(2020, 6, 3, 19, 37, 11, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 434807458, 'comment_body': '```suggestion\r\n        bool : \r\n```', 'comment_created': datetime.datetime(2020, 6, 3, 19, 37, 29, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 434808444, 'comment_body': '```suggestion\r\n            Answer as to whether client can service the query.\r\n```', 'comment_created': datetime.datetime(2020, 6, 3, 19, 38, 33, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 434808789, 'comment_body': 'Does this need to be in the function? ', 'comment_created': datetime.datetime(2020, 6, 3, 19, 38, 51, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 435025252, 'comment_body': 'I thought it prevents circular imports.', 'comment_created': datetime.datetime(2020, 6, 4, 6, 42, 41, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 435060175, 'comment_body': 'Can you check?', 'comment_created': datetime.datetime(2020, 6, 4, 7, 52, 7, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 436264234, 'comment_body': 'yes, it prevents. https://github.com/sunpy/sunpy/blob/master/sunpy/net/dataretriever/sources/goes.py#L380 similar to what we did for `goes` and `norh`.', 'comment_created': datetime.datetime(2020, 6, 6, 12, 16, 30, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 441427751, 'comment_body': 'Why do we have an attr for a thing we only support one type of?', 'comment_created': datetime.datetime(2020, 6, 17, 9, 56, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 441428998, 'comment_body': ""I was thinking that we could re-use the VSO `EXTENT_TYPE` keyword here, but it's currently broken: https://github.com/sunpy/sunpy/issues/4048"", 'comment_created': datetime.datetime(2020, 6, 17, 9, 58, 6, tzinfo=datetime.timezone.utc), 'commenter': 'dstansby', 'type': 'User'}, {'comment_id': 441462880, 'comment_body': ""If we don't have any use for this attr I suggest we don't implement it at this time. The extent type for this new client should be set in the `_map` metadata in the client class."", 'comment_created': datetime.datetime(2020, 6, 17, 11, 1, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 441473990, 'comment_body': 'I added extentType after this https://github.com/sunpy/sunpy/pull/4055#discussion_r414496406 . We can either remove it too.', 'comment_created': datetime.datetime(2020, 6, 17, 11, 25, 34, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 441482070, 'comment_body': ""Is gong data with different extent types available through the VSO? but we can't filter on it because of #4048 ?"", 'comment_created': datetime.datetime(2020, 6, 17, 11, 42, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 444256093, 'comment_body': ""No, I don't think GONG synoptic maps are on the VSO, but I think it would be good if we can re-purpose the EXTENT_TYPE attr in VSO for search (ie. move it from a vso specific attr to a general one like `Time` or `Instrument`) to avoid creating new attrs."", 'comment_created': datetime.datetime(2020, 6, 23, 14, 13, tzinfo=datetime.timezone.utc), 'commenter': 'dstansby', 'type': 'User'}, {'comment_id': 450886322, 'comment_body': ""Okay, I did some digging/research and the EXTENT_TYPE attr for VSO is properly broken, so I think including a new attr is fine here.\r\n\r\nIf it was working then these are the valid values: https://sdac.virtualsolar.org/cgi/show_details?keyword=EXTENT_TYPE - @Cadair do you think it's worth putting the new attr in `sunpy.net.attrs` instead of in `sunpy.net.gong_synoptic.attrs`?"", 'comment_created': datetime.datetime(2020, 7, 7, 13, 59, 49, tzinfo=datetime.timezone.utc), 'commenter': 'dstansby', 'type': 'User'}, {'comment_id': 464570975, 'comment_body': 'This result looks odd, do you know why this is picking up three files, but all with the same timestamp? It looks like the timestamp info is coming from the search instead of the files that have been found.', 'comment_created': datetime.datetime(2020, 8, 3, 17, 52, 37, tzinfo=datetime.timezone.utc), 'commenter': 'dstansby', 'type': 'User'}, {'comment_id': 464571448, 'comment_body': 'Going to resolve this conversation, and move discussion on where this new attr should go to an issue.', 'comment_created': datetime.datetime(2020, 8, 3, 17, 53, 35, tzinfo=datetime.timezone.utc), 'commenter': 'dstansby', 'type': 'User'}, {'comment_id': 486444687, 'comment_body': ""I don't have a better suggestion but `attrs.gong_synoptic.ExtentType` seems a bit long."", 'comment_created': datetime.datetime(2020, 9, 10, 15, 41, 46, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 486444883, 'comment_body': 'Fixed now.', 'comment_created': datetime.datetime(2020, 9, 10, 15, 42, 4, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 486446003, 'comment_body': 'Can we just remove it?\r\nIt will only happen that there won\'t be an extra column of name `extent type` in results whoes value is ""synoptic"". \r\nNothing else would change.', 'comment_created': datetime.datetime(2020, 9, 10, 15, 43, 35, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 489337684, 'comment_body': ""I think it would be reasonable to move `ExtentType` out of `attrs.gong_synoptic` and into `attrs` as a more generic attribute, don't know what others think about that?"", 'comment_created': datetime.datetime(2020, 9, 16, 10, 36, 50, tzinfo=datetime.timezone.utc), 'commenter': 'dstansby', 'type': 'User'}, {'comment_id': 489367347, 'comment_body': 'IF we need to use it for this client, I would be in favour of that instead of it being for this client only. ', 'comment_created': datetime.datetime(2020, 9, 16, 11, 35, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 489373677, 'comment_body': 'Given one can also get full disc magnetograms from GONG, I actually think we should rename the client from `gong_synoptic` > `gong`, and keep this keyword as a way to differentiate between a full disk map and a synoptic map. Then we avoid having separate `gong` and a `gong_synoptic` clients.', 'comment_created': datetime.datetime(2020, 9, 16, 11, 46, 29, tzinfo=datetime.timezone.utc), 'commenter': 'dstansby', 'type': 'User'}, {'comment_id': 489582687, 'comment_body': 'Replaced gongsynoptic with gong and moved extentType to attrs.', 'comment_created': datetime.datetime(2020, 9, 16, 16, 51, 45, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 489586876, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2020, 9, 16, 16, 58, 54, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}]","[{'commit_sha': '5032d27e65a50d099918e373c20df8024327526d', 'committer_username': 'nabobalis', 'committer_name': 'Nabil Freij', 'committer_email': 'nabil.freij@gmail.com', 'commit_date': datetime.datetime(2012, 1, 30, 17, 52, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5fc7abec97a3a09d437ef1fc74a743dcce473c45', 'committer_username': 'nabobalis', 'committer_name': 'Nabil Freij', 'committer_email': 'nabil.freij@gmail.com', 'commit_date': datetime.datetime(2012, 1, 30, 17, 52, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '85f3ab11f8f357416d7546ec103441574a54de79', 'committer_username': 'nabobalis', 'committer_name': 'Nabil Freij', 'committer_email': 'nabil.freij@gmail.com', 'commit_date': datetime.datetime(2012, 1, 30, 17, 52, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '26aaf56ae6901a8478a06dd102a010554d1bad0c', 'committer_username': 'abhijeetmanhas', 'committer_name': 'Abhijeet Manhas', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 13, 15, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c48473d902ea0ce0d1bc96631a731be5bfcbfdb4', 'committer_username': 'abhijeetmanhas', 'committer_name': 'Abhijeet Manhas', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 13, 15, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e6d947aacfd80decd79ca63305b2b379023421fe', 'committer_username': 'abhijeetmanhas', 'committer_name': 'Abhijeet Manhas', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 13, 15, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5348c33f2dd628e93675b2820dd7f623296f82db', 'committer_username': 'abhijeetmanhas', 'committer_name': 'Abhijeet Manhas', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 13, 15, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b0348974314f9034c61f7facdb07d644a61a0566', 'committer_username': 'abhijeetmanhas', 'committer_name': 'Abhijeet Manhas', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 13, 15, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72697ba42df7746fc38949e86624986653ce2f36', 'committer_username': 'abhijeetmanhas', 'committer_name': 'Abhijeet Manhas', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 13, 15, 21, tzinfo=datetime.timezone.utc)}]",Abhijeet Manhas,43112347,,User,,51,,254,156
404608351,VSO fetch fix,"<!-- These comments are hidden when you submit the pull request, so you do not need to remove them!
Please be sure to check out our contributing guidelines, https://github.com/sunpy/sunpy/blob/master/CONTRIBUTING.rst.
Please be sure to check out our code of conduct, https://github.com/sunpy/sunpy/blob/master/CODE_OF_CONDUCT.rst. -->

<!-- Please just have a quick search on GitHub to see if a similar pull request has already been posted.
We have old closed pull requests that might provide useful code or ideas that directly tie in with your pull request. -->

<!-- We have several automatic features that run when a pull request is open.
They can appear daunting but do not worry about them!
We have a brief explanation of them in the documentation, https://docs.sunpy.org/en/latest/dev_guide/pr_review_procedure.html#continuous-integration. -->

### Description
<!-- Provide a general description of what your pull request does. -->

<!-- If the pull request closes any open issues you can add this.
If you replace <Issue Number> with a number GitHub will automatically link it.
If it doesn't, please remove the following line. -->

Fixes #3734 

In the issue Viktor created a **[notebook](https://gist.github.com/vit1-irk/2e518c02c792b5d1109c656431472254)** which shows the fetch fails for *SHA* provider. I inspected and found that whenever we used MDI and the `DataRequestitem` had multiple fileids , the fetch always failed. So I fixed it by having one fileid per datarequestitem. After this fix, I ran the same commands as in the notebook, and all 118 files were downloaded without error, here https://gist.github.com/abhijeetmanhas/089f4a4935cf3fd5e4a431c91f781dc0 .

In fact, this fix is not new , https://github.com/sunpy/sunpy/blob/master/sunpy/net/vso/vso.py#L748-#L767 here we pop the JSOC provider, and have one fileid per request, which solved this issue #2284 .

I have added a minimum test with only 3 files; which will fail on upstream.

However the issue is marked as remote server issue, but it can be fixed at our end. Open for discussions and suggestions.",False,4026,https://api.github.com/repos/sunpy/sunpy/pulls/4026,https://github.com/sunpy/sunpy/pull/4026,closed,22,26,3,6,4,10,2,0,"[{'name': 'net'}, {'name': 'Upstream Fix Required'}]",2020-04-16 18:48:19+00:00,2020-09-19 10:17:03+00:00,13447724.0,"155 days, 15:28:44","[{'comment_id': 409878495, 'comment_body': ""I'm just trying to understand this.\r\nWhat causes this increase in the number of results?\r\nFurther, you should update the comment which still mentions 4 results. "", 'comment_created': datetime.datetime(2020, 4, 16, 22, 11, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Raahul-Singh', 'type': 'User'}, {'comment_id': 409997924, 'comment_body': 'Thanks, I need to remove that line.\r\nThe number of results are still same, but what happened is earlier there were multiple files in same requestitem, so number of results are less.\r\n\r\nNow all fileids have different `DataRequestitem`, so no. of results increased. But the files shall always be same.', 'comment_created': datetime.datetime(2020, 4, 17, 5, 19, 59, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 409998439, 'comment_body': 'Cool!', 'comment_created': datetime.datetime(2020, 4, 17, 5, 22, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Raahul-Singh', 'type': 'User'}, {'comment_id': 410131441, 'comment_body': 'Why have these numbers changed?', 'comment_created': datetime.datetime(2020, 4, 17, 10, 19, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 410132446, 'comment_body': 'What is this test actually checking? The number of DRIs in the fetch request? Can we actually the thing we want to make sure is happening rather than relying on the return values from VSO?', 'comment_created': datetime.datetime(2020, 4, 17, 10, 21, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 410133042, 'comment_body': 'Might be a good opportunity to use some more descriptive names here.\r\n```suggestion\r\n        for provider in maps.keys():\r\n```', 'comment_created': datetime.datetime(2020, 4, 17, 10, 22, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 410133492, 'comment_body': 'Can you add a comment here describing why this code exists? If I am interpreting this correctly we are creating one `DataRequestItem` per fileid?', 'comment_created': datetime.datetime(2020, 4, 17, 10, 23, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 410267143, 'comment_body': 'Yes sure. We are creating one `DataRequestItem` for on fileid. ', 'comment_created': datetime.datetime(2020, 4, 17, 14, 38, 34, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 410269149, 'comment_body': 'Earlier in `dris` there used to be 3 HMI datarequestitems, and one AIA. But it was like they had array of fileids containing more than one fileid.\r\nFor example, the AIA one had 81 files for one item, and hmi had 3 each, so the total files accessible where still 90 but dris list had four items only.', 'comment_created': datetime.datetime(2020, 4, 17, 14, 41, 41, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 410295546, 'comment_body': ""I added this check which will fail on upstream but not after the fix. Though it is not checking anything; just that fix works for a query which won't work on master. So I think I should check in the test that records in getdatarequest have one fileid per record in this test."", 'comment_created': datetime.datetime(2020, 4, 17, 15, 23, 27, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}]","[{'commit_sha': 'eb83b759649f5595771a149e3f5b0fd17b33f888', 'committer_username': 'abhijeetmanhas', 'committer_name': 'Abhijeet Manhas', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 13, 15, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aeca8ba7fd585604c11241fa34182650fa0fb47a', 'committer_username': 'abhijeetmanhas', 'committer_name': 'Abhijeet Manhas', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 13, 15, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5852932223fad9a29f81411b1a48883de56f6fd', 'committer_username': 'abhijeetmanhas', 'committer_name': 'Abhijeet Manhas', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 13, 15, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '434d5e40f0574d1b1b2c1a78dbffe8cef8dd539c', 'committer_username': 'abhijeetmanhas', 'committer_name': 'Abhijeet Manhas', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 13, 15, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd04c202124a64dc23193816032839a5f8bfc12d2', 'committer_username': 'abhijeetmanhas', 'committer_name': 'Abhijeet Manhas', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 13, 15, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a448736f0e4da886c69a11c21a74d74bc10e9b8b', 'committer_username': 'abhijeetmanhas', 'committer_name': 'Abhijeet Manhas', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 13, 15, 21, tzinfo=datetime.timezone.utc)}]",Abhijeet Manhas,43112347,,User,,51,,254,156
440494107,Redesigning genericClient,"<!--
We know that working on sunpy and submitting pull requests takes effort, and we appreciate your time.
Thank you.

Please be aware that everyone has to follow our code of conduct:
https://github.com/sunpy/sunpy/blob/master/CODE_OF_CONDUCT.rst

Also these comments are hidden when you submit this github pull request.

We have several automatic features that run when a pull request is open.
They can appear daunting but do not worry about them!
Here is a brief explanation of them: https://docs.sunpy.org/en/latest/dev_guide/pr_review_procedure.html#continuous-integration.
-->

### Description
<!--
Provide a general description of what your pull request does.

If the pull request closes any open issues you can add this.
If you replace <Issue Number> with a number GitHub will automatically link it.
If it doesn't, please remove the following line.
-->

Key highlights:

- Easy to define a new ""simple"" Fido client. Only define `pattern`, `baseurl`, and `register_values()`. This further uses scraper and `~sunpy.extern.parse` for extracting metadata.
- More metadata is shown in the response tables. Like `SatelliteNumber`, `Level`, `Detector`, `Resolution`,  `Wavelength` will be shown which earlier were either not present or `np.nan`.
- Nothing is default Attr for any search made to client. So if client supports 3 levels, and we don't specify level in the query, data fo all levels shall be shown.
- Refactoring in `GenericClient`, removed/generalized/updated a lot of methods.

Fixes #3715, Fixes #3337, Fixes  #3321, Fixes #3306, Fixes #2314.",True,4321,https://api.github.com/repos/sunpy/sunpy/pulls/4321,https://github.com/sunpy/sunpy/pull/4321,closed,833,1466,35,20,15,174,3,0,"[{'name': 'Refactoring'}, {'name': 'net'}, {'name': 'Merge When CI Passes'}]",2020-06-26 09:58:43+00:00,2020-09-10 11:38:48+00:00,6572405.0,"76 days, 1:40:05","[{'comment_id': 446093374, 'comment_body': 'Why do we have all three of these? Do we need start and end on their own if we have range?', 'comment_created': datetime.datetime(2020, 6, 26, 10, 8, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 446093655, 'comment_body': ""adding a docstring here describing what this dict is used for would be useful for me and future versions of me who forget.\r\n\r\n(it's to pass to scraper right?)"", 'comment_created': datetime.datetime(2020, 6, 26, 10, 8, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 446093979, 'comment_body': 'Why have a method for this if they are all class attributes anyway?', 'comment_created': datetime.datetime(2020, 6, 26, 10, 9, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 448236452, 'comment_body': ""aren't these in VSO at the moment?"", 'comment_created': datetime.datetime(2020, 7, 1, 9, 27, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 448239397, 'comment_body': 'What are the args here? Does this need to be a full `*args, **kwargs`?\r\n\r\nI think the query needs to be passed in here? Does anything else?', 'comment_created': datetime.datetime(2020, 7, 1, 9, 32, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 448240167, 'comment_body': 'This needs to be a class attr?', 'comment_created': datetime.datetime(2020, 7, 1, 9, 33, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 448240363, 'comment_body': 'Are these not defined under the VSO namespace? ', 'comment_created': datetime.datetime(2020, 7, 1, 9, 34, 12, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 448240512, 'comment_body': ""This needs to be everything in register_values that isn't in required?\r\n```suggestion\r\n        optional = {i for i in adict.keys()}difference(required)\r\n```"", 'comment_created': datetime.datetime(2020, 7, 1, 9, 34, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 448243749, 'comment_body': ""Why are we converting these to strings to put them in the response, can't we just pass astropy time objects to Table?"", 'comment_created': datetime.datetime(2020, 7, 1, 9, 40, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 448244170, 'comment_body': '```suggestion\r\n    def pre_search_hook(cls, *args, **kwargs):\r\n```', 'comment_created': datetime.datetime(2020, 7, 1, 9, 40, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 448245494, 'comment_body': 'What do you think the pros/cons of putting this loop inside `post_hook` are? Are there cases where the source would want to handle all the returns as a group? i.e. to filter them or something mad?', 'comment_created': datetime.datetime(2020, 7, 1, 9, 43, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 448263615, 'comment_body': 'yeah, True will change it accordingly', 'comment_created': datetime.datetime(2020, 7, 1, 10, 16, 22, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 448287190, 'comment_body': 'Yes, `*args` and `**kwargs` of query shall be used for translation here. This pre-hook will be overwritten for some clients like `norh`. Where wavelength shall translate to either `tcz` or `tca` in the url.', 'comment_created': datetime.datetime(2020, 7, 1, 11, 4, 4, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 448287879, 'comment_body': 'For most clients, `Instrument` and `Time` are required attrs so the method is same for all clients.\r\nIf any client deviates, it will be implemented in the  subclass.', 'comment_created': datetime.datetime(2020, 7, 1, 11, 5, 24, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 448290977, 'comment_body': ""Passing large `filesmeta`list of dictionaries which may contain a lot of metada to a method will increase memory usage (I'm not very certain about it).\r\nThere are no filtering left, all that is handled by the `matchdict` passed in scraper, as we decided in the last meeting.\r\nThe `post_hook` will be overwritten for clients like `norh` to convert `tcz` or `tca` in the url to `17*u.GHz` or `34 *u.GHz`.\r\n\r\n"", 'comment_created': datetime.datetime(2020, 7, 1, 11, 11, 47, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 448291929, 'comment_body': ""yeah but they shouldn't need to override this method to set this, they should just be able to set a class attr?"", 'comment_created': datetime.datetime(2020, 7, 1, 11, 13, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 449529697, 'comment_body': 'Can you not replace this with a call to `pre_hook`?', 'comment_created': datetime.datetime(2020, 7, 3, 11, 17, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 449536437, 'comment_body': 'Also this would come out of `pre_hook` right?', 'comment_created': datetime.datetime(2020, 7, 3, 11, 34, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 449536787, 'comment_body': 'I thought the plan was to have `required` as a class attribute and derive optional from `register_attrs`?', 'comment_created': datetime.datetime(2020, 7, 3, 11, 35, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 449539528, 'comment_body': 'These are going to need defaults.\r\n\r\n```suggestion\r\n    baseurl = None\r\n    pattern = None\r\n```', 'comment_created': datetime.datetime(2020, 7, 3, 11, 42, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 451238161, 'comment_body': 'Moved from vso to net', 'comment_created': datetime.datetime(2020, 7, 8, 1, 56, 42, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 451238371, 'comment_body': 'Moved from vso to net', 'comment_created': datetime.datetime(2020, 7, 8, 1, 57, 26, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 451238552, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 7, 8, 1, 58, 9, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 451238637, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 7, 8, 1, 58, 35, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 451239054, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 7, 8, 2, 0, 5, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 451239141, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 7, 8, 2, 0, 25, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 451239665, 'comment_body': ""This can't be done, since we can't derive `wavelength` from register_attrs as we planned not to register it."", 'comment_created': datetime.datetime(2020, 7, 8, 2, 2, 20, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 451239700, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 7, 8, 2, 2, 30, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 452083841, 'comment_body': '```suggestion\r\n    Specifies the data provider to search for data using Fido.\r\n```', 'comment_created': datetime.datetime(2020, 7, 9, 9, 23, 19, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 452084004, 'comment_body': 'This should be completed. ', 'comment_created': datetime.datetime(2020, 7, 9, 9, 23, 36, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 452084109, 'comment_body': '```suggestion\r\n    For VSO, more information about each provider may be found within in the VSO Registry.\r\n```', 'comment_created': datetime.datetime(2020, 7, 9, 9, 23, 48, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 452084573, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2020, 7, 9, 9, 24, 38, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 452085182, 'comment_body': '```suggestion\r\n    See `VSO providers <https://sdac.virtualsolar.org/cgi/show_details?keyword=PROVIDER>`__.\r\n```', 'comment_created': datetime.datetime(2020, 7, 9, 9, 25, 37, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 452085377, 'comment_body': '```suggestion\r\n    Data sources that Fido can search with.\r\n```', 'comment_created': datetime.datetime(2020, 7, 9, 9, 25, 59, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 452085456, 'comment_body': 'This should be completed.', 'comment_created': datetime.datetime(2020, 7, 9, 9, 26, 8, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 452085557, 'comment_body': '```suggestion\r\n    For VSO, more information about each source may be found within in the VSO Registry.\r\n```', 'comment_created': datetime.datetime(2020, 7, 9, 9, 26, 18, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 452085903, 'comment_body': '```suggestion\r\n    See `VSO sources <https://sdac.virtualsolar.org/cgi/show_details?keyword=SOURCE>`__.\r\n```', 'comment_created': datetime.datetime(2020, 7, 9, 9, 26, 54, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 452086518, 'comment_body': ""```suggestion\r\n    Please note that 'Source' is used internally by VSO to represent\r\n```"", 'comment_created': datetime.datetime(2020, 7, 9, 9, 28, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 452086585, 'comment_body': ""```suggestion\r\n    what the VSO Data Model refers to as 'Observatory'.\r\n```"", 'comment_created': datetime.datetime(2020, 7, 9, 9, 28, 7, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 452086659, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2020, 7, 9, 9, 28, 14, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 452087842, 'comment_body': 'You need to add these to the list of removed attrs at the bottom of this file.', 'comment_created': datetime.datetime(2020, 7, 9, 9, 30, 10, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 452095622, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2020, 7, 9, 9, 43, 24, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 452100927, 'comment_body': 'This is still in the method and not a class attr?', 'comment_created': datetime.datetime(2020, 7, 9, 9, 52, 28, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 452101100, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2020, 7, 9, 9, 52, 45, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 452103008, 'comment_body': 'I feel like the attrs should be case insensitive, if they are not, we might want to change that. ', 'comment_created': datetime.datetime(2020, 7, 9, 9, 56, 7, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 452104229, 'comment_body': 'In theory this could be reduced if the scrapper was smarter?', 'comment_created': datetime.datetime(2020, 7, 9, 9, 58, 10, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 452391980, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 7, 9, 17, 54, 53, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 452392673, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 7, 9, 17, 56, 15, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 452392895, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 7, 9, 17, 56, 41, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 452393841, 'comment_body': 'yes, since it is by default `instrument` and `Time`. If any client want to overwrite it, then it can be defined as class attributes for that clients, and the generic `_can_handle_query` checks if they are defined as class attributes or not. If not, it will follow the default rule.', 'comment_created': datetime.datetime(2020, 7, 9, 17, 58, 29, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 452397434, 'comment_body': ""That would have been ideal, but the problem is, the arhive website may contain these attrs in any case, and our pattern matching will fail if we don't follow the website.\r\n\r\nIf we want to ignore case, that can also be done, but we have to then overwrite `pre_search_hook()` method (which norh does for converting 34 ghz to `tca`). But defining pre-hook for converting `CTIME` to `ctime` or `Ctime` looked like overkill.\r\nSo I defined the case the archive follows in register values itself."", 'comment_created': datetime.datetime(2020, 7, 9, 18, 4, 56, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 452397958, 'comment_body': 'Yeah, only convertors need to befined. (to convert level 2 to `/data/l2/` in baseurl). We can do everything with one baseurl itself.', 'comment_created': datetime.datetime(2020, 7, 9, 18, 5, 50, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 453961252, 'comment_body': 'Does this return a timerange?', 'comment_created': datetime.datetime(2020, 7, 13, 21, 59, 21, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 453962126, 'comment_body': 'It was `from sunpy.net.attrs import Time` So I just used it. \r\n`search` in Fido only supports timerange when it is instance of `a.Time`. Or we need to specify it as args if we are gonna use `sunpy.TimeRange` like `search(Time=TimeRange(start, end))`', 'comment_created': datetime.datetime(2020, 7, 13, 22, 0, 34, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 453962958, 'comment_body': 'Fair enough.', 'comment_created': datetime.datetime(2020, 7, 13, 22, 1, 43, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 454497681, 'comment_body': 'Are we really out of VSO specific attrs we register values for?', 'comment_created': datetime.datetime(2020, 7, 14, 16, 48, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 454500232, 'comment_body': ""I don't really understand what this function is doing, or why it is doing it from this docstring. Could you rephrase it?"", 'comment_created': datetime.datetime(2020, 7, 14, 16, 52, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 454501431, 'comment_body': ""But why not just set required on this class, so it's always defined and then use it consistently in this method rather than doing `hasattr`. I would also think it would be a good idea to define `optional = set()` as a class attr as well, so these are always defined and we don't have to check if they are there."", 'comment_created': datetime.datetime(2020, 7, 14, 16, 54, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 454501842, 'comment_body': 'As per the thread above:\r\n```suggestion\r\n        if not cls.check_attr_types_in_query(query, cls.required, cls.optional):\r\n```', 'comment_created': datetime.datetime(2020, 7, 14, 16, 54, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 454502703, 'comment_body': '```suggestion\r\n        Helper function used after `:func:~sunpy.net.dataretriever.GenericClient.search` which makes the\r\n```', 'comment_created': datetime.datetime(2020, 7, 14, 16, 56, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 454503141, 'comment_body': 'Why are we injecting the timerange and the start and end times, why not just one or the other?', 'comment_created': datetime.datetime(2020, 7, 14, 16, 56, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 454503891, 'comment_body': 'This PR feels like a good opportunity to get rid of this class? Or shall we do that later?', 'comment_created': datetime.datetime(2020, 7, 14, 16, 58, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 454509920, 'comment_body': 'I thought this was removed?', 'comment_created': datetime.datetime(2020, 7, 14, 17, 8, 16, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 454587859, 'comment_body': 'Yes, though there are `Pscale`, `Extent`, `Pixel` etc, but nothing is registered for them.', 'comment_created': datetime.datetime(2020, 7, 14, 19, 20, 19, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 454590053, 'comment_body': 'This was done so that we have `Time` as a Quantity in the table which can be used for inspection. And start time/endtime as strings which can be used for showing in the response table, so that results look similar as it was before for time.\r\n\r\nIf we inject only `Time`, we had to do that thing in `build_table`, and as I also had to preserve order of colnames in the table, it was relatively difficult to implement.', 'comment_created': datetime.datetime(2020, 7, 14, 19, 24, 16, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 454590963, 'comment_body': ""I had to bring back `QueryResponseBlock` due to two reasons:\r\n- All vso, jsoc, dataretriever individual records (rows in table) used to be classes, and to access their attributes, we have to do something like `row.url` instead of `row['ur']` in my implementation. So this ensured uniformity.\r\n- A huge changes might have to be done in `database` tests, first by checking what type of response it is and whether to do `['url']` or `.url`. So it saved me from it."", 'comment_created': datetime.datetime(2020, 7, 14, 19, 25, 51, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 454980939, 'comment_body': 'What caused this change?', 'comment_created': datetime.datetime(2020, 7, 15, 11, 27, 2, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 454981280, 'comment_body': 'The question is, is it worth removing this class and just doing those annoying little changes everywhere? ', 'comment_created': datetime.datetime(2020, 7, 15, 11, 27, 45, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 454989299, 'comment_body': ""The goes `xrs` had one day files, so my implementation defaults the start time of a record to `00:00` on that day.\r\nWhen the start time is given `4:00` it isn't less than `0:00` so scraper doesn't return that file."", 'comment_created': datetime.datetime(2020, 7, 15, 11, 43, 57, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 456061115, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 7, 16, 20, 33, 49, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 456061165, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 7, 16, 20, 33, 56, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 456092672, 'comment_body': ""Removed in the latest commit, there weren't lot of changes.\r\nNow the question is, should we keep the way to access fields from row data of QueryResponse (earlier QueryResponseBlock ) different for VSO and DR?\r\nI think it would be rarely used. And after `:func:show` added, it won't be required."", 'comment_created': datetime.datetime(2020, 7, 16, 21, 38, 3, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 456093797, 'comment_body': 'Different how?', 'comment_created': datetime.datetime(2020, 7, 16, 21, 40, 28, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 456097293, 'comment_body': ""Like in VSO, the zeep client makes each block an object, so time is accessed like `block.time` or `getattr(block, 'time')`.\r\n\r\nBut I made them a dictionary in DR clients instead of making a separate class' objects, so it is accessed like `block['time']` or `block.get('time')`"", 'comment_created': datetime.datetime(2020, 7, 16, 21, 48, 28, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 456111032, 'comment_body': 'On the surface I would think we go for the latter, is it not how astropy.tables are indexed?', 'comment_created': datetime.datetime(2020, 7, 16, 22, 21, 15, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 456305362, 'comment_body': ""Exactly, that's how we index cols in astropy table, like I'm doing in dict"", 'comment_created': datetime.datetime(2020, 7, 17, 8, 42, 8, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 456957949, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 7, 19, 21, 30, 35, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 456958430, 'comment_body': 'Reprhased', 'comment_created': datetime.datetime(2020, 7, 19, 21, 36, 20, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 458615313, 'comment_body': 'This should be split into multiple changelogs ', 'comment_created': datetime.datetime(2020, 7, 22, 8, 13, 19, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 459769471, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 7, 23, 22, 46, 48, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 460576627, 'comment_body': 'Can you check if "":func:"" should be outside or inside of the backticks?\r\nAlso if these should be "":func:"" or "":meth:"".', 'comment_created': datetime.datetime(2020, 7, 26, 21, 39, 12, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 460576665, 'comment_body': '```suggestion\r\nRemoved `~sunpy.net.dataretriever.QueryResponseBlock` as `~sunpy.net.dataretriever.QueryResponse` now uses a `list` of `~collections.OrderedDict` for building the response table.\r\n```', 'comment_created': datetime.datetime(2020, 7, 26, 21, 39, 34, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 460576721, 'comment_body': '```suggestion\r\nAdditions in `~sunpy.util.scraper` to support the refactoring of ~sunpy.net.dataretriever.GenericClient:\r\n```', 'comment_created': datetime.datetime(2020, 7, 26, 21, 40, 7, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 461044417, 'comment_body': ""According to docs\r\n```\r\npython function :py:func:`package.name.function`\r\n:py:meth:`package.name.ClassName.method`.\r\n```\r\nSo ideally , we should use `:meth:` here. But we have used both meth and func across sunpy, in changelog and the rst docs. However, in this PR I'll use meth. And func should be outside those ticks, which also need to be changed."", 'comment_created': datetime.datetime(2020, 7, 27, 17, 15, 35, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 461052587, 'comment_body': 'Can you use the correct one?', 'comment_created': datetime.datetime(2020, 7, 27, 17, 29, 16, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 461076298, 'comment_body': 'Yes, I have used the correct one, in all changelogs now.', 'comment_created': datetime.datetime(2020, 7, 27, 18, 11, 11, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 463010358, 'comment_body': ""there's something wrong with this sentence - I'm not too sure what this means?"", 'comment_created': datetime.datetime(2020, 7, 30, 13, 50, 26, tzinfo=datetime.timezone.utc), 'commenter': 'hayesla', 'type': 'User'}, {'comment_id': 463010612, 'comment_body': '```suggestion\r\n- A ``matcher`` in :meth:`~sunpy.util.scraper.Scraper._extract_files_meta` which validates the extracted metadata by using the dictionary returned from :meth:`~sunpy.net.dataretriever.GenericClient._get_match_dict`.\r\n```', 'comment_created': datetime.datetime(2020, 7, 30, 13, 50, 47, tzinfo=datetime.timezone.utc), 'commenter': 'hayesla', 'type': 'User'}, {'comment_id': 463011556, 'comment_body': '```suggestion\r\n- ``optional`` and ``required`` which are a ``set`` of optional and required `~sunpy.net.attrs` respectively; which generalizes :meth:`~sunpy.net.dataretriever.GenericClient._can_handle_query`.\r\n```', 'comment_created': datetime.datetime(2020, 7, 30, 13, 52, 8, tzinfo=datetime.timezone.utc), 'commenter': 'hayesla', 'type': 'User'}, {'comment_id': 463012081, 'comment_body': '```suggestion\r\n- Any ``attr`` shall not be defaulted to a hard-coded value in all subclasses of `~sunpy.net.dataretriever.GenericClient`; thus records for all possible ``attrs`` shall be returned if it is not specified in the query.\r\n```', 'comment_created': datetime.datetime(2020, 7, 30, 13, 52, 54, tzinfo=datetime.timezone.utc), 'commenter': 'hayesla', 'type': 'User'}, {'comment_id': 463014217, 'comment_body': '```suggestion\r\nThus ``attrs``, ``Source`` and ``Provider`` are moved from VSO namespace to `~sunpy.net.attrs`.\r\n```', 'comment_created': datetime.datetime(2020, 7, 30, 13, 55, 52, tzinfo=datetime.timezone.utc), 'commenter': 'hayesla', 'type': 'User'}, {'comment_id': 463016514, 'comment_body': ""```suggestion\r\n    >>> result = Fido.search(a.Time('2012/3/4', '2012/3/6'), a.Instrument.lyra, a.Level(2)) # doctest: +REMOTE_DATA\r\n```\r\nThis is just a personal preference of using `.(2)` rather than `.two`"", 'comment_created': datetime.datetime(2020, 7, 30, 13, 58, 57, tzinfo=datetime.timezone.utc), 'commenter': 'hayesla', 'type': 'User'}, {'comment_id': 463016819, 'comment_body': '```suggestion\r\n    >>> results = Fido.search(a.Time(""2012/1/1"", ""2012/1/2""), a.Level(2),\r\n```', 'comment_created': datetime.datetime(2020, 7, 30, 13, 59, 20, tzinfo=datetime.timezone.utc), 'commenter': 'hayesla', 'type': 'User'}, {'comment_id': 463018106, 'comment_body': ""hmmmm this is an issue now I guess - will `tr = TimeRange(['2011-06-07 04:00', '2011-06-07 12:00'])` this now not return the file for this day? it really should - many people will search only for a flare time so this is important!"", 'comment_created': datetime.datetime(2020, 7, 30, 14, 0, 55, tzinfo=datetime.timezone.utc), 'commenter': 'hayesla', 'type': 'User'}, {'comment_id': 463018746, 'comment_body': ""```suggestion\r\n        net_attrs.Instrument('lyra') & net_attrs.Level(2) | net_attrs.Instrument('eve') |\r\n```"", 'comment_created': datetime.datetime(2020, 7, 30, 14, 1, 46, tzinfo=datetime.timezone.utc), 'commenter': 'hayesla', 'type': 'User'}, {'comment_id': 463018943, 'comment_body': ""```suggestion\r\n        net_attrs.Instrument('lyra') & net_attrs.Level(2) | net_attrs.Instrument('eve') |\r\n```"", 'comment_created': datetime.datetime(2020, 7, 30, 14, 2, 3, tzinfo=datetime.timezone.utc), 'commenter': 'hayesla', 'type': 'User'}, {'comment_id': 463028584, 'comment_body': 'just a general comment - we should probably have some tests that also include %H%m to check this works too ', 'comment_created': datetime.datetime(2020, 7, 30, 14, 15, 54, tzinfo=datetime.timezone.utc), 'commenter': 'hayesla', 'type': 'User'}, {'comment_id': 463048547, 'comment_body': 'I think we need to decide which one we are doing and then do it everywhere. I think @nabobalis changed it everywhere applicable.', 'comment_created': datetime.datetime(2020, 7, 30, 14, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 463050462, 'comment_body': 'This docstring needs rewriting.', 'comment_created': datetime.datetime(2020, 7, 30, 14, 45, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 463051427, 'comment_body': 'What do we mean by ""all possible values"" here. I.e. for GOES does this mean we are enumerating all possible satellite numbers? How do we know them all?', 'comment_created': datetime.datetime(2020, 7, 30, 14, 46, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 463052242, 'comment_body': ""I don't care either way, so someone else can make the choice."", 'comment_created': datetime.datetime(2020, 7, 30, 14, 47, 52, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 463052579, 'comment_body': 'You can (and should :wink:) add docstrings to these like this:\r\n```suggestion\r\n    baseurl = None\r\n    """"""\r\n    docstring\r\n    """"""\r\n```', 'comment_created': datetime.datetime(2020, 7, 30, 14, 48, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 463054103, 'comment_body': ""adict isn't a great variable name."", 'comment_created': datetime.datetime(2020, 7, 30, 14, 50, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 463054654, 'comment_body': ""We don't need optional. optional is by definition all supported attrs which aren't required?\r\n```suggestion\r\n```\r\n"", 'comment_created': datetime.datetime(2020, 7, 30, 14, 51, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 463054844, 'comment_body': 'Both will work by the way', 'comment_created': datetime.datetime(2020, 7, 30, 14, 51, 25, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 463056336, 'comment_body': 'either is fine - just a personal preference nothing else!', 'comment_created': datetime.datetime(2020, 7, 30, 14, 53, 29, tzinfo=datetime.timezone.utc), 'commenter': 'hayesla', 'type': 'User'}, {'comment_id': 463057459, 'comment_body': 'I think this will fail if the attr is registered as a wildcard? https://github.com/sunpy/sunpy/blob/2517c47bc6/sunpy/net/attr.py#L228', 'comment_created': datetime.datetime(2020, 7, 30, 14, 55, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 463057815, 'comment_body': 'So why not drop `Time`?', 'comment_created': datetime.datetime(2020, 7, 30, 14, 55, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 463058239, 'comment_body': 'can we get rid of this shitty variable name? I am happy to see the back of it :rofl: ', 'comment_created': datetime.datetime(2020, 7, 30, 14, 56, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 463059042, 'comment_body': 'Can we make this configurable per client and extractable from the URL? It should not be defaulting to a day in the base class.', 'comment_created': datetime.datetime(2020, 7, 30, 14, 57, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 463059750, 'comment_body': ""This issue is due to all clients assuming that if a filename contains the timestamp of a file, \r\nFor example goes contain `2011/6/7` in the url, so it start time is considered as `2011/6/7 00:00` since there's no info about `HHMMSS` and there's one file per day. \r\nSince scraper compares `start_time_in_attr<=start_time_extracted`, so if we do `2011/4/7 4:00`, so file for `2011/6/7` is not returned. What best thing we should be doing? \r\n\r\nOne thing in my mind is compare inferred endtime of a file with the end time provided in the attr. If one of them is true, then we will return the file."", 'comment_created': datetime.datetime(2020, 7, 30, 14, 58, 10, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 463059949, 'comment_body': ""This logic feels weird. What's driving this?"", 'comment_created': datetime.datetime(2020, 7, 30, 14, 58, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 463062745, 'comment_body': ""why only the if statement for physobs, what if my new client doesn't define a source, provider or even instrument? This whole method feels like it's pretty specialised for what exists at the moment rather than the design of the `GenericClient`.\r\n\r\nAm I right in thinking that this is a converter from `cls.pattern` to a response table? Can we not generalise this by restricting (via docs) the possible names of parameters in `cls.pattern`?"", 'comment_created': datetime.datetime(2020, 7, 30, 15, 2, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 463063473, 'comment_body': 'Now I think about it, the fact there is `""year"", ""month"" and ""day""` in this dict at all is weird.', 'comment_created': datetime.datetime(2020, 7, 30, 15, 3, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 463067233, 'comment_body': 'This docstring is telling lies, it downloads nothing.', 'comment_created': datetime.datetime(2020, 7, 30, 15, 8, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 463067783, 'comment_body': ""In fact, couldn't we use the fields present in the pattern to know which things we need to process here?"", 'comment_created': datetime.datetime(2020, 7, 30, 15, 9, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 463067793, 'comment_body': 'I agree with @hayesla in that it is customary to return the file for the day being searched, otherwise it would be against the usual user expectations...  ', 'comment_created': datetime.datetime(2020, 7, 30, 15, 9, 22, tzinfo=datetime.timezone.utc), 'commenter': 'kakirastern', 'type': 'User'}, {'comment_id': 463068204, 'comment_body': ':x: \r\n\r\n*hisses at `map_`*', 'comment_created': datetime.datetime(2020, 7, 30, 15, 9, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 463068459, 'comment_body': 'hmm is there a way to implement within goes.py? such that if the hh:mm is given it will automatically trim them to 00:00?', 'comment_created': datetime.datetime(2020, 7, 30, 15, 10, 16, tzinfo=datetime.timezone.utc), 'commenter': 'hayesla', 'type': 'User'}, {'comment_id': 463077426, 'comment_body': 'why even bother with a call to `pre_search_hook` in this client?', 'comment_created': datetime.datetime(2020, 7, 30, 15, 22, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 463078424, 'comment_body': ""I think I know what's happening here, but a comment would help."", 'comment_created': datetime.datetime(2020, 7, 30, 15, 24, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 463078661, 'comment_body': 'same here.', 'comment_created': datetime.datetime(2020, 7, 30, 15, 24, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 463079024, 'comment_body': ""why `super()` we haven't overriden it right?"", 'comment_created': datetime.datetime(2020, 7, 30, 15, 24, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 463081188, 'comment_body': ""I found [this](https://github.com/sunpy/sunpy/pull/4321/files#r449536787) old thread where it was pointed out that the main issue is that `Wavelength` (and I assume `Time`) isn't registered. This makes me think we should be registering them, even if we can't register values for them.\r\n\r\n@nabobalis what do you think about that? Could we just pass `{a.Wavelength: '*'}` and everything just work?"", 'comment_created': datetime.datetime(2020, 7, 30, 15, 28, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 463088339, 'comment_body': 'Try it and see?', 'comment_created': datetime.datetime(2020, 7, 30, 15, 38, 35, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 463088717, 'comment_body': 'I am not sure I ever tested non-simple attrs with `*`', 'comment_created': datetime.datetime(2020, 7, 30, 15, 39, 9, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 464012557, 'comment_body': 'Yes,it was wrong.\r\nChanged to\r\n```- :meth:`~sunpy.util.scraper.Scraper.findDatewith_extractor` which parses the url using extractor to return its start time.\r\n```', 'comment_created': datetime.datetime(2020, 8, 2, 0, 1, 33, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 464012604, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 2, 0, 2, 23, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 464012637, 'comment_body': 'Changed to `regattrs_dict`', 'comment_created': datetime.datetime(2020, 8, 2, 0, 2, 49, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 464012684, 'comment_body': 'Added some details of post and pre hooks. Also explained `baseurl` `pattern` etc.', 'comment_created': datetime.datetime(2020, 8, 2, 0, 3, 30, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 464012724, 'comment_body': 'It knows them all by `register_values()`. Only those which are registered in that method will be known to the client.', 'comment_created': datetime.datetime(2020, 8, 2, 0, 4, 18, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 464012767, 'comment_body': 'changed to `rowdict` everywhere.', 'comment_created': datetime.datetime(2020, 8, 2, 0, 4, 57, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 464012825, 'comment_body': ""You're right, not calling now."", 'comment_created': datetime.datetime(2020, 8, 2, 0, 5, 32, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 464012840, 'comment_body': 'Added.', 'comment_created': datetime.datetime(2020, 8, 2, 0, 5, 42, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 464012957, 'comment_body': 'Actually the `SRSClient` is weird. It changes its pattern on the basis of year. So I first know the correct pattern and then use the `super().search` cause it saves me from adding scraper code.', 'comment_created': datetime.datetime(2020, 8, 2, 0, 7, 38, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 464013089, 'comment_body': 'Yes, updated.', 'comment_created': datetime.datetime(2020, 8, 2, 0, 9, 59, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 464013317, 'comment_body': ""yes it will fail, the code assumes that the one who will write client won't add wildcard. I will workout how it can be supported here."", 'comment_created': datetime.datetime(2020, 8, 2, 0, 13, 28, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 464013585, 'comment_body': 'Because scraper needs a `TimeRange` for generating urls.', 'comment_created': datetime.datetime(2020, 8, 2, 0, 17, 53, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 464013973, 'comment_body': 'https://github.com/sunpy/sunpy/pull/4321#discussion_r463059042\r\nhttps://github.com/sunpy/sunpy/pull/4321#discussion_r463059949\r\nthis all is for getting end times for a url. If file contains only `year` then end time is defaulted to end of that year.\r\nIf file contains only `y/m/d` then endtime is defaulted to end of the day,\r\n\r\nIt works for all files because none of the file have time in format `%j` or other format. In `SUVICLient` however the endtime was in the filename itself, so `post_search_hook` was overwritten.\r\nAll DR clients have daily files, except `SRS` has yearly file. But I think it is a bad assumption. Some scraper changes can be helpful to address it.\r\n', 'comment_created': datetime.datetime(2020, 8, 2, 0, 24, 27, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 464014410, 'comment_body': ""Some fields are not present in the `pattern`, like `Source`, `Instrument`, `Provider` etc. So we can't do that way. I'm using matchdict for that work. It uses `register_values` for getting those attrs. The problem is some things may not be even registered as attrs. (Like Time and Wavelength). So we need an individual compare after running loop over the things available from `cls.pattern`.\r\n\r\nYes you are right I shoudn't check only for `Physobs`. Infact I should check for all other attrs too."", 'comment_created': datetime.datetime(2020, 8, 2, 0, 31, 1, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 464316862, 'comment_body': ""This seems flawed. The big change to GOES in particular was us being able to search all the available satellites, but because we are only search for ones which we have listed in `register_values` if a new satellite becomes operational we would need the user to upgrade sunpy before they could get results for that satellite.\r\n\r\nThis pulls us back to redesigning scraper doesn't it?"", 'comment_created': datetime.datetime(2020, 8, 3, 10, 2, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 464318156, 'comment_body': ""This brings up an interesting thought about how we validate `register_values` and the pattern. If things aren't in the pattern they should have one value in `register_values` and then all the results take that value? If they have more than one value in `register_values` then they should be in the pattern?\r\n\r\nCan you not use this logic to determine how to build the results? It would then be much more flexible. I wouldn't expect you to need to call out anything explicitly in this method other than maybe time?"", 'comment_created': datetime.datetime(2020, 8, 3, 10, 5, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 464318675, 'comment_body': 'My point  was `self.post_search_hook` should be fine.', 'comment_created': datetime.datetime(2020, 8, 3, 10, 6, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 464319092, 'comment_body': ""We don't need a changelog entry for private (`_`) methods."", 'comment_created': datetime.datetime(2020, 8, 3, 10, 7, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 465196863, 'comment_body': 'Ok, removed.', 'comment_created': datetime.datetime(2020, 8, 4, 17, 0, 34, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 465197240, 'comment_body': 'Oh ok, corrected.', 'comment_created': datetime.datetime(2020, 8, 4, 17, 1, 12, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 465249822, 'comment_body': ""I think it's probably ok given that its somewhat of a rare occurrence that there'll be a new GOES satellite with science quality XRS data so I think this is ok to have it 'hard-coded' into the register_values. \r\n\r\nLike the more I think about this - people really will only want just GOES data from one instrument given that they are _supposed_ to be the same data (calibrated to be the same anyway). Those that are interested in using other GOES satellites (e.g. wanting to use GOES 13 when there is GOES 15) will could just use the `SatelliteNumber` attrs. The majority of the community will really just want the lightcurves from the most current instrument at the time of their observation. We could just have a nice example of how to do this etc. \r\n\r\nBut as @abhijeetmanhas mentioned in the matrix chat - how would scraper work when the pattern is `../satellite_number/y/m/d...` which is the case for GOES 16 and 17 (rather than just listing all files under `../goes_data/fits/y/m/d..` like for previous data) you would have to register it somewhere times when this data is available and iterate to list the available data in the search right? \r\n\r\n"", 'comment_created': datetime.datetime(2020, 8, 4, 18, 33, 54, tzinfo=datetime.timezone.utc), 'commenter': 'hayesla', 'type': 'User'}, {'comment_id': 465823140, 'comment_body': ""yes, because else we won't be able to know the directory names where our scraper would search data for."", 'comment_created': datetime.datetime(2020, 8, 5, 15, 44, 33, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 466614649, 'comment_body': 'Yes, not assuming existence of specific attrs now. Applied that logic in `post_search_hook`', 'comment_created': datetime.datetime(2020, 8, 6, 18, 45, 5, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 466614845, 'comment_body': 'Redirected generalized logic doing same thing in scraper.', 'comment_created': datetime.datetime(2020, 8, 6, 18, 45, 27, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 466616477, 'comment_body': 'Also we would lose those milliseconds in endtime, if we use stringified time.', 'comment_created': datetime.datetime(2020, 8, 6, 18, 48, 28, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 466629149, 'comment_body': 'Is it Ok if I add method to get timerange for a file in each client itself?', 'comment_created': datetime.datetime(2020, 8, 6, 19, 12, 17, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 466726547, 'comment_body': 'Removed optional by adding Time and Wavelength in `register_values()`.', 'comment_created': datetime.datetime(2020, 8, 6, 22, 49, 44, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 466726622, 'comment_body': 'https://github.com/sunpy/sunpy/pull/4321#discussion_r466726547', 'comment_created': datetime.datetime(2020, 8, 6, 22, 49, 58, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 466982920, 'comment_body': ""Conceptually I don't see why the scraper shouldn't be able to handle a pattern like that, list all directories, use the values. Bonus points for checking that the format is something like `{:d2}` or whatever."", 'comment_created': datetime.datetime(2020, 8, 7, 11, 30, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 466989144, 'comment_body': 'This is not a method which follows generalization.', 'comment_created': datetime.datetime(2020, 8, 7, 11, 45, 43, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 468164118, 'comment_body': 'Much general method added now.', 'comment_created': datetime.datetime(2020, 8, 10, 20, 22, 17, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 468166114, 'comment_body': '@hayesla this is fixed now with some tweaks in scraper; by adding :func:`get_timerange_with_extractor` in scraper.', 'comment_created': datetime.datetime(2020, 8, 10, 20, 26, 11, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 468168688, 'comment_body': ""This is fixed, we don't have defaulted timerange to one day in `client.py` now."", 'comment_created': datetime.datetime(2020, 8, 10, 20, 31, 28, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 476312854, 'comment_body': 'Is `map_` a good name for this variable? ', 'comment_created': datetime.datetime(2020, 8, 25, 9, 31, 50, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 476313262, 'comment_body': 'What on earth is this comment?!', 'comment_created': datetime.datetime(2020, 8, 25, 9, 32, 29, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 476480023, 'comment_body': 'Changed to `rowdict` now everywhere.', 'comment_created': datetime.datetime(2020, 8, 25, 14, 11, 16, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 476481637, 'comment_body': ""Don't know what are `QRB` (may be queryresponse) here, but it probably mentions about the assumption that all file have `00:00` as start time values, which is used in `fetch` defined differently here to name the downloaded files."", 'comment_created': datetime.datetime(2020, 8, 25, 14, 13, 28, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 478287414, 'comment_body': 'Added many tests with `%H%M` for goes.', 'comment_created': datetime.datetime(2020, 8, 27, 9, 36, 32, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 478288096, 'comment_body': 'Why are these changes in the diff?', 'comment_created': datetime.datetime(2020, 8, 27, 9, 37, 42, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 478288560, 'comment_body': 'I messed up in git, let me check.', 'comment_created': datetime.datetime(2020, 8, 27, 9, 38, 33, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 478292998, 'comment_body': 'If you are having issues, it might be better to checkout the old version of this PR. Squash each commit and then rebase it. ', 'comment_created': datetime.datetime(2020, 8, 27, 9, 45, 44, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 478294978, 'comment_body': 'Resolved now.', 'comment_created': datetime.datetime(2020, 8, 27, 9, 48, 59, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 483029744, 'comment_body': 'Just out of curiosity - why are all the end times for the tests (incl. ones for other instruments) all changed to 2016/01/01 23:59:59 rather than just 2016/01/02? - is this left over from the problem with scraper before?', 'comment_created': datetime.datetime(2020, 9, 3, 14, 38, 22, tzinfo=datetime.timezone.utc), 'commenter': 'hayesla', 'type': 'User'}, {'comment_id': 483036878, 'comment_body': 'This is query response object to check the end time from the responses returned from table.\nEarlier we defaulted it to end date for some clients and enddate - 1 microseconds for some. Now it is consistent to enddate -1 microseconds.', 'comment_created': datetime.datetime(2020, 9, 3, 14, 47, 54, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 484431435, 'comment_body': 'Can we revert this now? ', 'comment_created': datetime.datetime(2020, 9, 7, 13, 27, 2, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 484432663, 'comment_body': 'Can we remove this ""temp"" fix?', 'comment_created': datetime.datetime(2020, 9, 7, 13, 29, 23, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 484475910, 'comment_body': 'yes, restored now.', 'comment_created': datetime.datetime(2020, 9, 7, 14, 49, 33, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 484477485, 'comment_body': ""I feel we should keep it, `SRSClient` is exceptional in terms of having its own `fetch()` method, so if there's generalization later done with `fetch`, this comment can be helpful."", 'comment_created': datetime.datetime(2020, 9, 7, 14, 52, 43, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}]","[{'commit_sha': '72f51b16b50fef3af5f6a8602e7ad079aa0909a6', 'committer_username': 'abhijeetmanhas', 'committer_name': 'Abhijeet Manhas', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 13, 15, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dfdfac63a44dc038c89c8d58b3b11b267ecda372', 'committer_username': 'abhijeetmanhas', 'committer_name': 'Abhijeet Manhas', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 13, 15, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b8461271db2da90aa185c67c46b9ed570a0b93a', 'committer_username': 'abhijeetmanhas', 'committer_name': 'Abhijeet Manhas', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 13, 15, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b9d44388545467619ea106395f867b97441c08e7', 'committer_username': 'abhijeetmanhas', 'committer_name': 'Abhijeet Manhas', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 13, 15, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '31a47bf939373c4d66a9d5c54bfff2f8ed9c79d8', 'committer_username': 'abhijeetmanhas', 'committer_name': 'Abhijeet Manhas', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 13, 15, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b5a1bd5ae10219c593076a01ae6cbba3f709e35', 'committer_username': 'abhijeetmanhas', 'committer_name': 'Abhijeet Manhas', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 13, 15, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9413d4d80defc7da250430050721807924012a97', 'committer_username': 'abhijeetmanhas', 'committer_name': 'Abhijeet Manhas', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 13, 15, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c08ecc729bbaa0d0065b7617f83b8db8ff7fb426', 'committer_username': 'abhijeetmanhas', 'committer_name': 'Abhijeet Manhas', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 13, 15, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e906ca536bfea371cf80ac8f1c69785394196b58', 'committer_username': 'abhijeetmanhas', 'committer_name': 'Abhijeet Manhas', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 13, 15, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c0a845328c6c09468efb0d22b7bb09570aa0703', 'committer_username': 'abhijeetmanhas', 'committer_name': 'Abhijeet Manhas', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 13, 15, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd22c94d4396ec35f1777a4f00f8d34664bc25ae0', 'committer_username': 'abhijeetmanhas', 'committer_name': 'Abhijeet Manhas', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 13, 15, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cdc513db3b2679749cac96534d5da9e613f5f523', 'committer_username': 'abhijeetmanhas', 'committer_name': 'Abhijeet Manhas', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 13, 15, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '80e23e1e8774c9a76d5fb0b361287ef1e490f654', 'committer_username': 'abhijeetmanhas', 'committer_name': 'Abhijeet Manhas', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 13, 15, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '808188bfaf7a72471a1d6c0417be8f0b4fe680ea', 'committer_username': 'abhijeetmanhas', 'committer_name': 'Abhijeet Manhas', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 13, 15, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b4dc6ae531ed339ea0cce7437d3eed97d436e5af', 'committer_username': 'abhijeetmanhas', 'committer_name': 'Abhijeet Manhas', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 13, 15, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a720688a33a47c9db851033fee309162af00aad', 'committer_username': 'abhijeetmanhas', 'committer_name': 'Abhijeet Manhas', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 13, 15, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7cd6b2fef5010b09faba679ba68565368d2c3fe3', 'committer_username': 'abhijeetmanhas', 'committer_name': 'Abhijeet Manhas', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 13, 15, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c8ccb98f9964bf4bec9cb407dfc1541e849f229', 'committer_username': 'abhijeetmanhas', 'committer_name': 'Abhijeet Manhas', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 13, 15, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e27a69725a4cc678512c7196c4e6e93efe1fbb73', 'committer_username': 'abhijeetmanhas', 'committer_name': 'Abhijeet Manhas', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 13, 15, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b3fc5d9a4d4eba8ba973dbaa6a27bf6a58ae233', 'committer_username': 'abhijeetmanhas', 'committer_name': 'Abhijeet Manhas', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 13, 15, 21, tzinfo=datetime.timezone.utc)}]",Abhijeet Manhas,43112347,,User,,51,,254,156
449026920,Made Metadata clients Fido compatible,"<!--
We know that working on sunpy and submitting pull requests takes effort, and we appreciate your time.
Thank you.

Please be aware that everyone has to follow our code of conduct:
https://github.com/sunpy/sunpy/blob/master/CODE_OF_CONDUCT.rst

Also these comments are hidden when you submit this github pull request.

We have several automatic features that run when a pull request is open.
They can appear daunting but do not worry about them!
Here is a brief explanation of them: https://docs.sunpy.org/en/latest/dev_guide/pr_review_procedure.html#continuous-integration.
-->

### Description
<!--
Provide a general description of what your pull request does.

If the pull request closes any open issues you can add this.
If you replace <Issue Number> with a number GitHub will automatically link it.
If it doesn't, please remove the following line.
-->

Fixes #2744 , Fixes #2032 , Fixes #3293, Fixes #3941 , Fixes #2002
Queries like this can be made, and Fido fetch will ignore helio without giving any errors.
```python
from sunpy.net import attrs as a, Fido
from sunpy.net.helio import attrs as ha
res = Fido.search(a.Time('2005/1/3', '2005/1/4'), (ha.MaxRecords(10) & ha.Catalogue('hec') & ha.TableName(b'rhessi_hxr_flare')) | a.Instrument.xrs)
Fido.fetch(res)
```
Infile doctest can be seen for more details.

Similarly queries can be made with HEK too.
",True,4358,https://api.github.com/repos/sunpy/sunpy/pulls/4358,https://github.com/sunpy/sunpy/pull/4358,closed,1162,790,65,45,20,270,1,0,[{'name': 'net'}],2020-07-14 17:55:41+00:00,2020-12-04 07:38:49+00:00,12318188.0,"142 days, 13:43:08","[{'comment_id': 454543066, 'comment_body': 'This is to prevent fido from fetching the hek results?', 'comment_created': datetime.datetime(2020, 7, 14, 18, 1, 39, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 454544744, 'comment_body': 'Yes, it will ignore `HECClient`. If we make `hek` too compatible with Fido, Then we would just need to add an `and`.', 'comment_created': datetime.datetime(2020, 7, 14, 18, 4, 31, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 454544772, 'comment_body': 'This is modeled off the JSOC response? ', 'comment_created': datetime.datetime(2020, 7, 14, 18, 4, 34, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 454545391, 'comment_body': 'Should this not just return whatever it put into it?', 'comment_created': datetime.datetime(2020, 7, 14, 18, 5, 36, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 454545710, 'comment_body': '`HECResponse` is almost `JSOCResponse`, just without `query_atts` and `errors`', 'comment_created': datetime.datetime(2020, 7, 14, 18, 6, 9, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 454546326, 'comment_body': 'We need to come up with a better method.', 'comment_created': datetime.datetime(2020, 7, 14, 18, 7, 13, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 454550348, 'comment_body': 'We can have a class memeber `self.ignore_fetch` which is False by default. For these clients, it can be set to True.', 'comment_created': datetime.datetime(2020, 7, 14, 18, 14, 13, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 454552178, 'comment_body': ""It won't be called ever. You mean return `HECResponse`? It may create confusion. We will discuss more on it."", 'comment_created': datetime.datetime(2020, 7, 14, 18, 17, 11, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 458374941, 'comment_body': 'Added `isMetaClient` as a bool class attribute in `BaseClient`', 'comment_created': datetime.datetime(2020, 7, 21, 20, 41, 34, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 458617066, 'comment_body': 'This changelog should be split. ', 'comment_created': datetime.datetime(2020, 7, 22, 8, 16, 9, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 458617568, 'comment_body': 'I think Fido should be the last import.', 'comment_created': datetime.datetime(2020, 7, 22, 8, 17, 3, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 458617846, 'comment_body': 'Why is this cased the way it is? ', 'comment_created': datetime.datetime(2020, 7, 22, 8, 17, 31, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 458618255, 'comment_body': 'Does this mean a client supplies only metadata?\r\n', 'comment_created': datetime.datetime(2020, 7, 22, 8, 18, 10, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 458623679, 'comment_body': 'Yes, it means it is a metadata client, and by default it is set to false. If true, fido will ignore fetch for it.', 'comment_created': datetime.datetime(2020, 7, 22, 8, 27, 14, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 458634380, 'comment_body': 'Are these not defined on `BaseQueryResponse`?', 'comment_created': datetime.datetime(2020, 7, 22, 8, 44, 45, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 458635054, 'comment_body': 'What caused this change?', 'comment_created': datetime.datetime(2020, 7, 22, 8, 45, 52, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 458636177, 'comment_body': 'This is fix for this https://github.com/sunpy/sunpy/issues/2032 as I mentioned in the PR description.', 'comment_created': datetime.datetime(2020, 7, 22, 8, 47, 40, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 458637364, 'comment_body': 'Will this change the results from #4357?', 'comment_created': datetime.datetime(2020, 7, 22, 8, 49, 35, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 458637631, 'comment_body': 'How much work would it be to remove the byte string for table name?', 'comment_created': datetime.datetime(2020, 7, 22, 8, 50, 1, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 458637663, 'comment_body': 'It is defined as an `abstractmethod`, so need to be defined here.', 'comment_created': datetime.datetime(2020, 7, 22, 8, 50, 5, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 458638786, 'comment_body': 'But do we not have a class where we have created this class 3 times (JSOC, the two metadata clients) and they have the same code? ', 'comment_created': datetime.datetime(2020, 7, 22, 8, 51, 55, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 458639648, 'comment_body': 'One-two liner, if we want to do it, I kept it untouched so that parameters to previous `query` are same as now `search`.\r\nThough I think we should not use byte string here, since no one will wish to specify a byte string in the query. ', 'comment_created': datetime.datetime(2020, 7, 22, 8, 53, 22, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 458640613, 'comment_body': 'Yeah, changing that is a breaking change. I am not sure how we would want to handle this. If we add support to do both ways and raise a warning if you use a byte string. ', 'comment_created': datetime.datetime(2020, 7, 22, 8, 54, 55, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 458641219, 'comment_body': ""Ah I missed that. I can't say I like how this block of code looks. But I don't have any better ideas. "", 'comment_created': datetime.datetime(2020, 7, 22, 8, 55, 52, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 458854378, 'comment_body': ""Not only in jsoc, but we define it in all clients, like `vso`, `Generic` too. They all do the same, i.e., return `self._client`. We can't possibly do it in `BaseQueryResponse` becuase we don't initialize it with a `_client`. "", 'comment_created': datetime.datetime(2020, 7, 22, 14, 53, 39, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 459761589, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 7, 23, 22, 24, 32, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 459761704, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 7, 23, 22, 24, 50, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 459761760, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 7, 23, 22, 24, 55, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 459993322, 'comment_body': '```suggestion\r\n                result = block.client.fetch(block, path=path,\r\n                                                      downloader=downloader,\r\n                                                      wait=False, **kwargs))\r\n                if result is not NotImplemented:\r\n                    reslist.append(result)\r\n```', 'comment_created': datetime.datetime(2020, 7, 24, 11, 19, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 460414954, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 7, 25, 15, 22, 46, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 460576801, 'comment_body': '```suggestion\r\nHEK client queries now return a `~sunpy.net.helio.hec.HEKResponse`, `~sunpy.net.hek.HEKTable` is removed.\r\n```\r\n', 'comment_created': datetime.datetime(2020, 7, 26, 21, 41, 15, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 460576848, 'comment_body': 'Can you check if "":func:"" should in the backticks and if it should be "":func:"" or "":meth"":?', 'comment_created': datetime.datetime(2020, 7, 26, 21, 41, 41, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 460577396, 'comment_body': 'Not sure if HEK/HEK should be in ````', 'comment_created': datetime.datetime(2020, 7, 26, 21, 48, 2, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 460577417, 'comment_body': 'Same with attrs. Maybe """" makes more sense.', 'comment_created': datetime.datetime(2020, 7, 26, 21, 48, 22, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 460577433, 'comment_body': 'Fido should be linked.', 'comment_created': datetime.datetime(2020, 7, 26, 21, 48, 32, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 460577455, 'comment_body': 'Is this still true?', 'comment_created': datetime.datetime(2020, 7, 26, 21, 48, 42, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 460577505, 'comment_body': 'These three clients, maybe could be reworded to match the other clients? ', 'comment_created': datetime.datetime(2020, 7, 26, 21, 49, 13, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 460577573, 'comment_body': 'Does the table not have a columns or colnames?', 'comment_created': datetime.datetime(2020, 7, 26, 21, 49, 53, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 460577654, 'comment_body': 'The return is a `NotImplemented`? I thought it was raised? ', 'comment_created': datetime.datetime(2020, 7, 26, 21, 50, 40, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 460577686, 'comment_body': 'Can this not be a direct import?', 'comment_created': datetime.datetime(2020, 7, 26, 21, 51, 4, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 460577833, 'comment_body': 'Do they still work? ', 'comment_created': datetime.datetime(2020, 7, 26, 21, 52, 52, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 460577849, 'comment_body': 'Why did the port come back?', 'comment_created': datetime.datetime(2020, 7, 26, 21, 53, 14, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 460577965, 'comment_body': 'Why is it not using `@deprecated`?', 'comment_created': datetime.datetime(2020, 7, 26, 21, 54, 44, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 460578086, 'comment_body': 'Will these always be the order of columns? ', 'comment_created': datetime.datetime(2020, 7, 26, 21, 55, 44, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 461143896, 'comment_body': 'Yes, but should I change it to `table.colnames`?', 'comment_created': datetime.datetime(2020, 7, 27, 20, 17, 9, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 461144168, 'comment_body': '`NotImplementedError` is raised. `Notimplemented` is not.', 'comment_created': datetime.datetime(2020, 7, 27, 20, 17, 40, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 461146809, 'comment_body': ""Leave it as keys if they produce the same output. It's shorter at least."", 'comment_created': datetime.datetime(2020, 7, 27, 20, 22, 31, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 461147487, 'comment_body': ""Now we need `hec.attrs` to use them.\r\nHowever, specifying `start_time`= a string won't work. Either we have to do `a.Time(start, end)` or `Time = TimeRange(start,end)`. \r\n\r\nSimilarly for `max_records`. Use `a.helio.MaxRecords(10)` or `MaxRecords=10` in search. However `max_records=10` won't work."", 'comment_created': datetime.datetime(2020, 7, 27, 20, 23, 49, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 461155960, 'comment_body': ""Possibly because of `wsdl.parser` fix, these were the actual first found endpoints. The bug was it earlier didn't return the first found, though the docstrings describes that it should return the first found valid urls."", 'comment_created': datetime.datetime(2020, 7, 27, 20, 39, 48, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 461156263, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 7, 27, 20, 40, 20, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 461156523, 'comment_body': '`meth` is correct, corrected in this pr changelogs.', 'comment_created': datetime.datetime(2020, 7, 27, 20, 40, 47, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 461156579, 'comment_body': 'Done,', 'comment_created': datetime.datetime(2020, 7, 27, 20, 40, 54, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 461156642, 'comment_body': 'Added.', 'comment_created': datetime.datetime(2020, 7, 27, 20, 41, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 461156725, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 27, 20, 41, 11, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 461157028, 'comment_body': 'Not using `..` now.', 'comment_created': datetime.datetime(2020, 7, 27, 20, 41, 43, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 461161574, 'comment_body': 'Using now.', 'comment_created': datetime.datetime(2020, 7, 27, 20, 50, 23, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 461167875, 'comment_body': 'Not true, thus removed now.', 'comment_created': datetime.datetime(2020, 7, 27, 21, 2, 17, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 461168143, 'comment_body': 'yes, output is same though.', 'comment_created': datetime.datetime(2020, 7, 27, 21, 2, 51, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 461194869, 'comment_body': ""Now there's `BaseQueryResponeTable` class, not need to be done in every class."", 'comment_created': datetime.datetime(2020, 7, 27, 21, 59, 3, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 461201702, 'comment_body': 'Thats good. ', 'comment_created': datetime.datetime(2020, 7, 27, 22, 15, 58, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 461219603, 'comment_body': 'I think they should be in the same order as it is returned by jsoc client, not sure. \r\nHowever, it is outdated, I have updated the tests, now the columns are same as before.', 'comment_created': datetime.datetime(2020, 7, 27, 23, 4, 11, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 462133139, 'comment_body': 'Is this a method?', 'comment_created': datetime.datetime(2020, 7, 29, 8, 35, 4, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 462133472, 'comment_body': 'Might as well update VSO too.', 'comment_created': datetime.datetime(2020, 7, 29, 8, 35, 35, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 462133870, 'comment_body': 'WIll these two columns be displayed in the results table now? ', 'comment_created': datetime.datetime(2020, 7, 29, 8, 36, 13, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 462136809, 'comment_body': 'So if a user adds keys, they will be used here? ', 'comment_created': datetime.datetime(2020, 7, 29, 8, 41, 33, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 464003558, 'comment_body': 'Changed to `:func:`', 'comment_created': datetime.datetime(2020, 8, 1, 21, 49, 31, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 464003574, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 1, 21, 49, 39, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 464003622, 'comment_body': 'I have added another section in this example which shows how to display specific keywords.', 'comment_created': datetime.datetime(2020, 8, 1, 21, 50, 16, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 464003720, 'comment_body': 'Yes, now code will work the same way as it worked previously for `a.jsoc.Keys` also specified. I am checking `query_args` in `build_table` for that.', 'comment_created': datetime.datetime(2020, 8, 1, 21, 51, 21, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 465860298, 'comment_body': ""```suggestion\r\n        default_columns = {'T_REC', 'TELESCOP', 'INSTRUME', 'WAVELNTH', 'CAR_ROT'}\r\n        cols_in_table = list(set(self.table.colnames) & default_columns)\r\n```"", 'comment_created': datetime.datetime(2020, 8, 5, 16, 41, 31, tzinfo=datetime.timezone.utc), 'commenter': 'dpshelio', 'type': 'User'}, {'comment_id': 466674407, 'comment_body': ""Now, that's better :joy: "", 'comment_created': datetime.datetime(2020, 8, 6, 20, 42, 1, tzinfo=datetime.timezone.utc), 'commenter': 'dpshelio', 'type': 'User'}, {'comment_id': 467057104, 'comment_body': 'We lose the order of columns in result if we use sets.', 'comment_created': datetime.datetime(2020, 8, 7, 13, 56, 54, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 467073462, 'comment_body': '```python\r\ncols_in_table = [colname for colname in default_columns if colname in self.table.colnames]\r\n```', 'comment_created': datetime.datetime(2020, 8, 7, 14, 24, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 467820082, 'comment_body': 'So we want to remove this, what are our options? ', 'comment_created': datetime.datetime(2020, 8, 10, 10, 40, 51, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 467820494, 'comment_body': '```suggestion\r\n# Next lets load the HEK metadata from Fido result to a HEKRow\r\n```\r\nThis needs rewording. This will make no sense to most people. ', 'comment_created': datetime.datetime(2020, 8, 10, 10, 41, 49, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 467820862, 'comment_body': ""```suggestion\r\n        # TODO: keywords should be set only to '**ALL**' post 3.1\r\n```"", 'comment_created': datetime.datetime(2020, 8, 10, 10, 42, 38, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 467820883, 'comment_body': '```suggestion\r\n        # TODO: this check should also be removed post 3.1.\r\n```', 'comment_created': datetime.datetime(2020, 8, 10, 10, 42, 42, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 467821420, 'comment_body': ""This should be expanded, it's quite blunt. Also Fido and the clients should be linked to their classes. "", 'comment_created': datetime.datetime(2020, 8, 10, 10, 43, 56, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 467821551, 'comment_body': ""```suggestion\r\n# We will query Helio for the 'rhessi_flare_list' table and\r\n```"", 'comment_created': datetime.datetime(2020, 8, 10, 10, 44, 17, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 467821636, 'comment_body': ""```suggestion\r\n# For the same time range, we will query HEK for 'FL' as the\r\n```"", 'comment_created': datetime.datetime(2020, 8, 10, 10, 44, 28, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 467821702, 'comment_body': ""```suggestion\r\n# We will also search JSOC for 'hmi.m_45s' Series.\r\n```"", 'comment_created': datetime.datetime(2020, 8, 10, 10, 44, 35, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 467822252, 'comment_body': 'This needs rewording, I find this confusing.', 'comment_created': datetime.datetime(2020, 8, 10, 10, 45, 53, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 467822613, 'comment_body': '```suggestion\r\n# ""hekresults"" has a lot of columns, we can use ``show()``\r\n```', 'comment_created': datetime.datetime(2020, 8, 10, 10, 46, 40, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 467822697, 'comment_body': '```suggestion\r\n# to specify the column names to be displayed.\r\n```', 'comment_created': datetime.datetime(2020, 8, 10, 10, 46, 50, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 467822803, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2020, 8, 10, 10, 47, 7, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 467823294, 'comment_body': 'Do we need print here or at line 41? If you were to do just `jsocresults.show()`?', 'comment_created': datetime.datetime(2020, 8, 10, 10, 48, 9, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 467823505, 'comment_body': 'There should be some mention of the default columns returned somewhere.', 'comment_created': datetime.datetime(2020, 8, 10, 10, 48, 40, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 467823800, 'comment_body': '```suggestion\r\n# are shown\r\n```', 'comment_created': datetime.datetime(2020, 8, 10, 10, 49, 15, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 467823837, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2020, 8, 10, 10, 49, 18, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 468683402, 'comment_body': ""I can't use `result['hec']` because the `__get_item__` was defined for `UnifiedResponse` to return an instance of `UnifiedResponse`. Thus I'm using `result.get_response('jsoc')`. I return a list if more than one jsoc records are there, else a `JSOCResponse`."", 'comment_created': datetime.datetime(2020, 8, 11, 15, 48, 1, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 468683505, 'comment_body': 'Reworded.', 'comment_created': datetime.datetime(2020, 8, 11, 15, 48, 10, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 468683605, 'comment_body': 'Expanded and linked.', 'comment_created': datetime.datetime(2020, 8, 11, 15, 48, 22, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 468683832, 'comment_body': 'Added in the example.', 'comment_created': datetime.datetime(2020, 8, 11, 15, 48, 44, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 468684429, 'comment_body': ""I'm also explaining the default jsoc columns and how to show all columns so doing in a new block seems better to me."", 'comment_created': datetime.datetime(2020, 8, 11, 15, 49, 38, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 468692675, 'comment_body': 'So we replace 0 with the name of the client?', 'comment_created': datetime.datetime(2020, 8, 11, 16, 1, 52, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 468694884, 'comment_body': '> \r\n```suggestion\r\n# Now we will download the searched records. Since HEK and HELIO\r\n```', 'comment_created': datetime.datetime(2020, 8, 11, 16, 5, 28, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 468695177, 'comment_body': ""```suggestion\r\n# clients don't provide files, `Fido.fetch` will\r\n```"", 'comment_created': datetime.datetime(2020, 8, 11, 16, 5, 54, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 468695395, 'comment_body': '```suggestion\r\n# ignore them and only download files from JSOC.\r\n```', 'comment_created': datetime.datetime(2020, 8, 11, 16, 6, 14, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 468696200, 'comment_body': '```suggestion\r\n# default columns shown by a JSOC result.\r\n```', 'comment_created': datetime.datetime(2020, 8, 11, 16, 7, 24, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 468696333, 'comment_body': '```suggestion\r\n# To display all columns from a JSOC result, we can use ``show()``\r\n```', 'comment_created': datetime.datetime(2020, 8, 11, 16, 7, 38, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 468696731, 'comment_body': '```suggestion\r\n# data for this time from the NOAA Space Weather Prediction Center (SWPC).\r\n```', 'comment_created': datetime.datetime(2020, 8, 11, 16, 8, 17, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 468697002, 'comment_body': ""```suggestion\r\n# Next let's retrieve `~sunpy.net.hek.HEKResponse` from the Fido result\r\n```"", 'comment_created': datetime.datetime(2020, 8, 11, 16, 8, 43, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 468697132, 'comment_body': '```suggestion\r\n# Lets plot everything together.\r\n```', 'comment_created': datetime.datetime(2020, 8, 11, 16, 8, 53, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 468697810, 'comment_body': 'Might want to mention its case insensitive.', 'comment_created': datetime.datetime(2020, 8, 11, 16, 9, 53, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 468698172, 'comment_body': 'Do tests exist for this already?\r\n\r\nWe should add a test to make sure it works for each client.', 'comment_created': datetime.datetime(2020, 8, 11, 16, 10, 25, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 468779436, 'comment_body': 'yes. both `jsoc` and `JSOCClient` will work.\r\nIt is helpful if there are multiple clients in fido results, because we may not like to count the index to get individual qresponse.', 'comment_created': datetime.datetime(2020, 8, 11, 18, 27, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 468794964, 'comment_body': 'Mentioned.', 'comment_created': datetime.datetime(2020, 8, 11, 18, 51, 3, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 468796081, 'comment_body': ""This method existed earlier. Now question is, should I deprecate/remove its old functionality?\r\nThat allowed to retrieve responses based on index. Currently both things works in my PR.\r\nOr should I add a new method instead of `get_response` like `fido_results.view('hek')` to do this?"", 'comment_created': datetime.datetime(2020, 8, 11, 18, 53, 9, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 468804634, 'comment_body': 'Would there be a reason to still need to use an index? If not, deprecate it and I like the concept of `view` but will have to see what others think.', 'comment_created': datetime.datetime(2020, 8, 11, 19, 9, 10, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 470527229, 'comment_body': 'The more I look at `get_response`, it just seems too long and mis-named. We should come up with something better.', 'comment_created': datetime.datetime(2020, 8, 14, 9, 52, 22, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 475250359, 'comment_body': ""Changed to `results['hek']` to get all hek responses from fido. If more than one results are from hek, then it returns a `UnifiedResponse`. If only one, then `HEKResponse` is returned. This is similar in all other clients.\r\nAlso, users can do `results['hek',1]` to get second `HEKResponse` and so on."", 'comment_created': datetime.datetime(2020, 8, 23, 18, 29, 36, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 475250370, 'comment_body': 'See https://github.com/sunpy/sunpy/pull/4358#discussion_r475250359', 'comment_created': datetime.datetime(2020, 8, 23, 18, 29, 44, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 475253935, 'comment_body': ""Instead of `results['hek'][1]`?"", 'comment_created': datetime.datetime(2020, 8, 23, 19, 7, 48, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 475268155, 'comment_body': ""We can also do `results['hek'][1]` both will work."", 'comment_created': datetime.datetime(2020, 8, 23, 21, 13, 30, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 475715328, 'comment_body': 'Are there tests for new behaviour? ', 'comment_created': datetime.datetime(2020, 8, 24, 15, 50, 52, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 475716183, 'comment_body': 'What happens now?', 'comment_created': datetime.datetime(2020, 8, 24, 15, 52, 7, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 475717091, 'comment_body': 'Is `results` a `UnifiedResponse`?', 'comment_created': datetime.datetime(2020, 8, 24, 15, 53, 34, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 475718139, 'comment_body': ""I am not sure I am comfortable with `results['hek'][1]` being the same as `results['hek',1]`"", 'comment_created': datetime.datetime(2020, 8, 24, 15, 55, 3, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 476469684, 'comment_body': 'yes, the `__getitem__` returns a `BaseQueryResponse` instance if there is record from only one client in a fido result, as we decided in the meeting.', 'comment_created': datetime.datetime(2020, 8, 25, 13, 58, 4, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 476470034, 'comment_body': 'An empty `unifiedResponse` is returned, since no client name is ""saldkal""', 'comment_created': datetime.datetime(2020, 8, 25, 13, 58, 35, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 476470730, 'comment_body': 'Have to add tests yet.', 'comment_created': datetime.datetime(2020, 8, 25, 13, 59, 30, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 476472360, 'comment_body': 'Can you just assert that in the test as well?', 'comment_created': datetime.datetime(2020, 8, 25, 14, 1, 43, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 476472618, 'comment_body': 'Might as well repurpose that test then. ', 'comment_created': datetime.datetime(2020, 8, 25, 14, 2, 4, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 476723237, 'comment_body': 'done.', 'comment_created': datetime.datetime(2020, 8, 25, 20, 39, 13, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 476723301, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 25, 20, 39, 22, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 476723369, 'comment_body': 'added.', 'comment_created': datetime.datetime(2020, 8, 25, 20, 39, 30, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 476723711, 'comment_body': 'Thanks.', 'comment_created': datetime.datetime(2020, 8, 25, 20, 40, 6, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 484415967, 'comment_body': 'HEK client should be a sphinx interlink.', 'comment_created': datetime.datetime(2020, 9, 7, 12, 55, 32, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 484416544, 'comment_body': 'I think it might be worth mentioning the ""show"" method to replace this. ', 'comment_created': datetime.datetime(2020, 9, 7, 12, 56, 41, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 484416859, 'comment_body': '```suggestion\r\n`~sunpy.net.hek.attrs.Time` is deprecated; `~sunpy.net.attrs.Time` should be used instead.\r\n```', 'comment_created': datetime.datetime(2020, 9, 7, 12, 57, 18, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 484417225, 'comment_body': 'Do we have a ""show"" section that can replace this?', 'comment_created': datetime.datetime(2020, 9, 7, 12, 58, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 484420971, 'comment_body': '```suggestion\r\nThis example shows how to search and retrieve metadata using `~sunpy.net.Fido` from\r\n```', 'comment_created': datetime.datetime(2020, 9, 7, 13, 5, 33, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 484421107, 'comment_body': '```suggestion\r\nand `~sunpy.net.jsoc.JSOCClient`. It also shows how to display desired columns from the result.\r\n```', 'comment_created': datetime.datetime(2020, 9, 7, 13, 5, 52, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 484421242, 'comment_body': '```suggestion\r\n# limit the total number of records to 5.\r\n```', 'comment_created': datetime.datetime(2020, 9, 7, 13, 6, 9, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 484421355, 'comment_body': ""```suggestion\r\n# event type and 'PeakFlux' greater than 1000.\r\n```"", 'comment_created': datetime.datetime(2020, 9, 7, 13, 6, 22, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 484421428, 'comment_body': ""```suggestion\r\n# We will also search JSOC for 'hmi.m_45s' series.\r\n```"", 'comment_created': datetime.datetime(2020, 9, 7, 13, 6, 33, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 484421693, 'comment_body': 'I think there might need to be more description here on the structure of the results. ', 'comment_created': datetime.datetime(2020, 9, 7, 13, 7, 6, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 484422083, 'comment_body': ""```suggestion\r\n# We can index these results using the client's name (which is case-insensitive).\r\n```"", 'comment_created': datetime.datetime(2020, 9, 7, 13, 7, 49, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 484422383, 'comment_body': ""```suggestion\r\nhec_results, hek_results, jsoc_results = results['hec'], results['hek'], results['jsoc']\r\n```"", 'comment_created': datetime.datetime(2020, 9, 7, 13, 8, 27, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 484423055, 'comment_body': ""```suggestion\r\n# The results from a metadata search could have up to 100 columns.\r\n# As a result, you can use use ``show()`` to specify the column names you want to display.\r\nhek_table = hek_results.show('event_peaktime', 'obs_instrument', 'fl_peakflux')\r\nprint(hek_table)\r\n```"", 'comment_created': datetime.datetime(2020, 9, 7, 13, 9, 54, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 484423667, 'comment_body': ""```suggestion\r\n# The results from JSOC have a default set of columns to show and are\r\n# ``['T_REC', 'TELESCOP', 'INSTRUME', 'WAVELNTH', 'CAR_ROT']``.\r\n# To display all of the columns, we can use ``show()``without passings any arguments.\r\nprint(jsoc_results)\r\njsoc_table = jsoc_results()\r\nprint(jsoc_table)\r\n```"", 'comment_created': datetime.datetime(2020, 9, 7, 13, 11, 7, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 484478836, 'comment_body': ""no, it is not in `jsoc.rst`. It's in an example. I'll add it here too."", 'comment_created': datetime.datetime(2020, 9, 7, 14, 55, 23, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 485746600, 'comment_body': '```suggestion\r\n        valid_cols = [col for col in cols if col in tablecols]\r\n```', 'comment_created': datetime.datetime(2020, 9, 9, 16, 23, 2, tzinfo=datetime.timezone.utc), 'commenter': 'dpshelio', 'type': 'User'}, {'comment_id': 485754479, 'comment_body': '```suggestion\r\n        if self.table:\r\n            return len(self.table)\r\n        else:\r\n            return 0\r\n```\r\nso if self.table is 0, or False, or None... then it still works.', 'comment_created': datetime.datetime(2020, 9, 9, 16, 32, 9, tzinfo=datetime.timezone.utc), 'commenter': 'dpshelio', 'type': 'User'}, {'comment_id': 485755314, 'comment_body': '```suggestion\r\n        warn(f""The {client_name} does not support response block properties."",\r\n```', 'comment_created': datetime.datetime(2020, 9, 9, 16, 33, 10, tzinfo=datetime.timezone.utc), 'commenter': 'dpshelio', 'type': 'User'}, {'comment_id': 485757430, 'comment_body': 'Dejavu! \r\n```suggestion\r\n        valid_cols = [col for col in cols if col in tablecols]\r\n```', 'comment_created': datetime.datetime(2020, 9, 9, 16, 35, 37, tzinfo=datetime.timezone.utc), 'commenter': 'dpshelio', 'type': 'User'}, {'comment_id': 485760097, 'comment_body': 'I\'ll write it so it follows a ""natural"" order, 0, 1, more than 1:\r\n```suggestion\r\n        if not len(ret):\r\n            raise IndexError(""No records found for the given index."")\r\n        elif len(ret) == 1:\r\n            return ret[0]\r\n        else:\r\n            return UnifiedResponse(*ret)\r\n\r\n```', 'comment_created': datetime.datetime(2020, 9, 9, 16, 38, 37, tzinfo=datetime.timezone.utc), 'commenter': 'dpshelio', 'type': 'User'}, {'comment_id': 485761877, 'comment_body': 'Very typical ""smell"", the `if` is already returning `True` or `False`, so don\'t need to replicate it.\r\n```suggestion\r\n    def collides(self, other):\r\n        return isinstance(other, _ComparisonParamAttrWrapper)\r\n```', 'comment_created': datetime.datetime(2020, 9, 9, 16, 40, 40, tzinfo=datetime.timezone.utc), 'commenter': 'dpshelio', 'type': 'User'}, {'comment_id': 485765521, 'comment_body': ""```suggestion\r\n        qr = tuple(x for x in query if not isinstance(x, attrs.EventType))\r\n```\r\nShouldn't this work too?"", 'comment_created': datetime.datetime(2020, 9, 9, 16, 45, 5, tzinfo=datetime.timezone.utc), 'commenter': 'dpshelio', 'type': 'User'}, {'comment_id': 485768172, 'comment_body': '```suggestion\r\n        if table:\r\n```\r\nunless you want to differentiate with `0`, `False`', 'comment_created': datetime.datetime(2020, 9, 9, 16, 48, 24, tzinfo=datetime.timezone.utc), 'commenter': 'dpshelio', 'type': 'User'}, {'comment_id': 485822933, 'comment_body': 'too many indentations... that smells like we are doing something wrong (we may not, though...)\r\nProbably we need to change how `taverna_parser` works.', 'comment_created': datetime.datetime(2020, 9, 9, 18, 20, 4, tzinfo=datetime.timezone.utc), 'commenter': 'dpshelio', 'type': 'User'}, {'comment_id': 485824115, 'comment_body': 'Same structure of the for loop with an if.\r\n```suggestion\r\n        cols_in_table = [colname for colname in default_columns if colname in self.table.colnames]\r\n```', 'comment_created': datetime.datetime(2020, 9, 9, 18, 22, 9, tzinfo=datetime.timezone.utc), 'commenter': 'dpshelio', 'type': 'User'}, {'comment_id': 485825162, 'comment_body': 'is the warning an exception or a warning? and if so... which bit of the code below does it? only `search_metadata`? Does the code still keep running the rest of the test?', 'comment_created': datetime.datetime(2020, 9, 9, 18, 24, 7, tzinfo=datetime.timezone.utc), 'commenter': 'dpshelio', 'type': 'User'}, {'comment_id': 486271995, 'comment_body': 'yes works, done.', 'comment_created': datetime.datetime(2020, 9, 10, 11, 45, 15, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 486382845, 'comment_body': 'I have added it in the file.', 'comment_created': datetime.datetime(2020, 9, 10, 14, 20, 27, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 486383076, 'comment_body': 'I have added some description below it.', 'comment_created': datetime.datetime(2020, 9, 10, 14, 20, 45, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 486384959, 'comment_body': ""yeah, though I have removed `is not None` so now it looks bit clean.\r\nHowever the indendations seems necessary. What we are doing is, checking if the object exists and iterating over its subobjects, and doing this again till we get `end_point`.\r\n \r\nIf it doesn't happen even one time for whole loops, we return `fail()`. Logic seems correct to me."", 'comment_created': datetime.datetime(2020, 9, 10, 14, 23, 12, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 486385957, 'comment_body': 'it is a depcration warning due to just `search_metadata`. Yes, this test should be removed after next release. Yes, code still supports `search_metadata` with a warning.', 'comment_created': datetime.datetime(2020, 9, 10, 14, 24, 24, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 486405778, 'comment_body': 'I wonder if these doc tests will pass. ', 'comment_created': datetime.datetime(2020, 9, 10, 14, 49, 35, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 486407123, 'comment_body': ""```suggestion\r\n# Now we will download the searched records. Since HEK and HELIO\r\n# clients don't provide files, `Fido.fetch` will\r\n# ignore them and only download files from JSOC.\r\n```"", 'comment_created': datetime.datetime(2020, 9, 10, 14, 51, 11, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 486407453, 'comment_body': '```suggestion\r\n# ``results`` is a `~sunpy.net.fido_factory.UnifiedResponse` object that\r\n# contains records returned from querying various clients by ""Fido.search"".\r\nprint(results)\r\n```', 'comment_created': datetime.datetime(2020, 9, 10, 14, 51, 38, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 486468399, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 9, 10, 16, 15, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 486468480, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 9, 10, 16, 15, 8, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 496658858, 'comment_body': '```suggestion\r\nQueries to `~sunpy.net.hek.HEKClient` now return a `~sunpy.net.hek.HEKResponse`, `~sunpy.net.hek.HEKTable` is removed. This is to enable compatibility with ``Fido``.\r\n```', 'comment_created': datetime.datetime(2020, 9, 29, 12, 0, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 496659239, 'comment_body': 'Is it possible to deprecate this rather than just remove it or is that too much work?', 'comment_created': datetime.datetime(2020, 9, 29, 12, 0, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 496659493, 'comment_body': '```suggestion\r\n    >>> result = client.search(a.Time(tstart,tend), a.hek.EventType(event_type))  # doctest: +REMOTE_DATA\r\n```', 'comment_created': datetime.datetime(2020, 9, 29, 12, 1, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 496659873, 'comment_body': 'Does this example use `hek` anywhere now?\r\n```suggestion\r\n    >>> from sunpy.net import attrs as a\r\n```', 'comment_created': datetime.datetime(2020, 9, 29, 12, 2, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 496660048, 'comment_body': ""```suggestion\r\n    >>> result = client.search(a.Time(tstart,tend), a.hek.EventType(event_type), a.hek.FRM.Name == 'SSW Latest Events')  # doctest: +REMOTE_DATA\r\n```"", 'comment_created': datetime.datetime(2020, 9, 29, 12, 2, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 496660119, 'comment_body': ""```suggestion\r\n    >>> result = client.search(a.Time(tstart,tend), a.hek.EventType(event_type), a.hek.FRM.Name != 'SSW Latest Events')  # doctest: +REMOTE_DATA\r\n```"", 'comment_created': datetime.datetime(2020, 9, 29, 12, 2, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 496660424, 'comment_body': '```suggestion\r\n    >>> result = client.search(a.Time(tstart,tend), a.hek.EventType(event_type), (a.hek.Event.Coord1 > 50) or (a.hek.FL.PeakFlux > 1000.0))  # doctest: +REMOTE_DATA\r\n```', 'comment_created': datetime.datetime(2020, 9, 29, 12, 3, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 496660488, 'comment_body': '```suggestion\r\n    >>> result = client.search(a.Time(tstart,tend), a.hek.EventType(event_type), (a.hek.Event.Coord1 > 50) and (a.hek.FL.PeakFlux > 1000.0))  # doctest: +REMOTE_DATA\r\n```', 'comment_created': datetime.datetime(2020, 9, 29, 12, 3, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 496660558, 'comment_body': '```suggestion\r\n    >>> result = client.search(a.Time(tstart,tend), a.hek.EventType(event_type))  # doctest: +REMOTE_DATA\r\n```', 'comment_created': datetime.datetime(2020, 9, 29, 12, 3, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 496661860, 'comment_body': '```suggestion\r\nTo display all of the columns, we can use ``show()`` without passing any arguments.\r\n```', 'comment_created': datetime.datetime(2020, 9, 29, 12, 5, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 496662132, 'comment_body': '```suggestion\r\n# We can look at the values of specific keywords from this result.\r\n```', 'comment_created': datetime.datetime(2020, 9, 29, 12, 5, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 496663515, 'comment_body': 'I am not a great fan of using this email address in our examples, if people copy it it might cause problems for the JSOC folk. Do you think modifying this example to either use the VSO for fetch or not to fetch at all would substantially detract from it?', 'comment_created': datetime.datetime(2020, 9, 29, 12, 8, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 496665874, 'comment_body': 'would it not be better to transition the docs to using Fido?', 'comment_created': datetime.datetime(2020, 9, 29, 12, 12, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 496669631, 'comment_body': 'these should be fully  qualified so links work?', 'comment_created': datetime.datetime(2020, 9, 29, 12, 18, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 496670866, 'comment_body': 'Looks like this class is missing tests or did some builds fail?', 'comment_created': datetime.datetime(2020, 9, 29, 12, 21, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 496671556, 'comment_body': 'We really need to make sure we document this somewhere so people know how to name their classes.', 'comment_created': datetime.datetime(2020, 9, 29, 12, 22, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 496672885, 'comment_body': ""This block seems repetitive. Why don't you construct a list and then iterate over it even if it only has one element? This would save you duplicating the fetch and NotImplemented code?"", 'comment_created': datetime.datetime(2020, 9, 29, 12, 24, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 496674305, 'comment_body': ""Should have a docstring just for completeness just explaining it's a noop"", 'comment_created': datetime.datetime(2020, 9, 29, 12, 26, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 496674971, 'comment_body': 'same as HEK', 'comment_created': datetime.datetime(2020, 9, 29, 12, 27, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 523413434, 'comment_body': 'Or just print `res`??', 'comment_created': datetime.datetime(2020, 11, 14, 12, 14, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 523413506, 'comment_body': 'Or we can do the email address hack in conf.py as we discussed in the community call.', 'comment_created': datetime.datetime(2020, 11, 14, 12, 14, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 523762325, 'comment_body': 'Added it back.', 'comment_created': datetime.datetime(2020, 11, 15, 13, 56, 29, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 523763053, 'comment_body': 'I have added it to docs/conf and access it via os.envirom.', 'comment_created': datetime.datetime(2020, 11, 15, 14, 3, 1, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 523764044, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2020, 11, 15, 14, 11, 11, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 523764197, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2020, 11, 15, 14, 12, 14, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 523764228, 'comment_body': 'There are not direct tests for this that I can find.', 'comment_created': datetime.datetime(2020, 11, 15, 14, 12, 34, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 523764332, 'comment_body': 'Want me to add some? I think we have some of it covered by client tests.', 'comment_created': datetime.datetime(2020, 11, 15, 14, 13, 42, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 523764428, 'comment_body': 'I added this to a todo in https://github.com/sunpy/sunpy/pull/4387', 'comment_created': datetime.datetime(2020, 11, 15, 14, 14, 23, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 523764719, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2020, 11, 15, 14, 16, 37, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 523764729, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2020, 11, 15, 14, 16, 42, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 523764816, 'comment_body': 'I did both.', 'comment_created': datetime.datetime(2020, 11, 15, 14, 17, 35, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 523767133, 'comment_body': 'I have fixed this in a way you will not like. ', 'comment_created': datetime.datetime(2020, 11, 15, 14, 36, 13, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 523778818, 'comment_body': 'Do we want to update this with fido instead now?', 'comment_created': datetime.datetime(2020, 11, 15, 16, 11, 29, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 525231842, 'comment_body': 'Agreed', 'comment_created': datetime.datetime(2020, 11, 17, 15, 11, 53, tzinfo=datetime.timezone.utc), 'commenter': 'kakirastern', 'type': 'User'}, {'comment_id': 526265304, 'comment_body': 'I suggest we set `jsoc_email = os.environ[""JSOC_EMAIL""])` as a variable before this call with an explanation to the reader of what they should override it to be when running the example.', 'comment_created': datetime.datetime(2020, 11, 18, 17, 19, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 527129660, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2020, 11, 19, 19, 6, 10, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 527254249, 'comment_body': 'I do love ""the Fido"", but it\'s probably more correct to just say Fido lol.\r\n```suggestion\r\nThere are two key features you need to know in order to make use of the full power of Fido.\r\n```', 'comment_created': datetime.datetime(2020, 11, 19, 22, 45, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 527254573, 'comment_body': ""```suggestion\r\nTo explain this, let's have a closer look at ``attrs.hek``.\r\n```"", 'comment_created': datetime.datetime(2020, 11, 19, 22, 45, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 527262035, 'comment_body': '```suggestion\r\n# and then load the first row from HEK results into ``flares_hek``.\r\n```', 'comment_created': datetime.datetime(2020, 11, 19, 23, 1, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 527263191, 'comment_body': 'undo this?', 'comment_created': datetime.datetime(2020, 11, 19, 23, 4, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 527264276, 'comment_body': ""Why has this changed? I didn't think we changed the slicing semantics for numbers?\r\n\r\nLooking at the changed in `fido_factory.py` I don't understand this. :worried: "", 'comment_created': datetime.datetime(2020, 11, 19, 23, 6, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 527265062, 'comment_body': ""I realise this is a copy paste, but it's probably overkill for a single attr class?"", 'comment_created': datetime.datetime(2020, 11, 19, 23, 8, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 527265569, 'comment_body': '```suggestion\r\n        This is a no operation function as this client does not download data.\r\n```', 'comment_created': datetime.datetime(2020, 11, 19, 23, 10, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 527266394, 'comment_body': 'is there one too many bracket here or just the indentation is wrong?', 'comment_created': datetime.datetime(2020, 11, 19, 23, 12, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 527267217, 'comment_body': '```suggestion\r\nos.environ[""JSOC_EMAIL""] = ""jsoc@cadair.com""\r\n```', 'comment_created': datetime.datetime(2020, 11, 19, 23, 14, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 527582383, 'comment_body': ""The address we are using in tests at the moment is `jsoc@cadair.com`, it's a blackhole."", 'comment_created': datetime.datetime(2020, 11, 20, 10, 2, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 527583847, 'comment_body': 'This error message is too technical. What we are really asserting here is a subset of allowed attr classes?', 'comment_created': datetime.datetime(2020, 11, 20, 10, 5, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 527584044, 'comment_body': '```suggestion\r\n            table = str.encode(table)\r\n```', 'comment_created': datetime.datetime(2020, 11, 20, 10, 5, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 527584814, 'comment_body': ""```suggestion\r\n        start_time = qrdict['Time'].start\r\n        end_time = qrdict['Time'].end\r\n```"", 'comment_created': datetime.datetime(2020, 11, 20, 10, 7, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 527585224, 'comment_body': '```suggestion\r\n        This is a no operation function as this client does not download data.', 'comment_created': datetime.datetime(2020, 11, 20, 10, 8, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 527586319, 'comment_body': 'We should not be ignoring this globally, if another server starts making unverified https requests we should be erroring. I think you should revert this change back to a mark in the helio tests.', 'comment_created': datetime.datetime(2020, 11, 20, 10, 10, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 527589547, 'comment_body': ""2.1? shouldn't this be remove after 3?"", 'comment_created': datetime.datetime(2020, 11, 20, 10, 15, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 527590099, 'comment_body': ""```suggestion\r\n        # TODO: keywords should be set only to '**ALL**' post 3.0.\r\n```"", 'comment_created': datetime.datetime(2020, 11, 20, 10, 16, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 527590262, 'comment_body': '```suggestion\r\n        # TODO: this check should also be removed post 3.0.\r\n```', 'comment_created': datetime.datetime(2020, 11, 20, 10, 16, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 527590722, 'comment_body': ""```suggestion\r\n                                          a.jsoc.Series('aia.lev1_euv_12s'), a.Wavelength(304*u.AA))\r\n```"", 'comment_created': datetime.datetime(2020, 11, 20, 10, 17, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 527599515, 'comment_body': 'What would you prefer?', 'comment_created': datetime.datetime(2020, 11, 20, 10, 32, 32, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 527606814, 'comment_body': 'Just define the Time Attr as:\r\n\r\n```suggestion\r\nclass Time(a.Time, _DeprecatedAttr):\r\n    pass\r\n```\r\n?', 'comment_created': datetime.datetime(2020, 11, 20, 10, 44, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 528172216, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2020, 11, 21, 9, 13, 43, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 528172238, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2020, 11, 21, 9, 14, 5, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 528172280, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2020, 11, 21, 9, 14, 19, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 528172304, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2020, 11, 21, 9, 14, 33, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 528172333, 'comment_body': 'Why would it not change?', 'comment_created': datetime.datetime(2020, 11, 21, 9, 14, 46, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 528172400, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2020, 11, 21, 9, 15, 19, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 528172450, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2020, 11, 21, 9, 15, 42, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 528172557, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2020, 11, 21, 9, 16, 45, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 528172594, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2020, 11, 21, 9, 17, 1, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 528172598, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2020, 11, 21, 9, 17, 6, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 528172656, 'comment_body': 'Looks like it?', 'comment_created': datetime.datetime(2020, 11, 21, 9, 17, 32, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 528172703, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2020, 11, 21, 9, 18, 1, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 528172732, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2020, 11, 21, 9, 18, 14, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 528172737, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2020, 11, 21, 9, 18, 19, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 528172750, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2020, 11, 21, 9, 18, 39, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 528172989, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2020, 11, 21, 9, 20, 34, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 528173035, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2020, 11, 21, 9, 21, 20, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 528173073, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2020, 11, 21, 9, 21, 33, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 528173082, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2020, 11, 21, 9, 21, 45, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 528173165, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2020, 11, 21, 9, 22, 29, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 528320909, 'comment_body': ""We aren't using figure anymore?"", 'comment_created': datetime.datetime(2020, 11, 22, 11, 24, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 528321659, 'comment_body': 'We should upstream this.', 'comment_created': datetime.datetime(2020, 11, 22, 11, 30, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 528322515, 'comment_body': 'This needs a breaking changelog entry.', 'comment_created': datetime.datetime(2020, 11, 22, 11, 38, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 528325455, 'comment_body': 'Bad merge this.', 'comment_created': datetime.datetime(2020, 11, 22, 12, 3, 39, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 528325523, 'comment_body': 'We should, I was looking at the test logs and saw the progress bar and wanted to turn it off in bulk. This was my quick patch.', 'comment_created': datetime.datetime(2020, 11, 22, 12, 4, 4, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 528328630, 'comment_body': '```suggestion\r\n``tstart`` and ``tend`` defines the start and end times of the query, and ``event_type`` specifies the event type which in this example we are searching for flares defined as ``FL``.\r\n```', 'comment_created': datetime.datetime(2020, 11, 22, 12, 30, 37, tzinfo=datetime.timezone.utc), 'commenter': 'hayesla', 'type': 'User'}, {'comment_id': 528328646, 'comment_body': '```suggestion\r\n\r\n```', 'comment_created': datetime.datetime(2020, 11, 22, 12, 30, 56, tzinfo=datetime.timezone.utc), 'commenter': 'hayesla', 'type': 'User'}, {'comment_id': 528328873, 'comment_body': 'maybe should mention why ``result[0]`` is indexed here ', 'comment_created': datetime.datetime(2020, 11, 22, 12, 32, 49, tzinfo=datetime.timezone.utc), 'commenter': 'hayesla', 'type': 'User'}, {'comment_id': 528329338, 'comment_body': 'what is `Result 10`? ', 'comment_created': datetime.datetime(2020, 11, 22, 12, 36, 54, tzinfo=datetime.timezone.utc), 'commenter': 'hayesla', 'type': 'User'}, {'comment_id': 528329426, 'comment_body': '```suggestion\r\nThe VSO records are for full disk AIA 193 angstrom images between the start and end times of this event.\r\n```', 'comment_created': datetime.datetime(2020, 11, 22, 12, 37, 37, tzinfo=datetime.timezone.utc), 'commenter': 'hayesla', 'type': 'User'}, {'comment_id': 528330363, 'comment_body': ""I would maybe describe briefly what Helio is and link it? https://www.helio-vo.eu/\r\n\r\n```suggestion\r\n# We will query the Heliophysics Integrated Observatory (`HELIO <https://www.helio-vo.eu/>`_) for the 'rhessi_flare_list' table.\r\n```"", 'comment_created': datetime.datetime(2020, 11, 22, 12, 44, 23, tzinfo=datetime.timezone.utc), 'commenter': 'hayesla', 'type': 'User'}, {'comment_id': 528331458, 'comment_body': ""I'm probably missing something, but why are these tests removed? "", 'comment_created': datetime.datetime(2020, 11, 22, 12, 52, 36, tzinfo=datetime.timezone.utc), 'commenter': 'hayesla', 'type': 'User'}, {'comment_id': 528332548, 'comment_body': 'Think I tend to agree with @nabobalis as recall discussion carried over from summer', 'comment_created': datetime.datetime(2020, 11, 22, 13, 1, 53, tzinfo=datetime.timezone.utc), 'commenter': 'kakirastern', 'type': 'User'}, {'comment_id': 528332667, 'comment_body': 'Ah, I see. If we have some client tests then we should delegate those test cases there instead...', 'comment_created': datetime.datetime(2020, 11, 22, 13, 2, 55, tzinfo=datetime.timezone.utc), 'commenter': 'kakirastern', 'type': 'User'}, {'comment_id': 528333045, 'comment_body': '@nabobalis ', 'comment_created': datetime.datetime(2020, 11, 22, 13, 5, 51, tzinfo=datetime.timezone.utc), 'commenter': 'kakirastern', 'type': 'User'}, {'comment_id': 528333142, 'comment_body': 'It could be due to the existing client tests covering these test cases already: https://github.com/sunpy/sunpy/pull/4358/files#r523764332', 'comment_created': datetime.datetime(2020, 11, 22, 13, 6, 47, tzinfo=datetime.timezone.utc), 'commenter': 'kakirastern', 'type': 'User'}, {'comment_id': 528335257, 'comment_body': 'Ah, I see. Makes sense. ', 'comment_created': datetime.datetime(2020, 11, 22, 13, 24, 49, tzinfo=datetime.timezone.utc), 'commenter': 'kakirastern', 'type': 'User'}, {'comment_id': 528336398, 'comment_body': '```suggestion\r\nHere, ``result[0][10]`` is the HEK entry generated by the ""Flare Detective"" automated flare detection algorithm running on the AIA 193 angstrom waveband.\r\n```', 'comment_created': datetime.datetime(2020, 11, 22, 13, 34, 22, tzinfo=datetime.timezone.utc), 'commenter': 'hayesla', 'type': 'User'}, {'comment_id': 530524571, 'comment_body': 'These were removed since they check that the progress bar of parfive was hidden and these were a mistake.', 'comment_created': datetime.datetime(2020, 11, 25, 17, 4, 42, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 533279203, 'comment_body': 'This is really the return value of `search()` am I correct?\r\n\r\n```suggestion\r\nQueries made with `~sunpy.net.hek.HEKClient.search` now return a `~sunpy.net.hek.HEKResponse`, `~sunpy.net.hek.HEKTable` is removed. This is to enable compatibility with ``Fido``.\r\n```', 'comment_created': datetime.datetime(2020, 12, 1, 10, 17, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 533281302, 'comment_body': '```suggestion\r\nPreviously slicing a `~sunpy.net.fido_factory.UnifiedResponse` down to length one returned another `~sunpy.net.fido_factory.UnifiedResponse`, now it will return a `~sunpy.net.base_client.BaseQueryResponse` object.\r\n```', 'comment_created': datetime.datetime(2020, 12, 1, 10, 19, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 533282966, 'comment_body': ""This is more a general thought. I am not sure we want to use roles like `:meth:` in the changelog as it's often rendered by rst parsers which aren't sphinx. Specifically, GitHb and pandoc."", 'comment_created': datetime.datetime(2020, 12, 1, 10, 21, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 534521610, 'comment_body': '```suggestion\r\n# Note that JSOC needs an email address, if you want to run this, you\r\n# must supply your own email.\r\n```', 'comment_created': datetime.datetime(2020, 12, 2, 22, 22, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 534522662, 'comment_body': 'I think this can be:\r\n```suggestion\r\n        yield self\r\n```\r\nthought it should probably have a test to make sure.', 'comment_created': datetime.datetime(2020, 12, 2, 22, 24, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 534523405, 'comment_body': 'That being said, is this really the behaviour we want here? Why not iterate over the rows? Or not iterate at all?', 'comment_created': datetime.datetime(2020, 12, 2, 22, 26, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 535503403, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2020, 12, 3, 19, 3, 57, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 535503592, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2020, 12, 3, 19, 4, 17, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 535503833, 'comment_body': 'Removed.', 'comment_created': datetime.datetime(2020, 12, 3, 19, 4, 44, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 535503984, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2020, 12, 3, 19, 5, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 535537634, 'comment_body': 'Fixed?!', 'comment_created': datetime.datetime(2020, 12, 3, 19, 48, 40, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}]","[{'commit_sha': '0a2cb2c405dcc35561b43f7b6a2aa332f9fe232f', 'committer_username': 'abhijeetmanhas', 'committer_name': 'Abhijeet Manhas', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 13, 15, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d6670a798f1914dabb5927a58d974b3b2692bf7', 'committer_username': 'abhijeetmanhas', 'committer_name': 'Abhijeet Manhas', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 13, 15, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4edf4a3b5e28d9396f4c88c754054f9f165ba7a4', 'committer_username': 'abhijeetmanhas', 'committer_name': 'Abhijeet Manhas', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 13, 15, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '418897b5976f677f0964202721b2b7e0d6d6aff5', 'committer_username': 'abhijeetmanhas', 'committer_name': 'Abhijeet Manhas', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 13, 15, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a2f1019743f70c0929dc38782cd70f62da0cf549', 'committer_username': 'abhijeetmanhas', 'committer_name': 'Abhijeet Manhas', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 13, 15, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f292c8ee5e455e3b2bf31a23a6c0054148d96f01', 'committer_username': 'abhijeetmanhas', 'committer_name': 'Abhijeet Manhas', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 13, 15, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb2f1d2ab8aaf2730d7b767587e04fec5980cf5e', 'committer_username': 'abhijeetmanhas', 'committer_name': 'Abhijeet Manhas', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 13, 15, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '940d05efbb3f7fc4eef9747a841ebf919dcb3499', 'committer_username': 'abhijeetmanhas', 'committer_name': 'Abhijeet Manhas', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 13, 15, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b85ef0ea8f6ed49cffe2c6120eb9b9463474e825', 'committer_username': 'abhijeetmanhas', 'committer_name': 'Abhijeet Manhas', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 13, 15, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b961ab6a7f0c576de9e61e24cc2da7b1610ade1', 'committer_username': 'abhijeetmanhas', 'committer_name': 'Abhijeet Manhas', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 13, 15, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b0b2d7e0f08f6e96571a9ceccad32cebc29dd253', 'committer_username': 'abhijeetmanhas', 'committer_name': 'Abhijeet Manhas', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 13, 15, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fbd55dce641c9526c6c770cad68d71925d6f2370', 'committer_username': 'abhijeetmanhas', 'committer_name': 'Abhijeet Manhas', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 13, 15, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b2f4dbac2e2c29ba90de38a8b143e23c621228da', 'committer_username': 'abhijeetmanhas', 'committer_name': 'Abhijeet Manhas', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 13, 15, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ebf6ebb4150ac2183bcdada36089ee5f7691f791', 'committer_username': 'abhijeetmanhas', 'committer_name': 'Abhijeet Manhas', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 13, 15, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d52a7eab3de14a92e8df879ecae00a8b9ac9393', 'committer_username': 'abhijeetmanhas', 'committer_name': 'Abhijeet Manhas', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 13, 15, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd44364cf5b146c9df19c6d4902e32e4e4c555fb', 'committer_username': 'abhijeetmanhas', 'committer_name': 'Abhijeet Manhas', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 13, 15, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3f589e3af5ef19fa29a6bc944ed62f729d97aac', 'committer_username': 'abhijeetmanhas', 'committer_name': 'Abhijeet Manhas', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 13, 15, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34ba68c38c187b57160a88f217bf0a2b4281fa3e', 'committer_username': 'abhijeetmanhas', 'committer_name': 'Abhijeet Manhas', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 13, 15, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '588c6fcf198bf4eeb3dd12733af60be3bf949054', 'committer_username': 'abhijeetmanhas', 'committer_name': 'Abhijeet Manhas', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 13, 15, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3aaa693d5e1655c131263a603e192441995faa08', 'committer_username': 'abhijeetmanhas', 'committer_name': 'Abhijeet Manhas', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 13, 15, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d1b06693f81a40d7a0236ed09de458fef4fae14', 'committer_username': 'abhijeetmanhas', 'committer_name': 'Abhijeet Manhas', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 13, 15, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e94d876f4e07d4dc18b25ae95538bfcb8ddf40c7', 'committer_username': 'abhijeetmanhas', 'committer_name': 'Abhijeet Manhas', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 13, 15, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b1c25920cb21150ed9b9befe646380d61b3bc5d9', 'committer_username': 'nabobalis', 'committer_name': 'Nabil Freij', 'committer_email': 'nabil.freij@gmail.com', 'commit_date': datetime.datetime(2012, 1, 30, 17, 52, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25f5a0f9292c4a053df0ced0cf4a442c7e3f7b0a', 'committer_username': 'nabobalis', 'committer_name': 'Nabil Freij', 'committer_email': 'nabil.freij@gmail.com', 'commit_date': datetime.datetime(2012, 1, 30, 17, 52, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8a8824039ef614059ad46dc9318c703e1c6e4bb', 'committer_username': 'nabobalis', 'committer_name': 'Nabil Freij', 'committer_email': 'nabil.freij@gmail.com', 'commit_date': datetime.datetime(2012, 1, 30, 17, 52, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a4af4a9e3b22dbd380ccd104672c63196ab0cdfd', 'committer_username': 'nabobalis', 'committer_name': 'Nabil Freij', 'committer_email': 'nabil.freij@gmail.com', 'commit_date': datetime.datetime(2012, 1, 30, 17, 52, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56c16c4b0beb6fe7b0cff171d84d78d66faad374', 'committer_username': 'nabobalis', 'committer_name': 'Nabil Freij', 'committer_email': 'nabil.freij@gmail.com', 'commit_date': datetime.datetime(2012, 1, 30, 17, 52, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '908f74986729ded6861437138c2d452281c4ee25', 'committer_username': 'nabobalis', 'committer_name': 'Nabil Freij', 'committer_email': 'nabil.freij@gmail.com', 'commit_date': datetime.datetime(2012, 1, 30, 17, 52, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f0d223bc4214c4f5602d906e23a7442f8b13315a', 'committer_username': 'nabobalis', 'committer_name': 'Nabil Freij', 'committer_email': 'nabil.freij@gmail.com', 'commit_date': datetime.datetime(2012, 1, 30, 17, 52, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb896111f9d0eeda60fd05e6648a36fd62af9077', 'committer_username': 'nabobalis', 'committer_name': 'Nabil Freij', 'committer_email': 'nabil.freij@gmail.com', 'commit_date': datetime.datetime(2012, 1, 30, 17, 52, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a6fc4cd27dc2cbb4b5311dce9ec11f7baec62051', 'committer_username': 'nabobalis', 'committer_name': 'Nabil Freij', 'committer_email': 'nabil.freij@gmail.com', 'commit_date': datetime.datetime(2012, 1, 30, 17, 52, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34df3f890f3c83d26996869b7758779f915cf039', 'committer_username': 'nabobalis', 'committer_name': 'Nabil Freij', 'committer_email': 'nabil.freij@gmail.com', 'commit_date': datetime.datetime(2012, 1, 30, 17, 52, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ecba069df1243954d65bc4377edb01b6d334bf91', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b052eca99dab344b6a2d6eb16c2f76694b022d23', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a500832a4192e7be685f004c22d827ca8b3c1556', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '27fc1fba90740ae6fc1a254618935246ab2704a4', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '850b18924fc4059e0082e5d79d8ec6216c61c075', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '6503d3f2404f917ae013f686ea46f2b3ae8ab853', 'committer_username': 'nabobalis', 'committer_name': 'Nabil Freij', 'committer_email': 'nabil.freij@gmail.com', 'commit_date': datetime.datetime(2012, 1, 30, 17, 52, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ecc50499d9fff775ae1748334cef308c41f1bca0', 'committer_username': 'nabobalis', 'committer_name': 'Nabil Freij', 'committer_email': 'nabil.freij@gmail.com', 'commit_date': datetime.datetime(2012, 1, 30, 17, 52, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60a04bafe69f5ea518d0bc8d54f2efa1e17fb25a', 'committer_username': 'nabobalis', 'committer_name': 'Nabil Freij', 'committer_email': 'nabil.freij@gmail.com', 'commit_date': datetime.datetime(2012, 1, 30, 17, 52, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '749b5619d5b38cace14a62883a404c14cb9f1e6c', 'committer_username': 'nabobalis', 'committer_name': 'Nabil Freij', 'committer_email': 'nabil.freij@gmail.com', 'commit_date': datetime.datetime(2012, 1, 30, 17, 52, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8dc9b35e533c46090aeea7fda18f84d901e392bd', 'committer_username': 'nabobalis', 'committer_name': 'Nabil Freij', 'committer_email': 'nabil.freij@gmail.com', 'commit_date': datetime.datetime(2012, 1, 30, 17, 52, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48b127f39cc91a5e10b985aa542b3a5f758d2d8e', 'committer_username': 'nabobalis', 'committer_name': 'Nabil Freij', 'committer_email': 'nabil.freij@gmail.com', 'commit_date': datetime.datetime(2012, 1, 30, 17, 52, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '608d29c81390f147a90777b79cb683eb12539dd8', 'committer_username': 'nabobalis', 'committer_name': 'Nabil Freij', 'committer_email': 'nabil.freij@gmail.com', 'commit_date': datetime.datetime(2012, 1, 30, 17, 52, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '58d1b488785d81018a2431d836eb5ab79db10b31', 'committer_username': 'nabobalis', 'committer_name': 'Nabil Freij', 'committer_email': 'nabil.freij@gmail.com', 'commit_date': datetime.datetime(2012, 1, 30, 17, 52, 11, tzinfo=datetime.timezone.utc)}]",Abhijeet Manhas,43112347,,User,,51,,254,156
454748567,Docs for writing new Fido clients,"<!--
We know that working on sunpy and submitting pull requests takes effort, and we appreciate your time.
Thank you.

Please be aware that everyone has to follow our code of conduct:
https://github.com/sunpy/sunpy/blob/master/CODE_OF_CONDUCT.rst

Also these comments are hidden when you submit this github pull request.

We have several automatic features that run when a pull request is open.
They can appear daunting but do not worry about them!
Here is a brief explanation of them: https://docs.sunpy.org/en/latest/dev_guide/pr_review_procedure.html#continuous-integration.
-->

### Description
<!--
Provide a general description of what your pull request does.

If the pull request closes any open issues you can add this.
If you replace <Issue Number> with a number GitHub will automatically link it.
If it doesn't, please remove the following line.
-->

This is PR #3768 with description how to write a new sublcass of `~sunpy.net.dataretriever.GenericClient`, aka simple Fido client, after #4321 is merged.

- [x] Document how `_can_hancle_query` gets all the `AttrOr` and `AttrAnds` removed before it is called.
- [x] Document how to add attrs to the registry. 
- [x] Document https://github.com/sunpy/sunpy/pull/4358#discussion_r496671556
- [x] Document how to write own fetch method",True,4387,https://api.github.com/repos/sunpy/sunpy/pulls/4387,https://github.com/sunpy/sunpy/pull/4387,closed,517,14,6,9,7,128,2,0,"[{'name': 'Documentation'}, {'name': 'net'}]",2020-07-21 21:11:06+00:00,2021-02-15 22:08:31+00:00,18061045.0,"209 days, 0:57:25","[{'comment_id': 460392531, 'comment_body': '```suggestion\r\n    The range is inclusive of both the min and max.\r\n```', 'comment_created': datetime.datetime(2020, 7, 25, 10, 46, 35, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 460570279, 'comment_body': '```suggestion\r\nThe `~sunpy.net.fido_factory.UnifiedDownloaderFactory` (``Fido``) object is extensible with new clients, which can interface with web services and download new data or metadata.\r\n```', 'comment_created': datetime.datetime(2020, 7, 26, 20, 32, 21, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 460570326, 'comment_body': '```suggestion\r\nThere are two ways of defining a new client, depending on the complexity of your web service.\r\n```', 'comment_created': datetime.datetime(2020, 7, 26, 20, 32, 55, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 460570353, 'comment_body': '```suggestion\r\nIf your web service provides a list of HTTP or FTP urls that can easily be obtained from a search, this is probably the route to go.\r\n```', 'comment_created': datetime.datetime(2020, 7, 26, 20, 33, 22, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 460570379, 'comment_body': '```suggestion\r\nIf your web service requires you to do complex parsing of the search, or needs to construct specific objects to interface with the web service, or you need control over the download implementation (i.e. does not just return a list of URLs) then you probably want to write a ""full"" client.\r\n```', 'comment_created': datetime.datetime(2020, 7, 26, 20, 33, 38, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 460570391, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2020, 7, 26, 20, 33, 43, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 460570549, 'comment_body': '```suggestion\r\n* A class method `:func:~sunpy.net.dataretriever.GenericClient.register_values` which register the ""attrs"" that are desired to be supported by the client. \r\n  It returns a dictionary where keys are the supported attrs and values are lists of tuples.\r\nEach ``tuple`` contains the Attr value and its description.\r\n```', 'comment_created': datetime.datetime(2020, 7, 26, 20, 35, 18, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 460570608, 'comment_body': ""```suggestion\r\n* A class attribute ``baseurl``.\r\n  It's a regex string which can be used to match all urls supported by the client.\r\n```"", 'comment_created': datetime.datetime(2020, 7, 26, 20, 35, 53, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 460570676, 'comment_body': '```suggestion\r\n* A class attribute ``pattern``.\r\n  This string should be declared in a way that it extracts the metadata from urls correctly, using :func:`~sunpy.extern.parse.parse`.\r\n```', 'comment_created': datetime.datetime(2020, 7, 26, 20, 36, 41, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 460570707, 'comment_body': '```suggestion\r\nSometimes the ""Attr"" values may not exist identically in the retrieved urls.\r\nSay, for example, the Wavelength Attr can be passed as an `~astropy.units.Quantity` to the `func:search` but the url may have a different representation for it in its string.\r\nFor such cases, these methods need to be worked out:\r\n```', 'comment_created': datetime.datetime(2020, 7, 26, 20, 36, 54, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 460570810, 'comment_body': '```suggestion\r\n* :func:`~sunpy.net.dataretriever.GenericClient.pre_search_hook` which will convert the passed attrs to their representation in the url.\r\n```', 'comment_created': datetime.datetime(2020, 7, 26, 20, 38, 1, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 460570837, 'comment_body': '```suggestion\r\n* :func:`~sunpy.net.dataretriever.GenericClient.post_search_hook` which converts the retrieved metadata from url to the form in which they are desired to be represented in the response table.\r\n```', 'comment_created': datetime.datetime(2020, 7, 26, 20, 38, 11, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 460570874, 'comment_body': '```suggestion\r\nIt may also be possible that the URL contains the ""Attrs"" other than time in the directory itself.\r\nSince scraper doesn\'t support generating directories that have non-time variables, the `:func:search` needs to be overwritten.\r\n```', 'comment_created': datetime.datetime(2020, 7, 26, 20, 38, 28, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 460570942, 'comment_body': '```suggestion\r\nBased on the ""Attrs"" passed to it, they can be looped to generate the possible patterns for directory and then passed to the scraper\r\n:func:`super().search` can be called per loop.\r\n```', 'comment_created': datetime.datetime(2020, 7, 26, 20, 39, 14, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 460570973, 'comment_body': '```suggestion\r\nSuppose any file of a data archive can be described by this ``https://some-domain.com/%Y/%m/%d/satname_{SatellitNumber}_{Level}_%y%m%d%H%M%S_{any-2-digit-number}.fits``:\r\n```', 'comment_created': datetime.datetime(2020, 7, 26, 20, 39, 26, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 460571512, 'comment_body': 'This needs more explaining. What is `\\d`, what are the numbers, the `\\` at the end? ', 'comment_created': datetime.datetime(2020, 7, 26, 20, 45, 9, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 460571579, 'comment_body': ""```suggestion\r\n  Note all variables in the filename are converted to regex that will match any possible value for it. Thus ``%y%m%d%H%M%S`` is a six digit variable (2 digits for each) and thus represented by ``r'(\\d){12}'``.\r\n```\r\n?"", 'comment_created': datetime.datetime(2020, 7, 26, 20, 45, 40, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 460571783, 'comment_body': '```suggestion\r\n  Note the sole purpose of ``pattern`` is to extract the information from matched url, using ``:func:parse``.\r\n  So the desired key names for returned dictionary should be written in the pattern within ``{}``, and they should match with the ``attr.__name__``.\r\n```', 'comment_created': datetime.datetime(2020, 7, 26, 20, 48, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 460571806, 'comment_body': '```suggestion\r\n* ``register_values()`` can be written as:\r\n```', 'comment_created': datetime.datetime(2020, 7, 26, 20, 48, 23, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 460571840, 'comment_body': ""Why is this a cls method when it doesn't need the cls in this example?"", 'comment_created': datetime.datetime(2020, 7, 26, 20, 48, 52, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 460571846, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2020, 7, 26, 20, 48, 56, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 460572147, 'comment_body': '```suggestion\r\n* Zero or more new `~sunpy.net.attr.Attr` classes to specify search parameters unique to your data source.\r\n```', 'comment_created': datetime.datetime(2020, 7, 26, 20, 52, 15, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 460572283, 'comment_body': ""```suggestion\r\n* An instance of `~sunpy.net.attr.AttrWalker` which can be used to walk the tree of `~sunpy.net.attr.Attr` instances and convert them into a form useful to your client's search method.\r\n```\r\nThis part will definitely need explaining. "", 'comment_created': datetime.datetime(2020, 7, 26, 20, 53, 41, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 460572295, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2020, 7, 26, 20, 53, 45, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 460572563, 'comment_body': 'Is anything explained in that file?', 'comment_created': datetime.datetime(2020, 7, 26, 20, 56, 33, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 460572678, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2020, 7, 26, 20, 57, 56, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 460573986, 'comment_body': '```suggestion\r\n  For the VSO client this is used to convert each supported attr into a `~sunpy.net.attr.ValueAttr` which is then later processed by the appliers and creators.\r\n```', 'comment_created': datetime.datetime(2020, 7, 26, 21, 11, 18, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 460574002, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2020, 7, 26, 21, 11, 25, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 460574048, 'comment_body': ""```suggestion\r\nLet's imagine we have a web service which you can do a HTTP GET request to ``https://sfsi.sunpy.org/search`` for some imaginary data from an instrument called SFSI (SunPy Fake Solar Instrument).\r\n```"", 'comment_created': datetime.datetime(2020, 7, 26, 21, 11, 45, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 460574095, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2020, 7, 26, 21, 12, 8, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 461033837, 'comment_body': ""Added some explanation, like this\r\n```\r\n  Note all variables in the filename are converted to regex that will match any possible value for it.\r\n  A character enclosed within ``()`` followed by a number enclosed within ``{}`` is used to match the specified number of occurences of that special sequence.\r\n  For example, ``%y%m%d%H%M%S`` is a six digit variable (2 digits for each) and thus represented by ``r'(\\d){12}'``.\r\n  Note that ``\\`` is used to escape the special character ``.``.\r\n```"", 'comment_created': datetime.datetime(2020, 7, 27, 16, 58, 4, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 461033977, 'comment_body': 'Yeah, it should be `12`, updated', 'comment_created': datetime.datetime(2020, 7, 27, 16, 58, 19, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 461035231, 'comment_body': ""Yes, there's a lot of explanation, added as docstring in that file."", 'comment_created': datetime.datetime(2020, 7, 27, 17, 0, 12, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 461036293, 'comment_body': ""It always has been, I'm too not sure why."", 'comment_created': datetime.datetime(2020, 7, 27, 17, 1, 53, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 461052740, 'comment_body': 'Thanks.', 'comment_created': datetime.datetime(2020, 7, 27, 17, 29, 33, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 461052868, 'comment_body': 'Thanks.', 'comment_created': datetime.datetime(2020, 7, 27, 17, 29, 43, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 461053232, 'comment_body': ""Is it accessible anywhere that doesn't involve me opening the file? If so it should be linked here."", 'comment_created': datetime.datetime(2020, 7, 27, 17, 30, 17, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 461053429, 'comment_body': 'We might want to change that, tho not in this PR.', 'comment_created': datetime.datetime(2020, 7, 27, 17, 30, 37, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 467828673, 'comment_body': '```suggestion\r\n* A class method :meth:`~sunpy.net.dataretriever.GenericClient.register_values` which register the ""attrs"" that are desired to be supported by the client.\r\n```', 'comment_created': datetime.datetime(2020, 8, 10, 11, 0, 35, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 467828971, 'comment_body': '```suggestion\r\nSay, for example, the Wavelength Attr can be passed as an `~astropy.units.Quantity` to the :meth:`~sunpy.net.dataretriever.GenericClient.search` but the url may have a different representation for it in its string.\r\n```\r\nOr this is a base client search? ', 'comment_created': datetime.datetime(2020, 8, 10, 11, 1, 18, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 467829048, 'comment_body': '```suggestion\r\n* :meth:`~sunpy.net.dataretriever.GenericClient.pre_search_hook` which will convert the passed attrs to their representation in the url.\r\n```', 'comment_created': datetime.datetime(2020, 8, 10, 11, 1, 30, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 467829085, 'comment_body': '```suggestion\r\n* :meth:`~sunpy.net.dataretriever.GenericClient.post_search_hook` which converts the retrieved metadata from url to the form in which they are desired to be represented in the response table.\r\n```', 'comment_created': datetime.datetime(2020, 8, 10, 11, 1, 37, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 467829398, 'comment_body': 'Same as above, the search should be fully linked. ', 'comment_created': datetime.datetime(2020, 8, 10, 11, 2, 21, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 467829763, 'comment_body': '```suggestion\r\n  Note the sole purpose of ``pattern`` is to extract the information from matched url, using :func:`~sunpy.extern.parse.parse`.\r\n```', 'comment_created': datetime.datetime(2020, 8, 10, 11, 3, 11, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 468242711, 'comment_body': 'No, what you mentioned is correct.', 'comment_created': datetime.datetime(2020, 8, 10, 23, 35, 51, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 470505672, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2020, 8, 14, 9, 8, 41, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 470506135, 'comment_body': 'There needs to be some link to the documentation in that file. ', 'comment_created': datetime.datetime(2020, 8, 14, 9, 9, 38, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 473141624, 'comment_body': 'Linked using hyperlink of code-ref.', 'comment_created': datetime.datetime(2020, 8, 19, 16, 4, 14, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 474043778, 'comment_body': 'this explains how to add attrs to registry.', 'comment_created': datetime.datetime(2020, 8, 20, 14, 52, 2, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 476311562, 'comment_body': '```suggestion\r\nEach tuple comprises of two elements. \r\nThe first one is value and the second element contains a brief description of that value.\r\n```', 'comment_created': datetime.datetime(2020, 8, 25, 9, 29, 41, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 476311625, 'comment_body': '```suggestion\r\nAn example of writing ``register_values()`` for `~sunpy.net.dataretriever.GenericClient` is provided above.\r\nPlease note that it can be defined in a similar way for full clients too.\r\n```', 'comment_created': datetime.datetime(2020, 8, 25, 9, 29, 50, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 476311764, 'comment_body': 'I think a simple example here would be nice. ', 'comment_created': datetime.datetime(2020, 8, 25, 9, 30, 3, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 476493876, 'comment_body': 'Added.', 'comment_created': datetime.datetime(2020, 8, 25, 14, 29, 18, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 476494007, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 25, 14, 29, 28, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 476494178, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 25, 14, 29, 39, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 523439835, 'comment_body': 'Was this meant to be deleted?', 'comment_created': datetime.datetime(2020, 11, 14, 16, 58, 1, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 523439890, 'comment_body': 'This file needs moving when we merge in the dev guide update.', 'comment_created': datetime.datetime(2020, 11, 14, 16, 58, 43, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 523439913, 'comment_body': 'Revert this.', 'comment_created': datetime.datetime(2020, 11, 14, 16, 59, 1, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 523443751, 'comment_body': ""yeah, we don't need to do this any more as we aren't previewing on circle."", 'comment_created': datetime.datetime(2020, 11, 14, 17, 39, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 523444165, 'comment_body': 'Oh yeah!', 'comment_created': datetime.datetime(2020, 11, 14, 17, 43, 44, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 525983982, 'comment_body': '```suggestion\r\nIf your web service provides a list of HTTP or FTP URLs that can easily be obtained from a search, this is probably the route to go.\r\n```', 'comment_created': datetime.datetime(2020, 11, 18, 10, 39, 56, tzinfo=datetime.timezone.utc), 'commenter': 'hayesla', 'type': 'User'}, {'comment_id': 525985092, 'comment_body': '```suggestion\r\n  ``baseurl`` is a regex string which is used to match all URLs supported by the client.\r\n```', 'comment_created': datetime.datetime(2020, 11, 18, 10, 41, 39, tzinfo=datetime.timezone.utc), 'commenter': 'hayesla', 'type': 'User'}, {'comment_id': 525985680, 'comment_body': 'sometimes attrs is capitalised (Attrs) and sometimes not, and sometimes as ""attrs"". This should be consistent', 'comment_created': datetime.datetime(2020, 11, 18, 10, 42, 32, tzinfo=datetime.timezone.utc), 'commenter': 'hayesla', 'type': 'User'}, {'comment_id': 525986517, 'comment_body': '```suggestion\r\n  ``pattern`` is a string declared in a way that it extracts the metadata from URLs correctly, using :func:`~sunpy.extern.parse.parse`.\r\n```', 'comment_created': datetime.datetime(2020, 11, 18, 10, 43, 55, tzinfo=datetime.timezone.utc), 'commenter': 'hayesla', 'type': 'User'}, {'comment_id': 525987491, 'comment_body': '```suggestion\r\nSometimes the ""Attr"" values may not exist identically in the required URLs.\r\n```', 'comment_created': datetime.datetime(2020, 11, 18, 10, 45, 23, tzinfo=datetime.timezone.utc), 'commenter': 'hayesla', 'type': 'User'}, {'comment_id': 525988359, 'comment_body': '```suggestion\r\nSay, for example, the Wavelength Attr can be passed as an `~astropy.units.Quantity` to the :meth:`~sunpy.net.dataretriever.client.GenericClient.search` but the URL may have a different representation for it in its string.\r\n```', 'comment_created': datetime.datetime(2020, 11, 18, 10, 46, 44, tzinfo=datetime.timezone.utc), 'commenter': 'hayesla', 'type': 'User'}, {'comment_id': 525988959, 'comment_body': ""also I'd give an example of what this explicitly means"", 'comment_created': datetime.datetime(2020, 11, 18, 10, 47, 46, tzinfo=datetime.timezone.utc), 'commenter': 'hayesla', 'type': 'User'}, {'comment_id': 525989884, 'comment_body': '```suggestion\r\nFor such cases, these methods need to be worked out. This is done within the two following functions within the client: \r\n```', 'comment_created': datetime.datetime(2020, 11, 18, 10, 49, 13, tzinfo=datetime.timezone.utc), 'commenter': 'hayesla', 'type': 'User'}, {'comment_id': 525990078, 'comment_body': '```suggestion\r\n* :meth:`~sunpy.net.dataretriever.client.GenericClient.pre_search_hook` which will convert the passed attrs to their representation in the URL.\r\n```', 'comment_created': datetime.datetime(2020, 11, 18, 10, 49, 30, tzinfo=datetime.timezone.utc), 'commenter': 'hayesla', 'type': 'User'}, {'comment_id': 525990247, 'comment_body': '```suggestion\r\n* :meth:`~sunpy.net.dataretriever.client.GenericClient.post_search_hook` which converts the retrieved metadata from URL to the form in which they are desired to be represented in the response table.\r\n```', 'comment_created': datetime.datetime(2020, 11, 18, 10, 49, 47, tzinfo=datetime.timezone.utc), 'commenter': 'hayesla', 'type': 'User'}, {'comment_id': 525990706, 'comment_body': 'what does this sentence mean?', 'comment_created': datetime.datetime(2020, 11, 18, 10, 50, 28, tzinfo=datetime.timezone.utc), 'commenter': 'hayesla', 'type': 'User'}, {'comment_id': 525991529, 'comment_body': ""```suggestion\r\nSince ~sunpy.util.scraper.Scraper` doesn't support generating directories that have non-time variables, the :meth:`~sunpy.net.dataretriever.client.GenericClient.search` needs to be customised.\r\n```"", 'comment_created': datetime.datetime(2020, 11, 18, 10, 51, 41, tzinfo=datetime.timezone.utc), 'commenter': 'hayesla', 'type': 'User'}, {'comment_id': 525992917, 'comment_body': ""this sentence needs some work - I'm not too sure exactly what it is trying to say. Is this for cases where there may be other things to search on than time?"", 'comment_created': datetime.datetime(2020, 11, 18, 10, 53, 50, tzinfo=datetime.timezone.utc), 'commenter': 'hayesla', 'type': 'User'}, {'comment_id': 525993773, 'comment_body': ""```suggestion\r\n  For example, ``%y%m%d%H%M%S`` is a six digit variable (with 2 digits for each) and thus represented by ``r'(\\d){12}'``.\r\n```"", 'comment_created': datetime.datetime(2020, 11, 18, 10, 55, 6, tzinfo=datetime.timezone.utc), 'commenter': 'hayesla', 'type': 'User'}, {'comment_id': 525993917, 'comment_body': ""actually is 'digit' the correct phrasing here?"", 'comment_created': datetime.datetime(2020, 11, 18, 10, 55, 19, tzinfo=datetime.timezone.utc), 'commenter': 'hayesla', 'type': 'User'}, {'comment_id': 525995266, 'comment_body': '```suggestion\r\n  Note the sole purpose of ``pattern`` is to extract the information from matched URL, using :func:`~sunpy.extern.parse.parse`. \r\n```', 'comment_created': datetime.datetime(2020, 11, 18, 10, 57, 28, tzinfo=datetime.timezone.utc), 'commenter': 'hayesla', 'type': 'User'}, {'comment_id': 525995562, 'comment_body': ""isn't ``pattern`` used within Scraper._extract_files_meta()? I would explicitly say that here."", 'comment_created': datetime.datetime(2020, 11, 18, 10, 58, tzinfo=datetime.timezone.utc), 'commenter': 'hayesla', 'type': 'User'}, {'comment_id': 525995736, 'comment_body': '```suggestion\r\n  So the desired key names for returned dictionary should be written in the ``pattern`` within ``{}``, and they should match with the ``attr.__name__``.\r\n```', 'comment_created': datetime.datetime(2020, 11, 18, 10, 58, 18, tzinfo=datetime.timezone.utc), 'commenter': 'hayesla', 'type': 'User'}, {'comment_id': 525997498, 'comment_body': 'I think there should be a sentence here somewhere saying that this is done through using scraper', 'comment_created': datetime.datetime(2020, 11, 18, 11, 1, 8, tzinfo=datetime.timezone.utc), 'commenter': 'hayesla', 'type': 'User'}, {'comment_id': 530801877, 'comment_body': '```suggestion\nThe `~sunpy.net.fido_factory.UnifiedDownloaderFactory` (``Fido``) object is extensible with new clients, which can interface with web services and download data.\n```\n', 'comment_created': datetime.datetime(2020, 11, 26, 6, 41, 27, tzinfo=datetime.timezone.utc), 'commenter': 'wtbarnes', 'type': 'User'}, {'comment_id': 530802583, 'comment_body': '```suggestion\n* A class method :meth:`~sunpy.net.dataretriever.client.GenericClient.register_values` which registers the ""attrs"" that are supported by the client.\n```\n', 'comment_created': datetime.datetime(2020, 11, 26, 6, 43, 39, tzinfo=datetime.timezone.utc), 'commenter': 'wtbarnes', 'type': 'User'}, {'comment_id': 530803960, 'comment_body': '```suggestion\nSuppose any file of a data archive can be described by this URL ``https://some-domain.com/%Y/%m/%d/satname_{SatellitNumber}_{Level}_%y%m%d%H%M%S_{any-2-digit-number}.fits``:\n```\n', 'comment_created': datetime.datetime(2020, 11, 26, 6, 47, 39, tzinfo=datetime.timezone.utc), 'commenter': 'wtbarnes', 'type': 'User'}, {'comment_id': 530804303, 'comment_body': ""Why is this it's own bullet point?"", 'comment_created': datetime.datetime(2020, 11, 26, 6, 48, 47, tzinfo=datetime.timezone.utc), 'commenter': 'wtbarnes', 'type': 'User'}, {'comment_id': 530805837, 'comment_body': ""```suggestion\n* A subclass of `~sunpy.net.base_client.BaseClient` which implements ``search``, ``fetch``, and ``_is_datasource_for``.\n```\n\nI don't think any mention of abstract base classes is needed here as it is just likely to confuse people.\n"", 'comment_created': datetime.datetime(2020, 11, 26, 6, 53, 7, tzinfo=datetime.timezone.utc), 'commenter': 'wtbarnes', 'type': 'User'}, {'comment_id': 530806293, 'comment_body': 'What does this mean? Is it really needed here? ', 'comment_created': datetime.datetime(2020, 11, 26, 6, 54, 30, tzinfo=datetime.timezone.utc), 'commenter': 'wtbarnes', 'type': 'User'}, {'comment_id': 530808546, 'comment_body': '```suggestion\n* **Converters**: Adding a converter to the walker adds the function to both the creator and the applier.\n```\n', 'comment_created': datetime.datetime(2020, 11, 26, 7, 0, 9, tzinfo=datetime.timezone.utc), 'commenter': 'wtbarnes', 'type': 'User'}, {'comment_id': 530810917, 'comment_body': 'This code block is nearly identical to the one in the example at the end. Do we really need it?', 'comment_created': datetime.datetime(2020, 11, 26, 7, 6, 36, tzinfo=datetime.timezone.utc), 'commenter': 'wtbarnes', 'type': 'User'}, {'comment_id': 534528869, 'comment_body': ""It's a pretty fundamental part of what the walker does. I will reword."", 'comment_created': datetime.datetime(2020, 12, 2, 22, 37, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 568133717, 'comment_body': 'What is wait for?', 'comment_created': datetime.datetime(2021, 2, 1, 20, 56, 45, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 568154682, 'comment_body': ""Documenting this is a split brain problem, wait is to provide a way for Fido to tell old clients which can be used on their own to behave in a way that's Fido compatible i.e. not call `downloader.download`"", 'comment_created': datetime.datetime(2021, 2, 1, 21, 34, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 568163886, 'comment_body': 'Do still want to do this? Is there not more we can cut?', 'comment_created': datetime.datetime(2021, 2, 1, 21, 49, 51, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 568204494, 'comment_body': 'Well deprecating the old API to JSOC, VSO and dataretriever would be nice but a lot of work and deprecations\r\n', 'comment_created': datetime.datetime(2021, 2, 1, 23, 6, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 568486363, 'comment_body': 'Sure but feels like something we should at least look into? ', 'comment_created': datetime.datetime(2021, 2, 2, 10, 22, 19, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 573556595, 'comment_body': '```suggestion\r\n    def fetch(self, query_results, *, path, downloader, **kwargs):\r\n```', 'comment_created': datetime.datetime(2021, 2, 10, 9, 6, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 575366697, 'comment_body': 'I have reworded, please take a look.', 'comment_created': datetime.datetime(2021, 2, 12, 16, 59, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 575367028, 'comment_body': 'I have attempted to address this, is it clearer now?', 'comment_created': datetime.datetime(2021, 2, 12, 16, 59, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 575367192, 'comment_body': 'I have reworded.', 'comment_created': datetime.datetime(2021, 2, 12, 17, 0, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 575367877, 'comment_body': ""I haven't mentioned the hidden method in Scraper, as I hope that's an implementation detail. I have reworded this to make it clear that it's referring to the the parse string format, not anything else."", 'comment_created': datetime.datetime(2021, 2, 12, 17, 1, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 575368103, 'comment_body': 'I renamed this whole section to ""scraper client"" as it seemed more descriptive.', 'comment_created': datetime.datetime(2021, 2, 12, 17, 1, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 575478575, 'comment_body': 'Was this not in another PR?', 'comment_created': datetime.datetime(2021, 2, 12, 19, 40, 29, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 575505886, 'comment_body': 'Errr, the other PR made the changes required to make this work, this is an extension of it. This changes the base_client to describe the API you need to write a Fido client.', 'comment_created': datetime.datetime(2021, 2, 12, 20, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 576155146, 'comment_body': '""some existing clients support use not through"" maybe ""some existing clients support outside the Fido wrapper""?', 'comment_created': datetime.datetime(2021, 2, 15, 12, 23, 19, tzinfo=datetime.timezone.utc), 'commenter': 'samaloney', 'type': 'User'}, {'comment_id': 576159651, 'comment_body': ""Is this really 'Level  0C' or just 'Level 0'"", 'comment_created': datetime.datetime(2021, 2, 15, 12, 31, 40, tzinfo=datetime.timezone.utc), 'commenter': 'samaloney', 'type': 'User'}, {'comment_id': 576161965, 'comment_body': 'Also might be worth mentioning these are converted to lowercase attributes on the attrs `a.Source.sdo`?', 'comment_created': datetime.datetime(2021, 2, 15, 12, 35, 58, tzinfo=datetime.timezone.utc), 'commenter': 'samaloney', 'type': 'User'}, {'comment_id': 576278909, 'comment_body': ""> Is this really 'Level 0C' or just 'Level 0'\r\n\r\nerrr, :man_shrugging: I think this is probably outside the scope of this PR lol.\r\n\r\n> Also might be worth mentioning these are converted to lowercase attributes on the attrs a.Source.sdo?\r\n\r\n:+1: "", 'comment_created': datetime.datetime(2021, 2, 15, 15, 42, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 576287464, 'comment_body': 'should a link be added here?', 'comment_created': datetime.datetime(2021, 2, 15, 15, 55, 30, tzinfo=datetime.timezone.utc), 'commenter': 'hayesla', 'type': 'User'}, {'comment_id': 576288496, 'comment_body': 'same here', 'comment_created': datetime.datetime(2021, 2, 15, 15, 57, 1, tzinfo=datetime.timezone.utc), 'commenter': 'hayesla', 'type': 'User'}, {'comment_id': 576290155, 'comment_body': 'zero? doesnt this mean that you do not need it?', 'comment_created': datetime.datetime(2021, 2, 15, 15, 59, 27, tzinfo=datetime.timezone.utc), 'commenter': 'hayesla', 'type': 'User'}, {'comment_id': 576291410, 'comment_body': 'maybe this is just me not knowing this but is `ORed` like OR-ed?', 'comment_created': datetime.datetime(2021, 2, 15, 16, 1, 26, tzinfo=datetime.timezone.utc), 'commenter': 'hayesla', 'type': 'User'}, {'comment_id': 576291964, 'comment_body': '```suggestion\r\nIf the query the user provided contains an OR statement you get passed an instance of `~sunpy.net.attr.AttrOr` and each sub-element of that `~sunpy.net.attr.AttrOr` will be `~sunpy.net.attr.AttrAnd` (or a single other attr class).\r\n```', 'comment_created': datetime.datetime(2021, 2, 15, 16, 2, 21, tzinfo=datetime.timezone.utc), 'commenter': 'hayesla', 'type': 'User'}, {'comment_id': 576294534, 'comment_body': 'haha SFSI! 🌞 ', 'comment_created': datetime.datetime(2021, 2, 15, 16, 6, 23, tzinfo=datetime.timezone.utc), 'commenter': 'hayesla', 'type': 'User'}, {'comment_id': 576295209, 'comment_body': '```suggestion\r\nThis combination of creators and appliers would allow support of any combination of queries consisting of ``a.Time`` and ``a.Level``.\r\n```', 'comment_created': datetime.datetime(2021, 2, 15, 16, 7, 28, tzinfo=datetime.timezone.utc), 'commenter': 'hayesla', 'type': 'User'}, {'comment_id': 576296232, 'comment_body': '```suggestion\r\nThis dictionary should have `~sunpy.net.attr.Attr` classes as keys and a list of tuples corresponding to that key representing the possible values the key ""attr"" can take.\r\n```', 'comment_created': datetime.datetime(2021, 2, 15, 16, 9, 11, tzinfo=datetime.timezone.utc), 'commenter': 'hayesla', 'type': 'User'}, {'comment_id': 576296389, 'comment_body': '```suggestion\r\nThe first one is a value and the second element contains a brief description of that value.\r\n```', 'comment_created': datetime.datetime(2021, 2, 15, 16, 9, 28, tzinfo=datetime.timezone.utc), 'commenter': 'hayesla', 'type': 'User'}, {'comment_id': 576296833, 'comment_body': '```suggestion\r\n* Make as many requests to your API as needed to fulfill the query. (Generally one per element of the outer `.AttrOr`).\r\n```', 'comment_created': datetime.datetime(2021, 2, 15, 16, 10, 7, tzinfo=datetime.timezone.utc), 'commenter': 'hayesla', 'type': 'User'}, {'comment_id': 576297467, 'comment_body': '```suggestion\r\nOnce the walker has processed the query into a form designed to be passed to your API, your ``search()`` method then needs to iterate over these parameters, make the requests, and process the results into a table.\r\n```', 'comment_created': datetime.datetime(2021, 2, 15, 16, 11, 13, tzinfo=datetime.timezone.utc), 'commenter': 'hayesla', 'type': 'User'}, {'comment_id': 576298734, 'comment_body': 'it should be noted here that this is also required for the simple ""scraper""-type client too, not just the ""full""client', 'comment_created': datetime.datetime(2021, 2, 15, 16, 13, 26, tzinfo=datetime.timezone.utc), 'commenter': 'hayesla', 'type': 'User'}, {'comment_id': 576299141, 'comment_body': 'maybe give an example of which ones', 'comment_created': datetime.datetime(2021, 2, 15, 16, 14, 4, tzinfo=datetime.timezone.utc), 'commenter': 'hayesla', 'type': 'User'}, {'comment_id': 576299531, 'comment_body': '(and if this is true), say that we encourage the use of the Fido wrapper?', 'comment_created': datetime.datetime(2021, 2, 15, 16, 14, 42, tzinfo=datetime.timezone.utc), 'commenter': 'hayesla', 'type': 'User'}, {'comment_id': 576300866, 'comment_body': '```suggestion\r\n``resp`` is an `aiohttp.ClientResponse` object which is returned when `parfive` requests the URL. \r\nThis response object allows us to inspect the headers of the response before the data is downloaded.\r\n```', 'comment_created': datetime.datetime(2021, 2, 15, 16, 16, 59, tzinfo=datetime.timezone.utc), 'commenter': 'hayesla', 'type': 'User'}, {'comment_id': 576310517, 'comment_body': 'correct, you could implement a custom client which only uses the attrs already defined in sunpy core.', 'comment_created': datetime.datetime(2021, 2, 15, 16, 33, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 576313374, 'comment_body': 'I added this to say to people ""if you go looking in sunpy you might see fetch methods with different signatures"". Perhaps I should either be more explicit or just drop it.', 'comment_created': datetime.datetime(2021, 2, 15, 16, 37, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 576313778, 'comment_body': ""It isn't anymore. One is autogenerated from the contents of `register_values` I think."", 'comment_created': datetime.datetime(2021, 2, 15, 16, 38, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 576315322, 'comment_body': ""This isn't a real instrument acronym right? :rofl: "", 'comment_created': datetime.datetime(2021, 2, 15, 16, 41, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 576315576, 'comment_body': 'yes? I am not really sure what the best formatting for this is.', 'comment_created': datetime.datetime(2021, 2, 15, 16, 41, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 576316290, 'comment_body': 'This syntax should linkify as long as there is only one object with the name, I hope.', 'comment_created': datetime.datetime(2021, 2, 15, 16, 42, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 576319868, 'comment_body': 'ah yas sorry my bad', 'comment_created': datetime.datetime(2021, 2, 15, 16, 48, 49, tzinfo=datetime.timezone.utc), 'commenter': 'hayesla', 'type': 'User'}, {'comment_id': 576354714, 'comment_body': 'It does indeed work in the preview.', 'comment_created': datetime.datetime(2021, 2, 15, 17, 58, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}]","[{'commit_sha': '68dc12a238e91c14fab6774efbe542b6f298034d', 'committer_username': 'Cadair', 'committer_name': 'Stuart Mumford', 'committer_email': 'stuart@cadair.com', 'commit_date': datetime.datetime(2012, 1, 30, 10, 33, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fbb12d55beaa1f77a00793c1a5a1bdf2ee6918b6', 'committer_username': 'nabobalis', 'committer_name': 'Nabil Freij', 'committer_email': 'nabil.freij@gmail.com', 'commit_date': datetime.datetime(2012, 1, 30, 17, 52, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '859829a36be3fa4dbc922fd55e5c04211ebf9306', 'committer_username': 'Cadair', 'committer_name': 'Stuart Mumford', 'committer_email': 'stuart@cadair.com', 'commit_date': datetime.datetime(2012, 1, 30, 10, 33, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17735f1d7d5b354a1206a29c884d8078c44197a1', 'committer_username': 'Cadair', 'committer_name': 'Stuart Mumford', 'committer_email': 'stuart@cadair.com', 'commit_date': datetime.datetime(2012, 1, 30, 10, 33, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1fba9489f7fdb913ae987ed3bbb7dc1e06a00c5c', 'committer_username': 'Cadair', 'committer_name': 'Stuart Mumford', 'committer_email': 'stuart@cadair.com', 'commit_date': datetime.datetime(2012, 1, 30, 10, 33, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '30b667662b180d94ecc10dc24c325132ac2405fd', 'committer_username': 'Cadair', 'committer_name': 'Stuart Mumford', 'committer_email': 'stuart@cadair.com', 'commit_date': datetime.datetime(2012, 1, 30, 10, 33, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '811d04e78c2842aff9a912e160fc3cb6b18e1d5f', 'committer_username': 'Cadair', 'committer_name': 'Stuart Mumford', 'committer_email': 'stuart@cadair.com', 'commit_date': datetime.datetime(2012, 1, 30, 10, 33, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a02978837cbf77447020967e4747013d5c10c97', 'committer_username': 'Cadair', 'committer_name': 'Stuart Mumford', 'committer_email': 'stuart@cadair.com', 'commit_date': datetime.datetime(2012, 1, 30, 10, 33, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea17b5b1c46a900215c14734449ba7c91b365a39', 'committer_username': 'Cadair', 'committer_name': 'Stuart Mumford', 'committer_email': 'stuart@cadair.com', 'commit_date': datetime.datetime(2012, 1, 30, 10, 33, 34, tzinfo=datetime.timezone.utc)}]",Abhijeet Manhas,43112347,,User,,51,,254,156
465759071,Function to get file timeranges in scraper,"<!--
We know that working on sunpy and submitting pull requests takes effort, and we appreciate your time.
Thank you.

Please be aware that everyone has to follow our code of conduct:
https://github.com/sunpy/sunpy/blob/master/CODE_OF_CONDUCT.rst

Also these comments are hidden when you submit this github pull request.

We have several automatic features that run when a pull request is open.
They can appear daunting but do not worry about them!
Here is a brief explanation of them: https://docs.sunpy.org/en/latest/dev_guide/pr_review_procedure.html#continuous-integration.
-->

### Description
<!--
Provide a general description of what your pull request does.

If the pull request closes any open issues you can add this.
If you replace <Issue Number> with a number GitHub will automatically link it.
If it doesn't, please remove the following line.
-->

This is improved split out from #4321 for scraper changes that finds start time and end time correctly based on file url. It will keep that non-generalized code out of `dataretriever`.",True,4419,https://api.github.com/repos/sunpy/sunpy/pulls/4419,https://github.com/sunpy/sunpy/pull/4419,closed,114,24,3,6,5,21,1,0,[{'name': 'util'}],2020-08-10 22:17:21+00:00,2020-08-27 07:41:44+00:00,1416263.0,"16 days, 9:24:23","[{'comment_id': 468414954, 'comment_body': 'Not sure how I feel about this name.', 'comment_created': datetime.datetime(2020, 8, 11, 8, 31, 26, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 468415052, 'comment_body': 'Doc string should have the parameters listed. ', 'comment_created': datetime.datetime(2020, 8, 11, 8, 31, 38, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 468415515, 'comment_body': '```suggestion\r\n    `~sunpy.time.TimeRange`\r\n```', 'comment_created': datetime.datetime(2020, 8, 11, 8, 32, 24, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 468415629, 'comment_body': '```suggestion\r\n        `list` of `dict`\r\n```', 'comment_created': datetime.datetime(2020, 8, 11, 8, 32, 35, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 468416160, 'comment_body': 'What if you only have year? ', 'comment_created': datetime.datetime(2020, 8, 11, 8, 33, 33, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 468635025, 'comment_body': 'Yeah, it will also work then, the endtime shall be defaulted to the last milliseconds of that year.', 'comment_created': datetime.datetime(2020, 8, 11, 14, 41, 43, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 468636581, 'comment_body': 'Can you add that as test case?', 'comment_created': datetime.datetime(2020, 8, 11, 14, 43, 51, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 468777919, 'comment_body': 'Added.', 'comment_created': datetime.datetime(2020, 8, 11, 18, 24, 11, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 468778014, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 11, 18, 24, 19, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 468778127, 'comment_body': 'Added.', 'comment_created': datetime.datetime(2020, 8, 11, 18, 24, 32, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 468778243, 'comment_body': 'Changed to `_check_timerange`', 'comment_created': datetime.datetime(2020, 8, 11, 18, 24, 47, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 469398256, 'comment_body': '```suggestion\r\n    dtlist = [int(exdict.get(d, 1) for d in datetypes]\r\n    dtlist.extend([int(exdict.get(t, 0) for t in timetypes])\r\n```', 'comment_created': datetime.datetime(2020, 8, 12, 16, 46, 11, tzinfo=datetime.timezone.utc), 'commenter': 'dpshelio', 'type': 'User'}, {'comment_id': 469398990, 'comment_body': ""This docstring needs a bit more of explanation. It took me a bit to really understand what it does... and I'm not 100% sure. Does it provide a TimeRange based on the smaller input in `exdict`?"", 'comment_created': datetime.datetime(2020, 8, 12, 16, 47, 30, tzinfo=datetime.timezone.utc), 'commenter': 'dpshelio', 'type': 'User'}, {'comment_id': 469401059, 'comment_body': '```suggestion\r\n    def _extract_files_meta(self, timerange, extractor, matcher=None):\r\n```\r\nI feel like if matcher is not a boolean, but a dictionary, `None` would fit better as default than `False`', 'comment_created': datetime.datetime(2020, 8, 12, 16, 51, 4, tzinfo=datetime.timezone.utc), 'commenter': 'dpshelio', 'type': 'User'}, {'comment_id': 469401338, 'comment_body': 'Or even an empty dictionary...', 'comment_created': datetime.datetime(2020, 8, 12, 16, 51, 29, tzinfo=datetime.timezone.utc), 'commenter': 'dpshelio', 'type': 'User'}, {'comment_id': 469403261, 'comment_body': ""Is there any test with the `matcher` I don't really get what it does."", 'comment_created': datetime.datetime(2020, 8, 12, 16, 54, 39, tzinfo=datetime.timezone.utc), 'commenter': 'dpshelio', 'type': 'User'}, {'comment_id': 469404432, 'comment_body': 'I love these kinds of functions that make the code DRY-er!', 'comment_created': datetime.datetime(2020, 8, 12, 16, 56, 31, tzinfo=datetime.timezone.utc), 'commenter': 'dpshelio', 'type': 'User'}, {'comment_id': 473090615, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 19, 14, 51, 59, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 473090812, 'comment_body': 'Changed to `None`', 'comment_created': datetime.datetime(2020, 8, 19, 14, 52, 16, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 473093293, 'comment_body': ""Changed on test which uses matcher. `matcher` is a dict which contains a list of possible values that a url can have in that place. Say if url pattern `domain/{goes_no}_goes_file.fits` can return files for `goes_no` 1,2 and 3. If we do \r\n`matcher = {'goes_no':[1,2]}` then goes_no 3 files won't be returned."", 'comment_created': datetime.datetime(2020, 8, 19, 14, 55, 32, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}, {'comment_id': 473094197, 'comment_body': 'Yes, it uses the day, month year, etc values which are in exdict extracted from url using the pattern to find start and end times.\r\nI have added that in docstrings.', 'comment_created': datetime.datetime(2020, 8, 19, 14, 56, 42, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetmanhas', 'type': 'User'}]","[{'commit_sha': 'de27f7f253bc722550eef3a94b07520e5b460361', 'committer_username': 'abhijeetmanhas', 'committer_name': 'Abhijeet Manhas', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 13, 15, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '245200033a56e0d0392e8a1731e853dafd8ad03a', 'committer_username': 'abhijeetmanhas', 'committer_name': 'Abhijeet Manhas', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 13, 15, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '26841985f2b69c292c1d6654e352d89f0404ef24', 'committer_username': 'abhijeetmanhas', 'committer_name': 'Abhijeet Manhas', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 13, 15, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b691e6f8b414cd91de3479a4a2dcae9e6db80542', 'committer_username': 'abhijeetmanhas', 'committer_name': 'Abhijeet Manhas', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 13, 15, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b12525e5ad75f524ec22459379cad53656c08755', 'committer_username': 'abhijeetmanhas', 'committer_name': 'Abhijeet Manhas', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 13, 15, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a91d8591323ce20d47904bb3ee6aa5c2ac098b35', 'committer_username': 'abhijeetmanhas', 'committer_name': 'Abhijeet Manhas', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 13, 15, 21, tzinfo=datetime.timezone.utc)}]",Abhijeet Manhas,43112347,,User,,51,,254,156

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
2165383,sunpy,sunpy/sunpy,Python,582,902,48,238,18500,288,4,17,"[{'id': 465759071, 'number': 4419, 'closed': datetime.datetime(2020, 8, 27, 7, 41, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 10, 22, 17, 21, tzinfo=datetime.timezone.utc), 'time_taken': 1416263.0, 'time_delta': '16 days, 9:24:23', 'additions': 114, 'deletions': 24, 'state': 'closed'}, {'id': 454748567, 'number': 4387, 'closed': datetime.datetime(2021, 2, 15, 22, 8, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 21, 21, 11, 6, tzinfo=datetime.timezone.utc), 'time_taken': 18061045.0, 'time_delta': '209 days, 0:57:25', 'additions': 517, 'deletions': 14, 'state': 'closed'}, {'id': 449026920, 'number': 4358, 'closed': datetime.datetime(2020, 12, 4, 7, 38, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 14, 17, 55, 41, tzinfo=datetime.timezone.utc), 'time_taken': 12318188.0, 'time_delta': '142 days, 13:43:08', 'additions': 1162, 'deletions': 790, 'state': 'closed'}, {'id': 440494107, 'number': 4321, 'closed': datetime.datetime(2020, 9, 10, 11, 38, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 26, 9, 58, 43, tzinfo=datetime.timezone.utc), 'time_taken': 6572405.0, 'time_delta': '76 days, 1:40:05', 'additions': 833, 'deletions': 1466, 'state': 'closed'}, {'id': 438771568, 'number': 4313, 'closed': datetime.datetime(2020, 6, 26, 13, 34, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 23, 19, 23, 8, tzinfo=datetime.timezone.utc), 'time_taken': 238304.0, 'time_delta': '2 days, 18:11:44', 'additions': 1462, 'deletions': 1, 'state': 'closed'}, {'id': 437587486, 'number': 4309, 'closed': datetime.datetime(2020, 6, 26, 13, 15, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 21, 19, 9, 2, tzinfo=datetime.timezone.utc), 'time_taken': 410759.0, 'time_delta': '4 days, 18:05:59', 'additions': 272, 'deletions': 6, 'state': 'closed'}, {'id': 434115299, 'number': 4288, 'closed': datetime.datetime(2020, 6, 16, 9, 12, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 14, 8, 56, 18, tzinfo=datetime.timezone.utc), 'time_taken': 173748.0, 'time_delta': '2 days, 0:15:48', 'additions': 13, 'deletions': 4, 'state': 'closed'}, {'id': 424670058, 'number': 4213, 'closed': datetime.datetime(2020, 7, 8, 16, 5, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 28, 18, 53, 17, tzinfo=datetime.timezone.utc), 'time_taken': 3532312.0, 'time_delta': '40 days, 21:11:52', 'additions': 1735, 'deletions': 438, 'state': 'closed'}, {'id': 415681161, 'number': 4132, 'closed': datetime.datetime(2020, 5, 10, 18, 43, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 10, 7, 24, 37, tzinfo=datetime.timezone.utc), 'time_taken': 40748.0, 'time_delta': '11:19:08', 'additions': 22, 'deletions': 2, 'state': 'closed'}, {'id': 415572147, 'number': 4131, 'closed': datetime.datetime(2020, 5, 10, 17, 25, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 9, 12, 57, 29, tzinfo=datetime.timezone.utc), 'time_taken': 102474.0, 'time_delta': '1 day, 4:27:54', 'additions': 6, 'deletions': 4, 'state': 'closed'}, {'id': 407948644, 'number': 4055, 'closed': datetime.datetime(2020, 11, 14, 18, 44, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 23, 14, 9, 17, tzinfo=datetime.timezone.utc), 'time_taken': 17728542.0, 'time_delta': '205 days, 4:35:42', 'additions': 145, 'deletions': 5, 'state': 'closed'}, {'id': 404608351, 'number': 4026, 'closed': datetime.datetime(2020, 9, 19, 10, 17, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 16, 18, 48, 19, tzinfo=datetime.timezone.utc), 'time_taken': 13447724.0, 'time_delta': '155 days, 15:28:44', 'additions': 22, 'deletions': 26, 'state': 'closed'}, {'id': 402096495, 'number': 4011, 'closed': datetime.datetime(2020, 8, 10, 12, 15, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 10, 22, 55, 13, tzinfo=datetime.timezone.utc), 'time_taken': 10502407.0, 'time_delta': '121 days, 13:20:07', 'additions': 77, 'deletions': 6, 'state': 'closed'}, {'id': 399890945, 'number': 3994, 'closed': datetime.datetime(2020, 4, 9, 11, 3, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 6, 20, 34, 8, tzinfo=datetime.timezone.utc), 'time_taken': 224968.0, 'time_delta': '2 days, 14:29:28', 'additions': 25, 'deletions': 4, 'state': 'closed'}, {'id': 397801792, 'number': 3974, 'closed': datetime.datetime(2020, 4, 17, 10, 13, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 2, 20, 45, 21, tzinfo=datetime.timezone.utc), 'time_taken': 1258064.0, 'time_delta': '14 days, 13:27:44', 'additions': 77, 'deletions': 33, 'state': 'closed'}, {'id': 397191823, 'number': 3956, 'closed': datetime.datetime(2020, 4, 4, 13, 8, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 1, 19, 35, 49, tzinfo=datetime.timezone.utc), 'time_taken': 235946.0, 'time_delta': '2 days, 17:32:26', 'additions': 11, 'deletions': 7, 'state': 'closed'}, {'id': 384372535, 'number': 3863, 'closed': datetime.datetime(2020, 7, 3, 13, 35, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 5, 16, 21, 3, tzinfo=datetime.timezone.utc), 'time_taken': 10358047.0, 'time_delta': '119 days, 21:14:07', 'additions': 75, 'deletions': 111, 'state': 'closed'}, {'id': 376584270, 'number': 3813, 'closed': datetime.datetime(2020, 2, 18, 12, 17, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 18, 12, 15, 3, tzinfo=datetime.timezone.utc), 'time_taken': 128.0, 'time_delta': '0:02:08', 'additions': 3, 'deletions': 3, 'state': 'closed'}, {'id': 376341022, 'number': 3812, 'closed': datetime.datetime(2020, 5, 13, 17, 17, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 17, 22, 54, tzinfo=datetime.timezone.utc), 'time_taken': 7410214.0, 'time_delta': '85 days, 18:23:34', 'additions': 186, 'deletions': 1, 'state': 'closed'}, {'id': 376340719, 'number': 3811, 'closed': datetime.datetime(2020, 5, 13, 17, 17, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 17, 22, 52, 22, tzinfo=datetime.timezone.utc), 'time_taken': 7410322.0, 'time_delta': '85 days, 18:25:22', 'additions': 388, 'deletions': 1, 'state': 'closed'}, {'id': 376340575, 'number': 3810, 'closed': datetime.datetime(2020, 5, 13, 17, 17, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 17, 22, 51, 34, tzinfo=datetime.timezone.utc), 'time_taken': 7410383.0, 'time_delta': '85 days, 18:26:23', 'additions': 199, 'deletions': 1, 'state': 'closed'}, {'id': 376340145, 'number': 3809, 'closed': datetime.datetime(2020, 5, 13, 17, 18, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 17, 22, 49, 24, tzinfo=datetime.timezone.utc), 'time_taken': 7410527.0, 'time_delta': '85 days, 18:28:47', 'additions': 224, 'deletions': 1, 'state': 'closed'}, {'id': 371367923, 'number': 3763, 'closed': datetime.datetime(2020, 5, 18, 13, 57, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 5, 13, 16, 16, tzinfo=datetime.timezone.utc), 'time_taken': 8901659.0, 'time_delta': '103 days, 0:40:59', 'additions': 1080, 'deletions': 4, 'state': 'closed'}, {'id': 364270175, 'number': 3705, 'closed': datetime.datetime(2020, 5, 13, 16, 40, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 17, 18, 41, 55, tzinfo=datetime.timezone.utc), 'time_taken': 10101532.0, 'time_delta': '116 days, 21:58:52', 'additions': 574, 'deletions': 1, 'state': 'closed'}, {'id': 361605404, 'number': 3676, 'closed': datetime.datetime(2020, 1, 11, 11, 7, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 10, 20, 14, 11, tzinfo=datetime.timezone.utc), 'time_taken': 53623.0, 'time_delta': '14:53:43', 'additions': 3, 'deletions': 64, 'state': 'closed'}, {'id': 351002263, 'number': 3595, 'closed': datetime.datetime(2019, 12, 15, 12, 38, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 12, 9, 20, 18, 12, tzinfo=datetime.timezone.utc), 'time_taken': 490818.0, 'time_delta': '5 days, 16:20:18', 'additions': 42, 'deletions': 32, 'state': 'closed'}]"
