pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
672689255,docs: add usage and API design in README.md,"**Description**

Following the discussion in #4, I've modified the API of optimizer library.

**Related issue(s)**
Closes #4 ",True,5,https://api.github.com/repos/asyncapi/optimizer/pulls/5,https://github.com/asyncapi/optimizer/pull/5,closed,242,1,1,13,2,9,0,0,[],2021-06-17 14:26:06+00:00,2021-06-28 06:57:38+00:00,923492.0,"10 days, 16:31:32","[{'comment_id': 654232497, 'comment_body': '```suggestion\r\n`document` is a mandatory object which is the parsed AsyncAPI specification from `@asyncapi/parser`:\r\n```', 'comment_created': datetime.datetime(2021, 6, 18, 8, 11, 31, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 654234292, 'comment_body': 'In the https://github.com/asyncapi/optimizer/issues/4 issue you have set true as default value for `reuseComponents` and `moveToComponents`. Why you change it? I think that everything (by default) should be set to true.', 'comment_created': datetime.datetime(2021, 6, 18, 8, 14, 9, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 654236824, 'comment_body': ""You use the `Report` type below so you should also import it :)\r\n\r\n```suggestion\r\nimport { Optimizer } from '@asyncapi/optimizer';\r\nimport type { Report } from '@asyncapi/optimizer';\r\n```"", 'comment_created': datetime.datetime(2021, 6, 18, 8, 17, 47, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 654282077, 'comment_body': 'Sorry about that, I meant to make them true.ðŸ˜†', 'comment_created': datetime.datetime(2021, 6, 18, 9, 25, 6, tzinfo=datetime.timezone.utc), 'commenter': 'KhudaDad414', 'type': 'User'}, {'comment_id': 656139107, 'comment_body': 'I know it is readme, but let\'s add a line break between lines 11 and 12. Looks more readable in the readme\r\n<img width=""494"" alt=""Screenshot 2021-06-22 at 5 14 17 PM"" src=""https://user-images.githubusercontent.com/11012686/122918923-48c25480-d37d-11eb-9da0-1b548b713986.png"">\r\n', 'comment_created': datetime.datetime(2021, 6, 22, 11, 44, 50, tzinfo=datetime.timezone.utc), 'commenter': 'jazzyarchitects', 'type': 'User'}, {'comment_id': 656139805, 'comment_body': 'Line break here as well', 'comment_created': datetime.datetime(2021, 6, 22, 11, 45, 57, tzinfo=datetime.timezone.utc), 'commenter': 'jazzyarchitects', 'type': 'User'}, {'comment_id': 656140998, 'comment_body': 'Another suggestion: Once you have the optimizer variable in the first block, it might be a good idea to create two more sections with seperate headings and add examples there. Example:\r\n\r\nAlso, prefer `const` :P \r\n\r\n## Generating report\r\n```js\r\nlet report: Report = await optimizer.getReport();\r\n/*\r\nthe report value will be:\r\n{\r\n  reuseComponents: [\r\n    {\r\n      path: \'#/channels/channel1/smartylighting/event/{streetlightId}/lighting/measured/message/payload/properties/sentAt\',\r\n      action: \'reuse\',\r\n      target: \'#/components/schemas/sentAt\'\r\n    }\r\n  ],\r\n  removeComponents: [\r\n    {\r\n      path: \'#/components/messages/unusedMessage\',\r\n      action: \'remove\',\r\n    }\r\n  ],\r\n  moveToComponents: [\r\n    {\r\n      //move will ref the current path to the moved component as well.\r\n      path: \'#/channels/smartylighting/event/{streetlightId}/lighting/measured/parameters/streetlightId\',\r\n      action: \'move\',\r\n      target: \'#/components/parameters/streetlightId\'\r\n    },\r\n    {\r\n      path: \'#/channels/smartylighting/action/{streetlightId}/turn/on/parameters/streetlightId\',\r\n      action: \'reuse\',\r\n      target: \'#/components/parameters/streetlightId\'\r\n    }\r\n  ]\r\n}\r\n */\r\n```\r\n\r\n## Applying the suggested changes\r\n```js\r\nlet optimizedDocument = optimizer.getOptimizedDocument({rules: {reuseComponents: true,removeComponents: true,moveToComponents: true }})\r\n/*\r\nthe optimizedDocument value will be:\r\n\r\nasyncapi: 2.0.0\r\ninfo:\r\n  title: Streetlights API\r\n  version: \'1.0.0\'\r\n\r\nchannels:\r\n\r\n  smartylighting/event/{streetlightId}/lighting/measured:\r\n    parameters:\r\n      streetlightId:\r\n        $ref: ""#/components/schemas/streetlightId""\r\n    subscribe:\r\n      operationId: receiveLightMeasurement\r\n      traits:\r\n        - bindings:\r\n            kafka:\r\n              clientId: my-app-id\r\n      message:\r\n        name: lightMeasured\r\n        title: Light measured\r\n        contentType: application/json\r\n        traits:\r\n          - headers:\r\n              type: object\r\n              properties:\r\n                my-app-header:\r\n                  type: integer\r\n                  minimum: 0\r\n                  maximum: 100\r\n        payload:\r\n          type: object\r\n          properties:\r\n            lumens:\r\n              type: integer\r\n              minimum: 0\r\n            #full form is used, we can ref it to: #/components/schemas/sentAt\r\n            sentAt:\r\n              $ref: ""#/components/schemas/sentAt""\r\n\r\n  smartylighting/action/{streetlightId}/turn/on:\r\n    parameters:\r\n      streetlightId:\r\n        $ref: ""#/components/schemas/streetlightId""\r\n    publish:\r\n      operationId: turnOn\r\n      traits:\r\n        - bindings:\r\n            kafka:\r\n              clientId: my-app-id\r\n      message:\r\n        name: turnOnOff\r\n        title: Turn on/off\r\n        traits:\r\n          - headers:\r\n              type: object\r\n              properties:\r\n                my-app-header:\r\n                  type: integer\r\n                  minimum: 0\r\n                  maximum: 100\r\n        payload:\r\n          type: object\r\n          properties:\r\n            sentAt:\r\n              $ref: ""#/components/schemas/sentAt""\r\n\r\ncomponents:\r\n  parameters:\r\n    streetlightId:\r\n      schema:\r\n      type: string\r\n  schemas:\r\n    #this schema is ref-ed in one channel and used full form in another. library should be able to identify and ref the second channel as well.\r\n    sentAt:\r\n      type: string\r\n      format: date-time`\r\n */\r\n```', 'comment_created': datetime.datetime(2021, 6, 22, 11, 47, 46, tzinfo=datetime.timezone.utc), 'commenter': 'jazzyarchitects', 'type': 'User'}, {'comment_id': 656142396, 'comment_body': 'Instead of a single line, you can split into multiple lines here which prevents the weird horizontal scroll in readme\r\n<img width=""1087"" alt=""Screenshot 2021-06-22 at 5 18 52 PM"" src=""https://user-images.githubusercontent.com/11012686/122919489-ec136980-d37d-11eb-8ecb-8b8f0faa0dd3.png"">\r\n\r\nvs\r\n```js\r\nconst optimizedDocument = optimizer.getOptimizedDocument({\r\n  rules: {\r\n    reuseComponents: true,\r\n    removeComponents: true,\r\n    moveToComponents: true \r\n  }\r\n});\r\n\r\n```', 'comment_created': datetime.datetime(2021, 6, 22, 11, 49, 44, tzinfo=datetime.timezone.utc), 'commenter': 'jazzyarchitects', 'type': 'User'}, {'comment_id': 656143709, 'comment_body': 'I think having a description of the return type of the function might be helpful. Tells the developer what are the expected values in the output and the format. ', 'comment_created': datetime.datetime(2021, 6, 22, 11, 51, 37, tzinfo=datetime.timezone.utc), 'commenter': 'jazzyarchitects', 'type': 'User'}]","[{'commit_sha': '5c3a67f7c1e165274af5781399baae8877c7ffc8', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a9a6337700b7c1aef35752b96193a20dde0f10a', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0081509652fb6f8391df25d77e615a1dcdaad251', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '37973f772793851c83c26f158901b53844d0ef9b', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1871a81c2c5fb39a37d2b83d7edefa04e7134392', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '136228ea622802bcbd3d5183b6b31f13c0b9b6c4', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd465b9dd1714e0edf9e4a79de577f7e9d13e5dd3', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef6d01d46179d7f99eb5e3b76b2eed7efd79702e', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c5b8291d3e52c6932cba8c1bd452b48e7359fd2b', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6bebea82508170e3fe18880b1c42296f0f57b690', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7812a0df2909b92fd2988f1b27b764edbd70def8', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b0dd2396b88e5a07e5c00fdadf23546c08d6469', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a33c9f4fbf864b78fa797f44182c85e34291cb8', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}]",Khuda Dad Nomani,32505158,,User,,56,,15,37
683118111,feat: Implement the first version,"**Description**

- this PR is meant to implement the first version of the library.
- after confirmation, I will add tests and refine the documentation for this part. 
- fixes #7, fixes #12 ",True,8,https://api.github.com/repos/asyncapi/optimizer/pulls/8,https://github.com/asyncapi/optimizer/pull/8,closed,4448,2461,21,60,22,59,0,0,[],2021-07-04 05:31:03+00:00,2021-08-10 12:20:03+00:00,3221340.0,"37 days, 6:49:00","[{'comment_id': 679011432, 'comment_body': 'is it generated or? in a followup PR this could be improved and generation automated like we have with parser -> https://github.com/asyncapi/parser-js/blob/master/package.json#L13', 'comment_created': datetime.datetime(2021, 7, 29, 10, 2, 40, tzinfo=datetime.timezone.utc), 'commenter': 'derberg', 'type': 'User'}, {'comment_id': 679012279, 'comment_body': ""isn't the standard approach to put it in `dist`?"", 'comment_created': datetime.datetime(2021, 7, 29, 10, 3, 54, tzinfo=datetime.timezone.utc), 'commenter': 'derberg', 'type': 'User'}, {'comment_id': 679223779, 'comment_body': 'No, it is not generated. I will definitely look into it in a separate PR.', 'comment_created': datetime.datetime(2021, 7, 29, 14, 49, 11, tzinfo=datetime.timezone.utc), 'commenter': 'KhudaDad414', 'type': 'User'}, {'comment_id': 679224717, 'comment_body': 'You mean the output directory of Typescript?', 'comment_created': datetime.datetime(2021, 7, 29, 14, 50, 9, tzinfo=datetime.timezone.utc), 'commenter': 'KhudaDad414', 'type': 'User'}, {'comment_id': 679375620, 'comment_body': '@KhudaDad414 Lets try to format the code in a more readable fashion. My personal favorites which make a ton of difference are:\r\n1. Blank line before `return` unless it is the first line of the block.\r\n2. Blank line before and after `if` unless it is the first line of the block.\r\n3. Blank line before & after a set of `const`  unless it is the first line of the block.\r\n4. Whitespace after `,` when passing parameters or defining arrays', 'comment_created': datetime.datetime(2021, 7, 29, 18, 5, 52, tzinfo=datetime.timezone.utc), 'commenter': 'jazzyarchitects', 'type': 'User'}, {'comment_id': 679377411, 'comment_body': 'Since you are already using lodash, you can use `_.has(x, p)`', 'comment_created': datetime.datetime(2021, 7, 29, 18, 8, 36, tzinfo=datetime.timezone.utc), 'commenter': 'jazzyarchitects', 'type': 'User'}, {'comment_id': 679377908, 'comment_body': 'Inconsistent spacing after `{`', 'comment_created': datetime.datetime(2021, 7, 29, 18, 9, 20, tzinfo=datetime.timezone.utc), 'commenter': 'jazzyarchitects', 'type': 'User'}, {'comment_id': 679379238, 'comment_body': 'The JSDoc seems to be not of this function ðŸ¤” ', 'comment_created': datetime.datetime(2021, 7, 29, 18, 11, 20, tzinfo=datetime.timezone.utc), 'commenter': 'jazzyarchitects', 'type': 'User'}, {'comment_id': 679383167, 'comment_body': 'One a first glance, this line is not conveying what it is doing.\r\n\r\nSimply translating, it seems like:\r\nIf JSON of value1 and JSON of value2 are not equal (it is fine till here) and compare components value1 and value2\r\n\r\nInstead a better naming would have been somthing like `areSame(value1.json(), value2.json())\r\n\r\nOr even better if value1 is an object of some class, you can have some method on it\r\n```js\r\nclass Component {\r\n   isEqual(component) {\r\n   // Logic here\r\n  }\r\n}\r\n```\r\n\r\nwhen then can be used as \r\n```js\r\nvalue1.isEqual(value2)\r\n```', 'comment_created': datetime.datetime(2021, 7, 29, 18, 17, 6, tzinfo=datetime.timezone.utc), 'commenter': 'jazzyarchitects', 'type': 'User'}, {'comment_id': 679384188, 'comment_body': 'Looking at other places of this, the entire line can be a class method like\r\n\r\n```js\r\nclass Component {\r\n  isEqual(value) {\r\n     return this.json() !== value.json() && compareComponents(this.json(), value.json())\r\n  }\r\n}\r\n```', 'comment_created': datetime.datetime(2021, 7, 29, 18, 18, 38, tzinfo=datetime.timezone.utc), 'commenter': 'jazzyarchitects', 'type': 'User'}, {'comment_id': 679386157, 'comment_body': 'IMO you should have a utils function `isComponent` which takes a string as input and does this startsWith check. Using this function everywhere improves readability and in case the definition of `component` changes, you need to do it only at one place. ', 'comment_created': datetime.datetime(2021, 7, 29, 18, 21, 42, tzinfo=datetime.timezone.utc), 'commenter': 'jazzyarchitects', 'type': 'User'}, {'comment_id': 679388557, 'comment_body': 'Lets try to reduce nested ifs here. \r\n\r\n```js\r\n  const matchedKey = this.getMatch(key1, value2, components);\r\n\r\nif (!matchedKey) continue;\r\n\r\nconst shouldCreateNewEntry = this.reuseOldEntry(key1, matchedKey, elements);\r\n\r\nif (!shouldCreateNewEntry) return\r\n\r\n...\r\n```', 'comment_created': datetime.datetime(2021, 7, 29, 18, 25, 21, tzinfo=datetime.timezone.utc), 'commenter': 'jazzyarchitects', 'type': 'User'}, {'comment_id': 679754639, 'comment_body': '`dist` and `lib` are most used :) We can stay with `lib`.', 'comment_created': datetime.datetime(2021, 7, 30, 8, 39, 27, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 679754967, 'comment_body': 'Yeah, leave it for the followup PR :)', 'comment_created': datetime.datetime(2021, 7, 30, 8, 40, 1, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 679763020, 'comment_body': ""We can extend the `eslint` rules to achieve that. I don't think so that it should be done manually. Everyone has another manner to write the code and we should use tool to achieve the consistency in the remote source. @KhudaDad414 Could you create issue for that?"", 'comment_created': datetime.datetime(2021, 7, 30, 8, 52, 38, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 679763184, 'comment_body': 'Ref -> https://github.com/asyncapi/optimizer/pull/8#discussion_r679763020', 'comment_created': datetime.datetime(2021, 7, 30, 8, 52, 55, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 679806197, 'comment_body': ""You have bug in the Readme.md because you show the unoptimized doc - you have still duplicated:\r\n\r\n```yaml\r\n          - headers:\r\n              type: object\r\n              properties:\r\n                my-app-header:\r\n                  type: integer\r\n                  minimum: 0\r\n                  maximum: 100\r\n```\r\n\r\nYou wrote in the PR description:\r\n\r\n> only report generation for reuseComponents is implemented (report generation code for removeComponents and moveToComponents will be added in separate PRs).\r\n\r\nso probably I don't understand something, or we truly have bug in Readme.md"", 'comment_created': datetime.datetime(2021, 7, 30, 10, 0, 41, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 679811277, 'comment_body': ""It's not a good approach, because if you run in same time the `new Optimizer(doc)` two and more times then here you will always operate on the first instance. I think that `Optimizer class` should have the `componentProvider` field with instance of this class, so this class shouldn't be singleton."", 'comment_created': datetime.datetime(2021, 7, 30, 10, 9, 3, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 679814258, 'comment_body': 'Why do you operate on `traits[0]` here? You should operate like for `payload` and scan the `traits` for checking the `message` and `headers` in separate way.', 'comment_created': datetime.datetime(2021, 7, 30, 10, 14, 11, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 679814525, 'comment_body': ""You don't have `Options` interface in the `./Models/Options` folder"", 'comment_created': datetime.datetime(2021, 7, 30, 10, 14, 41, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 679817392, 'comment_body': ""You should be consistent and use the ESM:\r\n\r\n```suggestion\r\nimport merge from 'merge-deep';\r\nimport * as _ from 'lodash';\r\n```"", 'comment_created': datetime.datetime(2021, 7, 30, 10, 19, 54, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 679819941, 'comment_body': 'You should add the types for this JSDoc params and return', 'comment_created': datetime.datetime(2021, 7, 30, 10, 24, 21, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 679820415, 'comment_body': ""Please describe in short comment (above `for...`) why you use the `Object.prototype.hasOwnProperty.call` function not `X.hasOwnProperty(...)`, because in first look it's very hard to understand :) If someone will want to contribute should understand reason through the comment."", 'comment_created': datetime.datetime(2021, 7, 30, 10, 25, 13, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 679824226, 'comment_body': 'Comments should be written above the line, not under.', 'comment_created': datetime.datetime(2021, 7, 30, 10, 32, 24, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 679824928, 'comment_body': 'Please describe why extension is skipped.', 'comment_created': datetime.datetime(2021, 7, 30, 10, 33, 43, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 679940536, 'comment_body': 'sorry, my bad. edited the PR description and I will edit the docs.', 'comment_created': datetime.datetime(2021, 7, 30, 13, 50, 9, tzinfo=datetime.timezone.utc), 'commenter': 'KhudaDad414', 'type': 'User'}, {'comment_id': 679944012, 'comment_body': 'I will generate it dynamically instead of hardcoding.', 'comment_created': datetime.datetime(2021, 7, 30, 13, 54, 51, tzinfo=datetime.timezone.utc), 'commenter': 'KhudaDad414', 'type': 'User'}, {'comment_id': 679951772, 'comment_body': ""If I use `X.hasOwnProperty(...)` ESLINT will give the following error.\r\n`ESLint: Do not access Object.prototype method 'hasOwnProperty' from target object.(no-prototype-builtins)`"", 'comment_created': datetime.datetime(2021, 7, 30, 14, 5, 16, tzinfo=datetime.timezone.utc), 'commenter': 'KhudaDad414', 'type': 'User'}, {'comment_id': 679954989, 'comment_body': ""because extensions have different values for objects that are equal (duplicated.) If I don't skip the extensions this function always returns false."", 'comment_created': datetime.datetime(2021, 7, 30, 14, 9, 19, tzinfo=datetime.timezone.utc), 'commenter': 'KhudaDad414', 'type': 'User'}, {'comment_id': 680521649, 'comment_body': '@magicmatatjahu I am using TSDOC to annotate and generate documentation. It will figure out the types in the documentation and in code, well, it is in the function definition. If you think TSDOC is not mature enough, I will change them to JSDOC.', 'comment_created': datetime.datetime(2021, 8, 1, 14, 45, 13, tzinfo=datetime.timezone.utc), 'commenter': 'KhudaDad414', 'type': 'User'}, {'comment_id': 680703012, 'comment_body': 'I meant to write a comment about ðŸ˜…  Sorry', 'comment_created': datetime.datetime(2021, 8, 2, 7, 3, 11, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 680706514, 'comment_body': 'TBH I have no opinion on this. In the other repos we use the JSDoc, so others would suggest you to use the JSDoc... probably JSDoc will be better now :)', 'comment_created': datetime.datetime(2021, 8, 2, 7, 10, 6, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 680770034, 'comment_body': 'Where you scan `message.headers`? Remember that `payload` can be also also in the `traits`.', 'comment_created': datetime.datetime(2021, 8, 2, 8, 20, 21, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 680912679, 'comment_body': 'We have a function for that. `this.scanHeader`.\nI was thinking about implementing the scanning and optimization for the whole traits. But this PR has become too large for additional features. Because of that I stuck with the current features and I will take care of traits in a seperate PR.', 'comment_created': datetime.datetime(2021, 8, 2, 12, 3, 2, tzinfo=datetime.timezone.utc), 'commenter': 'KhudaDad414', 'type': 'User'}, {'comment_id': 680914608, 'comment_body': ""But I mean that you don't check the `message.headers` only `message.payload` here."", 'comment_created': datetime.datetime(2021, 8, 2, 12, 6, 25, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 680923648, 'comment_body': ""For clarify: you do this:\r\n\r\n```ts\r\n    const payload = message.payload();\r\n\r\n    if (payload) {\r\n```\r\n\r\nbut I don't see this:\r\n\r\n```ts\r\n    const headers = message.headers();\r\n\r\n    if (headers) {\r\n```\r\n\r\nyou can define `headers` without `traits`."", 'comment_created': datetime.datetime(2021, 8, 2, 12, 20, 33, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 680928179, 'comment_body': ' If we can have `headers` in traits and outside traits:\n1) does `message.headers()` check both places and return the existing one? \n\n2) What if we have headers in both places at the same time? Then what happens?', 'comment_created': datetime.datetime(2021, 8, 2, 12, 27, 31, tzinfo=datetime.timezone.utc), 'commenter': 'KhudaDad414', 'type': 'User'}, {'comment_id': 680932051, 'comment_body': '`message.headers()` function returns merged plain headers from `message.headers` field and from traits.\r\n\r\nYou should operate on the doc before optimization, because then someone can define some headers in `message.headers` property and also add additional headers in traits. You should check duplication here and here - traits you can leave for separate PR. This same situation is with `payload`. You can define payload in `message.payload` and `message.traits.*.payload`.\r\n\r\nMessage Trait is set of values that can be used to extend the given message.', 'comment_created': datetime.datetime(2021, 8, 2, 12, 33, 50, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 681058150, 'comment_body': '```suggestion\r\n# Optimizer\r\n```', 'comment_created': datetime.datetime(2021, 8, 2, 15, 15, 47, tzinfo=datetime.timezone.utc), 'commenter': 'derberg', 'type': 'User'}, {'comment_id': 681059924, 'comment_body': '```suggestion\r\nAsyncAPI offers many ways to reuse certain parts of the document like messages or schemas definitions or references to external files, not to even mention the traits. Purpose of **AsyncAPI Optimizer** is to enable different ways to optimize AsyncAPI files. It is a library that can be used in UIs and CLIs.\r\n```', 'comment_created': datetime.datetime(2021, 8, 2, 15, 17, 46, tzinfo=datetime.timezone.utc), 'commenter': 'derberg', 'type': 'User'}, {'comment_id': 681068443, 'comment_body': 'Imho it is not a good way of testing the library, to tell the user to close and edit the main source code.  \r\nI would just remove this section and instead using examples from Usage section, create `index.js` file in `examples` directory. And create an npm script that I can call to run the example, like `asyncapi run example` and then in readme you can just have a clear information that you can quickly check the library by running the example, and that user can modify the example and put their file as an input.', 'comment_created': datetime.datetime(2021, 8, 2, 15, 28, 34, tzinfo=datetime.timezone.utc), 'commenter': 'derberg', 'type': 'User'}, {'comment_id': 681710768, 'comment_body': '@magicmatatjahu I was thinking about how to approach `headers` and `payload` optimization. I think the best approach would be to optimize the `message.headers` and `message.payload` property for now without using the `message.headers() `or `message.payload()`. then we can optimize the `message.traits.*.headers` and `message.traits.*.payload` as a part of `traits` optimization.\r\nwhat do you think?', 'comment_created': datetime.datetime(2021, 8, 3, 12, 29, 12, tzinfo=datetime.timezone.utc), 'commenter': 'KhudaDad414', 'type': 'User'}, {'comment_id': 681727105, 'comment_body': '@derberg done.', 'comment_created': datetime.datetime(2021, 8, 3, 12, 51, 8, tzinfo=datetime.timezone.utc), 'commenter': 'KhudaDad414', 'type': 'User'}, {'comment_id': 683219663, 'comment_body': ""make sure you protect here properly as `traits` are optional feature, so might be that document doesn't have them and therefore you end up with error when trying `traits.length`"", 'comment_created': datetime.datetime(2021, 8, 5, 7, 58, 1, tzinfo=datetime.timezone.utc), 'commenter': 'derberg', 'type': 'User'}, {'comment_id': 683222231, 'comment_body': 'I did not investigate deeper but looks to me like library supports YAML only, as when I pass JSON as string or object, it fails.\r\n\r\nalso readme says \r\n```\r\n#### new Optimizer(document)\r\n\r\n`document` is a mandatory object which is the parsed AsyncAPI specification from `@asyncapi/parser`:\r\n```\r\n\r\nbut I believe it is not true', 'comment_created': datetime.datetime(2021, 8, 5, 8, 1, 29, tzinfo=datetime.timezone.utc), 'commenter': 'derberg', 'type': 'User'}, {'comment_id': 683514566, 'comment_body': 'I am planning to add support for JSON and string JSONs. but this PR has become too complicated to add new things to it. so I am opening an issue (#15 ) to support them in the near future (after this PR.).', 'comment_created': datetime.datetime(2021, 8, 5, 14, 36, 17, tzinfo=datetime.timezone.utc), 'commenter': 'KhudaDad414', 'type': 'User'}, {'comment_id': 683516741, 'comment_body': '@KhudaDad414 good decision, then just fix issue with readme and traits and let us party merge ðŸ˜„ ', 'comment_created': datetime.datetime(2021, 8, 5, 14, 38, 32, tzinfo=datetime.timezone.utc), 'commenter': 'derberg', 'type': 'User'}, {'comment_id': 683517917, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 5, 14, 39, 44, tzinfo=datetime.timezone.utc), 'commenter': 'KhudaDad414', 'type': 'User'}, {'comment_id': 683519428, 'comment_body': '@magicmatatjahu  Done. I have taken a different approach for handling this issue please take a look.', 'comment_created': datetime.datetime(2021, 8, 5, 14, 41, 15, tzinfo=datetime.timezone.utc), 'commenter': 'KhudaDad414', 'type': 'User'}, {'comment_id': 685043697, 'comment_body': 'You can switch from numbers to enum type, it will be better. ', 'comment_created': datetime.datetime(2021, 8, 9, 9, 30, 55, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 685046145, 'comment_body': 'Tip: you should avoid using the arrow function inside class, because then their definition is created for each instance - in opposite the normal function are saved to prototype of class. It can stay, but have it in mind for the future :)', 'comment_created': datetime.datetime(2021, 8, 9, 9, 34, 53, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 685377677, 'comment_body': ""@KhudaDad414 I'll suggest to use enums here instead of numbers. Referencing and remembering numbers elsewhere is not very scalable approach. "", 'comment_created': datetime.datetime(2021, 8, 9, 17, 15, 50, tzinfo=datetime.timezone.utc), 'commenter': 'jazzyarchitects', 'type': 'User'}, {'comment_id': 685378195, 'comment_body': 'When `i` is already a number, why do you need to parseInt again? ðŸ¤” ', 'comment_created': datetime.datetime(2021, 8, 9, 17, 16, 39, tzinfo=datetime.timezone.utc), 'commenter': 'jazzyarchitects', 'type': 'User'}, {'comment_id': 685380121, 'comment_body': 'Is some implementation missing here? Else why do you need this constructor? ', 'comment_created': datetime.datetime(2021, 8, 9, 17, 19, 45, tzinfo=datetime.timezone.utc), 'commenter': 'jazzyarchitects', 'type': 'User'}, {'comment_id': 685382026, 'comment_body': ""@KhudaDad414 I see you imported lodash anyway. I'd say lets make the best use of it. `_.isEmpty(parent)` seems more readable and also does not break on undefined parent.  "", 'comment_created': datetime.datetime(2021, 8, 9, 17, 22, 27, tzinfo=datetime.timezone.utc), 'commenter': 'jazzyarchitects', 'type': 'User'}, {'comment_id': 685382733, 'comment_body': ""`_.has` will return false even if `parent` is undefined. So you don't need to additionally check `!parent`"", 'comment_created': datetime.datetime(2021, 8, 9, 17, 23, 32, tzinfo=datetime.timezone.utc), 'commenter': 'jazzyarchitects', 'type': 'User'}, {'comment_id': 685656878, 'comment_body': ""If I don't parse it, I will get this error: `ESLint: Generic Object Injection Sink(security/detect-object-injection)`"", 'comment_created': datetime.datetime(2021, 8, 10, 3, 7, 25, tzinfo=datetime.timezone.utc), 'commenter': 'KhudaDad414', 'type': 'User'}, {'comment_id': 685657588, 'comment_body': 'I will add support for JSON and JSON strings in the future. the implementation will go there. #15 ', 'comment_created': datetime.datetime(2021, 8, 10, 3, 9, 36, tzinfo=datetime.timezone.utc), 'commenter': 'KhudaDad414', 'type': 'User'}, {'comment_id': 685658111, 'comment_body': 'This lodash thing seems to be more useful than what I thought :)', 'comment_created': datetime.datetime(2021, 8, 10, 3, 11, 20, tzinfo=datetime.timezone.utc), 'commenter': 'KhudaDad414', 'type': 'User'}]","[{'commit_sha': 'a59e1e23f139904b6003c5388464f484c6ad5e93', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46fb0e268b324c13035a678c4bc6639e08cb9802', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c1c50c14adc4a9af11fa366baa292f7ba58a36b', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff5424147340ec9ab6e56cfd71d0f9c42323c64d', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42d055798e9288cafee9b33288c16658a6420e06', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49cb69b9d214d59f0bd363360756bdeb72e01536', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a52579ff30d1444a25ca7198dbf7e1977cbf1c7e', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd0fb00d51ade24f6f1c7746ec39b25c6a8804db', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4987b67d267afb8390fd8a0fd292f9ce344d2766', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90e00ee65962368d7dfebf196a69d00bea453989', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b1068bf98416c1ca20e45fa2e4fbd153362957d7', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c2ad7fa200284809a9ad0c824661d0be3bfbf1c', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '145df371af3e337d8dfb33ed3b797222af34cfb3', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ab5c9a2b839cb1a9044781878ff6a860b63cd4d', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d8e37271a3bc155b1935dca5cfbbf8c204a77db', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee939bbedf327fee4920bfd993d0549d26009b14', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3a6748b9d617b9aa0025be4ad0640234cbbb441', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b4a1c0ac81419f53a822c4e585d50d0698e99f4', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c99dbf7d00f33486a1804fe581269a85cdc9fa14', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca8e55336a2c4736ec849408b2987a46793441d9', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '688c8f73e429be7f6e8698a81ec90409294d756e', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '21b205159d7b9a25bab0715f8d5c0c6513b7f02f', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17da1738b2dc97a8cd7fc1a4cbe9adc55b1f3ef0', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b22adfee7f89d57e6b0a2e5d25b76bb17c6acfc4', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b709f296d6a06af60878f1789cac4500e31a62e5', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd1a987500a42c0f283a5f6edc1ea8b22f3409c4f', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90156c9629c486716bf5eb245257eab3eee10875', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a6a2b423c9910a912249a5089857430b6d07f45f', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2097da8b716a833140a4b61c8523abf17318262e', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c77eaba3295daa40f911143686e8423b1d30fb38', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f45450f33ff2c1722d7a4d20f81884758d0df54', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4938517122c41c3aa75939119132013e16b32f26', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19159a960ea55d87828da10156c018f4e1c20977', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e774e2a4fe59687a2566d6579667d7b30f6bb2cb', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a61567523cae8bea914443f91a0b67a7b24df12c', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '32c91efb2e106aa2c16dfb8f08549912f064035b', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '995c7cdb2c2caa5531d966d99aee18edde568209', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5073d547d76c66fcc995a82d13a86ee860fc53b2', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '768c70d9e63eacb274e771fff20121d83e47ca35', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd464bd4cd8c75a7c98151e0300f6e607f931dca9', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6edb64e0c743acf5173cd5c89cd8292a1017db67', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '24fbd2d01eea242181e9396cf6fc151e1df6c94d', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'acf481cf972050e9f5ba910ede7dbb249e2984cd', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e56324dff4a526b8d9cca6c1ad77e96b2234ee79', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf94f8064ddb0bdc679e123603ae51f032c6bbc1', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ddc460be723a8d3ba4cbfb80bde102c12f999baa', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e34e9010d20fb246ebe6f340a6535f29e9ee80f', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1fa2cd7bd6ebac48ea4965647b5c35eaeba5f021', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88f954226cbd2f426bbfc14f7c648c3519315663', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51dc268be970e0e268ca25c7ec66288ba387a9a4', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f5a7d698e03ddd9e97ed8c433ce9c32d310a343', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f322d59239469ced9ba4518384761ef3efcd10fe', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b38b9423fdd5a973fc1f44c2524db41a2a6aa1f', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '529e92600a64dc6f489ec43a2109d0366468b469', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c082c0bd3470a937d94bf1bfb5e9bc1d94f72a0', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ecd41e33f7ed32a61674a7bb81cee95a2d4a3828', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45f9acfc760e29f143f619f0eb1b3ecb20a6d35b', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'efe57d34d75af30dfc485b6ebfcff62429c01f5a', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ef96fedb7f100cfabc5e11fbd78528217b882e4', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e0b3fd4f24b6a652c2a67dedea74e39a5a51d414', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}]",Khuda Dad Nomani,32505158,,User,,56,,15,37
683118111,feat: Implement the first version,"**Description**

- this PR is meant to implement the first version of the library.
- after confirmation, I will add tests and refine the documentation for this part. 
- fixes #7, fixes #12 ",True,8,https://api.github.com/repos/asyncapi/optimizer/pulls/8,https://github.com/asyncapi/optimizer/pull/8,closed,4448,2461,21,60,22,59,0,0,[],2021-07-04 05:31:03+00:00,2021-08-10 12:20:03+00:00,3221340.0,"37 days, 6:49:00","[{'comment_id': 679011432, 'comment_body': 'is it generated or? in a followup PR this could be improved and generation automated like we have with parser -> https://github.com/asyncapi/parser-js/blob/master/package.json#L13', 'comment_created': datetime.datetime(2021, 7, 29, 10, 2, 40, tzinfo=datetime.timezone.utc), 'commenter': 'derberg', 'type': 'User'}, {'comment_id': 679012279, 'comment_body': ""isn't the standard approach to put it in `dist`?"", 'comment_created': datetime.datetime(2021, 7, 29, 10, 3, 54, tzinfo=datetime.timezone.utc), 'commenter': 'derberg', 'type': 'User'}, {'comment_id': 679223779, 'comment_body': 'No, it is not generated. I will definitely look into it in a separate PR.', 'comment_created': datetime.datetime(2021, 7, 29, 14, 49, 11, tzinfo=datetime.timezone.utc), 'commenter': 'KhudaDad414', 'type': 'User'}, {'comment_id': 679224717, 'comment_body': 'You mean the output directory of Typescript?', 'comment_created': datetime.datetime(2021, 7, 29, 14, 50, 9, tzinfo=datetime.timezone.utc), 'commenter': 'KhudaDad414', 'type': 'User'}, {'comment_id': 679375620, 'comment_body': '@KhudaDad414 Lets try to format the code in a more readable fashion. My personal favorites which make a ton of difference are:\r\n1. Blank line before `return` unless it is the first line of the block.\r\n2. Blank line before and after `if` unless it is the first line of the block.\r\n3. Blank line before & after a set of `const`  unless it is the first line of the block.\r\n4. Whitespace after `,` when passing parameters or defining arrays', 'comment_created': datetime.datetime(2021, 7, 29, 18, 5, 52, tzinfo=datetime.timezone.utc), 'commenter': 'jazzyarchitects', 'type': 'User'}, {'comment_id': 679377411, 'comment_body': 'Since you are already using lodash, you can use `_.has(x, p)`', 'comment_created': datetime.datetime(2021, 7, 29, 18, 8, 36, tzinfo=datetime.timezone.utc), 'commenter': 'jazzyarchitects', 'type': 'User'}, {'comment_id': 679377908, 'comment_body': 'Inconsistent spacing after `{`', 'comment_created': datetime.datetime(2021, 7, 29, 18, 9, 20, tzinfo=datetime.timezone.utc), 'commenter': 'jazzyarchitects', 'type': 'User'}, {'comment_id': 679379238, 'comment_body': 'The JSDoc seems to be not of this function ðŸ¤” ', 'comment_created': datetime.datetime(2021, 7, 29, 18, 11, 20, tzinfo=datetime.timezone.utc), 'commenter': 'jazzyarchitects', 'type': 'User'}, {'comment_id': 679383167, 'comment_body': 'One a first glance, this line is not conveying what it is doing.\r\n\r\nSimply translating, it seems like:\r\nIf JSON of value1 and JSON of value2 are not equal (it is fine till here) and compare components value1 and value2\r\n\r\nInstead a better naming would have been somthing like `areSame(value1.json(), value2.json())\r\n\r\nOr even better if value1 is an object of some class, you can have some method on it\r\n```js\r\nclass Component {\r\n   isEqual(component) {\r\n   // Logic here\r\n  }\r\n}\r\n```\r\n\r\nwhen then can be used as \r\n```js\r\nvalue1.isEqual(value2)\r\n```', 'comment_created': datetime.datetime(2021, 7, 29, 18, 17, 6, tzinfo=datetime.timezone.utc), 'commenter': 'jazzyarchitects', 'type': 'User'}, {'comment_id': 679384188, 'comment_body': 'Looking at other places of this, the entire line can be a class method like\r\n\r\n```js\r\nclass Component {\r\n  isEqual(value) {\r\n     return this.json() !== value.json() && compareComponents(this.json(), value.json())\r\n  }\r\n}\r\n```', 'comment_created': datetime.datetime(2021, 7, 29, 18, 18, 38, tzinfo=datetime.timezone.utc), 'commenter': 'jazzyarchitects', 'type': 'User'}, {'comment_id': 679386157, 'comment_body': 'IMO you should have a utils function `isComponent` which takes a string as input and does this startsWith check. Using this function everywhere improves readability and in case the definition of `component` changes, you need to do it only at one place. ', 'comment_created': datetime.datetime(2021, 7, 29, 18, 21, 42, tzinfo=datetime.timezone.utc), 'commenter': 'jazzyarchitects', 'type': 'User'}, {'comment_id': 679388557, 'comment_body': 'Lets try to reduce nested ifs here. \r\n\r\n```js\r\n  const matchedKey = this.getMatch(key1, value2, components);\r\n\r\nif (!matchedKey) continue;\r\n\r\nconst shouldCreateNewEntry = this.reuseOldEntry(key1, matchedKey, elements);\r\n\r\nif (!shouldCreateNewEntry) return\r\n\r\n...\r\n```', 'comment_created': datetime.datetime(2021, 7, 29, 18, 25, 21, tzinfo=datetime.timezone.utc), 'commenter': 'jazzyarchitects', 'type': 'User'}, {'comment_id': 679754639, 'comment_body': '`dist` and `lib` are most used :) We can stay with `lib`.', 'comment_created': datetime.datetime(2021, 7, 30, 8, 39, 27, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 679754967, 'comment_body': 'Yeah, leave it for the followup PR :)', 'comment_created': datetime.datetime(2021, 7, 30, 8, 40, 1, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 679763020, 'comment_body': ""We can extend the `eslint` rules to achieve that. I don't think so that it should be done manually. Everyone has another manner to write the code and we should use tool to achieve the consistency in the remote source. @KhudaDad414 Could you create issue for that?"", 'comment_created': datetime.datetime(2021, 7, 30, 8, 52, 38, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 679763184, 'comment_body': 'Ref -> https://github.com/asyncapi/optimizer/pull/8#discussion_r679763020', 'comment_created': datetime.datetime(2021, 7, 30, 8, 52, 55, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 679806197, 'comment_body': ""You have bug in the Readme.md because you show the unoptimized doc - you have still duplicated:\r\n\r\n```yaml\r\n          - headers:\r\n              type: object\r\n              properties:\r\n                my-app-header:\r\n                  type: integer\r\n                  minimum: 0\r\n                  maximum: 100\r\n```\r\n\r\nYou wrote in the PR description:\r\n\r\n> only report generation for reuseComponents is implemented (report generation code for removeComponents and moveToComponents will be added in separate PRs).\r\n\r\nso probably I don't understand something, or we truly have bug in Readme.md"", 'comment_created': datetime.datetime(2021, 7, 30, 10, 0, 41, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 679811277, 'comment_body': ""It's not a good approach, because if you run in same time the `new Optimizer(doc)` two and more times then here you will always operate on the first instance. I think that `Optimizer class` should have the `componentProvider` field with instance of this class, so this class shouldn't be singleton."", 'comment_created': datetime.datetime(2021, 7, 30, 10, 9, 3, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 679814258, 'comment_body': 'Why do you operate on `traits[0]` here? You should operate like for `payload` and scan the `traits` for checking the `message` and `headers` in separate way.', 'comment_created': datetime.datetime(2021, 7, 30, 10, 14, 11, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 679814525, 'comment_body': ""You don't have `Options` interface in the `./Models/Options` folder"", 'comment_created': datetime.datetime(2021, 7, 30, 10, 14, 41, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 679817392, 'comment_body': ""You should be consistent and use the ESM:\r\n\r\n```suggestion\r\nimport merge from 'merge-deep';\r\nimport * as _ from 'lodash';\r\n```"", 'comment_created': datetime.datetime(2021, 7, 30, 10, 19, 54, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 679819941, 'comment_body': 'You should add the types for this JSDoc params and return', 'comment_created': datetime.datetime(2021, 7, 30, 10, 24, 21, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 679820415, 'comment_body': ""Please describe in short comment (above `for...`) why you use the `Object.prototype.hasOwnProperty.call` function not `X.hasOwnProperty(...)`, because in first look it's very hard to understand :) If someone will want to contribute should understand reason through the comment."", 'comment_created': datetime.datetime(2021, 7, 30, 10, 25, 13, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 679824226, 'comment_body': 'Comments should be written above the line, not under.', 'comment_created': datetime.datetime(2021, 7, 30, 10, 32, 24, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 679824928, 'comment_body': 'Please describe why extension is skipped.', 'comment_created': datetime.datetime(2021, 7, 30, 10, 33, 43, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 679940536, 'comment_body': 'sorry, my bad. edited the PR description and I will edit the docs.', 'comment_created': datetime.datetime(2021, 7, 30, 13, 50, 9, tzinfo=datetime.timezone.utc), 'commenter': 'KhudaDad414', 'type': 'User'}, {'comment_id': 679944012, 'comment_body': 'I will generate it dynamically instead of hardcoding.', 'comment_created': datetime.datetime(2021, 7, 30, 13, 54, 51, tzinfo=datetime.timezone.utc), 'commenter': 'KhudaDad414', 'type': 'User'}, {'comment_id': 679951772, 'comment_body': ""If I use `X.hasOwnProperty(...)` ESLINT will give the following error.\r\n`ESLint: Do not access Object.prototype method 'hasOwnProperty' from target object.(no-prototype-builtins)`"", 'comment_created': datetime.datetime(2021, 7, 30, 14, 5, 16, tzinfo=datetime.timezone.utc), 'commenter': 'KhudaDad414', 'type': 'User'}, {'comment_id': 679954989, 'comment_body': ""because extensions have different values for objects that are equal (duplicated.) If I don't skip the extensions this function always returns false."", 'comment_created': datetime.datetime(2021, 7, 30, 14, 9, 19, tzinfo=datetime.timezone.utc), 'commenter': 'KhudaDad414', 'type': 'User'}, {'comment_id': 680521649, 'comment_body': '@magicmatatjahu I am using TSDOC to annotate and generate documentation. It will figure out the types in the documentation and in code, well, it is in the function definition. If you think TSDOC is not mature enough, I will change them to JSDOC.', 'comment_created': datetime.datetime(2021, 8, 1, 14, 45, 13, tzinfo=datetime.timezone.utc), 'commenter': 'KhudaDad414', 'type': 'User'}, {'comment_id': 680703012, 'comment_body': 'I meant to write a comment about ðŸ˜…  Sorry', 'comment_created': datetime.datetime(2021, 8, 2, 7, 3, 11, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 680706514, 'comment_body': 'TBH I have no opinion on this. In the other repos we use the JSDoc, so others would suggest you to use the JSDoc... probably JSDoc will be better now :)', 'comment_created': datetime.datetime(2021, 8, 2, 7, 10, 6, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 680770034, 'comment_body': 'Where you scan `message.headers`? Remember that `payload` can be also also in the `traits`.', 'comment_created': datetime.datetime(2021, 8, 2, 8, 20, 21, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 680912679, 'comment_body': 'We have a function for that. `this.scanHeader`.\nI was thinking about implementing the scanning and optimization for the whole traits. But this PR has become too large for additional features. Because of that I stuck with the current features and I will take care of traits in a seperate PR.', 'comment_created': datetime.datetime(2021, 8, 2, 12, 3, 2, tzinfo=datetime.timezone.utc), 'commenter': 'KhudaDad414', 'type': 'User'}, {'comment_id': 680914608, 'comment_body': ""But I mean that you don't check the `message.headers` only `message.payload` here."", 'comment_created': datetime.datetime(2021, 8, 2, 12, 6, 25, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 680923648, 'comment_body': ""For clarify: you do this:\r\n\r\n```ts\r\n    const payload = message.payload();\r\n\r\n    if (payload) {\r\n```\r\n\r\nbut I don't see this:\r\n\r\n```ts\r\n    const headers = message.headers();\r\n\r\n    if (headers) {\r\n```\r\n\r\nyou can define `headers` without `traits`."", 'comment_created': datetime.datetime(2021, 8, 2, 12, 20, 33, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 680928179, 'comment_body': ' If we can have `headers` in traits and outside traits:\n1) does `message.headers()` check both places and return the existing one? \n\n2) What if we have headers in both places at the same time? Then what happens?', 'comment_created': datetime.datetime(2021, 8, 2, 12, 27, 31, tzinfo=datetime.timezone.utc), 'commenter': 'KhudaDad414', 'type': 'User'}, {'comment_id': 680932051, 'comment_body': '`message.headers()` function returns merged plain headers from `message.headers` field and from traits.\r\n\r\nYou should operate on the doc before optimization, because then someone can define some headers in `message.headers` property and also add additional headers in traits. You should check duplication here and here - traits you can leave for separate PR. This same situation is with `payload`. You can define payload in `message.payload` and `message.traits.*.payload`.\r\n\r\nMessage Trait is set of values that can be used to extend the given message.', 'comment_created': datetime.datetime(2021, 8, 2, 12, 33, 50, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 681058150, 'comment_body': '```suggestion\r\n# Optimizer\r\n```', 'comment_created': datetime.datetime(2021, 8, 2, 15, 15, 47, tzinfo=datetime.timezone.utc), 'commenter': 'derberg', 'type': 'User'}, {'comment_id': 681059924, 'comment_body': '```suggestion\r\nAsyncAPI offers many ways to reuse certain parts of the document like messages or schemas definitions or references to external files, not to even mention the traits. Purpose of **AsyncAPI Optimizer** is to enable different ways to optimize AsyncAPI files. It is a library that can be used in UIs and CLIs.\r\n```', 'comment_created': datetime.datetime(2021, 8, 2, 15, 17, 46, tzinfo=datetime.timezone.utc), 'commenter': 'derberg', 'type': 'User'}, {'comment_id': 681068443, 'comment_body': 'Imho it is not a good way of testing the library, to tell the user to close and edit the main source code.  \r\nI would just remove this section and instead using examples from Usage section, create `index.js` file in `examples` directory. And create an npm script that I can call to run the example, like `asyncapi run example` and then in readme you can just have a clear information that you can quickly check the library by running the example, and that user can modify the example and put their file as an input.', 'comment_created': datetime.datetime(2021, 8, 2, 15, 28, 34, tzinfo=datetime.timezone.utc), 'commenter': 'derberg', 'type': 'User'}, {'comment_id': 681710768, 'comment_body': '@magicmatatjahu I was thinking about how to approach `headers` and `payload` optimization. I think the best approach would be to optimize the `message.headers` and `message.payload` property for now without using the `message.headers() `or `message.payload()`. then we can optimize the `message.traits.*.headers` and `message.traits.*.payload` as a part of `traits` optimization.\r\nwhat do you think?', 'comment_created': datetime.datetime(2021, 8, 3, 12, 29, 12, tzinfo=datetime.timezone.utc), 'commenter': 'KhudaDad414', 'type': 'User'}, {'comment_id': 681727105, 'comment_body': '@derberg done.', 'comment_created': datetime.datetime(2021, 8, 3, 12, 51, 8, tzinfo=datetime.timezone.utc), 'commenter': 'KhudaDad414', 'type': 'User'}, {'comment_id': 683219663, 'comment_body': ""make sure you protect here properly as `traits` are optional feature, so might be that document doesn't have them and therefore you end up with error when trying `traits.length`"", 'comment_created': datetime.datetime(2021, 8, 5, 7, 58, 1, tzinfo=datetime.timezone.utc), 'commenter': 'derberg', 'type': 'User'}, {'comment_id': 683222231, 'comment_body': 'I did not investigate deeper but looks to me like library supports YAML only, as when I pass JSON as string or object, it fails.\r\n\r\nalso readme says \r\n```\r\n#### new Optimizer(document)\r\n\r\n`document` is a mandatory object which is the parsed AsyncAPI specification from `@asyncapi/parser`:\r\n```\r\n\r\nbut I believe it is not true', 'comment_created': datetime.datetime(2021, 8, 5, 8, 1, 29, tzinfo=datetime.timezone.utc), 'commenter': 'derberg', 'type': 'User'}, {'comment_id': 683514566, 'comment_body': 'I am planning to add support for JSON and string JSONs. but this PR has become too complicated to add new things to it. so I am opening an issue (#15 ) to support them in the near future (after this PR.).', 'comment_created': datetime.datetime(2021, 8, 5, 14, 36, 17, tzinfo=datetime.timezone.utc), 'commenter': 'KhudaDad414', 'type': 'User'}, {'comment_id': 683516741, 'comment_body': '@KhudaDad414 good decision, then just fix issue with readme and traits and let us party merge ðŸ˜„ ', 'comment_created': datetime.datetime(2021, 8, 5, 14, 38, 32, tzinfo=datetime.timezone.utc), 'commenter': 'derberg', 'type': 'User'}, {'comment_id': 683517917, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 5, 14, 39, 44, tzinfo=datetime.timezone.utc), 'commenter': 'KhudaDad414', 'type': 'User'}, {'comment_id': 683519428, 'comment_body': '@magicmatatjahu  Done. I have taken a different approach for handling this issue please take a look.', 'comment_created': datetime.datetime(2021, 8, 5, 14, 41, 15, tzinfo=datetime.timezone.utc), 'commenter': 'KhudaDad414', 'type': 'User'}, {'comment_id': 685043697, 'comment_body': 'You can switch from numbers to enum type, it will be better. ', 'comment_created': datetime.datetime(2021, 8, 9, 9, 30, 55, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 685046145, 'comment_body': 'Tip: you should avoid using the arrow function inside class, because then their definition is created for each instance - in opposite the normal function are saved to prototype of class. It can stay, but have it in mind for the future :)', 'comment_created': datetime.datetime(2021, 8, 9, 9, 34, 53, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 685377677, 'comment_body': ""@KhudaDad414 I'll suggest to use enums here instead of numbers. Referencing and remembering numbers elsewhere is not very scalable approach. "", 'comment_created': datetime.datetime(2021, 8, 9, 17, 15, 50, tzinfo=datetime.timezone.utc), 'commenter': 'jazzyarchitects', 'type': 'User'}, {'comment_id': 685378195, 'comment_body': 'When `i` is already a number, why do you need to parseInt again? ðŸ¤” ', 'comment_created': datetime.datetime(2021, 8, 9, 17, 16, 39, tzinfo=datetime.timezone.utc), 'commenter': 'jazzyarchitects', 'type': 'User'}, {'comment_id': 685380121, 'comment_body': 'Is some implementation missing here? Else why do you need this constructor? ', 'comment_created': datetime.datetime(2021, 8, 9, 17, 19, 45, tzinfo=datetime.timezone.utc), 'commenter': 'jazzyarchitects', 'type': 'User'}, {'comment_id': 685382026, 'comment_body': ""@KhudaDad414 I see you imported lodash anyway. I'd say lets make the best use of it. `_.isEmpty(parent)` seems more readable and also does not break on undefined parent.  "", 'comment_created': datetime.datetime(2021, 8, 9, 17, 22, 27, tzinfo=datetime.timezone.utc), 'commenter': 'jazzyarchitects', 'type': 'User'}, {'comment_id': 685382733, 'comment_body': ""`_.has` will return false even if `parent` is undefined. So you don't need to additionally check `!parent`"", 'comment_created': datetime.datetime(2021, 8, 9, 17, 23, 32, tzinfo=datetime.timezone.utc), 'commenter': 'jazzyarchitects', 'type': 'User'}, {'comment_id': 685656878, 'comment_body': ""If I don't parse it, I will get this error: `ESLint: Generic Object Injection Sink(security/detect-object-injection)`"", 'comment_created': datetime.datetime(2021, 8, 10, 3, 7, 25, tzinfo=datetime.timezone.utc), 'commenter': 'KhudaDad414', 'type': 'User'}, {'comment_id': 685657588, 'comment_body': 'I will add support for JSON and JSON strings in the future. the implementation will go there. #15 ', 'comment_created': datetime.datetime(2021, 8, 10, 3, 9, 36, tzinfo=datetime.timezone.utc), 'commenter': 'KhudaDad414', 'type': 'User'}, {'comment_id': 685658111, 'comment_body': 'This lodash thing seems to be more useful than what I thought :)', 'comment_created': datetime.datetime(2021, 8, 10, 3, 11, 20, tzinfo=datetime.timezone.utc), 'commenter': 'KhudaDad414', 'type': 'User'}]","[{'commit_sha': 'a59e1e23f139904b6003c5388464f484c6ad5e93', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46fb0e268b324c13035a678c4bc6639e08cb9802', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c1c50c14adc4a9af11fa366baa292f7ba58a36b', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff5424147340ec9ab6e56cfd71d0f9c42323c64d', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42d055798e9288cafee9b33288c16658a6420e06', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49cb69b9d214d59f0bd363360756bdeb72e01536', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a52579ff30d1444a25ca7198dbf7e1977cbf1c7e', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd0fb00d51ade24f6f1c7746ec39b25c6a8804db', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4987b67d267afb8390fd8a0fd292f9ce344d2766', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90e00ee65962368d7dfebf196a69d00bea453989', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b1068bf98416c1ca20e45fa2e4fbd153362957d7', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c2ad7fa200284809a9ad0c824661d0be3bfbf1c', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '145df371af3e337d8dfb33ed3b797222af34cfb3', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ab5c9a2b839cb1a9044781878ff6a860b63cd4d', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d8e37271a3bc155b1935dca5cfbbf8c204a77db', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee939bbedf327fee4920bfd993d0549d26009b14', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3a6748b9d617b9aa0025be4ad0640234cbbb441', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b4a1c0ac81419f53a822c4e585d50d0698e99f4', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c99dbf7d00f33486a1804fe581269a85cdc9fa14', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca8e55336a2c4736ec849408b2987a46793441d9', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '688c8f73e429be7f6e8698a81ec90409294d756e', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '21b205159d7b9a25bab0715f8d5c0c6513b7f02f', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17da1738b2dc97a8cd7fc1a4cbe9adc55b1f3ef0', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b22adfee7f89d57e6b0a2e5d25b76bb17c6acfc4', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b709f296d6a06af60878f1789cac4500e31a62e5', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd1a987500a42c0f283a5f6edc1ea8b22f3409c4f', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90156c9629c486716bf5eb245257eab3eee10875', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a6a2b423c9910a912249a5089857430b6d07f45f', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2097da8b716a833140a4b61c8523abf17318262e', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c77eaba3295daa40f911143686e8423b1d30fb38', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f45450f33ff2c1722d7a4d20f81884758d0df54', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4938517122c41c3aa75939119132013e16b32f26', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19159a960ea55d87828da10156c018f4e1c20977', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e774e2a4fe59687a2566d6579667d7b30f6bb2cb', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a61567523cae8bea914443f91a0b67a7b24df12c', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '32c91efb2e106aa2c16dfb8f08549912f064035b', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '995c7cdb2c2caa5531d966d99aee18edde568209', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5073d547d76c66fcc995a82d13a86ee860fc53b2', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '768c70d9e63eacb274e771fff20121d83e47ca35', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd464bd4cd8c75a7c98151e0300f6e607f931dca9', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6edb64e0c743acf5173cd5c89cd8292a1017db67', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '24fbd2d01eea242181e9396cf6fc151e1df6c94d', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'acf481cf972050e9f5ba910ede7dbb249e2984cd', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e56324dff4a526b8d9cca6c1ad77e96b2234ee79', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf94f8064ddb0bdc679e123603ae51f032c6bbc1', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ddc460be723a8d3ba4cbfb80bde102c12f999baa', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e34e9010d20fb246ebe6f340a6535f29e9ee80f', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1fa2cd7bd6ebac48ea4965647b5c35eaeba5f021', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88f954226cbd2f426bbfc14f7c648c3519315663', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51dc268be970e0e268ca25c7ec66288ba387a9a4', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f5a7d698e03ddd9e97ed8c433ce9c32d310a343', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f322d59239469ced9ba4518384761ef3efcd10fe', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b38b9423fdd5a973fc1f44c2524db41a2a6aa1f', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '529e92600a64dc6f489ec43a2109d0366468b469', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c082c0bd3470a937d94bf1bfb5e9bc1d94f72a0', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ecd41e33f7ed32a61674a7bb81cee95a2d4a3828', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45f9acfc760e29f143f619f0eb1b3ecb20a6d35b', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'efe57d34d75af30dfc485b6ebfcff62429c01f5a', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ef96fedb7f100cfabc5e11fbd78528217b882e4', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e0b3fd4f24b6a652c2a67dedea74e39a5a51d414', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}]",Khuda Dad Nomani,32505158,,User,,56,,15,37
708762060,docs: automate api docs generation,"**Description**

now we are using jsdoc2md to automate API generation from JSDOCs.

**Related issue(s)**
Fixes #14",True,21,https://api.github.com/repos/asyncapi/optimizer/pulls/21,https://github.com/asyncapi/optimizer/pull/21,closed,14181,76,10,3,5,4,1,0,[{'name': 'released'}],2021-08-11 11:30:51+00:00,2021-08-11 14:57:33+00:00,12402.0,3:26:42,"[{'comment_id': 686744997, 'comment_body': 'make sure `generate:assets` script called this one', 'comment_created': datetime.datetime(2021, 8, 11, 11, 35, 29, tzinfo=datetime.timezone.utc), 'commenter': 'derberg', 'type': 'User'}, {'comment_id': 686809390, 'comment_body': 'Why do use the `\\""`? `jsdoc2md lib/Optimizer.js -f lib/**/*.js > API.md` is enough -> https://github.com/asyncapi/modelina/blob/master/package.json#L74', 'comment_created': datetime.datetime(2021, 8, 11, 13, 3, 20, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 686809797, 'comment_body': '`markdown-toc -i README.md` is enough -> https://github.com/asyncapi/modelina/blob/master/package.json#L80', 'comment_created': datetime.datetime(2021, 8, 11, 13, 3, 49, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 686828724, 'comment_body': 'because in parser-js it is used with `\\""`. Since it works, I\'ve removed them. :)', 'comment_created': datetime.datetime(2021, 8, 11, 13, 25, 50, tzinfo=datetime.timezone.utc), 'commenter': 'KhudaDad414', 'type': 'User'}]","[{'commit_sha': '20074c0c1a1b615cc2cdf5501586c3fe2d951d63', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '903bac29fd1e218f533e82878a2d188613ff9a79', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca68ca9c2432a335effb83d190fb9fc791e607d4', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}]",Khuda Dad Nomani,32505158,,User,,56,,15,37
710941540,test: add tests,"**Description**

- added tests for the repository.",True,24,https://api.github.com/repos/asyncapi/optimizer/pulls/24,https://github.com/asyncapi/optimizer/pull/24,closed,485,1,8,1,4,0,1,0,[{'name': 'released'}],2021-08-12 13:41:36+00:00,2021-08-17 07:10:11+00:00,408515.0,"4 days, 17:28:35",[],"[{'commit_sha': '1c2767d23f665a6100afa3ac6aaddce4e3ee158e', 'committer_username': 'KhudaDad414', 'committer_name': 'Khuda Dad Nomani', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 4, 5, 14, 50, tzinfo=datetime.timezone.utc)}]",Khuda Dad Nomani,32505158,,User,,56,,15,37

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
371318697,optimizer,asyncapi/optimizer,TypeScript,9,14,9,9,230,3,2,1,"[{'id': 1827733298, 'number': 254, 'closed': datetime.datetime(2024, 4, 18, 10, 43, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 4, 17, 15, 50, 50, tzinfo=datetime.timezone.utc), 'time_taken': 67967.0, 'time_delta': '18:52:47', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 1827304401, 'number': 252, 'closed': datetime.datetime(2024, 4, 17, 15, 29, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 4, 17, 12, 17, 30, tzinfo=datetime.timezone.utc), 'time_taken': 11531.0, 'time_delta': '3:12:11', 'additions': 1075, 'deletions': 7109, 'state': 'closed'}, {'id': 1495859330, 'number': 193, 'closed': datetime.datetime(2023, 12, 19, 15, 35, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 30, 16, 53, 11, tzinfo=datetime.timezone.utc), 'time_taken': 9585719.0, 'time_delta': '110 days, 22:41:59', 'additions': 962, 'deletions': 318, 'state': 'closed'}, {'id': 1488387880, 'number': 191, 'closed': datetime.datetime(2023, 8, 29, 8, 10, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 24, 16, 51, 52, tzinfo=datetime.timezone.utc), 'time_taken': 400705.0, 'time_delta': '4 days, 15:18:25', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 1469925846, 'number': 181, 'closed': datetime.datetime(2023, 8, 10, 8, 56, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 10, 8, 53, 2, tzinfo=datetime.timezone.utc), 'time_taken': 188.0, 'time_delta': '0:03:08', 'additions': 6, 'deletions': 5, 'state': 'closed'}, {'id': 1469913736, 'number': 180, 'closed': datetime.datetime(2023, 8, 10, 8, 45, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 10, 8, 44, 31, tzinfo=datetime.timezone.utc), 'time_taken': 71.0, 'time_delta': '0:01:11', 'additions': 4, 'deletions': 2, 'state': 'closed'}, {'id': 1469904253, 'number': 179, 'closed': datetime.datetime(2023, 8, 10, 8, 40, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 10, 8, 37, 39, tzinfo=datetime.timezone.utc), 'time_taken': 155.0, 'time_delta': '0:02:35', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 1469883021, 'number': 178, 'closed': datetime.datetime(2023, 8, 10, 8, 27, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 10, 8, 21, 56, tzinfo=datetime.timezone.utc), 'time_taken': 337.0, 'time_delta': '0:05:37', 'additions': 172, 'deletions': 1, 'state': 'closed'}, {'id': 1450123482, 'number': 174, 'closed': datetime.datetime(2023, 7, 27, 11, 5, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 26, 11, 51, 30, tzinfo=datetime.timezone.utc), 'time_taken': 83659.0, 'time_delta': '23:14:19', 'additions': 5691, 'deletions': 3108, 'state': 'closed'}, {'id': 1260740588, 'number': 147, 'closed': datetime.datetime(2023, 7, 19, 11, 26, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 2, 16, 32, 26, tzinfo=datetime.timezone.utc), 'time_taken': 11991228.0, 'time_delta': '138 days, 18:53:48', 'additions': 4657, 'deletions': 13020, 'state': 'closed'}, {'id': 1242445031, 'number': 146, 'closed': datetime.datetime(2023, 3, 17, 17, 13, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 2, 15, 17, 25, 24, tzinfo=datetime.timezone.utc), 'time_taken': 2591302.0, 'time_delta': '29 days, 23:48:22', 'additions': 1982, 'deletions': 4167, 'state': 'closed'}, {'id': 1156235115, 'number': 136, 'closed': datetime.datetime(2023, 2, 6, 14, 37, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 12, 9, 15, 35, 51, tzinfo=datetime.timezone.utc), 'time_taken': 5094118.0, 'time_delta': '58 days, 23:01:58', 'additions': 0, 'deletions': 0, 'state': 'closed'}, {'id': 1131510933, 'number': 129, 'closed': datetime.datetime(2022, 11, 22, 13, 46, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 11, 22, 10, 15, 41, tzinfo=datetime.timezone.utc), 'time_taken': 12666.0, 'time_delta': '3:31:06', 'additions': 3, 'deletions': 3, 'state': 'closed'}, {'id': 1130151763, 'number': 127, 'closed': datetime.datetime(2022, 11, 22, 9, 54, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 11, 21, 14, 37, 56, tzinfo=datetime.timezone.utc), 'time_taken': 69392.0, 'time_delta': '19:16:32', 'additions': 13, 'deletions': 13, 'state': 'closed'}, {'id': 932471170, 'number': 100, 'closed': datetime.datetime(2022, 10, 18, 13, 53, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 10, 13, 57, 38, tzinfo=datetime.timezone.utc), 'time_taken': 13910168.0, 'time_delta': '160 days, 23:56:08', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 869569818, 'number': 85, 'closed': datetime.datetime(2022, 3, 18, 12, 48, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 2, 13, 44, 33, tzinfo=datetime.timezone.utc), 'time_taken': 1379022.0, 'time_delta': '15 days, 23:03:42', 'additions': 89, 'deletions': 105, 'state': 'closed'}, {'id': 867897124, 'number': 84, 'closed': datetime.datetime(2022, 3, 2, 11, 36, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 1, 14, 1, 27, tzinfo=datetime.timezone.utc), 'time_taken': 77685.0, 'time_delta': '21:34:45', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 860041261, 'number': 82, 'closed': datetime.datetime(2022, 3, 1, 5, 44, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 2, 22, 5, 8, 9, tzinfo=datetime.timezone.utc), 'time_taken': 606998.0, 'time_delta': '7 days, 0:36:38', 'additions': 12837, 'deletions': 158, 'state': 'closed'}, {'id': 777224818, 'number': 61, 'closed': datetime.datetime(2021, 11, 10, 11, 10, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 11, 10, 4, 42, 25, tzinfo=datetime.timezone.utc), 'time_taken': 23278.0, 'time_delta': '6:27:58', 'additions': 2, 'deletions': 1, 'state': 'closed'}, {'id': 774210001, 'number': 59, 'closed': datetime.datetime(2021, 11, 5, 13, 49, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 11, 5, 12, 43, 23, tzinfo=datetime.timezone.utc), 'time_taken': 3946.0, 'time_delta': '1:05:46', 'additions': 18, 'deletions': 0, 'state': 'closed'}, {'id': 753976393, 'number': 50, 'closed': datetime.datetime(2021, 10, 8, 14, 37, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 8, 12, 3, 1, tzinfo=datetime.timezone.utc), 'time_taken': 9249.0, 'time_delta': '2:34:09', 'additions': 16, 'deletions': 0, 'state': 'closed'}, {'id': 736276327, 'number': 37, 'closed': datetime.datetime(2021, 10, 4, 14, 3, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 17, 10, 55, 15, tzinfo=datetime.timezone.utc), 'time_taken': 1480102.0, 'time_delta': '17 days, 3:08:22', 'additions': 13556, 'deletions': 222, 'state': 'closed'}, {'id': 729494018, 'number': 35, 'closed': datetime.datetime(2021, 9, 9, 9, 8, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 8, 10, 1, 20, tzinfo=datetime.timezone.utc), 'time_taken': 83247.0, 'time_delta': '23:07:27', 'additions': 13448, 'deletions': 321, 'state': 'closed'}, {'id': 710941540, 'number': 24, 'closed': datetime.datetime(2021, 8, 17, 7, 10, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 12, 13, 41, 36, tzinfo=datetime.timezone.utc), 'time_taken': 408515.0, 'time_delta': '4 days, 17:28:35', 'additions': 485, 'deletions': 1, 'state': 'closed'}, {'id': 710829263, 'number': 23, 'closed': datetime.datetime(2021, 8, 12, 13, 6, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 12, 12, 31, 13, tzinfo=datetime.timezone.utc), 'time_taken': 2094.0, 'time_delta': '0:34:54', 'additions': 0, 'deletions': 0, 'state': 'closed'}, {'id': 708762060, 'number': 21, 'closed': datetime.datetime(2021, 8, 11, 14, 57, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 11, 11, 30, 51, tzinfo=datetime.timezone.utc), 'time_taken': 12402.0, 'time_delta': '3:26:42', 'additions': 14181, 'deletions': 76, 'state': 'closed'}, {'id': 708175672, 'number': 20, 'closed': datetime.datetime(2021, 8, 12, 13, 7, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 11, 4, 37, 28, tzinfo=datetime.timezone.utc), 'time_taken': 117010.0, 'time_delta': '1 day, 8:30:10', 'additions': 14332, 'deletions': 1247, 'state': 'closed'}, {'id': 683118111, 'number': 8, 'closed': datetime.datetime(2021, 8, 10, 12, 20, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 4, 5, 31, 3, tzinfo=datetime.timezone.utc), 'time_taken': 3221340.0, 'time_delta': '37 days, 6:49:00', 'additions': 4448, 'deletions': 2461, 'state': 'closed'}, {'id': 672689255, 'number': 5, 'closed': datetime.datetime(2021, 6, 28, 6, 57, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 17, 14, 26, 6, tzinfo=datetime.timezone.utc), 'time_taken': 923492.0, 'time_delta': '10 days, 16:31:32', 'additions': 242, 'deletions': 1, 'state': 'closed'}, {'id': 662788969, 'number': 3, 'closed': datetime.datetime(2021, 6, 10, 7, 59, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 6, 5, 48, 56, tzinfo=datetime.timezone.utc), 'time_taken': 353447.0, 'time_delta': '4 days, 2:10:47', 'additions': 19751, 'deletions': 0, 'state': 'closed'}]"
