pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
948381162,[GSoC 2022] Port CRIT functionalities,"# Overview

This PR intends to provide a fully functional Go library that enables users to directly operate on CRIU image files natively within their Go programs. It also provides a CLI app that does the same thing as the Python `crit`.

# Implementation

The library provides a `CriuImage` struct with the entries generalised as a slice of `proto.Message` interfaces. This lets us use the same struct to hold all kinds of images, with minimal type assertion while converting between formats. Once the struct object itself is created, no type assertion is necessary as Go provides the concrete proto type for each member of the slice. The extra data for all entries is stored as a string, as almost all of it is base64 encoded data. Custom JSON marshalers and unmarshalers are used to separate the extra data from the protobuf entries during encoding and decoding.

# Features
- [x] Decoder (load binary into Go struct)
- [x] Encoder (write Go struct into binary file)
- [x] JSON Parser (load JSON file into Go struct)
- [x] Dir explorer (load {ps,fds,mems,rss} data into Go struct)

# CLI
- [x] `crit decode`
- [x] `crit encode`
- [x] `crit show`
- [x] `crit info`
- [x] `crit x ps`
- [x] `crit x fds`
- [x] `crit x mems`
- [x] `crit x rss`

# Related
- #76 
- The technical aspects of building this library are explained in [this blog post](https://snprajwal.com/tech/gsoc-journey)
- The documentation is available [here](https://criu.org/CRIT_(Go_library))",True,66,https://api.github.com/repos/checkpoint-restore/go-criu/pulls/66,https://github.com/checkpoint-restore/go-criu/pull/66,closed,50925,0,251,9,4,48,0,0,[],2022-05-26 15:11:48+00:00,2022-07-22 10:42:05+00:00,4908617.0,"56 days, 19:30:17","[{'comment_id': 883084791, 'comment_body': 'It would be good to add the `*.proto` files to avoid downloading them every time.', 'comment_created': datetime.datetime(2022, 5, 26, 21, 8, 41, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 883086360, 'comment_body': 'You can add `--depth=1` and `-b master` to download only the latest commit from the master branch.', 'comment_created': datetime.datetime(2022, 5, 26, 21, 11, 12, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 883089751, 'comment_body': '```Makefile\r\n.PHONY: gen-proto get-proto\r\n```', 'comment_created': datetime.datetime(2022, 5, 26, 21, 16, 13, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 886791577, 'comment_body': '@snprajwal Would you be able to apply in the commit introducing this line (""crit: add decode command"")?\r\n\r\nYou can use `git rebase -i HEAD~4` to edit your previous commit and `git push -f` to update the git history in GitHub.', 'comment_created': datetime.datetime(2022, 6, 1, 13, 14, 10, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 886811287, 'comment_body': 'I thought we can squash all the past commits into a single self-contained commit once I add the tests. Or do we squash the code now, and introduce test cases for all the commands in a separate commit later on?', 'comment_created': datetime.datetime(2022, 6, 1, 13, 31, 52, tzinfo=datetime.timezone.utc), 'commenter': 'snprajwal', 'type': 'User'}, {'comment_id': 886842250, 'comment_body': '@snprajwal It looks like for the CI lint check to pass we need to add `crit/images/*.pb.go` in the repository as well.', 'comment_created': datetime.datetime(2022, 6, 1, 13, 58, 37, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 886877181, 'comment_body': ""I've added the `crit/images` folder to the list of excluded folders in `.golangci.yml`, so I'm guessing the CI test will pass after merge"", 'comment_created': datetime.datetime(2022, 6, 1, 14, 28, 38, tzinfo=datetime.timezone.utc), 'commenter': 'snprajwal', 'type': 'User'}, {'comment_id': 887155918, 'comment_body': 'I was referring to the errors in https://github.com/checkpoint-restore/go-criu/runs/6687929258?check_suite_focus=true\r\n\r\nI can replicate the error locally as follows:\r\n```\r\n$ sudo git clean -dfx\r\n$ sudo make\r\ngo build -v ./...\r\ngithub.com/checkpoint-restore/go-criu/v5/crit/images\r\n# github.com/checkpoint-restore/go-criu/v5/crit/images\r\ncrit/images/handler.go:13:11: undefined: ApparmorEntry\r\ncrit/images/handler.go:15:11: undefined: AutofsEntry\r\ncrit/images/handler.go:17:11: undefined: BinfmtMiscEntry\r\ncrit/images/handler.go:19:11: undefined: BpfmapDataEntry\r\ncrit/images/handler.go:21:11: undefined: BpfmapFileEntry\r\ncrit/images/handler.go:23:11: undefined: CgroupEntry\r\ncrit/images/handler.go:25:11: undefined: CoreEntry\r\ncrit/images/handler.go:27:11: undefined: CpuinfoEntry\r\ncrit/images/handler.go:29:11: undefined: CredsEntry\r\ncrit/images/handler.go:31:11: undefined: EventfdFileEntry\r\ncrit/images/handler.go:31:11: too many errors```', 'comment_created': datetime.datetime(2022, 6, 1, 18, 6, 20, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 887156416, 'comment_body': 'No need to squash the code into a single commit. The reason for applying the changes in the previous commit is to make the pull request easier to review. Thus, each logical change is in a [separate commit](https://github.com/checkpoint-restore/criu/blob/criu-dev/CONTRIBUTING.md#separate-your-changes). For example, it would good to add the *.proto files in a separate commit.', 'comment_created': datetime.datetime(2022, 6, 1, 18, 6, 54, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 887666322, 'comment_body': 'Got it, adding `make -C crit gen-proto` to the `build` target in the root Makefile fixes this.', 'comment_created': datetime.datetime(2022, 6, 2, 7, 47, 13, tzinfo=datetime.timezone.utc), 'commenter': 'snprajwal', 'type': 'User'}, {'comment_id': 900710866, 'comment_body': 'More suitable name for this makefile target would be `update-proto`.\r\n\r\nIt would be good to commit `crit/images/*.pb.go` files.', 'comment_created': datetime.datetime(2022, 6, 18, 7, 35, 6, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 902170122, 'comment_body': 'Would you be able to run `make vendor` and include the changes with this commit as well?', 'comment_created': datetime.datetime(2022, 6, 21, 5, 15, 57, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 902184739, 'comment_body': 'It would be good to add Makefile target to build an executable for `crit`\r\n```Makefile\r\nall: gen-proto bin/crit\r\n\r\nbin/crit: cmd/cli.go\r\n\tgo build -o $@ $<\r\n```', 'comment_created': datetime.datetime(2022, 6, 21, 5, 47, 37, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 902716976, 'comment_body': ""> It would be good to commit crit/images/*.pb.go files.\r\n\r\nThe original `criu` repo maintains only the `.proto` files, and uses the Makefile to generate the bindings for both Python and C. I thought it would be better to stick to the same system here. I have added the target to the parent Makefile [here](https://github.com/checkpoint-restore/go-criu/pull/66/files#diff-76ed074a9305c04054cdebb9e9aad2d818052b07091de1f20cad0bbac34ffb52R17), which also ensures that the tests pass. I'm unsure if there are any other benefits to committing the `.pb.go` files."", 'comment_created': datetime.datetime(2022, 6, 21, 14, 46, 14, tzinfo=datetime.timezone.utc), 'commenter': 'snprajwal', 'type': 'User'}, {'comment_id': 902774618, 'comment_body': 'Adding the `.pb.go` files might fix the errors we see from `make lint`:\r\n\r\n![image](https://user-images.githubusercontent.com/9142901/174838086-bd1ca5da-dec2-40c5-afda-7e745491912d.png)\r\n\r\nGitHub also supports code navigation for Golang:\r\nhttps://docs.github.com/en/get-started/learning-about-github/github-language-support\r\nhttps://docs.github.com/en/repositories/working-with-files/using-files/navigating-code-on-github', 'comment_created': datetime.datetime(2022, 6, 21, 15, 35, 34, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 902880958, 'comment_body': ""I've added `crit/images` to `skip-dirs` in `.golangci.yml`. I just noticed that there was a typo that stopped it from working. The YAML section should be `skip-dirs` with a hyphen, not underscore. This should fix the lint errors."", 'comment_created': datetime.datetime(2022, 6, 21, 17, 24, 25, tzinfo=datetime.timezone.utc), 'commenter': 'snprajwal', 'type': 'User'}, {'comment_id': 903249411, 'comment_body': '@snprajwal This is a trivial fix that we can merge straightaway. Could you open a new pull request with this change?', 'comment_created': datetime.datetime(2022, 6, 22, 3, 31, 6, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 908829768, 'comment_body': 'We can drop the `Long` description here. It is not very useful.', 'comment_created': datetime.datetime(2022, 6, 28, 18, 49, 58, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 908862383, 'comment_body': 'This error check could be on a single line:\r\n```go\r\nif img, err := c.Parse(); err != nil {\r\n}\r\n```', 'comment_created': datetime.datetime(2022, 6, 28, 19, 23, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 908865844, 'comment_body': 'Would it be possible to move the changes that split long lines in a separate commit?\r\nIt would make it much easier to review.', 'comment_created': datetime.datetime(2022, 6, 28, 19, 27, 27, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 908870542, 'comment_body': 'The name `Dump` is slightly confusing here because we use this name for the checkpoint functionality in CRIU.\r\nPerhaps `Decode` could be more self-explanatory?', 'comment_created': datetime.datetime(2022, 6, 28, 19, 33, 41, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 908871261, 'comment_body': '`decodePipesData`?', 'comment_created': datetime.datetime(2022, 6, 28, 19, 34, 36, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 908871546, 'comment_body': '`decodeSkQueues`?', 'comment_created': datetime.datetime(2022, 6, 28, 19, 34, 58, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 908871860, 'comment_body': '`decodeIpcMsg`?', 'comment_created': datetime.datetime(2022, 6, 28, 19, 35, 24, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 908872056, 'comment_body': '`decodeIpcShm`?', 'comment_created': datetime.datetime(2022, 6, 28, 19, 35, 41, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 908872286, 'comment_body': '`decodeIpcSem`?', 'comment_created': datetime.datetime(2022, 6, 28, 19, 35, 59, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 908872410, 'comment_body': '`decodeBpfmapData`?', 'comment_created': datetime.datetime(2022, 6, 28, 19, 36, 10, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 908872633, 'comment_body': '`decodeTcpStream`?', 'comment_created': datetime.datetime(2022, 6, 28, 19, 36, 30, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 908873058, 'comment_body': '`decodeImg`?', 'comment_created': datetime.datetime(2022, 6, 28, 19, 37, 7, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 909616595, 'comment_body': ""I think you mean `Encode`, since `Dump` writes to the binary file. If we're renaming this, should we also rename `Load` to `Decode`? Or do we leave that as is?"", 'comment_created': datetime.datetime(2022, 6, 29, 13, 13, 44, tzinfo=datetime.timezone.utc), 'commenter': 'snprajwal', 'type': 'User'}, {'comment_id': 909618891, 'comment_body': ""Making it a one-liner reduces the scope of `img` to the `if` block. I'm using it in line 83 for `c.Dump(img)`"", 'comment_created': datetime.datetime(2022, 6, 29, 13, 15, 40, tzinfo=datetime.timezone.utc), 'commenter': 'snprajwal', 'type': 'User'}, {'comment_id': 909860350, 'comment_body': '>The name Dump is slightly confusing here because we use this name for the checkpoint functionality in CRIU.\r\n\r\nTechnically, `criu dump` and the `Dump()` function here are both generating binary image files. In that sense, I think the naming is consistent with the action being performed. Calling it `Encode()` might confuse those who use the lib as an import, because `crit encode` is a combination of `Parse()` and `Dump()`.\r\n\r\nAlso, we are explicitly stating `*crit` as a receiver for `Dump()`, which should make it clear that it is not the same as `criu.Dump`. I am also yet to add comments that the LSP can use to provide documentation about a function. Adding that should further make it clear to users about what the function does.', 'comment_created': datetime.datetime(2022, 6, 29, 14, 41, 46, tzinfo=datetime.timezone.utc), 'commenter': 'snprajwal', 'type': 'User'}, {'comment_id': 910230217, 'comment_body': ""> I think you mean `Encode`, since `Dump` writes to the binary file. If we're renaming this, should we also rename `Load` to `Decode`? Or do we leave that as is?\r\n\r\nIMHO yes, using `Encode` and `Decode` would make the code easier to understand.\r\n"", 'comment_created': datetime.datetime(2022, 6, 29, 17, 30, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 912101694, 'comment_body': 'What about `CRIU Image Tool`?\r\n', 'comment_created': datetime.datetime(2022, 7, 1, 16, 30, 1, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 912329922, 'comment_body': 'Makes sense :+1: ', 'comment_created': datetime.datetime(2022, 7, 2, 6, 57, 54, tzinfo=datetime.timezone.utc), 'commenter': 'snprajwal', 'type': 'User'}, {'comment_id': 912532091, 'comment_body': 'opening -> reading', 'comment_created': datetime.datetime(2022, 7, 3, 20, 14, 8, tzinfo=datetime.timezone.utc), 'commenter': 'mihalicyn', 'type': 'User'}, {'comment_id': 912532913, 'comment_body': ""It's better to check `err != nil` here"", 'comment_created': datetime.datetime(2022, 7, 3, 20, 23, 53, tzinfo=datetime.timezone.utc), 'commenter': 'mihalicyn', 'type': 'User'}, {'comment_id': 912532972, 'comment_body': '`err != nil`', 'comment_created': datetime.datetime(2022, 7, 3, 20, 24, 39, tzinfo=datetime.timezone.utc), 'commenter': 'mihalicyn', 'type': 'User'}, {'comment_id': 912534205, 'comment_body': '`&PipeDataEntry{}`?', 'comment_created': datetime.datetime(2022, 7, 3, 20, 39, 15, tzinfo=datetime.timezone.utc), 'commenter': 'mihalicyn', 'type': 'User'}, {'comment_id': 912534913, 'comment_body': 'nit: `CRIU binary file` -> `CRIU image binary file`', 'comment_created': datetime.datetime(2022, 7, 3, 20, 46, 27, tzinfo=datetime.timezone.utc), 'commenter': 'mihalicyn', 'type': 'User'}, {'comment_id': 913245299, 'comment_body': 'The code for reading the magic in `decodeImg()` and `countImg()` looks very similar. Perhaps we could move it into a function (e.g., `readMagic()`) to make it reusable?', 'comment_created': datetime.datetime(2022, 7, 4, 19, 48, 21, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 913246217, 'comment_body': 'It would be good to add a comment here. Why do we call `f.Seek(0, 2)`?', 'comment_created': datetime.datetime(2022, 7, 4, 19, 51, 38, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 913247892, 'comment_body': 'It might be better to move this function in a file called `utils.go`', 'comment_created': datetime.datetime(2022, 7, 4, 19, 57, 11, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 913675058, 'comment_body': 'The `(0, 2)` indicates ""seek to an offset of 0 relative to the end of the file"". https://pkg.go.dev/os#File.Seek\r\nI\'ve added a comment explaining this :+1: ', 'comment_created': datetime.datetime(2022, 7, 5, 11, 9, 57, tzinfo=datetime.timezone.utc), 'commenter': 'snprajwal', 'type': 'User'}, {'comment_id': 913689885, 'comment_body': ""`os.Readfile()` both opens and reads the entire contents of the file. Since we are reading all the way to the end, it's a cleaner solution than calling `os.Open()`, creating a buffer of the file size, and then using `f.Read()`."", 'comment_created': datetime.datetime(2022, 7, 5, 11, 28, 35, tzinfo=datetime.timezone.utc), 'commenter': 'snprajwal', 'type': 'User'}, {'comment_id': 913695663, 'comment_body': 'Oops! Nice catch :)', 'comment_created': datetime.datetime(2022, 7, 5, 11, 36, 2, tzinfo=datetime.timezone.utc), 'commenter': 'snprajwal', 'type': 'User'}, {'comment_id': 913896328, 'comment_body': ""sure, I'm talking about error message text only. ;)"", 'comment_created': datetime.datetime(2022, 7, 5, 14, 56, 13, tzinfo=datetime.timezone.utc), 'commenter': 'mihalicyn', 'type': 'User'}, {'comment_id': 913973223, 'comment_body': '```go\r\nerrors.New(fmt.Sprint(""Error reading JSON file: "", err))\r\n```', 'comment_created': datetime.datetime(2022, 7, 5, 16, 14, 11, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}]","[{'commit_sha': '440649636418c4d9243cc3cfa0c19d5e3353ed6a', 'committer_username': 'snprajwal', 'committer_name': 'Prajwal S N', 'committer_email': 'prajwalnadig21@gmail.com', 'commit_date': datetime.datetime(2020, 9, 22, 10, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '445e900c9f362dde92b5153d06feeff579c06ba5', 'committer_username': 'snprajwal', 'committer_name': 'Prajwal S N', 'committer_email': 'prajwalnadig21@gmail.com', 'commit_date': datetime.datetime(2020, 9, 22, 10, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b2600f0fdf69b447aa7fcf10b6e565238b28deb', 'committer_username': 'snprajwal', 'committer_name': 'Prajwal S N', 'committer_email': 'prajwalnadig21@gmail.com', 'commit_date': datetime.datetime(2020, 9, 22, 10, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc516b7d05d0111486baf79497551227df5dc796', 'committer_username': 'snprajwal', 'committer_name': 'Prajwal S N', 'committer_email': 'prajwalnadig21@gmail.com', 'commit_date': datetime.datetime(2020, 9, 22, 10, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57e1919694175b67f44e1fddb9b8df6538c7cca1', 'committer_username': 'snprajwal', 'committer_name': 'Prajwal S N', 'committer_email': 'prajwalnadig21@gmail.com', 'commit_date': datetime.datetime(2020, 9, 22, 10, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9abe99440079d9b31d0d1dd6de54045f0221216d', 'committer_username': 'snprajwal', 'committer_name': 'Prajwal S N', 'committer_email': 'prajwalnadig21@gmail.com', 'commit_date': datetime.datetime(2020, 9, 22, 10, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '807fe62bae7953b329fb5d79c1dbecde59b4ad6e', 'committer_username': 'snprajwal', 'committer_name': 'Prajwal S N', 'committer_email': 'prajwalnadig21@gmail.com', 'commit_date': datetime.datetime(2020, 9, 22, 10, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1863aa6c6f7594e08f492f1e952164507f2a1f2a', 'committer_username': 'snprajwal', 'committer_name': 'Prajwal S N', 'committer_email': 'prajwalnadig21@gmail.com', 'commit_date': datetime.datetime(2020, 9, 22, 10, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '865ead7b6e31dabde2d83c1a330999fb6d6a5072', 'committer_username': 'snprajwal', 'committer_name': 'Prajwal S N', 'committer_email': 'prajwalnadig21@gmail.com', 'commit_date': datetime.datetime(2020, 9, 22, 10, 29, tzinfo=datetime.timezone.utc)}]",Prajwal S N,71701859,prajwalnadig21@gmail.com,User,,30,,5,56
948381162,[GSoC 2022] Port CRIT functionalities,"# Overview

This PR intends to provide a fully functional Go library that enables users to directly operate on CRIU image files natively within their Go programs. It also provides a CLI app that does the same thing as the Python `crit`.

# Implementation

The library provides a `CriuImage` struct with the entries generalised as a slice of `proto.Message` interfaces. This lets us use the same struct to hold all kinds of images, with minimal type assertion while converting between formats. Once the struct object itself is created, no type assertion is necessary as Go provides the concrete proto type for each member of the slice. The extra data for all entries is stored as a string, as almost all of it is base64 encoded data. Custom JSON marshalers and unmarshalers are used to separate the extra data from the protobuf entries during encoding and decoding.

# Features
- [x] Decoder (load binary into Go struct)
- [x] Encoder (write Go struct into binary file)
- [x] JSON Parser (load JSON file into Go struct)
- [x] Dir explorer (load {ps,fds,mems,rss} data into Go struct)

# CLI
- [x] `crit decode`
- [x] `crit encode`
- [x] `crit show`
- [x] `crit info`
- [x] `crit x ps`
- [x] `crit x fds`
- [x] `crit x mems`
- [x] `crit x rss`

# Related
- #76 
- The technical aspects of building this library are explained in [this blog post](https://snprajwal.com/tech/gsoc-journey)
- The documentation is available [here](https://criu.org/CRIT_(Go_library))",True,66,https://api.github.com/repos/checkpoint-restore/go-criu/pulls/66,https://github.com/checkpoint-restore/go-criu/pull/66,closed,50925,0,251,9,4,48,0,0,[],2022-05-26 15:11:48+00:00,2022-07-22 10:42:05+00:00,4908617.0,"56 days, 19:30:17","[{'comment_id': 883084791, 'comment_body': 'It would be good to add the `*.proto` files to avoid downloading them every time.', 'comment_created': datetime.datetime(2022, 5, 26, 21, 8, 41, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 883086360, 'comment_body': 'You can add `--depth=1` and `-b master` to download only the latest commit from the master branch.', 'comment_created': datetime.datetime(2022, 5, 26, 21, 11, 12, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 883089751, 'comment_body': '```Makefile\r\n.PHONY: gen-proto get-proto\r\n```', 'comment_created': datetime.datetime(2022, 5, 26, 21, 16, 13, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 886791577, 'comment_body': '@snprajwal Would you be able to apply in the commit introducing this line (""crit: add decode command"")?\r\n\r\nYou can use `git rebase -i HEAD~4` to edit your previous commit and `git push -f` to update the git history in GitHub.', 'comment_created': datetime.datetime(2022, 6, 1, 13, 14, 10, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 886811287, 'comment_body': 'I thought we can squash all the past commits into a single self-contained commit once I add the tests. Or do we squash the code now, and introduce test cases for all the commands in a separate commit later on?', 'comment_created': datetime.datetime(2022, 6, 1, 13, 31, 52, tzinfo=datetime.timezone.utc), 'commenter': 'snprajwal', 'type': 'User'}, {'comment_id': 886842250, 'comment_body': '@snprajwal It looks like for the CI lint check to pass we need to add `crit/images/*.pb.go` in the repository as well.', 'comment_created': datetime.datetime(2022, 6, 1, 13, 58, 37, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 886877181, 'comment_body': ""I've added the `crit/images` folder to the list of excluded folders in `.golangci.yml`, so I'm guessing the CI test will pass after merge"", 'comment_created': datetime.datetime(2022, 6, 1, 14, 28, 38, tzinfo=datetime.timezone.utc), 'commenter': 'snprajwal', 'type': 'User'}, {'comment_id': 887155918, 'comment_body': 'I was referring to the errors in https://github.com/checkpoint-restore/go-criu/runs/6687929258?check_suite_focus=true\r\n\r\nI can replicate the error locally as follows:\r\n```\r\n$ sudo git clean -dfx\r\n$ sudo make\r\ngo build -v ./...\r\ngithub.com/checkpoint-restore/go-criu/v5/crit/images\r\n# github.com/checkpoint-restore/go-criu/v5/crit/images\r\ncrit/images/handler.go:13:11: undefined: ApparmorEntry\r\ncrit/images/handler.go:15:11: undefined: AutofsEntry\r\ncrit/images/handler.go:17:11: undefined: BinfmtMiscEntry\r\ncrit/images/handler.go:19:11: undefined: BpfmapDataEntry\r\ncrit/images/handler.go:21:11: undefined: BpfmapFileEntry\r\ncrit/images/handler.go:23:11: undefined: CgroupEntry\r\ncrit/images/handler.go:25:11: undefined: CoreEntry\r\ncrit/images/handler.go:27:11: undefined: CpuinfoEntry\r\ncrit/images/handler.go:29:11: undefined: CredsEntry\r\ncrit/images/handler.go:31:11: undefined: EventfdFileEntry\r\ncrit/images/handler.go:31:11: too many errors```', 'comment_created': datetime.datetime(2022, 6, 1, 18, 6, 20, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 887156416, 'comment_body': 'No need to squash the code into a single commit. The reason for applying the changes in the previous commit is to make the pull request easier to review. Thus, each logical change is in a [separate commit](https://github.com/checkpoint-restore/criu/blob/criu-dev/CONTRIBUTING.md#separate-your-changes). For example, it would good to add the *.proto files in a separate commit.', 'comment_created': datetime.datetime(2022, 6, 1, 18, 6, 54, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 887666322, 'comment_body': 'Got it, adding `make -C crit gen-proto` to the `build` target in the root Makefile fixes this.', 'comment_created': datetime.datetime(2022, 6, 2, 7, 47, 13, tzinfo=datetime.timezone.utc), 'commenter': 'snprajwal', 'type': 'User'}, {'comment_id': 900710866, 'comment_body': 'More suitable name for this makefile target would be `update-proto`.\r\n\r\nIt would be good to commit `crit/images/*.pb.go` files.', 'comment_created': datetime.datetime(2022, 6, 18, 7, 35, 6, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 902170122, 'comment_body': 'Would you be able to run `make vendor` and include the changes with this commit as well?', 'comment_created': datetime.datetime(2022, 6, 21, 5, 15, 57, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 902184739, 'comment_body': 'It would be good to add Makefile target to build an executable for `crit`\r\n```Makefile\r\nall: gen-proto bin/crit\r\n\r\nbin/crit: cmd/cli.go\r\n\tgo build -o $@ $<\r\n```', 'comment_created': datetime.datetime(2022, 6, 21, 5, 47, 37, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 902716976, 'comment_body': ""> It would be good to commit crit/images/*.pb.go files.\r\n\r\nThe original `criu` repo maintains only the `.proto` files, and uses the Makefile to generate the bindings for both Python and C. I thought it would be better to stick to the same system here. I have added the target to the parent Makefile [here](https://github.com/checkpoint-restore/go-criu/pull/66/files#diff-76ed074a9305c04054cdebb9e9aad2d818052b07091de1f20cad0bbac34ffb52R17), which also ensures that the tests pass. I'm unsure if there are any other benefits to committing the `.pb.go` files."", 'comment_created': datetime.datetime(2022, 6, 21, 14, 46, 14, tzinfo=datetime.timezone.utc), 'commenter': 'snprajwal', 'type': 'User'}, {'comment_id': 902774618, 'comment_body': 'Adding the `.pb.go` files might fix the errors we see from `make lint`:\r\n\r\n![image](https://user-images.githubusercontent.com/9142901/174838086-bd1ca5da-dec2-40c5-afda-7e745491912d.png)\r\n\r\nGitHub also supports code navigation for Golang:\r\nhttps://docs.github.com/en/get-started/learning-about-github/github-language-support\r\nhttps://docs.github.com/en/repositories/working-with-files/using-files/navigating-code-on-github', 'comment_created': datetime.datetime(2022, 6, 21, 15, 35, 34, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 902880958, 'comment_body': ""I've added `crit/images` to `skip-dirs` in `.golangci.yml`. I just noticed that there was a typo that stopped it from working. The YAML section should be `skip-dirs` with a hyphen, not underscore. This should fix the lint errors."", 'comment_created': datetime.datetime(2022, 6, 21, 17, 24, 25, tzinfo=datetime.timezone.utc), 'commenter': 'snprajwal', 'type': 'User'}, {'comment_id': 903249411, 'comment_body': '@snprajwal This is a trivial fix that we can merge straightaway. Could you open a new pull request with this change?', 'comment_created': datetime.datetime(2022, 6, 22, 3, 31, 6, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 908829768, 'comment_body': 'We can drop the `Long` description here. It is not very useful.', 'comment_created': datetime.datetime(2022, 6, 28, 18, 49, 58, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 908862383, 'comment_body': 'This error check could be on a single line:\r\n```go\r\nif img, err := c.Parse(); err != nil {\r\n}\r\n```', 'comment_created': datetime.datetime(2022, 6, 28, 19, 23, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 908865844, 'comment_body': 'Would it be possible to move the changes that split long lines in a separate commit?\r\nIt would make it much easier to review.', 'comment_created': datetime.datetime(2022, 6, 28, 19, 27, 27, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 908870542, 'comment_body': 'The name `Dump` is slightly confusing here because we use this name for the checkpoint functionality in CRIU.\r\nPerhaps `Decode` could be more self-explanatory?', 'comment_created': datetime.datetime(2022, 6, 28, 19, 33, 41, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 908871261, 'comment_body': '`decodePipesData`?', 'comment_created': datetime.datetime(2022, 6, 28, 19, 34, 36, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 908871546, 'comment_body': '`decodeSkQueues`?', 'comment_created': datetime.datetime(2022, 6, 28, 19, 34, 58, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 908871860, 'comment_body': '`decodeIpcMsg`?', 'comment_created': datetime.datetime(2022, 6, 28, 19, 35, 24, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 908872056, 'comment_body': '`decodeIpcShm`?', 'comment_created': datetime.datetime(2022, 6, 28, 19, 35, 41, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 908872286, 'comment_body': '`decodeIpcSem`?', 'comment_created': datetime.datetime(2022, 6, 28, 19, 35, 59, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 908872410, 'comment_body': '`decodeBpfmapData`?', 'comment_created': datetime.datetime(2022, 6, 28, 19, 36, 10, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 908872633, 'comment_body': '`decodeTcpStream`?', 'comment_created': datetime.datetime(2022, 6, 28, 19, 36, 30, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 908873058, 'comment_body': '`decodeImg`?', 'comment_created': datetime.datetime(2022, 6, 28, 19, 37, 7, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 909616595, 'comment_body': ""I think you mean `Encode`, since `Dump` writes to the binary file. If we're renaming this, should we also rename `Load` to `Decode`? Or do we leave that as is?"", 'comment_created': datetime.datetime(2022, 6, 29, 13, 13, 44, tzinfo=datetime.timezone.utc), 'commenter': 'snprajwal', 'type': 'User'}, {'comment_id': 909618891, 'comment_body': ""Making it a one-liner reduces the scope of `img` to the `if` block. I'm using it in line 83 for `c.Dump(img)`"", 'comment_created': datetime.datetime(2022, 6, 29, 13, 15, 40, tzinfo=datetime.timezone.utc), 'commenter': 'snprajwal', 'type': 'User'}, {'comment_id': 909860350, 'comment_body': '>The name Dump is slightly confusing here because we use this name for the checkpoint functionality in CRIU.\r\n\r\nTechnically, `criu dump` and the `Dump()` function here are both generating binary image files. In that sense, I think the naming is consistent with the action being performed. Calling it `Encode()` might confuse those who use the lib as an import, because `crit encode` is a combination of `Parse()` and `Dump()`.\r\n\r\nAlso, we are explicitly stating `*crit` as a receiver for `Dump()`, which should make it clear that it is not the same as `criu.Dump`. I am also yet to add comments that the LSP can use to provide documentation about a function. Adding that should further make it clear to users about what the function does.', 'comment_created': datetime.datetime(2022, 6, 29, 14, 41, 46, tzinfo=datetime.timezone.utc), 'commenter': 'snprajwal', 'type': 'User'}, {'comment_id': 910230217, 'comment_body': ""> I think you mean `Encode`, since `Dump` writes to the binary file. If we're renaming this, should we also rename `Load` to `Decode`? Or do we leave that as is?\r\n\r\nIMHO yes, using `Encode` and `Decode` would make the code easier to understand.\r\n"", 'comment_created': datetime.datetime(2022, 6, 29, 17, 30, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 912101694, 'comment_body': 'What about `CRIU Image Tool`?\r\n', 'comment_created': datetime.datetime(2022, 7, 1, 16, 30, 1, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 912329922, 'comment_body': 'Makes sense :+1: ', 'comment_created': datetime.datetime(2022, 7, 2, 6, 57, 54, tzinfo=datetime.timezone.utc), 'commenter': 'snprajwal', 'type': 'User'}, {'comment_id': 912532091, 'comment_body': 'opening -> reading', 'comment_created': datetime.datetime(2022, 7, 3, 20, 14, 8, tzinfo=datetime.timezone.utc), 'commenter': 'mihalicyn', 'type': 'User'}, {'comment_id': 912532913, 'comment_body': ""It's better to check `err != nil` here"", 'comment_created': datetime.datetime(2022, 7, 3, 20, 23, 53, tzinfo=datetime.timezone.utc), 'commenter': 'mihalicyn', 'type': 'User'}, {'comment_id': 912532972, 'comment_body': '`err != nil`', 'comment_created': datetime.datetime(2022, 7, 3, 20, 24, 39, tzinfo=datetime.timezone.utc), 'commenter': 'mihalicyn', 'type': 'User'}, {'comment_id': 912534205, 'comment_body': '`&PipeDataEntry{}`?', 'comment_created': datetime.datetime(2022, 7, 3, 20, 39, 15, tzinfo=datetime.timezone.utc), 'commenter': 'mihalicyn', 'type': 'User'}, {'comment_id': 912534913, 'comment_body': 'nit: `CRIU binary file` -> `CRIU image binary file`', 'comment_created': datetime.datetime(2022, 7, 3, 20, 46, 27, tzinfo=datetime.timezone.utc), 'commenter': 'mihalicyn', 'type': 'User'}, {'comment_id': 913245299, 'comment_body': 'The code for reading the magic in `decodeImg()` and `countImg()` looks very similar. Perhaps we could move it into a function (e.g., `readMagic()`) to make it reusable?', 'comment_created': datetime.datetime(2022, 7, 4, 19, 48, 21, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 913246217, 'comment_body': 'It would be good to add a comment here. Why do we call `f.Seek(0, 2)`?', 'comment_created': datetime.datetime(2022, 7, 4, 19, 51, 38, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 913247892, 'comment_body': 'It might be better to move this function in a file called `utils.go`', 'comment_created': datetime.datetime(2022, 7, 4, 19, 57, 11, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 913675058, 'comment_body': 'The `(0, 2)` indicates ""seek to an offset of 0 relative to the end of the file"". https://pkg.go.dev/os#File.Seek\r\nI\'ve added a comment explaining this :+1: ', 'comment_created': datetime.datetime(2022, 7, 5, 11, 9, 57, tzinfo=datetime.timezone.utc), 'commenter': 'snprajwal', 'type': 'User'}, {'comment_id': 913689885, 'comment_body': ""`os.Readfile()` both opens and reads the entire contents of the file. Since we are reading all the way to the end, it's a cleaner solution than calling `os.Open()`, creating a buffer of the file size, and then using `f.Read()`."", 'comment_created': datetime.datetime(2022, 7, 5, 11, 28, 35, tzinfo=datetime.timezone.utc), 'commenter': 'snprajwal', 'type': 'User'}, {'comment_id': 913695663, 'comment_body': 'Oops! Nice catch :)', 'comment_created': datetime.datetime(2022, 7, 5, 11, 36, 2, tzinfo=datetime.timezone.utc), 'commenter': 'snprajwal', 'type': 'User'}, {'comment_id': 913896328, 'comment_body': ""sure, I'm talking about error message text only. ;)"", 'comment_created': datetime.datetime(2022, 7, 5, 14, 56, 13, tzinfo=datetime.timezone.utc), 'commenter': 'mihalicyn', 'type': 'User'}, {'comment_id': 913973223, 'comment_body': '```go\r\nerrors.New(fmt.Sprint(""Error reading JSON file: "", err))\r\n```', 'comment_created': datetime.datetime(2022, 7, 5, 16, 14, 11, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}]","[{'commit_sha': '440649636418c4d9243cc3cfa0c19d5e3353ed6a', 'committer_username': 'snprajwal', 'committer_name': 'Prajwal S N', 'committer_email': 'prajwalnadig21@gmail.com', 'commit_date': datetime.datetime(2020, 9, 22, 10, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '445e900c9f362dde92b5153d06feeff579c06ba5', 'committer_username': 'snprajwal', 'committer_name': 'Prajwal S N', 'committer_email': 'prajwalnadig21@gmail.com', 'commit_date': datetime.datetime(2020, 9, 22, 10, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b2600f0fdf69b447aa7fcf10b6e565238b28deb', 'committer_username': 'snprajwal', 'committer_name': 'Prajwal S N', 'committer_email': 'prajwalnadig21@gmail.com', 'commit_date': datetime.datetime(2020, 9, 22, 10, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc516b7d05d0111486baf79497551227df5dc796', 'committer_username': 'snprajwal', 'committer_name': 'Prajwal S N', 'committer_email': 'prajwalnadig21@gmail.com', 'commit_date': datetime.datetime(2020, 9, 22, 10, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57e1919694175b67f44e1fddb9b8df6538c7cca1', 'committer_username': 'snprajwal', 'committer_name': 'Prajwal S N', 'committer_email': 'prajwalnadig21@gmail.com', 'commit_date': datetime.datetime(2020, 9, 22, 10, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9abe99440079d9b31d0d1dd6de54045f0221216d', 'committer_username': 'snprajwal', 'committer_name': 'Prajwal S N', 'committer_email': 'prajwalnadig21@gmail.com', 'commit_date': datetime.datetime(2020, 9, 22, 10, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '807fe62bae7953b329fb5d79c1dbecde59b4ad6e', 'committer_username': 'snprajwal', 'committer_name': 'Prajwal S N', 'committer_email': 'prajwalnadig21@gmail.com', 'commit_date': datetime.datetime(2020, 9, 22, 10, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1863aa6c6f7594e08f492f1e952164507f2a1f2a', 'committer_username': 'snprajwal', 'committer_name': 'Prajwal S N', 'committer_email': 'prajwalnadig21@gmail.com', 'commit_date': datetime.datetime(2020, 9, 22, 10, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '865ead7b6e31dabde2d83c1a330999fb6d6a5072', 'committer_username': 'snprajwal', 'committer_name': 'Prajwal S N', 'committer_email': 'prajwalnadig21@gmail.com', 'commit_date': datetime.datetime(2020, 9, 22, 10, 29, tzinfo=datetime.timezone.utc)}]",Prajwal S N,71701859,prajwalnadig21@gmail.com,User,,30,,5,56
1005690955,Add docs and tests for CRIT,"This PR provides docs and tests for the crit library introduced in #66 

- [X] Integration test
- [X] E2E test
- [X] Inline comments for LSP hover
- [X] Documentation on CRIU website",True,76,https://api.github.com/repos/checkpoint-restore/go-criu/pulls/76,https://github.com/checkpoint-restore/go-criu/pull/76,closed,405,29,16,3,1,42,0,0,[],2022-07-22 11:30:58+00:00,2022-08-11 08:38:18+00:00,1717640.0,"19 days, 21:07:20","[{'comment_id': 928122370, 'comment_body': 'Extra data handler for pipe/fifo data', 'comment_created': datetime.datetime(2022, 7, 23, 13, 13, 29, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 928122583, 'comment_body': '*Special handler for ghost image?', 'comment_created': datetime.datetime(2022, 7, 23, 13, 15, 39, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 928122623, 'comment_body': '*Special handler for pagemap image?', 'comment_created': datetime.datetime(2022, 7, 23, 13, 15, 54, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 928122957, 'comment_body': 'Extra payload handler for pipe data?', 'comment_created': datetime.datetime(2022, 7, 23, 13, 19, 24, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 928123008, 'comment_body': 'Extra payload handler for socket queues?', 'comment_created': datetime.datetime(2022, 7, 23, 13, 19, 40, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 928123021, 'comment_body': 'ditto', 'comment_created': datetime.datetime(2022, 7, 23, 13, 19, 50, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 928123029, 'comment_body': 'ditto', 'comment_created': datetime.datetime(2022, 7, 23, 13, 19, 58, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 928123041, 'comment_body': 'ditto', 'comment_created': datetime.datetime(2022, 7, 23, 13, 20, 8, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 928123048, 'comment_body': 'ditto', 'comment_created': datetime.datetime(2022, 7, 23, 13, 20, 16, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 928123070, 'comment_body': 'ditto', 'comment_created': datetime.datetime(2022, 7, 23, 13, 20, 33, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 928123113, 'comment_body': 'Special handler for ghost image', 'comment_created': datetime.datetime(2022, 7, 23, 13, 21, 29, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 928123192, 'comment_body': 'Fd represents the file descriptors opened in a single process', 'comment_created': datetime.datetime(2022, 7, 23, 13, 22, 18, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 928123298, 'comment_body': '*for open files', 'comment_created': datetime.datetime(2022, 7, 23, 13, 23, 12, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 928123550, 'comment_body': '*a list of PIDs along with corresponding files', 'comment_created': datetime.datetime(2022, 7, 23, 13, 26, 7, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 928123899, 'comment_body': '*ghost image', 'comment_created': datetime.datetime(2022, 7, 23, 13, 29, 42, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 931524668, 'comment_body': 'Would it be possible to move this commit in a separate pull request that we can merge before having all tests?', 'comment_created': datetime.datetime(2022, 7, 27, 19, 50, 9, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 933982387, 'comment_body': 'It looks like here we take the first image from `$images_list`. It might be easier to debug if we use a specific image instead (e.g., `inventory.img`).', 'comment_created': datetime.datetime(2022, 7, 31, 12, 50, 24, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 933988400, 'comment_body': '`crit-test` generates a significant amount of logs.\r\nIMHO it would be better to run them in a separate step in [`.github/workflows/main.yml`](https://github.com/checkpoint-restore/go-criu/blob/a6d7cb17ecc29ac8f9adc19e18f8c5193a416f1a/.github/workflows/main.yml):\r\n\r\n```\r\nsudo make -C test/ crit-test\r\n```', 'comment_created': datetime.datetime(2022, 7, 31, 13, 35, 12, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 939573296, 'comment_body': 'Maybe we could use [`filepath.Walk()`](https://pkg.go.dev/path/filepath#WalkDir)?\r\n```go\r\nfunc getImgs() []string {\r\n\tvar skipImgs = []string{\r\n\t\t""pages-"",\r\n\t\t""iptables-"",\r\n\t\t""ip6tables-"",\r\n\t\t""nftables-"",\r\n\t\t""route-"",\r\n\t\t""route6-"",\r\n\t\t""ifaddr-"",\r\n\t\t""tmpfs-"",\r\n\t\t""netns-ct-"",\r\n\t\t""netns-exp-"",\r\n\t\t""rule-"",\r\n\t}\r\n\tvar imgs []string\r\n\r\n\tre := regexp.MustCompile(`.*\\.img`)\r\n\tfn := func(path string, info os.DirEntry, err error) error {\r\n\t\tswitch {\r\n\t\tcase err != nil:\r\n\t\t\treturn err\r\n\t\tcase !info.Type().IsRegular():\r\n\t\t\treturn nil\r\n\t\tcase !re.MatchString(info.Name()):\r\n\t\t\treturn nil\r\n\t\t}\r\n\r\n\t\timgName := info.Name()\r\n\t\tfor _, skip := range skipImgs {\r\n\t\t\tif strings.HasPrefix(imgName, skip) {\r\n\t\t\t\treturn nil\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\timgs = append(imgs, path)\r\n\t\treturn nil\r\n\t}\r\n\r\n\terr := filepath.WalkDir(""."", fn)\r\n\tif err != nil {\r\n\t\tlog.Fatal(err)\r\n\t}\r\n\r\n\treturn imgs\r\n}\r\n```\r\n', 'comment_created': datetime.datetime(2022, 8, 6, 20, 38, 54, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 939573526, 'comment_body': 'Should we include all raw images?\r\n\r\n```bash\r\n$ grep FD_ENTRY_F criu/image-desc.c \r\n#define FD_ENTRY_F(_name, _fmt, _f)     \\\r\n\tFD_ENTRY_F(PIPES_DATA,\t""pipes-data"", O_NOBUF), /* splices data */\r\n\tFD_ENTRY_F(FIFO_DATA,\t""fifo-data"", O_NOBUF), /* the same */\r\n\tFD_ENTRY_F(SK_QUEUES,\t""sk-queues"", O_NOBUF), /* lseeks the image */\r\n\tFD_ENTRY_F(IPCNS_SHM,\t""ipcns-shm-%u"", O_NOBUF), /* writes segments of data */\r\n\tFD_ENTRY_F(GHOST_FILE,\t""ghost-file-%x"", O_NOBUF),\r\n\tFD_ENTRY_F(MEMFD_INODE,\t""memfd"", O_NOBUF),\r\n\tFD_ENTRY_F(IFADDR,\t""ifaddr-%u"", O_NOBUF),\r\n\tFD_ENTRY_F(ROUTE,\t""route-%u"", O_NOBUF),\r\n\tFD_ENTRY_F(ROUTE6,\t""route6-%u"", O_NOBUF),\r\n\tFD_ENTRY_F(RULE,\t""rule-%u"", O_NOBUF),\r\n\tFD_ENTRY_F(IPTABLES,\t""iptables-%u"", O_NOBUF),\r\n\tFD_ENTRY_F(IP6TABLES,\t""ip6tables-%u"", O_NOBUF),\r\n\tFD_ENTRY_F(NFTABLES,\t""nftables-%u"", O_NOBUF),\r\n\tFD_ENTRY_F(TMPFS_IMG,\t""tmpfs-%u.tar.gz"", O_NOBUF),\r\n\tFD_ENTRY_F(TMPFS_DEV,\t""tmpfs-dev-%u.tar.gz"", O_NOBUF),\r\n\tFD_ENTRY_F(AUTOFS,\t""autofs-%u"", O_NOBUF),\r\n\tFD_ENTRY_F(TTY_DATA,\t""tty-data"", O_NOBUF),\r\n\tFD_ENTRY_F(PAGES,\t""pages-%u"", O_NOBUF),\r\n\tFD_ENTRY_F(PAGES_OLD,\t""pages-%d"", O_NOBUF),\r\n\tFD_ENTRY_F(SHM_PAGES_OLD, ""pages-shmem-%ld"", O_NOBUF),\r\n\tFD_ENTRY_F(BPFMAP_FILE,\t""bpfmap-file"", O_NOBUF),\r\n\tFD_ENTRY_F(BPFMAP_DATA,\t""bpfmap-data"", O_NOBUF),\r\n```', 'comment_created': datetime.datetime(2022, 8, 6, 20, 41, 46, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 939573830, 'comment_body': 'It might be good to separate these tests, e.g., `crit-test-integration` and `crit-test-e2e`.\r\nThis would make it easier to debug the tests.', 'comment_created': datetime.datetime(2022, 8, 6, 20, 46, 7, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 939614534, 'comment_body': ""Since we know that all the generated images will be present at the top-level directory, `filepath.WalkDir()` seems like overkill. `os.ReadDir()` is also faster, so we can leverage that as we don't need to recurse subdirectories."", 'comment_created': datetime.datetime(2022, 8, 7, 6, 26, 30, tzinfo=datetime.timezone.utc), 'commenter': 'snprajwal', 'type': 'User'}, {'comment_id': 939614788, 'comment_body': ""`Decode()` and `Encode()` support some of these images, like ghost files, pipes data, etc. So I think we can retain those. I'll test which ones are not supported and add them in 👍 "", 'comment_created': datetime.datetime(2022, 8, 7, 6, 29, 2, tzinfo=datetime.timezone.utc), 'commenter': 'snprajwal', 'type': 'User'}, {'comment_id': 939649192, 'comment_body': 'can we use `break` instead of `goto skipFile`?', 'comment_created': datetime.datetime(2022, 8, 7, 11, 10, 12, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 939649345, 'comment_body': 'It might be good to add a comment here that explains why do we skip these images.', 'comment_created': datetime.datetime(2022, 8, 7, 11, 11, 12, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 939650971, 'comment_body': '`log.Fatal()` would call `os.Exit(1)`, and thus `continue` is redundant?', 'comment_created': datetime.datetime(2022, 8, 7, 11, 24, 24, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 939662775, 'comment_body': '`break` will get us out of the first for loop (which checks against the array of excluded patterns) but will still end up appending the image to the list in the outer for loop. Our options are either a flag or a label, and this one seemed cleaner. If you would like, I can change it to use a `bool skipFile = true` instead.', 'comment_created': datetime.datetime(2022, 8, 7, 12, 49, 19, tzinfo=datetime.timezone.utc), 'commenter': 'snprajwal', 'type': 'User'}, {'comment_id': 939662893, 'comment_body': 'Oops! I had added `continue` with `log.Println()` when I first wrote it, will remove 👍 ', 'comment_created': datetime.datetime(2022, 8, 7, 12, 50, 7, tzinfo=datetime.timezone.utc), 'commenter': 'snprajwal', 'type': 'User'}, {'comment_id': 939674128, 'comment_body': 'Both [`break`](https://go.dev/doc/go1.17_spec#Break_statements) and [`continue`](https://go.dev/doc/go1.17_spec#Continue_statements) support labels but perhaps `continue` makes more sense in the current context:\r\n```diff\r\n--- a/test/crit/main.go\r\n+++ b/test/crit/main.go\r\n@@ -66,17 +66,18 @@ func getImgs() []string {\r\n        if err != nil {\r\n                log.Fatal(err)\r\n        }\r\n+\r\n+nextFile:\r\n        for _, file := range dir {\r\n                name := file.Name()\r\n                if filepath.Ext(name) == "".img"" {\r\n                        for _, skip := range skipImgs {\r\n                                if strings.HasPrefix(name, skip) {\r\n-                                       goto skipFile\r\n+                                       continue nextFile\r\n                                }\r\n                        }\r\n                        imgs = append(imgs, file.Name())\r\n                }\r\n-       skipFile:\r\n        }\r\n \r\n        return imgs\r\n```', 'comment_created': datetime.datetime(2022, 8, 7, 14, 9, 30, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 939680795, 'comment_body': 'The convention for [variable comments](https://go.dev/doc/comment#var) is using `//`.', 'comment_created': datetime.datetime(2022, 8, 7, 14, 57, 21, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 939681638, 'comment_body': '```suggestion\r\n\t\tif err = c.Encode(decodedImg); err != nil {\r\n```', 'comment_created': datetime.datetime(2022, 8, 7, 15, 3, 34, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 939683694, 'comment_body': 'we might want to exclude `.json.img`, `.test.img` as well or store these files in separate sub-folders?', 'comment_created': datetime.datetime(2022, 8, 7, 15, 19, 10, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 939683899, 'comment_body': 'We need to add the corresponding dependency targets to be able to run the tests with\r\n`sudo make -C test/crit integration-test` and `sudo make -C test/crit e2e-test`\r\n```diff\r\n--- a/test/crit/Makefile\r\n+++ b/test/crit/Makefile\r\n@@ -3,17 +3,17 @@ GO ?= go\r\n \r\n all: test clean\r\n \r\n-test: gen-imgs integration-test e2e-test\r\n+test: integration-test e2e-test\r\n \r\n-integration-test:\r\n+integration-test: gen-imgs crit-test\r\n        @echo ""Running integration test""\r\n        @./crit-test\r\n \r\n-e2e-test:\r\n+e2e-test: gen-imgs\r\n        @echo ""Running E2E test""\r\n        @./crit-test.sh\r\n \r\n-gen-imgs: ../loop/loop crit-test\r\n+gen-imgs: ../loop/loop\r\n        $(eval PID := $(shell ../loop/loop))\r\n        criu dump -v4 -o dump.log -D ./ -t $(PID)\r\n```', 'comment_created': datetime.datetime(2022, 8, 7, 15, 20, 42, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 939698174, 'comment_body': 'I initially thought this would be more of a developer-specific comment, hence the multi line syntax', 'comment_created': datetime.datetime(2022, 8, 7, 17, 20, 20, tzinfo=datetime.timezone.utc), 'commenter': 'snprajwal', 'type': 'User'}, {'comment_id': 939698599, 'comment_body': ""I had ordered the tests in the makefile so that the integration test ran first, before the E2E test generated any of these files. Is there a possibility we'll run them in the wrong order?"", 'comment_created': datetime.datetime(2022, 8, 7, 17, 24, 47, tzinfo=datetime.timezone.utc), 'commenter': 'snprajwal', 'type': 'User'}, {'comment_id': 939698896, 'comment_body': ""Adding `gen-imgs` as a dep for the individual test targets would mean that we'll be generating two sets of images, which would make things messy. Since the individual targets will be called only for debugging, I thought we can just run `gen-imgs` manually before that."", 'comment_created': datetime.datetime(2022, 8, 7, 17, 27, 16, tzinfo=datetime.timezone.utc), 'commenter': 'snprajwal', 'type': 'User'}, {'comment_id': 939954986, 'comment_body': 'Thank you for pointing this out. The idea is for the e2e and integration tests to be able to run independently.\r\nFor example, we can run the following:\r\n```\r\nsudo make -C test/crit/ e2e-test\r\nsudo make -C test/crit/ integration-test\r\nsudo make -C test/crit/ integration-test\r\n```\r\nIn this case, we have to make sure that integration-test would not process the output files that have been generated from the previous run (`*.json.img`, `*.test.img`, as well as `tmp.*.img` directories).', 'comment_created': datetime.datetime(2022, 8, 8, 8, 14, 48, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 939958467, 'comment_body': 'To solve this problem we can make this a non-phony target.\r\nFor example:\r\n```diff\r\n--- a/test/crit/Makefile\r\n+++ b/test/crit/Makefile\r\n@@ -3,19 +3,20 @@ GO ?= go\r\n \r\n all: test clean\r\n \r\n-test: gen-imgs integration-test e2e-test\r\n+test: integration-test e2e-test\r\n \r\n-integration-test:\r\n+integration-test: test-images crit-test\r\n        @echo ""Running integration test""\r\n        @./crit-test\r\n \r\n-e2e-test:\r\n+e2e-test: test-images\r\n        @echo ""Running E2E test""\r\n        @./crit-test.sh\r\n \r\n-gen-imgs: ../loop/loop crit-test\r\n+test-images: ../loop/loop\r\n        $(eval PID := $(shell ../loop/loop))\r\n-       criu dump -v4 -o dump.log -D ./ -t $(PID)\r\n+       mkdir -p $@\r\n+       criu dump -v4 -o dump.log -D $@ -t $(PID)\r\n \r\n ../loop/loop: ../loop/loop.c\r\n        $(CC) $^ -o $@\r\n@@ -24,6 +25,6 @@ crit-test: main.go\r\n        $(GO) build -v -o $@ $^\r\n \r\n clean:\r\n-       @rm -f *.img *.log *.json stats-*\r\n+       @rm -rf test-images\r\n \r\n-.PHONY: all test integration-test e2e-test gen-imgs clean\r\n+.PHONY: all test integration-test e2e-test clean\r\n```\r\nIt creates a folder called `test-images` and this target would run only when the folder does not exist.', 'comment_created': datetime.datetime(2022, 8, 8, 8, 18, 37, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 941966611, 'comment_body': 'It might be good to use a variable for the path to the `criu` binary: `CRIU ?= criu`\r\nThis conditional assignment would enable running the test with locally compiled criu instead.\r\n```suggestion\r\n\t$(CRIU) dump -v4 -o dump.log -D ./ -t $(PID)\r\n```', 'comment_created': datetime.datetime(2022, 8, 10, 3, 8, 3, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 941967069, 'comment_body': '> shellcheck test/crit/crit-test.sh\r\n```\r\nIn test/crit/crit-test.sh line 46:\r\n\tcat ""$PROTO_IN"" | $CRIT decode || exit 1\r\n            ^---------^ SC2002: Useless cat. Consider \'cmd < file | ..\' or \'cmd file | ..\' instead.\r\n```', 'comment_created': datetime.datetime(2022, 8, 10, 3, 9, 16, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 942251379, 'comment_body': ""We're doing that in line 52. The test just makes sure that the command works with every possible combination of input and output - redirection, pipes, and filenames with flags"", 'comment_created': datetime.datetime(2022, 8, 10, 9, 48, 6, tzinfo=datetime.timezone.utc), 'commenter': 'snprajwal', 'type': 'User'}, {'comment_id': 942269410, 'comment_body': 'This is not really necessary, bash handles the input and output redirection:\r\n\r\n> The output of each command in the pipeline is connected via a pipe to the input of the next command.\r\n\r\nhttps://www.gnu.org/software/bash/manual/html_node/Pipelines.html\r\n', 'comment_created': datetime.datetime(2022, 8, 10, 10, 7, 11, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}]","[{'commit_sha': 'd7e713230a55ec8c995ea68fe52e1a1c4e9ee723', 'committer_username': 'snprajwal', 'committer_name': 'Prajwal S N', 'committer_email': 'prajwalnadig21@gmail.com', 'commit_date': datetime.datetime(2020, 9, 22, 10, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '048a82439d4e092f4b59e090372f6f5b92d481cf', 'committer_username': 'snprajwal', 'committer_name': 'Prajwal S N', 'committer_email': 'prajwalnadig21@gmail.com', 'commit_date': datetime.datetime(2020, 9, 22, 10, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5c07fccd13f21a1cca52c474b8cb02f1def4adf', 'committer_username': 'snprajwal', 'committer_name': 'Prajwal S N', 'committer_email': 'prajwalnadig21@gmail.com', 'commit_date': datetime.datetime(2020, 9, 22, 10, 29, tzinfo=datetime.timezone.utc)}]",Prajwal S N,71701859,prajwalnadig21@gmail.com,User,,30,,5,56
1043581035,Upgrade go-criu to v6,"The v6.0.0 release of go-criu has deprecated the `rpc` package in favour
of the `crit` package. This commit provides the changes required to use
this version in runc.

Signed-off-by: Prajwal S N <prajwalnadig21@gmail.com>",True,3586,https://api.github.com/repos/opencontainers/runc/pulls/3586,https://github.com/opencontainers/runc/pull/3586,closed,35716,2608,178,1,3,0,2,0,"[{'name': 'easy-to-review'}, {'name': 'area/checkpoint-restore'}]",2022-09-01 11:15:22+00:00,2022-09-10 01:49:28+00:00,743646.0,"8 days, 14:34:06",[],"[{'commit_sha': '746f45807df5165f09defb7077461c412c05d204', 'committer_username': 'snprajwal', 'committer_name': 'Prajwal S N', 'committer_email': 'prajwalnadig21@gmail.com', 'commit_date': datetime.datetime(2020, 9, 22, 10, 29, tzinfo=datetime.timezone.utc)}]",Prajwal S N,71701859,prajwalnadig21@gmail.com,User,,30,,5,56
1043627371,Upgrade go-criu to v6,"The v6.0.0 release of go-criu has deprecated the `rpc` and `stats`
packages in favour of the `crit` package. This commit provides the
changes required to use this version in podman.

Signed-off-by: Prajwal S N <prajwalnadig21@gmail.com>

```release-note
None
```",True,15591,https://api.github.com/repos/containers/podman/pulls/15591,https://github.com/containers/podman/pull/15591,closed,401,358,24,1,18,0,4,1,"[{'name': 'lgtm'}, {'name': 'approved'}, {'name': 'release-note-none'}, {'name': 'locked - please file new issue/PR'}]",2022-09-01 11:58:33+00:00,2022-11-04 19:48:52+00:00,5557819.0,"64 days, 7:50:19",[],"[{'commit_sha': 'b8e03ab44d68d4134392ca1c05548071e07c1257', 'committer_username': 'snprajwal', 'committer_name': 'Prajwal S N', 'committer_email': 'prajwalnadig21@gmail.com', 'commit_date': datetime.datetime(2020, 9, 22, 10, 29, tzinfo=datetime.timezone.utc)}]",Prajwal S N,71701859,prajwalnadig21@gmail.com,User,,30,,5,56
1028438686,Upgrade go-criu to v6,"This commit replaces the deprecated `stats` package with `crit`, in
accordance with the change in the new release of go-criu.",True,16,https://api.github.com/repos/checkpoint-restore/checkpointctl/pulls/16,https://github.com/checkpoint-restore/checkpointctl/pull/16,closed,39493,1706,250,1,3,5,0,0,[],2022-08-17 07:33:32+00:00,2022-09-20 08:52:34+00:00,2942342.0,"34 days, 1:19:02","[{'comment_id': 961655664, 'comment_body': 'Can we provide a function in go-criu to do exactly this. I see you are also using the same code in Podman. So maybe it would be good to have it available in go-criu.', 'comment_created': datetime.datetime(2022, 9, 2, 13, 1, 16, tzinfo=datetime.timezone.utc), 'commenter': 'adrianreber', 'type': 'User'}, {'comment_id': 961670729, 'comment_body': 'Leaving it open-ended would mean that the user can do this with any of the images, not just `stats-dump` and `stats-restore`. `crit` provides a generalised way to operate on all images. I feel it would be better to let the user deal with the images, rather than having specific functions for any one type. What do you think?', 'comment_created': datetime.datetime(2022, 9, 2, 13, 18, 21, tzinfo=datetime.timezone.utc), 'commenter': 'snprajwal', 'type': 'User'}, {'comment_id': 961680638, 'comment_body': 'I think I would prefer to have a similar function as before. The dump statistics file is always called `stats-dump` and it seems pretty unlikely that anyone will use the function on something else. We can hide some of the internals making it easier to use and I saw the same three or four lines of code here and in Podman, which let me to the suggestion to provide an interface as before. For you it is probably pretty obvious how to do it as the original author. Anyone else would probably prefer to do it differently. Not sure the previous API, pointing to a directory and expecting that it contains a `stats-dump` file is the best interface, but probably easier than manually having to call the `Decode()` function.\r\n\r\n@rst0git What do you think? A simple wrapper in go-criu or is three lines of code simple enough?', 'comment_created': datetime.datetime(2022, 9, 2, 13, 28, 54, tzinfo=datetime.timezone.utc), 'commenter': 'adrianreber', 'type': 'User'}, {'comment_id': 961715069, 'comment_body': 'Thank you Adrian for your input! I assume that you are referring to the following change in Podman.\r\n```diff\r\n-\t\tdumpStatistics, err := stats.CriuGetDumpStats(statsDirectory)\r\n+\t\t// Get dump statistics with crit\r\n+\t\tc := crit.New(filepath.Join(statsDirectory.Name(), ""stats-dump""), """", """", false, false)\r\n+\t\tstatsImg, err := c.Decode()\r\n```\r\nIndeed, `CriuGetDumpStats()` looks straightforward and easier to use, whereas crit provides more flexibility.\r\n@snprajwal Perhaps we could add `CriuGetDumpStats()` as a helper function in go-criu?\r\n\r\nThis would also make it easier to maintain the code because if we need to change the way `stats-dump` is parsed in the future, we would need to make this change in only one place.', 'comment_created': datetime.datetime(2022, 9, 2, 13, 59, 42, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 961728532, 'comment_body': 'Will get this pushed next week, we can publish it on v6.1.0 and use it', 'comment_created': datetime.datetime(2022, 9, 2, 14, 11, 59, tzinfo=datetime.timezone.utc), 'commenter': 'snprajwal', 'type': 'User'}]","[{'commit_sha': '9ad7ac7ff96a6671ee877c8228953a583afbc19a', 'committer_username': 'snprajwal', 'committer_name': 'Prajwal S N', 'committer_email': 'prajwalnadig21@gmail.com', 'commit_date': datetime.datetime(2020, 9, 22, 10, 29, tzinfo=datetime.timezone.utc)}]",Prajwal S N,71701859,prajwalnadig21@gmail.com,User,,30,,5,56


Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
152456668,go-criu,checkpoint-restore/go-criu,Go,43,161,10,15,361,2,1,0,"[{'id': 1943202020, 'number': 177, 'closed': datetime.datetime(2024, 7, 17, 10, 24, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 6, 27, 21, 32, 29, tzinfo=datetime.timezone.utc), 'time_taken': 1687930.0, 'time_delta': '19 days, 12:52:10', 'additions': 170, 'deletions': 234, 'state': 'closed'}, {'id': 1772892124, 'number': 168, 'closed': datetime.datetime(2024, 3, 15, 7, 44, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 3, 14, 19, 37, 57, tzinfo=datetime.timezone.utc), 'time_taken': 43574.0, 'time_delta': '12:06:14', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 1771867511, 'number': 166, 'closed': datetime.datetime(2024, 3, 14, 11, 44, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 3, 14, 10, 34, 6, tzinfo=datetime.timezone.utc), 'time_taken': 4229.0, 'time_delta': '1:10:29', 'additions': 2, 'deletions': 0, 'state': 'closed'}, {'id': 1657759004, 'number': 158, 'closed': datetime.datetime(2023, 12, 28, 21, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 12, 27, 7, 20, 18, tzinfo=datetime.timezone.utc), 'time_taken': 136722.0, 'time_delta': '1 day, 13:58:42', 'additions': 19, 'deletions': 19, 'state': 'closed'}, {'id': 1651665613, 'number': 157, 'closed': datetime.datetime(2023, 12, 21, 8, 0, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 12, 20, 8, 41, 12, tzinfo=datetime.timezone.utc), 'time_taken': 83934.0, 'time_delta': '23:18:54', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 1582816194, 'number': 153, 'closed': datetime.datetime(2023, 11, 1, 15, 34, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 11, 1, 14, 58, 46, tzinfo=datetime.timezone.utc), 'time_taken': 2166.0, 'time_delta': '0:36:06', 'additions': 21, 'deletions': 21, 'state': 'closed'}, {'id': 1507345916, 'number': 149, 'closed': datetime.datetime(2023, 9, 8, 13, 31, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 9, 8, 6, 54, 27, tzinfo=datetime.timezone.utc), 'time_taken': 23795.0, 'time_delta': '6:36:35', 'additions': 195, 'deletions': 194, 'state': 'closed'}, {'id': 1457827939, 'number': 141, 'closed': datetime.datetime(2023, 8, 1, 15, 38, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 1, 10, 32, 8, tzinfo=datetime.timezone.utc), 'time_taken': 18405.0, 'time_delta': '5:06:45', 'additions': 4, 'deletions': 2, 'state': 'closed'}, {'id': 1443305029, 'number': 139, 'closed': datetime.datetime(2023, 7, 22, 8, 38, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 20, 17, 19, 52, tzinfo=datetime.timezone.utc), 'time_taken': 141496.0, 'time_delta': '1 day, 15:18:16', 'additions': 382, 'deletions': 319, 'state': 'closed'}, {'id': 1439198907, 'number': 138, 'closed': datetime.datetime(2023, 8, 7, 19, 24, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 18, 12, 55, 15, tzinfo=datetime.timezone.utc), 'time_taken': 1751379.0, 'time_delta': '20 days, 6:29:39', 'additions': 319, 'deletions': 23, 'state': 'closed'}, {'id': 1408465323, 'number': 134, 'closed': datetime.datetime(2023, 7, 5, 15, 52, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 26, 18, 33, 4, tzinfo=datetime.timezone.utc), 'time_taken': 767963.0, 'time_delta': '8 days, 21:19:23', 'additions': 3, 'deletions': 1, 'state': 'closed'}, {'id': 1347435165, 'number': 131, 'closed': datetime.datetime(2023, 5, 13, 14, 47, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 11, 17, 0, 5, tzinfo=datetime.timezone.utc), 'time_taken': 164833.0, 'time_delta': '1 day, 21:47:13', 'additions': 18, 'deletions': 17, 'state': 'closed'}, {'id': 1318596214, 'number': 128, 'closed': datetime.datetime(2023, 4, 26, 18, 14, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 18, 15, 48, 5, tzinfo=datetime.timezone.utc), 'time_taken': 699958.0, 'time_delta': '8 days, 2:25:58', 'additions': 65, 'deletions': 64, 'state': 'closed'}, {'id': 1305764608, 'number': 114, 'closed': datetime.datetime(2023, 4, 15, 7, 35, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 7, 10, 16, 6, tzinfo=datetime.timezone.utc), 'time_taken': 681553.0, 'time_delta': '7 days, 21:19:13', 'additions': 6, 'deletions': 6, 'state': 'closed'}, {'id': 1291615896, 'number': 111, 'closed': datetime.datetime(2023, 3, 27, 16, 29, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 27, 16, 0, 29, tzinfo=datetime.timezone.utc), 'time_taken': 1733.0, 'time_delta': '0:28:53', 'additions': 32, 'deletions': 8, 'state': 'closed'}, {'id': 1290353719, 'number': 109, 'closed': datetime.datetime(2023, 5, 20, 8, 27, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 26, 13, 53, 27, tzinfo=datetime.timezone.utc), 'time_taken': 4732451.0, 'time_delta': '54 days, 18:34:11', 'additions': 1396, 'deletions': 1198, 'state': 'closed'}, {'id': 1290264611, 'number': 108, 'closed': datetime.datetime(2023, 3, 27, 15, 4, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 26, 7, 47, 59, tzinfo=datetime.timezone.utc), 'time_taken': 112565.0, 'time_delta': '1 day, 7:16:05', 'additions': 2, 'deletions': 0, 'state': 'closed'}, {'id': 1084973463, 'number': 98, 'closed': datetime.datetime(2022, 10, 13, 11, 12, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 12, 16, 59, 26, tzinfo=datetime.timezone.utc), 'time_taken': 65562.0, 'time_delta': '18:12:42', 'additions': 6, 'deletions': 592, 'state': 'closed'}, {'id': 1047438069, 'number': 93, 'closed': datetime.datetime(2022, 9, 6, 16, 26, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 6, 11, 30, 26, tzinfo=datetime.timezone.utc), 'time_taken': 17751.0, 'time_delta': '4:55:51', 'additions': 7, 'deletions': 2, 'state': 'closed'}, {'id': 1045643428, 'number': 91, 'closed': datetime.datetime(2022, 9, 5, 20, 58, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 4, 7, 32, 1, tzinfo=datetime.timezone.utc), 'time_taken': 134774.0, 'time_delta': '1 day, 13:26:14', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 1045435747, 'number': 90, 'closed': datetime.datetime(2022, 9, 5, 16, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 3, 9, 8, 36, tzinfo=datetime.timezone.utc), 'time_taken': 199764.0, 'time_delta': '2 days, 7:29:24', 'additions': 3020, 'deletions': 2872, 'state': 'closed'}, {'id': 1045430202, 'number': 89, 'closed': datetime.datetime(2022, 9, 4, 7, 58, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 3, 8, 27, 55, tzinfo=datetime.timezone.utc), 'time_taken': 84662.0, 'time_delta': '23:31:02', 'additions': 97, 'deletions': 17, 'state': 'closed'}, {'id': 1042717765, 'number': 88, 'closed': datetime.datetime(2022, 8, 31, 19, 9, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 31, 18, 30, 39, tzinfo=datetime.timezone.utc), 'time_taken': 2307.0, 'time_delta': '0:38:27', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 1028426571, 'number': 87, 'closed': datetime.datetime(2022, 8, 31, 16, 48, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 17, 7, 20, 5, tzinfo=datetime.timezone.utc), 'time_taken': 1243730.0, 'time_delta': '14 days, 9:28:50', 'additions': 75, 'deletions': 3131, 'state': 'closed'}, {'id': 1026143793, 'number': 85, 'closed': datetime.datetime(2022, 8, 15, 7, 54, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 15, 7, 32, 23, tzinfo=datetime.timezone.utc), 'time_taken': 1304.0, 'time_delta': '0:21:44', 'additions': 4, 'deletions': 1, 'state': 'closed'}, {'id': 1024857997, 'number': 84, 'closed': datetime.datetime(2022, 8, 15, 7, 43, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 12, 11, 43, 29, tzinfo=datetime.timezone.utc), 'time_taken': 244777.0, 'time_delta': '2 days, 19:59:37', 'additions': 15, 'deletions': 7, 'state': 'closed'}, {'id': 1024214466, 'number': 83, 'closed': datetime.datetime(2022, 8, 12, 8, 27, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 11, 18, 59, 25, tzinfo=datetime.timezone.utc), 'time_taken': 48473.0, 'time_delta': '13:27:53', 'additions': 236, 'deletions': 31, 'state': 'closed'}, {'id': 1012629278, 'number': 78, 'closed': datetime.datetime(2022, 7, 31, 4, 40, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 30, 11, 31, 39, tzinfo=datetime.timezone.utc), 'time_taken': 61725.0, 'time_delta': '17:08:45', 'additions': 9, 'deletions': 2, 'state': 'closed'}, {'id': 1010630239, 'number': 77, 'closed': datetime.datetime(2022, 7, 28, 18, 24, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 28, 10, 16, 16, tzinfo=datetime.timezone.utc), 'time_taken': 29279.0, 'time_delta': '8:07:59', 'additions': 58, 'deletions': 8, 'state': 'closed'}, {'id': 1005690955, 'number': 76, 'closed': datetime.datetime(2022, 8, 11, 8, 38, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 22, 11, 30, 58, tzinfo=datetime.timezone.utc), 'time_taken': 1717640.0, 'time_delta': '19 days, 21:07:20', 'additions': 405, 'deletions': 29, 'state': 'closed'}, {'id': 992779141, 'number': 75, 'closed': datetime.datetime(2022, 7, 12, 12, 19, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 11, 7, 52, 56, tzinfo=datetime.timezone.utc), 'time_taken': 102422.0, 'time_delta': '1 day, 4:27:02', 'additions': 151, 'deletions': 33, 'state': 'closed'}, {'id': 974853967, 'number': 72, 'closed': datetime.datetime(2022, 6, 23, 6, 31, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 22, 9, 42, 20, tzinfo=datetime.timezone.utc), 'time_taken': 74965.0, 'time_delta': '20:49:25', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 955672527, 'number': 68, 'closed': datetime.datetime(2022, 6, 3, 10, 52, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 2, 9, 13, 47, tzinfo=datetime.timezone.utc), 'time_taken': 92336.0, 'time_delta': '1 day, 1:38:56', 'additions': 6, 'deletions': 0, 'state': 'closed'}, {'id': 948381162, 'number': 66, 'closed': datetime.datetime(2022, 7, 22, 10, 42, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 26, 15, 11, 48, tzinfo=datetime.timezone.utc), 'time_taken': 4908617.0, 'time_delta': '56 days, 19:30:17', 'additions': 50925, 'deletions': 0, 'state': 'closed'}, {'id': 909708959, 'number': 65, 'closed': datetime.datetime(2022, 4, 25, 6, 50, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 14, 8, 29, 34, tzinfo=datetime.timezone.utc), 'time_taken': 944452.0, 'time_delta': '10 days, 22:20:52', 'additions': 161, 'deletions': 163, 'state': 'closed'}]"
36960321,runc,opencontainers/runc,Go,2074,11676,383,421,6995,354,4,82,"[{'id': 1059295132, 'number': 3605, 'closed': datetime.datetime(2022, 9, 21, 1, 22, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 17, 10, 12, 45, tzinfo=datetime.timezone.utc), 'time_taken': 313760.0, 'time_delta': '3 days, 15:09:20', 'additions': 2870, 'deletions': 3030, 'state': 'closed'}, {'id': 1043581035, 'number': 3586, 'closed': datetime.datetime(2022, 9, 10, 1, 49, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 1, 11, 15, 22, tzinfo=datetime.timezone.utc), 'time_taken': 743646.0, 'time_delta': '8 days, 14:34:06', 'additions': 35716, 'deletions': 2608, 'state': 'closed'}]"
109145553,podman,containers/podman,Go,2330,22809,209,722,23330,652,57,73,"[{'id': 1043627371, 'number': 15591, 'closed': datetime.datetime(2022, 11, 4, 19, 48, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 1, 11, 58, 33, tzinfo=datetime.timezone.utc), 'time_taken': 5557819.0, 'time_delta': '64 days, 7:50:19', 'additions': 401, 'deletions': 358, 'state': 'closed'}]"
333505439,checkpointctl,checkpoint-restore/checkpointctl,Go,15,93,12,11,279,7,2,3,"[{'id': 1507923599, 'number': 106, 'closed': datetime.datetime(2023, 9, 8, 14, 38, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 9, 8, 13, 37, 11, tzinfo=datetime.timezone.utc), 'time_taken': 3660.0, 'time_delta': '1:01:00', 'additions': 171, 'deletions': 171, 'state': 'closed'}, {'id': 1454315602, 'number': 94, 'closed': datetime.datetime(2023, 8, 14, 16, 43, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 28, 19, 13, tzinfo=datetime.timezone.utc), 'time_taken': 1459848.0, 'time_delta': '16 days, 21:30:48', 'additions': 108, 'deletions': 4, 'state': 'closed'}, {'id': 1427211752, 'number': 87, 'closed': datetime.datetime(2023, 7, 20, 7, 6, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 10, 10, 8, 58, tzinfo=datetime.timezone.utc), 'time_taken': 853048.0, 'time_delta': '9 days, 20:57:28', 'additions': 74, 'deletions': 3, 'state': 'closed'}, {'id': 1423106817, 'number': 84, 'closed': datetime.datetime(2023, 7, 6, 15, 57, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 6, 15, 37, 45, tzinfo=datetime.timezone.utc), 'time_taken': 1162.0, 'time_delta': '0:19:22', 'additions': 10, 'deletions': 5, 'state': 'closed'}, {'id': 1422422883, 'number': 83, 'closed': datetime.datetime(2023, 7, 6, 8, 5, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 6, 8, 0, 11, tzinfo=datetime.timezone.utc), 'time_taken': 291.0, 'time_delta': '0:04:51', 'additions': 14, 'deletions': 14, 'state': 'closed'}, {'id': 1422422174, 'number': 82, 'closed': datetime.datetime(2023, 7, 6, 8, 3, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 6, 7, 59, 41, tzinfo=datetime.timezone.utc), 'time_taken': 222.0, 'time_delta': '0:03:42', 'additions': 0, 'deletions': 12, 'state': 'closed'}, {'id': 1397065464, 'number': 74, 'closed': datetime.datetime(2023, 7, 11, 12, 40, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 18, 9, 39, 18, tzinfo=datetime.timezone.utc), 'time_taken': 1998075.0, 'time_delta': '23 days, 3:01:15', 'additions': 2725, 'deletions': 10078, 'state': 'closed'}, {'id': 1397057521, 'number': 73, 'closed': datetime.datetime(2023, 7, 6, 8, 24, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 18, 9, 15, 2, tzinfo=datetime.timezone.utc), 'time_taken': 1552140.0, 'time_delta': '17 days, 23:09:00', 'additions': 317, 'deletions': 24, 'state': 'closed'}, {'id': 1396188074, 'number': 72, 'closed': datetime.datetime(2023, 6, 17, 10, 32, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 16, 19, 4, 8, tzinfo=datetime.timezone.utc), 'time_taken': 55718.0, 'time_delta': '15:28:38', 'additions': 2, 'deletions': 1, 'state': 'closed'}, {'id': 1396164312, 'number': 71, 'closed': datetime.datetime(2023, 6, 18, 8, 29, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 16, 18, 40, 52, tzinfo=datetime.timezone.utc), 'time_taken': 136102.0, 'time_delta': '1 day, 13:48:22', 'additions': 0, 'deletions': 1, 'state': 'closed'}, {'id': 1384931750, 'number': 64, 'closed': datetime.datetime(2023, 6, 9, 12, 58, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 8, 18, 21, 5, tzinfo=datetime.timezone.utc), 'time_taken': 67020.0, 'time_delta': '18:37:00', 'additions': 5, 'deletions': 3, 'state': 'closed'}, {'id': 1384652674, 'number': 62, 'closed': datetime.datetime(2023, 6, 8, 16, 53, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 8, 15, 12, 31, tzinfo=datetime.timezone.utc), 'time_taken': 6078.0, 'time_delta': '1:41:18', 'additions': 13, 'deletions': 5, 'state': 'closed'}, {'id': 1377868621, 'number': 61, 'closed': datetime.datetime(2023, 6, 12, 6, 57, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 4, 18, 2, 6, tzinfo=datetime.timezone.utc), 'time_taken': 651319.0, 'time_delta': '7 days, 12:55:19', 'additions': 145, 'deletions': 49, 'state': 'closed'}, {'id': 1377720785, 'number': 60, 'closed': datetime.datetime(2023, 6, 8, 18, 7, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 4, 12, 8, 32, tzinfo=datetime.timezone.utc), 'time_taken': 367167.0, 'time_delta': '4 days, 5:59:27', 'additions': 88, 'deletions': 77, 'state': 'closed'}, {'id': 1377695118, 'number': 59, 'closed': datetime.datetime(2023, 6, 8, 11, 58, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 4, 11, 5, 12, tzinfo=datetime.timezone.utc), 'time_taken': 348792.0, 'time_delta': '4 days, 0:53:12', 'additions': 62, 'deletions': 0, 'state': 'closed'}, {'id': 1368128459, 'number': 58, 'closed': datetime.datetime(2023, 5, 31, 15, 4, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 28, 19, 37, 41, tzinfo=datetime.timezone.utc), 'time_taken': 242832.0, 'time_delta': '2 days, 19:27:12', 'additions': 43, 'deletions': 34, 'state': 'closed'}, {'id': 1368091612, 'number': 57, 'closed': datetime.datetime(2023, 5, 30, 14, 36, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 28, 18, 4, 28, tzinfo=datetime.timezone.utc), 'time_taken': 160320.0, 'time_delta': '1 day, 20:32:00', 'additions': 17435, 'deletions': 965, 'state': 'closed'}, {'id': 1367966586, 'number': 56, 'closed': datetime.datetime(2023, 6, 16, 8, 31, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 28, 12, 48, 38, tzinfo=datetime.timezone.utc), 'time_taken': 1626176.0, 'time_delta': '18 days, 19:42:56', 'additions': 966, 'deletions': 45, 'state': 'closed'}, {'id': 1042732477, 'number': 17, 'closed': datetime.datetime(2022, 9, 1, 10, 32, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 31, 18, 47, 37, tzinfo=datetime.timezone.utc), 'time_taken': 56687.0, 'time_delta': '15:44:47', 'additions': 15, 'deletions': 8, 'state': 'closed'}, {'id': 1028438686, 'number': 16, 'closed': datetime.datetime(2022, 9, 20, 8, 52, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 17, 7, 33, 32, tzinfo=datetime.timezone.utc), 'time_taken': 2942342.0, 'time_delta': '34 days, 1:19:02', 'additions': 39493, 'deletions': 1706, 'state': 'closed'}]"
669486760,incus,lxc/incus,Go,181,2369,37,442,34627,34,2,3,[]
