pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
676862762,Multivariate Detrending,"#### Reference Issues/PRs

Fixes #1030 . See also #1038 .

#### What does this implement/fix? Explain your changes.

This would be a quick fix to #1030 as it adds functionality for multivariate series to the detrender. As discussed with @mloning I took inspiration from how this was done for the imputer. But I also like the idea to have compositions for multivariate series as it is described in #1038
",True,1042,https://api.github.com/repos/sktime/sktime/pulls/1042,https://github.com/sktime/sktime/pull/1042,closed,75,12,1,6,9,2,0,0,[],2021-06-24 07:30:29+00:00,2021-06-25 08:52:31+00:00,91322.0,"1 day, 1:22:02","[{'comment_id': 657884317, 'comment_body': 'for the check or printing missing columns, you could do sth like `set(z.columns).difference(set(self.forecaster_.keys()))`; for readability you could first define variables `Z_fit_keys = set(self.forecaster_.keys())`, `Z_new_keys = ...`', 'comment_created': datetime.datetime(2021, 6, 24, 12, 3, 31, tzinfo=datetime.timezone.utc), 'commenter': 'fkiraly', 'type': 'User'}, {'comment_id': 657915206, 'comment_body': 'Thanks! I implemented it as you suggested ', 'comment_created': datetime.datetime(2021, 6, 24, 12, 48, 52, tzinfo=datetime.timezone.utc), 'commenter': 'SveaMeyer13', 'type': 'User'}]","[{'commit_sha': '6d50d3163e0356b1467a2ccfa8b5cef9dcc07ce2', 'committer_username': 'SveaMeyer13', 'committer_name': 'Svea Marie Meyer', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 14, 9, 30, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ecc76d439d9feb9243d2e5680cf262e4c7d0bb9f', 'committer_username': 'SveaMeyer13', 'committer_name': 'Svea Marie Meyer', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 14, 9, 30, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cdf79f1d2013e9a3b7c8fb078a40f9bb30b35507', 'committer_username': 'fkiraly', 'committer_name': 'Franz Király', 'committer_email': 'f.kiraly@ucl.ac.uk', 'commit_date': datetime.datetime(2014, 6, 25, 12, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45c5ca71de1e4a44c8d581fd4775171dec209c12', 'committer_username': 'SveaMeyer13', 'committer_name': 'Svea Marie Meyer', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 14, 9, 30, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3072ab22a7961910794764a134ebec853c3608a', 'committer_username': 'SveaMeyer13', 'committer_name': 'Svea Marie Meyer', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 14, 9, 30, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b2f385d4e5bbb34e1e62bb6a63f3b764349a4bd7', 'committer_username': 'fkiraly', 'committer_name': 'Franz Király', 'committer_email': 'f.kiraly@ucl.ac.uk', 'commit_date': datetime.datetime(2014, 6, 25, 12, 31, 38, tzinfo=datetime.timezone.utc)}]",Svea Marie Meyer,46671894,,User,,8,,2,6
679938099,Improvement to Multivariate-Detrending,"#### Reference Issues/PRs
Follow up on #1042 

#### What does this implement/fix? Explain your changes.
Make a deep copy of input DataFrame in order to no change input of transform/inverse-transform 

#### Does your contribution introduce a new dependency? If yes, which one?
No.",True,1077,https://api.github.com/repos/sktime/sktime/pulls/1077,https://github.com/sktime/sktime/pull/1077,closed,3,1,1,3,0,0,0,0,[],2021-06-29 12:44:39+00:00,2021-07-03 19:36:27+00:00,370308.0,"4 days, 6:51:48",[],"[{'commit_sha': '6bf17df954f2d6460fb2cdac5e55efc52a87a50e', 'committer_username': 'SveaMeyer13', 'committer_name': 'Svea Marie Meyer', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 14, 9, 30, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f06b1695474b60956a89205e4c2c0ac119071ef0', 'committer_username': 'TonyBagnall', 'committer_name': 'Tony Bagnall', 'committer_email': 'ajb@uea.ac.uk', 'commit_date': datetime.datetime(2014, 11, 6, 17, 17, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1e5a2d864f5f2bd1969706c290583392303f9a0', 'committer_username': 'fkiraly', 'committer_name': 'Franz Király', 'committer_email': 'f.kiraly@ucl.ac.uk', 'commit_date': datetime.datetime(2014, 6, 25, 12, 31, 38, tzinfo=datetime.timezone.utc)}]",Svea Marie Meyer,46671894,,User,,8,,2,6
677081415,Add ColumnwiseTransformer (multivariate compositor for series-to-series transformer),"#### Reference Issues/PRs
addresses #1038 

#### What does this implement/fix? Explain your changes.
This is a very first draft to apply a single series-transformer to a multivariate series in a column-wise manner

#### Does your contribution introduce a new dependency? If yes, which one?
No

#### What should a reviewer concentrate their feedback on?
I'm not sure if this even goes in the direction you had in mind @fkiraly?

The main point I'm not sure how to tackle, is what to do about series transformers that also have functions that are not fit, transform, or inverse transform, e.g. the ""update"" in the detrender. My solution would be to have an extra ""apply"" function - but here I am currently relying on the fact, that any additional functions would return ""self""  


#### Any other comments?
This is just a draft. Tests will fail as I haven't set the _required_parameters = [""transformer""] in the test config yet 
Just wanted to get early feedback ",True,1044,https://api.github.com/repos/sktime/sktime/pulls/1044,https://github.com/sktime/sktime/pull/1044,closed,267,6,4,37,14,57,1,0,[{'name': 'module:transformations'}],2021-06-24 12:47:00+00:00,2021-08-14 07:31:53+00:00,4387493.0,"50 days, 18:44:53","[{'comment_id': 663843754, 'comment_body': 'Maybe it makes sense to have this in `sktime.transformations.series.compose`? Now there is a second path that contains `compositor` which is a bit rudimentary?', 'comment_created': datetime.datetime(2021, 7, 5, 11, 4, 41, tzinfo=datetime.timezone.utc), 'commenter': 'aiwalter', 'type': 'User'}, {'comment_id': 663846086, 'comment_body': 'here we should also add the type following the `numpy` docstring format. So e.g.\r\n```\r\ncolumns : list of str\r\n       Names of columns that are supposed to be transformed\r\n```', 'comment_created': datetime.datetime(2021, 7, 5, 11, 8, 57, tzinfo=datetime.timezone.utc), 'commenter': 'aiwalter', 'type': 'User'}, {'comment_id': 663846564, 'comment_body': '```suggestion\r\n            raise ValueError(""Z needs to be a pd.DataFrame"")\r\n```', 'comment_created': datetime.datetime(2021, 7, 5, 11, 9, 47, tzinfo=datetime.timezone.utc), 'commenter': 'aiwalter', 'type': 'User'}, {'comment_id': 663847952, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 7, 5, 11, 12, 13, tzinfo=datetime.timezone.utc), 'commenter': 'aiwalter', 'type': 'User'}, {'comment_id': 663848079, 'comment_body': 'this is already contained in the parent class `BaseTransformer`', 'comment_created': datetime.datetime(2021, 7, 5, 11, 12, 29, tzinfo=datetime.timezone.utc), 'commenter': 'aiwalter', 'type': 'User'}, {'comment_id': 663850240, 'comment_body': 'this should be included in `check_series()` function with a new param `enforce_multivariate`. Also above you have this check which can be replaced then as well with simply z = check_series(Z, enforce_multivariate=True).\r\nAlso the error should rather be `""Z needs to be a pd.DataFrame""` ', 'comment_created': datetime.datetime(2021, 7, 5, 11, 16, 15, tzinfo=datetime.timezone.utc), 'commenter': 'aiwalter', 'type': 'User'}, {'comment_id': 663851220, 'comment_body': 'I think this should also be in parent class, but we can do this probably best in a separate transformer refactoring', 'comment_created': datetime.datetime(2021, 7, 5, 11, 18, 6, tzinfo=datetime.timezone.utc), 'commenter': 'aiwalter', 'type': 'User'}, {'comment_id': 663851926, 'comment_body': 'same as above, to be replaced with `check_series`', 'comment_created': datetime.datetime(2021, 7, 5, 11, 19, 24, tzinfo=datetime.timezone.utc), 'commenter': 'aiwalter', 'type': 'User'}, {'comment_id': 663853243, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 7, 5, 11, 21, 30, tzinfo=datetime.timezone.utc), 'commenter': 'aiwalter', 'type': 'User'}, {'comment_id': 663853277, 'comment_body': 'I think this is not needed, as it will anyway raise an exception if the object `self.transformer` does not have `inverse_transform`. So its rudimentary to catch this exception again here.', 'comment_created': datetime.datetime(2021, 7, 5, 11, 21, 34, tzinfo=datetime.timezone.utc), 'commenter': 'aiwalter', 'type': 'User'}, {'comment_id': 663854624, 'comment_body': '```suggestion\r\n```\r\n`self.check_is_fitted()` is in each transfromer already in `inverse_transform` or we should also best have it in the parent class when we refactor transformers. But we can remove this here as we dont need to check twice', 'comment_created': datetime.datetime(2021, 7, 5, 11, 24, 7, tzinfo=datetime.timezone.utc), 'commenter': 'aiwalter', 'type': 'User'}, {'comment_id': 663855500, 'comment_body': 'this will also be later in parent ideally, but we can keep it for now', 'comment_created': datetime.datetime(2021, 7, 5, 11, 25, 35, tzinfo=datetime.timezone.utc), 'commenter': 'aiwalter', 'type': 'User'}, {'comment_id': 663857452, 'comment_body': 'why not to name this class `ColumnTransformer` as in `sklearn`? It would be a name conflict maybe if s.o. wants to use both together. So what do you think about `ColumnComposition`. I think the term ""multivariate"" is in general weakly defined and often confusing if you talk about endog or exog multivariate, thats why I would propose to remove the name ""multivariate"" from the class name. What do you think?', 'comment_created': datetime.datetime(2021, 7, 5, 11, 28, 55, tzinfo=datetime.timezone.utc), 'commenter': 'aiwalter', 'type': 'User'}, {'comment_id': 663890002, 'comment_body': ""Thanks for your feedback, @aiwalter!\r\nI'll move it to the compose directory. "", 'comment_created': datetime.datetime(2021, 7, 5, 12, 23, 54, tzinfo=datetime.timezone.utc), 'commenter': 'SveaMeyer13', 'type': 'User'}, {'comment_id': 663893446, 'comment_body': 'ok it seems you overwrite `fit()` here, so in this case we need `self._is_fitted = True`. So this is also a task for refactoring, but not your task now I think :)', 'comment_created': datetime.datetime(2021, 7, 5, 12, 29, 16, tzinfo=datetime.timezone.utc), 'commenter': 'aiwalter', 'type': 'User'}, {'comment_id': 663895593, 'comment_body': 'hmm here I might be having a misconception, but my train of thought was that I would want to be able to check whether this overall transformer is fitted. I am aware that I am already setting is_fitted to true for all the single series transformers when calling fit() on them. But this then only contains information about the single series transformers being fitted and not whether fit() has been applied to this multivariate_compositor already. \r\n ', 'comment_created': datetime.datetime(2021, 7, 5, 12, 32, 31, tzinfo=datetime.timezone.utc), 'commenter': 'SveaMeyer13', 'type': 'User'}, {'comment_id': 663896514, 'comment_body': ""Agreed, this might still change depending on what we decide about the question of whether it's ok to have a multivariate-only tag after all (see discussion above)"", 'comment_created': datetime.datetime(2021, 7, 5, 12, 33, 56, tzinfo=datetime.timezone.utc), 'commenter': 'SveaMeyer13', 'type': 'User'}, {'comment_id': 663897248, 'comment_body': 'agreed! ', 'comment_created': datetime.datetime(2021, 7, 5, 12, 35, 4, tzinfo=datetime.timezone.utc), 'commenter': 'SveaMeyer13', 'type': 'User'}, {'comment_id': 663898281, 'comment_body': 'after refactoring `BaseTransformer`, we would have there a `_fit()` function that will contain `self._is_fitted = True`. But you can ignore my comment above, as I have seen that there is just a `fit()` function which is overwritten by each transformer currently. Didnt want to make confusion :)', 'comment_created': datetime.datetime(2021, 7, 5, 12, 36, 47, tzinfo=datetime.timezone.utc), 'commenter': 'aiwalter', 'type': 'User'}, {'comment_id': 663898790, 'comment_body': ""Ah, I did not see your second comment! yes, exactly I'm overwriting fit()"", 'comment_created': datetime.datetime(2021, 7, 5, 12, 37, 35, tzinfo=datetime.timezone.utc), 'commenter': 'SveaMeyer13', 'type': 'User'}, {'comment_id': 663899107, 'comment_body': 'I think its not dependent to the tags, but rather assessing the input? Tags are mainly for tests', 'comment_created': datetime.datetime(2021, 7, 5, 12, 38, 6, tzinfo=datetime.timezone.utc), 'commenter': 'aiwalter', 'type': 'User'}, {'comment_id': 663900318, 'comment_body': ""Will do, once I know whether it's ok to have to multivariate-only tag :) "", 'comment_created': datetime.datetime(2021, 7, 5, 12, 39, 58, tzinfo=datetime.timezone.utc), 'commenter': 'SveaMeyer13', 'type': 'User'}, {'comment_id': 663900697, 'comment_body': 'Agreed!', 'comment_created': datetime.datetime(2021, 7, 5, 12, 40, 33, tzinfo=datetime.timezone.utc), 'commenter': 'SveaMeyer13', 'type': 'User'}, {'comment_id': 663905152, 'comment_body': ""I wasn't aware of that, thanks @aiwalter! So far `check_series` however, doesn't have an argument `enforce_multivariate` (only enforce_univariate) so I would need to introduce that. And I think that would only make sense if we end up having the tag `multivariate-only`. Otherwise, this function would also have to accept pd.Series. "", 'comment_created': datetime.datetime(2021, 7, 5, 12, 47, 31, tzinfo=datetime.timezone.utc), 'commenter': 'SveaMeyer13', 'type': 'User'}, {'comment_id': 663907521, 'comment_body': ""yes, for sure - I don't mind renaming it "", 'comment_created': datetime.datetime(2021, 7, 5, 12, 51, 11, tzinfo=datetime.timezone.utc), 'commenter': 'SveaMeyer13', 'type': 'User'}, {'comment_id': 663909013, 'comment_body': 'i think to add `enforce_multivariate` to `check_series` is fine, would be great if you can do it with this PR.?', 'comment_created': datetime.datetime(2021, 7, 5, 12, 53, 27, tzinfo=datetime.timezone.utc), 'commenter': 'aiwalter', 'type': 'User'}, {'comment_id': 663909577, 'comment_body': 'sure, will do :) ', 'comment_created': datetime.datetime(2021, 7, 5, 12, 54, 19, tzinfo=datetime.timezone.utc), 'commenter': 'SveaMeyer13', 'type': 'User'}, {'comment_id': 663910118, 'comment_body': 'its not dependent to any tag discussion, bcz having it will help to replace your code here and in other places where we want to do `check_series(Z, enforce_multivariate=True)` in the future.', 'comment_created': datetime.datetime(2021, 7, 5, 12, 55, 5, tzinfo=datetime.timezone.utc), 'commenter': 'aiwalter', 'type': 'User'}, {'comment_id': 663911046, 'comment_body': 'ok, but I am not sure which name would be best. Any ideas @mloning @fkiraly ?', 'comment_created': datetime.datetime(2021, 7, 5, 12, 56, 24, tzinfo=datetime.timezone.utc), 'commenter': 'aiwalter', 'type': 'User'}, {'comment_id': 664385060, 'comment_body': '```suggestion\r\n    transformer : Estimator\r\n        scikit-learn-like or sktime-like transformer to fit and apply to series\r\n```', 'comment_created': datetime.datetime(2021, 7, 6, 9, 18, 45, tzinfo=datetime.timezone.utc), 'commenter': 'aiwalter', 'type': 'User'}, {'comment_id': 664388200, 'comment_body': 'I think we need also a proper docstring here, see e.g.  `HampelFilter`:\r\nhttps://github.com/alan-turing-institute/sktime/blob/859ac7206ad8aad8ce418b391c521064083e30c3/sktime/transformations/series/outlier_detection.py#L63-L74\r\n\r\n', 'comment_created': datetime.datetime(2021, 7, 6, 9, 22, 54, tzinfo=datetime.timezone.utc), 'commenter': 'aiwalter', 'type': 'User'}, {'comment_id': 664388775, 'comment_body': 'also here, you can just copy the docstring about the params from another transformer', 'comment_created': datetime.datetime(2021, 7, 6, 9, 23, 46, tzinfo=datetime.timezone.utc), 'commenter': 'aiwalter', 'type': 'User'}, {'comment_id': 664389206, 'comment_body': 'same here', 'comment_created': datetime.datetime(2021, 7, 6, 9, 24, 17, tzinfo=datetime.timezone.utc), 'commenter': 'aiwalter', 'type': 'User'}, {'comment_id': 665564919, 'comment_body': 'We need to think about the name, `ColumnComposition` seems very general. We have a `RowwiseTransformer`, so perhaps `ColumnwiseTransformer`? Or `ColumnApplier` or `ColumnApplyTransformer`?', 'comment_created': datetime.datetime(2021, 7, 7, 17, 17, 32, tzinfo=datetime.timezone.utc), 'commenter': 'mloning', 'type': 'User'}, {'comment_id': 665566877, 'comment_body': 'What are the other options for `columns`? For now I would always apply it to all columns, not giving users the option. For the more expressive design I would prefer something like the `ColumnTransformer` from scikit-learn where you can specify different transformers for different columns. ', 'comment_created': datetime.datetime(2021, 7, 7, 17, 20, 30, tzinfo=datetime.timezone.utc), 'commenter': 'mloning', 'type': 'User'}, {'comment_id': 665567808, 'comment_body': 'This will happen inside the transform call in the next line and we have checked it at the beginning of this method\r\n```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 7, 7, 17, 21, 50, tzinfo=datetime.timezone.utc), 'commenter': 'mloning', 'type': 'User'}, {'comment_id': 665569316, 'comment_body': ""Is there a way to write this without the if-else case distinction? For example, if it's a series, we could just convert it into a data frame (e.g. via `z.to_frame()`) at the beginning and back to series before returning it. That way, we could use the main loop below for data frames also for series input.  The same applies to the other methods (fit, inverse-transform and update). "", 'comment_created': datetime.datetime(2021, 7, 7, 17, 23, 57, tzinfo=datetime.timezone.utc), 'commenter': 'mloning', 'type': 'User'}, {'comment_id': 665571664, 'comment_body': 'this check appears in multiple locations in the class, could we wrap this into a helper function, e.g. `_check_columns(columns, new_columns)`', 'comment_created': datetime.datetime(2021, 7, 7, 17, 27, 23, tzinfo=datetime.timezone.utc), 'commenter': 'mloning', 'type': 'User'}, {'comment_id': 665572691, 'comment_body': '```suggestion\r\n    >>> yt = transformer.fit_transform(y, X)\r\n```\r\ny_hat is typically used for estimates/forecasts ', 'comment_created': datetime.datetime(2021, 7, 7, 17, 28, 47, tzinfo=datetime.timezone.utc), 'commenter': 'mloning', 'type': 'User'}, {'comment_id': 670813010, 'comment_body': '```suggestion\r\n    Attributes\r\n```', 'comment_created': datetime.datetime(2021, 7, 15, 21, 20, 41, tzinfo=datetime.timezone.utc), 'commenter': 'aiwalter', 'type': 'User'}, {'comment_id': 670813650, 'comment_body': '```suggestion\r\n    >>> from sktime.datasets import load_longley\r\n```', 'comment_created': datetime.datetime(2021, 7, 15, 21, 21, 43, tzinfo=datetime.timezone.utc), 'commenter': 'aiwalter', 'type': 'User'}, {'comment_id': 670813916, 'comment_body': '```suggestion\r\n    >>> y, X = load_longley()\r\n```', 'comment_created': datetime.datetime(2021, 7, 15, 21, 22, 7, tzinfo=datetime.timezone.utc), 'commenter': 'aiwalter', 'type': 'User'}, {'comment_id': 670821632, 'comment_body': 'why do we have this here? I could not find any other place where you read this. Below you only read/use `self.columns_` always', 'comment_created': datetime.datetime(2021, 7, 15, 21, 36, 56, tzinfo=datetime.timezone.utc), 'commenter': 'aiwalter', 'type': 'User'}, {'comment_id': 670822237, 'comment_body': 'I am wondering if a trailing underscore is required here or if we should rather make it a private variable like `_columns` \r\n and `_transformers`? I cant think of a use case where you would want to get a particular transformer after fitting. Also it seems e.g. `EnsembleForecaster` does not have sth like `self.forecaster_` where the parts of the ensemble are exposed.', 'comment_created': datetime.datetime(2021, 7, 15, 21, 38, 6, tzinfo=datetime.timezone.utc), 'commenter': 'aiwalter', 'type': 'User'}, {'comment_id': 670822518, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 7, 15, 21, 38, 37, tzinfo=datetime.timezone.utc), 'commenter': 'aiwalter', 'type': 'User'}, {'comment_id': 670825224, 'comment_body': 'I think this docstring can be put to the top where this attribute is initiated. Actually if we keep `self.columns_` we would ideally need also an `Attributes` docstring for it like\r\n```\r\nAttributes\r\n----------\r\ncolumns_ : something\r\n     My desciption\r\n\r\n```', 'comment_created': datetime.datetime(2021, 7, 15, 21, 43, 50, tzinfo=datetime.timezone.utc), 'commenter': 'aiwalter', 'type': 'User'}, {'comment_id': 670826631, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 7, 15, 21, 46, 53, tzinfo=datetime.timezone.utc), 'commenter': 'aiwalter', 'type': 'User'}, {'comment_id': 670826772, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 7, 15, 21, 47, 13, tzinfo=datetime.timezone.utc), 'commenter': 'aiwalter', 'type': 'User'}, {'comment_id': 670828977, 'comment_body': 'I have just seen a silent issue in my code 😮 . Possibly, if we would have a transformer that uses `X` to transform `y`. Could you just fix it like this:\r\n```suggestion\r\n            z = self.transformer_.inverse_transform(z, X=X)\r\n```\r\nThx! Dont want to open a PR for changing one symbol 😅 ', 'comment_created': datetime.datetime(2021, 7, 15, 21, 51, 42, tzinfo=datetime.timezone.utc), 'commenter': 'aiwalter', 'type': 'User'}, {'comment_id': 674641268, 'comment_body': ""From how I understand the scikit learn developer guide, the idea is to not change the hyperparameters in fit/in the constructor or somewhere else. This ensures that `get_params` and `set_params` don't break. We are however changing `self.columns` in case it is `None` to all the column names. This is why I think that we need `self.columns` and `self.columns_` . The developer guide also says that this should happen in fit and and not in the constructor. Therefore, I moved this logic further down to `fit` now. The guide is here: https://scikit-learn.org/stable/developers/develop.html"", 'comment_created': datetime.datetime(2021, 7, 22, 9, 31, 22, tzinfo=datetime.timezone.utc), 'commenter': 'SveaMeyer13', 'type': 'User'}, {'comment_id': 674641452, 'comment_body': ""I'm not sure about this one. I looked at other transformers and for example in `_detrend` there is also a `self.forecaster_` and in adapt there is a `self.transformer_`. Maybe @mloning can clarify? "", 'comment_created': datetime.datetime(2021, 7, 22, 9, 31, 38, tzinfo=datetime.timezone.utc), 'commenter': 'SveaMeyer13', 'type': 'User'}, {'comment_id': 674643684, 'comment_body': 'ok, then in my opinion lets keep it here also to be consistent', 'comment_created': datetime.datetime(2021, 7, 22, 9, 35, 4, tzinfo=datetime.timezone.utc), 'commenter': 'aiwalter', 'type': 'User'}, {'comment_id': 676763460, 'comment_body': 'this could be a stand-alone function into which you pass the `self.columns_` - the idea is that stand-alone functions are usually easier to understand than methods ', 'comment_created': datetime.datetime(2021, 7, 26, 16, 30, 39, tzinfo=datetime.timezone.utc), 'commenter': 'mloning', 'type': 'User'}, {'comment_id': 676763637, 'comment_body': 'this one too could be a stand-alone function', 'comment_created': datetime.datetime(2021, 7, 26, 16, 30, 55, tzinfo=datetime.timezone.utc), 'commenter': 'mloning', 'type': 'User'}, {'comment_id': 676764585, 'comment_body': 'Would this work? \r\n```suggestion\r\n            z = z.squeeze(""columns"")\r\n```\r\nhttps://pandas.pydata.org/docs/reference/api/pandas.DataFrame.squeeze.html', 'comment_created': datetime.datetime(2021, 7, 26, 16, 32, 17, tzinfo=datetime.timezone.utc), 'commenter': 'mloning', 'type': 'User'}, {'comment_id': 676766446, 'comment_body': ""there's some code duplication here, lines 253-257 are used below again, right?"", 'comment_created': datetime.datetime(2021, 7, 26, 16, 34, 40, tzinfo=datetime.timezone.utc), 'commenter': 'mloning', 'type': 'User'}, {'comment_id': 677334133, 'comment_body': 'Thanks @mloning, I moved it into a wrapper function now :)', 'comment_created': datetime.datetime(2021, 7, 27, 10, 48, tzinfo=datetime.timezone.utc), 'commenter': 'SveaMeyer13', 'type': 'User'}]","[{'commit_sha': 'df15fe6f2c05d842b943120509093f8752a03103', 'committer_username': 'SveaMeyer13', 'committer_name': 'Svea Marie Meyer', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 14, 9, 30, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '730197fcc9aaa9a3abbc5627cb576003edf6012a', 'committer_username': 'SveaMeyer13', 'committer_name': 'Svea Marie Meyer', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 14, 9, 30, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '249e44d05dab2fcb38d45d91832a1cac8524b9cd', 'committer_username': 'SveaMeyer13', 'committer_name': 'Svea Marie Meyer', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 14, 9, 30, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12d532ba8fc15693d6d76cdeba8357324252e123', 'committer_username': 'SveaMeyer13', 'committer_name': 'Svea Marie Meyer', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 14, 9, 30, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '27afa7535bb2a31493bf84b97d3a25086f7c00ec', 'committer_username': 'SveaMeyer13', 'committer_name': 'Svea Marie Meyer', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 14, 9, 30, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3615f162be0cbcb5ebe433257fc672ae308d681', 'committer_username': 'SveaMeyer13', 'committer_name': 'Svea Marie Meyer', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 14, 9, 30, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ca2383b0302c373ff4c0d6a571d5a04411f1d75', 'committer_username': 'SveaMeyer13', 'committer_name': 'Svea Marie Meyer', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 14, 9, 30, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70f6905cfa49f97075279907376100166fd1cb2e', 'committer_username': 'SveaMeyer13', 'committer_name': 'Svea Marie Meyer', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 14, 9, 30, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc1e91450c69ea24461ae9e6bd4254d4251d32b1', 'committer_username': 'SveaMeyer13', 'committer_name': 'Svea Marie Meyer', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 14, 9, 30, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d09c9dbf9088e76ea47f14b481a39089d7aabc1', 'committer_username': 'SveaMeyer13', 'committer_name': 'Svea Marie Meyer', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 14, 9, 30, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c736b2e988cb34fe16a9cf943ec1aa171312a01e', 'committer_username': 'SveaMeyer13', 'committer_name': 'Svea Marie Meyer', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 14, 9, 30, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '743e3e8e25590a4cf806916e17a878b1728b5d38', 'committer_username': 'SveaMeyer13', 'committer_name': 'Svea Marie Meyer', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 14, 9, 30, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a8893db16a151ad0cf50471c72b1a56b163ff75', 'committer_username': 'SveaMeyer13', 'committer_name': 'Svea Marie Meyer', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 14, 9, 30, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eff49f4da886f8e64ddafbca446cb39123917fbc', 'committer_username': 'SveaMeyer13', 'committer_name': 'Svea Marie Meyer', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 14, 9, 30, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe493df88355dd8df6eb90881a794f19d7d50bfe', 'committer_username': 'SveaMeyer13', 'committer_name': 'Svea Marie Meyer', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 14, 9, 30, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d08399da84888329b4b0c453cf6fe973e041f82', 'committer_username': 'SveaMeyer13', 'committer_name': 'Svea Marie Meyer', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 14, 9, 30, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e229caab371bcf3e3928bf88d3a9e5029dacbb05', 'committer_username': 'SveaMeyer13', 'committer_name': 'Svea Marie Meyer', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 14, 9, 30, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '735a39d4e66189caa59a707a341d2555e9a17c3b', 'committer_username': 'SveaMeyer13', 'committer_name': 'Svea Marie Meyer', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 14, 9, 30, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '389b3eb599b9d318dc3ddc9ce7c3b8c5940f1c4a', 'committer_username': 'SveaMeyer13', 'committer_name': 'Svea Marie Meyer', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 14, 9, 30, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c9adb4a96b7d8ac0bc7fe66bc7b70d5cd6de910', 'committer_username': 'SveaMeyer13', 'committer_name': 'Svea Marie Meyer', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 14, 9, 30, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd9f266ea37fb60496fcebbbfb1290fba82d0ba8', 'committer_username': 'SveaMeyer13', 'committer_name': 'Svea Marie Meyer', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 14, 9, 30, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45b1e3b036a1cd5476bc48d69cbbcabffc2a52e0', 'committer_username': 'SveaMeyer13', 'committer_name': 'Svea Marie Meyer', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 14, 9, 30, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b7c2306daa45c6e92df55cde487041e8a92cf6f', 'committer_username': 'SveaMeyer13', 'committer_name': 'Svea Marie Meyer', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 14, 9, 30, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '126f5e96bd0a0030f7f8b87cfac03500d930c67c', 'committer_username': 'SveaMeyer13', 'committer_name': 'Svea Marie Meyer', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 14, 9, 30, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b663680bda1ee685fd4237925987cc1a481b538b', 'committer_username': 'SveaMeyer13', 'committer_name': 'Svea Marie Meyer', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 14, 9, 30, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40384bb38165e186d522742da4568553210a2377', 'committer_username': 'SveaMeyer13', 'committer_name': 'Svea Marie Meyer', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 14, 9, 30, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3411496b4490ca5b69d2828e4deb6b6f2bdfb01', 'committer_username': 'SveaMeyer13', 'committer_name': 'Svea Marie Meyer', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 14, 9, 30, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ff82bbd218d99dbf524fdc8ee57710bd3b5e9da', 'committer_username': 'SveaMeyer13', 'committer_name': 'Svea Marie Meyer', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 14, 9, 30, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd7952f1c28354e9d70bf7c933930ba793ed9ac3e', 'committer_username': 'SveaMeyer13', 'committer_name': 'Svea Marie Meyer', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 14, 9, 30, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd467c4ecb8507007f74908c84cff2d5aaafef0ad', 'committer_username': 'SveaMeyer13', 'committer_name': 'Svea Marie Meyer', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 14, 9, 30, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '31c94c78ba3e83c38c8b96178caa380cf4c53af5', 'committer_username': 'SveaMeyer13', 'committer_name': 'Svea Marie Meyer', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 14, 9, 30, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aed22dd9dc4af131e27f82118aa339d3e1a36f1b', 'committer_username': 'SveaMeyer13', 'committer_name': 'Svea Marie Meyer', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 14, 9, 30, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e2ec24caf5f6aed5f0e92181972ebf8fd8de92b6', 'committer_username': 'SveaMeyer13', 'committer_name': 'Svea Marie Meyer', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 14, 9, 30, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9ac82f58d2f3fe334ae4cd5f290ec0edc8c0243', 'committer_username': 'aiwalter', 'committer_name': 'Martin Walter', 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 22, 10, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b65c576372a5769d654331de90b6c99a7aef804', 'committer_username': 'SveaMeyer13', 'committer_name': 'Svea Marie Meyer', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 14, 9, 30, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9da6a2b6b43c782d480a5cfa758b83ef16e13df6', 'committer_username': 'SveaMeyer13', 'committer_name': 'Svea Marie Meyer', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 14, 9, 30, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1eb09206de4dedc7e56ab728e44fc58fed7aa16', 'committer_username': 'mloning', 'committer_name': 'Markus Löning', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 14, 10, 19, 32, tzinfo=datetime.timezone.utc)}]",Svea Marie Meyer,46671894,,User,,8,,2,6
689760254,add precommit yaml,"Not sure if we want to have the same pre-commit checks as in sktime(-proper)? If yes, we need to add this pre-commit.yaml (copied from sktime proper). I tested it for this repo and it seems to work. ",True,3,https://api.github.com/repos/sktime/sktime-neuro/pulls/3,https://github.com/sktime/sktime-neuro/pull/3,closed,48,0,1,1,0,0,0,0,[],2021-07-14 09:53:56+00:00,2021-07-14 15:06:25+00:00,18749.0,5:12:29,[],"[{'commit_sha': '7b27c39f234514da1d4c4c0eae76c3069f3566cc', 'committer_username': 'SveaMeyer13', 'committer_name': 'Svea Marie Meyer', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 14, 9, 30, 58, tzinfo=datetime.timezone.utc)}]",Svea Marie Meyer,46671894,,User,,8,,2,6
689754778,allow same python versions as sktime,"Currently, the setup.py requires python 3.6 or 3.7 which is probably to make it compatible with deep learning frameworks. Should we make this package compatible with the same versions as sktime(-proper)? That would be everything higher than 3.6 ",True,2,https://api.github.com/repos/sktime/sktime-neuro/pulls/2,https://github.com/sktime/sktime-neuro/pull/2,closed,5,5,1,1,0,0,0,0,[],2021-07-14 09:46:03+00:00,2021-07-14 09:49:11+00:00,188.0,0:03:08,[],"[{'commit_sha': 'ca098226208f2ba75d60ca0cb5b76fafc808a34c', 'committer_username': 'SveaMeyer13', 'committer_name': 'Svea Marie Meyer', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 14, 9, 30, 58, tzinfo=datetime.timezone.utc)}]",Svea Marie Meyer,46671894,,User,,8,,2,6
690747653,Porting over code from sktime-neuro-draft,"**Changes**

- Adjust flake8 in setup.cfg to be compatible with black for pre-commit hooks
- Add utilities to create mne data format from sktime data format and to create annotations from mne raw object
- Add series-to-series transformers
       - temporal filter
       - downsampling
       - missing: Artifact Removal
- Add panel-to-panel transformers
      - temporal filter
      - downsampling
      - slicing
      - baseline correction
- Add base class for series-to-panel transformer
- Add series-to-panel transformer 
      - epoching
- Add notebook of example notebook
- Add tests 
      - for filterforseries
      - for filterforpanel
      - more to follow, not sure how to port tests from sktime though

**To dos:**

- [ ] add artifact removal
- [ ] add/port tests from sktime ",True,5,https://api.github.com/repos/sktime/sktime-neuro/pulls/5,https://github.com/sktime/sktime-neuro/pull/5,closed,2168,59,19,11,4,0,0,0,[],2021-07-15 14:03:47+00:00,2021-07-22 11:51:11+00:00,596844.0,"6 days, 21:47:24",[],"[{'commit_sha': 'e76df8d01a6c48fdb6c0ad4644b0026d7528118b', 'committer_username': 'SveaMeyer13', 'committer_name': 'Svea Marie Meyer', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 14, 9, 30, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e50d9145e479385b12487befa5c86f7abf5f5ce', 'committer_username': 'SveaMeyer13', 'committer_name': 'Svea Marie Meyer', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 14, 9, 30, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1aaa2e57e6fe735ab167b5d2553ba1f198df33fc', 'committer_username': 'SveaMeyer13', 'committer_name': 'Svea Marie Meyer', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 14, 9, 30, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5508656d76b8fdd3ced74037c9812922798e710a', 'committer_username': 'SveaMeyer13', 'committer_name': 'Svea Marie Meyer', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 14, 9, 30, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1599d4a0f7c96a842e27680e09a5d7787919f020', 'committer_username': 'SveaMeyer13', 'committer_name': 'Svea Marie Meyer', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 14, 9, 30, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '630562fc4c944c7c330f1f8fa572f2207c12f000', 'committer_username': 'SveaMeyer13', 'committer_name': 'Svea Marie Meyer', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 14, 9, 30, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9b6d3f93dbebe6b54712b3a30e9172b76e18f78', 'committer_username': 'SveaMeyer13', 'committer_name': 'Svea Marie Meyer', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 14, 9, 30, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5755fffb0c3dc1f5f4ff689e46b1bc8fc7a74170', 'committer_username': 'SveaMeyer13', 'committer_name': 'Svea Marie Meyer', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 14, 9, 30, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '193775f0ef69d2b8603fbc2a0e850272960bd91a', 'committer_username': 'SveaMeyer13', 'committer_name': 'Svea Marie Meyer', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 14, 9, 30, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b082bd79267460c20ff5e911850abbda06b74d3', 'committer_username': 'SveaMeyer13', 'committer_name': 'Svea Marie Meyer', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 14, 9, 30, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e8f6753afa283517931ee222a63fa2a8c8731406', 'committer_username': 'SveaMeyer13', 'committer_name': 'Svea Marie Meyer', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 14, 9, 30, 58, tzinfo=datetime.timezone.utc)}]",Svea Marie Meyer,46671894,,User,,8,,2,6
701274993,Change assumed shape of time series to timepoints*channels,"I assumed the shape of sktime time series to be `channels * timepoints` (as it is for example defined in mne). But when reviewing the specifications made in PR #1232 in sktime, I figured that it is supposed to be `timepoints * channels`. 

This required changes in

- the two series-to-series transformers
- the epoching function and 
- the example notebook. ",True,11,https://api.github.com/repos/sktime/sktime-neuro/pulls/11,https://github.com/sktime/sktime-neuro/pull/11,closed,37,16,5,2,2,0,0,0,[],2021-08-02 09:02:05+00:00,2021-08-03 18:08:28+00:00,119183.0,"1 day, 9:06:23",[],"[{'commit_sha': 'fd4714d679e051c07b0694778b93a73d72e25c7b', 'committer_username': 'SveaMeyer13', 'committer_name': 'Svea Marie Meyer', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 14, 9, 30, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd95bc1dda34024c465344b421b6a5cc8071f9d11', 'committer_username': 'SveaMeyer13', 'committer_name': 'Svea Marie Meyer', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 14, 9, 30, 58, tzinfo=datetime.timezone.utc)}]",Svea Marie Meyer,46671894,,User,,8,,2,6
697799455,Epoching on a multitude of specified labels,"The epoching function now returns the panel data and a labels vector. 
` X, y = epoch(streamed_data, annotation, labels, interval, sampling_frequency)`

Arguments:

- streamed_data : np.array

                  full data of shape channels * timepoints (series data)

- annotation : pd.DataFrame

                  annotation object created from BIDS data

- labels : list of (strings or integers)

                  labels that we are interested in         

- interval : tuple of floats in seconds

                  interval around annotation that we are interested in

- sampling_frequency : float or int in Hz

                  frequency that the data was recorded with

Before we would only return X (panel data that corresponds to one label). Which might introduce leakage effects due to later transformations (if different panel-to-panel transformations are applied to data with different labels). 

However: We can no longer use the fit_transform() API of scikit learn as we are now returning X and y (before we would only return X)",True,10,https://api.github.com/repos/sktime/sktime-neuro/pulls/10,https://github.com/sktime/sktime-neuro/pull/10,closed,73,1095,3,2,1,0,0,0,[],2021-07-27 12:04:50+00:00,2021-07-28 10:11:57+00:00,79627.0,22:07:07,[],"[{'commit_sha': '7b1cdffb626da47ae3daeac05de492d0111d2585', 'committer_username': 'SveaMeyer13', 'committer_name': 'Svea Marie Meyer', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 14, 9, 30, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aae38934072554a9ffd7dd98f3a1f471073d5e81', 'committer_username': 'SveaMeyer13', 'committer_name': 'Svea Marie Meyer', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 14, 9, 30, 58, tzinfo=datetime.timezone.utc)}]",Svea Marie Meyer,46671894,,User,,8,,2,6
713518399,Beginning/end split friendly epoching,"So far epoching would first extract all trials of one label and then all trials of the next label. Therefore the instances in the panel were ordered according to label not according to time. To have a training/test split corresponding to beginning/end, epoching now leads to panel data that is ordered according to time.  ",True,18,https://api.github.com/repos/sktime/sktime-neuro/pulls/18,https://github.com/sktime/sktime-neuro/pull/18,closed,11,11,1,1,0,0,0,0,[],2021-08-16 15:05:37+00:00,2022-06-20 10:07:16+00:00,26593299.0,"307 days, 19:01:39",[],"[{'commit_sha': '84454d900b99d2e74a482c22d339963410a73f5b', 'committer_username': 'SveaMeyer13', 'committer_name': 'Svea Marie Meyer', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 14, 9, 30, 58, tzinfo=datetime.timezone.utc)}]",Svea Marie Meyer,46671894,,User,,8,,2,6
713519492,fix bug in dataloader,,True,19,https://api.github.com/repos/sktime/sktime-neuro/pulls/19,https://github.com/sktime/sktime-neuro/pull/19,closed,1,1,1,1,0,0,0,0,[],2021-08-16 15:06:50+00:00,2022-06-20 10:07:02+00:00,26593212.0,"307 days, 19:00:12",[],"[{'commit_sha': '89c9ec9948aa040a473a3167a5fa00997e02b9d5', 'committer_username': 'SveaMeyer13', 'committer_name': 'Svea Marie Meyer', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 14, 9, 30, 58, tzinfo=datetime.timezone.utc)}]",Svea Marie Meyer,46671894,,User,,8,,2,6
690747653,Porting over code from sktime-neuro-draft,"**Changes**

- Adjust flake8 in setup.cfg to be compatible with black for pre-commit hooks
- Add utilities to create mne data format from sktime data format and to create annotations from mne raw object
- Add series-to-series transformers
       - temporal filter
       - downsampling
       - missing: Artifact Removal
- Add panel-to-panel transformers
      - temporal filter
      - downsampling
      - slicing
      - baseline correction
- Add base class for series-to-panel transformer
- Add series-to-panel transformer 
      - epoching
- Add notebook of example notebook
- Add tests 
      - for filterforseries
      - for filterforpanel
      - more to follow, not sure how to port tests from sktime though

**To dos:**

- [ ] add artifact removal
- [ ] add/port tests from sktime ",True,5,https://api.github.com/repos/sktime/sktime-neuro/pulls/5,https://github.com/sktime/sktime-neuro/pull/5,closed,2168,59,19,11,4,0,0,0,[],2021-07-15 14:03:47+00:00,2021-07-22 11:51:11+00:00,596844.0,"6 days, 21:47:24",[],"[{'commit_sha': 'e76df8d01a6c48fdb6c0ad4644b0026d7528118b', 'committer_username': 'SveaMeyer13', 'committer_name': 'Svea Marie Meyer', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 14, 9, 30, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e50d9145e479385b12487befa5c86f7abf5f5ce', 'committer_username': 'SveaMeyer13', 'committer_name': 'Svea Marie Meyer', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 14, 9, 30, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1aaa2e57e6fe735ab167b5d2553ba1f198df33fc', 'committer_username': 'SveaMeyer13', 'committer_name': 'Svea Marie Meyer', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 14, 9, 30, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5508656d76b8fdd3ced74037c9812922798e710a', 'committer_username': 'SveaMeyer13', 'committer_name': 'Svea Marie Meyer', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 14, 9, 30, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1599d4a0f7c96a842e27680e09a5d7787919f020', 'committer_username': 'SveaMeyer13', 'committer_name': 'Svea Marie Meyer', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 14, 9, 30, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '630562fc4c944c7c330f1f8fa572f2207c12f000', 'committer_username': 'SveaMeyer13', 'committer_name': 'Svea Marie Meyer', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 14, 9, 30, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9b6d3f93dbebe6b54712b3a30e9172b76e18f78', 'committer_username': 'SveaMeyer13', 'committer_name': 'Svea Marie Meyer', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 14, 9, 30, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5755fffb0c3dc1f5f4ff689e46b1bc8fc7a74170', 'committer_username': 'SveaMeyer13', 'committer_name': 'Svea Marie Meyer', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 14, 9, 30, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '193775f0ef69d2b8603fbc2a0e850272960bd91a', 'committer_username': 'SveaMeyer13', 'committer_name': 'Svea Marie Meyer', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 14, 9, 30, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b082bd79267460c20ff5e911850abbda06b74d3', 'committer_username': 'SveaMeyer13', 'committer_name': 'Svea Marie Meyer', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 14, 9, 30, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e8f6753afa283517931ee222a63fa2a8c8731406', 'committer_username': 'SveaMeyer13', 'committer_name': 'Svea Marie Meyer', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 14, 9, 30, 58, tzinfo=datetime.timezone.utc)}]",Svea Marie Meyer,46671894,,User,,8,,2,6

709171205,Critical Difference Diagrams,"Fixes #1186

Adds functionality to plot a critical difference diagram.

As discussed the entire calculation of critical differences and cliques as well as the plotting happens within one standalone function. 

Coding style checks will fail due to hard-coded qalpha values. 
",True,1277,https://api.github.com/repos/sktime/sktime/pulls/1277,https://github.com/sktime/sktime/pull/1277,closed,600,0,1,5,2,4,0,0,[],2021-08-11 15:47:11+00:00,2021-08-17 09:27:27+00:00,495616.0,"5 days, 17:40:16","[{'comment_id': 689818656, 'comment_body': ""I'd include a reference to which algorithm you are implementing, e.g., which formula for the approximation of the null distribution"", 'comment_created': datetime.datetime(2021, 8, 16, 19, 58, 1, tzinfo=datetime.timezone.utc), 'commenter': 'fkiraly', 'type': 'User'}, {'comment_id': 689818740, 'comment_body': 'should be github user name', 'comment_created': datetime.datetime(2021, 8, 16, 19, 58, 9, tzinfo=datetime.timezone.utc), 'commenter': 'fkiraly', 'type': 'User'}, {'comment_id': 689818934, 'comment_body': ""if it's copied - why can't you use `scipy` directly, leaving the logic in `scipy`?"", 'comment_created': datetime.datetime(2021, 8, 16, 19, 58, 34, tzinfo=datetime.timezone.utc), 'commenter': 'fkiraly', 'type': 'User'}, {'comment_id': 689867505, 'comment_body': 'this is ok-ish, though I think what the function body should be doing is only plotting.\r\nThere is some testing logic in there and clique computation, which I\'d suggest to move out to separate functions.\r\nSimilarly, one could think about factoring out the raw plotting (only positions, cliques etc passed), and have a main function which does everything together (testing, clique computation, plotting) - that would be cleaner and follow the ""separation of concerns"" pattern better.', 'comment_created': datetime.datetime(2021, 8, 16, 21, 20, 17, tzinfo=datetime.timezone.utc), 'commenter': 'fkiraly', 'type': 'User'}]","[{'commit_sha': '2204007873f6ab733b05f933b36137391ef5cb1a', 'committer_username': 'SveaMeyer13', 'committer_name': 'Svea Marie Meyer', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 14, 9, 30, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d44bdc4ee9e1fbfafc2fb953c043e744f1eb740', 'committer_username': 'SveaMeyer13', 'committer_name': 'Svea Marie Meyer', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 14, 9, 30, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49362b6dad7f0665198b4bd690adc00c347f63d3', 'committer_username': 'SveaMeyer13', 'committer_name': 'Svea Marie Meyer', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 14, 9, 30, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0375818db9184aef1f3e70b48ef30af939d2fa2c', 'committer_username': 'TonyBagnall', 'committer_name': 'Tony Bagnall', 'committer_email': 'ajb@uea.ac.uk', 'commit_date': datetime.datetime(2014, 11, 6, 17, 17, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f999e67611752d432adfc7c24dde51115e40527', 'committer_username': 'SveaMeyer13', 'committer_name': 'Svea Marie Meyer', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 14, 9, 30, 58, tzinfo=datetime.timezone.utc)}]",Svea Marie Meyer,46671894,,User,,8,,2,6
704692602,Started working on loading external datasets,"To run experiments on MI Data, we want to consider other datasets than the matching pennies dataset that is already available in BIDS format. This PR adds loader functionality for

-  the first (`load_c4_ds1()`) dataset of the [Graz IV BCI Competition](http://www.bbci.de/competition/iv/)
    - 7 Subjects
-  the second  (`load_c4_ds2b()`) dataset of the [Graz IV BCI Competition](http://www.bbci.de/competition/iv/)
    - 9 Subjects 
-  the second dataset from [BNCI Horizon](http://bnci-horizon-2020.eu/database/data-sets)
    - 14 Subjects 

With this, we have a total of 30 problems of MI data.
The example notebook shows how to load and classify the data. ",True,16,https://api.github.com/repos/sktime/sktime-neuro/pulls/16,https://github.com/sktime/sktime-neuro/pull/16,closed,405,0,3,3,1,0,0,0,[],2021-08-05 13:08:56+00:00,2021-08-12 09:31:19+00:00,591743.0,"6 days, 20:22:23",[],"[{'commit_sha': '09e149fafe8c605cef8163a9bde94bc5e3429a08', 'committer_username': 'SveaMeyer13', 'committer_name': 'Svea Marie Meyer', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 14, 9, 30, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c5b9cc1af335d5052815924654f4bffc45260ad', 'committer_username': 'SveaMeyer13', 'committer_name': 'Svea Marie Meyer', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 14, 9, 30, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7792ee39578c33542448dc52d87218e8738f32f1', 'committer_username': 'SveaMeyer13', 'committer_name': 'Svea Marie Meyer', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 14, 9, 30, 58, tzinfo=datetime.timezone.utc)}]",Svea Marie Meyer,46671894,,User,,8,,2,6
713519492,fix bug in dataloader,,True,19,https://api.github.com/repos/sktime/sktime-neuro/pulls/19,https://github.com/sktime/sktime-neuro/pull/19,closed,1,1,1,1,0,0,0,0,[],2021-08-16 15:06:50+00:00,2022-06-20 10:07:02+00:00,26593212.0,"307 days, 19:00:12",[],"[{'commit_sha': '89c9ec9948aa040a473a3167a5fa00997e02b9d5', 'committer_username': 'SveaMeyer13', 'committer_name': 'Svea Marie Meyer', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 14, 9, 30, 58, tzinfo=datetime.timezone.utc)}]",Svea Marie Meyer,46671894,,User,,8,,2,6

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
156401841,sktime,sktime/sktime,Python,1306,7687,103,385,4825,1156,318,230,"[{'id': 734761777, 'number': 1421, 'closed': datetime.datetime(2021, 10, 27, 21, 43, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 15, 17, 10, 26, tzinfo=datetime.timezone.utc), 'time_taken': 3645181.0, 'time_delta': '42 days, 4:33:01', 'additions': 355, 'deletions': 127, 'state': 'closed'}, {'id': 715262743, 'number': 1335, 'closed': datetime.datetime(2021, 9, 7, 18, 14, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 18, 16, 53, 46, tzinfo=datetime.timezone.utc), 'time_taken': 1732841.0, 'time_delta': '20 days, 1:20:41', 'additions': 107, 'deletions': 31, 'state': 'closed'}, {'id': 709171205, 'number': 1277, 'closed': datetime.datetime(2021, 8, 17, 9, 27, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 11, 15, 47, 11, tzinfo=datetime.timezone.utc), 'time_taken': 495616.0, 'time_delta': '5 days, 17:40:16', 'additions': 600, 'deletions': 0, 'state': 'closed'}, {'id': 679938099, 'number': 1077, 'closed': datetime.datetime(2021, 7, 3, 19, 36, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 29, 12, 44, 39, tzinfo=datetime.timezone.utc), 'time_taken': 370308.0, 'time_delta': '4 days, 6:51:48', 'additions': 3, 'deletions': 1, 'state': 'closed'}, {'id': 677081415, 'number': 1044, 'closed': datetime.datetime(2021, 8, 14, 7, 31, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 24, 12, 47, tzinfo=datetime.timezone.utc), 'time_taken': 4387493.0, 'time_delta': '50 days, 18:44:53', 'additions': 267, 'deletions': 6, 'state': 'closed'}, {'id': 676862762, 'number': 1042, 'closed': datetime.datetime(2021, 6, 25, 8, 52, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 24, 7, 30, 29, tzinfo=datetime.timezone.utc), 'time_taken': 91322.0, 'time_delta': '1 day, 1:22:02', 'additions': 75, 'deletions': 12, 'state': 'closed'}, {'id': 649028688, 'number': 885, 'closed': datetime.datetime(2021, 5, 21, 12, 36, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 20, 15, 28, 55, tzinfo=datetime.timezone.utc), 'time_taken': 76061.0, 'time_delta': '21:07:41', 'additions': 28, 'deletions': 40, 'state': 'closed'}]"
382038384,sktime-neuro,sktime/sktime-neuro,Python,3,9,5,5,79,5,10,0,"[{'id': 713519492, 'number': 19, 'closed': datetime.datetime(2022, 6, 20, 10, 7, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 16, 15, 6, 50, tzinfo=datetime.timezone.utc), 'time_taken': 26593212.0, 'time_delta': '307 days, 19:00:12', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 713518399, 'number': 18, 'closed': datetime.datetime(2022, 6, 20, 10, 7, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 16, 15, 5, 37, tzinfo=datetime.timezone.utc), 'time_taken': 26593299.0, 'time_delta': '307 days, 19:01:39', 'additions': 11, 'deletions': 11, 'state': 'closed'}, {'id': 704692602, 'number': 16, 'closed': datetime.datetime(2021, 8, 12, 9, 31, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 5, 13, 8, 56, tzinfo=datetime.timezone.utc), 'time_taken': 591743.0, 'time_delta': '6 days, 20:22:23', 'additions': 405, 'deletions': 0, 'state': 'closed'}, {'id': 701274993, 'number': 11, 'closed': datetime.datetime(2021, 8, 3, 18, 8, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 2, 9, 2, 5, tzinfo=datetime.timezone.utc), 'time_taken': 119183.0, 'time_delta': '1 day, 9:06:23', 'additions': 37, 'deletions': 16, 'state': 'closed'}, {'id': 697799455, 'number': 10, 'closed': datetime.datetime(2021, 7, 28, 10, 11, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 27, 12, 4, 50, tzinfo=datetime.timezone.utc), 'time_taken': 79627.0, 'time_delta': '22:07:07', 'additions': 73, 'deletions': 1095, 'state': 'closed'}, {'id': 690747653, 'number': 5, 'closed': datetime.datetime(2021, 7, 22, 11, 51, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 15, 14, 3, 47, tzinfo=datetime.timezone.utc), 'time_taken': 596844.0, 'time_delta': '6 days, 21:47:24', 'additions': 2168, 'deletions': 59, 'state': 'closed'}, {'id': 689760254, 'number': 3, 'closed': datetime.datetime(2021, 7, 14, 15, 6, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 14, 9, 53, 56, tzinfo=datetime.timezone.utc), 'time_taken': 18749.0, 'time_delta': '5:12:29', 'additions': 48, 'deletions': 0, 'state': 'closed'}, {'id': 689754778, 'number': 2, 'closed': datetime.datetime(2021, 7, 14, 9, 49, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 14, 9, 46, 3, tzinfo=datetime.timezone.utc), 'time_taken': 188.0, 'time_delta': '0:03:08', 'additions': 5, 'deletions': 5, 'state': 'closed'}]"

