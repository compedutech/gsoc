pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1442629633,Refresh importer project,"In six days the last commit  of the importer project (https://github.com/metabrainz/bookbrainz-utils/commit/2a655229445284b7f84155fa09a8170ca91d5ef9) will have its fourth anniversary.
Time to celebrate this with a huge PR which refreshes almost the entire infrastructure :tada:

## Problems and Solutions

What initially started with a lot of dependency updates and migrations from flow types to TypeScript and from CommonJS modules (CJS) to ES modules (ESM), quickly turned into massive changes to get the project running at all.

There were two aspects which made running the project unsuccessful and extremely cumbersome:
1. **The code itself** contained lots of boilerplate where I'm doubting whether this was working at all back in 2018, for example the [`asyncCluster`](https://github.com/kellnerd/bookbrainz-utils/tree/refresh-importer/importer/src/asyncCluster) for multi-threading and the [queue wrapper](https://github.com/kellnerd/bookbrainz-utils/blob/refresh-importer/importer/src/queue/index.ts). 
   In the end I've rewritten the queue logic from scratch and did not use `asyncCluster` in my new CLI implementations.
2. **Transpiling** the whole codebase after each coding step before running it is a pain, especially while debugging. I thought I could simply solve that by using `babel-node` to do both steps at once, but unfortunately both `babel-node` and `ts-node` support for ESM has been broken with Node.js v20 and the projects looked more or less stale.
   Since the whole previous setup was effectively unusable, I decided to give [Deno](https://deno.land/) a try. It has native TS and ESM support and the Node.js compatibility is improving with each release. Luckily it worked after I did a few minor changes which are mostly compatible with the previous Node.js/Babel setup. We only have to find a solution to transpile `.ts` import specifiers to `.js` if we ever want to use the previous setup again.

## Main Features

- More reliable reimplementation of the import queue: [src/queue.ts](https://github.com/kellnerd/bookbrainz-utils/blob/refresh-importer/importer/src/queue.ts)
- Type definitions for [parsed/queued entities](https://github.com/kellnerd/bookbrainz-utils/blob/refresh-importer/importer/src/parser.ts) and [entity validators](https://github.com/kellnerd/bookbrainz-utils/tree/refresh-importer/importer/src/consumer/validators) (including the migration from the old entity type names Creator and Publication to the current ones)
- New OpenLibrary Import producer CLI: [src/openLibrary/import.ts](https://github.com/kellnerd/bookbrainz-utils/blob/refresh-importer/importer/src/openLibrary/import.ts)
- New BookBrainz Import Queue (BBIQ) management CLI (fka consumer): [src/bbiq.ts](https://github.com/kellnerd/bookbrainz-utils/blob/refresh-importer/importer/src/bbiq.ts)

I've tried my best to document the basic usage of the two new CLIs in the [README](https://github.com/kellnerd/bookbrainz-utils/tree/refresh-importer/importer#readme) and through their `--help` flags without wasting too much time for details which might change soon.
For example I'm considering to move the RabbitMQ configuration into the config.json file (once I'm rewriting that part in TS) instead of passing it as a command line argument.
Let me know if I have missed something obvious.

P.S. Currently I'm not sure whether the type definitions for the parsed entities will also be valid and useful for bb-site and whether they should be moved into bb-data. We will better see this later.
(The types for the validators will definitely be moved together with their code, as per [my proposal](https://github.com/kellnerd/gsoc-2023#outdated-and-duplicated-code).)

## How to Review This Beast

This huge branch can best be reviewed commit by commit, I will specifically address important and irrelevant commits now:
- Most important are the new files (with a 2023 copyright header only), the files which I already mentioned above and ""feat"" commits of course.
- Generally the latest commits are more interesting than the earlier clean-up commits of code which has partially been rewritten or made obsolete since.
- https://github.com/kellnerd/bookbrainz-utils/commit/edada0eb7c60852af5211b6195c4d94491f0d5b2 What should be done with babel-plugin-lodash?
- https://github.com/kellnerd/bookbrainz-utils/commit/27a615613ac6e56f67ce8a8a8548d32c95e55d23 was a lot of work, but I later had to abandon winston, so it is less relevant
- https://github.com/kellnerd/bookbrainz-utils/commit/9db6c2acc33517e40c2ddf250c430ce3de079a56 was the result of a long, unsuccessful debugging session and was reverted later, I have dropped those commits now (I avoided rebasing my original branch in case you were following along and since the branch name `update-deps` was no longer accurate)
- https://github.com/kellnerd/bookbrainz-utils/commit/5c369bfaa57b0128c47aafb8f600ce21b0ead351 is probably the most important gotcha (winston + amqplib = hanging process)

## Overview of Clean-up Tasks

- [x] Get rid of the bluebird promises library
- [x] Upgrade rotten dev dependencies babel et al
- [x] Upgrade vulnerable packages
- [x] Fully migrate from flow to TypeScript
- [x] Migrate from CJS to ESM
- [x] Fix now invalid call signatures and imports
- [x] Use `.ts` and `node:` imports for **Deno** compatibility
  - [x] Avoid using a GitHub package specifier in bb-data's package.json: https://github.com/metabrainz/bookbrainz-data-js/commit/8077fd1ec9b171b528d5a638b992003d9541dcee
- [x] Stop using the `async` npm package
- [ ] Drop useless [error wrappers](https://github.com/kellnerd/bookbrainz-utils/blob/refresh-importer/importer/src/helpers/errors.ts) (WIP)
- [ ] Delete old [OL producer CLI](https://github.com/kellnerd/bookbrainz-utils/blob/refresh-importer/importer/src/openLibrary/producer/index.js) (replaced by [new producer CLI](https://github.com/kellnerd/bookbrainz-utils/blob/refresh-importer/importer/src/openLibrary/import.ts))
- [ ] Delete old [exploration tool](https://github.com/kellnerd/bookbrainz-utils/blob/refresh-importer/importer/src/openLibrary/exploration) (used to collect statistics about available JSON attributes in OL dumps) and its [old queue dependency](https://github.com/kellnerd/bookbrainz-utils/blob/refresh-importer/importer/src/queue/index.ts)
- [ ] Delete [`asyncCluster`](https://github.com/kellnerd/bookbrainz-utils/blob/refresh-importer/importer/src/asyncCluster) (currently no replacement) and uninstall `async` npm package
- [ ] Move [general parser types](https://github.com/kellnerd/bookbrainz-utils/blob/refresh-importer/importer/src/parser.ts) into a subfolder (which one / how should it be named?)
- [ ] Move [queue module](https://github.com/kellnerd/bookbrainz-utils/blob/refresh-importer/importer/src/queue.ts) into a subfolder (when the old queue is gone)
- [ ] Improve folder structure, e.g. flatten producer directory
- [ ] Convert [identifier mapping](https://github.com/kellnerd/bookbrainz-utils/blob/refresh-importer/importer/src/helpers/mapping.ts) into an enum?
- [ ] Update or delete obsolete [README for the config file](https://github.com/kellnerd/bookbrainz-utils/blob/refresh-importer/importer/config/README.md) once the implementation is stable?
- [ ] Update or delete obsolete [package.json scripts](https://github.com/kellnerd/bookbrainz-utils/blob/refresh-importer/importer/package.json) once the implementation is stable

For updates, see [the comment below](https://github.com/metabrainz/bookbrainz-utils/pull/40#issuecomment-1703889451).",True,40,https://api.github.com/repos/metabrainz/bookbrainz-utils/pulls/40,https://github.com/metabrainz/bookbrainz-utils/pull/40,closed,16272,8737,44,72,4,6,0,0,[],2023-07-20 11:00:58+00:00,2023-08-02 10:02:36+00:00,1119698.0,"12 days, 23:01:38","[{'comment_id': 1273648947, 'comment_body': ""I definitely think we shouldn't spend any more time with the lodash plugin; after all as you say the goal of this project isn't to produce small compiled output (and running with deno compiled output is even less relevant)"", 'comment_created': datetime.datetime(2023, 7, 25, 14, 36, 48, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 1273699428, 'comment_body': 'Would it make sense to log errors here if `!success`, regardless of the presence of a failure queue?', 'comment_created': datetime.datetime(2023, 7, 25, 15, 7, 45, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 1273709017, 'comment_body': ""I found that I needed to use a specific docker image to get the RMQ management web UI out of the box (as per the [docker image readme](https://github.com/docker-library/docs/tree/master/rabbitmq#management-plugin)).\r\nI would also suggest running the container detached , but that's a detail.\r\n```suggestion\r\ndocker run -d --hostname rabbit --name rabbit-mq -p 127.0.0.1:5672:5672 -p 127.0.0.1:15672:15672 rabbitmq:3-management\r\n```"", 'comment_created': datetime.datetime(2023, 7, 25, 15, 14, 36, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 1273856252, 'comment_body': ""I agree, let's get rid of it completely: f410d60ab0f60b60b58bca1c92dc0506c4bd611f"", 'comment_created': datetime.datetime(2023, 7, 25, 17, 11, 14, tzinfo=datetime.timezone.utc), 'commenter': 'kellnerd', 'type': 'User'}, {'comment_id': 1273858290, 'comment_body': ""Probably not, at this point we only know that the consumer failed but not how. Usually the reason has already been logged by the consumer callback at this point.\r\nWe could additionally log them here to be sure we won't miss any discarded message, but honestly the code is already cluttered with too many logger statements for my taste. Most errors are currently logged twice at least, although I had already removed code which first logged an error and then threw it.."", 'comment_created': datetime.datetime(2023, 7, 25, 17, 13, 19, tzinfo=datetime.timezone.utc), 'commenter': 'kellnerd', 'type': 'User'}, {'comment_id': 1273862519, 'comment_body': ""That's actually a good idea, I've even setup the ports for that, but I've always been using the minimal image so far."", 'comment_created': datetime.datetime(2023, 7, 25, 17, 17, 24, tzinfo=datetime.timezone.utc), 'commenter': 'kellnerd', 'type': 'User'}]","[{'commit_sha': '88326cf352d19c69e3ca5d9e07280329de5c4512', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22103c2161154a5156892d8f1c8ac2e21043fe05', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '111681c6a8a960a2e8184a2caa2f7948bb50c72e', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dac2eb048a8c71a56fe1beab3b6957bbbda43e6c', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a6309c3c982ce84178bab93889b32f85b44958b', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a3a61f52bc3d020279be66ef9cd40e94cf2e347', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0bd4933cce8ee3d6593458202e44098e5c05f6ba', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a2897df6f9fd83be1c8ba150e38512eec5ed47e', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'edada0eb7c60852af5211b6195c4d94491f0d5b2', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aba59db789349a5dbc903f03872bd0dfe5a46358', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a738104147b61f0dbf00a8407357233e0081f79', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '27a615613ac6e56f67ce8a8a8548d32c95e55d23', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a8128d41c177bb1a864f6bad4e3c4dcbb5828fcf', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '111529cd84f3ce40adc813e2b6db51dd0c4957d0', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9729131b2f270ca258bdbc447ed6f5aeb1afffeb', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '703f3cee998403008beeffc372c1400333494c2e', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc5c033b90202cc7f11dc783aa6c69eacb903d59', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb158e25d45bfbd0eafb7358cb66fa84698a7ab2', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '409729f0119420d3fab53d79d5915f14711b0db0', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08f1207377e3300d303c42cd7c5c06bd1d2add08', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f87de1e2faa071be5d9e6c1584fd908ef6da30c', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a3824f6f439b53e1a77779c7445ef274bb09db0', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc20b6c7e7bf7551e878844bafb6e3bbc46213b7', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '43ab45ba6645d2f2fd8a603de51b1d2f72939809', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a4d3636f105637a4a626dfd4ac7a524a37bc45c', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b50b08c21ae96db3aadd50839acba296136a3a0', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c369bfaa57b0128c47aafb8f600ce21b0ead351', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99b67d3242ead17e2877ce2ea56c4dd110dc9245', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e2d25efb0ff519c36bc57df493b867f49f008333', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c17245f0a933e1ed7c6dc3ff5528017dc13add49', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af2a0c24f705b8358cd80909f9b6671d0ce6304c', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2e908e4ec63f9351c4b1f52c5594da6cfc62814a', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6286d5b1f0bcd72f935cb92c187f170947142b3a', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c87fc43789d79f9ee5a3d73cbb7a2ee9b650866c', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20c8de0c877d40d9ddc67bc80052609ef32f16ff', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b812b8814f18f236c11012dafdec49594d623c9', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f8257df762f2ad291445cb5e3e909b5a9ea491a5', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '932378ab661d1ecb3a740d4c8d057665fee17ac6', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '856da9666ee99abcf8202bbec203a762450eff36', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dcd248a7ad81a4e4c3c6846289fe94de511aabce', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d3beea3a0c4ea44d9b5f56112097c8c88b45702', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97aac6c3004db2f826734b0ba315bfe774414db1', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd6916b6955a84aa1c9e95d2da2bba21a37274eab', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b7340301df18e07182e42098709d3c37a8f8deb', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e61f2903fecedec0334fd8a3c915889317ab7b8', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '541918a63ced988974e52a1e4beb7af3f1a15d73', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6309819e5063d37cc91271ba8eda19e879d64b3a', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd30224acf391cd08bd93b8af3ab60842dff08d7', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc243b0fbf59bafbb58473de477c882f9a603ee5', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e94630b64b7b245d5fe532ea2402b879522f4ac1', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c82ec690b92cb7abbae0d95b24c3315cd83d7913', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e22c2e71b2a8ccc462bf3b009b52e9d4663ada0c', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e80c05e0a3e059f277af76bd6424105b0a275616', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10ac20abbf54e980f70384d499fc7f86cbb3f1ae', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f5fd62778112ce6febdfe0b052a81df3e355e28', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '140a1cfbd221253ae908b5df16a783c48fce9cde', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e8ffcc5d56c16c1d1c414e90f6c46de6b3c95049', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22836b50267ada76871b6ade6a85fa2a9733792e', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2088c1925cd56eca546cad52c7826532a5e54ff4', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bdf813fbe3239de813288009c0510360c13ce7a5', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3225667327dd30a64fafd80fd4a8d816cd5b424', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af8d7be923b078ecb8bf63ea836eaccd7691c749', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f859f8e1d7dfcc4a78c360c3930b31379fe8fac7', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '81a07ce57ee050770ddce8294592a82d64689fe4', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef691cd92b97283727930c7c9f1f1ba48b49c308', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '694a28b431e332a186f5d2639de5c6865ceea392', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f410d60ab0f60b60b58bca1c92dc0506c4bd611f', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02c233e5f78b984a66663e8e14921bf18bdb61bc', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '29180325389a3b107236a900c7bc56f8f8f6fa24', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d7e500af6a1afca9502eb10eb3219e8562a6637', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0f732c3bd4c311c0210b8b2ddc0a358e0058e9d', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c12f81ebc414fbfce820479b9fdcc4ba34607bcd', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}]",David Kellner,52860029,,User,,33,,7,17
1506182337,TypeScript migration,"### Problem

Our ORM and its utility functions are still mostly plain JavaScript which makes it hard to use its deeply nested methods without having the definitions open side by side with the current code.

I had already started to sprinkle in a few minimal type definitions in #304 but going forward we realized that there are too many variations of how a model's data can look like (missing and additional properties for different usage scenarios) and that my initial naming schema was not sufficient to cover these.

### Solution

- Update our own fork of bookshelf to also ship type definitions (which had to be adapted as well) and use it
- Introduce separate types for lazy-loaded properties and use consistent names for inserted and fetched models (breaking change, but for types only)
- Migrate all remaining JS files to TS and add types where possible: Utility functions have a pretty good type coverage while the way the Bookshelf models are defined makes it hard/impossible to add many types
- Move types for parsed entities over from the importer project and adapt them to the new naming conventions
- Standardize and deduplicate types which were already defined for ORM utility functions
- Fix errors in the existing code which were revealed by the new typings

The changes also include a few TODO items where our code should potentially be refactored to avoid confusing types and/or wrong usage in the future.
(Of course eslint is complaining about these...)

### Pending Tasks

- [x] Check that the remaining type errors have no actual influence and try to resolve them (b699ab0cc9f3afaab0059fc730e77afff85c7843 was one case where an alternative Bookshelf usage pattern helped)
- [x] Update code in bb-site which uses types that are still following the old naming convention (should be limited to https://github.com/metabrainz/bookbrainz-site/pull/943)
- [ ] Finally we can start to make use of the new exports (e.g. 3134f419504bf7817ec1d1b5cb12f529bd403fe2) in bb-site
",True,309,https://api.github.com/repos/metabrainz/bookbrainz-data-js/pulls/309,https://github.com/metabrainz/bookbrainz-data-js/pull/309,closed,794,353,114,32,6,18,0,0,[],2023-09-07 12:04:38+00:00,2023-10-18 13:36:43+00:00,3547925.0,"41 days, 1:32:05","[{'comment_id': 1318536727, 'comment_body': ""I know that `as any` is a hack, but I wasn't confident enough that the passed parameters are really always numeric. So I haven't simply removed `parseInt`.\r\nOn the other hand, declaring the function parameters as `number | string` also didn't feel right. While JS does automatically cast strings to numbers as necessary below, that would lead to further type errors..."", 'comment_created': datetime.datetime(2023, 9, 7, 12, 32, 15, tzinfo=datetime.timezone.utc), 'commenter': 'kellnerd', 'type': 'User'}, {'comment_id': 1322901725, 'comment_body': ""Is there a reason for the two different styles of imports here?\r\nAs far as I can tell [from the docs](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-4-5.html#type-modifiers-on-import-names) they should result in the same code once transpiled (i.e. the types are removed from transpiled output) so I don't think it's exceedingly important, but I've only seen the `import {type ` format when mixing type imports and regular imports from the same module/file.\r\n\r\n```suggestion\r\nimport type {EntitySetMetadataT} from './entity';\r\nimport type {ORM} from '..';\r\n```"", 'comment_created': datetime.datetime(2023, 9, 12, 11, 31, 13, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 1323017327, 'comment_body': 'Yeah, that would have been problematic…', 'comment_created': datetime.datetime(2023, 9, 12, 13, 7, 59, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 1323044319, 'comment_body': ""By better name, do you mean something that encapsulates that the Alias might or might not exist in the DB yet?\r\n\r\nMaybe something along the lines of `NewOrExistingAliasT` ?\r\nNot a great name, but at least it's a bit clearer than `Form`."", 'comment_created': datetime.datetime(2023, 9, 12, 13, 26, 55, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 1323065339, 'comment_body': '> Investigate whether these are also useful elsewhere, e.g. for form validation\r\n\r\nI would say most likely. For example for import userscripts one day:\r\nhttps://github.com/tr1ten/bookbrainz-userscripts/blob/amazon-import/src/amazon-import.user.js\r\n', 'comment_created': datetime.datetime(2023, 9, 12, 13, 41, 41, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 1323095213, 'comment_body': 'Alternatively, we could use the `toNumber` and `isFinite` utilities from lodash like so:\r\n```suggestion\r\nexport function formatDate(year: number, month?: number, day?: number): string {\r\n\tif(!_.isFinite(_.toNumber(year))) {\r\n```\r\n\r\nThat would also simplify the condition a bit too, considering it looks like checking that the value is not `0` is to prevent JS casting issue for `!year`) .\r\n\r\n\r\n\r\nThe same applies for month and day below in the file', 'comment_created': datetime.datetime(2023, 9, 12, 14, 2, 9, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 1323163278, 'comment_body': ""I suppose this should probably represent the union type `number | null` as we do in typescript. It's a bit moot considering we have typescript types defined, but…\r\n\r\nI'm not 100% sure of the syntax, but I think this should work:\r\n```suggestion\r\n * @returns {Array<(number | null)>}} - Year, month, and day of month respectively.\r\n```"", 'comment_created': datetime.datetime(2023, 9, 12, 14, 48, 54, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 1323177190, 'comment_body': ""I know this is a copy of the types initially added to bookbrainz-utils specifically for OpenLibrary imports, but would it make sense to add some of the expected properties for an Author?\r\nI see the issues with using this type in `getAdditionalEntityProps` (i.e. `entityData as ParsedAuthor`) for example  is that it would be missing areas (`beginAreaId`, `endAreaId`), `ended` ,`genderId` and `typeId`.\r\n\r\nSimilarly the hardcoded `type` string  'Person' is confusing without the context of OL-specific imports.\r\n\r\nNot sure if it would make more sense to refine these types now, or if you prefer adding a TODO."", 'comment_created': datetime.datetime(2023, 9, 12, 14, 58, 29, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 1323248944, 'comment_body': ""Not really a good reason. I think my idea was that I'm importing the only type export from a module which otherwise only exports code. But that doesn't really make sense as we can easily change the import syntax if we were to also import code from this module in the future.\r\nApplied as ee7e0625c37dd34789ec5a51a60deee4c009209c.\r\n(Second attempt to submit this comment, my initial comment got lost when I applied the suggestion... bad UX.)"", 'comment_created': datetime.datetime(2023, 9, 12, 15, 50, 27, tzinfo=datetime.timezone.utc), 'commenter': 'kellnerd', 'type': 'User'}, {'comment_id': 1323434500, 'comment_body': ""I will definitely try to resolve this issue in this PR, I just haven't found the time for it yet.\r\nThe types here are still very much work in progress and only have the properties which were needed for the types which I have added in other places so far and/or the values which I've found in the code (regarding the 'Person' literal).\r\nI suspect these Parsed$Entity types will be very similar to their ORM counterparts in the end."", 'comment_created': datetime.datetime(2023, 9, 12, 18, 50, 36, tzinfo=datetime.timezone.utc), 'commenter': 'kellnerd', 'type': 'User'}, {'comment_id': 1323482700, 'comment_body': ""Sounds good to me, definitely better than the crude `AliasMaybeWithId` idea which I had at some point. I don't mind expressive type names, that will make it simpler to spot types which can be improved (e.g. combined with another type or simplified) later on.\r\nDone in f9b5d4f965840aff14de31ab3731bca9b726fab1."", 'comment_created': datetime.datetime(2023, 9, 12, 19, 43, 38, tzinfo=datetime.timezone.utc), 'commenter': 'kellnerd', 'type': 'User'}, {'comment_id': 1323483411, 'comment_body': ""Yeah, that's an oversight on my part, I've updated the TS return type but forgot to update the JSDoc type. Fixed as part of 5a519ec9e7e166e97833e9ed987c646da5b73139.\r\n\r\nThese redundant JSDoc types are annoying me since my first PRs already, I wonder whether they are really required/useful for the JSDoc documentation which we are generating or whether we can get rid of them (and find a way to get ESLint to still accept these as valid JSDoc comments)."", 'comment_created': datetime.datetime(2023, 9, 12, 19, 44, 33, tzinfo=datetime.timezone.utc), 'commenter': 'kellnerd', 'type': 'User'}, {'comment_id': 1323487890, 'comment_body': ""We can't get away with dropping `!year` and the like as they also catch `null` and `undefined` values (confirmed 14 failing tests when I tried that). So I've only used `_.toNumber` in 5a519ec9e7e166e97833e9ed987c646da5b73139 to avoid using `as any`."", 'comment_created': datetime.datetime(2023, 9, 12, 19, 49, 1, tzinfo=datetime.timezone.utc), 'commenter': 'kellnerd', 'type': 'User'}, {'comment_id': 1334268823, 'comment_body': ""That is very unfortunate indeed.\r\nI had not realized there would be a collision when reviewing the Series project\r\n\r\nEdit: Actually it might not be too bad, I think it's only used in very few places to mean the Series' items type:\r\nhttp://livegrep.metabrainz.org/search/livegrep?q=entityType&fold_case=false&regex=false&context=true&repo%5B%5D=metabrainz%2Fbookbrainz-data-js&repo%5B%5D=metabrainz%2Fbookbrainz-dev-docs&repo%5B%5D=metabrainz%2Fbookbrainz-site&repo%5B%5D=metabrainz%2Fbookbrainz-user-guide&repo%5B%5D=metabrainz%2Fbookbrainz-utils\r\n\r\nHere's the only clear one I was able to find after a cursory search: https://github.com/metabrainz/bookbrainz-data-js/blob/c29fa5a3/src/func/entity.ts#L81"", 'comment_created': datetime.datetime(2023, 9, 22, 11, 40, 48, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 1334281092, 'comment_body': 'After the SoC project is finished, it might make sense to rename that column in the database (for example `series_entity_type`) and similarly for the `user_collection` table (`collection_entity_type`) and review these types.\r\nWhat do you think?', 'comment_created': datetime.datetime(2023, 9, 22, 11, 54, 7, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 1334333687, 'comment_body': 'Yeah, that would definitely be better in the long term.\r\n\r\nSo for now you would suggest to get rid of the `entityType` property for all parsed entity models other than `ParsedSeries` as I had planned to do?\r\nIt\'s probably the simplest solution for now as there are no occurrences of these types outside of the importer project.\r\nDoing so has one minor disadvantage though, I can no longer do the following simplification (compared to dfc71e4ff6b154fc0a51e443c3738af4ee8b94fd):\r\n```ts\r\nexport function getAdditionalEntityProps(\r\n\tentityData: ParsedEntity\r\n) {\r\n\tswitch (entityData.entityType) {\r\n\t\tcase \'Author\': {\r\n\t\t\tconst {typeId, genderId, beginAreaId, beginDate, endDate,\r\n\t\t\t\tended, endAreaId} = entityData; // ""as ParsedAuthor"" no longer necessary\r\n```', 'comment_created': datetime.datetime(2023, 9, 22, 12, 46, 20, tzinfo=datetime.timezone.utc), 'commenter': 'kellnerd', 'type': 'User'}, {'comment_id': 1360886566, 'comment_body': ""I've worked around the issue of the conflicting use of the `entityType` property by dropping it from `ParsedEntity` and instead passing around the whole `QueuedEntity` instances (which have an unambiguous  `entityType` property and also contain `data: ParsedEntity`) where necessary (1e155abdc91446b02abd0638f19d09d68689b5f9).\r\n\r\nLater when we have better names for the database columns (of series and collections), we could consider reintroducing the `ParsedEntity.entityType` property to simplify the code again and make it easier to understand."", 'comment_created': datetime.datetime(2023, 10, 16, 15, 47, 58, tzinfo=datetime.timezone.utc), 'commenter': 'kellnerd', 'type': 'User'}, {'comment_id': 1360887041, 'comment_body': 'Now dropped, see my other comment.', 'comment_created': datetime.datetime(2023, 10, 16, 15, 48, 20, tzinfo=datetime.timezone.utc), 'commenter': 'kellnerd', 'type': 'User'}]","[{'commit_sha': '7679731a9e1c3ca7d97b6b750a92bca36dc449d2', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9381eeef0e70d80232776eb027d1e4df5e85e7b1', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '98129913e72a1d187f978cb4ee61d0be3d6f6e17', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '242916dd18586b04182b0f795685f4406f75e87d', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d4298024b87c0f1f5888667827727156a5cea5e', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc35dcb8a5b6751608689849e6e7f61c5aa0b575', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b9235ac0c26973712ec5374b8c5ec2c197d8a7e', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3134f419504bf7817ec1d1b5cb12f529bd403fe2', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fdcf3335d6bc4bebad6244fec10d4084e30dbabc', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a2307f578486d6f44245e7861485833e12718ce4', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a93bc48a15d8aa77b3b3ff834c1be9b4cde45971', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df6ddcb9989202ff190349405d56d06848a2c1a5', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53805a0f4487114ccbb425f11d2da5c78e719d78', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '959cc8e5b4eea4bc39d2876eee4c1cc77c6a6f86', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '289a68efaef4823b3d6b74bf2dbd122345dfe26c', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa539c290456a0d85bd5cd937cd95440e0fb2db9', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2f861f8e3077f8627a7b76c5b9747738ce927035', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '436984dee2219444c7315679e948ecdaa8e85350', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a335e302fbc41b9d4413c71aa445a50cd1d3f3dc', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a553d13feab7199992bd20c69a1c8ba6af0610b6', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3c529f9deb0d2d92b501a81af5b56427e478488', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0335676df64b6f6312a2394679debf804c4fb14d', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b699ab0cc9f3afaab0059fc730e77afff85c7843', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee7e0625c37dd34789ec5a51a60deee4c009209c', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9b5d4f965840aff14de31ab3731bca9b726fab1', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a519ec9e7e166e97833e9ed987c646da5b73139', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10f9b55806c65c66f55061400fe2427937b63502', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7843a11389cda5aa3ae9f647738bfc9721979621', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dfc71e4ff6b154fc0a51e443c3738af4ee8b94fd', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e155abdc91446b02abd0638f19d09d68689b5f9', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cdf0dcc843fa9f8272f0402cd693d780a6afd981', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0c965860237355b51fc038b0482f3238da04c93', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}]",David Kellner,52860029,,User,,33,,7,17
1558989589,TypeScript migration of the ORM,"In https://github.com/metabrainz/bookbrainz-data-js/pull/309 a few types have been renamed to be more consistent, this PR does the necessary changes for types which have already been used by the server.

~TODO: Bump version of bb-data once a new release of it is available on npm.~",True,1027,https://api.github.com/repos/metabrainz/bookbrainz-site/pulls/1027,https://github.com/metabrainz/bookbrainz-site/pull/1027,closed,17,16,6,3,1,0,0,0,[],2023-10-16 16:28:01+00:00,2023-10-23 16:11:10+00:00,603789.0,"6 days, 23:43:09",[],"[{'commit_sha': 'aa029d8b0c34dd28d623697bb8c98911a0c1946a', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '41b4658a1d814b7f4490c26cb6a0e57d41566340', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb6c4038cf69c45df56495e8d0f9c8e2a69b20d3', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}]",David Kellner,52860029,,User,,33,,7,17
1510662824,Importer project cleanup,"Continuation of #40, depends on https://github.com/metabrainz/bookbrainz-data-js/pull/309

Most commits are only deleting unused stuff, so this one should be easy to review.
Additionally I've fixed a rare bug in ca8f7515c79d205bbc47aac65f33ef8f2627e1ce, improved a few types and resolved a few linter errors. (Now that the outdated legacy code is gone, the eslint output finally became clearer as it contained less irrelevant messages.)

- [ ] Drop useless [error wrappers](https://github.com/kellnerd/bookbrainz-utils/blob/11962796822a3dbdc605c7acd70834a9a2cec6b0/importer/src/helpers/errors.ts) (WIP)
- [x] Delete old [OL producer CLI](https://github.com/kellnerd/bookbrainz-utils/blob/11962796822a3dbdc605c7acd70834a9a2cec6b0/importer/src/openLibrary/producer/index.js) (replaced by [new producer CLI](https://github.com/kellnerd/bookbrainz-utils/blob/11962796822a3dbdc605c7acd70834a9a2cec6b0/importer/src/openLibrary/import.ts))
- [x] Delete old [exploration tool](https://github.com/kellnerd/bookbrainz-utils/blob/11962796822a3dbdc605c7acd70834a9a2cec6b0/importer/src/openLibrary/exploration) (used to collect statistics about available JSON attributes in OL dumps) and its [old queue dependency](https://github.com/kellnerd/bookbrainz-utils/blob/11962796822a3dbdc605c7acd70834a9a2cec6b0/importer/src/queue/index.ts)
- [x] Delete [`asyncCluster`](https://github.com/kellnerd/bookbrainz-utils/blob/11962796822a3dbdc605c7acd70834a9a2cec6b0/importer/src/asyncCluster) (currently no replacement) and uninstall `async` npm package
- [x] Move [general parser types](https://github.com/kellnerd/bookbrainz-utils/blob/11962796822a3dbdc605c7acd70834a9a2cec6b0/importer/src/parser.ts) into ~a subfolder~ bb-data (15abafc99d283683f8b156351a003cb8cf4257e7 depends on https://github.com/metabrainz/bookbrainz-data-js/pull/309, could be dropped from this PR if necessary)
- [ ] Move [queue module](https://github.com/kellnerd/bookbrainz-utils/blob/11962796822a3dbdc605c7acd70834a9a2cec6b0/importer/src/queue.ts) into a subfolder (when the old queue is gone)
- [ ] Improve folder structure, e.g. flatten producer directory
- [ ] Convert [identifier mapping](https://github.com/kellnerd/bookbrainz-utils/blob/11962796822a3dbdc605c7acd70834a9a2cec6b0/importer/src/helpers/mapping.ts) into an enum?
- [x] Update or delete obsolete [README for the config file](https://github.com/kellnerd/bookbrainz-utils/blob/11962796822a3dbdc605c7acd70834a9a2cec6b0/importer/config/README.md) once the implementation is stable?
- [x] Update or delete obsolete [package.json scripts](https://github.com/kellnerd/bookbrainz-utils/blob/11962796822a3dbdc605c7acd70834a9a2cec6b0/importer/package.json) once the implementation is stable

As you can see above, I haven't moved any files yet as I'm still unsure what would be a good folder structure. Until we have found one, I would prefer not to move any files as this only makes it very hard to trace the git history of a file. https://github.com/metabrainz/bookbrainz-utils/commit/896560496d968cd9dbf6dd640cac5b60fdefdd99 is still annoying me from time to time in this regard. (I wonder why it was decided to have two unrelated project in one repository, that has tripped me a few times already when I accidentally ran npm or yarn inside the root directory...)",True,41,https://api.github.com/repos/metabrainz/bookbrainz-utils/pulls/41,https://github.com/metabrainz/bookbrainz-utils/pull/41,closed,92,1235,22,15,6,0,0,0,[],2023-09-11 16:34:20+00:00,2023-10-19 17:00:10+00:00,3284750.0,"38 days, 0:25:50",[],"[{'commit_sha': 'f4be6bf4850209008bd495b41292163b6faaeb9c', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca8f7515c79d205bbc47aac65f33ef8f2627e1ce', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15abafc99d283683f8b156351a003cb8cf4257e7', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '320e27d0cfc1276961e3c34f27dc109382ed699b', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee47aa974a13b2c44d675486f30410b103be278b', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d761fd67042f0afdd41acc1283d03d0e032f600', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf7ab53d1f7ab4455e617f28ad921187c610a862', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f118cce2ca0d1c42f3d768289fff4e8a1d7eeb90', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '81b3a33b556b3e74dba1b3ccdd1f04b54d2932ef', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '725db0e588052ab54d6ca5c97b4f8c50b656c2ae', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bcf47cdf83824c8ba17647d706cf8be629924e9b', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb3dc0a3d48a4b53ae7b2e74dd14d03fb17339e8', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce6ebcc1e97ca379876ddfd3464d91cafa5ff3e4', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '52212dea6a06cb52262df30e232c92ece8ac4070', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e6da505f3adb9f3b0872e2bdcd77061f2db4cd2e', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}]",David Kellner,52860029,,User,,33,,7,17
1586762398,Final touches to make the import of OpenLibrary authors work,"This is supposed to be the final BBIQ improvement PR during Summer of Code.
It fixes the last remaining bugs which prevented the successful import of OpenLibrary authors, improves logging output and also brings a few other improvements.

### Logging
- Logging with winston has finally been fixed by removing an (unused) invalid logging level from its config (https://github.com/metabrainz/bookbrainz-utils/commit/a5182da14c8f2f1c835cee72130d74c9dd8f6999) and has now replaced the `console` drop-in replacement again
- Log levels are highlighted by colours now, already making the output much more readable
- More appropriate log levels have been assigned (import failures should always be logged as errors, not warnings -- more debug, less info messages)
- Messages have been deduplicated and shortened to make the logs less redundant
- Log error stack traces for critical/unexpected errors (it was way to hard to debug the code without these)
- Log messages related to processed entities contain a consistent string representation (default alias, entity type and external ID) (https://github.com/metabrainz/bookbrainz-utils/commit/01ef7afaadb7aa350fed0649b4739bde85e281cb)

When we're done with this, we could raise the minimum log level which is visible by default from `debug` to `info` and add log files as additional logging sinks.

### Consumer
- Correctly convert parsed entities into validation data, previously the validators made imports fail although the data was absolutely fine (https://github.com/metabrainz/bookbrainz-utils/commit/67f2847af69b385c3247ee15f131ca5b90a21dec)
- Use a failure queue by default (https://github.com/metabrainz/bookbrainz-utils/commit/3eb062ed23b967b9385ec0966b6665852f348724) rather than dropping failed messages by default
- Stop trying to repeat failed imports immediately (https://github.com/metabrainz/bookbrainz-utils/commit/bf42d5be7a766713454dffcb3c1d0f521b24da9f)
- Full refactoring of the consumer function which was very unintuitively spread across two modules (https://github.com/metabrainz/bookbrainz-utils/commit/be2c6c0e6e679cb8d101764dd7db4f952fc21bab)
- Expose CLI option to update pending imports (516ed51d4db3948208252a5564eadfbc2be77a4a) and log status of the processed queued entities (b70eca92204050d35efec16b9377943cc078c42f)

### OpenLibrary
- Remove two overseen `entityType` properties from a type declaration where they should not exist (https://github.com/metabrainz/bookbrainz-utils/commit/508e0ad90673246a965d96b25efaad808411c943) and use another way to find out the BB entity type (https://github.com/metabrainz/bookbrainz-utils/commit/09329e4618ff29c518f5e5ae4ea3e4ec8d308518)
- Use [lande](https://github.com/fabiospampinato/lande) for language detection, fallback to [Multiple languages] instead of English for low confidence guesses (https://github.com/metabrainz/bookbrainz-utils/commit/61095cb1ded4c6e6e4326259e4704cf2ceb95660) (The language mapping still needs some work, a missing mapping also leads to [Multiple languages] currently.)

Currently only the import process for Author entities has been tested, as the corresponding OpenLibrary parser is the completest. Whether Work entities work as well will be tested over the weekend, as that parser looks almost usable while the parser for entities is a no-op currently... Depending on how much time I have, I will either try to implement a first mapping or will explicitly mark 'edition' as unsupported.",True,42,https://api.github.com/repos/metabrainz/bookbrainz-utils/pulls/42,https://github.com/metabrainz/bookbrainz-utils/pull/42,closed,799,3048,20,34,0,0,0,0,[],2023-11-03 22:04:15+00:00,2024-06-13 15:56:21+00:00,19245126.0,"222 days, 17:52:06",[],"[{'commit_sha': '3eb062ed23b967b9385ec0966b6665852f348724', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67bb7260cafcb18ae309b698366784d594313850', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99b25f951ec2c7c1f10ae2004770086fe4897a81', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5182da14c8f2f1c835cee72130d74c9dd8f6999', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a2f067ffe96f8785e9a3fb366dc59fb46fd9dbd2', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49d76be65e6031ffb4372cd07b80914ac02939a5', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67f2847af69b385c3247ee15f131ca5b90a21dec', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '508e0ad90673246a965d96b25efaad808411c943', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83449a584f4f17411c1b0cb116ce4e231be93bba', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09329e4618ff29c518f5e5ae4ea3e4ec8d308518', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2e8fd8af23769b1c9cbba587e0f105d91b0bb39b', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '955c8c0542839d07fb4e50422575028e9ffe2e9a', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8dcf95da62b79a2d49f83b90784712b5fc9e6723', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e093c225159066803b7aee9ec5fa58d8a8462305', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '98b033bfffdc2f8d2c9992ffea1376c6e682e298', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '010fab1d98d1d3df8dd1a8ecc9515f67f461e550', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae20c22e9286293f4ba0bd85b54d9d40cc247c1b', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '01ef7afaadb7aa350fed0649b4739bde85e281cb', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '310be337c598946e11f45f195062f08fb01c9139', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b06ae2913adbeeb12c24838b88257a764ccf9b00', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39d9ccbe683592f6e9278e7a43c77d756bbb774a', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f72ad36c1dbdbf9c4c08135f10ee9ac3b6c90b4', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf42d5be7a766713454dffcb3c1d0f521b24da9f', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '55a22b9d048b01fbb112aae1e384cc07f7f27b99', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fcc3dadef5716ddbd2d16c353d14e7e5c1e4732f', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be2c6c0e6e679cb8d101764dd7db4f952fc21bab', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '78e26bc3a7286c10331e57b1875688e22edaff7d', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dfde417d2ef70258128ee6914182770e7a504593', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61095cb1ded4c6e6e4326259e4704cf2ceb95660', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '035fcc0968ba102dbb69f597ec39e3e16d554d39', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b70eca92204050d35efec16b9377943cc078c42f', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '33fa37486f0f84fc936f8b701a193952303a5b15', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '516ed51d4db3948208252a5564eadfbc2be77a4a', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '335102d8660738fd06c1b83e1dea4f84cbb98c17', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}]",David Kellner,52860029,,User,,33,,7,17
1587610988,Repeatable imports,"Existing imports can now be updated if they are still pending. The implementation currently only overwrites the import header to link to the freshly created entity data and leaves all the old entity data behind orphaned. (Still to be improved...)

I've also made the options parameter more flexible to already include support for creating updates for accepted entities as well (which might be added in a future version.) In addition to the import ID, the `createImport` function now also returns its status (which is used by the consumer).

Also contains a few more fixes for type errors (in currently unused code) which I somehow had not seen so far.
",True,314,https://api.github.com/repos/metabrainz/bookbrainz-data-js/pulls/314,https://github.com/metabrainz/bookbrainz-data-js/pull/314,closed,162,95,6,15,0,4,0,0,[],2023-11-05 23:24:29+00:00,2023-11-08 12:37:02+00:00,220353.0,"2 days, 13:12:33","[{'comment_id': 1385378938, 'comment_body': ""Should this be 'updated accepted' ?"", 'comment_created': datetime.datetime(2023, 11, 7, 18, 27, 37, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 1385545681, 'comment_body': ""Yeah it will be, as soon as I've addressed the TODO comment and actually implemented updating for accepted entities. Until then I'm telling the user the truth that I've simply skipped the entity (because accepted entities are not supported yet).\r\nBut you're right, this looks a bit confusing... maybe it makes more sense if I temporarily comment out `'update pending and accepted'` from the `ExistingImportAction` type?"", 'comment_created': datetime.datetime(2023, 11, 7, 20, 47, 4, tzinfo=datetime.timezone.utc), 'commenter': 'kellnerd', 'type': 'User'}, {'comment_id': 1385565612, 'comment_body': ""In addition to the above: Actually I've just realized that I forgot to add a condition `if (existingImportAction === 'update pending')` here to separately handle the case where we only want to create updates for pending entities, but not for accepted entities :see_no_evil:\r\nWill address that tomorrow..."", 'comment_created': datetime.datetime(2023, 11, 7, 20, 52, 35, tzinfo=datetime.timezone.utc), 'commenter': 'kellnerd', 'type': 'User'}, {'comment_id': 1386487129, 'comment_body': 'd1e048d76eb4e22da85456eefc8bc2a9abf23725 should make it clearer', 'comment_created': datetime.datetime(2023, 11, 8, 11, 41, 15, tzinfo=datetime.timezone.utc), 'commenter': 'kellnerd', 'type': 'User'}]","[{'commit_sha': '1a498787b9769dca9a371dcfaa1c61911f6e3351', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03c746cf456c1fbc7e412e676a0baf3b497ef5d5', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e9d07d9ba1107d29f1a858757e9984b65d0c2b1', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef16b9a4fd48ce9af32bebb03be9324f6b7adca2', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aee64235559e11dabad90d3ec64a48edc7dec379', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16766ff97f5a2420c22dfcd16bf53cb2fa320b92', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8a40afaf0e05a78530349b746aad4ea56363e68', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '819873a7a8a0ed29d394c723c036dbb6339dc321', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'efc8302967768a422b9535a7f99b12f571e14c91', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a037a98d9c6966c8fb2c7acba9a3cf566fcc277', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f4278677ca3660989412583a4a9dcd089dada3b6', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14607fd01dfd1af633d7de55dc52df6ef1c15dc1', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '823610667ae0cf4b9ad563628dcc6148a967d353', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d9a79480a4d73f25819055bd48dea7db0b78a75', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd1e048d76eb4e22da85456eefc8bc2a9abf23725', 'committer_username': 'kellnerd', 'committer_name': 'David Kellner', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 13, 14, 34, 34, tzinfo=datetime.timezone.utc)}]",David Kellner,52860029,,User,,33,,7,17

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
134190098,bookbrainz-utils,metabrainz/bookbrainz-utils,TypeScript,3,2,12,5,304,1,1,0,"[{'id': 1981757880, 'number': 50, 'closed': datetime.datetime(2024, 8, 6, 11, 49, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 7, 22, 17, 56, 39, tzinfo=datetime.timezone.utc), 'time_taken': 1273945.0, 'time_delta': '14 days, 17:52:25', 'additions': 460, 'deletions': 7, 'state': 'closed'}, {'id': 1969640031, 'number': 49, 'closed': datetime.datetime(2024, 7, 17, 13, 38, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 7, 15, 15, 6, 49, tzinfo=datetime.timezone.utc), 'time_taken': 167487.0, 'time_delta': '1 day, 22:31:27', 'additions': 20, 'deletions': 11, 'state': 'closed'}, {'id': 1939770395, 'number': 46, 'closed': datetime.datetime(2024, 7, 8, 10, 14, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 6, 26, 11, 13, 45, tzinfo=datetime.timezone.utc), 'time_taken': 1033230.0, 'time_delta': '11 days, 23:00:30', 'additions': 93, 'deletions': 1307, 'state': 'closed'}, {'id': 1586762398, 'number': 42, 'closed': datetime.datetime(2024, 6, 13, 15, 56, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 11, 3, 22, 4, 15, tzinfo=datetime.timezone.utc), 'time_taken': 19245126.0, 'time_delta': '222 days, 17:52:06', 'additions': 799, 'deletions': 3048, 'state': 'closed'}, {'id': 1510662824, 'number': 41, 'closed': datetime.datetime(2023, 10, 19, 17, 0, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 9, 11, 16, 34, 20, tzinfo=datetime.timezone.utc), 'time_taken': 3284750.0, 'time_delta': '38 days, 0:25:50', 'additions': 92, 'deletions': 1235, 'state': 'closed'}, {'id': 1442629633, 'number': 40, 'closed': datetime.datetime(2023, 8, 2, 10, 2, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 20, 11, 0, 58, tzinfo=datetime.timezone.utc), 'time_taken': 1119698.0, 'time_delta': '12 days, 23:01:38', 'additions': 16272, 'deletions': 8737, 'state': 'closed'}]"
42076955,bookbrainz-data-js,metabrainz/bookbrainz-data-js,JavaScript,20,9,12,18,1086,0,6,0,"[{'id': 1974588020, 'number': 321, 'closed': datetime.datetime(2024, 8, 6, 11, 3, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 7, 17, 21, 17, 46, tzinfo=datetime.timezone.utc), 'time_taken': 1691163.0, 'time_delta': '19 days, 13:46:03', 'additions': 53, 'deletions': 14, 'state': 'closed'}, {'id': 1973742399, 'number': 320, 'closed': datetime.datetime(2024, 7, 17, 16, 6, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 7, 17, 13, 36, 5, tzinfo=datetime.timezone.utc), 'time_taken': 9030.0, 'time_delta': '2:30:30', 'additions': 133, 'deletions': 12, 'state': 'closed'}, {'id': 1969804796, 'number': 319, 'closed': datetime.datetime(2024, 7, 17, 9, 18, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 7, 15, 16, 32, 18, tzinfo=datetime.timezone.utc), 'time_taken': 146783.0, 'time_delta': '1 day, 16:46:23', 'additions': 14, 'deletions': 7, 'state': 'closed'}, {'id': 1939725497, 'number': 316, 'closed': datetime.datetime(2024, 6, 26, 14, 2, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 6, 26, 10, 47, 54, tzinfo=datetime.timezone.utc), 'time_taken': 11701.0, 'time_delta': '3:15:01', 'additions': 3906, 'deletions': 1, 'state': 'closed'}, {'id': 1587610988, 'number': 314, 'closed': datetime.datetime(2023, 11, 8, 12, 37, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 11, 5, 23, 24, 29, tzinfo=datetime.timezone.utc), 'time_taken': 220353.0, 'time_delta': '2 days, 13:12:33', 'additions': 162, 'deletions': 95, 'state': 'closed'}, {'id': 1506182337, 'number': 309, 'closed': datetime.datetime(2023, 10, 18, 13, 36, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 9, 7, 12, 4, 38, tzinfo=datetime.timezone.utc), 'time_taken': 3547925.0, 'time_delta': '41 days, 1:32:05', 'additions': 794, 'deletions': 353, 'state': 'closed'}, {'id': 1286606822, 'number': 304, 'closed': datetime.datetime(2023, 4, 12, 10, 31, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 22, 23, 12, 6, tzinfo=datetime.timezone.utc), 'time_taken': 1768793.0, 'time_delta': '20 days, 11:19:53', 'additions': 177, 'deletions': 7, 'state': 'closed'}, {'id': 1279369576, 'number': 303, 'closed': datetime.datetime(2023, 4, 11, 16, 53, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 16, 21, 51, 40, tzinfo=datetime.timezone.utc), 'time_taken': 2228519.0, 'time_delta': '25 days, 19:01:59', 'additions': 59, 'deletions': 862, 'state': 'closed'}, {'id': 1270363348, 'number': 302, 'closed': datetime.datetime(2023, 3, 10, 11, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 9, 22, 4, 46, tzinfo=datetime.timezone.utc), 'time_taken': 48494.0, 'time_delta': '13:28:14', 'additions': 2, 'deletions': 2, 'state': 'closed'}]"
28521896,bookbrainz-site,metabrainz/bookbrainz-site,JavaScript,279,186,15,94,6138,20,21,20,"[{'id': 1986298944, 'number': 1109, 'closed': datetime.datetime(2024, 8, 6, 11, 7, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 7, 24, 21, 57, 58, tzinfo=datetime.timezone.utc), 'time_taken': 1084152.0, 'time_delta': '12 days, 13:09:12', 'additions': 258, 'deletions': 32, 'state': 'closed'}, {'id': 1974542582, 'number': 1107, 'closed': datetime.datetime(2024, 8, 6, 9, 27, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 7, 17, 20, 52, 59, tzinfo=datetime.timezone.utc), 'time_taken': 1686898.0, 'time_delta': '19 days, 12:34:58', 'additions': 36, 'deletions': 13, 'state': 'closed'}, {'id': 1969826243, 'number': 1103, 'closed': datetime.datetime(2024, 7, 17, 13, 37, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 7, 15, 16, 45, 54, tzinfo=datetime.timezone.utc), 'time_taken': 161484.0, 'time_delta': '1 day, 20:51:24', 'additions': 86, 'deletions': 83, 'state': 'closed'}, {'id': 1919420508, 'number': 1096, 'closed': datetime.datetime(2024, 6, 20, 14, 16, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 6, 13, 19, 50, 54, tzinfo=datetime.timezone.utc), 'time_taken': 584732.0, 'time_delta': '6 days, 18:25:32', 'additions': 2733, 'deletions': 76, 'state': 'closed'}, {'id': 1905019500, 'number': 1094, 'closed': datetime.datetime(2024, 6, 5, 13, 49, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 6, 5, 12, 30, 55, tzinfo=datetime.timezone.utc), 'time_taken': 4692.0, 'time_delta': '1:18:12', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 1558989589, 'number': 1027, 'closed': datetime.datetime(2023, 10, 23, 16, 11, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 10, 16, 16, 28, 1, tzinfo=datetime.timezone.utc), 'time_taken': 603789.0, 'time_delta': '6 days, 23:43:09', 'additions': 17, 'deletions': 16, 'state': 'closed'}, {'id': 1404002344, 'number': 997, 'closed': datetime.datetime(2023, 7, 4, 17, 21, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 22, 18, 47, 24, tzinfo=datetime.timezone.utc), 'time_taken': 1031651.0, 'time_delta': '11 days, 22:34:11', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 1361789893, 'number': 992, 'closed': datetime.datetime(2023, 5, 24, 9, 4, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 23, 17, 22, 53, tzinfo=datetime.timezone.utc), 'time_taken': 56471.0, 'time_delta': '15:41:11', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 1359789053, 'number': 990, 'closed': datetime.datetime(2023, 5, 23, 14, 25, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 22, 19, 5, 42, tzinfo=datetime.timezone.utc), 'time_taken': 69575.0, 'time_delta': '19:19:35', 'additions': 3, 'deletions': 5, 'state': 'closed'}, {'id': 1270420315, 'number': 951, 'closed': datetime.datetime(2023, 3, 10, 12, 27, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 9, 23, 10, 52, tzinfo=datetime.timezone.utc), 'time_taken': 47799.0, 'time_delta': '13:16:39', 'additions': 3, 'deletions': 2, 'state': 'closed'}, {'id': 1265194372, 'number': 947, 'closed': datetime.datetime(2023, 3, 10, 15, 57, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 6, 21, 24, 6, tzinfo=datetime.timezone.utc), 'time_taken': 326010.0, 'time_delta': '3 days, 18:33:30', 'additions': 28, 'deletions': 22, 'state': 'closed'}, {'id': 1265113827, 'number': 946, 'closed': datetime.datetime(2023, 3, 8, 11, 3, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 6, 20, 15, 1, tzinfo=datetime.timezone.utc), 'time_taken': 139727.0, 'time_delta': '1 day, 14:48:47', 'additions': 5, 'deletions': 14, 'state': 'closed'}, {'id': 1262622678, 'number': 945, 'closed': datetime.datetime(2023, 3, 8, 10, 56, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 3, 21, 8, 55, tzinfo=datetime.timezone.utc), 'time_taken': 395258.0, 'time_delta': '4 days, 13:47:38', 'additions': 4, 'deletions': 4, 'state': 'closed'}, {'id': 1261222941, 'number': 943, 'closed': datetime.datetime(2023, 4, 19, 11, 11, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 2, 23, 6, 49, tzinfo=datetime.timezone.utc), 'time_taken': 4104281.0, 'time_delta': '47 days, 12:04:41', 'additions': 732, 'deletions': 929, 'state': 'closed'}, {'id': 1255857174, 'number': 940, 'closed': datetime.datetime(2023, 3, 9, 16, 57, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 2, 27, 17, 25, 54, tzinfo=datetime.timezone.utc), 'time_taken': 862295.0, 'time_delta': '9 days, 23:31:35', 'additions': 14, 'deletions': 3, 'state': 'closed'}]"
