pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1455679543,Improve DWARF5 support and refactor (new history),"# DO NOT SQUASH ME!

**Your checklist for this pull request**
- [x] I've read the [guidelines for contributing](https://github.com/rizinorg/rizin/blob/master/DEVELOPERS.md) to this repository
- [x] I made sure to follow the project's [coding style](https://github.com/rizinorg/rizin/blob/master/DEVELOPERS.md#code-style)
- [x] I've documented or updated the documentation of every function and struct this PR changes. If not so I've explained why.
- [x] I've added tests that prove my fix is effective or that my feature works (if possible)
- [ ] I've updated the [rizin book](https://github.com/rizinorg/book) with the relevant information (if needed)

**Detailed description**

<!-- Explain the **details** for making this change. Is a new feature implemented? What existing problem does the pull request solve? How does the pull request solve these issues? Please provide enough information so that others can review your pull request. -->

Existing DWARF loaders have incomplete support for DWARF5, and the support for DWARF location expressions is too simplified. It also uses a lot of SDBs to store DWARF information.

This PR completely refactors the DWARF loader, fixes a lot of bugs, and makes a lot of improvements to these issues.

- [x] #3535
- [x] #3548 
- [x] parse `.debug_loclists`
- [x] move `parse_dwarf_location` from `dwarf_process.c` to `dwarf.c`
	- [x] dwarf operation (expression) parse
	- [x] dwarf expression evaluation
- [x] `.debug_rnglists`
- [x] `.debug_addr`
- [x] Review feedback: https://github.com/rizinorg/rizin/pull/3703#issuecomment-1658416011
- [ ] ~~Hide COMPOSITE storage from `RzAnalysisVarStorage` for now (deferred to https://github.com/rizinorg/rizin/issues/3744)~~
- [x] DWARF origin serialization
- [x] Tests for DWARF origin serialization `test/unit/test_serialize_analysis.c`
- [x] Tests for project migration in `test/integration/test_project_migrate.c`

### TODO (after merge)

- [ ] add [fuzztests](https://github.com/AFLplusplus/AFLplusplus/blob/stable/docs/fuzzing_in_depth.md)

**Test plan**

CI is green

**Closing issues**

closes #3548
closes #3535
closes #1004
closes #3541
closes #3700
partially addresses https://github.com/rizinorg/rizin/issues/3581
...


See also https://gcc.gnu.org/wiki/DebugFission

Second version of https://github.com/rizinorg/rizin/pull/3565
",True,3703,https://api.github.com/repos/rizinorg/rizin/pulls/3703,https://github.com/rizinorg/rizin/pull/3703,closed,14065,7273,78,3,49,158,10,0,"[{'name': 'rz-test'}, {'name': 'RzBin'}, {'name': 'RzAnalysis'}, {'name': 'API'}, {'name': 'RzCore'}, {'name': 'RzType'}, {'name': 'high-priority'}, {'name': 'DWARF'}, {'name': 'RzUtil'}, {'name': 'blocker'}]",2023-07-31 07:11:36+00:00,2023-08-25 15:32:06+00:00,2190030.0,"25 days, 8:20:30","[{'comment_id': 1278882147, 'comment_body': 'Regarding these loclists, could you please use a short form I suggested in https://github.com/rizinorg/rizin/pull/3565#discussion_r1278833844\r\n```\r\nvar va_lost ap @ [<regname1|stackoffset1>, <regname2|stackoffset2>, ...]\r\n```', 'comment_created': datetime.datetime(2023, 7, 31, 7, 20, 10, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 1278890959, 'comment_body': ""It's just that now we have a lot of restrictions on variable name substitution, in which case our output will look a bit strange if we omit Range.begin\r\n"", 'comment_created': datetime.datetime(2023, 7, 31, 7, 29, 9, tzinfo=datetime.timezone.utc), 'commenter': 'imbillow', 'type': 'User'}, {'comment_id': 1278893086, 'comment_body': ""i'm not super sure if these are useful on output as they are right now."", 'comment_created': datetime.datetime(2023, 7, 31, 7, 31, 16, tzinfo=datetime.timezone.utc), 'commenter': 'wargio', 'type': 'User'}, {'comment_id': 1278895985, 'comment_body': 'Another option we could simply omit everything except stack and registers for storage in this variable list, to preserve the old style output, but to show these vars anyway ', 'comment_created': datetime.datetime(2023, 7, 31, 7, 34, 18, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 1278914629, 'comment_body': 'We can try to improve output and substitution in later PRs. What do you think?', 'comment_created': datetime.datetime(2023, 7, 31, 7, 52, 18, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 1278955228, 'comment_body': 'So the conclusion is to preserve old-style output in this PR and we think about better output in a separate issue/PR for the 0.7.0 release.', 'comment_created': datetime.datetime(2023, 7, 31, 8, 28, 36, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 1278956961, 'comment_body': ""If there is a way to select biggest range as you suggested - use it if it's register or stack, if you don't know what to show in the `@ ...` part, simply omit it @imbillow \r\n"", 'comment_created': datetime.datetime(2023, 7, 31, 8, 30, 10, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 1278959454, 'comment_body': 'For more detailed output we will have to rework `afv` commands as well: https://github.com/rizinorg/rizin/issues/3702', 'comment_created': datetime.datetime(2023, 7, 31, 8, 32, 17, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 1278963367, 'comment_body': ""> If there is a way to select biggest range as you suggested - use it if it's register or stack, if you don't know what to show in the `@ ...` part, simply omit it @imbillow\r\n\r\nOK"", 'comment_created': datetime.datetime(2023, 7, 31, 8, 36, 1, tzinfo=datetime.timezone.utc), 'commenter': 'imbillow', 'type': 'User'}, {'comment_id': 1279038192, 'comment_body': 'Could you reduce the whitespace between two composite parts?', 'comment_created': datetime.datetime(2023, 7, 31, 9, 29, 39, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 1279038660, 'comment_body': '`RZ_BORROW`/`RZ_OWN`/`RZ_OUT` missing on those arguments.', 'comment_created': datetime.datetime(2023, 7, 31, 9, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Rot127', 'type': 'User'}, {'comment_id': 1279038871, 'comment_body': 'Same, just one space please', 'comment_created': datetime.datetime(2023, 7, 31, 9, 30, 12, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 1279040441, 'comment_body': 'Maybe `typedef` the `DX_LANG` enum, so the `enum` can be omitted.', 'comment_created': datetime.datetime(2023, 7, 31, 9, 31, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Rot127', 'type': 'User'}, {'comment_id': 1279042363, 'comment_body': ""Couldn't you compare to the enum values? So we save the `strcmp()` calls?"", 'comment_created': datetime.datetime(2023, 7, 31, 9, 33, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Rot127', 'type': 'User'}, {'comment_id': 1279045598, 'comment_body': 'Consider adding an `enum` for those magic numbers and document the `enum` with the reference to the ABI docs.', 'comment_created': datetime.datetime(2023, 7, 31, 9, 35, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Rot127', 'type': 'User'}, {'comment_id': 1279046921, 'comment_body': 'Also below', 'comment_created': datetime.datetime(2023, 7, 31, 9, 36, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Rot127', 'type': 'User'}, {'comment_id': 1279048161, 'comment_body': 'Please document the function (with parameter, return values and such).', 'comment_created': datetime.datetime(2023, 7, 31, 9, 38, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Rot127', 'type': 'User'}, {'comment_id': 1279052175, 'comment_body': '`default` case is missing.', 'comment_created': datetime.datetime(2023, 7, 31, 9, 41, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Rot127', 'type': 'User'}, {'comment_id': 1279054707, 'comment_body': '`\\brief` and the details about return should be documented in `\\return`', 'comment_created': datetime.datetime(2023, 7, 31, 9, 43, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Rot127', 'type': 'User'}, {'comment_id': 1279061951, 'comment_body': '`https` and you can emit the `&zoom=100,0,0` for brevity. Also for other URLs if it applies.', 'comment_created': datetime.datetime(2023, 7, 31, 9, 49, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Rot127', 'type': 'User'}, {'comment_id': 1279063677, 'comment_body': 'Please give `cas` a more descriptive name.', 'comment_created': datetime.datetime(2023, 7, 31, 9, 51, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Rot127', 'type': 'User'}, {'comment_id': 1279073838, 'comment_body': 'If those magic numbers could be replaced with `enum` vals it would be great.', 'comment_created': datetime.datetime(2023, 7, 31, 9, 59, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Rot127', 'type': 'User'}, {'comment_id': 1279078014, 'comment_body': '`rz_str_cmp` also below.', 'comment_created': datetime.datetime(2023, 7, 31, 10, 3, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Rot127', 'type': 'User'}, {'comment_id': 1279080034, 'comment_body': 'The TODO: If it stays like this when merged, please do not forget to open an issue about it.', 'comment_created': datetime.datetime(2023, 7, 31, 10, 5, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Rot127', 'type': 'User'}, {'comment_id': 1279084982, 'comment_body': 'Consider to describe this case in `\\brief` or `\\return`.', 'comment_created': datetime.datetime(2023, 7, 31, 10, 10, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Rot127', 'type': 'User'}, {'comment_id': 1279087037, 'comment_body': ""~~Better return something completely unreasonable (e.g. `ST32_MIN`) and describe it in the `\\return`.~~ Ignore it. Forgot that `strcmp` doesn't guarantee a specific negative value. But document the failure case nonetheless please."", 'comment_created': datetime.datetime(2023, 7, 31, 10, 12, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Rot127', 'type': 'User'}, {'comment_id': 1279091208, 'comment_body': '`default` case missing', 'comment_created': datetime.datetime(2023, 7, 31, 10, 16, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Rot127', 'type': 'User'}, {'comment_id': 1279091603, 'comment_body': 'Also below', 'comment_created': datetime.datetime(2023, 7, 31, 10, 17, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Rot127', 'type': 'User'}, {'comment_id': 1279093706, 'comment_body': 'Document return values please.', 'comment_created': datetime.datetime(2023, 7, 31, 10, 19, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Rot127', 'type': 'User'}, {'comment_id': 1279100212, 'comment_body': 'Please document index into what specifically.', 'comment_created': datetime.datetime(2023, 7, 31, 10, 25, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Rot127', 'type': 'User'}, {'comment_id': 1279100699, 'comment_body': 'Also below', 'comment_created': datetime.datetime(2023, 7, 31, 10, 26, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Rot127', 'type': 'User'}, {'comment_id': 1279104040, 'comment_body': 'You can rename `i` -> `count` and remove the comment that `i` is meant to be the count.', 'comment_created': datetime.datetime(2023, 7, 31, 10, 29, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Rot127', 'type': 'User'}, {'comment_id': 1279106322, 'comment_body': 'Move this define outside of the function.', 'comment_created': datetime.datetime(2023, 7, 31, 10, 32, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Rot127', 'type': 'User'}, {'comment_id': 1279108812, 'comment_body': '`rz_mem_copy`', 'comment_created': datetime.datetime(2023, 7, 31, 10, 34, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Rot127', 'type': 'User'}, {'comment_id': 1279114554, 'comment_body': 'Is there a specific reason this is not at the top?', 'comment_created': datetime.datetime(2023, 7, 31, 10, 40, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Rot127', 'type': 'User'}, {'comment_id': 1279117984, 'comment_body': 'This logic could be added to `util/str.c`.', 'comment_created': datetime.datetime(2023, 7, 31, 10, 44, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Rot127', 'type': 'User'}, {'comment_id': 1279118860, 'comment_body': 'I wonder if the approach similar to the C type parser could be used - see `state->forward` in `CParserState` in `librz/type/parser/` and `c_parser_forward_definition_store()`', 'comment_created': datetime.datetime(2023, 7, 31, 10, 45, 14, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 1279119422, 'comment_body': 'For example this function `RZ_OWN ParserTypePair *c_parser_new_typedef_naked_type(CParserState *state, RZ_NONNULL const char *name)`.', 'comment_created': datetime.datetime(2023, 7, 31, 10, 45, 52, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 1279119863, 'comment_body': 'And `RZ_OWN ParserTypePair *c_parser_new_typedef_forward_definition(CParserState *state, RZ_NONNULL const char *name)`', 'comment_created': datetime.datetime(2023, 7, 31, 10, 46, 22, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 1279124758, 'comment_body': 'Complete docs please.', 'comment_created': datetime.datetime(2023, 7, 31, 10, 49, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Rot127', 'type': 'User'}, {'comment_id': 1279129561, 'comment_body': 'Better check for it, print an error and return `false`', 'comment_created': datetime.datetime(2023, 7, 31, 10, 54, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Rot127', 'type': 'User'}, {'comment_id': 1279137792, 'comment_body': 'Those are quite a lot parameters. Consider putting as many of them in a struct and pass this one. Also because other functions below use the same set of parameters as well.', 'comment_created': datetime.datetime(2023, 7, 31, 11, 0, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Rot127', 'type': 'User'}, {'comment_id': 1279142922, 'comment_body': 'Please rename `bob` to something more descriptive. Also `fnc` to `cache` or something similar. Also in the other functions above.', 'comment_created': datetime.datetime(2023, 7, 31, 11, 6, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Rot127', 'type': 'User'}, {'comment_id': 1279149694, 'comment_body': 'This is too much work for this PR. But please add at least `RZ_OUT` where applicable.', 'comment_created': datetime.datetime(2023, 7, 31, 11, 13, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Rot127', 'type': 'User'}, {'comment_id': 1279160020, 'comment_body': ""`cas` here means `case` as in `enum case`, it's commonly used like that in the code. Shouldn't be a problem."", 'comment_created': datetime.datetime(2023, 7, 31, 11, 24, 18, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 1279161897, 'comment_body': 'See https://github.com/rizinorg/rizin/issues/3539', 'comment_created': datetime.datetime(2023, 7, 31, 11, 26, 28, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 1279177405, 'comment_body': '`rz_mem_memzero`', 'comment_created': datetime.datetime(2023, 7, 31, 11, 43, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Rot127', 'type': 'User'}, {'comment_id': 1279180779, 'comment_body': 'Missing return?', 'comment_created': datetime.datetime(2023, 7, 31, 11, 47, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Rot127', 'type': 'User'}, {'comment_id': 1279182607, 'comment_body': 'Rename to `out_list` and mark as `RZ_OUT`', 'comment_created': datetime.datetime(2023, 7, 31, 11, 49, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Rot127', 'type': 'User'}, {'comment_id': 1279187683, 'comment_body': 'Why the cast to signed?', 'comment_created': datetime.datetime(2023, 7, 31, 11, 54, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Rot127', 'type': 'User'}, {'comment_id': 1279189282, 'comment_body': '```suggestion\r\n\tcase RzBinDwarfLocationKind_LOCLIST:\r\n```', 'comment_created': datetime.datetime(2023, 7, 31, 11, 56, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Rot127', 'type': 'User'}, {'comment_id': 1279190018, 'comment_body': '`rz_return_val_if_fail`', 'comment_created': datetime.datetime(2023, 7, 31, 11, 57, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Rot127', 'type': 'User'}, {'comment_id': 1279192748, 'comment_body': '`rz_mem_copy`', 'comment_created': datetime.datetime(2023, 7, 31, 11, 59, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Rot127', 'type': 'User'}, {'comment_id': 1279193001, 'comment_body': '`default` case missing', 'comment_created': datetime.datetime(2023, 7, 31, 11, 59, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Rot127', 'type': 'User'}, {'comment_id': 1279193868, 'comment_body': ""~~If it doesn't make too much trouble add a prefix to the function name. Because it is `RZ_IPI` and is visible outside of this file.~~\r\nThis would apply to many. We should probably agree on a naming convention in this case cc @XVilka "", 'comment_created': datetime.datetime(2023, 7, 31, 12, 0, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Rot127', 'type': 'User'}, {'comment_id': 1279194312, 'comment_body': '`rz_mem_memzero`', 'comment_created': datetime.datetime(2023, 7, 31, 12, 0, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Rot127', 'type': 'User'}, {'comment_id': 1279195012, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 7, 31, 12, 1, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Rot127', 'type': 'User'}, {'comment_id': 1279195157, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 7, 31, 12, 1, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Rot127', 'type': 'User'}, {'comment_id': 1279195528, 'comment_body': '`default` case missing.', 'comment_created': datetime.datetime(2023, 7, 31, 12, 2, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Rot127', 'type': 'User'}, {'comment_id': 1279197645, 'comment_body': '@XVilka We should really add a `RZ_STR_EQUAL` macro to `util/str.c`. This pattern is so common (in general, not just in this PR).', 'comment_created': datetime.datetime(2023, 7, 31, 12, 4, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Rot127', 'type': 'User'}, {'comment_id': 1279203643, 'comment_body': 'Is this TODO solved?', 'comment_created': datetime.datetime(2023, 7, 31, 12, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Rot127', 'type': 'User'}, {'comment_id': 1279204466, 'comment_body': '`default` missing', 'comment_created': datetime.datetime(2023, 7, 31, 12, 11, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Rot127', 'type': 'User'}, {'comment_id': 1279206352, 'comment_body': ""For all these API functions it would be nice to bundle the parameters into a struct. So the list doesn't get too long. Though not in this PR."", 'comment_created': datetime.datetime(2023, 7, 31, 12, 13, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Rot127', 'type': 'User'}, {'comment_id': 1279212691, 'comment_body': '`defaul` missing', 'comment_created': datetime.datetime(2023, 7, 31, 12, 19, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Rot127', 'type': 'User'}, {'comment_id': 1279213988, 'comment_body': '`RZ_IPI` missing? Also below.', 'comment_created': datetime.datetime(2023, 7, 31, 12, 20, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Rot127', 'type': 'User'}, {'comment_id': 1279228026, 'comment_body': 'Document the function (because of the return value in the failure case).', 'comment_created': datetime.datetime(2023, 7, 31, 12, 32, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Rot127', 'type': 'User'}, {'comment_id': 1279239246, 'comment_body': 'Those functions (sign_extend, mask etc.) should be part of `util` IMHO. They are generally very useful.', 'comment_created': datetime.datetime(2023, 7, 31, 12, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Rot127', 'type': 'User'}, {'comment_id': 1279240245, 'comment_body': '`default` missing', 'comment_created': datetime.datetime(2023, 7, 31, 12, 43, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Rot127', 'type': 'User'}, {'comment_id': 1279247281, 'comment_body': 'Should it print a warning as long as no error handling is implemented?', 'comment_created': datetime.datetime(2023, 7, 31, 12, 47, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Rot127', 'type': 'User'}, {'comment_id': 1279257182, 'comment_body': 'Rename the `my_print*` macros to something more descriptive please (`setup_strbuf_or_fail`, `append_to_strbuf` or something similar). Or replace them with the normal `rz_strbuf_*` calls (maybe even better). @XVilka?', 'comment_created': datetime.datetime(2023, 7, 31, 12, 56, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Rot127', 'type': 'User'}, {'comment_id': 1279259630, 'comment_body': '`static`', 'comment_created': datetime.datetime(2023, 7, 31, 12, 58, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Rot127', 'type': 'User'}, {'comment_id': 1279262777, 'comment_body': '`static`', 'comment_created': datetime.datetime(2023, 7, 31, 13, 1, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Rot127', 'type': 'User'}, {'comment_id': 1279266817, 'comment_body': 'Those are not used. Can be removed.', 'comment_created': datetime.datetime(2023, 7, 31, 13, 5, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Rot127', 'type': 'User'}, {'comment_id': 1279267700, 'comment_body': 'Just as `idx`', 'comment_created': datetime.datetime(2023, 7, 31, 13, 5, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Rot127', 'type': 'User'}, {'comment_id': 1279274694, 'comment_body': 'Please document this. Also the structs below. Since it is pretty central to the whole module, it should have proper documentation (e.g. what index number the hash tables is etc.).', 'comment_created': datetime.datetime(2023, 7, 31, 13, 11, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Rot127', 'type': 'User'}, {'comment_id': 1279275922, 'comment_body': 'Same here and below. Please document it.', 'comment_created': datetime.datetime(2023, 7, 31, 13, 12, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Rot127', 'type': 'User'}, {'comment_id': 1279279262, 'comment_body': ""Is this really the `name` of the attribute? Because there is also an `DW_AT_name` entry in the enum. Isn't this more the type? Sorry. I have no real experience with dwarf."", 'comment_created': datetime.datetime(2023, 7, 31, 13, 15, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Rot127', 'type': 'User'}, {'comment_id': 1279291081, 'comment_body': 'Should be removed before merge.', 'comment_created': datetime.datetime(2023, 7, 31, 13, 23, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Rot127', 'type': 'User'}, {'comment_id': 1279367180, 'comment_body': 'I don\'t think we should extend the kinds of core variable storages. The problem with this is that it becomes insanely complicated to reason about the storage spaces (stack/regs). For example, there could be a `RZ_ANALYSIS_VAR_STORAGE_STACK` variable and a `RZ_ANALYSIS_VAR_STORAGE_REG_OFFSET` variable `rbp - 0x8` at the same time, which may overlap.\r\nThis would make more sophisticated analysis and decompiler integration like rz-ghidra practically almost impossible.\r\n\r\nIdeally, all variables should only be reg or stack as before, with the stack values being precalculated, so something like `rbp - 0x8` from dwarf becomes a stack variable at the correct offset. FB_OFFSET may already be almost a stack variable if I interpret it right, just with some offset applied. The detailed dwarf-like info could be saved next to the core variable storage as some kind of ""metadata"" or ""origin"" inside the RzAnalysisVariable for further use if necessary.\r\nHowever I do acknowledge that calculating the stack offset beforehand may not always be possible. If we really can\'t find another way, we may want to have only one additional storage type `RZ_ANALYSIS_VAR_STORAGE_EVAL_PENDING` or similar that indicates that one has to look at the detailed origin info to evaluate it.', 'comment_created': datetime.datetime(2023, 7, 31, 14, 17, 27, tzinfo=datetime.timezone.utc), 'commenter': 'thestr4ng3r', 'type': 'User'}, {'comment_id': 1280058244, 'comment_body': ""@imbillow sorry for the big change at such late stage. Could you please change the storage to have an additional `RZ_ANALYSIS_VAR_STORAGE_EVAL_PENDING` and use it for storage that can't be evaluated upon loading. And some additional information in the variable structure to allow access details of it. \r\nBut the composite (`RZ_ANALYSIS_VAR_STORAGE_COMPOSITE`) one should remain in my opinion, since the concept transcends just DWARF and really just a compiler putting variable in multiple registers."", 'comment_created': datetime.datetime(2023, 8, 1, 2, 50, 8, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 1280059271, 'comment_body': ""Yes. You're absolutely right."", 'comment_created': datetime.datetime(2023, 8, 1, 2, 52, 49, tzinfo=datetime.timezone.utc), 'commenter': 'imbillow', 'type': 'User'}, {'comment_id': 1280066703, 'comment_body': ""> @imbillow sorry for the big change at such late stage. Could you please change the storage to have an additional `RZ_ANALYSIS_VAR_STORAGE_EVAL_PENDING` and use it for storage that can't be evaluated upon loading. And some additional information in the variable structure to allow access details of it. \n> \n> But the composite (`RZ_ANALYSIS_VAR_STORAGE_COMPOSITE`) one should remain in my opinion, since the concept transcends just DWARF and really just a compiler putting variable in multiple registers.\n\nI am fine with it, it's just that this pr might have to be considered delayed to 0.7."", 'comment_created': datetime.datetime(2023, 8, 1, 3, 11, 42, tzinfo=datetime.timezone.utc), 'commenter': 'imbillow', 'type': 'User'}, {'comment_id': 1280078328, 'comment_body': 'Good point. Lets postpone it to 0.7.0 then.', 'comment_created': datetime.datetime(2023, 8, 1, 3, 42, 20, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 1281490552, 'comment_body': '@XVilka @wargio any idea why it was `st64`?', 'comment_created': datetime.datetime(2023, 8, 2, 7, 12, 55, tzinfo=datetime.timezone.utc), 'commenter': 'ret2libc', 'type': 'User'}, {'comment_id': 1281514801, 'comment_body': 'no idea. but makes no sense.', 'comment_created': datetime.datetime(2023, 8, 2, 7, 36, 27, tzinfo=datetime.timezone.utc), 'commenter': 'wargio', 'type': 'User'}, {'comment_id': 1281549544, 'comment_body': 'No idea, was likely a typo.', 'comment_created': datetime.datetime(2023, 8, 2, 8, 8, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 1281551595, 'comment_body': 'https://github.com/rizinorg/rizin/pull/3714', 'comment_created': datetime.datetime(2023, 8, 2, 8, 9, 55, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 1284656613, 'comment_body': ""I don't think that's necessary."", 'comment_created': datetime.datetime(2023, 8, 4, 16, 57, 46, tzinfo=datetime.timezone.utc), 'commenter': 'imbillow', 'type': 'User'}, {'comment_id': 1284656811, 'comment_body': ""It's too long."", 'comment_created': datetime.datetime(2023, 8, 4, 16, 58, 2, tzinfo=datetime.timezone.utc), 'commenter': 'imbillow', 'type': 'User'}, {'comment_id': 1284744904, 'comment_body': ""It is the DW_AT property of this dwarf_attr_t.\r\n\r\n```\r\n[2] DW_TAG_subprogram DW_CHILDREN_yes\r\n\tDW_AT_low_pc DW_FORM_addr\r\n\tDW_AT_high_pc DW_FORM_data4\r\n\tDW_AT_frame_base DW_FORM_exprloc\r\n\tDW_AT_name DW_FORM_strp\r\n\tDW_AT_decl_file DW_FORM_data1\r\n\tDW_AT_decl_line DW_FORM_data1\r\n\tDW_AT_type DW_FORM_ref4\r\n\tDW_AT_external DW_FORM_flag_present\r\n```\r\n\r\nLike this DIE, it has a lot of DW_AT_XX DW_FORM_XX pairs, each described by a dwarf_attr_t.\r\n\r\nThen the name is actually the name from the old code, I just didn't feel like changing it."", 'comment_created': datetime.datetime(2023, 8, 4, 18, 53, 58, tzinfo=datetime.timezone.utc), 'commenter': 'imbillow', 'type': 'User'}, {'comment_id': 1286541068, 'comment_body': 'Please add Doxygen description here.', 'comment_created': datetime.datetime(2023, 8, 8, 2, 45, 32, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 1286541272, 'comment_body': 'Add `RZ_NONNULL` or `RZ_NULLABLE`', 'comment_created': datetime.datetime(2023, 8, 8, 2, 46, 3, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 1286541386, 'comment_body': 'Same in those, where it makes sense', 'comment_created': datetime.datetime(2023, 8, 8, 2, 46, 20, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 1286541579, 'comment_body': ""`RZ_OWN` for the return if it's allocated?"", 'comment_created': datetime.datetime(2023, 8, 8, 2, 46, 49, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 1286542405, 'comment_body': 'As these allocate new strings, please add ownership to the return values', 'comment_created': datetime.datetime(2023, 8, 8, 2, 48, 41, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 1286542758, 'comment_body': 'Agree. Better to inline `rz_strbuf_*()` here, the code duplication is minimal but the code is clearer this way.', 'comment_created': datetime.datetime(2023, 8, 8, 2, 49, 27, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 1286543359, 'comment_body': 'Agree. But because they are inline, they should be placed into a header file in `librz/include/rz_util/`', 'comment_created': datetime.datetime(2023, 8, 8, 2, 50, 54, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 1286544205, 'comment_body': ""Yes. For now it's fine as is though. We can decide and change these names later, it's only matter of `sed` after all."", 'comment_created': datetime.datetime(2023, 8, 8, 2, 52, 56, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 1286544337, 'comment_body': 'Agree.', 'comment_created': datetime.datetime(2023, 8, 8, 2, 53, 15, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 1289459325, 'comment_body': 'Good choice. We will have other origins in the future - PDB, OMF. Maybe also decompiler-originated variables could be useful, e.g. from rz-ghidra', 'comment_created': datetime.datetime(2023, 8, 10, 2, 28, 52, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 1289460325, 'comment_body': 'Just please add a commentary for those', 'comment_created': datetime.datetime(2023, 8, 10, 2, 29, 11, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 1289768877, 'comment_body': ""I agree, it's fine as is."", 'comment_created': datetime.datetime(2023, 8, 10, 8, 35, 52, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 1289775359, 'comment_body': 'I recommend to store ""origin"" as a pointer and as a structu with members ""kind"" and union ""u"", so that it can be easily extended in the future without breaking the API/ABI. @thestr4ng3r @wargio @ret2libc what do you think?', 'comment_created': datetime.datetime(2023, 8, 10, 8, 41, 7, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 1289790964, 'comment_body': '@imbillow seems you forgot this one', 'comment_created': datetime.datetime(2023, 8, 10, 8, 53, 20, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 1289792525, 'comment_body': '@imbillow since you did the move of some of the functions to `RzUtil`, please move also this one', 'comment_created': datetime.datetime(2023, 8, 10, 8, 54, 36, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 1289794850, 'comment_body': 'Have you tried to fix this? As I noted before, it turned out that many DWARF files store typedefs in the similar chain, so it breaks many files actually.', 'comment_created': datetime.datetime(2023, 8, 10, 8, 56, 28, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 1289796955, 'comment_body': '`copy` should be freed here, right?', 'comment_created': datetime.datetime(2023, 8, 10, 8, 57, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Rot127', 'type': 'User'}, {'comment_id': 1289808692, 'comment_body': 'I agree with @XVilka that composite makes sense as a core variable storage type since it is just multiple registers, but in the current implementation it is not different from `_EVAL_PENDING` as the actual contents have to be looked up from the origin anyway. So I would omit this for now until the composite storage is actually implemented fully in `RzAnalysisVarStorage` itself, which should also simplify serialization.', 'comment_created': datetime.datetime(2023, 8, 10, 9, 7, 19, tzinfo=datetime.timezone.utc), 'commenter': 'thestr4ng3r', 'type': 'User'}, {'comment_id': 1289810439, 'comment_body': 'Missing the implementation here. We also have to save and load the entire dwarf origin.', 'comment_created': datetime.datetime(2023, 8, 10, 9, 8, 39, tzinfo=datetime.timezone.utc), 'commenter': 'thestr4ng3r', 'type': 'User'}, {'comment_id': 1289816216, 'comment_body': 'I remember the problem I had was that typedb uses typename as the identifier, but sometimes there are different types with the same typename.', 'comment_created': datetime.datetime(2023, 8, 10, 9, 13, 31, tzinfo=datetime.timezone.utc), 'commenter': 'imbillow', 'type': 'User'}, {'comment_id': 1289816676, 'comment_body': 'I am not sure if it is a good idea to put the storage in its own sub-object here. It certainly makes the code and nicer separated, but the flattened approach before (only ""stack"" and ""reg"" keys inside the var itself) was much more compact. Since we may have to parse many vars in one project, this might affect performance. My suggestion would be to keep the old serialization idea, parse as ""eval pending"" if there is neither ""stack"" nor ""reg"" and add another key ""origin"" for the dwarf info. But I am also open for other ideas and arguments.', 'comment_created': datetime.datetime(2023, 8, 10, 9, 13, 54, tzinfo=datetime.timezone.utc), 'commenter': 'thestr4ng3r', 'type': 'User'}, {'comment_id': 1289817466, 'comment_body': '```suggestion\r\nRZ_API RZ_OWN char *rz_core_bin_dwarf_abbrev_decl_to_string(RZ_BORROW RzBinDwarfAbbrevDecl *decl) {\r\n```', 'comment_created': datetime.datetime(2023, 8, 10, 9, 14, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Rot127', 'type': 'User'}, {'comment_id': 1289823082, 'comment_body': ""```suggestion\r\nlibdemangle_options = ['default_library=static']\r\n```"", 'comment_created': datetime.datetime(2023, 8, 10, 9, 19, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Rot127', 'type': 'User'}, {'comment_id': 1289869017, 'comment_body': ""The problem is that I thought it's not common, but it turned out most files I tried to open suddently show `unknown_t` instead of valid types because it first defines `typedef` to some type, e.g. `struct`, and only then defines this `struct`. I think we should allow such forward definitions somehow. You can create additional hashtable of these forward definitions and check it - this is how I handle the same situation in the C parser. "", 'comment_created': datetime.datetime(2023, 8, 10, 9, 51, 49, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 1289902469, 'comment_body': 'as long as there is a `kind` value which defines the origin (thus we can cast to whatever) then yes.', 'comment_created': datetime.datetime(2023, 8, 10, 10, 17, 32, tzinfo=datetime.timezone.utc), 'commenter': 'wargio', 'type': 'User'}, {'comment_id': 1289911662, 'comment_body': '`rz_buf_seek` accept `st64` and `rz_buf_tell` return `ut64`', 'comment_created': datetime.datetime(2023, 8, 10, 10, 22, 52, tzinfo=datetime.timezone.utc), 'commenter': 'imbillow', 'type': 'User'}, {'comment_id': 1289919691, 'comment_body': ""I am ok with both ways. A pointer introduces additional indirection, but may help with memory size when most vars don't have an origin (thus null) and the union grows."", 'comment_created': datetime.datetime(2023, 8, 10, 10, 28, 19, tzinfo=datetime.timezone.utc), 'commenter': 'thestr4ng3r', 'type': 'User'}, {'comment_id': 1289964154, 'comment_body': 'Good point, opened a new issue for that: https://github.com/rizinorg/rizin/issues/3744, lets work on composite variables in a different PR.', 'comment_created': datetime.datetime(2023, 8, 10, 11, 10, 39, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 1290968343, 'comment_body': 'I think that pattern is very common indeed.', 'comment_created': datetime.datetime(2023, 8, 11, 7, 4, 35, tzinfo=datetime.timezone.utc), 'commenter': 'ret2libc', 'type': 'User'}, {'comment_id': 1290969577, 'comment_body': 'If you want this to work correctly you should add the right entry in rz_userconf.h.in, otherwise it does nothing.', 'comment_created': datetime.datetime(2023, 8, 11, 7, 5, 48, tzinfo=datetime.timezone.utc), 'commenter': 'ret2libc', 'type': 'User'}, {'comment_id': 1290970613, 'comment_body': '```suggestion\r\n\tif (indent < 0 || indent >= RZ_ARRAY_SIZE(indent_tbl)) {\r\n\t\treturn """";\r\n\t}\r\n```', 'comment_created': datetime.datetime(2023, 8, 11, 7, 6, 48, tzinfo=datetime.timezone.utc), 'commenter': 'ret2libc', 'type': 'User'}, {'comment_id': 1290971532, 'comment_body': ""is this really necessary as an API? Is it used in multiple places or just in one place? Because I'm tempted to say this should be a static function somewhere."", 'comment_created': datetime.datetime(2023, 8, 11, 7, 7, 35, tzinfo=datetime.timezone.utc), 'commenter': 'ret2libc', 'type': 'User'}, {'comment_id': 1290972378, 'comment_body': 'Doc for this function? It might not be clear what it does.', 'comment_created': datetime.datetime(2023, 8, 11, 7, 8, 12, tzinfo=datetime.timezone.utc), 'commenter': 'ret2libc', 'type': 'User'}, {'comment_id': 1290974047, 'comment_body': 'Moreover, please create a small unit test checking it for a few values.', 'comment_created': datetime.datetime(2023, 8, 11, 7, 9, 36, tzinfo=datetime.timezone.utc), 'commenter': 'ret2libc', 'type': 'User'}, {'comment_id': 1290978327, 'comment_body': 'I think this is changing the behaviour? `i` is not incremented anymore in this way, compared to before.', 'comment_created': datetime.datetime(2023, 8, 11, 7, 13, 9, tzinfo=datetime.timezone.utc), 'commenter': 'ret2libc', 'type': 'User'}, {'comment_id': 1291019740, 'comment_body': ""Lets keep it here. Someone asked @imbillow to move it to the RzUtil, moving back and forth isn't exactly encouraging."", 'comment_created': datetime.datetime(2023, 8, 11, 7, 56, 9, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 1291336907, 'comment_body': 'my bad', 'comment_created': datetime.datetime(2023, 8, 11, 13, 24, 35, tzinfo=datetime.timezone.utc), 'commenter': 'imbillow', 'type': 'User'}, {'comment_id': 1291343611, 'comment_body': ""What I'm thinking is that if we care so much about efficiency, why not use some proven solution that can directly serialize our c struct into a binary representation."", 'comment_created': datetime.datetime(2023, 8, 11, 13, 31, 1, tzinfo=datetime.timezone.utc), 'commenter': 'imbillow', 'type': 'User'}, {'comment_id': 1291346263, 'comment_body': '@imbillow, maybe sometime in the future, but definitely not now or soon. I am afraid we stuck with SDB for a while. Something like capnproto or binary xml could be useful in the future, indeed', 'comment_created': datetime.datetime(2023, 8, 11, 13, 33, 33, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 1298076866, 'comment_body': 'broken indent', 'comment_created': datetime.datetime(2023, 8, 18, 6, 55, 37, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 1298980050, 'comment_body': 'Move that into `librz/type/base.c` and make an API', 'comment_created': datetime.datetime(2023, 8, 19, 1, 21, 53, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 1299014752, 'comment_body': '> Have you tried to fix this? As I noted before, it turned out that many DWARF files store typedefs in the similar chain, so it breaks many files actually.\r\n\r\nCan you help test this issue using the latest code?', 'comment_created': datetime.datetime(2023, 8, 19, 2, 21, 59, tzinfo=datetime.timezone.utc), 'commenter': 'imbillow', 'type': 'User'}, {'comment_id': 1299180516, 'comment_body': 'Added points about serialization in the PR description under `TODO` section', 'comment_created': datetime.datetime(2023, 8, 19, 12, 25, 38, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 1299859542, 'comment_body': 'Please add Doxygen and a small test in `test/unit/test_json.c` testing both equality and inequality.', 'comment_created': datetime.datetime(2023, 8, 21, 9, 29, 15, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 1299859723, 'comment_body': 'Same', 'comment_created': datetime.datetime(2023, 8, 21, 9, 29, 24, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 1299859961, 'comment_body': 'Please also add `RZ_NONNULL`', 'comment_created': datetime.datetime(2023, 8, 21, 9, 29, 37, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 1299860461, 'comment_body': 'Please add `RZ_NONNULL` and `rz_return_val_if_fail()` as well', 'comment_created': datetime.datetime(2023, 8, 21, 9, 30, 4, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 1299861225, 'comment_body': ""Don't forget this one please"", 'comment_created': datetime.datetime(2023, 8, 21, 9, 30, 46, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 1301162870, 'comment_body': ""I'm not quite sure here. Now I should have implemented serialize and load for `COMPOSITE`. \r\n\r\nDo I still need to complete `EVAL_PENDING`? But that would mean implementing JSON serialize and deserilize for `RzAnalysisDwarfVariable` `RzBinDwarfLocation` `RzBinDwarfEvaluation`. I feel a bit silly writing this by hand."", 'comment_created': datetime.datetime(2023, 8, 22, 7, 40, 35, tzinfo=datetime.timezone.utc), 'commenter': 'imbillow', 'type': 'User'}, {'comment_id': 1301169018, 'comment_body': ""@imbillow the problem is that COMPOSITE variable would require changes also in `rz-ghidra`, `jsdec`, `rz-retdec`, also `cutter`. After discussion it seems to be easier done in a separate PR since it spans multiple different areas, see https://github.com/rizinorg/rizin/issues/3744. As for `RzBinDwarfLocation` and `RzBinDwarfEvaluation` serialization I don't think we have another choice right now. cc @thestr4ng3r "", 'comment_created': datetime.datetime(2023, 8, 22, 7, 45, 40, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 1301170524, 'comment_body': ""On the other hand, if you implemented serialization of composite variable, it's possible to keep it then. @ret2libc @wargio what do you think?"", 'comment_created': datetime.datetime(2023, 8, 22, 7, 46, 50, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 1301174625, 'comment_body': 'My opinion - lets keep your current COMPOSITE code, it should be fine, since it has to be done anyway. We will add missing parts later. But serialization of the DWARF information has to be done.', 'comment_created': datetime.datetime(2023, 8, 22, 7, 49, 33, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 1301189476, 'comment_body': ""We have to serialize this part though, since it's a part of the `RzAnalysisVar`"", 'comment_created': datetime.datetime(2023, 8, 22, 8, 0, 24, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 1302907619, 'comment_body': ""Please remember that `rz_return_val_if_fail()` are removed in the release build. Thus it's better to restore `!die` check"", 'comment_created': datetime.datetime(2023, 8, 23, 11, 57, 28, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 1303768101, 'comment_body': '@thestr4ng3r what do you think about this approach of loading/saving the debug sections? cc @wargio @ret2libc ', 'comment_created': datetime.datetime(2023, 8, 24, 4, 2, 59, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 1303996748, 'comment_body': 'What if DWARF has the function called ""anonymous_function""?', 'comment_created': datetime.datetime(2023, 8, 24, 8, 36, 39, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 1304019868, 'comment_body': 'Are these sections actually info that has to be saved/loaded at all? If it is something that is parsed directly out of the binary and will never be edited during the session, it does not have to be saved as it can be restored from the binary again on the next load (might need tests so this property is actually guaranteed).\r\n\r\nFor the `RzAnalysisDwarfVariable` on the other hand, we have no choice other than to serialize it, or at least some kind of reference into the binary where the same info can be restored from, since variables can be renamed, etc.', 'comment_created': datetime.datetime(2023, 8, 24, 8, 55, 23, tzinfo=datetime.timezone.utc), 'commenter': 'thestr4ng3r', 'type': 'User'}, {'comment_id': 1304024485, 'comment_body': '@thestr4ng3r Rizin uses only a small part of that information, in fact, especially at this stage. Thus do not storing whole sections should reduce the resulting size of the project file. Moreover, as some binaries have huge debug information sections, storing them serialized might become a problem, for example for files like this one: https://github.com/rizinorg/rizin/issues/676', 'comment_created': datetime.datetime(2023, 8, 24, 8, 59, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 1304055676, 'comment_body': ""It's the auto-generated name I mentioned above"", 'comment_created': datetime.datetime(2023, 8, 24, 9, 25, 20, tzinfo=datetime.timezone.utc), 'commenter': 'imbillow', 'type': 'User'}, {'comment_id': 1304059752, 'comment_body': 'What I mean is that RzAnalysisDwarfVariable should not be edited and it can be restored via sections of DWARF. then we can reference it via DIE offset.', 'comment_created': datetime.datetime(2023, 8, 24, 9, 28, 54, tzinfo=datetime.timezone.utc), 'commenter': 'imbillow', 'type': 'User'}, {'comment_id': 1304067182, 'comment_body': ""@imbillow but then you don't need to store the whole section content in the SDB, only pointers to it?"", 'comment_created': datetime.datetime(2023, 8, 24, 9, 35, 14, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 1304082339, 'comment_body': ""> @imbillow but then you don't need to store the whole section content in the SDB, only pointers to it?\r\n\r\nYes."", 'comment_created': datetime.datetime(2023, 8, 24, 9, 48, 28, tzinfo=datetime.timezone.utc), 'commenter': 'imbillow', 'type': 'User'}, {'comment_id': 1304093073, 'comment_body': 'Exactly. If a DIE offset for a variable is enough to reconstruct the info, then it is enough to store that as part of the variable storage info and then reconstruct the info from the bin itself.', 'comment_created': datetime.datetime(2023, 8, 24, 9, 57, 53, tzinfo=datetime.timezone.utc), 'commenter': 'thestr4ng3r', 'type': 'User'}, {'comment_id': 1304115530, 'comment_body': 'Ok, lets stick to this approach then - saving pointers to the information. Then, if it works - the only missing thing is project migration tests, also test for loading this kind of storage from the project file. Then the PR will be ready to merge', 'comment_created': datetime.datetime(2023, 8, 24, 10, 18, 58, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 1304156190, 'comment_body': 'Agreed', 'comment_created': datetime.datetime(2023, 8, 24, 10, 58, 7, tzinfo=datetime.timezone.utc), 'commenter': 'thestr4ng3r', 'type': 'User'}, {'comment_id': 1305346927, 'comment_body': ""This change is wrong? Please don't remove the old test"", 'comment_created': datetime.datetime(2023, 8, 25, 8, 18, 23, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 1305542875, 'comment_body': 'OK, just a mistake.', 'comment_created': datetime.datetime(2023, 8, 25, 11, 32, 29, tzinfo=datetime.timezone.utc), 'commenter': 'imbillow', 'type': 'User'}, {'comment_id': 1305667126, 'comment_body': 'Please use the proper syntax of this file, see this section above, you could just extend the pattern to match it:\r\n```\r\nFiles: test/prj/*.rzdb\r\nCopyright: 2020 RizinOrg <info@rizin.re>\r\nLicense: LGPL-3.0-only\r\n```', 'comment_created': datetime.datetime(2023, 8, 25, 13, 32, 54, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}]","[{'commit_sha': '95942515b05eff30a030726f164bda55a7309683', 'committer_username': 'imbillow', 'committer_name': 'billow', 'committer_email': 'billow.fun@gmail.com', 'commit_date': datetime.datetime(2017, 1, 8, 3, 3, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dacb8d01315b6c40bacade2f88519b33b1a0ed72', 'committer_username': 'imbillow', 'committer_name': 'billow', 'committer_email': 'billow.fun@gmail.com', 'commit_date': datetime.datetime(2017, 1, 8, 3, 3, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6598c44f4b044a124a57107ad7e49c1c57bf45c8', 'committer_username': 'imbillow', 'committer_name': 'billow', 'committer_email': 'billow.fun@gmail.com', 'commit_date': datetime.datetime(2017, 1, 8, 3, 3, 30, tzinfo=datetime.timezone.utc)}]",billow,24983369,billow.fun@gmail.com,User,,43,,136,81

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
299867499,rizin,rizinorg/rizin,C,347,2590,47,1039,29226,439,81,49,"[{'id': 1901941865, 'number': 4532, 'closed': datetime.datetime(2024, 6, 4, 4, 31, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 6, 4, 1, 41, 49, tzinfo=datetime.timezone.utc), 'time_taken': 10210.0, 'time_delta': '2:50:10', 'additions': 398, 'deletions': 19, 'state': 'closed'}, {'id': 1886462917, 'number': 4514, 'closed': datetime.datetime(2024, 6, 3, 8, 36, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 5, 24, 9, 57, 10, tzinfo=datetime.timezone.utc), 'time_taken': 859181.0, 'time_delta': '9 days, 22:39:41', 'additions': 2941, 'deletions': 1021, 'state': 'closed'}, {'id': 1848643952, 'number': 4466, 'closed': datetime.datetime(2024, 5, 4, 1, 31, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 4, 30, 19, 34, 54, tzinfo=datetime.timezone.utc), 'time_taken': 280568.0, 'time_delta': '3 days, 5:56:08', 'additions': 151, 'deletions': 28, 'state': 'closed'}, {'id': 1833219182, 'number': 4454, 'closed': datetime.datetime(2024, 4, 21, 14, 56, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 4, 21, 8, 4, 7, tzinfo=datetime.timezone.utc), 'time_taken': 24735.0, 'time_delta': '6:52:15', 'additions': 69, 'deletions': 91, 'state': 'closed'}, {'id': 1799216720, 'number': 4409, 'closed': datetime.datetime(2024, 3, 31, 23, 45, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 3, 31, 7, 19, 14, tzinfo=datetime.timezone.utc), 'time_taken': 59179.0, 'time_delta': '16:26:19', 'additions': 21, 'deletions': 13, 'state': 'closed'}, {'id': 1753167811, 'number': 4322, 'closed': datetime.datetime(2024, 5, 19, 4, 17, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 3, 3, 2, 2, 11, tzinfo=datetime.timezone.utc), 'time_taken': 6660942.0, 'time_delta': '77 days, 2:15:42', 'additions': 5222, 'deletions': 2128, 'state': 'closed'}, {'id': 1752901277, 'number': 4318, 'closed': datetime.datetime(2024, 3, 3, 5, 45, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 3, 2, 10, 32, 42, tzinfo=datetime.timezone.utc), 'time_taken': 69186.0, 'time_delta': '19:13:06', 'additions': 14, 'deletions': 8, 'state': 'closed'}, {'id': 1752262246, 'number': 4313, 'closed': datetime.datetime(2024, 3, 9, 1, 41, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 3, 1, 19, 16, 38, tzinfo=datetime.timezone.utc), 'time_taken': 627876.0, 'time_delta': '7 days, 6:24:36', 'additions': 6716, 'deletions': 5524, 'state': 'closed'}, {'id': 1752180961, 'number': 4312, 'closed': datetime.datetime(2024, 3, 9, 4, 51, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 3, 1, 18, 12, 6, tzinfo=datetime.timezone.utc), 'time_taken': 643181.0, 'time_delta': '7 days, 10:39:41', 'additions': 16, 'deletions': 25, 'state': 'closed'}, {'id': 1743242550, 'number': 4298, 'closed': datetime.datetime(2024, 2, 27, 12, 42, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 2, 26, 11, 49, 52, tzinfo=datetime.timezone.utc), 'time_taken': 89551.0, 'time_delta': '1 day, 0:52:31', 'additions': 6, 'deletions': 1, 'state': 'closed'}, {'id': 1734684594, 'number': 4276, 'closed': datetime.datetime(2024, 2, 20, 14, 34, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 2, 20, 13, 25, 26, tzinfo=datetime.timezone.utc), 'time_taken': 4155.0, 'time_delta': '1:09:15', 'additions': 145, 'deletions': 0, 'state': 'closed'}, {'id': 1733015556, 'number': 4271, 'closed': datetime.datetime(2024, 2, 19, 16, 8, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 2, 19, 14, 32, 33, tzinfo=datetime.timezone.utc), 'time_taken': 5730.0, 'time_delta': '1:35:30', 'additions': 104, 'deletions': 6, 'state': 'closed'}, {'id': 1728466994, 'number': 4241, 'closed': datetime.datetime(2024, 2, 16, 13, 10, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 2, 15, 20, 50, 52, tzinfo=datetime.timezone.utc), 'time_taken': 58792.0, 'time_delta': '16:19:52', 'additions': 668, 'deletions': 296, 'state': 'closed'}, {'id': 1725923942, 'number': 4229, 'closed': datetime.datetime(2024, 2, 14, 17, 46, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 2, 14, 15, 18, 7, tzinfo=datetime.timezone.utc), 'time_taken': 8901.0, 'time_delta': '2:28:21', 'additions': 551, 'deletions': 15, 'state': 'closed'}, {'id': 1723101477, 'number': 4219, 'closed': datetime.datetime(2024, 2, 13, 6, 36, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 2, 13, 4, 16, 49, tzinfo=datetime.timezone.utc), 'time_taken': 8365.0, 'time_delta': '2:19:25', 'additions': 145, 'deletions': 11, 'state': 'closed'}, {'id': 1715802392, 'number': 4194, 'closed': datetime.datetime(2024, 2, 8, 10, 12, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 2, 7, 14, 33, 3, tzinfo=datetime.timezone.utc), 'time_taken': 70777.0, 'time_delta': '19:39:37', 'additions': 36, 'deletions': 13, 'state': 'closed'}, {'id': 1715221543, 'number': 4190, 'closed': datetime.datetime(2024, 2, 7, 12, 9, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 2, 7, 9, 6, 49, tzinfo=datetime.timezone.utc), 'time_taken': 10986.0, 'time_delta': '3:03:06', 'additions': 471, 'deletions': 20, 'state': 'closed'}, {'id': 1711051922, 'number': 4187, 'closed': datetime.datetime(2024, 2, 8, 15, 10, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 2, 5, 7, 32, 51, tzinfo=datetime.timezone.utc), 'time_taken': 286661.0, 'time_delta': '3 days, 7:37:41', 'additions': 1132, 'deletions': 585, 'state': 'closed'}, {'id': 1707635399, 'number': 4179, 'closed': datetime.datetime(2024, 2, 2, 15, 50, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 2, 2, 4, 23, 27, tzinfo=datetime.timezone.utc), 'time_taken': 41228.0, 'time_delta': '11:27:08', 'additions': 726, 'deletions': 689, 'state': 'closed'}, {'id': 1705446864, 'number': 4171, 'closed': datetime.datetime(2024, 2, 1, 8, 44, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 2, 1, 6, 0, tzinfo=datetime.timezone.utc), 'time_taken': 9883.0, 'time_delta': '2:44:43', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 1705444761, 'number': 4170, 'closed': datetime.datetime(2024, 2, 1, 7, 11, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 2, 1, 5, 57, 45, tzinfo=datetime.timezone.utc), 'time_taken': 4417.0, 'time_delta': '1:13:37', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 1695366850, 'number': 4152, 'closed': datetime.datetime(2024, 1, 25, 13, 53, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 1, 25, 11, 5, 56, tzinfo=datetime.timezone.utc), 'time_taken': 10048.0, 'time_delta': '2:47:28', 'additions': 25, 'deletions': 5, 'state': 'closed'}, {'id': 1695327158, 'number': 4151, 'closed': datetime.datetime(2024, 1, 25, 13, 53, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 1, 25, 10, 42, 7, tzinfo=datetime.timezone.utc), 'time_taken': 11460.0, 'time_delta': '3:11:00', 'additions': 2088, 'deletions': 980, 'state': 'closed'}, {'id': 1693553461, 'number': 4148, 'closed': datetime.datetime(2024, 1, 24, 15, 25, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 1, 24, 11, 51, 17, tzinfo=datetime.timezone.utc), 'time_taken': 12824.0, 'time_delta': '3:33:44', 'additions': 17, 'deletions': 9, 'state': 'closed'}, {'id': 1689160528, 'number': 4137, 'closed': datetime.datetime(2024, 1, 22, 7, 36, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 1, 22, 6, 18, 19, tzinfo=datetime.timezone.utc), 'time_taken': 4689.0, 'time_delta': '1:18:09', 'additions': 3, 'deletions': 5, 'state': 'closed'}, {'id': 1686950879, 'number': 4129, 'closed': datetime.datetime(2024, 1, 20, 7, 48, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 1, 19, 13, 41, 57, tzinfo=datetime.timezone.utc), 'time_taken': 65182.0, 'time_delta': '18:06:22', 'additions': 491, 'deletions': 373, 'state': 'closed'}, {'id': 1682276580, 'number': 4116, 'closed': datetime.datetime(2024, 1, 17, 7, 16, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 1, 17, 5, 7, 6, tzinfo=datetime.timezone.utc), 'time_taken': 7773.0, 'time_delta': '2:09:33', 'additions': 271, 'deletions': 287, 'state': 'closed'}, {'id': 1680081756, 'number': 4113, 'closed': datetime.datetime(2024, 1, 16, 5, 55, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 1, 16, 3, 54, 9, tzinfo=datetime.timezone.utc), 'time_taken': 7261.0, 'time_delta': '2:01:01', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 1679698702, 'number': 4112, 'closed': datetime.datetime(2024, 1, 15, 23, 7, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 1, 15, 18, 46, 58, tzinfo=datetime.timezone.utc), 'time_taken': 15642.0, 'time_delta': '4:20:42', 'additions': 9, 'deletions': 2, 'state': 'closed'}, {'id': 1677926127, 'number': 4103, 'closed': datetime.datetime(2024, 2, 2, 22, 28, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 1, 13, 22, 45, 56, tzinfo=datetime.timezone.utc), 'time_taken': 1726936.0, 'time_delta': '19 days, 23:42:16', 'additions': 2862, 'deletions': 909, 'state': 'closed'}, {'id': 1677785261, 'number': 4102, 'closed': datetime.datetime(2024, 1, 13, 15, 2, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 1, 13, 14, 34, 32, tzinfo=datetime.timezone.utc), 'time_taken': 1682.0, 'time_delta': '0:28:02', 'additions': 2, 'deletions': 1, 'state': 'closed'}, {'id': 1676641478, 'number': 4099, 'closed': datetime.datetime(2024, 1, 13, 0, 16, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 1, 12, 14, 59, 39, tzinfo=datetime.timezone.utc), 'time_taken': 33419.0, 'time_delta': '9:16:59', 'additions': 33, 'deletions': 30, 'state': 'closed'}, {'id': 1674404863, 'number': 4096, 'closed': datetime.datetime(2024, 1, 14, 2, 45, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 1, 11, 12, 50, 3, tzinfo=datetime.timezone.utc), 'time_taken': 222945.0, 'time_delta': '2 days, 13:55:45', 'additions': 1174, 'deletions': 276, 'state': 'closed'}, {'id': 1672572721, 'number': 4093, 'closed': datetime.datetime(2024, 1, 10, 15, 54, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 1, 10, 14, 43, 28, tzinfo=datetime.timezone.utc), 'time_taken': 4247.0, 'time_delta': '1:10:47', 'additions': 41, 'deletions': 1, 'state': 'closed'}, {'id': 1672561973, 'number': 4092, 'closed': datetime.datetime(2024, 1, 10, 15, 44, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 1, 10, 14, 37, 22, tzinfo=datetime.timezone.utc), 'time_taken': 4010.0, 'time_delta': '1:06:50', 'additions': 566, 'deletions': 180, 'state': 'closed'}, {'id': 1647356833, 'number': 4035, 'closed': datetime.datetime(2023, 12, 17, 17, 11, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 12, 17, 15, 36, 12, tzinfo=datetime.timezone.utc), 'time_taken': 5732.0, 'time_delta': '1:35:32', 'additions': 13, 'deletions': 13, 'state': 'closed'}, {'id': 1636285881, 'number': 4026, 'closed': datetime.datetime(2023, 12, 8, 16, 37, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 12, 8, 14, 36, 12, tzinfo=datetime.timezone.utc), 'time_taken': 7263.0, 'time_delta': '2:01:03', 'additions': 4, 'deletions': 2, 'state': 'closed'}, {'id': 1635993221, 'number': 4025, 'closed': datetime.datetime(2023, 12, 10, 6, 14, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 12, 8, 11, 5, 4, tzinfo=datetime.timezone.utc), 'time_taken': 155350.0, 'time_delta': '1 day, 19:09:10', 'additions': 2054, 'deletions': 1881, 'state': 'closed'}, {'id': 1629443063, 'number': 4021, 'closed': datetime.datetime(2023, 12, 6, 5, 57, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 12, 5, 2, 33, 20, tzinfo=datetime.timezone.utc), 'time_taken': 98661.0, 'time_delta': '1 day, 3:24:21', 'additions': 1909, 'deletions': 1174, 'state': 'closed'}, {'id': 1619852801, 'number': 4008, 'closed': datetime.datetime(2023, 11, 29, 2, 29, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 11, 28, 12, 53, 1, tzinfo=datetime.timezone.utc), 'time_taken': 48960.0, 'time_delta': '13:36:00', 'additions': 429, 'deletions': 203, 'state': 'closed'}, {'id': 1607248532, 'number': 3985, 'closed': datetime.datetime(2023, 11, 19, 14, 58, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 11, 17, 22, 40, 39, tzinfo=datetime.timezone.utc), 'time_taken': 145091.0, 'time_delta': '1 day, 16:18:11', 'additions': 745, 'deletions': 74, 'state': 'closed'}, {'id': 1587051073, 'number': 3956, 'closed': datetime.datetime(2023, 11, 5, 9, 3, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 11, 4, 13, 8, 17, tzinfo=datetime.timezone.utc), 'time_taken': 71710.0, 'time_delta': '19:55:10', 'additions': 50, 'deletions': 31, 'state': 'closed'}, {'id': 1586784265, 'number': 3954, 'closed': datetime.datetime(2023, 11, 6, 15, 41, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 11, 3, 22, 31, 12, tzinfo=datetime.timezone.utc), 'time_taken': 234630.0, 'time_delta': '2 days, 17:10:30', 'additions': 265, 'deletions': 51, 'state': 'closed'}, {'id': 1586074102, 'number': 3953, 'closed': datetime.datetime(2023, 11, 4, 1, 56, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 11, 3, 13, 22, 15, tzinfo=datetime.timezone.utc), 'time_taken': 45248.0, 'time_delta': '12:34:08', 'additions': 25, 'deletions': 7, 'state': 'closed'}, {'id': 1584697658, 'number': 3949, 'closed': datetime.datetime(2023, 11, 3, 6, 12, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 11, 2, 16, 53, 49, tzinfo=datetime.timezone.utc), 'time_taken': 47914.0, 'time_delta': '13:18:34', 'additions': 7, 'deletions': 3, 'state': 'closed'}, {'id': 1580979263, 'number': 3945, 'closed': datetime.datetime(2023, 10, 31, 16, 0, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 10, 31, 13, 30, 57, tzinfo=datetime.timezone.utc), 'time_taken': 8973.0, 'time_delta': '2:29:33', 'additions': 63, 'deletions': 70, 'state': 'closed'}, {'id': 1577491029, 'number': 3941, 'closed': datetime.datetime(2023, 10, 29, 6, 7, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 10, 28, 9, 47, 14, tzinfo=datetime.timezone.utc), 'time_taken': 73198.0, 'time_delta': '20:19:58', 'additions': 401, 'deletions': 381, 'state': 'closed'}, {'id': 1563591332, 'number': 3931, 'closed': datetime.datetime(2023, 10, 19, 10, 46, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 10, 18, 22, 18, 32, tzinfo=datetime.timezone.utc), 'time_taken': 44859.0, 'time_delta': '12:27:39', 'additions': 94, 'deletions': 3, 'state': 'closed'}, {'id': 1562827300, 'number': 3930, 'closed': datetime.datetime(2023, 10, 18, 16, 25, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 10, 18, 14, 46, 40, tzinfo=datetime.timezone.utc), 'time_taken': 5946.0, 'time_delta': '1:39:06', 'additions': 4, 'deletions': 2, 'state': 'closed'}, {'id': 1556516960, 'number': 3923, 'closed': datetime.datetime(2023, 10, 14, 0, 43, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 10, 13, 21, 33, 53, tzinfo=datetime.timezone.utc), 'time_taken': 11405.0, 'time_delta': '3:10:05', 'additions': 73, 'deletions': 47, 'state': 'closed'}, {'id': 1511430450, 'number': 3848, 'closed': datetime.datetime(2023, 9, 28, 2, 15, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 9, 12, 6, 8, 44, tzinfo=datetime.timezone.utc), 'time_taken': 1368419.0, 'time_delta': '15 days, 20:06:59', 'additions': 5518, 'deletions': 4948, 'state': 'closed'}, {'id': 1502427371, 'number': 3833, 'closed': datetime.datetime(2023, 10, 21, 10, 51, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 9, 5, 9, 9, 3, tzinfo=datetime.timezone.utc), 'time_taken': 3980532.0, 'time_delta': '46 days, 1:42:12', 'additions': 1043, 'deletions': 164, 'state': 'closed'}, {'id': 1500179183, 'number': 3825, 'closed': datetime.datetime(2023, 9, 3, 9, 30, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 9, 3, 7, 19, 10, tzinfo=datetime.timezone.utc), 'time_taken': 7853.0, 'time_delta': '2:10:53', 'additions': 51, 'deletions': 32, 'state': 'closed'}, {'id': 1500164176, 'number': 3824, 'closed': datetime.datetime(2023, 9, 3, 7, 18, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 9, 3, 6, 5, 25, tzinfo=datetime.timezone.utc), 'time_taken': 4360.0, 'time_delta': '1:12:40', 'additions': 51, 'deletions': 32, 'state': 'closed'}, {'id': 1498691456, 'number': 3819, 'closed': datetime.datetime(2023, 9, 2, 7, 5, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 9, 1, 11, 13, 9, tzinfo=datetime.timezone.utc), 'time_taken': 71529.0, 'time_delta': '19:52:09', 'additions': 242, 'deletions': 184, 'state': 'closed'}, {'id': 1495224066, 'number': 3810, 'closed': datetime.datetime(2023, 8, 30, 12, 8, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 30, 9, 54, 35, tzinfo=datetime.timezone.utc), 'time_taken': 8016.0, 'time_delta': '2:13:36', 'additions': 241, 'deletions': 215, 'state': 'closed'}, {'id': 1494646043, 'number': 3807, 'closed': datetime.datetime(2023, 8, 30, 2, 10, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 30, 0, 29, 41, tzinfo=datetime.timezone.utc), 'time_taken': 6053.0, 'time_delta': '1:40:53', 'additions': 53, 'deletions': 29, 'state': 'closed'}, {'id': 1490838809, 'number': 3795, 'closed': datetime.datetime(2023, 8, 28, 23, 23, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 27, 2, 48, 19, tzinfo=datetime.timezone.utc), 'time_taken': 160530.0, 'time_delta': '1 day, 20:35:30', 'additions': 3190, 'deletions': 2, 'state': 'closed'}, {'id': 1490519835, 'number': 3792, 'closed': datetime.datetime(2023, 8, 26, 8, 25, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 26, 6, 22, 1, tzinfo=datetime.timezone.utc), 'time_taken': 7415.0, 'time_delta': '2:03:35', 'additions': 4, 'deletions': 4, 'state': 'closed'}, {'id': 1463699442, 'number': 3729, 'closed': datetime.datetime(2023, 8, 10, 3, 48, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 5, 6, 58, 19, tzinfo=datetime.timezone.utc), 'time_taken': 420630.0, 'time_delta': '4 days, 20:50:30', 'additions': 56, 'deletions': 59, 'state': 'closed'}, {'id': 1457524978, 'number': 3708, 'closed': datetime.datetime(2023, 8, 4, 2, 44, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 1, 7, 14, 7, tzinfo=datetime.timezone.utc), 'time_taken': 243000.0, 'time_delta': '2 days, 19:30:00', 'additions': 406, 'deletions': 270, 'state': 'closed'}, {'id': 1455679543, 'number': 3703, 'closed': datetime.datetime(2023, 8, 25, 15, 32, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 31, 7, 11, 36, tzinfo=datetime.timezone.utc), 'time_taken': 2190030.0, 'time_delta': '25 days, 8:20:30', 'additions': 14065, 'deletions': 7273, 'state': 'closed'}, {'id': 1455054231, 'number': 3698, 'closed': datetime.datetime(2023, 7, 30, 8, 16, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 30, 6, 36, 51, tzinfo=datetime.timezone.utc), 'time_taken': 6001.0, 'time_delta': '1:40:01', 'additions': 116, 'deletions': 20, 'state': 'closed'}, {'id': 1416527977, 'number': 3621, 'closed': datetime.datetime(2023, 7, 4, 11, 24, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 2, 2, 35, 21, tzinfo=datetime.timezone.utc), 'time_taken': 204570.0, 'time_delta': '2 days, 8:49:30', 'additions': 395, 'deletions': 385, 'state': 'closed'}, {'id': 1393919480, 'number': 3579, 'closed': datetime.datetime(2023, 6, 16, 1, 27, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 15, 11, 10, 44, tzinfo=datetime.timezone.utc), 'time_taken': 51418.0, 'time_delta': '14:16:58', 'additions': 4, 'deletions': 0, 'state': 'closed'}, {'id': 1384487931, 'number': 3565, 'closed': datetime.datetime(2023, 7, 31, 7, 9, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 8, 13, 44, 35, tzinfo=datetime.timezone.utc), 'time_taken': 4555511.0, 'time_delta': '52 days, 17:25:11', 'additions': 12722, 'deletions': 7146, 'state': 'closed'}, {'id': 1383752144, 'number': 3561, 'closed': datetime.datetime(2023, 6, 8, 9, 22, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 8, 5, 18, 13, tzinfo=datetime.timezone.utc), 'time_taken': 14635.0, 'time_delta': '4:03:55', 'additions': 442, 'deletions': 335, 'state': 'closed'}, {'id': 1380049815, 'number': 3557, 'closed': datetime.datetime(2023, 6, 6, 4, 53, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 6, 2, 32, 5, tzinfo=datetime.timezone.utc), 'time_taken': 8506.0, 'time_delta': '2:21:46', 'additions': 61, 'deletions': 6, 'state': 'closed'}, {'id': 1375057440, 'number': 3550, 'closed': datetime.datetime(2023, 6, 2, 5, 7, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 2, 3, 22, 3, tzinfo=datetime.timezone.utc), 'time_taken': 6349.0, 'time_delta': '1:45:49', 'additions': 2177, 'deletions': 2362, 'state': 'closed'}, {'id': 1375032934, 'number': 3549, 'closed': datetime.datetime(2023, 6, 5, 14, 41, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 2, 2, 45, 29, tzinfo=datetime.timezone.utc), 'time_taken': 302151.0, 'time_delta': '3 days, 11:55:51', 'additions': 747, 'deletions': 468, 'state': 'closed'}, {'id': 1365458497, 'number': 3530, 'closed': datetime.datetime(2023, 5, 30, 8, 40, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 26, 0, 1, 54, tzinfo=datetime.timezone.utc), 'time_taken': 376696.0, 'time_delta': '4 days, 8:38:16', 'additions': 618, 'deletions': 167, 'state': 'closed'}, {'id': 1361850628, 'number': 3526, 'closed': datetime.datetime(2023, 5, 24, 0, 49, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 23, 18, 17, 45, tzinfo=datetime.timezone.utc), 'time_taken': 23481.0, 'time_delta': '6:31:21', 'additions': 27, 'deletions': 19, 'state': 'closed'}, {'id': 1359076383, 'number': 3522, 'closed': datetime.datetime(2023, 5, 23, 1, 52, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 22, 11, 33, 5, tzinfo=datetime.timezone.utc), 'time_taken': 51582.0, 'time_delta': '14:19:42', 'additions': 10, 'deletions': 10, 'state': 'closed'}, {'id': 1352665437, 'number': 3515, 'closed': datetime.datetime(2023, 5, 16, 22, 28, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 16, 14, 56, 27, tzinfo=datetime.timezone.utc), 'time_taken': 27133.0, 'time_delta': '7:32:13', 'additions': 918, 'deletions': 86, 'state': 'closed'}, {'id': 1351120124, 'number': 3514, 'closed': datetime.datetime(2023, 5, 16, 2, 27, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 15, 16, 47, 31, tzinfo=datetime.timezone.utc), 'time_taken': 34776.0, 'time_delta': '9:39:36', 'additions': 207, 'deletions': 239, 'state': 'closed'}, {'id': 1350713479, 'number': 3513, 'closed': datetime.datetime(2023, 5, 16, 2, 55, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 15, 12, 27, 44, tzinfo=datetime.timezone.utc), 'time_taken': 52055.0, 'time_delta': '14:27:35', 'additions': 61, 'deletions': 45, 'state': 'closed'}, {'id': 1350379553, 'number': 3512, 'closed': datetime.datetime(2023, 5, 15, 10, 7, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 15, 8, 54, 2, tzinfo=datetime.timezone.utc), 'time_taken': 4380.0, 'time_delta': '1:13:00', 'additions': 5, 'deletions': 2, 'state': 'closed'}, {'id': 1349906797, 'number': 3511, 'closed': datetime.datetime(2023, 5, 15, 4, 11, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 14, 21, 9, 41, tzinfo=datetime.timezone.utc), 'time_taken': 25319.0, 'time_delta': '7:01:59', 'additions': 117, 'deletions': 31, 'state': 'closed'}, {'id': 1324328276, 'number': 3478, 'closed': datetime.datetime(2024, 1, 13, 5, 59, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 23, 10, 21, 3, tzinfo=datetime.timezone.utc), 'time_taken': 22880333.0, 'time_delta': '264 days, 19:38:53', 'additions': 5861, 'deletions': 1, 'state': 'closed'}, {'id': 1315855719, 'number': 3463, 'closed': datetime.datetime(2023, 6, 8, 11, 33, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 17, 2, 35, 44, tzinfo=datetime.timezone.utc), 'time_taken': 4525072.0, 'time_delta': '52 days, 8:57:52', 'additions': 2195, 'deletions': 5578, 'state': 'closed'}, {'id': 1260691816, 'number': 3413, 'closed': datetime.datetime(2023, 3, 5, 4, 54, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 2, 16, 1, 21, tzinfo=datetime.timezone.utc), 'time_taken': 219184.0, 'time_delta': '2 days, 12:53:04', 'additions': 570, 'deletions': 383, 'state': 'closed'}, {'id': 1244375903, 'number': 3370, 'closed': datetime.datetime(2023, 2, 17, 0, 20, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 2, 16, 22, 14, 48, tzinfo=datetime.timezone.utc), 'time_taken': 7546.0, 'time_delta': '2:05:46', 'additions': 5, 'deletions': 0, 'state': 'closed'}, {'id': 1044862237, 'number': 2999, 'closed': datetime.datetime(2022, 12, 14, 12, 13, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 2, 12, 29, 23, tzinfo=datetime.timezone.utc), 'time_taken': 8898239.0, 'time_delta': '102 days, 23:43:59', 'additions': 1259, 'deletions': 139, 'state': 'closed'}, {'id': 1032104082, 'number': 2949, 'closed': datetime.datetime(2022, 8, 29, 14, 48, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 21, 18, 41, 7, tzinfo=datetime.timezone.utc), 'time_taken': 677237.0, 'time_delta': '7 days, 20:07:17', 'additions': 2025, 'deletions': 2107, 'state': 'closed'}, {'id': 1031773572, 'number': 2943, 'closed': datetime.datetime(2022, 8, 22, 22, 56, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 20, 12, 15, 15, tzinfo=datetime.timezone.utc), 'time_taken': 211295.0, 'time_delta': '2 days, 10:41:35', 'additions': 124, 'deletions': 87, 'state': 'closed'}, {'id': 1025648832, 'number': 2916, 'closed': datetime.datetime(2022, 8, 22, 0, 16, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 13, 19, 8, 53, tzinfo=datetime.timezone.utc), 'time_taken': 709641.0, 'time_delta': '8 days, 5:07:21', 'additions': 2119, 'deletions': 920, 'state': 'closed'}, {'id': 1024223457, 'number': 2909, 'closed': datetime.datetime(2022, 8, 12, 1, 26, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 11, 19, 9, 15, tzinfo=datetime.timezone.utc), 'time_taken': 22631.0, 'time_delta': '6:17:11', 'additions': 25, 'deletions': 7, 'state': 'closed'}, {'id': 1019664350, 'number': 2887, 'closed': datetime.datetime(2022, 8, 8, 15, 57, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 8, 0, 7, 52, tzinfo=datetime.timezone.utc), 'time_taken': 56978.0, 'time_delta': '15:49:38', 'additions': 17, 'deletions': 6, 'state': 'closed'}, {'id': 1019596934, 'number': 2886, 'closed': datetime.datetime(2022, 8, 7, 19, 37, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 7, 17, 36, 13, tzinfo=datetime.timezone.utc), 'time_taken': 7298.0, 'time_delta': '2:01:38', 'additions': 5, 'deletions': 0, 'state': 'closed'}, {'id': 1019585290, 'number': 2885, 'closed': datetime.datetime(2022, 8, 9, 1, 26, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 7, 16, 28, 15, tzinfo=datetime.timezone.utc), 'time_taken': 118693.0, 'time_delta': '1 day, 8:58:13', 'additions': 406, 'deletions': 385, 'state': 'closed'}, {'id': 1019298723, 'number': 2880, 'closed': datetime.datetime(2022, 8, 6, 16, 28, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 6, 8, 51, 52, tzinfo=datetime.timezone.utc), 'time_taken': 27369.0, 'time_delta': '7:36:09', 'additions': 77, 'deletions': 115, 'state': 'closed'}, {'id': 1019012692, 'number': 2876, 'closed': datetime.datetime(2022, 8, 5, 21, 40, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 5, 19, 10, 17, tzinfo=datetime.timezone.utc), 'time_taken': 9011.0, 'time_delta': '2:30:11', 'additions': 8, 'deletions': 0, 'state': 'closed'}, {'id': 1012059335, 'number': 2853, 'closed': datetime.datetime(2022, 8, 4, 1, 11, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 29, 14, 44, 43, tzinfo=datetime.timezone.utc), 'time_taken': 469599.0, 'time_delta': '5 days, 10:26:39', 'additions': 1728, 'deletions': 677, 'state': 'closed'}, {'id': 1010438435, 'number': 2849, 'closed': datetime.datetime(2022, 7, 29, 1, 11, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 28, 7, 5, 53, tzinfo=datetime.timezone.utc), 'time_taken': 65162.0, 'time_delta': '18:06:02', 'additions': 89, 'deletions': 71, 'state': 'closed'}, {'id': 1008209106, 'number': 2841, 'closed': datetime.datetime(2022, 7, 27, 16, 24, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 26, 8, 26, 38, tzinfo=datetime.timezone.utc), 'time_taken': 115068.0, 'time_delta': '1 day, 7:57:48', 'additions': 344, 'deletions': 289, 'state': 'closed'}, {'id': 998592872, 'number': 2813, 'closed': datetime.datetime(2022, 7, 25, 7, 15, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 17, 8, 29, 45, tzinfo=datetime.timezone.utc), 'time_taken': 686753.0, 'time_delta': '7 days, 22:45:53', 'additions': 1106, 'deletions': 490, 'state': 'closed'}, {'id': 992468083, 'number': 2800, 'closed': datetime.datetime(2022, 7, 12, 14, 11, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 10, 17, 45, 33, tzinfo=datetime.timezone.utc), 'time_taken': 159971.0, 'time_delta': '1 day, 20:26:11', 'additions': 189, 'deletions': 114, 'state': 'closed'}, {'id': 980050868, 'number': 2746, 'closed': datetime.datetime(2022, 7, 9, 0, 10, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 27, 13, 13, 11, tzinfo=datetime.timezone.utc), 'time_taken': 989815.0, 'time_delta': '11 days, 10:56:55', 'additions': 700, 'deletions': 1409, 'state': 'closed'}, {'id': 971642585, 'number': 2710, 'closed': datetime.datetime(2022, 6, 21, 2, 49, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 20, 1, 53, 41, tzinfo=datetime.timezone.utc), 'time_taken': 89761.0, 'time_delta': '1 day, 0:56:01', 'additions': 347, 'deletions': 234, 'state': 'closed'}, {'id': 943667783, 'number': 2630, 'closed': datetime.datetime(2022, 5, 24, 11, 35, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 22, 14, 26, 32, tzinfo=datetime.timezone.utc), 'time_taken': 162538.0, 'time_delta': '1 day, 21:08:58', 'additions': 46, 'deletions': 16, 'state': 'closed'}, {'id': 938661124, 'number': 2622, 'closed': datetime.datetime(2022, 5, 17, 14, 5, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 17, 11, 2, 17, tzinfo=datetime.timezone.utc), 'time_taken': 10985.0, 'time_delta': '3:03:05', 'additions': 75, 'deletions': 59, 'state': 'closed'}, {'id': 934666828, 'number': 2607, 'closed': datetime.datetime(2022, 5, 13, 12, 17, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 12, 10, 41, 38, tzinfo=datetime.timezone.utc), 'time_taken': 92178.0, 'time_delta': '1 day, 1:36:18', 'additions': 257, 'deletions': 185, 'state': 'closed'}, {'id': 924761519, 'number': 2574, 'closed': datetime.datetime(2022, 5, 6, 8, 18, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 1, 0, 50, 48, tzinfo=datetime.timezone.utc), 'time_taken': 458853.0, 'time_delta': '5 days, 7:27:33', 'additions': 465, 'deletions': 304, 'state': 'closed'}, {'id': 924732733, 'number': 2573, 'closed': datetime.datetime(2022, 5, 7, 1, 7, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 30, 21, 49, 25, tzinfo=datetime.timezone.utc), 'time_taken': 530258.0, 'time_delta': '6 days, 3:17:38', 'additions': 167, 'deletions': 105, 'state': 'closed'}, {'id': 919669121, 'number': 2567, 'closed': datetime.datetime(2022, 4, 30, 20, 22, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 26, 17, 3, 32, tzinfo=datetime.timezone.utc), 'time_taken': 357555.0, 'time_delta': '4 days, 3:19:15', 'additions': 55, 'deletions': 26, 'state': 'closed'}, {'id': 919160557, 'number': 2565, 'closed': datetime.datetime(2022, 4, 26, 21, 44, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 26, 9, 21, 31, tzinfo=datetime.timezone.utc), 'time_taken': 44594.0, 'time_delta': '12:23:14', 'additions': 231, 'deletions': 176, 'state': 'closed'}, {'id': 905639348, 'number': 2534, 'closed': datetime.datetime(2022, 4, 12, 0, 6, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 11, 7, 42, 46, tzinfo=datetime.timezone.utc), 'time_taken': 59016.0, 'time_delta': '16:23:36', 'additions': 433, 'deletions': 191, 'state': 'closed'}, {'id': 902652766, 'number': 2515, 'closed': datetime.datetime(2022, 4, 9, 18, 49, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 7, 11, 55, 45, tzinfo=datetime.timezone.utc), 'time_taken': 197597.0, 'time_delta': '2 days, 6:53:17', 'additions': 485, 'deletions': 205, 'state': 'closed'}, {'id': 881795259, 'number': 2418, 'closed': datetime.datetime(2022, 3, 22, 1, 12, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 16, 20, 52, 52, tzinfo=datetime.timezone.utc), 'time_taken': 447560.0, 'time_delta': '5 days, 4:19:20', 'additions': 651, 'deletions': 350, 'state': 'closed'}, {'id': 834531123, 'number': 2263, 'closed': datetime.datetime(2022, 5, 9, 14, 31, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 1, 28, 14, 58, 8, tzinfo=datetime.timezone.utc), 'time_taken': 8724800.0, 'time_delta': '100 days, 23:33:20', 'additions': 3933, 'deletions': 2560, 'state': 'closed'}, {'id': 826116722, 'number': 2222, 'closed': datetime.datetime(2022, 1, 25, 9, 14, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 1, 19, 5, 7, 31, tzinfo=datetime.timezone.utc), 'time_taken': 533243.0, 'time_delta': '6 days, 4:07:23', 'additions': 96, 'deletions': 24, 'state': 'closed'}, {'id': 826041682, 'number': 2221, 'closed': datetime.datetime(2022, 1, 19, 5, 8, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 1, 19, 2, 14, 45, tzinfo=datetime.timezone.utc), 'time_taken': 10439.0, 'time_delta': '2:53:59', 'additions': 4, 'deletions': 0, 'state': 'closed'}, {'id': 808344179, 'number': 2131, 'closed': datetime.datetime(2021, 12, 23, 6, 3, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 12, 22, 12, 11, 48, tzinfo=datetime.timezone.utc), 'time_taken': 64304.0, 'time_delta': '17:51:44', 'additions': 141, 'deletions': 111, 'state': 'closed'}, {'id': 731062332, 'number': 1643, 'closed': datetime.datetime(2021, 11, 22, 1, 48, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 10, 0, 34, 46, tzinfo=datetime.timezone.utc), 'time_taken': 6311652.0, 'time_delta': '73 days, 1:14:12', 'additions': 1069, 'deletions': 25, 'state': 'closed'}, {'id': 698467697, 'number': 1370, 'closed': datetime.datetime(2021, 7, 28, 10, 46, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 28, 8, 14, 44, tzinfo=datetime.timezone.utc), 'time_taken': 9082.0, 'time_delta': '2:31:22', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 695918793, 'number': 1352, 'closed': datetime.datetime(2021, 7, 27, 6, 43, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 23, 12, 51, 38, tzinfo=datetime.timezone.utc), 'time_taken': 323494.0, 'time_delta': '3 days, 17:51:34', 'additions': 80, 'deletions': 47, 'state': 'closed'}]"
