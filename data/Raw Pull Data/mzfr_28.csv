pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
420031933,Add support for postgres client. ,"I have also formatted some code in the server.py file.

@afeena @glaslos Can you please take a look at the table schema and let me know if any changes is needed in this. If not then I'll continue the work.",True,388,https://api.github.com/repos/mushorg/tanner/pulls/388,https://github.com/mushorg/tanner/pull/388,closed,322,47,8,24,5,88,0,0,[],2020-05-19 10:39:55+00:00,2020-06-06 18:34:29+00:00,1583674.0,"18 days, 7:54:34","[{'comment_id': 427536844, 'comment_body': 'should not be here: 1) we have more types than index 2) we can count using paths table', 'comment_created': datetime.datetime(2020, 5, 19, 19, 9, 55, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}, {'comment_id': 427537320, 'comment_body': ""What about other types? tool? crawler? and it's probability - so definitely not int "", 'comment_created': datetime.datetime(2020, 5, 19, 19, 10, 31, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}, {'comment_id': 427537818, 'comment_body': 'we might change type on int, use enum here', 'comment_created': datetime.datetime(2020, 5, 19, 19, 11, 18, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}, {'comment_id': 427537918, 'comment_body': 'timestamp?', 'comment_created': datetime.datetime(2020, 5, 19, 19, 11, 28, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}, {'comment_id': 427538794, 'comment_body': 'For me looks like mixing of connection creation and table routine', 'comment_created': datetime.datetime(2020, 5, 19, 19, 13, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}, {'comment_id': 427541722, 'comment_body': 'https://www.postgresql.org/docs/9.1/datatype-uuid.html', 'comment_created': datetime.datetime(2020, 5, 19, 19, 18, 19, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}, {'comment_id': 427542360, 'comment_body': ""please make the table's name either all with first capital letter or all lowercase :D"", 'comment_created': datetime.datetime(2020, 5, 19, 19, 19, 28, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}, {'comment_id': 427542494, 'comment_body': ""same here, I think it's better to use uuid type"", 'comment_created': datetime.datetime(2020, 5, 19, 19, 19, 44, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}, {'comment_id': 427543595, 'comment_body': 'https://www.postgresql.org/docs/9.1/datatype-net-types.html', 'comment_created': datetime.datetime(2020, 5, 19, 19, 21, 33, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}, {'comment_id': 427902104, 'comment_body': 'In paths we have a timestamp \r\n\r\n![image](https://user-images.githubusercontent.com/16623935/82435353-ce583e80-9ab1-11ea-970b-97bcacfdb908.png)\r\n', 'comment_created': datetime.datetime(2020, 5, 20, 10, 23, 11, tzinfo=datetime.timezone.utc), 'commenter': 'mzfr', 'type': 'User'}, {'comment_id': 427902667, 'comment_body': 'so should I remove this column?', 'comment_created': datetime.datetime(2020, 5, 20, 10, 24, 15, tzinfo=datetime.timezone.utc), 'commenter': 'mzfr', 'type': 'User'}, {'comment_id': 427906177, 'comment_body': ""Yes that can be made float but how do I decide what all columns are needed? I mean in some sessions there is only `user` and in some it's `user` and `tool`."", 'comment_created': datetime.datetime(2020, 5, 20, 10, 30, 23, tzinfo=datetime.timezone.utc), 'commenter': 'mzfr', 'type': 'User'}, {'comment_id': 427918342, 'comment_body': 'This was the way recommended in the aiopg docs. So should I make a new function called `create_tables` and pass the `pg_client` object to that?', 'comment_created': datetime.datetime(2020, 5, 20, 10, 53, 42, tzinfo=datetime.timezone.utc), 'commenter': 'mzfr', 'type': 'User'}, {'comment_id': 428922837, 'comment_body': 'I think you can do it', 'comment_created': datetime.datetime(2020, 5, 21, 21, 24, 1, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}, {'comment_id': 428923195, 'comment_body': 'We can store all columns, we have finite set of possible owners, so some of them might be just 0', 'comment_created': datetime.datetime(2020, 5, 21, 21, 24, 46, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}, {'comment_id': 428923514, 'comment_body': '@mzfr I meant the type of timestamp :)', 'comment_created': datetime.datetime(2020, 5, 21, 21, 25, 23, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}, {'comment_id': 428938293, 'comment_body': 'oh :facepalm: ', 'comment_created': datetime.datetime(2020, 5, 21, 21, 56, 52, tzinfo=datetime.timezone.utc), 'commenter': 'mzfr', 'type': 'User'}, {'comment_id': 428938591, 'comment_body': ""ok so I'll just make the columns and they will be nullable"", 'comment_created': datetime.datetime(2020, 5, 21, 21, 57, 42, tzinfo=datetime.timezone.utc), 'commenter': 'mzfr', 'type': 'User'}, {'comment_id': 429522786, 'comment_body': ""maybe it's better to have it also as UUID type?"", 'comment_created': datetime.datetime(2020, 5, 23, 7, 25, 19, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}, {'comment_id': 429536506, 'comment_body': ""This shouldn't be a primary key but a foreign key constraint to the `sess_uuid` in the `session_data` table.\r\nBesides that, a primary key is always not null and unique."", 'comment_created': datetime.datetime(2020, 5, 23, 11, 7, 23, tzinfo=datetime.timezone.utc), 'commenter': 'glaslos', 'type': 'User'}, {'comment_id': 429536581, 'comment_body': ""Here you are using a name which duplicates the type, use the opportunity to describe the purpose of this field. I assume something like `create_at` maybe? You can also give it a default value like `now()` so you don't have to create it client side and let the database populate it for you."", 'comment_created': datetime.datetime(2020, 5, 23, 11, 8, 54, tzinfo=datetime.timezone.utc), 'commenter': 'glaslos', 'type': 'User'}, {'comment_id': 429536637, 'comment_body': 'Create an additional table with attack types. Integer id and a string with description (e.g. sqli, xss...) and the add a foreign key constraint here.', 'comment_created': datetime.datetime(2020, 5, 23, 11, 10, tzinfo=datetime.timezone.utc), 'commenter': 'glaslos', 'type': 'User'}, {'comment_id': 429536671, 'comment_body': 'foreign key constraint', 'comment_created': datetime.datetime(2020, 5, 23, 11, 10, 28, tzinfo=datetime.timezone.utc), 'commenter': 'glaslos', 'type': 'User'}, {'comment_id': 429536721, 'comment_body': ""don't you have multiple key, value pairs per session? Your `sess_uuid` can't be unique and primary then."", 'comment_created': datetime.datetime(2020, 5, 23, 11, 11, 8, tzinfo=datetime.timezone.utc), 'commenter': 'glaslos', 'type': 'User'}, {'comment_id': 429536768, 'comment_body': 'How about calling this `sessions`?', 'comment_created': datetime.datetime(2020, 5, 23, 11, 12, 5, tzinfo=datetime.timezone.utc), 'commenter': 'glaslos', 'type': 'User'}, {'comment_id': 429536876, 'comment_body': ""This looks like `tablename_type` naming to me. Pick something which isn't already there. This field is used to identify a session. Typically we would call this field `id`. `NOT NULL` is given for the primary key."", 'comment_created': datetime.datetime(2020, 5, 23, 11, 13, 25, tzinfo=datetime.timezone.utc), 'commenter': 'glaslos', 'type': 'User'}, {'comment_id': 429536949, 'comment_body': 'call this `sensor_id`. Call me an optimist, but we might have other sensors in the future using Tanner as a service ;)', 'comment_created': datetime.datetime(2020, 5, 23, 11, 14, 11, tzinfo=datetime.timezone.utc), 'commenter': 'glaslos', 'type': 'User'}, {'comment_id': 429537038, 'comment_body': 'use `source` and `destination` to identify an IP address origin. ', 'comment_created': datetime.datetime(2020, 5, 23, 11, 15, 38, tzinfo=datetime.timezone.utc), 'commenter': 'glaslos', 'type': 'User'}, {'comment_id': 429537074, 'comment_body': 'use `now()` as default. start and end should not be null.', 'comment_created': datetime.datetime(2020, 5, 23, 11, 16, 5, tzinfo=datetime.timezone.utc), 'commenter': 'glaslos', 'type': 'User'}, {'comment_id': 429537087, 'comment_body': '@afeena how about putting location into a separate table?', 'comment_created': datetime.datetime(2020, 5, 23, 11, 16, 24, tzinfo=datetime.timezone.utc), 'commenter': 'glaslos', 'type': 'User'}, {'comment_id': 429537258, 'comment_body': '```suggestion\r\n                    ""requests_per_second"" FLOAT NULL,\r\n```\r\nyou could also abbreviate it to `rps` and add a comment explaining the field: `comment on column rps is \'requests per second\';`', 'comment_created': datetime.datetime(2020, 5, 23, 11, 19, 38, tzinfo=datetime.timezone.utc), 'commenter': 'glaslos', 'type': 'User'}, {'comment_id': 429537446, 'comment_body': 'you want to make the reference the other way around. From the auxiliary tables to the main table using the session id.', 'comment_created': datetime.datetime(2020, 5, 23, 11, 22, 39, tzinfo=datetime.timezone.utc), 'commenter': 'glaslos', 'type': 'User'}, {'comment_id': 429537483, 'comment_body': 'primary key has an index by default.', 'comment_created': datetime.datetime(2020, 5, 23, 11, 23, 16, tzinfo=datetime.timezone.utc), 'commenter': 'glaslos', 'type': 'User'}, {'comment_id': 429537526, 'comment_body': ""this should be a separate table IMO. you don't want to add a new column whenever we add a new owner type. "", 'comment_created': datetime.datetime(2020, 5, 23, 11, 24, 15, tzinfo=datetime.timezone.utc), 'commenter': 'glaslos', 'type': 'User'}, {'comment_id': 429537625, 'comment_body': 'what about other errors?', 'comment_created': datetime.datetime(2020, 5, 23, 11, 25, 15, tzinfo=datetime.timezone.utc), 'commenter': 'glaslos', 'type': 'User'}, {'comment_id': 429540190, 'comment_body': '@afeena  suggested that we can have a dictionary which resolves the attack type to an integer something like:\r\n```json\r\n{\r\n\t""sqli"":1,\r\n\t""xss"":2,\r\n}\r\n```\r\nAnd in DB we can store the integer, since it will be cheaper to store.', 'comment_created': datetime.datetime(2020, 5, 23, 12, 6, 14, tzinfo=datetime.timezone.utc), 'commenter': 'mzfr', 'type': 'User'}, {'comment_id': 429540404, 'comment_body': ""if we use NOW() for both start and end then do we need to provide the `NOT NULL`? Asking since now would always provide the value so it won't be null right?"", 'comment_created': datetime.datetime(2020, 5, 23, 12, 9, 32, tzinfo=datetime.timezone.utc), 'commenter': 'mzfr', 'type': 'User'}, {'comment_id': 429540433, 'comment_body': 'yeah, same suggestions except in mine the dictionary will be in a table as well. On startup you can fetch that table and populate your in memory dictionary.', 'comment_created': datetime.datetime(2020, 5, 23, 12, 10, 2, tzinfo=datetime.timezone.utc), 'commenter': 'glaslos', 'type': 'User'}, {'comment_id': 429540788, 'comment_body': ""Correct, with DEFAULT you don't need NOT NULL except if you want to prevent the client from explicitly setting it to null.\r\nNot sure if we want to implicitly set the end time by using `DEFAULT now()` or have it NULL until we explicitly end the session. What do you think?"", 'comment_created': datetime.datetime(2020, 5, 23, 12, 15, tzinfo=datetime.timezone.utc), 'commenter': 'glaslos', 'type': 'User'}, {'comment_id': 429559857, 'comment_body': ""I don't see a problem in any of the cases. "", 'comment_created': datetime.datetime(2020, 5, 23, 16, 30, 29, tzinfo=datetime.timezone.utc), 'commenter': 'mzfr', 'type': 'User'}, {'comment_id': 429634612, 'comment_body': 'This should be a UUID as well', 'comment_created': datetime.datetime(2020, 5, 24, 13, 4, 27, tzinfo=datetime.timezone.utc), 'commenter': 'glaslos', 'type': 'User'}, {'comment_id': 429634737, 'comment_body': '```suggestion\r\n                    ""session_id"" UUID REFERENCES sessions(id),\r\n```', 'comment_created': datetime.datetime(2020, 5, 24, 13, 5, 52, tzinfo=datetime.timezone.utc), 'commenter': 'glaslos', 'type': 'User'}, {'comment_id': 429634770, 'comment_body': 'default now()', 'comment_created': datetime.datetime(2020, 5, 24, 13, 6, 7, tzinfo=datetime.timezone.utc), 'commenter': 'glaslos', 'type': 'User'}, {'comment_id': 429634817, 'comment_body': '```suggestion\r\n                    ""session_id"" UUID REFERENCES sessions(id),\r\n```', 'comment_created': datetime.datetime(2020, 5, 24, 13, 6, 53, tzinfo=datetime.timezone.utc), 'commenter': 'glaslos', 'type': 'User'}, {'comment_id': 429634895, 'comment_body': 'why are you adding those indexes?', 'comment_created': datetime.datetime(2020, 5, 24, 13, 7, 42, tzinfo=datetime.timezone.utc), 'commenter': 'glaslos', 'type': 'User'}, {'comment_id': 429635894, 'comment_body': 'to speed up the process of searching. Like if we want to take out all the sessions having a single snare_id then we can do that.', 'comment_created': datetime.datetime(2020, 5, 24, 13, 18, 55, tzinfo=datetime.timezone.utc), 'commenter': 'mzfr', 'type': 'User'}, {'comment_id': 429652850, 'comment_body': ""I thought about this table in the beginning when I started to think about schema. But then I realised that we create attack type table from tanner and convert types inside tanner to put in into the table and then we fetch it from table... For me, it's a little bit redundant.\r\n\r\nI prefer to have the Enum class in tanner which represents attack types and we can easily do conversion inside tanner. But if you think it would be better to have a table, I have no complains"", 'comment_created': datetime.datetime(2020, 5, 24, 16, 25, 7, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}, {'comment_id': 429653352, 'comment_body': 'No, sounds good to me. Adding that table later would be easy 👍 ', 'comment_created': datetime.datetime(2020, 5, 24, 16, 31, 15, tzinfo=datetime.timezone.utc), 'commenter': 'glaslos', 'type': 'User'}, {'comment_id': 429653759, 'comment_body': ""@glaslos That's a good point!"", 'comment_created': datetime.datetime(2020, 5, 24, 16, 36, 29, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}, {'comment_id': 429654633, 'comment_body': '@glaslos Sure, if on the stage of requests implementation it would be easier to have separate table, we always can create it :)', 'comment_created': datetime.datetime(2020, 5, 24, 16, 47, 56, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}, {'comment_id': 429654950, 'comment_body': ""@glaslos I just worry that it might slow down the requests: if we store like this, instead of joining the tables, when we want to filter sessions by location, we just use simple `where`.\r\nI don't think we need location info without session, what do you think?"", 'comment_created': datetime.datetime(2020, 5, 24, 16, 52, 26, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}, {'comment_id': 429669980, 'comment_body': ""fine by me. I usually don't care too much about location information. We can still refactor once we feel like the sessions table is too busy"", 'comment_created': datetime.datetime(2020, 5, 24, 19, 59, 56, tzinfo=datetime.timezone.utc), 'commenter': 'glaslos', 'type': 'User'}, {'comment_id': 430059180, 'comment_body': 'if we agree that we use redis to store intermediate sessions, why we need postgres client here?', 'comment_created': datetime.datetime(2020, 5, 25, 19, 50, 18, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}, {'comment_id': 430059344, 'comment_body': ""why it's here?"", 'comment_created': datetime.datetime(2020, 5, 25, 19, 50, 57, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}, {'comment_id': 430193684, 'comment_body': 'I think because there are lines in the `delete_session` function like:\r\n\r\n```python\r\ntry:\r\nawait redis_client.set(sess.get_uuid(), sess.to_json())\r\nawait self.analyzer.analyze(sess.get_uuid(), redis_client, pg_client)\r\n```\r\nso I think it analyze them first and then in `save_sessions` function of `session_analyzer` we have deletion of the said key.\r\n', 'comment_created': datetime.datetime(2020, 5, 26, 6, 56, 42, tzinfo=datetime.timezone.utc), 'commenter': 'mzfr', 'type': 'User'}, {'comment_id': 430193994, 'comment_body': ""oh this is just while testing. I'll remove the query or will use sqlalchemy for the execution of the query"", 'comment_created': datetime.datetime(2020, 5, 26, 6, 57, 23, tzinfo=datetime.timezone.utc), 'commenter': 'mzfr', 'type': 'User'}, {'comment_id': 430429425, 'comment_body': 'Ok :) please use something like TODO to highlight the parts which are still work in progress :) ', 'comment_created': datetime.datetime(2020, 5, 26, 13, 53, 21, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}, {'comment_id': 430429718, 'comment_body': 'My bad!', 'comment_created': datetime.datetime(2020, 5, 26, 13, 53, 44, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}, {'comment_id': 430430606, 'comment_body': 'But I think we can rewrite this part and make analyzer as a separate background task, to avoid using to DB connections in one place', 'comment_created': datetime.datetime(2020, 5, 26, 13, 54, 56, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}, {'comment_id': 432737123, 'comment_body': 'please use more specific column names, smth like ""owner_type""/""probability""', 'comment_created': datetime.datetime(2020, 5, 29, 21, 10, 42, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}, {'comment_id': 432737999, 'comment_body': 'Maybe we can do it like aiohttp suggests? https://docs.aiohttp.org/en/stable/faq.html#where-do-i-put-my-database-connection-so-handlers-can-access-it', 'comment_created': datetime.datetime(2020, 5, 29, 21, 12, 58, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}, {'comment_id': 432741605, 'comment_body': 'you have a class for schema creation, you can make it more general and fetch the columns from it', 'comment_created': datetime.datetime(2020, 5, 29, 21, 22, 44, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}, {'comment_id': 432742562, 'comment_body': ""I don't like such code duplication. Try to make only one request and put the data into unified format, you can use `get` on location and set default value if some data is not available"", 'comment_created': datetime.datetime(2020, 5, 29, 21, 25, 27, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}, {'comment_id': 432746054, 'comment_body': 'I think using placeholders will be better than using format\r\nhttps://aiopg.readthedocs.io/en/stable/core.html#aiopg.Cursor.execute\r\nhttps://www.psycopg.org/docs/usage.html#query-parameters', 'comment_created': datetime.datetime(2020, 5, 29, 21, 35, 21, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}, {'comment_id': 432814055, 'comment_body': 'Placeholders like `%s`  or like `%(id)s` this?', 'comment_created': datetime.datetime(2020, 5, 30, 5, 57, 13, tzinfo=datetime.timezone.utc), 'commenter': 'mzfr', 'type': 'User'}, {'comment_id': 432819380, 'comment_body': 'https://docs.python.org/3.7/library/enum.html', 'comment_created': datetime.datetime(2020, 5, 30, 7, 32, 56, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}, {'comment_id': 433079721, 'comment_body': 'you should not build the queries inside analysis. You have a class, use this class to incapsulate all the operations with DB. Ideally, analysis class should not know ANYTHING about db structure and queries ', 'comment_created': datetime.datetime(2020, 6, 1, 7, 21, 37, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}, {'comment_id': 433081843, 'comment_body': 'please differentiate between class and function. I prefer to have a class as a Noun entity which consists of actions: \r\ne.g. \r\n```\r\nclass DBUtils <Noun>:\r\n<...>\r\n    def create_tables <action (verb)>:\r\n        <...>\r\n\r\n```', 'comment_created': datetime.datetime(2020, 6, 1, 7, 27, 35, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}, {'comment_id': 433082782, 'comment_body': 'I suggest you to collect everything which related to our tanner DB inside one class. What is the purpose of the separate class? And why you have only constants here instead of doing queries?', 'comment_created': datetime.datetime(2020, 6, 1, 7, 29, 57, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}, {'comment_id': 433084868, 'comment_body': 'what about aiopg exceptions?\r\nhttps://aiopg.readthedocs.io/en/stable/core.html#exceptions', 'comment_created': datetime.datetime(2020, 6, 1, 7, 35, 45, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}, {'comment_id': 433085545, 'comment_body': 'same here. Please move all the queries to DB class. ', 'comment_created': datetime.datetime(2020, 6, 1, 7, 37, 32, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}, {'comment_id': 433087832, 'comment_body': '@mzfr Please take a look https://aiopg.readthedocs.io/en/stable/core.html#exceptions :)', 'comment_created': datetime.datetime(2020, 6, 1, 7, 43, 1, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}, {'comment_id': 433475542, 'comment_body': 'maybe float is better?', 'comment_created': datetime.datetime(2020, 6, 1, 20, 37, 20, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}, {'comment_id': 433477889, 'comment_body': 'maybe we can find some better name for this function? :)', 'comment_created': datetime.datetime(2020, 6, 1, 20, 42, 5, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}, {'comment_id': 433479346, 'comment_body': 'maybe we can log instead of print?', 'comment_created': datetime.datetime(2020, 6, 1, 20, 44, 51, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}, {'comment_id': 433481341, 'comment_body': 'oh yes I was testing with these and was going to ask, should we log after every query? or should we just log once  like `Inserted sessions`\r\n\r\nbecause if we log for every query then logs would contain lot of repetitive things because it will be repeated for all the sessions', 'comment_created': datetime.datetime(2020, 6, 1, 20, 48, 49, tzinfo=datetime.timezone.utc), 'commenter': 'mzfr', 'type': 'User'}, {'comment_id': 433482384, 'comment_body': '@mzfr I think we can remove this and log only exceptions :)', 'comment_created': datetime.datetime(2020, 6, 1, 20, 50, 53, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}, {'comment_id': 433487547, 'comment_body': ""I mean if we log only once then we can log with the session UUID so something like: `Inserted sessions with Session UUID <sess_uuid>`\r\n\r\nit won't look much repetitive but if we log after every query then a lot of repetition would be there.\r\n\r\nBut also logging after every query would help us in debugging if something goes wrong :)\r\n\r\nso I just wanted to ask your opinion on this."", 'comment_created': datetime.datetime(2020, 6, 1, 21, 0, 50, tzinfo=datetime.timezone.utc), 'commenter': 'mzfr', 'type': 'User'}, {'comment_id': 434196646, 'comment_body': ""I run the tanner without postgres running and it doesn't exit with error. Could you please check?"", 'comment_created': datetime.datetime(2020, 6, 2, 21, 53, 33, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}, {'comment_id': 434321251, 'comment_body': 'You have the Postgres in your config, right? \r\nI mean I just tested without running Postgres and I got the error \r\n\r\n```\r\npsycopg2.OperationalError: could not connect to server: Connection refused\r\n        Is the server running on host ""localhost"" (::1) and accepting\r\n        TCP/IP connections on port 5432?\r\ncould not connect to server: Connection refused\r\n        Is the server running on host ""localhost"" (127.0.0.1) and accepting\r\n        TCP/IP connections on port 5432?\r\n```\r\nI did not make any changes to the code or anything I just simply stopped my Postgres and ran `sudo python bin/tanner`', 'comment_created': datetime.datetime(2020, 6, 3, 5, 46, 25, tzinfo=datetime.timezone.utc), 'commenter': 'mzfr', 'type': 'User'}, {'comment_id': 434802726, 'comment_body': 'OK, now I am able to get an exception :) But it\'s not catched:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File ""/usr/local/bin/tanner"", line 4, in <module>\r\n    __import__(\'pkg_resources\').run_script(\'Tanner==0.6.0\', \'tanner\')\r\n  File ""/usr/lib/python3.7/site-packages/pkg_resources/__init__.py"", line 661, in run_script\r\n    self.require(requires)[0].run_script(script_name, ns)\r\n  File ""/usr/lib/python3.7/site-packages/pkg_resources/__init__.py"", line 1448, in run_script\r\n    exec(script_code, namespace, namespace)\r\n  File ""/usr/local/lib/python3.7/site-packages/Tanner-0.6.0-py3.7.egg/EGG-INFO/scripts/tanner"", line 36, in <module>\r\n  File ""/usr/local/lib/python3.7/site-packages/Tanner-0.6.0-py3.7.egg/EGG-INFO/scripts/tanner"", line 32, in main\r\n  File ""/usr/local/lib/python3.7/site-packages/Tanner-0.6.0-py3.7.egg/tanner/server.py"", line 145, in start\r\n  File ""uvloop/loop.pyx"", line 1456, in uvloop.loop.Loop.run_until_complete\r\n  File ""/usr/local/lib/python3.7/site-packages/Tanner-0.6.0-py3.7.egg/tanner/postgres_client.py"", line 33, in get_pg_client\r\n  File ""/usr/lib64/python3.7/asyncio/tasks.py"", line 442, in wait_for\r\n    return fut.result()\r\n  File ""/usr/local/lib/python3.7/site-packages/aiopg/utils.py"", line 61, in send\r\n    return self._coro.send(value)\r\n  File ""/usr/local/lib/python3.7/site-packages/aiopg/pool.py"", line 155, in from_pool_fill\r\n    await self._fill_free_pool(False)\r\n  File ""/usr/local/lib/python3.7/site-packages/aiopg/pool.py"", line 199, in _fill_free_pool\r\n    **self._conn_kwargs)\r\n  File ""/usr/local/lib/python3.7/site-packages/aiopg/connection.py"", line 551, in _connect\r\n    await self._poll(self._waiter, self._timeout)\r\n  File ""/usr/local/lib/python3.7/site-packages/aiopg/connection.py"", line 207, in _poll\r\n    await asyncio.wait_for(self._waiter, timeout, loop=self._loop)\r\n  File ""/usr/lib64/python3.7/asyncio/tasks.py"", line 442, in wait_for\r\n    return fut.result()\r\n  File ""/usr/local/lib/python3.7/site-packages/aiopg/connection.py"", line 106, in _ready\r\n    state = self._conn.poll()\r\npsycopg2.OperationalError: could not connect to server: Connection refused\r\n\tIs the server running on host ""localhost"" (::1) and accepting\r\n\tTCP/IP connections on port 5432?\r\ncould not connect to server: Connection refused\r\n\tIs the server running on host ""localhost"" (127.0.0.1) and accepting\r\n\tTCP/IP connections on port 5432?\r\n```', 'comment_created': datetime.datetime(2020, 6, 3, 19, 28, 47, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}, {'comment_id': 435532107, 'comment_body': 'and what if the `location.postal.code` is not None? :)', 'comment_created': datetime.datetime(2020, 6, 4, 20, 33, 2, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}, {'comment_id': 435536903, 'comment_body': 'please close also aiopg pool', 'comment_created': datetime.datetime(2020, 6, 4, 20, 42, 33, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}, {'comment_id': 435684485, 'comment_body': ""If it's none then it would be an integer right?"", 'comment_created': datetime.datetime(2020, 6, 5, 4, 32, 50, tzinfo=datetime.timezone.utc), 'commenter': 'mzfr', 'type': 'User'}, {'comment_id': 435684660, 'comment_body': ""oh wait, those are numbers but still passed as string. I'll do the conversion."", 'comment_created': datetime.datetime(2020, 6, 5, 4, 33, 33, tzinfo=datetime.timezone.utc), 'commenter': 'mzfr', 'type': 'User'}, {'comment_id': 436095168, 'comment_body': 'why you call only `wait_closed` without closing the pool? You closed it somewhere else?\r\nhttps://aiopg.readthedocs.io/en/stable/core.html#aiopg.Pool.close', 'comment_created': datetime.datetime(2020, 6, 5, 18, 30, 12, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}, {'comment_id': 436098814, 'comment_body': ""`UnboundLocalError: local variable 'zcode' referenced before assignment`"", 'comment_created': datetime.datetime(2020, 6, 5, 18, 37, 33, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}, {'comment_id': 436242978, 'comment_body': 'Sorry I missed that :sweat_smile: ', 'comment_created': datetime.datetime(2020, 6, 6, 6, 16, 12, tzinfo=datetime.timezone.utc), 'commenter': 'mzfr', 'type': 'User'}]","[{'commit_sha': 'cc90f65b35d21b61539418863f263820e7d11071', 'committer_username': 'afeena', 'committer_name': 'Evgeniia', 'committer_email': 'vremendm@gmail.com', 'commit_date': datetime.datetime(2014, 8, 8, 3, 3, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f0bbd5b5367bbafcc7c4bd7a3a548506dec95b7', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '5c081fdf0fc64b6feb35137565883e98a0196895', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'cd9e4caf53b732f705a30a67d9a6a54a19deeba0', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '596a0377c5630a0c5e4d97187c34e814b78d1f13', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a520924267567b0df9f5c695be3a024d662ce4f7', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '61f2000fca978e2fbbbb5eb05717f2562df5eccf', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'caca7f0592fef3cb3d98fc8b67d4d7661406924e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '8fde9e79f9cfc9abeadf59fd001daa0e66784e79', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '204ba4e811c983b41b11a033b284d9561a98d9f4', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'fded63eedc4263a439c13006f2b1ee549b600591', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '31e114b795e917e5f071995ec0960d408f143ccd', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '6211415000ecabee4b2a1f9e7b9a3dfdafedca15', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '1ac1cc68a4fcedf84dac3d6da3a7d877b6beed1d', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'e18ef3a38403c8c47d6a3f6a82b3cd91b3d31c87', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '7582b5e16f9d9d77c55b2ca0b153f6fdfb6e08c9', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '077fbc29b5c2d408eb5b598bb131645a0f3b413a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '84051029d1022eacdb5410c6a590955f55b5976e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b6fa8e005bf1316d7f38ce3c2914a91ef73f99c8', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '157c885c7b465b897201754b00d5c1300f525792', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '2b2a45629aedb54f32c2918be0840f97a82baafd', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b40cb7bec07e877f258b762154dfb471dd719c75', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '08b04124f14d0b6637fbcb3f4dddd691cd85280c', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '3fffb5ba6969a8cfef3e6b1f54dfbbc7478b02d3', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Mehtab Zafar,16623935,github@mzfr.in,User,,59,,61,368
430164234,Update API to get details from postgres,"I have added the support for the API to work with Postgres. All the endpoints are working similarly to the way they were working with Redis. I haven't tested the `tannerweb` but I am assuming that if API is working then the web part would still be fine(I'll test tanner web and make sure nothing breaks in it).

Now the implementation might look sloppy because I used 4 different queries to extract the information rather than execute single query with multiple joins on the table. The reason I didn't use a single query with joins is that the data returned was weird[1].

[1] It returned a very large list(let's call it **L**) that had multiple lists in them and each small list was actually a row. Now the problem was that say if we have 5 cookies(key and value) so the first 5 lists of L have the same values except 1 different value(the cookie).

Sorry if that explanation was confusing :)",True,391,https://api.github.com/repos/mushorg/tanner/pulls/391,https://github.com/mushorg/tanner/pull/391,closed,478,291,11,31,8,32,0,0,[],2020-06-07 15:47:46+00:00,2020-07-05 17:42:56+00:00,2426110.0,"28 days, 1:55:10","[{'comment_id': 436973416, 'comment_body': 'Do we still need redis?', 'comment_created': datetime.datetime(2020, 6, 8, 20, 14, 54, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}, {'comment_id': 436991987, 'comment_body': 'wrong return value', 'comment_created': datetime.datetime(2020, 6, 8, 20, 49, 10, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}, {'comment_id': 436993243, 'comment_body': 'I would suggest you to think about possibility to control the number of sessions you fetched, if you will have too many sessions inside one snare, fetching all might cause the problem.', 'comment_created': datetime.datetime(2020, 6, 8, 20, 51, 19, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}, {'comment_id': 436994214, 'comment_body': 'What if the uuid passed to the function is wrong?  and you will not have session_id', 'comment_created': datetime.datetime(2020, 6, 8, 20, 53, 10, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}, {'comment_id': 437114537, 'comment_body': ""Isn't this depends on the insertion part? I mean the insert section have it as UUID type and if there is not seesion_id then there won't be any other data(meaning insertion wouldn't take place)"", 'comment_created': datetime.datetime(2020, 6, 9, 3, 15, 37, tzinfo=datetime.timezone.utc), 'commenter': 'mzfr', 'type': 'User'}, {'comment_id': 437114780, 'comment_body': ""Oh and for the passed value I'll add the check that it has to be uuid.UUID type "", 'comment_created': datetime.datetime(2020, 6, 9, 3, 16, 37, tzinfo=datetime.timezone.utc), 'commenter': 'mzfr', 'type': 'User'}, {'comment_id': 437219612, 'comment_body': 'We need it till the time we separate the analyses part and the deletion part.\r\n', 'comment_created': datetime.datetime(2020, 6, 9, 8, 14, 26, tzinfo=datetime.timezone.utc), 'commenter': 'mzfr', 'type': 'User'}, {'comment_id': 437220223, 'comment_body': 'We need it till the time we separate the analyses part and the deletion part.\r\n', 'comment_created': datetime.datetime(2020, 6, 9, 8, 15, 30, tzinfo=datetime.timezone.utc), 'commenter': 'mzfr', 'type': 'User'}, {'comment_id': 438370890, 'comment_body': ""It's API, I can do a request with any uuid"", 'comment_created': datetime.datetime(2020, 6, 10, 19, 51, 56, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}, {'comment_id': 438372440, 'comment_body': 'Do we? API is independent and works only with analysed data', 'comment_created': datetime.datetime(2020, 6, 10, 19, 54, 54, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}, {'comment_id': 438381547, 'comment_body': ""I suggest we think about switching to SQLAlchemy, until it's not too late. It will gives us more flexibility and readability, what do you think?"", 'comment_created': datetime.datetime(2020, 6, 10, 20, 12, 54, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}, {'comment_id': 439756230, 'comment_body': 'here we fetch all the sessions just to collect statistics, maybe we can replace it with sql queries?', 'comment_created': datetime.datetime(2020, 6, 13, 17, 47, 37, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}, {'comment_id': 439756342, 'comment_body': 'Use the advantages of sqlalchemy, we already have a dict, you can pass it https://aiopg.readthedocs.io/en/stable/sa.html#aiopg.sa.SAConnection.execute', 'comment_created': datetime.datetime(2020, 6, 13, 17, 50, 2, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}, {'comment_id': 439756612, 'comment_body': 'In sqlalchemy, you can convert result directly into the dict, no need to set every value separately', 'comment_created': datetime.datetime(2020, 6, 13, 17, 54, 3, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}, {'comment_id': 439756654, 'comment_body': 'You can use named fields instead https://aiopg.readthedocs.io/en/stable/examples.html#named-field-sqlalchemy-usage', 'comment_created': datetime.datetime(2020, 6, 13, 17, 54, 56, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}, {'comment_id': 439756782, 'comment_body': 'here you fetch owners only for 1 session id, why you need infinite loop?', 'comment_created': datetime.datetime(2020, 6, 13, 17, 56, 20, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}, {'comment_id': 439756796, 'comment_body': 'see my comment below', 'comment_created': datetime.datetime(2020, 6, 13, 17, 56, 36, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}, {'comment_id': 439756904, 'comment_body': 'what if instead of returning all the info for all the sessions we will return only the list of sessuin uuids and make the full info as a separate API request?', 'comment_created': datetime.datetime(2020, 6, 13, 17, 58, 5, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}, {'comment_id': 439819781, 'comment_body': 'for returning sessions UUID we already have the call i.e `api/<snare-uuid>/sessions`. So in a way, we already have a separate API request for full information', 'comment_created': datetime.datetime(2020, 6, 14, 11, 29, 52, tzinfo=datetime.timezone.utc), 'commenter': 'mzfr', 'type': 'User'}, {'comment_id': 440378336, 'comment_body': 'https://www.postgresql.org/docs/8.2/functions-aggregate.html', 'comment_created': datetime.datetime(2020, 6, 15, 18, 51, 52, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}, {'comment_id': 440379050, 'comment_body': 'see prev comment', 'comment_created': datetime.datetime(2020, 6, 15, 18, 53, 8, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}, {'comment_id': 440380927, 'comment_body': 'https://www.postgresql.org/docs/9.1/functions-datetime.html', 'comment_created': datetime.datetime(2020, 6, 15, 18, 56, 28, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}, {'comment_id': 440381454, 'comment_body': 'I am just curious, what is the problem of just dict?', 'comment_created': datetime.datetime(2020, 6, 15, 18, 57, 28, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}, {'comment_id': 440383477, 'comment_body': ""Doesn't belong to API class"", 'comment_created': datetime.datetime(2020, 6, 15, 19, 1, 21, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}, {'comment_id': 440384534, 'comment_body': 'I am still sure that fetching all sessions is a bad idea', 'comment_created': datetime.datetime(2020, 6, 15, 19, 3, 21, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}, {'comment_id': 440391253, 'comment_body': ""It returns a dictionary with `id` as `UUID(<value>)` it's not decoded. So either we will have to separately decode the value to str or use this JSON dumps.\r\n\r\nBoth dumps and loads are used because dumps return a string but we need it like a dictionary."", 'comment_created': datetime.datetime(2020, 6, 15, 19, 16, 3, tzinfo=datetime.timezone.utc), 'commenter': 'mzfr', 'type': 'User'}, {'comment_id': 443116642, 'comment_body': 'I tested with my db and got this `""total_duration"": ""-1 day, 23:56:37""`', 'comment_created': datetime.datetime(2020, 6, 20, 9, 27, 44, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}, {'comment_id': 443116691, 'comment_body': 'do we want to return only positive numbers or all zeros as well? if we want to return all the range, it should be more attacks', 'comment_created': datetime.datetime(2020, 6, 20, 9, 28, 51, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}, {'comment_id': 443117034, 'comment_body': 'paths', 'comment_created': datetime.datetime(2020, 6, 20, 9, 35, 20, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}, {'comment_id': 443122555, 'comment_body': 'yeah we can do that it returns all the attacks that are available, no matter what the type of attack is.\r\n', 'comment_created': datetime.datetime(2020, 6, 20, 11, 8, 31, tzinfo=datetime.timezone.utc), 'commenter': 'mzfr', 'type': 'User'}, {'comment_id': 443215667, 'comment_body': 'Are you sure if/else is a best solution here?\r\n```>>> tables = ""sessions S""\r\n>>> filters = {""attack_type"":1, ""owners"":""user""}\r\n>>> if ""attack_type"" in filters:\r\n...     tables += "", paths P""\r\n... elif ""owners"" in filters:\r\n...     tables += "", owners O""\r\n...\r\n>>> tables\r\n\'sessions S, paths P\'\r\n```', 'comment_created': datetime.datetime(2020, 6, 21, 12, 38, 40, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}, {'comment_id': 448272887, 'comment_body': 'how this solves KeyError? if path doesn\'t have attack_type you will get an exception anyway\r\n\r\n```\r\n  File ""/usr/local/lib/python3.7/site-packages/Tanner-0.6.0-py3.7.egg/tanner/server.py"", line 106, in on_shutdown\r\n  File ""/usr/local/lib/python3.7/site-packages/Tanner-0.6.0-py3.7.egg/tanner/sessions/session_manager.py"", line 83, in delete_sessions_on_shutdown\r\n  File ""/usr/local/lib/python3.7/site-packages/Tanner-0.6.0-py3.7.egg/tanner/sessions/session_manager.py"", line 98, in delete_session\r\n  File ""/usr/local/lib/python3.7/site-packages/Tanner-0.6.0-py3.7.egg/tanner/sessions/session_analyzer.py"", line 32, in analyze\r\n  File ""/usr/local/lib/python3.7/site-packages/Tanner-0.6.0-py3.7.egg/tanner/sessions/session_analyzer.py"", line 39, in save_session\r\n  File ""/usr/local/lib/python3.7/site-packages/Tanner-0.6.0-py3.7.egg/tanner/dbutils.py"", line 146, in add_analyzed_data\r\nKeyError: \'attack_type\'\r\n```', 'comment_created': datetime.datetime(2020, 7, 1, 10, 34, 53, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}]","[{'commit_sha': '846789cad6863c19284848eca4d27e8c00fb2232', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '0654fc0e2452f61c9b7fb1ee52b32bac7cad2d37', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'd784260a90e7e53229c7fab5f636011aa8bf5095', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '714aef113cc81a02fc41e19543cdebd17dcffd5a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '2906221f5d78b217409a287c3f1b9822cae45f81', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '31cf92df16618991bb95a80cbd4c428613ff8661', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '1e3e93c01b856608ff54a8b544e133984f088309', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'c49d7c7f471fe86bf840aa92d370e76ab10f609b', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'd3b3f4d42c88d2401e70ee3df45882c53bc76271', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '19f6790affdbe3d5bd8adcda42f44d43b3bd3037', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'daec0ce27796b3bad58565c50e65435e71a92b9b', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '2ba74507fdd2eaee6a1c6dfb6e5e5c493f34e451', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '9d0a86fb9e76fdfee68b77c0de1019b75481c23f', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a81b9702150acbf5f7ac982a1f59fe21b541734f', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '92b68c04373096a9f1593b0f9d4c73bee1c92d60', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'd6f041b785ac0b1e0098fd08d4c4cfa54524a707', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '0f7d9143dfbd75fd360488f74eac2093f7c79f32', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '2de5ea475e716fddcd1c90fc709379cb0c3c7215', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '886a59b975af6aa944843a25f183fc88243a979d', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'fedd0d8502859f1c0a458aca821dbb4bd4ae1d30', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '368453d69ef68f8d9a9751c31be8ff3cbdcd8d64', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '0abfa111abb0ef4b5f411ef8a230cb719f4fe0ff', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '997313eac2fce78ebce2715efe78df87c460ddb3', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '0fee2265fefcbc65f4f49b8e1c30fc50adb9fa8e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '0b3a09a68a92198b648f3152ef3821b7d503ed3d', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '43d7c82e912e192ba724d822d0cace6a0248bb54', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '117d23371dcc731a07f6bbe60684b5f11eb1d700', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '340a7fa718c1dde82f9303ea805a6b8c5c8e4eff', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '6f72b84f7e933d9785eb4ebd455e3663c552f97a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '815e30a740a7f0f040d5082cb5e258ab0e78b2df', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'd929b9c9a37d4c03044c99d4134605a0bf28b16c', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Mehtab Zafar,16623935,github@mzfr.in,User,,59,,61,368
431047580,Update existing tests,"In this PR I've updated all the existing tests that were failing because of all the new changes made to the code.
",True,392,https://api.github.com/repos/mushorg/tanner/pulls/392,https://github.com/mushorg/tanner/pull/392,closed,488,403,12,23,6,19,0,0,[],2020-06-08 10:52:58+00:00,2020-07-28 20:17:07+00:00,4353849.0,"50 days, 9:24:09","[{'comment_id': 439625998, 'comment_body': 'do you use it? either add it to requirements or delete from here :)', 'comment_created': datetime.datetime(2020, 6, 12, 20, 23, 18, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}, {'comment_id': 439629039, 'comment_body': ""Yeah, I'll remove them since asynctest wasn't able to help much in mocking Postgres."", 'comment_created': datetime.datetime(2020, 6, 12, 20, 30, 54, tzinfo=datetime.timezone.utc), 'commenter': 'mzfr', 'type': 'User'}, {'comment_id': 453166536, 'comment_body': 'why are you using redis base image?', 'comment_created': datetime.datetime(2020, 7, 11, 7, 16, 49, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}, {'comment_id': 453167118, 'comment_body': 'I would be super careful of using default db name for tests', 'comment_created': datetime.datetime(2020, 7, 11, 7, 24, 40, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}, {'comment_id': 453914463, 'comment_body': 'You can create/drop database for tests directly', 'comment_created': datetime.datetime(2020, 7, 13, 20, 31, 48, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}, {'comment_id': 453918410, 'comment_body': 'For fail case you can create separate mock which raises and exception instead of returning value', 'comment_created': datetime.datetime(2020, 7, 13, 20, 39, 10, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}, {'comment_id': 456520547, 'comment_body': '@mzfr ', 'comment_created': datetime.datetime(2020, 7, 17, 15, 38, 31, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}, {'comment_id': 458954310, 'comment_body': 'I believe we do not need a print', 'comment_created': datetime.datetime(2020, 7, 22, 17, 16, 24, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}, {'comment_id': 458955878, 'comment_body': ""why don't you use AsyncMock for postgres?"", 'comment_created': datetime.datetime(2020, 7, 22, 17, 19, 4, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}, {'comment_id': 458959111, 'comment_body': 'you get the client here and do not close it afterwards', 'comment_created': datetime.datetime(2020, 7, 22, 17, 24, 24, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}, {'comment_id': 459094667, 'comment_body': 'I am just wondering, where this variable is used?', 'comment_created': datetime.datetime(2020, 7, 22, 21, 29, 26, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}, {'comment_id': 459094938, 'comment_body': 'I can\'t connect locally to the postgres because my password is not the ""default""', 'comment_created': datetime.datetime(2020, 7, 22, 21, 29, 57, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}, {'comment_id': 459095587, 'comment_body': ""why don't you use aiopg here?"", 'comment_created': datetime.datetime(2020, 7, 22, 21, 31, 18, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}, {'comment_id': 459221593, 'comment_body': 'After this line, we are defining all the variables required to connect to Postgres.\r\n```\r\n        async def connect():\r\n            self.postgres = postgres_client.PostgresClient()\r\n            self.postgres.host = ""localhost""\r\n            self.postgres.post = 5432\r\n            self.postgres.db_name = ""tanner_test_db""\r\n            self.postgres.user = ""postgres""\r\n            self.postgres.password = ""postgres""\r\n            self.postgres.maxsize = 80\r\n\r\n```', 'comment_created': datetime.datetime(2020, 7, 23, 5, 29, 9, tzinfo=datetime.timezone.utc), 'commenter': 'mzfr', 'type': 'User'}, {'comment_id': 459221662, 'comment_body': 'Should I read this information from the config file?', 'comment_created': datetime.datetime(2020, 7, 23, 5, 29, 30, tzinfo=datetime.timezone.utc), 'commenter': 'mzfr', 'type': 'User'}, {'comment_id': 459496800, 'comment_body': '🤦 my bad :)', 'comment_created': datetime.datetime(2020, 7, 23, 14, 34, 43, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}, {'comment_id': 459964722, 'comment_body': 'close is not a coroutine https://aiopg.readthedocs.io/en/stable/core.html#aiopg.Pool.close', 'comment_created': datetime.datetime(2020, 7, 24, 10, 6, 51, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}, {'comment_id': 459965891, 'comment_body': 'close should not be a coroutine according to docs', 'comment_created': datetime.datetime(2020, 7, 24, 10, 9, 38, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}, {'comment_id': 459966169, 'comment_body': 'you can also try add https://aiopg.readthedocs.io/en/stable/core.html#aiopg.Pool.wait_closed', 'comment_created': datetime.datetime(2020, 7, 24, 10, 10, 17, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}]","[{'commit_sha': '50e312260e379a2410d2b80baf0b128ddc57a598', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'e4a162af3c0133b06523c7746cfb52f5d33a454f', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '3da13540e60ad8604969529329140ba0a414ea65', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '5efb29f819ee329da64f1be12aa3c5a320774797', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'e2b2878093912537a6119c3f2e834ce9fae1c0cc', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a145fb6a0e779faf5255fbe511c5a28cd29e5126', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b7f04eafb29a227fe92cff59955bec5af2252998', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '339fbe8fdfcdb5d276bd04f049c4e2d6b7d2eca0', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'cdfaa78c205144a6e79e18c03a40c4319bedba29', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '3d7018cf65a799edf408a8f2d8b9db283fe11ec8', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '636caeb870a740f786a4e2bc3e61fe6d0f44cedc', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '90bbdf55eae56f9326efd13627d74b239e5116a7', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '60091d4fc6554b3b9a7317a791c7a936fda87df3', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '58a63be61d6412b28329a864227460afad87b74a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '24dbf5131622f0839e29fb70fd689233b9837d01', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '61a071c46e79524803c117080a02050e6cb7a4d7', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '650b87986b5f385114e535ac7896a05219ac2657', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'c7b47d4c0a5ea4c2bc15b1a6bff928d16cd90519', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '06996ebb5b56025aeef6968a2e808136797f08d3', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'd6859e0b22c59dc7ef716ab9056bae063ebb1334', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'c34208ab9e664259fa9313ec5974760983f1a617', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '2043b470e1a062a8e394f57528b8a99551ee321a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '233aff4bebed7d66f776d45a7b608128a85fba6a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Mehtab Zafar,16623935,github@mzfr.in,User,,59,,61,368
451768525,make analysis of session a separate background task,This PR will separate the analysis and deletion of the session.,True,395,https://api.github.com/repos/mushorg/tanner/pulls/395,https://github.com/mushorg/tanner/pull/395,closed,143,94,5,9,4,7,0,0,[],2020-07-18 07:20:08+00:00,2020-07-31 19:13:27+00:00,1165999.0,"13 days, 11:53:19","[{'comment_id': 456956766, 'comment_body': '```\r\nTraceback (most recent call last):\r\n  File ""/usr/local/lib/python3.7/site-packages/Tanner-0.6.0-py3.7.egg/tanner/server.py"", line 127, in analyze_sessions\r\n    await self.session_analyzer(self.redis_client, self.pg_client)\r\nAttributeError: \'TannerServer\' object has no attribute \'session_analyzer\'\r\n```', 'comment_created': datetime.datetime(2020, 7, 19, 21, 17, 40, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}, {'comment_id': 457052505, 'comment_body': 'Yes I found that issue.\r\n', 'comment_created': datetime.datetime(2020, 7, 20, 5, 1, 52, tzinfo=datetime.timezone.utc), 'commenter': 'mzfr', 'type': 'User'}, {'comment_id': 460376906, 'comment_body': 'do we really need a separate save function or we can do everything in current function?\r\n\r\nanyway, save should not be called after you put each session into the queue, it should be called once', 'comment_created': datetime.datetime(2020, 7, 25, 7, 28, 20, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}, {'comment_id': 460376928, 'comment_body': 'remove commented line', 'comment_created': datetime.datetime(2020, 7, 25, 7, 28, 42, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}, {'comment_id': 460377013, 'comment_body': 'you have try for redis error, but not postgres errors', 'comment_created': datetime.datetime(2020, 7, 25, 7, 29, 41, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}, {'comment_id': 461186804, 'comment_body': 'there is no queue anymore to return the session to', 'comment_created': datetime.datetime(2020, 7, 27, 21, 40, 52, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}, {'comment_id': 461187158, 'comment_body': 'can we avoid this by using another pattern for sessions?', 'comment_created': datetime.datetime(2020, 7, 27, 21, 41, 42, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}]","[{'commit_sha': 'ee17e267919387da8db62e7291a9ea1a9156b31b', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '37ff18252ebe07b20e4357968ba096c356675686', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '80196926db472408af053d41655a6982a0f76da5', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '8856da5f4c82b7d9fb24a4e04f7d6c778f109f54', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '1a3276b7f37767fd8dd77ea0cdac8b48ab5a629d', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ccdd8d6917289a856d4f7762af79ca953f66339c', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '874d5d4683e934785723d5b0df907317f239ef89', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '59bf368c0dbb145e02ad4de418f3ec18c88a660c', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '722bcb43a4ef966b186b924e2368f28703ab07c2', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Mehtab Zafar,16623935,github@mzfr.in,User,,59,,61,368
462674519,update filter search,"Now it's possible to search multiple values of the same type.

When I initially made change to the API it only supported filter search in the following way:

```
<url>?filters=attack_type:index
```
but failed to support something like:
```
<url>?filters=owners:tool owners:admin
```

This PR add that support",True,396,https://api.github.com/repos/mushorg/tanner/pulls/396,https://github.com/mushorg/tanner/pull/396,closed,68,64,8,1,3,4,0,0,[],2020-08-04 10:24:07+00:00,2020-08-07 15:29:04+00:00,277497.0,"3 days, 5:04:57","[{'comment_id': 465321174, 'comment_body': 'remove print', 'comment_created': datetime.datetime(2020, 8, 4, 20, 48, 9, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}, {'comment_id': 465324728, 'comment_body': 'I thought a lot about this query building, can we rebuilt it in a way it looks more accurate and we use the power of sqlalchemy? like here https://aiopg.readthedocs.io/en/stable/examples.html#complex-sqlalchemy-queries', 'comment_created': datetime.datetime(2020, 8, 4, 20, 55, 14, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}, {'comment_id': 465458293, 'comment_body': 'I actually thought about it and I think almost everything would stay similar to the way it is. \nThe only thing that would differ is that instead of having raw queries we would be using the sqlalchemy objects \n\nI mean all these conditions would have to stay so code might not become as clean as we think.\n\nBut I can definitely try to do it.', 'comment_created': datetime.datetime(2020, 8, 5, 4, 1, 30, tzinfo=datetime.timezone.utc), 'commenter': 'mzfr', 'type': 'User'}, {'comment_id': 466580512, 'comment_body': 'We could keep it in mind and make as a separate task :)', 'comment_created': datetime.datetime(2020, 8, 6, 17, 42, 39, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}]","[{'commit_sha': 'e7b215828276ee7b3e080346338c1f9c2db82011', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Mehtab Zafar,16623935,github@mzfr.in,User,,59,,61,368
465044081,Remove python36,"As discussed I've removed the python3.6 from travis.yml
",True,397,https://api.github.com/repos/mushorg/tanner/pulls/397,https://github.com/mushorg/tanner/pull/397,closed,1,2,2,2,1,0,0,0,[],2020-08-08 15:36:54+00:00,2020-08-10 18:13:04+00:00,182170.0,"2 days, 2:36:10",[],"[{'commit_sha': 'fa0cbfb169b6b1e7b34658a1b896f35ed6a5ec8e', 'committer_username': 'afeena', 'committer_name': 'Evgeniia', 'committer_email': 'vremendm@gmail.com', 'commit_date': datetime.datetime(2014, 8, 8, 3, 3, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7386e2104162b32c0823d5a41f919950c3e40ada', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Mehtab Zafar,16623935,github@mzfr.in,User,,59,,61,368
427647558,Deploy master branch to server using github actions,@glaslos Can you please review this and let me know what all changes are required in this?,False,390,https://api.github.com/repos/mushorg/tanner/pulls/390,https://github.com/mushorg/tanner/pull/390,open,50,0,1,4,1,10,0,0,[],2020-06-04 07:37:26+00:00,,0.0,,"[{'comment_id': 435828067, 'comment_body': 'after checking out the code, build the .egg or .wheel', 'comment_created': datetime.datetime(2020, 6, 5, 10, 17, 28, tzinfo=datetime.timezone.utc), 'commenter': 'glaslos', 'type': 'User'}, {'comment_id': 435828201, 'comment_body': 'only scp the .egg', 'comment_created': datetime.datetime(2020, 6, 5, 10, 17, 44, tzinfo=datetime.timezone.utc), 'commenter': 'glaslos', 'type': 'User'}, {'comment_id': 435828605, 'comment_body': 'is there any other way to do this?', 'comment_created': datetime.datetime(2020, 6, 5, 10, 18, 32, tzinfo=datetime.timezone.utc), 'commenter': 'glaslos', 'type': 'User'}, {'comment_id': 435828776, 'comment_body': 'can you skip this step and have tanner auto restart if there is a new egg in a folder?', 'comment_created': datetime.datetime(2020, 6, 5, 10, 18, 57, tzinfo=datetime.timezone.utc), 'commenter': 'glaslos', 'type': 'User'}, {'comment_id': 435899789, 'comment_body': 'another way to install the dependencies? That is what was suggested in the github action documentation.', 'comment_created': datetime.datetime(2020, 6, 5, 12, 51, 13, tzinfo=datetime.timezone.utc), 'commenter': 'mzfr', 'type': 'User'}, {'comment_id': 435903287, 'comment_body': 'Is it the only way? Do some research', 'comment_created': datetime.datetime(2020, 6, 5, 12, 57, 41, tzinfo=datetime.timezone.utc), 'commenter': 'glaslos', 'type': 'User'}, {'comment_id': 449747707, 'comment_body': 'why we build with py3.6 if we do not support it anymore?', 'comment_created': datetime.datetime(2020, 7, 4, 7, 9, 33, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}, {'comment_id': 449747764, 'comment_body': 'what about tests?', 'comment_created': datetime.datetime(2020, 7, 4, 7, 10, 18, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}, {'comment_id': 449747828, 'comment_body': 'we rarely change dependencies, maybe it makes sense to add cache?  https://docs.github.com/en/actions/configuring-and-managing-workflows/caching-dependencies-to-speed-up-workflows', 'comment_created': datetime.datetime(2020, 7, 4, 7, 11, 14, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}, {'comment_id': 449748075, 'comment_body': ""I didn't get how tanner will restart here"", 'comment_created': datetime.datetime(2020, 7, 4, 7, 15, 12, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}]","[{'commit_sha': '8d04d2ba3d2045326e36de5d176d6c059fe498d4', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a2d43d20b1a72a00fc6dd325fd003d1e4cf12825', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'db996fbb0c9e0005e54db3c74120e0244935d8be', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'd0d1bdeac7230a22ebf7b72621ac706c6f3c2703', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Mehtab Zafar,16623935,github@mzfr.in,User,,59,,61,368
466794475,Migration script,This script can help people in migrating their data from old redis setup to new postgres model.,True,399,https://api.github.com/repos/mushorg/tanner/pulls/399,https://github.com/mushorg/tanner/pull/399,closed,105,14,5,9,10,2,0,0,[],2020-08-12 14:05:19+00:00,2020-11-01 18:43:54+00:00,7015115.0,"81 days, 4:38:35","[{'comment_id': 471147584, 'comment_body': 'you have `r_client`, not `self.redis_client`', 'comment_created': datetime.datetime(2020, 8, 16, 19, 12, 13, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}, {'comment_id': 495499507, 'comment_body': 'in raw data, there s no atbr and rps,\r\nrps -->requests_in_second\r\natbr --> approx_time_between_requests', 'comment_created': datetime.datetime(2020, 9, 26, 21, 56, 22, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}]","[{'commit_sha': '86167b0ab58ecdf4516be31ed505fb6b68eac98d', 'committer_username': 'afeena', 'committer_name': 'Evgeniia', 'committer_email': 'vremendm@gmail.com', 'commit_date': datetime.datetime(2014, 8, 8, 3, 3, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3a0f53961da8543163b83440b6d54d506f916c7', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'e168bd75a3adaa1fc7d32330f8ad99b656acdc7f', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'cb4fe89b0a139331f0884804e43e32ba3e655dc9', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '26d3a43003c07ec9fa028f0769788ec6356fad41', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '0c03b9d611d9c47f31998e7d4451adf4f1bee46b', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'c14f51b80d12ab830e40b9e60e69db0ed32dd689', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'c8e790d18ebfd9d5cb3505fc1d8a272facc82050', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '44c11728ecb733e60039e5c51b49f8b874924109', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Mehtab Zafar,16623935,github@mzfr.in,User,,59,,61,368
465270715,Aioftp,This Pull request will continue the work done in #385 ,True,398,https://api.github.com/repos/mushorg/tanner/pulls/398,https://github.com/mushorg/tanner/pull/398,closed,32,28,4,11,1,0,0,0,[],2020-08-10 04:49:21+00:00,2020-08-21 07:41:05+00:00,960704.0,"11 days, 2:51:44",[],"[{'commit_sha': '5b6591875d4df5cd3b4dcecc127ec5cffa3973ec', 'committer_username': 'steve7158', 'committer_name': 'Steve Jose', 'committer_email': None, 'commit_date': datetime.datetime(2018, 7, 6, 17, 9, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c17bd68c56414e308303d3d95a4c08803a5ada38', 'committer_username': 'steve7158', 'committer_name': 'Steve Jose', 'committer_email': None, 'commit_date': datetime.datetime(2018, 7, 6, 17, 9, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f966b9f58e0b08773795e9b1aa4d487440b0ae9', 'committer_username': 'steve7158', 'committer_name': 'Steve Jose', 'committer_email': None, 'commit_date': datetime.datetime(2018, 7, 6, 17, 9, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ecd7c480f74cbf5d524ce862ed81dbf9b8b75f6', 'committer_username': 'steve7158', 'committer_name': 'Steve Jose', 'committer_email': None, 'commit_date': datetime.datetime(2018, 7, 6, 17, 9, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd68c5fc49864e6be8d33dba028e474abd81aa940', 'committer_username': 'steve7158', 'committer_name': 'Steve Jose', 'committer_email': None, 'commit_date': datetime.datetime(2018, 7, 6, 17, 9, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e93a3d16fe8c3f380081dc775e1a35700d824ec4', 'committer_username': 'steve7158', 'committer_name': 'Steve Jose', 'committer_email': None, 'commit_date': datetime.datetime(2018, 7, 6, 17, 9, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'feed6292bbf3a9045b4fc77a3d127ed4e7eec817', 'committer_username': 'steve7158', 'committer_name': 'Steve Jose', 'committer_email': None, 'commit_date': datetime.datetime(2018, 7, 6, 17, 9, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd61f4a9681ed79998647067ecdbae0135e61ba0c', 'committer_username': 'steve7158', 'committer_name': 'Steve Jose', 'committer_email': None, 'commit_date': datetime.datetime(2018, 7, 6, 17, 9, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '516ede04188ec17ee62c11a157b5f482c8f42d0c', 'committer_username': 'steve7158', 'committer_name': 'Steve Jose', 'committer_email': None, 'commit_date': datetime.datetime(2018, 7, 6, 17, 9, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '28aaacd7e2ef828f8d5758f781e7cfad43232c2d', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '27f68b5be60337e4f065494e443c208920841408', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Mehtab Zafar,16623935,github@mzfr.in,User,,59,,61,368
471954954,Twig template injection ,"Add twig template 
Fix for #381 ",False,401,https://api.github.com/repos/mushorg/tanner/pulls/401,https://github.com/mushorg/tanner/pull/401,open,81,7,4,5,5,18,0,0,[],2020-08-22 07:55:27+00:00,,0.0,,"[{'comment_id': 475171217, 'comment_body': 'This should be updated', 'comment_created': datetime.datetime(2020, 8, 23, 5, 5, 21, tzinfo=datetime.timezone.utc), 'commenter': 'rjt-gupta', 'type': 'User'}, {'comment_id': 475171341, 'comment_body': 'Why we are matching with tornado regex?', 'comment_created': datetime.datetime(2020, 8, 23, 5, 7, 2, tzinfo=datetime.timezone.utc), 'commenter': 'rjt-gupta', 'type': 'User'}, {'comment_id': 475171361, 'comment_body': 'can tornado regex be used for every twig payload?', 'comment_created': datetime.datetime(2020, 8, 23, 5, 7, 43, tzinfo=datetime.timezone.utc), 'commenter': 'rjt-gupta', 'type': 'User'}, {'comment_id': 475171484, 'comment_body': 'Create a twig regex based on payloads', 'comment_created': datetime.datetime(2020, 8, 23, 5, 9, 40, tzinfo=datetime.timezone.utc), 'commenter': 'rjt-gupta', 'type': 'User'}, {'comment_id': 475190651, 'comment_body': ""yes I did test loads of payload and the same regex was able to catch them all so that is why I didn't added a new regex.\r\n\r\n"", 'comment_created': datetime.datetime(2020, 8, 23, 8, 35, tzinfo=datetime.timezone.utc), 'commenter': 'mzfr', 'type': 'User'}, {'comment_id': 475201662, 'comment_body': 'You need to add emulator here in order to enable it', 'comment_created': datetime.datetime(2020, 8, 23, 10, 24, 49, tzinfo=datetime.timezone.utc), 'commenter': 'rjt-gupta', 'type': 'User'}, {'comment_id': 475201766, 'comment_body': 'POST too.', 'comment_created': datetime.datetime(2020, 8, 23, 10, 25, 42, tzinfo=datetime.timezone.utc), 'commenter': 'rjt-gupta', 'type': 'User'}, {'comment_id': 475201795, 'comment_body': 'OK!', 'comment_created': datetime.datetime(2020, 8, 23, 10, 26, 5, tzinfo=datetime.timezone.utc), 'commenter': 'rjt-gupta', 'type': 'User'}, {'comment_id': 475201873, 'comment_body': 'https://github.com/mushorg/tanner/blob/40e2357119065445cbb06234e953a95e5a73ce93/tanner/emulators/base.py#L114', 'comment_created': datetime.datetime(2020, 8, 23, 10, 26, 54, tzinfo=datetime.timezone.utc), 'commenter': 'rjt-gupta', 'type': 'User'}, {'comment_id': 475203418, 'comment_body': 'oh okay', 'comment_created': datetime.datetime(2020, 8, 23, 10, 42, 54, tzinfo=datetime.timezone.utc), 'commenter': 'mzfr', 'type': 'User'}, {'comment_id': 480405422, 'comment_body': ""I tested with super simple string /foobar?b={{3*%272%27}} There are 2 possible detections:\r\n```\r\n{'name': 'template_injection', 'order': 4}\r\n{'name': 'twig_template_injection', 'order': 3}\r\n```\r\nSince `template_injection` is order 4, tanner chooses it and execute. \r\n\r\nAny ideas how to distinguish? @mzfr @rjt-gupta "", 'comment_created': datetime.datetime(2020, 8, 31, 21, 20, 9, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}, {'comment_id': 480412429, 'comment_body': ""`session=None`\r\n\r\nthe signature of the function is wrong. base emulator calls every handle with session\r\n`emulation_result = await self.emulators[detection['name']].handle(attack_params[detection['name']], session)`\r\n\r\nthat is why function was not called properly, works for me now"", 'comment_created': datetime.datetime(2020, 8, 31, 21, 34, 58, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}, {'comment_id': 480867067, 'comment_body': 'For twig this case should give `6` and for tornado `222`. (right?)', 'comment_created': datetime.datetime(2020, 9, 1, 6, 22, 23, tzinfo=datetime.timezone.utc), 'commenter': 'rjt-gupta', 'type': 'User'}, {'comment_id': 480867794, 'comment_body': 'we need something that distinguishes these two..', 'comment_created': datetime.datetime(2020, 9, 1, 6, 23, 30, tzinfo=datetime.timezone.utc), 'commenter': 'rjt-gupta', 'type': 'User'}, {'comment_id': 480885773, 'comment_body': ""yeah the regex is almost similar so it' hard to distinguish.\r\n\r\nAlso afeena can you please tell me how did you tested it? I mean the setup I want to know what I am doing wrong."", 'comment_created': datetime.datetime(2020, 9, 1, 6, 47, 42, tzinfo=datetime.timezone.utc), 'commenter': 'mzfr', 'type': 'User'}, {'comment_id': 481358115, 'comment_body': '@mzfr scan works perfectly fine, if you print possible detection you can see it. the only problem in the signature of the `handle` function. ', 'comment_created': datetime.datetime(2020, 9, 1, 18, 50, 15, tzinfo=datetime.timezone.utc), 'commenter': 'afeena', 'type': 'User'}, {'comment_id': 483703565, 'comment_body': 'tornado is getting its results from the custom docker image, and here its phpox. the returned format is different..', 'comment_created': datetime.datetime(2020, 9, 4, 15, 43, 22, tzinfo=datetime.timezone.utc), 'commenter': 'rjt-gupta', 'type': 'User'}, {'comment_id': 505155805, 'comment_body': '@rjt-gupta do you have an example of the format?', 'comment_created': datetime.datetime(2020, 10, 15, 4, 24, 32, tzinfo=datetime.timezone.utc), 'commenter': 'mzfr', 'type': 'User'}]","[{'commit_sha': '3dcf65828dd900d84725ee815226eb6fb87cb61c', 'committer_username': 'afeena', 'committer_name': 'Evgeniia', 'committer_email': 'vremendm@gmail.com', 'commit_date': datetime.datetime(2014, 8, 8, 3, 3, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3fe44eba40fcb7fea1d170bfff52a4ee422e54a4', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'f01c7f539a715c25e4c60d7b33f7be683c25426d', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '70bcff2e5037ce9b625f21e49f07f5275b4a2d96', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '1bafbf6d7cd27a477f7a25a69d4be7025e384ed8', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Mehtab Zafar,16623935,github@mzfr.in,User,,59,,61,368

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
40407153,tanner,mushorg/tanner,Python,101,219,15,25,295,22,3,2,"[{'id': 515354364, 'number': 402, 'closed': datetime.datetime(2020, 11, 11, 20, 38, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 11, 4, 12, 30, 11, tzinfo=datetime.timezone.utc), 'time_taken': 634123.0, 'time_delta': '7 days, 8:08:43', 'additions': 28, 'deletions': 20, 'state': 'closed'}, {'id': 471954954, 'number': 401, 'closed': None, 'created': datetime.datetime(2020, 8, 22, 7, 55, 27, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 81, 'deletions': 7, 'state': 'open'}, {'id': 468652896, 'number': 400, 'closed': datetime.datetime(2020, 10, 21, 20, 52, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 17, 7, 37, 33, tzinfo=datetime.timezone.utc), 'time_taken': 5663725.0, 'time_delta': '65 days, 13:15:25', 'additions': 180, 'deletions': 57, 'state': 'closed'}, {'id': 466794475, 'number': 399, 'closed': datetime.datetime(2020, 11, 1, 18, 43, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 12, 14, 5, 19, tzinfo=datetime.timezone.utc), 'time_taken': 7015115.0, 'time_delta': '81 days, 4:38:35', 'additions': 105, 'deletions': 14, 'state': 'closed'}, {'id': 465270715, 'number': 398, 'closed': datetime.datetime(2020, 8, 21, 7, 41, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 10, 4, 49, 21, tzinfo=datetime.timezone.utc), 'time_taken': 960704.0, 'time_delta': '11 days, 2:51:44', 'additions': 32, 'deletions': 28, 'state': 'closed'}, {'id': 465044081, 'number': 397, 'closed': datetime.datetime(2020, 8, 10, 18, 13, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 8, 15, 36, 54, tzinfo=datetime.timezone.utc), 'time_taken': 182170.0, 'time_delta': '2 days, 2:36:10', 'additions': 1, 'deletions': 2, 'state': 'closed'}, {'id': 462674519, 'number': 396, 'closed': datetime.datetime(2020, 8, 7, 15, 29, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 4, 10, 24, 7, tzinfo=datetime.timezone.utc), 'time_taken': 277497.0, 'time_delta': '3 days, 5:04:57', 'additions': 68, 'deletions': 64, 'state': 'closed'}, {'id': 451768525, 'number': 395, 'closed': datetime.datetime(2020, 7, 31, 19, 13, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 18, 7, 20, 8, tzinfo=datetime.timezone.utc), 'time_taken': 1165999.0, 'time_delta': '13 days, 11:53:19', 'additions': 143, 'deletions': 94, 'state': 'closed'}, {'id': 433089245, 'number': 393, 'closed': datetime.datetime(2020, 6, 12, 20, 34, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 11, 13, 42, tzinfo=datetime.timezone.utc), 'time_taken': 111121.0, 'time_delta': '1 day, 6:52:01', 'additions': 4, 'deletions': 0, 'state': 'closed'}, {'id': 431047580, 'number': 392, 'closed': datetime.datetime(2020, 7, 28, 20, 17, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 8, 10, 52, 58, tzinfo=datetime.timezone.utc), 'time_taken': 4353849.0, 'time_delta': '50 days, 9:24:09', 'additions': 488, 'deletions': 403, 'state': 'closed'}, {'id': 430164234, 'number': 391, 'closed': datetime.datetime(2020, 7, 5, 17, 42, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 7, 15, 47, 46, tzinfo=datetime.timezone.utc), 'time_taken': 2426110.0, 'time_delta': '28 days, 1:55:10', 'additions': 478, 'deletions': 291, 'state': 'closed'}, {'id': 427647558, 'number': 390, 'closed': None, 'created': datetime.datetime(2020, 6, 4, 7, 37, 26, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 50, 'deletions': 0, 'state': 'open'}, {'id': 420031933, 'number': 388, 'closed': datetime.datetime(2020, 6, 6, 18, 34, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 19, 10, 39, 55, tzinfo=datetime.timezone.utc), 'time_taken': 1583674.0, 'time_delta': '18 days, 7:54:34', 'additions': 322, 'deletions': 47, 'state': 'closed'}, {'id': 416031316, 'number': 387, 'closed': datetime.datetime(2020, 5, 11, 16, 16, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 11, 11, 2, 29, tzinfo=datetime.timezone.utc), 'time_taken': 18819.0, 'time_delta': '5:13:39', 'additions': 2, 'deletions': 0, 'state': 'closed'}, {'id': 387008247, 'number': 376, 'closed': datetime.datetime(2020, 3, 13, 20, 52, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 12, 2, 35, 38, tzinfo=datetime.timezone.utc), 'time_taken': 152214.0, 'time_delta': '1 day, 18:16:54', 'additions': 19, 'deletions': 14, 'state': 'closed'}, {'id': 385625200, 'number': 371, 'closed': datetime.datetime(2020, 3, 18, 15, 39, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 9, 14, 36, 1, tzinfo=datetime.timezone.utc), 'time_taken': 781402.0, 'time_delta': '9 days, 1:03:22', 'additions': 235, 'deletions': 114, 'state': 'closed'}, {'id': 379733141, 'number': 357, 'closed': datetime.datetime(2020, 2, 28, 10, 49, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 25, 18, 29, 16, tzinfo=datetime.timezone.utc), 'time_taken': 231606.0, 'time_delta': '2 days, 16:20:06', 'additions': 2, 'deletions': 3, 'state': 'closed'}, {'id': 379414492, 'number': 356, 'closed': datetime.datetime(2020, 2, 28, 14, 12, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 25, 7, 39, 10, tzinfo=datetime.timezone.utc), 'time_taken': 282828.0, 'time_delta': '3 days, 6:33:48', 'additions': 2, 'deletions': 10, 'state': 'closed'}, {'id': 177286123, 'number': 239, 'closed': datetime.datetime(2018, 4, 5, 20, 45, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2018, 3, 25, 12, 5, 38, tzinfo=datetime.timezone.utc), 'time_taken': 981596.0, 'time_delta': '11 days, 8:39:56', 'additions': 70, 'deletions': 49, 'state': 'closed'}, {'id': 172226834, 'number': 230, 'closed': datetime.datetime(2018, 3, 5, 12, 55, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2018, 3, 1, 12, 45, 47, tzinfo=datetime.timezone.utc), 'time_taken': 346198.0, 'time_delta': '4 days, 0:09:58', 'additions': 1, 'deletions': 1, 'state': 'closed'}]"
