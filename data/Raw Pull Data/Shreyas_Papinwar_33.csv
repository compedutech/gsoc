pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
422480425,Listen to gitlab hook and parsing events,"**Status**

- [x] Tests
- [x] Parse Merge Request  ([Docs](https://docs.gitlab.com/ee/user/project/integrations/webhooks.html#merge-request-events))
- [x] New API endpoint (""webhooks/gitlab"")
",True,629,https://api.github.com/repos/packit/packit-service/pulls/629,https://github.com/packit/packit-service/pull/629,closed,676,4,10,1,48,22,1,0,[{'name': 'mergeit'}],2020-05-24 22:36:04+00:00,2020-06-05 16:31:30+00:00,1014926.0,"11 days, 17:55:26","[{'comment_id': 432295999, 'comment_body': ""As we discussed, I would avoid creating new trigger names. GitLab users should be familiar with the term pull-request.\r\n\r\n(We can think about aliasing later -- please, create an issue so we don't forget if you think it's important.)"", 'comment_created': datetime.datetime(2020, 5, 29, 7, 11, 12, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 432296558, 'comment_body': 'I would also reuse the `PullRequestModel`. Also in ogr, we use `pull-request` for all git-forges. (Maybe put a note to the docstring that it can be merge-request as well.)', 'comment_created': datetime.datetime(2020, 5, 29, 7, 12, 33, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 432298032, 'comment_body': 'I am not against but I am thinking whether it is possible to reuse some existing enum for that.\r\n\r\ne.g. this one:\r\n\r\nhttps://github.com/packit-service/ogr/blob/fda65c62ee039786f223433367a8c64d353f4692/ogr/abstract.py#L276-L280\r\n\r\n(But I know that you would still need to remap those two.', 'comment_created': datetime.datetime(2020, 5, 29, 7, 15, 59, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 432299093, 'comment_body': 'I would leave those free spaces here for better readability.', 'comment_created': datetime.datetime(2020, 5, 29, 7, 18, 30, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 432385679, 'comment_body': 'I think the `merge_request_webhook` fixture from `contest.py` should be visible here, do you really need to define another one here to get the same data?', 'comment_created': datetime.datetime(2020, 5, 29, 10, 5, 45, tzinfo=datetime.timezone.utc), 'commenter': 'jpopelka', 'type': 'User'}, {'comment_id': 432422726, 'comment_body': ""Also, can you please move the file from `webhooks/gitlab_mr_event.json` to `webhooks/gitlab/mr_event.json`?\r\nI'm currently refactoring the fixtures and moving all the `webhooks/github_*.json` to `webhooks/github/*.json`."", 'comment_created': datetime.datetime(2020, 5, 29, 11, 28, 57, tzinfo=datetime.timezone.utc), 'commenter': 'jpopelka', 'type': 'User'}, {'comment_id': 432432122, 'comment_body': 'Okay will do it👍\r\n', 'comment_created': datetime.datetime(2020, 5, 29, 11, 50, 53, tzinfo=datetime.timezone.utc), 'commenter': 'shreyaspapi', 'type': 'User'}, {'comment_id': 433075470, 'comment_body': 'Thanks for adding a test for the parsing. I have some more in mind..;)\r\n\r\n- Does pushing new commits to the merge-requests triggers different action? Can we have tests for both situations?\r\n- Can you please also tests for `project` and `package_config`?\r\n  - Look at the similar tests in this file.\r\n- Can you please add the database tests?\r\n  - They are placed here: https://github.com/packit-service/packit-service/blob/master/tests_requre/database/test_events.py\r\n  - Especially, we want to tests `db_trigger` and `project` properties. (Get inspired by other tests there.)\r\n', 'comment_created': datetime.datetime(2020, 6, 1, 7, 9, 10, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 434240179, 'comment_body': '> * Does pushing new commits to the merge-requests triggers different action? Can we have tests for both situations?\r\n\r\nPushing new commit to merge-request adds ```action: ""update""``` to the event, I have made a new test for that.\r\n\r\n> * Can you please add the database tests?\r\n\r\nAdded the database tests\r\n\r\n', 'comment_created': datetime.datetime(2020, 6, 3, 0, 8, 35, tzinfo=datetime.timezone.utc), 'commenter': 'shreyaspapi', 'type': 'User'}, {'comment_id': 434419082, 'comment_body': 'Can you please add also asserts or a new test(s) for `event_object.project` and `event_object.package_config` like we have in other tests?\r\n\r\n```python\r\n        assert isinstance(event_object.project, GithubProject)\r\n        assert event_object.project.full_repo_name == ""packit-service/packit""\r\n        assert (\r\n            not event_object.base_project  # With Github app, we cannot work with fork repo\r\n        )\r\n\r\n        flexmock(PackageConfigGetter).should_receive(\r\n            ""get_package_config_from_repo""\r\n        ).with_args(\r\n            base_project=None,\r\n            project=event_object.project,\r\n            pr_id=342,\r\n            reference=""528b803be6f93e19ca4130bf4976f2800a3004c4"",\r\n            fail_when_missing=False,\r\n            spec_file_path=None,\r\n        ).and_return(\r\n            flexmock()\r\n        ).once()\r\n        assert event_object.package_config\r\n```', 'comment_created': datetime.datetime(2020, 6, 3, 9, 5, 1, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 434419574, 'comment_body': 'You could use the values above but I have no problem with having new ones.', 'comment_created': datetime.datetime(2020, 6, 3, 9, 5, 45, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 434426372, 'comment_body': 'Regarding the mock config:\r\n\r\nInstead of using this:\r\n\r\n```python\r\n    @pytest.fixture()\r\n    def mock_config(self):\r\n        service_config = ServiceConfig()\r\n        service_config.github_app_id = 123123\r\n        service_config.github_app_cert_path = None\r\n        service_config.github_token = ""token""\r\n        service_config.dry_run = False\r\n        service_config.github_requests_log_path = ""/path""\r\n        ServiceConfig.service_config = service_config\r\n```\r\n\r\nYou can use this:\r\n\r\n```python\r\n    @pytest.fixture()\r\n    def mock_config(self):\r\n        service_config = ServiceConfig()\r\n        service_config.services = {\r\n            GithubService(token=""token""),\r\n            GitLabService(token=""token""),\r\n        }\r\n        service_config.dry_run = False\r\n        service_config.github_requests_log_path = ""/path""\r\n        ServiceConfig.service_config = service_config\r\n```', 'comment_created': datetime.datetime(2020, 6, 3, 9, 17, 2, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 434721751, 'comment_body': ""Even with the config I am getting \r\n\r\n``` Authentication for url 'https://gitlab.com/testing-packit/hello-there' is missing in the config ```\r\n\r\nCan anyone please help me here?"", 'comment_created': datetime.datetime(2020, 6, 3, 17, 4, 2, tzinfo=datetime.timezone.utc), 'commenter': 'shreyaspapi', 'type': 'User'}, {'comment_id': 435172247, 'comment_body': '- Can you please rebase your PR? (We fixed an issue in CI so we can see the test results also here. The `tests_requre` still has a problem in CI.)\r\n- Please, check that you have a fresh version of `OGR` since we fixed a bug there related to this.', 'comment_created': datetime.datetime(2020, 6, 4, 11, 6, 13, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 435732068, 'comment_body': '```suggestion\r\n        assert isinstance(event_object.project, GitLabProject)\r\n```', 'comment_created': datetime.datetime(2020, 6, 5, 7, 15, 20, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 435734885, 'comment_body': ""This is probably not relevant to gitlab, but we need to check if we need to check this:\r\n- If we don't fill this object, we need to do everything (comments, commit-status, getting config-file content from the PR commit) from upstream.\r\n- Or have in mind (and check) if we have rights to do all of the OGR usage without having rights to the fork repo."", 'comment_created': datetime.datetime(2020, 6, 5, 7, 21, 30, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 435748231, 'comment_body': 'Gotcha!', 'comment_created': datetime.datetime(2020, 6, 5, 7, 49, 1, tzinfo=datetime.timezone.utc), 'commenter': 'shreyaspapi', 'type': 'User'}, {'comment_id': 435796944, 'comment_body': 'Marking as resolved.\r\n\r\nThe fixture was actually not used in the test... We already resolved it. (Any we can use the global, auto-used one introduced in #666 .)', 'comment_created': datetime.datetime(2020, 6, 5, 9, 19, 19, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 435863647, 'comment_body': 'Still relevant...', 'comment_created': datetime.datetime(2020, 6, 5, 11, 37, 38, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 435864206, 'comment_body': 'Another copy-paste leftover from GitHub..;)', 'comment_created': datetime.datetime(2020, 6, 5, 11, 38, 51, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 435865595, 'comment_body': 'okay.', 'comment_created': datetime.datetime(2020, 6, 5, 11, 42, tzinfo=datetime.timezone.utc), 'commenter': 'shreyaspapi', 'type': 'User'}, {'comment_id': 435895038, 'comment_body': 'Made the changes.', 'comment_created': datetime.datetime(2020, 6, 5, 12, 42, 17, tzinfo=datetime.timezone.utc), 'commenter': 'shreyaspapi', 'type': 'User'}]","[{'commit_sha': 'f120c76ed5cea04ac2de040d9ee51721ae0e04fc', 'committer_username': 'shreyaspapi', 'committer_name': 'Shreyas Papinwar', 'committer_email': 'spapinwar@gmail.com', 'commit_date': datetime.datetime(2016, 9, 20, 15, 3, 57, tzinfo=datetime.timezone.utc)}]",Shreyas Papinwar,22324802,spapinwar@gmail.com,User,,133,,44,48
463941294,Adding project token model and gitlab authentication,"Handing webhook authentication coming from Gitlab instance.

Currently, we are manually creating tokens for GitLab projects and adding them in gitlab_webhook_tokens.

Workflow for the users -
- Project Maintainer / Admin will add packit webhook in project settings -> webhooks without any token with permissions of all events.
- Project Maintainer / Admin will add Packit-User for that instance as an admin of the repository.
- Packit-Service (user) will automatically create a confidential issue to the repository with a project-specific unique token.
- Maintainer / Admin to use packit-service will have to update the webhook with the token found in confidential issue (created by packit-user).

- [x] Add tests",True,769,https://api.github.com/repos/packit/packit-service/pulls/769,https://github.com/packit/packit-service/pull/769,closed,229,8,10,1,31,51,1,0,[{'name': 'mergeit'}],2020-08-06 10:35:00+00:00,2020-08-21 06:40:05+00:00,1281905.0,"14 days, 20:05:05","[{'comment_id': 471379147, 'comment_body': 'What is the benefit here? Can we avoid having just another value in the config?\r\n\r\n\r\n', 'comment_created': datetime.datetime(2020, 8, 17, 10, 13, 23, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 471379629, 'comment_body': '```suggestion\r\n            ProjectTokenModel.create(\r\n```', 'comment_created': datetime.datetime(2020, 8, 17, 10, 14, 26, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 471382729, 'comment_body': '- Can we guess the link?\r\n- Is this really clear? GitLab settings are a bit complicated and are divided into a lot of pages.\r\n- What is the name of the variable sent with the webhook?\r\n- I would use `  for token value or other markdown formating for better readability and being able to copy-paste it easily.', 'comment_created': datetime.datetime(2020, 8, 17, 10, 20, 28, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 471383540, 'comment_body': 'Is it really used?', 'comment_created': datetime.datetime(2020, 8, 17, 10, 22, 4, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 471515491, 'comment_body': 'We are using `gitlab_token_secret` to encode the json payload which in this case its `{namespace: ""the-namespace"", repo_name:""the-repo"", project_url: ""https://theurl.com""}`. eg - https://pyjwt.readthedocs.io/en/latest/#example-usage\r\n\r\nWith the same secret then we can decode the token and directly check for data from the event (repo_name, Namespace)', 'comment_created': datetime.datetime(2020, 8, 17, 14, 25, 26, tzinfo=datetime.timezone.utc), 'commenter': 'shreyaspapi', 'type': 'User'}, {'comment_id': 471516847, 'comment_body': 'I can use webhook_secret from the config But wanted to keep things different from Github here.', 'comment_created': datetime.datetime(2020, 8, 17, 14, 27, 22, tzinfo=datetime.timezone.utc), 'commenter': 'shreyaspapi', 'type': 'User'}, {'comment_id': 471540204, 'comment_body': ""> * Can we guess the link?\r\n\r\nYes, making users click the link is good idea.\r\n\r\n> * Is this really clear? GitLab settings are a bit complicated and are divided into a lot of pages.\r\n\r\nHow about,\r\n\r\nTitle- Packit-Service Authentication\r\n\r\nBody -\r\n```\r\nTo configure Packit-Service with `repo_name` you need to configure the webhook settings.\r\nHead to https://urltowebhook.com and add the secret token `secret_token` to authenticate\r\nrequests coming to Packit.\r\n\r\nGrant [packit_user](https://userlink.com) `admin` permissions on the {namspace}/{project} project.\r\nYou can add Packit user by clicking [here](link to the add_users settings) \r\n  manually to match the Packit configuration.\r\n```\r\n\r\nOR\r\n\r\nBody-\r\n```\r\nPlease following these steps to configure Packit correctly\r\n\r\n- Packit needs to validate requests coming from `repo_name`, Head to https://urltowebhook.com \r\nand add the secret_token as `secret_token`, to webhook settings.\r\n- Grant [packit_user](https://userlink.com) `admin` permissions on the {namespace}/{project} project.\r\n- You can add Packit user by clicking [here](link to the add_users settings) \r\n  manually to match the Packit configuration.\r\n```\r\n> * What is the name of the variable sent with the webhook?\r\n\r\nit's secret_token.\r\n\r\n\r\n> * I would use ` for token value or other markdown formating for better readability and being able to copy-paste it easily.\r\n\r\n👍\r\n\r\n"", 'comment_created': datetime.datetime(2020, 8, 17, 15, 1, 44, tzinfo=datetime.timezone.utc), 'commenter': 'shreyaspapi', 'type': 'User'}, {'comment_id': 471971393, 'comment_body': ""Nice.\r\n\r\nI like the first version of the text. It's more friendly.\r\n\r\n\r\n\r\n> > * What is the name of the variable sent with the webhook?\r\n> \r\n> it's secret_token.\r\n\r\nIsn't UPPER_CASE more common?"", 'comment_created': datetime.datetime(2020, 8, 18, 7, 29, 3, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 471972784, 'comment_body': ""My point is if this info is useful to us and worth specifying another token.\r\n\r\nWouldn't random tokens work as well?"", 'comment_created': datetime.datetime(2020, 8, 18, 7, 31, 8, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 471973315, 'comment_body': '> I can use webhook_secret from the config But wanted to keep things different from Github here.\r\n\r\nI agree. I would not reuse a different token for another usage.', 'comment_created': datetime.datetime(2020, 8, 18, 7, 31, 59, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 472030624, 'comment_body': 'Yup! Changed the body of the issue.', 'comment_created': datetime.datetime(2020, 8, 18, 9, 6, 4, tzinfo=datetime.timezone.utc), 'commenter': 'shreyaspapi', 'type': 'User'}, {'comment_id': 472149511, 'comment_body': ""Don't we want to use the config secret here?"", 'comment_created': datetime.datetime(2020, 8, 18, 12, 41, 9, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 472150390, 'comment_body': ""Do we need the UPPER_CASE here? It's nothing serious. It's a part of the regular workflow."", 'comment_created': datetime.datetime(2020, 8, 18, 12, 42, 4, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 472152825, 'comment_body': 'The naming is a bit misleading. Do we create token or issue here?\r\n\r\n\r\n```suggestion\r\n                self.create_confidential_issue_with_token()\r\n```', 'comment_created': datetime.datetime(2020, 8, 18, 12, 44, 41, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 472155082, 'comment_body': 'I am a bit confused why we have `SECRET_TOKEN` in the issue text and `X-Gitlab-Token` here.', 'comment_created': datetime.datetime(2020, 8, 18, 12, 46, 57, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 472155526, 'comment_body': ""Don't we want to use configured secret also here?"", 'comment_created': datetime.datetime(2020, 8, 18, 12, 47, 24, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 472167174, 'comment_body': 'Gitlab webhook settings have 2 fields - URL, Secret Token. The token entered in the field is sent as X-Gitlab-Token in the header. it might be easier for maintainer or admin to read SECRET_TOKEN rather than X-Gitlab-Token.\r\n\r\n<img width=""1016"" alt=""Screenshot 2020-08-18 at 6 25 03 PM"" src=""https://user-images.githubusercontent.com/22324802/90515342-24f01a00-e180-11ea-9014-f4a4e589a0a0.png"">\r\n', 'comment_created': datetime.datetime(2020, 8, 18, 12, 59, 29, tzinfo=datetime.timezone.utc), 'commenter': 'shreyaspapi', 'type': 'User'}, {'comment_id': 472167456, 'comment_body': 'Yes my mistake, Changing it.', 'comment_created': datetime.datetime(2020, 8, 18, 12, 59, 48, tzinfo=datetime.timezone.utc), 'commenter': 'shreyaspapi', 'type': 'User'}, {'comment_id': 472167730, 'comment_body': '👍\r\n', 'comment_created': datetime.datetime(2020, 8, 18, 13, 0, 4, tzinfo=datetime.timezone.utc), 'commenter': 'shreyaspapi', 'type': 'User'}, {'comment_id': 472192336, 'comment_body': 'Changed it.', 'comment_created': datetime.datetime(2020, 8, 18, 13, 24, 33, tzinfo=datetime.timezone.utc), 'commenter': 'shreyaspapi', 'type': 'User'}, {'comment_id': 472213296, 'comment_body': 'Aha. Now I get it. So we should use `Secret Token` in the issue then... Sorry.', 'comment_created': datetime.datetime(2020, 8, 18, 13, 51, 59, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 472214683, 'comment_body': ""OK, I misunderstood that completely. We should use `Secret token` or `Secret token field` since it's the name of the settings field, not some key-value pair user needs to specify... "", 'comment_created': datetime.datetime(2020, 8, 18, 13, 53, 52, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 472215620, 'comment_body': 'Ah okay!', 'comment_created': datetime.datetime(2020, 8, 18, 13, 55, 9, tzinfo=datetime.timezone.utc), 'commenter': 'shreyaspapi', 'type': 'User'}, {'comment_id': 472216401, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2020, 8, 18, 13, 56, 15, tzinfo=datetime.timezone.utc), 'commenter': 'shreyaspapi', 'type': 'User'}, {'comment_id': 472232661, 'comment_body': 'Would be nice to place some reason why we need such high permissions.', 'comment_created': datetime.datetime(2020, 8, 18, 14, 18, 36, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 472235530, 'comment_body': 'What does it mean to `match the Packit configuration`? Cannot we remove that part?\r\n\r\n```suggestion\r\n                f""on the {namespace}/{repo_name} project. You can add Packit user""\r\n                f""[here]({http_url}/-/project_members)."",\r\n```', 'comment_created': datetime.datetime(2020, 8, 18, 14, 22, 31, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 472236230, 'comment_body': 'Why this change?', 'comment_created': datetime.datetime(2020, 8, 18, 14, 23, 27, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 472287871, 'comment_body': 'Its already a static method, That should not have been there.', 'comment_created': datetime.datetime(2020, 8, 18, 15, 32, 26, tzinfo=datetime.timezone.utc), 'commenter': 'shreyaspapi', 'type': 'User'}, {'comment_id': 472291165, 'comment_body': 'I have added - \r\n\r\n```\r\nPackit needs rights to set commit status to merge requests, Please grant\\n""\r\nf""[{packit_user}](https://gitlab.com/{packit_user}) `admin` permissions\\n""\r\nf""on the {namespace}/{repo_name} project.\r\n```', 'comment_created': datetime.datetime(2020, 8, 18, 15, 37, 4, tzinfo=datetime.timezone.utc), 'commenter': 'shreyaspapi', 'type': 'User'}, {'comment_id': 472815974, 'comment_body': '```suggestion\r\n            logger.info(""Confidential issue will be created."")\r\n```\r\n\r\nor\r\n\r\n```suggestion\r\n            logger.info(""Creating confidential issue."")\r\n```', 'comment_created': datetime.datetime(2020, 8, 19, 7, 42, 32, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 472822973, 'comment_body': 'This looks handy but a bit confusing -- I would use a regular string in those two places so one does not need to search and think about that `msg_failed` function.\r\n\r\nYou can then use a meaningful sentence -- e.g. `Signature of the payload token is not valid.` and `Payload token does not match the project.""', 'comment_created': datetime.datetime(2020, 8, 19, 7, 50, 17, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 472825076, 'comment_body': ""Wait, do we need to save it in the database?\r\n\r\n- Looks like you are not reading it from the database when we get it.\r\n- With the configured secret token, we can regenerate the token if needed.\r\n\r\nThat's really nice!"", 'comment_created': datetime.datetime(2020, 8, 19, 7, 52, 43, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 472827043, 'comment_body': 'One problem with that is that we can potentially create a lot of issues. That can be easily fixed later.', 'comment_created': datetime.datetime(2020, 8, 19, 7, 55, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 472828601, 'comment_body': ""This is probably unnecessary here -- since we are creating confidential issues, we already have that permission..;)\r\n\r\n(We might want to create a regular issue asking for that permission if we don't have that permission.)"", 'comment_created': datetime.datetime(2020, 8, 19, 7, 56, 46, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 472842348, 'comment_body': 'Here I am checking if the project token in present in the database or not. If present we can assume we have created an issue.\r\n', 'comment_created': datetime.datetime(2020, 8, 19, 8, 12, 9, tzinfo=datetime.timezone.utc), 'commenter': 'shreyaspapi', 'type': 'User'}, {'comment_id': 472844082, 'comment_body': ""Anyone with or without permission to the repository can create confidential issues. User which don't have permission cannot see other confidential issues created."", 'comment_created': datetime.datetime(2020, 8, 19, 8, 14, tzinfo=datetime.timezone.utc), 'commenter': 'shreyaspapi', 'type': 'User'}, {'comment_id': 472845190, 'comment_body': 'Yes `Signature of the payload token is not valid.` this sounds better.', 'comment_created': datetime.datetime(2020, 8, 19, 8, 15, 11, tzinfo=datetime.timezone.utc), 'commenter': 'shreyaspapi', 'type': 'User'}, {'comment_id': 472847436, 'comment_body': 'Do we really want to do this? While testing, I did exactly this and it created 7 issues in few seconds. On each event, it will create an issue.', 'comment_created': datetime.datetime(2020, 8, 19, 8, 17, 36, tzinfo=datetime.timezone.utc), 'commenter': 'shreyaspapi', 'type': 'User'}, {'comment_id': 472850954, 'comment_body': 'We might skip the database and check with the repo issues if we have created one or not (But this has a bit delay and will have issues with the race conditions). ', 'comment_created': datetime.datetime(2020, 8, 19, 8, 21, 34, tzinfo=datetime.timezone.utc), 'commenter': 'shreyaspapi', 'type': 'User'}, {'comment_id': 472852965, 'comment_body': '> Do we really want to do this? While testing, I did exactly this and it created 7 issues in few seconds. On each event, it will create an issue.\r\n\r\n7 issues? How come we got 7 messages at once?', 'comment_created': datetime.datetime(2020, 8, 19, 8, 24, 55, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 472853472, 'comment_body': 'Aha, ok. My bad. That really does not make sense..;)\r\n\r\nThanks for the explanation.', 'comment_created': datetime.datetime(2020, 8, 19, 8, 25, 41, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 472854257, 'comment_body': ""> We might skip the database and check with the repo issues if we have created one or not (But this has a bit delay and will have issues with the race conditions).\r\n\r\nWe can at least try. The problem is that we can't list confidential issues if we don't have admin permissions."", 'comment_created': datetime.datetime(2020, 8, 19, 8, 27, 4, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 472854473, 'comment_body': 'Comment events, the issue created by the Packit itself counted as an event. 😅', 'comment_created': datetime.datetime(2020, 8, 19, 8, 27, 27, tzinfo=datetime.timezone.utc), 'commenter': 'shreyaspapi', 'type': 'User'}, {'comment_id': 472856577, 'comment_body': '> What about removing the model for now and fix the duplicate issues later?\r\n\r\nYes okay!\r\n', 'comment_created': datetime.datetime(2020, 8, 19, 8, 30, 46, tzinfo=datetime.timezone.utc), 'commenter': 'shreyaspapi', 'type': 'User'}, {'comment_id': 472857331, 'comment_body': ""Yes, I got it. My point is that saving tokens is now only an implementation detail how to get rid of the duplicates and we really don't care about the token value."", 'comment_created': datetime.datetime(2020, 8, 19, 8, 32, 3, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 472966719, 'comment_body': 'Made them in different variables.', 'comment_created': datetime.datetime(2020, 8, 19, 11, 44, 23, tzinfo=datetime.timezone.utc), 'commenter': 'shreyaspapi', 'type': 'User'}, {'comment_id': 472985743, 'comment_body': ""The name does not match the current content. We don't save tokens any more."", 'comment_created': datetime.datetime(2020, 8, 19, 12, 20, 24, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 472988939, 'comment_body': 'How about `ProjectAuthenticationIssueModel`', 'comment_created': datetime.datetime(2020, 8, 19, 12, 25, 51, tzinfo=datetime.timezone.utc), 'commenter': 'shreyaspapi', 'type': 'User'}, {'comment_id': 473068942, 'comment_body': 'Sounds good.', 'comment_created': datetime.datetime(2020, 8, 19, 14, 23, 24, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 473069349, 'comment_body': ""Don't forget to rename a table as well..."", 'comment_created': datetime.datetime(2020, 8, 19, 14, 23, 59, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 473086679, 'comment_body': 'If I can suggest another nit-pick change..;)\r\n\r\n(Just moving the variables near their usage.)\r\n\r\n```suggestion\r\n        try:\r\n            token_decoded = jwt.decode(\r\n                token, config.gitlab_token_secret, algorithms=[""HS256""]\r\n            )\r\n        except jwt.exceptions.InvalidSignatureError:\r\n            msg_failed_signature = ""Payload token does not match the project.""\r\n            logger.warning(msg_failed_signature)\r\n            raise ValidationFailed(msg_failed_signature)\r\n\r\n        project_data = request.json[""project""]\r\n        namespace, repo_name = project_data[""path_with_namespace""].split(""/"")\r\n        token_namespace = token_decoded[""namespace""]\r\n        token_repo_name = token_decoded[""repo_name""]\r\n\r\n        if (token_namespace, token_repo_name) == (namespace, repo_name):\r\n            logger.debug(""Payload signature is OK."")\r\n        else:\r\n            msg_failed_validation = ""Signature of the payload token is not valid.""\r\n            logger.warning(msg_failed_validation)\r\n            raise ValidationFailed(msg_failed_validation)\r\n```', 'comment_created': datetime.datetime(2020, 8, 19, 14, 46, 33, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}]","[{'commit_sha': 'e8af0d1c125fdf19b359b42f0916b8df281d9302', 'committer_username': 'shreyaspapi', 'committer_name': 'Shreyas Papinwar', 'committer_email': 'spapinwar@gmail.com', 'commit_date': datetime.datetime(2016, 9, 20, 15, 3, 57, tzinfo=datetime.timezone.utc)}]",Shreyas Papinwar,22324802,spapinwar@gmail.com,User,,133,,44,48
449870967,Reporting build status while no permission,"In Gitlab while working with upstream-project we don't have access to the merge request commit coming from fork repos. To set commit status we need access to the repository. 

So, if the reporting fails we can report the state using the MR comment and request access to the forked repository ([docs](https://docs.gitlab.com/ee/api/access_requests.html)). 

- [x] Adding the functionality to report build status using MR comment.
- [x] Fixed enqueue error #741 
- [x] Requesting for project access (with right permissions).
",True,740,https://api.github.com/repos/packit/packit-service/pulls/740,https://github.com/packit/packit-service/pull/740,closed,220,19,8,1,32,51,1,0,[{'name': 'mergeit'}],2020-07-16 03:31:44+00:00,2020-09-02 09:53:55+00:00,4170131.0,"48 days, 6:22:11","[{'comment_id': 455700062, 'comment_body': 'Catching such general exception can be dangerous -- there are a lot of other problems we can get.', 'comment_created': datetime.datetime(2020, 7, 16, 10, 54, 1, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 455700851, 'comment_body': '- Please, use key-word arguments for better readability.\r\n- `identifier` can be non-numeric for non-merge-request events.', 'comment_created': datetime.datetime(2020, 7, 16, 10, 55, 30, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 455701266, 'comment_body': 'Use docstring for that information. (The `""""""something""""""` string bellow the function/class header.)', 'comment_created': datetime.datetime(2020, 7, 16, 10, 56, 20, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 457133423, 'comment_body': 'I could only find identifier as common between all events while testing.', 'comment_created': datetime.datetime(2020, 7, 20, 7, 34, 1, tzinfo=datetime.timezone.utc), 'commenter': 'shreyaspapi', 'type': 'User'}, {'comment_id': 460931200, 'comment_body': 'My point was about `int(self.metadata.identifier)` that we can get non-numeric value from `self.metadata.identifier`. What will cause an exception...', 'comment_created': datetime.datetime(2020, 7, 27, 14, 27, 54, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 460932863, 'comment_body': 'I would use the most specific exception possible and ideally check also content. We can get more exception here. (E.g. network/authentication problems...).', 'comment_created': datetime.datetime(2020, 7, 27, 14, 30, 8, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 460935042, 'comment_body': 'Maybe this to show the only difference more clearly?\r\n\r\n```suggestion\r\n            self._status_reporter = StatusReporter(\r\n                project=self.base_project if isinstance(self.project, GitlabProject) else self.project,\r\n                commit_sha=self.metadata.commit_sha,\r\n                pr_id=self.metadata.pr_id\r\n            )\r\n```', 'comment_created': datetime.datetime(2020, 7, 27, 14, 32, 59, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 460937305, 'comment_body': 'The name `check_project_permission` looks more like a method. With properties, I would use some `is_*` form of the name. E.g. `is_reporting_allowed`, or `is_fork_status_allowed`,...', 'comment_created': datetime.datetime(2020, 7, 27, 14, 35, 51, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 460938171, 'comment_body': ""Don't we have some argument to do this with the public method?"", 'comment_created': datetime.datetime(2020, 7, 27, 14, 37, 2, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 460938596, 'comment_body': 'Can you please document this a bit?', 'comment_created': datetime.datetime(2020, 7, 27, 14, 37, 39, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 461263402, 'comment_body': 'Yes added more specific exceptions.', 'comment_created': datetime.datetime(2020, 7, 28, 1, 28, tzinfo=datetime.timezone.utc), 'commenter': 'shreyaspapi', 'type': 'User'}, {'comment_id': 461263508, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2020, 7, 28, 1, 28, 25, tzinfo=datetime.timezone.utc), 'commenter': 'shreyaspapi', 'type': 'User'}, {'comment_id': 461263782, 'comment_body': 'Yup, is_reporting_allowed is better name here. Changed it!', 'comment_created': datetime.datetime(2020, 7, 28, 1, 29, 21, tzinfo=datetime.timezone.utc), 'commenter': 'shreyaspapi', 'type': 'User'}, {'comment_id': 461264050, 'comment_body': 'Thanks! Found it.', 'comment_created': datetime.datetime(2020, 7, 28, 1, 30, 16, tzinfo=datetime.timezone.utc), 'commenter': 'shreyaspapi', 'type': 'User'}, {'comment_id': 461264324, 'comment_body': 'Found the method get_comments(), changed the comment reporting a bit. Also added few comments.', 'comment_created': datetime.datetime(2020, 7, 28, 1, 31, 19, tzinfo=datetime.timezone.utc), 'commenter': 'shreyaspapi', 'type': 'User'}, {'comment_id': 461355345, 'comment_body': 'What do you mean by this?\r\n\r\n- Do you mean non-MR events like push/release? For those, we should use upstream projects.\r\n- If you mean results events, we can get that info from the database.', 'comment_created': datetime.datetime(2020, 7, 28, 6, 47, 54, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 461357156, 'comment_body': ""Don't we want to raise those exceptions?\r\n\r\nMy point with specific exceptions was not to ignore other exceptions than the `GitlabCreateError` what is actually done here..;) We can catch (and ignore) only the right one and leave the other ones to go through."", 'comment_created': datetime.datetime(2020, 7, 28, 6, 51, 47, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 461359094, 'comment_body': ""Please, document the reason, not the code itself..;)  We can see that we don't do anything if `check_names` is a list but what does it mean and when it can occur?"", 'comment_created': datetime.datetime(2020, 7, 28, 6, 56, 21, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 461364086, 'comment_body': 'What is done when we get that exception? Nothing is changed on GitLab side?\r\n\r\nWhat can we do instead to show that info to the user? What about having a unique status for each step of our workflow? e.g. `packit-service/copr-build-srpm`, `packit-service/copr-build-fedora-31-rpm` (We do that in the past..;)', 'comment_created': datetime.datetime(2020, 7, 28, 7, 7, 36, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 461505474, 'comment_body': '> * If you mean results events, we can get that info from the database.\r\n\r\nYeah, I meant the result events. I will try to use the info from the database.', 'comment_created': datetime.datetime(2020, 7, 28, 11, 19, 24, tzinfo=datetime.timezone.utc), 'commenter': 'shreyaspapi', 'type': 'User'}, {'comment_id': 462184301, 'comment_body': ""We don't store base_project info in database."", 'comment_created': datetime.datetime(2020, 7, 29, 10, 1, 12, tzinfo=datetime.timezone.utc), 'commenter': 'shreyaspapi', 'type': 'User'}, {'comment_id': 462193814, 'comment_body': 'This will not work for non-pr cases. We should return `base_project` in that case.', 'comment_created': datetime.datetime(2020, 7, 29, 10, 18, 46, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 462924571, 'comment_body': 'The best I could think of was by cathing the value error here which will come from pr_id, in case of non-pr events.', 'comment_created': datetime.datetime(2020, 7, 30, 11, 14, 11, tzinfo=datetime.timezone.utc), 'commenter': 'shreyaspapi', 'type': 'User'}, {'comment_id': 463000574, 'comment_body': 'What about this?\r\n\r\n```suggestion\r\n            if self.pr_id:\r\n                self._base_project = self.project.get_pr(\r\n                    pr_id=self.pr_id\r\n                ).source_project\r\n            else:\r\n                self._base_project = self.project\r\n```', 'comment_created': datetime.datetime(2020, 7, 30, 13, 35, 59, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 463542433, 'comment_body': ""@lbarcziova do we have `pr_id` in the `event_dict`? (So we don't need to do this `try-except`.) Thanks"", 'comment_created': datetime.datetime(2020, 7, 31, 10, 50, 57, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 463556798, 'comment_body': 'it depends on the content of the original Event, but in EventData (self.metadata) we are trying to get both [pr_id](https://github.com/packit-service/packit-service/blob/398d0d20060ea3af92d21d9dab9b3adef599f365/packit_service/service/events.py#L186)  and [identifier](https://github.com/packit-service/packit-service/blob/398d0d20060ea3af92d21d9dab9b3adef599f365/packit_service/service/events.py#L188), so this could be definitely simplified', 'comment_created': datetime.datetime(2020, 7, 31, 11, 28, 55, tzinfo=datetime.timezone.utc), 'commenter': 'lbarcziova', 'type': 'User'}, {'comment_id': 463714859, 'comment_body': '@lbarcziova Thanks.', 'comment_created': datetime.datetime(2020, 7, 31, 16, 39, 17, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 464237609, 'comment_body': 'What about the `check_names is None` scenario. (At least from the type annotation, it looks like we can get that.)', 'comment_created': datetime.datetime(2020, 8, 3, 7, 24, 47, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 464238193, 'comment_body': 'Can we merge those to one comment to not be so spammy?', 'comment_created': datetime.datetime(2020, 8, 3, 7, 26, 5, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 469093513, 'comment_body': 'Solved it here - [R438-R439](https://github.com/packit/packit-service/pull/740/files#diff-599fa650469aeda8bea187fa74ed9502R438-R439)', 'comment_created': datetime.datetime(2020, 8, 12, 8, 28, 29, tzinfo=datetime.timezone.utc), 'commenter': 'shreyaspapi', 'type': 'User'}, {'comment_id': 475276358, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2020, 8, 23, 22, 43, 47, tzinfo=datetime.timezone.utc), 'commenter': 'shreyaspapi', 'type': 'User'}, {'comment_id': 475366857, 'comment_body': 'If I read that correctly, we don\'t want to process status that is final (`error`/`success`/`failure`).\r\n\r\n- What will be done for those ""final"" states?\r\n- Is it possible to move this logic (= `if state not in ...` condition) out of this method? Is it too complicated?\r\n- Can we add a comment and/or update docstring to say why we are doing this?', 'comment_created': datetime.datetime(2020, 8, 24, 6, 23, 40, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 475367499, 'comment_body': 'What about moving the `report_status_by_comment` to `status_reporter` class?', 'comment_created': datetime.datetime(2020, 8, 24, 6, 25, 24, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 475418781, 'comment_body': 'Yes, I have moved `report_status_by_comment ` to `StatusReporter` class.', 'comment_created': datetime.datetime(2020, 8, 24, 8, 16, 45, tzinfo=datetime.timezone.utc), 'commenter': 'shreyaspapi', 'type': 'User'}, {'comment_id': 475422704, 'comment_body': ""@lachmanfrantisek \r\nWe only want to report status by comment if it's a final state (error / success / failure).\r\n\r\n```\r\nif state not in build_states or check_names is None:\r\n    return\r\n```\r\nThe above condition was still valid, as we are not doing anything if `state` has any value other then (error/success/failure).\r\n\r\nAnyways I have updated and moved that part as suggested. \r\n\r\nI think this might be easier to read -\r\n```\r\nif state in build_states and check_names is not None:\r\n    self.status_reporter.report_status_by_comment(state, url, check_names)\r\n```"", 'comment_created': datetime.datetime(2020, 8, 24, 8, 24, 23, tzinfo=datetime.timezone.utc), 'commenter': 'shreyaspapi', 'type': 'User'}, {'comment_id': 475429203, 'comment_body': 'Ah, yes. My bad...;)\r\n\r\nThanks!', 'comment_created': datetime.datetime(2020, 8, 24, 8, 35, 49, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 481789700, 'comment_body': 'You can use [project.get_web_url method](https://github.com/packit/ogr/blob/176add79eeb7d71e765550da76c9cdc8aced9e92/ogr/services/gitlab/project.py#L554) instead for better readability:\r\n\r\n```suggestion\r\n                f""configure the webhook settings. Head to {project.get_web_url()}/hooks and add\\n""\r\n```', 'comment_created': datetime.datetime(2020, 9, 2, 6, 36, 32, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 481789905, 'comment_body': '```suggestion\r\n                f""[here]({project.get_web_url()}/-/project_members)."",\r\n```', 'comment_created': datetime.datetime(2020, 9, 2, 6, 36, 49, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 481791523, 'comment_body': ""I am not sure if this helps too much. I am leaving that to your judgement if it is clearer now. (=You don't need to change that if you want..;)"", 'comment_created': datetime.datetime(2020, 9, 2, 6, 39, 5, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 481793317, 'comment_body': 'Is there something in the exception instance or exception string representation what can we use to filter only those that mean `Access already requested`?', 'comment_created': datetime.datetime(2020, 9, 2, 6, 41, 27, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 481794163, 'comment_body': '```suggestion\r\n            final_commit_states = [\r\n                CommitStatus.error,\r\n                CommitStatus.success,\r\n                CommitStatus.failure,\r\n            ]\r\n\r\n            # We are only commenting final states to avoid multiple comments for a build\r\n            # Ignoring all other states eg. pending, running\r\n            if state in final_commit_states and check_names is not None:\r\n                self.status_reporter.report_status_by_comment(state, url, check_names)\r\n```', 'comment_created': datetime.datetime(2020, 9, 2, 6, 42, 36, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 481796043, 'comment_body': ""We can use a table here (not need to be done here). The table looks better but only in case we don't need to provide any logs inside."", 'comment_created': datetime.datetime(2020, 9, 2, 6, 45, 9, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 481798818, 'comment_body': 'What about switching the order of those two `if` branches to have the shorter one in the beginning?\r\n\r\nSo, instead of this:\r\n```python\r\nif something:\r\n    # long\r\nelse:\r\n    # short\r\n```\r\n\r\nuse this:\r\n\r\n```python\r\nif not something:\r\n    # short\r\n    return\r\n\r\n# long\r\n```', 'comment_created': datetime.datetime(2020, 9, 2, 6, 48, 45, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 481800197, 'comment_body': ""Do we want to solve this here or make a separate PR for this. We have multiple possibilities for that so it's worth a separate discussion."", 'comment_created': datetime.datetime(2020, 9, 2, 6, 50, 31, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 481862877, 'comment_body': '👍', 'comment_created': datetime.datetime(2020, 9, 2, 8, 5, 57, tzinfo=datetime.timezone.utc), 'commenter': 'shreyaspapi', 'type': 'User'}, {'comment_id': 481863342, 'comment_body': ""Yup we don't, I have changed it!"", 'comment_created': datetime.datetime(2020, 9, 2, 8, 6, 30, tzinfo=datetime.timezone.utc), 'commenter': 'shreyaspapi', 'type': 'User'}, {'comment_id': 481875744, 'comment_body': 'Can you revert that, please?', 'comment_created': datetime.datetime(2020, 9, 2, 8, 20, 29, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 481879870, 'comment_body': 'We are probably missing the header of the table. It should look like this:\r\n\r\n```\r\n| some text | in header |\r\n| ------------- | ------------ |\r\n| one | line |\r\n| another | line |\r\n```\r\n| some text | in header |\r\n| ------------- | ------------ |\r\n| one | line |\r\n| another | line |\r\n\r\nor empty header:\r\n\r\n```\r\n| | |\r\n| ------------- | ------------ |\r\n| one | line |\r\n| another | line |\r\n```\r\n| | |\r\n| ------------- | ------------ |\r\n| one | line |\r\n| another | line |\r\n\r\nWithout that it looks like this:\r\n```\r\n| one | line |\r\n| another | line |\r\n```\r\n| one | line |\r\n| another | line |', 'comment_created': datetime.datetime(2020, 9, 2, 8, 24, 50, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 481911470, 'comment_body': 'I think we need only one new line here:\r\n```suggestion\r\n        self.project.pr_comment(self.pr_id, ""\\n"".join(header + comment_msg))\r\n```', 'comment_created': datetime.datetime(2020, 9, 2, 8, 59, 19, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 481917518, 'comment_body': 'I will make a different pr for this.', 'comment_created': datetime.datetime(2020, 9, 2, 9, 6, 15, tzinfo=datetime.timezone.utc), 'commenter': 'shreyaspapi', 'type': 'User'}, {'comment_id': 481919791, 'comment_body': 'Thanks!', 'comment_created': datetime.datetime(2020, 9, 2, 9, 8, 47, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}]","[{'commit_sha': '6c075c73fbd106e720cef435350095cb9de12248', 'committer_username': 'shreyaspapi', 'committer_name': 'Shreyas Papinwar', 'committer_email': 'spapinwar@gmail.com', 'commit_date': datetime.datetime(2016, 9, 20, 15, 3, 57, tzinfo=datetime.timezone.utc)}]",Shreyas Papinwar,22324802,spapinwar@gmail.com,User,,133,,44,48
435160625,Adding support for Copr-build job in gitlab,- [x] Tests,True,683,https://api.github.com/repos/packit/packit-service/pulls/683,https://github.com/packit/packit-service/pull/683,closed,562,14,14,1,15,19,0,0,[],2020-06-16 11:47:07+00:00,2020-06-19 14:21:10+00:00,268443.0,"3 days, 2:34:03","[{'comment_id': 440792089, 'comment_body': ""I would pick a list of allowed token's if it does not complicate anything."", 'comment_created': datetime.datetime(2020, 6, 16, 11, 54, 14, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 440792475, 'comment_body': 'Why this change? (I just want to know.)', 'comment_created': datetime.datetime(2020, 6, 16, 11, 54, 54, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 440793989, 'comment_body': 'Is this really needed? Cannot we reuse Github one?', 'comment_created': datetime.datetime(2020, 6, 16, 11, 57, 34, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 440798580, 'comment_body': 'Yes, we can I made some mistake with git. This as not supposed to be here.', 'comment_created': datetime.datetime(2020, 6, 16, 12, 6, 16, tzinfo=datetime.timezone.utc), 'commenter': 'shreyaspapi', 'type': 'User'}, {'comment_id': 440798844, 'comment_body': 'Sure.', 'comment_created': datetime.datetime(2020, 6, 16, 12, 6, 47, tzinfo=datetime.timezone.utc), 'commenter': 'shreyaspapi', 'type': 'User'}, {'comment_id': 440799884, 'comment_body': 'To reuse `GitHubPullRequestCommentCoprBuildHandler` as it should have `self.event.user_login`. So just renaming username -> user_login.', 'comment_created': datetime.datetime(2020, 6, 16, 12, 8, 41, tzinfo=datetime.timezone.utc), 'commenter': 'shreyaspapi', 'type': 'User'}, {'comment_id': 440823201, 'comment_body': 'Thanks!', 'comment_created': datetime.datetime(2020, 6, 16, 12, 49, 38, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 440869724, 'comment_body': 'Done made it into the list!', 'comment_created': datetime.datetime(2020, 6, 16, 13, 55, 43, tzinfo=datetime.timezone.utc), 'commenter': 'shreyaspapi', 'type': 'User'}, {'comment_id': 440901683, 'comment_body': 'Thanks!', 'comment_created': datetime.datetime(2020, 6, 16, 14, 37, 9, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 442669385, 'comment_body': '```suggestion\r\n        gitlab_webhook_tokens: List[str] = [],\r\n```', 'comment_created': datetime.datetime(2020, 6, 19, 7, 8, 36, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 442669443, 'comment_body': '```suggestion\r\n        self.gitlab_webhook_tokens: Set[str] = set(gitlab_webhook_tokens or [])\r\n```', 'comment_created': datetime.datetime(2020, 6, 19, 7, 8, 48, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 442669534, 'comment_body': '```suggestion\r\n            f""gitlab_webhook_tokens=\'{self.gitlab_webhook_tokens}\',""\r\n```', 'comment_created': datetime.datetime(2020, 6, 19, 7, 9, 1, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 442669633, 'comment_body': '```suggestion\r\n    gitlab_webhook_tokens = fields.List(fields.String())\r\n```', 'comment_created': datetime.datetime(2020, 6, 19, 7, 9, 14, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 442669685, 'comment_body': '```suggestion\r\n        if token not in config.gitlab_webhook_tokens:\r\n```', 'comment_created': datetime.datetime(2020, 6, 19, 7, 9, 25, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 442670530, 'comment_body': 'What is the `else` variant here? Can we add some comment about that? (It will go silently without permissions check so we might want to be more explicit here.)', 'comment_created': datetime.datetime(2020, 6, 19, 7, 11, 33, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 442670679, 'comment_body': '```suggestion\r\n        ""gitlab_webhook_tokens"": [""token1"", ""token2"", ""token3"", ""aged""],\r\n```', 'comment_created': datetime.datetime(2020, 6, 19, 7, 11, 57, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 442670757, 'comment_body': '```suggestion\r\n    assert config.gitlab_webhook_tokens == {""token1"", ""token2"", ""token3"", ""aged""}\r\n```', 'comment_created': datetime.datetime(2020, 6, 19, 7, 12, 6, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 442670815, 'comment_body': '```suggestion\r\n    assert sc.gitlab_webhook_tokens is not None\r\n```', 'comment_created': datetime.datetime(2020, 6, 19, 7, 12, 16, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 442691269, 'comment_body': 'Yeah! I have removed that check as we are already checking the events in pre-check.', 'comment_created': datetime.datetime(2020, 6, 19, 7, 56, 34, tzinfo=datetime.timezone.utc), 'commenter': 'shreyaspapi', 'type': 'User'}]","[{'commit_sha': 'b13433bdf810b3ef524ebe9acab261195f620043', 'committer_username': 'shreyaspapi', 'committer_name': 'Shreyas Papinwar', 'committer_email': 'spapinwar@gmail.com', 'commit_date': datetime.datetime(2016, 9, 20, 15, 3, 57, tzinfo=datetime.timezone.utc)}]",Shreyas Papinwar,22324802,spapinwar@gmail.com,User,,133,,44,48
456797870,Requesting project access,"Request project access - using it here (https://github.com/packit-service/packit-service/pull/740)

[Request access docs](https://python-gitlab.readthedocs.io/en/stable/gl_objects/access_requests.html)",True,439,https://api.github.com/repos/packit/ogr/pulls/439,https://github.com/packit/ogr/pull/439,closed,382,1,6,1,15,9,1,0,[{'name': 'mergeit'}],2020-07-26 19:59:21+00:00,2020-07-31 11:19:06+00:00,400785.0,"4 days, 15:19:45","[{'comment_id': 461441867, 'comment_body': 'Does it make sense to request a different role?\r\n\r\nAt least, please, document the role we are requesting.', 'comment_created': datetime.datetime(2020, 7, 28, 9, 20, 49, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 461757801, 'comment_body': 'I did consider this.\r\n\r\n`project.accessrequests.create()` does not take any arguments. We can only request for project access(Without specifying any role), User while approving will have to specify a role. \r\n\r\n[Docs](https://python-gitlab.readthedocs.io/en/stable/gl_objects/access_requests.html)\r\n\r\n', 'comment_created': datetime.datetime(2020, 7, 28, 17, 40, 29, tzinfo=datetime.timezone.utc), 'commenter': 'shreyaspapi', 'type': 'User'}, {'comment_id': 462066655, 'comment_body': ""OK, can you please add this note to the docstring?\r\n\r\nAnd it would be nice to be able to provide some description/note that will be shown to the fork owner. But it looks like we can't set anything else via GitLab API (https://docs.gitlab.com/ce/api/access_requests.html)."", 'comment_created': datetime.datetime(2020, 7, 29, 6, 27, 9, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 462932700, 'comment_body': 'Added in the docstring.', 'comment_created': datetime.datetime(2020, 7, 30, 11, 31, 27, tzinfo=datetime.timezone.utc), 'commenter': 'shreyaspapi', 'type': 'User'}, {'comment_id': 462995375, 'comment_body': '```suggestion\r\n        The selection of the role and approval needs to be done by the user with maintainer/admin rights.\r\n```', 'comment_created': datetime.datetime(2020, 7, 30, 13, 28, 8, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 462996929, 'comment_body': ""Can we use some Gitlab specific exception instead? (Don't we discuss this somewhere?..;)"", 'comment_created': datetime.datetime(2020, 7, 30, 13, 30, 25, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 463003315, 'comment_body': 'Yes on a different repo😅. Changing it.', 'comment_created': datetime.datetime(2020, 7, 30, 13, 40, 4, tzinfo=datetime.timezone.utc), 'commenter': 'shreyaspapi', 'type': 'User'}, {'comment_id': 463004185, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2020, 7, 30, 13, 41, 15, tzinfo=datetime.timezone.utc), 'commenter': 'shreyaspapi', 'type': 'User'}, {'comment_id': 463004240, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2020, 7, 30, 13, 41, 21, tzinfo=datetime.timezone.utc), 'commenter': 'shreyaspapi', 'type': 'User'}]","[{'commit_sha': '7c1b4a18c9a6294ad87c2be01f8bfd5400aa1e57', 'committer_username': 'shreyaspapi', 'committer_name': 'Shreyas Papinwar', 'committer_email': 'spapinwar@gmail.com', 'commit_date': datetime.datetime(2016, 9, 20, 15, 3, 57, tzinfo=datetime.timezone.utc)}]",Shreyas Papinwar,22324802,spapinwar@gmail.com,User,,133,,44,48
459208809,Add support to create private issues.,"- [x] Gitlab - Private issues are known as confidential issues
- [x] Github - Does not support private/confidential issues. (raised an error here)
- [x] Pagure",True,441,https://api.github.com/repos/packit/ogr/pulls/441,https://github.com/packit/ogr/pull/441,closed,1323,257,14,2,11,4,1,0,[{'name': 'mergeit'}],2020-07-30 14:00:33+00:00,2020-08-05 10:19:34+00:00,505141.0,"5 days, 20:19:01","[{'comment_id': 463545860, 'comment_body': 'Can you please create also tests for other forges that will check that we are correctly raising an error?', 'comment_created': datetime.datetime(2020, 7, 31, 10, 59, 26, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 464111263, 'comment_body': 'Yes, added it [here](https://github.com/packit-service/ogr/pull/441/files#diff-6f042b301fdcde9c4256f0b7bfe15798R411-R412 ) for Github, Already added tests for pagure for private issue.', 'comment_created': datetime.datetime(2020, 8, 2, 18, 54, 52, tzinfo=datetime.timezone.utc), 'commenter': 'shreyaspapi', 'type': 'User'}, {'comment_id': 464111372, 'comment_body': '@lachmanfrantisek Added here!', 'comment_created': datetime.datetime(2020, 8, 2, 18, 55, 53, tzinfo=datetime.timezone.utc), 'commenter': 'shreyaspapi', 'type': 'User'}, {'comment_id': 465577572, 'comment_body': ""Please, don't remove those lines..."", 'comment_created': datetime.datetime(2020, 8, 5, 8, 56, 52, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}]","[{'commit_sha': '4bd2bff57817236c4ac8a40ee3792e9f4c0021c7', 'committer_username': 'shreyaspapi', 'committer_name': 'Shreyas Papinwar', 'committer_email': 'spapinwar@gmail.com', 'commit_date': datetime.datetime(2016, 9, 20, 15, 3, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c2e202ec18a553bd4cbf307fb384a1240dfebf0', 'committer_username': 'shreyaspapi', 'committer_name': 'Shreyas Papinwar', 'committer_email': 'spapinwar@gmail.com', 'commit_date': datetime.datetime(2016, 9, 20, 15, 3, 57, tzinfo=datetime.timezone.utc)}]",Shreyas Papinwar,22324802,spapinwar@gmail.com,User,,133,,44,48
459208809,Add support to create private issues.,"- [x] Gitlab - Private issues are known as confidential issues
- [x] Github - Does not support private/confidential issues. (raised an error here)
- [x] Pagure",True,441,https://api.github.com/repos/packit/ogr/pulls/441,https://github.com/packit/ogr/pull/441,closed,1323,257,14,2,11,4,1,0,[{'name': 'mergeit'}],2020-07-30 14:00:33+00:00,2020-08-05 10:19:34+00:00,505141.0,"5 days, 20:19:01","[{'comment_id': 463545860, 'comment_body': 'Can you please create also tests for other forges that will check that we are correctly raising an error?', 'comment_created': datetime.datetime(2020, 7, 31, 10, 59, 26, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 464111263, 'comment_body': 'Yes, added it [here](https://github.com/packit-service/ogr/pull/441/files#diff-6f042b301fdcde9c4256f0b7bfe15798R411-R412 ) for Github, Already added tests for pagure for private issue.', 'comment_created': datetime.datetime(2020, 8, 2, 18, 54, 52, tzinfo=datetime.timezone.utc), 'commenter': 'shreyaspapi', 'type': 'User'}, {'comment_id': 464111372, 'comment_body': '@lachmanfrantisek Added here!', 'comment_created': datetime.datetime(2020, 8, 2, 18, 55, 53, tzinfo=datetime.timezone.utc), 'commenter': 'shreyaspapi', 'type': 'User'}, {'comment_id': 465577572, 'comment_body': ""Please, don't remove those lines..."", 'comment_created': datetime.datetime(2020, 8, 5, 8, 56, 52, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}]","[{'commit_sha': '4bd2bff57817236c4ac8a40ee3792e9f4c0021c7', 'committer_username': 'shreyaspapi', 'committer_name': 'Shreyas Papinwar', 'committer_email': 'spapinwar@gmail.com', 'commit_date': datetime.datetime(2016, 9, 20, 15, 3, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c2e202ec18a553bd4cbf307fb384a1240dfebf0', 'committer_username': 'shreyaspapi', 'committer_name': 'Shreyas Papinwar', 'committer_email': 'spapinwar@gmail.com', 'commit_date': datetime.datetime(2016, 9, 20, 15, 3, 57, tzinfo=datetime.timezone.utc)}]",Shreyas Papinwar,22324802,spapinwar@gmail.com,User,,133,,44,48
464051930,Support gitlab on checkout_pr,"Adding support to checkout merge requests in Gitlab.

- [x] Tests",True,926,https://api.github.com/repos/packit/packit/pulls/926,https://github.com/packit/packit/pull/926,closed,102,40,3,1,11,4,1,0,[{'name': 'mergeit'}],2020-08-06 14:08:36+00:00,2020-08-17 11:01:00+00:00,939144.0,"10 days, 20:52:24","[{'comment_id': 471321088, 'comment_body': 'What about having `pr` for all cases to have unified behaviour?', 'comment_created': datetime.datetime(2020, 8, 17, 8, 26, 29, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 471321366, 'comment_body': 'My fault..;)\r\n\r\n```suggestion\r\n    # mimic gitlab MR\r\n```', 'comment_created': datetime.datetime(2020, 8, 17, 8, 26, 58, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 471331482, 'comment_body': 'At least, make it consistent -- for `pr` we should use `mr`.', 'comment_created': datetime.datetime(2020, 8, 17, 8, 45, 8, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 471342077, 'comment_body': 'Yeah, this was not needed! `pr` will be fine. Changed and rebased!', 'comment_created': datetime.datetime(2020, 8, 17, 9, 4, 17, tzinfo=datetime.timezone.utc), 'commenter': 'shreyaspapi', 'type': 'User'}]","[{'commit_sha': 'bf2f520cf02a45daf3d8f2d37ba8823b0b41fd43', 'committer_username': 'shreyaspapi', 'committer_name': 'Shreyas Papinwar', 'committer_email': 'spapinwar@gmail.com', 'commit_date': datetime.datetime(2016, 9, 20, 15, 3, 57, tzinfo=datetime.timezone.utc)}]",Shreyas Papinwar,22324802,spapinwar@gmail.com,User,,133,,44,48

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
186786346,packit-service,packit/packit-service,Python,47,34,11,41,4276,155,4,5,"[{'id': 463941294, 'number': 769, 'closed': datetime.datetime(2020, 8, 21, 6, 40, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 6, 10, 35, tzinfo=datetime.timezone.utc), 'time_taken': 1281905.0, 'time_delta': '14 days, 20:05:05', 'additions': 229, 'deletions': 8, 'state': 'closed'}, {'id': 449870967, 'number': 740, 'closed': datetime.datetime(2020, 9, 2, 9, 53, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 16, 3, 31, 44, tzinfo=datetime.timezone.utc), 'time_taken': 4170131.0, 'time_delta': '48 days, 6:22:11', 'additions': 220, 'deletions': 19, 'state': 'closed'}, {'id': 443818508, 'number': 713, 'closed': datetime.datetime(2020, 7, 3, 10, 23, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 3, 2, 26, 57, tzinfo=datetime.timezone.utc), 'time_taken': 28595.0, 'time_delta': '7:56:35', 'additions': 17, 'deletions': 3, 'state': 'closed'}, {'id': 435160625, 'number': 683, 'closed': datetime.datetime(2020, 6, 19, 14, 21, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 16, 11, 47, 7, tzinfo=datetime.timezone.utc), 'time_taken': 268443.0, 'time_delta': '3 days, 2:34:03', 'additions': 562, 'deletions': 14, 'state': 'closed'}, {'id': 429499699, 'number': 671, 'closed': datetime.datetime(2020, 6, 10, 12, 45, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 6, 23, 4, 38, tzinfo=datetime.timezone.utc), 'time_taken': 308448.0, 'time_delta': '3 days, 13:40:48', 'additions': 1046, 'deletions': 1, 'state': 'closed'}, {'id': 422480425, 'number': 629, 'closed': datetime.datetime(2020, 6, 5, 16, 31, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 24, 22, 36, 4, tzinfo=datetime.timezone.utc), 'time_taken': 1014926.0, 'time_delta': '11 days, 17:55:26', 'additions': 676, 'deletions': 4, 'state': 'closed'}]"
161636700,ogr,packit/ogr,Python,54,49,10,44,1543,18,4,11,"[{'id': 507225136, 'number': 489, 'closed': datetime.datetime(2020, 10, 21, 11, 18, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 21, 3, 36, 40, tzinfo=datetime.timezone.utc), 'time_taken': 27720.0, 'time_delta': '7:42:00', 'additions': 655, 'deletions': 0, 'state': 'closed'}, {'id': 505291052, 'number': 487, 'closed': datetime.datetime(2020, 10, 20, 14, 41, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 17, 14, 29, 16, tzinfo=datetime.timezone.utc), 'time_taken': 259918.0, 'time_delta': '3 days, 0:11:58', 'additions': 1373, 'deletions': 697, 'state': 'closed'}, {'id': 467023820, 'number': 451, 'closed': datetime.datetime(2020, 8, 13, 7, 0, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 12, 21, 44, 8, tzinfo=datetime.timezone.utc), 'time_taken': 33356.0, 'time_delta': '9:15:56', 'additions': 624, 'deletions': 82, 'state': 'closed'}, {'id': 459208809, 'number': 441, 'closed': datetime.datetime(2020, 8, 5, 10, 19, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 30, 14, 0, 33, tzinfo=datetime.timezone.utc), 'time_taken': 505141.0, 'time_delta': '5 days, 20:19:01', 'additions': 1323, 'deletions': 257, 'state': 'closed'}, {'id': 456797870, 'number': 439, 'closed': datetime.datetime(2020, 7, 31, 11, 19, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 26, 19, 59, 21, tzinfo=datetime.timezone.utc), 'time_taken': 400785.0, 'time_delta': '4 days, 15:19:45', 'additions': 382, 'deletions': 1, 'state': 'closed'}, {'id': 441117150, 'number': 429, 'closed': datetime.datetime(2020, 6, 29, 12, 3, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 28, 21, 32, 9, tzinfo=datetime.timezone.utc), 'time_taken': 52286.0, 'time_delta': '14:31:26', 'additions': 340, 'deletions': 1, 'state': 'closed'}, {'id': 401537131, 'number': 376, 'closed': datetime.datetime(2020, 5, 11, 19, 45, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 9, 16, 55, 42, tzinfo=datetime.timezone.utc), 'time_taken': 2774959.0, 'time_delta': '32 days, 2:49:19', 'additions': 985, 'deletions': 5, 'state': 'closed'}]"
156365951,packit,packit/packit,Python,84,134,11,74,3933,113,3,10,"[{'id': 464051930, 'number': 926, 'closed': datetime.datetime(2020, 8, 17, 11, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 6, 14, 8, 36, tzinfo=datetime.timezone.utc), 'time_taken': 939144.0, 'time_delta': '10 days, 20:52:24', 'additions': 102, 'deletions': 40, 'state': 'closed'}, {'id': 385473326, 'number': 754, 'closed': datetime.datetime(2020, 3, 19, 8, 35, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 9, 9, 27, tzinfo=datetime.timezone.utc), 'time_taken': 860936.0, 'time_delta': '9 days, 23:08:56', 'additions': 75, 'deletions': 1, 'state': 'closed'}, {'id': 379735563, 'number': 728, 'closed': datetime.datetime(2020, 3, 6, 9, 10, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 25, 18, 35, 7, tzinfo=datetime.timezone.utc), 'time_taken': 830136.0, 'time_delta': '9 days, 14:35:36', 'additions': 20, 'deletions': 6, 'state': 'closed'}]"
