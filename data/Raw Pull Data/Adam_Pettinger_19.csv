pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
468923227,[Servo] Port moveit_servo to ROS2,"### Description

This is a huge PR for porting `moveit_servo` to ROS2:

1. Ports the source
2. Adds examples (C++ interface, composable node interface, teleoperation demo for gamepad)
3. Adds integration and unit tests

@AndyZe @tylerjw 

Currently relies on `moveit_resources`, but I understand that might change soon. When it does, I will update and push here to use the new version

![Servo Teleop Gif](https://user-images.githubusercontent.com/28165117/90417441-5205d500-e079-11ea-95ab-57d196c9d6e4.gif)",True,248,https://api.github.com/repos/moveit/moveit2/pulls/248,https://github.com/moveit/moveit2/pull/248,closed,5064,1853,64,2,6,88,0,0,[],2020-08-17 16:04:42+00:00,2020-08-24 03:40:51+00:00,560169.0,"6 days, 11:36:09","[{'comment_id': 471583061, 'comment_body': ""Remove, you're already defining 14 below"", 'comment_created': datetime.datetime(2020, 8, 17, 16, 5, 51, tzinfo=datetime.timezone.utc), 'commenter': 'henningkayser', 'type': 'User'}, {'comment_id': 471586077, 'comment_body': ""I don't think we want to enable this by default, that's why we check for warnings in CI. There have been discussions about this, I would have to look them up, though"", 'comment_created': datetime.datetime(2020, 8, 17, 16, 10, 40, tzinfo=datetime.timezone.utc), 'commenter': 'henningkayser', 'type': 'User'}, {'comment_id': 471587733, 'comment_body': 'I like the idea of using variables like this. Alternatively, we could follow the ROS 1 convention is to use patterns like `${PROJECT_NAME}_lib`, `${PROJECT_NAME}_server`.', 'comment_created': datetime.datetime(2020, 8, 17, 16, 13, 36, tzinfo=datetime.timezone.utc), 'commenter': 'henningkayser', 'type': 'User'}, {'comment_id': 471588078, 'comment_body': 'Please combine targets in a single install command', 'comment_created': datetime.datetime(2020, 8, 17, 16, 14, 14, tzinfo=datetime.timezone.utc), 'commenter': 'henningkayser', 'type': 'User'}, {'comment_id': 471588745, 'comment_body': 'Is macOS fully supported?', 'comment_created': datetime.datetime(2020, 8, 17, 16, 15, 19, tzinfo=datetime.timezone.utc), 'commenter': 'henningkayser', 'type': 'User'}, {'comment_id': 471590389, 'comment_body': 'Should this be const or are the parameters changed?', 'comment_created': datetime.datetime(2020, 8, 17, 16, 18, 15, tzinfo=datetime.timezone.utc), 'commenter': 'henningkayser', 'type': 'User'}, {'comment_id': 471590537, 'comment_body': 'I guess the node pointer can also be const', 'comment_created': datetime.datetime(2020, 8, 17, 16, 18, 27, tzinfo=datetime.timezone.utc), 'commenter': 'henningkayser', 'type': 'User'}, {'comment_id': 471591502, 'comment_body': ""Why is this different from ROS1 and shouldn't this be part of `start()`"", 'comment_created': datetime.datetime(2020, 8, 17, 16, 20, 9, tzinfo=datetime.timezone.utc), 'commenter': 'henningkayser', 'type': 'User'}, {'comment_id': 471594049, 'comment_body': 'Should this be removed? or do we need to fix the timer event', 'comment_created': datetime.datetime(2020, 8, 17, 16, 24, 29, tzinfo=datetime.timezone.utc), 'commenter': 'henningkayser', 'type': 'User'}, {'comment_id': 471617329, 'comment_body': ""I haven't done things there. If I am honest was copying a lot of the CMakeLists from an example. I can remove this"", 'comment_created': datetime.datetime(2020, 8, 17, 17, 4, 6, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 471622897, 'comment_body': 'In ROS1 the waiting for a joint state message happens in the [constructor](https://github.com/ros-planning/moveit/blob/589f83a132da174991b233931d3ca7f31ab1cba4/moveit_ros/moveit_servo/src/joint_state_subscriber.cpp#L54) (actually the joint_state_subscriber constructor) \r\n\r\nBlocking the constructor was giving me problems when launching as a composable node, so I moved it so the constructor would return quickly. \r\n\r\nI added the waitForInitialized function mostly for the C++ API where a user could create Servo and start it before a joint message was received, and they could [wait for it to initialize ](https://github.com/AdamPettinger/moveit2/blob/aca6eefe58667e358f8ec639ce0976d801d202b9/moveit_ros/moveit_servo/src/cpp_interface_demo/servo_cpp_interface_demo.cpp#L120-L127)\r\n\r\nI have no problem moving this to `start()`', 'comment_created': datetime.datetime(2020, 8, 17, 17, 8, 54, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 471626730, 'comment_body': ""Ack, meant to at least leave a TODO in there. I briefly looked around and couldn't find an example or anything indicating we could pass the timer event to the CB.\r\n\r\nAm not sure if we should just drop it (and remove the commented code) or try a bit harder to figure that out."", 'comment_created': datetime.datetime(2020, 8, 17, 17, 12, 9, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 471881810, 'comment_body': 'Do you happen to know why .hpp seems to have become the standard for ROS2?', 'comment_created': datetime.datetime(2020, 8, 18, 2, 47, 24, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 471885020, 'comment_body': ""Update the comment since JointGroupVelocityController and JointGroupPositionController aren't available yet (and may never be).\r\n\r\n` Currently supported are std_msgs/Float64MultiArray or trajectory_msgs/JointTrajectory`"", 'comment_created': datetime.datetime(2020, 8, 18, 2, 59, 6, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 471885843, 'comment_body': 'behavior', 'comment_created': datetime.datetime(2020, 8, 18, 3, 2, 17, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 471886118, 'comment_body': 'Cartesian', 'comment_created': datetime.datetime(2020, 8, 18, 3, 3, 20, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 471886921, 'comment_body': 'recommended', 'comment_created': datetime.datetime(2020, 8, 18, 3, 6, 27, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 471887362, 'comment_body': ""Add this -- we've encountered a few prototype arms where the joint feedback was so bad, Servo didn't work. As far as it could tell, the arm didn't move.\r\n\r\n`4) Joint encoders that provide rapid and accurate joint position feedback.`"", 'comment_created': datetime.datetime(2020, 8, 18, 3, 8, 8, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 471887710, 'comment_body': 'correspond', 'comment_created': datetime.datetime(2020, 8, 18, 3, 9, 26, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 471887767, 'comment_body': 'behavior, recommended', 'comment_created': datetime.datetime(2020, 8, 18, 3, 9, 41, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 471889265, 'comment_body': 'Can you add the word ""collision"" here? This can be kind of confusing.\r\n\r\n`/** \\brief Callback for collision stopping time, from the thread that is aware of velocity and acceleration */`', 'comment_created': datetime.datetime(2020, 8, 18, 3, 15, 49, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 471890860, 'comment_body': ""why the mutex when the previous version didn't need it?"", 'comment_created': datetime.datetime(2020, 8, 18, 3, 22, 26, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 471891081, 'comment_body': 'I think you could delete these pool TODOs. Create an issue for later', 'comment_created': datetime.datetime(2020, 8, 18, 3, 23, 30, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 471891554, 'comment_body': 'I wouldn\'t mind deleting it. If you do fix it, I think the message could be improved like this:\r\n\r\nROS_WARN_STREAM_THROTTLE_NAMED(ROS_LOG_THROTTLE_PERIOD, LOGNAME, ""Collision checking lags desired rate. Actual period: "" << timer_event.profile.last_duration.toSec());', 'comment_created': datetime.datetime(2020, 8, 18, 3, 25, 18, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 471892601, 'comment_body': ""IMO this line is a little hard to decipher, and throwing `auto&` into the mix doesn't help. Would prefer if you changed it to \r\n\r\n`rclcpp::Clock clock ...`"", 'comment_created': datetime.datetime(2020, 8, 18, 3, 29, 31, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 471893428, 'comment_body': 'Should delete the commented line or leave a comment', 'comment_created': datetime.datetime(2020, 8, 18, 3, 32, 54, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 471893697, 'comment_body': ""whew, what's going on with std::weak_ptr< ...\r\n\r\nDon't think I've seen that before"", 'comment_created': datetime.datetime(2020, 8, 18, 3, 34, 8, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 471894687, 'comment_body': ""a one-line comment about what you're testing would be nice. Something like:\r\n\r\n// Check that the filter converges to expected value after many identical messages.\r\n// Then check that a single measurement does not change the value instantly."", 'comment_created': datetime.datetime(2020, 8, 18, 3, 38, 8, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 471894899, 'comment_body': 'just wondering, any reason why you wanted to have this operator?', 'comment_created': datetime.datetime(2020, 8, 18, 3, 39, 7, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 472040969, 'comment_body': 'Ok, I would remove it for now', 'comment_created': datetime.datetime(2020, 8, 18, 9, 23, 14, tzinfo=datetime.timezone.utc), 'commenter': 'henningkayser', 'type': 'User'}, {'comment_id': 472041933, 'comment_body': ""No, it's totally fine like this, thanks for clarifying."", 'comment_created': datetime.datetime(2020, 8, 18, 9, 24, 56, tzinfo=datetime.timezone.utc), 'commenter': 'henningkayser', 'type': 'User'}, {'comment_id': 472204197, 'comment_body': ""I don't mind either way. There are other variables set here which don't fit nicely into `${PROJECT_NAME}_lib` or `${PROJECT_NAME}_server`"", 'comment_created': datetime.datetime(2020, 8, 18, 13, 39, 6, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 472206211, 'comment_body': 'I do not', 'comment_created': datetime.datetime(2020, 8, 18, 13, 41, 54, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 472213757, 'comment_body': 'The previous had another class `joint_state_subscriber_` that had the mutex in it. I removed this as Tyler and I added it while debugging kinetic problems in ROS1', 'comment_created': datetime.datetime(2020, 8, 18, 13, 52, 33, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 472226122, 'comment_body': 'I found this in the [intraprocess communications tutorial](https://index.ros.org/doc/ros2/Tutorials/Intra-Process-Communication/) and decided to use it to stay consistent with the tutorials. I am more than happy to adjust a bit and make it less... convoluted?', 'comment_created': datetime.datetime(2020, 8, 18, 14, 9, 41, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 472230841, 'comment_body': ""Reading here...  https://stackoverflow.com/a/8385731/3499467\r\n\r\nit says SharedPtr's should be passed by const ref, so do: `rclcpp::Node::SharedPtr& node`\r\n\r\nAnd it has some good advice for passing by reference vs value"", 'comment_created': datetime.datetime(2020, 8, 18, 14, 15, 59, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 472231984, 'comment_body': 'should be <=, I think', 'comment_created': datetime.datetime(2020, 8, 18, 14, 17, 35, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 472232119, 'comment_body': ""Sure, it is purely for testing. While testing I have 2 ways to get parameters:\r\n\r\n1. Through the parameters, as in normal launching (used in the integration tests)\r\n2. Via the C++ call in the `test/test_parameter_struct.hpp` file - used in unit tests so we don't have to launch ROS stuff\r\n\r\nDuring the parameters test, I do both and make sure they are equivalent. This is nice because the tests can only pass if all the parameters are the same and catches a case where somebody might change the yaml file and forget to update the parameter struct in that testing file. It also helped make sure the parameters were actually being loaded correctly"", 'comment_created': datetime.datetime(2020, 8, 18, 14, 17, 48, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 472232419, 'comment_body': 'Yikes spelling! All over... thanks Andy haha', 'comment_created': datetime.datetime(2020, 8, 18, 14, 18, 15, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 472232629, 'comment_body': '.. should be greater than or equal to zero', 'comment_created': datetime.datetime(2020, 8, 18, 14, 18, 34, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 472232983, 'comment_body': 'Done, I will make that issue', 'comment_created': datetime.datetime(2020, 8, 18, 14, 19, 2, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 472233277, 'comment_body': 'Sounds good to me, done', 'comment_created': datetime.datetime(2020, 8, 18, 14, 19, 26, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 472236677, 'comment_body': 'i believe response should be `const shared_ptr&`  (best practice)', 'comment_created': datetime.datetime(2020, 8, 18, 14, 24, 6, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 472241354, 'comment_body': ""Summarizing the important bits from stackoverflow:\r\n\r\n- Don't pass a shared_ptr by ref if there's a chance of it being deleted in the function\r\n\r\n- Pass by reference is more performant than pass by value\r\n\r\n- If you always pass by reference, then there's no point to it being a shared pointer (because it's never actually shared)\r\n\r\n^ I disagree on that last point because it manages `delete` for you"", 'comment_created': datetime.datetime(2020, 8, 18, 14, 30, 15, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 472244447, 'comment_body': 'oops, I take it back. I guess there is not a const because `response` gets modified', 'comment_created': datetime.datetime(2020, 8, 18, 14, 34, 17, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 472244861, 'comment_body': 'Deleted it', 'comment_created': datetime.datetime(2020, 8, 18, 14, 34, 53, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 472246121, 'comment_body': 'Uncommented it', 'comment_created': datetime.datetime(2020, 8, 18, 14, 36, 34, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 472253772, 'comment_body': ""meh, i'm happy enough with that. If you have time to simplify it, that would be cool"", 'comment_created': datetime.datetime(2020, 8, 18, 14, 46, 21, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 472255062, 'comment_body': ""I'm glad you used SetUp() and TearDown()"", 'comment_created': datetime.datetime(2020, 8, 18, 14, 48, 6, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 472255429, 'comment_body': 'delete commented line', 'comment_created': datetime.datetime(2020, 8, 18, 14, 48, 37, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 472255909, 'comment_body': 'update the node name', 'comment_created': datetime.datetime(2020, 8, 18, 14, 49, 10, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 472256987, 'comment_body': 'FYI only the syntax was changed here, so this logic exists in ROS1 [here](https://github.com/ros-planning/moveit/blob/589f83a132da174991b233931d3ca7f31ab1cba4/moveit_ros/moveit_servo/src/servo.cpp#L170)', 'comment_created': datetime.datetime(2020, 8, 18, 14, 50, 36, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 472257808, 'comment_body': 'Should this also be changed in ROS1? [See here](https://github.com/ros-planning/moveit/blob/589f83a132da174991b233931d3ca7f31ab1cba4/moveit_ros/moveit_servo/src/servo.cpp#L196-L201)', 'comment_created': datetime.datetime(2020, 8, 18, 14, 51, 41, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 472261109, 'comment_body': ""IMO that's not significant enough to merit a PR in ROS1, but might as well fix it here.\r\n\r\n(Feel free to make a ROS1 PR if you want to, but we already have like 2-3 open PRs that need reviewing)"", 'comment_created': datetime.datetime(2020, 8, 18, 14, 55, 48, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 472261175, 'comment_body': ""IMO that's not significant enough to merit a PR in ROS1, but might as well fix it here.\r\n\r\n(Feel free to make a ROS1 PR if you want to, but we already have like 2-3 open PRs that need reviewing)"", 'comment_created': datetime.datetime(2020, 8, 18, 14, 55, 54, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 472263476, 'comment_body': ""\r\n\r\nlet's definitely make sure the velocity limit enforcement gets updated, like we discussed. Here's the ROS1 PR:\r\n\r\nros-planning/moveit#2260"", 'comment_created': datetime.datetime(2020, 8, 18, 14, 58, 48, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 472270174, 'comment_body': 'Maybe you could sneak it into this PR you already started\r\n\r\nhttps://github.com/ros-planning/moveit/pull/2249', 'comment_created': datetime.datetime(2020, 8, 18, 15, 8, 17, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 472270979, 'comment_body': 'Looks good in most other places, changed it here', 'comment_created': datetime.datetime(2020, 8, 18, 15, 9, 21, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 472275614, 'comment_body': ""When you pass a shared_ptr by reference you are circumventing the lifetime sharing because you are essentially passing a pointer to the shared_ptr class and therefore you are not incrementing/decrementing the counter.  If you are actually sharing the lifetime of a shared_ptr you should pass it by value (the object you are calling it on is retaining it to use it later).\r\n\r\nAs a matter of style, I generally prefer you to pass the raw pointer or a reference to the underlying object.  However, that is not the normal ros style of the const shared_ptr&.  One advantage of the const shared_ptr& is that it is generally less likely you get a nullptr but it is still possible.  IMO the best interface would be to accept a reference to the underlying object but the semantics for calling that from a shared_ptr is really annoying.  Hence the const shared_ptr& semantics.\r\n\r\nGenerally, anything that receives a pointer parameter type (including smart ones) should do nullptr checks before use.  This isn't common in ROS though, so feel free to ignore this advice.\r\n\r\nThere is a bunch of lifetime and scope management that happens in c++ that is not declarative.  This implied part of the language that is a side effect of various things that make common situations unintuitive.  There have been some efforts to help fix that like the not_null<> template but to use that we'd have to depend on yet another external library (https://github.com/microsoft/GSL)."", 'comment_created': datetime.datetime(2020, 8, 18, 15, 15, 52, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 472307394, 'comment_body': ""I really like what you did here.  The only thing that I see is that the output parameter is in the middle of the parameter list.  I think it would be clearer if you either made it the first or last parameter.\r\n\r\nNext, you aren't changing the shared_ptr of node in this so it should be a `const shared_ptr<rclcpp::Node>&`.\r\n\r\nI really like what you did with the double/int issue and this whole function for making the parameter declaration and getting simpler."", 'comment_created': datetime.datetime(2020, 8, 18, 16, 0, 31, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 472312236, 'comment_body': ""`const shared_ptr<rclcpp::Node>&` here too.\r\n\r\nLooking at this one I'm reminded why I like the output parameter (parameters) to be the first parameter.  You can't make it the last one as it would conflict with default parameters which have to go at the end.  Also, when you make it the first parameter the output parameter it is more intuitive as the left of the operator= is the output:\r\n\r\noutput = function(inputs)\r\nfunction(output, inputs)"", 'comment_created': datetime.datetime(2020, 8, 18, 16, 8, 2, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 472314417, 'comment_body': ""Newline at end of file.  There should be some way to configure your editor to make sure there is a newline at the end of your file when you save it then this annoying issue won't bug you in the future. "", 'comment_created': datetime.datetime(2020, 8, 18, 16, 11, 23, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 472325915, 'comment_body': 'Indeed there was, fixed it for all files!', 'comment_created': datetime.datetime(2020, 8, 18, 16, 29, 13, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 472344200, 'comment_body': ':+1: ', 'comment_created': datetime.datetime(2020, 8, 18, 16, 58, 21, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 472352901, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2020, 8, 18, 17, 10, 56, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 472353033, 'comment_body': 'Moved it to the start on both', 'comment_created': datetime.datetime(2020, 8, 18, 17, 11, 11, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 472361279, 'comment_body': ""I think it's really just for indicating c++ (rclcpp) because there is also native support for c (rclc). We don't have to use hpp, though."", 'comment_created': datetime.datetime(2020, 8, 18, 17, 25, 14, tzinfo=datetime.timezone.utc), 'commenter': 'henningkayser', 'type': 'User'}, {'comment_id': 472384805, 'comment_body': '[This line](https://github.com/ros-planning/moveit/blob/ed3e196d28d670fb154af3cb2866227448b3ad32/moveit_ros/moveit_servo/src/servo_calcs.cpp#L309-L310) in `servo_calcs.cpp` indicates that `num_outgoing_halt_msgs_to_publish` can be 0, do we want to keep it?\r\n\r\n`// num_outgoing_halt_msgs_to_publish == 0 signifies that we should keep republishing forever.\r\n  if (!have_nonzero_command_ && (parameters_.num_outgoing_halt_msgs_to_publish != 0) &&`', 'comment_created': datetime.datetime(2020, 8, 18, 18, 5, 4, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 472389825, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 8, 18, 18, 14, 14, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 472394897, 'comment_body': 'yep, good catch', 'comment_created': datetime.datetime(2020, 8, 18, 18, 22, 58, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 472869948, 'comment_body': 'Better use the convenience functions from `moveit_test_utils` to load your robot model. ', 'comment_created': datetime.datetime(2020, 8, 19, 8, 52, 15, tzinfo=datetime.timezone.utc), 'commenter': 'henningkayser', 'type': 'User'}, {'comment_id': 473048523, 'comment_body': 'Servo is looking for the URDF and SRDF as parameters (strings). To set that for testing I was doing:\r\n\r\n```\r\nloadModelFile(""panda_description/urdf/panda.urdf"", robot_description_string);\r\nloadModelFile(""panda_moveit_config/config/panda.srdf"", srdf_string);\r\nnode_->declare_parameter<std::string>(""robot_description"", robot_description_string);\r\nnode_->declare_parameter<std::string>(""robot_description_semantic"", srdf_string);\r\n```\r\nI don\'t see a way in the `moveit_test_utils` to give the path to the file and get back the string for loading as a parameter, but maybe I am missing something?\r\n', 'comment_created': datetime.datetime(2020, 8, 19, 13, 55, 56, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 473091587, 'comment_body': 'If you only want to use a `moveit_resources` package `moveit_test_utils` is the way to go. If you want to support any robot using the `robot_description` parameter, the PSM (or the RobotModelLoader) supports this without anything extra and the `moveit_resources` default should be passed with the launch file. If your actual use case is not covered, maybe it should go into `moveit_test_utils`.', 'comment_created': datetime.datetime(2020, 8, 19, 14, 53, 17, tzinfo=datetime.timezone.utc), 'commenter': 'henningkayser', 'type': 'User'}, {'comment_id': 473097793, 'comment_body': ""I see, `moveit_resources` doesn't really help because the PSM expects either the robot_description parameter or a `RobotModelLoader` (not the RobotModel). Maybe it would still be a good idea to move a convenience function for this to test utils. Something that declares the robot description parameters from a default package and optionally provides you with the loader instance."", 'comment_created': datetime.datetime(2020, 8, 19, 15, 1, 39, tzinfo=datetime.timezone.utc), 'commenter': 'henningkayser', 'type': 'User'}, {'comment_id': 473327206, 'comment_body': 'recommend grouping these `install(...)` blocks with the other install commands below', 'comment_created': datetime.datetime(2020, 8, 19, 21, 14, 44, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 473361464, 'comment_body': 'Put a sleep in the loop and rclcpp::ok() as a terminating condition', 'comment_created': datetime.datetime(2020, 8, 19, 21, 54, 40, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 473961673, 'comment_body': ""I don't really understand why this should be necessary, but maybe I just didn't get the API right. I thought `declare_parameter()` already returns the correctly typed parameter value (default value or override from yaml) where trivial casts have already been applied (i.e. if you declare a double, an int should be casted to one).  If value conversion is not successful, `declare_parameter()` will throw an `InvalidParameterValueException`.  After declaring a parameter, `get_parameter()` will always return true (at least that's what I thought) so we would actually have to verify that the output value doesn't match the possibly invalid default value. The `false` case would only check for the `rclcpp::ParameterType::PARAMETER_NOT_SET` flag which is only used if undeclared parameters are allowed."", 'comment_created': datetime.datetime(2020, 8, 20, 13, 18, 21, tzinfo=datetime.timezone.utc), 'commenter': 'henningkayser', 'type': 'User'}, {'comment_id': 474042516, 'comment_body': 'Possible out of scope for this PR, but algorithm-heavy files like this would be better to live in moveit_core and only the ROS bindings are in moveit_ros. Would make these components much more reusable ', 'comment_created': datetime.datetime(2020, 8, 20, 14, 50, 29, tzinfo=datetime.timezone.utc), 'commenter': 'davetcoleman', 'type': 'User'}, {'comment_id': 474043542, 'comment_body': 'This is a generic utility and would much better live in this folder for all of moveit to use:\r\n\r\nhttps://github.com/ros-planning/moveit/tree/master/moveit_core/macros/include/moveit/macros', 'comment_created': datetime.datetime(2020, 8, 20, 14, 51, 42, tzinfo=datetime.timezone.utc), 'commenter': 'davetcoleman', 'type': 'User'}, {'comment_id': 474044003, 'comment_body': 'Can this file also live in moveit_core?', 'comment_created': datetime.datetime(2020, 8, 20, 14, 52, 23, tzinfo=datetime.timezone.utc), 'commenter': 'davetcoleman', 'type': 'User'}, {'comment_id': 474044461, 'comment_body': 'Would this be better to live in moveit_tutorials?', 'comment_created': datetime.datetime(2020, 8, 20, 14, 53, 4, tzinfo=datetime.timezone.utc), 'commenter': 'davetcoleman', 'type': 'User'}, {'comment_id': 474243768, 'comment_body': 'Done. The `waitForInitialized` includes a sleep (as a wait for message)', 'comment_created': datetime.datetime(2020, 8, 20, 20, 8, 13, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 474245339, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 8, 20, 20, 11, 33, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 474248645, 'comment_body': 'I think you are right, I will look into this. In general I am unsure how to tell if a parameter was successfully set from yaml vs just taken as the default value. There are some parameters in `servo` that _**can**_ work as the default, but the user might not want that. And a bunch of course that cannot be default, and should be caught here as invalid', 'comment_created': datetime.datetime(2020, 8, 20, 20, 18, 12, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 474712984, 'comment_body': ""I think so, but I don't see anywhere for moveit2_tutorials yet"", 'comment_created': datetime.datetime(2020, 8, 21, 13, 54, 30, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 474713890, 'comment_body': 'I am ok with moving some of these out, in this PR or a followup one', 'comment_created': datetime.datetime(2020, 8, 21, 13, 56, 1, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 474992843, 'comment_body': ""Note for others, this fixed a segfault.  The issue was that cancel just asks the executor to exit, it doesn't wait for it to happen which means that the memory was being freed while it was still being used."", 'comment_created': datetime.datetime(2020, 8, 21, 22, 16, 42, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 475049177, 'comment_body': 'OK, I did some reworking on the parameter reading. You were correct about the `get_parameter()` always returning true after the `declare_parameter()` call. From the documentation, it does seem like the type casting with `declare_parameter()` would work, but I couldn\'t get it to and was still struggling with some doubles being read as ints (which could be fixed by writing **1.0** instead of **1** in the yaml, but that is definitely confusing for a user). Example of what didn\'t work, and still threw the error the catch looks for here:\r\n`parameters->low_pass_filter_coeff = node->declare_parameter<double>(ns + "".low_pass_filter_coeff"", -1);`\r\n\r\nThe change I just made turns that template function (`declareAndGetParam()`) into a void return and basically just uses it to catch the double-int problem. ', 'comment_created': datetime.datetime(2020, 8, 22, 5, 29, 10, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}]","[{'commit_sha': 'db1f3227ea59af9aac3cd290a0ce4555eddc3718', 'committer_username': 'AdamPettinger', 'committer_name': None, 'committer_email': 'adam.l.pettinger@gmail.com', 'commit_date': datetime.datetime(2017, 4, 28, 21, 32, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0dbb33c02118132f5347e1d76d987446946eb1e0', 'committer_username': 'tylerjw', 'committer_name': 'Tyler Weaver', 'committer_email': 'maybe@tylerjw.dev', 'commit_date': datetime.datetime(2012, 10, 4, 23, 55, 35, tzinfo=datetime.timezone.utc)}]",,28165117,adam.l.pettinger@gmail.com,User,,17,,3,8
422147919,[jog_arm] simplify communication between threads,"### Description

This PR went through many changes before arriving here.  If you find it now this is what the outcome so far is from an external perspective for interacting with jog_arm:

![jog_server](https://user-images.githubusercontent.com/2490389/83384004-90a5c080-a3a3-11ea-8820-4d98046bb0e3.png)

The internal changes are there are no move manual threads or shared data between the workers (calcs and collision).  Instead, each maintains its own state and the only communication internally is from the collision thread to the calcs thread through a ros topic using zero-copy queueing.

For external communication (even in the same process) ros pub/sub is used because it provides very fast thread-safe zero-copy queues.  In a future PR I will convert this to be done via a nodelet so it is as simple as editing your launch file to use jog_arm.  In your application, you can then use zero-copy queues (assuming you also write a nodelet, which you should).



### Description (old)

This is a large commit so I've included descriptions of my justification for many of these.  If we can get some good testing of this and others agree I'd consider back-porting it.  It does break the API of jog_arm and would like to not do that on the release.

#### Inter-thread communication
For communication between threads I've converted from using shared memory in a structure with a mutex to lockfree::spsc_queue from boost.  This has the advantage of being statically allocated, lock-free, and simple to use.  There is one case where I find it not intuitive and that is when you want to read the latest value form the queue.  I wrote a template method `popLatest` that I put in jog_arm_data.h for that use case.

#### On `spsc_queue`
One gotcha that you need to be aware of is the commands shouldn't be sent faster than the loop in `JogCalcs` can consume them.  If you do this you will silently lose commands.  This is because the size of the queue is statically allocated so there are no malloc calls in the critical path so when the buffer is full and you try to add another message it just won't.  Also, you should not run `JogCalcs` faster than the loop in `JogArm` that is publishing commands or those commands will be lost.  To make it clear the loop rate should go `JogArm > JogCalcs > Commands`.

#### API changes (refactoring for simplicity and consistency)
In several places I was able to simplify the interface by removing code that was duplicated in multiple files.  This should make it much easier to maintain.  One large one is I removed the ros_interface and cpp_interface derived classes and the base class is just called `JogArm`.  This made so there is only one truth for the main loop and the behavior of jog arm.  For the ros_interface, I moved the little code that was not in the cpp_interface into the jog_server binary.

#### start, stop, and run
Another new change to the API is I added `start` and `stop` methods to `JogArm` to start and stop the threads.  This change allows you tighter control of when your threads are started and stopped.  For running threads I made all the main functions named `run` as this is a common pattern in threading.

#### On `atomic`
I looked through how `atomic` was used and found that it was actually making the code generated less performant and not any safer.  `atomic` is a construct designed to use special machine instructions to protect you from RMW (read-modify-write) statements.  An example of this would be a counter that you increment on two separate threads.  That is where you would use an atomic.  Specifically, if you find yourself doing these operations to something on multiple threads you should use an atomic: `+=, -=, &=, |=, ^=, --, ++`.  It is perfectly safe to write to a bool or read from it on two different threads.

#### On `mutex`
You will notice there are a few places where I placed new mutexes and others where I removed them.  First of all I removed the mutex from `JogArmShared` as it no longer contains data that is unsafe to write and read from on multiple threads.  The couple places where I added mutexes is where an asyc ros callback needs to write to an internal state variable that is used by the thread.  This is needed for types that are not rival (like `bool` or `double`).  The reason I didn't use a `spsc_queue` was for the reason stated above where the publisher will often run at a faster rate than the subscriber and therefore we will often drop the latest values.  In this case a mutex is better.

#### On `lock_guard`
You'll notice that in the few places where I do lock a mutex I use `lock_guard` which will unlock the mutex when it goes out of scope.  In a few places I created a new scope so it would only lock for one more statement.  I believe this makes it much easier to see where a mutex is being used and to reason about it.  It also saves you if you call `return` after lock as it will always get freed when you go out of scope.  You'll see I use that in a few places to copy a mutex protected value into the return value of a function.

#### On `isNonZero`
I moved non-zero message testing into the jog_calc thread and out of the callbacks.  This made the logic simpler to follow and eliminated the need for a couple variables in the shared data.

#### On multiple ROS subscribers to the same topic (joint state)
I noticed that each thread needed its own copy of the latest values of joint state and that it always comes from a ROS subscription.  There is no limit to the number of ROS subscribers for a single topic and each thread can just have their own which will all get a callback triggered when a new message comes in.  The spsc_queue is not a good option for this because when you read from it you erase a value and each thread needed the latest value.

#### Extending the CPP interface test
I added the statements to launch the robot_state_publisher to the launch file to allow it to run for a bit which tests that it doesn't crash or hang when you start it.  Previously it only tested the constructor.

### Checklist
- [x] **Required by CI**: Code is auto formatted using [clang-format](http://moveit.ros.org/documentation/contributing/code)
- [ ] Extend the tutorials / documentation [reference](http://moveit.ros.org/documentation/contributing/)
- [ ] Document API changes relevant to the user in the [MIGRATION.md](https://github.com/ros-planning/moveit/blob/master/MIGRATION.md) notes
- [x] Create tests, which fail without this PR [reference](https://ros-planning.github.io/moveit_tutorials/doc/tests/tests_tutorial.html)
- [x] While waiting for someone to review your request, please help review [another open pull request](https://github.com/ros-planning/moveit/pulls) to support the maintainers
",True,2103,https://api.github.com/repos/moveit/moveit/pulls/2103,https://github.com/moveit/moveit/pull/2103,closed,1580,1661,27,31,36,110,0,0,[],2020-05-22 21:38:52+00:00,2020-06-17 15:54:43+00:00,2225751.0,"25 days, 18:15:51","[{'comment_id': 430719942, 'comment_body': 'This function name could easily be confused with `run()`. I think you should change the name of one or the other. I think this makes sense:\r\n\r\nrun() --> processCommands()', 'comment_created': datetime.datetime(2020, 5, 26, 21, 32, 22, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 430720672, 'comment_body': 'hit Enter between each entry, for consistency', 'comment_created': datetime.datetime(2020, 5, 26, 21, 34, 6, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 430721481, 'comment_body': 'breif  --> brief', 'comment_created': datetime.datetime(2020, 5, 26, 21, 35, 57, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 430721543, 'comment_body': 'breif --> brief\r\n\r\nAnd several other places, too', 'comment_created': datetime.datetime(2020, 5, 26, 21, 36, 6, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 430722373, 'comment_body': 'Please fill me in on why you overloaded this', 'comment_created': datetime.datetime(2020, 5, 26, 21, 37, 58, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 430723920, 'comment_body': 'poping --> popping\r\n\r\nUnless you mean this:  https://media.irishpost.co.uk/uploads/2018/06/11150144/pope-francis-swag2.jpg', 'comment_created': datetime.datetime(2020, 5, 26, 21, 41, 32, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 430724658, 'comment_body': 'woah, how are they protected now, then?', 'comment_created': datetime.datetime(2020, 5, 26, 21, 43, 12, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 430725387, 'comment_body': 'spelling of ""brief"" here, too', 'comment_created': datetime.datetime(2020, 5, 26, 21, 44, 53, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 430728214, 'comment_body': ""I think the name `jog_arm.cpp` is a little vague. I think `jog_arm_master` or `jog_arm_interface` would be better.\r\n\r\nNormally I would assume `jog_arm.cpp` contains main(), but I see that's not true here -- main() is in jog_server.cpp."", 'comment_created': datetime.datetime(2020, 5, 26, 21, 51, 34, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 430730837, 'comment_body': 'nice', 'comment_created': datetime.datetime(2020, 5, 26, 21, 57, 59, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 430731233, 'comment_body': 'this sentence needs a grammar check. Maybe:\r\n\r\n// Start the jog server and run ros spinner', 'comment_created': datetime.datetime(2020, 5, 26, 21, 59, 3, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 430731532, 'comment_body': ""I'm fairly sure this is optional, you could delete it"", 'comment_created': datetime.datetime(2020, 5, 26, 21, 59, 45, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 430745938, 'comment_body': ""It isn't because I'm running everything in separate threads (not in the constructor or start)."", 'comment_created': datetime.datetime(2020, 5, 26, 22, 39, 8, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 430749806, 'comment_body': ""They don't need a mutex because you never do a RMW (read-modify-write) operation on any of these.  They are written to and read in a thread-safe way by default as they are plain old data types.  Where you would need an atomic or mutex is if you do something like this:\r\n\r\nshared_data.value += 1;"", 'comment_created': datetime.datetime(2020, 5, 26, 22, 50, 44, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 430749975, 'comment_body': 'lol, fixed\r\n', 'comment_created': datetime.datetime(2020, 5, 26, 22, 51, 11, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 430750439, 'comment_body': ""I did this so I can use the same method name for the callback for a ros subscriber and the C++ interface.  If I convert this to use ros style inter-process communication I'd probably change it to only have one method (the Ptr one) and call it a callback and make people using the C++ interface publish to the topic as that is actually really fast in the same process if you do it with the Ptr."", 'comment_created': datetime.datetime(2020, 5, 26, 22, 52, 35, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 430775946, 'comment_body': '`run` is a common name for the main for a thread (in python) so I figured it was a good name.  `start`/`stop` are the public methods, and those are the methods (in python) you use to start and stop a thread.', 'comment_created': datetime.datetime(2020, 5, 27, 0, 16, 29, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 430776553, 'comment_body': ""If I exited without this ROS would just exit.  This just waits for `ros::ok()` to be false in a blocking way (so it isn't polling)."", 'comment_created': datetime.datetime(2020, 5, 27, 0, 18, 37, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 430777389, 'comment_body': 'I did this so I can test that starting and stopping works correctly.', 'comment_created': datetime.datetime(2020, 5, 27, 0, 21, 37, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 430944443, 'comment_body': '`ros::Subscriber` is perfectly capable of handling a callback with a single `const pkg_msgs::Msg&` parameter.\r\nThis is usually the better option if you do not intend to store the `shared_ptr` somewhere.', 'comment_created': datetime.datetime(2020, 5, 27, 8, 27, 25, tzinfo=datetime.timezone.utc), 'commenter': 'v4hn', 'type': 'User'}, {'comment_id': 430950565, 'comment_body': ""See the latest version of this where I only accept the shared ptr for these as I do store the lastest one I've received."", 'comment_created': datetime.datetime(2020, 5, 27, 8, 37, 25, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 430961583, 'comment_body': 'First off, I\'m clearly not an expert in threat safe data structures and I did not spent too much time with this code.\r\nAlways willing to learn though. :)\r\n\r\nCan you actually measure a significant improvement in runtime behavior if you throw out the locking?\r\n\r\nAPI wise, locked access is much better than a comment saying ""be careful not to r-m-w"".\r\n\r\nIf you revert to simple datastructures without explicit thread-safe access, do you take care of cache consistency manually? To the best of my knowledge, `<atomic>` also takes care of memory barriers.', 'comment_created': datetime.datetime(2020, 5, 27, 8, 55, 24, tzinfo=datetime.timezone.utc), 'commenter': 'v4hn', 'type': 'User'}, {'comment_id': 430970989, 'comment_body': "":laughing: I did not expect a reply for the next 6 hours at least. ;)\r\n\r\nYou are right and it's the correct interface now. I've seen a lot of code requiring the `ConstPtr&` for no particular reason over the years, so I thought I'd mention the `const Msg&` interface."", 'comment_created': datetime.datetime(2020, 5, 27, 9, 10, tzinfo=datetime.timezone.utc), 'commenter': 'v4hn', 'type': 'User'}, {'comment_id': 431083363, 'comment_body': 'Cache correctness is also not a problem here because all of these only get modified in one direction (on one thread).  I will build a profile to show how much faster the loops run with this PR.', 'comment_created': datetime.datetime(2020, 5, 27, 12, 36, 59, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 431084733, 'comment_body': ""In the end I'd like to get rid of the shared variables as they are confusing but with the message types removed and the only types remaining are one direction modifies, these are safe."", 'comment_created': datetime.datetime(2020, 5, 27, 12, 39, 14, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 431086368, 'comment_body': 'I agree that these make for confusing API but even RMW is fine without a lock or atomic if each one is only ever changed on one thread.  Where you need a mutex is if two threads could modify at the same time.', 'comment_created': datetime.datetime(2020, 5, 27, 12, 42, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 431123953, 'comment_body': ""I agree with v4hn here. It would be really easy to introduce a bug that's hard to track down in the future"", 'comment_created': datetime.datetime(2020, 5, 27, 13, 20, 26, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 431214846, 'comment_body': ""I didn't notice `run` is private. OK, that makes sense."", 'comment_created': datetime.datetime(2020, 5, 27, 15, 7, 37, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 431215350, 'comment_body': ""@tylerjw you didn't address this yet. What do you think?"", 'comment_created': datetime.datetime(2020, 5, 27, 15, 8, 16, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 431222466, 'comment_body': ""Can you add a comment here for people like me (and probably 90% of C++ users) to clarify why you're using a shared pointer?"", 'comment_created': datetime.datetime(2020, 5, 27, 15, 17, 47, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 431225627, 'comment_body': 'Please rename to `elbow_joint_command`', 'comment_created': datetime.datetime(2020, 5, 27, 15, 22, 4, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 431246106, 'comment_body': ""Thank you for pointing this out.  I'd updated this in my profile to work correctly but hadn't updated here.  There is now a comment to go along with this too."", 'comment_created': datetime.datetime(2020, 5, 27, 15, 46, 47, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 431246181, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 5, 27, 15, 46, 52, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 431248929, 'comment_body': 'This if statement is the same as the one above it. I believe it was intended to be `if (joint_jog_.header.frame_id.empty())`, in which case I am not sure it is needed as jogging in the joint space does not have a frame or require a transformation', 'comment_created': datetime.datetime(2020, 5, 27, 15, 50, 19, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 431286628, 'comment_body': ""Good catch, I'll remove this one."", 'comment_created': datetime.datetime(2020, 5, 27, 16, 40, 11, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 431317426, 'comment_body': 'Typo in word brief. Occurs in couple other places as well.', 'comment_created': datetime.datetime(2020, 5, 27, 17, 28, 39, tzinfo=datetime.timezone.utc), 'commenter': 'jliukkonen', 'type': 'User'}, {'comment_id': 431322182, 'comment_body': 'Consider using std::array. Same thing, bit nicer.', 'comment_created': datetime.datetime(2020, 5, 27, 17, 36, 28, tzinfo=datetime.timezone.utc), 'commenter': 'jliukkonen', 'type': 'User'}, {'comment_id': 431342145, 'comment_body': 'Is this line about time stamping duplicate for a reason?', 'comment_created': datetime.datetime(2020, 5, 27, 18, 4, 55, tzinfo=datetime.timezone.utc), 'commenter': 'jliukkonen', 'type': 'User'}, {'comment_id': 431345660, 'comment_body': 'This could be called `control_dimensions_server_`.', 'comment_created': datetime.datetime(2020, 5, 27, 18, 11, 4, tzinfo=datetime.timezone.utc), 'commenter': 'jliukkonen', 'type': 'User'}, {'comment_id': 431369593, 'comment_body': ""Can you explain a bit more how this data is now modified and accessed? If it is just one thread accessing the values, then it is no longer shared data and that comment shouldn't apply anymore. On the other hand, if there are multiple threads accessing the variables, then won't there definitely be RMW operations on them?"", 'comment_created': datetime.datetime(2020, 5, 27, 18, 54, tzinfo=datetime.timezone.utc), 'commenter': 'jliukkonen', 'type': 'User'}, {'comment_id': 431390258, 'comment_body': 'no, good catch\r\n', 'comment_created': datetime.datetime(2020, 5, 27, 19, 24, 44, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 431396546, 'comment_body': 'I agree and like this change', 'comment_created': datetime.datetime(2020, 5, 27, 19, 36, 25, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 431429391, 'comment_body': ""I tried making these member variables of JogCalcs and it fails a test where it is expecting a warning.  I haven't figured out why so for now they are staying in the shared_variables."", 'comment_created': datetime.datetime(2020, 5, 27, 20, 42, 7, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 431432631, 'comment_body': 'Go search for how it is used.  These are only ever written by one thread and only read by another.  Nothing reads and then writes into these based on what they read.  There is never a case where two different threads write for these.  I think we should let this sit for now as it works.  It is confusing and I plan on refactoring this structure out of the system into something easier to reason about later.', 'comment_created': datetime.datetime(2020, 5, 27, 20, 48, 19, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 432284043, 'comment_body': 'Ok, shared_variables is gone.  I replaced it with ros pub/sub using zero-copy messaging.  I profiled this and it produced a similar profile as before.  Now there should be no question of thread safety as there are no mutexes used for communication between the three modules.  I still use a mutex inside the modules to protect some of the pointer copies.  I am unsure if this is necessary but seems to have to affect. ', 'comment_created': datetime.datetime(2020, 5, 29, 6, 40, 1, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 432417354, 'comment_body': 'Maybe it would be less confusing to use `start()`, `stop()`, `pause()`, `unpause()`?', 'comment_created': datetime.datetime(2020, 5, 29, 11, 16, 11, tzinfo=datetime.timezone.utc), 'commenter': 'henningkayser', 'type': 'User'}, {'comment_id': 432419330, 'comment_body': ""That's not a lot of sleep, maybe use a lower value?"", 'comment_created': datetime.datetime(2020, 5, 29, 11, 20, 52, tzinfo=datetime.timezone.utc), 'commenter': 'henningkayser', 'type': 'User'}, {'comment_id': 432427477, 'comment_body': 'Do we really need 8 threads here? Also, you used 4 in the cpp interface example.', 'comment_created': datetime.datetime(2020, 5, 29, 11, 39, 56, tzinfo=datetime.timezone.utc), 'commenter': 'henningkayser', 'type': 'User'}, {'comment_id': 432429772, 'comment_body': 'Why do we need to lock this?', 'comment_created': datetime.datetime(2020, 5, 29, 11, 45, 17, tzinfo=datetime.timezone.utc), 'commenter': 'henningkayser', 'type': 'User'}, {'comment_id': 432431081, 'comment_body': 'Somehow I think it would be nicer to wrap the joint state in a shared struct and only allow access using thread-safe read/write functions.', 'comment_created': datetime.datetime(2020, 5, 29, 11, 48, 19, tzinfo=datetime.timezone.utc), 'commenter': 'henningkayser', 'type': 'User'}, {'comment_id': 432431808, 'comment_body': 'Can we profile how much overhead this is? ;) jk', 'comment_created': datetime.datetime(2020, 5, 29, 11, 50, 8, tzinfo=datetime.timezone.utc), 'commenter': 'henningkayser', 'type': 'User'}, {'comment_id': 432433518, 'comment_body': 'There are other conventions like `update()` or `updateLoop()` that seem to be more common with C++/Java. But this is really a matter of taste imo', 'comment_created': datetime.datetime(2020, 5, 29, 11, 54, 14, tzinfo=datetime.timezone.utc), 'commenter': 'henningkayser', 'type': 'User'}, {'comment_id': 432434242, 'comment_body': 'Is this really worth the extra header file?', 'comment_created': datetime.datetime(2020, 5, 29, 11, 55, 56, tzinfo=datetime.timezone.utc), 'commenter': 'henningkayser', 'type': 'User'}, {'comment_id': 432435293, 'comment_body': 'nit, could be `const ros::NodeHandle& nh`, also in the other constructors', 'comment_created': datetime.datetime(2020, 5, 29, 11, 58, 24, tzinfo=datetime.timezone.utc), 'commenter': 'henningkayser', 'type': 'User'}, {'comment_id': 432768998, 'comment_body': ""I left this alone, it was just copy-pasted from somewhere and is the rate we check on things when first starting.  I'll lower it as I agree it is large."", 'comment_created': datetime.datetime(2020, 5, 29, 22, 36, 4, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 432769711, 'comment_body': 'I should change that.  I chose 8 because that is the default that the nodelet manager uses.  I don\'t really see much harm in using 8 as these threads mostly sig idle blocked by nothing for ros to do and most just service messaging between threads.  One thing to note is that the three ""threads"" are now timers that are run by ros\'s scheduler and take time away from other uses of these threads.', 'comment_created': datetime.datetime(2020, 5, 29, 22, 38, 51, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 432769956, 'comment_body': 'This way is better I think because it uses only ROS for this sort of thread-safe communication and it is already implemented very nicely for us.', 'comment_created': datetime.datetime(2020, 5, 29, 22, 39, 51, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 432770241, 'comment_body': ""I'm not sure it even belongs in jog_arm proper and not in some utility project.  Figured it was better to separate it because it isn't really related other than that jog_arm is using it.  I also didn't put it in a namespace (which is probably wrong) but I don't have any good ideas for what namespace it should be in (I don't want to add it to boost and it isn't really jog_arm specific).\r\n\r\nMaybe put it in the namespace `moveit::util`?  Anyone have thoughts on this?"", 'comment_created': datetime.datetime(2020, 5, 29, 22, 40, 51, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 432770631, 'comment_body': ""You can't do nearly as much with a const NodeHandle.  You can subscribe but you can't start a service or advertise a publisher (I need that second capability for the CollisionCheckThread)."", 'comment_created': datetime.datetime(2020, 5, 29, 22, 42, 19, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 432771633, 'comment_body': ""This is one part of the API I left alone.  I don't think `setPaused` is a bad name.  It allows you to locally have a paused variable you set and then pass into this so you have a way of tracking the state locally.\r\n\r\nI see start/stop more as methods you use on startup and shutdown."", 'comment_created': datetime.datetime(2020, 5, 29, 22, 45, 43, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 432772418, 'comment_body': ""Before this was 4 and then we started 3 more threads.  So in a way, I'm only adding 1 thread to the pool and most processors can actually use 8 threads if they all have something to do.  The more threads you use (assuming your processor has enough cores to run them concurrently) the quicker you'll respond to them being unblocked and therefore the better utilization of your machine and the whole thing will go idle faster."", 'comment_created': datetime.datetime(2020, 5, 29, 22, 48, 55, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 432773014, 'comment_body': 'To be consistent I increased the number of threads in the example to 8.', 'comment_created': datetime.datetime(2020, 5, 29, 22, 51, 14, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 432773058, 'comment_body': 'no, good catch... fixed', 'comment_created': datetime.datetime(2020, 5, 29, 22, 51, 24, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 432876617, 'comment_body': ""One thing I could change is publish these durations to an internal topic that is never subscribed to.  That would be almost free and would allow introspection through a bag if you cared (although that would result in a performance hit for measuring performance).  The downsides to that approach could be mitigated by @gavanderhoorn's suggestion down below about using nodelet_bag (if jog_arm was a nodelet itself)."", 'comment_created': datetime.datetime(2020, 5, 30, 18, 29, 52, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 432886849, 'comment_body': 'I made this change (moveit::util namespace), lmk what you think?', 'comment_created': datetime.datetime(2020, 5, 30, 20, 59, 5, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 432912850, 'comment_body': 'There is no main any more (in the follow-on PR) except in the cpp demo.  After this PR I implemented a nodelet interface which is better than a main because while you can still run it by itself (see changes in launch files on how) you can also run it in the same process with your client and get all the zero-copy goodness easily (without having to compile against jog_arm as it is now a shared library).', 'comment_created': datetime.datetime(2020, 5, 31, 5, 57, 10, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 432982170, 'comment_body': 'latest_stat**u**s', 'comment_created': datetime.datetime(2020, 5, 31, 20, 39, 25, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 432982314, 'comment_body': 'I like the addition of INVALID', 'comment_created': datetime.datetime(2020, 5, 31, 20, 41, 21, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 432982506, 'comment_body': 'Are these functions really just starting and stopping the timer? I thought they also halted all publications from the jogger. Please update this comment', 'comment_created': datetime.datetime(2020, 5, 31, 20, 44, 33, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 432982767, 'comment_body': 'I think this comment needs updating since the C++ interface and ROS interface are all in one class now, right?', 'comment_created': datetime.datetime(2020, 5, 31, 20, 47, 38, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 432982988, 'comment_body': 'I think this comment is worthless. Delete it', 'comment_created': datetime.datetime(2020, 5, 31, 20, 50, 27, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 432983044, 'comment_body': ""// Parameters from yaml  (or delete it)\r\n\r\nThis comment doesn't add any value"", 'comment_created': datetime.datetime(2020, 5, 31, 20, 51, 3, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 432983486, 'comment_body': 'Why not initialize these in the header file? That would save 4 lines of code', 'comment_created': datetime.datetime(2020, 5, 31, 20, 57, 41, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 432983597, 'comment_body': ""Why not initialize this in the constructor? I don't think it would ever change."", 'comment_created': datetime.datetime(2020, 5, 31, 20, 58, 38, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 432983974, 'comment_body': ""I don't think this intermediate variable `collision_scale` is necessary, just use `collision_velocity_scale_`"", 'comment_created': datetime.datetime(2020, 5, 31, 21, 3, 15, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 432984072, 'comment_body': ""Isn't this already locked at Line 733?"", 'comment_created': datetime.datetime(2020, 5, 31, 21, 4, 52, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 433031088, 'comment_body': ""I did this so you could wait on the status thread to be ready to signify everything was initialized.  I'm not sure this is good or standard.  Before it was waiting on the services but because I moved them into the constructor here it messed up the timing of some of the tests.  I think maybe the right approach is to wait for the first publish of status and put this back in the constructor."", 'comment_created': datetime.datetime(2020, 6, 1, 3, 54, 29, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 433031259, 'comment_body': 'I did this so it couldn\'t be changed ""underneath"" this function between the statements below (as there is no mutex protecting that).  If that happened it would make this function confusing and probably broken.', 'comment_created': datetime.datetime(2020, 6, 1, 3, 55, 34, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 433032027, 'comment_body': ""I don't think so, but this lock_guard is in a weird place... I need to go through the PR and map out how I used them to make sure I didn't create a deadlock.  I'll do that."", 'comment_created': datetime.datetime(2020, 6, 1, 4, 0, 44, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 433059542, 'comment_body': ""I looked at this and it doesn't do that.  I'm not sure how the code can trace from 733 to here at all."", 'comment_created': datetime.datetime(2020, 6, 1, 6, 16, 3, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 433059604, 'comment_body': 'They are, removed these.', 'comment_created': datetime.datetime(2020, 6, 1, 6, 16, 20, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 433066222, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 1, 6, 40, 1, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 433066252, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 1, 6, 40, 5, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 433066314, 'comment_body': 'What do you think of the updated description for it?', 'comment_created': datetime.datetime(2020, 6, 1, 6, 40, 20, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 433066404, 'comment_body': 'I added more to the comment to make it clearer what they do.', 'comment_created': datetime.datetime(2020, 6, 1, 6, 40, 41, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 433066464, 'comment_body': 'good catch, fixed', 'comment_created': datetime.datetime(2020, 6, 1, 6, 40, 52, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 433066649, 'comment_body': ""I was wrong, they already do wait for a first message and this doesn't need to be here.  I moved it with the other ros message interface stuff in the constructors.  Good catch."", 'comment_created': datetime.datetime(2020, 6, 1, 6, 41, 35, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 433290809, 'comment_body': '```suggestion\r\n    // Because this message is not copied we should not modify it after we send it.\r\n```', 'comment_created': datetime.datetime(2020, 6, 1, 15, 7, tzinfo=datetime.timezone.utc), 'commenter': 'rhaschke', 'type': 'User'}, {'comment_id': 433291078, 'comment_body': '```suggestion\r\n    // Because this message is not copied we should not modify it after we send it.\r\n```', 'comment_created': datetime.datetime(2020, 6, 1, 15, 7, 27, tzinfo=datetime.timezone.utc), 'commenter': 'rhaschke', 'type': 'User'}, {'comment_id': 433291608, 'comment_body': 'use `auto` for the type here?', 'comment_created': datetime.datetime(2020, 6, 1, 15, 8, 23, tzinfo=datetime.timezone.utc), 'commenter': 'rhaschke', 'type': 'User'}, {'comment_id': 433291691, 'comment_body': 'use `auto` for the type here?', 'comment_created': datetime.datetime(2020, 6, 1, 15, 8, 30, tzinfo=datetime.timezone.utc), 'commenter': 'rhaschke', 'type': 'User'}, {'comment_id': 433294181, 'comment_body': ""Interesting feature. Where is the pool (size) defined?\r\nIs such a feature available from C++14's standard lib as well? The pool allocator is the only reason to pull in boost and the ROS community strives to replace boost with std features."", 'comment_created': datetime.datetime(2020, 6, 1, 15, 12, 43, tzinfo=datetime.timezone.utc), 'commenter': 'rhaschke', 'type': 'User'}, {'comment_id': 433298600, 'comment_body': ""I can't or it'll make a std::function and not a boost::function and ROS won't accept that.\r\n\r\nIt makes a lambda type with auto, not a std::function but either way, ROS won't accept those types into the subscribe function."", 'comment_created': datetime.datetime(2020, 6, 1, 15, 19, 57, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 433303029, 'comment_body': ""The pool is allocated by boost as needed using a singleton per type.  Because I used boost::allocate_shared it only does one allocation (both the message and the control block of the shared pointer).  I used a tool to print when malloc is being called and on my machine, the first call to this allocates space for 32 of that type.  After that it will double that storage if I ever am using all 32 and ask for another, and so on and so forth.  The big win here is that you can have all the goodness of the zero-copy from roscpp without the performance hit from memory fragmentation and system calls in every loop iteration (assuming the subscriber doesn't hold onto a ton of them).\r\n\r\nC++14 doesn't offer any equivalent functionality to this as far as I know.  "", 'comment_created': datetime.datetime(2020, 6, 1, 15, 27, 24, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 433303172, 'comment_body': 'See the previous comment.', 'comment_created': datetime.datetime(2020, 6, 1, 15, 27, 40, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 433308071, 'comment_body': ""Also, from my reading of roscpp it seems that the zero-copy implementation depends on a boost::shared_ptr type, not that it couldn't be implemented using std::shared_ptr but that's what I found.\r\n\r\nI generally agree that replacing boost with std features where appropriate is the right call.  For now, this functionality doesn't exist in the standard library."", 'comment_created': datetime.datetime(2020, 6, 1, 15, 32, 47, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 433318465, 'comment_body': ""Here is my conversation with @gavanderhoorn about this: https://answers.ros.org/question/353198/pre-allocation-of-messages-for-nodelets/\r\n\r\nHere is the documentation on boost::pool_allocator:  https://www.boost.org/doc/libs/1_73_0/libs/pool/doc/html/boost/pool_allocator.html\r\n\r\nI used the further specialization `fast_pool_allocator` which is optimized for single allocations (think list and not vector) as I'm never asking for an array of new messages."", 'comment_created': datetime.datetime(2020, 6, 1, 15, 43, 52, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 433323259, 'comment_body': ""`boost` is doing some magic with the type passed in here: `using allocator_t = boost::fast_pool_allocator<boost::shared_ptr<T>>;`  That type is used as a tag for a singleton pool of memory.  They can't deduce the size from this type and instead it is set the first time I create a new chunk from it on the next line.\r\n\r\nI don't like adding complexity just for the fun of it.  I think in this case the tradeoffs you get from using this for allocating messages you send through ROS on the same process are worth it.  This removes malloc from your loops most of the time (ideally only on your first iteration) and solves memory fragmentation from calling malloc for messages inside loops.  From a users perspective the interface I created here looks very similar to the `make_shared` everyone is used to already. "", 'comment_created': datetime.datetime(2020, 6, 1, 15, 49, 6, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 433331624, 'comment_body': ""I'm all fine with this and already marked the conversation as resolved.\r\nJust a pity that the C++ standard library doesn't support this yet."", 'comment_created': datetime.datetime(2020, 6, 1, 15, 59, 6, tzinfo=datetime.timezone.utc), 'commenter': 'rhaschke', 'type': 'User'}, {'comment_id': 433334109, 'comment_body': 'Unrelated, what are you thoughts on switching to c++17 in master only (and maybe Noetic as it would be a real stretch to install Noetic on 16.04)?\r\n\r\nThis would mean dropping support for 16.04 on master unless someone is willing to install a newer compiler (not really that hard).', 'comment_created': datetime.datetime(2020, 6, 1, 16, 3, 23, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 433344333, 'comment_body': 'Noetic still sticks with C++14:\r\nhttps://www.ros.org/reps/rep-0003.html#noetic-ninjemys-may-2020-may-2025', 'comment_created': datetime.datetime(2020, 6, 1, 16, 22, 47, tzinfo=datetime.timezone.utc), 'commenter': 'rhaschke', 'type': 'User'}, {'comment_id': 433388720, 'comment_body': ""That's sad... all modern compilers (even MVCPP) fully supports c++17 now."", 'comment_created': datetime.datetime(2020, 6, 1, 17, 45, 7, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 435330607, 'comment_body': ""I believe this is unused. A `grep -r 'joint_trajectory_pub_'` in the whole package came back with this as the only hit for me"", 'comment_created': datetime.datetime(2020, 6, 4, 15, 5, 12, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 435333090, 'comment_body': 'good catch, this was something that I removed the need for.', 'comment_created': datetime.datetime(2020, 6, 4, 15, 8, 40, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 438794486, 'comment_body': ""```suggestion\r\n  // Send a few joint velocity commands\r\n```\r\nAlso, I think `joint_names` should always be defined as well. What's the semantics of using a link as header frame here?"", 'comment_created': datetime.datetime(2020, 6, 11, 13, 44, 22, tzinfo=datetime.timezone.utc), 'commenter': 'henningkayser', 'type': 'User'}, {'comment_id': 438795767, 'comment_body': ""That's a pretty big range, no?"", 'comment_created': datetime.datetime(2020, 6, 11, 13, 45, 41, tzinfo=datetime.timezone.utc), 'commenter': 'henningkayser', 'type': 'User'}, {'comment_id': 438810508, 'comment_body': 'We might consider calling `PlanningSceneMonitor::requestPlanningSceneState()` if JogArm is meant to be used with MoveGroup. http://docs.ros.org/melodic/api/moveit_ros_planning/html/classplanning__scene__monitor_1_1PlanningSceneMonitor.html#adcf3efc2497308b8252c7eba16297857', 'comment_created': datetime.datetime(2020, 6, 11, 14, 2, 11, tzinfo=datetime.timezone.utc), 'commenter': 'henningkayser', 'type': 'User'}, {'comment_id': 441542607, 'comment_body': ""I didn't change this, I copy-pasted this from a python test."", 'comment_created': datetime.datetime(2020, 6, 17, 13, 25, 46, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 441543122, 'comment_body': ""That is a good idea, but I'd like to do that in another PR."", 'comment_created': datetime.datetime(2020, 6, 17, 13, 26, 29, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 441544138, 'comment_body': 'makes sense', 'comment_created': datetime.datetime(2020, 6, 17, 13, 27, 53, tzinfo=datetime.timezone.utc), 'commenter': 'henningkayser', 'type': 'User'}]","[{'commit_sha': 'f52d7c6e4b0ef8633a517a611d9ff7a909950452', 'committer_username': 'tylerjw', 'committer_name': 'Tyler Weaver', 'committer_email': 'maybe@tylerjw.dev', 'commit_date': datetime.datetime(2012, 10, 4, 23, 55, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f21c7255fc7ff680adf5a23de21f55eb074d685f', 'committer_username': 'tylerjw', 'committer_name': 'Tyler Weaver', 'committer_email': 'maybe@tylerjw.dev', 'commit_date': datetime.datetime(2012, 10, 4, 23, 55, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b2b1d3712f9ab3971b4eb883f6d908a9a103289', 'committer_username': 'tylerjw', 'committer_name': 'Tyler Weaver', 'committer_email': 'maybe@tylerjw.dev', 'commit_date': datetime.datetime(2012, 10, 4, 23, 55, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '485f98bc93fd5afabd814cc50623e5db5da3453e', 'committer_username': 'tylerjw', 'committer_name': 'Tyler Weaver', 'committer_email': 'maybe@tylerjw.dev', 'commit_date': datetime.datetime(2012, 10, 4, 23, 55, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '81e7460cbb52dcdaedf4a2661d9cd621cb7603b9', 'committer_username': 'tylerjw', 'committer_name': 'Tyler Weaver', 'committer_email': 'maybe@tylerjw.dev', 'commit_date': datetime.datetime(2012, 10, 4, 23, 55, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e61efa5dbb9a4085a234c4ebf7785032fc6ac67', 'committer_username': 'tylerjw', 'committer_name': 'Tyler Weaver', 'committer_email': 'maybe@tylerjw.dev', 'commit_date': datetime.datetime(2012, 10, 4, 23, 55, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0abf8b721c9ca8ee30b0b670b46c8536f5e33d9', 'committer_username': 'tylerjw', 'committer_name': 'Tyler Weaver', 'committer_email': 'maybe@tylerjw.dev', 'commit_date': datetime.datetime(2012, 10, 4, 23, 55, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a1b831ce17484bbea1da3c5e3cef2ff34834f4d', 'committer_username': 'tylerjw', 'committer_name': 'Tyler Weaver', 'committer_email': 'maybe@tylerjw.dev', 'commit_date': datetime.datetime(2012, 10, 4, 23, 55, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39881a56dfe3f8801b486ceab3ff9740e5149f06', 'committer_username': 'tylerjw', 'committer_name': 'Tyler Weaver', 'committer_email': 'maybe@tylerjw.dev', 'commit_date': datetime.datetime(2012, 10, 4, 23, 55, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dfbcd487f1941d5ece6c9ffb161d0a7be04076fc', 'committer_username': 'tylerjw', 'committer_name': 'Tyler Weaver', 'committer_email': 'maybe@tylerjw.dev', 'commit_date': datetime.datetime(2012, 10, 4, 23, 55, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af62e15598a1156e9a5951ef8b00e71b8fd73113', 'committer_username': 'tylerjw', 'committer_name': 'Tyler Weaver', 'committer_email': 'maybe@tylerjw.dev', 'commit_date': datetime.datetime(2012, 10, 4, 23, 55, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d5d3d66abf085c0c5d4486e5bdf2a534031e555', 'committer_username': 'tylerjw', 'committer_name': 'Tyler Weaver', 'committer_email': 'maybe@tylerjw.dev', 'commit_date': datetime.datetime(2012, 10, 4, 23, 55, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8355a3c998beee59ef18754aed83614a434e50d', 'committer_username': 'tylerjw', 'committer_name': 'Tyler Weaver', 'committer_email': 'maybe@tylerjw.dev', 'commit_date': datetime.datetime(2012, 10, 4, 23, 55, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d5fe8745b06ceda21188e4896ab3d8fbdc3878f', 'committer_username': 'tylerjw', 'committer_name': 'Tyler Weaver', 'committer_email': 'maybe@tylerjw.dev', 'commit_date': datetime.datetime(2012, 10, 4, 23, 55, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca92f7dd11a36a7e6661b74321c1425766a03b14', 'committer_username': 'tylerjw', 'committer_name': 'Tyler Weaver', 'committer_email': 'maybe@tylerjw.dev', 'commit_date': datetime.datetime(2012, 10, 4, 23, 55, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0627c0f7928761489aeed2e34e775bb7f642c22a', 'committer_username': 'tylerjw', 'committer_name': 'Tyler Weaver', 'committer_email': 'maybe@tylerjw.dev', 'commit_date': datetime.datetime(2012, 10, 4, 23, 55, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '168ec3f101d123967d08ea3fc0b12eb30266546b', 'committer_username': 'tylerjw', 'committer_name': 'Tyler Weaver', 'committer_email': 'maybe@tylerjw.dev', 'commit_date': datetime.datetime(2012, 10, 4, 23, 55, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7416a543eb22a759e975c7324aa1a978816c8d28', 'committer_username': 'tylerjw', 'committer_name': 'Tyler Weaver', 'committer_email': 'maybe@tylerjw.dev', 'commit_date': datetime.datetime(2012, 10, 4, 23, 55, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '940f4bac4152b3fb9a6e817c47d0dbbcccd480ba', 'committer_username': 'tylerjw', 'committer_name': 'Tyler Weaver', 'committer_email': 'maybe@tylerjw.dev', 'commit_date': datetime.datetime(2012, 10, 4, 23, 55, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88805637cc697448e0e88e33df65b8c008df4386', 'committer_username': 'tylerjw', 'committer_name': 'Tyler Weaver', 'committer_email': 'maybe@tylerjw.dev', 'commit_date': datetime.datetime(2012, 10, 4, 23, 55, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b160960aeee8e70b841cd3d8ffc34b01dc8994cd', 'committer_username': 'tylerjw', 'committer_name': 'Tyler Weaver', 'committer_email': 'maybe@tylerjw.dev', 'commit_date': datetime.datetime(2012, 10, 4, 23, 55, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef09fbb68c63344f87057a5c5ac7160e78b1e08b', 'committer_username': 'tylerjw', 'committer_name': 'Tyler Weaver', 'committer_email': 'maybe@tylerjw.dev', 'commit_date': datetime.datetime(2012, 10, 4, 23, 55, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2eae1b34edbc935f893a417b82412a8216faa2d6', 'committer_username': 'tylerjw', 'committer_name': 'Tyler Weaver', 'committer_email': 'maybe@tylerjw.dev', 'commit_date': datetime.datetime(2012, 10, 4, 23, 55, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9a1bf0de9c77845431673d28dd75f476ebfb40c', 'committer_username': 'tylerjw', 'committer_name': 'Tyler Weaver', 'committer_email': 'maybe@tylerjw.dev', 'commit_date': datetime.datetime(2012, 10, 4, 23, 55, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '59aecfea3d45c40df0eae8356cfe2756df55f7a9', 'committer_username': 'tylerjw', 'committer_name': 'Tyler Weaver', 'committer_email': 'maybe@tylerjw.dev', 'commit_date': datetime.datetime(2012, 10, 4, 23, 55, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb0a38d7e416f9752002e1525b87f1ab19037fc7', 'committer_username': 'tylerjw', 'committer_name': 'Tyler Weaver', 'committer_email': 'maybe@tylerjw.dev', 'commit_date': datetime.datetime(2012, 10, 4, 23, 55, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40fe760043ac1e7db24104a34ee9fe314c99856d', 'committer_username': 'tylerjw', 'committer_name': 'Tyler Weaver', 'committer_email': 'maybe@tylerjw.dev', 'commit_date': datetime.datetime(2012, 10, 4, 23, 55, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71115b80453d7921f3641f408211bb39ba980754', 'committer_username': 'tylerjw', 'committer_name': 'Tyler Weaver', 'committer_email': 'maybe@tylerjw.dev', 'commit_date': datetime.datetime(2012, 10, 4, 23, 55, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8bb6cf610c9cd52688f713f1eed319efc1f4229a', 'committer_username': 'tylerjw', 'committer_name': 'Tyler Weaver', 'committer_email': 'maybe@tylerjw.dev', 'commit_date': datetime.datetime(2012, 10, 4, 23, 55, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '26cd2731369f6a4dd11e448c8afbefe47d219388', 'committer_username': 'tylerjw', 'committer_name': 'Tyler Weaver', 'committer_email': 'maybe@tylerjw.dev', 'commit_date': datetime.datetime(2012, 10, 4, 23, 55, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de9f7841a4f41833bdc0f53bdc25cb6de915129f', 'committer_username': 'tylerjw', 'committer_name': 'Tyler Weaver', 'committer_email': 'maybe@tylerjw.dev', 'commit_date': datetime.datetime(2012, 10, 4, 23, 55, 35, tzinfo=datetime.timezone.utc)}]",Tyler Weaver,2490389,maybe@tylerjw.dev,User,,169,,41,95
468923227,[Servo] Port moveit_servo to ROS2,"### Description

This is a huge PR for porting `moveit_servo` to ROS2:

1. Ports the source
2. Adds examples (C++ interface, composable node interface, teleoperation demo for gamepad)
3. Adds integration and unit tests

@AndyZe @tylerjw 

Currently relies on `moveit_resources`, but I understand that might change soon. When it does, I will update and push here to use the new version

![Servo Teleop Gif](https://user-images.githubusercontent.com/28165117/90417441-5205d500-e079-11ea-95ab-57d196c9d6e4.gif)",True,248,https://api.github.com/repos/moveit/moveit2/pulls/248,https://github.com/moveit/moveit2/pull/248,closed,5064,1853,64,2,6,88,0,0,[],2020-08-17 16:04:42+00:00,2020-08-24 03:40:51+00:00,560169.0,"6 days, 11:36:09","[{'comment_id': 471583061, 'comment_body': ""Remove, you're already defining 14 below"", 'comment_created': datetime.datetime(2020, 8, 17, 16, 5, 51, tzinfo=datetime.timezone.utc), 'commenter': 'henningkayser', 'type': 'User'}, {'comment_id': 471586077, 'comment_body': ""I don't think we want to enable this by default, that's why we check for warnings in CI. There have been discussions about this, I would have to look them up, though"", 'comment_created': datetime.datetime(2020, 8, 17, 16, 10, 40, tzinfo=datetime.timezone.utc), 'commenter': 'henningkayser', 'type': 'User'}, {'comment_id': 471587733, 'comment_body': 'I like the idea of using variables like this. Alternatively, we could follow the ROS 1 convention is to use patterns like `${PROJECT_NAME}_lib`, `${PROJECT_NAME}_server`.', 'comment_created': datetime.datetime(2020, 8, 17, 16, 13, 36, tzinfo=datetime.timezone.utc), 'commenter': 'henningkayser', 'type': 'User'}, {'comment_id': 471588078, 'comment_body': 'Please combine targets in a single install command', 'comment_created': datetime.datetime(2020, 8, 17, 16, 14, 14, tzinfo=datetime.timezone.utc), 'commenter': 'henningkayser', 'type': 'User'}, {'comment_id': 471588745, 'comment_body': 'Is macOS fully supported?', 'comment_created': datetime.datetime(2020, 8, 17, 16, 15, 19, tzinfo=datetime.timezone.utc), 'commenter': 'henningkayser', 'type': 'User'}, {'comment_id': 471590389, 'comment_body': 'Should this be const or are the parameters changed?', 'comment_created': datetime.datetime(2020, 8, 17, 16, 18, 15, tzinfo=datetime.timezone.utc), 'commenter': 'henningkayser', 'type': 'User'}, {'comment_id': 471590537, 'comment_body': 'I guess the node pointer can also be const', 'comment_created': datetime.datetime(2020, 8, 17, 16, 18, 27, tzinfo=datetime.timezone.utc), 'commenter': 'henningkayser', 'type': 'User'}, {'comment_id': 471591502, 'comment_body': ""Why is this different from ROS1 and shouldn't this be part of `start()`"", 'comment_created': datetime.datetime(2020, 8, 17, 16, 20, 9, tzinfo=datetime.timezone.utc), 'commenter': 'henningkayser', 'type': 'User'}, {'comment_id': 471594049, 'comment_body': 'Should this be removed? or do we need to fix the timer event', 'comment_created': datetime.datetime(2020, 8, 17, 16, 24, 29, tzinfo=datetime.timezone.utc), 'commenter': 'henningkayser', 'type': 'User'}, {'comment_id': 471617329, 'comment_body': ""I haven't done things there. If I am honest was copying a lot of the CMakeLists from an example. I can remove this"", 'comment_created': datetime.datetime(2020, 8, 17, 17, 4, 6, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 471622897, 'comment_body': 'In ROS1 the waiting for a joint state message happens in the [constructor](https://github.com/ros-planning/moveit/blob/589f83a132da174991b233931d3ca7f31ab1cba4/moveit_ros/moveit_servo/src/joint_state_subscriber.cpp#L54) (actually the joint_state_subscriber constructor) \r\n\r\nBlocking the constructor was giving me problems when launching as a composable node, so I moved it so the constructor would return quickly. \r\n\r\nI added the waitForInitialized function mostly for the C++ API where a user could create Servo and start it before a joint message was received, and they could [wait for it to initialize ](https://github.com/AdamPettinger/moveit2/blob/aca6eefe58667e358f8ec639ce0976d801d202b9/moveit_ros/moveit_servo/src/cpp_interface_demo/servo_cpp_interface_demo.cpp#L120-L127)\r\n\r\nI have no problem moving this to `start()`', 'comment_created': datetime.datetime(2020, 8, 17, 17, 8, 54, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 471626730, 'comment_body': ""Ack, meant to at least leave a TODO in there. I briefly looked around and couldn't find an example or anything indicating we could pass the timer event to the CB.\r\n\r\nAm not sure if we should just drop it (and remove the commented code) or try a bit harder to figure that out."", 'comment_created': datetime.datetime(2020, 8, 17, 17, 12, 9, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 471881810, 'comment_body': 'Do you happen to know why .hpp seems to have become the standard for ROS2?', 'comment_created': datetime.datetime(2020, 8, 18, 2, 47, 24, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 471885020, 'comment_body': ""Update the comment since JointGroupVelocityController and JointGroupPositionController aren't available yet (and may never be).\r\n\r\n` Currently supported are std_msgs/Float64MultiArray or trajectory_msgs/JointTrajectory`"", 'comment_created': datetime.datetime(2020, 8, 18, 2, 59, 6, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 471885843, 'comment_body': 'behavior', 'comment_created': datetime.datetime(2020, 8, 18, 3, 2, 17, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 471886118, 'comment_body': 'Cartesian', 'comment_created': datetime.datetime(2020, 8, 18, 3, 3, 20, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 471886921, 'comment_body': 'recommended', 'comment_created': datetime.datetime(2020, 8, 18, 3, 6, 27, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 471887362, 'comment_body': ""Add this -- we've encountered a few prototype arms where the joint feedback was so bad, Servo didn't work. As far as it could tell, the arm didn't move.\r\n\r\n`4) Joint encoders that provide rapid and accurate joint position feedback.`"", 'comment_created': datetime.datetime(2020, 8, 18, 3, 8, 8, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 471887710, 'comment_body': 'correspond', 'comment_created': datetime.datetime(2020, 8, 18, 3, 9, 26, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 471887767, 'comment_body': 'behavior, recommended', 'comment_created': datetime.datetime(2020, 8, 18, 3, 9, 41, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 471889265, 'comment_body': 'Can you add the word ""collision"" here? This can be kind of confusing.\r\n\r\n`/** \\brief Callback for collision stopping time, from the thread that is aware of velocity and acceleration */`', 'comment_created': datetime.datetime(2020, 8, 18, 3, 15, 49, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 471890860, 'comment_body': ""why the mutex when the previous version didn't need it?"", 'comment_created': datetime.datetime(2020, 8, 18, 3, 22, 26, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 471891081, 'comment_body': 'I think you could delete these pool TODOs. Create an issue for later', 'comment_created': datetime.datetime(2020, 8, 18, 3, 23, 30, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 471891554, 'comment_body': 'I wouldn\'t mind deleting it. If you do fix it, I think the message could be improved like this:\r\n\r\nROS_WARN_STREAM_THROTTLE_NAMED(ROS_LOG_THROTTLE_PERIOD, LOGNAME, ""Collision checking lags desired rate. Actual period: "" << timer_event.profile.last_duration.toSec());', 'comment_created': datetime.datetime(2020, 8, 18, 3, 25, 18, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 471892601, 'comment_body': ""IMO this line is a little hard to decipher, and throwing `auto&` into the mix doesn't help. Would prefer if you changed it to \r\n\r\n`rclcpp::Clock clock ...`"", 'comment_created': datetime.datetime(2020, 8, 18, 3, 29, 31, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 471893428, 'comment_body': 'Should delete the commented line or leave a comment', 'comment_created': datetime.datetime(2020, 8, 18, 3, 32, 54, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 471893697, 'comment_body': ""whew, what's going on with std::weak_ptr< ...\r\n\r\nDon't think I've seen that before"", 'comment_created': datetime.datetime(2020, 8, 18, 3, 34, 8, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 471894687, 'comment_body': ""a one-line comment about what you're testing would be nice. Something like:\r\n\r\n// Check that the filter converges to expected value after many identical messages.\r\n// Then check that a single measurement does not change the value instantly."", 'comment_created': datetime.datetime(2020, 8, 18, 3, 38, 8, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 471894899, 'comment_body': 'just wondering, any reason why you wanted to have this operator?', 'comment_created': datetime.datetime(2020, 8, 18, 3, 39, 7, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 472040969, 'comment_body': 'Ok, I would remove it for now', 'comment_created': datetime.datetime(2020, 8, 18, 9, 23, 14, tzinfo=datetime.timezone.utc), 'commenter': 'henningkayser', 'type': 'User'}, {'comment_id': 472041933, 'comment_body': ""No, it's totally fine like this, thanks for clarifying."", 'comment_created': datetime.datetime(2020, 8, 18, 9, 24, 56, tzinfo=datetime.timezone.utc), 'commenter': 'henningkayser', 'type': 'User'}, {'comment_id': 472204197, 'comment_body': ""I don't mind either way. There are other variables set here which don't fit nicely into `${PROJECT_NAME}_lib` or `${PROJECT_NAME}_server`"", 'comment_created': datetime.datetime(2020, 8, 18, 13, 39, 6, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 472206211, 'comment_body': 'I do not', 'comment_created': datetime.datetime(2020, 8, 18, 13, 41, 54, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 472213757, 'comment_body': 'The previous had another class `joint_state_subscriber_` that had the mutex in it. I removed this as Tyler and I added it while debugging kinetic problems in ROS1', 'comment_created': datetime.datetime(2020, 8, 18, 13, 52, 33, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 472226122, 'comment_body': 'I found this in the [intraprocess communications tutorial](https://index.ros.org/doc/ros2/Tutorials/Intra-Process-Communication/) and decided to use it to stay consistent with the tutorials. I am more than happy to adjust a bit and make it less... convoluted?', 'comment_created': datetime.datetime(2020, 8, 18, 14, 9, 41, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 472230841, 'comment_body': ""Reading here...  https://stackoverflow.com/a/8385731/3499467\r\n\r\nit says SharedPtr's should be passed by const ref, so do: `rclcpp::Node::SharedPtr& node`\r\n\r\nAnd it has some good advice for passing by reference vs value"", 'comment_created': datetime.datetime(2020, 8, 18, 14, 15, 59, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 472231984, 'comment_body': 'should be <=, I think', 'comment_created': datetime.datetime(2020, 8, 18, 14, 17, 35, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 472232119, 'comment_body': ""Sure, it is purely for testing. While testing I have 2 ways to get parameters:\r\n\r\n1. Through the parameters, as in normal launching (used in the integration tests)\r\n2. Via the C++ call in the `test/test_parameter_struct.hpp` file - used in unit tests so we don't have to launch ROS stuff\r\n\r\nDuring the parameters test, I do both and make sure they are equivalent. This is nice because the tests can only pass if all the parameters are the same and catches a case where somebody might change the yaml file and forget to update the parameter struct in that testing file. It also helped make sure the parameters were actually being loaded correctly"", 'comment_created': datetime.datetime(2020, 8, 18, 14, 17, 48, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 472232419, 'comment_body': 'Yikes spelling! All over... thanks Andy haha', 'comment_created': datetime.datetime(2020, 8, 18, 14, 18, 15, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 472232629, 'comment_body': '.. should be greater than or equal to zero', 'comment_created': datetime.datetime(2020, 8, 18, 14, 18, 34, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 472232983, 'comment_body': 'Done, I will make that issue', 'comment_created': datetime.datetime(2020, 8, 18, 14, 19, 2, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 472233277, 'comment_body': 'Sounds good to me, done', 'comment_created': datetime.datetime(2020, 8, 18, 14, 19, 26, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 472236677, 'comment_body': 'i believe response should be `const shared_ptr&`  (best practice)', 'comment_created': datetime.datetime(2020, 8, 18, 14, 24, 6, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 472241354, 'comment_body': ""Summarizing the important bits from stackoverflow:\r\n\r\n- Don't pass a shared_ptr by ref if there's a chance of it being deleted in the function\r\n\r\n- Pass by reference is more performant than pass by value\r\n\r\n- If you always pass by reference, then there's no point to it being a shared pointer (because it's never actually shared)\r\n\r\n^ I disagree on that last point because it manages `delete` for you"", 'comment_created': datetime.datetime(2020, 8, 18, 14, 30, 15, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 472244447, 'comment_body': 'oops, I take it back. I guess there is not a const because `response` gets modified', 'comment_created': datetime.datetime(2020, 8, 18, 14, 34, 17, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 472244861, 'comment_body': 'Deleted it', 'comment_created': datetime.datetime(2020, 8, 18, 14, 34, 53, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 472246121, 'comment_body': 'Uncommented it', 'comment_created': datetime.datetime(2020, 8, 18, 14, 36, 34, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 472253772, 'comment_body': ""meh, i'm happy enough with that. If you have time to simplify it, that would be cool"", 'comment_created': datetime.datetime(2020, 8, 18, 14, 46, 21, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 472255062, 'comment_body': ""I'm glad you used SetUp() and TearDown()"", 'comment_created': datetime.datetime(2020, 8, 18, 14, 48, 6, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 472255429, 'comment_body': 'delete commented line', 'comment_created': datetime.datetime(2020, 8, 18, 14, 48, 37, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 472255909, 'comment_body': 'update the node name', 'comment_created': datetime.datetime(2020, 8, 18, 14, 49, 10, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 472256987, 'comment_body': 'FYI only the syntax was changed here, so this logic exists in ROS1 [here](https://github.com/ros-planning/moveit/blob/589f83a132da174991b233931d3ca7f31ab1cba4/moveit_ros/moveit_servo/src/servo.cpp#L170)', 'comment_created': datetime.datetime(2020, 8, 18, 14, 50, 36, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 472257808, 'comment_body': 'Should this also be changed in ROS1? [See here](https://github.com/ros-planning/moveit/blob/589f83a132da174991b233931d3ca7f31ab1cba4/moveit_ros/moveit_servo/src/servo.cpp#L196-L201)', 'comment_created': datetime.datetime(2020, 8, 18, 14, 51, 41, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 472261109, 'comment_body': ""IMO that's not significant enough to merit a PR in ROS1, but might as well fix it here.\r\n\r\n(Feel free to make a ROS1 PR if you want to, but we already have like 2-3 open PRs that need reviewing)"", 'comment_created': datetime.datetime(2020, 8, 18, 14, 55, 48, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 472261175, 'comment_body': ""IMO that's not significant enough to merit a PR in ROS1, but might as well fix it here.\r\n\r\n(Feel free to make a ROS1 PR if you want to, but we already have like 2-3 open PRs that need reviewing)"", 'comment_created': datetime.datetime(2020, 8, 18, 14, 55, 54, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 472263476, 'comment_body': ""\r\n\r\nlet's definitely make sure the velocity limit enforcement gets updated, like we discussed. Here's the ROS1 PR:\r\n\r\nros-planning/moveit#2260"", 'comment_created': datetime.datetime(2020, 8, 18, 14, 58, 48, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 472270174, 'comment_body': 'Maybe you could sneak it into this PR you already started\r\n\r\nhttps://github.com/ros-planning/moveit/pull/2249', 'comment_created': datetime.datetime(2020, 8, 18, 15, 8, 17, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 472270979, 'comment_body': 'Looks good in most other places, changed it here', 'comment_created': datetime.datetime(2020, 8, 18, 15, 9, 21, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 472275614, 'comment_body': ""When you pass a shared_ptr by reference you are circumventing the lifetime sharing because you are essentially passing a pointer to the shared_ptr class and therefore you are not incrementing/decrementing the counter.  If you are actually sharing the lifetime of a shared_ptr you should pass it by value (the object you are calling it on is retaining it to use it later).\r\n\r\nAs a matter of style, I generally prefer you to pass the raw pointer or a reference to the underlying object.  However, that is not the normal ros style of the const shared_ptr&.  One advantage of the const shared_ptr& is that it is generally less likely you get a nullptr but it is still possible.  IMO the best interface would be to accept a reference to the underlying object but the semantics for calling that from a shared_ptr is really annoying.  Hence the const shared_ptr& semantics.\r\n\r\nGenerally, anything that receives a pointer parameter type (including smart ones) should do nullptr checks before use.  This isn't common in ROS though, so feel free to ignore this advice.\r\n\r\nThere is a bunch of lifetime and scope management that happens in c++ that is not declarative.  This implied part of the language that is a side effect of various things that make common situations unintuitive.  There have been some efforts to help fix that like the not_null<> template but to use that we'd have to depend on yet another external library (https://github.com/microsoft/GSL)."", 'comment_created': datetime.datetime(2020, 8, 18, 15, 15, 52, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 472307394, 'comment_body': ""I really like what you did here.  The only thing that I see is that the output parameter is in the middle of the parameter list.  I think it would be clearer if you either made it the first or last parameter.\r\n\r\nNext, you aren't changing the shared_ptr of node in this so it should be a `const shared_ptr<rclcpp::Node>&`.\r\n\r\nI really like what you did with the double/int issue and this whole function for making the parameter declaration and getting simpler."", 'comment_created': datetime.datetime(2020, 8, 18, 16, 0, 31, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 472312236, 'comment_body': ""`const shared_ptr<rclcpp::Node>&` here too.\r\n\r\nLooking at this one I'm reminded why I like the output parameter (parameters) to be the first parameter.  You can't make it the last one as it would conflict with default parameters which have to go at the end.  Also, when you make it the first parameter the output parameter it is more intuitive as the left of the operator= is the output:\r\n\r\noutput = function(inputs)\r\nfunction(output, inputs)"", 'comment_created': datetime.datetime(2020, 8, 18, 16, 8, 2, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 472314417, 'comment_body': ""Newline at end of file.  There should be some way to configure your editor to make sure there is a newline at the end of your file when you save it then this annoying issue won't bug you in the future. "", 'comment_created': datetime.datetime(2020, 8, 18, 16, 11, 23, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 472325915, 'comment_body': 'Indeed there was, fixed it for all files!', 'comment_created': datetime.datetime(2020, 8, 18, 16, 29, 13, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 472344200, 'comment_body': ':+1: ', 'comment_created': datetime.datetime(2020, 8, 18, 16, 58, 21, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 472352901, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2020, 8, 18, 17, 10, 56, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 472353033, 'comment_body': 'Moved it to the start on both', 'comment_created': datetime.datetime(2020, 8, 18, 17, 11, 11, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 472361279, 'comment_body': ""I think it's really just for indicating c++ (rclcpp) because there is also native support for c (rclc). We don't have to use hpp, though."", 'comment_created': datetime.datetime(2020, 8, 18, 17, 25, 14, tzinfo=datetime.timezone.utc), 'commenter': 'henningkayser', 'type': 'User'}, {'comment_id': 472384805, 'comment_body': '[This line](https://github.com/ros-planning/moveit/blob/ed3e196d28d670fb154af3cb2866227448b3ad32/moveit_ros/moveit_servo/src/servo_calcs.cpp#L309-L310) in `servo_calcs.cpp` indicates that `num_outgoing_halt_msgs_to_publish` can be 0, do we want to keep it?\r\n\r\n`// num_outgoing_halt_msgs_to_publish == 0 signifies that we should keep republishing forever.\r\n  if (!have_nonzero_command_ && (parameters_.num_outgoing_halt_msgs_to_publish != 0) &&`', 'comment_created': datetime.datetime(2020, 8, 18, 18, 5, 4, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 472389825, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 8, 18, 18, 14, 14, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 472394897, 'comment_body': 'yep, good catch', 'comment_created': datetime.datetime(2020, 8, 18, 18, 22, 58, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 472869948, 'comment_body': 'Better use the convenience functions from `moveit_test_utils` to load your robot model. ', 'comment_created': datetime.datetime(2020, 8, 19, 8, 52, 15, tzinfo=datetime.timezone.utc), 'commenter': 'henningkayser', 'type': 'User'}, {'comment_id': 473048523, 'comment_body': 'Servo is looking for the URDF and SRDF as parameters (strings). To set that for testing I was doing:\r\n\r\n```\r\nloadModelFile(""panda_description/urdf/panda.urdf"", robot_description_string);\r\nloadModelFile(""panda_moveit_config/config/panda.srdf"", srdf_string);\r\nnode_->declare_parameter<std::string>(""robot_description"", robot_description_string);\r\nnode_->declare_parameter<std::string>(""robot_description_semantic"", srdf_string);\r\n```\r\nI don\'t see a way in the `moveit_test_utils` to give the path to the file and get back the string for loading as a parameter, but maybe I am missing something?\r\n', 'comment_created': datetime.datetime(2020, 8, 19, 13, 55, 56, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 473091587, 'comment_body': 'If you only want to use a `moveit_resources` package `moveit_test_utils` is the way to go. If you want to support any robot using the `robot_description` parameter, the PSM (or the RobotModelLoader) supports this without anything extra and the `moveit_resources` default should be passed with the launch file. If your actual use case is not covered, maybe it should go into `moveit_test_utils`.', 'comment_created': datetime.datetime(2020, 8, 19, 14, 53, 17, tzinfo=datetime.timezone.utc), 'commenter': 'henningkayser', 'type': 'User'}, {'comment_id': 473097793, 'comment_body': ""I see, `moveit_resources` doesn't really help because the PSM expects either the robot_description parameter or a `RobotModelLoader` (not the RobotModel). Maybe it would still be a good idea to move a convenience function for this to test utils. Something that declares the robot description parameters from a default package and optionally provides you with the loader instance."", 'comment_created': datetime.datetime(2020, 8, 19, 15, 1, 39, tzinfo=datetime.timezone.utc), 'commenter': 'henningkayser', 'type': 'User'}, {'comment_id': 473327206, 'comment_body': 'recommend grouping these `install(...)` blocks with the other install commands below', 'comment_created': datetime.datetime(2020, 8, 19, 21, 14, 44, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 473361464, 'comment_body': 'Put a sleep in the loop and rclcpp::ok() as a terminating condition', 'comment_created': datetime.datetime(2020, 8, 19, 21, 54, 40, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 473961673, 'comment_body': ""I don't really understand why this should be necessary, but maybe I just didn't get the API right. I thought `declare_parameter()` already returns the correctly typed parameter value (default value or override from yaml) where trivial casts have already been applied (i.e. if you declare a double, an int should be casted to one).  If value conversion is not successful, `declare_parameter()` will throw an `InvalidParameterValueException`.  After declaring a parameter, `get_parameter()` will always return true (at least that's what I thought) so we would actually have to verify that the output value doesn't match the possibly invalid default value. The `false` case would only check for the `rclcpp::ParameterType::PARAMETER_NOT_SET` flag which is only used if undeclared parameters are allowed."", 'comment_created': datetime.datetime(2020, 8, 20, 13, 18, 21, tzinfo=datetime.timezone.utc), 'commenter': 'henningkayser', 'type': 'User'}, {'comment_id': 474042516, 'comment_body': 'Possible out of scope for this PR, but algorithm-heavy files like this would be better to live in moveit_core and only the ROS bindings are in moveit_ros. Would make these components much more reusable ', 'comment_created': datetime.datetime(2020, 8, 20, 14, 50, 29, tzinfo=datetime.timezone.utc), 'commenter': 'davetcoleman', 'type': 'User'}, {'comment_id': 474043542, 'comment_body': 'This is a generic utility and would much better live in this folder for all of moveit to use:\r\n\r\nhttps://github.com/ros-planning/moveit/tree/master/moveit_core/macros/include/moveit/macros', 'comment_created': datetime.datetime(2020, 8, 20, 14, 51, 42, tzinfo=datetime.timezone.utc), 'commenter': 'davetcoleman', 'type': 'User'}, {'comment_id': 474044003, 'comment_body': 'Can this file also live in moveit_core?', 'comment_created': datetime.datetime(2020, 8, 20, 14, 52, 23, tzinfo=datetime.timezone.utc), 'commenter': 'davetcoleman', 'type': 'User'}, {'comment_id': 474044461, 'comment_body': 'Would this be better to live in moveit_tutorials?', 'comment_created': datetime.datetime(2020, 8, 20, 14, 53, 4, tzinfo=datetime.timezone.utc), 'commenter': 'davetcoleman', 'type': 'User'}, {'comment_id': 474243768, 'comment_body': 'Done. The `waitForInitialized` includes a sleep (as a wait for message)', 'comment_created': datetime.datetime(2020, 8, 20, 20, 8, 13, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 474245339, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 8, 20, 20, 11, 33, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 474248645, 'comment_body': 'I think you are right, I will look into this. In general I am unsure how to tell if a parameter was successfully set from yaml vs just taken as the default value. There are some parameters in `servo` that _**can**_ work as the default, but the user might not want that. And a bunch of course that cannot be default, and should be caught here as invalid', 'comment_created': datetime.datetime(2020, 8, 20, 20, 18, 12, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 474712984, 'comment_body': ""I think so, but I don't see anywhere for moveit2_tutorials yet"", 'comment_created': datetime.datetime(2020, 8, 21, 13, 54, 30, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 474713890, 'comment_body': 'I am ok with moving some of these out, in this PR or a followup one', 'comment_created': datetime.datetime(2020, 8, 21, 13, 56, 1, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 474992843, 'comment_body': ""Note for others, this fixed a segfault.  The issue was that cancel just asks the executor to exit, it doesn't wait for it to happen which means that the memory was being freed while it was still being used."", 'comment_created': datetime.datetime(2020, 8, 21, 22, 16, 42, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 475049177, 'comment_body': 'OK, I did some reworking on the parameter reading. You were correct about the `get_parameter()` always returning true after the `declare_parameter()` call. From the documentation, it does seem like the type casting with `declare_parameter()` would work, but I couldn\'t get it to and was still struggling with some doubles being read as ints (which could be fixed by writing **1.0** instead of **1** in the yaml, but that is definitely confusing for a user). Example of what didn\'t work, and still threw the error the catch looks for here:\r\n`parameters->low_pass_filter_coeff = node->declare_parameter<double>(ns + "".low_pass_filter_coeff"", -1);`\r\n\r\nThe change I just made turns that template function (`declareAndGetParam()`) into a void return and basically just uses it to catch the double-int problem. ', 'comment_created': datetime.datetime(2020, 8, 22, 5, 29, 10, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}]","[{'commit_sha': 'db1f3227ea59af9aac3cd290a0ce4555eddc3718', 'committer_username': 'AdamPettinger', 'committer_name': None, 'committer_email': 'adam.l.pettinger@gmail.com', 'commit_date': datetime.datetime(2017, 4, 28, 21, 32, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0dbb33c02118132f5347e1d76d987446946eb1e0', 'committer_username': 'tylerjw', 'committer_name': 'Tyler Weaver', 'committer_email': 'maybe@tylerjw.dev', 'commit_date': datetime.datetime(2012, 10, 4, 23, 55, 35, tzinfo=datetime.timezone.utc)}]",,28165117,adam.l.pettinger@gmail.com,User,,17,,3,8
468923227,[Servo] Port moveit_servo to ROS2,"### Description

This is a huge PR for porting `moveit_servo` to ROS2:

1. Ports the source
2. Adds examples (C++ interface, composable node interface, teleoperation demo for gamepad)
3. Adds integration and unit tests

@AndyZe @tylerjw 

Currently relies on `moveit_resources`, but I understand that might change soon. When it does, I will update and push here to use the new version

![Servo Teleop Gif](https://user-images.githubusercontent.com/28165117/90417441-5205d500-e079-11ea-95ab-57d196c9d6e4.gif)",True,248,https://api.github.com/repos/moveit/moveit2/pulls/248,https://github.com/moveit/moveit2/pull/248,closed,5064,1853,64,2,6,88,0,0,[],2020-08-17 16:04:42+00:00,2020-08-24 03:40:51+00:00,560169.0,"6 days, 11:36:09","[{'comment_id': 471583061, 'comment_body': ""Remove, you're already defining 14 below"", 'comment_created': datetime.datetime(2020, 8, 17, 16, 5, 51, tzinfo=datetime.timezone.utc), 'commenter': 'henningkayser', 'type': 'User'}, {'comment_id': 471586077, 'comment_body': ""I don't think we want to enable this by default, that's why we check for warnings in CI. There have been discussions about this, I would have to look them up, though"", 'comment_created': datetime.datetime(2020, 8, 17, 16, 10, 40, tzinfo=datetime.timezone.utc), 'commenter': 'henningkayser', 'type': 'User'}, {'comment_id': 471587733, 'comment_body': 'I like the idea of using variables like this. Alternatively, we could follow the ROS 1 convention is to use patterns like `${PROJECT_NAME}_lib`, `${PROJECT_NAME}_server`.', 'comment_created': datetime.datetime(2020, 8, 17, 16, 13, 36, tzinfo=datetime.timezone.utc), 'commenter': 'henningkayser', 'type': 'User'}, {'comment_id': 471588078, 'comment_body': 'Please combine targets in a single install command', 'comment_created': datetime.datetime(2020, 8, 17, 16, 14, 14, tzinfo=datetime.timezone.utc), 'commenter': 'henningkayser', 'type': 'User'}, {'comment_id': 471588745, 'comment_body': 'Is macOS fully supported?', 'comment_created': datetime.datetime(2020, 8, 17, 16, 15, 19, tzinfo=datetime.timezone.utc), 'commenter': 'henningkayser', 'type': 'User'}, {'comment_id': 471590389, 'comment_body': 'Should this be const or are the parameters changed?', 'comment_created': datetime.datetime(2020, 8, 17, 16, 18, 15, tzinfo=datetime.timezone.utc), 'commenter': 'henningkayser', 'type': 'User'}, {'comment_id': 471590537, 'comment_body': 'I guess the node pointer can also be const', 'comment_created': datetime.datetime(2020, 8, 17, 16, 18, 27, tzinfo=datetime.timezone.utc), 'commenter': 'henningkayser', 'type': 'User'}, {'comment_id': 471591502, 'comment_body': ""Why is this different from ROS1 and shouldn't this be part of `start()`"", 'comment_created': datetime.datetime(2020, 8, 17, 16, 20, 9, tzinfo=datetime.timezone.utc), 'commenter': 'henningkayser', 'type': 'User'}, {'comment_id': 471594049, 'comment_body': 'Should this be removed? or do we need to fix the timer event', 'comment_created': datetime.datetime(2020, 8, 17, 16, 24, 29, tzinfo=datetime.timezone.utc), 'commenter': 'henningkayser', 'type': 'User'}, {'comment_id': 471617329, 'comment_body': ""I haven't done things there. If I am honest was copying a lot of the CMakeLists from an example. I can remove this"", 'comment_created': datetime.datetime(2020, 8, 17, 17, 4, 6, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 471622897, 'comment_body': 'In ROS1 the waiting for a joint state message happens in the [constructor](https://github.com/ros-planning/moveit/blob/589f83a132da174991b233931d3ca7f31ab1cba4/moveit_ros/moveit_servo/src/joint_state_subscriber.cpp#L54) (actually the joint_state_subscriber constructor) \r\n\r\nBlocking the constructor was giving me problems when launching as a composable node, so I moved it so the constructor would return quickly. \r\n\r\nI added the waitForInitialized function mostly for the C++ API where a user could create Servo and start it before a joint message was received, and they could [wait for it to initialize ](https://github.com/AdamPettinger/moveit2/blob/aca6eefe58667e358f8ec639ce0976d801d202b9/moveit_ros/moveit_servo/src/cpp_interface_demo/servo_cpp_interface_demo.cpp#L120-L127)\r\n\r\nI have no problem moving this to `start()`', 'comment_created': datetime.datetime(2020, 8, 17, 17, 8, 54, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 471626730, 'comment_body': ""Ack, meant to at least leave a TODO in there. I briefly looked around and couldn't find an example or anything indicating we could pass the timer event to the CB.\r\n\r\nAm not sure if we should just drop it (and remove the commented code) or try a bit harder to figure that out."", 'comment_created': datetime.datetime(2020, 8, 17, 17, 12, 9, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 471881810, 'comment_body': 'Do you happen to know why .hpp seems to have become the standard for ROS2?', 'comment_created': datetime.datetime(2020, 8, 18, 2, 47, 24, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 471885020, 'comment_body': ""Update the comment since JointGroupVelocityController and JointGroupPositionController aren't available yet (and may never be).\r\n\r\n` Currently supported are std_msgs/Float64MultiArray or trajectory_msgs/JointTrajectory`"", 'comment_created': datetime.datetime(2020, 8, 18, 2, 59, 6, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 471885843, 'comment_body': 'behavior', 'comment_created': datetime.datetime(2020, 8, 18, 3, 2, 17, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 471886118, 'comment_body': 'Cartesian', 'comment_created': datetime.datetime(2020, 8, 18, 3, 3, 20, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 471886921, 'comment_body': 'recommended', 'comment_created': datetime.datetime(2020, 8, 18, 3, 6, 27, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 471887362, 'comment_body': ""Add this -- we've encountered a few prototype arms where the joint feedback was so bad, Servo didn't work. As far as it could tell, the arm didn't move.\r\n\r\n`4) Joint encoders that provide rapid and accurate joint position feedback.`"", 'comment_created': datetime.datetime(2020, 8, 18, 3, 8, 8, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 471887710, 'comment_body': 'correspond', 'comment_created': datetime.datetime(2020, 8, 18, 3, 9, 26, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 471887767, 'comment_body': 'behavior, recommended', 'comment_created': datetime.datetime(2020, 8, 18, 3, 9, 41, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 471889265, 'comment_body': 'Can you add the word ""collision"" here? This can be kind of confusing.\r\n\r\n`/** \\brief Callback for collision stopping time, from the thread that is aware of velocity and acceleration */`', 'comment_created': datetime.datetime(2020, 8, 18, 3, 15, 49, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 471890860, 'comment_body': ""why the mutex when the previous version didn't need it?"", 'comment_created': datetime.datetime(2020, 8, 18, 3, 22, 26, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 471891081, 'comment_body': 'I think you could delete these pool TODOs. Create an issue for later', 'comment_created': datetime.datetime(2020, 8, 18, 3, 23, 30, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 471891554, 'comment_body': 'I wouldn\'t mind deleting it. If you do fix it, I think the message could be improved like this:\r\n\r\nROS_WARN_STREAM_THROTTLE_NAMED(ROS_LOG_THROTTLE_PERIOD, LOGNAME, ""Collision checking lags desired rate. Actual period: "" << timer_event.profile.last_duration.toSec());', 'comment_created': datetime.datetime(2020, 8, 18, 3, 25, 18, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 471892601, 'comment_body': ""IMO this line is a little hard to decipher, and throwing `auto&` into the mix doesn't help. Would prefer if you changed it to \r\n\r\n`rclcpp::Clock clock ...`"", 'comment_created': datetime.datetime(2020, 8, 18, 3, 29, 31, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 471893428, 'comment_body': 'Should delete the commented line or leave a comment', 'comment_created': datetime.datetime(2020, 8, 18, 3, 32, 54, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 471893697, 'comment_body': ""whew, what's going on with std::weak_ptr< ...\r\n\r\nDon't think I've seen that before"", 'comment_created': datetime.datetime(2020, 8, 18, 3, 34, 8, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 471894687, 'comment_body': ""a one-line comment about what you're testing would be nice. Something like:\r\n\r\n// Check that the filter converges to expected value after many identical messages.\r\n// Then check that a single measurement does not change the value instantly."", 'comment_created': datetime.datetime(2020, 8, 18, 3, 38, 8, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 471894899, 'comment_body': 'just wondering, any reason why you wanted to have this operator?', 'comment_created': datetime.datetime(2020, 8, 18, 3, 39, 7, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 472040969, 'comment_body': 'Ok, I would remove it for now', 'comment_created': datetime.datetime(2020, 8, 18, 9, 23, 14, tzinfo=datetime.timezone.utc), 'commenter': 'henningkayser', 'type': 'User'}, {'comment_id': 472041933, 'comment_body': ""No, it's totally fine like this, thanks for clarifying."", 'comment_created': datetime.datetime(2020, 8, 18, 9, 24, 56, tzinfo=datetime.timezone.utc), 'commenter': 'henningkayser', 'type': 'User'}, {'comment_id': 472204197, 'comment_body': ""I don't mind either way. There are other variables set here which don't fit nicely into `${PROJECT_NAME}_lib` or `${PROJECT_NAME}_server`"", 'comment_created': datetime.datetime(2020, 8, 18, 13, 39, 6, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 472206211, 'comment_body': 'I do not', 'comment_created': datetime.datetime(2020, 8, 18, 13, 41, 54, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 472213757, 'comment_body': 'The previous had another class `joint_state_subscriber_` that had the mutex in it. I removed this as Tyler and I added it while debugging kinetic problems in ROS1', 'comment_created': datetime.datetime(2020, 8, 18, 13, 52, 33, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 472226122, 'comment_body': 'I found this in the [intraprocess communications tutorial](https://index.ros.org/doc/ros2/Tutorials/Intra-Process-Communication/) and decided to use it to stay consistent with the tutorials. I am more than happy to adjust a bit and make it less... convoluted?', 'comment_created': datetime.datetime(2020, 8, 18, 14, 9, 41, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 472230841, 'comment_body': ""Reading here...  https://stackoverflow.com/a/8385731/3499467\r\n\r\nit says SharedPtr's should be passed by const ref, so do: `rclcpp::Node::SharedPtr& node`\r\n\r\nAnd it has some good advice for passing by reference vs value"", 'comment_created': datetime.datetime(2020, 8, 18, 14, 15, 59, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 472231984, 'comment_body': 'should be <=, I think', 'comment_created': datetime.datetime(2020, 8, 18, 14, 17, 35, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 472232119, 'comment_body': ""Sure, it is purely for testing. While testing I have 2 ways to get parameters:\r\n\r\n1. Through the parameters, as in normal launching (used in the integration tests)\r\n2. Via the C++ call in the `test/test_parameter_struct.hpp` file - used in unit tests so we don't have to launch ROS stuff\r\n\r\nDuring the parameters test, I do both and make sure they are equivalent. This is nice because the tests can only pass if all the parameters are the same and catches a case where somebody might change the yaml file and forget to update the parameter struct in that testing file. It also helped make sure the parameters were actually being loaded correctly"", 'comment_created': datetime.datetime(2020, 8, 18, 14, 17, 48, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 472232419, 'comment_body': 'Yikes spelling! All over... thanks Andy haha', 'comment_created': datetime.datetime(2020, 8, 18, 14, 18, 15, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 472232629, 'comment_body': '.. should be greater than or equal to zero', 'comment_created': datetime.datetime(2020, 8, 18, 14, 18, 34, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 472232983, 'comment_body': 'Done, I will make that issue', 'comment_created': datetime.datetime(2020, 8, 18, 14, 19, 2, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 472233277, 'comment_body': 'Sounds good to me, done', 'comment_created': datetime.datetime(2020, 8, 18, 14, 19, 26, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 472236677, 'comment_body': 'i believe response should be `const shared_ptr&`  (best practice)', 'comment_created': datetime.datetime(2020, 8, 18, 14, 24, 6, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 472241354, 'comment_body': ""Summarizing the important bits from stackoverflow:\r\n\r\n- Don't pass a shared_ptr by ref if there's a chance of it being deleted in the function\r\n\r\n- Pass by reference is more performant than pass by value\r\n\r\n- If you always pass by reference, then there's no point to it being a shared pointer (because it's never actually shared)\r\n\r\n^ I disagree on that last point because it manages `delete` for you"", 'comment_created': datetime.datetime(2020, 8, 18, 14, 30, 15, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 472244447, 'comment_body': 'oops, I take it back. I guess there is not a const because `response` gets modified', 'comment_created': datetime.datetime(2020, 8, 18, 14, 34, 17, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 472244861, 'comment_body': 'Deleted it', 'comment_created': datetime.datetime(2020, 8, 18, 14, 34, 53, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 472246121, 'comment_body': 'Uncommented it', 'comment_created': datetime.datetime(2020, 8, 18, 14, 36, 34, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 472253772, 'comment_body': ""meh, i'm happy enough with that. If you have time to simplify it, that would be cool"", 'comment_created': datetime.datetime(2020, 8, 18, 14, 46, 21, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 472255062, 'comment_body': ""I'm glad you used SetUp() and TearDown()"", 'comment_created': datetime.datetime(2020, 8, 18, 14, 48, 6, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 472255429, 'comment_body': 'delete commented line', 'comment_created': datetime.datetime(2020, 8, 18, 14, 48, 37, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 472255909, 'comment_body': 'update the node name', 'comment_created': datetime.datetime(2020, 8, 18, 14, 49, 10, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 472256987, 'comment_body': 'FYI only the syntax was changed here, so this logic exists in ROS1 [here](https://github.com/ros-planning/moveit/blob/589f83a132da174991b233931d3ca7f31ab1cba4/moveit_ros/moveit_servo/src/servo.cpp#L170)', 'comment_created': datetime.datetime(2020, 8, 18, 14, 50, 36, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 472257808, 'comment_body': 'Should this also be changed in ROS1? [See here](https://github.com/ros-planning/moveit/blob/589f83a132da174991b233931d3ca7f31ab1cba4/moveit_ros/moveit_servo/src/servo.cpp#L196-L201)', 'comment_created': datetime.datetime(2020, 8, 18, 14, 51, 41, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 472261109, 'comment_body': ""IMO that's not significant enough to merit a PR in ROS1, but might as well fix it here.\r\n\r\n(Feel free to make a ROS1 PR if you want to, but we already have like 2-3 open PRs that need reviewing)"", 'comment_created': datetime.datetime(2020, 8, 18, 14, 55, 48, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 472261175, 'comment_body': ""IMO that's not significant enough to merit a PR in ROS1, but might as well fix it here.\r\n\r\n(Feel free to make a ROS1 PR if you want to, but we already have like 2-3 open PRs that need reviewing)"", 'comment_created': datetime.datetime(2020, 8, 18, 14, 55, 54, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 472263476, 'comment_body': ""\r\n\r\nlet's definitely make sure the velocity limit enforcement gets updated, like we discussed. Here's the ROS1 PR:\r\n\r\nros-planning/moveit#2260"", 'comment_created': datetime.datetime(2020, 8, 18, 14, 58, 48, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 472270174, 'comment_body': 'Maybe you could sneak it into this PR you already started\r\n\r\nhttps://github.com/ros-planning/moveit/pull/2249', 'comment_created': datetime.datetime(2020, 8, 18, 15, 8, 17, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 472270979, 'comment_body': 'Looks good in most other places, changed it here', 'comment_created': datetime.datetime(2020, 8, 18, 15, 9, 21, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 472275614, 'comment_body': ""When you pass a shared_ptr by reference you are circumventing the lifetime sharing because you are essentially passing a pointer to the shared_ptr class and therefore you are not incrementing/decrementing the counter.  If you are actually sharing the lifetime of a shared_ptr you should pass it by value (the object you are calling it on is retaining it to use it later).\r\n\r\nAs a matter of style, I generally prefer you to pass the raw pointer or a reference to the underlying object.  However, that is not the normal ros style of the const shared_ptr&.  One advantage of the const shared_ptr& is that it is generally less likely you get a nullptr but it is still possible.  IMO the best interface would be to accept a reference to the underlying object but the semantics for calling that from a shared_ptr is really annoying.  Hence the const shared_ptr& semantics.\r\n\r\nGenerally, anything that receives a pointer parameter type (including smart ones) should do nullptr checks before use.  This isn't common in ROS though, so feel free to ignore this advice.\r\n\r\nThere is a bunch of lifetime and scope management that happens in c++ that is not declarative.  This implied part of the language that is a side effect of various things that make common situations unintuitive.  There have been some efforts to help fix that like the not_null<> template but to use that we'd have to depend on yet another external library (https://github.com/microsoft/GSL)."", 'comment_created': datetime.datetime(2020, 8, 18, 15, 15, 52, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 472307394, 'comment_body': ""I really like what you did here.  The only thing that I see is that the output parameter is in the middle of the parameter list.  I think it would be clearer if you either made it the first or last parameter.\r\n\r\nNext, you aren't changing the shared_ptr of node in this so it should be a `const shared_ptr<rclcpp::Node>&`.\r\n\r\nI really like what you did with the double/int issue and this whole function for making the parameter declaration and getting simpler."", 'comment_created': datetime.datetime(2020, 8, 18, 16, 0, 31, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 472312236, 'comment_body': ""`const shared_ptr<rclcpp::Node>&` here too.\r\n\r\nLooking at this one I'm reminded why I like the output parameter (parameters) to be the first parameter.  You can't make it the last one as it would conflict with default parameters which have to go at the end.  Also, when you make it the first parameter the output parameter it is more intuitive as the left of the operator= is the output:\r\n\r\noutput = function(inputs)\r\nfunction(output, inputs)"", 'comment_created': datetime.datetime(2020, 8, 18, 16, 8, 2, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 472314417, 'comment_body': ""Newline at end of file.  There should be some way to configure your editor to make sure there is a newline at the end of your file when you save it then this annoying issue won't bug you in the future. "", 'comment_created': datetime.datetime(2020, 8, 18, 16, 11, 23, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 472325915, 'comment_body': 'Indeed there was, fixed it for all files!', 'comment_created': datetime.datetime(2020, 8, 18, 16, 29, 13, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 472344200, 'comment_body': ':+1: ', 'comment_created': datetime.datetime(2020, 8, 18, 16, 58, 21, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 472352901, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2020, 8, 18, 17, 10, 56, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 472353033, 'comment_body': 'Moved it to the start on both', 'comment_created': datetime.datetime(2020, 8, 18, 17, 11, 11, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 472361279, 'comment_body': ""I think it's really just for indicating c++ (rclcpp) because there is also native support for c (rclc). We don't have to use hpp, though."", 'comment_created': datetime.datetime(2020, 8, 18, 17, 25, 14, tzinfo=datetime.timezone.utc), 'commenter': 'henningkayser', 'type': 'User'}, {'comment_id': 472384805, 'comment_body': '[This line](https://github.com/ros-planning/moveit/blob/ed3e196d28d670fb154af3cb2866227448b3ad32/moveit_ros/moveit_servo/src/servo_calcs.cpp#L309-L310) in `servo_calcs.cpp` indicates that `num_outgoing_halt_msgs_to_publish` can be 0, do we want to keep it?\r\n\r\n`// num_outgoing_halt_msgs_to_publish == 0 signifies that we should keep republishing forever.\r\n  if (!have_nonzero_command_ && (parameters_.num_outgoing_halt_msgs_to_publish != 0) &&`', 'comment_created': datetime.datetime(2020, 8, 18, 18, 5, 4, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 472389825, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 8, 18, 18, 14, 14, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 472394897, 'comment_body': 'yep, good catch', 'comment_created': datetime.datetime(2020, 8, 18, 18, 22, 58, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 472869948, 'comment_body': 'Better use the convenience functions from `moveit_test_utils` to load your robot model. ', 'comment_created': datetime.datetime(2020, 8, 19, 8, 52, 15, tzinfo=datetime.timezone.utc), 'commenter': 'henningkayser', 'type': 'User'}, {'comment_id': 473048523, 'comment_body': 'Servo is looking for the URDF and SRDF as parameters (strings). To set that for testing I was doing:\r\n\r\n```\r\nloadModelFile(""panda_description/urdf/panda.urdf"", robot_description_string);\r\nloadModelFile(""panda_moveit_config/config/panda.srdf"", srdf_string);\r\nnode_->declare_parameter<std::string>(""robot_description"", robot_description_string);\r\nnode_->declare_parameter<std::string>(""robot_description_semantic"", srdf_string);\r\n```\r\nI don\'t see a way in the `moveit_test_utils` to give the path to the file and get back the string for loading as a parameter, but maybe I am missing something?\r\n', 'comment_created': datetime.datetime(2020, 8, 19, 13, 55, 56, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 473091587, 'comment_body': 'If you only want to use a `moveit_resources` package `moveit_test_utils` is the way to go. If you want to support any robot using the `robot_description` parameter, the PSM (or the RobotModelLoader) supports this without anything extra and the `moveit_resources` default should be passed with the launch file. If your actual use case is not covered, maybe it should go into `moveit_test_utils`.', 'comment_created': datetime.datetime(2020, 8, 19, 14, 53, 17, tzinfo=datetime.timezone.utc), 'commenter': 'henningkayser', 'type': 'User'}, {'comment_id': 473097793, 'comment_body': ""I see, `moveit_resources` doesn't really help because the PSM expects either the robot_description parameter or a `RobotModelLoader` (not the RobotModel). Maybe it would still be a good idea to move a convenience function for this to test utils. Something that declares the robot description parameters from a default package and optionally provides you with the loader instance."", 'comment_created': datetime.datetime(2020, 8, 19, 15, 1, 39, tzinfo=datetime.timezone.utc), 'commenter': 'henningkayser', 'type': 'User'}, {'comment_id': 473327206, 'comment_body': 'recommend grouping these `install(...)` blocks with the other install commands below', 'comment_created': datetime.datetime(2020, 8, 19, 21, 14, 44, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 473361464, 'comment_body': 'Put a sleep in the loop and rclcpp::ok() as a terminating condition', 'comment_created': datetime.datetime(2020, 8, 19, 21, 54, 40, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 473961673, 'comment_body': ""I don't really understand why this should be necessary, but maybe I just didn't get the API right. I thought `declare_parameter()` already returns the correctly typed parameter value (default value or override from yaml) where trivial casts have already been applied (i.e. if you declare a double, an int should be casted to one).  If value conversion is not successful, `declare_parameter()` will throw an `InvalidParameterValueException`.  After declaring a parameter, `get_parameter()` will always return true (at least that's what I thought) so we would actually have to verify that the output value doesn't match the possibly invalid default value. The `false` case would only check for the `rclcpp::ParameterType::PARAMETER_NOT_SET` flag which is only used if undeclared parameters are allowed."", 'comment_created': datetime.datetime(2020, 8, 20, 13, 18, 21, tzinfo=datetime.timezone.utc), 'commenter': 'henningkayser', 'type': 'User'}, {'comment_id': 474042516, 'comment_body': 'Possible out of scope for this PR, but algorithm-heavy files like this would be better to live in moveit_core and only the ROS bindings are in moveit_ros. Would make these components much more reusable ', 'comment_created': datetime.datetime(2020, 8, 20, 14, 50, 29, tzinfo=datetime.timezone.utc), 'commenter': 'davetcoleman', 'type': 'User'}, {'comment_id': 474043542, 'comment_body': 'This is a generic utility and would much better live in this folder for all of moveit to use:\r\n\r\nhttps://github.com/ros-planning/moveit/tree/master/moveit_core/macros/include/moveit/macros', 'comment_created': datetime.datetime(2020, 8, 20, 14, 51, 42, tzinfo=datetime.timezone.utc), 'commenter': 'davetcoleman', 'type': 'User'}, {'comment_id': 474044003, 'comment_body': 'Can this file also live in moveit_core?', 'comment_created': datetime.datetime(2020, 8, 20, 14, 52, 23, tzinfo=datetime.timezone.utc), 'commenter': 'davetcoleman', 'type': 'User'}, {'comment_id': 474044461, 'comment_body': 'Would this be better to live in moveit_tutorials?', 'comment_created': datetime.datetime(2020, 8, 20, 14, 53, 4, tzinfo=datetime.timezone.utc), 'commenter': 'davetcoleman', 'type': 'User'}, {'comment_id': 474243768, 'comment_body': 'Done. The `waitForInitialized` includes a sleep (as a wait for message)', 'comment_created': datetime.datetime(2020, 8, 20, 20, 8, 13, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 474245339, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 8, 20, 20, 11, 33, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 474248645, 'comment_body': 'I think you are right, I will look into this. In general I am unsure how to tell if a parameter was successfully set from yaml vs just taken as the default value. There are some parameters in `servo` that _**can**_ work as the default, but the user might not want that. And a bunch of course that cannot be default, and should be caught here as invalid', 'comment_created': datetime.datetime(2020, 8, 20, 20, 18, 12, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 474712984, 'comment_body': ""I think so, but I don't see anywhere for moveit2_tutorials yet"", 'comment_created': datetime.datetime(2020, 8, 21, 13, 54, 30, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 474713890, 'comment_body': 'I am ok with moving some of these out, in this PR or a followup one', 'comment_created': datetime.datetime(2020, 8, 21, 13, 56, 1, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 474992843, 'comment_body': ""Note for others, this fixed a segfault.  The issue was that cancel just asks the executor to exit, it doesn't wait for it to happen which means that the memory was being freed while it was still being used."", 'comment_created': datetime.datetime(2020, 8, 21, 22, 16, 42, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 475049177, 'comment_body': 'OK, I did some reworking on the parameter reading. You were correct about the `get_parameter()` always returning true after the `declare_parameter()` call. From the documentation, it does seem like the type casting with `declare_parameter()` would work, but I couldn\'t get it to and was still struggling with some doubles being read as ints (which could be fixed by writing **1.0** instead of **1** in the yaml, but that is definitely confusing for a user). Example of what didn\'t work, and still threw the error the catch looks for here:\r\n`parameters->low_pass_filter_coeff = node->declare_parameter<double>(ns + "".low_pass_filter_coeff"", -1);`\r\n\r\nThe change I just made turns that template function (`declareAndGetParam()`) into a void return and basically just uses it to catch the double-int problem. ', 'comment_created': datetime.datetime(2020, 8, 22, 5, 29, 10, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}]","[{'commit_sha': 'db1f3227ea59af9aac3cd290a0ce4555eddc3718', 'committer_username': 'AdamPettinger', 'committer_name': None, 'committer_email': 'adam.l.pettinger@gmail.com', 'commit_date': datetime.datetime(2017, 4, 28, 21, 32, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0dbb33c02118132f5347e1d76d987446946eb1e0', 'committer_username': 'tylerjw', 'committer_name': 'Tyler Weaver', 'committer_email': 'maybe@tylerjw.dev', 'commit_date': datetime.datetime(2012, 10, 4, 23, 55, 35, tzinfo=datetime.timezone.utc)}]",,28165117,adam.l.pettinger@gmail.com,User,,17,,3,8
468923227,[Servo] Port moveit_servo to ROS2,"### Description

This is a huge PR for porting `moveit_servo` to ROS2:

1. Ports the source
2. Adds examples (C++ interface, composable node interface, teleoperation demo for gamepad)
3. Adds integration and unit tests

@AndyZe @tylerjw 

Currently relies on `moveit_resources`, but I understand that might change soon. When it does, I will update and push here to use the new version

![Servo Teleop Gif](https://user-images.githubusercontent.com/28165117/90417441-5205d500-e079-11ea-95ab-57d196c9d6e4.gif)",True,248,https://api.github.com/repos/moveit/moveit2/pulls/248,https://github.com/moveit/moveit2/pull/248,closed,5064,1853,64,2,6,88,0,0,[],2020-08-17 16:04:42+00:00,2020-08-24 03:40:51+00:00,560169.0,"6 days, 11:36:09","[{'comment_id': 471583061, 'comment_body': ""Remove, you're already defining 14 below"", 'comment_created': datetime.datetime(2020, 8, 17, 16, 5, 51, tzinfo=datetime.timezone.utc), 'commenter': 'henningkayser', 'type': 'User'}, {'comment_id': 471586077, 'comment_body': ""I don't think we want to enable this by default, that's why we check for warnings in CI. There have been discussions about this, I would have to look them up, though"", 'comment_created': datetime.datetime(2020, 8, 17, 16, 10, 40, tzinfo=datetime.timezone.utc), 'commenter': 'henningkayser', 'type': 'User'}, {'comment_id': 471587733, 'comment_body': 'I like the idea of using variables like this. Alternatively, we could follow the ROS 1 convention is to use patterns like `${PROJECT_NAME}_lib`, `${PROJECT_NAME}_server`.', 'comment_created': datetime.datetime(2020, 8, 17, 16, 13, 36, tzinfo=datetime.timezone.utc), 'commenter': 'henningkayser', 'type': 'User'}, {'comment_id': 471588078, 'comment_body': 'Please combine targets in a single install command', 'comment_created': datetime.datetime(2020, 8, 17, 16, 14, 14, tzinfo=datetime.timezone.utc), 'commenter': 'henningkayser', 'type': 'User'}, {'comment_id': 471588745, 'comment_body': 'Is macOS fully supported?', 'comment_created': datetime.datetime(2020, 8, 17, 16, 15, 19, tzinfo=datetime.timezone.utc), 'commenter': 'henningkayser', 'type': 'User'}, {'comment_id': 471590389, 'comment_body': 'Should this be const or are the parameters changed?', 'comment_created': datetime.datetime(2020, 8, 17, 16, 18, 15, tzinfo=datetime.timezone.utc), 'commenter': 'henningkayser', 'type': 'User'}, {'comment_id': 471590537, 'comment_body': 'I guess the node pointer can also be const', 'comment_created': datetime.datetime(2020, 8, 17, 16, 18, 27, tzinfo=datetime.timezone.utc), 'commenter': 'henningkayser', 'type': 'User'}, {'comment_id': 471591502, 'comment_body': ""Why is this different from ROS1 and shouldn't this be part of `start()`"", 'comment_created': datetime.datetime(2020, 8, 17, 16, 20, 9, tzinfo=datetime.timezone.utc), 'commenter': 'henningkayser', 'type': 'User'}, {'comment_id': 471594049, 'comment_body': 'Should this be removed? or do we need to fix the timer event', 'comment_created': datetime.datetime(2020, 8, 17, 16, 24, 29, tzinfo=datetime.timezone.utc), 'commenter': 'henningkayser', 'type': 'User'}, {'comment_id': 471617329, 'comment_body': ""I haven't done things there. If I am honest was copying a lot of the CMakeLists from an example. I can remove this"", 'comment_created': datetime.datetime(2020, 8, 17, 17, 4, 6, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 471622897, 'comment_body': 'In ROS1 the waiting for a joint state message happens in the [constructor](https://github.com/ros-planning/moveit/blob/589f83a132da174991b233931d3ca7f31ab1cba4/moveit_ros/moveit_servo/src/joint_state_subscriber.cpp#L54) (actually the joint_state_subscriber constructor) \r\n\r\nBlocking the constructor was giving me problems when launching as a composable node, so I moved it so the constructor would return quickly. \r\n\r\nI added the waitForInitialized function mostly for the C++ API where a user could create Servo and start it before a joint message was received, and they could [wait for it to initialize ](https://github.com/AdamPettinger/moveit2/blob/aca6eefe58667e358f8ec639ce0976d801d202b9/moveit_ros/moveit_servo/src/cpp_interface_demo/servo_cpp_interface_demo.cpp#L120-L127)\r\n\r\nI have no problem moving this to `start()`', 'comment_created': datetime.datetime(2020, 8, 17, 17, 8, 54, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 471626730, 'comment_body': ""Ack, meant to at least leave a TODO in there. I briefly looked around and couldn't find an example or anything indicating we could pass the timer event to the CB.\r\n\r\nAm not sure if we should just drop it (and remove the commented code) or try a bit harder to figure that out."", 'comment_created': datetime.datetime(2020, 8, 17, 17, 12, 9, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 471881810, 'comment_body': 'Do you happen to know why .hpp seems to have become the standard for ROS2?', 'comment_created': datetime.datetime(2020, 8, 18, 2, 47, 24, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 471885020, 'comment_body': ""Update the comment since JointGroupVelocityController and JointGroupPositionController aren't available yet (and may never be).\r\n\r\n` Currently supported are std_msgs/Float64MultiArray or trajectory_msgs/JointTrajectory`"", 'comment_created': datetime.datetime(2020, 8, 18, 2, 59, 6, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 471885843, 'comment_body': 'behavior', 'comment_created': datetime.datetime(2020, 8, 18, 3, 2, 17, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 471886118, 'comment_body': 'Cartesian', 'comment_created': datetime.datetime(2020, 8, 18, 3, 3, 20, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 471886921, 'comment_body': 'recommended', 'comment_created': datetime.datetime(2020, 8, 18, 3, 6, 27, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 471887362, 'comment_body': ""Add this -- we've encountered a few prototype arms where the joint feedback was so bad, Servo didn't work. As far as it could tell, the arm didn't move.\r\n\r\n`4) Joint encoders that provide rapid and accurate joint position feedback.`"", 'comment_created': datetime.datetime(2020, 8, 18, 3, 8, 8, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 471887710, 'comment_body': 'correspond', 'comment_created': datetime.datetime(2020, 8, 18, 3, 9, 26, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 471887767, 'comment_body': 'behavior, recommended', 'comment_created': datetime.datetime(2020, 8, 18, 3, 9, 41, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 471889265, 'comment_body': 'Can you add the word ""collision"" here? This can be kind of confusing.\r\n\r\n`/** \\brief Callback for collision stopping time, from the thread that is aware of velocity and acceleration */`', 'comment_created': datetime.datetime(2020, 8, 18, 3, 15, 49, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 471890860, 'comment_body': ""why the mutex when the previous version didn't need it?"", 'comment_created': datetime.datetime(2020, 8, 18, 3, 22, 26, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 471891081, 'comment_body': 'I think you could delete these pool TODOs. Create an issue for later', 'comment_created': datetime.datetime(2020, 8, 18, 3, 23, 30, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 471891554, 'comment_body': 'I wouldn\'t mind deleting it. If you do fix it, I think the message could be improved like this:\r\n\r\nROS_WARN_STREAM_THROTTLE_NAMED(ROS_LOG_THROTTLE_PERIOD, LOGNAME, ""Collision checking lags desired rate. Actual period: "" << timer_event.profile.last_duration.toSec());', 'comment_created': datetime.datetime(2020, 8, 18, 3, 25, 18, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 471892601, 'comment_body': ""IMO this line is a little hard to decipher, and throwing `auto&` into the mix doesn't help. Would prefer if you changed it to \r\n\r\n`rclcpp::Clock clock ...`"", 'comment_created': datetime.datetime(2020, 8, 18, 3, 29, 31, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 471893428, 'comment_body': 'Should delete the commented line or leave a comment', 'comment_created': datetime.datetime(2020, 8, 18, 3, 32, 54, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 471893697, 'comment_body': ""whew, what's going on with std::weak_ptr< ...\r\n\r\nDon't think I've seen that before"", 'comment_created': datetime.datetime(2020, 8, 18, 3, 34, 8, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 471894687, 'comment_body': ""a one-line comment about what you're testing would be nice. Something like:\r\n\r\n// Check that the filter converges to expected value after many identical messages.\r\n// Then check that a single measurement does not change the value instantly."", 'comment_created': datetime.datetime(2020, 8, 18, 3, 38, 8, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 471894899, 'comment_body': 'just wondering, any reason why you wanted to have this operator?', 'comment_created': datetime.datetime(2020, 8, 18, 3, 39, 7, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 472040969, 'comment_body': 'Ok, I would remove it for now', 'comment_created': datetime.datetime(2020, 8, 18, 9, 23, 14, tzinfo=datetime.timezone.utc), 'commenter': 'henningkayser', 'type': 'User'}, {'comment_id': 472041933, 'comment_body': ""No, it's totally fine like this, thanks for clarifying."", 'comment_created': datetime.datetime(2020, 8, 18, 9, 24, 56, tzinfo=datetime.timezone.utc), 'commenter': 'henningkayser', 'type': 'User'}, {'comment_id': 472204197, 'comment_body': ""I don't mind either way. There are other variables set here which don't fit nicely into `${PROJECT_NAME}_lib` or `${PROJECT_NAME}_server`"", 'comment_created': datetime.datetime(2020, 8, 18, 13, 39, 6, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 472206211, 'comment_body': 'I do not', 'comment_created': datetime.datetime(2020, 8, 18, 13, 41, 54, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 472213757, 'comment_body': 'The previous had another class `joint_state_subscriber_` that had the mutex in it. I removed this as Tyler and I added it while debugging kinetic problems in ROS1', 'comment_created': datetime.datetime(2020, 8, 18, 13, 52, 33, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 472226122, 'comment_body': 'I found this in the [intraprocess communications tutorial](https://index.ros.org/doc/ros2/Tutorials/Intra-Process-Communication/) and decided to use it to stay consistent with the tutorials. I am more than happy to adjust a bit and make it less... convoluted?', 'comment_created': datetime.datetime(2020, 8, 18, 14, 9, 41, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 472230841, 'comment_body': ""Reading here...  https://stackoverflow.com/a/8385731/3499467\r\n\r\nit says SharedPtr's should be passed by const ref, so do: `rclcpp::Node::SharedPtr& node`\r\n\r\nAnd it has some good advice for passing by reference vs value"", 'comment_created': datetime.datetime(2020, 8, 18, 14, 15, 59, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 472231984, 'comment_body': 'should be <=, I think', 'comment_created': datetime.datetime(2020, 8, 18, 14, 17, 35, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 472232119, 'comment_body': ""Sure, it is purely for testing. While testing I have 2 ways to get parameters:\r\n\r\n1. Through the parameters, as in normal launching (used in the integration tests)\r\n2. Via the C++ call in the `test/test_parameter_struct.hpp` file - used in unit tests so we don't have to launch ROS stuff\r\n\r\nDuring the parameters test, I do both and make sure they are equivalent. This is nice because the tests can only pass if all the parameters are the same and catches a case where somebody might change the yaml file and forget to update the parameter struct in that testing file. It also helped make sure the parameters were actually being loaded correctly"", 'comment_created': datetime.datetime(2020, 8, 18, 14, 17, 48, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 472232419, 'comment_body': 'Yikes spelling! All over... thanks Andy haha', 'comment_created': datetime.datetime(2020, 8, 18, 14, 18, 15, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 472232629, 'comment_body': '.. should be greater than or equal to zero', 'comment_created': datetime.datetime(2020, 8, 18, 14, 18, 34, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 472232983, 'comment_body': 'Done, I will make that issue', 'comment_created': datetime.datetime(2020, 8, 18, 14, 19, 2, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 472233277, 'comment_body': 'Sounds good to me, done', 'comment_created': datetime.datetime(2020, 8, 18, 14, 19, 26, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 472236677, 'comment_body': 'i believe response should be `const shared_ptr&`  (best practice)', 'comment_created': datetime.datetime(2020, 8, 18, 14, 24, 6, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 472241354, 'comment_body': ""Summarizing the important bits from stackoverflow:\r\n\r\n- Don't pass a shared_ptr by ref if there's a chance of it being deleted in the function\r\n\r\n- Pass by reference is more performant than pass by value\r\n\r\n- If you always pass by reference, then there's no point to it being a shared pointer (because it's never actually shared)\r\n\r\n^ I disagree on that last point because it manages `delete` for you"", 'comment_created': datetime.datetime(2020, 8, 18, 14, 30, 15, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 472244447, 'comment_body': 'oops, I take it back. I guess there is not a const because `response` gets modified', 'comment_created': datetime.datetime(2020, 8, 18, 14, 34, 17, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 472244861, 'comment_body': 'Deleted it', 'comment_created': datetime.datetime(2020, 8, 18, 14, 34, 53, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 472246121, 'comment_body': 'Uncommented it', 'comment_created': datetime.datetime(2020, 8, 18, 14, 36, 34, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 472253772, 'comment_body': ""meh, i'm happy enough with that. If you have time to simplify it, that would be cool"", 'comment_created': datetime.datetime(2020, 8, 18, 14, 46, 21, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 472255062, 'comment_body': ""I'm glad you used SetUp() and TearDown()"", 'comment_created': datetime.datetime(2020, 8, 18, 14, 48, 6, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 472255429, 'comment_body': 'delete commented line', 'comment_created': datetime.datetime(2020, 8, 18, 14, 48, 37, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 472255909, 'comment_body': 'update the node name', 'comment_created': datetime.datetime(2020, 8, 18, 14, 49, 10, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 472256987, 'comment_body': 'FYI only the syntax was changed here, so this logic exists in ROS1 [here](https://github.com/ros-planning/moveit/blob/589f83a132da174991b233931d3ca7f31ab1cba4/moveit_ros/moveit_servo/src/servo.cpp#L170)', 'comment_created': datetime.datetime(2020, 8, 18, 14, 50, 36, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 472257808, 'comment_body': 'Should this also be changed in ROS1? [See here](https://github.com/ros-planning/moveit/blob/589f83a132da174991b233931d3ca7f31ab1cba4/moveit_ros/moveit_servo/src/servo.cpp#L196-L201)', 'comment_created': datetime.datetime(2020, 8, 18, 14, 51, 41, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 472261109, 'comment_body': ""IMO that's not significant enough to merit a PR in ROS1, but might as well fix it here.\r\n\r\n(Feel free to make a ROS1 PR if you want to, but we already have like 2-3 open PRs that need reviewing)"", 'comment_created': datetime.datetime(2020, 8, 18, 14, 55, 48, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 472261175, 'comment_body': ""IMO that's not significant enough to merit a PR in ROS1, but might as well fix it here.\r\n\r\n(Feel free to make a ROS1 PR if you want to, but we already have like 2-3 open PRs that need reviewing)"", 'comment_created': datetime.datetime(2020, 8, 18, 14, 55, 54, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 472263476, 'comment_body': ""\r\n\r\nlet's definitely make sure the velocity limit enforcement gets updated, like we discussed. Here's the ROS1 PR:\r\n\r\nros-planning/moveit#2260"", 'comment_created': datetime.datetime(2020, 8, 18, 14, 58, 48, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 472270174, 'comment_body': 'Maybe you could sneak it into this PR you already started\r\n\r\nhttps://github.com/ros-planning/moveit/pull/2249', 'comment_created': datetime.datetime(2020, 8, 18, 15, 8, 17, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 472270979, 'comment_body': 'Looks good in most other places, changed it here', 'comment_created': datetime.datetime(2020, 8, 18, 15, 9, 21, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 472275614, 'comment_body': ""When you pass a shared_ptr by reference you are circumventing the lifetime sharing because you are essentially passing a pointer to the shared_ptr class and therefore you are not incrementing/decrementing the counter.  If you are actually sharing the lifetime of a shared_ptr you should pass it by value (the object you are calling it on is retaining it to use it later).\r\n\r\nAs a matter of style, I generally prefer you to pass the raw pointer or a reference to the underlying object.  However, that is not the normal ros style of the const shared_ptr&.  One advantage of the const shared_ptr& is that it is generally less likely you get a nullptr but it is still possible.  IMO the best interface would be to accept a reference to the underlying object but the semantics for calling that from a shared_ptr is really annoying.  Hence the const shared_ptr& semantics.\r\n\r\nGenerally, anything that receives a pointer parameter type (including smart ones) should do nullptr checks before use.  This isn't common in ROS though, so feel free to ignore this advice.\r\n\r\nThere is a bunch of lifetime and scope management that happens in c++ that is not declarative.  This implied part of the language that is a side effect of various things that make common situations unintuitive.  There have been some efforts to help fix that like the not_null<> template but to use that we'd have to depend on yet another external library (https://github.com/microsoft/GSL)."", 'comment_created': datetime.datetime(2020, 8, 18, 15, 15, 52, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 472307394, 'comment_body': ""I really like what you did here.  The only thing that I see is that the output parameter is in the middle of the parameter list.  I think it would be clearer if you either made it the first or last parameter.\r\n\r\nNext, you aren't changing the shared_ptr of node in this so it should be a `const shared_ptr<rclcpp::Node>&`.\r\n\r\nI really like what you did with the double/int issue and this whole function for making the parameter declaration and getting simpler."", 'comment_created': datetime.datetime(2020, 8, 18, 16, 0, 31, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 472312236, 'comment_body': ""`const shared_ptr<rclcpp::Node>&` here too.\r\n\r\nLooking at this one I'm reminded why I like the output parameter (parameters) to be the first parameter.  You can't make it the last one as it would conflict with default parameters which have to go at the end.  Also, when you make it the first parameter the output parameter it is more intuitive as the left of the operator= is the output:\r\n\r\noutput = function(inputs)\r\nfunction(output, inputs)"", 'comment_created': datetime.datetime(2020, 8, 18, 16, 8, 2, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 472314417, 'comment_body': ""Newline at end of file.  There should be some way to configure your editor to make sure there is a newline at the end of your file when you save it then this annoying issue won't bug you in the future. "", 'comment_created': datetime.datetime(2020, 8, 18, 16, 11, 23, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 472325915, 'comment_body': 'Indeed there was, fixed it for all files!', 'comment_created': datetime.datetime(2020, 8, 18, 16, 29, 13, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 472344200, 'comment_body': ':+1: ', 'comment_created': datetime.datetime(2020, 8, 18, 16, 58, 21, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 472352901, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2020, 8, 18, 17, 10, 56, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 472353033, 'comment_body': 'Moved it to the start on both', 'comment_created': datetime.datetime(2020, 8, 18, 17, 11, 11, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 472361279, 'comment_body': ""I think it's really just for indicating c++ (rclcpp) because there is also native support for c (rclc). We don't have to use hpp, though."", 'comment_created': datetime.datetime(2020, 8, 18, 17, 25, 14, tzinfo=datetime.timezone.utc), 'commenter': 'henningkayser', 'type': 'User'}, {'comment_id': 472384805, 'comment_body': '[This line](https://github.com/ros-planning/moveit/blob/ed3e196d28d670fb154af3cb2866227448b3ad32/moveit_ros/moveit_servo/src/servo_calcs.cpp#L309-L310) in `servo_calcs.cpp` indicates that `num_outgoing_halt_msgs_to_publish` can be 0, do we want to keep it?\r\n\r\n`// num_outgoing_halt_msgs_to_publish == 0 signifies that we should keep republishing forever.\r\n  if (!have_nonzero_command_ && (parameters_.num_outgoing_halt_msgs_to_publish != 0) &&`', 'comment_created': datetime.datetime(2020, 8, 18, 18, 5, 4, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 472389825, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 8, 18, 18, 14, 14, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 472394897, 'comment_body': 'yep, good catch', 'comment_created': datetime.datetime(2020, 8, 18, 18, 22, 58, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 472869948, 'comment_body': 'Better use the convenience functions from `moveit_test_utils` to load your robot model. ', 'comment_created': datetime.datetime(2020, 8, 19, 8, 52, 15, tzinfo=datetime.timezone.utc), 'commenter': 'henningkayser', 'type': 'User'}, {'comment_id': 473048523, 'comment_body': 'Servo is looking for the URDF and SRDF as parameters (strings). To set that for testing I was doing:\r\n\r\n```\r\nloadModelFile(""panda_description/urdf/panda.urdf"", robot_description_string);\r\nloadModelFile(""panda_moveit_config/config/panda.srdf"", srdf_string);\r\nnode_->declare_parameter<std::string>(""robot_description"", robot_description_string);\r\nnode_->declare_parameter<std::string>(""robot_description_semantic"", srdf_string);\r\n```\r\nI don\'t see a way in the `moveit_test_utils` to give the path to the file and get back the string for loading as a parameter, but maybe I am missing something?\r\n', 'comment_created': datetime.datetime(2020, 8, 19, 13, 55, 56, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 473091587, 'comment_body': 'If you only want to use a `moveit_resources` package `moveit_test_utils` is the way to go. If you want to support any robot using the `robot_description` parameter, the PSM (or the RobotModelLoader) supports this without anything extra and the `moveit_resources` default should be passed with the launch file. If your actual use case is not covered, maybe it should go into `moveit_test_utils`.', 'comment_created': datetime.datetime(2020, 8, 19, 14, 53, 17, tzinfo=datetime.timezone.utc), 'commenter': 'henningkayser', 'type': 'User'}, {'comment_id': 473097793, 'comment_body': ""I see, `moveit_resources` doesn't really help because the PSM expects either the robot_description parameter or a `RobotModelLoader` (not the RobotModel). Maybe it would still be a good idea to move a convenience function for this to test utils. Something that declares the robot description parameters from a default package and optionally provides you with the loader instance."", 'comment_created': datetime.datetime(2020, 8, 19, 15, 1, 39, tzinfo=datetime.timezone.utc), 'commenter': 'henningkayser', 'type': 'User'}, {'comment_id': 473327206, 'comment_body': 'recommend grouping these `install(...)` blocks with the other install commands below', 'comment_created': datetime.datetime(2020, 8, 19, 21, 14, 44, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 473361464, 'comment_body': 'Put a sleep in the loop and rclcpp::ok() as a terminating condition', 'comment_created': datetime.datetime(2020, 8, 19, 21, 54, 40, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 473961673, 'comment_body': ""I don't really understand why this should be necessary, but maybe I just didn't get the API right. I thought `declare_parameter()` already returns the correctly typed parameter value (default value or override from yaml) where trivial casts have already been applied (i.e. if you declare a double, an int should be casted to one).  If value conversion is not successful, `declare_parameter()` will throw an `InvalidParameterValueException`.  After declaring a parameter, `get_parameter()` will always return true (at least that's what I thought) so we would actually have to verify that the output value doesn't match the possibly invalid default value. The `false` case would only check for the `rclcpp::ParameterType::PARAMETER_NOT_SET` flag which is only used if undeclared parameters are allowed."", 'comment_created': datetime.datetime(2020, 8, 20, 13, 18, 21, tzinfo=datetime.timezone.utc), 'commenter': 'henningkayser', 'type': 'User'}, {'comment_id': 474042516, 'comment_body': 'Possible out of scope for this PR, but algorithm-heavy files like this would be better to live in moveit_core and only the ROS bindings are in moveit_ros. Would make these components much more reusable ', 'comment_created': datetime.datetime(2020, 8, 20, 14, 50, 29, tzinfo=datetime.timezone.utc), 'commenter': 'davetcoleman', 'type': 'User'}, {'comment_id': 474043542, 'comment_body': 'This is a generic utility and would much better live in this folder for all of moveit to use:\r\n\r\nhttps://github.com/ros-planning/moveit/tree/master/moveit_core/macros/include/moveit/macros', 'comment_created': datetime.datetime(2020, 8, 20, 14, 51, 42, tzinfo=datetime.timezone.utc), 'commenter': 'davetcoleman', 'type': 'User'}, {'comment_id': 474044003, 'comment_body': 'Can this file also live in moveit_core?', 'comment_created': datetime.datetime(2020, 8, 20, 14, 52, 23, tzinfo=datetime.timezone.utc), 'commenter': 'davetcoleman', 'type': 'User'}, {'comment_id': 474044461, 'comment_body': 'Would this be better to live in moveit_tutorials?', 'comment_created': datetime.datetime(2020, 8, 20, 14, 53, 4, tzinfo=datetime.timezone.utc), 'commenter': 'davetcoleman', 'type': 'User'}, {'comment_id': 474243768, 'comment_body': 'Done. The `waitForInitialized` includes a sleep (as a wait for message)', 'comment_created': datetime.datetime(2020, 8, 20, 20, 8, 13, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 474245339, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 8, 20, 20, 11, 33, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 474248645, 'comment_body': 'I think you are right, I will look into this. In general I am unsure how to tell if a parameter was successfully set from yaml vs just taken as the default value. There are some parameters in `servo` that _**can**_ work as the default, but the user might not want that. And a bunch of course that cannot be default, and should be caught here as invalid', 'comment_created': datetime.datetime(2020, 8, 20, 20, 18, 12, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 474712984, 'comment_body': ""I think so, but I don't see anywhere for moveit2_tutorials yet"", 'comment_created': datetime.datetime(2020, 8, 21, 13, 54, 30, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 474713890, 'comment_body': 'I am ok with moving some of these out, in this PR or a followup one', 'comment_created': datetime.datetime(2020, 8, 21, 13, 56, 1, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 474992843, 'comment_body': ""Note for others, this fixed a segfault.  The issue was that cancel just asks the executor to exit, it doesn't wait for it to happen which means that the memory was being freed while it was still being used."", 'comment_created': datetime.datetime(2020, 8, 21, 22, 16, 42, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 475049177, 'comment_body': 'OK, I did some reworking on the parameter reading. You were correct about the `get_parameter()` always returning true after the `declare_parameter()` call. From the documentation, it does seem like the type casting with `declare_parameter()` would work, but I couldn\'t get it to and was still struggling with some doubles being read as ints (which could be fixed by writing **1.0** instead of **1** in the yaml, but that is definitely confusing for a user). Example of what didn\'t work, and still threw the error the catch looks for here:\r\n`parameters->low_pass_filter_coeff = node->declare_parameter<double>(ns + "".low_pass_filter_coeff"", -1);`\r\n\r\nThe change I just made turns that template function (`declareAndGetParam()`) into a void return and basically just uses it to catch the double-int problem. ', 'comment_created': datetime.datetime(2020, 8, 22, 5, 29, 10, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}]","[{'commit_sha': 'db1f3227ea59af9aac3cd290a0ce4555eddc3718', 'committer_username': 'AdamPettinger', 'committer_name': None, 'committer_email': 'adam.l.pettinger@gmail.com', 'commit_date': datetime.datetime(2017, 4, 28, 21, 32, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0dbb33c02118132f5347e1d76d987446946eb1e0', 'committer_username': 'tylerjw', 'committer_name': 'Tyler Weaver', 'committer_email': 'maybe@tylerjw.dev', 'commit_date': datetime.datetime(2012, 10, 4, 23, 55, 35, tzinfo=datetime.timezone.utc)}]",,28165117,adam.l.pettinger@gmail.com,User,,17,,3,8
473400493,[Servo] Fixes to Servo tests/demos,"### Description

Some changes to the tests to hopefully make them less flaky

1. Integration testing: remove the StaleCommandStop test, and instead add that check to the end of SendJointCommand test
2. Unit testing: Change the ServoCalcs unit test to use shared pointers for the ROS node, planning scene monitor, and Servo parameters so they are only loaded at the start of the unit tests instead of for each individual test
3. Minor change to the teleop demo to use a thread to add the collision objects instead of a future
4. Minor spelling corrections
",True,258,https://api.github.com/repos/moveit/moveit2/pulls/258,https://github.com/moveit/moveit2/pull/258,closed,69,81,7,3,1,2,0,0,[],2020-08-25 19:08:20+00:00,2020-08-26 09:36:34+00:00,52094.0,14:28:14,"[{'comment_id': 476737673, 'comment_body': 'I like the idea.  You should change the name of the node though.', 'comment_created': datetime.datetime(2020, 8, 25, 21, 7, 20, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 476768760, 'comment_body': 'Ack, fixed', 'comment_created': datetime.datetime(2020, 8, 25, 21, 47, 48, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}]","[{'commit_sha': '6a929425935f53ce926e225345a58a03b4d92176', 'committer_username': 'AdamPettinger', 'committer_name': None, 'committer_email': 'adam.l.pettinger@gmail.com', 'commit_date': datetime.datetime(2017, 4, 28, 21, 32, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2913417a6a3ef4957d506a9dc71fd3ce9401a99a', 'committer_username': 'AdamPettinger', 'committer_name': None, 'committer_email': 'adam.l.pettinger@gmail.com', 'commit_date': datetime.datetime(2017, 4, 28, 21, 32, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b896508ec0829becf0e9138a922e55fb40d1f3db', 'committer_username': 'AdamPettinger', 'committer_name': None, 'committer_email': 'adam.l.pettinger@gmail.com', 'commit_date': datetime.datetime(2017, 4, 28, 21, 32, 44, tzinfo=datetime.timezone.utc)}]",,28165117,adam.l.pettinger@gmail.com,User,,17,,3,8
443510417,Add JointJog.msg to Foxy,"I am working to port part of MoveIt to ROS2, and we depend on `control_msgs/msg/JointJog.msg` (see [https://github.com/ros-planning/moveit2/issues/206](https://github.com/ros-planning/moveit2/issues/206))

This PR just copies the commit that added this message to the default branch with minor fixes for ROS2. ",True,47,https://api.github.com/repos/ros-controls/control_msgs/pulls/47,https://github.com/ros-controls/control_msgs/pull/47,closed,21,0,2,2,3,0,0,0,[],2020-07-02 13:16:30+00:00,2020-07-03 05:55:47+00:00,59957.0,16:39:17,[],"[{'commit_sha': '71656e510f2cb32800b4c8f209365df606918b01', 'committer_username': 'AndyZe', 'committer_name': 'AndyZe', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 3, 2, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd7e3a3113ee690ca8bb37f35cb4cbf927ea96e6', 'committer_username': 'AdamPettinger', 'committer_name': None, 'committer_email': 'adam.l.pettinger@gmail.com', 'commit_date': datetime.datetime(2017, 4, 28, 21, 32, 44, tzinfo=datetime.timezone.utc)}]",,28165117,adam.l.pettinger@gmail.com,User,,17,,3,8
435983384,[jog_arm] Changes before porting to ROS2,"### Description

These are changes I wanted to make (in addition to [https://github.com/ros-planning/moveit/pull/2103](https://github.com/ros-planning/moveit/pull/2103)) before starting on porting the jogger to ROS2 because I want these changes there as well. 

The changes consist of a lot of minor changes, see list below for details. Note that discussion and reviews exist here already: [https://github.com/PickNikRobotics/moveit/pull/8](https://github.com/PickNikRobotics/moveit/pull/8), because I wanted to start the review process before #2103 landed.

- General cleanup: defining `const` in functions where applicable, fixing comments, combining if statements and making them flow better
- I found a stale but nonzero command could make it through the timer callback function without updating the joint position filters, so fixed that and made **sure** the filters are updated every cycle
- Removed the `suddenHalt(Eigen::ArrayXd& delta_theta)` overload. It included comments saying position and velocity controlled robots were handled differently, but this function did not handle them differently (and only set `delta_theta` to all 0 which could be **really bad** for a position controlled robot). It was only called one place with the Eigen Array, and I replaced the call with a `setZero()` there and deleted the function so future users don't use it and accidentally send the robot to 0's. 
- Small fixes in the drift dimensions use and in singularity scaling. Previously the singularity scaling wasn't doing what the algorithm in the comments said it was. Tested after fixing and it looks really good
- Small changes around the `have_nonzero_twist_stamped_` and `have_nonzero_joint_jog_` which were used intermittently in the `run()` timer callback but also set in the command subscriber callbacks. Moved them to mutex protected implementation similar to the rest of subscriber callback variables
- Avoid recalculating the planning -> command transform if the incoming command is empty or in the command frame

### Checklist
- [x] **Required by CI**: Code is auto formatted using [clang-format](http://moveit.ros.org/documentation/contributing/code)
- [ ] Extend the tutorials / documentation [reference](http://moveit.ros.org/documentation/contributing/)
- [ ] Document API changes relevant to the user in the [MIGRATION.md](https://github.com/ros-planning/moveit/blob/master/MIGRATION.md) notes
- [ ] Create tests, which fail without this PR [reference](https://ros-planning.github.io/moveit_tutorials/doc/tests/tests_tutorial.html)
- [ ] Include a screenshot if changing a GUI
- [ ] While waiting for someone to review your request, please help review [another open pull request](https://github.com/ros-planning/moveit/pulls) to support the maintainers

[//]: # ""You can expect a response from a maintainer within 7 days. If you haven't heard anything by then, feel free to ping the thread. Thank you!""
",True,2151,https://api.github.com/repos/moveit/moveit/pulls/2151,https://github.com/moveit/moveit/pull/2151,closed,155,93,4,16,2,8,0,0,[],2020-06-17 17:06:33+00:00,2020-06-22 18:52:57+00:00,438384.0,"5 days, 1:46:24","[{'comment_id': 441869586, 'comment_body': 'One of these calls to resetLowPassFilters is causing some really weird behavior.', 'comment_created': datetime.datetime(2020, 6, 17, 22, 31, 36, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 443100080, 'comment_body': 'I believe this is fixed with the newest commits', 'comment_created': datetime.datetime(2020, 6, 20, 4, 25, 17, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 443649427, 'comment_body': 'The name of `joint_jog_` should be more clear. Like, `joint_jog_cmd_`', 'comment_created': datetime.datetime(2020, 6, 22, 15, 36, 59, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 443653118, 'comment_body': 'This transform was previously calculated around L231. It looks like `tf_moveit_to_robot_cmd_frame_` is not used around line 231, though. Can you move L231 here? Then delete this local variable `tf_moveit_to_incoming_cmd_frame`', 'comment_created': datetime.datetime(2020, 6, 22, 15, 42, 29, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 443673390, 'comment_body': 'These are 2 different transformations:\r\n\r\n- `tf_moveit_to_robot_cmd_frame_` which is the moveit planning frame -> robot command frame (specified in yaml file) transformation. I believe it was calculated early (here in L231) so that it would be updated and available if the rest of the jogging process failed / ended early, and would always be available for the C++ API (via `getCommandFrameTransform()`) regardless of jogging status\r\n- `tf_moveit_to_incoming_cmd_frame` is the moveit planning frame -> incoming twist command frame transformation and is calculated and used in the Cartesian jogging\r\n\r\nWe only use one of these to actually jog every cycle. If the twist command frame is empty, or it\'s in the same frame given as the ""robot command frame"" in the parameters, we use the already calculated `tf_moveit_to_robot_cmd_frame_`. If it is a different frame, we jog in that frame and calculate the (local) `tf_moveit_to_incoming_cmd_frame`\r\n\r\nI believe this was the desired intent before this PR, and the changes here are to avoid recalculating `tf_moveit_to_robot_cmd_frame_` if the jogging command is in that frame. I can discuss more, but I think this is OK', 'comment_created': datetime.datetime(2020, 6, 22, 16, 13, 5, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 443674989, 'comment_body': ""ok, that sounds good. A comment at Line 230 would be good:\r\n\r\n// Calculate this transform to ensure it's available via C++ API"", 'comment_created': datetime.datetime(2020, 6, 22, 16, 15, 42, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 443675084, 'comment_body': 'Agree, changed it to `joint_jog_cmd_`, and also changed the similar `twist_stamped_` to `twist_stamped_cmd_`, see latest commit', 'comment_created': datetime.datetime(2020, 6, 22, 16, 15, 52, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}, {'comment_id': 443677169, 'comment_body': 'Sounds good, see new commit', 'comment_created': datetime.datetime(2020, 6, 22, 16, 19, 14, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}]","[{'commit_sha': '50283e2d791d4d786946aa8b8bf99aaaf40e2536', 'committer_username': 'tylerjw', 'committer_name': 'Tyler Weaver', 'committer_email': 'maybe@tylerjw.dev', 'commit_date': datetime.datetime(2012, 10, 4, 23, 55, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38a65cb7da186926aa00d37b131aa1dbf618f8cf', 'committer_username': 'AdamPettinger', 'committer_name': None, 'committer_email': 'adam.l.pettinger@gmail.com', 'commit_date': datetime.datetime(2017, 4, 28, 21, 32, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ac0ebeb361aafce523f78b20905fd4d3a9cd8e6', 'committer_username': 'AdamPettinger', 'committer_name': None, 'committer_email': 'adam.l.pettinger@gmail.com', 'commit_date': datetime.datetime(2017, 4, 28, 21, 32, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '741a472f2746d88a294421e1a9905b9a6c6ecb6a', 'committer_username': 'AdamPettinger', 'committer_name': None, 'committer_email': 'adam.l.pettinger@gmail.com', 'commit_date': datetime.datetime(2017, 4, 28, 21, 32, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ebea58e86153f2b1223edf12d8ac6e3f52650c9d', 'committer_username': 'AdamPettinger', 'committer_name': None, 'committer_email': 'adam.l.pettinger@gmail.com', 'commit_date': datetime.datetime(2017, 4, 28, 21, 32, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef56265a236661416adac4c0bd4fe7c83ff77892', 'committer_username': 'AdamPettinger', 'committer_name': None, 'committer_email': 'adam.l.pettinger@gmail.com', 'commit_date': datetime.datetime(2017, 4, 28, 21, 32, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '128e0e9987d851845bb955ce30cd164f30ccc910', 'committer_username': 'AdamPettinger', 'committer_name': None, 'committer_email': 'adam.l.pettinger@gmail.com', 'commit_date': datetime.datetime(2017, 4, 28, 21, 32, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e5cf926f1553d4d6d8e072f26d571ec48d46628', 'committer_username': 'AdamPettinger', 'committer_name': None, 'committer_email': 'adam.l.pettinger@gmail.com', 'commit_date': datetime.datetime(2017, 4, 28, 21, 32, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '01d0c76a1aabfe41ae389e5f8444683486aa8e58', 'committer_username': 'AdamPettinger', 'committer_name': None, 'committer_email': 'adam.l.pettinger@gmail.com', 'commit_date': datetime.datetime(2017, 4, 28, 21, 32, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b8b8ef0be113bcc24215035e8d1f118f4508113c', 'committer_username': 'AdamPettinger', 'committer_name': None, 'committer_email': 'adam.l.pettinger@gmail.com', 'commit_date': datetime.datetime(2017, 4, 28, 21, 32, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '650bdf0f6c823e66a6f7db386528557172ce5b19', 'committer_username': 'AdamPettinger', 'committer_name': None, 'committer_email': 'adam.l.pettinger@gmail.com', 'commit_date': datetime.datetime(2017, 4, 28, 21, 32, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '18697c5324dcbabd9e178ab9e6f26a109ce2f3f0', 'committer_username': 'AndyZe', 'committer_name': 'AndyZe', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 3, 2, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd45526b46d82f76f34ed438f67f683ef40e8f3cd', 'committer_username': 'AdamPettinger', 'committer_name': None, 'committer_email': 'adam.l.pettinger@gmail.com', 'commit_date': datetime.datetime(2017, 4, 28, 21, 32, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '00baa7cb00c7c3fd37861a618545bc74e7f7c5c7', 'committer_username': 'AdamPettinger', 'committer_name': None, 'committer_email': 'adam.l.pettinger@gmail.com', 'commit_date': datetime.datetime(2017, 4, 28, 21, 32, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60e0b7545d2fcaa23ae28d8bff1772aea1a1e830', 'committer_username': 'AdamPettinger', 'committer_name': None, 'committer_email': 'adam.l.pettinger@gmail.com', 'commit_date': datetime.datetime(2017, 4, 28, 21, 32, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e9cda02e2356f6052341350538a36c8950a18c8', 'committer_username': 'AdamPettinger', 'committer_name': None, 'committer_email': 'adam.l.pettinger@gmail.com', 'commit_date': datetime.datetime(2017, 4, 28, 21, 32, 44, tzinfo=datetime.timezone.utc)}]",,28165117,adam.l.pettinger@gmail.com,User,,17,,3,8
440174111,[jog_arm] Move and rename to moveit_ros/moveit_servo,"### Description

This moves the `moveit_experimental/jog_arm` package and renames it `moveit_ros/moveit_servo` @AndyZe. There is already an open PR for ROS2 ([https://github.com/ros-planning/moveit2/pull/223](https://github.com/ros-planning/moveit2/pull/223)) with some discussion.

@tylerjw will help with migration notes through the name change as well as his big recent PR #2103. 

### Checklist
- [ ] **Required by CI**: Code is auto formatted using [clang-format](http://moveit.ros.org/documentation/contributing/code)
- [ ] Extend the tutorials / documentation [reference](http://moveit.ros.org/documentation/contributing/)
- [ ] Document API changes relevant to the user in the [MIGRATION.md](https://github.com/ros-planning/moveit/blob/master/MIGRATION.md) notes
- [ ] Create tests, which fail without this PR [reference](https://ros-planning.github.io/moveit_tutorials/doc/tests/tests_tutorial.html)
- [ ] Include a screenshot if changing a GUI
- [ ] While waiting for someone to review your request, please help review [another open pull request](https://github.com/ros-planning/moveit/pulls) to support the maintainers

[//]: # ""You can expect a response from a maintainer within 7 days. If you haven't heard anything by then, feel free to ping the thread. Thank you!""
",True,2165,https://api.github.com/repos/moveit/moveit/pulls/2165,https://github.com/moveit/moveit/pull/2165,closed,467,466,46,16,10,0,0,0,[],2020-06-25 17:59:22+00:00,2020-06-29 16:56:15+00:00,341813.0,"3 days, 22:56:53",[],"[{'commit_sha': '0672c9e9d622907db43bfcb19c2a02a3ebfef03a', 'committer_username': 'AdamPettinger', 'committer_name': None, 'committer_email': 'adam.l.pettinger@gmail.com', 'commit_date': datetime.datetime(2017, 4, 28, 21, 32, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93e29c490f66671b42e14541bc981be96081665c', 'committer_username': 'AdamPettinger', 'committer_name': None, 'committer_email': 'adam.l.pettinger@gmail.com', 'commit_date': datetime.datetime(2017, 4, 28, 21, 32, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c76997881e4998d557a291b2928674656a03c76d', 'committer_username': 'AdamPettinger', 'committer_name': None, 'committer_email': 'adam.l.pettinger@gmail.com', 'commit_date': datetime.datetime(2017, 4, 28, 21, 32, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '349624b91f1c90f4062608a650bea210d3d59ba0', 'committer_username': 'AdamPettinger', 'committer_name': None, 'committer_email': 'adam.l.pettinger@gmail.com', 'commit_date': datetime.datetime(2017, 4, 28, 21, 32, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '325b2e5629136d05e25a9d88ca43785d7ffe0ead', 'committer_username': 'AdamPettinger', 'committer_name': None, 'committer_email': 'adam.l.pettinger@gmail.com', 'commit_date': datetime.datetime(2017, 4, 28, 21, 32, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b819d3e0ecaaaa0879c79e5c4e1324780f9558b', 'committer_username': 'AdamPettinger', 'committer_name': None, 'committer_email': 'adam.l.pettinger@gmail.com', 'commit_date': datetime.datetime(2017, 4, 28, 21, 32, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '542061950caa05f0feab100ac589dadd5e24bcbe', 'committer_username': 'AdamPettinger', 'committer_name': None, 'committer_email': 'adam.l.pettinger@gmail.com', 'commit_date': datetime.datetime(2017, 4, 28, 21, 32, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12ddc0d7d237409469bdc6e17de48d92a8339907', 'committer_username': 'AdamPettinger', 'committer_name': None, 'committer_email': 'adam.l.pettinger@gmail.com', 'commit_date': datetime.datetime(2017, 4, 28, 21, 32, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '572088b6dd75001ea15e5549ff3afd00dec6816c', 'committer_username': 'AdamPettinger', 'committer_name': None, 'committer_email': 'adam.l.pettinger@gmail.com', 'commit_date': datetime.datetime(2017, 4, 28, 21, 32, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e95ecc9986f88a585a3bca49171a64fe8b674c2e', 'committer_username': 'AdamPettinger', 'committer_name': None, 'committer_email': 'adam.l.pettinger@gmail.com', 'commit_date': datetime.datetime(2017, 4, 28, 21, 32, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a602b04f6d453079ddd474b4c976a82d4f046a69', 'committer_username': 'AdamPettinger', 'committer_name': None, 'committer_email': 'adam.l.pettinger@gmail.com', 'commit_date': datetime.datetime(2017, 4, 28, 21, 32, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '499665c232106332fe1c9562119fd607e1529d3b', 'committer_username': 'AdamPettinger', 'committer_name': None, 'committer_email': 'adam.l.pettinger@gmail.com', 'commit_date': datetime.datetime(2017, 4, 28, 21, 32, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc991965106f2cbe317160a7108b2244e3c6a3a6', 'committer_username': 'AdamPettinger', 'committer_name': None, 'committer_email': 'adam.l.pettinger@gmail.com', 'commit_date': datetime.datetime(2017, 4, 28, 21, 32, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'abb90dc722317b113a04806aba77ec5e9e549ba1', 'committer_username': 'AdamPettinger', 'committer_name': None, 'committer_email': 'adam.l.pettinger@gmail.com', 'commit_date': datetime.datetime(2017, 4, 28, 21, 32, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '747e82c05f599f642ccb3b005ef24a143aa1c4c6', 'committer_username': 'AdamPettinger', 'committer_name': None, 'committer_email': 'adam.l.pettinger@gmail.com', 'commit_date': datetime.datetime(2017, 4, 28, 21, 32, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88021ddba4681d1c2b347614d89515dd1ebaa0ae', 'committer_username': 'AdamPettinger', 'committer_name': None, 'committer_email': 'adam.l.pettinger@gmail.com', 'commit_date': datetime.datetime(2017, 4, 28, 21, 32, 44, tzinfo=datetime.timezone.utc)}]",,28165117,adam.l.pettinger@gmail.com,User,,17,,3,8
466326602,[Servo] Update last_sent_command_ at ServoCalcs start,"### Description

I moved the initialization of `last_sent_command_` from the ServoCalcs constructor to the `start()` function. The `last_sent_command_` is stored and published if Joint or Cartesian servoing is not done. 

This PR fixes a logic error resulting in bad behavior:

1. Start servo
2. Servo around
3. Stop servo
4. Move robot with something besides servo
5. Start servo
6. `last_sent_command_` is stored as where servo stopped in 3 and if published may result in the manipulator jumping back to that position.

This PR fixes by saving `last_sent_command_` as the current position every time servo is started.

There could still be some unexpected behavior if you start the servo while the arm is moving from another input. This will suddenly stop the arm as the `last_sent_command_` is set to the current position and 0 velocity. I am unsure what **should** happen in this case, but am open to suggestions. 
",True,2249,https://api.github.com/repos/moveit/moveit/pulls/2249,https://github.com/moveit/moveit/pull/2249,closed,24,19,4,4,6,0,0,0,[],2020-08-11 20:03:29+00:00,2020-08-26 15:50:11+00:00,1280802.0,"14 days, 19:46:42",[],"[{'commit_sha': 'a3ba5d46170eeb1fd2e054529a204ff2482b5624', 'committer_username': 'AdamPettinger', 'committer_name': None, 'committer_email': 'adam.l.pettinger@gmail.com', 'commit_date': datetime.datetime(2017, 4, 28, 21, 32, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5fe240368e59b9bcafe994ea3a212b4cf49ee996', 'committer_username': 'AdamPettinger', 'committer_name': None, 'committer_email': 'adam.l.pettinger@gmail.com', 'commit_date': datetime.datetime(2017, 4, 28, 21, 32, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c295d42e09c9d86ef1bfe14dfc922bb919c31cd4', 'committer_username': 'AdamPettinger', 'committer_name': None, 'committer_email': 'adam.l.pettinger@gmail.com', 'commit_date': datetime.datetime(2017, 4, 28, 21, 32, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9e20e871949179451cacefd73bba425e3c18e0f', 'committer_username': 'AdamPettinger', 'committer_name': None, 'committer_email': 'adam.l.pettinger@gmail.com', 'commit_date': datetime.datetime(2017, 4, 28, 21, 32, 44, tzinfo=datetime.timezone.utc)}]",,28165117,adam.l.pettinger@gmail.com,User,,17,,3,8
473925295,Fix duplicate nodes from planning scene monitor private node,"### Description

Solves #252. I can change the actual node name if desired. The output of the `ros2 node list` during the demo is now

![image](https://user-images.githubusercontent.com/28165117/91312433-da6f2e80-e779-11ea-8909-4d512bca2ccb.png)
",True,262,https://api.github.com/repos/moveit/moveit2/pulls/262,https://github.com/moveit/moveit2/pull/262,closed,6,1,1,2,1,2,0,0,[],2020-08-26 13:55:45+00:00,2020-08-27 09:39:49+00:00,71044.0,19:44:04,"[{'comment_id': 477418535, 'comment_body': ""Shouldn't the node still go into the same namespace?"", 'comment_created': datetime.datetime(2020, 8, 26, 16, 8, 30, tzinfo=datetime.timezone.utc), 'commenter': 'henningkayser', 'type': 'User'}, {'comment_id': 477504170, 'comment_body': 'Yep, fixed!', 'comment_created': datetime.datetime(2020, 8, 26, 18, 31, 38, tzinfo=datetime.timezone.utc), 'commenter': 'AdamPettinger', 'type': 'User'}]","[{'commit_sha': '781d124eb69d340617e9f33b3482a0909325bbab', 'committer_username': 'AdamPettinger', 'committer_name': None, 'committer_email': 'adam.l.pettinger@gmail.com', 'commit_date': datetime.datetime(2017, 4, 28, 21, 32, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '007ec4a9983a41e279b27f6caec985e2673a03fa', 'committer_username': 'AdamPettinger', 'committer_name': None, 'committer_email': 'adam.l.pettinger@gmail.com', 'commit_date': datetime.datetime(2017, 4, 28, 21, 32, 44, tzinfo=datetime.timezone.utc)}]",,28165117,adam.l.pettinger@gmail.com,User,,17,,3,8

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
170893393,moveit2,moveit/moveit2,C++,504,1022,46,457,9277,310,22,48,"[{'id': 713757133, 'number': 613, 'closed': datetime.datetime(2021, 8, 17, 18, 11, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 16, 21, 27, 4, tzinfo=datetime.timezone.utc), 'time_taken': 74685.0, 'time_delta': '20:44:45', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 712816953, 'number': 612, 'closed': datetime.datetime(2022, 11, 15, 21, 38, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 14, 17, 50, 26, tzinfo=datetime.timezone.utc), 'time_taken': 39584864.0, 'time_delta': '458 days, 3:47:44', 'additions': 36, 'deletions': 1, 'state': 'closed'}, {'id': 712505971, 'number': 611, 'closed': datetime.datetime(2021, 8, 16, 14, 4, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 13, 16, 57, 49, tzinfo=datetime.timezone.utc), 'time_taken': 248824.0, 'time_delta': '2 days, 21:07:04', 'additions': 10, 'deletions': 0, 'state': 'closed'}, {'id': 709568425, 'number': 606, 'closed': datetime.datetime(2021, 8, 17, 15, 56, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 11, 20, 19, 5, tzinfo=datetime.timezone.utc), 'time_taken': 502630.0, 'time_delta': '5 days, 19:37:10', 'additions': 11, 'deletions': 6, 'state': 'closed'}, {'id': 661087343, 'number': 486, 'closed': datetime.datetime(2021, 6, 30, 15, 38, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 3, 17, 21, 36, tzinfo=datetime.timezone.utc), 'time_taken': 2326632.0, 'time_delta': '26 days, 22:17:12', 'additions': 1, 'deletions': 1478, 'state': 'closed'}, {'id': 473925295, 'number': 262, 'closed': datetime.datetime(2020, 8, 27, 9, 39, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 26, 13, 55, 45, tzinfo=datetime.timezone.utc), 'time_taken': 71044.0, 'time_delta': '19:44:04', 'additions': 6, 'deletions': 1, 'state': 'closed'}, {'id': 473400493, 'number': 258, 'closed': datetime.datetime(2020, 8, 26, 9, 36, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 25, 19, 8, 20, tzinfo=datetime.timezone.utc), 'time_taken': 52094.0, 'time_delta': '14:28:14', 'additions': 69, 'deletions': 81, 'state': 'closed'}, {'id': 468923227, 'number': 248, 'closed': datetime.datetime(2020, 8, 24, 3, 40, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 17, 16, 4, 42, tzinfo=datetime.timezone.utc), 'time_taken': 560169.0, 'time_delta': '6 days, 11:36:09', 'additions': 5064, 'deletions': 1853, 'state': 'closed'}, {'id': 438637632, 'number': 223, 'closed': datetime.datetime(2020, 7, 29, 20, 31, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 23, 15, 11, 37, tzinfo=datetime.timezone.utc), 'time_taken': 3129609.0, 'time_delta': '36 days, 5:20:09', 'additions': 467, 'deletions': 466, 'state': 'closed'}, {'id': 438200330, 'number': 221, 'closed': datetime.datetime(2020, 6, 23, 13, 33, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 22, 22, 3, 33, tzinfo=datetime.timezone.utc), 'time_taken': 55770.0, 'time_delta': '15:29:30', 'additions': 4162, 'deletions': 1612, 'state': 'closed'}, {'id': 426105484, 'number': 203, 'closed': datetime.datetime(2020, 6, 22, 22, 25, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 1, 17, 4, 31, tzinfo=datetime.timezone.utc), 'time_taken': 1833680.0, 'time_delta': '21 days, 5:21:20', 'additions': 0, 'deletions': 2465, 'state': 'closed'}]"
64340188,moveit,moveit/moveit,C++,943,1631,69,378,7991,624,9,58,"[{'id': 561918694, 'number': 2501, 'closed': datetime.datetime(2021, 3, 22, 13, 45, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 26, 16, 53, 18, tzinfo=datetime.timezone.utc), 'time_taken': 4740749.0, 'time_delta': '54 days, 20:52:29', 'additions': 16, 'deletions': 4, 'state': 'closed'}, {'id': 542967144, 'number': 2464, 'closed': datetime.datetime(2021, 1, 7, 19, 0, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 12, 19, 19, 18, 4, tzinfo=datetime.timezone.utc), 'time_taken': 1640567.0, 'time_delta': '18 days, 23:42:47', 'additions': 10, 'deletions': 5, 'state': 'closed'}, {'id': 466326602, 'number': 2249, 'closed': datetime.datetime(2020, 8, 26, 15, 50, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 11, 20, 3, 29, tzinfo=datetime.timezone.utc), 'time_taken': 1280802.0, 'time_delta': '14 days, 19:46:42', 'additions': 24, 'deletions': 19, 'state': 'closed'}, {'id': 440174111, 'number': 2165, 'closed': datetime.datetime(2020, 6, 29, 16, 56, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 25, 17, 59, 22, tzinfo=datetime.timezone.utc), 'time_taken': 341813.0, 'time_delta': '3 days, 22:56:53', 'additions': 467, 'deletions': 466, 'state': 'closed'}, {'id': 435983384, 'number': 2151, 'closed': datetime.datetime(2020, 6, 22, 18, 52, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 17, 17, 6, 33, tzinfo=datetime.timezone.utc), 'time_taken': 438384.0, 'time_delta': '5 days, 1:46:24', 'additions': 155, 'deletions': 93, 'state': 'closed'}, {'id': 339625626, 'number': 1724, 'closed': datetime.datetime(2020, 5, 8, 16, 40, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 11, 11, 21, 31, 45, tzinfo=datetime.timezone.utc), 'time_taken': 15448135.0, 'time_delta': '178 days, 19:08:55', 'additions': 51, 'deletions': 3, 'state': 'closed'}]"
6760120,control_msgs,ros-controls/control_msgs,CMake,64,48,18,30,179,10,15,4,"[{'id': 443510417, 'number': 47, 'closed': datetime.datetime(2020, 7, 3, 5, 55, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 2, 13, 16, 30, tzinfo=datetime.timezone.utc), 'time_taken': 59957.0, 'time_delta': '16:39:17', 'additions': 21, 'deletions': 0, 'state': 'closed'}]"
