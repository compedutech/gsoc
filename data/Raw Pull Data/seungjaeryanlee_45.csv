pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
441558684,Implement Deep Q-Network,"This is a mostly finished implementation of Deep Q-Network on the CartPole environment that needs some improvements. Following [the original paper (Mnih et al., 2015)](https://storage.googleapis.com/deepmind-media/dqn/DQNNaturePaper.pdf), the code has both experience replay and target network implemented.

I have identified three places of improvements:

- [x] Parallelize training
  - ~~The Q-network is given a batch of states and outputs a batch of Q-values for all actions (batch size x # actions). This should be transformed to a 1D vector (batch size x 1) that selects the Q-value of the action that was actually selected. In Python, `tf.gather_nd` seems to be the best option, but it does not seem to exist in `_Raw`. Is there a way to use this function?~~
  - `_Raw.gatherNd` exists
- [x] Refactor code
  - ~~There are a lot of commented out `print()` statements. These are left out to aid me as I work through the improvements, but they should be removed once I am finished.~~
- [x] Remove uses of `_Raw`
  - ~~As per @BradLarson 's suggestion, most `_Raw` commands can replaced by S4TF functions. Replace them accordingly.~~
- [x] Use Huber loss
   - ~~Huber loss is mentioned in the original paper and can help with training stability.~~
- [x] Use `:on` for Tensors to support X10 devices
- [x] Improve reproducibility
  - ~~The hyperparameters were chosen via a rough random search, and the results vary heavily.~~
- [x] Separate `gatherNd` into a separate file
  - For a more streamlined improvement to `swift-api`, separate the `gatherNd` redefinition to a new file.",True,617,https://api.github.com/repos/tensorflow/swift-models/pulls/617,https://github.com/tensorflow/swift-models/pull/617,closed,546,0,6,36,7,37,1,0,[{'name': 'gsoc'}],2020-06-29 17:43:34+00:00,2020-08-10 20:14:44+00:00,3637870.0,"42 days, 2:31:10","[{'comment_id': 447154925, 'comment_body': '> * In Python, `tf.gather_nd` seems to be the best option, but it does not seem to exist in `_Raw`. Is there a way to use this function?\r\n\r\n`_Raw.gatherNd` does exist, you can find it in [this source file](https://github.com/tensorflow/swift-apis/blob/master/Sources/TensorFlow/Bindings/RawOpsGenerated.swift):\r\n\r\n<details>\r\n\r\n```swift\r\n  /// Gather slices from `params` into a Tensor with shape specified by `indices`.\r\n  ///\r\n  /// `indices` is a K-dimensional integer tensor, best thought of as a\r\n  /// (K-1)-dimensional tensor of indices into `params`, where each element defines a\r\n  /// slice of `params`:\r\n  ///\r\n  ///     output[\\\\(i_0, ..., i_{K-2}\\\\)] = params[indices[\\\\(i_0, ..., i_{K-2}\\\\)]]\r\n  ///\r\n  /// Whereas in `tf.gather` `indices` defines slices into the `axis`\r\n  /// dimension of `params`, in `tf.gather_nd`, `indices` defines slices into the\r\n  /// first `N` dimensions of `params`, where `N = indices.shape[-1]`.\r\n  ///\r\n  /// The last dimension of `indices` can be at most the rank of\r\n  /// `params`:\r\n  ///\r\n  ///     indices.shape[-1] <= params.rank\r\n  ///\r\n  /// The last dimension of `indices` corresponds to elements\r\n  /// (if `indices.shape[-1] == params.rank`) or slices\r\n  /// (if `indices.shape[-1] < params.rank`) along dimension `indices.shape[-1]`\r\n  /// of `params`.  The output tensor has shape\r\n  ///\r\n  ///     indices.shape[:-1] + params.shape[indices.shape[-1]:]\r\n  ///\r\n  /// Note that on CPU, if an out of bound index is found, an error is returned.\r\n  /// On GPU, if an out of bound index is found, a 0 is stored in the\r\n  /// corresponding output value.\r\n  ///\r\n  /// Some examples below.\r\n  ///\r\n  /// Simple indexing into a matrix:\r\n  ///\r\n  /// ```python\r\n  ///     indices = [[0, 0], [1, 1]]\r\n  ///     params = [[\'a\', \'b\'], [\'c\', \'d\']]\r\n  ///     output = [\'a\', \'d\']\r\n  /// ```\r\n  ///\r\n  /// Slice indexing into a matrix:\r\n  ///\r\n  /// ```python\r\n  ///     indices = [[1], [0]]\r\n  ///     params = [[\'a\', \'b\'], [\'c\', \'d\']]\r\n  ///     output = [[\'c\', \'d\'], [\'a\', \'b\']]\r\n  /// ```\r\n  ///\r\n  /// Indexing into a 3-tensor:\r\n  ///\r\n  /// ```python\r\n  ///     indices = [[1]]\r\n  ///     params = [[[\'a0\', \'b0\'], [\'c0\', \'d0\']],\r\n  ///               [[\'a1\', \'b1\'], [\'c1\', \'d1\']]]\r\n  ///     output = [[[\'a1\', \'b1\'], [\'c1\', \'d1\']]]\r\n  ///\r\n  ///\r\n  ///     indices = [[0, 1], [1, 0]]\r\n  ///     params = [[[\'a0\', \'b0\'], [\'c0\', \'d0\']],\r\n  ///               [[\'a1\', \'b1\'], [\'c1\', \'d1\']]]\r\n  ///     output = [[\'c0\', \'d0\'], [\'a1\', \'b1\']]\r\n  ///\r\n  ///\r\n  ///     indices = [[0, 0, 1], [1, 0, 1]]\r\n  ///     params = [[[\'a0\', \'b0\'], [\'c0\', \'d0\']],\r\n  ///               [[\'a1\', \'b1\'], [\'c1\', \'d1\']]]\r\n  ///     output = [\'b0\', \'b1\']\r\n  /// ```\r\n  ///\r\n  /// Batched indexing into a matrix:\r\n  ///\r\n  /// ```python\r\n  ///     indices = [[[0, 0]], [[0, 1]]]\r\n  ///     params = [[\'a\', \'b\'], [\'c\', \'d\']]\r\n  ///     output = [[\'a\'], [\'b\']]\r\n  /// ```\r\n  ///\r\n  /// Batched slice indexing into a matrix:\r\n  ///\r\n  /// ```python\r\n  ///     indices = [[[1]], [[0]]]\r\n  ///     params = [[\'a\', \'b\'], [\'c\', \'d\']]\r\n  ///     output = [[[\'c\', \'d\']], [[\'a\', \'b\']]]\r\n  /// ```\r\n  ///\r\n  /// Batched indexing into a 3-tensor:\r\n  ///\r\n  /// ```python\r\n  ///     indices = [[[1]], [[0]]]\r\n  ///     params = [[[\'a0\', \'b0\'], [\'c0\', \'d0\']],\r\n  ///               [[\'a1\', \'b1\'], [\'c1\', \'d1\']]]\r\n  ///     output = [[[[\'a1\', \'b1\'], [\'c1\', \'d1\']]],\r\n  ///               [[[\'a0\', \'b0\'], [\'c0\', \'d0\']]]]\r\n  ///\r\n  ///     indices = [[[0, 1], [1, 0]], [[0, 0], [1, 1]]]\r\n  ///     params = [[[\'a0\', \'b0\'], [\'c0\', \'d0\']],\r\n  ///               [[\'a1\', \'b1\'], [\'c1\', \'d1\']]]\r\n  ///     output = [[[\'c0\', \'d0\'], [\'a1\', \'b1\']],\r\n  ///               [[\'a0\', \'b0\'], [\'c1\', \'d1\']]]\r\n  ///\r\n  ///\r\n  ///     indices = [[[0, 0, 1], [1, 0, 1]], [[0, 1, 1], [1, 1, 0]]]\r\n  ///     params = [[[\'a0\', \'b0\'], [\'c0\', \'d0\']],\r\n  ///               [[\'a1\', \'b1\'], [\'c1\', \'d1\']]]\r\n  ///     output = [[\'b0\', \'b1\'], [\'d0\', \'c1\']]\r\n  /// ```\r\n  ///\r\n  /// See also `tf.gather` and `tf.batch_gather`.\r\n  ///\r\n  /// - Parameters:\r\n  ///     - params: The tensor from which to gather values.\r\n  ///     - indices: Index tensor.\r\n  ///\r\n  /// - Output output: Values from `params` gathered from indices given by `indices`, with\r\n  ///     shape `indices.shape[:-1] + params.shape[indices.shape[-1]:]`.\r\n  @inlinable @inline(__always)\r\n  public static func gatherNd<\r\n    Tparams: TensorFlowScalar,\r\n    Tindices: TensorFlowIndex\r\n  >(\r\n    params: Tensor<Tparams>,\r\n    indices: Tensor<Tindices>\r\n  ) -> Tensor<Tparams> {\r\n    let nOutputs = Int(1)\r\n    let op = makeOp(""GatherNd"", nOutputs)\r\n    op.updateAttribute(""Tparams"", Tparams.tensorFlowDataType)\r\n    op.updateAttribute(""Tindices"", Tindices.tensorFlowDataType)\r\n    op.addInput(params)\r\n    op.addInput(indices)\r\n    return op.execute(Int(1))\r\n  }\r\n```\r\n\r\n</details>\r\n\r\nIs this helpful?', 'comment_created': datetime.datetime(2020, 6, 29, 18, 3, 12, tzinfo=datetime.timezone.utc), 'commenter': 'dan-zheng', 'type': 'User'}, {'comment_id': 447156109, 'comment_body': 'You can [set initial values for stored properties](https://docs.swift.org/swift-book/LanguageGuide/Initialization.html) `var count` and `var index` here, which is a bit clearer than initializing them in the initializer:\r\n\r\n```suggestion\r\n    var count: Int = 0\r\n    var index: Int = 0\r\n```', 'comment_created': datetime.datetime(2020, 6, 29, 18, 5, 20, tzinfo=datetime.timezone.utc), 'commenter': 'dan-zheng', 'type': 'User'}, {'comment_id': 447298809, 'comment_body': 'You can use [`Tensor.scalarized()`](https://www.tensorflow.org/swift/api_docs/Structs/Tensor#scalarized) to concisely convert a scalar `Tensor<Scalar>` into a `Scalar`.\r\n```suggestion\r\n                    let action = Int(tfAction.scalarized())\r\n```', 'comment_created': datetime.datetime(2020, 6, 29, 22, 37, 5, tzinfo=datetime.timezone.utc), 'commenter': 'dan-zheng', 'type': 'User'}, {'comment_id': 447298874, 'comment_body': '```suggestion\r\n                    let leftQValue = nextStateQValueBatch[i][0].scalarized()\r\n                    let rightQValue = nextStateQValueBatch[i][1].scalarized()\r\n```', 'comment_created': datetime.datetime(2020, 6, 29, 22, 37, 9, tzinfo=datetime.timezone.utc), 'commenter': 'dan-zheng', 'type': 'User'}, {'comment_id': 447299493, 'comment_body': '```suggestion\r\n    episodeReturn += Int(reward.scalarized())\r\n```', 'comment_created': datetime.datetime(2020, 6, 29, 22, 38, 55, tzinfo=datetime.timezone.utc), 'commenter': 'dan-zheng', 'type': 'User'}, {'comment_id': 447300794, 'comment_body': 'Please add labels to the tuple result type! From the [Swift API Design Guidelines](https://swift.org/documentation/api-design-guidelines/#label-closure-parameters):\r\n\r\n> **Label tuple members and name closure parameters** where they appear in your API.\r\n>\r\n> These names have explanatory power, can be referenced from documentation comments, and provide expressive access to tuple members.\r\n\r\nSince `TensorFlowEnvironmentWrapper` is a Swift wrapper around Python objects, I also think it makes sense to change the type of the ""isDone"" tuple element from `PythonObject` to `Bool`.\r\n\r\n```suggestion\r\n    func step(_ action: Tensor<Int32>) -> (state: Tensor<Float>, reward: Tensor<Float>, isDone: Bool, info: PythonObject) {\r\n```', 'comment_created': datetime.datetime(2020, 6, 29, 22, 42, 53, tzinfo=datetime.timezone.utc), 'commenter': 'dan-zheng', 'type': 'User'}, {'comment_id': 447303869, 'comment_body': ""Here's the current output of `swift run Gym-DQN`:\r\n\r\n```console\r\n$ swift run Gym-DQN\r\nEpisode 1 Return 36\r\nEpisode 2 Return 16\r\nEpisode 3 Return 23\r\nEpisode 4 Return 17\r\nEpisode 5 Return 20\r\nEpisode 6 Return 22\r\nEpisode 7 Return 17\r\nEpisode 8 Return 20\r\nEpisode 9 Return 10\r\nEpisode 10 Return 10\r\nEpisode 11 Return 16\r\nEpisode 12 Return 22\r\nEpisode 13 Return 20\r\nEpisode 14 Return 14\r\nEpisode 15 Return 14\r\nEpisode 16 Return 9\r\nEpisode 17 Return 19\r\nEpisode 18 Return 29\r\nEpisode 19 Return 49\r\nEpisode 20 Return 20\r\n...\r\n```\r\n\r\nI wonder if the model is currently learning and improving?\r\n\r\nDo you have ideas for improving the output format? It would be cool if we could visualize the CartPole environment."", 'comment_created': datetime.datetime(2020, 6, 29, 22, 51, 51, tzinfo=datetime.timezone.utc), 'commenter': 'dan-zheng', 'type': 'User'}, {'comment_id': 447315135, 'comment_body': ""Interesting! I have been getting this error: `error: type '_Raw' has no member 'gather_nd'` so I thought it didn't exist.\r\n\r\nMaybe it is a version issue. This will make my life a lot easier. Thanks!"", 'comment_created': datetime.datetime(2020, 6, 29, 23, 25, 50, tzinfo=datetime.timezone.utc), 'commenter': 'seungjaeryanlee', 'type': 'User'}, {'comment_id': 447323855, 'comment_body': 'The learning is quite unstable indeed, although RL runs tend to be like that in general. For now, I think a simple matplotlib plot with a sliding window average could suffice.\r\n\r\n```swift\r\nlet plt = Python.import(""matplotlib.pyplot"")\r\n\r\nplt.plot(episodeReturns)\r\nplt.savefig(""episodeReturns.png"")\r\n```', 'comment_created': datetime.datetime(2020, 6, 29, 23, 52, 7, tzinfo=datetime.timezone.utc), 'commenter': 'seungjaeryanlee', 'type': 'User'}, {'comment_id': 447536554, 'comment_body': ""Oh... I just realized it's not `gather_nd` but `gatherNd` since Swift uses lowerCamelCase. I guess that makes sense!"", 'comment_created': datetime.datetime(2020, 6, 30, 9, 15, 30, tzinfo=datetime.timezone.utc), 'commenter': 'seungjaeryanlee', 'type': 'User'}, {'comment_id': 447536852, 'comment_body': 'Good point! Thank you for the suggestion.', 'comment_created': datetime.datetime(2020, 6, 30, 9, 15, 57, tzinfo=datetime.timezone.utc), 'commenter': 'seungjaeryanlee', 'type': 'User'}, {'comment_id': 447537221, 'comment_body': 'Amazing! This makes everything so much cleaner. ', 'comment_created': datetime.datetime(2020, 6, 30, 9, 16, 36, tzinfo=datetime.timezone.utc), 'commenter': 'seungjaeryanlee', 'type': 'User'}, {'comment_id': 447540225, 'comment_body': ""Didn't know that I could add labels! Will do: they definitely make it more readable.\r\n\r\nI realized that I did not used `isDone` in the target calculation. The correct target calculation is\r\n\r\nreward + isDone * discount * max_a Q(s', a)\r\n\r\nSo `isDone` should probably be a `Tensor<Bool>` or `Tensor<Float>`. Thanks for pointing it out!\r\n"", 'comment_created': datetime.datetime(2020, 6, 30, 9, 21, 23, tzinfo=datetime.timezone.utc), 'commenter': 'seungjaeryanlee', 'type': 'User'}, {'comment_id': 447592998, 'comment_body': ""I am getting the following error message: \r\n\r\n```\r\nerror: <Cell 103>:53:44: error: expression is not differentiable\r\n                let predictionBatch = _Raw.gatherNd(params: stateQValueBatch, indices: tfFullIndices)\r\n                                           ^\r\n\r\n<Cell 103>:53:44: note: cannot differentiate functions that have not been marked '@differentiable' and that are defined in other files\r\n                let predictionBatch = _Raw.gatherNd(params: stateQValueBatch, indices: tfFullIndices)\r\n```\r\n\r\nIs `gatherNd` not differentiable in S4TF? I believe it was differentiable in Python TF."", 'comment_created': datetime.datetime(2020, 6, 30, 10, 51, 55, tzinfo=datetime.timezone.utc), 'commenter': 'seungjaeryanlee', 'type': 'User'}, {'comment_id': 448033331, 'comment_body': ""`_Raw.gatherNd` doesn't yet have a registered derivative, so you can temporarily register one yourself.\r\n\r\n[Here's some (somewhat obtuse) documentation](https://github.com/apple/swift/blob/master/docs/DifferentiableProgramming.md#derivative-functions) on derivative registration using the `@derivative(of:)` attribute. [This custom differentiation tutorial](https://www.tensorflow.org/swift/tutorials/custom_differentiation) has another simple example.\r\n\r\nHere's an untested derivative implementation I ported from [Python TensorFlow's `_GatherNdGrad`](https://github.com/tensorflow/tensorflow/blob/r2.2/tensorflow/python/ops/array_grad.py#L691-L701):\r\n```swift\r\nimport TensorFlow\r\n\r\nextension _Raw {\r\n  /// Derivative of `_Raw.gatherNd`.\r\n  ///\r\n  /// Ported from TensorFlow Python reference implementation:\r\n  /// https://github.com/tensorflow/tensorflow/blob/r2.2/tensorflow/python/ops/array_grad.py#L691-L701\r\n  @inlinable\r\n  @derivative(of: gatherNd)\r\n  public static func vjpGatherNd<\r\n    Scalar: TensorFlowFloatingPoint,\r\n    Index: TensorFlowIndex\r\n  >(\r\n    params: Tensor<Scalar>,\r\n    indices: Tensor<Index>\r\n  ) -> (\r\n    value: Tensor<Scalar>,\r\n    pullback: (Tensor<Scalar>) -> Tensor<Scalar>\r\n  ) {\r\n    let shapeTensor = Tensor<Index>(params.shapeTensor)\r\n    let value = gatherNd(params: params, indices: indices)\r\n    return (value, { v in\r\n      let dparams = scatterNd(indices: indices, updates: v, shape: shapeTensor)\r\n      return dparams\r\n    })\r\n  }\r\n}\r\n```\r\n\r\nAfter you add this to `Gym/DQN/main.swift`, `error: expression is not differentiable` should go away!"", 'comment_created': datetime.datetime(2020, 6, 30, 23, 26, 8, tzinfo=datetime.timezone.utc), 'commenter': 'dan-zheng', 'type': 'User'}, {'comment_id': 448387412, 'comment_body': ""I'd prefer if we could avoid using _Raw operations directly in public models, because for layering purposes we've discouraged people accessing operations at that level (the underbar is an indication of this). We recently [purged all uses of _Raw from swift-models](https://github.com/tensorflow/swift-models/issues/225) and I'm reluctant to start adding them back in.\r\n\r\nIn this case, I believe [Tensor.gathering()](https://github.com/tensorflow/swift-apis/blob/e9df616445bad8e66b48ae47674dacbc34949466/Sources/TensorFlow/Operators/Basic.swift#L528) might be what you could use here."", 'comment_created': datetime.datetime(2020, 7, 1, 14, 5, 57, tzinfo=datetime.timezone.utc), 'commenter': 'BradLarson', 'type': 'User'}, {'comment_id': 448389040, 'comment_body': 'Instead of `_Raw.max()` here, can you just use `max()`?', 'comment_created': datetime.datetime(2020, 7, 1, 14, 8, 19, tzinfo=datetime.timezone.utc), 'commenter': 'BradLarson', 'type': 'User'}, {'comment_id': 448396304, 'comment_body': ""For `_Raw.gatherNd,` could we split this off into a separate file and make it an extension on Tensor, like with `Tensor.gathering()`? We could follow the template linked below for the `Tensor.gathering()` method, and instead of defining a derivative on `_Raw.gatherNd()`, do so for the new Tensor method. We could give it a more descriptive, Swift-like name in the process.\r\n\r\nOnce we've done that, and prototyped that the new method works in the context of this model, you'd then be able to add it to the core swift-apis themselves for use by others. This staged process would allow us to iterate on the method, naming, parameters, etc. here and then migrate into the core when ready. "", 'comment_created': datetime.datetime(2020, 7, 1, 14, 18, 51, tzinfo=datetime.timezone.utc), 'commenter': 'BradLarson', 'type': 'User'}, {'comment_id': 448398419, 'comment_body': 'I was not aware! Thank you for the note. I will convert them to native operations.', 'comment_created': datetime.datetime(2020, 7, 1, 14, 21, 49, tzinfo=datetime.timezone.utc), 'commenter': 'seungjaeryanlee', 'type': 'User'}, {'comment_id': 448405105, 'comment_body': ""Rather than relying on Numpy to initialize these tensors, it would probably be more efficient to use `Tensor(zeros: on:)`. The `on:` parameter might be useful to specify, or you could leave that off for now, but we're trying to get all of our models to support the X10 device in addition to the default TF eager device and to do so you have to make sure Tensors are created on the right device. That's something we can worry about later, as a refinement to the model."", 'comment_created': datetime.datetime(2020, 7, 1, 14, 31, 24, tzinfo=datetime.timezone.utc), 'commenter': 'BradLarson', 'type': 'User'}, {'comment_id': 448822814, 'comment_body': 'Good point! It has been fixed.', 'comment_created': datetime.datetime(2020, 7, 2, 8, 6, 27, tzinfo=datetime.timezone.utc), 'commenter': 'seungjaeryanlee', 'type': 'User'}, {'comment_id': 448834878, 'comment_body': ""That makes sense! I just have a few related questions:\r\n\r\nQ1. Is there a similar method for boolean tensors? I get the following error for `Tensor<Bool>(on: [capacity])`:\r\n\r\n```\r\n/home/seungjl/git/swift-models/Gym/DQN/main.swift:82:19: error: referencing initializer 'init(zeros:on:)' on 'Tensor' requires that 'Bool' conform to 'Numeric'\r\n        isDones = Tensor<Bool>(zeros: [capacity])\r\n                  ^\r\nTensorFlow.Tensor:1:11: note: where 'Scalar' = 'Bool'\r\nextension Tensor where Scalar : Numeric {\r\n          ^\r\n```\r\n\r\nQ2. For the device, I plan to define `let device: Device = Device.default` and pass it to relevant classes and functions. Is there a way to test that it works for X10 devices?\r\n\r\nThanks!"", 'comment_created': datetime.datetime(2020, 7, 2, 8, 27, 35, tzinfo=datetime.timezone.utc), 'commenter': 'seungjaeryanlee', 'type': 'User'}, {'comment_id': 448874065, 'comment_body': '> Q1. Is there a similar method for boolean tensors? I get the following error for `Tensor<Bool>(on: [capacity])`:\r\n\r\nYou can use the general repeated value initializer [`Tensor.init(repeating:shape: on:)`](https://www.tensorflow.org/swift/api_docs/Structs/Tensor#/s:10TensorFlow0A0V9repeating5shape2onACyxGx_AA0A5ShapeVAA6DeviceVtcfc):\r\n\r\n```swift\r\nTensor<Bool>(repeating: false, shape: [capacity], on: device)\r\n```', 'comment_created': datetime.datetime(2020, 7, 2, 9, 31, 56, tzinfo=datetime.timezone.utc), 'commenter': 'dan-zheng', 'type': 'User'}, {'comment_id': 466810143, 'comment_body': 'The new output format looks great!\r\n\r\n```console\r\n$  swift run Gym-DQN\r\nEpisode:    1 | Step     34 | Epsilon: 0.967 | Train:  34 | Eval:   9\r\nEpisode:    3 | Step     67 | Epsilon: 0.936 | Train:  13 | Eval:  12\r\nEpisode:    4 | Step     85 | Epsilon: 0.919 | Train:  18 | Eval:  26\r\nEpisode:    5 | Step     97 | Epsilon: 0.908 | Train:  12 | Eval:  31\r\nEpisode:   62 | Step   1063 | Epsilon: 0.352 | Train:  53 | Eval: 200\r\nSolved in 62 episodes with 1063 steps!\r\n```', 'comment_created': datetime.datetime(2020, 8, 7, 4, 11, 13, tzinfo=datetime.timezone.utc), 'commenter': 'dan-zheng', 'type': 'User'}, {'comment_id': 466818930, 'comment_body': 'How about renaming `Net` to something more descriptive, like `DeepQNetwork`?\r\n\r\nPlease also add a [documentation comment](https://swift.org/documentation/api-design-guidelines/#write-doc-comment). It would be nice to mention a reference paper or implementation, if one was used.\r\n\r\n```suggestion\r\n/// A deep Q-learning network.\r\n/// Reference: ...\r\nstruct DeepQNetwork: Layer {\r\n```', 'comment_created': datetime.datetime(2020, 8, 7, 4, 49, 44, tzinfo=datetime.timezone.utc), 'commenter': 'dan-zheng', 'type': 'User'}, {'comment_id': 466820320, 'comment_body': 'Could you please add [documentation comments](https://swift.org/documentation/api-design-guidelines/#write-doc-comment) for each of the stored properties here? That would really help clarify their meaning, especially for folks unfamiliar with deep Q-learning. Appropriate paper references would be great.', 'comment_created': datetime.datetime(2020, 8, 7, 4, 55, 1, tzinfo=datetime.timezone.utc), 'commenter': 'dan-zheng', 'type': 'User'}, {'comment_id': 466820378, 'comment_body': 'How about renaming `Agent` to something more descriptive, like `DeepQLearningAgent`?', 'comment_created': datetime.datetime(2020, 8, 7, 4, 55, 15, tzinfo=datetime.timezone.utc), 'commenter': 'dan-zheng', 'type': 'User'}, {'comment_id': 466821101, 'comment_body': 'Could you please add documentation comments for `ReplayBuffer`?', 'comment_created': datetime.datetime(2020, 8, 7, 4, 58, 21, tzinfo=datetime.timezone.utc), 'commenter': 'dan-zheng', 'type': 'User'}, {'comment_id': 466822783, 'comment_body': 'Minor naming suggestions, based on the [Swift API Design Guidelines](https://swift.org/documentation/api-design-guidelines):\r\n\r\n```suggestion\r\nfunc evaluate(_ agent: Agent) -> Float {\r\n```\r\n\r\nIdiomatic Swift tends to [avoid abbreviations](https://swift.org/documentation/api-design-guidelines/#avoid-abbreviations) in favor of clarity. The `agent:` argument label can be omitted because it repeats type information.', 'comment_created': datetime.datetime(2020, 8, 7, 5, 5, 40, tzinfo=datetime.timezone.utc), 'commenter': 'dan-zheng', 'type': 'User'}, {'comment_id': 466825849, 'comment_body': ""Right now, `plt.savefig` saves images in the directory wherever `swift run Gym-DQN` is invoked, causing them to appear as untracked files in git.\r\n\r\nIt would be nice to save them in some standard `.gitignore`'d output directory. `/tmp` could be good for now, though it may not work on Windows."", 'comment_created': datetime.datetime(2020, 8, 7, 5, 18, 16, tzinfo=datetime.timezone.utc), 'commenter': 'dan-zheng', 'type': 'User'}, {'comment_id': 466964933, 'comment_body': 'I renamed in to `DeepQNetwork` and added some documentation! What do you think?', 'comment_created': datetime.datetime(2020, 8, 7, 10, 47, 1, tzinfo=datetime.timezone.utc), 'commenter': 'seungjaeryanlee', 'type': 'User'}, {'comment_id': 466965312, 'comment_body': 'Good idea! I renamed it to `DeepQNetworkAgent`.', 'comment_created': datetime.datetime(2020, 8, 7, 10, 47, 53, tzinfo=datetime.timezone.utc), 'commenter': 'seungjaeryanlee', 'type': 'User'}, {'comment_id': 466965513, 'comment_body': ""Didn't know that! Thank you for the link. I have made the changes."", 'comment_created': datetime.datetime(2020, 8, 7, 10, 48, 21, tzinfo=datetime.timezone.utc), 'commenter': 'seungjaeryanlee', 'type': 'User'}, {'comment_id': 466965900, 'comment_body': '`/tmp/` sounds like a good idea for now. Thank you for the suggestion!', 'comment_created': datetime.datetime(2020, 8, 7, 10, 49, 15, tzinfo=datetime.timezone.utc), 'commenter': 'seungjaeryanlee', 'type': 'User'}, {'comment_id': 466970592, 'comment_body': 'I have added them!', 'comment_created': datetime.datetime(2020, 8, 7, 10, 59, 58, tzinfo=datetime.timezone.utc), 'commenter': 'seungjaeryanlee', 'type': 'User'}, {'comment_id': 466971482, 'comment_body': 'I have added the comments with references to the original DQN paper and the Double DQN paper.', 'comment_created': datetime.datetime(2020, 8, 7, 11, 2, 9, tzinfo=datetime.timezone.utc), 'commenter': 'seungjaeryanlee', 'type': 'User'}, {'comment_id': 467121267, 'comment_body': 'Looks great, thanks!', 'comment_created': datetime.datetime(2020, 8, 7, 15, 45, 38, tzinfo=datetime.timezone.utc), 'commenter': 'dan-zheng', 'type': 'User'}]","[{'commit_sha': '5dc50ebbb5d67299704f2f1e8e810d68dfaa0950', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f049af3df76874e1ccaa72b064b6badeb63f456', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6268d58d8d951fc2f8ce0fd6f1c1e5b924cf901c', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51d1fad8f6a487c4c2386a0de7b5d2f369d863b1', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84df320def2273edb0f8fb2391f1bfd418b11bc3', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b9948945568206ebca0995e1ad54c28577eabaa', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '18e629486d8cb9a56460cfc49ce7bc332da26b2b', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36c1ddf7fca383b28f938e2499a94d1ab56bfe5f', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da57062f121d980e0a227bd08186a19f09f10218', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ec956ccbd8aa7abd8d3d8ae96e5b839608a2280', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dab2a3f811b0139050ce9a6cfb0e8da48405a272', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0bc60ca6442b886c9007ee4c5cd41e74787eb1fe', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '01074d9075a0e561a5265edc8ff3267f137b8544', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eca8a920dafc0f9116f4804f513ef4b3562810c7', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae087dd9e7162e7d85d66aea264e715f7266ede9', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4acd6ce200dd49fd4701853a6d2f7ed94e5cc1fb', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22aaf75d9b4a56ec0087b3f64ba8d80e3b74f166', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '24392f3aeb6caed312a3017e1f5126373db6b95f', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '441ab35098b6e0d979a3616133b79b02c43344a0', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ccfa0873b3c19327e996b5839d097e9eb32f1eae', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '65de04e0af372c5a42d8d72e12aaf027bef10d54', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bcbb7e269d61403813916fae7a89928b7fae1dcf', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a20322674a9fb4f77d925d81796da93df06690a2', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e757c0fdd263b4e03e7450bac4bf2fe073f9f771', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd2be5bd5dd3f66199a3cb048b6a931c1e8d86488', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a118ab0ddc3e8be51df01a42e340586f5ed2a06', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce539e564f15ec670969e560cad863340b5767a2', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf7b96a4753409edf5c1f7b8cb5db57f37db7830', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '98b4647107a377c15eb5d958cefdb7683a17fb45', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e00901adbf7633e807cfeda16a054578e5e46eea', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bca2614ad5e4c4e4dc875074de390d69fffedfa4', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45b880ef4d943447bf955b8a5c6d1fa131e9765e', 'committer_username': 'BradLarson', 'committer_name': 'Brad Larson', 'committer_email': 'larson@sunsetlakesoftware.com', 'commit_date': datetime.datetime(2011, 8, 2, 14, 26, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '356c989b382835ab5a4ac455cac36be742010951', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd774fad85e30064ca2dd06a7f9ecc36b563cef26', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a10f20112fefd641fe1d77d08484d96ab1f0957b', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4aa929640d23ea4a69b1921cc013cabc43c0c019', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}]",Seungjae Ryan Lee,6107926,,User,,116,,6,175
465022171,Implement Proximal Policy Optimization,"Like DQN (PR #617), Proximal Policy Optimization (PPO) is another widely used reinforcement learning algorithm. Proposed by [Schulman et al. in 2017](https://github.com/tensorflow/swift-models/pull/617), PPO is an on-policy policy gradient algorithm that serves as a standard baselines for both environments with discrete and continuous action spaces.

There are two versions of PPO: PPO-Clip and PPO-Penalty. This code implements PPO-Clip, the more popular version.

## TODO

- [x] Fix existing issues
  - [x] Optimize both `actorNet` and `criticNet`
  - [x] Compute `loss1` using the the minimum of surrogate losses `surr1` and `surr2`
  - [x] Fix gradients not being computed correctly and set to zero
- [x] Find hyperparameters with consistent performance on CartPole
  - ~If performance is subpar, will implement [GAE](https://arxiv.org/abs/1506.02438)~
- [x] Refactor and document code
  - [x] Refactor the `Categorical` distribution from swift-rl
  - [x] Add documentation comments for hyperparameters
  - [x] Add documentation comments for structs and classes
    - [x] PPOMemory
    - [x] ActorNetwork
    - [x] CriticNetwork
    - [x] ActorCritic
    - [x] PPOAgent",True,655,https://api.github.com/repos/tensorflow/swift-models/pulls/655,https://github.com/tensorflow/swift-models/pull/655,closed,607,0,7,32,1,23,1,0,[{'name': 'gsoc'}],2020-08-08 11:40:34+00:00,2020-08-26 02:28:20+00:00,1522066.0,"17 days, 14:47:46","[{'comment_id': 469341906, 'comment_body': ""It might make sense to have this also be a struct, and possibly a layer ([Anthony's actor-critic as an example](https://github.com/eaplatanios/swift-rl/blob/master/Sources/ReinforcementLearningExperiments/CartPole.swift#L40)). If the memory updating was moved outside of the `act()` function, that could be converted to a `callAsFunction()` with the results containing all of the values needed to act or to update PPOMemory. I'm a little uncomfortable with the memory update being done within `act()`."", 'comment_created': datetime.datetime(2020, 8, 12, 15, 23, 32, tzinfo=datetime.timezone.utc), 'commenter': 'BradLarson', 'type': 'User'}, {'comment_id': 469343867, 'comment_body': 'I think this leak was fixed a while ago, so this should be safe to simplify.', 'comment_created': datetime.datetime(2020, 8, 12, 15, 26, 15, tzinfo=datetime.timezone.utc), 'commenter': 'BradLarson', 'type': 'User'}, {'comment_id': 469344451, 'comment_body': ""The conversions here to Numpy arrays shouldn't be necessary. It should be pretty easy to do what you want using the Tensor flattening operators and Swift arrays."", 'comment_created': datetime.datetime(2020, 8, 12, 15, 27, 8, tzinfo=datetime.timezone.utc), 'commenter': 'BradLarson', 'type': 'User'}, {'comment_id': 469348117, 'comment_body': 'It might be safer to treat this as a value type (struct) and apply appropriate inout usage for it throughout the updates.', 'comment_created': datetime.datetime(2020, 8, 12, 15, 32, 16, tzinfo=datetime.timezone.utc), 'commenter': 'BradLarson', 'type': 'User'}, {'comment_id': 469350448, 'comment_body': 'It seems to me that the PPOMemory is an implementation detail that should be hidden from the user within the PPOAgent itself. The agent could handle the details of memory updates on a step, instead of within the user-facing loop below.', 'comment_created': datetime.datetime(2020, 8, 12, 15, 35, 32, tzinfo=datetime.timezone.utc), 'commenter': 'BradLarson', 'type': 'User'}, {'comment_id': 476605913, 'comment_body': 'Sounds good! ActorCrtitic is now a layer, and the memory update is removed from the function. ', 'comment_created': datetime.datetime(2020, 8, 25, 17, 11, 9, tzinfo=datetime.timezone.utc), 'commenter': 'seungjaeryanlee', 'type': 'User'}, {'comment_id': 476625534, 'comment_body': 'Good point! Made it a struct.', 'comment_created': datetime.datetime(2020, 8, 25, 17, 39, 15, tzinfo=datetime.timezone.utc), 'commenter': 'seungjaeryanlee', 'type': 'User'}, {'comment_id': 476629705, 'comment_body': ""I don't think I understood your suggestion here. Can you elaborate? Did you mean that PPOMemory can be moved inside PPOAgent?"", 'comment_created': datetime.datetime(2020, 8, 25, 17, 46, 34, tzinfo=datetime.timezone.utc), 'commenter': 'seungjaeryanlee', 'type': 'User'}, {'comment_id': 476650689, 'comment_body': 'Awesome! Thanks for the note. Here is the relevant PR:\r\n\r\nhttps://github.com/apple/swift/pull/26355', 'comment_created': datetime.datetime(2020, 8, 25, 18, 23, 54, tzinfo=datetime.timezone.utc), 'commenter': 'seungjaeryanlee', 'type': 'User'}, {'comment_id': 476664819, 'comment_body': 'Could you please replace this shape requirement comment with an assertion?\r\n```suggestion\r\n        precondition(state.rank == 2, ""The input must be 2-D ([batch size, state size])."")\r\n```', 'comment_created': datetime.datetime(2020, 8, 25, 18, 49, 22, tzinfo=datetime.timezone.utc), 'commenter': 'dan-zheng', 'type': 'User'}, {'comment_id': 476664968, 'comment_body': 'Minor: remove empty line.', 'comment_created': datetime.datetime(2020, 8, 25, 18, 49, 38, tzinfo=datetime.timezone.utc), 'commenter': 'dan-zheng', 'type': 'User'}, {'comment_id': 476667567, 'comment_body': 'Now that `ActorCritic` is a struct instead of a class, `ActorCritic` has value semantics instead of reference semantics.\r\n\r\nThe `updateOldActorCritic` helper function should no longer be necessary, you can directly use `oldActorCritic = actorCritic` at call-sites instead.', 'comment_created': datetime.datetime(2020, 8, 25, 18, 54, 7, tzinfo=datetime.timezone.utc), 'commenter': 'dan-zheng', 'type': 'User'}, {'comment_id': 476670412, 'comment_body': 'These lines can be removed with the changes above.', 'comment_created': datetime.datetime(2020, 8, 25, 18, 58, 51, tzinfo=datetime.timezone.utc), 'commenter': 'dan-zheng', 'type': 'User'}, {'comment_id': 476670588, 'comment_body': 'Now that `ActorCritic` is a struct instead of a class, `ActorCritic` has value semantics instead of reference semantics. You can directly assign `actorCritic` to `oldActorCritic` instead of calling `updateOldActorCritic`.\r\n```suggestion\r\n        self.oldActorCritic = self.actorCritic\r\n```', 'comment_created': datetime.datetime(2020, 8, 25, 18, 59, 7, tzinfo=datetime.timezone.utc), 'commenter': 'dan-zheng', 'type': 'User'}, {'comment_id': 476674009, 'comment_body': 'You can replace `Tensor -> NumPy -> Float` conversion with `Tensor` indexing and `Tensor.scalarized()`.\r\n\r\n```suggestion\r\n        let logProb: Float = dist.logProbabilities[action].scalarized()\r\n```', 'comment_created': datetime.datetime(2020, 8, 25, 19, 5, 14, tzinfo=datetime.timezone.utc), 'commenter': 'dan-zheng', 'type': 'User'}, {'comment_id': 476675136, 'comment_body': 'Minor: remove empty line.', 'comment_created': datetime.datetime(2020, 8, 25, 19, 7, 25, tzinfo=datetime.timezone.utc), 'commenter': 'dan-zheng', 'type': 'User'}, {'comment_id': 476675788, 'comment_body': '```suggestion\r\n        if Bool(isDone)! {\r\n```', 'comment_created': datetime.datetime(2020, 8, 25, 19, 8, 42, tzinfo=datetime.timezone.utc), 'commenter': 'dan-zheng', 'type': 'User'}, {'comment_id': 476680447, 'comment_body': 'Oh interesting! Right now the I receive a 1D array and convert it to 2D array (of batch size 1) in that function. Do you think it makes more sense to convert to 2D outside the function and add the assert statement in the function?', 'comment_created': datetime.datetime(2020, 8, 25, 19, 17, 16, tzinfo=datetime.timezone.utc), 'commenter': 'seungjaeryanlee', 'type': 'User'}, {'comment_id': 476681498, 'comment_body': ""That's amazing! Thank you for the note."", 'comment_created': datetime.datetime(2020, 8, 25, 19, 19, 7, tzinfo=datetime.timezone.utc), 'commenter': 'seungjaeryanlee', 'type': 'User'}, {'comment_id': 476695321, 'comment_body': 'Sorry about not being clearer. Yes, I think the PPOMemory could be handled as an internal element of PPOAgent. You could either have a function that steps the environment and captures values for the memory (trajectory), or you could even add that to `act()`. Reward would still need to be a return value at some point, to log that. `agent.update()` could then be changed to not take a parameter and it could clear the internal memory when done.\r\n\r\nThat would simplify the user-exposed training loop, focusing on the actions of the agent and response of the environment.', 'comment_created': datetime.datetime(2020, 8, 25, 19, 45, 8, tzinfo=datetime.timezone.utc), 'commenter': 'BradLarson', 'type': 'User'}, {'comment_id': 476717956, 'comment_body': 'I created a new function `agent.step()` since the `act()` function became `callAsFunction()`. Does that look okay? I guess I am not exactly sure how much we should show in the main loop.', 'comment_created': datetime.datetime(2020, 8, 25, 20, 29, 8, tzinfo=datetime.timezone.utc), 'commenter': 'seungjaeryanlee', 'type': 'User'}, {'comment_id': 476741646, 'comment_body': 'That looks good to me, thanks for the cleanup.', 'comment_created': datetime.datetime(2020, 8, 25, 21, 15, 25, tzinfo=datetime.timezone.utc), 'commenter': 'BradLarson', 'type': 'User'}, {'comment_id': 476820337, 'comment_body': '> Do you think it makes more sense to convert to 2D outside the function and add the assert statement in the function?\r\n\r\nYep, that sounds reasonable!', 'comment_created': datetime.datetime(2020, 8, 25, 22, 55, 30, tzinfo=datetime.timezone.utc), 'commenter': 'dan-zheng', 'type': 'User'}]","[{'commit_sha': 'fe4756871316cf77d8b99910201dc16bbf9a5ed5', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2262840fb7c68b0edc6b24a160e83cbed27fc21', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e7d6bebd16e36ebfb018524ef7664654651c6f3', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '54bf750871c3d1b3e1be90c107856615ec716853', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c9ee12256cb0522d87392752941c3e2a7156f97', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2957a5844975a74d2d80a9a7e315afa982f2e04a', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49f26a99e06b097b16e05712279e748b1ebff2df', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9515f27f6603e78c48d6ee420a2e98f54cdf6fb6', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa8964ff25cd214bbeef3510d8317d192cf0691b', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4ffe6c44faa3600d692368314835fe6b6f8da56', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c22af6b11ab262769e3c49d647928ccc62925daa', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95c2a33ee26b55a6b159fc5fea2d12080f89835b', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7106a41115ce2f680130c527731eec778a232c8c', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e0e5c301b5727a2d77259d8d79750d4319ac94d2', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cae484ff9f7ba336ee2ba3ed8229b9f6887af6b0', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dac2edb5b506ef23a258a3d084f6753208b5f93e', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd6e33226829359c6b456613b2da6b787cd8bc473', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7aa715f0adfd714d76f78b9b783c31108e93bca5', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '33a1e87240a6ad76ac03f6927330d3b5480b29bd', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '04f45e9814668d27c374b0d124434b18ff8e4ff1', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57d09860a66f8efa53c7640bc4055eb26298b465', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68cb15646a2ec804d47f2912567fcbf569e91df2', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ba7ee3b7c31e6263ca5fa618a14a622ddbb9306', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d000d5a0f992b171d95f3055edfad84f19b74eb', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db88e770aa829f4a6e470d7f389ab6f8bc59114f', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '332c34eb5d865a247d2fd8aac6ffd7a7c4ba4ee9', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19b79b381ad73e40ea3d54259ede49a4b5bd168a', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0287a85a9b3e53035d587be81237a017a8f3a6d4', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bdafb7aa2f955c271c46a127ce7a5b48cbf00247', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '524e2f517dfba38d80a0afafec21c7470ee202f2', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad8aef56ee37018b8009bbeb87ab4dca1abad219', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '828d74b9d05cb51f9638d485180ddf979813ef74', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}]",Seungjae Ryan Lee,6107926,,User,,116,,6,175
441558684,Implement Deep Q-Network,"This is a mostly finished implementation of Deep Q-Network on the CartPole environment that needs some improvements. Following [the original paper (Mnih et al., 2015)](https://storage.googleapis.com/deepmind-media/dqn/DQNNaturePaper.pdf), the code has both experience replay and target network implemented.

I have identified three places of improvements:

- [x] Parallelize training
  - ~~The Q-network is given a batch of states and outputs a batch of Q-values for all actions (batch size x # actions). This should be transformed to a 1D vector (batch size x 1) that selects the Q-value of the action that was actually selected. In Python, `tf.gather_nd` seems to be the best option, but it does not seem to exist in `_Raw`. Is there a way to use this function?~~
  - `_Raw.gatherNd` exists
- [x] Refactor code
  - ~~There are a lot of commented out `print()` statements. These are left out to aid me as I work through the improvements, but they should be removed once I am finished.~~
- [x] Remove uses of `_Raw`
  - ~~As per @BradLarson 's suggestion, most `_Raw` commands can replaced by S4TF functions. Replace them accordingly.~~
- [x] Use Huber loss
   - ~~Huber loss is mentioned in the original paper and can help with training stability.~~
- [x] Use `:on` for Tensors to support X10 devices
- [x] Improve reproducibility
  - ~~The hyperparameters were chosen via a rough random search, and the results vary heavily.~~
- [x] Separate `gatherNd` into a separate file
  - For a more streamlined improvement to `swift-api`, separate the `gatherNd` redefinition to a new file.",True,617,https://api.github.com/repos/tensorflow/swift-models/pulls/617,https://github.com/tensorflow/swift-models/pull/617,closed,546,0,6,36,7,37,1,0,[{'name': 'gsoc'}],2020-06-29 17:43:34+00:00,2020-08-10 20:14:44+00:00,3637870.0,"42 days, 2:31:10","[{'comment_id': 447154925, 'comment_body': '> * In Python, `tf.gather_nd` seems to be the best option, but it does not seem to exist in `_Raw`. Is there a way to use this function?\r\n\r\n`_Raw.gatherNd` does exist, you can find it in [this source file](https://github.com/tensorflow/swift-apis/blob/master/Sources/TensorFlow/Bindings/RawOpsGenerated.swift):\r\n\r\n<details>\r\n\r\n```swift\r\n  /// Gather slices from `params` into a Tensor with shape specified by `indices`.\r\n  ///\r\n  /// `indices` is a K-dimensional integer tensor, best thought of as a\r\n  /// (K-1)-dimensional tensor of indices into `params`, where each element defines a\r\n  /// slice of `params`:\r\n  ///\r\n  ///     output[\\\\(i_0, ..., i_{K-2}\\\\)] = params[indices[\\\\(i_0, ..., i_{K-2}\\\\)]]\r\n  ///\r\n  /// Whereas in `tf.gather` `indices` defines slices into the `axis`\r\n  /// dimension of `params`, in `tf.gather_nd`, `indices` defines slices into the\r\n  /// first `N` dimensions of `params`, where `N = indices.shape[-1]`.\r\n  ///\r\n  /// The last dimension of `indices` can be at most the rank of\r\n  /// `params`:\r\n  ///\r\n  ///     indices.shape[-1] <= params.rank\r\n  ///\r\n  /// The last dimension of `indices` corresponds to elements\r\n  /// (if `indices.shape[-1] == params.rank`) or slices\r\n  /// (if `indices.shape[-1] < params.rank`) along dimension `indices.shape[-1]`\r\n  /// of `params`.  The output tensor has shape\r\n  ///\r\n  ///     indices.shape[:-1] + params.shape[indices.shape[-1]:]\r\n  ///\r\n  /// Note that on CPU, if an out of bound index is found, an error is returned.\r\n  /// On GPU, if an out of bound index is found, a 0 is stored in the\r\n  /// corresponding output value.\r\n  ///\r\n  /// Some examples below.\r\n  ///\r\n  /// Simple indexing into a matrix:\r\n  ///\r\n  /// ```python\r\n  ///     indices = [[0, 0], [1, 1]]\r\n  ///     params = [[\'a\', \'b\'], [\'c\', \'d\']]\r\n  ///     output = [\'a\', \'d\']\r\n  /// ```\r\n  ///\r\n  /// Slice indexing into a matrix:\r\n  ///\r\n  /// ```python\r\n  ///     indices = [[1], [0]]\r\n  ///     params = [[\'a\', \'b\'], [\'c\', \'d\']]\r\n  ///     output = [[\'c\', \'d\'], [\'a\', \'b\']]\r\n  /// ```\r\n  ///\r\n  /// Indexing into a 3-tensor:\r\n  ///\r\n  /// ```python\r\n  ///     indices = [[1]]\r\n  ///     params = [[[\'a0\', \'b0\'], [\'c0\', \'d0\']],\r\n  ///               [[\'a1\', \'b1\'], [\'c1\', \'d1\']]]\r\n  ///     output = [[[\'a1\', \'b1\'], [\'c1\', \'d1\']]]\r\n  ///\r\n  ///\r\n  ///     indices = [[0, 1], [1, 0]]\r\n  ///     params = [[[\'a0\', \'b0\'], [\'c0\', \'d0\']],\r\n  ///               [[\'a1\', \'b1\'], [\'c1\', \'d1\']]]\r\n  ///     output = [[\'c0\', \'d0\'], [\'a1\', \'b1\']]\r\n  ///\r\n  ///\r\n  ///     indices = [[0, 0, 1], [1, 0, 1]]\r\n  ///     params = [[[\'a0\', \'b0\'], [\'c0\', \'d0\']],\r\n  ///               [[\'a1\', \'b1\'], [\'c1\', \'d1\']]]\r\n  ///     output = [\'b0\', \'b1\']\r\n  /// ```\r\n  ///\r\n  /// Batched indexing into a matrix:\r\n  ///\r\n  /// ```python\r\n  ///     indices = [[[0, 0]], [[0, 1]]]\r\n  ///     params = [[\'a\', \'b\'], [\'c\', \'d\']]\r\n  ///     output = [[\'a\'], [\'b\']]\r\n  /// ```\r\n  ///\r\n  /// Batched slice indexing into a matrix:\r\n  ///\r\n  /// ```python\r\n  ///     indices = [[[1]], [[0]]]\r\n  ///     params = [[\'a\', \'b\'], [\'c\', \'d\']]\r\n  ///     output = [[[\'c\', \'d\']], [[\'a\', \'b\']]]\r\n  /// ```\r\n  ///\r\n  /// Batched indexing into a 3-tensor:\r\n  ///\r\n  /// ```python\r\n  ///     indices = [[[1]], [[0]]]\r\n  ///     params = [[[\'a0\', \'b0\'], [\'c0\', \'d0\']],\r\n  ///               [[\'a1\', \'b1\'], [\'c1\', \'d1\']]]\r\n  ///     output = [[[[\'a1\', \'b1\'], [\'c1\', \'d1\']]],\r\n  ///               [[[\'a0\', \'b0\'], [\'c0\', \'d0\']]]]\r\n  ///\r\n  ///     indices = [[[0, 1], [1, 0]], [[0, 0], [1, 1]]]\r\n  ///     params = [[[\'a0\', \'b0\'], [\'c0\', \'d0\']],\r\n  ///               [[\'a1\', \'b1\'], [\'c1\', \'d1\']]]\r\n  ///     output = [[[\'c0\', \'d0\'], [\'a1\', \'b1\']],\r\n  ///               [[\'a0\', \'b0\'], [\'c1\', \'d1\']]]\r\n  ///\r\n  ///\r\n  ///     indices = [[[0, 0, 1], [1, 0, 1]], [[0, 1, 1], [1, 1, 0]]]\r\n  ///     params = [[[\'a0\', \'b0\'], [\'c0\', \'d0\']],\r\n  ///               [[\'a1\', \'b1\'], [\'c1\', \'d1\']]]\r\n  ///     output = [[\'b0\', \'b1\'], [\'d0\', \'c1\']]\r\n  /// ```\r\n  ///\r\n  /// See also `tf.gather` and `tf.batch_gather`.\r\n  ///\r\n  /// - Parameters:\r\n  ///     - params: The tensor from which to gather values.\r\n  ///     - indices: Index tensor.\r\n  ///\r\n  /// - Output output: Values from `params` gathered from indices given by `indices`, with\r\n  ///     shape `indices.shape[:-1] + params.shape[indices.shape[-1]:]`.\r\n  @inlinable @inline(__always)\r\n  public static func gatherNd<\r\n    Tparams: TensorFlowScalar,\r\n    Tindices: TensorFlowIndex\r\n  >(\r\n    params: Tensor<Tparams>,\r\n    indices: Tensor<Tindices>\r\n  ) -> Tensor<Tparams> {\r\n    let nOutputs = Int(1)\r\n    let op = makeOp(""GatherNd"", nOutputs)\r\n    op.updateAttribute(""Tparams"", Tparams.tensorFlowDataType)\r\n    op.updateAttribute(""Tindices"", Tindices.tensorFlowDataType)\r\n    op.addInput(params)\r\n    op.addInput(indices)\r\n    return op.execute(Int(1))\r\n  }\r\n```\r\n\r\n</details>\r\n\r\nIs this helpful?', 'comment_created': datetime.datetime(2020, 6, 29, 18, 3, 12, tzinfo=datetime.timezone.utc), 'commenter': 'dan-zheng', 'type': 'User'}, {'comment_id': 447156109, 'comment_body': 'You can [set initial values for stored properties](https://docs.swift.org/swift-book/LanguageGuide/Initialization.html) `var count` and `var index` here, which is a bit clearer than initializing them in the initializer:\r\n\r\n```suggestion\r\n    var count: Int = 0\r\n    var index: Int = 0\r\n```', 'comment_created': datetime.datetime(2020, 6, 29, 18, 5, 20, tzinfo=datetime.timezone.utc), 'commenter': 'dan-zheng', 'type': 'User'}, {'comment_id': 447298809, 'comment_body': 'You can use [`Tensor.scalarized()`](https://www.tensorflow.org/swift/api_docs/Structs/Tensor#scalarized) to concisely convert a scalar `Tensor<Scalar>` into a `Scalar`.\r\n```suggestion\r\n                    let action = Int(tfAction.scalarized())\r\n```', 'comment_created': datetime.datetime(2020, 6, 29, 22, 37, 5, tzinfo=datetime.timezone.utc), 'commenter': 'dan-zheng', 'type': 'User'}, {'comment_id': 447298874, 'comment_body': '```suggestion\r\n                    let leftQValue = nextStateQValueBatch[i][0].scalarized()\r\n                    let rightQValue = nextStateQValueBatch[i][1].scalarized()\r\n```', 'comment_created': datetime.datetime(2020, 6, 29, 22, 37, 9, tzinfo=datetime.timezone.utc), 'commenter': 'dan-zheng', 'type': 'User'}, {'comment_id': 447299493, 'comment_body': '```suggestion\r\n    episodeReturn += Int(reward.scalarized())\r\n```', 'comment_created': datetime.datetime(2020, 6, 29, 22, 38, 55, tzinfo=datetime.timezone.utc), 'commenter': 'dan-zheng', 'type': 'User'}, {'comment_id': 447300794, 'comment_body': 'Please add labels to the tuple result type! From the [Swift API Design Guidelines](https://swift.org/documentation/api-design-guidelines/#label-closure-parameters):\r\n\r\n> **Label tuple members and name closure parameters** where they appear in your API.\r\n>\r\n> These names have explanatory power, can be referenced from documentation comments, and provide expressive access to tuple members.\r\n\r\nSince `TensorFlowEnvironmentWrapper` is a Swift wrapper around Python objects, I also think it makes sense to change the type of the ""isDone"" tuple element from `PythonObject` to `Bool`.\r\n\r\n```suggestion\r\n    func step(_ action: Tensor<Int32>) -> (state: Tensor<Float>, reward: Tensor<Float>, isDone: Bool, info: PythonObject) {\r\n```', 'comment_created': datetime.datetime(2020, 6, 29, 22, 42, 53, tzinfo=datetime.timezone.utc), 'commenter': 'dan-zheng', 'type': 'User'}, {'comment_id': 447303869, 'comment_body': ""Here's the current output of `swift run Gym-DQN`:\r\n\r\n```console\r\n$ swift run Gym-DQN\r\nEpisode 1 Return 36\r\nEpisode 2 Return 16\r\nEpisode 3 Return 23\r\nEpisode 4 Return 17\r\nEpisode 5 Return 20\r\nEpisode 6 Return 22\r\nEpisode 7 Return 17\r\nEpisode 8 Return 20\r\nEpisode 9 Return 10\r\nEpisode 10 Return 10\r\nEpisode 11 Return 16\r\nEpisode 12 Return 22\r\nEpisode 13 Return 20\r\nEpisode 14 Return 14\r\nEpisode 15 Return 14\r\nEpisode 16 Return 9\r\nEpisode 17 Return 19\r\nEpisode 18 Return 29\r\nEpisode 19 Return 49\r\nEpisode 20 Return 20\r\n...\r\n```\r\n\r\nI wonder if the model is currently learning and improving?\r\n\r\nDo you have ideas for improving the output format? It would be cool if we could visualize the CartPole environment."", 'comment_created': datetime.datetime(2020, 6, 29, 22, 51, 51, tzinfo=datetime.timezone.utc), 'commenter': 'dan-zheng', 'type': 'User'}, {'comment_id': 447315135, 'comment_body': ""Interesting! I have been getting this error: `error: type '_Raw' has no member 'gather_nd'` so I thought it didn't exist.\r\n\r\nMaybe it is a version issue. This will make my life a lot easier. Thanks!"", 'comment_created': datetime.datetime(2020, 6, 29, 23, 25, 50, tzinfo=datetime.timezone.utc), 'commenter': 'seungjaeryanlee', 'type': 'User'}, {'comment_id': 447323855, 'comment_body': 'The learning is quite unstable indeed, although RL runs tend to be like that in general. For now, I think a simple matplotlib plot with a sliding window average could suffice.\r\n\r\n```swift\r\nlet plt = Python.import(""matplotlib.pyplot"")\r\n\r\nplt.plot(episodeReturns)\r\nplt.savefig(""episodeReturns.png"")\r\n```', 'comment_created': datetime.datetime(2020, 6, 29, 23, 52, 7, tzinfo=datetime.timezone.utc), 'commenter': 'seungjaeryanlee', 'type': 'User'}, {'comment_id': 447536554, 'comment_body': ""Oh... I just realized it's not `gather_nd` but `gatherNd` since Swift uses lowerCamelCase. I guess that makes sense!"", 'comment_created': datetime.datetime(2020, 6, 30, 9, 15, 30, tzinfo=datetime.timezone.utc), 'commenter': 'seungjaeryanlee', 'type': 'User'}, {'comment_id': 447536852, 'comment_body': 'Good point! Thank you for the suggestion.', 'comment_created': datetime.datetime(2020, 6, 30, 9, 15, 57, tzinfo=datetime.timezone.utc), 'commenter': 'seungjaeryanlee', 'type': 'User'}, {'comment_id': 447537221, 'comment_body': 'Amazing! This makes everything so much cleaner. ', 'comment_created': datetime.datetime(2020, 6, 30, 9, 16, 36, tzinfo=datetime.timezone.utc), 'commenter': 'seungjaeryanlee', 'type': 'User'}, {'comment_id': 447540225, 'comment_body': ""Didn't know that I could add labels! Will do: they definitely make it more readable.\r\n\r\nI realized that I did not used `isDone` in the target calculation. The correct target calculation is\r\n\r\nreward + isDone * discount * max_a Q(s', a)\r\n\r\nSo `isDone` should probably be a `Tensor<Bool>` or `Tensor<Float>`. Thanks for pointing it out!\r\n"", 'comment_created': datetime.datetime(2020, 6, 30, 9, 21, 23, tzinfo=datetime.timezone.utc), 'commenter': 'seungjaeryanlee', 'type': 'User'}, {'comment_id': 447592998, 'comment_body': ""I am getting the following error message: \r\n\r\n```\r\nerror: <Cell 103>:53:44: error: expression is not differentiable\r\n                let predictionBatch = _Raw.gatherNd(params: stateQValueBatch, indices: tfFullIndices)\r\n                                           ^\r\n\r\n<Cell 103>:53:44: note: cannot differentiate functions that have not been marked '@differentiable' and that are defined in other files\r\n                let predictionBatch = _Raw.gatherNd(params: stateQValueBatch, indices: tfFullIndices)\r\n```\r\n\r\nIs `gatherNd` not differentiable in S4TF? I believe it was differentiable in Python TF."", 'comment_created': datetime.datetime(2020, 6, 30, 10, 51, 55, tzinfo=datetime.timezone.utc), 'commenter': 'seungjaeryanlee', 'type': 'User'}, {'comment_id': 448033331, 'comment_body': ""`_Raw.gatherNd` doesn't yet have a registered derivative, so you can temporarily register one yourself.\r\n\r\n[Here's some (somewhat obtuse) documentation](https://github.com/apple/swift/blob/master/docs/DifferentiableProgramming.md#derivative-functions) on derivative registration using the `@derivative(of:)` attribute. [This custom differentiation tutorial](https://www.tensorflow.org/swift/tutorials/custom_differentiation) has another simple example.\r\n\r\nHere's an untested derivative implementation I ported from [Python TensorFlow's `_GatherNdGrad`](https://github.com/tensorflow/tensorflow/blob/r2.2/tensorflow/python/ops/array_grad.py#L691-L701):\r\n```swift\r\nimport TensorFlow\r\n\r\nextension _Raw {\r\n  /// Derivative of `_Raw.gatherNd`.\r\n  ///\r\n  /// Ported from TensorFlow Python reference implementation:\r\n  /// https://github.com/tensorflow/tensorflow/blob/r2.2/tensorflow/python/ops/array_grad.py#L691-L701\r\n  @inlinable\r\n  @derivative(of: gatherNd)\r\n  public static func vjpGatherNd<\r\n    Scalar: TensorFlowFloatingPoint,\r\n    Index: TensorFlowIndex\r\n  >(\r\n    params: Tensor<Scalar>,\r\n    indices: Tensor<Index>\r\n  ) -> (\r\n    value: Tensor<Scalar>,\r\n    pullback: (Tensor<Scalar>) -> Tensor<Scalar>\r\n  ) {\r\n    let shapeTensor = Tensor<Index>(params.shapeTensor)\r\n    let value = gatherNd(params: params, indices: indices)\r\n    return (value, { v in\r\n      let dparams = scatterNd(indices: indices, updates: v, shape: shapeTensor)\r\n      return dparams\r\n    })\r\n  }\r\n}\r\n```\r\n\r\nAfter you add this to `Gym/DQN/main.swift`, `error: expression is not differentiable` should go away!"", 'comment_created': datetime.datetime(2020, 6, 30, 23, 26, 8, tzinfo=datetime.timezone.utc), 'commenter': 'dan-zheng', 'type': 'User'}, {'comment_id': 448387412, 'comment_body': ""I'd prefer if we could avoid using _Raw operations directly in public models, because for layering purposes we've discouraged people accessing operations at that level (the underbar is an indication of this). We recently [purged all uses of _Raw from swift-models](https://github.com/tensorflow/swift-models/issues/225) and I'm reluctant to start adding them back in.\r\n\r\nIn this case, I believe [Tensor.gathering()](https://github.com/tensorflow/swift-apis/blob/e9df616445bad8e66b48ae47674dacbc34949466/Sources/TensorFlow/Operators/Basic.swift#L528) might be what you could use here."", 'comment_created': datetime.datetime(2020, 7, 1, 14, 5, 57, tzinfo=datetime.timezone.utc), 'commenter': 'BradLarson', 'type': 'User'}, {'comment_id': 448389040, 'comment_body': 'Instead of `_Raw.max()` here, can you just use `max()`?', 'comment_created': datetime.datetime(2020, 7, 1, 14, 8, 19, tzinfo=datetime.timezone.utc), 'commenter': 'BradLarson', 'type': 'User'}, {'comment_id': 448396304, 'comment_body': ""For `_Raw.gatherNd,` could we split this off into a separate file and make it an extension on Tensor, like with `Tensor.gathering()`? We could follow the template linked below for the `Tensor.gathering()` method, and instead of defining a derivative on `_Raw.gatherNd()`, do so for the new Tensor method. We could give it a more descriptive, Swift-like name in the process.\r\n\r\nOnce we've done that, and prototyped that the new method works in the context of this model, you'd then be able to add it to the core swift-apis themselves for use by others. This staged process would allow us to iterate on the method, naming, parameters, etc. here and then migrate into the core when ready. "", 'comment_created': datetime.datetime(2020, 7, 1, 14, 18, 51, tzinfo=datetime.timezone.utc), 'commenter': 'BradLarson', 'type': 'User'}, {'comment_id': 448398419, 'comment_body': 'I was not aware! Thank you for the note. I will convert them to native operations.', 'comment_created': datetime.datetime(2020, 7, 1, 14, 21, 49, tzinfo=datetime.timezone.utc), 'commenter': 'seungjaeryanlee', 'type': 'User'}, {'comment_id': 448405105, 'comment_body': ""Rather than relying on Numpy to initialize these tensors, it would probably be more efficient to use `Tensor(zeros: on:)`. The `on:` parameter might be useful to specify, or you could leave that off for now, but we're trying to get all of our models to support the X10 device in addition to the default TF eager device and to do so you have to make sure Tensors are created on the right device. That's something we can worry about later, as a refinement to the model."", 'comment_created': datetime.datetime(2020, 7, 1, 14, 31, 24, tzinfo=datetime.timezone.utc), 'commenter': 'BradLarson', 'type': 'User'}, {'comment_id': 448822814, 'comment_body': 'Good point! It has been fixed.', 'comment_created': datetime.datetime(2020, 7, 2, 8, 6, 27, tzinfo=datetime.timezone.utc), 'commenter': 'seungjaeryanlee', 'type': 'User'}, {'comment_id': 448834878, 'comment_body': ""That makes sense! I just have a few related questions:\r\n\r\nQ1. Is there a similar method for boolean tensors? I get the following error for `Tensor<Bool>(on: [capacity])`:\r\n\r\n```\r\n/home/seungjl/git/swift-models/Gym/DQN/main.swift:82:19: error: referencing initializer 'init(zeros:on:)' on 'Tensor' requires that 'Bool' conform to 'Numeric'\r\n        isDones = Tensor<Bool>(zeros: [capacity])\r\n                  ^\r\nTensorFlow.Tensor:1:11: note: where 'Scalar' = 'Bool'\r\nextension Tensor where Scalar : Numeric {\r\n          ^\r\n```\r\n\r\nQ2. For the device, I plan to define `let device: Device = Device.default` and pass it to relevant classes and functions. Is there a way to test that it works for X10 devices?\r\n\r\nThanks!"", 'comment_created': datetime.datetime(2020, 7, 2, 8, 27, 35, tzinfo=datetime.timezone.utc), 'commenter': 'seungjaeryanlee', 'type': 'User'}, {'comment_id': 448874065, 'comment_body': '> Q1. Is there a similar method for boolean tensors? I get the following error for `Tensor<Bool>(on: [capacity])`:\r\n\r\nYou can use the general repeated value initializer [`Tensor.init(repeating:shape: on:)`](https://www.tensorflow.org/swift/api_docs/Structs/Tensor#/s:10TensorFlow0A0V9repeating5shape2onACyxGx_AA0A5ShapeVAA6DeviceVtcfc):\r\n\r\n```swift\r\nTensor<Bool>(repeating: false, shape: [capacity], on: device)\r\n```', 'comment_created': datetime.datetime(2020, 7, 2, 9, 31, 56, tzinfo=datetime.timezone.utc), 'commenter': 'dan-zheng', 'type': 'User'}, {'comment_id': 466810143, 'comment_body': 'The new output format looks great!\r\n\r\n```console\r\n$  swift run Gym-DQN\r\nEpisode:    1 | Step     34 | Epsilon: 0.967 | Train:  34 | Eval:   9\r\nEpisode:    3 | Step     67 | Epsilon: 0.936 | Train:  13 | Eval:  12\r\nEpisode:    4 | Step     85 | Epsilon: 0.919 | Train:  18 | Eval:  26\r\nEpisode:    5 | Step     97 | Epsilon: 0.908 | Train:  12 | Eval:  31\r\nEpisode:   62 | Step   1063 | Epsilon: 0.352 | Train:  53 | Eval: 200\r\nSolved in 62 episodes with 1063 steps!\r\n```', 'comment_created': datetime.datetime(2020, 8, 7, 4, 11, 13, tzinfo=datetime.timezone.utc), 'commenter': 'dan-zheng', 'type': 'User'}, {'comment_id': 466818930, 'comment_body': 'How about renaming `Net` to something more descriptive, like `DeepQNetwork`?\r\n\r\nPlease also add a [documentation comment](https://swift.org/documentation/api-design-guidelines/#write-doc-comment). It would be nice to mention a reference paper or implementation, if one was used.\r\n\r\n```suggestion\r\n/// A deep Q-learning network.\r\n/// Reference: ...\r\nstruct DeepQNetwork: Layer {\r\n```', 'comment_created': datetime.datetime(2020, 8, 7, 4, 49, 44, tzinfo=datetime.timezone.utc), 'commenter': 'dan-zheng', 'type': 'User'}, {'comment_id': 466820320, 'comment_body': 'Could you please add [documentation comments](https://swift.org/documentation/api-design-guidelines/#write-doc-comment) for each of the stored properties here? That would really help clarify their meaning, especially for folks unfamiliar with deep Q-learning. Appropriate paper references would be great.', 'comment_created': datetime.datetime(2020, 8, 7, 4, 55, 1, tzinfo=datetime.timezone.utc), 'commenter': 'dan-zheng', 'type': 'User'}, {'comment_id': 466820378, 'comment_body': 'How about renaming `Agent` to something more descriptive, like `DeepQLearningAgent`?', 'comment_created': datetime.datetime(2020, 8, 7, 4, 55, 15, tzinfo=datetime.timezone.utc), 'commenter': 'dan-zheng', 'type': 'User'}, {'comment_id': 466821101, 'comment_body': 'Could you please add documentation comments for `ReplayBuffer`?', 'comment_created': datetime.datetime(2020, 8, 7, 4, 58, 21, tzinfo=datetime.timezone.utc), 'commenter': 'dan-zheng', 'type': 'User'}, {'comment_id': 466822783, 'comment_body': 'Minor naming suggestions, based on the [Swift API Design Guidelines](https://swift.org/documentation/api-design-guidelines):\r\n\r\n```suggestion\r\nfunc evaluate(_ agent: Agent) -> Float {\r\n```\r\n\r\nIdiomatic Swift tends to [avoid abbreviations](https://swift.org/documentation/api-design-guidelines/#avoid-abbreviations) in favor of clarity. The `agent:` argument label can be omitted because it repeats type information.', 'comment_created': datetime.datetime(2020, 8, 7, 5, 5, 40, tzinfo=datetime.timezone.utc), 'commenter': 'dan-zheng', 'type': 'User'}, {'comment_id': 466825849, 'comment_body': ""Right now, `plt.savefig` saves images in the directory wherever `swift run Gym-DQN` is invoked, causing them to appear as untracked files in git.\r\n\r\nIt would be nice to save them in some standard `.gitignore`'d output directory. `/tmp` could be good for now, though it may not work on Windows."", 'comment_created': datetime.datetime(2020, 8, 7, 5, 18, 16, tzinfo=datetime.timezone.utc), 'commenter': 'dan-zheng', 'type': 'User'}, {'comment_id': 466964933, 'comment_body': 'I renamed in to `DeepQNetwork` and added some documentation! What do you think?', 'comment_created': datetime.datetime(2020, 8, 7, 10, 47, 1, tzinfo=datetime.timezone.utc), 'commenter': 'seungjaeryanlee', 'type': 'User'}, {'comment_id': 466965312, 'comment_body': 'Good idea! I renamed it to `DeepQNetworkAgent`.', 'comment_created': datetime.datetime(2020, 8, 7, 10, 47, 53, tzinfo=datetime.timezone.utc), 'commenter': 'seungjaeryanlee', 'type': 'User'}, {'comment_id': 466965513, 'comment_body': ""Didn't know that! Thank you for the link. I have made the changes."", 'comment_created': datetime.datetime(2020, 8, 7, 10, 48, 21, tzinfo=datetime.timezone.utc), 'commenter': 'seungjaeryanlee', 'type': 'User'}, {'comment_id': 466965900, 'comment_body': '`/tmp/` sounds like a good idea for now. Thank you for the suggestion!', 'comment_created': datetime.datetime(2020, 8, 7, 10, 49, 15, tzinfo=datetime.timezone.utc), 'commenter': 'seungjaeryanlee', 'type': 'User'}, {'comment_id': 466970592, 'comment_body': 'I have added them!', 'comment_created': datetime.datetime(2020, 8, 7, 10, 59, 58, tzinfo=datetime.timezone.utc), 'commenter': 'seungjaeryanlee', 'type': 'User'}, {'comment_id': 466971482, 'comment_body': 'I have added the comments with references to the original DQN paper and the Double DQN paper.', 'comment_created': datetime.datetime(2020, 8, 7, 11, 2, 9, tzinfo=datetime.timezone.utc), 'commenter': 'seungjaeryanlee', 'type': 'User'}, {'comment_id': 467121267, 'comment_body': 'Looks great, thanks!', 'comment_created': datetime.datetime(2020, 8, 7, 15, 45, 38, tzinfo=datetime.timezone.utc), 'commenter': 'dan-zheng', 'type': 'User'}]","[{'commit_sha': '5dc50ebbb5d67299704f2f1e8e810d68dfaa0950', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f049af3df76874e1ccaa72b064b6badeb63f456', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6268d58d8d951fc2f8ce0fd6f1c1e5b924cf901c', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51d1fad8f6a487c4c2386a0de7b5d2f369d863b1', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84df320def2273edb0f8fb2391f1bfd418b11bc3', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b9948945568206ebca0995e1ad54c28577eabaa', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '18e629486d8cb9a56460cfc49ce7bc332da26b2b', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36c1ddf7fca383b28f938e2499a94d1ab56bfe5f', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da57062f121d980e0a227bd08186a19f09f10218', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ec956ccbd8aa7abd8d3d8ae96e5b839608a2280', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dab2a3f811b0139050ce9a6cfb0e8da48405a272', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0bc60ca6442b886c9007ee4c5cd41e74787eb1fe', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '01074d9075a0e561a5265edc8ff3267f137b8544', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eca8a920dafc0f9116f4804f513ef4b3562810c7', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae087dd9e7162e7d85d66aea264e715f7266ede9', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4acd6ce200dd49fd4701853a6d2f7ed94e5cc1fb', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22aaf75d9b4a56ec0087b3f64ba8d80e3b74f166', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '24392f3aeb6caed312a3017e1f5126373db6b95f', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '441ab35098b6e0d979a3616133b79b02c43344a0', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ccfa0873b3c19327e996b5839d097e9eb32f1eae', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '65de04e0af372c5a42d8d72e12aaf027bef10d54', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bcbb7e269d61403813916fae7a89928b7fae1dcf', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a20322674a9fb4f77d925d81796da93df06690a2', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e757c0fdd263b4e03e7450bac4bf2fe073f9f771', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd2be5bd5dd3f66199a3cb048b6a931c1e8d86488', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a118ab0ddc3e8be51df01a42e340586f5ed2a06', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce539e564f15ec670969e560cad863340b5767a2', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf7b96a4753409edf5c1f7b8cb5db57f37db7830', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '98b4647107a377c15eb5d958cefdb7683a17fb45', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e00901adbf7633e807cfeda16a054578e5e46eea', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bca2614ad5e4c4e4dc875074de390d69fffedfa4', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45b880ef4d943447bf955b8a5c6d1fa131e9765e', 'committer_username': 'BradLarson', 'committer_name': 'Brad Larson', 'committer_email': 'larson@sunsetlakesoftware.com', 'commit_date': datetime.datetime(2011, 8, 2, 14, 26, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '356c989b382835ab5a4ac455cac36be742010951', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd774fad85e30064ca2dd06a7f9ecc36b563cef26', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a10f20112fefd641fe1d77d08484d96ab1f0957b', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4aa929640d23ea4a69b1921cc013cabc43c0c019', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}]",Seungjae Ryan Lee,6107926,,User,,116,,6,175
465022171,Implement Proximal Policy Optimization,"Like DQN (PR #617), Proximal Policy Optimization (PPO) is another widely used reinforcement learning algorithm. Proposed by [Schulman et al. in 2017](https://github.com/tensorflow/swift-models/pull/617), PPO is an on-policy policy gradient algorithm that serves as a standard baselines for both environments with discrete and continuous action spaces.

There are two versions of PPO: PPO-Clip and PPO-Penalty. This code implements PPO-Clip, the more popular version.

## TODO

- [x] Fix existing issues
  - [x] Optimize both `actorNet` and `criticNet`
  - [x] Compute `loss1` using the the minimum of surrogate losses `surr1` and `surr2`
  - [x] Fix gradients not being computed correctly and set to zero
- [x] Find hyperparameters with consistent performance on CartPole
  - ~If performance is subpar, will implement [GAE](https://arxiv.org/abs/1506.02438)~
- [x] Refactor and document code
  - [x] Refactor the `Categorical` distribution from swift-rl
  - [x] Add documentation comments for hyperparameters
  - [x] Add documentation comments for structs and classes
    - [x] PPOMemory
    - [x] ActorNetwork
    - [x] CriticNetwork
    - [x] ActorCritic
    - [x] PPOAgent",True,655,https://api.github.com/repos/tensorflow/swift-models/pulls/655,https://github.com/tensorflow/swift-models/pull/655,closed,607,0,7,32,1,23,1,0,[{'name': 'gsoc'}],2020-08-08 11:40:34+00:00,2020-08-26 02:28:20+00:00,1522066.0,"17 days, 14:47:46","[{'comment_id': 469341906, 'comment_body': ""It might make sense to have this also be a struct, and possibly a layer ([Anthony's actor-critic as an example](https://github.com/eaplatanios/swift-rl/blob/master/Sources/ReinforcementLearningExperiments/CartPole.swift#L40)). If the memory updating was moved outside of the `act()` function, that could be converted to a `callAsFunction()` with the results containing all of the values needed to act or to update PPOMemory. I'm a little uncomfortable with the memory update being done within `act()`."", 'comment_created': datetime.datetime(2020, 8, 12, 15, 23, 32, tzinfo=datetime.timezone.utc), 'commenter': 'BradLarson', 'type': 'User'}, {'comment_id': 469343867, 'comment_body': 'I think this leak was fixed a while ago, so this should be safe to simplify.', 'comment_created': datetime.datetime(2020, 8, 12, 15, 26, 15, tzinfo=datetime.timezone.utc), 'commenter': 'BradLarson', 'type': 'User'}, {'comment_id': 469344451, 'comment_body': ""The conversions here to Numpy arrays shouldn't be necessary. It should be pretty easy to do what you want using the Tensor flattening operators and Swift arrays."", 'comment_created': datetime.datetime(2020, 8, 12, 15, 27, 8, tzinfo=datetime.timezone.utc), 'commenter': 'BradLarson', 'type': 'User'}, {'comment_id': 469348117, 'comment_body': 'It might be safer to treat this as a value type (struct) and apply appropriate inout usage for it throughout the updates.', 'comment_created': datetime.datetime(2020, 8, 12, 15, 32, 16, tzinfo=datetime.timezone.utc), 'commenter': 'BradLarson', 'type': 'User'}, {'comment_id': 469350448, 'comment_body': 'It seems to me that the PPOMemory is an implementation detail that should be hidden from the user within the PPOAgent itself. The agent could handle the details of memory updates on a step, instead of within the user-facing loop below.', 'comment_created': datetime.datetime(2020, 8, 12, 15, 35, 32, tzinfo=datetime.timezone.utc), 'commenter': 'BradLarson', 'type': 'User'}, {'comment_id': 476605913, 'comment_body': 'Sounds good! ActorCrtitic is now a layer, and the memory update is removed from the function. ', 'comment_created': datetime.datetime(2020, 8, 25, 17, 11, 9, tzinfo=datetime.timezone.utc), 'commenter': 'seungjaeryanlee', 'type': 'User'}, {'comment_id': 476625534, 'comment_body': 'Good point! Made it a struct.', 'comment_created': datetime.datetime(2020, 8, 25, 17, 39, 15, tzinfo=datetime.timezone.utc), 'commenter': 'seungjaeryanlee', 'type': 'User'}, {'comment_id': 476629705, 'comment_body': ""I don't think I understood your suggestion here. Can you elaborate? Did you mean that PPOMemory can be moved inside PPOAgent?"", 'comment_created': datetime.datetime(2020, 8, 25, 17, 46, 34, tzinfo=datetime.timezone.utc), 'commenter': 'seungjaeryanlee', 'type': 'User'}, {'comment_id': 476650689, 'comment_body': 'Awesome! Thanks for the note. Here is the relevant PR:\r\n\r\nhttps://github.com/apple/swift/pull/26355', 'comment_created': datetime.datetime(2020, 8, 25, 18, 23, 54, tzinfo=datetime.timezone.utc), 'commenter': 'seungjaeryanlee', 'type': 'User'}, {'comment_id': 476664819, 'comment_body': 'Could you please replace this shape requirement comment with an assertion?\r\n```suggestion\r\n        precondition(state.rank == 2, ""The input must be 2-D ([batch size, state size])."")\r\n```', 'comment_created': datetime.datetime(2020, 8, 25, 18, 49, 22, tzinfo=datetime.timezone.utc), 'commenter': 'dan-zheng', 'type': 'User'}, {'comment_id': 476664968, 'comment_body': 'Minor: remove empty line.', 'comment_created': datetime.datetime(2020, 8, 25, 18, 49, 38, tzinfo=datetime.timezone.utc), 'commenter': 'dan-zheng', 'type': 'User'}, {'comment_id': 476667567, 'comment_body': 'Now that `ActorCritic` is a struct instead of a class, `ActorCritic` has value semantics instead of reference semantics.\r\n\r\nThe `updateOldActorCritic` helper function should no longer be necessary, you can directly use `oldActorCritic = actorCritic` at call-sites instead.', 'comment_created': datetime.datetime(2020, 8, 25, 18, 54, 7, tzinfo=datetime.timezone.utc), 'commenter': 'dan-zheng', 'type': 'User'}, {'comment_id': 476670412, 'comment_body': 'These lines can be removed with the changes above.', 'comment_created': datetime.datetime(2020, 8, 25, 18, 58, 51, tzinfo=datetime.timezone.utc), 'commenter': 'dan-zheng', 'type': 'User'}, {'comment_id': 476670588, 'comment_body': 'Now that `ActorCritic` is a struct instead of a class, `ActorCritic` has value semantics instead of reference semantics. You can directly assign `actorCritic` to `oldActorCritic` instead of calling `updateOldActorCritic`.\r\n```suggestion\r\n        self.oldActorCritic = self.actorCritic\r\n```', 'comment_created': datetime.datetime(2020, 8, 25, 18, 59, 7, tzinfo=datetime.timezone.utc), 'commenter': 'dan-zheng', 'type': 'User'}, {'comment_id': 476674009, 'comment_body': 'You can replace `Tensor -> NumPy -> Float` conversion with `Tensor` indexing and `Tensor.scalarized()`.\r\n\r\n```suggestion\r\n        let logProb: Float = dist.logProbabilities[action].scalarized()\r\n```', 'comment_created': datetime.datetime(2020, 8, 25, 19, 5, 14, tzinfo=datetime.timezone.utc), 'commenter': 'dan-zheng', 'type': 'User'}, {'comment_id': 476675136, 'comment_body': 'Minor: remove empty line.', 'comment_created': datetime.datetime(2020, 8, 25, 19, 7, 25, tzinfo=datetime.timezone.utc), 'commenter': 'dan-zheng', 'type': 'User'}, {'comment_id': 476675788, 'comment_body': '```suggestion\r\n        if Bool(isDone)! {\r\n```', 'comment_created': datetime.datetime(2020, 8, 25, 19, 8, 42, tzinfo=datetime.timezone.utc), 'commenter': 'dan-zheng', 'type': 'User'}, {'comment_id': 476680447, 'comment_body': 'Oh interesting! Right now the I receive a 1D array and convert it to 2D array (of batch size 1) in that function. Do you think it makes more sense to convert to 2D outside the function and add the assert statement in the function?', 'comment_created': datetime.datetime(2020, 8, 25, 19, 17, 16, tzinfo=datetime.timezone.utc), 'commenter': 'seungjaeryanlee', 'type': 'User'}, {'comment_id': 476681498, 'comment_body': ""That's amazing! Thank you for the note."", 'comment_created': datetime.datetime(2020, 8, 25, 19, 19, 7, tzinfo=datetime.timezone.utc), 'commenter': 'seungjaeryanlee', 'type': 'User'}, {'comment_id': 476695321, 'comment_body': 'Sorry about not being clearer. Yes, I think the PPOMemory could be handled as an internal element of PPOAgent. You could either have a function that steps the environment and captures values for the memory (trajectory), or you could even add that to `act()`. Reward would still need to be a return value at some point, to log that. `agent.update()` could then be changed to not take a parameter and it could clear the internal memory when done.\r\n\r\nThat would simplify the user-exposed training loop, focusing on the actions of the agent and response of the environment.', 'comment_created': datetime.datetime(2020, 8, 25, 19, 45, 8, tzinfo=datetime.timezone.utc), 'commenter': 'BradLarson', 'type': 'User'}, {'comment_id': 476717956, 'comment_body': 'I created a new function `agent.step()` since the `act()` function became `callAsFunction()`. Does that look okay? I guess I am not exactly sure how much we should show in the main loop.', 'comment_created': datetime.datetime(2020, 8, 25, 20, 29, 8, tzinfo=datetime.timezone.utc), 'commenter': 'seungjaeryanlee', 'type': 'User'}, {'comment_id': 476741646, 'comment_body': 'That looks good to me, thanks for the cleanup.', 'comment_created': datetime.datetime(2020, 8, 25, 21, 15, 25, tzinfo=datetime.timezone.utc), 'commenter': 'BradLarson', 'type': 'User'}, {'comment_id': 476820337, 'comment_body': '> Do you think it makes more sense to convert to 2D outside the function and add the assert statement in the function?\r\n\r\nYep, that sounds reasonable!', 'comment_created': datetime.datetime(2020, 8, 25, 22, 55, 30, tzinfo=datetime.timezone.utc), 'commenter': 'dan-zheng', 'type': 'User'}]","[{'commit_sha': 'fe4756871316cf77d8b99910201dc16bbf9a5ed5', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2262840fb7c68b0edc6b24a160e83cbed27fc21', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e7d6bebd16e36ebfb018524ef7664654651c6f3', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '54bf750871c3d1b3e1be90c107856615ec716853', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c9ee12256cb0522d87392752941c3e2a7156f97', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2957a5844975a74d2d80a9a7e315afa982f2e04a', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49f26a99e06b097b16e05712279e748b1ebff2df', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9515f27f6603e78c48d6ee420a2e98f54cdf6fb6', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa8964ff25cd214bbeef3510d8317d192cf0691b', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4ffe6c44faa3600d692368314835fe6b6f8da56', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c22af6b11ab262769e3c49d647928ccc62925daa', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95c2a33ee26b55a6b159fc5fea2d12080f89835b', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7106a41115ce2f680130c527731eec778a232c8c', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e0e5c301b5727a2d77259d8d79750d4319ac94d2', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cae484ff9f7ba336ee2ba3ed8229b9f6887af6b0', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dac2edb5b506ef23a258a3d084f6753208b5f93e', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd6e33226829359c6b456613b2da6b787cd8bc473', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7aa715f0adfd714d76f78b9b783c31108e93bca5', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '33a1e87240a6ad76ac03f6927330d3b5480b29bd', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '04f45e9814668d27c374b0d124434b18ff8e4ff1', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57d09860a66f8efa53c7640bc4055eb26298b465', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68cb15646a2ec804d47f2912567fcbf569e91df2', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ba7ee3b7c31e6263ca5fa618a14a622ddbb9306', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d000d5a0f992b171d95f3055edfad84f19b74eb', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db88e770aa829f4a6e470d7f389ab6f8bc59114f', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '332c34eb5d865a247d2fd8aac6ffd7a7c4ba4ee9', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19b79b381ad73e40ea3d54259ede49a4b5bd168a', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0287a85a9b3e53035d587be81237a017a8f3a6d4', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bdafb7aa2f955c271c46a127ce7a5b48cbf00247', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '524e2f517dfba38d80a0afafec21c7470ee202f2', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad8aef56ee37018b8009bbeb87ab4dca1abad219', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '828d74b9d05cb51f9638d485180ddf979813ef74', 'committer_username': 'seungjaeryanlee', 'committer_name': 'Seungjae Ryan Lee', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 4, 19, 20, 25, tzinfo=datetime.timezone.utc)}]",Seungjae Ryan Lee,6107926,,User,,116,,6,175

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
130903312,swift-models,tensorflow/swift-models,Jupyter Notebook,146,645,45,67,554,46,38,1,"[{'id': 465022171, 'number': 655, 'closed': datetime.datetime(2020, 8, 26, 2, 28, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 8, 11, 40, 34, tzinfo=datetime.timezone.utc), 'time_taken': 1522066.0, 'time_delta': '17 days, 14:47:46', 'additions': 607, 'deletions': 0, 'state': 'closed'}, {'id': 441558684, 'number': 617, 'closed': datetime.datetime(2020, 8, 10, 20, 14, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 29, 17, 43, 34, tzinfo=datetime.timezone.utc), 'time_taken': 3637870.0, 'time_delta': '42 days, 2:31:10', 'additions': 546, 'deletions': 0, 'state': 'closed'}]"
