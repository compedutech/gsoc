pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
437378694,Skeleton driver for ADXRS290,"This PR adds a bare-minimal skeleton driver for ADI's ADXRS290, an ultralow noise dual-axis MEMS gyroscope. Along with the driver, this PR includes device-tree overlay for ADXRS290 to use with Raspberry Pi and its corresponding documentation in YAML.

Done as part of GSoC 2020, under The Linux Foundation.",True,1046,https://api.github.com/repos/analogdevicesinc/linux/pulls/1046,https://github.com/analogdevicesinc/linux/pull/1046,closed,174,0,8,4,8,20,0,0,[],2020-06-20 07:28:32+00:00,2020-06-23 10:28:36+00:00,270004.0,"3 days, 3:00:04","[{'comment_id': 443204196, 'comment_body': '`iio_device_unregister()` is not needed if you are using `devm_iio_device_register()`\r\ncalling it may cause a crash', 'comment_created': datetime.datetime(2020, 6, 21, 10, 14, 14, tzinfo=datetime.timezone.utc), 'commenter': 'commodo', 'type': 'User'}, {'comment_id': 443204279, 'comment_body': '`.of_match_table = adxrs290_of_match,` ; remove of_match_ptr() ;\r\nplenty of old driver use it, but it has to go away in time, to be able to support both device-tree and ACPI', 'comment_created': datetime.datetime(2020, 6, 21, 10, 15, 12, tzinfo=datetime.timezone.utc), 'commenter': 'commodo', 'type': 'User'}, {'comment_id': 443204394, 'comment_body': 'same goes for iio_device_free() ; not needed if using devm_iio_device_alloc();\r\nif remove these, you can remove the `adxrs290_remove()` altogether;\r\nthe kernel will autocleanup the device via the devm_ functions; \r\n`devm_` stand for device-managed', 'comment_created': datetime.datetime(2020, 6, 21, 10, 16, 30, tzinfo=datetime.timezone.utc), 'commenter': 'commodo', 'type': 'User'}, {'comment_id': 443204422, 'comment_body': 'maybe just do `return devm_iio_device_register()`\r\nif you get an error, the kernel should print it', 'comment_created': datetime.datetime(2020, 6, 21, 10, 17, tzinfo=datetime.timezone.utc), 'commenter': 'commodo', 'type': 'User'}, {'comment_id': 443204486, 'comment_body': ""in recent kernel versions it's preferred to not use a table for ` struct spi_device_id` ;\r\nso, remove it;"", 'comment_created': datetime.datetime(2020, 6, 21, 10, 17, 48, tzinfo=datetime.timezone.utc), 'commenter': 'commodo', 'type': 'User'}, {'comment_id': 443204790, 'comment_body': ""this will always return -ENOMEM;\r\nand print the error on failed allocation only;\r\nlooks like you are a bit too familiar with Python; I've also been there :)\r\n\r\nin this case:\r\n```\r\n\tif (!indio_dev)\r\n\t\treturn -ENOMEM;\r\n```\r\n\r\nyou don't need to print any err message for ENOMEM; ENOMEM error is rare, and if it happens, the system would likely have crashed by now"", 'comment_created': datetime.datetime(2020, 6, 21, 10, 21, 14, tzinfo=datetime.timezone.utc), 'commenter': 'commodo', 'type': 'User'}, {'comment_id': 443204827, 'comment_body': ""the change to ` arch/arm/configs/adi_bcm2709_defconfig ` goes into it's own commit"", 'comment_created': datetime.datetime(2020, 6, 21, 10, 21, 46, tzinfo=datetime.timezone.utc), 'commenter': 'commodo', 'type': 'User'}, {'comment_id': 443205764, 'comment_body': 'following comment https://github.com/analogdevicesinc/linux/pull/1046/commits/6a86adaf69b5b22d450bf0c19dba3e82185f7555#r443204486   ; if you remove that table, you\'ll get a crash here;\r\nso, 2 ways to solve it:\r\n1. `indio_dev->name = ""adxrs290"";`  this is preferred for now, given that this driver supports only one part\r\n2. if supporting multiple parts, more code is required; see https://github.com/analogdevicesinc/linux/pull/1040#discussion_r441337825  ; we\'ve had a recent discussion about this internally; \r\n\r\nfor 2. the chip-info table is usually neat, if the parts are similar, but there are some chip-constants that differ, like number of precision-bits, frequency limits, some ref-voltages, etc', 'comment_created': datetime.datetime(2020, 6, 21, 10, 34, 49, tzinfo=datetime.timezone.utc), 'commenter': 'commodo', 'type': 'User'}, {'comment_id': 443244890, 'comment_body': 'Sure, acknowledged in v3.', 'comment_created': datetime.datetime(2020, 6, 21, 18, 33, 3, tzinfo=datetime.timezone.utc), 'commenter': 'layman-n-ish', 'type': 'User'}, {'comment_id': 443245106, 'comment_body': ""You're right; I'm aware of Jonathan's work on removing this macro from relevant drivers upstream. Sorry, missed incorporating that in this driver. Fixed in v3."", 'comment_created': datetime.datetime(2020, 6, 21, 18, 35, 46, tzinfo=datetime.timezone.utc), 'commenter': 'layman-n-ish', 'type': 'User'}, {'comment_id': 443245530, 'comment_body': ""You're right although I just put the `adxrs290_remove` (and populated it with unregistering and freeing) **for now** because I thought this would be the right place to go to **low-power** mode. Am I right in my reasoning?\r\n\r\nI did take out `adxrs290_remove` in v3. "", 'comment_created': datetime.datetime(2020, 6, 21, 18, 41, 21, tzinfo=datetime.timezone.utc), 'commenter': 'layman-n-ish', 'type': 'User'}, {'comment_id': 443245567, 'comment_body': 'Makes sense. Fixed in v3.', 'comment_created': datetime.datetime(2020, 6, 21, 18, 41, 51, tzinfo=datetime.timezone.utc), 'commenter': 'layman-n-ish', 'type': 'User'}, {'comment_id': 443246426, 'comment_body': ""Oh, I was not aware of this. Fixed in v3.\r\n\r\nI'm trying to understand this but couldn't locate any conversations regarding this in the mailing list (apart from just [this](https://patchwork.kernel.org/patch/11366665/) patch); could you please shed some light on this?"", 'comment_created': datetime.datetime(2020, 6, 21, 18, 51, 12, tzinfo=datetime.timezone.utc), 'commenter': 'layman-n-ish', 'type': 'User'}, {'comment_id': 443246473, 'comment_body': 'Oops, this is rather embarrassing - sorry you had to see this. Fixed in v3.', 'comment_created': datetime.datetime(2020, 6, 21, 18, 51, 54, tzinfo=datetime.timezone.utc), 'commenter': 'layman-n-ish', 'type': 'User'}, {'comment_id': 443246496, 'comment_body': 'Yep, makes sense. Added a separate commit for this change in v3.', 'comment_created': datetime.datetime(2020, 6, 21, 18, 52, 21, tzinfo=datetime.timezone.utc), 'commenter': 'layman-n-ish', 'type': 'User'}, {'comment_id': 443246739, 'comment_body': 'Incorporated the 1st way (`indio_dev->name = ""adxrs290""`) in v3 since the driver currently just supports a single part. Thanks for the detailed explanation! :)', 'comment_created': datetime.datetime(2020, 6, 21, 18, 55, 1, tzinfo=datetime.timezone.utc), 'commenter': 'layman-n-ish', 'type': 'User'}, {'comment_id': 443335703, 'comment_body': ""the patch you found is a good example; though, it probably doesn't explain things in detail;\r\ngeneral thing is that upstream maintainers (they're also people) change their preference over time, and start complaining about things about which they haven't complained before;\r\nand that's fine (usually), because it sometimes simplifies things;\r\n\r\nthe rationale for the `spi_device_id` table vs the `of_match_table` is that, if you look into the SPI framework code (`drivers/spi.spi.c`), you will see how an SPI device is matched when loading:\r\n```\r\nstatic int spi_match_device(struct device *dev, struct device_driver *drv)\r\n{\r\n        const struct spi_device *spi = to_spi_device(dev);\r\n        const struct spi_driver *sdrv = to_spi_driver(drv);\r\n\r\n        /* Check override first, and if set, only use the named driver */\r\n        if (spi->driver_override)\r\n                return strcmp(spi->driver_override, drv->name) == 0;\r\n\r\n        /* Attempt an OF style match */\r\n        if (of_driver_match_device(dev, drv))\r\n                return 1;\r\n\r\n        /* Then try ACPI */\r\n        if (acpi_driver_match_device(dev, drv))\r\n                return 1;\r\n\r\n        if (sdrv->id_table)\r\n                return !!spi_match_id(sdrv->id_table, spi);\r\n\r\n        return strcmp(spi->modalias, drv->name) == 0;\r\n}\r\n```\r\n\r\nso, first it tries some custom hook, then OF, then ACPI, then `adxrs290_id_table` (i.e. sdrv->id_table), and modalias (i don't know what that is atm, nor do i care atm :) )\r\n\r\nthe final conclusion (with the comments we've got from IIO) is that if you implement OF, and the driver should be loadable via OF, then don't add an SPI-device-table;\r\nbecause that is just a duplicate table that would never be used;\r\nthe SPI-device-table also does some black-magic to load the device via OF/DT (no idea about ACPI);\r\nand coming back to ` ACPI via PRP0001` , that should also work [at some point]\r\n\r\nmoving forward, we obviously have plenty of old drivers that need this SPI-device-table removed [to avoid it being copied], but that's things go;\r\nthis point/comment [with SPI-device-table] is pretty new in IIO [couple of months], it's probably older in some other subsystems;"", 'comment_created': datetime.datetime(2020, 6, 22, 6, 12, 9, tzinfo=datetime.timezone.utc), 'commenter': 'commodo', 'type': 'User'}, {'comment_id': 443336779, 'comment_body': 'one last thing;  sorry for omitting it earlier;\r\n`.owner = THIS_MODULE, `  should also be removed;\r\nthis has appeared around kernel 4.19 [ maybe a bit earlier ]; in 4.14 this was still required;', 'comment_created': datetime.datetime(2020, 6, 22, 6, 15, 41, tzinfo=datetime.timezone.utc), 'commenter': 'commodo', 'type': 'User'}, {'comment_id': 443529387, 'comment_body': 'Okay, got it! Acknowledged in v4. Thanks.', 'comment_created': datetime.datetime(2020, 6, 22, 12, 41, 36, tzinfo=datetime.timezone.utc), 'commenter': 'layman-n-ish', 'type': 'User'}, {'comment_id': 443532352, 'comment_body': ""Indeed, removing `spi_device_id` table does make a lot of sense if one's using the `of_match_table`. Thank you very much for the detailed explanation! :D"", 'comment_created': datetime.datetime(2020, 6, 22, 12, 46, 54, tzinfo=datetime.timezone.utc), 'commenter': 'layman-n-ish', 'type': 'User'}]","[{'commit_sha': '44d0f04aef28e1f361f10d0a8edc313555bed2df', 'committer_username': 'layman-n-ish', 'committer_name': 'Nishant Malpani', 'committer_email': 'Nishant.Malpani@iiitb.org', 'commit_date': datetime.datetime(2017, 10, 28, 15, 22, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45ff3e705163af213151e34295ff2de0b28455e0', 'committer_username': 'layman-n-ish', 'committer_name': 'Nishant Malpani', 'committer_email': 'Nishant.Malpani@iiitb.org', 'commit_date': datetime.datetime(2017, 10, 28, 15, 22, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0728337b4e4d0eec0cbdca49a86769b858d308a', 'committer_username': 'layman-n-ish', 'committer_name': 'Nishant Malpani', 'committer_email': 'Nishant.Malpani@iiitb.org', 'commit_date': datetime.datetime(2017, 10, 28, 15, 22, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '654e51e00216aa5777451b4f733590a83b5dd377', 'committer_username': 'layman-n-ish', 'committer_name': 'Nishant Malpani', 'committer_email': 'Nishant.Malpani@iiitb.org', 'commit_date': datetime.datetime(2017, 10, 28, 15, 22, 9, tzinfo=datetime.timezone.utc)}]",Nishant Malpani,33180939,Nishant.Malpani@iiitb.org,User,,27,,10,40
443062268,iio: gyro: Update ADXRS290 driver for channels support,"This patch adds channels support for angular rate data & temperature data and the ability to program the 3db frequencies for both low-pass & high-pass filter all through the SPI protocol. This patch also updates the dt-overlay to configure ADXRS290 to SPI mode 3 and correspondingly updates the binding document.

Signed-off-by: Nishant Malpani <nish.malpani25@gmail.com>",True,1059,https://api.github.com/repos/analogdevicesinc/linux/pulls/1059,https://github.com/analogdevicesinc/linux/pull/1059,closed,425,5,3,3,5,45,0,0,[],2020-07-01 23:28:10+00:00,2020-07-14 07:49:24+00:00,1066874.0,"12 days, 8:21:14","[{'comment_id': 450001348, 'comment_body': ""doc-strings aren't usually needed for these type of static functions in the driver;\r\nthey're IIO API functions, so this is documenting what should be documented in IIO;\r\n"", 'comment_created': datetime.datetime(2020, 7, 6, 6, 8, 59, tzinfo=datetime.timezone.utc), 'commenter': 'commodo', 'type': 'User'}, {'comment_id': 450001615, 'comment_body': 'wait; sorry; this is an internal function to the driver;\r\neven so, they are not typically documented;', 'comment_created': datetime.datetime(2020, 7, 6, 6, 9, 58, tzinfo=datetime.timezone.utc), 'commenter': 'commodo', 'type': 'User'}, {'comment_id': 450002548, 'comment_body': ""wouldn't a normal SPI-transfer call work here?\r\nit looks like this may be re-implementing what could be done with a standard spi_read() or spi_sync_transfer() call\r\n"", 'comment_created': datetime.datetime(2020, 7, 6, 6, 12, 56, tzinfo=datetime.timezone.utc), 'commenter': 'commodo', 'type': 'User'}, {'comment_id': 450004700, 'comment_body': 'this error looks more like -ENODEV', 'comment_created': datetime.datetime(2020, 7, 6, 6, 19, 36, tzinfo=datetime.timezone.utc), 'commenter': 'commodo', 'type': 'User'}, {'comment_id': 450004980, 'comment_body': 'well, all these chip error checks look like they should return -ENODEV;', 'comment_created': datetime.datetime(2020, 7, 6, 6, 20, 16, tzinfo=datetime.timezone.utc), 'commenter': 'commodo', 'type': 'User'}, {'comment_id': 450006723, 'comment_body': ""i don't know what the correct approach would be here [for these settings];\r\nfor some settings it's the driver that should set a default value [on driver init], for other settings it's probably ok to have the default-on-reset value;\r\n\r\ni don't know if there is a general consensus on which is the more appropriate;\r\nmaybe upstream would tell us;\r\nbut just keep this in mind, when sending this upstream;\r\n\r\nfor now, this is fine from my side;"", 'comment_created': datetime.datetime(2020, 7, 6, 6, 24, 57, tzinfo=datetime.timezone.utc), 'commenter': 'commodo', 'type': 'User'}, {'comment_id': 450047695, 'comment_body': ""You're right but as I mentioned in a comment above (see pt. 2), the CS line toggles between the two successive 8b reads, in the current solution of `adxrs290_spi_read16b`, which would work for both _standby_ and _measurement_ mode. The datasheet says:\r\n\r\n> In standby mode, only single-address SPI transactions are performed, which includes reading from or writing to a single register, but does not include writing to or reading from several registers in one command.\r\n\r\nFrom the available SPI API, I previously tried `spi_w8r16` (in _measurement_ mode) for multiple bytes read but that didn't work as expected. From what I see in source code of [`drivers/spi/spi.c`](https://elixir.bootlin.com/linux/latest/source/drivers/spi/spi.c#L3865), I don't think it auto-increments to read the next address from the address provided, does it? (Or does the hardware do it?) This also brings to my next question of: how can one exercise multiple bytes read with one SPI command? The datasheet doesn't explicitly mention this. SPI timing diagram from ADXRS290's datasheet:\r\n\r\n![adxrs290_spi_timing_dia](https://user-images.githubusercontent.com/33180939/86569696-6f308980-bf8c-11ea-9660-e0b5c7760566.png)\r\n"", 'comment_created': datetime.datetime(2020, 7, 6, 7, 58, 2, tzinfo=datetime.timezone.utc), 'commenter': 'layman-n-ish', 'type': 'User'}, {'comment_id': 450048558, 'comment_body': ""Okay, I thought it'd be a good-to-have detail. Will remove in v2."", 'comment_created': datetime.datetime(2020, 7, 6, 7, 59, 56, tzinfo=datetime.timezone.utc), 'commenter': 'layman-n-ish', 'type': 'User'}, {'comment_id': 450048869, 'comment_body': 'Oh yes! Thanks for pointing out. Will address in v2.', 'comment_created': datetime.datetime(2020, 7, 6, 8, 0, 26, tzinfo=datetime.timezone.utc), 'commenter': 'layman-n-ish', 'type': 'User'}, {'comment_id': 450049759, 'comment_body': 'Great point! Will keep this in mind when sending it to upstream. Thanks.', 'comment_created': datetime.datetime(2020, 7, 6, 8, 2, 12, tzinfo=datetime.timezone.utc), 'commenter': 'layman-n-ish', 'type': 'User'}, {'comment_id': 450051655, 'comment_body': ""but if you use `spi_sync_transfer()` you can set a `cs_change = 1` parameter between 2 transfers;\r\nso, you could define 2 transfers and one toggles the CS change;\r\nit's a slightly more common approach;"", 'comment_created': datetime.datetime(2020, 7, 6, 8, 6, 5, tzinfo=datetime.timezone.utc), 'commenter': 'commodo', 'type': 'User'}, {'comment_id': 450056179, 'comment_body': ""Yes, I've seen that in a few drivers. I'll do that then! \r\n\r\nSorry; one more thing - the current `adxrs290_spi_read16b` function should still be present for me to read 16b in _standby_ mode, right? Depending on my current state (_standby_ or _measurement_), I'll have to call a corresponding read16b function - sort of like dynamic dispatch. Am I going in the right direction?"", 'comment_created': datetime.datetime(2020, 7, 6, 8, 14, 52, tzinfo=datetime.timezone.utc), 'commenter': 'layman-n-ish', 'type': 'User'}, {'comment_id': 450058457, 'comment_body': ""Oh wait, I think I misread your previous comment. You want me to have 2 different functions with SPI transfers to read 16b - one which doesn't toggle the CS (to use in _measurement_ mode) and one which does (to use in _standby_ mode). Did I infer it correctly this time?"", 'comment_created': datetime.datetime(2020, 7, 6, 8, 19, 2, tzinfo=datetime.timezone.utc), 'commenter': 'layman-n-ish', 'type': 'User'}, {'comment_id': 450061912, 'comment_body': ""> I don't think it auto-increments to read the next address from the address provided, does it? (Or does the hardware do it?) This also brings to my next question of: how can one exercise multiple bytes read with one SPI command? The datasheet doesn't explicitly mention this. SPI timing diagram from ADXRS290's datasheet:\r\n\r\nI forgot to answer this part initially: so, the SPI framework should handle most things here. Maybe give it a try and read and see how it works.\r\n\r\nIf there some differences between measurement mode and they aren't too big, you could implement a:\r\n```\r\nstatic int adxrs290_spi_read16b(... bool standby)\r\n{\r\n     if (standby) {\r\n\r\n     } else {\r\n\r\n     }\r\n}\r\n```\r\n\r\nand call it with adxrs290_spi_read16b(..., false) for measurement mode;"", 'comment_created': datetime.datetime(2020, 7, 6, 8, 25, 4, tzinfo=datetime.timezone.utc), 'commenter': 'commodo', 'type': 'User'}, {'comment_id': 450063526, 'comment_body': 'Got it! This clears a lot of things; thanks. Will address this in v2. ', 'comment_created': datetime.datetime(2020, 7, 6, 8, 27, 48, tzinfo=datetime.timezone.utc), 'commenter': 'layman-n-ish', 'type': 'User'}, {'comment_id': 450125386, 'comment_body': ""No need to set `val2` if returning `IIO_VAL_INT`. Also, I didn't really check the math here but make sure that things are reported in the expected units (as specified [here](https://elixir.bootlin.com/linux/latest/source/Documentation/ABI/testing/sysfs-bus-iio)) for angular velocity and temperature."", 'comment_created': datetime.datetime(2020, 7, 6, 10, 18, 17, tzinfo=datetime.timezone.utc), 'commenter': 'nunojsa', 'type': 'User'}, {'comment_id': 450148567, 'comment_body': 'You also mentioned that we have 12 LSB/deg sensitivity for temperature... Having it to 0.1°C seems like a rough approximation.', 'comment_created': datetime.datetime(2020, 7, 6, 11, 7, 30, tzinfo=datetime.timezone.utc), 'commenter': 'nunojsa', 'type': 'User'}, {'comment_id': 450149145, 'comment_body': 'It looks like `cmd` can be a `const u8`. It is a good practice to define things as `const` when they are... ', 'comment_created': datetime.datetime(2020, 7, 6, 11, 8, 51, tzinfo=datetime.timezone.utc), 'commenter': 'nunojsa', 'type': 'User'}, {'comment_id': 450157251, 'comment_body': ""Okay, will remove the part where I set `*val2` while returning `IIO_VAL_INT` in v2. \r\n\r\nYes, I've made sure the units are appropriately set as dictated in the ABI."", 'comment_created': datetime.datetime(2020, 7, 6, 11, 27, 19, tzinfo=datetime.timezone.utc), 'commenter': 'layman-n-ish', 'type': 'User'}, {'comment_id': 450158019, 'comment_body': ""Sorry, the sensitivity is 10 LSB/deg Celsius for temperature. There's a typo in the commit message - will fix it in v2. Thanks for pointing it out! :)"", 'comment_created': datetime.datetime(2020, 7, 6, 11, 28, 56, tzinfo=datetime.timezone.utc), 'commenter': 'layman-n-ish', 'type': 'User'}, {'comment_id': 450158609, 'comment_body': ""You're right. I'll _constify_ wherever possible in v2. Thanks for the tip!"", 'comment_created': datetime.datetime(2020, 7, 6, 11, 30, 19, tzinfo=datetime.timezone.utc), 'commenter': 'layman-n-ish', 'type': 'User'}, {'comment_id': 450160471, 'comment_body': 'Ok, then nothing to add. But yes, please update the commit message...', 'comment_created': datetime.datetime(2020, 7, 6, 11, 34, 27, tzinfo=datetime.timezone.utc), 'commenter': 'nunojsa', 'type': 'User'}, {'comment_id': 450240673, 'comment_body': 'This could be done with a `adxrs290_spi_reg_read` function or `adxrs290_spi_read8b` function. Current usage is for now the only usage, but you might have more in the future.', 'comment_created': datetime.datetime(2020, 7, 6, 14, 0, 13, tzinfo=datetime.timezone.utc), 'commenter': 'buha', 'type': 'User'}, {'comment_id': 450638047, 'comment_body': ""I'm not entirely sure if I understand what you mean here. Do you mean to replace `adxrs290_get_3db_freq()` with a generic `adxrs290_spi_read8b()` function? But we already have SPI core's available API - `spi_w8r8()` - to do so.\r\n\r\nIf I'm wrong in inferring what you meant, could you please elaborate your point?"", 'comment_created': datetime.datetime(2020, 7, 7, 6, 29, 20, tzinfo=datetime.timezone.utc), 'commenter': 'layman-n-ish', 'type': 'User'}, {'comment_id': 450667938, 'comment_body': ""I misunderstood the point of this function, i now checked the datasheet and i understand you are doing a very specific thing here which won't be used elsewhere so there is no point in code reuse."", 'comment_created': datetime.datetime(2020, 7, 7, 7, 37, 24, tzinfo=datetime.timezone.utc), 'commenter': 'buha', 'type': 'User'}, {'comment_id': 450676615, 'comment_body': 'I am wondering how did this previously work (cpol=0, cpha=0 I assume) without junk readings ?', 'comment_created': datetime.datetime(2020, 7, 7, 7, 54, 18, tzinfo=datetime.timezone.utc), 'commenter': 'buha', 'type': 'User'}, {'comment_id': 450678243, 'comment_body': ""It didn't, haha. The skeleton driver back was too naive to interface with SPI and I hadn't read the datasheet in detail to realise this back then."", 'comment_created': datetime.datetime(2020, 7, 7, 7, 57, 23, tzinfo=datetime.timezone.utc), 'commenter': 'layman-n-ish', 'type': 'User'}, {'comment_id': 450702135, 'comment_body': 'That makes sense !', 'comment_created': datetime.datetime(2020, 7, 7, 8, 39, 46, tzinfo=datetime.timezone.utc), 'commenter': 'buha', 'type': 'User'}, {'comment_id': 452665124, 'comment_body': ""I think you might get some comments about formatting here. Typical thing that it's done is to align parameters 2, 3 ... with the first character of the first parameter like:\r\n```\r\nlpf_idx = adxrs290_find_best_match(adxrs290_lpf_3db_freq_tbl,\r\ntab tab tab ... space space space  ARRAY_SIZE(adxrs290_lpf_3db_freq_tbl),\r\n...\r\n```"", 'comment_created': datetime.datetime(2020, 7, 10, 7, 15, 17, tzinfo=datetime.timezone.utc), 'commenter': 'buha', 'type': 'User'}, {'comment_id': 452665732, 'comment_body': 'Btw, general question, did you run checkpatch.pl ?', 'comment_created': datetime.datetime(2020, 7, 10, 7, 16, 37, tzinfo=datetime.timezone.utc), 'commenter': 'buha', 'type': 'User'}, {'comment_id': 452668025, 'comment_body': 'I previously aligned it as you pointed out but then the line exceeds the 80 characters conventional rule.\r\n\r\nYes, I ran `./scripts/checkpatch.pl -f drivers/iio/gyro/adxrs290.c` on this; gives me no warning on this line.\r\n\r\n', 'comment_created': datetime.datetime(2020, 7, 10, 7, 21, 31, tzinfo=datetime.timezone.utc), 'commenter': 'layman-n-ish', 'type': 'User'}, {'comment_id': 452673411, 'comment_body': 'Why would this be a union ? On SPI you transfer on MOSI and MISO at the same time hence using both buffers at the same time so you need separate memory areas.\r\n\r\nYou also transfer the same amount of data so their .len in spi_transfer below should be equal.\r\n\r\nI would have a tx[3] and rx[3] in the scenario where you read 2 consecutive registers (1 byte address, reg 1, reg 2).', 'comment_created': datetime.datetime(2020, 7, 10, 7, 33, 14, tzinfo=datetime.timezone.utc), 'commenter': 'buha', 'type': 'User'}, {'comment_id': 452674071, 'comment_body': 'Common practice is to put these buffers right at the end of the device struct and append the first buffer with `____cacheline_aligned` like you did for the union.', 'comment_created': datetime.datetime(2020, 7, 10, 7, 34, 53, tzinfo=datetime.timezone.utc), 'commenter': 'buha', 'type': 'User'}, {'comment_id': 452678808, 'comment_body': 'The timing diagram threw me off to the direction of using a `union` (quite a few drivers do it too) - the data in rx can be ignored until the tx buffer has been shifted out. Only after the tx transfer has been completed, the data in the rx buffer should be ""recorded"", which is what I do while initialising the `struct spi_transfer`.\r\n![adxrs290_spi_timing_dia](https://user-images.githubusercontent.com/33180939/87129272-ab2a5e00-c2ae-11ea-9fcd-06ecfd629e93.png)\r\n', 'comment_created': datetime.datetime(2020, 7, 10, 7, 45, 5, tzinfo=datetime.timezone.utc), 'commenter': 'layman-n-ish', 'type': 'User'}, {'comment_id': 452680014, 'comment_body': 'Sure, will add the buffers at the end of `struct adxrs290_state` in v3.', 'comment_created': datetime.datetime(2020, 7, 10, 7, 47, 43, tzinfo=datetime.timezone.utc), 'commenter': 'layman-n-ish', 'type': 'User'}, {'comment_id': 452684188, 'comment_body': 'Example of a driver (ad7292) which uses a `union` in a similar way: [click here](https://github.com/analogdevicesinc/linux/blob/rpi-4.14.y_GSOC_2019/drivers/iio/adc/ad7292.c#L96). ', 'comment_created': datetime.datetime(2020, 7, 10, 7, 56, 11, tzinfo=datetime.timezone.utc), 'commenter': 'layman-n-ish', 'type': 'User'}, {'comment_id': 452730565, 'comment_body': ""I think that rule was anyhow not mandatory in cases where it's impossible to apply like this one.\r\nAlso, recently, there was a belief system shift, I guess in newer kernels checkpatch stops checking this :D But again, I can't be 100% sure what the upstream will tell you...\r\nhttps://linux.slashdot.org/story/20/05/31/211211/linus-torvalds-argues-against-80-column-line-length-coding-style-as-linux-kernel-deprecates-it"", 'comment_created': datetime.datetime(2020, 7, 10, 9, 25, 41, tzinfo=datetime.timezone.utc), 'commenter': 'buha', 'type': 'User'}, {'comment_id': 452750353, 'comment_body': ""Interesting article! I agree with the points Linus promotes too (which is why I left [this](https://github.com/layman-n-ish/linux/blob/rpi-4.19.y_adxrs290/drivers/iio/gyro/adxrs290.c#L264) line for better readability & for 'grep' to work even though it generates a warning). I'll align the parameters with the first parameter in v3."", 'comment_created': datetime.datetime(2020, 7, 10, 10, 4, 50, tzinfo=datetime.timezone.utc), 'commenter': 'layman-n-ish', 'type': 'User'}, {'comment_id': 453504468, 'comment_body': 'as discussed offline, this looks ok in your particular situation, marking as resolved', 'comment_created': datetime.datetime(2020, 7, 13, 9, 7, 26, tzinfo=datetime.timezone.utc), 'commenter': 'buha', 'type': 'User'}, {'comment_id': 453690607, 'comment_body': 'Could this masking operation be a little more documented ? Maybe a #define with proper name or comment.', 'comment_created': datetime.datetime(2020, 7, 13, 14, 28, 32, tzinfo=datetime.timezone.utc), 'commenter': 'buha', 'type': 'User'}, {'comment_id': 453691936, 'comment_body': 'why not abs() ?', 'comment_created': datetime.datetime(2020, 7, 13, 14, 30, 20, tzinfo=datetime.timezone.utc), 'commenter': 'buha', 'type': 'User'}, {'comment_id': 453694187, 'comment_body': ""There seems to be a strong preference in linux to use FIELD_GET/FIELD_PREP so maybe it would be good to see how it's typically done and try to comply."", 'comment_created': datetime.datetime(2020, 7, 13, 14, 33, 26, tzinfo=datetime.timezone.utc), 'commenter': 'buha', 'type': 'User'}, {'comment_id': 453832039, 'comment_body': 'Yes, makes sense. Addressed in v4.', 'comment_created': datetime.datetime(2020, 7, 13, 18, 2, 29, tzinfo=datetime.timezone.utc), 'commenter': 'layman-n-ish', 'type': 'User'}, {'comment_id': 453832715, 'comment_body': 'I don\'t remember why I chose this way; using `abs()` is obviously much ""cleaner"". Acknowledged in v4.', 'comment_created': datetime.datetime(2020, 7, 13, 18, 3, 37, tzinfo=datetime.timezone.utc), 'commenter': 'layman-n-ish', 'type': 'User'}, {'comment_id': 453834035, 'comment_body': ""Sorry, wasn't aware of those macros. They seem very convenient. Incorporated those in v4. Thanks for the review! :D"", 'comment_created': datetime.datetime(2020, 7, 13, 18, 5, 53, tzinfo=datetime.timezone.utc), 'commenter': 'layman-n-ish', 'type': 'User'}]","[{'commit_sha': '9b55ef2d8dfde20052b9687c9035f2a8dfe8f058', 'committer_username': 'layman-n-ish', 'committer_name': 'Nishant Malpani', 'committer_email': 'Nishant.Malpani@iiitb.org', 'commit_date': datetime.datetime(2017, 10, 28, 15, 22, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fbdbdd8fd735ab64970ed6f62078c69aa506566f', 'committer_username': 'layman-n-ish', 'committer_name': 'Nishant Malpani', 'committer_email': 'Nishant.Malpani@iiitb.org', 'commit_date': datetime.datetime(2017, 10, 28, 15, 22, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c1bb35f2faa503318796a7bcab6bb65f48294ca', 'committer_username': 'layman-n-ish', 'committer_name': 'Nishant Malpani', 'committer_email': 'Nishant.Malpani@iiitb.org', 'commit_date': datetime.datetime(2017, 10, 28, 15, 22, 9, tzinfo=datetime.timezone.utc)}]",Nishant Malpani,33180939,Nishant.Malpani@iiitb.org,User,,27,,10,40
461808140,iio: gyro: adxrs290: sync with upstream version,"Update ADXRS290's driver and dt-bindings in the ADI tree with the upstream version [1] [2].

[1] https://patchwork.kernel.org/patch/11685711/
[2] https://patchwork.kernel.org/patch/11685713/

Signed-off-by: Nishant Malpani <nish.malpani25@gmail.com>",True,1102,https://api.github.com/repos/analogdevicesinc/linux/pulls/1102,https://github.com/analogdevicesinc/linux/pull/1102,closed,125,170,2,2,4,0,0,0,[],2020-08-02 13:38:18+00:00,2020-08-03 05:27:54+00:00,56976.0,15:49:36,[],"[{'commit_sha': '5cb1847691cd636448e93723b825ac150d0ece93', 'committer_username': 'layman-n-ish', 'committer_name': 'Nishant Malpani', 'committer_email': 'Nishant.Malpani@iiitb.org', 'commit_date': datetime.datetime(2017, 10, 28, 15, 22, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b9fcb0c28aa0fa5f24a77e6d6ff2ddb194bcb6c7', 'committer_username': 'layman-n-ish', 'committer_name': 'Nishant Malpani', 'committer_email': 'Nishant.Malpani@iiitb.org', 'commit_date': datetime.datetime(2017, 10, 28, 15, 22, 9, tzinfo=datetime.timezone.utc)}]",Nishant Malpani,33180939,Nishant.Malpani@iiitb.org,User,,27,,10,40
462016791,iio: gyro: Add driver support for ADXRS290,"ADXRS290 is a high performance MEMS pitch and roll (dual-axis in-plane) angular rate sensor (gyroscope) designed for use in stabilization applications. It also features an internal temperature sensor and programmable high-pass and low-pass filters.

Add support for ADXRS290 in direct-access mode for now.

Corresponding upstream versions: https://patchwork.kernel.org/patch/11685711/ and https://patchwork.kernel.org/patch/11685713/

Signed-off-by: Nishant Malpani <nish.malpani25@gmail.com>",True,1103,https://api.github.com/repos/analogdevicesinc/linux/pulls/1103,https://github.com/analogdevicesinc/linux/pull/1103,closed,516,0,6,3,3,2,0,0,[],2020-08-03 07:58:53+00:00,2020-08-03 12:39:30+00:00,16837.0,4:40:37,"[{'comment_id': 464324978, 'comment_body': 'should be a separate patch ideally\r\nthis file is only internal to the ADI repo, to be able to buildall ADI drivers with different defconfigs', 'comment_created': datetime.datetime(2020, 8, 3, 10, 19, 35, tzinfo=datetime.timezone.utc), 'commenter': 'commodo', 'type': 'User'}, {'comment_id': 464331297, 'comment_body': 'Ah makes sense. Will do so in v3.', 'comment_created': datetime.datetime(2020, 8, 3, 10, 33, 45, tzinfo=datetime.timezone.utc), 'commenter': 'layman-n-ish', 'type': 'User'}]","[{'commit_sha': '8ddc770f4b80d99c3b0fe2d9079bbc5350447708', 'committer_username': 'layman-n-ish', 'committer_name': 'Nishant Malpani', 'committer_email': 'Nishant.Malpani@iiitb.org', 'commit_date': datetime.datetime(2017, 10, 28, 15, 22, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '58cca2257e3354e0b3b336a60bf45cc28bb41e75', 'committer_username': 'layman-n-ish', 'committer_name': 'Nishant Malpani', 'committer_email': 'Nishant.Malpani@iiitb.org', 'commit_date': datetime.datetime(2017, 10, 28, 15, 22, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b450957e865b1f169b6143754c05fb3fb0dff270', 'committer_username': 'layman-n-ish', 'committer_name': 'Nishant Malpani', 'committer_email': 'Nishant.Malpani@iiitb.org', 'commit_date': datetime.datetime(2017, 10, 28, 15, 22, 9, tzinfo=datetime.timezone.utc)}]",Nishant Malpani,33180939,Nishant.Malpani@iiitb.org,User,,27,,10,40
470305478,iio: gyro: adxrs290: Add triggered buffer support,"Provide a way for continuous data capture by setting up buffer support. The
data ready signal exposed at the SYNC pin of the ADXRS290 is exploited as
a hardware interrupt which triggers to fill the buffer.

Triggered buffer setup was tested with both hardware trigger (DATA_RDY) and
software triggers (sysfs-trig & hrtimer).

Also, extend support to read/write byte data from/to the device using
debugfs interface.

Signed-off-by: Nishant Malpani <nish.malpani25@gmail.com>",True,1131,https://api.github.com/repos/analogdevicesinc/linux/pulls/1131,https://github.com/analogdevicesinc/linux/pull/1131,closed,294,14,4,5,2,24,0,0,[],2020-08-19 17:15:40+00:00,2020-08-25 05:31:43+00:00,476163.0,"5 days, 12:16:03","[{'comment_id': 473806917, 'comment_body': 'indentation looks weird here', 'comment_created': datetime.datetime(2020, 8, 20, 9, 23, 28, tzinfo=datetime.timezone.utc), 'commenter': 'commodo', 'type': 'User'}, {'comment_id': 473807435, 'comment_body': 'also, should this buffer be marked with `____cacheline_aligned` ?', 'comment_created': datetime.datetime(2020, 8, 20, 9, 24, 2, tzinfo=datetime.timezone.utc), 'commenter': 'commodo', 'type': 'User'}, {'comment_id': 473809509, 'comment_body': 'this seems to toggle irespective of mode;\r\nshould this be more of an if() else() or switch statement?\r\nwhere \r\n```\r\nswitch (mode) {\r\nif (MODE1)\r\n      val |= ADXRS290_MEASUREMENT;\r\n       break;\r\ncase MODE2:\r\n      val &= ~ADXRS290_MEASUREMENT;\r\n       break;\r\ndefault:\r\n       ret = -EINVAL;\r\n        goto done;\r\n}\r\n```', 'comment_created': datetime.datetime(2020, 8, 20, 9, 26, 32, tzinfo=datetime.timezone.utc), 'commenter': 'commodo', 'type': 'User'}, {'comment_id': 473810310, 'comment_body': 'this looks like iio reg debugfs support;\r\ntypically goes into a separate patch', 'comment_created': datetime.datetime(2020, 8, 20, 9, 27, 35, tzinfo=datetime.timezone.utc), 'commenter': 'commodo', 'type': 'User'}, {'comment_id': 473812214, 'comment_body': 'this could be `return ret`; directly; ', 'comment_created': datetime.datetime(2020, 8, 20, 9, 29, 59, tzinfo=datetime.timezone.utc), 'commenter': 'commodo', 'type': 'User'}, {'comment_id': 473815214, 'comment_body': 'instead of adding these `goto` labels you coudl add a `devm_add_action_or_reset()` hook somewhere and that would get called on the error path and on the remove hook (meaning, you could skip not adding a `adxrs290_remove()` hook)', 'comment_created': datetime.datetime(2020, 8, 20, 9, 33, 38, tzinfo=datetime.timezone.utc), 'commenter': 'commodo', 'type': 'User'}, {'comment_id': 473816725, 'comment_body': 'you could move this block into the `adxrs290_probe_trigger()` code; make it an early return:\r\n```\r\nstatic int adxrs290_probe_trigger() {\r\n    if (!spi->irq) {\r\n          dev_info(&spi->dev, ""no irq, using polling\\n"");\r\n           return 0;\r\n   }\r\n}\r\n```', 'comment_created': datetime.datetime(2020, 8, 20, 9, 35, 21, tzinfo=datetime.timezone.utc), 'commenter': 'commodo', 'type': 'User'}, {'comment_id': 473817719, 'comment_body': ""this looks new;\r\nit's more of a bug-fix if this is being added now;"", 'comment_created': datetime.datetime(2020, 8, 20, 9, 36, 28, tzinfo=datetime.timezone.utc), 'commenter': 'commodo', 'type': 'User'}, {'comment_id': 473818551, 'comment_body': ""this may be my fault a bit; on the upstream kernel, this assignment isn't needed;\r\non anything older than 5.7 [or 5.8] , this assignment is required;"", 'comment_created': datetime.datetime(2020, 8, 20, 9, 37, 28, tzinfo=datetime.timezone.utc), 'commenter': 'commodo', 'type': 'User'}, {'comment_id': 473939658, 'comment_body': '> indentation looks weird here\r\n\r\nTrue but I wanted the `buffer` to align with the other member names on the top. Do you still think I should fix it?', 'comment_created': datetime.datetime(2020, 8, 20, 12, 42, 18, tzinfo=datetime.timezone.utc), 'commenter': 'layman-n-ish', 'type': 'User'}, {'comment_id': 473941287, 'comment_body': ""> also, should this buffer be marked with ____cacheline_aligned?\r\n\r\nUmm, I don't think so. I referred to Jonathon's recent patches upstream which fixes alignment issues and data leakage due to such local buffers and he did something similar. Ex: [1] & [2]\r\n\r\n[1] https://patchwork.kernel.org/patch/11678695/\r\n[2] https://patchwork.kernel.org/patch/11678693/"", 'comment_created': datetime.datetime(2020, 8, 20, 12, 45, 13, tzinfo=datetime.timezone.utc), 'commenter': 'layman-n-ish', 'type': 'User'}, {'comment_id': 473942262, 'comment_body': 'Okay, will do in v2.', 'comment_created': datetime.datetime(2020, 8, 20, 12, 46, 54, tzinfo=datetime.timezone.utc), 'commenter': 'layman-n-ish', 'type': 'User'}, {'comment_id': 473945388, 'comment_body': ""You're right; will ack in v2."", 'comment_created': datetime.datetime(2020, 8, 20, 12, 52, 8, tzinfo=datetime.timezone.utc), 'commenter': 'layman-n-ish', 'type': 'User'}, {'comment_id': 473946466, 'comment_body': ""Oh wow, I wasn't aware of this. Thanks. Will add in v2."", 'comment_created': datetime.datetime(2020, 8, 20, 12, 53, 51, tzinfo=datetime.timezone.utc), 'commenter': 'layman-n-ish', 'type': 'User'}, {'comment_id': 473946743, 'comment_body': 'Alright. Will do so in v2.', 'comment_created': datetime.datetime(2020, 8, 20, 12, 54, 19, tzinfo=datetime.timezone.utc), 'commenter': 'layman-n-ish', 'type': 'User'}, {'comment_id': 473948360, 'comment_body': 'Yeah, my bad I missed this previously; I noticed this after sending patches upstream but I thought I should wait and add it with my triggered-buffer patches. Are you saying I should first send a bug-fix patch before sending triggered-buffer patches? And here, should I add this in a separate commit first and then include the triggered-buffer commits?', 'comment_created': datetime.datetime(2020, 8, 20, 12, 56, 53, tzinfo=datetime.timezone.utc), 'commenter': 'layman-n-ish', 'type': 'User'}, {'comment_id': 473949712, 'comment_body': 'you can add it to this series as well;\r\nbut for upstream, make sure to add a Fixes: tag;\r\nthis will go through a Fixes route into the kernel', 'comment_created': datetime.datetime(2020, 8, 20, 12, 59, 11, tzinfo=datetime.timezone.utc), 'commenter': 'commodo', 'type': 'User'}, {'comment_id': 473950597, 'comment_body': ""Yes, you're right. I found this the hard way; a day of debugging on why my trigger fails to attach to the device ( by echoing to `trigger/current_trigger`) - I knew it had to do something with the `iio_trigger_validate_own_device` hook and that's how I got to know that the `indio_dev->dev.parent` was not set by the core..."", 'comment_created': datetime.datetime(2020, 8, 20, 13, 0, 36, tzinfo=datetime.timezone.utc), 'commenter': 'layman-n-ish', 'type': 'User'}, {'comment_id': 473951173, 'comment_body': ""> > indentation looks weird here\r\n> \r\n> True but I wanted the `buffer` to align with the other member names on the top. Do you still think I should fix it?\r\n\r\nno idea really; you can leave it as-is here;\r\nbut Jonathan may notice it, and mention it;\r\n\r\n\r\n\r\n\r\n> > also, should this buffer be marked with ____cacheline_aligned?\r\n> \r\n> Umm, I don't think so. I referred to Jonathon's recent patches upstream which fixes alignment issues and data leakage due to such local buffers and he did something similar. Ex: [1] & [2]\r\n> \r\n> [1] https://patchwork.kernel.org/patch/11678695/\r\n> [2] https://patchwork.kernel.org/patch/11678693/\r\n\r\nok; no need to add ____cacheline_aligned for now; i guess these suggestions change sometimes;"", 'comment_created': datetime.datetime(2020, 8, 20, 13, 1, 31, tzinfo=datetime.timezone.utc), 'commenter': 'commodo', 'type': 'User'}, {'comment_id': 473953100, 'comment_body': ""Ah, you're right; I toggle without checking if the `mode` is within the values I expect. Will add switch-case statements in v2."", 'comment_created': datetime.datetime(2020, 8, 20, 13, 4, 43, tzinfo=datetime.timezone.utc), 'commenter': 'layman-n-ish', 'type': 'User'}, {'comment_id': 473970040, 'comment_body': ""Okay, I'll look out for Jonathan's response. Marking it resolved here. Thanks!"", 'comment_created': datetime.datetime(2020, 8, 20, 13, 26, 13, tzinfo=datetime.timezone.utc), 'commenter': 'layman-n-ish', 'type': 'User'}, {'comment_id': 473972664, 'comment_body': 'Sure but should it be a separate patch/commit; prior to the triggered-buffer patches/commits?', 'comment_created': datetime.datetime(2020, 8, 20, 13, 28, 46, tzinfo=datetime.timezone.utc), 'commenter': 'layman-n-ish', 'type': 'User'}, {'comment_id': 474009100, 'comment_body': 'yes', 'comment_created': datetime.datetime(2020, 8, 20, 14, 4, 50, tzinfo=datetime.timezone.utc), 'commenter': 'commodo', 'type': 'User'}, {'comment_id': 476185180, 'comment_body': 'when sending this upstream, the commit has for the Fixes tag should be the one in the upstream tree;\r\notherwise this is perfect as-is', 'comment_created': datetime.datetime(2020, 8, 25, 5, 24, 54, tzinfo=datetime.timezone.utc), 'commenter': 'commodo', 'type': 'User'}]","[{'commit_sha': '605e1d6fa32956ffb76ec87744d389dd83ff6fef', 'committer_username': 'layman-n-ish', 'committer_name': 'Nishant Malpani', 'committer_email': 'Nishant.Malpani@iiitb.org', 'commit_date': datetime.datetime(2017, 10, 28, 15, 22, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c7f2cf099cab86b41a70f8523719458b40f69e3c', 'committer_username': 'layman-n-ish', 'committer_name': 'Nishant Malpani', 'committer_email': 'Nishant.Malpani@iiitb.org', 'commit_date': datetime.datetime(2017, 10, 28, 15, 22, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '324bf3b43906c2c5302e25ef3d505cdf89025b4d', 'committer_username': 'layman-n-ish', 'committer_name': 'Nishant Malpani', 'committer_email': 'Nishant.Malpani@iiitb.org', 'commit_date': datetime.datetime(2017, 10, 28, 15, 22, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d65cd080e5e6323b77e632eb027e7186366e049', 'committer_username': 'layman-n-ish', 'committer_name': 'Nishant Malpani', 'committer_email': 'Nishant.Malpani@iiitb.org', 'commit_date': datetime.datetime(2017, 10, 28, 15, 22, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b350993a3f086722d2950669999b748e8cec5aea', 'committer_username': 'layman-n-ish', 'committer_name': 'Nishant Malpani', 'committer_email': 'Nishant.Malpani@iiitb.org', 'commit_date': datetime.datetime(2017, 10, 28, 15, 22, 9, tzinfo=datetime.timezone.utc)}]",Nishant Malpani,33180939,Nishant.Malpani@iiitb.org,User,,27,,10,40
443062268,iio: gyro: Update ADXRS290 driver for channels support,"This patch adds channels support for angular rate data & temperature data and the ability to program the 3db frequencies for both low-pass & high-pass filter all through the SPI protocol. This patch also updates the dt-overlay to configure ADXRS290 to SPI mode 3 and correspondingly updates the binding document.

Signed-off-by: Nishant Malpani <nish.malpani25@gmail.com>",True,1059,https://api.github.com/repos/analogdevicesinc/linux/pulls/1059,https://github.com/analogdevicesinc/linux/pull/1059,closed,425,5,3,3,5,45,0,0,[],2020-07-01 23:28:10+00:00,2020-07-14 07:49:24+00:00,1066874.0,"12 days, 8:21:14","[{'comment_id': 450001348, 'comment_body': ""doc-strings aren't usually needed for these type of static functions in the driver;\r\nthey're IIO API functions, so this is documenting what should be documented in IIO;\r\n"", 'comment_created': datetime.datetime(2020, 7, 6, 6, 8, 59, tzinfo=datetime.timezone.utc), 'commenter': 'commodo', 'type': 'User'}, {'comment_id': 450001615, 'comment_body': 'wait; sorry; this is an internal function to the driver;\r\neven so, they are not typically documented;', 'comment_created': datetime.datetime(2020, 7, 6, 6, 9, 58, tzinfo=datetime.timezone.utc), 'commenter': 'commodo', 'type': 'User'}, {'comment_id': 450002548, 'comment_body': ""wouldn't a normal SPI-transfer call work here?\r\nit looks like this may be re-implementing what could be done with a standard spi_read() or spi_sync_transfer() call\r\n"", 'comment_created': datetime.datetime(2020, 7, 6, 6, 12, 56, tzinfo=datetime.timezone.utc), 'commenter': 'commodo', 'type': 'User'}, {'comment_id': 450004700, 'comment_body': 'this error looks more like -ENODEV', 'comment_created': datetime.datetime(2020, 7, 6, 6, 19, 36, tzinfo=datetime.timezone.utc), 'commenter': 'commodo', 'type': 'User'}, {'comment_id': 450004980, 'comment_body': 'well, all these chip error checks look like they should return -ENODEV;', 'comment_created': datetime.datetime(2020, 7, 6, 6, 20, 16, tzinfo=datetime.timezone.utc), 'commenter': 'commodo', 'type': 'User'}, {'comment_id': 450006723, 'comment_body': ""i don't know what the correct approach would be here [for these settings];\r\nfor some settings it's the driver that should set a default value [on driver init], for other settings it's probably ok to have the default-on-reset value;\r\n\r\ni don't know if there is a general consensus on which is the more appropriate;\r\nmaybe upstream would tell us;\r\nbut just keep this in mind, when sending this upstream;\r\n\r\nfor now, this is fine from my side;"", 'comment_created': datetime.datetime(2020, 7, 6, 6, 24, 57, tzinfo=datetime.timezone.utc), 'commenter': 'commodo', 'type': 'User'}, {'comment_id': 450047695, 'comment_body': ""You're right but as I mentioned in a comment above (see pt. 2), the CS line toggles between the two successive 8b reads, in the current solution of `adxrs290_spi_read16b`, which would work for both _standby_ and _measurement_ mode. The datasheet says:\r\n\r\n> In standby mode, only single-address SPI transactions are performed, which includes reading from or writing to a single register, but does not include writing to or reading from several registers in one command.\r\n\r\nFrom the available SPI API, I previously tried `spi_w8r16` (in _measurement_ mode) for multiple bytes read but that didn't work as expected. From what I see in source code of [`drivers/spi/spi.c`](https://elixir.bootlin.com/linux/latest/source/drivers/spi/spi.c#L3865), I don't think it auto-increments to read the next address from the address provided, does it? (Or does the hardware do it?) This also brings to my next question of: how can one exercise multiple bytes read with one SPI command? The datasheet doesn't explicitly mention this. SPI timing diagram from ADXRS290's datasheet:\r\n\r\n![adxrs290_spi_timing_dia](https://user-images.githubusercontent.com/33180939/86569696-6f308980-bf8c-11ea-9660-e0b5c7760566.png)\r\n"", 'comment_created': datetime.datetime(2020, 7, 6, 7, 58, 2, tzinfo=datetime.timezone.utc), 'commenter': 'layman-n-ish', 'type': 'User'}, {'comment_id': 450048558, 'comment_body': ""Okay, I thought it'd be a good-to-have detail. Will remove in v2."", 'comment_created': datetime.datetime(2020, 7, 6, 7, 59, 56, tzinfo=datetime.timezone.utc), 'commenter': 'layman-n-ish', 'type': 'User'}, {'comment_id': 450048869, 'comment_body': 'Oh yes! Thanks for pointing out. Will address in v2.', 'comment_created': datetime.datetime(2020, 7, 6, 8, 0, 26, tzinfo=datetime.timezone.utc), 'commenter': 'layman-n-ish', 'type': 'User'}, {'comment_id': 450049759, 'comment_body': 'Great point! Will keep this in mind when sending it to upstream. Thanks.', 'comment_created': datetime.datetime(2020, 7, 6, 8, 2, 12, tzinfo=datetime.timezone.utc), 'commenter': 'layman-n-ish', 'type': 'User'}, {'comment_id': 450051655, 'comment_body': ""but if you use `spi_sync_transfer()` you can set a `cs_change = 1` parameter between 2 transfers;\r\nso, you could define 2 transfers and one toggles the CS change;\r\nit's a slightly more common approach;"", 'comment_created': datetime.datetime(2020, 7, 6, 8, 6, 5, tzinfo=datetime.timezone.utc), 'commenter': 'commodo', 'type': 'User'}, {'comment_id': 450056179, 'comment_body': ""Yes, I've seen that in a few drivers. I'll do that then! \r\n\r\nSorry; one more thing - the current `adxrs290_spi_read16b` function should still be present for me to read 16b in _standby_ mode, right? Depending on my current state (_standby_ or _measurement_), I'll have to call a corresponding read16b function - sort of like dynamic dispatch. Am I going in the right direction?"", 'comment_created': datetime.datetime(2020, 7, 6, 8, 14, 52, tzinfo=datetime.timezone.utc), 'commenter': 'layman-n-ish', 'type': 'User'}, {'comment_id': 450058457, 'comment_body': ""Oh wait, I think I misread your previous comment. You want me to have 2 different functions with SPI transfers to read 16b - one which doesn't toggle the CS (to use in _measurement_ mode) and one which does (to use in _standby_ mode). Did I infer it correctly this time?"", 'comment_created': datetime.datetime(2020, 7, 6, 8, 19, 2, tzinfo=datetime.timezone.utc), 'commenter': 'layman-n-ish', 'type': 'User'}, {'comment_id': 450061912, 'comment_body': ""> I don't think it auto-increments to read the next address from the address provided, does it? (Or does the hardware do it?) This also brings to my next question of: how can one exercise multiple bytes read with one SPI command? The datasheet doesn't explicitly mention this. SPI timing diagram from ADXRS290's datasheet:\r\n\r\nI forgot to answer this part initially: so, the SPI framework should handle most things here. Maybe give it a try and read and see how it works.\r\n\r\nIf there some differences between measurement mode and they aren't too big, you could implement a:\r\n```\r\nstatic int adxrs290_spi_read16b(... bool standby)\r\n{\r\n     if (standby) {\r\n\r\n     } else {\r\n\r\n     }\r\n}\r\n```\r\n\r\nand call it with adxrs290_spi_read16b(..., false) for measurement mode;"", 'comment_created': datetime.datetime(2020, 7, 6, 8, 25, 4, tzinfo=datetime.timezone.utc), 'commenter': 'commodo', 'type': 'User'}, {'comment_id': 450063526, 'comment_body': 'Got it! This clears a lot of things; thanks. Will address this in v2. ', 'comment_created': datetime.datetime(2020, 7, 6, 8, 27, 48, tzinfo=datetime.timezone.utc), 'commenter': 'layman-n-ish', 'type': 'User'}, {'comment_id': 450125386, 'comment_body': ""No need to set `val2` if returning `IIO_VAL_INT`. Also, I didn't really check the math here but make sure that things are reported in the expected units (as specified [here](https://elixir.bootlin.com/linux/latest/source/Documentation/ABI/testing/sysfs-bus-iio)) for angular velocity and temperature."", 'comment_created': datetime.datetime(2020, 7, 6, 10, 18, 17, tzinfo=datetime.timezone.utc), 'commenter': 'nunojsa', 'type': 'User'}, {'comment_id': 450148567, 'comment_body': 'You also mentioned that we have 12 LSB/deg sensitivity for temperature... Having it to 0.1°C seems like a rough approximation.', 'comment_created': datetime.datetime(2020, 7, 6, 11, 7, 30, tzinfo=datetime.timezone.utc), 'commenter': 'nunojsa', 'type': 'User'}, {'comment_id': 450149145, 'comment_body': 'It looks like `cmd` can be a `const u8`. It is a good practice to define things as `const` when they are... ', 'comment_created': datetime.datetime(2020, 7, 6, 11, 8, 51, tzinfo=datetime.timezone.utc), 'commenter': 'nunojsa', 'type': 'User'}, {'comment_id': 450157251, 'comment_body': ""Okay, will remove the part where I set `*val2` while returning `IIO_VAL_INT` in v2. \r\n\r\nYes, I've made sure the units are appropriately set as dictated in the ABI."", 'comment_created': datetime.datetime(2020, 7, 6, 11, 27, 19, tzinfo=datetime.timezone.utc), 'commenter': 'layman-n-ish', 'type': 'User'}, {'comment_id': 450158019, 'comment_body': ""Sorry, the sensitivity is 10 LSB/deg Celsius for temperature. There's a typo in the commit message - will fix it in v2. Thanks for pointing it out! :)"", 'comment_created': datetime.datetime(2020, 7, 6, 11, 28, 56, tzinfo=datetime.timezone.utc), 'commenter': 'layman-n-ish', 'type': 'User'}, {'comment_id': 450158609, 'comment_body': ""You're right. I'll _constify_ wherever possible in v2. Thanks for the tip!"", 'comment_created': datetime.datetime(2020, 7, 6, 11, 30, 19, tzinfo=datetime.timezone.utc), 'commenter': 'layman-n-ish', 'type': 'User'}, {'comment_id': 450160471, 'comment_body': 'Ok, then nothing to add. But yes, please update the commit message...', 'comment_created': datetime.datetime(2020, 7, 6, 11, 34, 27, tzinfo=datetime.timezone.utc), 'commenter': 'nunojsa', 'type': 'User'}, {'comment_id': 450240673, 'comment_body': 'This could be done with a `adxrs290_spi_reg_read` function or `adxrs290_spi_read8b` function. Current usage is for now the only usage, but you might have more in the future.', 'comment_created': datetime.datetime(2020, 7, 6, 14, 0, 13, tzinfo=datetime.timezone.utc), 'commenter': 'buha', 'type': 'User'}, {'comment_id': 450638047, 'comment_body': ""I'm not entirely sure if I understand what you mean here. Do you mean to replace `adxrs290_get_3db_freq()` with a generic `adxrs290_spi_read8b()` function? But we already have SPI core's available API - `spi_w8r8()` - to do so.\r\n\r\nIf I'm wrong in inferring what you meant, could you please elaborate your point?"", 'comment_created': datetime.datetime(2020, 7, 7, 6, 29, 20, tzinfo=datetime.timezone.utc), 'commenter': 'layman-n-ish', 'type': 'User'}, {'comment_id': 450667938, 'comment_body': ""I misunderstood the point of this function, i now checked the datasheet and i understand you are doing a very specific thing here which won't be used elsewhere so there is no point in code reuse."", 'comment_created': datetime.datetime(2020, 7, 7, 7, 37, 24, tzinfo=datetime.timezone.utc), 'commenter': 'buha', 'type': 'User'}, {'comment_id': 450676615, 'comment_body': 'I am wondering how did this previously work (cpol=0, cpha=0 I assume) without junk readings ?', 'comment_created': datetime.datetime(2020, 7, 7, 7, 54, 18, tzinfo=datetime.timezone.utc), 'commenter': 'buha', 'type': 'User'}, {'comment_id': 450678243, 'comment_body': ""It didn't, haha. The skeleton driver back was too naive to interface with SPI and I hadn't read the datasheet in detail to realise this back then."", 'comment_created': datetime.datetime(2020, 7, 7, 7, 57, 23, tzinfo=datetime.timezone.utc), 'commenter': 'layman-n-ish', 'type': 'User'}, {'comment_id': 450702135, 'comment_body': 'That makes sense !', 'comment_created': datetime.datetime(2020, 7, 7, 8, 39, 46, tzinfo=datetime.timezone.utc), 'commenter': 'buha', 'type': 'User'}, {'comment_id': 452665124, 'comment_body': ""I think you might get some comments about formatting here. Typical thing that it's done is to align parameters 2, 3 ... with the first character of the first parameter like:\r\n```\r\nlpf_idx = adxrs290_find_best_match(adxrs290_lpf_3db_freq_tbl,\r\ntab tab tab ... space space space  ARRAY_SIZE(adxrs290_lpf_3db_freq_tbl),\r\n...\r\n```"", 'comment_created': datetime.datetime(2020, 7, 10, 7, 15, 17, tzinfo=datetime.timezone.utc), 'commenter': 'buha', 'type': 'User'}, {'comment_id': 452665732, 'comment_body': 'Btw, general question, did you run checkpatch.pl ?', 'comment_created': datetime.datetime(2020, 7, 10, 7, 16, 37, tzinfo=datetime.timezone.utc), 'commenter': 'buha', 'type': 'User'}, {'comment_id': 452668025, 'comment_body': 'I previously aligned it as you pointed out but then the line exceeds the 80 characters conventional rule.\r\n\r\nYes, I ran `./scripts/checkpatch.pl -f drivers/iio/gyro/adxrs290.c` on this; gives me no warning on this line.\r\n\r\n', 'comment_created': datetime.datetime(2020, 7, 10, 7, 21, 31, tzinfo=datetime.timezone.utc), 'commenter': 'layman-n-ish', 'type': 'User'}, {'comment_id': 452673411, 'comment_body': 'Why would this be a union ? On SPI you transfer on MOSI and MISO at the same time hence using both buffers at the same time so you need separate memory areas.\r\n\r\nYou also transfer the same amount of data so their .len in spi_transfer below should be equal.\r\n\r\nI would have a tx[3] and rx[3] in the scenario where you read 2 consecutive registers (1 byte address, reg 1, reg 2).', 'comment_created': datetime.datetime(2020, 7, 10, 7, 33, 14, tzinfo=datetime.timezone.utc), 'commenter': 'buha', 'type': 'User'}, {'comment_id': 452674071, 'comment_body': 'Common practice is to put these buffers right at the end of the device struct and append the first buffer with `____cacheline_aligned` like you did for the union.', 'comment_created': datetime.datetime(2020, 7, 10, 7, 34, 53, tzinfo=datetime.timezone.utc), 'commenter': 'buha', 'type': 'User'}, {'comment_id': 452678808, 'comment_body': 'The timing diagram threw me off to the direction of using a `union` (quite a few drivers do it too) - the data in rx can be ignored until the tx buffer has been shifted out. Only after the tx transfer has been completed, the data in the rx buffer should be ""recorded"", which is what I do while initialising the `struct spi_transfer`.\r\n![adxrs290_spi_timing_dia](https://user-images.githubusercontent.com/33180939/87129272-ab2a5e00-c2ae-11ea-9fcd-06ecfd629e93.png)\r\n', 'comment_created': datetime.datetime(2020, 7, 10, 7, 45, 5, tzinfo=datetime.timezone.utc), 'commenter': 'layman-n-ish', 'type': 'User'}, {'comment_id': 452680014, 'comment_body': 'Sure, will add the buffers at the end of `struct adxrs290_state` in v3.', 'comment_created': datetime.datetime(2020, 7, 10, 7, 47, 43, tzinfo=datetime.timezone.utc), 'commenter': 'layman-n-ish', 'type': 'User'}, {'comment_id': 452684188, 'comment_body': 'Example of a driver (ad7292) which uses a `union` in a similar way: [click here](https://github.com/analogdevicesinc/linux/blob/rpi-4.14.y_GSOC_2019/drivers/iio/adc/ad7292.c#L96). ', 'comment_created': datetime.datetime(2020, 7, 10, 7, 56, 11, tzinfo=datetime.timezone.utc), 'commenter': 'layman-n-ish', 'type': 'User'}, {'comment_id': 452730565, 'comment_body': ""I think that rule was anyhow not mandatory in cases where it's impossible to apply like this one.\r\nAlso, recently, there was a belief system shift, I guess in newer kernels checkpatch stops checking this :D But again, I can't be 100% sure what the upstream will tell you...\r\nhttps://linux.slashdot.org/story/20/05/31/211211/linus-torvalds-argues-against-80-column-line-length-coding-style-as-linux-kernel-deprecates-it"", 'comment_created': datetime.datetime(2020, 7, 10, 9, 25, 41, tzinfo=datetime.timezone.utc), 'commenter': 'buha', 'type': 'User'}, {'comment_id': 452750353, 'comment_body': ""Interesting article! I agree with the points Linus promotes too (which is why I left [this](https://github.com/layman-n-ish/linux/blob/rpi-4.19.y_adxrs290/drivers/iio/gyro/adxrs290.c#L264) line for better readability & for 'grep' to work even though it generates a warning). I'll align the parameters with the first parameter in v3."", 'comment_created': datetime.datetime(2020, 7, 10, 10, 4, 50, tzinfo=datetime.timezone.utc), 'commenter': 'layman-n-ish', 'type': 'User'}, {'comment_id': 453504468, 'comment_body': 'as discussed offline, this looks ok in your particular situation, marking as resolved', 'comment_created': datetime.datetime(2020, 7, 13, 9, 7, 26, tzinfo=datetime.timezone.utc), 'commenter': 'buha', 'type': 'User'}, {'comment_id': 453690607, 'comment_body': 'Could this masking operation be a little more documented ? Maybe a #define with proper name or comment.', 'comment_created': datetime.datetime(2020, 7, 13, 14, 28, 32, tzinfo=datetime.timezone.utc), 'commenter': 'buha', 'type': 'User'}, {'comment_id': 453691936, 'comment_body': 'why not abs() ?', 'comment_created': datetime.datetime(2020, 7, 13, 14, 30, 20, tzinfo=datetime.timezone.utc), 'commenter': 'buha', 'type': 'User'}, {'comment_id': 453694187, 'comment_body': ""There seems to be a strong preference in linux to use FIELD_GET/FIELD_PREP so maybe it would be good to see how it's typically done and try to comply."", 'comment_created': datetime.datetime(2020, 7, 13, 14, 33, 26, tzinfo=datetime.timezone.utc), 'commenter': 'buha', 'type': 'User'}, {'comment_id': 453832039, 'comment_body': 'Yes, makes sense. Addressed in v4.', 'comment_created': datetime.datetime(2020, 7, 13, 18, 2, 29, tzinfo=datetime.timezone.utc), 'commenter': 'layman-n-ish', 'type': 'User'}, {'comment_id': 453832715, 'comment_body': 'I don\'t remember why I chose this way; using `abs()` is obviously much ""cleaner"". Acknowledged in v4.', 'comment_created': datetime.datetime(2020, 7, 13, 18, 3, 37, tzinfo=datetime.timezone.utc), 'commenter': 'layman-n-ish', 'type': 'User'}, {'comment_id': 453834035, 'comment_body': ""Sorry, wasn't aware of those macros. They seem very convenient. Incorporated those in v4. Thanks for the review! :D"", 'comment_created': datetime.datetime(2020, 7, 13, 18, 5, 53, tzinfo=datetime.timezone.utc), 'commenter': 'layman-n-ish', 'type': 'User'}]","[{'commit_sha': '9b55ef2d8dfde20052b9687c9035f2a8dfe8f058', 'committer_username': 'layman-n-ish', 'committer_name': 'Nishant Malpani', 'committer_email': 'Nishant.Malpani@iiitb.org', 'commit_date': datetime.datetime(2017, 10, 28, 15, 22, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fbdbdd8fd735ab64970ed6f62078c69aa506566f', 'committer_username': 'layman-n-ish', 'committer_name': 'Nishant Malpani', 'committer_email': 'Nishant.Malpani@iiitb.org', 'commit_date': datetime.datetime(2017, 10, 28, 15, 22, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c1bb35f2faa503318796a7bcab6bb65f48294ca', 'committer_username': 'layman-n-ish', 'committer_name': 'Nishant Malpani', 'committer_email': 'Nishant.Malpani@iiitb.org', 'commit_date': datetime.datetime(2017, 10, 28, 15, 22, 9, tzinfo=datetime.timezone.utc)}]",Nishant Malpani,33180939,Nishant.Malpani@iiitb.org,User,,27,,10,40
470305478,iio: gyro: adxrs290: Add triggered buffer support,"Provide a way for continuous data capture by setting up buffer support. The
data ready signal exposed at the SYNC pin of the ADXRS290 is exploited as
a hardware interrupt which triggers to fill the buffer.

Triggered buffer setup was tested with both hardware trigger (DATA_RDY) and
software triggers (sysfs-trig & hrtimer).

Also, extend support to read/write byte data from/to the device using
debugfs interface.

Signed-off-by: Nishant Malpani <nish.malpani25@gmail.com>",True,1131,https://api.github.com/repos/analogdevicesinc/linux/pulls/1131,https://github.com/analogdevicesinc/linux/pull/1131,closed,294,14,4,5,2,24,0,0,[],2020-08-19 17:15:40+00:00,2020-08-25 05:31:43+00:00,476163.0,"5 days, 12:16:03","[{'comment_id': 473806917, 'comment_body': 'indentation looks weird here', 'comment_created': datetime.datetime(2020, 8, 20, 9, 23, 28, tzinfo=datetime.timezone.utc), 'commenter': 'commodo', 'type': 'User'}, {'comment_id': 473807435, 'comment_body': 'also, should this buffer be marked with `____cacheline_aligned` ?', 'comment_created': datetime.datetime(2020, 8, 20, 9, 24, 2, tzinfo=datetime.timezone.utc), 'commenter': 'commodo', 'type': 'User'}, {'comment_id': 473809509, 'comment_body': 'this seems to toggle irespective of mode;\r\nshould this be more of an if() else() or switch statement?\r\nwhere \r\n```\r\nswitch (mode) {\r\nif (MODE1)\r\n      val |= ADXRS290_MEASUREMENT;\r\n       break;\r\ncase MODE2:\r\n      val &= ~ADXRS290_MEASUREMENT;\r\n       break;\r\ndefault:\r\n       ret = -EINVAL;\r\n        goto done;\r\n}\r\n```', 'comment_created': datetime.datetime(2020, 8, 20, 9, 26, 32, tzinfo=datetime.timezone.utc), 'commenter': 'commodo', 'type': 'User'}, {'comment_id': 473810310, 'comment_body': 'this looks like iio reg debugfs support;\r\ntypically goes into a separate patch', 'comment_created': datetime.datetime(2020, 8, 20, 9, 27, 35, tzinfo=datetime.timezone.utc), 'commenter': 'commodo', 'type': 'User'}, {'comment_id': 473812214, 'comment_body': 'this could be `return ret`; directly; ', 'comment_created': datetime.datetime(2020, 8, 20, 9, 29, 59, tzinfo=datetime.timezone.utc), 'commenter': 'commodo', 'type': 'User'}, {'comment_id': 473815214, 'comment_body': 'instead of adding these `goto` labels you coudl add a `devm_add_action_or_reset()` hook somewhere and that would get called on the error path and on the remove hook (meaning, you could skip not adding a `adxrs290_remove()` hook)', 'comment_created': datetime.datetime(2020, 8, 20, 9, 33, 38, tzinfo=datetime.timezone.utc), 'commenter': 'commodo', 'type': 'User'}, {'comment_id': 473816725, 'comment_body': 'you could move this block into the `adxrs290_probe_trigger()` code; make it an early return:\r\n```\r\nstatic int adxrs290_probe_trigger() {\r\n    if (!spi->irq) {\r\n          dev_info(&spi->dev, ""no irq, using polling\\n"");\r\n           return 0;\r\n   }\r\n}\r\n```', 'comment_created': datetime.datetime(2020, 8, 20, 9, 35, 21, tzinfo=datetime.timezone.utc), 'commenter': 'commodo', 'type': 'User'}, {'comment_id': 473817719, 'comment_body': ""this looks new;\r\nit's more of a bug-fix if this is being added now;"", 'comment_created': datetime.datetime(2020, 8, 20, 9, 36, 28, tzinfo=datetime.timezone.utc), 'commenter': 'commodo', 'type': 'User'}, {'comment_id': 473818551, 'comment_body': ""this may be my fault a bit; on the upstream kernel, this assignment isn't needed;\r\non anything older than 5.7 [or 5.8] , this assignment is required;"", 'comment_created': datetime.datetime(2020, 8, 20, 9, 37, 28, tzinfo=datetime.timezone.utc), 'commenter': 'commodo', 'type': 'User'}, {'comment_id': 473939658, 'comment_body': '> indentation looks weird here\r\n\r\nTrue but I wanted the `buffer` to align with the other member names on the top. Do you still think I should fix it?', 'comment_created': datetime.datetime(2020, 8, 20, 12, 42, 18, tzinfo=datetime.timezone.utc), 'commenter': 'layman-n-ish', 'type': 'User'}, {'comment_id': 473941287, 'comment_body': ""> also, should this buffer be marked with ____cacheline_aligned?\r\n\r\nUmm, I don't think so. I referred to Jonathon's recent patches upstream which fixes alignment issues and data leakage due to such local buffers and he did something similar. Ex: [1] & [2]\r\n\r\n[1] https://patchwork.kernel.org/patch/11678695/\r\n[2] https://patchwork.kernel.org/patch/11678693/"", 'comment_created': datetime.datetime(2020, 8, 20, 12, 45, 13, tzinfo=datetime.timezone.utc), 'commenter': 'layman-n-ish', 'type': 'User'}, {'comment_id': 473942262, 'comment_body': 'Okay, will do in v2.', 'comment_created': datetime.datetime(2020, 8, 20, 12, 46, 54, tzinfo=datetime.timezone.utc), 'commenter': 'layman-n-ish', 'type': 'User'}, {'comment_id': 473945388, 'comment_body': ""You're right; will ack in v2."", 'comment_created': datetime.datetime(2020, 8, 20, 12, 52, 8, tzinfo=datetime.timezone.utc), 'commenter': 'layman-n-ish', 'type': 'User'}, {'comment_id': 473946466, 'comment_body': ""Oh wow, I wasn't aware of this. Thanks. Will add in v2."", 'comment_created': datetime.datetime(2020, 8, 20, 12, 53, 51, tzinfo=datetime.timezone.utc), 'commenter': 'layman-n-ish', 'type': 'User'}, {'comment_id': 473946743, 'comment_body': 'Alright. Will do so in v2.', 'comment_created': datetime.datetime(2020, 8, 20, 12, 54, 19, tzinfo=datetime.timezone.utc), 'commenter': 'layman-n-ish', 'type': 'User'}, {'comment_id': 473948360, 'comment_body': 'Yeah, my bad I missed this previously; I noticed this after sending patches upstream but I thought I should wait and add it with my triggered-buffer patches. Are you saying I should first send a bug-fix patch before sending triggered-buffer patches? And here, should I add this in a separate commit first and then include the triggered-buffer commits?', 'comment_created': datetime.datetime(2020, 8, 20, 12, 56, 53, tzinfo=datetime.timezone.utc), 'commenter': 'layman-n-ish', 'type': 'User'}, {'comment_id': 473949712, 'comment_body': 'you can add it to this series as well;\r\nbut for upstream, make sure to add a Fixes: tag;\r\nthis will go through a Fixes route into the kernel', 'comment_created': datetime.datetime(2020, 8, 20, 12, 59, 11, tzinfo=datetime.timezone.utc), 'commenter': 'commodo', 'type': 'User'}, {'comment_id': 473950597, 'comment_body': ""Yes, you're right. I found this the hard way; a day of debugging on why my trigger fails to attach to the device ( by echoing to `trigger/current_trigger`) - I knew it had to do something with the `iio_trigger_validate_own_device` hook and that's how I got to know that the `indio_dev->dev.parent` was not set by the core..."", 'comment_created': datetime.datetime(2020, 8, 20, 13, 0, 36, tzinfo=datetime.timezone.utc), 'commenter': 'layman-n-ish', 'type': 'User'}, {'comment_id': 473951173, 'comment_body': ""> > indentation looks weird here\r\n> \r\n> True but I wanted the `buffer` to align with the other member names on the top. Do you still think I should fix it?\r\n\r\nno idea really; you can leave it as-is here;\r\nbut Jonathan may notice it, and mention it;\r\n\r\n\r\n\r\n\r\n> > also, should this buffer be marked with ____cacheline_aligned?\r\n> \r\n> Umm, I don't think so. I referred to Jonathon's recent patches upstream which fixes alignment issues and data leakage due to such local buffers and he did something similar. Ex: [1] & [2]\r\n> \r\n> [1] https://patchwork.kernel.org/patch/11678695/\r\n> [2] https://patchwork.kernel.org/patch/11678693/\r\n\r\nok; no need to add ____cacheline_aligned for now; i guess these suggestions change sometimes;"", 'comment_created': datetime.datetime(2020, 8, 20, 13, 1, 31, tzinfo=datetime.timezone.utc), 'commenter': 'commodo', 'type': 'User'}, {'comment_id': 473953100, 'comment_body': ""Ah, you're right; I toggle without checking if the `mode` is within the values I expect. Will add switch-case statements in v2."", 'comment_created': datetime.datetime(2020, 8, 20, 13, 4, 43, tzinfo=datetime.timezone.utc), 'commenter': 'layman-n-ish', 'type': 'User'}, {'comment_id': 473970040, 'comment_body': ""Okay, I'll look out for Jonathan's response. Marking it resolved here. Thanks!"", 'comment_created': datetime.datetime(2020, 8, 20, 13, 26, 13, tzinfo=datetime.timezone.utc), 'commenter': 'layman-n-ish', 'type': 'User'}, {'comment_id': 473972664, 'comment_body': 'Sure but should it be a separate patch/commit; prior to the triggered-buffer patches/commits?', 'comment_created': datetime.datetime(2020, 8, 20, 13, 28, 46, tzinfo=datetime.timezone.utc), 'commenter': 'layman-n-ish', 'type': 'User'}, {'comment_id': 474009100, 'comment_body': 'yes', 'comment_created': datetime.datetime(2020, 8, 20, 14, 4, 50, tzinfo=datetime.timezone.utc), 'commenter': 'commodo', 'type': 'User'}, {'comment_id': 476185180, 'comment_body': 'when sending this upstream, the commit has for the Fixes tag should be the one in the upstream tree;\r\notherwise this is perfect as-is', 'comment_created': datetime.datetime(2020, 8, 25, 5, 24, 54, tzinfo=datetime.timezone.utc), 'commenter': 'commodo', 'type': 'User'}]","[{'commit_sha': '605e1d6fa32956ffb76ec87744d389dd83ff6fef', 'committer_username': 'layman-n-ish', 'committer_name': 'Nishant Malpani', 'committer_email': 'Nishant.Malpani@iiitb.org', 'commit_date': datetime.datetime(2017, 10, 28, 15, 22, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c7f2cf099cab86b41a70f8523719458b40f69e3c', 'committer_username': 'layman-n-ish', 'committer_name': 'Nishant Malpani', 'committer_email': 'Nishant.Malpani@iiitb.org', 'commit_date': datetime.datetime(2017, 10, 28, 15, 22, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '324bf3b43906c2c5302e25ef3d505cdf89025b4d', 'committer_username': 'layman-n-ish', 'committer_name': 'Nishant Malpani', 'committer_email': 'Nishant.Malpani@iiitb.org', 'commit_date': datetime.datetime(2017, 10, 28, 15, 22, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d65cd080e5e6323b77e632eb027e7186366e049', 'committer_username': 'layman-n-ish', 'committer_name': 'Nishant Malpani', 'committer_email': 'Nishant.Malpani@iiitb.org', 'commit_date': datetime.datetime(2017, 10, 28, 15, 22, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b350993a3f086722d2950669999b748e8cec5aea', 'committer_username': 'layman-n-ish', 'committer_name': 'Nishant Malpani', 'committer_email': 'Nishant.Malpani@iiitb.org', 'commit_date': datetime.datetime(2017, 10, 28, 15, 22, 9, tzinfo=datetime.timezone.utc)}]",Nishant Malpani,33180939,Nishant.Malpani@iiitb.org,User,,27,,10,40



