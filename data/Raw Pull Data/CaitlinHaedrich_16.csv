pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
657702206,Added Binder setup files,"I'm just opening this pull request draft to get the ball rolling for my Google Summer of Code project. As part of the GRASS and Jupyter Notebook project, we discussed adding setup files to run binder.",True,1603,https://api.github.com/repos/OSGeo/grass/pulls/1603,https://github.com/OSGeo/grass/pull/1603,closed,102,0,4,11,6,11,2,0,"[{'name': 'enhancement'}, {'name': 'gsoc'}]",2021-05-30 13:36:23+00:00,2021-06-10 03:31:00+00:00,914077.0,"10 days, 13:54:37","[{'comment_id': 642126090, 'comment_body': 'This seems to allway build the official master branch. So, it wil not work for testing PRs, right?\r\n\r\nI tried to find some info on how to solve this but did not come across a solution that is known to work, but you could try if it is possible in the postbuild script to:\r\n\r\n1 fetch the url of the current repo:\r\n`git config --get remote.origin.url`\r\n\r\nand\r\n2. use that to clone the code from which GRASS is supposed to be compiled...\r\n\r\nBut maybe @wenzeslaus has some more clear ideas about this...\r\n', 'comment_created': datetime.datetime(2021, 5, 30, 20, 43, 4, tzinfo=datetime.timezone.utc), 'commenter': 'ninsbl', 'type': 'User'}, {'comment_id': 642183951, 'comment_body': ""Just removing all the `cd`s, `mkdir`s and clone should be enough. Binder actually puts the repo content to what is the current directory when the Docker container starts. This makes it simply use always the current code whatever is the the current one, master branch in upstream, branch on a fork, ...\r\n\r\nYou can test that by going to Binder, the URL is (obtained by filling out mybinder.org):\r\n\r\n<https://mybinder.org/v2/gh/chaedri/grass/binder>\r\n\r\n@ninsbl I'm not sure what you are aiming at, but if I understand correctly, if you can do `git config --get remote.origin.url`, you probably have the repo clone already, so you don't need to do it at all."", 'comment_created': datetime.datetime(2021, 5, 31, 3, 8, 15, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 642186445, 'comment_body': 'As GitHub Changes view says, no new line at the end of file.', 'comment_created': datetime.datetime(2021, 5, 31, 3, 19, 18, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 642187884, 'comment_body': 'Move the pil and ply dependencies here from the apt file. Delete numpy there. Test if the packages are there, e.g., with (in the notebook):\r\n\r\n```\r\n!grass --tmp-location XY --exec python -c ""import matplotlib""\r\n```', 'comment_created': datetime.datetime(2021, 5, 31, 3, 25, 57, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 642342167, 'comment_body': '@wenzeslaus , thanks great, I was not aware of how this is handled in binder. I just saw the line that clones the official repo which whould not result in the behavior we discused. So, if compiling from current directory works, that is great and please disregard my suggestion of `git config`...', 'comment_created': datetime.datetime(2021, 5, 31, 9, 14, 30, tzinfo=datetime.timezone.utc), 'commenter': 'ninsbl', 'type': 'User'}, {'comment_id': 642610256, 'comment_body': ""When I try to move the pil and ply dependencies, I get an error when I try to build binder:\r\n\r\n'''\r\nERROR: Could not find a version that satisfies the requirement pil\r\nERROR: No matching distribution found for pil\r\n'''\r\n\r\nFrom my googling, it seems like PIL has to be installed first. Should it remain in the apt file?"", 'comment_created': datetime.datetime(2021, 5, 31, 17, 21, 54, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 642622639, 'comment_body': '```suggestion\r\nln -s $HOME/grass/bin.*/grass* $HOME/.local/bin/grass\r\n```', 'comment_created': datetime.datetime(2021, 5, 31, 18, 0, 44, tzinfo=datetime.timezone.utc), 'commenter': 'ninsbl', 'type': 'User'}, {'comment_id': 642653880, 'comment_body': ""What is in the apt file goes to system Python and is not available in the notebook or GRASS when I test in the notebook using the above (which is using conda in this default Binder setup). You can try to confirm it. If that holds, apt file is not useful for Python packages. And python and python-dev should not be there either (I'm not even sure how python-dev got there, maybe to compile numpy or something).\r\n\r\nWhat you import as pil, is installed with its proper name PIL. The requirements file goes to this repo: https://pypi.org/project/PIL/. So try PIL."", 'comment_created': datetime.datetime(2021, 5, 31, 19, 42, 20, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 642654511, 'comment_body': '@chaedri to test this use `!grass --version` in the notebook or `grass --version` in a shell you get in the JupyterLab.', 'comment_created': datetime.datetime(2021, 5, 31, 19, 44, 47, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 647929990, 'comment_body': 'The source code is directly in $HOME and the `bin...` directory resulting from the build is in the source code.\r\n\r\n```suggestion\r\nln -s $HOME/bin.*/grass* $HOME/.local/bin/grass\r\n```', 'comment_created': datetime.datetime(2021, 6, 9, 2, 59, 50, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 647930727, 'comment_body': 'The first `grass` part is still one dir extra here even in the suggestion.', 'comment_created': datetime.datetime(2021, 6, 9, 3, 2, 8, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}]","[{'commit_sha': '4b6db7dafe4d063a5c39c7ce7fa140c316e05d6d', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f041567b0266111fd53c3fccc08a0ef23f38c580', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f77e8554a5df77a7b7a0d672f03b0ddf5d2d7e0', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'acb88cc429aa12912da0b1eff696e8f28a135a19', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '271d50d9c1434c25ccbd7c0b99236822c5949f08', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '92e9cc91521f4de6c1f8103fb2ec29bdb6c9d9a3', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca0dbe91b145657ca996d8b3434df1f552c685ac', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '86cc233cf34e0e8e80b28fbe7ae022ee21a23c00', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b410973e50c9a3122d8ed6935d104a0a531b47cf', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '55e70b85bfa05d1cc8482c349a587ea79c2866b0', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1119c24f9fe0dc6834029e0de84f65d9dcce5c89', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}]",Caitlin Haedrich,69856275,,User,,31,,5,13
657702206,Added Binder setup files,"I'm just opening this pull request draft to get the ball rolling for my Google Summer of Code project. As part of the GRASS and Jupyter Notebook project, we discussed adding setup files to run binder.",True,1603,https://api.github.com/repos/OSGeo/grass/pulls/1603,https://github.com/OSGeo/grass/pull/1603,closed,102,0,4,11,6,11,2,0,"[{'name': 'enhancement'}, {'name': 'gsoc'}]",2021-05-30 13:36:23+00:00,2021-06-10 03:31:00+00:00,914077.0,"10 days, 13:54:37","[{'comment_id': 642126090, 'comment_body': 'This seems to allway build the official master branch. So, it wil not work for testing PRs, right?\r\n\r\nI tried to find some info on how to solve this but did not come across a solution that is known to work, but you could try if it is possible in the postbuild script to:\r\n\r\n1 fetch the url of the current repo:\r\n`git config --get remote.origin.url`\r\n\r\nand\r\n2. use that to clone the code from which GRASS is supposed to be compiled...\r\n\r\nBut maybe @wenzeslaus has some more clear ideas about this...\r\n', 'comment_created': datetime.datetime(2021, 5, 30, 20, 43, 4, tzinfo=datetime.timezone.utc), 'commenter': 'ninsbl', 'type': 'User'}, {'comment_id': 642183951, 'comment_body': ""Just removing all the `cd`s, `mkdir`s and clone should be enough. Binder actually puts the repo content to what is the current directory when the Docker container starts. This makes it simply use always the current code whatever is the the current one, master branch in upstream, branch on a fork, ...\r\n\r\nYou can test that by going to Binder, the URL is (obtained by filling out mybinder.org):\r\n\r\n<https://mybinder.org/v2/gh/chaedri/grass/binder>\r\n\r\n@ninsbl I'm not sure what you are aiming at, but if I understand correctly, if you can do `git config --get remote.origin.url`, you probably have the repo clone already, so you don't need to do it at all."", 'comment_created': datetime.datetime(2021, 5, 31, 3, 8, 15, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 642186445, 'comment_body': 'As GitHub Changes view says, no new line at the end of file.', 'comment_created': datetime.datetime(2021, 5, 31, 3, 19, 18, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 642187884, 'comment_body': 'Move the pil and ply dependencies here from the apt file. Delete numpy there. Test if the packages are there, e.g., with (in the notebook):\r\n\r\n```\r\n!grass --tmp-location XY --exec python -c ""import matplotlib""\r\n```', 'comment_created': datetime.datetime(2021, 5, 31, 3, 25, 57, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 642342167, 'comment_body': '@wenzeslaus , thanks great, I was not aware of how this is handled in binder. I just saw the line that clones the official repo which whould not result in the behavior we discused. So, if compiling from current directory works, that is great and please disregard my suggestion of `git config`...', 'comment_created': datetime.datetime(2021, 5, 31, 9, 14, 30, tzinfo=datetime.timezone.utc), 'commenter': 'ninsbl', 'type': 'User'}, {'comment_id': 642610256, 'comment_body': ""When I try to move the pil and ply dependencies, I get an error when I try to build binder:\r\n\r\n'''\r\nERROR: Could not find a version that satisfies the requirement pil\r\nERROR: No matching distribution found for pil\r\n'''\r\n\r\nFrom my googling, it seems like PIL has to be installed first. Should it remain in the apt file?"", 'comment_created': datetime.datetime(2021, 5, 31, 17, 21, 54, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 642622639, 'comment_body': '```suggestion\r\nln -s $HOME/grass/bin.*/grass* $HOME/.local/bin/grass\r\n```', 'comment_created': datetime.datetime(2021, 5, 31, 18, 0, 44, tzinfo=datetime.timezone.utc), 'commenter': 'ninsbl', 'type': 'User'}, {'comment_id': 642653880, 'comment_body': ""What is in the apt file goes to system Python and is not available in the notebook or GRASS when I test in the notebook using the above (which is using conda in this default Binder setup). You can try to confirm it. If that holds, apt file is not useful for Python packages. And python and python-dev should not be there either (I'm not even sure how python-dev got there, maybe to compile numpy or something).\r\n\r\nWhat you import as pil, is installed with its proper name PIL. The requirements file goes to this repo: https://pypi.org/project/PIL/. So try PIL."", 'comment_created': datetime.datetime(2021, 5, 31, 19, 42, 20, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 642654511, 'comment_body': '@chaedri to test this use `!grass --version` in the notebook or `grass --version` in a shell you get in the JupyterLab.', 'comment_created': datetime.datetime(2021, 5, 31, 19, 44, 47, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 647929990, 'comment_body': 'The source code is directly in $HOME and the `bin...` directory resulting from the build is in the source code.\r\n\r\n```suggestion\r\nln -s $HOME/bin.*/grass* $HOME/.local/bin/grass\r\n```', 'comment_created': datetime.datetime(2021, 6, 9, 2, 59, 50, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 647930727, 'comment_body': 'The first `grass` part is still one dir extra here even in the suggestion.', 'comment_created': datetime.datetime(2021, 6, 9, 3, 2, 8, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}]","[{'commit_sha': '4b6db7dafe4d063a5c39c7ce7fa140c316e05d6d', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f041567b0266111fd53c3fccc08a0ef23f38c580', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f77e8554a5df77a7b7a0d672f03b0ddf5d2d7e0', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'acb88cc429aa12912da0b1eff696e8f28a135a19', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '271d50d9c1434c25ccbd7c0b99236822c5949f08', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '92e9cc91521f4de6c1f8103fb2ec29bdb6c9d9a3', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca0dbe91b145657ca996d8b3434df1f552c685ac', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '86cc233cf34e0e8e80b28fbe7ae022ee21a23c00', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b410973e50c9a3122d8ed6935d104a0a531b47cf', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '55e70b85bfa05d1cc8482c349a587ea79c2866b0', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1119c24f9fe0dc6834029e0de84f65d9dcce5c89', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}]",Caitlin Haedrich,69856275,,User,,31,,5,13
666049016,Binder button,"This pull request is for the binder/Jupyter Notebook button discussed in https://github.com/OSGeo/grass/pull/1603.

I wasn't quite sure where in the repository to put the button so I added it to the readme. Comments, discussion or a better location welcome.

The intention of having a binder and Jupyter Notebook is eventually demonstrate how to use GRASS and some of the Jupyter-specific functions. As part of the Google Summer of Code project ""Improved Integration of Jupyter and GRASS (https://trac.osgeo.org/grass/wiki/GSoC/2021/JupyterAndGRASS), I plan to improve the launch of GRASS in Jupyter and the display functions.",True,1628,https://api.github.com/repos/OSGeo/grass/pulls/1628,https://github.com/OSGeo/grass/pull/1628,closed,110,2,2,18,7,13,2,0,"[{'name': 'enhancement'}, {'name': 'gsoc'}]",2021-06-09 16:00:52+00:00,2021-06-15 01:05:42+00:00,464690.0,"5 days, 9:04:50","[{'comment_id': 648651680, 'comment_body': '```suggestion\r\nLaunch this repository in binder and experiment with PyGRASS in Jupyter Notebooks by clicking the button below:\r\n```', 'comment_created': datetime.datetime(2021, 6, 9, 20, 12, 20, tzinfo=datetime.timezone.utc), 'commenter': 'neteler', 'type': 'User'}, {'comment_id': 648824424, 'comment_body': 'You need to generate the badge for this repo, not your fork.', 'comment_created': datetime.datetime(2021, 6, 10, 3, 33, 24, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 649193851, 'comment_body': ""Oops! Yes, I'll fix the link.\r\n\r\nAs for PyGRASS, I meant the whole Python API (I was still figuring out the difference)."", 'comment_created': datetime.datetime(2021, 6, 10, 13, 41, 1, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 649590914, 'comment_body': 'Jupyter Notebook or full JupyterLab?', 'comment_created': datetime.datetime(2021, 6, 10, 23, 17, 35, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 650333854, 'comment_body': ""The correct URL is:\r\n\r\n```suggestion\r\n[![Binder](https://camo.githubusercontent.com/581c077bdbc6ca6899c86d0acc6145ae85e9d80e6f805a1071793dbe48917982/68747470733a2f2f6d7962696e6465722e6f72672f62616467655f6c6f676f2e737667)](https://mybinder.org/v2/gh/OSGeo/grass/master?urlpath=lab%2Ftree%2Fdoc%2Fnotebooks%2Fexample_notebook.ipynb)\r\n```\r\n\r\n...well, that's at least the JupyterLab and file path part. The HEAD versus master part (right after `grass/`) is not 100% clear to me as I don't see it in the documentation, but my understanding is that HEAD in this case is the tip of default branch, hence the same as master. It is, however, on master branch, so saying master is probably more expected."", 'comment_created': datetime.datetime(2021, 6, 12, 2, 33, 48, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 650334269, 'comment_body': 'Currently, there is no high-res logo in the source code, but you can try `../../man/grass_logo.png`.', 'comment_created': datetime.datetime(2021, 6, 12, 2, 38, 28, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 650335153, 'comment_body': 'You need to use the code from your GSoC evaluation period notebook. This does not work in Python 3.', 'comment_created': datetime.datetime(2021, 6, 12, 2, 48, 33, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 650562433, 'comment_body': 'Just limit the changes which are unrelated. Delete this line.', 'comment_created': datetime.datetime(2021, 6, 13, 18, 42, 7, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 650565147, 'comment_body': 'binder -> Binder: I think in text they use Binder rather than binder which is in logos.', 'comment_created': datetime.datetime(2021, 6, 13, 19, 8, 42, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 650880784, 'comment_body': '```suggestion\r\n    ""There are several ways to use GRASS GIS. When using Python in a notebook, we usually find GRASS GIS Python packages first, import them, initialize GRASS GIS session, and set several variables useful for using GRASS GIS in a notebook.""\r\n```', 'comment_created': datetime.datetime(2021, 6, 14, 11, 56, 12, tzinfo=datetime.timezone.utc), 'commenter': 'veroandreo', 'type': 'User'}, {'comment_id': 650881069, 'comment_body': '```suggestion\r\n    ""This is a quick introduction to *GRASS GIS* in a *Jupyter Notebook* using the *Python* scripting language.\\n"",\r\n```', 'comment_created': datetime.datetime(2021, 6, 14, 11, 56, 40, tzinfo=datetime.timezone.utc), 'commenter': 'veroandreo', 'type': 'User'}, {'comment_id': 650989054, 'comment_body': 'Thanks @veroandreo !', 'comment_created': datetime.datetime(2021, 6, 14, 14, 17, 36, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 651199543, 'comment_body': 'I think it would be good to delete the heading. The paragraph/sentence will become just second paragraph/sentence in the document and as a ""call to action"" it is quite fitting at the end of an intro section.', 'comment_created': datetime.datetime(2021, 6, 14, 18, 59, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}]","[{'commit_sha': '877c7d497683683c8e56607dd193b5e91cfe2dd0', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c9b8552387b7fcf8e21b4175a508eb1411e1766', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd105e03262c39a30d533db245e2eada04b2f0c21', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1450e8b2327ce45e1df6d3f79e34eebc9de24653', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7772668b192d2c123c1321aa4a66d85ab12f1278', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ed39df570ac40ee2d94830f89ed43eaed50bd94', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03ea53cb489a4122fa55b467e038b0dcf5727f3d', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aff404fcf717ab1e6a6e7cceb277377ad9af2c65', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5239778aa5d1a35e93158fdad88ba98e71179e93', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cff18c349c72763b461fd826a0b990a4c4451dd6', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '670aea1d00738b82e198171ab4be1c39edcce30c', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7dca737e9c0a3c526381a8632d4423810509f916', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e57d47d041e341a6fe2b867ca8e4ed0ea7dd4e9b', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68bd966ec94fc07f5f7750c88c1e36e3a2fabc99', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3a4843c3eacdff3dd4f37346f8b3d46f967fa84', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '996bcaf40176d02013e2571b03bf7ee24ea2ee88', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62709d90e64622d13b96bc0eec2ebb7a32f6aca7', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db1d48726971a703828a1c8f3983665cb743bb81', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}]",Caitlin Haedrich,69856275,,User,,31,,5,13
666052942,Session initiations functions for Jupyter Notebooks,"This PR contains several functions that simplify and shorten the launch of GRASS in Jupyter Notebooks, written as part of my Google Summer of Code project (https://trac.osgeo.org/grass/wiki/GSoC/2021/JupyterAndGRASS). It also contains a Jupyter Notebook (which launches in Binder) to demonstrate usage of the functions.",True,1629,https://api.github.com/repos/OSGeo/grass/pulls/1629,https://github.com/OSGeo/grass/pull/1629,closed,209,1,6,37,5,46,2,0,"[{'name': 'enhancement'}, {'name': 'gsoc'}]",2021-06-09 16:06:08+00:00,2021-06-17 02:21:16+00:00,641708.0,"7 days, 10:15:08","[{'comment_id': 648788143, 'comment_body': '`render_immediate` -> `driver`. `GRASS_RENDER_IMMEDIATE` documentation actually says that the values ""tells the display library which driver to use,"" i.e., it is the display driver name, hence `driver` as the variable name. (You should get to the documentation just by searching for ""GRASS environment variables""). I think the word immediate in the name comes from the fact that it also tells the commands to use the driver right away instead of going through GUI. In any case, this is exactly something we want to hide.', 'comment_created': datetime.datetime(2021, 6, 10, 1, 33, 37, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 648789809, 'comment_body': 'Hardcoding `""TRUE""` here is probably what we want now since that results in the new images being [on top of what is currently in the file](https://grass.osgeo.org/grass78/manuals/cairodriver.html), i.e., rendering of multiple layers.\r\n\r\nThese things will be more clear with the more advanced interface, so let\'s leave `GRASS_LEGEND_FILE` and maybe others for later.', 'comment_created': datetime.datetime(2021, 6, 10, 1, 39, 25, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 648790317, 'comment_body': 'You already went through this, so maybe no need to mention it, but just run Black on your code before pushing it to get the right formatting right away.', 'comment_created': datetime.datetime(2021, 6, 10, 1, 40, 52, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 648791364, 'comment_body': 'This should be a docstring. Overall, all these functions should have docstrings. You can run Pylint on your code. GRASS does not enforce it (unlike Black and Flake8), but Pylint will make sure you documented your functions. The docstrings are good for reviews too as they document the purpose of a function/class.', 'comment_created': datetime.datetime(2021, 6, 10, 1, 44, 17, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 648793013, 'comment_body': 'As an experiment, you can try to run `isort --profile black` too ([sorts your imports](https://pypi.org/project/isort/)). We should consider using it for the whole code base, so trying it for new files is a good idea.', 'comment_created': datetime.datetime(2021, 6, 10, 1, 49, 40, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 648797146, 'comment_body': 'I think the big advantage of having a dedicated `init` function here is to set also the default there, so that it is only one step (call) for the user. In other words, I think `use_notebook_defaults` should be called in `init`.', 'comment_created': datetime.datetime(2021, 6, 10, 2, 2, 34, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 648798191, 'comment_body': '`set_notebook_defaults()` might be a more fitting name. At least at this point, it is setting some variables here and there and I think it is also more clear from the user perspective.', 'comment_created': datetime.datetime(2021, 6, 10, 2, 6, 26, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 648819477, 'comment_body': ""Suggestions for a different name are welcome, but `init` is okay.\r\n\r\nAs of now, the GISBASE environmental variable needs to be defined before `import grass.script as gs`, so we don't need ask user to pass it here as we can just take it from the environment here and remove the `gisbase` parameter. This could be done in `grass.script.setup.init` too, but let's do it here now since we are sure what is our context here.\r\n\r\nI'm not sure what to do with the db/loc/mapset trio, we had discussions in the past about passing just path to mapset versus the three variables. This might be the occasion to try that in a prominent part of the API."", 'comment_created': datetime.datetime(2021, 6, 10, 3, 16, 5, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 650329806, 'comment_body': 'Should be needed. We are Python 3 only now for 8.0. At least Python 3.6.', 'comment_created': datetime.datetime(2021, 6, 12, 1, 50, 23, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 650330109, 'comment_body': ""Let's leave all here, but we need to revisit this if it even makes sense. ps may not be a good match for notebooks and html is obsolete HTML. Both work differently from cairo and png. It's really mostly cairo and png as fallback if something is wrong."", 'comment_created': datetime.datetime(2021, 6, 12, 1, 53, 27, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 650330789, 'comment_body': '`grassdata_filepath` is too long and `filepath` part is not great. You can try:\r\n\r\n```\r\ninit(path, location=None, mapse=None):\r\n```\r\n\r\n`path` will be path to mapset or path to database if location and mapset were provided. To follow the new v8 GUI behavior of using PERMANENT mapset automatically, you could even allow providing only `path` and `location`, but not mapset and also if only `path` is provided and points to an existing location (`grass.grassdb` is your friend), assume mapset=PERMANENT.', 'comment_created': datetime.datetime(2021, 6, 12, 2, 0, 51, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 650331110, 'comment_body': 'To make the grass.jupyter subpackage really work, you will need to add it to makefiles, see the `Makefile` file in `grass/app` or `grass/grassdb` and also add the name to `Makefile` in the parent directory. It should be just copy-pasting, no real Makefile writing is needed, but let me know.', 'comment_created': datetime.datetime(2021, 6, 12, 2, 4, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 650331257, 'comment_body': ""You can manually edit the file to revert this change. Something like `git checkout master -- doc/notebooks/example_notebook.ipynb` should bring the old state too if you want to go the Git way, but commit all your changes before, I'm wring the command without checking it."", 'comment_created': datetime.datetime(2021, 6, 12, 2, 5, 59, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 650331665, 'comment_body': ""I have seen issues before with conda specifying its complex kernel name and then the notebook failing elsewhere because the very specific kernel is not available. I'm not sure if it is the case here or not, but we have to check this time to time and will need to modify these by hand if needed. Jupyter Notebooks are unfortunately not as great with Git as one would wish."", 'comment_created': datetime.datetime(2021, 6, 12, 2, 10, 3, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 650331926, 'comment_body': 'The name can be just `jupyter_integration` or `jupyter` or some other simple name.', 'comment_created': datetime.datetime(2021, 6, 12, 2, 13, 3, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 650332271, 'comment_body': 'Delete this file and then if you feel like you can manage some more Git today, find the `.gitignore` in the source code root directory and add `.ipynb_checkpoints` directory there.', 'comment_created': datetime.datetime(2021, 6, 12, 2, 16, 6, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 650535768, 'comment_body': 'I\'m not quite sure what this would look like (or that I understand correctly). Maybe like this:\r\n`def init(path, location=None):\r\n.\r\n.\r\n.\r\ngsetup.init(os.environ[""GISBASE""], path, location, mapset=""PERMANENT"")`\r\n\r\nIs that close to what you were thinking? If location is None, I think this would cause an error?', 'comment_created': datetime.datetime(2021, 6, 13, 14, 39, 20, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 650536574, 'comment_body': ""I think I just need to delete this file completely since I'm working on it in the binder-button PR."", 'comment_created': datetime.datetime(2021, 6, 13, 14, 45, 46, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 650562733, 'comment_body': 'Unnecessary change plus it ends an empty line to the end of the file (there is already a line ending at the end of the file, so you are adding a second one).', 'comment_created': datetime.datetime(2021, 6, 13, 18, 44, 40, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 650563537, 'comment_body': 'Making it same as on the master branch is what ""removes"" it from the PR. Deleting in PR is really deleting.', 'comment_created': datetime.datetime(2021, 6, 13, 18, 51, 58, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 650563942, 'comment_body': ""Let's just leave this for another PR, so that you get the basic things working quickly and can use them. It's not just about setting some combination of defaults, but rather about running series of checks to figure out what the user meant."", 'comment_created': datetime.datetime(2021, 6, 13, 18, 55, 57, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 651182828, 'comment_body': 'When this file got here? Delete it.', 'comment_created': datetime.datetime(2021, 6, 14, 18, 33, 18, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 651183996, 'comment_body': 'You really need to do the `git checkout` command to get the original version of this file or copy-paste the content from the _File changes_ here and place it to the empty file. Committing an empty file says I want this file to be empty.', 'comment_created': datetime.datetime(2021, 6, 14, 18, 35, 2, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 651185747, 'comment_body': 'If you are not going to handle the more fancy parameters here, delete the default values. Both location and mapset are mandatory form grass.script.setup.init, so they need to be mandatory here to when you are just passing them through. The name `path` can stay as is. It makes sense even in this context.', 'comment_created': datetime.datetime(2021, 6, 14, 18, 37, 43, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 651188547, 'comment_body': ""Let's rename this file to `setup`. `funcs` that's kind of clear as usually it is functions or functionality. `init.py` as file name would be little confusing in Python due to `__init__.py` file. Two words are fine especially for internal modules, but I don't have a better idea now, `setup` is okay, already used for the `init` function you are wrapping, so let's go with that."", 'comment_created': datetime.datetime(2021, 6, 14, 18, 41, 53, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 651191546, 'comment_body': 'The red in the `+` line marks the error in the JSON syntax which is what is causing the following message when you open the notebook:\r\n\r\n```\r\nFile Load Error for jupyter_integration.ipynb\r\nUnreadable Notebook: /home/jovyan/doc/notebooks/jupyter_integration.ipynb NotJSONError(\'Notebook does not appear to be JSON: \\\'{\\\\n ""cells"": [\\\\n {\\\\n ""cell_type"": ""m...\')\r\n```\r\n\r\nThe fix is putting back the `\\` for the double quote after `grassdata` which should cause the red-marked `\\` to be interpreted correctly.', 'comment_created': datetime.datetime(2021, 6, 14, 18, 46, 39, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 651380230, 'comment_body': ""When I change the name to setup.funcs.py, I get an error in the Jupyter Notebook:\r\n\r\n```\r\nModuleNotFoundError                       Traceback (most recent call last)\r\n<ipython-input-3-9dda28f7b25c> in <module>\r\n      1 import grass.script as gs\r\n----> 2 import grass.jupyter as gj\r\n\r\n~/dist.x86_64-pc-linux-gnu/etc/python/grass/jupyter/__init__.py in <module>\r\n      1 from __future__ import absolute_import\r\n      2 \r\n----> 3 from .setup.funcs import *\r\n\r\nModuleNotFoundError: No module named 'grass.jupyter.setup'\r\n```\r\n\r\nIs there a better/correct way to call setup.funcs that doesn't result in this error? Or should be named something different?\r\n\r\n"", 'comment_created': datetime.datetime(2021, 6, 15, 1, 23, 32, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 651383271, 'comment_body': ""I don't see anything expect the last character (last two actually), but there must be something different. Maybe the line endings. Try to get the original file from Git:\r\n\r\n```\r\ngit checkout upstream/master -- .../the/file/path/file/name.py\r\n```\r\n\r\nSome other things than upstream/master may work too. Ideally, _without_ updating to latest master branch first."", 'comment_created': datetime.datetime(2021, 6, 15, 1, 33, 11, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 651384922, 'comment_body': ""The whole second sentence can be deleted. Not really relevant for the user. Next programmer will hopefully be able to find that page without specific link. The link itself is adding complexity, it contains `78`, so it needs to be changed for every minor version - in fact it is not matching this version. Alternative would be to link `variables.html` in the source code, but I don't think that's needed in the first place."", 'comment_created': datetime.datetime(2021, 6, 15, 1, 38, 46, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 651387405, 'comment_body': ""Run Pylint, so it tells you you should put a docstring here describing what is in this file (one sentence, it may appear in online documentation, aimed at users of the functions in the file).\r\n\r\nAlso at the very begging, please add file header with license:\r\n\r\nhttps://trac.osgeo.org/grass/wiki/Submitting/Python\r\nhttps://trac.osgeo.org/grass/wiki/Submitting/C\r\n\r\nI'm little torn between using `#` comments and a docsting for that statement, but given that the docsting is meant for user documentation, `#` comments seem more appropriate for the header information which is aiming at maintainers/authors."", 'comment_created': datetime.datetime(2021, 6, 15, 1, 46, 35, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 651389498, 'comment_body': 'This might be a good place to mention that it will be overwriting the existing maps of the same name, i.e., as it happens with Python variables - ideally in some way which is 1) not confusing Python users and 2) still warns GRASS users that the default is different than what GRASS usually does. ... or you can put a `# TODO:` comment above the function to get to this later.', 'comment_created': datetime.datetime(2021, 6, 15, 1, 52, 33, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 651405869, 'comment_body': 'Try to parse my comment again and stop the first sentence right with the first period-space :-)', 'comment_created': datetime.datetime(2021, 6, 15, 2, 40, 36, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 651688378, 'comment_body': 'Oh my gosh - I see it now. Thank you.', 'comment_created': datetime.datetime(2021, 6, 15, 11, 13, 6, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 651695772, 'comment_body': ""I wrote a short sentence to that effect. I'm not sure if it's the clearest - I can put a `#TODO:` comment to clarify later too?"", 'comment_created': datetime.datetime(2021, 6, 15, 11, 24, 34, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 651739484, 'comment_body': 'Good enough for now.', 'comment_created': datetime.datetime(2021, 6, 15, 12, 27, 11, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 652281026, 'comment_body': 'I meant to say: not needed! Search for `from __future__ import absolute_import` e.g., https://portingguide.readthedocs.io/en/latest/imports.html#absolute-imports', 'comment_created': datetime.datetime(2021, 6, 16, 1, 30, 17, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 652282626, 'comment_body': ""Let's follow the policy of having un-computed notebooks in this repo. The point is that you can compute them easily, right? They are different from the standard documentation (where we have images) and from the notebooks linked from the website which should really look as nice as possible, so they include images."", 'comment_created': datetime.datetime(2021, 6, 16, 1, 35, 23, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 652284058, 'comment_body': 'I don\'t think `font=""romans""` does what you expect. It uses the default font in GRASS display drivers which is not high quality. Perhaps `font=""serif""` would give a good result. However, `grass.jupyter` is about reasonable defaults, so why to set anything at all in this basic example and not go with `gj.display_settings()`? This API and example will change, but this comment applies to the new API as well.', 'comment_created': datetime.datetime(2021, 6, 16, 1, 40, 18, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 652284599, 'comment_body': 'Given my comment for the line below, this would be _Set default display settings_.', 'comment_created': datetime.datetime(2021, 6, 16, 1, 41, 57, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 652284956, 'comment_body': 'I like this. `help(gj.init)` is perhaps more elegant. You can also consider more Jupyter-ish `gj.init?`.', 'comment_created': datetime.datetime(2021, 6, 16, 1, 42, 59, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 652729022, 'comment_body': 'No comment needed here anymore after the last change.', 'comment_created': datetime.datetime(2021, 6, 16, 14, 10, 40, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 652731898, 'comment_body': 'Since you are doing changes anyway, what about changing all single quotes in the notebook to double quotes to follow Black? Looks much worse in the raw JSON, but it will be better when viewing notebook. No need to wonder if there is a difference or what is the style used.', 'comment_created': datetime.datetime(2021, 6, 16, 14, 13, 43, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 652733345, 'comment_body': ""This still needs to be removed. We don't keep Python 2 compatibility anymore."", 'comment_created': datetime.datetime(2021, 6, 16, 14, 15, 12, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 652889982, 'comment_body': 'Use double quotes, not single quotes.', 'comment_created': datetime.datetime(2021, 6, 16, 17, 14, 18, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 652983336, 'comment_body': ""I'm not sure how to handle those in the future, but right now, the best practice seem to keep here something simple without the conda complexities (if for no other reason, it is meant to be used also without conda), so revert this piece."", 'comment_created': datetime.datetime(2021, 6, 16, 19, 27, 29, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 652983530, 'comment_body': 'As above, revert this part.', 'comment_created': datetime.datetime(2021, 6, 16, 19, 27, 49, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}]","[{'commit_sha': '12f046ced6972a0224f05dc709c85b4ccfce568d', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '846e08371fd21267d0e3b113bb864287f032ece7', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '30da6ae5acae96ee5b09412934538366c651845e', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53afcbba8c703bfbc1cdeb85fba00d976df8e05c', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ec18408064efa947346d5b8c1e5ae638df79aee', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0cc7db7a9f2db874b454316730b5f125e656a73', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd68d01e9c5afa9f6e95e47f538605f0c82a66f64', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '785f55fd6763fa4c53e4f553a4850857be37c779', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '413b22a52c6d11bc57ef2bdbd8083d78ce11be4d', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db8523ebefb2b039938ec73b2a683d28448c6454', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66721218846d81c7d8865c9517f6a9807b8fb8e0', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10e25efc503806414cef6c236f2385179ea54193', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '426f7a466e562d759b07b8a57739708143882eae', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ea9eea7dfbf675b8e0c0f8080fd6a5cfcfeae44', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc7b9d7dd23776e47ce2865a6ab42ad95ebd78d0', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d21a9f9821702c0f69535ad37dd0527022f4c40', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1768397106d1fd942da3018dff52ed284b32842e', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ba23e79a676c7c4be46e6b4007e12cca9473b83', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a5efa1107e6e60372322332fea81e1cdd03cd76', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '334136283a909e580e7eaca38c675ded4ccffbbe', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cdd69acad7510eba88884ed2c13960c231cefccb', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff6314f4e8c5f546fa71ec25c32914855ac91530', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ce0388a49dec964bf2522c98b93f5fb14fb041f', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b4ce3179b39d4a9282940cfcca9b8a1f32452d1b', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '867c6df7e60a63fedfc21c397f4723ae13739506', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9175db6901fb30caa786abcdb7afd255b2e37eb', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a618f62930ed1cc3fec841bb28e238b13794a0c2', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '43586d00f43410808bf2a134c63d6ab7b4ff2a5f', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e5b49d411a714083229925045070cf751a4dec6', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b898d0dfb6c6927da90d77b99e836407d307342', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a7a65ec3ea2d6e8fe07abfd1448b6b373e9380f', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c7006e07bc197f773df609091ce0ed443f2e406', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f58dce19caf319420d775be6a26154bd341a9978', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c914aeafd619a9f9b45a5145699f4ec56d06665', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7b8f15f02960076fa547828b5204956b634577e', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '77710d4f18a4248cd900150a5d224362d67e8ebc', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea98a69779b2dd8367ff75519a182c922d38e565', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}]",Caitlin Haedrich,69856275,,User,,31,,5,13
666052942,Session initiations functions for Jupyter Notebooks,"This PR contains several functions that simplify and shorten the launch of GRASS in Jupyter Notebooks, written as part of my Google Summer of Code project (https://trac.osgeo.org/grass/wiki/GSoC/2021/JupyterAndGRASS). It also contains a Jupyter Notebook (which launches in Binder) to demonstrate usage of the functions.",True,1629,https://api.github.com/repos/OSGeo/grass/pulls/1629,https://github.com/OSGeo/grass/pull/1629,closed,209,1,6,37,5,46,2,0,"[{'name': 'enhancement'}, {'name': 'gsoc'}]",2021-06-09 16:06:08+00:00,2021-06-17 02:21:16+00:00,641708.0,"7 days, 10:15:08","[{'comment_id': 648788143, 'comment_body': '`render_immediate` -> `driver`. `GRASS_RENDER_IMMEDIATE` documentation actually says that the values ""tells the display library which driver to use,"" i.e., it is the display driver name, hence `driver` as the variable name. (You should get to the documentation just by searching for ""GRASS environment variables""). I think the word immediate in the name comes from the fact that it also tells the commands to use the driver right away instead of going through GUI. In any case, this is exactly something we want to hide.', 'comment_created': datetime.datetime(2021, 6, 10, 1, 33, 37, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 648789809, 'comment_body': 'Hardcoding `""TRUE""` here is probably what we want now since that results in the new images being [on top of what is currently in the file](https://grass.osgeo.org/grass78/manuals/cairodriver.html), i.e., rendering of multiple layers.\r\n\r\nThese things will be more clear with the more advanced interface, so let\'s leave `GRASS_LEGEND_FILE` and maybe others for later.', 'comment_created': datetime.datetime(2021, 6, 10, 1, 39, 25, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 648790317, 'comment_body': 'You already went through this, so maybe no need to mention it, but just run Black on your code before pushing it to get the right formatting right away.', 'comment_created': datetime.datetime(2021, 6, 10, 1, 40, 52, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 648791364, 'comment_body': 'This should be a docstring. Overall, all these functions should have docstrings. You can run Pylint on your code. GRASS does not enforce it (unlike Black and Flake8), but Pylint will make sure you documented your functions. The docstrings are good for reviews too as they document the purpose of a function/class.', 'comment_created': datetime.datetime(2021, 6, 10, 1, 44, 17, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 648793013, 'comment_body': 'As an experiment, you can try to run `isort --profile black` too ([sorts your imports](https://pypi.org/project/isort/)). We should consider using it for the whole code base, so trying it for new files is a good idea.', 'comment_created': datetime.datetime(2021, 6, 10, 1, 49, 40, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 648797146, 'comment_body': 'I think the big advantage of having a dedicated `init` function here is to set also the default there, so that it is only one step (call) for the user. In other words, I think `use_notebook_defaults` should be called in `init`.', 'comment_created': datetime.datetime(2021, 6, 10, 2, 2, 34, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 648798191, 'comment_body': '`set_notebook_defaults()` might be a more fitting name. At least at this point, it is setting some variables here and there and I think it is also more clear from the user perspective.', 'comment_created': datetime.datetime(2021, 6, 10, 2, 6, 26, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 648819477, 'comment_body': ""Suggestions for a different name are welcome, but `init` is okay.\r\n\r\nAs of now, the GISBASE environmental variable needs to be defined before `import grass.script as gs`, so we don't need ask user to pass it here as we can just take it from the environment here and remove the `gisbase` parameter. This could be done in `grass.script.setup.init` too, but let's do it here now since we are sure what is our context here.\r\n\r\nI'm not sure what to do with the db/loc/mapset trio, we had discussions in the past about passing just path to mapset versus the three variables. This might be the occasion to try that in a prominent part of the API."", 'comment_created': datetime.datetime(2021, 6, 10, 3, 16, 5, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 650329806, 'comment_body': 'Should be needed. We are Python 3 only now for 8.0. At least Python 3.6.', 'comment_created': datetime.datetime(2021, 6, 12, 1, 50, 23, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 650330109, 'comment_body': ""Let's leave all here, but we need to revisit this if it even makes sense. ps may not be a good match for notebooks and html is obsolete HTML. Both work differently from cairo and png. It's really mostly cairo and png as fallback if something is wrong."", 'comment_created': datetime.datetime(2021, 6, 12, 1, 53, 27, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 650330789, 'comment_body': '`grassdata_filepath` is too long and `filepath` part is not great. You can try:\r\n\r\n```\r\ninit(path, location=None, mapse=None):\r\n```\r\n\r\n`path` will be path to mapset or path to database if location and mapset were provided. To follow the new v8 GUI behavior of using PERMANENT mapset automatically, you could even allow providing only `path` and `location`, but not mapset and also if only `path` is provided and points to an existing location (`grass.grassdb` is your friend), assume mapset=PERMANENT.', 'comment_created': datetime.datetime(2021, 6, 12, 2, 0, 51, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 650331110, 'comment_body': 'To make the grass.jupyter subpackage really work, you will need to add it to makefiles, see the `Makefile` file in `grass/app` or `grass/grassdb` and also add the name to `Makefile` in the parent directory. It should be just copy-pasting, no real Makefile writing is needed, but let me know.', 'comment_created': datetime.datetime(2021, 6, 12, 2, 4, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 650331257, 'comment_body': ""You can manually edit the file to revert this change. Something like `git checkout master -- doc/notebooks/example_notebook.ipynb` should bring the old state too if you want to go the Git way, but commit all your changes before, I'm wring the command without checking it."", 'comment_created': datetime.datetime(2021, 6, 12, 2, 5, 59, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 650331665, 'comment_body': ""I have seen issues before with conda specifying its complex kernel name and then the notebook failing elsewhere because the very specific kernel is not available. I'm not sure if it is the case here or not, but we have to check this time to time and will need to modify these by hand if needed. Jupyter Notebooks are unfortunately not as great with Git as one would wish."", 'comment_created': datetime.datetime(2021, 6, 12, 2, 10, 3, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 650331926, 'comment_body': 'The name can be just `jupyter_integration` or `jupyter` or some other simple name.', 'comment_created': datetime.datetime(2021, 6, 12, 2, 13, 3, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 650332271, 'comment_body': 'Delete this file and then if you feel like you can manage some more Git today, find the `.gitignore` in the source code root directory and add `.ipynb_checkpoints` directory there.', 'comment_created': datetime.datetime(2021, 6, 12, 2, 16, 6, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 650535768, 'comment_body': 'I\'m not quite sure what this would look like (or that I understand correctly). Maybe like this:\r\n`def init(path, location=None):\r\n.\r\n.\r\n.\r\ngsetup.init(os.environ[""GISBASE""], path, location, mapset=""PERMANENT"")`\r\n\r\nIs that close to what you were thinking? If location is None, I think this would cause an error?', 'comment_created': datetime.datetime(2021, 6, 13, 14, 39, 20, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 650536574, 'comment_body': ""I think I just need to delete this file completely since I'm working on it in the binder-button PR."", 'comment_created': datetime.datetime(2021, 6, 13, 14, 45, 46, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 650562733, 'comment_body': 'Unnecessary change plus it ends an empty line to the end of the file (there is already a line ending at the end of the file, so you are adding a second one).', 'comment_created': datetime.datetime(2021, 6, 13, 18, 44, 40, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 650563537, 'comment_body': 'Making it same as on the master branch is what ""removes"" it from the PR. Deleting in PR is really deleting.', 'comment_created': datetime.datetime(2021, 6, 13, 18, 51, 58, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 650563942, 'comment_body': ""Let's just leave this for another PR, so that you get the basic things working quickly and can use them. It's not just about setting some combination of defaults, but rather about running series of checks to figure out what the user meant."", 'comment_created': datetime.datetime(2021, 6, 13, 18, 55, 57, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 651182828, 'comment_body': 'When this file got here? Delete it.', 'comment_created': datetime.datetime(2021, 6, 14, 18, 33, 18, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 651183996, 'comment_body': 'You really need to do the `git checkout` command to get the original version of this file or copy-paste the content from the _File changes_ here and place it to the empty file. Committing an empty file says I want this file to be empty.', 'comment_created': datetime.datetime(2021, 6, 14, 18, 35, 2, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 651185747, 'comment_body': 'If you are not going to handle the more fancy parameters here, delete the default values. Both location and mapset are mandatory form grass.script.setup.init, so they need to be mandatory here to when you are just passing them through. The name `path` can stay as is. It makes sense even in this context.', 'comment_created': datetime.datetime(2021, 6, 14, 18, 37, 43, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 651188547, 'comment_body': ""Let's rename this file to `setup`. `funcs` that's kind of clear as usually it is functions or functionality. `init.py` as file name would be little confusing in Python due to `__init__.py` file. Two words are fine especially for internal modules, but I don't have a better idea now, `setup` is okay, already used for the `init` function you are wrapping, so let's go with that."", 'comment_created': datetime.datetime(2021, 6, 14, 18, 41, 53, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 651191546, 'comment_body': 'The red in the `+` line marks the error in the JSON syntax which is what is causing the following message when you open the notebook:\r\n\r\n```\r\nFile Load Error for jupyter_integration.ipynb\r\nUnreadable Notebook: /home/jovyan/doc/notebooks/jupyter_integration.ipynb NotJSONError(\'Notebook does not appear to be JSON: \\\'{\\\\n ""cells"": [\\\\n {\\\\n ""cell_type"": ""m...\')\r\n```\r\n\r\nThe fix is putting back the `\\` for the double quote after `grassdata` which should cause the red-marked `\\` to be interpreted correctly.', 'comment_created': datetime.datetime(2021, 6, 14, 18, 46, 39, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 651380230, 'comment_body': ""When I change the name to setup.funcs.py, I get an error in the Jupyter Notebook:\r\n\r\n```\r\nModuleNotFoundError                       Traceback (most recent call last)\r\n<ipython-input-3-9dda28f7b25c> in <module>\r\n      1 import grass.script as gs\r\n----> 2 import grass.jupyter as gj\r\n\r\n~/dist.x86_64-pc-linux-gnu/etc/python/grass/jupyter/__init__.py in <module>\r\n      1 from __future__ import absolute_import\r\n      2 \r\n----> 3 from .setup.funcs import *\r\n\r\nModuleNotFoundError: No module named 'grass.jupyter.setup'\r\n```\r\n\r\nIs there a better/correct way to call setup.funcs that doesn't result in this error? Or should be named something different?\r\n\r\n"", 'comment_created': datetime.datetime(2021, 6, 15, 1, 23, 32, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 651383271, 'comment_body': ""I don't see anything expect the last character (last two actually), but there must be something different. Maybe the line endings. Try to get the original file from Git:\r\n\r\n```\r\ngit checkout upstream/master -- .../the/file/path/file/name.py\r\n```\r\n\r\nSome other things than upstream/master may work too. Ideally, _without_ updating to latest master branch first."", 'comment_created': datetime.datetime(2021, 6, 15, 1, 33, 11, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 651384922, 'comment_body': ""The whole second sentence can be deleted. Not really relevant for the user. Next programmer will hopefully be able to find that page without specific link. The link itself is adding complexity, it contains `78`, so it needs to be changed for every minor version - in fact it is not matching this version. Alternative would be to link `variables.html` in the source code, but I don't think that's needed in the first place."", 'comment_created': datetime.datetime(2021, 6, 15, 1, 38, 46, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 651387405, 'comment_body': ""Run Pylint, so it tells you you should put a docstring here describing what is in this file (one sentence, it may appear in online documentation, aimed at users of the functions in the file).\r\n\r\nAlso at the very begging, please add file header with license:\r\n\r\nhttps://trac.osgeo.org/grass/wiki/Submitting/Python\r\nhttps://trac.osgeo.org/grass/wiki/Submitting/C\r\n\r\nI'm little torn between using `#` comments and a docsting for that statement, but given that the docsting is meant for user documentation, `#` comments seem more appropriate for the header information which is aiming at maintainers/authors."", 'comment_created': datetime.datetime(2021, 6, 15, 1, 46, 35, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 651389498, 'comment_body': 'This might be a good place to mention that it will be overwriting the existing maps of the same name, i.e., as it happens with Python variables - ideally in some way which is 1) not confusing Python users and 2) still warns GRASS users that the default is different than what GRASS usually does. ... or you can put a `# TODO:` comment above the function to get to this later.', 'comment_created': datetime.datetime(2021, 6, 15, 1, 52, 33, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 651405869, 'comment_body': 'Try to parse my comment again and stop the first sentence right with the first period-space :-)', 'comment_created': datetime.datetime(2021, 6, 15, 2, 40, 36, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 651688378, 'comment_body': 'Oh my gosh - I see it now. Thank you.', 'comment_created': datetime.datetime(2021, 6, 15, 11, 13, 6, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 651695772, 'comment_body': ""I wrote a short sentence to that effect. I'm not sure if it's the clearest - I can put a `#TODO:` comment to clarify later too?"", 'comment_created': datetime.datetime(2021, 6, 15, 11, 24, 34, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 651739484, 'comment_body': 'Good enough for now.', 'comment_created': datetime.datetime(2021, 6, 15, 12, 27, 11, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 652281026, 'comment_body': 'I meant to say: not needed! Search for `from __future__ import absolute_import` e.g., https://portingguide.readthedocs.io/en/latest/imports.html#absolute-imports', 'comment_created': datetime.datetime(2021, 6, 16, 1, 30, 17, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 652282626, 'comment_body': ""Let's follow the policy of having un-computed notebooks in this repo. The point is that you can compute them easily, right? They are different from the standard documentation (where we have images) and from the notebooks linked from the website which should really look as nice as possible, so they include images."", 'comment_created': datetime.datetime(2021, 6, 16, 1, 35, 23, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 652284058, 'comment_body': 'I don\'t think `font=""romans""` does what you expect. It uses the default font in GRASS display drivers which is not high quality. Perhaps `font=""serif""` would give a good result. However, `grass.jupyter` is about reasonable defaults, so why to set anything at all in this basic example and not go with `gj.display_settings()`? This API and example will change, but this comment applies to the new API as well.', 'comment_created': datetime.datetime(2021, 6, 16, 1, 40, 18, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 652284599, 'comment_body': 'Given my comment for the line below, this would be _Set default display settings_.', 'comment_created': datetime.datetime(2021, 6, 16, 1, 41, 57, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 652284956, 'comment_body': 'I like this. `help(gj.init)` is perhaps more elegant. You can also consider more Jupyter-ish `gj.init?`.', 'comment_created': datetime.datetime(2021, 6, 16, 1, 42, 59, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 652729022, 'comment_body': 'No comment needed here anymore after the last change.', 'comment_created': datetime.datetime(2021, 6, 16, 14, 10, 40, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 652731898, 'comment_body': 'Since you are doing changes anyway, what about changing all single quotes in the notebook to double quotes to follow Black? Looks much worse in the raw JSON, but it will be better when viewing notebook. No need to wonder if there is a difference or what is the style used.', 'comment_created': datetime.datetime(2021, 6, 16, 14, 13, 43, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 652733345, 'comment_body': ""This still needs to be removed. We don't keep Python 2 compatibility anymore."", 'comment_created': datetime.datetime(2021, 6, 16, 14, 15, 12, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 652889982, 'comment_body': 'Use double quotes, not single quotes.', 'comment_created': datetime.datetime(2021, 6, 16, 17, 14, 18, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 652983336, 'comment_body': ""I'm not sure how to handle those in the future, but right now, the best practice seem to keep here something simple without the conda complexities (if for no other reason, it is meant to be used also without conda), so revert this piece."", 'comment_created': datetime.datetime(2021, 6, 16, 19, 27, 29, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 652983530, 'comment_body': 'As above, revert this part.', 'comment_created': datetime.datetime(2021, 6, 16, 19, 27, 49, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}]","[{'commit_sha': '12f046ced6972a0224f05dc709c85b4ccfce568d', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '846e08371fd21267d0e3b113bb864287f032ece7', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '30da6ae5acae96ee5b09412934538366c651845e', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53afcbba8c703bfbc1cdeb85fba00d976df8e05c', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ec18408064efa947346d5b8c1e5ae638df79aee', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0cc7db7a9f2db874b454316730b5f125e656a73', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd68d01e9c5afa9f6e95e47f538605f0c82a66f64', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '785f55fd6763fa4c53e4f553a4850857be37c779', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '413b22a52c6d11bc57ef2bdbd8083d78ce11be4d', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db8523ebefb2b039938ec73b2a683d28448c6454', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66721218846d81c7d8865c9517f6a9807b8fb8e0', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10e25efc503806414cef6c236f2385179ea54193', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '426f7a466e562d759b07b8a57739708143882eae', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ea9eea7dfbf675b8e0c0f8080fd6a5cfcfeae44', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc7b9d7dd23776e47ce2865a6ab42ad95ebd78d0', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d21a9f9821702c0f69535ad37dd0527022f4c40', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1768397106d1fd942da3018dff52ed284b32842e', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ba23e79a676c7c4be46e6b4007e12cca9473b83', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a5efa1107e6e60372322332fea81e1cdd03cd76', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '334136283a909e580e7eaca38c675ded4ccffbbe', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cdd69acad7510eba88884ed2c13960c231cefccb', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff6314f4e8c5f546fa71ec25c32914855ac91530', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ce0388a49dec964bf2522c98b93f5fb14fb041f', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b4ce3179b39d4a9282940cfcca9b8a1f32452d1b', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '867c6df7e60a63fedfc21c397f4723ae13739506', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9175db6901fb30caa786abcdb7afd255b2e37eb', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a618f62930ed1cc3fec841bb28e238b13794a0c2', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '43586d00f43410808bf2a134c63d6ab7b4ff2a5f', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e5b49d411a714083229925045070cf751a4dec6', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b898d0dfb6c6927da90d77b99e836407d307342', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a7a65ec3ea2d6e8fe07abfd1448b6b373e9380f', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c7006e07bc197f773df609091ce0ed443f2e406', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f58dce19caf319420d775be6a26154bd341a9978', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c914aeafd619a9f9b45a5145699f4ec56d06665', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7b8f15f02960076fa547828b5204956b634577e', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '77710d4f18a4248cd900150a5d224362d67e8ebc', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea98a69779b2dd8367ff75519a182c922d38e565', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}]",Caitlin Haedrich,69856275,,User,,31,,5,13
666052942,Session initiations functions for Jupyter Notebooks,"This PR contains several functions that simplify and shorten the launch of GRASS in Jupyter Notebooks, written as part of my Google Summer of Code project (https://trac.osgeo.org/grass/wiki/GSoC/2021/JupyterAndGRASS). It also contains a Jupyter Notebook (which launches in Binder) to demonstrate usage of the functions.",True,1629,https://api.github.com/repos/OSGeo/grass/pulls/1629,https://github.com/OSGeo/grass/pull/1629,closed,209,1,6,37,5,46,2,0,"[{'name': 'enhancement'}, {'name': 'gsoc'}]",2021-06-09 16:06:08+00:00,2021-06-17 02:21:16+00:00,641708.0,"7 days, 10:15:08","[{'comment_id': 648788143, 'comment_body': '`render_immediate` -> `driver`. `GRASS_RENDER_IMMEDIATE` documentation actually says that the values ""tells the display library which driver to use,"" i.e., it is the display driver name, hence `driver` as the variable name. (You should get to the documentation just by searching for ""GRASS environment variables""). I think the word immediate in the name comes from the fact that it also tells the commands to use the driver right away instead of going through GUI. In any case, this is exactly something we want to hide.', 'comment_created': datetime.datetime(2021, 6, 10, 1, 33, 37, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 648789809, 'comment_body': 'Hardcoding `""TRUE""` here is probably what we want now since that results in the new images being [on top of what is currently in the file](https://grass.osgeo.org/grass78/manuals/cairodriver.html), i.e., rendering of multiple layers.\r\n\r\nThese things will be more clear with the more advanced interface, so let\'s leave `GRASS_LEGEND_FILE` and maybe others for later.', 'comment_created': datetime.datetime(2021, 6, 10, 1, 39, 25, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 648790317, 'comment_body': 'You already went through this, so maybe no need to mention it, but just run Black on your code before pushing it to get the right formatting right away.', 'comment_created': datetime.datetime(2021, 6, 10, 1, 40, 52, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 648791364, 'comment_body': 'This should be a docstring. Overall, all these functions should have docstrings. You can run Pylint on your code. GRASS does not enforce it (unlike Black and Flake8), but Pylint will make sure you documented your functions. The docstrings are good for reviews too as they document the purpose of a function/class.', 'comment_created': datetime.datetime(2021, 6, 10, 1, 44, 17, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 648793013, 'comment_body': 'As an experiment, you can try to run `isort --profile black` too ([sorts your imports](https://pypi.org/project/isort/)). We should consider using it for the whole code base, so trying it for new files is a good idea.', 'comment_created': datetime.datetime(2021, 6, 10, 1, 49, 40, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 648797146, 'comment_body': 'I think the big advantage of having a dedicated `init` function here is to set also the default there, so that it is only one step (call) for the user. In other words, I think `use_notebook_defaults` should be called in `init`.', 'comment_created': datetime.datetime(2021, 6, 10, 2, 2, 34, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 648798191, 'comment_body': '`set_notebook_defaults()` might be a more fitting name. At least at this point, it is setting some variables here and there and I think it is also more clear from the user perspective.', 'comment_created': datetime.datetime(2021, 6, 10, 2, 6, 26, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 648819477, 'comment_body': ""Suggestions for a different name are welcome, but `init` is okay.\r\n\r\nAs of now, the GISBASE environmental variable needs to be defined before `import grass.script as gs`, so we don't need ask user to pass it here as we can just take it from the environment here and remove the `gisbase` parameter. This could be done in `grass.script.setup.init` too, but let's do it here now since we are sure what is our context here.\r\n\r\nI'm not sure what to do with the db/loc/mapset trio, we had discussions in the past about passing just path to mapset versus the three variables. This might be the occasion to try that in a prominent part of the API."", 'comment_created': datetime.datetime(2021, 6, 10, 3, 16, 5, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 650329806, 'comment_body': 'Should be needed. We are Python 3 only now for 8.0. At least Python 3.6.', 'comment_created': datetime.datetime(2021, 6, 12, 1, 50, 23, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 650330109, 'comment_body': ""Let's leave all here, but we need to revisit this if it even makes sense. ps may not be a good match for notebooks and html is obsolete HTML. Both work differently from cairo and png. It's really mostly cairo and png as fallback if something is wrong."", 'comment_created': datetime.datetime(2021, 6, 12, 1, 53, 27, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 650330789, 'comment_body': '`grassdata_filepath` is too long and `filepath` part is not great. You can try:\r\n\r\n```\r\ninit(path, location=None, mapse=None):\r\n```\r\n\r\n`path` will be path to mapset or path to database if location and mapset were provided. To follow the new v8 GUI behavior of using PERMANENT mapset automatically, you could even allow providing only `path` and `location`, but not mapset and also if only `path` is provided and points to an existing location (`grass.grassdb` is your friend), assume mapset=PERMANENT.', 'comment_created': datetime.datetime(2021, 6, 12, 2, 0, 51, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 650331110, 'comment_body': 'To make the grass.jupyter subpackage really work, you will need to add it to makefiles, see the `Makefile` file in `grass/app` or `grass/grassdb` and also add the name to `Makefile` in the parent directory. It should be just copy-pasting, no real Makefile writing is needed, but let me know.', 'comment_created': datetime.datetime(2021, 6, 12, 2, 4, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 650331257, 'comment_body': ""You can manually edit the file to revert this change. Something like `git checkout master -- doc/notebooks/example_notebook.ipynb` should bring the old state too if you want to go the Git way, but commit all your changes before, I'm wring the command without checking it."", 'comment_created': datetime.datetime(2021, 6, 12, 2, 5, 59, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 650331665, 'comment_body': ""I have seen issues before with conda specifying its complex kernel name and then the notebook failing elsewhere because the very specific kernel is not available. I'm not sure if it is the case here or not, but we have to check this time to time and will need to modify these by hand if needed. Jupyter Notebooks are unfortunately not as great with Git as one would wish."", 'comment_created': datetime.datetime(2021, 6, 12, 2, 10, 3, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 650331926, 'comment_body': 'The name can be just `jupyter_integration` or `jupyter` or some other simple name.', 'comment_created': datetime.datetime(2021, 6, 12, 2, 13, 3, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 650332271, 'comment_body': 'Delete this file and then if you feel like you can manage some more Git today, find the `.gitignore` in the source code root directory and add `.ipynb_checkpoints` directory there.', 'comment_created': datetime.datetime(2021, 6, 12, 2, 16, 6, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 650535768, 'comment_body': 'I\'m not quite sure what this would look like (or that I understand correctly). Maybe like this:\r\n`def init(path, location=None):\r\n.\r\n.\r\n.\r\ngsetup.init(os.environ[""GISBASE""], path, location, mapset=""PERMANENT"")`\r\n\r\nIs that close to what you were thinking? If location is None, I think this would cause an error?', 'comment_created': datetime.datetime(2021, 6, 13, 14, 39, 20, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 650536574, 'comment_body': ""I think I just need to delete this file completely since I'm working on it in the binder-button PR."", 'comment_created': datetime.datetime(2021, 6, 13, 14, 45, 46, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 650562733, 'comment_body': 'Unnecessary change plus it ends an empty line to the end of the file (there is already a line ending at the end of the file, so you are adding a second one).', 'comment_created': datetime.datetime(2021, 6, 13, 18, 44, 40, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 650563537, 'comment_body': 'Making it same as on the master branch is what ""removes"" it from the PR. Deleting in PR is really deleting.', 'comment_created': datetime.datetime(2021, 6, 13, 18, 51, 58, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 650563942, 'comment_body': ""Let's just leave this for another PR, so that you get the basic things working quickly and can use them. It's not just about setting some combination of defaults, but rather about running series of checks to figure out what the user meant."", 'comment_created': datetime.datetime(2021, 6, 13, 18, 55, 57, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 651182828, 'comment_body': 'When this file got here? Delete it.', 'comment_created': datetime.datetime(2021, 6, 14, 18, 33, 18, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 651183996, 'comment_body': 'You really need to do the `git checkout` command to get the original version of this file or copy-paste the content from the _File changes_ here and place it to the empty file. Committing an empty file says I want this file to be empty.', 'comment_created': datetime.datetime(2021, 6, 14, 18, 35, 2, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 651185747, 'comment_body': 'If you are not going to handle the more fancy parameters here, delete the default values. Both location and mapset are mandatory form grass.script.setup.init, so they need to be mandatory here to when you are just passing them through. The name `path` can stay as is. It makes sense even in this context.', 'comment_created': datetime.datetime(2021, 6, 14, 18, 37, 43, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 651188547, 'comment_body': ""Let's rename this file to `setup`. `funcs` that's kind of clear as usually it is functions or functionality. `init.py` as file name would be little confusing in Python due to `__init__.py` file. Two words are fine especially for internal modules, but I don't have a better idea now, `setup` is okay, already used for the `init` function you are wrapping, so let's go with that."", 'comment_created': datetime.datetime(2021, 6, 14, 18, 41, 53, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 651191546, 'comment_body': 'The red in the `+` line marks the error in the JSON syntax which is what is causing the following message when you open the notebook:\r\n\r\n```\r\nFile Load Error for jupyter_integration.ipynb\r\nUnreadable Notebook: /home/jovyan/doc/notebooks/jupyter_integration.ipynb NotJSONError(\'Notebook does not appear to be JSON: \\\'{\\\\n ""cells"": [\\\\n {\\\\n ""cell_type"": ""m...\')\r\n```\r\n\r\nThe fix is putting back the `\\` for the double quote after `grassdata` which should cause the red-marked `\\` to be interpreted correctly.', 'comment_created': datetime.datetime(2021, 6, 14, 18, 46, 39, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 651380230, 'comment_body': ""When I change the name to setup.funcs.py, I get an error in the Jupyter Notebook:\r\n\r\n```\r\nModuleNotFoundError                       Traceback (most recent call last)\r\n<ipython-input-3-9dda28f7b25c> in <module>\r\n      1 import grass.script as gs\r\n----> 2 import grass.jupyter as gj\r\n\r\n~/dist.x86_64-pc-linux-gnu/etc/python/grass/jupyter/__init__.py in <module>\r\n      1 from __future__ import absolute_import\r\n      2 \r\n----> 3 from .setup.funcs import *\r\n\r\nModuleNotFoundError: No module named 'grass.jupyter.setup'\r\n```\r\n\r\nIs there a better/correct way to call setup.funcs that doesn't result in this error? Or should be named something different?\r\n\r\n"", 'comment_created': datetime.datetime(2021, 6, 15, 1, 23, 32, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 651383271, 'comment_body': ""I don't see anything expect the last character (last two actually), but there must be something different. Maybe the line endings. Try to get the original file from Git:\r\n\r\n```\r\ngit checkout upstream/master -- .../the/file/path/file/name.py\r\n```\r\n\r\nSome other things than upstream/master may work too. Ideally, _without_ updating to latest master branch first."", 'comment_created': datetime.datetime(2021, 6, 15, 1, 33, 11, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 651384922, 'comment_body': ""The whole second sentence can be deleted. Not really relevant for the user. Next programmer will hopefully be able to find that page without specific link. The link itself is adding complexity, it contains `78`, so it needs to be changed for every minor version - in fact it is not matching this version. Alternative would be to link `variables.html` in the source code, but I don't think that's needed in the first place."", 'comment_created': datetime.datetime(2021, 6, 15, 1, 38, 46, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 651387405, 'comment_body': ""Run Pylint, so it tells you you should put a docstring here describing what is in this file (one sentence, it may appear in online documentation, aimed at users of the functions in the file).\r\n\r\nAlso at the very begging, please add file header with license:\r\n\r\nhttps://trac.osgeo.org/grass/wiki/Submitting/Python\r\nhttps://trac.osgeo.org/grass/wiki/Submitting/C\r\n\r\nI'm little torn between using `#` comments and a docsting for that statement, but given that the docsting is meant for user documentation, `#` comments seem more appropriate for the header information which is aiming at maintainers/authors."", 'comment_created': datetime.datetime(2021, 6, 15, 1, 46, 35, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 651389498, 'comment_body': 'This might be a good place to mention that it will be overwriting the existing maps of the same name, i.e., as it happens with Python variables - ideally in some way which is 1) not confusing Python users and 2) still warns GRASS users that the default is different than what GRASS usually does. ... or you can put a `# TODO:` comment above the function to get to this later.', 'comment_created': datetime.datetime(2021, 6, 15, 1, 52, 33, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 651405869, 'comment_body': 'Try to parse my comment again and stop the first sentence right with the first period-space :-)', 'comment_created': datetime.datetime(2021, 6, 15, 2, 40, 36, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 651688378, 'comment_body': 'Oh my gosh - I see it now. Thank you.', 'comment_created': datetime.datetime(2021, 6, 15, 11, 13, 6, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 651695772, 'comment_body': ""I wrote a short sentence to that effect. I'm not sure if it's the clearest - I can put a `#TODO:` comment to clarify later too?"", 'comment_created': datetime.datetime(2021, 6, 15, 11, 24, 34, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 651739484, 'comment_body': 'Good enough for now.', 'comment_created': datetime.datetime(2021, 6, 15, 12, 27, 11, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 652281026, 'comment_body': 'I meant to say: not needed! Search for `from __future__ import absolute_import` e.g., https://portingguide.readthedocs.io/en/latest/imports.html#absolute-imports', 'comment_created': datetime.datetime(2021, 6, 16, 1, 30, 17, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 652282626, 'comment_body': ""Let's follow the policy of having un-computed notebooks in this repo. The point is that you can compute them easily, right? They are different from the standard documentation (where we have images) and from the notebooks linked from the website which should really look as nice as possible, so they include images."", 'comment_created': datetime.datetime(2021, 6, 16, 1, 35, 23, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 652284058, 'comment_body': 'I don\'t think `font=""romans""` does what you expect. It uses the default font in GRASS display drivers which is not high quality. Perhaps `font=""serif""` would give a good result. However, `grass.jupyter` is about reasonable defaults, so why to set anything at all in this basic example and not go with `gj.display_settings()`? This API and example will change, but this comment applies to the new API as well.', 'comment_created': datetime.datetime(2021, 6, 16, 1, 40, 18, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 652284599, 'comment_body': 'Given my comment for the line below, this would be _Set default display settings_.', 'comment_created': datetime.datetime(2021, 6, 16, 1, 41, 57, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 652284956, 'comment_body': 'I like this. `help(gj.init)` is perhaps more elegant. You can also consider more Jupyter-ish `gj.init?`.', 'comment_created': datetime.datetime(2021, 6, 16, 1, 42, 59, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 652729022, 'comment_body': 'No comment needed here anymore after the last change.', 'comment_created': datetime.datetime(2021, 6, 16, 14, 10, 40, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 652731898, 'comment_body': 'Since you are doing changes anyway, what about changing all single quotes in the notebook to double quotes to follow Black? Looks much worse in the raw JSON, but it will be better when viewing notebook. No need to wonder if there is a difference or what is the style used.', 'comment_created': datetime.datetime(2021, 6, 16, 14, 13, 43, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 652733345, 'comment_body': ""This still needs to be removed. We don't keep Python 2 compatibility anymore."", 'comment_created': datetime.datetime(2021, 6, 16, 14, 15, 12, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 652889982, 'comment_body': 'Use double quotes, not single quotes.', 'comment_created': datetime.datetime(2021, 6, 16, 17, 14, 18, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 652983336, 'comment_body': ""I'm not sure how to handle those in the future, but right now, the best practice seem to keep here something simple without the conda complexities (if for no other reason, it is meant to be used also without conda), so revert this piece."", 'comment_created': datetime.datetime(2021, 6, 16, 19, 27, 29, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 652983530, 'comment_body': 'As above, revert this part.', 'comment_created': datetime.datetime(2021, 6, 16, 19, 27, 49, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}]","[{'commit_sha': '12f046ced6972a0224f05dc709c85b4ccfce568d', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '846e08371fd21267d0e3b113bb864287f032ece7', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '30da6ae5acae96ee5b09412934538366c651845e', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53afcbba8c703bfbc1cdeb85fba00d976df8e05c', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ec18408064efa947346d5b8c1e5ae638df79aee', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0cc7db7a9f2db874b454316730b5f125e656a73', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd68d01e9c5afa9f6e95e47f538605f0c82a66f64', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '785f55fd6763fa4c53e4f553a4850857be37c779', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '413b22a52c6d11bc57ef2bdbd8083d78ce11be4d', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db8523ebefb2b039938ec73b2a683d28448c6454', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66721218846d81c7d8865c9517f6a9807b8fb8e0', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10e25efc503806414cef6c236f2385179ea54193', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '426f7a466e562d759b07b8a57739708143882eae', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ea9eea7dfbf675b8e0c0f8080fd6a5cfcfeae44', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc7b9d7dd23776e47ce2865a6ab42ad95ebd78d0', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d21a9f9821702c0f69535ad37dd0527022f4c40', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1768397106d1fd942da3018dff52ed284b32842e', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ba23e79a676c7c4be46e6b4007e12cca9473b83', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a5efa1107e6e60372322332fea81e1cdd03cd76', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '334136283a909e580e7eaca38c675ded4ccffbbe', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cdd69acad7510eba88884ed2c13960c231cefccb', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff6314f4e8c5f546fa71ec25c32914855ac91530', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ce0388a49dec964bf2522c98b93f5fb14fb041f', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b4ce3179b39d4a9282940cfcca9b8a1f32452d1b', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '867c6df7e60a63fedfc21c397f4723ae13739506', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9175db6901fb30caa786abcdb7afd255b2e37eb', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a618f62930ed1cc3fec841bb28e238b13794a0c2', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '43586d00f43410808bf2a134c63d6ab7b4ff2a5f', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e5b49d411a714083229925045070cf751a4dec6', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b898d0dfb6c6927da90d77b99e836407d307342', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a7a65ec3ea2d6e8fe07abfd1448b6b373e9380f', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c7006e07bc197f773df609091ce0ed443f2e406', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f58dce19caf319420d775be6a26154bd341a9978', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c914aeafd619a9f9b45a5145699f4ec56d06665', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7b8f15f02960076fa547828b5204956b634577e', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '77710d4f18a4248cd900150a5d224362d67e8ebc', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea98a69779b2dd8367ff75519a182c922d38e565', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}]",Caitlin Haedrich,69856275,,User,,31,,5,13
666049016,Binder button,"This pull request is for the binder/Jupyter Notebook button discussed in https://github.com/OSGeo/grass/pull/1603.

I wasn't quite sure where in the repository to put the button so I added it to the readme. Comments, discussion or a better location welcome.

The intention of having a binder and Jupyter Notebook is eventually demonstrate how to use GRASS and some of the Jupyter-specific functions. As part of the Google Summer of Code project ""Improved Integration of Jupyter and GRASS (https://trac.osgeo.org/grass/wiki/GSoC/2021/JupyterAndGRASS), I plan to improve the launch of GRASS in Jupyter and the display functions.",True,1628,https://api.github.com/repos/OSGeo/grass/pulls/1628,https://github.com/OSGeo/grass/pull/1628,closed,110,2,2,18,7,13,2,0,"[{'name': 'enhancement'}, {'name': 'gsoc'}]",2021-06-09 16:00:52+00:00,2021-06-15 01:05:42+00:00,464690.0,"5 days, 9:04:50","[{'comment_id': 648651680, 'comment_body': '```suggestion\r\nLaunch this repository in binder and experiment with PyGRASS in Jupyter Notebooks by clicking the button below:\r\n```', 'comment_created': datetime.datetime(2021, 6, 9, 20, 12, 20, tzinfo=datetime.timezone.utc), 'commenter': 'neteler', 'type': 'User'}, {'comment_id': 648824424, 'comment_body': 'You need to generate the badge for this repo, not your fork.', 'comment_created': datetime.datetime(2021, 6, 10, 3, 33, 24, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 649193851, 'comment_body': ""Oops! Yes, I'll fix the link.\r\n\r\nAs for PyGRASS, I meant the whole Python API (I was still figuring out the difference)."", 'comment_created': datetime.datetime(2021, 6, 10, 13, 41, 1, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 649590914, 'comment_body': 'Jupyter Notebook or full JupyterLab?', 'comment_created': datetime.datetime(2021, 6, 10, 23, 17, 35, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 650333854, 'comment_body': ""The correct URL is:\r\n\r\n```suggestion\r\n[![Binder](https://camo.githubusercontent.com/581c077bdbc6ca6899c86d0acc6145ae85e9d80e6f805a1071793dbe48917982/68747470733a2f2f6d7962696e6465722e6f72672f62616467655f6c6f676f2e737667)](https://mybinder.org/v2/gh/OSGeo/grass/master?urlpath=lab%2Ftree%2Fdoc%2Fnotebooks%2Fexample_notebook.ipynb)\r\n```\r\n\r\n...well, that's at least the JupyterLab and file path part. The HEAD versus master part (right after `grass/`) is not 100% clear to me as I don't see it in the documentation, but my understanding is that HEAD in this case is the tip of default branch, hence the same as master. It is, however, on master branch, so saying master is probably more expected."", 'comment_created': datetime.datetime(2021, 6, 12, 2, 33, 48, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 650334269, 'comment_body': 'Currently, there is no high-res logo in the source code, but you can try `../../man/grass_logo.png`.', 'comment_created': datetime.datetime(2021, 6, 12, 2, 38, 28, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 650335153, 'comment_body': 'You need to use the code from your GSoC evaluation period notebook. This does not work in Python 3.', 'comment_created': datetime.datetime(2021, 6, 12, 2, 48, 33, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 650562433, 'comment_body': 'Just limit the changes which are unrelated. Delete this line.', 'comment_created': datetime.datetime(2021, 6, 13, 18, 42, 7, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 650565147, 'comment_body': 'binder -> Binder: I think in text they use Binder rather than binder which is in logos.', 'comment_created': datetime.datetime(2021, 6, 13, 19, 8, 42, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 650880784, 'comment_body': '```suggestion\r\n    ""There are several ways to use GRASS GIS. When using Python in a notebook, we usually find GRASS GIS Python packages first, import them, initialize GRASS GIS session, and set several variables useful for using GRASS GIS in a notebook.""\r\n```', 'comment_created': datetime.datetime(2021, 6, 14, 11, 56, 12, tzinfo=datetime.timezone.utc), 'commenter': 'veroandreo', 'type': 'User'}, {'comment_id': 650881069, 'comment_body': '```suggestion\r\n    ""This is a quick introduction to *GRASS GIS* in a *Jupyter Notebook* using the *Python* scripting language.\\n"",\r\n```', 'comment_created': datetime.datetime(2021, 6, 14, 11, 56, 40, tzinfo=datetime.timezone.utc), 'commenter': 'veroandreo', 'type': 'User'}, {'comment_id': 650989054, 'comment_body': 'Thanks @veroandreo !', 'comment_created': datetime.datetime(2021, 6, 14, 14, 17, 36, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 651199543, 'comment_body': 'I think it would be good to delete the heading. The paragraph/sentence will become just second paragraph/sentence in the document and as a ""call to action"" it is quite fitting at the end of an intro section.', 'comment_created': datetime.datetime(2021, 6, 14, 18, 59, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}]","[{'commit_sha': '877c7d497683683c8e56607dd193b5e91cfe2dd0', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c9b8552387b7fcf8e21b4175a508eb1411e1766', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd105e03262c39a30d533db245e2eada04b2f0c21', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1450e8b2327ce45e1df6d3f79e34eebc9de24653', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7772668b192d2c123c1321aa4a66d85ab12f1278', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ed39df570ac40ee2d94830f89ed43eaed50bd94', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03ea53cb489a4122fa55b467e038b0dcf5727f3d', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aff404fcf717ab1e6a6e7cceb277377ad9af2c65', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5239778aa5d1a35e93158fdad88ba98e71179e93', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cff18c349c72763b461fd826a0b990a4c4451dd6', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '670aea1d00738b82e198171ab4be1c39edcce30c', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7dca737e9c0a3c526381a8632d4423810509f916', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e57d47d041e341a6fe2b867ca8e4ed0ea7dd4e9b', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68bd966ec94fc07f5f7750c88c1e36e3a2fabc99', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3a4843c3eacdff3dd4f37346f8b3d46f967fa84', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '996bcaf40176d02013e2571b03bf7ee24ea2ee88', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62709d90e64622d13b96bc0eec2ebb7a32f6aca7', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db1d48726971a703828a1c8f3983665cb743bb81', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}]",Caitlin Haedrich,69856275,,User,,31,,5,13
666052942,Session initiations functions for Jupyter Notebooks,"This PR contains several functions that simplify and shorten the launch of GRASS in Jupyter Notebooks, written as part of my Google Summer of Code project (https://trac.osgeo.org/grass/wiki/GSoC/2021/JupyterAndGRASS). It also contains a Jupyter Notebook (which launches in Binder) to demonstrate usage of the functions.",True,1629,https://api.github.com/repos/OSGeo/grass/pulls/1629,https://github.com/OSGeo/grass/pull/1629,closed,209,1,6,37,5,46,2,0,"[{'name': 'enhancement'}, {'name': 'gsoc'}]",2021-06-09 16:06:08+00:00,2021-06-17 02:21:16+00:00,641708.0,"7 days, 10:15:08","[{'comment_id': 648788143, 'comment_body': '`render_immediate` -> `driver`. `GRASS_RENDER_IMMEDIATE` documentation actually says that the values ""tells the display library which driver to use,"" i.e., it is the display driver name, hence `driver` as the variable name. (You should get to the documentation just by searching for ""GRASS environment variables""). I think the word immediate in the name comes from the fact that it also tells the commands to use the driver right away instead of going through GUI. In any case, this is exactly something we want to hide.', 'comment_created': datetime.datetime(2021, 6, 10, 1, 33, 37, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 648789809, 'comment_body': 'Hardcoding `""TRUE""` here is probably what we want now since that results in the new images being [on top of what is currently in the file](https://grass.osgeo.org/grass78/manuals/cairodriver.html), i.e., rendering of multiple layers.\r\n\r\nThese things will be more clear with the more advanced interface, so let\'s leave `GRASS_LEGEND_FILE` and maybe others for later.', 'comment_created': datetime.datetime(2021, 6, 10, 1, 39, 25, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 648790317, 'comment_body': 'You already went through this, so maybe no need to mention it, but just run Black on your code before pushing it to get the right formatting right away.', 'comment_created': datetime.datetime(2021, 6, 10, 1, 40, 52, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 648791364, 'comment_body': 'This should be a docstring. Overall, all these functions should have docstrings. You can run Pylint on your code. GRASS does not enforce it (unlike Black and Flake8), but Pylint will make sure you documented your functions. The docstrings are good for reviews too as they document the purpose of a function/class.', 'comment_created': datetime.datetime(2021, 6, 10, 1, 44, 17, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 648793013, 'comment_body': 'As an experiment, you can try to run `isort --profile black` too ([sorts your imports](https://pypi.org/project/isort/)). We should consider using it for the whole code base, so trying it for new files is a good idea.', 'comment_created': datetime.datetime(2021, 6, 10, 1, 49, 40, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 648797146, 'comment_body': 'I think the big advantage of having a dedicated `init` function here is to set also the default there, so that it is only one step (call) for the user. In other words, I think `use_notebook_defaults` should be called in `init`.', 'comment_created': datetime.datetime(2021, 6, 10, 2, 2, 34, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 648798191, 'comment_body': '`set_notebook_defaults()` might be a more fitting name. At least at this point, it is setting some variables here and there and I think it is also more clear from the user perspective.', 'comment_created': datetime.datetime(2021, 6, 10, 2, 6, 26, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 648819477, 'comment_body': ""Suggestions for a different name are welcome, but `init` is okay.\r\n\r\nAs of now, the GISBASE environmental variable needs to be defined before `import grass.script as gs`, so we don't need ask user to pass it here as we can just take it from the environment here and remove the `gisbase` parameter. This could be done in `grass.script.setup.init` too, but let's do it here now since we are sure what is our context here.\r\n\r\nI'm not sure what to do with the db/loc/mapset trio, we had discussions in the past about passing just path to mapset versus the three variables. This might be the occasion to try that in a prominent part of the API."", 'comment_created': datetime.datetime(2021, 6, 10, 3, 16, 5, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 650329806, 'comment_body': 'Should be needed. We are Python 3 only now for 8.0. At least Python 3.6.', 'comment_created': datetime.datetime(2021, 6, 12, 1, 50, 23, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 650330109, 'comment_body': ""Let's leave all here, but we need to revisit this if it even makes sense. ps may not be a good match for notebooks and html is obsolete HTML. Both work differently from cairo and png. It's really mostly cairo and png as fallback if something is wrong."", 'comment_created': datetime.datetime(2021, 6, 12, 1, 53, 27, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 650330789, 'comment_body': '`grassdata_filepath` is too long and `filepath` part is not great. You can try:\r\n\r\n```\r\ninit(path, location=None, mapse=None):\r\n```\r\n\r\n`path` will be path to mapset or path to database if location and mapset were provided. To follow the new v8 GUI behavior of using PERMANENT mapset automatically, you could even allow providing only `path` and `location`, but not mapset and also if only `path` is provided and points to an existing location (`grass.grassdb` is your friend), assume mapset=PERMANENT.', 'comment_created': datetime.datetime(2021, 6, 12, 2, 0, 51, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 650331110, 'comment_body': 'To make the grass.jupyter subpackage really work, you will need to add it to makefiles, see the `Makefile` file in `grass/app` or `grass/grassdb` and also add the name to `Makefile` in the parent directory. It should be just copy-pasting, no real Makefile writing is needed, but let me know.', 'comment_created': datetime.datetime(2021, 6, 12, 2, 4, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 650331257, 'comment_body': ""You can manually edit the file to revert this change. Something like `git checkout master -- doc/notebooks/example_notebook.ipynb` should bring the old state too if you want to go the Git way, but commit all your changes before, I'm wring the command without checking it."", 'comment_created': datetime.datetime(2021, 6, 12, 2, 5, 59, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 650331665, 'comment_body': ""I have seen issues before with conda specifying its complex kernel name and then the notebook failing elsewhere because the very specific kernel is not available. I'm not sure if it is the case here or not, but we have to check this time to time and will need to modify these by hand if needed. Jupyter Notebooks are unfortunately not as great with Git as one would wish."", 'comment_created': datetime.datetime(2021, 6, 12, 2, 10, 3, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 650331926, 'comment_body': 'The name can be just `jupyter_integration` or `jupyter` or some other simple name.', 'comment_created': datetime.datetime(2021, 6, 12, 2, 13, 3, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 650332271, 'comment_body': 'Delete this file and then if you feel like you can manage some more Git today, find the `.gitignore` in the source code root directory and add `.ipynb_checkpoints` directory there.', 'comment_created': datetime.datetime(2021, 6, 12, 2, 16, 6, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 650535768, 'comment_body': 'I\'m not quite sure what this would look like (or that I understand correctly). Maybe like this:\r\n`def init(path, location=None):\r\n.\r\n.\r\n.\r\ngsetup.init(os.environ[""GISBASE""], path, location, mapset=""PERMANENT"")`\r\n\r\nIs that close to what you were thinking? If location is None, I think this would cause an error?', 'comment_created': datetime.datetime(2021, 6, 13, 14, 39, 20, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 650536574, 'comment_body': ""I think I just need to delete this file completely since I'm working on it in the binder-button PR."", 'comment_created': datetime.datetime(2021, 6, 13, 14, 45, 46, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 650562733, 'comment_body': 'Unnecessary change plus it ends an empty line to the end of the file (there is already a line ending at the end of the file, so you are adding a second one).', 'comment_created': datetime.datetime(2021, 6, 13, 18, 44, 40, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 650563537, 'comment_body': 'Making it same as on the master branch is what ""removes"" it from the PR. Deleting in PR is really deleting.', 'comment_created': datetime.datetime(2021, 6, 13, 18, 51, 58, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 650563942, 'comment_body': ""Let's just leave this for another PR, so that you get the basic things working quickly and can use them. It's not just about setting some combination of defaults, but rather about running series of checks to figure out what the user meant."", 'comment_created': datetime.datetime(2021, 6, 13, 18, 55, 57, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 651182828, 'comment_body': 'When this file got here? Delete it.', 'comment_created': datetime.datetime(2021, 6, 14, 18, 33, 18, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 651183996, 'comment_body': 'You really need to do the `git checkout` command to get the original version of this file or copy-paste the content from the _File changes_ here and place it to the empty file. Committing an empty file says I want this file to be empty.', 'comment_created': datetime.datetime(2021, 6, 14, 18, 35, 2, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 651185747, 'comment_body': 'If you are not going to handle the more fancy parameters here, delete the default values. Both location and mapset are mandatory form grass.script.setup.init, so they need to be mandatory here to when you are just passing them through. The name `path` can stay as is. It makes sense even in this context.', 'comment_created': datetime.datetime(2021, 6, 14, 18, 37, 43, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 651188547, 'comment_body': ""Let's rename this file to `setup`. `funcs` that's kind of clear as usually it is functions or functionality. `init.py` as file name would be little confusing in Python due to `__init__.py` file. Two words are fine especially for internal modules, but I don't have a better idea now, `setup` is okay, already used for the `init` function you are wrapping, so let's go with that."", 'comment_created': datetime.datetime(2021, 6, 14, 18, 41, 53, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 651191546, 'comment_body': 'The red in the `+` line marks the error in the JSON syntax which is what is causing the following message when you open the notebook:\r\n\r\n```\r\nFile Load Error for jupyter_integration.ipynb\r\nUnreadable Notebook: /home/jovyan/doc/notebooks/jupyter_integration.ipynb NotJSONError(\'Notebook does not appear to be JSON: \\\'{\\\\n ""cells"": [\\\\n {\\\\n ""cell_type"": ""m...\')\r\n```\r\n\r\nThe fix is putting back the `\\` for the double quote after `grassdata` which should cause the red-marked `\\` to be interpreted correctly.', 'comment_created': datetime.datetime(2021, 6, 14, 18, 46, 39, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 651380230, 'comment_body': ""When I change the name to setup.funcs.py, I get an error in the Jupyter Notebook:\r\n\r\n```\r\nModuleNotFoundError                       Traceback (most recent call last)\r\n<ipython-input-3-9dda28f7b25c> in <module>\r\n      1 import grass.script as gs\r\n----> 2 import grass.jupyter as gj\r\n\r\n~/dist.x86_64-pc-linux-gnu/etc/python/grass/jupyter/__init__.py in <module>\r\n      1 from __future__ import absolute_import\r\n      2 \r\n----> 3 from .setup.funcs import *\r\n\r\nModuleNotFoundError: No module named 'grass.jupyter.setup'\r\n```\r\n\r\nIs there a better/correct way to call setup.funcs that doesn't result in this error? Or should be named something different?\r\n\r\n"", 'comment_created': datetime.datetime(2021, 6, 15, 1, 23, 32, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 651383271, 'comment_body': ""I don't see anything expect the last character (last two actually), but there must be something different. Maybe the line endings. Try to get the original file from Git:\r\n\r\n```\r\ngit checkout upstream/master -- .../the/file/path/file/name.py\r\n```\r\n\r\nSome other things than upstream/master may work too. Ideally, _without_ updating to latest master branch first."", 'comment_created': datetime.datetime(2021, 6, 15, 1, 33, 11, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 651384922, 'comment_body': ""The whole second sentence can be deleted. Not really relevant for the user. Next programmer will hopefully be able to find that page without specific link. The link itself is adding complexity, it contains `78`, so it needs to be changed for every minor version - in fact it is not matching this version. Alternative would be to link `variables.html` in the source code, but I don't think that's needed in the first place."", 'comment_created': datetime.datetime(2021, 6, 15, 1, 38, 46, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 651387405, 'comment_body': ""Run Pylint, so it tells you you should put a docstring here describing what is in this file (one sentence, it may appear in online documentation, aimed at users of the functions in the file).\r\n\r\nAlso at the very begging, please add file header with license:\r\n\r\nhttps://trac.osgeo.org/grass/wiki/Submitting/Python\r\nhttps://trac.osgeo.org/grass/wiki/Submitting/C\r\n\r\nI'm little torn between using `#` comments and a docsting for that statement, but given that the docsting is meant for user documentation, `#` comments seem more appropriate for the header information which is aiming at maintainers/authors."", 'comment_created': datetime.datetime(2021, 6, 15, 1, 46, 35, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 651389498, 'comment_body': 'This might be a good place to mention that it will be overwriting the existing maps of the same name, i.e., as it happens with Python variables - ideally in some way which is 1) not confusing Python users and 2) still warns GRASS users that the default is different than what GRASS usually does. ... or you can put a `# TODO:` comment above the function to get to this later.', 'comment_created': datetime.datetime(2021, 6, 15, 1, 52, 33, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 651405869, 'comment_body': 'Try to parse my comment again and stop the first sentence right with the first period-space :-)', 'comment_created': datetime.datetime(2021, 6, 15, 2, 40, 36, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 651688378, 'comment_body': 'Oh my gosh - I see it now. Thank you.', 'comment_created': datetime.datetime(2021, 6, 15, 11, 13, 6, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 651695772, 'comment_body': ""I wrote a short sentence to that effect. I'm not sure if it's the clearest - I can put a `#TODO:` comment to clarify later too?"", 'comment_created': datetime.datetime(2021, 6, 15, 11, 24, 34, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 651739484, 'comment_body': 'Good enough for now.', 'comment_created': datetime.datetime(2021, 6, 15, 12, 27, 11, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 652281026, 'comment_body': 'I meant to say: not needed! Search for `from __future__ import absolute_import` e.g., https://portingguide.readthedocs.io/en/latest/imports.html#absolute-imports', 'comment_created': datetime.datetime(2021, 6, 16, 1, 30, 17, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 652282626, 'comment_body': ""Let's follow the policy of having un-computed notebooks in this repo. The point is that you can compute them easily, right? They are different from the standard documentation (where we have images) and from the notebooks linked from the website which should really look as nice as possible, so they include images."", 'comment_created': datetime.datetime(2021, 6, 16, 1, 35, 23, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 652284058, 'comment_body': 'I don\'t think `font=""romans""` does what you expect. It uses the default font in GRASS display drivers which is not high quality. Perhaps `font=""serif""` would give a good result. However, `grass.jupyter` is about reasonable defaults, so why to set anything at all in this basic example and not go with `gj.display_settings()`? This API and example will change, but this comment applies to the new API as well.', 'comment_created': datetime.datetime(2021, 6, 16, 1, 40, 18, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 652284599, 'comment_body': 'Given my comment for the line below, this would be _Set default display settings_.', 'comment_created': datetime.datetime(2021, 6, 16, 1, 41, 57, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 652284956, 'comment_body': 'I like this. `help(gj.init)` is perhaps more elegant. You can also consider more Jupyter-ish `gj.init?`.', 'comment_created': datetime.datetime(2021, 6, 16, 1, 42, 59, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 652729022, 'comment_body': 'No comment needed here anymore after the last change.', 'comment_created': datetime.datetime(2021, 6, 16, 14, 10, 40, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 652731898, 'comment_body': 'Since you are doing changes anyway, what about changing all single quotes in the notebook to double quotes to follow Black? Looks much worse in the raw JSON, but it will be better when viewing notebook. No need to wonder if there is a difference or what is the style used.', 'comment_created': datetime.datetime(2021, 6, 16, 14, 13, 43, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 652733345, 'comment_body': ""This still needs to be removed. We don't keep Python 2 compatibility anymore."", 'comment_created': datetime.datetime(2021, 6, 16, 14, 15, 12, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 652889982, 'comment_body': 'Use double quotes, not single quotes.', 'comment_created': datetime.datetime(2021, 6, 16, 17, 14, 18, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 652983336, 'comment_body': ""I'm not sure how to handle those in the future, but right now, the best practice seem to keep here something simple without the conda complexities (if for no other reason, it is meant to be used also without conda), so revert this piece."", 'comment_created': datetime.datetime(2021, 6, 16, 19, 27, 29, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 652983530, 'comment_body': 'As above, revert this part.', 'comment_created': datetime.datetime(2021, 6, 16, 19, 27, 49, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}]","[{'commit_sha': '12f046ced6972a0224f05dc709c85b4ccfce568d', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '846e08371fd21267d0e3b113bb864287f032ece7', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '30da6ae5acae96ee5b09412934538366c651845e', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53afcbba8c703bfbc1cdeb85fba00d976df8e05c', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ec18408064efa947346d5b8c1e5ae638df79aee', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0cc7db7a9f2db874b454316730b5f125e656a73', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd68d01e9c5afa9f6e95e47f538605f0c82a66f64', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '785f55fd6763fa4c53e4f553a4850857be37c779', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '413b22a52c6d11bc57ef2bdbd8083d78ce11be4d', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db8523ebefb2b039938ec73b2a683d28448c6454', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66721218846d81c7d8865c9517f6a9807b8fb8e0', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10e25efc503806414cef6c236f2385179ea54193', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '426f7a466e562d759b07b8a57739708143882eae', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ea9eea7dfbf675b8e0c0f8080fd6a5cfcfeae44', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc7b9d7dd23776e47ce2865a6ab42ad95ebd78d0', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d21a9f9821702c0f69535ad37dd0527022f4c40', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1768397106d1fd942da3018dff52ed284b32842e', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ba23e79a676c7c4be46e6b4007e12cca9473b83', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a5efa1107e6e60372322332fea81e1cdd03cd76', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '334136283a909e580e7eaca38c675ded4ccffbbe', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cdd69acad7510eba88884ed2c13960c231cefccb', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff6314f4e8c5f546fa71ec25c32914855ac91530', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ce0388a49dec964bf2522c98b93f5fb14fb041f', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b4ce3179b39d4a9282940cfcca9b8a1f32452d1b', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '867c6df7e60a63fedfc21c397f4723ae13739506', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9175db6901fb30caa786abcdb7afd255b2e37eb', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a618f62930ed1cc3fec841bb28e238b13794a0c2', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '43586d00f43410808bf2a134c63d6ab7b4ff2a5f', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e5b49d411a714083229925045070cf751a4dec6', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b898d0dfb6c6927da90d77b99e836407d307342', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a7a65ec3ea2d6e8fe07abfd1448b6b373e9380f', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c7006e07bc197f773df609091ce0ed443f2e406', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f58dce19caf319420d775be6a26154bd341a9978', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c914aeafd619a9f9b45a5145699f4ec56d06665', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7b8f15f02960076fa547828b5204956b634577e', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '77710d4f18a4248cd900150a5d224362d67e8ebc', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea98a69779b2dd8367ff75519a182c922d38e565', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}]",Caitlin Haedrich,69856275,,User,,31,,5,13
674126685,Jupyter: Non-interactive display,"This is a set of functions to display non-interactive maps in Jupyter Notebooks, as proposed in the Google Summer of Code project, [Improved Integration of GRASS and Jupyter Notebooks](https://trac.osgeo.org/grass/wiki/GSoC/2021/JupyterAndGRASS). The goal of these functions is to make the display of GRASS maps more intuitive in Jupyter Notebooks. You can test the functionality by launching the repository in Binder here:

https://mybinder.org/v2/gh/chaedri/grass/non-interactive-display?urlpath=lab%2Ftree%2Fdoc%2Fnotebooks%2Fjupyter_integration.ipynb",True,1668,https://api.github.com/repos/OSGeo/grass/pulls/1668,https://github.com/OSGeo/grass/pull/1668,closed,139,41,5,22,1,51,2,0,"[{'name': 'enhancement'}, {'name': 'gsoc'}]",2021-06-21 00:35:34+00:00,2021-07-02 18:25:31+00:00,1014597.0,"11 days, 17:49:57","[{'comment_id': 655064892, 'comment_body': 'Probably won\'t be part of this PR at the end and not a big deal in Binder, but in general, this will need to be a lazy import, only in the function which needs it unless you make the ""interactive"" part a separate module and class which may or may not happen in the future. As in the case of `from IPython.display import Image`.', 'comment_created': datetime.datetime(2021, 6, 21, 4, 23, 6, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 655065737, 'comment_body': 'Classes should be CamelCase, just run Pylint to get all these complaints sooner :-)', 'comment_created': datetime.datetime(2021, 6, 21, 4, 26, 35, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 655066221, 'comment_body': 'This is a common style for these short docstrings:\r\n\r\n```suggestion\r\n        """"""Adds a vector to the display""""""\r\n```', 'comment_created': datetime.datetime(2021, 6, 21, 4, 28, 28, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 655066982, 'comment_body': 'Only the last line seems to really ""counts"" here, so you need decide or do two different ones. I would say only one is needed or push the second one later in the nb.', 'comment_created': datetime.datetime(2021, 6, 21, 4, 31, 10, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 655067526, 'comment_body': 'I would like to see the map first and the list only later, but that might be just me.', 'comment_created': datetime.datetime(2021, 6, 21, 4, 33, 23, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 655068464, 'comment_body': 'Add env parameter and when set, use it instead of os.environ and also pass it to the other commands.', 'comment_created': datetime.datetime(2021, 6, 21, 4, 37, 11, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 655068769, 'comment_body': 'The defaults are probably better left to d.vect itself unless we have good reasons to have them here (different values, need for documenting them right here).', 'comment_created': datetime.datetime(2021, 6, 21, 4, 38, 22, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 655069225, 'comment_body': ""Since this actually modified the raster, this may not be what is expected from the display function. Unfortunately, it also means that you need to do it ahead of time and can't set it here. I'm interested what everybody thinks about this."", 'comment_created': datetime.datetime(2021, 6, 21, 4, 40, 9, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 655368060, 'comment_body': 'I tested the notebook, looks nice ;)\r\nIndeed, it seems odd to me to be forced to set a color when d.* modules should just read the defined color table or use the default, setting a color should be optional IMHO', 'comment_created': datetime.datetime(2021, 6, 21, 13, 18, 11, tzinfo=datetime.timezone.utc), 'commenter': 'veroandreo', 'type': 'User'}, {'comment_id': 656482379, 'comment_body': ""> I had it the other way because, if you weren't familiar with the spm dataset, seeing the contents would be a pre-requisite to knowing how to modify/play with the code below."", 'comment_created': datetime.datetime(2021, 6, 22, 18, 31, 52, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 656554339, 'comment_body': ""Right, but I would say it is not a prerequisite to run the code. You can then executed the next cell to see what else is in the dataset and then go back and play. The other consideration is showing images versus text first. What do you want to see? This of course depends on the target audience and purpose of the notebook which I'm not sure if we decided. Promotion of the Jupyter integration is probably a good goal at this point for this notebook."", 'comment_created': datetime.datetime(2021, 6, 22, 20, 26, 14, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 656555199, 'comment_body': 'GrassRenderer and ideally one line including the triple quotes.', 'comment_created': datetime.datetime(2021, 6, 22, 20, 27, 38, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 656556060, 'comment_body': 'Also, if you just use `**kwargs`, you right away support all what d.vect supports.', 'comment_created': datetime.datetime(2021, 6, 22, 20, 28, 59, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 656556467, 'comment_body': 'Usually PNG I think.', 'comment_created': datetime.datetime(2021, 6, 22, 20, 29, 38, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 656566936, 'comment_body': ""Please not the reason for lazy import: We don't want Jupyter to be an import-time dependency. "", 'comment_created': datetime.datetime(2021, 6, 22, 20, 46, 12, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 656610951, 'comment_body': 'Should be sufficient to use either p or g flag.', 'comment_created': datetime.datetime(2021, 6, 22, 21, 59, 20, tzinfo=datetime.timezone.utc), 'commenter': 'ninsbl', 'type': 'User'}, {'comment_id': 656613166, 'comment_body': 'Would `spm_map.raster` be for new users more intuitive than `spm_map.d_rast` (or `spm_map.vector` instead of `spm_map.d_vect`)...?', 'comment_created': datetime.datetime(2021, 6, 22, 22, 3, 55, tzinfo=datetime.timezone.utc), 'commenter': 'ninsbl', 'type': 'User'}, {'comment_id': 656614541, 'comment_body': 'Agreed with Vero here...', 'comment_created': datetime.datetime(2021, 6, 22, 22, 6, 58, tzinfo=datetime.timezone.utc), 'commenter': 'ninsbl', 'type': 'User'}, {'comment_id': 656615573, 'comment_body': 'For listing of data also:\r\nhttps://grass.osgeo.org/grass79/manuals/libpython/script.html?highlight=list#script.core.list_strings\r\ncould be used...', 'comment_created': datetime.datetime(2021, 6, 22, 22, 9, 10, tzinfo=datetime.timezone.utc), 'commenter': 'ninsbl', 'type': 'User'}, {'comment_id': 656643455, 'comment_body': ""That's true, the list takes up a lot of space and maybe the more likely workflow is to run the whole notebook then go back and modify. I'm convinced - I'll switch it. \r\n\r\n@ninsbl That's a cool function! I'll try it out."", 'comment_created': datetime.datetime(2021, 6, 22, 23, 16, 1, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 656646051, 'comment_body': ""I'm not 100% sure what this would look like. Is this what you're thinking?\r\n\r\n`def __init__(self, env=None, ... ):`\r\n\r\nWhat would go in the function then? I imagine and if-else statement?"", 'comment_created': datetime.datetime(2021, 6, 22, 23, 22, 53, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 656646993, 'comment_body': ""This is a great question. I think it would be easier for new users but it also goes against the GRASS convention and might be less intuitive for experienced GRASS users... I'd be curious to hear what others think. I can write it either way."", 'comment_created': datetime.datetime(2021, 6, 22, 23, 25, 30, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 656687583, 'comment_body': ""Exactly. If not env then os.environ. Look to grass.script for more examples, but here, it's just that."", 'comment_created': datetime.datetime(2021, 6, 23, 1, 12, 18, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 656690254, 'comment_body': 'In my previous comment, I was thinking about storing (the reference to) it as `self._env`. However, to make this work in parallel (so that two of these things can run in parallel) we need to store a copy. See:\r\n\r\nhttps://github.com/ncsu-geoforall-lab/gis714-2021-tangible-landscape/blob/main/website/render_activities.py#L49', 'comment_created': datetime.datetime(2021, 6, 23, 1, 20, 45, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 656691532, 'comment_body': 'With run_command, nothing is printed (as expected), so the `-p` is useless. Either -g and parse_command or nothing. I think nothing is fine here. For reading region to Python we have a better function anyway (`region`).', 'comment_created': datetime.datetime(2021, 6, 23, 1, 23, 45, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 656692728, 'comment_body': 'Just add that with the rest of folium support.', 'comment_created': datetime.datetime(2021, 6, 23, 1, 26, 53, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 656693385, 'comment_body': 'There is no reason to keep display_settings function around. Instance of GrassRenderer should be sufficient. Delete it and move things here as in:\r\n\r\nhttps://github.com/ncsu-geoforall-lab/gis714-2021-tangible-landscape/blob/main/website/render_activities.py#L47', 'comment_created': datetime.datetime(2021, 6, 23, 1, 28, 51, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 656695210, 'comment_body': 'At least make the filename for the image modifiable as in \r\n\r\nhttps://github.com/ncsu-geoforall-lab/gis714-2021-tangible-landscape/blob/main/website/render_activities.py#L50\r\n\r\nUsing `""map.png""` when not provided is fine for now, but eventually (i.e., in a subsequent PR), the automatic option should be probably some temporary file somewhere.', 'comment_created': datetime.datetime(2021, 6, 23, 1, 34, 35, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 656703480, 'comment_body': 'I also think this is a great question. Even the name `GrassRenderer` is not necessary set. `spm_map` was little strange at first, but I think it is actually okay.\r\n\r\nIn a [GrassRenderer](https://github.com/ncsu-geoforall-lab/gis714-2021-tangible-landscape/blob/main/website/render_activities.py#L41) class I wrote for a different purpose, I had only a `run` method which just executed whatever command (like `run_command` does) since I wanted to pass any `d.*` commands which I was reading and [running programmatically](https://github.com/ncsu-geoforall-lab/gis714-2021-tangible-landscape/blob/main/website/render_activities.py#L233). I guess you could try to enforce that the command name must start with `d` so that it is not misused, but I\'m not convinced it is needed.\r\n\r\n`d_rast`, `d_vect` is a sure middle ground, but it requires either all modules to be mirrored or implementing the ""resolve a missing attribute"" magic as in PyGRASS module shortcuts to support all commands. It would be harder to implement what I did above using just this because you need to translate what you are reading to function calls, but it is doable in Python and perhaps a fringe use case in Jupyter.\r\n\r\n`vector`, `raster` may work well as a hand-picked subset in addition to a more general interface or if you conceptualize the whole thing as a ""display"" (`display = GrassDisplay()`) where d.vect translates to `display.vector()`. Yet another approach is to have these as a common API with the folium-based renderer in parallel with the `d_vect` style.', 'comment_created': datetime.datetime(2021, 6, 23, 1, 59, 43, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 656707275, 'comment_body': 'Perhaps the issue is not as much ""being forced to set a color"" (defaults can be changed) as that the expectation is that you set the color at this point. And perhaps that the reason @chaedri wrote it initially this way. Like for vectors. Not Jupyter specific, but it is more visible here.\r\n\r\nI have never tried that, but even with the current system, you could implement ad-hoc/temporary color tables for rasters, I think. You create a temporary mapset, set color table for raster of interest there (raster color tables are per-mapset), display  the raster from that mapset, so the mapset-specific color table kicks in. I\'m not suggesting @chaedri should do this :-)', 'comment_created': datetime.datetime(2021, 6, 23, 2, 9, 52, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 656723576, 'comment_body': 'Typo: I meant ""note"" the reason. But I\'m fine with Jupyter as an import-time dependency in grass.jupyter. Makes sense.', 'comment_created': datetime.datetime(2021, 6, 23, 3, 0, 55, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 656994540, 'comment_body': 'In the introduction it is probably worth mentioning where to find more information on what one can do with GRASS GIS APIs, like:\r\n* Manuals in general: https://grass.osgeo.org/grass-stable/manuals/\r\n* Python API: https://grass.osgeo.org/grass-stable/manuals/libpython/\r\n* Module manuals: https://grass.osgeo.org/grass-stable/manuals/full_index.html (or https://grass.osgeo.org/grass78/manuals/graphical_index.html)\r\n\r\nIn addition to listing data, also modules could be listed (at the end):\r\n`print(gs.read_command(""g.search.modules"", flags=g""))`', 'comment_created': datetime.datetime(2021, 6, 23, 11, 13, 22, tzinfo=datetime.timezone.utc), 'commenter': 'ninsbl', 'type': 'User'}, {'comment_id': 657924221, 'comment_body': 'What about module shortcuts here?\r\nhttps://grass.osgeo.org/grass79/manuals/libpython/pygrass.modules.html?highlight=shortcut#module-pygrass.modules.shortcuts\r\n\r\nIf there is value in making the API as much as possible compatibel with e.g. `folium` that should probably go into consideration for the non-interactive API as well?\r\n\r\nI have to admitt that I am not familiar with folium. But for passing vector data to folium, that we discussed earlier, [viter](https://grass.osgeo.org/grass78/manuals/libpython/pygrass.vector.html?highlight=viter#pygrass.vector.VectorTopo.viter) from pygrass maybe an option too? There you could request only geometries within the map window of folium with the [find]() method. ', 'comment_created': datetime.datetime(2021, 6, 24, 12, 59, 37, tzinfo=datetime.timezone.utc), 'commenter': 'ninsbl', 'type': 'User'}, {'comment_id': 659229751, 'comment_body': ""@ninsbl I was thinking this might be better placed in the example notebook, since this one is more focused in Jupyter-GRASS integration. So, I made a new PR with those changes here: https://github.com/OSGeo/grass/pull/1686\r\n\r\nYou can also see the changes in binder here:\r\nhttps://mybinder.org/v2/gh/chaedri/grass/example_notebook_update?urlpath=lab%2Ftree%2Fdoc%2Fnotebooks%2Fexample_notebook.ipynb\r\n\r\nI'm undecided on whether listing all the modules is helpful - perhaps since the manual link is there, the list is unnecessary?"", 'comment_created': datetime.datetime(2021, 6, 26, 22, 14, 42, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 659248433, 'comment_body': 'Although `{}` is a possible user-provided dictionary distinct from the default None, practically `{}` is still ""nothing"" because this is not an arbitrary dictionary, it is the environment dictionary and that cannot be completely empty (there must be some variables in the environment for the sub-processes to work). So, I think simply testing `if env` or `if not env` is enough. See e.g. [grass/script/vector.py:378](https://github.com/OSGeo/grass/blob/master/python/grass/script/vector.py#L378) (you can see it is at least okayish practice since, when you do _Blame_, it is from a recent commit dbeb5f36cb320aba1bb22a8384d10524f568728f).\r\n\r\n', 'comment_created': datetime.datetime(2021, 6, 27, 1, 54, 17, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 659248725, 'comment_body': 'This is a tricky decision, but since we may want more than one of these GrassRenderers (instances or even similar classes like the interactive one), we should not modify the global environment, but only the copy, so `copy()` needs to come first as in:\r\n\r\nhttps://github.com/ncsu-geoforall-lab/gis714-2021-tangible-landscape/blob/main/website/render_activities.py#L50\r\n\r\n(The tricky part is that we are trying to guess the possible use cases and make the implementation robust.)', 'comment_created': datetime.datetime(2021, 6, 27, 1, 57, 42, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 659249172, 'comment_body': 'env is unused except for the if statement. `self._env = env`?', 'comment_created': datetime.datetime(2021, 6, 27, 2, 4, 8, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 659249257, 'comment_body': 'Code duplication and missing variables.', 'comment_created': datetime.datetime(2021, 6, 27, 2, 5, 4, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 659249427, 'comment_body': 'You need to pass the environment as in:\r\n\r\nhttps://github.com/ncsu-geoforall-lab/gis714-2021-tangible-landscape/blob/main/activities/activity_haedrich.py#L33', 'comment_created': datetime.datetime(2021, 6, 27, 2, 7, 57, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 659249487, 'comment_body': 'Now you added filename as a parameter, so you should reflect that here.', 'comment_created': datetime.datetime(2021, 6, 27, 2, 8, 31, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 659254886, 'comment_body': 'Yep, module shortcuts is what I meant by the ""resolve a missing attribute"" magic.\r\n\r\nI suggest to:\r\n\r\n1. Add `run(name, **kwargs)` now to:\r\n    a. Support any command right away.\r\n    b. Have a single place where the actual subprocess call is handled (i.e., use this method from the other methods).\r\n2. Go with `d_rast` and `d_vect` or `raster` and `vector` (whatever seems better to you @chaedri) in this PR to have a nice interface.\r\n3. Later, in another PR, adding more (all) `d_vect`-like methods later either explicitly defined, dynamically generated (`self.d_vect = some_locally_defined_function`), or through custom, simpler version of module shortcuts. I\'m saying `d_vect`-like in a broad sense: they could be done like `display.vect` similarly to what I mentioned above. However, I think closer to module names, i.e., `d_vect` makes more sense here as it will clearly translate to all display module names.\r\n4. Leave the compatibility with interactive display for later (again another PR) when the interactive display is somewhat finished. I think switching between displays just by changing the class name but not the rest of your code would be nice.\r\n', 'comment_created': datetime.datetime(2021, 6, 27, 3, 20, 6, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 660731546, 'comment_body': 'Pylint may give you this complaint too: the second condition is negation of the first one which is in this context best expressed as `else:`.', 'comment_created': datetime.datetime(2021, 6, 29, 15, 28, 37, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 660733358, 'comment_body': 'Let\'s get ahead of the game and support `Path` here by converting this to `str` as we do with the numbers. This is how it behaves:\r\n\r\n```\r\n> str(Path(""/home""))\r\n\'/home\'\r\n```', 'comment_created': datetime.datetime(2021, 6, 29, 15, 30, 37, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 660733906, 'comment_body': 'Use `self.run()` here too.', 'comment_created': datetime.datetime(2021, 6, 29, 15, 31, 12, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 660735228, 'comment_body': 'See ""raising exceptions"" and ""reporting errors in Python"".', 'comment_created': datetime.datetime(2021, 6, 29, 15, 32, 46, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 660736963, 'comment_body': 'Make a copy here too. Easier to document. More predictable for the user. It also makes the environment private, so more control in the implementation.', 'comment_created': datetime.datetime(2021, 6, 29, 15, 34, 40, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 660767915, 'comment_body': 'So, the line would read: `self._env[""GRASS_RENDER_FILE""] = str(Path(filename))` ?', 'comment_created': datetime.datetime(2021, 6, 29, 16, 11, 9, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 660809229, 'comment_body': 'No, no need to construct Path. The point is to handle the case when user passes filename as an Path object. Try the behavior in an interactive console. The point is to handle these two or three cases:\r\n\r\n```python\r\nfile = Path(""/base/dir"") / more_dirs / added_here\r\nrenderer1 = GrassRenderer(filename=file)\r\nrenderer2 = GrassRenderer(filename=""map2.png"")\r\nrenderer3 = GrassRenderer(filename=os.path.join(""base/dir"", ""map2.png""))\r\n```', 'comment_created': datetime.datetime(2021, 6, 29, 17, 8, 11, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 660811929, 'comment_body': 'See what is the most fitting exception type for this problem, probably some value or attribute error whatever is the actual name.', 'comment_created': datetime.datetime(2021, 6, 29, 17, 12, 2, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 660889316, 'comment_body': 'I couldn\'t get any of those to produce an error. But, I think I understand: line 38 should read `self._env[""GRASS_RENDER_FILE""] = str(filename)`.', 'comment_created': datetime.datetime(2021, 6, 29, 19, 3, 55, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 661103080, 'comment_body': 'Right, no error, there is just no point in making the filename a Path object if it is not (well, at least for this line, we need Path later). ', 'comment_created': datetime.datetime(2021, 6, 30, 3, 27, 32, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}]","[{'commit_sha': '154676c470db24471ab5d7ff5b347c16c674ce47', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '33c713e7438eaf70684c4106e85872b26c573797', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '04258ae3cf2a6cfc029dfc659639714e0a577f1a', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dab9fe06ed37008a1055ee8a1341294bc937dc38', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51fd0be950caaaacdffd8ecff7b8a81459f45585', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87711cf1c562ddcd0d6bc5b8d5cc7db4b0ad545e', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd63dd4d73153005fc871f3ae8165f16861c13192', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc1955c73454c2adab4dabe3922f00d3c2c323d2', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '35cacc933f4c793d1fe130e6fbaa0f73485cf069', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48073f08aec1ac7b40131f28c09d2183ee56b8b9', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56e17c5c5c54a23e28bef72d808b4bf1022d98fb', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34eecf14cddc2ddf0293361d0387688720656b6e', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12494090e61d278085ee76a807d4bddf2119bc55', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d3a15b26cc34ae51fc6256e57c0287b4cdaa65e', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0dba5556590564892cdc14e41b927fbdcd03085e', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cabc32cfff12cb8d003947053d45bf375cfe19d3', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '23d5a3167414cf6c4a5318693469670df372764d', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '27f97fe88854d8cc62531df6f726df1ffc5f8387', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f0aec989e0ccb7b4d54a33e41c2b8afb039673f7', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49167a443588fd98094dcff33e65abf80d3517a0', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '555f918ad03e122178828c744ad064cc53387783', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf68943ac8a81041be3dbc4ecf4f33c37401aecf', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}]",Caitlin Haedrich,69856275,,User,,31,,5,13
674126685,Jupyter: Non-interactive display,"This is a set of functions to display non-interactive maps in Jupyter Notebooks, as proposed in the Google Summer of Code project, [Improved Integration of GRASS and Jupyter Notebooks](https://trac.osgeo.org/grass/wiki/GSoC/2021/JupyterAndGRASS). The goal of these functions is to make the display of GRASS maps more intuitive in Jupyter Notebooks. You can test the functionality by launching the repository in Binder here:

https://mybinder.org/v2/gh/chaedri/grass/non-interactive-display?urlpath=lab%2Ftree%2Fdoc%2Fnotebooks%2Fjupyter_integration.ipynb",True,1668,https://api.github.com/repos/OSGeo/grass/pulls/1668,https://github.com/OSGeo/grass/pull/1668,closed,139,41,5,22,1,51,2,0,"[{'name': 'enhancement'}, {'name': 'gsoc'}]",2021-06-21 00:35:34+00:00,2021-07-02 18:25:31+00:00,1014597.0,"11 days, 17:49:57","[{'comment_id': 655064892, 'comment_body': 'Probably won\'t be part of this PR at the end and not a big deal in Binder, but in general, this will need to be a lazy import, only in the function which needs it unless you make the ""interactive"" part a separate module and class which may or may not happen in the future. As in the case of `from IPython.display import Image`.', 'comment_created': datetime.datetime(2021, 6, 21, 4, 23, 6, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 655065737, 'comment_body': 'Classes should be CamelCase, just run Pylint to get all these complaints sooner :-)', 'comment_created': datetime.datetime(2021, 6, 21, 4, 26, 35, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 655066221, 'comment_body': 'This is a common style for these short docstrings:\r\n\r\n```suggestion\r\n        """"""Adds a vector to the display""""""\r\n```', 'comment_created': datetime.datetime(2021, 6, 21, 4, 28, 28, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 655066982, 'comment_body': 'Only the last line seems to really ""counts"" here, so you need decide or do two different ones. I would say only one is needed or push the second one later in the nb.', 'comment_created': datetime.datetime(2021, 6, 21, 4, 31, 10, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 655067526, 'comment_body': 'I would like to see the map first and the list only later, but that might be just me.', 'comment_created': datetime.datetime(2021, 6, 21, 4, 33, 23, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 655068464, 'comment_body': 'Add env parameter and when set, use it instead of os.environ and also pass it to the other commands.', 'comment_created': datetime.datetime(2021, 6, 21, 4, 37, 11, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 655068769, 'comment_body': 'The defaults are probably better left to d.vect itself unless we have good reasons to have them here (different values, need for documenting them right here).', 'comment_created': datetime.datetime(2021, 6, 21, 4, 38, 22, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 655069225, 'comment_body': ""Since this actually modified the raster, this may not be what is expected from the display function. Unfortunately, it also means that you need to do it ahead of time and can't set it here. I'm interested what everybody thinks about this."", 'comment_created': datetime.datetime(2021, 6, 21, 4, 40, 9, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 655368060, 'comment_body': 'I tested the notebook, looks nice ;)\r\nIndeed, it seems odd to me to be forced to set a color when d.* modules should just read the defined color table or use the default, setting a color should be optional IMHO', 'comment_created': datetime.datetime(2021, 6, 21, 13, 18, 11, tzinfo=datetime.timezone.utc), 'commenter': 'veroandreo', 'type': 'User'}, {'comment_id': 656482379, 'comment_body': ""> I had it the other way because, if you weren't familiar with the spm dataset, seeing the contents would be a pre-requisite to knowing how to modify/play with the code below."", 'comment_created': datetime.datetime(2021, 6, 22, 18, 31, 52, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 656554339, 'comment_body': ""Right, but I would say it is not a prerequisite to run the code. You can then executed the next cell to see what else is in the dataset and then go back and play. The other consideration is showing images versus text first. What do you want to see? This of course depends on the target audience and purpose of the notebook which I'm not sure if we decided. Promotion of the Jupyter integration is probably a good goal at this point for this notebook."", 'comment_created': datetime.datetime(2021, 6, 22, 20, 26, 14, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 656555199, 'comment_body': 'GrassRenderer and ideally one line including the triple quotes.', 'comment_created': datetime.datetime(2021, 6, 22, 20, 27, 38, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 656556060, 'comment_body': 'Also, if you just use `**kwargs`, you right away support all what d.vect supports.', 'comment_created': datetime.datetime(2021, 6, 22, 20, 28, 59, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 656556467, 'comment_body': 'Usually PNG I think.', 'comment_created': datetime.datetime(2021, 6, 22, 20, 29, 38, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 656566936, 'comment_body': ""Please not the reason for lazy import: We don't want Jupyter to be an import-time dependency. "", 'comment_created': datetime.datetime(2021, 6, 22, 20, 46, 12, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 656610951, 'comment_body': 'Should be sufficient to use either p or g flag.', 'comment_created': datetime.datetime(2021, 6, 22, 21, 59, 20, tzinfo=datetime.timezone.utc), 'commenter': 'ninsbl', 'type': 'User'}, {'comment_id': 656613166, 'comment_body': 'Would `spm_map.raster` be for new users more intuitive than `spm_map.d_rast` (or `spm_map.vector` instead of `spm_map.d_vect`)...?', 'comment_created': datetime.datetime(2021, 6, 22, 22, 3, 55, tzinfo=datetime.timezone.utc), 'commenter': 'ninsbl', 'type': 'User'}, {'comment_id': 656614541, 'comment_body': 'Agreed with Vero here...', 'comment_created': datetime.datetime(2021, 6, 22, 22, 6, 58, tzinfo=datetime.timezone.utc), 'commenter': 'ninsbl', 'type': 'User'}, {'comment_id': 656615573, 'comment_body': 'For listing of data also:\r\nhttps://grass.osgeo.org/grass79/manuals/libpython/script.html?highlight=list#script.core.list_strings\r\ncould be used...', 'comment_created': datetime.datetime(2021, 6, 22, 22, 9, 10, tzinfo=datetime.timezone.utc), 'commenter': 'ninsbl', 'type': 'User'}, {'comment_id': 656643455, 'comment_body': ""That's true, the list takes up a lot of space and maybe the more likely workflow is to run the whole notebook then go back and modify. I'm convinced - I'll switch it. \r\n\r\n@ninsbl That's a cool function! I'll try it out."", 'comment_created': datetime.datetime(2021, 6, 22, 23, 16, 1, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 656646051, 'comment_body': ""I'm not 100% sure what this would look like. Is this what you're thinking?\r\n\r\n`def __init__(self, env=None, ... ):`\r\n\r\nWhat would go in the function then? I imagine and if-else statement?"", 'comment_created': datetime.datetime(2021, 6, 22, 23, 22, 53, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 656646993, 'comment_body': ""This is a great question. I think it would be easier for new users but it also goes against the GRASS convention and might be less intuitive for experienced GRASS users... I'd be curious to hear what others think. I can write it either way."", 'comment_created': datetime.datetime(2021, 6, 22, 23, 25, 30, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 656687583, 'comment_body': ""Exactly. If not env then os.environ. Look to grass.script for more examples, but here, it's just that."", 'comment_created': datetime.datetime(2021, 6, 23, 1, 12, 18, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 656690254, 'comment_body': 'In my previous comment, I was thinking about storing (the reference to) it as `self._env`. However, to make this work in parallel (so that two of these things can run in parallel) we need to store a copy. See:\r\n\r\nhttps://github.com/ncsu-geoforall-lab/gis714-2021-tangible-landscape/blob/main/website/render_activities.py#L49', 'comment_created': datetime.datetime(2021, 6, 23, 1, 20, 45, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 656691532, 'comment_body': 'With run_command, nothing is printed (as expected), so the `-p` is useless. Either -g and parse_command or nothing. I think nothing is fine here. For reading region to Python we have a better function anyway (`region`).', 'comment_created': datetime.datetime(2021, 6, 23, 1, 23, 45, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 656692728, 'comment_body': 'Just add that with the rest of folium support.', 'comment_created': datetime.datetime(2021, 6, 23, 1, 26, 53, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 656693385, 'comment_body': 'There is no reason to keep display_settings function around. Instance of GrassRenderer should be sufficient. Delete it and move things here as in:\r\n\r\nhttps://github.com/ncsu-geoforall-lab/gis714-2021-tangible-landscape/blob/main/website/render_activities.py#L47', 'comment_created': datetime.datetime(2021, 6, 23, 1, 28, 51, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 656695210, 'comment_body': 'At least make the filename for the image modifiable as in \r\n\r\nhttps://github.com/ncsu-geoforall-lab/gis714-2021-tangible-landscape/blob/main/website/render_activities.py#L50\r\n\r\nUsing `""map.png""` when not provided is fine for now, but eventually (i.e., in a subsequent PR), the automatic option should be probably some temporary file somewhere.', 'comment_created': datetime.datetime(2021, 6, 23, 1, 34, 35, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 656703480, 'comment_body': 'I also think this is a great question. Even the name `GrassRenderer` is not necessary set. `spm_map` was little strange at first, but I think it is actually okay.\r\n\r\nIn a [GrassRenderer](https://github.com/ncsu-geoforall-lab/gis714-2021-tangible-landscape/blob/main/website/render_activities.py#L41) class I wrote for a different purpose, I had only a `run` method which just executed whatever command (like `run_command` does) since I wanted to pass any `d.*` commands which I was reading and [running programmatically](https://github.com/ncsu-geoforall-lab/gis714-2021-tangible-landscape/blob/main/website/render_activities.py#L233). I guess you could try to enforce that the command name must start with `d` so that it is not misused, but I\'m not convinced it is needed.\r\n\r\n`d_rast`, `d_vect` is a sure middle ground, but it requires either all modules to be mirrored or implementing the ""resolve a missing attribute"" magic as in PyGRASS module shortcuts to support all commands. It would be harder to implement what I did above using just this because you need to translate what you are reading to function calls, but it is doable in Python and perhaps a fringe use case in Jupyter.\r\n\r\n`vector`, `raster` may work well as a hand-picked subset in addition to a more general interface or if you conceptualize the whole thing as a ""display"" (`display = GrassDisplay()`) where d.vect translates to `display.vector()`. Yet another approach is to have these as a common API with the folium-based renderer in parallel with the `d_vect` style.', 'comment_created': datetime.datetime(2021, 6, 23, 1, 59, 43, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 656707275, 'comment_body': 'Perhaps the issue is not as much ""being forced to set a color"" (defaults can be changed) as that the expectation is that you set the color at this point. And perhaps that the reason @chaedri wrote it initially this way. Like for vectors. Not Jupyter specific, but it is more visible here.\r\n\r\nI have never tried that, but even with the current system, you could implement ad-hoc/temporary color tables for rasters, I think. You create a temporary mapset, set color table for raster of interest there (raster color tables are per-mapset), display  the raster from that mapset, so the mapset-specific color table kicks in. I\'m not suggesting @chaedri should do this :-)', 'comment_created': datetime.datetime(2021, 6, 23, 2, 9, 52, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 656723576, 'comment_body': 'Typo: I meant ""note"" the reason. But I\'m fine with Jupyter as an import-time dependency in grass.jupyter. Makes sense.', 'comment_created': datetime.datetime(2021, 6, 23, 3, 0, 55, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 656994540, 'comment_body': 'In the introduction it is probably worth mentioning where to find more information on what one can do with GRASS GIS APIs, like:\r\n* Manuals in general: https://grass.osgeo.org/grass-stable/manuals/\r\n* Python API: https://grass.osgeo.org/grass-stable/manuals/libpython/\r\n* Module manuals: https://grass.osgeo.org/grass-stable/manuals/full_index.html (or https://grass.osgeo.org/grass78/manuals/graphical_index.html)\r\n\r\nIn addition to listing data, also modules could be listed (at the end):\r\n`print(gs.read_command(""g.search.modules"", flags=g""))`', 'comment_created': datetime.datetime(2021, 6, 23, 11, 13, 22, tzinfo=datetime.timezone.utc), 'commenter': 'ninsbl', 'type': 'User'}, {'comment_id': 657924221, 'comment_body': 'What about module shortcuts here?\r\nhttps://grass.osgeo.org/grass79/manuals/libpython/pygrass.modules.html?highlight=shortcut#module-pygrass.modules.shortcuts\r\n\r\nIf there is value in making the API as much as possible compatibel with e.g. `folium` that should probably go into consideration for the non-interactive API as well?\r\n\r\nI have to admitt that I am not familiar with folium. But for passing vector data to folium, that we discussed earlier, [viter](https://grass.osgeo.org/grass78/manuals/libpython/pygrass.vector.html?highlight=viter#pygrass.vector.VectorTopo.viter) from pygrass maybe an option too? There you could request only geometries within the map window of folium with the [find]() method. ', 'comment_created': datetime.datetime(2021, 6, 24, 12, 59, 37, tzinfo=datetime.timezone.utc), 'commenter': 'ninsbl', 'type': 'User'}, {'comment_id': 659229751, 'comment_body': ""@ninsbl I was thinking this might be better placed in the example notebook, since this one is more focused in Jupyter-GRASS integration. So, I made a new PR with those changes here: https://github.com/OSGeo/grass/pull/1686\r\n\r\nYou can also see the changes in binder here:\r\nhttps://mybinder.org/v2/gh/chaedri/grass/example_notebook_update?urlpath=lab%2Ftree%2Fdoc%2Fnotebooks%2Fexample_notebook.ipynb\r\n\r\nI'm undecided on whether listing all the modules is helpful - perhaps since the manual link is there, the list is unnecessary?"", 'comment_created': datetime.datetime(2021, 6, 26, 22, 14, 42, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 659248433, 'comment_body': 'Although `{}` is a possible user-provided dictionary distinct from the default None, practically `{}` is still ""nothing"" because this is not an arbitrary dictionary, it is the environment dictionary and that cannot be completely empty (there must be some variables in the environment for the sub-processes to work). So, I think simply testing `if env` or `if not env` is enough. See e.g. [grass/script/vector.py:378](https://github.com/OSGeo/grass/blob/master/python/grass/script/vector.py#L378) (you can see it is at least okayish practice since, when you do _Blame_, it is from a recent commit dbeb5f36cb320aba1bb22a8384d10524f568728f).\r\n\r\n', 'comment_created': datetime.datetime(2021, 6, 27, 1, 54, 17, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 659248725, 'comment_body': 'This is a tricky decision, but since we may want more than one of these GrassRenderers (instances or even similar classes like the interactive one), we should not modify the global environment, but only the copy, so `copy()` needs to come first as in:\r\n\r\nhttps://github.com/ncsu-geoforall-lab/gis714-2021-tangible-landscape/blob/main/website/render_activities.py#L50\r\n\r\n(The tricky part is that we are trying to guess the possible use cases and make the implementation robust.)', 'comment_created': datetime.datetime(2021, 6, 27, 1, 57, 42, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 659249172, 'comment_body': 'env is unused except for the if statement. `self._env = env`?', 'comment_created': datetime.datetime(2021, 6, 27, 2, 4, 8, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 659249257, 'comment_body': 'Code duplication and missing variables.', 'comment_created': datetime.datetime(2021, 6, 27, 2, 5, 4, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 659249427, 'comment_body': 'You need to pass the environment as in:\r\n\r\nhttps://github.com/ncsu-geoforall-lab/gis714-2021-tangible-landscape/blob/main/activities/activity_haedrich.py#L33', 'comment_created': datetime.datetime(2021, 6, 27, 2, 7, 57, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 659249487, 'comment_body': 'Now you added filename as a parameter, so you should reflect that here.', 'comment_created': datetime.datetime(2021, 6, 27, 2, 8, 31, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 659254886, 'comment_body': 'Yep, module shortcuts is what I meant by the ""resolve a missing attribute"" magic.\r\n\r\nI suggest to:\r\n\r\n1. Add `run(name, **kwargs)` now to:\r\n    a. Support any command right away.\r\n    b. Have a single place where the actual subprocess call is handled (i.e., use this method from the other methods).\r\n2. Go with `d_rast` and `d_vect` or `raster` and `vector` (whatever seems better to you @chaedri) in this PR to have a nice interface.\r\n3. Later, in another PR, adding more (all) `d_vect`-like methods later either explicitly defined, dynamically generated (`self.d_vect = some_locally_defined_function`), or through custom, simpler version of module shortcuts. I\'m saying `d_vect`-like in a broad sense: they could be done like `display.vect` similarly to what I mentioned above. However, I think closer to module names, i.e., `d_vect` makes more sense here as it will clearly translate to all display module names.\r\n4. Leave the compatibility with interactive display for later (again another PR) when the interactive display is somewhat finished. I think switching between displays just by changing the class name but not the rest of your code would be nice.\r\n', 'comment_created': datetime.datetime(2021, 6, 27, 3, 20, 6, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 660731546, 'comment_body': 'Pylint may give you this complaint too: the second condition is negation of the first one which is in this context best expressed as `else:`.', 'comment_created': datetime.datetime(2021, 6, 29, 15, 28, 37, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 660733358, 'comment_body': 'Let\'s get ahead of the game and support `Path` here by converting this to `str` as we do with the numbers. This is how it behaves:\r\n\r\n```\r\n> str(Path(""/home""))\r\n\'/home\'\r\n```', 'comment_created': datetime.datetime(2021, 6, 29, 15, 30, 37, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 660733906, 'comment_body': 'Use `self.run()` here too.', 'comment_created': datetime.datetime(2021, 6, 29, 15, 31, 12, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 660735228, 'comment_body': 'See ""raising exceptions"" and ""reporting errors in Python"".', 'comment_created': datetime.datetime(2021, 6, 29, 15, 32, 46, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 660736963, 'comment_body': 'Make a copy here too. Easier to document. More predictable for the user. It also makes the environment private, so more control in the implementation.', 'comment_created': datetime.datetime(2021, 6, 29, 15, 34, 40, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 660767915, 'comment_body': 'So, the line would read: `self._env[""GRASS_RENDER_FILE""] = str(Path(filename))` ?', 'comment_created': datetime.datetime(2021, 6, 29, 16, 11, 9, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 660809229, 'comment_body': 'No, no need to construct Path. The point is to handle the case when user passes filename as an Path object. Try the behavior in an interactive console. The point is to handle these two or three cases:\r\n\r\n```python\r\nfile = Path(""/base/dir"") / more_dirs / added_here\r\nrenderer1 = GrassRenderer(filename=file)\r\nrenderer2 = GrassRenderer(filename=""map2.png"")\r\nrenderer3 = GrassRenderer(filename=os.path.join(""base/dir"", ""map2.png""))\r\n```', 'comment_created': datetime.datetime(2021, 6, 29, 17, 8, 11, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 660811929, 'comment_body': 'See what is the most fitting exception type for this problem, probably some value or attribute error whatever is the actual name.', 'comment_created': datetime.datetime(2021, 6, 29, 17, 12, 2, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 660889316, 'comment_body': 'I couldn\'t get any of those to produce an error. But, I think I understand: line 38 should read `self._env[""GRASS_RENDER_FILE""] = str(filename)`.', 'comment_created': datetime.datetime(2021, 6, 29, 19, 3, 55, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 661103080, 'comment_body': 'Right, no error, there is just no point in making the filename a Path object if it is not (well, at least for this line, we need Path later). ', 'comment_created': datetime.datetime(2021, 6, 30, 3, 27, 32, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}]","[{'commit_sha': '154676c470db24471ab5d7ff5b347c16c674ce47', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '33c713e7438eaf70684c4106e85872b26c573797', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '04258ae3cf2a6cfc029dfc659639714e0a577f1a', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dab9fe06ed37008a1055ee8a1341294bc937dc38', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51fd0be950caaaacdffd8ecff7b8a81459f45585', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87711cf1c562ddcd0d6bc5b8d5cc7db4b0ad545e', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd63dd4d73153005fc871f3ae8165f16861c13192', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc1955c73454c2adab4dabe3922f00d3c2c323d2', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '35cacc933f4c793d1fe130e6fbaa0f73485cf069', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48073f08aec1ac7b40131f28c09d2183ee56b8b9', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56e17c5c5c54a23e28bef72d808b4bf1022d98fb', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34eecf14cddc2ddf0293361d0387688720656b6e', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12494090e61d278085ee76a807d4bddf2119bc55', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d3a15b26cc34ae51fc6256e57c0287b4cdaa65e', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0dba5556590564892cdc14e41b927fbdcd03085e', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cabc32cfff12cb8d003947053d45bf375cfe19d3', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '23d5a3167414cf6c4a5318693469670df372764d', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '27f97fe88854d8cc62531df6f726df1ffc5f8387', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f0aec989e0ccb7b4d54a33e41c2b8afb039673f7', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49167a443588fd98094dcff33e65abf80d3517a0', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '555f918ad03e122178828c744ad064cc53387783', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf68943ac8a81041be3dbc4ecf4f33c37401aecf', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}]",Caitlin Haedrich,69856275,,User,,31,,5,13
677961602,Jupyter: Interactive display,"This PR contains interactive functions for displaying GRASS maps in Jupyter Notebooks using folium. It is part of an ongoing Google Summer of Code project, Improved Integration of GRASS and Jupyter Notebooks. You can find more information [here](https://trac.osgeo.org/grass/wiki/GSoC/2021/JupyterAndGRASS). 

The functions can also be tried in this Jupyter Notebook:

https://mybinder.org/v2/gh/chaedri/grass/interactive-display?urlpath=lab%2Ftree%2Fdoc%2Fnotebooks%2Fjupyter_integration.ipynb",False,1684,https://api.github.com/repos/OSGeo/grass/pulls/1684,https://github.com/OSGeo/grass/pull/1684,closed,146,12,5,6,2,0,2,0,"[{'name': 'enhancement'}, {'name': 'gsoc'}]",2021-06-25 14:32:49+00:00,2021-07-08 16:20:11+00:00,1129642.0,"13 days, 1:47:22",[],"[{'commit_sha': '57c19d9393cfaa8bcc5b00e52697b6c705f53078', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '009d763757d853230edb57a4408147425de6221b', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '527a0dd4c4fc6442e7dae1ee70c56367319b80d6', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b47a92519558b6fce0df70d57eed60294165461c', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e797fe2ada2a5cb99411c323c7594875b4526922', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d7dd0a4b4aea9a4d3e39e62db0f14e9c2422b64', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}]",Caitlin Haedrich,69856275,,User,,31,,5,13
678420122,Added additional GRASS info to example_notebook,"This PR contains a few changes proposed in #1668 that I think would be better placed here. I'm working on the example notebook and other Jupyter Notebooks as part of the Google Summer of Code project, [Improved Integration of GRASS GIS and Jupyter Notebooks[(https://trac.osgeo.org/grass/wiki/GSoC/2021/JupyterAndGRASS).

You can see and test this updated notebook here:
https://mybinder.org/v2/gh/chaedri/grass/example_notebook_update?urlpath=lab%2Ftree%2Fdoc%2Fnotebooks%2Fexample_notebook.ipynb",True,1686,https://api.github.com/repos/OSGeo/grass/pulls/1686,https://github.com/OSGeo/grass/pull/1686,closed,74,27,1,1,0,0,2,0,"[{'name': 'enhancement'}, {'name': 'gsoc'}]",2021-06-26 22:12:26+00:00,2021-06-28 18:58:12+00:00,161146.0,"1 day, 20:45:46",[],"[{'commit_sha': '5308779c08faba251d1d2fd060c5dd90d362d0e9', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}]",Caitlin Haedrich,69856275,,User,,31,,5,13
674126685,Jupyter: Non-interactive display,"This is a set of functions to display non-interactive maps in Jupyter Notebooks, as proposed in the Google Summer of Code project, [Improved Integration of GRASS and Jupyter Notebooks](https://trac.osgeo.org/grass/wiki/GSoC/2021/JupyterAndGRASS). The goal of these functions is to make the display of GRASS maps more intuitive in Jupyter Notebooks. You can test the functionality by launching the repository in Binder here:

https://mybinder.org/v2/gh/chaedri/grass/non-interactive-display?urlpath=lab%2Ftree%2Fdoc%2Fnotebooks%2Fjupyter_integration.ipynb",True,1668,https://api.github.com/repos/OSGeo/grass/pulls/1668,https://github.com/OSGeo/grass/pull/1668,closed,139,41,5,22,1,51,2,0,"[{'name': 'enhancement'}, {'name': 'gsoc'}]",2021-06-21 00:35:34+00:00,2021-07-02 18:25:31+00:00,1014597.0,"11 days, 17:49:57","[{'comment_id': 655064892, 'comment_body': 'Probably won\'t be part of this PR at the end and not a big deal in Binder, but in general, this will need to be a lazy import, only in the function which needs it unless you make the ""interactive"" part a separate module and class which may or may not happen in the future. As in the case of `from IPython.display import Image`.', 'comment_created': datetime.datetime(2021, 6, 21, 4, 23, 6, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 655065737, 'comment_body': 'Classes should be CamelCase, just run Pylint to get all these complaints sooner :-)', 'comment_created': datetime.datetime(2021, 6, 21, 4, 26, 35, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 655066221, 'comment_body': 'This is a common style for these short docstrings:\r\n\r\n```suggestion\r\n        """"""Adds a vector to the display""""""\r\n```', 'comment_created': datetime.datetime(2021, 6, 21, 4, 28, 28, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 655066982, 'comment_body': 'Only the last line seems to really ""counts"" here, so you need decide or do two different ones. I would say only one is needed or push the second one later in the nb.', 'comment_created': datetime.datetime(2021, 6, 21, 4, 31, 10, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 655067526, 'comment_body': 'I would like to see the map first and the list only later, but that might be just me.', 'comment_created': datetime.datetime(2021, 6, 21, 4, 33, 23, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 655068464, 'comment_body': 'Add env parameter and when set, use it instead of os.environ and also pass it to the other commands.', 'comment_created': datetime.datetime(2021, 6, 21, 4, 37, 11, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 655068769, 'comment_body': 'The defaults are probably better left to d.vect itself unless we have good reasons to have them here (different values, need for documenting them right here).', 'comment_created': datetime.datetime(2021, 6, 21, 4, 38, 22, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 655069225, 'comment_body': ""Since this actually modified the raster, this may not be what is expected from the display function. Unfortunately, it also means that you need to do it ahead of time and can't set it here. I'm interested what everybody thinks about this."", 'comment_created': datetime.datetime(2021, 6, 21, 4, 40, 9, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 655368060, 'comment_body': 'I tested the notebook, looks nice ;)\r\nIndeed, it seems odd to me to be forced to set a color when d.* modules should just read the defined color table or use the default, setting a color should be optional IMHO', 'comment_created': datetime.datetime(2021, 6, 21, 13, 18, 11, tzinfo=datetime.timezone.utc), 'commenter': 'veroandreo', 'type': 'User'}, {'comment_id': 656482379, 'comment_body': ""> I had it the other way because, if you weren't familiar with the spm dataset, seeing the contents would be a pre-requisite to knowing how to modify/play with the code below."", 'comment_created': datetime.datetime(2021, 6, 22, 18, 31, 52, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 656554339, 'comment_body': ""Right, but I would say it is not a prerequisite to run the code. You can then executed the next cell to see what else is in the dataset and then go back and play. The other consideration is showing images versus text first. What do you want to see? This of course depends on the target audience and purpose of the notebook which I'm not sure if we decided. Promotion of the Jupyter integration is probably a good goal at this point for this notebook."", 'comment_created': datetime.datetime(2021, 6, 22, 20, 26, 14, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 656555199, 'comment_body': 'GrassRenderer and ideally one line including the triple quotes.', 'comment_created': datetime.datetime(2021, 6, 22, 20, 27, 38, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 656556060, 'comment_body': 'Also, if you just use `**kwargs`, you right away support all what d.vect supports.', 'comment_created': datetime.datetime(2021, 6, 22, 20, 28, 59, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 656556467, 'comment_body': 'Usually PNG I think.', 'comment_created': datetime.datetime(2021, 6, 22, 20, 29, 38, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 656566936, 'comment_body': ""Please not the reason for lazy import: We don't want Jupyter to be an import-time dependency. "", 'comment_created': datetime.datetime(2021, 6, 22, 20, 46, 12, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 656610951, 'comment_body': 'Should be sufficient to use either p or g flag.', 'comment_created': datetime.datetime(2021, 6, 22, 21, 59, 20, tzinfo=datetime.timezone.utc), 'commenter': 'ninsbl', 'type': 'User'}, {'comment_id': 656613166, 'comment_body': 'Would `spm_map.raster` be for new users more intuitive than `spm_map.d_rast` (or `spm_map.vector` instead of `spm_map.d_vect`)...?', 'comment_created': datetime.datetime(2021, 6, 22, 22, 3, 55, tzinfo=datetime.timezone.utc), 'commenter': 'ninsbl', 'type': 'User'}, {'comment_id': 656614541, 'comment_body': 'Agreed with Vero here...', 'comment_created': datetime.datetime(2021, 6, 22, 22, 6, 58, tzinfo=datetime.timezone.utc), 'commenter': 'ninsbl', 'type': 'User'}, {'comment_id': 656615573, 'comment_body': 'For listing of data also:\r\nhttps://grass.osgeo.org/grass79/manuals/libpython/script.html?highlight=list#script.core.list_strings\r\ncould be used...', 'comment_created': datetime.datetime(2021, 6, 22, 22, 9, 10, tzinfo=datetime.timezone.utc), 'commenter': 'ninsbl', 'type': 'User'}, {'comment_id': 656643455, 'comment_body': ""That's true, the list takes up a lot of space and maybe the more likely workflow is to run the whole notebook then go back and modify. I'm convinced - I'll switch it. \r\n\r\n@ninsbl That's a cool function! I'll try it out."", 'comment_created': datetime.datetime(2021, 6, 22, 23, 16, 1, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 656646051, 'comment_body': ""I'm not 100% sure what this would look like. Is this what you're thinking?\r\n\r\n`def __init__(self, env=None, ... ):`\r\n\r\nWhat would go in the function then? I imagine and if-else statement?"", 'comment_created': datetime.datetime(2021, 6, 22, 23, 22, 53, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 656646993, 'comment_body': ""This is a great question. I think it would be easier for new users but it also goes against the GRASS convention and might be less intuitive for experienced GRASS users... I'd be curious to hear what others think. I can write it either way."", 'comment_created': datetime.datetime(2021, 6, 22, 23, 25, 30, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 656687583, 'comment_body': ""Exactly. If not env then os.environ. Look to grass.script for more examples, but here, it's just that."", 'comment_created': datetime.datetime(2021, 6, 23, 1, 12, 18, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 656690254, 'comment_body': 'In my previous comment, I was thinking about storing (the reference to) it as `self._env`. However, to make this work in parallel (so that two of these things can run in parallel) we need to store a copy. See:\r\n\r\nhttps://github.com/ncsu-geoforall-lab/gis714-2021-tangible-landscape/blob/main/website/render_activities.py#L49', 'comment_created': datetime.datetime(2021, 6, 23, 1, 20, 45, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 656691532, 'comment_body': 'With run_command, nothing is printed (as expected), so the `-p` is useless. Either -g and parse_command or nothing. I think nothing is fine here. For reading region to Python we have a better function anyway (`region`).', 'comment_created': datetime.datetime(2021, 6, 23, 1, 23, 45, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 656692728, 'comment_body': 'Just add that with the rest of folium support.', 'comment_created': datetime.datetime(2021, 6, 23, 1, 26, 53, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 656693385, 'comment_body': 'There is no reason to keep display_settings function around. Instance of GrassRenderer should be sufficient. Delete it and move things here as in:\r\n\r\nhttps://github.com/ncsu-geoforall-lab/gis714-2021-tangible-landscape/blob/main/website/render_activities.py#L47', 'comment_created': datetime.datetime(2021, 6, 23, 1, 28, 51, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 656695210, 'comment_body': 'At least make the filename for the image modifiable as in \r\n\r\nhttps://github.com/ncsu-geoforall-lab/gis714-2021-tangible-landscape/blob/main/website/render_activities.py#L50\r\n\r\nUsing `""map.png""` when not provided is fine for now, but eventually (i.e., in a subsequent PR), the automatic option should be probably some temporary file somewhere.', 'comment_created': datetime.datetime(2021, 6, 23, 1, 34, 35, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 656703480, 'comment_body': 'I also think this is a great question. Even the name `GrassRenderer` is not necessary set. `spm_map` was little strange at first, but I think it is actually okay.\r\n\r\nIn a [GrassRenderer](https://github.com/ncsu-geoforall-lab/gis714-2021-tangible-landscape/blob/main/website/render_activities.py#L41) class I wrote for a different purpose, I had only a `run` method which just executed whatever command (like `run_command` does) since I wanted to pass any `d.*` commands which I was reading and [running programmatically](https://github.com/ncsu-geoforall-lab/gis714-2021-tangible-landscape/blob/main/website/render_activities.py#L233). I guess you could try to enforce that the command name must start with `d` so that it is not misused, but I\'m not convinced it is needed.\r\n\r\n`d_rast`, `d_vect` is a sure middle ground, but it requires either all modules to be mirrored or implementing the ""resolve a missing attribute"" magic as in PyGRASS module shortcuts to support all commands. It would be harder to implement what I did above using just this because you need to translate what you are reading to function calls, but it is doable in Python and perhaps a fringe use case in Jupyter.\r\n\r\n`vector`, `raster` may work well as a hand-picked subset in addition to a more general interface or if you conceptualize the whole thing as a ""display"" (`display = GrassDisplay()`) where d.vect translates to `display.vector()`. Yet another approach is to have these as a common API with the folium-based renderer in parallel with the `d_vect` style.', 'comment_created': datetime.datetime(2021, 6, 23, 1, 59, 43, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 656707275, 'comment_body': 'Perhaps the issue is not as much ""being forced to set a color"" (defaults can be changed) as that the expectation is that you set the color at this point. And perhaps that the reason @chaedri wrote it initially this way. Like for vectors. Not Jupyter specific, but it is more visible here.\r\n\r\nI have never tried that, but even with the current system, you could implement ad-hoc/temporary color tables for rasters, I think. You create a temporary mapset, set color table for raster of interest there (raster color tables are per-mapset), display  the raster from that mapset, so the mapset-specific color table kicks in. I\'m not suggesting @chaedri should do this :-)', 'comment_created': datetime.datetime(2021, 6, 23, 2, 9, 52, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 656723576, 'comment_body': 'Typo: I meant ""note"" the reason. But I\'m fine with Jupyter as an import-time dependency in grass.jupyter. Makes sense.', 'comment_created': datetime.datetime(2021, 6, 23, 3, 0, 55, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 656994540, 'comment_body': 'In the introduction it is probably worth mentioning where to find more information on what one can do with GRASS GIS APIs, like:\r\n* Manuals in general: https://grass.osgeo.org/grass-stable/manuals/\r\n* Python API: https://grass.osgeo.org/grass-stable/manuals/libpython/\r\n* Module manuals: https://grass.osgeo.org/grass-stable/manuals/full_index.html (or https://grass.osgeo.org/grass78/manuals/graphical_index.html)\r\n\r\nIn addition to listing data, also modules could be listed (at the end):\r\n`print(gs.read_command(""g.search.modules"", flags=g""))`', 'comment_created': datetime.datetime(2021, 6, 23, 11, 13, 22, tzinfo=datetime.timezone.utc), 'commenter': 'ninsbl', 'type': 'User'}, {'comment_id': 657924221, 'comment_body': 'What about module shortcuts here?\r\nhttps://grass.osgeo.org/grass79/manuals/libpython/pygrass.modules.html?highlight=shortcut#module-pygrass.modules.shortcuts\r\n\r\nIf there is value in making the API as much as possible compatibel with e.g. `folium` that should probably go into consideration for the non-interactive API as well?\r\n\r\nI have to admitt that I am not familiar with folium. But for passing vector data to folium, that we discussed earlier, [viter](https://grass.osgeo.org/grass78/manuals/libpython/pygrass.vector.html?highlight=viter#pygrass.vector.VectorTopo.viter) from pygrass maybe an option too? There you could request only geometries within the map window of folium with the [find]() method. ', 'comment_created': datetime.datetime(2021, 6, 24, 12, 59, 37, tzinfo=datetime.timezone.utc), 'commenter': 'ninsbl', 'type': 'User'}, {'comment_id': 659229751, 'comment_body': ""@ninsbl I was thinking this might be better placed in the example notebook, since this one is more focused in Jupyter-GRASS integration. So, I made a new PR with those changes here: https://github.com/OSGeo/grass/pull/1686\r\n\r\nYou can also see the changes in binder here:\r\nhttps://mybinder.org/v2/gh/chaedri/grass/example_notebook_update?urlpath=lab%2Ftree%2Fdoc%2Fnotebooks%2Fexample_notebook.ipynb\r\n\r\nI'm undecided on whether listing all the modules is helpful - perhaps since the manual link is there, the list is unnecessary?"", 'comment_created': datetime.datetime(2021, 6, 26, 22, 14, 42, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 659248433, 'comment_body': 'Although `{}` is a possible user-provided dictionary distinct from the default None, practically `{}` is still ""nothing"" because this is not an arbitrary dictionary, it is the environment dictionary and that cannot be completely empty (there must be some variables in the environment for the sub-processes to work). So, I think simply testing `if env` or `if not env` is enough. See e.g. [grass/script/vector.py:378](https://github.com/OSGeo/grass/blob/master/python/grass/script/vector.py#L378) (you can see it is at least okayish practice since, when you do _Blame_, it is from a recent commit dbeb5f36cb320aba1bb22a8384d10524f568728f).\r\n\r\n', 'comment_created': datetime.datetime(2021, 6, 27, 1, 54, 17, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 659248725, 'comment_body': 'This is a tricky decision, but since we may want more than one of these GrassRenderers (instances or even similar classes like the interactive one), we should not modify the global environment, but only the copy, so `copy()` needs to come first as in:\r\n\r\nhttps://github.com/ncsu-geoforall-lab/gis714-2021-tangible-landscape/blob/main/website/render_activities.py#L50\r\n\r\n(The tricky part is that we are trying to guess the possible use cases and make the implementation robust.)', 'comment_created': datetime.datetime(2021, 6, 27, 1, 57, 42, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 659249172, 'comment_body': 'env is unused except for the if statement. `self._env = env`?', 'comment_created': datetime.datetime(2021, 6, 27, 2, 4, 8, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 659249257, 'comment_body': 'Code duplication and missing variables.', 'comment_created': datetime.datetime(2021, 6, 27, 2, 5, 4, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 659249427, 'comment_body': 'You need to pass the environment as in:\r\n\r\nhttps://github.com/ncsu-geoforall-lab/gis714-2021-tangible-landscape/blob/main/activities/activity_haedrich.py#L33', 'comment_created': datetime.datetime(2021, 6, 27, 2, 7, 57, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 659249487, 'comment_body': 'Now you added filename as a parameter, so you should reflect that here.', 'comment_created': datetime.datetime(2021, 6, 27, 2, 8, 31, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 659254886, 'comment_body': 'Yep, module shortcuts is what I meant by the ""resolve a missing attribute"" magic.\r\n\r\nI suggest to:\r\n\r\n1. Add `run(name, **kwargs)` now to:\r\n    a. Support any command right away.\r\n    b. Have a single place where the actual subprocess call is handled (i.e., use this method from the other methods).\r\n2. Go with `d_rast` and `d_vect` or `raster` and `vector` (whatever seems better to you @chaedri) in this PR to have a nice interface.\r\n3. Later, in another PR, adding more (all) `d_vect`-like methods later either explicitly defined, dynamically generated (`self.d_vect = some_locally_defined_function`), or through custom, simpler version of module shortcuts. I\'m saying `d_vect`-like in a broad sense: they could be done like `display.vect` similarly to what I mentioned above. However, I think closer to module names, i.e., `d_vect` makes more sense here as it will clearly translate to all display module names.\r\n4. Leave the compatibility with interactive display for later (again another PR) when the interactive display is somewhat finished. I think switching between displays just by changing the class name but not the rest of your code would be nice.\r\n', 'comment_created': datetime.datetime(2021, 6, 27, 3, 20, 6, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 660731546, 'comment_body': 'Pylint may give you this complaint too: the second condition is negation of the first one which is in this context best expressed as `else:`.', 'comment_created': datetime.datetime(2021, 6, 29, 15, 28, 37, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 660733358, 'comment_body': 'Let\'s get ahead of the game and support `Path` here by converting this to `str` as we do with the numbers. This is how it behaves:\r\n\r\n```\r\n> str(Path(""/home""))\r\n\'/home\'\r\n```', 'comment_created': datetime.datetime(2021, 6, 29, 15, 30, 37, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 660733906, 'comment_body': 'Use `self.run()` here too.', 'comment_created': datetime.datetime(2021, 6, 29, 15, 31, 12, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 660735228, 'comment_body': 'See ""raising exceptions"" and ""reporting errors in Python"".', 'comment_created': datetime.datetime(2021, 6, 29, 15, 32, 46, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 660736963, 'comment_body': 'Make a copy here too. Easier to document. More predictable for the user. It also makes the environment private, so more control in the implementation.', 'comment_created': datetime.datetime(2021, 6, 29, 15, 34, 40, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 660767915, 'comment_body': 'So, the line would read: `self._env[""GRASS_RENDER_FILE""] = str(Path(filename))` ?', 'comment_created': datetime.datetime(2021, 6, 29, 16, 11, 9, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 660809229, 'comment_body': 'No, no need to construct Path. The point is to handle the case when user passes filename as an Path object. Try the behavior in an interactive console. The point is to handle these two or three cases:\r\n\r\n```python\r\nfile = Path(""/base/dir"") / more_dirs / added_here\r\nrenderer1 = GrassRenderer(filename=file)\r\nrenderer2 = GrassRenderer(filename=""map2.png"")\r\nrenderer3 = GrassRenderer(filename=os.path.join(""base/dir"", ""map2.png""))\r\n```', 'comment_created': datetime.datetime(2021, 6, 29, 17, 8, 11, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 660811929, 'comment_body': 'See what is the most fitting exception type for this problem, probably some value or attribute error whatever is the actual name.', 'comment_created': datetime.datetime(2021, 6, 29, 17, 12, 2, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 660889316, 'comment_body': 'I couldn\'t get any of those to produce an error. But, I think I understand: line 38 should read `self._env[""GRASS_RENDER_FILE""] = str(filename)`.', 'comment_created': datetime.datetime(2021, 6, 29, 19, 3, 55, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 661103080, 'comment_body': 'Right, no error, there is just no point in making the filename a Path object if it is not (well, at least for this line, we need Path later). ', 'comment_created': datetime.datetime(2021, 6, 30, 3, 27, 32, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}]","[{'commit_sha': '154676c470db24471ab5d7ff5b347c16c674ce47', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '33c713e7438eaf70684c4106e85872b26c573797', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '04258ae3cf2a6cfc029dfc659639714e0a577f1a', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dab9fe06ed37008a1055ee8a1341294bc937dc38', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51fd0be950caaaacdffd8ecff7b8a81459f45585', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87711cf1c562ddcd0d6bc5b8d5cc7db4b0ad545e', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd63dd4d73153005fc871f3ae8165f16861c13192', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc1955c73454c2adab4dabe3922f00d3c2c323d2', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '35cacc933f4c793d1fe130e6fbaa0f73485cf069', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48073f08aec1ac7b40131f28c09d2183ee56b8b9', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56e17c5c5c54a23e28bef72d808b4bf1022d98fb', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34eecf14cddc2ddf0293361d0387688720656b6e', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12494090e61d278085ee76a807d4bddf2119bc55', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d3a15b26cc34ae51fc6256e57c0287b4cdaa65e', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0dba5556590564892cdc14e41b927fbdcd03085e', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cabc32cfff12cb8d003947053d45bf375cfe19d3', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '23d5a3167414cf6c4a5318693469670df372764d', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '27f97fe88854d8cc62531df6f726df1ffc5f8387', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f0aec989e0ccb7b4d54a33e41c2b8afb039673f7', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49167a443588fd98094dcff33e65abf80d3517a0', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '555f918ad03e122178828c744ad064cc53387783', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf68943ac8a81041be3dbc4ecf4f33c37401aecf', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}]",Caitlin Haedrich,69856275,,User,,31,,5,13
683321742,Interactive vector maps for Jupyter Notebooks,"* InteractiveMap class produces interactive folium maps centered on current g.region in Jupyter Notebooks
* Functions for adding vectors to folium map by
* Vectors are passed from GRASS to folium by reprojecting to WGS84 in a temporary Location, exporting as GeoJSON files and importing to folium.

This PR contains functions for displaying GRASS vector data in interactive folium maps for Jupyter Notebooks. It is part of an ongoing Google Summer of Code project, Improved Integration of GRASS and Jupyter Notebooks. You can find more information [here](https://trac.osgeo.org/grass/wiki/GSoC/2021/JupyterAndGRASS). ",True,1710,https://api.github.com/repos/OSGeo/grass/pulls/1710,https://github.com/OSGeo/grass/pull/1710,closed,226,21,5,31,7,49,2,0,"[{'name': 'enhancement'}, {'name': 'gsoc'}]",2021-07-05 03:21:09+00:00,2021-07-19 21:03:07+00:00,1273318.0,"14 days, 17:41:58","[{'comment_id': 663625742, 'comment_body': ""What's wrong with `grass.script.create_location`?"", 'comment_created': datetime.datetime(2021, 7, 5, 4, 10, 11, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 663626438, 'comment_body': 'Use f-string.', 'comment_created': datetime.datetime(2021, 7, 5, 4, 13, 5, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 663627843, 'comment_body': 'Since you have the `_convert_coordinates` function, it is better to do (hide) this formatting stuff there.', 'comment_created': datetime.datetime(2021, 7, 5, 4, 19, 3, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 663628449, 'comment_body': 'The upper case here is somewhat unexpected. Either all lower case or switch the dictionary to types.SimpleNamespace and use attributes where it is clear it needs to be lower case.', 'comment_created': datetime.datetime(2021, 7, 5, 4, 21, 34, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 663629388, 'comment_body': 'This will actually break for more advanced cases. Adding mapset is actually more sophisticated. If v.proj can handle that, that would be best.', 'comment_created': datetime.datetime(2021, 7, 5, 4, 25, 14, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 663629632, 'comment_body': 'The code will change, but `""tmp_{}.json"".format(vector)` should be a variable.', 'comment_created': datetime.datetime(2021, 7, 5, 4, 26, 21, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 663630201, 'comment_body': 'I still think there might be a better, completely different, name, but in any case, the adjectives should go first, noun last, e.g., GrassInteractiveRenderer.', 'comment_created': datetime.datetime(2021, 7, 5, 4, 28, 52, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 664015760, 'comment_body': ""`create_location` calls `create_environment`. The user cannot pass an environment to `create_location` so I couldn't get a new location to be created in `self._env`; it will always create a new environment with `os.environ.copy()` and doesn't return the new environment either. I think this means it wouldn't work? Or is there another workflow you had in mind?"", 'comment_created': datetime.datetime(2021, 7, 5, 15, 36, 52, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 664089124, 'comment_body': ""`grass.script.create_location` creates a new location. It does not modify or return the environment and it is not supposed to. It really only creates a location.\r\n\r\nGenerally, you can modify `create_location` or anything else if needed. There is one advanced case where passing `env` to `create_location` would make sense, but unless you are thinking of that, let's just leave it as is because it is not needed here.\r\n\r\nBasically, the first question is, does it create location in your case?\r\n\r\nAnother things is that you create a separate environment later and use that to run things in that location, i.e., you don't need `create_location` to do it for you; it is a separate step in how these functions are designed."", 'comment_created': datetime.datetime(2021, 7, 5, 18, 49, 26, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 664090915, 'comment_body': 'You won\'t really have just one `self._env` like in the case of the non-interactive rendering. There might be more. In any case, the env here is specific to working in that EPSG:4326 location, so a less generic name might be good.\r\n\r\nSecond thing is that the documentation says ""The user of this function is responsible for deleting the file."" You will need to keep the name to delete it later.', 'comment_created': datetime.datetime(2021, 7, 5, 18, 55, 2, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 664092474, 'comment_body': 'Likely not needed.', 'comment_created': datetime.datetime(2021, 7, 5, 19, 0, 10, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 664093194, 'comment_body': 'Extra line.', 'comment_created': datetime.datetime(2021, 7, 5, 19, 1, 58, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 664093353, 'comment_body': ""I don't think this line improves readability."", 'comment_created': datetime.datetime(2021, 7, 5, 19, 2, 33, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 664095282, 'comment_body': 'I was saying this at another occasion somewhere, but I will use the same line: Despite the popular belief, Python does not require an empty line after each statement.\r\n\r\nWell places empty lines here and there, may improve readability. More space around each line may be achieved in a many text editors by increasing line spacing. \r\n', 'comment_created': datetime.datetime(2021, 7, 5, 19, 9, 13, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 664107813, 'comment_body': 'Hmm, if I leave the mapset kwarg empty in v.proj, I get an error that the vector cannot be found in ""user1"" (because the vectors I\'ve been using are all in the PERMANENT mapset). Is this what you had in mind? Not sure how else to do this...', 'comment_created': datetime.datetime(2021, 7, 5, 19, 53, 7, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 664109875, 'comment_body': 'What about InteractiveMap? The idea that is for GRASS is already implied since the library is called grass.jupyter.', 'comment_created': datetime.datetime(2021, 7, 5, 20, 0, 58, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 664120402, 'comment_body': ""Right, v.proj can't do this automatically in this context. It just defaults to the current mapset (and it is suspicious that it is user1 in your case, but that's a separate issue).\r\n\r\nYou need to use `gs.find_file` which will do the correct lookup for you. This needs to run in the current mapset and than the mapset name you acquire will go to v.proj running in that WGS84 location."", 'comment_created': datetime.datetime(2021, 7, 5, 20, 42, 22, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 664789880, 'comment_body': ""I switched back to `gs.create_location` and it doesn't return an error anymore and it seems to work fine. I'm not sure why I was having so much trouble with that before... So, all set now - thanks!"", 'comment_created': datetime.datetime(2021, 7, 6, 18, 33, 57, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 664800815, 'comment_body': 'Ah! Ok, that makes sense. I think I have it working with `gs.find_file` now.\r\n\r\nIt is ""user1"" because that\'s what I called in gj.init.', 'comment_created': datetime.datetime(2021, 7, 6, 18, 50, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 664807435, 'comment_body': ""Maybe `self._folium_env`?\r\n\r\nNoted. I think I'm creating a lot of things that probably have to be cleaned up later..."", 'comment_created': datetime.datetime(2021, 7, 6, 19, 0, 48, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 664808815, 'comment_body': ""I'm not sure how else to get `GISDBASE` which is required for `create_location` and `create_environment`. It isn't stored in `os.environ`. I also think I need the original location and mapset for v.proj and I'm not sure how to get that besides in the rcfile."", 'comment_created': datetime.datetime(2021, 7, 6, 19, 3, 3, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 664866699, 'comment_body': '> I\'m not sure how else to get `GISDBASE` which is required for `create_location` and `create_environment`.\r\n\r\nActually, that\'s another issue. You should probably use some temporary directory for this. You can use standard Python library to get a temporary directory. (`GISDBASE` is just a directory - a directory where locations (""projects"") are.) In standard GRASS session created by the _grass_ command, there is one already created and can be used for things like this, but it needs to be used with some care and _grass.script.setup.init_ is not setting it up unlike the _grass_ command.\r\n\r\n> It isn\'t stored in `os.environ`.\r\n\r\nThe equivalent of the system environment in GRASS is so called _GIS environment_ (a legacy name) accessible through _g.gisenv_ (_gs.gisenv_ function in Python). It is interface to the rc file (session file).\r\n\r\n> I also think I need the original location and mapset for v.proj and I\'m not sure how to get that besides in the rcfile.\r\n\r\nRight, but the mapset should come from the _find_file_ call.', 'comment_created': datetime.datetime(2021, 7, 6, 20, 45, 32, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 664869189, 'comment_body': ""> Maybe `self._folium_env`?\r\n\r\nYou will need pseudo-mercator for the rasters/images, so perhaps `self._vector_env` or `self._wgs84_env`.\r\n\r\n> I think I'm creating a lot of things that probably have to be cleaned up later...\r\n\r\nRight, good to keep a track of those, but you can just create an issue for that when you are ready to merge this PR, i.e., it does not have to be part of this PR (this applies to all other PRs as well). Or you can list known issues in the PR description."", 'comment_created': datetime.datetime(2021, 7, 6, 20, 50, 11, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 664877330, 'comment_body': 'Maybe the mapset is not needed when v.proj gets a fully qualified name as input (since mapset is already specified in input). Read the documentation and/or test. Using the original/current mapset would be wrong (the vector is in the mapset returned by find_file, not necessarily in the current one).\r\n\r\nI would also suggest to name the variable full_name just to be clear later what is happening or overwrite the vector variable by the result if you want shorter code (I think it would still be perfectly readable), but see my later comment about v.out.ogr. It is also somewhat confusing to name this name since one of the values find_file returns is under key `name`.', 'comment_created': datetime.datetime(2021, 7, 6, 21, 4, 48, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 664884830, 'comment_body': 'This works I think only because the vector happens to be in the PERMANENT mapset in the original/current location. This may or may not be the case generally. In the `self._env` location, it will always be in PERMANENT. Specifying only the name without mapset seems to me like the best way to go. You just reprojected that to whatever is the current mapset for `self._env`, so specifying the mapset is not needed.\r\n\r\nTo cover all the cases, you need to really have the original name here, but perhaps stripped from the mapset - right, you should support things like `add_vector(""streams@user1"")`. Fortunately, just passing that to _find_file_ should work (I just tested with _g.findfile_). It will resolve all the pieces for you. In other words, passing the fullname is wrong, passing the original parameter value won\'t work for `name@mapset` case, use full _find_file_ result to reliably get the pieces you need.', 'comment_created': datetime.datetime(2021, 7, 6, 21, 18, 36, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 664886745, 'comment_body': 'I\'m generally see `add_vector(vector=""abc"")` as a missed opportunity to document what the parameter is. In a general Python context, I would say `add_vector(name=""abc"")`. You could also say it should always be called as `add_vector(""abc"")` and leave your hands free for later change of the parameter name.', 'comment_created': datetime.datetime(2021, 7, 6, 21, 22, 14, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 665856622, 'comment_body': 'To clarify, the missed opportunity in `add_vector(vector=""abc"")` is that you are saying twice you are dealing with a vector. It is just repeating the information. Actually calling the function with the keyword argument then feels repetitive. Defining the function as `add_vector(self, name)` adds some information about what the argument actually is (it is a name, so string, and not some complex object - although in theory we could support things like that, in Python `arg` is often used as an argument name in that case from what I have seen). On the other hand, name does not add that much info in the actual call `add_vector(name=""abc"")`, so perhaps using it just as `add_vector(""abc"")` makes more sense. You could argue that name is name of the layer as displayed in the legend I guess. If you say in documentation, never use keyword argument for the first argument, you can change the name any time without breaking your API. That\'s the Python side of things.\r\n\r\nIn GRASS GIS, the parameters always have names like in Python and in some contexts, it is okay to leave out the name of the first one (in Python you can _generally_ (not always) leave out any name). The current practice is that if there is one raster or vector map as input and there is no output, it is called _map_, it is called _input_ if there is also output(s), and it is called _vector_ when there is also raster and vice versa. This was called into question because the rules are unclear to some users (defining ""no output"" is one of the tricky parts). The non-interactive d.vect-like functions will use this GRASS parameter name, however, we are not bound by these names here and can pick what works best.', 'comment_created': datetime.datetime(2021, 7, 8, 4, 13, 45, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 666240429, 'comment_body': ""Ah, ok, I understand better now. So, let's go with `add_vector(self, name)`? That would match both Python and GRASS convention since it is the first parameter (see 1st sentence, 2nd paragraph. And, I agree that adding `name=` doesn't add much information."", 'comment_created': datetime.datetime(2021, 7, 8, 14, 21, 35, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 666259813, 'comment_body': 'Also, reading your comment above again, I see your point. I need to use `[""name""]` from `gs.find_file` instead of from whatever the user provides so that it will work if the user provides `""abc@PERMANENT""` - that way you don\'t end up with a file called `""tmp_abc@PERMANENT.json""`.', 'comment_created': datetime.datetime(2021, 7, 8, 14, 42, 39, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 666287265, 'comment_body': 'To (partially) future proof this, you can list each module (name) on a separate line. I just did that for the Makefile in parent dir in this PR: https://github.com/OSGeo/grass/pull/1715/files#diff-ca3c8a522b85886bddf093dff36a30011e88cd6c5335d554d2f1ffb08582903d', 'comment_created': datetime.datetime(2021, 7, 8, 15, 13, 22, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 666292282, 'comment_body': 'This change is unrelated to this PR, but if you want to make your docstrings correct, you can follow [PEP 257 -- Docstring Conventions](https://www.python.org/dev/peps/pep-0257/#multi-line-docstrings):\r\n\r\n```\r\ndef complex():\r\n    """"""Form a complex number.\r\n\r\n    More text. ...\r\n\r\n    More text in more pragraphs. ...\r\n    """"""\r\n```', 'comment_created': datetime.datetime(2021, 7, 8, 15, 19, 22, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 666299718, 'comment_body': ""To much overhead, this is calling g.findfile twice and twice parsing its output in Python. Maybe small overhead compared to time spend with manipulating the vector, but still not a good practice.\r\n\r\nNaming that variable is hard, but the code is short (scope where the variable lives), so it can be something generic, like result (as in result from querying the spatial database) or some combination of file, vector, info, names, dict... I'm afraid there is no term for this thing in GRASS."", 'comment_created': datetime.datetime(2021, 7, 8, 15, 27, 50, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 666326701, 'comment_body': '> ...let\'s go with `add_vector(self, name)`? ...adding `name=` doesn\'t add much information.\r\n\r\nSounds good, but say in the documentation that ""*name* a positional-only parameter"" (as, for example, *x* is described in [documentation of float buildin](https://docs.python.org/3/library/functions.html#float). There is a way in [new Python versions](https://docs.python.org/3/reference/compound_stmts.html#function-definitions) to do that on language-level rather than just in the documentation, but we need to support older version too (you can see full info in \r\n[PEP 570 -- Python Positional-Only Parameters](https://www.python.org/dev/peps/pep-0570/)).\r\n\r\nThis way you are not making any promises about the name of the parameter and are saying that `add_vector(""abc"")` is the right way of using this method.', 'comment_created': datetime.datetime(2021, 7, 8, 16, 0, 58, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 666329051, 'comment_body': 'Same as above for find_file. `gisenv = gs.gisenv...`', 'comment_created': datetime.datetime(2021, 7, 8, 16, 3, 53, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 666335834, 'comment_body': 'Use Path from pathlib to manipulate the paths or os.path.join, i.e., do not construct paths using string formatting (filename and directory names yes, but not paths).\r\n\r\nAssuming that self.tmp_dir is already a Path, the statement will look like:\r\n\r\n```\r\n        json_file = self.tmp_dir / f""tmp_{name}.json""\r\n```\r\n\r\nThe disadvantage of Path, is that you need to convert it to string, but things like format strings work out of the box:\r\n\r\n```\r\n>>> from pathlib import Path\r\n>>> a = Path(""/tmp"")\r\n>>> f""{a}""\r\n\'/tmp\'\r\n```', 'comment_created': datetime.datetime(2021, 7, 8, 16, 12, 56, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 668137793, 'comment_body': 'The tab is sufficient. Delete the space.', 'comment_created': datetime.datetime(2021, 7, 12, 17, 52, 38, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 668150235, 'comment_body': 'There is a `m = gj.GrassRenderer` line above the g.region line. So delete that one?', 'comment_created': datetime.datetime(2021, 7, 12, 18, 11, 24, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 668151812, 'comment_body': 'display', 'comment_created': datetime.datetime(2021, 7, 12, 18, 14, 3, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 668157662, 'comment_body': 'You need to set this to False in init to make this line work or set self.layer_control_object to None and than test it here. In both cases, the test can be just `if self.layer_control:`.', 'comment_created': datetime.datetime(2021, 7, 12, 18, 23, 33, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 668271006, 'comment_body': 'I decreased the number of blank lines in later commits.', 'comment_created': datetime.datetime(2021, 7, 12, 21, 31, 45, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 668272343, 'comment_body': 'I think this is resolved?', 'comment_created': datetime.datetime(2021, 7, 12, 21, 34, 13, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 668272916, 'comment_body': 'To clarify here, I should open a new PR where I update all the docstrings to follow PEP 257? Or should I address this here?', 'comment_created': datetime.datetime(2021, 7, 12, 21, 35, 22, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 668273741, 'comment_body': 'I removed many empty lines in later commits.', 'comment_created': datetime.datetime(2021, 7, 12, 21, 36, 49, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 668276765, 'comment_body': 'Not sure which space you meant. I deleted a one space before each word on lines 9-11.', 'comment_created': datetime.datetime(2021, 7, 12, 21, 42, 40, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 668291663, 'comment_body': 'Perhaps we can talk about this at our next meeting. I have some lingering confusion and am not sure if I\'ve done the correct way. I think the way I have it written is a ""positional-only parameter""? From reading those links, it\'s my understanding that, with the way it\'s currently written, the user couldn\'t use `add_vector(self, name=""abc"")` which inherently means it\'s a ""positional-only parameter.""', 'comment_created': datetime.datetime(2021, 7, 12, 22, 13, 42, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 668354572, 'comment_body': 'Fix the newly added docstrings. Leave the rest for later or for PRs where you are modifying the code anyway.', 'comment_created': datetime.datetime(2021, 7, 13, 1, 6, 44, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 668355947, 'comment_body': 'Let\'s talk about it then. In the meantime, try running `add_vector(self, vector=""abc"")` yourself.', 'comment_created': datetime.datetime(2021, 7, 13, 1, 10, 57, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 668356785, 'comment_body': ""That's exactly what I meant. Thanks. This makes it perfectly clear that the space is not needed there for the next person editing this file or copying code from here."", 'comment_created': datetime.datetime(2021, 7, 13, 1, 13, 39, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 668399004, 'comment_body': 'I removed the changes in setup.py and reformatted to docstrings in interact-display.py to reflect PEP 257 (since these are the newly added docstrings).', 'comment_created': datetime.datetime(2021, 7, 13, 3, 26, 3, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}]","[{'commit_sha': '57c19d9393cfaa8bcc5b00e52697b6c705f53078', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '009d763757d853230edb57a4408147425de6221b', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '527a0dd4c4fc6442e7dae1ee70c56367319b80d6', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b47a92519558b6fce0df70d57eed60294165461c', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e797fe2ada2a5cb99411c323c7594875b4526922', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d7dd0a4b4aea9a4d3e39e62db0f14e9c2422b64', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '008c2a128b54dc829779ca34599698c696581b90', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d5cdc9b97a2b4d0f30d76b45f8523358d5e731c', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3573fe7997ffc4403bceae76bbd2ced9ee0dd7ea', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed5885116be6cae387e5bfa244d16d4aefe8e4d2', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93305e6dc8b19fa9b36603219d97377a6916ad91', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0fd448b373f820225d5283a7a7e3ccb92365db5b', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b23a9c75a4c59268e3d023ad3de550965bee1fb', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd1a9a886a7f69a4064f6ccc920bc1aebb6306351', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66ebacc8686c273461779312d7546ad672160603', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e8e97b4c76059238f8b7ec564a0448fc2f589fd9', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03f2dd69f8057d5217fa529ae57bbc2254907364', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3720957235a1b05cc6f178cab65626bc0521bc88', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7b463df64f6f7834961ff23fd4cf96e8b048f86', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e73f60ca369688d0b8edc392122cad04ae65d5b1', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2347f5dd842fa4608c4cc442a6a2278047dc6043', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca486c734691ec17bbf2b617c1454a759399e940', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d5b84a3730da1a03b7131f14a583c591e16dec4', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7561125cf7ae03c193c5b30e9e2d1bebedf04b7', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c71bb2972180fcb9796155904ebae3e95911afa', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e2f99d3cc4d5ca1e91f96aade66c23e86e904e0', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '545e0a78d6396237bf5f88d3467a9bf9713913ae', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e2cbf7c87bb701bcd07c2962ff499dc06803d31', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09141140737b99c91d93d265b04ed29bd1e03137', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ae9a953efbe99b0900ec4b6fb9303c85e8f633f', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1177f36a507424fc263b0b19626ab9727bdc1bf', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}]",Caitlin Haedrich,69856275,,User,,31,,5,13
683321742,Interactive vector maps for Jupyter Notebooks,"* InteractiveMap class produces interactive folium maps centered on current g.region in Jupyter Notebooks
* Functions for adding vectors to folium map by
* Vectors are passed from GRASS to folium by reprojecting to WGS84 in a temporary Location, exporting as GeoJSON files and importing to folium.

This PR contains functions for displaying GRASS vector data in interactive folium maps for Jupyter Notebooks. It is part of an ongoing Google Summer of Code project, Improved Integration of GRASS and Jupyter Notebooks. You can find more information [here](https://trac.osgeo.org/grass/wiki/GSoC/2021/JupyterAndGRASS). ",True,1710,https://api.github.com/repos/OSGeo/grass/pulls/1710,https://github.com/OSGeo/grass/pull/1710,closed,226,21,5,31,7,49,2,0,"[{'name': 'enhancement'}, {'name': 'gsoc'}]",2021-07-05 03:21:09+00:00,2021-07-19 21:03:07+00:00,1273318.0,"14 days, 17:41:58","[{'comment_id': 663625742, 'comment_body': ""What's wrong with `grass.script.create_location`?"", 'comment_created': datetime.datetime(2021, 7, 5, 4, 10, 11, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 663626438, 'comment_body': 'Use f-string.', 'comment_created': datetime.datetime(2021, 7, 5, 4, 13, 5, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 663627843, 'comment_body': 'Since you have the `_convert_coordinates` function, it is better to do (hide) this formatting stuff there.', 'comment_created': datetime.datetime(2021, 7, 5, 4, 19, 3, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 663628449, 'comment_body': 'The upper case here is somewhat unexpected. Either all lower case or switch the dictionary to types.SimpleNamespace and use attributes where it is clear it needs to be lower case.', 'comment_created': datetime.datetime(2021, 7, 5, 4, 21, 34, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 663629388, 'comment_body': 'This will actually break for more advanced cases. Adding mapset is actually more sophisticated. If v.proj can handle that, that would be best.', 'comment_created': datetime.datetime(2021, 7, 5, 4, 25, 14, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 663629632, 'comment_body': 'The code will change, but `""tmp_{}.json"".format(vector)` should be a variable.', 'comment_created': datetime.datetime(2021, 7, 5, 4, 26, 21, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 663630201, 'comment_body': 'I still think there might be a better, completely different, name, but in any case, the adjectives should go first, noun last, e.g., GrassInteractiveRenderer.', 'comment_created': datetime.datetime(2021, 7, 5, 4, 28, 52, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 664015760, 'comment_body': ""`create_location` calls `create_environment`. The user cannot pass an environment to `create_location` so I couldn't get a new location to be created in `self._env`; it will always create a new environment with `os.environ.copy()` and doesn't return the new environment either. I think this means it wouldn't work? Or is there another workflow you had in mind?"", 'comment_created': datetime.datetime(2021, 7, 5, 15, 36, 52, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 664089124, 'comment_body': ""`grass.script.create_location` creates a new location. It does not modify or return the environment and it is not supposed to. It really only creates a location.\r\n\r\nGenerally, you can modify `create_location` or anything else if needed. There is one advanced case where passing `env` to `create_location` would make sense, but unless you are thinking of that, let's just leave it as is because it is not needed here.\r\n\r\nBasically, the first question is, does it create location in your case?\r\n\r\nAnother things is that you create a separate environment later and use that to run things in that location, i.e., you don't need `create_location` to do it for you; it is a separate step in how these functions are designed."", 'comment_created': datetime.datetime(2021, 7, 5, 18, 49, 26, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 664090915, 'comment_body': 'You won\'t really have just one `self._env` like in the case of the non-interactive rendering. There might be more. In any case, the env here is specific to working in that EPSG:4326 location, so a less generic name might be good.\r\n\r\nSecond thing is that the documentation says ""The user of this function is responsible for deleting the file."" You will need to keep the name to delete it later.', 'comment_created': datetime.datetime(2021, 7, 5, 18, 55, 2, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 664092474, 'comment_body': 'Likely not needed.', 'comment_created': datetime.datetime(2021, 7, 5, 19, 0, 10, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 664093194, 'comment_body': 'Extra line.', 'comment_created': datetime.datetime(2021, 7, 5, 19, 1, 58, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 664093353, 'comment_body': ""I don't think this line improves readability."", 'comment_created': datetime.datetime(2021, 7, 5, 19, 2, 33, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 664095282, 'comment_body': 'I was saying this at another occasion somewhere, but I will use the same line: Despite the popular belief, Python does not require an empty line after each statement.\r\n\r\nWell places empty lines here and there, may improve readability. More space around each line may be achieved in a many text editors by increasing line spacing. \r\n', 'comment_created': datetime.datetime(2021, 7, 5, 19, 9, 13, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 664107813, 'comment_body': 'Hmm, if I leave the mapset kwarg empty in v.proj, I get an error that the vector cannot be found in ""user1"" (because the vectors I\'ve been using are all in the PERMANENT mapset). Is this what you had in mind? Not sure how else to do this...', 'comment_created': datetime.datetime(2021, 7, 5, 19, 53, 7, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 664109875, 'comment_body': 'What about InteractiveMap? The idea that is for GRASS is already implied since the library is called grass.jupyter.', 'comment_created': datetime.datetime(2021, 7, 5, 20, 0, 58, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 664120402, 'comment_body': ""Right, v.proj can't do this automatically in this context. It just defaults to the current mapset (and it is suspicious that it is user1 in your case, but that's a separate issue).\r\n\r\nYou need to use `gs.find_file` which will do the correct lookup for you. This needs to run in the current mapset and than the mapset name you acquire will go to v.proj running in that WGS84 location."", 'comment_created': datetime.datetime(2021, 7, 5, 20, 42, 22, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 664789880, 'comment_body': ""I switched back to `gs.create_location` and it doesn't return an error anymore and it seems to work fine. I'm not sure why I was having so much trouble with that before... So, all set now - thanks!"", 'comment_created': datetime.datetime(2021, 7, 6, 18, 33, 57, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 664800815, 'comment_body': 'Ah! Ok, that makes sense. I think I have it working with `gs.find_file` now.\r\n\r\nIt is ""user1"" because that\'s what I called in gj.init.', 'comment_created': datetime.datetime(2021, 7, 6, 18, 50, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 664807435, 'comment_body': ""Maybe `self._folium_env`?\r\n\r\nNoted. I think I'm creating a lot of things that probably have to be cleaned up later..."", 'comment_created': datetime.datetime(2021, 7, 6, 19, 0, 48, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 664808815, 'comment_body': ""I'm not sure how else to get `GISDBASE` which is required for `create_location` and `create_environment`. It isn't stored in `os.environ`. I also think I need the original location and mapset for v.proj and I'm not sure how to get that besides in the rcfile."", 'comment_created': datetime.datetime(2021, 7, 6, 19, 3, 3, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 664866699, 'comment_body': '> I\'m not sure how else to get `GISDBASE` which is required for `create_location` and `create_environment`.\r\n\r\nActually, that\'s another issue. You should probably use some temporary directory for this. You can use standard Python library to get a temporary directory. (`GISDBASE` is just a directory - a directory where locations (""projects"") are.) In standard GRASS session created by the _grass_ command, there is one already created and can be used for things like this, but it needs to be used with some care and _grass.script.setup.init_ is not setting it up unlike the _grass_ command.\r\n\r\n> It isn\'t stored in `os.environ`.\r\n\r\nThe equivalent of the system environment in GRASS is so called _GIS environment_ (a legacy name) accessible through _g.gisenv_ (_gs.gisenv_ function in Python). It is interface to the rc file (session file).\r\n\r\n> I also think I need the original location and mapset for v.proj and I\'m not sure how to get that besides in the rcfile.\r\n\r\nRight, but the mapset should come from the _find_file_ call.', 'comment_created': datetime.datetime(2021, 7, 6, 20, 45, 32, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 664869189, 'comment_body': ""> Maybe `self._folium_env`?\r\n\r\nYou will need pseudo-mercator for the rasters/images, so perhaps `self._vector_env` or `self._wgs84_env`.\r\n\r\n> I think I'm creating a lot of things that probably have to be cleaned up later...\r\n\r\nRight, good to keep a track of those, but you can just create an issue for that when you are ready to merge this PR, i.e., it does not have to be part of this PR (this applies to all other PRs as well). Or you can list known issues in the PR description."", 'comment_created': datetime.datetime(2021, 7, 6, 20, 50, 11, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 664877330, 'comment_body': 'Maybe the mapset is not needed when v.proj gets a fully qualified name as input (since mapset is already specified in input). Read the documentation and/or test. Using the original/current mapset would be wrong (the vector is in the mapset returned by find_file, not necessarily in the current one).\r\n\r\nI would also suggest to name the variable full_name just to be clear later what is happening or overwrite the vector variable by the result if you want shorter code (I think it would still be perfectly readable), but see my later comment about v.out.ogr. It is also somewhat confusing to name this name since one of the values find_file returns is under key `name`.', 'comment_created': datetime.datetime(2021, 7, 6, 21, 4, 48, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 664884830, 'comment_body': 'This works I think only because the vector happens to be in the PERMANENT mapset in the original/current location. This may or may not be the case generally. In the `self._env` location, it will always be in PERMANENT. Specifying only the name without mapset seems to me like the best way to go. You just reprojected that to whatever is the current mapset for `self._env`, so specifying the mapset is not needed.\r\n\r\nTo cover all the cases, you need to really have the original name here, but perhaps stripped from the mapset - right, you should support things like `add_vector(""streams@user1"")`. Fortunately, just passing that to _find_file_ should work (I just tested with _g.findfile_). It will resolve all the pieces for you. In other words, passing the fullname is wrong, passing the original parameter value won\'t work for `name@mapset` case, use full _find_file_ result to reliably get the pieces you need.', 'comment_created': datetime.datetime(2021, 7, 6, 21, 18, 36, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 664886745, 'comment_body': 'I\'m generally see `add_vector(vector=""abc"")` as a missed opportunity to document what the parameter is. In a general Python context, I would say `add_vector(name=""abc"")`. You could also say it should always be called as `add_vector(""abc"")` and leave your hands free for later change of the parameter name.', 'comment_created': datetime.datetime(2021, 7, 6, 21, 22, 14, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 665856622, 'comment_body': 'To clarify, the missed opportunity in `add_vector(vector=""abc"")` is that you are saying twice you are dealing with a vector. It is just repeating the information. Actually calling the function with the keyword argument then feels repetitive. Defining the function as `add_vector(self, name)` adds some information about what the argument actually is (it is a name, so string, and not some complex object - although in theory we could support things like that, in Python `arg` is often used as an argument name in that case from what I have seen). On the other hand, name does not add that much info in the actual call `add_vector(name=""abc"")`, so perhaps using it just as `add_vector(""abc"")` makes more sense. You could argue that name is name of the layer as displayed in the legend I guess. If you say in documentation, never use keyword argument for the first argument, you can change the name any time without breaking your API. That\'s the Python side of things.\r\n\r\nIn GRASS GIS, the parameters always have names like in Python and in some contexts, it is okay to leave out the name of the first one (in Python you can _generally_ (not always) leave out any name). The current practice is that if there is one raster or vector map as input and there is no output, it is called _map_, it is called _input_ if there is also output(s), and it is called _vector_ when there is also raster and vice versa. This was called into question because the rules are unclear to some users (defining ""no output"" is one of the tricky parts). The non-interactive d.vect-like functions will use this GRASS parameter name, however, we are not bound by these names here and can pick what works best.', 'comment_created': datetime.datetime(2021, 7, 8, 4, 13, 45, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 666240429, 'comment_body': ""Ah, ok, I understand better now. So, let's go with `add_vector(self, name)`? That would match both Python and GRASS convention since it is the first parameter (see 1st sentence, 2nd paragraph. And, I agree that adding `name=` doesn't add much information."", 'comment_created': datetime.datetime(2021, 7, 8, 14, 21, 35, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 666259813, 'comment_body': 'Also, reading your comment above again, I see your point. I need to use `[""name""]` from `gs.find_file` instead of from whatever the user provides so that it will work if the user provides `""abc@PERMANENT""` - that way you don\'t end up with a file called `""tmp_abc@PERMANENT.json""`.', 'comment_created': datetime.datetime(2021, 7, 8, 14, 42, 39, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 666287265, 'comment_body': 'To (partially) future proof this, you can list each module (name) on a separate line. I just did that for the Makefile in parent dir in this PR: https://github.com/OSGeo/grass/pull/1715/files#diff-ca3c8a522b85886bddf093dff36a30011e88cd6c5335d554d2f1ffb08582903d', 'comment_created': datetime.datetime(2021, 7, 8, 15, 13, 22, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 666292282, 'comment_body': 'This change is unrelated to this PR, but if you want to make your docstrings correct, you can follow [PEP 257 -- Docstring Conventions](https://www.python.org/dev/peps/pep-0257/#multi-line-docstrings):\r\n\r\n```\r\ndef complex():\r\n    """"""Form a complex number.\r\n\r\n    More text. ...\r\n\r\n    More text in more pragraphs. ...\r\n    """"""\r\n```', 'comment_created': datetime.datetime(2021, 7, 8, 15, 19, 22, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 666299718, 'comment_body': ""To much overhead, this is calling g.findfile twice and twice parsing its output in Python. Maybe small overhead compared to time spend with manipulating the vector, but still not a good practice.\r\n\r\nNaming that variable is hard, but the code is short (scope where the variable lives), so it can be something generic, like result (as in result from querying the spatial database) or some combination of file, vector, info, names, dict... I'm afraid there is no term for this thing in GRASS."", 'comment_created': datetime.datetime(2021, 7, 8, 15, 27, 50, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 666326701, 'comment_body': '> ...let\'s go with `add_vector(self, name)`? ...adding `name=` doesn\'t add much information.\r\n\r\nSounds good, but say in the documentation that ""*name* a positional-only parameter"" (as, for example, *x* is described in [documentation of float buildin](https://docs.python.org/3/library/functions.html#float). There is a way in [new Python versions](https://docs.python.org/3/reference/compound_stmts.html#function-definitions) to do that on language-level rather than just in the documentation, but we need to support older version too (you can see full info in \r\n[PEP 570 -- Python Positional-Only Parameters](https://www.python.org/dev/peps/pep-0570/)).\r\n\r\nThis way you are not making any promises about the name of the parameter and are saying that `add_vector(""abc"")` is the right way of using this method.', 'comment_created': datetime.datetime(2021, 7, 8, 16, 0, 58, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 666329051, 'comment_body': 'Same as above for find_file. `gisenv = gs.gisenv...`', 'comment_created': datetime.datetime(2021, 7, 8, 16, 3, 53, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 666335834, 'comment_body': 'Use Path from pathlib to manipulate the paths or os.path.join, i.e., do not construct paths using string formatting (filename and directory names yes, but not paths).\r\n\r\nAssuming that self.tmp_dir is already a Path, the statement will look like:\r\n\r\n```\r\n        json_file = self.tmp_dir / f""tmp_{name}.json""\r\n```\r\n\r\nThe disadvantage of Path, is that you need to convert it to string, but things like format strings work out of the box:\r\n\r\n```\r\n>>> from pathlib import Path\r\n>>> a = Path(""/tmp"")\r\n>>> f""{a}""\r\n\'/tmp\'\r\n```', 'comment_created': datetime.datetime(2021, 7, 8, 16, 12, 56, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 668137793, 'comment_body': 'The tab is sufficient. Delete the space.', 'comment_created': datetime.datetime(2021, 7, 12, 17, 52, 38, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 668150235, 'comment_body': 'There is a `m = gj.GrassRenderer` line above the g.region line. So delete that one?', 'comment_created': datetime.datetime(2021, 7, 12, 18, 11, 24, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 668151812, 'comment_body': 'display', 'comment_created': datetime.datetime(2021, 7, 12, 18, 14, 3, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 668157662, 'comment_body': 'You need to set this to False in init to make this line work or set self.layer_control_object to None and than test it here. In both cases, the test can be just `if self.layer_control:`.', 'comment_created': datetime.datetime(2021, 7, 12, 18, 23, 33, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 668271006, 'comment_body': 'I decreased the number of blank lines in later commits.', 'comment_created': datetime.datetime(2021, 7, 12, 21, 31, 45, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 668272343, 'comment_body': 'I think this is resolved?', 'comment_created': datetime.datetime(2021, 7, 12, 21, 34, 13, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 668272916, 'comment_body': 'To clarify here, I should open a new PR where I update all the docstrings to follow PEP 257? Or should I address this here?', 'comment_created': datetime.datetime(2021, 7, 12, 21, 35, 22, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 668273741, 'comment_body': 'I removed many empty lines in later commits.', 'comment_created': datetime.datetime(2021, 7, 12, 21, 36, 49, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 668276765, 'comment_body': 'Not sure which space you meant. I deleted a one space before each word on lines 9-11.', 'comment_created': datetime.datetime(2021, 7, 12, 21, 42, 40, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 668291663, 'comment_body': 'Perhaps we can talk about this at our next meeting. I have some lingering confusion and am not sure if I\'ve done the correct way. I think the way I have it written is a ""positional-only parameter""? From reading those links, it\'s my understanding that, with the way it\'s currently written, the user couldn\'t use `add_vector(self, name=""abc"")` which inherently means it\'s a ""positional-only parameter.""', 'comment_created': datetime.datetime(2021, 7, 12, 22, 13, 42, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 668354572, 'comment_body': 'Fix the newly added docstrings. Leave the rest for later or for PRs where you are modifying the code anyway.', 'comment_created': datetime.datetime(2021, 7, 13, 1, 6, 44, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 668355947, 'comment_body': 'Let\'s talk about it then. In the meantime, try running `add_vector(self, vector=""abc"")` yourself.', 'comment_created': datetime.datetime(2021, 7, 13, 1, 10, 57, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 668356785, 'comment_body': ""That's exactly what I meant. Thanks. This makes it perfectly clear that the space is not needed there for the next person editing this file or copying code from here."", 'comment_created': datetime.datetime(2021, 7, 13, 1, 13, 39, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 668399004, 'comment_body': 'I removed the changes in setup.py and reformatted to docstrings in interact-display.py to reflect PEP 257 (since these are the newly added docstrings).', 'comment_created': datetime.datetime(2021, 7, 13, 3, 26, 3, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}]","[{'commit_sha': '57c19d9393cfaa8bcc5b00e52697b6c705f53078', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '009d763757d853230edb57a4408147425de6221b', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '527a0dd4c4fc6442e7dae1ee70c56367319b80d6', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b47a92519558b6fce0df70d57eed60294165461c', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e797fe2ada2a5cb99411c323c7594875b4526922', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d7dd0a4b4aea9a4d3e39e62db0f14e9c2422b64', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '008c2a128b54dc829779ca34599698c696581b90', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d5cdc9b97a2b4d0f30d76b45f8523358d5e731c', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3573fe7997ffc4403bceae76bbd2ced9ee0dd7ea', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed5885116be6cae387e5bfa244d16d4aefe8e4d2', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93305e6dc8b19fa9b36603219d97377a6916ad91', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0fd448b373f820225d5283a7a7e3ccb92365db5b', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b23a9c75a4c59268e3d023ad3de550965bee1fb', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd1a9a886a7f69a4064f6ccc920bc1aebb6306351', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66ebacc8686c273461779312d7546ad672160603', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e8e97b4c76059238f8b7ec564a0448fc2f589fd9', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03f2dd69f8057d5217fa529ae57bbc2254907364', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3720957235a1b05cc6f178cab65626bc0521bc88', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7b463df64f6f7834961ff23fd4cf96e8b048f86', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e73f60ca369688d0b8edc392122cad04ae65d5b1', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2347f5dd842fa4608c4cc442a6a2278047dc6043', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca486c734691ec17bbf2b617c1454a759399e940', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d5b84a3730da1a03b7131f14a583c591e16dec4', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7561125cf7ae03c193c5b30e9e2d1bebedf04b7', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c71bb2972180fcb9796155904ebae3e95911afa', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e2f99d3cc4d5ca1e91f96aade66c23e86e904e0', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '545e0a78d6396237bf5f88d3467a9bf9713913ae', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e2cbf7c87bb701bcd07c2962ff499dc06803d31', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09141140737b99c91d93d265b04ed29bd1e03137', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ae9a953efbe99b0900ec4b6fb9303c85e8f633f', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1177f36a507424fc263b0b19626ab9727bdc1bf', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}]",Caitlin Haedrich,69856275,,User,,31,,5,13
690227266,Add temporary files for Non-Interactive Display,"* Write display-related files to temporary files for non-interactive displays in Jupyter Notebooks. The option remains to write the display to a PNG when provided a path and filename.  
* Edit `grass.jupyter` demonstration notebook to include example with legend.
* Improved Documentation and added renderer parameter to GrassRenderer

These modifications are part of an on-going Google Summer of Code project, Improved Integration of GRASS GIS and Jupyter Notebooks. You can find more information [here](https://trac.osgeo.org/grass/wiki/GSoC/2021/JupyterAndGRASS). 

You can also try out the changes suggested in this PR here:

https://mybinder.org/v2/gh/chaedri/grass/add-temp-directory?urlpath=lab%2Ftree%2Fdoc%2Fnotebooks%2Fjupyter_integration.ipynb",True,1727,https://api.github.com/repos/OSGeo/grass/pulls/1727,https://github.com/OSGeo/grass/pull/1727,closed,28,12,2,21,6,0,2,0,"[{'name': 'enhancement'}, {'name': 'gsoc'}]",2021-07-14 21:10:33+00:00,2021-07-30 19:19:21+00:00,1375728.0,"15 days, 22:08:48",[],"[{'commit_sha': '4c322d16e0bf0f8f58585ed1fd9146e890d13be7', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b567f7b7792c14a7d7159cec030561577a10fb7', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db56e793d83c26ea850af5b44c4a17b9fb436836', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6587caec9d3608f962cb8f52e77f97b769870864', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d06710bfbcbe219451b6f2d29f3a7902b7ba4f1', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a4c48b6a7af26011f3b56490002556a73d017eb', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '065ce0bd82b6aeb7185839ba881a7826fb24c0ee', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da54c26f65ea324c385ebb291504db4ef45d183b', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '41e86c89c42e14d75b98ebf55dc4c8ffd5443fbf', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ac09fc4bc870f3805145c1230081d55c29f182a', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7106b2296c971b07ee84137276756dd60358f08d', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef6b161398340434cadbe950304c877c2ed68cb0', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '18d798b936aadbd38b34ab85dcdc3176606d3c3b', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a8281c3cf5c2e0e74657719c9bd3e6ecc8bad58', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c1d697f5192f79b8eb44bcb04dabc4c91fdb7ab', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f96bc69402313f0b305a4e832de86f3d7574e7a', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d09be1b629f25c213f966f84c103e9a5ee628da', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a567f585a201ddc3c3ae3a9bb6d5f1b3d8d38a3', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a99a40567dc44febefe1a905ae97a110059f8423', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ab1fec474f6a365203afccb67155a7e38b70dd2', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '986dcf1cb595b44f2b4a2fc7711b2635aeb83a5b', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}]",Caitlin Haedrich,69856275,,User,,31,,5,13
683321742,Interactive vector maps for Jupyter Notebooks,"* InteractiveMap class produces interactive folium maps centered on current g.region in Jupyter Notebooks
* Functions for adding vectors to folium map by
* Vectors are passed from GRASS to folium by reprojecting to WGS84 in a temporary Location, exporting as GeoJSON files and importing to folium.

This PR contains functions for displaying GRASS vector data in interactive folium maps for Jupyter Notebooks. It is part of an ongoing Google Summer of Code project, Improved Integration of GRASS and Jupyter Notebooks. You can find more information [here](https://trac.osgeo.org/grass/wiki/GSoC/2021/JupyterAndGRASS). ",True,1710,https://api.github.com/repos/OSGeo/grass/pulls/1710,https://github.com/OSGeo/grass/pull/1710,closed,226,21,5,31,7,49,2,0,"[{'name': 'enhancement'}, {'name': 'gsoc'}]",2021-07-05 03:21:09+00:00,2021-07-19 21:03:07+00:00,1273318.0,"14 days, 17:41:58","[{'comment_id': 663625742, 'comment_body': ""What's wrong with `grass.script.create_location`?"", 'comment_created': datetime.datetime(2021, 7, 5, 4, 10, 11, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 663626438, 'comment_body': 'Use f-string.', 'comment_created': datetime.datetime(2021, 7, 5, 4, 13, 5, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 663627843, 'comment_body': 'Since you have the `_convert_coordinates` function, it is better to do (hide) this formatting stuff there.', 'comment_created': datetime.datetime(2021, 7, 5, 4, 19, 3, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 663628449, 'comment_body': 'The upper case here is somewhat unexpected. Either all lower case or switch the dictionary to types.SimpleNamespace and use attributes where it is clear it needs to be lower case.', 'comment_created': datetime.datetime(2021, 7, 5, 4, 21, 34, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 663629388, 'comment_body': 'This will actually break for more advanced cases. Adding mapset is actually more sophisticated. If v.proj can handle that, that would be best.', 'comment_created': datetime.datetime(2021, 7, 5, 4, 25, 14, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 663629632, 'comment_body': 'The code will change, but `""tmp_{}.json"".format(vector)` should be a variable.', 'comment_created': datetime.datetime(2021, 7, 5, 4, 26, 21, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 663630201, 'comment_body': 'I still think there might be a better, completely different, name, but in any case, the adjectives should go first, noun last, e.g., GrassInteractiveRenderer.', 'comment_created': datetime.datetime(2021, 7, 5, 4, 28, 52, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 664015760, 'comment_body': ""`create_location` calls `create_environment`. The user cannot pass an environment to `create_location` so I couldn't get a new location to be created in `self._env`; it will always create a new environment with `os.environ.copy()` and doesn't return the new environment either. I think this means it wouldn't work? Or is there another workflow you had in mind?"", 'comment_created': datetime.datetime(2021, 7, 5, 15, 36, 52, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 664089124, 'comment_body': ""`grass.script.create_location` creates a new location. It does not modify or return the environment and it is not supposed to. It really only creates a location.\r\n\r\nGenerally, you can modify `create_location` or anything else if needed. There is one advanced case where passing `env` to `create_location` would make sense, but unless you are thinking of that, let's just leave it as is because it is not needed here.\r\n\r\nBasically, the first question is, does it create location in your case?\r\n\r\nAnother things is that you create a separate environment later and use that to run things in that location, i.e., you don't need `create_location` to do it for you; it is a separate step in how these functions are designed."", 'comment_created': datetime.datetime(2021, 7, 5, 18, 49, 26, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 664090915, 'comment_body': 'You won\'t really have just one `self._env` like in the case of the non-interactive rendering. There might be more. In any case, the env here is specific to working in that EPSG:4326 location, so a less generic name might be good.\r\n\r\nSecond thing is that the documentation says ""The user of this function is responsible for deleting the file."" You will need to keep the name to delete it later.', 'comment_created': datetime.datetime(2021, 7, 5, 18, 55, 2, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 664092474, 'comment_body': 'Likely not needed.', 'comment_created': datetime.datetime(2021, 7, 5, 19, 0, 10, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 664093194, 'comment_body': 'Extra line.', 'comment_created': datetime.datetime(2021, 7, 5, 19, 1, 58, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 664093353, 'comment_body': ""I don't think this line improves readability."", 'comment_created': datetime.datetime(2021, 7, 5, 19, 2, 33, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 664095282, 'comment_body': 'I was saying this at another occasion somewhere, but I will use the same line: Despite the popular belief, Python does not require an empty line after each statement.\r\n\r\nWell places empty lines here and there, may improve readability. More space around each line may be achieved in a many text editors by increasing line spacing. \r\n', 'comment_created': datetime.datetime(2021, 7, 5, 19, 9, 13, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 664107813, 'comment_body': 'Hmm, if I leave the mapset kwarg empty in v.proj, I get an error that the vector cannot be found in ""user1"" (because the vectors I\'ve been using are all in the PERMANENT mapset). Is this what you had in mind? Not sure how else to do this...', 'comment_created': datetime.datetime(2021, 7, 5, 19, 53, 7, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 664109875, 'comment_body': 'What about InteractiveMap? The idea that is for GRASS is already implied since the library is called grass.jupyter.', 'comment_created': datetime.datetime(2021, 7, 5, 20, 0, 58, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 664120402, 'comment_body': ""Right, v.proj can't do this automatically in this context. It just defaults to the current mapset (and it is suspicious that it is user1 in your case, but that's a separate issue).\r\n\r\nYou need to use `gs.find_file` which will do the correct lookup for you. This needs to run in the current mapset and than the mapset name you acquire will go to v.proj running in that WGS84 location."", 'comment_created': datetime.datetime(2021, 7, 5, 20, 42, 22, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 664789880, 'comment_body': ""I switched back to `gs.create_location` and it doesn't return an error anymore and it seems to work fine. I'm not sure why I was having so much trouble with that before... So, all set now - thanks!"", 'comment_created': datetime.datetime(2021, 7, 6, 18, 33, 57, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 664800815, 'comment_body': 'Ah! Ok, that makes sense. I think I have it working with `gs.find_file` now.\r\n\r\nIt is ""user1"" because that\'s what I called in gj.init.', 'comment_created': datetime.datetime(2021, 7, 6, 18, 50, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 664807435, 'comment_body': ""Maybe `self._folium_env`?\r\n\r\nNoted. I think I'm creating a lot of things that probably have to be cleaned up later..."", 'comment_created': datetime.datetime(2021, 7, 6, 19, 0, 48, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 664808815, 'comment_body': ""I'm not sure how else to get `GISDBASE` which is required for `create_location` and `create_environment`. It isn't stored in `os.environ`. I also think I need the original location and mapset for v.proj and I'm not sure how to get that besides in the rcfile."", 'comment_created': datetime.datetime(2021, 7, 6, 19, 3, 3, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 664866699, 'comment_body': '> I\'m not sure how else to get `GISDBASE` which is required for `create_location` and `create_environment`.\r\n\r\nActually, that\'s another issue. You should probably use some temporary directory for this. You can use standard Python library to get a temporary directory. (`GISDBASE` is just a directory - a directory where locations (""projects"") are.) In standard GRASS session created by the _grass_ command, there is one already created and can be used for things like this, but it needs to be used with some care and _grass.script.setup.init_ is not setting it up unlike the _grass_ command.\r\n\r\n> It isn\'t stored in `os.environ`.\r\n\r\nThe equivalent of the system environment in GRASS is so called _GIS environment_ (a legacy name) accessible through _g.gisenv_ (_gs.gisenv_ function in Python). It is interface to the rc file (session file).\r\n\r\n> I also think I need the original location and mapset for v.proj and I\'m not sure how to get that besides in the rcfile.\r\n\r\nRight, but the mapset should come from the _find_file_ call.', 'comment_created': datetime.datetime(2021, 7, 6, 20, 45, 32, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 664869189, 'comment_body': ""> Maybe `self._folium_env`?\r\n\r\nYou will need pseudo-mercator for the rasters/images, so perhaps `self._vector_env` or `self._wgs84_env`.\r\n\r\n> I think I'm creating a lot of things that probably have to be cleaned up later...\r\n\r\nRight, good to keep a track of those, but you can just create an issue for that when you are ready to merge this PR, i.e., it does not have to be part of this PR (this applies to all other PRs as well). Or you can list known issues in the PR description."", 'comment_created': datetime.datetime(2021, 7, 6, 20, 50, 11, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 664877330, 'comment_body': 'Maybe the mapset is not needed when v.proj gets a fully qualified name as input (since mapset is already specified in input). Read the documentation and/or test. Using the original/current mapset would be wrong (the vector is in the mapset returned by find_file, not necessarily in the current one).\r\n\r\nI would also suggest to name the variable full_name just to be clear later what is happening or overwrite the vector variable by the result if you want shorter code (I think it would still be perfectly readable), but see my later comment about v.out.ogr. It is also somewhat confusing to name this name since one of the values find_file returns is under key `name`.', 'comment_created': datetime.datetime(2021, 7, 6, 21, 4, 48, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 664884830, 'comment_body': 'This works I think only because the vector happens to be in the PERMANENT mapset in the original/current location. This may or may not be the case generally. In the `self._env` location, it will always be in PERMANENT. Specifying only the name without mapset seems to me like the best way to go. You just reprojected that to whatever is the current mapset for `self._env`, so specifying the mapset is not needed.\r\n\r\nTo cover all the cases, you need to really have the original name here, but perhaps stripped from the mapset - right, you should support things like `add_vector(""streams@user1"")`. Fortunately, just passing that to _find_file_ should work (I just tested with _g.findfile_). It will resolve all the pieces for you. In other words, passing the fullname is wrong, passing the original parameter value won\'t work for `name@mapset` case, use full _find_file_ result to reliably get the pieces you need.', 'comment_created': datetime.datetime(2021, 7, 6, 21, 18, 36, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 664886745, 'comment_body': 'I\'m generally see `add_vector(vector=""abc"")` as a missed opportunity to document what the parameter is. In a general Python context, I would say `add_vector(name=""abc"")`. You could also say it should always be called as `add_vector(""abc"")` and leave your hands free for later change of the parameter name.', 'comment_created': datetime.datetime(2021, 7, 6, 21, 22, 14, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 665856622, 'comment_body': 'To clarify, the missed opportunity in `add_vector(vector=""abc"")` is that you are saying twice you are dealing with a vector. It is just repeating the information. Actually calling the function with the keyword argument then feels repetitive. Defining the function as `add_vector(self, name)` adds some information about what the argument actually is (it is a name, so string, and not some complex object - although in theory we could support things like that, in Python `arg` is often used as an argument name in that case from what I have seen). On the other hand, name does not add that much info in the actual call `add_vector(name=""abc"")`, so perhaps using it just as `add_vector(""abc"")` makes more sense. You could argue that name is name of the layer as displayed in the legend I guess. If you say in documentation, never use keyword argument for the first argument, you can change the name any time without breaking your API. That\'s the Python side of things.\r\n\r\nIn GRASS GIS, the parameters always have names like in Python and in some contexts, it is okay to leave out the name of the first one (in Python you can _generally_ (not always) leave out any name). The current practice is that if there is one raster or vector map as input and there is no output, it is called _map_, it is called _input_ if there is also output(s), and it is called _vector_ when there is also raster and vice versa. This was called into question because the rules are unclear to some users (defining ""no output"" is one of the tricky parts). The non-interactive d.vect-like functions will use this GRASS parameter name, however, we are not bound by these names here and can pick what works best.', 'comment_created': datetime.datetime(2021, 7, 8, 4, 13, 45, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 666240429, 'comment_body': ""Ah, ok, I understand better now. So, let's go with `add_vector(self, name)`? That would match both Python and GRASS convention since it is the first parameter (see 1st sentence, 2nd paragraph. And, I agree that adding `name=` doesn't add much information."", 'comment_created': datetime.datetime(2021, 7, 8, 14, 21, 35, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 666259813, 'comment_body': 'Also, reading your comment above again, I see your point. I need to use `[""name""]` from `gs.find_file` instead of from whatever the user provides so that it will work if the user provides `""abc@PERMANENT""` - that way you don\'t end up with a file called `""tmp_abc@PERMANENT.json""`.', 'comment_created': datetime.datetime(2021, 7, 8, 14, 42, 39, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 666287265, 'comment_body': 'To (partially) future proof this, you can list each module (name) on a separate line. I just did that for the Makefile in parent dir in this PR: https://github.com/OSGeo/grass/pull/1715/files#diff-ca3c8a522b85886bddf093dff36a30011e88cd6c5335d554d2f1ffb08582903d', 'comment_created': datetime.datetime(2021, 7, 8, 15, 13, 22, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 666292282, 'comment_body': 'This change is unrelated to this PR, but if you want to make your docstrings correct, you can follow [PEP 257 -- Docstring Conventions](https://www.python.org/dev/peps/pep-0257/#multi-line-docstrings):\r\n\r\n```\r\ndef complex():\r\n    """"""Form a complex number.\r\n\r\n    More text. ...\r\n\r\n    More text in more pragraphs. ...\r\n    """"""\r\n```', 'comment_created': datetime.datetime(2021, 7, 8, 15, 19, 22, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 666299718, 'comment_body': ""To much overhead, this is calling g.findfile twice and twice parsing its output in Python. Maybe small overhead compared to time spend with manipulating the vector, but still not a good practice.\r\n\r\nNaming that variable is hard, but the code is short (scope where the variable lives), so it can be something generic, like result (as in result from querying the spatial database) or some combination of file, vector, info, names, dict... I'm afraid there is no term for this thing in GRASS."", 'comment_created': datetime.datetime(2021, 7, 8, 15, 27, 50, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 666326701, 'comment_body': '> ...let\'s go with `add_vector(self, name)`? ...adding `name=` doesn\'t add much information.\r\n\r\nSounds good, but say in the documentation that ""*name* a positional-only parameter"" (as, for example, *x* is described in [documentation of float buildin](https://docs.python.org/3/library/functions.html#float). There is a way in [new Python versions](https://docs.python.org/3/reference/compound_stmts.html#function-definitions) to do that on language-level rather than just in the documentation, but we need to support older version too (you can see full info in \r\n[PEP 570 -- Python Positional-Only Parameters](https://www.python.org/dev/peps/pep-0570/)).\r\n\r\nThis way you are not making any promises about the name of the parameter and are saying that `add_vector(""abc"")` is the right way of using this method.', 'comment_created': datetime.datetime(2021, 7, 8, 16, 0, 58, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 666329051, 'comment_body': 'Same as above for find_file. `gisenv = gs.gisenv...`', 'comment_created': datetime.datetime(2021, 7, 8, 16, 3, 53, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 666335834, 'comment_body': 'Use Path from pathlib to manipulate the paths or os.path.join, i.e., do not construct paths using string formatting (filename and directory names yes, but not paths).\r\n\r\nAssuming that self.tmp_dir is already a Path, the statement will look like:\r\n\r\n```\r\n        json_file = self.tmp_dir / f""tmp_{name}.json""\r\n```\r\n\r\nThe disadvantage of Path, is that you need to convert it to string, but things like format strings work out of the box:\r\n\r\n```\r\n>>> from pathlib import Path\r\n>>> a = Path(""/tmp"")\r\n>>> f""{a}""\r\n\'/tmp\'\r\n```', 'comment_created': datetime.datetime(2021, 7, 8, 16, 12, 56, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 668137793, 'comment_body': 'The tab is sufficient. Delete the space.', 'comment_created': datetime.datetime(2021, 7, 12, 17, 52, 38, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 668150235, 'comment_body': 'There is a `m = gj.GrassRenderer` line above the g.region line. So delete that one?', 'comment_created': datetime.datetime(2021, 7, 12, 18, 11, 24, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 668151812, 'comment_body': 'display', 'comment_created': datetime.datetime(2021, 7, 12, 18, 14, 3, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 668157662, 'comment_body': 'You need to set this to False in init to make this line work or set self.layer_control_object to None and than test it here. In both cases, the test can be just `if self.layer_control:`.', 'comment_created': datetime.datetime(2021, 7, 12, 18, 23, 33, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 668271006, 'comment_body': 'I decreased the number of blank lines in later commits.', 'comment_created': datetime.datetime(2021, 7, 12, 21, 31, 45, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 668272343, 'comment_body': 'I think this is resolved?', 'comment_created': datetime.datetime(2021, 7, 12, 21, 34, 13, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 668272916, 'comment_body': 'To clarify here, I should open a new PR where I update all the docstrings to follow PEP 257? Or should I address this here?', 'comment_created': datetime.datetime(2021, 7, 12, 21, 35, 22, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 668273741, 'comment_body': 'I removed many empty lines in later commits.', 'comment_created': datetime.datetime(2021, 7, 12, 21, 36, 49, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 668276765, 'comment_body': 'Not sure which space you meant. I deleted a one space before each word on lines 9-11.', 'comment_created': datetime.datetime(2021, 7, 12, 21, 42, 40, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 668291663, 'comment_body': 'Perhaps we can talk about this at our next meeting. I have some lingering confusion and am not sure if I\'ve done the correct way. I think the way I have it written is a ""positional-only parameter""? From reading those links, it\'s my understanding that, with the way it\'s currently written, the user couldn\'t use `add_vector(self, name=""abc"")` which inherently means it\'s a ""positional-only parameter.""', 'comment_created': datetime.datetime(2021, 7, 12, 22, 13, 42, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 668354572, 'comment_body': 'Fix the newly added docstrings. Leave the rest for later or for PRs where you are modifying the code anyway.', 'comment_created': datetime.datetime(2021, 7, 13, 1, 6, 44, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 668355947, 'comment_body': 'Let\'s talk about it then. In the meantime, try running `add_vector(self, vector=""abc"")` yourself.', 'comment_created': datetime.datetime(2021, 7, 13, 1, 10, 57, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 668356785, 'comment_body': ""That's exactly what I meant. Thanks. This makes it perfectly clear that the space is not needed there for the next person editing this file or copying code from here."", 'comment_created': datetime.datetime(2021, 7, 13, 1, 13, 39, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 668399004, 'comment_body': 'I removed the changes in setup.py and reformatted to docstrings in interact-display.py to reflect PEP 257 (since these are the newly added docstrings).', 'comment_created': datetime.datetime(2021, 7, 13, 3, 26, 3, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}]","[{'commit_sha': '57c19d9393cfaa8bcc5b00e52697b6c705f53078', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '009d763757d853230edb57a4408147425de6221b', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '527a0dd4c4fc6442e7dae1ee70c56367319b80d6', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b47a92519558b6fce0df70d57eed60294165461c', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e797fe2ada2a5cb99411c323c7594875b4526922', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d7dd0a4b4aea9a4d3e39e62db0f14e9c2422b64', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '008c2a128b54dc829779ca34599698c696581b90', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d5cdc9b97a2b4d0f30d76b45f8523358d5e731c', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3573fe7997ffc4403bceae76bbd2ced9ee0dd7ea', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed5885116be6cae387e5bfa244d16d4aefe8e4d2', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93305e6dc8b19fa9b36603219d97377a6916ad91', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0fd448b373f820225d5283a7a7e3ccb92365db5b', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b23a9c75a4c59268e3d023ad3de550965bee1fb', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd1a9a886a7f69a4064f6ccc920bc1aebb6306351', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66ebacc8686c273461779312d7546ad672160603', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e8e97b4c76059238f8b7ec564a0448fc2f589fd9', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03f2dd69f8057d5217fa529ae57bbc2254907364', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3720957235a1b05cc6f178cab65626bc0521bc88', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7b463df64f6f7834961ff23fd4cf96e8b048f86', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e73f60ca369688d0b8edc392122cad04ae65d5b1', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2347f5dd842fa4608c4cc442a6a2278047dc6043', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca486c734691ec17bbf2b617c1454a759399e940', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d5b84a3730da1a03b7131f14a583c591e16dec4', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7561125cf7ae03c193c5b30e9e2d1bebedf04b7', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c71bb2972180fcb9796155904ebae3e95911afa', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e2f99d3cc4d5ca1e91f96aade66c23e86e904e0', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '545e0a78d6396237bf5f88d3467a9bf9713913ae', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e2cbf7c87bb701bcd07c2962ff499dc06803d31', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09141140737b99c91d93d265b04ed29bd1e03137', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ae9a953efbe99b0900ec4b6fb9303c85e8f633f', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1177f36a507424fc263b0b19626ab9727bdc1bf', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}]",Caitlin Haedrich,69856275,,User,,31,,5,13
689268261,__getattr__ shortcut for calling GRASS display modules,"* Shortcut allowing users to call GRASS display modules ('d.*) with class method `.d_*`. 
* Example of usage in jupyter_integration.ipynb
* Typo fix and black formatting

These modifications are part of an on-going Google Summer of Code project, Improved Integration of GRASS GIS and Jupyter Notebooks. You can find more information [here](https://trac.osgeo.org/grass/wiki/GSoC/2021/JupyterAndGRASS). You can test out the functionality in Binder here:

https://mybinder.org/v2/gh/chaedri/grass/non-interactive-display-update?urlpath=lab%2Ftree%2Fdoc%2Fnotebooks%2Fjupyter_integration.ipynb",True,1723,https://api.github.com/repos/OSGeo/grass/pulls/1723,https://github.com/OSGeo/grass/pull/1723,closed,64,6,2,12,2,10,2,0,"[{'name': 'enhancement'}, {'name': 'gsoc'}]",2021-07-13 17:35:16+00:00,2021-07-29 21:20:22+00:00,1395906.0,"16 days, 3:45:06","[{'comment_id': 670478397, 'comment_body': 'The signature (parameters) need to be different. See the docs: https://docs.python.org/3/reference/datamodel.html#object.__getattr__', 'comment_created': datetime.datetime(2021, 7, 15, 13, 47, 22, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 670484213, 'comment_body': 'Exception to raise from `__getattr__` shall be `AttributeError` according to the docs (emph. mine):\r\n\r\n> This method should either return the (computed) attribute value or _raise an AttributeError exception_.', 'comment_created': datetime.datetime(2021, 7, 15, 13, 53, 33, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 670524221, 'comment_body': ""This is more difficult to decide. Not `ModuleNotFoundError` as that's meant for Python modules, not GRASS modules. `FileNotFoundError` might be okay, but confusing. It is a failed attribute access, so `AttributeError` seem right, but this is no longer attribute access, so maybe not. Perhaps raising a new `FileNotFoundError` with a custom message. This can include the original message or use `raise ... from ...`. You could also use `shutil.which` ahead of time and then `AttributeError` would be a clear choice. This goes a little against Python principles of trying first instead of testing, but it may result in much better behavior. There is more cases than just `FileNotFoundError`, for example `PermissionError`. `shutil.which` tries to check for all these things. It worked correctly for me when only the permissions were wrong. Other than that, it should be have like `run` (e.g. with wrong parameters)."", 'comment_created': datetime.datetime(2021, 7, 15, 14, 37, 33, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 670525228, 'comment_body': '`attr.startswith(...)`', 'comment_created': datetime.datetime(2021, 7, 15, 14, 38, 43, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 670529208, 'comment_body': 'This text may use some improvement, but more importantly, add examples to the class docstring.\r\n\r\n```\r\n>>> m = ...\r\n>>> m.d_vect(...)\r\n````', 'comment_created': datetime.datetime(2021, 7, 15, 14, 43, 8, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 673190723, 'comment_body': 'Based off the docs, I think it should read:\r\n\r\n`    def __getattr__(self, name, **kwargs):`\r\n\r\nIs that right? Or should `**kwargs` be passed differently too?', 'comment_created': datetime.datetime(2021, 7, 20, 14, 44, 47, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 673228294, 'comment_body': ""I went with 'FileNotFoundError ' using `raise ... from ...` in my newest commit. I wasn't quite sure how to implement the `shutil.which` method and what the advantage or expected behavior would be. But, if we feel that would be a better solution, let's talk about it at our next meeting and I'll switch."", 'comment_created': datetime.datetime(2021, 7, 20, 15, 26, 20, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 673619089, 'comment_body': 'I really meant docstring of the class, not the one for the method. `__getattr__` is too special for it to be an obvious place to look for documentation of `m.d_vect` behavior.', 'comment_created': datetime.datetime(2021, 7, 21, 2, 40, 27, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 673621173, 'comment_body': 'Python exception messages don\'t end with `.`, test e.g.:\r\n\r\n```\r\n>>> xxx\r\nTraceback (most recent call last):\r\n  File ""<stdin>"", line 1, in <module>\r\nNameError: name \'xxx\' is not defined\r\n>>> def a():\r\n...     pass\r\n... \r\n>>> a(1)\r\nTraceback (most recent call last):\r\n  File ""<stdin>"", line 1, in <module>\r\nTypeError: a() takes 0 positional arguments but 1 was given\r\n```\r\n\r\nI think exceptions raised in GRASS code are translatable (check the other code) which in GRASS means enclosing the string in `_(...)` (call to a function named `_` which is defined as a buildin and returns the translated message if locale language is not English and the message was translated).', 'comment_created': datetime.datetime(2021, 7, 21, 2, 47, 10, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 673622715, 'comment_body': 'See how Sphinx recommends formatting examples. I think introducing the example with a sentence is probably enough. See what these docstrings might be turned into:\r\nhttps://grass.osgeo.org/grass80/manuals/libpython/pygrass.modules.interface.html?highlight=module#module-pygrass.modules.interface.module (and the corresponding source code in grass/pygrass)', 'comment_created': datetime.datetime(2021, 7, 21, 2, 51, 48, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}]","[{'commit_sha': '699080912c59df2d6abb7b79d3b13fd4e1ea5eec', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '564b8f3bb289cc670a9a83337f669e64af26e713', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'abb4d829a775d6435cd997455aabd7a7e18a6200', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9bbad36554f319dd9e444832c4c964c341a58a2', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a07abd35e4bff3a28479065ad8d4528b7125e90a', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99f24e32c2ee16b3bbde17f5e8cab8340254b280', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02bf0441e01f2203cd1a3bce887d033a3a279ed2', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '597f14b154386c27999c22ff488384406605f56a', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73f4c0a7ecab40849e92eda2cfd149c7efcd6d5e', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '863589f77e5794cd5f045b67c0995a63ae10c226', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f2ea2c0172bf9fdb8ceffd575a660b2ca418dce', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c70977bf3e763b4e19ab7f7f72469b647431db6', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}]",Caitlin Haedrich,69856275,,User,,31,,5,13
700962388,Raster Support for Interactive Jupyter maps with folium,"* Add temporary WGS84-Pseudo-Mercator location for rasters
* Add `add_raster` method for `InteractiveMap` class
* Update demonstration notebook to include raster example
* Change `GrassRenderer` PNG background to transparent
* Re-arrange functions for clarity; added `utils.py'
* Added rcfile cleanup
* Added `save()` method for saving folium map as HTML file
* Added temporary directory with `tempfile`

These changes are part of an on-going Google Summer of Code project, Improved Integration of GRASS GIS and Jupyter Notebooks. You can find more information [here](https://trac.osgeo.org/grass/wiki/GSoC/2021/JupyterAndGRASS). 

You can also test the functionality at this binder link:
https://mybinder.org/v2/gh/chaedri/grass/interactive-rasters?urlpath=lab%2Ftree%2Fdoc%2Fnotebooks%2Fjupyter_integration.ipynb",True,1769,https://api.github.com/repos/OSGeo/grass/pulls/1769,https://github.com/OSGeo/grass/pull/1769,closed,281,117,6,53,3,36,2,0,"[{'name': 'enhancement'}, {'name': 'gsoc'}]",2021-08-01 18:43:56+00:00,2021-08-11 18:38:08+00:00,863652.0,"9 days, 23:54:12","[{'comment_id': 684566299, 'comment_body': 'Same code in the vector function. Creating a function with a reasonable API may take a couple of tries, but something like ""set computational region from environment A to B"" sounds like a good starting point. You may approach the function as ""both environments are equal (source and target)"" or more as a standard function or module, so ""set region from another environment to the current one"" (and optionally specify the current environment.', 'comment_created': datetime.datetime(2021, 8, 7, 1, 33, 58, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 684566590, 'comment_body': ""I think `rcfile` is not deleted. Don't you need a finalize call here? See the doc and code for create_environment and let me know what you think."", 'comment_created': datetime.datetime(2021, 8, 7, 1, 37, 1, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 684566966, 'comment_body': 'Since `self._psmerc_env` is the only newly set attribute, it seems that a `_setup_location(name, epsg)` function (returning the new env) may work well here.', 'comment_created': datetime.datetime(2021, 8, 7, 1, 40, 32, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 684567083, 'comment_body': 'Also positional-only.', 'comment_created': datetime.datetime(2021, 8, 7, 1, 41, 27, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 684567294, 'comment_body': ""`parse_command` should work here, but get_region seems even more appropriate. You are using get_region elsewhere, so note in a comment if there is a reason it doesn't work here (I think it should)."", 'comment_created': datetime.datetime(2021, 8, 7, 1, 43, 50, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 684567824, 'comment_body': 'No shouting in the comments! Just put there two sentences, two lines, ...', 'comment_created': datetime.datetime(2021, 8, 7, 1, 49, 19, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 684568189, 'comment_body': 'There is actually an overhead in calling m.proj (it is a subprocess etc.), so calling it twice is suboptimal, but now I\'m perhaps more concerned with latlon in the name (used for geographical CRSs in GRASS in general) and this being a clear separate piece of code. Isn\'t the whole thing ""get region in wgs84"".', 'comment_created': datetime.datetime(2021, 8, 7, 1, 52, 28, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 684568731, 'comment_body': ""For reprojection, you are just using the original name. That's a good start, although you can have maps with the same name in different mapsets and you can access them from one mapset (`elevation@PERMANENT` and `elevation@user1`)."", 'comment_created': datetime.datetime(2021, 8, 7, 1, 56, 57, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 684568975, 'comment_body': 'Unnecessary comments.', 'comment_created': datetime.datetime(2021, 8, 7, 1, 59, 26, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 684568989, 'comment_body': 'Comment would be better as a doc of return value in the docstring.', 'comment_created': datetime.datetime(2021, 8, 7, 1, 59, 49, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 684569510, 'comment_body': 'Ideally, you would have a third function which would have the m.proj call and surrounding string manipulation and that may avoid the need for two calls of `convert_coordinates_to_latlon` which are good API-wise, but not ideal performance-wise, but it might be too cumbersome in practice.', 'comment_created': datetime.datetime(2021, 8, 7, 2, 5, 15, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 684569680, 'comment_body': 'That needs keyword arguments to clarify what is being passed to it.', 'comment_created': datetime.datetime(2021, 8, 7, 2, 7, 25, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 684569754, 'comment_body': 'Add docstrinfgs, run Pylint.', 'comment_created': datetime.datetime(2021, 8, 7, 2, 8, 1, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 684639609, 'comment_body': ""I think you are right but I have all the cleanup in PR #1754. I think it makes most sense to move rcfile cleanup here and delete that PR since it (1) doesn't contain much new code and (2) this PR contains so many big changes, it's just going to cause a bunch of merge conflicts."", 'comment_created': datetime.datetime(2021, 8, 7, 14, 29, 56, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 684706033, 'comment_body': 'dict', 'comment_created': datetime.datetime(2021, 8, 8, 3, 5, 49, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 684706485, 'comment_body': 'raster makes sense, but it should be cell here. Find file is a low-level function looking for a file. Hopefully, this will change at some point, but now ""raster"" generates a verbose message, but ""cell"" does not. See implementation of find_file.', 'comment_created': datetime.datetime(2021, 8, 8, 3, 10, 20, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 684772743, 'comment_body': ""I managed to avoid calling `convert_coordinates_to_latlong` and deleted it. Do you think it's still necessary to have a third function here?"", 'comment_created': datetime.datetime(2021, 8, 8, 13, 9, 6, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 684772867, 'comment_body': 'I deleted `convert_coordinates_to_latlon`.', 'comment_created': datetime.datetime(2021, 8, 8, 13, 9, 53, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 684772983, 'comment_body': ""You're right - I switched to `get_region` here."", 'comment_created': datetime.datetime(2021, 8, 8, 13, 10, 47, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 684773119, 'comment_body': 'I switch to `setup_location()` and moved that functions to `utils.py`.', 'comment_created': datetime.datetime(2021, 8, 8, 13, 11, 36, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 684773474, 'comment_body': ""I'm not sure if I've addressed this comment - I got rid of the repetition with a new function `setup_location()`. "", 'comment_created': datetime.datetime(2021, 8, 8, 13, 13, 14, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 684816384, 'comment_body': 'Add that all environments used in this class are derived from this one. A helpful note and it clarifies that os.environ is not modified which ""Remember original environment"" may suggest to some.', 'comment_created': datetime.datetime(2021, 8, 8, 19, 9, 2, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 685173334, 'comment_body': 'dbase_location - In the context of the ""classic"" naming practice, dbase_location is confusing: Is it dbase or location? You can call it _path_ because that\'s what it is.', 'comment_created': datetime.datetime(2021, 8, 9, 13, 3, 48, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 685173922, 'comment_body': ""Maybe _of_ or _'s_ would clarify the description here."", 'comment_created': datetime.datetime(2021, 8, 9, 13, 4, 37, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 685177565, 'comment_body': 'typo: GNU **Gernal** Public...Read **teh** file COPYING that comes with GRASS\r\n\r\nSame in python/grass/jupyter/interact_display.py.\r\n\r\nYou should not be writing these by hand.', 'comment_created': datetime.datetime(2021, 8, 9, 13, 9, 32, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 685178273, 'comment_body': 'What use case do you have in mind for the default? Is this trying to mimic the d-command behavior in creating `map.png` by default? How do you plan to document it?', 'comment_created': datetime.datetime(2021, 8, 9, 13, 10, 31, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 685286067, 'comment_body': ""Ah, good catch. I went hunting for the proper header to put here and found some conflicting methods. There's the [guidelines on the wiki](https://trac.osgeo.org/grass/wiki/Submitting/Python) which are similar to what I have but as a docstring instead of a comment. But there's also lots (most?) of python scripts on github that use comments (see [utils/download.py](https://github.com/OSGeo/grass/blob/master/python/grass/utils/download.py) or [lib/init/grass.py](https://github.com/OSGeo/grass/blob/master/lib/init/grass.py)). There's also examples I found in the python directory that have more a Sphinx docstring style (such as [raster.py](https://github.com/OSGeo/grass/blob/master/python/grass/script/raster.py)). What do you think is most appropriate here?"", 'comment_created': datetime.datetime(2021, 8, 9, 15, 16, 19, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 685292866, 'comment_body': 'Yes, I think I was thinking of the d-command behavior here. `map.png` would probably be a better choice - I\'ll change it. Use-case-wise, I was imagining users might want to embed their map in a website or create a website from. They create their map then save as an html (i.e. `m.save(filename=""map_for_website.html"")`). Do you think it needs additional documentation?', 'comment_created': datetime.datetime(2021, 8, 9, 15, 24, 20, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 685386137, 'comment_body': 'Right, so what is the use case for the default value? In other words, in what circumstances will the user know about the default and write save() while not saying where to save?', 'comment_created': datetime.datetime(2021, 8, 9, 17, 28, 27, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 685387055, 'comment_body': ""This style of header is fine. Just don't write it by hand and if you do, don't include typos :-)"", 'comment_created': datetime.datetime(2021, 8, 9, 17, 29, 45, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 685442305, 'comment_body': ""Typos fixed. I'll copy and paste next time 👍 "", 'comment_created': datetime.datetime(2021, 8, 9, 18, 54, 50, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 685443116, 'comment_body': 'AH, ok, I see your point now. Having a default is not necessary. The line should be `def save(self, filename):`.', 'comment_created': datetime.datetime(2021, 8, 9, 18, 56, 2, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 685451967, 'comment_body': 'No, with the current code, this work well.', 'comment_created': datetime.datetime(2021, 8, 9, 19, 10, 2, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 685492004, 'comment_body': 'setup_location works for me.', 'comment_created': datetime.datetime(2021, 8, 9, 20, 17, 18, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 685616768, 'comment_body': ""I'm still not sure I fully understand why passing the original name could cause a problem here. In your example, are you thinking that `elevation@PERMANENT` and `elevation@user1` are different rasters but we want to add both of them to our folium map? In that case, we'd end up with two `elevation`s in the temporary location which would cause a problem. Perhaps replacing the `@` in the `full_name` string to make something like `elevation_user1` as the new name would solve this?"", 'comment_created': datetime.datetime(2021, 8, 10, 1, 0, 33, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 686331062, 'comment_body': 'I see two issues:\r\n\r\n1. `self.tmp_dir` + `""map.png""` will be the same filename for each `add_raster` call. Is this a problem? For GrassRenderer? For folium.ImageOverlay`? I have no idea how ImageOverlay behaves or what is in its doc. When this image needs to be present? Using the new name (from 2.) might be the best option at this point.\r\n2. Replacing `@` with `_` should work well enough. We will always do that so that should avoid any conflicts (mapname@mapsetname is a unique identifier for a map of a given type within a location). (If we would convert rasters to vectors or the other way around - like in the possible alternative workflows we talked about - that would create potential for conflicts, but we could avoid that by simply using different location or different mapset for that workflow.)', 'comment_created': datetime.datetime(2021, 8, 10, 21, 21, 37, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}]","[{'commit_sha': '57c19d9393cfaa8bcc5b00e52697b6c705f53078', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '009d763757d853230edb57a4408147425de6221b', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '527a0dd4c4fc6442e7dae1ee70c56367319b80d6', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b47a92519558b6fce0df70d57eed60294165461c', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e797fe2ada2a5cb99411c323c7594875b4526922', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d7dd0a4b4aea9a4d3e39e62db0f14e9c2422b64', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '008c2a128b54dc829779ca34599698c696581b90', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d5cdc9b97a2b4d0f30d76b45f8523358d5e731c', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3573fe7997ffc4403bceae76bbd2ced9ee0dd7ea', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed5885116be6cae387e5bfa244d16d4aefe8e4d2', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93305e6dc8b19fa9b36603219d97377a6916ad91', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0fd448b373f820225d5283a7a7e3ccb92365db5b', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b23a9c75a4c59268e3d023ad3de550965bee1fb', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd1a9a886a7f69a4064f6ccc920bc1aebb6306351', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66ebacc8686c273461779312d7546ad672160603', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e8e97b4c76059238f8b7ec564a0448fc2f589fd9', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03f2dd69f8057d5217fa529ae57bbc2254907364', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3720957235a1b05cc6f178cab65626bc0521bc88', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7b463df64f6f7834961ff23fd4cf96e8b048f86', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e73f60ca369688d0b8edc392122cad04ae65d5b1', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2347f5dd842fa4608c4cc442a6a2278047dc6043', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca486c734691ec17bbf2b617c1454a759399e940', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d5b84a3730da1a03b7131f14a583c591e16dec4', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7561125cf7ae03c193c5b30e9e2d1bebedf04b7', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c71bb2972180fcb9796155904ebae3e95911afa', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e2f99d3cc4d5ca1e91f96aade66c23e86e904e0', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '545e0a78d6396237bf5f88d3467a9bf9713913ae', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e2cbf7c87bb701bcd07c2962ff499dc06803d31', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09141140737b99c91d93d265b04ed29bd1e03137', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ae9a953efbe99b0900ec4b6fb9303c85e8f633f', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1177f36a507424fc263b0b19626ab9727bdc1bf', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6007231e3edc7aa6ece4c124f973e08acb25d84', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e5db935031c14e33f6a2a650b7a7490b644fa79', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7b9e90e54b5d3717b9f5498f2ed8ebf5ab6ae59', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dcc8b30e5e2f433cb1e7097b5c89f3fcccfc43b6', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22d353a8eed7d433b0d7eeca235ed2b0524e99fe', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f13b8af46093746e06e33ffd6aba128709bf989', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a19f20893aceed44af7c91e09ca7d7ce0fa5d41b', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5a21985ee3c15b33390a0912c1a17c3474448a6', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '349d75a6268cac3ddfcd28321cc1af0513206bfe', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'feb8f93b200f6bfdb21da361324b3d0333cc06f7', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '24b5ab36e4516217c9fca022078ec539cd8fe452', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1f0c10f3c52be625dcfc5462a10064e4b12cbc6', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd5fb937795bb519672a0a6418ae0f0f09265d4a4', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20edf83352f5fa48a6efae7d098b9bbdf6f9a183', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9cd37d3bc5a6b8cab2ee6bf0b2c94c46f6f7dcd', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '264282d8473f065bb4ffed3e6298c219b98faceb', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce12294f527024ae212a06cd898a9b8e7761caf5', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49ac7877e223604dbdde6c241a47c600cd8e6de5', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd65feb29fbffb7aee19bf90c925f76785f7657cc', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf038ccbdb54cd052329fb0733637f482f2ffde3', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62740efb481ea5004d9389da8ef00481b2295e82', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd486dc6323036780f9e6ea20a1eff519d2c0f26d', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}]",Caitlin Haedrich,69856275,,User,,31,,5,13
689268261,__getattr__ shortcut for calling GRASS display modules,"* Shortcut allowing users to call GRASS display modules ('d.*) with class method `.d_*`. 
* Example of usage in jupyter_integration.ipynb
* Typo fix and black formatting

These modifications are part of an on-going Google Summer of Code project, Improved Integration of GRASS GIS and Jupyter Notebooks. You can find more information [here](https://trac.osgeo.org/grass/wiki/GSoC/2021/JupyterAndGRASS). You can test out the functionality in Binder here:

https://mybinder.org/v2/gh/chaedri/grass/non-interactive-display-update?urlpath=lab%2Ftree%2Fdoc%2Fnotebooks%2Fjupyter_integration.ipynb",True,1723,https://api.github.com/repos/OSGeo/grass/pulls/1723,https://github.com/OSGeo/grass/pull/1723,closed,64,6,2,12,2,10,2,0,"[{'name': 'enhancement'}, {'name': 'gsoc'}]",2021-07-13 17:35:16+00:00,2021-07-29 21:20:22+00:00,1395906.0,"16 days, 3:45:06","[{'comment_id': 670478397, 'comment_body': 'The signature (parameters) need to be different. See the docs: https://docs.python.org/3/reference/datamodel.html#object.__getattr__', 'comment_created': datetime.datetime(2021, 7, 15, 13, 47, 22, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 670484213, 'comment_body': 'Exception to raise from `__getattr__` shall be `AttributeError` according to the docs (emph. mine):\r\n\r\n> This method should either return the (computed) attribute value or _raise an AttributeError exception_.', 'comment_created': datetime.datetime(2021, 7, 15, 13, 53, 33, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 670524221, 'comment_body': ""This is more difficult to decide. Not `ModuleNotFoundError` as that's meant for Python modules, not GRASS modules. `FileNotFoundError` might be okay, but confusing. It is a failed attribute access, so `AttributeError` seem right, but this is no longer attribute access, so maybe not. Perhaps raising a new `FileNotFoundError` with a custom message. This can include the original message or use `raise ... from ...`. You could also use `shutil.which` ahead of time and then `AttributeError` would be a clear choice. This goes a little against Python principles of trying first instead of testing, but it may result in much better behavior. There is more cases than just `FileNotFoundError`, for example `PermissionError`. `shutil.which` tries to check for all these things. It worked correctly for me when only the permissions were wrong. Other than that, it should be have like `run` (e.g. with wrong parameters)."", 'comment_created': datetime.datetime(2021, 7, 15, 14, 37, 33, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 670525228, 'comment_body': '`attr.startswith(...)`', 'comment_created': datetime.datetime(2021, 7, 15, 14, 38, 43, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 670529208, 'comment_body': 'This text may use some improvement, but more importantly, add examples to the class docstring.\r\n\r\n```\r\n>>> m = ...\r\n>>> m.d_vect(...)\r\n````', 'comment_created': datetime.datetime(2021, 7, 15, 14, 43, 8, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 673190723, 'comment_body': 'Based off the docs, I think it should read:\r\n\r\n`    def __getattr__(self, name, **kwargs):`\r\n\r\nIs that right? Or should `**kwargs` be passed differently too?', 'comment_created': datetime.datetime(2021, 7, 20, 14, 44, 47, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 673228294, 'comment_body': ""I went with 'FileNotFoundError ' using `raise ... from ...` in my newest commit. I wasn't quite sure how to implement the `shutil.which` method and what the advantage or expected behavior would be. But, if we feel that would be a better solution, let's talk about it at our next meeting and I'll switch."", 'comment_created': datetime.datetime(2021, 7, 20, 15, 26, 20, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 673619089, 'comment_body': 'I really meant docstring of the class, not the one for the method. `__getattr__` is too special for it to be an obvious place to look for documentation of `m.d_vect` behavior.', 'comment_created': datetime.datetime(2021, 7, 21, 2, 40, 27, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 673621173, 'comment_body': 'Python exception messages don\'t end with `.`, test e.g.:\r\n\r\n```\r\n>>> xxx\r\nTraceback (most recent call last):\r\n  File ""<stdin>"", line 1, in <module>\r\nNameError: name \'xxx\' is not defined\r\n>>> def a():\r\n...     pass\r\n... \r\n>>> a(1)\r\nTraceback (most recent call last):\r\n  File ""<stdin>"", line 1, in <module>\r\nTypeError: a() takes 0 positional arguments but 1 was given\r\n```\r\n\r\nI think exceptions raised in GRASS code are translatable (check the other code) which in GRASS means enclosing the string in `_(...)` (call to a function named `_` which is defined as a buildin and returns the translated message if locale language is not English and the message was translated).', 'comment_created': datetime.datetime(2021, 7, 21, 2, 47, 10, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 673622715, 'comment_body': 'See how Sphinx recommends formatting examples. I think introducing the example with a sentence is probably enough. See what these docstrings might be turned into:\r\nhttps://grass.osgeo.org/grass80/manuals/libpython/pygrass.modules.interface.html?highlight=module#module-pygrass.modules.interface.module (and the corresponding source code in grass/pygrass)', 'comment_created': datetime.datetime(2021, 7, 21, 2, 51, 48, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}]","[{'commit_sha': '699080912c59df2d6abb7b79d3b13fd4e1ea5eec', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '564b8f3bb289cc670a9a83337f669e64af26e713', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'abb4d829a775d6435cd997455aabd7a7e18a6200', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9bbad36554f319dd9e444832c4c964c341a58a2', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a07abd35e4bff3a28479065ad8d4528b7125e90a', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99f24e32c2ee16b3bbde17f5e8cab8340254b280', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02bf0441e01f2203cd1a3bce887d033a3a279ed2', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '597f14b154386c27999c22ff488384406605f56a', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73f4c0a7ecab40849e92eda2cfd149c7efcd6d5e', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '863589f77e5794cd5f045b67c0995a63ae10c226', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f2ea2c0172bf9fdb8ceffd575a660b2ca418dce', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c70977bf3e763b4e19ab7f7f72469b647431db6', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}]",Caitlin Haedrich,69856275,,User,,31,,5,13
690227266,Add temporary files for Non-Interactive Display,"* Write display-related files to temporary files for non-interactive displays in Jupyter Notebooks. The option remains to write the display to a PNG when provided a path and filename.  
* Edit `grass.jupyter` demonstration notebook to include example with legend.
* Improved Documentation and added renderer parameter to GrassRenderer

These modifications are part of an on-going Google Summer of Code project, Improved Integration of GRASS GIS and Jupyter Notebooks. You can find more information [here](https://trac.osgeo.org/grass/wiki/GSoC/2021/JupyterAndGRASS). 

You can also try out the changes suggested in this PR here:

https://mybinder.org/v2/gh/chaedri/grass/add-temp-directory?urlpath=lab%2Ftree%2Fdoc%2Fnotebooks%2Fjupyter_integration.ipynb",True,1727,https://api.github.com/repos/OSGeo/grass/pulls/1727,https://github.com/OSGeo/grass/pull/1727,closed,28,12,2,21,6,0,2,0,"[{'name': 'enhancement'}, {'name': 'gsoc'}]",2021-07-14 21:10:33+00:00,2021-07-30 19:19:21+00:00,1375728.0,"15 days, 22:08:48",[],"[{'commit_sha': '4c322d16e0bf0f8f58585ed1fd9146e890d13be7', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b567f7b7792c14a7d7159cec030561577a10fb7', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db56e793d83c26ea850af5b44c4a17b9fb436836', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6587caec9d3608f962cb8f52e77f97b769870864', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d06710bfbcbe219451b6f2d29f3a7902b7ba4f1', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a4c48b6a7af26011f3b56490002556a73d017eb', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '065ce0bd82b6aeb7185839ba881a7826fb24c0ee', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da54c26f65ea324c385ebb291504db4ef45d183b', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '41e86c89c42e14d75b98ebf55dc4c8ffd5443fbf', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ac09fc4bc870f3805145c1230081d55c29f182a', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7106b2296c971b07ee84137276756dd60358f08d', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef6b161398340434cadbe950304c877c2ed68cb0', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '18d798b936aadbd38b34ab85dcdc3176606d3c3b', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a8281c3cf5c2e0e74657719c9bd3e6ecc8bad58', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c1d697f5192f79b8eb44bcb04dabc4c91fdb7ab', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f96bc69402313f0b305a4e832de86f3d7574e7a', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d09be1b629f25c213f966f84c103e9a5ee628da', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a567f585a201ddc3c3ae3a9bb6d5f1b3d8d38a3', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a99a40567dc44febefe1a905ae97a110059f8423', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ab1fec474f6a365203afccb67155a7e38b70dd2', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '986dcf1cb595b44f2b4a2fc7711b2635aeb83a5b', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}]",Caitlin Haedrich,69856275,,User,,31,,5,13
692765393,Test Module for Non-interactive display in Jupyter Notebooks,"* Added testsuite directory for `grass.jupyter`
* Tests for display.py

This PR contains a test module for non-interactive displays created in `grass.jupyter`. It is part of an ongoing Google Summer of Code project, Improved Integration of GRASS GIS and Jupyter Notebooks. You can find more information [here](https://trac.osgeo.org/grass/wiki/GSoC/2021/JupyterAndGRASS). ",True,1739,https://api.github.com/repos/OSGeo/grass/pulls/1739,https://github.com/OSGeo/grass/pull/1739,closed,272,17,5,21,5,23,1,0,[{'name': 'gsoc'}],2021-07-19 16:47:16+00:00,2021-08-17 03:20:23+00:00,2457187.0,"28 days, 10:33:07","[{'comment_id': 684570717, 'comment_body': 'What about one of these instead of `is False`?\r\n\r\n```python\r\n@unittest.skipIf(not can_import_folium(), ""Cannot import folium"")\r\n@unittest.skipIf(not folium_imports(), ""Cannot import folium"")\r\n```', 'comment_created': datetime.datetime(2021, 8, 7, 2, 17, 42, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 684571070, 'comment_body': 'Same issue as in the other PR. `missing_ok` parameter is not available in 3.6 and 3.7 if I recall correctly.', 'comment_created': datetime.datetime(2021, 8, 7, 2, 21, 33, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 684571724, 'comment_body': 'Testing more modules than just d.rast would be nice, at least d.vect.\r\n\r\nYou can also test that it throws attr error when the module name is wrong. See [assertRaises](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertRaises) and use it as a context manager (with `with`). You could also test with `assertRaisesRegex` and confirm that module name is in the message and things like that.', 'comment_created': datetime.datetime(2021, 8, 7, 2, 29, 10, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 684571799, 'comment_body': 'May be more clear if ""test_filename.png"" is in a variable.', 'comment_created': datetime.datetime(2021, 8, 7, 2, 29, 50, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 684571875, 'comment_body': 'Make this a docstring instead saying what the function does.', 'comment_created': datetime.datetime(2021, 8, 7, 2, 30, 57, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 684572062, 'comment_body': 'No need for a comment (would be good for an example code for learning Python, but not code which will be maintained for people who went at least though the initial hurdles of getting to know Python).', 'comment_created': datetime.datetime(2021, 8, 7, 2, 32, 46, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 684572069, 'comment_body': 'Remove.', 'comment_created': datetime.datetime(2021, 8, 7, 2, 32, 52, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 684572465, 'comment_body': 'If the code below is not clear enough, I\'m afraid that the word ""assert"" will not help much (not the most common word in English).', 'comment_created': datetime.datetime(2021, 8, 7, 2, 37, 16, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 687821109, 'comment_body': 'I went with the first suggestion.', 'comment_created': datetime.datetime(2021, 8, 12, 15, 11, 39, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 687822174, 'comment_body': 'I added d.vect and another test for the attr error.', 'comment_created': datetime.datetime(2021, 8, 12, 15, 12, 32, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 687894428, 'comment_body': 'Do you mean custom? (not unique)', 'comment_created': datetime.datetime(2021, 8, 12, 16, 19, 3, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 687897033, 'comment_body': 'Possibly more readable when it looks like a module name, so underscores, not camel case.', 'comment_created': datetime.datetime(2021, 8, 12, 16, 21, 12, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 688657793, 'comment_body': 'typo', 'comment_created': datetime.datetime(2021, 8, 13, 17, 2, 11, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 689548496, 'comment_body': 'Do you plan to update this? If you think it is good as is, just resolve this conversation.', 'comment_created': datetime.datetime(2021, 8, 16, 13, 42, 2, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 689549386, 'comment_body': 'These now should work without folium, so you can remove the skip if (it is needed only for the actual folium related tests).', 'comment_created': datetime.datetime(2021, 8, 16, 13, 43, 5, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 689550603, 'comment_body': 'Create another class for this, possibly a file. Just to make it clear it is something different. ', 'comment_created': datetime.datetime(2021, 8, 16, 13, 44, 42, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 689553008, 'comment_body': 'I have no idea what this will do in a ""headless"" environment such as CI, although I expect it is okay to do this. What happens when you run the test in the command line? What the doc says? Add a comment specifying it. Add also save to HTMK function or use just that if show may cause trouble.', 'comment_created': datetime.datetime(2021, 8, 16, 13, 47, 37, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 689559033, 'comment_body': 'Please avoid:\r\n\r\n```python\r\n# Open file\r\nfile.open()\r\n# Show x\r\nx.show()\r\n```\r\n\r\nThis should be clear from the code itself. Comment should explain the intention behind the line, describe motivation, or discuss some non-obvious details or side effects. It should not merely restate what the code already says unless the function names or other things are unclear. This is does not apply when writing documentation or examples where you may want to emphasize that show really does show.', 'comment_created': datetime.datetime(2021, 8, 16, 13, 54, 50, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 689562805, 'comment_body': 'Add another function to this class which tests show method which returns the Image object. You can just test the result with assertTrue. It will need the same ""can import ipython"" ""skip if"" test.', 'comment_created': datetime.datetime(2021, 8, 16, 13, 59, 8, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 689895708, 'comment_body': 'There were two `#Assert image exists` and I changed the wrong/other one. Oops! Now they both say something better. Thanks for catching it.', 'comment_created': datetime.datetime(2021, 8, 16, 22, 16, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 689911700, 'comment_body': ""In the command line, `interactive_map.show()` returns a folium object (specifically, something like `branca.element.Figure object at <...>`. I added a comment to the `show()` docstring saying it returned  a folium figure object. I'm not sure if this is problematic or not - my guess is not because the object is just taking up Python memory and will be deleted after Python is exited?"", 'comment_created': datetime.datetime(2021, 8, 16, 22, 53, 3, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 689962598, 'comment_body': 'I created a new file.', 'comment_created': datetime.datetime(2021, 8, 17, 1, 17, 10, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 689970684, 'comment_body': ""That sounds good. `show()` here is little surprising as in e.g. Matplotlib it may mean showing a window and waiting for a user to close it, i.e., show() seems like something will be shown (not the case in the tests), rather than an independent (although perhaps useless) object being returned. It makes sense in the context of Jupyter notebook, so let's leave it as is."", 'comment_created': datetime.datetime(2021, 8, 17, 1, 41, 42, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}]","[{'commit_sha': '2cada12b14a38cc2f2072fc85d6c197d0c6dc8fe', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c94590df40907f91f1f01dcf68a44e193acdef8', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ebbe9f5f94ad0a95e1eb9fefc18b535f5f286ae', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6912d3d6ffc8ee4d15f74fcba525c701debc7b39', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f81329e95bc570dbbb74caf53accef0680d5ce1', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '13bb391959897c608cae594da9cde1b9639e586f', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b96c47c4d924a2dae3bb8f170de3778aca5464b', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b0e7c8683a308bdb4a961febd78eda27f04db12', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d5320c9d17f810f17d79c5e86aeb8e343d50ef6', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46e7a862896beff39eb1ccf1adb4f4333cf85c21', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef2bcba8ac3c4c9bb27f17ca5a6e466bfb5c9f3c', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'beb4fca6f2fbd24406f9abc7ffab643ce045d741', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd7ecf4ba94b0706a32af543506237cb2d4dc30eb', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e28356400a83656203efa48f125167dbb692904', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71e74b281c2d4ccd2dfd334c1ce77f249edff97b', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '397d14a6879e1aa0e3e84ee3a858c7f3d19230ac', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64b6a91de740d8bf1c88d61184657c38b204d35f', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16bec122b26e9431d886e7093f28ce4d8b1f7de9', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e1db80c02dcff48c40e548eef4b1d421dec1bed', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '58687bff2efe5a04edab115b32f8399c648e0c3c', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a8b15edc79028162a7fa012077b6b37d2bd92dfc', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}]",Caitlin Haedrich,69856275,,User,,31,,5,13
700962388,Raster Support for Interactive Jupyter maps with folium,"* Add temporary WGS84-Pseudo-Mercator location for rasters
* Add `add_raster` method for `InteractiveMap` class
* Update demonstration notebook to include raster example
* Change `GrassRenderer` PNG background to transparent
* Re-arrange functions for clarity; added `utils.py'
* Added rcfile cleanup
* Added `save()` method for saving folium map as HTML file
* Added temporary directory with `tempfile`

These changes are part of an on-going Google Summer of Code project, Improved Integration of GRASS GIS and Jupyter Notebooks. You can find more information [here](https://trac.osgeo.org/grass/wiki/GSoC/2021/JupyterAndGRASS). 

You can also test the functionality at this binder link:
https://mybinder.org/v2/gh/chaedri/grass/interactive-rasters?urlpath=lab%2Ftree%2Fdoc%2Fnotebooks%2Fjupyter_integration.ipynb",True,1769,https://api.github.com/repos/OSGeo/grass/pulls/1769,https://github.com/OSGeo/grass/pull/1769,closed,281,117,6,53,3,36,2,0,"[{'name': 'enhancement'}, {'name': 'gsoc'}]",2021-08-01 18:43:56+00:00,2021-08-11 18:38:08+00:00,863652.0,"9 days, 23:54:12","[{'comment_id': 684566299, 'comment_body': 'Same code in the vector function. Creating a function with a reasonable API may take a couple of tries, but something like ""set computational region from environment A to B"" sounds like a good starting point. You may approach the function as ""both environments are equal (source and target)"" or more as a standard function or module, so ""set region from another environment to the current one"" (and optionally specify the current environment.', 'comment_created': datetime.datetime(2021, 8, 7, 1, 33, 58, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 684566590, 'comment_body': ""I think `rcfile` is not deleted. Don't you need a finalize call here? See the doc and code for create_environment and let me know what you think."", 'comment_created': datetime.datetime(2021, 8, 7, 1, 37, 1, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 684566966, 'comment_body': 'Since `self._psmerc_env` is the only newly set attribute, it seems that a `_setup_location(name, epsg)` function (returning the new env) may work well here.', 'comment_created': datetime.datetime(2021, 8, 7, 1, 40, 32, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 684567083, 'comment_body': 'Also positional-only.', 'comment_created': datetime.datetime(2021, 8, 7, 1, 41, 27, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 684567294, 'comment_body': ""`parse_command` should work here, but get_region seems even more appropriate. You are using get_region elsewhere, so note in a comment if there is a reason it doesn't work here (I think it should)."", 'comment_created': datetime.datetime(2021, 8, 7, 1, 43, 50, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 684567824, 'comment_body': 'No shouting in the comments! Just put there two sentences, two lines, ...', 'comment_created': datetime.datetime(2021, 8, 7, 1, 49, 19, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 684568189, 'comment_body': 'There is actually an overhead in calling m.proj (it is a subprocess etc.), so calling it twice is suboptimal, but now I\'m perhaps more concerned with latlon in the name (used for geographical CRSs in GRASS in general) and this being a clear separate piece of code. Isn\'t the whole thing ""get region in wgs84"".', 'comment_created': datetime.datetime(2021, 8, 7, 1, 52, 28, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 684568731, 'comment_body': ""For reprojection, you are just using the original name. That's a good start, although you can have maps with the same name in different mapsets and you can access them from one mapset (`elevation@PERMANENT` and `elevation@user1`)."", 'comment_created': datetime.datetime(2021, 8, 7, 1, 56, 57, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 684568975, 'comment_body': 'Unnecessary comments.', 'comment_created': datetime.datetime(2021, 8, 7, 1, 59, 26, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 684568989, 'comment_body': 'Comment would be better as a doc of return value in the docstring.', 'comment_created': datetime.datetime(2021, 8, 7, 1, 59, 49, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 684569510, 'comment_body': 'Ideally, you would have a third function which would have the m.proj call and surrounding string manipulation and that may avoid the need for two calls of `convert_coordinates_to_latlon` which are good API-wise, but not ideal performance-wise, but it might be too cumbersome in practice.', 'comment_created': datetime.datetime(2021, 8, 7, 2, 5, 15, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 684569680, 'comment_body': 'That needs keyword arguments to clarify what is being passed to it.', 'comment_created': datetime.datetime(2021, 8, 7, 2, 7, 25, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 684569754, 'comment_body': 'Add docstrinfgs, run Pylint.', 'comment_created': datetime.datetime(2021, 8, 7, 2, 8, 1, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 684639609, 'comment_body': ""I think you are right but I have all the cleanup in PR #1754. I think it makes most sense to move rcfile cleanup here and delete that PR since it (1) doesn't contain much new code and (2) this PR contains so many big changes, it's just going to cause a bunch of merge conflicts."", 'comment_created': datetime.datetime(2021, 8, 7, 14, 29, 56, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 684706033, 'comment_body': 'dict', 'comment_created': datetime.datetime(2021, 8, 8, 3, 5, 49, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 684706485, 'comment_body': 'raster makes sense, but it should be cell here. Find file is a low-level function looking for a file. Hopefully, this will change at some point, but now ""raster"" generates a verbose message, but ""cell"" does not. See implementation of find_file.', 'comment_created': datetime.datetime(2021, 8, 8, 3, 10, 20, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 684772743, 'comment_body': ""I managed to avoid calling `convert_coordinates_to_latlong` and deleted it. Do you think it's still necessary to have a third function here?"", 'comment_created': datetime.datetime(2021, 8, 8, 13, 9, 6, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 684772867, 'comment_body': 'I deleted `convert_coordinates_to_latlon`.', 'comment_created': datetime.datetime(2021, 8, 8, 13, 9, 53, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 684772983, 'comment_body': ""You're right - I switched to `get_region` here."", 'comment_created': datetime.datetime(2021, 8, 8, 13, 10, 47, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 684773119, 'comment_body': 'I switch to `setup_location()` and moved that functions to `utils.py`.', 'comment_created': datetime.datetime(2021, 8, 8, 13, 11, 36, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 684773474, 'comment_body': ""I'm not sure if I've addressed this comment - I got rid of the repetition with a new function `setup_location()`. "", 'comment_created': datetime.datetime(2021, 8, 8, 13, 13, 14, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 684816384, 'comment_body': 'Add that all environments used in this class are derived from this one. A helpful note and it clarifies that os.environ is not modified which ""Remember original environment"" may suggest to some.', 'comment_created': datetime.datetime(2021, 8, 8, 19, 9, 2, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 685173334, 'comment_body': 'dbase_location - In the context of the ""classic"" naming practice, dbase_location is confusing: Is it dbase or location? You can call it _path_ because that\'s what it is.', 'comment_created': datetime.datetime(2021, 8, 9, 13, 3, 48, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 685173922, 'comment_body': ""Maybe _of_ or _'s_ would clarify the description here."", 'comment_created': datetime.datetime(2021, 8, 9, 13, 4, 37, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 685177565, 'comment_body': 'typo: GNU **Gernal** Public...Read **teh** file COPYING that comes with GRASS\r\n\r\nSame in python/grass/jupyter/interact_display.py.\r\n\r\nYou should not be writing these by hand.', 'comment_created': datetime.datetime(2021, 8, 9, 13, 9, 32, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 685178273, 'comment_body': 'What use case do you have in mind for the default? Is this trying to mimic the d-command behavior in creating `map.png` by default? How do you plan to document it?', 'comment_created': datetime.datetime(2021, 8, 9, 13, 10, 31, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 685286067, 'comment_body': ""Ah, good catch. I went hunting for the proper header to put here and found some conflicting methods. There's the [guidelines on the wiki](https://trac.osgeo.org/grass/wiki/Submitting/Python) which are similar to what I have but as a docstring instead of a comment. But there's also lots (most?) of python scripts on github that use comments (see [utils/download.py](https://github.com/OSGeo/grass/blob/master/python/grass/utils/download.py) or [lib/init/grass.py](https://github.com/OSGeo/grass/blob/master/lib/init/grass.py)). There's also examples I found in the python directory that have more a Sphinx docstring style (such as [raster.py](https://github.com/OSGeo/grass/blob/master/python/grass/script/raster.py)). What do you think is most appropriate here?"", 'comment_created': datetime.datetime(2021, 8, 9, 15, 16, 19, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 685292866, 'comment_body': 'Yes, I think I was thinking of the d-command behavior here. `map.png` would probably be a better choice - I\'ll change it. Use-case-wise, I was imagining users might want to embed their map in a website or create a website from. They create their map then save as an html (i.e. `m.save(filename=""map_for_website.html"")`). Do you think it needs additional documentation?', 'comment_created': datetime.datetime(2021, 8, 9, 15, 24, 20, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 685386137, 'comment_body': 'Right, so what is the use case for the default value? In other words, in what circumstances will the user know about the default and write save() while not saying where to save?', 'comment_created': datetime.datetime(2021, 8, 9, 17, 28, 27, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 685387055, 'comment_body': ""This style of header is fine. Just don't write it by hand and if you do, don't include typos :-)"", 'comment_created': datetime.datetime(2021, 8, 9, 17, 29, 45, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 685442305, 'comment_body': ""Typos fixed. I'll copy and paste next time 👍 "", 'comment_created': datetime.datetime(2021, 8, 9, 18, 54, 50, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 685443116, 'comment_body': 'AH, ok, I see your point now. Having a default is not necessary. The line should be `def save(self, filename):`.', 'comment_created': datetime.datetime(2021, 8, 9, 18, 56, 2, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 685451967, 'comment_body': 'No, with the current code, this work well.', 'comment_created': datetime.datetime(2021, 8, 9, 19, 10, 2, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 685492004, 'comment_body': 'setup_location works for me.', 'comment_created': datetime.datetime(2021, 8, 9, 20, 17, 18, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 685616768, 'comment_body': ""I'm still not sure I fully understand why passing the original name could cause a problem here. In your example, are you thinking that `elevation@PERMANENT` and `elevation@user1` are different rasters but we want to add both of them to our folium map? In that case, we'd end up with two `elevation`s in the temporary location which would cause a problem. Perhaps replacing the `@` in the `full_name` string to make something like `elevation_user1` as the new name would solve this?"", 'comment_created': datetime.datetime(2021, 8, 10, 1, 0, 33, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 686331062, 'comment_body': 'I see two issues:\r\n\r\n1. `self.tmp_dir` + `""map.png""` will be the same filename for each `add_raster` call. Is this a problem? For GrassRenderer? For folium.ImageOverlay`? I have no idea how ImageOverlay behaves or what is in its doc. When this image needs to be present? Using the new name (from 2.) might be the best option at this point.\r\n2. Replacing `@` with `_` should work well enough. We will always do that so that should avoid any conflicts (mapname@mapsetname is a unique identifier for a map of a given type within a location). (If we would convert rasters to vectors or the other way around - like in the possible alternative workflows we talked about - that would create potential for conflicts, but we could avoid that by simply using different location or different mapset for that workflow.)', 'comment_created': datetime.datetime(2021, 8, 10, 21, 21, 37, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}]","[{'commit_sha': '57c19d9393cfaa8bcc5b00e52697b6c705f53078', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '009d763757d853230edb57a4408147425de6221b', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '527a0dd4c4fc6442e7dae1ee70c56367319b80d6', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b47a92519558b6fce0df70d57eed60294165461c', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e797fe2ada2a5cb99411c323c7594875b4526922', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d7dd0a4b4aea9a4d3e39e62db0f14e9c2422b64', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '008c2a128b54dc829779ca34599698c696581b90', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d5cdc9b97a2b4d0f30d76b45f8523358d5e731c', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3573fe7997ffc4403bceae76bbd2ced9ee0dd7ea', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed5885116be6cae387e5bfa244d16d4aefe8e4d2', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93305e6dc8b19fa9b36603219d97377a6916ad91', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0fd448b373f820225d5283a7a7e3ccb92365db5b', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b23a9c75a4c59268e3d023ad3de550965bee1fb', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd1a9a886a7f69a4064f6ccc920bc1aebb6306351', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66ebacc8686c273461779312d7546ad672160603', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e8e97b4c76059238f8b7ec564a0448fc2f589fd9', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03f2dd69f8057d5217fa529ae57bbc2254907364', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3720957235a1b05cc6f178cab65626bc0521bc88', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7b463df64f6f7834961ff23fd4cf96e8b048f86', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e73f60ca369688d0b8edc392122cad04ae65d5b1', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2347f5dd842fa4608c4cc442a6a2278047dc6043', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca486c734691ec17bbf2b617c1454a759399e940', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d5b84a3730da1a03b7131f14a583c591e16dec4', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7561125cf7ae03c193c5b30e9e2d1bebedf04b7', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c71bb2972180fcb9796155904ebae3e95911afa', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e2f99d3cc4d5ca1e91f96aade66c23e86e904e0', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '545e0a78d6396237bf5f88d3467a9bf9713913ae', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e2cbf7c87bb701bcd07c2962ff499dc06803d31', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09141140737b99c91d93d265b04ed29bd1e03137', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ae9a953efbe99b0900ec4b6fb9303c85e8f633f', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1177f36a507424fc263b0b19626ab9727bdc1bf', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6007231e3edc7aa6ece4c124f973e08acb25d84', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e5db935031c14e33f6a2a650b7a7490b644fa79', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7b9e90e54b5d3717b9f5498f2ed8ebf5ab6ae59', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dcc8b30e5e2f433cb1e7097b5c89f3fcccfc43b6', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22d353a8eed7d433b0d7eeca235ed2b0524e99fe', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f13b8af46093746e06e33ffd6aba128709bf989', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a19f20893aceed44af7c91e09ca7d7ce0fa5d41b', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5a21985ee3c15b33390a0912c1a17c3474448a6', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '349d75a6268cac3ddfcd28321cc1af0513206bfe', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'feb8f93b200f6bfdb21da361324b3d0333cc06f7', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '24b5ab36e4516217c9fca022078ec539cd8fe452', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1f0c10f3c52be625dcfc5462a10064e4b12cbc6', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd5fb937795bb519672a0a6418ae0f0f09265d4a4', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20edf83352f5fa48a6efae7d098b9bbdf6f9a183', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9cd37d3bc5a6b8cab2ee6bf0b2c94c46f6f7dcd', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '264282d8473f065bb4ffed3e6298c219b98faceb', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce12294f527024ae212a06cd898a9b8e7761caf5', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49ac7877e223604dbdde6c241a47c600cd8e6de5', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd65feb29fbffb7aee19bf90c925f76785f7657cc', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf038ccbdb54cd052329fb0733637f482f2ffde3', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62740efb481ea5004d9389da8ef00481b2295e82', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd486dc6323036780f9e6ea20a1eff519d2c0f26d', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}]",Caitlin Haedrich,69856275,,User,,31,,5,13
700962388,Raster Support for Interactive Jupyter maps with folium,"* Add temporary WGS84-Pseudo-Mercator location for rasters
* Add `add_raster` method for `InteractiveMap` class
* Update demonstration notebook to include raster example
* Change `GrassRenderer` PNG background to transparent
* Re-arrange functions for clarity; added `utils.py'
* Added rcfile cleanup
* Added `save()` method for saving folium map as HTML file
* Added temporary directory with `tempfile`

These changes are part of an on-going Google Summer of Code project, Improved Integration of GRASS GIS and Jupyter Notebooks. You can find more information [here](https://trac.osgeo.org/grass/wiki/GSoC/2021/JupyterAndGRASS). 

You can also test the functionality at this binder link:
https://mybinder.org/v2/gh/chaedri/grass/interactive-rasters?urlpath=lab%2Ftree%2Fdoc%2Fnotebooks%2Fjupyter_integration.ipynb",True,1769,https://api.github.com/repos/OSGeo/grass/pulls/1769,https://github.com/OSGeo/grass/pull/1769,closed,281,117,6,53,3,36,2,0,"[{'name': 'enhancement'}, {'name': 'gsoc'}]",2021-08-01 18:43:56+00:00,2021-08-11 18:38:08+00:00,863652.0,"9 days, 23:54:12","[{'comment_id': 684566299, 'comment_body': 'Same code in the vector function. Creating a function with a reasonable API may take a couple of tries, but something like ""set computational region from environment A to B"" sounds like a good starting point. You may approach the function as ""both environments are equal (source and target)"" or more as a standard function or module, so ""set region from another environment to the current one"" (and optionally specify the current environment.', 'comment_created': datetime.datetime(2021, 8, 7, 1, 33, 58, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 684566590, 'comment_body': ""I think `rcfile` is not deleted. Don't you need a finalize call here? See the doc and code for create_environment and let me know what you think."", 'comment_created': datetime.datetime(2021, 8, 7, 1, 37, 1, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 684566966, 'comment_body': 'Since `self._psmerc_env` is the only newly set attribute, it seems that a `_setup_location(name, epsg)` function (returning the new env) may work well here.', 'comment_created': datetime.datetime(2021, 8, 7, 1, 40, 32, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 684567083, 'comment_body': 'Also positional-only.', 'comment_created': datetime.datetime(2021, 8, 7, 1, 41, 27, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 684567294, 'comment_body': ""`parse_command` should work here, but get_region seems even more appropriate. You are using get_region elsewhere, so note in a comment if there is a reason it doesn't work here (I think it should)."", 'comment_created': datetime.datetime(2021, 8, 7, 1, 43, 50, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 684567824, 'comment_body': 'No shouting in the comments! Just put there two sentences, two lines, ...', 'comment_created': datetime.datetime(2021, 8, 7, 1, 49, 19, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 684568189, 'comment_body': 'There is actually an overhead in calling m.proj (it is a subprocess etc.), so calling it twice is suboptimal, but now I\'m perhaps more concerned with latlon in the name (used for geographical CRSs in GRASS in general) and this being a clear separate piece of code. Isn\'t the whole thing ""get region in wgs84"".', 'comment_created': datetime.datetime(2021, 8, 7, 1, 52, 28, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 684568731, 'comment_body': ""For reprojection, you are just using the original name. That's a good start, although you can have maps with the same name in different mapsets and you can access them from one mapset (`elevation@PERMANENT` and `elevation@user1`)."", 'comment_created': datetime.datetime(2021, 8, 7, 1, 56, 57, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 684568975, 'comment_body': 'Unnecessary comments.', 'comment_created': datetime.datetime(2021, 8, 7, 1, 59, 26, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 684568989, 'comment_body': 'Comment would be better as a doc of return value in the docstring.', 'comment_created': datetime.datetime(2021, 8, 7, 1, 59, 49, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 684569510, 'comment_body': 'Ideally, you would have a third function which would have the m.proj call and surrounding string manipulation and that may avoid the need for two calls of `convert_coordinates_to_latlon` which are good API-wise, but not ideal performance-wise, but it might be too cumbersome in practice.', 'comment_created': datetime.datetime(2021, 8, 7, 2, 5, 15, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 684569680, 'comment_body': 'That needs keyword arguments to clarify what is being passed to it.', 'comment_created': datetime.datetime(2021, 8, 7, 2, 7, 25, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 684569754, 'comment_body': 'Add docstrinfgs, run Pylint.', 'comment_created': datetime.datetime(2021, 8, 7, 2, 8, 1, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 684639609, 'comment_body': ""I think you are right but I have all the cleanup in PR #1754. I think it makes most sense to move rcfile cleanup here and delete that PR since it (1) doesn't contain much new code and (2) this PR contains so many big changes, it's just going to cause a bunch of merge conflicts."", 'comment_created': datetime.datetime(2021, 8, 7, 14, 29, 56, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 684706033, 'comment_body': 'dict', 'comment_created': datetime.datetime(2021, 8, 8, 3, 5, 49, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 684706485, 'comment_body': 'raster makes sense, but it should be cell here. Find file is a low-level function looking for a file. Hopefully, this will change at some point, but now ""raster"" generates a verbose message, but ""cell"" does not. See implementation of find_file.', 'comment_created': datetime.datetime(2021, 8, 8, 3, 10, 20, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 684772743, 'comment_body': ""I managed to avoid calling `convert_coordinates_to_latlong` and deleted it. Do you think it's still necessary to have a third function here?"", 'comment_created': datetime.datetime(2021, 8, 8, 13, 9, 6, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 684772867, 'comment_body': 'I deleted `convert_coordinates_to_latlon`.', 'comment_created': datetime.datetime(2021, 8, 8, 13, 9, 53, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 684772983, 'comment_body': ""You're right - I switched to `get_region` here."", 'comment_created': datetime.datetime(2021, 8, 8, 13, 10, 47, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 684773119, 'comment_body': 'I switch to `setup_location()` and moved that functions to `utils.py`.', 'comment_created': datetime.datetime(2021, 8, 8, 13, 11, 36, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 684773474, 'comment_body': ""I'm not sure if I've addressed this comment - I got rid of the repetition with a new function `setup_location()`. "", 'comment_created': datetime.datetime(2021, 8, 8, 13, 13, 14, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 684816384, 'comment_body': 'Add that all environments used in this class are derived from this one. A helpful note and it clarifies that os.environ is not modified which ""Remember original environment"" may suggest to some.', 'comment_created': datetime.datetime(2021, 8, 8, 19, 9, 2, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 685173334, 'comment_body': 'dbase_location - In the context of the ""classic"" naming practice, dbase_location is confusing: Is it dbase or location? You can call it _path_ because that\'s what it is.', 'comment_created': datetime.datetime(2021, 8, 9, 13, 3, 48, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 685173922, 'comment_body': ""Maybe _of_ or _'s_ would clarify the description here."", 'comment_created': datetime.datetime(2021, 8, 9, 13, 4, 37, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 685177565, 'comment_body': 'typo: GNU **Gernal** Public...Read **teh** file COPYING that comes with GRASS\r\n\r\nSame in python/grass/jupyter/interact_display.py.\r\n\r\nYou should not be writing these by hand.', 'comment_created': datetime.datetime(2021, 8, 9, 13, 9, 32, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 685178273, 'comment_body': 'What use case do you have in mind for the default? Is this trying to mimic the d-command behavior in creating `map.png` by default? How do you plan to document it?', 'comment_created': datetime.datetime(2021, 8, 9, 13, 10, 31, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 685286067, 'comment_body': ""Ah, good catch. I went hunting for the proper header to put here and found some conflicting methods. There's the [guidelines on the wiki](https://trac.osgeo.org/grass/wiki/Submitting/Python) which are similar to what I have but as a docstring instead of a comment. But there's also lots (most?) of python scripts on github that use comments (see [utils/download.py](https://github.com/OSGeo/grass/blob/master/python/grass/utils/download.py) or [lib/init/grass.py](https://github.com/OSGeo/grass/blob/master/lib/init/grass.py)). There's also examples I found in the python directory that have more a Sphinx docstring style (such as [raster.py](https://github.com/OSGeo/grass/blob/master/python/grass/script/raster.py)). What do you think is most appropriate here?"", 'comment_created': datetime.datetime(2021, 8, 9, 15, 16, 19, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 685292866, 'comment_body': 'Yes, I think I was thinking of the d-command behavior here. `map.png` would probably be a better choice - I\'ll change it. Use-case-wise, I was imagining users might want to embed their map in a website or create a website from. They create their map then save as an html (i.e. `m.save(filename=""map_for_website.html"")`). Do you think it needs additional documentation?', 'comment_created': datetime.datetime(2021, 8, 9, 15, 24, 20, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 685386137, 'comment_body': 'Right, so what is the use case for the default value? In other words, in what circumstances will the user know about the default and write save() while not saying where to save?', 'comment_created': datetime.datetime(2021, 8, 9, 17, 28, 27, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 685387055, 'comment_body': ""This style of header is fine. Just don't write it by hand and if you do, don't include typos :-)"", 'comment_created': datetime.datetime(2021, 8, 9, 17, 29, 45, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 685442305, 'comment_body': ""Typos fixed. I'll copy and paste next time 👍 "", 'comment_created': datetime.datetime(2021, 8, 9, 18, 54, 50, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 685443116, 'comment_body': 'AH, ok, I see your point now. Having a default is not necessary. The line should be `def save(self, filename):`.', 'comment_created': datetime.datetime(2021, 8, 9, 18, 56, 2, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 685451967, 'comment_body': 'No, with the current code, this work well.', 'comment_created': datetime.datetime(2021, 8, 9, 19, 10, 2, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 685492004, 'comment_body': 'setup_location works for me.', 'comment_created': datetime.datetime(2021, 8, 9, 20, 17, 18, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 685616768, 'comment_body': ""I'm still not sure I fully understand why passing the original name could cause a problem here. In your example, are you thinking that `elevation@PERMANENT` and `elevation@user1` are different rasters but we want to add both of them to our folium map? In that case, we'd end up with two `elevation`s in the temporary location which would cause a problem. Perhaps replacing the `@` in the `full_name` string to make something like `elevation_user1` as the new name would solve this?"", 'comment_created': datetime.datetime(2021, 8, 10, 1, 0, 33, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 686331062, 'comment_body': 'I see two issues:\r\n\r\n1. `self.tmp_dir` + `""map.png""` will be the same filename for each `add_raster` call. Is this a problem? For GrassRenderer? For folium.ImageOverlay`? I have no idea how ImageOverlay behaves or what is in its doc. When this image needs to be present? Using the new name (from 2.) might be the best option at this point.\r\n2. Replacing `@` with `_` should work well enough. We will always do that so that should avoid any conflicts (mapname@mapsetname is a unique identifier for a map of a given type within a location). (If we would convert rasters to vectors or the other way around - like in the possible alternative workflows we talked about - that would create potential for conflicts, but we could avoid that by simply using different location or different mapset for that workflow.)', 'comment_created': datetime.datetime(2021, 8, 10, 21, 21, 37, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}]","[{'commit_sha': '57c19d9393cfaa8bcc5b00e52697b6c705f53078', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '009d763757d853230edb57a4408147425de6221b', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '527a0dd4c4fc6442e7dae1ee70c56367319b80d6', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b47a92519558b6fce0df70d57eed60294165461c', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e797fe2ada2a5cb99411c323c7594875b4526922', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d7dd0a4b4aea9a4d3e39e62db0f14e9c2422b64', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '008c2a128b54dc829779ca34599698c696581b90', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d5cdc9b97a2b4d0f30d76b45f8523358d5e731c', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3573fe7997ffc4403bceae76bbd2ced9ee0dd7ea', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed5885116be6cae387e5bfa244d16d4aefe8e4d2', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93305e6dc8b19fa9b36603219d97377a6916ad91', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0fd448b373f820225d5283a7a7e3ccb92365db5b', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b23a9c75a4c59268e3d023ad3de550965bee1fb', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd1a9a886a7f69a4064f6ccc920bc1aebb6306351', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66ebacc8686c273461779312d7546ad672160603', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e8e97b4c76059238f8b7ec564a0448fc2f589fd9', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03f2dd69f8057d5217fa529ae57bbc2254907364', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3720957235a1b05cc6f178cab65626bc0521bc88', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7b463df64f6f7834961ff23fd4cf96e8b048f86', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e73f60ca369688d0b8edc392122cad04ae65d5b1', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2347f5dd842fa4608c4cc442a6a2278047dc6043', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca486c734691ec17bbf2b617c1454a759399e940', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d5b84a3730da1a03b7131f14a583c591e16dec4', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7561125cf7ae03c193c5b30e9e2d1bebedf04b7', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c71bb2972180fcb9796155904ebae3e95911afa', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e2f99d3cc4d5ca1e91f96aade66c23e86e904e0', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '545e0a78d6396237bf5f88d3467a9bf9713913ae', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e2cbf7c87bb701bcd07c2962ff499dc06803d31', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09141140737b99c91d93d265b04ed29bd1e03137', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ae9a953efbe99b0900ec4b6fb9303c85e8f633f', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1177f36a507424fc263b0b19626ab9727bdc1bf', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6007231e3edc7aa6ece4c124f973e08acb25d84', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e5db935031c14e33f6a2a650b7a7490b644fa79', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7b9e90e54b5d3717b9f5498f2ed8ebf5ab6ae59', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dcc8b30e5e2f433cb1e7097b5c89f3fcccfc43b6', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22d353a8eed7d433b0d7eeca235ed2b0524e99fe', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f13b8af46093746e06e33ffd6aba128709bf989', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a19f20893aceed44af7c91e09ca7d7ce0fa5d41b', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5a21985ee3c15b33390a0912c1a17c3474448a6', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '349d75a6268cac3ddfcd28321cc1af0513206bfe', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'feb8f93b200f6bfdb21da361324b3d0333cc06f7', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '24b5ab36e4516217c9fca022078ec539cd8fe452', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1f0c10f3c52be625dcfc5462a10064e4b12cbc6', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd5fb937795bb519672a0a6418ae0f0f09265d4a4', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20edf83352f5fa48a6efae7d098b9bbdf6f9a183', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9cd37d3bc5a6b8cab2ee6bf0b2c94c46f6f7dcd', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '264282d8473f065bb4ffed3e6298c219b98faceb', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce12294f527024ae212a06cd898a9b8e7761caf5', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49ac7877e223604dbdde6c241a47c600cd8e6de5', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd65feb29fbffb7aee19bf90c925f76785f7657cc', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf038ccbdb54cd052329fb0733637f482f2ffde3', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62740efb481ea5004d9389da8ef00481b2295e82', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd486dc6323036780f9e6ea20a1eff519d2c0f26d', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}]",Caitlin Haedrich,69856275,,User,,31,,5,13
692765393,Test Module for Non-interactive display in Jupyter Notebooks,"* Added testsuite directory for `grass.jupyter`
* Tests for display.py

This PR contains a test module for non-interactive displays created in `grass.jupyter`. It is part of an ongoing Google Summer of Code project, Improved Integration of GRASS GIS and Jupyter Notebooks. You can find more information [here](https://trac.osgeo.org/grass/wiki/GSoC/2021/JupyterAndGRASS). ",True,1739,https://api.github.com/repos/OSGeo/grass/pulls/1739,https://github.com/OSGeo/grass/pull/1739,closed,272,17,5,21,5,23,1,0,[{'name': 'gsoc'}],2021-07-19 16:47:16+00:00,2021-08-17 03:20:23+00:00,2457187.0,"28 days, 10:33:07","[{'comment_id': 684570717, 'comment_body': 'What about one of these instead of `is False`?\r\n\r\n```python\r\n@unittest.skipIf(not can_import_folium(), ""Cannot import folium"")\r\n@unittest.skipIf(not folium_imports(), ""Cannot import folium"")\r\n```', 'comment_created': datetime.datetime(2021, 8, 7, 2, 17, 42, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 684571070, 'comment_body': 'Same issue as in the other PR. `missing_ok` parameter is not available in 3.6 and 3.7 if I recall correctly.', 'comment_created': datetime.datetime(2021, 8, 7, 2, 21, 33, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 684571724, 'comment_body': 'Testing more modules than just d.rast would be nice, at least d.vect.\r\n\r\nYou can also test that it throws attr error when the module name is wrong. See [assertRaises](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertRaises) and use it as a context manager (with `with`). You could also test with `assertRaisesRegex` and confirm that module name is in the message and things like that.', 'comment_created': datetime.datetime(2021, 8, 7, 2, 29, 10, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 684571799, 'comment_body': 'May be more clear if ""test_filename.png"" is in a variable.', 'comment_created': datetime.datetime(2021, 8, 7, 2, 29, 50, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 684571875, 'comment_body': 'Make this a docstring instead saying what the function does.', 'comment_created': datetime.datetime(2021, 8, 7, 2, 30, 57, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 684572062, 'comment_body': 'No need for a comment (would be good for an example code for learning Python, but not code which will be maintained for people who went at least though the initial hurdles of getting to know Python).', 'comment_created': datetime.datetime(2021, 8, 7, 2, 32, 46, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 684572069, 'comment_body': 'Remove.', 'comment_created': datetime.datetime(2021, 8, 7, 2, 32, 52, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 684572465, 'comment_body': 'If the code below is not clear enough, I\'m afraid that the word ""assert"" will not help much (not the most common word in English).', 'comment_created': datetime.datetime(2021, 8, 7, 2, 37, 16, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 687821109, 'comment_body': 'I went with the first suggestion.', 'comment_created': datetime.datetime(2021, 8, 12, 15, 11, 39, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 687822174, 'comment_body': 'I added d.vect and another test for the attr error.', 'comment_created': datetime.datetime(2021, 8, 12, 15, 12, 32, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 687894428, 'comment_body': 'Do you mean custom? (not unique)', 'comment_created': datetime.datetime(2021, 8, 12, 16, 19, 3, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 687897033, 'comment_body': 'Possibly more readable when it looks like a module name, so underscores, not camel case.', 'comment_created': datetime.datetime(2021, 8, 12, 16, 21, 12, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 688657793, 'comment_body': 'typo', 'comment_created': datetime.datetime(2021, 8, 13, 17, 2, 11, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 689548496, 'comment_body': 'Do you plan to update this? If you think it is good as is, just resolve this conversation.', 'comment_created': datetime.datetime(2021, 8, 16, 13, 42, 2, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 689549386, 'comment_body': 'These now should work without folium, so you can remove the skip if (it is needed only for the actual folium related tests).', 'comment_created': datetime.datetime(2021, 8, 16, 13, 43, 5, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 689550603, 'comment_body': 'Create another class for this, possibly a file. Just to make it clear it is something different. ', 'comment_created': datetime.datetime(2021, 8, 16, 13, 44, 42, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 689553008, 'comment_body': 'I have no idea what this will do in a ""headless"" environment such as CI, although I expect it is okay to do this. What happens when you run the test in the command line? What the doc says? Add a comment specifying it. Add also save to HTMK function or use just that if show may cause trouble.', 'comment_created': datetime.datetime(2021, 8, 16, 13, 47, 37, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 689559033, 'comment_body': 'Please avoid:\r\n\r\n```python\r\n# Open file\r\nfile.open()\r\n# Show x\r\nx.show()\r\n```\r\n\r\nThis should be clear from the code itself. Comment should explain the intention behind the line, describe motivation, or discuss some non-obvious details or side effects. It should not merely restate what the code already says unless the function names or other things are unclear. This is does not apply when writing documentation or examples where you may want to emphasize that show really does show.', 'comment_created': datetime.datetime(2021, 8, 16, 13, 54, 50, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 689562805, 'comment_body': 'Add another function to this class which tests show method which returns the Image object. You can just test the result with assertTrue. It will need the same ""can import ipython"" ""skip if"" test.', 'comment_created': datetime.datetime(2021, 8, 16, 13, 59, 8, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 689895708, 'comment_body': 'There were two `#Assert image exists` and I changed the wrong/other one. Oops! Now they both say something better. Thanks for catching it.', 'comment_created': datetime.datetime(2021, 8, 16, 22, 16, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 689911700, 'comment_body': ""In the command line, `interactive_map.show()` returns a folium object (specifically, something like `branca.element.Figure object at <...>`. I added a comment to the `show()` docstring saying it returned  a folium figure object. I'm not sure if this is problematic or not - my guess is not because the object is just taking up Python memory and will be deleted after Python is exited?"", 'comment_created': datetime.datetime(2021, 8, 16, 22, 53, 3, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 689962598, 'comment_body': 'I created a new file.', 'comment_created': datetime.datetime(2021, 8, 17, 1, 17, 10, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 689970684, 'comment_body': ""That sounds good. `show()` here is little surprising as in e.g. Matplotlib it may mean showing a window and waiting for a user to close it, i.e., show() seems like something will be shown (not the case in the tests), rather than an independent (although perhaps useless) object being returned. It makes sense in the context of Jupyter notebook, so let's leave it as is."", 'comment_created': datetime.datetime(2021, 8, 17, 1, 41, 42, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}]","[{'commit_sha': '2cada12b14a38cc2f2072fc85d6c197d0c6dc8fe', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c94590df40907f91f1f01dcf68a44e193acdef8', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ebbe9f5f94ad0a95e1eb9fefc18b535f5f286ae', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6912d3d6ffc8ee4d15f74fcba525c701debc7b39', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f81329e95bc570dbbb74caf53accef0680d5ce1', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '13bb391959897c608cae594da9cde1b9639e586f', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b96c47c4d924a2dae3bb8f170de3778aca5464b', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b0e7c8683a308bdb4a961febd78eda27f04db12', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d5320c9d17f810f17d79c5e86aeb8e343d50ef6', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46e7a862896beff39eb1ccf1adb4f4333cf85c21', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef2bcba8ac3c4c9bb27f17ca5a6e466bfb5c9f3c', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'beb4fca6f2fbd24406f9abc7ffab643ce045d741', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd7ecf4ba94b0706a32af543506237cb2d4dc30eb', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e28356400a83656203efa48f125167dbb692904', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71e74b281c2d4ccd2dfd334c1ce77f249edff97b', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '397d14a6879e1aa0e3e84ee3a858c7f3d19230ac', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64b6a91de740d8bf1c88d61184657c38b204d35f', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16bec122b26e9431d886e7093f28ce4d8b1f7de9', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e1db80c02dcff48c40e548eef4b1d421dec1bed', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '58687bff2efe5a04edab115b32f8399c648e0c3c', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a8b15edc79028162a7fa012077b6b37d2bd92dfc', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}]",Caitlin Haedrich,69856275,,User,,31,,5,13
700962388,Raster Support for Interactive Jupyter maps with folium,"* Add temporary WGS84-Pseudo-Mercator location for rasters
* Add `add_raster` method for `InteractiveMap` class
* Update demonstration notebook to include raster example
* Change `GrassRenderer` PNG background to transparent
* Re-arrange functions for clarity; added `utils.py'
* Added rcfile cleanup
* Added `save()` method for saving folium map as HTML file
* Added temporary directory with `tempfile`

These changes are part of an on-going Google Summer of Code project, Improved Integration of GRASS GIS and Jupyter Notebooks. You can find more information [here](https://trac.osgeo.org/grass/wiki/GSoC/2021/JupyterAndGRASS). 

You can also test the functionality at this binder link:
https://mybinder.org/v2/gh/chaedri/grass/interactive-rasters?urlpath=lab%2Ftree%2Fdoc%2Fnotebooks%2Fjupyter_integration.ipynb",True,1769,https://api.github.com/repos/OSGeo/grass/pulls/1769,https://github.com/OSGeo/grass/pull/1769,closed,281,117,6,53,3,36,2,0,"[{'name': 'enhancement'}, {'name': 'gsoc'}]",2021-08-01 18:43:56+00:00,2021-08-11 18:38:08+00:00,863652.0,"9 days, 23:54:12","[{'comment_id': 684566299, 'comment_body': 'Same code in the vector function. Creating a function with a reasonable API may take a couple of tries, but something like ""set computational region from environment A to B"" sounds like a good starting point. You may approach the function as ""both environments are equal (source and target)"" or more as a standard function or module, so ""set region from another environment to the current one"" (and optionally specify the current environment.', 'comment_created': datetime.datetime(2021, 8, 7, 1, 33, 58, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 684566590, 'comment_body': ""I think `rcfile` is not deleted. Don't you need a finalize call here? See the doc and code for create_environment and let me know what you think."", 'comment_created': datetime.datetime(2021, 8, 7, 1, 37, 1, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 684566966, 'comment_body': 'Since `self._psmerc_env` is the only newly set attribute, it seems that a `_setup_location(name, epsg)` function (returning the new env) may work well here.', 'comment_created': datetime.datetime(2021, 8, 7, 1, 40, 32, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 684567083, 'comment_body': 'Also positional-only.', 'comment_created': datetime.datetime(2021, 8, 7, 1, 41, 27, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 684567294, 'comment_body': ""`parse_command` should work here, but get_region seems even more appropriate. You are using get_region elsewhere, so note in a comment if there is a reason it doesn't work here (I think it should)."", 'comment_created': datetime.datetime(2021, 8, 7, 1, 43, 50, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 684567824, 'comment_body': 'No shouting in the comments! Just put there two sentences, two lines, ...', 'comment_created': datetime.datetime(2021, 8, 7, 1, 49, 19, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 684568189, 'comment_body': 'There is actually an overhead in calling m.proj (it is a subprocess etc.), so calling it twice is suboptimal, but now I\'m perhaps more concerned with latlon in the name (used for geographical CRSs in GRASS in general) and this being a clear separate piece of code. Isn\'t the whole thing ""get region in wgs84"".', 'comment_created': datetime.datetime(2021, 8, 7, 1, 52, 28, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 684568731, 'comment_body': ""For reprojection, you are just using the original name. That's a good start, although you can have maps with the same name in different mapsets and you can access them from one mapset (`elevation@PERMANENT` and `elevation@user1`)."", 'comment_created': datetime.datetime(2021, 8, 7, 1, 56, 57, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 684568975, 'comment_body': 'Unnecessary comments.', 'comment_created': datetime.datetime(2021, 8, 7, 1, 59, 26, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 684568989, 'comment_body': 'Comment would be better as a doc of return value in the docstring.', 'comment_created': datetime.datetime(2021, 8, 7, 1, 59, 49, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 684569510, 'comment_body': 'Ideally, you would have a third function which would have the m.proj call and surrounding string manipulation and that may avoid the need for two calls of `convert_coordinates_to_latlon` which are good API-wise, but not ideal performance-wise, but it might be too cumbersome in practice.', 'comment_created': datetime.datetime(2021, 8, 7, 2, 5, 15, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 684569680, 'comment_body': 'That needs keyword arguments to clarify what is being passed to it.', 'comment_created': datetime.datetime(2021, 8, 7, 2, 7, 25, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 684569754, 'comment_body': 'Add docstrinfgs, run Pylint.', 'comment_created': datetime.datetime(2021, 8, 7, 2, 8, 1, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 684639609, 'comment_body': ""I think you are right but I have all the cleanup in PR #1754. I think it makes most sense to move rcfile cleanup here and delete that PR since it (1) doesn't contain much new code and (2) this PR contains so many big changes, it's just going to cause a bunch of merge conflicts."", 'comment_created': datetime.datetime(2021, 8, 7, 14, 29, 56, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 684706033, 'comment_body': 'dict', 'comment_created': datetime.datetime(2021, 8, 8, 3, 5, 49, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 684706485, 'comment_body': 'raster makes sense, but it should be cell here. Find file is a low-level function looking for a file. Hopefully, this will change at some point, but now ""raster"" generates a verbose message, but ""cell"" does not. See implementation of find_file.', 'comment_created': datetime.datetime(2021, 8, 8, 3, 10, 20, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 684772743, 'comment_body': ""I managed to avoid calling `convert_coordinates_to_latlong` and deleted it. Do you think it's still necessary to have a third function here?"", 'comment_created': datetime.datetime(2021, 8, 8, 13, 9, 6, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 684772867, 'comment_body': 'I deleted `convert_coordinates_to_latlon`.', 'comment_created': datetime.datetime(2021, 8, 8, 13, 9, 53, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 684772983, 'comment_body': ""You're right - I switched to `get_region` here."", 'comment_created': datetime.datetime(2021, 8, 8, 13, 10, 47, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 684773119, 'comment_body': 'I switch to `setup_location()` and moved that functions to `utils.py`.', 'comment_created': datetime.datetime(2021, 8, 8, 13, 11, 36, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 684773474, 'comment_body': ""I'm not sure if I've addressed this comment - I got rid of the repetition with a new function `setup_location()`. "", 'comment_created': datetime.datetime(2021, 8, 8, 13, 13, 14, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 684816384, 'comment_body': 'Add that all environments used in this class are derived from this one. A helpful note and it clarifies that os.environ is not modified which ""Remember original environment"" may suggest to some.', 'comment_created': datetime.datetime(2021, 8, 8, 19, 9, 2, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 685173334, 'comment_body': 'dbase_location - In the context of the ""classic"" naming practice, dbase_location is confusing: Is it dbase or location? You can call it _path_ because that\'s what it is.', 'comment_created': datetime.datetime(2021, 8, 9, 13, 3, 48, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 685173922, 'comment_body': ""Maybe _of_ or _'s_ would clarify the description here."", 'comment_created': datetime.datetime(2021, 8, 9, 13, 4, 37, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 685177565, 'comment_body': 'typo: GNU **Gernal** Public...Read **teh** file COPYING that comes with GRASS\r\n\r\nSame in python/grass/jupyter/interact_display.py.\r\n\r\nYou should not be writing these by hand.', 'comment_created': datetime.datetime(2021, 8, 9, 13, 9, 32, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 685178273, 'comment_body': 'What use case do you have in mind for the default? Is this trying to mimic the d-command behavior in creating `map.png` by default? How do you plan to document it?', 'comment_created': datetime.datetime(2021, 8, 9, 13, 10, 31, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 685286067, 'comment_body': ""Ah, good catch. I went hunting for the proper header to put here and found some conflicting methods. There's the [guidelines on the wiki](https://trac.osgeo.org/grass/wiki/Submitting/Python) which are similar to what I have but as a docstring instead of a comment. But there's also lots (most?) of python scripts on github that use comments (see [utils/download.py](https://github.com/OSGeo/grass/blob/master/python/grass/utils/download.py) or [lib/init/grass.py](https://github.com/OSGeo/grass/blob/master/lib/init/grass.py)). There's also examples I found in the python directory that have more a Sphinx docstring style (such as [raster.py](https://github.com/OSGeo/grass/blob/master/python/grass/script/raster.py)). What do you think is most appropriate here?"", 'comment_created': datetime.datetime(2021, 8, 9, 15, 16, 19, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 685292866, 'comment_body': 'Yes, I think I was thinking of the d-command behavior here. `map.png` would probably be a better choice - I\'ll change it. Use-case-wise, I was imagining users might want to embed their map in a website or create a website from. They create their map then save as an html (i.e. `m.save(filename=""map_for_website.html"")`). Do you think it needs additional documentation?', 'comment_created': datetime.datetime(2021, 8, 9, 15, 24, 20, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 685386137, 'comment_body': 'Right, so what is the use case for the default value? In other words, in what circumstances will the user know about the default and write save() while not saying where to save?', 'comment_created': datetime.datetime(2021, 8, 9, 17, 28, 27, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 685387055, 'comment_body': ""This style of header is fine. Just don't write it by hand and if you do, don't include typos :-)"", 'comment_created': datetime.datetime(2021, 8, 9, 17, 29, 45, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 685442305, 'comment_body': ""Typos fixed. I'll copy and paste next time 👍 "", 'comment_created': datetime.datetime(2021, 8, 9, 18, 54, 50, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 685443116, 'comment_body': 'AH, ok, I see your point now. Having a default is not necessary. The line should be `def save(self, filename):`.', 'comment_created': datetime.datetime(2021, 8, 9, 18, 56, 2, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 685451967, 'comment_body': 'No, with the current code, this work well.', 'comment_created': datetime.datetime(2021, 8, 9, 19, 10, 2, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 685492004, 'comment_body': 'setup_location works for me.', 'comment_created': datetime.datetime(2021, 8, 9, 20, 17, 18, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 685616768, 'comment_body': ""I'm still not sure I fully understand why passing the original name could cause a problem here. In your example, are you thinking that `elevation@PERMANENT` and `elevation@user1` are different rasters but we want to add both of them to our folium map? In that case, we'd end up with two `elevation`s in the temporary location which would cause a problem. Perhaps replacing the `@` in the `full_name` string to make something like `elevation_user1` as the new name would solve this?"", 'comment_created': datetime.datetime(2021, 8, 10, 1, 0, 33, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 686331062, 'comment_body': 'I see two issues:\r\n\r\n1. `self.tmp_dir` + `""map.png""` will be the same filename for each `add_raster` call. Is this a problem? For GrassRenderer? For folium.ImageOverlay`? I have no idea how ImageOverlay behaves or what is in its doc. When this image needs to be present? Using the new name (from 2.) might be the best option at this point.\r\n2. Replacing `@` with `_` should work well enough. We will always do that so that should avoid any conflicts (mapname@mapsetname is a unique identifier for a map of a given type within a location). (If we would convert rasters to vectors or the other way around - like in the possible alternative workflows we talked about - that would create potential for conflicts, but we could avoid that by simply using different location or different mapset for that workflow.)', 'comment_created': datetime.datetime(2021, 8, 10, 21, 21, 37, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}]","[{'commit_sha': '57c19d9393cfaa8bcc5b00e52697b6c705f53078', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '009d763757d853230edb57a4408147425de6221b', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '527a0dd4c4fc6442e7dae1ee70c56367319b80d6', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b47a92519558b6fce0df70d57eed60294165461c', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e797fe2ada2a5cb99411c323c7594875b4526922', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d7dd0a4b4aea9a4d3e39e62db0f14e9c2422b64', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '008c2a128b54dc829779ca34599698c696581b90', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d5cdc9b97a2b4d0f30d76b45f8523358d5e731c', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3573fe7997ffc4403bceae76bbd2ced9ee0dd7ea', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed5885116be6cae387e5bfa244d16d4aefe8e4d2', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93305e6dc8b19fa9b36603219d97377a6916ad91', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0fd448b373f820225d5283a7a7e3ccb92365db5b', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b23a9c75a4c59268e3d023ad3de550965bee1fb', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd1a9a886a7f69a4064f6ccc920bc1aebb6306351', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66ebacc8686c273461779312d7546ad672160603', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e8e97b4c76059238f8b7ec564a0448fc2f589fd9', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03f2dd69f8057d5217fa529ae57bbc2254907364', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3720957235a1b05cc6f178cab65626bc0521bc88', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7b463df64f6f7834961ff23fd4cf96e8b048f86', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e73f60ca369688d0b8edc392122cad04ae65d5b1', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2347f5dd842fa4608c4cc442a6a2278047dc6043', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca486c734691ec17bbf2b617c1454a759399e940', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d5b84a3730da1a03b7131f14a583c591e16dec4', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7561125cf7ae03c193c5b30e9e2d1bebedf04b7', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c71bb2972180fcb9796155904ebae3e95911afa', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e2f99d3cc4d5ca1e91f96aade66c23e86e904e0', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '545e0a78d6396237bf5f88d3467a9bf9713913ae', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e2cbf7c87bb701bcd07c2962ff499dc06803d31', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09141140737b99c91d93d265b04ed29bd1e03137', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ae9a953efbe99b0900ec4b6fb9303c85e8f633f', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1177f36a507424fc263b0b19626ab9727bdc1bf', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6007231e3edc7aa6ece4c124f973e08acb25d84', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e5db935031c14e33f6a2a650b7a7490b644fa79', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7b9e90e54b5d3717b9f5498f2ed8ebf5ab6ae59', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dcc8b30e5e2f433cb1e7097b5c89f3fcccfc43b6', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22d353a8eed7d433b0d7eeca235ed2b0524e99fe', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f13b8af46093746e06e33ffd6aba128709bf989', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a19f20893aceed44af7c91e09ca7d7ce0fa5d41b', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5a21985ee3c15b33390a0912c1a17c3474448a6', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '349d75a6268cac3ddfcd28321cc1af0513206bfe', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'feb8f93b200f6bfdb21da361324b3d0333cc06f7', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '24b5ab36e4516217c9fca022078ec539cd8fe452', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1f0c10f3c52be625dcfc5462a10064e4b12cbc6', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd5fb937795bb519672a0a6418ae0f0f09265d4a4', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20edf83352f5fa48a6efae7d098b9bbdf6f9a183', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9cd37d3bc5a6b8cab2ee6bf0b2c94c46f6f7dcd', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '264282d8473f065bb4ffed3e6298c219b98faceb', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce12294f527024ae212a06cd898a9b8e7761caf5', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49ac7877e223604dbdde6c241a47c600cd8e6de5', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd65feb29fbffb7aee19bf90c925f76785f7657cc', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf038ccbdb54cd052329fb0733637f482f2ffde3', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62740efb481ea5004d9389da8ef00481b2295e82', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd486dc6323036780f9e6ea20a1eff519d2c0f26d', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}]",Caitlin Haedrich,69856275,,User,,31,,5,13
657702206,Added Binder setup files,"I'm just opening this pull request draft to get the ball rolling for my Google Summer of Code project. As part of the GRASS and Jupyter Notebook project, we discussed adding setup files to run binder.",True,1603,https://api.github.com/repos/OSGeo/grass/pulls/1603,https://github.com/OSGeo/grass/pull/1603,closed,102,0,4,11,6,11,2,0,"[{'name': 'enhancement'}, {'name': 'gsoc'}]",2021-05-30 13:36:23+00:00,2021-06-10 03:31:00+00:00,914077.0,"10 days, 13:54:37","[{'comment_id': 642126090, 'comment_body': 'This seems to allway build the official master branch. So, it wil not work for testing PRs, right?\r\n\r\nI tried to find some info on how to solve this but did not come across a solution that is known to work, but you could try if it is possible in the postbuild script to:\r\n\r\n1 fetch the url of the current repo:\r\n`git config --get remote.origin.url`\r\n\r\nand\r\n2. use that to clone the code from which GRASS is supposed to be compiled...\r\n\r\nBut maybe @wenzeslaus has some more clear ideas about this...\r\n', 'comment_created': datetime.datetime(2021, 5, 30, 20, 43, 4, tzinfo=datetime.timezone.utc), 'commenter': 'ninsbl', 'type': 'User'}, {'comment_id': 642183951, 'comment_body': ""Just removing all the `cd`s, `mkdir`s and clone should be enough. Binder actually puts the repo content to what is the current directory when the Docker container starts. This makes it simply use always the current code whatever is the the current one, master branch in upstream, branch on a fork, ...\r\n\r\nYou can test that by going to Binder, the URL is (obtained by filling out mybinder.org):\r\n\r\n<https://mybinder.org/v2/gh/chaedri/grass/binder>\r\n\r\n@ninsbl I'm not sure what you are aiming at, but if I understand correctly, if you can do `git config --get remote.origin.url`, you probably have the repo clone already, so you don't need to do it at all."", 'comment_created': datetime.datetime(2021, 5, 31, 3, 8, 15, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 642186445, 'comment_body': 'As GitHub Changes view says, no new line at the end of file.', 'comment_created': datetime.datetime(2021, 5, 31, 3, 19, 18, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 642187884, 'comment_body': 'Move the pil and ply dependencies here from the apt file. Delete numpy there. Test if the packages are there, e.g., with (in the notebook):\r\n\r\n```\r\n!grass --tmp-location XY --exec python -c ""import matplotlib""\r\n```', 'comment_created': datetime.datetime(2021, 5, 31, 3, 25, 57, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 642342167, 'comment_body': '@wenzeslaus , thanks great, I was not aware of how this is handled in binder. I just saw the line that clones the official repo which whould not result in the behavior we discused. So, if compiling from current directory works, that is great and please disregard my suggestion of `git config`...', 'comment_created': datetime.datetime(2021, 5, 31, 9, 14, 30, tzinfo=datetime.timezone.utc), 'commenter': 'ninsbl', 'type': 'User'}, {'comment_id': 642610256, 'comment_body': ""When I try to move the pil and ply dependencies, I get an error when I try to build binder:\r\n\r\n'''\r\nERROR: Could not find a version that satisfies the requirement pil\r\nERROR: No matching distribution found for pil\r\n'''\r\n\r\nFrom my googling, it seems like PIL has to be installed first. Should it remain in the apt file?"", 'comment_created': datetime.datetime(2021, 5, 31, 17, 21, 54, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 642622639, 'comment_body': '```suggestion\r\nln -s $HOME/grass/bin.*/grass* $HOME/.local/bin/grass\r\n```', 'comment_created': datetime.datetime(2021, 5, 31, 18, 0, 44, tzinfo=datetime.timezone.utc), 'commenter': 'ninsbl', 'type': 'User'}, {'comment_id': 642653880, 'comment_body': ""What is in the apt file goes to system Python and is not available in the notebook or GRASS when I test in the notebook using the above (which is using conda in this default Binder setup). You can try to confirm it. If that holds, apt file is not useful for Python packages. And python and python-dev should not be there either (I'm not even sure how python-dev got there, maybe to compile numpy or something).\r\n\r\nWhat you import as pil, is installed with its proper name PIL. The requirements file goes to this repo: https://pypi.org/project/PIL/. So try PIL."", 'comment_created': datetime.datetime(2021, 5, 31, 19, 42, 20, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 642654511, 'comment_body': '@chaedri to test this use `!grass --version` in the notebook or `grass --version` in a shell you get in the JupyterLab.', 'comment_created': datetime.datetime(2021, 5, 31, 19, 44, 47, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 647929990, 'comment_body': 'The source code is directly in $HOME and the `bin...` directory resulting from the build is in the source code.\r\n\r\n```suggestion\r\nln -s $HOME/bin.*/grass* $HOME/.local/bin/grass\r\n```', 'comment_created': datetime.datetime(2021, 6, 9, 2, 59, 50, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 647930727, 'comment_body': 'The first `grass` part is still one dir extra here even in the suggestion.', 'comment_created': datetime.datetime(2021, 6, 9, 3, 2, 8, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}]","[{'commit_sha': '4b6db7dafe4d063a5c39c7ce7fa140c316e05d6d', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f041567b0266111fd53c3fccc08a0ef23f38c580', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f77e8554a5df77a7b7a0d672f03b0ddf5d2d7e0', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'acb88cc429aa12912da0b1eff696e8f28a135a19', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '271d50d9c1434c25ccbd7c0b99236822c5949f08', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '92e9cc91521f4de6c1f8103fb2ec29bdb6c9d9a3', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca0dbe91b145657ca996d8b3434df1f552c685ac', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '86cc233cf34e0e8e80b28fbe7ae022ee21a23c00', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b410973e50c9a3122d8ed6935d104a0a531b47cf', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '55e70b85bfa05d1cc8482c349a587ea79c2866b0', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1119c24f9fe0dc6834029e0de84f65d9dcce5c89', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}]",Caitlin Haedrich,69856275,,User,,31,,5,13
666049016,Binder button,"This pull request is for the binder/Jupyter Notebook button discussed in https://github.com/OSGeo/grass/pull/1603.

I wasn't quite sure where in the repository to put the button so I added it to the readme. Comments, discussion or a better location welcome.

The intention of having a binder and Jupyter Notebook is eventually demonstrate how to use GRASS and some of the Jupyter-specific functions. As part of the Google Summer of Code project ""Improved Integration of Jupyter and GRASS (https://trac.osgeo.org/grass/wiki/GSoC/2021/JupyterAndGRASS), I plan to improve the launch of GRASS in Jupyter and the display functions.",True,1628,https://api.github.com/repos/OSGeo/grass/pulls/1628,https://github.com/OSGeo/grass/pull/1628,closed,110,2,2,18,7,13,2,0,"[{'name': 'enhancement'}, {'name': 'gsoc'}]",2021-06-09 16:00:52+00:00,2021-06-15 01:05:42+00:00,464690.0,"5 days, 9:04:50","[{'comment_id': 648651680, 'comment_body': '```suggestion\r\nLaunch this repository in binder and experiment with PyGRASS in Jupyter Notebooks by clicking the button below:\r\n```', 'comment_created': datetime.datetime(2021, 6, 9, 20, 12, 20, tzinfo=datetime.timezone.utc), 'commenter': 'neteler', 'type': 'User'}, {'comment_id': 648824424, 'comment_body': 'You need to generate the badge for this repo, not your fork.', 'comment_created': datetime.datetime(2021, 6, 10, 3, 33, 24, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 649193851, 'comment_body': ""Oops! Yes, I'll fix the link.\r\n\r\nAs for PyGRASS, I meant the whole Python API (I was still figuring out the difference)."", 'comment_created': datetime.datetime(2021, 6, 10, 13, 41, 1, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 649590914, 'comment_body': 'Jupyter Notebook or full JupyterLab?', 'comment_created': datetime.datetime(2021, 6, 10, 23, 17, 35, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 650333854, 'comment_body': ""The correct URL is:\r\n\r\n```suggestion\r\n[![Binder](https://camo.githubusercontent.com/581c077bdbc6ca6899c86d0acc6145ae85e9d80e6f805a1071793dbe48917982/68747470733a2f2f6d7962696e6465722e6f72672f62616467655f6c6f676f2e737667)](https://mybinder.org/v2/gh/OSGeo/grass/master?urlpath=lab%2Ftree%2Fdoc%2Fnotebooks%2Fexample_notebook.ipynb)\r\n```\r\n\r\n...well, that's at least the JupyterLab and file path part. The HEAD versus master part (right after `grass/`) is not 100% clear to me as I don't see it in the documentation, but my understanding is that HEAD in this case is the tip of default branch, hence the same as master. It is, however, on master branch, so saying master is probably more expected."", 'comment_created': datetime.datetime(2021, 6, 12, 2, 33, 48, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 650334269, 'comment_body': 'Currently, there is no high-res logo in the source code, but you can try `../../man/grass_logo.png`.', 'comment_created': datetime.datetime(2021, 6, 12, 2, 38, 28, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 650335153, 'comment_body': 'You need to use the code from your GSoC evaluation period notebook. This does not work in Python 3.', 'comment_created': datetime.datetime(2021, 6, 12, 2, 48, 33, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 650562433, 'comment_body': 'Just limit the changes which are unrelated. Delete this line.', 'comment_created': datetime.datetime(2021, 6, 13, 18, 42, 7, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 650565147, 'comment_body': 'binder -> Binder: I think in text they use Binder rather than binder which is in logos.', 'comment_created': datetime.datetime(2021, 6, 13, 19, 8, 42, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 650880784, 'comment_body': '```suggestion\r\n    ""There are several ways to use GRASS GIS. When using Python in a notebook, we usually find GRASS GIS Python packages first, import them, initialize GRASS GIS session, and set several variables useful for using GRASS GIS in a notebook.""\r\n```', 'comment_created': datetime.datetime(2021, 6, 14, 11, 56, 12, tzinfo=datetime.timezone.utc), 'commenter': 'veroandreo', 'type': 'User'}, {'comment_id': 650881069, 'comment_body': '```suggestion\r\n    ""This is a quick introduction to *GRASS GIS* in a *Jupyter Notebook* using the *Python* scripting language.\\n"",\r\n```', 'comment_created': datetime.datetime(2021, 6, 14, 11, 56, 40, tzinfo=datetime.timezone.utc), 'commenter': 'veroandreo', 'type': 'User'}, {'comment_id': 650989054, 'comment_body': 'Thanks @veroandreo !', 'comment_created': datetime.datetime(2021, 6, 14, 14, 17, 36, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 651199543, 'comment_body': 'I think it would be good to delete the heading. The paragraph/sentence will become just second paragraph/sentence in the document and as a ""call to action"" it is quite fitting at the end of an intro section.', 'comment_created': datetime.datetime(2021, 6, 14, 18, 59, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}]","[{'commit_sha': '877c7d497683683c8e56607dd193b5e91cfe2dd0', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c9b8552387b7fcf8e21b4175a508eb1411e1766', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd105e03262c39a30d533db245e2eada04b2f0c21', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1450e8b2327ce45e1df6d3f79e34eebc9de24653', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7772668b192d2c123c1321aa4a66d85ab12f1278', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ed39df570ac40ee2d94830f89ed43eaed50bd94', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03ea53cb489a4122fa55b467e038b0dcf5727f3d', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aff404fcf717ab1e6a6e7cceb277377ad9af2c65', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5239778aa5d1a35e93158fdad88ba98e71179e93', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cff18c349c72763b461fd826a0b990a4c4451dd6', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '670aea1d00738b82e198171ab4be1c39edcce30c', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7dca737e9c0a3c526381a8632d4423810509f916', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e57d47d041e341a6fe2b867ca8e4ed0ea7dd4e9b', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68bd966ec94fc07f5f7750c88c1e36e3a2fabc99', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3a4843c3eacdff3dd4f37346f8b3d46f967fa84', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '996bcaf40176d02013e2571b03bf7ee24ea2ee88', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62709d90e64622d13b96bc0eec2ebb7a32f6aca7', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db1d48726971a703828a1c8f3983665cb743bb81', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}]",Caitlin Haedrich,69856275,,User,,31,,5,13
666052942,Session initiations functions for Jupyter Notebooks,"This PR contains several functions that simplify and shorten the launch of GRASS in Jupyter Notebooks, written as part of my Google Summer of Code project (https://trac.osgeo.org/grass/wiki/GSoC/2021/JupyterAndGRASS). It also contains a Jupyter Notebook (which launches in Binder) to demonstrate usage of the functions.",True,1629,https://api.github.com/repos/OSGeo/grass/pulls/1629,https://github.com/OSGeo/grass/pull/1629,closed,209,1,6,37,5,46,2,0,"[{'name': 'enhancement'}, {'name': 'gsoc'}]",2021-06-09 16:06:08+00:00,2021-06-17 02:21:16+00:00,641708.0,"7 days, 10:15:08","[{'comment_id': 648788143, 'comment_body': '`render_immediate` -> `driver`. `GRASS_RENDER_IMMEDIATE` documentation actually says that the values ""tells the display library which driver to use,"" i.e., it is the display driver name, hence `driver` as the variable name. (You should get to the documentation just by searching for ""GRASS environment variables""). I think the word immediate in the name comes from the fact that it also tells the commands to use the driver right away instead of going through GUI. In any case, this is exactly something we want to hide.', 'comment_created': datetime.datetime(2021, 6, 10, 1, 33, 37, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 648789809, 'comment_body': 'Hardcoding `""TRUE""` here is probably what we want now since that results in the new images being [on top of what is currently in the file](https://grass.osgeo.org/grass78/manuals/cairodriver.html), i.e., rendering of multiple layers.\r\n\r\nThese things will be more clear with the more advanced interface, so let\'s leave `GRASS_LEGEND_FILE` and maybe others for later.', 'comment_created': datetime.datetime(2021, 6, 10, 1, 39, 25, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 648790317, 'comment_body': 'You already went through this, so maybe no need to mention it, but just run Black on your code before pushing it to get the right formatting right away.', 'comment_created': datetime.datetime(2021, 6, 10, 1, 40, 52, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 648791364, 'comment_body': 'This should be a docstring. Overall, all these functions should have docstrings. You can run Pylint on your code. GRASS does not enforce it (unlike Black and Flake8), but Pylint will make sure you documented your functions. The docstrings are good for reviews too as they document the purpose of a function/class.', 'comment_created': datetime.datetime(2021, 6, 10, 1, 44, 17, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 648793013, 'comment_body': 'As an experiment, you can try to run `isort --profile black` too ([sorts your imports](https://pypi.org/project/isort/)). We should consider using it for the whole code base, so trying it for new files is a good idea.', 'comment_created': datetime.datetime(2021, 6, 10, 1, 49, 40, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 648797146, 'comment_body': 'I think the big advantage of having a dedicated `init` function here is to set also the default there, so that it is only one step (call) for the user. In other words, I think `use_notebook_defaults` should be called in `init`.', 'comment_created': datetime.datetime(2021, 6, 10, 2, 2, 34, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 648798191, 'comment_body': '`set_notebook_defaults()` might be a more fitting name. At least at this point, it is setting some variables here and there and I think it is also more clear from the user perspective.', 'comment_created': datetime.datetime(2021, 6, 10, 2, 6, 26, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 648819477, 'comment_body': ""Suggestions for a different name are welcome, but `init` is okay.\r\n\r\nAs of now, the GISBASE environmental variable needs to be defined before `import grass.script as gs`, so we don't need ask user to pass it here as we can just take it from the environment here and remove the `gisbase` parameter. This could be done in `grass.script.setup.init` too, but let's do it here now since we are sure what is our context here.\r\n\r\nI'm not sure what to do with the db/loc/mapset trio, we had discussions in the past about passing just path to mapset versus the three variables. This might be the occasion to try that in a prominent part of the API."", 'comment_created': datetime.datetime(2021, 6, 10, 3, 16, 5, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 650329806, 'comment_body': 'Should be needed. We are Python 3 only now for 8.0. At least Python 3.6.', 'comment_created': datetime.datetime(2021, 6, 12, 1, 50, 23, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 650330109, 'comment_body': ""Let's leave all here, but we need to revisit this if it even makes sense. ps may not be a good match for notebooks and html is obsolete HTML. Both work differently from cairo and png. It's really mostly cairo and png as fallback if something is wrong."", 'comment_created': datetime.datetime(2021, 6, 12, 1, 53, 27, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 650330789, 'comment_body': '`grassdata_filepath` is too long and `filepath` part is not great. You can try:\r\n\r\n```\r\ninit(path, location=None, mapse=None):\r\n```\r\n\r\n`path` will be path to mapset or path to database if location and mapset were provided. To follow the new v8 GUI behavior of using PERMANENT mapset automatically, you could even allow providing only `path` and `location`, but not mapset and also if only `path` is provided and points to an existing location (`grass.grassdb` is your friend), assume mapset=PERMANENT.', 'comment_created': datetime.datetime(2021, 6, 12, 2, 0, 51, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 650331110, 'comment_body': 'To make the grass.jupyter subpackage really work, you will need to add it to makefiles, see the `Makefile` file in `grass/app` or `grass/grassdb` and also add the name to `Makefile` in the parent directory. It should be just copy-pasting, no real Makefile writing is needed, but let me know.', 'comment_created': datetime.datetime(2021, 6, 12, 2, 4, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 650331257, 'comment_body': ""You can manually edit the file to revert this change. Something like `git checkout master -- doc/notebooks/example_notebook.ipynb` should bring the old state too if you want to go the Git way, but commit all your changes before, I'm wring the command without checking it."", 'comment_created': datetime.datetime(2021, 6, 12, 2, 5, 59, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 650331665, 'comment_body': ""I have seen issues before with conda specifying its complex kernel name and then the notebook failing elsewhere because the very specific kernel is not available. I'm not sure if it is the case here or not, but we have to check this time to time and will need to modify these by hand if needed. Jupyter Notebooks are unfortunately not as great with Git as one would wish."", 'comment_created': datetime.datetime(2021, 6, 12, 2, 10, 3, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 650331926, 'comment_body': 'The name can be just `jupyter_integration` or `jupyter` or some other simple name.', 'comment_created': datetime.datetime(2021, 6, 12, 2, 13, 3, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 650332271, 'comment_body': 'Delete this file and then if you feel like you can manage some more Git today, find the `.gitignore` in the source code root directory and add `.ipynb_checkpoints` directory there.', 'comment_created': datetime.datetime(2021, 6, 12, 2, 16, 6, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 650535768, 'comment_body': 'I\'m not quite sure what this would look like (or that I understand correctly). Maybe like this:\r\n`def init(path, location=None):\r\n.\r\n.\r\n.\r\ngsetup.init(os.environ[""GISBASE""], path, location, mapset=""PERMANENT"")`\r\n\r\nIs that close to what you were thinking? If location is None, I think this would cause an error?', 'comment_created': datetime.datetime(2021, 6, 13, 14, 39, 20, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 650536574, 'comment_body': ""I think I just need to delete this file completely since I'm working on it in the binder-button PR."", 'comment_created': datetime.datetime(2021, 6, 13, 14, 45, 46, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 650562733, 'comment_body': 'Unnecessary change plus it ends an empty line to the end of the file (there is already a line ending at the end of the file, so you are adding a second one).', 'comment_created': datetime.datetime(2021, 6, 13, 18, 44, 40, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 650563537, 'comment_body': 'Making it same as on the master branch is what ""removes"" it from the PR. Deleting in PR is really deleting.', 'comment_created': datetime.datetime(2021, 6, 13, 18, 51, 58, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 650563942, 'comment_body': ""Let's just leave this for another PR, so that you get the basic things working quickly and can use them. It's not just about setting some combination of defaults, but rather about running series of checks to figure out what the user meant."", 'comment_created': datetime.datetime(2021, 6, 13, 18, 55, 57, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 651182828, 'comment_body': 'When this file got here? Delete it.', 'comment_created': datetime.datetime(2021, 6, 14, 18, 33, 18, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 651183996, 'comment_body': 'You really need to do the `git checkout` command to get the original version of this file or copy-paste the content from the _File changes_ here and place it to the empty file. Committing an empty file says I want this file to be empty.', 'comment_created': datetime.datetime(2021, 6, 14, 18, 35, 2, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 651185747, 'comment_body': 'If you are not going to handle the more fancy parameters here, delete the default values. Both location and mapset are mandatory form grass.script.setup.init, so they need to be mandatory here to when you are just passing them through. The name `path` can stay as is. It makes sense even in this context.', 'comment_created': datetime.datetime(2021, 6, 14, 18, 37, 43, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 651188547, 'comment_body': ""Let's rename this file to `setup`. `funcs` that's kind of clear as usually it is functions or functionality. `init.py` as file name would be little confusing in Python due to `__init__.py` file. Two words are fine especially for internal modules, but I don't have a better idea now, `setup` is okay, already used for the `init` function you are wrapping, so let's go with that."", 'comment_created': datetime.datetime(2021, 6, 14, 18, 41, 53, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 651191546, 'comment_body': 'The red in the `+` line marks the error in the JSON syntax which is what is causing the following message when you open the notebook:\r\n\r\n```\r\nFile Load Error for jupyter_integration.ipynb\r\nUnreadable Notebook: /home/jovyan/doc/notebooks/jupyter_integration.ipynb NotJSONError(\'Notebook does not appear to be JSON: \\\'{\\\\n ""cells"": [\\\\n {\\\\n ""cell_type"": ""m...\')\r\n```\r\n\r\nThe fix is putting back the `\\` for the double quote after `grassdata` which should cause the red-marked `\\` to be interpreted correctly.', 'comment_created': datetime.datetime(2021, 6, 14, 18, 46, 39, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 651380230, 'comment_body': ""When I change the name to setup.funcs.py, I get an error in the Jupyter Notebook:\r\n\r\n```\r\nModuleNotFoundError                       Traceback (most recent call last)\r\n<ipython-input-3-9dda28f7b25c> in <module>\r\n      1 import grass.script as gs\r\n----> 2 import grass.jupyter as gj\r\n\r\n~/dist.x86_64-pc-linux-gnu/etc/python/grass/jupyter/__init__.py in <module>\r\n      1 from __future__ import absolute_import\r\n      2 \r\n----> 3 from .setup.funcs import *\r\n\r\nModuleNotFoundError: No module named 'grass.jupyter.setup'\r\n```\r\n\r\nIs there a better/correct way to call setup.funcs that doesn't result in this error? Or should be named something different?\r\n\r\n"", 'comment_created': datetime.datetime(2021, 6, 15, 1, 23, 32, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 651383271, 'comment_body': ""I don't see anything expect the last character (last two actually), but there must be something different. Maybe the line endings. Try to get the original file from Git:\r\n\r\n```\r\ngit checkout upstream/master -- .../the/file/path/file/name.py\r\n```\r\n\r\nSome other things than upstream/master may work too. Ideally, _without_ updating to latest master branch first."", 'comment_created': datetime.datetime(2021, 6, 15, 1, 33, 11, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 651384922, 'comment_body': ""The whole second sentence can be deleted. Not really relevant for the user. Next programmer will hopefully be able to find that page without specific link. The link itself is adding complexity, it contains `78`, so it needs to be changed for every minor version - in fact it is not matching this version. Alternative would be to link `variables.html` in the source code, but I don't think that's needed in the first place."", 'comment_created': datetime.datetime(2021, 6, 15, 1, 38, 46, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 651387405, 'comment_body': ""Run Pylint, so it tells you you should put a docstring here describing what is in this file (one sentence, it may appear in online documentation, aimed at users of the functions in the file).\r\n\r\nAlso at the very begging, please add file header with license:\r\n\r\nhttps://trac.osgeo.org/grass/wiki/Submitting/Python\r\nhttps://trac.osgeo.org/grass/wiki/Submitting/C\r\n\r\nI'm little torn between using `#` comments and a docsting for that statement, but given that the docsting is meant for user documentation, `#` comments seem more appropriate for the header information which is aiming at maintainers/authors."", 'comment_created': datetime.datetime(2021, 6, 15, 1, 46, 35, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 651389498, 'comment_body': 'This might be a good place to mention that it will be overwriting the existing maps of the same name, i.e., as it happens with Python variables - ideally in some way which is 1) not confusing Python users and 2) still warns GRASS users that the default is different than what GRASS usually does. ... or you can put a `# TODO:` comment above the function to get to this later.', 'comment_created': datetime.datetime(2021, 6, 15, 1, 52, 33, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 651405869, 'comment_body': 'Try to parse my comment again and stop the first sentence right with the first period-space :-)', 'comment_created': datetime.datetime(2021, 6, 15, 2, 40, 36, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 651688378, 'comment_body': 'Oh my gosh - I see it now. Thank you.', 'comment_created': datetime.datetime(2021, 6, 15, 11, 13, 6, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 651695772, 'comment_body': ""I wrote a short sentence to that effect. I'm not sure if it's the clearest - I can put a `#TODO:` comment to clarify later too?"", 'comment_created': datetime.datetime(2021, 6, 15, 11, 24, 34, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 651739484, 'comment_body': 'Good enough for now.', 'comment_created': datetime.datetime(2021, 6, 15, 12, 27, 11, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 652281026, 'comment_body': 'I meant to say: not needed! Search for `from __future__ import absolute_import` e.g., https://portingguide.readthedocs.io/en/latest/imports.html#absolute-imports', 'comment_created': datetime.datetime(2021, 6, 16, 1, 30, 17, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 652282626, 'comment_body': ""Let's follow the policy of having un-computed notebooks in this repo. The point is that you can compute them easily, right? They are different from the standard documentation (where we have images) and from the notebooks linked from the website which should really look as nice as possible, so they include images."", 'comment_created': datetime.datetime(2021, 6, 16, 1, 35, 23, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 652284058, 'comment_body': 'I don\'t think `font=""romans""` does what you expect. It uses the default font in GRASS display drivers which is not high quality. Perhaps `font=""serif""` would give a good result. However, `grass.jupyter` is about reasonable defaults, so why to set anything at all in this basic example and not go with `gj.display_settings()`? This API and example will change, but this comment applies to the new API as well.', 'comment_created': datetime.datetime(2021, 6, 16, 1, 40, 18, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 652284599, 'comment_body': 'Given my comment for the line below, this would be _Set default display settings_.', 'comment_created': datetime.datetime(2021, 6, 16, 1, 41, 57, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 652284956, 'comment_body': 'I like this. `help(gj.init)` is perhaps more elegant. You can also consider more Jupyter-ish `gj.init?`.', 'comment_created': datetime.datetime(2021, 6, 16, 1, 42, 59, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 652729022, 'comment_body': 'No comment needed here anymore after the last change.', 'comment_created': datetime.datetime(2021, 6, 16, 14, 10, 40, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 652731898, 'comment_body': 'Since you are doing changes anyway, what about changing all single quotes in the notebook to double quotes to follow Black? Looks much worse in the raw JSON, but it will be better when viewing notebook. No need to wonder if there is a difference or what is the style used.', 'comment_created': datetime.datetime(2021, 6, 16, 14, 13, 43, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 652733345, 'comment_body': ""This still needs to be removed. We don't keep Python 2 compatibility anymore."", 'comment_created': datetime.datetime(2021, 6, 16, 14, 15, 12, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 652889982, 'comment_body': 'Use double quotes, not single quotes.', 'comment_created': datetime.datetime(2021, 6, 16, 17, 14, 18, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 652983336, 'comment_body': ""I'm not sure how to handle those in the future, but right now, the best practice seem to keep here something simple without the conda complexities (if for no other reason, it is meant to be used also without conda), so revert this piece."", 'comment_created': datetime.datetime(2021, 6, 16, 19, 27, 29, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 652983530, 'comment_body': 'As above, revert this part.', 'comment_created': datetime.datetime(2021, 6, 16, 19, 27, 49, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}]","[{'commit_sha': '12f046ced6972a0224f05dc709c85b4ccfce568d', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '846e08371fd21267d0e3b113bb864287f032ece7', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '30da6ae5acae96ee5b09412934538366c651845e', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53afcbba8c703bfbc1cdeb85fba00d976df8e05c', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ec18408064efa947346d5b8c1e5ae638df79aee', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0cc7db7a9f2db874b454316730b5f125e656a73', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd68d01e9c5afa9f6e95e47f538605f0c82a66f64', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '785f55fd6763fa4c53e4f553a4850857be37c779', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '413b22a52c6d11bc57ef2bdbd8083d78ce11be4d', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db8523ebefb2b039938ec73b2a683d28448c6454', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66721218846d81c7d8865c9517f6a9807b8fb8e0', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10e25efc503806414cef6c236f2385179ea54193', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '426f7a466e562d759b07b8a57739708143882eae', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ea9eea7dfbf675b8e0c0f8080fd6a5cfcfeae44', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc7b9d7dd23776e47ce2865a6ab42ad95ebd78d0', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d21a9f9821702c0f69535ad37dd0527022f4c40', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1768397106d1fd942da3018dff52ed284b32842e', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ba23e79a676c7c4be46e6b4007e12cca9473b83', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a5efa1107e6e60372322332fea81e1cdd03cd76', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '334136283a909e580e7eaca38c675ded4ccffbbe', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cdd69acad7510eba88884ed2c13960c231cefccb', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff6314f4e8c5f546fa71ec25c32914855ac91530', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ce0388a49dec964bf2522c98b93f5fb14fb041f', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b4ce3179b39d4a9282940cfcca9b8a1f32452d1b', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '867c6df7e60a63fedfc21c397f4723ae13739506', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9175db6901fb30caa786abcdb7afd255b2e37eb', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a618f62930ed1cc3fec841bb28e238b13794a0c2', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '43586d00f43410808bf2a134c63d6ab7b4ff2a5f', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e5b49d411a714083229925045070cf751a4dec6', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b898d0dfb6c6927da90d77b99e836407d307342', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a7a65ec3ea2d6e8fe07abfd1448b6b373e9380f', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c7006e07bc197f773df609091ce0ed443f2e406', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f58dce19caf319420d775be6a26154bd341a9978', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c914aeafd619a9f9b45a5145699f4ec56d06665', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7b8f15f02960076fa547828b5204956b634577e', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '77710d4f18a4248cd900150a5d224362d67e8ebc', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea98a69779b2dd8367ff75519a182c922d38e565', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}]",Caitlin Haedrich,69856275,,User,,31,,5,13
678420122,Added additional GRASS info to example_notebook,"This PR contains a few changes proposed in #1668 that I think would be better placed here. I'm working on the example notebook and other Jupyter Notebooks as part of the Google Summer of Code project, [Improved Integration of GRASS GIS and Jupyter Notebooks[(https://trac.osgeo.org/grass/wiki/GSoC/2021/JupyterAndGRASS).

You can see and test this updated notebook here:
https://mybinder.org/v2/gh/chaedri/grass/example_notebook_update?urlpath=lab%2Ftree%2Fdoc%2Fnotebooks%2Fexample_notebook.ipynb",True,1686,https://api.github.com/repos/OSGeo/grass/pulls/1686,https://github.com/OSGeo/grass/pull/1686,closed,74,27,1,1,0,0,2,0,"[{'name': 'enhancement'}, {'name': 'gsoc'}]",2021-06-26 22:12:26+00:00,2021-06-28 18:58:12+00:00,161146.0,"1 day, 20:45:46",[],"[{'commit_sha': '5308779c08faba251d1d2fd060c5dd90d362d0e9', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}]",Caitlin Haedrich,69856275,,User,,31,,5,13
674126685,Jupyter: Non-interactive display,"This is a set of functions to display non-interactive maps in Jupyter Notebooks, as proposed in the Google Summer of Code project, [Improved Integration of GRASS and Jupyter Notebooks](https://trac.osgeo.org/grass/wiki/GSoC/2021/JupyterAndGRASS). The goal of these functions is to make the display of GRASS maps more intuitive in Jupyter Notebooks. You can test the functionality by launching the repository in Binder here:

https://mybinder.org/v2/gh/chaedri/grass/non-interactive-display?urlpath=lab%2Ftree%2Fdoc%2Fnotebooks%2Fjupyter_integration.ipynb",True,1668,https://api.github.com/repos/OSGeo/grass/pulls/1668,https://github.com/OSGeo/grass/pull/1668,closed,139,41,5,22,1,51,2,0,"[{'name': 'enhancement'}, {'name': 'gsoc'}]",2021-06-21 00:35:34+00:00,2021-07-02 18:25:31+00:00,1014597.0,"11 days, 17:49:57","[{'comment_id': 655064892, 'comment_body': 'Probably won\'t be part of this PR at the end and not a big deal in Binder, but in general, this will need to be a lazy import, only in the function which needs it unless you make the ""interactive"" part a separate module and class which may or may not happen in the future. As in the case of `from IPython.display import Image`.', 'comment_created': datetime.datetime(2021, 6, 21, 4, 23, 6, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 655065737, 'comment_body': 'Classes should be CamelCase, just run Pylint to get all these complaints sooner :-)', 'comment_created': datetime.datetime(2021, 6, 21, 4, 26, 35, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 655066221, 'comment_body': 'This is a common style for these short docstrings:\r\n\r\n```suggestion\r\n        """"""Adds a vector to the display""""""\r\n```', 'comment_created': datetime.datetime(2021, 6, 21, 4, 28, 28, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 655066982, 'comment_body': 'Only the last line seems to really ""counts"" here, so you need decide or do two different ones. I would say only one is needed or push the second one later in the nb.', 'comment_created': datetime.datetime(2021, 6, 21, 4, 31, 10, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 655067526, 'comment_body': 'I would like to see the map first and the list only later, but that might be just me.', 'comment_created': datetime.datetime(2021, 6, 21, 4, 33, 23, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 655068464, 'comment_body': 'Add env parameter and when set, use it instead of os.environ and also pass it to the other commands.', 'comment_created': datetime.datetime(2021, 6, 21, 4, 37, 11, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 655068769, 'comment_body': 'The defaults are probably better left to d.vect itself unless we have good reasons to have them here (different values, need for documenting them right here).', 'comment_created': datetime.datetime(2021, 6, 21, 4, 38, 22, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 655069225, 'comment_body': ""Since this actually modified the raster, this may not be what is expected from the display function. Unfortunately, it also means that you need to do it ahead of time and can't set it here. I'm interested what everybody thinks about this."", 'comment_created': datetime.datetime(2021, 6, 21, 4, 40, 9, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 655368060, 'comment_body': 'I tested the notebook, looks nice ;)\r\nIndeed, it seems odd to me to be forced to set a color when d.* modules should just read the defined color table or use the default, setting a color should be optional IMHO', 'comment_created': datetime.datetime(2021, 6, 21, 13, 18, 11, tzinfo=datetime.timezone.utc), 'commenter': 'veroandreo', 'type': 'User'}, {'comment_id': 656482379, 'comment_body': ""> I had it the other way because, if you weren't familiar with the spm dataset, seeing the contents would be a pre-requisite to knowing how to modify/play with the code below."", 'comment_created': datetime.datetime(2021, 6, 22, 18, 31, 52, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 656554339, 'comment_body': ""Right, but I would say it is not a prerequisite to run the code. You can then executed the next cell to see what else is in the dataset and then go back and play. The other consideration is showing images versus text first. What do you want to see? This of course depends on the target audience and purpose of the notebook which I'm not sure if we decided. Promotion of the Jupyter integration is probably a good goal at this point for this notebook."", 'comment_created': datetime.datetime(2021, 6, 22, 20, 26, 14, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 656555199, 'comment_body': 'GrassRenderer and ideally one line including the triple quotes.', 'comment_created': datetime.datetime(2021, 6, 22, 20, 27, 38, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 656556060, 'comment_body': 'Also, if you just use `**kwargs`, you right away support all what d.vect supports.', 'comment_created': datetime.datetime(2021, 6, 22, 20, 28, 59, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 656556467, 'comment_body': 'Usually PNG I think.', 'comment_created': datetime.datetime(2021, 6, 22, 20, 29, 38, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 656566936, 'comment_body': ""Please not the reason for lazy import: We don't want Jupyter to be an import-time dependency. "", 'comment_created': datetime.datetime(2021, 6, 22, 20, 46, 12, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 656610951, 'comment_body': 'Should be sufficient to use either p or g flag.', 'comment_created': datetime.datetime(2021, 6, 22, 21, 59, 20, tzinfo=datetime.timezone.utc), 'commenter': 'ninsbl', 'type': 'User'}, {'comment_id': 656613166, 'comment_body': 'Would `spm_map.raster` be for new users more intuitive than `spm_map.d_rast` (or `spm_map.vector` instead of `spm_map.d_vect`)...?', 'comment_created': datetime.datetime(2021, 6, 22, 22, 3, 55, tzinfo=datetime.timezone.utc), 'commenter': 'ninsbl', 'type': 'User'}, {'comment_id': 656614541, 'comment_body': 'Agreed with Vero here...', 'comment_created': datetime.datetime(2021, 6, 22, 22, 6, 58, tzinfo=datetime.timezone.utc), 'commenter': 'ninsbl', 'type': 'User'}, {'comment_id': 656615573, 'comment_body': 'For listing of data also:\r\nhttps://grass.osgeo.org/grass79/manuals/libpython/script.html?highlight=list#script.core.list_strings\r\ncould be used...', 'comment_created': datetime.datetime(2021, 6, 22, 22, 9, 10, tzinfo=datetime.timezone.utc), 'commenter': 'ninsbl', 'type': 'User'}, {'comment_id': 656643455, 'comment_body': ""That's true, the list takes up a lot of space and maybe the more likely workflow is to run the whole notebook then go back and modify. I'm convinced - I'll switch it. \r\n\r\n@ninsbl That's a cool function! I'll try it out."", 'comment_created': datetime.datetime(2021, 6, 22, 23, 16, 1, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 656646051, 'comment_body': ""I'm not 100% sure what this would look like. Is this what you're thinking?\r\n\r\n`def __init__(self, env=None, ... ):`\r\n\r\nWhat would go in the function then? I imagine and if-else statement?"", 'comment_created': datetime.datetime(2021, 6, 22, 23, 22, 53, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 656646993, 'comment_body': ""This is a great question. I think it would be easier for new users but it also goes against the GRASS convention and might be less intuitive for experienced GRASS users... I'd be curious to hear what others think. I can write it either way."", 'comment_created': datetime.datetime(2021, 6, 22, 23, 25, 30, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 656687583, 'comment_body': ""Exactly. If not env then os.environ. Look to grass.script for more examples, but here, it's just that."", 'comment_created': datetime.datetime(2021, 6, 23, 1, 12, 18, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 656690254, 'comment_body': 'In my previous comment, I was thinking about storing (the reference to) it as `self._env`. However, to make this work in parallel (so that two of these things can run in parallel) we need to store a copy. See:\r\n\r\nhttps://github.com/ncsu-geoforall-lab/gis714-2021-tangible-landscape/blob/main/website/render_activities.py#L49', 'comment_created': datetime.datetime(2021, 6, 23, 1, 20, 45, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 656691532, 'comment_body': 'With run_command, nothing is printed (as expected), so the `-p` is useless. Either -g and parse_command or nothing. I think nothing is fine here. For reading region to Python we have a better function anyway (`region`).', 'comment_created': datetime.datetime(2021, 6, 23, 1, 23, 45, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 656692728, 'comment_body': 'Just add that with the rest of folium support.', 'comment_created': datetime.datetime(2021, 6, 23, 1, 26, 53, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 656693385, 'comment_body': 'There is no reason to keep display_settings function around. Instance of GrassRenderer should be sufficient. Delete it and move things here as in:\r\n\r\nhttps://github.com/ncsu-geoforall-lab/gis714-2021-tangible-landscape/blob/main/website/render_activities.py#L47', 'comment_created': datetime.datetime(2021, 6, 23, 1, 28, 51, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 656695210, 'comment_body': 'At least make the filename for the image modifiable as in \r\n\r\nhttps://github.com/ncsu-geoforall-lab/gis714-2021-tangible-landscape/blob/main/website/render_activities.py#L50\r\n\r\nUsing `""map.png""` when not provided is fine for now, but eventually (i.e., in a subsequent PR), the automatic option should be probably some temporary file somewhere.', 'comment_created': datetime.datetime(2021, 6, 23, 1, 34, 35, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 656703480, 'comment_body': 'I also think this is a great question. Even the name `GrassRenderer` is not necessary set. `spm_map` was little strange at first, but I think it is actually okay.\r\n\r\nIn a [GrassRenderer](https://github.com/ncsu-geoforall-lab/gis714-2021-tangible-landscape/blob/main/website/render_activities.py#L41) class I wrote for a different purpose, I had only a `run` method which just executed whatever command (like `run_command` does) since I wanted to pass any `d.*` commands which I was reading and [running programmatically](https://github.com/ncsu-geoforall-lab/gis714-2021-tangible-landscape/blob/main/website/render_activities.py#L233). I guess you could try to enforce that the command name must start with `d` so that it is not misused, but I\'m not convinced it is needed.\r\n\r\n`d_rast`, `d_vect` is a sure middle ground, but it requires either all modules to be mirrored or implementing the ""resolve a missing attribute"" magic as in PyGRASS module shortcuts to support all commands. It would be harder to implement what I did above using just this because you need to translate what you are reading to function calls, but it is doable in Python and perhaps a fringe use case in Jupyter.\r\n\r\n`vector`, `raster` may work well as a hand-picked subset in addition to a more general interface or if you conceptualize the whole thing as a ""display"" (`display = GrassDisplay()`) where d.vect translates to `display.vector()`. Yet another approach is to have these as a common API with the folium-based renderer in parallel with the `d_vect` style.', 'comment_created': datetime.datetime(2021, 6, 23, 1, 59, 43, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 656707275, 'comment_body': 'Perhaps the issue is not as much ""being forced to set a color"" (defaults can be changed) as that the expectation is that you set the color at this point. And perhaps that the reason @chaedri wrote it initially this way. Like for vectors. Not Jupyter specific, but it is more visible here.\r\n\r\nI have never tried that, but even with the current system, you could implement ad-hoc/temporary color tables for rasters, I think. You create a temporary mapset, set color table for raster of interest there (raster color tables are per-mapset), display  the raster from that mapset, so the mapset-specific color table kicks in. I\'m not suggesting @chaedri should do this :-)', 'comment_created': datetime.datetime(2021, 6, 23, 2, 9, 52, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 656723576, 'comment_body': 'Typo: I meant ""note"" the reason. But I\'m fine with Jupyter as an import-time dependency in grass.jupyter. Makes sense.', 'comment_created': datetime.datetime(2021, 6, 23, 3, 0, 55, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 656994540, 'comment_body': 'In the introduction it is probably worth mentioning where to find more information on what one can do with GRASS GIS APIs, like:\r\n* Manuals in general: https://grass.osgeo.org/grass-stable/manuals/\r\n* Python API: https://grass.osgeo.org/grass-stable/manuals/libpython/\r\n* Module manuals: https://grass.osgeo.org/grass-stable/manuals/full_index.html (or https://grass.osgeo.org/grass78/manuals/graphical_index.html)\r\n\r\nIn addition to listing data, also modules could be listed (at the end):\r\n`print(gs.read_command(""g.search.modules"", flags=g""))`', 'comment_created': datetime.datetime(2021, 6, 23, 11, 13, 22, tzinfo=datetime.timezone.utc), 'commenter': 'ninsbl', 'type': 'User'}, {'comment_id': 657924221, 'comment_body': 'What about module shortcuts here?\r\nhttps://grass.osgeo.org/grass79/manuals/libpython/pygrass.modules.html?highlight=shortcut#module-pygrass.modules.shortcuts\r\n\r\nIf there is value in making the API as much as possible compatibel with e.g. `folium` that should probably go into consideration for the non-interactive API as well?\r\n\r\nI have to admitt that I am not familiar with folium. But for passing vector data to folium, that we discussed earlier, [viter](https://grass.osgeo.org/grass78/manuals/libpython/pygrass.vector.html?highlight=viter#pygrass.vector.VectorTopo.viter) from pygrass maybe an option too? There you could request only geometries within the map window of folium with the [find]() method. ', 'comment_created': datetime.datetime(2021, 6, 24, 12, 59, 37, tzinfo=datetime.timezone.utc), 'commenter': 'ninsbl', 'type': 'User'}, {'comment_id': 659229751, 'comment_body': ""@ninsbl I was thinking this might be better placed in the example notebook, since this one is more focused in Jupyter-GRASS integration. So, I made a new PR with those changes here: https://github.com/OSGeo/grass/pull/1686\r\n\r\nYou can also see the changes in binder here:\r\nhttps://mybinder.org/v2/gh/chaedri/grass/example_notebook_update?urlpath=lab%2Ftree%2Fdoc%2Fnotebooks%2Fexample_notebook.ipynb\r\n\r\nI'm undecided on whether listing all the modules is helpful - perhaps since the manual link is there, the list is unnecessary?"", 'comment_created': datetime.datetime(2021, 6, 26, 22, 14, 42, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 659248433, 'comment_body': 'Although `{}` is a possible user-provided dictionary distinct from the default None, practically `{}` is still ""nothing"" because this is not an arbitrary dictionary, it is the environment dictionary and that cannot be completely empty (there must be some variables in the environment for the sub-processes to work). So, I think simply testing `if env` or `if not env` is enough. See e.g. [grass/script/vector.py:378](https://github.com/OSGeo/grass/blob/master/python/grass/script/vector.py#L378) (you can see it is at least okayish practice since, when you do _Blame_, it is from a recent commit dbeb5f36cb320aba1bb22a8384d10524f568728f).\r\n\r\n', 'comment_created': datetime.datetime(2021, 6, 27, 1, 54, 17, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 659248725, 'comment_body': 'This is a tricky decision, but since we may want more than one of these GrassRenderers (instances or even similar classes like the interactive one), we should not modify the global environment, but only the copy, so `copy()` needs to come first as in:\r\n\r\nhttps://github.com/ncsu-geoforall-lab/gis714-2021-tangible-landscape/blob/main/website/render_activities.py#L50\r\n\r\n(The tricky part is that we are trying to guess the possible use cases and make the implementation robust.)', 'comment_created': datetime.datetime(2021, 6, 27, 1, 57, 42, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 659249172, 'comment_body': 'env is unused except for the if statement. `self._env = env`?', 'comment_created': datetime.datetime(2021, 6, 27, 2, 4, 8, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 659249257, 'comment_body': 'Code duplication and missing variables.', 'comment_created': datetime.datetime(2021, 6, 27, 2, 5, 4, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 659249427, 'comment_body': 'You need to pass the environment as in:\r\n\r\nhttps://github.com/ncsu-geoforall-lab/gis714-2021-tangible-landscape/blob/main/activities/activity_haedrich.py#L33', 'comment_created': datetime.datetime(2021, 6, 27, 2, 7, 57, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 659249487, 'comment_body': 'Now you added filename as a parameter, so you should reflect that here.', 'comment_created': datetime.datetime(2021, 6, 27, 2, 8, 31, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 659254886, 'comment_body': 'Yep, module shortcuts is what I meant by the ""resolve a missing attribute"" magic.\r\n\r\nI suggest to:\r\n\r\n1. Add `run(name, **kwargs)` now to:\r\n    a. Support any command right away.\r\n    b. Have a single place where the actual subprocess call is handled (i.e., use this method from the other methods).\r\n2. Go with `d_rast` and `d_vect` or `raster` and `vector` (whatever seems better to you @chaedri) in this PR to have a nice interface.\r\n3. Later, in another PR, adding more (all) `d_vect`-like methods later either explicitly defined, dynamically generated (`self.d_vect = some_locally_defined_function`), or through custom, simpler version of module shortcuts. I\'m saying `d_vect`-like in a broad sense: they could be done like `display.vect` similarly to what I mentioned above. However, I think closer to module names, i.e., `d_vect` makes more sense here as it will clearly translate to all display module names.\r\n4. Leave the compatibility with interactive display for later (again another PR) when the interactive display is somewhat finished. I think switching between displays just by changing the class name but not the rest of your code would be nice.\r\n', 'comment_created': datetime.datetime(2021, 6, 27, 3, 20, 6, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 660731546, 'comment_body': 'Pylint may give you this complaint too: the second condition is negation of the first one which is in this context best expressed as `else:`.', 'comment_created': datetime.datetime(2021, 6, 29, 15, 28, 37, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 660733358, 'comment_body': 'Let\'s get ahead of the game and support `Path` here by converting this to `str` as we do with the numbers. This is how it behaves:\r\n\r\n```\r\n> str(Path(""/home""))\r\n\'/home\'\r\n```', 'comment_created': datetime.datetime(2021, 6, 29, 15, 30, 37, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 660733906, 'comment_body': 'Use `self.run()` here too.', 'comment_created': datetime.datetime(2021, 6, 29, 15, 31, 12, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 660735228, 'comment_body': 'See ""raising exceptions"" and ""reporting errors in Python"".', 'comment_created': datetime.datetime(2021, 6, 29, 15, 32, 46, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 660736963, 'comment_body': 'Make a copy here too. Easier to document. More predictable for the user. It also makes the environment private, so more control in the implementation.', 'comment_created': datetime.datetime(2021, 6, 29, 15, 34, 40, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 660767915, 'comment_body': 'So, the line would read: `self._env[""GRASS_RENDER_FILE""] = str(Path(filename))` ?', 'comment_created': datetime.datetime(2021, 6, 29, 16, 11, 9, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 660809229, 'comment_body': 'No, no need to construct Path. The point is to handle the case when user passes filename as an Path object. Try the behavior in an interactive console. The point is to handle these two or three cases:\r\n\r\n```python\r\nfile = Path(""/base/dir"") / more_dirs / added_here\r\nrenderer1 = GrassRenderer(filename=file)\r\nrenderer2 = GrassRenderer(filename=""map2.png"")\r\nrenderer3 = GrassRenderer(filename=os.path.join(""base/dir"", ""map2.png""))\r\n```', 'comment_created': datetime.datetime(2021, 6, 29, 17, 8, 11, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 660811929, 'comment_body': 'See what is the most fitting exception type for this problem, probably some value or attribute error whatever is the actual name.', 'comment_created': datetime.datetime(2021, 6, 29, 17, 12, 2, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 660889316, 'comment_body': 'I couldn\'t get any of those to produce an error. But, I think I understand: line 38 should read `self._env[""GRASS_RENDER_FILE""] = str(filename)`.', 'comment_created': datetime.datetime(2021, 6, 29, 19, 3, 55, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 661103080, 'comment_body': 'Right, no error, there is just no point in making the filename a Path object if it is not (well, at least for this line, we need Path later). ', 'comment_created': datetime.datetime(2021, 6, 30, 3, 27, 32, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}]","[{'commit_sha': '154676c470db24471ab5d7ff5b347c16c674ce47', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '33c713e7438eaf70684c4106e85872b26c573797', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '04258ae3cf2a6cfc029dfc659639714e0a577f1a', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dab9fe06ed37008a1055ee8a1341294bc937dc38', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51fd0be950caaaacdffd8ecff7b8a81459f45585', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87711cf1c562ddcd0d6bc5b8d5cc7db4b0ad545e', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd63dd4d73153005fc871f3ae8165f16861c13192', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc1955c73454c2adab4dabe3922f00d3c2c323d2', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '35cacc933f4c793d1fe130e6fbaa0f73485cf069', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48073f08aec1ac7b40131f28c09d2183ee56b8b9', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56e17c5c5c54a23e28bef72d808b4bf1022d98fb', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34eecf14cddc2ddf0293361d0387688720656b6e', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12494090e61d278085ee76a807d4bddf2119bc55', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d3a15b26cc34ae51fc6256e57c0287b4cdaa65e', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0dba5556590564892cdc14e41b927fbdcd03085e', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cabc32cfff12cb8d003947053d45bf375cfe19d3', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '23d5a3167414cf6c4a5318693469670df372764d', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '27f97fe88854d8cc62531df6f726df1ffc5f8387', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f0aec989e0ccb7b4d54a33e41c2b8afb039673f7', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49167a443588fd98094dcff33e65abf80d3517a0', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '555f918ad03e122178828c744ad064cc53387783', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf68943ac8a81041be3dbc4ecf4f33c37401aecf', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}]",Caitlin Haedrich,69856275,,User,,31,,5,13
683321742,Interactive vector maps for Jupyter Notebooks,"* InteractiveMap class produces interactive folium maps centered on current g.region in Jupyter Notebooks
* Functions for adding vectors to folium map by
* Vectors are passed from GRASS to folium by reprojecting to WGS84 in a temporary Location, exporting as GeoJSON files and importing to folium.

This PR contains functions for displaying GRASS vector data in interactive folium maps for Jupyter Notebooks. It is part of an ongoing Google Summer of Code project, Improved Integration of GRASS and Jupyter Notebooks. You can find more information [here](https://trac.osgeo.org/grass/wiki/GSoC/2021/JupyterAndGRASS). ",True,1710,https://api.github.com/repos/OSGeo/grass/pulls/1710,https://github.com/OSGeo/grass/pull/1710,closed,226,21,5,31,7,49,2,0,"[{'name': 'enhancement'}, {'name': 'gsoc'}]",2021-07-05 03:21:09+00:00,2021-07-19 21:03:07+00:00,1273318.0,"14 days, 17:41:58","[{'comment_id': 663625742, 'comment_body': ""What's wrong with `grass.script.create_location`?"", 'comment_created': datetime.datetime(2021, 7, 5, 4, 10, 11, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 663626438, 'comment_body': 'Use f-string.', 'comment_created': datetime.datetime(2021, 7, 5, 4, 13, 5, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 663627843, 'comment_body': 'Since you have the `_convert_coordinates` function, it is better to do (hide) this formatting stuff there.', 'comment_created': datetime.datetime(2021, 7, 5, 4, 19, 3, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 663628449, 'comment_body': 'The upper case here is somewhat unexpected. Either all lower case or switch the dictionary to types.SimpleNamespace and use attributes where it is clear it needs to be lower case.', 'comment_created': datetime.datetime(2021, 7, 5, 4, 21, 34, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 663629388, 'comment_body': 'This will actually break for more advanced cases. Adding mapset is actually more sophisticated. If v.proj can handle that, that would be best.', 'comment_created': datetime.datetime(2021, 7, 5, 4, 25, 14, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 663629632, 'comment_body': 'The code will change, but `""tmp_{}.json"".format(vector)` should be a variable.', 'comment_created': datetime.datetime(2021, 7, 5, 4, 26, 21, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 663630201, 'comment_body': 'I still think there might be a better, completely different, name, but in any case, the adjectives should go first, noun last, e.g., GrassInteractiveRenderer.', 'comment_created': datetime.datetime(2021, 7, 5, 4, 28, 52, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 664015760, 'comment_body': ""`create_location` calls `create_environment`. The user cannot pass an environment to `create_location` so I couldn't get a new location to be created in `self._env`; it will always create a new environment with `os.environ.copy()` and doesn't return the new environment either. I think this means it wouldn't work? Or is there another workflow you had in mind?"", 'comment_created': datetime.datetime(2021, 7, 5, 15, 36, 52, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 664089124, 'comment_body': ""`grass.script.create_location` creates a new location. It does not modify or return the environment and it is not supposed to. It really only creates a location.\r\n\r\nGenerally, you can modify `create_location` or anything else if needed. There is one advanced case where passing `env` to `create_location` would make sense, but unless you are thinking of that, let's just leave it as is because it is not needed here.\r\n\r\nBasically, the first question is, does it create location in your case?\r\n\r\nAnother things is that you create a separate environment later and use that to run things in that location, i.e., you don't need `create_location` to do it for you; it is a separate step in how these functions are designed."", 'comment_created': datetime.datetime(2021, 7, 5, 18, 49, 26, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 664090915, 'comment_body': 'You won\'t really have just one `self._env` like in the case of the non-interactive rendering. There might be more. In any case, the env here is specific to working in that EPSG:4326 location, so a less generic name might be good.\r\n\r\nSecond thing is that the documentation says ""The user of this function is responsible for deleting the file."" You will need to keep the name to delete it later.', 'comment_created': datetime.datetime(2021, 7, 5, 18, 55, 2, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 664092474, 'comment_body': 'Likely not needed.', 'comment_created': datetime.datetime(2021, 7, 5, 19, 0, 10, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 664093194, 'comment_body': 'Extra line.', 'comment_created': datetime.datetime(2021, 7, 5, 19, 1, 58, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 664093353, 'comment_body': ""I don't think this line improves readability."", 'comment_created': datetime.datetime(2021, 7, 5, 19, 2, 33, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 664095282, 'comment_body': 'I was saying this at another occasion somewhere, but I will use the same line: Despite the popular belief, Python does not require an empty line after each statement.\r\n\r\nWell places empty lines here and there, may improve readability. More space around each line may be achieved in a many text editors by increasing line spacing. \r\n', 'comment_created': datetime.datetime(2021, 7, 5, 19, 9, 13, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 664107813, 'comment_body': 'Hmm, if I leave the mapset kwarg empty in v.proj, I get an error that the vector cannot be found in ""user1"" (because the vectors I\'ve been using are all in the PERMANENT mapset). Is this what you had in mind? Not sure how else to do this...', 'comment_created': datetime.datetime(2021, 7, 5, 19, 53, 7, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 664109875, 'comment_body': 'What about InteractiveMap? The idea that is for GRASS is already implied since the library is called grass.jupyter.', 'comment_created': datetime.datetime(2021, 7, 5, 20, 0, 58, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 664120402, 'comment_body': ""Right, v.proj can't do this automatically in this context. It just defaults to the current mapset (and it is suspicious that it is user1 in your case, but that's a separate issue).\r\n\r\nYou need to use `gs.find_file` which will do the correct lookup for you. This needs to run in the current mapset and than the mapset name you acquire will go to v.proj running in that WGS84 location."", 'comment_created': datetime.datetime(2021, 7, 5, 20, 42, 22, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 664789880, 'comment_body': ""I switched back to `gs.create_location` and it doesn't return an error anymore and it seems to work fine. I'm not sure why I was having so much trouble with that before... So, all set now - thanks!"", 'comment_created': datetime.datetime(2021, 7, 6, 18, 33, 57, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 664800815, 'comment_body': 'Ah! Ok, that makes sense. I think I have it working with `gs.find_file` now.\r\n\r\nIt is ""user1"" because that\'s what I called in gj.init.', 'comment_created': datetime.datetime(2021, 7, 6, 18, 50, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 664807435, 'comment_body': ""Maybe `self._folium_env`?\r\n\r\nNoted. I think I'm creating a lot of things that probably have to be cleaned up later..."", 'comment_created': datetime.datetime(2021, 7, 6, 19, 0, 48, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 664808815, 'comment_body': ""I'm not sure how else to get `GISDBASE` which is required for `create_location` and `create_environment`. It isn't stored in `os.environ`. I also think I need the original location and mapset for v.proj and I'm not sure how to get that besides in the rcfile."", 'comment_created': datetime.datetime(2021, 7, 6, 19, 3, 3, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 664866699, 'comment_body': '> I\'m not sure how else to get `GISDBASE` which is required for `create_location` and `create_environment`.\r\n\r\nActually, that\'s another issue. You should probably use some temporary directory for this. You can use standard Python library to get a temporary directory. (`GISDBASE` is just a directory - a directory where locations (""projects"") are.) In standard GRASS session created by the _grass_ command, there is one already created and can be used for things like this, but it needs to be used with some care and _grass.script.setup.init_ is not setting it up unlike the _grass_ command.\r\n\r\n> It isn\'t stored in `os.environ`.\r\n\r\nThe equivalent of the system environment in GRASS is so called _GIS environment_ (a legacy name) accessible through _g.gisenv_ (_gs.gisenv_ function in Python). It is interface to the rc file (session file).\r\n\r\n> I also think I need the original location and mapset for v.proj and I\'m not sure how to get that besides in the rcfile.\r\n\r\nRight, but the mapset should come from the _find_file_ call.', 'comment_created': datetime.datetime(2021, 7, 6, 20, 45, 32, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 664869189, 'comment_body': ""> Maybe `self._folium_env`?\r\n\r\nYou will need pseudo-mercator for the rasters/images, so perhaps `self._vector_env` or `self._wgs84_env`.\r\n\r\n> I think I'm creating a lot of things that probably have to be cleaned up later...\r\n\r\nRight, good to keep a track of those, but you can just create an issue for that when you are ready to merge this PR, i.e., it does not have to be part of this PR (this applies to all other PRs as well). Or you can list known issues in the PR description."", 'comment_created': datetime.datetime(2021, 7, 6, 20, 50, 11, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 664877330, 'comment_body': 'Maybe the mapset is not needed when v.proj gets a fully qualified name as input (since mapset is already specified in input). Read the documentation and/or test. Using the original/current mapset would be wrong (the vector is in the mapset returned by find_file, not necessarily in the current one).\r\n\r\nI would also suggest to name the variable full_name just to be clear later what is happening or overwrite the vector variable by the result if you want shorter code (I think it would still be perfectly readable), but see my later comment about v.out.ogr. It is also somewhat confusing to name this name since one of the values find_file returns is under key `name`.', 'comment_created': datetime.datetime(2021, 7, 6, 21, 4, 48, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 664884830, 'comment_body': 'This works I think only because the vector happens to be in the PERMANENT mapset in the original/current location. This may or may not be the case generally. In the `self._env` location, it will always be in PERMANENT. Specifying only the name without mapset seems to me like the best way to go. You just reprojected that to whatever is the current mapset for `self._env`, so specifying the mapset is not needed.\r\n\r\nTo cover all the cases, you need to really have the original name here, but perhaps stripped from the mapset - right, you should support things like `add_vector(""streams@user1"")`. Fortunately, just passing that to _find_file_ should work (I just tested with _g.findfile_). It will resolve all the pieces for you. In other words, passing the fullname is wrong, passing the original parameter value won\'t work for `name@mapset` case, use full _find_file_ result to reliably get the pieces you need.', 'comment_created': datetime.datetime(2021, 7, 6, 21, 18, 36, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 664886745, 'comment_body': 'I\'m generally see `add_vector(vector=""abc"")` as a missed opportunity to document what the parameter is. In a general Python context, I would say `add_vector(name=""abc"")`. You could also say it should always be called as `add_vector(""abc"")` and leave your hands free for later change of the parameter name.', 'comment_created': datetime.datetime(2021, 7, 6, 21, 22, 14, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 665856622, 'comment_body': 'To clarify, the missed opportunity in `add_vector(vector=""abc"")` is that you are saying twice you are dealing with a vector. It is just repeating the information. Actually calling the function with the keyword argument then feels repetitive. Defining the function as `add_vector(self, name)` adds some information about what the argument actually is (it is a name, so string, and not some complex object - although in theory we could support things like that, in Python `arg` is often used as an argument name in that case from what I have seen). On the other hand, name does not add that much info in the actual call `add_vector(name=""abc"")`, so perhaps using it just as `add_vector(""abc"")` makes more sense. You could argue that name is name of the layer as displayed in the legend I guess. If you say in documentation, never use keyword argument for the first argument, you can change the name any time without breaking your API. That\'s the Python side of things.\r\n\r\nIn GRASS GIS, the parameters always have names like in Python and in some contexts, it is okay to leave out the name of the first one (in Python you can _generally_ (not always) leave out any name). The current practice is that if there is one raster or vector map as input and there is no output, it is called _map_, it is called _input_ if there is also output(s), and it is called _vector_ when there is also raster and vice versa. This was called into question because the rules are unclear to some users (defining ""no output"" is one of the tricky parts). The non-interactive d.vect-like functions will use this GRASS parameter name, however, we are not bound by these names here and can pick what works best.', 'comment_created': datetime.datetime(2021, 7, 8, 4, 13, 45, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 666240429, 'comment_body': ""Ah, ok, I understand better now. So, let's go with `add_vector(self, name)`? That would match both Python and GRASS convention since it is the first parameter (see 1st sentence, 2nd paragraph. And, I agree that adding `name=` doesn't add much information."", 'comment_created': datetime.datetime(2021, 7, 8, 14, 21, 35, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 666259813, 'comment_body': 'Also, reading your comment above again, I see your point. I need to use `[""name""]` from `gs.find_file` instead of from whatever the user provides so that it will work if the user provides `""abc@PERMANENT""` - that way you don\'t end up with a file called `""tmp_abc@PERMANENT.json""`.', 'comment_created': datetime.datetime(2021, 7, 8, 14, 42, 39, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 666287265, 'comment_body': 'To (partially) future proof this, you can list each module (name) on a separate line. I just did that for the Makefile in parent dir in this PR: https://github.com/OSGeo/grass/pull/1715/files#diff-ca3c8a522b85886bddf093dff36a30011e88cd6c5335d554d2f1ffb08582903d', 'comment_created': datetime.datetime(2021, 7, 8, 15, 13, 22, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 666292282, 'comment_body': 'This change is unrelated to this PR, but if you want to make your docstrings correct, you can follow [PEP 257 -- Docstring Conventions](https://www.python.org/dev/peps/pep-0257/#multi-line-docstrings):\r\n\r\n```\r\ndef complex():\r\n    """"""Form a complex number.\r\n\r\n    More text. ...\r\n\r\n    More text in more pragraphs. ...\r\n    """"""\r\n```', 'comment_created': datetime.datetime(2021, 7, 8, 15, 19, 22, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 666299718, 'comment_body': ""To much overhead, this is calling g.findfile twice and twice parsing its output in Python. Maybe small overhead compared to time spend with manipulating the vector, but still not a good practice.\r\n\r\nNaming that variable is hard, but the code is short (scope where the variable lives), so it can be something generic, like result (as in result from querying the spatial database) or some combination of file, vector, info, names, dict... I'm afraid there is no term for this thing in GRASS."", 'comment_created': datetime.datetime(2021, 7, 8, 15, 27, 50, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 666326701, 'comment_body': '> ...let\'s go with `add_vector(self, name)`? ...adding `name=` doesn\'t add much information.\r\n\r\nSounds good, but say in the documentation that ""*name* a positional-only parameter"" (as, for example, *x* is described in [documentation of float buildin](https://docs.python.org/3/library/functions.html#float). There is a way in [new Python versions](https://docs.python.org/3/reference/compound_stmts.html#function-definitions) to do that on language-level rather than just in the documentation, but we need to support older version too (you can see full info in \r\n[PEP 570 -- Python Positional-Only Parameters](https://www.python.org/dev/peps/pep-0570/)).\r\n\r\nThis way you are not making any promises about the name of the parameter and are saying that `add_vector(""abc"")` is the right way of using this method.', 'comment_created': datetime.datetime(2021, 7, 8, 16, 0, 58, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 666329051, 'comment_body': 'Same as above for find_file. `gisenv = gs.gisenv...`', 'comment_created': datetime.datetime(2021, 7, 8, 16, 3, 53, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 666335834, 'comment_body': 'Use Path from pathlib to manipulate the paths or os.path.join, i.e., do not construct paths using string formatting (filename and directory names yes, but not paths).\r\n\r\nAssuming that self.tmp_dir is already a Path, the statement will look like:\r\n\r\n```\r\n        json_file = self.tmp_dir / f""tmp_{name}.json""\r\n```\r\n\r\nThe disadvantage of Path, is that you need to convert it to string, but things like format strings work out of the box:\r\n\r\n```\r\n>>> from pathlib import Path\r\n>>> a = Path(""/tmp"")\r\n>>> f""{a}""\r\n\'/tmp\'\r\n```', 'comment_created': datetime.datetime(2021, 7, 8, 16, 12, 56, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 668137793, 'comment_body': 'The tab is sufficient. Delete the space.', 'comment_created': datetime.datetime(2021, 7, 12, 17, 52, 38, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 668150235, 'comment_body': 'There is a `m = gj.GrassRenderer` line above the g.region line. So delete that one?', 'comment_created': datetime.datetime(2021, 7, 12, 18, 11, 24, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 668151812, 'comment_body': 'display', 'comment_created': datetime.datetime(2021, 7, 12, 18, 14, 3, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 668157662, 'comment_body': 'You need to set this to False in init to make this line work or set self.layer_control_object to None and than test it here. In both cases, the test can be just `if self.layer_control:`.', 'comment_created': datetime.datetime(2021, 7, 12, 18, 23, 33, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 668271006, 'comment_body': 'I decreased the number of blank lines in later commits.', 'comment_created': datetime.datetime(2021, 7, 12, 21, 31, 45, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 668272343, 'comment_body': 'I think this is resolved?', 'comment_created': datetime.datetime(2021, 7, 12, 21, 34, 13, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 668272916, 'comment_body': 'To clarify here, I should open a new PR where I update all the docstrings to follow PEP 257? Or should I address this here?', 'comment_created': datetime.datetime(2021, 7, 12, 21, 35, 22, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 668273741, 'comment_body': 'I removed many empty lines in later commits.', 'comment_created': datetime.datetime(2021, 7, 12, 21, 36, 49, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 668276765, 'comment_body': 'Not sure which space you meant. I deleted a one space before each word on lines 9-11.', 'comment_created': datetime.datetime(2021, 7, 12, 21, 42, 40, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 668291663, 'comment_body': 'Perhaps we can talk about this at our next meeting. I have some lingering confusion and am not sure if I\'ve done the correct way. I think the way I have it written is a ""positional-only parameter""? From reading those links, it\'s my understanding that, with the way it\'s currently written, the user couldn\'t use `add_vector(self, name=""abc"")` which inherently means it\'s a ""positional-only parameter.""', 'comment_created': datetime.datetime(2021, 7, 12, 22, 13, 42, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 668354572, 'comment_body': 'Fix the newly added docstrings. Leave the rest for later or for PRs where you are modifying the code anyway.', 'comment_created': datetime.datetime(2021, 7, 13, 1, 6, 44, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 668355947, 'comment_body': 'Let\'s talk about it then. In the meantime, try running `add_vector(self, vector=""abc"")` yourself.', 'comment_created': datetime.datetime(2021, 7, 13, 1, 10, 57, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 668356785, 'comment_body': ""That's exactly what I meant. Thanks. This makes it perfectly clear that the space is not needed there for the next person editing this file or copying code from here."", 'comment_created': datetime.datetime(2021, 7, 13, 1, 13, 39, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 668399004, 'comment_body': 'I removed the changes in setup.py and reformatted to docstrings in interact-display.py to reflect PEP 257 (since these are the newly added docstrings).', 'comment_created': datetime.datetime(2021, 7, 13, 3, 26, 3, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}]","[{'commit_sha': '57c19d9393cfaa8bcc5b00e52697b6c705f53078', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '009d763757d853230edb57a4408147425de6221b', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '527a0dd4c4fc6442e7dae1ee70c56367319b80d6', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b47a92519558b6fce0df70d57eed60294165461c', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e797fe2ada2a5cb99411c323c7594875b4526922', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d7dd0a4b4aea9a4d3e39e62db0f14e9c2422b64', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '008c2a128b54dc829779ca34599698c696581b90', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d5cdc9b97a2b4d0f30d76b45f8523358d5e731c', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3573fe7997ffc4403bceae76bbd2ced9ee0dd7ea', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed5885116be6cae387e5bfa244d16d4aefe8e4d2', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93305e6dc8b19fa9b36603219d97377a6916ad91', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0fd448b373f820225d5283a7a7e3ccb92365db5b', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b23a9c75a4c59268e3d023ad3de550965bee1fb', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd1a9a886a7f69a4064f6ccc920bc1aebb6306351', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66ebacc8686c273461779312d7546ad672160603', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e8e97b4c76059238f8b7ec564a0448fc2f589fd9', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03f2dd69f8057d5217fa529ae57bbc2254907364', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3720957235a1b05cc6f178cab65626bc0521bc88', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7b463df64f6f7834961ff23fd4cf96e8b048f86', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e73f60ca369688d0b8edc392122cad04ae65d5b1', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2347f5dd842fa4608c4cc442a6a2278047dc6043', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca486c734691ec17bbf2b617c1454a759399e940', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d5b84a3730da1a03b7131f14a583c591e16dec4', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7561125cf7ae03c193c5b30e9e2d1bebedf04b7', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c71bb2972180fcb9796155904ebae3e95911afa', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e2f99d3cc4d5ca1e91f96aade66c23e86e904e0', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '545e0a78d6396237bf5f88d3467a9bf9713913ae', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e2cbf7c87bb701bcd07c2962ff499dc06803d31', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09141140737b99c91d93d265b04ed29bd1e03137', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ae9a953efbe99b0900ec4b6fb9303c85e8f633f', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1177f36a507424fc263b0b19626ab9727bdc1bf', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}]",Caitlin Haedrich,69856275,,User,,31,,5,13
689268261,__getattr__ shortcut for calling GRASS display modules,"* Shortcut allowing users to call GRASS display modules ('d.*) with class method `.d_*`. 
* Example of usage in jupyter_integration.ipynb
* Typo fix and black formatting

These modifications are part of an on-going Google Summer of Code project, Improved Integration of GRASS GIS and Jupyter Notebooks. You can find more information [here](https://trac.osgeo.org/grass/wiki/GSoC/2021/JupyterAndGRASS). You can test out the functionality in Binder here:

https://mybinder.org/v2/gh/chaedri/grass/non-interactive-display-update?urlpath=lab%2Ftree%2Fdoc%2Fnotebooks%2Fjupyter_integration.ipynb",True,1723,https://api.github.com/repos/OSGeo/grass/pulls/1723,https://github.com/OSGeo/grass/pull/1723,closed,64,6,2,12,2,10,2,0,"[{'name': 'enhancement'}, {'name': 'gsoc'}]",2021-07-13 17:35:16+00:00,2021-07-29 21:20:22+00:00,1395906.0,"16 days, 3:45:06","[{'comment_id': 670478397, 'comment_body': 'The signature (parameters) need to be different. See the docs: https://docs.python.org/3/reference/datamodel.html#object.__getattr__', 'comment_created': datetime.datetime(2021, 7, 15, 13, 47, 22, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 670484213, 'comment_body': 'Exception to raise from `__getattr__` shall be `AttributeError` according to the docs (emph. mine):\r\n\r\n> This method should either return the (computed) attribute value or _raise an AttributeError exception_.', 'comment_created': datetime.datetime(2021, 7, 15, 13, 53, 33, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 670524221, 'comment_body': ""This is more difficult to decide. Not `ModuleNotFoundError` as that's meant for Python modules, not GRASS modules. `FileNotFoundError` might be okay, but confusing. It is a failed attribute access, so `AttributeError` seem right, but this is no longer attribute access, so maybe not. Perhaps raising a new `FileNotFoundError` with a custom message. This can include the original message or use `raise ... from ...`. You could also use `shutil.which` ahead of time and then `AttributeError` would be a clear choice. This goes a little against Python principles of trying first instead of testing, but it may result in much better behavior. There is more cases than just `FileNotFoundError`, for example `PermissionError`. `shutil.which` tries to check for all these things. It worked correctly for me when only the permissions were wrong. Other than that, it should be have like `run` (e.g. with wrong parameters)."", 'comment_created': datetime.datetime(2021, 7, 15, 14, 37, 33, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 670525228, 'comment_body': '`attr.startswith(...)`', 'comment_created': datetime.datetime(2021, 7, 15, 14, 38, 43, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 670529208, 'comment_body': 'This text may use some improvement, but more importantly, add examples to the class docstring.\r\n\r\n```\r\n>>> m = ...\r\n>>> m.d_vect(...)\r\n````', 'comment_created': datetime.datetime(2021, 7, 15, 14, 43, 8, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 673190723, 'comment_body': 'Based off the docs, I think it should read:\r\n\r\n`    def __getattr__(self, name, **kwargs):`\r\n\r\nIs that right? Or should `**kwargs` be passed differently too?', 'comment_created': datetime.datetime(2021, 7, 20, 14, 44, 47, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 673228294, 'comment_body': ""I went with 'FileNotFoundError ' using `raise ... from ...` in my newest commit. I wasn't quite sure how to implement the `shutil.which` method and what the advantage or expected behavior would be. But, if we feel that would be a better solution, let's talk about it at our next meeting and I'll switch."", 'comment_created': datetime.datetime(2021, 7, 20, 15, 26, 20, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 673619089, 'comment_body': 'I really meant docstring of the class, not the one for the method. `__getattr__` is too special for it to be an obvious place to look for documentation of `m.d_vect` behavior.', 'comment_created': datetime.datetime(2021, 7, 21, 2, 40, 27, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 673621173, 'comment_body': 'Python exception messages don\'t end with `.`, test e.g.:\r\n\r\n```\r\n>>> xxx\r\nTraceback (most recent call last):\r\n  File ""<stdin>"", line 1, in <module>\r\nNameError: name \'xxx\' is not defined\r\n>>> def a():\r\n...     pass\r\n... \r\n>>> a(1)\r\nTraceback (most recent call last):\r\n  File ""<stdin>"", line 1, in <module>\r\nTypeError: a() takes 0 positional arguments but 1 was given\r\n```\r\n\r\nI think exceptions raised in GRASS code are translatable (check the other code) which in GRASS means enclosing the string in `_(...)` (call to a function named `_` which is defined as a buildin and returns the translated message if locale language is not English and the message was translated).', 'comment_created': datetime.datetime(2021, 7, 21, 2, 47, 10, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 673622715, 'comment_body': 'See how Sphinx recommends formatting examples. I think introducing the example with a sentence is probably enough. See what these docstrings might be turned into:\r\nhttps://grass.osgeo.org/grass80/manuals/libpython/pygrass.modules.interface.html?highlight=module#module-pygrass.modules.interface.module (and the corresponding source code in grass/pygrass)', 'comment_created': datetime.datetime(2021, 7, 21, 2, 51, 48, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}]","[{'commit_sha': '699080912c59df2d6abb7b79d3b13fd4e1ea5eec', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '564b8f3bb289cc670a9a83337f669e64af26e713', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'abb4d829a775d6435cd997455aabd7a7e18a6200', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9bbad36554f319dd9e444832c4c964c341a58a2', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a07abd35e4bff3a28479065ad8d4528b7125e90a', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99f24e32c2ee16b3bbde17f5e8cab8340254b280', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02bf0441e01f2203cd1a3bce887d033a3a279ed2', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '597f14b154386c27999c22ff488384406605f56a', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73f4c0a7ecab40849e92eda2cfd149c7efcd6d5e', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '863589f77e5794cd5f045b67c0995a63ae10c226', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f2ea2c0172bf9fdb8ceffd575a660b2ca418dce', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c70977bf3e763b4e19ab7f7f72469b647431db6', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}]",Caitlin Haedrich,69856275,,User,,31,,5,13
690227266,Add temporary files for Non-Interactive Display,"* Write display-related files to temporary files for non-interactive displays in Jupyter Notebooks. The option remains to write the display to a PNG when provided a path and filename.  
* Edit `grass.jupyter` demonstration notebook to include example with legend.
* Improved Documentation and added renderer parameter to GrassRenderer

These modifications are part of an on-going Google Summer of Code project, Improved Integration of GRASS GIS and Jupyter Notebooks. You can find more information [here](https://trac.osgeo.org/grass/wiki/GSoC/2021/JupyterAndGRASS). 

You can also try out the changes suggested in this PR here:

https://mybinder.org/v2/gh/chaedri/grass/add-temp-directory?urlpath=lab%2Ftree%2Fdoc%2Fnotebooks%2Fjupyter_integration.ipynb",True,1727,https://api.github.com/repos/OSGeo/grass/pulls/1727,https://github.com/OSGeo/grass/pull/1727,closed,28,12,2,21,6,0,2,0,"[{'name': 'enhancement'}, {'name': 'gsoc'}]",2021-07-14 21:10:33+00:00,2021-07-30 19:19:21+00:00,1375728.0,"15 days, 22:08:48",[],"[{'commit_sha': '4c322d16e0bf0f8f58585ed1fd9146e890d13be7', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b567f7b7792c14a7d7159cec030561577a10fb7', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db56e793d83c26ea850af5b44c4a17b9fb436836', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6587caec9d3608f962cb8f52e77f97b769870864', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d06710bfbcbe219451b6f2d29f3a7902b7ba4f1', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a4c48b6a7af26011f3b56490002556a73d017eb', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '065ce0bd82b6aeb7185839ba881a7826fb24c0ee', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da54c26f65ea324c385ebb291504db4ef45d183b', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '41e86c89c42e14d75b98ebf55dc4c8ffd5443fbf', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ac09fc4bc870f3805145c1230081d55c29f182a', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7106b2296c971b07ee84137276756dd60358f08d', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef6b161398340434cadbe950304c877c2ed68cb0', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '18d798b936aadbd38b34ab85dcdc3176606d3c3b', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a8281c3cf5c2e0e74657719c9bd3e6ecc8bad58', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c1d697f5192f79b8eb44bcb04dabc4c91fdb7ab', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f96bc69402313f0b305a4e832de86f3d7574e7a', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d09be1b629f25c213f966f84c103e9a5ee628da', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a567f585a201ddc3c3ae3a9bb6d5f1b3d8d38a3', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a99a40567dc44febefe1a905ae97a110059f8423', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ab1fec474f6a365203afccb67155a7e38b70dd2', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '986dcf1cb595b44f2b4a2fc7711b2635aeb83a5b', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}]",Caitlin Haedrich,69856275,,User,,31,,5,13
700962388,Raster Support for Interactive Jupyter maps with folium,"* Add temporary WGS84-Pseudo-Mercator location for rasters
* Add `add_raster` method for `InteractiveMap` class
* Update demonstration notebook to include raster example
* Change `GrassRenderer` PNG background to transparent
* Re-arrange functions for clarity; added `utils.py'
* Added rcfile cleanup
* Added `save()` method for saving folium map as HTML file
* Added temporary directory with `tempfile`

These changes are part of an on-going Google Summer of Code project, Improved Integration of GRASS GIS and Jupyter Notebooks. You can find more information [here](https://trac.osgeo.org/grass/wiki/GSoC/2021/JupyterAndGRASS). 

You can also test the functionality at this binder link:
https://mybinder.org/v2/gh/chaedri/grass/interactive-rasters?urlpath=lab%2Ftree%2Fdoc%2Fnotebooks%2Fjupyter_integration.ipynb",True,1769,https://api.github.com/repos/OSGeo/grass/pulls/1769,https://github.com/OSGeo/grass/pull/1769,closed,281,117,6,53,3,36,2,0,"[{'name': 'enhancement'}, {'name': 'gsoc'}]",2021-08-01 18:43:56+00:00,2021-08-11 18:38:08+00:00,863652.0,"9 days, 23:54:12","[{'comment_id': 684566299, 'comment_body': 'Same code in the vector function. Creating a function with a reasonable API may take a couple of tries, but something like ""set computational region from environment A to B"" sounds like a good starting point. You may approach the function as ""both environments are equal (source and target)"" or more as a standard function or module, so ""set region from another environment to the current one"" (and optionally specify the current environment.', 'comment_created': datetime.datetime(2021, 8, 7, 1, 33, 58, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 684566590, 'comment_body': ""I think `rcfile` is not deleted. Don't you need a finalize call here? See the doc and code for create_environment and let me know what you think."", 'comment_created': datetime.datetime(2021, 8, 7, 1, 37, 1, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 684566966, 'comment_body': 'Since `self._psmerc_env` is the only newly set attribute, it seems that a `_setup_location(name, epsg)` function (returning the new env) may work well here.', 'comment_created': datetime.datetime(2021, 8, 7, 1, 40, 32, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 684567083, 'comment_body': 'Also positional-only.', 'comment_created': datetime.datetime(2021, 8, 7, 1, 41, 27, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 684567294, 'comment_body': ""`parse_command` should work here, but get_region seems even more appropriate. You are using get_region elsewhere, so note in a comment if there is a reason it doesn't work here (I think it should)."", 'comment_created': datetime.datetime(2021, 8, 7, 1, 43, 50, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 684567824, 'comment_body': 'No shouting in the comments! Just put there two sentences, two lines, ...', 'comment_created': datetime.datetime(2021, 8, 7, 1, 49, 19, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 684568189, 'comment_body': 'There is actually an overhead in calling m.proj (it is a subprocess etc.), so calling it twice is suboptimal, but now I\'m perhaps more concerned with latlon in the name (used for geographical CRSs in GRASS in general) and this being a clear separate piece of code. Isn\'t the whole thing ""get region in wgs84"".', 'comment_created': datetime.datetime(2021, 8, 7, 1, 52, 28, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 684568731, 'comment_body': ""For reprojection, you are just using the original name. That's a good start, although you can have maps with the same name in different mapsets and you can access them from one mapset (`elevation@PERMANENT` and `elevation@user1`)."", 'comment_created': datetime.datetime(2021, 8, 7, 1, 56, 57, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 684568975, 'comment_body': 'Unnecessary comments.', 'comment_created': datetime.datetime(2021, 8, 7, 1, 59, 26, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 684568989, 'comment_body': 'Comment would be better as a doc of return value in the docstring.', 'comment_created': datetime.datetime(2021, 8, 7, 1, 59, 49, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 684569510, 'comment_body': 'Ideally, you would have a third function which would have the m.proj call and surrounding string manipulation and that may avoid the need for two calls of `convert_coordinates_to_latlon` which are good API-wise, but not ideal performance-wise, but it might be too cumbersome in practice.', 'comment_created': datetime.datetime(2021, 8, 7, 2, 5, 15, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 684569680, 'comment_body': 'That needs keyword arguments to clarify what is being passed to it.', 'comment_created': datetime.datetime(2021, 8, 7, 2, 7, 25, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 684569754, 'comment_body': 'Add docstrinfgs, run Pylint.', 'comment_created': datetime.datetime(2021, 8, 7, 2, 8, 1, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 684639609, 'comment_body': ""I think you are right but I have all the cleanup in PR #1754. I think it makes most sense to move rcfile cleanup here and delete that PR since it (1) doesn't contain much new code and (2) this PR contains so many big changes, it's just going to cause a bunch of merge conflicts."", 'comment_created': datetime.datetime(2021, 8, 7, 14, 29, 56, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 684706033, 'comment_body': 'dict', 'comment_created': datetime.datetime(2021, 8, 8, 3, 5, 49, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 684706485, 'comment_body': 'raster makes sense, but it should be cell here. Find file is a low-level function looking for a file. Hopefully, this will change at some point, but now ""raster"" generates a verbose message, but ""cell"" does not. See implementation of find_file.', 'comment_created': datetime.datetime(2021, 8, 8, 3, 10, 20, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 684772743, 'comment_body': ""I managed to avoid calling `convert_coordinates_to_latlong` and deleted it. Do you think it's still necessary to have a third function here?"", 'comment_created': datetime.datetime(2021, 8, 8, 13, 9, 6, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 684772867, 'comment_body': 'I deleted `convert_coordinates_to_latlon`.', 'comment_created': datetime.datetime(2021, 8, 8, 13, 9, 53, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 684772983, 'comment_body': ""You're right - I switched to `get_region` here."", 'comment_created': datetime.datetime(2021, 8, 8, 13, 10, 47, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 684773119, 'comment_body': 'I switch to `setup_location()` and moved that functions to `utils.py`.', 'comment_created': datetime.datetime(2021, 8, 8, 13, 11, 36, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 684773474, 'comment_body': ""I'm not sure if I've addressed this comment - I got rid of the repetition with a new function `setup_location()`. "", 'comment_created': datetime.datetime(2021, 8, 8, 13, 13, 14, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 684816384, 'comment_body': 'Add that all environments used in this class are derived from this one. A helpful note and it clarifies that os.environ is not modified which ""Remember original environment"" may suggest to some.', 'comment_created': datetime.datetime(2021, 8, 8, 19, 9, 2, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 685173334, 'comment_body': 'dbase_location - In the context of the ""classic"" naming practice, dbase_location is confusing: Is it dbase or location? You can call it _path_ because that\'s what it is.', 'comment_created': datetime.datetime(2021, 8, 9, 13, 3, 48, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 685173922, 'comment_body': ""Maybe _of_ or _'s_ would clarify the description here."", 'comment_created': datetime.datetime(2021, 8, 9, 13, 4, 37, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 685177565, 'comment_body': 'typo: GNU **Gernal** Public...Read **teh** file COPYING that comes with GRASS\r\n\r\nSame in python/grass/jupyter/interact_display.py.\r\n\r\nYou should not be writing these by hand.', 'comment_created': datetime.datetime(2021, 8, 9, 13, 9, 32, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 685178273, 'comment_body': 'What use case do you have in mind for the default? Is this trying to mimic the d-command behavior in creating `map.png` by default? How do you plan to document it?', 'comment_created': datetime.datetime(2021, 8, 9, 13, 10, 31, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 685286067, 'comment_body': ""Ah, good catch. I went hunting for the proper header to put here and found some conflicting methods. There's the [guidelines on the wiki](https://trac.osgeo.org/grass/wiki/Submitting/Python) which are similar to what I have but as a docstring instead of a comment. But there's also lots (most?) of python scripts on github that use comments (see [utils/download.py](https://github.com/OSGeo/grass/blob/master/python/grass/utils/download.py) or [lib/init/grass.py](https://github.com/OSGeo/grass/blob/master/lib/init/grass.py)). There's also examples I found in the python directory that have more a Sphinx docstring style (such as [raster.py](https://github.com/OSGeo/grass/blob/master/python/grass/script/raster.py)). What do you think is most appropriate here?"", 'comment_created': datetime.datetime(2021, 8, 9, 15, 16, 19, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 685292866, 'comment_body': 'Yes, I think I was thinking of the d-command behavior here. `map.png` would probably be a better choice - I\'ll change it. Use-case-wise, I was imagining users might want to embed their map in a website or create a website from. They create their map then save as an html (i.e. `m.save(filename=""map_for_website.html"")`). Do you think it needs additional documentation?', 'comment_created': datetime.datetime(2021, 8, 9, 15, 24, 20, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 685386137, 'comment_body': 'Right, so what is the use case for the default value? In other words, in what circumstances will the user know about the default and write save() while not saying where to save?', 'comment_created': datetime.datetime(2021, 8, 9, 17, 28, 27, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 685387055, 'comment_body': ""This style of header is fine. Just don't write it by hand and if you do, don't include typos :-)"", 'comment_created': datetime.datetime(2021, 8, 9, 17, 29, 45, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 685442305, 'comment_body': ""Typos fixed. I'll copy and paste next time 👍 "", 'comment_created': datetime.datetime(2021, 8, 9, 18, 54, 50, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 685443116, 'comment_body': 'AH, ok, I see your point now. Having a default is not necessary. The line should be `def save(self, filename):`.', 'comment_created': datetime.datetime(2021, 8, 9, 18, 56, 2, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 685451967, 'comment_body': 'No, with the current code, this work well.', 'comment_created': datetime.datetime(2021, 8, 9, 19, 10, 2, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 685492004, 'comment_body': 'setup_location works for me.', 'comment_created': datetime.datetime(2021, 8, 9, 20, 17, 18, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 685616768, 'comment_body': ""I'm still not sure I fully understand why passing the original name could cause a problem here. In your example, are you thinking that `elevation@PERMANENT` and `elevation@user1` are different rasters but we want to add both of them to our folium map? In that case, we'd end up with two `elevation`s in the temporary location which would cause a problem. Perhaps replacing the `@` in the `full_name` string to make something like `elevation_user1` as the new name would solve this?"", 'comment_created': datetime.datetime(2021, 8, 10, 1, 0, 33, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 686331062, 'comment_body': 'I see two issues:\r\n\r\n1. `self.tmp_dir` + `""map.png""` will be the same filename for each `add_raster` call. Is this a problem? For GrassRenderer? For folium.ImageOverlay`? I have no idea how ImageOverlay behaves or what is in its doc. When this image needs to be present? Using the new name (from 2.) might be the best option at this point.\r\n2. Replacing `@` with `_` should work well enough. We will always do that so that should avoid any conflicts (mapname@mapsetname is a unique identifier for a map of a given type within a location). (If we would convert rasters to vectors or the other way around - like in the possible alternative workflows we talked about - that would create potential for conflicts, but we could avoid that by simply using different location or different mapset for that workflow.)', 'comment_created': datetime.datetime(2021, 8, 10, 21, 21, 37, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}]","[{'commit_sha': '57c19d9393cfaa8bcc5b00e52697b6c705f53078', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '009d763757d853230edb57a4408147425de6221b', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '527a0dd4c4fc6442e7dae1ee70c56367319b80d6', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b47a92519558b6fce0df70d57eed60294165461c', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e797fe2ada2a5cb99411c323c7594875b4526922', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d7dd0a4b4aea9a4d3e39e62db0f14e9c2422b64', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '008c2a128b54dc829779ca34599698c696581b90', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d5cdc9b97a2b4d0f30d76b45f8523358d5e731c', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3573fe7997ffc4403bceae76bbd2ced9ee0dd7ea', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed5885116be6cae387e5bfa244d16d4aefe8e4d2', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93305e6dc8b19fa9b36603219d97377a6916ad91', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0fd448b373f820225d5283a7a7e3ccb92365db5b', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b23a9c75a4c59268e3d023ad3de550965bee1fb', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd1a9a886a7f69a4064f6ccc920bc1aebb6306351', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66ebacc8686c273461779312d7546ad672160603', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e8e97b4c76059238f8b7ec564a0448fc2f589fd9', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03f2dd69f8057d5217fa529ae57bbc2254907364', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3720957235a1b05cc6f178cab65626bc0521bc88', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7b463df64f6f7834961ff23fd4cf96e8b048f86', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e73f60ca369688d0b8edc392122cad04ae65d5b1', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2347f5dd842fa4608c4cc442a6a2278047dc6043', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca486c734691ec17bbf2b617c1454a759399e940', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d5b84a3730da1a03b7131f14a583c591e16dec4', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7561125cf7ae03c193c5b30e9e2d1bebedf04b7', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c71bb2972180fcb9796155904ebae3e95911afa', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e2f99d3cc4d5ca1e91f96aade66c23e86e904e0', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '545e0a78d6396237bf5f88d3467a9bf9713913ae', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e2cbf7c87bb701bcd07c2962ff499dc06803d31', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09141140737b99c91d93d265b04ed29bd1e03137', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ae9a953efbe99b0900ec4b6fb9303c85e8f633f', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1177f36a507424fc263b0b19626ab9727bdc1bf', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6007231e3edc7aa6ece4c124f973e08acb25d84', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e5db935031c14e33f6a2a650b7a7490b644fa79', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7b9e90e54b5d3717b9f5498f2ed8ebf5ab6ae59', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dcc8b30e5e2f433cb1e7097b5c89f3fcccfc43b6', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22d353a8eed7d433b0d7eeca235ed2b0524e99fe', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f13b8af46093746e06e33ffd6aba128709bf989', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a19f20893aceed44af7c91e09ca7d7ce0fa5d41b', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5a21985ee3c15b33390a0912c1a17c3474448a6', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '349d75a6268cac3ddfcd28321cc1af0513206bfe', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'feb8f93b200f6bfdb21da361324b3d0333cc06f7', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '24b5ab36e4516217c9fca022078ec539cd8fe452', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1f0c10f3c52be625dcfc5462a10064e4b12cbc6', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd5fb937795bb519672a0a6418ae0f0f09265d4a4', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20edf83352f5fa48a6efae7d098b9bbdf6f9a183', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9cd37d3bc5a6b8cab2ee6bf0b2c94c46f6f7dcd', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '264282d8473f065bb4ffed3e6298c219b98faceb', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce12294f527024ae212a06cd898a9b8e7761caf5', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49ac7877e223604dbdde6c241a47c600cd8e6de5', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd65feb29fbffb7aee19bf90c925f76785f7657cc', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf038ccbdb54cd052329fb0733637f482f2ffde3', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62740efb481ea5004d9389da8ef00481b2295e82', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd486dc6323036780f9e6ea20a1eff519d2c0f26d', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}]",Caitlin Haedrich,69856275,,User,,31,,5,13
692765393,Test Module for Non-interactive display in Jupyter Notebooks,"* Added testsuite directory for `grass.jupyter`
* Tests for display.py

This PR contains a test module for non-interactive displays created in `grass.jupyter`. It is part of an ongoing Google Summer of Code project, Improved Integration of GRASS GIS and Jupyter Notebooks. You can find more information [here](https://trac.osgeo.org/grass/wiki/GSoC/2021/JupyterAndGRASS). ",True,1739,https://api.github.com/repos/OSGeo/grass/pulls/1739,https://github.com/OSGeo/grass/pull/1739,closed,272,17,5,21,5,23,1,0,[{'name': 'gsoc'}],2021-07-19 16:47:16+00:00,2021-08-17 03:20:23+00:00,2457187.0,"28 days, 10:33:07","[{'comment_id': 684570717, 'comment_body': 'What about one of these instead of `is False`?\r\n\r\n```python\r\n@unittest.skipIf(not can_import_folium(), ""Cannot import folium"")\r\n@unittest.skipIf(not folium_imports(), ""Cannot import folium"")\r\n```', 'comment_created': datetime.datetime(2021, 8, 7, 2, 17, 42, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 684571070, 'comment_body': 'Same issue as in the other PR. `missing_ok` parameter is not available in 3.6 and 3.7 if I recall correctly.', 'comment_created': datetime.datetime(2021, 8, 7, 2, 21, 33, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 684571724, 'comment_body': 'Testing more modules than just d.rast would be nice, at least d.vect.\r\n\r\nYou can also test that it throws attr error when the module name is wrong. See [assertRaises](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertRaises) and use it as a context manager (with `with`). You could also test with `assertRaisesRegex` and confirm that module name is in the message and things like that.', 'comment_created': datetime.datetime(2021, 8, 7, 2, 29, 10, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 684571799, 'comment_body': 'May be more clear if ""test_filename.png"" is in a variable.', 'comment_created': datetime.datetime(2021, 8, 7, 2, 29, 50, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 684571875, 'comment_body': 'Make this a docstring instead saying what the function does.', 'comment_created': datetime.datetime(2021, 8, 7, 2, 30, 57, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 684572062, 'comment_body': 'No need for a comment (would be good for an example code for learning Python, but not code which will be maintained for people who went at least though the initial hurdles of getting to know Python).', 'comment_created': datetime.datetime(2021, 8, 7, 2, 32, 46, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 684572069, 'comment_body': 'Remove.', 'comment_created': datetime.datetime(2021, 8, 7, 2, 32, 52, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 684572465, 'comment_body': 'If the code below is not clear enough, I\'m afraid that the word ""assert"" will not help much (not the most common word in English).', 'comment_created': datetime.datetime(2021, 8, 7, 2, 37, 16, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 687821109, 'comment_body': 'I went with the first suggestion.', 'comment_created': datetime.datetime(2021, 8, 12, 15, 11, 39, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 687822174, 'comment_body': 'I added d.vect and another test for the attr error.', 'comment_created': datetime.datetime(2021, 8, 12, 15, 12, 32, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 687894428, 'comment_body': 'Do you mean custom? (not unique)', 'comment_created': datetime.datetime(2021, 8, 12, 16, 19, 3, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 687897033, 'comment_body': 'Possibly more readable when it looks like a module name, so underscores, not camel case.', 'comment_created': datetime.datetime(2021, 8, 12, 16, 21, 12, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 688657793, 'comment_body': 'typo', 'comment_created': datetime.datetime(2021, 8, 13, 17, 2, 11, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 689548496, 'comment_body': 'Do you plan to update this? If you think it is good as is, just resolve this conversation.', 'comment_created': datetime.datetime(2021, 8, 16, 13, 42, 2, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 689549386, 'comment_body': 'These now should work without folium, so you can remove the skip if (it is needed only for the actual folium related tests).', 'comment_created': datetime.datetime(2021, 8, 16, 13, 43, 5, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 689550603, 'comment_body': 'Create another class for this, possibly a file. Just to make it clear it is something different. ', 'comment_created': datetime.datetime(2021, 8, 16, 13, 44, 42, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 689553008, 'comment_body': 'I have no idea what this will do in a ""headless"" environment such as CI, although I expect it is okay to do this. What happens when you run the test in the command line? What the doc says? Add a comment specifying it. Add also save to HTMK function or use just that if show may cause trouble.', 'comment_created': datetime.datetime(2021, 8, 16, 13, 47, 37, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 689559033, 'comment_body': 'Please avoid:\r\n\r\n```python\r\n# Open file\r\nfile.open()\r\n# Show x\r\nx.show()\r\n```\r\n\r\nThis should be clear from the code itself. Comment should explain the intention behind the line, describe motivation, or discuss some non-obvious details or side effects. It should not merely restate what the code already says unless the function names or other things are unclear. This is does not apply when writing documentation or examples where you may want to emphasize that show really does show.', 'comment_created': datetime.datetime(2021, 8, 16, 13, 54, 50, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 689562805, 'comment_body': 'Add another function to this class which tests show method which returns the Image object. You can just test the result with assertTrue. It will need the same ""can import ipython"" ""skip if"" test.', 'comment_created': datetime.datetime(2021, 8, 16, 13, 59, 8, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 689895708, 'comment_body': 'There were two `#Assert image exists` and I changed the wrong/other one. Oops! Now they both say something better. Thanks for catching it.', 'comment_created': datetime.datetime(2021, 8, 16, 22, 16, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 689911700, 'comment_body': ""In the command line, `interactive_map.show()` returns a folium object (specifically, something like `branca.element.Figure object at <...>`. I added a comment to the `show()` docstring saying it returned  a folium figure object. I'm not sure if this is problematic or not - my guess is not because the object is just taking up Python memory and will be deleted after Python is exited?"", 'comment_created': datetime.datetime(2021, 8, 16, 22, 53, 3, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 689962598, 'comment_body': 'I created a new file.', 'comment_created': datetime.datetime(2021, 8, 17, 1, 17, 10, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 689970684, 'comment_body': ""That sounds good. `show()` here is little surprising as in e.g. Matplotlib it may mean showing a window and waiting for a user to close it, i.e., show() seems like something will be shown (not the case in the tests), rather than an independent (although perhaps useless) object being returned. It makes sense in the context of Jupyter notebook, so let's leave it as is."", 'comment_created': datetime.datetime(2021, 8, 17, 1, 41, 42, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}]","[{'commit_sha': '2cada12b14a38cc2f2072fc85d6c197d0c6dc8fe', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c94590df40907f91f1f01dcf68a44e193acdef8', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ebbe9f5f94ad0a95e1eb9fefc18b535f5f286ae', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6912d3d6ffc8ee4d15f74fcba525c701debc7b39', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f81329e95bc570dbbb74caf53accef0680d5ce1', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '13bb391959897c608cae594da9cde1b9639e586f', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b96c47c4d924a2dae3bb8f170de3778aca5464b', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b0e7c8683a308bdb4a961febd78eda27f04db12', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d5320c9d17f810f17d79c5e86aeb8e343d50ef6', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46e7a862896beff39eb1ccf1adb4f4333cf85c21', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef2bcba8ac3c4c9bb27f17ca5a6e466bfb5c9f3c', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'beb4fca6f2fbd24406f9abc7ffab643ce045d741', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd7ecf4ba94b0706a32af543506237cb2d4dc30eb', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e28356400a83656203efa48f125167dbb692904', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71e74b281c2d4ccd2dfd334c1ce77f249edff97b', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '397d14a6879e1aa0e3e84ee3a858c7f3d19230ac', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64b6a91de740d8bf1c88d61184657c38b204d35f', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16bec122b26e9431d886e7093f28ce4d8b1f7de9', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e1db80c02dcff48c40e548eef4b1d421dec1bed', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '58687bff2efe5a04edab115b32f8399c648e0c3c', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a8b15edc79028162a7fa012077b6b37d2bd92dfc', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}]",Caitlin Haedrich,69856275,,User,,31,,5,13
713852344,Docstring improvements,"* Minor improvements to the docstrings in `grass.jupyter`

Comments, improvements, suggestions welcome! Clear docstrings are important.

This PR part of an ongoing Google Summer of Code project, Improved Integration of GRASS GIS and Jupyter Notebooks. You can find more information [here](https://trac.osgeo.org/grass/wiki/GSoC/2021/JupyterAndGRASS). ",True,1800,https://api.github.com/repos/OSGeo/grass/pulls/1800,https://github.com/OSGeo/grass/pull/1800,closed,48,8,4,10,1,3,3,0,"[{'name': 'enhancement'}, {'name': 'gsoc'}, {'name': 'manual'}]",2021-08-17 01:49:06+00:00,2021-08-21 02:30:52+00:00,348106.0,"4 days, 0:41:46","[{'comment_id': 690000295, 'comment_body': '`using grass.script.run_command()` is relevant in the detailed description because it, for example, influences what syntax should be used. However, ""using run_command"" is not the purpose of the this function which is what this first sentence of documentaion should describe.\r\n\r\nGRASS library is confusing: C library? Python library? Library of modules makes sense, but it is rarely used. No clear rule here. Things such as ""display modules"" and ""modules from the display family"" are used. ""d-modules""/""d-commands"" is not, but seemed okay to me lately, but not readable for novices similarly to the more traditional ""`d.*` commands"".', 'comment_created': datetime.datetime(2021, 8, 17, 3, 7, 12, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 690001190, 'comment_body': ""Please check Sphinx for both the kwargs syntax and reffering to functions (I'm not sure if the `**` is needed and cursive may be recommend instead of `()` when referring to functions)."", 'comment_created': datetime.datetime(2021, 8, 17, 3, 10, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 692612916, 'comment_body': 'If you want something like NOTE, use Sphinx/Docutils way of doing a note.', 'comment_created': datetime.datetime(2021, 8, 20, 2, 26, 42, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}]","[{'commit_sha': '093eb5f19eca2e1a49e9c6292f2f499c13671a74', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '75d38d1319becf5c5dc56a2012796d511cfee00d', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3f12ec5d115418b5ad25ec6afc0a7a841743159', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e92205d5e3c202350fdc245f87bd22de0e52941b', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ed593676580b20397299bf48bdd300046ff668a', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bbe61cec73578238ab0fb7c3dd572efe92d3d10b', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60d65a59219a024f0c04d162db9ecc890efc16f9', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd2a9961f6e796bb4f07e29f66465453370b560bf', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7de327f7fe86fcd372ccaba369cba0c5a0ef9a6c', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96725752b44f3946b0f268d8eec19b6b2f131ef1', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}]",Caitlin Haedrich,69856275,,User,,31,,5,13
711227725,Example notebooks,"* Example notebooks for `grass.jupyter`
* `font` parameter for GrassRenderer

You can try the notebooks out in Binder here:
https://mybinder.org/v2/gh/chaedri/grass/Example-Notebooks?urlpath=lab%2Ftree%2Fdoc%2Fnotebooks%2Fgrass_jupyter.ipynb

This PR is part of an ongoing Google Summer of Code project, Improved Integration of GRASS GIS and Jupyter Notebooks. You can find more information [here](https://trac.osgeo.org/grass/wiki/GSoC/2021/JupyterAndGRASS). ",True,1787,https://api.github.com/repos/OSGeo/grass/pulls/1787,https://github.com/OSGeo/grass/pull/1787,closed,1159,211,8,15,3,19,3,0,"[{'name': 'enhancement'}, {'name': 'gsoc'}, {'name': 'manual'}]",2021-08-12 16:37:43+00:00,2021-08-22 17:14:22+00:00,866199.0,"10 days, 0:36:39","[{'comment_id': 692346112, 'comment_body': 'It does not work here with this path. Why not the one that was before? If I switch back to that one, it runs fine. Otherwise, errors because it does not find the data', 'comment_created': datetime.datetime(2021, 8, 19, 17, 34, 12, tzinfo=datetime.timezone.utc), 'commenter': 'veroandreo', 'type': 'User'}, {'comment_id': 692400210, 'comment_body': ""Yes, the path should be `../../data/grassdata` - I changed it to test on my local machine before pushing and forgot to change it back. Ooops! It'll be fixed on the next commit."", 'comment_created': datetime.datetime(2021, 8, 19, 18, 54, 51, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 692614291, 'comment_body': 'Extra backtick at the end of the line.', 'comment_created': datetime.datetime(2021, 8, 20, 2, 30, 39, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 693016953, 'comment_body': 'I separated computation and visualization and switch to d_shade - that is a neat module!', 'comment_created': datetime.datetime(2021, 8, 20, 15, 2, 24, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 693289772, 'comment_body': 'I think I marked the conversation as resolved too soon. The path still needs fixing.\r\n\r\nRelated to that, I guess another future todo is to fail in gj.init when the mapset does not exist...which brings in another issue and that is a good way of creating a location.', 'comment_created': datetime.datetime(2021, 8, 21, 2, 25, 49, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 693291445, 'comment_body': 'The border is not entirely visible. The original code does not have the border, so either change both or simply remove the b flag here.', 'comment_created': datetime.datetime(2021, 8, 21, 2, 41, 36, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 693293133, 'comment_body': ""There is couple of `m = ...Renderer`. It makes you scratch your head little bit. The variable name should fit with the object it references. Either, `m = gj.GrassRenderer()` and result `r` from above and use that opportunity to show d.erase or use more descriptive names everywhere boundary_img or boundary_renderer. ...or maybe it's time to re-evaluate the name renderer (plot, image, figure, see Matplotlib)."", 'comment_created': datetime.datetime(2021, 8, 21, 2, 58, 47, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 693293265, 'comment_body': 'Remove Map. Refer to the class by its name. Same above.', 'comment_created': datetime.datetime(2021, 8, 21, 3, 0, 25, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 693293356, 'comment_body': 'This comes from the original notebook, but it would be nice to have consistent quotes used everywhere (that is double quotes).', 'comment_created': datetime.datetime(2021, 8, 21, 3, 1, 36, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 693293542, 'comment_body': 'r1 and r2 may work as well although not ideal.', 'comment_created': datetime.datetime(2021, 8, 21, 3, 2, 56, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 693381240, 'comment_body': 'Inspired by Matplotlib, I changed quite a few of these. I went with `img` (and `img2` in this case) for `GrassRenderer` and `fig` for `InteractiveMap`.', 'comment_created': datetime.datetime(2021, 8, 21, 17, 37, 10, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 693381383, 'comment_body': 'Noted. Yes, I fixed it in one commit then changed it back in the next one to test it on my computer and then forgot to change it back again... Oops.', 'comment_created': datetime.datetime(2021, 8, 21, 17, 38, 29, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 693425980, 'comment_body': 'Why this cell here? It is in the basic intro notebook. Not really specific to the new API for Jupyter.', 'comment_created': datetime.datetime(2021, 8, 22, 1, 55, 47, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 693426284, 'comment_body': 'The sentence about GrassRenderer is misleading. It really renders, not just displays. It is called rendered after all. As similar sentence in one of the following cells is much better. However, starting from the current sentence something about ""using GRASS rendering engine in the background"" might be good.', 'comment_created': datetime.datetime(2021, 8, 22, 2, 0, 12, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 693426817, 'comment_body': 'The name of the original notebook is wrong and if you write it as [basic_example.ipynb](basic_example.ipynb), it actually opens the other one.', 'comment_created': datetime.datetime(2021, 8, 22, 2, 6, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 693427033, 'comment_body': '`count` seems to be sufficient to me.', 'comment_created': datetime.datetime(2021, 8, 22, 2, 8, 40, tzinfo=datetime.timezone.utc), 'commenter': 'wenzeslaus', 'type': 'User'}, {'comment_id': 693430429, 'comment_body': ""I deleted it since it's in the basic notebook."", 'comment_created': datetime.datetime(2021, 8, 22, 2, 47, 17, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 693430911, 'comment_body': 'I changed it to: ""Using the GRASS rendering engine in the background, GrassRenderer creates maps as PNG images.""', 'comment_created': datetime.datetime(2021, 8, 22, 2, 52, 51, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}, {'comment_id': 693431389, 'comment_body': 'Good catch and good idea!', 'comment_created': datetime.datetime(2021, 8, 22, 2, 57, 48, tzinfo=datetime.timezone.utc), 'commenter': 'chaedri', 'type': 'User'}]","[{'commit_sha': '093eb5f19eca2e1a49e9c6292f2f499c13671a74', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '75d38d1319becf5c5dc56a2012796d511cfee00d', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c72daa80ee7e5681fc2d4665da50513f74312450', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7281354a99ad3b17722ffe9069e148bcb55f6d93', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9fd15f5e4d467d67f78f16245b8388b5b3cf8389', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57cf0c5508f22f515f9a3c69b051091f1282e5b2', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ad91bdc532808820dfc387d206df3f9c700b99e', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e64ce741bcb8ada4c8ae71bbe56088b9c65ec78d', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7bced09e9c3606cc47dc791f3e86422c3a24cf78', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1024e8bdb7e7ed938d008046a0513da8acb216be', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e0a8fd520c7a2b03becd4a6be189ff3100b0dfd', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2638596fdcd80e8d7d06c25fb665f7c05d588d23', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3bdee6bf350e3eb187dc1331b913b000a956bbe8', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b4768e1abadbc79b6be84264fa1919fc438e0c75', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7f336840c3a0ed6359c63b09f34dbbd1c56840c', 'committer_username': 'chaedri', 'committer_name': 'Caitlin Haedrich', 'committer_email': None, 'commit_date': datetime.datetime(2020, 8, 18, 13, 41, 56, tzinfo=datetime.timezone.utc)}]",Caitlin Haedrich,69856275,,User,,31,,5,13

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
187247007,grass,OSGeo/grass,C,297,814,46,123,22870,536,19,127,"[{'id': 1925875900, 'number': 3880, 'closed': datetime.datetime(2024, 6, 19, 23, 7, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 6, 18, 7, 36, 30, tzinfo=datetime.timezone.utc), 'time_taken': 142250.0, 'time_delta': '1 day, 15:30:50', 'additions': 15, 'deletions': 13, 'state': 'closed'}, {'id': 1778005949, 'number': 3513, 'closed': datetime.datetime(2024, 4, 3, 13, 41, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 3, 18, 17, 49, 8, tzinfo=datetime.timezone.utc), 'time_taken': 1367530.0, 'time_delta': '15 days, 19:52:10', 'additions': 97, 'deletions': 40, 'state': 'closed'}, {'id': 1755362612, 'number': 3472, 'closed': datetime.datetime(2024, 3, 4, 20, 55, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 3, 4, 19, 5, tzinfo=datetime.timezone.utc), 'time_taken': 6645.0, 'time_delta': '1:50:45', 'additions': 49, 'deletions': 1, 'state': 'closed'}, {'id': 1381067263, 'number': 3036, 'closed': datetime.datetime(2023, 11, 30, 18, 54, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 6, 15, 21, 49, tzinfo=datetime.timezone.utc), 'time_taken': 15305533.0, 'time_delta': '177 days, 3:32:13', 'additions': 563, 'deletions': 32, 'state': 'closed'}, {'id': 1376770871, 'number': 2996, 'closed': datetime.datetime(2023, 6, 6, 15, 36, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 3, 9, 3, 55, tzinfo=datetime.timezone.utc), 'time_taken': 282744.0, 'time_delta': '3 days, 6:32:24', 'additions': 564, 'deletions': 0, 'state': 'closed'}, {'id': 912100138, 'number': 2312, 'closed': datetime.datetime(2022, 4, 26, 13, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 18, 14, 44, 6, tzinfo=datetime.timezone.utc), 'time_taken': 686994.0, 'time_delta': '7 days, 22:49:54', 'additions': 17, 'deletions': 18, 'state': 'closed'}, {'id': 910416455, 'number': 2306, 'closed': datetime.datetime(2022, 4, 18, 17, 14, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 14, 22, 20, 16, tzinfo=datetime.timezone.utc), 'time_taken': 327263.0, 'time_delta': '3 days, 18:54:23', 'additions': 135, 'deletions': 126, 'state': 'closed'}, {'id': 910152067, 'number': 2305, 'closed': datetime.datetime(2022, 4, 14, 20, 33, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 14, 16, 48, 14, tzinfo=datetime.timezone.utc), 'time_taken': 13538.0, 'time_delta': '3:45:38', 'additions': 166, 'deletions': 175, 'state': 'closed'}, {'id': 852487405, 'number': 2208, 'closed': datetime.datetime(2022, 4, 13, 1, 3, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 2, 14, 20, 26, 5, tzinfo=datetime.timezone.utc), 'time_taken': 4941433.0, 'time_delta': '57 days, 4:37:13', 'additions': 451, 'deletions': 165, 'state': 'closed'}, {'id': 800308933, 'number': 2015, 'closed': datetime.datetime(2021, 12, 20, 16, 37, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 12, 10, 23, 21, 54, tzinfo=datetime.timezone.utc), 'time_taken': 839737.0, 'time_delta': '9 days, 17:15:37', 'additions': 2, 'deletions': 6, 'state': 'closed'}, {'id': 800090109, 'number': 2012, 'closed': datetime.datetime(2022, 3, 27, 23, 14, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 12, 10, 17, 1, 3, tzinfo=datetime.timezone.utc), 'time_taken': 9267215.0, 'time_delta': '107 days, 6:13:35', 'additions': 4, 'deletions': 1, 'state': 'closed'}, {'id': 799084354, 'number': 2010, 'closed': datetime.datetime(2022, 4, 13, 13, 38, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 12, 9, 18, 24, 30, tzinfo=datetime.timezone.utc), 'time_taken': 10782836.0, 'time_delta': '124 days, 19:13:56', 'additions': 988, 'deletions': 5, 'state': 'closed'}, {'id': 713852344, 'number': 1800, 'closed': datetime.datetime(2021, 8, 21, 2, 30, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 17, 1, 49, 6, tzinfo=datetime.timezone.utc), 'time_taken': 348106.0, 'time_delta': '4 days, 0:41:46', 'additions': 48, 'deletions': 8, 'state': 'closed'}, {'id': 711227725, 'number': 1787, 'closed': datetime.datetime(2021, 8, 22, 17, 14, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 12, 16, 37, 43, tzinfo=datetime.timezone.utc), 'time_taken': 866199.0, 'time_delta': '10 days, 0:36:39', 'additions': 1159, 'deletions': 211, 'state': 'closed'}, {'id': 700962388, 'number': 1769, 'closed': datetime.datetime(2021, 8, 11, 18, 38, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 1, 18, 43, 56, tzinfo=datetime.timezone.utc), 'time_taken': 863652.0, 'time_delta': '9 days, 23:54:12', 'additions': 281, 'deletions': 117, 'state': 'closed'}, {'id': 694014563, 'number': 1754, 'closed': datetime.datetime(2021, 8, 7, 15, 10, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 21, 3, 25, 46, tzinfo=datetime.timezone.utc), 'time_taken': 1511092.0, 'time_delta': '17 days, 11:44:52', 'additions': 37, 'deletions': 19, 'state': 'closed'}, {'id': 692765393, 'number': 1739, 'closed': datetime.datetime(2021, 8, 17, 3, 20, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 19, 16, 47, 16, tzinfo=datetime.timezone.utc), 'time_taken': 2457187.0, 'time_delta': '28 days, 10:33:07', 'additions': 272, 'deletions': 17, 'state': 'closed'}, {'id': 690227266, 'number': 1727, 'closed': datetime.datetime(2021, 7, 30, 19, 19, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 14, 21, 10, 33, tzinfo=datetime.timezone.utc), 'time_taken': 1375728.0, 'time_delta': '15 days, 22:08:48', 'additions': 28, 'deletions': 12, 'state': 'closed'}, {'id': 689268261, 'number': 1723, 'closed': datetime.datetime(2021, 7, 29, 21, 20, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 13, 17, 35, 16, tzinfo=datetime.timezone.utc), 'time_taken': 1395906.0, 'time_delta': '16 days, 3:45:06', 'additions': 64, 'deletions': 6, 'state': 'closed'}, {'id': 688078081, 'number': 1721, 'closed': datetime.datetime(2021, 7, 13, 15, 13, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 12, 18, 34, 30, tzinfo=datetime.timezone.utc), 'time_taken': 74348.0, 'time_delta': '20:39:08', 'additions': 11, 'deletions': 5, 'state': 'closed'}, {'id': 683321742, 'number': 1710, 'closed': datetime.datetime(2021, 7, 19, 21, 3, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 5, 3, 21, 9, tzinfo=datetime.timezone.utc), 'time_taken': 1273318.0, 'time_delta': '14 days, 17:41:58', 'additions': 226, 'deletions': 21, 'state': 'closed'}, {'id': 678420122, 'number': 1686, 'closed': datetime.datetime(2021, 6, 28, 18, 58, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 26, 22, 12, 26, tzinfo=datetime.timezone.utc), 'time_taken': 161146.0, 'time_delta': '1 day, 20:45:46', 'additions': 74, 'deletions': 27, 'state': 'closed'}, {'id': 677961602, 'number': 1684, 'closed': datetime.datetime(2021, 7, 8, 16, 20, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 25, 14, 32, 49, tzinfo=datetime.timezone.utc), 'time_taken': 1129642.0, 'time_delta': '13 days, 1:47:22', 'additions': 146, 'deletions': 12, 'state': 'closed'}, {'id': 674126685, 'number': 1668, 'closed': datetime.datetime(2021, 7, 2, 18, 25, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 21, 0, 35, 34, tzinfo=datetime.timezone.utc), 'time_taken': 1014597.0, 'time_delta': '11 days, 17:49:57', 'additions': 139, 'deletions': 41, 'state': 'closed'}, {'id': 666052942, 'number': 1629, 'closed': datetime.datetime(2021, 6, 17, 2, 21, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 9, 16, 6, 8, tzinfo=datetime.timezone.utc), 'time_taken': 641708.0, 'time_delta': '7 days, 10:15:08', 'additions': 209, 'deletions': 1, 'state': 'closed'}, {'id': 666049016, 'number': 1628, 'closed': datetime.datetime(2021, 6, 15, 1, 5, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 9, 16, 0, 52, tzinfo=datetime.timezone.utc), 'time_taken': 464690.0, 'time_delta': '5 days, 9:04:50', 'additions': 110, 'deletions': 2, 'state': 'closed'}, {'id': 657702206, 'number': 1603, 'closed': datetime.datetime(2021, 6, 10, 3, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 30, 13, 36, 23, tzinfo=datetime.timezone.utc), 'time_taken': 914077.0, 'time_delta': '10 days, 13:54:37', 'additions': 102, 'deletions': 0, 'state': 'closed'}]"
