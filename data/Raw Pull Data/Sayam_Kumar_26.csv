pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
441494183,Add Full Rank Approximation,"This PR adds Full Rank ADVI interface. It is ready to review. Just to experiment with the API, I have created a [gist](https://gist.github.com/Sayam753/23592188b951bdeb53029eb0c4f4f2c3) inspired from @ColCarroll's [notebook](https://nbviewer.jupyter.org/gist/ColCarroll/d673a3af7169bd713bcbdb9445d4a543). I look forward to include mixture comparisons as well.

- [X] Add Full Rank ADVI
- [X] Add docstrings
- [X] Add tests
- [X] Change variable flattening to model flattening
- [X] Add Interval transformation
- [X] Rerun quick start notebook
- [X] Add deterministic callbacks
- [X] Add tests for deterministic callbacks",True,289,https://api.github.com/repos/pymc-devs/pymc4/pulls/289,https://github.com/pymc-devs/pymc4/pull/289,closed,272,138,9,10,17,9,0,0,[],2020-06-29 15:33:36+00:00,2020-07-27 17:33:23+00:00,2426387.0,"28 days, 1:59:47","[{'comment_id': 449146594, 'comment_body': 'need a function flat->dict', 'comment_created': datetime.datetime(2020, 7, 2, 16, 48, 33, tzinfo=datetime.timezone.utc), 'commenter': 'ferrine', 'type': 'User'}, {'comment_id': 449146775, 'comment_body': 'better be implemented in ordering\r\n', 'comment_created': datetime.datetime(2020, 7, 2, 16, 48, 56, tzinfo=datetime.timezone.utc), 'commenter': 'ferrine', 'type': 'User'}, {'comment_id': 449148440, 'comment_body': 'we need tests to make sure all making sense kwargs work properly (`sample_size`, etc)', 'comment_created': datetime.datetime(2020, 7, 2, 16, 52, 17, tzinfo=datetime.timezone.utc), 'commenter': 'ferrine', 'type': 'User'}, {'comment_id': 456204918, 'comment_body': 'Resolved in ccd626c.', 'comment_created': datetime.datetime(2020, 7, 17, 3, 58, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Sayam753', 'type': 'User'}, {'comment_id': 456204976, 'comment_body': 'Resolved in ccd626c.', 'comment_created': datetime.datetime(2020, 7, 17, 3, 58, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Sayam753', 'type': 'User'}, {'comment_id': 456204986, 'comment_body': 'Resolved in ccd626c.', 'comment_created': datetime.datetime(2020, 7, 17, 3, 58, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Sayam753', 'type': 'User'}, {'comment_id': 456357568, 'comment_body': ""Let's also add a test to make sure it works"", 'comment_created': datetime.datetime(2020, 7, 17, 10, 24, 46, tzinfo=datetime.timezone.utc), 'commenter': 'ferrine', 'type': 'User'}, {'comment_id': 456553254, 'comment_body': ""That's a good idea. Resolved in 6189ba1."", 'comment_created': datetime.datetime(2020, 7, 17, 16, 40, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Sayam753', 'type': 'User'}, {'comment_id': 460703177, 'comment_body': 'Figuring out reasons of Cholesky Decomposition failure, this [comment](https://github.com/ICL-SML/Doubly-Stochastic-DGP/issues/9#issuecomment-371167725) has been very helpful. Here are my few observations experimenting with VI and Gaussian Processes - \r\n1. High learning rates (order of 1e-2) leads to cholesky decomposition errors.\r\n2. Both Mean Field and Full Rank ADVI also lead to decomposition error with `tf.float32` even if we add a small WhiteNoise to the diagonal. But testing ADVI with `tf.float64` leads to greater numerical stability of covariance matrix. So, I changed the `dtype_hint` to use `tf.float64`.', 'comment_created': datetime.datetime(2020, 7, 27, 7, 42, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Sayam753', 'type': 'User'}]","[{'commit_sha': '272864311eba2386d7fcfa5c6a4f104d8d091fa0', 'committer_username': 'Sayam753', 'committer_name': 'Sayam Kumar', 'committer_email': 'sayamkumar049@gmail.com', 'commit_date': datetime.datetime(2018, 9, 7, 16, 17, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '00b861166f2f551ac9fcba935c78a4a45eb3085e', 'committer_username': 'Sayam753', 'committer_name': 'Sayam Kumar', 'committer_email': 'sayamkumar049@gmail.com', 'commit_date': datetime.datetime(2018, 9, 7, 16, 17, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c5dcac9c8c474a2c8731a3ec12c9898fb20ecb5', 'committer_username': 'Sayam753', 'committer_name': 'Sayam Kumar', 'committer_email': 'sayamkumar049@gmail.com', 'commit_date': datetime.datetime(2018, 9, 7, 16, 17, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4291057f65ea3912dcfc0c1ec12eca00ae231932', 'committer_username': 'Sayam753', 'committer_name': 'Sayam Kumar', 'committer_email': 'sayamkumar049@gmail.com', 'commit_date': datetime.datetime(2018, 9, 7, 16, 17, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff4875c0b89d9bbc10b68d70661286f9db6a7359', 'committer_username': 'Sayam753', 'committer_name': 'Sayam Kumar', 'committer_email': 'sayamkumar049@gmail.com', 'commit_date': datetime.datetime(2018, 9, 7, 16, 17, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd195daa476ee849890f6eab14674b64dffb22ffe', 'committer_username': 'Sayam753', 'committer_name': 'Sayam Kumar', 'committer_email': 'sayamkumar049@gmail.com', 'commit_date': datetime.datetime(2018, 9, 7, 16, 17, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ee100322d503f7e07997b86b869766a4d4bf248', 'committer_username': 'Sayam753', 'committer_name': 'Sayam Kumar', 'committer_email': 'sayamkumar049@gmail.com', 'commit_date': datetime.datetime(2018, 9, 7, 16, 17, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '800f9df4711a43699f13b2ca5880c18577f4b331', 'committer_username': 'Sayam753', 'committer_name': 'Sayam Kumar', 'committer_email': 'sayamkumar049@gmail.com', 'commit_date': datetime.datetime(2018, 9, 7, 16, 17, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '109eda806d35f600a34a1f8a9a918a3fdd931030', 'committer_username': 'Sayam753', 'committer_name': 'Sayam Kumar', 'committer_email': 'sayamkumar049@gmail.com', 'commit_date': datetime.datetime(2018, 9, 7, 16, 17, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5137396e53e4c3d6ad8c05ce47370ab73bac8c47', 'committer_username': 'Sayam753', 'committer_name': 'Sayam Kumar', 'committer_email': 'sayamkumar049@gmail.com', 'commit_date': datetime.datetime(2018, 9, 7, 16, 17, 24, tzinfo=datetime.timezone.utc)}]",Sayam Kumar,43073325,sayamkumar049@gmail.com,User,,45,,160,109
441494183,Add Full Rank Approximation,"This PR adds Full Rank ADVI interface. It is ready to review. Just to experiment with the API, I have created a [gist](https://gist.github.com/Sayam753/23592188b951bdeb53029eb0c4f4f2c3) inspired from @ColCarroll's [notebook](https://nbviewer.jupyter.org/gist/ColCarroll/d673a3af7169bd713bcbdb9445d4a543). I look forward to include mixture comparisons as well.

- [X] Add Full Rank ADVI
- [X] Add docstrings
- [X] Add tests
- [X] Change variable flattening to model flattening
- [X] Add Interval transformation
- [X] Rerun quick start notebook
- [X] Add deterministic callbacks
- [X] Add tests for deterministic callbacks",True,289,https://api.github.com/repos/pymc-devs/pymc4/pulls/289,https://github.com/pymc-devs/pymc4/pull/289,closed,272,138,9,10,17,9,0,0,[],2020-06-29 15:33:36+00:00,2020-07-27 17:33:23+00:00,2426387.0,"28 days, 1:59:47","[{'comment_id': 449146594, 'comment_body': 'need a function flat->dict', 'comment_created': datetime.datetime(2020, 7, 2, 16, 48, 33, tzinfo=datetime.timezone.utc), 'commenter': 'ferrine', 'type': 'User'}, {'comment_id': 449146775, 'comment_body': 'better be implemented in ordering\r\n', 'comment_created': datetime.datetime(2020, 7, 2, 16, 48, 56, tzinfo=datetime.timezone.utc), 'commenter': 'ferrine', 'type': 'User'}, {'comment_id': 449148440, 'comment_body': 'we need tests to make sure all making sense kwargs work properly (`sample_size`, etc)', 'comment_created': datetime.datetime(2020, 7, 2, 16, 52, 17, tzinfo=datetime.timezone.utc), 'commenter': 'ferrine', 'type': 'User'}, {'comment_id': 456204918, 'comment_body': 'Resolved in ccd626c.', 'comment_created': datetime.datetime(2020, 7, 17, 3, 58, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Sayam753', 'type': 'User'}, {'comment_id': 456204976, 'comment_body': 'Resolved in ccd626c.', 'comment_created': datetime.datetime(2020, 7, 17, 3, 58, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Sayam753', 'type': 'User'}, {'comment_id': 456204986, 'comment_body': 'Resolved in ccd626c.', 'comment_created': datetime.datetime(2020, 7, 17, 3, 58, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Sayam753', 'type': 'User'}, {'comment_id': 456357568, 'comment_body': ""Let's also add a test to make sure it works"", 'comment_created': datetime.datetime(2020, 7, 17, 10, 24, 46, tzinfo=datetime.timezone.utc), 'commenter': 'ferrine', 'type': 'User'}, {'comment_id': 456553254, 'comment_body': ""That's a good idea. Resolved in 6189ba1."", 'comment_created': datetime.datetime(2020, 7, 17, 16, 40, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Sayam753', 'type': 'User'}, {'comment_id': 460703177, 'comment_body': 'Figuring out reasons of Cholesky Decomposition failure, this [comment](https://github.com/ICL-SML/Doubly-Stochastic-DGP/issues/9#issuecomment-371167725) has been very helpful. Here are my few observations experimenting with VI and Gaussian Processes - \r\n1. High learning rates (order of 1e-2) leads to cholesky decomposition errors.\r\n2. Both Mean Field and Full Rank ADVI also lead to decomposition error with `tf.float32` even if we add a small WhiteNoise to the diagonal. But testing ADVI with `tf.float64` leads to greater numerical stability of covariance matrix. So, I changed the `dtype_hint` to use `tf.float64`.', 'comment_created': datetime.datetime(2020, 7, 27, 7, 42, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Sayam753', 'type': 'User'}]","[{'commit_sha': '272864311eba2386d7fcfa5c6a4f104d8d091fa0', 'committer_username': 'Sayam753', 'committer_name': 'Sayam Kumar', 'committer_email': 'sayamkumar049@gmail.com', 'commit_date': datetime.datetime(2018, 9, 7, 16, 17, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '00b861166f2f551ac9fcba935c78a4a45eb3085e', 'committer_username': 'Sayam753', 'committer_name': 'Sayam Kumar', 'committer_email': 'sayamkumar049@gmail.com', 'commit_date': datetime.datetime(2018, 9, 7, 16, 17, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c5dcac9c8c474a2c8731a3ec12c9898fb20ecb5', 'committer_username': 'Sayam753', 'committer_name': 'Sayam Kumar', 'committer_email': 'sayamkumar049@gmail.com', 'commit_date': datetime.datetime(2018, 9, 7, 16, 17, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4291057f65ea3912dcfc0c1ec12eca00ae231932', 'committer_username': 'Sayam753', 'committer_name': 'Sayam Kumar', 'committer_email': 'sayamkumar049@gmail.com', 'commit_date': datetime.datetime(2018, 9, 7, 16, 17, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff4875c0b89d9bbc10b68d70661286f9db6a7359', 'committer_username': 'Sayam753', 'committer_name': 'Sayam Kumar', 'committer_email': 'sayamkumar049@gmail.com', 'commit_date': datetime.datetime(2018, 9, 7, 16, 17, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd195daa476ee849890f6eab14674b64dffb22ffe', 'committer_username': 'Sayam753', 'committer_name': 'Sayam Kumar', 'committer_email': 'sayamkumar049@gmail.com', 'commit_date': datetime.datetime(2018, 9, 7, 16, 17, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ee100322d503f7e07997b86b869766a4d4bf248', 'committer_username': 'Sayam753', 'committer_name': 'Sayam Kumar', 'committer_email': 'sayamkumar049@gmail.com', 'commit_date': datetime.datetime(2018, 9, 7, 16, 17, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '800f9df4711a43699f13b2ca5880c18577f4b331', 'committer_username': 'Sayam753', 'committer_name': 'Sayam Kumar', 'committer_email': 'sayamkumar049@gmail.com', 'commit_date': datetime.datetime(2018, 9, 7, 16, 17, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '109eda806d35f600a34a1f8a9a918a3fdd931030', 'committer_username': 'Sayam753', 'committer_name': 'Sayam Kumar', 'committer_email': 'sayamkumar049@gmail.com', 'commit_date': datetime.datetime(2018, 9, 7, 16, 17, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5137396e53e4c3d6ad8c05ce47370ab73bac8c47', 'committer_username': 'Sayam753', 'committer_name': 'Sayam Kumar', 'committer_email': 'sayamkumar049@gmail.com', 'commit_date': datetime.datetime(2018, 9, 7, 16, 17, 24, tzinfo=datetime.timezone.utc)}]",Sayam Kumar,43073325,sayamkumar049@gmail.com,User,,45,,160,109
441494183,Add Full Rank Approximation,"This PR adds Full Rank ADVI interface. It is ready to review. Just to experiment with the API, I have created a [gist](https://gist.github.com/Sayam753/23592188b951bdeb53029eb0c4f4f2c3) inspired from @ColCarroll's [notebook](https://nbviewer.jupyter.org/gist/ColCarroll/d673a3af7169bd713bcbdb9445d4a543). I look forward to include mixture comparisons as well.

- [X] Add Full Rank ADVI
- [X] Add docstrings
- [X] Add tests
- [X] Change variable flattening to model flattening
- [X] Add Interval transformation
- [X] Rerun quick start notebook
- [X] Add deterministic callbacks
- [X] Add tests for deterministic callbacks",True,289,https://api.github.com/repos/pymc-devs/pymc4/pulls/289,https://github.com/pymc-devs/pymc4/pull/289,closed,272,138,9,10,17,9,0,0,[],2020-06-29 15:33:36+00:00,2020-07-27 17:33:23+00:00,2426387.0,"28 days, 1:59:47","[{'comment_id': 449146594, 'comment_body': 'need a function flat->dict', 'comment_created': datetime.datetime(2020, 7, 2, 16, 48, 33, tzinfo=datetime.timezone.utc), 'commenter': 'ferrine', 'type': 'User'}, {'comment_id': 449146775, 'comment_body': 'better be implemented in ordering\r\n', 'comment_created': datetime.datetime(2020, 7, 2, 16, 48, 56, tzinfo=datetime.timezone.utc), 'commenter': 'ferrine', 'type': 'User'}, {'comment_id': 449148440, 'comment_body': 'we need tests to make sure all making sense kwargs work properly (`sample_size`, etc)', 'comment_created': datetime.datetime(2020, 7, 2, 16, 52, 17, tzinfo=datetime.timezone.utc), 'commenter': 'ferrine', 'type': 'User'}, {'comment_id': 456204918, 'comment_body': 'Resolved in ccd626c.', 'comment_created': datetime.datetime(2020, 7, 17, 3, 58, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Sayam753', 'type': 'User'}, {'comment_id': 456204976, 'comment_body': 'Resolved in ccd626c.', 'comment_created': datetime.datetime(2020, 7, 17, 3, 58, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Sayam753', 'type': 'User'}, {'comment_id': 456204986, 'comment_body': 'Resolved in ccd626c.', 'comment_created': datetime.datetime(2020, 7, 17, 3, 58, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Sayam753', 'type': 'User'}, {'comment_id': 456357568, 'comment_body': ""Let's also add a test to make sure it works"", 'comment_created': datetime.datetime(2020, 7, 17, 10, 24, 46, tzinfo=datetime.timezone.utc), 'commenter': 'ferrine', 'type': 'User'}, {'comment_id': 456553254, 'comment_body': ""That's a good idea. Resolved in 6189ba1."", 'comment_created': datetime.datetime(2020, 7, 17, 16, 40, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Sayam753', 'type': 'User'}, {'comment_id': 460703177, 'comment_body': 'Figuring out reasons of Cholesky Decomposition failure, this [comment](https://github.com/ICL-SML/Doubly-Stochastic-DGP/issues/9#issuecomment-371167725) has been very helpful. Here are my few observations experimenting with VI and Gaussian Processes - \r\n1. High learning rates (order of 1e-2) leads to cholesky decomposition errors.\r\n2. Both Mean Field and Full Rank ADVI also lead to decomposition error with `tf.float32` even if we add a small WhiteNoise to the diagonal. But testing ADVI with `tf.float64` leads to greater numerical stability of covariance matrix. So, I changed the `dtype_hint` to use `tf.float64`.', 'comment_created': datetime.datetime(2020, 7, 27, 7, 42, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Sayam753', 'type': 'User'}]","[{'commit_sha': '272864311eba2386d7fcfa5c6a4f104d8d091fa0', 'committer_username': 'Sayam753', 'committer_name': 'Sayam Kumar', 'committer_email': 'sayamkumar049@gmail.com', 'commit_date': datetime.datetime(2018, 9, 7, 16, 17, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '00b861166f2f551ac9fcba935c78a4a45eb3085e', 'committer_username': 'Sayam753', 'committer_name': 'Sayam Kumar', 'committer_email': 'sayamkumar049@gmail.com', 'commit_date': datetime.datetime(2018, 9, 7, 16, 17, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c5dcac9c8c474a2c8731a3ec12c9898fb20ecb5', 'committer_username': 'Sayam753', 'committer_name': 'Sayam Kumar', 'committer_email': 'sayamkumar049@gmail.com', 'commit_date': datetime.datetime(2018, 9, 7, 16, 17, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4291057f65ea3912dcfc0c1ec12eca00ae231932', 'committer_username': 'Sayam753', 'committer_name': 'Sayam Kumar', 'committer_email': 'sayamkumar049@gmail.com', 'commit_date': datetime.datetime(2018, 9, 7, 16, 17, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff4875c0b89d9bbc10b68d70661286f9db6a7359', 'committer_username': 'Sayam753', 'committer_name': 'Sayam Kumar', 'committer_email': 'sayamkumar049@gmail.com', 'commit_date': datetime.datetime(2018, 9, 7, 16, 17, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd195daa476ee849890f6eab14674b64dffb22ffe', 'committer_username': 'Sayam753', 'committer_name': 'Sayam Kumar', 'committer_email': 'sayamkumar049@gmail.com', 'commit_date': datetime.datetime(2018, 9, 7, 16, 17, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ee100322d503f7e07997b86b869766a4d4bf248', 'committer_username': 'Sayam753', 'committer_name': 'Sayam Kumar', 'committer_email': 'sayamkumar049@gmail.com', 'commit_date': datetime.datetime(2018, 9, 7, 16, 17, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '800f9df4711a43699f13b2ca5880c18577f4b331', 'committer_username': 'Sayam753', 'committer_name': 'Sayam Kumar', 'committer_email': 'sayamkumar049@gmail.com', 'commit_date': datetime.datetime(2018, 9, 7, 16, 17, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '109eda806d35f600a34a1f8a9a918a3fdd931030', 'committer_username': 'Sayam753', 'committer_name': 'Sayam Kumar', 'committer_email': 'sayamkumar049@gmail.com', 'commit_date': datetime.datetime(2018, 9, 7, 16, 17, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5137396e53e4c3d6ad8c05ce47370ab73bac8c47', 'committer_username': 'Sayam753', 'committer_name': 'Sayam Kumar', 'committer_email': 'sayamkumar049@gmail.com', 'commit_date': datetime.datetime(2018, 9, 7, 16, 17, 24, tzinfo=datetime.timezone.utc)}]",Sayam Kumar,43073325,sayamkumar049@gmail.com,User,,45,,160,109
463737081,[WIP] Add features to ADVI,"- [X] Add progress bar support.
- [X] Test progress bar in different OS. 
   (Tested on MacOS 10.15.6, Ubuntu 18.04.4 LTS, Windows 8.1 and Google colab environments)
- [X] Add `ParameterConvergence` criteria to test convergence.
- [X] Add LowRank Approximation.
- [X] Add LowRank ADVI tests.
- [X] Update quickstart notebook.
- [ ] Add an example notebook with hierarchical models and ADVI.",False,310,https://api.github.com/repos/pymc-devs/pymc4/pulls/310,https://github.com/pymc-devs/pymc4/pull/310,closed,467,84,7,4,1,0,0,0,[],2020-08-06 02:13:45+00:00,2023-01-10 16:05:50+00:00,76686725.0,"887 days, 13:52:05",[],"[{'commit_sha': '87c7d14f0fdc0bf0f3f28167e77fe6a9a8de49c0', 'committer_username': 'Sayam753', 'committer_name': 'Sayam Kumar', 'committer_email': 'sayamkumar049@gmail.com', 'commit_date': datetime.datetime(2018, 9, 7, 16, 17, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '395e292e3db7b11bc5570f37960ace69a0c4c176', 'committer_username': 'Sayam753', 'committer_name': 'Sayam Kumar', 'committer_email': 'sayamkumar049@gmail.com', 'commit_date': datetime.datetime(2018, 9, 7, 16, 17, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd72a4343e948fa82d243f178d3bf5d272d52171', 'committer_username': 'Sayam753', 'committer_name': 'Sayam Kumar', 'committer_email': 'sayamkumar049@gmail.com', 'commit_date': datetime.datetime(2018, 9, 7, 16, 17, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f0025d51a2207a11f625d8da0c208edd72dd85c', 'committer_username': 'Sayam753', 'committer_name': 'Sayam Kumar', 'committer_email': 'sayamkumar049@gmail.com', 'commit_date': datetime.datetime(2018, 9, 7, 16, 17, 24, tzinfo=datetime.timezone.utc)}]",Sayam Kumar,43073325,sayamkumar049@gmail.com,User,,45,,160,109
429279755,Add Variational Inference Interface,"Added Mean Field ADVI along with basic interface. I observe two different ways of adding VI approximations. One by [tfd.JointDistributionSequential](https://www.tensorflow.org/probability/api_docs/python/tfp/distributions/JointDistributionSequential?version=nightly) and other by [tfd.MultivariateNormalDiag](https://www.tensorflow.org/probability/api_docs/python/tfp/distributions/MultivariateNormalDiag?version=nightly). 

This interface incorporates the Sequential method. It may be possible to use `tfd.MultivariateNormalDiag` after having a flattened view of parameters. Any feedback at this implementation is welcomed.

- [X] Tests about convergence checks
- [X] Add convergence criteria example in quick start notebook - Will address this in another PR.
- [X] Include samples for untransformed variables as well
- [X] Handle shape issues with ArviZ while sampling
- [X] More user friendly optimizers
- [X] Configure atol for tests
- [X] Configure autobatching - Will address this in another PR.
- [X] Integrate Deterministics callback - Will address this in another PR.",True,280,https://api.github.com/repos/pymc-devs/pymc4/pulls/280,https://github.com/pymc-devs/pymc4/pull/280,closed,962,2,8,14,12,11,0,0,[],2020-06-06 15:55:31+00:00,2020-06-23 16:00:50+00:00,1469119.0,"17 days, 0:05:19","[{'comment_id': 436503639, 'comment_body': ""I can't get approximate posterior there, only loss, in case I do not explicitly pass approximation. As a result, I would expect Approximation class that is possible to give trace samples."", 'comment_created': datetime.datetime(2020, 6, 8, 7, 29, 12, tzinfo=datetime.timezone.utc), 'commenter': 'ferrine', 'type': 'User'}, {'comment_id': 436506431, 'comment_body': 'Remember, we will need API to convert samples from this distribution to [here](https://github.com/pymc-devs/pymc4/blob/d4936038e32a9dcb8b512d47aed98fddcc6667cc/pymc4/inference/utils.py#L34)', 'comment_created': datetime.datetime(2020, 6, 8, 7, 35, 37, tzinfo=datetime.timezone.utc), 'commenter': 'ferrine', 'type': 'User'}, {'comment_id': 439431689, 'comment_body': 'Resolved in a58a412', 'comment_created': datetime.datetime(2020, 6, 12, 13, 52, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Sayam753', 'type': 'User'}, {'comment_id': 439446516, 'comment_body': 'The interface now contains a `sample` method which can be used alongside `fit` function after getting the posterior. I have been observing how `trace` from `tfp.mcmc.sample_chain` gets converted to ArviZ InferenceData. Experimenting out with it ([gist](https://gist.github.com/Sayam753/36bf35c482b705545eecb5353a8f8f6a)), ArviZ shows a warning with respect to shapes for Multivariate Distributions, if `az.from_dict` is included in `sample` method. I am still exploring how to resolve that. Any suggestions over this will be helpful.', 'comment_created': datetime.datetime(2020, 6, 12, 14, 17, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Sayam753', 'type': 'User'}, {'comment_id': 439760225, 'comment_body': 'repetetive samples will be the same', 'comment_created': datetime.datetime(2020, 6, 13, 18, 46, 8, tzinfo=datetime.timezone.utc), 'commenter': 'ferrine', 'type': 'User'}, {'comment_id': 439761063, 'comment_body': 'convert sampled free vars to actual samples in the model like trace fn in MCMC', 'comment_created': datetime.datetime(2020, 6, 13, 18, 58, 33, tzinfo=datetime.timezone.utc), 'commenter': 'ferrine', 'type': 'User'}, {'comment_id': 443148405, 'comment_body': 'Resolved in a1d9679', 'comment_created': datetime.datetime(2020, 6, 20, 17, 56, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Sayam753', 'type': 'User'}, {'comment_id': 443149283, 'comment_body': 'add and explanation that optimizers API is too transparent that you can use plain to optimizers\r\n', 'comment_created': datetime.datetime(2020, 6, 20, 18, 9, 59, tzinfo=datetime.timezone.utc), 'commenter': 'ferrine', 'type': 'User'}, {'comment_id': 443149375, 'comment_body': 'add kwargs', 'comment_created': datetime.datetime(2020, 6, 20, 18, 11, 28, tzinfo=datetime.timezone.utc), 'commenter': 'ferrine', 'type': 'User'}, {'comment_id': 443150146, 'comment_body': 'why is it so large?', 'comment_created': datetime.datetime(2020, 6, 20, 18, 23, 49, tzinfo=datetime.timezone.utc), 'commenter': 'ferrine', 'type': 'User'}, {'comment_id': 443151284, 'comment_body': ""Can you please raise a NotImplementedError to indicate that's no ready?"", 'comment_created': datetime.datetime(2020, 6, 20, 18, 41, 52, tzinfo=datetime.timezone.utc), 'commenter': 'ferrine', 'type': 'User'}]","[{'commit_sha': '287b197330b9679f8fb1a61e6994836baabaa710', 'committer_username': 'Sayam753', 'committer_name': 'Sayam Kumar', 'committer_email': 'sayamkumar049@gmail.com', 'commit_date': datetime.datetime(2018, 9, 7, 16, 17, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56a1d7f4632a02b178f940c8e88c79aee7d3f91f', 'committer_username': 'Sayam753', 'committer_name': 'Sayam Kumar', 'committer_email': 'sayamkumar049@gmail.com', 'commit_date': datetime.datetime(2018, 9, 7, 16, 17, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9ea624c7b87671b1fa9f51a4d10e0ad41042ff9', 'committer_username': 'Sayam753', 'committer_name': 'Sayam Kumar', 'committer_email': 'sayamkumar049@gmail.com', 'commit_date': datetime.datetime(2018, 9, 7, 16, 17, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1770f0235551e15dbdc008300ddf96091512e60e', 'committer_username': 'Sayam753', 'committer_name': 'Sayam Kumar', 'committer_email': 'sayamkumar049@gmail.com', 'commit_date': datetime.datetime(2018, 9, 7, 16, 17, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '037f58951b3592092fd3ab400e65113d65440142', 'committer_username': 'Sayam753', 'committer_name': 'Sayam Kumar', 'committer_email': 'sayamkumar049@gmail.com', 'commit_date': datetime.datetime(2018, 9, 7, 16, 17, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ffbe4c83b890dd459ec77f6c9f29e81aba642b91', 'committer_username': 'Sayam753', 'committer_name': 'Sayam Kumar', 'committer_email': 'sayamkumar049@gmail.com', 'commit_date': datetime.datetime(2018, 9, 7, 16, 17, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a863b8443df1ede98a8c4b7e58e59edd62201067', 'committer_username': 'Sayam753', 'committer_name': 'Sayam Kumar', 'committer_email': 'sayamkumar049@gmail.com', 'commit_date': datetime.datetime(2018, 9, 7, 16, 17, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f21418f6bcc1ca095b238bb424fff04a5d4eea83', 'committer_username': 'Sayam753', 'committer_name': 'Sayam Kumar', 'committer_email': 'sayamkumar049@gmail.com', 'commit_date': datetime.datetime(2018, 9, 7, 16, 17, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '98d9fbb5585bfdc8c6237f01aa6411980bf8ef95', 'committer_username': 'Sayam753', 'committer_name': 'Sayam Kumar', 'committer_email': 'sayamkumar049@gmail.com', 'commit_date': datetime.datetime(2018, 9, 7, 16, 17, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '820f67d8761671d7a13c3d2b5cc06abac9b1e571', 'committer_username': 'Sayam753', 'committer_name': 'Sayam Kumar', 'committer_email': 'sayamkumar049@gmail.com', 'commit_date': datetime.datetime(2018, 9, 7, 16, 17, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f993b8e822c1e876b8db32268a6379b3daab7514', 'committer_username': 'Sayam753', 'committer_name': 'Sayam Kumar', 'committer_email': 'sayamkumar049@gmail.com', 'commit_date': datetime.datetime(2018, 9, 7, 16, 17, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '391a142da85fe26ac534c55ad04f2367672feef8', 'committer_username': 'Sayam753', 'committer_name': 'Sayam Kumar', 'committer_email': 'sayamkumar049@gmail.com', 'commit_date': datetime.datetime(2018, 9, 7, 16, 17, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '825e90b481f1e5468635074ce8213160fec75541', 'committer_username': 'Sayam753', 'committer_name': 'Sayam Kumar', 'committer_email': 'sayamkumar049@gmail.com', 'commit_date': datetime.datetime(2018, 9, 7, 16, 17, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57fd7492326cc26f991b4d9b934df53265f861d9', 'committer_username': 'Sayam753', 'committer_name': 'Sayam Kumar', 'committer_email': 'sayamkumar049@gmail.com', 'commit_date': datetime.datetime(2018, 9, 7, 16, 17, 24, tzinfo=datetime.timezone.utc)}]",Sayam Kumar,43073325,sayamkumar049@gmail.com,User,,45,,160,109
441494183,Add Full Rank Approximation,"This PR adds Full Rank ADVI interface. It is ready to review. Just to experiment with the API, I have created a [gist](https://gist.github.com/Sayam753/23592188b951bdeb53029eb0c4f4f2c3) inspired from @ColCarroll's [notebook](https://nbviewer.jupyter.org/gist/ColCarroll/d673a3af7169bd713bcbdb9445d4a543). I look forward to include mixture comparisons as well.

- [X] Add Full Rank ADVI
- [X] Add docstrings
- [X] Add tests
- [X] Change variable flattening to model flattening
- [X] Add Interval transformation
- [X] Rerun quick start notebook
- [X] Add deterministic callbacks
- [X] Add tests for deterministic callbacks",True,289,https://api.github.com/repos/pymc-devs/pymc4/pulls/289,https://github.com/pymc-devs/pymc4/pull/289,closed,272,138,9,10,17,9,0,0,[],2020-06-29 15:33:36+00:00,2020-07-27 17:33:23+00:00,2426387.0,"28 days, 1:59:47","[{'comment_id': 449146594, 'comment_body': 'need a function flat->dict', 'comment_created': datetime.datetime(2020, 7, 2, 16, 48, 33, tzinfo=datetime.timezone.utc), 'commenter': 'ferrine', 'type': 'User'}, {'comment_id': 449146775, 'comment_body': 'better be implemented in ordering\r\n', 'comment_created': datetime.datetime(2020, 7, 2, 16, 48, 56, tzinfo=datetime.timezone.utc), 'commenter': 'ferrine', 'type': 'User'}, {'comment_id': 449148440, 'comment_body': 'we need tests to make sure all making sense kwargs work properly (`sample_size`, etc)', 'comment_created': datetime.datetime(2020, 7, 2, 16, 52, 17, tzinfo=datetime.timezone.utc), 'commenter': 'ferrine', 'type': 'User'}, {'comment_id': 456204918, 'comment_body': 'Resolved in ccd626c.', 'comment_created': datetime.datetime(2020, 7, 17, 3, 58, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Sayam753', 'type': 'User'}, {'comment_id': 456204976, 'comment_body': 'Resolved in ccd626c.', 'comment_created': datetime.datetime(2020, 7, 17, 3, 58, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Sayam753', 'type': 'User'}, {'comment_id': 456204986, 'comment_body': 'Resolved in ccd626c.', 'comment_created': datetime.datetime(2020, 7, 17, 3, 58, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Sayam753', 'type': 'User'}, {'comment_id': 456357568, 'comment_body': ""Let's also add a test to make sure it works"", 'comment_created': datetime.datetime(2020, 7, 17, 10, 24, 46, tzinfo=datetime.timezone.utc), 'commenter': 'ferrine', 'type': 'User'}, {'comment_id': 456553254, 'comment_body': ""That's a good idea. Resolved in 6189ba1."", 'comment_created': datetime.datetime(2020, 7, 17, 16, 40, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Sayam753', 'type': 'User'}, {'comment_id': 460703177, 'comment_body': 'Figuring out reasons of Cholesky Decomposition failure, this [comment](https://github.com/ICL-SML/Doubly-Stochastic-DGP/issues/9#issuecomment-371167725) has been very helpful. Here are my few observations experimenting with VI and Gaussian Processes - \r\n1. High learning rates (order of 1e-2) leads to cholesky decomposition errors.\r\n2. Both Mean Field and Full Rank ADVI also lead to decomposition error with `tf.float32` even if we add a small WhiteNoise to the diagonal. But testing ADVI with `tf.float64` leads to greater numerical stability of covariance matrix. So, I changed the `dtype_hint` to use `tf.float64`.', 'comment_created': datetime.datetime(2020, 7, 27, 7, 42, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Sayam753', 'type': 'User'}]","[{'commit_sha': '272864311eba2386d7fcfa5c6a4f104d8d091fa0', 'committer_username': 'Sayam753', 'committer_name': 'Sayam Kumar', 'committer_email': 'sayamkumar049@gmail.com', 'commit_date': datetime.datetime(2018, 9, 7, 16, 17, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '00b861166f2f551ac9fcba935c78a4a45eb3085e', 'committer_username': 'Sayam753', 'committer_name': 'Sayam Kumar', 'committer_email': 'sayamkumar049@gmail.com', 'commit_date': datetime.datetime(2018, 9, 7, 16, 17, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c5dcac9c8c474a2c8731a3ec12c9898fb20ecb5', 'committer_username': 'Sayam753', 'committer_name': 'Sayam Kumar', 'committer_email': 'sayamkumar049@gmail.com', 'commit_date': datetime.datetime(2018, 9, 7, 16, 17, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4291057f65ea3912dcfc0c1ec12eca00ae231932', 'committer_username': 'Sayam753', 'committer_name': 'Sayam Kumar', 'committer_email': 'sayamkumar049@gmail.com', 'commit_date': datetime.datetime(2018, 9, 7, 16, 17, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff4875c0b89d9bbc10b68d70661286f9db6a7359', 'committer_username': 'Sayam753', 'committer_name': 'Sayam Kumar', 'committer_email': 'sayamkumar049@gmail.com', 'commit_date': datetime.datetime(2018, 9, 7, 16, 17, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd195daa476ee849890f6eab14674b64dffb22ffe', 'committer_username': 'Sayam753', 'committer_name': 'Sayam Kumar', 'committer_email': 'sayamkumar049@gmail.com', 'commit_date': datetime.datetime(2018, 9, 7, 16, 17, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ee100322d503f7e07997b86b869766a4d4bf248', 'committer_username': 'Sayam753', 'committer_name': 'Sayam Kumar', 'committer_email': 'sayamkumar049@gmail.com', 'commit_date': datetime.datetime(2018, 9, 7, 16, 17, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '800f9df4711a43699f13b2ca5880c18577f4b331', 'committer_username': 'Sayam753', 'committer_name': 'Sayam Kumar', 'committer_email': 'sayamkumar049@gmail.com', 'commit_date': datetime.datetime(2018, 9, 7, 16, 17, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '109eda806d35f600a34a1f8a9a918a3fdd931030', 'committer_username': 'Sayam753', 'committer_name': 'Sayam Kumar', 'committer_email': 'sayamkumar049@gmail.com', 'commit_date': datetime.datetime(2018, 9, 7, 16, 17, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5137396e53e4c3d6ad8c05ce47370ab73bac8c47', 'committer_username': 'Sayam753', 'committer_name': 'Sayam Kumar', 'committer_email': 'sayamkumar049@gmail.com', 'commit_date': datetime.datetime(2018, 9, 7, 16, 17, 24, tzinfo=datetime.timezone.utc)}]",Sayam Kumar,43073325,sayamkumar049@gmail.com,User,,45,,160,109
463737081,[WIP] Add features to ADVI,"- [X] Add progress bar support.
- [X] Test progress bar in different OS. 
   (Tested on MacOS 10.15.6, Ubuntu 18.04.4 LTS, Windows 8.1 and Google colab environments)
- [X] Add `ParameterConvergence` criteria to test convergence.
- [X] Add LowRank Approximation.
- [X] Add LowRank ADVI tests.
- [X] Update quickstart notebook.
- [ ] Add an example notebook with hierarchical models and ADVI.",False,310,https://api.github.com/repos/pymc-devs/pymc4/pulls/310,https://github.com/pymc-devs/pymc4/pull/310,closed,467,84,7,4,1,0,0,0,[],2020-08-06 02:13:45+00:00,2023-01-10 16:05:50+00:00,76686725.0,"887 days, 13:52:05",[],"[{'commit_sha': '87c7d14f0fdc0bf0f3f28167e77fe6a9a8de49c0', 'committer_username': 'Sayam753', 'committer_name': 'Sayam Kumar', 'committer_email': 'sayamkumar049@gmail.com', 'commit_date': datetime.datetime(2018, 9, 7, 16, 17, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '395e292e3db7b11bc5570f37960ace69a0c4c176', 'committer_username': 'Sayam753', 'committer_name': 'Sayam Kumar', 'committer_email': 'sayamkumar049@gmail.com', 'commit_date': datetime.datetime(2018, 9, 7, 16, 17, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd72a4343e948fa82d243f178d3bf5d272d52171', 'committer_username': 'Sayam753', 'committer_name': 'Sayam Kumar', 'committer_email': 'sayamkumar049@gmail.com', 'commit_date': datetime.datetime(2018, 9, 7, 16, 17, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f0025d51a2207a11f625d8da0c208edd72dd85c', 'committer_username': 'Sayam753', 'committer_name': 'Sayam Kumar', 'committer_email': 'sayamkumar049@gmail.com', 'commit_date': datetime.datetime(2018, 9, 7, 16, 17, 24, tzinfo=datetime.timezone.utc)}]",Sayam Kumar,43073325,sayamkumar049@gmail.com,User,,45,,160,109
472096738,Remove transformations for Discrete distributions,"As per discussions in #306 and PyMC3's [Discrete distribution](https://github.com/pymc-devs/pymc3/blob/bf8f0bcd86bf1985efa2619370786f6d905ed4da/pymc3/distributions/distribution.py#L217-L219), this PR reverts the addition of transformations to Discrete distributions from #289.

cc @junpenglao
",True,314,https://api.github.com/repos/pymc-devs/pymc4/pulls/314,https://github.com/pymc-devs/pymc4/pull/314,closed,6,19,2,1,2,0,0,0,[],2020-08-23 09:04:03+00:00,2020-08-27 06:59:02+00:00,338099.0,"3 days, 21:54:59",[],"[{'commit_sha': 'a1a7d3d03544dae5241a37418bb1d279a4d015b6', 'committer_username': 'Sayam753', 'committer_name': 'Sayam Kumar', 'committer_email': 'sayamkumar049@gmail.com', 'commit_date': datetime.datetime(2018, 9, 7, 16, 17, 24, tzinfo=datetime.timezone.utc)}]",Sayam Kumar,43073325,sayamkumar049@gmail.com,User,,45,,160,109

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
132156591,pymc4,pymc-devs/pymc4,Jupyter Notebook,113,713,58,30,236,40,17,0,"[{'id': 481777786, 'number': 320, 'closed': datetime.datetime(2020, 10, 26, 20, 48, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 8, 5, 6, 48, tzinfo=datetime.timezone.utc), 'time_taken': 4203686.0, 'time_delta': '48 days, 15:41:26', 'additions': 104, 'deletions': 19, 'state': 'closed'}, {'id': 472096738, 'number': 314, 'closed': datetime.datetime(2020, 8, 27, 6, 59, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 23, 9, 4, 3, tzinfo=datetime.timezone.utc), 'time_taken': 338099.0, 'time_delta': '3 days, 21:54:59', 'additions': 6, 'deletions': 19, 'state': 'closed'}, {'id': 463737081, 'number': 310, 'closed': datetime.datetime(2023, 1, 10, 16, 5, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 6, 2, 13, 45, tzinfo=datetime.timezone.utc), 'time_taken': 76686725.0, 'time_delta': '887 days, 13:52:05', 'additions': 467, 'deletions': 84, 'state': 'closed'}, {'id': 441494183, 'number': 289, 'closed': datetime.datetime(2020, 7, 27, 17, 33, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 29, 15, 33, 36, tzinfo=datetime.timezone.utc), 'time_taken': 2426387.0, 'time_delta': '28 days, 1:59:47', 'additions': 272, 'deletions': 138, 'state': 'closed'}, {'id': 429279755, 'number': 280, 'closed': datetime.datetime(2020, 6, 23, 16, 0, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 6, 15, 55, 31, tzinfo=datetime.timezone.utc), 'time_taken': 1469119.0, 'time_delta': '17 days, 0:05:19', 'additions': 962, 'deletions': 2, 'state': 'closed'}, {'id': 415606654, 'number': 244, 'closed': datetime.datetime(2020, 5, 29, 5, 45, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 9, 17, 36, 24, tzinfo=datetime.timezone.utc), 'time_taken': 1685348.0, 'time_delta': '19 days, 12:09:08', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 414869063, 'number': 242, 'closed': datetime.datetime(2020, 5, 7, 20, 24, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 7, 19, 11, 36, tzinfo=datetime.timezone.utc), 'time_taken': 4345.0, 'time_delta': '1:12:25', 'additions': 7, 'deletions': 6, 'state': 'closed'}, {'id': 373229579, 'number': 220, 'closed': datetime.datetime(2020, 2, 17, 20, 48, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 10, 16, 26, 59, tzinfo=datetime.timezone.utc), 'time_taken': 620470.0, 'time_delta': '7 days, 4:21:10', 'additions': 91, 'deletions': 1, 'state': 'closed'}, {'id': 370716327, 'number': 215, 'closed': datetime.datetime(2020, 2, 4, 9, 18, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 4, 8, 56, 36, tzinfo=datetime.timezone.utc), 'time_taken': 1331.0, 'time_delta': '0:22:11', 'additions': 27, 'deletions': 1, 'state': 'closed'}, {'id': 367143565, 'number': 212, 'closed': datetime.datetime(2020, 1, 26, 10, 5, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 25, 18, 53, 17, tzinfo=datetime.timezone.utc), 'time_taken': 54733.0, 'time_delta': '15:12:13', 'additions': 6, 'deletions': 6, 'state': 'closed'}]"
