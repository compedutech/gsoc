pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
416117355,Removed qunit tests files,Removed 5 files of the QUnit tests,True,308,https://api.github.com/repos/internetarchive/bookreader/pulls/308,https://github.com/internetarchive/bookreader/pull/308,closed,2055,2499,7,3,2,0,0,0,[],2020-05-11 13:48:43+00:00,2020-05-12 17:57:55+00:00,101352.0,"1 day, 4:09:12",[],"[{'commit_sha': '70058f1deabafd4a8ae568f553012d59a21f737d', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e6d9ddba5b4f87d100b0a1f151869a2c64ca2df4', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d3363eb52d3f2197bd52398c5449f999178dac5', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}]",Giacomo Cignoni,10365688,,User,,25,,32,21
421037832,252/feature/desktop search e2 etest,"Adds e2e desktop search tests with testcafe and mocked request response for search, solves issue #252 ",True,314,https://api.github.com/repos/internetarchive/bookreader/pulls/314,https://github.com/internetarchive/bookreader/pull/314,closed,162,2,4,5,0,13,0,1,[],2020-05-20 21:50:33+00:00,2020-05-22 15:17:08+00:00,149195.0,"1 day, 17:26:35","[{'comment_id': 428341279, 'comment_body': ""We tend to keep compile-time constants (constants which don't require any other variables, or which only require other compile-time constants) in upper case, like so:\r\n\r\n```suggestion\r\n  const TEST_TEXT_FOUND = 'theory';\r\n  const TEST_TEXT_NOT_FOUND = 'HopefullyNotFoundLongWord';\r\n```"", 'comment_created': datetime.datetime(2020, 5, 20, 22, 22, 13, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 428341609, 'comment_body': ""Let's remove these, and keep the test focussed only on search. The other cases should definitely fail if these are not visible :D\r\n\r\n```suggestion\r\n```"", 'comment_created': datetime.datetime(2020, 5, 20, 22, 23, 2, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 428341754, 'comment_body': 'No longer need this since the mocked queries will be fast :)\r\n```suggestion\r\n      await t.expect(nav.desktop.querySign.exists).ok();\r\n```', 'comment_created': datetime.datetime(2020, 5, 20, 22, 23, 29, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 428342174, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2020, 5, 20, 22, 24, 38, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 428342994, 'comment_body': ""Shouldn't need these dots here\r\n\r\n```suggestion\r\nexport const searchLink = /https:\\/\\/ia[0-9]+\\.us\\.archive\\.org\\/fulltext\\/inside\\.php\\?item_id=.*/;\r\n```"", 'comment_created': datetime.datetime(2020, 5, 20, 22, 26, 14, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 428343386, 'comment_body': ""Let's rename this as well to something a little longer, but hopefully a little clearer :)\r\n\r\n```suggestion\r\nexport const SEARCH_INSIDE_URL_RE = /https:\\/\\/ia[0-9]+.....\\.us\\.archive\\.org\\/fulltext\\/inside\\.php\\?item_id=.*/;\r\n```"", 'comment_created': datetime.datetime(2020, 5, 20, 22, 27, 20, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 428353837, 'comment_body': ""Let's rename this `req` to be consistent with the testcafe docs, and add a docstring\r\n\r\n```suggestion\r\n/** Mock response for a matching search term. */\r\nexport function mockResponseFound(req, res) {\r\n```"", 'comment_created': datetime.datetime(2020, 5, 20, 22, 57, 20, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 428353887, 'comment_body': 'Ditto', 'comment_created': datetime.datetime(2020, 5, 20, 22, 57, 32, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 428354105, 'comment_body': 'Make this (and its neighbour) uppercase.', 'comment_created': datetime.datetime(2020, 5, 20, 22, 57, 59, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 428354652, 'comment_body': 'üëç Nice! Adding this here makes it much easier to read :)', 'comment_created': datetime.datetime(2020, 5, 20, 22, 59, 37, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 428354918, 'comment_body': ""This name is a little confusing; what's the `querySign`? Is it the magnifying glass icon?"", 'comment_created': datetime.datetime(2020, 5, 20, 23, 0, 20, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 428357057, 'comment_body': ""Let's also check that the search pins are visible in this case."", 'comment_created': datetime.datetime(2020, 5, 20, 23, 6, 53, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 428658741, 'comment_body': 'Already done with querySign (previous issue)! (Sorry for poor choice for variable name)', 'comment_created': datetime.datetime(2020, 5, 21, 13, 42, 30, tzinfo=datetime.timezone.utc), 'commenter': 'giacomo-cgn', 'type': 'User'}]","[{'commit_sha': '644f1c5a96710b193fa0ec5d256dea0561faff6f', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e0644cb956d1b5103693230266c82e3c6542c9c7', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e59dca0aec9ae4da94adcd044a216d6003954f5', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d0b5975c3d942ea134ec608fe4ab0a2c2ef26cb', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd57139ed69ee7ce6ac5cf1545cc7624db75eeca3', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}]",Giacomo Cignoni,10365688,,User,,25,,32,21
422917301,253/feature/mobile search e2e test,"Mobile search e2e test with successful and unsuccessful search, url check after search, checking right page is displayed after clicking on search result",True,322,https://api.github.com/repos/internetarchive/bookreader/pulls/322,https://github.com/internetarchive/bookreader/pull/322,closed,125,23,6,7,1,13,0,0,[],2020-05-25 22:51:04+00:00,2020-06-08 15:07:50+00:00,1181806.0,"13 days, 16:16:46","[{'comment_id': 430539816, 'comment_body': 'These might better live inside mockSearch.js; not important enough to need their own file :)', 'comment_created': datetime.datetime(2020, 5, 26, 16, 18, 57, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 430540152, 'comment_body': 'Nit-pick: remove newline\r\n```suggestion\r\n```', 'comment_created': datetime.datetime(2020, 5, 26, 16, 19, 26, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 430540319, 'comment_body': 'üéâ  Nice!', 'comment_created': datetime.datetime(2020, 5, 26, 16, 19, 40, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 430551897, 'comment_body': ""Yikes! That's an ugly selector üòÖ Could you create a new issue to add nicer selectors to these+update these tests?"", 'comment_created': datetime.datetime(2020, 5, 26, 16, 37, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 430554962, 'comment_body': ""This will match all search results, not just the first.\r\n```suggestion\r\n    this.searchResults = mobileMenu.find('.BRmobileSearchResult');\r\n```"", 'comment_created': datetime.datetime(2020, 5, 26, 16, 40, 54, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 430563905, 'comment_body': ""Pull out the mobile nav directly, since that's the only thing referenced\r\n```suggestion\r\n      const nav = br.nav.mobile;\r\n```"", 'comment_created': datetime.datetime(2020, 5, 26, 16, 53, 46, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 430564228, 'comment_body': 'Ditto', 'comment_created': datetime.datetime(2020, 5, 26, 16, 54, 18, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 430565020, 'comment_body': ""Let's also add a check that one of those blue annotation rectangles has been created."", 'comment_created': datetime.datetime(2020, 5, 26, 16, 55, 33, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 430600499, 'comment_body': 'I have not quite understood what the annotation rectangles are... Do you mean the blue text highlight of the searched word?', 'comment_created': datetime.datetime(2020, 5, 26, 17, 56, 7, tzinfo=datetime.timezone.utc), 'commenter': 'giacomo-cgn', 'type': 'User'}, {'comment_id': 431227823, 'comment_body': 'Yep! Those things :)', 'comment_created': datetime.datetime(2020, 5, 27, 15, 24, 27, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 431232699, 'comment_body': 'https://github.com/internetarchive/bookreader/issues/323', 'comment_created': datetime.datetime(2020, 5, 27, 15, 28, 56, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 431234055, 'comment_body': ""Ah, I meant pull out just the mobile nav, so we don't have to write `.mobile` every time."", 'comment_created': datetime.datetime(2020, 5, 27, 15, 30, 52, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 431234547, 'comment_body': 'Awesome! Thanks for also adding to the desktop tests!', 'comment_created': datetime.datetime(2020, 5, 27, 15, 31, 34, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}]","[{'commit_sha': 'a664fa2eb0f923d3ec64692470f414fcaace73c2', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc85a7d8fd08702cd78d5123372ce8271735f71f', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9204144a5169ac820d5eef19fb9b0403bdc40679', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6615465fb00bb0d4c127a481c112beff517a1d6a', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aac3d064a45ed9aa0c0caa40504cae579ecde513', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40bfc3c1dbb17a79735054336b1912d021946993', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19a233a6f09a92ba376ef50a2a88a013a3220354', 'committer_username': 'cdrini', 'committer_name': 'Drini Cami', 'committer_email': 'cdrini@gmail.com', 'commit_date': datetime.datetime(2013, 12, 24, 4, 49, 24, tzinfo=datetime.timezone.utc)}]",Giacomo Cignoni,10365688,,User,,25,,32,21
428041407,320/bug/autoplay e2e fails,"Closes #320  
Random delay between flipping the book cover and the first page caused unexpected test failures.
Added longer wait time to cover for these randoms delays (before it was assumed that delay was always 0)
From: 3000ms -> 2% fails (original)
to: 4000ms -> 0% fails",True,344,https://api.github.com/repos/internetarchive/bookreader/pulls/344,https://github.com/internetarchive/bookreader/pull/344,closed,2,2,1,3,1,0,0,0,[],2020-06-04 19:25:18+00:00,2020-06-05 22:16:42+00:00,96684.0,"1 day, 2:51:24",[],"[{'commit_sha': 'a99e66b7f07c2eed8f899ec3e0de097d9383dd7a', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8bea4a6563464abfee025d2c261240686847921c', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3be23676aab0c19ffb920921c95ead71da3d1040', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}]",Giacomo Cignoni,10365688,,User,,25,,32,21
431996205,250/feature/e2e rigth to left,"Closes #250 
Added testcafe e2e tests for BookReader right-to-left books:

- Execution of same base tests

- Specific tests for initialization in 2-pages mode and for page flipping",True,350,https://api.github.com/repos/internetarchive/bookreader/pulls/350,https://github.com/internetarchive/bookreader/pull/350,closed,51,0,3,5,1,3,0,0,[],2020-06-09 18:45:59+00:00,2020-07-02 13:11:39+00:00,1967140.0,"22 days, 18:25:40","[{'comment_id': 438280804, 'comment_body': '```suggestion\r\n    //checking empty page before the cover is more to the left than the first page\r\n```', 'comment_created': datetime.datetime(2020, 6, 10, 17, 9, 6, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 438281879, 'comment_body': 'Should use `BASE_URL` if possible so that it can test the local code via the demos.', 'comment_created': datetime.datetime(2020, 6, 10, 17, 10, 54, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 438282230, 'comment_body': ""Spell out the full name to be consistent with this file (and to be easier to understand for new folks).\r\n```suggestion\r\nimport { runRightToLeftTests } from './helpers/rightToLeft';\r\n```"", 'comment_created': datetime.datetime(2020, 6, 10, 17, 11, 31, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}]","[{'commit_sha': '633becb73157a4a8fe4c18945cf61bfdcdc9f185', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8fda6c7a565b7daab160c2b191783f92f308e719', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '986792ce1b5fec4a16e0b8a568df1415a0fcec73', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0bd6b04b0bfd0063988354849922ea7b0c812aa5', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc790e76f7a612b76d198158a46dbf04326b2d79', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}]",Giacomo Cignoni,10365688,,User,,25,,32,21
432018585,326/feature/table of content mobile,"Closes #326 
Added button in left hamburger menu that shows the table of contents of the book.
The chapters displayed are clickable and send to the respective book page.

![table_contents_demo](https://user-images.githubusercontent.com/10365688/84191038-2e7e4700-aa98-11ea-8426-0ee6513f6dcd.gif)

TODO:

- [x] Differentiate between clickable and non-clickable toc entries
- [x] Highlight the ""current"" toc section
- ~Scroll-to the ""current"" toc section when the panel is opened (maybe scroll to just a little above it)~ Too many issues; punting for this PR
- [x] Analytics for opening of toc panel `data-track=""BRMobileNav|TocSection""` (or something)",True,351,https://api.github.com/repos/internetarchive/bookreader/pulls/351,https://github.com/internetarchive/bookreader/pull/351,closed,262,58,8,20,5,24,0,0,[],2020-06-09 19:28:52+00:00,2020-07-09 19:59:26+00:00,2593834.0,"30 days, 0:30:34","[{'comment_id': 448993069, 'comment_body': 'Is there another selector we could use instead of `mm-4`? That will change if there are other panels added in the future.', 'comment_created': datetime.datetime(2020, 7, 2, 13, 15, 26, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 448993825, 'comment_body': 'This will prevent XSS injection, since the data on OL is user-entered.\r\n\r\n```suggestion\r\n  const mobileChapter = $(`<li></li>`).text(title);\r\n```', 'comment_created': datetime.datetime(2020, 7, 2, 13, 16, 34, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 448995807, 'comment_body': '```suggestion\r\n  if(this.enableMobileNav && tocEntries.length > 0){\r\n```', 'comment_created': datetime.datetime(2020, 7, 2, 13, 19, 40, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 448996661, 'comment_body': '```suggestion\r\n    if (this.enableMobileNav) {\r\n```', 'comment_created': datetime.datetime(2020, 7, 2, 13, 21, 1, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 448997012, 'comment_body': '```suggestion\r\n        <li class=""BRmobileMenu__tableContents"" data-event-click-tracking=""BRSidebar|TOCPanel"">\r\n```', 'comment_created': datetime.datetime(2020, 7, 2, 13, 21, 32, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 448998347, 'comment_body': ""mobile_nave.js shouldn't know that a TOC is inside it; let's see if we can avoid this event altogether. Let's make plugin.chapters.js bind to the click event directly.\r\n\r\n```suggestion\r\n```\r\n\r\nAlso: avoid using `mm-4`; it'll change if more mobile drawer elements are added. Something like `.BRmobileMenu__tableContents > .mm-fullsubopen` should do the trick."", 'comment_created': datetime.datetime(2020, 7, 2, 13, 23, 28, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 449003934, 'comment_body': 'This should let us avoid using `mm-4` as a selector:\r\n\r\n```suggestion\r\n            <div class=""BRmobileMenu__tableContentsPanel"">\r\n```', 'comment_created': datetime.datetime(2020, 7, 2, 13, 32, 7, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 449006809, 'comment_body': 'Should this be here?\r\n```suggestion\r\n```', 'comment_created': datetime.datetime(2020, 7, 2, 13, 36, 34, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 449009829, 'comment_body': ""Use `sinon` here instead of manually stubbing this functions; that allows use to add an `afterEach` call with `sinon.restore()` and reset the environment back to normal.\r\n\r\n```suggestion\r\n    sinon.stub(window.HTMLElement.prototype, 'scrollIntoView');\r\n    sinon.stub(br, 'getPageIndex').callsFake(parseFloat);\r\n```"", 'comment_created': datetime.datetime(2020, 7, 2, 13, 41, 6, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 449012331, 'comment_body': 'Since this is Sass, we can actually nest these like so:\r\n\r\n```suggestion\r\n  &.chapter-clickable {\r\n    font-weight: normal;\r\n    color: black;\r\n  }\r\n\r\n  &.current-chapter{\r\n    background-color: lightblue;\r\n  }\r\n}\r\n```', 'comment_created': datetime.datetime(2020, 7, 2, 13, 44, 45, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 449013012, 'comment_body': ""Let's not change the font-weight; `font-weight: lighter` is hard to read on normal sized fonts."", 'comment_created': datetime.datetime(2020, 7, 2, 13, 45, 41, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 449527056, 'comment_body': 'Thought it was needed to initialize table of contents, but tests work without it as well', 'comment_created': datetime.datetime(2020, 7, 3, 11, 10, 23, tzinfo=datetime.timezone.utc), 'commenter': 'giacomo-cgn', 'type': 'User'}, {'comment_id': 449708103, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 3, 21, 38, 15, tzinfo=datetime.timezone.utc), 'commenter': 'giacomo-cgn', 'type': 'User'}, {'comment_id': 449708132, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 3, 21, 38, 35, tzinfo=datetime.timezone.utc), 'commenter': 'giacomo-cgn', 'type': 'User'}, {'comment_id': 449708143, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 3, 21, 38, 42, tzinfo=datetime.timezone.utc), 'commenter': 'giacomo-cgn', 'type': 'User'}, {'comment_id': 449708156, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 3, 21, 38, 51, tzinfo=datetime.timezone.utc), 'commenter': 'giacomo-cgn', 'type': 'User'}, {'comment_id': 449709060, 'comment_body': 'done, also removed TOCOpen event', 'comment_created': datetime.datetime(2020, 7, 3, 21, 46, 9, tzinfo=datetime.timezone.utc), 'commenter': 'giacomo-cgn', 'type': 'User'}, {'comment_id': 449709072, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 3, 21, 46, 15, tzinfo=datetime.timezone.utc), 'commenter': 'giacomo-cgn', 'type': 'User'}, {'comment_id': 449709291, 'comment_body': ""Using sinon doesn't seem to work with scrollIntoView, even using Element as the object of the method"", 'comment_created': datetime.datetime(2020, 7, 3, 21, 47, 56, tzinfo=datetime.timezone.utc), 'commenter': 'giacomo-cgn', 'type': 'User'}, {'comment_id': 449709305, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 3, 21, 48, 8, tzinfo=datetime.timezone.utc), 'commenter': 'giacomo-cgn', 'type': 'User'}, {'comment_id': 449709311, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 3, 21, 48, 15, tzinfo=datetime.timezone.utc), 'commenter': 'giacomo-cgn', 'type': 'User'}, {'comment_id': 452444450, 'comment_body': ""```suggestion\r\n    this.jumpToIndex($(event.delegateTarget).data('pageIndex')); \r\n```"", 'comment_created': datetime.datetime(2020, 7, 9, 19, 34, 8, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 452444590, 'comment_body': ""```suggestion\r\n    $(event.delegateTarget).addClass('current-chapter');\r\n```"", 'comment_created': datetime.datetime(2020, 7, 9, 19, 34, 26, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 452444684, 'comment_body': '```suggestion\r\n      .attr(""data-event-click-tracking"",""BRTOCPanel|GoToChapter"");\r\n```', 'comment_created': datetime.datetime(2020, 7, 9, 19, 34, 39, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}]","[{'commit_sha': 'e964cbbd95563fd0252fad77052c15b8112010b2', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d52fdcdcc2986517dc153a5339dccd68d565ea6', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b54f2d26ffc00f1b8fb17f353e90e1d7d8d16ed0', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba26654fbff9d4289a24898bee2fea20286b7e3e', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd6981b4b0da7c617e9460f9450c2183b282f46a8', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3d5e2b2d6b6c09febc5dbec0f84061c04148fc7', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '01d262bfe89f24b3670080bd5f61101d9691d275', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9560d073253973da93d2067a641f00b25a58abe', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c49f0681890fc3a22f6c8257cc742f0d174e68fe', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f50e68c0fcf466b7bf5bef4c399b54b2315f6acb', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1df53246d209233ad5abce4cf3d4cbe24360e7d', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0206b0c2b9a5ddf80305dd89443b1519cb851d0d', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dcc3e545b912084720d9f2e3660450926997d7cf', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '98ed513b8e83f4b71ea4395a5f3bcf18438e0ae6', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa80d093bb6d83740722eb7ff16ac9ee3615646a', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8893b4c8e51a7c3da093b39a59f09f722eb71e4a', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '43d8c201b631c65e4db0ef256999a924b0b476b7', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7bcd11db3e44c42d5bad8b185cfa2bb7d3eb84dd', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '78a7b3086595ed2884990388c50a28df69ed05b8', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f4d8252326211b2b92db1f7bc5941a236633d0c', 'committer_username': 'cdrini', 'committer_name': 'Drini Cami', 'committer_email': 'cdrini@gmail.com', 'commit_date': datetime.datetime(2013, 12, 24, 4, 49, 24, tzinfo=datetime.timezone.utc)}]",Giacomo Cignoni,10365688,,User,,25,,32,21
426850207,325/feature/filters checkbox,"Closes #325 

Added checkbox to hamburger mobile menu to apply and combine different filters to book pages
![filtersDemo2](https://user-images.githubusercontent.com/10365688/83682615-7575c380-a5e4-11ea-9e50-3eac6408220e.gif)

",True,342,https://api.github.com/repos/internetarchive/bookreader/pulls/342,https://github.com/internetarchive/bookreader/pull/342,closed,72,18,3,7,3,18,0,0,[],2020-06-02 21:56:57+00:00,2020-06-15 13:42:32+00:00,1093535.0,"12 days, 15:45:35","[{'comment_id': 434699600, 'comment_body': ""Let's remove `.high-contrast` since no longer needed."", 'comment_created': datetime.datetime(2020, 6, 3, 16, 29, 1, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 434701236, 'comment_body': ""It would be nice if we could DRY this up, since there's a bit of duplicated code. Maybe converting `FILTERLIST` to an array of objects, over which we can iterate here and build each checkbox."", 'comment_created': datetime.datetime(2020, 6, 3, 16, 31, 34, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 434706012, 'comment_body': ""```suggestion\r\n          $('.BRcheckbox-filters').each(\r\n            (i, el) => {\r\n```\r\n\r\nThat way we don't need the `const br = this;`"", 'comment_created': datetime.datetime(2020, 6, 3, 16, 39, 2, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 434707675, 'comment_body': 'We might be able to avoid creating/destroying an element every time by checking if it\'s already been constructed here:\r\n\r\n```suggestion\r\n          const filtersSheet = $(""#filtersStyle"")[0] || document.createElement(\'style\');\r\n```', 'comment_created': datetime.datetime(2020, 6, 3, 16, 41, 48, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 434708359, 'comment_body': ""It looks like these are the some strings, so maybe don't need another variable?"", 'comment_created': datetime.datetime(2020, 6, 3, 16, 42, 43, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 434710004, 'comment_body': 'Can we simplify this selector?\r\n\r\n```suggestion\r\n          filtersSheet.innerHTML = "".BRpagecontainer img {filter:"" + filterStr + ""; -webkit-filter:"" + filterWebkitStr + "";}"";\r\n```', 'comment_created': datetime.datetime(2020, 6, 3, 16, 45, 9, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 434710562, 'comment_body': 'Also: Template strings :)\r\n```suggestion\r\n          filtersSheet.innerHTML = `.BRtwopageview, .BRpageview img {\r\n              filter: ${filterStr};\r\n              -webkit-filter: ${filterWebkitStr};\r\n           }`;\r\n```', 'comment_created': datetime.datetime(2020, 6, 3, 16, 45, 59, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 434712660, 'comment_body': ""Let's pull this function out into it's function; maybe something like `updateFilters`? That way we can try to target it in unit tests."", 'comment_created': datetime.datetime(2020, 6, 3, 16, 49, 17, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 434715786, 'comment_body': 'Might want to change this to ""Inverted (Night mode)"" for folks who might not understand what inverted means.', 'comment_created': datetime.datetime(2020, 6, 3, 16, 54, 19, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 434720673, 'comment_body': 'Oh, we also don\'t need the `for=` attrs if we do something like:\r\n\r\n```html\r\n<label class=""BRcheckbox-label-filters""><input type=""checkbox""> High contrast </label><br> \r\n```\r\n\r\nThis will make clicking the text check/uncheck the checkbox', 'comment_created': datetime.datetime(2020, 6, 3, 17, 2, 13, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 438275775, 'comment_body': '```suggestion\r\n    filter: ""brightness(120%)"",\r\n    label: ""High brightness""\r\n  },\r\n  {\r\n    filter: ""invert(100%)"",\r\n    label: ""Inverted (dark mode)""\r\n  },\r\n  {\r\n    filter: ""contrast(120%)"",\r\n```', 'comment_created': datetime.datetime(2020, 6, 10, 17, 0, 29, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 438276314, 'comment_body': '```suggestion\r\n* Dynamically creates styles combining different filters for BookReaders imgs\r\n```', 'comment_created': datetime.datetime(2020, 6, 10, 17, 1, 16, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 438277610, 'comment_body': 'Move the event handler click binding to where `applyFilters` is called, so that this function is single-purpose.', 'comment_created': datetime.datetime(2020, 6, 10, 17, 3, 34, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 438279189, 'comment_body': '```suggestion\r\n        <p class=""DrawerSettingsTitle"">Visual Adjustments</p>\r\n```', 'comment_created': datetime.datetime(2020, 6, 10, 17, 6, 14, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 438306764, 'comment_body': 'DONE', 'comment_created': datetime.datetime(2020, 6, 10, 17, 52, 55, tzinfo=datetime.timezone.utc), 'commenter': 'giacomo-cgn', 'type': 'User'}, {'comment_id': 438306832, 'comment_body': 'DONE', 'comment_created': datetime.datetime(2020, 6, 10, 17, 53, 2, tzinfo=datetime.timezone.utc), 'commenter': 'giacomo-cgn', 'type': 'User'}, {'comment_id': 438306984, 'comment_body': 'DONE', 'comment_created': datetime.datetime(2020, 6, 10, 17, 53, 15, tzinfo=datetime.timezone.utc), 'commenter': 'giacomo-cgn', 'type': 'User'}, {'comment_id': 438307032, 'comment_body': 'DONE', 'comment_created': datetime.datetime(2020, 6, 10, 17, 53, 20, tzinfo=datetime.timezone.utc), 'commenter': 'giacomo-cgn', 'type': 'User'}]","[{'commit_sha': 'ba692d786e8eb4b303ebbfc90e68c2174c43b539', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f0a1ff0cbd39e2334912927afb6f7c20e90f6570', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad85f8db833c6736acced5003595cb51c1563a4e', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ddc6d52bb47e6226dc70f3562a05f99006980aee', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c7ccf675fa1dab7d453971e8ab31dae85775e4f8', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39ec905023162b41773c4d79c6fa194e01e064db', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9dd4255a87da08871b3adf68e19ce6a3c963a38f', 'committer_username': 'cdrini', 'committer_name': 'Drini Cami', 'committer_email': 'cdrini@gmail.com', 'commit_date': datetime.datetime(2013, 12, 24, 4, 49, 24, tzinfo=datetime.timezone.utc)}]",Giacomo Cignoni,10365688,,User,,25,,32,21
434629202,Generic demo,"closes #353 
Creation of a generic demo html file which uses pages of a specified book from IA servers based on its OCAID.
E2E tests use dem-generic.html instead of the specific files",True,356,https://api.github.com/repos/internetarchive/bookreader/pulls/356,https://github.com/internetarchive/bookreader/pull/356,closed,50,87,6,12,1,17,0,0,[],2020-06-15 15:54:15+00:00,2020-06-30 14:22:04+00:00,1290469.0,"14 days, 22:27:49","[{'comment_id': 444923195, 'comment_body': ""Refactor this to use `URLSearchParams` instead of manual parsing, and do this inside the `else` clause below (since that's the only place it's needed)."", 'comment_created': datetime.datetime(2020, 6, 24, 14, 11, 51, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 444925106, 'comment_body': '```suggestion\r\nconst OCAIDS = [\r\n```', 'comment_created': datetime.datetime(2020, 6, 24, 14, 14, 29, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 444925579, 'comment_body': ""```suggestion\r\nconst DEMO_PATH = 'demo-generic.html?ocaid='\r\n```"", 'comment_created': datetime.datetime(2020, 6, 24, 14, 15, 8, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 444925756, 'comment_body': '```suggestion\r\nidBooks.forEach(ocaid => {\r\n```', 'comment_created': datetime.datetime(2020, 6, 24, 14, 15, 22, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 444926298, 'comment_body': 'Replace the previous files, `demo-ia-plato` and `demo-ia-olivertwist` with these links.', 'comment_created': datetime.datetime(2020, 6, 24, 14, 16, 7, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 444927294, 'comment_body': '```suggestion\r\n        The BookReader requires JavaScript to be enabled. Please check that your browser supports JavaScript and that it is enabled in the browser settings.\r\n```', 'comment_created': datetime.datetime(2020, 6, 24, 14, 17, 33, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 444927911, 'comment_body': 'Rename this to `demo-internetarchive`', 'comment_created': datetime.datetime(2020, 6, 24, 14, 18, 24, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 444932784, 'comment_body': 'Clean this up.', 'comment_created': datetime.datetime(2020, 6, 24, 14, 24, 52, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 444932993, 'comment_body': ""Also, let's add a unit test for this."", 'comment_created': datetime.datetime(2020, 6, 24, 14, 25, 10, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 445224998, 'comment_body': ""This might break if the query has special characters in it (like `&`), since `.get(...)` returns the _unencoded_ parameters. Add a unit test for it; using `URLSearchParams#toString` should make sure we're good :+1:\r\n\r\n```suggestion\r\n  const params = new URLSearchParams(url);\r\n  return params.has('q') ? new URLSearchParams({ q: params.get('q') }).toString() : '';\r\n```"", 'comment_created': datetime.datetime(2020, 6, 24, 23, 25, 14, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 445225125, 'comment_body': '```suggestion\r\n/**\r\n@private\r\n```', 'comment_created': datetime.datetime(2020, 6, 24, 23, 25, 36, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 445593594, 'comment_body': 'DONE', 'comment_created': datetime.datetime(2020, 6, 25, 14, 18, 4, tzinfo=datetime.timezone.utc), 'commenter': 'giacomo-cgn', 'type': 'User'}, {'comment_id': 445593672, 'comment_body': 'DONE', 'comment_created': datetime.datetime(2020, 6, 25, 14, 18, 12, tzinfo=datetime.timezone.utc), 'commenter': 'giacomo-cgn', 'type': 'User'}, {'comment_id': 445604077, 'comment_body': 'Use `var` + reduce some of the helper variables.', 'comment_created': datetime.datetime(2020, 6, 25, 14, 32, 14, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 445604212, 'comment_body': 'In general, unit tests should be kind of ""dumb""; just using flat data. Otherwise you end up with sort of a tautology. Do this without `URLSearchParams`, and have another test to handle a url with a special character in it\'s `q` (e.g. `?q=foo%20boo`)', 'comment_created': datetime.datetime(2020, 6, 25, 14, 32, 23, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 445606386, 'comment_body': ""Actually, the function is essentially a static function (since it doesn't use `this`, so you can call it as `BookReader.prototype.urlParamsFiltersOnlySearch('https://...')` without having to initialize BR in any way."", 'comment_created': datetime.datetime(2020, 6, 25, 14, 35, 19, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 447056360, 'comment_body': ""This should include the `?` character (+ update tests)\r\n\r\n```suggestion\r\n  return params.has('q') ? `?${new URLSearchParams({ q: params.get('q') })}` : '';\r\n```"", 'comment_created': datetime.datetime(2020, 6, 29, 15, 25, 26, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}]","[{'commit_sha': '08c0e0464391e5ea8e0864a8d15b7cb9bb4d73ef', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b44db0b26c8f56a4b3a841e915b48b48baf35a7', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f87484325259207e73d30118863c8f5f5e9f9d8c', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c010dc9da5fc40dd45b56808045beb79292c323e', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e16fdf97abf47a15a6d3cc56eacfc989f7a6f5f4', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67a4efe1a90f53200d3f401606420007515380be', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e24f2f2503b50e7c06a891635786ab2509ecd34e', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba0deae5e49aec6dc80c365716dbfbaa96423279', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e9019e3d13cb6faf72de14b858ed5975b239f9d', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5aaae0ed3e2caef7d9ab4f75697d5138a10b0da8', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7804ae9452e9929ddde2b74c3d64a8e5c8e98256', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b4e83250154b5d980cf18d2fbe268eab34bedf7', 'committer_username': 'cdrini', 'committer_name': 'Drini Cami', 'committer_email': 'cdrini@gmail.com', 'commit_date': datetime.datetime(2013, 12, 24, 4, 49, 24, tzinfo=datetime.timezone.utc)}]",Giacomo Cignoni,10365688,,User,,25,,32,21
455873940,Fix random page flipping,"Previous fix involving `plugin.url.js` was not working anymore in URL hash mode due to changes to `urlUpdateFragment` made in the generic demo feature.
Changed this.oldLocationHash to use newQueryStringSearch instead of newQueryString in url hash mode.
closes #349 ",True,386,https://api.github.com/repos/internetarchive/bookreader/pulls/386,https://github.com/internetarchive/bookreader/pull/386,closed,4,2,1,1,1,0,0,0,[],2020-07-23 18:11:08+00:00,2020-07-25 00:28:09+00:00,109021.0,"1 day, 6:17:01",[],"[{'commit_sha': 'fe4cbe9c7d224541c42d94a8cd38fda15ddff261', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}]",Giacomo Cignoni,10365688,,User,,25,,32,21
455126284,Fixed advanced demo not turning pages," This issue was fixed by returning fallback value if index is invalid in `_getDataProp `function.
Also affected `/demo-plugin-menu-toggle.html` and `/demo-advanced.html`.
closes #358 ",True,383,https://api.github.com/repos/internetarchive/bookreader/pulls/383,https://github.com/internetarchive/bookreader/pull/383,closed,3,6,1,1,1,0,0,0,[],2020-07-22 13:39:43+00:00,2020-07-23 16:39:16+00:00,97173.0,"1 day, 2:59:33",[],"[{'commit_sha': '5f13a3135a6a4d83cd9a090b0eb467e05a4b0355', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}]",Giacomo Cignoni,10365688,,User,,25,,32,21
453332949,Fix high resolution displays having blurry images,"Fixes high resolution displays having blurry images using the HTML srcset property for img elements. The srcset is applied to the bookreader page images so that for each available image, with higher resolution than the one selected by default, there is a corresponding 2x, 4x, 8x or higher attribute.
closes #372 ",True,378,https://api.github.com/repos/internetarchive/bookreader/pulls/378,https://github.com/internetarchive/bookreader/pull/378,closed,87,2,2,5,1,9,0,0,[],2020-07-20 11:07:00+00:00,2020-07-27 19:12:09+00:00,633909.0,"7 days, 8:05:09","[{'comment_id': 460992037, 'comment_body': 'This log should be removed.', 'comment_created': datetime.datetime(2020, 7, 27, 15, 52, 26, tzinfo=datetime.timezone.utc), 'commenter': 'shaneriley', 'type': 'User'}, {'comment_id': 460992785, 'comment_body': 'With new code, we should use `let` or `const` statements to instantiate variables.', 'comment_created': datetime.datetime(2020, 7, 27, 15, 53, 33, tzinfo=datetime.timezone.utc), 'commenter': 'shaneriley', 'type': 'User'}, {'comment_id': 460994618, 'comment_body': 'Replace `var` with `let`', 'comment_created': datetime.datetime(2020, 7, 27, 15, 56, 10, tzinfo=datetime.timezone.utc), 'commenter': 'shaneriley', 'type': 'User'}, {'comment_id': 460995292, 'comment_body': 'I would also set the initial value of `scale` to the assignment currently in the `else` statement, which will allow you to eliminate the `else`.', 'comment_created': datetime.datetime(2020, 7, 27, 15, 57, 7, tzinfo=datetime.timezone.utc), 'commenter': 'shaneriley', 'type': 'User'}, {'comment_id': 460997476, 'comment_body': 'Rather than performing string concatenation with each iteration of this loop, you can instead use `scale.map` to construct an array of sources and then `.join` them. This will also allow you to avoid having to append the final "", "" to the string. So something like:\r\n\r\n```js\r\nreturn scale.map((el, i) => (\r\n  this._models.book.getPageURI(index, scale[i], rotate) + "" ""\r\n      + Math.pow(2, i + 1) + ""x""\r\n)).join(\', \');\r\n```', 'comment_created': datetime.datetime(2020, 7, 27, 16, 0, 22, tzinfo=datetime.timezone.utc), 'commenter': 'shaneriley', 'type': 'User'}, {'comment_id': 461047470, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 27, 17, 20, 52, tzinfo=datetime.timezone.utc), 'commenter': 'giacomo-cgn', 'type': 'User'}, {'comment_id': 461047689, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 27, 17, 21, 12, tzinfo=datetime.timezone.utc), 'commenter': 'giacomo-cgn', 'type': 'User'}, {'comment_id': 461047833, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 27, 17, 21, 27, tzinfo=datetime.timezone.utc), 'commenter': 'giacomo-cgn', 'type': 'User'}, {'comment_id': 461047902, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 27, 17, 21, 33, tzinfo=datetime.timezone.utc), 'commenter': 'giacomo-cgn', 'type': 'User'}]","[{'commit_sha': 'a837531b52017e08cba0e0d6583ce95bd8561436', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5e5eff3ab0a8aeca9520903c2a85bc0d7ed0a1b', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e48258221fa86c7dd683c5224a3ebef4ffe69d6b', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee6e7cfc4953b63799518386f11d0fdbb26702ed', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aeb383e30369587e9e06be70878e3e41411c87cb', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}]",Giacomo Cignoni,10365688,,User,,25,,32,21
446153619,Text selection layer,"Adding an svg layer over each book page with text with correct positioning and scaling accordingly to each book djvu.xml file.
This should make highlighting and selecting text over the book pages possible.
closes #367 
Google doc where to report active issue of text selection layer:
https://docs.google.com/document/d/1drBEdEQEJ16qLuy3m6dmzqqxNzpmKUJO0oR-FUp85VY/edit?usp=sharing",True,367,https://api.github.com/repos/internetarchive/bookreader/pulls/367,https://github.com/internetarchive/bookreader/pull/367,closed,420,8,11,41,1,89,0,0,[],2020-07-08 10:42:02+00:00,2020-08-29 21:36:15+00:00,4532053.0,"52 days, 10:54:13","[{'comment_id': 468010958, 'comment_body': 'combine', 'comment_created': datetime.datetime(2020, 8, 10, 15, 57, 58, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 468013786, 'comment_body': 'Add this to the css file instead of calling a function; something like `.BRpageFlipping svg { display: none; }`', 'comment_created': datetime.datetime(2020, 8, 10, 16, 2, 33, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 468014208, 'comment_body': 'Ditto\r\n```suggestion\r\n```', 'comment_created': datetime.datetime(2020, 8, 10, 16, 3, 18, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 468014699, 'comment_body': '```suggestion\r\n    }).then(function (xmlMap) {\r\n```', 'comment_created': datetime.datetime(2020, 8, 10, 16, 4, 7, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 468017274, 'comment_body': ""Type; and elsewhere\r\n\r\n```suggestion\r\n      $(svg).addClass('textSelectionSVG');\r\n```"", 'comment_created': datetime.datetime(2020, 8, 10, 16, 8, 24, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 468023300, 'comment_body': ""It would be great if we could avoid this function; I'm not sure why these event handlers need to get re-attached after zoom/flip; shouldn't they already be there? It did like the SVG was getting reconstructed after zoom, but this fn is called inside `createTextLayer`, so shouldn't it already be attached...? Not sure :P"", 'comment_created': datetime.datetime(2020, 8, 10, 16, 18, 10, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 468023663, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2020, 8, 10, 16, 18, 44, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 468024314, 'comment_body': ""Let's switch to a bail, so we can unindent the whole body.\r\n```suggestion\r\n    if ($svgLayers.length) return;\r\n```"", 'comment_created': datetime.datetime(2020, 8, 10, 16, 19, 48, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 468024595, 'comment_body': 'Use template strings (might just need an eslint fix)', 'comment_created': datetime.datetime(2020, 8, 10, 16, 20, 11, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 468025262, 'comment_body': '```suggestion\r\n        for(let i = 0; i < paragArr.length; i++) {\r\n```', 'comment_created': datetime.datetime(2020, 8, 10, 16, 21, 12, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 468025586, 'comment_body': '```suggestion\r\n        const words = $(paragraph).find(""WORD"");\r\n```', 'comment_created': datetime.datetime(2020, 8, 10, 16, 21, 45, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 468026667, 'comment_body': 'Will this work?\r\n\r\n```suggestion\r\n          wordTspan.textContent = currWord.textContent;\r\n```', 'comment_created': datetime.datetime(2020, 8, 10, 16, 23, 46, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 468029021, 'comment_body': '```suggestion\r\n            spaceTspan.textContent = "" "";\r\n```', 'comment_created': datetime.datetime(2020, 8, 10, 16, 27, 42, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 468029928, 'comment_body': 'We might not need to set these; try removing it and see if it works', 'comment_created': datetime.datetime(2020, 8, 10, 16, 29, 12, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 468030163, 'comment_body': 'We _might_ not need this one either.', 'comment_created': datetime.datetime(2020, 8, 10, 16, 29, 36, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 468030332, 'comment_body': ""Let's move all the CSS into the scss files"", 'comment_created': datetime.datetime(2020, 8, 10, 16, 29, 52, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 468030580, 'comment_body': 'Tautology :)\r\n```suggestion\r\n    if(this.enableTextSelection){\r\n```', 'comment_created': datetime.datetime(2020, 8, 10, 16, 30, 17, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 468148862, 'comment_body': 'Combining those two css properties does not work for some reason', 'comment_created': datetime.datetime(2020, 8, 10, 20, 1, 17, tzinfo=datetime.timezone.utc), 'commenter': 'giacomo-cgn', 'type': 'User'}, {'comment_id': 468149216, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 10, 20, 1, 55, tzinfo=datetime.timezone.utc), 'commenter': 'giacomo-cgn', 'type': 'User'}, {'comment_id': 468149344, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 10, 20, 2, 9, tzinfo=datetime.timezone.utc), 'commenter': 'giacomo-cgn', 'type': 'User'}, {'comment_id': 468149425, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 10, 20, 2, 18, tzinfo=datetime.timezone.utc), 'commenter': 'giacomo-cgn', 'type': 'User'}, {'comment_id': 468149520, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 10, 20, 2, 30, tzinfo=datetime.timezone.utc), 'commenter': 'giacomo-cgn', 'type': 'User'}, {'comment_id': 468149570, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 10, 20, 2, 36, tzinfo=datetime.timezone.utc), 'commenter': 'giacomo-cgn', 'type': 'User'}, {'comment_id': 468149624, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 10, 20, 2, 42, tzinfo=datetime.timezone.utc), 'commenter': 'giacomo-cgn', 'type': 'User'}, {'comment_id': 468149704, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 10, 20, 2, 51, tzinfo=datetime.timezone.utc), 'commenter': 'giacomo-cgn', 'type': 'User'}, {'comment_id': 468149793, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 10, 20, 3, 2, tzinfo=datetime.timezone.utc), 'commenter': 'giacomo-cgn', 'type': 'User'}, {'comment_id': 468149860, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 10, 20, 3, 12, tzinfo=datetime.timezone.utc), 'commenter': 'giacomo-cgn', 'type': 'User'}, {'comment_id': 468149960, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 10, 20, 3, 25, tzinfo=datetime.timezone.utc), 'commenter': 'giacomo-cgn', 'type': 'User'}, {'comment_id': 468150285, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 10, 20, 4, 8, tzinfo=datetime.timezone.utc), 'commenter': 'giacomo-cgn', 'type': 'User'}, {'comment_id': 468150468, 'comment_body': 'done, only font-size needed', 'comment_created': datetime.datetime(2020, 8, 10, 20, 4, 32, tzinfo=datetime.timezone.utc), 'commenter': 'giacomo-cgn', 'type': 'User'}, {'comment_id': 469458756, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 12, 18, 30, 11, tzinfo=datetime.timezone.utc), 'commenter': 'giacomo-cgn', 'type': 'User'}, {'comment_id': 469458827, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 12, 18, 30, 20, tzinfo=datetime.timezone.utc), 'commenter': 'giacomo-cgn', 'type': 'User'}, {'comment_id': 469458944, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 12, 18, 30, 32, tzinfo=datetime.timezone.utc), 'commenter': 'giacomo-cgn', 'type': 'User'}, {'comment_id': 475923440, 'comment_body': '```suggestion\r\n\r\n    // Make it so right-clicking on ""blank"" part of svg sends events to the image (for saving)\r\n    pointer-events: none;\r\n    .BRwordElement { pointer-events: all; }\r\n```', 'comment_created': datetime.datetime(2020, 8, 24, 22, 12, 20, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 475924553, 'comment_body': 'Bug: clicking/dragging on a word, but mouse-uping over a blank area no longer works. We need the mouseup listener to be attached do `$(document)` maybe? Or maybe toggle the `pointer-events` stuff off if we\'re in ""text selection"" mode (add a class to br container)?', 'comment_created': datetime.datetime(2020, 8, 24, 22, 15, 11, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 475924959, 'comment_body': 'Is this needed?\r\n\r\n```suggestion\r\n```', 'comment_created': datetime.datetime(2020, 8, 24, 22, 16, 12, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 475927412, 'comment_body': 'Comment about why this is necessary', 'comment_created': datetime.datetime(2020, 8, 24, 22, 23, 3, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 475927528, 'comment_body': ""This isn't working; clicking anywhere after selecting causes a page flip"", 'comment_created': datetime.datetime(2020, 8, 24, 22, 23, 25, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 475928935, 'comment_body': '```suggestion\r\n    /** Whether to insert newlines after each paragraph */\r\n    this.insertNewlines = avoidTspans\r\n```', 'comment_created': datetime.datetime(2020, 8, 24, 22, 27, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 475929628, 'comment_body': '```suggestion\r\n    }).then(xmlMap  => xmlMap && $(xmlMap).find(""OBJECT""));\r\n```', 'comment_created': datetime.datetime(2020, 8, 24, 22, 28, 53, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 475930566, 'comment_body': 'Can we attach this to the container directly instead of to each page? ', 'comment_created': datetime.datetime(2020, 8, 24, 22, 31, 33, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 475931081, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2020, 8, 24, 22, 32, 59, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 475931254, 'comment_body': 'Too hard to read :P\r\n```suggestion\r\n          const newlineTspan = document.createElementNS(""http://www.w3.org/2000/svg"", this.svgWordElement);\r\n```', 'comment_created': datetime.datetime(2020, 8, 24, 22, 33, 28, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 475931382, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2020, 8, 24, 22, 33, 48, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 475932160, 'comment_body': ""You're finding the max as you're going through the paragraph :P So the max will be increasing. You need to compute it before-hand. Or take the median (most correct) or avg; max isn't the best one to take for this. But let's do it before this loop."", 'comment_created': datetime.datetime(2020, 8, 24, 22, 35, 56, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 475932424, 'comment_body': 'We can fix this in a future PR\r\n\r\n```suggestion\r\n        // adding spaces after words except at the end of the paragraph\r\n        // TODO: assumes left-to-right text\r\n```', 'comment_created': datetime.datetime(2020, 8, 24, 22, 36, 44, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 475933534, 'comment_body': 'Try this actually; and this should be ok to do always (regardless of browser)\r\n```suggestion\r\n          paragSvg.appendChild(document.createTextNode(""\\n""));\r\n```', 'comment_created': datetime.datetime(2020, 8, 24, 22, 40, 11, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 475933812, 'comment_body': '```suggestion\r\n      this.textSelectionPlugin = new TextSelectionPlugin();\r\n      this.textSelectionPlugin.init(this.bookId);\r\n```', 'comment_created': datetime.datetime(2020, 8, 24, 22, 41, 5, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 475934765, 'comment_body': ""Bring this closer to where it's used"", 'comment_created': datetime.datetime(2020, 8, 24, 22, 43, 58, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 475935089, 'comment_body': 'We control this data, so let\'s make it specific :)\r\n```suggestion\r\n  expect($container.find("".textSelectionSVG"").length).toBe(2);\r\n  expect($container.find("".BRparagElement"").length).toBe(1);\r\n  expect($container.find("".BRwordElement"").length).toBe(1);\r\n```', 'comment_created': datetime.datetime(2020, 8, 24, 22, 44, 56, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 475935428, 'comment_body': ""Let's export this for testing\r\n\r\n```suggestion\r\nexport class TextSelectionPlugin {\r\n```"", 'comment_created': datetime.datetime(2020, 8, 24, 22, 45, 54, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 475935936, 'comment_body': 'We can test this in complete isolation (and elsewhere)\r\n\r\n```js\r\nconst tsp = new TextSelectionPlugin(true)\r\n```', 'comment_created': datetime.datetime(2020, 8, 24, 22, 47, 20, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 475936711, 'comment_body': ""dealing with time is a bit messy in unit tests. You don't want to use `setTimeout` because it will slow down the tests (and very likely jest will finish the test before your timeout is even hit!).\r\n\r\nDo a search for `clock` or something in the tests; there are some `sinon` methods that let you control time (move it forward by a fixed about without having to have a bunch of nested functions)."", 'comment_created': datetime.datetime(2020, 8, 24, 22, 49, 43, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 475937564, 'comment_body': 'Add tests for:\r\n\r\n- newline added at end of paragraph\r\n- no space added at end of paragraph\r\n- coordinates containing 5 letters (copy from the Japanese book we were testing)\r\n- does not create new SVG if already there\r\n- works if paragraph has exactly one word\r\n- works if paragraph has more than one word', 'comment_created': datetime.datetime(2020, 8, 24, 22, 52, 8, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 475937657, 'comment_body': 'Add a comment with the link to the djvu where you copied this from', 'comment_created': datetime.datetime(2020, 8, 24, 22, 52, 26, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 475938143, 'comment_body': '```suggestion\r\n  sinon.stub(br.textSelectionPlugin, ""getPageText"")\r\n      .resolves($(parser.parseFromString(FAKE_XML, ""text/xml"")));\r\n```', 'comment_created': datetime.datetime(2020, 8, 24, 22, 53, 49, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 475938552, 'comment_body': 'Can you check what the file size of the built plugin file is? We might need to strip back somethings to make it smaller üò¨  (I.e. async/await)', 'comment_created': datetime.datetime(2020, 8, 24, 22, 55, 3, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 475938867, 'comment_body': 'This is still a little awkward; is there any way we can avoid having this function exist?', 'comment_created': datetime.datetime(2020, 8, 24, 22, 56, 3, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 476472241, 'comment_body': 'Red color useful when testing, should I remove it?', 'comment_created': datetime.datetime(2020, 8, 25, 14, 1, 33, tzinfo=datetime.timezone.utc), 'commenter': 'giacomo-cgn', 'type': 'User'}, {'comment_id': 476472922, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 25, 14, 2, 29, tzinfo=datetime.timezone.utc), 'commenter': 'giacomo-cgn', 'type': 'User'}, {'comment_id': 476473749, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 25, 14, 3, 33, tzinfo=datetime.timezone.utc), 'commenter': 'giacomo-cgn', 'type': 'User'}, {'comment_id': 476475179, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 25, 14, 5, 25, tzinfo=datetime.timezone.utc), 'commenter': 'giacomo-cgn', 'type': 'User'}, {'comment_id': 476478461, 'comment_body': '`.clipboardData` does not seem to work with jquery events, only with HTML ones', 'comment_created': datetime.datetime(2020, 8, 25, 14, 9, 24, tzinfo=datetime.timezone.utc), 'commenter': 'giacomo-cgn', 'type': 'User'}, {'comment_id': 476479044, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 25, 14, 10, 5, tzinfo=datetime.timezone.utc), 'commenter': 'giacomo-cgn', 'type': 'User'}, {'comment_id': 476480388, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 25, 14, 11, 43, tzinfo=datetime.timezone.utc), 'commenter': 'giacomo-cgn', 'type': 'User'}, {'comment_id': 476480550, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 25, 14, 11, 54, tzinfo=datetime.timezone.utc), 'commenter': 'giacomo-cgn', 'type': 'User'}, {'comment_id': 476481522, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 25, 14, 13, 19, tzinfo=datetime.timezone.utc), 'commenter': 'giacomo-cgn', 'type': 'User'}, {'comment_id': 476482743, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 25, 14, 14, 58, tzinfo=datetime.timezone.utc), 'commenter': 'giacomo-cgn', 'type': 'User'}, {'comment_id': 476491142, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 25, 14, 25, 50, tzinfo=datetime.timezone.utc), 'commenter': 'giacomo-cgn', 'type': 'User'}, {'comment_id': 476493989, 'comment_body': ""Since it's not being used, yeah; it's a little confusing."", 'comment_created': datetime.datetime(2020, 8, 25, 14, 29, 26, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 476495373, 'comment_body': 'So `$container[0].addEventListener( ...`; or you can get the original, HTML event from the jquery event using `event.originalEvent` https://stackoverflow.com/questions/5926123/get-the-raw-event-from-jquery', 'comment_created': datetime.datetime(2020, 8, 25, 14, 31, 19, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 476513104, 'comment_body': 'done, implemented something similar to median, but instead of taking the element in the middle it takes the element bigger than the 85% of the rest (slightly bigger words seems to be better for selection)', 'comment_created': datetime.datetime(2020, 8, 25, 14, 54, 16, tzinfo=datetime.timezone.utc), 'commenter': 'giacomo-cgn', 'type': 'User'}, {'comment_id': 476513882, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 25, 14, 55, 18, tzinfo=datetime.timezone.utc), 'commenter': 'giacomo-cgn', 'type': 'User'}, {'comment_id': 476559265, 'comment_body': 'plugin.text_selection.js is 61KB and plugin.text_selection.js.map is 258KB. There are other plugins of comparable size such as tts, search and url.', 'comment_created': datetime.datetime(2020, 8, 25, 15, 58, 26, tzinfo=datetime.timezone.utc), 'commenter': 'giacomo-cgn', 'type': 'User'}, {'comment_id': 476562896, 'comment_body': 'Tried to add an event to event.js, but I was not able to pass the $brContainer as a parameter', 'comment_created': datetime.datetime(2020, 8, 25, 16, 3, 25, tzinfo=datetime.timezone.utc), 'commenter': 'giacomo-cgn', 'type': 'User'}, {'comment_id': 476565780, 'comment_body': 'That function is only called for the 1page mode for now', 'comment_created': datetime.datetime(2020, 8, 25, 16, 7, 28, tzinfo=datetime.timezone.utc), 'commenter': 'giacomo-cgn', 'type': 'User'}, {'comment_id': 476574313, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 25, 16, 20, 33, tzinfo=datetime.timezone.utc), 'commenter': 'giacomo-cgn', 'type': 'User'}, {'comment_id': 476574961, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 25, 16, 21, 31, tzinfo=datetime.timezone.utc), 'commenter': 'giacomo-cgn', 'type': 'User'}, {'comment_id': 476606179, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 25, 17, 11, 35, tzinfo=datetime.timezone.utc), 'commenter': 'giacomo-cgn', 'type': 'User'}, {'comment_id': 476623674, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 25, 17, 36, tzinfo=datetime.timezone.utc), 'commenter': 'giacomo-cgn', 'type': 'User'}, {'comment_id': 476630893, 'comment_body': 'üëç Few! That seems good :) (once we switch to webpack 5, this will drop _waaaay_ down, too!)', 'comment_created': datetime.datetime(2020, 8, 25, 17, 48, 33, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 476631421, 'comment_body': 'What is $brContainer? Can `TextSelectionPlugin` take a copy of that element and hold on to it? Or does it change?', 'comment_created': datetime.datetime(2020, 8, 25, 17, 49, 25, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 476631854, 'comment_body': ""Actually nevermind; it's ok. I don't think that's worth implementing right now. But if there are other options :) "", 'comment_created': datetime.datetime(2020, 8, 25, 17, 50, 7, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 476632585, 'comment_body': 'Ah; Can we add it 2up as well? Or is it more complicated than that?', 'comment_created': datetime.datetime(2020, 8, 25, 17, 51, 16, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 476637807, 'comment_body': ""pageIndex param is probably worth keeping because it's used to choose between different xml elements"", 'comment_created': datetime.datetime(2020, 8, 25, 18, 0, 16, tzinfo=datetime.timezone.utc), 'commenter': 'giacomo-cgn', 'type': 'User'}, {'comment_id': 477460408, 'comment_body': ""paragraph element call jquery .outer(), or non-jquery outerHTML (something like that) and check if it has `\\n` in it.\r\n\r\nOr, you can do something `$('text')[0].nextSiblingNode` (or something like that)"", 'comment_created': datetime.datetime(2020, 8, 26, 17, 15, 21, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 477461178, 'comment_body': ""Or actually, you've met the codecov limits, so lets not bother :P "", 'comment_created': datetime.datetime(2020, 8, 26, 17, 16, 40, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}, {'comment_id': 477489386, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 26, 18, 4, 52, tzinfo=datetime.timezone.utc), 'commenter': 'giacomo-cgn', 'type': 'User'}, {'comment_id': 479532067, 'comment_body': '```suggestion\r\n<PARAGRAPH><LINE><WORD coords=""1216,2768,1256,2640,2690"">test</WORD></LINE></PARAGRAPH></OBJECT>`;\r\n```', 'comment_created': datetime.datetime(2020, 8, 28, 20, 59, 58, tzinfo=datetime.timezone.utc), 'commenter': 'cdrini', 'type': 'User'}]","[{'commit_sha': 'ddf1c997c1bee4efe5ef71cf39eeb8e00c11bc81', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '821297cee69fbff81396c9fd68853fd733e27363', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a57c708dced3133f70eff7f2457baa2fa5df58a', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da862b00c1a6d46a92b76d81dac0d5d351f6679f', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a841c70b1ac6ef0aa79a379538df19ada597bdb', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae7bef034f901b43cf96aaf5fe752d6b2cbf24bc', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3394bc4ab8c9359d8883ecc1fd91bd7b63436eb', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f8a5c20df71ab4b35b1aac2f2c62a2a8219dfc3', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36ad09672f27e05d06654f8f71803dd080e14ef4', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c6218c1c273a444226a262e88cabed86e35e062c', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec5daa29f12d3d86f50fba8da02be9edcd5d322f', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '666718f817c2581032bf0b263b10e0ba34ccd570', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '65323ecf590d594f1e2896074670ac14144b8549', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b6cf22f7b56be242f9a48271d451c2924599d678', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '592d51fc45cc0e1eddc1391180e2a21da024b979', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67a9214064c776d11a1d5e58ceaf353bf10825c0', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d1ca4bcc033d83b09dc61b4b766ae1bab2c0406', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0476b9c47e111040d569c532d1ee2774d9700096', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '772687f4c90c22012cdda1f82259d4ea414e4c90', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd013c8622c98e3e606d82d279e0f6604c8bb678e', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '630d07b23d27729495c353ac458047f09a4a7570', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e61d11676caeccb72438dcb076640d109babece', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea7400bb0427b61e74f538530508e79b415f3dbd', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc9fae5d212293d7c1f2e7ecc6ece3b03eb06deb', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7abf5267e305868fadce59be87b659c63c591275', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d59399177d42b0d43832eb54442d5d5e1a39dbb', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3b3275d5149b1bf67ab59797ffbc32cc8ab3436', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19d98e49fc0b32da0accc897b56f44d8e3723653', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9937e30b38ae15c19c8a5547405a005feec119bc', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2dc8c4004796273fa17cda46d2299872d251dfbd', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd87d60d1ebdf0fbd244dcb780f6000d2d67b968c', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd75623dba005830c40da950207cafe2206549176', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '830f9f45f3d3324c31f8e009bbbee7c00fcb547c', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ebca7d5ff109b3a6d005fe53db41565041f3926', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ded756aa01146ad9edc5abdbf75d0f6301ada6c', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dad7916e88ea2595266f28c8323aaeb500d5286c', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0bcf5d7686f21dbcd4ece0f60eef58e45a62c50a', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff456a330a8727c7096f2c5db4d1f2e920ead328', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf796d3913f59c7193485081e0bce72746a29355', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '718dcf43b1f6c2788d11f6aba6451dff0c1a0189', 'committer_username': 'giacomo-cgn', 'committer_name': 'Giacomo Cignoni', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 1, 17, 39, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa0d3d22c7be8c1637d2292fcd1774544954bc7a', 'committer_username': 'cdrini', 'committer_name': 'Drini Cami', 'committer_email': 'cdrini@gmail.com', 'commit_date': datetime.datetime(2013, 12, 24, 4, 49, 24, tzinfo=datetime.timezone.utc)}]",Giacomo Cignoni,10365688,,User,,25,,32,21

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
72221,bookreader,internetarchive/bookreader,JavaScript,409,961,48,68,2912,221,69,88,"[{'id': 455873940, 'number': 386, 'closed': datetime.datetime(2020, 7, 25, 0, 28, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 23, 18, 11, 8, tzinfo=datetime.timezone.utc), 'time_taken': 109021.0, 'time_delta': '1 day, 6:17:01', 'additions': 4, 'deletions': 2, 'state': 'closed'}, {'id': 455126284, 'number': 383, 'closed': datetime.datetime(2020, 7, 23, 16, 39, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 22, 13, 39, 43, tzinfo=datetime.timezone.utc), 'time_taken': 97173.0, 'time_delta': '1 day, 2:59:33', 'additions': 3, 'deletions': 6, 'state': 'closed'}, {'id': 453332949, 'number': 378, 'closed': datetime.datetime(2020, 7, 27, 19, 12, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 20, 11, 7, tzinfo=datetime.timezone.utc), 'time_taken': 633909.0, 'time_delta': '7 days, 8:05:09', 'additions': 87, 'deletions': 2, 'state': 'closed'}, {'id': 446153619, 'number': 367, 'closed': datetime.datetime(2020, 8, 29, 21, 36, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 8, 10, 42, 2, tzinfo=datetime.timezone.utc), 'time_taken': 4532053.0, 'time_delta': '52 days, 10:54:13', 'additions': 420, 'deletions': 8, 'state': 'closed'}, {'id': 434629202, 'number': 356, 'closed': datetime.datetime(2020, 6, 30, 14, 22, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 15, 15, 54, 15, tzinfo=datetime.timezone.utc), 'time_taken': 1290469.0, 'time_delta': '14 days, 22:27:49', 'additions': 50, 'deletions': 87, 'state': 'closed'}, {'id': 432018585, 'number': 351, 'closed': datetime.datetime(2020, 7, 9, 19, 59, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 9, 19, 28, 52, tzinfo=datetime.timezone.utc), 'time_taken': 2593834.0, 'time_delta': '30 days, 0:30:34', 'additions': 262, 'deletions': 58, 'state': 'closed'}, {'id': 431996205, 'number': 350, 'closed': datetime.datetime(2020, 7, 2, 13, 11, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 9, 18, 45, 59, tzinfo=datetime.timezone.utc), 'time_taken': 1967140.0, 'time_delta': '22 days, 18:25:40', 'additions': 51, 'deletions': 0, 'state': 'closed'}, {'id': 428041407, 'number': 344, 'closed': datetime.datetime(2020, 6, 5, 22, 16, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 4, 19, 25, 18, tzinfo=datetime.timezone.utc), 'time_taken': 96684.0, 'time_delta': '1 day, 2:51:24', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 426850207, 'number': 342, 'closed': datetime.datetime(2020, 6, 15, 13, 42, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 2, 21, 56, 57, tzinfo=datetime.timezone.utc), 'time_taken': 1093535.0, 'time_delta': '12 days, 15:45:35', 'additions': 72, 'deletions': 18, 'state': 'closed'}, {'id': 422917301, 'number': 322, 'closed': datetime.datetime(2020, 6, 8, 15, 7, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 25, 22, 51, 4, tzinfo=datetime.timezone.utc), 'time_taken': 1181806.0, 'time_delta': '13 days, 16:16:46', 'additions': 125, 'deletions': 23, 'state': 'closed'}, {'id': 421037832, 'number': 314, 'closed': datetime.datetime(2020, 5, 22, 15, 17, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 20, 21, 50, 33, tzinfo=datetime.timezone.utc), 'time_taken': 149195.0, 'time_delta': '1 day, 17:26:35', 'additions': 162, 'deletions': 2, 'state': 'closed'}, {'id': 416117355, 'number': 308, 'closed': datetime.datetime(2020, 5, 12, 17, 57, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 11, 13, 48, 43, tzinfo=datetime.timezone.utc), 'time_taken': 101352.0, 'time_delta': '1 day, 4:09:12', 'additions': 2055, 'deletions': 2499, 'state': 'closed'}]"
