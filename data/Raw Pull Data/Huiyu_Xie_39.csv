pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1473588512,Change number type from `Float64` to `Float32`,"This is just the start of my work, and I have something to inform you @ranocha  about, so please don't merge them directly.

In conclusion, there are three cases I'd like to talk about,
Case 1: something like `0.5`, `0.25`, and etc., we can directly convert them to the corresponding `Float32` format (i.e., `0.5f0` and `0.25f0`).
Case 2: something like `1 / 2`, `3 / 2` and etc., we can also convert them to `Float32` (i.e., `0.5f0` and `1.5f0`) without losing information.
Case 3: when numbers like `0.5` or `1 / 2` combined with comparison, e.g., `if a > 0.5`, I choose to keep it as original since 1) it does not participate in the process of actual computation and 2) it is better to keep the new code consistent with original as much as possible. 

I think what you mainly want to achieve in this PR is focused on the part of PDE/ODE calculation (i.e., anything before the callbacks) and does not include the callback steps. So now I choose to skip those callback directories (e.g. `callbacks_stage`) under `src` directory. However, if you also want to apply this PR to the callback part (like making the result of the runtime counter `Float32`), please inform me :)

But as I said before, this way cannot guarantee that the repository works for both input of type `Float32` and `Float64` (to get the corresponding output of the same type).
(1) It cannot guarantee that the output is of type `Float64` when the input is also `Float64`. For example, 
```Julia
function foo1(input1, input2, input3)
    a = input1 + input2 + input3 # get a as `Float64`
    b = a > 0.0 ? 1.0f0 : input1 * input2 * input3 # get b as `Float32` or `Float64`
    return b
end
```
and if, in the process of calculation, functions like this are invoked too much, then the result may probably be of type `Float32`, even though the input is `Float64`.
(2) Similarly, it cannot guarantee that the output is of type `Float32` when the input is also `Float32`. For example,
```Julia
function foo2(input1, input2, input3)
    a = input1 + input2 + input3 # get a as `Float32`
    b = 0.8 * a # get b as `Float64`
    return b
end
```
this time the type promotion probably happens in the process of calculation because some numbers are not required to convert to `Float32` (like `0.8` in the above example). Also, a more typical example could be 
```Julia
function foo3(input1, input2, input3)
    a1 = 0.5f0 * input1 # be of type `Float32`
    a2 = 0.5f0 * input2 # be of type `Float32`
    a3 = 0.1 * input3 # be of type `Float64`
    return SVector(a1, a2, a3) # get all types of `Float64` due to type promotion
end
```
here the `SVector` appears frequently in code and the sample like it actually exists.

Please tell me how you think about @ranocha and if you would like to keep going then I would like to continue because first I promised you before and second if I refuse to do this then you probably be the one who have to do such work and I think your time should not waste on something like this. But this work is much more time-consuming and boring than I expected, and I probably choose to complete a small part of them each day (sorry I cannot complete in one day) and please tell me when you would like to make it formally merge into the `main` branch. 

Also, I hope you choose me to work on this not because you think I am only suitable for doing such things. And I still have to say that, from my personal perspective, this way is not good.",False,1604,https://api.github.com/repos/trixi-framework/Trixi.jl/pulls/1604,https://github.com/trixi-framework/Trixi.jl/pull/1604,closed,0,0,0,0,11,18,0,1,[],2023-08-14 01:34:04+00:00,2023-09-26 06:10:27+00:00,3731783.0,"43 days, 4:36:23","[{'comment_id': 1294237361, 'comment_body': 'Please do not change the initial conditions and source terms (here and below) right now. This is a case where we would need to discuss how to proceed ideally. To be generic, the floating point type should be determined from the types of `x` and `t` - and maybe coefficients coming from the `equations`. On the other hand, initial conditions used in applications are set in the elixirs, so people could adapt them there accordingly based on the types they want to use.\r\n', 'comment_created': datetime.datetime(2023, 8, 15, 6, 25, 54, tzinfo=datetime.timezone.utc), 'commenter': 'ranocha', 'type': 'User'}, {'comment_id': 1294238596, 'comment_body': '```suggestion\r\n    u_boundary = SVector(u_inner[1] - 2 * u_normal * normal[1],\r\n                         u_inner[2] - 2 * u_normal * normal[2],\r\n```\r\nIntegers are even more generic than `Float32` and will result in the same code in the end.', 'comment_created': datetime.datetime(2023, 8, 15, 6, 28, tzinfo=datetime.timezone.utc), 'commenter': 'ranocha', 'type': 'User'}, {'comment_id': 1294239756, 'comment_body': '```suggestion\r\n    omega = 2 # adjusted from suggested value of 1.5\r\n```', 'comment_created': datetime.datetime(2023, 8, 15, 6, 30, 15, tzinfo=datetime.timezone.utc), 'commenter': 'ranocha', 'type': 'User'}, {'comment_id': 1294239850, 'comment_body': '```suggestion\r\n    mu = 1\r\n```', 'comment_created': datetime.datetime(2023, 8, 15, 6, 30, 25, tzinfo=datetime.timezone.utc), 'commenter': 'ranocha', 'type': 'User'}, {'comment_id': 1294240058, 'comment_body': '```suggestion\r\n    mu = 1\r\n```', 'comment_created': datetime.datetime(2023, 8, 15, 6, 30, 50, tzinfo=datetime.timezone.utc), 'commenter': 'ranocha', 'type': 'User'}, {'comment_id': 1294240106, 'comment_body': '```suggestion\r\n    omega = 2 # adjusted from suggested value of 1.5\r\n```', 'comment_created': datetime.datetime(2023, 8, 15, 6, 30, 57, tzinfo=datetime.timezone.utc), 'commenter': 'ranocha', 'type': 'User'}, {'comment_id': 1294357315, 'comment_body': ""Thanks for the review! I considered that the original type is a float number, so I made changes to it as well. Do you want me to change all numbers like `2.0` back to a more generic type `Int`? Also, I don't know why you chose to use float number instead of an integer in the original code."", 'comment_created': datetime.datetime(2023, 8, 15, 9, 6, 52, tzinfo=datetime.timezone.utc), 'commenter': 'huiyuxie', 'type': 'User'}, {'comment_id': 1294750438, 'comment_body': 'This code was written some time ago. I think we were just less careful about generic types at that point. It would indeed be a great contribution (although a boring task) to generalize places like these to use integers.', 'comment_created': datetime.datetime(2023, 8, 15, 15, 16, 55, tzinfo=datetime.timezone.utc), 'commenter': 'ranocha', 'type': 'User'}, {'comment_id': 1296720167, 'comment_body': '```suggestion\r\n    rho_e = p / (equations.gamma - 1) + 0.5f0 * rho * v1^2\r\n```', 'comment_created': datetime.datetime(2023, 8, 17, 6, 11, 44, tzinfo=datetime.timezone.utc), 'commenter': 'ranocha', 'type': 'User'}, {'comment_id': 1296720517, 'comment_body': ""```suggestion\r\n                 (1 + 0.5f0 * (equations.gamma - 1) * v_normal / sound_speed)^(2 *\r\n                                                                               equations.gamma *\r\n                                                                               equations.inv_gamma_minus_one)\r\n```\r\nThat's something that should be fixed by running the formatter"", 'comment_created': datetime.datetime(2023, 8, 17, 6, 12, 17, tzinfo=datetime.timezone.utc), 'commenter': 'ranocha', 'type': 'User'}, {'comment_id': 1296721467, 'comment_body': '```suggestion\r\n    rho_e = p / (equations.gamma - 1) + 0.5f0 * rho * (v1^2 + v2^2)\r\n```', 'comment_created': datetime.datetime(2023, 8, 17, 6, 13, 32, tzinfo=datetime.timezone.utc), 'commenter': 'ranocha', 'type': 'User'}, {'comment_id': 1296722810, 'comment_body': '```suggestion\r\n    du5 = 2 * rhox * (1.5f0 - C_grav * rho) # ""3"" in ""3/2 = 1.5"" is the number of spatial dimensions\r\n```', 'comment_created': datetime.datetime(2023, 8, 17, 6, 15, 27, tzinfo=datetime.timezone.utc), 'commenter': 'ranocha', 'type': 'User'}, {'comment_id': 1296729370, 'comment_body': 'This one is tricky. We normalize the `normal_direction` in line 290 above. By default, the `norm` of a vector of integers is a `Float64`. Thus, we should probably use `Float32` here.', 'comment_created': datetime.datetime(2023, 8, 17, 6, 24, 11, tzinfo=datetime.timezone.utc), 'commenter': 'ranocha', 'type': 'User'}, {'comment_id': 1296779402, 'comment_body': 'Sorry but I was advised not to change number types from the initial condition and source terms. If you change your mind, please inform me. If not, I could further leave some comments on these functions if you want.', 'comment_created': datetime.datetime(2023, 8, 17, 7, 20, 37, tzinfo=datetime.timezone.utc), 'commenter': 'huiyuxie', 'type': 'User'}, {'comment_id': 1296809719, 'comment_body': ""Well, these lines were changed in the PR - that's why I saw them in the review. Since these changes belong to the case where it's clear what to do, it's fine to change them here."", 'comment_created': datetime.datetime(2023, 8, 17, 7, 42, 31, tzinfo=datetime.timezone.utc), 'commenter': 'ranocha', 'type': 'User'}, {'comment_id': 1296825621, 'comment_body': ""> Well, these lines were changed in the PR.\r\n\r\nYes and I changed them just because I was not feeling good with fraction type like `1 / 2`. Especially, in some places it appears as `0.5`, and in others, it appears as `1 / 2`. It is not consistent.\r\n\r\nIt's not clear here. Whether we change the `0.5` to `0.5f0` or not, the result always returns a static vector of `Float64` numbers. So it needs further discussion to make it possible to return `Float32` numbers."", 'comment_created': datetime.datetime(2023, 8, 17, 7, 56, 59, tzinfo=datetime.timezone.utc), 'commenter': 'huiyuxie', 'type': 'User'}, {'comment_id': 1297135095, 'comment_body': 'These are cases that we should keep on a list of more involved changes (also in 3D) since `4 / 3` will be a `Float64` (but the current changes here are fine for now).', 'comment_created': datetime.datetime(2023, 8, 17, 12, 15, 51, tzinfo=datetime.timezone.utc), 'commenter': 'ranocha', 'type': 'User'}, {'comment_id': 1297137294, 'comment_body': ""> Whether we change the 0.5 to 0.5f0 or not, the result always returns a static vector of Float64 numbers. So it needs further discussion to make it possible to return Float32 numbers.\r\n\r\nThat's true. I just meant it's fine to change `1 / 2` to `0.5f0` in cases like these."", 'comment_created': datetime.datetime(2023, 8, 17, 12, 17, 58, tzinfo=datetime.timezone.utc), 'commenter': 'ranocha', 'type': 'User'}]",[],Huiyu Xie,57002293,huiyuxie.sde@gmail.com,User,,15,,8,17
1473588512,Change number type from `Float64` to `Float32`,"This is just the start of my work, and I have something to inform you @ranocha  about, so please don't merge them directly.

In conclusion, there are three cases I'd like to talk about,
Case 1: something like `0.5`, `0.25`, and etc., we can directly convert them to the corresponding `Float32` format (i.e., `0.5f0` and `0.25f0`).
Case 2: something like `1 / 2`, `3 / 2` and etc., we can also convert them to `Float32` (i.e., `0.5f0` and `1.5f0`) without losing information.
Case 3: when numbers like `0.5` or `1 / 2` combined with comparison, e.g., `if a > 0.5`, I choose to keep it as original since 1) it does not participate in the process of actual computation and 2) it is better to keep the new code consistent with original as much as possible. 

I think what you mainly want to achieve in this PR is focused on the part of PDE/ODE calculation (i.e., anything before the callbacks) and does not include the callback steps. So now I choose to skip those callback directories (e.g. `callbacks_stage`) under `src` directory. However, if you also want to apply this PR to the callback part (like making the result of the runtime counter `Float32`), please inform me :)

But as I said before, this way cannot guarantee that the repository works for both input of type `Float32` and `Float64` (to get the corresponding output of the same type).
(1) It cannot guarantee that the output is of type `Float64` when the input is also `Float64`. For example, 
```Julia
function foo1(input1, input2, input3)
    a = input1 + input2 + input3 # get a as `Float64`
    b = a > 0.0 ? 1.0f0 : input1 * input2 * input3 # get b as `Float32` or `Float64`
    return b
end
```
and if, in the process of calculation, functions like this are invoked too much, then the result may probably be of type `Float32`, even though the input is `Float64`.
(2) Similarly, it cannot guarantee that the output is of type `Float32` when the input is also `Float32`. For example,
```Julia
function foo2(input1, input2, input3)
    a = input1 + input2 + input3 # get a as `Float32`
    b = 0.8 * a # get b as `Float64`
    return b
end
```
this time the type promotion probably happens in the process of calculation because some numbers are not required to convert to `Float32` (like `0.8` in the above example). Also, a more typical example could be 
```Julia
function foo3(input1, input2, input3)
    a1 = 0.5f0 * input1 # be of type `Float32`
    a2 = 0.5f0 * input2 # be of type `Float32`
    a3 = 0.1 * input3 # be of type `Float64`
    return SVector(a1, a2, a3) # get all types of `Float64` due to type promotion
end
```
here the `SVector` appears frequently in code and the sample like it actually exists.

Please tell me how you think about @ranocha and if you would like to keep going then I would like to continue because first I promised you before and second if I refuse to do this then you probably be the one who have to do such work and I think your time should not waste on something like this. But this work is much more time-consuming and boring than I expected, and I probably choose to complete a small part of them each day (sorry I cannot complete in one day) and please tell me when you would like to make it formally merge into the `main` branch. 

Also, I hope you choose me to work on this not because you think I am only suitable for doing such things. And I still have to say that, from my personal perspective, this way is not good.",False,1604,https://api.github.com/repos/trixi-framework/Trixi.jl/pulls/1604,https://github.com/trixi-framework/Trixi.jl/pull/1604,closed,0,0,0,0,11,18,0,1,[],2023-08-14 01:34:04+00:00,2023-09-26 06:10:27+00:00,3731783.0,"43 days, 4:36:23","[{'comment_id': 1294237361, 'comment_body': 'Please do not change the initial conditions and source terms (here and below) right now. This is a case where we would need to discuss how to proceed ideally. To be generic, the floating point type should be determined from the types of `x` and `t` - and maybe coefficients coming from the `equations`. On the other hand, initial conditions used in applications are set in the elixirs, so people could adapt them there accordingly based on the types they want to use.\r\n', 'comment_created': datetime.datetime(2023, 8, 15, 6, 25, 54, tzinfo=datetime.timezone.utc), 'commenter': 'ranocha', 'type': 'User'}, {'comment_id': 1294238596, 'comment_body': '```suggestion\r\n    u_boundary = SVector(u_inner[1] - 2 * u_normal * normal[1],\r\n                         u_inner[2] - 2 * u_normal * normal[2],\r\n```\r\nIntegers are even more generic than `Float32` and will result in the same code in the end.', 'comment_created': datetime.datetime(2023, 8, 15, 6, 28, tzinfo=datetime.timezone.utc), 'commenter': 'ranocha', 'type': 'User'}, {'comment_id': 1294239756, 'comment_body': '```suggestion\r\n    omega = 2 # adjusted from suggested value of 1.5\r\n```', 'comment_created': datetime.datetime(2023, 8, 15, 6, 30, 15, tzinfo=datetime.timezone.utc), 'commenter': 'ranocha', 'type': 'User'}, {'comment_id': 1294239850, 'comment_body': '```suggestion\r\n    mu = 1\r\n```', 'comment_created': datetime.datetime(2023, 8, 15, 6, 30, 25, tzinfo=datetime.timezone.utc), 'commenter': 'ranocha', 'type': 'User'}, {'comment_id': 1294240058, 'comment_body': '```suggestion\r\n    mu = 1\r\n```', 'comment_created': datetime.datetime(2023, 8, 15, 6, 30, 50, tzinfo=datetime.timezone.utc), 'commenter': 'ranocha', 'type': 'User'}, {'comment_id': 1294240106, 'comment_body': '```suggestion\r\n    omega = 2 # adjusted from suggested value of 1.5\r\n```', 'comment_created': datetime.datetime(2023, 8, 15, 6, 30, 57, tzinfo=datetime.timezone.utc), 'commenter': 'ranocha', 'type': 'User'}, {'comment_id': 1294357315, 'comment_body': ""Thanks for the review! I considered that the original type is a float number, so I made changes to it as well. Do you want me to change all numbers like `2.0` back to a more generic type `Int`? Also, I don't know why you chose to use float number instead of an integer in the original code."", 'comment_created': datetime.datetime(2023, 8, 15, 9, 6, 52, tzinfo=datetime.timezone.utc), 'commenter': 'huiyuxie', 'type': 'User'}, {'comment_id': 1294750438, 'comment_body': 'This code was written some time ago. I think we were just less careful about generic types at that point. It would indeed be a great contribution (although a boring task) to generalize places like these to use integers.', 'comment_created': datetime.datetime(2023, 8, 15, 15, 16, 55, tzinfo=datetime.timezone.utc), 'commenter': 'ranocha', 'type': 'User'}, {'comment_id': 1296720167, 'comment_body': '```suggestion\r\n    rho_e = p / (equations.gamma - 1) + 0.5f0 * rho * v1^2\r\n```', 'comment_created': datetime.datetime(2023, 8, 17, 6, 11, 44, tzinfo=datetime.timezone.utc), 'commenter': 'ranocha', 'type': 'User'}, {'comment_id': 1296720517, 'comment_body': ""```suggestion\r\n                 (1 + 0.5f0 * (equations.gamma - 1) * v_normal / sound_speed)^(2 *\r\n                                                                               equations.gamma *\r\n                                                                               equations.inv_gamma_minus_one)\r\n```\r\nThat's something that should be fixed by running the formatter"", 'comment_created': datetime.datetime(2023, 8, 17, 6, 12, 17, tzinfo=datetime.timezone.utc), 'commenter': 'ranocha', 'type': 'User'}, {'comment_id': 1296721467, 'comment_body': '```suggestion\r\n    rho_e = p / (equations.gamma - 1) + 0.5f0 * rho * (v1^2 + v2^2)\r\n```', 'comment_created': datetime.datetime(2023, 8, 17, 6, 13, 32, tzinfo=datetime.timezone.utc), 'commenter': 'ranocha', 'type': 'User'}, {'comment_id': 1296722810, 'comment_body': '```suggestion\r\n    du5 = 2 * rhox * (1.5f0 - C_grav * rho) # ""3"" in ""3/2 = 1.5"" is the number of spatial dimensions\r\n```', 'comment_created': datetime.datetime(2023, 8, 17, 6, 15, 27, tzinfo=datetime.timezone.utc), 'commenter': 'ranocha', 'type': 'User'}, {'comment_id': 1296729370, 'comment_body': 'This one is tricky. We normalize the `normal_direction` in line 290 above. By default, the `norm` of a vector of integers is a `Float64`. Thus, we should probably use `Float32` here.', 'comment_created': datetime.datetime(2023, 8, 17, 6, 24, 11, tzinfo=datetime.timezone.utc), 'commenter': 'ranocha', 'type': 'User'}, {'comment_id': 1296779402, 'comment_body': 'Sorry but I was advised not to change number types from the initial condition and source terms. If you change your mind, please inform me. If not, I could further leave some comments on these functions if you want.', 'comment_created': datetime.datetime(2023, 8, 17, 7, 20, 37, tzinfo=datetime.timezone.utc), 'commenter': 'huiyuxie', 'type': 'User'}, {'comment_id': 1296809719, 'comment_body': ""Well, these lines were changed in the PR - that's why I saw them in the review. Since these changes belong to the case where it's clear what to do, it's fine to change them here."", 'comment_created': datetime.datetime(2023, 8, 17, 7, 42, 31, tzinfo=datetime.timezone.utc), 'commenter': 'ranocha', 'type': 'User'}, {'comment_id': 1296825621, 'comment_body': ""> Well, these lines were changed in the PR.\r\n\r\nYes and I changed them just because I was not feeling good with fraction type like `1 / 2`. Especially, in some places it appears as `0.5`, and in others, it appears as `1 / 2`. It is not consistent.\r\n\r\nIt's not clear here. Whether we change the `0.5` to `0.5f0` or not, the result always returns a static vector of `Float64` numbers. So it needs further discussion to make it possible to return `Float32` numbers."", 'comment_created': datetime.datetime(2023, 8, 17, 7, 56, 59, tzinfo=datetime.timezone.utc), 'commenter': 'huiyuxie', 'type': 'User'}, {'comment_id': 1297135095, 'comment_body': 'These are cases that we should keep on a list of more involved changes (also in 3D) since `4 / 3` will be a `Float64` (but the current changes here are fine for now).', 'comment_created': datetime.datetime(2023, 8, 17, 12, 15, 51, tzinfo=datetime.timezone.utc), 'commenter': 'ranocha', 'type': 'User'}, {'comment_id': 1297137294, 'comment_body': ""> Whether we change the 0.5 to 0.5f0 or not, the result always returns a static vector of Float64 numbers. So it needs further discussion to make it possible to return Float32 numbers.\r\n\r\nThat's true. I just meant it's fine to change `1 / 2` to `0.5f0` in cases like these."", 'comment_created': datetime.datetime(2023, 8, 17, 12, 17, 58, tzinfo=datetime.timezone.utc), 'commenter': 'ranocha', 'type': 'User'}]",[],Huiyu Xie,57002293,huiyuxie.sde@gmail.com,User,,15,,8,17

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
288376573,Trixi.jl,trixi-framework/Trixi.jl,Julia,100,519,25,44,4241,327,70,82,"[{'id': 2024592395, 'number': 2045, 'closed': None, 'created': datetime.datetime(2024, 8, 19, 0, 22, 14, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 7, 'deletions': 1, 'state': 'open'}, {'id': 1991205356, 'number': 2025, 'closed': None, 'created': datetime.datetime(2024, 7, 29, 1, 47, 22, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 66, 'deletions': 0, 'state': 'open'}, {'id': 1984605854, 'number': 2021, 'closed': datetime.datetime(2024, 8, 14, 6, 43, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 7, 24, 5, 30, 40, tzinfo=datetime.timezone.utc), 'time_taken': 1818796.0, 'time_delta': '21 days, 1:13:16', 'additions': 88, 'deletions': 230, 'state': 'closed'}, {'id': 1984591432, 'number': 2020, 'closed': datetime.datetime(2024, 7, 26, 10, 38, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 7, 24, 5, 17, 24, tzinfo=datetime.timezone.utc), 'time_taken': 192064.0, 'time_delta': '2 days, 5:21:04', 'additions': 51, 'deletions': 16, 'state': 'closed'}, {'id': 1977410590, 'number': 2015, 'closed': datetime.datetime(2024, 8, 16, 14, 23, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 7, 19, 7, 10, 11, tzinfo=datetime.timezone.utc), 'time_taken': 2445217.0, 'time_delta': '28 days, 7:13:37', 'additions': 101, 'deletions': 25, 'state': 'closed'}, {'id': 1973405667, 'number': 2011, 'closed': datetime.datetime(2024, 7, 24, 11, 31, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 7, 17, 10, 46, 6, tzinfo=datetime.timezone.utc), 'time_taken': 607527.0, 'time_delta': '7 days, 0:45:27', 'additions': 29, 'deletions': 1, 'state': 'closed'}, {'id': 1954276068, 'number': 2002, 'closed': datetime.datetime(2024, 8, 15, 6, 36, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 7, 5, 0, 37, 22, tzinfo=datetime.timezone.utc), 'time_taken': 3563933.0, 'time_delta': '41 days, 5:58:53', 'additions': 167, 'deletions': 13, 'state': 'closed'}, {'id': 1943620699, 'number': 1995, 'closed': datetime.datetime(2024, 7, 22, 19, 44, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 6, 28, 5, 26, 25, tzinfo=datetime.timezone.utc), 'time_taken': 2125083.0, 'time_delta': '24 days, 14:18:03', 'additions': 475, 'deletions': 166, 'state': 'closed'}, {'id': 1937012251, 'number': 1991, 'closed': datetime.datetime(2024, 7, 17, 14, 43, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 6, 25, 7, 9, 28, tzinfo=datetime.timezone.utc), 'time_taken': 1928034.0, 'time_delta': '22 days, 7:33:54', 'additions': 148, 'deletions': 33, 'state': 'closed'}, {'id': 1931974983, 'number': 1988, 'closed': datetime.datetime(2024, 7, 7, 8, 32, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 6, 21, 8, 6, 21, tzinfo=datetime.timezone.utc), 'time_taken': 1383963.0, 'time_delta': '16 days, 0:26:03', 'additions': 400, 'deletions': 209, 'state': 'closed'}, {'id': 1925813836, 'number': 1984, 'closed': datetime.datetime(2024, 7, 2, 10, 32, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 6, 18, 6, 59, 11, tzinfo=datetime.timezone.utc), 'time_taken': 1222414.0, 'time_delta': '14 days, 3:33:34', 'additions': 744, 'deletions': 408, 'state': 'closed'}, {'id': 1911210918, 'number': 1971, 'closed': datetime.datetime(2024, 6, 16, 12, 39, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 6, 10, 3, 58, 48, tzinfo=datetime.timezone.utc), 'time_taken': 549649.0, 'time_delta': '6 days, 8:40:49', 'additions': 279, 'deletions': 28, 'state': 'closed'}, {'id': 1908523904, 'number': 1969, 'closed': datetime.datetime(2024, 6, 23, 16, 44, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 6, 7, 6, 22, 44, tzinfo=datetime.timezone.utc), 'time_taken': 1419678.0, 'time_delta': '16 days, 10:21:18', 'additions': 298, 'deletions': 75, 'state': 'closed'}, {'id': 1906672306, 'number': 1968, 'closed': datetime.datetime(2024, 6, 25, 7, 23, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 6, 6, 8, 5, 48, tzinfo=datetime.timezone.utc), 'time_taken': 1639041.0, 'time_delta': '18 days, 23:17:21', 'additions': 162, 'deletions': 20, 'state': 'closed'}, {'id': 1876347591, 'number': 1948, 'closed': None, 'created': datetime.datetime(2024, 5, 17, 21, 44, 30, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 26, 'deletions': 0, 'state': 'open'}, {'id': 1876341004, 'number': 1947, 'closed': datetime.datetime(2024, 6, 14, 13, 57, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 5, 17, 21, 35, 30, tzinfo=datetime.timezone.utc), 'time_taken': 2391700.0, 'time_delta': '27 days, 16:21:40', 'additions': 458, 'deletions': 245, 'state': 'closed'}, {'id': 1863121099, 'number': 1938, 'closed': datetime.datetime(2024, 5, 15, 14, 25, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 5, 10, 3, 3, 47, tzinfo=datetime.timezone.utc), 'time_taken': 472930.0, 'time_delta': '5 days, 11:22:10', 'additions': 67, 'deletions': 4, 'state': 'closed'}, {'id': 1855411489, 'number': 1929, 'closed': datetime.datetime(2024, 5, 17, 20, 46, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 5, 6, 4, 34, 16, tzinfo=datetime.timezone.utc), 'time_taken': 1008734.0, 'time_delta': '11 days, 16:12:14', 'additions': 24, 'deletions': 0, 'state': 'closed'}, {'id': 1832601567, 'number': 1909, 'closed': datetime.datetime(2024, 6, 3, 12, 19, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 4, 19, 22, 33, 10, tzinfo=datetime.timezone.utc), 'time_taken': 3851182.0, 'time_delta': '44 days, 13:46:22', 'additions': 1075, 'deletions': 526, 'state': 'closed'}, {'id': 1473588512, 'number': 1604, 'closed': datetime.datetime(2023, 9, 26, 6, 10, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 14, 1, 34, 4, tzinfo=datetime.timezone.utc), 'time_taken': 3731783.0, 'time_delta': '43 days, 4:36:23', 'additions': 0, 'deletions': 0, 'state': 'closed'}]"
