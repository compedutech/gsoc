pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1053693362,Functional Loopy bp in a Gaussian Factor Graph.,"# Loopy BP
This PR contains some simple containers for Gaussian variables and Canonical form Gaussian factors as well as a light-weight wrapper to combine these into a factor graph. The containers and inference functions are currently both stored in `ssm_jax/bp/gauss_factor_graph.py`.

Loopy belief propagation is implemented is a functional manner by whereby the core functions take in a `GaussianFactorGraph` object and a dictionary of factor-to-variable messages and return updated messages. I've tried for a clean separation between the static elements (variable, factors, edges) and the dynamic elements (messages and belief states).

The core loop then looks like:
```python
messages = init_messages(factor_graph)
for _ in range(n_itr):
    messages = update_all_messages(factor_graph, messages)
```
aiming for the type of functional update design pattern seen in other jax libraries.

Belief states are also calculated in a functional manner using:
```python
beliefs = calculate_all_beliefs(factor_graph, messages)
```
This approach plays nice with jit, as a partial version of the update function can be compiled easily:
```python
jit_update = jit(lambda m: update_messages(factor_graph,m))
```

The Loopy bp results are tested against a chain lgssm and a simple tree in `ssm_jax/bp/gauss_factor_graph_test.py`.

### Future Improvements
There are a few natural places for improvements some of which are mentioned in the code, these include:
- Efficiently extracting blocks from joint precision matrix.
- Incorporate construction functions as methods for `GaussianFactorGraph` and `CanonicalFactor`.

Some longer-term improvements include:
- Improving jit integration
      - This might involve make the `GaussianFactorGraph` hashable so that jit can use `static_argnums`.
- Adding the possibility for partial updates, i.e. only passing messages along some edges.
      - This is not too far off with the current approach, for instance by looping over factors which are keys in `messages` rather than all of the factors in the graph gets you much of the way there.

",True,203,https://api.github.com/repos/probml/dynamax/pulls/203,https://github.com/probml/dynamax/pull/203,closed,457,0,2,3,0,0,0,0,[],2022-09-12 17:52:33+00:00,2022-09-13 17:31:16+00:00,85123.0,23:38:43,[],"[{'commit_sha': '2d58ccf84ab7c5c554a8e5fb2fb06e31f353cb35', 'committer_username': 'gileshd', 'committer_name': 'Giles Harper-Donnelly', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 20, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b38f71203b8594b9bf51b3b009442db578052b5', 'committer_username': 'gileshd', 'committer_name': 'Giles Harper-Donnelly', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 20, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '33c5b3fa130263bc216897fc0b35735bfbd0eb9b', 'committer_username': 'gileshd', 'committer_name': 'Giles Harper-Donnelly', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 20, 9, 56, tzinfo=datetime.timezone.utc)}]",Giles Harper-Donnelly,13415723,,User,,8,,1,3
1030432590,Belief Propagation on a Gaussian Chain,"This PR contains a starting point for gaussian belief propagation and a working implementation of message passing on a Gaussian chain.

There are two main components to the PR:

## Functions to manipulate Gaussian canonical potentials
These are contained in `bp/gaus_bp.py`.

These consist of the fundamental building blocks used to manipulate/construct canonical potentials:
- `info_condition`
- `info_marginalise`
- `info_multiply`
- `info_divide`
- `potential_from_conditional_linear_gaussian`

which do what they say on the tin. The consistency of `info_condition` and `potential_from_conditional_linear_gaussian` is tested in `gaus_bp_test.py`.

`gaus_bp` also contains some wrapper functions to apply these basic operations to the special case of canonical potentials over a pair of multivariate normal variables `pair_cpot_*`.

Going forward with the more general case it will likely be helpful to have functions to manipulate/extract the blocks of a precision matrix, `gaus_bp.py` contains some of these functions even though they are not currently in use.

## Belief propagation on a Gaussian chain.

Contained in `gaus_chain.py`.

At present it is limited to cases where dimensions remain constant along the chain (as is the case for chains representing state-space models).

In the current implementation gaussians potentials have a very lightweight representation:
- Potentials including a single variable are represented as a tuple `(K, h)` of the precision matrix and potential vector.
- Potentials over two variables are represented as a nested tuple of `((K11, K12, K22), (h1, h2))` containing blocks of the precision matrix and segments of the potential vector.

These are treated as simple `PyTrees` by jax and  the approach plays quite nicely with `vmap` and `scan` as for chains each leaf can just be replaced with a stacked rows of the corresponding parameter, with each row containing the parameters for a single time point.

A simple container dataclass `GaussianChainPotentials` provides a wrapper for the pairwise latent and emission potentials associated with a state-space model.

`gaus_chain_test.py` tests this implementation against `lgssm/info_inference` RTS smoothing.

## Further comments

- I am not particularly wedded to the current file structure or name conventions.
  - For instance `GaussianChainPotentials` could be moved to a `potentials.py` file.
  - Names could better reflect the limitation of fixed dimension along the chain.
- Could add wrapper classes the individual potentials (something currently only enjoyed by the entire chain) but in the current implementation they are immediately pulled out as rows from the leaves of the chain potential PyTrees and so the wrapping/unwrapping as a special object feels a bit superfluous.
  - The exception to this is the `prior_potential` which at present does 'float out in the open' as just an unnamed tuple.
- Perhaps should register `GaussianChainPotentials` as a `PyTree` node.",True,161,https://api.github.com/repos/probml/dynamax/pulls/161,https://github.com/probml/dynamax/pull/161,closed,453,3,6,7,1,26,0,0,[],2022-08-18 20:12:49+00:00,2022-08-22 20:10:19+00:00,345450.0,"3 days, 23:57:30","[{'comment_id': 950435518, 'comment_body': 'Maybe add  comment that we partitio the input as shown\r\n```\r\n[[ 0 1   2\r\n   3 4   5\r\n  \r\n   6 7   8 ]]\r\n```\r\n', 'comment_created': datetime.datetime(2022, 8, 19, 17, 48, 27, tzinfo=datetime.timezone.utc), 'commenter': 'murphyk', 'type': 'User'}, {'comment_id': 950435836, 'comment_body': 'Maybe rename this file `gauss_bp_utils` since it does not actually do BP', 'comment_created': datetime.datetime(2022, 8, 19, 17, 48, 54, tzinfo=datetime.timezone.utc), 'commenter': 'murphyk', 'type': 'User'}, {'comment_id': 950437415, 'comment_body': 'rename `u` to `b` for bias?', 'comment_created': datetime.datetime(2022, 8, 19, 17, 51, 20, tzinfo=datetime.timezone.utc), 'commenter': 'murphyk', 'type': 'User'}, {'comment_id': 950444109, 'comment_body': 'rename `u` to `b`', 'comment_created': datetime.datetime(2022, 8, 19, 18, 1, 15, tzinfo=datetime.timezone.utc), 'commenter': 'murphyk', 'type': 'User'}, {'comment_id': 950444679, 'comment_body': 'Change comment to `Check that sum_y phi(y,z) = p(y)`', 'comment_created': datetime.datetime(2022, 8, 19, 18, 1, 54, tzinfo=datetime.timezone.utc), 'commenter': 'murphyk', 'type': 'User'}, {'comment_id': 950458055, 'comment_body': 'I would add `initial_pot` to this class, so that all the UGM params are  bundled together.\r\n(I realize that it does not have an initial time index T.)', 'comment_created': datetime.datetime(2022, 8, 19, 18, 19, 17, tzinfo=datetime.timezone.utc), 'commenter': 'murphyk', 'type': 'User'}, {'comment_id': 950458305, 'comment_body': '`lambda_pots` -> `latent_pots` (or maybe `dynamics_pots`?)', 'comment_created': datetime.datetime(2022, 8, 19, 18, 19, 40, tzinfo=datetime.timezone.utc), 'commenter': 'murphyk', 'type': 'User'}, {'comment_id': 950459419, 'comment_body': 'This should return a `GaussianChainPotentials` struct. ', 'comment_created': datetime.datetime(2022, 8, 19, 18, 21, 9, tzinfo=datetime.timezone.utc), 'commenter': 'murphyk', 'type': 'User'}, {'comment_id': 950459858, 'comment_body': 'Maybe pass in optional length `T` in case `inputs=none` so we know how long to unroll model for.', 'comment_created': datetime.datetime(2022, 8, 19, 18, 21, 40, tzinfo=datetime.timezone.utc), 'commenter': 'murphyk', 'type': 'User'}, {'comment_id': 950462905, 'comment_body': ""I suggest you compute \r\n```\r\nlocal_evidence_pot = vmap(pair_cpot_condition, emission_pots, obs, obs_var=2)\r\n```\r\nin one go, and pass this as input to BP. This will allow us to later 'swap in' more complex (non-Gaussian) local evidence terms (eg from peter's code)."", 'comment_created': datetime.datetime(2022, 8, 19, 18, 26, 12, tzinfo=datetime.timezone.utc), 'commenter': 'murphyk', 'type': 'User'}, {'comment_id': 950465492, 'comment_body': 'Rename `marg_var` to `marginalize_onto`, to make it clear that this the variable you keep, not the one you marginalize out', 'comment_created': datetime.datetime(2022, 8, 19, 18, 29, 6, tzinfo=datetime.timezone.utc), 'commenter': 'murphyk', 'type': 'User'}, {'comment_id': 950479097, 'comment_body': 'maybe call these `filtered_bels` and `forward_messages`', 'comment_created': datetime.datetime(2022, 8, 19, 18, 45, 21, tzinfo=datetime.timezone.utc), 'commenter': 'murphyk', 'type': 'User'}, {'comment_id': 950483084, 'comment_body': ""I don't think up/down is the right metaphor, since the local evidene is already absorbed.\r\nI would write something like this\r\n```\r\nsmoothed_bel_present = carry // gamma(t)\r\nfiltered_bel_past, message_from_past, latent_pot_past_present = x // alpha(t-1), fwd(t), psi(t-1,t)\r\nbel_minus_message_from_past = info_divide(smoohted_bel_present, message_from_past) // gamma(t)/fwd(t)\r\nlatent_pot = pair_cpot_absorb_message(latent_pot_past_present, bel_minus_message_from_past message_var=2) // psi*(t-1,t) \r\nmessage_to_past = pair_cpot_marginalise(latent_pot, marg_var=1) // back(t-1)\r\nsmoothed_bel_past  = info_multiply(filtered_bel_past, message_to_past) // alpha(t-1) * back(t-1)\r\n```\r\n"", 'comment_created': datetime.datetime(2022, 8, 19, 18, 52, 13, tzinfo=datetime.timezone.utc), 'commenter': 'murphyk', 'type': 'User'}, {'comment_id': 950483324, 'comment_body': 'Rename to `smoothed_bels`', 'comment_created': datetime.datetime(2022, 8, 19, 18, 52, 35, tzinfo=datetime.timezone.utc), 'commenter': 'murphyk', 'type': 'User'}, {'comment_id': 950484909, 'comment_body': ""It's weird that you don't pass in `hy` even if it's no needed"", 'comment_created': datetime.datetime(2022, 8, 19, 18, 55, 4, tzinfo=datetime.timezone.utc), 'commenter': 'murphyk', 'type': 'User'}, {'comment_id': 950487599, 'comment_body': 'Maybe rename to `Kparams` and `hparams`?', 'comment_created': datetime.datetime(2022, 8, 19, 18, 59, 12, tzinfo=datetime.timezone.utc), 'commenter': 'murphyk', 'type': 'User'}, {'comment_id': 950488309, 'comment_body': 'Since you don;t currently use all this block stuff, maybe save for a later PR?', 'comment_created': datetime.datetime(2022, 8, 19, 19, 0, 22, tzinfo=datetime.timezone.utc), 'commenter': 'murphyk', 'type': 'User'}, {'comment_id': 950488764, 'comment_body': 'Maybe it would be clearer to pass in `Kxx, Kxy, Kyy, hx, hy` explicity, instead of a tuple?', 'comment_created': datetime.datetime(2022, 8, 19, 19, 1, 6, tzinfo=datetime.timezone.utc), 'commenter': 'murphyk', 'type': 'User'}, {'comment_id': 950595211, 'comment_body': ""I can't quite remember where 'u' came from (maybe somewhere in Murphy2023 or Koller & Friedman) I avoided 'bias' because I wanted to avoid confusion with the 'bias' term in the lgssm parameters - in that context 'u' is the combination of `input_weights @ inputs + bias` , but perhaps this is overcomplicating things and I agree it could be more descriptively named."", 'comment_created': datetime.datetime(2022, 8, 19, 22, 44, 20, tzinfo=datetime.timezone.utc), 'commenter': 'gileshd', 'type': 'User'}, {'comment_id': 950595984, 'comment_body': 'I vacillated on this and ended up removing it because the Bayesian in me was keen to keep the prior distinct but I agree that practically it is helpful to keep everything together.', 'comment_created': datetime.datetime(2022, 8, 19, 22, 47, 7, tzinfo=datetime.timezone.utc), 'commenter': 'gileshd', 'type': 'User'}, {'comment_id': 950598185, 'comment_body': 'Both `params1` and `params2` are actually tuples (or can be any PyTree) containing all the parameters - in the current uses it tends to be the nested tuple `((K11, K12, K22), (h1, h2))`.  Because all the parameters (K, h, and g if you want) are just summed when two potentials are multiplied, as long as corresponding parameters occupy the same leaves in the PyTree then this will combine them appropriately.\r\nI had been thinking of this flexibility as a virtue but it is perhaps unclear and it might be better to be more explicit about things, at the very least the Docstring could be more descriptive.', 'comment_created': datetime.datetime(2022, 8, 19, 22, 55, 9, tzinfo=datetime.timezone.utc), 'commenter': 'gileshd', 'type': 'User'}, {'comment_id': 950601056, 'comment_body': 'I had avoided this in part because of vague recollections about jax not being very efficient at ignoring inputs when it could, but it seems like that might have been [resolved](https://github.com/google/jax/pull/6582).\r\n\r\nIt feels slightly strange to me to pass in an unused argument and I had envisioned this function as spending most of its time inside wrapper functions for conditioning the different types of potential objects. Having said that, very happy to follow your judgement on whatever you think would be most clear.', 'comment_created': datetime.datetime(2022, 8, 19, 23, 6, 39, tzinfo=datetime.timezone.utc), 'commenter': 'gileshd', 'type': 'User'}, {'comment_id': 950639771, 'comment_body': 'Yes, just clarify the docstring', 'comment_created': datetime.datetime(2022, 8, 20, 2, 59, 31, tzinfo=datetime.timezone.utc), 'commenter': 'murphyk', 'type': 'User'}, {'comment_id': 950639847, 'comment_body': ""Yes, it's a low level function, I guess we can leave it as is."", 'comment_created': datetime.datetime(2022, 8, 20, 3, 0, 24, tzinfo=datetime.timezone.utc), 'commenter': 'murphyk', 'type': 'User'}, {'comment_id': 950640004, 'comment_body': ""it's probably from eqn 2.106 of book 2 :). But there `u` represents the parent, so your notation does not match the book.\r\nMaybe call it offset or mu?"", 'comment_created': datetime.datetime(2022, 8, 20, 3, 1, 58, tzinfo=datetime.timezone.utc), 'commenter': 'murphyk', 'type': 'User'}, {'comment_id': 951304319, 'comment_body': ""This isn't quite what is happening, it's more `p(y|z) --pot_from_clg--> phi(z,y) --cond_z--> p(y|z)`."", 'comment_created': datetime.datetime(2022, 8, 22, 11, 5, 30, tzinfo=datetime.timezone.utc), 'commenter': 'gileshd', 'type': 'User'}]","[{'commit_sha': '3d2d9355a18fb13095c88c4fa720453f0bfb9d62', 'committer_username': 'gileshd', 'committer_name': 'Giles Harper-Donnelly', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 20, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6cc731ee120db214558cef1746205ff7ee3b1ae', 'committer_username': 'gileshd', 'committer_name': 'Giles Harper-Donnelly', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 20, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b49e31a6569eb3e5e81121950c4ff67d6187790', 'committer_username': 'gileshd', 'committer_name': 'Giles Harper-Donnelly', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 20, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '06d89b210a93bf9d2aad62269e0f86304d378d07', 'committer_username': 'gileshd', 'committer_name': 'Giles Harper-Donnelly', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 20, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0fbebbe07898a45ec7114a5bd1c1a82fd34db932', 'committer_username': 'gileshd', 'committer_name': 'Giles Harper-Donnelly', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 20, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fdf0b84154cecf00a7897bde2e42dd47c59ace16', 'committer_username': 'gileshd', 'committer_name': 'Giles Harper-Donnelly', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 20, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '98d4c17779f84b3a94cc3021f75331dd68c95f91', 'committer_username': 'gileshd', 'committer_name': 'Giles Harper-Donnelly', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 20, 9, 56, tzinfo=datetime.timezone.utc)}]",Giles Harper-Donnelly,13415723,,User,,8,,1,3
987659224,Kalman info form marginal log likelihood and smoothing,"## Marginal log likelihood

- Add the log likelihood calculation to `lgssm_info_filter`.
- Add assertion to info-moment comparison test.

## Information smoothing

- Add `lgssm_info_smoother` which does information form smoothing. 
- Convert the filtering test to now compare both filter and smoother outputs between information and moment form.

This resolves #11.

### Potential Optimisations 

There are a couple of potential optimisations that could be made to the smoothing code: 
- **Numerical stability** - convert to a more stable form to ensure symmetry, analogous to the following in the info filter:
```python
        ImKF = I - K @ F.T
        Lambda_pred = ImKF @ Q_prec @ ImKF.T + K @ Lambda @ K.T
```
- **Avoid duplicate marginalisation**:
    - At present the `_smooth_step` function recalculates the predicted parameters $\eta_{t+1|t}, \Lambda_{t+1|t}$ from the filter.
    - As in information form the predict step essentially requires a matrix inversion, it might be better to save the predicted params during the filtering and to pass to the smoother along with the filtered values. 
    - To avoid changing things too much this could be done by either:
      - Add boolean arg to `lgssm_info_filter` to determine whether a tuple of predicted params is returned alongside the `LGSSMInfoPosterior` object.
      - Extract the filtering code to `_info_filter()` which returns a tuple of filtered and predicted values and then make `lgssm_info_filter` a light wrapper which packs the necessary output into the `LGSSMInfoPosterior`.

",True,62,https://api.github.com/repos/probml/dynamax/pulls/62,https://github.com/probml/dynamax/pull/62,closed,189,48,3,7,2,0,0,0,[],2022-07-05 17:09:43+00:00,2022-07-06 17:03:23+00:00,86020.0,23:53:40,[],"[{'commit_sha': '6bdb9820f309c58754cc13b4add723e22eacea04', 'committer_username': 'gileshd', 'committer_name': 'Giles Harper-Donnelly', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 20, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '65c5c023c08059c324f5e79057ec9745b718f656', 'committer_username': 'gileshd', 'committer_name': 'Giles Harper-Donnelly', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 20, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '398a400e12d4bc11711b83e804c719da01742374', 'committer_username': 'gileshd', 'committer_name': 'Giles Harper-Donnelly', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 20, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '464d7b9ab9576adb05d1b9abfa7824ab87cd68f9', 'committer_username': 'gileshd', 'committer_name': 'Giles Harper-Donnelly', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 20, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c0aa8a01f2042aef766ca8ba39e7ddcc6ad4b17', 'committer_username': 'gileshd', 'committer_name': 'Giles Harper-Donnelly', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 20, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f8ec07f22915bce9f4475c944104f0f46a4fa2c', 'committer_username': 'gileshd', 'committer_name': 'Giles Harper-Donnelly', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 20, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be173c29d221569bf2707c6407e55d1be6b76e7c', 'committer_username': 'gileshd', 'committer_name': 'Giles Harper-Donnelly', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 20, 9, 56, tzinfo=datetime.timezone.utc)}]",Giles Harper-Donnelly,13415723,,User,,8,,1,3
972377104,Add information form filtering.,"### Filtering 
`ssm_jax/lgssm/info_inference.py` contains code for kalman filtering in information form.

The implementation more-or-less mirrors the filtering in `lgssm.inference` with `_predict()` and `_condition_on()` changed to accept and return precision (`Lambda`) and precision-weighted mean (`eta`).

### Tests
`ssm_jax/lgssm_info_inference.py` contains tests which compare the output of `lgssm.info_inference.lgssm_info_filter` to `lgssm.inference.lgssm_filter`. There are currently two tests:
  - `test_info_kalman_filter` - simple test with stationary system.
  -  `test_info_kf_linreg` - uses the example in `lgssm/demos/kf_linreg.py` to test non-stationary parameters.",True,30,https://api.github.com/repos/probml/dynamax/pulls/30,https://github.com/probml/dynamax/pull/30,closed,322,0,2,6,1,0,0,0,[],2022-06-20 15:29:30+00:00,2022-06-21 15:54:32+00:00,87902.0,"1 day, 0:25:02",[],"[{'commit_sha': '2919597a2fa714c2efc5ba8888370052fe2decf4', 'committer_username': 'gileshd', 'committer_name': 'Giles Harper-Donnelly', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 20, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '24cd7241322371d353d757a129529440bf316fa5', 'committer_username': 'gileshd', 'committer_name': 'Giles Harper-Donnelly', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 20, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e5a0c9da20ac3be3aee416e8404787d4e67a5e71', 'committer_username': 'gileshd', 'committer_name': 'Giles Harper-Donnelly', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 20, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12d1180d15b0e06b49966be26a77b1201510821d', 'committer_username': 'gileshd', 'committer_name': 'Giles Harper-Donnelly', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 20, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3fe7d24732c6d2f23ded90c0a54d52c1ad2285e', 'committer_username': 'gileshd', 'committer_name': 'Giles Harper-Donnelly', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 20, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '23cfc127345bfaa27c2dae266dc472255c0085ce', 'committer_username': 'gileshd', 'committer_name': 'Giles Harper-Donnelly', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 20, 9, 56, tzinfo=datetime.timezone.utc)}]",Giles Harper-Donnelly,13415723,,User,,8,,1,3
952471371,Add online linear regression demo from JSL.,"Convert the `linreg_kf.py` demo to ssm-jax.

Aside from making it run using the ssm-jax `lgssm_filter`, the conversion included some small, mostly cosmetic, changes to the code, updated docstrings, and separated out the plotting code to enable it to run in test mode.

The demo has been added to the list of tests in `lgssm/demos/demos_test.py`.

### Figure:
![kf_linreg](https://user-images.githubusercontent.com/13415723/171290892-d165fdc0-dbfd-4afd-8981-251228f8a781.png)
 ",True,27,https://api.github.com/repos/probml/dynamax/pulls/27,https://github.com/probml/dynamax/pull/27,closed,173,1,2,2,0,4,0,0,[],2022-05-31 22:00:54+00:00,2022-06-02 03:37:39+00:00,106605.0,"1 day, 5:36:45","[{'comment_id': 886180275, 'comment_body': 'Maybe explain the shape of X: (time, 1, features). Needed because we assume `y[t] = X[t](:,:) * hid[t]`, where hid[t] has size (features,)  y[t] has size (1), and * denotes matrix-vector multipication.', 'comment_created': datetime.datetime(2022, 5, 31, 22, 34, 59, tzinfo=datetime.timezone.utc), 'commenter': 'murphyk', 'type': 'User'}, {'comment_id': 886180356, 'comment_body': 'R.item is a bit odd...', 'comment_created': datetime.datetime(2022, 5, 31, 22, 35, 10, tzinfo=datetime.timezone.utc), 'commenter': 'murphyk', 'type': 'User'}, {'comment_id': 887339588, 'comment_body': ""Yeah sorry it is a bit strange it was inherited from JSL, I've now changed it so that there are two different variables for the batch and kf functions, hopefully it is clear how they are related:\r\nhttps://github.com/probml/ssm-jax/blob/b438af3c081b2fe4d97fa9594379a708c708f8e4/ssm_jax/lgssm/demos/kf_linreg.py#L105-L106\r\nhttps://github.com/probml/ssm-jax/blob/b438af3c081b2fe4d97fa9594379a708c708f8e4/ssm_jax/lgssm/demos/kf_linreg.py#L116"", 'comment_created': datetime.datetime(2022, 6, 1, 22, 6, 19, tzinfo=datetime.timezone.utc), 'commenter': 'gileshd', 'type': 'User'}, {'comment_id': 887340228, 'comment_body': ""I've done a bit of a rewrite of the docstrings to be more explicit about what is going on in both the batch and online cases. Let me know what you think.\r\n"", 'comment_created': datetime.datetime(2022, 6, 1, 22, 7, 39, tzinfo=datetime.timezone.utc), 'commenter': 'gileshd', 'type': 'User'}]","[{'commit_sha': 'e01d8f786a9597d46304b53f921a5ae06e81c1f8', 'committer_username': 'gileshd', 'committer_name': 'Giles Harper-Donnelly', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 20, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b438af3c081b2fe4d97fa9594379a708c708f8e4', 'committer_username': 'gileshd', 'committer_name': 'Giles Harper-Donnelly', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 20, 9, 56, tzinfo=datetime.timezone.utc)}]",Giles Harper-Donnelly,13415723,,User,,8,,1,3
948727201,Update lgssm filtering output and port lgssm demos from JSL.,"### LGSSM Filtering Output 
The function `lgssm.inference.lgssm_filter` is updated to return as `LGSSMPosterior` object to match the behaviour of `lgssm.inference.lgssm_smoother`. 

The `LGSSMPosterior` dataclass is updated so that it can be instantiated without values from the smoothing posterior. 

Instances of the use of the filtering function have been updated to work with the new output.

There are also some changes to the docstrings in `lgssm/inference.py` to be more informative and to standardise formatting a bit.

---

### LGSSM Inference Test
The test in `lgssm/inference_test.py` is updated to use a more rigorous dynamical system and to remove unnecessary additional calls to `lgssm_filter` which is called in `LinearGaussianSSM.smoother()`.

---

### LGSSM Demos
The `kf_tracking.py` demo is updated, and the `kf_spiral.py` and `kf_parallel.py` demos are ported from JSL as mentioned in issue #6.

A preliminary step towards making a simple test for these demos is made by separating inference and plotting into different functions.

Further, a number of plotting tools are added to `ssm_jax/misc/plot_utils.py`.",True,23,https://api.github.com/repos/probml/dynamax/pulls/23,https://github.com/probml/dynamax/pull/23,closed,407,124,7,3,2,0,0,0,[],2022-05-26 21:10:19+00:00,2022-05-26 22:19:11+00:00,4132.0,1:08:52,[],"[{'commit_sha': '42f3cde9f38ada8a91860d95dece534390e8f049', 'committer_username': 'gileshd', 'committer_name': 'Giles Harper-Donnelly', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 20, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3069ce62e2da19bea25412e54f83c15c5c61d34b', 'committer_username': 'gileshd', 'committer_name': 'Giles Harper-Donnelly', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 20, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '879d6adb8ccec79adb29cccbdd40de894cc5bffe', 'committer_username': 'gileshd', 'committer_name': 'Giles Harper-Donnelly', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 20, 9, 56, tzinfo=datetime.timezone.utc)}]",Giles Harper-Donnelly,13415723,,User,,8,,1,3
947674828,Fix broadcasting in calculating emission log probs,"Fix reshaping of `emissions` so that broadcasting works with `HMM.emission_distribution.log_prob()` works for both scalar and vector observations.

The behaviour is now:
- **scalar** - (T,) --[reshape]--> (T,1)  --[tfp broadcast]--> (T,K).
- **vector** - (T,D) --[reshape]--> (T,1,D) --[tfp broadcast]--> (T,K).

This fixes many methods in HMM subclasses with scalar observations (e.g. `CategoricalHMM.filter()`, `CategoricalHMM.smoother()`, etc.).

The PR also changes a line in `BaseHMM.log_prob()` to only sum over the leading axis, this helps for a failure case whereby extra dimensions in the input can cause broadcasting of the tfp log prob which is subsequently hidden by a `.sum()`.

With the present change the method will output an array with shape determined by the broadcasting (e.g. if `x` is shape `(T,)` inputing `x[:,None]` will now output an array of shape `(T,)` rather than `()` which at least makes it clear that broadcasting has occurred). Going forward it might be useful to have some shape checking steps.",True,22,https://api.github.com/repos/probml/dynamax/pulls/22,https://github.com/probml/dynamax/pull/22,closed,9,6,1,1,0,0,0,0,[],2022-05-25 23:25:51+00:00,2022-05-26 19:30:14+00:00,72263.0,20:04:23,[],"[{'commit_sha': 'a6f4959dac7d9b6fb9588a372cc509c71e89a039', 'committer_username': 'gileshd', 'committer_name': 'Giles Harper-Donnelly', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 20, 9, 56, tzinfo=datetime.timezone.utc)}]",Giles Harper-Donnelly,13415723,,User,,8,,1,3
946993150,Restructure and add to tfp lgssm tests and update tracking demo.,"This updates to `lgssm/inference_test.py` to convert a `LinearGaussianSSM` object into a Tensflow Probability `LinearGaussianStateSpaceModel` object. This tfp model is then used for filtering and smoothing tests which now both include comparison of the log likelihoods.

The tracking demo is updated to use the new `LinearGaussianSSM` object. This is still an earlier draft of the demo which will be updated soon to separate inference from plotting and the use `LGSSMPosterior` wrapper for filtering output.",True,19,https://api.github.com/repos/probml/dynamax/pulls/19,https://github.com/probml/dynamax/pull/19,closed,53,53,2,4,0,0,0,0,[],2022-05-25 13:20:27+00:00,2022-05-25 14:23:30+00:00,3783.0,1:03:03,[],"[{'commit_sha': 'e9032d3e745057ccf0a3bfb3c7427c7cee666961', 'committer_username': 'gileshd', 'committer_name': 'Giles Harper-Donnelly', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 20, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3fa9f0d1c2cb4e837f13fdb0228adba3e1fc53b', 'committer_username': 'gileshd', 'committer_name': 'Giles Harper-Donnelly', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 20, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72ea6f107f9b85f1a22ad144376fb22e189101ee', 'committer_username': 'gileshd', 'committer_name': 'Giles Harper-Donnelly', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 20, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a094ca6997849b0a99d091444aef9edb29534e9', 'committer_username': 'gileshd', 'committer_name': 'Giles Harper-Donnelly', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 20, 9, 56, tzinfo=datetime.timezone.utc)}]",Giles Harper-Donnelly,13415723,,User,,8,,1,3

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
480587737,dynamax,probml/dynamax,Jupyter Notebook,72,652,26,26,1475,53,9,11,"[{'id': 1980029460, 'number': 371, 'closed': None, 'created': datetime.datetime(2024, 7, 21, 16, 17, 42, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 180, 'deletions': 58, 'state': 'open'}, {'id': 1970310557, 'number': 369, 'closed': datetime.datetime(2024, 7, 15, 22, 6, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 7, 15, 21, 57, 48, tzinfo=datetime.timezone.utc), 'time_taken': 495.0, 'time_delta': '0:08:15', 'additions': 7, 'deletions': 4, 'state': 'closed'}, {'id': 1125371948, 'number': 285, 'closed': datetime.datetime(2022, 12, 15, 1, 46, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 11, 17, 3, 9, 1, tzinfo=datetime.timezone.utc), 'time_taken': 2414236.0, 'time_delta': '27 days, 22:37:16', 'additions': 11229, 'deletions': 1789, 'state': 'closed'}, {'id': 1121664578, 'number': 282, 'closed': datetime.datetime(2022, 11, 14, 16, 45, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 11, 14, 16, 45, 1, tzinfo=datetime.timezone.utc), 'time_taken': 40.0, 'time_delta': '0:00:40', 'additions': 34, 'deletions': 37, 'state': 'closed'}, {'id': 1121608752, 'number': 281, 'closed': datetime.datetime(2022, 11, 14, 16, 32, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 11, 14, 16, 3, 32, tzinfo=datetime.timezone.utc), 'time_taken': 1761.0, 'time_delta': '0:29:21', 'additions': 46, 'deletions': 28, 'state': 'closed'}, {'id': 1113130453, 'number': 253, 'closed': datetime.datetime(2022, 11, 8, 5, 7, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 11, 7, 18, 8, 42, tzinfo=datetime.timezone.utc), 'time_taken': 39500.0, 'time_delta': '10:58:20', 'additions': 513, 'deletions': 214, 'state': 'closed'}, {'id': 1092176515, 'number': 235, 'closed': datetime.datetime(2022, 10, 19, 11, 54, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 19, 11, 19, 41, tzinfo=datetime.timezone.utc), 'time_taken': 2074.0, 'time_delta': '0:34:34', 'additions': 27, 'deletions': 22, 'state': 'closed'}, {'id': 1089517089, 'number': 233, 'closed': datetime.datetime(2022, 10, 17, 15, 22, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 17, 15, 17, 14, tzinfo=datetime.timezone.utc), 'time_taken': 334.0, 'time_delta': '0:05:34', 'additions': 1000, 'deletions': 2, 'state': 'closed'}, {'id': 1086358751, 'number': 227, 'closed': datetime.datetime(2022, 10, 14, 16, 20, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 13, 16, 27, 44, tzinfo=datetime.timezone.utc), 'time_taken': 85993.0, 'time_delta': '23:53:13', 'additions': 19, 'deletions': 8, 'state': 'closed'}, {'id': 1080424653, 'number': 222, 'closed': datetime.datetime(2022, 10, 7, 16, 38, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 7, 14, 12, 15, tzinfo=datetime.timezone.utc), 'time_taken': 8768.0, 'time_delta': '2:26:08', 'additions': 9, 'deletions': 3, 'state': 'closed'}, {'id': 1080379381, 'number': 220, 'closed': datetime.datetime(2022, 10, 7, 16, 37, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 7, 13, 43, 12, tzinfo=datetime.timezone.utc), 'time_taken': 10483.0, 'time_delta': '2:54:43', 'additions': 5, 'deletions': 0, 'state': 'closed'}, {'id': 1053693362, 'number': 203, 'closed': datetime.datetime(2022, 9, 13, 17, 31, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 12, 17, 52, 33, tzinfo=datetime.timezone.utc), 'time_taken': 85123.0, 'time_delta': '23:38:43', 'additions': 457, 'deletions': 0, 'state': 'closed'}, {'id': 1030432590, 'number': 161, 'closed': datetime.datetime(2022, 8, 22, 20, 10, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 18, 20, 12, 49, tzinfo=datetime.timezone.utc), 'time_taken': 345450.0, 'time_delta': '3 days, 23:57:30', 'additions': 453, 'deletions': 3, 'state': 'closed'}, {'id': 987659224, 'number': 62, 'closed': datetime.datetime(2022, 7, 6, 17, 3, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 5, 17, 9, 43, tzinfo=datetime.timezone.utc), 'time_taken': 86020.0, 'time_delta': '23:53:40', 'additions': 189, 'deletions': 48, 'state': 'closed'}, {'id': 972377104, 'number': 30, 'closed': datetime.datetime(2022, 6, 21, 15, 54, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 20, 15, 29, 30, tzinfo=datetime.timezone.utc), 'time_taken': 87902.0, 'time_delta': '1 day, 0:25:02', 'additions': 322, 'deletions': 0, 'state': 'closed'}, {'id': 952471371, 'number': 27, 'closed': datetime.datetime(2022, 6, 2, 3, 37, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 31, 22, 0, 54, tzinfo=datetime.timezone.utc), 'time_taken': 106605.0, 'time_delta': '1 day, 5:36:45', 'additions': 173, 'deletions': 1, 'state': 'closed'}, {'id': 948727201, 'number': 23, 'closed': datetime.datetime(2022, 5, 26, 22, 19, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 26, 21, 10, 19, tzinfo=datetime.timezone.utc), 'time_taken': 4132.0, 'time_delta': '1:08:52', 'additions': 407, 'deletions': 124, 'state': 'closed'}, {'id': 947674828, 'number': 22, 'closed': datetime.datetime(2022, 5, 26, 19, 30, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 25, 23, 25, 51, tzinfo=datetime.timezone.utc), 'time_taken': 72263.0, 'time_delta': '20:04:23', 'additions': 9, 'deletions': 6, 'state': 'closed'}, {'id': 946993150, 'number': 19, 'closed': datetime.datetime(2022, 5, 25, 14, 23, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 25, 13, 20, 27, tzinfo=datetime.timezone.utc), 'time_taken': 3783.0, 'time_delta': '1:03:03', 'additions': 53, 'deletions': 53, 'state': 'closed'}]"
