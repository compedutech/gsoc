pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1445260408,NUMBERS-200: Don't honour compensation if it's NaN in Sum#add,,True,136,https://api.github.com/repos/apache/commons-numbers/pulls/136,https://github.com/apache/commons-numbers/pull/136,closed,35,1,2,1,1,1,0,0,[],2023-07-22 09:04:33+00:00,2023-07-22 18:35:23+00:00,34250.0,9:30:50,"[{'comment_id': 1271292657, 'comment_body': ""I think this can use `isFinite(c)`. I don't think the compensation can be infinite if the regular sum is still finite, so we do not have to sum infinite compensation.\r\n\r\nHowever, the NaN check should be faster so the two variants are the same. Please add a comment as to why the NaN check is required, e.g. infinite terms will generate a nan compensation. Do not destroy the regular IEEE754 sum with spurious nan."", 'comment_created': datetime.datetime(2023, 7, 22, 12, 47, 1, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}]","[{'commit_sha': '8617348c4d7d47a7d0d43a191e6dbbb1da0a5ca4', 'committer_username': 'ani5rudh', 'committer_name': 'Anirudh', 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 2, 55, 57, tzinfo=datetime.timezone.utc)}]",Anirudh,129569933,,User,,4,,0,0
1298624361,STATISTICS-54: Proof of Concept implementation,"- Define StatisticAccumulator that serves as an interface to accumulate a statistic of type T
- Add implementation for StatisticAccumulator<Mean> MeanAccumulator",False,231,https://api.github.com/repos/apache/commons-math/pulls/231,https://github.com/apache/commons-math/pull/231,closed,107,4,3,1,0,0,0,0,[],2023-04-01 08:37:52+00:00,2023-04-01 08:38:56+00:00,64.0,0:01:04,[],"[{'commit_sha': '33664f7c9b43ab36b7b56ee03cac43af1c68c945', 'committer_username': 'ani5rudh', 'committer_name': 'Anirudh', 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 2, 55, 57, tzinfo=datetime.timezone.utc)}]",Anirudh,129569933,,User,,4,,0,0
1425045576,[STATISTICS-71]: Add base interfaces for all statistic implementations.,,False,46,https://api.github.com/repos/apache/commons-statistics/pulls/46,https://github.com/apache/commons-statistics/pull/46,closed,495,1,8,21,9,53,0,0,[],2023-07-07 17:55:25+00:00,2023-07-16 08:13:28+00:00,742683.0,"8 days, 14:18:03","[{'comment_id': 1256568342, 'comment_body': 'I believe the statistic enum values can also be documented.', 'comment_created': datetime.datetime(2023, 7, 7, 22, 37, 27, tzinfo=datetime.timezone.utc), 'commenter': 'kinow', 'type': 'User'}, {'comment_id': 1258115764, 'comment_body': 'This saves a few characters of typing. The result however obfuscates the stack trace. I would drop the static method and throw the exception at the correct location. However since I would also drop the immutable class this is not required anymore.', 'comment_created': datetime.datetime(2023, 7, 10, 11, 33, 51, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1258119431, 'comment_body': 'Place an empty line here in the javadoc before the new paragraph.\r\n\r\nThe style in this component is to not close `<p>` tags. Although not valid HTML 5 it is parsed correctly by the javadoc tool and a style used through the OpenJDK source code.', 'comment_created': datetime.datetime(2023, 7, 10, 11, 37, 49, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1258120524, 'comment_body': 'Missing a space: `/** Current`', 'comment_created': datetime.datetime(2023, 7, 10, 11, 38, 58, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1258121616, 'comment_body': 'It is not *the* new value, it is simply another value. This can be simplified to:\r\n```\r\n* Updates the state of the statistic to reflect the addition of {@code value}.\r\n* @param value Value.\r\n```\r\nAs such on an internal class it is not adding much as you have to read the code to see this private comment. If you wish this to be seen in the documentation then you should promote the method to an abstract method in the `Min` class.\r\n\r\nYou can see what is documented using:\r\n```\r\nmvn javadoc:javadoc\r\nopen target/site/apidocs/org/apache/commons/statistics/descriptive/Min.html\r\n```\r\n\r\nHere the documentation is sparse. Try promoting the method as an abstract documented method in Min and note the difference.', 'comment_created': datetime.datetime(2023, 7, 10, 11, 40, 12, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1258129656, 'comment_body': 'This class should have a package-private constructor.', 'comment_created': datetime.datetime(2023, 7, 10, 11, 48, 41, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1258142388, 'comment_body': 'At present I do not see the requirement for the returned value to be immutable. This is a specialisation. For the general use case a mutable return value is more flexible.\r\n\r\nConsider this:\r\n```java\r\ndouble[][] a = {{1, 2}, {3, 4}};\r\ndouble m1 = Arrays.stream(a)\r\n                  .map(Min::of)\r\n                  .reduce((x, y) -> {\r\n                      x.combine(y);\r\n                      return x;\r\n                  }).get().getAsDouble();\r\n```\r\n\r\nThis does highlight an issue with the `DoubleStatisticAccumulator.combine` returning void not being compatible with the `reduce` method using a method reference. One solution is to have `combine` return `DoubleStatisticAccumulator<T>`. This leads to the clunky:\r\n```java\r\ndouble m2 = Arrays.stream(a)\r\n                 .map(x -> (DoubleStatisticAccumulator<Min>) Min.of(x))\r\n                 .reduce(DoubleStatisticAccumulator::combine)\r\n                 .get().getDoubleStatistic().getAsDouble();\r\n```\r\nAnother option is to not bother supporting the reduce method and use:\r\n```java\r\ndouble m3 = Arrays.stream(a)\r\n                  .flatMapToDouble(Arrays::stream)\r\n                  .collect(Min::createStoreless, Min::accept, Min::combine)\r\n                  .getAsDouble();\r\n```\r\nThe flatmap of the stream may be less efficient that immediately creating a stream of Min objects from the array.\r\n\r\nOr we can update `Min` to change the return type defined in the interface allowing:\r\n```java\r\n// In Min\r\n@Override\r\npublic abstract <U extends DoubleStatisticAccumulator<Min>> Min combine(U other);\r\n\r\ndouble m4 = Arrays.stream(a)\r\n                  .map(Min::of)\r\n                  .reduce(Min::combine)\r\n                  .get().getAsDouble();\r\n```', 'comment_created': datetime.datetime(2023, 7, 10, 12, 1, 58, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1258187380, 'comment_body': 'If you have sample and population variance then you should have the same for the standard deviation. Alternatively leave it to only 1 variance and plan to extend the options for a statistic with configuration of implementations (e.g. on creation).\r\n', 'comment_created': datetime.datetime(2023, 7, 10, 12, 34, 9, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1258189235, 'comment_body': 'Test fixtures can remove the `public` keyword as we are using JUnit 5', 'comment_created': datetime.datetime(2023, 7, 10, 12, 35, 19, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1258190779, 'comment_body': 'I would change this to `create()`. Any future implementations can overload create with implementation choices.\r\n\r\nYou should document the special case of the result value when no values have been added, i.e. that min=+inf.', 'comment_created': datetime.datetime(2023, 7, 10, 12, 36, 18, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1258198511, 'comment_body': 'Again, document the value if the input is an empty array.', 'comment_created': datetime.datetime(2023, 7, 10, 12, 41, 1, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1258220025, 'comment_body': 'You should have an assertion that secondMin is unchanged by the combine operation.', 'comment_created': datetime.datetime(2023, 7, 10, 12, 55, 44, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1258220141, 'comment_body': 'Note here that `firstMin` has been changed to be the min, irrespective of whether first or second contained the minimum. So the second combine tests that this value is passed on to secondMin. This is redundant if you set up your arguments to target all conditions with the first combine.\r\n\r\nIdeally you wish to test 3 conditions where one or other of the pair are the minimum:\r\n```\r\nA(min) + B(not-min)\r\nA(not min) + B(min)\r\nA(min) + B(min)\r\n```\r\nPlus:\r\n```\r\nA(empty)+B(empty)\r\nA(not-empty)+B(empty)\r\nA(empty)+B(not-empty)\r\n```\r\nYou can also add arrays with NaNs in there.\r\n\r\nI would create the conditions in the stream of the arguments. Inside the test method then test a+b or b+a, with new objects for each combine, and test the RHS argument is unchanged by the combine.', 'comment_created': datetime.datetime(2023, 7, 10, 12, 55, 48, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1258222913, 'comment_body': 'This test should be its own fixture since it does not use the test parameters.', 'comment_created': datetime.datetime(2023, 7, 10, 12, 57, 45, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1258225271, 'comment_body': 'Move to a difference test fixture as it does not use the arguments.', 'comment_created': datetime.datetime(2023, 7, 10, 12, 59, 25, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1262438649, 'comment_body': 'Remove this empty line', 'comment_created': datetime.datetime(2023, 7, 13, 11, 43, 20, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1262438976, 'comment_body': 'Check for and remove `</p>` tags', 'comment_created': datetime.datetime(2023, 7, 13, 11, 43, 38, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1262439349, 'comment_body': 'End param descriptions with a period `.`', 'comment_created': datetime.datetime(2023, 7, 13, 11, 44, 2, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1262443535, 'comment_body': 'It may be interesting to use JMH to compare the use of streams to a simple for loop here, e.g.\r\n```java\r\nfor (final double x : values) {\r\n    min.accept(x);\r\n}\r\n```\r\nFor now I would create a Jira ticket as a task to create JMH benchmarks for statistic initialisation comparing Arrays.stream to a simple for loop.\r\n', 'comment_created': datetime.datetime(2023, 7, 13, 11, 48, 4, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1262443833, 'comment_body': 'Change `storelessMin` to `min`', 'comment_created': datetime.datetime(2023, 7, 13, 11, 48, 22, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1262444922, 'comment_body': 'Period at end of sentence.', 'comment_created': datetime.datetime(2023, 7, 13, 11, 49, 27, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1262446528, 'comment_body': 'IIUC this does not need the final keyword as it is private. It may be linting tools from Sonarcloud that highlight this.', 'comment_created': datetime.datetime(2023, 7, 13, 11, 51, 10, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1262448408, 'comment_body': 'In general you can use the shorter ""Create an instance"" for required but otherwise uninformative constructor docs.\r\n\r\nSince you do not use this constructor I would drop it and initialise the `min` directly in the declaration:\r\n```\r\nprivate double min = Double.POSITIVE_INFINITY;\r\n```', 'comment_created': datetime.datetime(2023, 7, 13, 11, 53, 8, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1262450436, 'comment_body': 'I think that internal classes may not require the inheritDoc javadoc lines. Javadoc like this is only required on public classes as the final javadoc report does not process private scope.', 'comment_created': datetime.datetime(2023, 7, 13, 11, 55, 10, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1262452805, 'comment_body': 'Remove this empty line', 'comment_created': datetime.datetime(2023, 7, 13, 11, 57, 29, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1262459005, 'comment_body': 'This project uses capitalisation for the first word after the param name. It does not use `the` as the first word (unlike the JDK). All sentences should end with a period. So this should change to:\r\n```\r\n@param other Another {@code DoubleStatistic} to be combined.\r\n// or\r\n@param other {@code DoubleStatistic} to be combined.\r\n```\r\n\r\nStrangely the Commons math projects are not so strict on the `@return` tag and allow `the`. However it is good to maintain a consistent style.\r\n\r\nIn this case we could select wording from any builder or other object that returns itself, which typically includes the word `this` for example:\r\n```\r\n@return {@code this} instance\r\n```\r\n', 'comment_created': datetime.datetime(2023, 7, 13, 12, 2, 2, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1262472312, 'comment_body': 'Here the `Min` is redundant from expected and actual. I would drop it for cleaner code. It makes it simpler to adapt the test to other statistics by copy.', 'comment_created': datetime.datetime(2023, 7, 13, 12, 14, 53, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1262475706, 'comment_body': 'This method contains different cases to testMin. They should be merged to capture all cases. You should add an empty array as a values input.\r\n\r\nYou can then test each method using the same streaming method, e.g.:\r\n```java\r\n@ParameterizedTest\r\n@MethodSource(value = ""testMin"")\r\nvoid testParallelStream(double[] values, double expectedMin) {\r\n```\r\n', 'comment_created': datetime.datetime(2023, 7, 13, 12, 17, 51, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1262480654, 'comment_body': 'These test cases and test fixture can be combined into the cases for testMin.', 'comment_created': datetime.datetime(2023, 7, 13, 12, 21, 44, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1262491480, 'comment_body': 'This `Min.of` test can be covered by moving this array into the cases for `testMin`.\r\n\r\nEssentially what this test is doing is checking if any special non-nan value _cannot_ change a NaN back to a non-nan value. Perhaps this is easier to read using:\r\n```java\r\n@Test\r\nvoid testNaN() {\r\n    double[] testArray = {Double.NaN, +0.0d, -0.0d, Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY};\r\n    Min stat = Min.create();\r\n    // Test non-nan values cannot revert a NaN\r\n    for (final double x : testArray) {\r\n        stat.accept(x);\r\n        Assertions.assertEquals(Double.NaN, stat.getAsDouble());\r\n    }\r\n}\r\n```', 'comment_created': datetime.datetime(2023, 7, 13, 12, 31, 36, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1262491711, 'comment_body': 'Remove empty line', 'comment_created': datetime.datetime(2023, 7, 13, 12, 31, 48, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1262492141, 'comment_body': 'Empty line above the method declaration.\r\n', 'comment_created': datetime.datetime(2023, 7, 13, 12, 32, 11, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1262497351, 'comment_body': 'Note: You can use 4 or 8 space chars for the trailing line. When the lines are long using 4 chars allows more to fit in a standard text editor.', 'comment_created': datetime.datetime(2023, 7, 13, 12, 36, 56, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1262512709, 'comment_body': 'I would remove this `Min.of` and add this testArray to the cases for testMin. The incremental nature of the assertions in this test are not easy to follow. The same data with special values is in testParallelStream so there is redundancy here. If you wish to add a test for incremental min then perhaps it is more clear with counters:\r\n```java\r\n@Test\r\nvoid testIncrement() {\r\n    int lo = 0;\r\n    int hi = 0;\r\n    final Min stat = Min.of(lo);\r\n    for (int i = 0; i < 5; i++) {\r\n        stat.accept(++hi);\r\n        Assertions.assertEquals(lo, stat.getAsDouble());\r\n        stat.accept(--lo);\r\n        Assertions.assertEquals(lo, stat.getAsDouble());\r\n    }\r\n}\r\n```', 'comment_created': datetime.datetime(2023, 7, 13, 12, 50, 35, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1262533700, 'comment_body': 'I think we should test that the same min is returned if the input array is randomised. I would add a TestHelper class with a Fisher-Yates shuffle copied from:\r\n[RNG ArraySampler](https://github.com/apache/commons-rng/blob/master/commons-rng-sampling/src/main/java/org/apache/commons/rng/sampling/ArraySampler.java)\r\n\r\nIf you update the signature to return the input argument then you can code:\r\n```java\r\n@ParameterizedTest\r\n@MethodSource(value = ""testMin"")\r\nvoid testMinRandomOrder(double[] values, double expected) {\r\n    UniformRandomProvider rng = RandomSource.SPLIT_MIX_64.create();\r\n    for (int i = 0; i < 10; i++) {\r\n        testMin(TestHelper.shuffle(rng, values.clone()), expected);\r\n    }\r\n}\r\n```\r\n\r\nThe clone is only required if the `testMin` method destructively modifies the array. Otherwise you can continue to shuffle the same array each time.\r\n\r\nThis change will require added the appropriate RNG modules to the pom.', 'comment_created': datetime.datetime(2023, 7, 13, 13, 7, 25, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1262888683, 'comment_body': 'Missing license?', 'comment_created': datetime.datetime(2023, 7, 13, 17, 51, 42, tzinfo=datetime.timezone.utc), 'commenter': 'kinow', 'type': 'User'}, {'comment_id': 1262903784, 'comment_body': 'I was too slow to hit enter! :sweat_smile: ', 'comment_created': datetime.datetime(2023, 7, 13, 18, 6, 4, tzinfo=datetime.timezone.utc), 'commenter': 'kinow', 'type': 'User'}, {'comment_id': 1262905998, 'comment_body': ""Sorry, I had missed it. I've fixed it in the next commit."", 'comment_created': datetime.datetime(2023, 7, 13, 18, 8, 33, tzinfo=datetime.timezone.utc), 'commenter': 'ani5rudh', 'type': 'User'}, {'comment_id': 1263665966, 'comment_body': 'No need to be public, same for the methods.', 'comment_created': datetime.datetime(2023, 7, 14, 12, 13, 36, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1263666086, 'comment_body': 'No return tag', 'comment_created': datetime.datetime(2023, 7, 14, 12, 13, 45, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1263667839, 'comment_body': 'This test is redundant if you add an array of NaN to `static Stream<Arguments> testMin()`', 'comment_created': datetime.datetime(2023, 7, 14, 12, 15, 52, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1263669233, 'comment_body': 'This assertion is redundant if you add an array of NaN to `static Stream<Arguments> testMin()`', 'comment_created': datetime.datetime(2023, 7, 14, 12, 17, 32, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1263674580, 'comment_body': 'For reusability we could move this to `TestHelper`:\r\n```java\r\nstatic UniformRandomProvider createRNG();\r\n```\r\nThis will provide a single point to change the RNG used by all tests using randomness.\r\n\r\n', 'comment_created': datetime.datetime(2023, 7, 14, 12, 23, 57, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1263675285, 'comment_body': 'There is trailing whitespace in this line.', 'comment_created': datetime.datetime(2023, 7, 14, 12, 24, 43, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1263677117, 'comment_body': 'Extra line here', 'comment_created': datetime.datetime(2023, 7, 14, 12, 26, 43, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1263679163, 'comment_body': 'I think this should have a comment. The comment used in Commons RNG for the composite sampler interfaces is:\r\n```\r\n    // Composite interface\r\n```\r\n', 'comment_created': datetime.datetime(2023, 7, 14, 12, 28, 29, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1263679777, 'comment_body': 'Please add `@since 1.1` tags to all the public classes, interfaces and the package info.', 'comment_created': datetime.datetime(2023, 7, 14, 12, 29, 8, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1263680507, 'comment_body': 'You can remove this constructor.', 'comment_created': datetime.datetime(2023, 7, 14, 12, 29, 57, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1263681086, 'comment_body': 'Can you change these to indent with 4 trailing spaces (not 8)', 'comment_created': datetime.datetime(2023, 7, 14, 12, 30, 38, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1263681179, 'comment_body': 'Can you change these to indent with 4 trailing spaces (not 8)', 'comment_created': datetime.datetime(2023, 7, 14, 12, 30, 44, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1263942513, 'comment_body': 'I note that your IDE has chosen a specific order for the imports here. I believe all the other code in the Statistics project use the lexographical order for the imports, i.e. it does not put the java.* imports out of order, e.g. this:\r\n```java\r\nimport java.util.Arrays;\r\nimport java.util.function.DoubleSupplier;\r\nimport java.util.stream.Stream;\r\nimport org.apache.commons.rng.UniformRandomProvider;\r\nimport org.junit.jupiter.api.Assertions;\r\nimport org.junit.jupiter.api.Test;\r\nimport org.junit.jupiter.params.ParameterizedTest;\r\nimport org.junit.jupiter.params.provider.Arguments;\r\nimport org.junit.jupiter.params.provider.MethodSource;\r\n```\r\nSe if you can set up your development environment to use this order for this project.', 'comment_created': datetime.datetime(2023, 7, 14, 16, 53, 55, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1263952537, 'comment_body': 'Fixed!', 'comment_created': datetime.datetime(2023, 7, 14, 17, 4, 34, tzinfo=datetime.timezone.utc), 'commenter': 'ani5rudh', 'type': 'User'}, {'comment_id': 1264161636, 'comment_body': ':+1: ', 'comment_created': datetime.datetime(2023, 7, 14, 20, 48, 36, tzinfo=datetime.timezone.utc), 'commenter': 'kinow', 'type': 'User'}]","[{'commit_sha': '54fa7270de6c37b1f293b62135a27f7fd6f51e63', 'committer_username': 'ani5rudh', 'committer_name': 'Anirudh', 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 2, 55, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ecd39e9ba8bcd55092ee82943b1601c710af543', 'committer_username': 'ani5rudh', 'committer_name': 'Anirudh', 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 2, 55, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f972fc3d561978d6d883ea61709257a9a8b49807', 'committer_username': 'ani5rudh', 'committer_name': 'Anirudh', 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 2, 55, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '21a3279e4e87b15e9a91effd487101401f1b649a', 'committer_username': 'ani5rudh', 'committer_name': 'Anirudh', 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 2, 55, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba43f0fa20d807315b24f99f7ffa3bd87a9891b8', 'committer_username': 'ani5rudh', 'committer_name': 'Anirudh', 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 2, 55, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b99a145da1a4cd6291b5ac28d81db4935aab5b8', 'committer_username': 'ani5rudh', 'committer_name': 'Anirudh', 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 2, 55, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f33f434f2c47de1691f0d1ab0837792ac4155d46', 'committer_username': 'ani5rudh', 'committer_name': 'Anirudh', 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 2, 55, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '807aa877af6ac30225235ab01a1d2e049fe0dc85', 'committer_username': 'ani5rudh', 'committer_name': 'Anirudh', 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 2, 55, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d14b541b5fcaa2040782578f1453a6f7a5deb9d', 'committer_username': 'ani5rudh', 'committer_name': 'Anirudh', 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 2, 55, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb53fd7616b23562931d552b9dcedab7b22d6fe8', 'committer_username': 'ani5rudh', 'committer_name': 'Anirudh', 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 2, 55, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09f4a1b72055b85c4aadd79b8a549af2869b6e0d', 'committer_username': 'ani5rudh', 'committer_name': 'Anirudh', 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 2, 55, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1bbd8485a78c0e61db28af930351813b8d64af78', 'committer_username': 'ani5rudh', 'committer_name': 'Anirudh', 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 2, 55, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b939d9bb101121d25df9b20c76eb83adfa6b8ca8', 'committer_username': 'ani5rudh', 'committer_name': 'Anirudh', 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 2, 55, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bab75970ab935cd3d4837e77b29925f58d715e64', 'committer_username': 'ani5rudh', 'committer_name': 'Anirudh', 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 2, 55, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7dfd44e4f844f8680eff8fefe91668d56c98d432', 'committer_username': 'ani5rudh', 'committer_name': 'Anirudh', 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 2, 55, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d5298f2ba9888c9ac2896078cfe455ba97acf68', 'committer_username': 'ani5rudh', 'committer_name': 'Anirudh', 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 2, 55, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '704ca745e9951b71a51a725a413e0d2971550178', 'committer_username': 'ani5rudh', 'committer_name': 'Anirudh', 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 2, 55, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b22f51120ac65ff21e13eea9f88eede06d83915f', 'committer_username': 'ani5rudh', 'committer_name': 'Anirudh', 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 2, 55, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b01e430e8af58ed877b60c6c2025f0ea13fe9b05', 'committer_username': 'ani5rudh', 'committer_name': 'Anirudh', 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 2, 55, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee456dd7e806e9e6a53ae8bb9c27848ad39bcb4f', 'committer_username': 'ani5rudh', 'committer_name': 'Anirudh', 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 2, 55, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c18e93fc640b49e0041313b3c0d65e94d953c45', 'committer_username': 'ani5rudh', 'committer_name': 'Anirudh', 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 2, 55, 57, tzinfo=datetime.timezone.utc)}]",Anirudh,129569933,,User,,4,,0,0
1436340227,STATISTICS-76: Max Implementation,,True,49,https://api.github.com/repos/apache/commons-statistics/pulls/49,https://github.com/apache/commons-statistics/pull/49,closed,323,1,3,1,1,3,0,0,[],2023-07-16 18:06:01+00:00,2023-07-17 15:32:50+00:00,77209.0,21:26:49,"[{'comment_id': 1264731414, 'comment_body': ""Quickly compared the code in this PR with the existing Min code, and everything looks OK. The only part I noticed that did not change was this with the `Double.MIN_VALUE`'s. Is that intentional or were we supposed to use `Double.MAX_VALUE` for this test?"", 'comment_created': datetime.datetime(2023, 7, 16, 18, 59, 54, tzinfo=datetime.timezone.utc), 'commenter': 'kinow', 'type': 'User'}, {'comment_id': 1264800171, 'comment_body': ""Thanks @kinow, I've updated the tests for Max per your feedback."", 'comment_created': datetime.datetime(2023, 7, 17, 2, 51, 2, tzinfo=datetime.timezone.utc), 'commenter': 'ani5rudh', 'type': 'User'}, {'comment_id': 1265505789, 'comment_body': 'The assertion message here is not helpful to distinguish this case. You could use ""of(values)"". Just change the test data so the test fails and you can see how JUnit will output the message. This should be helpful to diagnose the problem with the code.', 'comment_created': datetime.datetime(2023, 7, 17, 15, 3, 54, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}]","[{'commit_sha': '2967c1973e1be3efff0edca39e110e1f41c86fb4', 'committer_username': 'ani5rudh', 'committer_name': 'Anirudh', 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 2, 55, 57, tzinfo=datetime.timezone.utc)}]",Anirudh,129569933,,User,,4,,0,0
1443215001,STATISTICS-77: Sum Implementation,,True,50,https://api.github.com/repos/apache/commons-statistics/pulls/50,https://github.com/apache/commons-statistics/pull/50,closed,340,2,6,1,1,13,0,0,[],2023-07-20 16:17:35+00:00,2023-07-25 08:25:19+00:00,403664.0,"4 days, 16:07:44","[{'comment_id': 1271396439, 'comment_body': 'This module alone should not use a different version from the entire project. If you have different modules using different versions then a downstream project which transitively includes multiple modules from here may not correctly resolve to the one that this module requires. The change should be made to the property in the parent pom `<statistics.commons.numbers.version>`.\r\n', 'comment_created': datetime.datetime(2023, 7, 23, 7, 19, 37, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1271397228, 'comment_body': 'If you override the javadoc link (which drops the o.a.c.numbers text) then we should make it clear that the `Sum` is from the Numbers project.\r\n`Uses the {@link org.apache.commons.numbers.core.Sum Commons Numbers Sum} implementation.`', 'comment_created': datetime.datetime(2023, 7, 23, 7, 25, 58, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1271397683, 'comment_body': 'Simplify to `Delegates to the {@link org.apache.commons.numbers.core.Sum} implementation`.', 'comment_created': datetime.datetime(2023, 7, 23, 7, 29, 57, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1271398064, 'comment_body': 'Add it as a `<property>` (above), perhaps?', 'comment_created': datetime.datetime(2023, 7, 23, 7, 32, 40, tzinfo=datetime.timezone.utc), 'commenter': 'kinow', 'type': 'User'}, {'comment_id': 1271398332, 'comment_body': 'This could use some extended precision examples. This [one](https://en.wikipedia.org/wiki/Kahan_summation_algorithm#Further_enhancements) is useful:\r\n```\r\n1, 10e100, 1, -10e100 == 2\r\n```', 'comment_created': datetime.datetime(2023, 7, 23, 7, 34, 52, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1271400188, 'comment_body': 'The delta here may not always be suitable since it is absolute and not relative. For a quick relative test you can use:\r\n```java\r\ndouble eps = 1e-15; // for example\r\nassertEquals(expected, actual, Math.abs(expected) * eps)\r\n```\r\nIf you only expect a tiny difference then we can use Precision.equals with a ulp argument. This may be more relevant here.\r\n\r\nSince you lose the error message containing the values from the assertion with doubles you have to provide it. As such this is useful to put into a method in the TestHelper class:\r\n```java\r\nstatic void assertEquals(double expected, double actual, int ulps, Supplier<String> msg) {\r\n    Assertions.assertTrue(Precision.equals(expected, actual, ulps),\r\n        () -> equals + "" != "" + actual + "" within "" + ulps + "" ulps: "" + msg.get());\r\n}\r\n```\r\nNote: This is untested and could be improved to create an error message more consistent with JUnit (fixing the error message is not a priority).\r\n', 'comment_created': datetime.datetime(2023, 7, 23, 7, 48, 54, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1271400450, 'comment_body': 'Reuse the TestHelper assertEquals', 'comment_created': datetime.datetime(2023, 7, 23, 7, 51, 30, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1271400547, 'comment_body': 'Add the {1, 10e100, 1, -10e100} example split into two arrays.', 'comment_created': datetime.datetime(2023, 7, 23, 7, 52, 10, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1271838639, 'comment_body': 'I had included a similar test case as the one above in my [PR](https://github.com/ani5rudh/commons-statistics/blob/846c6185330439a4bb7b1df25611dd3ddcd696ed/commons-statistics-descriptive/src/test/java/org/apache/commons/statistics/descriptive/SumTest.java#L105).\r\n', 'comment_created': datetime.datetime(2023, 7, 24, 7, 9, 35, tzinfo=datetime.timezone.utc), 'commenter': 'ani5rudh', 'type': 'User'}, {'comment_id': 1272520892, 'comment_body': 'This is not using a ulp tolerance. It should read something like:\r\n```Java\r\n// Relative equality using JUnit assert. This could be moved to a TestHelper method accepting eps for reuse.\r\nAssertions.assertEquals(expected * 2, sum1.getAsDouble(), Math.abs(expected) * EPS, () -> EPS_STRING);\r\n\r\n// Or using a ULP threshold\r\n\r\nTestHelper.assertEquals(expected * 2, sum1.getAsDouble(), 1, () -> ""combined sum"");\r\n```\r\n\r\nI think the ULP test is what we wish to use here. 1 ULP may be too low. But it should pass with a few (e.g. 1 ULP is relative eps 2^-52 ~ 2.2e-16).\r\n', 'comment_created': datetime.datetime(2023, 7, 24, 16, 55, 54, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1272523196, 'comment_body': '`double ulps` should be `int ulps`.\r\n\r\nHere you are comparing the two double within an absolute floating-point delta. We require to compare the two doubles within units-of-least precision. This is how many possible double values there are between them. It is used for very close numbers.\r\n', 'comment_created': datetime.datetime(2023, 7, 24, 16, 58, 2, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1272523886, 'comment_body': 'You have an extra space before `{@link`', 'comment_created': datetime.datetime(2023, 7, 24, 16, 58, 44, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1272530193, 'comment_body': 'Can you put this large cancellation test case in the array-of-arrays test as well, making sure the +/-MAX_VALUE is separated into the two arrays.', 'comment_created': datetime.datetime(2023, 7, 24, 17, 5, 51, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}]","[{'commit_sha': '75d3b0b9bfdff3f4d11c4bbb138ef1fad05b88f0', 'committer_username': 'ani5rudh', 'committer_name': 'Anirudh', 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 2, 55, 57, tzinfo=datetime.timezone.utc)}]",Anirudh,129569933,,User,,4,,0,0
1460964738,STATISTICS-79: Mean Implementation,,True,51,https://api.github.com/repos/apache/commons-statistics/pulls/51,https://github.com/apache/commons-statistics/pull/51,closed,711,5,5,2,1,37,0,0,[],2023-08-03 08:00:25+00:00,2023-08-11 13:45:36+00:00,711911.0,"8 days, 5:45:11","[{'comment_id': 1283180578, 'comment_body': 'I think we should remove this branch. Simply initialise m1 as 0.0. The logic to return NaN when n=0 can be added in the getAsDouble method.', 'comment_created': datetime.datetime(2023, 8, 3, 13, 8, 57, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1283188549, 'comment_body': 'The division by n here is inexact and will compromise the accuracy for the main use case. It only prevents overflow if the value to be added is greater than Double.MAX_VALUE from the mean. This is an extreme case. If you wish to prevent overflow then multiply each value by 0.5 for exact scaling, then rescale by 2. The mean will lose precision only when the value and m1 are sub-normal.', 'comment_created': datetime.datetime(2023, 8, 3, 13, 15, 11, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1283226425, 'comment_body': 'These counts are not required. Having to track these counters adds branch points to the code that are not required. I understand what you are trying to do by tracking if the result has a accumulated opposite infinities. However this can be done by just summing the values up.\r\n\r\nI added a double to track the sum of the current values. If m1 is not finite then some part of the computation encountered a non-finite value. You can then return the sum as it will not be finite and in this case the non-finite sum result is the same as the mean.\r\n\r\nAll we have to do is ensure that m1 never overflows unless a non-finite value is encountered. So we require a test that combine two instances that are currently +MAX_VALUE and -MIN_VALUE to check this is correctly handled.\r\n\r\nHere is the implementation that passes all your current tests:\r\n```java\r\nclass FirstMoment implements DoubleStatistic, DoubleStatisticAccumulator<FirstMoment> {\r\n    private long n;\r\n    private double sum;\r\n    private double m1;\r\n    private double dev;\r\n    private double nDev;\r\n\r\n    FirstMoment() {}\r\n\r\n    FirstMoment(final double m1, final long n) {\r\n        this.m1 = m1;\r\n        this.n = n;\r\n    }\r\n\r\n    public void accept(double value) {\r\n        n++;\r\n        sum += value;\r\n        // prevent overflow at the cost of precision on sub-normals\r\n        dev = (value * 0.5 - m1 * 0.5) * 2;\r\n        nDev = dev / n;\r\n        m1 += nDev;\r\n    }\r\n\r\n    public double getAsDouble() {\r\n        if (Double.isFinite(m1)) {\r\n            return n == 0 ? Double.NaN : m1;\r\n        }\r\n        return sum;\r\n    }\r\n\r\n    public FirstMoment combine(FirstMoment other) {\r\n        if (n == 0) {\r\n            n = other.n;\r\n            m1 = other.m1;\r\n            sum = other.sum;\r\n            // copy dev and nDev - not currently required\r\n        } else if (other.n != 0) {\r\n            n += other.n;\r\n            sum += other.sum;\r\n            // prevent overflow at the cost of precision on sub-normals\r\n            dev = (other.m1 * 0.5 - m1 * 0.5) * 2;\r\n            nDev = dev * ((double) other.n / n);\r\n            m1 += nDev;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    long getN() {\r\n        return n;\r\n    }\r\n}\r\n```\r\n\r\n', 'comment_created': datetime.datetime(2023, 8, 3, 13, 42, 42, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1283236565, 'comment_body': 'This need not be public', 'comment_created': datetime.datetime(2023, 8, 3, 13, 50, 4, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1283237238, 'comment_body': '`of a variable`', 'comment_created': datetime.datetime(2023, 8, 3, 13, 50, 33, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1283239966, 'comment_body': 'This will require the `double sum` argument as well to support my modification. It may not matter as the sum is only used a flag for non-finite input values and this constructor is used when the two-pass algorithm created a finite result.', 'comment_created': datetime.datetime(2023, 8, 3, 13, 52, 30, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1283254267, 'comment_body': 'I think this should be final. It allows JVM optimisation.', 'comment_created': datetime.datetime(2023, 8, 3, 14, 2, 22, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1283256453, 'comment_body': 'Since we have created firstMomemt we know that the combine here will return a reference to the left-hand argument. As such we do not have to assign the result and the firstMoment can be final.', 'comment_created': datetime.datetime(2023, 8, 3, 14, 4, 2, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1283267744, 'comment_body': 'I think this case is missing where you can get overflow in the combine when computing the deviation from the mean:\r\n```java\r\n            Arguments.of(new double[][] {{Double.MAX_VALUE}, {-Double.MAX_VALUE}}, 0),\r\n            Arguments.of(new double[][] {{1}, {-Double.MAX_VALUE}}, -Double.MAX_VALUE / 2),\r\n            Arguments.of(new double[][] {{1, 1, 1}, {-Double.MAX_VALUE}}, -Double.MAX_VALUE / 4),\r\n```', 'comment_created': datetime.datetime(2023, 8, 3, 14, 12, 24, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1283271454, 'comment_body': 'Missing overflow tests:\r\n```java\r\n            Arguments.of(new double[] {Double.MAX_VALUE, -Double.MAX_VALUE}, 0),\r\n            Arguments.of(new double[] {1, -Double.MAX_VALUE}, -Double.MAX_VALUE / 2),\r\n            Arguments.of(new double[] {1, 1, 1, -Double.MAX_VALUE}, -Double.MAX_VALUE / 4),\r\n```', 'comment_created': datetime.datetime(2023, 8, 3, 14, 15, 10, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1283280846, 'comment_body': 'These high accuracy values should have a note on how they were computed. E.g. state that the values were computed using an extended precision library (Matlab vpa; Maxima; Python mpmath; Java BigDecimal). In the case of BigDecimal you could just code use the definitional formula and compute the value dynamically.', 'comment_created': datetime.datetime(2023, 8, 3, 14, 21, 56, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1289052638, 'comment_body': 'Setting these values to zero is void. There are initialised to zero by the JVM anyway. So the constructor can be empty.', 'comment_created': datetime.datetime(2023, 8, 9, 18, 47, 58, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1289053915, 'comment_body': 'You should maintain the comment about preventing overflow. Otherwise it is not clear why we scaled down and then back up.', 'comment_created': datetime.datetime(2023, 8, 9, 18, 48, 57, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1289055991, 'comment_body': 'Add a comment here that non-finite values must have been encountered', 'comment_created': datetime.datetime(2023, 8, 9, 18, 50, 15, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1289059506, 'comment_body': 'It makes more sense to be conditioned on `n == 0` here as this is the reason for the NaN (a divide by zero)', 'comment_created': datetime.datetime(2023, 8, 9, 18, 52, 15, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1289063102, 'comment_body': 'No need to state we are returning the non-finite sum. This can state it returns infinity if infinities of the same sign have been encountered else NaN.', 'comment_created': datetime.datetime(2023, 8, 9, 18, 55, 1, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1289068649, 'comment_body': 'Use DECIMAL128 here. The final rounding is done in doubleValue().', 'comment_created': datetime.datetime(2023, 8, 9, 18, 59, 59, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1289177180, 'comment_body': 'Can the two-pass algorithm use a lower ULP', 'comment_created': datetime.datetime(2023, 8, 9, 20, 45, 34, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1289178281, 'comment_body': 'This test is redundant with `testMean`. I would remove it and move the 2 ULP tolerance to that method.', 'comment_created': datetime.datetime(2023, 8, 9, 20, 46, 53, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1289182938, 'comment_body': 'This is a duplicate from line 94.\r\n\r\nWe should have a case that is computable but overflows a sum. You have {MAX, MAX}. Try {MAX, MAX / 2} as this is different from a mean of all equal values.', 'comment_created': datetime.datetime(2023, 8, 9, 20, 52, 7, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1289184101, 'comment_body': 'comment: // Overflow of the sum', 'comment_created': datetime.datetime(2023, 8, 9, 20, 53, 26, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1289185806, 'comment_body': 'An edge case you are missing is a single zero {0.0}', 'comment_created': datetime.datetime(2023, 8, 9, 20, 55, 4, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1289188731, 'comment_body': 'This is a duplicate of `testMeanNonFinite`. I would remove this.', 'comment_created': datetime.datetime(2023, 8, 9, 20, 58, 4, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1289190585, 'comment_body': 'Since these are non-finite then we can use `Assertions.assertEquals` without the ulp tolerance. These should be exact. Note this is allowed:\r\n```java\r\nTestHelper.assertEquals(Double.POSITIVE_INFINITY, Double.MAX_VALUE, 1, () -> ""oops"");\r\n```\r\nWe should update the TestHelper so it can detect non-finite inputs and uses binary equality. We really only want to use a ULP tolerance between finite numbers. This is a limitation of the Precision class which uses a count of the representable doubles between two values. This does not lend itself well to testing values that are close to infinity, e.g. MAX_VALUE, like we do in this class.\r\n\r\nThe current test suite for other statistics works if using this:\r\n```java\r\nstatic void assertEquals(double expected, double actual, int ulps, Supplier<String> msg) {\r\n    // Require strict equivalence of non-finite values\r\n    if (Double.isFinite(expected) && Double.isFinite(actual)) {\r\n        Assertions.assertTrue(Precision.equals(expected, actual, ulps),\r\n            () -> expected + "" != "" + actual + "" within "" + ulps + "" ulp(s): "" + msg.get());\r\n    } else {\r\n        Assertions.assertEquals(expected, actual, msg);\r\n    }\r\n}\r\n```\r\nBut some of the MeanTest cases fail because the `computeExpected` uses a DECIMAL64 math context for the divide which rounds the value above Double.MAX_VALUE. Then the conversion to double creates infinity. If using DECIMAL128 then the MeanTest works.', 'comment_created': datetime.datetime(2023, 8, 9, 21, 0, 1, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1289207783, 'comment_body': ""Originally I thought this could be removed by changing your `computeExpected` to accept multiple arrays. But then it is simpler to compute the stat from a single array. This pattern is better going forward when a test may compute other more complicated stats such as the higher order moments.\r\n\r\nHowever it may be helpful for this to be generic, i.e. allow more than 2 arrays. You could then add better test cases for combine with more than 2 arrays:\r\n```java\r\n        return Arrays.stream(arrays).flatMapToDouble(Arrays::stream).toArray();\r\n```\r\nIt's not as efficient when you only have 2 arrays but it is more flexible."", 'comment_created': datetime.datetime(2023, 8, 9, 21, 17, 55, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1289217113, 'comment_body': 'BigDecimal.ZERO', 'comment_created': datetime.datetime(2023, 8, 9, 21, 27, 34, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1289230143, 'comment_body': 'Perhaps we should shuffle across the two arrays, either instead of, or as well as what you have here. This is the shuffle across the arrays:\r\n```java\r\n        double[] data = TestHelper.concatenate(array1, array2);\r\n        int n = array1.length;\r\n        for (int i = 1; i <= 10; i++) {\r\n            TestHelper.shuffle(rng, data);\r\n            System.arraycopy(data, 0, array1, 0, n);\r\n            System.arraycopy(data, n, array2, 0, array2.length);\r\n            testCombine(array1, array2);\r\n        }\r\n```', 'comment_created': datetime.datetime(2023, 8, 9, 21, 40, 47, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1289230846, 'comment_body': 'Again shuffle both within and across the arrays', 'comment_created': datetime.datetime(2023, 8, 9, 21, 41, 37, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1289232362, 'comment_body': 'Assertions.assertEquals', 'comment_created': datetime.datetime(2023, 8, 9, 21, 42, 47, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1289232961, 'comment_body': 'Assertions.assertEquals', 'comment_created': datetime.datetime(2023, 8, 9, 21, 43, 24, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1289234644, 'comment_body': 'Assertions.assertEquals', 'comment_created': datetime.datetime(2023, 8, 9, 21, 44, 44, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1291102014, 'comment_body': 'Before you shuffle in one large array, you should perform the loop on the two arrays, shuffling each one.', 'comment_created': datetime.datetime(2023, 8, 11, 9, 17, 24, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1291102346, 'comment_body': 'These shuffle are redundant since you shuffled already.', 'comment_created': datetime.datetime(2023, 8, 11, 9, 17, 44, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1291103228, 'comment_body': 'When explicitly testing non-finite values we should use `Assertions.assertEquals` without a delta value.', 'comment_created': datetime.datetime(2023, 8, 11, 9, 18, 42, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1291104410, 'comment_body': 'As before, do the loop twice. Once with a shuffle within each array, once with a shuffle across the arrays.', 'comment_created': datetime.datetime(2023, 8, 11, 9, 19, 53, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1291104759, 'comment_body': 'Assertions.assertEquals', 'comment_created': datetime.datetime(2023, 8, 11, 9, 20, 17, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1291104930, 'comment_body': 'Assertions.assertEquals', 'comment_created': datetime.datetime(2023, 8, 11, 9, 20, 29, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}]","[{'commit_sha': 'bcbc5153e978d8e475e4a9f6a9b46bed948c8d7a', 'committer_username': 'ani5rudh', 'committer_name': 'Anirudh', 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 2, 55, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f7d9ebe8005767b55bb04645cce255445499dbd', 'committer_username': 'ani5rudh', 'committer_name': 'Anirudh', 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 2, 55, 57, tzinfo=datetime.timezone.utc)}]",Anirudh,129569933,,User,,4,,0,0
1481292639,STATISTICS-80: Variance Implementation,,True,52,https://api.github.com/repos/apache/commons-statistics/pulls/52,https://github.com/apache/commons-statistics/pull/52,closed,876,180,8,26,1,55,0,0,[],2023-08-19 03:23:51+00:00,2023-09-07 18:24:26+00:00,1695635.0,"19 days, 15:00:35","[{'comment_id': 1299151777, 'comment_body': ""I was doing a quick review when I noticed I didn't know where `increment()` and `clear()` were. I couldn't find using GH's UI, so I imported into an IDE.\r\n\r\nIt still doesn't show these two methods. Any clue where they would be?\r\n\r\n![image](https://github.com/apache/commons-statistics/assets/304786/dcec89f8-1e77-4c77-b41d-41c498734134)\r\n"", 'comment_created': datetime.datetime(2023, 8, 19, 7, 58, 14, tzinfo=datetime.timezone.utc), 'commenter': 'kinow', 'type': 'User'}, {'comment_id': 1299153667, 'comment_body': ""Are we able to say anything more about accuracy? Maybe the papers linked above have something we could add here?\r\n\r\nAt $work we are using @tdunning's tdigest (a Python port based on it) for one-pass algorithms, where researchers are validating the computation and accuracy of statistics. They used both the paper and also notes from the javadocs that talk about the performance/accuracy tradeoff in the algorithm. e.g. https://github.com/tdunning/t-digest/blob/72acae1e14962795888efc941516c2b4503a86af/core/src/main/java/com/tdunning/math/stats/TDigest.java#L34 & https://github.com/tdunning/t-digest/blob/72acae1e14962795888efc941516c2b4503a86af/core/src/main/java/com/tdunning/math/stats/ScaleFunction.java#L21\r\n\r\nMaybe we don't need to be very specific here, and we can just expand  a bit more and quote the article authors?"", 'comment_created': datetime.datetime(2023, 8, 19, 8, 11, 38, tzinfo=datetime.timezone.utc), 'commenter': 'kinow', 'type': 'User'}, {'comment_id': 1299153811, 'comment_body': 'BTW, this can be a follow-up issue, no need to block this PR for that, nor the other tasks needed for GSoC, I think.', 'comment_created': datetime.datetime(2023, 8, 19, 8, 12, 44, tzinfo=datetime.timezone.utc), 'commenter': 'kinow', 'type': 'User'}, {'comment_id': 1299154248, 'comment_body': 'I started reading the paper but ran out of time to verify the code here, but from the javadocs I think it is based on this one?\r\n\r\n![image](https://github.com/apache/commons-statistics/assets/304786/1650255a-2e62-47b1-8772-3cd3abca6f69)\r\n', 'comment_created': datetime.datetime(2023, 8, 19, 8, 16, 14, tzinfo=datetime.timezone.utc), 'commenter': 'kinow', 'type': 'User'}, {'comment_id': 1299189012, 'comment_body': ""Thanks for pointing this @kinow. While using the javadocs from CM, I had forgotten to make the required changes. I should have referred to the `accept()` and `combine()` methods instead of `increment()` and `clear()`. I'll update it in the next commit. Apologies for this silly error. "", 'comment_created': datetime.datetime(2023, 8, 19, 13, 52, 13, tzinfo=datetime.timezone.utc), 'commenter': 'ani5rudh', 'type': 'User'}, {'comment_id': 1299197564, 'comment_body': ""Not a problem @ani5rudh. Probably worth vhecking other files in this PR and maybe the others previously written to confirm it doesn't have the same text.\r\n\r\nAnd not silly at all :) just a normal mistake."", 'comment_created': datetime.datetime(2023, 8, 19, 14, 27, 12, tzinfo=datetime.timezone.utc), 'commenter': 'kinow', 'type': 'User'}, {'comment_id': 1299203658, 'comment_body': ""West's algorithm is used in the `accept(double d)` method for updating the value of the statistic.\r\nThe two-pass algorithm used in the `of(double... values)` method is :\r\n\r\n![image](https://github.com/apache/commons-statistics/assets/129569933/f1c9eb96-2926-4a5d-a61b-c14a5718c78a)\r\nThis formula is from the paper/report titled - [Algorithms for computing the sample variance : analysis and recommendations](https://www.cs.yale.edu/publications/techreports/tr222.pdf)\r\n"", 'comment_created': datetime.datetime(2023, 8, 19, 14, 34, 28, tzinfo=datetime.timezone.utc), 'commenter': 'ani5rudh', 'type': 'User'}, {'comment_id': 1299205156, 'comment_body': ""I'll go through the papers once again and see if I can add some more information regarding accuracy. 👍 "", 'comment_created': datetime.datetime(2023, 8, 19, 14, 36, 52, tzinfo=datetime.timezone.utc), 'commenter': 'ani5rudh', 'type': 'User'}, {'comment_id': 1299337461, 'comment_body': 'I think here `(accum2 * accum2 / n)` could be simplified to `(accum2Squared / n)`.', 'comment_created': datetime.datetime(2023, 8, 20, 8, 43, 28, tzinfo=datetime.timezone.utc), 'commenter': 'kinow', 'type': 'User'}, {'comment_id': 1299337536, 'comment_body': 'Had a look at the part of the paper you highlighted, @ani5rudh , and this looks correct to me! Great work!', 'comment_created': datetime.datetime(2023, 8, 20, 8, 43, 50, tzinfo=datetime.timezone.utc), 'commenter': 'kinow', 'type': 'User'}, {'comment_id': 1299337798, 'comment_body': 'Thanks for the explanation. I had a look at `SumOfSquaredDeviations#accept` and it looks correct to me!', 'comment_created': datetime.datetime(2023, 8, 20, 8, 45, 34, tzinfo=datetime.timezone.utc), 'commenter': 'kinow', 'type': 'User'}, {'comment_id': 1301450233, 'comment_body': 'To prevent these types of error we should change this to a javadoc link. The links will be verified by the javadoc tool. E.g\r\n```java\r\n/*\r\n * ...\r\n * one of the threads invokes the {@link java.util.function.DoubleConsumer#accept(double) accept}\r\n * or {@link DoubleStatisticAccumulator#combine(DoubleStatistic) combine} method, it must\r\n * be synchronized externally.\r\n * ...\r\n */ \r\n```', 'comment_created': datetime.datetime(2023, 8, 22, 10, 40, 7, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1301491500, 'comment_body': 'I understand that this has been created by composition as the DoubleStatisticAccumulator interface cannot be implemented with different type arguments. However this is an internal class. Thus we could drop the implementation of DoubleStatisticAccumulator (keeping the actual implementation) and change this class to extend FirstMoment. This should allow simpler inheritance structure for the higher order moments. What we are working towards is computing statistics using the [moments (Wikipedia)](https://en.wikipedia.org/wiki/Moment_(mathematics)):\r\n```\r\nRawFirstMoment\r\n\r\n// SumOfDeviations is a precursor to central moment\r\nSumOfDeviations2 -> Variance\r\nSumOfDeviations3 -> Skewness\r\nSumOfDeviations4 -> Kurtosis\r\n\r\n// Optional\r\nSumOfDeviations5 -> Hyperskewness\r\nSumOfDeviations6 -> Hypertailedness\r\n```\r\n\r\nIn this case inheritance for the sum of deviations makes sense. The actual public statistic implementations that use the sum of deviations will avoid the inheritance.\r\n\r\nOnce we get into implementing an aggregator class then different statistics should be able to share the same underlying implementation of the sum of deviations.\r\n\r\n', 'comment_created': datetime.datetime(2023, 8, 22, 11, 19, 24, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1301494314, 'comment_body': 'This helper method should return the raw BigDecimal. Then you can convert it by rounding.\r\n```java\r\nBigDecimal mean = TestHelper.computeExpectedMean(values).round(MathContext.DECIMAL128);\r\n```', 'comment_created': datetime.datetime(2023, 8, 22, 11, 21, 49, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1301495751, 'comment_body': 'Do not use `BigDecimal.valueOf`. This uses a text representation of the double. To get the exact representation you should use `new BigDecimal`.\r\n\r\nNote: Computing the BigDecimal mean should be done outside the loop.', 'comment_created': datetime.datetime(2023, 8, 22, 11, 23, 15, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1301504880, 'comment_body': 'It may be more efficient to use bdDiff.pow(2). This internally can use BigInteger.square and can factor out the common power of 2 in the underlying integer.', 'comment_created': datetime.datetime(2023, 8, 22, 11, 30, 29, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1301520624, 'comment_body': 'We should find a way to avoid if statements in the main accept method. This should be a branchless excecution of code for speed.\r\n\r\nWhat matters is that the getAsDouble knows that a non-finite value has been encountered. This information is maintained by the FirstMoment. So I removed this if statement.\r\n\r\nThe FirstMoment will never overflow (by design) when all inputs are finite. So if the final first moment is finite then you know no infinite values were encountered.\r\n\r\nThe tests work if you use the first moment when returning the sum of the squared deviations:\r\n```java\r\n        return Double.isFinite(firstMoment.getAsDouble()) ? squaredDevSum : Double.NaN;\r\n```', 'comment_created': datetime.datetime(2023, 8, 22, 11, 45, 51, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1301693640, 'comment_body': 'Using Math.pow here is inefficient. A single multiply will return the same result much faster. Math.pow is an advantage for higher order powers where it will be more exact than repeat multiplication.\r\n\r\nThere is no need for scaling by 0.5 here. If the difference overflows then the end result is the same since you immediately square the difference.\r\n\r\n```java\r\n            double dx = other.firstMoment.getAsDouble() - firstMoment.getAsDouble();\r\n            final double sqDiffOfMean = dx * dx;\r\n```\r\n\r\nNote that this highlights a bug in the FirstMoment. I uncommented the scaling in the accept method there and all the unit test pass. So we are not really testing the scaling is needed. This case is missing:\r\n```java\r\nArguments.of(new double[] {Double.MAX_VALUE, Double.MAX_VALUE, -Double.MAX_VALUE}),\r\n```\r\n\r\nThis is a situation where multiple values have been encountered and then the difference from the current mean is infinite. However half the difference is finite. Thus the difference must be computed using half of its value and then rescaled at the end.\r\n\r\nThis can be fixed in FirstMoment using:\r\n```java\r\n    public void accept(double value) {\r\n        n++;\r\n        nonFiniteValue += value;\r\n        // To prevent overflow, dev is computed by scaling down and then scaling up.\r\n        // We choose to scale down and scale up by a factor of two to ensure that the scaling is lossless.\r\n        dev = (value * 0.5 - m1 * 0.5);\r\n        // Here nDev cannot overflow as dev is <= MAX_VALUE when n > 1; or <= MAX_VALUE / 2 when n = 1\r\n        nDev = (dev / n) * 2;\r\n        m1 += nDev;\r\n        // Rescale the deviation\r\n        dev *= 2;\r\n    }\r\n\r\n    public FirstMoment combine(FirstMoment other) {\r\n        if (n == 0) {\r\n            n = other.n;\r\n            dev = other.dev;\r\n            nDev = other.nDev;\r\n            m1 = other.m1;\r\n            nonFiniteValue = other.nonFiniteValue;\r\n        } else if (other.n != 0) {\r\n            n += other.n;\r\n            nonFiniteValue += other.nonFiniteValue;\r\n            // To prevent overflow, dev is computed by scaling down and then scaling up.\r\n            dev = (other.m1 * 0.5 - m1 * 0.5);\r\n            // In contrast to the accept method, here nDev can be close to MAX_VALUE\r\n            // if the weight (other.n / n) approaches 1. So we cannot yet rescale nDev and\r\n            // instead combine with m1 scaled down.\r\n            nDev = dev * ((double) other.n / n);\r\n            m1 = m1 * 0.5 + nDev;\r\n            // Rescale\r\n            m1 *= 2;\r\n            dev *= 2;\r\n            nDev *= 2;\r\n        }\r\n        return this;\r\n    }\r\n```\r\n\r\nThe `Mean.of(double[])` method also fails on this data because the correction is an infinite sum. So we have to fix this too:\r\n```java\r\n        // Correction may be infinite\r\n        correction = Double.isFinite(correction) ? correction : 0;\r\n```\r\n\r\nNote: We could be smarter here and compute the next power of 2 from values.length. Then scale down the values and the initial mean estimate, compute the correction and rescale the correction. This is a bit overkill so it is simpler to ignore correcting very large means.\r\n\r\n', 'comment_created': datetime.datetime(2023, 8, 22, 13, 58, 8, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1301700514, 'comment_body': 'No reason to use 0d here. This is only relevant when you wish for the zero to be used as double for double arithmetic, e.g. `1 / 0 != 1 / 0d` (the LHS will throw an arithmetic exception).', 'comment_created': datetime.datetime(2023, 8, 22, 14, 2, 35, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1301700747, 'comment_body': 'Remove empty line', 'comment_created': datetime.datetime(2023, 8, 22, 14, 2, 45, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1301703728, 'comment_body': 'You could leave this function here and have the ported function return the BigDecimal result. This then becomes:\r\n```java\r\nprivate static double computeExpected(double[] values) {\r\n    return TestHelper.computedExpectedMean(values).doubleValue();\r\n}\r\n```', 'comment_created': datetime.datetime(2023, 8, 22, 14, 4, 55, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1301704909, 'comment_body': 'I would return the BigDecimal here. Add in the javadoc that the result is rounded to DECIMAL128 precision.', 'comment_created': datetime.datetime(2023, 8, 22, 14, 5, 44, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1301706692, 'comment_body': 'In contrast to all the other tests there is no `testNan()` method here. I would add it for completeness.', 'comment_created': datetime.datetime(2023, 8, 22, 14, 7, 3, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1301708830, 'comment_body': 'These ULP values may have to be lowered when you correct the computation of the expected variance. Using BigDecimal.valueOf(double) may have introduced quite a difference.', 'comment_created': datetime.datetime(2023, 8, 22, 14, 8, 33, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1301715638, 'comment_body': 'It may be better here to use MeanTest (since the data is the same):\r\n```java\r\n    static Stream<Arguments> testVariance() {\r\n        return MeanTest.testMean();\r\n    }\r\n```\r\n\r\nMy preferred option would be to move the stream method to a new class: `TestData` with `static Stream<double[]> testValues()`. Note that you do not have to use JUnit `Arguments` when the test method only has one argument. You can simply stream the objects. JUnit will map the stream elements to the test argument.\r\n\r\nNote: When I made the above change I also had the extra test case for Mean included. That fails:\r\n```\r\nDouble.MAX_VALUE, Double.MAX_VALUE, -Double.MAX_VALUE\r\n\r\nexpected: Infinity\r\nactual: NaN\r\n```\r\n\r\nThis highlights that we really should reuse the same data on all the statistics, and it should be in one place.\r\n', 'comment_created': datetime.datetime(2023, 8, 22, 14, 13, 24, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1301728610, 'comment_body': 'Add a newline above this method.\r\n\r\nAdd a comment that the data should be the same as MeanTest.testMeanNonFinite. Given that all the expected values are NaN you could reuse MeanTest:\r\n```java\r\n    static Stream<Arguments> testVarianceNonFinite() {\r\n        // Reuse the Mean data; we ignore the expected mean as the variance is always NaN \r\n        return MeanTest.testMeanNonFinite();\r\n    }\r\n```\r\n\r\nThese could also be moved to a TestData class. The expected value for the mean can be computed using DoubleStream since that will return the correct non-finite value from the sum divided by the length.\r\n', 'comment_created': datetime.datetime(2023, 8, 22, 14, 22, 22, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1301735620, 'comment_body': 'Move this data to `TestData.testCombineValues`. This will have to use a Stream of Arguments.', 'comment_created': datetime.datetime(2023, 8, 22, 14, 26, 52, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1301738407, 'comment_body': 'Once again, this is a duplicate of the data in MeanTest. The expected value is always NaN. So we can move the data to a TestData class.', 'comment_created': datetime.datetime(2023, 8, 22, 14, 28, 33, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1316339953, 'comment_body': 'Wrap this to 100 or 120 character width', 'comment_created': datetime.datetime(2023, 9, 5, 20, 1, 8, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1316348776, 'comment_body': 'Class and methods should have some comments.', 'comment_created': datetime.datetime(2023, 9, 5, 20, 10, 6, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1316357213, 'comment_body': 'The expected value should not be in this method. You are always using NaN so this is not helpful. Each statistic should be able to compute the expected value for the data that has non-finite values. For example the min/max/mean may return an infinity but the variance would be NaN.', 'comment_created': datetime.datetime(2023, 9, 5, 20, 11, 47, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1316360865, 'comment_body': 'I do not think we should have expected value in this stream method. Why are these cases needed for mean and not for any other stat. Can these cases be moved to the TestData class?\r\n\r\nYou can just have a second method to compute the expected mean for non-finite cases. IIUC it should just be the mean of the stream of values:\r\n```java\r\nArrays.stream(values).flatMapToDouble(Arrays::stream).average().orElse(Double.NaN)\r\n```', 'comment_created': datetime.datetime(2023, 9, 5, 20, 13, 38, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1316383197, 'comment_body': 'Why protect from overflow here when immediately you square the result?\r\n\r\nI removed this and the failing test case is: {MAX, MAX, -MAX}.\r\n\r\nThis is similar to {2, 2, -2} which has a mean of 2/3 and a variance of 3.5555. So rescaled by 2^1023 squared the variance would be 3.5555 * (2^1023)^2. This is a large overflow. Your scaling down is protecting computing the deviation from the mean, but the deviation squared is infinite and the rest of the computation cannot be saved.\r\n\r\nI think your overflow detection can be done on the `accum` value and not `accum2`. We can document that if the sum of squared deviations from the mean overflows then the variance is returned as infinity. So we use the formula as defined (comments removed for brevity):\r\n```java\r\n        for (final double value : values) {\r\n            dev = value - mean;\r\n            accum += dev * dev;\r\n            accum2 += dev;\r\n        }\r\n        final double accum2Squared = accum2 * accum2;\r\n        final long n = values.length;\r\n        if (accum == Double.POSITIVE_INFINITY) {\r\n            squaredDevSum = Double.POSITIVE_INFINITY;\r\n        } else {\r\n            squaredDevSum = accum - (accum2Squared / n);\r\n        }\r\n```\r\n', 'comment_created': datetime.datetime(2023, 9, 5, 20, 39, 9, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1316390169, 'comment_body': 'Can these apply to the variance too, i.e. move them to TestData', 'comment_created': datetime.datetime(2023, 9, 5, 20, 46, 54, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1316399084, 'comment_body': 'Again, the expected should not be here. It is always NaN so not helpful to any consumers of the data.', 'comment_created': datetime.datetime(2023, 9, 5, 20, 57, 20, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1316419837, 'comment_body': ""The `<a>` tag looks malformed to me, but if that renders valid Javadoc & HTML then I guess that's OK."", 'comment_created': datetime.datetime(2023, 9, 5, 21, 23, 27, tzinfo=datetime.timezone.utc), 'commenter': 'kinow', 'type': 'User'}, {'comment_id': 1316420192, 'comment_body': 'I wondered why you have a ULP for ARRAY_OF_ARRAYS. I see that combine uses the accept method but array of arrays uses the of method to construct each. Perhaps we should rename these to:\r\n```\r\nULP_COMBINE_ACCEPT\r\nULP_COMBINE_OF\r\n```\r\nNote: I have updated the `TestHelper` to output the actual ULP error in the message. This makes setting these limits a bit easier. I will push the updated TestHelper so you can rebase and collect the change.\r\n', 'comment_created': datetime.datetime(2023, 9, 5, 21, 23, 47, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1316430707, 'comment_body': 'These are not the same as the MeanTest. So we are missing cases in one or the other. I would put them all in TestData and then have a method to compute the expected value when non-finite values are encountered. IIUC when the mean is infinite the variance will be NaN so computing the expected value is a simple return of NaN.', 'comment_created': datetime.datetime(2023, 9, 5, 21, 31, 30, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1316438304, 'comment_body': 'You can short-circuit here if the mean is non-finite. I think this is correct. We either return a infinity if the mean is +/-infinity or propagate the nan for the sum of squared deviations.\r\n```java\r\n        if (!Double.isFinite(mean)) {\r\n            return StorelessSampleVariance.create(Math.abs(mean), mean, values.length, Math.abs(mean));\r\n        }\r\n```', 'comment_created': datetime.datetime(2023, 9, 5, 21, 38, 56, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1316456526, 'comment_body': 'Just return zero here', 'comment_created': datetime.datetime(2023, 9, 5, 21, 56, 21, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1316479447, 'comment_body': 'Again, these are not the same as the MeanTest. So we are missing cases in one or the other. Please consolidate them to TestData.', 'comment_created': datetime.datetime(2023, 9, 5, 22, 21, 20, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1316482503, 'comment_body': 'No need to create a copy instance here. Just use: `super.combine(other)`', 'comment_created': datetime.datetime(2023, 9, 5, 22, 26, 53, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1316484465, 'comment_body': 'Avoid creating a copy instance of the FirstMoment. Instead drop the implementation of the statistic interfaces (these are internal classes so do not require them):\r\n```java\r\n// In FirstMoment:\r\n    double getFirstMoment() {\r\n        if (Double.isFinite(m1)) {\r\n            return n == 0 ? Double.NaN : m1;\r\n        }\r\n        // A non-finite value must have been encountered, return nonFiniteValue which represents m1.\r\n        return nonFiniteValue;\r\n    }\r\n\r\n// In SumOfSquaredDeviations:\r\n    final double diffOfMean = other.getFirstMoment() - m1\r\n```', 'comment_created': datetime.datetime(2023, 9, 5, 22, 30, 52, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1316489935, 'comment_body': 'I think we should drop the implementation of DoubleStatistic. You could just implement DoubleConsumer in FirstMoment and drop the implementation of DoubleStaticticAccumilator<FirstMoment>. You then do not have to overload getAsDouble through the hierarchy. You can have typed methods for combine  and specific methods for the stat:\r\n\r\n```\r\nFirstMoment implements DoubleConsumer:\r\nvoid accept(double)\r\nFirstMoment combine(FirstMoment);\r\ndouble getFirstMoment()\r\n\r\nSumOfSquaredDeviations extends FirstMoment:\r\nSumOfSquaredDeviations combine(SumOfSquareDeviations);\r\ndouble getSumOfSquaredDeviations();\r\n```\r\n\r\nThis allows the SumOfSquareDeviations to call `super.combine(other)` and `getFirstMoment()` directly without creating copy instances.\r\n', 'comment_created': datetime.datetime(2023, 9, 5, 22, 41, 21, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1316500738, 'comment_body': 'It opens a webpage in my IDE so the href is OK. But it should have a `</a>` tag. Note that testing with:\r\n```\r\nmvn javadoc:test-javadoc\r\n```\r\nerrors as there are no public or protected test classes. So this link is just for internal use only.', 'comment_created': datetime.datetime(2023, 9, 5, 23, 3, 56, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1317695196, 'comment_body': 'No need for super here', 'comment_created': datetime.datetime(2023, 9, 6, 18, 51, 54, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1317702458, 'comment_body': 'This is a product of two longs so it could have integer overflow. The sum could also overflow but the sizes involved make that unlikely. I think this should be made safe by using:\r\n```java\r\n(((double) oldN * otherN) / ((double) oldN + otherN))\r\n```', 'comment_created': datetime.datetime(2023, 9, 6, 18, 57, 37, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1317707448, 'comment_body': 'Correction\r\n```java\r\nreturn StorelessSampleVariance.create(Math.abs(mean), mean, values.length, mean);\r\n```\r\nThe second value is a proxy for the non-finite sum of the values, so we should not use abs.', 'comment_created': datetime.datetime(2023, 9, 6, 19, 2, 43, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1317708159, 'comment_body': 'This comment is now out-of-date.\r\n\r\nYou should also update the method javadoc with the case: if the sum of the squared deviations from the mean is infinite, the variance is NaN.', 'comment_created': datetime.datetime(2023, 9, 6, 19, 3, 28, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1317713967, 'comment_body': 'supplies a test data for a statistic in a single array.', 'comment_created': datetime.datetime(2023, 9, 6, 19, 9, 22, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1317715239, 'comment_body': 'supplies a test data for a statistic in a single array. Each case will contain at least 1 non-finite value.', 'comment_created': datetime.datetime(2023, 9, 6, 19, 9, 52, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1317716632, 'comment_body': ' supplies a test data for a statistic in as a pair of double[] arrays.', 'comment_created': datetime.datetime(2023, 9, 6, 19, 10, 49, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1317718071, 'comment_body': ' supplies a test data for a statistic in as a pair of double[] arrays. Each case will contain at least 1 non-finite value.', 'comment_created': datetime.datetime(2023, 9, 6, 19, 12, 25, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1318734564, 'comment_body': 'Your `or` is now on the wrong line', 'comment_created': datetime.datetime(2023, 9, 7, 14, 52, 4, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 1318762723, 'comment_body': ""Ohh I'd forgotten to notice this, I'll change it."", 'comment_created': datetime.datetime(2023, 9, 7, 15, 13, 18, tzinfo=datetime.timezone.utc), 'commenter': 'ani5rudh', 'type': 'User'}]","[{'commit_sha': 'bcbc5153e978d8e475e4a9f6a9b46bed948c8d7a', 'committer_username': 'ani5rudh', 'committer_name': 'Anirudh', 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 2, 55, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f7d9ebe8005767b55bb04645cce255445499dbd', 'committer_username': 'ani5rudh', 'committer_name': 'Anirudh', 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 2, 55, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd101ebce6e76b29983c9128078511232c7d359dc', 'committer_username': 'ani5rudh', 'committer_name': 'Anirudh', 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 2, 55, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39b82e05cb9172ac4710e1d2be15ed4220f80ca8', 'committer_username': 'ani5rudh', 'committer_name': 'Anirudh', 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 2, 55, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f7f2507817e7c937084a860f62b645ff792f3be', 'committer_username': 'ani5rudh', 'committer_name': 'Anirudh', 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 2, 55, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14efe6cb5c2cab8a6a265f6aa9b8f0503d8d0239', 'committer_username': 'ani5rudh', 'committer_name': 'Anirudh', 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 2, 55, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ddaeb1f29a6af744a9bdc117eeb88e7f7d13d8cf', 'committer_username': 'ani5rudh', 'committer_name': 'Anirudh', 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 2, 55, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd69d931d3ec5bf1d926ea9770ab8c74b337fd54f', 'committer_username': 'ani5rudh', 'committer_name': 'Anirudh', 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 2, 55, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '91e7c13eb6d4a84a945baa699762adb31aa5ac2c', 'committer_username': 'ani5rudh', 'committer_name': 'Anirudh', 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 2, 55, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e828789497a7d8d21074b21223c23b6be56d34f', 'committer_username': 'ani5rudh', 'committer_name': 'Anirudh', 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 2, 55, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '94f8162b3070e7359981ddea0b26a2f32b624965', 'committer_username': 'ani5rudh', 'committer_name': 'Anirudh', 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 2, 55, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '98625603696cc91b69f427750c76117097ba7399', 'committer_username': 'ani5rudh', 'committer_name': 'Anirudh', 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 2, 55, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ef47038d093341d2f83e97a3afe40ef512cd871', 'committer_username': 'aherbert', 'committer_name': 'Alex Herbert', 'committer_email': 'a.herbert@sussex.ac.uk', 'commit_date': datetime.datetime(2011, 6, 30, 12, 32, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ccb93b85b1a9bb72a81b0fac44d55f248b5b56ae', 'committer_username': 'ani5rudh', 'committer_name': 'Anirudh', 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 2, 55, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0205c003a2cf645004f650e184af57d1870059cf', 'committer_username': 'ani5rudh', 'committer_name': 'Anirudh', 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 2, 55, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '622730698685cdc6c66fb512078a15fc203a3333', 'committer_username': 'ani5rudh', 'committer_name': 'Anirudh', 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 2, 55, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e26dd9dafa89676a5ec1942f3b52c41605215cc8', 'committer_username': 'ani5rudh', 'committer_name': 'Anirudh', 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 2, 55, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b255161bc57758823d38e8661bc3e194e4230f20', 'committer_username': 'ani5rudh', 'committer_name': 'Anirudh', 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 2, 55, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ec25b1def8eff578b52965e8820ab0197312459', 'committer_username': 'ani5rudh', 'committer_name': 'Anirudh', 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 2, 55, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f29207081029738d639319080809e796fb3f838e', 'committer_username': 'ani5rudh', 'committer_name': 'Anirudh', 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 2, 55, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f0fcb4393aa72dbcedb1be170619492184c52d52', 'committer_username': 'ani5rudh', 'committer_name': 'Anirudh', 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 2, 55, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8603c020fc7ee774e35a12c114a571e699fa3e7a', 'committer_username': 'ani5rudh', 'committer_name': 'Anirudh', 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 2, 55, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71baf7558d9b1b24594bac6ec3924172b7447ced', 'committer_username': 'ani5rudh', 'committer_name': 'Anirudh', 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 2, 55, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a5b6c19c08d7591ee446724e90163ae8fa9c886', 'committer_username': 'ani5rudh', 'committer_name': 'Anirudh', 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 2, 55, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ec7601dba55294aea2c4d8efbc51dddff160e2a', 'committer_username': 'ani5rudh', 'committer_name': 'Anirudh', 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 2, 55, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c094d35c60776ba7311af73d3197c755702d48cd', 'committer_username': 'ani5rudh', 'committer_name': 'Anirudh', 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 2, 55, 57, tzinfo=datetime.timezone.utc)}]",Anirudh,129569933,,User,,4,,0,0
1445260408,NUMBERS-200: Don't honour compensation if it's NaN in Sum#add,,True,136,https://api.github.com/repos/apache/commons-numbers/pulls/136,https://github.com/apache/commons-numbers/pull/136,closed,35,1,2,1,1,1,0,0,[],2023-07-22 09:04:33+00:00,2023-07-22 18:35:23+00:00,34250.0,9:30:50,"[{'comment_id': 1271292657, 'comment_body': ""I think this can use `isFinite(c)`. I don't think the compensation can be infinite if the regular sum is still finite, so we do not have to sum infinite compensation.\r\n\r\nHowever, the NaN check should be faster so the two variants are the same. Please add a comment as to why the NaN check is required, e.g. infinite terms will generate a nan compensation. Do not destroy the regular IEEE754 sum with spurious nan."", 'comment_created': datetime.datetime(2023, 7, 22, 12, 47, 1, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}]","[{'commit_sha': '8617348c4d7d47a7d0d43a191e6dbbb1da0a5ca4', 'committer_username': 'ani5rudh', 'committer_name': 'Anirudh', 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 2, 55, 57, tzinfo=datetime.timezone.utc)}]",Anirudh,129569933,,User,,4,,0,0

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
71975377,commons-numbers,apache/commons-numbers,Java,58,69,37,31,1481,8,19,8,"[{'id': 1445260408, 'number': 136, 'closed': datetime.datetime(2023, 7, 22, 18, 35, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 22, 9, 4, 33, tzinfo=datetime.timezone.utc), 'time_taken': 34250.0, 'time_delta': '9:30:50', 'additions': 35, 'deletions': 1, 'state': 'closed'}]"
24928494,commons-math,apache/commons-math,Java,354,571,73,84,7190,60,19,60,"[{'id': 1298624361, 'number': 231, 'closed': datetime.datetime(2023, 4, 1, 8, 38, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 1, 8, 37, 52, tzinfo=datetime.timezone.utc), 'time_taken': 64.0, 'time_delta': '0:01:04', 'additions': 107, 'deletions': 4, 'state': 'closed'}]"
116109319,commons-statistics,apache/commons-statistics,Java,26,50,36,14,887,0,7,0,"[{'id': 1510056175, 'number': 54, 'closed': datetime.datetime(2023, 9, 16, 7, 46, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 9, 11, 10, 30, 20, tzinfo=datetime.timezone.utc), 'time_taken': 422178.0, 'time_delta': '4 days, 21:16:18', 'additions': 10, 'deletions': 26, 'state': 'closed'}, {'id': 1490772708, 'number': 53, 'closed': datetime.datetime(2023, 8, 27, 16, 39, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 26, 19, 30, 32, tzinfo=datetime.timezone.utc), 'time_taken': 76112.0, 'time_delta': '21:08:32', 'additions': 50, 'deletions': 24, 'state': 'closed'}, {'id': 1481292639, 'number': 52, 'closed': datetime.datetime(2023, 9, 7, 18, 24, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 19, 3, 23, 51, tzinfo=datetime.timezone.utc), 'time_taken': 1695635.0, 'time_delta': '19 days, 15:00:35', 'additions': 876, 'deletions': 180, 'state': 'closed'}, {'id': 1460964738, 'number': 51, 'closed': datetime.datetime(2023, 8, 11, 13, 45, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 3, 8, 0, 25, tzinfo=datetime.timezone.utc), 'time_taken': 711911.0, 'time_delta': '8 days, 5:45:11', 'additions': 711, 'deletions': 5, 'state': 'closed'}, {'id': 1443215001, 'number': 50, 'closed': datetime.datetime(2023, 7, 25, 8, 25, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 20, 16, 17, 35, tzinfo=datetime.timezone.utc), 'time_taken': 403664.0, 'time_delta': '4 days, 16:07:44', 'additions': 340, 'deletions': 2, 'state': 'closed'}, {'id': 1436340227, 'number': 49, 'closed': datetime.datetime(2023, 7, 17, 15, 32, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 16, 18, 6, 1, tzinfo=datetime.timezone.utc), 'time_taken': 77209.0, 'time_delta': '21:26:49', 'additions': 323, 'deletions': 1, 'state': 'closed'}, {'id': 1436048942, 'number': 48, 'closed': datetime.datetime(2023, 7, 16, 7, 6, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 15, 19, 37, 44, tzinfo=datetime.timezone.utc), 'time_taken': 41308.0, 'time_delta': '11:28:28', 'additions': 495, 'deletions': 1, 'state': 'closed'}, {'id': 1436047991, 'number': 47, 'closed': datetime.datetime(2023, 7, 15, 19, 34, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 15, 19, 32, 30, tzinfo=datetime.timezone.utc), 'time_taken': 111.0, 'time_delta': '0:01:51', 'additions': 495, 'deletions': 1, 'state': 'closed'}, {'id': 1425045576, 'number': 46, 'closed': datetime.datetime(2023, 7, 16, 8, 13, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 7, 17, 55, 25, tzinfo=datetime.timezone.utc), 'time_taken': 742683.0, 'time_delta': '8 days, 14:18:03', 'additions': 495, 'deletions': 1, 'state': 'closed'}, {'id': 1421386756, 'number': 45, 'closed': datetime.datetime(2023, 7, 6, 9, 27, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 5, 16, 9, 44, tzinfo=datetime.timezone.utc), 'time_taken': 62294.0, 'time_delta': '17:18:14', 'additions': 465, 'deletions': 0, 'state': 'closed'}, {'id': 1377367028, 'number': 44, 'closed': datetime.datetime(2023, 6, 4, 8, 3, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 3, 21, 58, 58, tzinfo=datetime.timezone.utc), 'time_taken': 36250.0, 'time_delta': '10:04:10', 'additions': 4, 'deletions': 0, 'state': 'closed'}]"
