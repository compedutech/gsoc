pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
958804066,PICARD-2471: Restrict Picard to a single instance,"# Summary
* This is a…
  * [ ] Bug fix
  * [x] Feature addition
  * [ ] Refactoring
  * [ ] Minor / simple change (like a typo)
  * [ ] Other
* **Describe this change in 1-2 sentences**:

This is a draft where we can discuss [my GSoC project](https://summerofcode.withgoogle.com/programs/2022/projects/ItQ0NNLd) progress. Picard is going to work in single-instance mode thanks to named pipes

# Problem

Ticket description is clear enough so I'll just paste it here: 

When passing folders to Picard via command line (such as in Foobar), Picard will launch a new instance for each folder rather than loading them all in one instance. The ability to force it all into one instance would be helpful.

* JIRA ticket (_optional_): PICARD-2471



# Solution

I've created a cross-platform communication protocol for Picard instances, based on named pipes. Now, in this draft, you can see my progress in integrating it into the Picard app.


# TODO
* [x] Communication protocol works on all supported operating systems
* [x] Pipe can distinguish between app versions
* [x] If pipe is listened to, Picard sends all the arguments there and leaves without spawning an instance 
* [x] Picard accepts `-s`/`--stand-alone-instance` argument to create a forced, standalone instance, that doesn't listen to any pipe
* [x] Picard creates a ""pipe server"" thread that listens to any possible messages in the background and passes messages to file-adding methods
* [x] in tagger.py/main: picard_args.FILE args are converted to absolute paths before passing them to the existing instanec
* [x] Changes are tested
* [x] Changes are documented
* [x] Commits are properly organised
* [ ] Merge :)

# Notes
- Type annotations are my helpers, since I always use mypy while writing Python. When we will be merging into master, I can remove them if they are problematic for you
- Commit structure is also just a draft to be organised properly
- Because it's just a draft, I'll let you know when workflows will make sense.
",True,2116,https://api.github.com/repos/metabrainz/picard/pulls/2116,https://github.com/metabrainz/picard/pull/2116,closed,575,5,3,78,61,208,0,0,[],2022-06-06 08:16:47+00:00,2022-07-12 19:01:24+00:00,3149077.0,"36 days, 10:44:37","[{'comment_id': 890000573, 'comment_body': ""`args` shouldn't default to an empty list, see https://docs.quantifiedcode.com/python-anti-patterns/correctness/mutable_default_value_as_argument.html"", 'comment_created': datetime.datetime(2022, 6, 6, 9, 59, 44, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 890002741, 'comment_body': ""I'm not fond of overwriting `PLATFORM` here, also check https://github.com/metabrainz/picard/blob/b6665ce159a441b9d70d483e8f1befea8743e1e2/picard/const/sys.py#L26-L29 "", 'comment_created': datetime.datetime(2022, 6, 6, 10, 2, 49, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 890003645, 'comment_body': 'Use a set-once boolean instead of string comparison, platform is very unlikely to change during runtime', 'comment_created': datetime.datetime(2022, 6, 6, 10, 3, 58, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 890004391, 'comment_body': '`os.unlink()` may fail, we should handle exceptions', 'comment_created': datetime.datetime(2022, 6, 6, 10, 5, 6, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 890006050, 'comment_body': ""Temporary directory is usually set from environment, also I'm not sure that's the correct destination for an application-related pipe."", 'comment_created': datetime.datetime(2022, 6, 6, 10, 7, 40, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 890006973, 'comment_body': 'Those numerical values should be either constants (with explicit names) or a comment should be added to tell what they are.', 'comment_created': datetime.datetime(2022, 6, 6, 10, 9, 2, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 890014194, 'comment_body': '```python\r\n\r\nif IS_WIN:\r\n    sender_method = self.__win_sender\r\nelse:\r\n    sender_method = self.__unix_sender\r\n\r\nsender = __pool.submit(sender_method, message)\r\n```', 'comment_created': datetime.datetime(2022, 6, 6, 10, 19, 45, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 890014798, 'comment_body': '```while not response:``` is more pythonic.', 'comment_created': datetime.datetime(2022, 6, 6, 10, 20, 40, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 890015184, 'comment_body': '```if response:``` should be enough.', 'comment_created': datetime.datetime(2022, 6, 6, 10, 21, 18, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 890074245, 'comment_body': ""Do you have any ideas of exceptions that shouldn't stop the program execution or is the current commit ok?\r\n"", 'comment_created': datetime.datetime(2022, 6, 6, 11, 51, 56, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 890074798, 'comment_body': 'Created constants with links to docs just in case, hope it can do now\r\n', 'comment_created': datetime.datetime(2022, 6, 6, 11, 52, 48, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 890077789, 'comment_body': ""In Windows pipes aren't just files on disk like on Unix, so I'll keep discussing the latter one.\r\n\r\nI sometimes see apps using /tmp and IMO it's okay and keeps the logic as simple as possible (the OS deletes the file for us in some cases). But if you insist on changing it I think we could also try the [tempfile library](https://docs.python.org/3/library/tempfile.html)"", 'comment_created': datetime.datetime(2022, 6, 6, 11, 57, 20, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 890336466, 'comment_body': 'No need to initialize `sender` here, since it is set in following `if`/`else`.', 'comment_created': datetime.datetime(2022, 6, 6, 16, 42, 48, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 890337816, 'comment_body': 'You resolved this conversation without commenting, what I was suggesting here is to pass the method to call and avoid the repetition.', 'comment_created': datetime.datetime(2022, 6, 6, 16, 44, 20, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 890338966, 'comment_body': ""What's `64 * 1024` here? How was this value chosen?"", 'comment_created': datetime.datetime(2022, 6, 6, 16, 45, 51, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 890353275, 'comment_body': ""On *nix, the file should be created in user directory, not in /tmp, especially in this case, because the file path is built using the login name (which is imho a bad idea too).\r\n\r\nOn Linux systems I think we should use something like `~/.config/MusicBrainz/Picard/pipe_file_{self.__app_version}` (and drop the use of `os.login()`. Not sure if there's a better place than `.config` (that's not ideal, but `.cache` isn't better).\r\n\r\n@phw what's your take on this?\r\n\r\n"", 'comment_created': datetime.datetime(2022, 6, 6, 17, 3, 41, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 890353991, 'comment_body': 'Perhaps use constants as well for those error codes.', 'comment_created': datetime.datetime(2022, 6, 6, 17, 4, 39, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 890368301, 'comment_body': ""This approach isn't really pythonic, we should try to create the fifo, and if it fails, act accordingly. It would remove the need of `__pipe_exists()`.\r\nAlso when `self.send_to_pipe(arg)` fails, the fifo is first removed, then created again, but if we can't write to the fifo because of permissions for example, it is unlikely we can remove it / create it.\r\nIf we can't remove it, `mkfifo()` will raise an exception FileExistsError.\r\n\r\nIf the fifo isn't functional at all, which behavior do we expect?"", 'comment_created': datetime.datetime(2022, 6, 6, 17, 23, 57, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 890370768, 'comment_body': 'Is there a reason to not do the conversion to `str` in `__read_from_win_pipe()`?', 'comment_created': datetime.datetime(2022, 6, 6, 17, 26, 34, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 890375067, 'comment_body': ""Is there a reason to not use `with open(self.path, 'r') as fifo:` here ?\r\n\t\r\n"", 'comment_created': datetime.datetime(2022, 6, 6, 17, 31, 55, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 890387153, 'comment_body': 'Fair point, agreed.', 'comment_created': datetime.datetime(2022, 6, 6, 17, 47, 40, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 890388653, 'comment_body': 'Actually none, fixed.', 'comment_created': datetime.datetime(2022, 6, 6, 17, 49, 30, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 890389911, 'comment_body': 'None too, fixed', 'comment_created': datetime.datetime(2022, 6, 6, 17, 51, 6, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 890392030, 'comment_body': 'Great idea to avoid the boilerplate, gonna change it asap\r\n', 'comment_created': datetime.datetime(2022, 6, 6, 17, 53, 40, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 890413405, 'comment_body': ""Ok, they'll be in the same place with a reference article as well."", 'comment_created': datetime.datetime(2022, 6, 6, 18, 18, 23, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 890415361, 'comment_body': ""It's the buffer size. Actually, I'll put IN and OUT buffer values into one `__BUFFER_VALUE` and put it here as well."", 'comment_created': datetime.datetime(2022, 6, 6, 18, 21, 2, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 890425704, 'comment_body': ""I think we can do it the Windows way. Try to send and if nothing listens to the pipe, create it.\r\n\r\nAnd when it comes to the permissions: to deny write permissions to the pipe would be a user's conscious act, so I'll just go with catching PermissionError for such users."", 'comment_created': datetime.datetime(2022, 6, 6, 18, 31, 59, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 890452096, 'comment_body': 'And how this value was chosen? Well, I saw that almost all code snippets using the API are setting it to 65536. Should be big enough to handle any argv flawlessly, but is small enough not to break the OS. ', 'comment_created': datetime.datetime(2022, 6, 6, 19, 2, 51, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 890819982, 'comment_body': ""I agree to not use ` /tmp`, especially after what we had discovered recently with macOS removing untouched files from `/tmp`  every few days (PICARD-2459).\r\n\r\nNot sure about the best location, though. `~/.config`  seems wrong, and we already have these tasks to improve using the proper directory for some stored data.\r\n\r\nIMHO on Linux something under `~/.local`  would make sense. On my system pipewire uses `~/.local/state/pipewire` for some stuff, so maybe `~/.local/state/picard`  would be a possibility.\r\n\r\nBut it does not fit perfectly, according to [XDG Base Directory Specification](https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html)\r\n\r\n>  The $XDG_STATE_HOME contains state data that should persist between (application) restarts, but that is not important or portable enough to the user that it should be stored in $XDG_DATA_HOME. It may contain:\r\n>\r\n> - actions history (logs, history, recently used files, …)\r\n> - current state of the application that can be reused on a restart (view, layout, open files, undo history, …)\r\n\r\nA system wide service might place such pipes in `/var`, and Flatpak also uses `~/.var`, so this already exists on many systems. But so far this really is only used for Flatpak.\r\n\r\nhttps://stackoverflow.com/questions/15794696/what-is-the-proper-place-to-put-named-pipes-on-linux suggests `/run/user/<userid>/`, and indeed this is used by several applications on my system. But:\r\n\r\n- There are Linux setups without system.d, and I'm not really keen on introducing the complexity of detecting this\r\n- There are non-Linux Unixes, e.g. the BSDs (or even Haiku, but that could be patched separately)\r\n\r\nIn any case we need to handle macOS as a specific case. There something in `~/Library/Application Support/` seems to be the correct place, see https://developer.apple.com/library/archive/documentation/FileManagement/Conceptual/FileSystemProgrammingGuide/MacOSXDirectories/MacOSXDirectories.html"", 'comment_created': datetime.datetime(2022, 6, 7, 6, 40, 38, tzinfo=datetime.timezone.utc), 'commenter': 'phw', 'type': 'User'}, {'comment_id': 890836335, 'comment_body': ""> https://stackoverflow.com/questions/15794696/what-is-the-proper-place-to-put-named-pipes-on-linux suggests `/run/user/<userid>/`, and indeed this is used by several applications on my system. But:\r\n> \r\n>     * There are Linux setups without system.d, and I'm not really keen on introducing the complexity of detecting this\r\n\r\nI'm using openRC and I have `$XDG_RUNTIME_DIR` (`/run/user/<userid>/`) in my filesystem, so maybe it's not that init-dependent?"", 'comment_created': datetime.datetime(2022, 6, 7, 7, 2, 55, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 890838124, 'comment_body': '@phw do you have any ideas other than ones already included in the file or can we mark this as resolved?', 'comment_created': datetime.datetime(2022, 6, 7, 7, 5, 12, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 890839562, 'comment_body': 'That would be good. No idea about the BSDs, though. But maybe if we could unify it on Linux it would be great already.\r\n\r\nWe could also have a simple fallback if /run/user/<userid> is not available or not writable fall back to ~/.config', 'comment_created': datetime.datetime(2022, 6, 7, 7, 7, 4, tzinfo=datetime.timezone.utc), 'commenter': 'phw', 'type': 'User'}, {'comment_id': 890843304, 'comment_body': ""Wouldn't it be better to raise `PermissionError` here again? We can do so with this updated error message, but `PermissionError` seems to be more fitting than `ValueError`."", 'comment_created': datetime.datetime(2022, 6, 7, 7, 11, 48, tzinfo=datetime.timezone.utc), 'commenter': 'phw', 'type': 'User'}, {'comment_id': 890844594, 'comment_body': '> That would be good. No idea about the BSDs, though. But maybe if we could unify it on Linux it would be great already.\r\n> \r\n> We could also have a simple fallback if /run/user/ is not available or not writable fall back to ~/.config\r\n\r\nWe should also check at least runit and SysV tho, [the list of alternative inits](https://nosystemd.org/) is pretty long but they seem to be the most frequently used ones.', 'comment_created': datetime.datetime(2022, 6, 7, 7, 13, 22, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 890851941, 'comment_body': ""It currently handles `FileNotFoundError`, so that's fine.\r\n\r\nI'm not sure what to do in other cases, like e.g. `PermissionErrors`. There are two general approaches we can go if something with pipe creation fails seriously in a non-fixable / unexpected manner:\r\n\r\n- we crash the application\r\n- we log an error, but we start Picard still as a separate process without pipe integration\r\n\r\nI tend to prefer option 2 for this case, because it allows user to still run Picard, they will just loose the single instance advantages."", 'comment_created': datetime.datetime(2022, 6, 7, 7, 22, 6, tzinfo=datetime.timezone.utc), 'commenter': 'phw', 'type': 'User'}, {'comment_id': 890854918, 'comment_body': '> I tend to prefer option 2 for this case\r\n\r\nMe too.', 'comment_created': datetime.datetime(2022, 6, 7, 7, 25, 35, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 890859883, 'comment_body': '```suggestion\r\n            if not args:\r\n```', 'comment_created': datetime.datetime(2022, 6, 7, 7, 30, 15, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 890868408, 'comment_body': 'I guess this conversion is needed to build a file path for Windows, so I think we should pass the version as is, and sanitize it at file path building time, the removal of dots is likely only needed on Win platforms.\r\n', 'comment_created': datetime.datetime(2022, 6, 7, 7, 39, 45, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 890869300, 'comment_body': '```suggestion\r\nif platform in {""win32"", ""cygwin""}:\r\n```', 'comment_created': datetime.datetime(2022, 6, 7, 7, 40, 39, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 890877518, 'comment_body': ""So my idea is to:\r\n1. create sth like `self.permission_error_happened` in except block\r\n2. If the previously mentioned attribute is true, pass it to the Tagger's constructor the same way as if the `--force` flag was used."", 'comment_created': datetime.datetime(2022, 6, 7, 7, 48, 43, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 890881815, 'comment_body': 'BTW, I think we can just remove this (re-) definition of `IS_WIN ` and modify https://github.com/metabrainz/picard/blob/04ddb9f3f076b7940fd6325e271a21a851c3ae44/picard/const/sys.py#L26\r\n\r\n@phw is there any reason to not match `cygwin` in `IS_WIN` definition?', 'comment_created': datetime.datetime(2022, 6, 7, 7, 53, 1, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 890883676, 'comment_body': 'Okay, I\'ve been thinking about it and `os.getenv(""XDG_RUNTIME_DIR"")` with appropriate fallback (in case of lack of such file or permission errors mentioned by you) to ~/.config/MusicBrainz/Picard/pipes (or sth similar in the picard ~/.config folder) seems like the best approach to me.', 'comment_created': datetime.datetime(2022, 6, 7, 7, 54, 55, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 890885451, 'comment_body': 'Okay, works for me\r\n', 'comment_created': datetime.datetime(2022, 6, 7, 7, 56, 40, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 890890234, 'comment_body': ""Okay, so I'll import `IS_WIN` constant and if `cygwin` needs to be supported, we will need to change the constant anyway"", 'comment_created': datetime.datetime(2022, 6, 7, 8, 1, 34, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 890899067, 'comment_body': 'New commit should handle it correctly', 'comment_created': datetime.datetime(2022, 6, 7, 8, 8, 32, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 890917112, 'comment_body': ""> @phw is there any reason to not match `cygwin` in `IS_WIN` definition?\r\n\r\nThere might be, that needs to be investigated per use. As cygwin provides a Unix like environment on Windows it is somewhere in between being Windows and being Unix and not everything might work the same (e.g. file paths) and not every `IS_WIN` usage might apply.\r\n\r\nIn general this is something not many have probably tried so far. I haven't seen any issue reports specific to cygwin. That either means things work well enough or not enough people have tried it yet :)"", 'comment_created': datetime.datetime(2022, 6, 7, 8, 16, 49, tzinfo=datetime.timezone.utc), 'commenter': 'phw', 'type': 'User'}, {'comment_id': 890922372, 'comment_body': 'Why was this change needed?', 'comment_created': datetime.datetime(2022, 6, 7, 8, 21, 50, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 890948824, 'comment_body': ""It's not needed for pipes to work but I thought it's a fine opportunity to refactor the `Tagger` class (especially its arguments structure and the constructor) and the start process in general.\r\n\r\n`unparsed_args` were used only in `Tagger` constructor (but were unused in the class), so I think such change makes the code more clean "", 'comment_created': datetime.datetime(2022, 6, 7, 8, 46, 34, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 890973699, 'comment_body': ""We usually try to keep such unrelated changes outside feature PRs, so for now I'd prefer those changes to be left out."", 'comment_created': datetime.datetime(2022, 6, 7, 9, 10, 54, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 891148479, 'comment_body': ""> So my idea is to:\r\n> \r\n>     1. create sth like `self.permission_error_happened` in except block\r\n> \r\n>     2. If the previously mentioned attribute is true, pass it to the Tagger's constructor the same way as if the `--force` flag was used.\r\n\r\nDone"", 'comment_created': datetime.datetime(2022, 6, 7, 12, 21, 46, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 891151475, 'comment_body': ""The discussion is resolved by `from picard.const.sys import IS_WIN` imo.\r\n\r\nAt least for now because win32 vs cygwin applies to the whole Picard app and its design, not just my PR. I'll just stick to the global way of detecting Windows"", 'comment_created': datetime.datetime(2022, 6, 7, 12, 24, 58, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 891152353, 'comment_body': ""Okay, I've undone my changes in the new commit."", 'comment_created': datetime.datetime(2022, 6, 7, 12, 25, 52, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 891172056, 'comment_body': 'This is unclear what this option forces, may be we could name it `--new-window` or `--new-instance` or anything more explicit than `--force`.\r\n\r\n@phw @rdswift any suggestion for a better name?', 'comment_created': datetime.datetime(2022, 6, 7, 12, 41, 40, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 891197881, 'comment_body': ""Option is a boolean, `start_code` is an enum value, so it would be better to use a condition and set a proper enum value instead.\r\n \r\nI have the feeling we can do better here, do we really need `start_code`? There are only 2 cases, run or quit, and the actual value isn't really used.\r\nWhether we run with a valid pipe or not is independent.\r\n\r\nJust a side note, for enums, use `IntEnum` class.\r\nAlso this code should move below, near `if not start_code:`.\r\n\r\n"", 'comment_created': datetime.datetime(2022, 6, 7, 13, 3, 45, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 891321170, 'comment_body': 'I like your idea of `--new-instance` more than `--new-window` because IMHO it more closely descibes the situation.  From my understanding, this new instance is stand-alone and does not listen for further commands.  Should this be clarified in the option name, something like `--stand-alone-instance` ?', 'comment_created': datetime.datetime(2022, 6, 7, 14, 39, 34, tzinfo=datetime.timezone.utc), 'commenter': 'rdswift', 'type': 'User'}, {'comment_id': 891359003, 'comment_body': '> --stand-alone-instance\r\n\r\nI like this one.', 'comment_created': datetime.datetime(2022, 6, 7, 15, 10, 13, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 891474104, 'comment_body': 'Me too, thanks', 'comment_created': datetime.datetime(2022, 6, 7, 16, 40, 40, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 891476258, 'comment_body': 'Any ideas for `-f` replacement or do we keep only the long version?\r\n', 'comment_created': datetime.datetime(2022, 6, 7, 16, 42, 36, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 891486443, 'comment_body': ""That's right and I've found a better solution in the next commit\r\n"", 'comment_created': datetime.datetime(2022, 6, 7, 16, 52, 30, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 891494979, 'comment_body': ""Perhaps `-s` for consistency?  I don't believe that short option is used."", 'comment_created': datetime.datetime(2022, 6, 7, 17, 1, 21, tzinfo=datetime.timezone.utc), 'commenter': 'rdswift', 'type': 'User'}, {'comment_id': 891495830, 'comment_body': ""When I thought about it for a bit longer, you're right. The short option would make it just worse."", 'comment_created': datetime.datetime(2022, 6, 7, 17, 2, 23, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 891498081, 'comment_body': 'All other options have a short name, may be we can do the same for this one. Not sure which one is better, `-s` ?', 'comment_created': datetime.datetime(2022, 6, 7, 17, 4, 39, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 891498845, 'comment_body': 'Alternatively (not sure which one is better):\r\n\r\n```suggestion\r\n        should_start = any({pipe_handler.permission_error_happened, pipe_handler.is_pipe_owner})\r\n```', 'comment_created': datetime.datetime(2022, 6, 7, 17, 5, 33, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 891501607, 'comment_body': '> In any case we need to handle macOS as a specific case. There something in `~/Library/Application Support/` seems to be the correct place, see https://developer.apple.com/library/archive/documentation/FileManagement/Conceptual/FileSystemProgrammingGuide/MacOSXDirectories/MacOSXDirectories.html\r\n\r\n@phw is there already a Picard-specific folder on Mac in this destination? If yes, how\'s it called? If no, how should I call it?\r\n\r\nBasically the code to add is (`self.__is_mac` is also imported from constants): \r\n\r\n```python\r\nelif self.__is_mac:\r\n    prefix = os.path.expanduser(f""~/Library/Application Support/{picard_folder_name}/"") \r\n```', 'comment_created': datetime.datetime(2022, 6, 7, 17, 8, 1, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 891505429, 'comment_body': 'I think `sys.exit()` should be called in all cases, may be with a specific code when `not should_start`.', 'comment_created': datetime.datetime(2022, 6, 7, 17, 11, 51, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 891507938, 'comment_body': 'IMHO, this property should be defined unconditionally.\r\n\r\n```python\r\n        self.__is_win: bool = IS_WIN\r\n        self.permission_error_happened: bool = False\r\n\r\n        # named pipe values needed by windows API\r\n        if self.__is_win:\r\n ```', 'comment_created': datetime.datetime(2022, 6, 7, 17, 14, 46, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 891517481, 'comment_body': 'I would make the default timeout a class constant, something like:\r\n\r\n```python\r\nclass Pipe:\r\n    ...\r\n   MESSAGE_TO_IGNORE:\r\n   TIMEOUT_SECS: float = 1.5\r\n   ...\r\n    def send_to_pipe(self, message: str, timeout_secs: Optional[float] = None) -> bool:\r\n        if timeout_secs is None:\r\n            timeout_secs = TIMEOUT_SECS\r\n...\r\n    def read_from_pipe(self, timeout_secs: Optional[float] = None) -> str:\r\n        if timeout_secs is None:\r\n            timeout_secs = TIMEOUT_SECS\r\n```\r\n', 'comment_created': datetime.datetime(2022, 6, 7, 17, 24, 8, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 891535395, 'comment_body': ""I'll go with just MusicBrainz/Picard/pipes, as mentioned previously and just let me know if I have to change it\r\n"", 'comment_created': datetime.datetime(2022, 6, 7, 17, 39, 5, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 891538208, 'comment_body': 'According to https://github.com/enthought/pywin32-ctypes/blob/80b06619fdf8635ea54a1668658f872f606cfe6d/win32ctypes/pywin32/pywintypes.py#L12-L27 attributes exist (`winerror`, `funcname`, `strerror`), it would be preferable to use them instead of indexes.\r\n', 'comment_created': datetime.datetime(2022, 6, 7, 17, 42, 24, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 891545943, 'comment_body': ""I've run a few benchmarks for 2 elements and `True in` seems to be way faster (and looks more human-readable)\r\n\r\nhttps://pastebin.com/WXx8EaD4"", 'comment_created': datetime.datetime(2022, 6, 7, 17, 50, 48, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 891548256, 'comment_body': ""I agree with rdswift that \r\n\r\n> I don't believe that short option is used.\r\n\r\nIf you insist on making it consistent with other arguments it's okay, but for me it's rather useless"", 'comment_created': datetime.datetime(2022, 6, 7, 17, 53, 13, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 891550731, 'comment_body': ""Actually, yeah, can't think of any reason to disagree."", 'comment_created': datetime.datetime(2022, 6, 7, 17, 56, 3, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 891552462, 'comment_body': ""I don't think parent directories aren't created by `os.mkfifo()`, and those directories may not exist, so this needs to be handled."", 'comment_created': datetime.datetime(2022, 6, 7, 17, 58, 10, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 891554443, 'comment_body': 'Actually, I meant that the short option `-s` is not already taken for another option.  I agree with @zas that both the long and short options should be supported.', 'comment_created': datetime.datetime(2022, 6, 7, 17, 59, 28, tzinfo=datetime.timezone.utc), 'commenter': 'rdswift', 'type': 'User'}, {'comment_id': 891564166, 'comment_body': ""You're right. Non-existent paths raise `FileNotFoundError`"", 'comment_created': datetime.datetime(2022, 6, 7, 18, 10, 56, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 891574785, 'comment_body': 'Okay, works for me, there are 2 options:\r\n\r\n1) `sys.exit(0)` because it executed correctly.\r\n2) some custom free-to-use error code to let user know wheter there was already an instance running. \r\n\r\n2nd one is better imo, can someone think of an example of such code? I tried finding it out myself but [PyQT5.QtWidgets.QApplication docs](https://www.riverbankcomputing.com/static/Docs/PyQt5/api/qtwidgets/qapplication.html#) are marked TODO...', 'comment_created': datetime.datetime(2022, 6, 7, 18, 23, 21, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 891590046, 'comment_body': ""Made it 30403, shouldn't collide with anything else. But I'll leave resolving it to you, maybe someone'll come up with a better idea"", 'comment_created': datetime.datetime(2022, 6, 7, 18, 39, 50, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 891594677, 'comment_body': 'Should work fine after latest commits.', 'comment_created': datetime.datetime(2022, 6, 7, 18, 45, 50, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 891617723, 'comment_body': 'You can use `os.makedirs()`, see https://docs.python.org/3/library/os.html#os.makedirs', 'comment_created': datetime.datetime(2022, 6, 7, 19, 10, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 891625063, 'comment_body': 'done', 'comment_created': datetime.datetime(2022, 6, 7, 19, 19, 36, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 891662470, 'comment_body': ""Blank line added, it's better to remove it from the draft PR."", 'comment_created': datetime.datetime(2022, 6, 7, 20, 4, 51, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 891662557, 'comment_body': ""Blank line added, it's better to remove it from the draft PR."", 'comment_created': datetime.datetime(2022, 6, 7, 20, 4, 58, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 891663443, 'comment_body': ""Also, ~/.config doesn't seem to be the best fallback option, see: \r\n\r\nhttps://tickets.metabrainz.org/browse/PICARD-2252"", 'comment_created': datetime.datetime(2022, 6, 7, 20, 6, 17, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 891663539, 'comment_body': '```suggestion\r\n        should_start = True in {pipe_handler.permission_error_happened, pipe_handler.is_pipe_owner}\r\n```\r\n\r\nUse a set instead of a list.', 'comment_created': datetime.datetime(2022, 6, 7, 20, 6, 26, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 891667355, 'comment_body': ""Instead of indenting the whole block, since we now exit in both cases, I suggest we use:\r\n\r\n```python\r\nif not should_start:\r\n    # just a custom exit code to show that picard instance wasn't created\r\n    sys.exit(30403)\r\n\r\ntry:\r\n    from PyQt5.QtDBus import QDBusConnection\r\n...\r\ntagger.startTimer(1000)\r\nsys.exit(tagger.run())\r\n```"", 'comment_created': datetime.datetime(2022, 6, 7, 20, 11, 17, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 891673209, 'comment_body': 'What about using our own exception here?\r\n\r\n```python\r\nclass PipeError(Exception):\r\n    pass\r\n\r\nclass PipeErrorInvalidResponse(PipeError):\r\n   pass\r\n\r\n\r\n...\r\n\r\n    raise PipeErrorInvalidResponse(f""INVALID RESPONSE: {response[1].decode(\'utf-8\')}"")\r\n```\r\n\r\nIt could be extended, and instead of raising FileNotFoundError everywhere we could raise specific exceptions.\r\n\r\n\r\n', 'comment_created': datetime.datetime(2022, 6, 7, 20, 18, 43, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 892014430, 'comment_body': 'Okay, looks fine to me', 'comment_created': datetime.datetime(2022, 6, 8, 7, 30, 9, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 892047150, 'comment_body': 'Instead we could try a conversion to a list, so any  iterable can be passed as `args`.\r\n\r\nAlso, it seems this list is only modified here, so it could be made a tuple instead.\r\n\r\nSomething like:\r\n\r\n```python\r\ntry:\r\n    args = tuple(args)\r\n    if not args:\r\n        args = (self.MESSAGE_TO_IGNORE, )\r\nexcept TypeError as exc:\r\n    raise PipeErrorBadArgs(exc)\r\n```\r\n\r\n\r\n', 'comment_created': datetime.datetime(2022, 6, 8, 8, 4, 19, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 892057580, 'comment_body': ""This will raise `FileExistsError` if the target already exists, it should be called with `exist_ok=True`.\r\nAlso the target isn't correct, as `self.path` is the fifo, so we need to extract the directory name.\r\n\r\nTo manipulate paths I would recommend we use [Pathlib](https://docs.python.org/3/library/pathlib.html) in this file."", 'comment_created': datetime.datetime(2022, 6, 8, 8, 14, 59, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 892126288, 'comment_body': 'We already have pipename separated from parent-dir in `self.__generate_filename`, so we can utilize it. How about simply store `prefix` value as `self.__pipe_parent_dir`:\r\n```python\r\n        if self.__is_win:\r\n            prefix = ""\\\\\\\\.\\\\pipe\\\\""\r\n        elif self.__is_mac:\r\n            prefix = os.path.expanduser(""~/Library/Application Support/MusicBrainz/Picard/pipes/"")\r\n        else:\r\n            prefix = f""{os.getenv(\'XDG_RUNTIME_DIR\')}/""\r\n            # just in case the $XDG_RUNTIME_DIR is not declared, fallback dir\r\n            if not prefix:\r\n                prefix = os.path.expanduser(""~/.config/MusicBrainz/Picard/pipes/"")```\r\n\r\n\r\n', 'comment_created': datetime.datetime(2022, 6, 8, 9, 21, 6, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 892139826, 'comment_body': 'Such conversion might raise misbehavior, like:\r\n\r\n```python\r\n>>> tuple(""hello"")\r\n(\'h\', \'e\', \'l\', \'l\', \'o\')\r\n```\r\n\r\nI\'d rather explicitly declare allowed types, like:\r\n\r\n```python\r\nif type(args) in [list, set]:\r\n    args = tuple(args)\r\n\r\nif isinstance(args, tuple):\r\n    if not args:\r\n        args = (self.MESSAGE_TO_IGNORE, )\r\nelse:\r\n    raise PipeErrorBadArgs()\r\n```', 'comment_created': datetime.datetime(2022, 6, 8, 9, 34, 33, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 892141823, 'comment_body': 'Making our own errors and storing error messages there is a great idea, thanks!\r\n', 'comment_created': datetime.datetime(2022, 6, 8, 9, 35, 54, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 892166472, 'comment_body': '> Such conversion might raise misbehavior, like:\r\n> \r\n> ```python\r\n> >>> tuple(""hello"")\r\n> (\'h\', \'e\', \'l\', \'l\', \'o\')\r\n> ```\r\n\r\n\r\nWell, that\'s Python, so I wouldn\'t bother with that.\r\nMost methods accepting iterables will work like this when passed a string, and it is somehow expected (as a string is an iterable).\r\n\r\nChecking types (btw, you have to check instances instead) should be kept rare, else you\'ll complexify the code a lot for not much gain.\r\n', 'comment_created': datetime.datetime(2022, 6, 8, 10, 0, 25, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 892212602, 'comment_body': ""Okay, check out the current commit how I've solved it."", 'comment_created': datetime.datetime(2022, 6, 8, 10, 53, 8, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 892213230, 'comment_body': ""I've created our custom errors but I'm open to any ideas to avoid the boilerplate there."", 'comment_created': datetime.datetime(2022, 6, 8, 10, 53, 54, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 892272934, 'comment_body': ""Instead of re-raising `PipeError `, you should just call parent `__init__()`:\r\n\r\n```python\r\ndef __init__(self):\r\n    super().__init__(self.MESSAGE)\r\n```\r\n\r\nThat's the usual approach."", 'comment_created': datetime.datetime(2022, 6, 8, 12, 2, 54, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 892275078, 'comment_body': 'If you really want to handle this `str` case (which I advised against in my previous comment), you should use `isinstance()` because one can pass a class inheriting from `str`.\r\n\r\n@phw what do you think about this?', 'comment_created': datetime.datetime(2022, 6, 8, 12, 5, 29, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 892281336, 'comment_body': 'Instead of passing `args`, just use the original exception message.\r\n\r\n```python\r\n\r\nclass PipeErrorInvalidArgs(PipeError):\r\n    MESSAGE = ""ERROR: Pipe() args argument has to be iterable""\r\n\r\n    def __init__(self, msg):\r\n        super().__init__(f""{self.MESSAGE}: {msg}."")\r\n\r\n...\r\nexcept TypeError as exc:\r\n    raise PipeErrorInvalidArgs(exc) from None\r\n\r\n```', 'comment_created': datetime.datetime(2022, 6, 8, 12, 12, 44, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 892290031, 'comment_body': 'To avoid ""During handling of the above exception, another exception occurred:"" extra message, you need to use `from  None`.\r\n\r\n', 'comment_created': datetime.datetime(2022, 6, 8, 12, 22, 8, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 892293105, 'comment_body': 'A shorter way to write this:\r\n\r\n```python\r\nreturn response or Pipe.NO_RESPONSE_MESSAGE\r\n```', 'comment_created': datetime.datetime(2022, 6, 8, 12, 25, 16, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 892543129, 'comment_body': 'Imo trying to use `Pipe(n, v, ""some_message"")` is an intuitive way of trying to send a single message, so I\'d like having `isinstance(args, str)` kept.', 'comment_created': datetime.datetime(2022, 6, 8, 15, 37, 31, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 892754819, 'comment_body': 'Picard does not yet create a folder in `~/Library/Application Support/` . It does something in `~/Library/Application Support/Preferences` I think, but that\'s technically not even correct because macOS expects plist files there. But it\'s a mess really, we need to redo this and place things (config, cache, plugins) in proper location per platform. But it\'s a bit ugly thing to handle, because of the testing needed on different plaforms and code needed to handle old locations and data migration. So I\'d like to see this happen for Picard 3.\r\n\r\nAnyway, for the pipe we should start doing something correct. According to the Apple docs the folder name inside ""Application Support"" should be the app identifier, that would be ""org.musicbrainz.Picard"" , there is a constant `PICARD_APP_ID` for this.\r\n\r\nRegarding `~/.config`: The user not having permission to access their own config folder should be considered a misconfiguration. It should still be handled better for the config file. But for the pipe I think we can use it as a fallback and we need to handle the case of not being able to create the pipe anyway (falling back to new instance mode).', 'comment_created': datetime.datetime(2022, 6, 8, 18, 57, 55, tzinfo=datetime.timezone.utc), 'commenter': 'phw', 'type': 'User'}, {'comment_id': 892759109, 'comment_body': 'Just wanted to note that I like `-s`  and `--stand-alone-instance`', 'comment_created': datetime.datetime(2022, 6, 8, 19, 3, 4, tzinfo=datetime.timezone.utc), 'commenter': 'phw', 'type': 'User'}, {'comment_id': 892768820, 'comment_body': 'To ease testing, it might be a good idea to store those hardcoded paths in constants at module level.\r\n\r\n```python\r\nPIPE_WIN_DIR = ""\\\\\\\\.\\\\pipe\\\\""\r\nPIPE_MAC_DIR = os.path.expanduser(""~/Library/Application Support/MusicBrainz/Picard/pipes/"")\r\nPIPE_UNIX_DIR = os.getenv(\'XDG_RUNTIME_DIR\')\r\nPIPE_UNIX_FALLBACK_DIR = os.path.expanduser(""~/.config/MusicBrainz/Picard/pipes/"")\r\n```\r\n\r\nWhat do you think?', 'comment_created': datetime.datetime(2022, 6, 8, 19, 14, 52, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 892769718, 'comment_body': ""It's incorrect to append `/` here, if `XDG_RUNTIME_DIR` is empty, `self.__pipe_parent_dir` will be set to `/`..."", 'comment_created': datetime.datetime(2022, 6, 8, 19, 16, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 892772599, 'comment_body': ""You can't build paths this way. Either use [os.path.join()](https://docs.python.org/3/library/os.path.html#os.path.join) or [PurePath.joinpath()](https://docs.python.org/3/library/pathlib.html#pathlib.PurePath.joinpath)"", 'comment_created': datetime.datetime(2022, 6, 8, 19, 19, 48, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 892780239, 'comment_body': 'Then instead of passing an iterable, use positional arguments.\r\n\r\n```python\r\ndef __init__(self, app_name: str, app_version: str, *args):\r\n```\r\n\r\nSo you can write:\r\n\r\n```python\r\nPipe(n, v, ""message1"", ""message2"", ""messageN"")\r\n```\r\n\r\nOr:\r\n\r\n```python\r\na_list = [ ""message1"", ""message2"", ""messageN""]\r\nPipe(n, v, *a_list)\r\n```\r\n\r\nIt all depends on the most common case.', 'comment_created': datetime.datetime(2022, 6, 8, 19, 29, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 892787055, 'comment_body': ""You don't need `try`/`except FileNotFoundError:`, as `os.makedir()` will take care of creating dirs if needed:\r\n\r\n```python\r\nos.makedirs(self.__pipe_parent_dir, exist_ok=True)\r\nos.mkfifo(self.path)"", 'comment_created': datetime.datetime(2022, 6, 8, 19, 36, 30, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 892790454, 'comment_body': ""Using a boolean here isn't that great, the actual error message isn't preserved (and it might be useful to the user).\r\nWhat about raising an exception instead ?\r\n\r\nSopmething like:\r\n\r\n```python\r\nexcept PermissionError as exc:\r\n   raise PipePermissionError(exc) from None\r\n```\r\n\r\nAnd in tagger code:\r\n\r\n```python\r\ntry:\r\n    pipe_handler = pipe.Pipe(app_name=PICARD_APP_NAME, app_version=PICARD_FANCY_VERSION_STR, args=picard_args.FILE)\r\n    should_start = bool(pipe_handler.is_pipe_owner}\r\nexcept PipePermissionError as err:\r\n    log.error(err)\r\n    pipe_handler = None\r\n    should_start = True\r\n```\r\n\r\n"", 'comment_created': datetime.datetime(2022, 6, 8, 19, 40, 54, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 893806684, 'comment_body': 'agreed, good idea', 'comment_created': datetime.datetime(2022, 6, 9, 17, 56, 45, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 893808073, 'comment_body': 'Okay for me, a log would be useful in such case.', 'comment_created': datetime.datetime(2022, 6, 9, 17, 58, 31, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 893816106, 'comment_body': 'Also, I\'ll name it `PipeErrorNoPermission` to make it consistent with other errors, i.e. `f""PipeError{some_description}""`.\r\n\r\nAlso I moved `self.is_pipe_owner` to the `try` block, because it makes no sense to own a non-existent pipe', 'comment_created': datetime.datetime(2022, 6, 9, 18, 5, 8, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 893818507, 'comment_body': 'btw, why do you call `bool()` here: `should_start = bool(pipe_handler.is_pipe_owner)`? `pipe_handler.is_pipe_owner` can  be only a boolean.', 'comment_created': datetime.datetime(2022, 6, 9, 18, 8, 3, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 893830815, 'comment_body': ""Well, I'll drop the str handling them. The code would become overcomplicated for case where we just pass a list/tuple of arguments."", 'comment_created': datetime.datetime(2022, 6, 9, 18, 24, 2, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 893888669, 'comment_body': ""> btw, why do you call `bool()` here: `should_start = bool(pipe_handler.is_pipe_owner)`? `pipe_handler.is_pipe_owner` can be only a boolean.\r\n\r\nThen it's useless ;)"", 'comment_created': datetime.datetime(2022, 6, 9, 19, 37, 11, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 894236280, 'comment_body': ""Sorry, I missed this comment yesterday, now we're using `PICARD_APP_ID` on Mac :)"", 'comment_created': datetime.datetime(2022, 6, 10, 7, 32, 58, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 894546865, 'comment_body': 'What about doing something like:\r\n\r\n```python\r\nclass PipeError(Exception):\r\n    MESSAGE = None\r\n\r\n    def __init__(self, *messages):\r\n        if self.MESSAGE:\r\n            self.messages = (self.MESSAGE, ) + tuple(messages)\r\n        else:\r\n            self.messages = tuple(messages)\r\n\r\n    def __str__(self):\r\n        messages_str = ""\\n  "".join(str(m) for m in self.messages)\r\n        if not messages_str:\r\n            messages_str = ""unknown""\r\n        return f""ERROR: {messages_str}""\r\n\r\n\r\nclass PipeErrorInvalidArgs(PipeError):\r\n    MESSAGE = ""Pipe() args argument has to be iterable""\r\n\r\n```\r\n\r\nSo following code:\r\n\r\n```python\r\ntry:\r\n    raise PipeError()\r\nexcept PipeError as exc:\r\n    print(exc)\r\n\r\ntry:\r\n    raise PipeError(""errmsg"")\r\nexcept PipeError as exc:\r\n    print(exc)\r\n\r\ntry:\r\n    raise PipeError(""errmsg1"", ""errmsg2"", 3, 4)\r\nexcept PipeError as exc:\r\n    print(exc)\r\n    print(exc.messages)\r\n\r\n\r\ntry:\r\n    raise PipeErrorInvalidArgs(""extramsg"")\r\nexcept PipeError as exc:\r\n    print(exc)\r\n\r\n```\r\n\r\nWould output:\r\n\r\n```\r\nERROR: unknown\r\nERROR: errmsg\r\nERROR: errmsg1\r\n  errmsg2\r\n  3\r\n  4\r\n(\'errmsg1\', \'errmsg2\', 3, 4)\r\nERROR: Pipe() args argument has to be iterable\r\n  extramsg\r\n```\r\n\r\nIt would reduce code redundancy and unify error messages.', 'comment_created': datetime.datetime(2022, 6, 10, 13, 45, 47, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 894559814, 'comment_body': 'Since `__app_name` and `__app_version` are only used by  `__generate_filename()`, may be just pass `app_name` and `app_version` to it (making this replacement in it too) and drop those.', 'comment_created': datetime.datetime(2022, 6, 10, 13, 54, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 894656595, 'comment_body': ""That's what I also considered, I'll do it then."", 'comment_created': datetime.datetime(2022, 6, 10, 15, 31, 54, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 894662864, 'comment_body': ""That's exactly what I meant by asking about limiting the boilerplate, thanks!"", 'comment_created': datetime.datetime(2022, 6, 10, 15, 39, 9, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 894674912, 'comment_body': 'I think we should move this to `if self.__is_win` branch in `__generate_filename()`', 'comment_created': datetime.datetime(2022, 6, 10, 15, 52, 34, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 894675751, 'comment_body': 'With new code, ""ERROR: "" part isn\'t needed anymore (it is added in `PipeError.__str__()`', 'comment_created': datetime.datetime(2022, 6, 10, 15, 53, 39, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 894677693, 'comment_body': 'fair point\r\n', 'comment_created': datetime.datetime(2022, 6, 10, 15, 56, 2, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 894747970, 'comment_body': 'Please unify messages, removing trailing `\\n`, `:` and perhaps also `.`.', 'comment_created': datetime.datetime(2022, 6, 10, 17, 16, 23, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 897047784, 'comment_body': '`m` -> `message` ?', 'comment_created': datetime.datetime(2022, 6, 14, 16, 33, 33, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 897047851, 'comment_body': ""Since this sequence doesn't change, it would be better to define it as a set outside those loops."", 'comment_created': datetime.datetime(2022, 6, 14, 16, 33, 37, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 897051790, 'comment_body': ""Why not iterating over list elements directly?\r\n\r\n```python\r\nfor messages in to_send:\r\n    __pool = concurrent.futures.ThreadPoolExecutor()\r\n    plistener = __pool.submit(pipe_listener, pipe_listener_handler, END_OF_SEQUENCE)\r\n    __pool.submit(pipe_writer, pipe_writer_handler, messages, END_OF_SEQUENCE)\r\n    self.assertEqual(plistener.result(), messages)\r\n```\r\n\r\nThis way you don't have to use `len()` and `range()`"", 'comment_created': datetime.datetime(2022, 6, 14, 16, 38, 3, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 897052324, 'comment_body': ""Since those aren't modified, I would just use tuples instead of lists."", 'comment_created': datetime.datetime(2022, 6, 14, 16, 38, 36, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 897056228, 'comment_body': 'okay, can do', 'comment_created': datetime.datetime(2022, 6, 14, 16, 42, 35, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 897344149, 'comment_body': 'Just a minor thing regarding indentation, we usually separate each element like this:\r\n\r\n```python\r\nto_send = (\r\n    (""it"", ""tests"", ""picard"", ""pipe""),\r\n    (""test"", ""number"", ""two""),\r\n    (""my_music_file.mp3"",),\r\n)\r\n```\r\n\r\nNote the comma after the last element.\r\nIt helps with diffs, adding, modifying, removing and element in the sequence doesn\'t affect others lines, so it makes patches easier to read and to merge/revert.\r\n\r\nApart that, it looks good now, good job.', 'comment_created': datetime.datetime(2022, 6, 14, 21, 38, 41, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 897354541, 'comment_body': 'Actually it would be preferable to not log 2 lines. `\\n` isn\'t the line separator on all systems (one can use `os.sep` or the like for that). We usually try to log things on one line, it makes search/grep easier (though there are cases where multiple lines logging is useful).\r\n\r\nAlso no need to preformat strings, `log.*()` supports `%` notation and arguments.\r\nWe usually use `%r` for paths (to prevent any encoding issue, `%s` could lead to an error in some cases if the path cannot be converted to string for some reason).\r\n\r\n```python\r\nif self.PIPE_UNIX_DIR:\r\n    self.__pipe_parent_dir = self.PIPE_UNIX_DIR\r\n    log.debug(""Using pipe path: %r"", self.__pipe_parent_dir)\r\nelse:\r\n    self.__pipe_parent_dir = self.PIPE_UNIX_FALLBACK_DIR\r\n    log.debug(""Using fallback pipe path: %r"", self.__pipe_parent_dir)\r\n```\r\n    \r\nSorry for nitpicking, just trying to give insights about Picard coding style.', 'comment_created': datetime.datetime(2022, 6, 14, 21, 56, 20, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 897595982, 'comment_body': ""Okay, no worries, consistency is important.\r\n\r\nTho when I think about it, I'll log a warning when we switch to fallback, because it's rather uncommon behavior.\r\n\r\nIf the main location becomes available while Picard instance is already running in pipe fallback mode, it gets ignored, so it deserves either warning or handling in `__init__` (send to both filepaths). Warn seems preferable to me."", 'comment_created': datetime.datetime(2022, 6, 15, 6, 48, 32, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 897597169, 'comment_body': 'Reasonable', 'comment_created': datetime.datetime(2022, 6, 15, 6, 50, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 898201512, 'comment_body': 'Instead you can run different tests for each platform.\r\nSee, for example, https://github.com/metabrainz/picard/blob/3b26fe8c425743083a96f9a045c388bafb9ccd96/test/test_file.py#L291\r\n\r\nSomething like:\r\n\r\n```python\r\n@unittest.skipUnless(IS_WIN, ""windows test"")\r\ndef test_filename_generation_win(self):\r\n    ...\r\n\r\n@unittest.skipUnless(IS_MACOS, ""macos test"")\r\ndef test_filename_generation_macos(self):\r\n    ...\r\n\r\n@unittest.skipUnless(not IS_MACOS and not IS_WIN, ""non-macos/win test"")\r\ndef test_filename_generation(self):\r\n    ...\r\n\r\n```\r\n\r\nCheck other test files, there are various places where we do that.\r\nYou can move common code to a common method to avoid code duplication.\r\n', 'comment_created': datetime.datetime(2022, 6, 15, 16, 43, 2, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 898326829, 'comment_body': ""Okay, I've created 3 functions with decorators as suggested. If it works now, I'll take care of the boilerplate somehow"", 'comment_created': datetime.datetime(2022, 6, 15, 19, 14, 55, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 898368876, 'comment_body': ""The issue with tests is that paths defined in https://github.com/metabrainz/picard/blob/5f27781635610c8564da1c2ad4de3dbb6571ec3d/picard/util/pipe.py#L94-L97 aren't all defined in the context of tests.\r\nIn particular, [`os.path.expanduser()`](https://docs.python.org/3/library/os.path.html#os.path.expanduser) expects `$HOME` to be defined (it depends on platforms).\r\n\r\n```\r\n>>> os.environ['HOME']\r\n'/home/zas'\r\n>>> os.path.expanduser('~')\r\n'/home/zas'\r\n>>> os.environ['HOME'] = '/tmp'\r\n>>> os.path.expanduser('~')\r\n'/tmp'\r\n```\r\n\r\nSame goes for `XDG_RUNTIME_DIR`.\r\n\r\nYou need to create a temporary dir for tests, and define proper environment variables."", 'comment_created': datetime.datetime(2022, 6, 15, 20, 1, 12, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 898870021, 'comment_body': ""`os.getenv()` doesn't require its args to be defined, so we can keep it that way. It'll be just `None` and current checks are okay.\r\n\r\nBut we should move `os.path.expanduser()` to the filename generation part"", 'comment_created': datetime.datetime(2022, 6, 16, 9, 8, 46, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 898876206, 'comment_body': '`os.environ.get()` allows to set what should be returned when no such variable was found and this should do: to replace `$HOME` with `.`', 'comment_created': datetime.datetime(2022, 6, 16, 9, 15, 29, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 898883459, 'comment_body': 'Okay, `.` raises permissionerror. Should I replace it with `/tmp/test_user/` or what?', 'comment_created': datetime.datetime(2022, 6, 16, 9, 23, 31, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 898885855, 'comment_body': 'TypeError can be solved this way, so the only concern is the test dir\r\n\r\n```python\r\nUNIX_PATHS = {\r\n    join(handler.PIPE_UNIX_FALLBACK_DIR, self.SUFFIX)\r\n}\r\n# None guard\r\nif handler.PIPE_UNIX_DIR:\r\n    UNIX_PATHS.add(handler.PIPE_UNIX_DIR)\r\n```', 'comment_created': datetime.datetime(2022, 6, 16, 9, 26, 11, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 898885869, 'comment_body': ""Defaulting to `.` might not be a good idea, as the code may create subdirs in the directory the program was started from.\r\n\r\nSystem temporary directory would be a better place (`/tmp` on Linux systems).\r\n\r\n@phw what's your take on this?\r\n\r\n"", 'comment_created': datetime.datetime(2022, 6, 16, 9, 26, 12, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 898892612, 'comment_body': ""Imo `/tmp` is a good fallback. A user without `$HOME` and `$XDG_RUNTIME_DIR` is highly unlikely to be using Picard. \r\n\r\nCodacy will raise issues if we'll keep using `/tmp` tho"", 'comment_created': datetime.datetime(2022, 6, 16, 9, 33, 35, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 900315011, 'comment_body': ""Let's set this as a constant to make it more readable:\r\n\r\n```python\r\nsys.exit(EXIT_NO_NEW_INSTANCE)\r\n```\r\n\r\nor such."", 'comment_created': datetime.datetime(2022, 6, 17, 16, 40, 31, tzinfo=datetime.timezone.utc), 'commenter': 'phw', 'type': 'User'}, {'comment_id': 900325145, 'comment_body': 'We could also define a tuple of dirs depending on the environment:\r\n\r\n```python\r\nif IS_WIN:\r\n     PIPE_DIRS = (""\\\\\\\\.\\\\pipe\\\\"",)\r\nelif IS_MACOS:\r\n    PIPE_DIRS = (os.path.join(""Library/Application Support/"", PICARD_APP_ID),)\r\nelse:\r\n    PIPE_DIRS = (os.getenv(\'XDG_RUNTIME_DIR\'), "".config/MusicBrainz/Picard/pipes/"")\r\n```\r\n\r\nThen in the code creating the pipes iterate over the directories. That makes it very convenient to add / change fallback dirs, and also removes the need to check different variable names. E.g. I think there is no real need to separate the code for macOS much, it should be all just the same Unix stuff.', 'comment_created': datetime.datetime(2022, 6, 17, 16, 47, 15, tzinfo=datetime.timezone.utc), 'commenter': 'phw', 'type': 'User'}, {'comment_id': 900329803, 'comment_body': 'I think the fallback directories should be handled here, not in `__generate_filename`. In `__generate_filename` it just checks if the variable `__pipe_parent_dir` has a value, but we should also move to the fallback if creation in the first dir fails (so we handle permission errors with the fallback as well).', 'comment_created': datetime.datetime(2022, 6, 17, 16, 50, 24, tzinfo=datetime.timezone.utc), 'commenter': 'phw', 'type': 'User'}, {'comment_id': 900334216, 'comment_body': ""Instead of creating the pool on the `send_to_pipe` call, shouldn't it rather have the pool setup on for the instance of class `Pipe`? Maybe even have the pool passed in to the constructor"", 'comment_created': datetime.datetime(2022, 6, 17, 16, 53, 29, tzinfo=datetime.timezone.utc), 'commenter': 'phw', 'type': 'User'}, {'comment_id': 900335417, 'comment_body': 'Same as in `send_to_pipe`. I even think we should use the global thread pool that gets created in tagger.py.', 'comment_created': datetime.datetime(2022, 6, 17, 16, 54, 19, tzinfo=datetime.timezone.utc), 'commenter': 'phw', 'type': 'User'}, {'comment_id': 901533885, 'comment_body': ""I'd rather keep a separate pool for the `Pipe`. Passing it as an argument from tagger would overcomplicate the code and make the `Pipe` class to dependent on external factors, but making it an attribute seems fine. (sorry for the absence, too)"", 'comment_created': datetime.datetime(2022, 6, 20, 10, 56, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 902266387, 'comment_body': 'How about the current solution?\r\n', 'comment_created': datetime.datetime(2022, 6, 21, 7, 43, 52, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 902324728, 'comment_body': '## \n\nStandard pseudo-random generators are not suitable for security/cryptographic purposes.\n\n[Show more details](https://github.com/metabrainz/picard/security/code-scanning/2138)', 'comment_created': datetime.datetime(2022, 6, 21, 8, 33, 49, tzinfo=datetime.timezone.utc), 'commenter': 'github-advanced-security[bot]', 'type': 'Bot'}, {'comment_id': 902547093, 'comment_body': 'Did you change end of lines??', 'comment_created': datetime.datetime(2022, 6, 21, 12, 18, 24, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 902549770, 'comment_body': ""Nope, I'm really clueless why such a thing happened"", 'comment_created': datetime.datetime(2022, 6, 21, 12, 21, 19, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 902601790, 'comment_body': ""> Nope, I'm really clueless why such a thing happened\r\n\r\nYou changed all end of line characters from Unix to Windows style.\r\nPlease revert, rebase (removed incorrect commit completely)  and commit a clean patch.\r\n\r\nTo see end of line characters you can use:\r\n\r\n```\r\ngit show 86230b397 | cat -v\r\n```\r\n"", 'comment_created': datetime.datetime(2022, 6, 21, 13, 12, 17, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 902739490, 'comment_body': ""Ok so before I revert my changes, how should I disable Codacy warning about randint?\r\n\r\n`# pylint: disable=B311` doesn't seem to work\r\n"", 'comment_created': datetime.datetime(2022, 6, 21, 15, 4, 54, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 902766012, 'comment_body': ""`# pylint: disable=unexpected-keyword-arg` should work in theory. If not try with `#noqa: B311`, but I think that's not honored by pylint."", 'comment_created': datetime.datetime(2022, 6, 21, 15, 27, 58, tzinfo=datetime.timezone.utc), 'commenter': 'phw', 'type': 'User'}, {'comment_id': 902768314, 'comment_body': ""> `# pylint: disable=unexpected-keyword-arg` should work in theory. If not try with `#noqa: B311`, but I think that's not honored by pylint.\r\n\r\nI'm talking about using pseudo-random numbers warning, not the previous error."", 'comment_created': datetime.datetime(2022, 6, 21, 15, 29, 58, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 902808168, 'comment_body': ""Got it, it's bandit issue and `# nosec` should do."", 'comment_created': datetime.datetime(2022, 6, 21, 16, 6, 58, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 902840091, 'comment_body': ""I don't understand this line.\r\n\r\n```python\r\nif res == self.MESSAGE_TO_IGNORE:\r\n```\r\n\r\nShouldn't it be `r` instead of `res`?\r\n\t\r\n"", 'comment_created': datetime.datetime(2022, 6, 21, 16, 39, 13, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 902841414, 'comment_body': 'Instead of building a list, could we `yield` `r`?', 'comment_created': datetime.datetime(2022, 6, 21, 16, 40, 38, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 902841880, 'comment_body': ""Isn't there a non-hacky way?"", 'comment_created': datetime.datetime(2022, 6, 21, 16, 41, 9, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 902843865, 'comment_body': 'What if a filepath contains `\\n`?', 'comment_created': datetime.datetime(2022, 6, 21, 16, 43, 19, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 902850334, 'comment_body': 'File operations are meant to be safe, so neither timeouts nor killing the process manually works (we get error)', 'comment_created': datetime.datetime(2022, 6, 21, 16, 50, 11, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 902850929, 'comment_body': 'Rather uncommcon case, anyway, we have to agree on some separator', 'comment_created': datetime.datetime(2022, 6, 21, 16, 50, 54, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 902851258, 'comment_body': 'It should.', 'comment_created': datetime.datetime(2022, 6, 21, 16, 51, 14, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 902859016, 'comment_body': 'Look at this code:\r\n\r\n```python\r\n        if out:\r\n            return out\r\n\r\n        return [self.NO_RESPONSE_MESSAGE]\r\n```\r\n\r\nHow about the case where `out` is empty? We have to return NO_RESPONSE_MESSAGE.', 'comment_created': datetime.datetime(2022, 6, 21, 16, 59, 38, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 902865871, 'comment_body': 'In my next commit I\'ll refactor it to `AbstractPipe._MESSAGES_SEPARATOR: str = ""\\n\\n\\n\\t\\t\\n""`', 'comment_created': datetime.datetime(2022, 6, 21, 17, 7, 22, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 902870895, 'comment_body': ""I don't think that's a clean solution. You still have a separator that may occur in a filepath."", 'comment_created': datetime.datetime(2022, 6, 21, 17, 13, 13, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 902875620, 'comment_body': '> I don\'t think that\'s a clean solution.\r\n\r\nMe neither.\r\n\r\nBut as I\'ve said, we need some separator, because messages really can collide in pipes. Putting 2 filenames into a single path-string is much more probable than `""\\n\\n\\n\\t\\t\\n""` in some filename.\r\n\r\nI\'m open to suggestions but that\'s my best in that case for now.\r\n\r\n', 'comment_created': datetime.datetime(2022, 6, 21, 17, 18, 9, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 902992298, 'comment_body': 'I wonder if we could move to a binary protocol, converting ""messages"" to a sequence of bytes: X bytes for message type (normal or error, future usage), Y bytes for length of payload, Z bytes for payload.\r\n\r\nI see multiple advantages:\r\n- no need to escape or separate data (bytes Y)\r\n- it can be extended (bytes X)\r\n- payload can be anything (bytes Z + Y), bytes X can be used to give it a type\r\n- struct.pack() / unpack() on send/receive\r\n\r\nAs an example, a path could be sent as `(0, 73, b""path_73_bytes_long_path"")`, `(255, 0)` could be an error message, `(1, 7, b""command"") a specific command.\r\n\r\nMay be overkill, but it wouldn\'t require much changes to the current code I think.\r\n\r\nFor sure, assuming paths (especially on Unix) don\'t contain ""bad"" characters, and transmitting those with appended separator doesn\'t look a good idea to me.\r\n\r\nAnother approach would be to use `pickle` to (de)serialize objects.\r\n\r\n@phw what do you think?\r\n\r\n', 'comment_created': datetime.datetime(2022, 6, 21, 19, 29, 59, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 903000352, 'comment_body': ""I've found out that ['\\0' is forbidden in filenames on both Windows and Unix](https://stackoverflow.com/questions/54205087/how-can-i-create-a-file-with-null-bytes-in-the-filename) (`ValueError: embedded null byte`), so we can safely split messages without any need for such deep refactoring. How about that?\r\n\r\nAlso, `Pipe.MESSAGE_TO_IGNORE` should be a '\\0', so we can merge both constants into one"", 'comment_created': datetime.datetime(2022, 6, 21, 19, 40, 27, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 903353695, 'comment_body': 'If we split on `self.MESSAGE_TO_IGNORE`, in the loop below the test `r != self.MESSAGE_TO_IGNORE` is useless.', 'comment_created': datetime.datetime(2022, 6, 22, 7, 1, 57, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 903360046, 'comment_body': 'No need to rewrite `res`:\r\n\r\n```python\r\n                for r in res.split(self.MESSAGE_TO_IGNORE):\r\n```\r\n\t\r\n', 'comment_created': datetime.datetime(2022, 6, 22, 7, 6, 11, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 903369071, 'comment_body': 'In which cases can this happen?', 'comment_created': datetime.datetime(2022, 6, 22, 7, 15, 14, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 903401918, 'comment_body': '> In which cases can this happen?\r\n\r\nEdge-case guardian which means that either:\r\na) `PIPE_DIRS` is empty\r\nb) cannot build any path from strings there', 'comment_created': datetime.datetime(2022, 6, 22, 7, 47, 32, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 903545262, 'comment_body': '@skelly37 @zas I like this approach. Overall the use of platform specific classes has made the code much easier to understand and better separated.\r\n\r\nAny specific reason why `@abstractproperty` was not used here?\r\n\r\n```python\r\n    @abstractproperty\r\n    def readonly(self):\r\n        return self.__x\r\n```\r\n', 'comment_created': datetime.datetime(2022, 6, 22, 10, 6, 44, tzinfo=datetime.timezone.utc), 'commenter': 'phw', 'type': 'User'}, {'comment_id': 903550694, 'comment_body': 'I think  `\\0` works as a separator. As long as we have only paths to transfer this is especially easy. If we start getting different messages we need to introduce some message identifier.\r\n\r\nA simple binary format like @zas proposed would work. Or if we really just expect text to be transferred the null termination maybe still works, so only `(0, b""path_73_bytes_long_path"", b""\\0"")`.\r\n\r\nDo we expect to need the type? If yes maybe introduce it already but only define a single type path = 0', 'comment_created': datetime.datetime(2022, 6, 22, 10, 12, 31, tzinfo=datetime.timezone.utc), 'commenter': 'phw', 'type': 'User'}, {'comment_id': 903606110, 'comment_body': '`@abstractproperty` is deprecated since 3.3\r\nSee https://docs.python.org/3/library/abc.html#abc.abstractproperty', 'comment_created': datetime.datetime(2022, 6, 22, 11, 12, 23, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 903676027, 'comment_body': 'It would be useful to log the actual exception message here, as a warning (or error?).\r\n\r\n```python\r\nexcept PermissionError as exc:\r\n    log.warning(""Couldn\'t create pipe: %r (%s)"", self.path, exc)\r\n```', 'comment_created': datetime.datetime(2022, 6, 22, 12, 24, 17, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 903686251, 'comment_body': 'I would rewrite it to use a list comprehension, and making `out` more local.\r\n\r\n```python\r\n        reader = self.__thread_pool.submit(self._reader)\r\n\r\n        try:\r\n            res = reader.result(timeout=timeout_secs)\r\n            if res:\r\n                out = [r for r in res.split(self.MESSAGE_TO_IGNORE) if r]\r\n                if out:\r\n                    return out\r\n        except concurrent.futures._base.TimeoutError:\r\n            # hacky way to kill the file-opening loop\r\n            self.send_to_pipe(self.MESSAGE_TO_IGNORE)\r\n\r\n        return [self.NO_RESPONSE_MESSAGE]\r\n```', 'comment_created': datetime.datetime(2022, 6, 22, 12, 34, 45, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 907064868, 'comment_body': ""This looks very weird to me, returning a `set` means:\r\n\r\n- identical messages are reduced to one\r\n- order of messages isn't preserved\r\n\r\nThough not sure I'm misunderstanding this code, can you explain?\r\n\r\nBTW, instead of `set([comprehension])` one can write `{comprehension}`"", 'comment_created': datetime.datetime(2022, 6, 27, 7, 34, 4, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 907072452, 'comment_body': 'Having `assertEqual()` in a try block means in some case the test will pass without even checking correct behavior.\r\n\r\nIf we expect an exception, then we need to check it happens.', 'comment_created': datetime.datetime(2022, 6, 27, 7, 42, 42, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 907073350, 'comment_body': 'Are those repetitions really needed?', 'comment_created': datetime.datetime(2022, 6, 27, 7, 43, 48, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 907073527, 'comment_body': 'For extra debug, if you really want to keep that, define a boolean constant (like `DEBUG_PIPE`) and use tests:\r\n\r\n```python\r\nif DEBUG_PIPE:\r\n    log.debug(""sent successfully: %r"", message)\r\n```\r\n\r\nAs is, that\'s far too much debug output.', 'comment_created': datetime.datetime(2022, 6, 27, 7, 43, 58, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 907077003, 'comment_body': 'When does `""""` occur?\r\n\r\nIn `read_from_pipe()` `if r` should prevent it to happen.', 'comment_created': datetime.datetime(2022, 6, 27, 7, 48, 1, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 907088030, 'comment_body': 'So, basically, `plistener.result(timeout=6.5)` should be placed in a try-except block to handle timeout errors, while assertequal should be in the normal loop, right?', 'comment_created': datetime.datetime(2022, 6, 27, 7, 59, 58, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 907090603, 'comment_body': ""The most nested loop is indeed unneeded. The pipe should sent/receive the data at the first try.\r\n\r\nIterating over `to_send` is needed from obvious reasons.\r\n\r\nRepeting the case allows us to catch some edge cases that were difficult to find on GithubActions, so I'd keep this 100."", 'comment_created': datetime.datetime(2022, 6, 27, 8, 2, 52, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 907091372, 'comment_body': ""That's true, it should be prevented."", 'comment_created': datetime.datetime(2022, 6, 27, 8, 3, 42, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 907093708, 'comment_body': ""The two points you've made was the actual reason I've used such solution. But if you're saying that users will care about the order of files or they want duplicates, I may rollback to list, no problem."", 'comment_created': datetime.datetime(2022, 6, 27, 8, 6, 24, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 907124796, 'comment_body': ""Yeah that's simply too much"", 'comment_created': datetime.datetime(2022, 6, 27, 8, 38, 16, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 907176310, 'comment_body': ""It isn't about files (which are a specific case, related to our usage), but the overall logic of a fifo pipe, one expects order to be preserved (as well as duplicates)."", 'comment_created': datetime.datetime(2022, 6, 27, 9, 29, 13, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 907177655, 'comment_body': 'Yes, the test should always end on an assertion (or be explicitly skipped). Sometimes an exception is expected, but in this case we still assert for it.', 'comment_created': datetime.datetime(2022, 6, 27, 9, 30, 30, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 908266637, 'comment_body': ""`log.*` methods aren't meant to be used in tests. This file is the only one using them.\r\n"", 'comment_created': datetime.datetime(2022, 6, 28, 9, 36, 33, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 911111632, 'comment_body': ""What's the purpose of `strip()` here?"", 'comment_created': datetime.datetime(2022, 6, 30, 14, 40, 5, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 911221845, 'comment_body': 'Seems like I forgot to remove it after some debugging process. Thanks for noticing, tests go fine locally with it removed. It may indeed result in an unexpected behavior.', 'comment_created': datetime.datetime(2022, 6, 30, 16, 20, 18, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 912673529, 'comment_body': 'One minor thing I found during testing: This should be `add_paths`  instead of `add_files`, so that calling picard with a directory path also gets processed properly.', 'comment_created': datetime.datetime(2022, 7, 4, 6, 45, 4, tzinfo=datetime.timezone.utc), 'commenter': 'phw', 'type': 'User'}, {'comment_id': 912757646, 'comment_body': 'Thanks!', 'comment_created': datetime.datetime(2022, 7, 4, 8, 31, 26, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 914492924, 'comment_body': 'The default `max_workers` value is likely much higher than our needs, it might be worth specifying it.\r\n\r\nhttps://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.ThreadPoolExecutor\r\n\r\n', 'comment_created': datetime.datetime(2022, 7, 6, 7, 15, 27, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 915482913, 'comment_body': ""I'm thinking about 6 of them. 2 per reader, 2 per sender (they need two workers for the sake of *hacky killing the job*) and 2 just in case.\r\n\r\n1 more than default value for 1 CPU, 28 less in the edge case"", 'comment_created': datetime.datetime(2022, 7, 7, 5, 51, 14, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 915916302, 'comment_body': ""Technically, even if these are provided the arguments will be ignored by an existing instance, won't they?  I mean they will trigger a new stand-alone instance.  The arguments that will be ignored by an existing instance are `-d`, `-M` and `-N`."", 'comment_created': datetime.datetime(2022, 7, 7, 14, 5, 27, tzinfo=datetime.timezone.utc), 'commenter': 'rdswift', 'type': 'User'}, {'comment_id': 915922582, 'comment_body': 'Is there a reason these aren\'t worded consistently?  Perhaps simply appending ""(opens a stand-alone instance)""?', 'comment_created': datetime.datetime(2022, 7, 7, 14, 11, 7, tzinfo=datetime.timezone.utc), 'commenter': 'rdswift', 'type': 'User'}, {'comment_id': 915961960, 'comment_body': ""Hm, right, how about replacing *an existing instance* with *the target instance*? Or maybe:\r\n\r\n*If a new instance won't be spawned, the other aguments will be ignored*"", 'comment_created': datetime.datetime(2022, 7, 7, 14, 45, 46, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 915962248, 'comment_body': 'Good idea!', 'comment_created': datetime.datetime(2022, 7, 7, 14, 46, 1, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 915976661, 'comment_body': 'That works, although it could be interpreted that the files / directories for processing will also be ignored.  Perhaps something like, ""*If a new instance won\'t be spawned, all arguments other than files and directories for processing will be ignored.*"" or ""*If a new instance won\'t be spawned, all user interface related arguments will be ignored.*""?', 'comment_created': datetime.datetime(2022, 7, 7, 14, 58, 29, tzinfo=datetime.timezone.utc), 'commenter': 'rdswift', 'type': 'User'}, {'comment_id': 916146870, 'comment_body': 'Good point, please check the newest commit', 'comment_created': datetime.datetime(2022, 7, 7, 18, 1, 7, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 916299730, 'comment_body': 'The wording looks fine to me.  One minor issue...  Should there be a space between the bullet indicator (-) and the text of the bullet?  For example:\r\n\r\n```\r\nIf a new instance will not be spawned:\r\n  - files/directories will be passed to the existing instance,\r\n  - the other arguments will be ignored.\r\n```\r\n\r\nrather than:\r\n\r\n```\r\nIf a new instance will not be spawned:\r\n  -files/directories will be passed to the existing instance,\r\n  -the other arguments will be ignored.\r\n```\r\n', 'comment_created': datetime.datetime(2022, 7, 7, 21, 37, 11, tzinfo=datetime.timezone.utc), 'commenter': 'rdswift', 'type': 'User'}, {'comment_id': 916500356, 'comment_body': 'Whatever, as long as they are consistent, imo', 'comment_created': datetime.datetime(2022, 7, 8, 6, 25, 58, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 916520374, 'comment_body': ""With space I'd say"", 'comment_created': datetime.datetime(2022, 7, 8, 7, 0, 56, tzinfo=datetime.timezone.utc), 'commenter': 'phw', 'type': 'User'}, {'comment_id': 916521177, 'comment_body': ""> With space I'd say\r\n\r\nYeah, it's already done"", 'comment_created': datetime.datetime(2022, 7, 8, 7, 2, 10, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}]","[{'commit_sha': '3687767cf6848f336830f0f823696b4c9abf4f7b', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72d843c52e81aaa75ae051d0235c48ef62ba4c90', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a715d332fffa0c9849b2e1ac7496992bf19a318e', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3ffd1ecd8bf9bbe77d417931dd9c911fee1e6a0', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0aba7621068b377c758236a57e09210cfad7881c', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6731bc6559c96c0d325ec65da6c2578c32e75843', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e64527a7816ec6ec7702df98e7c3422186489608', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd4871426759f88c9e943246c3cbbd45d4289af0', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f4de361ed8a42161603578f7e4420ee9d40c026', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e95b47d7bf71d9d1068667b9fbf481df999cf1d1', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dfba941125a8ee620f2331af214a861b83cfa0ea', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f24793df25deaf5639d698b6b69b2090919e4b72', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '612972385a12b5c11ad2de26a5a2c90ccd548e80', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd548acdfbd07913805caafa7a9522351d9daace', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e10d1a6d93b0c01b8173a64d4b0eb8e1d351abe5', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69b92d004ff3f727367da79f9caa292b2d587b69', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f401eece91c53d1076f167bd000bafcde8a0dc8', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc4e0ec63df281055abb9ef1fec93170a39fdd2e', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '52ebce866ae805f1bfdf65191a75664dd816416a', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af05a324f0bcce941ff352a16de9cbc9b25b33fc', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '904824e3dc71a75e4f9db90586371bac0786c29a', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f66e47b5a0f923976231bdc5a5336e43dcb9f4e8', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa8233bf1d536b3cf550339d63b433c1d4582359', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1d708cf5b0d0eedbe8dc91e9e5208fcff898987', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6782ddf0c55eccaeabb286bd8ef01f127be353a3', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83bbdb3e187d0a99d8e4e42f616737e32e330953', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd029a9d8240953bd611881bfa54120927bac336f', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f27781635610c8564da1c2ad4de3dbb6571ec3d', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2de7543f31772ff2a512f7855caa54dd2b8421ba', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ff83bb84db51a370759a2a098e28d71f21c5f03', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b83ce3f2d8e00d960fe9d641f82b45ffc86cd214', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b30c2e858a1af9c570a7df26fbc7136934ea21d', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f22d3c555d8c0d6a48310bc2ee1cd7cbd336c31', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e95abc22664e5dff5e346d2d0be69d6fb111c4eb', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c43a494838a536f98a5d1dcbcc024cab539b126', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e5312c95e1c0bea9e73f9f5a417359dc0252846', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f722b99fb120451b14a8176ac291def77162712', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b1d61a01818ef40d93f240d10e2dbd95d922fa22', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46c88fb5670785626af4c753f30833df89c02184', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc0e581b124859be5248736c14965d08f7dcfb58', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6cf45bf12b08907662236cf74fc2115f8124d387', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c0c5074297d7897a60933d3ce3a9f69ae9e795a2', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd66834a9fac2a57510d8fc9b7da7cbf6c164d312', 'committer_username': 'zas', 'committer_name': 'Laurent Monin', 'committer_email': None, 'commit_date': datetime.datetime(2009, 11, 10, 0, 41, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb2cb75d92e078a64af8328c50f1a8a380de2c51', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93a1249d8a86bafef440542f796ba96697800788', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8efeda161474f1810b30d568da5edf3674d3890e', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0286f3e4ad956dabb0f840a0abc5761883ac6779', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b762168cd4fc0614a7f8b936bd375d2c81b5447', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1333ee33a900df16a7267dfac5ec8e92cfc89b36', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb714d7cf6d2071e5fca2985d97d0195d9bdce6e', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '82585445ae003e54c3cdcc19a657edafee7903bf', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9af8002b16fdf59d8b4139e81485ff35e6f8af68', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8099f31da3bb930b68e07341be73811d2d049276', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4693adbce643c6710cd1bb1ce5b03e108e98b971', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f57b077e440a2df355618e97d96551ef9a88688', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'edb0e730c07d88ce34e21bf9218b1ffbf04447b9', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22a6d708bc815c8506dc226dd1d592a6ffbd6990', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f961bdc1d56fe2605e2b56b52ee881586f705da2', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d9921b153e759636825964aa3339f5d3371e246', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c8b1606c19f9040cc9a14f759c002f7c16ad016', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb993bdcff86ff9b5dbebcfcddba8fe482e10503', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b34e5e29870de8b3aa8ab98e707e52977b1d26d6', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c1194dcdbfea1cc1c17e128276f8a4e86a39563', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '152f176ecc507cd22956ff47b02f465d59169538', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0f26d0bceebf50af24474e3258b1874e3c1fba4', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc295688efdeac621e357a1fe9378203ba6bbd56', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9af0c9baad2266b44372d0f4a8cee62f1340fd71', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '141f0487f77fed3b00a4ee2488bbe5baf944f812', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '580ea23280eef26ad03fe76c6dbb0f6efd991f86', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf7b8db6b07665615489a005b8e347e194b427e8', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2763bc9d2e74a97c8c092c7e9d081a6c1e5ef09e', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c484252dc6dfa7378412f83d18dddaecd3b0411d', 'committer_username': 'zas', 'committer_name': 'Laurent Monin', 'committer_email': None, 'commit_date': datetime.datetime(2009, 11, 10, 0, 41, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40bffebc6c7713a595e5a1d734637156ff153432', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5820a5d49db82003a7987c921a52893b2884066', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0877331cab8c2a319c09060d84e3bd3c3164e7e3', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e70bccca4bc777b4359f1141fa22b8ce5c8ae61', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e72c9c17010e1239d44c975286d3d650c6b92c8b', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '187d231690eb1866074f35138dd812e2738d02f0', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}]",Kamil,76530971,skelly37@protonmail.com,User,,9,,23,20
1005659173,PICARD-2521: Cannot exit properly after removing the pipe file,"# Summary

<!--
    Update the checkbox with an [x] for the type of contribution you are making.
-->

* This is a…
  * [x] Bug fix
  * [ ] Feature addition
  * [ ] Refactoring
  * [ ] Minor / simple change (like a typo)
  * [ ] Other
* **Describe this change in 1-2 sentences**:

The single instance mode via named pipes got merged and works almost perfectly. Almost... because when the pipe file gets deleted (outside of the Picard, e.g. `rm`), Picard cannot exit properly and gets stuck during the exit function's call.

# Problem

* JIRA ticket (_optional_): PICARD-2521

# Solution

1) save the tagger's exit code
2) check whether the pipe file was removed unexpectedly (new `Pipe` attribute)
- if yes: `os._exit(exit_code)`
- if no: `sys.exit(exit_code)`


# Action

(https://github.com/metabrainz/picard/pull/2133) included since they're both about fixing the exit process, so they could be in a single PR
",True,2135,https://api.github.com/repos/metabrainz/picard/pulls/2135,https://github.com/metabrainz/picard/pull/2135,closed,16,5,2,6,2,5,0,0,[],2022-07-22 10:52:41+00:00,2022-07-22 19:16:57+00:00,30256.0,8:24:16,"[{'comment_id': 927573070, 'comment_body': 'I\'m a bit bothered by this ""solution"" because it causes the program to exit immediately, without flushing buffers for example.\r\n`exit()` is called from https://github.com/skelly37/picard/blob/5b453543c6ce3a93a84b995ccb9a0148305f67a0/picard/tagger.py#L1025 but we can see we expect some extra code to run after its call.\r\n\r\nAlso we expect to return an exit code on exit. See https://github.com/skelly37/picard/blob/5b453543c6ce3a93a84b995ccb9a0148305f67a0/picard/tagger.py#L1150 and https://github.com/skelly37/picard/blob/5b453543c6ce3a93a84b995ccb9a0148305f67a0/picard/tagger.py#L443', 'comment_created': datetime.datetime(2022, 7, 22, 11, 46, 35, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 927610142, 'comment_body': 'True, I misread the code. The ""dirty"" exit should happen as rarely as possible. It\'s okay now imo.', 'comment_created': datetime.datetime(2022, 7, 22, 12, 38, 29, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 927615989, 'comment_body': '## \n\nUnused TimeoutError imported from concurrent.futures._base\n\n[Show more details](https://github.com/metabrainz/picard/security/code-scanning/2171)', 'comment_created': datetime.datetime(2022, 7, 22, 12, 46, tzinfo=datetime.timezone.utc), 'commenter': 'github-advanced-security[bot]', 'type': 'Bot'}, {'comment_id': 927616980, 'comment_body': '## \n\nUnused TimeoutError imported from concurrent.futures._base\n\n[Show more details](https://github.com/metabrainz/picard/security/code-scanning/2170)', 'comment_created': datetime.datetime(2022, 7, 22, 12, 47, 10, tzinfo=datetime.timezone.utc), 'commenter': 'github-advanced-security[bot]', 'type': 'Bot'}, {'comment_id': 927687216, 'comment_body': '## \n\nUnused TimeoutError imported from concurrent.futures._base (unused-import)\n\n[Show more details](https://github.com/metabrainz/picard/security/code-scanning/2169)', 'comment_created': datetime.datetime(2022, 7, 22, 14, 5, 23, tzinfo=datetime.timezone.utc), 'commenter': 'github-advanced-security[bot]', 'type': 'Bot'}]","[{'commit_sha': '5b453543c6ce3a93a84b995ccb9a0148305f67a0', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '841c14e825c1bc80a1ef571e13be2c7c9cb144f8', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '504d9d7d670ba849fca68995b2b4641025897c74', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c5643e64969fc30091894f8879ab07bb46486db', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b5aab43efa65b0bdbfb2fcdf1dc49ffc60a39a6', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb8ba8a7295cb30ef6bf053d188c254245f00305', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}]",Kamil,76530971,skelly37@protonmail.com,User,,9,,23,20
958804066,PICARD-2471: Restrict Picard to a single instance,"# Summary
* This is a…
  * [ ] Bug fix
  * [x] Feature addition
  * [ ] Refactoring
  * [ ] Minor / simple change (like a typo)
  * [ ] Other
* **Describe this change in 1-2 sentences**:

This is a draft where we can discuss [my GSoC project](https://summerofcode.withgoogle.com/programs/2022/projects/ItQ0NNLd) progress. Picard is going to work in single-instance mode thanks to named pipes

# Problem

Ticket description is clear enough so I'll just paste it here: 

When passing folders to Picard via command line (such as in Foobar), Picard will launch a new instance for each folder rather than loading them all in one instance. The ability to force it all into one instance would be helpful.

* JIRA ticket (_optional_): PICARD-2471



# Solution

I've created a cross-platform communication protocol for Picard instances, based on named pipes. Now, in this draft, you can see my progress in integrating it into the Picard app.


# TODO
* [x] Communication protocol works on all supported operating systems
* [x] Pipe can distinguish between app versions
* [x] If pipe is listened to, Picard sends all the arguments there and leaves without spawning an instance 
* [x] Picard accepts `-s`/`--stand-alone-instance` argument to create a forced, standalone instance, that doesn't listen to any pipe
* [x] Picard creates a ""pipe server"" thread that listens to any possible messages in the background and passes messages to file-adding methods
* [x] in tagger.py/main: picard_args.FILE args are converted to absolute paths before passing them to the existing instanec
* [x] Changes are tested
* [x] Changes are documented
* [x] Commits are properly organised
* [ ] Merge :)

# Notes
- Type annotations are my helpers, since I always use mypy while writing Python. When we will be merging into master, I can remove them if they are problematic for you
- Commit structure is also just a draft to be organised properly
- Because it's just a draft, I'll let you know when workflows will make sense.
",True,2116,https://api.github.com/repos/metabrainz/picard/pulls/2116,https://github.com/metabrainz/picard/pull/2116,closed,575,5,3,78,61,208,0,0,[],2022-06-06 08:16:47+00:00,2022-07-12 19:01:24+00:00,3149077.0,"36 days, 10:44:37","[{'comment_id': 890000573, 'comment_body': ""`args` shouldn't default to an empty list, see https://docs.quantifiedcode.com/python-anti-patterns/correctness/mutable_default_value_as_argument.html"", 'comment_created': datetime.datetime(2022, 6, 6, 9, 59, 44, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 890002741, 'comment_body': ""I'm not fond of overwriting `PLATFORM` here, also check https://github.com/metabrainz/picard/blob/b6665ce159a441b9d70d483e8f1befea8743e1e2/picard/const/sys.py#L26-L29 "", 'comment_created': datetime.datetime(2022, 6, 6, 10, 2, 49, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 890003645, 'comment_body': 'Use a set-once boolean instead of string comparison, platform is very unlikely to change during runtime', 'comment_created': datetime.datetime(2022, 6, 6, 10, 3, 58, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 890004391, 'comment_body': '`os.unlink()` may fail, we should handle exceptions', 'comment_created': datetime.datetime(2022, 6, 6, 10, 5, 6, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 890006050, 'comment_body': ""Temporary directory is usually set from environment, also I'm not sure that's the correct destination for an application-related pipe."", 'comment_created': datetime.datetime(2022, 6, 6, 10, 7, 40, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 890006973, 'comment_body': 'Those numerical values should be either constants (with explicit names) or a comment should be added to tell what they are.', 'comment_created': datetime.datetime(2022, 6, 6, 10, 9, 2, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 890014194, 'comment_body': '```python\r\n\r\nif IS_WIN:\r\n    sender_method = self.__win_sender\r\nelse:\r\n    sender_method = self.__unix_sender\r\n\r\nsender = __pool.submit(sender_method, message)\r\n```', 'comment_created': datetime.datetime(2022, 6, 6, 10, 19, 45, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 890014798, 'comment_body': '```while not response:``` is more pythonic.', 'comment_created': datetime.datetime(2022, 6, 6, 10, 20, 40, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 890015184, 'comment_body': '```if response:``` should be enough.', 'comment_created': datetime.datetime(2022, 6, 6, 10, 21, 18, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 890074245, 'comment_body': ""Do you have any ideas of exceptions that shouldn't stop the program execution or is the current commit ok?\r\n"", 'comment_created': datetime.datetime(2022, 6, 6, 11, 51, 56, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 890074798, 'comment_body': 'Created constants with links to docs just in case, hope it can do now\r\n', 'comment_created': datetime.datetime(2022, 6, 6, 11, 52, 48, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 890077789, 'comment_body': ""In Windows pipes aren't just files on disk like on Unix, so I'll keep discussing the latter one.\r\n\r\nI sometimes see apps using /tmp and IMO it's okay and keeps the logic as simple as possible (the OS deletes the file for us in some cases). But if you insist on changing it I think we could also try the [tempfile library](https://docs.python.org/3/library/tempfile.html)"", 'comment_created': datetime.datetime(2022, 6, 6, 11, 57, 20, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 890336466, 'comment_body': 'No need to initialize `sender` here, since it is set in following `if`/`else`.', 'comment_created': datetime.datetime(2022, 6, 6, 16, 42, 48, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 890337816, 'comment_body': 'You resolved this conversation without commenting, what I was suggesting here is to pass the method to call and avoid the repetition.', 'comment_created': datetime.datetime(2022, 6, 6, 16, 44, 20, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 890338966, 'comment_body': ""What's `64 * 1024` here? How was this value chosen?"", 'comment_created': datetime.datetime(2022, 6, 6, 16, 45, 51, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 890353275, 'comment_body': ""On *nix, the file should be created in user directory, not in /tmp, especially in this case, because the file path is built using the login name (which is imho a bad idea too).\r\n\r\nOn Linux systems I think we should use something like `~/.config/MusicBrainz/Picard/pipe_file_{self.__app_version}` (and drop the use of `os.login()`. Not sure if there's a better place than `.config` (that's not ideal, but `.cache` isn't better).\r\n\r\n@phw what's your take on this?\r\n\r\n"", 'comment_created': datetime.datetime(2022, 6, 6, 17, 3, 41, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 890353991, 'comment_body': 'Perhaps use constants as well for those error codes.', 'comment_created': datetime.datetime(2022, 6, 6, 17, 4, 39, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 890368301, 'comment_body': ""This approach isn't really pythonic, we should try to create the fifo, and if it fails, act accordingly. It would remove the need of `__pipe_exists()`.\r\nAlso when `self.send_to_pipe(arg)` fails, the fifo is first removed, then created again, but if we can't write to the fifo because of permissions for example, it is unlikely we can remove it / create it.\r\nIf we can't remove it, `mkfifo()` will raise an exception FileExistsError.\r\n\r\nIf the fifo isn't functional at all, which behavior do we expect?"", 'comment_created': datetime.datetime(2022, 6, 6, 17, 23, 57, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 890370768, 'comment_body': 'Is there a reason to not do the conversion to `str` in `__read_from_win_pipe()`?', 'comment_created': datetime.datetime(2022, 6, 6, 17, 26, 34, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 890375067, 'comment_body': ""Is there a reason to not use `with open(self.path, 'r') as fifo:` here ?\r\n\t\r\n"", 'comment_created': datetime.datetime(2022, 6, 6, 17, 31, 55, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 890387153, 'comment_body': 'Fair point, agreed.', 'comment_created': datetime.datetime(2022, 6, 6, 17, 47, 40, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 890388653, 'comment_body': 'Actually none, fixed.', 'comment_created': datetime.datetime(2022, 6, 6, 17, 49, 30, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 890389911, 'comment_body': 'None too, fixed', 'comment_created': datetime.datetime(2022, 6, 6, 17, 51, 6, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 890392030, 'comment_body': 'Great idea to avoid the boilerplate, gonna change it asap\r\n', 'comment_created': datetime.datetime(2022, 6, 6, 17, 53, 40, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 890413405, 'comment_body': ""Ok, they'll be in the same place with a reference article as well."", 'comment_created': datetime.datetime(2022, 6, 6, 18, 18, 23, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 890415361, 'comment_body': ""It's the buffer size. Actually, I'll put IN and OUT buffer values into one `__BUFFER_VALUE` and put it here as well."", 'comment_created': datetime.datetime(2022, 6, 6, 18, 21, 2, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 890425704, 'comment_body': ""I think we can do it the Windows way. Try to send and if nothing listens to the pipe, create it.\r\n\r\nAnd when it comes to the permissions: to deny write permissions to the pipe would be a user's conscious act, so I'll just go with catching PermissionError for such users."", 'comment_created': datetime.datetime(2022, 6, 6, 18, 31, 59, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 890452096, 'comment_body': 'And how this value was chosen? Well, I saw that almost all code snippets using the API are setting it to 65536. Should be big enough to handle any argv flawlessly, but is small enough not to break the OS. ', 'comment_created': datetime.datetime(2022, 6, 6, 19, 2, 51, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 890819982, 'comment_body': ""I agree to not use ` /tmp`, especially after what we had discovered recently with macOS removing untouched files from `/tmp`  every few days (PICARD-2459).\r\n\r\nNot sure about the best location, though. `~/.config`  seems wrong, and we already have these tasks to improve using the proper directory for some stored data.\r\n\r\nIMHO on Linux something under `~/.local`  would make sense. On my system pipewire uses `~/.local/state/pipewire` for some stuff, so maybe `~/.local/state/picard`  would be a possibility.\r\n\r\nBut it does not fit perfectly, according to [XDG Base Directory Specification](https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html)\r\n\r\n>  The $XDG_STATE_HOME contains state data that should persist between (application) restarts, but that is not important or portable enough to the user that it should be stored in $XDG_DATA_HOME. It may contain:\r\n>\r\n> - actions history (logs, history, recently used files, …)\r\n> - current state of the application that can be reused on a restart (view, layout, open files, undo history, …)\r\n\r\nA system wide service might place such pipes in `/var`, and Flatpak also uses `~/.var`, so this already exists on many systems. But so far this really is only used for Flatpak.\r\n\r\nhttps://stackoverflow.com/questions/15794696/what-is-the-proper-place-to-put-named-pipes-on-linux suggests `/run/user/<userid>/`, and indeed this is used by several applications on my system. But:\r\n\r\n- There are Linux setups without system.d, and I'm not really keen on introducing the complexity of detecting this\r\n- There are non-Linux Unixes, e.g. the BSDs (or even Haiku, but that could be patched separately)\r\n\r\nIn any case we need to handle macOS as a specific case. There something in `~/Library/Application Support/` seems to be the correct place, see https://developer.apple.com/library/archive/documentation/FileManagement/Conceptual/FileSystemProgrammingGuide/MacOSXDirectories/MacOSXDirectories.html"", 'comment_created': datetime.datetime(2022, 6, 7, 6, 40, 38, tzinfo=datetime.timezone.utc), 'commenter': 'phw', 'type': 'User'}, {'comment_id': 890836335, 'comment_body': ""> https://stackoverflow.com/questions/15794696/what-is-the-proper-place-to-put-named-pipes-on-linux suggests `/run/user/<userid>/`, and indeed this is used by several applications on my system. But:\r\n> \r\n>     * There are Linux setups without system.d, and I'm not really keen on introducing the complexity of detecting this\r\n\r\nI'm using openRC and I have `$XDG_RUNTIME_DIR` (`/run/user/<userid>/`) in my filesystem, so maybe it's not that init-dependent?"", 'comment_created': datetime.datetime(2022, 6, 7, 7, 2, 55, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 890838124, 'comment_body': '@phw do you have any ideas other than ones already included in the file or can we mark this as resolved?', 'comment_created': datetime.datetime(2022, 6, 7, 7, 5, 12, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 890839562, 'comment_body': 'That would be good. No idea about the BSDs, though. But maybe if we could unify it on Linux it would be great already.\r\n\r\nWe could also have a simple fallback if /run/user/<userid> is not available or not writable fall back to ~/.config', 'comment_created': datetime.datetime(2022, 6, 7, 7, 7, 4, tzinfo=datetime.timezone.utc), 'commenter': 'phw', 'type': 'User'}, {'comment_id': 890843304, 'comment_body': ""Wouldn't it be better to raise `PermissionError` here again? We can do so with this updated error message, but `PermissionError` seems to be more fitting than `ValueError`."", 'comment_created': datetime.datetime(2022, 6, 7, 7, 11, 48, tzinfo=datetime.timezone.utc), 'commenter': 'phw', 'type': 'User'}, {'comment_id': 890844594, 'comment_body': '> That would be good. No idea about the BSDs, though. But maybe if we could unify it on Linux it would be great already.\r\n> \r\n> We could also have a simple fallback if /run/user/ is not available or not writable fall back to ~/.config\r\n\r\nWe should also check at least runit and SysV tho, [the list of alternative inits](https://nosystemd.org/) is pretty long but they seem to be the most frequently used ones.', 'comment_created': datetime.datetime(2022, 6, 7, 7, 13, 22, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 890851941, 'comment_body': ""It currently handles `FileNotFoundError`, so that's fine.\r\n\r\nI'm not sure what to do in other cases, like e.g. `PermissionErrors`. There are two general approaches we can go if something with pipe creation fails seriously in a non-fixable / unexpected manner:\r\n\r\n- we crash the application\r\n- we log an error, but we start Picard still as a separate process without pipe integration\r\n\r\nI tend to prefer option 2 for this case, because it allows user to still run Picard, they will just loose the single instance advantages."", 'comment_created': datetime.datetime(2022, 6, 7, 7, 22, 6, tzinfo=datetime.timezone.utc), 'commenter': 'phw', 'type': 'User'}, {'comment_id': 890854918, 'comment_body': '> I tend to prefer option 2 for this case\r\n\r\nMe too.', 'comment_created': datetime.datetime(2022, 6, 7, 7, 25, 35, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 890859883, 'comment_body': '```suggestion\r\n            if not args:\r\n```', 'comment_created': datetime.datetime(2022, 6, 7, 7, 30, 15, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 890868408, 'comment_body': 'I guess this conversion is needed to build a file path for Windows, so I think we should pass the version as is, and sanitize it at file path building time, the removal of dots is likely only needed on Win platforms.\r\n', 'comment_created': datetime.datetime(2022, 6, 7, 7, 39, 45, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 890869300, 'comment_body': '```suggestion\r\nif platform in {""win32"", ""cygwin""}:\r\n```', 'comment_created': datetime.datetime(2022, 6, 7, 7, 40, 39, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 890877518, 'comment_body': ""So my idea is to:\r\n1. create sth like `self.permission_error_happened` in except block\r\n2. If the previously mentioned attribute is true, pass it to the Tagger's constructor the same way as if the `--force` flag was used."", 'comment_created': datetime.datetime(2022, 6, 7, 7, 48, 43, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 890881815, 'comment_body': 'BTW, I think we can just remove this (re-) definition of `IS_WIN ` and modify https://github.com/metabrainz/picard/blob/04ddb9f3f076b7940fd6325e271a21a851c3ae44/picard/const/sys.py#L26\r\n\r\n@phw is there any reason to not match `cygwin` in `IS_WIN` definition?', 'comment_created': datetime.datetime(2022, 6, 7, 7, 53, 1, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 890883676, 'comment_body': 'Okay, I\'ve been thinking about it and `os.getenv(""XDG_RUNTIME_DIR"")` with appropriate fallback (in case of lack of such file or permission errors mentioned by you) to ~/.config/MusicBrainz/Picard/pipes (or sth similar in the picard ~/.config folder) seems like the best approach to me.', 'comment_created': datetime.datetime(2022, 6, 7, 7, 54, 55, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 890885451, 'comment_body': 'Okay, works for me\r\n', 'comment_created': datetime.datetime(2022, 6, 7, 7, 56, 40, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 890890234, 'comment_body': ""Okay, so I'll import `IS_WIN` constant and if `cygwin` needs to be supported, we will need to change the constant anyway"", 'comment_created': datetime.datetime(2022, 6, 7, 8, 1, 34, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 890899067, 'comment_body': 'New commit should handle it correctly', 'comment_created': datetime.datetime(2022, 6, 7, 8, 8, 32, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 890917112, 'comment_body': ""> @phw is there any reason to not match `cygwin` in `IS_WIN` definition?\r\n\r\nThere might be, that needs to be investigated per use. As cygwin provides a Unix like environment on Windows it is somewhere in between being Windows and being Unix and not everything might work the same (e.g. file paths) and not every `IS_WIN` usage might apply.\r\n\r\nIn general this is something not many have probably tried so far. I haven't seen any issue reports specific to cygwin. That either means things work well enough or not enough people have tried it yet :)"", 'comment_created': datetime.datetime(2022, 6, 7, 8, 16, 49, tzinfo=datetime.timezone.utc), 'commenter': 'phw', 'type': 'User'}, {'comment_id': 890922372, 'comment_body': 'Why was this change needed?', 'comment_created': datetime.datetime(2022, 6, 7, 8, 21, 50, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 890948824, 'comment_body': ""It's not needed for pipes to work but I thought it's a fine opportunity to refactor the `Tagger` class (especially its arguments structure and the constructor) and the start process in general.\r\n\r\n`unparsed_args` were used only in `Tagger` constructor (but were unused in the class), so I think such change makes the code more clean "", 'comment_created': datetime.datetime(2022, 6, 7, 8, 46, 34, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 890973699, 'comment_body': ""We usually try to keep such unrelated changes outside feature PRs, so for now I'd prefer those changes to be left out."", 'comment_created': datetime.datetime(2022, 6, 7, 9, 10, 54, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 891148479, 'comment_body': ""> So my idea is to:\r\n> \r\n>     1. create sth like `self.permission_error_happened` in except block\r\n> \r\n>     2. If the previously mentioned attribute is true, pass it to the Tagger's constructor the same way as if the `--force` flag was used.\r\n\r\nDone"", 'comment_created': datetime.datetime(2022, 6, 7, 12, 21, 46, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 891151475, 'comment_body': ""The discussion is resolved by `from picard.const.sys import IS_WIN` imo.\r\n\r\nAt least for now because win32 vs cygwin applies to the whole Picard app and its design, not just my PR. I'll just stick to the global way of detecting Windows"", 'comment_created': datetime.datetime(2022, 6, 7, 12, 24, 58, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 891152353, 'comment_body': ""Okay, I've undone my changes in the new commit."", 'comment_created': datetime.datetime(2022, 6, 7, 12, 25, 52, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 891172056, 'comment_body': 'This is unclear what this option forces, may be we could name it `--new-window` or `--new-instance` or anything more explicit than `--force`.\r\n\r\n@phw @rdswift any suggestion for a better name?', 'comment_created': datetime.datetime(2022, 6, 7, 12, 41, 40, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 891197881, 'comment_body': ""Option is a boolean, `start_code` is an enum value, so it would be better to use a condition and set a proper enum value instead.\r\n \r\nI have the feeling we can do better here, do we really need `start_code`? There are only 2 cases, run or quit, and the actual value isn't really used.\r\nWhether we run with a valid pipe or not is independent.\r\n\r\nJust a side note, for enums, use `IntEnum` class.\r\nAlso this code should move below, near `if not start_code:`.\r\n\r\n"", 'comment_created': datetime.datetime(2022, 6, 7, 13, 3, 45, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 891321170, 'comment_body': 'I like your idea of `--new-instance` more than `--new-window` because IMHO it more closely descibes the situation.  From my understanding, this new instance is stand-alone and does not listen for further commands.  Should this be clarified in the option name, something like `--stand-alone-instance` ?', 'comment_created': datetime.datetime(2022, 6, 7, 14, 39, 34, tzinfo=datetime.timezone.utc), 'commenter': 'rdswift', 'type': 'User'}, {'comment_id': 891359003, 'comment_body': '> --stand-alone-instance\r\n\r\nI like this one.', 'comment_created': datetime.datetime(2022, 6, 7, 15, 10, 13, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 891474104, 'comment_body': 'Me too, thanks', 'comment_created': datetime.datetime(2022, 6, 7, 16, 40, 40, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 891476258, 'comment_body': 'Any ideas for `-f` replacement or do we keep only the long version?\r\n', 'comment_created': datetime.datetime(2022, 6, 7, 16, 42, 36, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 891486443, 'comment_body': ""That's right and I've found a better solution in the next commit\r\n"", 'comment_created': datetime.datetime(2022, 6, 7, 16, 52, 30, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 891494979, 'comment_body': ""Perhaps `-s` for consistency?  I don't believe that short option is used."", 'comment_created': datetime.datetime(2022, 6, 7, 17, 1, 21, tzinfo=datetime.timezone.utc), 'commenter': 'rdswift', 'type': 'User'}, {'comment_id': 891495830, 'comment_body': ""When I thought about it for a bit longer, you're right. The short option would make it just worse."", 'comment_created': datetime.datetime(2022, 6, 7, 17, 2, 23, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 891498081, 'comment_body': 'All other options have a short name, may be we can do the same for this one. Not sure which one is better, `-s` ?', 'comment_created': datetime.datetime(2022, 6, 7, 17, 4, 39, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 891498845, 'comment_body': 'Alternatively (not sure which one is better):\r\n\r\n```suggestion\r\n        should_start = any({pipe_handler.permission_error_happened, pipe_handler.is_pipe_owner})\r\n```', 'comment_created': datetime.datetime(2022, 6, 7, 17, 5, 33, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 891501607, 'comment_body': '> In any case we need to handle macOS as a specific case. There something in `~/Library/Application Support/` seems to be the correct place, see https://developer.apple.com/library/archive/documentation/FileManagement/Conceptual/FileSystemProgrammingGuide/MacOSXDirectories/MacOSXDirectories.html\r\n\r\n@phw is there already a Picard-specific folder on Mac in this destination? If yes, how\'s it called? If no, how should I call it?\r\n\r\nBasically the code to add is (`self.__is_mac` is also imported from constants): \r\n\r\n```python\r\nelif self.__is_mac:\r\n    prefix = os.path.expanduser(f""~/Library/Application Support/{picard_folder_name}/"") \r\n```', 'comment_created': datetime.datetime(2022, 6, 7, 17, 8, 1, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 891505429, 'comment_body': 'I think `sys.exit()` should be called in all cases, may be with a specific code when `not should_start`.', 'comment_created': datetime.datetime(2022, 6, 7, 17, 11, 51, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 891507938, 'comment_body': 'IMHO, this property should be defined unconditionally.\r\n\r\n```python\r\n        self.__is_win: bool = IS_WIN\r\n        self.permission_error_happened: bool = False\r\n\r\n        # named pipe values needed by windows API\r\n        if self.__is_win:\r\n ```', 'comment_created': datetime.datetime(2022, 6, 7, 17, 14, 46, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 891517481, 'comment_body': 'I would make the default timeout a class constant, something like:\r\n\r\n```python\r\nclass Pipe:\r\n    ...\r\n   MESSAGE_TO_IGNORE:\r\n   TIMEOUT_SECS: float = 1.5\r\n   ...\r\n    def send_to_pipe(self, message: str, timeout_secs: Optional[float] = None) -> bool:\r\n        if timeout_secs is None:\r\n            timeout_secs = TIMEOUT_SECS\r\n...\r\n    def read_from_pipe(self, timeout_secs: Optional[float] = None) -> str:\r\n        if timeout_secs is None:\r\n            timeout_secs = TIMEOUT_SECS\r\n```\r\n', 'comment_created': datetime.datetime(2022, 6, 7, 17, 24, 8, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 891535395, 'comment_body': ""I'll go with just MusicBrainz/Picard/pipes, as mentioned previously and just let me know if I have to change it\r\n"", 'comment_created': datetime.datetime(2022, 6, 7, 17, 39, 5, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 891538208, 'comment_body': 'According to https://github.com/enthought/pywin32-ctypes/blob/80b06619fdf8635ea54a1668658f872f606cfe6d/win32ctypes/pywin32/pywintypes.py#L12-L27 attributes exist (`winerror`, `funcname`, `strerror`), it would be preferable to use them instead of indexes.\r\n', 'comment_created': datetime.datetime(2022, 6, 7, 17, 42, 24, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 891545943, 'comment_body': ""I've run a few benchmarks for 2 elements and `True in` seems to be way faster (and looks more human-readable)\r\n\r\nhttps://pastebin.com/WXx8EaD4"", 'comment_created': datetime.datetime(2022, 6, 7, 17, 50, 48, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 891548256, 'comment_body': ""I agree with rdswift that \r\n\r\n> I don't believe that short option is used.\r\n\r\nIf you insist on making it consistent with other arguments it's okay, but for me it's rather useless"", 'comment_created': datetime.datetime(2022, 6, 7, 17, 53, 13, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 891550731, 'comment_body': ""Actually, yeah, can't think of any reason to disagree."", 'comment_created': datetime.datetime(2022, 6, 7, 17, 56, 3, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 891552462, 'comment_body': ""I don't think parent directories aren't created by `os.mkfifo()`, and those directories may not exist, so this needs to be handled."", 'comment_created': datetime.datetime(2022, 6, 7, 17, 58, 10, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 891554443, 'comment_body': 'Actually, I meant that the short option `-s` is not already taken for another option.  I agree with @zas that both the long and short options should be supported.', 'comment_created': datetime.datetime(2022, 6, 7, 17, 59, 28, tzinfo=datetime.timezone.utc), 'commenter': 'rdswift', 'type': 'User'}, {'comment_id': 891564166, 'comment_body': ""You're right. Non-existent paths raise `FileNotFoundError`"", 'comment_created': datetime.datetime(2022, 6, 7, 18, 10, 56, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 891574785, 'comment_body': 'Okay, works for me, there are 2 options:\r\n\r\n1) `sys.exit(0)` because it executed correctly.\r\n2) some custom free-to-use error code to let user know wheter there was already an instance running. \r\n\r\n2nd one is better imo, can someone think of an example of such code? I tried finding it out myself but [PyQT5.QtWidgets.QApplication docs](https://www.riverbankcomputing.com/static/Docs/PyQt5/api/qtwidgets/qapplication.html#) are marked TODO...', 'comment_created': datetime.datetime(2022, 6, 7, 18, 23, 21, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 891590046, 'comment_body': ""Made it 30403, shouldn't collide with anything else. But I'll leave resolving it to you, maybe someone'll come up with a better idea"", 'comment_created': datetime.datetime(2022, 6, 7, 18, 39, 50, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 891594677, 'comment_body': 'Should work fine after latest commits.', 'comment_created': datetime.datetime(2022, 6, 7, 18, 45, 50, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 891617723, 'comment_body': 'You can use `os.makedirs()`, see https://docs.python.org/3/library/os.html#os.makedirs', 'comment_created': datetime.datetime(2022, 6, 7, 19, 10, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 891625063, 'comment_body': 'done', 'comment_created': datetime.datetime(2022, 6, 7, 19, 19, 36, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 891662470, 'comment_body': ""Blank line added, it's better to remove it from the draft PR."", 'comment_created': datetime.datetime(2022, 6, 7, 20, 4, 51, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 891662557, 'comment_body': ""Blank line added, it's better to remove it from the draft PR."", 'comment_created': datetime.datetime(2022, 6, 7, 20, 4, 58, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 891663443, 'comment_body': ""Also, ~/.config doesn't seem to be the best fallback option, see: \r\n\r\nhttps://tickets.metabrainz.org/browse/PICARD-2252"", 'comment_created': datetime.datetime(2022, 6, 7, 20, 6, 17, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 891663539, 'comment_body': '```suggestion\r\n        should_start = True in {pipe_handler.permission_error_happened, pipe_handler.is_pipe_owner}\r\n```\r\n\r\nUse a set instead of a list.', 'comment_created': datetime.datetime(2022, 6, 7, 20, 6, 26, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 891667355, 'comment_body': ""Instead of indenting the whole block, since we now exit in both cases, I suggest we use:\r\n\r\n```python\r\nif not should_start:\r\n    # just a custom exit code to show that picard instance wasn't created\r\n    sys.exit(30403)\r\n\r\ntry:\r\n    from PyQt5.QtDBus import QDBusConnection\r\n...\r\ntagger.startTimer(1000)\r\nsys.exit(tagger.run())\r\n```"", 'comment_created': datetime.datetime(2022, 6, 7, 20, 11, 17, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 891673209, 'comment_body': 'What about using our own exception here?\r\n\r\n```python\r\nclass PipeError(Exception):\r\n    pass\r\n\r\nclass PipeErrorInvalidResponse(PipeError):\r\n   pass\r\n\r\n\r\n...\r\n\r\n    raise PipeErrorInvalidResponse(f""INVALID RESPONSE: {response[1].decode(\'utf-8\')}"")\r\n```\r\n\r\nIt could be extended, and instead of raising FileNotFoundError everywhere we could raise specific exceptions.\r\n\r\n\r\n', 'comment_created': datetime.datetime(2022, 6, 7, 20, 18, 43, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 892014430, 'comment_body': 'Okay, looks fine to me', 'comment_created': datetime.datetime(2022, 6, 8, 7, 30, 9, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 892047150, 'comment_body': 'Instead we could try a conversion to a list, so any  iterable can be passed as `args`.\r\n\r\nAlso, it seems this list is only modified here, so it could be made a tuple instead.\r\n\r\nSomething like:\r\n\r\n```python\r\ntry:\r\n    args = tuple(args)\r\n    if not args:\r\n        args = (self.MESSAGE_TO_IGNORE, )\r\nexcept TypeError as exc:\r\n    raise PipeErrorBadArgs(exc)\r\n```\r\n\r\n\r\n', 'comment_created': datetime.datetime(2022, 6, 8, 8, 4, 19, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 892057580, 'comment_body': ""This will raise `FileExistsError` if the target already exists, it should be called with `exist_ok=True`.\r\nAlso the target isn't correct, as `self.path` is the fifo, so we need to extract the directory name.\r\n\r\nTo manipulate paths I would recommend we use [Pathlib](https://docs.python.org/3/library/pathlib.html) in this file."", 'comment_created': datetime.datetime(2022, 6, 8, 8, 14, 59, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 892126288, 'comment_body': 'We already have pipename separated from parent-dir in `self.__generate_filename`, so we can utilize it. How about simply store `prefix` value as `self.__pipe_parent_dir`:\r\n```python\r\n        if self.__is_win:\r\n            prefix = ""\\\\\\\\.\\\\pipe\\\\""\r\n        elif self.__is_mac:\r\n            prefix = os.path.expanduser(""~/Library/Application Support/MusicBrainz/Picard/pipes/"")\r\n        else:\r\n            prefix = f""{os.getenv(\'XDG_RUNTIME_DIR\')}/""\r\n            # just in case the $XDG_RUNTIME_DIR is not declared, fallback dir\r\n            if not prefix:\r\n                prefix = os.path.expanduser(""~/.config/MusicBrainz/Picard/pipes/"")```\r\n\r\n\r\n', 'comment_created': datetime.datetime(2022, 6, 8, 9, 21, 6, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 892139826, 'comment_body': 'Such conversion might raise misbehavior, like:\r\n\r\n```python\r\n>>> tuple(""hello"")\r\n(\'h\', \'e\', \'l\', \'l\', \'o\')\r\n```\r\n\r\nI\'d rather explicitly declare allowed types, like:\r\n\r\n```python\r\nif type(args) in [list, set]:\r\n    args = tuple(args)\r\n\r\nif isinstance(args, tuple):\r\n    if not args:\r\n        args = (self.MESSAGE_TO_IGNORE, )\r\nelse:\r\n    raise PipeErrorBadArgs()\r\n```', 'comment_created': datetime.datetime(2022, 6, 8, 9, 34, 33, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 892141823, 'comment_body': 'Making our own errors and storing error messages there is a great idea, thanks!\r\n', 'comment_created': datetime.datetime(2022, 6, 8, 9, 35, 54, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 892166472, 'comment_body': '> Such conversion might raise misbehavior, like:\r\n> \r\n> ```python\r\n> >>> tuple(""hello"")\r\n> (\'h\', \'e\', \'l\', \'l\', \'o\')\r\n> ```\r\n\r\n\r\nWell, that\'s Python, so I wouldn\'t bother with that.\r\nMost methods accepting iterables will work like this when passed a string, and it is somehow expected (as a string is an iterable).\r\n\r\nChecking types (btw, you have to check instances instead) should be kept rare, else you\'ll complexify the code a lot for not much gain.\r\n', 'comment_created': datetime.datetime(2022, 6, 8, 10, 0, 25, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 892212602, 'comment_body': ""Okay, check out the current commit how I've solved it."", 'comment_created': datetime.datetime(2022, 6, 8, 10, 53, 8, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 892213230, 'comment_body': ""I've created our custom errors but I'm open to any ideas to avoid the boilerplate there."", 'comment_created': datetime.datetime(2022, 6, 8, 10, 53, 54, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 892272934, 'comment_body': ""Instead of re-raising `PipeError `, you should just call parent `__init__()`:\r\n\r\n```python\r\ndef __init__(self):\r\n    super().__init__(self.MESSAGE)\r\n```\r\n\r\nThat's the usual approach."", 'comment_created': datetime.datetime(2022, 6, 8, 12, 2, 54, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 892275078, 'comment_body': 'If you really want to handle this `str` case (which I advised against in my previous comment), you should use `isinstance()` because one can pass a class inheriting from `str`.\r\n\r\n@phw what do you think about this?', 'comment_created': datetime.datetime(2022, 6, 8, 12, 5, 29, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 892281336, 'comment_body': 'Instead of passing `args`, just use the original exception message.\r\n\r\n```python\r\n\r\nclass PipeErrorInvalidArgs(PipeError):\r\n    MESSAGE = ""ERROR: Pipe() args argument has to be iterable""\r\n\r\n    def __init__(self, msg):\r\n        super().__init__(f""{self.MESSAGE}: {msg}."")\r\n\r\n...\r\nexcept TypeError as exc:\r\n    raise PipeErrorInvalidArgs(exc) from None\r\n\r\n```', 'comment_created': datetime.datetime(2022, 6, 8, 12, 12, 44, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 892290031, 'comment_body': 'To avoid ""During handling of the above exception, another exception occurred:"" extra message, you need to use `from  None`.\r\n\r\n', 'comment_created': datetime.datetime(2022, 6, 8, 12, 22, 8, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 892293105, 'comment_body': 'A shorter way to write this:\r\n\r\n```python\r\nreturn response or Pipe.NO_RESPONSE_MESSAGE\r\n```', 'comment_created': datetime.datetime(2022, 6, 8, 12, 25, 16, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 892543129, 'comment_body': 'Imo trying to use `Pipe(n, v, ""some_message"")` is an intuitive way of trying to send a single message, so I\'d like having `isinstance(args, str)` kept.', 'comment_created': datetime.datetime(2022, 6, 8, 15, 37, 31, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 892754819, 'comment_body': 'Picard does not yet create a folder in `~/Library/Application Support/` . It does something in `~/Library/Application Support/Preferences` I think, but that\'s technically not even correct because macOS expects plist files there. But it\'s a mess really, we need to redo this and place things (config, cache, plugins) in proper location per platform. But it\'s a bit ugly thing to handle, because of the testing needed on different plaforms and code needed to handle old locations and data migration. So I\'d like to see this happen for Picard 3.\r\n\r\nAnyway, for the pipe we should start doing something correct. According to the Apple docs the folder name inside ""Application Support"" should be the app identifier, that would be ""org.musicbrainz.Picard"" , there is a constant `PICARD_APP_ID` for this.\r\n\r\nRegarding `~/.config`: The user not having permission to access their own config folder should be considered a misconfiguration. It should still be handled better for the config file. But for the pipe I think we can use it as a fallback and we need to handle the case of not being able to create the pipe anyway (falling back to new instance mode).', 'comment_created': datetime.datetime(2022, 6, 8, 18, 57, 55, tzinfo=datetime.timezone.utc), 'commenter': 'phw', 'type': 'User'}, {'comment_id': 892759109, 'comment_body': 'Just wanted to note that I like `-s`  and `--stand-alone-instance`', 'comment_created': datetime.datetime(2022, 6, 8, 19, 3, 4, tzinfo=datetime.timezone.utc), 'commenter': 'phw', 'type': 'User'}, {'comment_id': 892768820, 'comment_body': 'To ease testing, it might be a good idea to store those hardcoded paths in constants at module level.\r\n\r\n```python\r\nPIPE_WIN_DIR = ""\\\\\\\\.\\\\pipe\\\\""\r\nPIPE_MAC_DIR = os.path.expanduser(""~/Library/Application Support/MusicBrainz/Picard/pipes/"")\r\nPIPE_UNIX_DIR = os.getenv(\'XDG_RUNTIME_DIR\')\r\nPIPE_UNIX_FALLBACK_DIR = os.path.expanduser(""~/.config/MusicBrainz/Picard/pipes/"")\r\n```\r\n\r\nWhat do you think?', 'comment_created': datetime.datetime(2022, 6, 8, 19, 14, 52, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 892769718, 'comment_body': ""It's incorrect to append `/` here, if `XDG_RUNTIME_DIR` is empty, `self.__pipe_parent_dir` will be set to `/`..."", 'comment_created': datetime.datetime(2022, 6, 8, 19, 16, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 892772599, 'comment_body': ""You can't build paths this way. Either use [os.path.join()](https://docs.python.org/3/library/os.path.html#os.path.join) or [PurePath.joinpath()](https://docs.python.org/3/library/pathlib.html#pathlib.PurePath.joinpath)"", 'comment_created': datetime.datetime(2022, 6, 8, 19, 19, 48, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 892780239, 'comment_body': 'Then instead of passing an iterable, use positional arguments.\r\n\r\n```python\r\ndef __init__(self, app_name: str, app_version: str, *args):\r\n```\r\n\r\nSo you can write:\r\n\r\n```python\r\nPipe(n, v, ""message1"", ""message2"", ""messageN"")\r\n```\r\n\r\nOr:\r\n\r\n```python\r\na_list = [ ""message1"", ""message2"", ""messageN""]\r\nPipe(n, v, *a_list)\r\n```\r\n\r\nIt all depends on the most common case.', 'comment_created': datetime.datetime(2022, 6, 8, 19, 29, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 892787055, 'comment_body': ""You don't need `try`/`except FileNotFoundError:`, as `os.makedir()` will take care of creating dirs if needed:\r\n\r\n```python\r\nos.makedirs(self.__pipe_parent_dir, exist_ok=True)\r\nos.mkfifo(self.path)"", 'comment_created': datetime.datetime(2022, 6, 8, 19, 36, 30, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 892790454, 'comment_body': ""Using a boolean here isn't that great, the actual error message isn't preserved (and it might be useful to the user).\r\nWhat about raising an exception instead ?\r\n\r\nSopmething like:\r\n\r\n```python\r\nexcept PermissionError as exc:\r\n   raise PipePermissionError(exc) from None\r\n```\r\n\r\nAnd in tagger code:\r\n\r\n```python\r\ntry:\r\n    pipe_handler = pipe.Pipe(app_name=PICARD_APP_NAME, app_version=PICARD_FANCY_VERSION_STR, args=picard_args.FILE)\r\n    should_start = bool(pipe_handler.is_pipe_owner}\r\nexcept PipePermissionError as err:\r\n    log.error(err)\r\n    pipe_handler = None\r\n    should_start = True\r\n```\r\n\r\n"", 'comment_created': datetime.datetime(2022, 6, 8, 19, 40, 54, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 893806684, 'comment_body': 'agreed, good idea', 'comment_created': datetime.datetime(2022, 6, 9, 17, 56, 45, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 893808073, 'comment_body': 'Okay for me, a log would be useful in such case.', 'comment_created': datetime.datetime(2022, 6, 9, 17, 58, 31, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 893816106, 'comment_body': 'Also, I\'ll name it `PipeErrorNoPermission` to make it consistent with other errors, i.e. `f""PipeError{some_description}""`.\r\n\r\nAlso I moved `self.is_pipe_owner` to the `try` block, because it makes no sense to own a non-existent pipe', 'comment_created': datetime.datetime(2022, 6, 9, 18, 5, 8, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 893818507, 'comment_body': 'btw, why do you call `bool()` here: `should_start = bool(pipe_handler.is_pipe_owner)`? `pipe_handler.is_pipe_owner` can  be only a boolean.', 'comment_created': datetime.datetime(2022, 6, 9, 18, 8, 3, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 893830815, 'comment_body': ""Well, I'll drop the str handling them. The code would become overcomplicated for case where we just pass a list/tuple of arguments."", 'comment_created': datetime.datetime(2022, 6, 9, 18, 24, 2, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 893888669, 'comment_body': ""> btw, why do you call `bool()` here: `should_start = bool(pipe_handler.is_pipe_owner)`? `pipe_handler.is_pipe_owner` can be only a boolean.\r\n\r\nThen it's useless ;)"", 'comment_created': datetime.datetime(2022, 6, 9, 19, 37, 11, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 894236280, 'comment_body': ""Sorry, I missed this comment yesterday, now we're using `PICARD_APP_ID` on Mac :)"", 'comment_created': datetime.datetime(2022, 6, 10, 7, 32, 58, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 894546865, 'comment_body': 'What about doing something like:\r\n\r\n```python\r\nclass PipeError(Exception):\r\n    MESSAGE = None\r\n\r\n    def __init__(self, *messages):\r\n        if self.MESSAGE:\r\n            self.messages = (self.MESSAGE, ) + tuple(messages)\r\n        else:\r\n            self.messages = tuple(messages)\r\n\r\n    def __str__(self):\r\n        messages_str = ""\\n  "".join(str(m) for m in self.messages)\r\n        if not messages_str:\r\n            messages_str = ""unknown""\r\n        return f""ERROR: {messages_str}""\r\n\r\n\r\nclass PipeErrorInvalidArgs(PipeError):\r\n    MESSAGE = ""Pipe() args argument has to be iterable""\r\n\r\n```\r\n\r\nSo following code:\r\n\r\n```python\r\ntry:\r\n    raise PipeError()\r\nexcept PipeError as exc:\r\n    print(exc)\r\n\r\ntry:\r\n    raise PipeError(""errmsg"")\r\nexcept PipeError as exc:\r\n    print(exc)\r\n\r\ntry:\r\n    raise PipeError(""errmsg1"", ""errmsg2"", 3, 4)\r\nexcept PipeError as exc:\r\n    print(exc)\r\n    print(exc.messages)\r\n\r\n\r\ntry:\r\n    raise PipeErrorInvalidArgs(""extramsg"")\r\nexcept PipeError as exc:\r\n    print(exc)\r\n\r\n```\r\n\r\nWould output:\r\n\r\n```\r\nERROR: unknown\r\nERROR: errmsg\r\nERROR: errmsg1\r\n  errmsg2\r\n  3\r\n  4\r\n(\'errmsg1\', \'errmsg2\', 3, 4)\r\nERROR: Pipe() args argument has to be iterable\r\n  extramsg\r\n```\r\n\r\nIt would reduce code redundancy and unify error messages.', 'comment_created': datetime.datetime(2022, 6, 10, 13, 45, 47, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 894559814, 'comment_body': 'Since `__app_name` and `__app_version` are only used by  `__generate_filename()`, may be just pass `app_name` and `app_version` to it (making this replacement in it too) and drop those.', 'comment_created': datetime.datetime(2022, 6, 10, 13, 54, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 894656595, 'comment_body': ""That's what I also considered, I'll do it then."", 'comment_created': datetime.datetime(2022, 6, 10, 15, 31, 54, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 894662864, 'comment_body': ""That's exactly what I meant by asking about limiting the boilerplate, thanks!"", 'comment_created': datetime.datetime(2022, 6, 10, 15, 39, 9, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 894674912, 'comment_body': 'I think we should move this to `if self.__is_win` branch in `__generate_filename()`', 'comment_created': datetime.datetime(2022, 6, 10, 15, 52, 34, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 894675751, 'comment_body': 'With new code, ""ERROR: "" part isn\'t needed anymore (it is added in `PipeError.__str__()`', 'comment_created': datetime.datetime(2022, 6, 10, 15, 53, 39, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 894677693, 'comment_body': 'fair point\r\n', 'comment_created': datetime.datetime(2022, 6, 10, 15, 56, 2, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 894747970, 'comment_body': 'Please unify messages, removing trailing `\\n`, `:` and perhaps also `.`.', 'comment_created': datetime.datetime(2022, 6, 10, 17, 16, 23, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 897047784, 'comment_body': '`m` -> `message` ?', 'comment_created': datetime.datetime(2022, 6, 14, 16, 33, 33, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 897047851, 'comment_body': ""Since this sequence doesn't change, it would be better to define it as a set outside those loops."", 'comment_created': datetime.datetime(2022, 6, 14, 16, 33, 37, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 897051790, 'comment_body': ""Why not iterating over list elements directly?\r\n\r\n```python\r\nfor messages in to_send:\r\n    __pool = concurrent.futures.ThreadPoolExecutor()\r\n    plistener = __pool.submit(pipe_listener, pipe_listener_handler, END_OF_SEQUENCE)\r\n    __pool.submit(pipe_writer, pipe_writer_handler, messages, END_OF_SEQUENCE)\r\n    self.assertEqual(plistener.result(), messages)\r\n```\r\n\r\nThis way you don't have to use `len()` and `range()`"", 'comment_created': datetime.datetime(2022, 6, 14, 16, 38, 3, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 897052324, 'comment_body': ""Since those aren't modified, I would just use tuples instead of lists."", 'comment_created': datetime.datetime(2022, 6, 14, 16, 38, 36, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 897056228, 'comment_body': 'okay, can do', 'comment_created': datetime.datetime(2022, 6, 14, 16, 42, 35, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 897344149, 'comment_body': 'Just a minor thing regarding indentation, we usually separate each element like this:\r\n\r\n```python\r\nto_send = (\r\n    (""it"", ""tests"", ""picard"", ""pipe""),\r\n    (""test"", ""number"", ""two""),\r\n    (""my_music_file.mp3"",),\r\n)\r\n```\r\n\r\nNote the comma after the last element.\r\nIt helps with diffs, adding, modifying, removing and element in the sequence doesn\'t affect others lines, so it makes patches easier to read and to merge/revert.\r\n\r\nApart that, it looks good now, good job.', 'comment_created': datetime.datetime(2022, 6, 14, 21, 38, 41, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 897354541, 'comment_body': 'Actually it would be preferable to not log 2 lines. `\\n` isn\'t the line separator on all systems (one can use `os.sep` or the like for that). We usually try to log things on one line, it makes search/grep easier (though there are cases where multiple lines logging is useful).\r\n\r\nAlso no need to preformat strings, `log.*()` supports `%` notation and arguments.\r\nWe usually use `%r` for paths (to prevent any encoding issue, `%s` could lead to an error in some cases if the path cannot be converted to string for some reason).\r\n\r\n```python\r\nif self.PIPE_UNIX_DIR:\r\n    self.__pipe_parent_dir = self.PIPE_UNIX_DIR\r\n    log.debug(""Using pipe path: %r"", self.__pipe_parent_dir)\r\nelse:\r\n    self.__pipe_parent_dir = self.PIPE_UNIX_FALLBACK_DIR\r\n    log.debug(""Using fallback pipe path: %r"", self.__pipe_parent_dir)\r\n```\r\n    \r\nSorry for nitpicking, just trying to give insights about Picard coding style.', 'comment_created': datetime.datetime(2022, 6, 14, 21, 56, 20, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 897595982, 'comment_body': ""Okay, no worries, consistency is important.\r\n\r\nTho when I think about it, I'll log a warning when we switch to fallback, because it's rather uncommon behavior.\r\n\r\nIf the main location becomes available while Picard instance is already running in pipe fallback mode, it gets ignored, so it deserves either warning or handling in `__init__` (send to both filepaths). Warn seems preferable to me."", 'comment_created': datetime.datetime(2022, 6, 15, 6, 48, 32, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 897597169, 'comment_body': 'Reasonable', 'comment_created': datetime.datetime(2022, 6, 15, 6, 50, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 898201512, 'comment_body': 'Instead you can run different tests for each platform.\r\nSee, for example, https://github.com/metabrainz/picard/blob/3b26fe8c425743083a96f9a045c388bafb9ccd96/test/test_file.py#L291\r\n\r\nSomething like:\r\n\r\n```python\r\n@unittest.skipUnless(IS_WIN, ""windows test"")\r\ndef test_filename_generation_win(self):\r\n    ...\r\n\r\n@unittest.skipUnless(IS_MACOS, ""macos test"")\r\ndef test_filename_generation_macos(self):\r\n    ...\r\n\r\n@unittest.skipUnless(not IS_MACOS and not IS_WIN, ""non-macos/win test"")\r\ndef test_filename_generation(self):\r\n    ...\r\n\r\n```\r\n\r\nCheck other test files, there are various places where we do that.\r\nYou can move common code to a common method to avoid code duplication.\r\n', 'comment_created': datetime.datetime(2022, 6, 15, 16, 43, 2, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 898326829, 'comment_body': ""Okay, I've created 3 functions with decorators as suggested. If it works now, I'll take care of the boilerplate somehow"", 'comment_created': datetime.datetime(2022, 6, 15, 19, 14, 55, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 898368876, 'comment_body': ""The issue with tests is that paths defined in https://github.com/metabrainz/picard/blob/5f27781635610c8564da1c2ad4de3dbb6571ec3d/picard/util/pipe.py#L94-L97 aren't all defined in the context of tests.\r\nIn particular, [`os.path.expanduser()`](https://docs.python.org/3/library/os.path.html#os.path.expanduser) expects `$HOME` to be defined (it depends on platforms).\r\n\r\n```\r\n>>> os.environ['HOME']\r\n'/home/zas'\r\n>>> os.path.expanduser('~')\r\n'/home/zas'\r\n>>> os.environ['HOME'] = '/tmp'\r\n>>> os.path.expanduser('~')\r\n'/tmp'\r\n```\r\n\r\nSame goes for `XDG_RUNTIME_DIR`.\r\n\r\nYou need to create a temporary dir for tests, and define proper environment variables."", 'comment_created': datetime.datetime(2022, 6, 15, 20, 1, 12, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 898870021, 'comment_body': ""`os.getenv()` doesn't require its args to be defined, so we can keep it that way. It'll be just `None` and current checks are okay.\r\n\r\nBut we should move `os.path.expanduser()` to the filename generation part"", 'comment_created': datetime.datetime(2022, 6, 16, 9, 8, 46, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 898876206, 'comment_body': '`os.environ.get()` allows to set what should be returned when no such variable was found and this should do: to replace `$HOME` with `.`', 'comment_created': datetime.datetime(2022, 6, 16, 9, 15, 29, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 898883459, 'comment_body': 'Okay, `.` raises permissionerror. Should I replace it with `/tmp/test_user/` or what?', 'comment_created': datetime.datetime(2022, 6, 16, 9, 23, 31, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 898885855, 'comment_body': 'TypeError can be solved this way, so the only concern is the test dir\r\n\r\n```python\r\nUNIX_PATHS = {\r\n    join(handler.PIPE_UNIX_FALLBACK_DIR, self.SUFFIX)\r\n}\r\n# None guard\r\nif handler.PIPE_UNIX_DIR:\r\n    UNIX_PATHS.add(handler.PIPE_UNIX_DIR)\r\n```', 'comment_created': datetime.datetime(2022, 6, 16, 9, 26, 11, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 898885869, 'comment_body': ""Defaulting to `.` might not be a good idea, as the code may create subdirs in the directory the program was started from.\r\n\r\nSystem temporary directory would be a better place (`/tmp` on Linux systems).\r\n\r\n@phw what's your take on this?\r\n\r\n"", 'comment_created': datetime.datetime(2022, 6, 16, 9, 26, 12, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 898892612, 'comment_body': ""Imo `/tmp` is a good fallback. A user without `$HOME` and `$XDG_RUNTIME_DIR` is highly unlikely to be using Picard. \r\n\r\nCodacy will raise issues if we'll keep using `/tmp` tho"", 'comment_created': datetime.datetime(2022, 6, 16, 9, 33, 35, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 900315011, 'comment_body': ""Let's set this as a constant to make it more readable:\r\n\r\n```python\r\nsys.exit(EXIT_NO_NEW_INSTANCE)\r\n```\r\n\r\nor such."", 'comment_created': datetime.datetime(2022, 6, 17, 16, 40, 31, tzinfo=datetime.timezone.utc), 'commenter': 'phw', 'type': 'User'}, {'comment_id': 900325145, 'comment_body': 'We could also define a tuple of dirs depending on the environment:\r\n\r\n```python\r\nif IS_WIN:\r\n     PIPE_DIRS = (""\\\\\\\\.\\\\pipe\\\\"",)\r\nelif IS_MACOS:\r\n    PIPE_DIRS = (os.path.join(""Library/Application Support/"", PICARD_APP_ID),)\r\nelse:\r\n    PIPE_DIRS = (os.getenv(\'XDG_RUNTIME_DIR\'), "".config/MusicBrainz/Picard/pipes/"")\r\n```\r\n\r\nThen in the code creating the pipes iterate over the directories. That makes it very convenient to add / change fallback dirs, and also removes the need to check different variable names. E.g. I think there is no real need to separate the code for macOS much, it should be all just the same Unix stuff.', 'comment_created': datetime.datetime(2022, 6, 17, 16, 47, 15, tzinfo=datetime.timezone.utc), 'commenter': 'phw', 'type': 'User'}, {'comment_id': 900329803, 'comment_body': 'I think the fallback directories should be handled here, not in `__generate_filename`. In `__generate_filename` it just checks if the variable `__pipe_parent_dir` has a value, but we should also move to the fallback if creation in the first dir fails (so we handle permission errors with the fallback as well).', 'comment_created': datetime.datetime(2022, 6, 17, 16, 50, 24, tzinfo=datetime.timezone.utc), 'commenter': 'phw', 'type': 'User'}, {'comment_id': 900334216, 'comment_body': ""Instead of creating the pool on the `send_to_pipe` call, shouldn't it rather have the pool setup on for the instance of class `Pipe`? Maybe even have the pool passed in to the constructor"", 'comment_created': datetime.datetime(2022, 6, 17, 16, 53, 29, tzinfo=datetime.timezone.utc), 'commenter': 'phw', 'type': 'User'}, {'comment_id': 900335417, 'comment_body': 'Same as in `send_to_pipe`. I even think we should use the global thread pool that gets created in tagger.py.', 'comment_created': datetime.datetime(2022, 6, 17, 16, 54, 19, tzinfo=datetime.timezone.utc), 'commenter': 'phw', 'type': 'User'}, {'comment_id': 901533885, 'comment_body': ""I'd rather keep a separate pool for the `Pipe`. Passing it as an argument from tagger would overcomplicate the code and make the `Pipe` class to dependent on external factors, but making it an attribute seems fine. (sorry for the absence, too)"", 'comment_created': datetime.datetime(2022, 6, 20, 10, 56, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 902266387, 'comment_body': 'How about the current solution?\r\n', 'comment_created': datetime.datetime(2022, 6, 21, 7, 43, 52, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 902324728, 'comment_body': '## \n\nStandard pseudo-random generators are not suitable for security/cryptographic purposes.\n\n[Show more details](https://github.com/metabrainz/picard/security/code-scanning/2138)', 'comment_created': datetime.datetime(2022, 6, 21, 8, 33, 49, tzinfo=datetime.timezone.utc), 'commenter': 'github-advanced-security[bot]', 'type': 'Bot'}, {'comment_id': 902547093, 'comment_body': 'Did you change end of lines??', 'comment_created': datetime.datetime(2022, 6, 21, 12, 18, 24, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 902549770, 'comment_body': ""Nope, I'm really clueless why such a thing happened"", 'comment_created': datetime.datetime(2022, 6, 21, 12, 21, 19, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 902601790, 'comment_body': ""> Nope, I'm really clueless why such a thing happened\r\n\r\nYou changed all end of line characters from Unix to Windows style.\r\nPlease revert, rebase (removed incorrect commit completely)  and commit a clean patch.\r\n\r\nTo see end of line characters you can use:\r\n\r\n```\r\ngit show 86230b397 | cat -v\r\n```\r\n"", 'comment_created': datetime.datetime(2022, 6, 21, 13, 12, 17, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 902739490, 'comment_body': ""Ok so before I revert my changes, how should I disable Codacy warning about randint?\r\n\r\n`# pylint: disable=B311` doesn't seem to work\r\n"", 'comment_created': datetime.datetime(2022, 6, 21, 15, 4, 54, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 902766012, 'comment_body': ""`# pylint: disable=unexpected-keyword-arg` should work in theory. If not try with `#noqa: B311`, but I think that's not honored by pylint."", 'comment_created': datetime.datetime(2022, 6, 21, 15, 27, 58, tzinfo=datetime.timezone.utc), 'commenter': 'phw', 'type': 'User'}, {'comment_id': 902768314, 'comment_body': ""> `# pylint: disable=unexpected-keyword-arg` should work in theory. If not try with `#noqa: B311`, but I think that's not honored by pylint.\r\n\r\nI'm talking about using pseudo-random numbers warning, not the previous error."", 'comment_created': datetime.datetime(2022, 6, 21, 15, 29, 58, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 902808168, 'comment_body': ""Got it, it's bandit issue and `# nosec` should do."", 'comment_created': datetime.datetime(2022, 6, 21, 16, 6, 58, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 902840091, 'comment_body': ""I don't understand this line.\r\n\r\n```python\r\nif res == self.MESSAGE_TO_IGNORE:\r\n```\r\n\r\nShouldn't it be `r` instead of `res`?\r\n\t\r\n"", 'comment_created': datetime.datetime(2022, 6, 21, 16, 39, 13, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 902841414, 'comment_body': 'Instead of building a list, could we `yield` `r`?', 'comment_created': datetime.datetime(2022, 6, 21, 16, 40, 38, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 902841880, 'comment_body': ""Isn't there a non-hacky way?"", 'comment_created': datetime.datetime(2022, 6, 21, 16, 41, 9, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 902843865, 'comment_body': 'What if a filepath contains `\\n`?', 'comment_created': datetime.datetime(2022, 6, 21, 16, 43, 19, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 902850334, 'comment_body': 'File operations are meant to be safe, so neither timeouts nor killing the process manually works (we get error)', 'comment_created': datetime.datetime(2022, 6, 21, 16, 50, 11, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 902850929, 'comment_body': 'Rather uncommcon case, anyway, we have to agree on some separator', 'comment_created': datetime.datetime(2022, 6, 21, 16, 50, 54, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 902851258, 'comment_body': 'It should.', 'comment_created': datetime.datetime(2022, 6, 21, 16, 51, 14, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 902859016, 'comment_body': 'Look at this code:\r\n\r\n```python\r\n        if out:\r\n            return out\r\n\r\n        return [self.NO_RESPONSE_MESSAGE]\r\n```\r\n\r\nHow about the case where `out` is empty? We have to return NO_RESPONSE_MESSAGE.', 'comment_created': datetime.datetime(2022, 6, 21, 16, 59, 38, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 902865871, 'comment_body': 'In my next commit I\'ll refactor it to `AbstractPipe._MESSAGES_SEPARATOR: str = ""\\n\\n\\n\\t\\t\\n""`', 'comment_created': datetime.datetime(2022, 6, 21, 17, 7, 22, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 902870895, 'comment_body': ""I don't think that's a clean solution. You still have a separator that may occur in a filepath."", 'comment_created': datetime.datetime(2022, 6, 21, 17, 13, 13, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 902875620, 'comment_body': '> I don\'t think that\'s a clean solution.\r\n\r\nMe neither.\r\n\r\nBut as I\'ve said, we need some separator, because messages really can collide in pipes. Putting 2 filenames into a single path-string is much more probable than `""\\n\\n\\n\\t\\t\\n""` in some filename.\r\n\r\nI\'m open to suggestions but that\'s my best in that case for now.\r\n\r\n', 'comment_created': datetime.datetime(2022, 6, 21, 17, 18, 9, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 902992298, 'comment_body': 'I wonder if we could move to a binary protocol, converting ""messages"" to a sequence of bytes: X bytes for message type (normal or error, future usage), Y bytes for length of payload, Z bytes for payload.\r\n\r\nI see multiple advantages:\r\n- no need to escape or separate data (bytes Y)\r\n- it can be extended (bytes X)\r\n- payload can be anything (bytes Z + Y), bytes X can be used to give it a type\r\n- struct.pack() / unpack() on send/receive\r\n\r\nAs an example, a path could be sent as `(0, 73, b""path_73_bytes_long_path"")`, `(255, 0)` could be an error message, `(1, 7, b""command"") a specific command.\r\n\r\nMay be overkill, but it wouldn\'t require much changes to the current code I think.\r\n\r\nFor sure, assuming paths (especially on Unix) don\'t contain ""bad"" characters, and transmitting those with appended separator doesn\'t look a good idea to me.\r\n\r\nAnother approach would be to use `pickle` to (de)serialize objects.\r\n\r\n@phw what do you think?\r\n\r\n', 'comment_created': datetime.datetime(2022, 6, 21, 19, 29, 59, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 903000352, 'comment_body': ""I've found out that ['\\0' is forbidden in filenames on both Windows and Unix](https://stackoverflow.com/questions/54205087/how-can-i-create-a-file-with-null-bytes-in-the-filename) (`ValueError: embedded null byte`), so we can safely split messages without any need for such deep refactoring. How about that?\r\n\r\nAlso, `Pipe.MESSAGE_TO_IGNORE` should be a '\\0', so we can merge both constants into one"", 'comment_created': datetime.datetime(2022, 6, 21, 19, 40, 27, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 903353695, 'comment_body': 'If we split on `self.MESSAGE_TO_IGNORE`, in the loop below the test `r != self.MESSAGE_TO_IGNORE` is useless.', 'comment_created': datetime.datetime(2022, 6, 22, 7, 1, 57, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 903360046, 'comment_body': 'No need to rewrite `res`:\r\n\r\n```python\r\n                for r in res.split(self.MESSAGE_TO_IGNORE):\r\n```\r\n\t\r\n', 'comment_created': datetime.datetime(2022, 6, 22, 7, 6, 11, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 903369071, 'comment_body': 'In which cases can this happen?', 'comment_created': datetime.datetime(2022, 6, 22, 7, 15, 14, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 903401918, 'comment_body': '> In which cases can this happen?\r\n\r\nEdge-case guardian which means that either:\r\na) `PIPE_DIRS` is empty\r\nb) cannot build any path from strings there', 'comment_created': datetime.datetime(2022, 6, 22, 7, 47, 32, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 903545262, 'comment_body': '@skelly37 @zas I like this approach. Overall the use of platform specific classes has made the code much easier to understand and better separated.\r\n\r\nAny specific reason why `@abstractproperty` was not used here?\r\n\r\n```python\r\n    @abstractproperty\r\n    def readonly(self):\r\n        return self.__x\r\n```\r\n', 'comment_created': datetime.datetime(2022, 6, 22, 10, 6, 44, tzinfo=datetime.timezone.utc), 'commenter': 'phw', 'type': 'User'}, {'comment_id': 903550694, 'comment_body': 'I think  `\\0` works as a separator. As long as we have only paths to transfer this is especially easy. If we start getting different messages we need to introduce some message identifier.\r\n\r\nA simple binary format like @zas proposed would work. Or if we really just expect text to be transferred the null termination maybe still works, so only `(0, b""path_73_bytes_long_path"", b""\\0"")`.\r\n\r\nDo we expect to need the type? If yes maybe introduce it already but only define a single type path = 0', 'comment_created': datetime.datetime(2022, 6, 22, 10, 12, 31, tzinfo=datetime.timezone.utc), 'commenter': 'phw', 'type': 'User'}, {'comment_id': 903606110, 'comment_body': '`@abstractproperty` is deprecated since 3.3\r\nSee https://docs.python.org/3/library/abc.html#abc.abstractproperty', 'comment_created': datetime.datetime(2022, 6, 22, 11, 12, 23, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 903676027, 'comment_body': 'It would be useful to log the actual exception message here, as a warning (or error?).\r\n\r\n```python\r\nexcept PermissionError as exc:\r\n    log.warning(""Couldn\'t create pipe: %r (%s)"", self.path, exc)\r\n```', 'comment_created': datetime.datetime(2022, 6, 22, 12, 24, 17, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 903686251, 'comment_body': 'I would rewrite it to use a list comprehension, and making `out` more local.\r\n\r\n```python\r\n        reader = self.__thread_pool.submit(self._reader)\r\n\r\n        try:\r\n            res = reader.result(timeout=timeout_secs)\r\n            if res:\r\n                out = [r for r in res.split(self.MESSAGE_TO_IGNORE) if r]\r\n                if out:\r\n                    return out\r\n        except concurrent.futures._base.TimeoutError:\r\n            # hacky way to kill the file-opening loop\r\n            self.send_to_pipe(self.MESSAGE_TO_IGNORE)\r\n\r\n        return [self.NO_RESPONSE_MESSAGE]\r\n```', 'comment_created': datetime.datetime(2022, 6, 22, 12, 34, 45, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 907064868, 'comment_body': ""This looks very weird to me, returning a `set` means:\r\n\r\n- identical messages are reduced to one\r\n- order of messages isn't preserved\r\n\r\nThough not sure I'm misunderstanding this code, can you explain?\r\n\r\nBTW, instead of `set([comprehension])` one can write `{comprehension}`"", 'comment_created': datetime.datetime(2022, 6, 27, 7, 34, 4, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 907072452, 'comment_body': 'Having `assertEqual()` in a try block means in some case the test will pass without even checking correct behavior.\r\n\r\nIf we expect an exception, then we need to check it happens.', 'comment_created': datetime.datetime(2022, 6, 27, 7, 42, 42, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 907073350, 'comment_body': 'Are those repetitions really needed?', 'comment_created': datetime.datetime(2022, 6, 27, 7, 43, 48, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 907073527, 'comment_body': 'For extra debug, if you really want to keep that, define a boolean constant (like `DEBUG_PIPE`) and use tests:\r\n\r\n```python\r\nif DEBUG_PIPE:\r\n    log.debug(""sent successfully: %r"", message)\r\n```\r\n\r\nAs is, that\'s far too much debug output.', 'comment_created': datetime.datetime(2022, 6, 27, 7, 43, 58, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 907077003, 'comment_body': 'When does `""""` occur?\r\n\r\nIn `read_from_pipe()` `if r` should prevent it to happen.', 'comment_created': datetime.datetime(2022, 6, 27, 7, 48, 1, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 907088030, 'comment_body': 'So, basically, `plistener.result(timeout=6.5)` should be placed in a try-except block to handle timeout errors, while assertequal should be in the normal loop, right?', 'comment_created': datetime.datetime(2022, 6, 27, 7, 59, 58, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 907090603, 'comment_body': ""The most nested loop is indeed unneeded. The pipe should sent/receive the data at the first try.\r\n\r\nIterating over `to_send` is needed from obvious reasons.\r\n\r\nRepeting the case allows us to catch some edge cases that were difficult to find on GithubActions, so I'd keep this 100."", 'comment_created': datetime.datetime(2022, 6, 27, 8, 2, 52, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 907091372, 'comment_body': ""That's true, it should be prevented."", 'comment_created': datetime.datetime(2022, 6, 27, 8, 3, 42, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 907093708, 'comment_body': ""The two points you've made was the actual reason I've used such solution. But if you're saying that users will care about the order of files or they want duplicates, I may rollback to list, no problem."", 'comment_created': datetime.datetime(2022, 6, 27, 8, 6, 24, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 907124796, 'comment_body': ""Yeah that's simply too much"", 'comment_created': datetime.datetime(2022, 6, 27, 8, 38, 16, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 907176310, 'comment_body': ""It isn't about files (which are a specific case, related to our usage), but the overall logic of a fifo pipe, one expects order to be preserved (as well as duplicates)."", 'comment_created': datetime.datetime(2022, 6, 27, 9, 29, 13, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 907177655, 'comment_body': 'Yes, the test should always end on an assertion (or be explicitly skipped). Sometimes an exception is expected, but in this case we still assert for it.', 'comment_created': datetime.datetime(2022, 6, 27, 9, 30, 30, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 908266637, 'comment_body': ""`log.*` methods aren't meant to be used in tests. This file is the only one using them.\r\n"", 'comment_created': datetime.datetime(2022, 6, 28, 9, 36, 33, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 911111632, 'comment_body': ""What's the purpose of `strip()` here?"", 'comment_created': datetime.datetime(2022, 6, 30, 14, 40, 5, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 911221845, 'comment_body': 'Seems like I forgot to remove it after some debugging process. Thanks for noticing, tests go fine locally with it removed. It may indeed result in an unexpected behavior.', 'comment_created': datetime.datetime(2022, 6, 30, 16, 20, 18, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 912673529, 'comment_body': 'One minor thing I found during testing: This should be `add_paths`  instead of `add_files`, so that calling picard with a directory path also gets processed properly.', 'comment_created': datetime.datetime(2022, 7, 4, 6, 45, 4, tzinfo=datetime.timezone.utc), 'commenter': 'phw', 'type': 'User'}, {'comment_id': 912757646, 'comment_body': 'Thanks!', 'comment_created': datetime.datetime(2022, 7, 4, 8, 31, 26, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 914492924, 'comment_body': 'The default `max_workers` value is likely much higher than our needs, it might be worth specifying it.\r\n\r\nhttps://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.ThreadPoolExecutor\r\n\r\n', 'comment_created': datetime.datetime(2022, 7, 6, 7, 15, 27, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 915482913, 'comment_body': ""I'm thinking about 6 of them. 2 per reader, 2 per sender (they need two workers for the sake of *hacky killing the job*) and 2 just in case.\r\n\r\n1 more than default value for 1 CPU, 28 less in the edge case"", 'comment_created': datetime.datetime(2022, 7, 7, 5, 51, 14, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 915916302, 'comment_body': ""Technically, even if these are provided the arguments will be ignored by an existing instance, won't they?  I mean they will trigger a new stand-alone instance.  The arguments that will be ignored by an existing instance are `-d`, `-M` and `-N`."", 'comment_created': datetime.datetime(2022, 7, 7, 14, 5, 27, tzinfo=datetime.timezone.utc), 'commenter': 'rdswift', 'type': 'User'}, {'comment_id': 915922582, 'comment_body': 'Is there a reason these aren\'t worded consistently?  Perhaps simply appending ""(opens a stand-alone instance)""?', 'comment_created': datetime.datetime(2022, 7, 7, 14, 11, 7, tzinfo=datetime.timezone.utc), 'commenter': 'rdswift', 'type': 'User'}, {'comment_id': 915961960, 'comment_body': ""Hm, right, how about replacing *an existing instance* with *the target instance*? Or maybe:\r\n\r\n*If a new instance won't be spawned, the other aguments will be ignored*"", 'comment_created': datetime.datetime(2022, 7, 7, 14, 45, 46, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 915962248, 'comment_body': 'Good idea!', 'comment_created': datetime.datetime(2022, 7, 7, 14, 46, 1, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 915976661, 'comment_body': 'That works, although it could be interpreted that the files / directories for processing will also be ignored.  Perhaps something like, ""*If a new instance won\'t be spawned, all arguments other than files and directories for processing will be ignored.*"" or ""*If a new instance won\'t be spawned, all user interface related arguments will be ignored.*""?', 'comment_created': datetime.datetime(2022, 7, 7, 14, 58, 29, tzinfo=datetime.timezone.utc), 'commenter': 'rdswift', 'type': 'User'}, {'comment_id': 916146870, 'comment_body': 'Good point, please check the newest commit', 'comment_created': datetime.datetime(2022, 7, 7, 18, 1, 7, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 916299730, 'comment_body': 'The wording looks fine to me.  One minor issue...  Should there be a space between the bullet indicator (-) and the text of the bullet?  For example:\r\n\r\n```\r\nIf a new instance will not be spawned:\r\n  - files/directories will be passed to the existing instance,\r\n  - the other arguments will be ignored.\r\n```\r\n\r\nrather than:\r\n\r\n```\r\nIf a new instance will not be spawned:\r\n  -files/directories will be passed to the existing instance,\r\n  -the other arguments will be ignored.\r\n```\r\n', 'comment_created': datetime.datetime(2022, 7, 7, 21, 37, 11, tzinfo=datetime.timezone.utc), 'commenter': 'rdswift', 'type': 'User'}, {'comment_id': 916500356, 'comment_body': 'Whatever, as long as they are consistent, imo', 'comment_created': datetime.datetime(2022, 7, 8, 6, 25, 58, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 916520374, 'comment_body': ""With space I'd say"", 'comment_created': datetime.datetime(2022, 7, 8, 7, 0, 56, tzinfo=datetime.timezone.utc), 'commenter': 'phw', 'type': 'User'}, {'comment_id': 916521177, 'comment_body': ""> With space I'd say\r\n\r\nYeah, it's already done"", 'comment_created': datetime.datetime(2022, 7, 8, 7, 2, 10, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}]","[{'commit_sha': '3687767cf6848f336830f0f823696b4c9abf4f7b', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72d843c52e81aaa75ae051d0235c48ef62ba4c90', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a715d332fffa0c9849b2e1ac7496992bf19a318e', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3ffd1ecd8bf9bbe77d417931dd9c911fee1e6a0', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0aba7621068b377c758236a57e09210cfad7881c', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6731bc6559c96c0d325ec65da6c2578c32e75843', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e64527a7816ec6ec7702df98e7c3422186489608', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd4871426759f88c9e943246c3cbbd45d4289af0', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f4de361ed8a42161603578f7e4420ee9d40c026', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e95b47d7bf71d9d1068667b9fbf481df999cf1d1', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dfba941125a8ee620f2331af214a861b83cfa0ea', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f24793df25deaf5639d698b6b69b2090919e4b72', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '612972385a12b5c11ad2de26a5a2c90ccd548e80', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd548acdfbd07913805caafa7a9522351d9daace', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e10d1a6d93b0c01b8173a64d4b0eb8e1d351abe5', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69b92d004ff3f727367da79f9caa292b2d587b69', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f401eece91c53d1076f167bd000bafcde8a0dc8', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc4e0ec63df281055abb9ef1fec93170a39fdd2e', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '52ebce866ae805f1bfdf65191a75664dd816416a', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af05a324f0bcce941ff352a16de9cbc9b25b33fc', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '904824e3dc71a75e4f9db90586371bac0786c29a', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f66e47b5a0f923976231bdc5a5336e43dcb9f4e8', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa8233bf1d536b3cf550339d63b433c1d4582359', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1d708cf5b0d0eedbe8dc91e9e5208fcff898987', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6782ddf0c55eccaeabb286bd8ef01f127be353a3', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83bbdb3e187d0a99d8e4e42f616737e32e330953', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd029a9d8240953bd611881bfa54120927bac336f', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f27781635610c8564da1c2ad4de3dbb6571ec3d', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2de7543f31772ff2a512f7855caa54dd2b8421ba', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ff83bb84db51a370759a2a098e28d71f21c5f03', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b83ce3f2d8e00d960fe9d641f82b45ffc86cd214', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b30c2e858a1af9c570a7df26fbc7136934ea21d', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f22d3c555d8c0d6a48310bc2ee1cd7cbd336c31', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e95abc22664e5dff5e346d2d0be69d6fb111c4eb', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c43a494838a536f98a5d1dcbcc024cab539b126', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e5312c95e1c0bea9e73f9f5a417359dc0252846', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f722b99fb120451b14a8176ac291def77162712', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b1d61a01818ef40d93f240d10e2dbd95d922fa22', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46c88fb5670785626af4c753f30833df89c02184', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc0e581b124859be5248736c14965d08f7dcfb58', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6cf45bf12b08907662236cf74fc2115f8124d387', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c0c5074297d7897a60933d3ce3a9f69ae9e795a2', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd66834a9fac2a57510d8fc9b7da7cbf6c164d312', 'committer_username': 'zas', 'committer_name': 'Laurent Monin', 'committer_email': None, 'commit_date': datetime.datetime(2009, 11, 10, 0, 41, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb2cb75d92e078a64af8328c50f1a8a380de2c51', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93a1249d8a86bafef440542f796ba96697800788', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8efeda161474f1810b30d568da5edf3674d3890e', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0286f3e4ad956dabb0f840a0abc5761883ac6779', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b762168cd4fc0614a7f8b936bd375d2c81b5447', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1333ee33a900df16a7267dfac5ec8e92cfc89b36', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb714d7cf6d2071e5fca2985d97d0195d9bdce6e', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '82585445ae003e54c3cdcc19a657edafee7903bf', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9af8002b16fdf59d8b4139e81485ff35e6f8af68', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8099f31da3bb930b68e07341be73811d2d049276', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4693adbce643c6710cd1bb1ce5b03e108e98b971', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f57b077e440a2df355618e97d96551ef9a88688', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'edb0e730c07d88ce34e21bf9218b1ffbf04447b9', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22a6d708bc815c8506dc226dd1d592a6ffbd6990', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f961bdc1d56fe2605e2b56b52ee881586f705da2', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d9921b153e759636825964aa3339f5d3371e246', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c8b1606c19f9040cc9a14f759c002f7c16ad016', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb993bdcff86ff9b5dbebcfcddba8fe482e10503', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b34e5e29870de8b3aa8ab98e707e52977b1d26d6', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c1194dcdbfea1cc1c17e128276f8a4e86a39563', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '152f176ecc507cd22956ff47b02f465d59169538', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0f26d0bceebf50af24474e3258b1874e3c1fba4', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc295688efdeac621e357a1fe9378203ba6bbd56', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9af0c9baad2266b44372d0f4a8cee62f1340fd71', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '141f0487f77fed3b00a4ee2488bbe5baf944f812', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '580ea23280eef26ad03fe76c6dbb0f6efd991f86', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf7b8db6b07665615489a005b8e347e194b427e8', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2763bc9d2e74a97c8c092c7e9d081a6c1e5ef09e', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c484252dc6dfa7378412f83d18dddaecd3b0411d', 'committer_username': 'zas', 'committer_name': 'Laurent Monin', 'committer_email': None, 'commit_date': datetime.datetime(2009, 11, 10, 0, 41, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40bffebc6c7713a595e5a1d734637156ff153432', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5820a5d49db82003a7987c921a52893b2884066', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0877331cab8c2a319c09060d84e3bd3c3164e7e3', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e70bccca4bc777b4359f1141fa22b8ce5c8ae61', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e72c9c17010e1239d44c975286d3d650c6b92c8b', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '187d231690eb1866074f35138dd812e2738d02f0', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}]",Kamil,76530971,skelly37@protonmail.com,User,,9,,23,20
1001827946,PICARD-2519: Allow passing supported URLs on command line,"<!--
    Hello! Thanks for submitting a pull request to MusicBrainz Picard. We
    appreciate your time and interest in helping our project!

    Use this template to help us review your change. Not everything is required,
    depending on your change. Keep or delete what is relevant for your change.
    Remember that it helps us review if you give more helpful info for us to
    understand your change.

    Ensure that you've read through and followed the Contributing Guidelines, in
    [CONTRIBUTING.md](https://github.com/metabrainz/picard/blob/master/CONTRIBUTING.md).
-->

# Summary

<!--
    Update the checkbox with an [x] for the type of contribution you are making.
-->

* This is a…
  * [ ] Bug fix
  * [x] Feature addition
  * [ ] Refactoring
  * [ ] Minor / simple change (like a typo)
  * [ ] Other
* **Describe this change in 1-2 sentences**:

Currently Picard supports passing file paths on command line to open the respective files. Picard also supports handling some URL patterns by drag and drop, e.g. MusicBrainz recordings, releases, release group and cdtoc URLs.

Extend Picard to also handle these supported URLs when passed via command line.

# Problem

<!--
    Anything that helps us understand why you are making this change goes here.
    What problem are you trying to fix? What does this change address?
-->

* JIRA ticket (_optional_): PICARD-2519
<!--
    Please make sure you prefix your pull request title with 'PICARD-XXX' in order
    for our ticket tracker to link your pull request to the relevant ticket.
-->



# Solution
call urllib.parse.urlparse on each argument marked as FILE to determine whether it's a file or URL, then pass it to the actual Tagger.


# Action

<!--
    Other than merging your change, do you want / need us to do anything else
    with your change? This could include reviewing a specific part of your PR.
-->
",True,2130,https://api.github.com/repos/metabrainz/picard/pulls/2130,https://github.com/metabrainz/picard/pull/2130,closed,124,7,3,31,15,21,0,0,[],2022-07-20 08:55:43+00:00,2022-07-31 11:33:07+00:00,959844.0,"11 days, 2:37:24","[{'comment_id': 925467688, 'comment_body': '## \n\nUnused BaseTreeView imported from picard.ui.itemviews\n\n[Show more details](https://github.com/metabrainz/picard/security/code-scanning/2160)', 'comment_created': datetime.datetime(2022, 7, 20, 10, 58, 19, tzinfo=datetime.timezone.utc), 'commenter': 'github-advanced-security[bot]', 'type': 'Bot'}, {'comment_id': 925467689, 'comment_body': '## \n\nUnused BaseTreeView imported from picard.ui.itemviews\n\n[Show more details](https://github.com/metabrainz/picard/security/code-scanning/2159)', 'comment_created': datetime.datetime(2022, 7, 20, 10, 58, 19, tzinfo=datetime.timezone.utc), 'commenter': 'github-advanced-security[bot]', 'type': 'Bot'}, {'comment_id': 926552299, 'comment_body': '```suggestion\r\n                mbids.append(parsed.netloc + parsed.path)\r\n```', 'comment_created': datetime.datetime(2022, 7, 21, 11, 13, 20, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 926553455, 'comment_body': 'I think we could uniquify arguments here, using sets instead of lists.\r\n\r\n', 'comment_created': datetime.datetime(2022, 7, 21, 11, 14, 50, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 926584142, 'comment_body': 'Actually a bad idea, sorry.\r\nIt will fail with paths like ""file:///some#thing""', 'comment_created': datetime.datetime(2022, 7, 21, 11, 54, 11, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 926585678, 'comment_body': ""So, let's revert to the item.replace?"", 'comment_created': datetime.datetime(2022, 7, 21, 11, 56, 3, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 926599238, 'comment_body': 'Okay, better idea: \r\n\r\n`item[7:]`', 'comment_created': datetime.datetime(2022, 7, 21, 12, 12, 25, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 927933309, 'comment_body': '`to_be_added` is only used here. We should move the preprocessing code above here too.\r\n\r\n ', 'comment_created': datetime.datetime(2022, 7, 22, 19, 25, 23, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 927935513, 'comment_body': 'To ease testing and to keep functions short, it would be preferable if this part of the code was in its own method.\r\n\r\n```python\r\n@staticmethod\r\ndef _parse_file_or_url_items(items):\r\n    files = set()\r\n    mbids = set()\r\n    urls = set()\r\n\r\n    ....\r\n\r\n    return files, mbids, urls\r\n\r\ndef load_to_picard(self, items):\r\n    files, mbids, urls = self._parse_file_or_url_items(items)\r\n```\r\n\r\nThen we can add tests for this method alone.', 'comment_created': datetime.datetime(2022, 7, 22, 19, 29, 23, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 928285781, 'comment_body': ""Seems nice, thanks. Though I'd rather return a dict instead of `return files, mbids, urls`. We're planning to parse commands as well in the future, four returned values seem to be more error-prone and overcomplicated."", 'comment_created': datetime.datetime(2022, 7, 24, 16, 58, 28, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 928304316, 'comment_body': 'Alternatively, we could use a class, see https://github.com/skelly37/picard/pull/3', 'comment_created': datetime.datetime(2022, 7, 24, 19, 47, 9, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 928315164, 'comment_body': ""Minor point, but since we're dealing with sets here I think this could be shortened a bit by using the combined sets as the iterator (unless you want to keep the duplicated code for clarity).  I haven't tested this, but I think the following should work:\r\n\r\n```suggestion\r\n            for item in parsed_items.mbids.union(parsed_items.urls):\r\n                thread.to_main(file_lookup.mbid_lookup, item, None, None, False)\r\n```"", 'comment_created': datetime.datetime(2022, 7, 24, 21, 34, 52, tzinfo=datetime.timezone.utc), 'commenter': 'rdswift', 'type': 'User'}, {'comment_id': 928327502, 'comment_body': 'I tend to prefer the set union using the `|` operator which is easier to read to me, dunno which one you prefer:\r\n\r\n```suggestion\r\n            for item in parsed_items.mbids | parsed_items.urls:\r\n                thread.to_main(file_lookup.mbid_lookup, item, None, None, False)\r\n```', 'comment_created': datetime.datetime(2022, 7, 24, 23, 36, 25, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 928365133, 'comment_body': ""You're right.  That is easier to read.  I actually prefer it the way you have it written."", 'comment_created': datetime.datetime(2022, 7, 25, 2, 28, 53, tzinfo=datetime.timezone.utc), 'commenter': 'rdswift', 'type': 'User'}, {'comment_id': 928484751, 'comment_body': ""I'm okay with that"", 'comment_created': datetime.datetime(2022, 7, 25, 5, 35, 38, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 928646581, 'comment_body': 'Please add an help', 'comment_created': datetime.datetime(2022, 7, 25, 9, 13, 42, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 928685811, 'comment_body': ""I've copied it from my docs PR\r\n"", 'comment_created': datetime.datetime(2022, 7, 25, 9, 56, 19, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 929018519, 'comment_body': 'Should we include a brief description of the formats of the inputs? Most people will probably understand the files and URLs, but not the required format for MBIDs.', 'comment_created': datetime.datetime(2022, 7, 25, 15, 28, 16, tzinfo=datetime.timezone.utc), 'commenter': 'rdswift', 'type': 'User'}, {'comment_id': 929081426, 'comment_body': 'I don’t think so. The help messages should be short and substantive. It should be documented in some place (my suggestion is picard docs and maybe the official wiki article about MBID) but not in --help imo.', 'comment_created': datetime.datetime(2022, 7, 25, 16, 31, 40, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 930779331, 'comment_body': 'I was bothered by calling `bring_tagger_front()` twice, so I added `ParseItemsToLoad.__bool__()` in  https://github.com/skelly37/picard/pull/4\r\nWhat do you think?', 'comment_created': datetime.datetime(2022, 7, 27, 8, 36, 1, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 930788637, 'comment_body': 'Good idea, thanks, merged.', 'comment_created': datetime.datetime(2022, 7, 27, 8, 45, 24, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}]","[{'commit_sha': 'e5b35cd4aa061022d0a60ea4f67ea0fab6d61bee', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af76417251a39ec4600a5b9bb9f33d164386cf7f', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b6e98ae2cf1d9d07bd9c556e2b0e8286ee2d5b48', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44e9670d3ff8940adefeab266bff201caef54c22', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a56da6668934463aab9e2179847e05c7612baaf7', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff09be49aa631955a7548e6c14807a1f4733a3c9', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e8bce2bf0ef48593b719f56c2d517df664b4d151', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '601786bc209595767f970e397f3dd316c23f9678', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad4e634d11e367ed490420cb016249ce6998e973', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1dcf5faf9881167009eb6cf5a909e67744bc79d3', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '413afd36a61b8d7fa55768bae92cc3af0891a12d', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72500034cfd32ac4582532fec9914da20035dd7a', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8fa89133a5f8c28eea57d995cba5330cd6542d78', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95933034658a759c6e7f03453d6396c564ba2f1d', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e42e4d0dd9a5e4d05eb2f34e49c39091428aad7e', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c440f230816083273f7d3bc25530aa2452808b92', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '962b25af48163b27347d8cf320f965bb61539b06', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ba6a19b9743d30577ecc3f124217b5337e46c5e', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1e2f6c94985b1939e21eb93463c9d41d56c6114', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8cfaede53356b75ccafe774329ee8b3a55eb4575', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8aca6d9ea551c367272f585e3c44280c64d06ee9', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7dad6435b420d79a122861a06510d2ec31b4ba8f', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74581db17021c35d561b45d2bd66ac3e1fa6482d', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f6dda9de23c7afe0453e9250768ea57e84dfd95', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56b54a3a5ded713a6bbdd228197e86c01b3776d3', 'committer_username': 'zas', 'committer_name': 'Laurent Monin', 'committer_email': None, 'commit_date': datetime.datetime(2009, 11, 10, 0, 41, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62cf5817840c82bc8d6aa7474881530b9eaaab9d', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c77621417766c22490ffd88061731b1781334c7', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3884612e30b3e880db5b509a03441a4c8ee569a7', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a28417c909708355adff3392a4833879dbfed068', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0416650642a0075a19b1e6a91df3e66c927456c1', 'committer_username': 'zas', 'committer_name': 'Laurent Monin', 'committer_email': None, 'commit_date': datetime.datetime(2009, 11, 10, 0, 41, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1aa27aac6892d4b5d5f1148713278c620a122329', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}]",Kamil,76530971,skelly37@protonmail.com,User,,9,,23,20
1013022110,PICARD-2526: Allow starting processing actions from the command line,"<!--
    Hello! Thanks for submitting a pull request to MusicBrainz Picard. We
    appreciate your time and interest in helping our project!

    Use this template to help us review your change. Not everything is required,
    depending on your change. Keep or delete what is relevant for your change.
    Remember that it helps us review if you give more helpful info for us to
    understand your change.

    Ensure that you've read through and followed the Contributing Guidelines, in
    [CONTRIBUTING.md](https://github.com/metabrainz/picard/blob/master/CONTRIBUTING.md).
-->

# Summary

<!--
    Update the checkbox with an [x] for the type of contribution you are making.
-->

* This is a…
  * [ ] Bug fix
  * [x] Feature addition
  * [ ] Refactoring
  * [ ] Minor / simple change (like a typo)
  * [ ] Other
* **Describe this change in 1-2 sentences**:

Users will be able to pass some commands to the existing instance with `-e`/`--exec` flag.

# Problem

It would be useful to tell the existing Picard instance what to do, e.g. QUIT, useful in combination with the other single-instance mode improvements

* JIRA ticket (_optional_): PICARD-2526
<!--
    Please make sure you prefix your pull request title with 'PICARD-XXX' in order
    for our ticket tracker to link your pull request to the relevant ticket.
-->



# Solution

- add command:// prefix to the commands
- send them as any other arg
- parse with urlparse, split by "";""
- execute

# Action

<!--
    Other than merging your change, do you want / need us to do anything else
    with your change? This could include reviewing a specific part of your PR.
-->
",True,2137,https://api.github.com/repos/metabrainz/picard/pulls/2137,https://github.com/metabrainz/picard/pull/2137,closed,240,13,2,26,54,55,0,0,[],2022-07-31 12:59:19+00:00,2022-08-29 18:11:56+00:00,2524357.0,"29 days, 5:12:37","[{'comment_id': 933985131, 'comment_body': '## \n\nUse of assert detected. The enclosed code will be removed when compiling to optimised byte code.\n\n[Show more details](https://github.com/metabrainz/picard/security/code-scanning/2172)', 'comment_created': datetime.datetime(2022, 7, 31, 13, 10, 8, tzinfo=datetime.timezone.utc), 'commenter': 'github-advanced-security[bot]', 'type': 'Bot'}, {'comment_id': 933985134, 'comment_body': '## \n\nUse of assert detected. The enclosed code will be removed when compiling to optimised byte code.\n\n[Show more details](https://github.com/metabrainz/picard/security/code-scanning/2173)', 'comment_created': datetime.datetime(2022, 7, 31, 13, 10, 9, tzinfo=datetime.timezone.utc), 'commenter': 'github-advanced-security[bot]', 'type': 'Bot'}, {'comment_id': 934049000, 'comment_body': ""I'm guessing these print statements were for your local debugging during development and shoud be removed?"", 'comment_created': datetime.datetime(2022, 7, 31, 22, 39, 16, tzinfo=datetime.timezone.utc), 'commenter': 'rdswift', 'type': 'User'}, {'comment_id': 934049008, 'comment_body': 'Remove?', 'comment_created': datetime.datetime(2022, 7, 31, 22, 39, 22, tzinfo=datetime.timezone.utc), 'commenter': 'rdswift', 'type': 'User'}, {'comment_id': 934049029, 'comment_body': 'Remove?', 'comment_created': datetime.datetime(2022, 7, 31, 22, 39, 29, tzinfo=datetime.timezone.utc), 'commenter': 'rdswift', 'type': 'User'}, {'comment_id': 934150919, 'comment_body': 'Yeah, it’s all for debugging purposes. As you can see, QUIT doesn’t work and I haven’t implemented most of the commands yet. So it’ll remain here for a while.', 'comment_created': datetime.datetime(2022, 8, 1, 5, 32, 24, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 935210979, 'comment_body': 'I wonder about how this would play if we want to pass arguments along commands: ""CMD1 ARG1 ARG2; CMD2 ARG3""\r\nIt might be useful, for example to target a specific cluster or album.\r\nAlso I\'m not sure about the handling of multiple commands using "";"" separator, instead of repeating ""-e"" option.\r\n@phw : what do you think about allowing arguments?\r\n\r\n\r\nI don\'t think we should convert to uppercase here, but instead do case-insensitive comparison in `handle_command()`.\r\n\r\n`item.replace(""command://"", \'\')` -> `item[10:]`\r\n\r\n\r\n', 'comment_created': datetime.datetime(2022, 8, 2, 7, 31, 18, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 935740855, 'comment_body': 'I agree that repeating the -e option with command and argument to use makes more sense from a user perspective.', 'comment_created': datetime.datetime(2022, 8, 2, 15, 31, 16, tzinfo=datetime.timezone.utc), 'commenter': 'rdswift', 'type': 'User'}, {'comment_id': 935748490, 'comment_body': 'I agree with the repeating -e, good point.\n\nI’m not sure what do you mean by a *case-insensitive comaprison* tho @zas', 'comment_created': datetime.datetime(2022, 8, 2, 15, 38, 32, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 936025283, 'comment_body': 'I meant just do the conversion when needed.\r\n\r\n```python\r\n    def handle_command(self, command):\r\n        command = command.upper()\r\n        if command == ""SHOW"":\r\n            self.bring_tagger_front()\r\n        elif command == ""QUIT"":\r\n            self.exit()\r\n```\r\n\r\nBTW, I was thinking about something like:\r\n\r\n```python\r\n    self.commands = {\r\n        \'SHOW\': self.handle_command_show,\r\n        \'QUIT\': self.handle_command_quit,\r\n        \'CMD_WITH_ARGS\': self.handle_command_with_args,\r\n    }\r\n\r\n...\r\n\r\n    def handle_command(self, command):\r\n        try:\r\n            cmd, argstring = command.strip().split("" "", 1)\r\n            commands[cmd.upper()](argstring.strip())\r\n        except KeyError:\r\n            log.error(""Unknown command: %r"", command)\r\n\r\n    def handle_command_show(self, argstring):\r\n        self.bring_tagger_front()\r\n\r\n    def handle_command_quit(self, argstring):\r\n        self.exit()\r\n\r\n    def handle_command_with_args(self, argstring):\r\n        if not argstring:\r\n            log.error(""Missing argument"")\r\n        do_something_with(argstring)\r\n```\r\n\r\n(indentation may be incorrect, just an example)\r\n\r\nIt would be easier to extend, and commands can be added dynamically.', 'comment_created': datetime.datetime(2022, 8, 2, 21, 3, 43, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 936067954, 'comment_body': 'When splitting, you may also need to trap `ValueError: not enough values to unpack (expected 2, got 1)` in case there is no space (no args for the command).\r\n\r\n**EDIT:** Or perhaps something like:\r\n\r\n```\r\ncmd, argstring = (command.strip() + "" "").split("" "", 1)\r\nargstring = argstring.strip()\r\n```', 'comment_created': datetime.datetime(2022, 8, 2, 22, 11, 18, tzinfo=datetime.timezone.utc), 'commenter': 'rdswift', 'type': 'User'}, {'comment_id': 936206454, 'comment_body': 'The problem is that we cannot use a flag (which is `-e/--exec`) more than once because it gets overriden. So even if we add `nargs=\'*\'`, we end up with something like this:\r\n\r\n```\r\n〉picard -e a -e b -e c\r\n[\'c\']\r\n\r\n〉picard -e a b c\r\n[\'a\', \'b\', \'c\']\r\n```\r\n\r\nSo we\'ve returned to the start point, in that case I stick to my `picard -e ""SHOW; CLUSTER; QUIT""` idea', 'comment_created': datetime.datetime(2022, 8, 3, 3, 40, 24, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 936391163, 'comment_body': '> The problem is that we cannot use a flag (which is -e/--exec) more than once because it gets overriden.\r\n\r\nTry this:\r\n\r\n```python\r\n>>> p = argparse.ArgumentParser()\r\n>>> p.add_argument(""-e"", nargs=\'+\', action=\'append\')\r\n_AppendAction(option_strings=[\'-e\'], dest=\'e\', nargs=\'+\', const=None, default=None, type=None, choices=None, help=None, metavar=None)\r\n>>> p.parse_args(""-e a b c -e d e -e f"".split())\r\nNamespace(e=[[\'a\', \'b\', \'c\'], [\'d\', \'e\'], [\'f\']])\r\n>>> p.parse_args(""-e"".split())\r\nusage: [-h] [-e E [E ...]]\r\n: error: argument -e: expected at least one argument\r\n```', 'comment_created': datetime.datetime(2022, 8, 3, 8, 35, 49, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 936588841, 'comment_body': 'A more pythonic approach:\r\n\r\n```python\r\ncmd, *args = command.split(\' \', 1)\r\nargstring = next(iter(args), """")\r\nthread.to_main(self.commands[cmd.upper()], argstring.strip())\r\n```', 'comment_created': datetime.datetime(2022, 8, 3, 12, 13, 26, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 936738938, 'comment_body': ""I wouldn't come up with such thing myself, thanks a lot!"", 'comment_created': datetime.datetime(2022, 8, 3, 14, 30, 30, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 936741490, 'comment_body': 'Aight, thanks', 'comment_created': datetime.datetime(2022, 8, 3, 14, 32, 34, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 937849248, 'comment_body': ""I'm not sure about it but at least it works and I can move further with the implementation"", 'comment_created': datetime.datetime(2022, 8, 4, 14, 20, 33, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 938235957, 'comment_body': ""@rdswift that's the `SCAN` you meant, right?"", 'comment_created': datetime.datetime(2022, 8, 4, 20, 50, 32, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 942610539, 'comment_body': 'I cannot seem to find a function submitting fingerprints, any ideas?', 'comment_created': datetime.datetime(2022, 8, 10, 15, 41, 4, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 942715161, 'comment_body': '> I cannot seem to find a function submitting fingerprints, any ideas?\r\n\r\nhttps://github.com/metabrainz/picard/blob/695d2aa7597fb6723da06ca6081413ffe5fcd58a/picard/acoustid/manager.py#L153', 'comment_created': datetime.datetime(2022, 8, 10, 17, 24, 45, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 943265065, 'comment_body': 'Perhaps it would be easier to move this near `handle_command_*()` methods:\r\n\r\nHere call:\r\n```python\r\n    self._init_remote_commands()\r\n```\r\n\r\nNear  `handle_command_*()` methods:\r\n\r\n```python\r\n    def _init_remote_commands(self):\r\n        self.commands = {\r\n            ""CLUSTER"": self.handle_command_cluster,\r\n            ""FINGERPRINT"": self.handle_command_fingerprint,\r\n            ""LOOKUP"": self.handle_command_lookup,\r\n            ""QUIT"": self.handle_command_quit,\r\n            ""REMOVE_SAVED"": self.handle_command_remove_saved,\r\n            ""SAVE_COMPLETE"": self.handle_command_save_complete,\r\n            ""SCAN"": self.handle_command_scan,\r\n            ""SHOW"": self.handle_command_show,\r\n            ""SUBMIT_FINGERPRINTS"": self.handle_command_submit_fingerprints,\r\n        }\r\n```', 'comment_created': datetime.datetime(2022, 8, 11, 9, 10, 29, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 943270054, 'comment_body': 'Not sure the conversion to `set` is needed here, perhaps we can just use:\r\n\r\n```python\r\ndef get_album_pane_tracks(self):\r\n    for album in self.albums.values():\r\n        for track in album.iterfiles():\r\n            yield track\r\n```\r\n\r\nAt worse, if required, conversion to set can be done in caller:\r\n\r\n```python\r\nfor track in set(self.get_album_pane_tracks()):\r\n```\r\n\r\nWhat do you think?', 'comment_created': datetime.datetime(2022, 8, 11, 9, 15, 59, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 943695947, 'comment_body': ""The reason I was adding them to a set was because I forgot/didn't know about the `values` method. So it is not required and the `yield` approach is much better, thanks :)"", 'comment_created': datetime.datetime(2022, 8, 11, 16, 43, 21, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 945545713, 'comment_body': ""I think that's equivalent to:\r\n\r\n```suggestion\r\n        return self.unclustered_files.files + list(self.get_album_pane_tracks()) + list(self.clusters.iterfiles())\r\n```"", 'comment_created': datetime.datetime(2022, 8, 15, 9, 2, 11, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 945546556, 'comment_body': '```suggestion\r\n                file.remove()\r\n```\r\n\r\n?', 'comment_created': datetime.datetime(2022, 8, 15, 9, 3, 20, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 945554144, 'comment_body': 'Yeah, I was experimenting a bit and finally left with some typo, thanks for noticing', 'comment_created': datetime.datetime(2022, 8, 15, 9, 15, 1, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 945841250, 'comment_body': 'This got already removed on master, I think rebasing this branch against master would solve that.', 'comment_created': datetime.datetime(2022, 8, 15, 14, 59, 27, tzinfo=datetime.timezone.utc), 'commenter': 'phw', 'type': 'User'}, {'comment_id': 945854347, 'comment_body': ""You've approved and commented so I'm confused\r\n\r\nShould I do it now or is it just a tip for the future PRs?\r\n"", 'comment_created': datetime.datetime(2022, 8, 15, 15, 10, 38, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 945870105, 'comment_body': 'Sorry, saw this after I had already approved. Can you rebase this PR against master? I think this should remove this change from the diff.', 'comment_created': datetime.datetime(2022, 8, 15, 15, 23, 32, tzinfo=datetime.timezone.utc), 'commenter': 'phw', 'type': 'User'}, {'comment_id': 945878922, 'comment_body': 'Done :)', 'comment_created': datetime.datetime(2022, 8, 15, 15, 32, 59, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 946736084, 'comment_body': '> -e help seems okay to me. Should be done by the end of the day.\r\n\r\nIn that case, I suggest we add that to the help text for the `-e` option.  Perhaps something like:\r\n\r\n```suggestion\r\n    parser.add_argument(""-e"", ""--exec"", nargs=""+"", action=\'append\',\r\n                        help=""send command (arguments can be entered after space) to a running instance ""\r\n                        ""(use `-e help` for a list of the available commands"",\r\n                        metavar=""COMMAND"")\r\n```', 'comment_created': datetime.datetime(2022, 8, 16, 12, 50, 28, tzinfo=datetime.timezone.utc), 'commenter': 'rdswift', 'type': 'User'}, {'comment_id': 946837132, 'comment_body': '@rdswift and how do you see `-e help`?\r\n\r\nMy idea is to\r\n1) add your suggestion\r\n2) scan `exec` args for help. If help is present, print help instead of passing the args to the pipe\r\n3) just use `print`(?) for some help message, as consistent with `picard --help` as possible\r\n\r\nAny better ideas or should I go this way?', 'comment_created': datetime.datetime(2022, 8, 16, 14, 17, 18, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 947026398, 'comment_body': 'What you suggest sounds good to me.  I also think if you could include a brief note about being able to have multiple commands and them processed in the order they appear. ', 'comment_created': datetime.datetime(2022, 8, 16, 16, 52, 22, tzinfo=datetime.timezone.utc), 'commenter': 'rdswift', 'type': 'User'}, {'comment_id': 947174209, 'comment_body': 'Just to clarify, if a command with arguments is entered does the wole thing need to be in quotes?  For example `-e lookup path/to/my/eac/log/file` would need to be entered as `-e ""lookup path/to/my/eac/log/file""`?  If so, the brief help should probably mention that as well.  (I\'m actually thinking that it may not need to include the quotes, but does that become a problem with the optional positional arguments on the command line?)', 'comment_created': datetime.datetime(2022, 8, 16, 19, 24, 29, tzinfo=datetime.timezone.utc), 'commenter': 'rdswift', 'type': 'User'}, {'comment_id': 947232294, 'comment_body': ""Nah, you don't need the quotes, unless the path contains spaces (which is an expected behavior imo)"", 'comment_created': datetime.datetime(2022, 8, 16, 20, 42, 37, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 955685222, 'comment_body': ""## \n\nNumber of parameters was 3 in 'Item.load' and is now 2 in overridden 'File.load' method\n\n[Show more details](https://github.com/metabrainz/picard/security/code-scanning/2181)"", 'comment_created': datetime.datetime(2022, 8, 26, 6, 2, 16, tzinfo=datetime.timezone.utc), 'commenter': 'github-advanced-security[bot]', 'type': 'Bot'}, {'comment_id': 955685227, 'comment_body': ""## \n\nParameters differ from overridden 'load' method\n\n[Show more details](https://github.com/metabrainz/picard/security/code-scanning/2179)"", 'comment_created': datetime.datetime(2022, 8, 26, 6, 2, 16, tzinfo=datetime.timezone.utc), 'commenter': 'github-advanced-security[bot]', 'type': 'Bot'}, {'comment_id': 955723568, 'comment_body': ""I don't get why this is introduced at this point. Can you explain why it is needed?\r\n\r\n~~Additionally `add_paths()` is very likely to be used by external plugins, making it a coroutine will break them.~~\r\nEdit: well, nope.\r\n\r\nIt should be noted that asyncio wasn't used at all in the code until its introduction here. I don't say we shouldn't use asyncio but I fear it breaks things.\r\n\r\n@phw what do you think?"", 'comment_created': datetime.datetime(2022, 8, 26, 7, 4, 36, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 955724065, 'comment_body': ""## \n\nNumber of parameters was 3 in 'Item.load' and is now 2 in overridden 'File.load' method (arguments-differ)\n\n[Show more details](https://github.com/metabrainz/picard/security/code-scanning/2180)"", 'comment_created': datetime.datetime(2022, 8, 26, 7, 5, 21, tzinfo=datetime.timezone.utc), 'commenter': 'github-advanced-security[bot]', 'type': 'Bot'}, {'comment_id': 956103512, 'comment_body': 'I really did not want to introduce asyncio to the codebase but I could not come up with a better idea to actually **await** for the files to be loaded. If you have any better idea how to run commands after all the files are already loaded, I’ll gladly remove the asyncio.', 'comment_created': datetime.datetime(2022, 8, 26, 14, 28, 43, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 956107488, 'comment_body': 'If i just tried adding some thread (pool) and block the function until the amount of all files in picard matches the number of arguments, I ended up with the whole app getting frozen', 'comment_created': datetime.datetime(2022, 8, 26, 14, 32, 17, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 956123966, 'comment_body': ""> I really did not want to introduce asyncio to the codebase but I could not come up with a better idea to actually **await** for the files to be loaded\r\n\r\nThat's fine, I have nothing against using asyncio if it helps, I'm just worried those changes could break something.\r\n"", 'comment_created': datetime.datetime(2022, 8, 26, 14, 47, 24, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 956133292, 'comment_body': ""Actually, seems like the issue persists even with asyncio (but there's some improvement). I suppose that we might need to write some blocking file-loading flow for the sake of `picard -e LOAD` command in the next PR"", 'comment_created': datetime.datetime(2022, 8, 26, 14, 56, 17, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 956548931, 'comment_body': 'So @phw, the question for you is whether we merge at the current state or reset to https://github.com/metabrainz/picard/pull/2137/commits/4d0867faaef54d21bbde3a8d784a44029c6946df and re-apply the `picard -e SAVE_MATCHED` patch, while leaving the `asyncio` stuff for a next ticket', 'comment_created': datetime.datetime(2022, 8, 27, 7, 8, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 956554652, 'comment_body': ""After further research: I tend to reset to the mentioned commit. We need to introduce second type of all executed commands: blocking ones. This is too much for this PR imo. \r\n\r\nEven though we await load, there is still save, lookup, scan etc. Let's leave it for now."", 'comment_created': datetime.datetime(2022, 8, 27, 8, 12, 46, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 956555255, 'comment_body': ""We do not want to run GUI events in one thread, but the command-line commands should be executed in a blocking way to ensure proper execution order. \r\n\r\nSo my diagnosis is:\r\n- each new command requires research if it uses any threaded code. If yes, it has to be cloned without this threaded code (or the futures have to be joined at some place).\r\n\r\nAnd my suggestion is:\r\n- reset to https://github.com/metabrainz/picard/commit/4d0867faaef54d21bbde3a8d784a44029c6946df, re-apply `picard -e SAVE_MATCHED` patch and merge\r\n- in the second PR let's take care of the execution order: i.e. join threads & await functions in their clone versions for our CLI purposes.\r\n- in the third one let's add:\r\n    - `LOAD`\r\n    - `LOG_DUMP`\r\n    - `LOG_CLEAR`\r\n    - `FROM_FILE`: (load commands from a given text file)\r\n    \r\nSorry for the mess but it's really complex to me, I'm still learning the codebase.\r\n\r\nWhat's your take on this @phw @zas?"", 'comment_created': datetime.datetime(2022, 8, 27, 8, 19, 41, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 956557274, 'comment_body': 'I agree with your suggestion.\r\n', 'comment_created': datetime.datetime(2022, 8, 27, 8, 43, 47, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 956686761, 'comment_body': ""Since you've told me to keep such changes away from the feature PR, when this one gets merged, I'll refactor the class to take one arg less by embedding the remaining picard args into `to_load`"", 'comment_created': datetime.datetime(2022, 8, 28, 8, 5, 56, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 956688999, 'comment_body': '```suggestion\r\n        yield from self.unclustered_files.files\r\n        yield from self.get_album_pane_tracks()\r\n        yield from self.clusters.iterfiles()\r\n```', 'comment_created': datetime.datetime(2022, 8, 28, 8, 24, 2, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 957606710, 'comment_body': 'This could be\r\n\r\n```python\r\nyield from album.iterfiles()\r\n```\r\n\r\nOr even the entire method could also be done with:\r\n\r\n```python\r\ndef get_album_pane_tracks(self):\r\n   return iter_files_from_objects(self.albums)\r\n```\r\n\r\nAlso I find the name a bit misleading, it is not yielding Track objects, but files, so maybe also name this ` iter_album_files`?\r\n', 'comment_created': datetime.datetime(2022, 8, 29, 17, 21, 40, tzinfo=datetime.timezone.utc), 'commenter': 'phw', 'type': 'User'}, {'comment_id': 957608883, 'comment_body': 'Can we maybe name it `iter_all_files`? Currently this is easily confused with the similar named `get_files_from_objects` (which we probably should remove anyway, but still)', 'comment_created': datetime.datetime(2022, 8, 29, 17, 24, 13, tzinfo=datetime.timezone.utc), 'commenter': 'phw', 'type': 'User'}, {'comment_id': 957646995, 'comment_body': 'Just noticed this, is this a debugging left over?', 'comment_created': datetime.datetime(2022, 8, 29, 18, 0, 29, tzinfo=datetime.timezone.utc), 'commenter': 'phw', 'type': 'User'}]","[{'commit_sha': '55c4f49f1a2e04c1cbafcd142e2aba522a8c3b66', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dac5069c1d3afc99cebc894611b81daf81560ea2', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd0981623c89dd6e42c03b1b226820d852d3f03e', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '542b68a0947057402c94709339d94f14e4005f7c', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d5884cde688292ced19a984fc7f5a981841f099', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f13377b9d96ce0a603b65d6ec153d860f67916a', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74ea98dff8239510af911d981e9fff0263ddc087', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '54d334c1ef8c958b33401444ff996b7cf8cb59e5', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c70e662513cf966ec7bdc938b12993aef854d4c', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e0a41da0cd282de96321cfbc9e9504afce4c9a3d', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93e3bd5ae2c92da48ca223acc61b0d05645cfa63', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f7c18ae60cc0678fafaa8ee0c227ceec7d076e6', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f2dafea33b2fe7871da589f6dbbfe39e314f187', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6cdd6178f6fafe6fc02e4be9d43e375aa4cb5d16', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20a399263da392c280b0a8476dbf088e5df003ac', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '31cfe559dd103b9eefe187bc7b1e303508b451d6', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '85f493f21c8313229318a77b310575c843b95b9c', 'committer_username': 'zas', 'committer_name': 'Laurent Monin', 'committer_email': None, 'commit_date': datetime.datetime(2009, 11, 10, 0, 41, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad9ee5d537ac215f1b2a1f5e0189f28dd97f371f', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a5ec333cf40ba2d1a060ebf59537c929b61b719', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f06a2d44e390ff887a69f6984b2ef8d0833a9056', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d0867faaef54d21bbde3a8d784a44029c6946df', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ec4720d3179a36d937407fd849364ffc69ff820', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b420fd39137c6a5b5cee44b0862210f321db88bb', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5275a15cb9de8b3facffa16b386a5a9d519db7c1', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '171eaba40573b2678f4f03613193dda05a994034', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bcc52cb2a3d1c1329a92fcb03e93de5d087fca17', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}]",Kamil,76530971,skelly37@protonmail.com,User,,9,,23,20
1045782318,`REMOVE_*` commands enhancements,"<!--
    Hello! Thanks for submitting a pull request to MusicBrainz Picard. We
    appreciate your time and interest in helping our project!

    Use this template to help us review your change. Not everything is required,
    depending on your change. Keep or delete what is relevant for your change.
    Remember that it helps us review if you give more helpful info for us to
    understand your change.

    Ensure that you've read through and followed the Contributing Guidelines, in
    [CONTRIBUTING.md](https://github.com/metabrainz/picard/blob/master/CONTRIBUTING.md).
-->

# Summary

<!--
    Update the checkbox with an [x] for the type of contribution you are making.
-->

* This is a…
  * [x] Bug fix
  * [x] Feature addition
  * [ ] Refactoring
  * [ ] Minor / simple change (like a typo)
  * [ ] Other
* **Describe this change in 1-2 sentences**:
Another batch of useful commands + patch to keep it strictly related to the removal procedure.

# Problem

The commands were left to do later but seemed useful to us

* JIRA ticket (_optional_): None
<!--
    Please make sure you prefix your pull request title with 'PICARD-XXX' in order
    for our ticket tracker to link your pull request to the relevant ticket.
-->



# Solution

1. Added commands to remove empty clusters and albums & to remove unclustered files
2. Started using Tagger's removal methods to fix unexpected behavior I have encountered during development

# Action

May be squashed imo
",True,2141,https://api.github.com/repos/metabrainz/picard/pulls/2141,https://github.com/metabrainz/picard/pull/2141,closed,26,8,1,8,2,3,0,0,[],2022-09-04 20:34:35+00:00,2022-09-07 06:57:42+00:00,210187.0,"2 days, 10:23:07","[{'comment_id': 963096490, 'comment_body': ""This double loop bothers me, isn't that equivalent to:\r\n\r\n```python\r\nfor file in self.iter_all_files():\r\n   if file.filename == argstring:\r\n       self.remove([file])\r\n       return\r\n```"", 'comment_created': datetime.datetime(2022, 9, 5, 19, 10, 12, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 963286081, 'comment_body': 'This code looks incorrect to me:\r\n- Album.iterfiles() return an iterator, to evaluate if it has elements a conversion to a list is somehow needed\r\n- the logic seems to be reversed, we want to remove empty albums/clusters\r\n\r\nI think the following code is what we need (untested):\r\n\r\n```python\r\nfor album in self.albums:\r\n   if not any(album.iterfiles()):\r\n       self.remove_album(album)\r\n\r\nfor cluster in self.clusters:\r\n    if not any(cluster.iterfiles()):\r\n            self.remove_cluster(cluster)\r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 6, 5, 40, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 963823256, 'comment_body': 'Yeah, I had forgotten to add `not` here. Good catch, I really appreciate your reviews (not just here) :)', 'comment_created': datetime.datetime(2022, 9, 6, 15, 3, 9, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}]","[{'commit_sha': '06557d546c39cf0d14897a6487ead59b1658e72a', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb5cc8553fb876c78410b703baeb3744c0ded196', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '690766a4539ff73b0171c74d5890304554aef65e', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61992ea493f3dd63972ff3242f69f81ceecf35ee', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a444cc4f3a0eae2da0c846d1f93b2f083cbd8e1c', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '31e7fd0ae797dd253a39c96ae5a61b7ef60d07b3', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f7f8b2b263f74a73f6f0881eb7260088bb30a329', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f58a3c0c4857f6d0770f2744e05b547a3ba879b', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}]",Kamil,76530971,skelly37@protonmail.com,User,,9,,23,20
1045787478,Added command: LOAD,"<!--
    Hello! Thanks for submitting a pull request to MusicBrainz Picard. We
    appreciate your time and interest in helping our project!

    Use this template to help us review your change. Not everything is required,
    depending on your change. Keep or delete what is relevant for your change.
    Remember that it helps us review if you give more helpful info for us to
    understand your change.

    Ensure that you've read through and followed the Contributing Guidelines, in
    [CONTRIBUTING.md](https://github.com/metabrainz/picard/blob/master/CONTRIBUTING.md).
-->

# Summary

<!--
    Update the checkbox with an [x] for the type of contribution you are making.
-->

* This is a…
  * [ ] Bug fix
  * [x] Feature addition
  * [ ] Refactoring
  * [ ] Minor / simple change (like a typo)
  * [ ] Other
* **Describe this change in 1-2 sentences**:
A command that allows to load files as a part of the command pipeline

# Problem

It would be useful to load a file after some commands have already been executed as a part of the pipeline. The `load` command extends positional arguments' functionality.

* JIRA ticket (_optional_): None
<!--
    Please make sure you prefix your pull request title with 'PICARD-XXX' in order
    for our ticket tracker to link your pull request to the relevant ticket.
-->



# Solution

Added the needed command


# Action
Should be squashed on merge
<!--
    Other than merging your change, do you want / need us to do anything else
    with your change? This could include reviewing a specific part of your PR.
-->
",True,2142,https://api.github.com/repos/metabrainz/picard/pulls/2142,https://github.com/metabrainz/picard/pull/2142,closed,12,0,1,3,4,2,0,0,[],2022-09-04 21:07:31+00:00,2022-09-07 06:52:55+00:00,207924.0,"2 days, 9:45:24","[{'comment_id': 963095842, 'comment_body': 'This prevents something like `-e load https://musicbrainz.org/release/f1e04a39-65fc-48c9-b9f9-fa1dbe7e9326`.\r\nInstead a check like the one at https://github.com/metabrainz/picard/blob/974547ce32718b35d8da85445887856fa4062fb5/picard/tagger.py#L1335 could be used.\r\n', 'comment_created': datetime.datetime(2022, 9, 5, 19, 7, 42, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 963115748, 'comment_body': 'Actually, none of it is needed. See the recent commit.', 'comment_created': datetime.datetime(2022, 9, 5, 20, 23, 51, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}]","[{'commit_sha': '54082593458b168ea334e21fd57ae9ad3c61c6b2', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '974547ce32718b35d8da85445887856fa4062fb5', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c8724584399665a2ea4cc07d96ac49786561e26', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}]",Kamil,76530971,skelly37@protonmail.com,User,,9,,23,20
1045793489,Added command: FROM_FILE,"<!--
    Hello! Thanks for submitting a pull request to MusicBrainz Picard. We
    appreciate your time and interest in helping our project!

    Use this template to help us review your change. Not everything is required,
    depending on your change. Keep or delete what is relevant for your change.
    Remember that it helps us review if you give more helpful info for us to
    understand your change.

    Ensure that you've read through and followed the Contributing Guidelines, in
    [CONTRIBUTING.md](https://github.com/metabrainz/picard/blob/master/CONTRIBUTING.md).
-->

# Summary

<!--
    Update the checkbox with an [x] for the type of contribution you are making.
-->

* This is a…
  * [ ] Bug fix
  * [x] Feature addition
  * [ ] Refactoring
  * [ ] Minor / simple change (like a typo)
  * [ ] Other
* **Describe this change in 1-2 sentences**:
It would be useful to keep command pipeline in a reusable file

# Problem

Some operations are repeatable so using such file can greatly automate the workflow

* JIRA ticket (_optional_): None
<!--
    Please make sure you prefix your pull request title with 'PICARD-XXX' in order
    for our ticket tracker to link your pull request to the relevant ticket.
-->



# Solution

1. Added the command that takes a file path and iterates all over its lines to process the commands


# Action
Should be squashed on merge

<!--
    Other than merging your change, do you want / need us to do anything else
    with your change? This could include reviewing a specific part of your PR.
-->
",True,2143,https://api.github.com/repos/metabrainz/picard/pulls/2143,https://github.com/metabrainz/picard/pull/2143,closed,76,0,2,13,10,6,0,0,[],2022-09-04 21:50:01+00:00,2022-09-07 08:47:30+00:00,212249.0,"2 days, 10:57:29","[{'comment_id': 962420181, 'comment_body': '```suggestion\r\n    def handle_command_from_file(self, argstring):\r\n        try:\r\n            lines = [line.strip() for line in open(argstring).readlines()]\r\n        except OSError:\r\n            log.error(""Error opening command file: %s"", argstring)\r\n            return\r\n        except Exception:\r\n            log.error(""Error reading command file: %s"", argstring)\r\n            return\r\n\r\n        for line in lines:\r\n            elements = shlex.split(line.strip())\r\n            if not elements:\r\n                continue\r\n            command_args = elements[1:] or [\'\']\r\n            for element in command_args:\r\n                self.handle_command(f""command://{elements[0]} {element}"")\r\n```\r\n\r\nNote that you would also have to include the `shlex` module.\r\n\r\nThis incorporates some error checking to avoid an unhandled exception if there is a problem reading the command file, and uses the same optimizations that evolved in your previous PR.', 'comment_created': datetime.datetime(2022, 9, 5, 1, 50, 7, tzinfo=datetime.timezone.utc), 'commenter': 'rdswift', 'type': 'User'}, {'comment_id': 962494654, 'comment_body': ""## \n\nUndefined variable 'shlex' (undefined-variable)\n\n[Show more details](https://github.com/metabrainz/picard/security/code-scanning/2188)"", 'comment_created': datetime.datetime(2022, 9, 5, 5, 40, 44, tzinfo=datetime.timezone.utc), 'commenter': 'github-advanced-security[bot]', 'type': 'Bot'}, {'comment_id': 963007739, 'comment_body': ""In case you want to be able to have comment lines in the command file.  Since the first element should be a command (and none of them starts with an octothorpe), it should be safe to skip any line starting with an octothorpe (and/or other character if preferred) as a comment.\r\n\r\n```suggestion\r\n            # Skip blank lines or comment lines beginning with an octothorpe (#)\r\n            if not elements or elements[0].startswith('#'):\r\n                continue\r\n```\r\n"", 'comment_created': datetime.datetime(2022, 9, 5, 15, 26, 21, tzinfo=datetime.timezone.utc), 'commenter': 'rdswift', 'type': 'User'}, {'comment_id': 963024871, 'comment_body': 'Thanks!', 'comment_created': datetime.datetime(2022, 9, 5, 15, 53, 27, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 963061458, 'comment_body': 'Maybe also test a line with whitespaces at the start/end (for `strip()`).', 'comment_created': datetime.datetime(2022, 9, 5, 17, 13, 25, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 963067236, 'comment_body': 'done :)', 'comment_created': datetime.datetime(2022, 9, 5, 17, 30, 29, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}]","[{'commit_sha': 'b3b50124c9bef58a5ab02539fa9d28481e1a8d71', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70fe4c85ffa2335f3900f13de174fd39bb75883b', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1b4234a055fc91c9ad76d42989fd9bf40b3caa2', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7364bb83b58148fcd1b33435e7c20123704c8e35', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b1701a59200319b6892f92a36f606e18bb339e24', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c625ace604a89d62098565fa5b6735264d0dd83', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96dc9d8eb116c1378705615817fcf0d4a26cc031', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '092563910d80a3435a3dd110c342f61dc9128fab', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4bb99203099182f8188b4f35a0564be184336ef6', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3118c6e81ef1f44d5416af29b35ed458a36b20c2', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a0b3785a5c2aec6c4a66946b38536180bdb765f', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b17012a3871c927fb8d2708bad6df6b390a38cf5', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eaadc422eb2d6ca1cb9dd70fc57fdcbe23f1e6bd', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}]",Kamil,76530971,skelly37@protonmail.com,User,,9,,23,20
1047849843,`CLEAR_LOGS` command,"<!--
    Hello! Thanks for submitting a pull request to MusicBrainz Picard. We
    appreciate your time and interest in helping our project!

    Use this template to help us review your change. Not everything is required,
    depending on your change. Keep or delete what is relevant for your change.
    Remember that it helps us review if you give more helpful info for us to
    understand your change.

    Ensure that you've read through and followed the Contributing Guidelines, in
    [CONTRIBUTING.md](https://github.com/metabrainz/picard/blob/master/CONTRIBUTING.md).
-->

# Summary

<!--
    Update the checkbox with an [x] for the type of contribution you are making.
-->

* This is a…
  * [ ] Bug fix
  * [x] Feature addition
  * [ ] Refactoring
  * [ ] Minor / simple change (like a typo)
  * [ ] Other
* **Describe this change in 1-2 sentences**:

# Problem

A command allowing to clear Picard logs.

* JIRA ticket (_optional_): None


# Solution

TBD

# Action

<!--
    Other than merging your change, do you want / need us to do anything else
    with your change? This could include reviewing a specific part of your PR.
-->
",True,2144,https://api.github.com/repos/metabrainz/picard/pulls/2144,https://github.com/metabrainz/picard/pull/2144,closed,12,0,2,4,4,9,0,0,[],2022-09-06 17:35:30+00:00,2022-09-07 15:43:12+00:00,79662.0,22:07:42,"[{'comment_id': 964398816, 'comment_body': 'This only concerns the History View.\r\n\r\nSee https://github.com/skelly37/picard/pull/10\r\n', 'comment_created': datetime.datetime(2022, 9, 7, 5, 35, 6, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 964400484, 'comment_body': ""Others remote commands start with a verb, so I think `CLEAR_LOGS` would be more consistent (and plural because it clears all logs).\r\n\r\nNow I'm not sure we need to clear all logs in one command, we could also provide a generic command `CLEAR_LOG <logname>`, with `logname` being either  `main` or `history`.\r\n\r\n@rdswift what's your take on this?"", 'comment_created': datetime.datetime(2022, 9, 7, 5, 38, 30, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 964835642, 'comment_body': ""That is likely better, but we'll need to provide some explanation somewhere about the difference between the two (because even I'm not sure :wink: )."", 'comment_created': datetime.datetime(2022, 9, 7, 13, 22, 2, tzinfo=datetime.timezone.utc), 'commenter': 'rdswift', 'type': 'User'}, {'comment_id': 964854614, 'comment_body': ""Ok, let's keep it simple for now, we rename the command `CLEAR_LOGS` and if we need in the future we can still introduce `CLEAR_LOG <logname>`.\r\n\r\n@skelly37 can you make this change?"", 'comment_created': datetime.datetime(2022, 9, 7, 13, 37, 26, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 964874683, 'comment_body': '> Others remote commands start with a verb, so I think `CLEAR_LOGS` would be more consistent (and plural because it clears all logs).\r\n\r\nIn that case, should we also be renaming the `FROM_FILE` command to something like `READ_COMMANDS_FROM_FILE` (or something a bit shorter, but still starting with a verb)?\r\n\r\n**EDIT:** Perhaps `IMPORT_COMMAND_FILE` or maybe `IMPORT_COMMANDS`?', 'comment_created': datetime.datetime(2022, 9, 7, 13, 52, 32, tzinfo=datetime.timezone.utc), 'commenter': 'rdswift', 'type': 'User'}, {'comment_id': 964887376, 'comment_body': ""> Ok, let's keep it simple for now, we rename the command `CLEAR_LOGS` and if we need in the future we can still introduce `CLEAR_LOG <logname>`.\r\n> \r\n> @skelly37 can you make this change?\r\n\r\nJust rename into `CLEAR_LOGS`?"", 'comment_created': datetime.datetime(2022, 9, 7, 14, 2, 41, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 964888174, 'comment_body': ""> > Others remote commands start with a verb, so I think `CLEAR_LOGS` would be more consistent (and plural because it clears all logs).\r\n> \r\n> In that case, should we also be renaming the `FROM_FILE` command to something like `READ_COMMANDS_FROM_FILE` (or something a bit shorter, but still starting with a verb)?\r\n> \r\n> **EDIT:** Perhaps `IMPORT_COMMAND_FILE` or maybe `IMPORT_COMMANDS`?\r\n\r\nI don't think so, `FROM_FILE` sounds pretty fine and intuitive."", 'comment_created': datetime.datetime(2022, 9, 7, 14, 3, 22, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 964921472, 'comment_body': '> Just rename into `CLEAR_LOGS`?\r\n\r\nYup, think about matching function too.', 'comment_created': datetime.datetime(2022, 9, 7, 14, 31, 9, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 964923377, 'comment_body': ""> > > Others remote commands start with a verb, so I think `CLEAR_LOGS` would be more consistent (and plural because it clears all logs).\r\n> > \r\n> > \r\n> > In that case, should we also be renaming the `FROM_FILE` command to something like `READ_COMMANDS_FROM_FILE` (or something a bit shorter, but still starting with a verb)?\r\n> > **EDIT:** Perhaps `IMPORT_COMMAND_FILE` or maybe `IMPORT_COMMANDS`?\r\n> \r\n> I don't think so, `FROM_FILE` sounds pretty fine and intuitive.\r\n\r\nI tend to agree, `FROM_FILE` works for me.\r\n"", 'comment_created': datetime.datetime(2022, 9, 7, 14, 32, 38, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}]","[{'commit_sha': '85047455bd82bfff24adf4ff292fd376857ce8b6', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd94f4c08f3e938d52cabeac246f639f35dacf088', 'committer_username': 'zas', 'committer_name': 'Laurent Monin', 'committer_email': None, 'commit_date': datetime.datetime(2009, 11, 10, 0, 41, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9da7031c8710779288181016c2e36e4ecf8c1b0f', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7886d851c605fab0af0fca82d6756dc1c1865ffe', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}]",Kamil,76530971,skelly37@protonmail.com,User,,9,,23,20
1048865512,`FROM_FILE` command fixed,"<!--
    Hello! Thanks for submitting a pull request to MusicBrainz Picard. We
    appreciate your time and interest in helping our project!

    Use this template to help us review your change. Not everything is required,
    depending on your change. Keep or delete what is relevant for your change.
    Remember that it helps us review if you give more helpful info for us to
    understand your change.

    Ensure that you've read through and followed the Contributing Guidelines, in
    [CONTRIBUTING.md](https://github.com/metabrainz/picard/blob/master/CONTRIBUTING.md).
-->

# Summary

<!--
    Update the checkbox with an [x] for the type of contribution you are making.
-->

* This is a…
  * [x] Bug fix
  * [ ] Feature addition
  * [ ] Refactoring
  * [ ] Minor / simple change (like a typo)
  * [ ] Other
* **Describe this change in 1-2 sentences**:
The command was not handled properly after being read.

# Problem

We passed an unparsed string to a function requiring parsed one.

* JIRA ticket (_optional_): None
<!--
    Please make sure you prefix your pull request title with 'PICARD-XXX' in order
    for our ticket tracker to link your pull request to the relevant ticket.
-->



# Solution

Changed the execution stack so the read command is parsed correctly. 

# Action

ping @rdswift 
",True,2145,https://api.github.com/repos/metabrainz/picard/pulls/2145,https://github.com/metabrainz/picard/pull/2145,closed,1,1,1,1,1,0,0,0,[],2022-09-07 14:44:11+00:00,2022-09-07 15:40:40+00:00,3389.0,0:56:29,[],"[{'commit_sha': 'd5b8e7d30ae11094f46295369eef07797a6c6867', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}]",Kamil,76530971,skelly37@protonmail.com,User,,9,,23,20
1048999305,Added configurable way to dump Picard logs into a file,"<!--
    Hello! Thanks for submitting a pull request to MusicBrainz Picard. We
    appreciate your time and interest in helping our project!

    Use this template to help us review your change. Not everything is required,
    depending on your change. Keep or delete what is relevant for your change.
    Remember that it helps us review if you give more helpful info for us to
    understand your change.

    Ensure that you've read through and followed the Contributing Guidelines, in
    [CONTRIBUTING.md](https://github.com/metabrainz/picard/blob/master/CONTRIBUTING.md).
-->

# Summary

<!--
    Update the checkbox with an [x] for the type of contribution you are making.
-->

* This is a…
  * [ ] Bug fix
  * [x] Feature addition
  * [ ] Refactoring
  * [ ] Minor / simple change (like a typo)
  * [ ] Other
* **Describe this change in 1-2 sentences**:

# Problem

A commands to write logs into a file

* JIRA ticket (_optional_): None


# Solution

Added `WRITE_LOGS`

# Action

@zas @phw please take a look if you like the approach :)
",True,2146,https://api.github.com/repos/metabrainz/picard/pulls/2146,https://github.com/metabrainz/picard/pull/2146,closed,13,0,1,5,1,8,0,0,[],2022-09-07 16:39:56+00:00,2022-09-08 10:19:51+00:00,63595.0,17:39:55,"[{'comment_id': 965093286, 'comment_body': 'I think we should left this verbosity thing out for now, and just dump the whole log.', 'comment_created': datetime.datetime(2022, 9, 7, 17, 11, 11, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 965094292, 'comment_body': 'We definitively need to catch exceptions here, for example, if the target file cannot be written, a PermissionError might be raised, leading to a crash of the application.\r\nWe should catch all exceptions, and log them to avoid any issue.', 'comment_created': datetime.datetime(2022, 9, 7, 17, 12, 27, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 965105387, 'comment_body': 'Disagreed, the command does not have a complex logic, yet it helps a lot with writing a clean log files.', 'comment_created': datetime.datetime(2022, 9, 7, 17, 25, 23, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 965105945, 'comment_body': 'Just `except Exception as e` and then log it?', 'comment_created': datetime.datetime(2022, 9, 7, 17, 26, 3, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 965184645, 'comment_body': 'Yes', 'comment_created': datetime.datetime(2022, 9, 7, 19, 8, 40, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 965186005, 'comment_body': ""The thing is that what is logged depends on actual log level, so if Picard is set to INFO level, changing this to DEBUG will not change anything.\r\nI don't say this isn't useful, but we need to think about how to implement it a bit more. What I suggest is to let this out this PR, and do that in an other."", 'comment_created': datetime.datetime(2022, 9, 7, 19, 10, 31, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 965535343, 'comment_body': '```suggestion\r\n            log.error(""Error writing logs to a file: %s"", e)\r\n```\r\n\r\nFor exceptions, since our goal is to display a human-readable message, better use `str(e)` rather than `repr(e)`.', 'comment_created': datetime.datetime(2022, 9, 8, 6, 6, 33, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 965548668, 'comment_body': 'Unused, it can be removed (along the blank line below)', 'comment_created': datetime.datetime(2022, 9, 8, 6, 21, 32, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}]","[{'commit_sha': '017b91db5bdcdd01b36664ac156da0336b8e62bd', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20b810103c3d9eb4f1eee58deac9d06780010a9e', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '677a457cdf36a619f79f434ef72b611632d0e7fd', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1b075d2dd8caeb91f34bccefda4f84ef3851063', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a992daf3944456a19ccd676f46026aef6e0988d', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}]",Kamil,76530971,skelly37@protonmail.com,User,,9,,23,20
878140058,PICARD-2356: Removed deprecated code,"# Summary

* This is a…
  * [ ] Bug fix
  * [ ] Feature addition
  * [x] Refactoring
  * [ ] Minor / simple change (like a typo)
  * [ ] Other
* **Describe this change in 1-2 sentences**:
I've removed code marked in comment as deprecated. 1 commit — 1 function, so everything is clear IMO

# Problem
Deprecated code is unnecessarily tested and makes the source code files bloated

* JIRA ticket (_optional_): PICARD-2356


# Solution
Find all the usages of deprecated code, replace it with the new one and safely delete it.

# Action
`picard.metadata.delete()` is also marked as deprecated but are you sure that executing `del self[self.normalize_tag(name)]` can be enforced safely without such convenient wrapper method? I'm not sure if this is a change for good so I left without replacing `delete` with `del` ",True,2080,https://api.github.com/repos/metabrainz/picard/pulls/2080,https://github.com/metabrainz/picard/pull/2080,closed,15,57,7,11,14,7,0,0,[],2022-03-12 10:27:06+00:00,2022-07-08 06:43:46+00:00,10181800.0,"117 days, 20:16:40","[{'comment_id': 825494431, 'comment_body': 'Just a minor thing, but please keep the comma at the end of this line.\r\nIt prevents a change if we had or remove a line in this import.', 'comment_created': datetime.datetime(2022, 3, 13, 19, 39, 29, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 825494455, 'comment_body': 'Same here, please keep the comma.', 'comment_created': datetime.datetime(2022, 3, 13, 19, 39, 42, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 825495301, 'comment_body': ""Fair point, I'll keep that in mind."", 'comment_created': datetime.datetime(2022, 3, 13, 19, 47, 23, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 827137622, 'comment_body': ""You shouldn't move this import."", 'comment_created': datetime.datetime(2022, 3, 15, 15, 51, 33, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 827140142, 'comment_body': ""As I've already mentioned, I couldn't commit without doing so.\r\n\r\nhttps://pastebin.com/JhitSS5c"", 'comment_created': datetime.datetime(2022, 3, 15, 15, 53, 45, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 827143719, 'comment_body': ""That's isort again, that has a habit of changing between versions. Should install a version compatible with what is defined in https://github.com/metabrainz/picard/blob/master/requirements-dev.txt , so currently isort 4.3.10 or later, but not isort 5."", 'comment_created': datetime.datetime(2022, 3, 15, 15, 56, 50, tzinfo=datetime.timezone.utc), 'commenter': 'phw', 'type': 'User'}, {'comment_id': 827155688, 'comment_body': 'And actually fixing this to work with isort >5 is something we should also do :D', 'comment_created': datetime.datetime(2022, 3, 15, 16, 7, 29, tzinfo=datetime.timezone.utc), 'commenter': 'phw', 'type': 'User'}]","[{'commit_sha': '029fef7a1088249abd658e663f9a5497152171c4', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2be09bbf5a692fcab786f2b06ff07791b2220dbd', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b0e7603192eecb4481289f7eec682b48f5e3a8f', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36350f567253c564f318b04c718a685988d77d39', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '94c9b37f2bca29a5dac8152d090523415186c3e1', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf588b393aa15baa8884016a6637f8f62e9a100f', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bff804ff9472d26b383ed4a24b979d0b2dd6aee3', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '26865f59391f1f47e78ab7da26ccc53295df98e5', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3016197cd000aba96afab17ea0e9dd1b42d7eea3', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '683c9399bce61b9e9357ca552c5637120a0685e8', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8804a51d4bcbc8d1c8186a15cb361e9665a4e68e', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}]",Kamil,76530971,skelly37@protonmail.com,User,,9,,23,20
984595934,unparsed_args removed from `tagger.py`,"# Summary
* This is a…
  * [ ] Bug fix
  * [ ] Feature addition
  * [ ] Refactoring
  * [x] Minor / simple change (like a typo)
  * [ ] Other
* **Describe this change in 1-2 sentences**:

Since the variable wasn't used anywhere (wasn't even stored as `Tagger`'s attribute), I'd suggest to remove it, unless you have some reason to still keep it there.

# Problem
Unused variable returned, stored and passed to the `Tagger`'s constructor just to be left untouched

* JIRA ticket (_optional_): *None*

# Solution

I've safely removed all the `unparsed_args`'s ocurrences.

",True,2127,https://api.github.com/repos/metabrainz/picard/pulls/2127,https://github.com/metabrainz/picard/pull/2127,closed,5,5,1,2,1,2,0,0,[],2022-07-01 06:54:34+00:00,2022-07-04 06:01:34+00:00,256020.0,"2 days, 23:07:00","[{'comment_id': 911675335, 'comment_body': '## \n\nTrailing whitespace\n\n[Show more details](https://github.com/metabrainz/picard/security/code-scanning/2139)', 'comment_created': datetime.datetime(2022, 7, 1, 7, 6, 10, tzinfo=datetime.timezone.utc), 'commenter': 'github-advanced-security[bot]', 'type': 'Bot'}, {'comment_id': 911675336, 'comment_body': '## \n\nTrailing whitespace\n\n[Show more details](https://github.com/metabrainz/picard/security/code-scanning/2140)', 'comment_created': datetime.datetime(2022, 7, 1, 7, 6, 10, tzinfo=datetime.timezone.utc), 'commenter': 'github-advanced-security[bot]', 'type': 'Bot'}]","[{'commit_sha': '9aff9a2247d605a6815fcccf09c4e83eec406d0c', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5153c6de9492018782959498a141046dda44abb2', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}]",Kamil,76530971,skelly37@protonmail.com,User,,9,,23,20
1040159395,Refactor handling of Picard command-line args,"<!--
    Hello! Thanks for submitting a pull request to MusicBrainz Picard. We
    appreciate your time and interest in helping our project!

    Use this template to help us review your change. Not everything is required,
    depending on your change. Keep or delete what is relevant for your change.
    Remember that it helps us review if you give more helpful info for us to
    understand your change.

    Ensure that you've read through and followed the Contributing Guidelines, in
    [CONTRIBUTING.md](https://github.com/metabrainz/picard/blob/master/CONTRIBUTING.md).
-->

# Summary

<!--
    Update the checkbox with an [x] for the type of contribution you are making.
-->

* This is a…
  * [ ] Bug fix
  * [ ] Feature addition
  * [x] Refactoring
  * [ ] Minor / simple change (like a typo)
  * [ ] Other
* **Describe this change in 1-2 sentences**:
I have removed the need to duplicate the arguments passed during Tagger's initialization

# Problem

After merging the PR introducing the command-line arguments processing, Tagger now gets both unparsed arguuments & parsed items to load by the app (files, MBIDs, URLs & commands)

* JIRA ticket (_optional_): None
<!--
    Please make sure you prefix your pull request title with 'PICARD-XXX' in order
    for our ticket tracker to link your pull request to the relevant ticket.
-->



# Solution

- Merge command-line arguments and remote commands into `picard_args`.
- Name pipe with an unique identifier

# Action

<!--
    Other than merging your change, do you want / need us to do anything else
    with your change? This could include reviewing a specific part of your PR.
-->
",True,2139,https://api.github.com/repos/metabrainz/picard/pulls/2139,https://github.com/metabrainz/picard/pull/2139,closed,68,70,2,28,12,61,0,0,[],2022-08-29 20:18:02+00:00,2022-09-04 19:23:12+00:00,515110.0,"5 days, 23:05:10","[{'comment_id': 958086608, 'comment_body': ""I think this change is incorrect, our log.* functions support passing format arguments but here that's a Qt message box."", 'comment_created': datetime.datetime(2022, 8, 30, 7, 9, 8, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 958088190, 'comment_body': ""Why capitalized attribute's names?\r\n\r\nI have the feeling we could subclass `argparse_args` object and extends it, rather than copying all of its attributes.\r\n\r\n"", 'comment_created': datetime.datetime(2022, 8, 30, 7, 10, 55, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 958092489, 'comment_body': 'Why `del` those attributes?', 'comment_created': datetime.datetime(2022, 8, 30, 7, 15, 46, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 958092779, 'comment_body': 'Why `del`?', 'comment_created': datetime.datetime(2022, 8, 30, 7, 16, 6, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 958094299, 'comment_body': 'Why `del`?', 'comment_created': datetime.datetime(2022, 8, 30, 7, 17, 50, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 958094328, 'comment_body': 'Why `del`?', 'comment_created': datetime.datetime(2022, 8, 30, 7, 17, 52, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 958551940, 'comment_body': 'Right, my overlook', 'comment_created': datetime.datetime(2022, 8, 30, 14, 24, 3, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 958554645, 'comment_body': "">Why capitalized attribute's names?\r\n\r\nTo show they're constant\r\n\r\n\r\n>I have the feeling we could subclass argparse_args object and extends it, rather than copying all of its attributes.\r\n\r\nI think it would compound the readability and simplicity of this class\r\n"", 'comment_created': datetime.datetime(2022, 8, 30, 14, 26, 6, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 958558402, 'comment_body': ""Not needed further, minor memory optimization, as all other `del`s. What you're trying to say that explicit freeing the memory ASAP is not the pythonic way, right? But they are really not needed during runtime, yet they'd be deleted after the GUI is closed (unless I misunderstand something in Python's memory management). The same goes for all other `del`s"", 'comment_created': datetime.datetime(2022, 8, 30, 14, 28, 55, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 958653213, 'comment_body': ""Well, `del` doesn't free memory by itself. That's not like a C `free()`. It marks objects as unused, and memory will eventually be freed when Python garbage collector runs.\r\n\r\nIt makes sense to call `del` to remove an unused variable in some cases, but IMHO you shouldn't bother too much (but perhaps if the variable contains a LOT of data). Or move the variable to a function, call the function, and variable will be freed on return."", 'comment_created': datetime.datetime(2022, 8, 30, 15, 48, 40, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 958675969, 'comment_body': ""Even though there is no strict definition of a constant in Python (well, they are _usually_ defined at module level), those are normal class attributes, so I don't think they should be capitalized.\r\nA class constant can be capitalized, but it is usually never modified, that's not the case here for `PROCESSABLE` which is initialized then modified.\r\nI don't think upper-cased names add anything here.\r\n\r\n\r\n\r\n"", 'comment_created': datetime.datetime(2022, 8, 30, 16, 7, 51, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 958677373, 'comment_body': ""By defaulting to an empty list rather than `['']` I think that any commands without arguments such as `-e CLUSTER_ALL` will not be added to `self.PROCESSABLE`.  That's why my suggestion was to default to `['']`."", 'comment_created': datetime.datetime(2022, 8, 30, 16, 9, 13, tzinfo=datetime.timezone.utc), 'commenter': 'rdswift', 'type': 'User'}, {'comment_id': 958678229, 'comment_body': 'Is there a reason to make `argparse_args` optional?', 'comment_created': datetime.datetime(2022, 8, 30, 16, 10, 2, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 958679015, 'comment_body': 'This method is only called from `__init__()` so the code can be moved there and this method removed.', 'comment_created': datetime.datetime(2022, 8, 30, 16, 10, 46, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 958690855, 'comment_body': 'Well, actually no.', 'comment_created': datetime.datetime(2022, 8, 30, 16, 22, 55, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 958741365, 'comment_body': ""This shouldn't have been changed ;)"", 'comment_created': datetime.datetime(2022, 8, 30, 17, 16, 46, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 958743922, 'comment_body': 'Why is this disappeared?', 'comment_created': datetime.datetime(2022, 8, 30, 17, 19, 36, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 958744479, 'comment_body': 'Why is this disappeared?\r\nThose methods are required.', 'comment_created': datetime.datetime(2022, 8, 30, 17, 20, 13, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 958745383, 'comment_body': 'A little fckup provided by PyCharm (: Gimme 1min', 'comment_created': datetime.datetime(2022, 8, 30, 17, 21, 14, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 958752420, 'comment_body': 'Where is it used? I cannot find any usage ', 'comment_created': datetime.datetime(2022, 8, 30, 17, 29, 3, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 958752464, 'comment_body': 'Where is it used? I cannot find any usage', 'comment_created': datetime.datetime(2022, 8, 30, 17, 29, 7, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 958755021, 'comment_body': 'See, nothing found\r\n\r\n![image](https://user-images.githubusercontent.com/76530971/187504581-c7b2b62f-7aa1-4f93-82df-1322c5834db4.png)\r\n![image](https://user-images.githubusercontent.com/76530971/187504852-3c2cc9a3-fd3c-428a-9be9-18b359b771c0.png)\r\n![image](https://user-images.githubusercontent.com/76530971/187504914-ba411851-dbda-4c51-90b3-b98a0cd1853c.png)\r\n', 'comment_created': datetime.datetime(2022, 8, 30, 17, 32, 3, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 958756060, 'comment_body': ""So basically that's why I moved the logic to `PicardArgs` :)"", 'comment_created': datetime.datetime(2022, 8, 30, 17, 33, 11, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 958805163, 'comment_body': 'I believe that move is also the reason for the failing tests.', 'comment_created': datetime.datetime(2022, 8, 30, 18, 30, 19, tzinfo=datetime.timezone.utc), 'commenter': 'rdswift', 'type': 'User'}, {'comment_id': 958808613, 'comment_body': '> Where is it used? I cannot find any usage\r\n\r\nOn master:\r\n\r\n```bash\r\n❯ python tagger.py -V             \r\nPicard 2.9.0.dev1, Python 3.10.4, PyQt 5.15.7, Qt 5.15.2, Mutagen 1.45.1, Discid discid 1.2.0, libdiscid 0.6.2, astrcmp Python, SSL OpenSSL 1.1.1m  14 Dec 2021\r\n❯ python tagger.py -v\r\nMusicBrainz Picard 2.9.0.dev1\r\n\r\n```\r\n\r\nOn this branch, behavior changed and Picard starts instead.', 'comment_created': datetime.datetime(2022, 8, 30, 18, 34, 24, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 958810187, 'comment_body': 'The problem is that you changed lines 1353-1355.', 'comment_created': datetime.datetime(2022, 8, 30, 18, 36, 19, tzinfo=datetime.timezone.utc), 'commenter': 'rdswift', 'type': 'User'}, {'comment_id': 958833285, 'comment_body': 'Okay, I see that I forgot to assign the value to the `PicardArgs.version` and it always remained the default `""""` empty string', 'comment_created': datetime.datetime(2022, 8, 30, 19, 3, 38, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 958871967, 'comment_body': 'What output do you get when you start it with the `--long-version ` command line option?', 'comment_created': datetime.datetime(2022, 8, 30, 19, 52, 40, tzinfo=datetime.timezone.utc), 'commenter': 'rdswift', 'type': 'User'}, {'comment_id': 958874840, 'comment_body': '@rdswift It works exactly the same for the end user, but the functions are no longer stand-alone code but wrapped in the class. ', 'comment_created': datetime.datetime(2022, 8, 30, 19, 56, 12, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 958876005, 'comment_body': 'See PicardArgs. __get_version(), PicardArgs.version value depends on the flag provided by the user.', 'comment_created': datetime.datetime(2022, 8, 30, 19, 57, 41, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 958894709, 'comment_body': 'Okay, thanks.', 'comment_created': datetime.datetime(2022, 8, 30, 20, 20, 48, tzinfo=datetime.timezone.utc), 'commenter': 'rdswift', 'type': 'User'}, {'comment_id': 958971028, 'comment_body': 'Thinking about this a bit more...  Not that it makes a big difference, but I sort of question the need to store the version string in a variable when it is only used once.  Then again, maybe it is stored as an empty string if neither `-v` nor `-V` are specified on the command line, and Picard exits after displaying the string when `-v` or `-V` are specified.', 'comment_created': datetime.datetime(2022, 8, 30, 22, 10, 23, tzinfo=datetime.timezone.utc), 'commenter': 'rdswift', 'type': 'User'}, {'comment_id': 959168357, 'comment_body': ""> I sort of question the need to store the version string in a variable when it is only used once. Then again, maybe it is stored as an empty string if neither -v nor -V are specified on the command line, and Picard exits after displaying the string when -v or -V are specified.\r\n\r\nIf we wanted to introduce just `PicardArgs.get_version()`, we'd end up having to store the booleans from `argparse` to determine which wersion actually return, so we still end up with 2 variables. And since @zas advised me not to overuse `del`, I left it there."", 'comment_created': datetime.datetime(2022, 8, 31, 5, 17, 23, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 959302157, 'comment_body': ""```suggestion\r\n                args = e[1:] or ['']\r\n```\r\n\r\n```python\r\n>>> e = []\r\n>>> e[1:] if len(e) > 1 else ['']\r\n['']\r\n>>> e[1:] or ['']\r\n['']\r\n>>> e = ['a']\r\n>>> e[1:] if len(e) > 1 else ['']\r\n['']\r\n>>> e[1:] or ['']\r\n['']\r\n>>> e = ['a', 'b']\r\n>>> e[1:] if len(e) > 1 else ['']\r\n['b']\r\n>>> e[1:] or ['']\r\n['b']\r\n```"", 'comment_created': datetime.datetime(2022, 8, 31, 8, 24, 45, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 959308609, 'comment_body': 'Those `del` are likely useless, since they point to data from `argparse`.\r\n\r\nTry this example which tries to simulate what we have here:\r\n\r\n`pip install memory_profiler`\r\n\r\n```python\r\nfrom memory_profiler import profile\r\n\r\n\r\nclass A:\r\n    def __init__(self):\r\n        self.v = ""a"" * 1000000\r\n\r\n\r\nclass B:\r\n    def __init__(self, obj):\r\n        self._v = obj.v\r\n\r\n    def clear_v(self):\r\n        del self._v\r\n\r\n\r\n@profile\r\ndef main():\r\n    obj_a = A()\r\n    obj_b = B(obj_a)\r\n    obj_b.clear_v()\r\n    del obj_b\r\n    del obj_a\r\n\r\n\r\nif __name__ == \'__main__\':\r\n    main()\r\n```\r\n\r\n```\r\nLine #    Mem usage    Increment  Occurrences   Line Contents\r\n=============================================================\r\n    17     35.2 MiB     35.2 MiB           1   @profile\r\n    18                                         def main():\r\n    19     36.3 MiB      1.0 MiB           1       obj_a = A()\r\n    20     36.3 MiB      0.0 MiB           1       obj_b = B(obj_a)\r\n    21     36.3 MiB      0.0 MiB           1       obj_b.clear_v()\r\n    22     36.3 MiB      0.0 MiB           1       del obj_b\r\n    23     35.4 MiB     -0.9 MiB           1       del obj_a\r\n```\r\n\r\nIt is important to understand that Python only copies data if needed, and it uses references to this data.\r\nIn the case here, when you write `self._exec = argparse_args.exec` you just create a reference to the data initially stored by `argparse_args.exec`, so calling `del self._exec` don\'t actually free the memory used by the data, at least until you also `del argparse_args.exec`.\r\n\r\nIf we\'d go for memory usage optimization it is rather elsewhere I\'d look first, mainly in all the code processing data from MB or cover art for (possibly) millions of tracks... The code here is executed only once.\r\n\r\nNote that I\'m not against memory usage optimization, but to be clear, Python isn\'t the language for that... and if you really want to do that, use a memory profiler.', 'comment_created': datetime.datetime(2022, 8, 31, 8, 30, 56, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 959337081, 'comment_body': 'This change is correct, but unrelated to this PR.', 'comment_created': datetime.datetime(2022, 8, 31, 8, 56, 59, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 959337277, 'comment_body': 'This change is correct, but unrelated to this PR.\r\n', 'comment_created': datetime.datetime(2022, 8, 31, 8, 57, 10, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 962147132, 'comment_body': 'Minor thing, but replacement  for `""%r"" % obj` is `f""{repr(obj)}` (or `f""{obj!r}\'`).\r\nNot sure this change was intentional, in many cases the result is the same, but not always.\r\n\r\nBut anyway using Python3 formatted strings is better, so +1 from me.', 'comment_created': datetime.datetime(2022, 9, 3, 12, 19, 9, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 962286872, 'comment_body': 'Right, thanks', 'comment_created': datetime.datetime(2022, 9, 4, 10, 11, 19, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 962287554, 'comment_body': 'Really well explained and helpful, thanks', 'comment_created': datetime.datetime(2022, 9, 4, 10, 16, 16, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 962291545, 'comment_body': '## \n\nUse of insecure MD2, MD4, MD5, or SHA1 hash function.\n\n[Show more details](https://github.com/metabrainz/picard/security/code-scanning/2182)', 'comment_created': datetime.datetime(2022, 9, 4, 10, 45, 52, tzinfo=datetime.timezone.utc), 'commenter': 'github-advanced-security[bot]', 'type': 'Bot'}, {'comment_id': 962292219, 'comment_body': '@skelly37 we may add `# nosec: B303` to this line, here `md5()` use is intended. ', 'comment_created': datetime.datetime(2022, 9, 4, 10, 50, 46, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 962320647, 'comment_body': 'So should I revert all the f-string refactors and then we can merge?', 'comment_created': datetime.datetime(2022, 9, 4, 14, 10, 13, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 962321233, 'comment_body': '@rdswift can `identifier` contain spaces the way it is build atm?', 'comment_created': datetime.datetime(2022, 9, 4, 14, 14, 24, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 962321384, 'comment_body': 'For extra safety we could wrap filename with `sanitize_filename()` (which replaces path separators).', 'comment_created': datetime.datetime(2022, 9, 4, 14, 15, 22, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 962321548, 'comment_body': 'btw, a suggestion+question\r\n\r\nIs there any reason why resolving all conversations is not required before merging? See: \r\n![image](https://user-images.githubusercontent.com/76530971/188318101-e08cd129-2e00-46b2-855a-d4cfae6af4d0.png)\r\n', 'comment_created': datetime.datetime(2022, 9, 4, 14, 16, 26, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 962321626, 'comment_body': 'Keep them, those are minor changes, but next time try to keep unrelated changes outside ;)', 'comment_created': datetime.datetime(2022, 9, 4, 14, 17, 7, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 962322097, 'comment_body': 'You mean this? https://pypi.org/project/sanitize-filename/', 'comment_created': datetime.datetime(2022, 9, 4, 14, 20, 34, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 962322100, 'comment_body': 'No.  Good catch.  I had originally included the `.replace()` because I was first passing the whole config file path (which could contain spaces) but then decided to use the hash and forgot to remove the `.replace()`.', 'comment_created': datetime.datetime(2022, 9, 4, 14, 20, 36, tzinfo=datetime.timezone.utc), 'commenter': 'rdswift', 'type': 'User'}, {'comment_id': 962322426, 'comment_body': ""I don't see any way to add spaces to the identifier but I think it is a good security feature that may prevent future errors."", 'comment_created': datetime.datetime(2022, 9, 4, 14, 22, 53, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 962322511, 'comment_body': 'Or we can simply add a test case for pipe where we would assert that this variable contains no spaces, which gives better feedback for the developer', 'comment_created': datetime.datetime(2022, 9, 4, 14, 23, 53, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 962322918, 'comment_body': ""> btw, a suggestion+question\r\n> \r\n> Is there any reason why resolving all conversations is not required before merging? See: ![image](https://user-images.githubusercontent.com/76530971/188318101-e08cd129-2e00-46b2-855a-d4cfae6af4d0.png)\r\n\r\nping @zas to ensure that you have seen the question (as the time difference is small and you could've not refreshed)."", 'comment_created': datetime.datetime(2022, 9, 4, 14, 26, 44, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 962323236, 'comment_body': 'I mean, the question is up to you @rdswift \r\n\r\nCould whitespaces in this string potentially break Picard?\r\n\r\nIf yes, I will add a proper test case. If not, I will remove the `.replace()` call :)', 'comment_created': datetime.datetime(2022, 9, 4, 14, 28, 35, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 962323325, 'comment_body': 'Nope.  See Line 314 in `util/__init__.py`.', 'comment_created': datetime.datetime(2022, 9, 4, 14, 29, 15, tzinfo=datetime.timezone.utc), 'commenter': 'rdswift', 'type': 'User'}, {'comment_id': 962323752, 'comment_body': ""I actually added it because I wasn't sure if a space would break the pipe name.  :stuck_out_tongue_winking_eye:   If that's not a concern, then there's likely no reason to keep it."", 'comment_created': datetime.datetime(2022, 9, 4, 14, 31, 34, tzinfo=datetime.timezone.utc), 'commenter': 'rdswift', 'type': 'User'}, {'comment_id': 962324619, 'comment_body': '> Nope. See Line 314 in `util/__init__.py`.\r\n\r\nThanks\r\n\r\n---\r\n\r\nSo you suggest to call the sanitizer on the `os.path.join()` result, right?', 'comment_created': datetime.datetime(2022, 9, 4, 14, 35, 54, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 962325049, 'comment_body': '```suggestion\r\n                                                sanitize_filename(f""{app_name}_v{app_version}_{self._identifier}_pipe_file"")))\r\n```', 'comment_created': datetime.datetime(2022, 9, 4, 14, 38, 53, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 962326548, 'comment_body': 'Well, no particular reason, I can enable it, and if it becomes annoying we can always disable it.\r\n@phw^^', 'comment_created': datetime.datetime(2022, 9, 4, 14, 48, 36, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 962327033, 'comment_body': '> So you suggest to call the sanitizer on the `os.path.join()` result, right?\r\n\r\nNope, only on the filename, see suggestion above.', 'comment_created': datetime.datetime(2022, 9, 4, 14, 51, 44, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 962327443, 'comment_body': 'You need to import it ;)', 'comment_created': datetime.datetime(2022, 9, 4, 14, 54, 21, tzinfo=datetime.timezone.utc), 'commenter': 'zas', 'type': 'User'}, {'comment_id': 962327561, 'comment_body': 'Already done ;) https://github.com/metabrainz/picard/pull/2139/commits/6c510ed814b77fa9d6e7b4f6387bfef60a0d7ad5', 'comment_created': datetime.datetime(2022, 9, 4, 14, 55, 9, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}]","[{'commit_sha': 'b00eecee9562caae7b42d0ba3448050b777a8bc3', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e33ae3d4219d3c189dfe19a454fc28b21b51671', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '008b42ffe5e736b1366b66376cc08b9e1a96a643', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f8aade1f22e09e67aed0a51fe68f94e45930e1ff', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '13e5896850195270e259cbbdf6fcc6fbecab5e0b', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b616e9302a4140b86096bba3e8d8573fd94fa3b', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e2abfad3b0d5b0a8aa0408a5ebef4e5be41eae1', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ff97a1b135c667fe624d415b47c14b6624d456f', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cde7ea0f26eaf905d278244cfd8c56e3845d5556', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b029e9bdc975ff0d4a38bfffc9acb154f14957d', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1edb13e22e17431e9a793ac16af4fce008f3a586', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d9dc9cff17eb2932abaacab1f5af64f9246592f', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50da557ec4aff0184fa794ceefbf9f37aea45412', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a837b1e683c9a6c9281c1b604d9921426b93a0b4', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d881fc5db61a1d37bc383b111c9a5102b359e82', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87feb93fa97cd6d6986c04019818cc4691879d50', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e8380aa1cd28bcf90ba7f892b12f759f87483f5', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7589dbf4ef2ea454f55b557eface0b9f61b990b1', 'committer_username': 'rdswift', 'committer_name': 'Bob Swift', 'committer_email': None, 'commit_date': datetime.datetime(2016, 1, 31, 19, 11, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b6848b447d2ec7088c5880448960361ef5009cb0', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a570e5c678fe2549e307bc54732839a7f85fc5cf', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a855fde90e105b89cae486751b7b56166833975', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b98fb6c9c1eaf2ad45885997f582ac86fb13fc4', 'committer_username': 'zas', 'committer_name': 'Laurent Monin', 'committer_email': None, 'commit_date': datetime.datetime(2009, 11, 10, 0, 41, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '514286185577515feabb895e5ebae387f68a18d8', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ca67f64e0210721cf869cbdeed757652b90d715', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c510ed814b77fa9d6e7b4f6387bfef60a0d7ad5', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ae21dc320e9e9ec5711649967e0162c1eb719e3', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4179a0561b6e1138c24dd5a4e58790bc9e0ace8', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c10dfe2eb6b6993137804cd57f538374ed0e42a8', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}]",Kamil,76530971,skelly37@protonmail.com,User,,9,,23,20
979130822,timeout added to pytest,"<!--
    Hello! Thanks for submitting a pull request to MusicBrainz Picard. We
    appreciate your time and interest in helping our project!

    Use this template to help us review your change. Not everything is required,
    depending on your change. Keep or delete what is relevant for your change.
    Remember that it helps us review if you give more helpful info for us to
    understand your change.

    Ensure that you've read through and followed the Contributing Guidelines, in
    [CONTRIBUTING.md](https://github.com/metabrainz/picard/blob/master/CONTRIBUTING.md).
-->

# Summary

<!--
    Update the checkbox with an [x] for the type of contribution you are making.
-->

* This is a…
  * [ ] Bug fix
  * [ ] Feature addition
  * [ ] Refactoring
  * [x] Minor / simple change (like a typo)
  * [ ] Other
* **Describe this change in 1-2 sentences**:
Use timeout in workflows for unit tests to prevent tests from going into an infinite loop. Admins won't need to cancel tests themselves, contributors will receive a quicker feedback.

# Problem
My GSoC PR made me think that timeout in the tests is a useful feature so here it is :)

# Solution
`timeout-minutes` set to 30, the exact value is a subject of discussion.
",True,2122,https://api.github.com/repos/metabrainz/picard/pulls/2122,https://github.com/metabrainz/picard/pull/2122,closed,2,0,1,2,0,2,0,0,[],2022-06-25 20:15:00+00:00,2022-06-26 12:14:35+00:00,57575.0,15:59:35,"[{'comment_id': 906765296, 'comment_body': 'Can you fix the indentation here?', 'comment_created': datetime.datetime(2022, 6, 26, 6, 48, 37, tzinfo=datetime.timezone.utc), 'commenter': 'phw', 'type': 'User'}, {'comment_id': 906766433, 'comment_body': 'Yeah, thanks for the noticing, should be ok now', 'comment_created': datetime.datetime(2022, 6, 26, 6, 59, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}]","[{'commit_sha': 'c5d48adc9d83c5ae65d7b6bc0c6700048bc44e3f', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aad887eb4aca27071090e530f61e7bba3309e077', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}]",Kamil,76530971,skelly37@protonmail.com,User,,9,,23,20
981978340,Timeouts added to all the unit tests,"
# Summary

* This is a…
  * [ ] Bug fix
  * [ ] Feature addition
  * [ ] Refactoring
  * [x] Minor / simple change (like a typo)
  * [ ] Other
* **Describe this change in 1-2 sentences**:

Seems like I've missed quite a lot of tests in my previous commit so here's the full refactored codebase (I really hope I haven't missed anything this time).

# Problem

Even if tests fail, they might get stuck and won't end themselves (despite timeouts in code) after Errors, so we have to create shorter timeouts in the workflow files.

* JIRA ticket (_optional_): None

# Solution

Timeouts added

# Action

Nope
",True,2126,https://api.github.com/repos/metabrainz/picard/pulls/2126,https://github.com/metabrainz/picard/pull/2126,closed,5,0,3,4,0,4,0,0,[],2022-06-28 23:40:13+00:00,2022-07-01 12:56:36+00:00,220583.0,"2 days, 13:16:23","[{'comment_id': 909590767, 'comment_body': 'Any specific reason for the 40 here?', 'comment_created': datetime.datetime(2022, 6, 29, 12, 50, 44, tzinfo=datetime.timezone.utc), 'commenter': 'phw', 'type': 'User'}, {'comment_id': 909610001, 'comment_body': 'It takes a bit longer than usual tests (also compression etc.) so it should take a little bit longer. Tho 40 minutes is just an arbitrary value ', 'comment_created': datetime.datetime(2022, 6, 29, 13, 7, 55, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 909618703, 'comment_body': ""Let's make it 30 anyway, keep it consistent. It should still be under 10 minutes (and that's long already), so 30 is fine"", 'comment_created': datetime.datetime(2022, 6, 29, 13, 15, 31, tzinfo=datetime.timezone.utc), 'commenter': 'phw', 'type': 'User'}, {'comment_id': 909705444, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 29, 14, 19, 38, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}]","[{'commit_sha': '965f675243831dd5abb907a7e7d6eb5ca0e07f9b', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20869e31b1cd54aa737d2d18836a081f1523552c', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4896e30dbe0c4d9d7cbf4d066e96e027ba89be30', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3d3b2647da426095c63be2e1e6736c74fa7f764', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}]",Kamil,76530971,skelly37@protonmail.com,User,,9,,23,20
980374434,"added -s, --stand-alone-instance","### Summary

This is a…

- [ ] Correction
- [x] Addition
- [ ] Restructuring
- [ ] Minor / simple change (like a typo)
- [ ] Other

### Reason for the Change
https://github.com/metabrainz/picard/pull/2116 will introduce new flag

### Description of the Change
Added the new flag

### Additional Action Required
Nope.",False,174,https://api.github.com/repos/metabrainz/picard-docs/pulls/174,https://github.com/metabrainz/picard-docs/pull/174,closed,52,5,5,20,15,14,2,0,"[{'name': 'documentation'}, {'name': 'do not merge'}]",2022-06-27 18:04:35+00:00,2022-12-03 02:55:54+00:00,13683079.0,"158 days, 8:51:19","[{'comment_id': 907669247, 'comment_body': 'Thanks for this.  One minor suggested change in the wording...  Perhaps ""force Picard to create a new instance"" may be a bit clearer to non-technical users?', 'comment_created': datetime.datetime(2022, 6, 27, 18, 16, 33, tzinfo=datetime.timezone.utc), 'commenter': 'rdswift', 'type': 'User'}, {'comment_id': 908187438, 'comment_body': ""Okay, works for me, I'll change it in the Picard PR too."", 'comment_created': datetime.datetime(2022, 6, 28, 8, 23, 27, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 908188176, 'comment_body': ""I'll add `stand-alone`, too, to signalize that it won't communicate with other processes. "", 'comment_created': datetime.datetime(2022, 6, 28, 8, 24, 8, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 926527767, 'comment_body': ""Line lengths are inconsistent here, is this because you can't wrap bullet points?"", 'comment_created': datetime.datetime(2022, 7, 21, 10, 42, 11, tzinfo=datetime.timezone.utc), 'commenter': 'atj', 'type': 'User'}, {'comment_id': 926545076, 'comment_body': 'Normally in help output you would write it something like this:\r\n\r\n```suggestion\r\n   location of the configuration file to use (implies ``--stand-alone-instance``)\r\n```', 'comment_created': datetime.datetime(2022, 7, 21, 11, 4, 6, tzinfo=datetime.timezone.utc), 'commenter': 'atj', 'type': 'User'}, {'comment_id': 926545637, 'comment_body': ""Suggested improved formatting / wording:\r\n\r\n```suggestion\r\n.. note::\r\n\r\nPicard's stand-alone mode is implemented via the use of an inter-process-communication (IPC) file, which will be named according to the following format: ``$PICARD_NAME_v$PICARD_VERSION_pipe_file``. If this IPC file is deleted, Picard will not exit cleanly and will have to be forcefully terminated. This may be handled better in the future, however it is strongly suggested that users do not manually interact with this file.\r\n```"", 'comment_created': datetime.datetime(2022, 7, 21, 11, 4, 50, tzinfo=datetime.timezone.utc), 'commenter': 'atj', 'type': 'User'}, {'comment_id': 926559186, 'comment_body': ""Actually, I don't know .rst and just try to help with writing the text. @rdswift I leave you with the quesiton"", 'comment_created': datetime.datetime(2022, 7, 21, 11, 22, 16, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}, {'comment_id': 926698835, 'comment_body': ""Actually, I think you can wrap bullet points with the proper leading spaces, but I've sort of gotten into the habit of putting the bullet all on one line because: (a) I'm lazy :wink:  and this way it will auto wrap, and (b) if we make a change to the wording it won't need to be rewrapped manually potentially changing multiple lines in the patch.\r\n\r\nTo be consistent, I should actually do the same thing with normal paragraphs.  Perhaps one at a time when there is a revision to the content of the paragraph."", 'comment_created': datetime.datetime(2022, 7, 21, 13, 48, 19, tzinfo=datetime.timezone.utc), 'commenter': 'rdswift', 'type': 'User'}, {'comment_id': 926715578, 'comment_body': 'I might actually change this to a warning rather than a note so that it stands out a bit more prominently.\r\n\r\n```suggestion\r\n.. warning::\r\n```', 'comment_created': datetime.datetime(2022, 7, 21, 14, 2, 48, tzinfo=datetime.timezone.utc), 'commenter': 'rdswift', 'type': 'User'}, {'comment_id': 926715695, 'comment_body': 'This line should be indented by three spaces to avoid the RST linter error while compiling.\r\n\r\nI have to admit that I\'m not keen on saying, ""This may be handled better in the future...""  My impression is that this reflects badly on the Picard development team.  Perhaps just start the sentence with, ""It is strongly recommended that users...""', 'comment_created': datetime.datetime(2022, 7, 21, 14, 2, 55, tzinfo=datetime.timezone.utc), 'commenter': 'rdswift', 'type': 'User'}, {'comment_id': 929014372, 'comment_body': 'Should we include a brief description of the formats of the inputs?  Most people will probably understand the files and URLs, but not the required format for MBIDs.', 'comment_created': datetime.datetime(2022, 7, 25, 15, 24, 35, tzinfo=datetime.timezone.utc), 'commenter': 'rdswift', 'type': 'User'}, {'comment_id': 962332732, 'comment_body': '```suggestion\r\nWhen the program is started, it checks to see if there is another instance of that version, configuration file and plugin startup status ``-P``\r\nalready running.  If the same version is already running, any files or directories specified\r\n```', 'comment_created': datetime.datetime(2022, 9, 4, 15, 32, 25, tzinfo=datetime.timezone.utc), 'commenter': 'rdswift', 'type': 'User'}, {'comment_id': 962333918, 'comment_body': '\r\n\r\n\r\n\r\n```suggestion\r\nInstances started with command-line argument ``-s / --stand-alone`` always start as stand-alone.\r\n```\r\n\r\nThe behavior has changed in https://github.com/metabrainz/picard/pull/2139 so this may need to be updated.', 'comment_created': datetime.datetime(2022, 9, 4, 15, 42, 27, tzinfo=datetime.timezone.utc), 'commenter': 'rdswift', 'type': 'User'}, {'comment_id': 962334203, 'comment_body': 'Agreed', 'comment_created': datetime.datetime(2022, 9, 4, 15, 44, 50, tzinfo=datetime.timezone.utc), 'commenter': 'skelly37', 'type': 'User'}]","[{'commit_sha': 'e0634e7e80aef7273fcd69e0a80e18bb2ada7416', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6b08de283b29944b3b5aebcd8e82cf855350776', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47962c374cb21042dee1a70b14f24649c9c9f903', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7798ce3c9aecc5377ea4d4fbbf5dac58d3abebdb', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da64aa76b24e25505c11bc9d36d25a92d58ec644', 'committer_username': 'rdswift', 'committer_name': 'Bob Swift', 'committer_email': None, 'commit_date': datetime.datetime(2016, 1, 31, 19, 11, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c383658ecc8a7dc452d5f6a53f506959306268e9', 'committer_username': 'rdswift', 'committer_name': 'Bob Swift', 'committer_email': None, 'commit_date': datetime.datetime(2016, 1, 31, 19, 11, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4fcdb5af6dce042f51ddc9b5cae67fb7055156fd', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d15da6259c465d1ef18eee4ddd34f408a566e7e', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ec0f61ec93797921859bb6580571fded1c705f5', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '81c9b374d62b09284769819941af4827e09103bf', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d78885cc9345aeb0c5323d1408326772d0ce42b', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '331dd8087da7668df0322208c9cade825eaab7d4', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd34dabe18004120d166ead4ad7b397a905587425', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c15b65fc26d36d5a033aedf87200705964fe733', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd71c711c8afe99a2aff6dc08c08eff316bfc7fed', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5fcdae935aae6530fc81bacbeb251264b32a055', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b8f9c31466d12702b9ac1dfef33243a0b6b2891', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c84bb51553cf1d27a3b16f109557cd3834929aae', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3dd48ef711231fc2bc650665f7f9008f5922842', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1fb2c167ef8c67f631fda3210b90001db71ef4c0', 'committer_username': 'skelly37', 'committer_name': 'Kamil', 'committer_email': 'skelly37@protonmail.com', 'commit_date': datetime.datetime(2020, 12, 23, 16, 57, 21, tzinfo=datetime.timezone.utc)}]",Kamil,76530971,skelly37@protonmail.com,User,,9,,23,20

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
2218679,picard,metabrainz/picard,Python,382,3676,108,155,11307,9,19,9,"[{'id': 1048999305, 'number': 2146, 'closed': datetime.datetime(2022, 9, 8, 10, 19, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 7, 16, 39, 56, tzinfo=datetime.timezone.utc), 'time_taken': 63595.0, 'time_delta': '17:39:55', 'additions': 13, 'deletions': 0, 'state': 'closed'}, {'id': 1048865512, 'number': 2145, 'closed': datetime.datetime(2022, 9, 7, 15, 40, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 7, 14, 44, 11, tzinfo=datetime.timezone.utc), 'time_taken': 3389.0, 'time_delta': '0:56:29', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 1047849843, 'number': 2144, 'closed': datetime.datetime(2022, 9, 7, 15, 43, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 6, 17, 35, 30, tzinfo=datetime.timezone.utc), 'time_taken': 79662.0, 'time_delta': '22:07:42', 'additions': 12, 'deletions': 0, 'state': 'closed'}, {'id': 1045793489, 'number': 2143, 'closed': datetime.datetime(2022, 9, 7, 8, 47, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 4, 21, 50, 1, tzinfo=datetime.timezone.utc), 'time_taken': 212249.0, 'time_delta': '2 days, 10:57:29', 'additions': 76, 'deletions': 0, 'state': 'closed'}, {'id': 1045787478, 'number': 2142, 'closed': datetime.datetime(2022, 9, 7, 6, 52, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 4, 21, 7, 31, tzinfo=datetime.timezone.utc), 'time_taken': 207924.0, 'time_delta': '2 days, 9:45:24', 'additions': 12, 'deletions': 0, 'state': 'closed'}, {'id': 1045782318, 'number': 2141, 'closed': datetime.datetime(2022, 9, 7, 6, 57, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 4, 20, 34, 35, tzinfo=datetime.timezone.utc), 'time_taken': 210187.0, 'time_delta': '2 days, 10:23:07', 'additions': 26, 'deletions': 8, 'state': 'closed'}, {'id': 1040159395, 'number': 2139, 'closed': datetime.datetime(2022, 9, 4, 19, 23, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 29, 20, 18, 2, tzinfo=datetime.timezone.utc), 'time_taken': 515110.0, 'time_delta': '5 days, 23:05:10', 'additions': 68, 'deletions': 70, 'state': 'closed'}, {'id': 1013022110, 'number': 2137, 'closed': datetime.datetime(2022, 8, 29, 18, 11, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 31, 12, 59, 19, tzinfo=datetime.timezone.utc), 'time_taken': 2524357.0, 'time_delta': '29 days, 5:12:37', 'additions': 240, 'deletions': 13, 'state': 'closed'}, {'id': 1005659173, 'number': 2135, 'closed': datetime.datetime(2022, 7, 22, 19, 16, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 22, 10, 52, 41, tzinfo=datetime.timezone.utc), 'time_taken': 30256.0, 'time_delta': '8:24:16', 'additions': 16, 'deletions': 5, 'state': 'closed'}, {'id': 1005514901, 'number': 2134, 'closed': datetime.datetime(2023, 9, 9, 14, 31, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 22, 8, 53, 48, tzinfo=datetime.timezone.utc), 'time_taken': 35789882.0, 'time_delta': '414 days, 5:38:02', 'additions': 18, 'deletions': 13, 'state': 'closed'}, {'id': 1005492057, 'number': 2133, 'closed': datetime.datetime(2022, 7, 22, 14, 31, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 22, 8, 42, 12, tzinfo=datetime.timezone.utc), 'time_taken': 20959.0, 'time_delta': '5:49:19', 'additions': 5, 'deletions': 3, 'state': 'closed'}, {'id': 1001827946, 'number': 2130, 'closed': datetime.datetime(2022, 7, 31, 11, 33, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 20, 8, 55, 43, tzinfo=datetime.timezone.utc), 'time_taken': 959844.0, 'time_delta': '11 days, 2:37:24', 'additions': 124, 'deletions': 7, 'state': 'closed'}, {'id': 984595934, 'number': 2127, 'closed': datetime.datetime(2022, 7, 4, 6, 1, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 1, 6, 54, 34, tzinfo=datetime.timezone.utc), 'time_taken': 256020.0, 'time_delta': '2 days, 23:07:00', 'additions': 5, 'deletions': 5, 'state': 'closed'}, {'id': 981978340, 'number': 2126, 'closed': datetime.datetime(2022, 7, 1, 12, 56, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 28, 23, 40, 13, tzinfo=datetime.timezone.utc), 'time_taken': 220583.0, 'time_delta': '2 days, 13:16:23', 'additions': 5, 'deletions': 0, 'state': 'closed'}, {'id': 979130822, 'number': 2122, 'closed': datetime.datetime(2022, 6, 26, 12, 14, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 25, 20, 15, tzinfo=datetime.timezone.utc), 'time_taken': 57575.0, 'time_delta': '15:59:35', 'additions': 2, 'deletions': 0, 'state': 'closed'}, {'id': 958804066, 'number': 2116, 'closed': datetime.datetime(2022, 7, 12, 19, 1, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 6, 8, 16, 47, tzinfo=datetime.timezone.utc), 'time_taken': 3149077.0, 'time_delta': '36 days, 10:44:37', 'additions': 575, 'deletions': 5, 'state': 'closed'}, {'id': 878140058, 'number': 2080, 'closed': datetime.datetime(2022, 7, 8, 6, 43, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 12, 10, 27, 6, tzinfo=datetime.timezone.utc), 'time_taken': 10181800.0, 'time_delta': '117 days, 20:16:40', 'additions': 15, 'deletions': 57, 'state': 'closed'}]"
243807701,picard-docs,metabrainz/picard-docs,Python,13,13,10,23,1173,4,16,4,"[{'id': 980374434, 'number': 174, 'closed': datetime.datetime(2022, 12, 3, 2, 55, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 27, 18, 4, 35, tzinfo=datetime.timezone.utc), 'time_taken': 13683079.0, 'time_delta': '158 days, 8:51:19', 'additions': 52, 'deletions': 5, 'state': 'closed'}]"
