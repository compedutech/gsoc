pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1021060276,Added model_builder as directed in PR #6023 on pymc,,True,64,https://api.github.com/repos/pymc-devs/pymc-experimental/pulls/64,https://github.com/pymc-devs/pymc-experimental/pull/64,closed,433,1,3,39,18,57,0,0,[],2022-08-09 05:33:12+00:00,2022-09-13 10:16:58+00:00,3041026.0,"35 days, 4:43:46","[{'comment_id': 944353701, 'comment_body': 'Typo in `laod_idata`.', 'comment_created': datetime.datetime(2022, 8, 12, 10, 58, 39, tzinfo=datetime.timezone.utc), 'commenter': 'tomicapretto', 'type': 'User'}, {'comment_id': 944358810, 'comment_body': 'A couple of comments here.\r\n\r\n1. Wouldn\'t it be better to use a context manager to handle the connection? That makes sure the connection is closed, which is not happening here. Or you can just close the connection by hand.\r\n2. You\'re loading a file and assigning it to `self` without knowing if the file you\'re reading contains an instance of `ModelBuilder`. This class may be helpful\r\n\r\n```python\r\nclass Loader:\r\n    def __init__(self):\r\n        pass\r\n\r\n    def save_to_pickle(self, filename):\r\n        pickle_file = open(filename, ""wb"")\r\n        pickle.dump(self, file=pickle_file)\r\n        pickle_file.close()\r\n        return None\r\n\r\n    @classmethod\r\n    def load_from_pickle(self, filename):\r\n        with open(filename, ""rb"") as pickle_file:\r\n            model = pickle.load(pickle_file)\r\n        if isinstance(model, self):\r\n            return model\r\n        else:\r\n            raise ValueError(\r\n                f""The route \'{filename}\' does not contain an object of the class \'{self.__name__}\'""\r\n            )\r\n```\r\n\r\nThen you can do\r\n\r\n```python\r\nclass Model(Loader):\r\n    def __init__(self):\r\n        self.abc = 1\r\n \r\nmy_model = Model.load_from_pickle(""file.pkl"")\r\n```\r\n\r\nIf you call `load_from_pickle` using an pkl that contains an object of a different class, it will fail. \r\nI\'m not suggesting you to use the same names, but I do think this logic can be helpful', 'comment_created': datetime.datetime(2022, 8, 12, 11, 6, 12, tzinfo=datetime.timezone.utc), 'commenter': 'tomicapretto', 'type': 'User'}, {'comment_id': 944410000, 'comment_body': 'these should be optional, sometimes it is just too slow. It is often the case posterior predictive is just large so you use less samples. Maybe we need more kwargs?', 'comment_created': datetime.datetime(2022, 8, 12, 12, 23, 11, tzinfo=datetime.timezone.utc), 'commenter': 'ferrine', 'type': 'User'}, {'comment_id': 944410668, 'comment_body': 'you should not call this more than once, maybe put build in init and keep it private?', 'comment_created': datetime.datetime(2022, 8, 12, 12, 24, 9, tzinfo=datetime.timezone.utc), 'commenter': 'ferrine', 'type': 'User'}, {'comment_id': 944411895, 'comment_body': 'Is there a chance to get this automated via introspection of pm.Data? e.g. use data names as keys to fetch from kwargs and check it is consistent afterwards?', 'comment_created': datetime.datetime(2022, 8, 12, 12, 25, 42, tzinfo=datetime.timezone.utc), 'commenter': 'ferrine', 'type': 'User'}, {'comment_id': 945175915, 'comment_body': 'I would advise against switching the kind of return value via a kwarg.  Instead extract this part into a function which can be called on the return value.', 'comment_created': datetime.datetime(2022, 8, 13, 18, 16, 19, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 945176227, 'comment_body': 'What if the model is built for data that is not a single DataFrame?\r\nAt least for my models this is almost always the case.\r\n\r\nHow about making `data` a dictionary that can take DataFrames or NumPy arrays?  (`Dict[Str, Union[np.ndarray, pd.DataFrame, pd.Series]]`', 'comment_created': datetime.datetime(2022, 8, 13, 18, 19, 56, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 945324276, 'comment_body': 'Be aware of the limitations of `pickle`/`cloudpickle`. Quoting from [the `cloudpickle` README](https://github.com/cloudpipe/cloudpickle#cloudpickle):\r\n\r\n> Cloudpickle can only be used to send objects between the **exact same version\r\nof Python**.\r\n>\r\n> Using `cloudpickle` for **long-term object storage is not supported and\r\nstrongly discouraged.**\r\n>\r\n> **Security notice**: one should **only load pickle data from trusted sources** as\r\notherwise `pickle.load` can lead to arbitrary code execution resulting in a critical\r\nsecurity vulnerability.', 'comment_created': datetime.datetime(2022, 8, 14, 18, 5, 13, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 959741974, 'comment_body': 'Strings should be `""""""`.', 'comment_created': datetime.datetime(2022, 8, 31, 15, 40, 2, tzinfo=datetime.timezone.utc), 'commenter': 'twiecki', 'type': 'User'}, {'comment_id': 962822793, 'comment_body': ""> @tomicapretto I'm curious about Bambi which shares similarities (intentionally). Do you think this would be useful for it?\r\n\r\nWhat we don't have yet is a `.save()` method to save the model and/or the InferenceData object. But apart from that, most of the functionality is currently supported if I understand the aim of this. You can rebuild the Bambi model (which rebuilds the PyMC model) and load the NetCDF file with the InferenceData the model generated. This allows you to keep doing inferences later in time. The problem is, in Bambi, what if you load the wrong combination of model/NetCDF?  Sometimes it will fail, others it may silently do the wrong thing.\r\n\r\nWhat would be better, at least on Bambi's side, is something that stores model configuration, the data, and the NetCDF. "", 'comment_created': datetime.datetime(2022, 9, 5, 11, 54, 15, tzinfo=datetime.timezone.utc), 'commenter': 'tomicapretto', 'type': 'User'}, {'comment_id': 962880167, 'comment_body': ""That's what the idea of the `id` hash is, even though we currently don't check it yet."", 'comment_created': datetime.datetime(2022, 9, 5, 12, 56, 21, tzinfo=datetime.timezone.utc), 'commenter': 'twiecki', 'type': 'User'}, {'comment_id': 963040574, 'comment_body': 'missing indent', 'comment_created': datetime.datetime(2022, 9, 5, 16, 22, 43, tzinfo=datetime.timezone.utc), 'commenter': 'twiecki', 'type': 'User'}, {'comment_id': 963052228, 'comment_body': 'missing indent. I also think there is a way to tag that this is python code.', 'comment_created': datetime.datetime(2022, 9, 5, 16, 49, 27, tzinfo=datetime.timezone.utc), 'commenter': 'twiecki', 'type': 'User'}, {'comment_id': 963110160, 'comment_body': 'Needs an assert. And `equlas`?', 'comment_created': datetime.datetime(2022, 9, 5, 20, 1, 48, tzinfo=datetime.timezone.utc), 'commenter': 'twiecki', 'type': 'User'}, {'comment_id': 963110403, 'comment_body': 'I think nose is oldschool and only pytest should be used. Are you using any functionality of nose?', 'comment_created': datetime.datetime(2022, 9, 5, 20, 2, 34, tzinfo=datetime.timezone.utc), 'commenter': 'twiecki', 'type': 'User'}, {'comment_id': 963131572, 'comment_body': ""`assert` can only work with certain datatypes. `idata` itself is an `xarray.Dataset` which doesn't not work with `assert_equal` . This can be replaced using this. link for documentation of [equals](https://docs.xarray.dev/en/v0.12.3/generated/xarray.Dataset.equals.html)"", 'comment_created': datetime.datetime(2022, 9, 5, 21, 34, 46, tzinfo=datetime.timezone.utc), 'commenter': '5hv5hvnk', 'type': 'User'}, {'comment_id': 964490526, 'comment_body': 'The indentation was correct before.', 'comment_created': datetime.datetime(2022, 9, 7, 7, 36, 57, tzinfo=datetime.timezone.utc), 'commenter': 'twiecki', 'type': 'User'}, {'comment_id': 964491438, 'comment_body': 'Again, wrong indents, please be more mindful here.\r\n```suggestion\r\n        >>> def _data_setter(self, data : pd.DataFrame):\r\n```', 'comment_created': datetime.datetime(2022, 9, 7, 7, 37, 56, tzinfo=datetime.timezone.utc), 'commenter': 'twiecki', 'type': 'User'}, {'comment_id': 964492067, 'comment_body': 'Change this to just `fname`', 'comment_created': datetime.datetime(2022, 9, 7, 7, 38, 33, tzinfo=datetime.timezone.utc), 'commenter': 'twiecki', 'type': 'User'}, {'comment_id': 964494140, 'comment_body': 'Can you link to the issue with the bug?', 'comment_created': datetime.datetime(2022, 9, 7, 7, 40, 40, tzinfo=datetime.timezone.utc), 'commenter': 'twiecki', 'type': 'User'}, {'comment_id': 964494272, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2022, 9, 7, 7, 40, 51, tzinfo=datetime.timezone.utc), 'commenter': 'twiecki', 'type': 'User'}, {'comment_id': 964494453, 'comment_body': 'add space after `>>>`', 'comment_created': datetime.datetime(2022, 9, 7, 7, 41, 1, tzinfo=datetime.timezone.utc), 'commenter': 'twiecki', 'type': 'User'}, {'comment_id': 964494560, 'comment_body': 'Also in other parts.', 'comment_created': datetime.datetime(2022, 9, 7, 7, 41, 8, tzinfo=datetime.timezone.utc), 'commenter': 'twiecki', 'type': 'User'}, {'comment_id': 964591123, 'comment_body': 'But it spells `equlas`, did you run the tests to see if they pass?', 'comment_created': datetime.datetime(2022, 9, 7, 9, 12, 15, tzinfo=datetime.timezone.utc), 'commenter': 'twiecki', 'type': 'User'}, {'comment_id': 964945931, 'comment_body': ""For the equals assert here, you don't need to run 2000 iterations.\r\n\r\nPlease do `pm.sample(tune=10, draws=20, chains=3, cores=1, step=pm.Metropolis(), compute_convergence_checks=False)` here and above, so the test runtime doesn't increase too much."", 'comment_created': datetime.datetime(2022, 9, 7, 14, 50, 49, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 964946141, 'comment_body': '```suggestion\r\n        Returns\r\n        -------\r\n```', 'comment_created': datetime.datetime(2022, 9, 7, 14, 51, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 964946632, 'comment_body': 'The docstring needs a title, and an empty line before the `Parameters` section', 'comment_created': datetime.datetime(2022, 9, 7, 14, 51, 27, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 964946811, 'comment_body': '```suggestion\r\n        Retruns\r\n        -------\r\n```', 'comment_created': datetime.datetime(2022, 9, 7, 14, 51, 36, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 964947129, 'comment_body': '```suggestion\r\n        Returns\r\n        -------\r\n```', 'comment_created': datetime.datetime(2022, 9, 7, 14, 51, 53, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 964947238, 'comment_body': '```suggestion\r\n        Example\r\n        -------\r\n```', 'comment_created': datetime.datetime(2022, 9, 7, 14, 51, 59, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 964947512, 'comment_body': '```suggestion\r\n        Parameter\r\n        ---------\r\n```', 'comment_created': datetime.datetime(2022, 9, 7, 14, 52, 12, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 964947831, 'comment_body': '```suggestion\r\n        data : Dictionary of string and either of numpy array, pandas dataframe or pandas Series\r\n            It is the data we need to set as idata for the model\r\n        x_only : bool\r\n```', 'comment_created': datetime.datetime(2022, 9, 7, 14, 52, 27, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 964948385, 'comment_body': 'Please check in the core PyMC repo how example sections should be formatted.', 'comment_created': datetime.datetime(2022, 9, 7, 14, 52, 55, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 964948559, 'comment_body': '```suggestion\r\n        Initialises model configration and sampler configration for the model\r\n        \r\n        Parameters\r\n```', 'comment_created': datetime.datetime(2022, 9, 7, 14, 53, 4, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 964948840, 'comment_body': '```suggestion\r\n    for multiple tasks that one need to deploy a model.\r\n    """"""\r\n```', 'comment_created': datetime.datetime(2022, 9, 7, 14, 53, 16, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 965881257, 'comment_body': '```suggestion\r\n        model_config : Dictionary\r\n```', 'comment_created': datetime.datetime(2022, 9, 8, 12, 13, 59, tzinfo=datetime.timezone.utc), 'commenter': 'twiecki', 'type': 'User'}, {'comment_id': 965881850, 'comment_body': '```suggestion\r\n            dictionary of parameters that initialize model configuration. Generated by the user defined create_sample_input method.\r\n```', 'comment_created': datetime.datetime(2022, 9, 8, 12, 14, 24, tzinfo=datetime.timezone.utc), 'commenter': 'twiecki', 'type': 'User'}, {'comment_id': 965883439, 'comment_body': '```suggestion\r\n        fname : string\r\n```', 'comment_created': datetime.datetime(2022, 9, 8, 12, 15, 30, tzinfo=datetime.timezone.utc), 'commenter': 'twiecki', 'type': 'User'}, {'comment_id': 965883695, 'comment_body': '```suggestion\r\n        fname : string\r\n```', 'comment_created': datetime.datetime(2022, 9, 8, 12, 15, 39, tzinfo=datetime.timezone.utc), 'commenter': 'twiecki', 'type': 'User'}, {'comment_id': 965884634, 'comment_body': '```suggestion\r\n        returns inference data of the fitted model.\r\n```', 'comment_created': datetime.datetime(2022, 9, 8, 12, 16, 16, tzinfo=datetime.timezone.utc), 'commenter': 'twiecki', 'type': 'User'}, {'comment_id': 966152843, 'comment_body': '```suggestion\r\n        >>>    x = np.linspace(start=1, stop=50, num=100)\r\n```', 'comment_created': datetime.datetime(2022, 9, 8, 16, 5, 22, tzinfo=datetime.timezone.utc), 'commenter': 'twiecki', 'type': 'User'}, {'comment_id': 967069472, 'comment_body': ""I see your point, but I also don't think it's terrible style in this setting."", 'comment_created': datetime.datetime(2022, 9, 9, 13, 25, 12, tzinfo=datetime.timezone.utc), 'commenter': 'twiecki', 'type': 'User'}, {'comment_id': 967069999, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2022, 9, 9, 13, 25, 43, tzinfo=datetime.timezone.utc), 'commenter': 'twiecki', 'type': 'User'}, {'comment_id': 967803618, 'comment_body': '```suggestion\r\n        >>>    x = np.linspace(start=1, stop=50, num=100)\r\n```', 'comment_created': datetime.datetime(2022, 9, 11, 10, 44, tzinfo=datetime.timezone.utc), 'commenter': 'twiecki', 'type': 'User'}, {'comment_id': 967803653, 'comment_body': '```suggestion\r\n        x = np.linspace(start=0, stop=1, num=100)\r\n```', 'comment_created': datetime.datetime(2022, 9, 11, 10, 44, 20, tzinfo=datetime.timezone.utc), 'commenter': 'twiecki', 'type': 'User'}, {'comment_id': 967803696, 'comment_body': '```suggestion\r\n        x = np.linspace(start=0, stop=1, num=100)\r\n```', 'comment_created': datetime.datetime(2022, 9, 11, 10, 44, 37, tzinfo=datetime.timezone.utc), 'commenter': 'twiecki', 'type': 'User'}, {'comment_id': 967803715, 'comment_body': '```suggestion\r\n        x = np.linspace(start=0, stop=1, num=100)\r\n```', 'comment_created': datetime.datetime(2022, 9, 11, 10, 44, 48, tzinfo=datetime.timezone.utc), 'commenter': 'twiecki', 'type': 'User'}, {'comment_id': 967803770, 'comment_body': '```suggestion\r\n        x = np.linspace(start=0, stop=1, num=100)\r\n```', 'comment_created': datetime.datetime(2022, 9, 11, 10, 45, 11, tzinfo=datetime.timezone.utc), 'commenter': 'twiecki', 'type': 'User'}, {'comment_id': 968907021, 'comment_body': 'there was a totally valid error in the CI\r\nhttps://github.com/pymc-devs/pymc-experimental/issues/81\r\n\r\nThe identation in incorrect, the code block should look like this:\r\n\r\n```\r\n>>> class LinearModel(ModelBuilder):\r\n>>>     ...\r\n```\r\nnot \r\n```\r\n>>> class LinearModel(ModelBuilder):\r\n>>> ...\r\n```', 'comment_created': datetime.datetime(2022, 9, 12, 20, 34, 49, tzinfo=datetime.timezone.utc), 'commenter': 'ferrine', 'type': 'User'}, {'comment_id': 968908090, 'comment_body': 'pretty identation should be applied to dictionaries', 'comment_created': datetime.datetime(2022, 9, 12, 20, 36, 15, tzinfo=datetime.timezone.utc), 'commenter': 'ferrine', 'type': 'User'}, {'comment_id': 968908329, 'comment_body': 'the identation problem as mentioned above', 'comment_created': datetime.datetime(2022, 9, 12, 20, 36, 35, tzinfo=datetime.timezone.utc), 'commenter': 'ferrine', 'type': 'User'}, {'comment_id': 968908423, 'comment_body': 'same issue', 'comment_created': datetime.datetime(2022, 9, 12, 20, 36, 42, tzinfo=datetime.timezone.utc), 'commenter': 'ferrine', 'type': 'User'}, {'comment_id': 969349035, 'comment_body': '```suggestion\r\n    ModelBuilder class can be used to provide an easy-to-use API (similar to scikit-learn) for models\r\n    and help with deployment.\r\n```', 'comment_created': datetime.datetime(2022, 9, 13, 9, 3, 13, tzinfo=datetime.timezone.utc), 'commenter': 'twiecki', 'type': 'User'}, {'comment_id': 969349381, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2022, 9, 13, 9, 3, 31, tzinfo=datetime.timezone.utc), 'commenter': 'twiecki', 'type': 'User'}, {'comment_id': 969350319, 'comment_body': '```suggestion\r\n    Extends the pymc.Model class.\r\n    """"""\r\n```', 'comment_created': datetime.datetime(2022, 9, 13, 9, 4, 19, tzinfo=datetime.timezone.utc), 'commenter': 'twiecki', 'type': 'User'}, {'comment_id': 969352411, 'comment_body': '```suggestion\r\n    and help with deployment.\r\n\r\n```', 'comment_created': datetime.datetime(2022, 9, 13, 9, 6, 11, tzinfo=datetime.timezone.utc), 'commenter': 'twiecki', 'type': 'User'}, {'comment_id': 969352854, 'comment_body': '```suggestion\r\n    ModelBuilder can be used to provide an easy-to-use API (similar to scikit-learn) for models\r\n```', 'comment_created': datetime.datetime(2022, 9, 13, 9, 6, 35, tzinfo=datetime.timezone.utc), 'commenter': 'twiecki', 'type': 'User'}]","[{'commit_sha': '3c3dbda15ccab7d3abc2b1d31c7f13a44e9da099', 'committer_username': '5hv5hvnk', 'committer_name': 'S', 'committer_email': 'shashankkirtania123@gmail.com', 'commit_date': datetime.datetime(2016, 2, 10, 14, 41, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a2ca23391c710abf9343dfa0c827f1b6e2cede9', 'committer_username': '5hv5hvnk', 'committer_name': 'S', 'committer_email': 'shashankkirtania123@gmail.com', 'commit_date': datetime.datetime(2016, 2, 10, 14, 41, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a510ef406d41a1243a30dabf191cd8c853721f1e', 'committer_username': '5hv5hvnk', 'committer_name': 'S', 'committer_email': 'shashankkirtania123@gmail.com', 'commit_date': datetime.datetime(2016, 2, 10, 14, 41, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '410617bb9a7512c78e838cf25e233b2bae049e69', 'committer_username': '5hv5hvnk', 'committer_name': 'S', 'committer_email': 'shashankkirtania123@gmail.com', 'commit_date': datetime.datetime(2016, 2, 10, 14, 41, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e1d200ec2430d08ba3ffa4f2ba1d4fe7c5a28e1', 'committer_username': '5hv5hvnk', 'committer_name': 'S', 'committer_email': 'shashankkirtania123@gmail.com', 'commit_date': datetime.datetime(2016, 2, 10, 14, 41, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50cfc1c2a9adc26f008f54e21f3085e9686b8880', 'committer_username': '5hv5hvnk', 'committer_name': 'S', 'committer_email': 'shashankkirtania123@gmail.com', 'commit_date': datetime.datetime(2016, 2, 10, 14, 41, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9dab7cc0536e3bc2828f2c88703f058e4f00f60e', 'committer_username': '5hv5hvnk', 'committer_name': 'S', 'committer_email': 'shashankkirtania123@gmail.com', 'commit_date': datetime.datetime(2016, 2, 10, 14, 41, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd757d9cdf38f600664a569cea8bba8d60b1a3788', 'committer_username': '5hv5hvnk', 'committer_name': 'S', 'committer_email': 'shashankkirtania123@gmail.com', 'commit_date': datetime.datetime(2016, 2, 10, 14, 41, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6c0fab812bb7dd5016173fa2d8cbd61598de405', 'committer_username': '5hv5hvnk', 'committer_name': 'S', 'committer_email': 'shashankkirtania123@gmail.com', 'commit_date': datetime.datetime(2016, 2, 10, 14, 41, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2e1e02f6690f92d18934ae9069c6b3a6536b532e', 'committer_username': '5hv5hvnk', 'committer_name': 'S', 'committer_email': 'shashankkirtania123@gmail.com', 'commit_date': datetime.datetime(2016, 2, 10, 14, 41, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '890a00f7bee0a22ee50edc788201cc9ba821451a', 'committer_username': '5hv5hvnk', 'committer_name': 'S', 'committer_email': 'shashankkirtania123@gmail.com', 'commit_date': datetime.datetime(2016, 2, 10, 14, 41, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1cd1152c44b926b18b2d5657d342e132300bf70', 'committer_username': '5hv5hvnk', 'committer_name': 'S', 'committer_email': 'shashankkirtania123@gmail.com', 'commit_date': datetime.datetime(2016, 2, 10, 14, 41, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a8041280122d274bac88d06ff16ea830b633fd2', 'committer_username': '5hv5hvnk', 'committer_name': 'S', 'committer_email': 'shashankkirtania123@gmail.com', 'commit_date': datetime.datetime(2016, 2, 10, 14, 41, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5912eed669203b4e5fa2c228f3d8157576530221', 'committer_username': '5hv5hvnk', 'committer_name': 'S', 'committer_email': 'shashankkirtania123@gmail.com', 'commit_date': datetime.datetime(2016, 2, 10, 14, 41, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd5b25b46b61097972acd893d5c87fcd84f5c2d4', 'committer_username': '5hv5hvnk', 'committer_name': 'S', 'committer_email': 'shashankkirtania123@gmail.com', 'commit_date': datetime.datetime(2016, 2, 10, 14, 41, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c43651b22becd3f42a9d2363eb41dec5affc62a6', 'committer_username': '5hv5hvnk', 'committer_name': 'S', 'committer_email': 'shashankkirtania123@gmail.com', 'commit_date': datetime.datetime(2016, 2, 10, 14, 41, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '80c73b55e61289652f69e0bf209e3c79dcdf2fc7', 'committer_username': '5hv5hvnk', 'committer_name': 'S', 'committer_email': 'shashankkirtania123@gmail.com', 'commit_date': datetime.datetime(2016, 2, 10, 14, 41, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ab42284aa5ebaf8e9380fb00914555417698a5a', 'committer_username': '5hv5hvnk', 'committer_name': 'S', 'committer_email': 'shashankkirtania123@gmail.com', 'commit_date': datetime.datetime(2016, 2, 10, 14, 41, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e272f1ca3423d4ad5830e42b6f4f7740f5d47b02', 'committer_username': '5hv5hvnk', 'committer_name': 'S', 'committer_email': 'shashankkirtania123@gmail.com', 'commit_date': datetime.datetime(2016, 2, 10, 14, 41, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ccfa1e0e204d4954cec820ca42a71bd58e25875', 'committer_username': '5hv5hvnk', 'committer_name': 'S', 'committer_email': 'shashankkirtania123@gmail.com', 'commit_date': datetime.datetime(2016, 2, 10, 14, 41, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '43a06dfadfbcb34054b8dcea46a8ec3fea1a94a3', 'committer_username': 'twiecki', 'committer_name': 'Thomas Wiecki', 'committer_email': None, 'commit_date': datetime.datetime(2011, 3, 17, 0, 44, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ce4838df0afae85728d311ba952b5caeb487ec2', 'committer_username': 'twiecki', 'committer_name': 'Thomas Wiecki', 'committer_email': None, 'commit_date': datetime.datetime(2011, 3, 17, 0, 44, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34f1aaf3865586ba5c7ab9304733702d6dbd5353', 'committer_username': '5hv5hvnk', 'committer_name': 'S', 'committer_email': 'shashankkirtania123@gmail.com', 'commit_date': datetime.datetime(2016, 2, 10, 14, 41, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad5fd7046530ea9c1b036551f9da050b5df7e807', 'committer_username': 'twiecki', 'committer_name': 'Thomas Wiecki', 'committer_email': None, 'commit_date': datetime.datetime(2011, 3, 17, 0, 44, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b421322cdca58dc6e2cb7286c25a958fdb4615a', 'committer_username': '5hv5hvnk', 'committer_name': 'S', 'committer_email': 'shashankkirtania123@gmail.com', 'commit_date': datetime.datetime(2016, 2, 10, 14, 41, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e0fd19623086e0209883c4856c4b47cc6716c84', 'committer_username': '5hv5hvnk', 'committer_name': 'S', 'committer_email': 'shashankkirtania123@gmail.com', 'commit_date': datetime.datetime(2016, 2, 10, 14, 41, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd1467fe6278ab3fbff2261f1206c6c1a401d5240', 'committer_username': '5hv5hvnk', 'committer_name': 'S', 'committer_email': 'shashankkirtania123@gmail.com', 'commit_date': datetime.datetime(2016, 2, 10, 14, 41, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0165fcb2f432e0890a081bbcc8920d0bf1a9f660', 'committer_username': '5hv5hvnk', 'committer_name': 'S', 'committer_email': 'shashankkirtania123@gmail.com', 'commit_date': datetime.datetime(2016, 2, 10, 14, 41, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b49199dbb846a292bc1ebb8ae6135be9a848fd4b', 'committer_username': 'twiecki', 'committer_name': 'Thomas Wiecki', 'committer_email': None, 'commit_date': datetime.datetime(2011, 3, 17, 0, 44, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '63c4ed979ac93f1cc86d52a8bd4d5babbab83d94', 'committer_username': '5hv5hvnk', 'committer_name': 'S', 'committer_email': 'shashankkirtania123@gmail.com', 'commit_date': datetime.datetime(2016, 2, 10, 14, 41, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb510492be1a657e54bd55b2bcb23cacf7d31e4a', 'committer_username': '5hv5hvnk', 'committer_name': 'S', 'committer_email': 'shashankkirtania123@gmail.com', 'commit_date': datetime.datetime(2016, 2, 10, 14, 41, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0030a50fc820b8687a229b0f6aed11b9bd187bb4', 'committer_username': '5hv5hvnk', 'committer_name': 'S', 'committer_email': 'shashankkirtania123@gmail.com', 'commit_date': datetime.datetime(2016, 2, 10, 14, 41, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e5f8e724eabc347ccf46257dfff288665e01dc4b', 'committer_username': '5hv5hvnk', 'committer_name': 'S', 'committer_email': 'shashankkirtania123@gmail.com', 'commit_date': datetime.datetime(2016, 2, 10, 14, 41, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b045f08aa7099dee82a942873a8dca73894d0439', 'committer_username': '5hv5hvnk', 'committer_name': 'S', 'committer_email': 'shashankkirtania123@gmail.com', 'commit_date': datetime.datetime(2016, 2, 10, 14, 41, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '37f0bc3c9aa10cbf81c768752ec97d27e3fb1f4b', 'committer_username': '5hv5hvnk', 'committer_name': 'S', 'committer_email': 'shashankkirtania123@gmail.com', 'commit_date': datetime.datetime(2016, 2, 10, 14, 41, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '63502a4179f4c243a2588b5c5197886e95258a34', 'committer_username': '5hv5hvnk', 'committer_name': 'S', 'committer_email': 'shashankkirtania123@gmail.com', 'commit_date': datetime.datetime(2016, 2, 10, 14, 41, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b4d1ca15f62ee566453bc1b54cd0b012dc340ff4', 'committer_username': 'twiecki', 'committer_name': 'Thomas Wiecki', 'committer_email': None, 'commit_date': datetime.datetime(2011, 3, 17, 0, 44, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70053e1f349d9f8002c75c09985c13fc423ef3f4', 'committer_username': 'twiecki', 'committer_name': 'Thomas Wiecki', 'committer_email': None, 'commit_date': datetime.datetime(2011, 3, 17, 0, 44, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c498b20d8ec95c1aca87a35ccb4a54a3642452a8', 'committer_username': 'twiecki', 'committer_name': 'Thomas Wiecki', 'committer_email': None, 'commit_date': datetime.datetime(2011, 3, 17, 0, 44, 58, tzinfo=datetime.timezone.utc)}]",S,17161999,shashankkirtania123@gmail.com,User,,55,,46,35
1054833614,Added example for using ModelBuilder for pymc_experimental,[merged code](https://github.com/pymc-devs/pymc-experimental/pull/64),True,419,https://api.github.com/repos/pymc-devs/pymc-examples/pulls/419,https://github.com/pymc-devs/pymc-examples/pull/419,closed,1200,0,2,29,13,25,0,0,[],2022-09-13 15:03:37+00:00,2023-02-22 12:44:35+00:00,13988458.0,"161 days, 21:40:58","[{'comment_id': 985080957, 'comment_body': '```suggestion\r\n`pip install git+https://github.com/pymc-devs/pymc-experimental`\r\n```', 'comment_created': datetime.datetime(2022, 10, 1, 10, 10, 20, tzinfo=datetime.timezone.utc), 'commenter': 'twiecki', 'type': 'User'}, {'comment_id': 991671282, 'comment_body': ""This need to have every element in a different line and use the colon and pointy parenthesis syntax as shown in https://docs.pymc.io/en/latest/contributing/jupyter_style.html#first-cell. The target above the title so we can reference this notebook from other pages is also missing.\r\n\r\nSee how the preview for this notebook https://pymcio--419.org.readthedocs.build/projects/examples/en/419/howto/Model_Builder.html does not have any highlighted icon nor text in the left sidebar, nor it has the github/colab/binder badges nor the tags listed on the right sidebar like other notebook (that have been updated) do. You can use https://pymcio--419.org.readthedocs.build/projects/examples/en/419/causal_inference/regression_discontinuity.html as an comparison reference. This is because sphinx doesn't understand the post directive and therefore doesn't have the metadata for this."", 'comment_created': datetime.datetime(2022, 10, 10, 22, 12, 1, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 991672505, 'comment_body': 'You should add yourself as author of the notebook: https://docs.pymc.io/en/latest/contributing/jupyter_style.html#authorship-and-attribution, add a markdown title before the watermark code cell and add the page_footer include (all explained in the jupyter style guide much better than what I can do here, let me know if you have any questions)', 'comment_created': datetime.datetime(2022, 10, 10, 22, 15, 2, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 1070641861, 'comment_body': 'You need to add the notebook target right before the header as shown in https://docs.pymc.io/en/latest/contributing/jupyter_style.html#first-cell', 'comment_created': datetime.datetime(2023, 1, 15, 17, 2, 19, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 1070642074, 'comment_body': 'This also needs to follow the right formatting (see https://docs.pymc.io/en/latest/contributing/jupyter_style.html#first-cell), each metadata in its own line, the ending colon fence also on a line of its own, brackets around `post` in the directive definition.', 'comment_created': datetime.datetime(2023, 1, 15, 17, 3, 32, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 1070642947, 'comment_body': 'If you want breaklines in markdown you should leave an empty line between text lines instead of using `<br>`.', 'comment_created': datetime.datetime(2023, 1, 15, 17, 6, 59, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 1070644948, 'comment_body': 'is pymc-experimental on pypi?', 'comment_created': datetime.datetime(2023, 1, 15, 17, 9, 35, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 1070646122, 'comment_body': 'You need to add youself as author as well as adding the watermark title and page footer. See https://docs.pymc.io/en/latest/contributing/jupyter_style.html#authorship-and-attribution and until the end (skipping the references section).', 'comment_created': datetime.datetime(2023, 1, 15, 17, 13, 52, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 1081512025, 'comment_body': 'every time I shift enter the markdown cell it reformats to single line', 'comment_created': datetime.datetime(2023, 1, 19, 16, 20, 11, tzinfo=datetime.timezone.utc), 'commenter': '5hv5hvnk', 'type': 'User'}, {'comment_id': 1081514089, 'comment_body': 'This file is auto generated after executing `pre-commit run --all`\r\n', 'comment_created': datetime.datetime(2023, 1, 19, 16, 21, 32, tzinfo=datetime.timezone.utc), 'commenter': '5hv5hvnk', 'type': 'User'}, {'comment_id': 1081637214, 'comment_body': 'Yes, I add the review comments on the myst one because it is where all this issues can be correctly seen, but you should make the changes to the ipynb file and you will continue to do so in future reviews too. I generally only [comment this](https://github.com/pymc-devs/pymc-examples/pull/419#pullrequestreview-1136572558) in the first review', 'comment_created': datetime.datetime(2023, 1, 19, 18, 5, 19, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 1081639721, 'comment_body': ""It is correct [now](https://github.com/pymc-devs/pymc-examples/pull/419/files#diff-2fe61fd4af5fafe0c4287269b17660e0d4ceedc0ce92f89a4f0d729a9dd1d254R14-R18). It is ok if after shift-enter _the preview_ shows everytihng in a single line. However, if you click to edit the cell again, you'll see the right spacing again. This is also one of the reasons why I review on the myst file and not on reviewnb, I need to see the _raw markdown_ to be able to review properly, not the _rendered markdown_ (which is what you see after shift-enter or in reviewnb)"", 'comment_created': datetime.datetime(2023, 1, 19, 18, 7, 8, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 1081642952, 'comment_body': 'The [watermark header](https://docs.pymc.io/en/latest/contributing/jupyter_style.html#watermark) and [page footer](https://docs.pymc.io/en/latest/contributing/jupyter_style.html#epilogue) are still missing.', 'comment_created': datetime.datetime(2023, 1, 19, 18, 9, 10, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 1081648206, 'comment_body': ""This should either be a level 2 heading (two # only) and then there should be more similar level 2 headings, otherwise it looks like everything below is inside this section which isn't really the case.\r\n\r\nOr alternatively simply some bold text (not recommended though, having multiple section and subsection headings helps reading and navigation, especially when coming back to the doc or for sharing specific inisghts from it)."", 'comment_created': datetime.datetime(2023, 1, 19, 18, 14, 43, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 1081650092, 'comment_body': 'We don\'t use classes (or any pymc objects for that matter) as tags. I would probably use something like ""deployment"" and other related topics.', 'comment_created': datetime.datetime(2023, 1, 19, 18, 16, 28, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 1081650373, 'comment_body': 'beginner has to be in all lowercase', 'comment_created': datetime.datetime(2023, 1, 19, 18, 16, 44, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 1081651445, 'comment_body': 'I still see a lot of <br> tags around', 'comment_created': datetime.datetime(2023, 1, 19, 18, 17, 39, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 1081652823, 'comment_body': '```suggestion\r\nMost importantly, if you make _a really cool model_ and want to deploy the same, it will be easier for you to make a class and share the model so people can use it via the object instead of redefining the model every time they need it. <br>\r\n```\r\n\r\nThere is an extra space which makes it not render properly. Current look:\r\n\r\n![imatge](https://user-images.githubusercontent.com/23738400/213527643-afb49eb0-66c1-4805-9f33-8024853c8136.png)\r\n', 'comment_created': datetime.datetime(2023, 1, 19, 18, 18, 55, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 1081660100, 'comment_body': 'You should create a generator like in the [example](https://docs.pymc.io/en/latest/contributing/jupyter_style.html#code-preamble) and use that to generate the samples from the given seed, using the `numpy.random` namespace directly or `RandomState` classes is discouraged: https://numpy.org/doc/stable/reference/random/legacy.html#functions-in-numpy-random', 'comment_created': datetime.datetime(2023, 1, 19, 18, 25, 24, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 1082109782, 'comment_body': '<p><code>fname = ""mymodel.nc""</code>?</p>\n<br/>\n\n _Reply via <a href=\'https://app.reviewnb.com/pymc-devs/pymc-examples/pull/419/discussion/\'>ReviewNB</a>_ <div id=\'ReviewNBCommentContext-DoNotDelete\' style=\'display:none\' data-state=\'OPEN\' data-cellIndex=\'19\'/>', 'comment_created': datetime.datetime(2023, 1, 20, 4, 56, 17, tzinfo=datetime.timezone.utc), 'commenter': 'twiecki', 'type': 'User'}, {'comment_id': 1082109786, 'comment_body': ""<p>Add:</p><p>Notice that <code>load()</code> is a class-method, so we call it on the class, not the object. The benefit of that is, that when you <code>load()</code> the model in a different environment, all you need is access to the model class (e.g. in a <code>.py</code> file) and your <code>.nc</code> <code>InferenceData</code> file -- the data and model configuration are all saved and loaded.</p>\n<br/>\n\n _Reply via <a href='https://app.reviewnb.com/pymc-devs/pymc-examples/pull/419/discussion/'>ReviewNB</a>_ <div id='ReviewNBCommentContext-DoNotDelete' style='display:none' data-state='OPEN' data-cellIndex='21'/>"", 'comment_created': datetime.datetime(2023, 1, 20, 4, 56, 17, tzinfo=datetime.timezone.utc), 'commenter': 'twiecki', 'type': 'User'}, {'comment_id': 1082109787, 'comment_body': ""<p>predcit -&gt; predict</p>\n<br/>\n\n _Reply via <a href='https://app.reviewnb.com/pymc-devs/pymc-examples/pull/419/discussion/'>ReviewNB</a>_ <div id='ReviewNBCommentContext-DoNotDelete' style='display:none' data-state='OPEN' data-cellIndex='23'/>"", 'comment_created': datetime.datetime(2023, 1, 20, 4, 56, 17, tzinfo=datetime.timezone.utc), 'commenter': 'twiecki', 'type': 'User'}, {'comment_id': 1082109788, 'comment_body': '<p>Misses ""."" at the end.</p>\n<br/>\n\n _Reply via <a href=\'https://app.reviewnb.com/pymc-devs/pymc-examples/pull/419/discussion/\'>ReviewNB</a>_ <div id=\'ReviewNBCommentContext-DoNotDelete\' style=\'display:none\' data-state=\'OPEN\' data-cellIndex=\'25\'/>', 'comment_created': datetime.datetime(2023, 1, 20, 4, 56, 18, tzinfo=datetime.timezone.utc), 'commenter': 'twiecki', 'type': 'User'}, {'comment_id': 1113444833, 'comment_body': 'is it necessary to use a randomstate specifically? If possible we should use [`Generator`](https://numpy.org/doc/stable/reference/random/generator.html) as randomstate (and the global state) are legacy code. \r\n\r\nFrom https://numpy.org/doc/stable/reference/random/legacy.html#legacy-random-generation:\r\n\r\n> The [RandomState](https://numpy.org/doc/stable/reference/random/legacy.html#numpy.random.RandomState) provides access to legacy generators. This generator is considered frozen and will have no further improvements. [...] This class should only be used if it is essential to have randoms that are identical to what would have been produced by previous versions of NumPy.', 'comment_created': datetime.datetime(2023, 2, 21, 18, 44, 42, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 1113446124, 'comment_body': 'The page footer part is still missing: https://www.pymc.io/projects/docs/en/latest/contributing/jupyter_style.html#epilogue', 'comment_created': datetime.datetime(2023, 2, 21, 18, 45, 45, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}]","[{'commit_sha': 'a8b55a84bf9164b6203dc6e0ed108d67807f5cd3', 'committer_username': '5hv5hvnk', 'committer_name': 'S', 'committer_email': 'shashankkirtania123@gmail.com', 'commit_date': datetime.datetime(2016, 2, 10, 14, 41, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f56aeb3917578a0213b6f4bb223e32dd0fa796f', 'committer_username': '5hv5hvnk', 'committer_name': 'S', 'committer_email': 'shashankkirtania123@gmail.com', 'commit_date': datetime.datetime(2016, 2, 10, 14, 41, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '187a4bdb418ed82f06ec3f0883f58c55eb6591b0', 'committer_username': '5hv5hvnk', 'committer_name': 'S', 'committer_email': 'shashankkirtania123@gmail.com', 'commit_date': datetime.datetime(2016, 2, 10, 14, 41, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2f130c14d5791edd7fed27ffad6e01e51ce263cc', 'committer_username': '5hv5hvnk', 'committer_name': 'S', 'committer_email': 'shashankkirtania123@gmail.com', 'commit_date': datetime.datetime(2016, 2, 10, 14, 41, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '52905a298446f2a3d2700757f471e53dc2b25f3a', 'committer_username': '5hv5hvnk', 'committer_name': 'S', 'committer_email': 'shashankkirtania123@gmail.com', 'commit_date': datetime.datetime(2016, 2, 10, 14, 41, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '35d9faf1f7b6c217185f5857bd4a6538ade69578', 'committer_username': '5hv5hvnk', 'committer_name': 'S', 'committer_email': 'shashankkirtania123@gmail.com', 'commit_date': datetime.datetime(2016, 2, 10, 14, 41, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f73cafe652f89043296ef5808527b37a89fd7b05', 'committer_username': '5hv5hvnk', 'committer_name': 'S', 'committer_email': 'shashankkirtania123@gmail.com', 'commit_date': datetime.datetime(2016, 2, 10, 14, 41, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cbcd8238b9cb2dd7e2069942793bb939ec2556b1', 'committer_username': '5hv5hvnk', 'committer_name': 'S', 'committer_email': 'shashankkirtania123@gmail.com', 'commit_date': datetime.datetime(2016, 2, 10, 14, 41, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a678e1b72eca0dd3d32e66fa0996926760f466f', 'committer_username': '5hv5hvnk', 'committer_name': 'S', 'committer_email': 'shashankkirtania123@gmail.com', 'commit_date': datetime.datetime(2016, 2, 10, 14, 41, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3aa147c2fa89326df6dccdaefe9537e974c70fd0', 'committer_username': '5hv5hvnk', 'committer_name': 'S', 'committer_email': 'shashankkirtania123@gmail.com', 'commit_date': datetime.datetime(2016, 2, 10, 14, 41, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c0c9a3b43240a3d4bb3ee176733940c4e3c44747', 'committer_username': '5hv5hvnk', 'committer_name': 'S', 'committer_email': 'shashankkirtania123@gmail.com', 'commit_date': datetime.datetime(2016, 2, 10, 14, 41, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b6fc7660235319d02077af063d145bd844a770a4', 'committer_username': '5hv5hvnk', 'committer_name': 'S', 'committer_email': 'shashankkirtania123@gmail.com', 'commit_date': datetime.datetime(2016, 2, 10, 14, 41, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44a48a0e182d8b30525e8c2285c7a72c13d3f71c', 'committer_username': '5hv5hvnk', 'committer_name': 'S', 'committer_email': 'shashankkirtania123@gmail.com', 'commit_date': datetime.datetime(2016, 2, 10, 14, 41, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20c46970006033949ac5dddb9bd3fbdd59e87cf3', 'committer_username': '5hv5hvnk', 'committer_name': 'S', 'committer_email': 'shashankkirtania123@gmail.com', 'commit_date': datetime.datetime(2016, 2, 10, 14, 41, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '455fe778725ae2bfdf7a549488126f7e8e3c8995', 'committer_username': '5hv5hvnk', 'committer_name': 'S', 'committer_email': 'shashankkirtania123@gmail.com', 'commit_date': datetime.datetime(2016, 2, 10, 14, 41, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4bade1211615df82d4496ec21fba11709c09da9c', 'committer_username': '5hv5hvnk', 'committer_name': 'S', 'committer_email': 'shashankkirtania123@gmail.com', 'commit_date': datetime.datetime(2016, 2, 10, 14, 41, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8144c57157c20d98437720a95da974a0229af9f4', 'committer_username': '5hv5hvnk', 'committer_name': 'S', 'committer_email': 'shashankkirtania123@gmail.com', 'commit_date': datetime.datetime(2016, 2, 10, 14, 41, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c407ae1902b3a2d1f32e23df354da3467c425417', 'committer_username': '5hv5hvnk', 'committer_name': 'S', 'committer_email': 'shashankkirtania123@gmail.com', 'commit_date': datetime.datetime(2016, 2, 10, 14, 41, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d4237bd0a5cc0ee757c1713f86bfede9d4a8201', 'committer_username': '5hv5hvnk', 'committer_name': 'S', 'committer_email': 'shashankkirtania123@gmail.com', 'commit_date': datetime.datetime(2016, 2, 10, 14, 41, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a6256d22cb0e8ae03bd44f635ea40db8edc5b8ff', 'committer_username': '5hv5hvnk', 'committer_name': 'S', 'committer_email': 'shashankkirtania123@gmail.com', 'commit_date': datetime.datetime(2016, 2, 10, 14, 41, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '924a86b8a2498018e8b3b835f7538eb0f22ac2ab', 'committer_username': '5hv5hvnk', 'committer_name': 'S', 'committer_email': 'shashankkirtania123@gmail.com', 'commit_date': datetime.datetime(2016, 2, 10, 14, 41, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3818a0ee8d031a1a4021f6fd078a63011612a76e', 'committer_username': '5hv5hvnk', 'committer_name': 'S', 'committer_email': 'shashankkirtania123@gmail.com', 'commit_date': datetime.datetime(2016, 2, 10, 14, 41, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd67ae6cfae6cdeac419571f706270615bf2c1abf', 'committer_username': '5hv5hvnk', 'committer_name': 'S', 'committer_email': 'shashankkirtania123@gmail.com', 'commit_date': datetime.datetime(2016, 2, 10, 14, 41, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e7629bbc1dcd43115606a156d5f0e235ea38b38', 'committer_username': '5hv5hvnk', 'committer_name': 'S', 'committer_email': 'shashankkirtania123@gmail.com', 'commit_date': datetime.datetime(2016, 2, 10, 14, 41, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1880ac376d5fac9f784f7154760ace385f78b215', 'committer_username': '5hv5hvnk', 'committer_name': 'S', 'committer_email': 'shashankkirtania123@gmail.com', 'commit_date': datetime.datetime(2016, 2, 10, 14, 41, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd37e7d64b837cccd3028e5dc4a982c2bd852e1c', 'committer_username': 'twiecki', 'committer_name': 'Thomas Wiecki', 'committer_email': None, 'commit_date': datetime.datetime(2011, 3, 17, 0, 44, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aaceed292f4dc1271c75059d7feff1af4f9c7210', 'committer_username': 'twiecki', 'committer_name': 'Thomas Wiecki', 'committer_email': None, 'commit_date': datetime.datetime(2011, 3, 17, 0, 44, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1606cccf3ecc66d536cc9389987bfbd8d50559a7', 'committer_username': 'twiecki', 'committer_name': 'Thomas Wiecki', 'committer_email': None, 'commit_date': datetime.datetime(2011, 3, 17, 0, 44, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a4669d4138fe9c364535d53b16acf6c4ae1d20c2', 'committer_username': 'twiecki', 'committer_name': 'Thomas Wiecki', 'committer_email': None, 'commit_date': datetime.datetime(2011, 3, 17, 0, 44, 58, tzinfo=datetime.timezone.utc)}]",S,17161999,shashankkirtania123@gmail.com,User,,55,,46,35

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
434677093,pymc-experimental,pymc-devs/pymc-experimental,Jupyter Notebook,47,73,16,25,252,78,25,28,"[{'id': 1198098942, 'number': 104, 'closed': datetime.datetime(2023, 2, 15, 21, 22, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 1, 15, 16, 41, 19, tzinfo=datetime.timezone.utc), 'time_taken': 2695292.0, 'time_delta': '31 days, 4:41:32', 'additions': 50, 'deletions': 102, 'state': 'closed'}, {'id': 1087208368, 'number': 90, 'closed': datetime.datetime(2022, 10, 22, 16, 23, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 14, 9, 45, 48, tzinfo=datetime.timezone.utc), 'time_taken': 715086.0, 'time_delta': '8 days, 6:38:06', 'additions': 74, 'deletions': 8, 'state': 'closed'}, {'id': 1021060276, 'number': 64, 'closed': datetime.datetime(2022, 9, 13, 10, 16, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 9, 5, 33, 12, tzinfo=datetime.timezone.utc), 'time_taken': 3041026.0, 'time_delta': '35 days, 4:43:46', 'additions': 433, 'deletions': 1, 'state': 'closed'}]"
321449673,pymc-examples,pymc-devs/pymc-examples,Python,226,266,23,85,396,137,9,15,"[{'id': 1054833614, 'number': 419, 'closed': datetime.datetime(2023, 2, 22, 12, 44, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 13, 15, 3, 37, tzinfo=datetime.timezone.utc), 'time_taken': 13988458.0, 'time_delta': '161 days, 21:40:58', 'additions': 1200, 'deletions': 0, 'state': 'closed'}]"
