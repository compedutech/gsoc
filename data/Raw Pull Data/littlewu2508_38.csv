pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1020409101,rocm.eclass: new eclass,,False,26784,https://api.github.com/repos/gentoo/gentoo/pulls/26784,https://github.com/gentoo/gentoo/pull/26784,closed,241,1,3,2,42,84,4,0,"[{'name': 'need assignment'}, {'name': 'do not merge'}, {'name': 'bug linked'}, {'name': 'no signoff'}]",2022-08-08 15:01:27+00:00,2022-09-12 09:26:54+00:00,3003927.0,"34 days, 18:25:27","[{'comment_id': 956713944, 'comment_body': ""Let's not use the same names as exported functions if you don't export them, as it's going to be confusing. I think `rocm-configure` and `rocm-test` (or with underscores, if you prefer) would be as good."", 'comment_created': datetime.datetime(2022, 8, 28, 11, 41, 20, tzinfo=datetime.timezone.utc), 'commenter': 'mgorny', 'type': 'User'}, {'comment_id': 956713993, 'comment_body': 'I think the comment belongs in `@CODE`, if you write it as a comment ;-).', 'comment_created': datetime.datetime(2022, 8, 28, 11, 41, 37, tzinfo=datetime.timezone.utc), 'commenter': 'mgorny', 'type': 'User'}, {'comment_id': 956714229, 'comment_body': ""As someone who never used rocm in my life, reading this example makes me wonder if that's just `SRC_URI` of an example package here, or if this is some common thing packages utilizing rocm need to fetch."", 'comment_created': datetime.datetime(2022, 8, 28, 11, 43, 26, tzinfo=datetime.timezone.utc), 'commenter': 'mgorny', 'type': 'User'}, {'comment_id': 956714327, 'comment_body': ""Isn't it BDEPEND? I'm guessing that's where hipcc comes from."", 'comment_created': datetime.datetime(2022, 8, 28, 11, 44, 15, tzinfo=datetime.timezone.utc), 'commenter': 'mgorny', 'type': 'User'}, {'comment_id': 956714371, 'comment_body': 'Nowadays I encourage placing S immediately below SRC_URI, as the two usually have to match.', 'comment_created': datetime.datetime(2022, 8, 28, 11, 44, 37, tzinfo=datetime.timezone.utc), 'commenter': 'mgorny', 'type': 'User'}, {'comment_id': 956714518, 'comment_body': 'The example above also depended on rocblas… or was that a mistake?', 'comment_created': datetime.datetime(2022, 8, 28, 11, 45, 24, tzinfo=datetime.timezone.utc), 'commenter': 'mgorny', 'type': 'User'}, {'comment_id': 956714651, 'comment_body': 'Why does this one use `default` and not rocm configure thing?', 'comment_created': datetime.datetime(2022, 8, 28, 11, 46, 8, tzinfo=datetime.timezone.utc), 'commenter': 'mgorny', 'type': 'User'}, {'comment_id': 956715003, 'comment_body': ""The example uses `ROCM_VERSION=5` which wouldn't match either of the branches above, and cause the eclass to die."", 'comment_created': datetime.datetime(2022, 8, 28, 11, 48, 21, tzinfo=datetime.timezone.utc), 'commenter': 'mgorny', 'type': 'User'}, {'comment_id': 956715361, 'comment_body': ""This function doesn't do anything about wildcards, so this comment is confusing at best. If you use `check_rw_permission /dev/dri/render*`, then it's only going to check the first file and ignore the remaining arguments."", 'comment_created': datetime.datetime(2022, 8, 28, 11, 50, 20, tzinfo=datetime.timezone.utc), 'commenter': 'mgorny', 'type': 'User'}, {'comment_id': 956715414, 'comment_body': ""Please don't mix `&&` and `||` like this, it's hard to read. Use explicit `if` instead."", 'comment_created': datetime.datetime(2022, 8, 28, 11, 50, 49, tzinfo=datetime.timezone.utc), 'commenter': 'mgorny', 'type': 'User'}, {'comment_id': 956715448, 'comment_body': 'Long `die` messages are very hard to read. Instead, use `eerror` for a long explanation, and a short `die` message following it.', 'comment_created': datetime.datetime(2022, 8, 28, 11, 51, 16, tzinfo=datetime.timezone.utc), 'commenter': 'mgorny', 'type': 'User'}, {'comment_id': 956715574, 'comment_body': ""It doesn't allow accessing the hardware, `addpredict` only prevents sandbox from killing the build."", 'comment_created': datetime.datetime(2022, 8, 28, 11, 52, 9, tzinfo=datetime.timezone.utc), 'commenter': 'mgorny', 'type': 'User'}, {'comment_id': 956715629, 'comment_body': 'You should probably make it clear that this works only for packages using cmake.', 'comment_created': datetime.datetime(2022, 8, 28, 11, 52, 33, tzinfo=datetime.timezone.utc), 'commenter': 'mgorny', 'type': 'User'}, {'comment_id': 956715773, 'comment_body': ""Any reason you're passing it explicitly, given it's `cmake.eclass` default?"", 'comment_created': datetime.datetime(2022, 8, 28, 11, 53, 18, tzinfo=datetime.timezone.utc), 'commenter': 'mgorny', 'type': 'User'}, {'comment_id': 956715957, 'comment_body': 'What about CC?', 'comment_created': datetime.datetime(2022, 8, 28, 11, 54, 32, tzinfo=datetime.timezone.utc), 'commenter': 'mgorny', 'type': 'User'}, {'comment_id': 956716003, 'comment_body': ""Quote them for consistency's sake."", 'comment_created': datetime.datetime(2022, 8, 28, 11, 55, tzinfo=datetime.timezone.utc), 'commenter': 'mgorny', 'type': 'User'}, {'comment_id': 956716172, 'comment_body': 'This part is oddly specific.', 'comment_created': datetime.datetime(2022, 8, 28, 11, 55, 57, tzinfo=datetime.timezone.utc), 'commenter': 'mgorny', 'type': 'User'}, {'comment_id': 956736795, 'comment_body': 'dev-util/hip not only provides hipcc, but also provides libamdhip that would be linked.', 'comment_created': datetime.datetime(2022, 8, 28, 14, 25, 49, tzinfo=datetime.timezone.utc), 'commenter': 'littlewu2508', 'type': 'User'}, {'comment_id': 956738692, 'comment_body': ""> Overall, I don't really understand the purpose of this eclass. Reading it, it feels like you're trying hard to combine two different eclasses into one.\r\n\r\nThe purpose of this eclass is to provide common funcitons in ROCm and ROCm related packages. So there are two types of ebuilds that can use rocm.eclass, and this is why there are two examples:\r\n\r\n1. ROCm math libraries in https://github.com/ROCmSoftwarePlatform/, developed by AMD. currently they all use cmake, have similar `SRC_URI`, share some cmake arguments, and are common in testing, so `rocm_src_configure` and `rocm_src_test` is designed for them. `USE_EXPAND` and `get_amdgpu_flags` is used to control the GPU architecture being compiled.\r\n2. Other libraries utilizing ROCm, like CuPy, PyTorch, Tensorflow, etc. They have their own build system, so `rocm_src_configure` and `rocm_src_test` is useless. But controlling which architecture to compile is useful, so they can still use rocm.eclass, to make dependency coherent on GPU architectures.\r\n\r\nSo, rocm.eclass should be used with cmake.eclass in occasion 1., and used with whatever-build-system in occasion 2. Exporting `src_test` and `src_configure` would overwrite other cmake phase funcitons, so I did not export them."", 'comment_created': datetime.datetime(2022, 8, 28, 14, 39, 4, tzinfo=datetime.timezone.utc), 'commenter': 'littlewu2508', 'type': 'User'}, {'comment_id': 956738800, 'comment_body': 'This is occasion 2: non ROCm component packages have their own configure system.', 'comment_created': datetime.datetime(2022, 8, 28, 14, 39, 53, tzinfo=datetime.timezone.utc), 'commenter': 'littlewu2508', 'type': 'User'}, {'comment_id': 956738927, 'comment_body': ""Sorry, I fogot to update the example when I update the code. I'll fix that."", 'comment_created': datetime.datetime(2022, 8, 28, 14, 40, 25, tzinfo=datetime.timezone.utc), 'commenter': 'littlewu2508', 'type': 'User'}, {'comment_id': 956739106, 'comment_body': ""Thanks for the suggestion, I'll polish here."", 'comment_created': datetime.datetime(2022, 8, 28, 14, 41, 26, tzinfo=datetime.timezone.utc), 'commenter': 'littlewu2508', 'type': 'User'}, {'comment_id': 956739114, 'comment_body': ""Thanks for the suggestion, I'll polish here."", 'comment_created': datetime.datetime(2022, 8, 28, 14, 41, 31, tzinfo=datetime.timezone.utc), 'commenter': 'littlewu2508', 'type': 'User'}, {'comment_id': 956739286, 'comment_body': 'In occasion 1, ROCm packages in https://github.com/ROCmSoftwarePlatform shares the similar format of `SRC_URI`. Just `SRC_URI` of the example package', 'comment_created': datetime.datetime(2022, 8, 28, 14, 42, 39, tzinfo=datetime.timezone.utc), 'commenter': 'littlewu2508', 'type': 'User'}, {'comment_id': 956739339, 'comment_body': ""Thanks for the suggestion, I'll polish here."", 'comment_created': datetime.datetime(2022, 8, 28, 14, 43, 5, tzinfo=datetime.timezone.utc), 'commenter': 'littlewu2508', 'type': 'User'}, {'comment_id': 956739619, 'comment_body': ""> The example above also depended on rocblas… or was that a mistake?\r\n\r\nI should pointed out the first example also depend on rocBLAS. I'll add that"", 'comment_created': datetime.datetime(2022, 8, 28, 14, 45, 23, tzinfo=datetime.timezone.utc), 'commenter': 'littlewu2508', 'type': 'User'}, {'comment_id': 956739769, 'comment_body': 'Yes. I fogot to update the comments after several revisions of the code again. Thanks for pointing out!', 'comment_created': datetime.datetime(2022, 8, 28, 14, 46, 25, tzinfo=datetime.timezone.utc), 'commenter': 'littlewu2508', 'type': 'User'}, {'comment_id': 956739850, 'comment_body': ""OK, I'll change the wording here."", 'comment_created': datetime.datetime(2022, 8, 28, 14, 46, 57, tzinfo=datetime.timezone.utc), 'commenter': 'littlewu2508', 'type': 'User'}, {'comment_id': 956740174, 'comment_body': ""ROCm packages set it in another location, so in the old days (ROCm overlay) ebuilds have this explicitly given. I think with cmake.eclass this is unecessary. I'll verify this."", 'comment_created': datetime.datetime(2022, 8, 28, 14, 49, 2, tzinfo=datetime.timezone.utc), 'commenter': 'littlewu2508', 'type': 'User'}, {'comment_id': 956740346, 'comment_body': 'Like cuda, hip is a C++ dialect. Setting CXX is enough.', 'comment_created': datetime.datetime(2022, 8, 28, 14, 50, 23, tzinfo=datetime.timezone.utc), 'commenter': 'littlewu2508', 'type': 'User'}, {'comment_id': 956741159, 'comment_body': ""Oh, there are two cases ROCm packages test themselves: standard cmake test, or custom test binaries. So `src_test` have to know which one the package uses, and choose the corresponding method.\r\n\r\nBoth situation needs to specify `LD_LIBRARY_PATH` (because `SKIP_RPATH` is set to `On`).\r\n\r\nSo `rocm_src_test` collect the two kinds of specific code from several ebuilds into one eclass, with extra codes to judge the occasion.\r\n\r\nI'm not satisfied with this part, too. Any suggestions?"", 'comment_created': datetime.datetime(2022, 8, 28, 14, 56, 36, tzinfo=datetime.timezone.utc), 'commenter': 'littlewu2508', 'type': 'User'}, {'comment_id': 956968477, 'comment_body': 'Remove it and test if `rocBLAS` and friends can be built.', 'comment_created': datetime.datetime(2022, 8, 29, 7, 12, 59, tzinfo=datetime.timezone.utc), 'commenter': 'heroxbd', 'type': 'User'}, {'comment_id': 960786802, 'comment_body': 'Is it intentional that you use `-` instead of `_`?  I expect `rocm_src_configure()` a conventional name.', 'comment_created': datetime.datetime(2022, 9, 1, 15, 19, 17, tzinfo=datetime.timezone.utc), 'commenter': 'heroxbd', 'type': 'User'}, {'comment_id': 960837892, 'comment_body': ""Michał suggest to use another name if not exporting it. This funciton is not exported as phase functions, which may cause conflicts with cmake.eclass -- inherit cmake may cause cmake phase functions overwrite rocm phase funcitions; not inheriting cmake results means ebuidls can't use cmake_src_prepare functions."", 'comment_created': datetime.datetime(2022, 9, 1, 16, 4, 28, tzinfo=datetime.timezone.utc), 'commenter': 'littlewu2508', 'type': 'User'}, {'comment_id': 961263517, 'comment_body': 'Remove ""Currently,""', 'comment_created': datetime.datetime(2022, 9, 2, 3, 45, 39, tzinfo=datetime.timezone.utc), 'commenter': 'heroxbd', 'type': 'User'}, {'comment_id': 961263669, 'comment_body': 'if unavailable.', 'comment_created': datetime.datetime(2022, 9, 2, 3, 46, 16, tzinfo=datetime.timezone.utc), 'commenter': 'heroxbd', 'type': 'User'}, {'comment_id': 961264197, 'comment_body': '`HCC_AMDGPU_TARGET`  Why is `HCC` still relevant? ', 'comment_created': datetime.datetime(2022, 9, 2, 3, 47, 49, tzinfo=datetime.timezone.utc), 'commenter': 'heroxbd', 'type': 'User'}, {'comment_id': 961264314, 'comment_body': 'drop this.', 'comment_created': datetime.datetime(2022, 9, 2, 3, 48, 13, tzinfo=datetime.timezone.utc), 'commenter': 'heroxbd', 'type': 'User'}, {'comment_id': 961265057, 'comment_body': 'What happens if there is no AMD GPU present on the host?  Does it die? Should it die?', 'comment_created': datetime.datetime(2022, 9, 2, 3, 50, 46, tzinfo=datetime.timezone.utc), 'commenter': 'heroxbd', 'type': 'User'}, {'comment_id': 961282805, 'comment_body': ""I think defaulting to PV could be confusing now. How about making it required instead? Specifying `ROCM_VERSION=${PV}` in ebuild shouldn't be a big deal."", 'comment_created': datetime.datetime(2022, 9, 2, 4, 45, 18, tzinfo=datetime.timezone.utc), 'commenter': 'mgorny', 'type': 'User'}, {'comment_id': 961283193, 'comment_body': '```suggestion\r\n\techo ""${AMDGPU_TARGET_FLAGS}""\r\n```\r\n\r\nBasically quote unless you really need word splitting to happen.', 'comment_created': datetime.datetime(2022, 9, 2, 4, 46, 25, tzinfo=datetime.timezone.utc), 'commenter': 'mgorny', 'type': 'User'}, {'comment_id': 961283258, 'comment_body': '```suggestion\r\n\t\tif use ""amdgpu_targets_${gpu_target}""; then\r\n```', 'comment_created': datetime.datetime(2022, 9, 2, 4, 46, 40, tzinfo=datetime.timezone.utc), 'commenter': 'mgorny', 'type': 'User'}, {'comment_id': 961283644, 'comment_body': ""I'm a bit confused… why is `addwrite` inline but `check_amdgpu` standarized? Is there ever a case for doing one and not the other?"", 'comment_created': datetime.datetime(2022, 9, 2, 4, 47, 46, tzinfo=datetime.timezone.utc), 'commenter': 'mgorny', 'type': 'User'}, {'comment_id': 961286766, 'comment_body': 'Its an example -- in the above comments, ""uses comma separated ${HCC_AMDGPU_TARGET}"" states that this example package read such an environment variable to configure targets.\r\n\r\nIt comes from a real-world example: CuPy.', 'comment_created': datetime.datetime(2022, 9, 2, 4, 56, 3, tzinfo=datetime.timezone.utc), 'commenter': 'littlewu2508', 'type': 'User'}, {'comment_id': 961288417, 'comment_body': ""It does not die, but `check_amdgpu` will die. I'll update the error message in `check_amdgpu`"", 'comment_created': datetime.datetime(2022, 9, 2, 5, 0, 29, tzinfo=datetime.timezone.utc), 'commenter': 'littlewu2508', 'type': 'User'}, {'comment_id': 961288576, 'comment_body': ""Thanks, I'll take that"", 'comment_created': datetime.datetime(2022, 9, 2, 5, 0, 51, tzinfo=datetime.timezone.utc), 'commenter': 'littlewu2508', 'type': 'User'}, {'comment_id': 961291255, 'comment_body': 'Hmm the complete history is:\r\n\r\nAt first `check_amdgpu` is `check_rw_permission`, checking permissions on one file. @heroxbd suggested me to narrowed down its usage, restricting to check specific devices (because the die message is all about render group, which is helpful for checking amdgpu devices, but not helpful in other occasions).\r\n\r\nSo I changed `check_rw_permission <device>`  to `check_amdgpu`\r\n\r\nI think it can go back: only change the name `check_rw_permission` to `check_amdgpu_device`, then in ebuild:\r\n```\r\n    for device in /dev/kfd /dev/dri/render*; do\r\n        addwrite ""${device}""\r\n        check_amdgpu_device ""${device}""\r\n    done\r\n```\r\n', 'comment_created': datetime.datetime(2022, 9, 2, 5, 7, 53, tzinfo=datetime.timezone.utc), 'commenter': 'littlewu2508', 'type': 'User'}, {'comment_id': 961301613, 'comment_body': 'Ignore my previous comment.\r\n\r\nIf no AMDGPU present, /dev/kfd does not exist, /dev/kfd will be kept; if /dev/dri/render* cannot be expanded, bash will keep this form.\r\n\r\n', 'comment_created': datetime.datetime(2022, 9, 2, 5, 32, 41, tzinfo=datetime.timezone.utc), 'commenter': 'littlewu2508', 'type': 'User'}, {'comment_id': 961302128, 'comment_body': 'Both of them enter `addwrite`. No issues even they are not present.', 'comment_created': datetime.datetime(2022, 9, 2, 5, 33, 52, tzinfo=datetime.timezone.utc), 'commenter': 'littlewu2508', 'type': 'User'}, {'comment_id': 961303446, 'comment_body': 'Yes, it can be built. Thanks!', 'comment_created': datetime.datetime(2022, 9, 2, 5, 36, 56, tzinfo=datetime.timezone.utc), 'commenter': 'littlewu2508', 'type': 'User'}, {'comment_id': 961320238, 'comment_body': 'Maybe I misunderstood your point previously. Now I put `addwrite` into `check_amdgpu`, so there is no loop on devices in the ebuild `src_test`, which seems much cleaner.', 'comment_created': datetime.datetime(2022, 9, 2, 6, 11, 58, tzinfo=datetime.timezone.utc), 'commenter': 'littlewu2508', 'type': 'User'}, {'comment_id': 961334059, 'comment_body': 'drop edo', 'comment_created': datetime.datetime(2022, 9, 2, 6, 34, 25, tzinfo=datetime.timezone.utc), 'commenter': 'heroxbd', 'type': 'User'}, {'comment_id': 961334841, 'comment_body': '> using cmake test\r\n\r\nusing the cmake test\r\n\r\n> using standalone test binary\r\n\r\nusing a standalone test binary', 'comment_created': datetime.datetime(2022, 9, 2, 6, 35, 40, tzinfo=datetime.timezone.utc), 'commenter': 'heroxbd', 'type': 'User'}, {'comment_id': 961367079, 'comment_body': 'Done. I think the ebuild might need edo.eclass for `edob` in `src_test`. Not a big deal I guess?', 'comment_created': datetime.datetime(2022, 9, 2, 7, 23, 59, tzinfo=datetime.timezone.utc), 'commenter': 'littlewu2508', 'type': 'User'}, {'comment_id': 961368321, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 2, 7, 25, 32, tzinfo=datetime.timezone.utc), 'commenter': 'littlewu2508', 'type': 'User'}, {'comment_id': 961541750, 'comment_body': ""```suggestion\r\n#\r\n# # Example for packages depend on ROCm libraries -- a package depend on\r\n# # rocBLAS, and uses comma separated ${HCC_AMDGPU_TARGET} to determine GPU\r\n# # architecture to compile. Requires ROCm version >=5.1\r\n```\r\n\r\nThis comment is also in bash style, so let's not disable `<code/>` at all here."", 'comment_created': datetime.datetime(2022, 9, 2, 10, 39, 13, tzinfo=datetime.timezone.utc), 'commenter': 'mgorny', 'type': 'User'}, {'comment_id': 961542456, 'comment_body': '```suggestion\r\n#     use rocm && check_amdgpu\r\n```\r\n\r\nFor very simple cases, developers usually prefer oneliners.', 'comment_created': datetime.datetime(2022, 9, 2, 10, 40, 12, tzinfo=datetime.timezone.utc), 'commenter': 'mgorny', 'type': 'User'}, {'comment_id': 961543062, 'comment_body': 'Not on ROCM_VERSION?', 'comment_created': datetime.datetime(2022, 9, 2, 10, 41, tzinfo=datetime.timezone.utc), 'commenter': 'mgorny', 'type': 'User'}, {'comment_id': 961543253, 'comment_body': 'Likewise.', 'comment_created': datetime.datetime(2022, 9, 2, 10, 41, 16, tzinfo=datetime.timezone.utc), 'commenter': 'mgorny', 'type': 'User'}, {'comment_id': 961543607, 'comment_body': '```suggestion\r\n# Example use for packages that depend on ROCm libraries:\r\n```', 'comment_created': datetime.datetime(2022, 9, 2, 10, 41, 43, tzinfo=datetime.timezone.utc), 'commenter': 'mgorny', 'type': 'User'}, {'comment_id': 961544124, 'comment_body': ""```suggestion\r\n\tcase ${ROCM_VERSION} in\r\n```\r\n\r\nYou've made the var required."", 'comment_created': datetime.datetime(2022, 9, 2, 10, 42, 21, tzinfo=datetime.timezone.utc), 'commenter': 'mgorny', 'type': 'User'}, {'comment_id': 961544712, 'comment_body': 'You\'re appending to a variable that\'s not been set before.\r\n\r\n```suggestion\r\n\tROCM_REQUIRED_USE=""|| (""\r\n```', 'comment_created': datetime.datetime(2022, 9, 2, 10, 43, 12, tzinfo=datetime.timezone.utc), 'commenter': 'mgorny', 'type': 'User'}, {'comment_id': 961546252, 'comment_body': 'Isn\'t `flags` here suitable for setting `ROCM_REQUIRED_USE`? Something like:\r\n\r\n```\r\nROCM_REQUIRED_USE=""|| ( ${flags[*]} )""\r\n```', 'comment_created': datetime.datetime(2022, 9, 2, 10, 45, 23, tzinfo=datetime.timezone.utc), 'commenter': 'mgorny', 'type': 'User'}, {'comment_id': 961546900, 'comment_body': 'Local variables should be lowercase.', 'comment_created': datetime.datetime(2022, 9, 2, 10, 46, 18, tzinfo=datetime.timezone.utc), 'commenter': 'mgorny', 'type': 'User'}, {'comment_id': 961547355, 'comment_body': ""Unless I'm missing something, you can iterate over `${AMDGPU_TARGETS}` here. The PM will automatically strip it to values that are in IUSE."", 'comment_created': datetime.datetime(2022, 9, 2, 10, 46, 57, tzinfo=datetime.timezone.utc), 'commenter': 'mgorny', 'type': 'User'}, {'comment_id': 961547684, 'comment_body': '```suggestion\r\n\t\tif [[ ! -r ${device} || ! -w ${device} ]]; then\r\n```', 'comment_created': datetime.datetime(2022, 9, 2, 10, 47, 23, tzinfo=datetime.timezone.utc), 'commenter': 'mgorny', 'type': 'User'}, {'comment_id': 961548674, 'comment_body': 'I might be wrong but I think a more portable approach would be to:\r\n\r\n```suggestion\r\n\t\t\tewarn ""By default render group have access to it. Check if ${USER} user is in render group.""\r\n```', 'comment_created': datetime.datetime(2022, 9, 2, 10, 48, 46, tzinfo=datetime.timezone.utc), 'commenter': 'mgorny', 'type': 'User'}, {'comment_id': 962107843, 'comment_body': 'Oh, it is in bash comment style. I now move these comments outside code blocks, to the document. Then we get two code blocks of each example, with description in front of it. Does it sound reasonable?', 'comment_created': datetime.datetime(2022, 9, 3, 5, 41, 12, tzinfo=datetime.timezone.utc), 'commenter': 'littlewu2508', 'type': 'User'}, {'comment_id': 962108846, 'comment_body': ""It should be ${ROCM_VERSION}. I've corrected three places in  d39aab4"", 'comment_created': datetime.datetime(2022, 9, 3, 5, 54, 15, tzinfo=datetime.timezone.utc), 'commenter': 'littlewu2508', 'type': 'User'}, {'comment_id': 962108930, 'comment_body': ""Thanks. I've polished here."", 'comment_created': datetime.datetime(2022, 9, 3, 5, 55, tzinfo=datetime.timezone.utc), 'commenter': 'littlewu2508', 'type': 'User'}, {'comment_id': 962109055, 'comment_body': ""Got it. I've updated here and the example ebuild as well."", 'comment_created': datetime.datetime(2022, 9, 3, 5, 56, 34, tzinfo=datetime.timezone.utc), 'commenter': 'littlewu2508', 'type': 'User'}, {'comment_id': 962109098, 'comment_body': ""You are right. It's much simpler to use `${AMDGPU_TARGETS}`. Thanks for the suggestion!"", 'comment_created': datetime.datetime(2022, 9, 3, 5, 57, 4, tzinfo=datetime.timezone.utc), 'commenter': 'littlewu2508', 'type': 'User'}, {'comment_id': 962109141, 'comment_body': 'Thanks, this is cleaner.', 'comment_created': datetime.datetime(2022, 9, 3, 5, 57, 22, tzinfo=datetime.timezone.utc), 'commenter': 'littlewu2508', 'type': 'User'}, {'comment_id': 962109338, 'comment_body': 'Oh, I was using `${PORTAGE_USERNAME}` before, then have been told not to use internal variables. This is exactly what I intend. Thanks a lot!', 'comment_created': datetime.datetime(2022, 9, 3, 5, 59, 43, tzinfo=datetime.timezone.utc), 'commenter': 'littlewu2508', 'type': 'User'}, {'comment_id': 962109373, 'comment_body': ""That's a much better approach. Thanks for the suggestion!"", 'comment_created': datetime.datetime(2022, 9, 3, 6, 0, 17, tzinfo=datetime.timezone.utc), 'commenter': 'littlewu2508', 'type': 'User'}, {'comment_id': 962122569, 'comment_body': ""These two do not seem to be used outside global-setter, and since they're `@INTERNAL` they're not supposed to be used outside the eclass, so I suppose it would make sense to stop setting them globally and instead make them local to that function…"", 'comment_created': datetime.datetime(2022, 9, 3, 8, 18, 22, tzinfo=datetime.timezone.utc), 'commenter': 'mgorny', 'type': 'User'}, {'comment_id': 962122851, 'comment_body': 'I suppose this could be simplified if instead of `ALL_AMDGPU_TARGETS` + `OFFICIAL_AMDGPU_TARGETS`, you started with official+unofficial lists, and then:\r\n\r\n```\r\nlocal iuse_flags=( ""${official_targets[@]/#/+amdgpu_targets_}"" ""${unofficial_targets[@]/#/amdgpu_targets_}"" )\r\nIUSE=""${iuse_flags[*]}""\r\n```\r\n\r\nand then either combined them into:\r\n\r\n```\r\nall_targets=( ""${official_targets[@]}"" ""${unofficial_targets[@]}"" )\r\n```\r\n\r\nor used both in `flags` later on.', 'comment_created': datetime.datetime(2022, 9, 3, 8, 21, 30, tzinfo=datetime.timezone.utc), 'commenter': 'mgorny', 'type': 'User'}, {'comment_id': 962131589, 'comment_body': ""Yes, after the simplification of `get_amdgpu_flag`, it's not necessary to keep then global."", 'comment_created': datetime.datetime(2022, 9, 3, 9, 52, 32, tzinfo=datetime.timezone.utc), 'commenter': 'littlewu2508', 'type': 'User'}, {'comment_id': 962131601, 'comment_body': 'I tried the approach and it works. Thanks for the suggestion! I really leant a lot about bash arrays.', 'comment_created': datetime.datetime(2022, 9, 3, 9, 52, 44, tzinfo=datetime.timezone.utc), 'commenter': 'littlewu2508', 'type': 'User'}, {'comment_id': 962140886, 'comment_body': '```suggestion\r\n\tlocal iuse_flags=(\r\n\t\t""${official_amdgpu_targets[@]/#/+amdgpu_targets_}""\r\n\t\t""${unofficial_amdgpu_targets[@]/#/amdgpu_targets_}""\r\n\t)\r\n```\r\n\r\nPlease remember to wrap long lines.', 'comment_created': datetime.datetime(2022, 9, 3, 11, 20, 46, tzinfo=datetime.timezone.utc), 'commenter': 'mgorny', 'type': 'User'}, {'comment_id': 962140928, 'comment_body': '```suggestion\r\n\tlocal all_amdgpu_targets=(\r\n\t\t""${official_amdgpu_targets[@]}""\r\n\t\t""${unofficial_amdgpu_targets[@]}""\r\n\t)\r\n```', 'comment_created': datetime.datetime(2022, 9, 3, 11, 21, 22, tzinfo=datetime.timezone.utc), 'commenter': 'mgorny', 'type': 'User'}, {'comment_id': 962140950, 'comment_body': '```suggestion\r\n\tlocal optflags=${allflags[@]/%/(-)?}\r\n```\r\n\r\n?', 'comment_created': datetime.datetime(2022, 9, 3, 11, 21, 49, tzinfo=datetime.timezone.utc), 'commenter': 'mgorny', 'type': 'User'}, {'comment_id': 962144931, 'comment_body': 'Look like I wrote stupid code again, and it escapes my quick test suite. Thanks!', 'comment_created': datetime.datetime(2022, 9, 3, 11, 56, 5, tzinfo=datetime.timezone.utc), 'commenter': 'littlewu2508', 'type': 'User'}, {'comment_id': 962146408, 'comment_body': ""Got it. I'll keep in mind in the future"", 'comment_created': datetime.datetime(2022, 9, 3, 12, 11, 24, tzinfo=datetime.timezone.utc), 'commenter': 'littlewu2508', 'type': 'User'}]","[{'commit_sha': 'd3c18f9941be06d281341dade3a76ee94757944f', 'committer_username': 'littlewu2508', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 22, 7, 24, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c903a85fc51c59452687ef46ea079e3904b67d9f', 'committer_username': 'littlewu2508', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 22, 7, 24, 39, tzinfo=datetime.timezone.utc)}]",,42602151,,User,,36,,4,11
1053136504,"ROCm 5.1.3 scilibs, using rocm.eclass",,False,27219,https://api.github.com/repos/gentoo/gentoo/pulls/27219,https://github.com/gentoo/gentoo/pull/27219,closed,2288,1,42,14,3,11,2,0,"[{'name': 'assigned'}, {'name': 'no bug found'}]",2022-09-12 10:55:04+00:00,2022-09-22 01:08:56+00:00,828832.0,"9 days, 14:13:52","[{'comment_id': 970303916, 'comment_body': 'This is strange to say the version should larger than some `MAX`.', 'comment_created': datetime.datetime(2022, 9, 14, 4, 45, 30, tzinfo=datetime.timezone.utc), 'commenter': 'heroxbd', 'type': 'User'}, {'comment_id': 970305424, 'comment_body': 'Compared to 5.0.2, why do you lock the hip version?\r\n\r\n```patch\r\n DEPEND=""                  \r\n-       dev-util/hip:=               \r\n+       dev-util/hip:${SLOT}                                                                              \r\n        dev-libs/msgpack                                                                                                                                                                                            \r\n        test? (                                    \r\n                virtual/blas                      \r\n```', 'comment_created': datetime.datetime(2022, 9, 14, 4, 48, 50, tzinfo=datetime.timezone.utc), 'commenter': 'heroxbd', 'type': 'User'}, {'comment_id': 970306036, 'comment_body': 'Same as rocBLAS.', 'comment_created': datetime.datetime(2022, 9, 14, 4, 50, 4, tzinfo=datetime.timezone.utc), 'commenter': 'heroxbd', 'type': 'User'}, {'comment_id': 970307477, 'comment_body': '```patch\r\n@@ -13,13 +15,14 @@                                                                                      \r\n KEYWORDS=""~amd64""       \r\n SLOT=""0/$(ver_cut 1-2)""\r\n IUSE=""benchmark test""\r\n+REQUIRED_USE=""${ROCM_REQUIRED_USE}""\r\n                                                    \r\n RESTRICT=""!test? ( test )""                                                                              \r\n                                                    \r\n-RDEPEND=""dev-util/hip:=                                                                                 \r\n-       sci-libs/rocPRIM:${SLOT}""                                                                        \r\n-DEPEND=""${RDEPEND}\r\n+RDEPEND=""dev-util/hip\r\n+       sci-libs/rocPRIM:${SLOT}[${ROCM_USEDEP}]\r\n        test? ( dev-cpp/gtest )""     \r\n+DEPEND=""${RDEPEND}""\r\n BDEPEND="">=dev-util/cmake-3.22""\r\n             \r\n S=""${WORKDIR}/rocThrust-rocm-${PV}""\r\n```\r\n\r\nPut in your commit message why there is no need to rebuild rocThrust if hip is upgraded.', 'comment_created': datetime.datetime(2022, 9, 14, 4, 53, 25, tzinfo=datetime.timezone.utc), 'commenter': 'heroxbd', 'type': 'User'}, {'comment_id': 970308447, 'comment_body': 'Explain in your commit message that there is no need to lock hip version.\r\n\r\n```\r\n-RDEPEND=""dev-util/hip:${SLOT}""                                                                           \r\n+RDEPEND=""dev-util/hip         \r\n+dev-util/rocm-smi:${SLOT}""\r\n DEPEND=""${RDEPEND}""    \r\n BDEPEND="">=dev-util/cmake-3.22                                                                           \r\n ```', 'comment_created': datetime.datetime(2022, 9, 14, 4, 55, 38, tzinfo=datetime.timezone.utc), 'commenter': 'heroxbd', 'type': 'User'}, {'comment_id': 976528193, 'comment_body': ""No, it's not a version larger than `LLVM_MAX_SLOT`. `LLVM_MAX_SLOT` acts here as a slot, which means Tensile depend on this slot of clang. The `>=` is to specify the min clang patch version."", 'comment_created': datetime.datetime(2022, 9, 21, 13, 44, 16, tzinfo=datetime.timezone.utc), 'commenter': 'littlewu2508', 'type': 'User'}, {'comment_id': 976530401, 'comment_body': 'I made a mistake here. Now rocBLAS is free of hip version.', 'comment_created': datetime.datetime(2022, 9, 21, 13, 45, 59, tzinfo=datetime.timezone.utc), 'commenter': 'littlewu2508', 'type': 'User'}, {'comment_id': 976555737, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 21, 14, 5, 29, tzinfo=datetime.timezone.utc), 'commenter': 'littlewu2508', 'type': 'User'}, {'comment_id': 976555818, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 21, 14, 5, 33, tzinfo=datetime.timezone.utc), 'commenter': 'littlewu2508', 'type': 'User'}, {'comment_id': 976556202, 'comment_body': 'Also added similar information in rocBLAS/rocFFT commit', 'comment_created': datetime.datetime(2022, 9, 21, 14, 5, 53, tzinfo=datetime.timezone.utc), 'commenter': 'littlewu2508', 'type': 'User'}, {'comment_id': 976598634, 'comment_body': 'OK, looks good.', 'comment_created': datetime.datetime(2022, 9, 21, 14, 39, 32, tzinfo=datetime.timezone.utc), 'commenter': 'heroxbd', 'type': 'User'}]","[{'commit_sha': 'aee78f4e3e0e1251bc5cabd8373bf50d60630fa6', 'committer_username': 'littlewu2508', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 22, 7, 24, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1fe22d466fa921cd8b8acbda11a4d462594a7d8', 'committer_username': 'littlewu2508', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 22, 7, 24, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd235d794fb7f6dafdf6927c523afb2fe600247d', 'committer_username': 'littlewu2508', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 22, 7, 24, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a8e13442a10fdb66e5b934f90f808b10ae555735', 'committer_username': 'littlewu2508', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 22, 7, 24, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '230285f740c0441d82fc4e0b486dc57dd63f150a', 'committer_username': 'littlewu2508', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 22, 7, 24, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '351f1758b9e6cd66a63360333172ebd5e8ea49b2', 'committer_username': 'littlewu2508', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 22, 7, 24, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a0f71f4dbde614639e4fab3ad7a294af50a4f54', 'committer_username': 'littlewu2508', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 22, 7, 24, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22f2494fe04f448f1f8bc349db0cefe41e89d2d1', 'committer_username': 'littlewu2508', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 22, 7, 24, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47b383d861da6b65568b01807213c637e97edcf0', 'committer_username': 'littlewu2508', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 22, 7, 24, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72c7ada8e482d674c20fdcdd3afae8e07b9e2f4a', 'committer_username': 'littlewu2508', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 22, 7, 24, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '399ac67a5d0e7b4951b32e8c5f89248a68ac1f33', 'committer_username': 'littlewu2508', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 22, 7, 24, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97020d3b801d28ee1efcb98b3c5d5ef3f39775ce', 'committer_username': 'littlewu2508', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 22, 7, 24, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4c9e6c9453635a93b5b361c63b5fe000b4b8680', 'committer_username': 'littlewu2508', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 22, 7, 24, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3c0acf3900d1c275638d2a385c2782c94f027be', 'committer_username': 'littlewu2508', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 22, 7, 24, 39, tzinfo=datetime.timezone.utc)}]",,42602151,,User,,36,,4,11
1026469101,dev-libs/rocm-opencl-runtime: add 5.1.3,"enable src_test, but it requires an actual X server (not Xvfb)

Signed-off-by: Yiyang Wu <xgreenlandforwyy@gmail.com>",False,26870,https://api.github.com/repos/gentoo/gentoo/pulls/26870,https://github.com/gentoo/gentoo/pull/26870,closed,149,0,3,1,8,17,2,0,"[{'name': 'assigned'}, {'name': 'no bug found'}]",2022-08-15 13:32:48+00:00,2022-09-28 08:16:34+00:00,3782626.0,"43 days, 18:43:46","[{'comment_id': 981165827, 'comment_body': 'This we can probably remove', 'comment_created': datetime.datetime(2022, 9, 27, 12, 18, 51, tzinfo=datetime.timezone.utc), 'commenter': 'AndrewAmmerlaan', 'type': 'User'}, {'comment_id': 981166056, 'comment_body': '`|| die`', 'comment_created': datetime.datetime(2022, 9, 27, 12, 19, 5, tzinfo=datetime.timezone.utc), 'commenter': 'AndrewAmmerlaan', 'type': 'User'}, {'comment_id': 981166562, 'comment_body': '`|| die`', 'comment_created': datetime.datetime(2022, 9, 27, 12, 19, 36, tzinfo=datetime.timezone.utc), 'commenter': 'AndrewAmmerlaan', 'type': 'User'}, {'comment_id': 981168175, 'comment_body': 'This is a `pushd` without a `popd`, so we might as well just use `cd` here.', 'comment_created': datetime.datetime(2022, 9, 27, 12, 21, 18, tzinfo=datetime.timezone.utc), 'commenter': 'AndrewAmmerlaan', 'type': 'User'}, {'comment_id': 981169081, 'comment_body': 'Does it have to be a X server, wayland does not work?', 'comment_created': datetime.datetime(2022, 9, 27, 12, 22, 18, tzinfo=datetime.timezone.utc), 'commenter': 'AndrewAmmerlaan', 'type': 'User'}, {'comment_id': 981174125, 'comment_body': ""Why can't we use the rocclr installed by `dev-libs/rocclr`?"", 'comment_created': datetime.datetime(2022, 9, 27, 12, 27, 19, tzinfo=datetime.timezone.utc), 'commenter': 'AndrewAmmerlaan', 'type': 'User'}, {'comment_id': 981987836, 'comment_body': 'Good question. In ROCm-4.3.0 we are packaging rocclr, but staring from ROCm-5.0, rocm-opencl-runtime and hip are bundling rocclr, which is recommended by ROCclr itself: https://github.com/ROCm-Developer-Tools/ROCclr/blob/cf7a485fbf0b1326a5517f43a67e5bd6936f8699/CMakeLists.txt#L26. So `dev-libs/rocclr` is unmaintained from ROCm-5.\r\nBut from what I can see, maintaining  `dev-libs/rocclr` is an option. What do you think?', 'comment_created': datetime.datetime(2022, 9, 28, 6, 19, 22, tzinfo=datetime.timezone.utc), 'commenter': 'littlewu2508', 'type': 'User'}, {'comment_id': 981990618, 'comment_body': 'Yes. This oclgl test uses OpenGL to get gl context, not EGL, so Xvbf or wayland does not work (https://developer.nvidia.com/blog/egl-eye-opengl-visualization-without-x-server/).\r\n\r\nI tested Xwayland and it works, because it is a true X server (but it may require passing `XAUTHOPRITY` manually to ebuild)', 'comment_created': datetime.datetime(2022, 9, 28, 6, 23, 27, tzinfo=datetime.timezone.utc), 'commenter': 'littlewu2508', 'type': 'User'}, {'comment_id': 981990769, 'comment_body': 'Sure. It is now removed', 'comment_created': datetime.datetime(2022, 9, 28, 6, 23, 41, tzinfo=datetime.timezone.utc), 'commenter': 'littlewu2508', 'type': 'User'}, {'comment_id': 981990927, 'comment_body': 'Thanks for pointing out. Done', 'comment_created': datetime.datetime(2022, 9, 28, 6, 23, 56, tzinfo=datetime.timezone.utc), 'commenter': 'littlewu2508', 'type': 'User'}, {'comment_id': 981991044, 'comment_body': 'Changed to `cd`', 'comment_created': datetime.datetime(2022, 9, 28, 6, 24, 8, tzinfo=datetime.timezone.utc), 'commenter': 'littlewu2508', 'type': 'User'}, {'comment_id': 982054859, 'comment_body': 'Hmm, it looks like there are a bunch of other roc/hip packages that also bundle rocclr. I think unbundling it here only makes sense if we (can) also unbundle it in those other packages. \r\n\r\nIn general I think it is better to unbundle things, but if upstream explicitly does not support it then maybe unbundling will open up a whole new can of worms and that might not be worth the effort.\r\n\r\nLets keep it like this for now, and then maybe we can revisit the rocclr bundling later.', 'comment_created': datetime.datetime(2022, 9, 28, 7, 40, 51, tzinfo=datetime.timezone.utc), 'commenter': 'AndrewAmmerlaan', 'type': 'User'}, {'comment_id': 982073061, 'comment_body': 'pkgcheck complains about this variable. Can we avoid using it and maybe use the same warning string as in `rocm.eclass`\r\n\r\nEbuildReservedName: version 5.1.3: line 84: variable name ""PORTAGE_USERNAME"" is disallowed because ""portage""is a reserved substring', 'comment_created': datetime.datetime(2022, 9, 28, 7, 58, 42, tzinfo=datetime.timezone.utc), 'commenter': 'AndrewAmmerlaan', 'type': 'User'}, {'comment_id': 982076489, 'comment_body': ""Seems that I force pushed the wrong version. Just ignore this and I'll fix up"", 'comment_created': datetime.datetime(2022, 9, 28, 8, 2, 3, tzinfo=datetime.timezone.utc), 'commenter': 'littlewu2508', 'type': 'User'}, {'comment_id': 982079861, 'comment_body': ""I don't recall what the conclusion for rocm.eclass were but you can use `${USER}` here, I think."", 'comment_created': datetime.datetime(2022, 9, 28, 8, 5, 25, tzinfo=datetime.timezone.utc), 'commenter': 'mgorny', 'type': 'User'}, {'comment_id': 982083464, 'comment_body': '> I don\'t recall what the conclusion for rocm.eclass were but you can use `${USER}` here, I think.\r\n\r\nrocm.eclass uses ""portage user"":\r\n\r\n```\r\n\t\tif [[ ! -r ${device} || ! -w ${device} ]]; then\r\n\t\t\teerror ""Cannot read or write ${device}!""\r\n\t\t\teerror ""Make sure it is present and check the permission.""\r\n\t\t\tewarn ""By default render group have access to it. Check if portage user is in render group.""\r\n\t\t\tdie ""${device} inaccessible""\r\n\t\tfi\r\n```', 'comment_created': datetime.datetime(2022, 9, 28, 8, 9, 2, tzinfo=datetime.timezone.utc), 'commenter': 'AndrewAmmerlaan', 'type': 'User'}, {'comment_id': 982086263, 'comment_body': '@mgorny I tried `${USER}` in `rocm.eclass` but it is an empty value, so I just switch it back to `portage user`', 'comment_created': datetime.datetime(2022, 9, 28, 8, 11, 41, tzinfo=datetime.timezone.utc), 'commenter': 'littlewu2508', 'type': 'User'}]","[{'commit_sha': 'b4e366435137d6130ae325d608c7d9a5ea198af1', 'committer_username': 'littlewu2508', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 22, 7, 24, 39, tzinfo=datetime.timezone.utc)}]",,42602151,,User,,36,,4,11



