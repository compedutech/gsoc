pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
689729933,[GSoC] OpenCV.js: Accelerate OpenCV.js DNN via WebNN,"### Overview

Proposal: OpenCV.js: Accelerate OpenCV.js DNN via WebNN
Mentor: Ningxin Hu @huningxin
Student: Hanxi Guo @MarkGHX

<cut/>

### This pull request changes

- Modify the CMAKE files to fit WebNN.
- Create the WebNN backend prototype for OpenCV.js dnn module in C++.
- Create the WebNN ReLULayer and pass the test case.
- Create the WebNN implementation of selected compute-intensive operations.
  - BatchNormLayer
  - ConvolutionLayer (group = 1)
  - FullyConnectedLayer
  - ReLULayer
  - ReLU6Layer
  - PoolingLayer
  - ReshapeLayer
  - SoftmaxLayer
  - PermuteLayer
  - ConstantLayer
  - ConcatLayer
- Compile the OpenCV.js dnn WebNN backend implementation into WebAssembly.
- Create the image classification sample of OpenCV.js dnn module using WebNN Backend, collect and analyze the performance numbers of different implementations including WebAssembly, WebNN (both WebNN-polyfill and electron) and native.

### Test
#### My test environments
```
OS: Ubuntu Linux 18.04.5 LTS
Emscripten: 2.0.15
Browser: Chrome, Version 90.0.4430.72 (Official Build) (64-bit)
Hardware: Intel® Core™ i9-7920X CPU @ 2.90GHz and GeForce GTX 1060 3GB
```
#### Preparations
1. Download this PR to `/GSoC2021` (for example).
2. Download [emsdk](https://github.com/emscripten-core/emsdk) to `/GSoC2021` and install version `2.0.15`.
3. Replace `/GSoC2021/emsdk/upstream/emscripten` with [emscripten-webnn](https://github.com/huningxin/emscripten) (branch `webnn_2.0.15`).
#### To run OpenCV native DNN module with WebNN backend
1. Refer to [WebNN's build instructions](https://github.com/webmachinelearning/webnn-native) to complete the build of WebNN-native with OpenVINO.
2. Download [opencv_extra](https://github.com/opencv/opencv_extra).
3. Set the environment variables:
```shell
$ source /opt/intel/<openvino_dir>/bin/setupvars.sh
$ export WEBNN_NATIVE_DIR=<webnn_native_out_dir>
$ export LD_LIBRARY_PATH=<opencv_dir>/lib:<webnn_native_out_dir>:${LD_LIBRARY_PATH}
$ export OPENCV_TEST_DATA_PATH=<opencv_extra_dir>/testdata/
```
4. Build OpenCV native with WebNN backend:
```shell
$ mkdir build
$ cd build
$ cmake -DCMAKE_BUILD_TYPE=Release -DWITH_WEBNN=ON -DBUILD_EXAMPLES=ON -DBUILD_TEST=ON -DCMAKE_INSTALL_PREFIX=/usr/local ..
$ make
```
5. Copy model files and figures to `./opencv/build/bin`
6. Run the OpenCV native DNN module with WebNN backend:
```shell
$ ./bin/example_dnn_classification --model=./bin/googlenet-v1.caffemodel --config=./bin/googlenet-v1.prototxt --width=224 --height=224 --classes=./bin/classification_classes_ILSVRC2012.txt --input=./bin/space_shuttle.jpg --mean=""104 117 123"" --rgb=false --backend=6
```
7.Expected result:
![image](https://user-images.githubusercontent.com/35370837/131092355-4b453b2f-9483-4d89-ba61-e041c4881355.png)
#### To run OpenCV.js DNN module with WebNN backend using WebNN-polyfill
1. Build WebNN-polyfill and OpenCV.js:
```shell
$ cd GSoC2021
$ git clone https://github.com/MarkGHX/webnn-polyfill
$ cd webnn-polyfill/
$ npm install
$ npm run build
$ cd ..
$ cd opencv
$ mkdir build_js
$ emcmake python ./platforms/js/build_js.py build_js --build_wasm --build_loader --build_doc --build_test --webnn
$ cd ..
$ cd webnn-polyfill/
$ cp dist/webnn-polyfill.js ~/GSoC2021/opencv/build_js/doc/doxygen/html/
$ cd ..
```
2. Set up http-server:
```shell
$ cd opencv/build_js/doc/doxygen/html/
$ http-server
```
3. Open Chrome and go to `http://127.0.0.1:8080/js_image_classification_webnn_polyfill.html`. Then you can test OpenCV.js GoogleNet with WebNN backend in image classification task.
4. Expected results:
![polyfill](https://user-images.githubusercontent.com/35370837/133200951-6e0b35d1-8e08-4b65-918c-93fa1a5434b9.png)

#### To run OpenCV.js DNN module with WebNN backend using Electron
1. Refer to [WebNN's build instructions](https://github.com/webmachinelearning/webnn-native) to complete the build of WebNN-native with OpenVINO.
2. Download [opencv_extra](https://github.com/opencv/opencv_extra).
3. Set the environment variables:
```shell
$ source /opt/intel/<openvino_dir>/bin/setupvars.sh
$ export WEBNN_NATIVE_DIR=<webnn_native_out_dir>
$ export LD_LIBRARY_PATH=./lib:<webnn_native_out_dir>:${LD_LIBRARY_PATH}
$ export OPENCV_TEST_DATA_PATH=<opencv_extra_dir>/testdata/
```
4. Build electron in OpenCV.js DNN module folder:
```shell
$ cd opencv/build_js/doc/doxygen/html/
$ npm install
$ npm run start
```
5. Expected result:
![electron](https://user-images.githubusercontent.com/35370837/133201022-ecd0309c-79f8-4b60-801c-315ec5696fcf.png)

### Performance results
#### Inference time in one round
| Model   |     OpenCV.js wasm      |  OpenCV.js wasm+simd+threads | OpenCV native default | OpenCV OpenVINO | OpenCV WebNN | OpenCV.js WebNN-polyfill | OpenCV.js WebNN-Electron |
|:----------:|:-------------:|:------:|:----------:|:---------:|:---------:|:--------:|:------------:|
| GoogleNet | 825.07ms | 51.55ms | 29.32ms | 10.35ms | 24.8ms | 69.15ms | 24.90ms |
| SqueezeNet | 462.12ms | 31.69ms | 17.4ms | 4.29ms | 4.56ms | 21.27ms | 4.07ms |
| AlexNet | 503.84ms | ms | 9.73ms | 5.66ms | 8.87ms | ms | ms |

#### Average inference time of 200 rounds
| Model   |     OpenCV.js wasm      |  OpenCV.js wasm+simd+threads | OpenCV native default | OpenCV OpenVINO | OpenCV WebNN | OpenCV.js WebNN-polyfill | OpenCV.js WebNN-Electron |
|:----------:|:-------------:|:------:|:----------:|:---------:|:---------:|:--------:|:------------:|
| GoogleNet | 862.14 ms | 51.33 ms | 10.48ms | 3.68ms | 7.44ms | 64.28ms | 24.85ms |
| SqueezeNet |  461.71 ms | 15.24 ms | 3.99ms | 1.83ms | 1.96ms | 24.74ms | 1.97ms |
| AlexNet | ms | ms | 7.56ms | 5.09ms | 7.23ms | ms | ms |

### Performance analysis
#### OpenCV native DNN module
From the performance results above, we could find that in OpenCV native DNN module (GoogleNet for example), using WebNN backend is 5ms (18.2%) faster than using default implementation. However, there is still a gap between using WebNN backend and using OpenVINO backend. I think that this is because the LRN and Dropout layers in GoogleNet is not implemented by WebNN yet, which in turn divides the graph into four sub-graphs. Then the four sub-graphs are linked with default LRN and Dropout implementations. Using such sub-graphs instead of using a whole graph to do the optimization reduces the performance of OpenCV native DNN module with WebNN backend. To the contrast, SqueezeNet's ops are all use WebNN backend except Softmax. Thus, SqueezeNet using WebNN backend is not divided into different parts and its performance is very close to the SqueezeNet using OpenVINO backend.
#### OpenCV.js DNN module
From the performance results above, we could find that Both OpenCV.js DNN module (GoogleNet as an example) using WebNN-polyfill and using WebNN-Electron are better than OpenCV.js DNN module using only wasm. They outperform the default OpenCV.js DNN module using only wasm 10.93x and 32.13x respectively. Compared with OpenCV.js DNN module with wasm+simd+threads, OpenCV.js DNN module with WebNN-polyfill is similar to it while OpenCV.js DNN module with WebNN-Electron is at least 2x faster than it. 


```
force_builders=docs,Custom
buildworker:Docs=linux-4,linux-6
build_image:Docs=docs-js:18.04
build_image:Custom=javascript
buildworker:Custom=linux-4,linux-6
```",True,20406,https://api.github.com/repos/opencv/opencv/pulls/20406,https://github.com/opencv/opencv/pull/20406,closed,2261,24,32,48,27,79,5,1,"[{'name': 'optimization'}, {'name': 'feature'}, {'name': 'GSoC'}, {'name': 'category: dnn'}, {'name': 'category: javascript (js)'}]",2021-07-14 09:11:51+00:00,2021-11-23 21:15:31+00:00,11448220.0,"132 days, 12:03:40","[{'comment_id': 679564743, 'comment_body': 'Please remove the commented code.', 'comment_created': datetime.datetime(2021, 7, 30, 0, 18, 53, tzinfo=datetime.timezone.utc), 'commenter': 'huningxin', 'type': 'User'}, {'comment_id': 679564785, 'comment_body': 'ditto.', 'comment_created': datetime.datetime(2021, 7, 30, 0, 19, 1, tzinfo=datetime.timezone.utc), 'commenter': 'huningxin', 'type': 'User'}, {'comment_id': 679564872, 'comment_body': 'ditto.', 'comment_created': datetime.datetime(2021, 7, 30, 0, 19, 15, tzinfo=datetime.timezone.utc), 'commenter': 'huningxin', 'type': 'User'}, {'comment_id': 679564958, 'comment_body': 'ditto.', 'comment_created': datetime.datetime(2021, 7, 30, 0, 19, 36, tzinfo=datetime.timezone.utc), 'commenter': 'huningxin', 'type': 'User'}, {'comment_id': 679565229, 'comment_body': 'Probably you can log the other type of pooling are not supported by WebNN backend.', 'comment_created': datetime.datetime(2021, 7, 30, 0, 20, 28, tzinfo=datetime.timezone.utc), 'commenter': 'huningxin', 'type': 'User'}, {'comment_id': 679565396, 'comment_body': 'please remove the commented code.', 'comment_created': datetime.datetime(2021, 7, 30, 0, 20, 54, tzinfo=datetime.timezone.utc), 'commenter': 'huningxin', 'type': 'User'}, {'comment_id': 679565559, 'comment_body': 'The indent of above lines seem not correct. Please check the code format checker in the bot.', 'comment_created': datetime.datetime(2021, 7, 30, 0, 21, 27, tzinfo=datetime.timezone.utc), 'commenter': 'huningxin', 'type': 'User'}, {'comment_id': 679565787, 'comment_body': 'It would be good to log which type of pooling is not supported.', 'comment_created': datetime.datetime(2021, 7, 30, 0, 22, 8, tzinfo=datetime.timezone.utc), 'commenter': 'huningxin', 'type': 'User'}, {'comment_id': 679565896, 'comment_body': 'remove the commented code. ', 'comment_created': datetime.datetime(2021, 7, 30, 0, 22, 26, tzinfo=datetime.timezone.utc), 'commenter': 'huningxin', 'type': 'User'}, {'comment_id': 679565921, 'comment_body': 'ditto', 'comment_created': datetime.datetime(2021, 7, 30, 0, 22, 33, tzinfo=datetime.timezone.utc), 'commenter': 'huningxin', 'type': 'User'}, {'comment_id': 679565950, 'comment_body': 'ditto.', 'comment_created': datetime.datetime(2021, 7, 30, 0, 22, 40, tzinfo=datetime.timezone.utc), 'commenter': 'huningxin', 'type': 'User'}, {'comment_id': 679565993, 'comment_body': 'ditto.', 'comment_created': datetime.datetime(2021, 7, 30, 0, 22, 47, tzinfo=datetime.timezone.utc), 'commenter': 'huningxin', 'type': 'User'}, {'comment_id': 679566075, 'comment_body': 'turn this into a logger or remove it.', 'comment_created': datetime.datetime(2021, 7, 30, 0, 23, 5, tzinfo=datetime.timezone.utc), 'commenter': 'huningxin', 'type': 'User'}, {'comment_id': 679566128, 'comment_body': 'remove the commented code.', 'comment_created': datetime.datetime(2021, 7, 30, 0, 23, 19, tzinfo=datetime.timezone.utc), 'commenter': 'huningxin', 'type': 'User'}, {'comment_id': 679566172, 'comment_body': 'ditto', 'comment_created': datetime.datetime(2021, 7, 30, 0, 23, 32, tzinfo=datetime.timezone.utc), 'commenter': 'huningxin', 'type': 'User'}, {'comment_id': 679566204, 'comment_body': 'ditto', 'comment_created': datetime.datetime(2021, 7, 30, 0, 23, 38, tzinfo=datetime.timezone.utc), 'commenter': 'huningxin', 'type': 'User'}, {'comment_id': 679661858, 'comment_body': 'Hi Ningxin, I noticed that this line of code won\'t run actually since if ```type != MAX && type != AVE```, the ```supportBackend()``` function will return false. The reason why I add this code here is to avoid the error that ""the function may return void"" during the compiling process. To report which type of pooling is not supported, a CV_LOG_WARNING can be added to the ```supportBackend()``` function.', 'comment_created': datetime.datetime(2021, 7, 30, 5, 40, tzinfo=datetime.timezone.utc), 'commenter': 'MarkGHX', 'type': 'User'}, {'comment_id': 683092489, 'comment_body': 'I would suggest to move `BuildConstant` to `op_webnn.h` and `op_webnn.cpp`, so other layers could share the implementation.', 'comment_created': datetime.datetime(2021, 8, 5, 2, 59, 48, tzinfo=datetime.timezone.utc), 'commenter': 'huningxin', 'type': 'User'}, {'comment_id': 683093643, 'comment_body': 'Should you add namespace for webnn related methods, say `webnn::getShape`? BTW, webnn defines `dimensions` as `vector<int32_t>`. So it would be better to change this method signature to\r\n```c++\r\nstd::vector<int32_t> getDimensions(const Mat& mat);\r\n```', 'comment_created': datetime.datetime(2021, 8, 5, 3, 3, 21, tzinfo=datetime.timezone.utc), 'commenter': 'huningxin', 'type': 'User'}, {'comment_id': 683165931, 'comment_body': 'Thanks! I have pushed a new commit to improve this.', 'comment_created': datetime.datetime(2021, 8, 5, 6, 30, 54, tzinfo=datetime.timezone.utc), 'commenter': 'MarkGHX', 'type': 'User'}, {'comment_id': 683165970, 'comment_body': 'Thanks! I have pushed a new commit to improve this.', 'comment_created': datetime.datetime(2021, 8, 5, 6, 30, 59, tzinfo=datetime.timezone.utc), 'commenter': 'MarkGHX', 'type': 'User'}, {'comment_id': 693577408, 'comment_body': ""What's the reason to add this `tryQuantize` for batch norm layer and others? "", 'comment_created': datetime.datetime(2021, 8, 22, 23, 57, 59, tzinfo=datetime.timezone.utc), 'commenter': 'huningxin', 'type': 'User'}, {'comment_id': 693577434, 'comment_body': 'ditto', 'comment_created': datetime.datetime(2021, 8, 22, 23, 58, 8, tzinfo=datetime.timezone.utc), 'commenter': 'huningxin', 'type': 'User'}, {'comment_id': 693577449, 'comment_body': 'ditto', 'comment_created': datetime.datetime(2021, 8, 22, 23, 58, 15, tzinfo=datetime.timezone.utc), 'commenter': 'huningxin', 'type': 'User'}, {'comment_id': 693577457, 'comment_body': 'ditto', 'comment_created': datetime.datetime(2021, 8, 22, 23, 58, 21, tzinfo=datetime.timezone.utc), 'commenter': 'huningxin', 'type': 'User'}, {'comment_id': 693682357, 'comment_body': 'Hi Ningxin, this `tryQuantize` function seems to be a newly added function in the main branch.', 'comment_created': datetime.datetime(2021, 8, 23, 6, 2, 48, tzinfo=datetime.timezone.utc), 'commenter': 'MarkGHX', 'type': 'User'}, {'comment_id': 693683605, 'comment_body': ""When I upload my new codes, github reminds me that there are some conflicts since the main branch added this `tryQuantize` function but my PR didn't. Thus, in order to resolve the possible conflicts, I added this function to my PR."", 'comment_created': datetime.datetime(2021, 8, 23, 6, 6, 16, tzinfo=datetime.timezone.utc), 'commenter': 'MarkGHX', 'type': 'User'}, {'comment_id': 693697727, 'comment_body': 'this comes from upstream merged PR #20228 (some experimental whole network int8 quantization...)', 'comment_created': datetime.datetime(2021, 8, 23, 6, 36, 44, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 693807119, 'comment_body': 'Why do we need this change?', 'comment_created': datetime.datetime(2021, 8, 23, 9, 23, 28, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 693809999, 'comment_body': 'Avoid code duplication in conditions.\r\nUse `return false;` after warning and `return true;` below.', 'comment_created': datetime.datetime(2021, 8, 23, 9, 27, 9, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 693811741, 'comment_body': 'Do we really need that for whole OpenCV library?\r\nLimit this for DNN module only.', 'comment_created': datetime.datetime(2021, 8, 23, 9, 29, 29, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 693814216, 'comment_body': '> `-s USE_WEBNN=1`\r\n\r\nThis should be a configurable build option.\r\n', 'comment_created': datetime.datetime(2021, 8, 23, 9, 32, 53, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 693815203, 'comment_body': 'broken indentation', 'comment_created': datetime.datetime(2021, 8, 23, 9, 34, 16, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 693815886, 'comment_body': 'Perhaps this is not accurate and should be removed (from all new files).', 'comment_created': datetime.datetime(2021, 8, 23, 9, 35, 12, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 695240038, 'comment_body': '> `${VALID_WEBNN}`\r\n\r\n`${}` is not needed here.', 'comment_created': datetime.datetime(2021, 8, 24, 21, 47, 24, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 695240427, 'comment_body': 'no need to clear these vars', 'comment_created': datetime.datetime(2021, 8, 24, 21, 48, 9, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 695241023, 'comment_body': '> `if(NOT EMSCRIPTEN)`\r\n\r\nUsed in both blocks.\r\nIf this is expected, then blocks should be merged.', 'comment_created': datetime.datetime(2021, 8, 24, 21, 49, 19, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 695241999, 'comment_body': '> `$ENV{WEBNN_NATIVE_DIR}`\r\n\r\nIt is better to use CMake variable instead (you can still initialize this from environment, see usage of `ocv_check_environment_variables`).', 'comment_created': datetime.datetime(2021, 8, 24, 21, 51, 5, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 695242616, 'comment_body': '> native\r\n\r\nWhat is about Emscripten case?', 'comment_created': datetime.datetime(2021, 8, 24, 21, 52, 14, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 695243383, 'comment_body': '> main.js\r\n\r\nDoes this file for Electron usage only?', 'comment_created': datetime.datetime(2021, 8, 24, 21, 53, 48, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 695244019, 'comment_body': 'It makes sense to move Electron-specific stuff into sub-directory to avoid confusion.', 'comment_created': datetime.datetime(2021, 8, 24, 21, 55, 4, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 695244580, 'comment_body': ""Don't use tabs.\r\nIndentation in CMake scripts is 2 spaces."", 'comment_created': datetime.datetime(2021, 8, 24, 21, 56, 10, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 696351862, 'comment_body': 'It seems that this is a test version. I have fixed this. Thanks!', 'comment_created': datetime.datetime(2021, 8, 26, 7, 9, 11, tzinfo=datetime.timezone.utc), 'commenter': 'MarkGHX', 'type': 'User'}, {'comment_id': 696582119, 'comment_body': 'Hi Ningxin, I have re-based my codes on current upstream master repo. This should be fixed now.', 'comment_created': datetime.datetime(2021, 8, 26, 12, 30, 55, tzinfo=datetime.timezone.utc), 'commenter': 'MarkGHX', 'type': 'User'}, {'comment_id': 696582655, 'comment_body': 'This has been fixed now. Some building errors are also fixed. Thanks!', 'comment_created': datetime.datetime(2021, 8, 26, 12, 31, 40, tzinfo=datetime.timezone.utc), 'commenter': 'MarkGHX', 'type': 'User'}, {'comment_id': 696584524, 'comment_body': 'This has been fixed with the new commit.', 'comment_created': datetime.datetime(2021, 8, 26, 12, 34, 19, tzinfo=datetime.timezone.utc), 'commenter': 'MarkGHX', 'type': 'User'}, {'comment_id': 696617896, 'comment_body': 'Thanks for your comment. I have removed this.', 'comment_created': datetime.datetime(2021, 8, 26, 13, 15, 33, tzinfo=datetime.timezone.utc), 'commenter': 'MarkGHX', 'type': 'User'}, {'comment_id': 696618096, 'comment_body': 'Thanks! I have added this option to build_js.py.', 'comment_created': datetime.datetime(2021, 8, 26, 13, 15, 50, tzinfo=datetime.timezone.utc), 'commenter': 'MarkGHX', 'type': 'User'}, {'comment_id': 696619782, 'comment_body': 'Thanks. This is fixed in the new commit.', 'comment_created': datetime.datetime(2021, 8, 26, 13, 17, 41, tzinfo=datetime.timezone.utc), 'commenter': 'MarkGHX', 'type': 'User'}, {'comment_id': 696621536, 'comment_body': 'Thanks! I have removed this from op_webnn.cpp & op_webnn.hpp.', 'comment_created': datetime.datetime(2021, 8, 26, 13, 19, 30, tzinfo=datetime.timezone.utc), 'commenter': 'MarkGHX', 'type': 'User'}, {'comment_id': 696622264, 'comment_body': 'Fixed now.', 'comment_created': datetime.datetime(2021, 8, 26, 13, 20, 19, tzinfo=datetime.timezone.utc), 'commenter': 'MarkGHX', 'type': 'User'}, {'comment_id': 696622567, 'comment_body': 'Fixed now.', 'comment_created': datetime.datetime(2021, 8, 26, 13, 20, 39, tzinfo=datetime.timezone.utc), 'commenter': 'MarkGHX', 'type': 'User'}, {'comment_id': 696624047, 'comment_body': 'Merged now.', 'comment_created': datetime.datetime(2021, 8, 26, 13, 22, 17, tzinfo=datetime.timezone.utc), 'commenter': 'MarkGHX', 'type': 'User'}, {'comment_id': 696635868, 'comment_body': 'Thanks for your comment. I have fixed it.', 'comment_created': datetime.datetime(2021, 8, 26, 13, 35, 7, tzinfo=datetime.timezone.utc), 'commenter': 'MarkGHX', 'type': 'User'}, {'comment_id': 696638891, 'comment_body': 'Thanks for your suggestion. More logs have been added.', 'comment_created': datetime.datetime(2021, 8, 26, 13, 38, 12, tzinfo=datetime.timezone.utc), 'commenter': 'MarkGHX', 'type': 'User'}, {'comment_id': 696639504, 'comment_body': 'Fixed now.', 'comment_created': datetime.datetime(2021, 8, 26, 13, 38, 52, tzinfo=datetime.timezone.utc), 'commenter': 'MarkGHX', 'type': 'User'}, {'comment_id': 696643734, 'comment_body': 'Yes, I have moved such files into a sub-directory called `webnn-electron`.', 'comment_created': datetime.datetime(2021, 8, 26, 13, 43, 21, tzinfo=datetime.timezone.utc), 'commenter': 'MarkGHX', 'type': 'User'}, {'comment_id': 696644347, 'comment_body': 'Thanks! It is moved to `webnn-electron` folder.', 'comment_created': datetime.datetime(2021, 8, 26, 13, 43, 57, tzinfo=datetime.timezone.utc), 'commenter': 'MarkGHX', 'type': 'User'}, {'comment_id': 697783051, 'comment_body': ""> build_js\r\n\r\nPlease don't commit build files"", 'comment_created': datetime.datetime(2021, 8, 28, 1, 14, 35, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 697783179, 'comment_body': '2 space indentation', 'comment_created': datetime.datetime(2021, 8, 28, 1, 15, 10, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 717326954, 'comment_body': '?', 'comment_created': datetime.datetime(2021, 9, 28, 8, 4, 38, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 726772995, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2021, 10, 12, 5, 31, 14, tzinfo=datetime.timezone.utc), 'commenter': 'MarkGHX', 'type': 'User'}, {'comment_id': 726773057, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2021, 10, 12, 5, 31, 23, tzinfo=datetime.timezone.utc), 'commenter': 'MarkGHX', 'type': 'User'}, {'comment_id': 726775977, 'comment_body': 'Sorry for that, it is removed now. :grin:', 'comment_created': datetime.datetime(2021, 10, 12, 5, 39, 25, tzinfo=datetime.timezone.utc), 'commenter': 'MarkGHX', 'type': 'User'}, {'comment_id': 739990409, 'comment_body': ""Hi @alalek, since I removed the ```#cmakedefine HAVE_WEBNN``` from the cvconfig.h.in file, the ```HAVE_WEBNN``` macro does not work well. Besides, I didn't find a proper .in file that only for dnn module to place this macro. Could you please give some suggestions? Thanks!"", 'comment_created': datetime.datetime(2021, 11, 1, 6, 51, 54, tzinfo=datetime.timezone.utc), 'commenter': 'MarkGHX', 'type': 'User'}, {'comment_id': 741163305, 'comment_body': 'There are no module-specific .in files for now.\r\nPlease add definition through CMake: https://github.com/opencv/opencv/blob/4.5.4/modules/dnn/CMakeLists.txt#L21-L23', 'comment_created': datetime.datetime(2021, 11, 2, 15, 3, 22, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 741670217, 'comment_body': 'Thanks a lot! This has been fixed now.', 'comment_created': datetime.datetime(2021, 11, 3, 7, 33, 42, tzinfo=datetime.timezone.utc), 'commenter': 'MarkGHX', 'type': 'User'}, {'comment_id': 751543089, 'comment_body': 'It is better to use external `TickMeter` instead of `.getPerfProfile()`', 'comment_created': datetime.datetime(2021, 11, 17, 18, 50, 18, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 751543911, 'comment_body': '> `double t;`\r\n\r\nPrefer to declare variables near its usage. It significantly increases code readability.', 'comment_created': datetime.datetime(2021, 11, 17, 18, 51, 25, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 751544065, 'comment_body': 'Probably not needed', 'comment_created': datetime.datetime(2021, 11, 17, 18, 51, 40, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 751545209, 'comment_body': '> https://docs.opencv.org/master\r\n\r\nDirect URL links on docs.opencv.org are not allowed.\r\nUse doxygen references instead.', 'comment_created': datetime.datetime(2021, 11, 17, 18, 53, 11, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 753030420, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2021, 11, 19, 9, 46, 53, tzinfo=datetime.timezone.utc), 'commenter': 'MarkGHX', 'type': 'User'}, {'comment_id': 753030597, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2021, 11, 19, 9, 47, 2, tzinfo=datetime.timezone.utc), 'commenter': 'MarkGHX', 'type': 'User'}, {'comment_id': 753030731, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2021, 11, 19, 9, 47, 9, tzinfo=datetime.timezone.utc), 'commenter': 'MarkGHX', 'type': 'User'}, {'comment_id': 753031833, 'comment_body': ""Hi @alalek, I changed this link but I'm not sure the new link is as your expectation, so please have a look. Thanks!"", 'comment_created': datetime.datetime(2021, 11, 19, 9, 48, 8, tzinfo=datetime.timezone.utc), 'commenter': 'MarkGHX', 'type': 'User'}, {'comment_id': 753106556, 'comment_body': 'Please use `@ref tutorial_linux_install`', 'comment_created': datetime.datetime(2021, 11, 19, 11, 18, 39, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 753107143, 'comment_body': '`sum = (float)cv::sum(softmaxProb)[0];`\r\n\r\nto resolve MSVC warning', 'comment_created': datetime.datetime(2021, 11, 19, 11, 19, 39, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 753138343, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2021, 11, 19, 12, 9, 24, tzinfo=datetime.timezone.utc), 'commenter': 'MarkGHX', 'type': 'User'}, {'comment_id': 753138576, 'comment_body': 'Thanks! I have modified this in the new commit.', 'comment_created': datetime.datetime(2021, 11, 19, 12, 9, 43, tzinfo=datetime.timezone.utc), 'commenter': 'MarkGHX', 'type': 'User'}]","[{'commit_sha': '5093fe2c2fc73b35d2f18f8791e740bcff61c27b', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'fbd98954826fa64a3ff77bef1c5a5fe8c46ce3c5', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b509b3101c4cabdc2c3c860e72c9d100a2191b08', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'f501b0c16fb0264ade47261c44d2f233b3dce01c', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'fb0edb268a6e49785d8ac0acf395ffa0382f6a7f', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'd045047d315b43a04bb031a321dd1c17a3e9f05f', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'f7d88af8d0bdf39d0409e9b2d0924069906721de', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '875cfef9653e799fb962a396203b9b8de1384aff', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '7b2d6cdcd24d63095b3730ea6024184b6cc99a54', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '521739d0cc249bd0e079ae8c442aecdd43f990a1', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '6d7b77089f548914c6e7908378ac87bd2b8ce943', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '66bfb50c1299291ec3f210265aa9cd512b61017e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'd13bef5ae777f39a229ba5a19ff85eb0b7c9510c', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'fd494a50c370a5755433aaf215a4bb1ed111aee1', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '349052f097e16d5c08363ce65b63b1e8c7844a3a', 'committer_username': 'MarkGHX', 'committer_name': 'Hanxi Guo', 'committer_email': 'guo778@purdue.edu', 'commit_date': datetime.datetime(2018, 1, 12, 12, 21, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c8266362931f4900a77a9fba85dfd060e961c8a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'aeefed1e1c4637826cc112fce1028dcb77f5d917', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '88c30be533c83c9ab0696449d6d7fa234b00b558', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'f8d4bb42c26cf3215c01ff7f51e5ed12830884be', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ebad50b7cbde8d26b10878339ea314af4efed754', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'c4c9292d1d993ffdd137bc62ebc91c62863dda9a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '20f323eef134b2ed9d050a7b338d0d36b03310fd', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'e6d792da1c3c948e2a25fbce7b6b74ac3bf1f93b', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'bcb0de9c1d2deb254e6470891a66a3ff1101c89b', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '1f4ae309b7884a10feb508e13874b385fe0fe01e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '63e01de757b2ef2c9195bedab2e5a96f35807f21', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '3c72a3c1ca61b05b815301febd780f6b8c15e621', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '473fb06808d0c18f8384391ad6e2b161bbf69493', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '580da22d1e129a7b37d4212d235904a76dd6264f', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'f485a9931f50845e3df0f867b7cb2989be5c5c70', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '994336bb5e881a839c661125c7d2b30d5b1f4ec0', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '9e7b911e442fb5dafec429f40823b99233431056', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '5c25d17f1ed0ae4ff5e07ae589b6f896172bcb67', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '9e845eab7fb54a3cb814411fb8390c8c305c71ce', 'committer_username': 'MarkGHX', 'committer_name': 'Hanxi Guo', 'committer_email': 'guo778@purdue.edu', 'commit_date': datetime.datetime(2018, 1, 12, 12, 21, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e48b1b3d4a11c849379c5f4599df5f1dec1726fa', 'committer_username': 'MarkGHX', 'committer_name': 'Hanxi Guo', 'committer_email': 'guo778@purdue.edu', 'commit_date': datetime.datetime(2018, 1, 12, 12, 21, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f3a426401bf39f7ee6d5e10d723076471db9e0e', 'committer_username': 'MarkGHX', 'committer_name': 'Hanxi Guo', 'committer_email': 'guo778@purdue.edu', 'commit_date': datetime.datetime(2018, 1, 12, 12, 21, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4214fc76f17c1fa58df9a90f6c8146852af4f82b', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '5c15ea78d6322f71d000032cedb17853e85f012a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'd5ea2c276be5cdbb425821f1e34d4103f9cc4b4a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '75000a7f7f94ccdab9ddff3fa36c793d7baf8b3b', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'cb0ee1f8e1bdc92c4a8a0bd88590b45a972164eb', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '9e758e2f920133ac3e644346dd52dc16135f602a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'bcf0f338af24f0981d11e3185af27562f2d993f9', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a83856f17b2e055f6bd7fd88cba161974664499d', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'dcbae9fca53e2e3ac134a5f252020246dd2144a6', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '05d328888f07a72f1ffb4ad40b35395050ef9c0f', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '2006809d0dd4a2db201598cc7cde045663a49855', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '9ed67c98b3b47b8044136e968903e03b6a14e9b2', 'committer_username': 'MarkGHX', 'committer_name': 'Hanxi Guo', 'committer_email': 'guo778@purdue.edu', 'commit_date': datetime.datetime(2018, 1, 12, 12, 21, 7, tzinfo=datetime.timezone.utc)}]",Hanxi Guo,35370837,guo778@purdue.edu,User,,10,,13,11

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
5108051,opencv,opencv/opencv,C++,55710,77628,2656,2195,34493,2601,6,134,"[{'id': 689729933, 'number': 20406, 'closed': datetime.datetime(2021, 11, 23, 21, 15, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 14, 9, 11, 51, tzinfo=datetime.timezone.utc), 'time_taken': 11448220.0, 'time_delta': '132 days, 12:03:40', 'additions': 2261, 'deletions': 24, 'state': 'closed'}]"
