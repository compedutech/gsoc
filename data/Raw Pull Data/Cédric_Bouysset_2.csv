pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
426133057,RDKitReader and RDKitParser,"Part of the fixes for #2468 

Changes made in this Pull Request:
 - added the RDKitParser which creates a `core.topology.Topology` object from an `rdkit.Chem.rdchem.Mol` object.
- added the RDKitReader (based on the MemoryReader) to read coordinates from RDKit conformers
- added the `Aromaticities` topology attributes, and the `aromatic` selection token (for now, only usable when the Universe was created from an RDKit molecule)
- added the `from_smiles` classmethod to the Universe (can add hydrogens and generate multiple conformers)

This ~~is~~ was a minimal version complemented iteratively by adding new attributes, tests and the doc. Code heavily inspired from the ParmEdParser.


PR Checklist
------------
 - [x] Tests?
 - [x] Docs?
 - [x] CHANGELOG updated?
 - [x] Issue raised/referenced?
",True,2707,https://api.github.com/repos/MDAnalysis/mdanalysis/pulls/2707,https://github.com/MDAnalysis/mdanalysis/pull/2707,closed,990,4,18,43,32,72,3,3,"[{'name': 'Component-Topology'}, {'name': 'Component-Converters'}, {'name': 'new-feature'}]",2020-06-01 18:05:31+00:00,2020-06-19 15:11:41+00:00,1544770.0,"17 days, 21:06:10","[{'comment_id': 434450839, 'comment_body': 'Sorting here just checks that the correct count of different order bonds are parsed, rather than the order being correctly assigned to different bonds.', 'comment_created': datetime.datetime(2020, 6, 3, 9, 57, 39, tzinfo=datetime.timezone.utc), 'commenter': 'richardjgowers', 'type': 'User'}, {'comment_id': 434451617, 'comment_body': 'I think a `MolFromSmiles` test would be good too, smiles parsing is something very important that this will give us.', 'comment_created': datetime.datetime(2020, 6, 3, 9, 58, 56, tzinfo=datetime.timezone.utc), 'commenter': 'richardjgowers', 'type': 'User'}, {'comment_id': 434738094, 'comment_body': 'Yes I thought rdkit was changing the order in which bonds are iterated during sanitization, but it was actually another problem. Should be fixed now', 'comment_created': datetime.datetime(2020, 6, 3, 17, 32, 24, tzinfo=datetime.timezone.utc), 'commenter': 'cbouy', 'type': 'User'}, {'comment_id': 434738242, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2020, 6, 3, 17, 32, 40, tzinfo=datetime.timezone.utc), 'commenter': 'cbouy', 'type': 'User'}, {'comment_id': 434750823, 'comment_body': ""Probably missing something here with my end-of-the-day-brain, but you'll probably want to tell appveyor and travis to install rdkit (see the similar parmed entries in `.travis.yml` and `.appveyor.yml`\r\n\r\nP.S. turns out we don't have a GSOC label..."", 'comment_created': datetime.datetime(2020, 6, 3, 17, 54, 27, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 434754880, 'comment_body': 'Completely forgot about that, my bad', 'comment_created': datetime.datetime(2020, 6, 3, 18, 1, 16, tzinfo=datetime.timezone.utc), 'commenter': 'cbouy', 'type': 'User'}, {'comment_id': 435762263, 'comment_body': ""We'd probably want to warn users here, if they happen to have both types of charges available, that we are defaulting to Gasteiger over the user-read ones."", 'comment_created': datetime.datetime(2020, 6, 5, 8, 16, 47, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 435926590, 'comment_body': ""An additional thought here, does RDKIT guarantee the charge units? I couldn't see anything specific in the docs."", 'comment_created': datetime.datetime(2020, 6, 5, 13, 38, 15, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 435959547, 'comment_body': ""For Gasteiger, they are in `e`, but for Tripos there's no way of knowing where they come from so no guarantee"", 'comment_created': datetime.datetime(2020, 6, 5, 14, 28, 5, tzinfo=datetime.timezone.utc), 'commenter': 'cbouy', 'type': 'User'}, {'comment_id': 435963154, 'comment_body': 'Looks like our own mol2 parser assumes `e` so that should be fine.', 'comment_created': datetime.datetime(2020, 6, 5, 14, 34, 3, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 436083398, 'comment_body': 'Might be easier to read if we can move this closer to where we feed `Charges`?', 'comment_created': datetime.datetime(2020, 6, 5, 18, 9, 43, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 436083810, 'comment_body': ""We'll need a test to pick this warning up."", 'comment_created': datetime.datetime(2020, 6, 5, 18, 10, 14, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 436088273, 'comment_body': ""We'll want tests here to check that we are picking up the gasteiger and tripos charges as expected."", 'comment_created': datetime.datetime(2020, 6, 5, 18, 15, 57, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 436088742, 'comment_body': 'Probably will want to add tests for these two to `TestRDKitParserMOL2`', 'comment_created': datetime.datetime(2020, 6, 5, 18, 16, 50, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 436112590, 'comment_body': ""I put it outside of the loop because I didn't want to check if both charges are present for every atom. Should I put it after the loop on atoms then ?"", 'comment_created': datetime.datetime(2020, 6, 5, 19, 7, 22, tzinfo=datetime.timezone.utc), 'commenter': 'cbouy', 'type': 'User'}, {'comment_id': 436121459, 'comment_body': ""No I think it's fine, my bad here, I somehow hadn't taken the looping into account."", 'comment_created': datetime.datetime(2020, 6, 5, 19, 28, 18, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 436259025, 'comment_body': 'can use the conda-forge rdkit packaging right?', 'comment_created': datetime.datetime(2020, 6, 6, 10, 54, 51, tzinfo=datetime.timezone.utc), 'commenter': 'richardjgowers', 'type': 'User'}, {'comment_id': 436259075, 'comment_body': 'new modules will need a .rst stub', 'comment_created': datetime.datetime(2020, 6, 6, 10, 55, 34, tzinfo=datetime.timezone.utc), 'commenter': 'richardjgowers', 'type': 'User'}, {'comment_id': 436259135, 'comment_body': 'This is very cool.  Add an example into the docstring.  Also what happens if I pass RDKit a bad SMILES string?', 'comment_created': datetime.datetime(2020, 6, 6, 10, 56, 36, tzinfo=datetime.timezone.utc), 'commenter': 'richardjgowers', 'type': 'User'}, {'comment_id': 436259156, 'comment_body': 'How hard would it be to also generate coordinates?', 'comment_created': datetime.datetime(2020, 6, 6, 10, 56, 59, tzinfo=datetime.timezone.utc), 'commenter': 'richardjgowers', 'type': 'User'}, {'comment_id': 436266903, 'comment_body': "" The minimal dependency tests are failing here, you'll probably want an importorskip."", 'comment_created': datetime.datetime(2020, 6, 6, 12, 54, 15, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 436276739, 'comment_body': ""I completely forgot it's now available through conda-forge!"", 'comment_created': datetime.datetime(2020, 6, 6, 15, 20, 23, tzinfo=datetime.timezone.utc), 'commenter': 'cbouy', 'type': 'User'}, {'comment_id': 436276813, 'comment_body': 'pretty easy', 'comment_created': datetime.datetime(2020, 6, 6, 15, 21, 12, tzinfo=datetime.timezone.utc), 'commenter': 'cbouy', 'type': 'User'}, {'comment_id': 436277561, 'comment_body': ""RDKit is gonna complain in a not so graceful manner about mol being `None` if we reach `Chem.AddHs(mol)`\r\nI'll add a check on that.\r\n\r\nAlso, should I use rdkit's camelcase names for the `from_smiles` parameters ? i.e. `AddHs` or `add_hydrogens` ?"", 'comment_created': datetime.datetime(2020, 6, 6, 15, 31, 52, tzinfo=datetime.timezone.utc), 'commenter': 'cbouy', 'type': 'User'}, {'comment_id': 436350934, 'comment_body': ""Might be best to follow RDKit's lead in argument names"", 'comment_created': datetime.datetime(2020, 6, 7, 11, 2, 19, tzinfo=datetime.timezone.utc), 'commenter': 'richardjgowers', 'type': 'User'}, {'comment_id': 436350966, 'comment_body': '`generate_coordinates=True` would be a fun kwarg then', 'comment_created': datetime.datetime(2020, 6, 7, 11, 2, 42, tzinfo=datetime.timezone.utc), 'commenter': 'richardjgowers', 'type': 'User'}, {'comment_id': 436766146, 'comment_body': ""I'm not too familiar with sphinx yet, are these 2 files the only thing I need to create/modify ?\r\npackage/doc/sphinx/source/documentation_pages/topology/RDKitParser.rst\r\npackage/doc/sphinx/source/documentation_pages/topology_modules.rst"", 'comment_created': datetime.datetime(2020, 6, 8, 14, 47, 56, tzinfo=datetime.timezone.utc), 'commenter': 'cbouy', 'type': 'User'}, {'comment_id': 439397691, 'comment_body': 'Pendantic but you might want a versionadded here.\r\n\r\n', 'comment_created': datetime.datetime(2020, 6, 12, 12, 48, 17, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 439400681, 'comment_body': ""I'm wondering if this is not better going in a separate PR, thought here @richardjgowers ?"", 'comment_created': datetime.datetime(2020, 6, 12, 12, 54, 30, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 439405290, 'comment_body': ""You'll probably want some docstring here & on __init__ that documents inputs, etc.. right now if you call `??RDKITReader`, I think you'll get the docstring for _Readermeta."", 'comment_created': datetime.datetime(2020, 6, 12, 13, 3, 56, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 439406943, 'comment_body': ""I realise it's self-evident, but you might want to expand on the docstring here a little bit, at the very least to say which attribute you are selecting on. That way it's more obvious to users that are reading the documentation."", 'comment_created': datetime.datetime(2020, 6, 12, 13, 7, 18, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 439409054, 'comment_body': 'I _think_ here you can just do `np.zeros(na, dtype=bool)`.', 'comment_created': datetime.datetime(2020, 6, 12, 13, 11, 8, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 439412700, 'comment_body': 'EmbedMultipleConfs has a few useful options that users might want to set manually, is there any way we could capture these from **kargs?', 'comment_created': datetime.datetime(2020, 6, 12, 13, 18, 20, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 439416898, 'comment_body': 'you\'ll want to add more test cases here, specifically looking for multiple frames & making sure you get the right coordinates on ""trajectory"" iteration (probably worth looking at base.MultiframeReaderTest)', 'comment_created': datetime.datetime(2020, 6, 12, 13, 26, 26, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 439417403, 'comment_body': 'Would it also be worth testing that we get the same coordinates as our own internal MOL2 reader?', 'comment_created': datetime.datetime(2020, 6, 12, 13, 27, 23, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 439418786, 'comment_body': 'rather than two asserts here, would it be better to just use parametrize? that way we can add more combinations if necessary?', 'comment_created': datetime.datetime(2020, 6, 12, 13, 29, 46, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 439422845, 'comment_body': ""pedantic, but since it's core stuff, it might be worth adding a few more cases with `and`, `around`, etc.."", 'comment_created': datetime.datetime(2020, 6, 12, 13, 37, 25, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 439425814, 'comment_body': ""I _think_ we can drop this (and __future__ imports in other files) now that we're past 1.0."", 'comment_created': datetime.datetime(2020, 6, 12, 13, 42, 55, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 439426165, 'comment_body': 'PEP8 two blank lines needed', 'comment_created': datetime.datetime(2020, 6, 12, 13, 43, 34, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 439484889, 'comment_body': 'Probably, but it\'s fine here.  This PR got a bit big as it was in a ""holding pattern"" while 1.0 was done', 'comment_created': datetime.datetime(2020, 6, 12, 15, 21, 53, tzinfo=datetime.timezone.utc), 'commenter': 'richardjgowers', 'type': 'User'}, {'comment_id': 439486126, 'comment_body': ""This needs tests though.  Just simple `select_atoms('type C and aromatic')` and `select_atoms('type C and not aromatic')` would be enough"", 'comment_created': datetime.datetime(2020, 6, 12, 15, 24, 1, tzinfo=datetime.timezone.utc), 'commenter': 'richardjgowers', 'type': 'User'}, {'comment_id': 439503254, 'comment_body': 'tests are in testsuite/MDAnalysisTests/core/test_atomselections.py', 'comment_created': datetime.datetime(2020, 6, 12, 15, 55, 30, tzinfo=datetime.timezone.utc), 'commenter': 'cbouy', 'type': 'User'}, {'comment_id': 439510329, 'comment_body': 'Missed these. Yeah I’d split this into two tests and combine with at least one other selection. ', 'comment_created': datetime.datetime(2020, 6, 12, 16, 9, 8, tzinfo=datetime.timezone.utc), 'commenter': 'richardjgowers', 'type': 'User'}, {'comment_id': 439606641, 'comment_body': 'Since there are so many arguments that can be passed to this function, I went for a separate dict of kwargs. i.e. if you want to fix the random seed:\r\n`mda.Universe.from_smiles(""CCO"", rdkit_kwargs=dict(randomSeed=42))`', 'comment_created': datetime.datetime(2020, 6, 12, 19, 32, 17, tzinfo=datetime.timezone.utc), 'commenter': 'cbouy', 'type': 'User'}, {'comment_id': 439724231, 'comment_body': 'Does this happen when the Mol has no coordinates? Worth raising a warning at least.', 'comment_created': datetime.datetime(2020, 6, 13, 9, 20, tzinfo=datetime.timezone.utc), 'commenter': 'richardjgowers', 'type': 'User'}, {'comment_id': 440148435, 'comment_body': 'Yes, and since the memory reader expects a numpy array I thought it would be best to have it at least with the right shape', 'comment_created': datetime.datetime(2020, 6, 15, 12, 44, 36, tzinfo=datetime.timezone.utc), 'commenter': 'cbouy', 'type': 'User'}, {'comment_id': 440203189, 'comment_body': ""We no longer need to support py2, so it's ok to remove the __future__ imports. Same for RDKITParser and the rdkit test files (the other files are probably covered by one of the other py2 removal PRs that got opened)."", 'comment_created': datetime.datetime(2020, 6, 15, 14, 9, 37, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 440204590, 'comment_body': 'Similarly to my import comment, we are dropping six, so you should just do ""raise .. from e"" here, although you probably don\'t need to do a raise from here.', 'comment_created': datetime.datetime(2020, 6, 15, 14, 11, 30, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 440204957, 'comment_body': 'Could you put a versionadded here?', 'comment_created': datetime.datetime(2020, 6, 15, 14, 12, 2, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 440207097, 'comment_body': 'I remember @orbeckst telling me in my very first MDA PR that asserts should be kept in the realm of tests, any change we could use either a try/except or an if/else->except?', 'comment_created': datetime.datetime(2020, 6, 15, 14, 15, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 440210048, 'comment_body': 'The overlap between this test and the above one is quite large, any chance we could squash them together and do a parametrize instead?', 'comment_created': datetime.datetime(2020, 6, 15, 14, 19, 10, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 440210970, 'comment_body': 'I think the following 4 tests can be squashed into one just pytest.mark.parametrize', 'comment_created': datetime.datetime(2020, 6, 15, 14, 20, 31, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 440212087, 'comment_body': '👍 We probably should test this too (apologies if I happened to have missed the test for rdkit_kwargs).', 'comment_created': datetime.datetime(2020, 6, 15, 14, 22, 11, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 440216219, 'comment_body': 'Do we also drop `six` ?', 'comment_created': datetime.datetime(2020, 6, 15, 14, 27, 57, tzinfo=datetime.timezone.utc), 'commenter': 'cbouy', 'type': 'User'}, {'comment_id': 440218622, 'comment_body': 'yup :)', 'comment_created': datetime.datetime(2020, 6, 15, 14, 31, 14, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 440245981, 'comment_body': ""It's implicitly tested in test_universe.py/test_coordinates_SMILES where I pass rdkit a randomSeed parameter through the rdkit_kwargs, but I will add one np"", 'comment_created': datetime.datetime(2020, 6, 15, 15, 8, 52, tzinfo=datetime.timezone.utc), 'commenter': 'cbouy', 'type': 'User'}, {'comment_id': 440713020, 'comment_body': ""Not sure if this is a very pythonic way of testing things, but since parametrize won't take fixtures as args I decided to do it this way"", 'comment_created': datetime.datetime(2020, 6, 16, 9, 26, 14, tzinfo=datetime.timezone.utc), 'commenter': 'cbouy', 'type': 'User'}, {'comment_id': 441601246, 'comment_body': ""You'll want to check locally but usually you need two empty lines before a versionchanged otherwise sphinx will compile it but it won't always follow the intended behaviour."", 'comment_created': datetime.datetime(2020, 6, 17, 14, 44, 46, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 441604590, 'comment_body': 'I _think_ sphinx is complaining somewhere about a missing indentation.', 'comment_created': datetime.datetime(2020, 6, 17, 14, 48, 59, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 441654012, 'comment_body': ""Is the TriposAtomType always guaranteed to exist if TriposAtomName is present (I can't remember how standard enforcing the mol2 parser in rdkit is). If so, can this be placed in the try/except above?"", 'comment_created': datetime.datetime(2020, 6, 17, 15, 56, 31, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 441659179, 'comment_body': 'I think our style guide prefers the use of assert_equal over assert_array_equal, see: https://userguide.mdanalysis.org/testing.html#assertions', 'comment_created': datetime.datetime(2020, 6, 17, 16, 4, 46, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 441659914, 'comment_body': 'Three empty lines instead of two?', 'comment_created': datetime.datetime(2020, 6, 17, 16, 5, 56, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 441795363, 'comment_body': ""Do we have a feeling for what the standard behaviour across the MDA readers is? I believe the netcdf reader will just throw an error if it can't find a reasonable dimension (my thought here is that we would want to have a similar behaviour to how other things work)."", 'comment_created': datetime.datetime(2020, 6, 17, 19, 51, 57, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 442319204, 'comment_body': ""Yeah pytest can't parametrize over fixtures, it's annoying.  Not sure there's much better you can do here."", 'comment_created': datetime.datetime(2020, 6, 18, 15, 36, 57, tzinfo=datetime.timezone.utc), 'commenter': 'richardjgowers', 'type': 'User'}, {'comment_id': 442355340, 'comment_body': 'I don\'t think ""guaranteed"" and ""MOL2"" can be used in the same sentence unfortunately, especially when it comes to atom types. Nevertheless, I made a quick test with the `Chem.MolFromMol2Block`: neither the atom name nor atom type can be blank, otherwise the resulting object is just `None`. So I guess if reading from a MOL2 file, they both have to be present otherwise RDKit will fail.', 'comment_created': datetime.datetime(2020, 6, 18, 16, 31, 51, tzinfo=datetime.timezone.utc), 'commenter': 'cbouy', 'type': 'User'}, {'comment_id': 442366791, 'comment_body': '> I don\'t think ""guaranteed"" and ""MOL2"" can be used in the same sentence unfortunately,\r\n\r\n😆 That\'s a very good point.\r\n\r\n> So I guess if reading from a MOL2 file, they both have to be present otherwise RDKit will fail.\r\n\r\nIf you think it\'s worth it, it might make sense to put them within the same try/except block then , although maybe with a comment stating that we are making that assumption. My main concern here was whether or not there would be a large performance penalty to triggering the except twice if you were passing a non-MOL2 file, maybe worth benchmarking?', 'comment_created': datetime.datetime(2020, 6, 18, 16, 50, 7, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 442392515, 'comment_body': ""Tried with the SMILES string of caffeine (24 atoms, without generating coordinates), 10 runs, 100 loops each:\r\n* same block: 8.51 ms ± 363 µs per loop\r\n* 2 try/except blocks: 11.3 ms ± 1.07 ms per loop\r\n\r\nWith PDB_helix file (137 atoms):\r\n* same block: 7.73 ms ± 255 µs per loop\r\n* 2 try/except blocks: 7.31 ms ± 472 µs per loop\r\n\r\nWith MOL2 file (49 atoms):\r\n* same block: 13.9 ms ± 458 µs per loop\r\n* 2 try/except blocks: 14.7 ms ± 648 µs per loop\r\n\r\nI don't see a large performance drop there so I guess we can keep it at 2 ?"", 'comment_created': datetime.datetime(2020, 6, 18, 17, 35, 1, tzinfo=datetime.timezone.utc), 'commenter': 'cbouy', 'type': 'User'}, {'comment_id': 442396195, 'comment_body': ""> I don't see a large performance drop there so I guess we can keep it at 2 ?\r\n\r\nI think that's fair unless @fiona-naughton or @richardjgowers have a different opinion here."", 'comment_created': datetime.datetime(2020, 6, 18, 17, 41, 58, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 442396564, 'comment_body': 'This looks fine, we can do a performance pass if it ever becomes notably slow. I’m imagining any chem perception RDKit does is magnitudes slower than try/excepts on our end.', 'comment_created': datetime.datetime(2020, 6, 18, 17, 42, 41, tzinfo=datetime.timezone.utc), 'commenter': 'richardjgowers', 'type': 'User'}, {'comment_id': 442414154, 'comment_body': ""I actually just needed blank lines before the first `>>>` otherwise it wasn't detected as code, hence the indentation warning"", 'comment_created': datetime.datetime(2020, 6, 18, 18, 14, 53, tzinfo=datetime.timezone.utc), 'commenter': 'cbouy', 'type': 'User'}, {'comment_id': 442881480, 'comment_body': ""I've changed this so that it will fail if there aren't aromaticities available, rather than silently putting everything as false"", 'comment_created': datetime.datetime(2020, 6, 19, 14, 44, 18, tzinfo=datetime.timezone.utc), 'commenter': 'richardjgowers', 'type': 'User'}, {'comment_id': 442885235, 'comment_body': ""@cbouy Was just checking codecov to double check that there were enough tests and it looks like this branch of the code isn't tested at all (might be looking at an old commit). Could you double check that this is the case & add a test if so? https://codecov.io/gh/MDAnalysis/mdanalysis/src/dc482401df0d5c5839b2b37343b49a778987c2b1/package/MDAnalysis/topology/RDKitParser.py"", 'comment_created': datetime.datetime(2020, 6, 19, 14, 51, 20, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}]","[{'commit_sha': 'ba1f3e44982aec88373389120845f3fe5825740d', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '7e172fcc97ac98eab7f93951ca01ff2598db0c6c', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'c4365175d79cb0effbaac11d138abd5b6cd79ebe', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b25898f9a4096fd950007513184fc757dc261e43', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '60af718a9628f870991d99f8fd9f1b610e9ad583', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '94f18b5be57006e4b844f06e76849a8837d22a86', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'fdb6513c2a5ec23a8629f0bb37e65ed6faca9e68', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '9caaa5c1d0ee85a128a2c98b32a56db45c8a9250', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '88b21307f1ac33af89209d065ba4d2fd5a743c0f', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ffbf1494a9f21f46fce22bf2294bec48e0be02d7', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '8736750d54590514898b7c7c0750523787347dcc', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'db73687f569f30e4669c5c21bb1043b962e1261e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '29a3e8ed26f916e70f808289e19368f70783396e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '94f1e4dc7d376310c0f8d25b36666461947df804', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b60a50e7a954e74b387e26d648396cf2d8e6fa74', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '73342e2037d7e22adf0828e65b26850286153cbc', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '4baae688314bde5744b721716d134f5d6a5791ac', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'bf5ee1a26db2775b1d5686b370f9a7ec152786ed', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ecc53b1496749f128fc562bcfe1d7b8028d879ba', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '396da83110b6a5adb4dce9a7a0b864b4fee91b97', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '654026057d9e2f65284819b32b4fe5870b91e2a9', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'd18bb1235cb8b67a1fa30a428a932cce46570363', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '0c8dcc468d2a9a82b282ee16b7943480e8bc9a6f', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'd9dd7473523d756077cb5bef17b71e23861dee5a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b75297c75d67e9d7fdd0a539b8d5bae914cccde6', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '9aafc6a6eba43735121179a41c259eac1c4d6c6b', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '77617d27c3956f28dec99cf02f8d975a306d95cc', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'd6d7fe3289f5a3ceb49e540f0f9bc501960400ea', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'dc7ec773dfc74944ff28d8d7cb95ebffcac4522e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '18dc450becd9439b834b8ccc8c931b2414ef0d12', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '0c891f4dfe88565912eb6133519252e3c60d948a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'eac10ab134ca91ac79ebdc054d57cc30d8f25c8f', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '60ab691611a206519267bdae515c38ea108d31d4', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '5cad0bac52c78d13a2ea36272a7137c50d124c53', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'e0e99ade808a69dc6d979fcfd681adeab62f3b48', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '3ab565875a3e59ee534f0f8d296b4e42e5aa6a69', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '0aff0f6263312a8f2500645cadc3362662bd7d3a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'f0497bfdf5f6af9039a29107c592c2a317b1032f', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '27558538a29b0ef01578a13c91c6607ec8f9e485', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b611915eb8e07d6c04840967ab0384982357e409', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'dc482401df0d5c5839b2b37343b49a778987c2b1', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '76fb209a88cd6e00be05a3c1b9e2658a2243f1ce', 'committer_username': 'richardjgowers', 'committer_name': 'Richard Gowers', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 15, 9, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '13168ba0c21b2647d9864d9339d8f566922f4c8d', 'committer_username': 'richardjgowers', 'committer_name': 'Richard Gowers', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 15, 9, 36, 22, tzinfo=datetime.timezone.utc)}]",Cédric Bouysset,27850535,cedric@bouysset.net,User,,18,,33,91
437189256,Simple RDKitConverter,"Part of the fixes for #2468 

Changes made in this Pull Request:
 - Added a converter that works for any input with all hydrogens explicit in the topology.

Inspired from the ParmEdConverter

PR Checklist
------------
 - [x] Tests?
 - [x] Docs?
 - [x] CHANGELOG updated?
 - [x] Issue raised/referenced?
 - [x] Merge tempfactors and bfactors
 - [x] Check Codecov 
 - [x] Check pep8speaks",True,2775,https://api.github.com/repos/MDAnalysis/mdanalysis/pulls/2775,https://github.com/MDAnalysis/mdanalysis/pull/2775,closed,1229,47,8,107,66,88,3,3,"[{'name': 'enhancement'}, {'name': 'Component-Converters'}, {'name': 'GSoC'}]",2020-06-19 16:20:50+00:00,2020-08-21 18:34:53+00:00,5451243.0,"63 days, 2:14:03","[{'comment_id': 443108702, 'comment_body': 'Don’t worry about Timestep, assume either AG or Universe ', 'comment_created': datetime.datetime(2020, 6, 20, 7, 11, 33, tzinfo=datetime.timezone.utc), 'commenter': 'richardjgowers', 'type': 'User'}, {'comment_id': 445102452, 'comment_body': ""This breaks PEP8, make sure to run your code through a linter at some point (I won't mention any more PEP8 until a future review)."", 'comment_created': datetime.datetime(2020, 6, 24, 18, 52, 34, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 445102960, 'comment_body': ""I doubt we'd get a new release through (except maybe 1.0.1) before the end of GSOC, so it's ok to just put 2.0.0 here."", 'comment_created': datetime.datetime(2020, 6, 24, 18, 53, 30, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 445104669, 'comment_body': 'Make sure you structure your tests to ensure that you can test this error.', 'comment_created': datetime.datetime(2020, 6, 24, 18, 56, 37, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 445105630, 'comment_body': ""I _think_ the convention has been to raise from None so that users don't see the AttributeError trace, others may have other views here though."", 'comment_created': datetime.datetime(2020, 6, 24, 18, 58, 14, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 445106455, 'comment_body': ""I'm not super into the idea of guessing by default for anything, personally I think we should just fail and tell users to add elements to their Universes. If we go with a default guess though we should at worst warn users that we are doing this."", 'comment_created': datetime.datetime(2020, 6, 24, 18, 59, 50, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 445119587, 'comment_body': ""To be discussed, bond guessing isn't one of those I think are really inaccurate, so I'm not as opposed to guessing by default, but do we think it might be a good idea to throw a warning here?"", 'comment_created': datetime.datetime(2020, 6, 24, 19, 24, 33, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 445123593, 'comment_body': ""Here until 222 is doing quite a lot of things that probably would be worth documenting thoroughly (even if docstring in a private function, at least future developers would know exactly what is going on). How would we feel about moving this code into a private function that get's called within the loop? If anything it might make things more readable (although that could just be me and my tiny laptop screen)."", 'comment_created': datetime.datetime(2020, 6, 24, 19, 32, 32, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 445125710, 'comment_body': 'Could we use segindices here instead?', 'comment_created': datetime.datetime(2020, 6, 24, 19, 36, 38, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 445692008, 'comment_body': ""Rather than having code in an error message, I'd recommend just pointing users to the guessers, maybe a help(MDAnalysis.topology.guessers)?"", 'comment_created': datetime.datetime(2020, 6, 25, 16, 38, 23, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 447102579, 'comment_body': ""@jbarnoud didn't you already write code to this effect in the PDBWriter? Or was that for parsing still?+"", 'comment_created': datetime.datetime(2020, 6, 29, 16, 33, 24, tzinfo=datetime.timezone.utc), 'commenter': 'richardjgowers', 'type': 'User'}, {'comment_id': 447782309, 'comment_body': 'We recently added ""import_not_available"" to the test utils, it could probably replace this (see test_msd for some of the usage).', 'comment_created': datetime.datetime(2020, 6, 30, 15, 39, 27, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 447787553, 'comment_body': 'One other possibility is to move this up and use block_import to allow to fake a minimal dependency.', 'comment_created': datetime.datetime(2020, 6, 30, 15, 46, 52, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 448627580, 'comment_body': 'Not sure if this is an issue or not: \r\nThe KeyError is raised when one of the atom in bond.indices wasn\'t seen when converting MDA atoms to RDKit, and happens when selecting a fragment of a molecule (`u.select_atoms(""resid 2"").convert_to(""RDKIT"")` for example). \r\nWhich means that this selection (resid2) will contain bonds between atoms of resid2, but also the bond between resid1 and the Nterm of resid2, and the bond between the Cterm of resid2 and resid3, although resid1 and resid3 are not part of the selection. \r\nIs this intended ? Or should the selection only return bonds where both atoms of the bond belong to the selection ?', 'comment_created': datetime.datetime(2020, 7, 1, 21, 32, 43, tzinfo=datetime.timezone.utc), 'commenter': 'cbouy', 'type': 'User'}, {'comment_id': 449507675, 'comment_body': 'moved this to #2821 ', 'comment_created': datetime.datetime(2020, 7, 3, 10, 23, 42, tzinfo=datetime.timezone.utc), 'commenter': 'cbouy', 'type': 'User'}, {'comment_id': 450020022, 'comment_body': ""Somewhere the full list of attributes that are supported for reading should be documented (probably in the module docstring). This way if attribute X is required by a user in the future but isn't present then they know that this is because MDA doesn't support it yet."", 'comment_created': datetime.datetime(2020, 7, 6, 6, 59, 48, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 450750405, 'comment_body': 'I think the convention we\'ve taken is ""Issue #<number>"", it\'s pedantic but probably worth adding for consistency.', 'comment_created': datetime.datetime(2020, 7, 7, 10, 0, 23, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 450752365, 'comment_body': ""(I'm thinking something like the table we have in the TOPParser docs, but that indicates what is read to MDA and from MDA?)"", 'comment_created': datetime.datetime(2020, 7, 7, 10, 4, 6, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 450760614, 'comment_body': 'I think you could simplify this with a call to `ag.bonds.values()` that should raise an IndexError if you have no bonds in your system.', 'comment_created': datetime.datetime(2020, 7, 7, 10, 19, 29, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 450766254, 'comment_body': 'mostly a comment for next time, you can use the `match` parameter of pytest.raises here to save yourself a little bit of hassle.', 'comment_created': datetime.datetime(2020, 7, 7, 10, 30, 17, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 450766894, 'comment_body': 'As above, I think you can also save yourself a little bit of code complexity by just using pytest.warns here.', 'comment_created': datetime.datetime(2020, 7, 7, 10, 31, 40, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 451717482, 'comment_body': 'I ended up not using bonds.values() as it needs coordinates to work, but people might just want to convert their topology to rdkit without needing the trajectory.', 'comment_created': datetime.datetime(2020, 7, 8, 17, 40, 42, tzinfo=datetime.timezone.utc), 'commenter': 'cbouy', 'type': 'User'}, {'comment_id': 451726977, 'comment_body': ""That's reasonable.\r\n\r\nI'm trying to work out if this does the intended behaviour though. My understanding is that calling `AtomGroup.bonds` should raise a NoDataError if no bond information is present. If bond information is present but the number of bonds is 0, that _should_ be a valid input, at least according to whatever the user provided right?\r\n\r\nIs there a particular case where the bonds attribute get populated but we still require guessing?"", 'comment_created': datetime.datetime(2020, 7, 8, 17, 56, 34, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 452190957, 'comment_body': ""The only case I could find where the bonds attribute was present but empty is a PDB file without a CONECT record, I don't know if that's intended or not (the PDB_helix test file for example).\r\nThe corresponding AtomGroup probably still requires guessing bonds though, as I don't really see a scenario where people need to convert their simulation of monoatomic ions or noble gases to RDKit.\r\nFor now I can just try if ag.bonds is present if you prefer, PDB files are a mess anyway !"", 'comment_created': datetime.datetime(2020, 7, 9, 12, 47, 19, tzinfo=datetime.timezone.utc), 'commenter': 'cbouy', 'type': 'User'}, {'comment_id': 452192463, 'comment_body': ""That's probably not normal, we should have a consistent API, if bonds aren't present then the bonds attribute doesn't get assigned :/ Can you raise this as an issue too? It might be that there's a rationale for it, but I can't seem to understand what it could be."", 'comment_created': datetime.datetime(2020, 7, 9, 12, 49, 56, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 452205617, 'comment_body': 'raised #2832 ', 'comment_created': datetime.datetime(2020, 7, 9, 13, 11, 33, tzinfo=datetime.timezone.utc), 'commenter': 'cbouy', 'type': 'User'}, {'comment_id': 454321078, 'comment_body': ""Super picky, but since it's the main docs for this class it might be nice to have the AtomGroup and Universe stuff point to the right place, so using something like `:class:`~MDAnalysis.core.universe.Universe`` might be good here."", 'comment_created': datetime.datetime(2020, 7, 14, 12, 31, 27, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 454324104, 'comment_body': 'This is super useful 👍 \r\n\r\nIn a separate PR, could I convince you to do something similar (if feasible) for the RDKITParser?', 'comment_created': datetime.datetime(2020, 7, 14, 12, 36, 36, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 454326036, 'comment_body': ""You'd probably want to document the need for elements in the class docstring somewhere. Maybe under a `Notes` section?"", 'comment_created': datetime.datetime(2020, 7, 14, 12, 40, 13, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 454326521, 'comment_body': 'Similarly documenting that bonds will be guessed, if not present, would be useful too.', 'comment_created': datetime.datetime(2020, 7, 14, 12, 41, 2, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 454329263, 'comment_body': ""I think we probably need to consider #1901 here. Since bfactors == tempfactors, we probably could just use one or the other if only one is present. It's probably more complicate though, thoughts?"", 'comment_created': datetime.datetime(2020, 7, 14, 12, 45, 44, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 454329998, 'comment_body': ""Unless you feel like adding more details you probably don't need this comment here, `other_attrs` is sufficiently descriptive, especially with the new class docs."", 'comment_created': datetime.datetime(2020, 7, 14, 12, 47, 9, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 454335028, 'comment_body': ""You mentioned that if we don't have explicit hydrogens in the Universe then things would go wrong. Would it make sense to make this some kind of user-defined option?"", 'comment_created': datetime.datetime(2020, 7, 14, 12, 55, 54, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 454341009, 'comment_body': ""might be good to move this comment from here to above line 251. That way it's more obvious as to what the dictionary is when you construct it?"", 'comment_created': datetime.datetime(2020, 7, 14, 13, 5, 38, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 454361667, 'comment_body': ""It mostly makes sense to me, but I'm having trouble wrapping my head around whether or not this could lead to order specific behavoiur i.e. raising the bond order for one neighbour pair means that another won't be raised. I can't really think of a case where this would be a problem though.\r\n\r\nDo you have any thoughts here?"", 'comment_created': datetime.datetime(2020, 7, 14, 13, 37, 40, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 454675539, 'comment_body': ""I completely agree, although I'm not sure which one should be added as a `TempFactor` in RDKit if both attributes are present in the AtomGroup..."", 'comment_created': datetime.datetime(2020, 7, 14, 22, 12, 24, tzinfo=datetime.timezone.utc), 'commenter': 'cbouy', 'type': 'User'}, {'comment_id': 454676206, 'comment_body': 'Sure, can do!', 'comment_created': datetime.datetime(2020, 7, 14, 22, 14, 9, tzinfo=datetime.timezone.utc), 'commenter': 'cbouy', 'type': 'User'}, {'comment_id': 454678403, 'comment_body': ""I'm tempted to say that @orbeckst's comment on what to do with the PDBWriter wouldn't be a bad idea here: https://github.com/MDAnalysis/mdanalysis/issues/1901#issuecomment-389578569\r\n\r\nA sort of exclusive OR; if you have both error out letting users know that two sets of entries were found. It's probably overly prudent, but at the same time I'm not sure there are that many cases that users would end up with both sets of topology attributes."", 'comment_created': datetime.datetime(2020, 7, 14, 22, 19, 29, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 454681409, 'comment_body': 'sounds good to me', 'comment_created': datetime.datetime(2020, 7, 14, 22, 27, 33, tzinfo=datetime.timezone.utc), 'commenter': 'cbouy', 'type': 'User'}, {'comment_id': 454682217, 'comment_body': ""Like that ? left: NoImplicit=False, right: NoImplicit=True (the default). I'm still not sure if it's usable but it definitely looks less worse 😅\r\n![image](https://user-images.githubusercontent.com/27850535/87482576-00a99680-c632-11ea-87d7-78d7a914f3f8.png)"", 'comment_created': datetime.datetime(2020, 7, 14, 22, 29, 57, tzinfo=datetime.timezone.utc), 'commenter': 'cbouy', 'type': 'User'}, {'comment_id': 454690195, 'comment_body': ""Yeah it is a tad bit better, although going from too few to too many hydrogens doesn't really fix the issue.\r\n\r\nAny thoughts here @fiona-naughton @richardjgowers ?"", 'comment_created': datetime.datetime(2020, 7, 14, 22, 52, 2, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 454691277, 'comment_body': ""It is indeed order-specific, for example for a carboxylate group `R-C(-O)-O` the first oxygen read will receive a double bond and the other one will be charged. Of course IRL both oxygens share the charge and the bond order but that's not something RDKit was made to handle. In other words, I don't think there's anything I can do about it..."", 'comment_created': datetime.datetime(2020, 7, 14, 22, 55, 7, tzinfo=datetime.timezone.utc), 'commenter': 'cbouy', 'type': 'User'}, {'comment_id': 454693665, 'comment_body': 'It fixes the case where bond orders are present but hydrogens where removed though, so it could still be useful in a MOL2 file without hydrogens', 'comment_created': datetime.datetime(2020, 7, 14, 23, 1, 58, tzinfo=datetime.timezone.utc), 'commenter': 'cbouy', 'type': 'User'}, {'comment_id': 455182910, 'comment_body': 'Done in PR #2852 ', 'comment_created': datetime.datetime(2020, 7, 15, 16, 37, 1, tzinfo=datetime.timezone.utc), 'commenter': 'cbouy', 'type': 'User'}, {'comment_id': 460455725, 'comment_body': 'What is the motivation for raising `NoDataError` and then capturing it right away to issue a warning and guess the bonds vs. just directly issuing the warning and guessing the bonds when the conditional is satisfied? ', 'comment_created': datetime.datetime(2020, 7, 25, 23, 11, 39, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjereddy', 'type': 'User'}, {'comment_id': 460455892, 'comment_body': ""Also, less useful comment than Richard's, but `formated`->`formatted` I think"", 'comment_created': datetime.datetime(2020, 7, 25, 23, 14, 18, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjereddy', 'type': 'User'}, {'comment_id': 460456013, 'comment_body': 'typo: ""explicitly"" I think; and probably no ""s"" for ""information""', 'comment_created': datetime.datetime(2020, 7, 25, 23, 15, 56, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjereddy', 'type': 'User'}, {'comment_id': 460456094, 'comment_body': '""one of""', 'comment_created': datetime.datetime(2020, 7, 25, 23, 16, 54, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjereddy', 'type': 'User'}, {'comment_id': 460456244, 'comment_body': 'typo "" beginning"" I think', 'comment_created': datetime.datetime(2020, 7, 25, 23, 19, 27, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjereddy', 'type': 'User'}, {'comment_id': 460456337, 'comment_body': 'typo ""transform""', 'comment_created': datetime.datetime(2020, 7, 25, 23, 20, 36, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjereddy', 'type': 'User'}, {'comment_id': 460456425, 'comment_body': 'typo ""amount""', 'comment_created': datetime.datetime(2020, 7, 25, 23, 21, 50, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjereddy', 'type': 'User'}, {'comment_id': 460456774, 'comment_body': 'Just curious--the machinery that skips the tests when rdkit is absent is not sufficient to alleviate the need for ""mocking"" these functions?\r\n\r\nIs this because of the trickery with using the functions in parametrizations, so there\'s an issue where the skipping hasn\'t happened yet at test collection time?\r\n\r\nThat probably means there\'s a bit too much magic going on here, but I can see why I guess.\r\n\r\n[Indirect parametrization](https://docs.pytest.org/en/latest/example/parametrize.html#indirect-parametrization) to allow fixture usage in the parametrization may be something to aim for eventually, even if this is ""ok"" here for now, to cut down on this top-level ""mocking.""', 'comment_created': datetime.datetime(2020, 7, 25, 23, 27, 42, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjereddy', 'type': 'User'}, {'comment_id': 460806304, 'comment_body': ""I do 2 things here: I implicitly check that ag.bonds exist, if it doesn't it will raise the NoDataError. And sometimes ag.bonds exist but is empty (PDB file without a CONECT record) so I need the if statement as well, and to avoid duplicate code I raise the same NoDataError. All this was prior to #2855 so I can safely remove the if statement now"", 'comment_created': datetime.datetime(2020, 7, 27, 10, 49, 57, tzinfo=datetime.timezone.utc), 'commenter': 'cbouy', 'type': 'User'}, {'comment_id': 461011541, 'comment_body': ""Yup exactly, but I'm using indirect param now thanks to your comment 😃 I somehow missed this when looking at the pytest docs.\r\nI think it's much better now"", 'comment_created': datetime.datetime(2020, 7, 27, 16, 22, 30, tzinfo=datetime.timezone.utc), 'commenter': 'cbouy', 'type': 'User'}, {'comment_id': 461270940, 'comment_body': ""I see, yeah that probably deserved a comment at least, since it is a bit confusing as written. The repetition might have even been 'ok' to avoid the confusion (i.e., clarity over concision).\r\n\r\nSounds like you can simplify this now IIRC.\r\n"", 'comment_created': datetime.datetime(2020, 7, 28, 1, 55, 45, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjereddy', 'type': 'User'}, {'comment_id': 463340074, 'comment_body': 'Maybe use f-strings? We seem to be getting rid of `%` interpolation.', 'comment_created': datetime.datetime(2020, 7, 31, 0, 18, 23, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 469001312, 'comment_body': 'Can we refer (or even do a sort of TODO note here) to issue #1901, long term this behaviour will need to be fixed when we get around to fixing the whole tempfactors/bfactors issue (short term imho this is still the best quick solution).', 'comment_created': datetime.datetime(2020, 8, 12, 4, 41, 37, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 469001777, 'comment_body': 'I _think_ here we need to follow PEP8 variable naming convention, so ""no_implicit"" (see: https://www.python.org/dev/peps/pep-0008/#function-and-variable-names)', 'comment_created': datetime.datetime(2020, 8, 12, 4, 43, 39, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 469002284, 'comment_body': 'this probably should be detailed in the main class docstring. Especially 1) ""why caching is useful"", 2) ""in what cases caching is a bad idea"".', 'comment_created': datetime.datetime(2020, 8, 12, 4, 45, 46, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 469005022, 'comment_body': '`NoImplicit` (or even `no_implicit`, should probably be part of the function signature if we are referring to it directly. If it\'s more of an ""rdkit parameter passed through as a kwarg"", then it might be that this should be more clearly explained in the docstring (and what other parameters [or just ""all parameters""] are passed through to the rdkit mol creation).', 'comment_created': datetime.datetime(2020, 8, 12, 4, 57, 1, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 469005962, 'comment_body': ""As above, we'll want to stick to PEP8 convention for variable naming."", 'comment_created': datetime.datetime(2020, 8, 12, 5, 0, 39, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 469008193, 'comment_body': ""Note, my understanding here is that this heavily relies on atomgroup_intersection acting the way it currently does. If not already doing so, we explicitly test terminal atom indices somehow to make sure that any future changes (I think it was mentioned somewhere), don't unintentionally prevent this from working properly."", 'comment_created': datetime.datetime(2020, 8, 12, 5, 9, 50, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 469009048, 'comment_body': ""I've not tried generating the docs locally, so might be wrong, but I think by default because these are private functions they won't be added to the docs, however I do think that they should be available for users to see. It should be able to force sphinx to build the docs for these if it's not happening already.\r\n\r\n(note mainly referring to this and the standardize patterns below)"", 'comment_created': datetime.datetime(2020, 8, 12, 5, 13, 9, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 469009776, 'comment_body': ""shouldn't these be guarded by an `if not NoImplicit` statement?"", 'comment_created': datetime.datetime(2020, 8, 12, 5, 15, 49, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 469010280, 'comment_body': 'Can we put this down in the docstring as a Note? If anything it might be useful to know for some user at some point.', 'comment_created': datetime.datetime(2020, 8, 12, 5, 17, 41, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 469010959, 'comment_body': ""I think I've finally wrapped my head around this. Here we will need to document a list of all the different reactions we are enforcing to happen. Users will need to be aware of it, in case it happens that they have a system with a feature that is unintentionally converted by one of these reactions."", 'comment_created': datetime.datetime(2020, 8, 12, 5, 20, 27, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 469016649, 'comment_body': 'This might be a simple enough case for testing that the right elements were assigned to the mol?', 'comment_created': datetime.datetime(2020, 8, 12, 5, 40, 48, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 469017415, 'comment_body': 'Would it be worth testing the full roundtrip too? i.e. MDA->RDKit->MDA', 'comment_created': datetime.datetime(2020, 8, 12, 5, 43, 33, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 469018345, 'comment_body': ""I reaslise these are set in code order, but I do wonder if it might be more readable by grouping all the error/warning testing together at the end of the class? (it's pedantic and doesn't change anything, so please don't feel like you have to do this)"", 'comment_created': datetime.datetime(2020, 8, 12, 5, 46, 28, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 469020344, 'comment_body': 'This seems to be failing in the tests, do double check it works.', 'comment_created': datetime.datetime(2020, 8, 12, 5, 53, 7, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 469065816, 'comment_body': 'One can tell sphinx to also show undocumented members, or, include it explicitly in the list of members. See as example how `_reopen()` was documented https://github.com/MDAnalysis/mdanalysis/blob/5c0eb207d2141bb4166112fe3af4fe61d0fad2fc/package/MDAnalysis/coordinates/H5MD.py#L181', 'comment_created': datetime.datetime(2020, 8, 12, 7, 39, 49, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 469066604, 'comment_body': 'Good idea -- a general acid test for converters!', 'comment_created': datetime.datetime(2020, 8, 12, 7, 41, 18, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 469295725, 'comment_body': ""I chose to call this parameter `NoImplicit` for the same reason I named `AddHs` the parameter to add hydrogen atoms when using the `Universe.from_smiles` method: those are named after functions/methods of RDKit so it's easier for RDKit users to remember the argument name and what it does  \r\nIn #2707 @richardjgowers suggested that following RDKit's lead in argument names would be best so I followed the same principle here  \r\nWith that being said, I agree that mixing snake_case and PascalCase can be very confusing especially for newcomers  \r\nSo I don't really know what's best... should I create a poll on twitter ?"", 'comment_created': datetime.datetime(2020, 8, 12, 14, 20, 24, tzinfo=datetime.timezone.utc), 'commenter': 'cbouy', 'type': 'User'}, {'comment_id': 469342362, 'comment_body': ""With the API change discussed in #2821 the try except won't be needed anymore.\r\nRegarding the terminal_atom_indices, I was using it to avoid adding charges to these atoms, but standardize_patterns should be able to cover this now so I can simplify it a bit"", 'comment_created': datetime.datetime(2020, 8, 12, 15, 24, 11, tzinfo=datetime.timezone.utc), 'commenter': 'cbouy', 'type': 'User'}, {'comment_id': 469361719, 'comment_body': 'Will add it explicitly! And I can remove the kwargs then', 'comment_created': datetime.datetime(2020, 8, 12, 15, 48, 14, tzinfo=datetime.timezone.utc), 'commenter': 'cbouy', 'type': 'User'}, {'comment_id': 469593487, 'comment_body': ""It might we worth throwing a warning here in case someone doesn't realise they have NaNs in their data and is expecting to have coordinates assigned"", 'comment_created': datetime.datetime(2020, 8, 12, 23, 0, 32, tzinfo=datetime.timezone.utc), 'commenter': 'fiona-naughton', 'type': 'User'}, {'comment_id': 469593996, 'comment_body': 'This comment is outdated now `NoImplicit` can be False', 'comment_created': datetime.datetime(2020, 8, 12, 23, 2, 6, tzinfo=datetime.timezone.utc), 'commenter': 'fiona-naughton', 'type': 'User'}, {'comment_id': 469594368, 'comment_body': 'other -> over', 'comment_created': datetime.datetime(2020, 8, 12, 23, 3, 19, tzinfo=datetime.timezone.utc), 'commenter': 'fiona-naughton', 'type': 'User'}, {'comment_id': 469595253, 'comment_body': 'This same basic calculation is repeated several times here to get/update NUEs, so it might be worth making it its own function?', 'comment_created': datetime.datetime(2020, 8, 12, 23, 5, 49, tzinfo=datetime.timezone.utc), 'commenter': 'fiona-naughton', 'type': 'User'}, {'comment_id': 469596027, 'comment_body': 'I might be missing something, but is there a reason the formal charge gets used in the other NUE calculations, but not here?', 'comment_created': datetime.datetime(2020, 8, 12, 23, 8, 11, tzinfo=datetime.timezone.utc), 'commenter': 'fiona-naughton', 'type': 'User'}, {'comment_id': 470215147, 'comment_body': 'You mean something like this ?\r\n```python\r\nu = mda.Universe(...)\r\nmol = u.atoms.convert_to(""RDKIT"")\r\numol = mda.Universe(mol)\r\nassert u == umol\r\n```\r\nI\'m not sure how Universe comparison works', 'comment_created': datetime.datetime(2020, 8, 13, 20, 3, 25, tzinfo=datetime.timezone.utc), 'commenter': 'cbouy', 'type': 'User'}, {'comment_id': 470266756, 'comment_body': ""Yes, that would be the idea way – but I also don't think that we have `Universe.__eq__` defined...  so comparing topology things (list of atoms, bonds) (`assert_equal` for exact array comparisons) and positions (`assert_almost_equal` for floating point numbers) should do the job.\r\n\r\n(Or raise an issue to make `Universe.__eq__` work, which will likely lead to having to make `Topology.__eq__` and `Reader.__eq__` work... at least `Timestep.__eq__` exists already.)"", 'comment_created': datetime.datetime(2020, 8, 13, 21, 45, 14, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 470680402, 'comment_body': ""Best just pinging @richardjgowers here, I'd like to aim to get this merged by early next week at the latest, and going via a Twitter poll is probably going to be too time consuming."", 'comment_created': datetime.datetime(2020, 8, 14, 15, 2, 47, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 470682057, 'comment_body': 'No problem, it would also affect Universe.from_smiles so it can be in a separate PR later', 'comment_created': datetime.datetime(2020, 8, 14, 15, 5, 36, tzinfo=datetime.timezone.utc), 'commenter': 'cbouy', 'type': 'User'}, {'comment_id': 470682903, 'comment_body': ""Awesome, this is exactly what we needed here. However, I think that usually we have Parameters & Returns before Notes. Also could you add a line that mentions that these operations are done in order (I doubt there's much overlap, but this is really in case someone has something crazy that just gets overridden by all this)."", 'comment_created': datetime.datetime(2020, 8, 14, 15, 7, 9, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 470705138, 'comment_body': ""I'd be ok with keeping RDKit names if they are passed through or do exactly the same thing. Keeping them like RDKit increases interoperability. \r\n\r\nFor anything else I would follow our own conventions."", 'comment_created': datetime.datetime(2020, 8, 14, 15, 43, 35, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 470708430, 'comment_body': 'See also: [Guidelines vs Actual Rules](https://www.youtube.com/watch?v=jl0hMfqNQ-g)', 'comment_created': datetime.datetime(2020, 8, 14, 15, 49, 44, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 470763717, 'comment_body': ""I just noticed that I'm using `addHs` in Universe.from_smiles instead of `AddHs`, so I'll probably open a PR next week anyway"", 'comment_created': datetime.datetime(2020, 8, 14, 17, 39, 18, tzinfo=datetime.timezone.utc), 'commenter': 'cbouy', 'type': 'User'}]","[{'commit_sha': '90fccceb97e57f10f2663ee3280197d214c5f602', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ba0f89efcf7b1f0d33243a417f97e8980b44848c', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b54ec604265563481192dd61c90c13fb8238fe02', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ac38ceb7ef162befc80292501f591705b71b6423', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'de5560bbb744c79d616933760422189aa6806573', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b00dee33b5a75b7b671300027eb1fc089be6c96c', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '495217d17ccc23f53dd2a5f196bc514cdbaf20ab', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'eb5d3658caacf0670dcfc04162255a10989bd3a7', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '177496396788e9b806a43d93c8e34e1e686fec44', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '81eea81c0becd7160e12fb9312b64c1c47580230', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '6d6a65beddf5d5d100d8bc259631c493b5b9a05f', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'cf0706c385d72112647cc2a8bab4f464926933ed', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'd41fa5bd5ec2df356331a912ea81d73331ed2fa4', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'fe27f0bbe23e06f3b6c979090da489d471ea0c49', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '3590113cc194e6a9b6b98f8d7ae4367e1726e7fd', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '2d79014dfe5c36ee38647618d7bbc825125ad69a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'df660b708665713179a6daa4a19dd5c33eea569e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '68dc7ca94e277f00e6a0e4e66235a145faa710a8', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'f57e9e632f5b17138da61bc3c0026cae93d7ef29', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '99da261527f90bda06e9a5c9827742b1ae56a038', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '18a05aba3a4013bc913edd6912ce5b611585e7b2', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '1c14478bb41cfd5cb774e9b52b4520ea50a898cd', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '5493fd10832c97bc6b18a579e9bf1c632861a95e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'f5c798a574e8d9df5e0203462aad4a08d8b157d3', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '558f7cd4efeacf02da4be60e2c0849bbcd0f3b54', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '984f507b54c04069aa5dec85cd9e6158bf0916c4', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'e582e63a9a7cc62c74184c7910721a38a8fa0f35', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '931a81b3e50dab20af7e82f50aa9f6c015f1275b', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'c432ea96bde6438175aaf68f3f3e9d2d30b1cec2', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b0c39ebdada098083289398f839826d0525bd189', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '7b002f1cfd4166554edf3a96cb025c6f7e9d1509', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'dc0c2761c90561b4774055549172ff7f935b85ca', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '6b8cd9d6dea4786650b89c0a2097a2af89868dd9', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '0fd38b0642b9b1ecd94237b0bb4fb0fcfa7451cf', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '25ee227c864803e4b4006d0afc38b2348abf000e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'cfce2781fd7845096a78a5a442a0294f5d1c982e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '3717f574110fbf5c6105dd81ce4d16d8a2048e5b', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '499010a565575318563311b65a651d0a5ae664ac', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '9604b6aaa4a118f07cc46e4c24788d5b4834210c', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '30871ab027f09fe960550eaabf1dcde0297b1ecc', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '9c0a42e781678156ce4c2cb3b2474cb2c87b6c96', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '66d644d7dbf496cf5b4e7839cc6da04ea06b3f41', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '1bbfb0973f32bf5c7a54fc2ce20d30e66e34f183', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '4a79cfd6c1f2be9f589679d16e6a5faca991be5d', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'bd8890849100622aacacd66f47d97ae1a951a87c', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'd9e088e6a2ea02e79d869cf870edd3ef70d6e9c1', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'f6aa7361c25e7e87dc0de8877a0785cebe9562f0', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b943af1c85ca17559cefe71a218069f27828d1e0', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '0105419a50cab38d577497fd85008056912710eb', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '7168e2d6cd40d69a3f64041a97b87abc72a1c1e9', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'de324fddd09a6cb4c2d2a137cae4c5f3e6f63484', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'd1f06f3f6d65f14e18e66b1b215c18d9f272d929', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '5a661f8a7dd4658a094cd9e3303f3d7e8f25d3ff', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '6e9c221961f1c6912ef5e34521224edec91abafd', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b02fef62ccea9ff8c65eb3bf9712f8543fe8e43c', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '67dc9c2a65418fc981433fd28ed59a71450a25c2', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'c8acda0f4875f26deca6c70d0aaf0e1b25d22682', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '9defa40f1dde08f7c08c61ca91e8561b4a26b7ba', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '39ae42bd6b461966e72dc4d1a7b67ee01c2ca962', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ff45d3b0360c8932bf5d59e9bb0cdcf1dcbceb43', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '7d7f3f2c0003500ea4fdaf653724b7f2678ae193', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '9d895bce4aaa1d7a72af7c716e0ea41f51563bdc', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'f3f6f01773bf279d7bb4a42ccade3b04306ab5af', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '5d342dbe039a5065a756de858bad6f6ba683caa9', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'eff29a2ca43a5d79348706a680b1d8d0188d08ee', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '5a37d84265a331050a571c9c426154fcb48ce618', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ca077969babba91d6c37503fe505a7e5462df028', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '28d04ed17562117ac9cab59d1a6ed90e67474aef', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ae73afffd52f0a7a76c175ec0e919394c6f5a614', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '8eaebbd6fb600a53a13b1cb0f4d3e8f758892ada', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '425369e6e93b9395107aa773fe3e9a7026902656', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'd6cd44d923f430155fccc9687e0659788cbf6210', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '1398f8c19dab415565151e5ccb11a365e84d698c', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'e71a686ca4d0fb7b933d47d68dcac6b35233f1fb', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '925bd7f2f7f22f2c63320d26032226e51bee1bc5', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '5a24ff6392fb7a734ffec7b4be296faee876de51', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'e5282f3cf01bb2b5a1bf0f1ea71ea4ee1cf1e8a4', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b7ac69e4d697ba2b0ccc925453e55e53330fdfc5', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'aba4b1b9c1952173e84e4cdd27dd857c607864ce', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '49f3bff16a6db408a0ab55defa5454810db00980', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '70cce99ab34123dcf706dfe63dc43b0d0f9a4975', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'e82cf0a3200f9faae08ad63806147e86eb605832', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '3427c3c5f6134f582233ee4bfabdd19e7bfaf09d', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '5218daab7479f730b10ef384d463f30105879365', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '3313b567c5d52d962f465adb72b399136d490417', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a72a51b007f9136e36a83b2906f70d7280a2355f', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '76102fb0d74b93426c957ec36731548768899b7b', 'committer_username': 'orbeckst', 'committer_name': 'Oliver Beckstein', 'committer_email': 'orbeckst@gmail.com', 'commit_date': datetime.datetime(2010, 4, 6, 14, 6, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b9a25b2d3cfa66c8700087ac30d4ac411b714ad0', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'cec1f680401f650fbc1bfe2c96cace2da7543e13', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '75f62625c7b8d71985e142bf9117ad051f938ea3', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '6c4c12380fc806012d09708216bee25ae5185981', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'cdb60b277d45c666120ca2001ed8e2220b58505b', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ebd04168295f84fce082d93b91d3762cde33f555', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a1aab5b3212515007c61e61438102773ce74557c', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'dcb8f33b11378829997cbaf6589b84b48e3cae7c', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '47b27551cb5a050cac9dc54001c88f7e882b724e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '89efcd3891755126eb1cb35852ea83b95cf78a8c', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a595e69f3e65dd80cccaff2e5d8fd22429d7df78', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'f394e7226c84bb7508a6edfef4a10ed3bd5b9366', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'e525e41517df3ebfa824a6c412065a3e75bc0a58', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '9e22681dbca9873b6f39788787e84366cbad4761', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'eaf68876a81f0263717956d96516abb82b996640', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ded60c016e3b1f60bb9c6bbe4c8f55bdc9a62f6e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'c18c7cd5db5ad5862030c36fccc1be18f29ae69e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '4ed048385511fa6ddcc9be07f60bf9b43f86a6ad', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'd288e87ce1c53107c769d3b7ebcf249915900b65', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '4e49616720feb27bf4609279e5e8d05968be9864', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Cédric Bouysset,27850535,cedric@bouysset.net,User,,18,,33,91
460264142,Add SMARTS selection,"Part of #2468 
Depends on #2775 

Changes made in this Pull Request:
 - Adds atom selection based on SMARTS queries: `u.select_atoms(""[C;R;!a]"", smarts=True)`

An example with Proline:
![image](https://user-images.githubusercontent.com/27850535/89052134-8bd69c00-d355-11ea-8428-78e3cba388cf.png)

PR Checklist
------------
 - [ ] Tests?
 - [ ] Docs?
 - [ ] CHANGELOG updated?
 - [x] Issue raised/referenced?

@richardjgowers @IAlibay @fiona-naughton 
",True,2883,https://api.github.com/repos/MDAnalysis/mdanalysis/pulls/2883,https://github.com/MDAnalysis/mdanalysis/pull/2883,closed,95,2,4,11,9,14,3,2,"[{'name': 'enhancement'}, {'name': 'Component-Selections'}, {'name': 'GSoC'}]",2020-07-31 15:46:57+00:00,2020-08-29 02:36:09+00:00,2458152.0,"28 days, 10:49:12","[{'comment_id': 463759808, 'comment_body': 'Might be nice to try and cache this in Topology.', 'comment_created': datetime.datetime(2020, 7, 31, 18, 15, 15, tzinfo=datetime.timezone.utc), 'commenter': 'richardjgowers', 'type': 'User'}, {'comment_id': 463760096, 'comment_body': 'Can we not predict what idx RDKit will assign? Ie do the atoms sometimes get reordered?', 'comment_created': datetime.datetime(2020, 7, 31, 18, 15, 50, tzinfo=datetime.timezone.utc), 'commenter': 'richardjgowers', 'type': 'User'}, {'comment_id': 463770243, 'comment_body': 'Is it simpler to enforce no white space allowed in the pattern?', 'comment_created': datetime.datetime(2020, 7, 31, 18, 38, 37, tzinfo=datetime.timezone.utc), 'commenter': 'richardjgowers', 'type': 'User'}, {'comment_id': 464490059, 'comment_body': ""The mol (topology, not coordinates) is already cached in the converter so that we don't need to rebuild it for every frame of a trajectory:\r\nhttps://github.com/cbouy/mdanalysis/blob/rdkit-converter/package/MDAnalysis/coordinates/RDKit.py#L253-L264"", 'comment_created': datetime.datetime(2020, 8, 3, 15, 31, 7, tzinfo=datetime.timezone.utc), 'commenter': 'cbouy', 'type': 'User'}, {'comment_id': 464491859, 'comment_body': 'They get reordered when using reactions to ""standardize"" some functional groups like nitro, sulfone...etc into the correct form. I could also force reordering atoms at the end of the conversion but that requires building a new molecule again I think.', 'comment_created': datetime.datetime(2020, 8, 3, 15, 34, 5, tzinfo=datetime.timezone.utc), 'commenter': 'cbouy', 'type': 'User'}, {'comment_id': 464493130, 'comment_body': 'White spaces are added automatically by the parser around parentheses:\r\nhttps://github.com/cbouy/mdanalysis/blob/rdkit-converter/package/MDAnalysis/core/selection.py#L1182', 'comment_created': datetime.datetime(2020, 8, 3, 15, 36, 15, tzinfo=datetime.timezone.utc), 'commenter': 'cbouy', 'type': 'User'}, {'comment_id': 470500706, 'comment_body': ""So with atom selections, there's two sets of documentation.  Somewhere there's a `.rst` file with essentially these docs duplicated but expanded a bit.  Can you find these and document `smarts` there? (Unless I'm wrong @lilyminium ?)"", 'comment_created': datetime.datetime(2020, 8, 14, 8, 58, 41, tzinfo=datetime.timezone.utc), 'commenter': 'richardjgowers', 'type': 'User'}, {'comment_id': 470933560, 'comment_body': ""Yeah there's `selections.rst` in `sphinx/documentation_pages`; redundantly, there's also a separate copy in the user guide :/ we should pick which one we like and point to it instead of having 3 versions. I think the user guide *might* be the most up-to-date one at this point?"", 'comment_created': datetime.datetime(2020, 8, 15, 3, 53, 31, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 475222805, 'comment_body': 'We probably want to document that this will only work with RDKit?', 'comment_created': datetime.datetime(2020, 8, 23, 13, 57, 3, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 475222995, 'comment_body': 'Random extra empty line?', 'comment_created': datetime.datetime(2020, 8, 23, 13, 58, 46, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 475223835, 'comment_body': ""Note: can just use f-strings here if you'd like."", 'comment_created': datetime.datetime(2020, 8, 23, 14, 6, 55, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 475224818, 'comment_body': ""Since it's core and these aren't large atomgroup returns, we probably should do a check beyond just the number of atoms, maybe an assert on a list of atom indices?"", 'comment_created': datetime.datetime(2020, 8, 23, 14, 16, 24, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 476018209, 'comment_body': ""I might be missing something, but why catch the extra ')' when it's at `tokens[1]` rather than when it's at `tokens[0]` and breaking then? It'd save needing this separate pop/append here"", 'comment_created': datetime.datetime(2020, 8, 25, 0, 57, 4, tzinfo=datetime.timezone.utc), 'commenter': 'fiona-naughton', 'type': 'User'}, {'comment_id': 477445178, 'comment_body': ""you're right my bad!"", 'comment_created': datetime.datetime(2020, 8, 26, 16, 50, 25, tzinfo=datetime.timezone.utc), 'commenter': 'cbouy', 'type': 'User'}]","[{'commit_sha': '8ef63acbc1c6bade0b00ef0836e266ce9146ca64', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ecd95e59870dba53146fe8dadcda875f50da78ad', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '517f9a5b422c96b6be1b8f847fe2a2ba71b3479b', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '51ed0590363d71f0db7cfeadd5b713f88ac639bb', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b9325124a7ee49cc9dd0b81e526cd81d04335386', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b1596b38f68a87d1d3bdff8fc29f43495472b258', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '350a99597fa41c166dc36b915955a6e4b735888d', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '4c1bbfbcc3fc05da5ae1e0cdc4f3e3e3d1a61f59', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '8fcf9d214883437907b44cb04cc610e329a4354f', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '55691558811a1091bd8ff7a1868bbde140f63d72', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '1d2bb91c088d43effbcc10f95abb5d8e246ea1f5', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Cédric Bouysset,27850535,cedric@bouysset.net,User,,18,,33,91
431259758,Universe.from_smiles guide,_Requested by @richardjgowers in https://github.com/MDAnalysis/mdanalysis/pull/2707#issuecomment-640199266_,False,69,https://api.github.com/repos/MDAnalysis/UserGuide/pulls/69,https://github.com/MDAnalysis/UserGuide/pull/69,closed,31,1,3,3,9,1,1,0,[{'name': 'next-release'}],2020-06-08 16:33:19+00:00,2021-01-05 13:32:43+00:00,18219564.0,"210 days, 20:59:24","[{'comment_id': 440100999, 'comment_body': 'Could you please show an example of actually calling `Universe.from_smiles` with the arguments that you mention? Otherwise looks good, thanks!', 'comment_created': datetime.datetime(2020, 6, 15, 11, 10, 34, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}]","[{'commit_sha': '43eb7d6ceebed715a9c440c4429532caf16d3f00', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'c335abee6d9c7ea16f76ceb633bd77149d5ea1ce', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'e9a7dcd5467eb0d131e7a681a48b1403a37a6c48', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Cédric Bouysset,27850535,cedric@bouysset.net,User,,18,,33,91

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
33389183,mdanalysis,MDAnalysis/mdanalysis,Python,643,1275,42,234,7064,485,59,50,"[{'id': 1535963186, 'number': 4305, 'closed': None, 'created': datetime.datetime(2023, 9, 29, 15, 41, 40, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 1173, 'deletions': 607, 'state': 'open'}, {'id': 1281769945, 'number': 4082, 'closed': datetime.datetime(2023, 5, 26, 10, 24, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 19, 21, 38, 33, tzinfo=datetime.timezone.utc), 'time_taken': 5834762.0, 'time_delta': '67 days, 12:46:02', 'additions': 112, 'deletions': 137, 'state': 'closed'}, {'id': 650673767, 'number': 3325, 'closed': datetime.datetime(2021, 6, 4, 20, 15, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 22, 19, 14, 29, tzinfo=datetime.timezone.utc), 'time_taken': 1126860.0, 'time_delta': '13 days, 1:01:00', 'additions': 25, 'deletions': 1, 'state': 'closed'}, {'id': 650668555, 'number': 3324, 'closed': datetime.datetime(2021, 8, 18, 15, 57, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 22, 18, 31, 6, tzinfo=datetime.timezone.utc), 'time_taken': 7593967.0, 'time_delta': '87 days, 21:26:07', 'additions': 27, 'deletions': 7, 'state': 'closed'}, {'id': 533799788, 'number': 3059, 'closed': datetime.datetime(2020, 12, 8, 17, 13, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 12, 7, 16, 35, 39, tzinfo=datetime.timezone.utc), 'time_taken': 88684.0, 'time_delta': '1 day, 0:38:04', 'additions': 63, 'deletions': 38, 'state': 'closed'}, {'id': 533791770, 'number': 3058, 'closed': datetime.datetime(2020, 12, 7, 16, 31, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 12, 7, 16, 22, 54, tzinfo=datetime.timezone.utc), 'time_taken': 538.0, 'time_delta': '0:08:58', 'additions': 0, 'deletions': 0, 'state': 'closed'}, {'id': 527606983, 'number': 3044, 'closed': datetime.datetime(2022, 4, 2, 7, 33, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 11, 25, 17, 47, 51, tzinfo=datetime.timezone.utc), 'time_taken': 42558320.0, 'time_delta': '492 days, 13:45:20', 'additions': 580, 'deletions': 263, 'state': 'closed'}, {'id': 492457973, 'number': 2953, 'closed': datetime.datetime(2020, 10, 30, 19, 50, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 24, 13, 43, 36, tzinfo=datetime.timezone.utc), 'time_taken': 3132406.0, 'time_delta': '36 days, 6:06:46', 'additions': 14, 'deletions': 0, 'state': 'closed'}, {'id': 486254397, 'number': 2942, 'closed': datetime.datetime(2021, 5, 11, 10, 45, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 13, 23, 12, 30, tzinfo=datetime.timezone.utc), 'time_taken': 20691173.0, 'time_delta': '239 days, 11:32:53', 'additions': 219, 'deletions': 158, 'state': 'closed'}, {'id': 486251742, 'number': 2941, 'closed': datetime.datetime(2020, 9, 18, 0, 36, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 13, 22, 50, 18, tzinfo=datetime.timezone.utc), 'time_taken': 352001.0, 'time_delta': '4 days, 1:46:41', 'additions': 32, 'deletions': 24, 'state': 'closed'}, {'id': 476436059, 'number': 2926, 'closed': datetime.datetime(2021, 4, 23, 21, 40, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 31, 17, 36, 12, tzinfo=datetime.timezone.utc), 'time_taken': 20318672.0, 'time_delta': '235 days, 4:04:32', 'additions': 96, 'deletions': 0, 'state': 'closed'}, {'id': 468984546, 'number': 2912, 'closed': None, 'created': datetime.datetime(2020, 8, 17, 18, 3, 23, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 511, 'deletions': 0, 'state': 'open'}, {'id': 466128622, 'number': 2900, 'closed': None, 'created': datetime.datetime(2020, 8, 11, 14, 8, 25, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 469, 'deletions': 2, 'state': 'open'}, {'id': 460264142, 'number': 2883, 'closed': datetime.datetime(2020, 8, 29, 2, 36, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 31, 15, 46, 57, tzinfo=datetime.timezone.utc), 'time_taken': 2458152.0, 'time_delta': '28 days, 10:49:12', 'additions': 95, 'deletions': 2, 'state': 'closed'}, {'id': 459678278, 'number': 2882, 'closed': datetime.datetime(2021, 5, 10, 19, 11, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 30, 23, 54, 56, tzinfo=datetime.timezone.utc), 'time_taken': 24520601.0, 'time_delta': '283 days, 19:16:41', 'additions': 1136, 'deletions': 745, 'state': 'closed'}, {'id': 449594242, 'number': 2852, 'closed': datetime.datetime(2020, 7, 16, 10, 24, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 15, 16, 27, 50, tzinfo=datetime.timezone.utc), 'time_taken': 64604.0, 'time_delta': '17:56:44', 'additions': 50, 'deletions': 7, 'state': 'closed'}, {'id': 446826491, 'number': 2831, 'closed': datetime.datetime(2020, 7, 10, 23, 57, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 9, 12, 24, 34, tzinfo=datetime.timezone.utc), 'time_taken': 127951.0, 'time_delta': '1 day, 11:32:31', 'additions': 10, 'deletions': 8, 'state': 'closed'}, {'id': 440729602, 'number': 2799, 'closed': datetime.datetime(2020, 7, 30, 9, 47, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 26, 18, 33, 54, tzinfo=datetime.timezone.utc), 'time_taken': 2906020.0, 'time_delta': '33 days, 15:13:40', 'additions': 446, 'deletions': 12, 'state': 'closed'}, {'id': 437189256, 'number': 2775, 'closed': datetime.datetime(2020, 8, 21, 18, 34, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 19, 16, 20, 50, tzinfo=datetime.timezone.utc), 'time_taken': 5451243.0, 'time_delta': '63 days, 2:14:03', 'additions': 1229, 'deletions': 47, 'state': 'closed'}, {'id': 426133057, 'number': 2707, 'closed': datetime.datetime(2020, 6, 19, 15, 11, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 1, 18, 5, 31, tzinfo=datetime.timezone.utc), 'time_taken': 1544770.0, 'time_delta': '17 days, 21:06:10', 'additions': 990, 'deletions': 4, 'state': 'closed'}, {'id': 387289052, 'number': 2617, 'closed': datetime.datetime(2020, 3, 22, 17, 44, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 12, 14, 50, 45, tzinfo=datetime.timezone.utc), 'time_taken': 874424.0, 'time_delta': '10 days, 2:53:44', 'additions': 233, 'deletions': 161, 'state': 'closed'}]"
202356942,UserGuide,MDAnalysis/UserGuide,Python,31,22,13,18,249,64,8,3,"[{'id': 549042087, 'number': 130, 'closed': datetime.datetime(2021, 1, 5, 20, 22, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 5, 13, 31, 39, tzinfo=datetime.timezone.utc), 'time_taken': 24662.0, 'time_delta': '6:51:02', 'additions': 33, 'deletions': 2, 'state': 'closed'}, {'id': 431259758, 'number': 69, 'closed': datetime.datetime(2021, 1, 5, 13, 32, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 8, 16, 33, 19, tzinfo=datetime.timezone.utc), 'time_taken': 18219564.0, 'time_delta': '210 days, 20:59:24', 'additions': 31, 'deletions': 1, 'state': 'closed'}]"
