pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
422785130,[gpu] Fix octree radiusSearch,Fix issue in GPU radiusSearch() for multiple radiuses which resulted in inconsistent/incorrect output. Fixes #3583,True,4146,https://api.github.com/repos/PointCloudLibrary/pcl/pulls/4146,https://github.com/PointCloudLibrary/pcl/pull/4146,closed,48,70,1,6,7,23,3,0,"[{'name': 'module: gpu'}, {'name': 'changelog: fix'}, {'name': 'priority: gsoc'}]",2020-05-25 14:42:28+00:00,2020-08-14 11:31:00+00:00,6986912.0,"80 days, 20:48:32","[{'comment_id': 430428479, 'comment_body': 'I feel like this needs sync threads before load.', 'comment_created': datetime.datetime(2020, 5, 26, 13, 52, 5, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 430448911, 'comment_body': ""I believe the `__any_sync` primitive in line 258 will perform the syncronization here, and since we're getting the radius here using essentially the same method used to get the query below, I don't think additional synchronization is necessary. But I'm still learning about this as well so I definitely can't say for certain."", 'comment_created': datetime.datetime(2020, 5, 26, 14, 19, 22, tzinfo=datetime.timezone.utc), 'commenter': 'haritha-j', 'type': 'User'}, {'comment_id': 430508876, 'comment_body': ""> since we're getting the radius here using essentially the same method used to get the query below, I don't think additional synchronization is necessary\r\n\r\nThis assumes the original isn't buggy. Code can have bugs and still give correct behavior (usually when UB happens)\r\n\r\n> `__any_sync` primitive in line 258 will perform the syncronization here\r\n\r\n`__any_sync` isn't a sync primitive, but a test primitive. From CUDA docs:\r\n```\r\n__any_sync(unsigned mask, predicate):\r\n    Evaluate predicate for all non-exited threads in mask and return non-zero if and only if predicate evaluates to non-zero for any of them.\r\n```\r\n\r\nIf this actually resolves the issue, I'll approve this, but I feel something stinky is going on."", 'comment_created': datetime.datetime(2020, 5, 26, 15, 37, 19, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 430528399, 'comment_body': ""> __any_sync isn't a sync primitive, but a test primitive. From CUDA docs:\r\n\r\nI think when cuda 9.0 came out, they changed these primitives (like `__any` or `__ballot`) to their sync variants (`__any_sync` , `__ballot_sync`). From their guide [here](https://devblogs.nvidia.com/using-cuda-warp-level-primitives/)\r\n `All the participating threads must be synchronized for the collective operation to work correctly. Therefore, these primitives first synchronize the threads if they are not already synchronized.`\r\n\r\n"", 'comment_created': datetime.datetime(2020, 5, 26, 16, 2, 32, tzinfo=datetime.timezone.utc), 'commenter': 'haritha-j', 'type': 'User'}, {'comment_id': 430784021, 'comment_body': ""The threads **are synced** for testing the primitive. But after that any operation (not just a shared mem load/store) will unsync them. The distance isn't large from sync point, so it's a possibility the sync-load doesn't impact value (or impacts only a little since the algorithm is iterative). I'm basing my conclusions only on the details in [CUDA programming guide (§5.4.2)](https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#control-flow-instructions) and experience with CPU atomics.\r\n\r\nAgain, I'm making noise based on theory and limited knowledge."", 'comment_created': datetime.datetime(2020, 5, 27, 0, 45, 22, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 430854948, 'comment_body': ""> But after that any operation (not just a shared mem load/store) will unsync them\r\n\r\nYeah, I'm certainly not too certain about this either, my uunderstanding was that untill the threads perform certain thread specific tasks that could make them divergent, they would remain in sync (such as in listing 13 in the previous link I shared). But I haven't worked with warp level programming at all before, so I really don't have the knowledge to back that up, and might easily be making a wrong assumption."", 'comment_created': datetime.datetime(2020, 5, 27, 4, 48, 40, tzinfo=datetime.timezone.utc), 'commenter': 'haritha-j', 'type': 'User'}, {'comment_id': 430898518, 'comment_body': ""I think listing 9 is more applicable to this snippet and notice the sync there happens when all variables read out the leader's stored value.  There needs to be a sync point here before the read."", 'comment_created': datetime.datetime(2020, 5, 27, 7, 2, 54, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 431039483, 'comment_body': 'if that is the case shall we move to something like this?\r\n`                        radius = __int_as_float(__shfl_sync(0xFFFFFFFF, __float_as_int(radius), active_lane));\r\n`', 'comment_created': datetime.datetime(2020, 5, 27, 11, 13, 32, tzinfo=datetime.timezone.utc), 'commenter': 'haritha-j', 'type': 'User'}, {'comment_id': 431053445, 'comment_body': ""Bikeshedding: @haritha-j spend some time reading how to use markdown properly on GitHub.\r\nhttps://guides.github.com/features/mastering-markdown/\r\n \r\n\r\n1. What's the point of reinterpreting back and forth between `int` and `float` if you're not storing the value in the original shared memory block?\r\n2. For now I would keep writing things in `storage.per_warp_buffer[warpId]` as well, like the original implementation was doing.\r\n"", 'comment_created': datetime.datetime(2020, 5, 27, 11, 42, 24, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 431075185, 'comment_body': ""> Bikeshedding: @haritha-j spend some time reading how to use markdown properly on GitHub.\r\n\r\nwill do :)\r\n\r\n> What's the point of reinterpreting back and forth between int and float if you're not storing the value in the original shared memory block?\r\n\r\nSorry, this was because I was under the (incorrect) impression that the variable for `__shffl_sync` had to be an `unisgned_int`. I guess my previous suggestion boils down to \r\n```cpp\r\nradius = __shfl_sync(0xFFFFFFFF, radius, active_lane);\r\n```\r\n\r\nWouldn't this be a better approach than previous method of using the ``per_warp_buffer` and not being assured of synchronization?\r\n\r\nOn the original issue #3583 , @Cazadorro raises some concerns regarding this approach as well\r\n\r\n> as a way to check on the state of all warps within the current block, but with out block synchronization anywhere, I don't see how this is happening reliably. If that isn't the goal, I don't see why there needs to be a value in share memory taken put by warps, and is probably a performance concern in the first place.\r\n\r\n\r\n"", 'comment_created': datetime.datetime(2020, 5, 27, 12, 23, 6, tzinfo=datetime.timezone.utc), 'commenter': 'haritha-j', 'type': 'User'}, {'comment_id': 431083357, 'comment_body': ""> Wouldn't this be a better approach than previous method of using the ``per_warp_buffer` and not being assured of synchronization?\r\n\r\nYes and your and @Cazadorro concerns are totally valid. This section looks bug filled. "", 'comment_created': datetime.datetime(2020, 5, 27, 12, 36, 59, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 431168937, 'comment_body': ""So it needed a dive into Nvidia's memory architecture: we're using deprecated functionality of Nvidia where volatile memory was treated as a replacement for atomic, since they lacked atomic instrinsics. Since then, they've updated their drivers and language model to add `std::atomic` explicitly, and don't recommend depending on `volatile` doing the trick.\r\n\r\nOriginal impl makes sense after this fact, because I've used such tricks on low-level code before. But this creates bi-directional memory barriers on every operation and is a performance bottleneck. The proposed `__shfl_sync` is a **much** better method since it only inserts one-directional barrier."", 'comment_created': datetime.datetime(2020, 5, 27, 14, 19, 36, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 432910552, 'comment_body': 'So should I proceed with that method for just `radius` or should we also use the same method to get `query`? Or would it be better to leave it as is?', 'comment_created': datetime.datetime(2020, 5, 31, 5, 12, 11, tzinfo=datetime.timezone.utc), 'commenter': 'haritha-j', 'type': 'User'}, {'comment_id': 432927811, 'comment_body': ""> So it needed a dive into Nvidia's memory architecture: we're using deprecated functionality of Nvidia where volatile memory was treated as a replacement for atomic, since they lacked atomic instrinsics.\r\n\r\nCan you provide a source for this? The search results I'm getting even within the context of CUDA simply discuss the traditional `volatile` definition."", 'comment_created': datetime.datetime(2020, 5, 31, 9, 30, 49, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 432934369, 'comment_body': 'Found [this presentation](https://on-demand.gputechconf.com/supercomputing/2019/pdf/sc1942-the-cuda-c++-standard-library.pdf) as a digestible source. CUDA didn\'t have a ""nice"" memory model prior to 2017-2018 (not their fault. Everyone was neglecting that to some degree. Even C++11 memory model had bugs till C++17 which got retroactively fixed).\r\n\r\nTLDR: Lack of emphasis on memory models resulted in people misusing volatile as atomics, whereas atomics need memory fences (implicitly added by all good implementations like stdlib). This observation will be visible in both the presentation I linked to as well as other source material arguing for use of `std::atomic` or asm intrinsics over `volatile`.\r\n\r\n@haritha-j Reducing the use of `volatile` would give better results and that should be the direction we take.', 'comment_created': datetime.datetime(2020, 5, 31, 10, 54, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 467017486, 'comment_body': 'const ref please', 'comment_created': datetime.datetime(2020, 8, 7, 12, 46, 27, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 467017698, 'comment_body': 'same', 'comment_created': datetime.datetime(2020, 8, 7, 12, 46, 50, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 467017982, 'comment_body': 'is this public API?', 'comment_created': datetime.datetime(2020, 8, 7, 12, 47, 27, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 467021565, 'comment_body': ""does this work? if yes, I'm I incurring in any penalty for doing so?\r\n```suggestion\r\n                    const int beg = __shfl_sync(0xFFFFFFFF, batch.octree.begs[node_idx], active_lane);\r\n                    const int end = __shfl_sync(0xFFFFFFFF, batch.octree.ends[node_idx], active_lane);\r\n```\r\n"", 'comment_created': datetime.datetime(2020, 8, 7, 12, 54, 24, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 467023558, 'comment_body': ""It's a .cu file (similar to cpp) so I'd say no"", 'comment_created': datetime.datetime(2020, 8, 7, 12, 57, 59, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 467040373, 'comment_body': 'This way it failed to run, with a bad memory reference or something like that.\r\nThats why I extracted it to a local variable, before sharing.', 'comment_created': datetime.datetime(2020, 8, 7, 13, 29, 15, tzinfo=datetime.timezone.utc), 'commenter': 'larshg', 'type': 'User'}, {'comment_id': 467040549, 'comment_body': ""It's only used internally. Also a `__device__` function cannot be public API right? Because it can only be called within a kernel?"", 'comment_created': datetime.datetime(2020, 8, 7, 13, 29, 34, tzinfo=datetime.timezone.utc), 'commenter': 'haritha-j', 'type': 'User'}, {'comment_id': 467044671, 'comment_body': ""Yeah, it gives an illegal memory access error. I think it's because `Batch` is not in the warp shared memory, it's coming from outside."", 'comment_created': datetime.datetime(2020, 8, 7, 13, 36, 29, tzinfo=datetime.timezone.utc), 'commenter': 'haritha-j', 'type': 'User'}]","[{'commit_sha': '93c73946a29f32ac7e3e6600c678bc8411c388d5', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7272c09248e653d87ac8977627f9ebf90e19e59e', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '450eee6f9e390ab061de678fa0cd1f05c5980f40', 'committer_username': 'SergioRAgostinho', 'committer_name': 'Sérgio Agostinho', 'committer_email': None, 'commit_date': datetime.datetime(2012, 5, 5, 18, 15, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c1d65c1004d44f8650a07a339e7fcd5071a8259', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b0b43363cec6f4fc2c0f7f8df51e88903dca9be', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed96e91b7414062560a34020428cc79464fa7a61', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}]",Haritha Jayasinghe,23292463,haritha.16@cse.mrt.ac.lk,User,,61,,7,20
463583208,[gpu] Replace volatile shared memory with shfl_sync in KNNSearch,Fix for distance calculation issue caused by the use of volatile shared memory in GPU K nearest neighbour search. ,True,4306,https://api.github.com/repos/PointCloudLibrary/pcl/pulls/4306,https://github.com/PointCloudLibrary/pcl/pull/4306,closed,79,131,1,5,7,11,3,0,"[{'name': 'module: gpu'}, {'name': 'changelog: fix'}, {'name': 'priority: gsoc'}]",2020-08-05 19:01:57+00:00,2020-08-11 09:35:38+00:00,484421.0,"5 days, 14:33:41","[{'comment_id': 466389447, 'comment_body': 'no out parameters if possible. use return variables. also remove the `__forceinline__` from here. this method/function is huge.', 'comment_created': datetime.datetime(2020, 8, 6, 12, 53, 6, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 466391230, 'comment_body': ""Can we tidy up indentation in this function. it's looking slightly chaotic. run this function through clang-format.\r\n"", 'comment_created': datetime.datetime(2020, 8, 6, 12, 56, 11, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 466391985, 'comment_body': 'should `point_step` be renamed to `field_step` it seems to measuring byte spacing between x, y, and z fields.', 'comment_created': datetime.datetime(2020, 8, 6, 12, 57, 30, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 466394031, 'comment_body': 'this check is wrong. `WARP_SIZE` represents the number of bits in the mask. `sizeof` gives you the number of **bytes**. you also need an error message here explaining the user what is wrong if the static_assert is violated.\r\n\r\n```suggestion\r\n            static_assert(KernelPolicy::WARP_SIZE <= 8*sizeof(unsigned int));\r\n```\r\n', 'comment_created': datetime.datetime(2020, 8, 6, 13, 0, 52, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 466395226, 'comment_body': 'const', 'comment_created': datetime.datetime(2020, 8, 6, 13, 2, 56, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 466395737, 'comment_body': 'no need for this temp.', 'comment_created': datetime.datetime(2020, 8, 6, 13, 3, 49, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 466395916, 'comment_body': 'const (in case it stops being an out parameter)', 'comment_created': datetime.datetime(2020, 8, 6, 13, 4, 4, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 466399315, 'comment_body': '```suggestion\r\n\t\t\treturn std::make_pair(index, dist);\r\n```', 'comment_created': datetime.datetime(2020, 8, 6, 13, 9, 33, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 468123031, 'comment_body': 'The static_assert without a string literal, requires c++17 in VS at least.\r\nSee: https://docs.microsoft.com/en-us/cpp/cpp/static-assert?view=vs-2019', 'comment_created': datetime.datetime(2020, 8, 10, 19, 18, 2, tzinfo=datetime.timezone.utc), 'commenter': 'larshg', 'type': 'User'}, {'comment_id': 468151132, 'comment_body': ""Hmm.. makes me wonder why didn't CI complain."", 'comment_created': datetime.datetime(2020, 8, 10, 20, 5, 45, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 468321503, 'comment_body': 'We only have a linux GPU build :-)\r\n\r\nSo could be a gcc/clang vs cl compiler difference.\r\n\r\nEdit: hm, but this should be build by nvcc... which is a clang variant right?\r\nMight be a visual studio complaint, but not an actual compile error. Ill retest again.', 'comment_created': datetime.datetime(2020, 8, 11, 4, 37, 35, tzinfo=datetime.timezone.utc), 'commenter': 'larshg', 'type': 'User'}]","[{'commit_sha': '49b80de604df8adac62cced748cbd0fe3fb2c188', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b0ff2df0a61c5863c65a041466f2da26324f2224', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '33a862295c45f9ec59abfdadeb65dfcb0e10ebae', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf22852e46b555fdb50ee36333b4ab28378c0b0e', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66fa90b18bbbbc021fb1b01bfc9246560845a30d', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}]",Haritha Jayasinghe,23292463,haritha.16@cse.mrt.ac.lk,User,,61,,7,20
465164905,[gpu] Replace volatile shared memory with shfl_sync in ApproxNearestSearch,"Very similar to changes in #4306. This PR is built on top of #4294 so only the final commit needs to be reviewed.

The `NearestWarpKernel()` function is the exact same function from #4306, will make it common once it's merged. This function returns the distance which is currently discarded, but will be used when the API is modified to return distances as well.",False,4313,https://api.github.com/repos/PointCloudLibrary/pcl/pulls/4313,https://github.com/PointCloudLibrary/pcl/pull/4313,closed,342,309,5,12,1,0,2,0,"[{'name': 'module: gpu'}, {'name': 'priority: gsoc'}]",2020-08-09 15:22:20+00:00,2020-08-18 16:43:20+00:00,782460.0,"9 days, 1:21:00",[],"[{'commit_sha': '2c1af3cae916c8c77ee151aad89e42d53bd667bf', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70d04c3bd73504c46e932c0374e2b7ebbe207f39', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e744b600fa02749ed0e0f0bb484ee9237b0c6ac', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dfe65115fda337861adfb6c57b1925e52dfe8abf', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2fcb1aca0dd6ce5e0a37426d474548a9ea4373d', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '663cae80331a6f2317e65de2fa4d84646644d4e6', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b006584f900632942d4a892725b9a25082d919d', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '922a2630fefce3a3f9cb046d33755e5459b18192', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '865f81527d87bd567adcf5fa5a849295361952aa', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d184e96813c704310cfa4dde1ed2692c24a80ea', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1cf5e6aa2ce7a269967344c52e62dd82e429f3b0', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b4b95ab28b4e7223a5bcf011ff846918d07c8b6a', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}]",Haritha Jayasinghe,23292463,haritha.16@cse.mrt.ac.lk,User,,61,,7,20
457384000,[gpu] Add new traversal mechanism for gpuApproxNearestSearch & modify tests,,True,4294,https://api.github.com/repos/PointCloudLibrary/pcl/pulls/4294,https://github.com/PointCloudLibrary/pcl/pull/4294,closed,440,440,5,17,2,71,2,0,"[{'name': 'module: gpu'}, {'name': 'priority: gsoc'}]",2020-07-27 20:26:02+00:00,2020-08-19 09:17:16+00:00,1947074.0,"22 days, 12:51:14","[{'comment_id': 461411260, 'comment_body': ""Just for confirmation: These tests don't run on the CI, do they?"", 'comment_created': datetime.datetime(2020, 7, 28, 8, 32, 54, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 461416301, 'comment_body': ""Unfortunately no, GPU CI is just checking if the GPU module builds right? It's not capable of actually running these."", 'comment_created': datetime.datetime(2020, 7, 28, 8, 41, 24, tzinfo=datetime.timezone.utc), 'commenter': 'haritha-j', 'type': 'User'}, {'comment_id': 461459703, 'comment_body': ""I don't even think the tests are compiled either. Only the core library modules."", 'comment_created': datetime.datetime(2020, 7, 28, 9, 50, 24, tzinfo=datetime.timezone.utc), 'commenter': 'larshg', 'type': 'User'}, {'comment_id': 461585498, 'comment_body': ""Ah yeah, I meant that. It doesn't even compile these."", 'comment_created': datetime.datetime(2020, 7, 28, 13, 37, 19, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 462404880, 'comment_body': '```cpp\r\nuint3 closest;\r\n```\r\neverything should be unsigned here.\r\n', 'comment_created': datetime.datetime(2020, 7, 29, 15, 51, 31, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 462405445, 'comment_body': '1. `query` should be passed as a const reference. \r\n2. `level` is an unsigned concept. it is also const in this function.\r\n3. `mask` should be restricted to an 8 bit type, I have preference for an unsigned type.\r\n4. `minp` and `maxp` should be passed as a const reference.\r\n5. `x`, `y` and `z` can be packed into a single `uint3` type.\r\n\r\nRename to nearestVoxel', 'comment_created': datetime.datetime(2020, 7, 29, 15, 52, 20, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 462414638, 'comment_body': 'unsigned.', 'comment_created': datetime.datetime(2020, 7, 29, 16, 5, 10, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 462416005, 'comment_body': ""switch to uint3  and make use of `make_uint3` to initialize; mark the variable const.\r\nor better just add this directly to the expression group below since they're not used anywhere else."", 'comment_created': datetime.datetime(2020, 7, 29, 16, 7, 20, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 462416385, 'comment_body': ""same comment here. Use a left bit shif instead of multiplying here. It makes it semantically more evident that you're interested in moving everything one bit left."", 'comment_created': datetime.datetime(2020, 7, 29, 16, 7, 55, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 462418002, 'comment_body': 'why do you need this copy?', 'comment_created': datetime.datetime(2020, 7, 29, 16, 10, 9, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 462421452, 'comment_body': 'pre compute \r\n```\r\n (2 * 1<<(level + 1))\r\n```\r\nand store it somewhere.', 'comment_created': datetime.datetime(2020, 7, 29, 16, 15, 23, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 462422459, 'comment_body': 'make_float3', 'comment_created': datetime.datetime(2020, 7, 29, 16, 16, 48, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 462428799, 'comment_body': 'unsigned', 'comment_created': datetime.datetime(2020, 7, 29, 16, 26, 45, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 462429031, 'comment_body': 'use a while(true)', 'comment_created': datetime.datetime(2020, 7, 29, 16, 27, 9, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 462430189, 'comment_body': 'const', 'comment_created': datetime.datetime(2020, 7, 29, 16, 29, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 462432389, 'comment_body': '```suggestion\r\n        if(!mask)  // leaf\r\n```\r\n\r\nor \r\n\r\n```suggestion\r\n        if(mask != 0)  // leaf\r\n```\r\n', 'comment_created': datetime.datetime(2020, 7, 29, 16, 32, 22, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 462452697, 'comment_body': 'assert that the mask is not 0.', 'comment_created': datetime.datetime(2020, 7, 29, 17, 6, 6, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 462469773, 'comment_body': ""You're not making use of this outside this function."", 'comment_created': datetime.datetime(2020, 7, 29, 17, 34, 27, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 462904356, 'comment_body': ""Since I've passed `x,y,z` by reference, these are updated in each traversal step, and the updated values are used in the next traversal step. They're only unused at the last iteration of the traversal."", 'comment_created': datetime.datetime(2020, 7, 30, 10, 31, 28, tzinfo=datetime.timezone.utc), 'commenter': 'haritha-j', 'type': 'User'}, {'comment_id': 462941268, 'comment_body': 'I added this because `query` is of type `PointType` in the sync gpu function (its type is `float3` in the async gpu function though). I could change this to \r\n```cpp\r\n float3 query_point = make_float3(query.x, query.y, query.z);\r\n```', 'comment_created': datetime.datetime(2020, 7, 30, 11, 50, 3, tzinfo=datetime.timezone.utc), 'commenter': 'haritha-j', 'type': 'User'}, {'comment_id': 462963677, 'comment_body': 'I\'ve checked and `PointType` is represented as `float4`. I would suggest to either: a) set `query` in `nearestVoxelTraversal` also as a `PointType`, or b) alternatively try to type-pun to be interpreted as `float3` using memcpy. With some luck, the compiler figures this out and prevents the copy. \r\nhttps://en.cppreference.com/w/cpp/string/byte/memcpy\r\n\r\nOption b) sounds potentially prone to  ""hard to track bugs"" in the future, in case we try to support double precision in the future.', 'comment_created': datetime.datetime(2020, 7, 30, 12, 35, 14, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 463929184, 'comment_body': 'use `make_uint3` so that you can declare `child` constant.', 'comment_created': datetime.datetime(2020, 8, 1, 6, 19, 42, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 463929211, 'comment_body': 'same comment here', 'comment_created': datetime.datetime(2020, 8, 1, 6, 20, 4, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 463929904, 'comment_body': ""Don't kill me here,  but I though about simply returning a `std::pair` from the function\r\n```cpp\r\nauto nearestVoxel(...)\r\n{\r\n  return std::pair<uint3, std::uint8_t>(closest, 1 << closest_index); // I'm not using make_pair because I don't believe the types would be properly deduced for std::uint8_t\r\n}\r\n```\r\n\r\nyou can then collect your results with \r\n```cpp\r\nstd::tie(index, mask_pos) = nearestVoxel()\r\n```\r\n\r\nwhat do you think @larshg and @haritha-j "", 'comment_created': datetime.datetime(2020, 8, 1, 6, 28, 41, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 463930111, 'comment_body': '```suggestion\r\n        return ChildNode(closest, (1<<closest_index));\r\n```', 'comment_created': datetime.datetime(2020, 8, 1, 6, 31, 27, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 463930261, 'comment_body': ""With the current use you're giving to the variable, it's better if you simply call it `index` like you had before."", 'comment_created': datetime.datetime(2020, 8, 1, 6, 33, 46, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 463930464, 'comment_body': ""If you're going to use both `true` and `false` branches of this if statement, it's not really worth to negate `voxel_traversal`. Just switch the contents of the if and else branches."", 'comment_created': datetime.datetime(2020, 8, 1, 6, 36, 9, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 463930564, 'comment_body': 'apply const to your vars', 'comment_created': datetime.datetime(2020, 8, 1, 6, 37, 43, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 463930709, 'comment_body': 'Does simply calling work?\r\n```cpp\r\nreturn uint3(compactBits(code, 0),  compactBits(code, 1),  compactBits(code, 2));\r\n```', 'comment_created': datetime.datetime(2020, 8, 1, 6, 39, 33, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 463930837, 'comment_body': 'Note to self: just discovered that `__global__` functions are required to have a void return type.', 'comment_created': datetime.datetime(2020, 8, 1, 6, 40, 41, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 463932527, 'comment_body': '@haritha-j this test needs to be added to the build process. Move the file from here to the normal tests folder and add the necessary cmake logic to make it build.', 'comment_created': datetime.datetime(2020, 8, 1, 7, 2, 46, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 463932610, 'comment_body': 'You need to add a comment explaining why picked these values, especially the last two ones.\r\nadd const', 'comment_created': datetime.datetime(2020, 8, 1, 7, 4, 10, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 463987283, 'comment_body': 'ah. That seems way simpler. And the way to go IMO.', 'comment_created': datetime.datetime(2020, 8, 1, 18, 25, 26, tzinfo=datetime.timezone.utc), 'commenter': 'haritha-j', 'type': 'User'}, {'comment_id': 466009784, 'comment_body': ""This method looks like a copy of the other one in octree_host.cu. If I'm correct in my assessment, we should try to make sure that they're actually using the same function. I'm suggesting this because the code really looks the same. "", 'comment_created': datetime.datetime(2020, 8, 5, 21, 18, 5, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 466010756, 'comment_body': 'this one is also the same as the other method in octree_host. we should not keep  separate functions which do exactly the same thing.', 'comment_created': datetime.datetime(2020, 8, 5, 21, 20, 8, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 466013623, 'comment_body': ""I'm no gonna review this function further because the comments are exactly similar to the other one you already modified."", 'comment_created': datetime.datetime(2020, 8, 5, 21, 26, 9, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 466013775, 'comment_body': 'Same comment with respect to reviewing this.', 'comment_created': datetime.datetime(2020, 8, 5, 21, 26, 30, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 466014457, 'comment_body': 'Note to self: this method is declared in private scope.', 'comment_created': datetime.datetime(2020, 8, 5, 21, 27, 56, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 466014853, 'comment_body': 'If the argument is const, mark it const.', 'comment_created': datetime.datetime(2020, 8, 5, 21, 28, 52, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 466015026, 'comment_body': 'can be marked const.', 'comment_created': datetime.datetime(2020, 8, 5, 21, 29, 15, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 466016857, 'comment_body': ""can this be interpreted as a width? isn't it more like a width scaling factor?"", 'comment_created': datetime.datetime(2020, 8, 5, 21, 33, 21, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 466018297, 'comment_body': ""Although I understand why you put this here, to avoid recomputing things over and over for each loop, there's a strong chance this will be optimized, so you can keep move this variable in a more reduced scope.\r\n\r\nBut let's try in compiler explorer and see what happens."", 'comment_created': datetime.datetime(2020, 8, 5, 21, 36, 28, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 466022633, 'comment_body': 'https://godbolt.org/z/rchGq7\r\n\r\nthe functions produce the same assembly because of the constness of the variables involved. ', 'comment_created': datetime.datetime(2020, 8, 5, 21, 46, 13, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 466187514, 'comment_body': 'Resolved with #3965 ', 'comment_created': datetime.datetime(2020, 8, 6, 7, 1, 56, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 466191445, 'comment_body': 'mark as const.', 'comment_created': datetime.datetime(2020, 8, 6, 7, 10, 27, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 466192255, 'comment_body': ""```suggestion\r\n                closest = child;\r\n```\r\n\r\nThey're both `uint3`. You can assign them directly."", 'comment_created': datetime.datetime(2020, 8, 6, 7, 12, 8, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 466193218, 'comment_body': 'Are you required to initialize this? The value is being unconditionally set in line 140 and is not being read anywhere.', 'comment_created': datetime.datetime(2020, 8, 6, 7, 14, 6, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 466229288, 'comment_body': '```diff\r\ndiff --git a/test/gpu/octree/test_approx_nearest.cpp b/test/gpu/octree/test_approx_nearest.cpp\r\nindex c4b0caea9..e866c58c6 100644\r\n--- a/test/gpu/octree/test_approx_nearest.cpp\r\n+++ b/test/gpu/octree/test_approx_nearest.cpp\r\n@@ -1,171 +1,128 @@\r\n /*\r\n- * Software License Agreement (BSD License)\r\n+ * SPDX-License-Identifier: BSD-3-Clause\r\n  *\r\n- *  Copyright (c) 2011, Willow Garage, Inc.\r\n- *  All rights reserved.\r\n+ *  Point Cloud Library (PCL) - www.pointclouds.org\r\n+ *  Copyright (c) 2020-, Open Perception\r\n  *\r\n- *  Redistribution and use in source and binary forms, with or without\r\n- *  modification, are permitted provided that the following conditions\r\n- *  are met:\r\n- *\r\n- *   * Redistributions of source code must retain the above copyright\r\n- *     notice, this list of conditions and the following disclaimer.\r\n- *   * Redistributions in binary form must reproduce the above\r\n- *     copyright notice, this list of conditions and the following\r\n- *     disclaimer in the documentation and/or other materials provided\r\n- *     with the distribution.\r\n- *   * Neither the name of Willow Garage, Inc. nor the names of its\r\n- *     contributors may be used to endorse or promote products derived\r\n- *     from this software without specific prior written permission.\r\n- *\r\n- *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\r\n- *  ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\r\n- *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS\r\n- *  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\r\n- *  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,\r\n- *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,\r\n- *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\r\n- *  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\r\n- *  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\r\n- *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN\r\n- *  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n- *  POSSIBILITY OF SUCH DAMAGE.\r\n- *\r\n- *  Author: Anatoly Baskeheev, Itseez Ltd, (myname.mysurname@mycompany.com)\r\n+ *  All rights reserved\r\n  */\r\n \r\n-#if defined _MSC_VER\r\n-    #pragma warning (disable : 4996 4530)\r\n-#endif\r\n+#include <pcl/gpu/containers/device_array.h>\r\n+#include <pcl/gpu/octree/octree.hpp>\r\n+#include <pcl/octree/octree_search.h>\r\n+#include <pcl/point_cloud.h>\r\n \r\n #include <gtest/gtest.h>\r\n \r\n-#include <iostream>\r\n-#include <fstream>\r\n #include <algorithm>\r\n+#include <fstream>\r\n+#include <iostream>\r\n \r\n-#if defined _MSC_VER\r\n-    #pragma warning (disable: 4521)\r\n-#endif\r\n-#include <pcl/point_cloud.h>\r\n-#include <pcl/octree/octree_search.h>\r\n-#if defined _MSC_VER\r\n-    #pragma warning (default: 4521)\r\n-#endif\r\n-\r\n-#include <pcl/gpu/octree/octree.hpp>\r\n-#include <pcl/gpu/containers/device_array.h>\r\n-\r\n-using namespace pcl::gpu;\r\n-\r\n-//TEST(PCL_OctreeGPU, DISABLED_approxNearesSearch)\r\n TEST(PCL_OctreeGPU, approxNearesSearch)\r\n {\r\n-    //generate custom pointcloud\r\n-    pcl::PointCloud<pcl::PointXYZ>::Ptr cloud(new pcl::PointCloud<pcl::PointXYZ>);\r\n-\r\n-    // Fill in cloud data\r\n-    const pcl::index_t point_size = 10000;\r\n-    cloud->width    = point_size;\r\n-    cloud->height   = 1;\r\n-    cloud->is_dense = false;\r\n-    cloud->points.resize (cloud->width * cloud->height);\r\n-\r\n-    /*\r\n-    //the test points create an octree with bounds (-1, -1, -1) and (1, 1, 1).\r\n-    ------------------------------------\r\n-    |                |                 |\r\n-    |                |                 |\r\n-    |                |                 |\r\n-    |                |                 |\r\n-    |                |                 |\r\n-    |----------------------------------|\r\n-    | x     | q      |                 |\r\n-    |       |        |                 |\r\n-    |-------|--------|                 |\r\n-    |       | y      |                 |\r\n-    |       |        |                 |\r\n-    ------------------------------------\r\n-    the final two point are positioned such that point \'x\' is father from query point \'q\' than \'y\',\r\n-    but the voxel containing \'x\' is closer to  \'q\' than the voxel containing \'y\'\r\n-    */\r\n-    const float x_cords[point_size] = {-1, -1, -1, 1, -1, 1, 1, 1, -0.9, -0.4};\r\n-    const float y_cords[point_size] = {-1, -1, 1, -1, 1, -1, 1, 1, -0.2, -0.6};\r\n-    const float z_cords[point_size] = {-1, 1, -1, -1, 1, 1, -1, 1, -0.75, -0.75};\r\n-\r\n-    for (std::size_t i = 0; i < cloud->size (); ++i)\r\n-    {\r\n-        (*cloud)[i].x = x_cords[i%10];\r\n-        (*cloud)[i].y = y_cords[i%10];\r\n-        (*cloud)[i].z = z_cords[i%10];\r\n-    }\r\n-\r\n-    std::vector<pcl::PointXYZ> queries;\r\n-    //While the GPU implementation has a fixed depth of 10 levels, octree depth in the CPU implementation can vary based on\r\n-    //the leaf size set by the user, which can affect the results. Therefore results would only tally if depths match.\r\n-    queries.push_back(pcl::PointXYZ(-0.4, -0.2, -0.75));     //should be different across CPU and GPU if different traversal methods are used\r\n-    queries.push_back(pcl::PointXYZ(-0.6, -0.2, -0.75));     //should be same across CPU and GPU\r\n-    queries.push_back(pcl::PointXYZ(1.1, 1.1, 1.1));         //out of range query\r\n-\r\n-    //prepare device cloud\r\n-    pcl::gpu::Octree::PointCloud cloud_device;\r\n-    cloud_device.upload(cloud->points);\r\n-\r\n-    //gpu build\r\n-    pcl::gpu::Octree octree_device;\r\n-    octree_device.setCloud(cloud_device);\r\n-    octree_device.build();\r\n-\r\n-    //build host octree\r\n-    float host_octree_resolution = 0.05;\r\n-    pcl::octree::OctreePointCloudSearch<pcl::PointXYZ> octree_host(host_octree_resolution);\r\n-    octree_host.setInputCloud (cloud);\r\n-    octree_host.addPointsFromInputCloud();\r\n-\r\n-    //upload queries\r\n-    pcl::gpu::Octree::Queries queries_device;\r\n-    queries_device.upload(queries);\r\n-    //pcl::gpu::Octree::ResultSqrDists distances_device(queries.size());\r\n-\r\n-    //prepare output buffers on device\r\n-    pcl::gpu::NeighborIndices result_device(queries.size(), 1);\r\n-    std::vector<int> result_host_pcl(queries.size());\r\n-    std::vector<int> result_host_gpu(queries.size());\r\n-    std::vector<float> dists_pcl(queries.size());\r\n-    std::vector<float> dists_gpu(queries.size());\r\n-\r\n-    //search GPU shared\r\n-    octree_device.approxNearestSearch(queries_device, result_device);\r\n-    std::vector<int> downloaded;\r\n-    std::vector<float>distances;\r\n-    result_device.data.download(downloaded);\r\n-    //distances_device.download(dists_gpu_direct);\r\n-\r\n-    for(size_t i = 0; i < queries.size(); ++i)\r\n-    {\r\n-        octree_host.approxNearestSearch(queries[i], result_host_pcl[i], dists_pcl[i]);\r\n-        octree_device.approxNearestSearchHost(queries[i], result_host_gpu[i], dists_gpu[i]);\r\n-    }\r\n-\r\n-    ASSERT_EQ ((downloaded == result_host_gpu), true);\r\n-\r\n-    //find inconsistencies with gpu and cpu cuda impementation\r\n-    //int count_gpu_better = 0;\r\n-    //int count_pcl_better = 0;\r\n-    //int count_different = 0;\r\n-    for(size_t i = 0; i < queries.size(); ++i)\r\n-    {\r\n-        ASSERT_EQ ((dists_pcl[i] == dists_gpu[i]), true);\r\n-    }\r\n \r\n+  /*\r\n+  the test points create an octree with bounds (-1, -1, -1) and (1, 1, 1).\r\n+  point q, represents a query point\r\n+  ------------------------------------\r\n+  |                |                 |\r\n+  |                |                 |\r\n+  |                |                 |\r\n+  |                |                 |\r\n+  |                |                 |\r\n+  |----------------------------------|\r\n+  | x     | q      |                 |\r\n+  |       |        |                 |\r\n+  |-------|--------|                 |\r\n+  |       | y      |                 |\r\n+  |       |        |                 |\r\n+  ------------------------------------\r\n+  the final two point are positioned such that point \'x\' is father from query point \'q\'\r\n+  than \'y\', but the voxel containing \'x\' is closer to  \'q\' than the voxel containing \'y\'\r\n+  */\r\n+\r\n+  // std::array requires the explicity call to pcl::PointXYZ\'s ctor\r\n+  const std::array<pcl::PointXYZ, 10> coords{\r\n+      pcl::PointXYZ{-1.f, -1.f, -1.f},\r\n+      pcl::PointXYZ{-1.f, -1.f, 1.f},\r\n+      pcl::PointXYZ{-1.f, 1.f, -1.f},\r\n+      pcl::PointXYZ{-1.f, 1.f, 1.f},\r\n+      pcl::PointXYZ{1.f, -1.f, -1.f},\r\n+      pcl::PointXYZ{1.f, -1.f, 1.f},\r\n+      pcl::PointXYZ{1.f, 1.f, -1.f},\r\n+      pcl::PointXYZ{1.f, 1.f, 1.f},\r\n+      pcl::PointXYZ{-0.9f, -0.2f, -0.75f},\r\n+      pcl::PointXYZ{-0.4f, -0.6f, -0.75f},\r\n+  };\r\n+\r\n+  // While the GPU implementation has a fixed depth of 10 levels, octree depth in the\r\n+  // CPU implementation can vary based on the leaf size set by the user, which can\r\n+  // affect the results. Therefore results would only tally if depths match. generate\r\n+  // custom pointcloud\r\n+  constexpr pcl::index_t point_size = 1000 * coords.size();\r\n+  auto cloud = pcl::make_shared<pcl::PointCloud<pcl::PointXYZ>>(point_size, 1);\r\n+\r\n+  // copy chunks of 10 points at the same time\r\n+  for (auto it = cloud->begin(); it != cloud->cend(); it += coords.size())\r\n+    std::copy(coords.cbegin(), coords.cend(), it);\r\n+\r\n+  // std::vector doesn\'t\r\n+  const std::vector<pcl::PointXYZ> queries = {\r\n+      {-0.4, -0.2, -0.75}, // should be different across CPU and GPU if different\r\n+                           // traversal methods are used\r\n+      {-0.6, -0.2, -0.75}, // should be same across CPU and GPU\r\n+      {1.1, 1.1, 1.1},     // out of range query\r\n+  };\r\n+\r\n+  // prepare device cloud\r\n+  pcl::gpu::Octree::PointCloud cloud_device;\r\n+  cloud_device.upload(cloud->points);\r\n+\r\n+  // gpu build\r\n+  pcl::gpu::Octree octree_device;\r\n+  octree_device.setCloud(cloud_device);\r\n+  octree_device.build();\r\n+\r\n+  // build host octree\r\n+  constexpr float host_octree_resolution = 0.05;\r\n+  pcl::octree::OctreePointCloudSearch<pcl::PointXYZ> octree_host(\r\n+      host_octree_resolution);\r\n+  octree_host.setInputCloud(cloud);\r\n+  octree_host.addPointsFromInputCloud();\r\n+\r\n+  // upload queries\r\n+  pcl::gpu::Octree::Queries queries_device;\r\n+  queries_device.upload(queries);\r\n+\r\n+  // prepare output buffers on device\r\n+  pcl::gpu::NeighborIndices result_device(queries.size(), 1);\r\n+  std::vector<int> result_host_pcl(queries.size());\r\n+  std::vector<int> result_host_gpu(queries.size());\r\n+  std::vector<float> dists_pcl(queries.size());\r\n+  std::vector<float> dists_gpu(queries.size());\r\n+\r\n+  // search GPU shared\r\n+  octree_device.approxNearestSearch(queries_device, result_device);\r\n+  std::vector<int> downloaded;\r\n+  result_device.data.download(downloaded);\r\n+\r\n+  for (size_t i = 0; i < queries.size(); ++i) {\r\n+    octree_host.approxNearestSearch(queries[i], result_host_pcl[i], dists_pcl[i]);\r\n+    octree_device.approxNearestSearchHost(queries[i], result_host_gpu[i], dists_gpu[i]);\r\n+  }\r\n+\r\n+  ASSERT_EQ(downloaded, result_host_gpu);\r\n+\r\n+  // find inconsistencies with gpu and cpu cuda impementation\r\n+  for (size_t i = 0; i < queries.size(); ++i) {\r\n+    ASSERT_EQ(dists_pcl[i], dists_gpu[i]);\r\n+    ASSERT_EQ(dists_pcl[i], dists_gpu[i]);\r\n+  }\r\n }\r\n \r\n-/* ---[ */\r\n int\r\n-main (int argc, char** argv)\r\n+main(int argc, char** argv)\r\n {\r\n-  testing::InitGoogleTest (&argc, argv);\r\n-  return (RUN_ALL_TESTS ());\r\n+  testing::InitGoogleTest(&argc, argv);\r\n+  return (RUN_ALL_TESTS());\r\n }\r\n-/* ]--- */\r\n-\r\n```', 'comment_created': datetime.datetime(2020, 8, 6, 8, 18, 53, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 467466007, 'comment_body': 'Not required, really, this was only to suprress the `maybe-uninitialized` warning.', 'comment_created': datetime.datetime(2020, 8, 8, 13, 40, 27, tzinfo=datetime.timezone.utc), 'commenter': 'haritha-j', 'type': 'User'}, {'comment_id': 467473439, 'comment_body': 'The algorithm is essenitally the same, there are a few subtle differences like the use of the `__popc()` cuda function here.', 'comment_created': datetime.datetime(2020, 8, 8, 15, 6, 21, tzinfo=datetime.timezone.utc), 'commenter': 'haritha-j', 'type': 'User'}, {'comment_id': 467726704, 'comment_body': ""the name of this variable is misleading. this variable is not storing the width of the voxel. It's storing a scale factor which will directly affect the voxels' width."", 'comment_created': datetime.datetime(2020, 8, 10, 7, 23, 5, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 467730761, 'comment_body': '`#include ""...""` is not considered a good practice. Can we queue this up for a later cleanup PR where we pass proper include directories flags to the compiler in order to enable the use of `#include <pcl/...>`.', 'comment_created': datetime.datetime(2020, 8, 10, 7, 32, 58, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 467732321, 'comment_body': ""We don't use this anymore. Just `#pragma once`."", 'comment_created': datetime.datetime(2020, 8, 10, 7, 36, 41, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 467732504, 'comment_body': 'you need to pass this file through clang-format.', 'comment_created': datetime.datetime(2020, 8, 10, 7, 37, 3, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 467741325, 'comment_body': 'Did you revise the constness of all these arguments?', 'comment_created': datetime.datetime(2020, 8, 10, 7, 57, 53, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 468339811, 'comment_body': 'Yeah that\'s true, I think i originally meant width as in ""width of the octree in voxels at current level"", but that\'s really not what `voxel_width` naturally denotes. Would `no_of_voxels` or `voxels_per_side` be better? I can\'t seem to come up with a better name  :(', 'comment_created': datetime.datetime(2020, 8, 11, 5, 46, 39, tzinfo=datetime.timezone.utc), 'commenter': 'haritha-j', 'type': 'User'}, {'comment_id': 469760033, 'comment_body': '`voxel_width_scale_factor`?', 'comment_created': datetime.datetime(2020, 8, 13, 7, 45, 52, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 470006194, 'comment_body': 'this is still pending changes.', 'comment_created': datetime.datetime(2020, 8, 13, 14, 44, 40, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 470007195, 'comment_body': 'This is a file only composed of commented code. You should not commit this.', 'comment_created': datetime.datetime(2020, 8, 13, 14, 46, 4, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 470007519, 'comment_body': 'const.', 'comment_created': datetime.datetime(2020, 8, 13, 14, 46, 34, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 470008288, 'comment_body': 'still missing the requested changes.', 'comment_created': datetime.datetime(2020, 8, 13, 14, 47, 29, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 470026036, 'comment_body': 'Use the same syntax Kunal suggested in the other PR.\r\n```suggestion\r\n  return {closest, 1 << closest_index};\r\n```', 'comment_created': datetime.datetime(2020, 8, 13, 15, 12, 4, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 470042158, 'comment_body': '```suggestion\r\n__device__ __host__ __forceinline__ int\r\ngetBitsNum(const int integer)\r\n{\r\n  return std::bitset<8*sizeof(integer)> (integer).count();\r\n}\r\n```\r\n\r\nNotice the difference in instructions generated https://godbolt.org/z/sqTMGT  (for clang it appears to be unrolling the loop)', 'comment_created': datetime.datetime(2020, 8, 13, 15, 35, 12, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 472131430, 'comment_body': ""weird indentation. there's a mix of tabs and spaces."", 'comment_created': datetime.datetime(2020, 8, 18, 12, 14, 15, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 472133901, 'comment_body': '```suggestion\r\n          static_assert(KernelPolicy::WARP_SIZE <= 8*sizeof(FULL_MASK));\r\n```\r\n\r\n`static_assert` without a message is a C++17 feature. You need to add a message in case this assert fails.', 'comment_created': datetime.datetime(2020, 8, 18, 12, 18, 46, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 472137980, 'comment_body': '`std::bitset` cannot be used inside a `__device__` function\r\n```suggestion\r\n__device__ __host__ __forceinline__ unsigned\r\ngetBitsNum(const unsigned integer)\r\n{\r\n  #ifdef __CUDA_ARCH__\r\n    return __popc(integer);\r\n  #else\r\n    return std::bitset<8*sizeof(integer)> (integer).count();  \r\n  #endif\r\n}', 'comment_created': datetime.datetime(2020, 8, 18, 12, 25, 58, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 472138816, 'comment_body': '```suggestion\r\n    node_idx = (node >> 8) + getBitsNum(mask & (mask_pos - 1));\r\n```', 'comment_created': datetime.datetime(2020, 8, 18, 12, 27, 25, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 472337219, 'comment_body': 'Is the indentation here supposed to be like this? It looks okay in my IDE but weird here?', 'comment_created': datetime.datetime(2020, 8, 18, 16, 47, 2, tzinfo=datetime.timezone.utc), 'commenter': 'haritha-j', 'type': 'User'}, {'comment_id': 472338399, 'comment_body': 'Not really. This section still has tabs. How about passing the whole file through clang-format? You touched most of the code anyway.', 'comment_created': datetime.datetime(2020, 8, 18, 16, 49, 2, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 472340210, 'comment_body': ""Oops, it isn't, fix incoming."", 'comment_created': datetime.datetime(2020, 8, 18, 16, 51, 57, tzinfo=datetime.timezone.utc), 'commenter': 'haritha-j', 'type': 'User'}, {'comment_id': 472346978, 'comment_body': ""oh okay, disregard the latest commit, didn't see your comment until now."", 'comment_created': datetime.datetime(2020, 8, 18, 17, 2, 44, tzinfo=datetime.timezone.utc), 'commenter': 'haritha-j', 'type': 'User'}]","[{'commit_sha': '2c1af3cae916c8c77ee151aad89e42d53bd667bf', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70d04c3bd73504c46e932c0374e2b7ebbe207f39', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e744b600fa02749ed0e0f0bb484ee9237b0c6ac', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dfe65115fda337861adfb6c57b1925e52dfe8abf', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2fcb1aca0dd6ce5e0a37426d474548a9ea4373d', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '663cae80331a6f2317e65de2fa4d84646644d4e6', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b006584f900632942d4a892725b9a25082d919d', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '922a2630fefce3a3f9cb046d33755e5459b18192', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '865f81527d87bd567adcf5fa5a849295361952aa', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d184e96813c704310cfa4dde1ed2692c24a80ea', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1cf5e6aa2ce7a269967344c52e62dd82e429f3b0', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b713422aa5c89404ee5f22f6331900c8c53db13c', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec979e849463eedd91146b510e56e86653daf1d2', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb49225aafbbfc98c59ca0930f6a62d1c6294753', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '21aa71bb714200b2d23a34cbba8c80b866dc3922', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39ba854e47313a24a2396a649ed24a2b354e8886', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '29a307f92751bc5cec214a2adbfd09bf0aa7e2da', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}]",Haritha Jayasinghe,23292463,haritha.16@cse.mrt.ac.lk,User,,61,,7,20
470288372,[gpu] Add square distances to sync and async radius search,"A few points I need feedback on with regards to this PR;

The easier approach for computing distances in the case where an entire node is within the radius would be to simply skip the step which skips such nodes when distances need to be found, so that every leaf is explored for such nodes. But this includes additional traversal costs, so I went with an additional simplified kernel for distance computations.


Second, In the test (so far I only added additional tests regarding distances for the first test (out of the 3)), if i attempt to test whether the distances returned by the async and sync versios are equal, the test fails for some points. But if I check whether the returned values are close (within a threshold like 0.001), then the test passes. So essentially, there seems to be very small differences between the two values. For example;

```shell
The difference between sqr_distances_batch[j] and sqr_dist_host[j] is 0.0001220703125, which exceeds 0.0001, where
sqr_distances_batch[j] evaluates to 1157.9296875,
sqr_dist_host[j] evaluates to 1157.9295654296875
```

I have no idea what causing the error in precision here.


Also, I'm not sure what the best approach is for passing the flag to indicate whether to find disntaces or not for these functions.
Ideally I want to do something similar to what I've done with the async function, where the distance flag is passed when switching from the public radiusSearch function to the internal gpu function in octree.cpp.
But if i were to follow this approach there's a lot of code duplication. Basically, i wouldnt be able to do this anymore:

```cpp
void pcl::gpu::Octree::radiusSearch(const Queries& queries, float radius, int max_results, NeighborIndices& results) const
{
    pcl::gpu::Octree::ResultSqrDists result_sqr_distances;
    radiusSearch(queries, radius, max_results, results, result_sqr_distances);
}

void pcl::gpu::Octree::radiusSearch(const Queries& queries, float radius, int max_results, NeighborIndices& results, ResultSqrDists& sqr_distances) const
{
    assert(queries.size() > 0);
    results.create(static_cast<int> (queries.size()), max_results);
    results.sizes.create(queries.size());
    sqr_distances.create(queries.size() * max_results);

    const OctreeImpl::Queries& q = (const OctreeImpl::Queries&)queries;
    static_cast<OctreeImpl*>(impl)->radiusSearch(q, radius, results, sqr_distances, true);
}
```

instead I'll have to do something like this, which increases code duplication:

```cpp
void pcl::gpu::Octree::radiusSearch(const Queries& queries, float radius, int max_results, NeighborIndices& results) const
{
    pcl::gpu::Octree::ResultSqrDists result_sqr_distances;
    assert(queries.size() > 0);
    results.create(static_cast<int> (queries.size()), max_results);
    results.sizes.create(queries.size());
    sqr_distances.create(queries.size() * max_results);

    const OctreeImpl::Queries& q = (const OctreeImpl::Queries&)queries;
    static_cast<OctreeImpl*>(impl)->radiusSearch(q, radius, results, sqr_distances, true);
}

void pcl::gpu::Octree::radiusSearch(const Queries& queries, float radius, int max_results, NeighborIndices& results, ResultSqrDists& sqr_distances) const
{
    assert(queries.size() > 0);
    results.create(static_cast<int> (queries.size()), max_results);
    results.sizes.create(queries.size());
    sqr_distances.create(queries.size() * max_results);

    const OctreeImpl::Queries& q = (const OctreeImpl::Queries&)queries;
    static_cast<OctreeImpl*>(impl)->radiusSearch(q, radius, results, sqr_distances, true);
}
```

pretty sure there's a  better (and probably obvious 😛 ) method for this that i'm missing. I just hardcoded it for now.",False,4338,https://api.github.com/repos/PointCloudLibrary/pcl/pulls/4338,https://github.com/PointCloudLibrary/pcl/pull/4338,open,359,230,6,9,5,61,4,0,"[{'name': 'needs: more work'}, {'name': 'module: gpu'}, {'name': 'status: stale'}, {'name': 'priority: gsoc'}]",2020-08-19 16:42:17+00:00,,0.0,,"[{'comment_id': 473175176, 'comment_body': ""I'm reserving memory for the out variable here, which goes against @SergioRAgostinho 's comments on #4322, I followed this approach because the existing API requires the user to allocate memory for the other out varaible (for result indices) anyway. Should I change this so that the allocation happens inside the method?"", 'comment_created': datetime.datetime(2020, 8, 19, 16, 46, 33, tzinfo=datetime.timezone.utc), 'commenter': 'haritha-j', 'type': 'User'}, {'comment_id': 473456726, 'comment_body': 'reorder to follow the function signature. sqr_distances is a param[out]', 'comment_created': datetime.datetime(2020, 8, 20, 0, 4, 58, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 473459424, 'comment_body': ""the plural of radius is radii. Hows does this work with multiple centers and radii? is it a 1-to-1 relationship i.e. there's the same amount of radii as query points? "", 'comment_created': datetime.datetime(2020, 8, 20, 0, 8, 51, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 473467335, 'comment_body': 'This is similar to lines 216-224. Use a lambda to refactor.', 'comment_created': datetime.datetime(2020, 8, 20, 0, 20, 47, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 473474663, 'comment_body': '`find_dist`should be renamed to `compute_all_distances`.', 'comment_created': datetime.datetime(2020, 8, 20, 0, 32, 6, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 473477883, 'comment_body': ""if `find_dist` is not true, you should fill `sqr_distances` with nan for the points inside this node. It's important to ensure `sqr_distances` has the same size of `out`"", 'comment_created': datetime.datetime(2020, 8, 20, 0, 37, 13, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 473482388, 'comment_body': 'This should be converted into a for loop. Notice you have an initialization value, a condition you check every time and a variable increment.', 'comment_created': datetime.datetime(2020, 8, 20, 0, 44, 23, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 473482811, 'comment_body': 'Note to self: This is black magic pointer arithmetic.', 'comment_created': datetime.datetime(2020, 8, 20, 0, 45, 5, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 473485073, 'comment_body': 'Notice that `batch` should have been populated with all required variables before invoking the function\r\n\r\n```cpp\r\n    batch.indices = indices;\r\n    batch.octree = octreeGlobal;\r\n\r\n    batch.find_dist = find_dist;\r\n    batch.max_results = results.max_elems;\r\n    batch.output = results.data;                \r\n    batch.output_sizes = results.sizes;\r\n    batch.sqr_distances = sqr_distances; \r\n\r\n    //and only then\r\n   radiusSearchEx(batch); // no need for extra arguments because everything is inside batch\r\n```\r\n  ', 'comment_created': datetime.datetime(2020, 8, 20, 0, 48, 40, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 473991773, 'comment_body': 'Yes, its a 1 to 1 relationship, and the same amount of radii is expected. (there is no check for this)\r\n\r\nI think modifying this variable name would also require modifying the name of the pre-existing function for consistency as well, which is in public API. Would that be okay? (Technically radii and radiuses are both accepted as the plural form i think :P )', 'comment_created': datetime.datetime(2020, 8, 20, 13, 46, 24, tzinfo=datetime.timezone.utc), 'commenter': 'haritha-j', 'type': 'User'}, {'comment_id': 474021136, 'comment_body': ""Wouldn't that require duplicating that code across all 3 of these radius search methods?\r\n```cpp\r\nvoid pcl::device::OctreeImpl::radiusSearch(const Queries& queries, const float radius, NeighborIndices& results, BatchResultSqrDists& sqr_distances, const bool compute_all_distances)\r\n{        \r\n    using BatchType = Batch<SharedRadius, DirectQuery>;\r\n\r\n    BatchType batch;\r\n    batch.radius = radius;\r\n    batch.queries = queries;\r\n    radiusSearchEx(batch, queries, results, sqr_distances, compute_all_distances);\r\n}\r\n\r\nvoid pcl::device::OctreeImpl::radiusSearch(const Queries& queries, const Radiuses& radiuses, NeighborIndices& results, BatchResultSqrDists& sqr_distances, const bool compute_all_distances)\r\n{\r\n    using BatchType = Batch<IndividualRadius, DirectQuery>;\r\n\r\n    BatchType batch;\r\n    batch.radiuses = radiuses;\r\n    batch.queries = queries;\r\n    radiusSearchEx(batch, queries, results, sqr_distances, compute_all_distances);\r\n}\r\n\r\nvoid pcl::device::OctreeImpl::radiusSearch(const Queries& queries, const Indices& indices, const float radius, NeighborIndices& results, BatchResultSqrDists& sqr_distances, const bool compute_all_distances)\r\n{\r\n    using BatchType = Batch<SharedRadius, IndicesQuery>;\r\n\r\n    BatchType batch;\r\n    batch.radius = radius;\r\n    \r\n    batch.queries = queries;\r\n    batch.queries_indices = indices;\r\n    batch.queries.size = indices.size();\r\n\r\n    radiusSearchEx(batch, queries, results, sqr_distances, compute_all_distances);\r\n}\r\n```\r\nI think the original intention was to move all the common operations into `radiusSearchEx()` and only use those 3 methods to handle the differences between them in terms of queries, indices and radii."", 'comment_created': datetime.datetime(2020, 8, 20, 14, 21, 54, tzinfo=datetime.timezone.utc), 'commenter': 'haritha-j', 'type': 'User'}, {'comment_id': 474094928, 'comment_body': ""> (Technically radii and radiuses are both accepted as the plural form i think :P )\r\n\r\ndidn't know. Just leave it then. "", 'comment_created': datetime.datetime(2020, 8, 20, 15, 59, 12, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 475454356, 'comment_body': ""Don't forget this one."", 'comment_created': datetime.datetime(2020, 8, 24, 9, 18, 25, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 475455120, 'comment_body': '> Yes, its a 1 to 1 relationship, and the same amount of radii is expected. (there is no check for this)\r\n\r\nCan you make the docstring reflect that? And also potential add an `assert` in the code, so that the check is there in debug mode. ', 'comment_created': datetime.datetime(2020, 8, 24, 9, 19, 44, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 475475426, 'comment_body': '```cpp\r\nconst int index = host_octree.indices[j];\r\n```\r\nis just required if `dist2 < radius * radius`, so\r\n```suggestion\r\n                const float dist2 = getSqrDistance(j);\r\n\r\n                if (dist2 < radius * radius)\r\n                {\r\n                    out.push_back(host_octree.indices[j]);\r\n                    sqr_distances.push_back(dist2);\r\n                }\r\n```', 'comment_created': datetime.datetime(2020, 8, 24, 9, 41, 26, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 475476408, 'comment_body': 'precompute and store the offset\r\n```cpp\r\nactive_query_index * batch.max_results + active_found_count\r\n```', 'comment_created': datetime.datetime(2020, 8, 24, 9, 43, 17, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 475478381, 'comment_body': 'Both branches of\r\n```cpp\r\nif(test)\r\n{\r\n  [...]\r\n}\r\nelse\r\n{\r\n  [...]\r\n}\r\n```\r\n\r\nmake use of `active_query`. declare it in the same scope as `test`.', 'comment_created': datetime.datetime(2020, 8, 24, 9, 47, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 475480119, 'comment_body': 'This should be initialized to nan, to prevent any misinterpretation of what this distance represents. ', 'comment_created': datetime.datetime(2020, 8, 24, 9, 50, 12, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 475483970, 'comment_body': 'You also need to fill `sqr_dist` with nans in case compute all distances is set to false. aka mimic the same behavior existing in the cpu counterpart', 'comment_created': datetime.datetime(2020, 8, 24, 9, 56, 55, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 475524429, 'comment_body': 'After [this](https://github.com/PointCloudLibrary/pcl/pull/4338/files#r475483970) change, `sqrt_dist` should invariably be incremented. ', 'comment_created': datetime.datetime(2020, 8, 24, 11, 9, 29, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 475570323, 'comment_body': 'if the unit tests go green.\r\n```suggestion\r\n            __device__ void squareDistancesKernel(const int beg, const float3& active_query, const int length, float* sqr_dist)\r\n            {\r\n                for (unsigned int idx = Warp::laneId(); idx < length; idx += Warp::STRIDE)\r\n                {\r\n                    const float dx = batch.points.ptr(0)[beg + idx] - active_query.x;\r\n                    const float dy = batch.points.ptr(1)[beg + idx] - active_query.y;\r\n                    const float dz = batch.points.ptr(2)[beg + idx] - active_query.z;\r\n\r\n                    sqr_dist[idx] = dx * dx + dy * dy + dz * dz;\r\n                }\r\n            }\r\n```\r\n', 'comment_created': datetime.datetime(2020, 8, 24, 12, 42, 49, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 475578945, 'comment_body': 'use `make_float4` to initialize and constify it.', 'comment_created': datetime.datetime(2020, 8, 24, 12, 54, 44, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 475595897, 'comment_body': ""> pretty sure there's a  better (and probably obvious :stuck_out_tongue:  ) method for this that i'm missing.\r\n\r\nYeah. You need to move all those allocations to `pcl::device::OctreeImpl::radiusSearchEx`, which is always called with all arguments.\r\n\r\n```cpp\r\ntemplate<typename BatchType>\r\nvoid pcl::device::OctreeImpl::radiusSearchEx(BatchType& batch, const Queries& queries, NeighborIndices& results, BatchResultSqrDists& sqr_distances, const bool compute_all_distances)\r\n{\r\n    // no longer spread in all overloads\r\n    assert(queries.size() > 0);\r\n    results.create(static_cast<int> (queries.size()), max_results);\r\n    results.sizes.create(queries.size());\r\n    sqr_distances.create(queries.size() * max_results);\r\n\r\n\r\n    batch.indices = indices;\r\n    batch.octree = octreeGlobal;\r\n\r\n    batch.compute_all_distances = compute_all_distances;\r\n    batch.max_results = results.max_elems;\r\n    batch.output = results.data;                \r\n    batch.output_sizes = results.sizes;\r\n    batch.sqr_distances = sqr_distances;\r\n\r\n    batch.points = points_sorted;\r\n    [...]\r\n```"", 'comment_created': datetime.datetime(2020, 8, 24, 13, 23, 18, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 475596572, 'comment_body': 'suffix with `_shared`, `_ind`, `_shared_ind`.', 'comment_created': datetime.datetime(2020, 8, 24, 13, 24, 23, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 475597399, 'comment_body': 'Weird spacing. C++14 no longer complains about double ""bigger than""  in templates. ', 'comment_created': datetime.datetime(2020, 8, 24, 13, 25, 45, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 475707489, 'comment_body': 'Yes please.', 'comment_created': datetime.datetime(2020, 8, 24, 15, 38, 48, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 475708039, 'comment_body': 'use semantically meaningful suffixes please.', 'comment_created': datetime.datetime(2020, 8, 24, 15, 39, 38, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 475711819, 'comment_body': ""Don't forget to add equivalent checks to the two other checks below. "", 'comment_created': datetime.datetime(2020, 8, 24, 15, 45, 26, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 476322557, 'comment_body': '`max_nn` has a default argument, so it needs to come last. Would this be acceptable?\r\n```cpp\r\n            /** \\brief Performs search of all points within given radius on CPU. It call \\a internalDownload if necessary\r\n              * \\param[in] center center of sphere\r\n              * \\param[in] radius radius of sphere\r\n              * \\param[out] sqr_distances corresponding squared distances to query point\r\n              * \\param[out] out indices of points within given sphere\r\n              * \\param[in] max_nn maximum number of results returned\r\n              */\r\n            void radiusSearchHost(const PointType& center, const float radius, std::vector<float>& sqr_distances, std::vector<int>& out, const int max_nn = INT_MAX);\r\n```', 'comment_created': datetime.datetime(2020, 8, 25, 9, 47, 28, tzinfo=datetime.timezone.utc), 'commenter': 'haritha-j', 'type': 'User'}, {'comment_id': 476339901, 'comment_body': ""That's not relevant so let me clarify. The current function lists parameters in the following order:\r\n1. center\r\n2. radius\r\n3. out\r\n4. sqr_distances\r\n5. max_nn\r\n\r\nYour docstring is using a different order, max_nn is coming before sqr_distances. The docstring should be corrected not the function signature."", 'comment_created': datetime.datetime(2020, 8, 25, 10, 18, 11, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 479135017, 'comment_body': 'use `std::ptrdiff_t` this is being used for pointer arithmetic. ', 'comment_created': datetime.datetime(2020, 8, 28, 11, 5, 25, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 479136807, 'comment_body': ""Don't you need to update sqr_dist with\r\n```cpp\r\nsqr_dist += length;\r\n```\r\nas well?"", 'comment_created': datetime.datetime(2020, 8, 28, 11, 7, 3, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 479203454, 'comment_body': ""is the int cast required? if not it's better to remove."", 'comment_created': datetime.datetime(2020, 8, 28, 12, 4, 10, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 479205741, 'comment_body': ""Be consistent with the parameter order. Notice from what you're using in lines 95-96. pick one of your choice"", 'comment_created': datetime.datetime(2020, 8, 28, 12, 6, 9, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 479251961, 'comment_body': 'You should not reserve things in this scope. You should reserve right before you need to fill it with data.', 'comment_created': datetime.datetime(2020, 8, 28, 12, 46, 27, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 479253214, 'comment_body': 'All overloads seem to do this call. Is there a deeper function which all these overloads call, where we can move this to?', 'comment_created': datetime.datetime(2020, 8, 28, 12, 47, 59, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 479266344, 'comment_body': ""This part of the file is still looking messy. I need to see what to do here. I'll let you know later."", 'comment_created': datetime.datetime(2020, 8, 28, 13, 3, 18, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 479270913, 'comment_body': ""You need to refactor this. There's a lot of code repetition. \r\nhttps://github.com/PointCloudLibrary/pcl/blob/c762664e9a4ddb08075985b1edbf1565a00777e0/test/gpu/octree/test_radius_search.cpp#L149-L263"", 'comment_created': datetime.datetime(2020, 8, 28, 13, 8, 30, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 479635274, 'comment_body': ""I'm more used to seeing\r\n1. call clear\r\n2. call reserve\r\n\r\nbut you made me read about it and now I discovered clear doesn't touch capacity, so it should make no difference.\r\n\r\nYou didn't clear the content of `sqr_distances` though. That makes a difference."", 'comment_created': datetime.datetime(2020, 8, 29, 10, 28, 5, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 479635493, 'comment_body': ""don't forget to run this file through clang format at the end."", 'comment_created': datetime.datetime(2020, 8, 29, 10, 30, 59, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 479635600, 'comment_body': ""Can we find a better name than 'test' here?"", 'comment_created': datetime.datetime(2020, 8, 29, 10, 32, 18, tzinfo=datetime.timezone.utc), 'commenter': 'larshg', 'type': 'User'}, {'comment_id': 479635605, 'comment_body': ""Shouldn't these be const as well?"", 'comment_created': datetime.datetime(2020, 8, 29, 10, 32, 20, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 479635693, 'comment_body': 'use expect instead of assert', 'comment_created': datetime.datetime(2020, 8, 29, 10, 33, 46, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 479635732, 'comment_body': '```suggestion\r\n        ASSERT_EQ (results_batch, results_host);\r\n```', 'comment_created': datetime.datetime(2020, 8, 29, 10, 34, 17, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 479635797, 'comment_body': ""What's the purpose of this test? I doesn't look deterministic at all."", 'comment_created': datetime.datetime(2020, 8, 29, 10, 35, 3, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 479636003, 'comment_body': ""You should convert this test to a fixture, with the three test cases. that way google-test does this status printing for you, instead of you being the one printing which check you're running."", 'comment_created': datetime.datetime(2020, 8, 29, 10, 37, 20, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 479636160, 'comment_body': '`thread_active`?', 'comment_created': datetime.datetime(2020, 8, 29, 10, 39, 43, tzinfo=datetime.timezone.utc), 'commenter': 'haritha-j', 'type': 'User'}, {'comment_id': 479636354, 'comment_body': ""I cant make these const because they're assigned to `result_host` and `sqr_dist_host` here, and later sorted.\r\n```cpp\r\n        std::vector<int>& results_host = host_search[i];\r\n        std::vector<float>& sqr_dist_host = host_sqr_distances[i];\r\n```"", 'comment_created': datetime.datetime(2020, 8, 29, 10, 41, 58, tzinfo=datetime.timezone.utc), 'commenter': 'haritha-j', 'type': 'User'}, {'comment_id': 479636877, 'comment_body': ""Yes it doesn't seem to prove anything concrete. It seems to be checking that the average number of points identified are over 5. This is naturally going to be dependent on the params used to initialize the input cloud."", 'comment_created': datetime.datetime(2020, 8, 29, 10, 48, 54, tzinfo=datetime.timezone.utc), 'commenter': 'haritha-j', 'type': 'User'}, {'comment_id': 479637437, 'comment_body': 'Shall I get rid of it?', 'comment_created': datetime.datetime(2020, 8, 29, 10, 55, 28, tzinfo=datetime.timezone.utc), 'commenter': 'haritha-j', 'type': 'User'}, {'comment_id': 479638029, 'comment_body': 'Im on mobile, so hard to fully grasp the ` (leaf & KernelPolicy::CHECK_FLAG` check, does this check if we are at a leaf?\r\n\r\nSo: thread_active_leaf?', 'comment_created': datetime.datetime(2020, 8, 29, 11, 3, 54, tzinfo=datetime.timezone.utc), 'commenter': 'larshg', 'type': 'User'}, {'comment_id': 479647328, 'comment_body': 'yes please', 'comment_created': datetime.datetime(2020, 8, 29, 12, 57, 46, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 479647407, 'comment_body': 'adjective before noun please. `active_thread`.', 'comment_created': datetime.datetime(2020, 8, 29, 12, 58, 52, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 479653505, 'comment_body': ""> Im on mobile, so hard to fully grasp the (leaf & KernelPolicy::CHECK_FLAG check, does this check if we are at a leaf?\r\n\r\nActually from what I gather `(leaf & KernelPolicy::CHECK_FLAG)` is checking if the leaf should be checked (i.e. whether the leaf falls entirely inside the radius, and thus its contents can be copied directly, or if its only partially in the radius, implying that its contents needs to be checked). The other part is checking whether there is an active lane. All in all it's kind of checking whether a leaf must be processed. "", 'comment_created': datetime.datetime(2020, 8, 29, 14, 10, 17, tzinfo=datetime.timezone.utc), 'commenter': 'haritha-j', 'type': 'User'}, {'comment_id': 479709689, 'comment_body': 'It appears to me you can further reduce code duplication if you move this section, in all three tests, inside `verifyResults`.', 'comment_created': datetime.datetime(2020, 8, 30, 1, 51, 11, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 479718053, 'comment_body': ""I was trying to do that initially, but ran into some issues. Specifically, before performing the host operations, I need to call ` octree_device.internalDownload();`. I'm not sure why, but I was getting some errors when performing GPU search in the tests after calling `internalDownload()` in the `setUp()`, which meant that i had to put the host search after the GPU search, which is why I put it in here to get it to work. This was when I was still experimenting with fixtures, I meant to check that properly after getting the fixtures done, but forgot to do it. I'll check that this evening. I don't think `internalDownload()` (which essentially performs a bunch of `memCpy()`s) should prevent the GPU functions from working, so I might've screwed something up in the fixtures at the time."", 'comment_created': datetime.datetime(2020, 8, 30, 3, 58, 42, tzinfo=datetime.timezone.utc), 'commenter': 'haritha-j', 'type': 'User'}, {'comment_id': 479759727, 'comment_body': 'By the way you should rebase with master to get CI running again. ', 'comment_created': datetime.datetime(2020, 8, 30, 11, 47, 43, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 481017046, 'comment_body': 'This should definitely be a boolean type.', 'comment_created': datetime.datetime(2020, 9, 1, 9, 57, 37, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 481044984, 'comment_body': '```\r\nint __any_sync(unsigned mask, int predicate);\r\n\r\n__any_sync(unsigned mask, predicate):\r\nEvaluate predicate for all non-exited threads in mask and return non-zero if and only if predicate evaluates to non-zero for any of them.\r\n```\r\n\r\nSo i guess the if, should be ```if(investigate_leaf > 0)```?', 'comment_created': datetime.datetime(2020, 9, 1, 10, 42, 44, tzinfo=datetime.timezone.utc), 'commenter': 'larshg', 'type': 'User'}, {'comment_id': 481083041, 'comment_body': 'That\'s also not correct. The explicit mention of ""non-zero"" is key. Meaning it needs to evaluate to true work with also -2 or -1. The cast from int to bool is the only thing that needs to take place.', 'comment_created': datetime.datetime(2020, 9, 1, 11, 58, 45, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 481135596, 'comment_body': ""Yeah, that's true it can be negative as well."", 'comment_created': datetime.datetime(2020, 9, 1, 13, 26, 16, tzinfo=datetime.timezone.utc), 'commenter': 'larshg', 'type': 'User'}]","[{'commit_sha': '67ef1eb201887e3a81ca40d37addd3d66723400c', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3c5da0303bac4f1ec5415b8e2c0edac3546d601', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e420942f64d80e70d8e6dbce0d7f7684488fd8a8', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15051064712a9c5f631b74499f810f484d65289c', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '325323ebd8536ea3ba0892d8ddcee112593e1dd9', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d456c3d1c3e82b759d37d59767b733e1d9c0359', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '85fad259266fc4a0502e10e076dee25240417ca5', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a46449db36ea65c5d5c4899e693867755fd05e5b', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6fd18aaaf084134055a2b5945109d5bfc09b6729', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}]",Haritha Jayasinghe,23292463,haritha.16@cse.mrt.ac.lk,User,,61,,7,20
470751929,[gpu] Add square distances to ApproxNearestSearch,"Fairly straightforward compared to the previous PR for radius search for the same purpose.

This requires the same 
```cpp
    ASSERT_NEAR(dists_gpu[i], dists_device_downloaded[i], 0.001);
```
workaround when comparing distances to those returned by the host counterpart.

Also, once this is merged the function
```cpp
  __device__ std::pair<int, float>
  NearestWarpKernel(const int beg,
                    const int field_step,
                    const int length,
                    const float3& active_query)
```
will be exactly the same across both KNN search and approx Nearest serach, and can be coalesced in another PR.",True,4340,https://api.github.com/repos/PointCloudLibrary/pcl/pulls/4340,https://github.com/PointCloudLibrary/pcl/pull/4340,closed,48,20,5,3,0,5,3,0,"[{'name': 'module: gpu'}, {'name': 'changelog: deprecation'}, {'name': 'priority: gsoc'}]",2020-08-20 08:27:35+00:00,2020-08-24 09:11:23+00:00,348228.0,"4 days, 0:43:48","[{'comment_id': 473815627, 'comment_body': ""In this test you're only comparing results between two implementations.\r\n\r\nThere should be also a check comparing against and actual numerical distance value since you are able to predict what is the closest point to your query in advance. "", 'comment_created': datetime.datetime(2020, 8, 20, 9, 34, 8, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 474004809, 'comment_body': ""Couldn't we have both?\r\nIf one doesn't want the distances, you don't have to declare a container to save the distances in, which you will be forced to, if this one is removed?"", 'comment_created': datetime.datetime(2020, 8, 20, 13, 58, 49, tzinfo=datetime.timezone.utc), 'commenter': 'larshg', 'type': 'User'}, {'comment_id': 474010280, 'comment_body': ""I don't have a strong opinion on this. On the one hand this function is more convenient for a user that doesn't want distances, and older code wouldn't need to be updated. On the other hand it's only a minor change with no significant performance hit and makes API more complex. "", 'comment_created': datetime.datetime(2020, 8, 20, 14, 6, 30, tzinfo=datetime.timezone.utc), 'commenter': 'haritha-j', 'type': 'User'}, {'comment_id': 474082484, 'comment_body': 'If a vector has a fixed-size, use an array. ', 'comment_created': datetime.datetime(2020, 8, 20, 15, 40, 38, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 474084436, 'comment_body': ""I also don't have a strong opinion here. We can go with whatever you prefer. \r\n\r\n"", 'comment_created': datetime.datetime(2020, 8, 20, 15, 43, 34, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}]","[{'commit_sha': '18b80aef9fd288c2a9a35b08ae48507517480d3a', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a30cdf51ecd5466e86f151bbf0aa3f2ef560cf3', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '693179b504d0cb42291b7f1dbe6419343a037025', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}]",Haritha Jayasinghe,23292463,haritha.16@cse.mrt.ac.lk,User,,61,,7,20
472546173,[gpu] Add gpu octree tutorial,Performance comparison hasn't been added yet.,False,4347,https://api.github.com/repos/PointCloudLibrary/pcl/pulls/4347,https://github.com/PointCloudLibrary/pcl/pull/4347,open,465,0,8,5,2,46,4,0,"[{'name': 'module: gpu'}, {'name': 'module: tutorials'}, {'name': 'status: stale'}, {'name': 'priority: gsoc'}]",2020-08-24 14:08:12+00:00,,0.0,,"[{'comment_id': 475704786, 'comment_body': '```suggestion\r\nRadius search can be conducted with a single radius for all queries or, individual radius may be specified for each query, by passing a `pcl::gpu::Octree::Radiuses` object of the same size as the queries object to the radius search method. In this tutorial we will specify individual radius for each of our ten queries.\r\n```', 'comment_created': datetime.datetime(2020, 8, 24, 15, 34, 28, tzinfo=datetime.timezone.utc), 'commenter': 'larshg', 'type': 'User'}, {'comment_id': 475713350, 'comment_body': 'I really think he meant the plural of radius here. ', 'comment_created': datetime.datetime(2020, 8, 24, 15, 47, 48, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 475714582, 'comment_body': ""this url should be relative. I'm not a sphinx pro but there are ways to refer to other documents inside the same project."", 'comment_created': datetime.datetime(2020, 8, 24, 15, 49, 44, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 475716164, 'comment_body': 'Defer the K=1 notice to its own section.', 'comment_created': datetime.datetime(2020, 8, 24, 15, 52, 5, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 475755614, 'comment_body': '```suggestion\r\ncmake_minimum_required(VERSION 3.5 FATAL_ERROR)\r\n\r\nproject(gpu_octree)\r\nfind_package(PCL 1.12 REQUIRED)\r\n\r\n# provides access cuda_add_executable\r\ninclude(FindCUDA)\r\n\r\ncuda_add_executable (gpu_octree gpu_octree.cpp)\r\ntarget_link_libraries (gpu_octree ${PCL_LIBRARIES})\r\n\r\n```', 'comment_created': datetime.datetime(2020, 8, 24, 16, 51, 31, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 475755853, 'comment_body': ""I thought it would be like:\r\n\r\nX number of queries shares the same radius\r\nor\r\nEach query have exactly one radius each\r\n\r\nThat's why I would think it should be a single radius (ie. individual radius, for each query) - even though you are supplying multiple radii (the array), but one for each individual query.\r\n\r\nYou are not supplying multiple radii to a single query and that's what I'm reading in the current form?"", 'comment_created': datetime.datetime(2020, 8, 24, 16, 51, 56, tzinfo=datetime.timezone.utc), 'commenter': 'larshg', 'type': 'User'}, {'comment_id': 476196445, 'comment_body': 'BTW, the PCL 1.12 requirement is actually the cause of the current CI error, since obviously 1.12 is not there yet.\r\n```shell\r\nCMake Error at CMakeLists.txt:5 (find_package):\r\n  Could not find a configuration file for package ""PCL"" that is compatible\r\n  with requested version ""1.12""\r\n```\r\nHow do I get around this, since the API used isn\'t available in 1.11?', 'comment_created': datetime.datetime(2020, 8, 25, 6, 0, 44, tzinfo=datetime.timezone.utc), 'commenter': 'haritha-j', 'type': 'User'}, {'comment_id': 476198630, 'comment_body': 'Yeah, I can see what you mean. `radius` may be clearer for the reader.', 'comment_created': datetime.datetime(2020, 8, 25, 6, 7, 25, tzinfo=datetime.timezone.utc), 'commenter': 'haritha-j', 'type': 'User'}, {'comment_id': 476266477, 'comment_body': 'Request version 1.11.1.99. This will get it passing. ', 'comment_created': datetime.datetime(2020, 8, 25, 8, 20, 37, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 476267812, 'comment_body': 'Remember to revise all line numbers at the very end.', 'comment_created': datetime.datetime(2020, 8, 25, 8, 22, 40, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 476268484, 'comment_body': '```suggestion\r\nAfter building the octree, we can move on to the different search queries.\r\n```', 'comment_created': datetime.datetime(2020, 8, 25, 8, 23, 44, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 476269756, 'comment_body': ""The tutorial is build upon 16.04 image without CUDA isn't it? So it will probably fail again."", 'comment_created': datetime.datetime(2020, 8, 25, 8, 25, 45, tzinfo=datetime.timezone.utc), 'commenter': 'larshg', 'type': 'User'}, {'comment_id': 476271108, 'comment_body': 'Addressing this limitation should be listed in work package items.', 'comment_created': datetime.datetime(2020, 8, 25, 8, 27, 52, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 476272250, 'comment_body': ""Probably also add that this the only reason we're currently offering the kNearestNeighbor despite it only supporting k=1. Otherwise I would normally route people to using approxNearestNeighbor."", 'comment_created': datetime.datetime(2020, 8, 25, 8, 29, 49, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 476273134, 'comment_body': '> methods which do not return squared distances are more efficient than those that do\r\n\r\nI would say marginally more efficient, but I would like some results validating this.', 'comment_created': datetime.datetime(2020, 8, 25, 8, 31, 13, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 476274923, 'comment_body': ""It's important to benchmark runtime performance differences between the approximate method and the kNN? It might be another one of those cases in which it is in general faster. "", 'comment_created': datetime.datetime(2020, 8, 25, 8, 34, 6, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 476275463, 'comment_body': 'Can you paint also the following:\r\n- paint the query points in red\r\n- For the approx NN method, in case it picks a suboptimal point, show the optimal point in green. ', 'comment_created': datetime.datetime(2020, 8, 25, 8, 34, 54, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 476278511, 'comment_body': 'Make the transition to the 18.04 build\r\nhttps://github.com/PointCloudLibrary/pcl/blob/f46f8a93462282d45ff6c87f0c07e6c1be15edb1/.ci/azure-pipelines/tutorials.yaml#L1-L8', 'comment_created': datetime.datetime(2020, 8, 25, 8, 39, 50, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 476282299, 'comment_body': '@kunaltyagi @shrijitsingh99 I need some know-how assistance. What are the required steps here to transition the tutorials job to have access to this build environment?\r\n\r\nhttps://github.com/PointCloudLibrary/pcl/blob/f46f8a93462282d45ff6c87f0c07e6c1be15edb1/.ci/azure-pipelines/env.yml#L48-L53', 'comment_created': datetime.datetime(2020, 8, 25, 8, 45, 42, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 476531139, 'comment_body': 'Do you mean to share the variables in the tutorial jobs too? or define these variables for the tutorial job as well.', 'comment_created': datetime.datetime(2020, 8, 25, 15, 18, 24, tzinfo=datetime.timezone.utc), 'commenter': 'shrijitsingh99', 'type': 'User'}, {'comment_id': 476537436, 'comment_body': 'Just make tutorials run on something with cuda support :smile:', 'comment_created': datetime.datetime(2020, 8, 25, 15, 26, 55, tzinfo=datetime.timezone.utc), 'commenter': 'larshg', 'type': 'User'}, {'comment_id': 476547053, 'comment_body': ""https://github.com/PointCloudLibrary/pcl/blob/f46f8a93462282d45ff6c87f0c07e6c1be15edb1/.ci/azure-pipelines/env.yml#L45\r\nSetting this true will enable CUDA for 16.04 docker image and push that image to docker hub once the change is merged with master. After that tutorial will have CUDA support.\r\n\r\nThe side effect is that all the 16.04 builds will now run on a container that has CUDA support.\r\nI don't see any issue because of this as of now."", 'comment_created': datetime.datetime(2020, 8, 25, 15, 40, 18, tzinfo=datetime.timezone.utc), 'commenter': 'shrijitsingh99', 'type': 'User'}, {'comment_id': 478085394, 'comment_body': 'Sorry, what do you mean by work package items? As a TODO in the code?', 'comment_created': datetime.datetime(2020, 8, 27, 4, 14, 56, tzinfo=datetime.timezone.utc), 'commenter': 'haritha-j', 'type': 'User'}, {'comment_id': 478131786, 'comment_body': ""Yes, it's not a huge difference, but it is noticeable. These are the times it took for the two tests.\r\n\r\nWith distance returning\r\n```shell\r\n6: [       OK ] PCL_OctreeGPU.batchRadiusSearch (481 ms)\r\n```\r\n\r\nwithout distance returning\r\n```shell\r\n6: [       OK ] PCL_OctreeGPU.batchRadiusSearch (395 ms)\r\n```\r\n"", 'comment_created': datetime.datetime(2020, 8, 27, 5, 18, 20, tzinfo=datetime.timezone.utc), 'commenter': 'haritha-j', 'type': 'User'}, {'comment_id': 478143727, 'comment_body': 'I ran the same query set for approxNearest and K nearest and actually the difference is huge (so much so that i ran it with two different data sizes to confirm)\r\n```shell\r\ntest 1\r\npoints - 871000\r\nqueries - 100000\r\ngpu-approx-nearest-batch-all took 0.265414ms\r\ngpu-knn-batch-all took 111.781ms.\r\n\r\ntest 2 \r\npoints - 8710000\r\nqueries - 1000000\r\ngpu-approx-nearest-batch-all took 2.0109ms.\r\ngpu-knn-batch-all took 12039.1ms.\r\n```\r\nIt looks like the approximation saves quite a lot of time (it makes sense because after the traversal only one single leaf has to be explored in the case of the approximate nearest search)\r\n', 'comment_created': datetime.datetime(2020, 8, 27, 5, 37, 28, tzinfo=datetime.timezone.utc), 'commenter': 'haritha-j', 'type': 'User'}, {'comment_id': 478223453, 'comment_body': 'In the final deliverable that Google requires you to make. ""Addressing"" is meant as ""you need to talk about it"".', 'comment_created': datetime.datetime(2020, 8, 27, 7, 47, 29, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 478224644, 'comment_body': ""Those number are a good hint  but that's not proper benchmarking. https://github.com/google/benchmark"", 'comment_created': datetime.datetime(2020, 8, 27, 7, 49, 50, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 478225828, 'comment_body': 'This is very suspicious. A 4 order of magnitude difference it bounds already on the ""there\'s a problem somewhere"".', 'comment_created': datetime.datetime(2020, 8, 27, 7, 52, 5, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 478239263, 'comment_body': ""Yeah it's possible. But I would argue that the number of points that the algorithm has to consider might also differ by the same magnitude (points in 1 leaf vs points in potentially 10s of 1000s of leafs, since voxels increase by powers of 8 at each level)."", 'comment_created': datetime.datetime(2020, 8, 27, 8, 16, 1, tzinfo=datetime.timezone.utc), 'commenter': 'haritha-j', 'type': 'User'}, {'comment_id': 478240383, 'comment_body': ""Does PCL's `ScopeTime` provide equivalent functionality as well, or is this much better?"", 'comment_created': datetime.datetime(2020, 8, 27, 8, 17, 43, tzinfo=datetime.timezone.utc), 'commenter': 'haritha-j', 'type': 'User'}, {'comment_id': 478316231, 'comment_body': 'Performance based decisions should be made with proper benchmarking. Example: \r\nhttps://github.com/PointCloudLibrary/pcl/pull/3890#discussion_r438477954', 'comment_created': datetime.datetime(2020, 8, 27, 10, 27, 8, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 478384582, 'comment_body': '```suggestion\r\n    The K nearest neighbor algorithm is designed to identify a given (k) number of nearest neighbors to a query point. However, the GPU KNN search algorithm is currently restricted to k=1 only. This restriction will be lifted in a future release.\r\n```', 'comment_created': datetime.datetime(2020, 8, 27, 12, 35, 43, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 478387996, 'comment_body': 'You should use singular form. Only the first one is returned. ', 'comment_created': datetime.datetime(2020, 8, 27, 12, 41, 29, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 478389301, 'comment_body': 'The last sentence you added is mildly confusing. Focus on establishing the use conditions:\r\n\r\n* if the user only cares about K=1 and an approximation is ok -> use gpu approx nn\r\n\r\n', 'comment_created': datetime.datetime(2020, 8, 27, 12, 43, 46, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 478390366, 'comment_body': 'Open a separate PR to enable this. Otherwise CI will never run green here.', 'comment_created': datetime.datetime(2020, 8, 27, 12, 45, 18, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 478393846, 'comment_body': 'add new line at the end of the file', 'comment_created': datetime.datetime(2020, 8, 27, 12, 50, 35, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 478395075, 'comment_body': ""We might need to limit this point generation to span a plane. Notice what's happening with approx NN.\r\n![appro](https://raw.githubusercontent.com/PointCloudLibrary/pcl/c72c1db0fe29307c21c0dc510014cd29a238dc8c/doc/tutorials/content/images/gpu/octree/gpu_approx.png)\r\n\r\nthere's a green dot (optimal) which looks further away than a red dot (approximate, should be worse)  because of perspective. Making a pointcloud which spans a plane parallel to the image plane would get rid of this effect. "", 'comment_created': datetime.datetime(2020, 8, 27, 12, 52, 34, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 478403609, 'comment_body': 'Okay. But K nearest neighbour sounds a bit wrong :sweat:', 'comment_created': datetime.datetime(2020, 8, 27, 13, 5, 41, tzinfo=datetime.timezone.utc), 'commenter': 'haritha-j', 'type': 'User'}, {'comment_id': 478405137, 'comment_body': ""Wrong line. I'm talking about the Approximate Nearest Neighbor item. "", 'comment_created': datetime.datetime(2020, 8, 27, 13, 8, 4, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 478405506, 'comment_body': 'Yeah I was wondering how to fix that. That should do the trick', 'comment_created': datetime.datetime(2020, 8, 27, 13, 8, 39, tzinfo=datetime.timezone.utc), 'commenter': 'haritha-j', 'type': 'User'}, {'comment_id': 478408014, 'comment_body': 'Ahh. Thats allright then. :sweat_smile:', 'comment_created': datetime.datetime(2020, 8, 27, 13, 12, 30, tzinfo=datetime.timezone.utc), 'commenter': 'haritha-j', 'type': 'User'}, {'comment_id': 478466978, 'comment_body': '>  For K = 1, if an approximation will suffice, users can utilize approximate nearest search instead.\r\n\r\nThe word *should* is paramount here.', 'comment_created': datetime.datetime(2020, 8, 27, 14, 35, 5, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 478479486, 'comment_body': 'shall I also mention the reason?\r\n i.e `For K = 1, if an approximation will suffice, users should utilize the more efficient approximate nearest search method instead. `', 'comment_created': datetime.datetime(2020, 8, 27, 14, 51, 51, tzinfo=datetime.timezone.utc), 'commenter': 'haritha-j', 'type': 'User'}, {'comment_id': 478556154, 'comment_body': 'definitely.', 'comment_created': datetime.datetime(2020, 8, 27, 16, 45, 14, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 480109401, 'comment_body': 'As a user I would now ask,\r\n\r\n> above what threshold is it worth to offload things onto the gpu?', 'comment_created': datetime.datetime(2020, 8, 31, 12, 53, 17, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 482096024, 'comment_body': 'Forgot to add title here.', 'comment_created': datetime.datetime(2020, 9, 2, 14, 5, 53, tzinfo=datetime.timezone.utc), 'commenter': 'haritha-j', 'type': 'User'}]","[{'commit_sha': '20028372687aa304817f5414a26c0c775c6eb152', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6430a262e29bf6bdb367c19681f29fc0dd6f0283', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c72c1db0fe29307c21c0dc510014cd29a238dc8c', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '597995c78ad858b5109893b5236cf56d1d5616fd', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e3950f34f7539cec07d440da742826a01b38b13', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}]",Haritha Jayasinghe,23292463,haritha.16@cse.mrt.ac.lk,User,,61,,7,20
462262480,Exclude gpu octree tests from ctest,,True,7,https://api.github.com/repos/larshg/pcl/pulls/7,https://github.com/larshg/pcl/pull/7,closed,2,2,1,1,0,0,0,0,[],2020-08-03 16:00:09+00:00,2020-08-03 16:06:20+00:00,371.0,0:06:11,[],"[{'commit_sha': '8f9bf6a56c778bf3e72f2760e286a15b15fa0d46', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}]",Haritha Jayasinghe,23292463,haritha.16@cse.mrt.ac.lk,User,,61,,7,20
462311034,Add cmake option for excluding gpu tests,,True,8,https://api.github.com/repos/larshg/pcl/pulls/8,https://github.com/larshg/pcl/pull/8,closed,18,3,3,1,0,0,0,0,[],2020-08-03 17:40:31+00:00,2020-08-03 17:47:46+00:00,435.0,0:07:15,[],"[{'commit_sha': '74b2e3f234325056e6870109a5c3cdf87bf21ffa', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}]",Haritha Jayasinghe,23292463,haritha.16@cse.mrt.ac.lk,User,,61,,7,20
428008743,[CMake] Add option to choose `pcl::index_t` while compiling,Add cmake configuration to change indices type and sign.,True,4166,https://api.github.com/repos/PointCloudLibrary/pcl/pulls/4166,https://github.com/PointCloudLibrary/pcl/pull/4166,closed,29,20,3,18,2,29,3,0,"[{'name': 'changelog: enhancement'}, {'name': 'module: cmake'}, {'name': 'priority: gsoc'}]",2020-06-04 18:16:36+00:00,2020-06-10 16:24:20+00:00,511664.0,"5 days, 22:07:44","[{'comment_id': 435466709, 'comment_body': 'CMake admits variables of type `BOOL` and this is a boolean variable.', 'comment_created': datetime.datetime(2020, 6, 4, 18, 32, 32, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 435467304, 'comment_body': '`PCL_INDEX_SIZE` and not `PCL_SIZE_INDEX`', 'comment_created': datetime.datetime(2020, 6, 4, 18, 33, 35, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 435467931, 'comment_body': 'The variable name also needs to be corrected.', 'comment_created': datetime.datetime(2020, 6, 4, 18, 34, 26, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 435477229, 'comment_body': 'Unneeded?', 'comment_created': datetime.datetime(2020, 6, 4, 18, 46, 34, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 435478703, 'comment_body': ""Please read the note in `types.h` regarding the default size. It can't be 32 for PCL 1.11 due to compatibility. It can be 32 for PCL 1.12 since the user can then override the size at compile time"", 'comment_created': datetime.datetime(2020, 6, 4, 18, 49, 19, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 435713085, 'comment_body': 'If I directly change this to a `BOOL`, \r\n```cmake\r\nset(PCL_INDEX_SIGNED true CACHE BOOL ""Set whether indices need to be signed or unsigned. Signed by default."")\r\n```\r\nthen the config file would change to \r\n```c++\r\n#define PCL_INDEX_SIGNED ON\r\n```\r\nwhich is not the desired result. I can also accept a bool in the cmake configuration and internally turn it into a cmake string with `true` or `false`. This would provide the user with a boolean option and internally achieve the desired result, but that seems like a very messy solution.\r\n\r\nAs far as I understand, the best option would be to change the config to\r\n```c++\r\n#cmakedefine PCL_INDEX_SIGNED true\r\n#ifndef PCL_INDEX_SIGNED\r\n#define PCL_INDEX_SIGNED false\r\n#endif\r\n```\r\nwhich achieves the desired effect. I\'m not sure if there\'s a simpler solution that I\'m missing. ', 'comment_created': datetime.datetime(2020, 6, 5, 6, 24, 17, tzinfo=datetime.timezone.utc), 'commenter': 'haritha-j', 'type': 'User'}, {'comment_id': 435717198, 'comment_body': 'Would modifying `types.h` to be\r\n```c++\r\n\r\n#if PCL_MINOR_VERSION <= 11\r\n// sizeof returns bytes, while we measure size by bits in the template\r\n#undef PCL_INDEX_SIZE\r\n#define PCL_INDEX_SIZE (sizeof(int) * 8)\r\n#else\r\n#ifndef PCL_INDEX_SIZE\r\n#define PCL_INDEX_SIZE 32\r\n#endif  // PCL_INDEX_SIZE\r\n#endif  // PCL_MINOR_VERSION\r\n```\r\nbe an option or should the changes  be made solely in the cmake configuration?', 'comment_created': datetime.datetime(2020, 6, 5, 6, 36, 13, tzinfo=datetime.timezone.utc), 'commenter': 'haritha-j', 'type': 'User'}, {'comment_id': 435719150, 'comment_body': 'You can modify anything as long as it keeps the behavior (and is sane) 😄 ', 'comment_created': datetime.datetime(2020, 6, 5, 6, 41, 48, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 435806532, 'comment_body': ""> I can also accept a bool in the cmake configuration and internally turn it into a cmake string with `true` or `false`. This would provide the user with a boolean option and internally achieve the desired result, but that seems like a very messy solution.\r\n\r\nMy belief is that CMake users will expect the option to parse properly all accepted forms of TRUE and FALSE i.e.\r\n> True if the constant is 1, ON, YES, TRUE, Y, or a non-zero number. False if the constant is 0, OFF, NO, FALSE, N, IGNORE, NOTFOUND, the empty string, or ends in the suffix -NOTFOUND. Named boolean constants are case-insensitive. If the argument is not one of these specific constants, it is treated as a variable or string and the following signature is used.\r\n\r\nHence you internally should rely on cmake's `if` parsing to produce the correct end result `true`/`false` string representation."", 'comment_created': datetime.datetime(2020, 6, 5, 9, 36, 35, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 435923041, 'comment_body': 'I have the feeling you should probably define another variable e.g. `PCL_INDEX_SIGNED_STR` to avoid touching the user set `PCL_INDEX_SIGNED`.', 'comment_created': datetime.datetime(2020, 6, 5, 13, 32, 37, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 435938618, 'comment_body': 'What happened here?', 'comment_created': datetime.datetime(2020, 6, 5, 13, 57, 5, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 435948725, 'comment_body': ""Spontaneous code deletion? Really sorry, I've got no clue how i did that."", 'comment_created': datetime.datetime(2020, 6, 5, 14, 10, 57, tzinfo=datetime.timezone.utc), 'commenter': 'haritha-j', 'type': 'User'}, {'comment_id': 436126529, 'comment_body': ""If the user didn't specify a default, use the behavior, else pick up the custom value. My code was for the default value, not for the final value"", 'comment_created': datetime.datetime(2020, 6, 5, 19, 40, 41, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 436136152, 'comment_body': ""I'm not sure I follow. Isnt that what's happening now? By default, the value is 32. But the user may change it if he wishes. As long as the version is greater than 1.11, the value is going to be 32 by default (or whichever value the user picks, if he changes it)\r\n\r\nI didn't get what you meant by this:\r\n> use the behavior\r\n"", 'comment_created': datetime.datetime(2020, 6, 5, 19, 57, 13, tzinfo=datetime.timezone.utc), 'commenter': 'haritha-j', 'type': 'User'}, {'comment_id': 436174669, 'comment_body': ""We were using `int` for indices before I shifted to constant size integer type. However, that has a problem: namely windows uses 64 bit integer, while others use 32 bit. As a result, to maintain compatibility, till PCL 1.12, indices would be `int` after which they'd be `int32` uniformly. This is the default behavior.\r\n\r\nThe user should be allowed to choose a custom size no matter PCL version. In your current code, if the uses chooses 64, they'd still get 32 on version < 1.12\r\n\r\nWhat I meant to say was:\r\n* Keep the default behavior unless user specifies a custom type (currently `int` for PCL 1.11 and `int32` for PCL 1.12)\r\n* Respect the user's custom wishes (even on PCL 1.11)"", 'comment_created': datetime.datetime(2020, 6, 5, 21, 35, 46, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 436244892, 'comment_body': 'Thanks for the clarification. To support this functionality, we would need to use an additional cmake option to allow the user to decide whether to use custom indices or not, in addition to the size selection right? For instance something like\r\n```cmake\r\nset(PCL_INDEX_CUSTOM false CACHE BOOL ""Set whether custom types should be allowed for indices. Disabled by default."")\r\nif(PCL_INDEX_CUSTOM)\r\n  set(PCL_INDEX_SIZE 32 CACHE STRING ""Set index size. Available options are: 8 16 32 64"")\r\n  set(PCL_INDEX_CUSTOM_STR ""true"")\r\nelse()\r\n  set(PCL_INDEX_CUSTOM_STR ""false"")\r\nendif()\r\n```\r\nThis does achieve the required effect, but would basically require two levels of configuration with ccmake right? First to enable custom types and then to select the custom size. Would that be fine?', 'comment_created': datetime.datetime(2020, 6, 6, 6, 51, 3, tzinfo=datetime.timezone.utc), 'commenter': 'haritha-j', 'type': 'User'}, {'comment_id': 436249613, 'comment_body': ""You don't need 2 steps for the use. This can be done in 2 ways behind the scenes:\r\n\r\n1. Have the default value be empty or something bad (like -1). In C++ macro, check if PCL_INDEX_SIZE is invalid, and if it is, then use the default behavior, else user's choice\r\n2. Have a macro in C++, PCL_INDEX_SIZE_DEFAULT. Let the user set the value of PCL_INDEX_SIZE which is a non-integer PCL_INDEX_SIZE_DEFAULT by default. I haven't tested in in CMake, but this works for Makefile and commandline."", 'comment_created': datetime.datetime(2020, 6, 6, 8, 10, 17, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 436325546, 'comment_body': ""Maybe undefine the PCL_INDEX_SIZE_TEMP after it's of no use"", 'comment_created': datetime.datetime(2020, 6, 7, 5, 10, 15, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 436325605, 'comment_body': 'Using `PCL_INDEX_SIZE_TEMP` might be better instead of `${PCL_INDEX_SIZE}`', 'comment_created': datetime.datetime(2020, 6, 7, 5, 11, 9, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 436328467, 'comment_body': ""It looks like I can't follow both of these suggestions together. If I undefine `PCL_INDEX_SIZE_TEMP`, then at compile time `PCL_INDEX_SIZE` cannot be set to it, because it is no longer available. "", 'comment_created': datetime.datetime(2020, 6, 7, 6, 1, 22, tzinfo=datetime.timezone.utc), 'commenter': 'haritha-j', 'type': 'User'}, {'comment_id': 436331691, 'comment_body': ""Oh, yeah. Can we just remove the temporary variable in that case? It's sole use seems to be comparison with 0"", 'comment_created': datetime.datetime(2020, 6, 7, 6, 49, 32, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 436894476, 'comment_body': ""The help string should probably clarify to the user what's the meaning of -1 or in general negative values. "", 'comment_created': datetime.datetime(2020, 6, 8, 18, 2, 56, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 436930364, 'comment_body': ""Should the type be STRING? I don't know if CMake has non-string types"", 'comment_created': datetime.datetime(2020, 6, 8, 19, 5, 28, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 436973037, 'comment_body': 'The available options are relatively limited https://cmake.org/cmake/help/latest/command/set.html#set-cache-entry', 'comment_created': datetime.datetime(2020, 6, 8, 20, 14, 7, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 436983299, 'comment_body': 'Ignore me 🙈 ', 'comment_created': datetime.datetime(2020, 6, 8, 20, 33, 1, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 437231411, 'comment_body': '```suggestion\r\nset(PCL_INDEX_SIZE -1 CACHE STRING ""Set the number of bits used to represent index_t. Available options are: 8 16 32 64. A negative value indicates default size (32 for PCL >= 1.12, 8*sizeof(int) i.e., the number of bits in int, otherwise)"")\r\n```', 'comment_created': datetime.datetime(2020, 6, 9, 8, 33, 19, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 437942691, 'comment_body': ""I'm unresolving the conversation, because `PCL_INDEX_SIZE_TEMP` still needs to be removed. "", 'comment_created': datetime.datetime(2020, 6, 10, 8, 14, 41, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 437974954, 'comment_body': 'My bad, I thought by remove @kunaltyagi meant I should undef `PCL_INDEX_SIZE_TEMP`, not get rid of it altogether.\r\n Is this what you had in mind?\r\n```c++\r\n#if (${PCL_INDEX_SIZE} > 0)\r\n  #define PCL_INDEX_SIZE ${PCL_INDEX_SIZE}\r\n#else\r\n  #if PCL_MINOR_VERSION <= 11\r\n    // sizeof returns bytes, while we measure size by bits in the template\r\n    #define PCL_INDEX_SIZE (sizeof(int) * 8)\r\n  #else\r\n    #define PCL_INDEX_SIZE 32\r\n  #endif //PCL_MINOR_VERSION\r\n#endif \r\n```', 'comment_created': datetime.datetime(2020, 6, 10, 9, 5, 51, tzinfo=datetime.timezone.utc), 'commenter': 'haritha-j', 'type': 'User'}, {'comment_id': 438051191, 'comment_body': ""That's what I interpreted, because there's no need to actually define anything."", 'comment_created': datetime.datetime(2020, 6, 10, 11, 26, 51, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}]","[{'commit_sha': '3b11a2a1a50eb1c8a58338d65866b585553e5da1', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b78a2ad06e361f1f686bf39a04cb1c5572012653', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2810fda9d8220745bca1116d3d597bdd45969951', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60cc20f3e1388a8c2e6b8da8c887d47ac706f0e0', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8efa4db55deb436c6b7e9d7caabc94a7fdfeb32', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08e6a73d87b9b883585234f301425c28c0a372f8', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a9670a4eab380bdc0bcdc3d09a0a1f42ef2019e', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39223408e862b87fa01268a1c463ce64a7b702d9', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9000c589fc447eda763e7ef0693850a931bb0c4f', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f10d8c29051a37ac16547ea70df408342ed19f4e', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19105701d540364a4579ac6b29d36ce93e9051a2', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6861e244bcaf04110946c1c3afe26dce164f5760', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ec2691e0f07ea957ceeea591e07a99ec5f461c2', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79e7e2b4ba0c03c533d72166d91b46a08e94f6a9', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '725757654eafeef692f009ce028c84428841405d', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd9a40435c22f92e0fe2b3afb947be0230909e3d', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7912d9f09fd916e3c9a379799896aa425207c42c', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9059add302694c679ca8615acd178e2c12eb1e21', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}]",Haritha Jayasinghe,23292463,haritha.16@cse.mrt.ac.lk,User,,61,,7,20
434111972,[ci] Add CI for 64bit and unsigned indices,"Added as a new job to the clang pipeline for now, since most of the modules are currently not being built and only tests for the `common` module are run at the moment.",True,4184,https://api.github.com/repos/PointCloudLibrary/pcl/pulls/4184,https://github.com/PointCloudLibrary/pcl/pull/4184,closed,57,0,2,2,1,2,2,0,"[{'name': 'module: ci'}, {'name': 'priority: gsoc'}]",2020-06-14 08:20:54+00:00,2020-06-14 20:50:02+00:00,44948.0,12:29:08,"[{'comment_id': 439805951, 'comment_body': 'Use the transitivity graph to reduce the modules', 'comment_created': datetime.datetime(2020, 6, 14, 8, 40, 8, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 439806089, 'comment_body': 'This can be a matrix argument', 'comment_created': datetime.datetime(2020, 6, 14, 8, 41, 38, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}]","[{'commit_sha': 'f9d1f0bfb903cf4f0e02a913f18f640edf571dfd', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '194601d2744c2e4a8d6e4c733dbc1692ff0dc92b', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}]",Haritha Jayasinghe,23292463,haritha.16@cse.mrt.ac.lk,User,,61,,7,20
432207300,[test] Replace usage of `std::vector<int>` with `Indices` in common module tests,,True,4173,https://api.github.com/repos/PointCloudLibrary/pcl/pulls/4173,https://github.com/PointCloudLibrary/pcl/pull/4173,closed,15,15,4,1,0,0,2,0,"[{'name': 'module: test'}, {'name': 'priority: gsoc'}]",2020-06-10 05:15:57+00:00,2020-06-10 11:25:26+00:00,22169.0,6:09:29,[],"[{'commit_sha': 'c0f23bb1bd21b1b563a124208841988f51046943', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}]",Haritha Jayasinghe,23292463,haritha.16@cse.mrt.ac.lk,User,,61,,7,20
435131937,[common] modify index types for PCLPointCloud2,~~The cloud data here is `std::vector<std::uint8_t>`. @kunaltyagi should this be changed as well?~~,True,4199,https://api.github.com/repos/PointCloudLibrary/pcl/pulls/4199,https://github.com/PointCloudLibrary/pcl/pull/4199,closed,27,26,10,4,6,12,4,0,"[{'name': 'changelog: ABI break'}, {'name': 'module: common'}, {'name': 'status: stale'}, {'name': 'priority: gsoc'}]",2020-06-16 10:48:13+00:00,2020-08-14 14:52:17+00:00,5112244.0,"59 days, 4:04:04","[{'comment_id': 443772006, 'comment_body': 'No need for the double parenthesis. Did this actually trigger a warning? Usually it only happens on signed to unsigned comparisons. \r\nIt is likely that cloud_out.point_step will also become `index_t` in the future, so you might want to wrap it in this cast as well.', 'comment_created': datetime.datetime(2020, 6, 22, 19, 15, 40, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 443778163, 'comment_body': ""Don't switch to signed here. Cast `cloud.point_step` instead."", 'comment_created': datetime.datetime(2020, 6, 22, 19, 28, 33, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 443778253, 'comment_body': 'Same comment here.', 'comment_created': datetime.datetime(2020, 6, 22, 19, 28, 44, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 443784678, 'comment_body': 'Index_t is just what the user selects - so it could be signed/unsigned. Or do you want it to specifically be uindex_t?', 'comment_created': datetime.datetime(2020, 6, 22, 19, 42, 24, tzinfo=datetime.timezone.utc), 'commenter': 'larshg', 'type': 'User'}, {'comment_id': 444170154, 'comment_body': ""Yeah I think only the line underneath threw the error here, and not this one, so I'll remove this cast. As there's no comparison, it shouldn't throw an error. `point_step` is actually `index_t` here, that was one of the changes for this PR."", 'comment_created': datetime.datetime(2020, 6, 23, 12, 2, 35, tzinfo=datetime.timezone.utc), 'commenter': 'haritha-j', 'type': 'User'}, {'comment_id': 444205690, 'comment_body': ""I'd suggest using `uindex_t` only when it makes sense to keep things unsigned. Rest of the times, we should be casting to `index_t`. Here, the size is obviously unsigned so I'd cast my vote with Sergio"", 'comment_created': datetime.datetime(2020, 6, 23, 13, 3, 12, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 444325225, 'comment_body': 'Type of `cp` should be `uindex_t`? (Conclusion reached here needs to be applied to lots of places)', 'comment_created': datetime.datetime(2020, 6, 23, 15, 46, 5, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 444456802, 'comment_body': ""You mean change type of `cp` to `uindex_t`? Wouldn't changing it to `index_t` be more consistent with what we've been doing elsewhere? Or do you think we should use type `uindex_t` in all such scenarios (since `cp` here should never be negative)? "", 'comment_created': datetime.datetime(2020, 6, 23, 19, 28, 17, tzinfo=datetime.timezone.utc), 'commenter': 'haritha-j', 'type': 'User'}, {'comment_id': 444628343, 'comment_body': ""`cp` refers to memory location, not index, which for `index_t` points can spill over to `uindex_t`. Doesn't matter for 64 bit, but matters for 32 bit"", 'comment_created': datetime.datetime(2020, 6, 24, 3, 47, 8, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 444749515, 'comment_body': 'Are you sure? From the following idiom `cp * point_step` I would  say the interpretation is that it is an index. Is your statement based on it not being used inside an `operator[]` for pcl types. \r\n', 'comment_created': datetime.datetime(2020, 6, 24, 9, 1, 2, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 444781029, 'comment_body': ""It's based on the class being `PCLPointCLoud2` which is a binary format. Let me go through the code again and come back"", 'comment_created': datetime.datetime(2020, 6, 24, 9, 55, 19, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 444782995, 'comment_body': ""I'm back. Based on the code, it seems `cp` is a counter for points and thus, should be `index_t`"", 'comment_created': datetime.datetime(2020, 6, 24, 9, 58, 57, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}]","[{'commit_sha': '5e95184b56f70098ce98e8d85253a48b024bfdde', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e62cdb36ca8f099e22a0813e67f1e41cff03f8b2', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a985f692b4a7d2da2964b07b4302f75a18143e96', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3465113a3887608d1688196dba31d1ea7bb52b57', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}]",Haritha Jayasinghe,23292463,haritha.16@cse.mrt.ac.lk,User,,61,,7,20
435127967,TODO: <Modify index type for pointCloud>,,False,4198,https://api.github.com/repos/PointCloudLibrary/pcl/pulls/4198,https://github.com/PointCloudLibrary/pcl/pull/4198,open,1176,821,150,14,7,87,4,0,"[{'name': 'needs: more work'}, {'name': 'changelog: API break'}, {'name': 'module: common'}, {'name': 'priority: gsoc'}]",2020-06-16 10:40:48+00:00,,0.0,,"[{'comment_id': 440756270, 'comment_body': 'Replace with call to `size()` instead with a note to remove these casts later on', 'comment_created': datetime.datetime(2020, 6, 16, 10, 42, 49, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 442100826, 'comment_body': '`uindex_t`?', 'comment_created': datetime.datetime(2020, 6, 18, 9, 40, 1, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 442101434, 'comment_body': 'Maybe cast after multiplication?', 'comment_created': datetime.datetime(2020, 6, 18, 9, 41, 2, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 442101928, 'comment_body': 'Is the inner cast needed?', 'comment_created': datetime.datetime(2020, 6, 18, 9, 41, 55, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 442102679, 'comment_body': ""I'd suggest adding a note to overhaul the API of such functions via the following discussed process:\r\n1. Add API for `index_t`\r\n2. Deprecate + SFINAE out existing function\r\n3. Later remove deprecation"", 'comment_created': datetime.datetime(2020, 6, 18, 9, 43, 15, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 442103231, 'comment_body': 'Why not convert `i` and `j` to `index_t` or `uindex_t` instead?', 'comment_created': datetime.datetime(2020, 6, 18, 9, 44, 20, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 442103427, 'comment_body': 'Please move this out of this PR into another one', 'comment_created': datetime.datetime(2020, 6, 18, 9, 44, 44, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 442104012, 'comment_body': ""I don't know if this would be picked up by doxygen"", 'comment_created': datetime.datetime(2020, 6, 18, 9, 45, 45, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 442107444, 'comment_body': 'This was because `i` was involved in operations with `radius` which would also cause the signed-unsigned warning.', 'comment_created': datetime.datetime(2020, 6, 18, 9, 51, 48, tzinfo=datetime.timezone.utc), 'commenter': 'haritha-j', 'type': 'User'}, {'comment_id': 442108339, 'comment_body': ""I'll add it as a doxygen command."", 'comment_created': datetime.datetime(2020, 6, 18, 9, 53, 19, tzinfo=datetime.timezone.utc), 'commenter': 'haritha-j', 'type': 'User'}, {'comment_id': 442117596, 'comment_body': 'Then choose one which causes least casts 😄 ', 'comment_created': datetime.datetime(2020, 6, 18, 10, 9, 39, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 442421736, 'comment_body': 'Should this note appear in one central location (in `point_cloud.h`) or under each affected function?', 'comment_created': datetime.datetime(2020, 6, 18, 18, 28, 34, tzinfo=datetime.timezone.utc), 'commenter': 'haritha-j', 'type': 'User'}, {'comment_id': 442570789, 'comment_body': 'Either an itemized list in a central location, or in each affected location. Itemization or individual note will make it easier to find those functions', 'comment_created': datetime.datetime(2020, 6, 19, 0, 32, 35, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 442631585, 'comment_body': ""Here's a full list of functions where we're currently casting to `uindex_t`. I'm not sure if I should spam `point_cloud.h` with a note this large :flushed:\r\n```cpp\r\n/*\r\nAPI of the following functions (where index_t variables are compared with unsigned variables) must be modified;\r\n\r\ncommon/include/pcl/common/impl/io.hpp -  \r\ncopyPointCloud (const pcl::PointCloud<PointT> &cloud_in, pcl::PointCloud<PointT> &cloud_out,\r\n                int top, int bottom, int left, int right, pcl::InterpolationType border_type, const PointT& value)\r\n\r\ncommon/include/pcl/common/impl/spring.hpp -\r\nduplicateColumns (const PointCloud<PointT>& input, PointCloud<PointT>& output,\r\n                  const std::size_t& amount)\r\nduplicateRows (const PointCloud<PointT>& input, PointCloud<PointT>& output,\r\n               const std::size_t& amount)\r\nmirrorColumns (const PointCloud<PointT>& input, PointCloud<PointT>& output,\r\n               const std::size_t& amount)\r\nmirrorRows (const PointCloud<PointT>& input, PointCloud<PointT>& output,\r\n            const std::size_t& amount)\r\nmirrorRows (const PointCloud<PointT>& input, PointCloud<PointT>& output,\r\n            const std::size_t& amount)\r\ndeleteCols (const PointCloud<PointT>& input, PointCloud<PointT>& output,\r\n            const std::size_t& amount)\r\n\r\ncommon/include/pcl/impl/pcl_base.hpp -\r\npcl::PCLBase<PointT>::setIndices (std::size_t row_start, std::size_t col_start, std::size_t nb_rows, std::size_t nb_cols)\r\n\r\ncommon/src/gaussian.cpp - \r\npcl::GaussianKernel::convolveRows (const pcl::PointCloud<float>& input,\r\n                                   const Eigen::VectorXf& kernel,\r\n                                   pcl::PointCloud<float>& output)\r\npcl::GaussianKernel::convolveCols (const pcl::PointCloud<float>& input,\r\n                                   const Eigen::VectorXf& kernel,\r\n                                   pcl::PointCloud<float>& output)\r\n\r\nfeatures/include/pcl/features/impl/integral_image_normal.hpp - \r\npcl::IntegralImageNormalEstimation<PointInT, PointOutT>::initSimple3DGradientMethod ()\r\npcl::IntegralImageNormalEstimation<PointInT, PointOutT>::initCovarianceMatrixMethod ()\r\npcl::IntegralImageNormalEstimation<PointInT, PointOutT>::initAverage3DGradientMethod ()\r\npcl::IntegralImageNormalEstimation<PointInT, PointOutT>::computePointNormal (\r\n    const int pos_x, const int pos_y, const unsigned point_index, PointOutT &normal)\r\n\r\nfeatures/include/pcl/features/impl/moment_of_inertia_estimation.hpp\r\npcl::MomentOfInertiaEstimation<PointT>::setIndices (std::size_t row_start, std::size_t col_start, std::size_t nb_rows, std::size_t nb_cols)\r\n\r\nfeatures/src/range_image_border_extractor.cpp - \r\nRangeImageBorderExtractor::extractLocalSurfaceStructure ()\r\n\r\nfilters/impl/fast_bilateral_omp.hpp - \r\npcl::FastBilateralFilterOMP<PointT>::applyFilter (PointCloud &output)\r\n\r\nio/include/pcl/io/impl/pcd_io.hpp - \r\npcl::PCDWriter::writeASCII (const std::string &file_name, const pcl::PointCloud<PointT> &cloud, \r\n                            const int precision)\r\npcl::PCDWriter::writeASCII (const std::string &file_name, \r\n                            const pcl::PointCloud<PointT> &cloud, \r\n                            const std::vector<int> &indices,\r\n                            const int precision)\r\n\r\nio/include/pcl/io/impl/point_cloud_image_extractors.hpp - \r\npcl::io::PointCloudImageExtractor<PointT>::extract (const PointCloud& cloud, pcl::PCLImage& img)\r\n\r\nvisualization/include/pcl/visualization/impl/image_viewer.hpp - \r\npcl::visualization::ImageViewer::addRGBImage (const pcl::PointCloud<T> &cloud,\r\n                                              const std::string &layer_id,\r\n                                              double opacity)\r\n\r\nvisualization/src/image_viewer.cpp - \r\npcl::visualization::ImageViewer::addMonoImage (\r\n    const pcl::PointCloud<pcl::Intensity> &cloud,\r\n    const std::string &layer_id, double opacity)\r\npcl::visualization::ImageViewer::addMonoImage (\r\n    const pcl::PointCloud<pcl::Intensity8u> &cloud,\r\n    const std::string &layer_id, double opacity)\r\n    \r\n suggested process for modification;\r\n      1. Add API for index_t\r\n      2. Deprecate + SFINAE out existing function\r\n      3. Later remove deprecation\r\n*/"", 'comment_created': datetime.datetime(2020, 6, 19, 5, 1, 18, tzinfo=datetime.timezone.utc), 'commenter': 'haritha-j', 'type': 'User'}, {'comment_id': 442997014, 'comment_body': 'Can be rebased to update these changes.', 'comment_created': datetime.datetime(2020, 6, 19, 18, 51, 41, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 442999113, 'comment_body': ""To prevent all the casts in the function body, let's define an overload with `index_t` arguments and deprecate the the `std::size_t` version. Notice the variables defined inside will also need to be `index_t`."", 'comment_created': datetime.datetime(2020, 6, 19, 18, 57, 10, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 443738192, 'comment_body': '@SergioRAgostinho ', 'comment_created': datetime.datetime(2020, 6, 22, 18, 8, 9, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 443780707, 'comment_body': 'Trim the white spaces please.', 'comment_created': datetime.datetime(2020, 6, 22, 19, 33, 52, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 443782909, 'comment_body': '`amount` will never be negative. update the comparison operator to `==`.', 'comment_created': datetime.datetime(2020, 6, 22, 19, 38, 41, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 443783146, 'comment_body': 'same comment here.', 'comment_created': datetime.datetime(2020, 6, 22, 19, 39, 12, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 443783233, 'comment_body': 'here', 'comment_created': datetime.datetime(2020, 6, 22, 19, 39, 23, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 443783292, 'comment_body': 'here.', 'comment_created': datetime.datetime(2020, 6, 22, 19, 39, 31, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 443785911, 'comment_body': 'Should be added to your trello board but not here. ', 'comment_created': datetime.datetime(2020, 6, 22, 19, 45, 5, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 443786860, 'comment_body': 'The original constructor needs to be deprecated and entirely eliminated when `index_t == uint32_t`', 'comment_created': datetime.datetime(2020, 6, 22, 19, 47, 9, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 443788058, 'comment_body': 'The function needs `n` to be `index_t` so change the function parameter type and avoid the cast. Same deprecation + SFINAE pattern.', 'comment_created': datetime.datetime(2020, 6, 22, 19, 49, 50, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 443792202, 'comment_body': 'Following the brief Discord exchange, make the same change for the methods below this one.', 'comment_created': datetime.datetime(2020, 6, 22, 19, 58, 27, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 443798722, 'comment_body': 'Is defining `element_stride` and `row_stride` as `index_t` an option?', 'comment_created': datetime.datetime(2020, 6, 22, 20, 12, 39, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 443800937, 'comment_body': ""Answered above. Don't spam the code, just keep track of these items in your trello project."", 'comment_created': datetime.datetime(2020, 6, 22, 20, 16, 56, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 446335793, 'comment_body': ""Which methods do you mean? In the methods below this, we're only casting `size()` right? Since in the future `size()` will return `index_t`, I reckon we should be able to simply remove the cast at that point.\r\n\r\np.s. Or did you mean the inline element access methods immediately below this method? "", 'comment_created': datetime.datetime(2020, 6, 26, 18, 9, 54, tzinfo=datetime.timezone.utc), 'commenter': 'haritha-j', 'type': 'User'}, {'comment_id': 446340439, 'comment_body': 'These strides are passed to \r\n``` integral_image_XYZ_.setInput (const DataType * data, unsigned width,unsigned height, unsigned element_stride, unsigned row_stride)```\r\n which takes in unsigned values for strides. Would it be a good idea to deprecate this function with the SFINAE approach? This function is called multiple times, and requires a lot of casts.', 'comment_created': datetime.datetime(2020, 6, 26, 18, 19, 42, tzinfo=datetime.timezone.utc), 'commenter': 'haritha-j', 'type': 'User'}, {'comment_id': 447090231, 'comment_body': 'I was referring to parameter `size_t n` of `PointCloud::resize(size_t)`. Currently it takes a size_t, however width, at best can take `index_t`. Hence, my suggestion was to add\r\n```cpp\r\nPointCloud::resize(index_t)\r\n```\r\nand deprecated\r\n```cpp\r\nPointCloud::resize(size_t)\r\n```\r\n', 'comment_created': datetime.datetime(2020, 6, 29, 16, 14, 20, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 447096056, 'comment_body': 'Yes, definitely. Those are the best cases to deprecate.', 'comment_created': datetime.datetime(2020, 6, 29, 16, 23, 10, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 447642737, 'comment_body': ""Sorry my comment wasn't very clear. What I was trying to ask was, what are the other methods 'below' `resize (std::size_t n)` that you mentioned in this comment?\r\n> Following the brief Discord exchange, make the same change for the methods below this one.\r\n"", 'comment_created': datetime.datetime(2020, 6, 30, 12, 27, 27, tzinfo=datetime.timezone.utc), 'commenter': 'haritha-j', 'type': 'User'}, {'comment_id': 447795233, 'comment_body': '```cpp\r\ninline const PointT& at (int column, int row) const;\r\ninline PointT& at (int column, int row);\r\ninline const PointT& operator () (std::size_t column, std::size_t row) const;\r\ninline PointT& operator () (std::size_t column, std::size_t row)\r\n\r\n// less important but required to to enforce consistency\r\ninline void reserve (std::size_t n) { points.reserve (n); }\r\ninline const PointT& operator[] (std::size_t n) const { return (points[n]); }\r\ninline PointT& operator[] (std::size_t n) { return (points[n]); }\r\ninline const PointT& at (std::size_t n) const { return (points.at (n)); }\r\ninline PointT& at (std::size_t n) { return (points.at (n)); }\r\ninline void insert (iterator position, std::size_t n, const PointT& pt)\r\n```', 'comment_created': datetime.datetime(2020, 6, 30, 15, 56, 46, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 452175784, 'comment_body': ""If you actually don't need the type here, you probably can write it simply as \r\n```cpp\r\ntemplate <typename PointT, typename, pcl::index_t> void\r\n```\r\n\r\ngive it a try. The same is applicable to all other changes in this commit."", 'comment_created': datetime.datetime(2020, 7, 9, 12, 20, 38, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 452177232, 'comment_body': 'use c++ style casts.', 'comment_created': datetime.datetime(2020, 7, 9, 12, 23, 25, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 452178130, 'comment_body': ""there's no point in creating `pt`, just `point` directly."", 'comment_created': datetime.datetime(2020, 7, 9, 12, 25, 2, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 452180285, 'comment_body': 'No need to created these temp variables.', 'comment_created': datetime.datetime(2020, 7, 9, 12, 28, 47, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 452183662, 'comment_body': 'No good reason to use these tmp vars', 'comment_created': datetime.datetime(2020, 7, 9, 12, 34, 49, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 452185302, 'comment_body': '```cpp\r\n  if (amount == 0)\r\n```\r\nor\r\n```cpp\r\n  if (!amount)\r\n```', 'comment_created': datetime.datetime(2020, 7, 9, 12, 37, 34, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 452185616, 'comment_body': 'Same issue here', 'comment_created': datetime.datetime(2020, 7, 9, 12, 38, 3, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 452186478, 'comment_body': 'might as well convert this to `index_t` like the other methods in this file', 'comment_created': datetime.datetime(2020, 7, 9, 12, 39, 36, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 452188767, 'comment_body': 'Already done in this PR, you can remove.', 'comment_created': datetime.datetime(2020, 7, 9, 12, 43, 24, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 452189493, 'comment_body': ""Strictly speaking, you should call the index_t constructor. It's technically not different, but in case someone updates it's implementation, the implementations will not diverge."", 'comment_created': datetime.datetime(2020, 7, 9, 12, 44, 46, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 452191918, 'comment_body': '`size()` already returns `index_t`', 'comment_created': datetime.datetime(2020, 7, 9, 12, 49, 2, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 452192050, 'comment_body': 'same comment here', 'comment_created': datetime.datetime(2020, 7, 9, 12, 49, 16, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 452192146, 'comment_body': 'and here', 'comment_created': datetime.datetime(2020, 7, 9, 12, 49, 23, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 452192419, 'comment_body': 'and here', 'comment_created': datetime.datetime(2020, 7, 9, 12, 49, 52, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 452192497, 'comment_body': 'here', 'comment_created': datetime.datetime(2020, 7, 9, 12, 49, 59, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 452192546, 'comment_body': 'here', 'comment_created': datetime.datetime(2020, 7, 9, 12, 50, 5, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 452192600, 'comment_body': 'here', 'comment_created': datetime.datetime(2020, 7, 9, 12, 50, 11, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 452195935, 'comment_body': 'can the scope of `index` be reduced? i.e. can you define it in the initialization of the for-loop?', 'comment_created': datetime.datetime(2020, 7, 9, 12, 55, 46, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 452196594, 'comment_body': 'the cast on the right-hand-side of this assignment needs to be removed .', 'comment_created': datetime.datetime(2020, 7, 9, 12, 56, 51, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 452200999, 'comment_body': 'I would cast to `uindex_t`', 'comment_created': datetime.datetime(2020, 7, 9, 13, 4, 3, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 452201699, 'comment_body': 'Prefer ++var  over var++.', 'comment_created': datetime.datetime(2020, 7, 9, 13, 5, 11, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 452202411, 'comment_body': 'weird identing', 'comment_created': datetime.datetime(2020, 7, 9, 13, 6, 20, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 452204994, 'comment_body': 'in this situation, if you need a copy, make the actual copy in the for-range\r\n```cpp\r\nfor (auto tmp : *input_) {\r\n```', 'comment_created': datetime.datetime(2020, 7, 9, 13, 10, 34, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 452205725, 'comment_body': 'rename this variable `p` and remove the declaration below.', 'comment_created': datetime.datetime(2020, 7, 9, 13, 11, 44, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 452207324, 'comment_body': 'Rename this `p` and the declaration `p` below and the final assignment .', 'comment_created': datetime.datetime(2020, 7, 9, 13, 14, 14, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 452208031, 'comment_body': ""The casts on the right-hand-side don't make sense."", 'comment_created': datetime.datetime(2020, 7, 9, 13, 15, 11, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 452208232, 'comment_body': 'same comment as before', 'comment_created': datetime.datetime(2020, 7, 9, 13, 15, 30, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 452210346, 'comment_body': 'is the cast on this right-hand-side correct', 'comment_created': datetime.datetime(2020, 7, 9, 13, 18, 40, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 452212107, 'comment_body': 'use c++ style casts', 'comment_created': datetime.datetime(2020, 7, 9, 13, 21, 15, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 452213414, 'comment_body': 'probably better to restrict to \r\n```cpp\r\nusing pcl::index_t;\r\n```', 'comment_created': datetime.datetime(2020, 7, 9, 13, 23, 6, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 452214379, 'comment_body': 'c++ style casts', 'comment_created': datetime.datetime(2020, 7, 9, 13, 24, 38, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 452214491, 'comment_body': 'also here', 'comment_created': datetime.datetime(2020, 7, 9, 13, 24, 49, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 452214561, 'comment_body': 'and here', 'comment_created': datetime.datetime(2020, 7, 9, 13, 24, 55, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 452215328, 'comment_body': '```suggestion\r\n  for (const auto& pt : *input)\r\n```', 'comment_created': datetime.datetime(2020, 7, 9, 13, 26, 1, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 452351715, 'comment_body': ""SFINAE is needed. I'd recommend using a standin and comparing `T` with both `index_t` and whatever type `index_t` is replacing:\r\n\r\n```cpp\r\ntemplate <class T, class OldType>\r\nusing enable_for_compatibility = std::enable_if_t<std::is_same_v<T, OldType> && !std::is_same_v<T, index_t>, bool>;\r\n\r\ntemplate <class Point, typename T, enable_for_compatibility<T, int> = 0>\r\nvoid foo(T bar);\r\n```\r\n\r\nhttps://godbolt.org/z/zPede6\r\n\r\nThis restricts the deprecated function to only be available for existing type and route to the new for everything else"", 'comment_created': datetime.datetime(2020, 7, 9, 16, 43, 48, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 452352468, 'comment_body': '`for (const auto pt: ...)` is also a choice', 'comment_created': datetime.datetime(2020, 7, 9, 16, 45, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 452672148, 'comment_body': ""If it's still needed then leave it untouched. "", 'comment_created': datetime.datetime(2020, 7, 10, 7, 30, 37, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 452691260, 'comment_body': ""@haritha-j Please take a look at the SFINAE (and my sample) again. You've technically created a lot of overloads instead of 1"", 'comment_created': datetime.datetime(2020, 7, 10, 8, 10, 26, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 453477221, 'comment_body': 'The reason I removed the type here was because one of the CI pipelines (Windows I think) fails when the type is assigned in the header file and then assigned again in the `hpp` file. The `.h` file still looks like this:\r\n```cpp \r\n    template <typename PointT, typename T = pcl::index_t, std::enable_if_t<!std::is_same<T, std::size_t>::value, pcl::index_t> = 0>\r\n```\r\n@kunaltyagi do I still need to use the method in your example?', 'comment_created': datetime.datetime(2020, 7, 13, 8, 23, 38, tzinfo=datetime.timezone.utc), 'commenter': 'haritha-j', 'type': 'User'}, {'comment_id': 453512148, 'comment_body': '> @haritha-j Please take a look at the SFINAE (and my sample) again. You\'ve technically created a lot of overloads instead of 1\r\n\r\nI\'m not sure I agree with this. I\'ve made the following test https://godbolt.org/z/7Gvn1s\r\nI\'ve appended to your example the old SFINAE pattern (the one Haritha used) and I instantiated the function with 4 different integer types.  Only two overloads exist as intended. \r\n\r\nEdit:  you would need to explicitly instantiate `T` to some type other than `pcl::index_t` to generate the extra overload, and this really needs to be done explicitly, because there\'s no template argument deduction to assist you. Which is the same as saying, ""there\'s a chance that someone can do something stupid with it"". My interpretation is that technically, the current solution is not creating multiple overloads but it can if someone does something stupid with it.', 'comment_created': datetime.datetime(2020, 7, 13, 9, 19, 49, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 453563116, 'comment_body': ""That seems like a very unlikely scenario IMO. I don't really see any reason someone would attempt to manually set `T`."", 'comment_created': datetime.datetime(2020, 7, 13, 10, 48, 4, tzinfo=datetime.timezone.utc), 'commenter': 'haritha-j', 'type': 'User'}, {'comment_id': 454289740, 'comment_body': 'c++ style casts', 'comment_created': datetime.datetime(2020, 7, 14, 11, 30, 47, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 454289820, 'comment_body': 'here', 'comment_created': datetime.datetime(2020, 7, 14, 11, 30, 55, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 454291537, 'comment_body': '```cpp\r\n PointCloud (std::uint32_t width_, std::uint32_t height_, const PointT& value_ = PointT ())\r\n  : PointCloud (static_cast<index_t>(width_), static_cast<index_t>(height_), value_)\r\n{}\r\n```', 'comment_created': datetime.datetime(2020, 7, 14, 11, 34, 38, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 454515909, 'comment_body': 'If this issue crops up, we can fix it without breaking anything (or just remove it in 2 releases)', 'comment_created': datetime.datetime(2020, 7, 14, 17, 18, 11, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 454939742, 'comment_body': 'Needless cast', 'comment_created': datetime.datetime(2020, 7, 15, 10, 5, 52, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 454939819, 'comment_body': 'Same', 'comment_created': datetime.datetime(2020, 7, 15, 10, 6, 1, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 454939909, 'comment_body': 'Loads of places', 'comment_created': datetime.datetime(2020, 7, 15, 10, 6, 11, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 454940794, 'comment_body': 'Instead of cast here, L206 should be changed', 'comment_created': datetime.datetime(2020, 7, 15, 10, 7, 51, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 454942992, 'comment_body': '`const`', 'comment_created': datetime.datetime(2020, 7, 15, 10, 11, 59, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 455846463, 'comment_body': 'Please use `++counter` for uniformity in the for loops', 'comment_created': datetime.datetime(2020, 7, 16, 14, 50, 24, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 455847200, 'comment_body': 'Some Eigen here?', 'comment_created': datetime.datetime(2020, 7, 16, 14, 51, 23, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 455847816, 'comment_body': 'candidate for auto?', 'comment_created': datetime.datetime(2020, 7, 16, 14, 52, 11, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}]","[{'commit_sha': 'b8bce7fd4ccf20e9f43818b9faa46201c12101ef', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8d26ff4db80da8cbb5020ad7382217eb462eaf1', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '635d2e02222d9a7d2184c31b3970338a182e3fd3', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4afca89185657f01f2ccf53bf9f8b42f24ad0e38', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '04367a769536ce78d96f38fefab10b817e84ab20', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b83a267d6eb6994437f9470061a03420dd4b1ed0', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '63c15233dba8ffb61f887067d8e7bd2f54886851', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb8634f879ea8323216c6ceace1ed8274fda4e5f', 'committer_username': 'SergioRAgostinho', 'committer_name': 'Sérgio Agostinho', 'committer_email': None, 'commit_date': datetime.datetime(2012, 5, 5, 18, 15, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a30079f0af947baed27d06b562cce3f62048dd8b', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc5ae0e1336fee1057d7cdc0bb1e2365e3efb7da', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4cea05e16abfe09c3f31ea937529210b742f017', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a64d329119807a302d9eef35ecef8160d149e100', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '942521e33d84cde1f8542ba0eebadd3c72a5e7ce', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ce57aeb7f7978dcca1176134cbe0546ece6191d', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}]",Haritha Jayasinghe,23292463,haritha.16@cse.mrt.ac.lk,User,,61,,7,20
436396000,[common] Add always-unsigned index type `uindex_t` dependent on `index_t`,,True,4205,https://api.github.com/repos/PointCloudLibrary/pcl/pulls/4205,https://github.com/PointCloudLibrary/pcl/pull/4205,closed,8,0,1,2,0,2,4,0,"[{'name': 'needs: code review'}, {'name': 'changelog: new feature'}, {'name': 'module: common'}, {'name': 'priority: gsoc'}]",2020-06-18 11:02:12+00:00,2020-06-19 18:49:50+00:00,114458.0,"1 day, 7:47:38","[{'comment_id': 442230415, 'comment_body': 'static assert that uindex_t is unsigned', 'comment_created': datetime.datetime(2020, 6, 18, 13, 35, 42, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 442996017, 'comment_body': ""I'm not sure if this check should be here but it's minor. I think I would have placed it somewhere in the unit tests."", 'comment_created': datetime.datetime(2020, 6, 19, 18, 48, 59, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}]","[{'commit_sha': 'cf9f6d54b305359f3258895c5e4969135f0b07a3', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a9b8e208c78267122ece4322292c217ac6aba39', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}]",Haritha Jayasinghe,23292463,haritha.16@cse.mrt.ac.lk,User,,61,,7,20
438508595,"[common] Switch `int` to `index_t` for field index variables in `pclBase`, add `pcl::UNAVAILABLE` for same",,True,4211,https://api.github.com/repos/PointCloudLibrary/pcl/pulls/4211,https://github.com/PointCloudLibrary/pcl/pull/4211,closed,41,38,9,1,0,4,3,0,"[{'name': 'changelog: enhancement'}, {'name': 'module: common'}, {'name': 'priority: gsoc'}]",2020-06-23 11:31:00+00:00,2020-06-24 08:50:40+00:00,76780.0,21:19:40,"[{'comment_id': 444635326, 'comment_body': ""Let's make another PR for this?"", 'comment_created': datetime.datetime(2020, 6, 24, 4, 17, 51, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 444779404, 'comment_body': 'Since this is explicitly used for sizes, and thus cannot be negative, do you suppose `uindex_t` would be better for this?', 'comment_created': datetime.datetime(2020, 6, 24, 9, 52, 31, tzinfo=datetime.timezone.utc), 'commenter': 'haritha-j', 'type': 'User'}, {'comment_id': 444780080, 'comment_body': 'I suppose so\r\n\r\nPS: If this is wrong, then sergio or compilers will point it out to us 😆 ', 'comment_created': datetime.datetime(2020, 6, 24, 9, 53, 40, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 444780964, 'comment_body': ""I'll go ask the compilers. "", 'comment_created': datetime.datetime(2020, 6, 24, 9, 55, 12, tzinfo=datetime.timezone.utc), 'commenter': 'haritha-j', 'type': 'User'}]","[{'commit_sha': '50998746fa3ec9d4673eeca689e64aac53d24fc0', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}]",Haritha Jayasinghe,23292463,haritha.16@cse.mrt.ac.lk,User,,61,,7,20
439163264,[common] Modify index type for PCLPointField,"I added @kunaltyagi's request from #4211 regarding switching `std::vector<int> field_sizes_;` to `uindex_t`to this PR, since `field_sizes_` refers to the size of `PCLPointField`. If that's inappropriate, I'll move that to a seperate PR.",True,4224,https://api.github.com/repos/PointCloudLibrary/pcl/pulls/4224,https://github.com/PointCloudLibrary/pcl/pull/4224,closed,13,12,7,3,1,2,3,0,"[{'name': 'needs: code review'}, {'name': 'module: common'}, {'name': 'priority: gsoc'}]",2020-06-24 12:05:03+00:00,2020-06-25 00:15:12+00:00,43809.0,12:10:09,"[{'comment_id': 444859935, 'comment_body': 'Keep these unsigned?', 'comment_created': datetime.datetime(2020, 6, 24, 12, 33, 17, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 444951553, 'comment_body': 'offset is defined as `uindex_t` already.', 'comment_created': datetime.datetime(2020, 6, 24, 14, 48, 53, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}]","[{'commit_sha': '53beca1707099fa5129ae8f97933ba71283deef0', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '195787befea890f5aefdb651e57db8d776630a57', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd2cbddbb3873cc0367717f6438e40ec2634ef135', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}]",Haritha Jayasinghe,23292463,haritha.16@cse.mrt.ac.lk,User,,61,,7,20
439661676,[common] Modify index type for PCLPointField,,True,4228,https://api.github.com/repos/PointCloudLibrary/pcl/pulls/4228,https://github.com/PointCloudLibrary/pcl/pull/4228,closed,13,12,7,3,1,1,4,0,"[{'name': 'changelog: ABI break'}, {'name': 'module: common'}, {'name': 'kind: todo'}, {'name': 'priority: gsoc'}]",2020-06-25 04:54:19+00:00,2020-08-14 14:53:51+00:00,4355972.0,"50 days, 9:59:32","[{'comment_id': 445306810, 'comment_body': 'Point of ABI break', 'comment_created': datetime.datetime(2020, 6, 25, 4, 57, 48, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}]","[{'commit_sha': '53beca1707099fa5129ae8f97933ba71283deef0', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '195787befea890f5aefdb651e57db8d776630a57', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd2cbddbb3873cc0367717f6438e40ec2634ef135', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}]",Haritha Jayasinghe,23292463,haritha.16@cse.mrt.ac.lk,User,,61,,7,20
440764245,[common] Modify index type for correspondences,,True,4231,https://api.github.com/repos/PointCloudLibrary/pcl/pulls/4231,https://github.com/PointCloudLibrary/pcl/pull/4231,closed,4,3,1,12,2,7,2,0,"[{'name': 'module: common'}, {'name': 'priority: gsoc'}]",2020-06-26 20:03:45+00:00,2020-07-25 12:47:42+00:00,2479437.0,"28 days, 16:43:57","[{'comment_id': 446673434, 'comment_body': 'This might not force a compiler error when the version to remove deprecation arrives', 'comment_created': datetime.datetime(2020, 6, 28, 16, 58, 52, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 447635227, 'comment_body': 'maybe provide a comment and url to the discussion on why this is required. A future developer will be unaware of your discoveries. ', 'comment_created': datetime.datetime(2020, 6, 30, 12, 13, 59, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 447638910, 'comment_body': ""This commit is actually outdated, it turns out that the `__declspec` approach will throw errors in some cases (see the Windows build errors for this commit). In the newest commit I'm not modifying the macros, but directly making the function inline on `MSVC` only. It seems to be compiling."", 'comment_created': datetime.datetime(2020, 6, 30, 12, 20, 21, tzinfo=datetime.timezone.utc), 'commenter': 'haritha-j', 'type': 'User'}, {'comment_id': 460073026, 'comment_body': 'Why is this required? it is because of `UNAVAILABLE`?', 'comment_created': datetime.datetime(2020, 7, 24, 14, 4, 31, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 460289907, 'comment_body': 'Do we need to deprecate this? `index_t` is int by default? Deprecation only comes into play if the arguments in the function signature representing indices are different than int. This is not one of those cases. ', 'comment_created': datetime.datetime(2020, 7, 24, 21, 10, 56, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 460376595, 'comment_body': 'yes', 'comment_created': datetime.datetime(2020, 7, 25, 7, 24, 15, tzinfo=datetime.timezone.utc), 'commenter': 'haritha-j', 'type': 'User'}, {'comment_id': 460377442, 'comment_body': 'Yeah, that makes sense. So I should remove the old constructor altogether?', 'comment_created': datetime.datetime(2020, 7, 25, 7, 34, 47, tzinfo=datetime.timezone.utc), 'commenter': 'haritha-j', 'type': 'User'}]","[{'commit_sha': '8ad71f4a4bd526c0c2b811d92440f6d6ecc6bfe5', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '337b86ae8c0a94a5e4945b1a360e387ce67acf95', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e75689858fb77f4e4c1c659995e80f519c7f0ee', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1777c6167e30af41ef3ce229ce0c2b4f4bf56a21', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68668712808ca1c2aff842d80ffa56edb573ed16', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '580a6970d3849bbf75956014ed016383bd1a20ba', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b89b4181193f8565f5e14114684daae9fc0b84b', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7fcfbc13d84d5e535c4c733e6582e5eafdab5608', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5aad7d462252fb918c7468b42c316b8bd6db3b52', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3a0f01d36f2969caaa4d6475c8f60fc8f8ef091', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '574928e541183b450ec4336bd7874884676bf079', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '646b3dc4fe887dd04326111359444515eb5b62b9', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}]",Haritha Jayasinghe,23292463,haritha.16@cse.mrt.ac.lk,User,,61,,7,20
445864720,[common] Modify index type for vertices,,True,4256,https://api.github.com/repos/PointCloudLibrary/pcl/pulls/4256,https://github.com/PointCloudLibrary/pcl/pull/4256,closed,45,18,5,5,0,20,4,0,"[{'name': 'changelog: ABI break'}, {'name': 'module: common'}, {'name': 'changelog: deprecation'}, {'name': 'priority: gsoc'}]",2020-07-08 02:30:40+00:00,2020-08-14 14:53:30+00:00,3241370.0,"37 days, 12:22:50","[{'comment_id': 451259463, 'comment_body': 'Note: ABI breakage here', 'comment_created': datetime.datetime(2020, 7, 8, 3, 21, 48, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 451259823, 'comment_body': 'Deprecation needs to give 2 version delay. It should be either 15, I think (Or 14?)', 'comment_created': datetime.datetime(2020, 7, 8, 3, 23, 21, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 451259872, 'comment_body': 'same here', 'comment_created': datetime.datetime(2020, 7, 8, 3, 23, 35, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 451265898, 'comment_body': 'Note: more ABI break', 'comment_created': datetime.datetime(2020, 7, 8, 3, 46, 31, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 451266172, 'comment_body': ""I'd recommend you to make the ABI breaking PR into 2 parts:\r\n* Add a `using Faces = std::vector<index_t>;` or similar alias\r\n* Break ABI behind alias"", 'comment_created': datetime.datetime(2020, 7, 8, 3, 47, 47, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 451444417, 'comment_body': '`Indices`', 'comment_created': datetime.datetime(2020, 7, 8, 10, 33, 8, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 451444887, 'comment_body': '`Indices`', 'comment_created': datetime.datetime(2020, 7, 8, 10, 34, 7, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 451445243, 'comment_body': 'replace `std::vector<index_t> -> pcl::Indices`', 'comment_created': datetime.datetime(2020, 7, 8, 10, 34, 48, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 451445375, 'comment_body': 'same comment as before', 'comment_created': datetime.datetime(2020, 7, 8, 10, 35, 3, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 451445852, 'comment_body': 'Indices', 'comment_created': datetime.datetime(2020, 7, 8, 10, 36, 4, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 451445962, 'comment_body': 'here as well', 'comment_created': datetime.datetime(2020, 7, 8, 10, 36, 19, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 451446900, 'comment_body': ""Wouldn't you say this should be just `Indices`?"", 'comment_created': datetime.datetime(2020, 7, 8, 10, 38, 17, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 451449876, 'comment_body': ""I don't know, haven't seen the code. It might be ID of face instead of being an index into a vector in which case having a different alias is helpful. Eg:\r\n```cpp\r\nstruct vec4 { float x, y, z, w; };\r\nusing quaternion = vec4;\r\n```"", 'comment_created': datetime.datetime(2020, 7, 8, 10, 44, 19, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 451507740, 'comment_body': 'If this is going to be part of 12, then it should be 14 right?', 'comment_created': datetime.datetime(2020, 7, 8, 12, 31, 21, tzinfo=datetime.timezone.utc), 'commenter': 'haritha-j', 'type': 'User'}, {'comment_id': 451528905, 'comment_body': 'I cant use an alias here right?', 'comment_created': datetime.datetime(2020, 7, 8, 13, 6, 1, tzinfo=datetime.timezone.utc), 'commenter': 'haritha-j', 'type': 'User'}, {'comment_id': 451542571, 'comment_body': 'Ambiguous question. `pcl::Indices` is an alias. Could you clarify the question?', 'comment_created': datetime.datetime(2020, 7, 8, 13, 26, 42, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 451546539, 'comment_body': 'oh right, i was thinking in terms of `vector<index_t>`. Never mind.', 'comment_created': datetime.datetime(2020, 7, 8, 13, 32, 8, tzinfo=datetime.timezone.utc), 'commenter': 'haritha-j', 'type': 'User'}, {'comment_id': 452064690, 'comment_body': ""This doesn't need to be templated with respect to `PointT`"", 'comment_created': datetime.datetime(2020, 7, 9, 8, 51, 24, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 452064853, 'comment_body': 'Same comment here.', 'comment_created': datetime.datetime(2020, 7, 9, 8, 51, 37, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 454553337, 'comment_body': ""Update to use `index_t`? I don't know the type of `cloud_` but that'd remove the cast from the loop"", 'comment_created': datetime.datetime(2020, 7, 14, 18, 19, 7, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}]","[{'commit_sha': 'ad00c7bee2fad0391649479d90eee4461a2e74e7', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b38c7759f7d829e938a99dee90ed0b64c34e420', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '81910faa07b3d3ba3374b78607aeebf19c259c04', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b86d2212cf3dcb3c7b5775ff0f67720ca9791aa', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9464e40cdb15f3e3f3e94fd8277cf512549ab9c8', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}]",Haritha Jayasinghe,23292463,haritha.16@cse.mrt.ac.lk,User,,61,,7,20
446307581,[common] modify index type for PCLImage,,True,4257,https://api.github.com/repos/PointCloudLibrary/pcl/pulls/4257,https://github.com/PointCloudLibrary/pcl/pull/4257,closed,4,3,1,1,1,4,4,0,"[{'name': 'changelog: API break'}, {'name': 'module: common'}, {'name': 'status: stale'}, {'name': 'priority: gsoc'}]",2020-07-08 15:09:19+00:00,2020-08-14 14:53:11+00:00,3195832.0,"36 days, 23:43:52","[{'comment_id': 452059080, 'comment_body': 'Definite ABI break and potential API break. ', 'comment_created': datetime.datetime(2020, 7, 9, 8, 42, 7, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 452354310, 'comment_body': ""Separate discussion worth having: Should we reorder the memory layout to make it more cache friendly? We're dumping away at API and ABI stability anyways"", 'comment_created': datetime.datetime(2020, 7, 9, 16, 48, 4, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 452700010, 'comment_body': ""Sure. What's your proposal?"", 'comment_created': datetime.datetime(2020, 7, 10, 8, 27, 43, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 453149902, 'comment_body': ""Maybe no change. As I started describing, I saw it'd cost too much (in time) and not provide comparable benefits"", 'comment_created': datetime.datetime(2020, 7, 11, 3, 39, 53, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}]","[{'commit_sha': 'b33acbd1b5d63d364a6ff04df3b201d87fa45f61', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}]",Haritha Jayasinghe,23292463,haritha.16@cse.mrt.ac.lk,User,,61,,7,20
433682793,[octree] Replace usage of `std::vector<int>` with `Indices` in octree module & tests,"Instances of `std::size_t` ignored for now. 
Need to address requirement for returning negative indices.
Use of `uint32_t` for width ignored for now.",False,4179,https://api.github.com/repos/PointCloudLibrary/pcl/pulls/4179,https://github.com/PointCloudLibrary/pcl/pull/4179,closed,128,125,11,3,5,3,2,0,"[{'name': 'module: octree'}, {'name': 'priority: gsoc'}]",2020-06-12 13:34:22+00:00,2021-07-25 08:20:55+00:00,35232393.0,"407 days, 18:46:33","[{'comment_id': 439502118, 'comment_body': 'API breakage here', 'comment_created': datetime.datetime(2020, 6, 12, 15, 53, 26, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 439502611, 'comment_body': 'API break here', 'comment_created': datetime.datetime(2020, 6, 12, 15, 54, 21, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 439503657, 'comment_body': 'API break', 'comment_created': datetime.datetime(2020, 6, 12, 15, 56, 12, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}]","[{'commit_sha': '91cc21e1ca2d0f6e58fcb598941ec7f6798fd887', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61fb2f593e26442d8c3958580f5b5583a671062d', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7eda2284db4f543b0d5d449fb336cd06fdd70e7', 'committer_username': 'haritha-j', 'committer_name': 'Haritha Jayasinghe', 'committer_email': 'haritha.16@cse.mrt.ac.lk', 'commit_date': datetime.datetime(2016, 11, 6, 12, 1, 5, tzinfo=datetime.timezone.utc)}]",Haritha Jayasinghe,23292463,haritha.16@cse.mrt.ac.lk,User,,61,,7,20

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
8162615,pcl,PointCloudLibrary/pcl,C++,4603,9797,426,671,14450,575,1,146,"[{'id': 476280915, 'number': 4373, 'closed': None, 'created': datetime.datetime(2020, 8, 31, 12, 56, 57, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 6, 'deletions': 2, 'state': 'open'}, {'id': 474752887, 'number': 4362, 'closed': datetime.datetime(2020, 8, 28, 0, 18, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 27, 14, 49, 12, tzinfo=datetime.timezone.utc), 'time_taken': 34129.0, 'time_delta': '9:28:49', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 472546173, 'number': 4347, 'closed': None, 'created': datetime.datetime(2020, 8, 24, 14, 8, 12, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 465, 'deletions': 0, 'state': 'open'}, {'id': 470751929, 'number': 4340, 'closed': datetime.datetime(2020, 8, 24, 9, 11, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 20, 8, 27, 35, tzinfo=datetime.timezone.utc), 'time_taken': 348228.0, 'time_delta': '4 days, 0:43:48', 'additions': 48, 'deletions': 20, 'state': 'closed'}, {'id': 470288372, 'number': 4338, 'closed': None, 'created': datetime.datetime(2020, 8, 19, 16, 42, 17, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 359, 'deletions': 230, 'state': 'open'}, {'id': 466952185, 'number': 4322, 'closed': datetime.datetime(2020, 8, 19, 9, 27, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 12, 19, 4, 11, tzinfo=datetime.timezone.utc), 'time_taken': 570221.0, 'time_delta': '6 days, 14:23:41', 'additions': 54, 'deletions': 27, 'state': 'closed'}, {'id': 465164905, 'number': 4313, 'closed': datetime.datetime(2020, 8, 18, 16, 43, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 9, 15, 22, 20, tzinfo=datetime.timezone.utc), 'time_taken': 782460.0, 'time_delta': '9 days, 1:21:00', 'additions': 342, 'deletions': 309, 'state': 'closed'}, {'id': 463583208, 'number': 4306, 'closed': datetime.datetime(2020, 8, 11, 9, 35, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 5, 19, 1, 57, tzinfo=datetime.timezone.utc), 'time_taken': 484421.0, 'time_delta': '5 days, 14:33:41', 'additions': 79, 'deletions': 131, 'state': 'closed'}, {'id': 457384000, 'number': 4294, 'closed': datetime.datetime(2020, 8, 19, 9, 17, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 27, 20, 26, 2, tzinfo=datetime.timezone.utc), 'time_taken': 1947074.0, 'time_delta': '22 days, 12:51:14', 'additions': 440, 'deletions': 440, 'state': 'closed'}, {'id': 446307581, 'number': 4257, 'closed': datetime.datetime(2020, 8, 14, 14, 53, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 8, 15, 9, 19, tzinfo=datetime.timezone.utc), 'time_taken': 3195832.0, 'time_delta': '36 days, 23:43:52', 'additions': 4, 'deletions': 3, 'state': 'closed'}, {'id': 445864720, 'number': 4256, 'closed': datetime.datetime(2020, 8, 14, 14, 53, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 8, 2, 30, 40, tzinfo=datetime.timezone.utc), 'time_taken': 3241370.0, 'time_delta': '37 days, 12:22:50', 'additions': 45, 'deletions': 18, 'state': 'closed'}, {'id': 440764245, 'number': 4231, 'closed': datetime.datetime(2020, 7, 25, 12, 47, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 26, 20, 3, 45, tzinfo=datetime.timezone.utc), 'time_taken': 2479437.0, 'time_delta': '28 days, 16:43:57', 'additions': 4, 'deletions': 3, 'state': 'closed'}, {'id': 439661676, 'number': 4228, 'closed': datetime.datetime(2020, 8, 14, 14, 53, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 25, 4, 54, 19, tzinfo=datetime.timezone.utc), 'time_taken': 4355972.0, 'time_delta': '50 days, 9:59:32', 'additions': 13, 'deletions': 12, 'state': 'closed'}, {'id': 439163264, 'number': 4224, 'closed': datetime.datetime(2020, 6, 25, 0, 15, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 24, 12, 5, 3, tzinfo=datetime.timezone.utc), 'time_taken': 43809.0, 'time_delta': '12:10:09', 'additions': 13, 'deletions': 12, 'state': 'closed'}, {'id': 438508595, 'number': 4211, 'closed': datetime.datetime(2020, 6, 24, 8, 50, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 23, 11, 31, tzinfo=datetime.timezone.utc), 'time_taken': 76780.0, 'time_delta': '21:19:40', 'additions': 41, 'deletions': 38, 'state': 'closed'}, {'id': 436396000, 'number': 4205, 'closed': datetime.datetime(2020, 6, 19, 18, 49, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 18, 11, 2, 12, tzinfo=datetime.timezone.utc), 'time_taken': 114458.0, 'time_delta': '1 day, 7:47:38', 'additions': 8, 'deletions': 0, 'state': 'closed'}, {'id': 435131937, 'number': 4199, 'closed': datetime.datetime(2020, 8, 14, 14, 52, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 16, 10, 48, 13, tzinfo=datetime.timezone.utc), 'time_taken': 5112244.0, 'time_delta': '59 days, 4:04:04', 'additions': 27, 'deletions': 26, 'state': 'closed'}, {'id': 435127967, 'number': 4198, 'closed': None, 'created': datetime.datetime(2020, 6, 16, 10, 40, 48, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 1176, 'deletions': 821, 'state': 'open'}, {'id': 434111972, 'number': 4184, 'closed': datetime.datetime(2020, 6, 14, 20, 50, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 14, 8, 20, 54, tzinfo=datetime.timezone.utc), 'time_taken': 44948.0, 'time_delta': '12:29:08', 'additions': 57, 'deletions': 0, 'state': 'closed'}, {'id': 433682793, 'number': 4179, 'closed': datetime.datetime(2021, 7, 25, 8, 20, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 12, 13, 34, 22, tzinfo=datetime.timezone.utc), 'time_taken': 35232393.0, 'time_delta': '407 days, 18:46:33', 'additions': 128, 'deletions': 125, 'state': 'closed'}, {'id': 432207300, 'number': 4173, 'closed': datetime.datetime(2020, 6, 10, 11, 25, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 10, 5, 15, 57, tzinfo=datetime.timezone.utc), 'time_taken': 22169.0, 'time_delta': '6:09:29', 'additions': 15, 'deletions': 15, 'state': 'closed'}, {'id': 428008743, 'number': 4166, 'closed': datetime.datetime(2020, 6, 10, 16, 24, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 4, 18, 16, 36, tzinfo=datetime.timezone.utc), 'time_taken': 511664.0, 'time_delta': '5 days, 22:07:44', 'additions': 29, 'deletions': 20, 'state': 'closed'}, {'id': 422785130, 'number': 4146, 'closed': datetime.datetime(2020, 8, 14, 11, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 25, 14, 42, 28, tzinfo=datetime.timezone.utc), 'time_taken': 6986912.0, 'time_delta': '80 days, 20:48:32', 'additions': 48, 'deletions': 70, 'state': 'closed'}, {'id': 392028185, 'number': 3775, 'closed': None, 'created': datetime.datetime(2020, 3, 22, 15, 59, 22, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 92, 'deletions': 37, 'state': 'open'}, {'id': 385240417, 'number': 3723, 'closed': datetime.datetime(2022, 10, 16, 13, 16, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 8, 8, 24, 36, tzinfo=datetime.timezone.utc), 'time_taken': 82270317.0, 'time_delta': '952 days, 4:51:57', 'additions': 305, 'deletions': 0, 'state': 'closed'}]"
12293215,pcl,larshg/pcl,C++,3,0,2,654,14375,0,14,0,"[{'id': 462311034, 'number': 8, 'closed': datetime.datetime(2020, 8, 3, 17, 47, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 3, 17, 40, 31, tzinfo=datetime.timezone.utc), 'time_taken': 435.0, 'time_delta': '0:07:15', 'additions': 18, 'deletions': 3, 'state': 'closed'}, {'id': 462262480, 'number': 7, 'closed': datetime.datetime(2020, 8, 3, 16, 6, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 3, 16, 0, 9, tzinfo=datetime.timezone.utc), 'time_taken': 371.0, 'time_delta': '0:06:11', 'additions': 2, 'deletions': 2, 'state': 'closed'}]"
