pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
682521024,[WIP] Runtime plugins,"## Description

This is my first try to enable runtime plugin support in the Reva ecosystem. This PR introduces a new `plugin` package, which is responsible for loading the plugins using the [hashicorp go-plugin](https://github.com/hashicorp/go-plugin) library. The current implementation uses Remote Procedure Call (RPC) to communicate between the host(reva core) and the plugin. I tried to move the *userprovider* drivers to the runtime paradigm, which implies that a user load userprovider drivers (like json, ldap etc) at runtime by just pointing to the binary in the configuration. 

## Working

In order to facilitate backward compatibility, there aren't any major changes to the configuration. Also, loading plugins from the in-memory is also supported. If the user wishes to load external plugins, he/she needs to add an extra shared config:
```
[shared]
plugin = true

[grpc.services.userprovider]
driver = '/path/to/binary'
```
This will configure the services to load plugins from the plugins package rather than the registry. The plugins package creates an rpc client, loads the required plugin and returns an `interface{}` value, which is then asserted into required type by the respective services. It is then responsibility of the services to call the `New` method to initialize the plugin with the configurations.

## Progress
- [x] Global Plugins flag: Option to load plugins from either registry or plugin package
- [x] Complementing the existing userprovider JSON driver with runtime paradigm.
- [x] Plugin Package
  - [x] Support for loading plugin *binaries*
  - [x] Support for compiling and loading the plugin from source
  - [ ] Support for plugins hosted as a version controlled repository
~~- [ ] Watcher module (Hot Reload)~~
~~- [ ] Separate dev and prod environment~~

 Since, there maybe a lot of changes involved with the approach I've taken, I am creating a draft PR. Any comments for improvement would be highly appreciated! :)
",True,1861,https://api.github.com/repos/cs3org/reva/pulls/1861,https://github.com/cs3org/reva/pull/1861,closed,1007,62,26,34,23,60,1,0,[{'name': 'runtime-plugins'}],2021-07-02 10:33:08+00:00,2021-08-05 11:30:44+00:00,2941056.0,"34 days, 0:57:36","[{'comment_id': 662915068, 'comment_body': 'Currently, I just have this dummy path. Should I also provide the actual binary for the purpose of testing?', 'comment_created': datetime.datetime(2021, 7, 2, 10, 34, 43, tzinfo=datetime.timezone.utc), 'commenter': 'jimil749', 'type': 'User'}, {'comment_id': 662917940, 'comment_body': ""I'm using `filepath.Base` to retrieve the actual driver name from the config. Since, whenever we want load a binary, we're providing the absolute path (something like `/home/path/to/binary`), due to which we would not be able to access the plugin configuration via `c.Drivers[c.Driver]` (this would just result in an empty map) because, `c.Driver` would be `/home/path/to/binary` as opposed to just the driver name. So in order to access the plugin configuration I had to use `filepath.Base`  "", 'comment_created': datetime.datetime(2021, 7, 2, 10, 40, 10, tzinfo=datetime.timezone.utc), 'commenter': 'jimil749', 'type': 'User'}, {'comment_id': 662921016, 'comment_body': ""I've used an extra interface to facilitate the rpc communication. The only diff is that this interface has an extra `New` method to initialize the plugins"", 'comment_created': datetime.datetime(2021, 7, 2, 10, 45, 37, tzinfo=datetime.timezone.utc), 'commenter': 'jimil749', 'type': 'User'}, {'comment_id': 662953191, 'comment_body': 'Yep, the full path so is clear to the reader.', 'comment_created': datetime.datetime(2021, 7, 2, 11, 46, 44, tzinfo=datetime.timezone.utc), 'commenter': 'labkode', 'type': 'User'}, {'comment_id': 662953585, 'comment_body': 'That is okay! We can think of having some aliasing in the future.', 'comment_created': datetime.datetime(2021, 7, 2, 11, 47, 27, tzinfo=datetime.timezone.utc), 'commenter': 'labkode', 'type': 'User'}, {'comment_id': 662955333, 'comment_body': 'Uhm, this in non ideal. I would expect concrete types to use New to create an object that implement the interface.\r\n\r\nWith this approach,  the concrete object (after has been created) has a New method, this is very confusing.', 'comment_created': datetime.datetime(2021, 7, 2, 11, 50, 48, tzinfo=datetime.timezone.utc), 'commenter': 'labkode', 'type': 'User'}, {'comment_id': 663100844, 'comment_body': ""@labkode I know this is a bit weird and confusing, but since we're using RPCs for communication, there is no way to initialize the object that implements the interface i.e no way to configure the plugin. The `New` method is to pass the configuration (the `user.demo.json` file in case of json plugin.) Without this method, we cannot pass the config, rendering the subsequent methods useless. "", 'comment_created': datetime.datetime(2021, 7, 2, 15, 39, 23, tzinfo=datetime.timezone.utc), 'commenter': 'jimil749', 'type': 'User'}, {'comment_id': 663101362, 'comment_body': ""Okay. I'll add the plugin binary in the example folder."", 'comment_created': datetime.datetime(2021, 7, 2, 15, 40, 17, tzinfo=datetime.timezone.utc), 'commenter': 'jimil749', 'type': 'User'}, {'comment_id': 663106109, 'comment_body': 'To avoid confusion, we can maybe change the function name to something more appropriate like `Initialize()`?', 'comment_created': datetime.datetime(2021, 7, 2, 15, 48, 30, tzinfo=datetime.timezone.utc), 'commenter': 'jimil749', 'type': 'User'}, {'comment_id': 665266129, 'comment_body': 'This should be called from `pkg/user.Init()`', 'comment_created': datetime.datetime(2021, 7, 7, 11, 0, 27, tzinfo=datetime.timezone.utc), 'commenter': 'ishank011', 'type': 'User'}, {'comment_id': 666849952, 'comment_body': '@labkode, this has been updated! ', 'comment_created': datetime.datetime(2021, 7, 9, 10, 32, 42, tzinfo=datetime.timezone.utc), 'commenter': 'jimil749', 'type': 'User'}, {'comment_id': 669466175, 'comment_body': 'Is this okay? I am currently assuming that if the user wants to compile, he/he can provide path to the source code ending with `.go`. So whenever the config ends with `.go`, we compile!', 'comment_created': datetime.datetime(2021, 7, 14, 9, 55, 10, tzinfo=datetime.timezone.utc), 'commenter': 'jimil749', 'type': 'User'}, {'comment_id': 669468187, 'comment_body': 'I store the binaries in `./bin/userprovider/<rand_int>`. Is this fine?', 'comment_created': datetime.datetime(2021, 7, 14, 9, 57, 59, tzinfo=datetime.timezone.utc), 'commenter': 'jimil749', 'type': 'User'}, {'comment_id': 669477877, 'comment_body': 'Again, I need to do this because, whenever a user provides configure like:\r\n```\r\n[grpc.services.userprovider]\r\ndriver = /home/path/to/json.go\r\n\r\n[grpc.services.userprovider.json]\r\nusers = users.demo.json\r\n```\r\nso I need to strip off, `.go` from the driver field to access to users field!', 'comment_created': datetime.datetime(2021, 7, 14, 10, 12, 11, tzinfo=datetime.timezone.utc), 'commenter': 'jimil749', 'type': 'User'}, {'comment_id': 669478868, 'comment_body': 'This path should point to a package as it can have multiple go files.', 'comment_created': datetime.datetime(2021, 7, 14, 10, 13, 42, tzinfo=datetime.timezone.utc), 'commenter': 'ishank011', 'type': 'User'}, {'comment_id': 669480003, 'comment_body': ""Why a random integer? Let's use `./bin/userprovider/driver_name`, we can replace the old binaries and won't have to worry about cleaning those up."", 'comment_created': datetime.datetime(2021, 7, 14, 10, 15, 20, tzinfo=datetime.timezone.utc), 'commenter': 'ishank011', 'type': 'User'}, {'comment_id': 669480113, 'comment_body': ""Ah okay. So then we can stat the path, and check if that's a directory, we compile else we directly load."", 'comment_created': datetime.datetime(2021, 7, 14, 10, 15, 29, tzinfo=datetime.timezone.utc), 'commenter': 'jimil749', 'type': 'User'}, {'comment_id': 669480369, 'comment_body': 'Pointing to the package should take care of that', 'comment_created': datetime.datetime(2021, 7, 14, 10, 15, 48, tzinfo=datetime.timezone.utc), 'commenter': 'ishank011', 'type': 'User'}, {'comment_id': 669483828, 'comment_body': ""Yeah makes sense. I'll make the changes"", 'comment_created': datetime.datetime(2021, 7, 14, 10, 20, 56, tzinfo=datetime.timezone.utc), 'commenter': 'jimil749', 'type': 'User'}, {'comment_id': 669512308, 'comment_body': ""This client should be a singleton and whenever a service calls Load with a driver type, `Dispense` should be called and that instance of the plugin should be returned. So when shutting down reva, each plugin instance won't need to be killed, you can just call `Kill` on the singleton. I just glanced over the go-plugin code and we'll need to look into the specifics, but I think it should work"", 'comment_created': datetime.datetime(2021, 7, 14, 11, 7, 26, tzinfo=datetime.timezone.utc), 'commenter': 'ishank011', 'type': 'User'}, {'comment_id': 669528074, 'comment_body': 'Here, the `path` should be *relative*, so when we are configuring the driver, the path should be relative to the current working directory because `go build` does not work when we provide absolute path. So config should be like:\r\n```\r\n[grpc.services.userprovider]\r\ndriver = ""../json""\r\n```', 'comment_created': datetime.datetime(2021, 7, 14, 11, 32, 32, tzinfo=datetime.timezone.utc), 'commenter': 'jimil749', 'type': 'User'}, {'comment_id': 669528954, 'comment_body': '`go build -o json /home/path/to/source` is not supported', 'comment_created': datetime.datetime(2021, 7, 14, 11, 33, 49, tzinfo=datetime.timezone.utc), 'commenter': 'jimil749', 'type': 'User'}, {'comment_id': 669536537, 'comment_body': 'Hmm, with the current pattern, we are essentially creating a *new* client for every service. So by having client as a singleton, we want every service to use that same client to connect to the drivers?', 'comment_created': datetime.datetime(2021, 7, 14, 11, 45, 36, tzinfo=datetime.timezone.utc), 'commenter': 'jimil749', 'type': 'User'}, {'comment_id': 669541278, 'comment_body': ""Okay no it won't work, you need to pass the binary location when instantiating it"", 'comment_created': datetime.datetime(2021, 7, 14, 11, 52, 57, tzinfo=datetime.timezone.utc), 'commenter': 'ishank011', 'type': 'User'}, {'comment_id': 675420486, 'comment_body': ""You can remove the commented config, let's keep it as simple as possible. Also, remove the binary"", 'comment_created': datetime.datetime(2021, 7, 23, 9, 16, 42, tzinfo=datetime.timezone.utc), 'commenter': 'ishank011', 'type': 'User'}, {'comment_id': 675432422, 'comment_body': ""Let's rename the var to `binaryPath`"", 'comment_created': datetime.datetime(2021, 7, 23, 9, 37, 29, tzinfo=datetime.timezone.utc), 'commenter': 'ishank011', 'type': 'User'}, {'comment_id': 675433049, 'comment_body': 'Revers the order of parameters', 'comment_created': datetime.datetime(2021, 7, 23, 9, 38, 37, tzinfo=datetime.timezone.utc), 'commenter': 'ishank011', 'type': 'User'}, {'comment_id': 675433784, 'comment_body': 'Move lines 66-77 to a different method', 'comment_created': datetime.datetime(2021, 7, 23, 9, 39, 54, tzinfo=datetime.timezone.utc), 'commenter': 'ishank011', 'type': 'User'}, {'comment_id': 675437384, 'comment_body': ""This struct doesn't store any configuration. Maybe rename it as `Plugin`? (think of a better name please xD)"", 'comment_created': datetime.datetime(2021, 7, 23, 9, 44, 49, tzinfo=datetime.timezone.utc), 'commenter': 'ishank011', 'type': 'User'}, {'comment_id': 675437829, 'comment_body': ""Let's have the registry in the plugin pkg only"", 'comment_created': datetime.datetime(2021, 7, 23, 9, 45, 18, tzinfo=datetime.timezone.utc), 'commenter': 'ishank011', 'type': 'User'}, {'comment_id': 675441766, 'comment_body': 'Typo `implementation`', 'comment_created': datetime.datetime(2021, 7, 23, 9, 50, 8, tzinfo=datetime.timezone.utc), 'commenter': 'ishank011', 'type': 'User'}, {'comment_id': 675445437, 'comment_body': ""Add a check to register this only if the plugin flag is set. Might save some memory overhead. Although I'm not sure if the config is propagated before or after the init methods are called, so can you check that please?"", 'comment_created': datetime.datetime(2021, 7, 23, 9, 53, 16, tzinfo=datetime.timezone.utc), 'commenter': 'ishank011', 'type': 'User'}, {'comment_id': 675481055, 'comment_body': ""Unfortunately, we can't do that. Config is propagated after the init methods are called. So it would always be false!"", 'comment_created': datetime.datetime(2021, 7, 23, 10, 56, 48, tzinfo=datetime.timezone.utc), 'commenter': 'jimil749', 'type': 'User'}, {'comment_id': 675554453, 'comment_body': ""We need to create this directory. Also, not sure about creating it in the directory where you're running reva from. Maybe `/var/tmp/reva/bin/`?"", 'comment_created': datetime.datetime(2021, 7, 23, 13, 13, 39, tzinfo=datetime.timezone.utc), 'commenter': 'ishank011', 'type': 'User'}, {'comment_id': 675557256, 'comment_body': ""Why are we using `GO111MODULE=off`? We have the go.mod file in the parent directory, so shouldn't it be fine? I got multiple errors with the flag set to off because the libraries weren't present in my path. And it will be deprecated from go 1.16 so we shouldn't use it in the first place."", 'comment_created': datetime.datetime(2021, 7, 23, 13, 17, 57, tzinfo=datetime.timezone.utc), 'commenter': 'ishank011', 'type': 'User'}, {'comment_id': 675560164, 'comment_body': 'Okay no, this works. I only ran into the other issue', 'comment_created': datetime.datetime(2021, 7, 23, 13, 22, 10, tzinfo=datetime.timezone.utc), 'commenter': 'ishank011', 'type': 'User'}, {'comment_id': 675653240, 'comment_body': 'Yes, I forgot to update this. I also got the error, I did this because I was testing it on go project without using go modules. I will remove it! ', 'comment_created': datetime.datetime(2021, 7, 23, 15, 29, 51, tzinfo=datetime.timezone.utc), 'commenter': 'jimil749', 'type': 'User'}, {'comment_id': 675693372, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2021, 7, 23, 16, 33, 54, tzinfo=datetime.timezone.utc), 'commenter': 'jimil749', 'type': 'User'}, {'comment_id': 676493209, 'comment_body': ""@ishank011, I am adding the regex check here. So when we have to load from the registry, the configuration should just be a single word (like `json`, `s3` etc). Otherwise, when we'd want to load from the plugin package the user will provide something like, `./json` or `github.com/reva-pkg/user`. "", 'comment_created': datetime.datetime(2021, 7, 26, 10, 46, 36, tzinfo=datetime.timezone.utc), 'commenter': 'jimil749', 'type': 'User'}, {'comment_id': 676622968, 'comment_body': 'Perfect! Will go through it', 'comment_created': datetime.datetime(2021, 7, 26, 13, 51, 29, tzinfo=datetime.timezone.utc), 'commenter': 'ishank011', 'type': 'User'}, {'comment_id': 676667474, 'comment_body': 'remove the extra line (sorry, OCD)', 'comment_created': datetime.datetime(2021, 7, 26, 14, 39, 13, tzinfo=datetime.timezone.utc), 'commenter': 'ishank011', 'type': 'User'}, {'comment_id': 676706115, 'comment_body': 'Reverse the parameter sequence here as well', 'comment_created': datetime.datetime(2021, 7, 26, 15, 21, 17, tzinfo=datetime.timezone.utc), 'commenter': 'ishank011', 'type': 'User'}, {'comment_id': 676706664, 'comment_body': 'Declare as a global const', 'comment_created': datetime.datetime(2021, 7, 26, 15, 21, 49, tzinfo=datetime.timezone.utc), 'commenter': 'ishank011', 'type': 'User'}, {'comment_id': 676710689, 'comment_body': ""I don't see the plugin logs anywhere. What do we need to enable that?"", 'comment_created': datetime.datetime(2021, 7, 26, 15, 26, 32, tzinfo=datetime.timezone.utc), 'commenter': 'ishank011', 'type': 'User'}, {'comment_id': 676711327, 'comment_body': 'Rename the file', 'comment_created': datetime.datetime(2021, 7, 26, 15, 27, 15, tzinfo=datetime.timezone.utc), 'commenter': 'ishank011', 'type': 'User'}, {'comment_id': 676722665, 'comment_body': 'Let\'s delegate this to the plugin pkg. We should do something like\r\n\r\n```\r\nfunc getDriver(c *config) (user.Manager, *plugin.RevaPlugin, error) {\r\n\tp, err := plugin.Load(""userprovider"", c.Driver)\r\n\tif err == nil {\r\n\t    // assert the loaded plugin into required interface\r\n\t    manager, ok := plugin.Plugin.(user.Manager)\r\n\t   ...\r\n\t} else if IsNotFound(err) {\r\n\t    // plugin not found, fetch the driver from the in-memory registry\r\n\t    if f, ok := registry.NewFuncs[c.Driver]; ok {\r\n\t    \t    mgr, err := f(c.Drivers[c.Driver])\r\n\t\t    return mgr, nil, err\r\n\t    }\r\n\t} else {\r\n\t    return nil, nil, err\r\n\t}\r\n\treturn nil, nil, errtypes.NotFound(fmt.Sprintf(""driver %s not found for user manager"", c.Driver))\r\n}\r\n```\r\n\r\nAlso, have the regex as a global var so we don\'t have to compile it every time', 'comment_created': datetime.datetime(2021, 7, 26, 15, 40, 53, tzinfo=datetime.timezone.utc), 'commenter': 'ishank011', 'type': 'User'}, {'comment_id': 676731000, 'comment_body': ""Ideally you should see the log because I've set log level to `hclog.Trace`. I am getting the following output:\r\n![Screenshot from 2021-07-26 21-18-37](https://user-images.githubusercontent.com/47107987/127019354-c59622b4-e30d-415d-84d1-d7bed2d87bb7.png)\r\n"", 'comment_created': datetime.datetime(2021, 7, 26, 15, 50, 30, tzinfo=datetime.timezone.utc), 'commenter': 'jimil749', 'type': 'User'}, {'comment_id': 676739485, 'comment_body': ""Does it make sense to rename this to `plugin.go` and rename the current `plugin.go` to `loader.go`? because that's what the current `plugin.go` is doing! Not too sure though."", 'comment_created': datetime.datetime(2021, 7, 26, 16, 0, 15, tzinfo=datetime.timezone.utc), 'commenter': 'jimil749', 'type': 'User'}, {'comment_id': 676804798, 'comment_body': ""I meant how do we log something from the plugin? We probably need to pass the client's context here as our logger is associated with it.\r\n\r\nhttps://github.com/cs3org/reva/blob/968fd84137744f7dd3a52685bc8d0c1785a2e52c/pkg/user/rpc_user.go#L180-L184"", 'comment_created': datetime.datetime(2021, 7, 26, 17, 29, 10, tzinfo=datetime.timezone.utc), 'commenter': 'ishank011', 'type': 'User'}, {'comment_id': 677323402, 'comment_body': 'Done! :+1: ', 'comment_created': datetime.datetime(2021, 7, 27, 10, 31, 3, tzinfo=datetime.timezone.utc), 'commenter': 'jimil749', 'type': 'User'}, {'comment_id': 681887409, 'comment_body': ""We can register interfaces (which we would like to pass as context) here. But I am not sure what all structs/interfaces that we'd like to add!"", 'comment_created': datetime.datetime(2021, 8, 3, 15, 48, 47, tzinfo=datetime.timezone.utc), 'commenter': 'jimil749', 'type': 'User'}, {'comment_id': 683239353, 'comment_body': 'Are we able to log from the plugins now?', 'comment_created': datetime.datetime(2021, 8, 5, 8, 25, 10, tzinfo=datetime.timezone.utc), 'commenter': 'ishank011', 'type': 'User'}, {'comment_id': 683300515, 'comment_body': ""I tried passing the user object as a part of the context. I was able to access the user object (via the context.Value) on the plugin side. But here's the problem with the logger: the appctx's `WithLogger` attaches zerolog's `ctxKey` struct to the context, which is not exported, hence we cannot register that at init time."", 'comment_created': datetime.datetime(2021, 8, 5, 9, 44, 58, tzinfo=datetime.timezone.utc), 'commenter': 'jimil749', 'type': 'User'}, {'comment_id': 683310949, 'comment_body': 'Can you look into ways of getting around that?', 'comment_created': datetime.datetime(2021, 8, 5, 9, 59, 30, tzinfo=datetime.timezone.utc), 'commenter': 'ishank011', 'type': 'User'}, {'comment_id': 683311775, 'comment_body': ""In the auth pkg, we're passing `auth.Scope` without registering it. How does that work?"", 'comment_created': datetime.datetime(2021, 8, 5, 10, 0, 43, tzinfo=datetime.timezone.utc), 'commenter': 'ishank011', 'type': 'User'}, {'comment_id': 683321141, 'comment_body': 'I think this *might* be a roadblock as there is not way to `gob.Register(ctxkey{})` at init stage because ctxKey{} is private! Hence the RPC is always going to fail when attaching logger to context.', 'comment_created': datetime.datetime(2021, 8, 5, 10, 14, 12, tzinfo=datetime.timezone.utc), 'commenter': 'jimil749', 'type': 'User'}, {'comment_id': 683362152, 'comment_body': '> Can you look into ways of getting around that?\r\n\r\nYes. I was just investigating ways around this!', 'comment_created': datetime.datetime(2021, 8, 5, 11, 20, 4, tzinfo=datetime.timezone.utc), 'commenter': 'jimil749', 'type': 'User'}, {'comment_id': 683368120, 'comment_body': ""I'll merge this for now but this needs to be addressed ASAP."", 'comment_created': datetime.datetime(2021, 8, 5, 11, 29, 52, tzinfo=datetime.timezone.utc), 'commenter': 'ishank011', 'type': 'User'}, {'comment_id': 683380094, 'comment_body': ""Yes! So the reason we're getting the gob error is because we're passing `map[interface{}]interface{}`, If we are passing `interface{}` through gob, that NEEDS to be registered, passing structs is fine. That's why it does not complain when using `auth.Scope`. https://pkg.go.dev/encoding/gob#Register I'll further dig into this"", 'comment_created': datetime.datetime(2021, 8, 5, 11, 49, 34, tzinfo=datetime.timezone.utc), 'commenter': 'jimil749', 'type': 'User'}, {'comment_id': 683466552, 'comment_body': ""Then instead of the map, let's store all the keys that we know of in a struct. The ones we currently use are the logger, user object and the token."", 'comment_created': datetime.datetime(2021, 8, 5, 13, 44, 25, tzinfo=datetime.timezone.utc), 'commenter': 'ishank011', 'type': 'User'}]","[{'commit_sha': '6f7c29c88aced352afae2c4e0b69df9856a1921d', 'committer_username': 'jimil749', 'committer_name': 'Jimil Desai', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 28, 12, 8, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e840ee475ad73eba83252da4a3d8380d7eae230d', 'committer_username': 'jimil749', 'committer_name': 'Jimil Desai', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 28, 12, 8, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8db673234753653a50831a9682c7972badcb36cd', 'committer_username': 'jimil749', 'committer_name': 'Jimil Desai', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 28, 12, 8, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4a2aa3515669640f29ac3c09eb87613f4a02b263', 'committer_username': 'jimil749', 'committer_name': 'Jimil Desai', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 28, 12, 8, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd984351b14e57e8ae2df16386bf8034212d3a3cf', 'committer_username': 'jimil749', 'committer_name': 'Jimil Desai', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 28, 12, 8, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68f60c1cb489d004507caba0e00d442ebbf5b55b', 'committer_username': 'jimil749', 'committer_name': 'Jimil Desai', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 28, 12, 8, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07d2e4d7e737b7e47e035729e8cc2e2b80926227', 'committer_username': 'jimil749', 'committer_name': 'Jimil Desai', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 28, 12, 8, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76f806b697e240e8d143d2314c27eb1c117603db', 'committer_username': 'jimil749', 'committer_name': 'Jimil Desai', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 28, 12, 8, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5446d2f2e6038667f8cef7c43941a9813e07a3cd', 'committer_username': 'jimil749', 'committer_name': 'Jimil Desai', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 28, 12, 8, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a84fb75ac642a41fa7a6e4f40608afb1bb01d173', 'committer_username': 'jimil749', 'committer_name': 'Jimil Desai', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 28, 12, 8, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3fa53eab41b15acb55051546b1965521671e5d3', 'committer_username': 'jimil749', 'committer_name': 'Jimil Desai', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 28, 12, 8, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '26fd59ecb16fc78f3b176a8b38ad0baf99afcf99', 'committer_username': 'jimil749', 'committer_name': 'Jimil Desai', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 28, 12, 8, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67300dd04820cfa89b2e6aa6ada383454479dee3', 'committer_username': 'jimil749', 'committer_name': 'Jimil Desai', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 28, 12, 8, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a92ba05b18478f15e5059be9850576ca8c485ff7', 'committer_username': 'jimil749', 'committer_name': 'Jimil Desai', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 28, 12, 8, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '98cb4087d3412aa996ab069bac77017d5eda1b29', 'committer_username': 'jimil749', 'committer_name': 'Jimil Desai', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 28, 12, 8, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11c11cfe320955794ce553026a89aed4649c9a70', 'committer_username': 'jimil749', 'committer_name': 'Jimil Desai', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 28, 12, 8, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f1234b4376b01d992628c8447fc9c70f2b31eab', 'committer_username': 'jimil749', 'committer_name': 'Jimil Desai', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 28, 12, 8, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd1a590af52b8b32c16ceb7f4d28a6222d0e82349', 'committer_username': 'jimil749', 'committer_name': 'Jimil Desai', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 28, 12, 8, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c08741d8339ef1e9fdde95b28e55b8c4c10d8ee', 'committer_username': 'jimil749', 'committer_name': 'Jimil Desai', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 28, 12, 8, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51eb17e7ac3664c4391e6f4b6fc6cea8ab6e08b7', 'committer_username': 'jimil749', 'committer_name': 'Jimil Desai', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 28, 12, 8, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf42dec3b649749bc3acab62cb0a7ae274480752', 'committer_username': 'jimil749', 'committer_name': 'Jimil Desai', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 28, 12, 8, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b91bb737c5784b81b7cf4caa27d1712f9a674d5e', 'committer_username': 'jimil749', 'committer_name': 'Jimil Desai', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 28, 12, 8, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b00d1737d0be7643324d327635e208eb6be1f09', 'committer_username': 'jimil749', 'committer_name': 'Jimil Desai', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 28, 12, 8, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ed437360b10b9fcbc67fe2e2f80a38f19f7833c', 'committer_username': 'jimil749', 'committer_name': 'Jimil Desai', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 28, 12, 8, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad41d49ea1db618aaedf341c7ef094f7aa4b8d4b', 'committer_username': 'jimil749', 'committer_name': 'Jimil Desai', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 28, 12, 8, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14cea90d04c1828704ba620aab2f9574f0ea9b1c', 'committer_username': 'jimil749', 'committer_name': 'Jimil Desai', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 28, 12, 8, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '32c643059212a43d863e85028832e366f46904d4', 'committer_username': 'jimil749', 'committer_name': 'Jimil Desai', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 28, 12, 8, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09e285958c30f55fa0e047cac8637507e4b377f3', 'committer_username': 'jimil749', 'committer_name': 'Jimil Desai', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 28, 12, 8, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '084d5e1dd6bf50b8c2849be0f128b04597dadafa', 'committer_username': 'jimil749', 'committer_name': 'Jimil Desai', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 28, 12, 8, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2990ddf6297a703d1139376ae9f5d97e4288ebd8', 'committer_username': 'jimil749', 'committer_name': 'Jimil Desai', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 28, 12, 8, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8de61b7f2665f7d01bea6b7196335fd96fc3838', 'committer_username': 'jimil749', 'committer_name': 'Jimil Desai', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 28, 12, 8, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c06d0578f7bfbef7b7d89b9f5e5cda2c2cd60e36', 'committer_username': 'jimil749', 'committer_name': 'Jimil Desai', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 28, 12, 8, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab793c339b3ec3436d3a65b58fa17cf87281d8c1', 'committer_username': 'jimil749', 'committer_name': 'Jimil Desai', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 28, 12, 8, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c0609771f95eb5eaae0baf0e286046430221c7fc', 'committer_username': 'jimil749', 'committer_name': 'Jimil Desai', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 28, 12, 8, 19, tzinfo=datetime.timezone.utc)}]",Jimil Desai,47107987,,User,,60,,19,36
705845496,Enable fetching plugins from github repository,"This PR adds following changes:

1. **Feature**: Enables fetching reva-plugins from github, Users can provide following configuration:
```
[grpc.services.userprovider]
driver=https://github.com/jimil749/json
```
This configuration downloads the plugin source code into `/var/reva/tmp/ext/<pluginType>/<driver>`, compiles the code and loads it onto reva at runtime. Repo used for testing: [https://github.com/jimil749/json](https://github.com/jimil749/json)

2. **Fix**: Use Struct based approach to encode and decode context kv pairs. Instead of sending `map[interface{}]interface{}` over RPC, we extract kv pairs into following struct:

```go
type Ctx struct {
    User   []*userpb.User
    Token  []string
}
```
and send this struct over RPC.

PS: @ishank011 I did not test having github repo w/o go.mod because the traditional `go get` would be deprecated in the further go versions. If we still want to support plugins w/o go modules, we'd have to download the files into `GOPATH` for successful compilation.

",False,1970,https://api.github.com/repos/cs3org/reva/pulls/1970,https://github.com/cs3org/reva/pull/1970,closed,247,65,9,11,3,40,1,0,[{'name': 'GSoC'}],2021-08-07 06:35:16+00:00,2023-07-19 15:05:47+00:00,61461031.0,"711 days, 8:30:31","[{'comment_id': 684593514, 'comment_body': 'This is needed because of go-getter. It errors when url is of the type `https://github.com/jimil749/...`, it should be of the type: `github.com/jimil749/...`', 'comment_created': datetime.datetime(2021, 8, 7, 6, 37, 5, tzinfo=datetime.timezone.utc), 'commenter': 'jimil749', 'type': 'User'}, {'comment_id': 684594249, 'comment_body': 'Does this work? Not too sure. Just checking the type to populate `User`/`Token`', 'comment_created': datetime.datetime(2021, 8, 7, 6, 44, 22, tzinfo=datetime.timezone.utc), 'commenter': 'jimil749', 'type': 'User'}, {'comment_id': 684656878, 'comment_body': 'Move this to plugin pkg', 'comment_created': datetime.datetime(2021, 8, 7, 17, 17, 15, tzinfo=datetime.timezone.utc), 'commenter': 'ishank011', 'type': 'User'}, {'comment_id': 684656879, 'comment_body': ""I'd rather just use `ContextGetToken` and `ContextGetUser` "", 'comment_created': datetime.datetime(2021, 8, 7, 17, 17, 17, tzinfo=datetime.timezone.utc), 'commenter': 'ishank011', 'type': 'User'}, {'comment_id': 684945364, 'comment_body': 'Thought of doing that, but it leads to cyclic dependencies b/w the user and plugin package. (User imports the plugin package for registering and plugin package would import the user package for the `ContextGetUser` and `ContextSetUser` methods). What do you think about moving all the user-context methods into a separate package, maybe `userctx`? This would involve updating all the packages that use usercontext!', 'comment_created': datetime.datetime(2021, 8, 9, 6, 37, 45, tzinfo=datetime.timezone.utc), 'commenter': 'jimil749', 'type': 'User'}, {'comment_id': 684945445, 'comment_body': ':+1:', 'comment_created': datetime.datetime(2021, 8, 9, 6, 37, 56, tzinfo=datetime.timezone.utc), 'commenter': 'jimil749', 'type': 'User'}, {'comment_id': 685112633, 'comment_body': ""Let's have the methods to read and set ctx in `pkg/plugin/ctx`"", 'comment_created': datetime.datetime(2021, 8, 9, 11, 28, 6, tzinfo=datetime.timezone.utc), 'commenter': 'ishank011', 'type': 'User'}, {'comment_id': 685113170, 'comment_body': 'Please run `go mod tidy` once', 'comment_created': datetime.datetime(2021, 8, 9, 11, 29, 3, tzinfo=datetime.timezone.utc), 'commenter': 'ishank011', 'type': 'User'}, {'comment_id': 685115148, 'comment_body': ""The in-memory plugins can have hyphens and underscores, so let's add that to the regex "", 'comment_created': datetime.datetime(2021, 8, 9, 11, 32, 19, tzinfo=datetime.timezone.utc), 'commenter': 'ishank011', 'type': 'User'}, {'comment_id': 685115576, 'comment_body': 'Move lines 127-142 to a different method maybe?', 'comment_created': datetime.datetime(2021, 8, 9, 11, 32, 59, tzinfo=datetime.timezone.utc), 'commenter': 'ishank011', 'type': 'User'}, {'comment_id': 685117143, 'comment_body': 'Why do we need the Parse check after we call ParseRequestURI?', 'comment_created': datetime.datetime(2021, 8, 9, 11, 35, 39, tzinfo=datetime.timezone.utc), 'commenter': 'ishank011', 'type': 'User'}, {'comment_id': 685122739, 'comment_body': ""That works, but wouldn't lead to some code duplication?"", 'comment_created': datetime.datetime(2021, 8, 9, 11, 45, 43, tzinfo=datetime.timezone.utc), 'commenter': 'jimil749', 'type': 'User'}, {'comment_id': 685126185, 'comment_body': ""This isn't really good. We need to support other protocols such as git as well. It even says there in the README.\r\n\r\n> Protocols are used to download files/directories using a specific mechanism. Example protocols are Git and HTTP.\r\n\r\nWe can pass the getters to the client https://github.com/hashicorp/go-getter/blob/main/client.go#L144 https://github.com/hashicorp/go-getter/blob/main/get.go#L67-L75"", 'comment_created': datetime.datetime(2021, 8, 9, 11, 51, 33, tzinfo=datetime.timezone.utc), 'commenter': 'ishank011', 'type': 'User'}, {'comment_id': 685126424, 'comment_body': 'How so?', 'comment_created': datetime.datetime(2021, 8, 9, 11, 51, 55, tzinfo=datetime.timezone.utc), 'commenter': 'ishank011', 'type': 'User'}, {'comment_id': 685144999, 'comment_body': 'Are you suggesting to *move* the methods from user pkg to `pkg/plugin/ctx`? Because we already have methods to Get and Set contexts in `user` pkg and having the same methods in `pkg/plugin/ctx` would lead to duplication!', 'comment_created': datetime.datetime(2021, 8, 9, 12, 22, 11, tzinfo=datetime.timezone.utc), 'commenter': 'jimil749', 'type': 'User'}, {'comment_id': 685164471, 'comment_body': 'With the current mechanism, we are supporting Git protocol. The URL of the type `github.com/jimil749/json` would be turned into Git URL by go-getter. The go-getter uses Git protocol to fetch the repo.\r\n\r\n> The concept of a detector automatically turns invalid URLs into proper URLs. For example: ""github.com/hashicorp/go-getter"" would turn into a Git URL. Or ""./foo"" would turn into a file URL\r\n\r\nReason to trim `https://` was because `github.com/jimil/...` is not a valid URL (w/o the https:// part), hence the url checker would fail if one entered URL of that kind.\r\n\r\nWe could get rid of this by changing the way we check the URL. ', 'comment_created': datetime.datetime(2021, 8, 9, 12, 51, 28, tzinfo=datetime.timezone.utc), 'commenter': 'jimil749', 'type': 'User'}, {'comment_id': 685174007, 'comment_body': 'We use Parse to check if scheme and host exist. `ParseRequestURI` allows strings like `test:test` to pass.', 'comment_created': datetime.datetime(2021, 8, 9, 13, 4, 47, tzinfo=datetime.timezone.utc), 'commenter': 'jimil749', 'type': 'User'}, {'comment_id': 685177918, 'comment_body': ""The user can pass paths beginning with other protocols, eg. http, git, file. We'll have to trim all these separately. Let's try the approach in the above comment"", 'comment_created': datetime.datetime(2021, 8, 9, 13, 10, 2, tzinfo=datetime.timezone.utc), 'commenter': 'ishank011', 'type': 'User'}, {'comment_id': 685179777, 'comment_body': ""No it'll have two methods.\r\n\r\n```\r\nfunc GetContextStruct(ctx context.Context) *Ctx\r\n```\r\n\r\nwhich calls ContextGetToken and ContextGetUser, and\r\n\r\n```\r\nfunc GetContext(ctxStruct *Ctx) context.Context\r\n```\r\n\r\nwhich calls ContextSetToken and ContextSetUser."", 'comment_created': datetime.datetime(2021, 8, 9, 13, 12, 25, tzinfo=datetime.timezone.utc), 'commenter': 'ishank011', 'type': 'User'}, {'comment_id': 685183723, 'comment_body': 'Ahh yes! Was a bit confused. Sorry about that :sweat_smile: ', 'comment_created': datetime.datetime(2021, 8, 9, 13, 17, 30, tzinfo=datetime.timezone.utc), 'commenter': 'jimil749', 'type': 'User'}, {'comment_id': 685185111, 'comment_body': ""Ahhh, so we're supporting protocols other than git! User can just add a prefix as per their choices."", 'comment_created': datetime.datetime(2021, 8, 9, 13, 19, 23, tzinfo=datetime.timezone.utc), 'commenter': 'jimil749', 'type': 'User'}, {'comment_id': 685211258, 'comment_body': ""If the library has the functionalities, then why not? :D\r\nAlso, I didn't go through how the library's clients store the transport, but let's ensure that we don't leak fds."", 'comment_created': datetime.datetime(2021, 8, 9, 13, 50, 43, tzinfo=datetime.timezone.utc), 'commenter': 'ishank011', 'type': 'User'}, {'comment_id': 685229861, 'comment_body': ""Also, just to demo the multiple ways of adding plugins, let's have one local and one hosted remotely"", 'comment_created': datetime.datetime(2021, 8, 9, 14, 12, 50, tzinfo=datetime.timezone.utc), 'commenter': 'ishank011', 'type': 'User'}, {'comment_id': 685280508, 'comment_body': ""Sure, I'll do that."", 'comment_created': datetime.datetime(2021, 8, 9, 15, 9, 58, tzinfo=datetime.timezone.utc), 'commenter': 'jimil749', 'type': 'User'}, {'comment_id': 685337483, 'comment_body': ""There needs to be a small change in the methods. Because `rpc_user.go`, which belongs to the **user** package, will import `GetContextStruct` and `SetContext` methods (for encoding and decoding contexts), we can't have these methods call `ContextSetUser` and `ContextGetUser`. (Cyclic dependencies!). "", 'comment_created': datetime.datetime(2021, 8, 9, 16, 19, 10, tzinfo=datetime.timezone.utc), 'commenter': 'jimil749', 'type': 'User'}, {'comment_id': 685344878, 'comment_body': ""Unfortunately having methods to set and read ctx in `pkg/plugin/ctx` won't do us good because of `rpc_user.go`'s dependency on it. So if it is feasible I can send a PR to move out user context methods into a separate pkg."", 'comment_created': datetime.datetime(2021, 8, 9, 16, 29, 21, tzinfo=datetime.timezone.utc), 'commenter': 'jimil749', 'type': 'User'}, {'comment_id': 685356922, 'comment_body': ""So @ishank011, I don't think we'd need to pass our own Getter, because all the protocols like git, http, file are supported out of the box and are detected based on the `Src` field. For instance, if the url is `github.com/abc/xyz` -> git protocol or if url is `./foo` -> file protocol. This is done by the go-getter client. We just need to pass the url and rest would be taken care by the `getter.Get()` method!"", 'comment_created': datetime.datetime(2021, 8, 9, 16, 45, 49, tzinfo=datetime.timezone.utc), 'commenter': 'jimil749', 'type': 'User'}, {'comment_id': 685801195, 'comment_body': ""I didn't mean writing our own getter implementation, but just passing the in-built ones when instantiating the client. The problem with the current method is that we need to anticipate the protocols and trim all of those. If we didn't have to do that, then it would have been perfectly fine. So rather than the trimming, I'd prefer that we just make it known to the client."", 'comment_created': datetime.datetime(2021, 8, 10, 8, 22, 38, tzinfo=datetime.timezone.utc), 'commenter': 'ishank011', 'type': 'User'}, {'comment_id': 685801969, 'comment_body': 'We can do that then', 'comment_created': datetime.datetime(2021, 8, 10, 8, 23, 40, tzinfo=datetime.timezone.utc), 'commenter': 'ishank011', 'type': 'User'}, {'comment_id': 685814828, 'comment_body': 'Is it fine if I send a separate PR for that?', 'comment_created': datetime.datetime(2021, 8, 10, 8, 40, 11, tzinfo=datetime.timezone.utc), 'commenter': 'jimil749', 'type': 'User'}, {'comment_id': 685817593, 'comment_body': 'Yes please', 'comment_created': datetime.datetime(2021, 8, 10, 8, 43, 49, tzinfo=datetime.timezone.utc), 'commenter': 'ishank011', 'type': 'User'}, {'comment_id': 685858029, 'comment_body': '#1982 ', 'comment_created': datetime.datetime(2021, 8, 10, 9, 36, 43, tzinfo=datetime.timezone.utc), 'commenter': 'jimil749', 'type': 'User'}, {'comment_id': 686506194, 'comment_body': ""We don't actually need to pass the in-built getter because by default `go-getter` already uses those if not specified in the client (https://github.com/hashicorp/go-getter/blob/main/client_option.go#L29). So if we need to support multiple protocols and also not use trimming, we could ask the users to specify urls like: `git::https://github.com/repo/plugin` which would force the protocol desired by the user.\r\n"", 'comment_created': datetime.datetime(2021, 8, 11, 5, 39, 35, tzinfo=datetime.timezone.utc), 'commenter': 'jimil749', 'type': 'User'}, {'comment_id': 687538103, 'comment_body': ""Doesn't look like a good option to me. We ask the use to specify the protocol, and then specify another to override it. I'd still prefer passing the getters at init."", 'comment_created': datetime.datetime(2021, 8, 12, 9, 18, 16, tzinfo=datetime.timezone.utc), 'commenter': 'ishank011', 'type': 'User'}, {'comment_id': 687568841, 'comment_body': 'Sure, just want to know that how would the user configure the plugins then. Could you provide an example of diff types of URLs/Protocol configuration?', 'comment_created': datetime.datetime(2021, 8, 12, 9, 59, 34, tzinfo=datetime.timezone.utc), 'commenter': 'jimil749', 'type': 'User'}, {'comment_id': 687633922, 'comment_body': 'Sure so\r\n```\r\nhttps://github.com/repo/plugin\r\nhttp://github.com/repo/plugin\r\ns3://my-s3-deployment.com/bucket/repo/plugin\r\nfile:///root/repo/plugin.git\r\n```', 'comment_created': datetime.datetime(2021, 8, 12, 11, 42, 45, tzinfo=datetime.timezone.utc), 'commenter': 'ishank011', 'type': 'User'}, {'comment_id': 687658354, 'comment_body': ""Ok, so the only ambiguity is b/w `git` and `http` protocol. Even if I pass the getters as mentioned [here](https://github.com/hashicorp/go-getter/blob/main/get.go#L67-L75) (which I think we don't need to because those are used by default if no getter is passed while instantiating the client), there would be ambiguity b/w git and http protocol. The correct way to use `git` protocol is by passing url like `github.com/jimil749/json` and not `http://github.com/jimil749/json` (wherein the getter would use http protocol). Sorry, but I am still confused as in what would passing the getter to Client achieve? "", 'comment_created': datetime.datetime(2021, 8, 12, 12, 20, 10, tzinfo=datetime.timezone.utc), 'commenter': 'jimil749', 'type': 'User'}, {'comment_id': 695956425, 'comment_body': 'I have added this check, works for any URL:\r\n- `github.com`\r\n- `https://github.com`\r\n- `www.github.com`\r\n- `http://github.com`', 'comment_created': datetime.datetime(2021, 8, 25, 17, 20, 9, tzinfo=datetime.timezone.utc), 'commenter': 'jimil749', 'type': 'User'}, {'comment_id': 695957235, 'comment_body': 'Hmm. I ran `go mod tidy` after resolving the merge conflict! :thinking: ', 'comment_created': datetime.datetime(2021, 8, 25, 17, 21, 21, tzinfo=datetime.timezone.utc), 'commenter': 'jimil749', 'type': 'User'}, {'comment_id': 695962318, 'comment_body': ""I've added this example, but it would only work once https://github.com/cs3org/reva-auth-json-plugin/pull/1 is merged."", 'comment_created': datetime.datetime(2021, 8, 25, 17, 26, tzinfo=datetime.timezone.utc), 'commenter': 'jimil749', 'type': 'User'}]","[{'commit_sha': '3f2c50d8c2f620393982cdbdd22e0056ff86ab90', 'committer_username': 'jimil749', 'committer_name': 'Jimil Desai', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 28, 12, 8, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f67c8cf92035dfb507a88b2278ae0ebf8f14a26a', 'committer_username': 'jimil749', 'committer_name': 'Jimil Desai', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 28, 12, 8, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc107e01178528dc46fe9d7b8bd4a140c33a8c85', 'committer_username': 'jimil749', 'committer_name': 'Jimil Desai', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 28, 12, 8, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2978c9786e42126c86382c0f2ff37746c6b7d055', 'committer_username': 'jimil749', 'committer_name': 'Jimil Desai', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 28, 12, 8, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48f3310741241e68611637da5b0a99b3e1bee040', 'committer_username': 'jimil749', 'committer_name': 'Jimil Desai', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 28, 12, 8, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f575cbeef8572108159e6a8e1ddd91f080aec78a', 'committer_username': 'jimil749', 'committer_name': 'Jimil Desai', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 28, 12, 8, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '28e9a1da2905d3d7907083faa7588c56d9e32104', 'committer_username': 'jimil749', 'committer_name': 'Jimil Desai', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 28, 12, 8, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b0bd1e22bf728cfbb172aeaa3c4c8ac208ecc14a', 'committer_username': 'jimil749', 'committer_name': 'Jimil Desai', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 28, 12, 8, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '13ac3103f846b6b92490033eff9cbf33ed2390c9', 'committer_username': 'jimil749', 'committer_name': 'Jimil Desai', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 28, 12, 8, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a784864a12bbea0e4344cae7ea2d1b28e22959d2', 'committer_username': 'jimil749', 'committer_name': 'Jimil Desai', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 28, 12, 8, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3bd3d6f9e03554286c3f1d0a617bdd342768c056', 'committer_username': 'jimil749', 'committer_name': 'Jimil Desai', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 28, 12, 8, 19, tzinfo=datetime.timezone.utc)}]",Jimil Desai,47107987,,User,,60,,19,36
700120605,Added methods to get and put data into context,Signed-off-by: Jimil Desai <jimildesai42@gmail.com>,True,1938,https://api.github.com/repos/cs3org/reva/pulls/1938,https://github.com/cs3org/reva/pull/1938,closed,176,0,3,5,2,1,0,0,[],2021-07-30 08:48:23+00:00,2021-08-03 10:38:51+00:00,352228.0,"4 days, 1:50:28","[{'comment_id': 679892765, 'comment_body': ""This seems a bit dangerous! (VSCode complains here w `possible misuse of unsafe.Pointer`). We're dereferencing the value stored at `ictx.data` to `valCtx` type."", 'comment_created': datetime.datetime(2021, 7, 30, 12, 38, 58, tzinfo=datetime.timezone.utc), 'commenter': 'jimil749', 'type': 'User'}]","[{'commit_sha': '75e578a9b503be520cd54f0230d4dc97ddc56d61', 'committer_username': 'jimil749', 'committer_name': 'Jimil Desai', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 28, 12, 8, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ca037a521380020894049f237ee0e772c804f29', 'committer_username': 'jimil749', 'committer_name': 'Jimil Desai', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 28, 12, 8, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eaa3683e1ece1543aca23ba46797aa69eebe5d75', 'committer_username': 'jimil749', 'committer_name': 'Jimil Desai', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 28, 12, 8, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05c6f4d1429b85095a3a6adfd6b284cd52c702ce', 'committer_username': 'ishank011', 'committer_name': 'Ishank Arora', 'committer_email': 'ishank011@gmail.com', 'commit_date': datetime.datetime(2015, 1, 4, 6, 50, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c387077955e0376ed7a646ecb5c8f20751cb0cc', 'committer_username': 'jimil749', 'committer_name': 'Jimil Desai', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 28, 12, 8, 19, tzinfo=datetime.timezone.utc)}]",Jimil Desai,47107987,,User,,60,,19,36
707184352,Move user context methods into separate package,"This PR moves the user-context methods out of the user pkg into a separate `userctx` package. 

Signed-off-by: Jimil Desai <jimildesai42@gmail.com>",True,1982,https://api.github.com/repos/cs3org/reva/pulls/1982,https://github.com/cs3org/reva/pull/1982,closed,373,332,65,5,3,0,0,0,[],2021-08-10 09:29:41+00:00,2021-08-11 14:08:48+00:00,103147.0,"1 day, 4:39:07",[],"[{'commit_sha': 'b90aa1b4ea2e1cf347439d45dfda3fc36baee3d3', 'committer_username': 'jimil749', 'committer_name': 'Jimil Desai', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 28, 12, 8, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76a70856bfa9d1c9b0f959d75167b3b5839bd523', 'committer_username': 'jimil749', 'committer_name': 'Jimil Desai', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 28, 12, 8, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8dd72f5bd902c3b3a06bd4196d691057ba4e45cb', 'committer_username': 'jimil749', 'committer_name': 'Jimil Desai', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 28, 12, 8, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea45e3dd0a32b8082549a0a5eec682824fe6c0bf', 'committer_username': 'jimil749', 'committer_name': 'Jimil Desai', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 28, 12, 8, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7af051e224985c3c2025382c9dccd48999285505', 'committer_username': 'jimil749', 'committer_name': 'Jimil Desai', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 28, 12, 8, 19, tzinfo=datetime.timezone.utc)}]",Jimil Desai,47107987,,User,,60,,19,36
705912770,Documentation for runtime-plugin,"This PR adds basic developer manual/documentation for runtime plugins. Let me know if I missed something or if there's any scope for improvement! :sweat_smile: 

Signed-off-by: Jimil Desai <jimildesai42@gmail.com>",True,1971,https://api.github.com/repos/cs3org/reva/pulls/1971,https://github.com/cs3org/reva/pull/1971,closed,129,0,2,4,1,4,0,0,[],2021-08-07 16:15:09+00:00,2021-09-13 06:30:32+00:00,3161723.0,"36 days, 14:15:23","[{'comment_id': 685016828, 'comment_body': '@jimil749 would make sense that the protocol version and Magic* contents are constants defined in the Reva plugin package that can be used?  ', 'comment_created': datetime.datetime(2021, 8, 9, 8, 50, 6, tzinfo=datetime.timezone.utc), 'commenter': 'labkode', 'type': 'User'}, {'comment_id': 685036558, 'comment_body': 'Yes, that would be in-fact better alternative. The developer can then just import the package and use the exported consts. :+1: ', 'comment_created': datetime.datetime(2021, 8, 9, 9, 20, 38, tzinfo=datetime.timezone.utc), 'commenter': 'jimil749', 'type': 'User'}, {'comment_id': 685052597, 'comment_body': 'Awesome', 'comment_created': datetime.datetime(2021, 8, 9, 9, 45, 14, tzinfo=datetime.timezone.utc), 'commenter': 'labkode', 'type': 'User'}, {'comment_id': 685065368, 'comment_body': ""I'll update the documentation once we get #1970 merged. (There might be more changes)"", 'comment_created': datetime.datetime(2021, 8, 9, 10, 5, 46, tzinfo=datetime.timezone.utc), 'commenter': 'jimil749', 'type': 'User'}]","[{'commit_sha': '8e3ff65ce0d703426bc2c83eed1af63910c2ec6f', 'committer_username': 'jimil749', 'committer_name': 'Jimil Desai', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 28, 12, 8, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '477079c8cfc67c1889cc3ddf7f2f754cfde470d9', 'committer_username': 'jimil749', 'committer_name': 'Jimil Desai', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 28, 12, 8, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2723700feb96684e9986324516e72b643ecf4ca1', 'committer_username': 'jimil749', 'committer_name': 'Jimil Desai', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 28, 12, 8, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83847804e03e337246ac815bef4f7bef00b9187a', 'committer_username': 'jimil749', 'committer_name': 'Jimil Desai', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 28, 12, 8, 19, tzinfo=datetime.timezone.utc)}]",Jimil Desai,47107987,,User,,60,,19,36
592413307,Makefile: added make command to run litmus-tests,"Fixes #1106 

This PR adds an extra make command to run litmus tests via make. 
- `make litmus-test` executes the tests.

Signed-off-by: Jimil Desai <jimildesai42@gmail.com>",True,1543,https://api.github.com/repos/cs3org/reva/pulls/1543,https://github.com/cs3org/reva/pull/1543,closed,27,0,2,3,10,0,0,0,[],2021-03-13 19:28:00+00:00,2021-03-16 10:29:19+00:00,226879.0,"2 days, 15:01:19",[],"[{'commit_sha': 'df1709d73ed9b8910f37c92464fef99f2d1197c1', 'committer_username': 'jimil749', 'committer_name': 'Jimil Desai', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 28, 12, 8, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da5b45668ad4758b5753ecc91929695ca0a51295', 'committer_username': 'jimil749', 'committer_name': 'Jimil Desai', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 28, 12, 8, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '112d1e899bd4a37ca98ae7ff86d20eb0673aae98', 'committer_username': 'jimil749', 'committer_name': 'Jimil Desai', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 28, 12, 8, 19, tzinfo=datetime.timezone.utc)}]",Jimil Desai,47107987,,User,,60,,19,36
594190669,cli: added ocm invitation workflow commands,"Fixes #1149 

This PR adds 2 cli commands:
- `ocm-invite-generate`: to generate an invitation token (to be executed by originator)
- `ocm-invite-forward`: to forward the invitation token to the mesh provider (to be executed by recipient)

Signed-off-by: Jimil Desai <jimildesai42@gmail.com>",True,1558,https://api.github.com/repos/cs3org/reva/pulls/1558,https://github.com/cs3org/reva/pull/1558,closed,146,0,4,4,2,2,0,0,[],2021-03-16 19:45:55+00:00,2021-03-18 09:18:32+00:00,135157.0,"1 day, 13:32:37","[{'comment_id': 596091385, 'comment_body': 'Check the RPC status from this call', 'comment_created': datetime.datetime(2021, 3, 17, 14, 51, 7, tzinfo=datetime.timezone.utc), 'commenter': 'ishank011', 'type': 'User'}, {'comment_id': 596118969, 'comment_body': 'Will do! :+1: ', 'comment_created': datetime.datetime(2021, 3, 17, 15, 20, 35, tzinfo=datetime.timezone.utc), 'commenter': 'jimil749', 'type': 'User'}]","[{'commit_sha': '5704406ba63725554fdce91f8783470edf23e562', 'committer_username': 'jimil749', 'committer_name': 'Jimil Desai', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 28, 12, 8, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4194777c9c1caf0658c5066f3601d796da3e5bbc', 'committer_username': 'jimil749', 'committer_name': 'Jimil Desai', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 28, 12, 8, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1cd10ac5540220e990cdb81e680295f206dfcf87', 'committer_username': 'jimil749', 'committer_name': 'Jimil Desai', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 28, 12, 8, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dbd118d5e0b34ed330055eb975f11dfcaaddf97f', 'committer_username': 'jimil749', 'committer_name': 'Jimil Desai', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 28, 12, 8, 19, tzinfo=datetime.timezone.utc)}]",Jimil Desai,47107987,,User,,60,,19,36
596788470,Modularized api token management in GRAPPA drivers,"Fixes #1562 

This PR moves duplicated api token management methods:
- `renewAPIToken`
- `getAPIToken`
- `SendAPIRequest`

into a seperate `utils` package to prevent duplication. The above methods are used by `user/rest` and `group/rest` packages. 

PS: I am not 100% sure of the approach used here, so it'd be great if someone could suggest a better way to implement this. I'd be happy to work on the changes.

Signed-off-by: Jimil Desai <jimildesai42@gmail.com>",True,1574,https://api.github.com/repos/cs3org/reva/pulls/1574,https://github.com/cs3org/reva/pull/1574,closed,204,264,4,7,4,6,0,0,[],2021-03-19 18:22:59+00:00,2021-03-23 18:06:26+00:00,344607.0,"3 days, 23:43:27","[{'comment_id': 598687631, 'comment_body': 'Use a struct `OIDCToken` as done previously, which should store the token, expiration and a mutex and the rest should go in a struct called `config`', 'comment_created': datetime.datetime(2021, 3, 22, 12, 53, 42, tzinfo=datetime.timezone.utc), 'commenter': 'ishank011', 'type': 'User'}, {'comment_id': 598688462, 'comment_body': 'apiTokenManager should be a member of manager and the same object should be reused instead of creating a new one on every request', 'comment_created': datetime.datetime(2021, 3, 22, 12, 54, 50, tzinfo=datetime.timezone.utc), 'commenter': 'ishank011', 'type': 'User'}, {'comment_id': 598691925, 'comment_body': 'Will do! :+1: ', 'comment_created': datetime.datetime(2021, 3, 22, 12, 59, 34, tzinfo=datetime.timezone.utc), 'commenter': 'jimil749', 'type': 'User'}, {'comment_id': 601495810, 'comment_body': '@jimil749 grant_type :D', 'comment_created': datetime.datetime(2021, 3, 25, 13, 42, 5, tzinfo=datetime.timezone.utc), 'commenter': 'ishank011', 'type': 'User'}, {'comment_id': 601498861, 'comment_body': ""Ah! My bad! I'll send a new pr with the change"", 'comment_created': datetime.datetime(2021, 3, 25, 13, 45, 33, tzinfo=datetime.timezone.utc), 'commenter': 'jimil749', 'type': 'User'}, {'comment_id': 601500385, 'comment_body': 'No worries, I fixed it in my PR', 'comment_created': datetime.datetime(2021, 3, 25, 13, 47, 18, tzinfo=datetime.timezone.utc), 'commenter': 'ishank011', 'type': 'User'}]","[{'commit_sha': 'c38fdbfbf7553b85ec02e0c7f47d7f57df944437', 'committer_username': 'jimil749', 'committer_name': 'Jimil Desai', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 28, 12, 8, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10d0c65c3c69c9806ac7ae3dac8d217cb98cf4e5', 'committer_username': 'jimil749', 'committer_name': 'Jimil Desai', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 28, 12, 8, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c4e4d69d987c15a25f2f2c8c503c725d610c80a', 'committer_username': 'jimil749', 'committer_name': 'Jimil Desai', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 28, 12, 8, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd40ee94fc67eb37c387487dabeae273cc5ce2ba6', 'committer_username': 'jimil749', 'committer_name': 'Jimil Desai', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 28, 12, 8, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d09511ecc033354cdd5a0ab5ed5b39966f3d64c', 'committer_username': 'jimil749', 'committer_name': 'Jimil Desai', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 28, 12, 8, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f0019499c0db355bec53d1b4061c3d56fa5aabf', 'committer_username': 'jimil749', 'committer_name': 'Jimil Desai', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 28, 12, 8, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ff32ed98fb4cefd404eeb6023a0f4a3b5546d43', 'committer_username': 'jimil749', 'committer_name': 'Jimil Desai', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 28, 12, 8, 19, tzinfo=datetime.timezone.utc)}]",Jimil Desai,47107987,,User,,60,,19,36

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
168244589,reva,cs3org/reva,Go,113,165,14,84,2304,295,51,71,"[{'id': 934525432, 'number': 2860, 'closed': datetime.datetime(2022, 5, 17, 8, 53, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 12, 8, 23, 51, tzinfo=datetime.timezone.utc), 'time_taken': 433790.0, 'time_delta': '5 days, 0:29:50', 'additions': 4, 'deletions': 1, 'state': 'closed'}, {'id': 898685138, 'number': 2712, 'closed': datetime.datetime(2022, 5, 3, 8, 28, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 4, 7, 55, tzinfo=datetime.timezone.utc), 'time_taken': 2507606.0, 'time_delta': '29 days, 0:33:26', 'additions': 11, 'deletions': 16, 'state': 'closed'}, {'id': 707184352, 'number': 1982, 'closed': datetime.datetime(2021, 8, 11, 14, 8, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 10, 9, 29, 41, tzinfo=datetime.timezone.utc), 'time_taken': 103147.0, 'time_delta': '1 day, 4:39:07', 'additions': 373, 'deletions': 332, 'state': 'closed'}, {'id': 705912770, 'number': 1971, 'closed': datetime.datetime(2021, 9, 13, 6, 30, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 7, 16, 15, 9, tzinfo=datetime.timezone.utc), 'time_taken': 3161723.0, 'time_delta': '36 days, 14:15:23', 'additions': 129, 'deletions': 0, 'state': 'closed'}, {'id': 705845496, 'number': 1970, 'closed': datetime.datetime(2023, 7, 19, 15, 5, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 7, 6, 35, 16, tzinfo=datetime.timezone.utc), 'time_taken': 61461031.0, 'time_delta': '711 days, 8:30:31', 'additions': 247, 'deletions': 65, 'state': 'closed'}, {'id': 700120605, 'number': 1938, 'closed': datetime.datetime(2021, 8, 3, 10, 38, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 30, 8, 48, 23, tzinfo=datetime.timezone.utc), 'time_taken': 352228.0, 'time_delta': '4 days, 1:50:28', 'additions': 176, 'deletions': 0, 'state': 'closed'}, {'id': 682521024, 'number': 1861, 'closed': datetime.datetime(2021, 8, 5, 11, 30, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 2, 10, 33, 8, tzinfo=datetime.timezone.utc), 'time_taken': 2941056.0, 'time_delta': '34 days, 0:57:36', 'additions': 1007, 'deletions': 62, 'state': 'closed'}, {'id': 596788470, 'number': 1574, 'closed': datetime.datetime(2021, 3, 23, 18, 6, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 19, 18, 22, 59, tzinfo=datetime.timezone.utc), 'time_taken': 344607.0, 'time_delta': '3 days, 23:43:27', 'additions': 204, 'deletions': 264, 'state': 'closed'}, {'id': 594190669, 'number': 1558, 'closed': datetime.datetime(2021, 3, 18, 9, 18, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 16, 19, 45, 55, tzinfo=datetime.timezone.utc), 'time_taken': 135157.0, 'time_delta': '1 day, 13:32:37', 'additions': 146, 'deletions': 0, 'state': 'closed'}, {'id': 592413307, 'number': 1543, 'closed': datetime.datetime(2021, 3, 16, 10, 29, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 13, 19, 28, tzinfo=datetime.timezone.utc), 'time_taken': 226879.0, 'time_delta': '2 days, 15:01:19', 'additions': 27, 'deletions': 0, 'state': 'closed'}, {'id': 592308205, 'number': 1542, 'closed': datetime.datetime(2021, 3, 15, 10, 20, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 13, 6, 44, 1, tzinfo=datetime.timezone.utc), 'time_taken': 185793.0, 'time_delta': '2 days, 3:36:33', 'additions': 1, 'deletions': 1, 'state': 'closed'}]"
