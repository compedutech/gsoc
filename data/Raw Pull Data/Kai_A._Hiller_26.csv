pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
717266389,gtk: Export ParamSpec extenstion trait,The `ParamSpec::new_extension` function is not available outside of gtk4-rs. This PR fixes that by exporting the necessary extension trait in the prelude.,True,555,https://api.github.com/repos/gtk-rs/gtk4-rs/pulls/555,https://github.com/gtk-rs/gtk4-rs/pull/555,closed,2,1,2,1,2,0,0,0,[],2021-08-22 07:44:21+00:00,2021-08-22 18:51:49+00:00,40048.0,11:07:28,[],"[{'commit_sha': '6b3ad25ccebf4878379ef82828cb00248233f5d6', 'committer_username': 'V02460', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2011, 12, 28, 20, 3, 24, tzinfo=datetime.timezone.utc)}]",,1291108,,User,,43,,0,9
695431723,Add an Iterator for ListModel,"This PR implements an Iterator for the `ListModel` interface.

The Iterator can be created by the interface’s `iter` method. Example usage:
```rust
for member in members.iter::<User>() {
    …
}
```
As you can see, the `iter` method takes a type parameter `T` that is the type of the yielded items. At creation time of the Iterator a type check is performed to make sure it is a subtype of the model’s item type. Having a type-wise more convenient Iterator is also the reason I decided against implementing `IntoIterator` as it forces you to yield `Object`-type items. (This restriction could be lifted, if `ListModel` itself had the correct type parameter.)

The Iterator gives always sensible results, even if the model underneath it changes. That means no duplicates or unnecessary omissions. It accomplishes that cheaply by listening to the `items-changed` signal of the underlying model and adjusting its internal index accordingly.

Implementing `DoubleEndedIterator` and `ExactSizeIterator` should be possible, too, I might do that after a round of feedback.",False,207,https://api.github.com/repos/gtk-rs/gtk-rs-core/pulls/207,https://github.com/gtk-rs/gtk-rs-core/pull/207,open,90,0,3,1,10,7,2,0,"[{'name': 'enhancement'}, {'name': 'gio'}]",2021-07-22 19:11:09+00:00,,0.0,,"[{'comment_id': 677139173, 'comment_body': ""This is probably inversed. If you have a model of widgets, you don't want to be able to iterate over it as buttons (that might fail), but if you have a model of buttons you want to be able to iterate over it as widgets (that can't fail)."", 'comment_created': datetime.datetime(2021, 7, 27, 5, 54, 17, tzinfo=datetime.timezone.utc), 'commenter': 'sdroege', 'type': 'User'}, {'comment_id': 677140197, 'comment_body': 'Why is this the correct behaviour? Seems as good / bad as not skipping the elements to me', 'comment_created': datetime.datetime(2021, 7, 27, 5, 56, 32, tzinfo=datetime.timezone.utc), 'commenter': 'sdroege', 'type': 'User'}, {'comment_id': 677203279, 'comment_body': 'That’s a bad one. You’re right, it should be contravariant. Thank you for taking the time *really* looking into this.', 'comment_created': datetime.datetime(2021, 7, 27, 7, 47, 8, tzinfo=datetime.timezone.utc), 'commenter': 'V02460', 'type': 'User'}, {'comment_id': 677203693, 'comment_body': 'My main reason is atomicity of a change: If a block of items changes under you, it will not be handled only partially. The whole affair is a race-condition anyway, so there is no advantage in including the items.', 'comment_created': datetime.datetime(2021, 7, 27, 7, 47, 42, tzinfo=datetime.timezone.utc), 'commenter': 'V02460', 'type': 'User'}, {'comment_id': 677231410, 'comment_body': ""You're skipping over newly added items, but items that got removed would not appear in the iteration (of course, they're gone). So there's at least some asymmetry here but that might be fine.\r\n\r\nFWIW, IMHO it would be equally fine to immediately finish the iterator on the first modification during iteration.\r\n\r\nI guess whatever behaviour we select here will have its advantages and disadvantages, but the main problem for me is that from a user point of view it's not obvious during the iteration that something happened and there was a modification. You probably want to restart your iteration in many cases if this happens.\r\n\r\nWe could make the iterator return a `Result<T, ModificationDuringIterationError>` but that's kind of annoying to use."", 'comment_created': datetime.datetime(2021, 7, 27, 8, 25, 13, tzinfo=datetime.timezone.utc), 'commenter': 'sdroege', 'type': 'User'}, {'comment_id': 677306377, 'comment_body': 'Simply finishing the iterator on any model change would be bad, because you can’t differentiate between a failure and coming to an orderly end. Returning `Result` is nice, because it holds the iterator to a transactional standard, but it might be overkill for all the applications that don’t expect/don’t care about model changes.\r\n\r\nI thought a bit more about the index adjustment. If we assume adding and removing can be a replacement of an item, then jumping to anywhere but the end of the change would cause duplicates; yielding the old and then the new version of the item. Together with the atomicity mentioned above, these two criteria give us a definitive algorithm for recalculating the index.\r\n\r\nI think there are two ways of doing this iterator:\r\n\r\n**The transactional way** Yields the whole list consistently, but might fail. The user has high demands on consistency and is willing to implement retry logic and/or error handling by themself.\r\n**The messy way** Easy to use and infallible. This yields elements orderly, but the first might be older than the last. The user doesn’t expect/care about model changes. This is the current implementation.', 'comment_created': datetime.datetime(2021, 7, 27, 10, 5, 28, tzinfo=datetime.timezone.utc), 'commenter': 'V02460', 'type': 'User'}, {'comment_id': 677311134, 'comment_body': 'The messy way would also potentially cause some items to not have been touched after the end of the iteration, which might lead to hard to debug bugs.\r\n\r\nFrom a correctness point of view I would go with a `Result`, which is also how the `Iterator` adapter on top of `gst::Iterator` is implemented: https://gstreamer.pages.freedesktop.org/gstreamer-rs/stable/0.17/docs/gstreamer/struct.Iterator.html#impl-IntoIterator\r\n\r\nThe question is mostly who/how are people going to use this? Why would anybody ever iterate over the whole model? I can\'t think of any reason where it would be OK to get an inconsistent result (""messy way"") and either I would assert that no modifications ever happen (because I know my code won\'t modify during the iteration), or I would have to restart the iteration on modification and hope that this time it finishes without yet another modification.', 'comment_created': datetime.datetime(2021, 7, 27, 10, 12, 2, tzinfo=datetime.timezone.utc), 'commenter': 'sdroege', 'type': 'User'}]","[{'commit_sha': 'd2499f922f7bd4ab63ee98aa679328bfaf38904c', 'committer_username': 'V02460', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2011, 12, 28, 20, 3, 24, tzinfo=datetime.timezone.utc)}]",,1291108,,User,,43,,0,9
696161253,Add ListModel::find_sorted and ListStore::find_or_insert_sorted,"This PR adds two convenience methods: `find_sorted` to ListModel and `find_or_insert_sorted` to ListStore.

Both methods provide search functionality in O(log n). The naming schema is borrowed from the native ListStore methods.",False,208,https://api.github.com/repos/gtk-rs/gtk-rs-core/pulls/208,https://github.com/gtk-rs/gtk-rs-core/pull/208,closed,91,2,4,2,9,0,0,0,[],2021-07-23 19:18:13+00:00,2021-08-31 07:28:43+00:00,3327030.0,"38 days, 12:10:30",[],"[{'commit_sha': 'e75a24549b14710ebc854f57a2fac61eb4f0b638', 'committer_username': 'V02460', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2011, 12, 28, 20, 3, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a146237518006b92c32aa9a8d15429f8803706ae', 'committer_username': 'V02460', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2011, 12, 28, 20, 3, 24, tzinfo=datetime.timezone.utc)}]",,1291108,,User,,43,,0,9
712906859,"Fix saturating add, sub for Int",The operations `saturating_add` and `saturating_sub` did not consider negative values.,True,22,https://api.github.com/repos/ruma/js_int/pulls/22,https://github.com/ruma/js_int/pull/22,closed,4,2,1,1,0,2,0,0,[],2021-08-15 09:46:11+00:00,2021-08-15 11:24:40+00:00,5909.0,1:38:29,"[{'comment_id': 689069643, 'comment_body': ""This should be an `unwrap_or_else` since the comparison should only be done if `checked_add` returns `None`. I'm also wondering whether comparison to `0` might be more efficient (if `self` is negative it can only saturate at `Self::MIN`, if it's positive it can only saturate at `Self::MAX`). Maybe even\r\n\r\n```rust\r\nmatch self.cmp(int!(0)) {\r\n    Ordering::Less => Self::MIN,\r\n    Ordering::Equal => unsafe { std::hint::unreachable_unchecked() },\r\n    Ordering::Greater => Self::MAX,\r\n}\r\n```\r\n\r\nto give an extra hint to the optimizer? Might be overkill."", 'comment_created': datetime.datetime(2021, 8, 15, 10, 47, 6, tzinfo=datetime.timezone.utc), 'commenter': 'jplatte', 'type': 'User'}, {'comment_id': 689073148, 'comment_body': 'Oh right, we are adding two already-capped values together – then comparing with 0 works, too.\r\n\r\nRegarding performance, there is no way of knowing except for benchmarking ;) Though clippy suggests that ifs are currently faster: https://rust-lang.github.io/rust-clippy/master/#comparison_chain', 'comment_created': datetime.datetime(2021, 8, 15, 11, 14, 42, tzinfo=datetime.timezone.utc), 'commenter': 'V02460', 'type': 'User'}]","[{'commit_sha': 'd6ff70dcec5b146c4026a8548c650b5af3b25095', 'committer_username': 'V02460', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2011, 12, 28, 20, 3, 24, tzinfo=datetime.timezone.utc)}]",,1291108,,User,,43,,0,9
712922252,Make new_saturating methods public,I also added doc comments with examples ~~and shortened the implementation~~.,True,23,https://api.github.com/repos/ruma/js_int/pulls/23,https://github.com/ruma/js_int/pull/23,closed,31,4,2,1,3,1,0,0,[],2021-08-15 11:47:58+00:00,2021-08-16 13:21:56+00:00,92038.0,"1 day, 1:33:58","[{'comment_id': 689080769, 'comment_body': '```suggestion\n    /// Creates an `UInt` from the given `u64` capped at `MAX_SAFE_UINT`.\n```\n', 'comment_created': datetime.datetime(2021, 8, 15, 12, 16, 20, tzinfo=datetime.timezone.utc), 'commenter': 'jplatte', 'type': 'User'}]","[{'commit_sha': '9a6b1ddbf526df64173f4ebcda5a1a3826794f1b', 'committer_username': 'V02460', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2011, 12, 28, 20, 3, 24, tzinfo=datetime.timezone.utc)}]",,1291108,,User,,43,,0,9

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
186402701,gtk4-rs,gtk-rs/gtk4-rs,Rust,167,1790,15,93,3154,95,32,11,"[{'id': 717266389, 'number': 555, 'closed': datetime.datetime(2021, 8, 22, 18, 51, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 22, 7, 44, 21, tzinfo=datetime.timezone.utc), 'time_taken': 40048.0, 'time_delta': '11:07:28', 'additions': 2, 'deletions': 1, 'state': 'closed'}]"
366664320,gtk-rs-core,gtk-rs/gtk-rs-core,Rust,107,278,13,246,13720,147,15,29,"[{'id': 696161253, 'number': 208, 'closed': datetime.datetime(2021, 8, 31, 7, 28, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 23, 19, 18, 13, tzinfo=datetime.timezone.utc), 'time_taken': 3327030.0, 'time_delta': '38 days, 12:10:30', 'additions': 91, 'deletions': 2, 'state': 'closed'}, {'id': 695431723, 'number': 207, 'closed': None, 'created': datetime.datetime(2021, 7, 22, 19, 11, 9, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 90, 'deletions': 0, 'state': 'open'}]"
192114343,js_int,ruma/js_int,Rust,8,16,5,6,122,12,2,0,"[{'id': 712922252, 'number': 23, 'closed': datetime.datetime(2021, 8, 16, 13, 21, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 15, 11, 47, 58, tzinfo=datetime.timezone.utc), 'time_taken': 92038.0, 'time_delta': '1 day, 1:33:58', 'additions': 31, 'deletions': 4, 'state': 'closed'}, {'id': 712906859, 'number': 22, 'closed': datetime.datetime(2021, 8, 15, 11, 24, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 15, 9, 46, 11, tzinfo=datetime.timezone.utc), 'time_taken': 5909.0, 'time_delta': '1:38:29', 'additions': 4, 'deletions': 2, 'state': 'closed'}]"
