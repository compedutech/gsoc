pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
650025572,ENH: Add time_format to Raw.plot(),"#### Reference issue
Tackles #9335 (@cbrnr).


#### What does this implement/fix?
This adds a parameter (time_format) to Raw.plot() to display the real time derived from Info['meas_date'].
",True,9419,https://api.github.com/repos/mne-tools/mne-python/pulls/9419,https://github.com/mne-tools/mne-python/pull/9419,closed,132,30,10,51,60,63,0,0,[],2021-05-21 14:43:41+00:00,2021-06-09 14:37:50+00:00,1641249.0,"18 days, 23:54:09","[{'comment_id': 637868304, 'comment_body': ""To escape `%` when you plan on using `%` formatting later (this is what `docdict` / `docs.py` does under the hood) you double `%`:\r\n```\r\n>>> '%(test)s %%H:%%M%%S' % dict(test='whatever')\r\n'whatever %H:%M%S'\r\n```\r\nso:\r\n```suggestion\r\n        Default format code if True will be ``'%%H:%%M:%%S'``.\r\n```\r\n"", 'comment_created': datetime.datetime(2021, 5, 24, 11, 8, 52, tzinfo=datetime.timezone.utc), 'commenter': 'larsoner', 'type': 'User'}, {'comment_id': 637877531, 'comment_body': 'Thank you!', 'comment_created': datetime.datetime(2021, 5, 24, 11, 27, 31, tzinfo=datetime.timezone.utc), 'commenter': 'marsipu', 'type': 'User'}, {'comment_id': 637998481, 'comment_body': ""I know that this parameter logically belongs next to `show_first_samp`, but usually we tack new parameters to the end (just before `verbose`, which should always be last). I'm not sure it makes a lot of sense in this function though, because we already have so many parameters and nobody should rely on using positional arguments. But we haven't enforced keyword args, so we should probably stick to our conventions."", 'comment_created': datetime.datetime(2021, 5, 24, 14, 35, 32, tzinfo=datetime.timezone.utc), 'commenter': 'cbrnr', 'type': 'User'}, {'comment_id': 638001066, 'comment_body': ""I have the feeling that there should be a better parameter name than `show_real_time`, but currently I can't think of a better name. Maybe someone else has a suggestion?"", 'comment_created': datetime.datetime(2021, 5, 24, 14, 37, 36, tzinfo=datetime.timezone.utc), 'commenter': 'cbrnr', 'type': 'User'}, {'comment_id': 638001583, 'comment_body': 'Why not combine this into an `elif` branch?', 'comment_created': datetime.datetime(2021, 5, 24, 14, 37, 59, tzinfo=datetime.timezone.utc), 'commenter': 'cbrnr', 'type': 'User'}, {'comment_id': 638002542, 'comment_body': 'What does the `_` parameter do?', 'comment_created': datetime.datetime(2021, 5, 24, 14, 38, 44, tzinfo=datetime.timezone.utc), 'commenter': 'cbrnr', 'type': 'User'}, {'comment_id': 638003151, 'comment_body': ""```suggestion\r\n                           f'datetime format string!')\r\n```"", 'comment_created': datetime.datetime(2021, 5, 24, 14, 39, 14, tzinfo=datetime.timezone.utc), 'commenter': 'cbrnr', 'type': 'User'}, {'comment_id': 638005709, 'comment_body': 'I wonder if we should have a `start` parameter in `self._xtick_timestamp_formatter`, which would make this condition unnecessary? Also, what about the `None` argument (see my previous question)? Could you set the second argument to `None` by default?', 'comment_created': datetime.datetime(2021, 5, 24, 14, 41, 16, tzinfo=datetime.timezone.utc), 'commenter': 'cbrnr', 'type': 'User'}, {'comment_id': 638006570, 'comment_body': 'Same comment regarding parameter order, the new parameter should probably be appended to the end.', 'comment_created': datetime.datetime(2021, 5, 24, 14, 41, 58, tzinfo=datetime.timezone.utc), 'commenter': 'cbrnr', 'type': 'User'}, {'comment_id': 638009966, 'comment_body': ""```suggestion\r\n        If True or a `datetime format code <https://docs.python.org/3/library\r\n        /datetime.html#strftime-and-strptime-format-codes>`_, the labels for\r\n        x-axis ticks will be the time derived from ``Info['meas_date']``.\r\n        Default format code if True is ``'%%H:%%M:%%S'``.\r\n```"", 'comment_created': datetime.datetime(2021, 5, 24, 14, 44, 39, tzinfo=datetime.timezone.utc), 'commenter': 'cbrnr', 'type': 'User'}, {'comment_id': 638021917, 'comment_body': 'Maybe `time_ticks` or `clock_ticks`?', 'comment_created': datetime.datetime(2021, 5, 24, 14, 53, 54, tzinfo=datetime.timezone.utc), 'commenter': 'marsipu', 'type': 'User'}, {'comment_id': 638028362, 'comment_body': 'One of the two is the position on the axis while the other one is the displayed value. Thanks, I just realised that I mixed those two in 8d744e5 and time was not showing correctly.', 'comment_created': datetime.datetime(2021, 5, 24, 14, 59, 4, tzinfo=datetime.timezone.utc), 'commenter': 'marsipu', 'type': 'User'}, {'comment_id': 638029000, 'comment_body': 'The first should be the value and the second the position and we only need the value to transfer it to the measurement-date.', 'comment_created': datetime.datetime(2021, 5, 24, 14, 59, 36, tzinfo=datetime.timezone.utc), 'commenter': 'marsipu', 'type': 'User'}, {'comment_id': 638034646, 'comment_body': ""I'll do it. Do you agree with the decision to exclude the epochs-plot? I thought, the application of this feature would be most helpful with continous data."", 'comment_created': datetime.datetime(2021, 5, 24, 15, 4, 42, tzinfo=datetime.timezone.utc), 'commenter': 'marsipu', 'type': 'User'}, {'comment_id': 638038486, 'comment_body': ""> I wonder if we should have a start parameter in self._xtick_timestamp_formatter, which would make this condition unnecessary?\r\n\r\nThis one I don't understand, what would the start-parameter do? As the context of the vline-text is different I thought it would make sense to keep the check outside."", 'comment_created': datetime.datetime(2021, 5, 24, 15, 10, 32, tzinfo=datetime.timezone.utc), 'commenter': 'marsipu', 'type': 'User'}, {'comment_id': 638611827, 'comment_body': ""Yes, I agree it's most useful for continuous plots."", 'comment_created': datetime.datetime(2021, 5, 25, 9, 20, 44, tzinfo=datetime.timezone.utc), 'commenter': 'cbrnr', 'type': 'User'}, {'comment_id': 638614087, 'comment_body': 'I thought that we could always call `self._xtick_timestamp_formatter`, even for the default case where time starts at zero and is always shown in seconds. You could handle this case inside the method.', 'comment_created': datetime.datetime(2021, 5, 25, 9, 23, 34, tzinfo=datetime.timezone.utc), 'commenter': 'cbrnr', 'type': 'User'}, {'comment_id': 638742602, 'comment_body': ""some thoughts:\r\n\r\ntime_axis = 'relative' | 'absolute'\r\n\r\nor\r\n\r\ntime_axis = 'datetime' | ???\r\n\r\n"", 'comment_created': datetime.datetime(2021, 5, 25, 12, 31, 3, tzinfo=datetime.timezone.utc), 'commenter': 'agramfort', 'type': 'User'}, {'comment_id': 638744778, 'comment_body': ""```suggestion\r\n                _ax.set_xlabel(f'Time (hour/min/sec)')\r\n```\r\nless geeky"", 'comment_created': datetime.datetime(2021, 5, 25, 12, 34, 8, tzinfo=datetime.timezone.utc), 'commenter': 'agramfort', 'type': 'User'}, {'comment_id': 638752974, 'comment_body': 'Or maybe `Time (hh:mm:ss)` (should also be less geeky but more exact)...', 'comment_created': datetime.datetime(2021, 5, 25, 12, 45, 38, tzinfo=datetime.timezone.utc), 'commenter': 'cbrnr', 'type': 'User'}, {'comment_id': 638785554, 'comment_body': 'I understand. This would probably also go nicely with the planned toggle-behaviour. I can look into it', 'comment_created': datetime.datetime(2021, 5, 25, 13, 26, 27, tzinfo=datetime.timezone.utc), 'commenter': 'marsipu', 'type': 'User'}, {'comment_id': 638794038, 'comment_body': 'This was supposed to change, when the user provides its own datetime-format.\r\n\r\nOriginally I thought it would be nice, if you can set the datetime-format yourself by providing the datetime format code. But probably there is not that much variation from the default format H/M/S being more useful to user, right?\r\n**Should we just provide the default (H/M/S)?** (@agramfort ,  @cbrnr, @drammock , @larsoner )\r\n_(That would also make implementing the zoom-in/zoom-out format-changes more straight-forward)_', 'comment_created': datetime.datetime(2021, 5, 25, 13, 35, 50, tzinfo=datetime.timezone.utc), 'commenter': 'marsipu', 'type': 'User'}, {'comment_id': 638804523, 'comment_body': ""Letting users pass a custom datetime format code seems like overkill to me. HH:MM:SS.SSS ought to be adequate for all users needs. If it's not, we can add that enhancement only when someone requests it."", 'comment_created': datetime.datetime(2021, 5, 25, 13, 47, 32, tzinfo=datetime.timezone.utc), 'commenter': 'drammock', 'type': 'User'}, {'comment_id': 639636574, 'comment_body': 'But in this specific case for the vline where an ""s"" is appended to the displayed time only for `time_format=\'float\'`, I think it is still necessary to have this check inside `_show_vline`.', 'comment_created': datetime.datetime(2021, 5, 26, 11, 28, 54, tzinfo=datetime.timezone.utc), 'commenter': 'marsipu', 'type': 'User'}, {'comment_id': 643760264, 'comment_body': '```suggestion\r\n                ustr = ustr.rstrip(""0"")\r\n```', 'comment_created': datetime.datetime(2021, 6, 2, 8, 21, 31, tzinfo=datetime.timezone.utc), 'commenter': 'cbrnr', 'type': 'User'}, {'comment_id': 643834900, 'comment_body': '```suggestion\r\n- Add ""time_format"" to :meth:`mne.io.Raw.plot` and :meth:`mne.preprocessing.ICA.plot_sources` to display acquisition time on x-axis (:gh:`9419` by `Martin Schulz`_)\r\n```', 'comment_created': datetime.datetime(2021, 6, 2, 10, 37, 28, tzinfo=datetime.timezone.utc), 'commenter': 'cbrnr', 'type': 'User'}, {'comment_id': 643835062, 'comment_body': ""```suggestion\r\n            ('t', 'Toggle time format'),\r\n```"", 'comment_created': datetime.datetime(2021, 6, 2, 10, 37, 43, tzinfo=datetime.timezone.utc), 'commenter': 'cbrnr', 'type': 'User'}, {'comment_id': 643835507, 'comment_body': '```suggestion\r\n            ms = int((xval + first_time) % 1e3)\r\n```', 'comment_created': datetime.datetime(2021, 6, 2, 10, 38, 24, tzinfo=datetime.timezone.utc), 'commenter': 'cbrnr', 'type': 'User'}, {'comment_id': 643835769, 'comment_body': '```suggestion\r\n                us = int((xval + first_time) % 1e6)\r\n```', 'comment_created': datetime.datetime(2021, 6, 2, 10, 38, 48, tzinfo=datetime.timezone.utc), 'commenter': 'cbrnr', 'type': 'User'}, {'comment_id': 643836281, 'comment_body': '```suggestion\r\n                us = int(((xval + first_time) % 1e6) % (ms * 1e3))\r\n```', 'comment_created': datetime.datetime(2021, 6, 2, 10, 39, 42, tzinfo=datetime.timezone.utc), 'commenter': 'cbrnr', 'type': 'User'}, {'comment_id': 643836821, 'comment_body': '```suggestion\r\n            # Crop time string for microseconds depending on duration\r\n```', 'comment_created': datetime.datetime(2021, 6, 2, 10, 40, 29, tzinfo=datetime.timezone.utc), 'commenter': 'cbrnr', 'type': 'User'}, {'comment_id': 643837056, 'comment_body': '```suggestion\r\n            # Add time from first_time (only seconds) and xval to meas_date\r\n```', 'comment_created': datetime.datetime(2021, 6, 2, 10, 40, 51, tzinfo=datetime.timezone.utc), 'commenter': 'cbrnr', 'type': 'User'}, {'comment_id': 643837496, 'comment_body': '```suggestion\r\n                ustr = ustr[:lim].rstrip(""0"")\r\n```', 'comment_created': datetime.datetime(2021, 6, 2, 10, 41, 33, tzinfo=datetime.timezone.utc), 'commenter': 'cbrnr', 'type': 'User'}, {'comment_id': 643837967, 'comment_body': '```suggestion\r\n        # Change x-axis label\r\n```', 'comment_created': datetime.datetime(2021, 6, 2, 10, 42, 10, tzinfo=datetime.timezone.utc), 'commenter': 'cbrnr', 'type': 'User'}, {'comment_id': 643885006, 'comment_body': '```suggestion\r\n                us = int((xval + first_time) % 1 * 1e6)\r\n```', 'comment_created': datetime.datetime(2021, 6, 2, 11, 52, 41, tzinfo=datetime.timezone.utc), 'commenter': 'marsipu', 'type': 'User'}, {'comment_id': 643887038, 'comment_body': ""This is not the same because associativity doesn't apply here:\r\n```python\r\n123.456 % 1 * 1e3 != 123.456 % 1e3\r\n```"", 'comment_created': datetime.datetime(2021, 6, 2, 11, 55, 34, tzinfo=datetime.timezone.utc), 'commenter': 'marsipu', 'type': 'User'}, {'comment_id': 643888162, 'comment_body': 'Same as l.1873', 'comment_created': datetime.datetime(2021, 6, 2, 11, 57, 9, tzinfo=datetime.timezone.utc), 'commenter': 'marsipu', 'type': 'User'}, {'comment_id': 643936143, 'comment_body': ""Actually here's a mistake. `%` has precedence over `*`, so you're really calculating the remainder of the division by one, and then multiply by `1e6`. Either use parens or better yet just write `1e6`, i.e. `us = int((xval + first_time) % 1e6)`."", 'comment_created': datetime.datetime(2021, 6, 2, 12, 58, 27, tzinfo=datetime.timezone.utc), 'commenter': 'cbrnr', 'type': 'User'}, {'comment_id': 643940305, 'comment_body': ""Ah I see what you're doing here. Maybe use `math.frac` to get the fractional part to be clear? Or at least add a comment saying what you're doing here."", 'comment_created': datetime.datetime(2021, 6, 2, 13, 3, 19, tzinfo=datetime.timezone.utc), 'commenter': 'cbrnr', 'type': 'User'}, {'comment_id': 643940685, 'comment_body': ""Sorry, I didn't see your previous comment - see above."", 'comment_created': datetime.datetime(2021, 6, 2, 13, 3, 47, tzinfo=datetime.timezone.utc), 'commenter': 'cbrnr', 'type': 'User'}, {'comment_id': 643973245, 'comment_body': '```suggestion\r\n            # Get decimals with remainder of division by 1.\r\n            ms = int((xval + first_time) % 1 * 1e3)\r\n```', 'comment_created': datetime.datetime(2021, 6, 2, 13, 40, 15, tzinfo=datetime.timezone.utc), 'commenter': 'marsipu', 'type': 'User'}, {'comment_id': 644008772, 'comment_body': '(nitpick) It is best to avoid cosmetic changes like this, they are distracting to PR reviewers (who must think ""what changed here, is it related, is it correct?"" for each change)', 'comment_created': datetime.datetime(2021, 6, 2, 14, 17, 50, tzinfo=datetime.timezone.utc), 'commenter': 'drammock', 'type': 'User'}, {'comment_id': 644009552, 'comment_body': '```suggestion\r\n    # SCALEBARS & AXIS LABELS\r\n```', 'comment_created': datetime.datetime(2021, 6, 2, 14, 18, 40, tzinfo=datetime.timezone.utc), 'commenter': 'drammock', 'type': 'User'}, {'comment_id': 644019508, 'comment_body': '```suggestion\r\n    time_format : \'float\' | \'datetime\'\r\n        Style of time labels on the horizontal axis. If \'float\', labels will be\r\n        number of seconds from the start of the recording. If \'datetime\',\r\n        labels will show ""clock time"" (hours/minutes/seconds) inferred from\r\n        ``raw.info[\'meas_date\']``. Default is \'float\'.\r\n        \r\n        .. versionadded:: 0.24\r\n```\r\n\r\nwriting this makes me wonder if ""datetime"" is really the right parameter value (since we don\'t show dates).  Is ""timestamp"" better?  Or is ""datetime"" understood to mean ""date and/or time in ISO 8601 format""?', 'comment_created': datetime.datetime(2021, 6, 2, 14, 28, 31, tzinfo=datetime.timezone.utc), 'commenter': 'drammock', 'type': 'User'}, {'comment_id': 644021809, 'comment_body': ""see the ICA docstring for suggested revisions.  However since we're using the same docstring twice, it should probably go into the docdict in `mne/utils/docs.py`"", 'comment_created': datetime.datetime(2021, 6, 2, 14, 30, 46, tzinfo=datetime.timezone.utc), 'commenter': 'drammock', 'type': 'User'}, {'comment_id': 644033689, 'comment_body': 'imports from standard library go at the top of the file, not nested', 'comment_created': datetime.datetime(2021, 6, 2, 14, 42, 59, tzinfo=datetime.timezone.utc), 'commenter': 'drammock', 'type': 'User'}, {'comment_id': 644059997, 'comment_body': 'I agree that ""datetime"" is not optimal. What about ""clocktime""? Or just ""clock""?', 'comment_created': datetime.datetime(2021, 6, 2, 15, 9, 6, tzinfo=datetime.timezone.utc), 'commenter': 'cbrnr', 'type': 'User'}, {'comment_id': 644117680, 'comment_body': 'I think this can be quite radically simplified:\r\n```suggestion\r\n    def _xtick_formatter(self, xval, _=None):\r\n        """"""Change the x-axis labels.""""""\r\n        if self.mne.time_format == \'float\':\r\n            return xval\r\n        import datetime\r\n        meas_date = self.mne.inst.info[\'meas_date\']\r\n        first_time = datetime.timedelta(seconds=self.mne.inst.first_time)\r\n        xtime = datetime.timedelta(seconds=xval)\r\n        xdatetime = meas_date + first_time + xtime\r\n        xdtstr = xdatetime.strftime(\'%H:%M:%S\')\r\n        tickdiff = np.diff(self.mne.ax_main.get_xticks())[0]\r\n        digits = np.ceil(-2 * np.log10(tickdiff)).astype(int)\r\n        if digits:\r\n            xdtstr += f\'{round(xdatetime.microsecond * 1e-6, digits)}\'[1:]\r\n        return xdtstr\r\n```', 'comment_created': datetime.datetime(2021, 6, 2, 16, 15, 3, tzinfo=datetime.timezone.utc), 'commenter': 'drammock', 'type': 'User'}, {'comment_id': 644120190, 'comment_body': ""two other things that would be great to see here.\r\n\r\n1. the ticks on the scrollbar never change, so they don't really need to get decimals added when zooming in. This could probably be done by adding a 'use_decimals' param to the tick formatter function, and using `functools.partial` to bake-in its value before passing it as a `FuncFormatter`\r\n2. the green text added when the vertical bar shows is often overlapping the first tick."", 'comment_created': datetime.datetime(2021, 6, 2, 16, 18, 12, tzinfo=datetime.timezone.utc), 'commenter': 'drammock', 'type': 'User'}, {'comment_id': 644185954, 'comment_body': 'How would you solve the overlapping green text issue?', 'comment_created': datetime.datetime(2021, 6, 2, 17, 41, 13, tzinfo=datetime.timezone.utc), 'commenter': 'cbrnr', 'type': 'User'}, {'comment_id': 644203738, 'comment_body': ""Not sure. One option is to give the green text a (semi-)opaque background; another is to put the green text below the green line, though it would still need the background in case it overlaps one of the other tick labels... Could also try just pushing it further left from its current position but I'm not sure that will suffice for the datetime case "", 'comment_created': datetime.datetime(2021, 6, 2, 18, 4, 16, tzinfo=datetime.timezone.utc), 'commenter': 'drammock', 'type': 'User'}, {'comment_id': 644228203, 'comment_body': ""I understand, that one wasn't necessary. Some other times I had to to cosmetic shifts to comply with the line limit. Is there a better way to handle/mark these cosmetic changes?"", 'comment_created': datetime.datetime(2021, 6, 2, 18, 40, 18, tzinfo=datetime.timezone.utc), 'commenter': 'marsipu', 'type': 'User'}, {'comment_id': 644233391, 'comment_body': ""Wow nice @drammock , I didn't know that you could pass float-seconds to `datetime.timedelta()`."", 'comment_created': datetime.datetime(2021, 6, 2, 18, 45, 13, tzinfo=datetime.timezone.utc), 'commenter': 'marsipu', 'type': 'User'}, {'comment_id': 644242495, 'comment_body': 'I like clock, because the ticks look like one and we never show a date.', 'comment_created': datetime.datetime(2021, 6, 2, 18, 57, 32, tzinfo=datetime.timezone.utc), 'commenter': 'marsipu', 'type': 'User'}, {'comment_id': 644251528, 'comment_body': 'the other parameter-line-reflowing changes in this PR are acceptable.  However, it is possible to avoid changing too many lines simply by permitting yourself to leave a line of parameters *shorter* than it could be.  The logical conclusion of this is codified in, e.g.,  [black code style](https://black.readthedocs.io/en/stable/the_black_code_style/current_style.html) where every parameter gets its own line, always, so that exactly 1 line changes when adding 1 parameter.  \r\n\r\nWe don\'t currently follow black code style, but note that even if your conscience (or your BDFL) insists that you reflow parameter lines, a good practice would be to separate (in different commits) the change where the new param was added from the change where the param list was reflowed.  That allows the PR reviewer to look at changes from all commits *except* ones with messages like ""whitespace"" or ""reflow parameter list"".', 'comment_created': datetime.datetime(2021, 6, 2, 19, 12, 30, tzinfo=datetime.timezone.utc), 'commenter': 'drammock', 'type': 'User'}, {'comment_id': 644258351, 'comment_body': ""```suggestion\r\n    fig = raw.plot(duration=dur, time_format='clock')\r\n```"", 'comment_created': datetime.datetime(2021, 6, 2, 19, 23, 26, tzinfo=datetime.timezone.utc), 'commenter': 'drammock', 'type': 'User'}, {'comment_id': 644263681, 'comment_body': 'Understood, thank you.', 'comment_created': datetime.datetime(2021, 6, 2, 19, 32, 53, tzinfo=datetime.timezone.utc), 'commenter': 'marsipu', 'type': 'User'}, {'comment_id': 644305219, 'comment_body': 'Concerning the green text:\r\nI assume the vertical-line-text would probably interfere more often with the xticks when it is put directly under the line then if it stays at the side.\r\nI tried pushing the text a bit up so it is aligned with the x-axis. How would you like that?', 'comment_created': datetime.datetime(2021, 6, 2, 20, 40, 40, tzinfo=datetime.timezone.utc), 'commenter': 'marsipu', 'type': 'User'}, {'comment_id': 644311039, 'comment_body': 'can you post a screenshot?', 'comment_created': datetime.datetime(2021, 6, 2, 20, 50, 27, tzinfo=datetime.timezone.utc), 'commenter': 'drammock', 'type': 'User'}, {'comment_id': 644762765, 'comment_body': '![grafik](https://user-images.githubusercontent.com/46245704/120647248-af3d0c80-c47a-11eb-9fc1-b13fb6f7117d.png)\r\n', 'comment_created': datetime.datetime(2021, 6, 3, 12, 48, tzinfo=datetime.timezone.utc), 'commenter': 'marsipu', 'type': 'User'}, {'comment_id': 644772053, 'comment_body': 'Just for the max. Zoom-Level this would exceed the available space. Maybe we could set a limit there ? `#97dfa0a`', 'comment_created': datetime.datetime(2021, 6, 3, 13, 1, 20, tzinfo=datetime.timezone.utc), 'commenter': 'marsipu', 'type': 'User'}, {'comment_id': 644804124, 'comment_body': '```suggestion\r\n        else:\r\n            # RAW / ICA X-AXIS TICK & LABEL FORMATTING\r\n```', 'comment_created': datetime.datetime(2021, 6, 3, 13, 43, 4, tzinfo=datetime.timezone.utc), 'commenter': 'drammock', 'type': 'User'}, {'comment_id': 644805390, 'comment_body': '```suggestion\r\n                new_dur = dur_delta\r\n```', 'comment_created': datetime.datetime(2021, 6, 3, 13, 44, 35, tzinfo=datetime.timezone.utc), 'commenter': 'drammock', 'type': 'User'}]","[{'commit_sha': 'f13a26ca497ae42bb4d0aeb4dd48736c61a7ebbf', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb2860f2e125af7ed748961404635493949df7ed', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '185dbeff9d022736c5e4f6e601c7defbdd86b6c1', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2834e0feea148a402d9b6b6095c66847113e1f66', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b1d601d707311ebad3443e0027a2f088ac62b7ab', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b064eb055afa3dce9585a65b76f5b09cf224dd7', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1beeca08a72aceafa7943c0fce04128e5d1c8a1', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c98119bb7c90de92447a412aae518bf4e7b9721', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '356bb1c04f450be048a45a37592dd292dee52a57', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39a00d6197b655f7ef912fb57606ad065b9c7007', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60ac0f59b13bcb04285c8ea63c16c7d2a3b9d5f0', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7d328034d60ff655628b59f138f882f71fff624', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab28e218118944dfb00c9bff195f25a652310aa6', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6560808b0c409ec3e8086fd898ef287c63ead301', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd17309494ad95e89a62f91daf0fcb1e2de1cc318', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a62a590f2c81e096e20ab22870d3175bb2b20a41', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1104635adbfdc428dbcd146ddccd025778c2b9d6', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '633cabb34c182b6c1999adcc2eade1694822ba98', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad9bcf7593aa6fc6e45506bf187ad93fdda17d20', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae21c12de9e5f69d263643c6cacbccda3edea5fa', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a111c5a72f7ee88df24b154d27c4940ba97e1075', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '306b6f418b3f82db8bc3232c8913108be585133b', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45f020e46f35a6164582f76672e2e16250586418', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da98c3d166718bf266b7338ba35d5b307dd31c5c', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f8b2d52c3c9e2f3bc8292e827d7974ce27b808ef', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b916411ee6775fa258d313a001e6b5f0e79667ae', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4e31a23025d0fbc9b3ee45e9191ad2d0782c25b', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9e714883a59c3aec130b21943551b4ef886c54e', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fee9b9b784a23ddf85d7872b211bf11e3bfbcbce', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '78279438ef090eae21742267fc858e266ccb2278', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c9089057efeeb89f596ffa78a685efaeb1d7d9fc', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1cbf22c719e6910279a59e408103bbc15816cb29', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f4f83a4bdefd576350ea5da9537b1b6ab854e9f4', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97dfa0adddce44e3ffc50d019f6d06ca36b03551', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e466d2a9318d12b75b70c94c62f5b6f92cfbe70', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '846f0aa1479dfc3541059d9a448ee61f967a33ae', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '358a48e2e990a2fdb5ab9bd2d8e8fde5b20038e6', 'committer_username': 'drammock', 'committer_name': 'Daniel McCloy', 'committer_email': None, 'commit_date': datetime.datetime(2012, 6, 2, 19, 15, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a8d905e40248050f47f56f3002ddec44f9a8bc00', 'committer_username': 'drammock', 'committer_name': 'Daniel McCloy', 'committer_email': None, 'commit_date': datetime.datetime(2012, 6, 2, 19, 15, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45723b4206187c2dfe0d1faf95b53b93da92d601', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc86348805fdaaabe0bd0f06c2b9d26d00d30219', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c524586674804224e34f58d590e46e34a22e8296', 'committer_username': 'drammock', 'committer_name': 'Daniel McCloy', 'committer_email': None, 'commit_date': datetime.datetime(2012, 6, 2, 19, 15, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '761fbe577681a3d4fb56218a1eef5717a96a7e08', 'committer_username': 'drammock', 'committer_name': 'Daniel McCloy', 'committer_email': None, 'commit_date': datetime.datetime(2012, 6, 2, 19, 15, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a092e6bdd7f41d3ff118a6d5322296df2dbb1545', 'committer_username': 'drammock', 'committer_name': 'Daniel McCloy', 'committer_email': None, 'commit_date': datetime.datetime(2012, 6, 2, 19, 15, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7cdd07f7972c91198783d517b4d1e95d826203c', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'faf8cfaba3d58d4de582ed41b2c1b31cfddf14d3', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'abb8fcf41257258c42b5dd3f562719040c6d3ef4', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '31cbc10c5c2d3a8a8e94b28ba52d2810ac9744ee', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e56b74705884aefd276db57b26e452f95a92bda', 'committer_username': 'drammock', 'committer_name': 'Daniel McCloy', 'committer_email': None, 'commit_date': datetime.datetime(2012, 6, 2, 19, 15, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '29b819f023b25439e2b55dea909ff435e05c320b', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9166e3036280774aee2b66f8bdb31aece3055cb', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef2989280db593fbe3c9659b89836ce54872d7f4', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}]",Martin G. Schulz,46245704,dev@mgschulz.de,User,,35,,45,26
699460779,make antialiasing optional for paintGL in PlotCurveItem,"## Summary
This PR makes antialiasing optional when OpenGL is used with PlotCurveItem as described in #1926.

I checked for `antialias` in `self._exportOpts` as it is done in `paint`. Is this necessary for this to be inside paint/paintGL or could it also be in e.g. `updateData` to improve performance a little bit?",True,1932,https://api.github.com/repos/pyqtgraph/pyqtgraph/pulls/1932,https://github.com/pyqtgraph/pyqtgraph/pull/1932,closed,14,4,1,3,1,10,0,0,[],2021-07-29 11:50:17+00:00,2021-07-30 19:19:02+00:00,113325.0,"1 day, 7:28:45","[{'comment_id': 679171834, 'comment_body': 'If aa is False, you would need to glDisable whatever got enabled when aa is True.\r\nI tried out this PR with #1910 and toggling AA from False->True->False would get a plot different from the initial plot.', 'comment_created': datetime.datetime(2021, 7, 29, 13, 52, 27, tzinfo=datetime.timezone.utc), 'commenter': 'pijyoi', 'type': 'User'}, {'comment_id': 679206129, 'comment_body': ""@pijyoi Thank you for the hint, I haven't thought of that. I am no OpenGL-expert so I just reverted to the default-values from the OpenGL-documentation. Now this lets me toggle between aa-states in your (really nice) example."", 'comment_created': datetime.datetime(2021, 7, 29, 14, 30, 25, tzinfo=datetime.timezone.utc), 'commenter': 'marsipu', 'type': 'User'}, {'comment_id': 679208474, 'comment_body': 'In `GLGridItem.py` (l.68-72), there is a similar passage. Do you think it has the same problem then and should I fix it?', 'comment_created': datetime.datetime(2021, 7, 29, 14, 33, 1, tzinfo=datetime.timezone.utc), 'commenter': 'marsipu', 'type': 'User'}, {'comment_id': 679585777, 'comment_body': ""There are 3 other places that setup GL_LINE_SMOOTH: GLAxisItem, GLGridItem, GLLinePlotItem. GLAxisItem doesn't enable blending, but would probably get it enabled by GLGridItem. A proper fix might require all GLGraphicsItem(s) to disable everything that they have enabled before they exit their paint.\r\n\r\nI would suggest to leave them as is. Don't modify things that we aren't able to test ourselves. Or raise a separate issue."", 'comment_created': datetime.datetime(2021, 7, 30, 1, 27, 27, tzinfo=datetime.timezone.utc), 'commenter': 'pijyoi', 'type': 'User'}, {'comment_id': 679623167, 'comment_body': ""Probably after painting with antialiasing on, GL_LINE_SMOOTH should be disabled.\r\nIf we take a peek at: https://code.woboq.org/qt6/qtbase/src/opengl/qopenglpaintengine.cpp.html#_ZN28QOpenGL2PaintEngineExPrivate12resetGLStateEv\r\nGL_LINE_SMOOTH happens to be one of the things that Qt library doesn't disable for us.\r\nOn the other hand, GL_BLEND is disabled for us, so we didn't actually need to disable it for non-antialiased mode."", 'comment_created': datetime.datetime(2021, 7, 30, 3, 32, 46, tzinfo=datetime.timezone.utc), 'commenter': 'pijyoi', 'type': 'User'}, {'comment_id': 679700595, 'comment_body': 'Ok, so should I remove those lines again?\r\n```python\r\ngl.glDisable(gl.GL_BLEND)\r\ngl.glBlendFunc(gl.GL_ONE, gl.GL_ZERO)\r\ngl.glHint(gl.GL_LINE_SMOOTH_HINT, gl.GL_DONT_CARE)\r\n```', 'comment_created': datetime.datetime(2021, 7, 30, 7, 6, 47, tzinfo=datetime.timezone.utc), 'commenter': 'marsipu', 'type': 'User'}, {'comment_id': 679707279, 'comment_body': ""That seems to work too, but performance doesn't seem to be influenced by just removing the lines. Do you think we could introduce an attribute like `_aa_state` to PlotCurveItem which then calls the `glEnable`/`glDisable`-functions only when the state changes?"", 'comment_created': datetime.datetime(2021, 7, 30, 7, 19, 27, tzinfo=datetime.timezone.utc), 'commenter': 'marsipu', 'type': 'User'}, {'comment_id': 679727553, 'comment_body': 'The problem is that when you have called ```beginNativePainting()```, Qt makes little guarantee about the state. So things that we need, we need to set again for each frame. E.g. What would happen if we created 2 PlotWidgets in a single QMainWindow, one with antialiasing enabled and the other disabled? I would guess that because of the shared OpenGL context, they would see the last set setting of GL_LINE_SMOOTH.', 'comment_created': datetime.datetime(2021, 7, 30, 7, 55, 12, tzinfo=datetime.timezone.utc), 'commenter': 'pijyoi', 'type': 'User'}, {'comment_id': 679729717, 'comment_body': 'So should I just remove the above lines to have a bit less to call when AA is disabled?', 'comment_created': datetime.datetime(2021, 7, 30, 7, 58, 43, tzinfo=datetime.timezone.utc), 'commenter': 'marsipu', 'type': 'User'}, {'comment_id': 679740799, 'comment_body': ""Yes. Based on my understanding, the only line needed would be\r\n```python\r\ngl.glDisable(gl.GL_LINE_SMOOTH)\r\n```\r\nBtw, it's not so much for performance to reduce the number of lines here. Code like this tends to get copied around, so if we can, we keep the code to only the bits necessary."", 'comment_created': datetime.datetime(2021, 7, 30, 8, 17, 24, tzinfo=datetime.timezone.utc), 'commenter': 'pijyoi', 'type': 'User'}]","[{'commit_sha': 'f37cd70ae7d6e4ac96c4629e2b81cd93e594f352', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7c0a5d75a937c4ba989dd733e17726cc494b74f', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b9f80b3c4842f64c41e36ee1f674bef8c363a09c', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}]",Martin G. Schulz,46245704,dev@mgschulz.de,User,,35,,45,26
693425831,"[ENH, VIZ]: Refactor _figure.py-classes to prepare alternative backend","## Abstract
This PR is supposed to refactor all methods and attributes from the Classes associated with the current implementation of 2D-Data-Visualization (mainly MNEBrowserFigure) into a new parent class called MNEDataBrowser. This should make the addition of a new implementation based on pyqtgraph (currently developed [here](https://github.com/marsipu/gsoc2021) more feasible. It will contain all visualization-independent steps of the preparation of data. Furthermore the aim is to let both backends use similar data-structures to store gui-elements like Annotations, Event-Lines, etc. ... . And some backend-independent GUI-Methods could be outlined as abstractmethods.

## ToDo
- [X] Create MNEDataBrowser
- [X] Move MNEBrowserFigure-Initialization to MNEDataBrowser
- [X] Extract GUI-independent methods from MNEBrowserFigure
- [X] Refactored DataIO
- [X] use/set/get for browser-backend
- [x] Refactor Tests",True,9596,https://api.github.com/repos/mne-tools/mne-python/pulls/9596,https://github.com/mne-tools/mne-python/pull/9596,closed,3035,2623,14,48,27,79,0,0,[],2021-07-20 12:30:10+00:00,2021-08-14 10:40:15+00:00,2153405.0,"24 days, 22:10:05","[{'comment_id': 680039684, 'comment_body': 'I wonder if it would be more consistent to call this `MNE_BROWSE_BACKEND` (since we have `MNE_BROWSE_RAW_SIZE` already)?', 'comment_created': datetime.datetime(2021, 7, 30, 16, 5, 14, tzinfo=datetime.timezone.utc), 'commenter': 'drammock', 'type': 'User'}, {'comment_id': 680040741, 'comment_body': 'here again I wonder if `BROWSE` is better than `BROWSER`', 'comment_created': datetime.datetime(2021, 7, 30, 16, 7, tzinfo=datetime.timezone.utc), 'commenter': 'drammock', 'type': 'User'}, {'comment_id': 680098229, 'comment_body': 'Is this whole conditional block just for `_create_selection_fig()`?  The intended approach is meant to let us avoid such conditionals.\r\n\r\nAs it\'s currently implemented, if the user requests the PyQtGraph backend and also passes `group_by=\'selection\'` then they will simply not get what they asked for.  If the plan is not to support ""selection mode"" under PyQtGraph, maybe implement a `_create_selection_fig()` method for that one, but have it simply raise a `ValueError` or `NotImplementedError` saying you can\'t use selection mode with that backend.\r\n\r\nIf I\'m misunderstanding the intent here, LMK', 'comment_created': datetime.datetime(2021, 7, 30, 17, 7, 20, tzinfo=datetime.timezone.utc), 'commenter': 'drammock', 'type': 'User'}, {'comment_id': 680100209, 'comment_body': 'same comment as above.  The backends should have all of the same methods (some of them might be no-ops or raise `NotImplementedError`s depending on differences in how Matplotlib and PyQtGraph work) and that should allow this code to run without the conditional.', 'comment_created': datetime.datetime(2021, 7, 30, 17, 10, 49, tzinfo=datetime.timezone.utc), 'commenter': 'drammock', 'type': 'User'}, {'comment_id': 680101218, 'comment_body': 'ditto', 'comment_created': datetime.datetime(2021, 7, 30, 17, 12, 40, tzinfo=datetime.timezone.utc), 'commenter': 'drammock', 'type': 'User'}, {'comment_id': 680108446, 'comment_body': 'wondering whether any of these really need to be public.  prepend underscores to all of them.', 'comment_created': datetime.datetime(2021, 7, 30, 17, 25, 31, tzinfo=datetime.timezone.utc), 'commenter': 'drammock', 'type': 'User'}, {'comment_id': 680113554, 'comment_body': '```console\r\n$ git grep logger\\.info | wc -l\r\n1027\r\n$ git grep ""logger\\.info.*\\\\\\n"" | wc -l\r\n49\r\n```\r\n\r\nthis shows that the vast majority of our `logger.info` messages do not have an extra newline at the end.  Did you put it there for a reason?', 'comment_created': datetime.datetime(2021, 7, 30, 17, 34, 17, tzinfo=datetime.timezone.utc), 'commenter': 'drammock', 'type': 'User'}, {'comment_id': 680114743, 'comment_body': ""(nitpick) a function that instantiates something that you know doesn't yet exist should not be called `_get_*` it should be called `_make_*` or `_init_*` or similar."", 'comment_created': datetime.datetime(2021, 7, 30, 17, 36, 22, tzinfo=datetime.timezone.utc), 'commenter': 'drammock', 'type': 'User'}, {'comment_id': 680115814, 'comment_body': 'no blank line between param defs', 'comment_created': datetime.datetime(2021, 7, 30, 17, 38, 20, tzinfo=datetime.timezone.utc), 'commenter': 'drammock', 'type': 'User'}, {'comment_id': 680116492, 'comment_body': 'OpenGL (capital L)', 'comment_created': datetime.datetime(2021, 7, 30, 17, 39, 31, tzinfo=datetime.timezone.utc), 'commenter': 'drammock', 'type': 'User'}, {'comment_id': 680118232, 'comment_body': 'should be `logger.info`?  and maybe something more descriptive than just the backend name, like ""using XXX data browser backend""?', 'comment_created': datetime.datetime(2021, 7, 30, 17, 42, 12, tzinfo=datetime.timezone.utc), 'commenter': 'drammock', 'type': 'User'}, {'comment_id': 680123351, 'comment_body': 'the logic of this function is a little dizzying:\r\n```\r\nif name is None:\r\n    get name from config\r\n    if name is still None:\r\n        try all the valid possibilities\r\n    else:\r\n        check if name is valid, then reload the backend\r\ncheck if name is valid\r\nreturn name\r\n```\r\n\r\nWhen I find myself writing functions like this, I find it helps make the code easier to follow if I dispense with the easiest cases first (one easy way to sometimes achieve this is testing `x is not None` instead of `x is None`, for example).  See if you can get the logic to look like this:\r\n\r\n```\r\nif name is not None:\r\n    check if name is valid\r\n    return name (now, the rest need not be indented!)\r\nget name from config\r\nif name is not None:\r\n    check if name is valid\r\n    return name\r\ntry all the valid possibilities, etc\r\n```', 'comment_created': datetime.datetime(2021, 7, 30, 17, 51, 5, tzinfo=datetime.timezone.utc), 'commenter': 'drammock', 'type': 'User'}, {'comment_id': 680127560, 'comment_body': 'odd to call a `_get_*` function and not do anything with the returned result.  Suggests either a mistake, or a poorly named function', 'comment_created': datetime.datetime(2021, 7, 30, 17, 58, 39, tzinfo=datetime.timezone.utc), 'commenter': 'drammock', 'type': 'User'}, {'comment_id': 680129100, 'comment_body': ""the way this is done now (passed to the same function as the rest of `kwargs`), it's no longer clear why figsize gets `pop`ped.  Perhaps \r\n\r\n```\r\ndefault_kwargs = dict(figsize=_get_figsize_from_config())\r\ndefault_kwargs.update(kwargs)\r\n...\r\n_init_browser(inst, **default_kwargs)\r\n```\r\nWDYT?"", 'comment_created': datetime.datetime(2021, 7, 30, 18, 1, 34, tzinfo=datetime.timezone.utc), 'commenter': 'drammock', 'type': 'User'}, {'comment_id': 680131338, 'comment_body': ""I don't love this (would have expected `ann_fig.press_key(key)`).  I guess it's a consequence of the fact that pyqtgraph backend will handle annotations through its toolbar and hence won't have a separate annotation window?  Would it work to have `ann_fig` still exist in pyqtgraph case, but have it be a non-displaying object that passes interactions back to the main window?  Not sure which way is easier / better; WDYT?"", 'comment_created': datetime.datetime(2021, 7, 30, 18, 5, 53, tzinfo=datetime.timezone.utc), 'commenter': 'drammock', 'type': 'User'}, {'comment_id': 680136651, 'comment_body': 'no.  this will close ALL FIGURES, not just the main data browser and its associated child figs.  See how the `_close` method currently works (all you need to do is close the main data browser window and all the child figs will automatically close with it).  Also not clear why this needs to be public.', 'comment_created': datetime.datetime(2021, 7, 30, 18, 15, 48, tzinfo=datetime.timezone.utc), 'commenter': 'drammock', 'type': 'User'}, {'comment_id': 680138558, 'comment_body': 'no. This will include any other MPL figure windows that the user happens to have open.', 'comment_created': datetime.datetime(2021, 7, 30, 18, 19, 22, tzinfo=datetime.timezone.utc), 'commenter': 'drammock', 'type': 'User'}, {'comment_id': 680138974, 'comment_body': ""(nitpick) for consistency I'd call this `fake_keypress` or `fake_key_press`"", 'comment_created': datetime.datetime(2021, 7, 30, 18, 20, 12, tzinfo=datetime.timezone.utc), 'commenter': 'drammock', 'type': 'User'}, {'comment_id': 680140400, 'comment_body': 'would it work to have the figure method be a thin wrapper to a utility function like the existing `_fake_click` function?  I think we use fake clicks in testing for other plots besides just the data browser... might be more DRY', 'comment_created': datetime.datetime(2021, 7, 30, 18, 22, 44, tzinfo=datetime.timezone.utc), 'commenter': 'drammock', 'type': 'User'}, {'comment_id': 680140889, 'comment_body': 'there should not be a testing function here.  Tests belong in `test_*.py` files inside `*/tests/` folders ', 'comment_created': datetime.datetime(2021, 7, 30, 18, 23, 43, tzinfo=datetime.timezone.utc), 'commenter': 'drammock', 'type': 'User'}, {'comment_id': 680178248, 'comment_body': ""Right, this doesn't need to be public. This method was just something I added where in the current tests `plt.close('all')` would be called. I can specify this more with `_close` as you suggest."", 'comment_created': datetime.datetime(2021, 7, 30, 19, 36, 50, tzinfo=datetime.timezone.utc), 'commenter': 'marsipu', 'type': 'User'}, {'comment_id': 680178486, 'comment_body': ""Right, this shouldn't be public. It was like close_all from above something I just refactored from the tests before changing something."", 'comment_created': datetime.datetime(2021, 7, 30, 19, 37, 25, tzinfo=datetime.timezone.utc), 'commenter': 'marsipu', 'type': 'User'}, {'comment_id': 680182970, 'comment_body': 'This block should wrap every method-call which is currently not implemented in the pyqtgraph-browser (that is why the selection-code is in there too because this is not implemented in pyqtgraph yet).\r\n\r\nAs you say some methods may be difficult or unnecessary to be transfered to the pyqtgraph-backend. Maybe a common and abstract `update`-method could make the generalization easier here?', 'comment_created': datetime.datetime(2021, 7, 30, 19, 47, 8, tzinfo=datetime.timezone.utc), 'commenter': 'marsipu', 'type': 'User'}, {'comment_id': 680184737, 'comment_body': 'Yes thats right, I changed the signature a bit by adding defaults to target(former fig) and ax which results in reduced calls from the tests. But that can be done better by wrapping `_fake_click `from `mne.viz.utils`, thanks for the hint.', 'comment_created': datetime.datetime(2021, 7, 30, 19, 51, 1, tzinfo=datetime.timezone.utc), 'commenter': 'marsipu', 'type': 'User'}, {'comment_id': 680185411, 'comment_body': 'Yes, the naming is misleading. This is too something I just refactored in the first step from the tests. Maybe I can leave it as WIP for now? Because I think especially this test can be challenging to generalize between matplotlib and pyqtgraph.', 'comment_created': datetime.datetime(2021, 7, 30, 19, 52, 34, tzinfo=datetime.timezone.utc), 'commenter': 'marsipu', 'type': 'User'}, {'comment_id': 680194195, 'comment_body': ""if there are a few tests that will only work for one backend or another, that's fine, but they should still live in a `test_*.py` file inside a `*/tests/` directory (and just not be parametrized to run under both backends).  Depending on how many such tests there are, they can either live in the existing `test_raw.py` or there could be separate `test_mpl_backend.py` and `test_pyqtgraph_backend.py` files to contain those tests."", 'comment_created': datetime.datetime(2021, 7, 30, 20, 11, 57, tzinfo=datetime.timezone.utc), 'commenter': 'drammock', 'type': 'User'}, {'comment_id': 680196546, 'comment_body': '> This block should wrap every method-call which is currently not implemented in the pyqtgraph-browser\r\n\r\nwhy?  This PR is supposed to be a pure conceptual refactoring of existing matplotolib plotting, and is not supposed to implement the pyqtgraph browser yet, so there should be no need.', 'comment_created': datetime.datetime(2021, 7, 30, 20, 16, 56, tzinfo=datetime.timezone.utc), 'commenter': 'drammock', 'type': 'User'}, {'comment_id': 680859079, 'comment_body': 'Ok, good to know. I was taking `_get_renderer` in `renderer.py` as a blueprint and thought it was necessary.', 'comment_created': datetime.datetime(2021, 8, 2, 10, 30, 54, tzinfo=datetime.timezone.utc), 'commenter': 'marsipu', 'type': 'User'}, {'comment_id': 680873874, 'comment_body': 'I understand, but in this case it could be interpreted as kind of a ""get"" because it calls the `_init_browser`-funtion of the selected backend. A second `_init_browser` would be maybe confusing?', 'comment_created': datetime.datetime(2021, 8, 2, 10, 56, 15, tzinfo=datetime.timezone.utc), 'commenter': 'marsipu', 'type': 'User'}, {'comment_id': 680912370, 'comment_body': 'Yes, you are right, I also would like more if just the kwargs would be passed on to _init_browser', 'comment_created': datetime.datetime(2021, 8, 2, 12, 2, 29, tzinfo=datetime.timezone.utc), 'commenter': 'marsipu', 'type': 'User'}, {'comment_id': 680938434, 'comment_body': ""Frankly applying additional structures from matplotlib onto pyqtgraph (and then probably also vice versa) seems to me a bit confusing and constraining regarding the further development of each backend in general. \r\nBut if we want minimal change and we don't want to have if-cases for each backend in some of the tests, there probably has to be a dummy-counterpart or something similar. This might be more conservative on the tests if these cases are handled inside the respective Backend-Class (with target/fig as parameter and not as potential non-existing object).\r\n\r\nWhat may be a solution to this specific problem could be putting this method and also e.g _fake_click into MNEFigure. \r\nBut this would then make inheritance and having those methods as abstract methods in BrowserBase more difficult (wasn't able to solve that yet, so I first await for your response about this).\r\nWDYT?"", 'comment_created': datetime.datetime(2021, 8, 2, 12, 43, 25, tzinfo=datetime.timezone.utc), 'commenter': 'marsipu', 'type': 'User'}, {'comment_id': 681472895, 'comment_body': 'I think this line is the reason, why the refactored test fails. Is it intentional that the _fake_click is transformed to data-coordinates of data_ax instead of fig.ax_main from the fig instantiated three lines above?', 'comment_created': datetime.datetime(2021, 8, 3, 6, 32, 41, tzinfo=datetime.timezone.utc), 'commenter': 'marsipu', 'type': 'User'}, {'comment_id': 681756929, 'comment_body': '> But if we want minimal change and we don\'t want to have if-cases for each backend in some of the tests, there probably has to be a dummy-counterpart or something similar.\r\n\r\nThis is certainly my preference (compared to using if-else logic for the different backends).  Having an explicit dummy method provides a place in the code to briefly explain *why* that dummy method is a dummy (e.g., a docstring that says ""dummy method for X, because PyQtGraph handles X in a toolbar, not in a separate figure""). This makes understanding the various backends and how they differ much easier for future maintainers.\r\n\r\n> What may be a solution to this specific problem could be putting this method and also e.g _fake_click into MNEFigure.\r\n\r\nFor this particular case it may be that we need to revisit how `_fake_click` and `_fake_keypress` work to allow them to interact with toolbar elements more easily. Or perhaps we will ultimately need higher-level methods that are part of each backend, like `_route_keypress_to_annotation_textbox(key)`, so that the tests simply call that method and the helper methods contain the logic to get the correct window / textbox in focus to receive the key.  But for now, *remember that this PR is supposed to split out matplotlib-specific code from backend-agnostic code*.  You don\'t need to make the code fully compatible with PyQtGraph yet; if you foresee troublesome areas it is enough to leave code comments saying, e.g., ""this method won\'t translate well to PyQtGraph backend because annotations are handled in a toolbar"".  It will be easier to tackle those incommensurabilities one at a time, once this refactoring is done and once the (relatively) straightforward, similar parts of the new backend have been implemented.', 'comment_created': datetime.datetime(2021, 8, 3, 13, 26, 42, tzinfo=datetime.timezone.utc), 'commenter': 'drammock', 'type': 'User'}, {'comment_id': 681898114, 'comment_body': ""> Or perhaps we will ultimately need higher-level methods that are part of each backend, like _route_keypress_to_annotation_textbox(key)\r\n\r\nIf I understand correctly, we would then have a helper-method for each child-element we want to test the interaction with.\r\nWouldn't the current solution with passing the child-element as an argument be a bit cleaner?\r\n\r\nOr we could create a second Base-Class like `FigureBase`, where we would but all abstract methods which would be used by the main browser and its children together (something like `_click_ch_name` for example would only be used by `MNEBrowseFigure` and all the other methods in `BrowserBase` would also be of no use or even interfering with for e.g. `MNEAnnotationFigure`."", 'comment_created': datetime.datetime(2021, 8, 3, 16, 1, 25, tzinfo=datetime.timezone.utc), 'commenter': 'marsipu', 'type': 'User'}, {'comment_id': 681904095, 'comment_body': ""> Wouldn't the current solution with passing the child-element as an argument be a bit cleaner?\r\n\r\nmaybe.  I'm not advocating any specific solution to this specific problem right now. The point I'm trying to make is that deciding among the many possible ways to adapt the tests to handle multiple backends will be *easier* if you *wait* to adapt the tests until *after* the conceptual separation of backend-agnostic and MPL-backend-specific code has been done.  "", 'comment_created': datetime.datetime(2021, 8, 3, 16, 8, 41, tzinfo=datetime.timezone.utc), 'commenter': 'drammock', 'type': 'User'}, {'comment_id': 682124724, 'comment_body': 'these should be relative imports. We only do `from mne.whatever import foo` in the tests.', 'comment_created': datetime.datetime(2021, 8, 3, 21, 47, 42, tzinfo=datetime.timezone.utc), 'commenter': 'drammock', 'type': 'User'}, {'comment_id': 682125681, 'comment_body': ""```suggestion\r\n        inst = kwargs.get('inst', None)\r\n        ica = kwargs.get('ica', None)\r\n```"", 'comment_created': datetime.datetime(2021, 8, 3, 21, 49, 34, tzinfo=datetime.timezone.utc), 'commenter': 'drammock', 'type': 'User'}, {'comment_id': 682127171, 'comment_body': 'will `inst` ever be `None`?', 'comment_created': datetime.datetime(2021, 8, 3, 21, 52, 37, tzinfo=datetime.timezone.utc), 'commenter': 'drammock', 'type': 'User'}, {'comment_id': 682129150, 'comment_body': 'these `annot.remove()` and `text.remove()` are MPL-specific (`.remove()` is a method of MPL artists). May need to pull out this method too.', 'comment_created': datetime.datetime(2021, 8, 3, 21, 56, 47, tzinfo=datetime.timezone.utc), 'commenter': 'drammock', 'type': 'User'}, {'comment_id': 682132139, 'comment_body': 'we usually avoid backslash-continuation lines and use parentheses instead', 'comment_created': datetime.datetime(2021, 8, 3, 22, 2, 53, tzinfo=datetime.timezone.utc), 'commenter': 'drammock', 'type': 'User'}, {'comment_id': 682137780, 'comment_body': 'this was probably a mistake / cruft.', 'comment_created': datetime.datetime(2021, 8, 3, 22, 15, 19, tzinfo=datetime.timezone.utc), 'commenter': 'drammock', 'type': 'User'}, {'comment_id': 682138116, 'comment_body': 'I think then based on your other comment that this line should change', 'comment_created': datetime.datetime(2021, 8, 3, 22, 16, 1, tzinfo=datetime.timezone.utc), 'commenter': 'drammock', 'type': 'User'}, {'comment_id': 682138562, 'comment_body': 'I think here you can do `ax=fig.mne.ax_vscroll`?', 'comment_created': datetime.datetime(2021, 8, 3, 22, 17, tzinfo=datetime.timezone.utc), 'commenter': 'drammock', 'type': 'User'}, {'comment_id': 682139746, 'comment_body': ""you changed what is being tested here. it's now sending those fake keypresses to `fig` instead of `sel_fig`.  You should revert renaming `fig` to `sel_fig`.  I think also maybe we can get access to `sel_fig` through `fig.mne.fig_selection` instead of looping and looking for `radio` attribute?"", 'comment_created': datetime.datetime(2021, 8, 3, 22, 19, 52, tzinfo=datetime.timezone.utc), 'commenter': 'drammock', 'type': 'User'}, {'comment_id': 682520958, 'comment_body': ""No you're right, as we discussed yesterday it probably makes no sense for users to start an empty browser-container."", 'comment_created': datetime.datetime(2021, 8, 4, 11, 15, 57, tzinfo=datetime.timezone.utc), 'commenter': 'marsipu', 'type': 'User'}, {'comment_id': 682547672, 'comment_body': 'Ok, but if I change that an error is thrown because one of the channels also part of the first projection is marked bad.\r\nI tried to change that, but the error is thrown anyway and I am not sure how to fix this. Can you help?', 'comment_created': datetime.datetime(2021, 8, 4, 11, 58, 12, tzinfo=datetime.timezone.utc), 'commenter': 'marsipu', 'type': 'User'}, {'comment_id': 682557986, 'comment_body': ""It should still be the same logic:\r\n`sel_fig` is passed to the `_fake_keypress`-method so the `key_press_event` is called on `sel_fig`.\r\nBut the problem why I had to rename `fig` to `sel_fig` is that `_fake_keypress`-method only exists in `BrowserBase` which is inherited from `fig`(`MNEBrowseFigure`) and not `sel_fig`(`MNESelectionFigure`).\r\nThis was the cost of generalizing all backend-agnostic methods from the browser and interactivity-tests into one base-class, which can't be inherited by child figures as `MNESelectionFigure`."", 'comment_created': datetime.datetime(2021, 8, 4, 12, 14, 16, tzinfo=datetime.timezone.utc), 'commenter': 'marsipu', 'type': 'User'}, {'comment_id': 683592693, 'comment_body': ""ah, you're right, I was misreading the code"", 'comment_created': datetime.datetime(2021, 8, 5, 16, 5, 58, tzinfo=datetime.timezone.utc), 'commenter': 'drammock', 'type': 'User'}, {'comment_id': 683645619, 'comment_body': ""only the main plot window has an `ax_main`.  It looks like in the SSP dialog figure we don't actually store a reference to the main axes, but a few lines above we've already tracked them down as `ax = ssp_fig.mne.proj_checkboxes.ax` \r\n```suggestion\r\n    fig._fake_click(pos, ssp_fig, ax, xform='data')\r\n```"", 'comment_created': datetime.datetime(2021, 8, 5, 17, 18, 53, tzinfo=datetime.timezone.utc), 'commenter': 'drammock', 'type': 'User'}, {'comment_id': 687659284, 'comment_body': 'Why the newline here?', 'comment_created': datetime.datetime(2021, 8, 12, 12, 21, 32, tzinfo=datetime.timezone.utc), 'commenter': 'cbrnr', 'type': 'User'}, {'comment_id': 687659699, 'comment_body': 'Why the newline here?', 'comment_created': datetime.datetime(2021, 8, 12, 12, 22, 7, tzinfo=datetime.timezone.utc), 'commenter': 'cbrnr', 'type': 'User'}, {'comment_id': 687660304, 'comment_body': '```suggestion\r\n""""""Base classes and functions for 2D browser backends.""""""\r\n```', 'comment_created': datetime.datetime(2021, 8, 12, 12, 22, 59, tzinfo=datetime.timezone.utc), 'commenter': 'cbrnr', 'type': 'User'}, {'comment_id': 687660986, 'comment_body': 'Rename to `_backends`?', 'comment_created': datetime.datetime(2021, 8, 12, 12, 23, 54, tzinfo=datetime.timezone.utc), 'commenter': 'cbrnr', 'type': 'User'}, {'comment_id': 687661242, 'comment_body': '```suggestion\r\n    """"""Container object for 2D data browser parameters.""""""\r\n```', 'comment_created': datetime.datetime(2021, 8, 12, 12, 24, 20, tzinfo=datetime.timezone.utc), 'commenter': 'cbrnr', 'type': 'User'}, {'comment_id': 687661628, 'comment_body': '```suggestion\r\n    A base class containing for the 2D data browser.\r\n```', 'comment_created': datetime.datetime(2021, 8, 12, 12, 24, 51, tzinfo=datetime.timezone.utc), 'commenter': 'cbrnr', 'type': 'User'}, {'comment_id': 687661929, 'comment_body': 'I think we usually start our docstrings directly after `""""""` (no newline).', 'comment_created': datetime.datetime(2021, 8, 12, 12, 25, 16, tzinfo=datetime.timezone.utc), 'commenter': 'cbrnr', 'type': 'User'}, {'comment_id': 687662550, 'comment_body': 'Why is this called `self.mne`?', 'comment_created': datetime.datetime(2021, 8, 12, 12, 26, 8, tzinfo=datetime.timezone.utc), 'commenter': 'cbrnr', 'type': 'User'}, {'comment_id': 687664782, 'comment_body': 'Missing `@abstractmethod`?', 'comment_created': datetime.datetime(2021, 8, 12, 12, 29, 14, tzinfo=datetime.timezone.utc), 'commenter': 'cbrnr', 'type': 'User'}, {'comment_id': 687666771, 'comment_body': ""```suggestion\r\n    logger.info(f'Using {backend_name} as 2D backend.')\r\n```"", 'comment_created': datetime.datetime(2021, 8, 12, 12, 32, 2, tzinfo=datetime.timezone.utc), 'commenter': 'cbrnr', 'type': 'User'}, {'comment_id': 687667147, 'comment_body': 'Is this possible without `importlib` (i.e. a regular `import`)?', 'comment_created': datetime.datetime(2021, 8, 12, 12, 32, 33, tzinfo=datetime.timezone.utc), 'commenter': 'cbrnr', 'type': 'User'}, {'comment_id': 687667392, 'comment_body': '```suggestion\r\n    # Initialize browser backend\r\n```', 'comment_created': datetime.datetime(2021, 8, 12, 12, 32, 54, tzinfo=datetime.timezone.utc), 'commenter': 'cbrnr', 'type': 'User'}, {'comment_id': 687668197, 'comment_body': 'What do you mean by ""this won\'t appear in the documentation""?', 'comment_created': datetime.datetime(2021, 8, 12, 12, 34, 2, tzinfo=datetime.timezone.utc), 'commenter': 'cbrnr', 'type': 'User'}, {'comment_id': 687668272, 'comment_body': '```suggestion\r\n    """"""Set the 2D browser backend for MNE.\r\n```', 'comment_created': datetime.datetime(2021, 8, 12, 12, 34, 9, tzinfo=datetime.timezone.utc), 'commenter': 'cbrnr', 'type': 'User'}, {'comment_id': 687668368, 'comment_body': '```suggestion\r\n        The 2D browser backend to select. See Notes for the capabilities\r\n```', 'comment_created': datetime.datetime(2021, 8, 12, 12, 34, 18, tzinfo=datetime.timezone.utc), 'commenter': 'cbrnr', 'type': 'User'}, {'comment_id': 687668686, 'comment_body': '```suggestion\r\n       | **2D browser function:**             | matplotlib | pyqtgraph |\r\n```', 'comment_created': datetime.datetime(2021, 8, 12, 12, 34, 45, tzinfo=datetime.timezone.utc), 'commenter': 'cbrnr', 'type': 'User'}, {'comment_id': 687668937, 'comment_body': '```suggestion\r\n       | Butterfly Mode                       | ✓          |           |\r\n```', 'comment_created': datetime.datetime(2021, 8, 12, 12, 35, 3, tzinfo=datetime.timezone.utc), 'commenter': 'cbrnr', 'type': 'User'}, {'comment_id': 687669044, 'comment_body': '```suggestion\r\n       | OpenGL Acceleration                  |            | ✓         |\r\n```', 'comment_created': datetime.datetime(2021, 8, 12, 12, 35, 11, tzinfo=datetime.timezone.utc), 'commenter': 'cbrnr', 'type': 'User'}, {'comment_id': 687669325, 'comment_body': '```suggestion\r\n        # Try import of valid browser backends\r\n```', 'comment_created': datetime.datetime(2021, 8, 12, 12, 35, 32, tzinfo=datetime.timezone.utc), 'commenter': 'cbrnr', 'type': 'User'}, {'comment_id': 687669901, 'comment_body': '```suggestion\r\n        The 2D browser backend currently in use. If no backend is found,\r\n```', 'comment_created': datetime.datetime(2021, 8, 12, 12, 36, 20, tzinfo=datetime.timezone.utc), 'commenter': 'cbrnr', 'type': 'User'}, {'comment_id': 687670304, 'comment_body': '```suggestion\r\n    """"""Create a 2D browser visualization context using the designated backend.\r\n```', 'comment_created': datetime.datetime(2021, 8, 12, 12, 36, 54, tzinfo=datetime.timezone.utc), 'commenter': 'cbrnr', 'type': 'User'}, {'comment_id': 687678704, 'comment_body': ""Good question, probably came with trying to adhere to <79 chars and the line looked long (but wasn't too long in fact)."", 'comment_created': datetime.datetime(2021, 8, 12, 12, 47, 52, tzinfo=datetime.timezone.utc), 'commenter': 'marsipu', 'type': 'User'}, {'comment_id': 687680600, 'comment_body': 'At first I thought this is not necessary for pyqtgraph but now I got it too so it can be abstract.', 'comment_created': datetime.datetime(2021, 8, 12, 12, 50, 25, tzinfo=datetime.timezone.utc), 'commenter': 'marsipu', 'type': 'User'}, {'comment_id': 687683096, 'comment_body': 'This is a convention introduced in the matplotlib-backend to access parameters and gui-elements across parent and childs or depending gui-objects. I adapted it (before I had something similar with passing the parent-class onto the childs). The matplotlib-backend relies havily on this convetion so changing something there would have big consequences.\r\nI think the name is just short which is good since it is used very frequently.', 'comment_created': datetime.datetime(2021, 8, 12, 12, 53, 33, tzinfo=datetime.timezone.utc), 'commenter': 'marsipu', 'type': 'User'}, {'comment_id': 687687471, 'comment_body': 'Would you then import both from the beginning and just switch backend between the module-namespace?\r\nWhat would be the advantage of that? (I thought it is the same?)', 'comment_created': datetime.datetime(2021, 8, 12, 12, 58, 59, tzinfo=datetime.timezone.utc), 'commenter': 'marsipu', 'type': 'User'}, {'comment_id': 687688886, 'comment_body': ""We havent added set_browser_backend (and the other browser-backend-functions) to __init__.py of viz yet so they won't be included from spinx when this PR gets merged. They're just already there and would be added in the next PR."", 'comment_created': datetime.datetime(2021, 8, 12, 13, 0, 47, tzinfo=datetime.timezone.utc), 'commenter': 'marsipu', 'type': 'User'}, {'comment_id': 687694000, 'comment_body': '```suggestion\r\n# data from sample dataset\r\n```', 'comment_created': datetime.datetime(2021, 8, 12, 13, 7, 30, tzinfo=datetime.timezone.utc), 'commenter': 'cbrnr', 'type': 'User'}, {'comment_id': 687694284, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 8, 12, 13, 7, 49, tzinfo=datetime.timezone.utc), 'commenter': 'cbrnr', 'type': 'User'}, {'comment_id': 687695308, 'comment_body': ""It's still two lines"", 'comment_created': datetime.datetime(2021, 8, 12, 13, 9, 6, tzinfo=datetime.timezone.utc), 'commenter': 'cbrnr', 'type': 'User'}, {'comment_id': 687695821, 'comment_body': '```suggestion\r\nfrom mne import Epochs, create_info, EpochsArray\r\n```', 'comment_created': datetime.datetime(2021, 8, 12, 13, 9, 49, tzinfo=datetime.timezone.utc), 'commenter': 'cbrnr', 'type': 'User'}]","[{'commit_sha': 'b0b18790f33d5a0a62434aa926c990f8b016da86', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b58a1098cbfb71a6a2920e59b6807ee553dff8e', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd749f1df5d0a0bab9b8696a2cd35cfc1d20dc0e', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c2239c9be300ca8529f7e56acfaebcebb4808d0e', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '577ae40c8e0bf6a054d55fb6c6006242d5c39e4a', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac86801cf50e53ce4fcc9f693631cc1a667b6b44', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '35705a2ce45f6f853c50ac465a16ef993d29485a', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb25fc0331ec89cb58cf4f9459728757863d7018', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c63e89901edf0377baa5bf3c7a8035134f1abcaf', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b2a3671758791052c1c10ebe1aae6fc0b3ff489', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7578b9ed97908e5a5f14cba7792eb8a3ac6850fa', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45a0e2b1e97fcd959204aafab83474e5211abe89', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e0ab9fecdf08962f6d110a4b8c5af2028406eb24', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84e1e8f091ff1f07c20c91ee944d70b44fd25a8e', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4af0e574b18422ab1ded4d92390e0b5f6bb0744', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6573fe287fe395b98ca308b25e42f334f14b40f', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f4ce73f6e186d2c76bb2babdb55256f329467fb', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '378ea1597fce2256b3da17dc4f620ddf1242964d', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1b432a38c2494c586ba139a0d3a06bf8da32a07', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0f5699957c89ab5bb9bb8cd461f615de39f892d', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0eefb91c62492224cb073510051a7f1acc1874cf', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8658fd9e80f86adf7e70f5803a9ce7095d9febe2', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '588a4a5abe91ca57542476ce2bf8040cbbec7148', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '01a7fd39235b96389ea29756c4a37b2e82bb6dc2', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '014048cf80049df008592baaab7b2a6fdc6a77d3', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2e6cb2f6775246042a76e1e1b850a74d6959af6', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e6cee946fd2f033160ba775364e5dccdac5d4f1f', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f8e796048b83c8dc6fe110eee6bb3cb1c25514f3', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '200d8e942fcd8a1129335d65bca07a648752766b', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25b4fc7708950d13b4990def54ca5de3095261fb', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f8d815659adf1bdb54aec8567029b9a5085ebc4', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '18ea6bda2feee47abf0823c9aa4fbd5dc9fb939e', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b819bae649e239fd6b03a050dbf3de52f675eabe', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef1e1d9438e1e08ea1d17bf789d61dee970891b3', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b8d64fc0c72e534dc3b0b769552352a5017014fc', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f0de6576c856fb43cb185c07a13cb69b1cfa6c7', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f86efc4a7ec8d26a3bb7b053864bfb7aaaf6622', 'committer_username': 'drammock', 'committer_name': 'Daniel McCloy', 'committer_email': None, 'commit_date': datetime.datetime(2012, 6, 2, 19, 15, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd2fb8b440681368086968a652aae288dbf8f6154', 'committer_username': 'drammock', 'committer_name': 'Daniel McCloy', 'committer_email': None, 'commit_date': datetime.datetime(2012, 6, 2, 19, 15, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b6af3e8c13514a1106a890d05a70c759cb6f75e', 'committer_username': 'drammock', 'committer_name': 'Daniel McCloy', 'committer_email': None, 'commit_date': datetime.datetime(2012, 6, 2, 19, 15, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '54b64527a0bdf012fca43a37de9e5fddedd02f38', 'committer_username': 'drammock', 'committer_name': 'Daniel McCloy', 'committer_email': None, 'commit_date': datetime.datetime(2012, 6, 2, 19, 15, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc325e9fd03cd9ec5b63732a056ad5c168f3c23a', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '620f2e76b41a08562543febb40e27decb14bb9fc', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4edb8c9d208f29136de9c205cde537e93cf5bd63', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'abb50d39bcaf797917fdbc56b3afe5af1fe76315', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fafcc944b3ab945e3be4f0793bccce8c7d435283', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4eabc402ae9db8db35d62cbb79e28ef36b120639', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f4f212974e49e8e8933fa341088722af5c00175d', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '597a426081ac816569c54e798f8ba905be565993', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}]",Martin G. Schulz,46245704,dev@mgschulz.de,User,,35,,45,26
717360619,[ENH]: New pyqtgraph-backend for 2D-Data-Browser,"# About this PR
This PR adds the new pyqtgraph-backend I developed during 2021's Google Summe of Code.
It covers basic functionality and is further developed in [mne-tools/mne-qt-browser](https://github.com/mne-tools/mne-qt-browser).
This PR is WIP and remaining ToDo's as well as ideas for improvements and new features can be submitted as issues in `mne-tools/mne-qt-browser`.
I would be glad about feedback for the new backend. I provided example code for testing below.


## Example code
```python
import mne
import os
import numpy as np

from mne.viz import use_browser_backend

# Load Raw
sample_data_folder = mne.datasets.sample.data_path()
raw_file = os.path.join(sample_data_folder, 'MEG', 'sample',
                        'sample_audvis_raw.fif')
raw = mne.io.read_raw(raw_file)

# Load Events
events_path = os.path.join(sample_data_folder, 'MEG', 'sample',
                           'sample_audvis_raw-eve.fif')
events = mne.read_events(events_path)

# Add test-annotations
onsets = np.arange(2, 8, 2) + raw.first_time
durations = np.repeat(1, len(onsets))
descriptions = ['Test1', 'Test2', 'Test3']
for onset, duration, description in zip(onsets, durations, descriptions):
    raw.annotations.append(onset, duration, description)

with use_browser_backend('pyqtgraph'):
    raw.plot(events=events, block=True)
```

## Benchmark pyqtgraph-specific parameters
If you would like to compare performance of pyqtgraph-specific parameters (use of OpenGL, antialiasing, downsampling), you can fork my [gsoc2021-repository](https://github.com/marsipu/gsoc2021) and run `python -m prototypes` from the main directory.

## Showcase
https://user-images.githubusercontent.com/46245704/136716490-19768b32-e5e3-4da1-b811-9bab8b0ef589.mp4",True,9687,https://api.github.com/repos/mne-tools/mne-python/pulls/9687,https://github.com/mne-tools/mne-python/pull/9687,closed,876,532,25,138,111,60,0,0,[],2021-08-22 19:19:41+00:00,2021-11-03 03:27:15+00:00,6250054.0,"72 days, 8:07:34","[{'comment_id': 695054037, 'comment_body': '```suggestion\r\n                                      use_opengl=False,\r\n```', 'comment_created': datetime.datetime(2021, 8, 24, 17, 23, 27, tzinfo=datetime.timezone.utc), 'commenter': 'marsipu', 'type': 'User'}, {'comment_id': 698778026, 'comment_body': 'pytestqt is not just for testing? as done here it must be installed for everyone.', 'comment_created': datetime.datetime(2021, 8, 30, 20, 16, 9, tzinfo=datetime.timezone.utc), 'commenter': 'agramfort', 'type': 'User'}, {'comment_id': 698778380, 'comment_body': 'you need to update import order from more standard to local imports.', 'comment_created': datetime.datetime(2021, 8, 30, 20, 16, 44, tzinfo=datetime.timezone.utc), 'commenter': 'agramfort', 'type': 'User'}, {'comment_id': 699872070, 'comment_body': 'Oh right. But it is only used for testing. I will create a dummy to make it an optional dependency we could then put inside `requirements_testing.txt`', 'comment_created': datetime.datetime(2021, 9, 1, 6, 11, 50, tzinfo=datetime.timezone.utc), 'commenter': 'marsipu', 'type': 'User'}, {'comment_id': 700950868, 'comment_body': '```suggestion\r\n        repo_link = ""https://github.com/mne-tools/mne-qt-browser/zipball/main""\r\n```', 'comment_created': datetime.datetime(2021, 9, 2, 10, 21, 17, tzinfo=datetime.timezone.utc), 'commenter': 'agramfort', 'type': 'User'}, {'comment_id': 724463957, 'comment_body': '???', 'comment_created': datetime.datetime(2021, 10, 7, 19, 17, 25, tzinfo=datetime.timezone.utc), 'commenter': 'agramfort', 'type': 'User'}, {'comment_id': 724464570, 'comment_body': ""do we really need to expose this one? can't we have a good default or change it in the GUI? I would first try with a default"", 'comment_created': datetime.datetime(2021, 10, 7, 19, 18, 24, tzinfo=datetime.timezone.utc), 'commenter': 'agramfort', 'type': 'User'}, {'comment_id': 724465046, 'comment_body': 'can you clarify the usecase for this?', 'comment_created': datetime.datetime(2021, 10, 7, 19, 19, 10, tzinfo=datetime.timezone.utc), 'commenter': 'agramfort', 'type': 'User'}, {'comment_id': 724465219, 'comment_body': 'cleanup', 'comment_created': datetime.datetime(2021, 10, 7, 19, 19, 27, tzinfo=datetime.timezone.utc), 'commenter': 'agramfort', 'type': 'User'}, {'comment_id': 724468839, 'comment_body': 'why removing all these browse_backend._close_all() ?', 'comment_created': datetime.datetime(2021, 10, 7, 19, 25, 9, tzinfo=datetime.timezone.utc), 'commenter': 'agramfort', 'type': 'User'}, {'comment_id': 724469318, 'comment_body': 'why this new public function?', 'comment_created': datetime.datetime(2021, 10, 7, 19, 25, 56, tzinfo=datetime.timezone.utc), 'commenter': 'agramfort', 'type': 'User'}, {'comment_id': 725705907, 'comment_body': ""You're right. I think 100 steps for the view is a sufficient default for every usecase."", 'comment_created': datetime.datetime(2021, 10, 10, 22, 8, 31, tzinfo=datetime.timezone.utc), 'commenter': 'marsipu', 'type': 'User'}, {'comment_id': 725706951, 'comment_body': 'We thought that could be useful to identify artefacts. WDYT?', 'comment_created': datetime.datetime(2021, 10, 10, 22, 16, 10, tzinfo=datetime.timezone.utc), 'commenter': 'marsipu', 'type': 'User'}, {'comment_id': 725708211, 'comment_body': 'Because there is now a call of `_close_all()` inside the `browse_backend`-fixture after yield. This should be executed when the test finished, right?', 'comment_created': datetime.datetime(2021, 10, 10, 22, 26, 50, tzinfo=datetime.timezone.utc), 'commenter': 'marsipu', 'type': 'User'}, {'comment_id': 725708885, 'comment_body': 'Right, this function should not be public', 'comment_created': datetime.datetime(2021, 10, 10, 22, 31, 33, tzinfo=datetime.timezone.utc), 'commenter': 'marsipu', 'type': 'User'}, {'comment_id': 730254660, 'comment_body': ""can we avoid adding so many new public parameters? I would expect raw.plot() to work optimally out of the box.\r\n\r\ncan you activate opengl if available automatically?\r\ncan you activate antialiasing if available automatically?\r\n\r\nregarding preloading I would say it's your responsibility to do\r\n\r\nraw.load_data()\r\n\r\nif you want.\r\n\r\nregarding downsampling the matplotlib backend already does something why not doing the same approach\r\nand not add any new public parameter?\r\n\r\nWhat you're doing @marsipu is fantastic for the project but from a user standpoint the simpler it remains the better.\r\n\r\nRemember most users don't read the doc and the less they need to the happier they are ;)"", 'comment_created': datetime.datetime(2021, 10, 16, 12, 6, 32, tzinfo=datetime.timezone.utc), 'commenter': 'agramfort', 'type': 'User'}, {'comment_id': 730258857, 'comment_body': ""@agramfort I had the same feeling as you last week regarding preloading, but after hearing what @marsipu is doing I think the magic is worth the convenience and speed boost to the user. You can also see @marsipu 's response that convinced me here\r\n\r\nhttps://github.com/mne-tools/mne-python/pull/9687#issuecomment-940843862\r\n\r\nWe can also hash it out / I can fill you in with a quick chat at some point\r\n"", 'comment_created': datetime.datetime(2021, 10, 16, 12, 44, 30, tzinfo=datetime.timezone.utc), 'commenter': 'larsoner', 'type': 'User'}, {'comment_id': 730447023, 'comment_body': ""> It is optional, you can set preload=False to disable it completely. Maybe that wasn't clear from the documentation, I will improve that. The current default is 'auto' which estimates the size of the preloaded data and compares it to the remaining RAM-space left and only preloads if there is enough space.\r\n\r\nOK sounds good. I like this strategy of automatic optimal behavior. Assuming estimating the remaining RAM available on the system is robust across systems.\r\n\r\nthx @marsipu and sorry for the slow reaction time."", 'comment_created': datetime.datetime(2021, 10, 17, 17, 10, 47, tzinfo=datetime.timezone.utc), 'commenter': 'agramfort', 'type': 'User'}, {'comment_id': 730452793, 'comment_body': '@agramfort Thank you for the feedback.\r\nI understand that having less parameters to worry about facilitates using the `Raw.plot()`-API. I could put parameters as downsampling and antialiasing in a small settings-dialog inside the browser after my next exams to get them out of the way.\r\nRegarding `preload` I could maybe rename that parameter to something like `precompute` (since it does not only preload, but also does some of the processing steps for visualization in advance) to avoid confusion with `Raw.load_data()`?\r\nRegarding the automatic behaviour I am glad you like it, maybe I should add a test for this RAM-checking.', 'comment_created': datetime.datetime(2021, 10, 17, 17, 56, 27, tzinfo=datetime.timezone.utc), 'commenter': 'marsipu', 'type': 'User'}, {'comment_id': 730452937, 'comment_body': ""+1 on `precompute`, I think it's both more accurate and clearer it's meant to do something different from `preload`"", 'comment_created': datetime.datetime(2021, 10, 17, 17, 57, 44, tzinfo=datetime.timezone.utc), 'commenter': 'larsoner', 'type': 'User'}, {'comment_id': 734948849, 'comment_body': ""I'll do it :+1:"", 'comment_created': datetime.datetime(2021, 10, 23, 9, 34, 28, tzinfo=datetime.timezone.utc), 'commenter': 'marsipu', 'type': 'User'}, {'comment_id': 735107343, 'comment_body': ""wasn't antialiasing introduced some time now to the signal plotters?  Maybe it was removed subsequently or the PR did not get merged... In general I think antialiasing exposes a tradeoff parameter that is useful to be able to control without the need to look for the respective option in the GUI (also the option is less discoverable if it is only in the GUI). I didn't test thoroughly how much slower is the pyqtgraph plotter with antialiasing turned on - @marsipu did you compare that?"", 'comment_created': datetime.datetime(2021, 10, 24, 11, 53, 33, tzinfo=datetime.timezone.utc), 'commenter': 'mmagnuski', 'type': 'User'}, {'comment_id': 736006653, 'comment_body': ""@mmagnusk\r\n![cmp_antialiasing](https://user-images.githubusercontent.com/46245704/138776111-395f968c-305e-42c9-a794-10458ed9e421.png)\r\n(blue=no antialiasing, orange=antialiasing)\r\nThere seems to be no difference for antialiasing (maybe there are a few more little fps-drops with antialiasing, but I couldn't consistently reproduce them).\r\n\r\nBTW this plot comes from a benchmark-utility whose code is stored in my [gsoc2021-project](https://github.com/marsipu/gsoc2021)."", 'comment_created': datetime.datetime(2021, 10, 25, 22, 18, 34, tzinfo=datetime.timezone.utc), 'commenter': 'marsipu', 'type': 'User'}, {'comment_id': 736049826, 'comment_body': 'I just discovered that activated OpenGl is now for some reason even slower on my laptop than wihout OpenGL.\r\nMaybe we leave this parameter in too, because it may seem device-dependent if it accelerates the visualization.\r\n\r\n**Could you use the new test I wrote (see below in the PR) to see what difference OpenGL makes on your devices?**', 'comment_created': datetime.datetime(2021, 10, 26, 0, 6, 52, tzinfo=datetime.timezone.utc), 'commenter': 'marsipu', 'type': 'User'}, {'comment_id': 736287954, 'comment_body': 'do we really expect users to change the default? why would they do this? Personally I perfer to expose as little as possible in the public API and then add stuff when someone asks for it.', 'comment_created': datetime.datetime(2021, 10, 26, 8, 34, 8, tzinfo=datetime.timezone.utc), 'commenter': 'agramfort', 'type': 'User'}, {'comment_id': 736295452, 'comment_body': ""@marsipu Sure, I'll take a look. Great to hear that antialiasing does not decrease performance consistently!"", 'comment_created': datetime.datetime(2021, 10, 26, 8, 42, 44, tzinfo=datetime.timezone.utc), 'commenter': 'mmagnuski', 'type': 'User'}, {'comment_id': 736669273, 'comment_body': ""I would expect someone to want to turn on anitaliasing - but unless it is on by default and as @marsipu shows it does not change FPS performance significantly, so the default could be `True`. But I wouldn't expose `downsampling_method`."", 'comment_created': datetime.datetime(2021, 10, 26, 15, 30, 34, tzinfo=datetime.timezone.utc), 'commenter': 'mmagnuski', 'type': 'User'}, {'comment_id': 739061006, 'comment_body': 'In theory it should decrease performance, this depends probably on the device and the amount of shown data.\r\nI made `antialiasing` the keyboard-shortcut `L` now to be easily toggled on the fly.', 'comment_created': datetime.datetime(2021, 10, 29, 9, 1, 43, tzinfo=datetime.timezone.utc), 'commenter': 'marsipu', 'type': 'User'}, {'comment_id': 739428375, 'comment_body': 'Can we get rid of this? It seems like debugging / benchmarking script stuff more than what should live in our code permanently', 'comment_created': datetime.datetime(2021, 10, 29, 17, 47, 42, tzinfo=datetime.timezone.utc), 'commenter': 'larsoner', 'type': 'User'}, {'comment_id': 739840350, 'comment_body': 'Sure, i put it into mne_qt_browser', 'comment_created': datetime.datetime(2021, 10, 31, 15, 40, 25, tzinfo=datetime.timezone.utc), 'commenter': 'marsipu', 'type': 'User'}, {'comment_id': 739869445, 'comment_body': ""@larsoner This automatic installation of mne-qt-browser won't be necessary anymore when it is put into `requirements.txt`, right?"", 'comment_created': datetime.datetime(2021, 10, 31, 20, 2, 34, tzinfo=datetime.timezone.utc), 'commenter': 'marsipu', 'type': 'User'}, {'comment_id': 740012518, 'comment_body': ""we need to discuss how to proceed here.\r\n\r\nmne_qt_browser depends on mne and should take care of its release cycle and testing.\r\n\r\nto me it's like mne-connectivity. We don't install or test mne-connectivity within mne-python repo.\r\n\r\nanyway these lines of automatic install is really not recommended. Please remove them as otherwise we cannot merge and we would like to release in the coming days. This PR is to me the last big thing before we release.\r\n\r\nthx @marsipu !"", 'comment_created': datetime.datetime(2021, 11, 1, 7, 46, 7, tzinfo=datetime.timezone.utc), 'commenter': 'agramfort', 'type': 'User'}, {'comment_id': 740196644, 'comment_body': ""Agreed no `pip install` should be done automatically\r\n\r\nI think I agree with @agramfort that testing should be moved to the `mne-qt-browser` repo. @marsipu you can add a scheduled Azure run like we did for mne-kit-gui like [this](https://github.com/mne-tools/mne-kit-gui/blob/81fa55b64735ad0c6f35f9e4f4bfa5f78cf22589/azure-pipelines.yml#L13-L20) that runs every night, so you'll see quickly if things fail. I can also add an email notification via the Azure interface for you for the scheduled run -- I just did it for mne-kit-gui and it already pinged me over the weekend (somehow we managed to break things quickly!)."", 'comment_created': datetime.datetime(2021, 11, 1, 13, 7, 40, tzinfo=datetime.timezone.utc), 'commenter': 'larsoner', 'type': 'User'}, {'comment_id': 740219281, 'comment_body': '@agramfort @larsoner Do you mean with moving testing to the `mne-qt-browser`-repo, that the changes from this PR in `test_raw.py` should be reverted and all the adapted tests should be copied to the `mne-qt-browser`?', 'comment_created': datetime.datetime(2021, 11, 1, 13, 42, 2, tzinfo=datetime.timezone.utc), 'commenter': 'marsipu', 'type': 'User'}, {'comment_id': 740236138, 'comment_body': ""> Do you mean with moving testing to the mne-qt-browser-repo, that the changes from this PR in test_raw.py should be reverted and all the adapted tests should be copied to the mne-qt-browser?\r\n\r\nHmm, that does seem a bit tough. I guess for maintenance purposes, if we change something about how a MNEFigure class works for example, or if we want to test some new interaction mode, we would want to change mne-qt-browser at the same time. Not sure the best path here.\r\n\r\nThinking about it more I think I'm okay with merging this with the testing infrastructure as is. We can always split it off later / during the 1.0 cycle if we think of a better solution.\r\n\r\nThoughts @drammock @agramfort ?"", 'comment_created': datetime.datetime(2021, 11, 1, 14, 4, 24, tzinfo=datetime.timezone.utc), 'commenter': 'larsoner', 'type': 'User'}, {'comment_id': 740242182, 'comment_body': ""> Hmm, that does seem a bit tough. I guess for maintenance purposes, if we change something about how a MNEFigure class works for example, or if we want to test some new interaction mode, we would want to change mne-qt-browser at the same time.\r\n\r\nI am glad, that's what I am thinking too, at least for the moment.\r\n\r\n> you can add a scheduled Azure run like we did for mne-kit-gui like this that runs every night, so you'll see quickly if things fail\r\n\r\nIs this setting up an Azure-pipeline something which has to be done before the release?"", 'comment_created': datetime.datetime(2021, 11, 1, 14, 12, 13, tzinfo=datetime.timezone.utc), 'commenter': 'marsipu', 'type': 'User'}, {'comment_id': 740265328, 'comment_body': '> Is this setting up an Azure-pipeline something which has to be done before the release?\r\n\r\nNo, you can set it up on the `mne-qt-browser` repo anytime. I just created one for `mne-kit-gui` that was pretty simple and runs for all OSes, you might want to base things off of that if you want to take a stab at it.', 'comment_created': datetime.datetime(2021, 11, 1, 14, 41, 32, tzinfo=datetime.timezone.utc), 'commenter': 'larsoner', 'type': 'User'}, {'comment_id': 740309206, 'comment_body': ""I thought that having this in a separate repo was temporary until all the kinks are worked out; if that's the case then we'll need the tests here eventually anyway.  Either way I am OK leaving the tests where they are for now and merging, but let's discuss at next dev meeting the best way to handle testing here."", 'comment_created': datetime.datetime(2021, 11, 1, 15, 36, 20, tzinfo=datetime.timezone.utc), 'commenter': 'drammock', 'type': 'User'}, {'comment_id': 740375395, 'comment_body': 'yes keep the ""common test"" in mne-python and make the mne-qt-browser CI run the test functions in mne-python. I am thinking something like what we use to test a new Raw object. We have a function and if this function passes for a backend then we are good.\r\n\r\nmakes sense?', 'comment_created': datetime.datetime(2021, 11, 1, 17, 0, 47, tzinfo=datetime.timezone.utc), 'commenter': 'agramfort', 'type': 'User'}, {'comment_id': 741041471, 'comment_body': ""Let's revert these. You can make your code understand these by making use of \r\n```\r\nmne/utils/check.py:def _to_rgb(*args, name='color', alpha=False):\r\n```\r\nwhich wraps matplotlib's color-name-to-rgb(a) functionality"", 'comment_created': datetime.datetime(2021, 11, 2, 13, 13, 6, tzinfo=datetime.timezone.utc), 'commenter': 'larsoner', 'type': 'User'}, {'comment_id': 741041598, 'comment_body': 'same', 'comment_created': datetime.datetime(2021, 11, 2, 13, 13, 14, tzinfo=datetime.timezone.utc), 'commenter': 'larsoner', 'type': 'User'}, {'comment_id': 741042028, 'comment_body': '0.24', 'comment_created': datetime.datetime(2021, 11, 2, 13, 13, 44, tzinfo=datetime.timezone.utc), 'commenter': 'larsoner', 'type': 'User'}, {'comment_id': 741042118, 'comment_body': '0.24', 'comment_created': datetime.datetime(2021, 11, 2, 13, 13, 49, tzinfo=datetime.timezone.utc), 'commenter': 'larsoner', 'type': 'User'}, {'comment_id': 741042618, 'comment_body': '```suggestion\r\n       +--------------------------------------+------------+-----------+\r\n\r\n       .. versionadded:: 0.24\r\n```', 'comment_created': datetime.datetime(2021, 11, 2, 13, 14, 25, tzinfo=datetime.timezone.utc), 'commenter': 'larsoner', 'type': 'User'}, {'comment_id': 741043119, 'comment_body': 'same', 'comment_created': datetime.datetime(2021, 11, 2, 13, 14, 58, tzinfo=datetime.timezone.utc), 'commenter': 'larsoner', 'type': 'User'}, {'comment_id': 741043378, 'comment_body': 'same', 'comment_created': datetime.datetime(2021, 11, 2, 13, 15, 16, tzinfo=datetime.timezone.utc), 'commenter': 'larsoner', 'type': 'User'}, {'comment_id': 741043488, 'comment_body': 'same', 'comment_created': datetime.datetime(2021, 11, 2, 13, 15, 24, tzinfo=datetime.timezone.utc), 'commenter': 'larsoner', 'type': 'User'}, {'comment_id': 741048079, 'comment_body': ""We don't need this for CircleCI. Eventually we should add it but let's do it later: #9942 "", 'comment_created': datetime.datetime(2021, 11, 2, 13, 20, 51, tzinfo=datetime.timezone.utc), 'commenter': 'larsoner', 'type': 'User'}, {'comment_id': 741058446, 'comment_body': ""... we can add a `output='float' | 'hex'` to `_to_rgba` if that would help. I can push but it should be pretty simple like:\r\n```\r\ntry:\r\n    out = func(*args)\r\nexcept ...:\r\n    ...\r\nif output == 'hex':\r\n    out = np.clip([255 * o for o in out], 0, 255).round().astype(int)\r\n    out = '#' + ''.join(f'{o:02X}' for o in out)\r\nreturn out\r\n```"", 'comment_created': datetime.datetime(2021, 11, 2, 13, 32, 22, tzinfo=datetime.timezone.utc), 'commenter': 'larsoner', 'type': 'User'}, {'comment_id': 741076127, 'comment_body': 'Hm, pyqtgraph seems to accept the matplotlib-color-names out of the box in the newest release. Only `(0.8, 0.8, 0.8)` is a problem because it expects RGB-values as integers from 0-255 and not float from 0-1.\r\n\r\n_to_rgb would have to be added in +40 places in `mne-qt-browser`. Do you think that might justify changing `(0.8, 0.8, 0.8)` to `(204, 204, 204)` to avoid making all these verbose additions to `mne-qt-browser`?\r\n\r\nEDIT: I see, for matplotlib only the floats from 0-1 are accepted. What about changing to `lightgray` @larsoner?\r\n(since setting the color with a RGB-tuple seems to be unique in the context of `Raw.plot()` anyway)', 'comment_created': datetime.datetime(2021, 11, 2, 13, 51, 33, tzinfo=datetime.timezone.utc), 'commenter': 'marsipu', 'type': 'User'}, {'comment_id': 741089153, 'comment_body': ""> EDIT: I see, for matplotlib only the floats from 0-1 are accepted. What about changing to lightgray?\r\n\r\nI think in MNE we should not have to change how we deal with / think about colors -- `matplotlib color` mindset has been around for a long time and is in a lot of our code / docstrings etc.\r\n\r\n> _to_rgb would have to be added in +40 places in mne-qt-browser\r\n\r\nYou've only changed 5-10 (?) instances here, so I think you only really need to convert the problematic ones that come from MNE."", 'comment_created': datetime.datetime(2021, 11, 2, 14, 4, 56, tzinfo=datetime.timezone.utc), 'commenter': 'larsoner', 'type': 'User'}, {'comment_id': 741098216, 'comment_body': ""> I think in MNE we should not have to change how we deal with / think about colors\r\n\r\nI understand that. But since pyqtgraph seems to support matplotlib color-names in general, the only change now in MNE-Python would have to be changing the default bad-color from (0.8, 0.8, 0.8) to `lightgray`. Or is there a reason why the default-bad-color has to be a RGB-tuple?\r\n_(we could of course just change the handling of the bad-color in mne-qt-browser to convert the float-RGB to int-RGB, but that seems a bit inconsistent to me, WDYT?)_\r\n\r\n>You've only changed 5-10 (?) instances here, so I think you only really need to convert the problematic ones that come from MNE.\r\n\r\nThe colors from MNE go directly into methods to create the traces, ch-axis-names, overview-bar-representation, annotation-colors. Thats where all the changes would come from in `mne-qt-browser`."", 'comment_created': datetime.datetime(2021, 11, 2, 14, 14, 29, tzinfo=datetime.timezone.utc), 'commenter': 'marsipu', 'type': 'User'}, {'comment_id': 741100988, 'comment_body': ""> (we could of course just change the handling of the bad-color in mne-qt-browser to convert the float-RGB to int-RGB, but that seems a bit inconsistent to me, WDYT?)\r\n\r\nTo me the inconsistency comes from pyqtgraph not handling tuple-of-float automatically, as this is an accepted matpltolib color. So they support some matplotlib color types but not all.\r\n\r\nDoes `'0.8'` work? It should since it's an understood matplotlib color. If so let's just go with that. If it doesn't, I can live with the `'lightgray'` change"", 'comment_created': datetime.datetime(2021, 11, 2, 14, 17, 18, tzinfo=datetime.timezone.utc), 'commenter': 'larsoner', 'type': 'User'}, {'comment_id': 741105178, 'comment_body': ""Unfortunately, while `'0.8'` only works for matplotlib, pyqtgraph only works with `0.8`. Then 'lightgray' for this release?\r\nI see, that is indeed inconsistent then from pyqtgraph if you expect it to handle all matplotlib-colors.\r\nMaybe I should see if there are already issues about this at pyqtgraph's?"", 'comment_created': datetime.datetime(2021, 11, 2, 14, 21, 26, tzinfo=datetime.timezone.utc), 'commenter': 'marsipu', 'type': 'User'}, {'comment_id': 741197257, 'comment_body': ""```suggestion\r\n    Whether to load all data (not just the visible portion) into RAM and \r\n    apply preprocessing (e.g., projectors) to the full data array in a separate\r\n    processor thread, instead of window-by-window during scrolling. The default \r\n    ``'auto'`` compares available RAM space to the expected size of the\r\n    precomputed data, and precomputes only if enough RAM is available. ``True``\r\n    and ``'auto'`` only work if using the pyQtGraph backend.\r\n```"", 'comment_created': datetime.datetime(2021, 11, 2, 15, 27, 45, tzinfo=datetime.timezone.utc), 'commenter': 'drammock', 'type': 'User'}, {'comment_id': 741204201, 'comment_body': '```suggestion\r\n    Whether to use OpenGL when rendering the plot (requires ``pyopengl``).\r\n    May increase performance, but effect is dependent on system CPU and\r\n    graphics hardware. Only works if using the pyQtGraph backend. Default is\r\n    ``True``.\r\n```', 'comment_created': datetime.datetime(2021, 11, 2, 15, 33, 1, tzinfo=datetime.timezone.utc), 'commenter': 'drammock', 'type': 'User'}, {'comment_id': 741210837, 'comment_body': '```suggestion\r\n        Must be ``True`` if using the pyQtGraph backend, unless you have\r\n        started a Qt-eventloop somewhere else in your script (e.g. if embedding\r\n        the data browser inside another Qt application).\r\n```', 'comment_created': datetime.datetime(2021, 11, 2, 15, 39, 38, tzinfo=datetime.timezone.utc), 'commenter': 'drammock', 'type': 'User'}, {'comment_id': 741217964, 'comment_body': 'I snuck this in because we need it for release anyway', 'comment_created': datetime.datetime(2021, 11, 2, 15, 44, 51, tzinfo=datetime.timezone.utc), 'commenter': 'larsoner', 'type': 'User'}, {'comment_id': 741220154, 'comment_body': '```suggestion\r\n    .. note:: For the pyqtgraph backend to run in IPython with ``block=False``\r\n              you must run the magic command ``%%gui qt5`` first.\r\n```', 'comment_created': datetime.datetime(2021, 11, 2, 15, 46, 35, tzinfo=datetime.timezone.utc), 'commenter': 'drammock', 'type': 'User'}, {'comment_id': 741249242, 'comment_body': 'I would emphasize, that this applies only for the ""running from script""-case, since python-terminal and IPython (with `%gui qt5`) also work with `block=False`.\r\n```suggestion\r\n        Must be ``True`` if using the pyQtGraph backend and running from a script, \r\n        unless you have started a Qt-eventloop somewhere else in your script\r\n        (e.g. if embedding the data browser inside another Qt application).\r\n```', 'comment_created': datetime.datetime(2021, 11, 2, 16, 8, 44, tzinfo=datetime.timezone.utc), 'commenter': 'marsipu', 'type': 'User'}]","[{'commit_sha': '950d537b712930ef26036924148b1e9666bd6066', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd565f815e6c7243cb8fbbff64b617a127245bac3', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ecd42f9d2e98e99136d560cdaa1d9261348bada', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b56a3ef9a4e2095e614735ad405023515d0a936b', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3831cca4b8d37bdfbb2e1b31bc9bd0f21bbcda4', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3e329a2676d3f6a331536225c288d42b0073c1b', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e0bcdedd28d0cc3b77e524b96ba141cefe4afdcc', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '897c611e37783342d903e27faf0f46df8dd6782e', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc28595fb8b2a3aeefb7501a78239be3010793f1', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a9a3222642c3eed246dd05baab53cc9077725c4', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3fb49f9406e4ba8cf3b6a600763632292b53bb3', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9dad1498445c1399aac2d1a3b930ea1a77a4e823', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bbd3308a73fe4d60ed42e9e1df9fc91c132f927d', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8ab47d3be2b80b048c45dcb4a5ee23eec760925', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b290dc3f1b1eee2cb6c6105949c7fe97980ccc0', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d3de576b36feb26ca27bae1c46277f240800951', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f24ec887c0092c7f7df572361d466c16c3ddd2a7', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b35f340a5008123f4096ff90c198e8809915ae4', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '26e30f7b6c372be680d8868175834ef02aa864a5', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e2e5d1bf7a12749bad3ccf39c24e313e9c242f62', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '546e53b6106957ecfcd6b7b6aaf752444cf68378', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de81d4913e5101aacc79df4cff7b011b57440f5f', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd18f6fd386e349966200422e1a6096752993413d', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fcbea056bc7f9f6be0fe5c837942dc10da905f6f', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '390428c6581ebc944a5a8be123c728b8a45eef27', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '909ea9a35428274f3077a559fe518ffacf70486a', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd6e5682a3c29eb9cad213d0552175a603ad69d4', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f81ab6ebfc5390c113f82ba3f9bdbd31b3771b0a', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f1c8038047010d8bfc23aab1dbf246d4cdfb4b73', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce0187a20eef3c42497a7f455f6847074a8043c2', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60546cbe9bacafa4f7a1ba13ecb0cdb7f1df62a0', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae1a4ab3d7b83a83c4173c5ee621487adda9a411', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd34deb2cb7119ebdef3a3307e30c39caa729177b', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c02ee8f27aa00736422417ebf822b4a584b8dd2a', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '725608309b3fa655c8b67ecfa8a7c2cb7aa7c558', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d1f8de5be617f1fe808450679d7a48a09944e4a', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd64325e8ed89b93f11317c90d7cbbad8ad5170c', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '52bf175828aa0dcda0b9e72bcf3c833a7f89d6c4', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '18c07322569bbdf44227d5e6b2c9a8149914f578', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0513d7c3ff3423c1a8c69e40b7a95bae3f299ee3', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7177540c3f2af325a2afb1bfe7dfd06b0af89b1f', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd055db865943f9b44c112473cc058aeff188f1a', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5086875ea1557738f76ec923d2a579ff653b8ed', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b1f0346191a26da6c07c16a07c3b315d88919d65', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd334ff208bfc615b7217cc5212dac63c9e29b90b', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ffe7797d8910a51e994bad6e5990cb67435543c', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b9a73284b395e5c69cf5fcd58b0812096166483', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ba6214fe4c24dfd2f534e41add2a2befe1e5e4c', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f51e0f008251cd283fd2fecf3abc45e1f7c1d9e6', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab7917f81529260a6ebb201a975be686cf7808dc', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb3af055334a1bdde26cf2131aea055ec73ace21', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45a3ae742b74da724bec0656b2eaaf90a32d9773', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ead3f25dad5a3be1d658999bcfefe0f2ae3e0461', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05f542b11d5f02d14aca9cb3105eae2697a98057', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd40c756617fbf512f2207f1c3ce954959dcff9fc', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '98577af09ab6ba0663a3044e9caf3b260ead007c', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d942cbdda15fdc16ebe2cd52bfcb0b0e59a7998', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe61cb99102c2ac97ca8e00a9bef24bd11358806', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d62f3301ee1eb249ad83dc774d2d48390f6079f', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c1f31b57b1e96ea22de4767cf5c12dcfd56b519', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '499337a4eca1329fcd89f2c2c31f10dd4d175195', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b27bb0f49e649dc9bc9bb1b9bf4b62aa7beffa6', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd01a65b7203b45dbd3fa14b84c610bc18f6c02e', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd3d11e24003c2344aed72e5e13358cc91d75b8d', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d7e0da7becf4a771114c416df9a8ea515569c23', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2552ed6daf697000972f2c547c3605fbbe78ff65', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e641baf3434604db7a3f50e04f51f49ae161a8fa', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb2eb99b1fb10002fd27fc1b6c9343379c1c8586', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'efb32199cd69ec2f98c2455cec8226d2b71d21f5', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd11db718cb2ea249485a26c0695189ad69fff744', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed0b8d5d5dcd0491fbcec83729dd48b4cff379e2', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '765006cc614f0b3da0246bc7617b71408fb82fbd', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3f8e57d2dfd817054936d9489bc125ea6a2e204', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9dc2b753b202771047c218ee03d64b98e78e3134', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6518633abb73075e11fcd3789550246bac3cb2d2', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd39fd79e208a85df2f11856568dfa54ad14cdfb', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1a7106169207eb7df0e0955e55f683951f51115', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b4fbf774bfe64b98c0101410b26fb01cbc036bc1', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c41976b11087f78c58bf86ac25fa05c9b9d3b9b', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f1abc675d7bbc9ac13367bc83d6f2190947f90d9', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '23b898b67022f6a8946c3f7a8c8c0ac90dc89422', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '585a006f8bf5f2778338a4525fb300cfb473e843', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72201d58f93d13f16a8d623816de659e6acdb050', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '135a4f11a642ff1da5b1a8a5378c08cca6bd2bdf', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '98b36bdc0ada784892d20ba4f5579fbfa60c6ec0', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '741e27d1d2db027315fae59091bc3457c364c2f7', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9c79f97ee9bf973fc9d1dda85624a51eac5c52e', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97a57d63ee71d4d37a984fcf0b3c520337f570b9', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a04c57ed77ad5ce2029e016844900eb333010c9', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9260a3f050555e1772666d835ed2d901f72e0865', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97c55d9b47ec861ceab2efbe50f8c634082f9201', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec14501ff1ef1e3ea124bb8a53d1e07c39591df9', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be7747c4169f571bc50b90f5292e80011eb77b12', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2697f80a9700fc1888755c165d1f63fc755089ac', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2743c419f758956ecc6bdbbb391078d24d832b77', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '169c0863f4f23a8fa30fc197ff54d15744d57411', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '850459ab9b9b14ff83aaf78919f06b49c765e919', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de5d372d270f0cf61bcf02c72b68502aa7714150', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0550d39c089b7770589eae17431cfbd9dd66aaa8', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70e3882144c39901847f0954b25db73be83131c5', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62ba9c1d8e1c03dd3470681678f31e301e93f3a1', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7347077950bc7a5bd7e144cc079a7c3e3e9fcc4f', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d911d7959ebff1ff586fceac06a2e751b20fecf', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '92fccdc9f79f5e55004e7cc80c443a7160180340', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a2d4b6f0b4524b9ec52403c4a3d6157f6929516', 'committer_username': 'larsoner', 'committer_name': 'Eric Larson', 'committer_email': 'larson.eric.d@gmail.com', 'commit_date': datetime.datetime(2012, 9, 17, 22, 6, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0654593d716dd22d05156546996410cd0373d363', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f8eee148d63ab6becedf0d0e42f8793a478ce3f3', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45a39fea7c8be5aa01f858b7b35f001f9babcef9', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd84807bfff6eab0d4229f41c03769a2abc5dba7e', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b4f71a01f67e8b94c32d17d126735b8957a14364', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f411eb5bebced0db53f71b69111a5f37295063d', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f97a3cee8f79a2dce5ef16c4210a975dc9ad331b', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b5f59945015f34e26a84f53eb2ae9eb43b918bf', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b513d46495bafdf84d2e589bf77381b73926faa', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f7c4f1f764f401aec8f44a447a78d8b5cddc3e17', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9337e185cb5795f706474782ee9a348d997d6374', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c80e6a526dc865f221e5edcf8e6a27f5ca1d6d8', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f7360d7918eff65b72512161008aec6ca1922a53', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd32005994340919d07a46cfbcdaed1b32bca005e', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b4da67f63ff1d4d6fe9a2bcd42b9da53b298594', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd6a3dd21d054e1f88fcbedc02434a984834ff23b', 'committer_username': 'larsoner', 'committer_name': 'Eric Larson', 'committer_email': 'larson.eric.d@gmail.com', 'commit_date': datetime.datetime(2012, 9, 17, 22, 6, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50fba5252ab8756c45013e26c94e31d02aad9174', 'committer_username': 'larsoner', 'committer_name': 'Eric Larson', 'committer_email': 'larson.eric.d@gmail.com', 'commit_date': datetime.datetime(2012, 9, 17, 22, 6, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dbc16350674888520692d061fde0d135a30268b8', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b70459519b66205638eab9b8965a32f2e723572', 'committer_username': 'larsoner', 'committer_name': 'Eric Larson', 'committer_email': 'larson.eric.d@gmail.com', 'commit_date': datetime.datetime(2012, 9, 17, 22, 6, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c9a86e93f91a0d67af094e49103929f6898f7ecd', 'committer_username': 'larsoner', 'committer_name': 'Eric Larson', 'committer_email': 'larson.eric.d@gmail.com', 'commit_date': datetime.datetime(2012, 9, 17, 22, 6, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd51583af56076a85e164655c1745ab78e0bfeab3', 'committer_username': 'larsoner', 'committer_name': 'Eric Larson', 'committer_email': 'larson.eric.d@gmail.com', 'commit_date': datetime.datetime(2012, 9, 17, 22, 6, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64fd228281c77e524607a6a068f35b3735ac4ac0', 'committer_username': 'larsoner', 'committer_name': 'Eric Larson', 'committer_email': 'larson.eric.d@gmail.com', 'commit_date': datetime.datetime(2012, 9, 17, 22, 6, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93fe191fd8c682353de719ed5d6617fb7551d458', 'committer_username': 'larsoner', 'committer_name': 'Eric Larson', 'committer_email': 'larson.eric.d@gmail.com', 'commit_date': datetime.datetime(2012, 9, 17, 22, 6, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6962002a00177faeac6debeb7d24ddc010e3bae4', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34a496682659ff9ed91f0d124ddff0071e1e77d8', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f350a7f50804c0a38c20050424bc4a771d0c0e23', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '368876d75980b03c045ee82902dce13640910da5', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e29bb08983c94ffa8fb8355f8c62cd18560c3374', 'committer_username': 'marsipu', 'committer_name': 'Martin G. Schulz', 'committer_email': 'dev@mgschulz.de', 'commit_date': datetime.datetime(2018, 12, 29, 15, 6, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74254a80bc9ee68f7b5900c6b1e2fa1673976240', 'committer_username': 'larsoner', 'committer_name': 'Eric Larson', 'committer_email': 'larson.eric.d@gmail.com', 'commit_date': datetime.datetime(2012, 9, 17, 22, 6, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '65e494fc38dc8a7c6b92111eeef75d0ffb9d2c1e', 'committer_username': 'larsoner', 'committer_name': 'Eric Larson', 'committer_email': 'larson.eric.d@gmail.com', 'commit_date': datetime.datetime(2012, 9, 17, 22, 6, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d8c8e33eb63984f31d4c44fb75ceeabca859514', 'committer_username': 'larsoner', 'committer_name': 'Eric Larson', 'committer_email': 'larson.eric.d@gmail.com', 'commit_date': datetime.datetime(2012, 9, 17, 22, 6, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '260800ad751c6f205b7f26a43102ec8a31fbd9a0', 'committer_username': 'larsoner', 'committer_name': 'Eric Larson', 'committer_email': 'larson.eric.d@gmail.com', 'commit_date': datetime.datetime(2012, 9, 17, 22, 6, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '004b085a026aa70ae7085f736491a908b9db43b4', 'committer_username': 'larsoner', 'committer_name': 'Eric Larson', 'committer_email': 'larson.eric.d@gmail.com', 'commit_date': datetime.datetime(2012, 9, 17, 22, 6, 38, tzinfo=datetime.timezone.utc)}]",Martin G. Schulz,46245704,dev@mgschulz.de,User,,35,,45,26

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
1301584,mne-python,mne-tools/mne-python,Python,1306,2655,81,378,18091,525,31,59,"[{'id': 1111844430, 'number': 11306, 'closed': datetime.datetime(2023, 8, 29, 22, 25, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 11, 6, 2, 20, 10, tzinfo=datetime.timezone.utc), 'time_taken': 25646727.0, 'time_delta': '296 days, 20:05:27', 'additions': 136, 'deletions': 28, 'state': 'closed'}, {'id': 937845055, 'number': 10637, 'closed': datetime.datetime(2022, 5, 17, 15, 48, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 16, 18, 33, 50, tzinfo=datetime.timezone.utc), 'time_taken': 76467.0, 'time_delta': '21:14:27', 'additions': 2, 'deletions': 0, 'state': 'closed'}, {'id': 859769082, 'number': 10371, 'closed': datetime.datetime(2022, 2, 21, 23, 45, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 2, 21, 19, 7, 29, tzinfo=datetime.timezone.utc), 'time_taken': 16702.0, 'time_delta': '4:38:22', 'additions': 27, 'deletions': 23, 'state': 'closed'}, {'id': 850785796, 'number': 10330, 'closed': datetime.datetime(2022, 2, 15, 19, 8, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 2, 13, 14, 22, 53, tzinfo=datetime.timezone.utc), 'time_taken': 189920.0, 'time_delta': '2 days, 4:45:20', 'additions': 77, 'deletions': 72, 'state': 'closed'}, {'id': 848127673, 'number': 10325, 'closed': datetime.datetime(2022, 2, 14, 2, 42, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 2, 11, 21, 56, 56, tzinfo=datetime.timezone.utc), 'time_taken': 189925.0, 'time_delta': '2 days, 4:45:25', 'additions': 21, 'deletions': 1, 'state': 'closed'}, {'id': 844209769, 'number': 10315, 'closed': datetime.datetime(2022, 2, 13, 6, 8, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 2, 9, 18, 32, 47, tzinfo=datetime.timezone.utc), 'time_taken': 300937.0, 'time_delta': '3 days, 11:35:37', 'additions': 4, 'deletions': 0, 'state': 'closed'}, {'id': 839505677, 'number': 10297, 'closed': datetime.datetime(2022, 2, 13, 22, 24, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 2, 3, 16, 49, 35, tzinfo=datetime.timezone.utc), 'time_taken': 884118.0, 'time_delta': '10 days, 5:35:18', 'additions': 105, 'deletions': 80, 'state': 'closed'}, {'id': 834800387, 'number': 10267, 'closed': datetime.datetime(2022, 1, 29, 15, 51, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 1, 28, 20, 36, 33, tzinfo=datetime.timezone.utc), 'time_taken': 69311.0, 'time_delta': '19:15:11', 'additions': 10, 'deletions': 0, 'state': 'closed'}, {'id': 790115184, 'number': 10048, 'closed': datetime.datetime(2021, 11, 30, 20, 26, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 11, 28, 15, 4, 45, tzinfo=datetime.timezone.utc), 'time_taken': 192104.0, 'time_delta': '2 days, 5:21:44', 'additions': 77, 'deletions': 25, 'state': 'closed'}, {'id': 776007689, 'number': 9982, 'closed': datetime.datetime(2021, 11, 15, 17, 36, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 11, 8, 22, 15, 10, tzinfo=datetime.timezone.utc), 'time_taken': 588088.0, 'time_delta': '6 days, 19:21:28', 'additions': 20, 'deletions': 20, 'state': 'closed'}, {'id': 717360619, 'number': 9687, 'closed': datetime.datetime(2021, 11, 3, 3, 27, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 22, 19, 19, 41, tzinfo=datetime.timezone.utc), 'time_taken': 6250054.0, 'time_delta': '72 days, 8:07:34', 'additions': 876, 'deletions': 532, 'state': 'closed'}, {'id': 693425831, 'number': 9596, 'closed': datetime.datetime(2021, 8, 14, 10, 40, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 20, 12, 30, 10, tzinfo=datetime.timezone.utc), 'time_taken': 2153405.0, 'time_delta': '24 days, 22:10:05', 'additions': 3035, 'deletions': 2623, 'state': 'closed'}, {'id': 660966829, 'number': 9444, 'closed': datetime.datetime(2021, 6, 11, 14, 31, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 3, 14, 44, 24, tzinfo=datetime.timezone.utc), 'time_taken': 690418.0, 'time_delta': '7 days, 23:46:58', 'additions': 22, 'deletions': 20, 'state': 'closed'}, {'id': 650025572, 'number': 9419, 'closed': datetime.datetime(2021, 6, 9, 14, 37, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 21, 14, 43, 41, tzinfo=datetime.timezone.utc), 'time_taken': 1641249.0, 'time_delta': '18 days, 23:54:09', 'additions': 132, 'deletions': 30, 'state': 'closed'}, {'id': 648940598, 'number': 9414, 'closed': datetime.datetime(2021, 5, 20, 19, 8, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 20, 14, 5, 12, tzinfo=datetime.timezone.utc), 'time_taken': 18220.0, 'time_delta': '5:03:40', 'additions': 2, 'deletions': 5, 'state': 'closed'}, {'id': 648774485, 'number': 9412, 'closed': datetime.datetime(2021, 5, 20, 17, 7, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 20, 11, 39, 51, tzinfo=datetime.timezone.utc), 'time_taken': 19633.0, 'time_delta': '5:27:13', 'additions': 1, 'deletions': 0, 'state': 'closed'}, {'id': 612064978, 'number': 9270, 'closed': datetime.datetime(2021, 4, 22, 14, 56, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 9, 1, 3, 7, tzinfo=datetime.timezone.utc), 'time_taken': 1173231.0, 'time_delta': '13 days, 13:53:51', 'additions': 88, 'deletions': 51, 'state': 'closed'}, {'id': 595657354, 'number': 9149, 'closed': datetime.datetime(2021, 3, 22, 20, 3, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 18, 15, 7, 26, tzinfo=datetime.timezone.utc), 'time_taken': 363358.0, 'time_delta': '4 days, 4:55:58', 'additions': 62, 'deletions': 3, 'state': 'closed'}, {'id': 594149549, 'number': 9113, 'closed': datetime.datetime(2021, 3, 18, 14, 27, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 16, 18, 36, 22, tzinfo=datetime.timezone.utc), 'time_taken': 157866.0, 'time_delta': '1 day, 19:51:06', 'additions': 51, 'deletions': 5, 'state': 'closed'}, {'id': 594108512, 'number': 9109, 'closed': datetime.datetime(2021, 3, 17, 13, 7, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 16, 17, 32, 29, tzinfo=datetime.timezone.utc), 'time_taken': 70527.0, 'time_delta': '19:35:27', 'additions': 21, 'deletions': 1, 'state': 'closed'}, {'id': 593209375, 'number': 9064, 'closed': datetime.datetime(2021, 3, 15, 20, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 15, 16, 17, 43, tzinfo=datetime.timezone.utc), 'time_taken': 14177.0, 'time_delta': '3:56:17', 'additions': 46, 'deletions': 68, 'state': 'closed'}, {'id': 593051449, 'number': 9049, 'closed': datetime.datetime(2021, 3, 15, 14, 36, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 15, 12, 56, 44, tzinfo=datetime.timezone.utc), 'time_taken': 5972.0, 'time_delta': '1:39:32', 'additions': 3, 'deletions': 5, 'state': 'closed'}, {'id': 577020801, 'number': 8891, 'closed': datetime.datetime(2021, 3, 2, 12, 12, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 20, 23, 20, 50, tzinfo=datetime.timezone.utc), 'time_taken': 823876.0, 'time_delta': '9 days, 12:51:16', 'additions': 23, 'deletions': 7, 'state': 'closed'}, {'id': 474093654, 'number': 8164, 'closed': datetime.datetime(2020, 8, 27, 16, 21, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 26, 18, 57, 7, tzinfo=datetime.timezone.utc), 'time_taken': 77066.0, 'time_delta': '21:24:26', 'additions': 52, 'deletions': 11, 'state': 'closed'}, {'id': 461335781, 'number': 8077, 'closed': datetime.datetime(2020, 8, 3, 8, 16, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 1, 18, 56, 29, tzinfo=datetime.timezone.utc), 'time_taken': 134414.0, 'time_delta': '1 day, 13:20:14', 'additions': 10, 'deletions': 8, 'state': 'closed'}]"
12777496,pyqtgraph,pyqtgraph/pyqtgraph,Python,1099,3825,153,287,4163,415,3,43,"[{'id': 699460779, 'number': 1932, 'closed': datetime.datetime(2021, 7, 30, 19, 19, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 29, 11, 50, 17, tzinfo=datetime.timezone.utc), 'time_taken': 113325.0, 'time_delta': '1 day, 7:28:45', 'additions': 14, 'deletions': 4, 'state': 'closed'}, {'id': 696811777, 'number': 1925, 'closed': datetime.datetime(2021, 7, 29, 11, 35, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 26, 8, 33, 17, tzinfo=datetime.timezone.utc), 'time_taken': 270128.0, 'time_delta': '3 days, 3:02:08', 'additions': 0, 'deletions': 0, 'state': 'closed'}]"
