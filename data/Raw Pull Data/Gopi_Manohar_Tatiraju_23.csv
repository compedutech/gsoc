pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
645306615,Adapting armadillo's parser for mlpack(Removing Boost Dependencies),"For background knowledge, look at these
* [What do you think about boost dependencies](https://github.com/mlpack/mlpack/issues/2440)
* [Remove boost spirit dependency](https://github.com/mlpack/mlpack/issues/2646)

Sample code to use the feature
```
#include <iostream>
#include <mlpack/core.hpp>

int main()
{
  arma::Mat<double> data;
  std::fstream file;
  
  file.open(""data.csv"");
  mlpack::data::load_data<double>(data, arma::csv_ascii, file);
  data.raw_print();
  
  return 0;  
}
```",True,2942,https://api.github.com/repos/mlpack/mlpack/pulls/2942,https://github.com/mlpack/mlpack/pull/2942,closed,1311,752,19,116,74,370,2,0,"[{'name': 'c: core'}, {'name': 'update dependencies'}]",2021-05-16 12:08:16+00:00,2021-11-06 16:54:11+00:00,15050755.0,"174 days, 4:45:55","[{'comment_id': 644164739, 'comment_body': 'I would say, keep these functions, for now, no need to remove them directly.', 'comment_created': datetime.datetime(2021, 6, 2, 17, 11, 1, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 644165936, 'comment_body': 'At this point, I would rather add the csv parser, add tests, merge the pull request and then open another pull request to remove boost spirit, since they are not at the same file, nor they do the same thing', 'comment_created': datetime.datetime(2021, 6, 2, 17, 12, 50, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 644168292, 'comment_body': 'These are for loading images and not CSV files, I do not see why we need to modify them for now.\r\nWe are going to change that, but later.', 'comment_created': datetime.datetime(2021, 6, 2, 17, 16, 18, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 644168444, 'comment_body': 'Similar here', 'comment_created': datetime.datetime(2021, 6, 2, 17, 16, 31, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 644168767, 'comment_body': 'We need to bring these back', 'comment_created': datetime.datetime(2021, 6, 2, 17, 16, 58, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 644169812, 'comment_body': 'I think you need to fix indentation for this file to be compatible with mlpack style', 'comment_created': datetime.datetime(2021, 6, 2, 17, 18, 27, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 644171104, 'comment_body': 'Would you add detailed documentation about each one of these function, what do they do, what type do they support, what is the expected extension,\r\nYou can get inspiration from `load.hpp`', 'comment_created': datetime.datetime(2021, 6, 2, 17, 20, 24, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 644173394, 'comment_body': 'is this comment related to the next lines?', 'comment_created': datetime.datetime(2021, 6, 2, 17, 23, 50, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 644174862, 'comment_body': 'In addition to these, you need to add the BSD license of mlpack since you wrote the code inspired by armadillo, and you may need a more descriptive message in the first lines', 'comment_created': datetime.datetime(2021, 6, 2, 17, 25, 36, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 644175708, 'comment_body': 'Why these are commented? are they the same function down? maybe I am missing something', 'comment_created': datetime.datetime(2021, 6, 2, 17, 26, 44, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 644284571, 'comment_body': '```suggestion\r\ntemplate<typename MatType, typename eT, typename PolicyType>\r\nbool Load(const std::string& filename,\r\n          arma::Mat<eT>& matrix,\r\n          DatasetMapper<PolicyType>& info,\r\n          const bool fatal = false,\r\n          const bool transpose = true);\r\n```\r\n\r\nThe `arma::Mat<eT>` need to be changed to `MatType` otherwise the declaration you added is not used', 'comment_created': datetime.datetime(2021, 6, 2, 20, 7, 30, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 644697934, 'comment_body': 'Okay, I will add them back.', 'comment_created': datetime.datetime(2021, 6, 3, 11, 2, 7, tzinfo=datetime.timezone.utc), 'commenter': 'heisenbuug', 'type': 'User'}, {'comment_id': 644698349, 'comment_body': 'Okay, I will only change it for loading `csv` files.', 'comment_created': datetime.datetime(2021, 6, 3, 11, 2, 51, tzinfo=datetime.timezone.utc), 'commenter': 'heisenbuug', 'type': 'User'}, {'comment_id': 644698769, 'comment_body': 'Yea, actually I used `size_t` there but arma was using `uword`', 'comment_created': datetime.datetime(2021, 6, 3, 11, 3, 37, tzinfo=datetime.timezone.utc), 'commenter': 'heisenbuug', 'type': 'User'}, {'comment_id': 644699452, 'comment_body': ""They are the same, I will remove those. I think I was testing something, that's why I commented those lines."", 'comment_created': datetime.datetime(2021, 6, 3, 11, 4, 49, tzinfo=datetime.timezone.utc), 'commenter': 'heisenbuug', 'type': 'User'}, {'comment_id': 644742453, 'comment_body': ""I have a small doubt here.\r\n```\r\ntemplate<typename MatType, typename eT>\r\nbool Load()\r\n```\r\nNow when I have to call the `Load` we will use\r\n`Load<int, arma::Mat<int>>`\r\nBut I don't want to set the Mat's datatype here as we have eT for that.\r\nIs there a workaround for this?"", 'comment_created': datetime.datetime(2021, 6, 3, 12, 17, 29, tzinfo=datetime.timezone.utc), 'commenter': 'heisenbuug', 'type': 'User'}, {'comment_id': 644755433, 'comment_body': 'In general the template parameters can be automatically deduced.  So a user doesn\'t need to specify them.  This will work:\r\n\r\n```\r\narma::mat matrix;\r\ndata::DatasetInfo di;\r\ndata::Load(""file.sv"", matrix, di);\r\n```\r\n\r\nI haven\'t looked at any of the rest of the PR, but my guess is that you don\'t need `eT` anymore and you should just use `MatType& matrix` as a parameter. :+1:', 'comment_created': datetime.datetime(2021, 6, 3, 12, 37, 2, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 644908914, 'comment_body': ""Yea, that's what I was thinking, we can remove `eT`, and have only `MatType` as template parameter."", 'comment_created': datetime.datetime(2021, 6, 3, 15, 44, 24, tzinfo=datetime.timezone.utc), 'commenter': 'heisenbuug', 'type': 'User'}, {'comment_id': 646458241, 'comment_body': '@shrit How should I handle the other types like `raw_ascii`?', 'comment_created': datetime.datetime(2021, 6, 7, 10, 20, 8, tzinfo=datetime.timezone.utc), 'commenter': 'heisenbuug', 'type': 'User'}, {'comment_id': 647549030, 'comment_body': 'I think you meant `LoadCSV` here?', 'comment_created': datetime.datetime(2021, 6, 8, 15, 21, 26, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 647604213, 'comment_body': '@heisenbuug I do not see what is the objective of this function, should it replace `Load` function declared in line 89 in `load_impl.hpp`? or are you planning to call it from there?\r\n', 'comment_created': datetime.datetime(2021, 6, 8, 16, 25, 50, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 647611349, 'comment_body': 'mlpack does handle `raw_ascii` when it is used for loading, this type is defined inside `detect_file_type.cpp` inside mlpack.\r\nI do not think this switch case should be defined here. This file should be related only to parsing CSV files. :+1: \r\nI think you need to refactor the `detect_file_type.cpp` and have a translation shim there, that translate from `mlpack::data::file_type` to `armadillo::file_type`\r\n\r\n', 'comment_created': datetime.datetime(2021, 6, 8, 16, 34, 46, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 647710429, 'comment_body': 'We already have a class named `LoadCSV` in mlpack actually...', 'comment_created': datetime.datetime(2021, 6, 8, 18, 50, 38, tzinfo=datetime.timezone.utc), 'commenter': 'heisenbuug', 'type': 'User'}, {'comment_id': 647807112, 'comment_body': 'I see, the other one should be removed, once this is done, we can rename this one to `LoadCSV`', 'comment_created': datetime.datetime(2021, 6, 8, 21, 30, 25, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 648030709, 'comment_body': 'Yea, I think we can remove this function, and if at all we need any modifications I can do them in `load_impl.hpp`...\r\n', 'comment_created': datetime.datetime(2021, 6, 9, 7, 15, 43, tzinfo=datetime.timezone.utc), 'commenter': 'heisenbuug', 'type': 'User'}, {'comment_id': 649442337, 'comment_body': 'Would you add doxygen comments on these files?', 'comment_created': datetime.datetime(2021, 6, 10, 18, 53, 47, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 649443224, 'comment_body': 'I think this comment can be removed right?', 'comment_created': datetime.datetime(2021, 6, 10, 18, 55, 6, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 649443496, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 6, 10, 18, 55, 27, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 649443828, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 6, 10, 18, 55, 58, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 649443918, 'comment_body': '```suggestion\r\n\r\n```', 'comment_created': datetime.datetime(2021, 6, 10, 18, 56, 5, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 649444685, 'comment_body': 'There are a lot of new lines here and there, can you remove all of them?', 'comment_created': datetime.datetime(2021, 6, 10, 18, 57, 16, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 649445815, 'comment_body': 'The comments are nice, but would you organize them to follow a specific logic? for instance, we can have four spaces after the comma for all of them, and be sure to cut the lines if they are longer than 80 chars. :+1: ', 'comment_created': datetime.datetime(2021, 6, 10, 18, 59, 8, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 649446920, 'comment_body': 'Would you improve comments here too? Be sure to start with a capital letter and end with a comma,\r\nDo not hesitate in being more descriptive, this will allow you and me to understand in the future why you wrote this. :+1: ', 'comment_created': datetime.datetime(2021, 6, 10, 19, 0, 56, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 649448389, 'comment_body': '```suggestion\r\n  bool LoadCSVV(MatType& x, std::fstream& f, std::string&)\r\n```\r\nWhat does the `std::string&` do here? and why it is added? would you elaborate on this one thanks', 'comment_created': datetime.datetime(2021, 6, 10, 19, 2, 46, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 649448787, 'comment_body': 'Do we need an `else` condition here?', 'comment_created': datetime.datetime(2021, 6, 10, 19, 3, 28, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 650389608, 'comment_body': 'Yea, I will write detailed comments about the implementations.', 'comment_created': datetime.datetime(2021, 6, 12, 12, 52, 44, tzinfo=datetime.timezone.utc), 'commenter': 'heisenbuug', 'type': 'User'}, {'comment_id': 650390025, 'comment_body': ""Maybe, what's happening is the `if` condition is not specific to `csv_ascii`\r\n`if (loadType != arma::hdf5_binary)`\r\n\r\nBefore our changes `matrix.load()` was kinda handling many formats here.\r\nBut we replaced it with a load function specific to `csv_ascii`.\r\n\r\nSo when some other format is being used it is failing the `load_save_test`.\r\nNot sure if this is a proper fix just added that as a temporary patch. "", 'comment_created': datetime.datetime(2021, 6, 12, 12, 57, 48, tzinfo=datetime.timezone.utc), 'commenter': 'heisenbuug', 'type': 'User'}, {'comment_id': 650432757, 'comment_body': 'I still can not understand the issue, there are two lines here in your code 178, and 179. They should handle other cases, unless if I am missing something ', 'comment_created': datetime.datetime(2021, 6, 12, 20, 22, 2, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 650433254, 'comment_body': 'Also, the other thing that bothers me with this fix, is the use of the matrix itself to load the code. If we use bandicoot and it does not have the loading functionality then the user will not be able to load anything. Here, we are supposing that the users are using a matrix that has the load functionality inside as follows: ( just writing it down so we can back to it later)\r\n`success = matrix.load(filename, loadType);`\r\nI do not want to keep it like this, but maybe it is the best solution. We will see later.', 'comment_created': datetime.datetime(2021, 6, 12, 20, 28, 23, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 652600531, 'comment_body': ""You need to add your name in addition to Conrad's name, not to replace it with your name. Since the code would not have been existed without his work"", 'comment_created': datetime.datetime(2021, 6, 16, 11, 31, 38, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 652601220, 'comment_body': 'Still, there are empty lines here :+1: ', 'comment_created': datetime.datetime(2021, 6, 16, 11, 32, 45, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 652601521, 'comment_body': '```suggestion\r\n    std::string line_string, token;\r\n    std::stringstream line_stream;\r\n```', 'comment_created': datetime.datetime(2021, 6, 16, 11, 33, 11, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 652608801, 'comment_body': 'I removed those line...\r\nSomething is happening after pushing the code, I will check it...', 'comment_created': datetime.datetime(2021, 6, 16, 11, 44, 19, tzinfo=datetime.timezone.utc), 'commenter': 'heisenbuug', 'type': 'User'}, {'comment_id': 652611194, 'comment_body': 'Actually in armadillo authors are not mentioned explicitly as in mlpack, so I copied the contents from there as it is and added my name. I will add cornads name as well there.', 'comment_created': datetime.datetime(2021, 6, 16, 11, 47, 47, tzinfo=datetime.timezone.utc), 'commenter': 'heisenbuug', 'type': 'User'}, {'comment_id': 653061617, 'comment_body': 'These one need to be in an independent header file in order to decouple it from the parser since they are unrelated', 'comment_created': datetime.datetime(2021, 6, 16, 21, 19, 42, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 653061799, 'comment_body': 'I do not think this one is required', 'comment_created': datetime.datetime(2021, 6, 16, 21, 19, 58, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 653062773, 'comment_body': '```suggestion\r\n                  const std::string& filename);\r\n```', 'comment_created': datetime.datetime(2021, 6, 16, 21, 21, 42, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 653064125, 'comment_body': 'There are a coupe of empty lines here', 'comment_created': datetime.datetime(2021, 6, 16, 21, 24, 20, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 653065273, 'comment_body': 'I do not think we need all of these overloads, even we can delete entirely this file according to the modification we are doing now. @rcurtin let me know if I am right here', 'comment_created': datetime.datetime(2021, 6, 16, 21, 26, 36, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 653065754, 'comment_body': 'Similar here, I think we can remove the declaration of these overloads', 'comment_created': datetime.datetime(2021, 6, 16, 21, 27, 29, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 653096031, 'comment_body': ""Can you use the mlpack style conventions here?  I know it will be different... `RawAscii`, `CSVAscii`, etc.  Also I'm not sure the `mlp` or `mlpack` prefix is necessary."", 'comment_created': datetime.datetime(2021, 6, 16, 22, 25, 17, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 653096162, 'comment_body': ""Should we just remove this if it's deprecated?"", 'comment_created': datetime.datetime(2021, 6, 16, 22, 25, 34, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 653097182, 'comment_body': ""```suggestion\r\n  switch (type)\r\n```\r\nSeems like the extra space shouldn't be needed?"", 'comment_created': datetime.datetime(2021, 6, 16, 22, 28, 9, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 653097402, 'comment_body': 'Agreed---we should be able to remove the explicit instantiations in this file like these. :+1:', 'comment_created': datetime.datetime(2021, 6, 16, 22, 28, 50, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 653098274, 'comment_body': ""I would suggest a different strategy here.  I would check to see if `MatType` is an Armadillo type, and if it is, then convert `loadType` to an `arma::file_type` with `ToArmaFileType()` and then use Armadillo's loader.\r\n\r\nIt is really the overload of `data::Load()` with a `DatasetMapper<MapPolicy>()` where we will always need to use the custom implementation in `LoadCSVV()`.\r\n\r\n(I am not sure if you are already planning to do what I suggested, and are just testing here.  If so, sorry for the unnecessary comment! :))"", 'comment_created': datetime.datetime(2021, 6, 16, 22, 30, 53, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 653098602, 'comment_body': 'This code also is only necessary if `MatType` is an Armadillo type. :+1:', 'comment_created': datetime.datetime(2021, 6, 16, 22, 31, 44, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 653098935, 'comment_body': 'When we try to load and have a `DatasetMapper<>`, here is where we should call `MapString()` when `ConvertToken()` returns `false`. :+1:', 'comment_created': datetime.datetime(2021, 6, 16, 22, 32, 36, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 653099126, 'comment_body': ""Hmm, I think it's fine to use `set_size()` here instead of `zeros()`. :+1:"", 'comment_created': datetime.datetime(2021, 6, 16, 22, 33, 4, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 654837654, 'comment_body': '@heisenbuug You have to add `#include ""csv_parser_impl.hh""` at line 104, Since it the implementation is header only so it needs to be included in this file too.', 'comment_created': datetime.datetime(2021, 6, 19, 20, 36, 27, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 654837825, 'comment_body': 'You can place this function in `detect_file_type.hpp`', 'comment_created': datetime.datetime(2021, 6, 19, 20, 38, 32, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 654837884, 'comment_body': 'I think you can move this struct to `detect_file_type.hpp` too.', 'comment_created': datetime.datetime(2021, 6, 19, 20, 39, 41, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 654948736, 'comment_body': 'I created a new file, `types.hpp`. I believe that we might need to add other functions as well in the future so I think a new file might be a better option.', 'comment_created': datetime.datetime(2021, 6, 20, 15, 6, 25, tzinfo=datetime.timezone.utc), 'commenter': 'heisenbuug', 'type': 'User'}, {'comment_id': 654949237, 'comment_body': 'I think a new file might be a good option? You can check my reply to your other comment on this below.', 'comment_created': datetime.datetime(2021, 6, 20, 15, 9, 56, tzinfo=datetime.timezone.utc), 'commenter': 'heisenbuug', 'type': 'User'}, {'comment_id': 654949595, 'comment_body': 'Yea, we were just testing here. Actually, we might have to refactor `Load` function a bit.\r\n@shrit might want to add more here?', 'comment_created': datetime.datetime(2021, 6, 20, 15, 12, 44, tzinfo=datetime.timezone.utc), 'commenter': 'heisenbuug', 'type': 'User'}, {'comment_id': 654955213, 'comment_body': 'Yea, once fixed on a way to handle this case, I will make necessary changes everywhere...', 'comment_created': datetime.datetime(2021, 6, 20, 15, 58, 22, tzinfo=datetime.timezone.utc), 'commenter': 'heisenbuug', 'type': 'User'}, {'comment_id': 654958403, 'comment_body': 'I am not sure that we have to put the Apache license here', 'comment_created': datetime.datetime(2021, 6, 20, 16, 25, 32, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 654962278, 'comment_body': ""Oh sorry, yea we don't need to. Will remove it."", 'comment_created': datetime.datetime(2021, 6, 20, 17, 0, 38, tzinfo=datetime.timezone.utc), 'commenter': 'heisenbuug', 'type': 'User'}, {'comment_id': 655802260, 'comment_body': 'Not sure if `std::is_integral` make sense here.  Only `std::is_floating_point` should be used here, as\r\n[std::strtod()](https://en.cppreference.com/w/cpp/string/byte/strtof) (as used in the code immediately following the `if` statement) is for floating point values, not integers.\r\n\r\n', 'comment_created': datetime.datetime(2021, 6, 22, 1, 2, 15, tzinfo=datetime.timezone.utc), 'commenter': 'conradsnicta', 'type': 'User'}, {'comment_id': 655803762, 'comment_body': 'The `else` should be `else if` with the `std::is_integral` check, as both [std::strtoll()](https://en.cppreference.com/w/cpp/string/byte/strtol) and [std::strtoull()](https://en.cppreference.com/w/cpp/string/byte/strtoul) (as used in the code within the `else` block) are for integers.\r\n\r\n[std::strtoll()](https://en.cppreference.com/w/cpp/string/byte/strtol) is for signed integers, while [std::strtoull()](https://en.cppreference.com/w/cpp/string/byte/strtoul) is for unsigned integers.\r\n', 'comment_created': datetime.datetime(2021, 6, 22, 1, 7, 4, tzinfo=datetime.timezone.utc), 'commenter': 'conradsnicta', 'type': 'User'}, {'comment_id': 656064371, 'comment_body': 'Oh, okay, I will make the change.\r\n', 'comment_created': datetime.datetime(2021, 6, 22, 9, 55, 26, tzinfo=datetime.timezone.utc), 'commenter': 'heisenbuug', 'type': 'User'}, {'comment_id': 656064994, 'comment_body': 'oh, I will adapt it with the functions accordingly.\r\nThank you for the review.', 'comment_created': datetime.datetime(2021, 6, 22, 9, 56, 16, tzinfo=datetime.timezone.utc), 'commenter': 'heisenbuug', 'type': 'User'}, {'comment_id': 656067231, 'comment_body': '```suggestion\r\n * This function uses MatType as template parameter in order to provide\r\n * support for any type of matrices from any linear algebra library.\r\n```', 'comment_created': datetime.datetime(2021, 6, 22, 9, 59, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 656072483, 'comment_body': '```suggestion\r\n * Parses a csv file and loads the data into a given matrix. In the first pass,\r\n * the function will determine the number of cols and rows in the given file.\r\n * Once the rows and cols are fixed we initialize the matrix with zeros. In \r\n * the second pass, the function converts each value to required datatype\r\n * and sets it equal to val.\r\n```', 'comment_created': datetime.datetime(2021, 6, 22, 10, 5, 50, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 656074594, 'comment_body': '```suggestion\r\n          MatType& matrix,\r\n          const bool fatal = false,\r\n```', 'comment_created': datetime.datetime(2021, 6, 22, 10, 8, 46, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 656074936, 'comment_body': 'Also, you need to change the typename.', 'comment_created': datetime.datetime(2021, 6, 22, 10, 9, 16, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 656075302, 'comment_body': 'It will be easier to remove them rather than adding comment, this will improve the review process :+1: ', 'comment_created': datetime.datetime(2021, 6, 22, 10, 9, 52, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 656079366, 'comment_body': '```suggestion\r\n          MatType& matrix,\r\n```\r\nI would suggest also to apply this change over the entire file, in addition to the implementation and to the save functions.', 'comment_created': datetime.datetime(2021, 6, 22, 10, 15, 50, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 656079692, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 6, 22, 10, 16, 16, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 656079911, 'comment_body': 'These are no longer necessary', 'comment_created': datetime.datetime(2021, 6, 22, 10, 16, 36, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 656080347, 'comment_body': 'Similar here', 'comment_created': datetime.datetime(2021, 6, 22, 10, 17, 15, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 656094890, 'comment_body': 'How should I handle `arma::Col<eT>& vec`\r\nShould I replace it with `MatType` as well?\r\n\r\nAlso if I remove `eT` from all functions, the ones which are loading images and other things, I also need to change their implementation a bit. Mainly just replacing the `eT`. I should make all those changes, right?\r\n\r\nThe above is when I will make changes in `load.hpp` which contains overloads of `Load` fucntion. ', 'comment_created': datetime.datetime(2021, 6, 22, 10, 37, 41, tzinfo=datetime.timezone.utc), 'commenter': 'heisenbuug', 'type': 'User'}, {'comment_id': 656120232, 'comment_body': 'Yes, you can use `MatType` as well.\r\nHowever, in this case, we need to use `SFINAE` in order to know which overload to chose if the `MatType` is a matrix or a column. Here is an example, but I am not sure of the syntax:\r\n```\r\nLoad(filename, \r\n     const typename std::enable_if<std::is_same<MatType, arma::col>>::type* = 0,\r\n     bool)\r\n```\r\nThe idea is to activate this overload if the type of the `MatType` is equal to `arma::col`\r\n\r\n', 'comment_created': datetime.datetime(2021, 6, 22, 11, 16, 35, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 656122120, 'comment_body': 'You need to add a similar one, if this was `col` or `vec` I think, we can do the same for the images type, but let us keep the load image function until the end.\r\nI think when this compiles, we can start removing `boost::spirit`. ', 'comment_created': datetime.datetime(2021, 6, 22, 11, 19, 33, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 656127733, 'comment_body': 'Okay, sounds good...\r\nWe have to handle the `undefined reference` error and get this much running and after that I will start using `SFINAE`', 'comment_created': datetime.datetime(2021, 6, 22, 11, 28, 4, tzinfo=datetime.timezone.utc), 'commenter': 'heisenbuug', 'type': 'User'}, {'comment_id': 657918232, 'comment_body': 'Would you change this comments, I do not think it is relevant now', 'comment_created': datetime.datetime(2021, 6, 24, 12, 52, 33, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 657919440, 'comment_body': 'You need to add `load_impl.hpp` here otherwise it will not work ', 'comment_created': datetime.datetime(2021, 6, 24, 12, 54, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 658250641, 'comment_body': '@shrit added that already...\r\n', 'comment_created': datetime.datetime(2021, 6, 24, 20, 12, 11, tzinfo=datetime.timezone.utc), 'commenter': 'heisenbuug', 'type': 'User'}, {'comment_id': 661645757, 'comment_body': 'Would you fix the indentation here', 'comment_created': datetime.datetime(2021, 6, 30, 16, 42, 33, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 661648071, 'comment_body': 'In  this case you need to move the comment from line 297 to line 289', 'comment_created': datetime.datetime(2021, 6, 30, 16, 45, 51, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 661648411, 'comment_body': 'Would you fix the indentation here?', 'comment_created': datetime.datetime(2021, 6, 30, 16, 46, 23, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 661649456, 'comment_body': 'You need to include the `load_csv.hpp` here in order to avoid the error.', 'comment_created': datetime.datetime(2021, 6, 30, 16, 47, 45, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 661990073, 'comment_body': ""I did, still didn't work and also `load_csv.hpp` is included in `load_impl.hpp` anyways, so shouldn't that be enough?"", 'comment_created': datetime.datetime(2021, 7, 1, 5, 42, 7, tzinfo=datetime.timezone.utc), 'commenter': 'heisenbuug', 'type': 'User'}, {'comment_id': 662193624, 'comment_body': ""@shrit It's still not working, maybe it's a circular include problem, not sure, I can't test the DatasetMapper implementation without the solving this error, have a look at it if possible..."", 'comment_created': datetime.datetime(2021, 7, 1, 11, 5, 12, tzinfo=datetime.timezone.utc), 'commenter': 'heisenbuug', 'type': 'User'}, {'comment_id': 663381607, 'comment_body': 'We can delay the conversion to `c_str` and convert the `token` to lowercase using\r\n```\r\nstd::transform(token.begin(), token.end(), token,begin(), ::tolower);\r\n```\r\n\r\nThis will eliminate the requirement of `sig_*` and we can simply do `token.substr(1, 3) == ""inf""` and `token.substr(1, 3) == ""nan""`.\r\n\r\nAfter these, we can then convert the `token` to `c_str` for later use.', 'comment_created': datetime.datetime(2021, 7, 3, 16, 10, 5, tzinfo=datetime.timezone.utc), 'commenter': 'RishabhGarg108', 'type': 'User'}, {'comment_id': 663582172, 'comment_body': ""@RishabhGarg108 I'm not sure that using `std::transform()` and `.substr()` is the most efficient way to do this.  Bear in mind that `ConvertToken()` needs to be very quick as it needs to process each token in a CSV file, which may be millions of times while processing one file.\r\n\r\nCalling `std::transform` creates an overhead due to requiring a writeable copy of the token (where the copy will probably require memory allocation, which is slow), as well as looping through the characters. Using `.substr()` creates further loops.\r\n\r\nThis is in contrast to what's done now, where the relevant characters are simply extracted (via `sig_a` etc) and compared to a small fixed number of lower and upper characters.  No string copies, no explicit memory allocation, and no loops, so there is very little overhead.\r\n"", 'comment_created': datetime.datetime(2021, 7, 5, 0, 53, 32, tzinfo=datetime.timezone.utc), 'commenter': 'conradsnicta', 'type': 'User'}, {'comment_id': 663921203, 'comment_body': 'I recommend changing `x.set_size(mat_size.first, mat_size.second)` to `x.zeros(mat_size.first, mat_size.second)`.  \r\nMalformed CSV files may have rows with variable number of columns, so they have ""missing"" data.  \r\nUsing `.zeros()` ensures that the ""missing"" data is treated as zeros, rather than random garbage that happens to be in memory.\r\n', 'comment_created': datetime.datetime(2021, 7, 5, 13, 11, 56, tzinfo=datetime.timezone.utc), 'commenter': 'conradsnicta', 'type': 'User'}, {'comment_id': 664714843, 'comment_body': ""Ahh, I see. Thanks for the explanation! I overlooked the fact that this function is called a huge number of times. Anyways, the suggestion was just to simplify the code, so we can definitely live with it if it's fast :)"", 'comment_created': datetime.datetime(2021, 7, 6, 16, 38, tzinfo=datetime.timezone.utc), 'commenter': 'RishabhGarg108', 'type': 'User'}, {'comment_id': 671665297, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 7, 17, 9, 50, 6, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 671665340, 'comment_body': 'You can remove both of these if it is compiling', 'comment_created': datetime.datetime(2021, 7, 17, 9, 50, 26, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 671665404, 'comment_body': 'Keep only one of these sentences, it has a lot of repetition.', 'comment_created': datetime.datetime(2021, 7, 17, 9, 50, 57, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 671665450, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 7, 17, 9, 51, 33, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 671665549, 'comment_body': 'You can remove these comments or replace them.', 'comment_created': datetime.datetime(2021, 7, 17, 9, 52, 16, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 671668172, 'comment_body': '```suggestion\r\n\r\n```', 'comment_created': datetime.datetime(2021, 7, 17, 10, 18, 16, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 671668505, 'comment_body': 'Would fix indentation for this line?', 'comment_created': datetime.datetime(2021, 7, 17, 10, 21, 38, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 671668736, 'comment_body': '```suggestion\r\n      // If we need to do a first pass for the DatasetMapper, do it.\r\n```', 'comment_created': datetime.datetime(2021, 7, 17, 10, 24, 23, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 671668813, 'comment_body': 'These line can be removed', 'comment_created': datetime.datetime(2021, 7, 17, 10, 25, 10, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 671668841, 'comment_body': 'Would you explain what this part of code is doing?', 'comment_created': datetime.datetime(2021, 7, 17, 10, 25, 57, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 671669213, 'comment_body': '@rcurtin Do you have an idea why it was removing the white spaces from the string, I think it is removing the trailing white spaces, those at the start and at the end of the string. Otherwise, I fail to see the reason here.', 'comment_created': datetime.datetime(2021, 7, 17, 10, 29, 23, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 671711460, 'comment_body': 'str contains a whole row in this form: `1,4,7,9,T`\r\nWe are extracting each element from the str\r\nand sending it to `MapFirstPass`\r\n\r\n`MapFirstPass` in turn determines if the dimension is numeric or categorical.\r\n\r\nAlso, I think we can also have str as `1/t4/t7/t9/tT` so we need to handle that case as well.\r\nBasically what delimiter rule was doing eairlier.', 'comment_created': datetime.datetime(2021, 7, 17, 15, 39, 16, tzinfo=datetime.timezone.utc), 'commenter': 'heisenbuug', 'type': 'User'}, {'comment_id': 671711639, 'comment_body': 'I commented `boost::trim(str)` everywhere and ran the old parser.\r\nNothing seems to change even if we remove it.\r\n\r\nMaybe it is to handle malformed csv files? Not sure.', 'comment_created': datetime.datetime(2021, 7, 17, 15, 40, 51, tzinfo=datetime.timezone.utc), 'commenter': 'heisenbuug', 'type': 'User'}, {'comment_id': 671748952, 'comment_body': 'What do you mean nothing changes when remove it, if you mean compiling, then yes it should compile without any issue.\r\nHowever, does it pass the tests??\r\n', 'comment_created': datetime.datetime(2021, 7, 17, 22, 5, 51, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 671749703, 'comment_body': 'I am not sure if this is the best way to do it, How do you distinguish if a string has a comma already in it ? For example, suppose if the col is as follows:\r\n`1, ""this is a string, with a comma"", 2, 3`\r\nAs you can notice, in this col there are three rows, and one string has a comma inside.\r\nYou can take a look at `load_save_test.cpp` you need to be sure that the parsing is taking in consideration all these cases.\r\nAlso in mlpack matrices are always transposed :+1: \r\n', 'comment_created': datetime.datetime(2021, 7, 17, 22, 13, 54, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 672050150, 'comment_body': ""I marked the PR as ready for review hoping that it will run the tests, but it's not. I am running the tests locally for now.\r\n\r\nHow can I run the tests just like before on CI?"", 'comment_created': datetime.datetime(2021, 7, 19, 7, 27, 53, tzinfo=datetime.timezone.utc), 'commenter': 'heisenbuug', 'type': 'User'}, {'comment_id': 672090246, 'comment_body': '@heisenbuug there is a conflict in `load_csv.hpp`. Merge the latest master, resolve the conflict and push again. Then all the CI tests will run. :)', 'comment_created': datetime.datetime(2021, 7, 19, 8, 21, 10, tzinfo=datetime.timezone.utc), 'commenter': 'RishabhGarg108', 'type': 'User'}, {'comment_id': 672126353, 'comment_body': ""@RishabhGarg108 I merged the latest master, I don't understand how can there be a conflict here as there is only one branch on which I am working..."", 'comment_created': datetime.datetime(2021, 7, 19, 9, 10, 50, tzinfo=datetime.timezone.utc), 'commenter': 'heisenbuug', 'type': 'User'}, {'comment_id': 672181807, 'comment_body': 'Are you sure that the merge is successful? I am not sure if it is because generally after merging any branch, you will have a commit message like ""Merged branch master of xyz into new-parser"".\r\n\r\nAlso, look below the CI checks in this PR, It says ""This branch has conflicts that must be resolved"". Then it also mentions the file in which the conflict is `src/mlpack/core/data/load_csv.hpp`.', 'comment_created': datetime.datetime(2021, 7, 19, 10, 31, 52, tzinfo=datetime.timezone.utc), 'commenter': 'RishabhGarg108', 'type': 'User'}, {'comment_id': 672201796, 'comment_body': 'Yea, the conflict has not resolved yet, still working on it.', 'comment_created': datetime.datetime(2021, 7, 19, 11, 5, 45, tzinfo=datetime.timezone.utc), 'commenter': 'heisenbuug', 'type': 'User'}, {'comment_id': 673040284, 'comment_body': 'Let me know if the tests are passing locally, there is no need yet to run it on the CI, especially as the pull request is not ready yet.\nYou need to fetch the `master` branch on you machine and merge with your local master branch.\nOnce this is done, you can checkout to your branch and type `git merge master`.👍 \nAt this level, git will tell you that there is a merge conflict in a specific file. You will have to open this file and manage the conflict by hand, e.g. remove the new modification from the master and keep yours.\nOnce you have resolved all the conflict, you can save the file and add the file using `git add` and them commit\nYou will have a ready commit message telling that you are merging the master to your branch.\nOnce this is done you can push the modification and the CI will restart to run.\n\nAs said, if the tests are failing locally there is no need to push the modification, as they will fail here too.\n\nLet me know if this is helpful👍', 'comment_created': datetime.datetime(2021, 7, 20, 11, 32, 45, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 673625923, 'comment_body': 'This should be `std::pair<size_t, size_t>`', 'comment_created': datetime.datetime(2021, 7, 21, 3, 1, 54, tzinfo=datetime.timezone.utc), 'commenter': 'conradsnicta', 'type': 'User'}, {'comment_id': 673625982, 'comment_body': 'This should be `std::pair<size_t, size_t>`', 'comment_created': datetime.datetime(2021, 7, 21, 3, 2, 3, tzinfo=datetime.timezone.utc), 'commenter': 'conradsnicta', 'type': 'User'}, {'comment_id': 673626208, 'comment_body': 'This should be `x.zeros(mat_size.second, mat_size.first);`', 'comment_created': datetime.datetime(2021, 7, 21, 3, 2, 46, tzinfo=datetime.timezone.utc), 'commenter': 'conradsnicta', 'type': 'User'}, {'comment_id': 673627265, 'comment_body': 'Change all instances of `arma::uword` to `size_t`, for consistency with the rest of the mlpack codebase\r\n', 'comment_created': datetime.datetime(2021, 7, 21, 3, 6, 23, tzinfo=datetime.timezone.utc), 'commenter': 'conradsnicta', 'type': 'User'}, {'comment_id': 673628766, 'comment_body': 'change `convert_token<eT>(...)` to `LoadCSV::ConvertToken(...)`\r\n\r\n', 'comment_created': datetime.datetime(2021, 7, 21, 3, 11, 11, tzinfo=datetime.timezone.utc), 'commenter': 'conradsnicta', 'type': 'User'}, {'comment_id': 673852667, 'comment_body': 'I will replace it with size_t', 'comment_created': datetime.datetime(2021, 7, 21, 10, 25, 40, tzinfo=datetime.timezone.utc), 'commenter': 'heisenbuug', 'type': 'User'}, {'comment_id': 681102736, 'comment_body': 'We should not forget to handle this at the end of the project. I am just adding comment here so we do not forget about it :+1: ', 'comment_created': datetime.datetime(2021, 8, 2, 16, 15, 14, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 681107257, 'comment_body': 'Try to test the master branch on a corrupted csv file. For instance, the first line should have commas and the second line is spaces. Try a mix of both of them on the same line too.\r\nI do think this case should throw this error. Let me know if it is not the case:+1:', 'comment_created': datetime.datetime(2021, 8, 2, 16, 22, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 681107898, 'comment_body': 'Do not hesitate in adding a Doxygen compatible documentation for this function :+1: ', 'comment_created': datetime.datetime(2021, 8, 2, 16, 23, 3, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 682902116, 'comment_body': 'Nope, both the cases are giving errors but they are from `canParse`.\r\nTried these\r\n```\r\nInput\r\n7,6,3,6\r\n3 4 8 6\r\n2,8,4,6\r\n8,2,3,6\r\n\r\nOutput\r\n[WARN ] LoadCSV::TransposeParse(): wrong number of dimensions (1) on line 1; should be 4 dimensions.\r\n0 1 6.95269e-310 6.95269e-310\r\n6 6.95269e-310 2.11741e-317 6.92066e-310\r\n3 4.94066e-324 3.21143e-322 0\r\n6 6.95269e-310 2.12203e-314 4.94066e-324\r\n```\r\n```\r\nInput\r\n7,6,3,6\r\n3,4 8 6\r\n2,8,4,6\r\n8,2,3,6\r\n\r\nOutput\r\n[WARN ] LoadCSV::TransposeParse(): wrong number of dimensions (2) on line 1; should be 4 dimensions.\r\n7 3 6.95257e-310 6.95257e-310\r\n0 1 2.11741e-317 6.91434e-310\r\n3 4.94066e-324 3.21143e-322 0\r\n6 6.95257e-310 2.12203e-314 4.94066e-324\r\n```\r\n\r\n', 'comment_created': datetime.datetime(2021, 8, 4, 19, 33, 22, tzinfo=datetime.timezone.utc), 'commenter': 'heisenbuug', 'type': 'User'}, {'comment_id': 683458146, 'comment_body': '@shrit should I proceed to remove the `canParse` part? You already told me that on but just wanted to confirm once again.', 'comment_created': datetime.datetime(2021, 8, 5, 13, 34, 51, tzinfo=datetime.timezone.utc), 'commenter': 'heisenbuug', 'type': 'User'}, {'comment_id': 683505567, 'comment_body': '@heisenbuug Yes, you can remove the `canParse` part. But we need to have some kind of a check that stop the parsing process if the dataset is corrupted, or if there is an issue with the col numbers. I did not look at the code yet, Let me know if such a check does exist', 'comment_created': datetime.datetime(2021, 8, 5, 14, 27, 1, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 683545473, 'comment_body': 'If we `Load` with `DatasetMapper` then we are getting the warning as above in `new-parser` as well.\r\nBut when we are loading without `DatasetMapper` we are getting this as output.\r\n```\r\n7 3 2 8\r\n6 4 8 2\r\n3 0 4 3\r\n6 0 6 6\r\n```\r\nThis goes for both branches, `mlpack-master` and `new-parser`', 'comment_created': datetime.datetime(2021, 8, 5, 15, 9, 43, tzinfo=datetime.timezone.utc), 'commenter': 'heisenbuug', 'type': 'User'}, {'comment_id': 683816943, 'comment_body': 'You can remove these two.', 'comment_created': datetime.datetime(2021, 8, 5, 22, 5, 57, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 683818769, 'comment_body': '```suggestion\r\n                     const std::string& filename);\r\n```', 'comment_created': datetime.datetime(2021, 8, 5, 22, 10, 14, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 683819902, 'comment_body': 'We need to handle this, I will try not to forget.', 'comment_created': datetime.datetime(2021, 8, 5, 22, 12, 57, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 683820217, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 8, 5, 22, 13, 43, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 683823509, 'comment_body': 'I am not sure of removing boost like this. You need to write a function that trim according to these characters.\r\nIt should not be hard, let me know if you need any help, basically you need to create another trim function `trim_if` that takes a lambda function as a parameter. Then you call back the lambda parameter inside the `trim_if` and recover the char that need to be used in the trimming process', 'comment_created': datetime.datetime(2021, 8, 5, 22, 21, 30, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 683823569, 'comment_body': 'Similar here as above', 'comment_created': datetime.datetime(2021, 8, 5, 22, 21, 42, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 683823641, 'comment_body': 'here too.', 'comment_created': datetime.datetime(2021, 8, 5, 22, 21, 54, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 683823717, 'comment_body': 'here also', 'comment_created': datetime.datetime(2021, 8, 5, 22, 22, 6, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 683823785, 'comment_body': 'here too.', 'comment_created': datetime.datetime(2021, 8, 5, 22, 22, 16, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 683824301, 'comment_body': 'Do not forget these one too.', 'comment_created': datetime.datetime(2021, 8, 5, 22, 23, 35, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 683824585, 'comment_body': 'You can remove it now', 'comment_created': datetime.datetime(2021, 8, 5, 22, 24, 27, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 683824716, 'comment_body': 'This line is not necessary', 'comment_created': datetime.datetime(2021, 8, 5, 22, 24, 46, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 683825259, 'comment_body': 'These spaces need to be removed too.', 'comment_created': datetime.datetime(2021, 8, 5, 22, 26, 18, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 683825586, 'comment_body': '```suggestion\r\n      ++rows;\r\n       trim(line);\r\n```', 'comment_created': datetime.datetime(2021, 8, 5, 22, 27, 17, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 683825911, 'comment_body': 'Do you have any reason to move the trimming before moving to the next row?', 'comment_created': datetime.datetime(2021, 8, 5, 22, 27, 59, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 683826417, 'comment_body': 'Would you fix the indentation here?', 'comment_created': datetime.datetime(2021, 8, 5, 22, 29, 10, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 683826779, 'comment_body': 'If these are not required, can you remove them from here?', 'comment_created': datetime.datetime(2021, 8, 5, 22, 30, 10, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 683826967, 'comment_body': 'If these are no longer required, would you remove all of them.', 'comment_created': datetime.datetime(2021, 8, 5, 22, 30, 35, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 683827805, 'comment_body': 'I think you can bring back the comment, it is useful here :+1: ', 'comment_created': datetime.datetime(2021, 8, 5, 22, 32, 48, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 683828055, 'comment_body': 'Indentation issues... ', 'comment_created': datetime.datetime(2021, 8, 5, 22, 33, 32, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 683828111, 'comment_body': 'The same as above', 'comment_created': datetime.datetime(2021, 8, 5, 22, 33, 43, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 683828189, 'comment_body': 'Same as above', 'comment_created': datetime.datetime(2021, 8, 5, 22, 33, 52, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 683828520, 'comment_body': 'Indentation issues.', 'comment_created': datetime.datetime(2021, 8, 5, 22, 34, 46, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 683828634, 'comment_body': 'Same as above', 'comment_created': datetime.datetime(2021, 8, 5, 22, 35, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 683828715, 'comment_body': 'Same here', 'comment_created': datetime.datetime(2021, 8, 5, 22, 35, 10, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 683828796, 'comment_body': 'Indentation issues', 'comment_created': datetime.datetime(2021, 8, 5, 22, 35, 25, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 683829212, 'comment_body': 'You can remove the `canParse()` part.', 'comment_created': datetime.datetime(2021, 8, 5, 22, 36, 30, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 683831221, 'comment_body': 'Indentation issues', 'comment_created': datetime.datetime(2021, 8, 5, 22, 41, 28, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 683831437, 'comment_body': 'To be removed', 'comment_created': datetime.datetime(2021, 8, 5, 22, 41, 56, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 683831577, 'comment_body': 'Indentation issues', 'comment_created': datetime.datetime(2021, 8, 5, 22, 42, 18, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 683831798, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 8, 5, 22, 42, 49, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 683831987, 'comment_body': 'Need to be handled', 'comment_created': datetime.datetime(2021, 8, 5, 22, 43, 26, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 683832146, 'comment_body': 'Same here', 'comment_created': datetime.datetime(2021, 8, 5, 22, 43, 52, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 683833793, 'comment_body': 'Great work, I did not think you have already finished this one, perfect. Please do not consider my above comment considering this `trim_if`', 'comment_created': datetime.datetime(2021, 8, 5, 22, 48, 24, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 683834647, 'comment_body': 'Also, you can use `std::function<bool(char)>` instead of old C style callback, I am not sure of the syntax, but it should work fine in both cases. :+1: ', 'comment_created': datetime.datetime(2021, 8, 5, 22, 50, 45, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 684187098, 'comment_body': 'Nope, I keep it as it was before.', 'comment_created': datetime.datetime(2021, 8, 6, 12, 13, 40, tzinfo=datetime.timezone.utc), 'commenter': 'heisenbuug', 'type': 'User'}, {'comment_id': 684246283, 'comment_body': '@shrit I think we need to keep this as when we are initializing `LoadCSV` object as `LoadCSV loader` then this is the one which will get used, right?', 'comment_created': datetime.datetime(2021, 8, 6, 13, 43, 27, tzinfo=datetime.timezone.utc), 'commenter': 'heisenbuug', 'type': 'User'}, {'comment_id': 684253273, 'comment_body': 'Ah, I missed that, in this case, you need to add a comment inside the body of the function such as: `// Nothing to do here.`, and remove the above comment of the function', 'comment_created': datetime.datetime(2021, 8, 6, 13, 52, 38, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 684515862, 'comment_body': 'I think we should add `load_csv_impl.hpp` here. :+1:', 'comment_created': datetime.datetime(2021, 8, 6, 21, 37, 2, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 684620166, 'comment_body': '@heisenbuug this one has not been resolved, just a reminder', 'comment_created': datetime.datetime(2021, 8, 7, 11, 13, 21, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 684623438, 'comment_body': 'Another indentation issue', 'comment_created': datetime.datetime(2021, 8, 7, 11, 49, 1, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 684623482, 'comment_body': 'same here', 'comment_created': datetime.datetime(2021, 8, 7, 11, 49, 20, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 684623498, 'comment_body': 'You can remove the two empty lines here', 'comment_created': datetime.datetime(2021, 8, 7, 11, 49, 46, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 684623566, 'comment_body': 'This function is not indented correctly', 'comment_created': datetime.datetime(2021, 8, 7, 11, 50, 28, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 684623579, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 8, 7, 11, 50, 50, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 684623624, 'comment_body': '```suggestion\r\n    if (loadType == file_type::CSVASCII)\r\n```', 'comment_created': datetime.datetime(2021, 8, 7, 11, 51, 21, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 684869340, 'comment_body': ""We typically name structs and classes in mlpack with camelcase, so I know it is different than Armadillo's convention, but can we call this `FileType` instead?"", 'comment_created': datetime.datetime(2021, 8, 9, 2, 9, 41, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 684869570, 'comment_body': '```suggestion\r\n * This function is used to convert mlpack file types to their respective\r\n * Armadillo file types.\r\n```\r\n:)', 'comment_created': datetime.datetime(2021, 8, 9, 2, 10, 46, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 684869614, 'comment_body': '```suggestion\r\n\r\n```\r\nNo need for the double space (sorry that this is a pedantic comment).', 'comment_created': datetime.datetime(2021, 8, 9, 2, 11, 4, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 684869771, 'comment_body': ""```suggestion\r\nnamespace mlpack {\r\nnamespace data {\r\n```\r\nJust a quick fix to match the style elsewhere in the library.  I am sure I have missed some things going through (and there are some things I've seen and haven't taken the time to comment about), so it's probably worth going through the whole PR and checking its consistency with the style guide. :+1:"", 'comment_created': datetime.datetime(2021, 8, 9, 2, 11, 50, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 684869862, 'comment_body': 'Any reason this is commented out?  (I see some other tests are commented out too.)', 'comment_created': datetime.datetime(2021, 8, 9, 2, 12, 24, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 684870144, 'comment_body': '```suggestion\r\nstd::string GetStringType(const file_type& type);\r\n\r\n```\r\nI think the code is a little easier to read if we keep the space here. :+1:', 'comment_created': datetime.datetime(2021, 8, 9, 2, 14, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 684870596, 'comment_body': ""If I am not mistaken, even if you have `SpMat<eT>` here, when you call `data::Load()`, the compiler will try to match the most specific version.  So calling `data::Load(filename, sparse_matrix, ...)` for some `sparse_matrix` that has type `SpMat<double>` or similar should work fine... I think.  But, I could be wrong---I am only writing this comment from memory, and I haven't actually tried this change in the code here."", 'comment_created': datetime.datetime(2021, 8, 9, 2, 16, 21, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 684870658, 'comment_body': ""I'm very happy to see these go away. :tada: :tada:"", 'comment_created': datetime.datetime(2021, 8, 9, 2, 16, 43, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 684870853, 'comment_body': ""I think the spacing is wrong here.  Maybe your editor is using tabs instead of spaces?  I can't fully see it in the github diff here, but it's probably worth looking into if this looks right in your editor but incorrect here."", 'comment_created': datetime.datetime(2021, 8, 9, 2, 17, 44, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 684870999, 'comment_body': '```suggestion\r\n * https://gitlab.com/conradsnicta/armadillo-code/-/blob/10.5.x/include/armadillo_bits/diskio_meat.hpp\r\n *\r\n * The original Armadillo parser is licensed under the BSD-compatible Apache license, shown below:\r\n *\r\n```\r\nI think it could be useful just to point out why there are two licenses in the header file.', 'comment_created': datetime.datetime(2021, 8, 9, 2, 18, 53, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 684871034, 'comment_body': ':tada: :tada: :tada:', 'comment_created': datetime.datetime(2021, 8, 9, 2, 19, 9, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 684871141, 'comment_body': '```suggestion\r\n      ++rows;\r\n```\r\nI think this has one too many spaces.  (It should be 2-space tabs.) :+1:', 'comment_created': datetime.datetime(2021, 8, 9, 2, 19, 45, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 684871447, 'comment_body': 'Small style issue; can you call this `lineStream`?  I know it is a small thing, but I think consistency throughout the codebase (even with respect to variable names) is important for maintainability and readability.', 'comment_created': datetime.datetime(2021, 8, 9, 2, 21, 11, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 684871610, 'comment_body': 'This breaks out of the enclosing while loop... why do we want to exit here?  I think this is a little unclear, so if it is a thing we should do, it is probably worth adding a comment here on why the break is needed. :+1:', 'comment_created': datetime.datetime(2021, 8, 9, 2, 21, 56, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 684872038, 'comment_body': ""Can you fix the indentation here?  It's a little hard to follow the logic. :+1:"", 'comment_created': datetime.datetime(2021, 8, 9, 2, 23, 54, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 684872190, 'comment_body': 'I think some comments here on what the goal of this section is could be really helpful.  I am reading about it and thinking about it and it makes sense, but, it saves the reader/maintainer a lot of time if the goal of the section is clearly denoted in a comment right above the code. :)', 'comment_created': datetime.datetime(2021, 8, 9, 2, 24, 44, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 684872812, 'comment_body': ""Okay, so I guess the strategy is if we have an unclosed quote, we keep getting tokens until one of the tokens closes the quote?  I believe this strategy will work; I can't think of any cases where it wouldn't.  (But I didn't think about it *that* hard.)  Let me know if I misunderstood---I'm mostly leaving this comment just to check my own understanding of the code. :)"", 'comment_created': datetime.datetime(2021, 8, 9, 2, 28, 13, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 684873032, 'comment_body': 'Since this is used twice, it might be useful to refactor it out into a separate utility function. :+1:', 'comment_created': datetime.datetime(2021, 8, 9, 2, 29, 10, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 684873285, 'comment_body': '```suggestion\r\n   * Given the address of a matrix element(val)\r\n```\r\n:)', 'comment_created': datetime.datetime(2021, 8, 9, 2, 30, 27, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 684873602, 'comment_body': 'In a couple places this is longer than 80 characters, so please be sure the wrap the functions in this file to the right length. :+1:', 'comment_created': datetime.datetime(2021, 8, 9, 2, 32, 5, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 684873959, 'comment_body': 'What happens if conversion fails?  Should we throw an exception?', 'comment_created': datetime.datetime(2021, 8, 9, 2, 34, 3, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 684874154, 'comment_body': ""Don't we only need to map a token if `ConvertToken()` fails?  But I don't see any call to `ConvertToken()`.  Maybe I misunderstood something?"", 'comment_created': datetime.datetime(2021, 8, 9, 2, 35, 2, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 684874232, 'comment_body': '`""\\t""` doesn\'t refer to a tab character; but `\'\\t\'` does.  I\'m not sure I understand what this line is supposed to do?', 'comment_created': datetime.datetime(2021, 8, 9, 2, 35, 30, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 684874404, 'comment_body': 'I feel like this function is so similar to the categorical parsing done in `load_csv.hpp` that some of the logic could be combined.', 'comment_created': datetime.datetime(2021, 8, 9, 2, 36, 26, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 684874545, 'comment_body': '```suggestion\r\n * Utility functions related to string manipulation.\r\n```\r\n:+1:', 'comment_created': datetime.datetime(2021, 8, 9, 2, 37, 22, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 684874851, 'comment_body': ""I think that we need to check for any character in `std::isspace()`, not just `' '`.  Whitespace also includes tab characters.  So, you might want to skip this check and see if you can adapt the loops below to work fine even when all characters are whitespace. :+1:"", 'comment_created': datetime.datetime(2021, 8, 9, 2, 38, 59, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 684874888, 'comment_body': '```suggestion\r\n * of the string. The supplied function is\r\n```', 'comment_created': datetime.datetime(2021, 8, 9, 2, 39, 18, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 685659140, 'comment_body': '@heisenbuug @shrit To handle sparse matrices (eg. if `MatType` is `SpMat<double>`), change the line with `ConvertToken<MatType>(x.at(row, col), token);` to the following lines:\r\n\r\n    MatType::elem_type tmp_val = typename MatType::elem_type(0);\r\n    \r\n    if( ConvertToken<MatType>(tmp_val, token) )\r\n    {\r\n      x.at(row, col) = tmp_val;\r\n    }\r\n\r\n', 'comment_created': datetime.datetime(2021, 8, 10, 3, 14, 52, tzinfo=datetime.timezone.utc), 'commenter': 'conradsnicta', 'type': 'User'}, {'comment_id': 685901024, 'comment_body': 'Yes, we did not handle the sparse matrices yet. We would like to create a one load function and handle both of them', 'comment_created': datetime.datetime(2021, 8, 10, 10, 39, 55, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 685903031, 'comment_body': 'Yeah, this is the strategy we are following here.', 'comment_created': datetime.datetime(2021, 8, 10, 10, 42, 58, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 687189423, 'comment_body': 'It was looking right in my editor(Vim).\r\nI added the tab settings as mentioned on the mlpack style guidelines page.\r\nAlso reindented the part. I hope it works.\r\n', 'comment_created': datetime.datetime(2021, 8, 11, 21, 2, 26, tzinfo=datetime.timezone.utc), 'commenter': 'heisenbuug', 'type': 'User'}, {'comment_id': 687311054, 'comment_body': ""I can't exactly remember why I added that, but I think you are right.\r\nIt seems we don't need it here."", 'comment_created': datetime.datetime(2021, 8, 12, 1, 55, 13, tzinfo=datetime.timezone.utc), 'commenter': 'heisenbuug', 'type': 'User'}, {'comment_id': 688281059, 'comment_body': 'This worked!!! Thanks @conradsnicta ', 'comment_created': datetime.datetime(2021, 8, 13, 6, 42, 29, tzinfo=datetime.timezone.utc), 'commenter': 'heisenbuug', 'type': 'User'}, {'comment_id': 688281600, 'comment_body': 'Done!!\r\n', 'comment_created': datetime.datetime(2021, 8, 13, 6, 43, 40, tzinfo=datetime.timezone.utc), 'commenter': 'heisenbuug', 'type': 'User'}, {'comment_id': 688918039, 'comment_body': 'Indentation', 'comment_created': datetime.datetime(2021, 8, 14, 11, 19, 36, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 688918236, 'comment_body': 'Indentation', 'comment_created': datetime.datetime(2021, 8, 14, 11, 20, 36, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 688918244, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 8, 14, 11, 20, 51, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 688918273, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 8, 14, 11, 21, 10, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 688918276, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 8, 14, 11, 21, 16, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 688918418, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 8, 14, 11, 22, 3, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 688918424, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 8, 14, 11, 22, 9, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 688918455, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 8, 14, 11, 22, 18, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 688918467, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 8, 14, 11, 22, 36, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 688918471, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 8, 14, 11, 22, 45, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 688918488, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 8, 14, 11, 22, 52, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 688918497, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 8, 14, 11, 23, 6, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 688918551, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 8, 14, 11, 23, 35, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 688918556, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 8, 14, 11, 23, 49, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 688918636, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 8, 14, 11, 24, 44, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 688918670, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 8, 14, 11, 24, 55, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 688918713, 'comment_body': 'Would you move these two functions to the start of the file :+1: ', 'comment_created': datetime.datetime(2021, 8, 14, 11, 25, 27, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 688918765, 'comment_body': '@heisenbuug There is still an indentation error here, would you fix it locally.', 'comment_created': datetime.datetime(2021, 8, 14, 11, 26, 35, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 688918886, 'comment_body': 'Would you add a Doxygen compatible comments here, with params and everything?', 'comment_created': datetime.datetime(2021, 8, 14, 11, 27, 59, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 688919383, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 8, 14, 11, 32, 46, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 688919519, 'comment_body': ""```suggestion\r\n  template<bool isNumeric>\r\n  inline std::pair<size_t, size_t> GetMatrixSize(std::fstream& f,\r\n                                                 const char delim = ',')\r\n```"", 'comment_created': datetime.datetime(2021, 8, 14, 11, 34, 23, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 688919661, 'comment_body': 'You need to inline this function, and add proper documentations', 'comment_created': datetime.datetime(2021, 8, 14, 11, 35, 22, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 688919755, 'comment_body': 'Why this function is private?', 'comment_created': datetime.datetime(2021, 8, 14, 11, 36, 7, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 688919813, 'comment_body': 'Also, this one, is there any reason to make them private?', 'comment_created': datetime.datetime(2021, 8, 14, 11, 36, 29, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 688919867, 'comment_body': 'This one is still open', 'comment_created': datetime.datetime(2021, 8, 14, 11, 37, 5, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 688919919, 'comment_body': '```suggestion\r\n#ifdef  _WIN32 // Always open in binary mode on Windows.\r\n```', 'comment_created': datetime.datetime(2021, 8, 14, 11, 37, 37, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 688919922, 'comment_body': '```suggestion\r\n#else\r\n```', 'comment_created': datetime.datetime(2021, 8, 14, 11, 37, 47, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 688919950, 'comment_body': '```suggestion\r\n#endif\r\n```', 'comment_created': datetime.datetime(2021, 8, 14, 11, 37, 57, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 688919965, 'comment_body': '```suggestion\r\n#ifndef ARMA_USE_HDF5\r\n```', 'comment_created': datetime.datetime(2021, 8, 14, 11, 38, 10, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 688919976, 'comment_body': '```suggestion\r\n#endif\r\n```', 'comment_created': datetime.datetime(2021, 8, 14, 11, 38, 19, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 688920363, 'comment_body': 'What does this function do and where it has been declared?', 'comment_created': datetime.datetime(2021, 8, 14, 11, 41, 55, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 688920601, 'comment_body': '@heisenbuug it seems that there is a specific header manipulation related to sparse matrices, @conradsnicta @rcurtin Do you think we can remove this one? Or it should stay here?\r\n@heisenbuug Let me know if you bring back this function, would all tests error related to sparse matrices would pass?', 'comment_created': datetime.datetime(2021, 8, 14, 11, 44, 28, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 688920641, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 8, 14, 11, 44, 55, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 688920660, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 8, 14, 11, 45, 29, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 688920696, 'comment_body': '```suggestion\r\n  bool load_okay = f.good();\r\n  f.clear();\r\n  std::pair<size_t, size_t> mat_size = GetMatrixSize(f);\r\n  x.zeros(mat_size.first, mat_size.second);\r\n  size_t row = 0;\r\n```', 'comment_created': datetime.datetime(2021, 8, 14, 11, 46, 1, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 688920709, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 8, 14, 11, 46, 19, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 689282146, 'comment_body': ""They were already private from the start in the old parser, so I haven't changed them."", 'comment_created': datetime.datetime(2021, 8, 16, 6, 58, 16, tzinfo=datetime.timezone.utc), 'commenter': 'heisenbuug', 'type': 'User'}, {'comment_id': 689284371, 'comment_body': ""It's in the same [file](https://github.com/mlpack/mlpack/blob/3be9474388a42f74be0f0119346080a539a05e6b/src/mlpack/core/data/load_impl.hpp#L63).\r\nIt just transposes the matrix and throws an exception if the operation failed for some reason."", 'comment_created': datetime.datetime(2021, 8, 16, 7, 2, 49, tzinfo=datetime.timezone.utc), 'commenter': 'heisenbuug', 'type': 'User'}, {'comment_id': 689300777, 'comment_body': ""I don't think just bringing back the function will do.\r\nIf you remember our issue was that it was always\r\nentering the `Load()` which was intended for dense\r\nmatrix.\r\n\r\nWith conrad's solution, we handed the `csv` parsing\r\nfor the sparse matrix but the logic for all other file types is still\r\nin that `Load()`. "", 'comment_created': datetime.datetime(2021, 8, 16, 7, 33, 33, tzinfo=datetime.timezone.utc), 'commenter': 'heisenbuug', 'type': 'User'}, {'comment_id': 689585730, 'comment_body': '> @heisenbuug Let me know if you bring back this function, would all tests error related to sparse matrices would pass?\r\n\r\nEven after adding back that function, tests are failing in the same way. ', 'comment_created': datetime.datetime(2021, 8, 16, 14, 26, 20, tzinfo=datetime.timezone.utc), 'commenter': 'heisenbuug', 'type': 'User'}, {'comment_id': 693386058, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 8, 21, 18, 27, 14, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 693386186, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 8, 21, 18, 28, 20, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 693386392, 'comment_body': 'You need to check the indentation here, it should be two spaces ', 'comment_created': datetime.datetime(2021, 8, 21, 18, 30, 18, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 693386599, 'comment_body': 'I am not sure if the indentation is wrong here, would you check please?', 'comment_created': datetime.datetime(2021, 8, 21, 18, 32, 19, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 693386651, 'comment_body': 'Just recalling on this one too :+1: ', 'comment_created': datetime.datetime(2021, 8, 21, 18, 32, 55, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 693386892, 'comment_body': 'Would you check the indentation here, please?', 'comment_created': datetime.datetime(2021, 8, 21, 18, 35, 38, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 693386923, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 8, 21, 18, 35, 48, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 693387140, 'comment_body': '```suggestion\r\n  // Functions for Numeric Parser\r\n```', 'comment_created': datetime.datetime(2021, 8, 21, 18, 37, 58, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 693387262, 'comment_body': 'Indentation issues.', 'comment_created': datetime.datetime(2021, 8, 21, 18, 39, 19, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 693387296, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 8, 21, 18, 39, 56, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 693387376, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 8, 21, 18, 40, 18, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 693387387, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 8, 21, 18, 40, 25, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 693387423, 'comment_body': '```suggestion\r\n   * Calculate number of columns in each row\r\n```', 'comment_created': datetime.datetime(2021, 8, 21, 18, 40, 47, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 693387448, 'comment_body': '```suggestion\r\n   * and assign the value to the col. This function\r\n```', 'comment_created': datetime.datetime(2021, 8, 21, 18, 41, 18, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 693447278, 'comment_body': 'It is two spaces, I counted the spaces.\r\nIt is showing 2 spaces in my editor.', 'comment_created': datetime.datetime(2021, 8, 22, 5, 58, 36, tzinfo=datetime.timezone.utc), 'commenter': 'heisenbuug', 'type': 'User'}, {'comment_id': 693447382, 'comment_body': 'Same here, it is showing correctly in my editor.\r\nAny idea why this is happening?\r\n', 'comment_created': datetime.datetime(2021, 8, 22, 5, 59, 57, tzinfo=datetime.timezone.utc), 'commenter': 'heisenbuug', 'type': 'User'}, {'comment_id': 696504828, 'comment_body': 'I believe there are some indentation issues here', 'comment_created': datetime.datetime(2021, 8, 26, 10, 33, 21, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 697101078, 'comment_body': 'It is awesome that you added this!  Thank you for taking the time to do that. :+1:', 'comment_created': datetime.datetime(2021, 8, 27, 2, 7, 12, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 697101683, 'comment_body': '```suggestion\r\nThe above dataset will be represented as\r\n```', 'comment_created': datetime.datetime(2021, 8, 27, 2, 9, 13, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 697101909, 'comment_body': '```suggestion\r\n- `True` mapped to `0`\r\n- `False` mapped to `1`\r\n```\r\nThis will help it look a little nicer. :)  You might consider doing that for the names of classes too, like `DatasetMapper`, but, up to you. :+1:', 'comment_created': datetime.datetime(2021, 8, 27, 2, 9, 48, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 697102004, 'comment_body': '```suggestion\r\nTo use \\b DatasetMapper we have to call a specific overload of the `data::Load()` function.\r\n```', 'comment_created': datetime.datetime(2021, 8, 27, 2, 10, 4, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 697102055, 'comment_body': '```suggestion\r\n@section dimensions Dimensionality\r\n```', 'comment_created': datetime.datetime(2021, 8, 27, 2, 10, 14, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 697102372, 'comment_body': '```suggestion\r\nthen the dimensionality will be same as the number of rows in the dataset.\r\n```\r\nYou may want to use the term ""number of dimensions in the dataset"", because we transpose CSVs on load (but not all dataset types), so if you have a CSV, then the dimensionality ends up being the number of *columns* in the CSV.  We maybe can avoid this detail just by saying the dimensionality will be the same as what\'s in the data file. :+1:', 'comment_created': datetime.datetime(2021, 8, 27, 2, 11, 18, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 697102469, 'comment_body': ""```suggestion\r\nstd::cout << info.Dimensionality();\r\n```\r\nCorrect me if I'm wrong, but I think it should be `Dimensionality()`. :+1:"", 'comment_created': datetime.datetime(2021, 8, 27, 2, 11, 32, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 697102573, 'comment_body': 'It might be worth referring to these as their C++ type, which is `data::Datatype::categorical`, I think.', 'comment_created': datetime.datetime(2021, 8, 27, 2, 11, 52, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 697102701, 'comment_body': '```suggestion\r\n\\c Type(size_t dimension) takes an argument dimension which is basically the row\r\n```\r\nMaybe \\c for code here?  I suppose \\b is fine too, your call, this is just a suggestion. :)', 'comment_created': datetime.datetime(2021, 8, 27, 2, 12, 14, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 697102916, 'comment_body': 'I\'d also suggest being exact in the documentation, not saying it\'s ""basically"" something---after all, the `dimension` parameter is just the index of the dimension we want the type of.', 'comment_created': datetime.datetime(2021, 8, 27, 2, 12, 48, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 697103169, 'comment_body': ""Technically it returns an `enum`, so we should probably say it returns `Datatype::categorical` or `Datatype::numeric` (those can be casted to `size_t` like you pointed out, and that's what happens when you print with `cout`, but it may make code clearer to use the logical names)."", 'comment_created': datetime.datetime(2021, 8, 27, 2, 13, 32, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 697103320, 'comment_body': '```suggestion\r\nIf the type of a dimension is categorical, then during loading, each unique token in that dimension will be mapped to an integer starting\r\n```\r\n(This is just a little more verbose but I think maybe it could be helpful.)', 'comment_created': datetime.datetime(2021, 8, 27, 2, 14, 3, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 697103455, 'comment_body': ""This is awesome!  Thank you so much for adding it---it's great to have this documentation available."", 'comment_created': datetime.datetime(2021, 8, 27, 2, 14, 26, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 697103554, 'comment_body': '```suggestion\r\n    default:                    return """";\r\n```\r\nTiny spacing fix so it all lines up. :)', 'comment_created': datetime.datetime(2021, 8, 27, 2, 14, 51, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 697103771, 'comment_body': '```suggestion\r\n                    const std::string& filename);\r\n```\r\nLooks like this one is still off a space or two. :)', 'comment_created': datetime.datetime(2021, 8, 27, 2, 15, 29, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 697105027, 'comment_body': '```suggestion\r\n            << info.Dimensionality() << "", but data has dimensionality ""\r\n            << rows;\r\n```', 'comment_created': datetime.datetime(2021, 8, 27, 2, 18, 57, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 697105063, 'comment_body': '```suggestion\r\n     // Remove whitespaces from either side\r\n```', 'comment_created': datetime.datetime(2021, 8, 27, 2, 19, 2, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 697105126, 'comment_body': ""```suggestion\r\n    // If it's an empty line decrease cols and break.\r\n```\r\nThis comment seems short enough that it can fit on one line. :)"", 'comment_created': datetime.datetime(2021, 8, 27, 2, 19, 16, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 697105573, 'comment_body': 'Alternately, you could just avoid incrementing `cols` until after this check.  (Or, move this check to the start of the loop?)  Whichever way works just fine (including how you have it now).', 'comment_created': datetime.datetime(2021, 8, 27, 2, 20, 30, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 697105758, 'comment_body': '```suggestion\r\n        << info.Dimensionality() << "", but data has dimensionality ""\r\n        << rows;\r\n```', 'comment_created': datetime.datetime(2021, 8, 27, 2, 20, 55, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 697105869, 'comment_body': '```suggestion\r\n                                DatasetMapper<PolicyType>& infoSet)\r\n```', 'comment_created': datetime.datetime(2021, 8, 27, 2, 21, 22, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 697105926, 'comment_body': '```suggestion\r\n          << col << "") on line "" << row << ""; should be "" << cols\r\n          << "" dimensions."";\r\n```', 'comment_created': datetime.datetime(2021, 8, 27, 2, 21, 32, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 697106544, 'comment_body': ""I'm surprised the style checker didn't have an issue with this.  It's tedious but if you're willing to change it to, e.g., `fnRows` and `fnCols` to match mlpack's style, I'd appreciate it.  (I'm also happy to take care of it too, just let me know.)"", 'comment_created': datetime.datetime(2021, 8, 27, 2, 23, 23, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 697107039, 'comment_body': 'If `ConvertToken()` fails, should we issue a warning or set `load_okay` to `false` or something?', 'comment_created': datetime.datetime(2021, 8, 27, 2, 25, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 697107108, 'comment_body': '```suggestion\r\nnamespace mlpack {\r\nnamespace data {\r\n```', 'comment_created': datetime.datetime(2021, 8, 27, 2, 25, 18, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 697107284, 'comment_body': '```suggestion\r\n```\r\nNo need for blank lines at the end of the file. :)', 'comment_created': datetime.datetime(2021, 8, 27, 2, 25, 46, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 697107352, 'comment_body': '```suggestion\r\nnamespace mlpack {\r\nnamespace data {\r\n```', 'comment_created': datetime.datetime(2021, 8, 27, 2, 25, 58, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 697107393, 'comment_body': '```suggestion\r\n  CoordASCII\t       //!< simple co-ordinate format for sparse matrices (indices start at zero)\r\n```', 'comment_created': datetime.datetime(2021, 8, 27, 2, 26, 6, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 697108208, 'comment_body': 'Want to add this to the list of tutorials in `doc/tutorials/tutorials.txt` too?', 'comment_created': datetime.datetime(2021, 8, 27, 2, 28, 30, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 698092278, 'comment_body': ""@rcurtin @heisenbuug I may be missing the context here, but in boolean logic isn't `False` usually mapped to `0` and True` mapped to `1` ?\r\n"", 'comment_created': datetime.datetime(2021, 8, 30, 0, 5, 25, tzinfo=datetime.timezone.utc), 'commenter': 'conradsnicta', 'type': 'User'}, {'comment_id': 698114347, 'comment_body': '@conradsnicta good point!  Actually the code @heisenbuug wrote is correct---basically, our categorical mapping will map the first non-numeric value it encounters to `0`, and in the example, `True` is seen first.  But, you are right, that is a little bit misleading.\r\n\r\n@heisenbuug do you think we can change the example so that the categorical values have `False` first then `True` second? (You could just switch them in the input CSV.)  Alternately, you could choose a different example than true/false to take away the ambiguity.', 'comment_created': datetime.datetime(2021, 8, 30, 1, 56, 8, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 698415476, 'comment_body': '@conradsnicta @rcurtin I actually was confused when saw the output but then when went through the comments in the code then realized that it will start mapping with 0.\r\n\r\nSo I kept the example in this way so that when user will face this issue while using the `DatasetMapper` they will realize it as well but I think should have added a comment about it here.\r\n\r\nShould I add a comment or just change the example? Cause if we change it, there is a chance that in future someone might ask about the same in an issue. Let me know.\r\n\r\nAlso, I will push the suggested changes soon, sorry for the delay.', 'comment_created': datetime.datetime(2021, 8, 30, 11, 43, 1, tzinfo=datetime.timezone.utc), 'commenter': 'heisenbuug', 'type': 'User'}, {'comment_id': 698824953, 'comment_body': 'Ah, yeah, that is another idea---if you add a note to clearly point out that we convert non-numeric values to integers in the order that we encounter them, that should solve the possible confusion too.', 'comment_created': datetime.datetime(2021, 8, 30, 21, 35, 55, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 698964848, 'comment_body': 'I will add it to `Method-specific Tutorials`? Or create a new section `Data Loading` and add it there?', 'comment_created': datetime.datetime(2021, 8, 31, 4, 0, 50, tzinfo=datetime.timezone.utc), 'commenter': 'heisenbuug', 'type': 'User'}, {'comment_id': 699270111, 'comment_body': ""It's not a `Method-specific Tutorial` (that's for, e.g., an algorithm in `methods/`); probably either `Introductory Tutorials` or `Advanced Tutorials` is the right place.  Your call. :+1:"", 'comment_created': datetime.datetime(2021, 8, 31, 12, 24, 19, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 699957140, 'comment_body': ""Okay I will change it to this\r\n```\r\nThere are two ways to initialize a DatasetMapper object.\r\n\r\n* First is to initialize the object and set each property yourself.\r\n\r\n* Second is to pass the object to Load() in which case mlpack will populate\r\nthe object. If we use the latter option then the dimensionality will be same\r\nas what's in the data file.\r\n```"", 'comment_created': datetime.datetime(2021, 9, 1, 7, 35, 10, tzinfo=datetime.timezone.utc), 'commenter': 'heisenbuug', 'type': 'User'}, {'comment_id': 700048768, 'comment_body': 'Okay, I replaced them with `mlpack::data::Datatype::...`', 'comment_created': datetime.datetime(2021, 9, 1, 9, 37, 14, tzinfo=datetime.timezone.utc), 'commenter': 'heisenbuug', 'type': 'User'}, {'comment_id': 700055294, 'comment_body': ""Yup, I will change those accordingly.\r\n\r\nI think somehow the style checker is not working.\r\n\r\nI think this directory is responsible for [style checking](https://github.com/mlpack/jenkins-conf/tree/master/linter), right?\r\nI will have a look here, I would love to explore Jenkins.\r\n\r\nJust let me know the right place.\r\n\r\nI think @zoq tried something but it didn't work I guess.\r\nThis is happening since the start of the summer."", 'comment_created': datetime.datetime(2021, 9, 1, 9, 45, 36, tzinfo=datetime.timezone.utc), 'commenter': 'heisenbuug', 'type': 'User'}, {'comment_id': 701316670, 'comment_body': ""@rcurtin I don't think this can ever fail, i.e. return `false`.\r\n\r\n[This](https://github.com/mlpack/mlpack/blob/933b68c2b30ca2bed06f1c6b41597674e117757e/src/mlpack/core/data/load_numeric_csv.hpp#L89) is the only condition that will fail `convert_token` and will make it return false.\r\n\r\nBut I don't think `str` can ever be equal to `nullptr`.\r\n`str` is [`const char* str = token.c_str()`](https://github.com/mlpack/mlpack/blob/933b68c2b30ca2bed06f1c6b41597674e117757e/src/mlpack/core/data/load_numeric_csv.hpp#L32) and I don't think `string::c_str()` ever returns a `nullptr`.\r\n\r\nFor [reference](https://stackoverflow.com/questions/45269038/could-stdstringc-str-ever-return-nullptr). I might be wrong let me know what you think. "", 'comment_created': datetime.datetime(2021, 9, 2, 18, 13, 3, tzinfo=datetime.timezone.utc), 'commenter': 'heisenbuug', 'type': 'User'}, {'comment_id': 702051188, 'comment_body': ""Yep, exactly, it should run `lint.sh` and then post the output in Jenkins: https://github.com/mlpack/jenkins-conf/blob/master/linter/lint.sh\r\n\r\nMaybe there is some bug or something causing it to not run right now; I'm not sure."", 'comment_created': datetime.datetime(2021, 9, 3, 17, 13, 7, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 702137362, 'comment_body': ""Should we return `false` when neither of the following code blocks succeed though?\r\n\r\n```c++\r\n  // Convert the token into ccorrect type.\r\n  // If we have a eT as unsigned int,\r\n  // it will convert all negative numbers to 0\r\n  if (std::is_floating_point<eT>::value)\r\n  {\r\n    val = eT(std::strtod(str, &endptr));\r\n  }\r\n  else if (std::is_integral<eT>::value)\r\n  {\r\n    if (std::is_signed<eT>::value)\r\n      val = eT(std::strtoll(str, &endptr, 10));\r\n    else\r\n    {\r\n      if (str[0] == '-')\r\n      {\r\n        val = eT(0);\r\n        return true;\r\n      }\r\n      val = eT(std::strtoull(str, &endptr, 10));\r\n    }\r\n  }\r\n```\r\n\r\nWhat I mean is, should we have an `else` like this?\r\n\r\n```\r\nelse\r\n{\r\n  // Conversion failed, so return false.\r\n  return false;\r\n}\r\n```"", 'comment_created': datetime.datetime(2021, 9, 3, 20, 8, 22, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 710103321, 'comment_body': '```suggestion\r\n   * Calculate the number of columns in each row.\r\n```', 'comment_created': datetime.datetime(2021, 9, 16, 13, 11, 47, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 710103891, 'comment_body': '```suggestion\r\n  // Functions for Categorical Parse.\r\n```', 'comment_created': datetime.datetime(2021, 9, 16, 13, 12, 28, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 710104837, 'comment_body': '```suggestion\r\n   * Calculate the number of columns in each row\r\n```', 'comment_created': datetime.datetime(2021, 9, 16, 13, 13, 36, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 710105120, 'comment_body': '```suggestion\r\n  // Functions common to both numeric & categorical parser.\r\n```', 'comment_created': datetime.datetime(2021, 9, 16, 13, 13, 55, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 710105421, 'comment_body': '```suggestion\r\n      // Get a row of data.\r\n```', 'comment_created': datetime.datetime(2021, 9, 16, 13, 14, 16, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 710105529, 'comment_body': '```suggestion\r\n      // Get number of columns based on the type of data.\r\n```', 'comment_created': datetime.datetime(2021, 9, 16, 13, 14, 24, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 710106109, 'comment_body': '```suggestion\r\n      // Throw an exception if the file is not opening.\r\n```', 'comment_created': datetime.datetime(2021, 9, 16, 13, 15, 2, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 710106767, 'comment_body': '```suggestion\r\n    // Clear format flag.\r\n```', 'comment_created': datetime.datetime(2021, 9, 16, 13, 15, 46, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 710107016, 'comment_body': '```suggestion\r\n  //! Delimiter char.\r\n```', 'comment_created': datetime.datetime(2021, 9, 16, 13, 16, 5, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 710107420, 'comment_body': '```suggestion\r\n  // Checks for +/-INF and NAN.\r\n  // Converts them to their equivalent representation\r\n  // from numeric_limits.\r\n```', 'comment_created': datetime.datetime(2021, 9, 16, 13, 16, 31, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 710107655, 'comment_body': '```suggestion\r\n  // it will convert all negative numbers to 0.\r\n```', 'comment_created': datetime.datetime(2021, 9, 16, 13, 16, 48, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 710108603, 'comment_body': '```suggestion\r\n  // If none of the above conditions was executed,\r\n  // then the conversion will fail.\r\n```', 'comment_created': datetime.datetime(2021, 9, 16, 13, 17, 50, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 710108812, 'comment_body': '```suggestion\r\n    // Parse the file line by line.\r\n```', 'comment_created': datetime.datetime(2021, 9, 16, 13, 18, 5, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 710108983, 'comment_body': '```suggestion\r\n      // Parse each line.\r\n```', 'comment_created': datetime.datetime(2021, 9, 16, 13, 18, 15, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 710113014, 'comment_body': '@heisenbuug I agree with @rcurtin on this point, if you are sure that the conversion will never fail, then there is no need to put the `else  {return false}`.', 'comment_created': datetime.datetime(2021, 9, 16, 13, 22, 34, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 710115019, 'comment_body': '```suggestion\r\n   * @param f fstream stream to open the data file.\r\n   * @param delim char delimiter charecter.\r\n```', 'comment_created': datetime.datetime(2021, 9, 16, 13, 24, 49, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 710115636, 'comment_body': '```suggestion\r\n   * @param lineStream a single row of data.\r\n   * @param col the number of columns in lineStream.\r\n   * @param delim the delimiter character.\r\n```', 'comment_created': datetime.datetime(2021, 9, 16, 13, 25, 29, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 710116067, 'comment_body': '```suggestion\r\n * @param str the string to be trimmed.\r\n```', 'comment_created': datetime.datetime(2021, 9, 16, 13, 25, 58, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 710116813, 'comment_body': '```suggestion\r\n  for (int i = str.size() - 1; i >= 0; i--)\r\n```', 'comment_created': datetime.datetime(2021, 9, 16, 13, 26, 50, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 710117265, 'comment_body': '```suggestion\r\n * @param str the string to be trimmed.\r\n * @param func function to determine the characters which should be trimmed.\r\n```', 'comment_created': datetime.datetime(2021, 9, 16, 13, 27, 20, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 710118097, 'comment_body': '```suggestion\r\n * @param type mlpack::FileType.\r\n```', 'comment_created': datetime.datetime(2021, 9, 16, 13, 28, 13, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 711433693, 'comment_body': ""So I think there are two issues here we should address---first, it's probably useful to have an `else` block like I pointed out in case neither `std::is_floating_point<eT>::value` nor `std::is_integral<eT>::value` are `true` (in this case, an invalid `eT` has been specified).\r\n\r\nSecond, as you pointed out, we definitely *can* have situations where `convert_token()` returns `false` because `strtod()` or `strtoll()` failed.  In these situations, we should probably have some error handling here, in `LoadNumericCSV()`.  In this case, we probably want to set `load_okay` to `false`, since the load did not happen successfully---there was a conversion failure.  We could also issue a message to `Log::Warn` indicating the failed token (and if possible, its position).\r\n\r\nDo you think we can fix that before merge?  Otherwise users might end up with their CSVs loading and appearing to succeed, but silently failing and putting 0s in place of invalid tokens (which is incorrect). :+1:"", 'comment_created': datetime.datetime(2021, 9, 18, 3, 24, 6, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 716779604, 'comment_body': '@heisenbuug would you handle these cases please, once this one is handled, I will merge this pull request', 'comment_created': datetime.datetime(2021, 9, 27, 15, 1, 6, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 716866219, 'comment_body': '@shrit\r\n* I already added a `false` condition at the end.\r\n```\r\nif (std::is_floating_point<eT>::value)\r\n{...}\r\nelse if (std::is_integral<eT>::value)\r\n{...}\r\n// If none of the above conditions was executed,\r\n// then the conversion will fail.\r\nelse\r\n  return false;\r\n```\r\n* @rcurtin the point you mentioned regarding `strtod()` or `strtoll()` is already handled. [`This`](https://github.com/mlpack/mlpack/blob/933b68c2b30ca2bed06f1c6b41597674e117757e/src/mlpack/core/data/load_numeric_csv.hpp#L89) line handles it.\r\nWhen conversion fails, `strtoll` `strtod` sets `endpt = str` and returns `0` as converted value.\r\n ', 'comment_created': datetime.datetime(2021, 9, 27, 16, 41, 39, tzinfo=datetime.timezone.utc), 'commenter': 'heisenbuug', 'type': 'User'}, {'comment_id': 720606016, 'comment_body': '@heisenbuug thanks for that clarification!  I had overlooked that.  Do you think you could add a comment indicating that that `endptr == str` check is to catch failed `strtod()` or `strtoll()` calls?\r\n\r\nThere is only one more thing---the block of code that calls `ConvertToken()` looks like this:\r\n\r\n```c++\r\n    while (lineStream.good())\r\n    {\r\n      // Parse each line.\r\n      std::getline(lineStream, token, \',\');\r\n\r\n      // This will handle loading of both dense and sparse.\r\n      // Initialize tmp_val of type eT with value 0.\r\n      eT tmp_val = eT(0);\r\n\r\n      if (ConvertToken<eT>(tmp_val, token))\r\n      {\r\n        x.at(row, col) = tmp_val;\r\n        ++col;\r\n      }\r\n    }\r\n```\r\n\r\nBut, if `ConvertToken()` fails, we aren\'t setting `load_okay` to `false` or printing a warning or anything like that.  So, even though we are properly catching when a conversion is failing in `ConvertToken()`, we might still report `load_okay` to be `true` incorrectly, even though conversion failed somewhere in the file.  I might suggest a block more like this:\r\n\r\n```c++\r\n    while (lineStream.good())\r\n    {\r\n      // Parse each line.\r\n      std::getline(lineStream, token, \',\');\r\n\r\n      // This will handle loading of both dense and sparse.\r\n      // Initialize tmp_val of type eT with value 0.\r\n      eT tmp_val = eT(0);\r\n\r\n      if (ConvertToken<eT>(tmp_val, token))\r\n      {\r\n        x.at(row, col) = tmp_val;\r\n        ++col;\r\n      }\r\n      else\r\n      {\r\n        // This error message could definitely be improved!  Ideally we could even print the token that failed to convert,\r\n        // plus the original position in the CSV file so the user can easily find and fix the file.\r\n        Log::Warn << ""Failed to load CSV at row "" << row << "", column "" << col << "" of matrix!"";\r\n        return false; // Terminate early if we failed to parse anything; there\'s no need to keep going.\r\n      }\r\n    }\r\n```\r\n\r\nAnyway, that is just an idea, so maybe you can adapt it into something better.\r\n\r\nI\'ll be gone for the next two weeks on vacation, so don\'t feel obligated to wait for another response from me.  Other than this issue plus minor style issues, I think everything in this PR looks great and I am very excited about it getting merged. :tada: ', 'comment_created': datetime.datetime(2021, 10, 2, 1, 27, 27, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 731120010, 'comment_body': 'Thanks for the fixes---this looks good to me now. :+1:', 'comment_created': datetime.datetime(2021, 10, 18, 16, 40, 33, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 731120915, 'comment_body': '```suggestion\r\n          << "") on line "" << col << ""; should be "" << rows << "" dimensions."";\r\n```\r\nLittle style fix :)', 'comment_created': datetime.datetime(2021, 10, 18, 16, 41, 50, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 731121676, 'comment_body': '```suggestion\r\n      extension(Extension(file)),\r\n      filename(file),\r\n      inFile(file)\r\n```\r\nThese are wrapped lines, so I think they should be doubly-indented. :)', 'comment_created': datetime.datetime(2021, 10, 18, 16, 42, 54, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 731122080, 'comment_body': '```suggestion\r\n    bool loadOkay = f.good();\r\n```\r\nNaming fix.', 'comment_created': datetime.datetime(2021, 10, 18, 16, 43, 27, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 731122188, 'comment_body': '```suggestion\r\n    while (f.good() && loadOkay)\r\n```', 'comment_created': datetime.datetime(2021, 10, 18, 16, 43, 36, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 731122315, 'comment_body': '```suggestion\r\n      size_t lineNCols = 0;\r\n```', 'comment_created': datetime.datetime(2021, 10, 18, 16, 43, 46, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 731122452, 'comment_body': '```suggestion\r\n      if (isNumeric)\r\n        NumericMatSize(lineStream, lineNCols, delim);\r\n      else\r\n        CategoricalMatSize(lineStream, lineNCols, delim);\r\n```', 'comment_created': datetime.datetime(2021, 10, 18, 16, 43, 57, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 731122769, 'comment_body': ""```suggestion\r\n      if (fnCols < lineNCols)\r\n        fnCols = lineNCols;\r\n```\r\nI know it's pedantic, but hopefully writing these all as suggestions makes it easy to apply. :)"", 'comment_created': datetime.datetime(2021, 10, 18, 16, 44, 21, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 731123848, 'comment_body': ""```suggestion\r\n    const char sigA = str[offset];\r\n    const char sigB = str[offset + 1];\r\n    const char sigC = str[offset + 2];\r\n\r\n    if (((sigA == 'i') || (sigA == 'I')) &&\r\n        ((sigB == 'n') || (sigB == 'N')) &&\r\n        ((sigC == 'f') || (sigC == 'F')))\r\n    {\r\n      val = neg ? -(std::numeric_limits<eT>\r\n                    ::infinity()) : std::numeric_limits<eT>::infinity();\r\n      return true;\r\n    }\r\n    else if (((sigA == 'n') || (sigA == 'N')) &&\r\n             ((sigB == 'a') || (sigB == 'A')) &&\r\n             ((sigC == 'n') || (sigC == 'N')))\r\n    {\r\n      val = std::numeric_limits<eT>::quiet_NaN();\r\n      return true;\r\n    }\r\n```\r\nMore naming fixes. :)"", 'comment_created': datetime.datetime(2021, 10, 18, 16, 45, 54, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 731124476, 'comment_body': '```suggestion\r\n  bool loadOkay = f.good();\r\n```', 'comment_created': datetime.datetime(2021, 10, 18, 16, 46, 41, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 731124864, 'comment_body': '```suggestion\r\n      eT tmpVal = eT(0);\r\n\r\n      if (ConvertToken<eT>(tmpVal, token))\r\n      {\r\n        x.at(row, col) = tmpVal;\r\n        ++col;\r\n      }\r\n```', 'comment_created': datetime.datetime(2021, 10, 18, 16, 47, 14, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 731124998, 'comment_body': '```suggestion\r\n  return loadOkay;\r\n```', 'comment_created': datetime.datetime(2021, 10, 18, 16, 47, 24, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 731125744, 'comment_body': '```suggestion\r\ninline void LoadCSV::NumericMatSize(std::stringstream& lineStream,\r\n                                    size_t& col,\r\n                                    const char delim)\r\n```\r\nThis line was longer than 80 characters. :)', 'comment_created': datetime.datetime(2021, 10, 18, 16, 48, 22, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 731126078, 'comment_body': '```suggestion\r\n        Log::Warn << ""Failed to convert token "" << token << "", at row "" << row\r\n            << "", column "" << col << "" of matrix!"";\r\n```\r\nThis should fit into 80 characters now. :+1:', 'comment_created': datetime.datetime(2021, 10, 18, 16, 48, 49, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 731126674, 'comment_body': '```suggestion\r\n      std::move(str) : str.substr(startIndex, endIndex - startIndex + 1);\r\n```\r\nJust a fix so that the wrapped line is doubly-indented. :+1:  Also, I think the ""else"" condition will all fit on one line.', 'comment_created': datetime.datetime(2021, 10, 18, 16, 49, 34, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 731126926, 'comment_body': '```suggestion\r\n      std::move(str) : str.substr(startIndex, endIndex - startIndex + 1);\r\n```', 'comment_created': datetime.datetime(2021, 10, 18, 16, 49, 51, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 731495234, 'comment_body': 'Using std::move() may not work as intended with the ternary conditional operator (the `?:` operator, as in `A ? B : C`).  This operator may do a whole bunch of conversions underneath: https://en.cppreference.com/w/cpp/language/operator_other  \r\n\r\nI got burned a while back using `?:` indiscriminately, resulting in reduced performance.\r\n\r\nIn essence, you cannot trust the `?:` operator to do the ""right""/intended thing, as it\'s likely to try to convert B and C to have the same type.  The number of rules applied to evaluating `A ? B : C` is ridiculous.  It\'s only useful for simple expressions that don\'t involve varying types (eg. int). Using an `if/else` block is preferred otherwise.\r\n\r\n', 'comment_created': datetime.datetime(2021, 10, 19, 4, 59, 45, tzinfo=datetime.timezone.utc), 'commenter': 'conradsnicta', 'type': 'User'}, {'comment_id': 736224946, 'comment_body': 'Wow, thanks @conradsnicta. Never thought that ternary operator in some cases might reduce performance.\r\nI will change it to a simple `if/else`.\r\n\r\n@rcurtin will it make sense to add a comment about this?', 'comment_created': datetime.datetime(2021, 10, 26, 7, 23, 26, tzinfo=datetime.timezone.utc), 'commenter': 'heisenbuug', 'type': 'User'}, {'comment_id': 737044745, 'comment_body': ""@heisenbuug up to you---I think it's fine either way.  It can't hurt to add a comment."", 'comment_created': datetime.datetime(2021, 10, 27, 1, 56, 59, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 741408617, 'comment_body': '```suggestion\r\nIf the type of a dimension is `data::Datatype::categorical`, then during\r\n```', 'comment_created': datetime.datetime(2021, 11, 2, 19, 39, 38, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 741409112, 'comment_body': '```suggestion\r\nmappings in that dimension, if the dimension is a number or there are no mappings then it\r\n```', 'comment_created': datetime.datetime(2021, 11, 2, 19, 40, 33, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 741410794, 'comment_body': '```suggestion\r\ninline void LoadCSV::CategoricalMatSize(\r\n    std::stringstream& lineStream, size_t& col, const char delim)\r\n```', 'comment_created': datetime.datetime(2021, 11, 2, 19, 43, 15, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 741411709, 'comment_body': '```suggestion\r\n  // we will pass everything as string through MapString().  This might be useful\r\n```\r\n\r\nNot sure the comment is correct now.', 'comment_created': datetime.datetime(2021, 11, 2, 19, 44, 41, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 741412620, 'comment_body': '```suggestion\r\n     // Remove whitespaces from either side.\r\n```', 'comment_created': datetime.datetime(2021, 11, 2, 19, 46, 12, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 741412736, 'comment_body': ""```suggestion\r\n    // If it's an empty line decrease cols and break.\r\n```"", 'comment_created': datetime.datetime(2021, 11, 2, 19, 46, 25, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 741413398, 'comment_body': '```suggestion\r\n  // we will pass everything as string through MapString().  This might be useful\r\n```\r\n\r\nAgain not sure it makes sense.', 'comment_created': datetime.datetime(2021, 11, 2, 19, 47, 24, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 741413805, 'comment_body': '```suggestion\r\n    // Remove whitespaces from either side.\r\n```', 'comment_created': datetime.datetime(2021, 11, 2, 19, 47, 59, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 741414209, 'comment_body': '```suggestion\r\n        // Remove whitespace from either side.\r\n```', 'comment_created': datetime.datetime(2021, 11, 2, 19, 48, 35, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 741414642, 'comment_body': '```suggestion\r\n    // Remove whitespaces from either side.\r\n```', 'comment_created': datetime.datetime(2021, 11, 2, 19, 49, 13, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 741414844, 'comment_body': '```suggestion\r\n      // Remove whitespaces from either side.\r\n```', 'comment_created': datetime.datetime(2021, 11, 2, 19, 49, 31, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 741415026, 'comment_body': '```suggestion\r\n        // First part of the string.\r\n```', 'comment_created': datetime.datetime(2021, 11, 2, 19, 49, 46, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 741415367, 'comment_body': '```suggestion\r\n    // Remove whitespaces from either side.\r\n```', 'comment_created': datetime.datetime(2021, 11, 2, 19, 50, 18, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 741415484, 'comment_body': '```suggestion\r\n      // Remove whitespace from either side.\r\n```', 'comment_created': datetime.datetime(2021, 11, 2, 19, 50, 28, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 741415744, 'comment_body': '```suggestion\r\n  // Fill empty data points with 0.\r\n```', 'comment_created': datetime.datetime(2021, 11, 2, 19, 50, 55, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 741418063, 'comment_body': '```suggestion\r\n * from both the sides of a string. If input is a string\r\n```', 'comment_created': datetime.datetime(2021, 11, 2, 19, 54, 38, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 741419353, 'comment_body': 'I guess the specialized Trim function above is faster? Unless I think we can replicate the Trim function with this one.', 'comment_created': datetime.datetime(2021, 11, 2, 19, 56, 42, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}]","[{'commit_sha': '1c48343e3ea585ab0f06222ae18ff836cb2137cc', 'committer_username': 'heisenbuug', 'committer_name': 'Gopi M Tatiraju', 'committer_email': 'tgopimanohar@gmail.com', 'commit_date': datetime.datetime(2017, 10, 20, 23, 37, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe70a12eab8a3bacc41edfe14df85db1dc03a25a', 'committer_username': 'heisenbuug', 'committer_name': 'Gopi M Tatiraju', 'committer_email': 'tgopimanohar@gmail.com', 'commit_date': datetime.datetime(2017, 10, 20, 23, 37, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0919664c36e3d300a45cdc9c7eafb2c8a637cc73', 'committer_username': 'heisenbuug', 'committer_name': 'Gopi M Tatiraju', 'committer_email': 'tgopimanohar@gmail.com', 'commit_date': datetime.datetime(2017, 10, 20, 23, 37, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa649bdddf5e64ca23c1809eba7e23cb99da3165', 'committer_username': 'heisenbuug', 'committer_name': 'Gopi M Tatiraju', 'committer_email': 'tgopimanohar@gmail.com', 'commit_date': datetime.datetime(2017, 10, 20, 23, 37, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08b0d1637b96cef62461c3ee9dcc8aaaee2f34cd', 'committer_username': 'heisenbuug', 'committer_name': 'Gopi M Tatiraju', 'committer_email': 'tgopimanohar@gmail.com', 'commit_date': datetime.datetime(2017, 10, 20, 23, 37, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b672a7e5e5c9af689369ce252305771ad8dc9a3', 'committer_username': 'heisenbuug', 'committer_name': 'Gopi M Tatiraju', 'committer_email': 'tgopimanohar@gmail.com', 'commit_date': datetime.datetime(2017, 10, 20, 23, 37, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a8534e89386c2512520e35a2c6927d9b32927e67', 'committer_username': 'heisenbuug', 'committer_name': 'Gopi M Tatiraju', 'committer_email': 'tgopimanohar@gmail.com', 'commit_date': datetime.datetime(2017, 10, 20, 23, 37, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74ad69cdaeac0ad69a5b970707268f5f71fcb3d7', 'committer_username': 'heisenbuug', 'committer_name': 'Gopi M Tatiraju', 'committer_email': 'tgopimanohar@gmail.com', 'commit_date': datetime.datetime(2017, 10, 20, 23, 37, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e2e25d3dab7355ed97a1f07617a2f1cf5bd52e42', 'committer_username': 'heisenbuug', 'committer_name': 'Gopi M Tatiraju', 'committer_email': 'tgopimanohar@gmail.com', 'commit_date': datetime.datetime(2017, 10, 20, 23, 37, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '89e2942760d70916bb79eab3a3a21a9254a91d86', 'committer_username': 'heisenbuug', 'committer_name': 'Gopi M Tatiraju', 'committer_email': 'tgopimanohar@gmail.com', 'commit_date': datetime.datetime(2017, 10, 20, 23, 37, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '994934b19aa171e5754362a161bfa9878f09b05c', 'committer_username': 'heisenbuug', 'committer_name': 'Gopi M Tatiraju', 'committer_email': 'tgopimanohar@gmail.com', 'commit_date': datetime.datetime(2017, 10, 20, 23, 37, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e246209a55d4993707d35ecc693982630e488f7a', 'committer_username': 'heisenbuug', 'committer_name': 'Gopi M Tatiraju', 'committer_email': 'tgopimanohar@gmail.com', 'commit_date': datetime.datetime(2017, 10, 20, 23, 37, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22ebc35ffabba2b58cc6d42b5358ac2f1f19a967', 'committer_username': 'heisenbuug', 'committer_name': 'Gopi M Tatiraju', 'committer_email': 'tgopimanohar@gmail.com', 'commit_date': datetime.datetime(2017, 10, 20, 23, 37, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7456b1a3b226b7dfd81c5f58199c0712e492784', 'committer_username': 'heisenbuug', 'committer_name': 'Gopi M Tatiraju', 'committer_email': 'tgopimanohar@gmail.com', 'commit_date': datetime.datetime(2017, 10, 20, 23, 37, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ff9b3cf6f56d25fa0fbda50418618bfd8158ec8', 'committer_username': 'heisenbuug', 'committer_name': 'Gopi M Tatiraju', 'committer_email': 'tgopimanohar@gmail.com', 'commit_date': datetime.datetime(2017, 10, 20, 23, 37, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c6aa1be6d99808f1bc540a6367463d54debf3b2', 'committer_username': 'heisenbuug', 'committer_name': 'Gopi M Tatiraju', 'committer_email': 'tgopimanohar@gmail.com', 'commit_date': datetime.datetime(2017, 10, 20, 23, 37, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad1a49555b875ca0544ae9e53e9814f922d5c983', 'committer_username': 'heisenbuug', 'committer_name': 'Gopi M Tatiraju', 'committer_email': 'tgopimanohar@gmail.com', 'commit_date': datetime.datetime(2017, 10, 20, 23, 37, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a52c63098bd86eec39a12f3ba54946ae42f6de6', 'committer_username': 'heisenbuug', 'committer_name': 'Gopi M Tatiraju', 'committer_email': 'tgopimanohar@gmail.com', 'commit_date': datetime.datetime(2017, 10, 20, 23, 37, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4dc7fec2b9a02f8e332929c09db063674b15a3af', 'committer_username': 'heisenbuug', 'committer_name': 'Gopi M Tatiraju', 'committer_email': 'tgopimanohar@gmail.com', 'commit_date': datetime.datetime(2017, 10, 20, 23, 37, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cbdab31eefee57e4ba8bcaa69d4e31e2c2d6e753', 'committer_username': 'heisenbuug', 'committer_name': 'Gopi M Tatiraju', 'committer_email': 'tgopimanohar@gmail.com', 'commit_date': datetime.datetime(2017, 10, 20, 23, 37, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '739e212654431ed185ce263220e310ed5479a359', 'committer_username': 'heisenbuug', 'committer_name': 'Gopi M Tatiraju', 'committer_email': 'tgopimanohar@gmail.com', 'commit_date': datetime.datetime(2017, 10, 20, 23, 37, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f4cbba7636086062eebc017b36c3760fcd54770', 'committer_username': 'heisenbuug', 'committer_name': 'Gopi M Tatiraju', 'committer_email': 'tgopimanohar@gmail.com', 'commit_date': datetime.datetime(2017, 10, 20, 23, 37, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '585dbd9d6f6d5e3ace99735dfa0d02b15d67056e', 'committer_username': 'heisenbuug', 'committer_name': 'Gopi M Tatiraju', 'committer_email': 'tgopimanohar@gmail.com', 'commit_date': datetime.datetime(2017, 10, 20, 23, 37, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3907bb2485d2d5f3e5f8839bb385487341552e6', 'committer_username': 'heisenbuug', 'committer_name': 'Gopi M Tatiraju', 'committer_email': 'tgopimanohar@gmail.com', 'commit_date': datetime.datetime(2017, 10, 20, 23, 37, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d6616f619348c59b1531785d454c016e699e74f', 'committer_username': 'heisenbuug', 'committer_name': 'Gopi M Tatiraju', 'committer_email': 'tgopimanohar@gmail.com', 'commit_date': datetime.datetime(2017, 10, 20, 23, 37, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68281ea20f01fd4b7761822e671663f500efd88b', 'committer_username': 'heisenbuug', 'committer_name': 'Gopi M Tatiraju', 'committer_email': 'tgopimanohar@gmail.com', 'commit_date': datetime.datetime(2017, 10, 20, 23, 37, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd08b4e4885ee9eef9e2201b4d0ae63227be8235e', 'committer_username': 'heisenbuug', 'committer_name': 'Gopi M Tatiraju', 'committer_email': 'tgopimanohar@gmail.com', 'commit_date': datetime.datetime(2017, 10, 20, 23, 37, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '159e177312c3cea51323b93f2d42aad04d011bf4', 'committer_username': 'heisenbuug', 'committer_name': 'Gopi M Tatiraju', 'committer_email': 'tgopimanohar@gmail.com', 'commit_date': datetime.datetime(2017, 10, 20, 23, 37, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '195c31aeabffe5dd66bd85854321074893e1a41e', 'committer_username': 'heisenbuug', 'committer_name': 'Gopi M Tatiraju', 'committer_email': 'tgopimanohar@gmail.com', 'commit_date': datetime.datetime(2017, 10, 20, 23, 37, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c2290fa7629b6ffe1696eb3284d4ddce96858df2', 'committer_username': 'heisenbuug', 'committer_name': 'Gopi M Tatiraju', 'committer_email': 'tgopimanohar@gmail.com', 'commit_date': datetime.datetime(2017, 10, 20, 23, 37, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '409d7ff59e28913feb1b130b1f0457b4264d779c', 'committer_username': 'heisenbuug', 'committer_name': 'Gopi M Tatiraju', 'committer_email': 'tgopimanohar@gmail.com', 'commit_date': datetime.datetime(2017, 10, 20, 23, 37, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f7f769f8c3e9a0ed0165e7ab8d409e57508ba66', 'committer_username': 'heisenbuug', 'committer_name': 'Gopi M Tatiraju', 'committer_email': 'tgopimanohar@gmail.com', 'commit_date': datetime.datetime(2017, 10, 20, 23, 37, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '41f2ef98d38e00c7967e588a9d5c55e463ec0637', 'committer_username': 'heisenbuug', 'committer_name': 'Gopi M Tatiraju', 'committer_email': 'tgopimanohar@gmail.com', 'commit_date': datetime.datetime(2017, 10, 20, 23, 37, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae25a2635c4bea2c145f795933f90e017f249ca4', 'committer_username': 'heisenbuug', 'committer_name': 'Gopi M Tatiraju', 'committer_email': 'tgopimanohar@gmail.com', 'commit_date': datetime.datetime(2017, 10, 20, 23, 37, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e2131127792d59d45cdae794e4847fefd67d9d7d', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f4ee4256eb73c027e29b04c4a4a0384d2aa5186', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9f7c8244922b02365567ddbfb286f73830e6707', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7eac0dcf27da039f83c4a2e52c1490496095ff59', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c937e1914108bea0712b05011feda4470c25f56', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4f79d4f4a0fb230af3856e88e7496b5091ed68d', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea95bb9784d7e7418f2ac818e1a9e59f8a9aa76e', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '94265453110c5020e243ab59ebfa6bdad050f1bf', 'committer_username': 'heisenbuug', 'committer_name': 'Gopi M Tatiraju', 'committer_email': 'tgopimanohar@gmail.com', 'commit_date': datetime.datetime(2017, 10, 20, 23, 37, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4402e5e2f2a27537dc5512b347ee0d3ff7e9ec51', 'committer_username': 'heisenbuug', 'committer_name': 'Gopi M Tatiraju', 'committer_email': 'tgopimanohar@gmail.com', 'commit_date': datetime.datetime(2017, 10, 20, 23, 37, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb251ab25ba6884a00c257a007cc538843fc4ae1', 'committer_username': 'heisenbuug', 'committer_name': 'Gopi M Tatiraju', 'committer_email': 'tgopimanohar@gmail.com', 'commit_date': datetime.datetime(2017, 10, 20, 23, 37, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '43b53c0cf9f0cee927361225ed92d69a429a7e74', 'committer_username': 'heisenbuug', 'committer_name': 'Gopi M Tatiraju', 'committer_email': 'tgopimanohar@gmail.com', 'commit_date': datetime.datetime(2017, 10, 20, 23, 37, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f710911fd2edb4c9ca582e1bc4c258893227bdf', 'committer_username': 'heisenbuug', 'committer_name': 'Gopi M Tatiraju', 'committer_email': 'tgopimanohar@gmail.com', 'commit_date': datetime.datetime(2017, 10, 20, 23, 37, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '722d1d2d476585940b0602b74a21a77ac8e8a548', 'committer_username': 'heisenbuug', 'committer_name': 'Gopi M Tatiraju', 'committer_email': 'tgopimanohar@gmail.com', 'commit_date': datetime.datetime(2017, 10, 20, 23, 37, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64c4d2fd831190e9686fb2ecad6990e0e5750de0', 'committer_username': 'heisenbuug', 'committer_name': 'Gopi M Tatiraju', 'committer_email': 'tgopimanohar@gmail.com', 'commit_date': datetime.datetime(2017, 10, 20, 23, 37, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da06849787a03ea54a8bf49d22b6ca66f1e58211', 'committer_username': 'heisenbuug', 'committer_name': 'Gopi M Tatiraju', 'committer_email': 'tgopimanohar@gmail.com', 'commit_date': datetime.datetime(2017, 10, 20, 23, 37, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '704a1203f8a7f39a5f37049a516c05a1c1cc30df', 'committer_username': 'heisenbuug', 'committer_name': 'Gopi M Tatiraju', 'committer_email': 'tgopimanohar@gmail.com', 'commit_date': datetime.datetime(2017, 10, 20, 23, 37, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa3b189e21d28ac894dbfc6792e7ad06a054e709', 'committer_username': 'heisenbuug', 'committer_name': 'Gopi M Tatiraju', 'committer_email': 'tgopimanohar@gmail.com', 'commit_date': datetime.datetime(2017, 10, 20, 23, 37, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47e1328f55a8d742d34d1bfa3e326ef0babe13e6', 'committer_username': 'heisenbuug', 'committer_name': 'Gopi M Tatiraju', 'committer_email': 'tgopimanohar@gmail.com', 'commit_date': datetime.datetime(2017, 10, 20, 23, 37, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36ab2d3042513a73f1e668b784ae2264e8c8b22e', 'committer_username': 'heisenbuug', 'committer_name': 'Gopi M Tatiraju', 'committer_email': 'tgopimanohar@gmail.com', 'commit_date': datetime.datetime(2017, 10, 20, 23, 37, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b1d111056178f043ac34faa260b9265cfb774dc', 'committer_username': 'heisenbuug', 'committer_name': 'Gopi M Tatiraju', 'committer_email': 'tgopimanohar@gmail.com', 'commit_date': datetime.datetime(2017, 10, 20, 23, 37, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '632c0131ae3e24f690e9759458fd51b208fc851e', 'committer_username': 'heisenbuug', 'committer_name': 'Gopi M Tatiraju', 'committer_email': 'tgopimanohar@gmail.com', 'commit_date': datetime.datetime(2017, 10, 20, 23, 37, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a88a1ae92f58a836590743b5405ded542dbf664a', 'committer_username': 'heisenbuug', 'committer_name': 'Gopi M Tatiraju', 'committer_email': 'tgopimanohar@gmail.com', 'commit_date': datetime.datetime(2017, 10, 20, 23, 37, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f915faa597f0228240431e30e8657b070698cca', 'committer_username': 'heisenbuug', 'committer_name': 'Gopi M Tatiraju', 'committer_email': 'tgopimanohar@gmail.com', 'commit_date': datetime.datetime(2017, 10, 20, 23, 37, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf87cb9ad096a509dce0038c0cb2b6f636356333', 'committer_username': 'heisenbuug', 'committer_name': 'Gopi M Tatiraju', 'committer_email': 'tgopimanohar@gmail.com', 'commit_date': datetime.datetime(2017, 10, 20, 23, 37, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ddd6abc8c7479dcd6d84755fb578d866934bc05', 'committer_username': 'heisenbuug', 'committer_name': 'Gopi M Tatiraju', 'committer_email': 'tgopimanohar@gmail.com', 'commit_date': datetime.datetime(2017, 10, 20, 23, 37, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed8e614721d452003dd8cdf96e19c2829739dfef', 'committer_username': 'heisenbuug', 'committer_name': 'Gopi M Tatiraju', 'committer_email': 'tgopimanohar@gmail.com', 'commit_date': datetime.datetime(2017, 10, 20, 23, 37, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1fa7b645b63090830355d1b13f571fe2baa26ea5', 'committer_username': 'heisenbuug', 'committer_name': 'Gopi M Tatiraju', 'committer_email': 'tgopimanohar@gmail.com', 'commit_date': datetime.datetime(2017, 10, 20, 23, 37, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ac7cd18a84e5ec4b449c21e335cc1c541ae989d', 'committer_username': 'heisenbuug', 'committer_name': 'Gopi M Tatiraju', 'committer_email': 'tgopimanohar@gmail.com', 'commit_date': datetime.datetime(2017, 10, 20, 23, 37, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b32a9131b5ae5506f69f9bf2382128084ad8aded', 'committer_username': 'heisenbuug', 'committer_name': 'Gopi M Tatiraju', 'committer_email': 'tgopimanohar@gmail.com', 'commit_date': datetime.datetime(2017, 10, 20, 23, 37, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0201984c7ef25a54dc291d524316816ab365f9cd', 'committer_username': 'heisenbuug', 'committer_name': 'Gopi M Tatiraju', 'committer_email': 'tgopimanohar@gmail.com', 'commit_date': datetime.datetime(2017, 10, 20, 23, 37, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b70751168d7bd41dfc270a24005d2b2a3f27991', 'committer_username': 'heisenbuug', 'committer_name': 'Gopi M Tatiraju', 'committer_email': 'tgopimanohar@gmail.com', 'commit_date': datetime.datetime(2017, 10, 20, 23, 37, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '81ebd0ab204876fecf89aa63930a9456fecaaab9', 'committer_username': 'heisenbuug', 'committer_name': 'Gopi M Tatiraju', 'committer_email': 'tgopimanohar@gmail.com', 'commit_date': datetime.datetime(2017, 10, 20, 23, 37, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e117294444a21929c87b5cfde552ad72d798fcbd', 'committer_username': 'heisenbuug', 'committer_name': 'Gopi M Tatiraju', 'committer_email': 'tgopimanohar@gmail.com', 'commit_date': datetime.datetime(2017, 10, 20, 23, 37, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '77b5f6b455ed716ca6e7fa21a8713e9519c1f268', 'committer_username': 'heisenbuug', 'committer_name': 'Gopi M Tatiraju', 'committer_email': 'tgopimanohar@gmail.com', 'commit_date': datetime.datetime(2017, 10, 20, 23, 37, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1bbae56398342f102e37e9cd2043b599e5db461e', 'committer_username': 'heisenbuug', 'committer_name': 'Gopi M Tatiraju', 'committer_email': 'tgopimanohar@gmail.com', 'commit_date': datetime.datetime(2017, 10, 20, 23, 37, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7aca7447e96b25910fe632110314d697027e290e', 'committer_username': 'heisenbuug', 'committer_name': 'Gopi M Tatiraju', 'committer_email': 'tgopimanohar@gmail.com', 'commit_date': datetime.datetime(2017, 10, 20, 23, 37, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a99165d27fb38a7ef97114f0b373d3d819d21f6', 'committer_username': 'heisenbuug', 'committer_name': 'Gopi M Tatiraju', 'committer_email': 'tgopimanohar@gmail.com', 'commit_date': datetime.datetime(2017, 10, 20, 23, 37, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '727a02b918851e655c5519df90fa279e841dcaf1', 'committer_username': 'heisenbuug', 'committer_name': 'Gopi M Tatiraju', 'committer_email': 'tgopimanohar@gmail.com', 'commit_date': datetime.datetime(2017, 10, 20, 23, 37, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62383c0379303693e3b4a5548b1bfa2082630819', 'committer_username': 'heisenbuug', 'committer_name': 'Gopi M Tatiraju', 'committer_email': 'tgopimanohar@gmail.com', 'commit_date': datetime.datetime(2017, 10, 20, 23, 37, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b5a35ad258a26af6e4348bee1ba86ecc0078ecb', 'committer_username': 'heisenbuug', 'committer_name': 'Gopi M Tatiraju', 'committer_email': 'tgopimanohar@gmail.com', 'commit_date': datetime.datetime(2017, 10, 20, 23, 37, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '756d7afbf368c7c16fe171df070ab372fc015243', 'committer_username': 'heisenbuug', 'committer_name': 'Gopi M Tatiraju', 'committer_email': 'tgopimanohar@gmail.com', 'commit_date': datetime.datetime(2017, 10, 20, 23, 37, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1cf824a2b283c7c930fd5498726aeeef7192156', 'committer_username': 'heisenbuug', 'committer_name': 'Gopi M Tatiraju', 'committer_email': 'tgopimanohar@gmail.com', 'commit_date': datetime.datetime(2017, 10, 20, 23, 37, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '626bbc6d1f40c4225be89f405686dde4c15832e9', 'committer_username': 'heisenbuug', 'committer_name': 'Gopi M Tatiraju', 'committer_email': 'tgopimanohar@gmail.com', 'commit_date': datetime.datetime(2017, 10, 20, 23, 37, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4599bc5832866f53d75ae80cb6564ad97882f164', 'committer_username': 'heisenbuug', 'committer_name': 'Gopi M Tatiraju', 'committer_email': 'tgopimanohar@gmail.com', 'commit_date': datetime.datetime(2017, 10, 20, 23, 37, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ee199db0fa340ae5d22ae8c2949a4cdc31776f9', 'committer_username': 'heisenbuug', 'committer_name': 'Gopi M Tatiraju', 'committer_email': 'tgopimanohar@gmail.com', 'commit_date': datetime.datetime(2017, 10, 20, 23, 37, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a2a352d3123e8daae4490a8e163380039fe10cb5', 'committer_username': 'heisenbuug', 'committer_name': 'Gopi M Tatiraju', 'committer_email': 'tgopimanohar@gmail.com', 'commit_date': datetime.datetime(2017, 10, 20, 23, 37, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce0a90473a96de86dc23c288f38321944e61666f', 'committer_username': 'heisenbuug', 'committer_name': 'Gopi M Tatiraju', 'committer_email': 'tgopimanohar@gmail.com', 'commit_date': datetime.datetime(2017, 10, 20, 23, 37, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b44a7eeaf519640691ce9ec21019d740a2473851', 'committer_username': 'heisenbuug', 'committer_name': 'Gopi M Tatiraju', 'committer_email': 'tgopimanohar@gmail.com', 'commit_date': datetime.datetime(2017, 10, 20, 23, 37, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22a96469e6ae2931215e11138f9fe2d0c2b3913c', 'committer_username': 'heisenbuug', 'committer_name': 'Gopi M Tatiraju', 'committer_email': 'tgopimanohar@gmail.com', 'commit_date': datetime.datetime(2017, 10, 20, 23, 37, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3be9474388a42f74be0f0119346080a539a05e6b', 'committer_username': 'heisenbuug', 'committer_name': 'Gopi M Tatiraju', 'committer_email': 'tgopimanohar@gmail.com', 'commit_date': datetime.datetime(2017, 10, 20, 23, 37, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7569626a8de23492ef1b373f718ccd8c0ce24096', 'committer_username': 'heisenbuug', 'committer_name': 'Gopi M Tatiraju', 'committer_email': 'tgopimanohar@gmail.com', 'commit_date': datetime.datetime(2017, 10, 20, 23, 37, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '589689e966d8fcb83500d065243b99671bad8df3', 'committer_username': 'heisenbuug', 'committer_name': 'Gopi M Tatiraju', 'committer_email': 'tgopimanohar@gmail.com', 'commit_date': datetime.datetime(2017, 10, 20, 23, 37, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c78e62698f164914b3b7f8234ad1b44571cf80f3', 'committer_username': 'heisenbuug', 'committer_name': 'Gopi M Tatiraju', 'committer_email': 'tgopimanohar@gmail.com', 'commit_date': datetime.datetime(2017, 10, 20, 23, 37, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2707ff1bf1177780b6f82563c72f965d3440214b', 'committer_username': 'heisenbuug', 'committer_name': 'Gopi M Tatiraju', 'committer_email': 'tgopimanohar@gmail.com', 'commit_date': datetime.datetime(2017, 10, 20, 23, 37, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '933b68c2b30ca2bed06f1c6b41597674e117757e', 'committer_username': 'heisenbuug', 'committer_name': 'Gopi M Tatiraju', 'committer_email': 'tgopimanohar@gmail.com', 'commit_date': datetime.datetime(2017, 10, 20, 23, 37, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '54d7824a2263f9e6948a6f7dae5d0a1901649853', 'committer_username': 'heisenbuug', 'committer_name': 'Gopi M Tatiraju', 'committer_email': 'tgopimanohar@gmail.com', 'commit_date': datetime.datetime(2017, 10, 20, 23, 37, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7904f39606129dce0044ef9068c7fc20c6abe4a5', 'committer_username': 'heisenbuug', 'committer_name': 'Gopi M Tatiraju', 'committer_email': 'tgopimanohar@gmail.com', 'commit_date': datetime.datetime(2017, 10, 20, 23, 37, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '128da6b0eba40a36133f685715462587d837cb37', 'committer_username': 'heisenbuug', 'committer_name': 'Gopi M Tatiraju', 'committer_email': 'tgopimanohar@gmail.com', 'commit_date': datetime.datetime(2017, 10, 20, 23, 37, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c2151d7737d604b026343efeb0f5ae135e4fbc70', 'committer_username': 'heisenbuug', 'committer_name': 'Gopi M Tatiraju', 'committer_email': 'tgopimanohar@gmail.com', 'commit_date': datetime.datetime(2017, 10, 20, 23, 37, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1537e86fe0accd703eadaa3c81a321a5efb6cab3', 'committer_username': 'heisenbuug', 'committer_name': 'Gopi M Tatiraju', 'committer_email': 'tgopimanohar@gmail.com', 'commit_date': datetime.datetime(2017, 10, 20, 23, 37, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67325c59e5df7da2feb9587e59914b615de520c5', 'committer_username': 'heisenbuug', 'committer_name': 'Gopi M Tatiraju', 'committer_email': 'tgopimanohar@gmail.com', 'commit_date': datetime.datetime(2017, 10, 20, 23, 37, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73d37db0a0a53a13623df66db57b9798eec57916', 'committer_username': 'heisenbuug', 'committer_name': 'Gopi M Tatiraju', 'committer_email': 'tgopimanohar@gmail.com', 'commit_date': datetime.datetime(2017, 10, 20, 23, 37, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc918557ec40d88b20f76d4568bf75fbfc286d2a', 'committer_username': 'heisenbuug', 'committer_name': 'Gopi M Tatiraju', 'committer_email': 'tgopimanohar@gmail.com', 'commit_date': datetime.datetime(2017, 10, 20, 23, 37, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd986e3dc3b01ff7f6b704e4b36e96039e983486c', 'committer_username': 'heisenbuug', 'committer_name': 'Gopi M Tatiraju', 'committer_email': 'tgopimanohar@gmail.com', 'commit_date': datetime.datetime(2017, 10, 20, 23, 37, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5cade8d33750f9647e8a930488a481a85488db4d', 'committer_username': 'heisenbuug', 'committer_name': 'Gopi M Tatiraju', 'committer_email': 'tgopimanohar@gmail.com', 'commit_date': datetime.datetime(2017, 10, 20, 23, 37, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49dce56b99f938bbb247e2dc1fe1188a55513ee8', 'committer_username': 'heisenbuug', 'committer_name': 'Gopi M Tatiraju', 'committer_email': 'tgopimanohar@gmail.com', 'commit_date': datetime.datetime(2017, 10, 20, 23, 37, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0307574f444018e09eabd18e6f7dd34751b6788f', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '967a7c9498f95b2213cfa8f6213605a28513fc58', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2cba1d6f1580e3f6b0e6c0341196fc982e616cd0', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce36efb41d8b597af382ea3c52546983f20ea1f2', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eec152f8037befb1272396436e688d08ee83832b', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14edebbda4c85f790efb2eb17744c52815609ef6', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c8e3bb1c44cdf42b7d34802baf62ebf0478f4d5', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99def5a1b5a9461d82ccb0814f5df131bf7732f7', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f7df5893d9402ac44d3e6c89f77dbb37e87692e', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d63b15e2656ff729453881f5b81822092f6c051', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b2c7fa950e9f0e751a89a6eb27609a2e8d912b5', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e8afca1a99dfef78f2d44c81a494a3d9350eb69', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd6c24420dc1d39569aa4ad118cd7357554cb822', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72c989d82bcfc4630486ca5812922316153f0e4f', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '150099a417691f2eceb66e7008515d0dd7fc9bf0', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4eb946863d46dc81b1b380ea94dc9018650e655c', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}]",Gopi M Tatiraju,32970979,tgopimanohar@gmail.com,User,,67,,2,4

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
28149409,mlpack,mlpack/mlpack,C++,1592,4982,183,321,30199,26,11,16,"[{'id': 922307127, 'number': 3202, 'closed': datetime.datetime(2022, 6, 5, 3, 59, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 28, 20, 26, 12, tzinfo=datetime.timezone.utc), 'time_taken': 3223978.0, 'time_delta': '37 days, 7:32:58', 'additions': 8, 'deletions': 6, 'state': 'closed'}, {'id': 785285461, 'number': 3098, 'closed': datetime.datetime(2022, 5, 16, 2, 30, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 11, 20, 22, 17, 44, tzinfo=datetime.timezone.utc), 'time_taken': 15221545.0, 'time_delta': '176 days, 4:12:25', 'additions': 58, 'deletions': 34, 'state': 'closed'}, {'id': 725014504, 'number': 3050, 'closed': datetime.datetime(2021, 11, 13, 14, 53, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 1, 22, 2, 2, tzinfo=datetime.timezone.utc), 'time_taken': 6281487.0, 'time_delta': '72 days, 16:51:27', 'additions': 2174, 'deletions': 4793, 'state': 'closed'}, {'id': 712937217, 'number': 3035, 'closed': datetime.datetime(2021, 8, 15, 13, 38, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 15, 13, 35, 46, tzinfo=datetime.timezone.utc), 'time_taken': 140.0, 'time_delta': '0:02:20', 'additions': 1310, 'deletions': 932, 'state': 'closed'}, {'id': 645306615, 'number': 2942, 'closed': datetime.datetime(2021, 11, 6, 16, 54, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 16, 12, 8, 16, tzinfo=datetime.timezone.utc), 'time_taken': 15050755.0, 'time_delta': '174 days, 4:45:55', 'additions': 1311, 'deletions': 752, 'state': 'closed'}, {'id': 577708811, 'number': 2844, 'closed': datetime.datetime(2021, 3, 3, 15, 52, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 22, 15, 6, 11, tzinfo=datetime.timezone.utc), 'time_taken': 780352.0, 'time_delta': '9 days, 0:45:52', 'additions': 295, 'deletions': 149, 'state': 'closed'}, {'id': 525211079, 'number': 2727, 'closed': datetime.datetime(2021, 4, 12, 23, 11, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 11, 22, 0, 42, 18, tzinfo=datetime.timezone.utc), 'time_taken': 12263335.0, 'time_delta': '141 days, 22:28:55', 'additions': 347, 'deletions': 0, 'state': 'closed'}, {'id': 521217807, 'number': 2717, 'closed': datetime.datetime(2021, 1, 9, 7, 12, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 11, 15, 16, 7, 19, tzinfo=datetime.timezone.utc), 'time_taken': 4719933.0, 'time_delta': '54 days, 15:05:33', 'additions': 396, 'deletions': 191, 'state': 'closed'}, {'id': 518693425, 'number': 2707, 'closed': datetime.datetime(2021, 1, 4, 21, 12, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 11, 10, 18, 46, 13, tzinfo=datetime.timezone.utc), 'time_taken': 4760798.0, 'time_delta': '55 days, 2:26:38', 'additions': 234, 'deletions': 3, 'state': 'closed'}]"
