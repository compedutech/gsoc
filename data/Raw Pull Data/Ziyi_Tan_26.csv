pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
976458515,MCOL-785 Implement DISTRIBUTED JSON functions,"- [x] The Jira issue number for this PR is: [MCOL-785](https://jira.mariadb.org/browse/MCOL-785)

## Description
The following json function will be created:
- [x] JSON_ARRAY
- [x] JSON_ARRAY_APPEND
- [x] JSON_ARRAY_INSERT
- [x] JSON_COMPACT
- [x] JSON_CONTAINS
- [x] JSON_DEPTH
- [x] JSON_DETAILED
- [x] JSON_EQUALS
- [x] JSON_EXISTS
- [x] JSON_INSERT
- [x] JSON_KEYS
- [x] JSON_LENGTH
- [x] JSON_LOOSE
- [x] JSON_MERGE
- [x] JSON_MERGE_PATCH
- [x] JSON_MERGE_PRESERVE
- [x] JSON_NORMALIZE
- [x] JSON_OBJECT
- [x] JSON_QUERY
- [x] JSON_QUOTE
- [x] JSON_REMOVE
- [x] JSON_REPLACE
- [x] JSON_SET
- [x] JSON_TYPE
- [x] JSON_UNQUOTE
- [x] JSON_VALID
- [x] JSON_VALUE
- [x] JSON_CONTAINS_PATH
- [x] JSON_EXTRACT
- [x] JSON_OVERLAPS (Since MariaDB 10.9)
- [x] JSON_SEARCH

## How can this PR be tested?
The test files locate at test suite **columnstore/future** `func_json_xxx.test` and `func_json_xxx.result` 

## Basing the PR against the correct Columnstore version
- [x] This is a new feature and the PR is based against the latest MariaDB development branch
- [ ] This is a bug fix and the PR is based against the earliest branch in which the bug can be reproduce",True,2425,https://api.github.com/repos/mariadb-corporation/mariadb-columnstore-engine/pulls/2425,https://github.com/mariadb-corporation/mariadb-columnstore-engine/pull/2425,closed,8645,2,82,1,5,35,0,0,[],2022-06-23 03:17:20+00:00,2022-08-31 19:56:43+00:00,6021563.0,"69 days, 16:39:23","[{'comment_id': 913712407, 'comment_body': 'This getStrVal returns a ref so I would use ref to avoid std::strin copy-ctor. ', 'comment_created': datetime.datetime(2022, 7, 5, 11, 56, 56, tzinfo=datetime.timezone.utc), 'commenter': 'drrtuy', 'type': 'User'}, {'comment_id': 913719701, 'comment_body': ""Could you ellaborate on the semantics of this expression? If the next token is an array start - '[' and json_skip_level returns true we set isNull and set the length to 0. Why so? "", 'comment_created': datetime.datetime(2022, 7, 5, 12, 5, 39, tzinfo=datetime.timezone.utc), 'commenter': 'drrtuy', 'type': 'User'}, {'comment_id': 913720868, 'comment_body': ""I don't think we want to calculate the length again given that tmp_js has the length attribute."", 'comment_created': datetime.datetime(2022, 7, 5, 12, 6, 57, tzinfo=datetime.timezone.utc), 'commenter': 'drrtuy', 'type': 'User'}, {'comment_id': 915701889, 'comment_body': ""Well, First `json_skip_level` return 1 when error occurs. And when `JSON_LENGTH` is called, length of nested arrays or objects are not counted, they will be count as 1. `json_skip_level` is for skipping nested array or object. The outermost '[' or '{' have been skipped, So it they will never hit  `case JST_OBJ_START:\r\n      case JST_ARRAY_START:\r\n        if (json_skip_level(&je))...`.\r\nIn conclusion, this call is designed to skip nested structures. Refer to [here](https://github.com/qggcs/server/blob/ba5b2e7b291a9b4bfb97dcdf3c53ca49fc91a4e7/sql/item_jsonfunc.cc#L2664)"", 'comment_created': datetime.datetime(2022, 7, 7, 10, 10, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Ziy1-Tan', 'type': 'User'}, {'comment_id': 915759986, 'comment_body': 'I have changed string to std::string_view', 'comment_created': datetime.datetime(2022, 7, 7, 11, 22, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Ziy1-Tan', 'type': 'User'}, {'comment_id': 915762600, 'comment_body': ""Take `JSON_LENGTH('[1,[2,3]]')`. When parsing the first '[',`je.state` is `JST_KEY`, when parsing the second '[', `je.state` is `JST_KEY` and then change to `JST_ARRAY_START` in the next loop."", 'comment_created': datetime.datetime(2022, 7, 7, 11, 25, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Ziy1-Tan', 'type': 'User'}, {'comment_id': 924561960, 'comment_body': 'I am curios about this design decision?\r\nCould you ellaborate on why do you need this RTTI-based checks to allocate fDynamicFunctor and replace fFunctor?', 'comment_created': datetime.datetime(2022, 7, 19, 14, 18, 3, tzinfo=datetime.timezone.utc), 'commenter': 'drrtuy', 'type': 'User'}, {'comment_id': 924564123, 'comment_body': 'Are you sure that collation will never be null in the context? The same is actual about item->name.', 'comment_created': datetime.datetime(2022, 7, 19, 14, 19, 52, tzinfo=datetime.timezone.utc), 'commenter': 'drrtuy', 'type': 'User'}, {'comment_id': 924573066, 'comment_body': 'How heave is this json_engine_t ctor call is?', 'comment_created': datetime.datetime(2022, 7, 19, 14, 27, 15, tzinfo=datetime.timezone.utc), 'commenter': 'drrtuy', 'type': 'User'}, {'comment_id': 924714292, 'comment_body': 'Can we use string_view here also?', 'comment_created': datetime.datetime(2022, 7, 19, 16, 24, 28, tzinfo=datetime.timezone.utc), 'commenter': 'drrtuy', 'type': 'User'}, {'comment_id': 924714731, 'comment_body': 'Can we use string_view here also?', 'comment_created': datetime.datetime(2022, 7, 19, 16, 24, 51, tzinfo=datetime.timezone.utc), 'commenter': 'drrtuy', 'type': 'User'}, {'comment_id': 924715187, 'comment_body': 'Can we use string_view here also?', 'comment_created': datetime.datetime(2022, 7, 19, 16, 25, 19, tzinfo=datetime.timezone.utc), 'commenter': 'drrtuy', 'type': 'User'}, {'comment_id': 924715383, 'comment_body': 'Can we use string_view here also?', 'comment_created': datetime.datetime(2022, 7, 19, 16, 25, 31, tzinfo=datetime.timezone.utc), 'commenter': 'drrtuy', 'type': 'User'}, {'comment_id': 924715910, 'comment_body': 'Thx for the explanation.', 'comment_created': datetime.datetime(2022, 7, 19, 16, 26, 5, tzinfo=datetime.timezone.utc), 'commenter': 'drrtuy', 'type': 'User'}, {'comment_id': 925312013, 'comment_body': 'Purpose: reinitialize the path variable.\r\nWell, As we know, the variable `fDynamicFunctor` is used to reinitialize member variables(e.g `fSeed1、fSeed2、fSeedSet` in `Func_rand`). These functions use these variable to record the states in a SQL. Since the function state may be different in each SQL.\r\nSo these function must be assigned to `fDynamicFunctor` to ensure that is destructed after the call, does not retain the state of last SQL.\r\n`FunctionColumn::~FunctionColumn()\r\n{\r\n  if (fDynamicFunctor)\r\n    delete fDynamicFunctor;\r\n}`', 'comment_created': datetime.datetime(2022, 7, 20, 8, 16, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Ziy1-Tan', 'type': 'User'}, {'comment_id': 925324497, 'comment_body': 'Same as json function. Some json function will accept path parameters. These functions use variable path to save path state. Taking `json_length` as example, When a SQL is called, json_length will be check if path argument is constant, If it is constant, it will be cached until next SQL call.Refer to [here](https://github.com/qggcs/mariadb-columnstore-engine/blob/dd95fcdde4ac5b66db8409aa0ead03e2f5a02f0f/utils/funcexp/func_json_length.cpp#L45-L64).\r\n\r\nThe cache must be reinitialized before the next call, otherwise, it will affect the next SQL call. So these function are assigned to the `fDynamicFunctor`.\r\n\r\n[json_length](https://github.com/qggcs/server/blob/a5dc76a051ff908a5f506ed12e8d05311752e5fb/sql/item_jsonfunc.cc#L2721) in mariadb server.', 'comment_created': datetime.datetime(2022, 7, 20, 8, 28, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Ziy1-Tan', 'type': 'User'}, {'comment_id': 925325991, 'comment_body': 'You can run the func_json_length.test before and after delete RTTI code.', 'comment_created': datetime.datetime(2022, 7, 20, 8, 30, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Ziy1-Tan', 'type': 'User'}, {'comment_id': 925331984, 'comment_body': 'The small case:\r\n`CREATE TABLE t1(l longtext) engine=columnstore;`\r\n`INSERT INTO t1 VALUES(\'{""key1"":[1,2,3],""key2"":[1,2,3,4,5]}\')`;\r\n`SELECT JSON_LENGTH(l, \'$.key1\') FROM t1;`\r\n`SELECT JSON_LENGTH(l, \'$.key2\') FROM t1;`\r\nThe 2nd argument is const. Without RTTI check, the path state will be cached and will not reinitialize, the result is always 3.', 'comment_created': datetime.datetime(2022, 7, 20, 8, 35, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Ziy1-Tan', 'type': 'User'}, {'comment_id': 925387500, 'comment_body': 'Before defining the function `buildBooleanConstColumn`,All the arguments will enter the function `rc = buildReturnedColumn(ifp->arguments()[i], gwi, nonSupport)` [here](https://github.com/qggcs/mariadb-columnstore-engine/blob/f4aba866ecf4d6e4c2aa3fc6e52808741e79b790/dbcon/mysql/ha_mcs_execplan.cpp#L4049).\r\nAfter debugging, the `item.collation` and `item.name` have default value, So it will not be null. these code in `buildBooleanConstColumn` is same as [buildReturnedColumn](https://github.com/qggcs/mariadb-columnstore-engine/blob/f4aba866ecf4d6e4c2aa3fc6e52808741e79b790/dbcon/mysql/ha_mcs_execplan.cpp#L3544-L3548).', 'comment_created': datetime.datetime(2022, 7, 20, 9, 30, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Ziy1-Tan', 'type': 'User'}, {'comment_id': 925684682, 'comment_body': ""Why ask that? All json functions require `json_engine_t`.I don't understand why only this function is mentioned."", 'comment_created': datetime.datetime(2022, 7, 20, 14, 33, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Ziy1-Tan', 'type': 'User'}, {'comment_id': 925684937, 'comment_body': 'Fix.', 'comment_created': datetime.datetime(2022, 7, 20, 14, 33, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Ziy1-Tan', 'type': 'User'}, {'comment_id': 925685104, 'comment_body': 'Fix.', 'comment_created': datetime.datetime(2022, 7, 20, 14, 33, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Ziy1-Tan', 'type': 'User'}, {'comment_id': 925685236, 'comment_body': 'Fix.', 'comment_created': datetime.datetime(2022, 7, 20, 14, 34, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Ziy1-Tan', 'type': 'User'}, {'comment_id': 926685929, 'comment_body': 'Fix.', 'comment_created': datetime.datetime(2022, 7, 21, 13, 37, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Ziy1-Tan', 'type': 'User'}, {'comment_id': 938345488, 'comment_body': ""I just asked about this function taken it as an example b/c I don't want to repeat the same question many times. "", 'comment_created': datetime.datetime(2022, 8, 5, 0, 14, 12, tzinfo=datetime.timezone.utc), 'commenter': 'drrtuy', 'type': 'User'}, {'comment_id': 938345774, 'comment_body': 'If the ctor is heavy it might worth to consider call this ctor only once sharing the json_engine_t instance b/w calls somewhere.', 'comment_created': datetime.datetime(2022, 8, 5, 0, 15, 5, tzinfo=datetime.timezone.utc), 'commenter': 'drrtuy', 'type': 'User'}, {'comment_id': 953750279, 'comment_body': 'I think it should rewritten to\r\n`if (dynamic_cast<Type *>(pointer))`\r\n\r\ninstead of \r\n```\r\nauto *typePointer = dynamic_cast<Type *>(pointer);\r\nif (typePointer)\r\n```\r\nHere and below as well.', 'comment_created': datetime.datetime(2022, 8, 24, 12, 43, 26, tzinfo=datetime.timezone.utc), 'commenter': 'denis0x0D', 'type': 'User'}, {'comment_id': 953763429, 'comment_body': 'What this empty branch is about?', 'comment_created': datetime.datetime(2022, 8, 24, 12, 53, 4, tzinfo=datetime.timezone.utc), 'commenter': 'denis0x0D', 'type': 'User'}, {'comment_id': 953764758, 'comment_body': 'Could you please use a naming constant instead of just 8?', 'comment_created': datetime.datetime(2022, 8, 24, 12, 54, 24, tzinfo=datetime.timezone.utc), 'commenter': 'denis0x0D', 'type': 'User'}, {'comment_id': 953773668, 'comment_body': 'Some part of this function is the same, as function above, I would like to suggest to not copy past it, but just implement it once and use everywhere you need.', 'comment_created': datetime.datetime(2022, 8, 24, 13, 2, 37, tzinfo=datetime.timezone.utc), 'commenter': 'denis0x0D', 'type': 'User'}, {'comment_id': 953778803, 'comment_body': 'What this empty statement is about?', 'comment_created': datetime.datetime(2022, 8, 24, 13, 7, 26, tzinfo=datetime.timezone.utc), 'commenter': 'denis0x0D', 'type': 'User'}, {'comment_id': 953780317, 'comment_body': 'Empty branch is not needed.', 'comment_created': datetime.datetime(2022, 8, 24, 13, 8, 50, tzinfo=datetime.timezone.utc), 'commenter': 'denis0x0D', 'type': 'User'}, {'comment_id': 953783424, 'comment_body': 'This function also has the same code with other functions, I would like to suggest to take the same code from all function and share it.', 'comment_created': datetime.datetime(2022, 8, 24, 13, 11, 38, tzinfo=datetime.timezone.utc), 'commenter': 'denis0x0D', 'type': 'User'}, {'comment_id': 957180011, 'comment_body': 'I might better use static_cast and put item->val_int() into a variable to reduce number of calls.', 'comment_created': datetime.datetime(2022, 8, 29, 11, 1, 4, tzinfo=datetime.timezone.utc), 'commenter': 'drrtuy', 'type': 'User'}, {'comment_id': 957232597, 'comment_body': 'it looks good! I have fixed it.', 'comment_created': datetime.datetime(2022, 8, 29, 11, 59, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Ziy1-Tan', 'type': 'User'}]","[{'commit_sha': 'cdd41f05f3dfa8d11aea6d8e679f3c85e4c927d6', 'committer_username': 'Ziy1-Tan', 'committer_name': 'Ziyi Tan', 'committer_email': 'tanziyi0925@gmail.com', 'commit_date': datetime.datetime(2019, 4, 14, 6, 1, 32, tzinfo=datetime.timezone.utc)}]",Ziyi Tan,49604965,tanziyi0925@gmail.com,User,,42,,205,185
1010462014,Refactor: remove redundant assignments of JSON_MERGE_PATCH ,"Please Refer PR [#2205](https://github.com/MariaDB/server/pull/2205)
",True,2209,https://api.github.com/repos/MariaDB/server/pulls/2209,https://github.com/MariaDB/server/pull/2209,closed,1,3,1,1,0,0,0,0,[],2022-07-28 07:32:20+00:00,2022-08-09 09:35:37+00:00,1044197.0,"12 days, 2:03:17",[],"[{'commit_sha': 'e5d88f1df5c17491a6f88b22731cc73e03e3dbb9', 'committer_username': 'Ziy1-Tan', 'committer_name': 'Ziyi Tan', 'committer_email': 'tanziyi0925@gmail.com', 'commit_date': datetime.datetime(2019, 4, 14, 6, 1, 32, tzinfo=datetime.timezone.utc)}]",Ziyi Tan,49604965,tanziyi0925@gmail.com,User,,42,,205,185
979059034,"MDEV-28947 JSON_TYPE result is turncated, charset max length should be considered","- [x] *The Jira issue number for this PR is: MDEV-28947*

## Description
My JSON_TYPE result of columnstore is only 4 characters, It is because the field length does not consider the maximum length of characters in the charset.

## How can this PR be tested?
Passed all existing tests and tests located at [func_json_type.test](https://github.com/qggcs/mariadb-columnstore-engine/blob/1319757e280be88d7d649b025221ded4497fbef7/mysql-test/columnstore/json/t/func_json_type.test)
[func_json_type.result](https://github.com/qggcs/mariadb-columnstore-engine/commit/1319757e280be88d7d649b025221ded4497fbef7)

## Basing the PR against the correct MariaDB version
- [ ] *This is a new feature and the PR is based against the latest MariaDB development branch*
- [x] *This is a bug fix and the PR is based against the earliest branch in which the bug can be reproduced*",False,2172,https://api.github.com/repos/MariaDB/server/pulls/2172,https://github.com/MariaDB/server/pull/2172,closed,2,2,2,2,5,0,0,1,[],2022-06-25 14:12:21+00:00,2022-06-30 18:10:01+00:00,446260.0,"5 days, 3:57:40",[],"[{'commit_sha': 'e5ecf6a6ba8bfe39d4b0fc25b054b1318ad16ec0', 'committer_username': 'Ziy1-Tan', 'committer_name': 'Ziyi Tan', 'committer_email': 'tanziyi0925@gmail.com', 'commit_date': datetime.datetime(2019, 4, 14, 6, 1, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e909a90b95b59feeec137c04724baffc68cd765c', 'committer_username': 'Ziy1-Tan', 'committer_name': 'Ziyi Tan', 'committer_email': 'tanziyi0925@gmail.com', 'commit_date': datetime.datetime(2019, 4, 14, 6, 1, 32, tzinfo=datetime.timezone.utc)}]",Ziyi Tan,49604965,tanziyi0925@gmail.com,User,,42,,205,185
1019372494,MDEV-29264: JSON function overflow error based on LONGTEXT field,"- [x] *The Jira issue number for this PR is: [MDEV-29264](https://jira.mariadb.org/plugins/servlet/mobile#issue/MDEV-29264)*

## Description
Avoid `uint32` overflow error for JSON functions on LONGTEXT

## How can this PR be tested?
This patch will not change the result of mariadb server，but make the result of calling the Columnstore JSON function based on LONGTEXT correct.

## Basing the PR against the correct MariaDB version
- [ ] *This is a new feature and the PR is based against the latest MariaDB development branch*
- [x] *This is a bug fix and the PR is based against the earliest branch in which the bug can be reproduced*

",False,2226,https://api.github.com/repos/MariaDB/server/pulls/2226,https://github.com/MariaDB/server/pull/2226,closed,32,4,3,1,4,2,0,0,[],2022-08-06 16:16:50+00:00,2022-11-28 03:29:39+00:00,9803569.0,"113 days, 11:12:49","[{'comment_id': 943231892, 'comment_body': 'It looks like you editor is turning some letters into weird �   Everything else looks ok.', 'comment_created': datetime.datetime(2022, 8, 11, 8, 33, 49, tzinfo=datetime.timezone.utc), 'commenter': 'mariadb-RuchaDeodhar', 'type': 'User'}, {'comment_id': 943322646, 'comment_body': 'fixed.', 'comment_created': datetime.datetime(2022, 8, 11, 10, 16, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Ziy1-Tan', 'type': 'User'}]","[{'commit_sha': '9dfd05b7df869a61605005bc3e9c0e245e53c1eb', 'committer_username': 'Ziy1-Tan', 'committer_name': 'Ziyi Tan', 'committer_email': 'tanziyi0925@gmail.com', 'commit_date': datetime.datetime(2019, 4, 14, 6, 1, 32, tzinfo=datetime.timezone.utc)}]",Ziyi Tan,49604965,tanziyi0925@gmail.com,User,,42,,205,185

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
59521862,mariadb-columnstore-engine,mariadb-corporation/mariadb-columnstore-engine,C++,64,106,37,97,6279,32,269,32,"[{'id': 1952015456, 'number': 3237, 'closed': None, 'created': datetime.datetime(2024, 7, 3, 16, 38, 14, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 1908, 'deletions': 4, 'state': 'open'}, {'id': 1928175154, 'number': 3208, 'closed': datetime.datetime(2024, 6, 20, 9, 47, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 6, 19, 8, 26, 55, tzinfo=datetime.timezone.utc), 'time_taken': 91209.0, 'time_delta': '1 day, 1:20:09', 'additions': 1, 'deletions': 0, 'state': 'closed'}, {'id': 976458515, 'number': 2425, 'closed': datetime.datetime(2022, 8, 31, 19, 56, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 23, 3, 17, 20, tzinfo=datetime.timezone.utc), 'time_taken': 6021563.0, 'time_delta': '69 days, 16:39:23', 'additions': 8645, 'deletions': 2, 'state': 'closed'}]"
19816070,server,MariaDB/server,C++,1668,5519,268,1875,201521,238,2625,238,"[{'id': 1920964284, 'number': 3338, 'closed': datetime.datetime(2024, 6, 14, 16, 44, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 6, 14, 16, 2, 32, tzinfo=datetime.timezone.utc), 'time_taken': 2495.0, 'time_delta': '0:41:35', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 1019372494, 'number': 2226, 'closed': datetime.datetime(2022, 11, 28, 3, 29, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 6, 16, 16, 50, tzinfo=datetime.timezone.utc), 'time_taken': 9803569.0, 'time_delta': '113 days, 11:12:49', 'additions': 32, 'deletions': 4, 'state': 'closed'}, {'id': 1010462014, 'number': 2209, 'closed': datetime.datetime(2022, 8, 9, 9, 35, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 28, 7, 32, 20, tzinfo=datetime.timezone.utc), 'time_taken': 1044197.0, 'time_delta': '12 days, 2:03:17', 'additions': 1, 'deletions': 3, 'state': 'closed'}, {'id': 1008226048, 'number': 2205, 'closed': datetime.datetime(2022, 7, 28, 9, 2, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 26, 8, 43, 56, tzinfo=datetime.timezone.utc), 'time_taken': 173903.0, 'time_delta': '2 days, 0:18:23', 'additions': 0, 'deletions': 1, 'state': 'closed'}, {'id': 979059034, 'number': 2172, 'closed': datetime.datetime(2022, 6, 30, 18, 10, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 25, 14, 12, 21, tzinfo=datetime.timezone.utc), 'time_taken': 446260.0, 'time_delta': '5 days, 3:57:40', 'additions': 2, 'deletions': 2, 'state': 'closed'}]"
