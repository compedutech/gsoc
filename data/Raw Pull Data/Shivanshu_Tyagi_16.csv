pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
674770047,speech recognition sample,"### GSoC 2021: Speech Recognition using OpenCV AudioIO
#### Project details
* Mentor : @l-bat 
* Project proposal : https://summerofcode.withgoogle.com/projects/#5148521881141248

#### PR details
##### Creating ONNX model
NVIDIA trained jasper using FP16 precision. OpenCV needs FP32. We need to change onnx model's graph. This is done using this script : [convert_jasper_to_FP32.py](https://gist.github.com/spazewalker/507f1529e19aea7e8417f6e935851a01). Pre-trained converted onnx can be found [here](https://drive.google.com/drive/folders/1wLtxyao4ItAg8tt4Sb63zt6qXzhcQoR6?usp=sharing). Original pre-trained model by NVIDIA can be found [here](https://ngc.nvidia.com/catalog/models/nvidia:jasper_pyt_onnx_fp16_amp/files).

#### Usage
```bash
usage: speech_recognition.py [-h] --input_audio INPUT_AUDIO [--show_spectrogram] [--model MODEL] [--output OUTPUT] [--backend {0,2,3}] [--target {0,1,2}]

This script runs Jasper Speech recognition model

optional arguments:
  -h, --help            show this help message and exit
  --input_audio INPUT_AUDIO
                        Path to input audio file. OR Path to a txt file with relative path to multiple audio files in different lines (default: None)
  --show_spectrogram    Whether to show a spectrogram of the input audio. (default: False)
  --model MODEL         Path to the onnx file of Jasper. default=""jasper.onnx"" (default: jasper.onnx)
  --output OUTPUT       Path to file where recognized audio transcript must be saved. Leave this to print on console. (default: None)
  --backend {0,2,3}     Select a computation backend: 0: automatically (by default) 2: OpenVINO Inference Engine 3: OpenCV Implementation (default: 0)
  --target {0,1,2}      Select a target device: 0: CPU target (by default) 1: OpenCL 2: OpenCL FP16 (default: 0)
```

#### Todo
- [ ] Use AudioIO instead of soundfile.
- [ ] Check performance.

### Pull Request Readiness Checklist

See details at https://github.com/opencv/opencv/wiki/How_to_contribute#making-a-good-pull-request

- [x] I agree to contribute to the project under Apache 2 License.
- [x] To the best of my knowledge, the proposed patch is not based on a code under GPL or other license that is incompatible with OpenCV
- [x] The PR is proposed to proper branch
- [x] There is reference to original bug report and related work
- [x] There is accuracy test, performance test and test data in opencv_extra repository, if applicable
      Patch to opencv_extra has the same branch name.
- [x] The feature is well documented and sample code can be built with the project CMake

```
force_builders=Docs
```",True,20291,https://api.github.com/repos/opencv/opencv/pulls/20291,https://github.com/opencv/opencv/pull/20291,closed,506,0,1,12,6,25,4,1,"[{'name': 'feature'}, {'name': 'category: samples'}, {'name': 'GSoC'}, {'name': 'category: dnn'}]",2021-06-21 18:09:24+00:00,2021-10-04 18:18:02+00:00,9072518.0,"105 days, 0:08:38","[{'comment_id': 655606796, 'comment_body': 'Can you use OpenCV instead of  `plt`?', 'comment_created': datetime.datetime(2021, 6, 21, 18, 19, tzinfo=datetime.timezone.utc), 'commenter': 'l-bat', 'type': 'User'}, {'comment_id': 655607279, 'comment_body': '```suggestion\r\nimport argparse\r\nimport os\r\n```', 'comment_created': datetime.datetime(2021, 6, 21, 18, 19, 49, tzinfo=datetime.timezone.utc), 'commenter': 'l-bat', 'type': 'User'}, {'comment_id': 656830450, 'comment_body': '```suggestion\r\n    feature_extractor = FilterbankFeatures()\r\n```', 'comment_created': datetime.datetime(2021, 6, 23, 7, 27, 27, tzinfo=datetime.timezone.utc), 'commenter': 'l-bat', 'type': 'User'}, {'comment_id': 656830700, 'comment_body': ""Please follow PEP8\r\n```suggestion\r\n        img = cv.applyColorMap(img, cv.COLORMAP_JET)\r\n        cv.imshow('spectogram', img)\r\n```"", 'comment_created': datetime.datetime(2021, 6, 23, 7, 27, 45, tzinfo=datetime.timezone.utc), 'commenter': 'l-bat', 'type': 'User'}, {'comment_id': 656834568, 'comment_body': '```suggestion\r\n        x = self.normalize_batch(x, seq_len).astype(dtype)\r\n```', 'comment_created': datetime.datetime(2021, 6, 23, 7, 33, 5, tzinfo=datetime.timezone.utc), 'commenter': 'l-bat', 'type': 'User'}, {'comment_id': 657895075, 'comment_body': '```suggestion\r\n        self.labels_map = {i: label for i, label in enumerate(labels)}\r\n```', 'comment_created': datetime.datetime(2021, 6, 24, 12, 20, 16, tzinfo=datetime.timezone.utc), 'commenter': 'l-bat', 'type': 'User'}, {'comment_id': 659515177, 'comment_body': 'Could you try forward net with OpenVINO (cv.dnn.DNN_BACKEND_INFERENCE_ENGINE)?', 'comment_created': datetime.datetime(2021, 6, 28, 6, 37, 42, tzinfo=datetime.timezone.utc), 'commenter': 'l-bat', 'type': 'User'}, {'comment_id': 659515199, 'comment_body': 'Could you please add `cv.dnn.DNN_TARGET_OPENCL_FP16`?', 'comment_created': datetime.datetime(2021, 6, 28, 6, 37, 44, tzinfo=datetime.timezone.utc), 'commenter': 'l-bat', 'type': 'User'}, {'comment_id': 659701072, 'comment_body': ""I tried. It gave this error: `error: (-213:The function/feature is not implemented) Unknown backend identifier in function 'cv::dnn::dnn4_v20210301::wrapMat'`"", 'comment_created': datetime.datetime(2021, 6, 28, 11, 24, 14, tzinfo=datetime.timezone.utc), 'commenter': 'spazewalker', 'type': 'User'}, {'comment_id': 660392947, 'comment_body': 'Do we need to specify supported audio formats?', 'comment_created': datetime.datetime(2021, 6, 29, 8, 24, 31, tzinfo=datetime.timezone.utc), 'commenter': 'l-bat', 'type': 'User'}, {'comment_id': 660393846, 'comment_body': ""I'm not sure that Halide backend supports Jasper"", 'comment_created': datetime.datetime(2021, 6, 29, 8, 25, 40, tzinfo=datetime.timezone.utc), 'commenter': 'l-bat', 'type': 'User'}, {'comment_id': 660395833, 'comment_body': 'I think we need to add `required=True`', 'comment_created': datetime.datetime(2021, 6, 29, 8, 28, 10, tzinfo=datetime.timezone.utc), 'commenter': 'l-bat', 'type': 'User'}, {'comment_id': 660397124, 'comment_body': 'No parentheses needed', 'comment_created': datetime.datetime(2021, 6, 29, 8, 29, 44, tzinfo=datetime.timezone.utc), 'commenter': 'l-bat', 'type': 'User'}, {'comment_id': 660417722, 'comment_body': 'Finally, we need to use AudioIO. So, should I add the formats supported there? I suppose mp3, wav and mp4 are supported.', 'comment_created': datetime.datetime(2021, 6, 29, 8, 55, 56, tzinfo=datetime.timezone.utc), 'commenter': 'spazewalker', 'type': 'User'}, {'comment_id': 660421412, 'comment_body': 'I forgot to remove this. I was checking if it does.', 'comment_created': datetime.datetime(2021, 6, 29, 9, 0, 25, tzinfo=datetime.timezone.utc), 'commenter': 'spazewalker', 'type': 'User'}, {'comment_id': 660520912, 'comment_body': 'Why output[0] is needed?\r\nIs the first dimension always equal to 1? For any batch size? \r\n', 'comment_created': datetime.datetime(2021, 6, 29, 11, 21, 32, tzinfo=datetime.timezone.utc), 'commenter': 'l-bat', 'type': 'User'}, {'comment_id': 660879207, 'comment_body': 'Since this script handles a single audio file, which is treated as batch size 1, the input to jasper is always of shape (1,64,?) and gives an output of shape (1,?,29).', 'comment_created': datetime.datetime(2021, 6, 29, 18, 48, 49, tzinfo=datetime.timezone.utc), 'commenter': 'spazewalker', 'type': 'User'}, {'comment_id': 663712122, 'comment_body': 'Could you please check how model works with several audio files (batch size >1)? ', 'comment_created': datetime.datetime(2021, 7, 5, 7, 48, 36, tzinfo=datetime.timezone.utc), 'commenter': 'l-bat', 'type': 'User'}, {'comment_id': 687417389, 'comment_body': '```suggestion\r\n        assert audio.shape[0] == 1\r\n        X = audio[0]\r\n        seq_len = np.array([X.shape[0]], dtype=np.int32)\r\n```', 'comment_created': datetime.datetime(2021, 8, 12, 6, 14, 44, tzinfo=datetime.timezone.utc), 'commenter': 'l-bat', 'type': 'User'}, {'comment_id': 687417566, 'comment_body': '```suggestion\r\n    features = feature_extractor.calculate_features(x=X, seq_len=seq_len)\r\n```', 'comment_created': datetime.datetime(2021, 8, 12, 6, 15, 11, tzinfo=datetime.timezone.utc), 'commenter': 'l-bat', 'type': 'User'}, {'comment_id': 687417679, 'comment_body': ""```suggestion\r\n        img = cv.applyColorMap(img, cv.COLORMAP_JET)\r\n        cv.imshow('spectogram', img)\r\n```"", 'comment_created': datetime.datetime(2021, 8, 12, 6, 15, 29, tzinfo=datetime.timezone.utc), 'commenter': 'l-bat', 'type': 'User'}, {'comment_id': 687418434, 'comment_body': '```suggestion\r\n        print(""Transcript was written to {}"".format(args.output))\r\n```', 'comment_created': datetime.datetime(2021, 8, 12, 6, 17, 11, tzinfo=datetime.timezone.utc), 'commenter': 'l-bat', 'type': 'User'}, {'comment_id': 692859096, 'comment_body': 'What do you think about replace it to \r\n```suggestion\r\n    prediction = decoder.decode(output.squeeze(0))\r\n```\r\n?', 'comment_created': datetime.datetime(2021, 8, 20, 11, 0, 25, tzinfo=datetime.timezone.utc), 'commenter': 'l-bat', 'type': 'User'}, {'comment_id': 693015271, 'comment_body': ""that's better"", 'comment_created': datetime.datetime(2021, 8, 20, 15, 0, 1, tzinfo=datetime.timezone.utc), 'commenter': 'spazewalker', 'type': 'User'}, {'comment_id': 693016657, 'comment_body': ""Let me commit it here. There are a lot of commits in this PR at this point. I'll rebase it before finalizing."", 'comment_created': datetime.datetime(2021, 8, 20, 15, 1, 57, tzinfo=datetime.timezone.utc), 'commenter': 'spazewalker', 'type': 'User'}]","[{'commit_sha': '8f3f246c4a7e965ac377a6d2a84af0c282d60ffc', 'committer_username': 'spazewalker', 'committer_name': 'Shivanshu Tyagi', 'committer_email': 'shivanshutyagi3@gmail.com', 'commit_date': datetime.datetime(2018, 8, 12, 15, 14, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc5c445e50b6499dc2a553e35c0be0a9c4e4b17b', 'committer_username': 'spazewalker', 'committer_name': 'Shivanshu Tyagi', 'committer_email': 'shivanshutyagi3@gmail.com', 'commit_date': datetime.datetime(2018, 8, 12, 15, 14, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0825f1fd90a0b036b95a701216620c04e5068597', 'committer_username': 'spazewalker', 'committer_name': 'Shivanshu Tyagi', 'committer_email': 'shivanshutyagi3@gmail.com', 'commit_date': datetime.datetime(2018, 8, 12, 15, 14, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b74aae6ca353c667f1dbfba615d7ef18bcdbb349', 'committer_username': 'spazewalker', 'committer_name': 'Shivanshu Tyagi', 'committer_email': 'shivanshutyagi3@gmail.com', 'commit_date': datetime.datetime(2018, 8, 12, 15, 14, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '28a326921ad0397fc3008a413c3c8b64b98f5a26', 'committer_username': 'spazewalker', 'committer_name': 'Shivanshu Tyagi', 'committer_email': 'shivanshutyagi3@gmail.com', 'commit_date': datetime.datetime(2018, 8, 12, 15, 14, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e42d86c2e6fbd19711d3f4665cb05dc70f0ed22c', 'committer_username': 'spazewalker', 'committer_name': 'Shivanshu Tyagi', 'committer_email': 'shivanshutyagi3@gmail.com', 'commit_date': datetime.datetime(2018, 8, 12, 15, 14, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '010cc97a9b31c30e5b433b1988f9fa1024aff276', 'committer_username': 'spazewalker', 'committer_name': 'Shivanshu Tyagi', 'committer_email': 'shivanshutyagi3@gmail.com', 'commit_date': datetime.datetime(2018, 8, 12, 15, 14, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5a8d001520eb698968c55f6de0d91bdbf8b23f7', 'committer_username': 'spazewalker', 'committer_name': 'Shivanshu Tyagi', 'committer_email': 'shivanshutyagi3@gmail.com', 'commit_date': datetime.datetime(2018, 8, 12, 15, 14, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd57bde7d8818181aa65a622af9593095320f7a95', 'committer_username': 'spazewalker', 'committer_name': 'Shivanshu Tyagi', 'committer_email': 'shivanshutyagi3@gmail.com', 'commit_date': datetime.datetime(2018, 8, 12, 15, 14, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e9f11589bf5fae103b37d16b146dbfa60db3754', 'committer_username': 'spazewalker', 'committer_name': 'Shivanshu Tyagi', 'committer_email': 'shivanshutyagi3@gmail.com', 'commit_date': datetime.datetime(2018, 8, 12, 15, 14, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62099d546ea45f5ce27e3cde0486f84b92a98e53', 'committer_username': 'spazewalker', 'committer_name': 'Shivanshu Tyagi', 'committer_email': 'shivanshutyagi3@gmail.com', 'commit_date': datetime.datetime(2018, 8, 12, 15, 14, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ddfa7de6a9ff8f718b160effe2e73fccd0cceea', 'committer_username': 'spazewalker', 'committer_name': 'Shivanshu Tyagi', 'committer_email': 'shivanshutyagi3@gmail.com', 'commit_date': datetime.datetime(2018, 8, 12, 15, 14, 29, tzinfo=datetime.timezone.utc)}]",Shivanshu Tyagi,42320317,shivanshutyagi3@gmail.com,User,,39,,127,80
674770047,speech recognition sample,"### GSoC 2021: Speech Recognition using OpenCV AudioIO
#### Project details
* Mentor : @l-bat 
* Project proposal : https://summerofcode.withgoogle.com/projects/#5148521881141248

#### PR details
##### Creating ONNX model
NVIDIA trained jasper using FP16 precision. OpenCV needs FP32. We need to change onnx model's graph. This is done using this script : [convert_jasper_to_FP32.py](https://gist.github.com/spazewalker/507f1529e19aea7e8417f6e935851a01). Pre-trained converted onnx can be found [here](https://drive.google.com/drive/folders/1wLtxyao4ItAg8tt4Sb63zt6qXzhcQoR6?usp=sharing). Original pre-trained model by NVIDIA can be found [here](https://ngc.nvidia.com/catalog/models/nvidia:jasper_pyt_onnx_fp16_amp/files).

#### Usage
```bash
usage: speech_recognition.py [-h] --input_audio INPUT_AUDIO [--show_spectrogram] [--model MODEL] [--output OUTPUT] [--backend {0,2,3}] [--target {0,1,2}]

This script runs Jasper Speech recognition model

optional arguments:
  -h, --help            show this help message and exit
  --input_audio INPUT_AUDIO
                        Path to input audio file. OR Path to a txt file with relative path to multiple audio files in different lines (default: None)
  --show_spectrogram    Whether to show a spectrogram of the input audio. (default: False)
  --model MODEL         Path to the onnx file of Jasper. default=""jasper.onnx"" (default: jasper.onnx)
  --output OUTPUT       Path to file where recognized audio transcript must be saved. Leave this to print on console. (default: None)
  --backend {0,2,3}     Select a computation backend: 0: automatically (by default) 2: OpenVINO Inference Engine 3: OpenCV Implementation (default: 0)
  --target {0,1,2}      Select a target device: 0: CPU target (by default) 1: OpenCL 2: OpenCL FP16 (default: 0)
```

#### Todo
- [ ] Use AudioIO instead of soundfile.
- [ ] Check performance.

### Pull Request Readiness Checklist

See details at https://github.com/opencv/opencv/wiki/How_to_contribute#making-a-good-pull-request

- [x] I agree to contribute to the project under Apache 2 License.
- [x] To the best of my knowledge, the proposed patch is not based on a code under GPL or other license that is incompatible with OpenCV
- [x] The PR is proposed to proper branch
- [x] There is reference to original bug report and related work
- [x] There is accuracy test, performance test and test data in opencv_extra repository, if applicable
      Patch to opencv_extra has the same branch name.
- [x] The feature is well documented and sample code can be built with the project CMake

```
force_builders=Docs
```",True,20291,https://api.github.com/repos/opencv/opencv/pulls/20291,https://github.com/opencv/opencv/pull/20291,closed,506,0,1,12,6,25,4,1,"[{'name': 'feature'}, {'name': 'category: samples'}, {'name': 'GSoC'}, {'name': 'category: dnn'}]",2021-06-21 18:09:24+00:00,2021-10-04 18:18:02+00:00,9072518.0,"105 days, 0:08:38","[{'comment_id': 655606796, 'comment_body': 'Can you use OpenCV instead of  `plt`?', 'comment_created': datetime.datetime(2021, 6, 21, 18, 19, tzinfo=datetime.timezone.utc), 'commenter': 'l-bat', 'type': 'User'}, {'comment_id': 655607279, 'comment_body': '```suggestion\r\nimport argparse\r\nimport os\r\n```', 'comment_created': datetime.datetime(2021, 6, 21, 18, 19, 49, tzinfo=datetime.timezone.utc), 'commenter': 'l-bat', 'type': 'User'}, {'comment_id': 656830450, 'comment_body': '```suggestion\r\n    feature_extractor = FilterbankFeatures()\r\n```', 'comment_created': datetime.datetime(2021, 6, 23, 7, 27, 27, tzinfo=datetime.timezone.utc), 'commenter': 'l-bat', 'type': 'User'}, {'comment_id': 656830700, 'comment_body': ""Please follow PEP8\r\n```suggestion\r\n        img = cv.applyColorMap(img, cv.COLORMAP_JET)\r\n        cv.imshow('spectogram', img)\r\n```"", 'comment_created': datetime.datetime(2021, 6, 23, 7, 27, 45, tzinfo=datetime.timezone.utc), 'commenter': 'l-bat', 'type': 'User'}, {'comment_id': 656834568, 'comment_body': '```suggestion\r\n        x = self.normalize_batch(x, seq_len).astype(dtype)\r\n```', 'comment_created': datetime.datetime(2021, 6, 23, 7, 33, 5, tzinfo=datetime.timezone.utc), 'commenter': 'l-bat', 'type': 'User'}, {'comment_id': 657895075, 'comment_body': '```suggestion\r\n        self.labels_map = {i: label for i, label in enumerate(labels)}\r\n```', 'comment_created': datetime.datetime(2021, 6, 24, 12, 20, 16, tzinfo=datetime.timezone.utc), 'commenter': 'l-bat', 'type': 'User'}, {'comment_id': 659515177, 'comment_body': 'Could you try forward net with OpenVINO (cv.dnn.DNN_BACKEND_INFERENCE_ENGINE)?', 'comment_created': datetime.datetime(2021, 6, 28, 6, 37, 42, tzinfo=datetime.timezone.utc), 'commenter': 'l-bat', 'type': 'User'}, {'comment_id': 659515199, 'comment_body': 'Could you please add `cv.dnn.DNN_TARGET_OPENCL_FP16`?', 'comment_created': datetime.datetime(2021, 6, 28, 6, 37, 44, tzinfo=datetime.timezone.utc), 'commenter': 'l-bat', 'type': 'User'}, {'comment_id': 659701072, 'comment_body': ""I tried. It gave this error: `error: (-213:The function/feature is not implemented) Unknown backend identifier in function 'cv::dnn::dnn4_v20210301::wrapMat'`"", 'comment_created': datetime.datetime(2021, 6, 28, 11, 24, 14, tzinfo=datetime.timezone.utc), 'commenter': 'spazewalker', 'type': 'User'}, {'comment_id': 660392947, 'comment_body': 'Do we need to specify supported audio formats?', 'comment_created': datetime.datetime(2021, 6, 29, 8, 24, 31, tzinfo=datetime.timezone.utc), 'commenter': 'l-bat', 'type': 'User'}, {'comment_id': 660393846, 'comment_body': ""I'm not sure that Halide backend supports Jasper"", 'comment_created': datetime.datetime(2021, 6, 29, 8, 25, 40, tzinfo=datetime.timezone.utc), 'commenter': 'l-bat', 'type': 'User'}, {'comment_id': 660395833, 'comment_body': 'I think we need to add `required=True`', 'comment_created': datetime.datetime(2021, 6, 29, 8, 28, 10, tzinfo=datetime.timezone.utc), 'commenter': 'l-bat', 'type': 'User'}, {'comment_id': 660397124, 'comment_body': 'No parentheses needed', 'comment_created': datetime.datetime(2021, 6, 29, 8, 29, 44, tzinfo=datetime.timezone.utc), 'commenter': 'l-bat', 'type': 'User'}, {'comment_id': 660417722, 'comment_body': 'Finally, we need to use AudioIO. So, should I add the formats supported there? I suppose mp3, wav and mp4 are supported.', 'comment_created': datetime.datetime(2021, 6, 29, 8, 55, 56, tzinfo=datetime.timezone.utc), 'commenter': 'spazewalker', 'type': 'User'}, {'comment_id': 660421412, 'comment_body': 'I forgot to remove this. I was checking if it does.', 'comment_created': datetime.datetime(2021, 6, 29, 9, 0, 25, tzinfo=datetime.timezone.utc), 'commenter': 'spazewalker', 'type': 'User'}, {'comment_id': 660520912, 'comment_body': 'Why output[0] is needed?\r\nIs the first dimension always equal to 1? For any batch size? \r\n', 'comment_created': datetime.datetime(2021, 6, 29, 11, 21, 32, tzinfo=datetime.timezone.utc), 'commenter': 'l-bat', 'type': 'User'}, {'comment_id': 660879207, 'comment_body': 'Since this script handles a single audio file, which is treated as batch size 1, the input to jasper is always of shape (1,64,?) and gives an output of shape (1,?,29).', 'comment_created': datetime.datetime(2021, 6, 29, 18, 48, 49, tzinfo=datetime.timezone.utc), 'commenter': 'spazewalker', 'type': 'User'}, {'comment_id': 663712122, 'comment_body': 'Could you please check how model works with several audio files (batch size >1)? ', 'comment_created': datetime.datetime(2021, 7, 5, 7, 48, 36, tzinfo=datetime.timezone.utc), 'commenter': 'l-bat', 'type': 'User'}, {'comment_id': 687417389, 'comment_body': '```suggestion\r\n        assert audio.shape[0] == 1\r\n        X = audio[0]\r\n        seq_len = np.array([X.shape[0]], dtype=np.int32)\r\n```', 'comment_created': datetime.datetime(2021, 8, 12, 6, 14, 44, tzinfo=datetime.timezone.utc), 'commenter': 'l-bat', 'type': 'User'}, {'comment_id': 687417566, 'comment_body': '```suggestion\r\n    features = feature_extractor.calculate_features(x=X, seq_len=seq_len)\r\n```', 'comment_created': datetime.datetime(2021, 8, 12, 6, 15, 11, tzinfo=datetime.timezone.utc), 'commenter': 'l-bat', 'type': 'User'}, {'comment_id': 687417679, 'comment_body': ""```suggestion\r\n        img = cv.applyColorMap(img, cv.COLORMAP_JET)\r\n        cv.imshow('spectogram', img)\r\n```"", 'comment_created': datetime.datetime(2021, 8, 12, 6, 15, 29, tzinfo=datetime.timezone.utc), 'commenter': 'l-bat', 'type': 'User'}, {'comment_id': 687418434, 'comment_body': '```suggestion\r\n        print(""Transcript was written to {}"".format(args.output))\r\n```', 'comment_created': datetime.datetime(2021, 8, 12, 6, 17, 11, tzinfo=datetime.timezone.utc), 'commenter': 'l-bat', 'type': 'User'}, {'comment_id': 692859096, 'comment_body': 'What do you think about replace it to \r\n```suggestion\r\n    prediction = decoder.decode(output.squeeze(0))\r\n```\r\n?', 'comment_created': datetime.datetime(2021, 8, 20, 11, 0, 25, tzinfo=datetime.timezone.utc), 'commenter': 'l-bat', 'type': 'User'}, {'comment_id': 693015271, 'comment_body': ""that's better"", 'comment_created': datetime.datetime(2021, 8, 20, 15, 0, 1, tzinfo=datetime.timezone.utc), 'commenter': 'spazewalker', 'type': 'User'}, {'comment_id': 693016657, 'comment_body': ""Let me commit it here. There are a lot of commits in this PR at this point. I'll rebase it before finalizing."", 'comment_created': datetime.datetime(2021, 8, 20, 15, 1, 57, tzinfo=datetime.timezone.utc), 'commenter': 'spazewalker', 'type': 'User'}]","[{'commit_sha': '8f3f246c4a7e965ac377a6d2a84af0c282d60ffc', 'committer_username': 'spazewalker', 'committer_name': 'Shivanshu Tyagi', 'committer_email': 'shivanshutyagi3@gmail.com', 'commit_date': datetime.datetime(2018, 8, 12, 15, 14, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc5c445e50b6499dc2a553e35c0be0a9c4e4b17b', 'committer_username': 'spazewalker', 'committer_name': 'Shivanshu Tyagi', 'committer_email': 'shivanshutyagi3@gmail.com', 'commit_date': datetime.datetime(2018, 8, 12, 15, 14, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0825f1fd90a0b036b95a701216620c04e5068597', 'committer_username': 'spazewalker', 'committer_name': 'Shivanshu Tyagi', 'committer_email': 'shivanshutyagi3@gmail.com', 'commit_date': datetime.datetime(2018, 8, 12, 15, 14, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b74aae6ca353c667f1dbfba615d7ef18bcdbb349', 'committer_username': 'spazewalker', 'committer_name': 'Shivanshu Tyagi', 'committer_email': 'shivanshutyagi3@gmail.com', 'commit_date': datetime.datetime(2018, 8, 12, 15, 14, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '28a326921ad0397fc3008a413c3c8b64b98f5a26', 'committer_username': 'spazewalker', 'committer_name': 'Shivanshu Tyagi', 'committer_email': 'shivanshutyagi3@gmail.com', 'commit_date': datetime.datetime(2018, 8, 12, 15, 14, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e42d86c2e6fbd19711d3f4665cb05dc70f0ed22c', 'committer_username': 'spazewalker', 'committer_name': 'Shivanshu Tyagi', 'committer_email': 'shivanshutyagi3@gmail.com', 'commit_date': datetime.datetime(2018, 8, 12, 15, 14, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '010cc97a9b31c30e5b433b1988f9fa1024aff276', 'committer_username': 'spazewalker', 'committer_name': 'Shivanshu Tyagi', 'committer_email': 'shivanshutyagi3@gmail.com', 'commit_date': datetime.datetime(2018, 8, 12, 15, 14, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5a8d001520eb698968c55f6de0d91bdbf8b23f7', 'committer_username': 'spazewalker', 'committer_name': 'Shivanshu Tyagi', 'committer_email': 'shivanshutyagi3@gmail.com', 'commit_date': datetime.datetime(2018, 8, 12, 15, 14, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd57bde7d8818181aa65a622af9593095320f7a95', 'committer_username': 'spazewalker', 'committer_name': 'Shivanshu Tyagi', 'committer_email': 'shivanshutyagi3@gmail.com', 'commit_date': datetime.datetime(2018, 8, 12, 15, 14, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e9f11589bf5fae103b37d16b146dbfa60db3754', 'committer_username': 'spazewalker', 'committer_name': 'Shivanshu Tyagi', 'committer_email': 'shivanshutyagi3@gmail.com', 'commit_date': datetime.datetime(2018, 8, 12, 15, 14, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62099d546ea45f5ce27e3cde0486f84b92a98e53', 'committer_username': 'spazewalker', 'committer_name': 'Shivanshu Tyagi', 'committer_email': 'shivanshutyagi3@gmail.com', 'commit_date': datetime.datetime(2018, 8, 12, 15, 14, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ddfa7de6a9ff8f718b160effe2e73fccd0cceea', 'committer_username': 'spazewalker', 'committer_name': 'Shivanshu Tyagi', 'committer_email': 'shivanshutyagi3@gmail.com', 'commit_date': datetime.datetime(2018, 8, 12, 15, 14, 29, tzinfo=datetime.timezone.utc)}]",Shivanshu Tyagi,42320317,shivanshutyagi3@gmail.com,User,,39,,127,80
697103180,pass 3d arrays from py to cpp,"addressing #19091
> Currently OpenCV Python bindings ""automatically"" converts 3D NumPy arrays into 2D cv::Mat with wrapping last dimension onto number of channels (to simulate Image with colors)

We don't need to treat array passed from `dnn::net::setInput()` as an image. `isImage` in `ArgInfo` class does that in this solution.

> relates #17272
> relates #19001
> probably relates #18413 #17456

### Pull Request Readiness Checklist

See details at https://github.com/opencv/opencv/wiki/How_to_contribute#making-a-good-pull-request

- [x] I agree to contribute to the project under Apache 2 License.
- [x] To the best of my knowledge, the proposed patch is not based on a code under GPL or other license that is incompatible with OpenCV
- [x] The PR is proposed to proper branch
- [x] There is reference to original bug report and related work
- [ ] There is accuracy test, performance test and test data in opencv_extra repository, if applicable
      Patch to opencv_extra has the same branch name.
- [ ] The feature is well documented and sample code can be built with the project CMake
",False,20462,https://api.github.com/repos/opencv/opencv/pulls/20462,https://github.com/opencv/opencv/pull/20462,closed,9,2,2,1,1,1,3,0,"[{'name': 'category: python bindings'}, {'name': 'GSoC'}, {'name': 'category: dnn'}]",2021-07-26 14:54:43+00:00,2021-08-23 07:29:34+00:00,2392491.0,"27 days, 16:34:51","[{'comment_id': 684108887, 'comment_body': 'In general, this approach is a breaking change of existed API.\r\n\r\n@l-bat Could you try to apply workaround similar to #20480? Something like:\r\n\r\n```.python\r\ninput = np.expand_dims(input, axis=2)  # Workaround for: https://github.com/opencv/opencv/issues/19091\r\n```\r\n\r\nwith comment with reference on the issue #19091.', 'comment_created': datetime.datetime(2021, 8, 6, 9, 53, 34, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}]","[{'commit_sha': '7ffe08a1a2fcc5994f407ef922421396e3cda4c2', 'committer_username': 'spazewalker', 'committer_name': 'Shivanshu Tyagi', 'committer_email': 'shivanshutyagi3@gmail.com', 'commit_date': datetime.datetime(2018, 8, 12, 15, 14, 29, tzinfo=datetime.timezone.utc)}]",Shivanshu Tyagi,42320317,shivanshutyagi3@gmail.com,User,,39,,127,80
713645529,python: cv.Mat wrapper over numpy.ndarray,"resolves #19091

~~**On hold, merge after**: #20611~~

Usage:
```
# data3D = np.zeros((3,3,2))
cv.call(cv.Mat(data3D))
cv.call(data3D)  # passes as 2D array with the last dimension wrapped into channels (current behavior for images)
```

C++-written cv.Mat is not reliable with Python limited API and numpy 1.20+ (not stable ABI guarantee).
Package loader is required (OPENCV_SKIP_PYTHON_LOADER must be OFF).
No plans to backport to ""3.4"" maintenance branch.
No plans to support Python 2.7.

<cut/>

TODO:
- [x] update [documentation](http://pullrequest.opencv.org/buildbot/export/pr/20558/docs/da/d49/tutorial_py_bindings_basics.html)
- [ ] extra tests
- [ ] (backlog) support metadata (#18792)
- [ ] (backlog) output metadata propagation",True,20558,https://api.github.com/repos/opencv/opencv/pulls/20558,https://github.com/opencv/opencv/pull/20558,closed,244,17,5,1,2,8,4,1,"[{'name': 'bug'}, {'name': 'feature'}, {'name': 'category: python bindings'}, {'name': 'RFC'}]",2021-08-16 18:13:12+00:00,2021-09-26 17:42:01+00:00,3540529.0,"40 days, 23:28:49","[{'comment_id': 690225073, 'comment_body': ""Documentation to the `GetAttrString` says: _Return value: New reference_. Shouldn't we DECREF it somewhere?"", 'comment_created': datetime.datetime(2021, 8, 17, 10, 6, 15, tzinfo=datetime.timezone.utc), 'commenter': 'mshabunin', 'type': 'User'}, {'comment_id': 712191417, 'comment_body': 'It is better to wrap `pyobj_wrap_channels` to RAII object - `PySafeObject` that will call `Py_CLEAR` in destructor and has implicit conversion operators to `PyObject*` and `PyObject**`.\r\nIn this case manual `Py_DECREF` might be removed.', 'comment_created': datetime.datetime(2021, 9, 20, 13, 55, 37, tzinfo=datetime.timezone.utc), 'commenter': 'VadimLevin', 'type': 'User'}, {'comment_id': 712195415, 'comment_body': 'Reduce if to assignment?\r\n\r\n`needcopy = (ndims >=  1) && (_strides[ndims - 1] != static_cast<npy_intp>(elemsize) * _sizes[ndims]))`', 'comment_created': datetime.datetime(2021, 9, 20, 14, 0, 2, tzinfo=datetime.timezone.utc), 'commenter': 'VadimLevin', 'type': 'User'}, {'comment_id': 712212277, 'comment_body': 'Why `__init__` is required?\r\nI think `Mat` is [RealisticInfoArray](https://numpy.org/doc/stable/user/basics.subclassing.html#slightly-more-realistic-example-attribute-added-to-existing-array) from the user guide except that `Mat` should wrap only numeric types. For Python objects and strings it should raise `AssertionError` \r\n\r\nAnd it is better to explicitly add `wrap_channels` argument to `__new__` with the documentation string.', 'comment_created': datetime.datetime(2021, 9, 20, 14, 18, 59, tzinfo=datetime.timezone.utc), 'commenter': 'VadimLevin', 'type': 'User'}, {'comment_id': 712224086, 'comment_body': '2 practical use cases to test:\r\n1. Create a `Mat` wrapper for `ndarray` and try to use one of the NumPy `ufunc`s e.g.:\r\n```python\r\ndata = np.arange(10)\r\nmat_data = cv.Mat(data)\r\nnp.testing.assert_equal(2 * data, 2 * mat_data)\r\n```\r\n2. Should 2 `Mat` objects constructed with different value of `wrap_channels` property be treated as equals?\r\n```python\r\ndata = np.ones((10, 10, 3))\r\nmat_wrapped = cv.Mat(data, wrap_channels=True)\r\nmat_simple = cv.Mat(data)\r\nself.assertEqual(mat_wrapped, mat_simple) # ???\r\n``` ', 'comment_created': datetime.datetime(2021, 9, 20, 14, 31, 44, tzinfo=datetime.timezone.utc), 'commenter': 'VadimLevin', 'type': 'User'}, {'comment_id': 712427545, 'comment_body': 'we don\'t want to ""reset"" previous value (see line 775).', 'comment_created': datetime.datetime(2021, 9, 20, 18, 49, 7, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 712441203, 'comment_body': 'It make sense to keep instance custom initialization in `__init__` instead of `__new__`.\r\n- https://docs.python.org/3/reference/datamodel.html\r\n- debugging purposes\r\n- code autocompletion works better with `__init__`\r\n\r\n---\r\n\r\nI thought about pre-checks too, but they can be added later. At least to keep this patch minimal. Currently such cases are catched in cv2.cpp anyway.', 'comment_created': datetime.datetime(2021, 9, 20, 19, 9, 28, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 712684268, 'comment_body': ""@VadimLevin Thank you for the review!\r\n\r\nI added `ufunc` test case.\r\nComparison is tricky for now (numpy `==` returns an array which can't be casted to boolean result without `.any`/`.all` calls), so I would like to postpone introducing of custom comparison overloads."", 'comment_created': datetime.datetime(2021, 9, 21, 4, 22, 16, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}]","[{'commit_sha': '0c10ae18615f7c05f327ac9eebed24f2699b2394', 'committer_username': 'alalek', 'committer_name': 'Alexander Alekhin', 'committer_email': 'alexander.a.alekhin@gmail.com', 'commit_date': datetime.datetime(2013, 7, 10, 11, 32, 49, tzinfo=datetime.timezone.utc)}]",Alexander Alekhin,4981219,alexander.a.alekhin@gmail.com,User,,20,,0,483

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
5108051,opencv,opencv/opencv,C++,55712,77533,2656,2193,34477,2612,6,138,"[{'id': 985150278, 'number': 22181, 'closed': None, 'created': datetime.datetime(2022, 7, 1, 16, 40, 27, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 264, 'deletions': 0, 'state': 'open'}, {'id': 697103180, 'number': 20462, 'closed': datetime.datetime(2021, 8, 23, 7, 29, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 26, 14, 54, 43, tzinfo=datetime.timezone.utc), 'time_taken': 2392491.0, 'time_delta': '27 days, 16:34:51', 'additions': 9, 'deletions': 2, 'state': 'closed'}, {'id': 674770047, 'number': 20291, 'closed': datetime.datetime(2021, 10, 4, 18, 18, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 21, 18, 9, 24, tzinfo=datetime.timezone.utc), 'time_taken': 9072518.0, 'time_delta': '105 days, 0:08:38', 'additions': 506, 'deletions': 0, 'state': 'closed'}]"
