pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1479063074,memfd_secret: add memfd-secret file support,Fixes: https://github.com/checkpoint-restore/criu/issues/2188,False,2247,https://api.github.com/repos/checkpoint-restore/criu/pulls/2247,https://github.com/checkpoint-restore/criu/pull/2247,open,752,8,30,5,3,61,1,1,[{'name': 'no-auto-close'}],2023-08-17 13:35:56+00:00,,0.0,,"[{'comment_id': 1297241592, 'comment_body': '## Comparison result is always the same\n\nComparison is always false because fd <= -1.\n\n[Show more details](https://github.com/checkpoint-restore/criu/security/code-scanning/357)', 'comment_created': datetime.datetime(2023, 8, 17, 13, 41, 41, tzinfo=datetime.timezone.utc), 'commenter': 'github-advanced-security[bot]', 'type': 'Bot'}, {'comment_id': 1297241598, 'comment_body': '## Comparison result is always the same\n\nComparison is always true because st >= 0.\n\n[Show more details](https://github.com/checkpoint-restore/criu/security/code-scanning/358)', 'comment_created': datetime.datetime(2023, 8, 17, 13, 41, 41, tzinfo=datetime.timezone.utc), 'commenter': 'github-advanced-security[bot]', 'type': 'Bot'}, {'comment_id': 1297856773, 'comment_body': 'https://protobuf.dev/programming-guides/proto2/#specifying-rules\r\n```Suggestion\r\n        optional uint64         secretmem_id = 11;\r\n```', 'comment_created': datetime.datetime(2023, 8, 17, 23, 51, 37, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 1298132576, 'comment_body': 'thanks @rst0git :) done!', 'comment_created': datetime.datetime(2023, 8, 18, 7, 52, 52, tzinfo=datetime.timezone.utc), 'commenter': 'warusadura', 'type': 'User'}, {'comment_id': 1298200216, 'comment_body': 'Bad alignment.\r\n\r\nPlease fix lint https://github.com/checkpoint-restore/criu/actions/runs/5900193483/job/16003986871?pr=2247 and other CI tests.', 'comment_created': datetime.datetime(2023, 8, 18, 9, 0, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Snorch', 'type': 'User'}, {'comment_id': 1298283421, 'comment_body': ""Thanks @Snorch :) just fixed the lint.\r\n\r\nRe: other CI tests: most of the CI tests are failing because, they don't have access to `memfd_secret` syscall. To enable `memfd_secret` syscall, we have to set kernel boot parameter `secretmem.enable=1`. How can I do this in CI?"", 'comment_created': datetime.datetime(2023, 8, 18, 10, 17, 24, tzinfo=datetime.timezone.utc), 'commenter': 'warusadura', 'type': 'User'}, {'comment_id': 1298363860, 'comment_body': ""That is a good question:\r\n\r\nFirst, you should detect syscall availability in kerndat and skip zdtm tests for it and skip criu using it in case it is not available. (For instance like this: test/zdtm/static/mount_complex_sharing.desc:    'feature': 'move_mount_set_group',)\r\n\r\nSecond, we need to have test in CI with secretmem.enable=1, but I'm not sure how to do it, maybe someone more experienced with CI knows if we can control kernel boot options? @checkpoint-restore/maintainers "", 'comment_created': datetime.datetime(2023, 8, 18, 11, 53, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Snorch', 'type': 'User'}, {'comment_id': 1298365778, 'comment_body': 'Either ALL branches of conditional should have {} or ALL branches should not have {}, there should not be any mixed thing.', 'comment_created': datetime.datetime(2023, 8, 18, 11, 55, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Snorch', 'type': 'User'}, {'comment_id': 1298371040, 'comment_body': 'thanks @Snorch ', 'comment_created': datetime.datetime(2023, 8, 18, 12, 1, 56, tzinfo=datetime.timezone.utc), 'commenter': 'warusadura', 'type': 'User'}, {'comment_id': 1299196650, 'comment_body': 'done, thanks!', 'comment_created': datetime.datetime(2023, 8, 19, 14, 17, 55, tzinfo=datetime.timezone.utc), 'commenter': 'warusadura', 'type': 'User'}, {'comment_id': 1306946031, 'comment_body': ""I have implemented the `.desc` [file](https://github.com/checkpoint-restore/criu/blob/4992514cbff0748622ca0abb4fc6b2ecc638b948/test/zdtm/static/memfd-secret00.desc) to skip zdtm tests if `memfd_secret` [feature](https://github.com/checkpoint-restore/criu/blob/4992514cbff0748622ca0abb4fc6b2ecc638b948/criu/cr-check.c#L1635) isn't available.\r\n\r\nAlso, to fix the failing CI tests due to the unavailability of `memfd_secret` syscall, I tried modifying the `FEATURES_LIST` in [Makefile.config](https://github.com/checkpoint-restore/criu/blob/4992514cbff0748622ca0abb4fc6b2ecc638b948/Makefile.config#L82). And updated the [`scripts/feature-tests.mak`](https://github.com/checkpoint-restore/criu/blob/4992514cbff0748622ca0abb4fc6b2ecc638b948/scripts/feature-tests.mak#L175). Then iteratively (looking at the failing CIs), included conditional compilation macros around the `memfd_secret` related code. For example see [`kerndat_get_secretmem_dev()`](https://github.com/checkpoint-restore/criu/blob/4992514cbff0748622ca0abb4fc6b2ecc638b948/criu/kerndat.c#L261).\r\n\r\nI'm not sure this is the right approach to do this. But, these changes fix a few important CI tests (initial passing CI count: `11`, now it's `29`+) such as `ci/circleci: test-local-gcc` and ` ci/circleci: test-local-clang`. What do you think @Snorch :)"", 'comment_created': datetime.datetime(2023, 8, 28, 6, 3, 11, tzinfo=datetime.timezone.utc), 'commenter': 'warusadura', 'type': 'User'}, {'comment_id': 1307094456, 'comment_body': '@warusadura there is no need to define memfd_secret feature statically. If `memfd_secret` is not available, the system call will return `-ENOSYS` and it is enough to implement a dynamic check for `memfd_secret` availability.', 'comment_created': datetime.datetime(2023, 8, 28, 8, 14, tzinfo=datetime.timezone.utc), 'commenter': 'rppt', 'type': 'User'}, {'comment_id': 1307097361, 'comment_body': ""Let's make it Simferopol, my home town :)"", 'comment_created': datetime.datetime(2023, 8, 28, 8, 16, 50, tzinfo=datetime.timezone.utc), 'commenter': 'rppt', 'type': 'User'}, {'comment_id': 1307101490, 'comment_body': 'Please use `__NR_memfd_secret`', 'comment_created': datetime.datetime(2023, 8, 28, 8, 20, 37, tzinfo=datetime.timezone.utc), 'commenter': 'rppt', 'type': 'User'}, {'comment_id': 1307105470, 'comment_body': 'understood, thanks @rppt :)', 'comment_created': datetime.datetime(2023, 8, 28, 8, 23, 56, tzinfo=datetime.timezone.utc), 'commenter': 'warusadura', 'type': 'User'}, {'comment_id': 1307114914, 'comment_body': '`ENOSYS` means that `memfd_secret` system call is not available. All the rest `errno` values mean that there was an actual error.', 'comment_created': datetime.datetime(2023, 8, 28, 8, 31, 51, tzinfo=datetime.timezone.utc), 'commenter': 'rppt', 'type': 'User'}, {'comment_id': 1307118639, 'comment_body': ""As I've mentioned earlier, we can detect availability of `memfd_secret` in runtime. If `syscall(__NR_memfd_secret, 0)` returns `-ENOSYS`, the system call is not available. Otherwise secretmem is enabled."", 'comment_created': datetime.datetime(2023, 8, 28, 8, 35, 24, tzinfo=datetime.timezone.utc), 'commenter': 'rppt', 'type': 'User'}, {'comment_id': 1307120648, 'comment_body': 'Missing `close(fd)`. Consider using `goto` for error path.', 'comment_created': datetime.datetime(2023, 8, 28, 8, 37, 20, tzinfo=datetime.timezone.utc), 'commenter': 'rppt', 'type': 'User'}, {'comment_id': 1307121988, 'comment_body': '`close(fd)`', 'comment_created': datetime.datetime(2023, 8, 28, 8, 37, 58, tzinfo=datetime.timezone.utc), 'commenter': 'rppt', 'type': 'User'}, {'comment_id': 1307131327, 'comment_body': ""I think it's better to structure the conditions here so that we return on errors and continue when everything is fine. And we can call `kerndat_get_secretmem_dev` from this function or probably even merge these two.\r\nE.g something along these lines:\r\n\r\n```\r\nkdat.has_memfd_secret = false;\r\nfd = memfd_secret(0);\r\nif (fd < 0) {\r\n\tif (errno == ENOSYS)\r\n\t\treturn 0;\r\n\treturn fd;\r\n}\r\n\r\nret = kerndat_get_secretmem_dev(fd);\r\nif (ret) {\r\n\tclose(fd);\r\n\treturn ret;\r\n}\r\n...\r\n```"", 'comment_created': datetime.datetime(2023, 8, 28, 8, 43, 34, tzinfo=datetime.timezone.utc), 'commenter': 'rppt', 'type': 'User'}, {'comment_id': 1307140528, 'comment_body': 'Consider using kernel style error handling: https://docs.kernel.org/process/coding-style.html#centralized-exiting-of-functions', 'comment_created': datetime.datetime(2023, 8, 28, 8, 50, 4, tzinfo=datetime.timezone.utc), 'commenter': 'rppt', 'type': 'User'}, {'comment_id': 1307144542, 'comment_body': 'Are we certain that previous cases cover all possibilities? And even if they do, for future compatibility I think it should be\r\n`else if (is_memfd_secret())` here', 'comment_created': datetime.datetime(2023, 8, 28, 8, 53, 51, tzinfo=datetime.timezone.utc), 'commenter': 'rppt', 'type': 'User'}, {'comment_id': 1307146463, 'comment_body': 'I think this file can be merged into `criu/memfd_secret.c`', 'comment_created': datetime.datetime(2023, 8, 28, 8, 55, 38, tzinfo=datetime.timezone.utc), 'commenter': 'rppt', 'type': 'User'}, {'comment_id': 1307151384, 'comment_body': 'Please use dynamic detection. If `syscall(__NR_memfd_secret, 0)` returns `-ENOSYS` just call `skip()` for the test', 'comment_created': datetime.datetime(2023, 8, 28, 9, 0, 4, tzinfo=datetime.timezone.utc), 'commenter': 'rppt', 'type': 'User'}, {'comment_id': 1307201298, 'comment_body': ""I agree that we don't need CONFIG_HAS_MEMFD_SECRET. But we also don't need a dynamic detection, we have desc file which will get this information from kerndat."", 'comment_created': datetime.datetime(2023, 8, 28, 9, 45, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Snorch', 'type': 'User'}, {'comment_id': 1307489445, 'comment_body': 'done, thanks!', 'comment_created': datetime.datetime(2023, 8, 28, 14, 18, 10, tzinfo=datetime.timezone.utc), 'commenter': 'warusadura', 'type': 'User'}, {'comment_id': 1307489889, 'comment_body': 'understood, thanks!', 'comment_created': datetime.datetime(2023, 8, 28, 14, 18, 33, tzinfo=datetime.timezone.utc), 'commenter': 'warusadura', 'type': 'User'}, {'comment_id': 1307490227, 'comment_body': 'done, thanks!', 'comment_created': datetime.datetime(2023, 8, 28, 14, 18, 49, tzinfo=datetime.timezone.utc), 'commenter': 'warusadura', 'type': 'User'}, {'comment_id': 1307492074, 'comment_body': 'Implemented the `desc` file for test.', 'comment_created': datetime.datetime(2023, 8, 28, 14, 20, 8, tzinfo=datetime.timezone.utc), 'commenter': 'warusadura', 'type': 'User'}, {'comment_id': 1307581792, 'comment_body': 'done, thanks!', 'comment_created': datetime.datetime(2023, 8, 28, 15, 31, 59, tzinfo=datetime.timezone.utc), 'commenter': 'warusadura', 'type': 'User'}, {'comment_id': 1307581979, 'comment_body': 'done, thanks!', 'comment_created': datetime.datetime(2023, 8, 28, 15, 32, 9, tzinfo=datetime.timezone.utc), 'commenter': 'warusadura', 'type': 'User'}, {'comment_id': 1308465199, 'comment_body': ""I have thought of this before and I agree with you Mike. But, the issue is, call to `is_memfd_secret(st_buf->st_dev)` here always returns false. I'm not sure why.\r\n\r\nFurthermore, the dump works even without this else block. But, the problem with this approach is `vma_area->e->status` is to `VMA_FILE_PRIVATE` not `VMA_AREA_MEMFD_SECRET` which is what we want.\r\n\r\nMoreover, we are already in a parent `else` [block](https://github.com/checkpoint-restore/criu/blob/8ee13b6536cb441c4c515b32dec357a6fca9affb/criu/proc_parse.c#L642) without any condition, and currently at the end of it. So, it kind of make sense. Plus, there is already another if [block](https://github.com/checkpoint-restore/criu/blob/8ee13b6536cb441c4c515b32dec357a6fca9affb/criu/proc_parse.c#L668) to handle other cases if needed."", 'comment_created': datetime.datetime(2023, 8, 29, 9, 12, 41, tzinfo=datetime.timezone.utc), 'commenter': 'warusadura', 'type': 'User'}, {'comment_id': 1308562717, 'comment_body': 'done :)', 'comment_created': datetime.datetime(2023, 8, 29, 10, 33, 1, tzinfo=datetime.timezone.utc), 'commenter': 'warusadura', 'type': 'User'}, {'comment_id': 1310020196, 'comment_body': ""@rppt I have updated the [`kerndat_get_secretmem_dev()`](https://github.com/checkpoint-restore/criu/blob/2e8fba61b9683904a1faf45ac53fef38dfdb648b/criu/kerndat.c#L261) and [`kerndat_has_memfd_secret()`](https://github.com/checkpoint-restore/criu/blob/2e8fba61b9683904a1faf45ac53fef38dfdb648b/criu/kerndat.c#L576) according to the previously requested changes (now resolved) . And I'm not clear why we need this change? Is it because, we are calling `memfd_secret()` syscall twice in both functions? "", 'comment_created': datetime.datetime(2023, 8, 30, 10, 0, 40, tzinfo=datetime.timezone.utc), 'commenter': 'warusadura', 'type': 'User'}, {'comment_id': 1314588078, 'comment_body': 'done.', 'comment_created': datetime.datetime(2023, 9, 4, 8, 14, 56, tzinfo=datetime.timezone.utc), 'commenter': 'warusadura', 'type': 'User'}, {'comment_id': 1314614536, 'comment_body': 'done.', 'comment_created': datetime.datetime(2023, 9, 4, 8, 35, 14, tzinfo=datetime.timezone.utc), 'commenter': 'warusadura', 'type': 'User'}, {'comment_id': 1321130229, 'comment_body': ""@mihalicyn I'm not sure how to resolve this :)"", 'comment_created': datetime.datetime(2023, 9, 11, 7, 50, 6, tzinfo=datetime.timezone.utc), 'commenter': 'warusadura', 'type': 'User'}, {'comment_id': 1335590336, 'comment_body': 'done!', 'comment_created': datetime.datetime(2023, 9, 25, 8, 55, 56, tzinfo=datetime.timezone.utc), 'commenter': 'warusadura', 'type': 'User'}, {'comment_id': 1343953799, 'comment_body': 'There is no need to unmap `secretmem` if mmap fails, you can `return -1` here', 'comment_created': datetime.datetime(2023, 10, 3, 11, 34, 2, tzinfo=datetime.timezone.utc), 'commenter': 'rppt', 'type': 'User'}, {'comment_id': 1343977000, 'comment_body': ""Hmm, why do we have `fdstore_get()` before and after the lock? Isn't one of them excessive?\r\nI believe it's copied from memfd.c, but there it's also unclear to me why there are two calls to `fdstore_get()`\r\nMaybe I'm missing something."", 'comment_created': datetime.datetime(2023, 10, 3, 11, 52, 49, tzinfo=datetime.timezone.utc), 'commenter': 'rppt', 'type': 'User'}, {'comment_id': 1343983021, 'comment_body': 'I personally prefer kernel convention for error handling (https://docs.kernel.org/process/coding-style.html#centralized-exiting-of-functions), but we do not enforce this in CRIU', 'comment_created': datetime.datetime(2023, 10, 3, 11, 57, 56, tzinfo=datetime.timezone.utc), 'commenter': 'rppt', 'type': 'User'}, {'comment_id': 1343988194, 'comment_body': 'nit: \r\n```\r\nrequired uint32         flags           = 2 [(criu).flags = ""rfile.flags""];\r\n```', 'comment_created': datetime.datetime(2023, 10, 3, 12, 2, 22, tzinfo=datetime.timezone.utc), 'commenter': 'rppt', 'type': 'User'}, {'comment_id': 1343993985, 'comment_body': 'nit:\r\n```\r\n\tmemcpy(secretmem, SECRET);\r\n```', 'comment_created': datetime.datetime(2023, 10, 3, 12, 7, 35, tzinfo=datetime.timezone.utc), 'commenter': 'rppt', 'type': 'User'}, {'comment_id': 1343997455, 'comment_body': 'I think this belongs to the commit that adds the test.', 'comment_created': datetime.datetime(2023, 10, 3, 12, 10, 48, tzinfo=datetime.timezone.utc), 'commenter': 'rppt', 'type': 'User'}, {'comment_id': 1343999475, 'comment_body': 'I know we have a feature check for this test, but I think it would be better to run it automatically and gracefully skip the test if `__NR_memfd_secret` is not defined or if `syscall(__NR_memfd_secret)` returns `-ENOSYS`', 'comment_created': datetime.datetime(2023, 10, 3, 12, 12, 31, tzinfo=datetime.timezone.utc), 'commenter': 'rppt', 'type': 'User'}, {'comment_id': 1344244372, 'comment_body': 'Understood. But, how can I gracefully skip the test? There is no [API](https://criu.org/ZDTM_API) to skip the test.  I think the feature check (.desc file) approach is the only way to skip the test.', 'comment_created': datetime.datetime(2023, 10, 3, 14, 47, 5, tzinfo=datetime.timezone.utc), 'commenter': 'warusadura', 'type': 'User'}, {'comment_id': 1344571684, 'comment_body': 'You can take a look at test/zdtm/static/arm-neon00.c and test/zdtm/static/fpu02.c to see how they skip tests based on an `#ifdef`. \r\n\r\nFor the run-time, you can check if `syscall(__NR_memfd_secret)` returned `-ENOSYS` and then just print message with `skip()` and exit with success.\r\n', 'comment_created': datetime.datetime(2023, 10, 3, 18, 51, 33, tzinfo=datetime.timezone.utc), 'commenter': 'rppt', 'type': 'User'}, {'comment_id': 1345133751, 'comment_body': ""Can we just define __NR_memfd_secret? (E.g. like we define __NR_rseq. For all arches except alpha it should be 447, and we don't support arch/alpha as far as I remember.)"", 'comment_created': datetime.datetime(2023, 10, 4, 3, 19, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Snorch', 'type': 'User'}, {'comment_id': 1346924677, 'comment_body': 'done, thanks!', 'comment_created': datetime.datetime(2023, 10, 5, 7, 25, 5, tzinfo=datetime.timezone.utc), 'commenter': 'warusadura', 'type': 'User'}, {'comment_id': 1346926268, 'comment_body': 'Yeah, my bad. Just removed the call to `fdstore_get()` before the lock.', 'comment_created': datetime.datetime(2023, 10, 5, 7, 26, 29, tzinfo=datetime.timezone.utc), 'commenter': 'warusadura', 'type': 'User'}, {'comment_id': 1346926574, 'comment_body': 'done, thanks!', 'comment_created': datetime.datetime(2023, 10, 5, 7, 26, 45, tzinfo=datetime.timezone.utc), 'commenter': 'warusadura', 'type': 'User'}, {'comment_id': 1346927610, 'comment_body': 'I agree, thanks!', 'comment_created': datetime.datetime(2023, 10, 5, 7, 27, 32, tzinfo=datetime.timezone.utc), 'commenter': 'warusadura', 'type': 'User'}, {'comment_id': 1346928849, 'comment_body': 'done, thanks!', 'comment_created': datetime.datetime(2023, 10, 5, 7, 28, 38, tzinfo=datetime.timezone.utc), 'commenter': 'warusadura', 'type': 'User'}, {'comment_id': 1347397871, 'comment_body': 'modified the `goto` block.', 'comment_created': datetime.datetime(2023, 10, 5, 13, 10, 41, tzinfo=datetime.timezone.utc), 'commenter': 'warusadura', 'type': 'User'}, {'comment_id': 1347399941, 'comment_body': '@rppt included the conditional compilation and call to `skip()`.', 'comment_created': datetime.datetime(2023, 10, 5, 13, 12, 18, tzinfo=datetime.timezone.utc), 'commenter': 'warusadura', 'type': 'User'}, {'comment_id': 1347411481, 'comment_body': ""@Snorch thanks. But, I'm not sure it will work. Because, as I understand, even if we define the ` __NR_memfd_secret`, the `secretmem` feature needs to be enable to use the syscall. I think, without explicitly enabling  `secretmem`, exposing/defining `__NR_memfd_secret` has no use."", 'comment_created': datetime.datetime(2023, 10, 5, 13, 21, 2, tzinfo=datetime.timezone.utc), 'commenter': 'warusadura', 'type': 'User'}, {'comment_id': 1348197345, 'comment_body': '@warusadura Let me explain:\r\n1) You need a kerndat check which will test if `secretmem` feature is supported by current kernel. And based on the result of this check you can skip the test as we do in multiple other tests.\r\n2) You need to define __NR_memfd_secret as local headers may not provide it even if the current kernel supports it. I imagine that your ifdef is trying to do similar thing, just defining is more straightforward solution (which we are used to employ in other multiple places).\r\n\r\nThose are two separate things.', 'comment_created': datetime.datetime(2023, 10, 6, 3, 7, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Snorch', 'type': 'User'}, {'comment_id': 1349875367, 'comment_body': 'Understood, thank you @Snorch ', 'comment_created': datetime.datetime(2023, 10, 9, 5, 40, 43, tzinfo=datetime.timezone.utc), 'commenter': 'warusadura', 'type': 'User'}, {'comment_id': 1349881613, 'comment_body': 'implemented,\r\n```\r\n#ifndef __NR_memfd_secret\r\n#define __NR_memfd_secret 447\r\n#endif\r\n```', 'comment_created': datetime.datetime(2023, 10, 9, 5, 56, 51, tzinfo=datetime.timezone.utc), 'commenter': 'warusadura', 'type': 'User'}, {'comment_id': 1351269812, 'comment_body': 'See get_tty_driver and how PRIx64 is used to print dev_t, you should use it here to fix ""Cross Compile Tests"".', 'comment_created': datetime.datetime(2023, 10, 10, 2, 53, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Snorch', 'type': 'User'}, {'comment_id': 1359900841, 'comment_body': 'done, thanks!', 'comment_created': datetime.datetime(2023, 10, 15, 15, 42, 25, tzinfo=datetime.timezone.utc), 'commenter': 'warusadura', 'type': 'User'}]","[{'commit_sha': '137bf63e82ee7c94614ccffa20c84f2b2017e7b8', 'committer_username': 'warusadura', 'committer_name': 'Dhanuka Warusadura', 'committer_email': 'dhanuka@gnome.org', 'commit_date': datetime.datetime(2018, 8, 20, 13, 42, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ca46288a339fe92746dc21a75f766b506e8b19c', 'committer_username': 'warusadura', 'committer_name': 'Dhanuka Warusadura', 'committer_email': 'dhanuka@gnome.org', 'commit_date': datetime.datetime(2018, 8, 20, 13, 42, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11291dfc33e9a66a2fbce2125ff65928bb2a51ea', 'committer_username': 'warusadura', 'committer_name': 'Dhanuka Warusadura', 'committer_email': 'dhanuka@gnome.org', 'commit_date': datetime.datetime(2018, 8, 20, 13, 42, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b32867fdf61b847ca401278f6a9a94e726360cd3', 'committer_username': 'warusadura', 'committer_name': 'Dhanuka Warusadura', 'committer_email': 'dhanuka@gnome.org', 'commit_date': datetime.datetime(2018, 8, 20, 13, 42, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b20cf0735b429fc34d6f1a4e111798161fce6dcb', 'committer_username': 'warusadura', 'committer_name': 'Dhanuka Warusadura', 'committer_email': 'dhanuka@gnome.org', 'commit_date': datetime.datetime(2018, 8, 20, 13, 42, 31, tzinfo=datetime.timezone.utc)}]",Dhanuka Warusadura,42544330,dhanuka@gnome.org,User,,21,,9,9

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
15999638,criu,checkpoint-restore/criu,C,571,2830,67,206,11469,211,10,26,"[{'id': 1479063074, 'number': 2247, 'closed': None, 'created': datetime.datetime(2023, 8, 17, 13, 35, 56, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 752, 'deletions': 8, 'state': 'open'}, {'id': 1267833373, 'number': 2114, 'closed': datetime.datetime(2023, 5, 28, 13, 52, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 8, 12, 57, 11, tzinfo=datetime.timezone.utc), 'time_taken': 7001702.0, 'time_delta': '81 days, 0:55:02', 'additions': 295, 'deletions': 7, 'state': 'closed'}]"
