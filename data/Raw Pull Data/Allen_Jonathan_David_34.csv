pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
976693921,Fixed #29799 -- Allowed registering lookups per field instances.,,True,15787,https://api.github.com/repos/django/django/pulls/15787,https://github.com/django/django/pull/15787,closed,150,36,7,1,22,28,0,0,[],2022-06-23 06:37:14+00:00,2022-09-02 10:28:58+00:00,6148304.0,"71 days, 3:51:44","[{'comment_id': 922975339, 'comment_body': 'The current tests are checking only a implementation details not that it actually works. We should add a test with all three layers (class, instance, field) and check that different lookups are used.', 'comment_created': datetime.datetime(2022, 7, 18, 5, 9, 40, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}, {'comment_id': 923697924, 'comment_body': 'Yeah. I think those working tests could be added after implementing `get_lookups` methods (would be added soon). These tests just check if the methods work as they should.', 'comment_created': datetime.datetime(2022, 7, 18, 18, 34, 38, tzinfo=datetime.timezone.utc), 'commenter': 'AllenJonathan', 'type': 'User'}, {'comment_id': 926310698, 'comment_body': 'Use `self.assertCountEqual()` when ordering is not specified and we have more than one expected result.', 'comment_created': datetime.datetime(2022, 7, 21, 6, 46, 55, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}, {'comment_id': 926316039, 'comment_body': 'Can we test this with nested context processors to see that unregistering also works? e.g.\r\n```python\r\nwith register_lookup(\r\n    models.CharField, CustomStartsWith, lookup_name=""start"")\r\n):\r\n    with register_lookup(Company.place.field, StartsWith4Char, lookup_name=""start""):\r\n        self.assertCountEqual(\r\n            Company.objects.filter(place__start=""f""),\r\n            [self.obj1, self.obj3],\r\n        )\r\n        self.assertCountEqual(\r\n            Company.objects.filter(name__start=""a""),\r\n            [self.obj1, self.obj2, self.obj4],\r\n        )\r\n    self.assertCountEqual(\r\n        Company.objects.filter(place__start=""f""),\r\n        [self.obj1, self.obj3, self.obj4],\r\n    )\r\n```', 'comment_created': datetime.datetime(2022, 7, 21, 6, 53, 26, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}, {'comment_id': 926900214, 'comment_body': '> Use `self.assertCountEqual()` when ordering is not specified and we have more than one expected result.\r\n\r\nSureüëç', 'comment_created': datetime.datetime(2022, 7, 21, 16, 46, tzinfo=datetime.timezone.utc), 'commenter': 'AllenJonathan', 'type': 'User'}, {'comment_id': 927930350, 'comment_body': 'Doneüëç', 'comment_created': datetime.datetime(2022, 7, 22, 19, 20, 1, tzinfo=datetime.timezone.utc), 'commenter': 'AllenJonathan', 'type': 'User'}, {'comment_id': 928559517, 'comment_body': 'Should this override an instance lookup? As far as I\'m aware ""instance"" lookups should always have a precedence as lookups with bigger granularity :thinking: (\\cc @charettes). ', 'comment_created': datetime.datetime(2022, 7, 25, 7, 38, 57, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}, {'comment_id': 928560268, 'comment_body': 'Use `try ... finally` and unregister this lookup to keep tests isolated.', 'comment_created': datetime.datetime(2022, 7, 25, 7, 39, 48, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}, {'comment_id': 928560922, 'comment_body': 'Please add also tests for reverse relations.', 'comment_created': datetime.datetime(2022, 7, 25, 7, 40, 38, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}, {'comment_id': 928868280, 'comment_body': 'The registered lookups share the same `lookup_name` if any error arises the `start` lookup would be unregistered no matter what happens. I think a try-finally block is not necessary here.', 'comment_created': datetime.datetime(2022, 7, 25, 13, 12, 17, tzinfo=datetime.timezone.utc), 'commenter': 'AllenJonathan', 'type': 'User'}, {'comment_id': 929442709, 'comment_body': 'Not sure I understand, aren\'t these both instance lookups. Isn\'t that equivalent of doing\r\n\r\n```python\r\nCompany.name.register_lookup(CustomStartsWith, lookup_name=""start"")\r\nCompany.name.register_lookup(StartsWith4Char, lookup_name=""start"")\r\n```\r\n\r\nAnd thus overrides should be working?', 'comment_created': datetime.datetime(2022, 7, 26, 1, 21, 37, tzinfo=datetime.timezone.utc), 'commenter': 'charettes', 'type': 'User'}, {'comment_id': 929446837, 'comment_body': 'This seems a bit odd to have `classorinstancemethod` specialize these two here.', 'comment_created': datetime.datetime(2022, 7, 26, 1, 32, 5, tzinfo=datetime.timezone.utc), 'commenter': 'charettes', 'type': 'User'}, {'comment_id': 929537304, 'comment_body': 'Ahh, yes. I missed that both are instance lookups :facepalm: ', 'comment_created': datetime.datetime(2022, 7, 26, 5, 27, 2, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}, {'comment_id': 930165354, 'comment_body': ""`get_class_lookups` caches lookup using `@functools.lru_cache` decorator. So I wanted `get_instance_lookups` to also have the functionality to `clear_cache`. But maybe this would be necessary as I think about it, since its only going to be used by Django developers. Maybe I'll change the test that fails\r\n![image](https://user-images.githubusercontent.com/90314608/181056877-4e6cc801-b5f8-4e1d-ab80-dff1c25e5d47.png)\r\nReplacing `get_lookups` by `get_class_lookups` would solve this.\r\n"", 'comment_created': datetime.datetime(2022, 7, 26, 16, 12, 11, tzinfo=datetime.timezone.utc), 'commenter': 'AllenJonathan', 'type': 'User'}, {'comment_id': 930220463, 'comment_body': ' \r\n\r\n\r\n\r\n> Not sure I understand, aren\'t these both instance lookups. Isn\'t that equivalent of doing\r\n> \r\n> ```python\r\n> Company.name.register_lookup(CustomStartsWith, lookup_name=""start"")\r\n> Company.name.register_lookup(StartsWith4Char, lookup_name=""start"")\r\n> ```\r\n> \r\n> And thus overrides should be working?\r\n\r\nYeah. But wouldn\'t this make the test ""non-isolated"" if an error arises? The register_lookup context processor is used here to make sure the registered lookups are unregistered even though the test fails in between.', 'comment_created': datetime.datetime(2022, 7, 26, 17, 8, 5, tzinfo=datetime.timezone.utc), 'commenter': 'AllenJonathan', 'type': 'User'}, {'comment_id': 930280708, 'comment_body': 'Doneüëç', 'comment_created': datetime.datetime(2022, 7, 26, 18, 17, 52, tzinfo=datetime.timezone.utc), 'commenter': 'AllenJonathan', 'type': 'User'}, {'comment_id': 931874907, 'comment_body': '`versionchanged` annotations are missing. We should add them to changed methods or an overall annotation in the `Registration API`, e.g.\r\n\r\n```\r\n.. versionchanged:: 4.2\r\n\r\n    Support for registering lookups on instances was added.\r\n```', 'comment_created': datetime.datetime(2022, 7, 28, 7, 31, 7, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}, {'comment_id': 931876411, 'comment_body': 'We can reuse `Author` model. If we need two `CharField`s then we can add e.g. `alias` to the `Author`. ', 'comment_created': datetime.datetime(2022, 7, 28, 7, 32, 59, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}, {'comment_id': 931877635, 'comment_body': 'Do we need to switch to `get_class_lookups`?', 'comment_created': datetime.datetime(2022, 7, 28, 7, 34, 25, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}, {'comment_id': 931877764, 'comment_body': '```suggestion\r\nclass RegisterLookupTests(SimpleTestCase):\r\n```', 'comment_created': datetime.datetime(2022, 7, 28, 7, 34, 35, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}, {'comment_id': 931953340, 'comment_body': ""Here, as `field` is an instance, `get_lookups` redirects to `get_instance_lookups` which doesn't have a `clear_cache` method (only `get_class_lookups` has). So clearing cache can only be done by `get_class_lookups`(which was previously called `get_lookups`)."", 'comment_created': datetime.datetime(2022, 7, 28, 8, 50, 27, tzinfo=datetime.timezone.utc), 'commenter': 'AllenJonathan', 'type': 'User'}, {'comment_id': 932859920, 'comment_body': 'Doneüëç', 'comment_created': datetime.datetime(2022, 7, 29, 4, 35, 6, tzinfo=datetime.timezone.utc), 'commenter': 'AllenJonathan', 'type': 'User'}, {'comment_id': 932860022, 'comment_body': 'Doneüëç', 'comment_created': datetime.datetime(2022, 7, 29, 4, 35, 28, tzinfo=datetime.timezone.utc), 'commenter': 'AllenJonathan', 'type': 'User'}, {'comment_id': 932861218, 'comment_body': 'Done üëç', 'comment_created': datetime.datetime(2022, 7, 29, 4, 38, 43, tzinfo=datetime.timezone.utc), 'commenter': 'AllenJonathan', 'type': 'User'}, {'comment_id': 943137230, 'comment_body': 'Since the existence of instance lookups will be rare I suggest we avoid an unncessary dict creation when `instance_lookups` is missing\r\n\r\n```suggestion\r\n        if not (instance_lookups := self.__dict__.get(""instance_lookups""):\r\n            return class_lookups\r\n        return {**class_lookups, **instance_lookups}\r\n```', 'comment_created': datetime.datetime(2022, 8, 11, 6, 31, 5, tzinfo=datetime.timezone.utc), 'commenter': 'charettes', 'type': 'User'}, {'comment_id': 943138545, 'comment_body': '`Field` should be a reference to the class', 'comment_created': datetime.datetime(2022, 8, 11, 6, 33, 27, tzinfo=datetime.timezone.utc), 'commenter': 'charettes', 'type': 'User'}, {'comment_id': 944387942, 'comment_body': '```suggestion\r\n        if instance_lookups := getattr(self, ""instance_lookups"", None):\r\n```', 'comment_created': datetime.datetime(2022, 8, 12, 11, 50, 51, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}, {'comment_id': 960340200, 'comment_body': 'I pushed extra tests to the https://github.com/django/django/pull/16023.', 'comment_created': datetime.datetime(2022, 9, 1, 8, 1, 7, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}]","[{'commit_sha': 'cd1afd553f9c175ebccfc0f50e72b43b9604bd97', 'committer_username': 'AllenJonathan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 8, 9, 0, 29, tzinfo=datetime.timezone.utc)}]",,90314608,,User,,10,,6,4
1025319020,Fixed #26511 -- Documented KeyTransform and KeyTextTransform,,False,15956,https://api.github.com/repos/django/django/pulls/15956,https://github.com/django/django/pull/15956,closed,14,0,1,15,13,13,0,0,[],2022-08-12 19:24:48+00:00,2022-09-12 08:59:22+00:00,2640874.0,"30 days, 13:34:34","[{'comment_id': 945594388, 'comment_body': '```suggestion\r\n.. class:: json.KeyTransform(key_name, *args, **kwargs)\r\n```', 'comment_created': datetime.datetime(2022, 8, 15, 10, 18, 30, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}, {'comment_id': 945595705, 'comment_body': 'I would move it to the end this paragraph (before the closing notes, warnings, and admonitions).', 'comment_created': datetime.datetime(2022, 8, 15, 10, 20, 45, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}, {'comment_id': 945595900, 'comment_body': 'I would move it to the end this paragraph (before the closing notes, warnings, and admonitions). Also, add the full signature.', 'comment_created': datetime.datetime(2022, 8, 15, 10, 21, 6, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}, {'comment_id': 945596098, 'comment_body': '```suggestion\r\n.. class:: json.KeyTextTransform(key_name, *args, **kwargs)\r\n```', 'comment_created': datetime.datetime(2022, 8, 15, 10, 21, 30, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}, {'comment_id': 945596690, 'comment_body': ""We should rather document that on non-PostgreSQL backends it's and alias to `KeyTransform`."", 'comment_created': datetime.datetime(2022, 8, 15, 10, 22, 30, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}, {'comment_id': 945597507, 'comment_body': 'This is not true for all databases.', 'comment_created': datetime.datetime(2022, 8, 15, 10, 23, 55, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}, {'comment_id': 945598334, 'comment_body': '`KeyTransform` should be backticked everywhere.', 'comment_created': datetime.datetime(2022, 8, 15, 10, 25, 24, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}, {'comment_id': 945598985, 'comment_body': ""Fix indentation (everywhere):\r\n```suggestion\r\n    ...     breed_name=Cast(KeyTransform('breed', 'data'), TextField())\r\n    ... ).filter(breed_name__contains='lab')\r\n```"", 'comment_created': datetime.datetime(2022, 8, 15, 10, 26, 35, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}, {'comment_id': 945599270, 'comment_body': '`.. class:: Cast` is not a valid directive in Sphinx.', 'comment_created': datetime.datetime(2022, 8, 15, 10, 27, 5, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}, {'comment_id': 947066366, 'comment_body': 'Please fix all invalid directives, e.g. `.. class:: json.KeyTextTransform` or `.. class:: json.KeyTransform`.', 'comment_created': datetime.datetime(2022, 8, 16, 17, 31, 3, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}, {'comment_id': 948186168, 'comment_body': 'I think this is bad advice as it will result in quotes around the string being included? Only `KeyTextTransform` should be used for that really.', 'comment_created': datetime.datetime(2022, 8, 17, 16, 39, 21, tzinfo=datetime.timezone.utc), 'commenter': 'charettes', 'type': 'User'}, {'comment_id': 948194280, 'comment_body': ""Is this an oversight? I'm surprised to learn that.\r\n\r\nShould we make sure that `KeyTextTransform` actually results in `text` (or whatever database specific type is used to represent strings) before making it public?\r\n\r\nIt seems [the `->>` operator is supported on MySQL 5.7+](https://dev.mysql.com/doc/refman/5.7/en/json-search-functions.html#operator_json-inline-path) and on other backend we could make sure that the return value is automatically wrapped in a `CAST` (e.g. a `CAST` over `json_value` on Oracle)"", 'comment_created': datetime.datetime(2022, 8, 17, 16, 47, 54, tzinfo=datetime.timezone.utc), 'commenter': 'charettes', 'type': 'User'}, {'comment_id': 948662327, 'comment_body': ""It works on SQLite and Oracle as a side-effect of the ticket-32213. I've prepared a fix for MySQL, see #15970."", 'comment_created': datetime.datetime(2022, 8, 18, 5, 27, 27, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}]","[{'commit_sha': '52d95889a8a5154383ef2647a6c02662c5f307c3', 'committer_username': 'AllenJonathan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 8, 9, 0, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d1c6ccabf5fc47fe2c164521fa59d780657c8c8', 'committer_username': 'AllenJonathan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 8, 9, 0, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e41439435695a8ae7ec164c6e95d3f8608a6052', 'committer_username': 'AllenJonathan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 8, 9, 0, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '920ef3adfa960bf00a82fb9a89518d448769ce25', 'committer_username': 'AllenJonathan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 8, 9, 0, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd565f559a16415226e375a6f4f74e810b6b64eb4', 'committer_username': 'AllenJonathan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 8, 9, 0, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3fa8f3448bf659a15147e5f6c210537ab2a52fb', 'committer_username': 'AllenJonathan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 8, 9, 0, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ead9f0b4f3b976f2cc180c9b65873edb8b48ee5', 'committer_username': 'AllenJonathan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 8, 9, 0, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '85334f3f9b05439273d4897cb7f52db7de541491', 'committer_username': 'AllenJonathan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 8, 9, 0, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61430310d65d632cbb69955b416d1b17c6c1f53a', 'committer_username': 'AllenJonathan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 8, 9, 0, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '717fead26afc550767760af627b91dc255bbd792', 'committer_username': 'AllenJonathan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 8, 9, 0, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '30b2f3f6bdb9b21bbe62d6917513bd30c151f245', 'committer_username': 'AllenJonathan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 8, 9, 0, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3302cb09db5408929f43ee45b14031980020038c', 'committer_username': 'AllenJonathan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 8, 9, 0, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6749f131117c6886b3dcb8a3049c568d953c9aaf', 'committer_username': 'AllenJonathan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 8, 9, 0, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a9bfbf3ee5317e29d0578bc2de429273bfb9326', 'committer_username': 'AllenJonathan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 8, 9, 0, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '75a72274e9ee2818e33853ad1db386855a842fa2', 'committer_username': 'AllenJonathan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 8, 9, 0, 29, tzinfo=datetime.timezone.utc)}]",,90314608,,User,,10,,6,4
1041272179,Fixed #33966 -- Added support for using KeyTextTransform from lookup.,,True,16016,https://api.github.com/repos/django/django/pulls/16016,https://github.com/django/django/pull/16016,closed,63,5,4,1,2,11,0,0,[],2022-08-30 17:29:45+00:00,2022-09-16 04:13:54+00:00,1421049.0,"16 days, 10:44:09","[{'comment_id': 962786427, 'comment_body': ""Please remove debug  `print`'s."", 'comment_created': datetime.datetime(2022, 9, 5, 11, 11, 12, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}, {'comment_id': 962787377, 'comment_body': 'This should raise a `ValueError`.', 'comment_created': datetime.datetime(2022, 9, 5, 11, 12, 19, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}, {'comment_id': 963091646, 'comment_body': 'Please add test for this error.', 'comment_created': datetime.datetime(2022, 9, 5, 18, 53, 11, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}, {'comment_id': 970380177, 'comment_body': '```suggestion\r\n``KT()`` expressions\r\n~~~~~~~~~~~~~~~~~~~~\r\n\r\n.. versionadded:: 4.2\r\n\r\n.. class:: json.KT(lookup)\r\n```', 'comment_created': datetime.datetime(2022, 9, 14, 6, 43, 20, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}, {'comment_id': 970389526, 'comment_body': 'Maybe:\r\n```suggestion\r\nRepresents the text value of a key, index, or path transform of\r\n:class:`~django.db.models.JSONField`. You can use the double underscore\r\nnotation in `lookup` to chain dictionary keys and index transforms. For\r\nexample::\r\n```', 'comment_created': datetime.datetime(2022, 9, 14, 6, 50, 45, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}, {'comment_id': 970390874, 'comment_body': 'I would add chain `KT` with a lookup and a second annotation, e.g.\r\n```suggestion\r\n    >>> Dog.objects.create(name=""Shep"", data={\r\n    ...     ""owner"": {""name"": ""Bob""},\r\n    ...     ""breed"": [""collie"", ""lhasa apso""],\r\n    ... })\r\n    <Dog: Shep>\r\n    >>> Dogs.objects.annotate(\r\n    ...     first_breed=KT(""data__breed__1""),\r\n    ...     owner=KT(""data__owner__name""),\r\n    ... ).filter(breed__startswith=""lhasa"", owner=""Bob"")\r\n    <QuerySet [<Dog: Shep>]>', 'comment_created': datetime.datetime(2022, 9, 14, 6, 51, 44, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}, {'comment_id': 970396886, 'comment_body': '```suggestion\r\n            raise ValueError(""lookup cannot be empty."")\r\n```', 'comment_created': datetime.datetime(2022, 9, 14, 6, 56, 33, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}, {'comment_id': 970397604, 'comment_body': '```suggestion\r\n        self.assertSequenceEqual(qs1, [self.objs[7]])\r\n```', 'comment_created': datetime.datetime(2022, 9, 14, 6, 56, 54, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}, {'comment_id': 970397982, 'comment_body': '```suggestion\r\n        self.assertSequenceEqual(qs2, [self.objs[4]])\r\n```', 'comment_created': datetime.datetime(2022, 9, 14, 6, 57, 5, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}, {'comment_id': 970822722, 'comment_body': ""Providing a non-empty `lookup` - giving only `transform` would produce this error. Wouldn't this be incorrect?"", 'comment_created': datetime.datetime(2022, 9, 14, 13, 40, tzinfo=datetime.timezone.utc), 'commenter': 'AllenJonathan', 'type': 'User'}, {'comment_id': 971015077, 'comment_body': 'Right, maybe _""lookup must contains key or index transforms.""_ :thinking: .', 'comment_created': datetime.datetime(2022, 9, 14, 15, 56, 58, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}]","[{'commit_sha': '10178197d57476f69688d4535e550a1ea3a5eac5', 'committer_username': 'AllenJonathan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 8, 9, 0, 29, tzinfo=datetime.timezone.utc)}]",,90314608,,User,,10,,6,4

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
4164482,django,django/django,Python,31393,78570,2302,3156,32847,240,28,240,"[{'id': 1041272179, 'number': 16016, 'closed': datetime.datetime(2022, 9, 16, 4, 13, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 30, 17, 29, 45, tzinfo=datetime.timezone.utc), 'time_taken': 1421049.0, 'time_delta': '16 days, 10:44:09', 'additions': 63, 'deletions': 5, 'state': 'closed'}, {'id': 1025319020, 'number': 15956, 'closed': datetime.datetime(2022, 9, 12, 8, 59, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 12, 19, 24, 48, tzinfo=datetime.timezone.utc), 'time_taken': 2640874.0, 'time_delta': '30 days, 13:34:34', 'additions': 14, 'deletions': 0, 'state': 'closed'}, {'id': 976693921, 'number': 15787, 'closed': datetime.datetime(2022, 9, 2, 10, 28, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 23, 6, 37, 14, tzinfo=datetime.timezone.utc), 'time_taken': 6148304.0, 'time_delta': '71 days, 3:51:44', 'additions': 150, 'deletions': 36, 'state': 'closed'}, {'id': 949250760, 'number': 15737, 'closed': datetime.datetime(2022, 5, 31, 9, 5, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 27, 12, 16, 42, tzinfo=datetime.timezone.utc), 'time_taken': 334132.0, 'time_delta': '3 days, 20:48:52', 'additions': 13, 'deletions': 3, 'state': 'closed'}, {'id': 919306410, 'number': 15632, 'closed': datetime.datetime(2022, 5, 11, 8, 18, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 26, 11, 37, 58, tzinfo=datetime.timezone.utc), 'time_taken': 1284055.0, 'time_delta': '14 days, 20:40:55', 'additions': 16, 'deletions': 14, 'state': 'closed'}, {'id': 919109716, 'number': 15631, 'closed': datetime.datetime(2022, 4, 26, 8, 34, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 26, 8, 33, 40, tzinfo=datetime.timezone.utc), 'time_taken': 40.0, 'time_delta': '0:00:40', 'additions': 47, 'deletions': 13, 'state': 'closed'}, {'id': 812573920, 'number': 15269, 'closed': datetime.datetime(2022, 1, 4, 19, 11, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 1, 1, 13, 11, 6, tzinfo=datetime.timezone.utc), 'time_taken': 280803.0, 'time_delta': '3 days, 6:00:03', 'additions': 101, 'deletions': 2, 'state': 'closed'}, {'id': 795663546, 'number': 15161, 'closed': datetime.datetime(2022, 1, 7, 11, 22, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 12, 6, 9, 6, 13, tzinfo=datetime.timezone.utc), 'time_taken': 2773000.0, 'time_delta': '32 days, 2:16:40', 'additions': 35, 'deletions': 2, 'state': 'closed'}]"
