pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
646947163,Proofread Oracle `SELECT` subquery clause,"#10111

Hi @tristaZero, @wgy8283335. I added SQL definition for [SELECT](https://docs.oracle.com/en/database/oracle/oracle-database/19/sqlrf/SELECT.html#GUID-CFA006CA-6FF1-4972-821E-6996142A51C6) statement's subquery clause. Please check it. I'll change them based on your feedback.

Changes proposed in this pull request:
- Added SQL definition for SELECT statement's subquery clause.
- Added test cases for the newly added rules. 
",True,10381,https://api.github.com/repos/apache/shardingsphere/pulls/10381,https://github.com/apache/shardingsphere/pull/10381,closed,261,22,13,3,12,8,3,0,"[{'name': 'type: enhancement'}, {'name': 'in: SQL parse'}, {'name': 'db: Oracle'}]",2021-05-18 17:22:33+00:00,2021-05-27 07:46:41+00:00,743048.0,"8 days, 14:24:08","[{'comment_id': 634859812, 'comment_body': '@ThanoshanMV \r\n`(selectClause | selectClause ` should be `(queryBlock | selectSubquery  `, right?', 'comment_created': datetime.datetime(2021, 5, 19, 1, 51, 15, tzinfo=datetime.timezone.utc), 'commenter': 'wgy8283335', 'type': 'User'}, {'comment_id': 634888075, 'comment_body': ""Yes @wgy8283335, `selectClause` refers to `queryBlock`, I'll rename `selectClause` to `queryBlock`. \r\n\r\nWhen we specify `selectSubquery` as:\r\n```\r\nselectSubquery\r\n    : (queryBlock | selectSubquery ((UNION ALL? | INTERSECT | MINUS) selectSubquery)+ | LP_ selectSubquery RP_) orderByClause? rowLimitingClause\r\n    ;\r\n```\r\nAs previously mentioned ANTLR gives an error: `selectSubquery` is mutually left-recursive. \r\n![SelectSubquery-MutuallyLeftRecursive](https://user-images.githubusercontent.com/48581379/118752054-0be7d700-b880-11eb-869c-f63824d33da0.png)\r\n\r\nI think error is coming because of this one: `selectSubquery ((UNION ALL? | INTERSECT | MINUS) selectSubquery)+`  "", 'comment_created': datetime.datetime(2021, 5, 19, 3, 31, 6, tzinfo=datetime.timezone.utc), 'commenter': 'ThanoshanMV', 'type': 'User'}, {'comment_id': 635386640, 'comment_body': ""To resolve the mutually left-recursive error, I tried with this definition:\r\n\r\n```\r\nselect \r\n    : selectSubquery forUpdateClause?\r\n    ;\r\n\r\nselectSubquery\r\n    : (queryBlock | selectUnionClause | parenthesisSelectSubquery) orderByClause? rowLimitingClause\r\n    ;\r\n\r\nselectUnionClause\r\n    : ((queryBlock | parenthesisSelectSubquery) orderByClause? rowLimitingClause) ((UNION ALL? | INTERSECT | MINUS) selectSubquery)+\r\n    ;\r\n\r\nparenthesisSelectSubquery\r\n    : LP_ selectSubquery RP_\r\n    ;\r\n```\r\nIt worked without that error. Because of mutually left-recursive error, I didn't add `selectUnionClause` in `selectUnionClause`'s definition and only specified `(queryBlock | parenthesisSelectSubquery)`."", 'comment_created': datetime.datetime(2021, 5, 19, 16, 6, 43, tzinfo=datetime.timezone.utc), 'commenter': 'ThanoshanMV', 'type': 'User'}, {'comment_id': 637335528, 'comment_body': '`rowLimitingClause` miss ?', 'comment_created': datetime.datetime(2021, 5, 22, 1, 30, 16, tzinfo=datetime.timezone.utc), 'commenter': 'wgy8283335', 'type': 'User'}, {'comment_id': 637336919, 'comment_body': 'Why put `((UNION ALL? | INTERSECT | MINUS) selectSubquery)+` behind of the sentence?', 'comment_created': datetime.datetime(2021, 5, 22, 1, 43, 17, tzinfo=datetime.timezone.utc), 'commenter': 'wgy8283335', 'type': 'User'}, {'comment_id': 637371021, 'comment_body': ""When we add `?` to `rowLimitingClause`, ANTLR gives `rule selectUnionClause contains an optional block with at least one alternative that can match an empty string` warning. So I didn't add it. Shall I add it?"", 'comment_created': datetime.datetime(2021, 5, 22, 7, 54, 14, tzinfo=datetime.timezone.utc), 'commenter': 'ThanoshanMV', 'type': 'User'}, {'comment_id': 637373580, 'comment_body': 'In `selectUnionClause`, for the first `selectSubquery` because of mutually left-recursive error, I specified it as `((queryBlock | parenthesisSelectSubquery) orderByClause? rowLimitingClause)` then I specified `((UNION ALL? | INTERSECT | MINUS) selectSubquery)+`\r\n![SelectUnionClause](https://user-images.githubusercontent.com/48581379/119219825-1070f180-bb05-11eb-9981-b68d1620431f.png)\r\n', 'comment_created': datetime.datetime(2021, 5, 22, 8, 21, 30, tzinfo=datetime.timezone.utc), 'commenter': 'ThanoshanMV', 'type': 'User'}, {'comment_id': 638374118, 'comment_body': ""> When we add `?` to `rowLimitingClause`, ANTLR gives `rule selectUnionClause contains an optional block with at least one alternative that can match an empty string` warning. So I didn't add it. Shall I add it?\r\nAs the definition of the 'rowLimitingClause' is below:\r\n```\r\nrowLimitingClause\r\n    : (OFFSET offset (ROW | ROWS))? (FETCH (FIRST | NEXT) (rowcount | percent PERCENT)? (ROW | ROWS) (ONLY | WITH TIES))?\r\n    ;\r\n```\r\nI think there is no need to add '?'."", 'comment_created': datetime.datetime(2021, 5, 25, 0, 31, 16, tzinfo=datetime.timezone.utc), 'commenter': 'wgy8283335', 'type': 'User'}]","[{'commit_sha': '8a481b4bc1a5b04531c05a5cff0e977854cdca47', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '34ba8fd022f5c45e3fa34f4d0a1398b1f5595869', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '5f574e7eea4dfd13500394a77379c8f49c980a41', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Thanoshan MV,48581379,,User,,81,,76,40
657742398,Add with clause for Oracle `SELECT` statement,"#10111

Hi @tristaZero, @wgy8283335. I've added SQL definition for [SELECT](https://docs.oracle.com/en/database/oracle/oracle-database/19/sqlrf/SELECT.html#GUID-CFA006CA-6FF1-4972-821E-6996142A51C6) statement's with clause. Please check it. I'll change them based on your feedback.

Changes proposed in this pull request:
- Added SQL definition for `SELECT` statement's with clause.
- Added test cases for with clause.
- I asserted subquery in the `WithClauseAssert`.
- In the `SQLServerDMLStatementSQLVisitor`, I changed the `SubquerySegment`'s start and stop indices by getting from `cteClauses()`'s `subquery()`.
",True,10558,https://api.github.com/repos/apache/shardingsphere/pulls/10558,https://github.com/apache/shardingsphere/pull/10558,closed,881,12,14,9,4,29,2,0,"[{'name': 'in: SQL parse'}, {'name': 'db: Oracle'}]",2021-05-30 16:18:07+00:00,2021-06-09 01:25:39+00:00,810452.0,"9 days, 9:07:32","[{'comment_id': 644397493, 'comment_body': 'The rule `duplicateSpecification` is not the same as definition in oracle rule.\r\n![image](https://user-images.githubusercontent.com/22066046/120567102-80577400-c443-11eb-906a-b4ce1361a8dd.png)\r\n', 'comment_created': datetime.datetime(2021, 6, 3, 0, 13, 1, tzinfo=datetime.timezone.utc), 'commenter': 'wgy8283335', 'type': 'User'}, {'comment_id': 644398461, 'comment_body': 'The rule `projections` is not the same as definition in oracle rule.\r\n![image](https://user-images.githubusercontent.com/22066046/120567289-f6f47180-c443-11eb-8a00-93d371e29fa2.png)\r\n', 'comment_created': datetime.datetime(2021, 6, 3, 0, 16, 19, tzinfo=datetime.timezone.utc), 'commenter': 'wgy8283335', 'type': 'User'}, {'comment_id': 644400108, 'comment_body': 'The rule `fromClause` is not the same as definition in oracle rule.\r\n![image](https://user-images.githubusercontent.com/22066046/120567572-b9441880-c444-11eb-9c0b-77507c3b08d9.png)\r\n\r\n', 'comment_created': datetime.datetime(2021, 6, 3, 0, 21, 55, tzinfo=datetime.timezone.utc), 'commenter': 'wgy8283335', 'type': 'User'}, {'comment_id': 644400745, 'comment_body': 'The rules: `whereClause`, `groupByClause`, `havingClause`. They need to be checked whether it is the same as the definition of the oracle rule.', 'comment_created': datetime.datetime(2021, 6, 3, 0, 24, 6, tzinfo=datetime.timezone.utc), 'commenter': 'wgy8283335', 'type': 'User'}, {'comment_id': 644513278, 'comment_body': ""Hi @wgy8283335, yes the above-mentioned rules aren't aligned with Oracle documentation rules. Since `withClause` contains a lot of changes, I only put `withClause` definition in this PR. I thought to proofread each rule in the `queryBlock` with seperate PRs. What do you think?"", 'comment_created': datetime.datetime(2021, 6, 3, 6, 16, 2, tzinfo=datetime.timezone.utc), 'commenter': 'ThanoshanMV', 'type': 'User'}, {'comment_id': 645208541, 'comment_body': 'I agree with you.', 'comment_created': datetime.datetime(2021, 6, 4, 0, 15, 45, tzinfo=datetime.timezone.utc), 'commenter': 'wgy8283335', 'type': 'User'}, {'comment_id': 645210807, 'comment_body': ""I've checked the rule `alias`. \r\nCould you put the below rule into the BaseRule.g4?\r\n```\r\nalias\r\n    : identifier | STRING_\r\n    ;\r\n```"", 'comment_created': datetime.datetime(2021, 6, 4, 0, 23, 38, tzinfo=datetime.timezone.utc), 'commenter': 'wgy8283335', 'type': 'User'}, {'comment_id': 645214688, 'comment_body': '![image](https://user-images.githubusercontent.com/22066046/120728695-0d67ff00-c510-11eb-8212-0f76633ba836.png)\r\n', 'comment_created': datetime.datetime(2021, 6, 4, 0, 37, 14, tzinfo=datetime.timezone.utc), 'commenter': 'wgy8283335', 'type': 'User'}, {'comment_id': 645215312, 'comment_body': '\r\n![image](https://user-images.githubusercontent.com/22066046/120728895-70f22c80-c510-11eb-92b5-006758b8304f.png)\r\n\r\n', 'comment_created': datetime.datetime(2021, 6, 4, 0, 39, 39, tzinfo=datetime.timezone.utc), 'commenter': 'wgy8283335', 'type': 'User'}, {'comment_id': 645215923, 'comment_body': '![image](https://user-images.githubusercontent.com/22066046/120728991-a72fac00-c510-11eb-9b2b-b555d908fa17.png)\r\n', 'comment_created': datetime.datetime(2021, 6, 4, 0, 41, 38, tzinfo=datetime.timezone.utc), 'commenter': 'wgy8283335', 'type': 'User'}, {'comment_id': 645218403, 'comment_body': 'Could you put a reference link of the rule `calcMeasClause`?', 'comment_created': datetime.datetime(2021, 6, 4, 0, 50, 7, tzinfo=datetime.timezone.utc), 'commenter': 'wgy8283335', 'type': 'User'}, {'comment_id': 645649611, 'comment_body': ""Yes, I'll put it here.\r\n\r\n![CalculatedMeasureClause](https://user-images.githubusercontent.com/48581379/120823142-c06a4400-c574-11eb-9354-c8619ba05cdb.png)\r\n\r\nHere is the [reference link to `calc_meas_expression`](https://docs.oracle.com/en/database/oracle/oracle-database/19/sqlrf/analytic-view-measure-expressions.html#GUID-F8C7ED67-A4EC-479C-975F-12F1F4B8CBA0)."", 'comment_created': datetime.datetime(2021, 6, 4, 15, 11, 1, tzinfo=datetime.timezone.utc), 'commenter': 'ThanoshanMV', 'type': 'User'}, {'comment_id': 645699406, 'comment_body': ""I've put it."", 'comment_created': datetime.datetime(2021, 6, 4, 16, 22, 44, tzinfo=datetime.timezone.utc), 'commenter': 'ThanoshanMV', 'type': 'User'}, {'comment_id': 645906094, 'comment_body': ""![image](https://user-images.githubusercontent.com/22066046/120872435-58961680-c5d1-11eb-9c09-4c09052b054b.png)\r\n\r\n@ThanoshanMV Is it suitable that 'predicate' is written as an 'expr'?"", 'comment_created': datetime.datetime(2021, 6, 4, 23, 42, 9, tzinfo=datetime.timezone.utc), 'commenter': 'wgy8283335', 'type': 'User'}, {'comment_id': 645906447, 'comment_body': ""It's better to add more test cases."", 'comment_created': datetime.datetime(2021, 6, 4, 23, 44, 7, tzinfo=datetime.timezone.utc), 'commenter': 'wgy8283335', 'type': 'User'}, {'comment_id': 645908467, 'comment_body': 'Why do you modify the SQLServer visitor?\r\nAs this pr is only for Oracle.', 'comment_created': datetime.datetime(2021, 6, 4, 23, 54, 29, tzinfo=datetime.timezone.utc), 'commenter': 'wgy8283335', 'type': 'User'}, {'comment_id': 645908638, 'comment_body': 'Why not add this to OracleSelectStatement?', 'comment_created': datetime.datetime(2021, 6, 4, 23, 55, 15, tzinfo=datetime.timezone.utc), 'commenter': 'wgy8283335', 'type': 'User'}, {'comment_id': 645908784, 'comment_body': 'Why do you modify delete.xml ?', 'comment_created': datetime.datetime(2021, 6, 4, 23, 56, 6, tzinfo=datetime.timezone.utc), 'commenter': 'wgy8283335', 'type': 'User'}, {'comment_id': 645908822, 'comment_body': 'Why do you modify delete.xml ?', 'comment_created': datetime.datetime(2021, 6, 4, 23, 56, 14, tzinfo=datetime.timezone.utc), 'commenter': 'wgy8283335', 'type': 'User'}, {'comment_id': 645948803, 'comment_body': ""I earlier put `predicate` for `filterClause`, it parsed them correctly for two examples in the above image but there's another example SQL statement that defines a transitory analytic view using a filter clause:\r\n\r\n![FilterFactClause](https://user-images.githubusercontent.com/48581379/120881821-796e6400-c5f1-11eb-9ea1-0fd59764edd6.png)\r\n\r\nThe above statement is failed to parse correctly when I specified `predicate`:\r\n\r\n![PredicateRuleFailure](https://user-images.githubusercontent.com/48581379/120881877-dcf89180-c5f1-11eb-9aa3-3b4bd6899f24.png)\r\n\r\nThen I changed `predicate` to `expr`:\r\n\r\n![ExprRuleSuccess](https://user-images.githubusercontent.com/48581379/120881922-247f1d80-c5f2-11eb-966f-9a5dae1dfb99.png)\r\n\r\n"", 'comment_created': datetime.datetime(2021, 6, 5, 6, 10, 6, tzinfo=datetime.timezone.utc), 'commenter': 'ThanoshanMV', 'type': 'User'}, {'comment_id': 645950872, 'comment_body': 'I found that `withClause` is available for [SQL Server](https://docs.microsoft.com/en-us/sql/t-sql/queries/with-common-table-expression-transact-sql?view=sql-server-ver15), [PostgreSQL](https://www.postgresql.org/docs/current/queries-with.html), and [MySQL](https://dev.mysql.com/doc/refman/8.0/en/with.html). So I put `WithSegment` in `SelectStatement`.', 'comment_created': datetime.datetime(2021, 6, 5, 6, 32, 6, tzinfo=datetime.timezone.utc), 'commenter': 'ThanoshanMV', 'type': 'User'}, {'comment_id': 645955068, 'comment_body': 'Since I tried to assert the `SubquerySegment` of `CommonTableExpressionSegment` in `WithClauseAssert`, I needed to provide start and stop indices for all `subquery-expression`s within `common-table-expression`s as they were asserted. ', 'comment_created': datetime.datetime(2021, 6, 5, 7, 17, 16, tzinfo=datetime.timezone.utc), 'commenter': 'ThanoshanMV', 'type': 'User'}, {'comment_id': 645956629, 'comment_body': ""While I was adding start and stop indices for all `subquery-expression` within `common-table-expression`, in the SQLServer visitor, the `SubquerySegment`'s start and stop indices are collected from `CommonTableExpressionSegment`'s start and stop indices. So I changed them from getting `CommonTableExpressionSegment`'s `SubquerySegment`. Shall I remove this modification?"", 'comment_created': datetime.datetime(2021, 6, 5, 7, 34, 24, tzinfo=datetime.timezone.utc), 'commenter': 'ThanoshanMV', 'type': 'User'}, {'comment_id': 645960140, 'comment_body': ""I'll add them."", 'comment_created': datetime.datetime(2021, 6, 5, 8, 11, 34, tzinfo=datetime.timezone.utc), 'commenter': 'ThanoshanMV', 'type': 'User'}, {'comment_id': 646055738, 'comment_body': '@tristaZero Do you think we need to add `with clause` for  SQL Server, PostgreSQL, and MySQL?', 'comment_created': datetime.datetime(2021, 6, 6, 1, 7, 19, tzinfo=datetime.timezone.utc), 'commenter': 'wgy8283335', 'type': 'User'}, {'comment_id': 646068111, 'comment_body': 'I think so.', 'comment_created': datetime.datetime(2021, 6, 6, 3, 46, 20, tzinfo=datetime.timezone.utc), 'commenter': 'tristaZero', 'type': 'User'}, {'comment_id': 647035177, 'comment_body': 'Because the definition of the predicate is different from the definition of the expr.\r\n```\r\npredicate\r\n    : bitExpr NOT? IN subquery\r\n    | bitExpr NOT? IN LP_ expr (COMMA_ expr)* RP_\r\n    | bitExpr NOT? BETWEEN bitExpr AND predicate\r\n    | bitExpr NOT? LIKE simpleExpr (ESCAPE simpleExpr)?\r\n    | bitExpr\r\n    ;\r\n```', 'comment_created': datetime.datetime(2021, 6, 8, 0, 56, 51, tzinfo=datetime.timezone.utc), 'commenter': 'wgy8283335', 'type': 'User'}, {'comment_id': 647035687, 'comment_body': 'Maybe you should add some rules for the predicate.', 'comment_created': datetime.datetime(2021, 6, 8, 0, 58, 30, tzinfo=datetime.timezone.utc), 'commenter': 'wgy8283335', 'type': 'User'}, {'comment_id': 647611156, 'comment_body': ""I've added a new rule in `predicate` as `bitExpr NOT? IN LP_ expr (COMMA_ expr)* RP_ AND predicate` that matches with the above example:\r\n\r\n![PredicateRuleInFilterClause](https://user-images.githubusercontent.com/48581379/121223122-d5144800-c8a4-11eb-879e-a3cbf32b1325.png)\r\n"", 'comment_created': datetime.datetime(2021, 6, 8, 16, 34, 30, tzinfo=datetime.timezone.utc), 'commenter': 'ThanoshanMV', 'type': 'User'}]","[{'commit_sha': 'a0b09ed14896e108a56ff2db7ac42a79783d1032', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'fb9fe7ba39f8ea92d9cca3d6700272fcc24dade5', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'bdd78bf913c7a7865a99ccacb734dbcc19393f61', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '67a69f93bfe08cea801f6444f18be2fe6c5ac967', 'committer_username': 'ThanoshanMV', 'committer_name': 'Thanoshan MV', 'committer_email': None, 'commit_date': datetime.datetime(2019, 3, 15, 6, 30, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9360976b1dd31e3498e3a21504de2f5911445af8', 'committer_username': 'ThanoshanMV', 'committer_name': 'Thanoshan MV', 'committer_email': None, 'commit_date': datetime.datetime(2019, 3, 15, 6, 30, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1220eb91b2c4673a7211c269d8c1dd25352ab197', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'f3a270824ed7125786f5236dfce95fda0a9da15f', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'd630fc5ebf021b66b7cfac4be2d4a8e722832cf8', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '9ad33fa2f5021a745c33d85bc5ad3a2a669b4a13', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Thanoshan MV,48581379,,User,,81,,76,40
667729383,"Add selectList, fromClause definitions for Oracle Select","#10111 

Changes proposed in this pull request:
- Format some existing `ANTLR` rules in DMLStatement.
- Added SQL definition for [SELECT](https://docs.oracle.com/en/database/oracle/oracle-database/19/sqlrf/SELECT.html#GUID-CFA006CA-6FF1-4972-821E-6996142A51C6) statement's `selectList` and `fromClause`.
- Added corresponding test cases.
- Changed some `sql-case` database types to specific as some of them aren't supported for Oracle.
",True,10759,https://api.github.com/repos/apache/shardingsphere/pulls/10759,https://github.com/apache/shardingsphere/pull/10759,closed,1275,90,15,15,19,1,2,0,"[{'name': 'in: SQL parse'}, {'name': 'db: Oracle'}]",2021-06-11 06:26:14+00:00,2021-07-08 00:30:59+00:00,2311485.0,"26 days, 18:04:45","[{'comment_id': 652260311, 'comment_body': ""It's better to move the rule to DDLStatement. And rename the rule and copy the rule in DMLStatement."", 'comment_created': datetime.datetime(2021, 6, 16, 0, 23, 24, tzinfo=datetime.timezone.utc), 'commenter': 'wgy8283335', 'type': 'User'}]","[{'commit_sha': 'a3c5550a0a76a3ce4fc586e9d7aeb5d288ff3dc5', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'acf27f4e1dc145cadeef7cc9dd8460e999de1346', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '03a56d751b47ae69e048001261d44c3e07973880', 'committer_username': 'ThanoshanMV', 'committer_name': 'Thanoshan MV', 'committer_email': None, 'commit_date': datetime.datetime(2019, 3, 15, 6, 30, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '599c7f568764aeb1d656f1419c30712e10b27845', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a8f1525145bac9611ea5ad9ad815840e1da7d754', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '4e43b0e82e6fadda699dd04926013759f70ecccb', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'c790ad746738e1f7b4d23e7882952fa0bc9864a9', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'e7b3721ca19c55480ddc1b2afe2e5a20134bc8b6', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '67b0e0650c88cd93b82231617a93ccf24d6244bb', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '29b9089075135c913bf5e184710a4326c18a43e8', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '4f162c878c8a089896b787aef77d1c1279ede2e3', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'e630fc1e4b0d2d6151caee8f96d4b44cacd3e651', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'd9ebf4a0b736ac073a09cf2da7a47d51973f3b9d', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '173c234c9c08277039dfc72f350e795a77337ecf', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b95b7168b988abdaa27d990f1db6b5f6f0bcb0de', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Thanoshan MV,48581379,,User,,81,,76,40
687138220,Proofread Oracle SELECT Hierarchical Query and GroupBy Clause,"#10111 

Hi @wgy8283335, I've proofread Oracle [SELECT](https://docs.oracle.com/en/database/oracle/oracle-database/19/sqlrf/SELECT.html#GUID-CFA006CA-6FF1-4972-821E-6996142A51C6) hierarchical query and group by clause. Please check it.

Changes proposed in this pull request:
- Proofread Oracle SELECT hierarchical query and group by clause.
- Add test cases for hierarchical query and group by clause.
- I created new constructors for `ColumnOrderByItem`, `ExpressionOrderByItem` and `IndexOrderByItem` without having `OrderDirection` as a construction parameter. Since Oracle `SELECT` group by clause is not associated with any order directions, I created those new constructors. I'll remove them if they aren't recommended.
- I added `ExpectedAggregationProjection` in `ExpectedExpression` and asserted it in `ExpressionAssert`.
",True,11259,https://api.github.com/repos/apache/shardingsphere/pulls/11259,https://github.com/apache/shardingsphere/pull/11259,closed,358,11,10,11,10,2,3,0,"[{'name': 'type: enhancement'}, {'name': 'in: SQL parse'}, {'name': 'db: Oracle'}]",2021-07-10 06:44:42+00:00,2021-07-22 02:02:58+00:00,1019896.0,"11 days, 19:18:16","[{'comment_id': 667556678, 'comment_body': 'Do you think this is better?\r\n`exprs | LP_ expr? (COMMA_ expr)* RP_`', 'comment_created': datetime.datetime(2021, 7, 12, 0, 11, 28, tzinfo=datetime.timezone.utc), 'commenter': 'wgy8283335', 'type': 'User'}, {'comment_id': 667629200, 'comment_body': ""Yes, I'll change that."", 'comment_created': datetime.datetime(2021, 7, 12, 5, 13, 26, tzinfo=datetime.timezone.utc), 'commenter': 'ThanoshanMV', 'type': 'User'}]","[{'commit_sha': '21e1e7ac12b7bf2ac1e28ea626c6c8ce0ca49dac', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '3c6bb28b1f546e675fa3a81448378387f0c126cb', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '7e7431fb60dd200fbb70c671831f3013371368de', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'e2b719a735a32418d52239e2bee3bf49f951a4f2', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '55092dd675fd0643497bf75fb05af6c7ba197d6e', 'committer_username': 'ThanoshanMV', 'committer_name': 'Thanoshan MV', 'committer_email': None, 'commit_date': datetime.datetime(2019, 3, 15, 6, 30, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8b7ff7e3b8a93373331fcc195bd4d6e7b4d1cc7', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'f164ee4651805e33322b34f0aac99e23bcbd6f30', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '05cb417f4602fbbadab8e675e7f667e416bd20f8', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '6a2a010ae46c7f62fcfac020a9da262376dff7f7', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '2f61e5b441fbcc01a2d069fb2b41d4d2f56a050e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a35e1bce21cc68c8e07e2cbf83859181beedf59e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Thanoshan MV,48581379,,User,,81,,76,40
696496439,Add Oracle Select Model Clause Definition,"#10111 

Hi @wgy8283335, I've added Oracle [SELECT](https://docs.oracle.com/en/database/oracle/oracle-database/19/sqlrf/SELECT.html#GUID-CFA006CA-6FF1-4972-821E-6996142A51C6) model clause. Please check it.

Changes proposed in this pull request:
- Added Oracle `SELECT` model clause definition.
- Added test cases for model clause.
- Created `modelSegment` to get `SELECT` statements from `referenceModel`, and `cellAssignment`, to get column values from `cellAssignment` and to get order by segments from `modelRulesClause`.
- Modified the `aggregationFunction` by adding [analyticClause](https://docs.oracle.com/en/database/oracle/oracle-database/19/sqlrf/Analytic-Functions.html#GUID-527832F7-63C0-4445-8C16-307FA5084056). Here's the documentation for existing aggregate functions: [MIN](https://docs.oracle.com/en/database/oracle/oracle-database/19/sqlrf/MIN.html#GUID-F7F04E18-1AD8-4D15-9491-4622AD847A74), [MAX](https://docs.oracle.com/en/database/oracle/oracle-database/19/sqlrf/MAX.html#GUID-E5372020-A6DA-44BF-93BE-DA8C3F74CD01), [SUM](https://docs.oracle.com/en/database/oracle/oracle-database/19/sqlrf/SUM.html#GUID-5610BE2C-CFE5-446F-A1F7-B924B5663220), [COUNT](https://docs.oracle.com/en/database/oracle/oracle-database/19/sqlrf/COUNT.html#GUID-AEF08B79-024D-4E3A-B362-9715FB011776), [AVG](https://docs.oracle.com/en/database/oracle/oracle-database/19/sqlrf/AVG.html#GUID-B64BCBF1-DAA0-4D88-9821-2C4D3FDE5E4A), [GROUPING](https://docs.oracle.com/en/database/oracle/oracle-database/19/sqlrf/GROUPING.html#GUID-82E6084A-0BDF-4587-A40E-36899783F073).
- I added a new rule in `simpleExpr` to support expressions coming from `modelRulesClause`'s `expr`.
",True,11503,https://api.github.com/repos/apache/shardingsphere/pulls/11503,https://github.com/apache/shardingsphere/pull/11503,closed,1157,28,24,15,16,17,2,0,"[{'name': 'in: SQL parse'}, {'name': 'db: Oracle'}]",2021-07-25 12:47:40+00:00,2021-08-14 01:45:10+00:00,1688250.0,"19 days, 12:57:30","[{'comment_id': 680437365, 'comment_body': ""Where is the definition of modelRulesClause's expr"", 'comment_created': datetime.datetime(2021, 8, 1, 2, 28, 57, tzinfo=datetime.timezone.utc), 'commenter': 'wgy8283335', 'type': 'User'}, {'comment_id': 680438048, 'comment_body': ""What about use 'referenceModel*' ?"", 'comment_created': datetime.datetime(2021, 8, 1, 2, 35, 26, tzinfo=datetime.timezone.utc), 'commenter': 'wgy8283335', 'type': 'User'}, {'comment_id': 680438470, 'comment_body': '![image](https://user-images.githubusercontent.com/22066046/127757362-f275ecc5-9bdb-4055-843f-a7ef9b391bfb.png)\r\n', 'comment_created': datetime.datetime(2021, 8, 1, 2, 41, 15, tzinfo=datetime.timezone.utc), 'commenter': 'wgy8283335', 'type': 'User'}, {'comment_id': 680438524, 'comment_body': 'Where is condition?', 'comment_created': datetime.datetime(2021, 8, 1, 2, 41, 43, tzinfo=datetime.timezone.utc), 'commenter': 'wgy8283335', 'type': 'User'}, {'comment_id': 680442018, 'comment_body': 'The SQL is so complicated, are you sure the SQL could be executed succesfully?', 'comment_created': datetime.datetime(2021, 8, 1, 3, 21, 24, tzinfo=datetime.timezone.utc), 'commenter': 'wgy8283335', 'type': 'User'}, {'comment_id': 680442910, 'comment_body': 'Whether we need these four segments below should be discussed. ', 'comment_created': datetime.datetime(2021, 8, 1, 3, 32, 4, tzinfo=datetime.timezone.utc), 'commenter': 'wgy8283335', 'type': 'User'}, {'comment_id': 680541323, 'comment_body': ""I added `(owner DOT_)? name LBT_ expr (COMMA_ expr)* RBT_ simpleExpr?` rule to support for expressions coming from `modelRulesClause`'s right-hand side assignment.\r\n\r\n![modelRulesClauseDefinition](https://user-images.githubusercontent.com/48581379/127779755-900bcd33-d2ce-44d7-9f74-feac2c1a3838.png)\r\n\r\n![modelRulesClauseRule](https://user-images.githubusercontent.com/48581379/127779768-9f514565-4414-43f2-944d-f4bda990b61c.png)\r\n\r\nI found out the actual [definition](https://docs.oracle.com/en/database/oracle/oracle-database/19/sqlrf/Model-Expressions.html#GUID-83D3FD56-8346-4D3F-A49E-5FE41FE19257) of `modelRulesClause`'s right-hand side assignment. \r\n\r\n![RightHandsideRule](https://user-images.githubusercontent.com/48581379/127779923-8fef8e16-9b46-41ba-a50f-cbc98cffbd67.png)\r\n\r\nI'll remove the rule `(owner DOT_)? name LBT_ expr (COMMA_ expr)* RBT_ simpleExpr?` as it's not appropriate and update the `modelRuleClause`'s right-hand side `expr` to `modelExpr`.\r\n"", 'comment_created': datetime.datetime(2021, 8, 1, 17, 25, 48, tzinfo=datetime.timezone.utc), 'commenter': 'ThanoshanMV', 'type': 'User'}, {'comment_id': 680545500, 'comment_body': ""With the previous `(owner DOT_)? name LBT_ expr (COMMA_ expr)* RBT_ simpleExpr?` rule, the above SQLs were executed successfully. \r\n\r\nAfter removing the inappropriate above rule and changing `modelRuleClause`'s right-hand side `expr` to `modelExpr`, those above SQLs weren't executed successfully. \r\n\r\nExcept for SQL case ids `select_with_model_partition_dimension` and `select_with_model_dimension`, other SQLs were taken from [external source](https://docs.oracle.com/cd/B19306_01/server.102/b14223/sqlmodel.htm) and not from [official documentation](https://docs.oracle.com/en/database/oracle/oracle-database/19/sqlrf/SELECT.html#GUID-CFA006CA-6FF1-4972-821E-6996142A51C6). I added external source SQLs to check how parsing happens in `singleColumnForLoop`, `referenceModel` and so on.\r\n\r\nThe parsing fails in `modelExpr`, here's an example with SQL case id `select_with_model_with_single_column_for_loop`:\r\n\r\n![SQLParsingFails](https://user-images.githubusercontent.com/48581379/127780856-a1bcb4f6-07ed-4987-89e6-b396e5830038.png)\r\n\r\nI'll comment on all external source SQLs. Maybe it's better to remove the external source SQLs as we don't know whether they are aligned with Oracle 19?"", 'comment_created': datetime.datetime(2021, 8, 1, 18, 3, 34, tzinfo=datetime.timezone.utc), 'commenter': 'ThanoshanMV', 'type': 'User'}, {'comment_id': 680547173, 'comment_body': ""Though I tried to add `modelExpr` correctly, one SQL from [official documentation](https://docs.oracle.com/en/database/oracle/oracle-database/19/sqlrf/SELECT.html#GUID-CFA006CA-6FF1-4972-821E-6996142A51C6) with SQL case id `select_with_model_partition_dimension` failed to parse as `modelExpr` isn't followed with `PLUS_` and another `modelExpr`:\r\n\r\n![OfficialDocSQL](https://user-images.githubusercontent.com/48581379/127781112-29130dc8-7f66-4ff2-baf5-73e3532381c2.png)\r\n\r\nTo parse the above SQL correctly, I modified the `modelExpr`:\r\n\r\n![ModifiedModelExprDefinition](https://user-images.githubusercontent.com/48581379/127781217-fbb6de4e-1a4c-48f9-8264-98d2a61d8cdf.png)\r\n\r\nPlease check them and let me know if anything which needs to be changed."", 'comment_created': datetime.datetime(2021, 8, 1, 18, 19, 2, tzinfo=datetime.timezone.utc), 'commenter': 'ThanoshanMV', 'type': 'User'}, {'comment_id': 680547304, 'comment_body': ""Okay @wgy8283335, if those four segments aren't necessary, we can remove them."", 'comment_created': datetime.datetime(2021, 8, 1, 18, 20, 29, tzinfo=datetime.timezone.utc), 'commenter': 'ThanoshanMV', 'type': 'User'}, {'comment_id': 680551129, 'comment_body': ""For now, I've added `condition` as `expr`. I've found out [documentation](https://docs.oracle.com/en/database/oracle/oracle-database/19/sqlrf/Conditions.html#GUID-C2E3ED44-16E7-4924-9125-E1693B1022A8) for `condition`. In the next commit, I'll add them."", 'comment_created': datetime.datetime(2021, 8, 1, 18, 55, 4, tzinfo=datetime.timezone.utc), 'commenter': 'ThanoshanMV', 'type': 'User'}, {'comment_id': 680595322, 'comment_body': ""That's great."", 'comment_created': datetime.datetime(2021, 8, 2, 0, 58, 18, tzinfo=datetime.timezone.utc), 'commenter': 'wgy8283335', 'type': 'User'}, {'comment_id': 680595371, 'comment_body': 'OK.', 'comment_created': datetime.datetime(2021, 8, 2, 0, 58, 47, tzinfo=datetime.timezone.utc), 'commenter': 'wgy8283335', 'type': 'User'}, {'comment_id': 682192494, 'comment_body': 'I think we could keep them.', 'comment_created': datetime.datetime(2021, 8, 4, 0, 33, 25, tzinfo=datetime.timezone.utc), 'commenter': 'wgy8283335', 'type': 'User'}, {'comment_id': 682211677, 'comment_body': 'I think we should keep `(PLUS_ modelExpr)?` in the definition.', 'comment_created': datetime.datetime(2021, 8, 4, 1, 3, 37, tzinfo=datetime.timezone.utc), 'commenter': 'wgy8283335', 'type': 'User'}, {'comment_id': 682746980, 'comment_body': ""Hi @wgy8283335, I've added `condition` rule.\r\n\r\nIn `jsonCondition`, here's the [diagram](https://docs.oracle.com/en/database/oracle/oracle-database/19/adjsn/diagrams-basic-sql-json-path-expression-syntax.html) for `jsonBasicPathExpr` and `jsonBasicPathExpr`'s expression explanation [documentation](https://docs.oracle.com/en/database/oracle/oracle-database/19/adjsn/json-path-expressions.html#GUID-AEBAD813-99AB-418A-93AB-F96BC1658618)."", 'comment_created': datetime.datetime(2021, 8, 4, 15, 53, 21, tzinfo=datetime.timezone.utc), 'commenter': 'ThanoshanMV', 'type': 'User'}, {'comment_id': 682773955, 'comment_body': ""Since we're keeping those segments, I uncommented test cases except for SQL case id `select_with_model_with_reference_models` and modified the `modelExpr` accordingly. \r\n\r\nIn `select_with_model_with_reference_models`, it's quite complex to modify `modelExpr` to match."", 'comment_created': datetime.datetime(2021, 8, 4, 16, 26, 44, tzinfo=datetime.timezone.utc), 'commenter': 'ThanoshanMV', 'type': 'User'}]","[{'commit_sha': '7730d19e5e243ce89f0a9bc4d85fd6ca03f10dc7', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b71e005bebbc74c356ae2e44f935c9447164e211', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '4eed656720ff62d23aa0788d0f406a56b40cc95c', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '0ec4abda2a7c89f0cd977fd5c10f1217f47dfe06', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a99e73c7ba12d02853af6ae1636e57a51ec09cb7', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '28e8a58bfd8e589a32320dd7a59f8eed71c1e47f', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '879be2097da3291cf52f848c1abd14c0eee2c474', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'fb9387d46d0f968f3a67e35edd22b92e0196a249', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ae85e6d5f74003c40a72bbfeabf861e6feaa5373', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '6a157ad540f99289bdcde49b5447191c97424188', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '5b1f0a46c4eeb800cbfdba7c79c8b15603718fdc', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b36f8e41f4954e04f70ab39ecc9b711698c32ce0', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '2b1df1d5f201d89aef6b275454c72481888c1972', 'committer_username': 'ThanoshanMV', 'committer_name': 'Thanoshan MV', 'committer_email': None, 'commit_date': datetime.datetime(2019, 3, 15, 6, 30, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a456cfe12529cf350ddb48627b1b3e75cc9de9a4', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '7c8f54d770023b7af6182ff9108341dfa015f238', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Thanoshan MV,48581379,,User,,81,,76,40
646947163,Proofread Oracle `SELECT` subquery clause,"#10111

Hi @tristaZero, @wgy8283335. I added SQL definition for [SELECT](https://docs.oracle.com/en/database/oracle/oracle-database/19/sqlrf/SELECT.html#GUID-CFA006CA-6FF1-4972-821E-6996142A51C6) statement's subquery clause. Please check it. I'll change them based on your feedback.

Changes proposed in this pull request:
- Added SQL definition for SELECT statement's subquery clause.
- Added test cases for the newly added rules. 
",True,10381,https://api.github.com/repos/apache/shardingsphere/pulls/10381,https://github.com/apache/shardingsphere/pull/10381,closed,261,22,13,3,12,8,3,0,"[{'name': 'type: enhancement'}, {'name': 'in: SQL parse'}, {'name': 'db: Oracle'}]",2021-05-18 17:22:33+00:00,2021-05-27 07:46:41+00:00,743048.0,"8 days, 14:24:08","[{'comment_id': 634859812, 'comment_body': '@ThanoshanMV \r\n`(selectClause | selectClause ` should be `(queryBlock | selectSubquery  `, right?', 'comment_created': datetime.datetime(2021, 5, 19, 1, 51, 15, tzinfo=datetime.timezone.utc), 'commenter': 'wgy8283335', 'type': 'User'}, {'comment_id': 634888075, 'comment_body': ""Yes @wgy8283335, `selectClause` refers to `queryBlock`, I'll rename `selectClause` to `queryBlock`. \r\n\r\nWhen we specify `selectSubquery` as:\r\n```\r\nselectSubquery\r\n    : (queryBlock | selectSubquery ((UNION ALL? | INTERSECT | MINUS) selectSubquery)+ | LP_ selectSubquery RP_) orderByClause? rowLimitingClause\r\n    ;\r\n```\r\nAs previously mentioned ANTLR gives an error: `selectSubquery` is mutually left-recursive. \r\n![SelectSubquery-MutuallyLeftRecursive](https://user-images.githubusercontent.com/48581379/118752054-0be7d700-b880-11eb-869c-f63824d33da0.png)\r\n\r\nI think error is coming because of this one: `selectSubquery ((UNION ALL? | INTERSECT | MINUS) selectSubquery)+`  "", 'comment_created': datetime.datetime(2021, 5, 19, 3, 31, 6, tzinfo=datetime.timezone.utc), 'commenter': 'ThanoshanMV', 'type': 'User'}, {'comment_id': 635386640, 'comment_body': ""To resolve the mutually left-recursive error, I tried with this definition:\r\n\r\n```\r\nselect \r\n    : selectSubquery forUpdateClause?\r\n    ;\r\n\r\nselectSubquery\r\n    : (queryBlock | selectUnionClause | parenthesisSelectSubquery) orderByClause? rowLimitingClause\r\n    ;\r\n\r\nselectUnionClause\r\n    : ((queryBlock | parenthesisSelectSubquery) orderByClause? rowLimitingClause) ((UNION ALL? | INTERSECT | MINUS) selectSubquery)+\r\n    ;\r\n\r\nparenthesisSelectSubquery\r\n    : LP_ selectSubquery RP_\r\n    ;\r\n```\r\nIt worked without that error. Because of mutually left-recursive error, I didn't add `selectUnionClause` in `selectUnionClause`'s definition and only specified `(queryBlock | parenthesisSelectSubquery)`."", 'comment_created': datetime.datetime(2021, 5, 19, 16, 6, 43, tzinfo=datetime.timezone.utc), 'commenter': 'ThanoshanMV', 'type': 'User'}, {'comment_id': 637335528, 'comment_body': '`rowLimitingClause` miss ?', 'comment_created': datetime.datetime(2021, 5, 22, 1, 30, 16, tzinfo=datetime.timezone.utc), 'commenter': 'wgy8283335', 'type': 'User'}, {'comment_id': 637336919, 'comment_body': 'Why put `((UNION ALL? | INTERSECT | MINUS) selectSubquery)+` behind of the sentence?', 'comment_created': datetime.datetime(2021, 5, 22, 1, 43, 17, tzinfo=datetime.timezone.utc), 'commenter': 'wgy8283335', 'type': 'User'}, {'comment_id': 637371021, 'comment_body': ""When we add `?` to `rowLimitingClause`, ANTLR gives `rule selectUnionClause contains an optional block with at least one alternative that can match an empty string` warning. So I didn't add it. Shall I add it?"", 'comment_created': datetime.datetime(2021, 5, 22, 7, 54, 14, tzinfo=datetime.timezone.utc), 'commenter': 'ThanoshanMV', 'type': 'User'}, {'comment_id': 637373580, 'comment_body': 'In `selectUnionClause`, for the first `selectSubquery` because of mutually left-recursive error, I specified it as `((queryBlock | parenthesisSelectSubquery) orderByClause? rowLimitingClause)` then I specified `((UNION ALL? | INTERSECT | MINUS) selectSubquery)+`\r\n![SelectUnionClause](https://user-images.githubusercontent.com/48581379/119219825-1070f180-bb05-11eb-9981-b68d1620431f.png)\r\n', 'comment_created': datetime.datetime(2021, 5, 22, 8, 21, 30, tzinfo=datetime.timezone.utc), 'commenter': 'ThanoshanMV', 'type': 'User'}, {'comment_id': 638374118, 'comment_body': ""> When we add `?` to `rowLimitingClause`, ANTLR gives `rule selectUnionClause contains an optional block with at least one alternative that can match an empty string` warning. So I didn't add it. Shall I add it?\r\nAs the definition of the 'rowLimitingClause' is below:\r\n```\r\nrowLimitingClause\r\n    : (OFFSET offset (ROW | ROWS))? (FETCH (FIRST | NEXT) (rowcount | percent PERCENT)? (ROW | ROWS) (ONLY | WITH TIES))?\r\n    ;\r\n```\r\nI think there is no need to add '?'."", 'comment_created': datetime.datetime(2021, 5, 25, 0, 31, 16, tzinfo=datetime.timezone.utc), 'commenter': 'wgy8283335', 'type': 'User'}]","[{'commit_sha': '8a481b4bc1a5b04531c05a5cff0e977854cdca47', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '34ba8fd022f5c45e3fa34f4d0a1398b1f5595869', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '5f574e7eea4dfd13500394a77379c8f49c980a41', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Thanoshan MV,48581379,,User,,81,,76,40
657742398,Add with clause for Oracle `SELECT` statement,"#10111

Hi @tristaZero, @wgy8283335. I've added SQL definition for [SELECT](https://docs.oracle.com/en/database/oracle/oracle-database/19/sqlrf/SELECT.html#GUID-CFA006CA-6FF1-4972-821E-6996142A51C6) statement's with clause. Please check it. I'll change them based on your feedback.

Changes proposed in this pull request:
- Added SQL definition for `SELECT` statement's with clause.
- Added test cases for with clause.
- I asserted subquery in the `WithClauseAssert`.
- In the `SQLServerDMLStatementSQLVisitor`, I changed the `SubquerySegment`'s start and stop indices by getting from `cteClauses()`'s `subquery()`.
",True,10558,https://api.github.com/repos/apache/shardingsphere/pulls/10558,https://github.com/apache/shardingsphere/pull/10558,closed,881,12,14,9,4,29,2,0,"[{'name': 'in: SQL parse'}, {'name': 'db: Oracle'}]",2021-05-30 16:18:07+00:00,2021-06-09 01:25:39+00:00,810452.0,"9 days, 9:07:32","[{'comment_id': 644397493, 'comment_body': 'The rule `duplicateSpecification` is not the same as definition in oracle rule.\r\n![image](https://user-images.githubusercontent.com/22066046/120567102-80577400-c443-11eb-906a-b4ce1361a8dd.png)\r\n', 'comment_created': datetime.datetime(2021, 6, 3, 0, 13, 1, tzinfo=datetime.timezone.utc), 'commenter': 'wgy8283335', 'type': 'User'}, {'comment_id': 644398461, 'comment_body': 'The rule `projections` is not the same as definition in oracle rule.\r\n![image](https://user-images.githubusercontent.com/22066046/120567289-f6f47180-c443-11eb-8a00-93d371e29fa2.png)\r\n', 'comment_created': datetime.datetime(2021, 6, 3, 0, 16, 19, tzinfo=datetime.timezone.utc), 'commenter': 'wgy8283335', 'type': 'User'}, {'comment_id': 644400108, 'comment_body': 'The rule `fromClause` is not the same as definition in oracle rule.\r\n![image](https://user-images.githubusercontent.com/22066046/120567572-b9441880-c444-11eb-9c0b-77507c3b08d9.png)\r\n\r\n', 'comment_created': datetime.datetime(2021, 6, 3, 0, 21, 55, tzinfo=datetime.timezone.utc), 'commenter': 'wgy8283335', 'type': 'User'}, {'comment_id': 644400745, 'comment_body': 'The rules: `whereClause`, `groupByClause`, `havingClause`. They need to be checked whether it is the same as the definition of the oracle rule.', 'comment_created': datetime.datetime(2021, 6, 3, 0, 24, 6, tzinfo=datetime.timezone.utc), 'commenter': 'wgy8283335', 'type': 'User'}, {'comment_id': 644513278, 'comment_body': ""Hi @wgy8283335, yes the above-mentioned rules aren't aligned with Oracle documentation rules. Since `withClause` contains a lot of changes, I only put `withClause` definition in this PR. I thought to proofread each rule in the `queryBlock` with seperate PRs. What do you think?"", 'comment_created': datetime.datetime(2021, 6, 3, 6, 16, 2, tzinfo=datetime.timezone.utc), 'commenter': 'ThanoshanMV', 'type': 'User'}, {'comment_id': 645208541, 'comment_body': 'I agree with you.', 'comment_created': datetime.datetime(2021, 6, 4, 0, 15, 45, tzinfo=datetime.timezone.utc), 'commenter': 'wgy8283335', 'type': 'User'}, {'comment_id': 645210807, 'comment_body': ""I've checked the rule `alias`. \r\nCould you put the below rule into the BaseRule.g4?\r\n```\r\nalias\r\n    : identifier | STRING_\r\n    ;\r\n```"", 'comment_created': datetime.datetime(2021, 6, 4, 0, 23, 38, tzinfo=datetime.timezone.utc), 'commenter': 'wgy8283335', 'type': 'User'}, {'comment_id': 645214688, 'comment_body': '![image](https://user-images.githubusercontent.com/22066046/120728695-0d67ff00-c510-11eb-8212-0f76633ba836.png)\r\n', 'comment_created': datetime.datetime(2021, 6, 4, 0, 37, 14, tzinfo=datetime.timezone.utc), 'commenter': 'wgy8283335', 'type': 'User'}, {'comment_id': 645215312, 'comment_body': '\r\n![image](https://user-images.githubusercontent.com/22066046/120728895-70f22c80-c510-11eb-92b5-006758b8304f.png)\r\n\r\n', 'comment_created': datetime.datetime(2021, 6, 4, 0, 39, 39, tzinfo=datetime.timezone.utc), 'commenter': 'wgy8283335', 'type': 'User'}, {'comment_id': 645215923, 'comment_body': '![image](https://user-images.githubusercontent.com/22066046/120728991-a72fac00-c510-11eb-9b2b-b555d908fa17.png)\r\n', 'comment_created': datetime.datetime(2021, 6, 4, 0, 41, 38, tzinfo=datetime.timezone.utc), 'commenter': 'wgy8283335', 'type': 'User'}, {'comment_id': 645218403, 'comment_body': 'Could you put a reference link of the rule `calcMeasClause`?', 'comment_created': datetime.datetime(2021, 6, 4, 0, 50, 7, tzinfo=datetime.timezone.utc), 'commenter': 'wgy8283335', 'type': 'User'}, {'comment_id': 645649611, 'comment_body': ""Yes, I'll put it here.\r\n\r\n![CalculatedMeasureClause](https://user-images.githubusercontent.com/48581379/120823142-c06a4400-c574-11eb-9354-c8619ba05cdb.png)\r\n\r\nHere is the [reference link to `calc_meas_expression`](https://docs.oracle.com/en/database/oracle/oracle-database/19/sqlrf/analytic-view-measure-expressions.html#GUID-F8C7ED67-A4EC-479C-975F-12F1F4B8CBA0)."", 'comment_created': datetime.datetime(2021, 6, 4, 15, 11, 1, tzinfo=datetime.timezone.utc), 'commenter': 'ThanoshanMV', 'type': 'User'}, {'comment_id': 645699406, 'comment_body': ""I've put it."", 'comment_created': datetime.datetime(2021, 6, 4, 16, 22, 44, tzinfo=datetime.timezone.utc), 'commenter': 'ThanoshanMV', 'type': 'User'}, {'comment_id': 645906094, 'comment_body': ""![image](https://user-images.githubusercontent.com/22066046/120872435-58961680-c5d1-11eb-9c09-4c09052b054b.png)\r\n\r\n@ThanoshanMV Is it suitable that 'predicate' is written as an 'expr'?"", 'comment_created': datetime.datetime(2021, 6, 4, 23, 42, 9, tzinfo=datetime.timezone.utc), 'commenter': 'wgy8283335', 'type': 'User'}, {'comment_id': 645906447, 'comment_body': ""It's better to add more test cases."", 'comment_created': datetime.datetime(2021, 6, 4, 23, 44, 7, tzinfo=datetime.timezone.utc), 'commenter': 'wgy8283335', 'type': 'User'}, {'comment_id': 645908467, 'comment_body': 'Why do you modify the SQLServer visitor?\r\nAs this pr is only for Oracle.', 'comment_created': datetime.datetime(2021, 6, 4, 23, 54, 29, tzinfo=datetime.timezone.utc), 'commenter': 'wgy8283335', 'type': 'User'}, {'comment_id': 645908638, 'comment_body': 'Why not add this to OracleSelectStatement?', 'comment_created': datetime.datetime(2021, 6, 4, 23, 55, 15, tzinfo=datetime.timezone.utc), 'commenter': 'wgy8283335', 'type': 'User'}, {'comment_id': 645908784, 'comment_body': 'Why do you modify delete.xml ?', 'comment_created': datetime.datetime(2021, 6, 4, 23, 56, 6, tzinfo=datetime.timezone.utc), 'commenter': 'wgy8283335', 'type': 'User'}, {'comment_id': 645908822, 'comment_body': 'Why do you modify delete.xml ?', 'comment_created': datetime.datetime(2021, 6, 4, 23, 56, 14, tzinfo=datetime.timezone.utc), 'commenter': 'wgy8283335', 'type': 'User'}, {'comment_id': 645948803, 'comment_body': ""I earlier put `predicate` for `filterClause`, it parsed them correctly for two examples in the above image but there's another example SQL statement that defines a transitory analytic view using a filter clause:\r\n\r\n![FilterFactClause](https://user-images.githubusercontent.com/48581379/120881821-796e6400-c5f1-11eb-9ea1-0fd59764edd6.png)\r\n\r\nThe above statement is failed to parse correctly when I specified `predicate`:\r\n\r\n![PredicateRuleFailure](https://user-images.githubusercontent.com/48581379/120881877-dcf89180-c5f1-11eb-9aa3-3b4bd6899f24.png)\r\n\r\nThen I changed `predicate` to `expr`:\r\n\r\n![ExprRuleSuccess](https://user-images.githubusercontent.com/48581379/120881922-247f1d80-c5f2-11eb-966f-9a5dae1dfb99.png)\r\n\r\n"", 'comment_created': datetime.datetime(2021, 6, 5, 6, 10, 6, tzinfo=datetime.timezone.utc), 'commenter': 'ThanoshanMV', 'type': 'User'}, {'comment_id': 645950872, 'comment_body': 'I found that `withClause` is available for [SQL Server](https://docs.microsoft.com/en-us/sql/t-sql/queries/with-common-table-expression-transact-sql?view=sql-server-ver15), [PostgreSQL](https://www.postgresql.org/docs/current/queries-with.html), and [MySQL](https://dev.mysql.com/doc/refman/8.0/en/with.html). So I put `WithSegment` in `SelectStatement`.', 'comment_created': datetime.datetime(2021, 6, 5, 6, 32, 6, tzinfo=datetime.timezone.utc), 'commenter': 'ThanoshanMV', 'type': 'User'}, {'comment_id': 645955068, 'comment_body': 'Since I tried to assert the `SubquerySegment` of `CommonTableExpressionSegment` in `WithClauseAssert`, I needed to provide start and stop indices for all `subquery-expression`s within `common-table-expression`s as they were asserted. ', 'comment_created': datetime.datetime(2021, 6, 5, 7, 17, 16, tzinfo=datetime.timezone.utc), 'commenter': 'ThanoshanMV', 'type': 'User'}, {'comment_id': 645956629, 'comment_body': ""While I was adding start and stop indices for all `subquery-expression` within `common-table-expression`, in the SQLServer visitor, the `SubquerySegment`'s start and stop indices are collected from `CommonTableExpressionSegment`'s start and stop indices. So I changed them from getting `CommonTableExpressionSegment`'s `SubquerySegment`. Shall I remove this modification?"", 'comment_created': datetime.datetime(2021, 6, 5, 7, 34, 24, tzinfo=datetime.timezone.utc), 'commenter': 'ThanoshanMV', 'type': 'User'}, {'comment_id': 645960140, 'comment_body': ""I'll add them."", 'comment_created': datetime.datetime(2021, 6, 5, 8, 11, 34, tzinfo=datetime.timezone.utc), 'commenter': 'ThanoshanMV', 'type': 'User'}, {'comment_id': 646055738, 'comment_body': '@tristaZero Do you think we need to add `with clause` for  SQL Server, PostgreSQL, and MySQL?', 'comment_created': datetime.datetime(2021, 6, 6, 1, 7, 19, tzinfo=datetime.timezone.utc), 'commenter': 'wgy8283335', 'type': 'User'}, {'comment_id': 646068111, 'comment_body': 'I think so.', 'comment_created': datetime.datetime(2021, 6, 6, 3, 46, 20, tzinfo=datetime.timezone.utc), 'commenter': 'tristaZero', 'type': 'User'}, {'comment_id': 647035177, 'comment_body': 'Because the definition of the predicate is different from the definition of the expr.\r\n```\r\npredicate\r\n    : bitExpr NOT? IN subquery\r\n    | bitExpr NOT? IN LP_ expr (COMMA_ expr)* RP_\r\n    | bitExpr NOT? BETWEEN bitExpr AND predicate\r\n    | bitExpr NOT? LIKE simpleExpr (ESCAPE simpleExpr)?\r\n    | bitExpr\r\n    ;\r\n```', 'comment_created': datetime.datetime(2021, 6, 8, 0, 56, 51, tzinfo=datetime.timezone.utc), 'commenter': 'wgy8283335', 'type': 'User'}, {'comment_id': 647035687, 'comment_body': 'Maybe you should add some rules for the predicate.', 'comment_created': datetime.datetime(2021, 6, 8, 0, 58, 30, tzinfo=datetime.timezone.utc), 'commenter': 'wgy8283335', 'type': 'User'}, {'comment_id': 647611156, 'comment_body': ""I've added a new rule in `predicate` as `bitExpr NOT? IN LP_ expr (COMMA_ expr)* RP_ AND predicate` that matches with the above example:\r\n\r\n![PredicateRuleInFilterClause](https://user-images.githubusercontent.com/48581379/121223122-d5144800-c8a4-11eb-879e-a3cbf32b1325.png)\r\n"", 'comment_created': datetime.datetime(2021, 6, 8, 16, 34, 30, tzinfo=datetime.timezone.utc), 'commenter': 'ThanoshanMV', 'type': 'User'}]","[{'commit_sha': 'a0b09ed14896e108a56ff2db7ac42a79783d1032', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'fb9fe7ba39f8ea92d9cca3d6700272fcc24dade5', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'bdd78bf913c7a7865a99ccacb734dbcc19393f61', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '67a69f93bfe08cea801f6444f18be2fe6c5ac967', 'committer_username': 'ThanoshanMV', 'committer_name': 'Thanoshan MV', 'committer_email': None, 'commit_date': datetime.datetime(2019, 3, 15, 6, 30, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9360976b1dd31e3498e3a21504de2f5911445af8', 'committer_username': 'ThanoshanMV', 'committer_name': 'Thanoshan MV', 'committer_email': None, 'commit_date': datetime.datetime(2019, 3, 15, 6, 30, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1220eb91b2c4673a7211c269d8c1dd25352ab197', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'f3a270824ed7125786f5236dfce95fda0a9da15f', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'd630fc5ebf021b66b7cfac4be2d4a8e722832cf8', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '9ad33fa2f5021a745c33d85bc5ad3a2a669b4a13', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Thanoshan MV,48581379,,User,,81,,76,40
667729383,"Add selectList, fromClause definitions for Oracle Select","#10111 

Changes proposed in this pull request:
- Format some existing `ANTLR` rules in DMLStatement.
- Added SQL definition for [SELECT](https://docs.oracle.com/en/database/oracle/oracle-database/19/sqlrf/SELECT.html#GUID-CFA006CA-6FF1-4972-821E-6996142A51C6) statement's `selectList` and `fromClause`.
- Added corresponding test cases.
- Changed some `sql-case` database types to specific as some of them aren't supported for Oracle.
",True,10759,https://api.github.com/repos/apache/shardingsphere/pulls/10759,https://github.com/apache/shardingsphere/pull/10759,closed,1275,90,15,15,19,1,2,0,"[{'name': 'in: SQL parse'}, {'name': 'db: Oracle'}]",2021-06-11 06:26:14+00:00,2021-07-08 00:30:59+00:00,2311485.0,"26 days, 18:04:45","[{'comment_id': 652260311, 'comment_body': ""It's better to move the rule to DDLStatement. And rename the rule and copy the rule in DMLStatement."", 'comment_created': datetime.datetime(2021, 6, 16, 0, 23, 24, tzinfo=datetime.timezone.utc), 'commenter': 'wgy8283335', 'type': 'User'}]","[{'commit_sha': 'a3c5550a0a76a3ce4fc586e9d7aeb5d288ff3dc5', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'acf27f4e1dc145cadeef7cc9dd8460e999de1346', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '03a56d751b47ae69e048001261d44c3e07973880', 'committer_username': 'ThanoshanMV', 'committer_name': 'Thanoshan MV', 'committer_email': None, 'commit_date': datetime.datetime(2019, 3, 15, 6, 30, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '599c7f568764aeb1d656f1419c30712e10b27845', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a8f1525145bac9611ea5ad9ad815840e1da7d754', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '4e43b0e82e6fadda699dd04926013759f70ecccb', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'c790ad746738e1f7b4d23e7882952fa0bc9864a9', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'e7b3721ca19c55480ddc1b2afe2e5a20134bc8b6', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '67b0e0650c88cd93b82231617a93ccf24d6244bb', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '29b9089075135c913bf5e184710a4326c18a43e8', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '4f162c878c8a089896b787aef77d1c1279ede2e3', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'e630fc1e4b0d2d6151caee8f96d4b44cacd3e651', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'd9ebf4a0b736ac073a09cf2da7a47d51973f3b9d', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '173c234c9c08277039dfc72f350e795a77337ecf', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b95b7168b988abdaa27d990f1db6b5f6f0bcb0de', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Thanoshan MV,48581379,,User,,81,,76,40
678327532,Add Oracle SQL - Insert statement,"#10111

Hi @wgy8283335. I've added SQL definition for Oracle `INSERT` statement. Please check it.

Changes proposed in this pull request:
- Add Oracle [INSERT ](https://docs.oracle.com/en/database/oracle/oracle-database/19/sqlrf/INSERT.html#GUID-903F8043-0254-4EE9-ACC1-CB8AC0AF3423) statement.
- Add corresponding test cases.
",True,11027,https://api.github.com/repos/apache/shardingsphere/pulls/11027,https://github.com/apache/shardingsphere/pull/11027,closed,644,25,13,2,3,5,2,0,"[{'name': 'in: SQL parse'}, {'name': 'db: Oracle'}]",2021-06-26 12:13:07+00:00,2021-06-30 05:56:30+00:00,323003.0,"3 days, 17:43:23","[{'comment_id': 659241437, 'comment_body': 'Where is the definition of collection expression in ORALCE site?', 'comment_created': datetime.datetime(2021, 6, 27, 0, 19, 23, tzinfo=datetime.timezone.utc), 'commenter': 'wgy8283335', 'type': 'User'}, {'comment_id': 659242407, 'comment_body': 'Why add selectSubquery and insertMultiTableElementSegment?', 'comment_created': datetime.datetime(2021, 6, 27, 0, 31, 56, tzinfo=datetime.timezone.utc), 'commenter': 'wgy8283335', 'type': 'User'}, {'comment_id': 659252503, 'comment_body': ""In an `INSERT` statement, with the help of `insertIntoClause` we can add table elements such as `SimpleTableSegment`, `SubquerySegment`. Those are available in `InsertStatement`. But in Oracle's `insertSingleTable` and `insertMultiTable` clause, it expects another `SubquerySegment` after `insertIntoClause`. I think this is specific to Oracle insert statement.\r\n\r\n![insertSingleTable](https://user-images.githubusercontent.com/48581379/123531196-1e2b1f80-d720-11eb-9f0c-a305b285eafb.png)\r\n\r\n![insertMultiTable](https://user-images.githubusercontent.com/48581379/123531197-22573d00-d720-11eb-929f-b3c61c90ddc3.png)\r\n"", 'comment_created': datetime.datetime(2021, 6, 27, 2, 48, 48, tzinfo=datetime.timezone.utc), 'commenter': 'ThanoshanMV', 'type': 'User'}, {'comment_id': 659252710, 'comment_body': 'I added `insertMultiTableElementSegment` to support multitable inserts.', 'comment_created': datetime.datetime(2021, 6, 27, 2, 51, 20, tzinfo=datetime.timezone.utc), 'commenter': 'ThanoshanMV', 'type': 'User'}, {'comment_id': 659253382, 'comment_body': ""Here's the definition:\r\n![tableCollectionExpression](https://user-images.githubusercontent.com/48581379/123531344-7a427380-d721-11eb-8426-2c1249453163.png)\r\n"", 'comment_created': datetime.datetime(2021, 6, 27, 3, 0, 41, tzinfo=datetime.timezone.utc), 'commenter': 'ThanoshanMV', 'type': 'User'}]","[{'commit_sha': 'd4c545b71dc1b105a0efbd737b091a1ec46f8a24', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '3fdf9af5d9c82ab0093f12ec02ab977a8508dff1', 'committer_username': 'ThanoshanMV', 'committer_name': 'Thanoshan MV', 'committer_email': None, 'commit_date': datetime.datetime(2019, 3, 15, 6, 30, 53, tzinfo=datetime.timezone.utc)}]",Thanoshan MV,48581379,,User,,81,,76,40
687138220,Proofread Oracle SELECT Hierarchical Query and GroupBy Clause,"#10111 

Hi @wgy8283335, I've proofread Oracle [SELECT](https://docs.oracle.com/en/database/oracle/oracle-database/19/sqlrf/SELECT.html#GUID-CFA006CA-6FF1-4972-821E-6996142A51C6) hierarchical query and group by clause. Please check it.

Changes proposed in this pull request:
- Proofread Oracle SELECT hierarchical query and group by clause.
- Add test cases for hierarchical query and group by clause.
- I created new constructors for `ColumnOrderByItem`, `ExpressionOrderByItem` and `IndexOrderByItem` without having `OrderDirection` as a construction parameter. Since Oracle `SELECT` group by clause is not associated with any order directions, I created those new constructors. I'll remove them if they aren't recommended.
- I added `ExpectedAggregationProjection` in `ExpectedExpression` and asserted it in `ExpressionAssert`.
",True,11259,https://api.github.com/repos/apache/shardingsphere/pulls/11259,https://github.com/apache/shardingsphere/pull/11259,closed,358,11,10,11,10,2,3,0,"[{'name': 'type: enhancement'}, {'name': 'in: SQL parse'}, {'name': 'db: Oracle'}]",2021-07-10 06:44:42+00:00,2021-07-22 02:02:58+00:00,1019896.0,"11 days, 19:18:16","[{'comment_id': 667556678, 'comment_body': 'Do you think this is better?\r\n`exprs | LP_ expr? (COMMA_ expr)* RP_`', 'comment_created': datetime.datetime(2021, 7, 12, 0, 11, 28, tzinfo=datetime.timezone.utc), 'commenter': 'wgy8283335', 'type': 'User'}, {'comment_id': 667629200, 'comment_body': ""Yes, I'll change that."", 'comment_created': datetime.datetime(2021, 7, 12, 5, 13, 26, tzinfo=datetime.timezone.utc), 'commenter': 'ThanoshanMV', 'type': 'User'}]","[{'commit_sha': '21e1e7ac12b7bf2ac1e28ea626c6c8ce0ca49dac', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '3c6bb28b1f546e675fa3a81448378387f0c126cb', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '7e7431fb60dd200fbb70c671831f3013371368de', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'e2b719a735a32418d52239e2bee3bf49f951a4f2', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '55092dd675fd0643497bf75fb05af6c7ba197d6e', 'committer_username': 'ThanoshanMV', 'committer_name': 'Thanoshan MV', 'committer_email': None, 'commit_date': datetime.datetime(2019, 3, 15, 6, 30, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8b7ff7e3b8a93373331fcc195bd4d6e7b4d1cc7', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'f164ee4651805e33322b34f0aac99e23bcbd6f30', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '05cb417f4602fbbadab8e675e7f667e416bd20f8', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '6a2a010ae46c7f62fcfac020a9da262376dff7f7', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '2f61e5b441fbcc01a2d069fb2b41d4d2f56a050e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a35e1bce21cc68c8e07e2cbf83859181beedf59e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Thanoshan MV,48581379,,User,,81,,76,40
691964068,Add Oracle SQL - Delete statement,"#10111 

Hi @wgy8283335, I've added SQL definition for Oracle [DELETE](https://docs.oracle.com/en/database/oracle/oracle-database/19/sqlrf/DELETE.html#GUID-156845A5-B626-412B-9F95-8869B988ABD7) statement. Please check it.

Changes proposed in this pull request:
- Add Oracle `DELETE` statement.
- Add test cases.
- I removed Oracle DB-type for SQL case `delete_with_alias` as it has `AS` keyword with the alias.
- I commented out two SQL case ids `delete_with_special_comments_return_without_sharding_value`, and `delete_with_special_comments_returning_without_sharding_value` as they aren't aligned with Oracle SQL. The SQL parsing fails because of `returningCluase`. Previous Oracle `DELETE` rule, didn't have support for  `returningCluase`. So, it didn't parse. The below image specifies the SQL parsing using previous `DELETE` rule for `delete_with_special_comments_return_without_sharding_value` SQL case id :

![PreviousDeleteStatement](https://user-images.githubusercontent.com/48581379/126044994-8144e109-6e14-411b-81df-2a591b35efd8.png)

- The below image specifies SQL parsing using new `DELETE` rule:
![NewDeleteStatement](https://user-images.githubusercontent.com/48581379/126045088-959d0205-960f-4c93-9c77-e790225c2ca4.png)

The above SQL case ids don't have required `INTO` keyword with their `returningClause` as well.
",True,11372,https://api.github.com/repos/apache/shardingsphere/pulls/11372,https://github.com/apache/shardingsphere/pull/11372,closed,237,79,6,2,2,2,3,0,"[{'name': 'type: enhancement'}, {'name': 'in: SQL parse'}, {'name': 'db: Oracle'}]",2021-07-17 17:32:53+00:00,2021-07-21 00:00:39+00:00,282466.0,"3 days, 6:27:46","[{'comment_id': 671920690, 'comment_body': ""We'd better delete these commented lines."", 'comment_created': datetime.datetime(2021, 7, 19, 0, 16, 59, tzinfo=datetime.timezone.utc), 'commenter': 'wgy8283335', 'type': 'User'}, {'comment_id': 672047758, 'comment_body': ""Okay @wgy8283335, I'll update this and let you know."", 'comment_created': datetime.datetime(2021, 7, 19, 7, 23, 40, tzinfo=datetime.timezone.utc), 'commenter': 'ThanoshanMV', 'type': 'User'}]","[{'commit_sha': 'd9680f54677970d145fd4d720b763125e9bb9811', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '9c5277ce94acf3a8bbcce7027ade48e9c9408f45', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Thanoshan MV,48581379,,User,,81,,76,40
696496439,Add Oracle Select Model Clause Definition,"#10111 

Hi @wgy8283335, I've added Oracle [SELECT](https://docs.oracle.com/en/database/oracle/oracle-database/19/sqlrf/SELECT.html#GUID-CFA006CA-6FF1-4972-821E-6996142A51C6) model clause. Please check it.

Changes proposed in this pull request:
- Added Oracle `SELECT` model clause definition.
- Added test cases for model clause.
- Created `modelSegment` to get `SELECT` statements from `referenceModel`, and `cellAssignment`, to get column values from `cellAssignment` and to get order by segments from `modelRulesClause`.
- Modified the `aggregationFunction` by adding [analyticClause](https://docs.oracle.com/en/database/oracle/oracle-database/19/sqlrf/Analytic-Functions.html#GUID-527832F7-63C0-4445-8C16-307FA5084056). Here's the documentation for existing aggregate functions: [MIN](https://docs.oracle.com/en/database/oracle/oracle-database/19/sqlrf/MIN.html#GUID-F7F04E18-1AD8-4D15-9491-4622AD847A74), [MAX](https://docs.oracle.com/en/database/oracle/oracle-database/19/sqlrf/MAX.html#GUID-E5372020-A6DA-44BF-93BE-DA8C3F74CD01), [SUM](https://docs.oracle.com/en/database/oracle/oracle-database/19/sqlrf/SUM.html#GUID-5610BE2C-CFE5-446F-A1F7-B924B5663220), [COUNT](https://docs.oracle.com/en/database/oracle/oracle-database/19/sqlrf/COUNT.html#GUID-AEF08B79-024D-4E3A-B362-9715FB011776), [AVG](https://docs.oracle.com/en/database/oracle/oracle-database/19/sqlrf/AVG.html#GUID-B64BCBF1-DAA0-4D88-9821-2C4D3FDE5E4A), [GROUPING](https://docs.oracle.com/en/database/oracle/oracle-database/19/sqlrf/GROUPING.html#GUID-82E6084A-0BDF-4587-A40E-36899783F073).
- I added a new rule in `simpleExpr` to support expressions coming from `modelRulesClause`'s `expr`.
",True,11503,https://api.github.com/repos/apache/shardingsphere/pulls/11503,https://github.com/apache/shardingsphere/pull/11503,closed,1157,28,24,15,16,17,2,0,"[{'name': 'in: SQL parse'}, {'name': 'db: Oracle'}]",2021-07-25 12:47:40+00:00,2021-08-14 01:45:10+00:00,1688250.0,"19 days, 12:57:30","[{'comment_id': 680437365, 'comment_body': ""Where is the definition of modelRulesClause's expr"", 'comment_created': datetime.datetime(2021, 8, 1, 2, 28, 57, tzinfo=datetime.timezone.utc), 'commenter': 'wgy8283335', 'type': 'User'}, {'comment_id': 680438048, 'comment_body': ""What about use 'referenceModel*' ?"", 'comment_created': datetime.datetime(2021, 8, 1, 2, 35, 26, tzinfo=datetime.timezone.utc), 'commenter': 'wgy8283335', 'type': 'User'}, {'comment_id': 680438470, 'comment_body': '![image](https://user-images.githubusercontent.com/22066046/127757362-f275ecc5-9bdb-4055-843f-a7ef9b391bfb.png)\r\n', 'comment_created': datetime.datetime(2021, 8, 1, 2, 41, 15, tzinfo=datetime.timezone.utc), 'commenter': 'wgy8283335', 'type': 'User'}, {'comment_id': 680438524, 'comment_body': 'Where is condition?', 'comment_created': datetime.datetime(2021, 8, 1, 2, 41, 43, tzinfo=datetime.timezone.utc), 'commenter': 'wgy8283335', 'type': 'User'}, {'comment_id': 680442018, 'comment_body': 'The SQL is so complicated, are you sure the SQL could be executed succesfully?', 'comment_created': datetime.datetime(2021, 8, 1, 3, 21, 24, tzinfo=datetime.timezone.utc), 'commenter': 'wgy8283335', 'type': 'User'}, {'comment_id': 680442910, 'comment_body': 'Whether we need these four segments below should be discussed. ', 'comment_created': datetime.datetime(2021, 8, 1, 3, 32, 4, tzinfo=datetime.timezone.utc), 'commenter': 'wgy8283335', 'type': 'User'}, {'comment_id': 680541323, 'comment_body': ""I added `(owner DOT_)? name LBT_ expr (COMMA_ expr)* RBT_ simpleExpr?` rule to support for expressions coming from `modelRulesClause`'s right-hand side assignment.\r\n\r\n![modelRulesClauseDefinition](https://user-images.githubusercontent.com/48581379/127779755-900bcd33-d2ce-44d7-9f74-feac2c1a3838.png)\r\n\r\n![modelRulesClauseRule](https://user-images.githubusercontent.com/48581379/127779768-9f514565-4414-43f2-944d-f4bda990b61c.png)\r\n\r\nI found out the actual [definition](https://docs.oracle.com/en/database/oracle/oracle-database/19/sqlrf/Model-Expressions.html#GUID-83D3FD56-8346-4D3F-A49E-5FE41FE19257) of `modelRulesClause`'s right-hand side assignment. \r\n\r\n![RightHandsideRule](https://user-images.githubusercontent.com/48581379/127779923-8fef8e16-9b46-41ba-a50f-cbc98cffbd67.png)\r\n\r\nI'll remove the rule `(owner DOT_)? name LBT_ expr (COMMA_ expr)* RBT_ simpleExpr?` as it's not appropriate and update the `modelRuleClause`'s right-hand side `expr` to `modelExpr`.\r\n"", 'comment_created': datetime.datetime(2021, 8, 1, 17, 25, 48, tzinfo=datetime.timezone.utc), 'commenter': 'ThanoshanMV', 'type': 'User'}, {'comment_id': 680545500, 'comment_body': ""With the previous `(owner DOT_)? name LBT_ expr (COMMA_ expr)* RBT_ simpleExpr?` rule, the above SQLs were executed successfully. \r\n\r\nAfter removing the inappropriate above rule and changing `modelRuleClause`'s right-hand side `expr` to `modelExpr`, those above SQLs weren't executed successfully. \r\n\r\nExcept for SQL case ids `select_with_model_partition_dimension` and `select_with_model_dimension`, other SQLs were taken from [external source](https://docs.oracle.com/cd/B19306_01/server.102/b14223/sqlmodel.htm) and not from [official documentation](https://docs.oracle.com/en/database/oracle/oracle-database/19/sqlrf/SELECT.html#GUID-CFA006CA-6FF1-4972-821E-6996142A51C6). I added external source SQLs to check how parsing happens in `singleColumnForLoop`, `referenceModel` and so on.\r\n\r\nThe parsing fails in `modelExpr`, here's an example with SQL case id `select_with_model_with_single_column_for_loop`:\r\n\r\n![SQLParsingFails](https://user-images.githubusercontent.com/48581379/127780856-a1bcb4f6-07ed-4987-89e6-b396e5830038.png)\r\n\r\nI'll comment on all external source SQLs. Maybe it's better to remove the external source SQLs as we don't know whether they are aligned with Oracle 19?"", 'comment_created': datetime.datetime(2021, 8, 1, 18, 3, 34, tzinfo=datetime.timezone.utc), 'commenter': 'ThanoshanMV', 'type': 'User'}, {'comment_id': 680547173, 'comment_body': ""Though I tried to add `modelExpr` correctly, one SQL from [official documentation](https://docs.oracle.com/en/database/oracle/oracle-database/19/sqlrf/SELECT.html#GUID-CFA006CA-6FF1-4972-821E-6996142A51C6) with SQL case id `select_with_model_partition_dimension` failed to parse as `modelExpr` isn't followed with `PLUS_` and another `modelExpr`:\r\n\r\n![OfficialDocSQL](https://user-images.githubusercontent.com/48581379/127781112-29130dc8-7f66-4ff2-baf5-73e3532381c2.png)\r\n\r\nTo parse the above SQL correctly, I modified the `modelExpr`:\r\n\r\n![ModifiedModelExprDefinition](https://user-images.githubusercontent.com/48581379/127781217-fbb6de4e-1a4c-48f9-8264-98d2a61d8cdf.png)\r\n\r\nPlease check them and let me know if anything which needs to be changed."", 'comment_created': datetime.datetime(2021, 8, 1, 18, 19, 2, tzinfo=datetime.timezone.utc), 'commenter': 'ThanoshanMV', 'type': 'User'}, {'comment_id': 680547304, 'comment_body': ""Okay @wgy8283335, if those four segments aren't necessary, we can remove them."", 'comment_created': datetime.datetime(2021, 8, 1, 18, 20, 29, tzinfo=datetime.timezone.utc), 'commenter': 'ThanoshanMV', 'type': 'User'}, {'comment_id': 680551129, 'comment_body': ""For now, I've added `condition` as `expr`. I've found out [documentation](https://docs.oracle.com/en/database/oracle/oracle-database/19/sqlrf/Conditions.html#GUID-C2E3ED44-16E7-4924-9125-E1693B1022A8) for `condition`. In the next commit, I'll add them."", 'comment_created': datetime.datetime(2021, 8, 1, 18, 55, 4, tzinfo=datetime.timezone.utc), 'commenter': 'ThanoshanMV', 'type': 'User'}, {'comment_id': 680595322, 'comment_body': ""That's great."", 'comment_created': datetime.datetime(2021, 8, 2, 0, 58, 18, tzinfo=datetime.timezone.utc), 'commenter': 'wgy8283335', 'type': 'User'}, {'comment_id': 680595371, 'comment_body': 'OK.', 'comment_created': datetime.datetime(2021, 8, 2, 0, 58, 47, tzinfo=datetime.timezone.utc), 'commenter': 'wgy8283335', 'type': 'User'}, {'comment_id': 682192494, 'comment_body': 'I think we could keep them.', 'comment_created': datetime.datetime(2021, 8, 4, 0, 33, 25, tzinfo=datetime.timezone.utc), 'commenter': 'wgy8283335', 'type': 'User'}, {'comment_id': 682211677, 'comment_body': 'I think we should keep `(PLUS_ modelExpr)?` in the definition.', 'comment_created': datetime.datetime(2021, 8, 4, 1, 3, 37, tzinfo=datetime.timezone.utc), 'commenter': 'wgy8283335', 'type': 'User'}, {'comment_id': 682746980, 'comment_body': ""Hi @wgy8283335, I've added `condition` rule.\r\n\r\nIn `jsonCondition`, here's the [diagram](https://docs.oracle.com/en/database/oracle/oracle-database/19/adjsn/diagrams-basic-sql-json-path-expression-syntax.html) for `jsonBasicPathExpr` and `jsonBasicPathExpr`'s expression explanation [documentation](https://docs.oracle.com/en/database/oracle/oracle-database/19/adjsn/json-path-expressions.html#GUID-AEBAD813-99AB-418A-93AB-F96BC1658618)."", 'comment_created': datetime.datetime(2021, 8, 4, 15, 53, 21, tzinfo=datetime.timezone.utc), 'commenter': 'ThanoshanMV', 'type': 'User'}, {'comment_id': 682773955, 'comment_body': ""Since we're keeping those segments, I uncommented test cases except for SQL case id `select_with_model_with_reference_models` and modified the `modelExpr` accordingly. \r\n\r\nIn `select_with_model_with_reference_models`, it's quite complex to modify `modelExpr` to match."", 'comment_created': datetime.datetime(2021, 8, 4, 16, 26, 44, tzinfo=datetime.timezone.utc), 'commenter': 'ThanoshanMV', 'type': 'User'}]","[{'commit_sha': '7730d19e5e243ce89f0a9bc4d85fd6ca03f10dc7', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b71e005bebbc74c356ae2e44f935c9447164e211', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '4eed656720ff62d23aa0788d0f406a56b40cc95c', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '0ec4abda2a7c89f0cd977fd5c10f1217f47dfe06', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a99e73c7ba12d02853af6ae1636e57a51ec09cb7', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '28e8a58bfd8e589a32320dd7a59f8eed71c1e47f', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '879be2097da3291cf52f848c1abd14c0eee2c474', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'fb9387d46d0f968f3a67e35edd22b92e0196a249', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ae85e6d5f74003c40a72bbfeabf861e6feaa5373', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '6a157ad540f99289bdcde49b5447191c97424188', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '5b1f0a46c4eeb800cbfdba7c79c8b15603718fdc', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b36f8e41f4954e04f70ab39ecc9b711698c32ce0', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '2b1df1d5f201d89aef6b275454c72481888c1972', 'committer_username': 'ThanoshanMV', 'committer_name': 'Thanoshan MV', 'committer_email': None, 'commit_date': datetime.datetime(2019, 3, 15, 6, 30, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a456cfe12529cf350ddb48627b1b3e75cc9de9a4', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '7c8f54d770023b7af6182ff9108341dfa015f238', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Thanoshan MV,48581379,,User,,81,,76,40
705855518,Add Oracle SQL - Update statement,"#10111

Hi @wgy8283335, I've added SQL definition for Oracle [UPDATE](https://docs.oracle.com/en/database/oracle/oracle-database/19/sqlrf/UPDATE.html#GUID-027A462D-379D-4E35-8611-410F3AC8FDA5) statement. Please check it.

Changes proposed in this pull request:
- Add Oracle `DELETE` statement.
- Add test cases.
- I commented SQL case id `update_with_special_comments` as it's not aligned with Oracle SQL's `returningCluase`:

![ParsingFailsForReturningClause](https://user-images.githubusercontent.com/48581379/128593319-c2555c0f-c906-4efb-8f94-5e965d36eeee.png)

- As Oracle allows us to set a value to a list of columns, I tried to get the list of column values in the `AssignmentSegment`: 

![UpdateSetClause](https://user-images.githubusercontent.com/48581379/128593421-24e7a491-1bf0-42e2-a486-e426645617c3.png)
",True,11692,https://api.github.com/repos/apache/shardingsphere/pulls/11692,https://github.com/apache/shardingsphere/pull/11692,closed,545,134,31,9,6,10,2,0,"[{'name': 'in: SQL parse'}, {'name': 'db: Oracle'}]",2021-08-07 08:07:49+00:00,2021-08-22 04:23:28+00:00,1282539.0,"14 days, 20:15:39","[{'comment_id': 684858982, 'comment_body': 'What about combining the column and columns?\r\nAnd change the value to list.\r\n\r\n```\r\n@RequiredArgsConstructor\r\n@Getter\r\npublic final class AssignmentSegment implements SQLSegment {\r\n    \r\n    private final int startIndex;\r\n    \r\n    private final int stopIndex;\r\n    \r\n    private final List<ColumnSegment> columns;\r\n    \r\n    private final List<ExpressionSegment> values;\r\n}\r\n```', 'comment_created': datetime.datetime(2021, 8, 9, 1, 9, 50, tzinfo=datetime.timezone.utc), 'commenter': 'wgy8283335', 'type': 'User'}, {'comment_id': 684991580, 'comment_body': '> What about combining the column and columns?\r\n\r\nWe can combine columns as a list but since the `AssignmentSegment` is used across the ShardingSphere project, we need to make changes in all `AssignmentSegment` occurrences. For example in `EncryptAssignmentParameterRewriter`:\r\n\r\n![AssignmentSegmentUseCases](https://user-images.githubusercontent.com/48581379/128676131-da81db17-f4c7-4e85-8b79-5a1b757a0af7.png)\r\n\r\nWhat shall we do?', 'comment_created': datetime.datetime(2021, 8, 9, 8, 9, 31, tzinfo=datetime.timezone.utc), 'commenter': 'ThanoshanMV', 'type': 'User'}, {'comment_id': 684996077, 'comment_body': ""> And change the value to list\r\n\r\nI think we don't have to create a list for value, as an assignment can have only one value:\r\n\r\n![UpdateSetClauseHasOnlyOneAssignmentValue](https://user-images.githubusercontent.com/48581379/128676925-cda31c6d-76b6-445f-beeb-1b23d3a8eb6c.png)\r\n\r\nPlease let me know what do you think."", 'comment_created': datetime.datetime(2021, 8, 9, 8, 16, 58, tzinfo=datetime.timezone.utc), 'commenter': 'ThanoshanMV', 'type': 'User'}, {'comment_id': 687283411, 'comment_body': ""Below is not reasonable:\r\n```\r\n@RequiredArgsConstructor\r\n@Getter\r\npublic final class AssignmentSegment implements SQLSegment {\r\n    \r\n    private final int startIndex;\r\n    \r\n    private final int stopIndex;\r\n    \r\n    private final ColumnSegment column;\r\n\r\n    private List<ColumnSegment> columns = new LinkedList<>();\r\n    \r\n    private final ExpressionSegment value;\r\n}\r\n```\r\nBut what shall we do in this situation? @jingshanglu @tristaZero \r\n```\r\nUPDATE employees a SET department_id = (SELECT department_id FROM departments WHERE location_id = '2100'), (salary, commission_pct) = (SELECT 1.1*AVG(salary), 1.5*AVG(commission_pct) FROM employees b WHERE a.department_id = b.department_id);\r\n```"", 'comment_created': datetime.datetime(2021, 8, 12, 0, 33, 34, tzinfo=datetime.timezone.utc), 'commenter': 'wgy8283335', 'type': 'User'}, {'comment_id': 688401072, 'comment_body': ""@wgy8283335 @ThanoshanMV Maybe we can extract abstract class and combine these two idea.\r\n```\r\npublic abstract class AssignmentSegment implements SQLSegment {\r\n    \r\n   List<ColumnSegment> getColumns();\r\n   ExpressionSegment getValue();\r\n}\r\n\r\n@RequiredArgsConstructor\r\n@Getter\r\npublic final class OracleAssignmentSegment extends AssignmentSegment {\r\n    \r\n   private final int startIndex;\r\n    \r\n    private final int stopIndex;\r\n\r\n    private List<ColumnSegment> columns = new LinkedList<>();\r\n    \r\n    private final ExpressionSegment value;\r\n}\r\n```\r\n```\r\nSET department_id = (SELECT department_id FROM departments WHERE location_id = '2100')\r\nexpressed as\r\nOracleAssignmentSegment{columns=[department_id],value=subquery}\r\n\r\n(salary, commission_pct) = (SELECT 1.1*AVG(salary), 1.5*AVG(commission_pct) FROM employees b WHERE a.department_id = b.department_id)\r\nexpressed as \r\nOracleAssignmentSegment{columns=[salary, commission_pct],value=subquery}\r\n```\r\nMaybe it has better decoupling and scalability, but we need to make changes in all `AssignmentSegment` occurrences."", 'comment_created': datetime.datetime(2021, 8, 13, 10, 9, 10, tzinfo=datetime.timezone.utc), 'commenter': 'jingshanglu', 'type': 'User'}, {'comment_id': 688906928, 'comment_body': '@jingshanglu do you mean like this:\r\n\r\n`AssignmentSegment`:\r\n\r\n![AssignmentSegment](https://user-images.githubusercontent.com/48581379/129441421-217ab2bf-5f97-4899-9edf-adf425047d9e.png)\r\n\r\n`OracleAssignmentSegment`:\r\n\r\n![OracleAssignmentSegment](https://user-images.githubusercontent.com/48581379/129441447-bf2e0401-289d-4e4e-bc9d-b493941b3f09.png)\r\n', 'comment_created': datetime.datetime(2021, 8, 14, 9, 27, 7, tzinfo=datetime.timezone.utc), 'commenter': 'ThanoshanMV', 'type': 'User'}, {'comment_id': 688922505, 'comment_body': 'Shall we create similar child classes for other SQL dialects, for example, `PostgreSQLAssignmentSegment` or shall we rename `OracleAssignmentSegment` to a generic one?\r\n\r\nCurrently, whenever we need to create an instance of `AssignmentSegment`, we have to utilize `OracleAssignmentSegment`. In the below image, the method `visitSetClause` is in `PostgreSQLStatementSQLVisitor` which returns an instance of `AssignmentSegment`:\r\n\r\n![PostgreSQLIssue](https://user-images.githubusercontent.com/48581379/129445665-4b112d6b-56c8-4c85-afbf-98ad1ca02456.png)\r\n', 'comment_created': datetime.datetime(2021, 8, 14, 12, 4, 7, tzinfo=datetime.timezone.utc), 'commenter': 'ThanoshanMV', 'type': 'User'}, {'comment_id': 689019699, 'comment_body': '> Shall we create similar child classes for other SQL dialects, for example, `PostgreSQLAssignmentSegment` or shall we rename `OracleAssignmentSegment` to a generic one?\r\n> \r\n> Currently, whenever we need to create an instance of `AssignmentSegment`, we have to utilize `OracleAssignmentSegment`. In the below image, the method `visitSetClause` is in `PostgreSQLStatementSQLVisitor` which returns an instance of `AssignmentSegment`:\r\n> \r\n> ![PostgreSQLIssue](https://user-images.githubusercontent.com/48581379/129445665-4b112d6b-56c8-4c85-afbf-98ad1ca02456.png)\r\n\r\n@ThanoshanMV Yes, maybe it is better to rename `OracleAssignmentSegment` to a genneric one,  define new subclasses when we need to expand.', 'comment_created': datetime.datetime(2021, 8, 15, 2, 48, 54, tzinfo=datetime.timezone.utc), 'commenter': 'jingshanglu', 'type': 'User'}, {'comment_id': 689943836, 'comment_body': 'Is it need to be initialized with LinkedList, as ColumnAssignmentSegment has `@RequiredArgsConstructor`?', 'comment_created': datetime.datetime(2021, 8, 17, 0, 22, 21, tzinfo=datetime.timezone.utc), 'commenter': 'wgy8283335', 'type': 'User'}, {'comment_id': 690542892, 'comment_body': ""I'll change as `private final List<ColumnSegment> columns`, remove the initialization and make other changes accordingly. "", 'comment_created': datetime.datetime(2021, 8, 17, 16, 41, 8, tzinfo=datetime.timezone.utc), 'commenter': 'ThanoshanMV', 'type': 'User'}]","[{'commit_sha': '196294c35fb79628a05fc18e15fa5b0ee4c4ba14', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'fcdf1a581afd9711b811f170c5c6ea3e02206a1b', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '490b7cb3f38945fbe0b8e7aea36197f2c1d6c4af', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'da50cecd3daf6968d03d5e898079788c4b9dfa5f', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b18da81b05cd9bd33bedb6bdc7e873d362f18940', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '1ce85035e1119f105c481332c04ff4a0d93d5b14', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '7fba441c70f4a5a00d6c6052a52120200cfcfdd0', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'f25c08d0b82ad9a751db9e2577dbf8c33fb6b817', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '8b0e2d8e165d2b474026a91b2ed0628b40be0502', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Thanoshan MV,48581379,,User,,81,,76,40

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
49876476,shardingsphere,apache/shardingsphere,Java,6675,19709,1007,695,43412,489,2,10,"[{'id': 1888665829, 'number': 31396, 'closed': datetime.datetime(2024, 5, 26, 5, 9, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 5, 26, 3, 49, 49, tzinfo=datetime.timezone.utc), 'time_taken': 4760.0, 'time_delta': '1:19:20', 'additions': 264, 'deletions': 13, 'state': 'closed'}, {'id': 1876892592, 'number': 31283, 'closed': datetime.datetime(2024, 5, 19, 8, 1, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 5, 18, 18, 55, 22, tzinfo=datetime.timezone.utc), 'time_taken': 47186.0, 'time_delta': '13:06:26', 'additions': 144, 'deletions': 0, 'state': 'closed'}, {'id': 1073749358, 'number': 21312, 'closed': datetime.datetime(2022, 10, 2, 6, 50, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 2, 5, 26, 52, tzinfo=datetime.timezone.utc), 'time_taken': 5019.0, 'time_delta': '1:23:39', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 1045094853, 'number': 20744, 'closed': datetime.datetime(2022, 9, 3, 0, 1, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 2, 16, 23, 21, tzinfo=datetime.timezone.utc), 'time_taken': 27471.0, 'time_delta': '7:37:51', 'additions': 5, 'deletions': 0, 'state': 'closed'}, {'id': 1038912134, 'number': 20623, 'closed': datetime.datetime(2022, 8, 29, 0, 56, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 28, 16, 9, 24, tzinfo=datetime.timezone.utc), 'time_taken': 31638.0, 'time_delta': '8:47:18', 'additions': 44, 'deletions': 58, 'state': 'closed'}, {'id': 1037513469, 'number': 20543, 'closed': datetime.datetime(2022, 8, 26, 6, 2, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 26, 5, 8, 41, tzinfo=datetime.timezone.utc), 'time_taken': 3224.0, 'time_delta': '0:53:44', 'additions': 159, 'deletions': 91, 'state': 'closed'}, {'id': 1028829178, 'number': 20249, 'closed': datetime.datetime(2022, 8, 18, 1, 6, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 17, 13, 17, tzinfo=datetime.timezone.utc), 'time_taken': 42581.0, 'time_delta': '11:49:41', 'additions': 146, 'deletions': 47, 'state': 'closed'}, {'id': 1024240221, 'number': 20093, 'closed': datetime.datetime(2022, 8, 12, 0, 37, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 11, 19, 28, 28, tzinfo=datetime.timezone.utc), 'time_taken': 18532.0, 'time_delta': '5:08:52', 'additions': 159, 'deletions': 56, 'state': 'closed'}, {'id': 1017539668, 'number': 19881, 'closed': datetime.datetime(2022, 8, 5, 1, 18, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 4, 13, 25, 33, tzinfo=datetime.timezone.utc), 'time_taken': 42769.0, 'time_delta': '11:52:49', 'additions': 203, 'deletions': 8, 'state': 'closed'}, {'id': 1008796224, 'number': 19585, 'closed': datetime.datetime(2022, 7, 27, 0, 41, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 26, 17, 35, 18, tzinfo=datetime.timezone.utc), 'time_taken': 25594.0, 'time_delta': '7:06:34', 'additions': 146, 'deletions': 30, 'state': 'closed'}, {'id': 997848967, 'number': 19249, 'closed': datetime.datetime(2022, 7, 16, 7, 8, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 15, 15, 0, 2, tzinfo=datetime.timezone.utc), 'time_taken': 58117.0, 'time_delta': '16:08:37', 'additions': 146, 'deletions': 26, 'state': 'closed'}, {'id': 995730913, 'number': 19121, 'closed': datetime.datetime(2022, 7, 14, 5, 45, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 13, 16, 47, 46, tzinfo=datetime.timezone.utc), 'time_taken': 46670.0, 'time_delta': '12:57:50', 'additions': 146, 'deletions': 27, 'state': 'closed'}, {'id': 985717752, 'number': 18809, 'closed': datetime.datetime(2022, 7, 3, 13, 29, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 3, 12, 56, 2, tzinfo=datetime.timezone.utc), 'time_taken': 2030.0, 'time_delta': '0:33:50', 'additions': 13, 'deletions': 13, 'state': 'closed'}, {'id': 985707729, 'number': 18807, 'closed': datetime.datetime(2022, 7, 4, 1, 52, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 3, 12, 2, 51, tzinfo=datetime.timezone.utc), 'time_taken': 49796.0, 'time_delta': '13:49:56', 'additions': 149, 'deletions': 25, 'state': 'closed'}, {'id': 978962918, 'number': 18581, 'closed': datetime.datetime(2022, 6, 25, 12, 45, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 25, 8, 21, 4, tzinfo=datetime.timezone.utc), 'time_taken': 15848.0, 'time_delta': '4:24:08', 'additions': 49, 'deletions': 19, 'state': 'closed'}, {'id': 973121192, 'number': 18486, 'closed': datetime.datetime(2022, 6, 21, 6, 57, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 21, 5, 44, 15, tzinfo=datetime.timezone.utc), 'time_taken': 4366.0, 'time_delta': '1:12:46', 'additions': 63, 'deletions': 123, 'state': 'closed'}, {'id': 969202129, 'number': 18397, 'closed': datetime.datetime(2022, 6, 16, 11, 29, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 16, 11, 18, 25, tzinfo=datetime.timezone.utc), 'time_taken': 693.0, 'time_delta': '0:11:33', 'additions': 163, 'deletions': 28, 'state': 'closed'}, {'id': 962993451, 'number': 18272, 'closed': datetime.datetime(2022, 6, 10, 4, 39, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 9, 14, 55, 38, tzinfo=datetime.timezone.utc), 'time_taken': 49408.0, 'time_delta': '13:43:28', 'additions': 587, 'deletions': 59, 'state': 'closed'}, {'id': 958547846, 'number': 18185, 'closed': datetime.datetime(2022, 6, 6, 1, 27, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 6, 0, 57, 54, tzinfo=datetime.timezone.utc), 'time_taken': 1769.0, 'time_delta': '0:29:29', 'additions': 123, 'deletions': 13, 'state': 'closed'}, {'id': 954323846, 'number': 18142, 'closed': datetime.datetime(2022, 6, 2, 0, 4, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 1, 16, 37, 7, tzinfo=datetime.timezone.utc), 'time_taken': 26814.0, 'time_delta': '7:26:54', 'additions': 364, 'deletions': 26, 'state': 'closed'}, {'id': 949376889, 'number': 18018, 'closed': datetime.datetime(2022, 5, 27, 22, 34, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 27, 14, 36, 49, tzinfo=datetime.timezone.utc), 'time_taken': 28654.0, 'time_delta': '7:57:34', 'additions': 96, 'deletions': 47, 'state': 'closed'}, {'id': 945297418, 'number': 17905, 'closed': datetime.datetime(2022, 5, 24, 10, 5, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 24, 8, 6, 3, tzinfo=datetime.timezone.utc), 'time_taken': 7189.0, 'time_delta': '1:59:49', 'additions': 140, 'deletions': 2, 'state': 'closed'}, {'id': 943419320, 'number': 17847, 'closed': datetime.datetime(2022, 5, 22, 2, 46, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 21, 12, 3, 39, tzinfo=datetime.timezone.utc), 'time_taken': 52969.0, 'time_delta': '14:42:49', 'additions': 168, 'deletions': 15, 'state': 'closed'}, {'id': 934589279, 'number': 17608, 'closed': datetime.datetime(2022, 5, 24, 9, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 12, 9, 23, 22, tzinfo=datetime.timezone.utc), 'time_taken': 1038218.0, 'time_delta': '12 days, 0:23:38', 'additions': 343, 'deletions': 169, 'state': 'closed'}, {'id': 927827652, 'number': 17321, 'closed': datetime.datetime(2022, 5, 5, 0, 39, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 4, 16, 32, 18, tzinfo=datetime.timezone.utc), 'time_taken': 29218.0, 'time_delta': '8:06:58', 'additions': 129, 'deletions': 33, 'state': 'closed'}, {'id': 926459604, 'number': 17301, 'closed': datetime.datetime(2022, 5, 3, 13, 53, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 3, 11, 31, 45, tzinfo=datetime.timezone.utc), 'time_taken': 8525.0, 'time_delta': '2:22:05', 'additions': 3, 'deletions': 2, 'state': 'closed'}, {'id': 926416210, 'number': 17300, 'closed': datetime.datetime(2022, 5, 4, 5, 49, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 3, 10, 29, 27, tzinfo=datetime.timezone.utc), 'time_taken': 69621.0, 'time_delta': '19:20:21', 'additions': 11, 'deletions': 10, 'state': 'closed'}, {'id': 920689764, 'number': 17157, 'closed': datetime.datetime(2022, 4, 28, 0, 7, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 27, 13, 56, 21, tzinfo=datetime.timezone.utc), 'time_taken': 36640.0, 'time_delta': '10:10:40', 'additions': 51, 'deletions': 1, 'state': 'closed'}, {'id': 915488838, 'number': 16990, 'closed': datetime.datetime(2022, 4, 22, 2, 14, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 21, 15, 28, 39, tzinfo=datetime.timezone.utc), 'time_taken': 38722.0, 'time_delta': '10:45:22', 'additions': 150, 'deletions': 1, 'state': 'closed'}, {'id': 913418759, 'number': 16937, 'closed': datetime.datetime(2022, 4, 20, 1, 0, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 19, 18, 32, 26, tzinfo=datetime.timezone.utc), 'time_taken': 23288.0, 'time_delta': '6:28:08', 'additions': 5, 'deletions': 5, 'state': 'closed'}, {'id': 913401201, 'number': 16936, 'closed': datetime.datetime(2022, 4, 20, 1, 54, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 19, 18, 10, 18, tzinfo=datetime.timezone.utc), 'time_taken': 27825.0, 'time_delta': '7:43:45', 'additions': 39, 'deletions': 0, 'state': 'closed'}, {'id': 908914305, 'number': 16799, 'closed': datetime.datetime(2022, 4, 14, 5, 32, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 13, 13, 9, 24, tzinfo=datetime.timezone.utc), 'time_taken': 59011.0, 'time_delta': '16:23:31', 'additions': 127, 'deletions': 0, 'state': 'closed'}, {'id': 906003497, 'number': 16745, 'closed': datetime.datetime(2022, 4, 12, 0, 20, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 11, 13, 24, 59, tzinfo=datetime.timezone.utc), 'time_taken': 39341.0, 'time_delta': '10:55:41', 'additions': 4, 'deletions': 2, 'state': 'closed'}, {'id': 905770321, 'number': 16732, 'closed': datetime.datetime(2022, 4, 11, 10, 51, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 11, 9, 52, 22, tzinfo=datetime.timezone.utc), 'time_taken': 3557.0, 'time_delta': '0:59:17', 'additions': 37, 'deletions': 3, 'state': 'closed'}, {'id': 898216406, 'number': 16575, 'closed': datetime.datetime(2022, 4, 3, 16, 10, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 3, 6, 41, 11, tzinfo=datetime.timezone.utc), 'time_taken': 34144.0, 'time_delta': '9:29:04', 'additions': 108, 'deletions': 15, 'state': 'closed'}, {'id': 897488470, 'number': 16552, 'closed': datetime.datetime(2022, 4, 2, 1, 44, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 1, 14, 44, 48, tzinfo=datetime.timezone.utc), 'time_taken': 39609.0, 'time_delta': '11:00:09', 'additions': 5, 'deletions': 5, 'state': 'closed'}, {'id': 894427552, 'number': 16505, 'closed': datetime.datetime(2022, 3, 31, 0, 12, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 30, 13, 12, 53, tzinfo=datetime.timezone.utc), 'time_taken': 39587.0, 'time_delta': '10:59:47', 'additions': 246, 'deletions': 13, 'state': 'closed'}, {'id': 885538553, 'number': 16253, 'closed': datetime.datetime(2022, 3, 22, 3, 35, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 22, 2, 48, 33, tzinfo=datetime.timezone.utc), 'time_taken': 2814.0, 'time_delta': '0:46:54', 'additions': 8, 'deletions': 4, 'state': 'closed'}, {'id': 883501628, 'number': 16198, 'closed': datetime.datetime(2022, 3, 18, 15, 5, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 18, 14, 35, 51, tzinfo=datetime.timezone.utc), 'time_taken': 1784.0, 'time_delta': '0:29:44', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 882204646, 'number': 16151, 'closed': datetime.datetime(2022, 3, 18, 0, 6, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 17, 8, 33, 12, tzinfo=datetime.timezone.utc), 'time_taken': 55998.0, 'time_delta': '15:33:18', 'additions': 179, 'deletions': 82, 'state': 'closed'}, {'id': 878365463, 'number': 16032, 'closed': datetime.datetime(2022, 3, 14, 11, 29, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 13, 11, 10, 32, tzinfo=datetime.timezone.utc), 'time_taken': 87535.0, 'time_delta': '1 day, 0:18:55', 'additions': 179, 'deletions': 9, 'state': 'closed'}, {'id': 872214335, 'number': 15804, 'closed': datetime.datetime(2022, 3, 5, 9, 33, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 5, 8, 54, 20, tzinfo=datetime.timezone.utc), 'time_taken': 2355.0, 'time_delta': '0:39:15', 'additions': 386, 'deletions': 49, 'state': 'closed'}, {'id': 863383316, 'number': 15642, 'closed': datetime.datetime(2022, 2, 26, 2, 2, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 2, 25, 12, 13, 5, tzinfo=datetime.timezone.utc), 'time_taken': 49769.0, 'time_delta': '13:49:29', 'additions': 36, 'deletions': 17, 'state': 'closed'}, {'id': 860563127, 'number': 15574, 'closed': datetime.datetime(2022, 2, 23, 0, 43, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 2, 22, 15, 40, 28, tzinfo=datetime.timezone.utc), 'time_taken': 32563.0, 'time_delta': '9:02:43', 'additions': 42, 'deletions': 7, 'state': 'closed'}, {'id': 858879098, 'number': 15528, 'closed': datetime.datetime(2022, 2, 21, 0, 31, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 2, 20, 18, 17, 25, tzinfo=datetime.timezone.utc), 'time_taken': 22421.0, 'time_delta': '6:13:41', 'additions': 432, 'deletions': 9, 'state': 'closed'}, {'id': 786202787, 'number': 13743, 'closed': datetime.datetime(2021, 11, 23, 0, 32, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 11, 22, 16, 8, 39, tzinfo=datetime.timezone.utc), 'time_taken': 30231.0, 'time_delta': '8:23:51', 'additions': 141, 'deletions': 36, 'state': 'closed'}, {'id': 784766431, 'number': 13709, 'closed': datetime.datetime(2021, 11, 22, 1, 36, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 11, 19, 14, 43, 21, tzinfo=datetime.timezone.utc), 'time_taken': 211983.0, 'time_delta': '2 days, 10:53:03', 'additions': 57, 'deletions': 2, 'state': 'closed'}, {'id': 780739681, 'number': 13628, 'closed': datetime.datetime(2021, 11, 16, 4, 0, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 11, 15, 14, 19, 13, tzinfo=datetime.timezone.utc), 'time_taken': 49282.0, 'time_delta': '13:41:22', 'additions': 196, 'deletions': 10, 'state': 'closed'}, {'id': 777744588, 'number': 13546, 'closed': datetime.datetime(2021, 11, 12, 1, 57, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 11, 10, 15, 47, 45, tzinfo=datetime.timezone.utc), 'time_taken': 122964.0, 'time_delta': '1 day, 10:09:24', 'additions': 576, 'deletions': 482, 'state': 'closed'}, {'id': 760596202, 'number': 13111, 'closed': datetime.datetime(2021, 10, 19, 0, 35, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 18, 15, 23, 25, tzinfo=datetime.timezone.utc), 'time_taken': 33122.0, 'time_delta': '9:12:02', 'additions': 104, 'deletions': 2, 'state': 'closed'}, {'id': 759647756, 'number': 13070, 'closed': datetime.datetime(2021, 10, 17, 5, 51, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 16, 12, 4, 52, tzinfo=datetime.timezone.utc), 'time_taken': 64019.0, 'time_delta': '17:46:59', 'additions': 205, 'deletions': 7, 'state': 'closed'}, {'id': 756297166, 'number': 13008, 'closed': datetime.datetime(2021, 10, 13, 5, 14, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 12, 15, 20, 17, tzinfo=datetime.timezone.utc), 'time_taken': 50076.0, 'time_delta': '13:54:36', 'additions': 140, 'deletions': 10, 'state': 'closed'}, {'id': 754714093, 'number': 12980, 'closed': datetime.datetime(2021, 10, 10, 14, 25, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 10, 14, 19, 30, tzinfo=datetime.timezone.utc), 'time_taken': 381.0, 'time_delta': '0:06:21', 'additions': 4, 'deletions': 3, 'state': 'closed'}, {'id': 754711846, 'number': 12979, 'closed': datetime.datetime(2021, 10, 11, 1, 55, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 10, 14, 6, 58, tzinfo=datetime.timezone.utc), 'time_taken': 42502.0, 'time_delta': '11:48:22', 'additions': 245, 'deletions': 7, 'state': 'closed'}, {'id': 748730325, 'number': 12901, 'closed': datetime.datetime(2021, 10, 5, 10, 24, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 4, 9, 15, 9, tzinfo=datetime.timezone.utc), 'time_taken': 90559.0, 'time_delta': '1 day, 1:09:19', 'additions': 86, 'deletions': 86, 'state': 'closed'}, {'id': 745728057, 'number': 12826, 'closed': datetime.datetime(2021, 9, 29, 15, 52, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 29, 13, 10, 47, tzinfo=datetime.timezone.utc), 'time_taken': 9731.0, 'time_delta': '2:42:11', 'additions': 141, 'deletions': 6, 'state': 'closed'}, {'id': 736908464, 'number': 12575, 'closed': datetime.datetime(2021, 9, 22, 2, 7, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 18, 13, 42, 34, tzinfo=datetime.timezone.utc), 'time_taken': 303914.0, 'time_delta': '3 days, 12:25:14', 'additions': 0, 'deletions': 0, 'state': 'closed'}, {'id': 733402879, 'number': 12421, 'closed': datetime.datetime(2021, 9, 14, 8, 16, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 14, 7, 37, 49, tzinfo=datetime.timezone.utc), 'time_taken': 2350.0, 'time_delta': '0:39:10', 'additions': 90, 'deletions': 0, 'state': 'closed'}, {'id': 726954298, 'number': 12201, 'closed': datetime.datetime(2021, 9, 5, 3, 50, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 3, 16, 41, 45, tzinfo=datetime.timezone.utc), 'time_taken': 126522.0, 'time_delta': '1 day, 11:08:42', 'additions': 85, 'deletions': 2, 'state': 'closed'}, {'id': 726165151, 'number': 12184, 'closed': datetime.datetime(2021, 9, 3, 4, 23, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 2, 18, 11, 47, tzinfo=datetime.timezone.utc), 'time_taken': 36683.0, 'time_delta': '10:11:23', 'additions': 0, 'deletions': 50, 'state': 'closed'}, {'id': 705855518, 'number': 11692, 'closed': datetime.datetime(2021, 8, 22, 4, 23, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 7, 8, 7, 49, tzinfo=datetime.timezone.utc), 'time_taken': 1282539.0, 'time_delta': '14 days, 20:15:39', 'additions': 545, 'deletions': 134, 'state': 'closed'}, {'id': 696496439, 'number': 11503, 'closed': datetime.datetime(2021, 8, 14, 1, 45, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 25, 12, 47, 40, tzinfo=datetime.timezone.utc), 'time_taken': 1688250.0, 'time_delta': '19 days, 12:57:30', 'additions': 1157, 'deletions': 28, 'state': 'closed'}, {'id': 691964068, 'number': 11372, 'closed': datetime.datetime(2021, 7, 21, 0, 0, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 17, 17, 32, 53, tzinfo=datetime.timezone.utc), 'time_taken': 282466.0, 'time_delta': '3 days, 6:27:46', 'additions': 237, 'deletions': 79, 'state': 'closed'}, {'id': 687138220, 'number': 11259, 'closed': datetime.datetime(2021, 7, 22, 2, 2, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 10, 6, 44, 42, tzinfo=datetime.timezone.utc), 'time_taken': 1019896.0, 'time_delta': '11 days, 19:18:16', 'additions': 358, 'deletions': 11, 'state': 'closed'}, {'id': 678327532, 'number': 11027, 'closed': datetime.datetime(2021, 6, 30, 5, 56, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 26, 12, 13, 7, tzinfo=datetime.timezone.utc), 'time_taken': 323003.0, 'time_delta': '3 days, 17:43:23', 'additions': 644, 'deletions': 25, 'state': 'closed'}, {'id': 667729383, 'number': 10759, 'closed': datetime.datetime(2021, 7, 8, 0, 30, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 11, 6, 26, 14, tzinfo=datetime.timezone.utc), 'time_taken': 2311485.0, 'time_delta': '26 days, 18:04:45', 'additions': 1275, 'deletions': 90, 'state': 'closed'}, {'id': 657742398, 'number': 10558, 'closed': datetime.datetime(2021, 6, 9, 1, 25, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 30, 16, 18, 7, tzinfo=datetime.timezone.utc), 'time_taken': 810452.0, 'time_delta': '9 days, 9:07:32', 'additions': 881, 'deletions': 12, 'state': 'closed'}, {'id': 646947163, 'number': 10381, 'closed': datetime.datetime(2021, 5, 27, 7, 46, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 18, 17, 22, 33, tzinfo=datetime.timezone.utc), 'time_taken': 743048.0, 'time_delta': '8 days, 14:24:08', 'additions': 261, 'deletions': 22, 'state': 'closed'}, {'id': 634440005, 'number': 10286, 'closed': datetime.datetime(2021, 5, 9, 12, 37, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 8, 13, 14, 7, tzinfo=datetime.timezone.utc), 'time_taken': 84205.0, 'time_delta': '23:23:25', 'additions': 5, 'deletions': 1, 'state': 'closed'}, {'id': 630252234, 'number': 10253, 'closed': datetime.datetime(2021, 5, 13, 11, 8, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 5, 4, 30, 16, tzinfo=datetime.timezone.utc), 'time_taken': 715082.0, 'time_delta': '8 days, 6:38:02', 'additions': 668, 'deletions': 20, 'state': 'closed'}, {'id': 616886154, 'number': 10117, 'closed': datetime.datetime(2021, 4, 24, 2, 58, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 16, 14, 42, 9, tzinfo=datetime.timezone.utc), 'time_taken': 648960.0, 'time_delta': '7 days, 12:16:00', 'additions': 300, 'deletions': 0, 'state': 'closed'}, {'id': 593813412, 'number': 9692, 'closed': datetime.datetime(2021, 3, 30, 8, 45, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 16, 11, 28, 57, tzinfo=datetime.timezone.utc), 'time_taken': 1199776.0, 'time_delta': '13 days, 21:16:16', 'additions': 264, 'deletions': 7, 'state': 'closed'}, {'id': 585484770, 'number': 9599, 'closed': datetime.datetime(2021, 3, 11, 7, 17, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 5, 10, 16, 9, tzinfo=datetime.timezone.utc), 'time_taken': 507662.0, 'time_delta': '5 days, 21:01:02', 'additions': 143, 'deletions': 22, 'state': 'closed'}, {'id': 568814388, 'number': 9361, 'closed': datetime.datetime(2021, 2, 23, 0, 3, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 6, 16, 33, 26, tzinfo=datetime.timezone.utc), 'time_taken': 1409381.0, 'time_delta': '16 days, 7:29:41', 'additions': 323, 'deletions': 10, 'state': 'closed'}, {'id': 561927604, 'number': 9178, 'closed': datetime.datetime(2021, 2, 1, 2, 42, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 26, 17, 7, 9, tzinfo=datetime.timezone.utc), 'time_taken': 466533.0, 'time_delta': '5 days, 9:35:33', 'additions': 35, 'deletions': 3, 'state': 'closed'}, {'id': 560429338, 'number': 9141, 'closed': datetime.datetime(2021, 1, 23, 14, 40, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 23, 14, 19, 20, tzinfo=datetime.timezone.utc), 'time_taken': 1257.0, 'time_delta': '0:20:57', 'additions': 57, 'deletions': 1, 'state': 'closed'}, {'id': 556962543, 'number': 9084, 'closed': datetime.datetime(2021, 1, 20, 6, 49, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 18, 17, 53, 42, tzinfo=datetime.timezone.utc), 'time_taken': 132938.0, 'time_delta': '1 day, 12:55:38', 'additions': 8, 'deletions': 1, 'state': 'closed'}, {'id': 555757556, 'number': 9056, 'closed': datetime.datetime(2021, 1, 19, 3, 24, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 15, 15, 8, 9, tzinfo=datetime.timezone.utc), 'time_taken': 303395.0, 'time_delta': '3 days, 12:16:35', 'additions': 17, 'deletions': 3, 'state': 'closed'}]"
