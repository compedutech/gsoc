pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
678346396,"proposal: Automated, per-endpoint mTLS","Related issue: #977 
",True,4377,https://api.github.com/repos/thanos-io/thanos/pulls/4377,https://github.com/thanos-io/thanos/pull/4377,closed,76,0,1,7,1,14,0,0,[],2021-06-26 14:43:24+00:00,2021-07-15 08:52:39+00:00,1620555.0,"18 days, 18:09:15","[{'comment_id': 662126538, 'comment_body': 'If we provide alternative, we have to comment, why it was not chosen (: ', 'comment_created': datetime.datetime(2021, 7, 1, 9, 19, 15, tzinfo=datetime.timezone.utc), 'commenter': 'bwplotka', 'type': 'User'}, {'comment_id': 662127625, 'comment_body': '`make docs`', 'comment_created': datetime.datetime(2021, 7, 1, 9, 20, 46, tzinfo=datetime.timezone.utc), 'commenter': 'bwplotka', 'type': 'User'}, {'comment_id': 662128708, 'comment_body': '```suggestion\r\nThe endpoints in the list items with no TLS config as well as the those supplied via separate flags (e.g.  `--endpoint`, `--endpoint.strict`, `--endpoint.sd-files` (previous --store.strict, --store.sd-files)) will be considered insecure. Further we would remove the `--secure`, `--cert`, `--key`, `--caCert`, `--serverName` cli _options from thanos query as they are already covered above inside `--endpoint.config`.\r\n\r\n```', 'comment_created': datetime.datetime(2021, 7, 1, 9, 22, 17, tzinfo=datetime.timezone.utc), 'commenter': 'bwplotka', 'type': 'User'}, {'comment_id': 662128991, 'comment_body': '`--store.strict` f` ditto', 'comment_created': datetime.datetime(2021, 7, 1, 9, 22, 43, tzinfo=datetime.timezone.utc), 'commenter': 'bwplotka', 'type': 'User'}, {'comment_id': 662129749, 'comment_body': ""Let's mention step for removal of flags (e.g Further we would remove the `--secure`, `--cert`, `--key`, `--caCert`, `--serverName` ?)\r\n\r\nLet's also describe process of removal  - are we having both? Then deprecateing in one release? "", 'comment_created': datetime.datetime(2021, 7, 1, 9, 23, 43, tzinfo=datetime.timezone.utc), 'commenter': 'bwplotka', 'type': 'User'}, {'comment_id': 664730992, 'comment_body': '> Also currently there is no support for automatic client rotation in thanos.\r\n\r\nBy this do you mean, if you change the certificates, you need to restart the pod to get the new certs? Or something else maybe?', 'comment_created': datetime.datetime(2021, 7, 6, 17, 0, 53, tzinfo=datetime.timezone.utc), 'commenter': 'bill3tt', 'type': 'User'}, {'comment_id': 664734456, 'comment_body': 'Another alternative here is having one querier per-certificate realm - meaning one querier for your internal no-mTLS sidecars, and one querier for your clusters that share a root CA.\r\n\r\nThe pros and cons of this would be:\r\n+ no changes to tls configuration required\r\n+ the way we currently suggest people do this\r\n- Number of queriers is required to scale with the number of certificates / shared root CAs', 'comment_created': datetime.datetime(2021, 7, 6, 17, 6, 21, tzinfo=datetime.timezone.utc), 'commenter': 'bill3tt', 'type': 'User'}, {'comment_id': 664735143, 'comment_body': 'What should happen if endpoints are duplicated between `tls_config` sections? Do we error out or try both maybe?', 'comment_created': datetime.datetime(2021, 7, 6, 17, 7, 28, tzinfo=datetime.timezone.utc), 'commenter': 'bill3tt', 'type': 'User'}, {'comment_id': 664888344, 'comment_body': 'Yep! I mean the same.', 'comment_created': datetime.datetime(2021, 7, 6, 21, 25, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Namanl2001', 'type': 'User'}, {'comment_id': 664890833, 'comment_body': ""We'd have a check for that. We'd return an err if the same endpoint is provided in more than one section.\r\n"", 'comment_created': datetime.datetime(2021, 7, 6, 21, 30, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Namanl2001', 'type': 'User'}, {'comment_id': 666016992, 'comment_body': ""Nice! Let's mention it. Other cons:\r\n\r\n* Complex scenarios when you need to scale out num of replicas multiples per certificate permutation\r\n*  There are better solutions for this kind of TLS termination work e.g Istio, Linkderd, Envoy etc..."", 'comment_created': datetime.datetime(2021, 7, 8, 9, 14, 57, tzinfo=datetime.timezone.utc), 'commenter': 'bwplotka', 'type': 'User'}, {'comment_id': 670273638, 'comment_body': 'Probably you meant a lower case `f` here :smile: ', 'comment_created': datetime.datetime(2021, 7, 15, 9, 0, 37, tzinfo=datetime.timezone.utc), 'commenter': 'GiedriusS', 'type': 'User'}, {'comment_id': 670275517, 'comment_body': ""We've missed this one. @Namanl2001 Could you sent an additional PR to fix this one?"", 'comment_created': datetime.datetime(2021, 7, 15, 9, 3, 6, tzinfo=datetime.timezone.utc), 'commenter': 'kakkoyun', 'type': 'User'}, {'comment_id': 670355676, 'comment_body': 'Oh! sorry I missed it 😅. \r\n\r\nPlease check the fixing PR [here](https://github.com/thanos-io/thanos/pull/4446). @GiedriusS @kakkoyun ', 'comment_created': datetime.datetime(2021, 7, 15, 10, 55, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Namanl2001', 'type': 'User'}]","[{'commit_sha': '08e3f0c2b09120ba1837cd291812e389b385d4ec', 'committer_username': 'Namanl2001', 'committer_name': 'Naman Lakhwani', 'committer_email': 'namanlakhwani@gmail.com', 'commit_date': datetime.datetime(2019, 10, 1, 8, 39, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f8bc73d02cb628bcf5f5d467e2f2880df8d67ec6', 'committer_username': 'Namanl2001', 'committer_name': 'Naman Lakhwani', 'committer_email': 'namanlakhwani@gmail.com', 'commit_date': datetime.datetime(2019, 10, 1, 8, 39, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '941b57476b9e5ace2795c995f83a26d2e07b85ce', 'committer_username': 'Namanl2001', 'committer_name': 'Naman Lakhwani', 'committer_email': 'namanlakhwani@gmail.com', 'commit_date': datetime.datetime(2019, 10, 1, 8, 39, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c0f38d3a100c6f538d58edb50079bc6ad8fb0fd', 'committer_username': 'Namanl2001', 'committer_name': 'Naman Lakhwani', 'committer_email': 'namanlakhwani@gmail.com', 'commit_date': datetime.datetime(2019, 10, 1, 8, 39, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '86cb29536319513502395b706585f5004db8cffc', 'committer_username': 'Namanl2001', 'committer_name': 'Naman Lakhwani', 'committer_email': 'namanlakhwani@gmail.com', 'commit_date': datetime.datetime(2019, 10, 1, 8, 39, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b20f4bb9a997bac15640e78e53a35cf8b06f7cd6', 'committer_username': 'Namanl2001', 'committer_name': 'Naman Lakhwani', 'committer_email': 'namanlakhwani@gmail.com', 'commit_date': datetime.datetime(2019, 10, 1, 8, 39, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a2351c11e4b12924c616b4437bda3417cd24dc13', 'committer_username': 'Namanl2001', 'committer_name': 'Naman Lakhwani', 'committer_email': 'namanlakhwani@gmail.com', 'commit_date': datetime.datetime(2019, 10, 1, 8, 39, 25, tzinfo=datetime.timezone.utc)}]",Naman Lakhwani,56021229,namanlakhwani@gmail.com,User,,19,,23,107
681285646,querier: per-endpoint configuration,"<!--
    Keep PR title verbose enough and add prefix telling
    about what components it touches e.g ""query:"" or "".*:""
-->

<!--
    Don't forget about CHANGELOG!

    Changelog entry format:
    - [#<PR-id>](<PR-URL>) Thanos <Component> ...

    <PR-id> Id of your pull request.
    <PR-URL> URL of your PR such as https://github.com/thanos-io/thanos/pull/<PR-id>
    <Component> Component affected by your changes such as Query, Store, Receive.
-->

The Thanos Querier component supports basic mTLS configuration for internal gRPC communication. This works great for basic use cases but it still requires extra forward proxies to make it work for bigger deployments.

This PR add support for per-endpoint TLS configuration in Thanos Query Component for internal gRPC communication. Here we are introducing a new CLI option `--endpoints.config`, which will accept the content/path to a yaml file which contains a list as follows:
```
- name: """"
  tls_config:
    cert_file: """"
    key_file: """"
    ca_file: """"
    server_name: """"
  endpoints: []
  endpoints_sd_files:
    - files: []
  mode: """"
```

## Changes
Based on proposal #4377 

* Added new `--endpoint.config` cli option
* Added new file `pkg/store/config.go` to load config from cli options (in list form)
* Few changes in `query.go` to iterate over the list items

<!-- Enumerate changes you made -->

## Verification

Added e2e tests for `--endpoints.config` with mutual TLS.

<!-- How you tested it? How do you know it works? -->
",False,4389,https://api.github.com/repos/thanos-io/thanos/pulls/4389,https://github.com/thanos-io/thanos/pull/4389,closed,696,185,17,28,5,60,0,0,[],2021-06-30 22:54:39+00:00,2021-10-30 12:42:27+00:00,10504068.0,"121 days, 13:47:48","[{'comment_id': 661865842, 'comment_body': '*G601:*  Implicit memory aliasing in for loop.\n(at-me [in a reply](https://help.sonatype.com/lift) with `help` or `ignore`)', 'comment_created': datetime.datetime(2021, 6, 30, 23, 6, 24, tzinfo=datetime.timezone.utc), 'commenter': 'sonatype-lift[bot]', 'type': 'Bot'}, {'comment_id': 662131661, 'comment_body': 'Can we use `pathorcontent` flag?', 'comment_created': datetime.datetime(2021, 7, 1, 9, 26, 24, tzinfo=datetime.timezone.utc), 'commenter': 'bwplotka', 'type': 'User'}, {'comment_id': 662135706, 'comment_body': '```suggestion\r\nendpointsConfig, err := store.LoadConfig(endpointConfigYAML, storeAddrs, strictStores, fileSDConfig)\r\n```', 'comment_created': datetime.datetime(2021, 7, 1, 9, 31, 52, tzinfo=datetime.timezone.utc), 'commenter': 'bwplotka', 'type': 'User'}, {'comment_id': 662136887, 'comment_body': '```suggestion\r\n\t\tdialOpts, err := extgrpc.StoreClientGRPCOptsFromTLSConfig(logger, reg, tracer, skipVerify, &config.TLSConfig)\r\n```', 'comment_created': datetime.datetime(2021, 7, 1, 9, 33, 41, tzinfo=datetime.timezone.utc), 'commenter': 'bwplotka', 'type': 'User'}, {'comment_id': 662138553, 'comment_body': 'Do we need pointer to this config? 🤔 ', 'comment_created': datetime.datetime(2021, 7, 1, 9, 35, 53, tzinfo=datetime.timezone.utc), 'commenter': 'bwplotka', 'type': 'User'}, {'comment_id': 662139520, 'comment_body': 'I think we should fail fast if \r\n\r\n```\r\ncert string,\r\n\tkey string,\r\n\tcaCert string,\r\n\tserverName string,\r\n``` \r\n\t\r\n\t\r\nAND endpoint.config is passed WDYT? 🤔 ', 'comment_created': datetime.datetime(2021, 7, 1, 9, 37, 21, tzinfo=datetime.timezone.utc), 'commenter': 'bwplotka', 'type': 'User'}, {'comment_id': 662141011, 'comment_body': ""let's discuss this on proposal if we want to remove first."", 'comment_created': datetime.datetime(2021, 7, 1, 9, 39, 26, tzinfo=datetime.timezone.utc), 'commenter': 'bwplotka', 'type': 'User'}, {'comment_id': 662141382, 'comment_body': ""let's use constants ideally from store package e.g `store.StrictMode`"", 'comment_created': datetime.datetime(2021, 7, 1, 9, 39, 59, tzinfo=datetime.timezone.utc), 'commenter': 'bwplotka', 'type': 'User'}, {'comment_id': 662142383, 'comment_body': '```suggestion\r\n\t\t\tfor _, store := range config.Endpoints {\r\n```', 'comment_created': datetime.datetime(2021, 7, 1, 9, 41, 20, tzinfo=datetime.timezone.utc), 'commenter': 'bwplotka', 'type': 'User'}, {'comment_id': 662143006, 'comment_body': 'ditto', 'comment_created': datetime.datetime(2021, 7, 1, 9, 42, 12, tzinfo=datetime.timezone.utc), 'commenter': 'bwplotka', 'type': 'User'}, {'comment_id': 662143599, 'comment_body': ""I know it's not your change, but would be awesome to change `query.NewGRPCStoreSpec(addr, true))` to `query.NewGRPCStoreStrictSpec(addr))`"", 'comment_created': datetime.datetime(2021, 7, 1, 9, 43, 2, tzinfo=datetime.timezone.utc), 'commenter': 'bwplotka', 'type': 'User'}, {'comment_id': 662143769, 'comment_body': 'OR, pass mode ', 'comment_created': datetime.datetime(2021, 7, 1, 9, 43, 18, tzinfo=datetime.timezone.utc), 'commenter': 'bwplotka', 'type': 'User'}, {'comment_id': 662144385, 'comment_body': 'Can we do this check closer to appending, so we have one if? (less complexity to read)', 'comment_created': datetime.datetime(2021, 7, 1, 9, 44, 11, tzinfo=datetime.timezone.utc), 'commenter': 'bwplotka', 'type': 'User'}, {'comment_id': 662144838, 'comment_body': ""Let's use camel case for fields and variable "", 'comment_created': datetime.datetime(2021, 7, 1, 9, 44, 53, tzinfo=datetime.timezone.utc), 'commenter': 'bwplotka', 'type': 'User'}, {'comment_id': 662145670, 'comment_body': ""What's the reason for moving those large blocks?"", 'comment_created': datetime.datetime(2021, 7, 1, 9, 46, 6, tzinfo=datetime.timezone.utc), 'commenter': 'bwplotka', 'type': 'User'}, {'comment_id': 662147413, 'comment_body': 'That definitely does not look right. We should have just one API ', 'comment_created': datetime.datetime(2021, 7, 1, 9, 48, 39, tzinfo=datetime.timezone.utc), 'commenter': 'bwplotka', 'type': 'User'}, {'comment_id': 662148136, 'comment_body': 'I would add non pointer here, so there is no check needed for nil and fields will be empty by default and work as expected', 'comment_created': datetime.datetime(2021, 7, 1, 9, 49, 46, tzinfo=datetime.timezone.utc), 'commenter': 'bwplotka', 'type': 'User'}, {'comment_id': 662148694, 'comment_body': '```suggestion\r\n\tEndpoints    []string         `yaml:""endpoints""`\r\n```', 'comment_created': datetime.datetime(2021, 7, 1, 9, 50, 38, tzinfo=datetime.timezone.utc), 'commenter': 'bwplotka', 'type': 'User'}, {'comment_id': 662148797, 'comment_body': '```suggestion\r\n\tTLSConfig    TLSConfiguration `yaml:""tls_config""`\r\n```', 'comment_created': datetime.datetime(2021, 7, 1, 9, 50, 46, tzinfo=datetime.timezone.utc), 'commenter': 'bwplotka', 'type': 'User'}, {'comment_id': 662149092, 'comment_body': '```suggestion\r\n\tEndpointsSD []file.SDConfig  `yaml:""endpoints_sd_files""`\r\n```', 'comment_created': datetime.datetime(2021, 7, 1, 9, 51, 10, tzinfo=datetime.timezone.utc), 'commenter': 'bwplotka', 'type': 'User'}, {'comment_id': 662150359, 'comment_body': '```suggestion\r\n\tMode         EndpointMode           `yaml:""mode""`\r\n}\r\n\r\ntype EndpointMode string\r\n\r\nconst (\r\nDefaultEndpointMode EndpointMode = """"\r\nStrictEndpointMode EndpointMode = ""strict""\r\n)\r\n```', 'comment_created': datetime.datetime(2021, 7, 1, 9, 52, 50, tzinfo=datetime.timezone.utc), 'commenter': 'bwplotka', 'type': 'User'}, {'comment_id': 662150932, 'comment_body': 'Maybe we should keep `File` suffix to ensure developer knows that this is a file path not a content ', 'comment_created': datetime.datetime(2021, 7, 1, 9, 53, 35, tzinfo=datetime.timezone.utc), 'commenter': 'bwplotka', 'type': 'User'}, {'comment_id': 662151351, 'comment_body': 'Public methods requires comment starting with function/method name .', 'comment_created': datetime.datetime(2021, 7, 1, 9, 54, 8, tzinfo=datetime.timezone.utc), 'commenter': 'bwplotka', 'type': 'User'}, {'comment_id': 662152992, 'comment_body': '```suggestion\r\n\t\t\treturn []Config{}, errors.Errrof(""cannot read file at path %s"", yamlPath)\r\n```\r\n\r\nWonder, do you mind checking if we can add `fmt.Errorf` to `failint` (https://github.com/thanos-io/thanos/blob/main/Makefile#L302).', 'comment_created': datetime.datetime(2021, 7, 1, 9, 56, 34, tzinfo=datetime.timezone.utc), 'commenter': 'bwplotka', 'type': 'User'}, {'comment_id': 662153164, 'comment_body': '```suggestion\r\n\t// No dynamic endpoints in strict mode.\r\n```\r\n\r\nDitto below', 'comment_created': datetime.datetime(2021, 7, 1, 9, 56, 52, tzinfo=datetime.timezone.utc), 'commenter': 'bwplotka', 'type': 'User'}, {'comment_id': 662153843, 'comment_body': 'That will work, but usually we do version with less allocations and less complexity so \r\n\r\n```\r\nmap[string]struct{}\r\n```', 'comment_created': datetime.datetime(2021, 7, 1, 9, 57, 52, tzinfo=datetime.timezone.utc), 'commenter': 'bwplotka', 'type': 'User'}, {'comment_id': 662154705, 'comment_body': ""```suggestion\r\n\t// Adding --endpoint, --endpoint.sd-files info to []endpointConfig \r\n```\r\n(Let's check if flag is actually called like that)"", 'comment_created': datetime.datetime(2021, 7, 1, 9, 59, 3, tzinfo=datetime.timezone.utc), 'commenter': 'bwplotka', 'type': 'User'}, {'comment_id': 662155593, 'comment_body': ""What if there are none? (same below)\r\n\r\nEssentially it might confusing for everyone that we have empty configs - let's avoid this work and surprises "", 'comment_created': datetime.datetime(2021, 7, 1, 10, 0, 14, tzinfo=datetime.timezone.utc), 'commenter': 'bwplotka', 'type': 'User'}, {'comment_id': 664139062, 'comment_body': 'I think we should use `cert, key, caCert, serverName` ONLY for endpoints provided in `--endpoint`, `--endpoint.strict`, `--endpoint.sd-files`.\r\nAdded this to the [proposal](https://github.com/thanos-io/thanos/pull/4377/files#diff-53b4dd652e0c2c941d48434c6267578837805bf9efc7508e142f145bd8a65d82R55).\r\n', 'comment_created': datetime.datetime(2021, 7, 5, 22, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Namanl2001', 'type': 'User'}, {'comment_id': 666025663, 'comment_body': 'Would be nice to mention how other `endpoint|store` flags are behaving when this flag is set.', 'comment_created': datetime.datetime(2021, 7, 8, 9, 26, 45, tzinfo=datetime.timezone.utc), 'commenter': 'bwplotka', 'type': 'User'}, {'comment_id': 666037605, 'comment_body': ""We have a couple of options when **old cert flags set AND config set:**\r\n\r\na. use old cert flags to support old endpoints flags, and config works as expected [and mark them as deprecated]\r\n\r\nPros:\r\n* We don't break any deployments\r\n* Old way works\r\n\r\nCons: \r\n* More complex configuration interface of querier\r\n* It might be surprising. As a user I can assume\r\n    * old cert flags will work only for --endpoint\r\n    * old cert flags means global default - so if I don't specify TLS params in one entry of config flag then those certs will be use\r\n    *  ......\r\n\r\nb. remove old flags totally \r\n\r\nPros: \r\n* Less complex interface \r\n\r\nCons:\r\n* Breaking change - annoy users\r\n\r\nc. only allow the user to specify EITHER old way or CONFIG\r\n\r\nPros:\r\n* We don't break any deployments\r\n* Old way works\r\n* Way less surprises. Very explicit choice.\r\n\r\nCons:\r\n* More complex configuration interface of querier\r\n\r\n\r\n"", 'comment_created': datetime.datetime(2021, 7, 8, 9, 42, 29, tzinfo=datetime.timezone.utc), 'commenter': 'bwplotka', 'type': 'User'}, {'comment_id': 666039082, 'comment_body': ""Does it even work? We kind of register this metric twice - as is, I don't think we need multiple dns Providers - they are all capable of discovering multiple endpoints, no? 🤔 "", 'comment_created': datetime.datetime(2021, 7, 8, 9, 44, 29, tzinfo=datetime.timezone.utc), 'commenter': 'bwplotka', 'type': 'User'}, {'comment_id': 666039752, 'comment_body': 'Why want many storesets? 🤔 ', 'comment_created': datetime.datetime(2021, 7, 8, 9, 45, 21, tzinfo=datetime.timezone.utc), 'commenter': 'bwplotka', 'type': 'User'}, {'comment_id': 666047479, 'comment_body': 'Why we are resolving same addresses (ruleAddr is from flag) many times?', 'comment_created': datetime.datetime(2021, 7, 8, 9, 55, 40, tzinfo=datetime.timezone.utc), 'commenter': 'bwplotka', 'type': 'User'}, {'comment_id': 669050894, 'comment_body': 'Because we need dialopts for each yaml list item’s endpoints set. \r\nStoring it in `storeSets` as we need them outside the loop.\r\n', 'comment_created': datetime.datetime(2021, 7, 13, 19, 30, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Namanl2001', 'type': 'User'}, {'comment_id': 669058178, 'comment_body': ""We have this loop in all the 4 variables below, I tried to have this once globally and then just retuning the variables inside these func(), but it's weird to see that it was not working as expected (e2e tests were also failing) and I have to change and make it repetitive in this [commit](https://github.com/thanos-io/thanos/pull/4389/commits/672b9d7810f36e619d34e52f679cbd2670a92a3d) after which all tests were happy.\r\nAm I missing anything conceptual here? 🤔 "", 'comment_created': datetime.datetime(2021, 7, 13, 19, 42, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Namanl2001', 'type': 'User'}, {'comment_id': 678979853, 'comment_body': 'It\'s kind of confusing on 2 levels:\r\n\r\nUsers: ""my flag is overridden without my knowledge"" \r\nCode - secure is global but endpoints TLS and per config', 'comment_created': datetime.datetime(2021, 7, 29, 9, 22, 57, tzinfo=datetime.timezone.utc), 'commenter': 'bwplotka', 'type': 'User'}, {'comment_id': 678981229, 'comment_body': 'one way of improving this would be maybe doing `secure  = tlsConfig == store.TLSConfiguration{}`', 'comment_created': datetime.datetime(2021, 7, 29, 9, 24, 38, tzinfo=datetime.timezone.utc), 'commenter': 'bwplotka', 'type': 'User'}, {'comment_id': 680232810, 'comment_body': 'Addressed. 👍 ', 'comment_created': datetime.datetime(2021, 7, 30, 21, 39, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Namanl2001', 'type': 'User'}, {'comment_id': 683216271, 'comment_body': '```suggestion\r\n\t\t\treturn errors.Errorf(""deprecated flags --grpc-client-tls* and new --endpoint.config flag cannot be specified at the same time; use either of those"")\r\n```', 'comment_created': datetime.datetime(2021, 8, 5, 7, 53, 16, tzinfo=datetime.timezone.utc), 'commenter': 'bwplotka', 'type': 'User'}, {'comment_id': 683220650, 'comment_body': ""I wonder... do we need to block `fileSDFiles` and `stores` in this PR? I know I talked about failing fast but in theory, we can take those in non tls endpoints. Those one liner flags are pretty useful.\r\n\r\nWe can deprecated `fileSDFiles` in this PR, but maybe it's good to not block it - there is no need. The flow of is accepting it with endpoint.config is not too difficult to understand.\r\n\r\nI would block all grpc-client-tls if specified WITH endpointYAML though."", 'comment_created': datetime.datetime(2021, 8, 5, 7, 59, 19, tzinfo=datetime.timezone.utc), 'commenter': 'bwplotka', 'type': 'User'}, {'comment_id': 683222239, 'comment_body': 'What is config instance?', 'comment_created': datetime.datetime(2021, 8, 5, 8, 1, 30, tzinfo=datetime.timezone.utc), 'commenter': 'bwplotka', 'type': 'User'}, {'comment_id': 683223360, 'comment_body': 'Did you set any expiry time?', 'comment_created': datetime.datetime(2021, 8, 5, 8, 2, 52, tzinfo=datetime.timezone.utc), 'commenter': 'bwplotka', 'type': 'User'}, {'comment_id': 683223655, 'comment_body': 'I wonder if we can just create them in run time instead of committing. The reason is that our `creat` script will be unused for 1y or so , so it will most likely no work when we will need it. It might be better to put it in CI and use it. ', 'comment_created': datetime.datetime(2021, 8, 5, 8, 3, 21, tzinfo=datetime.timezone.utc), 'commenter': 'bwplotka', 'type': 'User'}, {'comment_id': 683225314, 'comment_body': '```suggestion\r\nfunc NewPrometheusWithSidecar(sharedDir, netName, name, config, promImage string, extraArgs []string, enableFeatures ...string) (*e2e.HTTPService, *Service, error) {\r\n```', 'comment_created': datetime.datetime(2021, 8, 5, 8, 5, 53, tzinfo=datetime.timezone.utc), 'commenter': 'bwplotka', 'type': 'User'}, {'comment_id': 683660076, 'comment_body': 'Make sense. I think I misunderstood what you said earlier. Thanks for the clarification 👍 ', 'comment_created': datetime.datetime(2021, 8, 5, 17, 39, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Namanl2001', 'type': 'User'}, {'comment_id': 683691285, 'comment_body': 'As we are iterating over the config list, so for more than one list item, it is trying to register a new metrics collector and was throwing the error `panic: duplicate metrics collector registration attempted`, so to make each metrics collector unique, we\'ve added a `name` option in endpoint config.\r\n\r\nThe other option was to use the config item number to make each metric collector unique. @kakkoyun suggested taking a unique name from the user (for each config) so that in case there is some bad configuration set from the user side, they can debug, and here `name` would be more helpful than a number (e.g., 0, 1) to know where their config is wrong.\r\n\r\nThe same is the case with the DNS provider, for which it was not giving any specific error but not functioning as expected. For instance, for 2 configs, it was first registering the config[0] endpoints then removing them, saying that ""these endpoints are not more active"" and registering the config[1] endpoints and then removing these too with the same msg. And now again, adding the config[0] endpoints, and the same process repeats. \r\nThe timely addition and removal is due to the periodical updating of endpoints [""update()""](https://github.com/thanos-io/thanos/pull/4389/files#diff-f9808a0ac67a474a18f6a7ea767593f85c216aeafe322c1ff5d17c81ababff95R476) \r\n\r\nSo config instance is the config name provided.', 'comment_created': datetime.datetime(2021, 8, 5, 18, 25, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Namanl2001', 'type': 'User'}, {'comment_id': 686717919, 'comment_body': 'Addressed. It was quite tricky for me but managed to do it after spending hours 😄 ', 'comment_created': datetime.datetime(2021, 8, 11, 10, 51, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Namanl2001', 'type': 'User'}, {'comment_id': 687504821, 'comment_body': 'nit: We can inline this struct creation. And I think we should.', 'comment_created': datetime.datetime(2021, 8, 12, 8, 34, 7, tzinfo=datetime.timezone.utc), 'commenter': 'kakkoyun', 'type': 'User'}, {'comment_id': 687511003, 'comment_body': 'Maybe to avoid any confusion call it `provider_name` or `config_provider_name`?', 'comment_created': datetime.datetime(2021, 8, 12, 8, 42, 20, tzinfo=datetime.timezone.utc), 'commenter': 'kakkoyun', 'type': 'User'}, {'comment_id': 687533711, 'comment_body': 'It would be amazing to add a comment here to explain what we are doing and add a link to the proposal.', 'comment_created': datetime.datetime(2021, 8, 12, 9, 12, 13, tzinfo=datetime.timezone.utc), 'commenter': 'kakkoyun', 'type': 'User'}, {'comment_id': 690536028, 'comment_body': '```suggestion\r\n\tendpointConfig := extflag.RegisterPathOrContent(cmd, ""endpoint.config"", ""YAML file that contains set of endpoints (e.g Store API) with optional TLS options. Either use this option or separate endpoint options (endpoint, endpoint.sd-files, endpoint.strict)."", extflag.WithEnvSubstitution())\r\n```', 'comment_created': datetime.datetime(2021, 8, 17, 16, 31, 58, tzinfo=datetime.timezone.utc), 'commenter': 'bwplotka', 'type': 'User'}, {'comment_id': 690539489, 'comment_body': '```suggestion\r\n\t\tsecure = (config.TLSConfig != store.TLSConfiguration{})\r\n```', 'comment_created': datetime.datetime(2021, 8, 17, 16, 36, 36, tzinfo=datetime.timezone.utc), 'commenter': 'bwplotka', 'type': 'User'}, {'comment_id': 690541504, 'comment_body': 'Am I wrong if I would say that if we somehow pass through spec the dial options per addresses we could have just one storeset right? Do you think it would be worth doing? ', 'comment_created': datetime.datetime(2021, 8, 17, 16, 39, 16, tzinfo=datetime.timezone.utc), 'commenter': 'bwplotka', 'type': 'User'}, {'comment_id': 690543326, 'comment_body': 'Yea, this is not the best. I mentioned Idea how we can ensure single storeset', 'comment_created': datetime.datetime(2021, 8, 17, 16, 41, 43, tzinfo=datetime.timezone.utc), 'commenter': 'bwplotka', 'type': 'User'}, {'comment_id': 691149413, 'comment_body': ""Thanks for the review.\r\n> if we somehow pass through spec the dial options per addresses we could have just one storeset right?\r\n \r\nBut dialopts are different for each endpoint config (as it depends on `config.tlsConfig`). So even if we somehow pass it through spec, we would not have one storeset as storeset would be defined inside the loop to have all tlsConfig.\r\n\r\nTo have only one storeset I thought to take the storeset initialization outside the loop but we can't because it uses dnsProvider which needs to be different for each endpoint config else it gives error.\r\n\r\nSo we need to have storeset inside the loop (which means more than one storeset) to have different dnsProvider and tlsConfig corresponding to different endpoint sets.\r\n\r\n> Do you think it would be worth doing?\r\n\r\nAs discussed with @kakkoyun (in our 1:1) we expect only few configs (like 4 or 5) from the user so having these much of storesets would not affect the performance much. :)\r\n\r\n\r\n<!--\r\nAh so, for one storeset we need to define it once, outside the for loop right?\r\nI thought of your idea as taking the [storeset](https://github.com/thanos-io/thanos/pull/4389/files#diff-f9808a0ac67a474a18f6a7ea767593f85c216aeafe322c1ff5d17c81ababff95R427) outside the loop and then passing dialopts through spec by iterating over endpoint config but found that it is used at many places like store.update() which is inside the loop.\r\n--!>\r\n"", 'comment_created': datetime.datetime(2021, 8, 18, 11, 30, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Namanl2001', 'type': 'User'}, {'comment_id': 693851774, 'comment_body': '> Either use this option or separate endpoint options (endpoint, endpoint.sd-files, endpoint.strict)\r\n\r\nThis line is wrong as we accept separate endpoint options (endpoint, endpoint.sd-files, endpoint.strict) along with new `--endpoint.config`.\r\n\r\nMy suggestion: \r\n`YAML file that contains set of endpoints (e.g Store API) with optional TLS options. To enable TLS either use this option or deprecated ones --grpc-client-tls*` WDYT?', 'comment_created': datetime.datetime(2021, 8, 23, 10, 27, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Namanl2001', 'type': 'User'}, {'comment_id': 694616910, 'comment_body': 'Perfect 👍🏽 ', 'comment_created': datetime.datetime(2021, 8, 24, 8, 19, 37, tzinfo=datetime.timezone.utc), 'commenter': 'bwplotka', 'type': 'User'}, {'comment_id': 694621012, 'comment_body': '> But dialopts are different for each endpoint config (as it depends on config.tlsConfig). So even if we somehow pass it through spec, we would not have one storeset as storeset would be defined inside the loop to have all tlsConfig.\r\n\r\nYea, I think we could do that per addresses.\r\n\r\n> As discussed with @kakkoyun (in our 1:1) we expect only few configs (like 4 or 5) from the user so having these much of storesets would not affect the performance much. :)\r\n\r\nI know companies running Thanos against 300 of StoreAPIs, so I would be careful here. But also I am not worried about performance too much here, rather maintainability and debuggability when you have different metrics per 100 of those storesets potentially. And different health loops. Not a biggie, maybe I can try propose a PR to yours if we want to compare different solutions? (: \r\n', 'comment_created': datetime.datetime(2021, 8, 24, 8, 22, 30, tzinfo=datetime.timezone.utc), 'commenter': 'bwplotka', 'type': 'User'}, {'comment_id': 694708883, 'comment_body': '> I can try propose a PR to yours if we want to compare different solutions\r\n\r\nThat would be really helpful 🤗 ', 'comment_created': datetime.datetime(2021, 8, 24, 10, 6, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Namanl2001', 'type': 'User'}]","[{'commit_sha': 'cec274dc83a7e75e5ddfb4c803ed9e621bdd8392', 'committer_username': 'Namanl2001', 'committer_name': 'Naman Lakhwani', 'committer_email': 'namanlakhwani@gmail.com', 'commit_date': datetime.datetime(2019, 10, 1, 8, 39, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b352704a284c10d7530c8c5ded5c4b0f03e179a', 'committer_username': 'Namanl2001', 'committer_name': 'Naman Lakhwani', 'committer_email': 'namanlakhwani@gmail.com', 'commit_date': datetime.datetime(2019, 10, 1, 8, 39, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0561e73ffdb9450ad3a4d5e8af69e8fec1c3cef', 'committer_username': 'Namanl2001', 'committer_name': 'Naman Lakhwani', 'committer_email': 'namanlakhwani@gmail.com', 'commit_date': datetime.datetime(2019, 10, 1, 8, 39, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aba6f103c3ea2613f5fa8e6f7489bbbca63e60f1', 'committer_username': 'Namanl2001', 'committer_name': 'Naman Lakhwani', 'committer_email': 'namanlakhwani@gmail.com', 'commit_date': datetime.datetime(2019, 10, 1, 8, 39, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '91718f5a856c547330241570e37deed0a0fc31cb', 'committer_username': 'Namanl2001', 'committer_name': 'Naman Lakhwani', 'committer_email': 'namanlakhwani@gmail.com', 'commit_date': datetime.datetime(2019, 10, 1, 8, 39, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b07fe4cf0056569650d3091759e6c5dcf31f8ea', 'committer_username': 'Namanl2001', 'committer_name': 'Naman Lakhwani', 'committer_email': 'namanlakhwani@gmail.com', 'commit_date': datetime.datetime(2019, 10, 1, 8, 39, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c8e643197355f95e176d1011d79a45d36302417', 'committer_username': 'Namanl2001', 'committer_name': 'Naman Lakhwani', 'committer_email': 'namanlakhwani@gmail.com', 'commit_date': datetime.datetime(2019, 10, 1, 8, 39, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88a8084e286be1809bbc46503d4cbf740eea321c', 'committer_username': 'Namanl2001', 'committer_name': 'Naman Lakhwani', 'committer_email': 'namanlakhwani@gmail.com', 'commit_date': datetime.datetime(2019, 10, 1, 8, 39, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '781fac57be19658f346e8cb69da95800e52753ec', 'committer_username': 'Namanl2001', 'committer_name': 'Naman Lakhwani', 'committer_email': 'namanlakhwani@gmail.com', 'commit_date': datetime.datetime(2019, 10, 1, 8, 39, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb5a0c65ad6c946aff17556a4fa49f8fd75d4b7c', 'committer_username': 'Namanl2001', 'committer_name': 'Naman Lakhwani', 'committer_email': 'namanlakhwani@gmail.com', 'commit_date': datetime.datetime(2019, 10, 1, 8, 39, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a464c53a60d91fb910a9a25b1fdfb13adb462f46', 'committer_username': 'Namanl2001', 'committer_name': 'Naman Lakhwani', 'committer_email': 'namanlakhwani@gmail.com', 'commit_date': datetime.datetime(2019, 10, 1, 8, 39, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '593401cbda1c6c8f99e66d3ca78c80f271a536ba', 'committer_username': 'Namanl2001', 'committer_name': 'Naman Lakhwani', 'committer_email': 'namanlakhwani@gmail.com', 'commit_date': datetime.datetime(2019, 10, 1, 8, 39, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b0ae4af05cfd2b6d4c66eb9333858691cf29d13', 'committer_username': 'Namanl2001', 'committer_name': 'Naman Lakhwani', 'committer_email': 'namanlakhwani@gmail.com', 'commit_date': datetime.datetime(2019, 10, 1, 8, 39, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd8e660b7c14adb5fe49ff3864c36c53f001f8d0', 'committer_username': 'Namanl2001', 'committer_name': 'Naman Lakhwani', 'committer_email': 'namanlakhwani@gmail.com', 'commit_date': datetime.datetime(2019, 10, 1, 8, 39, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e48140ad134a42f1a7764bab7ac37d00ecb4b3bb', 'committer_username': 'Namanl2001', 'committer_name': 'Naman Lakhwani', 'committer_email': 'namanlakhwani@gmail.com', 'commit_date': datetime.datetime(2019, 10, 1, 8, 39, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83185e49e3a65788e68509cfebb84ed389cddb57', 'committer_username': 'Namanl2001', 'committer_name': 'Naman Lakhwani', 'committer_email': 'namanlakhwani@gmail.com', 'commit_date': datetime.datetime(2019, 10, 1, 8, 39, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '18c830ef061e1a2f05dc921e1793aba6b660f797', 'committer_username': 'Namanl2001', 'committer_name': 'Naman Lakhwani', 'committer_email': 'namanlakhwani@gmail.com', 'commit_date': datetime.datetime(2019, 10, 1, 8, 39, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a0f2edefe5d433b42b03b2249398232dca4f1fe', 'committer_username': 'Namanl2001', 'committer_name': 'Naman Lakhwani', 'committer_email': 'namanlakhwani@gmail.com', 'commit_date': datetime.datetime(2019, 10, 1, 8, 39, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e6ad5e931d134f9182fafd941f93b4ef48cdbf7b', 'committer_username': 'Namanl2001', 'committer_name': 'Naman Lakhwani', 'committer_email': 'namanlakhwani@gmail.com', 'commit_date': datetime.datetime(2019, 10, 1, 8, 39, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '81e1f19009e55cbc8e620ca960b3f7aa1dee3d77', 'committer_username': 'Namanl2001', 'committer_name': 'Naman Lakhwani', 'committer_email': 'namanlakhwani@gmail.com', 'commit_date': datetime.datetime(2019, 10, 1, 8, 39, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a81f80f39b5e7c22eef062c8aeba7c68d5a90e1', 'committer_username': 'Namanl2001', 'committer_name': 'Naman Lakhwani', 'committer_email': 'namanlakhwani@gmail.com', 'commit_date': datetime.datetime(2019, 10, 1, 8, 39, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2bd35ca6c066513e245959874960de4ff3718f71', 'committer_username': 'Namanl2001', 'committer_name': 'Naman Lakhwani', 'committer_email': 'namanlakhwani@gmail.com', 'commit_date': datetime.datetime(2019, 10, 1, 8, 39, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '94a2f17d2f8d95edebcaf9a9ed493cd373ca4c6d', 'committer_username': 'Namanl2001', 'committer_name': 'Naman Lakhwani', 'committer_email': 'namanlakhwani@gmail.com', 'commit_date': datetime.datetime(2019, 10, 1, 8, 39, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61d2dc5512aa4c099afa78f6a0bc184330167d5a', 'committer_username': 'Namanl2001', 'committer_name': 'Naman Lakhwani', 'committer_email': 'namanlakhwani@gmail.com', 'commit_date': datetime.datetime(2019, 10, 1, 8, 39, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '81a5b8d281662035530ad430eba2ae69d365ab4e', 'committer_username': 'Namanl2001', 'committer_name': 'Naman Lakhwani', 'committer_email': 'namanlakhwani@gmail.com', 'commit_date': datetime.datetime(2019, 10, 1, 8, 39, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88fef2a4dd445aa0693421457c2f3d380e1dfcfd', 'committer_username': 'Namanl2001', 'committer_name': 'Naman Lakhwani', 'committer_email': 'namanlakhwani@gmail.com', 'commit_date': datetime.datetime(2019, 10, 1, 8, 39, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d9cc57abede670c96941dd712971b5e48214356', 'committer_username': 'Namanl2001', 'committer_name': 'Naman Lakhwani', 'committer_email': 'namanlakhwani@gmail.com', 'commit_date': datetime.datetime(2019, 10, 1, 8, 39, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f19a67b371d40821c91d2902898abcd6f45293d9', 'committer_username': 'Namanl2001', 'committer_name': 'Naman Lakhwani', 'committer_email': 'namanlakhwani@gmail.com', 'commit_date': datetime.datetime(2019, 10, 1, 8, 39, 25, tzinfo=datetime.timezone.utc)}]",Naman Lakhwani,56021229,namanlakhwani@gmail.com,User,,19,,23,107
698730802,Automatic certificate rotation without restart,"This PR implements the second part of this [proposal](https://github.com/thanos-io/thanos/blob/main/docs/proposals-accepted/202106-automated-per-endpoint-mTLS.md), i.e. 

> Adding a new `--grpc-server-max-connection-age` CLI option which takes time as input and controls how often to re-do the tls handshake and re-read the certificates. This in reality is controlled by the keepalive’s MaxConnectionAge option (which will close the connection after every (e.g. 15m) inputted time duration) so when the connection is closed it requires a new tls handshake.
While reading the cert_file on each handshake we can improve the performance by keeping track of it’s modification time. We should re-load the certificates only if they are actually rotated and there is some change in their modification time otherwise returning the previously stored one. Also if the file is not modified recently then it could be found on the cache memory of the system running thanos and it would be faster to get the file details (i.e. modification time).

### Changes
Added new `--grpc-server-max-connection-age` flag which takes ""time"" as input and controls how often to re-read the tls certificates (BOTH client and server certs) and redo the TLS handshake.

### Verification

Added e2e tests.",True,4493,https://api.github.com/repos/thanos-io/thanos/pulls/4493,https://github.com/thanos-io/thanos/pull/4493,closed,301,11,11,3,0,0,0,0,[],2021-07-28 14:14:25+00:00,2021-08-17 17:25:19+00:00,1739454.0,"20 days, 3:10:54",[],"[{'commit_sha': '7e214511dfa0fcc52a6ff9aa4a05e499ea1fbc99', 'committer_username': 'Namanl2001', 'committer_name': 'Naman Lakhwani', 'committer_email': 'namanlakhwani@gmail.com', 'commit_date': datetime.datetime(2019, 10, 1, 8, 39, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ebb11340650d8b5f97bc848312796a76ba47f841', 'committer_username': 'Namanl2001', 'committer_name': 'Naman Lakhwani', 'committer_email': 'namanlakhwani@gmail.com', 'commit_date': datetime.datetime(2019, 10, 1, 8, 39, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d88cf01e11b781603ecfc823d9e3e5bb34fb394', 'committer_username': 'Namanl2001', 'committer_name': 'Naman Lakhwani', 'committer_email': 'namanlakhwani@gmail.com', 'commit_date': datetime.datetime(2019, 10, 1, 8, 39, 25, tzinfo=datetime.timezone.utc)}]",Naman Lakhwani,56021229,namanlakhwani@gmail.com,User,,19,,23,107

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
109162639,thanos,thanos-io/thanos,Go,2064,12879,242,650,4036,660,336,135,"[{'id': 698730802, 'number': 4493, 'closed': datetime.datetime(2021, 8, 17, 17, 25, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 28, 14, 14, 25, tzinfo=datetime.timezone.utc), 'time_taken': 1739454.0, 'time_delta': '20 days, 3:10:54', 'additions': 301, 'deletions': 11, 'state': 'closed'}, {'id': 690609377, 'number': 4446, 'closed': datetime.datetime(2021, 7, 15, 11, 12, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 15, 10, 52, 45, tzinfo=datetime.timezone.utc), 'time_taken': 1205.0, 'time_delta': '0:20:05', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 681285646, 'number': 4389, 'closed': datetime.datetime(2021, 10, 30, 12, 42, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 30, 22, 54, 39, tzinfo=datetime.timezone.utc), 'time_taken': 10504068.0, 'time_delta': '121 days, 13:47:48', 'additions': 696, 'deletions': 185, 'state': 'closed'}, {'id': 678346396, 'number': 4377, 'closed': datetime.datetime(2021, 7, 15, 8, 52, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 26, 14, 43, 24, tzinfo=datetime.timezone.utc), 'time_taken': 1620555.0, 'time_delta': '18 days, 18:09:15', 'additions': 76, 'deletions': 0, 'state': 'closed'}, {'id': 630870780, 'number': 4190, 'closed': datetime.datetime(2021, 5, 7, 18, 7, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 5, 20, 12, 25, tzinfo=datetime.timezone.utc), 'time_taken': 165332.0, 'time_delta': '1 day, 21:55:32', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 595919071, 'number': 3940, 'closed': datetime.datetime(2021, 5, 7, 22, 53, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 18, 20, 33, 37, tzinfo=datetime.timezone.utc), 'time_taken': 4328403.0, 'time_delta': '50 days, 2:20:03', 'additions': 171, 'deletions': 19, 'state': 'closed'}, {'id': 587141846, 'number': 3897, 'closed': datetime.datetime(2021, 3, 9, 17, 34, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 8, 22, 6, 15, tzinfo=datetime.timezone.utc), 'time_taken': 70118.0, 'time_delta': '19:28:38', 'additions': 40, 'deletions': 4, 'state': 'closed'}, {'id': 556971099, 'number': 3729, 'closed': datetime.datetime(2021, 2, 18, 19, 52, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 18, 18, 13, 51, tzinfo=datetime.timezone.utc), 'time_taken': 2684317.0, 'time_delta': '31 days, 1:38:37', 'additions': 420, 'deletions': 116, 'state': 'closed'}, {'id': 548518853, 'number': 3694, 'closed': datetime.datetime(2021, 2, 16, 10, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 4, 22, 54, 25, tzinfo=datetime.timezone.utc), 'time_taken': 3670835.0, 'time_delta': '42 days, 11:40:35', 'additions': 120, 'deletions': 120, 'state': 'closed'}, {'id': 548508170, 'number': 3693, 'closed': datetime.datetime(2021, 4, 11, 21, 37, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 4, 22, 27, 44, tzinfo=datetime.timezone.utc), 'time_taken': 8377760.0, 'time_delta': '96 days, 23:09:20', 'additions': 123, 'deletions': 125, 'state': 'closed'}, {'id': 548499710, 'number': 3692, 'closed': datetime.datetime(2021, 4, 4, 14, 34, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 4, 22, 10, 53, tzinfo=datetime.timezone.utc), 'time_taken': 7748638.0, 'time_delta': '89 days, 16:23:58', 'additions': 145, 'deletions': 143, 'state': 'closed'}, {'id': 547114521, 'number': 3688, 'closed': datetime.datetime(2021, 8, 26, 10, 33, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 12, 30, 23, 5, 32, tzinfo=datetime.timezone.utc), 'time_taken': 20604451.0, 'time_delta': '238 days, 11:27:31', 'additions': 402, 'deletions': 284, 'state': 'closed'}, {'id': 542784780, 'number': 3648, 'closed': datetime.datetime(2020, 12, 20, 15, 7, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 12, 18, 21, 36, tzinfo=datetime.timezone.utc), 'time_taken': 149472.0, 'time_delta': '1 day, 17:31:12', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 542647198, 'number': 3645, 'closed': datetime.datetime(2021, 1, 7, 11, 11, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 12, 18, 16, 25, 9, tzinfo=datetime.timezone.utc), 'time_taken': 1709189.0, 'time_delta': '19 days, 18:46:29', 'additions': 6, 'deletions': 6, 'state': 'closed'}]"
