pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
712757763,ICU-20178 Initial checkin of Tibetan Calendar,"<!--
Thank you for your pull request!

Please see http://site.icu-project.org/processes/contribute for general
information on contributing to ICU.

You will be automatically asked to sign the contributors license agreement (CLA) before the PR is accepted.
- sign: https://cla-assistant.io/unicode-org/icu
- license: http://www.unicode.org/copyright.html
-->

This PR attempts to add support for the Tibetan calendar (Phagpha & Tsurphu) in ICU4C. 

The Tibetan calendar is a lunisolar calendar and the typical sequence of days of the month in a lunisolar calendar is not a simple sequence of numbers, but instead it has leap days as well as omitted days. A major challenge was to deal with leap days because the current calendar class of ICU4C does not have a leap day field. I've used a +64 encoding for storing leap day and leap month info that do not require any additional calendar field.

##### Checklist

- [x] Required: Issue filed: https://unicode-org.atlassian.net/browse/ICU-20178
- [x] Required: The PR title must be prefixed with a JIRA Issue number. <!-- For example: ""ICU-1234 Fix xyz"" -->
- [x] Required: The PR description must include the link to the Jira Issue, for example by completing the URL in the first checklist item
- [x] Required: Each commit message must be prefixed with a JIRA Issue number. <!-- For example: ""ICU-1234 Fix xyz"" -->
- [x] Issue accepted (done by Technical Committee after discussion)
- [x] Tests included, if applicable
- [ ] API docs and/or User Guide docs changed or added, if applicable
",False,1793,https://api.github.com/repos/unicode-org/icu/pulls/1793,https://github.com/unicode-org/icu/pull/1793,closed,976,8,11,1,9,50,2,2,"[{'name': 'waiting-on-author'}, {'name': 'do-not-merge'}]",2021-08-14 10:32:56+00:00,2023-04-17 21:56:25+00:00,52831409.0,"611 days, 11:23:29","[{'comment_id': 1068391235, 'comment_body': 'In the past we have this strange combination of subclassing + passing a enum then if check way to implement different calendar which behave closely. I recently refactor the other Calendar subclass to remove the C style if check way and now purely use subclassing. Could you change your code so TibetanCalendar is implement only TibetanCalendar::PHUGPA and add a subclass TibetanTsurphCalendar to implement TibetanCalendar::TSURPHU and put the differences in the override function instead. (see https://github.com/unicode-org/icu/pull/2215 )\r\nand change the code here to\r\n```\r\n        case CALTYPE_TIBETAN:\r\n            cal.adoptInsteadAndCheckErrorCode(new TibetanCalendar(loc, status), status);\r\nbreak;\r\n        case CALTYPE_TIBETAN_TSURPHU:\r\n            cal.adoptInsteadAndCheckErrorCode(new TibetanTsurphCalendar(loc, status), status);\r\n            break;\r\n```', 'comment_created': datetime.datetime(2023, 1, 12, 17, 16, 58, tzinfo=datetime.timezone.utc), 'commenter': 'FrankYFTang', 'type': 'User'}, {'comment_id': 1068394933, 'comment_body': 'I have change Calendar::getRelatedYear and put those into sublcass in https://github.com/unicode-org/icu/pull/2199 (and later in https://github.com/unicode-org/icu/pull/2215 ). Please rebase and follow that. ', 'comment_created': datetime.datetime(2023, 1, 12, 17, 20, 46, tzinfo=datetime.timezone.utc), 'commenter': 'FrankYFTang', 'type': 'User'}, {'comment_id': 1068395190, 'comment_body': 'I have change Calendar::setRelatedYear and put those into sublcass in https://github.com/unicode-org/icu/pull/2199 (and later in https://github.com/unicode-org/icu/pull/2215 ). Please rebase and follow that.', 'comment_created': datetime.datetime(2023, 1, 12, 17, 21, 4, tzinfo=datetime.timezone.utc), 'commenter': 'FrankYFTang', 'type': 'User'}, {'comment_id': 1068417737, 'comment_body': '2023, please', 'comment_created': datetime.datetime(2023, 1, 12, 17, 39, 24, tzinfo=datetime.timezone.utc), 'commenter': 'FrankYFTang', 'type': 'User'}, {'comment_id': 1068421404, 'comment_body': ""please always return 'tibetan' here and add a subclass TibetanTsurphuCalendar and return  'tibetan-tsurphu' in TibetanTsurphuCalendar::getType() instead. "", 'comment_created': datetime.datetime(2023, 1, 12, 17, 42, 12, tzinfo=datetime.timezone.utc), 'commenter': 'FrankYFTang', 'type': 'User'}, {'comment_id': 1068422932, 'comment_body': 'please remove this method. We move the rest of the Calendar subclass from the hacky C style if type check way and now purely use only subclassing. ', 'comment_created': datetime.datetime(2023, 1, 12, 17, 43, 26, tzinfo=datetime.timezone.utc), 'commenter': 'FrankYFTang', 'type': 'User'}, {'comment_id': 1068423329, 'comment_body': 'please remove this method. ', 'comment_created': datetime.datetime(2023, 1, 12, 17, 43, 44, tzinfo=datetime.timezone.utc), 'commenter': 'FrankYFTang', 'type': 'User'}, {'comment_id': 1068427178, 'comment_body': '2023 please', 'comment_created': datetime.datetime(2023, 1, 12, 17, 46, 36, tzinfo=datetime.timezone.utc), 'commenter': 'FrankYFTang', 'type': 'User'}, {'comment_id': 1068427958, 'comment_body': 'please remove.', 'comment_created': datetime.datetime(2023, 1, 12, 17, 47, 9, tzinfo=datetime.timezone.utc), 'commenter': 'FrankYFTang', 'type': 'User'}, {'comment_id': 1068429107, 'comment_body': 'please remove this enum. I clean up the rest of Calendar subclass in https://github.com/unicode-org/icu/pull/2215 please keep that. thanks', 'comment_created': datetime.datetime(2023, 1, 12, 17, 48, tzinfo=datetime.timezone.utc), 'commenter': 'FrankYFTang', 'type': 'User'}, {'comment_id': 1068429875, 'comment_body': 'Please remove the type param from the constructor and use subclassing for different behavior instead.', 'comment_created': datetime.datetime(2023, 1, 12, 17, 48, 35, tzinfo=datetime.timezone.utc), 'commenter': 'FrankYFTang', 'type': 'User'}, {'comment_id': 1068430937, 'comment_body': 'Please remove this method and use subclassing override for different behavior as in https://github.com/unicode-org/icu/pull/2215', 'comment_created': datetime.datetime(2023, 1, 12, 17, 49, 24, tzinfo=datetime.timezone.utc), 'commenter': 'FrankYFTang', 'type': 'User'}, {'comment_id': 1068431303, 'comment_body': 'Please remove this method and use subclassing override for different behavior as in https://github.com/unicode-org/icu/pull/2215', 'comment_created': datetime.datetime(2023, 1, 12, 17, 49, 40, tzinfo=datetime.timezone.utc), 'commenter': 'FrankYFTang', 'type': 'User'}, {'comment_id': 1068433753, 'comment_body': 'nit: return -> Returns\r\nChange the comment to Returns the calendar type, ""tibetan"".\r\nThen in a override TibetanTsurphuCalendar::getType() return ""tibetan-tsurphu"".', 'comment_created': datetime.datetime(2023, 1, 12, 17, 51, 29, tzinfo=datetime.timezone.utc), 'commenter': 'FrankYFTang', 'type': 'User'}, {'comment_id': 1068446669, 'comment_body': 'Why do moonTab(), sunTab, amod(),  need to be methoods on this class? It seems the implementation is not depending on any member value of the TibetanCaledar, right? Could we remove them from the private and just implement it as C style helper function internally inside tibetancal.cpp instead? ', 'comment_created': datetime.datetime(2023, 1, 12, 18, 1, 15, tzinfo=datetime.timezone.utc), 'commenter': 'FrankYFTang', 'type': 'User'}, {'comment_id': 1068703708, 'comment_body': 'nit: Return -> Returns\r\nI assume the ""mount count"" means the number of the month since epoch. Also, make this an protected virtual function and override it in a protected function in TibetanTsurphuCalendar. ', 'comment_created': datetime.datetime(2023, 1, 12, 21, 55, tzinfo=datetime.timezone.utc), 'commenter': 'FrankYFTang', 'type': 'User'}, {'comment_id': 1068706378, 'comment_body': 'What is the possible value of is_leap_month ? I assume it is a bool.\r\nHow about rename it to virtual int32_t monthsSinceEpoch(int32_t eyear, int32_t month, bool isLeapMonth) const;', 'comment_created': datetime.datetime(2023, 1, 12, 21, 57, 30, tzinfo=datetime.timezone.utc), 'commenter': 'FrankYFTang', 'type': 'User'}, {'comment_id': 1068721566, 'comment_body': 'Please add the following in the comments as references:\r\n// Ref: [Janson] Janson, Svante. ""Tibetan calendar mathematics."" arXiv preprint arXiv:1401.6285 (2014).\r\n// http://www2.math.uu.se/~svante/papers/calendars/tibet.pdf', 'comment_created': datetime.datetime(2023, 1, 12, 22, 12, 30, tzinfo=datetime.timezone.utc), 'commenter': 'FrankYFTang', 'type': 'User'}, {'comment_id': 1068722220, 'comment_body': 'Please use constexpr and add comment to point to the eq in [Janson]\r\nChange it to\r\n```\r\nconstexpr double PHUGPA_M0 = 2015501 + 4783.0/5656; // as in [Janson] (7.4)\r\n```', 'comment_created': datetime.datetime(2023, 1, 12, 22, 13, 34, tzinfo=datetime.timezone.utc), 'commenter': 'FrankYFTang', 'type': 'User'}, {'comment_id': 1068731313, 'comment_body': '```\r\nconstexpr double TSURPHU_M0 = 2353745 + 1795153.0 / 7635600; // as in [Janson] (A.3)\r\n```\r\nI think you need to add "".0"" after 1795153\r\nOtherwise, TSURPHU_M0 will be 2353745.000000 not 2353745.235103\r\n', 'comment_created': datetime.datetime(2023, 1, 12, 22, 27, 5, tzinfo=datetime.timezone.utc), 'commenter': 'FrankYFTang', 'type': 'User'}, {'comment_id': 1068733868, 'comment_body': 'Please change it to\r\n```\r\n// Mean length of the month, in the unit of days\r\nconstexpr double M1 = 167025.0/5656; // as in [Janson] (7.2, 12.1, and A.1)\r\n```\r\n', 'comment_created': datetime.datetime(2023, 1, 12, 22, 31, 8, tzinfo=datetime.timezone.utc), 'commenter': 'FrankYFTang', 'type': 'User'}, {'comment_id': 1068738136, 'comment_body': 'Well, this reference could be added but the basis of the code is really \r\n\r\n`[Henning] Henning, Edward. ""Kālacakra and the Tibetan Calendar."" American Institute of Buddhist Studies, New York, 2007.`\r\n\r\nbut there should be no difference', 'comment_created': datetime.datetime(2023, 1, 12, 22, 38, tzinfo=datetime.timezone.utc), 'commenter': 'eroux', 'type': 'User'}, {'comment_id': 1068738264, 'comment_body': 'Please change it to\r\n```\r\n//  Mean length of the lunar day, in the unit of days\r\nconstexpr double M2 = M1/30; // as in [Janson] (7.3, 12.2, Remark 14)\r\n```\r\n', 'comment_created': datetime.datetime(2023, 1, 12, 22, 38, 14, tzinfo=datetime.timezone.utc), 'commenter': 'FrankYFTang', 'type': 'User'}, {'comment_id': 1068742312, 'comment_body': 'Please change it to\r\n```\r\n//  Mean solar longitude at the epoch\r\nconstexpr double PHUGPA_S0 = 743.0/804; // as in [Janson] (7.8)\r\n```', 'comment_created': datetime.datetime(2023, 1, 12, 22, 44, 34, tzinfo=datetime.timezone.utc), 'commenter': 'FrankYFTang', 'type': 'User'}, {'comment_id': 1068743462, 'comment_body': 'Change it to\r\n```\r\nconstexpr double TSURPHU_S0 = -5983.0/108540; // as in [Janson] (A.4)\r\n```', 'comment_created': datetime.datetime(2023, 1, 12, 22, 46, 33, tzinfo=datetime.timezone.utc), 'commenter': 'FrankYFTang', 'type': 'User'}, {'comment_id': 1068745269, 'comment_body': 'Change it to\r\n```\r\nconstexpr double S1 = 65.0/804; // as in [Janson] (7.6 and A.2)\r\n```', 'comment_created': datetime.datetime(2023, 1, 12, 22, 49, 43, tzinfo=datetime.timezone.utc), 'commenter': 'FrankYFTang', 'type': 'User'}, {'comment_id': 1068746521, 'comment_body': 'Change it to\r\n\r\n```\r\nconstexpr double S2 = S1/30; // as in [Janson] (7.7, and Remark 14)\r\n```', 'comment_created': datetime.datetime(2023, 1, 12, 22, 51, 58, tzinfo=datetime.timezone.utc), 'commenter': 'FrankYFTang', 'type': 'User'}, {'comment_id': 1068748170, 'comment_body': 'Change it to\r\n```\r\nconstexpr double PHUGPA_A0 = 475.0/3528; // as in [Janson] (7.14)\r\n```', 'comment_created': datetime.datetime(2023, 1, 12, 22, 54, 39, tzinfo=datetime.timezone.utc), 'commenter': 'FrankYFTang', 'type': 'User'}, {'comment_id': 1068749335, 'comment_body': ""remove extra ';' . also need to add .0 before / to avoid int division.\r\nChange it to\r\n```\r\nconstexpr double TSURPHU_A0 = 207.0 / 392; // as in [Janson] (A.5)\r\n```\r\n"", 'comment_created': datetime.datetime(2023, 1, 12, 22, 56, 26, tzinfo=datetime.timezone.utc), 'commenter': 'FrankYFTang', 'type': 'User'}, {'comment_id': 1068750266, 'comment_body': 'Change it to\r\n```\r\nconstexpr double A1 = 253.0/3528; // as in [Janson] (7.12 and A.27)\r\n```', 'comment_created': datetime.datetime(2023, 1, 12, 22, 57, 58, tzinfo=datetime.timezone.utc), 'commenter': 'FrankYFTang', 'type': 'User'}, {'comment_id': 1068751224, 'comment_body': 'Change it to\r\n```\r\nconstexpr double A2 = 1.0/28; // as in [Janson] (7.13)\r\n```', 'comment_created': datetime.datetime(2023, 1, 12, 22, 59, 39, tzinfo=datetime.timezone.utc), 'commenter': 'FrankYFTang', 'type': 'User'}, {'comment_id': 1068751666, 'comment_body': 'Please add constexpr and comment pointing to the ref in [Janson] for the following as my feedback above. ', 'comment_created': datetime.datetime(2023, 1, 12, 23, 0, 24, tzinfo=datetime.timezone.utc), 'commenter': 'FrankYFTang', 'type': 'User'}, {'comment_id': 1068755568, 'comment_body': 'Please use constexpr and add comments ref point to  [Janson]\r\nFor example, change it to\r\n```\r\nconstexpr int32_t SUN_TAB[] = {0, 6, 10, 11}; // as in [Janson] (7.21)\r\nconstexpr int32_t MOON_TAB[] = {0, 5, 10, 15, 19, 22, 24, 25}; // as in [Janson] (7.18)\r\n```', 'comment_created': datetime.datetime(2023, 1, 12, 23, 6, 58, tzinfo=datetime.timezone.utc), 'commenter': 'FrankYFTang', 'type': 'User'}, {'comment_id': 1068757256, 'comment_body': 'Should the parameter name rename to i to improve readability while reference to (7.18) in [Janson] ?\r\nThe comments need improvement. It does not make sense to me that you pass in a moonTab and return a modified moonTab. \r\nnit: Return -> Returns.\r\nWhat is ""moon tab"" anyway?', 'comment_created': datetime.datetime(2023, 1, 12, 23, 9, 52, tzinfo=datetime.timezone.utc), 'commenter': 'FrankYFTang', 'type': 'User'}, {'comment_id': 1068793586, 'comment_body': ""I understand in the paper they try to use a smaller table, but without the folding the size is 12 and 28 which is not very big anyway. Why don't we just use 12 and 28 items and make them as static constexpr inside the function and simply the function to reduce the complexity and improve the performance.\r\n```\r\n\r\nint32_t moonTab(int32_t i) {\r\n    // as in [Janson] (7.18)\r\n    static constexpr int32_t MOON_TAB[] = {\r\n        0,  5,  10,  15,  19,  22,  24,  25,  24,  22,  19,  15,  10,  5,  \r\n        0, -5, -10, -15, -19, -22, -24, -25, -24, -22, -19, -15, -10, -5 \r\n    }; \r\n    return MOON_TAB[(i % 28 + 28) % 28];\r\n}\r\nint32_t sunTab(int32_t i) {\r\n    // as in [Janson] (7.21)\r\n    constexpr int32_t SUN_TAB[] = {\r\n        0, 6, 10, 11, 10, 6, 0, -6, -10, -11, -10, - 6\r\n    }; \r\n    return SUN_TAB[(i % 12 + 12) % 12];\r\n}\r\n```"", 'comment_created': datetime.datetime(2023, 1, 13, 0, 15, 15, tzinfo=datetime.timezone.utc), 'commenter': 'FrankYFTang', 'type': 'User'}, {'comment_id': 1068797162, 'comment_body': 'see my eariler feedback around MOON_TAB. \r\n1. I think that could be just a static constexpr inside the function\r\n2. the function could be just a simple internal C style internal function and has no need to be part of the interface as a member method\r\n3. we can avoid the complex if check by just unfold the array to 12 and 28 elements which the increase the table by 8x4=32 bytes 20x4=80 bytes but probably reduce the compiled code. If we really concern of the size increase, we can actually make the constexpr int8_t instead but I think that may not be necessary. ', 'comment_created': datetime.datetime(2023, 1, 13, 0, 22, 7, tzinfo=datetime.timezone.utc), 'commenter': 'FrankYFTang', 'type': 'User'}, {'comment_id': 1068797244, 'comment_body': 'see my comment above. ', 'comment_created': datetime.datetime(2023, 1, 13, 0, 22, 18, tzinfo=datetime.timezone.utc), 'commenter': 'FrankYFTang', 'type': 'User'}, {'comment_id': 1068803003, 'comment_body': 'Why do we need PHUGPA_MONTH0? I see no where in the code use it.', 'comment_created': datetime.datetime(2023, 1, 13, 0, 34, 20, tzinfo=datetime.timezone.utc), 'commenter': 'FrankYFTang', 'type': 'User'}, {'comment_id': 1068803290, 'comment_body': 'why do we need PHUGPA_BETA_STAR , I see no where in the code use it.', 'comment_created': datetime.datetime(2023, 1, 13, 0, 34, 40, tzinfo=datetime.timezone.utc), 'commenter': 'FrankYFTang', 'type': 'User'}, {'comment_id': 1068803564, 'comment_body': 'Why do we need TSURPHU_MONTH0 here. I see no code use it.', 'comment_created': datetime.datetime(2023, 1, 13, 0, 35, 14, tzinfo=datetime.timezone.utc), 'commenter': 'FrankYFTang', 'type': 'User'}, {'comment_id': 1068803695, 'comment_body': 'why do we need TSURPHU_BETA_STAR. I see no code use it. ', 'comment_created': datetime.datetime(2023, 1, 13, 0, 35, 28, tzinfo=datetime.timezone.utc), 'commenter': 'FrankYFTang', 'type': 'User'}, {'comment_id': 1070136552, 'comment_body': '2023 please', 'comment_created': datetime.datetime(2023, 1, 13, 22, 37, 56, tzinfo=datetime.timezone.utc), 'commenter': 'FrankYFTang', 'type': 'User'}, {'comment_id': 1070136707, 'comment_body': '2023 please', 'comment_created': datetime.datetime(2023, 1, 13, 22, 38, 10, tzinfo=datetime.timezone.utc), 'commenter': 'FrankYFTang', 'type': 'User'}, {'comment_id': 1070138273, 'comment_body': 'For catching issue issers, could you break the testing against ""bo_IN@calendar=tibetan"" and ""bo_IN@calendar=tibetan-tsurphu"" in two different test function. Basically, create another CalendarCaseTest::TibetanTsurphu() and put the following test cases into that part. This may help us to parallelized our test and run faster. Thanks', 'comment_created': datetime.datetime(2023, 1, 13, 22, 40, 54, tzinfo=datetime.timezone.utc), 'commenter': 'FrankYFTang', 'type': 'User'}, {'comment_id': 1070138738, 'comment_body': 'Could you cite the ref source of the following test data if you get it from somewhere. That will help us to debug in the future. thanks.  URL or Book name w/ page number would be fine. ', 'comment_created': datetime.datetime(2023, 1, 13, 22, 42, 1, tzinfo=datetime.timezone.utc), 'commenter': 'FrankYFTang', 'type': 'User'}, {'comment_id': 1070138823, 'comment_body': '2023', 'comment_created': datetime.datetime(2023, 1, 13, 22, 42, 10, tzinfo=datetime.timezone.utc), 'commenter': 'FrankYFTang', 'type': 'User'}, {'comment_id': 1070140677, 'comment_body': 'I also prefer. you place the monthCount before the day. Could you make it clear what are these two value really mean. Is day limited to 0-29? or (1-30)?  What does ""trueDate"" mean, is there a concept of ""falseDate"" ?', 'comment_created': datetime.datetime(2023, 1, 13, 22, 45, 19, tzinfo=datetime.timezone.utc), 'commenter': 'FrankYFTang', 'type': 'User'}, {'comment_id': 1070228926, 'comment_body': 'in that context ""true"" is the opposite of ""average"" / ""mean"" / ""approximate"", it\'s probably influenced by the Tibetan terms', 'comment_created': datetime.datetime(2023, 1, 14, 7, 12, 22, tzinfo=datetime.timezone.utc), 'commenter': 'eroux', 'type': 'User'}, {'comment_id': 1070229950, 'comment_body': ""it's from http://kalacakra.org/calendar/tiblist.htm"", 'comment_created': datetime.datetime(2023, 1, 14, 7, 23, 37, tzinfo=datetime.timezone.utc), 'commenter': 'eroux', 'type': 'User'}, {'comment_id': 1087295155, 'comment_body': 'could we rename it to approximateDate instead then? ', 'comment_created': datetime.datetime(2023, 1, 25, 23, 49, 1, tzinfo=datetime.timezone.utc), 'commenter': 'FrankYFTang', 'type': 'User'}]","[{'commit_sha': '15ff9d702b63af3c41d5635673f8eee587aa523e', 'committer_username': 'dyrroth-11', 'committer_name': 'Ashish Patel', 'committer_email': 'ashish.patel.cse19@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 12, 18, 17, 20, 34, tzinfo=datetime.timezone.utc)}]",Ashish Patel,59027155,ashish.patel.cse19@itbhu.ac.in,User,,20,,26,41
654719203,CLDR-11440 add tibetan-phugpa and tibetan-tsurphu calendars,"CLDR-11440

- [x] This PR completes the ticket.

<!--
Thank you for your pull request.
Please see http://cldr.unicode.org/index/process for general
information on contributing to CLDR.

1. Make sure the ticket is filed at
https://unicode-org.atlassian.net/projects/CLDR/
2. Update the PR title and first line of this
message to include the ticket ID (CLDR-_____)
3. You will be automatically asked to sign the contributors’
license before the PR is accepted.
- sign: https://cla-assistant.io/unicode-org/cldr
- license: http://www.unicode.org/copyright.html#License
-->
",False,1280,https://api.github.com/repos/unicode-org/cldr/pulls/1280,https://github.com/unicode-org/cldr/pull/1280,open,2,0,1,1,4,0,2,0,"[{'name': 'question'}, {'name': 'incomplete'}]",2021-05-27 09:31:03+00:00,,0.0,,[],"[{'commit_sha': '5dc535b982eb187e1ba20345bb43089dbc026676', 'committer_username': 'eroux', 'committer_name': 'Elie Roux', 'committer_email': 'roux.elie@gmail.com', 'commit_date': datetime.datetime(2009, 3, 6, 19, 6, 28, tzinfo=datetime.timezone.utc)}]",Elie Roux,60868,roux.elie@gmail.com,User,,73,,7,79

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
49244766,icu,unicode-org/icu,C++,722,2696,103,230,32897,85,78,85,"[{'id': 712757763, 'number': 1793, 'closed': datetime.datetime(2023, 4, 17, 21, 56, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 14, 10, 32, 56, tzinfo=datetime.timezone.utc), 'time_taken': 52831409.0, 'time_delta': '611 days, 11:23:29', 'additions': 976, 'deletions': 8, 'state': 'closed'}]"
103948672,cldr,unicode-org/cldr,Java,366,892,58,122,16896,127,81,127,[]
