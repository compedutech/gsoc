pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
677742494,Louvain Community Detection Algorithm,"<!--
Please run black to format your code.
See https://networkx.org/documentation/latest/developer/contribute.html for details.
-->
This is the PR regarding the implementation of Louvain Community Detection Algorithm.

Work remaining:
- [x] Write more extensive documentation
- [x] Add more tests
- [x] Add resolution parameter
- [x] Add support for directed graphs (if doable)
- [x] Improve performance for large graphs
- [x] Improve `_gen_graph` function either by improving `nx.quotient_graph` or by manually writing code to generate the new graph based on the communities
- [x] Add `weights` label inside the `quotient_graph`
",True,4929,https://api.github.com/repos/networkx/networkx/pulls/4929,https://github.com/networkx/networkx/pull/4929,closed,449,0,4,51,20,34,1,1,[{'name': 'type: Enhancements'}],2021-06-25 08:46:13+00:00,2021-08-23 23:43:28+00:00,5151435.0,"59 days, 14:57:15","[{'comment_id': 658995287, 'comment_body': 'Minor points that probably won\'t change much... but might:\r\n\r\n1) The `degrees` object is still a DegreeView of the graph, so it still has to compute the degree each time you look it up.  It might be faster to make that a dict:  `dict(G.degree(weight=weight))`.\r\n2) Your `total_weights` can be initialized from `degrees` saving one pass of computing the degrees:\r\n```python\r\ndegrees = dict(G.degree(weight=weight))\r\ntotal_weights = {i: deg for i, deg in enumerate(degrees.values())}\r\n```\r\n\r\n3) The `rand_nodes` ordering can be constructed by [random.shuffle](https://docs.python.org/3/library/random.html#random.shuffle) which is built for this kind of operation, so should be faster. You have to form a list first because it changes the order in-place:  \r\n```python\r\nrand_nodes = random.shuffle(list(G.nodes))\r\n```\r\n\r\n4) The size of G (held in variable `m`) can be computed from `degrees` saving one more computation of the degree of each node.\r\n```python\r\nm = sum(degrees.values()) / 2  # for undirected graph ""size"" is half the sum of degrees\r\n```\r\n\r\nAlso -- does m change as the communities change (and as we go from level to level?) It might be the same in which case we don\'t have to recompute it.', 'comment_created': datetime.datetime(2021, 6, 25, 19, 36, 44, tzinfo=datetime.timezone.utc), 'commenter': 'dschult', 'type': 'User'}, {'comment_id': 659135261, 'comment_body': 'Should the self_loop weight be “number of edges” between nodes in block “u”,  or “total weight of the edges”?\r\nIf it should be total weight, let’s give `quotient_graph` an input node_data(b) function that stores b itself (instead of “graph”) and the total weight of edges from nodes in both nodes in b (instead of “nedges”). I think that will speed it up too.  Something like:\r\n\r\n```python\r\ndef node_data(b):\r\n    self_weight = sum(wt for node, nbr, wt in G.edges(b, data=weight, default=1) if nbr in b)\r\n    If not G.is_directed():\r\n        self_weight /= 2\r\n    return dict(nodes=b, nedges=self_weight)\r\n```', 'comment_created': datetime.datetime(2021, 6, 26, 7, 46, 47, tzinfo=datetime.timezone.utc), 'commenter': 'dschult', 'type': 'User'}, {'comment_id': 659154911, 'comment_body': 'I did make the proposed changes thanks.\r\n\r\nIndeed the size `m` will always stay the same', 'comment_created': datetime.datetime(2021, 6, 26, 11, 11, 10, tzinfo=datetime.timezone.utc), 'commenter': 'z3y50n', 'type': 'User'}, {'comment_id': 659156499, 'comment_body': 'self_loops are the number of edges between nodes inside the same community only', 'comment_created': datetime.datetime(2021, 6, 26, 11, 27, 40, tzinfo=datetime.timezone.utc), 'commenter': 'z3y50n', 'type': 'User'}, {'comment_id': 659164617, 'comment_body': 'Hmmm… then maybe the “size” of the graph does change. We lose information about the weights of the edges within a community if we make the self-loop weight be the number of edges when we are using edge weights for other edges.', 'comment_created': datetime.datetime(2021, 6, 26, 12, 52, 26, tzinfo=datetime.timezone.utc), 'commenter': 'dschult', 'type': 'User'}, {'comment_id': 659207019, 'comment_body': 'Oh there was some misunderstanding, when I say number of edges I mean the weights between nodes of the same community. I interpreted wrongly what you said.', 'comment_created': datetime.datetime(2021, 6, 26, 18, 12, 54, tzinfo=datetime.timezone.utc), 'commenter': 'z3y50n', 'type': 'User'}, {'comment_id': 659221483, 'comment_body': 'OK... good -- then we should definitely define `node_data` to retain the original graph nodes in that partition as well as the sum of the edge weights. I think that will be faster than the current code anyway which stores the subgraph induced by the original nodes, the number of nodes, the number of edges and the density.  :}', 'comment_created': datetime.datetime(2021, 6, 26, 20, 39, 45, tzinfo=datetime.timezone.utc), 'commenter': 'dschult', 'type': 'User'}, {'comment_id': 659831305, 'comment_body': 'I tested with defining the `node_data` as you suggested but the timing was still pretty bad so I decided to write my own function to generate the new graph.\r\n\r\nThe new version takes about 0.5 seconds to generate a new graph of 27k nodes and 1500 communities.', 'comment_created': datetime.datetime(2021, 6, 28, 14, 20, 57, tzinfo=datetime.timezone.utc), 'commenter': 'z3y50n', 'type': 'User'}, {'comment_id': 659907378, 'comment_body': 'What was the timing before?  (using quotient_graph)', 'comment_created': datetime.datetime(2021, 6, 28, 15, 48, 9, tzinfo=datetime.timezone.utc), 'commenter': 'dschult', 'type': 'User'}, {'comment_id': 659926874, 'comment_body': 'About 200 seconds', 'comment_created': datetime.datetime(2021, 6, 28, 16, 13, 4, tzinfo=datetime.timezone.utc), 'commenter': 'z3y50n', 'type': 'User'}, {'comment_id': 659948797, 'comment_body': ""Wow!   Great job! :}  \r\nThat should speed things up a bit!  :}\r\n\r\nMakes me want to revisit `quotient_graph`.  I'll open an issue about that.  Edit:  Issue #4935"", 'comment_created': datetime.datetime(2021, 6, 28, 16, 44, 28, tzinfo=datetime.timezone.utc), 'commenter': 'dschult', 'type': 'User'}, {'comment_id': 674445104, 'comment_body': ""Do we need to change partition and inner_partition here?\r\nI think we don't use them in the function or the loop and then we just change them back to what they were.\r\nPerhaps we only need to change `total_weights`?"", 'comment_created': datetime.datetime(2021, 7, 22, 1, 30, 53, tzinfo=datetime.timezone.utc), 'commenter': 'dschult', 'type': 'User'}, {'comment_id': 674447575, 'comment_body': 'I think we avoid the data[""weight""] lookups and the self-loop checks later on if we do it all up front here:\r\n```suggestion\r\n    nbrs = {u: {v: data[""weight""] for v, data in G[u] if v != u} for u in G}\r\n    rand_nodes = list(G)\r\n```\r\nThen later, in `_neighbor_weights` we can remove the if statement and the data[weight] lookup in the loop:\r\n```\r\n    weights = defaultdict(float)\r\n    for nbr, wt in nbrs[u].items():\r\n        weights[node2com[nbr]] += 2 * wt\r\n```\r\n', 'comment_created': datetime.datetime(2021, 7, 22, 1, 40, 35, tzinfo=datetime.timezone.utc), 'commenter': 'dschult', 'type': 'User'}, {'comment_id': 676023337, 'comment_body': 'Yeah I can move these statements inside this `if best_com != node2com[u]:` statement in order to make the removal only when there is actually a move to make', 'comment_created': datetime.datetime(2021, 7, 24, 17, 15, 22, tzinfo=datetime.timezone.utc), 'commenter': 'z3y50n', 'type': 'User'}, {'comment_id': 676025091, 'comment_body': 'Good idea I have added the changes. I think it got faster by 1 second or so, thanks!', 'comment_created': datetime.datetime(2021, 7, 24, 17, 32, 50, tzinfo=datetime.timezone.utc), 'commenter': 'z3y50n', 'type': 'User'}, {'comment_id': 676069212, 'comment_body': 'The `G.edges` method can do the data lookup. Not sure that it is any faster, but it\'s a cleaner interface, maybe:\r\n```\r\n    for u, v, wt in G.edges(data=weight, default=1):\r\n        if H.has_edge(u, v):\r\n            H[u][v][""weight""] += wt\r\n        else:\r\n            H.add_edge(u, v, weight=wt)\r\n    return H\r\n```', 'comment_created': datetime.datetime(2021, 7, 25, 1, 57, 26, tzinfo=datetime.timezone.utc), 'commenter': 'dschult', 'type': 'User'}, {'comment_id': 676122612, 'comment_body': 'Good catch thanks!', 'comment_created': datetime.datetime(2021, 7, 25, 10, 24, 41, tzinfo=datetime.timezone.utc), 'commenter': 'z3y50n', 'type': 'User'}, {'comment_id': 686857223, 'comment_body': '```suggestion\r\n    """"""Yields partitions for each level of the Louvain Community Detection Algorithm\r\n\r\n    The partitions at each level (step of the algorithm) form a dendogram of communities.\r\n```', 'comment_created': datetime.datetime(2021, 8, 11, 13, 56, 55, tzinfo=datetime.timezone.utc), 'commenter': 'dschult', 'type': 'User'}, {'comment_id': 686878841, 'comment_body': '```suggestion\r\n    """"""Calculate one level of the Louvain partitions tree\r\n\r\n    Parameters\r\n    ----------\r\n    G : NetworkX Graph/DiGraph\r\n        The graph from which to detect communities\r\n    m : number\r\n        The size of the graph `G`.\r\n    partition : list of sets of nodes\r\n        A valid partition of the graph `G`\r\n    resolution : positive number\r\n        The resolution parameter for computing the modularity of a partition\r\n    is_directed : bool\r\n        True if `G` is a directed graph.\r\n    seed : integer, random_state, or None (default)\r\n        Indicator of random number generation state.\r\n        See :ref:`Randomness<randomness>`.\r\n\r\n```', 'comment_created': datetime.datetime(2021, 8, 11, 14, 20, 4, tzinfo=datetime.timezone.utc), 'commenter': 'dschult', 'type': 'User'}, {'comment_id': 686881236, 'comment_body': ""Formalize the parameters docs for this function.  Say that 'nbrs' is keyed by neighbor to the edge weight as value."", 'comment_created': datetime.datetime(2021, 8, 11, 14, 22, 28, tzinfo=datetime.timezone.utc), 'commenter': 'dschult', 'type': 'User'}, {'comment_id': 686883071, 'comment_body': ""This use of `seed` is not needed because you set `seed=2` below.\r\n\r\nAnd you shouldn't actually need to import seed for this module (I think) because all the seed setting is done in the function calls."", 'comment_created': datetime.datetime(2021, 8, 11, 14, 24, 27, tzinfo=datetime.timezone.utc), 'commenter': 'dschult', 'type': 'User'}, {'comment_id': 686886581, 'comment_body': ""This might be a better test by not using `randint`, but instead use `enumerate` or some non-random way to generate the weights. That eliminates any possible intermittent test failures due to random results (which shouldn't happen here, but it's good to eliminate that source of debugging effort to make sure it isn't the part causing the errors).    With this and seed removed you can remove the `import` statement at the top of the module."", 'comment_created': datetime.datetime(2021, 8, 11, 14, 28, 9, tzinfo=datetime.timezone.utc), 'commenter': 'dschult', 'type': 'User'}, {'comment_id': 686889954, 'comment_body': 'Should we add to this ""note"" a short description of how node order is done in this implementation?', 'comment_created': datetime.datetime(2021, 8, 11, 14, 31, 36, tzinfo=datetime.timezone.utc), 'commenter': 'dschult', 'type': 'User'}, {'comment_id': 686891131, 'comment_body': 'Maybe state how the edge weights are determined for this new network?', 'comment_created': datetime.datetime(2021, 8, 11, 14, 32, 50, tzinfo=datetime.timezone.utc), 'commenter': 'dschult', 'type': 'User'}, {'comment_id': 686893143, 'comment_body': 'Add a ""See Also"" section with the `generate_dendogram` function here.  And then in `generate_dendogram` add a ""See Also"" section with the `louvain_communities` function listed there. ', 'comment_created': datetime.datetime(2021, 8, 11, 14, 35, 3, tzinfo=datetime.timezone.utc), 'commenter': 'dschult', 'type': 'User'}, {'comment_id': 686896066, 'comment_body': ""Maybe add a first paragraph description of what Louvain tries to do, with citation to the papers [1] and [2].\r\nA similar description (maybe the exact wording so readers know they've already read it) could go into `generate_dendogram`."", 'comment_created': datetime.datetime(2021, 8, 11, 14, 38, 4, tzinfo=datetime.timezone.utc), 'commenter': 'dschult', 'type': 'User'}, {'comment_id': 686898102, 'comment_body': 'Not needed?', 'comment_created': datetime.datetime(2021, 8, 11, 14, 40, 21, tzinfo=datetime.timezone.utc), 'commenter': 'dschult', 'type': 'User'}, {'comment_id': 687084494, 'comment_body': ""Is it suffice to say that the order is determined using networkx's `seed.shuffle`?"", 'comment_created': datetime.datetime(2021, 8, 11, 18, 43, 15, tzinfo=datetime.timezone.utc), 'commenter': 'z3y50n', 'type': 'User'}, {'comment_id': 687165045, 'comment_body': 'Yes -- though the word `seed` is local to this function, so maybe better to say `random.shuffle` or even leaving out the name of the function and just say:  ""... using a random shuffle.""', 'comment_created': datetime.datetime(2021, 8, 11, 20, 25, 38, tzinfo=datetime.timezone.utc), 'commenter': 'dschult', 'type': 'User'}, {'comment_id': 693476273, 'comment_body': 'Just some documentation nit picks here:\r\nCould you change this to `partition of a graph` instead of `partition of G`. ', 'comment_created': datetime.datetime(2021, 8, 22, 10, 0, 40, tzinfo=datetime.timezone.utc), 'commenter': 'MridulS', 'type': 'User'}, {'comment_id': 693476442, 'comment_body': ""This reference isn't referenced anywhere in the text. We should either add a link to it somewhere in the function doc above or remove it."", 'comment_created': datetime.datetime(2021, 8, 22, 10, 2, 4, tzinfo=datetime.timezone.utc), 'commenter': 'MridulS', 'type': 'User'}, {'comment_id': 693477915, 'comment_body': 'Could you also add the DOI links and the explicit URL for HAL archive.\r\n[1] https://doi.org/10.1088/1742-5468/2008/10/P10008\r\n[3] https://hal.archives-ouvertes.fr/hal-01231784\r\n\r\nPS: We should formalise referencing in our documentation.', 'comment_created': datetime.datetime(2021, 8, 22, 10, 14, 24, tzinfo=datetime.timezone.utc), 'commenter': 'MridulS', 'type': 'User'}, {'comment_id': 693478081, 'comment_body': ' https://doi.org/10.1088/1742-5468/2008/10/P10008', 'comment_created': datetime.datetime(2021, 8, 22, 10, 15, 50, tzinfo=datetime.timezone.utc), 'commenter': 'MridulS', 'type': 'User'}, {'comment_id': 693478960, 'comment_body': 'This note should probably live under \r\n```\r\n Notes\r\n -----\r\n```\r\nso sphinx picks this up properly. For an example look at https://networkx.org/documentation/stable/reference/algorithms/generated/networkx.algorithms.approximation.clique.large_clique_size.html?highlight=notes', 'comment_created': datetime.datetime(2021, 8, 22, 10, 23, 2, tzinfo=datetime.timezone.utc), 'commenter': 'MridulS', 'type': 'User'}]","[{'commit_sha': '5d1132a8e8b778efc64d46fcfa14f9f6a5e470fc', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '92ebf1815b8468b9a0c90a48e5bd364e5258ccf4', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca6165de5e8a96274ae66cbe870a3e6623e3a4b8', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '725d74d16e7546f518556de124ac94fac3b37455', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c89dcab58a6ce0983b1c5d8fe1d86224f572e895', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'caa337acf84b31c9e2358c6c8768c17d0a8b8299', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '98a60f73cec6a96e60c20d149aadb5fb606bf883', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c9eb9052e0b23fa05031f031a3685d0a2031c06', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7273f52cd87bc34399dedda2a7b83e578671e4f1', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c05e50ef0717965272b9961b5849f6bc9705f5d', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ae925629249f0c76a95d958e9752db382c0a79d', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '33dcefa75aea45b8d63bec6682ba5dab3f955362', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '33c31affe5b691a0862850d873601da81139f848', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1dbf678aee6f59a2bcf64d9f4e3c36b5013277e', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c916becaee4c7c15f1f67f1e1f47855e93574ba', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2e9287bc77f78bb3bc8d3246aa4d5d1ebbf785e9', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25dfa4ca5e52f673a41c7871a479c5243d3a01ca', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e4882ea05387edb7117ff1c73b55234c3923587', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83117afa7a24222f3a3deab7318774ebf8b7013d', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c38543beb0a5801691850d5c7027439c8d9aca5', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb079ff6bd2bfbb3964155de5cefe2cda7df4fb0', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e598b83e08b98b9449ef0c849a8e4cd72a6c9233', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '811b0cfad49ce262498835b81d0af32f9da100e1', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '461c945b2d9a4444fcb4e414d14fd2c80087044c', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3e1f1bfae0cce9f09c9059f7d00f94936073a88', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '58613ae3792fcda4a58689ba705299cfca9fe8a7', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f95421ac54d760c6c43e3f3b65937b40d5b5eb50', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66d75cabb4278fa6db5130f54e785a8892686e47', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05fda75bce3c1911d0dd62c9654664f238ea3305', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff770c469ac3a9842e4ee9f37704c97505e65df8', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca60d9766ae8df285e79c9b118c1b341542fdd80', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08ba559bab0910e212520b4d007d9edc2966bb0c', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd214428927772b420c9432cc20964d1759b40ad7', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a8fe50efe4526166eebf58bbfeca010efe62de7d', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6ec7bf36fb8c7576711b2558bc1fc4158b08241', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf2d956735e526607f9460821f407ac12f439fce', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd09bf685013349920dd04b837e12fa81067812d6', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4587692fae63533118899e2e76e6108f6da4cca4', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '883a57afc07f143fc81a38f53838905004cd1646', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cea98bebf55aa70c24599a7829f01ddbb00547b3', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2e66c447873583c3c1f21ccd7d9f4b8964483a3f', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c60b30727c94983f3582a8b9372a318ca8e5f3f0', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97716e42b0ba77c8543c0cb5446b084884a59284', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b6257d777c8143e770290778887edd9a74b205bd', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad5a126d862bcadd4ec4e305070d5936c747e5dd', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c82fa6aa974de7f254b53173603a7071582c27e', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '75ed5f65fe6345a546061004f3b81a3e45e8fa22', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '77b54413bad38bcde6f617b74193188389dbf82b', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9629af4cdc9757368cd44bea3365ea1fe04b6a2d', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '582ee3404f02130bc3656da3d9e3bc9b162bd45d', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8cd44523cfb86443a7cac4b9e21e850971c0f64f', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}]",Dimitrios Papageorgiou,33282622,dim_papag@windowslive.com,User,,21,,7,13
677742494,Louvain Community Detection Algorithm,"<!--
Please run black to format your code.
See https://networkx.org/documentation/latest/developer/contribute.html for details.
-->
This is the PR regarding the implementation of Louvain Community Detection Algorithm.

Work remaining:
- [x] Write more extensive documentation
- [x] Add more tests
- [x] Add resolution parameter
- [x] Add support for directed graphs (if doable)
- [x] Improve performance for large graphs
- [x] Improve `_gen_graph` function either by improving `nx.quotient_graph` or by manually writing code to generate the new graph based on the communities
- [x] Add `weights` label inside the `quotient_graph`
",True,4929,https://api.github.com/repos/networkx/networkx/pulls/4929,https://github.com/networkx/networkx/pull/4929,closed,449,0,4,51,20,34,1,1,[{'name': 'type: Enhancements'}],2021-06-25 08:46:13+00:00,2021-08-23 23:43:28+00:00,5151435.0,"59 days, 14:57:15","[{'comment_id': 658995287, 'comment_body': 'Minor points that probably won\'t change much... but might:\r\n\r\n1) The `degrees` object is still a DegreeView of the graph, so it still has to compute the degree each time you look it up.  It might be faster to make that a dict:  `dict(G.degree(weight=weight))`.\r\n2) Your `total_weights` can be initialized from `degrees` saving one pass of computing the degrees:\r\n```python\r\ndegrees = dict(G.degree(weight=weight))\r\ntotal_weights = {i: deg for i, deg in enumerate(degrees.values())}\r\n```\r\n\r\n3) The `rand_nodes` ordering can be constructed by [random.shuffle](https://docs.python.org/3/library/random.html#random.shuffle) which is built for this kind of operation, so should be faster. You have to form a list first because it changes the order in-place:  \r\n```python\r\nrand_nodes = random.shuffle(list(G.nodes))\r\n```\r\n\r\n4) The size of G (held in variable `m`) can be computed from `degrees` saving one more computation of the degree of each node.\r\n```python\r\nm = sum(degrees.values()) / 2  # for undirected graph ""size"" is half the sum of degrees\r\n```\r\n\r\nAlso -- does m change as the communities change (and as we go from level to level?) It might be the same in which case we don\'t have to recompute it.', 'comment_created': datetime.datetime(2021, 6, 25, 19, 36, 44, tzinfo=datetime.timezone.utc), 'commenter': 'dschult', 'type': 'User'}, {'comment_id': 659135261, 'comment_body': 'Should the self_loop weight be “number of edges” between nodes in block “u”,  or “total weight of the edges”?\r\nIf it should be total weight, let’s give `quotient_graph` an input node_data(b) function that stores b itself (instead of “graph”) and the total weight of edges from nodes in both nodes in b (instead of “nedges”). I think that will speed it up too.  Something like:\r\n\r\n```python\r\ndef node_data(b):\r\n    self_weight = sum(wt for node, nbr, wt in G.edges(b, data=weight, default=1) if nbr in b)\r\n    If not G.is_directed():\r\n        self_weight /= 2\r\n    return dict(nodes=b, nedges=self_weight)\r\n```', 'comment_created': datetime.datetime(2021, 6, 26, 7, 46, 47, tzinfo=datetime.timezone.utc), 'commenter': 'dschult', 'type': 'User'}, {'comment_id': 659154911, 'comment_body': 'I did make the proposed changes thanks.\r\n\r\nIndeed the size `m` will always stay the same', 'comment_created': datetime.datetime(2021, 6, 26, 11, 11, 10, tzinfo=datetime.timezone.utc), 'commenter': 'z3y50n', 'type': 'User'}, {'comment_id': 659156499, 'comment_body': 'self_loops are the number of edges between nodes inside the same community only', 'comment_created': datetime.datetime(2021, 6, 26, 11, 27, 40, tzinfo=datetime.timezone.utc), 'commenter': 'z3y50n', 'type': 'User'}, {'comment_id': 659164617, 'comment_body': 'Hmmm… then maybe the “size” of the graph does change. We lose information about the weights of the edges within a community if we make the self-loop weight be the number of edges when we are using edge weights for other edges.', 'comment_created': datetime.datetime(2021, 6, 26, 12, 52, 26, tzinfo=datetime.timezone.utc), 'commenter': 'dschult', 'type': 'User'}, {'comment_id': 659207019, 'comment_body': 'Oh there was some misunderstanding, when I say number of edges I mean the weights between nodes of the same community. I interpreted wrongly what you said.', 'comment_created': datetime.datetime(2021, 6, 26, 18, 12, 54, tzinfo=datetime.timezone.utc), 'commenter': 'z3y50n', 'type': 'User'}, {'comment_id': 659221483, 'comment_body': 'OK... good -- then we should definitely define `node_data` to retain the original graph nodes in that partition as well as the sum of the edge weights. I think that will be faster than the current code anyway which stores the subgraph induced by the original nodes, the number of nodes, the number of edges and the density.  :}', 'comment_created': datetime.datetime(2021, 6, 26, 20, 39, 45, tzinfo=datetime.timezone.utc), 'commenter': 'dschult', 'type': 'User'}, {'comment_id': 659831305, 'comment_body': 'I tested with defining the `node_data` as you suggested but the timing was still pretty bad so I decided to write my own function to generate the new graph.\r\n\r\nThe new version takes about 0.5 seconds to generate a new graph of 27k nodes and 1500 communities.', 'comment_created': datetime.datetime(2021, 6, 28, 14, 20, 57, tzinfo=datetime.timezone.utc), 'commenter': 'z3y50n', 'type': 'User'}, {'comment_id': 659907378, 'comment_body': 'What was the timing before?  (using quotient_graph)', 'comment_created': datetime.datetime(2021, 6, 28, 15, 48, 9, tzinfo=datetime.timezone.utc), 'commenter': 'dschult', 'type': 'User'}, {'comment_id': 659926874, 'comment_body': 'About 200 seconds', 'comment_created': datetime.datetime(2021, 6, 28, 16, 13, 4, tzinfo=datetime.timezone.utc), 'commenter': 'z3y50n', 'type': 'User'}, {'comment_id': 659948797, 'comment_body': ""Wow!   Great job! :}  \r\nThat should speed things up a bit!  :}\r\n\r\nMakes me want to revisit `quotient_graph`.  I'll open an issue about that.  Edit:  Issue #4935"", 'comment_created': datetime.datetime(2021, 6, 28, 16, 44, 28, tzinfo=datetime.timezone.utc), 'commenter': 'dschult', 'type': 'User'}, {'comment_id': 674445104, 'comment_body': ""Do we need to change partition and inner_partition here?\r\nI think we don't use them in the function or the loop and then we just change them back to what they were.\r\nPerhaps we only need to change `total_weights`?"", 'comment_created': datetime.datetime(2021, 7, 22, 1, 30, 53, tzinfo=datetime.timezone.utc), 'commenter': 'dschult', 'type': 'User'}, {'comment_id': 674447575, 'comment_body': 'I think we avoid the data[""weight""] lookups and the self-loop checks later on if we do it all up front here:\r\n```suggestion\r\n    nbrs = {u: {v: data[""weight""] for v, data in G[u] if v != u} for u in G}\r\n    rand_nodes = list(G)\r\n```\r\nThen later, in `_neighbor_weights` we can remove the if statement and the data[weight] lookup in the loop:\r\n```\r\n    weights = defaultdict(float)\r\n    for nbr, wt in nbrs[u].items():\r\n        weights[node2com[nbr]] += 2 * wt\r\n```\r\n', 'comment_created': datetime.datetime(2021, 7, 22, 1, 40, 35, tzinfo=datetime.timezone.utc), 'commenter': 'dschult', 'type': 'User'}, {'comment_id': 676023337, 'comment_body': 'Yeah I can move these statements inside this `if best_com != node2com[u]:` statement in order to make the removal only when there is actually a move to make', 'comment_created': datetime.datetime(2021, 7, 24, 17, 15, 22, tzinfo=datetime.timezone.utc), 'commenter': 'z3y50n', 'type': 'User'}, {'comment_id': 676025091, 'comment_body': 'Good idea I have added the changes. I think it got faster by 1 second or so, thanks!', 'comment_created': datetime.datetime(2021, 7, 24, 17, 32, 50, tzinfo=datetime.timezone.utc), 'commenter': 'z3y50n', 'type': 'User'}, {'comment_id': 676069212, 'comment_body': 'The `G.edges` method can do the data lookup. Not sure that it is any faster, but it\'s a cleaner interface, maybe:\r\n```\r\n    for u, v, wt in G.edges(data=weight, default=1):\r\n        if H.has_edge(u, v):\r\n            H[u][v][""weight""] += wt\r\n        else:\r\n            H.add_edge(u, v, weight=wt)\r\n    return H\r\n```', 'comment_created': datetime.datetime(2021, 7, 25, 1, 57, 26, tzinfo=datetime.timezone.utc), 'commenter': 'dschult', 'type': 'User'}, {'comment_id': 676122612, 'comment_body': 'Good catch thanks!', 'comment_created': datetime.datetime(2021, 7, 25, 10, 24, 41, tzinfo=datetime.timezone.utc), 'commenter': 'z3y50n', 'type': 'User'}, {'comment_id': 686857223, 'comment_body': '```suggestion\r\n    """"""Yields partitions for each level of the Louvain Community Detection Algorithm\r\n\r\n    The partitions at each level (step of the algorithm) form a dendogram of communities.\r\n```', 'comment_created': datetime.datetime(2021, 8, 11, 13, 56, 55, tzinfo=datetime.timezone.utc), 'commenter': 'dschult', 'type': 'User'}, {'comment_id': 686878841, 'comment_body': '```suggestion\r\n    """"""Calculate one level of the Louvain partitions tree\r\n\r\n    Parameters\r\n    ----------\r\n    G : NetworkX Graph/DiGraph\r\n        The graph from which to detect communities\r\n    m : number\r\n        The size of the graph `G`.\r\n    partition : list of sets of nodes\r\n        A valid partition of the graph `G`\r\n    resolution : positive number\r\n        The resolution parameter for computing the modularity of a partition\r\n    is_directed : bool\r\n        True if `G` is a directed graph.\r\n    seed : integer, random_state, or None (default)\r\n        Indicator of random number generation state.\r\n        See :ref:`Randomness<randomness>`.\r\n\r\n```', 'comment_created': datetime.datetime(2021, 8, 11, 14, 20, 4, tzinfo=datetime.timezone.utc), 'commenter': 'dschult', 'type': 'User'}, {'comment_id': 686881236, 'comment_body': ""Formalize the parameters docs for this function.  Say that 'nbrs' is keyed by neighbor to the edge weight as value."", 'comment_created': datetime.datetime(2021, 8, 11, 14, 22, 28, tzinfo=datetime.timezone.utc), 'commenter': 'dschult', 'type': 'User'}, {'comment_id': 686883071, 'comment_body': ""This use of `seed` is not needed because you set `seed=2` below.\r\n\r\nAnd you shouldn't actually need to import seed for this module (I think) because all the seed setting is done in the function calls."", 'comment_created': datetime.datetime(2021, 8, 11, 14, 24, 27, tzinfo=datetime.timezone.utc), 'commenter': 'dschult', 'type': 'User'}, {'comment_id': 686886581, 'comment_body': ""This might be a better test by not using `randint`, but instead use `enumerate` or some non-random way to generate the weights. That eliminates any possible intermittent test failures due to random results (which shouldn't happen here, but it's good to eliminate that source of debugging effort to make sure it isn't the part causing the errors).    With this and seed removed you can remove the `import` statement at the top of the module."", 'comment_created': datetime.datetime(2021, 8, 11, 14, 28, 9, tzinfo=datetime.timezone.utc), 'commenter': 'dschult', 'type': 'User'}, {'comment_id': 686889954, 'comment_body': 'Should we add to this ""note"" a short description of how node order is done in this implementation?', 'comment_created': datetime.datetime(2021, 8, 11, 14, 31, 36, tzinfo=datetime.timezone.utc), 'commenter': 'dschult', 'type': 'User'}, {'comment_id': 686891131, 'comment_body': 'Maybe state how the edge weights are determined for this new network?', 'comment_created': datetime.datetime(2021, 8, 11, 14, 32, 50, tzinfo=datetime.timezone.utc), 'commenter': 'dschult', 'type': 'User'}, {'comment_id': 686893143, 'comment_body': 'Add a ""See Also"" section with the `generate_dendogram` function here.  And then in `generate_dendogram` add a ""See Also"" section with the `louvain_communities` function listed there. ', 'comment_created': datetime.datetime(2021, 8, 11, 14, 35, 3, tzinfo=datetime.timezone.utc), 'commenter': 'dschult', 'type': 'User'}, {'comment_id': 686896066, 'comment_body': ""Maybe add a first paragraph description of what Louvain tries to do, with citation to the papers [1] and [2].\r\nA similar description (maybe the exact wording so readers know they've already read it) could go into `generate_dendogram`."", 'comment_created': datetime.datetime(2021, 8, 11, 14, 38, 4, tzinfo=datetime.timezone.utc), 'commenter': 'dschult', 'type': 'User'}, {'comment_id': 686898102, 'comment_body': 'Not needed?', 'comment_created': datetime.datetime(2021, 8, 11, 14, 40, 21, tzinfo=datetime.timezone.utc), 'commenter': 'dschult', 'type': 'User'}, {'comment_id': 687084494, 'comment_body': ""Is it suffice to say that the order is determined using networkx's `seed.shuffle`?"", 'comment_created': datetime.datetime(2021, 8, 11, 18, 43, 15, tzinfo=datetime.timezone.utc), 'commenter': 'z3y50n', 'type': 'User'}, {'comment_id': 687165045, 'comment_body': 'Yes -- though the word `seed` is local to this function, so maybe better to say `random.shuffle` or even leaving out the name of the function and just say:  ""... using a random shuffle.""', 'comment_created': datetime.datetime(2021, 8, 11, 20, 25, 38, tzinfo=datetime.timezone.utc), 'commenter': 'dschult', 'type': 'User'}, {'comment_id': 693476273, 'comment_body': 'Just some documentation nit picks here:\r\nCould you change this to `partition of a graph` instead of `partition of G`. ', 'comment_created': datetime.datetime(2021, 8, 22, 10, 0, 40, tzinfo=datetime.timezone.utc), 'commenter': 'MridulS', 'type': 'User'}, {'comment_id': 693476442, 'comment_body': ""This reference isn't referenced anywhere in the text. We should either add a link to it somewhere in the function doc above or remove it."", 'comment_created': datetime.datetime(2021, 8, 22, 10, 2, 4, tzinfo=datetime.timezone.utc), 'commenter': 'MridulS', 'type': 'User'}, {'comment_id': 693477915, 'comment_body': 'Could you also add the DOI links and the explicit URL for HAL archive.\r\n[1] https://doi.org/10.1088/1742-5468/2008/10/P10008\r\n[3] https://hal.archives-ouvertes.fr/hal-01231784\r\n\r\nPS: We should formalise referencing in our documentation.', 'comment_created': datetime.datetime(2021, 8, 22, 10, 14, 24, tzinfo=datetime.timezone.utc), 'commenter': 'MridulS', 'type': 'User'}, {'comment_id': 693478081, 'comment_body': ' https://doi.org/10.1088/1742-5468/2008/10/P10008', 'comment_created': datetime.datetime(2021, 8, 22, 10, 15, 50, tzinfo=datetime.timezone.utc), 'commenter': 'MridulS', 'type': 'User'}, {'comment_id': 693478960, 'comment_body': 'This note should probably live under \r\n```\r\n Notes\r\n -----\r\n```\r\nso sphinx picks this up properly. For an example look at https://networkx.org/documentation/stable/reference/algorithms/generated/networkx.algorithms.approximation.clique.large_clique_size.html?highlight=notes', 'comment_created': datetime.datetime(2021, 8, 22, 10, 23, 2, tzinfo=datetime.timezone.utc), 'commenter': 'MridulS', 'type': 'User'}]","[{'commit_sha': '5d1132a8e8b778efc64d46fcfa14f9f6a5e470fc', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '92ebf1815b8468b9a0c90a48e5bd364e5258ccf4', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca6165de5e8a96274ae66cbe870a3e6623e3a4b8', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '725d74d16e7546f518556de124ac94fac3b37455', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c89dcab58a6ce0983b1c5d8fe1d86224f572e895', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'caa337acf84b31c9e2358c6c8768c17d0a8b8299', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '98a60f73cec6a96e60c20d149aadb5fb606bf883', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c9eb9052e0b23fa05031f031a3685d0a2031c06', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7273f52cd87bc34399dedda2a7b83e578671e4f1', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c05e50ef0717965272b9961b5849f6bc9705f5d', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ae925629249f0c76a95d958e9752db382c0a79d', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '33dcefa75aea45b8d63bec6682ba5dab3f955362', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '33c31affe5b691a0862850d873601da81139f848', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1dbf678aee6f59a2bcf64d9f4e3c36b5013277e', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c916becaee4c7c15f1f67f1e1f47855e93574ba', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2e9287bc77f78bb3bc8d3246aa4d5d1ebbf785e9', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25dfa4ca5e52f673a41c7871a479c5243d3a01ca', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e4882ea05387edb7117ff1c73b55234c3923587', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83117afa7a24222f3a3deab7318774ebf8b7013d', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c38543beb0a5801691850d5c7027439c8d9aca5', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb079ff6bd2bfbb3964155de5cefe2cda7df4fb0', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e598b83e08b98b9449ef0c849a8e4cd72a6c9233', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '811b0cfad49ce262498835b81d0af32f9da100e1', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '461c945b2d9a4444fcb4e414d14fd2c80087044c', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3e1f1bfae0cce9f09c9059f7d00f94936073a88', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '58613ae3792fcda4a58689ba705299cfca9fe8a7', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f95421ac54d760c6c43e3f3b65937b40d5b5eb50', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66d75cabb4278fa6db5130f54e785a8892686e47', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05fda75bce3c1911d0dd62c9654664f238ea3305', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff770c469ac3a9842e4ee9f37704c97505e65df8', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca60d9766ae8df285e79c9b118c1b341542fdd80', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08ba559bab0910e212520b4d007d9edc2966bb0c', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd214428927772b420c9432cc20964d1759b40ad7', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a8fe50efe4526166eebf58bbfeca010efe62de7d', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6ec7bf36fb8c7576711b2558bc1fc4158b08241', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf2d956735e526607f9460821f407ac12f439fce', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd09bf685013349920dd04b837e12fa81067812d6', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4587692fae63533118899e2e76e6108f6da4cca4', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '883a57afc07f143fc81a38f53838905004cd1646', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cea98bebf55aa70c24599a7829f01ddbb00547b3', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2e66c447873583c3c1f21ccd7d9f4b8964483a3f', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c60b30727c94983f3582a8b9372a318ca8e5f3f0', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97716e42b0ba77c8543c0cb5446b084884a59284', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b6257d777c8143e770290778887edd9a74b205bd', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad5a126d862bcadd4ec4e305070d5936c747e5dd', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c82fa6aa974de7f254b53173603a7071582c27e', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '75ed5f65fe6345a546061004f3b81a3e45e8fa22', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '77b54413bad38bcde6f617b74193188389dbf82b', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9629af4cdc9757368cd44bea3365ea1fe04b6a2d', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '582ee3404f02130bc3656da3d9e3bc9b162bd45d', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8cd44523cfb86443a7cac4b9e21e850971c0f64f', 'committer_username': 'z3y50n', 'committer_name': 'Dimitrios Papageorgiou', 'committer_email': 'dim_papag@windowslive.com', 'commit_date': datetime.datetime(2017, 11, 1, 10, 45, 7, tzinfo=datetime.timezone.utc)}]",Dimitrios Papageorgiou,33282622,dim_papag@windowslive.com,User,,21,,7,13

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
890377,networkx,networkx/networkx,Python,3203,14638,280,742,7769,349,12,173,"[{'id': 968419766, 'number': 5753, 'closed': datetime.datetime(2022, 6, 16, 5, 9, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 15, 17, 2, 34, tzinfo=datetime.timezone.utc), 'time_taken': 43611.0, 'time_delta': '12:06:51', 'additions': 1, 'deletions': 19, 'state': 'closed'}, {'id': 968399676, 'number': 5744, 'closed': datetime.datetime(2022, 6, 15, 19, 17, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 15, 16, 38, 59, tzinfo=datetime.timezone.utc), 'time_taken': 9515.0, 'time_delta': '2:38:35', 'additions': 0, 'deletions': 18, 'state': 'closed'}, {'id': 968392512, 'number': 5741, 'closed': datetime.datetime(2022, 6, 15, 19, 6, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 15, 16, 30, 57, tzinfo=datetime.timezone.utc), 'time_taken': 9344.0, 'time_delta': '2:35:44', 'additions': 1, 'deletions': 16, 'state': 'closed'}, {'id': 961974393, 'number': 5713, 'closed': datetime.datetime(2022, 7, 13, 17, 6, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 8, 17, 51, 40, tzinfo=datetime.timezone.utc), 'time_taken': 3021301.0, 'time_delta': '34 days, 23:15:01', 'additions': 82, 'deletions': 7, 'state': 'closed'}, {'id': 834348760, 'number': 5287, 'closed': datetime.datetime(2022, 1, 29, 3, 1, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 1, 28, 11, 20, 36, tzinfo=datetime.timezone.utc), 'time_taken': 56477.0, 'time_delta': '15:41:17', 'additions': 7, 'deletions': 0, 'state': 'closed'}, {'id': 766306368, 'number': 5154, 'closed': datetime.datetime(2021, 10, 28, 0, 47, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 26, 10, 28, 56, tzinfo=datetime.timezone.utc), 'time_taken': 137926.0, 'time_delta': '1 day, 14:18:46', 'additions': 37, 'deletions': 4, 'state': 'closed'}, {'id': 750018021, 'number': 5114, 'closed': datetime.datetime(2021, 10, 6, 10, 31, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 5, 15, 58, tzinfo=datetime.timezone.utc), 'time_taken': 66794.0, 'time_delta': '18:33:14', 'additions': 15, 'deletions': 0, 'state': 'closed'}, {'id': 740775237, 'number': 5099, 'closed': datetime.datetime(2021, 10, 18, 15, 47, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 22, 19, 13, 44, tzinfo=datetime.timezone.utc), 'time_taken': 2234013.0, 'time_delta': '25 days, 20:33:33', 'additions': 77, 'deletions': 4, 'state': 'closed'}, {'id': 679740871, 'number': 4939, 'closed': datetime.datetime(2021, 6, 30, 5, 50, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 29, 9, 0, 48, tzinfo=datetime.timezone.utc), 'time_taken': 74973.0, 'time_delta': '20:49:33', 'additions': 11, 'deletions': 9, 'state': 'closed'}, {'id': 677742494, 'number': 4929, 'closed': datetime.datetime(2021, 8, 23, 23, 43, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 25, 8, 46, 13, tzinfo=datetime.timezone.utc), 'time_taken': 5151435.0, 'time_delta': '59 days, 14:57:15', 'additions': 449, 'deletions': 0, 'state': 'closed'}, {'id': 585554165, 'number': 4653, 'closed': datetime.datetime(2021, 3, 9, 5, 19, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 5, 12, 11, 45, tzinfo=datetime.timezone.utc), 'time_taken': 320881.0, 'time_delta': '3 days, 17:08:01', 'additions': 35, 'deletions': 61, 'state': 'closed'}]"
