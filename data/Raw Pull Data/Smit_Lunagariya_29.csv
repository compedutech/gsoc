pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
382104654,Added sampling methods of crv_types,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->
Added sampling methods of continuous random variables
#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->
Closes #17057 
Related to #19061
#### Brief description of what is fixed or changed


#### Other comments


#### Release Notes

<!-- Write the release notes for this release below. See
https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more information
on how to write release notes. The bot will check your release notes
automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
* stats
   * Added sampling methods for continuous variables
   * Added `library` option in `sample`
   *  `sample` returns an iterator object since version 1.7
<!-- END RELEASE NOTES -->",True,18754,https://api.github.com/repos/sympy/sympy/pulls/18754,https://github.com/sympy/sympy/pull/18754,closed,465,272,10,41,50,77,2,0,"[{'name': 'stats'}, {'name': 'GSoC'}]",2020-03-01 22:38:29+00:00,2020-05-07 17:22:25+00:00,5769836.0,"66 days, 18:43:56","[{'comment_id': 387550639, 'comment_body': 'Why not `hasattr`?', 'comment_created': datetime.datetime(2020, 3, 4, 9, 43, 12, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 387589502, 'comment_body': 'Yes, `hasattr` would be good to use here. Thanks!', 'comment_created': datetime.datetime(2020, 3, 4, 10, 52, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}, {'comment_id': 388228652, 'comment_body': 'What we if we want to add more libraries in future, like tensorflow? \r\nCan we generalise this using a loop and storing the library names in a list? I hope you are getting my point. ', 'comment_created': datetime.datetime(2020, 3, 5, 11, 14, 24, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 388229952, 'comment_body': 'Similarly more methods will have to be added for new libraries. Can we generalise this too? ', 'comment_created': datetime.datetime(2020, 3, 5, 11, 17, 3, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 388561597, 'comment_body': 'I think you mean that will this be able to extend the `if, elif` ladder by adding such libraries to this ladder and its corresponding `_sample_library` in its class. According to the current API design that if someone needs to add sampling methods to this from any library, add the library to the ladder, then corresponding method to the class and will work.', 'comment_created': datetime.datetime(2020, 3, 5, 20, 57, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}, {'comment_id': 388563713, 'comment_body': 'I think we can generalize this as this becomes easy to continue according to current API design in the future. But still, I will look into it in more detail if I could come up with some other better way.', 'comment_created': datetime.datetime(2020, 3, 5, 21, 2, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}, {'comment_id': 389308128, 'comment_body': ""```\r\n        if hasattr(self, '_sample_python'):\r\n            samp = self._sample_python(size)\r\n            return samp if size != 1 else samp[0]\r\n\r\n        libraries = ['numpy', 'scipy', 'pymc3']\r\n        for lib in libraries:\r\n            if hasattr(self, '_sample_' + lib ) and import_module(lib):\r\n                samp_method = getattr(self, '_sample_' + lib)\r\n                samp = samp_method(size)\r\n                return samp if size != 1 else samp[0]\r\n```\r\nDo you mean this way? This could also be used. As when in future we add more libraries, we just need to add the library name in list and its corresponding method in the class. Does this sound good? "", 'comment_created': datetime.datetime(2020, 3, 7, 20, 0, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}, {'comment_id': 389351076, 'comment_body': 'Yeah, this kind of generalisation will be better.', 'comment_created': datetime.datetime(2020, 3, 8, 9, 21, 56, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 389351402, 'comment_body': 'Okay, then I will change accordingly', 'comment_created': datetime.datetime(2020, 3, 8, 9, 26, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}, {'comment_id': 392600517, 'comment_body': 'This will skip all the tests below as well', 'comment_created': datetime.datetime(2020, 3, 14, 16, 27, 11, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 392600675, 'comment_body': 'So should I break this into three different tests?', 'comment_created': datetime.datetime(2020, 3, 14, 16, 29, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}, {'comment_id': 396064292, 'comment_body': 'How is it supposed to operate?\r\nI think that sympy functions should be lambdified before passing to scipy.', 'comment_created': datetime.datetime(2020, 3, 22, 7, 47, 56, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 396064744, 'comment_body': 'I think that it can get ambiguous which library it is using for sampling.\r\nI see it already return different types of arrays.\r\n\r\nSo I think that it should better be specified as an option and unsupport stuff that are not available for specific libraries, than trying all the libraries to get it succeed.', 'comment_created': datetime.datetime(2020, 3, 22, 7, 53, 59, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 396102540, 'comment_body': ""In my opinion, at the user end, we don't need to specify which library is used to sample. Also, for coverage purposes, we can do by directly calling the concerned method from class `SampleExternal`. IMO, We should not go for unsupported kind of stuff, as providing such an option, also will lead to unnecessary raising errors, instead, I suggest just return the sample without any specification of the library. To maintain the uniformity, I will type-cast each of the samples(in case more than one sample is required) returned by different libraries to `list`. Please share your thoughts @czgdp1807."", 'comment_created': datetime.datetime(2020, 3, 22, 14, 54, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}, {'comment_id': 396165418, 'comment_body': 'Can you use Dummy in place of symbol?', 'comment_created': datetime.datetime(2020, 3, 23, 0, 20, 45, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 396205761, 'comment_body': 'Yes, I need to change this to Dummy.', 'comment_created': datetime.datetime(2020, 3, 23, 4, 16, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}, {'comment_id': 399205785, 'comment_body': 'I think, there should be an option provided to the user for using libraries. In this way user will be knowing the type of the output they will be getting. We should keep the public API unambiguous. Type casting is not recommended when we can give an option and make the things easy.', 'comment_created': datetime.datetime(2020, 3, 27, 11, 41, 37, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 399207170, 'comment_body': ""```suggestion\r\n    def sample(self, size=(), library=''):\r\n```"", 'comment_created': datetime.datetime(2020, 3, 27, 11, 44, 19, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 399207562, 'comment_body': ""```suggestion\r\n        if import_module(library):\r\n            samps = getattr(SampleExternal, '_sample_' + lib)(self, size)\r\n            if samps is not None:\r\n                return list(samps) if size != 1 else samps[0]\r\n\r\n    icdf = self._inverse_cdf_expression()\r\n```"", 'comment_created': datetime.datetime(2020, 3, 27, 11, 45, 9, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 399212603, 'comment_body': 'Okay. I will go with the suggestion. As there is a change in the public API of the stats module, I will initially work for the continuous RV.\r\n* Firstly, it will require addition of an argument in each function call of `sample`.\r\n* I will be keeping this as`None` by default for all the calls not used in Continuous RV.\r\nAfter this gets finalized for Continuous RV, I will open a new PR for the same changes in Finite and Discrete RV, and will make the actual use of lib argument in their function calls also, so that the diff size remains under some bound and becomes easy to be reviewed in parts.\r\nDoes this plan look fine? \r\n', 'comment_created': datetime.datetime(2020, 3, 27, 11, 55, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}, {'comment_id': 399215464, 'comment_body': 'What used to happen earlier before this sampling framework was introduced?\r\nMay be to avoid change in the public API, library can be passed as keyword argument and if nothing is given as library then inbuilt python sampling features can be used.', 'comment_created': datetime.datetime(2020, 3, 27, 12, 1, 36, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 399217511, 'comment_body': 'Yes, I meant the same. There was no library argument before, so, by default will be python. But, I wanted to ask that firstly, should I implement this argument usage for Continuous RV, and then make this use of argument for Finite and Discrete?', 'comment_created': datetime.datetime(2020, 3, 27, 12, 5, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}, {'comment_id': 399219296, 'comment_body': 'This PR is concerned with CRV, so first we should try out the approach with CRVs and then we can proceed with  FRV and DRV. ', 'comment_created': datetime.datetime(2020, 3, 27, 12, 9, 13, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 399222300, 'comment_body': 'Thanks! I will make necessary changes.', 'comment_created': datetime.datetime(2020, 3, 27, 12, 15, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}, {'comment_id': 399668458, 'comment_body': '```suggestion\r\n    return next(sample_iter(expr, condition, size=size, library=library,\r\n```', 'comment_created': datetime.datetime(2020, 3, 28, 14, 29, 9, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 399682593, 'comment_body': 'I see you have added `size` argument to some functions.\r\nBut does the array shape make sense for mean, variance if numsamples is already used?', 'comment_created': datetime.datetime(2020, 3, 28, 16, 41, 41, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 399748395, 'comment_body': 'The actual problem, I see is that is `size` and `numsamples` mean the same, as before, `numsamples` was not provided in public API of `sample`, and so, `size` was introduced. So, we need to take a decision to use either `size` or `numsamples`. We need to raise Deprecation warning in either of the case.', 'comment_created': datetime.datetime(2020, 3, 29, 5, 34, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}, {'comment_id': 399748838, 'comment_body': 'IMO, we should remove `size`, and use `numsamples` as it was been there for a long period of time.', 'comment_created': datetime.datetime(2020, 3, 29, 5, 40, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}, {'comment_id': 399751143, 'comment_body': ""I observed many failing things:\r\n```\r\n>>> from sympy.stats import *\r\n>>> X=Normal('X',1,2)\r\n>>> sample(X)     #works fine\r\n-0.395115576398039\r\n\r\n>>> sample(X, size=3)     # works fine\r\n[3.04853254256568, -5.15781049701721, -0.916547668739276]\r\n>>> Y=Normal('Y',3,4)\r\n>>> sample(X+Y, size=3)   # failed : expected 3\r\n2.94035736693013\r\n\r\n>>> sample(X+Y, numsamples=3)   # failed : expected 3\r\n5.91353130029414\r\n>>> # This can be solved by returning list of iterator object instead of next\r\n\r\n>>> # adding numsamples as argument in sample function\r\n>>> sample(X+Y, numsamples=3)   # works fine\r\n[2.60480735236754, -2.59005952144665, 1.87621810047909]\r\n\r\n>>> sample(X+Y, size=3)   # failed : expected 3\r\n[1.22518985609606]\r\n\r\n>>> sample(X+Y, numsamples=3, library='scipy') # fails : expected to produce array output\r\n[1.18343224436589, 5.09387064093793, 5.55350069910508]\r\n\r\n>>> sample(X, numsamples=3, library='scipy') # fails : expected to produce array output\r\n[3.9671541494809617, -2.810799332922929, -1.0880356350959333]\r\n\r\n>>> sample(X, size=3, library='scipy')  # failed : expected array instead of list\r\n[array([ 2.02042956, -0.71548653,  2.01273328])]\r\n```\r\n"", 'comment_created': datetime.datetime(2020, 3, 29, 6, 6, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}, {'comment_id': 399975304, 'comment_body': 'Looks quite inconsistent. What is the difference between, `numsamples` and `size`?', 'comment_created': datetime.datetime(2020, 3, 30, 7, 21, 22, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 399975663, 'comment_body': 'What is used in public API, `size` or `numsamples`?', 'comment_created': datetime.datetime(2020, 3, 30, 7, 22, 5, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 399976807, 'comment_body': ""```suggestion\r\n        libraries = ['python', 'scipy', 'numpy', 'pymc3']\r\n```"", 'comment_created': datetime.datetime(2020, 3, 30, 7, 24, 20, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 399977093, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2020, 3, 30, 7, 24, 53, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 399977340, 'comment_body': '```suggestion\r\n            raise NotImplementedError(""Sampling from %s is not supported yet.""\r\n```', 'comment_created': datetime.datetime(2020, 3, 30, 7, 25, 23, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 399978826, 'comment_body': ""Actually, `numsamples` has previously used for signifying total number of samples, but the user cannot provide it while calling` sample()`(as shown 4th example which doesn't affect currenlty as is overwritten), therefore `size` was introduced for the same use, but now I see that `size` and `numsamples` both mean the same."", 'comment_created': datetime.datetime(2020, 3, 30, 7, 28, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}, {'comment_id': 399979941, 'comment_body': ""IMO,` 'python' `needs to be handled differently. Because it has an alternative if `SampleExternal` fails for `'python'`"", 'comment_created': datetime.datetime(2020, 3, 30, 7, 30, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}, {'comment_id': 399980289, 'comment_body': '```suggestion\r\n        if not import_module(library):\r\n            raise ValueError(""Failed to import %s"" % library)\r\n\r\n        samps = getattr(SampleExternal, \'_sample_\' + library)(self, size)\r\n        if samps is not None:\r\n             return samps if size != 1 else samps[0]\r\n        raise NotImplementedError(\r\n                    ""Sampling for %s is not currently implemented from %s""\r\n                    % (self.__class__.__name__, library)\r\n                    )\r\n```', 'comment_created': datetime.datetime(2020, 3, 30, 7, 31, 1, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 399980554, 'comment_body': '```suggestion\r\n```\r\nRemove `else` as well.', 'comment_created': datetime.datetime(2020, 3, 30, 7, 31, 32, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 399981432, 'comment_body': 'So, I suggest removing `size` and use `numsamples` as it will maintain unifromity across all other samplings in `rv.py` and avoid confusion', 'comment_created': datetime.datetime(2020, 3, 30, 7, 33, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}, {'comment_id': 399985205, 'comment_body': 'Why are we using that alternative? Can that alternative be shifted to `_sample_python` so that final result is not `None` for `_sample_python` whatever be the case.', 'comment_created': datetime.datetime(2020, 3, 30, 7, 40, 45, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 399987709, 'comment_body': 'So, now `size` is what public API has, so `numsamples` should be removed/renamed to `size`.', 'comment_created': datetime.datetime(2020, 3, 30, 7, 45, 9, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 399991964, 'comment_body': 'Some functions like `sampling_P`, `sampling_density`, etc. have `numspaces`. Except, `sample` all other have `numsamples`. ', 'comment_created': datetime.datetime(2020, 3, 30, 7, 53, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}, {'comment_id': 401525534, 'comment_body': 'https://github.com/sympy/sympy/blob/63ab534ebc9bb8fa47ca80aea5a1b0eca743fb9e/sympy/stats/rv.py#L1020-L1040\r\nIn `sample` we have `size` as public API, while returning `numsaples` is by default kept as 1.\r\n\r\nThe following samplings have `size` and `numsamples` both as the argument.\r\nhttps://github.com/sympy/sympy/blob/63ab534ebc9bb8fa47ca80aea5a1b0eca743fb9e/sympy/stats/rv.py#L1043\r\n\r\nhttps://github.com/sympy/sympy/blob/63ab534ebc9bb8fa47ca80aea5a1b0eca743fb9e/sympy/stats/rv.py#L1130\r\n\r\nhttps://github.com/sympy/sympy/blob/63ab534ebc9bb8fa47ca80aea5a1b0eca743fb9e/sympy/stats/rv.py#L1177\r\n\r\n\r\nThe following samplings have only `numsamples` as argument.\r\nhttps://github.com/sympy/sympy/blob/63ab534ebc9bb8fa47ca80aea5a1b0eca743fb9e/sympy/stats/rv.py#L1207\r\n\r\nhttps://github.com/sympy/sympy/blob/63ab534ebc9bb8fa47ca80aea5a1b0eca743fb9e/sympy/stats/rv.py#L1243\r\n\r\nhttps://github.com/sympy/sympy/blob/63ab534ebc9bb8fa47ca80aea5a1b0eca743fb9e/sympy/stats/rv.py#L1265', 'comment_created': datetime.datetime(2020, 4, 1, 10, 50, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}, {'comment_id': 401795623, 'comment_body': '@czgdp1807 Please share your thoughts on removing which of this argument, to make it uniform throughout all these functions. I will come up with the change accordingly.', 'comment_created': datetime.datetime(2020, 4, 1, 17, 43, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}, {'comment_id': 402448989, 'comment_body': 'What happens if we just let the sampling happen by using default values of `numsamples` and `size` in the above functions? \r\nThe removal should be done in a different PR. Can you open an issue for it as it is concerned with the changes in public API.', 'comment_created': datetime.datetime(2020, 4, 2, 16, 31, 44, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 404996744, 'comment_body': ""This fails after adding `'python'` in list, So handled out of the list\r\n```python\r\n>>> from sympy.external import import_module\r\n>>> print(import_module('python'))\r\nNone\r\n```"", 'comment_created': datetime.datetime(2020, 4, 7, 17, 45, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}, {'comment_id': 406619043, 'comment_body': 'If I am not wrong, this will always be `True` whether, `gd` is `True`, `False` or `None`.', 'comment_created': datetime.datetime(2020, 4, 10, 6, 15, 44, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 406619193, 'comment_body': '```suggestion\r\n                if gd is not True or gd is not False:\r\n```\r\nIf I am wrong, then this can be done.', 'comment_created': datetime.datetime(2020, 4, 10, 6, 16, 29, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 406619350, 'comment_body': 'Ohh, That was done while checking the error path, I will change that.', 'comment_created': datetime.datetime(2020, 4, 10, 6, 17, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}, {'comment_id': 407180822, 'comment_body': 'How to resolve this error?\r\n```python\r\n>>> E(Sum(1/z**Y, (z, 1, oo)), Y > 2, numsamples=3)\r\nTraceback (most recent call last):\r\n  File ""<stdin>"", line 1, in <module>\r\n  File ""/home/smit/Smit Lunagariya/sympy/sympy/stats/rv.py"", line 723, in expectation\r\n    return sampling_E(expr, condition, numsamples=numsamples, evalf=evalf)\r\n  File ""/home/smit/Smit Lunagariya/sympy/sympy/stats/rv.py"", line 1235, in sampling_E\r\n    numsamples=numsamples, **kwargs))\r\n  File ""/home/smit/Smit Lunagariya/sympy/sympy/stats/rv.py"", line 1184, in return_generator\r\n    yield fn(*args)\r\n  File ""<lambdifygenerated-1>"", line 2, in _lambdifygenerated\r\nTypeError: \'float\' object cannot be interpreted as an integer\r\n```', 'comment_created': datetime.datetime(2020, 4, 12, 10, 51, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}, {'comment_id': 408066510, 'comment_body': 'May be a problem with lambdify?', 'comment_created': datetime.datetime(2020, 4, 14, 11, 33, 27, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 408206948, 'comment_body': 'Yes, its a problem with lambdify. Other than it, does it look good?', 'comment_created': datetime.datetime(2020, 4, 14, 15, 0, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}, {'comment_id': 408633860, 'comment_body': 'Have you tried a simpler test? I think you are testing, `sampling_E` here.', 'comment_created': datetime.datetime(2020, 4, 15, 7, 25, 20, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 410917605, 'comment_body': ""Yes, It works good\r\n```python\r\n>>> X = Normal('X', 1, 2)\r\n>>> Y = Gamma('Y', 2, 3)\r\n>>> E(X**2 + Y, numsamples=5)\r\n21.3612416190815\r\n>>> E(X**2 + Y**2, numsamples=5)\r\n63.8733491804054\r\n>>> E(X + Y**2, numsamples=5)\r\n57.9285966139211\r\n>>> E((X + Y)**2, numsamples=5)\r\n86.3801421725767\r\n>>> E((X + Y)**2, numsamples=50)\r\n70.0426716469986\r\n>>> E((X + Y)**2, numsamples=150)\r\n70.4561348021389\r\n>>> E((X + Y)**2, numsamples=1500)\r\n71.5838668352223\r\n```"", 'comment_created': datetime.datetime(2020, 4, 19, 14, 27, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}, {'comment_id': 411156716, 'comment_body': 'You can use the above tests.\r\nCan you just add that test(`E(Sum(1/z**Y, (z, 1, oo)), Y > 2, numsamples=3)`) under allowed failure(use @XFAIL) and fix it in a new a PR later on.', 'comment_created': datetime.datetime(2020, 4, 20, 7, 32, 23, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 414996766, 'comment_body': 'Probably the failure of https://travis-ci.org/github/sympy/sympy/jobs/677325425 is due to this change. Have you tried building the docs locally.\r\nping @sylee957 Can you please help regarding the SPHINX failure? Thanks.', 'comment_created': datetime.datetime(2020, 4, 25, 6, 39, 44, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 414998896, 'comment_body': 'I think that the HTML build succeeded but have only found the abnormality in doctr. So it can be temporary.\r\nBut I think that author needs to resolve the merge conflicts to see if it works for an another trial.', 'comment_created': datetime.datetime(2020, 4, 25, 6, 53, 18, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 416347202, 'comment_body': ""Shift this to the entry point of the function. No point in creating objects if the module isn't imported."", 'comment_created': datetime.datetime(2020, 4, 28, 5, 56, 42, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 418983333, 'comment_body': 'Add returns as well here.', 'comment_created': datetime.datetime(2020, 5, 2, 17, 13, 52, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 418983527, 'comment_body': 'This appears to be a change in public API. Please go through https://github.com/sympy/sympy/wiki/Deprecating-policy and a suitable warning here.', 'comment_created': datetime.datetime(2020, 5, 2, 17, 15, 36, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 420561180, 'comment_body': 'We have deleted the functions `sample_iter_lambdify` and `sample_iter_subs`. Also, in `sample` and `sample_iter`, there is a change in the return type. So I think I should add warnings when someone tries to access `sample_iter_lambdify` and `sample_iter_subs`. Rest is only the return type change?', 'comment_created': datetime.datetime(2020, 5, 6, 6, 0, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}, {'comment_id': 420950668, 'comment_body': '> We have deleted the functions `sample_iter_lambdify` and `sample_iter_subs`\r\n\r\nWhy? Were these functions available in `sympy.stats` namespace?\r\n@Upabjojr Any thoughts on removing these two functions?\r\n\r\n> Rest is only the return type change?\r\n\r\nMay be, we should warning for these too as the output of public functions are changed.', 'comment_created': datetime.datetime(2020, 5, 6, 17, 5, 58, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 420954453, 'comment_body': ""My opinion matches with the following from https://github.com/sympy/sympy/issues/19061#issuecomment-608267737\r\n\r\n> However, I think that this doesn't need much deprecation if it works just fine, but there don't have to be any addition for it.\r\n\r\nWe can keep both the functions and warnings can be added for the changed returned types wherever the it is needed."", 'comment_created': datetime.datetime(2020, 5, 6, 17, 11, 56, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 420956024, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2020, 5, 6, 17, 14, 19, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 420956238, 'comment_body': 'See my suggestions below.', 'comment_created': datetime.datetime(2020, 5, 6, 17, 14, 34, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 420956603, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2020, 5, 6, 17, 15, 6, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 420960025, 'comment_body': 'I see always an iterator object is returned, so probably a warning can be added for the same.', 'comment_created': datetime.datetime(2020, 5, 6, 17, 20, 27, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 420963766, 'comment_body': 'Or adding it in `sample_iter` would be a better idea because every function is using it to generate results, so warning would be raised on any call to it.', 'comment_created': datetime.datetime(2020, 5, 6, 17, 26, 19, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 420984538, 'comment_body': 'We need to add a warning of a return type change in only `sample` as others returned iterator object in current master too.', 'comment_created': datetime.datetime(2020, 5, 6, 17, 58, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}, {'comment_id': 420990361, 'comment_body': 'Should we add something like this?\r\n```python\r\n>>> from sympy.stats import *\r\n>>> X = Normal(\'X\',1, 2)\r\n>>> itr = sample(X)\r\n/home/smit/Smitlunagariya/sympy/sympy/stats/rv.py:1074: UserWarning: The return type of sample has been changed to return an iterator object.\r\nFor more information see https://github.com/sympy/sympy/issues/19061\r\n  warnings.warn(""The return type of sample has been changed to return an ""\r\n>>> next(itr)\r\narray([1.34687082])\r\n```', 'comment_created': datetime.datetime(2020, 5, 6, 18, 7, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}, {'comment_id': 420995398, 'comment_body': ""> Why? Were these functions available in `sympy.stats` namespace?\r\n\r\nNo, there were not present in `sympy.stats` namespace.\r\nAlso, if they are not used anywhere, and `sample_iter`, now is capable of handling the need using `lambdify`( which was previously `sample_iter_lambdify`) and `sample_iter_subs` is too slow and doesn't follow the discussions in #14261. So, IMHO we should remove these two functions if not now then in further versions."", 'comment_created': datetime.datetime(2020, 5, 6, 18, 15, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}, {'comment_id': 421015572, 'comment_body': 'Looks good. ', 'comment_created': datetime.datetime(2020, 5, 6, 18, 49, 18, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 421016575, 'comment_body': '`sample returns an iterator object since version 1.7` would be better though.', 'comment_created': datetime.datetime(2020, 5, 6, 18, 50, 57, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 421018299, 'comment_body': 'Update the release notes entry as well before merging about this change.', 'comment_created': datetime.datetime(2020, 5, 6, 18, 53, 36, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 421228357, 'comment_body': 'According to the discussions, this looks good to merge now as:\r\n* we have added warnings of change in return type.\r\n* The functions `sample_iter_subs` and `sample_iter_lambdify` are present currently, but I suggest removing them in further versions, as they are of no use now. If you agree with the same then I will open an issue for the removal of them in future', 'comment_created': datetime.datetime(2020, 5, 7, 4, 13, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}, {'comment_id': 421304256, 'comment_body': ""> If you agree with the same then I will open an issue for the removal of them in future\r\n\r\nThat's better. We have a lot of time for `1.7`."", 'comment_created': datetime.datetime(2020, 5, 7, 7, 44, 59, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 422680914, 'comment_body': 'What is the purpose of substituting `()` with `(1,)` or `1` ? The tuple notation should represent the dimensions of an N-dimensional array you want to be returned.', 'comment_created': datetime.datetime(2020, 5, 10, 18, 22, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}]","[{'commit_sha': '6f7b5698b3ae3163e2b36a26fb38a7d06d55abc3', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de9c0d7a590d43263ab9297e7ee1b4eef16d2d17', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '75e24d4067e9af02db280a6ffdbc3da3795134d0', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9059eedea6f60548b1ed1c830b3393fd635c63bb', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b5a955ddc7b740f906cfd846cff7a1bcd70d473', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f78580788147cce253c0ca586163796ae19cc6f', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5bcec24c9f46516514ff03480ccb9dcddb574588', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa53e11b2a80627f44a3495cbeb88131cd2d761b', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '41c8eadcfe80b58e96dfd175952bee8d03ca6840', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd739ee1103a9125961b1d0dc709ce9a8bb3ab4b7', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f2c39f526c5baf736efbd77a24fc89c8edce465', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd026e09480fb9fd64cc3351dc58ac807002726c', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f53056bc8408616badbb427bd97472798e14c31d', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca36e49f3b7e03c2413e5316fb46fa2f4e207d7c', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2cfc8c59968421037433453eb56a7991fcba18f5', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4821beaff45ae223b2094fc3ef56a206dabae5b9', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f910a9af141a33e9c2e2edef3802b1089160286', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '045d36be0d15db86f676ce4d7a849b3289ae5f63', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93529229001445c7eedfe21f4b2aebdf4ecbc7c7', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66ba73f3516a9cd3b50669f6079f471212fb29d9', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4bb85a5baa4dd41def71e99e595364bde12f98ab', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c82d53fb3ce8ce715da996910c6045b2cb0f82d', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1557dd706bb2e8baccde2db347cbfb338733e8f', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c60b4c838bd32baf09c99180acf329db5fbab14d', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61481c630f19ac74d2376ab59ba60bcd946d9188', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2779c4bc99177c7c8c1063b8e94a892d4291274', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4888534471b7d1eaa6c10a8d3eb403eac5c0af6d', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea7a0408f0416db45c7e5c16345e804e633fc222', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a3a12f67badb55718fd10ba47aa41815a8399be', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c48592c8b26707a1c408f6928e63461cb7b038f', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2415dff79293819982c8c32f71bf30c5e286e93f', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '28c7a483ee192dfc60ea184468d77cf369f4e33f', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '888a9a613b938ec33a2a74f608d0c62c3bb6dc62', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '647f6d2614cfc0df52d757cc233912ebd39c7461', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5149cc68346173d61e5c35c6df4c37a57134b535', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d0c0575af6a2dd544401c4e32d3358f1362ed0d', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0340d7d26d23feb6829cdcf41f78b9b3fe0a9e3a', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd54d4860c710c1da7e7fa864db0d4ae90b969895', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c9ede553f839ab39de7dd27da94873db33ca7dcd', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14a5441f35ba00070bd292aac6874efdffaba6a9', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5370976c04f5858b0f1c98f018f1bd8968e2868a', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}]",Smit Lunagariya,55887635,smitlunagariya.mat18@itbhu.ac.in,User,,50,,37,95
415044986,[GSoC] Added Lomax and Bounded pareto distribution,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->
Added lomax and bounded pareto distribution(CRV types)
#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->


#### Brief description of what is fixed or changed
The PR aims at adding two continuous distributions under `crv_types.py`. For adding this distribution, we just need to add the `pdf`, `set`, and `check` to validate the parameters passed as the member functions of the classes. The `rv` is used to map random variables to these classes.
Therefore, to check the `pdf`, and `cdf` of the added RVs, please verify them from,
[https://en.wikipedia.org/wiki/Pareto_distribution#Bounded_Pareto_distribution](https://en.wikipedia.org/wiki/Pareto_distribution#Bounded_Pareto_distribution),
[https://en.wikipedia.org/wiki/Lomax_distribution](https://en.wikipedia.org/wiki/Lomax_distribution)


#### Other comments


#### Release Notes

<!-- Write the release notes for this release below. See
https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more information
on how to write release notes. The bot will check your release notes
automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
* stats
   * Added Lomax and Bounded pareto distribution
<!-- END RELEASE NOTES -->

ping @czgdp1807 @jmig5776 ",True,19273,https://api.github.com/repos/sympy/sympy/pulls/19273,https://github.com/sympy/sympy/pull/19273,closed,190,6,5,2,8,6,2,0,"[{'name': 'stats'}, {'name': 'GSoC'}]",2020-05-08 04:54:31+00:00,2020-05-09 13:47:29+00:00,118378.0,"1 day, 8:52:58","[{'comment_id': 422497890, 'comment_body': 'A minor typo but can be ignored. ', 'comment_created': datetime.datetime(2020, 5, 9, 13, 47, 4, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 422546205, 'comment_body': ""@Smit-create Can you correct this typo because I don't think we should compromise with code quality here."", 'comment_created': datetime.datetime(2020, 5, 9, 21, 6, 47, tzinfo=datetime.timezone.utc), 'commenter': 'jmig5776', 'type': 'User'}, {'comment_id': 422607902, 'comment_body': 'typo of using `1` intead of `S.One`?', 'comment_created': datetime.datetime(2020, 5, 10, 8, 17, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}, {'comment_id': 425802347, 'comment_body': 'typo of `lamba`->`lamda`', 'comment_created': datetime.datetime(2020, 5, 15, 13, 29, 19, tzinfo=datetime.timezone.utc), 'commenter': 'jmig5776', 'type': 'User'}, {'comment_id': 425807229, 'comment_body': 'Oops, will change that in my next PR for sure. Thanks!!', 'comment_created': datetime.datetime(2020, 5, 15, 13, 37, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}, {'comment_id': 425830885, 'comment_body': 'Cool!!', 'comment_created': datetime.datetime(2020, 5, 15, 14, 14, 11, tzinfo=datetime.timezone.utc), 'commenter': 'jmig5776', 'type': 'User'}]","[{'commit_sha': 'a28f50b9e7bbc501f9dedd142491654b2e0d439d', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6fd195a561f47263827e5b23827ef26c913d6997', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}]",Smit Lunagariya,55887635,smitlunagariya.mat18@itbhu.ac.in,User,,50,,37,95
416478080,[GSoC] Rename doit to expand in symbolic_probability.py,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->
Rename doit to expand in symbolic_probability.py
#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->
Related to discussions in #19267 

#### Brief description of what is fixed or changed
Following the discussions and the documentation, the current `doit` is performing the `expand` and hence rename it to `expand`.

#### Other comments


#### Release Notes

<!-- Write the release notes for this release below. See
https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more information
on how to write release notes. The bot will check your release notes
automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
* stats
   * `expand` added in `sympy.stats.symbolic_rv` API.
<!-- END RELEASE NOTES -->
ping @czgdp1807 @Upabjojr @jmig5776 ",True,19295,https://api.github.com/repos/sympy/sympy/pulls/19295,https://github.com/sympy/sympy/pull/19295,closed,43,43,3,2,6,0,2,0,"[{'name': 'stats'}, {'name': 'GSoC'}]",2020-05-12 04:32:10+00:00,2020-05-15 11:04:04+00:00,282714.0,"3 days, 6:31:54",[],"[{'commit_sha': '30fa81aaab4288b1472c9c617cbafbda06c2d3ae', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '80993cd6601bb374b7ff1796c5def2f03cc1cbcb', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}]",Smit Lunagariya,55887635,smitlunagariya.mat18@itbhu.ac.in,User,,50,,37,95
417143245,[GSoC] Added `is_random` to check random expressions of stats,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->
Added `is_random` function to check if expression contains random variables.
#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->
Fixes #12283
References from #19299 

#### Brief description of what is fixed or changed
* Added a function `is_random` to check if the expression contains random variables in it.
For example:
```python
>>> from sympy.stats.rv import is_random
>>> from sympy.stats import Normal, BernoulliProcess
>>> from sympy.abc import x
>>> X = Normal('X',1,2)
>>> is_random(X)
True
>>> is_random(X>3)
True
>>> is_random(x>3)
False
>>> is_random(x)
False
>>> Y = BernoulliProcess('Y',0.3)
>>> is_random(Y[2])
True
```
#### Other comments


#### Release Notes

<!-- Write the release notes for this release below. See
https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more information
on how to write release notes. The bot will check your release notes
automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
* stats
   * Added `is_random` in `sympy.stats.rv` to check if expression contains random variables
<!-- END RELEASE NOTES -->
ping @czgdp1807 @Upabjojr @jmig5776 ",True,19304,https://api.github.com/repos/sympy/sympy/pulls/19304,https://github.com/sympy/sympy/pull/19304,closed,136,36,11,8,7,17,2,0,"[{'name': 'stats'}, {'name': 'GSoC'}]",2020-05-13 06:19:30+00:00,2020-05-20 21:31:18+00:00,659508.0,"7 days, 15:11:48","[{'comment_id': 424406537, 'comment_body': 'So, you are checking if the pspace is independent or not?', 'comment_created': datetime.datetime(2020, 5, 13, 12, 43, 55, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 424413295, 'comment_body': ""Here, dummy random variables, which don't have Probability space are mapped to `PSpace()` which does not have methods compute `E`, `P`, `variance`, and `covariance`, are kept in view. So, for them, we are returning objects.\r\nhttps://github.com/sympy/sympy/blob/5d1b2c6f04f583ec0beeea4b8238d4151b497332/sympy/stats/rv.py#L241-L252"", 'comment_created': datetime.datetime(2020, 5, 13, 12, 54, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}, {'comment_id': 425775752, 'comment_body': 'Were the deleted results wrong?', 'comment_created': datetime.datetime(2020, 5, 15, 12, 44, 39, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 425800670, 'comment_body': 'Oops, will add them. Actually while debugging an error, I deleted it mistakenly', 'comment_created': datetime.datetime(2020, 5, 15, 13, 26, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}, {'comment_id': 425915032, 'comment_body': 'The question is whether the master definition has to be in this file. I would suggest a main file where is_random is defined, then overload the various classes in the other files.', 'comment_created': datetime.datetime(2020, 5, 15, 16, 29, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 425916798, 'comment_body': 'The advantage of singledispatch is to avoid writing code in sympy/core which is needed in other modules. The core of SymPy has been hacked too much because of requirements of external modules.\r\n\r\nSingle dispatch still works as a class method in a certain way, so you can spread the definitions over many files.', 'comment_created': datetime.datetime(2020, 5, 15, 16, 32, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 426109590, 'comment_body': '>  would suggest a main file where is_random is defined\r\n\r\nActually, IMO `rv.py` can be considered as the core of stats as it contains all the basic classes and functions of stats. So, if we want to split it over files, we can split it, but I suggest keeping main definition and few basic registers of classes like `Expr` in `rv.py`.', 'comment_created': datetime.datetime(2020, 5, 16, 2, 37, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}, {'comment_id': 426122881, 'comment_body': 'Why it used to raise a `ValueError` earlier?', 'comment_created': datetime.datetime(2020, 5, 16, 6, 4, 19, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 426122927, 'comment_body': 'Irrelevant change.', 'comment_created': datetime.datetime(2020, 5, 16, 6, 4, 51, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 426124707, 'comment_body': 'When we pass an argument without random expression, it used to raise an error.\r\nwhile adding a check of `pspace(X) == Pspace()`, this failed in `covariance` when X was a simple symbol. So, I made to return None instead.\r\nAlso, to track all the dummy random variables, that were initially having `pspace` as `None`,\r\nare changed to `pspace = PSpace()` instead of keeping them None:\r\nhttps://github.com/sympy/sympy/blob/94fb720696f5f5d12bad8bc813699fd696afd2fb/sympy/stats/rv.py#L281-L302', 'comment_created': datetime.datetime(2020, 5, 16, 6, 31, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}, {'comment_id': 426284917, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2020, 5, 17, 17, 24, 59, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 426285631, 'comment_body': ""Well, new changes are theoretically correct, that constant expressions don't have any probability space. Though can we just keep the old thing as it is a change in public interface? Can you try to not make any change here?"", 'comment_created': datetime.datetime(2020, 5, 17, 17, 32, 21, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 426350881, 'comment_body': 'Okay, I kept it the same', 'comment_created': datetime.datetime(2020, 5, 18, 3, 20, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}, {'comment_id': 426834223, 'comment_body': 'why `Boolean`?', 'comment_created': datetime.datetime(2020, 5, 18, 19, 2, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 427008992, 'comment_body': 'For expressions of And, Or, Le, etc. that contains rvs.', 'comment_created': datetime.datetime(2020, 5, 19, 3, 28, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}, {'comment_id': 427049997, 'comment_body': 'I think `.args` will work for any child of `Basic`. So, probably not needed.', 'comment_created': datetime.datetime(2020, 5, 19, 6, 6, 9, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 427057105, 'comment_body': 'I will change that to `Basic`', 'comment_created': datetime.datetime(2020, 5, 19, 6, 25, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}]","[{'commit_sha': '0a5d4bb002ffdacafc43023781653d612fa7c50f', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '06e3594c69c09f0e34b99944f74812879ae164e0', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce9d4e16be9d15032046e991f13aae609f4d946a', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8172913b58a0461533da8ab1b49aaad8389112e4', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a22c48b00df4db52c7c7f539309f442c88ef8f49', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f8b43dc646d77160dab5cb413dbabab51df84133', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f526b77a8ac086556ad45557bdb12b646495bee0', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aae8109eec5d00097e87b36edb6429829dd891aa', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}]",Smit Lunagariya,55887635,smitlunagariya.mat18@itbhu.ac.in,User,,50,,37,95
416044012,[GSoC] Fixes Symbolic Expectation and doit method,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->
Fixes Symbolic Expectation by adding doit method
#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->
Related to discussions in #19267 

#### Brief description of what is fixed or changed
The PR aims at changing the implementation of symbolic class `Expectation`. The `doit` method initially performed `expand` and so it is renamed to `expand()`. The PR tries to make `Expectation` equivalent to `Integral` and `E` equivalent to `integrate`.
The results in the current diff are as per the expected outputs in [https://github.com/sympy/sympy/issues/19267#issuecomment-626119975](https://github.com/sympy/sympy/issues/19267#issuecomment-626119975).
```python
>>> from sympy.stats import *
>>> X = Normal('X',1,2)
>>> Y = Normal('Y',3,4)
>>> Expectation(X + Y).expand()
Expectation(X) + Expectation(Y)
>>> Expectation(X+Expectation(Y)).doit()
4
>>> Expectation(X + Expectation(Y)).doit(deep=False)
1 + Expectation(Expectation(Y))
>>> Expectation(X + Expectation(Y + Expectation(2*X))).doit(deep=False)
1 + Expectation(Expectation(Y + Expectation(2*X)))
>>> Expectation(X + Expectation(Y + Expectation(2*X))).doit()
6
>>> Expectation(Expectation(2*X)).doit()
2
>>> Expectation(Expectation(2*X)).doit(deep=False)
Expectation(2*X)
```
#### Other comments
- [x] Finalise the implementation
- [x] Add doc and tests


#### Release Notes

<!-- Write the release notes for this release below. See
https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more information
on how to write release notes. The bot will check your release notes
automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
* stats
   * Added `doit` method in `Expectation` and made `E` to call `Expectation`
<!-- END RELEASE NOTES -->
ping @czgdp1807 @jmig5776 @Upabjojr ",True,19290,https://api.github.com/repos/sympy/sympy/pulls/19290,https://github.com/sympy/sympy/pull/19290,closed,101,37,3,7,8,29,2,0,"[{'name': 'stats'}, {'name': 'GSoC'}]",2020-05-11 11:28:16+00:00,2020-05-23 05:45:13+00:00,1016217.0,"11 days, 18:16:57","[{'comment_id': 423448378, 'comment_body': ""Can you please make a separate PR for `expand` fix if these aren't related with the changes in `doit`? It will be easier to trace in future. "", 'comment_created': datetime.datetime(2020, 5, 12, 4, 1, 25, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 423449210, 'comment_body': 'I have added this change in the release notes to be highlighted', 'comment_created': datetime.datetime(2020, 5, 12, 4, 5, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}, {'comment_id': 423449895, 'comment_body': 'I will open PR for renaming', 'comment_created': datetime.datetime(2020, 5, 12, 4, 8, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}, {'comment_id': 423505998, 'comment_body': 'We have a `Variance` class. Should we rather use that one?', 'comment_created': datetime.datetime(2020, 5, 12, 7, 3, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 423506495, 'comment_body': 'I would also add an example with `Expectation((X + Y)*(X - Y)).expand()`, to show that `.expand()` is recursively called downwards.', 'comment_created': datetime.datetime(2020, 5, 12, 7, 4, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 423507107, 'comment_body': ""There is a global variable defining the default behaviour for the evaluation. Can't recall it right now, but somewhere in `sympy/core` it's defined."", 'comment_created': datetime.datetime(2020, 5, 12, 7, 5, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 423511822, 'comment_body': 'We need a function to tell us whether an object is random.', 'comment_created': datetime.datetime(2020, 5, 12, 7, 14, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 423512316, 'comment_body': 'Also show how `.expand()` acts on multiplication.', 'comment_created': datetime.datetime(2020, 5, 12, 7, 15, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 423512393, 'comment_body': 'https://github.com/sympy/sympy/issues/12283', 'comment_created': datetime.datetime(2020, 5, 12, 7, 15, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 423516049, 'comment_body': ""Code partly repeating some logic from `.expand()`. Can we find a way to reuse the code? I.e., suppose the expansion will become more complicated in the future, it would be nice for `.doit()` to share the logic with `.expand()`. But it's not important, this way is also good."", 'comment_created': datetime.datetime(2020, 5, 12, 7, 22, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 423517954, 'comment_body': 'Are you also handling the case of discrete random variables? They should be rewritten as `Sum`.', 'comment_created': datetime.datetime(2020, 5, 12, 7, 26, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 423518264, 'comment_body': 'What about keeping both `.doit()` and `.expand()` in the tests?', 'comment_created': datetime.datetime(2020, 5, 12, 7, 26, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 423569597, 'comment_body': '```suggestion\r\n    assert Expectation(X + Expectation(Y)).doit(deep=False) == 2 + Expectation(Expectation(Y))\r\n```\r\nWe do not know `Expectation(Y)` will be a constant or random expression until we call `doit` on it.', 'comment_created': datetime.datetime(2020, 5, 12, 8, 50, 23, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 423569777, 'comment_body': '+1', 'comment_created': datetime.datetime(2020, 5, 12, 8, 50, 34, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 423588787, 'comment_body': 'Why pop evaluate from the kwargs if it is only going to be passed along with the kwargs?', 'comment_created': datetime.datetime(2020, 5, 12, 9, 19, 55, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 423592568, 'comment_body': 'It should not be necessary to store `evaluate`. If that is needed then I think there has been a misunderstanding.', 'comment_created': datetime.datetime(2020, 5, 12, 9, 26, 2, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 423664175, 'comment_body': 'Okay!, I will remove evaluate, and add some internal flag which helps to get the result in integral form when called ` .rewrite(Integral)`', 'comment_created': datetime.datetime(2020, 5, 12, 11, 35, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}, {'comment_id': 423688474, 'comment_body': 'Yes, but can we make that change in a separate PR, as it will create a mix-up here?', 'comment_created': datetime.datetime(2020, 5, 12, 12, 21, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}, {'comment_id': 423699925, 'comment_body': 'Yes, added', 'comment_created': datetime.datetime(2020, 5, 12, 12, 40, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}, {'comment_id': 423700824, 'comment_body': 'Changed!', 'comment_created': datetime.datetime(2020, 5, 12, 12, 41, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}, {'comment_id': 423701214, 'comment_body': 'Yes, added a docstring for the same', 'comment_created': datetime.datetime(2020, 5, 12, 12, 42, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}, {'comment_id': 423701934, 'comment_body': 'There is a slight difference while handling nested expectations.', 'comment_created': datetime.datetime(2020, 5, 12, 12, 43, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}, {'comment_id': 423702383, 'comment_body': 'Yes, added!', 'comment_created': datetime.datetime(2020, 5, 12, 12, 44, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}, {'comment_id': 423706488, 'comment_body': 'Do you mean using them simultaneously?', 'comment_created': datetime.datetime(2020, 5, 12, 12, 50, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}, {'comment_id': 426839270, 'comment_body': 'I mean... what happens if you call `.doit()` on this expression? Should be add an assertion?', 'comment_created': datetime.datetime(2020, 5, 18, 19, 12, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 427013488, 'comment_body': ""It falis for expression having CRV in trigonometric functions due to complex integration\r\n```python\r\n>>> X = Normal('X', 2, 3)\r\n>>> Y = Normal('Y', 3, 4)\r\n>>> Z = Poisson('Z', 4)\r\n>>> W = Poisson('W', 3)\r\n>>> x = symbols('x', real=True)\r\n>>> y, w, z = symbols('y, w, z')\r\n>>> Expectation(2*X + 3*Y + z*X*Y).expand()\r\nz*Expectation(X*Y) + 2*Expectation(X) + 3*Expectation(Y)\r\n>>> Expectation(2*X + 3*Y + z*X*Y).doit()\r\n6*z + 13\r\n>>> Expectation(sin(X)).doit() # doesn't work for CRV\r\nTraceback (most recent call last):\r\n  ...\r\nTypeError: Invalid comparison of non-real I*im(exp_polar(-I*pi/2))*erf(3*sqrt(2)*I*exp_polar(0)*im(exp_polar(\r\nI*pi/2))/2)\r\n>>> X = Die('X')\r\n>>> Expectation(sin(X)).doit()   # works fine with FRV\r\nsin(5)/6 + sin(4)/6 + sin(6)/6 + sin(3)/6 + sin(1)/6 + sin(2)/6\r\n>>> Expectation(sin(Z)).doit()  #  works with DRV but doesn't evaluate\r\nSum(4**Z*exp(-4)*sin(Z)/factorial(Z), (Z, 0, oo))\r\n\r\n```\r\n\r\n`>>> Expectation(sin(X)).doit() # doesn't work for CRV` Should I add this as XFAIL?"", 'comment_created': datetime.datetime(2020, 5, 19, 3, 45, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}, {'comment_id': 427052804, 'comment_body': 'The above fails in `master` as well. A new issue should be opened for fixing this. Do not add this as test for now.', 'comment_created': datetime.datetime(2020, 5, 19, 6, 14, 4, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 427761198, 'comment_body': ""I don't see any test for this case."", 'comment_created': datetime.datetime(2020, 5, 20, 6, 6, 25, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 427762922, 'comment_body': 'They are already present\r\nhttps://github.com/sympy/sympy/blob/ffad9a04e417f97771ed35a0dfa57987dc360c15/sympy/stats/tests/test_continuous_rv.py#L1343-L1354\r\nhttps://github.com/sympy/sympy/blob/ffad9a04e417f97771ed35a0dfa57987dc360c15/sympy/stats/tests/test_discrete_rv.py#L79-L97', 'comment_created': datetime.datetime(2020, 5, 20, 6, 11, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}]","[{'commit_sha': '1e1d4a27fc9e3cd8c7f90a1996a8fe41a7dfeb91', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab70ac750fcf59fa71e52b1abb00d8f523d17610', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6357976a261aca3b16d61fb02d5405eb604da97d', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0503016e9c0b1664791fb7c6a6b42fd3b4f0757d', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c7989bc09b88ba66e50cf13a1e769cd0d3bad627', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd3df50d9bc5bc878058b0112e003c4be3edf287', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '613a10ba40430900bbb3dea2e11cc382ea697be0', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}]",Smit Lunagariya,55887635,smitlunagariya.mat18@itbhu.ac.in,User,,50,,37,95
419088142,[GSoC] Sampling from external libraries for all RVs,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->
Sampling from External Libraries of sympy random variables
#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->
FIxes #19061
Fixes #16942
FIxes #8478
Fixes #6160
FIxes #7358
#### Brief description of what is fixed or changed
Initially, as decided in #18754, there is some improvement in the design as previously all the external sampling was handled by a single class. Instead, there will be separate classes for each library to avoid load on a single class. Also, this PR completes the whole sampling of stats from external libraries including CRV, FRV, and DRV.


#### Other comments


#### Release Notes

<!-- Write the release notes for this release below. See
https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more information
on how to write release notes. The bot will check your release notes
automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
* stats
   * Added Sampling from external libraries for all the random variables of sympy
<!-- END RELEASE NOTES -->
ping @czgdp1807 @Upabjojr @jmig5776 ",True,19342,https://api.github.com/repos/sympy/sympy/pulls/19342,https://github.com/sympy/sympy/pull/19342,closed,395,265,10,8,28,16,2,0,"[{'name': 'stats'}, {'name': 'GSoC'}]",2020-05-17 09:49:43+00:00,2020-05-28 05:31:01+00:00,934878.0,"10 days, 19:41:18","[{'comment_id': 426251632, 'comment_body': 'I get an error with `NegativeBinomial` as :\r\n```\r\nFile ""/home/smit/Smitlunagariya/sympy/sympy/stats/drv.py"", line 38, in _pmf\r\n    return handmade_pmf(x)\r\n  File ""<lambdifygenerated-20>"", line 2, in _lambdifygenerated\r\n    return (0.32768*0.2**Dummy_50*binomial(Dummy_50 + 4, Dummy_50))\r\nNameError: name \'binomial\' is not defined\r\n```', 'comment_created': datetime.datetime(2020, 5, 17, 11, 45, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}, {'comment_id': 426259120, 'comment_body': 'Removal of these is fine as `pymc3` depends on `scipy`.', 'comment_created': datetime.datetime(2020, 5, 17, 13, 3, 25, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 427047602, 'comment_body': ""```suggestion\r\n        _sample_class = getattr(sympy.stats.crv, 'SampleContinuous' + upper(library[0]) + library[1:])\r\n```\r\nThough using ad-hoc  if-else will also work. It will be faster than both of the techniques."", 'comment_created': datetime.datetime(2020, 5, 19, 5, 59, 3, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 427047677, 'comment_body': ""What if library isn't supported?"", 'comment_created': datetime.datetime(2020, 5, 19, 5, 59, 19, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 427047955, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2020, 5, 19, 6, 0, 6, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 427049229, 'comment_body': 'It will raise an error in distribution.sample() if not supported, also in `sample_iter` if not imported', 'comment_created': datetime.datetime(2020, 5, 19, 6, 3, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}, {'comment_id': 427065695, 'comment_body': 'This will require `sympy` to be imported. So, a dictionary could work faster', 'comment_created': datetime.datetime(2020, 5, 19, 6, 45, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}, {'comment_id': 427071355, 'comment_body': 'Can you shift `_get_sample_class` dict under this class. It seems faster than `if-else` ladder.', 'comment_created': datetime.datetime(2020, 5, 19, 6, 58, 21, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 427073253, 'comment_body': 'Then I need to shift the base class below three library classes as the dictionary will produce `NameError`, so dictionary should be after defining all classes. Shiting it down will produce `NameError` for the base class. So, it works good with the present', 'comment_created': datetime.datetime(2020, 5, 19, 7, 2, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}, {'comment_id': 429430352, 'comment_body': ""I'm still in favour of representing scalars as size=()"", 'comment_created': datetime.datetime(2020, 5, 22, 19, 57, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 429654058, 'comment_body': 'So, the default should be `size=()`?', 'comment_created': datetime.datetime(2020, 5, 24, 16, 40, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}, {'comment_id': 429671784, 'comment_body': 'NumPy (and also SymPy now) considers scalars to be of `size=()`, while `size=(1,)` is an array of one element.\r\n\r\nThe question is: should it return a scalar or a one-element array?', 'comment_created': datetime.datetime(2020, 5, 24, 20, 25, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 429716948, 'comment_body': 'As the sampling of sympy is based on NumPy/SciPy, I agree that we should follow their convention too. I will update the PR accordingily.', 'comment_created': datetime.datetime(2020, 5, 25, 3, 24, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}, {'comment_id': 430193582, 'comment_body': 'Are all cases tested in the tests? We should be able to support both `size=()` and `size=(1,)` (returning a scalar and a 1 element array, respectively).\r\n\r\nBy the way, we should also check if `size=(1, 1)` works, returning a 1-element 2-dimensional array.', 'comment_created': datetime.datetime(2020, 5, 26, 6, 56, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 430193743, 'comment_body': '(there is an `Array` class in `sympy.tensor.array`)', 'comment_created': datetime.datetime(2020, 5, 26, 6, 56, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 430217112, 'comment_body': 'Yes all of them are covered. For, `size=()`, `size=3`, `size=(2,2)`', 'comment_created': datetime.datetime(2020, 5, 26, 7, 44, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}]","[{'commit_sha': 'f9ae7d4e26fa04dc3b053f8ab41aebcfa484d01d', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec7b823cb74a2d30c4261a1e6f8907628f6e3337', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e9c20c7aa69ffc5b92ec732e5891cd3632a1e45', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd6be563a5756b4d602c4ffe1b3b05c7360c05d8e', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ffb1b6983a8771251898e6c536698f331214450', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a4a5a15888408047c6f9b461bc86d4c38634abdc', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a86eed5c0eacb88f4c22b1bdfb64498d3ea80ee6', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6fed1e2be6ae053066cc061fd70f70de8772dcc7', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}]",Smit Lunagariya,55887635,smitlunagariya.mat18@itbhu.ac.in,User,,50,,37,95
421134986,"[GSoC] Added Poisson, Wiener and Gamma Process","<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->
Added Poisson, Wiener and Gamma Process 
#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->
Fixes #19274 

#### Brief description of what is fixed or changed


#### Other comments


#### Release Notes

<!-- Write the release notes for this release below. See
https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more information
on how to write release notes. The bot will check your release notes
automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
* stats
  * Added Poisson, Wiener and Gamma Processes
<!-- END RELEASE NOTES -->",True,19387,https://api.github.com/repos/sympy/sympy/pulls/19387,https://github.com/sympy/sympy/pull/19387,closed,821,39,5,32,45,46,2,0,"[{'name': 'stats'}, {'name': 'GSoC'}]",2020-05-21 03:57:13+00:00,2020-06-26 06:04:49+00:00,3118056.0,"36 days, 2:07:36","[{'comment_id': 428444352, 'comment_body': 'Include it in the `sympy.stats` namespace.', 'comment_created': datetime.datetime(2020, 5, 21, 4, 55, 46, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 428646519, 'comment_body': 'This portion seems like a query parser.', 'comment_created': datetime.datetime(2020, 5, 21, 13, 20, 53, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 428647815, 'comment_body': 'Yes!', 'comment_created': datetime.datetime(2020, 5, 21, 13, 23, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}, {'comment_id': 429054325, 'comment_body': 'Do the following examples work?\r\n```python\r\nP(Not(Eq(X(t1), 2) && Ge(X(t2), 3)), Le(t1, 4) && Gt(t1, 2) && Le(t2, 8) && Gt(t2, 7))\r\nP(Eq(X(t), 2) || Ne(X(t), 4), Le(t1, 4) && Gt(t1, 2))\r\n```', 'comment_created': datetime.datetime(2020, 5, 22, 5, 49, 4, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 429054804, 'comment_body': '```suggestion\r\n            if len(intervals) == 1 or all(Intersection(*intv_comb) == EmptySet\r\n```', 'comment_created': datetime.datetime(2020, 5, 22, 5, 50, 55, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 429056298, 'comment_body': '```python\r\n>>> P(Not(Eq(X(t1), 2) & Ge(X(t2), 3)), Le(t1, 4) & Gt(t1, 2) & Le(t2, 8) & Gt(t2, 7))\r\nTraceback (most recent call last):\r\n  File ""<stdin>"", line 1, in <module>\r\n  File ""/home/smit/Smitlunagariya/sympy/sympy/stats/rv.py"", line 806, in probability\r\n    return pspace(condition).probability(condition, given_condition, evaluate, **kwargs)\r\n  File ""/home/smit/Smitlunagariya/sympy/sympy/stats/stochastic_process.py"", line 55, in probability\r\n    return self.process.probability(condition, given_condition, evaluate, **kwargs)\r\n  File ""/home/smit/Smitlunagariya/sympy/sympy/stats/stochastic_process_types.py"", line 1214, in probability\r\n    return _probability_stoch(\'Poisson\', condition, evaluate=evaluate, **kwargs)\r\n  File ""/home/smit/Smitlunagariya/sympy/sympy/stats/stochastic_process_types.py"", line 1090, in _probability_\r\nstoch\r\n    result = pspace(new_condition).probability(new_condition, **kwargs)\r\n  File ""/home/smit/Smitlunagariya/sympy/sympy/stats/rv.py"", line 421, in probability\r\n    expr = condition.lhs - condition.rhs\r\nAttributeError: \'Not\' object has no attribute \'lhs\'\r\n>>> P(Eq(X(t1), 2) & Ge(X(t2), 3), Le(t1, 4) & Gt(t1, 2) & Le(t2, 8) & Gt(t2, 7))\r\n18*(-17/2 + exp(3))*exp(-9)\r\n>>> P(Eq(X(t1), 2) | Ne(X(t1), 4), Le(t1, 4) & Gt(t1, 2))\r\n1 - 36*exp(-6)\r\n```\r\nSo, for `Not` we need to handle as 1-P(...) and thats a fix required in `rv.py`, I will fix that', 'comment_created': datetime.datetime(2020, 5, 22, 5, 56, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}, {'comment_id': 429062690, 'comment_body': 'After a small fix:\r\n```python\r\n>>> P(Not(Eq(X(t1), 2) & Ge(X(t2), 3)), Le(t1, 4) & Gt(t1, 2) & Le(t2, 8) & Gt(t2, 7))\r\n-18*(-17/2 + exp(3))*exp(-9) + 1\r\n```', 'comment_created': datetime.datetime(2020, 5, 22, 6, 20, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}, {'comment_id': 429517424, 'comment_body': ""I don't think this should be in global namespace. Can you give it a better name?"", 'comment_created': datetime.datetime(2020, 5, 23, 5, 48, 52, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 429520623, 'comment_body': 'I agree this function should not be in the global namespace, also, can this be named as `_get_const_timerv`?. Also, if this plan looks good then should I add docstrings?', 'comment_created': datetime.datetime(2020, 5, 23, 6, 48, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}, {'comment_id': 429601476, 'comment_body': 'Yes you can add docstrings.', 'comment_created': datetime.datetime(2020, 5, 24, 5, 46, 48, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 430153671, 'comment_body': 'Why this change?', 'comment_created': datetime.datetime(2020, 5, 26, 4, 48, 35, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 430154434, 'comment_body': 'By default `args[0].pspace.process.distribution` is `None`,\r\nhttps://github.com/sympy/sympy/blob/22770dabc64182e2e16b0b91ba876d36f57399bc/sympy/stats/stochastic_process.py#L45-L47', 'comment_created': datetime.datetime(2020, 5, 26, 4, 52, 1, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 430154595, 'comment_body': '```suggestion\r\n        distribution = self.distribution\r\n```', 'comment_created': datetime.datetime(2020, 5, 26, 4, 52, 43, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 430154713, 'comment_body': '```suggestion\r\n        """"""\r\n```', 'comment_created': datetime.datetime(2020, 5, 26, 4, 53, 11, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 430154756, 'comment_body': 'Initially, distribution was not passed to pspace while creating CTSP instance, but I fixed it in the PR too. I will remove this change\r\nhttps://github.com/sympy/sympy/blob/e31c4cdedb5080325b3fd04f4b4826d9dab65b26/sympy/stats/stochastic_process_types.py#L228-L229', 'comment_created': datetime.datetime(2020, 5, 26, 4, 53, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}, {'comment_id': 430155207, 'comment_body': ""This is because all processes don't necessarily have `distribution`, so used `getattr`, for instance, say, CTMC "", 'comment_created': datetime.datetime(2020, 5, 26, 4, 55, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}, {'comment_id': 430155912, 'comment_body': 'Instead of dict, may be, RVs can be added to their related to process as a property or attribute.', 'comment_created': datetime.datetime(2020, 5, 26, 4, 58, 16, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 430156262, 'comment_body': ""Shouldn't this be index set?"", 'comment_created': datetime.datetime(2020, 5, 26, 4, 59, 54, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 430156418, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2020, 5, 26, 5, 0, 29, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 430156747, 'comment_body': 'You can shift this method to a super class of `BernoulliProcess` and `PoissonProcess` as static methods.', 'comment_created': datetime.datetime(2020, 5, 26, 5, 2, 2, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 430157204, 'comment_body': 'Is a parser really needed if `_rv_indexed_subs` is replacing all the RIS with RVs?', 'comment_created': datetime.datetime(2020, 5, 26, 5, 4, 8, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 430157552, 'comment_body': 'Yes, because, otherwise it will consider all rvs are independent and produce wrong results', 'comment_created': datetime.datetime(2020, 5, 26, 5, 5, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}, {'comment_id': 430157982, 'comment_body': 'This can be needed for DTSP, so, should be shifted to Stochastic Process class? I think it can be outside the class.', 'comment_created': datetime.datetime(2020, 5, 26, 5, 7, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}, {'comment_id': 432662862, 'comment_body': ""Well, this seems a bit too complicated. Maybe better:\r\n```\r\nexpr = _sympify(expr)\r\nreturn sorted(expr.atoms(RandomIndexedSymbol), ... )\r\n```\r\n\r\nAnyway, why would you need this function? Isn't it better to just call `expr.atoms( ... )` when needed?"", 'comment_created': datetime.datetime(2020, 5, 29, 18, 27, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 432663204, 'comment_body': ""`self.distribution`... Please don't use `getattr`, it makes the code extremely difficult to maintain."", 'comment_created': datetime.datetime(2020, 5, 29, 18, 28, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 432663704, 'comment_body': ""If it's an internal class, hide the name by prepending an underscore to its name: `_SubstituteRV`."", 'comment_created': datetime.datetime(2020, 5, 29, 18, 29, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 432666135, 'comment_body': 'This looks like a generic statement which could be applied to all `.probability` methods. Maybe we should find a way to write it only once.', 'comment_created': datetime.datetime(2020, 5, 29, 18, 34, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 432805649, 'comment_body': 'This function returns random indexed symbols from the expression, So I thought using this might be cleaner than using `expr.atoms(...)`. I will remove it and use `expr.atoms(..)`', 'comment_created': datetime.datetime(2020, 5, 30, 3, 25, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}, {'comment_id': 432805816, 'comment_body': 'But, `self.distribution` will lead to AttributeError when the process does not have distribution. So, to avoid try-except blocks I have used `getattr`', 'comment_created': datetime.datetime(2020, 5, 30, 3, 28, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}, {'comment_id': 432814948, 'comment_body': 'I would suggest to add a property `distribution` in `StochasticProcess` which can return `None`.', 'comment_created': datetime.datetime(2020, 5, 30, 6, 12, 36, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 432816894, 'comment_body': 'But when distribution takes an argument apart from `self` as here:\r\n```python\r\ndef distribution(self, rv):\r\n        return PoissonDistribution(self.lamda*rv.key)\r\n```', 'comment_created': datetime.datetime(2020, 5, 30, 6, 50, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}, {'comment_id': 432818611, 'comment_body': ""For these things it's usually better to just use `sympy/core` functions. Using `sympy/core` makes the code easier to read, in my opinion.\r\n\r\nBut we can also keep this function if you are calling it many times. It's just a code style preference..."", 'comment_created': datetime.datetime(2020, 5, 30, 7, 21, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 432818665, 'comment_body': ""(but definitely don't use `getattr`... it makes code analysis more complicated)"", 'comment_created': datetime.datetime(2020, 5, 30, 7, 22, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 432819034, 'comment_body': ""> But, `self.distribution` will lead to AttributeError when the process does not have distribution. So, to avoid try-except blocks I have used `getattr`\r\n\r\nPython allows a lot of freedom to manipulate attributes of objects, but it's usually not recommended to use all of this freedom.\r\n\r\nTry to code as if you were writing C++ code. So, either `self` has `.distribution` as attribute, or it does not. If only some subclasses of this class have `.distribution`, then this method should be lowered to a subclass."", 'comment_created': datetime.datetime(2020, 5, 30, 7, 26, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 432819466, 'comment_body': '> I would suggest to add a property distribution in StochasticProcess which can return None.\r\n\r\nEven better would be an abstract method.', 'comment_created': datetime.datetime(2020, 5, 30, 7, 34, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 433985571, 'comment_body': 'Can you provide some references for the tests? It will be easy to verify them.', 'comment_created': datetime.datetime(2020, 6, 2, 15, 53, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 434002585, 'comment_body': 'For symbolic gamma process, I used [https://en.wikipedia.org/wiki/Gamma_process](https://en.wikipedia.org/wiki/Gamma_process) to verify, and as it is a Levy Process, see: [https://en.wikipedia.org/wiki/L%C3%A9vy_process](https://en.wikipedia.org/wiki/L%C3%A9vy_process), I used the tests similar to PoissonProcess', 'comment_created': datetime.datetime(2020, 6, 2, 16, 12, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}, {'comment_id': 434318398, 'comment_body': 'Can you provide the references from where you took these tests, like are these tests examples of some lecture notes or book? Or did you think of them on your own?', 'comment_created': datetime.datetime(2020, 6, 3, 5, 36, 51, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 434319429, 'comment_body': ""For verifying E, variance symbolically, I used Wikipedia, and the remaining ones, I thought and framed according to Poisson Process, as I didn't find problems on Gamma Process."", 'comment_created': datetime.datetime(2020, 6, 3, 5, 40, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}, {'comment_id': 434838106, 'comment_body': 'is there a reason for spelling `gama`? `gamma` is not a reserved word.', 'comment_created': datetime.datetime(2020, 6, 3, 20, 36, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 434839817, 'comment_body': 'Can you add some comments directly into the code describing the computations needed to verify the tests?', 'comment_created': datetime.datetime(2020, 6, 3, 20, 39, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 435007982, 'comment_body': 'Changed to `gamma`', 'comment_created': datetime.datetime(2020, 6, 4, 5, 54, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}, {'comment_id': 444110312, 'comment_body': 'this can be done with `Mul.fromiter`', 'comment_created': datetime.datetime(2020, 6, 23, 10, 4, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 444112195, 'comment_body': ""Numerical comparisons in asserts are usually bad, unless you specify an error range. The problem is that the result could vary depending on the Python version and CPU it's being run on, there could be different kinds of numerical roundings."", 'comment_created': datetime.datetime(2020, 6, 23, 10, 7, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 444181269, 'comment_body': ""Have you tried `Add.fromiter(self._solve_numerical(arg, given_condition) for arg in condition.args)` without square brackets? I think it's a bit more efficient because it creates a generator instead of a list, so no need to allocate all the memory for the array."", 'comment_created': datetime.datetime(2020, 6, 23, 12, 23, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 444385130, 'comment_body': 'Yes, it works. Thanks!!', 'comment_created': datetime.datetime(2020, 6, 23, 17, 20, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}]","[{'commit_sha': 'b81a83c01d9d58e71fbf0989a932bc4f6862f71c', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c477b1c26fd2f033b9ee2bff4979258e38fe6601', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d00f17959839d8494ce34bf923bfd3bd487de44', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a87534479095db82511b3ee95103540ec2a85d6', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17f06c6ddd2f4189928273d3ad8f71ca71a64225', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a39563b17b5b0e8b5895cff63ccf0a8c46f7380', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2362636f250ec07e4074b5ae33095356640eb03a', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f00a27a1d8d1a81fb9dfe4d16ad0671036a4417f', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d658bc2ad6c6185f5a74a641f5661f9fc18fb61', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22770dabc64182e2e16b0b91ba876d36f57399bc', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45d75bf4746f95987ddee92494483322c2771a25', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b1fdf673311fb0bf95a16d0939e4f7d7e11b49c', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '24b6544e20e71107f727594eb8aa53e0c23bcbdf', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14cd43fea9e86ea9aaafe551b993fa36b1c36155', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be51919e82db07699bdadad3c61d0708e7da5369', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ee6de9b5be1949c0e4cdcdeaef4906d3d683e4f', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b6d0312686d6446ce9207fc8e936daffde99cb0f', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa138c74cf124a4ae44f86182fba45b8aba25841', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '253784156d3a254c1901a07bd19ade82fd658902', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '578c3e3945c1c3dbb14bd85dae21657674b33b8e', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ebdaa9a77440432fcd37463fa6e30a691a729999', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e15d717d56de443c117ba873c8f69fef05e98c70', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce1998940947a47df15872af878083dae61d37bf', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a1db3b0f5e611eb2e4590d8c20ead783f320b07', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '083ebd53bff5102684fa6ac37cfb92f214122f3f', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4996b8a87ace6ee1cfa625ae5472d3d7948a8eb4', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e72981c8543247fbe5f79a590ffa13706794091b', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '35a382a64d015e77e77b9763fdff78064668be7e', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '92b5a79e071e81a17d5009a2009d3b1589318083', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '599440b997c0c7905e8c92823b9787f4d504963e', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f8045751b02df6fae3993a97e1e1b46bade17de', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e5404a892b031e1ef50f8190becbf8bb2182248', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}]",Smit Lunagariya,55887635,smitlunagariya.mat18@itbhu.ac.in,User,,50,,37,95
429093947,[GSoC] Added Sampling of Stochastic Process(DTMC),"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->
Added sampling of Stochastic Process
#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->
FIxes #19454

#### Brief description of what is fixed or changed


#### Other comments


#### Release Notes

<!-- Write the release notes for this release below. See
https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more information
on how to write release notes. The bot will check your release notes
automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
* stats
  * Added `sample_stochastic` for sampling from stochastic processes.
<!-- END RELEASE NOTES -->
ping @czgdp1807 @Upabjojr ",True,19500,https://api.github.com/repos/sympy/sympy/pulls/19500,https://github.com/sympy/sympy/pull/19500,closed,102,8,5,5,12,6,2,0,"[{'name': 'stats'}, {'name': 'GSoC'}]",2020-06-06 09:48:50+00:00,2020-06-11 13:16:35+00:00,444465.0,"5 days, 3:27:45","[{'comment_id': 436332821, 'comment_body': 'Are these tests deterministic? I cannot find the value of seed being fixed for these tests in the diff.', 'comment_created': datetime.datetime(2020, 6, 7, 7, 5, 29, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 436332944, 'comment_body': 'Can you pass a message here like, reached an abstract method?', 'comment_created': datetime.datetime(2020, 6, 7, 7, 7, 11, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 436332990, 'comment_body': 'They are random! Do you mean using sampling seeds to make them produce same result always?', 'comment_created': datetime.datetime(2020, 6, 7, 7, 7, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}, {'comment_id': 436333007, 'comment_body': 'Can you move this outside while loop? ', 'comment_created': datetime.datetime(2020, 6, 7, 7, 8, 5, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 436333079, 'comment_body': 'I see that, density for all the states can be computed before starting the sampling loop.', 'comment_created': datetime.datetime(2020, 6, 7, 7, 9, 14, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 436333190, 'comment_body': 'Yes, tests should be deterministic. They can be done adding a line like,\r\n```suggestion\r\ndef test_sample_stochastic():\r\n    random.seed(0)\r\n```', 'comment_created': datetime.datetime(2020, 6, 7, 7, 10, 18, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}]","[{'commit_sha': '6f774d877dae9c7a37185b0b0754c0ec2560a213', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '281978fd417ed4a03fade39497a24114041bdc31', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7581d17cd2e902ea86458e9d2ce96df2ff6ca7e', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dbcf4cf867456c3f2b26f7f919a3de5a646f849f', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f459e46bcde525e284f977829400e15d1b6dfcf', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}]",Smit Lunagariya,55887635,smitlunagariya.mat18@itbhu.ac.in,User,,50,,37,95
425033908,[GSoC] Fixes Sum.doit() with Randomindexed symbol,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->
Fixes #19456 

#### Brief description of what is fixed or changed
Before fixing:

```python
>>> from sympy.stats import *
>>> from sympy import symbols, S, Eq, Sum
>>> B = BernoulliProcess('B', S(1)/2, 1, -1)
>>> t = symbols('t', positive=True, integer=True)
>>> expr = Sum(B[t], (t, 0, 5))
>>> expr.doit()  # this should not consider B[t] equal in all the cases as it is random variable
6*B[t]       # wrong result
```

After fixing:
```python
>>> from sympy.stats import *
>>> from sympy import symbols, S, Eq, Sum
>>> B = BernoulliProcess('B', S(1)/2, 1, -1)
>>> t = symbols('t', positive=True, integer=True)
>>> expr = Sum(B[t], (t, 0, 5))
>>> expr.doit()
B[0] + B[1] + B[2] + B[3] + B[4] + B[5]
```

#### Other comments


#### Release Notes

<!-- Write the release notes for this release below. See
https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more information
on how to write release notes. The bot will check your release notes
automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
* stats
   * FIxes free_symbols method of RandomIndexedSymbol
<!-- END RELEASE NOTES -->
ping @czgdp1807 @Upabjojr @jmig5776 ",True,19459,https://api.github.com/repos/sympy/sympy/pulls/19459,https://github.com/sympy/sympy/pull/19459,closed,21,2,2,2,6,7,2,0,"[{'name': 'stats'}, {'name': 'GSoC'}]",2020-05-29 10:56:09+00:00,2020-06-03 05:39:34+00:00,413005.0,"4 days, 18:43:25","[{'comment_id': 432818367, 'comment_body': 'When doing it on `IndexedBase`, I get:\r\n```python\r\nIn [4]: (A[i]).free_symbols\r\nOut[4]: {A, i, A[i]}\r\n\r\nIn [5]: (A[i]).expr_free_symbols\r\nOut[5]: {A[i]}\r\n```\r\n\r\nMaybe this should return `{B[x*t], x, t, B}` ? Did you also test `.expr_free_symbols`? `.expr_free_symbols` is like `.free_symbols` except it stops as soon as the expression tree is not an expression/math formula anymore.', 'comment_created': datetime.datetime(2020, 5, 30, 7, 17, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 432828495, 'comment_body': '> Maybe this should return `{B[x*t], x, t, B}`\r\n\r\nIMHO, `B` should not be included in free symbols, as it is not an `Expr` object. Also, `expr_free_symbols` works as expected:\r\n```python\r\n>>> B[x*t].expr_free_symbols\r\n{B[t*x]}\r\n>>> B[4].expr_free_symbols\r\n{B[4]}\r\n>>> B[2*t].expr_free_symbols\r\n{B[2*t]}\r\n```', 'comment_created': datetime.datetime(2020, 5, 30, 10, 2, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}, {'comment_id': 433023360, 'comment_body': 'ping @Upabjojr ', 'comment_created': datetime.datetime(2020, 6, 1, 3, 3, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}, {'comment_id': 433445504, 'comment_body': 'How would it affect the fix if we return `B` as well?', 'comment_created': datetime.datetime(2020, 6, 1, 19, 35, 19, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 433625550, 'comment_body': '```python\r\n>>> Eq(B[1], 0).as_set()\r\nTraceback (most recent call last):\r\n  File ""<stdin>"", line 1, in <module>\r\n  File ""/home/smit/Smitlunagariya/sympy/sympy/logic/boolalg.py"", line 165, in as_set\r\n    raise NotImplementedError(""Sorry, as_set has not yet been""\r\nNotImplementedError: Sorry, as_set has not yet been implemented for multivariate expressions\r\n```\r\nAlso, I think `free_symbols` include only them which are objects of `Expr`. So, IMHO,  it should not be included', 'comment_created': datetime.datetime(2020, 6, 2, 5, 19, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}, {'comment_id': 433982274, 'comment_body': 'Okay, so may be we can exclude `B` from the results. ', 'comment_created': datetime.datetime(2020, 6, 2, 15, 49, 49, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 434854841, 'comment_body': ""Maybe `Indexed` should be modified not to return its base element in its free symbols... but that's another issue."", 'comment_created': datetime.datetime(2020, 6, 3, 21, 4, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}]","[{'commit_sha': '30228ff905f8deffef4283a272cebda22d365b4e', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b1dcadc10cdba46d0d4cd176c942dae2b7518f08', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}]",Smit Lunagariya,55887635,smitlunagariya.mat18@itbhu.ac.in,User,,50,,37,95
432901396,"[GSoC] Added symbolic Expectation, Variance and CrossCovariance matrix","<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->
Added symbolic Expectation, Variance and Covariance matrix
#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->
References from #19299 

#### Brief description of what is fixed or changed


#### Other comments
- [x] Add classses
- [x] Add docs and tests 

#### Release Notes

<!-- Write the release notes for this release below. See
https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more information
on how to write release notes. The bot will check your release notes
automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
* stats
  * Added Expectation Matrix, Variance Matrix and CrossCovariance Matrix
<!-- END RELEASE NOTES -->
ping @czgdp1807  @Upabjojr",True,19529,https://api.github.com/repos/sympy/sympy/pulls/19529,https://github.com/sympy/sympy/pull/19529,closed,501,5,7,7,12,1,2,0,"[{'name': 'stats'}, {'name': 'GSoC'}]",2020-06-11 07:49:09+00:00,2020-06-19 20:40:38+00:00,737489.0,"8 days, 12:51:29","[{'comment_id': 443035352, 'comment_body': 'maybe also an `assert isinstance(expr, VarianceMatrix)`?', 'comment_created': datetime.datetime(2020, 6, 19, 20, 39, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}]","[{'commit_sha': '21f5de86280b42a7b8188ea5494697e7f0d8036f', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3117bbf41918f173195c4d815c57162eb1c316ec', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e28d0841ddb600d9daa7c0d49ee7fc13eb9b12ff', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '89f8db7ce6e82161412e4aae394f899afdd4fcbc', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72e3ae13b2a0e7045c650a2824569d23a27dd158', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '291ab6b5914eb1adcd2faf3a862338cc5d91c44b', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '28d62c4157f66cb042f2c6e25d365bbae2299511', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}]",Smit Lunagariya,55887635,smitlunagariya.mat18@itbhu.ac.in,User,,50,,37,95
439044937,[GSoC] Testing and cleaning up Joint Rvs,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->
Testing and cleaning up Joint Rvs
#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->


#### Brief description of what is fixed or changed
- [x] Clean ups in joint_rv_types.py/ Docs correction
- [x] Add missing tests/tests for newly added functions/classes.

#### Other comments
Major changes include:
1. Added `MultivariateNormal` and `MultivariateLaplace` functions
2. Moved `JointDistributionHandmade` and `marginal_distribution` to `joint_rv_types.py`
3. Moved `marginal_distribution` to `sympy.stats` namespace
4. Added few tests so that Coverage of `joint_rv_types.py` increased to 98%

#### Release Notes

<!-- Write the release notes for this release below. See
https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more information
on how to write release notes. The bot will check your release notes
automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
* stats
   * Added `MutlivariateNormal` and `MutlivariateLaplace` function
<!-- END RELEASE NOTES -->
ping @czgdp1807 @Upabjojr @jmig5776 ",True,19631,https://api.github.com/repos/sympy/sympy/pulls/19631,https://github.com/sympy/sympy/pull/19631,closed,252,155,9,8,5,0,2,0,"[{'name': 'stats'}, {'name': 'GSoC'}]",2020-06-24 08:24:11+00:00,2020-06-28 05:49:46+00:00,336335.0,"3 days, 21:25:35",[],"[{'commit_sha': 'add5b2c0b89e43548fbac3b2cd9acd0168509198', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ebab69cefb80994fabfd98dacf61e88ac6dbd93f', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9958b97ba8a690b78909e2d8388388882ff92327', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c75313ec2cbca86e00ad26dc37ea4d5d43f96f3', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '912f03020305ec4bd0a852ab22ea83e62b455bda', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3b6176feb97d59969e60fca1804e48593760ac4', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84f908a4ceaa2701316b608fa1617223e61cf22a', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '43ce9f2b325d3e8aed35c65459b2b04619290340', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}]",Smit Lunagariya,55887635,smitlunagariya.mat18@itbhu.ac.in,User,,50,,37,95
440391632,[GSoC] Compound Distributions,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->
Discussions in #19332
Fixes #19332 
Fixes #11135
Fixes #8128 

#### Brief description of what is fixed or changed

#### Other comments


#### Release Notes

<!-- Write the release notes for this release below. See
https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more information
on how to write release notes. The bot will check your release notes
automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
* stats
   * Added support for Compound Distributions
<!-- END RELEASE NOTES -->",True,19648,https://api.github.com/repos/sympy/sympy/pulls/19648,https://github.com/sympy/sympy/pull/19648,closed,369,63,10,10,20,16,2,0,"[{'name': 'stats'}, {'name': 'GSoC'}]",2020-06-26 05:38:42+00:00,2020-07-11 07:09:19+00:00,1301437.0,"15 days, 1:30:37","[{'comment_id': 445978329, 'comment_body': 'I have removed these checks as they raise an error in some cases even if the pdf is integrated to 1.', 'comment_created': datetime.datetime(2020, 6, 26, 5, 42, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}, {'comment_id': 449283719, 'comment_body': 'have you tried `.dummy_equals( ... )` ?', 'comment_created': datetime.datetime(2020, 7, 2, 21, 56, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 449283966, 'comment_body': ""It's usually bad to add an `@XFAIL`"", 'comment_created': datetime.datetime(2020, 7, 2, 21, 57, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 449361656, 'comment_body': ""The reason is that it doesn't match with the current implementation\r\n```python\r\nmu = Normal('mu', 2, 3)\r\nmeas = Normal('T', mu, 1) # mu has been removed by marginalization \r\nassert given(meas, Eq(mu, 5)) == Normal('T', 5, 1) # this will have no effect as there is no mu left in means\r\n```"", 'comment_created': datetime.datetime(2020, 7, 3, 3, 47, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}, {'comment_id': 449853484, 'comment_body': ""No `mu` left? Couldn't get you here."", 'comment_created': datetime.datetime(2020, 7, 5, 9, 2, 25, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 449853558, 'comment_body': '```suggestion\r\n        raise ValueError(""%s should be an isinstance of ""\r\n                        ""CompoundDistribution""%(comp_distribution))\r\n```', 'comment_created': datetime.datetime(2020, 7, 5, 9, 3, 36, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 449853580, 'comment_body': 'As `mu` has been marginalized out in `means` at the time of instantiation', 'comment_created': datetime.datetime(2020, 7, 5, 9, 3, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}, {'comment_id': 449853611, 'comment_body': 'There was a function for it somewhere.', 'comment_created': datetime.datetime(2020, 7, 5, 9, 4, 9, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 449853654, 'comment_body': 'Got it, in `rv.py`', 'comment_created': datetime.datetime(2020, 7, 5, 9, 4, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}, {'comment_id': 449853761, 'comment_body': 'This should be a method of `CompoundDistribution`.', 'comment_created': datetime.datetime(2020, 7, 5, 9, 5, 54, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 449853816, 'comment_body': '+1', 'comment_created': datetime.datetime(2020, 7, 5, 9, 6, 28, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 449853842, 'comment_body': '```suggestion\r\ndef _get_newpspace(sym, dist, pdf):\r\n    """"""\r\n    This function returns the new pspace of the distribution using handmade\r\n    Distributions and their corresponding pspace.\r\n    """"""\r\n    pdf = Lambda(sym, pdf(sym))\r\n    _set = dist.set\r\n    if isinstance(dist, ContinuousDistribution):\r\n        return SingleContinuousPSpace(sym, ContinuousDistributionHandmade(pdf, _set))\r\n    elif isinstance(dist, DiscreteDistribution):\r\n        return SingleDiscretePSpace(sym, DiscreteDistributionHandmade(pdf, _set))\r\n    elif isinstance(dist, SingleFiniteDistribution):\r\n        dens = dict((k, pdf(k)) for k in _set)\r\n        return SingleFinitePSpace(sym, FiniteDistributionHandmade(dens))\r\n```', 'comment_created': datetime.datetime(2020, 7, 5, 9, 6, 47, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 449853861, 'comment_body': '+1', 'comment_created': datetime.datetime(2020, 7, 5, 9, 6, 56, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 449853937, 'comment_body': 'Irrelevant change.', 'comment_created': datetime.datetime(2020, 7, 5, 9, 7, 42, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 449993283, 'comment_body': 'However, as we discussed marginalisation should happen only when pdf is requested, otherwise, the distribution should retain the parameters in their original form.', 'comment_created': datetime.datetime(2020, 7, 6, 5, 38, 47, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 450023748, 'comment_body': 'Okay, I will have a look into it', 'comment_created': datetime.datetime(2020, 7, 6, 7, 8, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}]","[{'commit_sha': '938f536e35f3eba61d9ffefb55283eac21c75bb1', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab4653e93f1f10a785a4d1a7918f063a24c139c7', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b266a52364a3600643937ea1b347d56355b5b87b', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ae769f48423b5e1bc058cba80880299fa883d62', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e7178351844f54d191f7b85f8a5c69f1d6cfb89', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45bd0019f162f049c0d84801bb39b386cb4082e3', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7fd1dfaf92859fc1672b61acd36802fcc373dc2', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '714d944fcbf7b4948e68f5874adeb6fb8623ca4f', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1960d5c6dbca9daf854bd772e27fe55497a13a25', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a4929d4b4e06bc375f8ecba8639fd11ef1aee099', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}]",Smit Lunagariya,55887635,smitlunagariya.mat18@itbhu.ac.in,User,,50,,37,95
445338529,[GSoC] Added symbolic classes for Moment and Centralmoment,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->
Fixes #6323 
Related comment https://github.com/sympy/sympy/issues/6323#issuecomment-654743869

#### Brief description of what is fixed or changed
- [x] Add classes of Moment and CentralMoment and their docs
- [x] Tests

#### Other comments


#### Release Notes

<!-- Write the release notes for this release below. See
https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more information
on how to write release notes. The bot will check your release notes
automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
* stats
   *  Added symbolic classes of `Moment` and `CentralMoment`
<!-- END RELEASE NOTES -->
ping @Upabjojr @czgdp1807 @jmig5776 ",True,19724,https://api.github.com/repos/sympy/sympy/pulls/19724,https://github.com/sympy/sympy/pull/19724,closed,174,8,5,4,6,3,2,0,"[{'name': 'stats'}, {'name': 'GSoC'}]",2020-07-07 11:03:31+00:00,2020-07-12 06:38:29+00:00,416098.0,"4 days, 19:34:58","[{'comment_id': 450795650, 'comment_body': 'This should be handled in `doit`.', 'comment_created': datetime.datetime(2020, 7, 7, 11, 30, 23, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 450797035, 'comment_body': ""You don't need to store `condition` since it is one of the `args`. It should be `self.args[3]` although I would make an accessor property:\r\n```\r\n@property\r\ndef condition(self):\r\n    return self.args[3]\r\n```"", 'comment_created': datetime.datetime(2020, 7, 7, 11, 33, 15, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 451852818, 'comment_body': ""what about calling it `CentralMoment`? It's a clearer name."", 'comment_created': datetime.datetime(2020, 7, 8, 22, 9, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}]","[{'commit_sha': '67cede88bf1d4f0002a5f327dedb50ea0fc08b5c', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '750ee4478e1720163277738f2df15bb119d9652e', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f504c5e60f634b19fba71a59da671e14e1ee42b6', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7089ef820fc61c0498970ec0ac9d79ff44745027', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}]",Smit Lunagariya,55887635,smitlunagariya.mat18@itbhu.ac.in,User,,50,,37,95
447240770,[GSoC][WIP] Add Matrix Gamma distribution,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->
Add Matrix Gamma Distribution
#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->
Discussions in #19723


## Major Changes
- [x] Corrected density API for random matrices and now works the same as other Random Variables
Example:
Previously:
```py
>>> from sympy.stats import GaussianUnitaryEnsemble as GUE, density
>>> G = GUE('U', 2)
>>> density(G)
Lambda(H, exp(-Trace(H**2))/(2*pi**2))
```
Now:
```py
>>> from sympy.stats import GaussianUnitaryEnsemble as GUE, density
>>> from sympy import MatrixSymbol
>>> X = MatrixSymbol('X', 2, 2)
>>> G = GUE('U', 2)
>>> density(G)
GaussianUnitaryEnsemble(U, 2)
>>> density(G)(X)
exp(-Trace(X**2))/(2*pi**2)
```
>>> 
- [x] Added classes of `MatrixPSpace`, `MatrixDistribution` (General Framework of Matrix Distributions)
- [x] Add MatrixGammaDistribution
- [x] Add tests and docs
#### Release Notes

<!-- Write the release notes for this release below. See
https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more information
on how to write release notes. The bot will check your release notes
automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
* stats
   * Added `MatrixGamma` Distribution
<!-- END RELEASE NOTES -->
ping @Upabjojr @czgdp1807 @jmig5776 ",True,19734,https://api.github.com/repos/sympy/sympy/pulls/19734,https://github.com/sympy/sympy/pull/19734,closed,251,21,7,8,15,0,2,0,"[{'name': 'stats'}, {'name': 'GSoC'}]",2020-07-10 05:51:25+00:00,2020-07-17 05:23:26+00:00,603121.0,"6 days, 23:32:01",[],"[{'commit_sha': 'f2d35cb89f480b6e6a317d9d86e1faf3ccdcba8f', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '417763d6080b47d3b756a166c4f70398fa0f9437', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9ffbc9142f8d90f9e96d4243d76eb6ce6a13d9a', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '391807e5b5b471aa6f3f45a81fff0367231b6ab8', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e21de5d793d1530f4e45f2b0a750fd5c979bc844', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95dccb550b2c283233ec11898b136df2748c562a', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ebf192898fe2db5334990095e197726ef415bb22', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '939bbbdf4fb1fcc0ab5430ab88e33cf039044a37', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}]",Smit Lunagariya,55887635,smitlunagariya.mat18@itbhu.ac.in,User,,50,,37,95
451772917,[GSoC] Added Matrix Normal and Wishart Distribution,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->
FIxes #19723
Closes #17204
#### Brief description of what is fixed or changed


#### Other comments


#### Release Notes

<!-- Write the release notes for this release below. See
https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more information
on how to write release notes. The bot will check your release notes
automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
* stats
  * Added `Wishart` and `MatrixNormal` Distributions
<!-- END RELEASE NOTES -->
ping @czgdp1807 @Upabjojr @jmig5776 ",True,19795,https://api.github.com/repos/sympy/sympy/pulls/19795,https://github.com/sympy/sympy/pull/19795,closed,252,11,4,7,7,13,2,0,"[{'name': 'stats'}, {'name': 'GSoC'}]",2020-07-18 07:29:53+00:00,2020-07-27 20:21:40+00:00,823907.0,"9 days, 12:51:47","[{'comment_id': 456878107, 'comment_body': ""Make a new class for encapsulating common features of `MatrixGammaDistribution` and `WishartDistribution`, then inherit it in both these classes. Reuse the code from this class. Something like,\r\n```python\r\nclass _HelperMatrixGammaWishart(MatrixDistribution):\r\n    \r\n    _argnames = ('scale_matrix')\r\n\r\n    def __new__(cls, scale_matrix):\r\n        ...\r\n    \r\n    @staticmethod\r\n    def check(scale_matrix):\r\n        ...\r\n\r\n    @property\r\n    def set(self):\r\n        ...\r\n\r\n    @property\r\n    def dimension(self):\r\n        ...\r\n\r\n    def pdf(self, x, alpha, beta):\r\n        ...\r\n```\r\nOR\r\nSimply a new class `WishartDistribution` can be defined without using any code from `MatrixGammaDistribution`. \r\n\r\nI would prefer the second approach as it's simple and not much code will be repeated."", 'comment_created': datetime.datetime(2020, 7, 19, 8, 21, 43, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 457682419, 'comment_body': 'Are you sure this is the correct way to call `ProductSet`? ', 'comment_created': datetime.datetime(2020, 7, 20, 20, 47, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 457698666, 'comment_body': ""I don't know this code but that would be the correct way if you wanted to create a set of 2-tuples where each element is a k-tuple e.g.:\r\n```\r\nIn [8]: S = ProductSet(Reals**3, Reals**3)                                                                             \r\n\r\nIn [9]: ((1, 2, 3), (4, 5, 6)) in S                                                                                    \r\nOut[9]: True\r\n```"", 'comment_created': datetime.datetime(2020, 7, 20, 21, 21, 4, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 457830041, 'comment_body': 'I meant to represent <b>R<sup>k x k</sup></b> using the `ProductSet`', 'comment_created': datetime.datetime(2020, 7, 21, 4, 32, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}, {'comment_id': 457919332, 'comment_body': ""Translating that literally would give `Reals ** (k * k)` which is the set of `k**2`-tuples of real numbers. If you mean for this to be the set of `k x k` *matrices* over the reals then you'll need a new set class to represent that."", 'comment_created': datetime.datetime(2020, 7, 21, 8, 16, 51, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 458567022, 'comment_body': '>  If you mean for this to be the set of `k x k` _matrices_ over the reals\r\n\r\nYes, I meant to represent `k x k` _matrices_ over the reals.', 'comment_created': datetime.datetime(2020, 7, 22, 6, 38, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}, {'comment_id': 458580973, 'comment_body': ""Should the new class be added under `sets/fancysets.py`?\r\nAlso is the following code is going correct way as I'm not much familiar with `sets` code?\r\n```py\r\nclass MatrixSet(Set):\r\n    is_iterable = False\r\n    is_empty = False\r\n    is_finite_set = False\r\n\r\n    def __new__(cls, shape=(), set=Reals):\r\n        shape = (_sympify(x) for x in dimensions)\r\n        set = _sympify(set)\r\n        return Set.__new__(cls, shape, set)\r\n\r\n    @property\r\n    def shape(self):\r\n        return self.args[0]\r\n\r\n    @property\r\n    def set(self):\r\n        return self.args[1]\r\n\r\n    def _contains(self, other):\r\n        from sympy.matrices import ImmutableMatrix, MatrixExpr\r\n        if isinstance(other, list):\r\n            other = ImmutableMatrix(other)\r\n        if not isinstance(other, MatrixExpr):\r\n            return False\r\n        if other.shape != self.shape:\r\n            return False\r\n        # check that each element of other is in self.set\r\n\r\n    def _eval_is_subset(self, other):\r\n        pass\r\n\r\n    def _eval_is_superset(self, other):\r\n        pass\r\n\r\n```"", 'comment_created': datetime.datetime(2020, 7, 22, 7, 10, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}, {'comment_id': 458697539, 'comment_body': ""I think I wold put this in the matrices module rather than the sets module because the sets module is lower in the import chain.\r\n\r\nThe Set class looks reasonable except:\r\n\r\n1. I don't see why any of the arguments to `__new__` should be optional.\r\n\r\n2. Don't try to handle things like lists. The user should be using a MatrixExpr or something that would sympify to a MatrixExpr (e.g. mutable Matrix) and it's better for them to see a TypeError if they pass something else.\r\n\r\n3. You can check whether the elements are in set with:\r\n```\r\nreturn fuzzy_and(self.set.contains(x) for x in other)\r\n```\r\n\r\n4. The set can be finite if the underlying set is finite.\r\n\r\n5. There's no need for the `_eval_is_subset` methods."", 'comment_created': datetime.datetime(2020, 7, 22, 10, 35, 3, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 459297913, 'comment_body': ""> I think I wold put this in the matrices module rather than the sets module because the sets module is lower in the import chain.\r\n\r\nI'm afraid that it can end up with sets sprayed over different places for `Matrix, Vector, Array, ...` and I rarely expect people to put the category of MatrixSet in `matrices` than `sets`.\r\nActually, MatrixSet would be on top of import chains of both `matrices` and `sets` module, and the cyclic import problem may be avoided by just creating a new file."", 'comment_created': datetime.datetime(2020, 7, 23, 8, 40, 40, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 459355954, 'comment_body': ""Personally I would expect to find sets of matrices in the matrices package just like I would expect them to be defined in the wikipedia page for matrices rather than for sets or in a textbook on matrices rather than sets etc.\r\n\r\nIt's not just the cyclic import problem but the logical organisation of the code. The sets module should be a more fundamental module than matrices. If we insist on defining all sets there then it will end up importing every other package. The MatrixSet class will have almost no interaction with the other sets."", 'comment_created': datetime.datetime(2020, 7, 23, 10, 31, 1, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 459380086, 'comment_body': 'I don’t think that the matrix set can be decoupled from set module.\r\n\r\nFor example, once we start to support new types of objects for sets, FiniteSet, ImageSet, ConditionSet sets should be updated for them, because we will arrive into a question like ‘Why FiniteSet of matrices is not working with MatrixSet‘. And it can likely propagate up to every composite set objects like Union, Intersection, again', 'comment_created': datetime.datetime(2020, 7, 23, 11, 24, 5, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 459401125, 'comment_body': 'FiniteSet should not need to know anything about its elements. If we have to add special cases to those classes for matrices then something is wrong in the general structure.', 'comment_created': datetime.datetime(2020, 7, 23, 12, 9, 34, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 459406979, 'comment_body': 'I also expect sets to work only relying on the knowledge of containment and subset relation, but I think that there should be lots of simplification techniques that can make use of the nature of its elements.', 'comment_created': datetime.datetime(2020, 7, 23, 12, 20, 53, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}]","[{'commit_sha': '51886e9c6d2fd58347767ae4eb07dd33e9f5513e', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b73b2b1098d3b337389e47b30c24b467097a8b95', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22108c0cc2a64f2dffb34d51e042f48434b9461e', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ee6b0fde789670f42be97f2c7850f5139c36f0b', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45d3251a6b17ee65c74d476f2b5bc43c8b6b5a47', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cab36756ac014dd8855980d2c6bd9712bd9c0210', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd77cf4b3bc808a7a02f7a4fc7ed157d7b42545b6', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}]",Smit Lunagariya,55887635,smitlunagariya.mat18@itbhu.ac.in,User,,50,,37,95
454158988,[GSoC] Allow more than one RV in compound distribution,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->
Related to discussions in #19728 

#### Brief description of what is fixed or changed
Previously:
```py
>>> from sympy.stats import *
>>> N = Normal('N', 0, 1)
>>> M = Normal('M', N, 1)
>>> D = Normal('D', 0, M)
>>> density(D)(x)
Traceback (most recent call last):
  File ""/usr/lib/python3.6/code.py"", line 91, in runcode
    exec(code, self.locals)
  File ""<console>"", line 1, in <module>
  File ""/home/czgdp1807ssd/sympy_project/sympy/sympy/stats/rv.py"", line 882, in density
    return Density(expr, condition).doit(evaluate=evaluate, **kwargs)
  File ""/home/czgdp1807ssd/sympy_project/sympy/sympy/stats/rv.py"", line 832, in doit
    result = pspace(expr).compute_density(expr, **kwargs)
  File ""/home/czgdp1807ssd/sympy_project/sympy/sympy/stats/compound_rv.py"", line 82, in compute_density
    new_pspace = self._get_newpspace()
  File ""/home/czgdp1807ssd/sympy_project/sympy/sympy/stats/compound_rv.py"", line 60, in _get_newpspace
    Lambda(x, self.distribution.pdf(x)))
  File ""/home/czgdp1807ssd/sympy_project/sympy/sympy/stats/compound_rv.py"", line 171, in pdf
    raise NotImplementedError(""Compound Distributions for more than""
NotImplementedError: Compound Distributions for more than one random argument is not implemented yet.
```
After changing the marginalization algorithm:
```py
In [1]: from sympy.stats import *

In [2]: N = Normal('N', 0, 1)

In [3]: M = Normal('M', N, 1)

In [4]: D = Normal('D', 0, M)

In [5]: density(D)(x)
Out[5]:
⎧                                                                       π
⎪                         0                            for 2⋅│arg(x)│ ≤ ─
⎪                                                                       2
⎪
⎪∞

⎪⌠
⎪⎮     ⎛                 2       2         ⎞
⎪⎮     ⎜               -M      -M          ⎟    2
⎪⎮     ⎜               ────    ────        ⎟  -x
⎨⎮     ⎜⎛        ⎛M⎞⎞   4       4       ⎛M⎞⎟  ────
⎪⎮     ⎜⎜2 - erfc⎜─⎟⎟⋅ℯ       ℯ    ⋅erfc⎜─⎟⎟     2
⎪⎮     ⎜⎝        ⎝2⎠⎠                   ⎝2⎠⎟  2⋅M
⎪⎮  √2⋅⎜─────────────────── + ─────────────⎟⋅ℯ
⎪⎮     ⎝        4⋅√π               4⋅√π    ⎠
⎪⎮  ────────────────────────────────────────────── dM      otherwise
⎪⎮                      2⋅√π⋅M
⎪⌡
⎪-∞
⎩
```


#### Other comments


#### Release Notes

<!-- Write the release notes for this release below. See
https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more information
on how to write release notes. The bot will check your release notes
automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
* stats
  * Allowing `CompoundDistribution` to handle more than one random variables
<!-- END RELEASE NOTES -->
ping @czgdp1807 @Upabjojr @jmig5776 ",True,19808,https://api.github.com/repos/sympy/sympy/pulls/19808,https://github.com/sympy/sympy/pull/19808,closed,84,51,3,7,6,6,2,0,"[{'name': 'stats'}, {'name': 'GSoC'}]",2020-07-21 05:51:56+00:00,2020-07-30 07:03:38+00:00,781902.0,"9 days, 1:11:42","[{'comment_id': 458570604, 'comment_body': 'This is a global static variable overwrite. Is it the intended behaviour?', 'comment_created': datetime.datetime(2020, 7, 22, 6, 47, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 458584302, 'comment_body': 'No, that needs to be fixed...Thanks!', 'comment_created': datetime.datetime(2020, 7, 22, 7, 17, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}, {'comment_id': 458584431, 'comment_body': 'This is a bit weird. Value of static variables will be prone to change with every new object creation. I think these static variables were meant to be specific to each object rather than shared across all object.', 'comment_created': datetime.datetime(2020, 7, 22, 7, 17, 45, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 461157208, 'comment_body': ""This way of passing `evaluate=True` is a bit unusual... most often it's passed to `kwargs` so that it's mandatory to specify the parameter, like in `C.pdf(x, evaluate=True)`.\r\n\r\nBut that's just a curiosity... this looks good to me anyway."", 'comment_created': datetime.datetime(2020, 7, 27, 20, 42, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 461305115, 'comment_body': 'Thanks, I will change that.', 'comment_created': datetime.datetime(2020, 7, 28, 4, 7, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}, {'comment_id': 461351147, 'comment_body': 'Looks good to merge now?', 'comment_created': datetime.datetime(2020, 7, 28, 6, 38, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}]","[{'commit_sha': 'd0a01265770f02c51e66b6761adfe4908ed91404', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8cf8e561111ab932856f42067e7cf57d4eb2d422', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05691ef3916d65c0bf4ce2c5bf92f4e9dd73367f', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0eef111eb1cd4d4a89e89b3e3aca53a8fc03d215', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'baac95174599907412e11c32fb85d6d38331acaf', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05f28f228fd02ddf5e7bbc946c7c8b66169b438d', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a8f1d633e5283aba4f3adfa8e758304cbf67c025', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}]",Smit Lunagariya,55887635,smitlunagariya.mat18@itbhu.ac.in,User,,50,,37,95
455044292,[GSoC]Change return type of `P` and `E` with `evaluate=False`,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->
Fixes #19798

#### Brief description of what is fixed or changed
Change in the return types of P and E with `evaluate=False`. Examples:
```py
>>> from sympy.stats import *
>>> X = Normal('X',1,2)
>>> P(X > 1, evaluate=False)
Probability(X > 1)
>>> E(X, evaluate=False)
Expectation(X)
```

#### Other comments


#### Release Notes

<!-- Write the release notes for this release below. See
https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more information
on how to write release notes. The bot will check your release notes
automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
* stats
   * Change in return type of `P` and `E` with `evaluate=False`. With `evaluate=False`, `P` and `E` are made to return `Probability` and `Expectation` object respectively.
<!-- END RELEASE NOTES -->
ping @czgdp1807 @Upabjojr @jmig5776 ",True,19819,https://api.github.com/repos/sympy/sympy/pulls/19819,https://github.com/sympy/sympy/pull/19819,closed,74,50,8,4,4,5,2,0,"[{'name': 'stats'}, {'name': 'GSoC'}]",2020-07-22 11:00:18+00:00,2020-07-26 20:38:41+00:00,380303.0,"4 days, 9:38:23","[{'comment_id': 458917081, 'comment_body': '```suggestion\r\n    message = (""Since version 1.7, using `evaluate=False` returns `Expectation` object. ""\r\n              ""If you want unevaluated Integral/Sum use ""\r\n              ""`E(expr, condition, evaluate=False).rewrite(Integral)`"")\r\n```', 'comment_created': datetime.datetime(2020, 7, 22, 16, 21, 28, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 458917674, 'comment_body': '```suggestion\r\n    message = (""Since version version 1.7, using `evaluate=False` returns `Probability` object. ""\r\n              ""If you want unevaluated Integral/Sum use ""\r\n              ""`P(condition, given_condition, evaluate=False).rewrite(Integral)`"")\r\n```', 'comment_created': datetime.datetime(2020, 7, 22, 16, 22, 2, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 460177063, 'comment_body': 'maybe add a TODO to remember to restore the original expression once we will remove the warning.', 'comment_created': datetime.datetime(2020, 7, 24, 17, 0, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 460177446, 'comment_body': 'what about using `.dummy_eq( )` instead of comparing the strings? There was a bug with `.dummy_eq( )` some time ago, but it has been solved (I believe).', 'comment_created': datetime.datetime(2020, 7, 24, 17, 1, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 460177912, 'comment_body': 'Maybe a TODO here to remember future developers to remove the `filter_warnings` in the tests once the warning is removed.', 'comment_created': datetime.datetime(2020, 7, 24, 17, 2, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}]","[{'commit_sha': '12a7a2610f7ca93f1173144e6315614b0053de5f', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3c369fb2e018b39c7871edacffe2ae5e173394b', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '410e25689a4094eabaa5dad886df8f7a81ba24cd', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b2db510dd36af5a031d2d9dd7a118242910bee59', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}]",Smit Lunagariya,55887635,smitlunagariya.mat18@itbhu.ac.in,User,,50,,37,95
456974003,[GSoC] Added sampling for Joint Random Variables,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->
`sample` is made to support sampling from Joint RVs
#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->
Fixes #17622

#### Brief description of what is fixed or changed


#### Other comments


#### Release Notes

<!-- Write the release notes for this release below. See
https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more information
on how to write release notes. The bot will check your release notes
automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
* stats
  * Added sampling of Joint RVs from external libraries

<!-- END RELEASE NOTES -->
ping @czgdp1807 @Upabjojr @jmig5776 ",True,19848,https://api.github.com/repos/sympy/sympy/pulls/19848,https://github.com/sympy/sympy/pull/19848,closed,220,10,3,4,11,1,2,0,"[{'name': 'stats'}, {'name': 'GSoC'}]",2020-07-27 07:40:44+00:00,2020-08-02 04:39:45+00:00,507541.0,"5 days, 20:59:01","[{'comment_id': 462785619, 'comment_body': 'Numbers would be better i.e., samp_list.', 'comment_created': datetime.datetime(2020, 7, 30, 7, 3, 1, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}]","[{'commit_sha': '299ba631840fa260f883a811117f86dc62f0b127', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3541f5a7ce39ff810aa9203358d8eaf0c3295011', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5d9734db280f67b489153dc395ffff7a1daafeb', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '017620a8681d788e6187e2e181ef33deddd2364b', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}]",Smit Lunagariya,55887635,smitlunagariya.mat18@itbhu.ac.in,User,,50,,37,95
458943131,[GSoC] Added sampling from Matrix Distributions,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->


#### Brief description of what is fixed or changed


#### Other comments


#### Release Notes

<!-- Write the release notes for this release below. See
https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more information
on how to write release notes. The bot will check your release notes
automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
* stats
   * Added sampling for Matrix Distributions
<!-- END RELEASE NOTES -->
ping @czgdp1807 @Upabjojr @jmig5776 ",True,19857,https://api.github.com/repos/sympy/sympy/pulls/19857,https://github.com/sympy/sympy/pull/19857,closed,202,7,4,2,3,0,2,0,"[{'name': 'stats'}, {'name': 'GSoC'}]",2020-07-30 07:50:29+00:00,2020-08-02 04:39:21+00:00,247732.0,"2 days, 20:48:52",[],"[{'commit_sha': 'a92c7ec374a315c27ff6e58a4724089faa947af6', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ac5e4c78ec258a7294d777af62e6ee071c851fb', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}]",Smit Lunagariya,55887635,smitlunagariya.mat18@itbhu.ac.in,User,,50,,37,95
455481514,Added `MatrixSet` to represent set of Matrices,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->
Related comment https://github.com/sympy/sympy/pull/19795#discussion_r457919332

#### Brief description of what is fixed or changed
MatrixSet represents the set of matrices of given shape over the given set.
Examples:
```py
>>> from sympy.matrices import MatrixSet, Matrix
>>> from sympy import S, I
>>> M = MatrixSet(2, 2, set=S.Reals)
>>> X = Matrix([[1, 2], [3, 4]])
>>> X in M
True
>>> X = Matrix([[1, 2], [I, 4]])
>>> X in M
False
```

#### Other comments
- [x] Add docs and class `MatrixSet`
- [x] Add tests

#### Release Notes

<!-- Write the release notes for this release below. See
https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more information
on how to write release notes. The bot will check your release notes
automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
* matrices
  * Added class `MatrixSet` to represent the set of matrices
<!-- END RELEASE NOTES -->
ping @oscarbenjamin ",True,19826,https://api.github.com/repos/sympy/sympy/pulls/19826,https://github.com/sympy/sympy/pull/19826,closed,92,6,5,3,2,7,2,0,"[{'name': 'matrices'}, {'name': 'GSoC'}]",2020-07-23 05:02:27+00:00,2020-07-24 11:57:34+00:00,111307.0,"1 day, 6:55:07","[{'comment_id': 459299209, 'comment_body': ""I don't think that this is true when one of `n, m` can take infinite values"", 'comment_created': datetime.datetime(2020, 7, 23, 8, 42, 56, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 459301769, 'comment_body': ""I'd leave this as False. I don't think that the properties of complex numbers carry over to matrix easily."", 'comment_created': datetime.datetime(2020, 7, 23, 8, 47, 34, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 459302532, 'comment_body': 'You should check the types here', 'comment_created': datetime.datetime(2020, 7, 23, 8, 48, 52, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 459303514, 'comment_body': 'This should return None if one have symbolic shape and the other have numeric shape, or much more cases when the equality of shape is logically undetermined.', 'comment_created': datetime.datetime(2020, 7, 23, 8, 50, 40, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 459357916, 'comment_body': ""It's more usual to use `self.args[:2]` rather than `self.args[0:2]`.\r\n\r\nI really don't like the ` = property(...)` style. That's not how decorators are normally used. There can be situations where it possibly makes sense but here I think it's just making the code confusing. It is generally better to stick to idiomatic Python code rather than try to save a few lines."", 'comment_created': datetime.datetime(2020, 7, 23, 10, 35, 3, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 459561239, 'comment_body': 'Is there something similar in SymPy, we should be consistent for outputs.  Otherwise, agreed with @sylee957 ', 'comment_created': datetime.datetime(2020, 7, 23, 16, 4, 17, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 459980397, 'comment_body': 'Perhaps:\r\n\r\n```suggestion\r\n    given set.\r\n    \r\n    .. versionadded:: 1.7.0\r\n```', 'comment_created': datetime.datetime(2020, 7, 24, 10, 45, 44, tzinfo=datetime.timezone.utc), 'commenter': 'eric-wieser', 'type': 'User'}]","[{'commit_sha': '0bd1a3f01685dc9578841259da64f407192c5e13', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3332256cc69fc30d2f13f57da533248975c39326', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1599feeeb38b9c363c6b963989ab076e2c09afbc', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}]",Smit Lunagariya,55887635,smitlunagariya.mat18@itbhu.ac.in,User,,50,,37,95
451772917,[GSoC] Added Matrix Normal and Wishart Distribution,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->
FIxes #19723
Closes #17204
#### Brief description of what is fixed or changed


#### Other comments


#### Release Notes

<!-- Write the release notes for this release below. See
https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more information
on how to write release notes. The bot will check your release notes
automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
* stats
  * Added `Wishart` and `MatrixNormal` Distributions
<!-- END RELEASE NOTES -->
ping @czgdp1807 @Upabjojr @jmig5776 ",True,19795,https://api.github.com/repos/sympy/sympy/pulls/19795,https://github.com/sympy/sympy/pull/19795,closed,252,11,4,7,7,13,2,0,"[{'name': 'stats'}, {'name': 'GSoC'}]",2020-07-18 07:29:53+00:00,2020-07-27 20:21:40+00:00,823907.0,"9 days, 12:51:47","[{'comment_id': 456878107, 'comment_body': ""Make a new class for encapsulating common features of `MatrixGammaDistribution` and `WishartDistribution`, then inherit it in both these classes. Reuse the code from this class. Something like,\r\n```python\r\nclass _HelperMatrixGammaWishart(MatrixDistribution):\r\n    \r\n    _argnames = ('scale_matrix')\r\n\r\n    def __new__(cls, scale_matrix):\r\n        ...\r\n    \r\n    @staticmethod\r\n    def check(scale_matrix):\r\n        ...\r\n\r\n    @property\r\n    def set(self):\r\n        ...\r\n\r\n    @property\r\n    def dimension(self):\r\n        ...\r\n\r\n    def pdf(self, x, alpha, beta):\r\n        ...\r\n```\r\nOR\r\nSimply a new class `WishartDistribution` can be defined without using any code from `MatrixGammaDistribution`. \r\n\r\nI would prefer the second approach as it's simple and not much code will be repeated."", 'comment_created': datetime.datetime(2020, 7, 19, 8, 21, 43, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 457682419, 'comment_body': 'Are you sure this is the correct way to call `ProductSet`? ', 'comment_created': datetime.datetime(2020, 7, 20, 20, 47, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 457698666, 'comment_body': ""I don't know this code but that would be the correct way if you wanted to create a set of 2-tuples where each element is a k-tuple e.g.:\r\n```\r\nIn [8]: S = ProductSet(Reals**3, Reals**3)                                                                             \r\n\r\nIn [9]: ((1, 2, 3), (4, 5, 6)) in S                                                                                    \r\nOut[9]: True\r\n```"", 'comment_created': datetime.datetime(2020, 7, 20, 21, 21, 4, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 457830041, 'comment_body': 'I meant to represent <b>R<sup>k x k</sup></b> using the `ProductSet`', 'comment_created': datetime.datetime(2020, 7, 21, 4, 32, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}, {'comment_id': 457919332, 'comment_body': ""Translating that literally would give `Reals ** (k * k)` which is the set of `k**2`-tuples of real numbers. If you mean for this to be the set of `k x k` *matrices* over the reals then you'll need a new set class to represent that."", 'comment_created': datetime.datetime(2020, 7, 21, 8, 16, 51, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 458567022, 'comment_body': '>  If you mean for this to be the set of `k x k` _matrices_ over the reals\r\n\r\nYes, I meant to represent `k x k` _matrices_ over the reals.', 'comment_created': datetime.datetime(2020, 7, 22, 6, 38, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}, {'comment_id': 458580973, 'comment_body': ""Should the new class be added under `sets/fancysets.py`?\r\nAlso is the following code is going correct way as I'm not much familiar with `sets` code?\r\n```py\r\nclass MatrixSet(Set):\r\n    is_iterable = False\r\n    is_empty = False\r\n    is_finite_set = False\r\n\r\n    def __new__(cls, shape=(), set=Reals):\r\n        shape = (_sympify(x) for x in dimensions)\r\n        set = _sympify(set)\r\n        return Set.__new__(cls, shape, set)\r\n\r\n    @property\r\n    def shape(self):\r\n        return self.args[0]\r\n\r\n    @property\r\n    def set(self):\r\n        return self.args[1]\r\n\r\n    def _contains(self, other):\r\n        from sympy.matrices import ImmutableMatrix, MatrixExpr\r\n        if isinstance(other, list):\r\n            other = ImmutableMatrix(other)\r\n        if not isinstance(other, MatrixExpr):\r\n            return False\r\n        if other.shape != self.shape:\r\n            return False\r\n        # check that each element of other is in self.set\r\n\r\n    def _eval_is_subset(self, other):\r\n        pass\r\n\r\n    def _eval_is_superset(self, other):\r\n        pass\r\n\r\n```"", 'comment_created': datetime.datetime(2020, 7, 22, 7, 10, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}, {'comment_id': 458697539, 'comment_body': ""I think I wold put this in the matrices module rather than the sets module because the sets module is lower in the import chain.\r\n\r\nThe Set class looks reasonable except:\r\n\r\n1. I don't see why any of the arguments to `__new__` should be optional.\r\n\r\n2. Don't try to handle things like lists. The user should be using a MatrixExpr or something that would sympify to a MatrixExpr (e.g. mutable Matrix) and it's better for them to see a TypeError if they pass something else.\r\n\r\n3. You can check whether the elements are in set with:\r\n```\r\nreturn fuzzy_and(self.set.contains(x) for x in other)\r\n```\r\n\r\n4. The set can be finite if the underlying set is finite.\r\n\r\n5. There's no need for the `_eval_is_subset` methods."", 'comment_created': datetime.datetime(2020, 7, 22, 10, 35, 3, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 459297913, 'comment_body': ""> I think I wold put this in the matrices module rather than the sets module because the sets module is lower in the import chain.\r\n\r\nI'm afraid that it can end up with sets sprayed over different places for `Matrix, Vector, Array, ...` and I rarely expect people to put the category of MatrixSet in `matrices` than `sets`.\r\nActually, MatrixSet would be on top of import chains of both `matrices` and `sets` module, and the cyclic import problem may be avoided by just creating a new file."", 'comment_created': datetime.datetime(2020, 7, 23, 8, 40, 40, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 459355954, 'comment_body': ""Personally I would expect to find sets of matrices in the matrices package just like I would expect them to be defined in the wikipedia page for matrices rather than for sets or in a textbook on matrices rather than sets etc.\r\n\r\nIt's not just the cyclic import problem but the logical organisation of the code. The sets module should be a more fundamental module than matrices. If we insist on defining all sets there then it will end up importing every other package. The MatrixSet class will have almost no interaction with the other sets."", 'comment_created': datetime.datetime(2020, 7, 23, 10, 31, 1, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 459380086, 'comment_body': 'I don’t think that the matrix set can be decoupled from set module.\r\n\r\nFor example, once we start to support new types of objects for sets, FiniteSet, ImageSet, ConditionSet sets should be updated for them, because we will arrive into a question like ‘Why FiniteSet of matrices is not working with MatrixSet‘. And it can likely propagate up to every composite set objects like Union, Intersection, again', 'comment_created': datetime.datetime(2020, 7, 23, 11, 24, 5, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 459401125, 'comment_body': 'FiniteSet should not need to know anything about its elements. If we have to add special cases to those classes for matrices then something is wrong in the general structure.', 'comment_created': datetime.datetime(2020, 7, 23, 12, 9, 34, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 459406979, 'comment_body': 'I also expect sets to work only relying on the knowledge of containment and subset relation, but I think that there should be lots of simplification techniques that can make use of the nature of its elements.', 'comment_created': datetime.datetime(2020, 7, 23, 12, 20, 53, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}]","[{'commit_sha': '51886e9c6d2fd58347767ae4eb07dd33e9f5513e', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b73b2b1098d3b337389e47b30c24b467097a8b95', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22108c0cc2a64f2dffb34d51e042f48434b9461e', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ee6b0fde789670f42be97f2c7850f5139c36f0b', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45d3251a6b17ee65c74d476f2b5bc43c8b6b5a47', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cab36756ac014dd8855980d2c6bd9712bd9c0210', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd77cf4b3bc808a7a02f7a4fc7ed157d7b42545b6', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}]",Smit Lunagariya,55887635,smitlunagariya.mat18@itbhu.ac.in,User,,50,,37,95
465183128,[GSoC] Move external libraries import inside functions,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->
FIxes #19930 

#### Brief description of what is fixed or changed


#### Other comments


#### Release Notes

<!-- Write the release notes for this release below. See
https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more information
on how to write release notes. The bot will check your release notes
automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
NO ENTRY
<!-- END RELEASE NOTES -->
ping @Upabjojr @czgdp1807 ",True,19934,https://api.github.com/repos/sympy/sympy/pulls/19934,https://github.com/sympy/sympy/pull/19934,closed,180,182,5,4,6,3,2,0,"[{'name': 'stats'}, {'name': 'GSoC'}]",2020-08-09 18:03:57+00:00,2020-08-12 11:14:16+00:00,234619.0,"2 days, 17:10:19","[{'comment_id': 467750895, 'comment_body': ""While you're here, this simplifies to\r\n```python\r\nreturn numpy_rv_map.get(dist.__class__.__name__, lambda dist, size: None)(dist, size)\r\n```\r\nor if that feels ugly\r\n```python\r\nf = numpy_rv_map.get(dist.__class__.__name__)\r\nif f is None:\r\n    return None\r\nreturn f(dist, size)\r\n```"", 'comment_created': datetime.datetime(2020, 8, 10, 8, 18, 3, tzinfo=datetime.timezone.utc), 'commenter': 'eric-wieser', 'type': 'User'}, {'comment_id': 467751569, 'comment_body': 'Although I suppose there are a lot of these, so fine to leave to another PR.', 'comment_created': datetime.datetime(2020, 8, 10, 8, 19, 26, tzinfo=datetime.timezone.utc), 'commenter': 'eric-wieser', 'type': 'User'}, {'comment_id': 469173408, 'comment_body': 'I would leave this for another PR. We should use subclasses rather than dictionaries.', 'comment_created': datetime.datetime(2020, 8, 12, 10, 52, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}]","[{'commit_sha': 'cf8b4beb8783138727bb049aef1259f34d1f0a83', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05e5aa90fa25c1655ea40c894f9cd05110bc8e59', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd2d61463e83e65eeac695a27e63ba9b2a385d0c8', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '81500d767c32d4f79d3de0f461262798ef00f5cc', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}]",Smit Lunagariya,55887635,smitlunagariya.mat18@itbhu.ac.in,User,,50,,37,95
468802586,[GSoC] Updates stats docs in `doc`,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->


#### Brief description of what is fixed or changed


#### Other comments


#### Release Notes

<!-- Write the release notes for this release below. See
https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more information
on how to write release notes. The bot will check your release notes
automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
NO ENTRY
<!-- END RELEASE NOTES -->",True,19975,https://api.github.com/repos/sympy/sympy/pulls/19975,https://github.com/sympy/sympy/pull/19975,closed,77,25,5,7,4,5,3,0,"[{'name': 'Documentation'}, {'name': 'stats'}, {'name': 'GSoC'}]",2020-08-17 12:33:02+00:00,2020-08-25 07:14:34+00:00,672092.0,"7 days, 18:41:32","[{'comment_id': 475249760, 'comment_body': 'The reference, https://www.probabilitycourse.com in these three processes should point to their respective pages under the website, for now it is just landing to the home page.', 'comment_created': datetime.datetime(2020, 8, 23, 18, 23, 13, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 475250111, 'comment_body': 'New lines missing after, `:` in the following code,\r\nhttps://github.com/sympy/sympy/blob/4b23967d96ec120dd479fce8e04851a6323f86c3/sympy/stats/symbolic_probability.py#L580-L594\r\n\r\nHow the docs look like right now?\r\n```python\r\nTo evaluate the result of Moment use doit: >>> M.doit() mu**3 - 3*mu**2 + 3*mu*sigma**2 + 3*mu - 3*sigma**2 - 1\r\n\r\nRewrite the Moment expression in terms of Expectation: >>> M.rewrite(Expectation) Expectation((X - 1)**3)\r\n\r\nRewrite the Moment expression in terms of Probability: >>> M.rewrite(Probability) Integral((x - 1)**3*Probability(Eq(X, x)), (x, -oo, oo))\r\n\r\nRewrite the Moment expression in terms of Integral: >>> M.rewrite(Integral) Integral(sqrt(2)*(X - 1)**3*exp(-(X - mu)**2/(2*sigma**2))/(2*sqrt(pi)*sigma), (X, -oo, oo))\r\n```', 'comment_created': datetime.datetime(2020, 8, 23, 18, 26, 42, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 475250168, 'comment_body': 'Similar issue here.', 'comment_created': datetime.datetime(2020, 8, 23, 18, 27, 25, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 475332620, 'comment_body': 'Okay!', 'comment_created': datetime.datetime(2020, 8, 24, 4, 13, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}, {'comment_id': 475332685, 'comment_body': 'Yes, it will require a new line. Fixed it!', 'comment_created': datetime.datetime(2020, 8, 24, 4, 14, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}]","[{'commit_sha': '591d346814753299e329185070e61384c69741db', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef726528252aa94960c3250b3467029548704e4c', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b23967d96ec120dd479fce8e04851a6323f86c3', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '562338683c7a60f33d86bb8268793407211dcd55', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b3b70b4eb57c1055031464712f9e81d89fa4dcb', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b442e0cd6c9a8cc1e6f4ae6cf50ee217ece0fe60', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '708aca678a4c04797fc87a53d1d1e03e737072b5', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}]",Smit Lunagariya,55887635,smitlunagariya.mat18@itbhu.ac.in,User,,50,,37,95
467256686,[GSoC] Handle Joint Rvs Expectation,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->
Fixes #19952 

#### Brief description of what is fixed or changed
1. Fixes `Expectation` to handle Joint RVs

```py
>>> s1, s2, s3 = symbols('sigma1:4', positive=True)
>>> x, y, z = symbols('x,y,z')
>>> N = Normal(""N"", [x, y, z], diagonalize_vector(Matrix([s1, s2, s3])))
>>> E(N).simplify() # this no longer raises error
Matrix([[x], [y], [z]])
```

2. Fixes `variance` to handle Joint RVs

```py
>>> s1, s2, s3 = symbols('sigma1:4', positive=True)
>>> x, y, z = symbols('x,y,z')
>>> N = Normal(""N"", [x, y, z], diagonalize_vector(Matrix([s1, s2, s3])))
>>> variance(N).simplify() # this no longer raises error. Though it takes much longer to compute
Matrix([[sigma1, 0, 0], [0, sigma2, 0], [0, 0, sigma3]])
```

3. Return type changes with `evaluate=False`
```py
>>> from sympy.stats import *
>>> N = Normal('N', 1, 2)
>>> variance(N, evaluate=False) # changed the return type with evaluate=False
Variance(N)
>>> Variance(N)
Variance(N)
>>> Variance(N).doit() # Added doit in Variance
4
```

4. Return type changes with `evaluate=False`
```py
>>> from sympy.stats import *
>>> N = Normal('N', 1, 2)
>>> X = Normal('X', 3, 4)
>>> covariance(N, X, evaluate=False) # changed the return type with evaluate=False
Covariance(N, X)
>>> Covariance(N, X)
Covariance(N, X)
>>> Covariance(N, X).doit() # Added doit in Covariance
0
```

#### Other comments


#### Release Notes

<!-- Write the release notes for this release below. See
https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more information
on how to write release notes. The bot will check your release notes
automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
* stats
    * `E` is made to handle Joint Random Symbols
    *  `variance` is fixed to handle Joint Random Variables
    *  `variance` return symbolic `Variance` object with `evaluate=False`
    *  `covariance` return symbolic `Coariance` object with `evaluate=False`
    *  Added `doit` in symbolic `Variance` class
    *  Added `doit` in symbolic `Covariance` class
<!-- END RELEASE NOTES -->
ping @czgdp1807 @Upabjojr @jmig5776 ",False,19957,https://api.github.com/repos/sympy/sympy/pulls/19957,https://github.com/sympy/sympy/pull/19957,open,163,76,11,4,19,15,4,0,"[{'name': 'stats'}, {'name': 'GSoC'}, {'name': 'Please take over'}, {'name': 'Merge conflict'}]",2020-08-13 09:13:05+00:00,,0.0,,"[{'comment_id': 469831098, 'comment_body': 'what happens without `simplify()`?', 'comment_created': datetime.datetime(2020, 8, 13, 9, 45, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 470007353, 'comment_body': 'This code should work without `positive=True` as well. On my computer, it hangs.', 'comment_created': datetime.datetime(2020, 8, 13, 14, 46, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 470024980, 'comment_body': 'May be it can be an issue with the Integrals?', 'comment_created': datetime.datetime(2020, 8, 13, 15, 10, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}, {'comment_id': 470026913, 'comment_body': ""This results were a bit hard to verfiy without `simplify`:\r\n```py\r\n>>> m = Normal('A', [x, y], [[1, 0], [0, 1]])\r\n>>> E(m)\r\nMatrix([\r\n[\r\n    x*(2 - erfc(sqrt(2)*y/2))/2 + x*erfc(sqrt(2)*y/2)/2],\r\n[-y*(-2*sqrt(pi)*(2 - erfc(sqrt(2)*y/2)) - 2*sqrt(2)*exp(-y**2/2)/y)/(4*sqrt(pi)) - y*(-2*sqrt(pi)*erf\r\nc(sqrt(2)*y/2) + 2*sqrt(2)*exp(-y**2/2)/y)/(4*sqrt(pi))]])\r\n```"", 'comment_created': datetime.datetime(2020, 8, 13, 15, 13, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}, {'comment_id': 470036220, 'comment_body': 'I checked on one of integral and it produces two different results based in assumptions:\r\n```py\r\n>>> sigma1, sigma2, sigma3 = symbols(\'sigma1:4\')\r\n>>> N = Normal(""N"", [x, y, z], diagonalize_vector(Matrix([s1, s2, s3])))\r\n>>> expr = sqrt(2)*exp((-z + N[2])*(z/2 - N[2]/2)/sigma3 + (-y + N[1])*(y/2 - N[1]/2)/sigma2 + (-x + N[0])*(x/2 - N[0]/2)/sigma1)*N[0]/(4*pi**(3/2)*sqrt(sigma1)*sqrt(sigma2)*sqrt(sigma3))\r\n>>> ans1 = integrate(ex, (N[0], -oo, oo), (N[1], -oo, oo), (N[2], -oo, oo))\r\n>>> ans1\r\noo*sign(exp(-z**2/(2*sigma3) + z*N[2]/sigma3 - N[2]**2/(2*sigma3) - y**2/(2*sigma2) + y*N[1]/sigma2 - N[1]**2/(2*sigma2) - x**2/(2*sigma1) + x*N[0]/sigma1 - N[0]**2/(2*sigma1))*N[0]/(sqrt(sigma1)*sqrt(sigma2)*sqrt(sigma3)))\r\n>>> ans1.simplify() # this hangs on my PC\r\n```\r\n\r\nChanging the assumption:\r\n```py\r\n>>> sigma1, sigma2, sigma3 = symbols(\'sigma1:4\', positive=True)\r\n>>> N = Normal(""N"", [x, y, z], diagonalize_vector(Matrix([s1, s2, s3])))\r\n>>> expr = sqrt(2)*exp((-z + N[2])*(z/2 - N[2]/2)/sigma3 + (-y + N[1])*(y/2 - N[1]/2)/sigma2 + (-x + N[0])*(x/2 - N[0]/2)/sigma1)*N[0]/(4*pi**(3/2)*sqrt(sigma1)*sqrt(sigma2)*sqrt(sigma3))\r\n>>> ans2 = integrate(ex, (N[0], -oo, oo), (N[1], -oo, oo), (N[2], -oo, oo))\r\n>>> ans2\r\nx*(2 - erfc(sqrt(2)*z/(2*sqrt(sigma3))))/2 + x*erfc(sqrt(2)*z/(2*sqrt(sigma3)))/2\r\n>>> ans2.simplify()\r\nx\r\n```\r\n', 'comment_created': datetime.datetime(2020, 8, 13, 15, 26, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}, {'comment_id': 470042995, 'comment_body': ""It's not probably an issue, may be that's how it is. It depends on the default assumptions of symbols.\r\n```python\r\nIPython console for SymPy 1.7.dev (Python 3.6.9-64-bit) (ground types: python)\r\n\r\nThese commands were executed:\r\n>>> from __future__ import division\r\n>>> from sympy import *\r\n>>> x, y, z, t = symbols('x y z t')\r\n>>> k, m, n = symbols('k m n', integer=True)\r\n>>> f, g, h = symbols('f g h', cls=Function)\r\n>>> init_printing()\r\n\r\nDocumentation can be found at https://docs.sympy.org/dev\r\n\r\n\r\nIn [1]: from sympy.stats import *                                               \r\n\r\nIn [2]: x.is_complex                                                            \r\n\r\nIn [3]: x.is_positive                                                           \r\n\r\nIn [4]: x.is_real                                                               \r\n\r\nIn [5]: x.is_negative                                                           \r\n\r\nIn [6]: k.is_positive                                                           \r\n\r\nIn [7]: k.is_integer                                                            \r\nOut[7]: True\r\n```\r\nResults with correct assumptions should be correct in any case, IMHO."", 'comment_created': datetime.datetime(2020, 8, 13, 15, 36, 22, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 470044323, 'comment_body': 'See, https://github.com/sympy/sympy/pull/19957/files#diff-f5bd154f958178a67c12702770445325R36-R45 \r\nType checks can create problems, not for this PR but still a design issue in my opinion.', 'comment_created': datetime.datetime(2020, 8, 13, 15, 38, 25, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 470533797, 'comment_body': ""> May be it can be an issue with the Integrals?\r\n\r\nDid you check the integral produced by the univariate RV? I works perfectly. Is the integral different in the multivariate case? This kind of multivariate RV is simply a tuple of three independent RVs, I'm a bit surprised by the different behaviour of `Integral`."", 'comment_created': datetime.datetime(2020, 8, 14, 10, 5, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 470534238, 'comment_body': 'The univariate normal distribution works without `.simplify()`. Can you check why?', 'comment_created': datetime.datetime(2020, 8, 14, 10, 6, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 470545391, 'comment_body': ""> The univariate normal distribution works without `.simplify()`.\r\n\r\nThat's because for univariate RVs, one the way is to calculate using moment generating function. If we comment out the following lines:\r\nhttps://github.com/sympy/sympy/blob/8f6bc5947262754fe623d30682e47b7e01580bf7/sympy/stats/crv_types.py#L2857-L2871\r\n\r\nThe following will be affected and return from line 380:\r\nhttps://github.com/sympy/sympy/blob/8f6bc5947262754fe623d30682e47b7e01580bf7/sympy/stats/crv.py#L378-L380\r\n\r\nTherefore if we comment out the above lines we get the following results:\r\n```py\r\n>>> x = symbols('x')\r\n>>> s1 = symbols('sigma1', positive=True)\r\n>>> N = Normal('N', x, s1)\r\n>>> E(N)\r\n-x*(-2*sqrt(2)*sigma1*exp(-x**2/(2*sigma1**2))/x - 2*sqrt(pi)*(2 - erfc(sqrt(2)*x/(2*sigma1))))/(4*sqrt(pi)) - x*(2*sqrt(2)*sigma1*exp(-x**2/(2*sigma1**2))/x - 2*sqrt(pi)*erfc(sqrt(2)*x/(2*sigma1)))/(4*sqrt(pi))\r\n>>> E(N).simplify()\r\nx\r\n```"", 'comment_created': datetime.datetime(2020, 8, 14, 10, 30, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}, {'comment_id': 470547288, 'comment_body': ""Commenting out the lines from https://github.com/sympy/sympy/pull/19957#discussion_r470545391\r\nI get the following results:\r\n```py\r\n>>> x, s1 = symbols('x, sigma1')\r\n>>> N = Normal('N', x, s1)\r\n>>> E(N)\r\nPiecewise((-x*(-2*sqrt(2)*sigma1*exp(-x**2/(2*sigma1**2))/x - 2*sqrt(pi)*(2 - erfc(sqrt(2)*x/(2*sigma1))))/(4*sqrt(pi)) - x*(2*sqrt(2)*sigma1*exp(-x**2/(2*sigma1**2))/x - 2*sqrt(pi)*erfc(sqrt(2)*x/(2*sigma1)))/(4*sqrt(pi)), ((2*Abs(arg(sigma1)) < pi/2) | ((2*Abs(arg(sigma1)) <= pi/2) & (Abs(4*arg(sigma1) - 2*arg(x)) < pi)) | ((2*Abs(arg(sigma1)) < pi/2) & (Abs(4*arg(sigma1) - 2*arg(x)) <= pi)) | ((2*Abs(arg(sigma1)) < pi/2) & (Abs(4*arg(sigma1) - 2*arg(x)) < pi))) & ((2*Abs(arg(sigma1)) < pi/2) | ((2*Abs(arg(sigma1)) <= pi/2) & (Abs(-4*arg(sigma1) + 2*arg(x) + 2*pi) < pi)) | ((2*Abs(arg(sigma1)) < pi/2) & (Abs(-4*arg(sigma1) + 2*arg(x) + 2*pi) <= pi)) | ((2*Abs(arg(sigma1)) < pi/2) & (Abs(-4*arg(sigma1) + 2*arg(x) + 2*pi) < pi)))), (Integral(sqrt(2)*N*exp(-(N - x)**2/(2*sigma1**2))/(2*sqrt(pi)*sigma1), (N, -oo, oo)), True))\r\n```\r\nThe results differ because of the ad-hoc methods that are present in `Normal`."", 'comment_created': datetime.datetime(2020, 8, 14, 10, 35, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}, {'comment_id': 470555378, 'comment_body': 'OK. All right, this conversation is resolved for me.', 'comment_created': datetime.datetime(2020, 8, 14, 10, 55, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 470556601, 'comment_body': 'Do you think we can port the moment-generating function approach to multivariate RVs?', 'comment_created': datetime.datetime(2020, 8, 14, 10, 58, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 470564254, 'comment_body': '> moment-generating function approach to multivariate RVs?\r\n\r\nI need to find some readings related to this topic', 'comment_created': datetime.datetime(2020, 8, 14, 11, 17, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}, {'comment_id': 470946097, 'comment_body': ""OK, no problem. Let's focus on fixing and testing the code first."", 'comment_created': datetime.datetime(2020, 8, 15, 6, 43, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}]","[{'commit_sha': '73ad56f3240cd5b4822ea0cc718c9ea2faff5992', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '976a7c02b5d420ab0f29c0cbd7bbdc5429c7ebd2', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4671c9ff862532d282eee10d9c91b32e79f629a4', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b48ed7f712e0a251da7b1a9f73b915530901c4b', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}]",Smit Lunagariya,55887635,smitlunagariya.mat18@itbhu.ac.in,User,,50,,37,95
462535396,[GSoC] Added Mixture distribution,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->
Discussions in #18730

#### Brief description of what is fixed or changed


#### Other comments
- [x] Add tests and classes
- [ ] Add docs

#### Release Notes

<!-- Write the release notes for this release below. See
https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more information
on how to write release notes. The bot will check your release notes
automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
* stats
    * Added Mixture Distribution
<!-- END RELEASE NOTES -->
ping @czgdp1807 @Upabjojr @jmig5776 ",False,19886,https://api.github.com/repos/sympy/sympy/pulls/19886,https://github.com/sympy/sympy/pull/19886,open,313,0,5,2,19,8,3,0,"[{'name': 'stats'}, {'name': 'GSoC'}, {'name': 'Merge conflict'}]",2020-08-04 05:22:06+00:00,,0.0,,"[{'comment_id': 466179200, 'comment_body': ""The weights should be automatically normalised whether they sum to 1 or don't."", 'comment_created': datetime.datetime(2020, 8, 6, 6, 43, 3, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 466179303, 'comment_body': 'A distribution would be better.', 'comment_created': datetime.datetime(2020, 8, 6, 6, 43, 20, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 466179631, 'comment_body': 'Instead of creating a new Mixture RV, a user should be able to define a new distribution using, `MixtureDistribution` and then pass it on to custom RV API. `Mixture` can be removed.', 'comment_created': datetime.datetime(2020, 8, 6, 6, 44, 6, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 466198837, 'comment_body': ""But for accessing P, E, etc. we need an RV. Considering that the MixtureDIstribution is created, then we need an RV which will take the MixtureDistrbution as an argument and then able to change the pspace to any of the Finite, Continuous or Discrete Pspaces upon calling of `compute_cdf`, `compute_density` etc., so we need  `Mixture` RV IMO. The change can be:\r\n```py\r\n>>> M = Mixture('M', [wt1, wt2, wt3, ...,], [dist1, dist2, dist3, ...,])\r\n```"", 'comment_created': datetime.datetime(2020, 8, 6, 7, 24, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}, {'comment_id': 467371151, 'comment_body': 'I think, `Mixture` can be a function rather than a class. It can return a generic RV/ContinuousRV/DiscreteRV/FiniteRV depending on the type of PDF. \r\nP.S. I saw that ContinuousRV generates only RVs with continuous PDF but what about PDFs which are neither continuous nor discrete? What will be returned in that case?', 'comment_created': datetime.datetime(2020, 8, 8, 6, 49, 3, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 467473519, 'comment_body': '> I think, `Mixture` can be a function rather than a class\r\n\r\nDo you mean to remove the `MixtureDistribution`/`MixturePSpace` class?\r\n\r\n\r\n>  I saw that ContinuousRV generates only RVs with continuous PDF but what about PDFs which are neither continuous nor discrete?\r\n\r\nPresently, I have considered the 3 cases of Continuous, Discrete, and Finite. Should an error be raised if the distribution is not out of these 3?', 'comment_created': datetime.datetime(2020, 8, 8, 15, 7, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}, {'comment_id': 469696699, 'comment_body': '> Should an error be raised if the distribution is not out of these 3?\r\n\r\nNo a generic random symbol can be returned having the custom PDF given by the user.', 'comment_created': datetime.datetime(2020, 8, 13, 4, 57, 36, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 469696970, 'comment_body': '> Do you mean to remove the `MixtureDistribution`/`MixturePSpace` class?\r\n\r\n`Mixture` should be a constructor function returning generic RandomSymbol objects with the given mixture probability distribution.', 'comment_created': datetime.datetime(2020, 8, 13, 4, 58, 40, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}]","[{'commit_sha': 'd2fdd4cfed01cd9b8fb61f163076a8614ba38d78', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ced6c64d9ac35b832629a093f07679676da13304', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}]",Smit Lunagariya,55887635,smitlunagariya.mat18@itbhu.ac.in,User,,50,,37,95
427048161,[WIP] Random walks Prototype,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->
Discussions in #19428

#### Brief description of what is fixed or changed

Random Walks prototype
#### Other comments
@czgdp1807  @Upabjojr  Please check the random walks implementation

#### Release Notes

<!-- Write the release notes for this release below. See
https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more information
on how to write release notes. The bot will check your release notes
automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
NO ENTRY
<!-- END RELEASE NOTES -->",False,19482,https://api.github.com/repos/sympy/sympy/pulls/19482,https://github.com/sympy/sympy/pull/19482,open,160,7,2,7,32,4,5,0,"[{'name': 'stats'}, {'name': 'GSoC'}, {'name': 'Stalled'}, {'name': 'Please take over'}, {'name': 'Merge conflict'}]",2020-06-03 08:34:23+00:00,,0.0,,"[{'comment_id': 437116938, 'comment_body': ""I think that the class args should match the given user args `obj.func(*obj.args)` so I don't think that the recurrence function should be wrapped in class creation, but rather be solved after creation for places where needed.\r\n\r\nI also think that this is making the class totally unusable because it fails to solve when the state_space is set to infinite set."", 'comment_created': datetime.datetime(2020, 6, 9, 3, 25, 56, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 457080749, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2020, 7, 20, 6, 3, 9, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 457080885, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2020, 7, 20, 6, 3, 30, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 457080956, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2020, 7, 20, 6, 3, 40, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}]","[{'commit_sha': 'c0789153f5198e5568ffc100c9b3757cc4fc36e4', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '65ff493cc11db27dbfb65a359802e39ca3215132', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba34c18f2c951e2a1188572d0e41b01fefea46ef', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb2a70f8b74f92b92d54d02a2eb0cd976b4dbea6', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a810d6ccad1efb38a2dfa1bbdf92cc20e7a4b13', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '18fbd74735f02c278d64c6eb26cdc2b3d6f0b962', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e962a1264cec334e5bce60f5b5b829ce16465fd', 'committer_username': 'czgdp1807', 'committer_name': 'ਗਗਨਦੀਪ ਸਿੰਘ (Gagandeep Singh)', 'committer_email': 'gdp.1807@gmail.com', 'commit_date': datetime.datetime(2018, 2, 17, 14, 48, 28, tzinfo=datetime.timezone.utc)}]",Smit Lunagariya,55887635,smitlunagariya.mat18@itbhu.ac.in,User,,50,,37,95
427048161,[WIP] Random walks Prototype,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->
Discussions in #19428

#### Brief description of what is fixed or changed

Random Walks prototype
#### Other comments
@czgdp1807  @Upabjojr  Please check the random walks implementation

#### Release Notes

<!-- Write the release notes for this release below. See
https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more information
on how to write release notes. The bot will check your release notes
automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
NO ENTRY
<!-- END RELEASE NOTES -->",False,19482,https://api.github.com/repos/sympy/sympy/pulls/19482,https://github.com/sympy/sympy/pull/19482,open,160,7,2,7,32,4,5,0,"[{'name': 'stats'}, {'name': 'GSoC'}, {'name': 'Stalled'}, {'name': 'Please take over'}, {'name': 'Merge conflict'}]",2020-06-03 08:34:23+00:00,,0.0,,"[{'comment_id': 437116938, 'comment_body': ""I think that the class args should match the given user args `obj.func(*obj.args)` so I don't think that the recurrence function should be wrapped in class creation, but rather be solved after creation for places where needed.\r\n\r\nI also think that this is making the class totally unusable because it fails to solve when the state_space is set to infinite set."", 'comment_created': datetime.datetime(2020, 6, 9, 3, 25, 56, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 457080749, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2020, 7, 20, 6, 3, 9, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 457080885, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2020, 7, 20, 6, 3, 30, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 457080956, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2020, 7, 20, 6, 3, 40, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}]","[{'commit_sha': 'c0789153f5198e5568ffc100c9b3757cc4fc36e4', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '65ff493cc11db27dbfb65a359802e39ca3215132', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba34c18f2c951e2a1188572d0e41b01fefea46ef', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb2a70f8b74f92b92d54d02a2eb0cd976b4dbea6', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a810d6ccad1efb38a2dfa1bbdf92cc20e7a4b13', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '18fbd74735f02c278d64c6eb26cdc2b3d6f0b962', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e962a1264cec334e5bce60f5b5b829ce16465fd', 'committer_username': 'czgdp1807', 'committer_name': 'ਗਗਨਦੀਪ ਸਿੰਘ (Gagandeep Singh)', 'committer_email': 'gdp.1807@gmail.com', 'commit_date': datetime.datetime(2018, 2, 17, 14, 48, 28, tzinfo=datetime.timezone.utc)}]",Smit Lunagariya,55887635,smitlunagariya.mat18@itbhu.ac.in,User,,50,,37,95
465926224,[GSoC] Assumptions of Dependence of Rvs,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->
Continues #17387

#### Brief description of what is fixed or changed


#### Other comments
I will be pushing more commits on this branch by following the reviews on the original PR as well as the discussions in #17260

#### Release Notes

<!-- Write the release notes for this release below. See
https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more information
on how to write release notes. The bot will check your release notes
automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
* stats
   * Allowing assumptions between random variables using `Covariance`
<!-- END RELEASE NOTES -->
ping @Upabjojr @czgdp1807 ",False,19949,https://api.github.com/repos/sympy/sympy/pulls/19949,https://github.com/sympy/sympy/pull/19949,closed,50,3,3,6,4,8,2,0,"[{'name': 'stats'}, {'name': 'GSoC'}]",2020-08-11 07:36:47+00:00,2020-10-02 10:10:39+00:00,4502032.0,"52 days, 2:33:52","[{'comment_id': 468414638, 'comment_body': '```suggestion\r\n    def _create_MultivariateNormalDistribution(syms, assumps):\r\n```', 'comment_created': datetime.datetime(2020, 8, 11, 8, 30, 55, tzinfo=datetime.timezone.utc), 'commenter': 'eric-wieser', 'type': 'User'}, {'comment_id': 468655825, 'comment_body': '`assumps` goes as `given`, right?', 'comment_created': datetime.datetime(2020, 8, 11, 15, 9, 44, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 469127249, 'comment_body': ""I didn't get your question. But, currently, `assumps` go as `condition` to `density` and then without going to `given` it passes the call to `DependentPSpace`. Did you mean that?"", 'comment_created': datetime.datetime(2020, 8, 12, 9, 25, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}, {'comment_id': 469696292, 'comment_body': ""Well, as of now, I cannot do, \r\n```python\r\nIn [8]: X = Binomial('X', 5, S(1)/2)                                            \r\n\r\nIn [9]: Y = Binomial('Y', 6, S(1)/4)                                            \r\n\r\nIn [12]: P(X > 2, Eq(P(X > 1, Y > 1), S(1)/2))\r\nValueError: Overlapping Random Variables\r\n```\r\nIn other words, queries like P(E|J) where E and J are some events dependent on each other isn't possible?"", 'comment_created': datetime.datetime(2020, 8, 13, 4, 55, 54, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 469797297, 'comment_body': 'Actually this will need some fixes after many changes, I will try to update this by tonight.', 'comment_created': datetime.datetime(2020, 8, 13, 8, 49, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}, {'comment_id': 470044906, 'comment_body': 'Supporting these types of queries can be challenging.', 'comment_created': datetime.datetime(2020, 8, 13, 15, 39, 20, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 470046684, 'comment_body': ""What kind of assumptions of dependence does this support, like Covariance or any other metric? What's popular in the literature?"", 'comment_created': datetime.datetime(2020, 8, 13, 15, 41, 55, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 470050198, 'comment_body': 'Currently, I have added the Covariance', 'comment_created': datetime.datetime(2020, 8, 13, 15, 47, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Smit-create', 'type': 'User'}]","[{'commit_sha': 'd23cac5083cca3b1b0dcafdc1333974cc3757537', 'committer_username': 'czgdp1807', 'committer_name': 'ਗਗਨਦੀਪ ਸਿੰਘ (Gagandeep Singh)', 'committer_email': 'gdp.1807@gmail.com', 'commit_date': datetime.datetime(2018, 2, 17, 14, 48, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba1b283bc4d1fad7cce4ebe490393e2f3270244d', 'committer_username': 'czgdp1807', 'committer_name': 'ਗਗਨਦੀਪ ਸਿੰਘ (Gagandeep Singh)', 'committer_email': 'gdp.1807@gmail.com', 'commit_date': datetime.datetime(2018, 2, 17, 14, 48, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '154ef7318c84fe36943b6e213ea5abed063cd478', 'committer_username': 'czgdp1807', 'committer_name': 'ਗਗਨਦੀਪ ਸਿੰਘ (Gagandeep Singh)', 'committer_email': 'gdp.1807@gmail.com', 'commit_date': datetime.datetime(2018, 2, 17, 14, 48, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '732c02dddfdd93f9fb10ac26f0599e8b4960b5df', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f6dd5a4c22daec19a61614bd603132c416708fd', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '24bc9f9c93a911c27e2ad05ec47979d0711d86d6', 'committer_username': 'Smit-create', 'committer_name': 'Smit Lunagariya', 'committer_email': 'smitlunagariya.mat18@itbhu.ac.in', 'commit_date': datetime.datetime(2019, 9, 27, 14, 56, 34, tzinfo=datetime.timezone.utc)}]",Smit Lunagariya,55887635,smitlunagariya.mat18@itbhu.ac.in,User,,50,,37,95

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
640534,sympy,sympy/sympy,Python,4363,12693,293,1320,58678,5121,14,717,"[{'id': 468802586, 'number': 19975, 'closed': datetime.datetime(2020, 8, 25, 7, 14, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 17, 12, 33, 2, tzinfo=datetime.timezone.utc), 'time_taken': 672092.0, 'time_delta': '7 days, 18:41:32', 'additions': 77, 'deletions': 25, 'state': 'closed'}, {'id': 467256686, 'number': 19957, 'closed': None, 'created': datetime.datetime(2020, 8, 13, 9, 13, 5, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 163, 'deletions': 76, 'state': 'open'}, {'id': 465926224, 'number': 19949, 'closed': datetime.datetime(2020, 10, 2, 10, 10, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 11, 7, 36, 47, tzinfo=datetime.timezone.utc), 'time_taken': 4502032.0, 'time_delta': '52 days, 2:33:52', 'additions': 50, 'deletions': 3, 'state': 'closed'}, {'id': 465183128, 'number': 19934, 'closed': datetime.datetime(2020, 8, 12, 11, 14, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 9, 18, 3, 57, tzinfo=datetime.timezone.utc), 'time_taken': 234619.0, 'time_delta': '2 days, 17:10:19', 'additions': 180, 'deletions': 182, 'state': 'closed'}, {'id': 465103822, 'number': 19926, 'closed': datetime.datetime(2020, 8, 12, 5, 53, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 9, 4, 5, 45, tzinfo=datetime.timezone.utc), 'time_taken': 265670.0, 'time_delta': '3 days, 1:47:50', 'additions': 16, 'deletions': 10, 'state': 'closed'}, {'id': 462535396, 'number': 19886, 'closed': None, 'created': datetime.datetime(2020, 8, 4, 5, 22, 6, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 313, 'deletions': 0, 'state': 'open'}, {'id': 458943131, 'number': 19857, 'closed': datetime.datetime(2020, 8, 2, 4, 39, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 30, 7, 50, 29, tzinfo=datetime.timezone.utc), 'time_taken': 247732.0, 'time_delta': '2 days, 20:48:52', 'additions': 202, 'deletions': 7, 'state': 'closed'}, {'id': 456974003, 'number': 19848, 'closed': datetime.datetime(2020, 8, 2, 4, 39, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 27, 7, 40, 44, tzinfo=datetime.timezone.utc), 'time_taken': 507541.0, 'time_delta': '5 days, 20:59:01', 'additions': 220, 'deletions': 10, 'state': 'closed'}, {'id': 455481514, 'number': 19826, 'closed': datetime.datetime(2020, 7, 24, 11, 57, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 23, 5, 2, 27, tzinfo=datetime.timezone.utc), 'time_taken': 111307.0, 'time_delta': '1 day, 6:55:07', 'additions': 92, 'deletions': 6, 'state': 'closed'}, {'id': 455044292, 'number': 19819, 'closed': datetime.datetime(2020, 7, 26, 20, 38, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 22, 11, 0, 18, tzinfo=datetime.timezone.utc), 'time_taken': 380303.0, 'time_delta': '4 days, 9:38:23', 'additions': 74, 'deletions': 50, 'state': 'closed'}, {'id': 454158988, 'number': 19808, 'closed': datetime.datetime(2020, 7, 30, 7, 3, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 21, 5, 51, 56, tzinfo=datetime.timezone.utc), 'time_taken': 781902.0, 'time_delta': '9 days, 1:11:42', 'additions': 84, 'deletions': 51, 'state': 'closed'}, {'id': 451772917, 'number': 19795, 'closed': datetime.datetime(2020, 7, 27, 20, 21, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 18, 7, 29, 53, tzinfo=datetime.timezone.utc), 'time_taken': 823907.0, 'time_delta': '9 days, 12:51:47', 'additions': 252, 'deletions': 11, 'state': 'closed'}, {'id': 447240770, 'number': 19734, 'closed': datetime.datetime(2020, 7, 17, 5, 23, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 10, 5, 51, 25, tzinfo=datetime.timezone.utc), 'time_taken': 603121.0, 'time_delta': '6 days, 23:32:01', 'additions': 251, 'deletions': 21, 'state': 'closed'}, {'id': 445338529, 'number': 19724, 'closed': datetime.datetime(2020, 7, 12, 6, 38, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 7, 11, 3, 31, tzinfo=datetime.timezone.utc), 'time_taken': 416098.0, 'time_delta': '4 days, 19:34:58', 'additions': 174, 'deletions': 8, 'state': 'closed'}, {'id': 443886951, 'number': 19696, 'closed': datetime.datetime(2020, 7, 6, 22, 17, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 3, 6, 56, 25, tzinfo=datetime.timezone.utc), 'time_taken': 314489.0, 'time_delta': '3 days, 15:21:29', 'additions': 95, 'deletions': 70, 'state': 'closed'}, {'id': 440391632, 'number': 19648, 'closed': datetime.datetime(2020, 7, 11, 7, 9, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 26, 5, 38, 42, tzinfo=datetime.timezone.utc), 'time_taken': 1301437.0, 'time_delta': '15 days, 1:30:37', 'additions': 369, 'deletions': 63, 'state': 'closed'}, {'id': 439044937, 'number': 19631, 'closed': datetime.datetime(2020, 6, 28, 5, 49, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 24, 8, 24, 11, tzinfo=datetime.timezone.utc), 'time_taken': 336335.0, 'time_delta': '3 days, 21:25:35', 'additions': 252, 'deletions': 155, 'state': 'closed'}, {'id': 432901396, 'number': 19529, 'closed': datetime.datetime(2020, 6, 19, 20, 40, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 11, 7, 49, 9, tzinfo=datetime.timezone.utc), 'time_taken': 737489.0, 'time_delta': '8 days, 12:51:29', 'additions': 501, 'deletions': 5, 'state': 'closed'}, {'id': 429093947, 'number': 19500, 'closed': datetime.datetime(2020, 6, 11, 13, 16, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 6, 9, 48, 50, tzinfo=datetime.timezone.utc), 'time_taken': 444465.0, 'time_delta': '5 days, 3:27:45', 'additions': 102, 'deletions': 8, 'state': 'closed'}, {'id': 427048161, 'number': 19482, 'closed': None, 'created': datetime.datetime(2020, 6, 3, 8, 34, 23, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 160, 'deletions': 7, 'state': 'open'}, {'id': 425033908, 'number': 19459, 'closed': datetime.datetime(2020, 6, 3, 5, 39, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 29, 10, 56, 9, tzinfo=datetime.timezone.utc), 'time_taken': 413005.0, 'time_delta': '4 days, 18:43:25', 'additions': 21, 'deletions': 2, 'state': 'closed'}, {'id': 424248373, 'number': 19452, 'closed': datetime.datetime(2020, 5, 29, 5, 10, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 28, 4, 57, 24, tzinfo=datetime.timezone.utc), 'time_taken': 87205.0, 'time_delta': '1 day, 0:13:25', 'additions': 9, 'deletions': 1, 'state': 'closed'}, {'id': 421134986, 'number': 19387, 'closed': datetime.datetime(2020, 6, 26, 6, 4, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 21, 3, 57, 13, tzinfo=datetime.timezone.utc), 'time_taken': 3118056.0, 'time_delta': '36 days, 2:07:36', 'additions': 821, 'deletions': 39, 'state': 'closed'}, {'id': 419088142, 'number': 19342, 'closed': datetime.datetime(2020, 5, 28, 5, 31, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 17, 9, 49, 43, tzinfo=datetime.timezone.utc), 'time_taken': 934878.0, 'time_delta': '10 days, 19:41:18', 'additions': 395, 'deletions': 265, 'state': 'closed'}, {'id': 417143245, 'number': 19304, 'closed': datetime.datetime(2020, 5, 20, 21, 31, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 13, 6, 19, 30, tzinfo=datetime.timezone.utc), 'time_taken': 659508.0, 'time_delta': '7 days, 15:11:48', 'additions': 136, 'deletions': 36, 'state': 'closed'}, {'id': 416478080, 'number': 19295, 'closed': datetime.datetime(2020, 5, 15, 11, 4, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 12, 4, 32, 10, tzinfo=datetime.timezone.utc), 'time_taken': 282714.0, 'time_delta': '3 days, 6:31:54', 'additions': 43, 'deletions': 43, 'state': 'closed'}, {'id': 416044012, 'number': 19290, 'closed': datetime.datetime(2020, 5, 23, 5, 45, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 11, 11, 28, 16, tzinfo=datetime.timezone.utc), 'time_taken': 1016217.0, 'time_delta': '11 days, 18:16:57', 'additions': 101, 'deletions': 37, 'state': 'closed'}, {'id': 415044986, 'number': 19273, 'closed': datetime.datetime(2020, 5, 9, 13, 47, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 8, 4, 54, 31, tzinfo=datetime.timezone.utc), 'time_taken': 118378.0, 'time_delta': '1 day, 8:52:58', 'additions': 190, 'deletions': 6, 'state': 'closed'}, {'id': 403104486, 'number': 19123, 'closed': datetime.datetime(2020, 4, 25, 6, 33, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 14, 10, 37, 15, tzinfo=datetime.timezone.utc), 'time_taken': 935797.0, 'time_delta': '10 days, 19:56:37', 'additions': 196, 'deletions': 56, 'state': 'closed'}, {'id': 399571703, 'number': 19079, 'closed': datetime.datetime(2020, 4, 10, 19, 12, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 6, 11, 19, 36, tzinfo=datetime.timezone.utc), 'time_taken': 373986.0, 'time_delta': '4 days, 7:53:06', 'additions': 21, 'deletions': 7, 'state': 'closed'}, {'id': 399037306, 'number': 19073, 'closed': None, 'created': datetime.datetime(2020, 4, 5, 11, 27, 42, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 52, 'deletions': 4, 'state': 'open'}, {'id': 392282678, 'number': 18935, 'closed': datetime.datetime(2020, 3, 25, 12, 48, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 23, 10, 5, 13, tzinfo=datetime.timezone.utc), 'time_taken': 182592.0, 'time_delta': '2 days, 2:43:12', 'additions': 93, 'deletions': 6, 'state': 'closed'}, {'id': 382104654, 'number': 18754, 'closed': datetime.datetime(2020, 5, 7, 17, 22, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 1, 22, 38, 29, tzinfo=datetime.timezone.utc), 'time_taken': 5769836.0, 'time_delta': '66 days, 18:43:56', 'additions': 465, 'deletions': 272, 'state': 'closed'}, {'id': 378114833, 'number': 18698, 'closed': datetime.datetime(2020, 2, 22, 10, 2, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 21, 5, 46, 56, tzinfo=datetime.timezone.utc), 'time_taken': 101758.0, 'time_delta': '1 day, 4:15:58', 'additions': 17, 'deletions': 9, 'state': 'closed'}, {'id': 376289644, 'number': 18677, 'closed': datetime.datetime(2020, 2, 19, 2, 16, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 17, 19, 42, 13, tzinfo=datetime.timezone.utc), 'time_taken': 110066.0, 'time_delta': '1 day, 6:34:26', 'additions': 29, 'deletions': 2, 'state': 'closed'}, {'id': 375520093, 'number': 18655, 'closed': datetime.datetime(2020, 2, 18, 17, 13, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 14, 18, 40, 14, tzinfo=datetime.timezone.utc), 'time_taken': 340375.0, 'time_delta': '3 days, 22:32:55', 'additions': 37, 'deletions': 22, 'state': 'closed'}, {'id': 374175628, 'number': 18640, 'closed': datetime.datetime(2020, 2, 12, 14, 54, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 12, 8, 35, 41, tzinfo=datetime.timezone.utc), 'time_taken': 22752.0, 'time_delta': '6:19:12', 'additions': 8, 'deletions': 0, 'state': 'closed'}, {'id': 373817313, 'number': 18639, 'closed': datetime.datetime(2020, 2, 14, 7, 31, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 11, 18, 38, 28, tzinfo=datetime.timezone.utc), 'time_taken': 219175.0, 'time_delta': '2 days, 12:52:55', 'additions': 196, 'deletions': 81, 'state': 'closed'}, {'id': 372846213, 'number': 18614, 'closed': datetime.datetime(2020, 2, 13, 11, 48, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 9, 16, 20, 45, tzinfo=datetime.timezone.utc), 'time_taken': 329253.0, 'time_delta': '3 days, 19:27:33', 'additions': 20, 'deletions': 0, 'state': 'closed'}, {'id': 372742606, 'number': 18605, 'closed': datetime.datetime(2020, 2, 9, 15, 58, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 8, 18, 4, 45, tzinfo=datetime.timezone.utc), 'time_taken': 78840.0, 'time_delta': '21:54:00', 'additions': 10, 'deletions': 2, 'state': 'closed'}, {'id': 372465804, 'number': 18597, 'closed': datetime.datetime(2020, 2, 9, 20, 36, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 7, 15, 23, 14, tzinfo=datetime.timezone.utc), 'time_taken': 191573.0, 'time_delta': '2 days, 5:12:53', 'additions': 16, 'deletions': 0, 'state': 'closed'}, {'id': 371921842, 'number': 18587, 'closed': datetime.datetime(2020, 2, 7, 12, 56, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 6, 14, 14, 58, tzinfo=datetime.timezone.utc), 'time_taken': 81710.0, 'time_delta': '22:41:50', 'additions': 13, 'deletions': 6, 'state': 'closed'}, {'id': 371256149, 'number': 18577, 'closed': datetime.datetime(2020, 2, 8, 23, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 5, 9, 3, 22, tzinfo=datetime.timezone.utc), 'time_taken': 311078.0, 'time_delta': '3 days, 14:24:38', 'additions': 14, 'deletions': 1, 'state': 'closed'}, {'id': 370717292, 'number': 18566, 'closed': datetime.datetime(2020, 2, 4, 10, 44, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 4, 8, 58, 54, tzinfo=datetime.timezone.utc), 'time_taken': 6326.0, 'time_delta': '1:45:26', 'additions': 14, 'deletions': 1, 'state': 'closed'}, {'id': 369978984, 'number': 18537, 'closed': datetime.datetime(2020, 2, 5, 18, 18, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 2, 6, 52, 10, tzinfo=datetime.timezone.utc), 'time_taken': 300356.0, 'time_delta': '3 days, 11:25:56', 'additions': 16, 'deletions': 2, 'state': 'closed'}, {'id': 369974797, 'number': 18535, 'closed': datetime.datetime(2020, 2, 3, 14, 34, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 2, 5, 40, 40, tzinfo=datetime.timezone.utc), 'time_taken': 118435.0, 'time_delta': '1 day, 8:53:55', 'additions': 36, 'deletions': 3, 'state': 'closed'}, {'id': 368449971, 'number': 18506, 'closed': datetime.datetime(2020, 1, 30, 7, 24, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 29, 9, 19, 21, tzinfo=datetime.timezone.utc), 'time_taken': 79512.0, 'time_delta': '22:05:12', 'additions': 49, 'deletions': 1, 'state': 'closed'}, {'id': 368096593, 'number': 18503, 'closed': datetime.datetime(2020, 1, 29, 11, 44, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 28, 16, 3, 13, tzinfo=datetime.timezone.utc), 'time_taken': 70872.0, 'time_delta': '19:41:12', 'additions': 0, 'deletions': 14, 'state': 'closed'}, {'id': 367391540, 'number': 18479, 'closed': datetime.datetime(2020, 1, 27, 18, 59, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 27, 9, 32, 25, tzinfo=datetime.timezone.utc), 'time_taken': 34011.0, 'time_delta': '9:26:51', 'additions': 3, 'deletions': 0, 'state': 'closed'}, {'id': 367386203, 'number': 18478, 'closed': datetime.datetime(2020, 1, 28, 20, 47, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 27, 9, 18, 44, tzinfo=datetime.timezone.utc), 'time_taken': 127705.0, 'time_delta': '1 day, 11:28:25', 'additions': 30, 'deletions': 27, 'state': 'closed'}, {'id': 367235431, 'number': 18472, 'closed': datetime.datetime(2020, 1, 27, 18, 15, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 26, 16, 27, 33, tzinfo=datetime.timezone.utc), 'time_taken': 92851.0, 'time_delta': '1 day, 1:47:31', 'additions': 9, 'deletions': 2, 'state': 'closed'}, {'id': 367207616, 'number': 18467, 'closed': datetime.datetime(2020, 1, 26, 21, 9, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 26, 11, 21, 7, tzinfo=datetime.timezone.utc), 'time_taken': 35298.0, 'time_delta': '9:48:18', 'additions': 2, 'deletions': 5, 'state': 'closed'}, {'id': 366984027, 'number': 18450, 'closed': datetime.datetime(2020, 1, 26, 16, 16, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 24, 19, 35, 24, tzinfo=datetime.timezone.utc), 'time_taken': 160843.0, 'time_delta': '1 day, 20:40:43', 'additions': 9, 'deletions': 5, 'state': 'closed'}, {'id': 366848964, 'number': 18446, 'closed': datetime.datetime(2020, 1, 29, 7, 12, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 24, 13, 58, 43, tzinfo=datetime.timezone.utc), 'time_taken': 407644.0, 'time_delta': '4 days, 17:14:04', 'additions': 104, 'deletions': 3, 'state': 'closed'}, {'id': 365888375, 'number': 18434, 'closed': datetime.datetime(2020, 2, 23, 13, 14, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 22, 14, 37, 30, tzinfo=datetime.timezone.utc), 'time_taken': 2759820.0, 'time_delta': '31 days, 22:37:00', 'additions': 34, 'deletions': 18, 'state': 'closed'}, {'id': 364794596, 'number': 18406, 'closed': datetime.datetime(2020, 1, 20, 13, 1, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 20, 11, 50, 49, tzinfo=datetime.timezone.utc), 'time_taken': 4225.0, 'time_delta': '1:10:25', 'additions': 4, 'deletions': 1, 'state': 'closed'}, {'id': 364737342, 'number': 18405, 'closed': datetime.datetime(2020, 1, 25, 1, 35, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 20, 9, 41, 58, tzinfo=datetime.timezone.utc), 'time_taken': 402832.0, 'time_delta': '4 days, 15:53:52', 'additions': 10, 'deletions': 6, 'state': 'closed'}, {'id': 364521735, 'number': 18390, 'closed': datetime.datetime(2020, 1, 21, 14, 34, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 19, 10, 49, 50, tzinfo=datetime.timezone.utc), 'time_taken': 186294.0, 'time_delta': '2 days, 3:44:54', 'additions': 2, 'deletions': 42, 'state': 'closed'}, {'id': 364500945, 'number': 18382, 'closed': datetime.datetime(2020, 1, 19, 10, 12, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 19, 6, 21, 27, tzinfo=datetime.timezone.utc), 'time_taken': 13892.0, 'time_delta': '3:51:32', 'additions': 4, 'deletions': 83, 'state': 'closed'}, {'id': 364475153, 'number': 18381, 'closed': datetime.datetime(2020, 3, 28, 5, 13, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 18, 23, 8, 50, tzinfo=datetime.timezone.utc), 'time_taken': 5983498.0, 'time_delta': '69 days, 6:04:58', 'additions': 1, 'deletions': 4, 'state': 'closed'}, {'id': 364470750, 'number': 18380, 'closed': datetime.datetime(2020, 1, 23, 0, 10, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 18, 22, 8, 23, tzinfo=datetime.timezone.utc), 'time_taken': 352953.0, 'time_delta': '4 days, 2:02:33', 'additions': 10, 'deletions': 5, 'state': 'closed'}, {'id': 362848131, 'number': 18336, 'closed': datetime.datetime(2020, 1, 20, 5, 54, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 14, 21, 29, 54, tzinfo=datetime.timezone.utc), 'time_taken': 462288.0, 'time_delta': '5 days, 8:24:48', 'additions': 36, 'deletions': 3, 'state': 'closed'}, {'id': 361855999, 'number': 18314, 'closed': datetime.datetime(2020, 1, 15, 19, 40, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 12, 18, 11, 7, tzinfo=datetime.timezone.utc), 'time_taken': 264592.0, 'time_delta': '3 days, 1:29:52', 'additions': 2, 'deletions': 0, 'state': 'closed'}, {'id': 361820480, 'number': 18311, 'closed': datetime.datetime(2020, 1, 14, 11, 14, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 12, 11, 31, 15, tzinfo=datetime.timezone.utc), 'time_taken': 171781.0, 'time_delta': '1 day, 23:43:01', 'additions': 5, 'deletions': 2, 'state': 'closed'}, {'id': 361730338, 'number': 18300, 'closed': datetime.datetime(2020, 2, 14, 10, 0, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 11, 13, 34, 37, tzinfo=datetime.timezone.utc), 'time_taken': 2924761.0, 'time_delta': '33 days, 20:26:01', 'additions': 116, 'deletions': 20, 'state': 'closed'}, {'id': 361617769, 'number': 18289, 'closed': datetime.datetime(2020, 2, 16, 16, 54, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 10, 20, 52, 34, tzinfo=datetime.timezone.utc), 'time_taken': 3182528.0, 'time_delta': '36 days, 20:02:08', 'additions': 201, 'deletions': 82, 'state': 'closed'}, {'id': 361580642, 'number': 18287, 'closed': datetime.datetime(2020, 1, 10, 20, 25, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 10, 18, 59, 37, tzinfo=datetime.timezone.utc), 'time_taken': 5128.0, 'time_delta': '1:25:28', 'additions': 3, 'deletions': 3, 'state': 'closed'}, {'id': 360959556, 'number': 18276, 'closed': datetime.datetime(2020, 1, 16, 19, 12, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 9, 13, 29, tzinfo=datetime.timezone.utc), 'time_taken': 625396.0, 'time_delta': '7 days, 5:43:16', 'additions': 21, 'deletions': 17, 'state': 'closed'}, {'id': 359545788, 'number': 18246, 'closed': datetime.datetime(2020, 3, 27, 12, 13, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 6, 13, 34, 23, tzinfo=datetime.timezone.utc), 'time_taken': 6993529.0, 'time_delta': '80 days, 22:38:49', 'additions': 5, 'deletions': 1, 'state': 'closed'}, {'id': 359247967, 'number': 18233, 'closed': datetime.datetime(2020, 1, 10, 7, 18, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 4, 21, 14, 54, tzinfo=datetime.timezone.utc), 'time_taken': 468245.0, 'time_delta': '5 days, 10:04:05', 'additions': 123, 'deletions': 8, 'state': 'closed'}, {'id': 358888256, 'number': 18211, 'closed': datetime.datetime(2020, 1, 4, 1, 41, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 3, 6, 39, 19, tzinfo=datetime.timezone.utc), 'time_taken': 68523.0, 'time_delta': '19:02:03', 'additions': 16, 'deletions': 2, 'state': 'closed'}, {'id': 357871228, 'number': 18173, 'closed': datetime.datetime(2020, 1, 11, 17, 42, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 12, 29, 22, 47, 40, tzinfo=datetime.timezone.utc), 'time_taken': 1104907.0, 'time_delta': '12 days, 18:55:07', 'additions': 310, 'deletions': 14, 'state': 'closed'}, {'id': 357584558, 'number': 18159, 'closed': datetime.datetime(2019, 12, 30, 15, 12, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 12, 28, 21, 31, 3, tzinfo=datetime.timezone.utc), 'time_taken': 150100.0, 'time_delta': '1 day, 17:41:40', 'additions': 9, 'deletions': 1, 'state': 'closed'}, {'id': 357445985, 'number': 18152, 'closed': datetime.datetime(2020, 1, 4, 16, 27, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 12, 28, 11, 31, 40, tzinfo=datetime.timezone.utc), 'time_taken': 622569.0, 'time_delta': '7 days, 4:56:09', 'additions': 119, 'deletions': 3, 'state': 'closed'}, {'id': 357132684, 'number': 18141, 'closed': datetime.datetime(2019, 12, 27, 12, 9, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 12, 27, 5, 42, 53, tzinfo=datetime.timezone.utc), 'time_taken': 23172.0, 'time_delta': '6:26:12', 'additions': 6, 'deletions': 1, 'state': 'closed'}, {'id': 356831749, 'number': 18130, 'closed': datetime.datetime(2019, 12, 26, 11, 41, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 12, 25, 19, 24, 35, tzinfo=datetime.timezone.utc), 'time_taken': 58608.0, 'time_delta': '16:16:48', 'additions': 7, 'deletions': 1, 'state': 'closed'}, {'id': 356692649, 'number': 18120, 'closed': datetime.datetime(2019, 12, 29, 8, 27, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 12, 24, 19, 38, 32, tzinfo=datetime.timezone.utc), 'time_taken': 391764.0, 'time_delta': '4 days, 12:49:24', 'additions': 5, 'deletions': 3, 'state': 'closed'}, {'id': 356028692, 'number': 18096, 'closed': datetime.datetime(2019, 12, 25, 4, 50, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 12, 21, 20, 28, 20, tzinfo=datetime.timezone.utc), 'time_taken': 289354.0, 'time_delta': '3 days, 8:22:34', 'additions': 107, 'deletions': 3, 'state': 'closed'}, {'id': 354061418, 'number': 18061, 'closed': datetime.datetime(2019, 12, 20, 15, 22, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 12, 17, 11, 43, 9, tzinfo=datetime.timezone.utc), 'time_taken': 272350.0, 'time_delta': '3 days, 3:39:10', 'additions': 36, 'deletions': 2, 'state': 'closed'}, {'id': 353156566, 'number': 18047, 'closed': datetime.datetime(2019, 12, 24, 16, 38, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 12, 14, 8, 46, 35, tzinfo=datetime.timezone.utc), 'time_taken': 892302.0, 'time_delta': '10 days, 7:51:42', 'additions': 21, 'deletions': 3, 'state': 'closed'}, {'id': 353151765, 'number': 18046, 'closed': datetime.datetime(2019, 12, 14, 8, 16, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 12, 14, 7, 37, 9, tzinfo=datetime.timezone.utc), 'time_taken': 2364.0, 'time_delta': '0:39:24', 'additions': 19, 'deletions': 1, 'state': 'closed'}]"
