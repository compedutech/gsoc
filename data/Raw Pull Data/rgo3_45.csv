pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
600232237,daemon: log errors from bpf.TestDummyProg(),"Previously we just checked if bpf.TestDummyProg() returns an error.

Now the error is logged so it is easier to debug what actually happened
if bpf.TestDummyProg() fails.

Fixes: #15448

Signed-off-by: Robin Gögge <r.goegge@outlook.com>",True,15460,https://api.github.com/repos/cilium/cilium/pulls/15460,https://github.com/cilium/cilium/pull/15460,closed,60,23,1,1,6,5,3,1,"[{'name': 'ready-to-merge'}, {'name': 'release-note/misc'}, {'name': 'gsoc'}]",2021-03-24 23:40:30+00:00,2021-03-29 18:36:10+00:00,413740.0,"4 days, 18:55:40","[{'comment_id': 601103455, 'comment_body': ""You need to assign this (typically `scopedLog`) or it won't take effect for when you issue the fatal/warning."", 'comment_created': datetime.datetime(2021, 3, 25, 6, 40, 2, tzinfo=datetime.timezone.utc), 'commenter': 'pchaigno', 'type': 'User'}, {'comment_id': 601110845, 'comment_body': 'Maybe this could be refactored to use a function such as `probeCgroupSupport(tcp, ipv6 bool)`. We should then only call:\r\n```go\r\nif option.Config.EnableHostServicesTCP && option.Config.EnableIPv4 {\r\n    probeCgroupSupport(true, false)\r\n}\r\nif option.Config.EnableHostServicesTCP && option.Config.EnableIPv6 {\r\n    probeCgroupSupport(true, true)\r\n}\r\nif option.Config.EnableHostServicesUDP && option.Config.EnableIPv4 {\r\n    probeCgroupSupport(false, false)\r\n}\r\nif option.Config.EnableHostServicesUDP && option.Config.EnableIPv6 {\r\n    probeCgroupSupport(false, true)\r\n}\r\n```\r\nThe logic would also be the same as the original code as we would fatal as soon as we find something missing.', 'comment_created': datetime.datetime(2021, 3, 25, 6, 49, 30, tzinfo=datetime.timezone.utc), 'commenter': 'pchaigno', 'type': 'User'}, {'comment_id': 601754191, 'comment_body': 'I was worried that the code had blown up a bit. I actually added two functions for refactoring now to avoid even more `if {} else {}` statements. Hope thats fine. The logic should be the same as the original code now too.', 'comment_created': datetime.datetime(2021, 3, 25, 18, 44, tzinfo=datetime.timezone.utc), 'commenter': 'rgo3', 'type': 'User'}, {'comment_id': 603103968, 'comment_body': ""These two lines can be moved out of the if/else block for IPv4/IPv6 and merged with the following code, such that we don't need `disableHostServicesTCP` anymore."", 'comment_created': datetime.datetime(2021, 3, 29, 8, 30, 7, tzinfo=datetime.timezone.utc), 'commenter': 'pchaigno', 'type': 'User'}, {'comment_id': 603104593, 'comment_body': 'Ditto.', 'comment_created': datetime.datetime(2021, 3, 29, 8, 31, 6, tzinfo=datetime.timezone.utc), 'commenter': 'pchaigno', 'type': 'User'}]","[{'commit_sha': '74208247c274fef76a6bba6d85dd890c041e13f2', 'committer_username': 'rgo3', 'committer_name': 'Robin Gögge', 'committer_email': 'r.goegge@gmail.com', 'commit_date': datetime.datetime(2016, 1, 24, 18, 38, 26, tzinfo=datetime.timezone.utc)}]",Robin Gögge,16867492,r.goegge@gmail.com,User,,39,,11,25
659187174,docs: add testing instructions to CONTRIBUTING.md,Signed-off-by: Robin Gögge <r.goegge@outlook.com>,True,317,https://api.github.com/repos/cilium/ebpf/pulls/317,https://github.com/cilium/ebpf/pull/317,closed,19,2,1,1,4,1,0,2,[],2021-06-01 16:57:32+00:00,2021-06-07 09:44:45+00:00,492433.0,"5 days, 16:47:13","[{'comment_id': 644646322, 'comment_body': ""This should be replaced with `go test -exec sudo ./...`. Unlike `sudo go test ./...`, it won't execute the Go build as sudo, only the resulting `a.out` artifacts."", 'comment_created': datetime.datetime(2021, 6, 3, 9, 40, 55, tzinfo=datetime.timezone.utc), 'commenter': 'ti-mo', 'type': 'User'}]","[{'commit_sha': '9bb9d94fec734fda713b72f39c2256d671dc4645', 'committer_username': 'rgo3', 'committer_name': 'Robin Gögge', 'committer_email': 'r.goegge@gmail.com', 'commit_date': datetime.datetime(2016, 1, 24, 18, 38, 26, tzinfo=datetime.timezone.utc)}]",Robin Gögge,16867492,r.goegge@gmail.com,User,,39,,11,25
670297103,internal: export BPFMapCreate syscall wrapper,"This commit allows the BPFMapCreate syscall wrapper and BPFMapCreateAttr
type to be used by other subpackages of the library while not publicly
exporting them. 

As discussed in #235 this will help me to move the code in #321 into its own subpackage.
To keep the PR small, I only addressed the function and type I need for now. 

Signed-off-by: Robin Gögge <r.goegge@outlook.com>",True,325,https://api.github.com/repos/cilium/ebpf/pulls/325,https://github.com/cilium/ebpf/pull/325,closed,108,102,6,1,0,1,0,0,[],2021-06-15 10:56:52+00:00,2021-06-15 13:26:36+00:00,8984.0,2:29:44,"[{'comment_id': 651697117, 'comment_body': 'This should move to `internal` as well I guess.', 'comment_created': datetime.datetime(2021, 6, 15, 11, 26, 53, tzinfo=datetime.timezone.utc), 'commenter': 'lmb', 'type': 'User'}]","[{'commit_sha': '076bcba38842710733e8b05f4a6b3a5bfdebb5e4', 'committer_username': 'rgo3', 'committer_name': 'Robin Gögge', 'committer_email': 'r.goegge@gmail.com', 'commit_date': datetime.datetime(2016, 1, 24, 18, 38, 26, tzinfo=datetime.timezone.utc)}]",Robin Gögge,16867492,r.goegge@gmail.com,User,,39,,11,25
665791564,MapType probe API,"Currently only supports default bpfMapCreateAttr values, to showcase
basic functionality. Results are cached by a go map. Tests log durations
to see cache performance. Added some open questions and missing error
interface checks to the comments in the file.

Signed-off-by: Robin Gögge <r.goegge@outlook.com>",True,321,https://api.github.com/repos/cilium/ebpf/pulls/321,https://github.com/cilium/ebpf/pull/321,closed,290,1,6,3,1,61,0,0,[],2021-06-09 10:51:16+00:00,2021-07-19 09:34:26+00:00,3451390.0,"39 days, 22:43:10","[{'comment_id': 649635282, 'comment_body': 'typo: `cache`', 'comment_created': datetime.datetime(2021, 6, 11, 1, 49, 41, tzinfo=datetime.timezone.utc), 'commenter': 'kolyshkin', 'type': 'User'}, {'comment_id': 655218627, 'comment_body': 'This needs a policy decision around EPERM: do we treat it as ""feature not available"" and cache it? Programs can change caps over their lifetime after all.', 'comment_created': datetime.datetime(2021, 6, 21, 9, 27, 57, tzinfo=datetime.timezone.utc), 'commenter': 'lmb', 'type': 'User'}, {'comment_id': 656267248, 'comment_body': ""> Programs can change caps over their lifetime after all.\r\n\r\nGood point. In the scenario of processes dropping capabilities over their lifetime, and assuming probing always takes place before map creation, I don't see this as a deal breaker. In this case, the cache would contain a false positive (since the probe was run with a larger cap set), and a subsequent call to create the map would still fail with a clear error. Since we wouldn't probe+cache anything as part of an import side effect, the user would have to make sure the proper capability set is active before executing bpf-related logic. Not surprising, but could lead to subtle bugs.\r\n\r\nAs a solution, we could record the active capability set of the process during every interaction with the cache, and flush if there are any differences. Not sure how expensive that is, though. I would keep this as a later improvement, we should probably aim for a naive-ish initial implementation."", 'comment_created': datetime.datetime(2021, 6, 22, 14, 17, 28, tzinfo=datetime.timezone.utc), 'commenter': 'ti-mo', 'type': 'User'}, {'comment_id': 661308821, 'comment_body': 'Agreed, taking the capability set into account seems overkill, simpler is better. What we need is someone to come up with a policy and think through the implications though.', 'comment_created': datetime.datetime(2021, 6, 30, 9, 54, 48, tzinfo=datetime.timezone.utc), 'commenter': 'lmb', 'type': 'User'}, {'comment_id': 662935271, 'comment_body': ""Nit: I would use a longer but more explicit name, so we'd know what it refers to when opening the file, without having to look for its definition. But that's just a personal preference."", 'comment_created': datetime.datetime(2021, 7, 2, 11, 13, tzinfo=datetime.timezone.utc), 'commenter': 'qmonnet', 'type': 'User'}, {'comment_id': 662936082, 'comment_body': 'If you protect all accesses to `mc.mapTypes` with a lock, I think it should be good? What kind of side effect are you thinking about?', 'comment_created': datetime.datetime(2021, 7, 2, 11, 14, 27, tzinfo=datetime.timezone.utc), 'commenter': 'qmonnet', 'type': 'User'}, {'comment_id': 662940416, 'comment_body': ""Good point, we want `sizeof(struct bpf_cgroup_storage_key)` and I expect it would be 32-byte long on some 32-bit architectures indeed. I don't know if we have an easy way to evaluate the size of a random C struct here, I suppose not? Otherwise do we have a possibility to make this value depend on the architecture in use? [I'm not a Go expert]"", 'comment_created': datetime.datetime(2021, 7, 2, 11, 21, 56, tzinfo=datetime.timezone.utc), 'commenter': 'qmonnet', 'type': 'User'}, {'comment_id': 662942406, 'comment_body': 'Nit:\r\n```suggestion\r\n\t\tbtfVmlinuxValueTypeID uint32\r\n```\r\nThis refers to the `vmlinux` file and name for BTF.', 'comment_created': datetime.datetime(2021, 7, 2, 11, 25, 25, tzinfo=datetime.timezone.utc), 'commenter': 'qmonnet', 'type': 'User'}, {'comment_id': 662944737, 'comment_body': '`StructOpts` should probably trigger some other kind of error indicating that the probe is not supported for now? The `btfVmLinuxValueTypeID = 1` is wrong anyway, I think it would point to the kernel (vmlinux) BTF when we want it to point to the BTF for the `struct_ops` it replaces.\r\n\r\nFor the record I got this working on bpftool (not upstreamed at this time) with:\r\n```c\r\n       case BPF_MAP_TYPE_STRUCT_OPS:\r\n               /* __u8 const btf_data[] = { ... <any random valid BTF chunk> ... }; */\r\n               btf_fd = bpf_load_btf(btf_data, sizeof(btf_data), NULL, 0, false);\r\n               if (btf_fd < 0)\r\n                       return false;\r\n               value_size = 256;\r\n               btf_vmlinux = libbpf_find_kernel_btf();\r\n               if (libbpf_get_error(btf_vmlinux))\r\n                       return false;\r\n               btf_vmlinux_value_type_id = btf__find_by_name_kind(btf_vmlinux,\r\n                    ""bpf_struct_ops_tcp_congestion_ops"", BTF_KIND_STRUCT);\r\n               break;\r\n```', 'comment_created': datetime.datetime(2021, 7, 2, 11, 30, 3, tzinfo=datetime.timezone.utc), 'commenter': 'qmonnet', 'type': 'User'}, {'comment_id': 662945489, 'comment_body': 'It might be worth documenting where these values come from. Bpftool is lacking in that respect.', 'comment_created': datetime.datetime(2021, 7, 2, 11, 31, 17, tzinfo=datetime.timezone.utc), 'commenter': 'qmonnet', 'type': 'User'}, {'comment_id': 662946018, 'comment_body': ""What's the differences between permissions and capabilities? I think you only mean capabilities?"", 'comment_created': datetime.datetime(2021, 7, 2, 11, 32, 16, tzinfo=datetime.timezone.utc), 'commenter': 'qmonnet', 'type': 'User'}, {'comment_id': 662947348, 'comment_body': ""The check looks good but I find the comment hard to read. I'd clarify it or remove it (the check itself is easy enough to understand?)."", 'comment_created': datetime.datetime(2021, 7, 2, 11, 34, 57, tzinfo=datetime.timezone.utc), 'commenter': 'qmonnet', 'type': 'User'}, {'comment_id': 662949698, 'comment_body': 'Nit: Why do you defer and not unlock immediately? If we added something else here before returning in the future, we would want the unlock to happen as soon as possible?\r\n\r\nYou could maybe even have:\r\n```suggestion\r\n\tmc.mu.RLock()\r\n\terr, ok := mc.mapTypes[mt]\r\n\tmc.mu.RUnlock()\r\n\tif ok {\r\n\t\treturn err\r\n\t}\r\n```', 'comment_created': datetime.datetime(2021, 7, 2, 11, 39, 44, tzinfo=datetime.timezone.utc), 'commenter': 'qmonnet', 'type': 'User'}, {'comment_id': 662954128, 'comment_body': ""The struct_ops maps could maybe use something similar in the future. If the BTF FD is invalid we get `-EINVAL`, so it doesn't help for the detection. _But_ we know we need kernel's BTF for struct_ops maps to be supported. If no kernel BTF is present, then it's not supported. If it is present, then we can maybe open a FD on it (we need it for `btfVmLinuxValueTypeID` anyway) and use it to build the `attr`. Map creation should still fail, but with a `-EACCES` returned in kernel/bpf/syscall.c after `find_and_alloc_map()` has succeeded.\r\n\r\nNo adjustment needed for now here, I'm just thinking out loud."", 'comment_created': datetime.datetime(2021, 7, 2, 11, 48, 33, tzinfo=datetime.timezone.utc), 'commenter': 'qmonnet', 'type': 'User'}, {'comment_id': 662956878, 'comment_body': 'No need to defer, this might cause lock retention if we add new code before returning in the future.', 'comment_created': datetime.datetime(2021, 7, 2, 11, 53, 47, tzinfo=datetime.timezone.utc), 'commenter': 'qmonnet', 'type': 'User'}, {'comment_id': 662956907, 'comment_body': ""You had a relevant comment in one of your commits here: How do you discard the maps that you have created?\r\n\r\nThey are not pinned, so the kernel will destroy them once your process ends. But this is a library so we can't be sure the process will be short-lived like bpftool running its probes and exiting (plus, the libbpf probes close the maps by closing their file descriptors). You likely need to remove those maps before you exit the function."", 'comment_created': datetime.datetime(2021, 7, 2, 11, 53, 51, tzinfo=datetime.timezone.utc), 'commenter': 'qmonnet', 'type': 'User'}, {'comment_id': 662958246, 'comment_body': 'The “nested” map would be the inner map. Maybe something like `isMapOfMaps` or `isOuterMap`?', 'comment_created': datetime.datetime(2021, 7, 2, 11, 56, 28, tzinfo=datetime.timezone.utc), 'commenter': 'qmonnet', 'type': 'User'}, {'comment_id': 662958973, 'comment_body': ""I'd write this as a `switch`/`case`, it would seem easier to extend in the future if new map types need to be added to the list, but that's just a personal preference."", 'comment_created': datetime.datetime(2021, 7, 2, 11, 57, 48, tzinfo=datetime.timezone.utc), 'commenter': 'qmonnet', 'type': 'User'}, {'comment_id': 663850544, 'comment_body': '`BPFMapCreate()` returns an internal FD [abstraction](https://github.com/cilium/ebpf/blob/ca492085341e0e917f48ec30704d5054c5d42ca8/internal/syscall.go#L215). And I think these internal FDs get cleaned by this [finalizer](https://github.com/cilium/ebpf/blob/ca492085341e0e917f48ec30704d5054c5d42ca8/internal/fd.go#L21) if garbage collection kicks in. At least that was the reason why I removed those first comments. ', 'comment_created': datetime.datetime(2021, 7, 5, 11, 16, 53, tzinfo=datetime.timezone.utc), 'commenter': 'rgo3', 'type': 'User'}, {'comment_id': 668648480, 'comment_body': ""Note (no action required): A few maps might also depend on the options set to compile the kernel, but looking at the current set, I don't expect this will be an issue in practice (`CONFIG_NET` and `CONFIG_PERF_EVENTS` should be set for most configs I think)."", 'comment_created': datetime.datetime(2021, 7, 13, 10, 48, 2, tzinfo=datetime.timezone.utc), 'commenter': 'qmonnet', 'type': 'User'}, {'comment_id': 668649086, 'comment_body': 'We could simply check that it returns the expected error?', 'comment_created': datetime.datetime(2021, 7, 13, 10, 49, 2, tzinfo=datetime.timezone.utc), 'commenter': 'qmonnet', 'type': 'User'}, {'comment_id': 668649646, 'comment_body': '```suggestion\r\n// similar as in testutils, skipTestCaseOnOldKernel helps to determine whether a testcase can be skipped\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 10, 49, 52, tzinfo=datetime.timezone.utc), 'commenter': 'qmonnet', 'type': 'User'}, {'comment_id': 668652737, 'comment_body': ""(Side note: Besides a change in capabilities, there's also the case where the kernel rejects the map creation because it hits the memory limit for the user. Retrying at a later time with a different number of objects loaded for the user might result in a different result. I think we can safely ignore that for now, a privileged user should be able to detect this case from the error returned anyway.)"", 'comment_created': datetime.datetime(2021, 7, 13, 10, 54, 36, tzinfo=datetime.timezone.utc), 'commenter': 'qmonnet', 'type': 'User'}, {'comment_id': 669424480, 'comment_body': '- This doesn\'t actually call `t.Skip()`, so we should probably avoid putting \'skip\' in its name.\r\n- Perhaps something like `HaveMinimumKernel(""4.19"")` and return true when the minimum req is met? @lmb?\r\n- This is a good candidate for testutils proper.\r\n- If you pass `t *testing.T` to this function instead, you can `t.Fatal()`, no need to panic.', 'comment_created': datetime.datetime(2021, 7, 14, 8, 56, 57, tzinfo=datetime.timezone.utc), 'commenter': 'ti-mo', 'type': 'User'}, {'comment_id': 669435301, 'comment_body': ""The issue here is we have no set of known-good inputs that will lead to successful creation (due to vmlinux BTF requirement). AFAIU, the kernel currently replies EINVAL to the set of inputs we're providing, which is the same answer it returns when trying to create a map with an unknown map type."", 'comment_created': datetime.datetime(2021, 7, 14, 9, 11, 36, tzinfo=datetime.timezone.utc), 'commenter': 'ti-mo', 'type': 'User'}, {'comment_id': 669437086, 'comment_body': ""So this doesn't pop up in autocomplete and the caller cannot refer to it:\r\n```suggestion\r\n\tmaxMapType\r\n```\r\n(This is how it probably should be for now, ignore any future plans we have for a types package)"", 'comment_created': datetime.datetime(2021, 7, 14, 9, 14, 4, tzinfo=datetime.timezone.utc), 'commenter': 'ti-mo', 'type': 'User'}, {'comment_id': 669438221, 'comment_body': 'Good point, but indeed nothing we can account for. This suite is primarily intended to run on the prebuilt CI kernels we control.', 'comment_created': datetime.datetime(2021, 7, 14, 9, 15, 32, tzinfo=datetime.timezone.utc), 'commenter': 'ti-mo', 'type': 'User'}, {'comment_id': 669440218, 'comment_body': ""I think it's fine like this. Following my comment above, we should document that only `nil` and `ErrNotSupported` errors are conclusive, and that map creations can be attempted in the face of any other errors. In the case here, an error is returned, but the kernel might still support StructOps just fine.\r\n\r\nThis comment should refer to the requirement for vmlinux BTF that we currently cannot meet. Please create a follow-up issue so this doesn't fall off the radar. We should try to work something out with the libbpf/kernel folks."", 'comment_created': datetime.datetime(2021, 7, 14, 9, 18, 21, tzinfo=datetime.timezone.utc), 'commenter': 'ti-mo', 'type': 'User'}, {'comment_id': 669478749, 'comment_body': 'The API contract needs to be documented here. (largely mirroring `FeatureTestFn()`) My suggestion:\r\n\r\n```\r\n// HaveMapType probes the running kernel for the availability of the specified map type.\r\n// Return values have the following semantics:\r\n//\r\n//   err == nil: The feature is available.\r\n//   errors.Is(err, ebpf.ErrNotSupported): The feature is not available.\r\n//   err != nil: Any errors encountered during probe execution, wrapped.\r\n//\r\n// Note that the latter case may include false negatives, and that map creation may succeed\r\n// despite an error being returned. Some map types cannot reliably be probed and will also\r\n// return error. Only `nil` and `ebpf.ErrNotSupported` are conclusive.\r\n//\r\n// Probe results are cached and persist throughout any process capability changes.\r\n```\r\n\r\n@lmb @qmonnet Any thoughts?', 'comment_created': datetime.datetime(2021, 7, 14, 10, 13, 32, tzinfo=datetime.timezone.utc), 'commenter': 'ti-mo', 'type': 'User'}, {'comment_id': 669482181, 'comment_body': 'As discussed in https://github.com/cilium/ebpf/issues/235#issuecomment-876461428, I believe this still needs some extra logic.\r\n\r\n- Any unexpected errors need to be wrapped: `fmt.Errorf(""unexpected error during feature probe: %w"", err)`\r\n- Only expected kernel responses (EINVAL?) should be converted to `ErrNotSupported`.\r\n- This returns a value from `internal` across the package boundary to the caller. `ebpf/prog.go` aliases `internal.ErrNotSupported` to `ebpf.ErrNotSupported`, so that symbol should be returned instead in case it\'s ever modified.', 'comment_created': datetime.datetime(2021, 7, 14, 10, 18, 31, tzinfo=datetime.timezone.utc), 'commenter': 'ti-mo', 'type': 'User'}, {'comment_id': 669484320, 'comment_body': 'This can be shortened to `if err := HaveMapType(tc.mapType); err != nil { ... }`.', 'comment_created': datetime.datetime(2021, 7, 14, 10, 21, 42, tzinfo=datetime.timezone.utc), 'commenter': 'ti-mo', 'type': 'User'}, {'comment_id': 669484962, 'comment_body': '`t.Fatalf()` should include the error string in case an unexpected error is encountered. (since this is likely to trip in CI)', 'comment_created': datetime.datetime(2021, 7, 14, 10, 22, 41, tzinfo=datetime.timezone.utc), 'commenter': 'ti-mo', 'type': 'User'}, {'comment_id': 669487767, 'comment_body': 'This is missing negative tests, the `ErrNotSupported` case is never hit as far as I can see. Try creating a map with mt `math.MaxUint32`, which should fail on all kernel versions.\r\n\r\nTip: Go has built-in coverage reports, see: https://blog.golang.org/cover. (esp. the part about `go tool cover -html=coverage.out`) This should help you build coverage.', 'comment_created': datetime.datetime(2021, 7, 14, 10, 27, 18, tzinfo=datetime.timezone.utc), 'commenter': 'ti-mo', 'type': 'User'}, {'comment_id': 669584922, 'comment_body': 'Why not `t.Run(subcase)` and then use `SkipOnOldKernel`?', 'comment_created': datetime.datetime(2021, 7, 14, 12, 50, 38, tzinfo=datetime.timezone.utc), 'commenter': 'lmb', 'type': 'User'}, {'comment_id': 669585415, 'comment_body': ""That test case would only improve the coverage slightly because its caught by the `validateMapType()` check. I could invert `TestHaveMapType` to test new features on old kernels where they don't exist yet to provoke a proper EINVAL and resulting ebpf.ErrNotSupported?"", 'comment_created': datetime.datetime(2021, 7, 14, 12, 51, 14, tzinfo=datetime.timezone.utc), 'commenter': 'rgo3', 'type': 'User'}, {'comment_id': 669586231, 'comment_body': ""SGTM. We'll have to find a way to document this more generally than on a function comment though. We should make all feature probes respect this contract (and check for it)."", 'comment_created': datetime.datetime(2021, 7, 14, 12, 52, 22, tzinfo=datetime.timezone.utc), 'commenter': 'lmb', 'type': 'User'}, {'comment_id': 669586881, 'comment_body': 'How is the `features` package supposed to know the value if I don\'t export it? Should I rather add a ""Getter"" like function to the ebpf package to retrieve this value so its not exported as an actual MapType enum value?', 'comment_created': datetime.datetime(2021, 7, 14, 12, 53, 16, tzinfo=datetime.timezone.utc), 'commenter': 'rgo3', 'type': 'User'}, {'comment_id': 669591596, 'comment_body': 'Maybe We could also document the API contract in the doc.go file for the entire subpackage?', 'comment_created': datetime.datetime(2021, 7, 14, 12, 59, 22, tzinfo=datetime.timezone.utc), 'commenter': 'rgo3', 'type': 'User'}, {'comment_id': 669617650, 'comment_body': ""Ah I wanted to have something like @lmb suggests in the first place and wasn't aware I can do it like that. I just tried it and it definitely gives nicer test output + the skip messages are conform with the ones we already have."", 'comment_created': datetime.datetime(2021, 7, 14, 13, 31, 18, tzinfo=datetime.timezone.utc), 'commenter': 'rgo3', 'type': 'User'}, {'comment_id': 669683550, 'comment_body': 'For the testing part, we can work with isolated testing packages: declaring `package feature_test` in the header, but with `xxx_test.go` files still in the `feature/` directory. This makes it so the test can emulate an external consumer and has to refer to constants with their fully-qualified specifiers (e.g. `ebpf.ErrNotSupported`). This might help in validating/enforcing the external API contract.\r\n\r\nAs for the function comment here, I think it makes sense to declare this documentation on the function itself as it plays nicest with code editors. Package docs often go unnoticed.', 'comment_created': datetime.datetime(2021, 7, 14, 14, 44, 37, tzinfo=datetime.timezone.utc), 'commenter': 'ti-mo', 'type': 'User'}, {'comment_id': 669684079, 'comment_body': ""I've spun this out into an issue: https://github.com/cilium/ebpf/issues/344."", 'comment_created': datetime.datetime(2021, 7, 14, 14, 45, 11, tzinfo=datetime.timezone.utc), 'commenter': 'ti-mo', 'type': 'User'}, {'comment_id': 669684743, 'comment_body': ""Thanks @qmonnet, that's useful! Lorenz suggested this might be possible. Which BTF blob are you using there? I've spun this out into https://github.com/cilium/ebpf/issues/344 for now."", 'comment_created': datetime.datetime(2021, 7, 14, 14, 45, 59, tzinfo=datetime.timezone.utc), 'commenter': 'ti-mo', 'type': 'User'}, {'comment_id': 669690481, 'comment_body': ':+1: I pasted the complete patch on the new issue.', 'comment_created': datetime.datetime(2021, 7, 14, 14, 52, 4, tzinfo=datetime.timezone.utc), 'commenter': 'qmonnet', 'type': 'User'}, {'comment_id': 669707514, 'comment_body': ""Ah, good point. To make this more testable, the current `HaveMapType` could become an exported wrapper around `validateMapType()` and a new `haveMapType()`. This would allow probing to take place from tests without input validation.\r\n\r\n>  I could invert TestHaveMapType to test new features on old kernels where they don't exist yet \r\n\r\nThat would be the alternative, but as we remove old kernel versions over time, these tests will stop being executed at some point in the future if all kernels we test against are too new."", 'comment_created': datetime.datetime(2021, 7, 14, 15, 10, 34, tzinfo=datetime.timezone.utc), 'commenter': 'ti-mo', 'type': 'User'}, {'comment_id': 669713748, 'comment_body': ""Ok, I'll go with the wrapper approach you are suggesting. This will also fix the currently failing tests."", 'comment_created': datetime.datetime(2021, 7, 14, 15, 17, 53, tzinfo=datetime.timezone.utc), 'commenter': 'rgo3', 'type': 'User'}, {'comment_id': 669716386, 'comment_body': 'Thanks! One more thing, you mentioned:\r\n\r\n> The `btfVmLinuxValueTypeID = 1` is wrong anyway\r\n\r\nWhy is this? Is this a hardcoded check in the kernel? According to https://www.kernel.org/doc/html/v5.9/bpf/btf.html#type-encoding, type ID 3 is `BTF_KIND_ARRAY`, at least as far as vmlinux is concerned. I think for eBPF programs, the compiler can (and does) assign type IDs 1 and up to any arbitrary type.\r\n\r\nIf this is really needs to be `BTF_KIND_ARRAY`, we should probably use constants for this.', 'comment_created': datetime.datetime(2021, 7, 14, 15, 20, 57, tzinfo=datetime.timezone.utc), 'commenter': 'ti-mo', 'type': 'User'}, {'comment_id': 669747685, 'comment_body': ""My understanding of BTF is not perfect, but the value we want here is the BTF id corresponding to `struct bpf_struct_ops_tcp_congestion_ops` in kernel's BTF. The value I needed to have it work was `26843`, as readable from:\r\n\r\n```\r\n# bpftool btf dump file /sys/kernel/btf/vmlinux | grep bpf_struct_ops_tcp_congestion_ops\r\n[26843] STRUCT 'bpf_struct_ops_tcp_congestion_ops' size=256 vlen=3\r\n```\r\n\r\nI'm not confident at all that this can be a constant. My guess is that this is fixed for a given kernel BTF object, but ids would probably be numbered differently on a kernel with different definitions.\r\n\r\nIt doesn't _have_ to point to the BTF of the valid struct (I think?), but if we want to create the map we have to use a `type_id` from which the `st_ops` retrieved with `bpf_struct_ops_find_value()` passes the different checks in `bpf_struct_ops_map_alloc()` in kernel/bpf/bpf_struct_ops.c. I spent some time trying to forge something that would work, but eventually the solution I have in the patch above was way cleaner (and the only one I managed to make work)."", 'comment_created': datetime.datetime(2021, 7, 14, 15, 57, 15, tzinfo=datetime.timezone.utc), 'commenter': 'qmonnet', 'type': 'User'}, {'comment_id': 670413708, 'comment_body': ""> My understanding of BTF is not perfect, but the value we want here is the BTF id corresponding to struct bpf_struct_ops_tcp_congestion_ops in kernel's BTF. The value I needed to have it work was 26843\r\n\r\nYes, type IDs are dynamic and will differ between binaries. (The same is true for the size btw, which I see you've hardcoded to `value_size = 256` in your example in the other issue. The struct size can be pulled from the BTF too.)\r\n\r\n> I spent some time trying to forge something that would work, but eventually the solution I have in the patch above was way cleaner (and the only one I managed to make work).\r\n\r\nGreat, thanks for the research! If successfully creating any StructOps map depends on vmlinux BTF being available, then I'm afraid there's no way around it. We can try and fiddle around a bit more, but we'll probably end up querying the BTF tree in this library as well, then."", 'comment_created': datetime.datetime(2021, 7, 15, 12, 26, 53, tzinfo=datetime.timezone.utc), 'commenter': 'ti-mo', 'type': 'User'}, {'comment_id': 670421165, 'comment_body': 'Yup, agree with the reasoning overall. It seems like we cannot create StructOps maps without vmlinux BTF available, hence we could already return ErrNotSupported if a valid BTF blob cannot be found.\r\n\r\n> If it is present, then we can maybe open a FD on it\r\n\r\nMaybe I didn\'t get this right, but is loading the kernel\'s own vmlinux BTF blob into the kernel necessary (or even possible), though? Doesn\'t the kernel already have the ability to introspect its own types? All that\'s needed to determine `btfVmLinuxValueTypeID` is parsing the BTF blob in userspace and querying it for the `struct bpf_struct_ops_tcp_congestion_ops` type. After all, isn\'t that what `btf__find_by_name_kind(btf_vmlinux, ""bpf_struct_ops_tcp_congestion_ops"", ...` does in your example in #344? `libbpf_find_kernel_btf()` doesn\'t return an fd.', 'comment_created': datetime.datetime(2021, 7, 15, 12, 37, 11, tzinfo=datetime.timezone.utc), 'commenter': 'ti-mo', 'type': 'User'}, {'comment_id': 670438372, 'comment_body': ""As discussed offline, one solution is to implement the following:\r\n```go\r\nfunc (_ MapType) Max() MapType {\r\n  return maxMapType\r\n}\r\n```\r\n\r\nIt's slightly annoying to use since it requires access to a `MapType` variable, but enables things like `if mt >= mt.Max() { ... }`, which is quite elegant. I much prefer this over having an exported `MaxMapType` const. Any other suggestions @lmb?"", 'comment_created': datetime.datetime(2021, 7, 15, 12, 59, 52, tzinfo=datetime.timezone.utc), 'commenter': 'ti-mo', 'type': 'User'}, {'comment_id': 670461168, 'comment_body': ""Not sure I understand.\r\n\r\n> Maybe I didn't get this right, but is loading the kernel's own vmlinux BTF blob into the kernel necessary (or even possible), though? Doesn't the kernel already have the ability to introspect its own types?\r\n\r\nAs far I understand the struct_ops maps rely on the availability of the vmlinux BTF in the kernel. So yes, the vmlinux BTF is loaded into the kernel somehow? But I don't think _we_ should attempt to load it again from user space. It should be possible to retrieve a file descriptor to that BTF object if it's present in the kernel, with `bpf_btf_get_fd_by_id()`? It still requires a way to find the id for kernel BTF, though :thinking:.\r\n\r\nThen once we have this fd we could assign it to `attr->btf_fd`, this won't be valid and the map won't be created, but it should return `-EBADF` instead of `-EINVAL`, so we could conclude that struct_ops maps are supported."", 'comment_created': datetime.datetime(2021, 7, 15, 13, 27, 40, tzinfo=datetime.timezone.utc), 'commenter': 'qmonnet', 'type': 'User'}, {'comment_id': 671186790, 'comment_body': ""```go\r\n \t\tbtfKeyTypeID = 1 // BTF_KIND_INT\r\n \t\tbtfValueTypeID = 3 // BTF_KIND_ARRAY\r\n```\r\n\r\nConstants might be added for this later, but this way it's clear where the magic values come from.\r\n(https://www.kernel.org/doc/html/v5.9/bpf/btf.html#type-encoding)"", 'comment_created': datetime.datetime(2021, 7, 16, 11, 57, 23, tzinfo=datetime.timezone.utc), 'commenter': 'ti-mo', 'type': 'User'}, {'comment_id': 671191287, 'comment_body': '```suggestion\r\n\t// EINVAL occurs when attempting to create a map with an unknown type.\r\n\t// E2BIG occurs when BPFMapCreateAttr contains non-zero bytes past the end\r\n\t// of the struct known by the running kernel, meaning the kernel is too old\r\n\t// to support the given map type.\r\n```', 'comment_created': datetime.datetime(2021, 7, 16, 12, 5, 40, tzinfo=datetime.timezone.utc), 'commenter': 'ti-mo', 'type': 'User'}, {'comment_id': 671191349, 'comment_body': '```suggestion\r\n\t\terr = fmt.Errorf(""unexpected error during feature probe: %w"", err)\r\n```', 'comment_created': datetime.datetime(2021, 7, 16, 12, 5, 47, tzinfo=datetime.timezone.utc), 'commenter': 'ti-mo', 'type': 'User'}, {'comment_id': 671193300, 'comment_body': ""Sorry for the confusion, we've recently decided to use 0 for future additions to non-Linux consts. This const doesn't exist on other platforms, so copying the value Linux uses might cause unintended side effects. (0x7 might be used by another const on a certain platform)"", 'comment_created': datetime.datetime(2021, 7, 16, 12, 8, 40, tzinfo=datetime.timezone.utc), 'commenter': 'ti-mo', 'type': 'User'}, {'comment_id': 671194066, 'comment_body': '```suggestion\r\n// Max returns the latest supported MapType.\r\n```', 'comment_created': datetime.datetime(2021, 7, 16, 12, 9, 37, tzinfo=datetime.timezone.utc), 'commenter': 'ti-mo', 'type': 'User'}, {'comment_id': 671194621, 'comment_body': ""I've been thinking about this; we should probably make this return `maxMapType-1`, since the `maxMapType` value points past what's actually supported."", 'comment_created': datetime.datetime(2021, 7, 16, 12, 10, 25, tzinfo=datetime.timezone.utc), 'commenter': 'ti-mo', 'type': 'User'}, {'comment_id': 671195980, 'comment_body': 'Following my comment on `MapType.Max()` below, remember to change this to `mt <= mt.Max()`.', 'comment_created': datetime.datetime(2021, 7, 16, 12, 12, 21, tzinfo=datetime.timezone.utc), 'commenter': 'ti-mo', 'type': 'User'}, {'comment_id': 671196362, 'comment_body': '```suggestion\r\n\tebpf.StructOpts:          ""5.6"", // requires vmlinux BTF, skip for now\r\n```', 'comment_created': datetime.datetime(2021, 7, 16, 12, 12, 58, tzinfo=datetime.timezone.utc), 'commenter': 'ti-mo', 'type': 'User'}, {'comment_id': 671200035, 'comment_body': 'This is a (testing) package-global variable, so the name `testCases` might be a bit too generic. Maybe `mapTypeKernels`?', 'comment_created': datetime.datetime(2021, 7, 16, 12, 18, 22, tzinfo=datetime.timezone.utc), 'commenter': 'ti-mo', 'type': 'User'}, {'comment_id': 671208158, 'comment_body': ""You're definitely on to something, let's resume this in https://github.com/cilium/ebpf/issues/344!"", 'comment_created': datetime.datetime(2021, 7, 16, 12, 28, 46, tzinfo=datetime.timezone.utc), 'commenter': 'ti-mo', 'type': 'User'}]","[{'commit_sha': '85394de3a7546d6de36f2a5ab54cc9ffefbc9f0b', 'committer_username': 'rgo3', 'committer_name': 'Robin Gögge', 'committer_email': 'r.goegge@gmail.com', 'commit_date': datetime.datetime(2016, 1, 24, 18, 38, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9bd52a629ed4a3830618fe260939b4bfd8363f6d', 'committer_username': 'ti-mo', 'committer_name': 'Timo Beckers', 'committer_email': None, 'commit_date': datetime.datetime(2013, 1, 8, 9, 34, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c014a42517dae1e3ae83891bea08882351e5c51', 'committer_username': 'ti-mo', 'committer_name': 'Timo Beckers', 'committer_email': None, 'commit_date': datetime.datetime(2013, 1, 8, 9, 34, 29, tzinfo=datetime.timezone.utc)}]",Robin Gögge,16867492,r.goegge@gmail.com,User,,39,,11,25
696520378,features: add HaveProgType API,"With this commit we add `HaveProgType(pt ebpf.ProgramType) error`,
which allows to probe for available BPF program types. As with the
HaveMapType API, results are cached and probes run at most once.

Signed-off-by: Robin Gögge <r.goegge@outlook.com>",True,355,https://api.github.com/repos/cilium/ebpf/pulls/355,https://github.com/cilium/ebpf/pull/355,closed,323,68,6,2,1,15,0,1,[],2021-07-25 15:29:57+00:00,2021-08-11 09:59:00+00:00,1448943.0,"16 days, 18:29:03","[{'comment_id': 683547843, 'comment_body': 'The assembly of the probe program could be moved to `init()` (rather, a function called by `init()`), since it only needs to be assembled once. `instructions` and the parameter to `InsCount` could then be stored in `pc`, which saves some garbage.', 'comment_created': datetime.datetime(2021, 8, 5, 15, 12, 28, tzinfo=datetime.timezone.utc), 'commenter': 'ti-mo', 'type': 'User'}, {'comment_id': 683548782, 'comment_body': 'This could be run with `t.Parallel()`.', 'comment_created': datetime.datetime(2021, 8, 5, 15, 13, 34, tzinfo=datetime.timezone.utc), 'commenter': 'ti-mo', 'type': 'User'}, {'comment_id': 684362844, 'comment_body': 'Since I probably also want to use that function to generate the load attribute when probing helpers, I imagined generating the instructions ""dynamically"" here according to the helper call thats supposed to be probed. So moving this to `init()` would just be reverted in that case. ', 'comment_created': datetime.datetime(2021, 8, 6, 16, 31, 37, tzinfo=datetime.timezone.utc), 'commenter': 'rgo3', 'type': 'User'}, {'comment_id': 684375019, 'comment_body': 'Done. Had to make use of some not so elegant variable copying as mentioned [here](https://gist.github.com/posener/92a55c4cd441fc5e5e85f27bca008721#how-to-solve-this), but that works.', 'comment_created': datetime.datetime(2021, 8, 6, 16, 52, 44, tzinfo=datetime.timezone.utc), 'commenter': 'rgo3', 'type': 'User'}, {'comment_id': 685307024, 'comment_body': ""I was thinking we could use the pre-cooked program when probing program types and generating one on-the-fly when probing helper types. This might be a premature optimization, though. Let's wait and see what this will look like with helper probes added. :+1: "", 'comment_created': datetime.datetime(2021, 8, 9, 15, 40, 46, tzinfo=datetime.timezone.utc), 'commenter': 'ti-mo', 'type': 'User'}, {'comment_id': 685310765, 'comment_body': 'This is common in Go. :slightly_smiling_face: Good catch!', 'comment_created': datetime.datetime(2021, 8, 9, 15, 45, 9, tzinfo=datetime.timezone.utc), 'commenter': 'ti-mo', 'type': 'User'}, {'comment_id': 685314547, 'comment_body': 'I think we could use `testutils.SkipIfNotSupported()` here, so at least the probe runs, but we discard ErrNotSupported until/if/when we rebuild CI kernels with this kconfig enabled.', 'comment_created': datetime.datetime(2021, 8, 9, 15, 49, 46, tzinfo=datetime.timezone.utc), 'commenter': 'ti-mo', 'type': 'User'}, {'comment_id': 685537684, 'comment_body': '`SkipIfNotSupported()` might be handy to create an easy test for the HaveProgHelper API. We could basically run a double for over progs and helpers and discard NotSupported results. While its not to accurate it would at least give good coverage and we could avoid creating a complicated ""test case matrix"".', 'comment_created': datetime.datetime(2021, 8, 9, 21, 35, 41, tzinfo=datetime.timezone.utc), 'commenter': 'rgo3', 'type': 'User'}, {'comment_id': 685798732, 'comment_body': 'Could be\r\n```suggestion\r\n\tif err := insns.Marshal(buf, internal.NativeEndian); err != nil {\r\n```\r\nHere and below in the same function.', 'comment_created': datetime.datetime(2021, 8, 10, 8, 19, 25, tzinfo=datetime.timezone.utc), 'commenter': 'qmonnet', 'type': 'User'}, {'comment_id': 685799775, 'comment_body': ""Not sure if worth keeping the comments, since the latest fields don't have it and I doubt there's much motivation to keep the list up-to-date (but that's not my call to make)."", 'comment_created': datetime.datetime(2021, 8, 10, 8, 20, 49, tzinfo=datetime.timezone.utc), 'commenter': 'qmonnet', 'type': 'User'}, {'comment_id': 685913659, 'comment_body': ""Yup, we should only test a few known-good and known-bad prog/helper combinations, and combinatorially test all prog/helper types to catch errors that are not `nil`/`ErrNotSupported`. Though that won't alert us for cases like StructOps where probes always fail when no BTF is specified. That's probably something we need to accept."", 'comment_created': datetime.datetime(2021, 8, 10, 11, 0, 16, tzinfo=datetime.timezone.utc), 'commenter': 'ti-mo', 'type': 'User'}, {'comment_id': 685996529, 'comment_body': ""I don't think I can apply this below with `v, err := internal.KernelVersion()` because then variable `v` is only available in the if scope I believe, so I would have to use an `else` which I'd like to avoid. I'll use your suggestion for the first occurrence though :)"", 'comment_created': datetime.datetime(2021, 8, 10, 13, 4, 27, tzinfo=datetime.timezone.utc), 'commenter': 'rgo3', 'type': 'User'}, {'comment_id': 685998378, 'comment_body': ""If we choose to remove the comments I'd say we can do it in another PR, likewise if we'd chose to add some comments to keep the fields up-to-date."", 'comment_created': datetime.datetime(2021, 8, 10, 13, 6, 49, tzinfo=datetime.timezone.utc), 'commenter': 'rgo3', 'type': 'User'}, {'comment_id': 686003693, 'comment_body': 'Correct I read too fast for the second one :+1: ', 'comment_created': datetime.datetime(2021, 8, 10, 13, 13, 1, tzinfo=datetime.timezone.utc), 'commenter': 'qmonnet', 'type': 'User'}, {'comment_id': 686004053, 'comment_body': 'No objection', 'comment_created': datetime.datetime(2021, 8, 10, 13, 13, 26, tzinfo=datetime.timezone.utc), 'commenter': 'qmonnet', 'type': 'User'}]","[{'commit_sha': 'd300cfd5ab10fbf1b039f6bd68cefbf3fbfd4d8d', 'committer_username': 'rgo3', 'committer_name': 'Robin Gögge', 'committer_email': 'r.goegge@gmail.com', 'commit_date': datetime.datetime(2016, 1, 24, 18, 38, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea4d44250ca4736704f8ad5055324274a19d8a7d', 'committer_username': 'rgo3', 'committer_name': 'Robin Gögge', 'committer_email': 'r.goegge@gmail.com', 'commit_date': datetime.datetime(2016, 1, 24, 18, 38, 26, tzinfo=datetime.timezone.utc)}]",Robin Gögge,16867492,r.goegge@gmail.com,User,,39,,11,25
712204063,features: add HaveProgramHelper API,"`HaveProgHelper(pt ebpf.ProgramType, helper asm.BuiltinFunc) error`
allows to probe the available BPF helpers to a given BPF program
type. Probe results are cached and run at most once.

Signed-off-by: Robin Gögge <r.goegge@gmail.com>",True,375,https://api.github.com/repos/cilium/ebpf/pulls/375,https://github.com/cilium/ebpf/pull/375,closed,217,22,5,2,24,8,0,0,[],2021-08-13 09:21:13+00:00,2022-05-23 13:12:49+00:00,24465096.0,"283 days, 3:51:36","[{'comment_id': 873861671, 'comment_body': 'To indicate the short lifespan of `err`:\r\n\r\n```suggestion\r\n\tif err, ok := pc.progHelpers[pt][helper]; ok {\r\n```', 'comment_created': datetime.datetime(2022, 5, 16, 15, 24, 6, tzinfo=datetime.timezone.utc), 'commenter': 'ti-mo', 'type': 'User'}, {'comment_id': 873873299, 'comment_body': ""Feel free to comment this one out until 5.17 testing is live in CI.\r\n\r\nI've added a note to https://github.com/cilium/ebpf/pull/668 to make sure this gets uncommented before merging."", 'comment_created': datetime.datetime(2022, 5, 16, 15, 35, 5, tzinfo=datetime.timezone.utc), 'commenter': 'ti-mo', 'type': 'User'}, {'comment_id': 873875916, 'comment_body': 'Nit: the `@` prefix gets included in the selection if I double-click the word in my editor. :cry: ', 'comment_created': datetime.datetime(2022, 5, 16, 15, 37, 45, tzinfo=datetime.timezone.utc), 'commenter': 'ti-mo', 'type': 'User'}, {'comment_id': 873878975, 'comment_body': '```suggestion\r\n\t// Referencing linux kernel commits to track the kernel version required to pass these test cases\r\n```', 'comment_created': datetime.datetime(2022, 5, 16, 15, 40, 33, tzinfo=datetime.timezone.utc), 'commenter': 'ti-mo', 'type': 'User'}, {'comment_id': 873879345, 'comment_body': ""```suggestion\r\n\t// These test cases are derived from libbpf's selftests and helper/prog combinations that are\r\n```"", 'comment_created': datetime.datetime(2022, 5, 16, 15, 40, 53, tzinfo=datetime.timezone.utc), 'commenter': 'ti-mo', 'type': 'User'}, {'comment_id': 873883086, 'comment_body': 'Could we add one or two more expected `ErrNotSupported` combos from older (4.x) kernels? This would ensure our detection strategy is sound throughout the history. The current negative tests only run on 5.14 and above (modulo `TestHaveProgHelperUnsupported`, but that one might trip early user input checks in the syscall handler)', 'comment_created': datetime.datetime(2022, 5, 16, 15, 43, 35, tzinfo=datetime.timezone.utc), 'commenter': 'ti-mo', 'type': 'User'}, {'comment_id': 874990501, 'comment_body': 'Commented two test cases out, which require CI kernel changes.', 'comment_created': datetime.datetime(2022, 5, 17, 15, 49, 19, tzinfo=datetime.timezone.utc), 'commenter': 'rgo3', 'type': 'User'}, {'comment_id': 874993332, 'comment_body': 'Added:\r\n* `{ebpf.Kprobe, asm.FnSkbVlanPush, ebpf.ErrNotSupported, ""4.3""}, // 4e10df9a60d9`\r\n* `{ebpf.Kprobe, asm.FnFibLookup, ebpf.ErrNotSupported, ""4.18""},  // 87f5fc7e48dd`', 'comment_created': datetime.datetime(2022, 5, 17, 15, 51, 9, tzinfo=datetime.timezone.utc), 'commenter': 'rgo3', 'type': 'User'}]","[{'commit_sha': 'dda07c04e5ee02f82fc23ddfbc102754a864e9c0', 'committer_username': 'rgo3', 'committer_name': 'Robin Gögge', 'committer_email': 'r.goegge@gmail.com', 'commit_date': datetime.datetime(2016, 1, 24, 18, 38, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83afbaea05c82855f2bc2cdfc68ae79793777701', 'committer_username': 'rgo3', 'committer_name': 'Robin Gögge', 'committer_email': 'r.goegge@gmail.com', 'commit_date': datetime.datetime(2016, 1, 24, 18, 38, 26, tzinfo=datetime.timezone.utc)}]",Robin Gögge,16867492,r.goegge@gmail.com,User,,39,,11,25
674969914,Add feature test for BPF_F_INNER_MAP maps,"Introduced in
https://github.com/torvalds/linux/commit/4a8f87e60f6db40e640f1db555d063b2c4dea5f1.

In Cilium, following the merge of https://github.com/cilium/cilium/pull/15546, we need to add this feature test as Maglev mode uses inner maps (map-in-map).

Signed-off-by: Chris Tarazi <chris@isovalent.com>
",True,330,https://api.github.com/repos/cilium/ebpf/pulls/330,https://github.com/cilium/ebpf/pull/330,closed,27,0,5,1,0,2,0,0,[],2021-06-21 23:53:38+00:00,2021-06-23 08:55:42+00:00,118924.0,"1 day, 9:02:04","[{'comment_id': 655911176, 'comment_body': 'This probably is supposed to be `BPF_F_INNER_MAP`?', 'comment_created': datetime.datetime(2021, 6, 22, 6, 25, tzinfo=datetime.timezone.utc), 'commenter': 'rgo3', 'type': 'User'}, {'comment_id': 656408408, 'comment_body': ':facepalm: classic copy-pasta mistake, thanks', 'comment_created': datetime.datetime(2021, 6, 22, 16, 51, 51, tzinfo=datetime.timezone.utc), 'commenter': 'christarazi', 'type': 'User'}]","[{'commit_sha': '935cdd3f25761313ec2bf0da858f0dc14dc43166', 'committer_username': 'christarazi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2013, 3, 16, 18, 54, 2, tzinfo=datetime.timezone.utc)}]",,3885308,,User,,76,,1,34
705170087,"feature: add call fixups for bpf_probe_read_kernel, etc","I met the `invalid func unknown#113` error yesterday when deploying bpf programs to a 4.19 kernel, and found that libbpf have this bpf_probe_read_kernel auto replacement feature when it loads program.
https://github.com/libbpf/libbpf/blob/master/src/libbpf.c#L6009

So I added this feature to this project and have it tested.

```
$ go test -run TestHaveProbeReadKernel
PASS
ok  	github.com/cilium/ebpf	0.003s
```

Please let me know if any problem with this implementation 🙇  Thanks a lot!",True,367,https://api.github.com/repos/cilium/ebpf/pulls/367,https://github.com/cilium/ebpf/pull/367,closed,59,0,4,1,0,24,0,0,[],2021-08-06 03:54:25+00:00,2021-08-17 21:08:56+00:00,1012471.0,"11 days, 17:14:31","[{'comment_id': 685293856, 'comment_body': 'Why is this implemented in an additional loop? ', 'comment_created': datetime.datetime(2021, 8, 9, 15, 25, 29, tzinfo=datetime.timezone.utc), 'commenter': 'ti-mo', 'type': 'User'}, {'comment_id': 685299211, 'comment_body': ""It doesn't look like this `ProgramSpec` is actually passed to anything, could it be removed?"", 'comment_created': datetime.datetime(2021, 8, 9, 15, 31, 34, tzinfo=datetime.timezone.utc), 'commenter': 'ti-mo', 'type': 'User'}, {'comment_id': 685655126, 'comment_body': 'IMHO, the above two for-loops are for handling symbol call relocation, and both have if-condition that will filter bpf_probe_read instructions out. Thought it would be cleaner for another for-loop.\r\n\r\nOr we can implement here https://github.com/cilium/ebpf/blob/76832385809beed631f0a1b8e4f7c51b6d24fd89/linker.go#L92-L94 \r\n\r\nHow do you think?\r\n', 'comment_created': datetime.datetime(2021, 8, 10, 3, 1, 42, tzinfo=datetime.timezone.utc), 'commenter': 'xh4n3', 'type': 'User'}, {'comment_id': 685655459, 'comment_body': 'Sure!', 'comment_created': datetime.datetime(2021, 8, 10, 3, 2, 39, tzinfo=datetime.timezone.utc), 'commenter': 'xh4n3', 'type': 'User'}, {'comment_id': 685869366, 'comment_body': 'Nit: no need to defer here?', 'comment_created': datetime.datetime(2021, 8, 10, 9, 52, 52, tzinfo=datetime.timezone.utc), 'commenter': 'lmb', 'type': 'User'}, {'comment_id': 685871544, 'comment_body': 'This is only valid to do if `ins.IsFunctionCall` is true.', 'comment_created': datetime.datetime(2021, 8, 10, 9, 55, 59, tzinfo=datetime.timezone.utc), 'commenter': 'lmb', 'type': 'User'}, {'comment_id': 685872628, 'comment_body': ""Your current approach and putting it in the first loop are both OK. I wouldn't put it in the second loop."", 'comment_created': datetime.datetime(2021, 8, 10, 9, 57, 31, tzinfo=datetime.timezone.utc), 'commenter': 'lmb', 'type': 'User'}, {'comment_id': 685922455, 'comment_body': ""You're right, I will add an if-filter here.\r\nHowever, `ins.IsFunctionCall()` returns false for the FnProbeReadKernel, because ins.Src equals to R0. Can I use a `ins.OpCode.JumpOp() == Call` instead?\r\nhttps://github.com/cilium/ebpf/blob/master/asm/instruction.go#L177-L182"", 'comment_created': datetime.datetime(2021, 8, 10, 11, 15, 16, tzinfo=datetime.timezone.utc), 'commenter': 'xh4n3', 'type': 'User'}, {'comment_id': 685923128, 'comment_body': 'Okay, let me mark this as resolved.', 'comment_created': datetime.datetime(2021, 8, 10, 11, 16, 24, tzinfo=datetime.timezone.utc), 'commenter': 'xh4n3', 'type': 'User'}, {'comment_id': 685923255, 'comment_body': 'Will fix it.', 'comment_created': datetime.datetime(2021, 8, 10, 11, 16, 40, tzinfo=datetime.timezone.utc), 'commenter': 'xh4n3', 'type': 'User'}, {'comment_id': 685941527, 'comment_body': 'Updated.', 'comment_created': datetime.datetime(2021, 8, 10, 11, 46, 18, tzinfo=datetime.timezone.utc), 'commenter': 'xh4n3', 'type': 'User'}, {'comment_id': 685974974, 'comment_body': 'Good point! Can you add `IsBuiltinCall` which asserts `JumpOp == Call` and `ins.Src == R0` and use that?', 'comment_created': datetime.datetime(2021, 8, 10, 12, 36, 47, tzinfo=datetime.timezone.utc), 'commenter': 'lmb', 'type': 'User'}, {'comment_id': 685989959, 'comment_body': 'Nice suggestion!\r\nI just refer to libbpf and found they have additional ins.Dst == R0 check, so I added this as well.\r\n', 'comment_created': datetime.datetime(2021, 8, 10, 12, 56, 8, tzinfo=datetime.timezone.utc), 'commenter': 'xh4n3', 'type': 'User'}, {'comment_id': 686769959, 'comment_body': 'nit:\r\n```suggestion\r\n\tif err := insns.Marshal(buf, internal.NativeEndian); err != nil {\r\n\t    return err\r\n\t}\r\n```', 'comment_created': datetime.datetime(2021, 8, 11, 12, 13, tzinfo=datetime.timezone.utc), 'commenter': 'rgo3', 'type': 'User'}, {'comment_id': 686771279, 'comment_body': ""`bpfProgLoadAttr` and `bpfProgLoad()` were moved to internal by me in a PR #355 that just landed so you'll have to rebase. "", 'comment_created': datetime.datetime(2021, 8, 11, 12, 14, 53, tzinfo=datetime.timezone.utc), 'commenter': 'rgo3', 'type': 'User'}, {'comment_id': 686775164, 'comment_body': 'nit: this could be moved directly into the struct creation above.', 'comment_created': datetime.datetime(2021, 8, 11, 12, 18, 40, tzinfo=datetime.timezone.utc), 'commenter': 'rgo3', 'type': 'User'}, {'comment_id': 686781190, 'comment_body': 'I think you could do this:\r\n```suggestion\r\n\t_, err := bpfProgLoad(attr)\r\n```\r\nto avoid the `fd.Close()` call beneath but I am not sure if its better to close it implicitly.', 'comment_created': datetime.datetime(2021, 8, 11, 12, 27, 10, tzinfo=datetime.timezone.utc), 'commenter': 'rgo3', 'type': 'User'}, {'comment_id': 686792286, 'comment_body': 'An explicit close for fds is better, I think.', 'comment_created': datetime.datetime(2021, 8, 11, 12, 42, 4, tzinfo=datetime.timezone.utc), 'commenter': 'lmb', 'type': 'User'}, {'comment_id': 686796513, 'comment_body': ""Ok good to know! It's implicitly done on all my contributions recently, that's why I made the comment :sweat_smile: "", 'comment_created': datetime.datetime(2021, 8, 11, 12, 47, 30, tzinfo=datetime.timezone.utc), 'commenter': 'rgo3', 'type': 'User'}, {'comment_id': 686799256, 'comment_body': 'Agreed, I think setting fd to `_` will let go runtime to do a simple gc over fd object without calling a close, may lead to a leak.', 'comment_created': datetime.datetime(2021, 8, 11, 12, 50, 54, tzinfo=datetime.timezone.utc), 'commenter': 'xh4n3', 'type': 'User'}, {'comment_id': 686801983, 'comment_body': 'Updated.', 'comment_created': datetime.datetime(2021, 8, 11, 12, 54, 13, tzinfo=datetime.timezone.utc), 'commenter': 'xh4n3', 'type': 'User'}, {'comment_id': 686802166, 'comment_body': 'Rebased and re-tested.', 'comment_created': datetime.datetime(2021, 8, 11, 12, 54, 30, tzinfo=datetime.timezone.utc), 'commenter': 'xh4n3', 'type': 'User'}, {'comment_id': 686802949, 'comment_body': 'Updated.', 'comment_created': datetime.datetime(2021, 8, 11, 12, 55, 28, tzinfo=datetime.timezone.utc), 'commenter': 'xh4n3', 'type': 'User'}, {'comment_id': 686908999, 'comment_body': 'Just FYI, the close should be called either way because the internal fd abstraction has a runtime finalizer set [here](https://github.com/cilium/ebpf/blob/bd9d58fe2c473f6fde14cffd67ca0627eb0be970/internal/fd.go#L21). But if explicitly is better, I might want to change it in the work I have done as well :+1: ', 'comment_created': datetime.datetime(2021, 8, 11, 14, 52, 3, tzinfo=datetime.timezone.utc), 'commenter': 'rgo3', 'type': 'User'}]","[{'commit_sha': '157819ee7be437a1d10506b4423fcc5560a507dd', 'committer_username': 'xh4n3', 'committer_name': 'Shane Xie', 'committer_email': None, 'commit_date': datetime.datetime(2013, 5, 19, 5, 27, 49, tzinfo=datetime.timezone.utc)}]",Shane Xie,4469022,,User,,28,,72,64

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
48109239,cilium,cilium/cilium,Go,2855,19608,311,957,33193,1137,690,157,"[{'id': 2026191333, 'number': 34460, 'closed': datetime.datetime(2024, 8, 20, 19, 20, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 8, 19, 18, 59, 12, tzinfo=datetime.timezone.utc), 'time_taken': 87673.0, 'time_delta': '1 day, 0:21:13', 'additions': 0, 'deletions': 2, 'state': 'closed'}, {'id': 1954982925, 'number': 33599, 'closed': datetime.datetime(2024, 7, 8, 10, 1, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 7, 5, 11, 0, 58, tzinfo=datetime.timezone.utc), 'time_taken': 255653.0, 'time_delta': '2 days, 23:00:53', 'additions': 6, 'deletions': 0, 'state': 'closed'}, {'id': 1940399974, 'number': 33410, 'closed': datetime.datetime(2024, 7, 29, 7, 39, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 6, 26, 16, 14, 27, tzinfo=datetime.timezone.utc), 'time_taken': 2820328.0, 'time_delta': '32 days, 15:25:28', 'additions': 15, 'deletions': 18, 'state': 'closed'}, {'id': 1940280880, 'number': 33409, 'closed': datetime.datetime(2024, 6, 26, 16, 3, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 6, 26, 15, 6, 43, tzinfo=datetime.timezone.utc), 'time_taken': 3422.0, 'time_delta': '0:57:02', 'additions': 15, 'deletions': 18, 'state': 'closed'}, {'id': 1896395289, 'number': 32803, 'closed': datetime.datetime(2024, 7, 3, 12, 57, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 5, 30, 16, 29, 26, tzinfo=datetime.timezone.utc), 'time_taken': 2924879.0, 'time_delta': '33 days, 20:27:59', 'additions': 1, 'deletions': 0, 'state': 'closed'}, {'id': 1847391353, 'number': 32250, 'closed': datetime.datetime(2024, 5, 30, 9, 16, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 4, 30, 8, 49, 6, tzinfo=datetime.timezone.utc), 'time_taken': 2593639.0, 'time_delta': '30 days, 0:27:19', 'additions': 1786, 'deletions': 82, 'state': 'closed'}, {'id': 1834576824, 'number': 32124, 'closed': datetime.datetime(2024, 4, 29, 16, 44, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 4, 22, 13, 12, 9, tzinfo=datetime.timezone.utc), 'time_taken': 617560.0, 'time_delta': '7 days, 3:32:40', 'additions': 538, 'deletions': 106, 'state': 'closed'}, {'id': 1831540718, 'number': 32090, 'closed': datetime.datetime(2024, 4, 19, 16, 43, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 4, 19, 12, 51, 2, tzinfo=datetime.timezone.utc), 'time_taken': 13960.0, 'time_delta': '3:52:40', 'additions': 7, 'deletions': 1, 'state': 'closed'}, {'id': 1825756197, 'number': 32007, 'closed': datetime.datetime(2024, 4, 18, 18, 32, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 4, 16, 16, 4, 38, tzinfo=datetime.timezone.utc), 'time_taken': 181666.0, 'time_delta': '2 days, 2:27:46', 'additions': 7, 'deletions': 4, 'state': 'closed'}, {'id': 1757191565, 'number': 31166, 'closed': datetime.datetime(2024, 4, 20, 1, 44, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 3, 5, 15, 54, 34, tzinfo=datetime.timezone.utc), 'time_taken': 3923409.0, 'time_delta': '45 days, 9:50:09', 'additions': 13, 'deletions': 12, 'state': 'closed'}, {'id': 1689891874, 'number': 30352, 'closed': datetime.datetime(2024, 4, 7, 1, 46, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 1, 22, 13, 59, 49, tzinfo=datetime.timezone.utc), 'time_taken': 6522380.0, 'time_delta': '75 days, 11:46:20', 'additions': 9, 'deletions': 4, 'state': 'closed'}, {'id': 1683190005, 'number': 30299, 'closed': datetime.datetime(2024, 1, 24, 8, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 1, 17, 15, 28, 27, tzinfo=datetime.timezone.utc), 'time_taken': 581133.0, 'time_delta': '6 days, 17:25:33', 'additions': 8, 'deletions': 4, 'state': 'closed'}, {'id': 1680611140, 'number': 30270, 'closed': datetime.datetime(2024, 1, 23, 10, 18, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 1, 16, 10, 23, 20, tzinfo=datetime.timezone.utc), 'time_taken': 604515.0, 'time_delta': '6 days, 23:55:15', 'additions': 5, 'deletions': 1, 'state': 'closed'}, {'id': 1679186721, 'number': 30249, 'closed': datetime.datetime(2024, 1, 16, 17, 11, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 1, 15, 12, 38, 50, tzinfo=datetime.timezone.utc), 'time_taken': 102775.0, 'time_delta': '1 day, 4:32:55', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 1676516635, 'number': 30231, 'closed': datetime.datetime(2024, 1, 17, 16, 7, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 1, 12, 13, 57, 42, tzinfo=datetime.timezone.utc), 'time_taken': 439760.0, 'time_delta': '5 days, 2:09:20', 'additions': 2763, 'deletions': 18, 'state': 'closed'}, {'id': 1676437186, 'number': 30229, 'closed': datetime.datetime(2024, 1, 17, 16, 6, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 1, 12, 13, 5, 53, tzinfo=datetime.timezone.utc), 'time_taken': 442862.0, 'time_delta': '5 days, 3:01:02', 'additions': 37, 'deletions': 18, 'state': 'closed'}, {'id': 1676028391, 'number': 30224, 'closed': datetime.datetime(2024, 1, 15, 15, 4, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 1, 12, 8, 50, 29, tzinfo=datetime.timezone.utc), 'time_taken': 281647.0, 'time_delta': '3 days, 6:14:07', 'additions': 36, 'deletions': 12, 'state': 'closed'}, {'id': 1671331334, 'number': 30163, 'closed': datetime.datetime(2024, 1, 10, 15, 37, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 1, 9, 20, 39, 33, tzinfo=datetime.timezone.utc), 'time_taken': 68260.0, 'time_delta': '18:57:40', 'additions': 36, 'deletions': 12, 'state': 'closed'}, {'id': 1664704701, 'number': 30103, 'closed': datetime.datetime(2024, 5, 2, 10, 21, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 1, 4, 13, 29, 35, tzinfo=datetime.timezone.utc), 'time_taken': 10270295.0, 'time_delta': '118 days, 20:51:35', 'additions': 975, 'deletions': 216, 'state': 'closed'}, {'id': 1641004204, 'number': 29825, 'closed': datetime.datetime(2023, 12, 18, 18, 54, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 12, 12, 16, 8, 17, tzinfo=datetime.timezone.utc), 'time_taken': 528376.0, 'time_delta': '6 days, 2:46:16', 'additions': 24, 'deletions': 24, 'state': 'closed'}, {'id': 1628641384, 'number': 29612, 'closed': datetime.datetime(2023, 12, 5, 19, 59, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 12, 4, 16, 18, 42, tzinfo=datetime.timezone.utc), 'time_taken': 99673.0, 'time_delta': '1 day, 3:41:13', 'additions': 0, 'deletions': 30, 'state': 'closed'}, {'id': 1617914966, 'number': 29401, 'closed': datetime.datetime(2023, 11, 29, 13, 29, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 11, 27, 12, 54, 8, tzinfo=datetime.timezone.utc), 'time_taken': 174928.0, 'time_delta': '2 days, 0:35:28', 'additions': 4, 'deletions': 8, 'state': 'closed'}, {'id': 1532575397, 'number': 28308, 'closed': datetime.datetime(2023, 11, 10, 13, 15, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 9, 27, 14, 32, 45, tzinfo=datetime.timezone.utc), 'time_taken': 3796957.0, 'time_delta': '43 days, 22:42:37', 'additions': 539, 'deletions': 149, 'state': 'closed'}, {'id': 1468353954, 'number': 27376, 'closed': datetime.datetime(2023, 10, 12, 12, 2, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 9, 10, 32, 42, tzinfo=datetime.timezone.utc), 'time_taken': 5534995.0, 'time_delta': '64 days, 1:29:55', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 1450059272, 'number': 27082, 'closed': datetime.datetime(2023, 8, 11, 14, 31, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 26, 11, 17, 30, tzinfo=datetime.timezone.utc), 'time_taken': 1394021.0, 'time_delta': '16 days, 3:13:41', 'additions': 781, 'deletions': 236, 'state': 'closed'}, {'id': 1434893145, 'number': 26841, 'closed': datetime.datetime(2023, 8, 10, 9, 12, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 14, 14, 39, 49, tzinfo=datetime.timezone.utc), 'time_taken': 2313132.0, 'time_delta': '26 days, 18:32:12', 'additions': 243, 'deletions': 75, 'state': 'closed'}, {'id': 1411984761, 'number': 26539, 'closed': datetime.datetime(2023, 7, 12, 11, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 28, 16, 34, 32, tzinfo=datetime.timezone.utc), 'time_taken': 1192408.0, 'time_delta': '13 days, 19:13:28', 'additions': 247, 'deletions': 71, 'state': 'closed'}, {'id': 1370723626, 'number': 25771, 'closed': datetime.datetime(2023, 6, 13, 7, 41, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 30, 16, 0, 13, tzinfo=datetime.timezone.utc), 'time_taken': 1179701.0, 'time_delta': '13 days, 15:41:41', 'additions': 171, 'deletions': 88, 'state': 'closed'}, {'id': 1361760656, 'number': 25627, 'closed': datetime.datetime(2023, 5, 29, 11, 58, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 23, 16, 57, 39, tzinfo=datetime.timezone.utc), 'time_taken': 500467.0, 'time_delta': '5 days, 19:01:07', 'additions': 27, 'deletions': 148, 'state': 'closed'}, {'id': 1346856160, 'number': 25380, 'closed': datetime.datetime(2023, 5, 26, 8, 0, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 11, 10, 44, 2, tzinfo=datetime.timezone.utc), 'time_taken': 1286160.0, 'time_delta': '14 days, 21:16:00', 'additions': 88, 'deletions': 99, 'state': 'closed'}, {'id': 1328545438, 'number': 25136, 'closed': datetime.datetime(2023, 5, 10, 11, 48, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 26, 10, 48, 40, tzinfo=datetime.timezone.utc), 'time_taken': 1213202.0, 'time_delta': '14 days, 1:00:02', 'additions': 12, 'deletions': 1, 'state': 'closed'}, {'id': 1328494556, 'number': 25134, 'closed': datetime.datetime(2023, 5, 17, 9, 57, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 26, 10, 9, 42, tzinfo=datetime.timezone.utc), 'time_taken': 1813643.0, 'time_delta': '20 days, 23:47:23', 'additions': 163, 'deletions': 17, 'state': 'closed'}, {'id': 1312791576, 'number': 24876, 'closed': datetime.datetime(2023, 4, 19, 6, 46, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 13, 16, 22, 24, tzinfo=datetime.timezone.utc), 'time_taken': 483842.0, 'time_delta': '5 days, 14:24:02', 'additions': 120, 'deletions': 89, 'state': 'closed'}, {'id': 1233510928, 'number': 23634, 'closed': datetime.datetime(2023, 3, 3, 13, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 2, 8, 12, 58, 39, tzinfo=datetime.timezone.utc), 'time_taken': 1988601.0, 'time_delta': '23 days, 0:23:21', 'additions': 43, 'deletions': 212, 'state': 'closed'}, {'id': 1227986230, 'number': 23557, 'closed': datetime.datetime(2023, 4, 4, 7, 19, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 2, 3, 11, 9, 51, tzinfo=datetime.timezone.utc), 'time_taken': 5170173.0, 'time_delta': '59 days, 20:09:33', 'additions': 3649, 'deletions': 253, 'state': 'closed'}, {'id': 1067576680, 'number': 21451, 'closed': datetime.datetime(2022, 11, 3, 8, 3, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 26, 19, 3, 57, tzinfo=datetime.timezone.utc), 'time_taken': 3243601.0, 'time_delta': '37 days, 13:00:01', 'additions': 294, 'deletions': 229, 'state': 'closed'}, {'id': 1050731730, 'number': 21250, 'closed': datetime.datetime(2022, 12, 27, 1, 56, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 8, 19, 8, 5, tzinfo=datetime.timezone.utc), 'time_taken': 9442125.0, 'time_delta': '109 days, 6:48:45', 'additions': 55, 'deletions': 11, 'state': 'closed'}, {'id': 998759380, 'number': 20556, 'closed': datetime.datetime(2022, 9, 1, 13, 19, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 18, 0, 2, 51, tzinfo=datetime.timezone.utc), 'time_taken': 3935809.0, 'time_delta': '45 days, 13:16:49', 'additions': 823, 'deletions': 229, 'state': 'closed'}, {'id': 600232237, 'number': 15460, 'closed': datetime.datetime(2021, 3, 29, 18, 36, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 24, 23, 40, 30, tzinfo=datetime.timezone.utc), 'time_taken': 413740.0, 'time_delta': '4 days, 18:55:40', 'additions': 60, 'deletions': 23, 'state': 'closed'}]"
206649463,ebpf,cilium/ebpf,Go,671,6093,103,138,1789,42,5,11,"[{'id': 2008272953, 'number': 1541, 'closed': datetime.datetime(2024, 8, 14, 12, 4, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 8, 7, 11, 50, 56, tzinfo=datetime.timezone.utc), 'time_taken': 605591.0, 'time_delta': '7 days, 0:13:11', 'additions': 16, 'deletions': 5, 'state': 'closed'}, {'id': 1824079537, 'number': 1435, 'closed': datetime.datetime(2024, 5, 24, 8, 14, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 4, 15, 20, 26, 42, tzinfo=datetime.timezone.utc), 'time_taken': 3325644.0, 'time_delta': '38 days, 11:47:24', 'additions': 193, 'deletions': 108, 'state': 'closed'}, {'id': 1741052735, 'number': 1359, 'closed': datetime.datetime(2024, 3, 22, 9, 56, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 2, 23, 16, 44, 10, tzinfo=datetime.timezone.utc), 'time_taken': 2394762.0, 'time_delta': '27 days, 17:12:42', 'additions': 242, 'deletions': 72, 'state': 'closed'}, {'id': 1673049464, 'number': 1303, 'closed': datetime.datetime(2024, 1, 11, 12, 7, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 1, 10, 19, 37, 49, tzinfo=datetime.timezone.utc), 'time_taken': 59361.0, 'time_delta': '16:29:21', 'additions': 18, 'deletions': 4, 'state': 'closed'}, {'id': 1665925178, 'number': 1294, 'closed': datetime.datetime(2024, 1, 5, 19, 2, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 1, 5, 10, 0, 25, tzinfo=datetime.timezone.utc), 'time_taken': 32543.0, 'time_delta': '9:02:23', 'additions': 28, 'deletions': 0, 'state': 'closed'}, {'id': 1642743812, 'number': 1272, 'closed': datetime.datetime(2023, 12, 13, 16, 26, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 12, 13, 16, 15, 53, tzinfo=datetime.timezone.utc), 'time_taken': 612.0, 'time_delta': '0:10:12', 'additions': 2, 'deletions': 3, 'state': 'closed'}, {'id': 1550023701, 'number': 1164, 'closed': datetime.datetime(2023, 10, 30, 13, 38, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 10, 10, 13, 58, 30, tzinfo=datetime.timezone.utc), 'time_taken': 1726828.0, 'time_delta': '19 days, 23:40:28', 'additions': 86, 'deletions': 5, 'state': 'closed'}, {'id': 1419875201, 'number': 1089, 'closed': datetime.datetime(2023, 7, 6, 12, 8, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 4, 15, 57, 33, tzinfo=datetime.timezone.utc), 'time_taken': 159079.0, 'time_delta': '1 day, 20:11:19', 'additions': 46, 'deletions': 24, 'state': 'closed'}, {'id': 1267550851, 'number': 966, 'closed': datetime.datetime(2023, 3, 29, 9, 19, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 8, 9, 6, 21, tzinfo=datetime.timezone.utc), 'time_taken': 1815166.0, 'time_delta': '21 days, 0:12:46', 'additions': 254, 'deletions': 30, 'state': 'closed'}, {'id': 1167075009, 'number': 890, 'closed': datetime.datetime(2022, 12, 23, 11, 13, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 12, 15, 16, 38, 1, tzinfo=datetime.timezone.utc), 'time_taken': 671707.0, 'time_delta': '7 days, 18:35:07', 'additions': 60, 'deletions': 5, 'state': 'closed'}, {'id': 1164029656, 'number': 889, 'closed': datetime.datetime(2022, 12, 14, 15, 11, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 12, 14, 0, 40, 43, tzinfo=datetime.timezone.utc), 'time_taken': 52250.0, 'time_delta': '14:30:50', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 1135792669, 'number': 867, 'closed': datetime.datetime(2022, 12, 15, 13, 13, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 11, 25, 10, 36, 59, tzinfo=datetime.timezone.utc), 'time_taken': 1737403.0, 'time_delta': '20 days, 2:36:43', 'additions': 186, 'deletions': 0, 'state': 'closed'}, {'id': 991894287, 'number': 734, 'closed': datetime.datetime(2022, 7, 12, 8, 44, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 8, 17, 26, 16, tzinfo=datetime.timezone.utc), 'time_taken': 314274.0, 'time_delta': '3 days, 15:17:54', 'additions': 59, 'deletions': 2, 'state': 'closed'}, {'id': 769558915, 'number': 471, 'closed': datetime.datetime(2021, 11, 1, 16, 31, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 29, 21, 26, 55, tzinfo=datetime.timezone.utc), 'time_taken': 241462.0, 'time_delta': '2 days, 19:04:22', 'additions': 4, 'deletions': 4, 'state': 'closed'}, {'id': 712204063, 'number': 375, 'closed': datetime.datetime(2022, 5, 23, 13, 12, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 13, 9, 21, 13, tzinfo=datetime.timezone.utc), 'time_taken': 24465096.0, 'time_delta': '283 days, 3:51:36', 'additions': 217, 'deletions': 22, 'state': 'closed'}, {'id': 696520378, 'number': 355, 'closed': datetime.datetime(2021, 8, 11, 9, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 25, 15, 29, 57, tzinfo=datetime.timezone.utc), 'time_taken': 1448943.0, 'time_delta': '16 days, 18:29:03', 'additions': 323, 'deletions': 68, 'state': 'closed'}, {'id': 670297103, 'number': 325, 'closed': datetime.datetime(2021, 6, 15, 13, 26, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 15, 10, 56, 52, tzinfo=datetime.timezone.utc), 'time_taken': 8984.0, 'time_delta': '2:29:44', 'additions': 108, 'deletions': 102, 'state': 'closed'}, {'id': 665791564, 'number': 321, 'closed': datetime.datetime(2021, 7, 19, 9, 34, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 9, 10, 51, 16, tzinfo=datetime.timezone.utc), 'time_taken': 3451390.0, 'time_delta': '39 days, 22:43:10', 'additions': 290, 'deletions': 1, 'state': 'closed'}, {'id': 659187174, 'number': 317, 'closed': datetime.datetime(2021, 6, 7, 9, 44, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 1, 16, 57, 32, tzinfo=datetime.timezone.utc), 'time_taken': 492433.0, 'time_delta': '5 days, 16:47:13', 'additions': 19, 'deletions': 2, 'state': 'closed'}]"
