pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
959301050,"create new table, modify UI and endpoint for timezone","<!--
    Hello! Thanks for submitting a pull request to ListenBrainz. We appreciate
    your time and interest in helping our project!

    Use this template to help us review your change. Not everything is required,
    depending on your change. Keep or delete what is relevant for your change.
    Remember that it helps us review if you give more helpful info for us to
    understand your change.

    Ensure that you've read through and followed the Contributing Guidelines, in
    ./github/CONTRIBUTING.md.
-->

# Problem
Listens on ListenBrainz are collected in the UTC instead of their local timestamp currently, without taking DST in to consideration. Adding timezone preference for users will contribute to the analysis and thus provide better user experience.
<!--
    What problem are you trying to fix? What does this change address? Please try to
    think of people who do not have the context you have on the problem.

    Mention and link a JIRA ticket if there is one that's relevant.
-->



# Solution
## database: 
1. Create a new table `user_setting`. The user_timezone information and other user preferences can be stored here.
2. Create a function to get all timezone recognized by PostgreSQL.
3. Create functions to create, get, and modify user settings.
4. Create a function to convert timezones retrieved by PostgreSQL to standardized format for display.
## UI: 
1. Add a `Reset timezone`  UI module in the general setting page.
2. Create a new webpage for user to select timezone.
## endpoint
Create an endpoint for getting and resetting user timezone preference by creating a `TimezoneForm` extended from `FlaskForm`.

<!--
    The details of your change. Talk about technical details, considerations, or
    other interesting points. If you have a lot to say, be more detailed in this
    section.
-->





",True,2035,https://api.github.com/repos/metabrainz/listenbrainz-server/pulls/2035,https://github.com/metabrainz/listenbrainz-server/pull/2035,closed,286,1,13,13,5,23,0,0,[],2022-06-06 16:20:42+00:00,2022-07-04 12:48:51+00:00,2406489.0,"27 days, 20:28:09","[{'comment_id': 895690320, 'comment_body': '"", or create if there\'s setting history.""\r\n\r\nNot sure this still applies since this function doesn\'t create anything. Maybe just remove?', 'comment_created': datetime.datetime(2022, 6, 13, 13, 1, 59, tzinfo=datetime.timezone.utc), 'commenter': 'mayhem', 'type': 'User'}, {'comment_id': 895692509, 'comment_body': 'This function is called get, but it acts more like get_timezone. I wonder if we should keep the word get, but return a dict with all of the settings that this function fetches. For starters that would only be: { ""timezone"": ""utc"" }, but this allows us to add future user settings to this dict as needed.', 'comment_created': datetime.datetime(2022, 6, 13, 13, 4, 21, tzinfo=datetime.timezone.utc), 'commenter': 'mayhem', 'type': 'User'}, {'comment_id': 895693318, 'comment_body': 'Remove?', 'comment_created': datetime.datetime(2022, 6, 13, 13, 5, 13, tzinfo=datetime.timezone.utc), 'commenter': 'mayhem', 'type': 'User'}, {'comment_id': 895694328, 'comment_body': 'This does not reflect what the code does -- if there is no user setting right now it will return None. I think we ought to define a constant in this module called \'DEFAULT_TIMEZONE ""UTC""\' and then return that constant when no row exists.', 'comment_created': datetime.datetime(2022, 6, 13, 13, 6, 20, tzinfo=datetime.timezone.utc), 'commenter': 'mayhem', 'type': 'User'}, {'comment_id': 895694646, 'comment_body': 'Also remove?', 'comment_created': datetime.datetime(2022, 6, 13, 13, 6, 39, tzinfo=datetime.timezone.utc), 'commenter': 'mayhem', 'type': 'User'}, {'comment_id': 895694984, 'comment_body': 'nitpick: missing ""', 'comment_created': datetime.datetime(2022, 6, 13, 13, 6, 59, tzinfo=datetime.timezone.utc), 'commenter': 'mayhem', 'type': 'User'}, {'comment_id': 895695647, 'comment_body': 'I think it makes sense to have a default for the get() function, but for create we should not have a default. If no timezone is provided, throw an error.', 'comment_created': datetime.datetime(2022, 6, 13, 13, 7, 42, tzinfo=datetime.timezone.utc), 'commenter': 'mayhem', 'type': 'User'}, {'comment_id': 895697420, 'comment_body': 'I feel that this function is not needed. If we go with the default return value from get being a dict with a default timezone of UTC, then the user will always get this until they actually set a different timezone.', 'comment_created': datetime.datetime(2022, 6, 13, 13, 9, 36, tzinfo=datetime.timezone.utc), 'commenter': 'mayhem', 'type': 'User'}, {'comment_id': 895700349, 'comment_body': ""And if we change this function to set_timezone() and change the SQL query to use an upsert type query, we can make all these functions flow a little smoother. Change the query to use an INSERT ... ON CONFLICT DO UPDATE ... construct and it will either insert the row if it doesn't exist, or update the value if it does exist.\r\n\r\nSee https://www.postgresqltutorial.com/postgresql-tutorial/postgresql-upsert/"", 'comment_created': datetime.datetime(2022, 6, 13, 13, 12, 29, tzinfo=datetime.timezone.utc), 'commenter': 'mayhem', 'type': 'User'}, {'comment_id': 895701191, 'comment_body': ""I'm not sure what this function really is supposed to do. Can you please improve the docstring?"", 'comment_created': datetime.datetime(2022, 6, 13, 13, 13, 18, tzinfo=datetime.timezone.utc), 'commenter': 'mayhem', 'type': 'User'}, {'comment_id': 907323916, 'comment_body': 'This should say: ""Your timezone has been saved.""', 'comment_created': datetime.datetime(2022, 6, 27, 12, 21, 52, tzinfo=datetime.timezone.utc), 'commenter': 'mayhem', 'type': 'User'}, {'comment_id': 907421255, 'comment_body': 'For this error, lets give fewer details, since that might mean someone is trying to hack us. If that is the case, lets not give then any help. Lets have this say: ""Unable to update timezone.""', 'comment_created': datetime.datetime(2022, 6, 27, 13, 56, 53, tzinfo=datetime.timezone.utc), 'commenter': 'mayhem', 'type': 'User'}, {'comment_id': 907673897, 'comment_body': 'Can use `CREATE UNIQUE INDEX` instead of declaring attribute as UNIQUE in create_tables.sql. This also matches how we do it elsewhere.', 'comment_created': datetime.datetime(2022, 6, 27, 18, 22, 18, tzinfo=datetime.timezone.utc), 'commenter': 'amCap1712', 'type': 'User'}, {'comment_id': 907674663, 'comment_body': 'Do not create loggers here. Instead use current_app.logger everywhere. You can look into other db files for reference.', 'comment_created': datetime.datetime(2022, 6, 27, 18, 23, 11, tzinfo=datetime.timezone.utc), 'commenter': 'amCap1712', 'type': 'User'}, {'comment_id': 907705650, 'comment_body': ""This should probably be NULLABLE because in future we may add new columns for more settings and it is not necessary for users to have all settings.\r\n\r\nIf this is changed, the check may also need changing. Try inserting a NULL value in the column and if it doesn't work the check needs to be changed. Probably something like `timezone_name IS NULL OR now() AT TIME ZONE timezone_name IS NOT NULL`."", 'comment_created': datetime.datetime(2022, 6, 27, 19, 0, 26, tzinfo=datetime.timezone.utc), 'commenter': 'amCap1712', 'type': 'User'}, {'comment_id': 907707314, 'comment_body': 'No need to log here, raising exception is enough.', 'comment_created': datetime.datetime(2022, 6, 27, 19, 2, 25, tzinfo=datetime.timezone.utc), 'commenter': 'amCap1712', 'type': 'User'}, {'comment_id': 907707890, 'comment_body': 'Same here. No log needed here.', 'comment_created': datetime.datetime(2022, 6, 27, 19, 3, 9, tzinfo=datetime.timezone.utc), 'commenter': 'amCap1712', 'type': 'User'}, {'comment_id': 907711737, 'comment_body': 'Should likely be form.errors instead.', 'comment_created': datetime.datetime(2022, 6, 27, 19, 8, 30, tzinfo=datetime.timezone.utc), 'commenter': 'amCap1712', 'type': 'User'}, {'comment_id': 907717718, 'comment_body': '\r\nThe postgres table for timezone has offset as well so no need for this function.\r\n\r\nSELECT * FROM pg_timezone_names; \r\n\r\n name                            | abbrev | utc_offset | is_dst \r\n----------------------------------------|--------|------------|--------\r\nCET                                    | CEST   | 02:00:00   | t\r\n', 'comment_created': datetime.datetime(2022, 6, 27, 19, 16, 24, tzinfo=datetime.timezone.utc), 'commenter': 'amCap1712', 'type': 'User'}, {'comment_id': 908707791, 'comment_body': 'Thanks for the suggestion. But the offset format is a little bit strange when I retrieve it. It has something like ""(-1day, 15:00:00)"". This function converts it to ""(-9:00:00 GMT)"".', 'comment_created': datetime.datetime(2022, 6, 28, 16, 39, 58, tzinfo=datetime.timezone.utc), 'commenter': 'YouzhiL', 'type': 'User'}, {'comment_id': 908878971, 'comment_body': ""I see, that's because psycopg2 adapts interval types to timedelta in python and the string representation for those is weird. There doesn't appear to be a built in method to nicely format timedeltas so indeed this function is fine.\r\n\r\n(An alternative is to format in sql itself but adding the + sign to positive intervals in PG will probably be some work anyway.)"", 'comment_created': datetime.datetime(2022, 6, 28, 19, 45, 24, tzinfo=datetime.timezone.utc), 'commenter': 'amCap1712', 'type': 'User'}, {'comment_id': 909958731, 'comment_body': ""You're missing the CREATE UNIQUE INDEX call here."", 'comment_created': datetime.datetime(2022, 6, 29, 14, 55, 48, tzinfo=datetime.timezone.utc), 'commenter': 'mayhem', 'type': 'User'}, {'comment_id': 910321203, 'comment_body': 'Thanks! I just added the CREATE UNIQUE INDEX call.', 'comment_created': datetime.datetime(2022, 6, 29, 19, 22, 38, tzinfo=datetime.timezone.utc), 'commenter': 'YouzhiL', 'type': 'User'}]","[{'commit_sha': '9e1a5f5d69a73774af8add8f8dfb9f8a0d387aed', 'committer_username': 'YouzhiL', 'committer_name': 'Youzhi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 14, 1, 29, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '038ce3439996030d8573095ea345a78f57645f02', 'committer_username': 'YouzhiL', 'committer_name': 'Youzhi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 14, 1, 29, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '110a0b13af231d12206afd1311f4339b567cb5b5', 'committer_username': 'YouzhiL', 'committer_name': 'Youzhi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 14, 1, 29, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b4bbb064ef4bc2a23186d9243c5d521ff9983ced', 'committer_username': 'YouzhiL', 'committer_name': 'Youzhi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 14, 1, 29, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a66b3ff7d83ec7e6015acd8235783cc6e97011a', 'committer_username': 'YouzhiL', 'committer_name': 'Youzhi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 14, 1, 29, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '329c9f6885e31e920c01d14db75acd0113e2f2dd', 'committer_username': 'YouzhiL', 'committer_name': 'Youzhi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 14, 1, 29, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c7e20352f9d267a9697972cd858ddbffa360b2d3', 'committer_username': 'YouzhiL', 'committer_name': 'Youzhi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 14, 1, 29, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '30b778a314e8c8ca540027fd4065e68a9ed06cbc', 'committer_username': 'YouzhiL', 'committer_name': 'Youzhi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 14, 1, 29, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa4bd8e0023d2c352bb5dd8af9e43d212ce6a1c4', 'committer_username': 'YouzhiL', 'committer_name': 'Youzhi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 14, 1, 29, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '65e413ed38e68d32576dec40df54c15740c1d6c1', 'committer_username': 'YouzhiL', 'committer_name': 'Youzhi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 14, 1, 29, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4db0c66ff68cbfc3ca95805b5c2eb4261283c546', 'committer_username': 'YouzhiL', 'committer_name': 'Youzhi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 14, 1, 29, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '879c1a69f8f657f365f073fed2814b0dc7ed6f56', 'committer_username': 'YouzhiL', 'committer_name': 'Youzhi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 14, 1, 29, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd2aa734072b974ec7426dcb829c8005534e19671', 'committer_username': 'YouzhiL', 'committer_name': 'Youzhi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 14, 1, 29, 26, tzinfo=datetime.timezone.utc)}]",Youzhi,97713325,,User,,19,,2,3
997330078,Timezone support in react,"<!--
    Hello! Thanks for submitting a pull request to ListenBrainz. We appreciate
    your time and interest in helping our project!

    Use this template to help us review your change. Not everything is required,
    depending on your change. Keep or delete what is relevant for your change.
    Remember that it helps us review if you give more helpful info for us to
    understand your change.

    Ensure that you've read through and followed the Contributing Guidelines, in
    ./github/CONTRIBUTING.md.
-->

# Problem

The current version of timezone-support function is implemented in Flask/html. 



# Solution

This pull request re-implement  timezone-support function in React/js.


# Action
1.  Modify the view function `select_timezone` to support react based UI. No more flask forms needed.
2. Create `user-setting` folder in static/js/src.
3. Implement a drop-down for user to select the local timezones.
4. Add APIService function `resetUserTimezone` to fetch response from backend API.
5. Add backend API `reset_timezone` to reset timezone.
",True,2070,https://api.github.com/repos/metabrainz/listenbrainz-server/pulls/2070,https://github.com/metabrainz/listenbrainz-server/pull/2070,closed,469,83,13,16,3,6,0,0,[],2022-07-15 04:08:45+00:00,2022-08-25 16:04:27+00:00,3585342.0,"41 days, 11:55:42","[{'comment_id': 921840575, 'comment_body': 'No need for the profile_content block because base-react defines one already. This one is only needed in user/* template files because template structure is different there.', 'comment_created': datetime.datetime(2022, 7, 15, 6, 3, 45, tzinfo=datetime.timezone.utc), 'commenter': 'amCap1712', 'type': 'User'}, {'comment_id': 929700548, 'comment_body': 'For normal views, `@login_required` performs the authentication but for API it has to be done manually by reading the Authorization header of the request. We have a helper method for this:\r\n\r\nhttps://github.com/metabrainz/listenbrainz-server/blob/f20cedc430b29600674ce2d83badb42dc3db9f53/listenbrainz/webserver/views/api_tools.py#L459\r\n\r\nExample usage is simple, just call it:\r\nhttps://github.com/metabrainz/listenbrainz-server/blob/f20cedc430b29600674ce2d83badb42dc3db9f53/listenbrainz/webserver/views/pinned_recording_api.py#L48\r\n\r\nThe helper will also return the user who possesses the token in Authorization header.\r\n\r\nBut now if you have username in the url, then you have to verify that the token matches that user as well. So, I would suggest to get rid of the username from the url. `/1/user-setting/timezone` is probably enough.', 'comment_created': datetime.datetime(2022, 7, 26, 8, 52, 31, tzinfo=datetime.timezone.utc), 'commenter': 'amCap1712', 'type': 'User'}, {'comment_id': 931546151, 'comment_body': ""Thanks, Lucifer! I made the change in my new commit. Also, the user's timezone will be saved and updated on the page after clicking the `save timezone` button. Please take a look at it."", 'comment_created': datetime.datetime(2022, 7, 27, 20, 19, 30, tzinfo=datetime.timezone.utc), 'commenter': 'YouzhiL', 'type': 'User'}, {'comment_id': 934704423, 'comment_body': 'Let\'s update this to say ""JSON document must contain timezone name.""', 'comment_created': datetime.datetime(2022, 8, 1, 16, 19, 11, tzinfo=datetime.timezone.utc), 'commenter': 'mayhem', 'type': 'User'}, {'comment_id': 935891280, 'comment_body': 'Thanks', 'comment_created': datetime.datetime(2022, 8, 2, 18, 16, 41, tzinfo=datetime.timezone.utc), 'commenter': 'amCap1712', 'type': 'User'}, {'comment_id': 952643394, 'comment_body': ""The description mentions it but this test doesn't have a assert for alert creation. You can add it like this:\r\n\r\nhttps://github.com/metabrainz/listenbrainz-server/blob/f2096ec1b80302a02fae65b551934c0e69cabf0a/listenbrainz/webserver/static/js/tests/pins/PinnedRecordingCard.test.tsx#L85-L99"", 'comment_created': datetime.datetime(2022, 8, 23, 13, 40, 28, tzinfo=datetime.timezone.utc), 'commenter': 'amCap1712', 'type': 'User'}]","[{'commit_sha': '6224a2adb0388ce0df1cf0a147ecf1231e661c3a', 'committer_username': 'YouzhiL', 'committer_name': 'Youzhi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 14, 1, 29, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e34969bc663dac96ceae853641479debca00a9c', 'committer_username': 'YouzhiL', 'committer_name': 'Youzhi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 14, 1, 29, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '80f6bc202fa0d69f35cb262b10ee9c284c677c7f', 'committer_username': 'YouzhiL', 'committer_name': 'Youzhi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 14, 1, 29, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03d1768cfe34da3e25728bb22c843ec4f6f4fe83', 'committer_username': 'YouzhiL', 'committer_name': 'Youzhi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 14, 1, 29, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3841a030e8a9436c7aa0b80fe18041700d612e08', 'committer_username': 'YouzhiL', 'committer_name': 'Youzhi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 14, 1, 29, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '433297766450083a4bc2fa9a54e7f59ab7251887', 'committer_username': 'YouzhiL', 'committer_name': 'Youzhi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 14, 1, 29, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aaa87463a0a69c192c9e6be68fb38e05424cc235', 'committer_username': 'YouzhiL', 'committer_name': 'Youzhi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 14, 1, 29, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b4fb09eb9f81ea0e0d2185a8577914e1d806fd24', 'committer_username': 'YouzhiL', 'committer_name': 'Youzhi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 14, 1, 29, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2778868b59d4434d0e91e84cf3cca917e47e48bd', 'committer_username': 'YouzhiL', 'committer_name': 'Youzhi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 14, 1, 29, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ca293fd2200bc61c5850aea81d3f6fa7047b523', 'committer_username': 'amCap1712', 'committer_name': 'Kartik Ohri', 'committer_email': 'kartikohri13@gmail.com', 'commit_date': datetime.datetime(2017, 4, 19, 2, 7, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2acbaf0dbd2ac7febcd791fc444afb500e85ce73', 'committer_username': 'YouzhiL', 'committer_name': 'Youzhi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 14, 1, 29, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5bfa683b54617212cdbbdbb101c287e28d6e91cf', 'committer_username': 'YouzhiL', 'committer_name': 'Youzhi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 14, 1, 29, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '836b9a1788be75a1e33b0d812b833fa27adad6ab', 'committer_username': 'YouzhiL', 'committer_name': 'Youzhi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 14, 1, 29, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fcc0e385b0ae2ead0865c50a12fb0b30c3cd7d81', 'committer_username': 'YouzhiL', 'committer_name': 'Youzhi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 14, 1, 29, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dee155d22ff72a6f922387fd899203ffed5e93e8', 'committer_username': 'YouzhiL', 'committer_name': 'Youzhi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 14, 1, 29, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be292fdc73cf3df7f3570102aaba84a699530f46', 'committer_username': 'YouzhiL', 'committer_name': 'Youzhi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 14, 1, 29, 26, tzinfo=datetime.timezone.utc)}]",Youzhi,97713325,,User,,19,,2,3
1045821165,add timezone field in listens,"
# Problem

Submitted listens are not converted into the correct timezone when displayed to the user if someone is traveling.



# Solution

Allow clients to submit the local timestamp in ISO8601 format with a local timezone specified.


# Action

1. Add new attribute `listened_at_local` in `additional_info`.
2. validate `listened_at_local` format.


",False,2136,https://api.github.com/repos/metabrainz/listenbrainz-server/pulls/2136,https://github.com/metabrainz/listenbrainz-server/pull/2136,closed,12,0,2,1,1,1,0,0,[],2022-09-05 00:40:19+00:00,2023-03-12 14:11:44+00:00,16291885.0,"188 days, 13:31:25","[{'comment_id': 966151729, 'comment_body': 'We should be as specific as possible when catching exceptions:\r\n\r\n```suggestion\r\n            except ValueError:\r\n```', 'comment_created': datetime.datetime(2022, 9, 8, 16, 4, 15, tzinfo=datetime.timezone.utc), 'commenter': 'alastair', 'type': 'User'}]","[{'commit_sha': '453d3840453628373ed56e563aed29baa483f5ff', 'committer_username': 'YouzhiL', 'committer_name': 'Youzhi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 14, 1, 29, 26, tzinfo=datetime.timezone.utc)}]",Youzhi,97713325,,User,,19,,2,3

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
41960013,listenbrainz-server,metabrainz/listenbrainz-server,Python,210,670,33,120,11879,14,82,14,"[{'id': 1045821165, 'number': 2136, 'closed': datetime.datetime(2023, 3, 12, 14, 11, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 5, 0, 40, 19, tzinfo=datetime.timezone.utc), 'time_taken': 16291885.0, 'time_delta': '188 days, 13:31:25', 'additions': 12, 'deletions': 0, 'state': 'closed'}, {'id': 997330078, 'number': 2070, 'closed': datetime.datetime(2022, 8, 25, 16, 4, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 15, 4, 8, 45, tzinfo=datetime.timezone.utc), 'time_taken': 3585342.0, 'time_delta': '41 days, 11:55:42', 'additions': 469, 'deletions': 83, 'state': 'closed'}, {'id': 959301050, 'number': 2035, 'closed': datetime.datetime(2022, 7, 4, 12, 48, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 6, 16, 20, 42, tzinfo=datetime.timezone.utc), 'time_taken': 2406489.0, 'time_delta': '27 days, 20:28:09', 'additions': 286, 'deletions': 1, 'state': 'closed'}, {'id': 909128396, 'number': 1950, 'closed': datetime.datetime(2022, 5, 15, 5, 39, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 13, 16, 25, 43, tzinfo=datetime.timezone.utc), 'time_taken': 2726052.0, 'time_delta': '31 days, 13:14:12', 'additions': 106, 'deletions': 4, 'state': 'closed'}]"
