pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1067482593,Semantic Highlighting,"This is an implement for [Semantic Tokens in LSP Specification](https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#textDocument_semanticTokens).

This PR is also Work Product Submission for Google Summer of Code 2022.
The Project abstraction is [here](https://summerofcode.withgoogle.com/programs/2022/projects/MvsaCtiQ) .

#Remarks at the posting
- I don't do scalafmt. (In my environment, scalafmt changes newline characters.)
- Unit tests still outputs errors for some edge cases.
- Log processes are left for debugging .
",True,4444,https://api.github.com/repos/scalameta/metals/pulls/4444,https://github.com/scalameta/metals/pull/4444,closed,1662,23,62,71,57,121,1,0,[{'name': 'new-feature'}],2022-09-26 17:29:33+00:00,2023-01-05 17:44:00+00:00,8727267.0,"101 days, 0:14:27","[{'comment_id': 981409618, 'comment_body': '```suggestion\r\n  // initialize semantic tree\r\n  val unit = cp.addCompilationUnit(\r\n    params.text(),\r\n    params.uri().toString(),\r\n    None\r\n  )\r\n\r\n  cp.typeCheck(unit) // initializing unit\r\n\r\n  val (root, source) = (unit.lastBody, unit.source)\r\n```', 'comment_created': datetime.datetime(2022, 9, 27, 15, 39, 42, tzinfo=datetime.timezone.utc), 'commenter': 'kpodsiad', 'type': 'User'}, {'comment_id': 981418376, 'comment_body': ""Could you comment it temporary? It's causing problems with Scala 2.11.12 compilation\r\nWe can think of solution after making CI green."", 'comment_created': datetime.datetime(2022, 9, 27, 15, 47, 21, tzinfo=datetime.timezone.utc), 'commenter': 'kpodsiad', 'type': 'User'}, {'comment_id': 981426129, 'comment_body': 'if you replace all usages of `addAll` to `++=`, it will work on 2.11.12', 'comment_created': datetime.datetime(2022, 9, 27, 15, 54, 8, tzinfo=datetime.timezone.utc), 'commenter': 'kpodsiad', 'type': 'User'}, {'comment_id': 982551972, 'comment_body': 'I reflected.', 'comment_created': datetime.datetime(2022, 9, 28, 15, 25, 47, tzinfo=datetime.timezone.utc), 'commenter': 'ShintaroSasaki', 'type': 'User'}, {'comment_id': 982552375, 'comment_body': 'I reflected.', 'comment_created': datetime.datetime(2022, 9, 28, 15, 26, 7, tzinfo=datetime.timezone.utc), 'commenter': 'ShintaroSasaki', 'type': 'User'}, {'comment_id': 982563261, 'comment_body': 'I deleted the part and mad a note below.', 'comment_created': datetime.datetime(2022, 9, 28, 15, 35, 31, tzinfo=datetime.timezone.utc), 'commenter': 'ShintaroSasaki', 'type': 'User'}, {'comment_id': 983796944, 'comment_body': 'Remove before merge.', 'comment_created': datetime.datetime(2022, 9, 29, 16, 55, 5, tzinfo=datetime.timezone.utc), 'commenter': 'tgodzik', 'type': 'User'}, {'comment_id': 983797878, 'comment_body': 'Not needed, it should be ok. You can remove the comment.', 'comment_created': datetime.datetime(2022, 9, 29, 16, 55, 46, tzinfo=datetime.timezone.utc), 'commenter': 'tgodzik', 'type': 'User'}, {'comment_id': 983798544, 'comment_body': '```suggestion\r\n```\r\nBefore merge.', 'comment_created': datetime.datetime(2022, 9, 29, 16, 56, 15, tzinfo=datetime.timezone.utc), 'commenter': 'tgodzik', 'type': 'User'}, {'comment_id': 983802965, 'comment_body': '```suggestion\r\n```\r\nbefore merging', 'comment_created': datetime.datetime(2022, 9, 29, 16, 59, 28, tzinfo=datetime.timezone.utc), 'commenter': 'tgodzik', 'type': 'User'}, {'comment_id': 983804257, 'comment_body': 'I think both `TokenTypes` and `TokenModifiers` will be the same within the server lifetime, so we can remove them as parameters and just use them directly.', 'comment_created': datetime.datetime(2022, 9, 29, 17, 0, 25, tzinfo=datetime.timezone.utc), 'commenter': 'tgodzik', 'type': 'User'}, {'comment_id': 983805299, 'comment_body': '```suggestion\r\n    SemanticTokenTypes.Enum,\r\n    SemanticTokenTypes.Interface,\r\n    SemanticTokenTypes.Struct,\r\n    SemanticTokenTypes.TypeParameter,\r\n    SemanticTokenTypes.Parameter,\r\n    SemanticTokenTypes.Variable,\r\n    SemanticTokenTypes.Property,\r\n    SemanticTokenTypes.EnumMember,\r\n    SemanticTokenTypes.Event,\r\n    SemanticTokenTypes.Function,\r\n    SemanticTokenTypes.Method,\r\n    SemanticTokenTypes.Macro,\r\n    SemanticTokenTypes.Keyword,\r\n```', 'comment_created': datetime.datetime(2022, 9, 29, 17, 1, 11, tzinfo=datetime.timezone.utc), 'commenter': 'tgodzik', 'type': 'User'}, {'comment_id': 983805917, 'comment_body': ""You can inline this in the place it's used. No need to keep it here."", 'comment_created': datetime.datetime(2022, 9, 29, 17, 1, 40, tzinfo=datetime.timezone.utc), 'commenter': 'tgodzik', 'type': 'User'}, {'comment_id': 983806761, 'comment_body': ""```suggestion\r\n    public abstract CompletableFuture<List<Integer>> semanticTokens(VirtualFileParams params);\r\n```\r\nas I said above, we don't need to send types and modifiers."", 'comment_created': datetime.datetime(2022, 9, 29, 17, 2, 22, tzinfo=datetime.timezone.utc), 'commenter': 'tgodzik', 'type': 'User'}, {'comment_id': 983808730, 'comment_body': 'This can be imported at the top of the file.', 'comment_created': datetime.datetime(2022, 9, 29, 17, 3, 54, tzinfo=datetime.timezone.utc), 'commenter': 'tgodzik', 'type': 'User'}, {'comment_id': 983809655, 'comment_body': ""Can be moved to `mtags/src/main/scala/scala/meta/internal/pc` directory since it's only used in mtags."", 'comment_created': datetime.datetime(2022, 9, 29, 17, 4, 42, tzinfo=datetime.timezone.utc), 'commenter': 'tgodzik', 'type': 'User'}, {'comment_id': 983812828, 'comment_body': '```suggestion\r\n) {\r\n    val capableTypes= SemanticTokenCapability.tokenTypes\r\n    val capableModifiers = SemanticTokenCapability.tokenModifiers\r\n```', 'comment_created': datetime.datetime(2022, 9, 29, 17, 6, 47, tzinfo=datetime.timezone.utc), 'commenter': 'tgodzik', 'type': 'User'}, {'comment_id': 983813375, 'comment_body': '```suggestion\r\n```\r\nremove before merging', 'comment_created': datetime.datetime(2022, 9, 29, 17, 7, 16, tzinfo=datetime.timezone.utc), 'commenter': 'tgodzik', 'type': 'User'}, {'comment_id': 983814407, 'comment_body': '```suggestion\r\n  import cp._\r\n  val unit: RichCompilationUnit = cp.addCompilationUnit(\r\n    params.text(),\r\n    params.uri().toString(),\r\n    None\r\n  )\r\n```\r\nif you import everything from cp then we will not need to write it everywhere.', 'comment_created': datetime.datetime(2022, 9, 29, 17, 8, 2, tzinfo=datetime.timezone.utc), 'commenter': 'tgodzik', 'type': 'User'}, {'comment_id': 983814898, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2022, 9, 29, 17, 8, 26, tzinfo=datetime.timezone.utc), 'commenter': 'tgodzik', 'type': 'User'}, {'comment_id': 983816224, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2022, 9, 29, 17, 9, 24, tzinfo=datetime.timezone.utc), 'commenter': 'tgodzik', 'type': 'User'}, {'comment_id': 983816651, 'comment_body': 'Could you extract the code below it to a separate method? Or at least part of it?', 'comment_created': datetime.datetime(2022, 9, 29, 17, 9, 47, tzinfo=datetime.timezone.utc), 'commenter': 'tgodzik', 'type': 'User'}, {'comment_id': 983817985, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2022, 9, 29, 17, 10, 48, tzinfo=datetime.timezone.utc), 'commenter': 'tgodzik', 'type': 'User'}, {'comment_id': 983818367, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2022, 9, 29, 17, 11, 5, tzinfo=datetime.timezone.utc), 'commenter': 'tgodzik', 'type': 'User'}, {'comment_id': 983819418, 'comment_body': '```suggestion\r\n```\r\n\r\nRemove before merging', 'comment_created': datetime.datetime(2022, 9, 29, 17, 11, 55, tzinfo=datetime.timezone.utc), 'commenter': 'tgodzik', 'type': 'User'}, {'comment_id': 983831860, 'comment_body': ""Potentially we should also treat `Token.Ident` that looks like operator as `SemanticTokenTypes.Operator`\r\n\r\n```\r\n  val isOperatorName = (ident.name.last: @switch) match {\r\n    case '~' | '!' | '@' | '#' | '%' | '^' | '*' | '+' | '-' | '<' | '>' | '?' | ':' | '=' | '&' |\r\n        '|' | '/' | '\\\\' =>\r\n      true\r\n    case c => false\r\n  }\r\n```"", 'comment_created': datetime.datetime(2022, 9, 29, 17, 18, 7, tzinfo=datetime.timezone.utc), 'commenter': 'tgodzik', 'type': 'User'}, {'comment_id': 983836999, 'comment_body': ""```suggestion\r\n  case class NodeInfo(\r\n      symbol: Symbol,\r\n      pos: Position\r\n  )\r\n  object NodeInfo {\r\n    def apply(tree: Tree, pos: Position) = {\r\n      NodeInfo(tree.symbol, pos)\r\n    }\r\n    def apply(imp: Import): Option[NodeInfo] = {\r\n          selector(imp, tk.pos.start) match {\r\n            case Some(sym) => Some(NodeInfo(sym, tk.pos))\r\n            case None => None\r\n          }\r\n    }\r\n  }\r\n```\r\n- we shouldn't use vars\r\n- we can import at the start of the file from cp `import cp._` to avoid adding the prefix\r\n- we shouldn't use nulls as it can cause NullPointerException"", 'comment_created': datetime.datetime(2022, 9, 29, 17, 23, 37, tzinfo=datetime.timezone.utc), 'commenter': 'tgodzik', 'type': 'User'}, {'comment_id': 983842325, 'comment_body': 'Also, we could do a bit different structure, which would make some of it a bit simpler:\r\n```\r\n case class TokenInfo(\r\n      tokenType: String,\r\n      tokenModifiers: List[String]\r\n      pos: Position\r\n  )\r\n```\r\nand we could construct everything in the apply using `getTypeAndMod` method\r\n\r\nThis would enable us in some cases to do less calculations. For example if we are at ', 'comment_created': datetime.datetime(2022, 9, 29, 17, 29, 45, tzinfo=datetime.timezone.utc), 'commenter': 'tgodzik', 'type': 'User'}, {'comment_id': 983844971, 'comment_body': '```suggestion\r\n  val nodes: Set[NodeInfo] = traverser.traverse(Set.empty[NodeInfo], root).sortBy(_.position.start)\r\n```\r\nwe could then just iterate over the nodes, so that would be more effective and we would go through the list only once instead of every time we want to get info about a node.', 'comment_created': datetime.datetime(2022, 9, 29, 17, 33, 2, tzinfo=datetime.timezone.utc), 'commenter': 'tgodzik', 'type': 'User'}, {'comment_id': 983848126, 'comment_body': ""```suggestion\r\n      case _: Token.Ident =>\r\n```\r\nI don't think we need to worry about `Constant.Symbol`, it should have a stable type. We could use `Property` for that.\r\n\r\nWe would be able to do:\r\n```\r\nprivate def getTypeAndMod(tk: Token.Ident): (Int, Int, String) = {\r\n```\r\nand remove the `case _ =>`\r\n"", 'comment_created': datetime.datetime(2022, 9, 29, 17, 37, 3, tzinfo=datetime.timezone.utc), 'commenter': 'tgodzik', 'type': 'User'}, {'comment_id': 983848290, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2022, 9, 29, 17, 37, 15, tzinfo=datetime.timezone.utc), 'commenter': 'tgodzik', 'type': 'User'}, {'comment_id': 983848718, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2022, 9, 29, 17, 37, 48, tzinfo=datetime.timezone.utc), 'commenter': 'tgodzik', 'type': 'User'}, {'comment_id': 983849248, 'comment_body': ""Let's also add some tests to cross, I will do a quick PR to your branch tomorrow."", 'comment_created': datetime.datetime(2022, 9, 29, 17, 38, 25, tzinfo=datetime.timezone.utc), 'commenter': 'tgodzik', 'type': 'User'}, {'comment_id': 983852801, 'comment_body': '```suggestion\r\n        if (place != -1) mod += (1 << place)\r\n```', 'comment_created': datetime.datetime(2022, 9, 29, 17, 42, 22, tzinfo=datetime.timezone.utc), 'commenter': 'tgodzik', 'type': 'User'}, {'comment_id': 983853479, 'comment_body': 'I think the regular namePos should work now, so you can probably remove this.', 'comment_created': datetime.datetime(2022, 9, 29, 17, 43, 15, tzinfo=datetime.timezone.utc), 'commenter': 'tgodzik', 'type': 'User'}, {'comment_id': 984906749, 'comment_body': ""1. `var` -> `val`\r\n2. Also, when trying to find index of token type, we can use `val typeIndex = Map[String,Int] = TokenTypes.zipWithIndex.toMap` instead of List's `indexOf` method. \r\n\r\nSame thing (1,2) can be done with token modifiers"", 'comment_created': datetime.datetime(2022, 9, 30, 19, 52, 31, tzinfo=datetime.timezone.utc), 'commenter': 'kpodsiad', 'type': 'User'}, {'comment_id': 987782573, 'comment_body': '```suggestion\r\n          else if (sym.isModuleOrModuleClass) getTypeId(SemanticTokenTypes.Class) // ""object""\r\n```\r\nmaybe?', 'comment_created': datetime.datetime(2022, 10, 5, 10, 44, 44, tzinfo=datetime.timezone.utc), 'commenter': 'tgodzik', 'type': 'User'}, {'comment_id': 987799524, 'comment_body': '```suggestion\r\n      pos: scala.reflect.api.Position\r\n```', 'comment_created': datetime.datetime(2022, 10, 5, 11, 5, 3, tzinfo=datetime.timezone.utc), 'commenter': 'tgodzik', 'type': 'User'}, {'comment_id': 987799764, 'comment_body': 'Otherwise, we will not filter by position when searching for the node', 'comment_created': datetime.datetime(2022, 10, 5, 11, 5, 26, tzinfo=datetime.timezone.utc), 'commenter': 'tgodzik', 'type': 'User'}, {'comment_id': 987800091, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2022, 10, 5, 11, 5, 52, tzinfo=datetime.timezone.utc), 'commenter': 'tgodzik', 'type': 'User'}, {'comment_id': 994434216, 'comment_body': 'null should be marked as keyword', 'comment_created': datetime.datetime(2022, 10, 13, 10, 0, 35, tzinfo=datetime.timezone.utc), 'commenter': 'tgodzik', 'type': 'User'}, {'comment_id': 994435391, 'comment_body': '```suggestion\r\n    <<def>>/*keyword*/ <<name>>/*method,abstract*/: String/*type*/\r\n    <<def>>/*keyword*/ <<age>>/*method,abstract*/: Int/*class,abstract*/\r\n```', 'comment_created': datetime.datetime(2022, 10, 13, 10, 1, 40, tzinfo=datetime.timezone.utc), 'commenter': 'tgodzik', 'type': 'User'}, {'comment_id': 994436004, 'comment_body': '```suggestion\r\n  <<val>>/*keyword*/ <<V>>/*variable,readonly*/: <<Object>>/*class,abstract*/ {\r\n    <<def>>/*keyword*/ <<scalameta>>/*method,abstract*/: <<String>>/*type*/\r\n```', 'comment_created': datetime.datetime(2022, 10, 13, 10, 2, 20, tzinfo=datetime.timezone.utc), 'commenter': 'tgodzik', 'type': 'User'}, {'comment_id': 994436671, 'comment_body': '```suggestion\r\n<<package>>/*keyword*/ <<example>>/*namespace*/.<<`type`>>/*namespace*/\r\n```', 'comment_created': datetime.datetime(2022, 10, 13, 10, 3, tzinfo=datetime.timezone.utc), 'commenter': 'tgodzik', 'type': 'User'}, {'comment_id': 994676378, 'comment_body': '```suggestion\r\n    <<elems>>/*parameter*/ = <<null>>/*keyword*/\r\n```', 'comment_created': datetime.datetime(2022, 10, 13, 13, 53, 1, tzinfo=datetime.timezone.utc), 'commenter': 'tgodzik', 'type': 'User'}, {'comment_id': 994677830, 'comment_body': '```suggestion\r\n      <<c>>/*variable,readonly*/,\r\n      <<d>>/*variable,readonly*/,\r\n```', 'comment_created': datetime.datetime(2022, 10, 13, 13, 54, 13, tzinfo=datetime.timezone.utc), 'commenter': 'tgodzik', 'type': 'User'}, {'comment_id': 994680595, 'comment_body': ""Both string don't seem to be handled correctly"", 'comment_created': datetime.datetime(2022, 10, 13, 13, 56, 24, tzinfo=datetime.timezone.utc), 'commenter': 'tgodzik', 'type': 'User'}, {'comment_id': 994681704, 'comment_body': '```suggestion\r\n  <<val>>/*keyword*/ <<`a b`>>/*variable, readonly*/ = <<42>>/*number*/\r\n```', 'comment_created': datetime.datetime(2022, 10, 13, 13, 57, 15, tzinfo=datetime.timezone.utc), 'commenter': 'tgodzik', 'type': 'User'}, {'comment_id': 994683926, 'comment_body': '```suggestion\r\n    <<val>>/*keyword*/ <<Some>>/*class*/(<<number2>>/*variable, readonly*/) =\r\n```', 'comment_created': datetime.datetime(2022, 10, 13, 13, 59, 2, tzinfo=datetime.timezone.utc), 'commenter': 'tgodzik', 'type': 'User'}, {'comment_id': 994685813, 'comment_body': '```suggestion\r\n<<package>>/*keyword*/ <<object>>/*keyword*/ <<nested>>/*class*/ {\r\n```', 'comment_created': datetime.datetime(2022, 10, 13, 14, 0, 31, tzinfo=datetime.timezone.utc), 'commenter': 'tgodzik', 'type': 'User'}, {'comment_id': 1004436830, 'comment_body': ""Seems like ident itself doesn't have a symbol, but we can just find the parameter of the method.\r\n```suggestion\r\n              NodeInfo(appl.symbol.paramss.flatten.find(_.name == i.name), i.pos)\r\n```"", 'comment_created': datetime.datetime(2022, 10, 25, 12, 42, 9, tzinfo=datetime.timezone.utc), 'commenter': 'tgodzik', 'type': 'User'}, {'comment_id': 1014433716, 'comment_body': '```suggestion\r\n          val symbol =\r\n            if (ident.symbol == NoSymbol) \r\n              if(ident.tpe != null)\r\n              ident.tpe.typeSymbol\r\n              else {\r\n                val context = doLocateContext(ident.pos)\r\n                context.lookupSymbol(ident.name, _ => true) match {\r\n                   case LookupSucceeded(_, symbol) => symbol\r\n                   case _ => NoSymbol\r\n                }\r\n              }\r\n            else ident.symbol\r\n          nodes :+ NodeInfo(symbol, ident.pos)\r\n```\r\nthis should help with StructuralTypes case. ', 'comment_created': datetime.datetime(2022, 11, 4, 20, 16, 34, tzinfo=datetime.timezone.utc), 'commenter': 'tgodzik', 'type': 'User'}, {'comment_id': 1014433772, 'comment_body': '```suggestion\r\n          val symbol =\r\n            if (ident.symbol == NoSymbol) \r\n              if(ident.tpe != null)\r\n              ident.tpe.typeSymbol\r\n              else {\r\n                val context = doLocateContext(ident.pos)\r\n                context.lookupSymbol(ident.name, _ => true) match {\r\n                   case LookupSucceeded(_, symbol) => symbol\r\n                   case _ => NoSymbol\r\n                }\r\n              }\r\n            else ident.symbol\r\n          nodes :+ NodeInfo(symbol, ident.pos)\r\n```\r\nthis should help with StructuralTypes case. ', 'comment_created': datetime.datetime(2022, 11, 4, 20, 16, 40, tzinfo=datetime.timezone.utc), 'commenter': 'tgodzik', 'type': 'User'}, {'comment_id': 1015485232, 'comment_body': '```suggestion\r\n  override protected def ignoreScalaVersion: Option[IgnoreScalaVersion] = Some(\r\n    IgnoreScala3\r\n  )\r\n```\r\nthis should ignore running tests on Scala 3, which is not yet implemented.', 'comment_created': datetime.datetime(2022, 11, 7, 14, 24, 42, tzinfo=datetime.timezone.utc), 'commenter': 'tgodzik', 'type': 'User'}, {'comment_id': 1023946742, 'comment_body': ""Let's remove this one."", 'comment_created': datetime.datetime(2022, 11, 16, 12, 44, 5, tzinfo=datetime.timezone.utc), 'commenter': 'tgodzik', 'type': 'User'}, {'comment_id': 1023964276, 'comment_body': 'Get would throw an exception, maybe:\r\n```suggestion\r\n    for (tk <- params.text().tokenize.toOption.getOrElse(Nil)) yield {\r\n```\r\nor just check if the tokenization finished successfully', 'comment_created': datetime.datetime(2022, 11, 16, 13, 1, 24, tzinfo=datetime.timezone.utc), 'commenter': 'tgodzik', 'type': 'User'}, {'comment_id': 1023970812, 'comment_body': 'Could we first check if the token is string or comment?', 'comment_created': datetime.datetime(2022, 11, 16, 13, 6, 49, tzinfo=datetime.timezone.utc), 'commenter': 'tgodzik', 'type': 'User'}, {'comment_id': 1023971410, 'comment_body': '```suggestion\r\n          if (tokenType!= -1) {\r\n```\r\nshould be enough', 'comment_created': datetime.datetime(2022, 11, 16, 13, 7, 25, tzinfo=datetime.timezone.utc), 'commenter': 'tgodzik', 'type': 'User'}, {'comment_id': 1023973555, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2022, 11, 16, 13, 9, 28, tzinfo=datetime.timezone.utc), 'commenter': 'tgodzik', 'type': 'User'}, {'comment_id': 1023975268, 'comment_body': ""```suggestion\r\n          cName(0) == '`'\r\n```"", 'comment_created': datetime.datetime(2022, 11, 16, 13, 11, 1, tzinfo=datetime.timezone.utc), 'commenter': 'tgodzik', 'type': 'User'}, {'comment_id': 1023975584, 'comment_body': ""```suggestion\r\n          && cName(cName.size - 1) == '`'\r\n```"", 'comment_created': datetime.datetime(2022, 11, 16, 13, 11, 19, tzinfo=datetime.timezone.utc), 'commenter': 'tgodzik', 'type': 'User'}, {'comment_id': 1023978817, 'comment_body': ""```suggestion\r\n      val sym = tree.symbol\r\n      if (sym != NoSymbol && sym != null)\r\n        NodeInfo(Some(tree.symbol), pos)\r\n      else NodeInfo(None, pos)\r\n```\r\n\r\nthough maybe it's not useful to have a None Symbol? Mayb sym should always be defined otherwise don't add the node?"", 'comment_created': datetime.datetime(2022, 11, 16, 13, 14, 28, tzinfo=datetime.timezone.utc), 'commenter': 'tgodzik', 'type': 'User'}, {'comment_id': 1023988283, 'comment_body': 'Here we always go over all the nodes and if the file is big we get `O(n^2)` complexity. Instead since we are going linearly over positions we could have nodes as a sorted list and then only use a mutable iterator.\r\n\r\nSomething along the lines of:\r\n```\r\nval nodeIterator = nodes.iterator\r\nvar currentNode =  nodesIterator.next()\r\n... \r\nwhile (currentNode.pos.start < tk.pos.start && nodesIterator.hasNext()) node = nodesIterator.next()\r\nif (\r\n        currentNode.pos.start == tk.pos.start &&\r\n        currentNode.pos.end + adjustForBacktick == tk.pos.end\r\n      ) Some(currentNode)\r\nelse\r\n  None\r\n```\r\nThis way we go over the nodes collection once.\r\n\r\nOne complication is that you would need to keep `nodeIterator` and `currentNode` between the invocations of `pickFromTraversed`\r\n', 'comment_created': datetime.datetime(2022, 11, 16, 13, 23, 9, tzinfo=datetime.timezone.utc), 'commenter': 'tgodzik', 'type': 'User'}, {'comment_id': 1023989014, 'comment_body': '```suggestion\r\nobject SemanticTokens{\r\n```', 'comment_created': datetime.datetime(2022, 11, 16, 13, 23, 49, tzinfo=datetime.timezone.utc), 'commenter': 'tgodzik', 'type': 'User'}, {'comment_id': 1023992695, 'comment_body': '```suggestion\r\n<<import>>/*keyword*/ util.{<<Failure>>/*class*/ <<=>>>/*operator*/ NotGood/*class*/ }\r\n```\r\nseems we are not traversing renames, but this can be done as a follow up.', 'comment_created': datetime.datetime(2022, 11, 16, 13, 27, 2, tzinfo=datetime.timezone.utc), 'commenter': 'tgodzik', 'type': 'User'}, {'comment_id': 1023994177, 'comment_body': 'We should probably add the classpath to the tests, but I can take a look at that later.', 'comment_created': datetime.datetime(2022, 11, 16, 13, 28, 18, tzinfo=datetime.timezone.utc), 'commenter': 'tgodzik', 'type': 'User'}, {'comment_id': 1023995737, 'comment_body': 'java.nio etc. should be namespace tokens', 'comment_created': datetime.datetime(2022, 11, 16, 13, 29, 40, tzinfo=datetime.timezone.utc), 'commenter': 'tgodzik', 'type': 'User'}, {'comment_id': 1044434116, 'comment_body': '```suggestion\r\n      compilers.semanticTokens(\r\n        params,\r\n        token,\r\n      ).map{ tokens =>\r\n        if (tokens.isEmpty) null\r\n        else tokens\r\n      }\r\n```\r\nas noticed by @ckipp01 we need to return null in case of any issues or unsupported file format.', 'comment_created': datetime.datetime(2022, 12, 9, 13, 3, 22, tzinfo=datetime.timezone.utc), 'commenter': 'tgodzik', 'type': 'User'}, {'comment_id': 1050540772, 'comment_body': 'Can you also make sure you add an entry further down in the file under `def options` for this. That will ensure it shows up in the documentation with an explanation.', 'comment_created': datetime.datetime(2022, 12, 16, 9, 33, 35, tzinfo=datetime.timezone.utc), 'commenter': 'ckipp01', 'type': 'User'}, {'comment_id': 1050541478, 'comment_body': 'I think the formatting on this is wonky. You should be able to just run the formatting in Metals on this file and it will take care of it.', 'comment_created': datetime.datetime(2022, 12, 16, 9, 34, 24, tzinfo=datetime.timezone.utc), 'commenter': 'ckipp01', 'type': 'User'}, {'comment_id': 1050542464, 'comment_body': 'You can probably just move an import for this up above instead of having the fully qualified name here.', 'comment_created': datetime.datetime(2022, 12, 16, 9, 35, 31, tzinfo=datetime.timezone.utc), 'commenter': 'ckipp01', 'type': 'User'}, {'comment_id': 1050543314, 'comment_body': '```suggestion\r\n            ),\r\n```\r\nI typically try to avoid comments that just reiterate what the name shows. I like to instead focus on comments that explain something that might not be clear to other devs or hard to understand.', 'comment_created': datetime.datetime(2022, 12, 16, 9, 36, 34, tzinfo=datetime.timezone.utc), 'commenter': 'ckipp01', 'type': 'User'}, {'comment_id': 1050548514, 'comment_body': ""Maybe a nit, but I find this a bit hard to read since you need to dig into this. Maybe instead it might be clearer to do something like:\r\n\r\n```scala\r\n        val semanticTokenOptions = new SemanticTokensWithRegistrationOptions()\r\n        semanticTokenOptions.setFull(false)\r\n        semanticTokenOptions.setLegend(...)\r\n       ...\r\n```\r\nThen it'd be clear what we're setting.\r\n"", 'comment_created': datetime.datetime(2022, 12, 16, 9, 42, 22, tzinfo=datetime.timezone.utc), 'commenter': 'ckipp01', 'type': 'User'}, {'comment_id': 1050551844, 'comment_body': '```suggestion\r\n          if (tokens.eq(None)) null\r\n```', 'comment_created': datetime.datetime(2022, 12, 16, 9, 46, 1, tzinfo=datetime.timezone.utc), 'commenter': 'ckipp01', 'type': 'User'}, {'comment_id': 1050557124, 'comment_body': ""However you're matching `SemanticTokens` against `None` here. Shouldn't we instead be looking to see if `SemanticTokens` actually contains any tokens?"", 'comment_created': datetime.datetime(2022, 12, 16, 9, 51, 38, tzinfo=datetime.timezone.utc), 'commenter': 'ckipp01', 'type': 'User'}, {'comment_id': 1050557512, 'comment_body': ""We're not actually using the token at all here."", 'comment_created': datetime.datetime(2022, 12, 16, 9, 52, 5, tzinfo=datetime.timezone.utc), 'commenter': 'ckipp01', 'type': 'User'}, {'comment_id': 1050557988, 'comment_body': 'nit\r\n```suggestion\r\n    val emptyTokens =\r\n```', 'comment_created': datetime.datetime(2022, 12, 16, 9, 52, 35, tzinfo=datetime.timezone.utc), 'commenter': 'ckipp01', 'type': 'User'}, {'comment_id': 1050558721, 'comment_body': 'We can probably just directly create a Java list here. No need to create a Scala one first and then convert it.', 'comment_created': datetime.datetime(2022, 12, 16, 9, 53, 20, tzinfo=datetime.timezone.utc), 'commenter': 'ckipp01', 'type': 'User'}, {'comment_id': 1050559758, 'comment_body': ""Any idea how hard it'd be to support this for scripts?"", 'comment_created': datetime.datetime(2022, 12, 16, 9, 54, 33, tzinfo=datetime.timezone.utc), 'commenter': 'ckipp01', 'type': 'User'}, {'comment_id': 1050560710, 'comment_body': '```suggestion\r\n        .getOrElse(Future.successful(new SemanticTokens(zeroToken)))\r\n```', 'comment_created': datetime.datetime(2022, 12, 16, 9, 55, 29, tzinfo=datetime.timezone.utc), 'commenter': 'ckipp01', 'type': 'User'}, {'comment_id': 1050562313, 'comment_body': ""Let's instead put a short description of what this class does."", 'comment_created': datetime.datetime(2022, 12, 16, 9, 57, 8, tzinfo=datetime.timezone.utc), 'commenter': 'ckipp01', 'type': 'User'}, {'comment_id': 1050564516, 'comment_body': ""Let's put something more detailed here."", 'comment_created': datetime.datetime(2022, 12, 16, 9, 59, 24, tzinfo=datetime.timezone.utc), 'commenter': 'ckipp01', 'type': 'User'}, {'comment_id': 1050567031, 'comment_body': ""Do we actually need the `.toOption.getOrElse(Nil)`? If `.tokenize` is empty won't this just yield `Nil` anyways?"", 'comment_created': datetime.datetime(2022, 12, 16, 10, 2, 14, tzinfo=datetime.timezone.utc), 'commenter': 'ckipp01', 'type': 'User'}, {'comment_id': 1050572401, 'comment_body': ""I was thinking of doing this as a follow up, shouldn't be really too hard, mostly making sure that the first token is adjusted, the rest will be deltas"", 'comment_created': datetime.datetime(2022, 12, 16, 10, 8, 40, tzinfo=datetime.timezone.utc), 'commenter': 'tgodzik', 'type': 'User'}]","[{'commit_sha': 'b334e16579865c79bcd5a699316f4412d604fd7c', 'committer_username': 'ShintaroSasaki', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 10, 17, 4, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5783bb7ea6363092bd36104689f733dbd1621ad5', 'committer_username': 'ShintaroSasaki', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 10, 17, 4, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b35a11c88a365cd5d962d9d768421f2dbdda81c', 'committer_username': 'ShintaroSasaki', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 10, 17, 4, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a976fb1451a864456a85446815a64facecf17cfa', 'committer_username': 'ShintaroSasaki', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 10, 17, 4, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d069a1fc4f5a4581d890b65046ad9f0c35553ab', 'committer_username': 'ShintaroSasaki', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 10, 17, 4, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7675a0c42ca52c1cab60413403f725ee397abd25', 'committer_username': 'ShintaroSasaki', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 10, 17, 4, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed14cc7001146f6f029f79f65ebda8177b7ff4e4', 'committer_username': 'ShintaroSasaki', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 10, 17, 4, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e359d27deb9953b89c75b856218ff61b03a6379c', 'committer_username': 'ShintaroSasaki', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 10, 17, 4, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c741df1ca73897aad3ce4213af18b5edb3c7226a', 'committer_username': 'ShintaroSasaki', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 10, 17, 4, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e6c23750bc123c149a922052772125e5665ca51', 'committer_username': 'ShintaroSasaki', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 10, 17, 4, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cbfa776c87bee2c00a6b00b832598b9506fe1fde', 'committer_username': 'ShintaroSasaki', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 10, 17, 4, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '452bc71aa73eef271051810e99b97aa5eb1a68bf', 'committer_username': 'ShintaroSasaki', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 10, 17, 4, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42beb9582a5d470e7442c1c645f7954b960c1d20', 'committer_username': 'ShintaroSasaki', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 10, 17, 4, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1d843117bc917c903fb3b4b37a5acbfe02f142e', 'committer_username': 'ShintaroSasaki', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 10, 17, 4, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff36c0e15890c20b0c215b31098738d08b396c72', 'committer_username': 'ShintaroSasaki', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 10, 17, 4, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5db47d08c0a79955bcfaa109d6e9150d04e7e027', 'committer_username': 'ShintaroSasaki', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 10, 17, 4, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2cfc937340f9887d9231cdca309a2b2bb769c5b7', 'committer_username': 'ShintaroSasaki', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 10, 17, 4, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bacb96c410d9787d7d823643d1fd684cab36217e', 'committer_username': 'ShintaroSasaki', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 10, 17, 4, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70724a76fb4212a05c56904af052869274deb225', 'committer_username': 'ShintaroSasaki', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 10, 17, 4, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce64fae70d2d973dde65dff7c81533819e9eaf23', 'committer_username': 'ShintaroSasaki', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 10, 17, 4, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5176fc779a22a9da57be0348132a7618f370efd', 'committer_username': 'ShintaroSasaki', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 10, 17, 4, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9e9a2cc5598eedbae567f6188d84ecde02507ba', 'committer_username': 'ShintaroSasaki', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 10, 17, 4, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '63a9c4d466bd8a999aab1d23fb4b521dadc01b33', 'committer_username': 'tgodzik', 'committer_name': 'Tomasz Godzik', 'committer_email': None, 'commit_date': datetime.datetime(2013, 3, 8, 9, 23, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '038836e4f6fd5f2da8ee998a90a59338dd4c77e5', 'committer_username': 'tgodzik', 'committer_name': 'Tomasz Godzik', 'committer_email': None, 'commit_date': datetime.datetime(2013, 3, 8, 9, 23, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2e18d788c58a6aaf58ee30de8bcc7883fc469cbb', 'committer_username': 'ShintaroSasaki', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 10, 17, 4, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e6d123abe832782e0ec890e801be15e99123ff00', 'committer_username': 'ShintaroSasaki', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 10, 17, 4, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3cb8638eb293a19cc000d522fa669953aacb3844', 'committer_username': 'ShintaroSasaki', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 10, 17, 4, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e07f40bd0ce1237bfac83b97abe36cb11028cbc8', 'committer_username': 'ShintaroSasaki', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 10, 17, 4, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef6b4e8ca5d1b336d9f5fbcd58eaeae74fa0e041', 'committer_username': 'ShintaroSasaki', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 10, 17, 4, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b8282adb3423231a4d892643d194aa1207a5c3d4', 'committer_username': 'ShintaroSasaki', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 10, 17, 4, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '577defe3b560453af6b57476ea32c368c03bcfa0', 'committer_username': 'tgodzik', 'committer_name': 'Tomasz Godzik', 'committer_email': None, 'commit_date': datetime.datetime(2013, 3, 8, 9, 23, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e62e6907ffc802c938b2567587f49f307aad34ec', 'committer_username': 'ShintaroSasaki', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 10, 17, 4, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d49d87caa04f9d5f109283830a5359229b7dd83', 'committer_username': 'ShintaroSasaki', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 10, 17, 4, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0743dce4389d3e5f6fef6f500c552cfe1502243a', 'committer_username': 'ShintaroSasaki', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 10, 17, 4, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '41d774c2a7b3d6adf72398d4d13f7c73c56160c3', 'committer_username': 'ShintaroSasaki', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 10, 17, 4, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '63e9a3232d1bef10b01a0c93ed5d4322bf2dfd95', 'committer_username': 'ShintaroSasaki', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 10, 17, 4, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '686c1490ccac47e9dc41c57f7b25ea09dca81d30', 'committer_username': 'ShintaroSasaki', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 10, 17, 4, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '603270761ff00c4e503df8b747a70fff542397e7', 'committer_username': 'ShintaroSasaki', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 10, 17, 4, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '481857ce9159c78b6a6afd4bf1e72574f5b9e3b7', 'committer_username': 'ShintaroSasaki', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 10, 17, 4, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49e133861175122d1790b92b6c0d2a9e6222de29', 'committer_username': 'ShintaroSasaki', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 10, 17, 4, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '78d35dc05bbce5dd75a2994ffd76877fad6cec34', 'committer_username': 'ShintaroSasaki', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 10, 17, 4, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ecad5cfbf2947075f3430c853ea988b5412ccb15', 'committer_username': 'ShintaroSasaki', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 10, 17, 4, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87496455c759dcf88e7cda888ef58def60acc74c', 'committer_username': 'ShintaroSasaki', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 10, 17, 4, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e71146fb23f830df53c1d71004de21d179dba09', 'committer_username': 'ShintaroSasaki', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 10, 17, 4, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'adba41fb1c197b28448296f2b20aa696a205e8a6', 'committer_username': 'ShintaroSasaki', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 10, 17, 4, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6aeca9aa5a7ed8d437541a641d6a5a836cec5624', 'committer_username': 'ShintaroSasaki', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 10, 17, 4, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a43ae02ae2a592d9ea9a00e773f148c495affa95', 'committer_username': 'ShintaroSasaki', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 10, 17, 4, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d6270174b50fbea9387ef3c74c6723ac9c2418f', 'committer_username': 'ShintaroSasaki', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 10, 17, 4, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2e8942104f84434a6f84c7d06ee007b8d5bbdd06', 'committer_username': 'ShintaroSasaki', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 10, 17, 4, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '615c253857de2151241fd5e9d2771cc9161d9bdb', 'committer_username': 'ShintaroSasaki', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 10, 17, 4, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0cbb4d72acaadde8e175fdb084a78a51ffc4c9a0', 'committer_username': 'ShintaroSasaki', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 10, 17, 4, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61c01c67577c19649bf5802f67df4808d31f279e', 'committer_username': 'ShintaroSasaki', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 10, 17, 4, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83781dfcc0ff53a23c691f2f135462011476e314', 'committer_username': 'ShintaroSasaki', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 10, 17, 4, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c77a49762464762a63bf92b689500084fec8602', 'committer_username': 'ShintaroSasaki', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 10, 17, 4, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b4ab4477bddd99843c231a50a7ca36f44a67f00', 'committer_username': 'ShintaroSasaki', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 10, 17, 4, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc098ed04a7adaac769502d0e0f8f13bb12fe42b', 'committer_username': 'ShintaroSasaki', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 10, 17, 4, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f04456a2ad9308ea75a36abd2f0742cb8a771e8d', 'committer_username': 'ShintaroSasaki', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 10, 17, 4, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c4a48bcdb92672a8c65f8ac2b565ddb560e1b77', 'committer_username': 'ShintaroSasaki', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 10, 17, 4, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f6dbf6ecdecaa4ff197cb28889a9e78b3bd2c1c', 'committer_username': 'ShintaroSasaki', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 10, 17, 4, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fffd922206a5007b106d8aad6a12fdd5784828fb', 'committer_username': 'ShintaroSasaki', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 10, 17, 4, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '881a02116e17da4b2ee66b65b014424633274677', 'committer_username': 'ShintaroSasaki', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 10, 17, 4, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '602048948cb61e65380a7844bd503034715b82eb', 'committer_username': 'ShintaroSasaki', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 10, 17, 4, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '85e8c1dca3212be96852b005330fd14590e1d280', 'committer_username': 'ShintaroSasaki', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 10, 17, 4, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6966912c9ec79ab47314e4786b1ff56b37956dc5', 'committer_username': 'ShintaroSasaki', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 10, 17, 4, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '013a56b00deb59b3e1bc77770b6a6e10bc9e187e', 'committer_username': 'jkciesluk', 'committer_name': 'Jakub Cieśluk', 'committer_email': None, 'commit_date': datetime.datetime(2020, 10, 15, 22, 43, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a2d7f52ff97edd083437c664d55eab45f596758', 'committer_username': 'ckipp01', 'committer_name': 'Chris Kipp', 'committer_email': 'open-source@chris-kipp.io', 'commit_date': datetime.datetime(2015, 8, 26, 2, 59, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ea70f965db33b900f3bacf7527a3b42840333cc', 'committer_username': 'ckipp01', 'committer_name': 'Chris Kipp', 'committer_email': 'open-source@chris-kipp.io', 'commit_date': datetime.datetime(2015, 8, 26, 2, 59, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70a1c4759e2d9fe31bb7b7025291f9ef301da892', 'committer_username': 'tgodzik', 'committer_name': 'Tomasz Godzik', 'committer_email': None, 'commit_date': datetime.datetime(2013, 3, 8, 9, 23, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a61bf7f26ada22a62e7d57231e6cc0deb0ad0ffe', 'committer_username': 'ckipp01', 'committer_name': 'Chris Kipp', 'committer_email': 'open-source@chris-kipp.io', 'commit_date': datetime.datetime(2015, 8, 26, 2, 59, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b99492ff0a3df798bddf7cd94f305c05847d2ce9', 'committer_username': 'dependabot[bot]', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 4, 16, 22, 34, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3210749e4a8bf21cc8d2ff8ad025e81df58c5d57', 'committer_username': 'tgodzik', 'committer_name': 'Tomasz Godzik', 'committer_email': None, 'commit_date': datetime.datetime(2013, 3, 8, 9, 23, 43, tzinfo=datetime.timezone.utc)}]",,92659783,,User,,2,,4,0

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
109404123,metals,scalameta/metals,Scala,320,2061,47,195,8809,248,12,16,"[{'id': 1067482593, 'number': 4444, 'closed': datetime.datetime(2023, 1, 5, 17, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 26, 17, 29, 33, tzinfo=datetime.timezone.utc), 'time_taken': 8727267.0, 'time_delta': '101 days, 0:14:27', 'additions': 1662, 'deletions': 23, 'state': 'closed'}]"
