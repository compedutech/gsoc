pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
437474660,Packagedcode to handle Python(requirements.txt),"<!-- Delete Template sections if unneccesary -->
<!-- Add issue number here (We encourage you to create the Issue First) -->
<!-- You can also link the issue in Commit Messages -->

Fixes #2037 

<!--
Make sure these boxes are checked before your pull request (PR) is ready to be reviewed and merged. Thanks!
* [x] - Checked Box
* [ ] - Unchecked Box
-->

### Tasks

* [x] Reviewed [contribution guidelines](https://github.com/nexB/scancode-toolkit/blob/develop/CONTRIBUTING.rst)
* [x] PR is descriptively titled üìë and links the original issue above üîó
* [x] Tests pass -- look for a green checkbox ‚úîÔ∏è a few minutes after opening your PR
  Run [tests](https://scancode-toolkit.readthedocs.io/en/latest/contribute/contrib_dev.html#running-tests) locally to check for errors. 
* [x] Commits are in uniquely-named feature branch and has no merge conflicts üìÅ

<!--
We're happy to help you get this ready -- don't be afraid to ask for help, and **don't be discouraged**
if your tests fail at first!
If tests do fail, click on the red `X` to learn why by reading the logs.
Thanks!
-->

<!-- Don't forget to Signoff -->
",True,2078,https://api.github.com/repos/aboutcode-org/scancode-toolkit/pulls/2078,https://github.com/aboutcode-org/scancode-toolkit/pull/2078,closed,571,27,17,6,3,36,0,0,[],2020-06-20 23:49:30+00:00,2020-07-13 14:51:52+00:00,1954942.0,"22 days, 15:02:22","[{'comment_id': 443765843, 'comment_body': 'I think `(req.specs)[0]` can be made into a variable since you reference it in multiple places after this, like line 334 and line 336.\r\n\r\nAlso, does this work if a requirement.txt requirement does not state a version? For example, consider the following as a requirements.txt:\r\n\r\n```\r\nsetuptools==32.0.0\r\ndjango\r\n```\r\n\r\nWould django be processed properly?', 'comment_created': datetime.datetime(2020, 6, 22, 19, 3, tzinfo=datetime.timezone.utc), 'commenter': 'JonoYang', 'type': 'User'}, {'comment_id': 443885186, 'comment_body': 'Not sure we want to have *.txt or .txt here. This will classify text files as requirements files, right?', 'comment_created': datetime.datetime(2020, 6, 22, 23, 51, 18, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 443885305, 'comment_body': 'See comment above. I am skeptical with this approach (but I could be wrong)\r\n\r\n@pombredanne thoughts?', 'comment_created': datetime.datetime(2020, 6, 22, 23, 51, 47, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 443885384, 'comment_body': 'I would add a newline here.', 'comment_created': datetime.datetime(2020, 6, 22, 23, 52, 9, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 443885530, 'comment_body': 'I agree with @JonoYang. I think your approach is slightly flawed here. ', 'comment_created': datetime.datetime(2020, 6, 22, 23, 52, 41, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 443885700, 'comment_body': 'multiple list references like this are bad style.', 'comment_created': datetime.datetime(2020, 6, 22, 23, 53, 13, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 443885877, 'comment_body': 'This is not correct. I would expect this value to be `setuptools`', 'comment_created': datetime.datetime(2020, 6, 22, 23, 53, 54, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 443895003, 'comment_body': '@majurg Please see https://github.com/nexB/scancode-toolkit/pull/2077#discussion_r443118795 comment of @pombredanne ', 'comment_created': datetime.datetime(2020, 6, 23, 0, 27, 3, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 443904952, 'comment_body': '@JonoYang You were right. I have made some changes :)', 'comment_created': datetime.datetime(2020, 6, 23, 1, 5, 27, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 444282458, 'comment_body': 'Ok. If `requirement` is not used for anything (now that all the package information is in the purl), why not delete this field? \r\n\r\nI guess mainly I am confused at to what `requirement` refers to. I interpret that field name to mean the name of the python package, but maybe this is wrong?', 'comment_created': datetime.datetime(2020, 6, 23, 14, 46, 49, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 444324682, 'comment_body': ""```\r\npurl = String(\r\n    repr=True,\r\n    label='Dependent package URL',\r\n    help='A compact purl package URL. Typically when there is an unresolved requirement, there is no version. ' 'If the dependency is resolved, the version should be added to the purl')\r\n\r\nrequirement = String(\r\n    repr=True,\r\n    label='dependent package version requirement',\r\n    help='A string defining version(s)requirements. Package-type specific.')\r\n```\r\nSo both are important :)"", 'comment_created': datetime.datetime(2020, 6, 23, 15, 45, 17, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 445264120, 'comment_body': 'Ah ok this is fine then :+1: thanks', 'comment_created': datetime.datetime(2020, 6, 25, 1, 50, 49, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 445279449, 'comment_body': 'The main naming conventions I\'m aware of are `requirements.txt`, `dev-requirements.txt` and `locked-requirements.txt` (I\'m not sure how widespread the last one is, I just prefer using ""requirements.txt"" and ""locked-requirements.txt"" when using pip-compile)', 'comment_created': datetime.datetime(2020, 6, 25, 2, 54, 45, tzinfo=datetime.timezone.utc), 'commenter': 'ncoghlan', 'type': 'User'}, {'comment_id': 446223417, 'comment_body': '@ncoghlan @majurg @pombredanne filename can be `requirements.txt`, `dev-requirements.txt`, `test-requirements.txt`, `requirements-dev.txt` or `requirements-test.txt` so what should I choose??', 'comment_created': datetime.datetime(2020, 6, 26, 14, 36, 38, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 446327260, 'comment_body': '@rpotter12 IMHO all of them :) ... but what this really means is that the function that detects and parses requirements need to be flexible there and may not rely too much on the generic package type metadata.\r\n\r\n', 'comment_created': datetime.datetime(2020, 6, 26, 17, 51, 30, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 447215849, 'comment_body': 'What about `requirements.in` files and similar? ', 'comment_created': datetime.datetime(2020, 6, 29, 19, 54, 13, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 448168357, 'comment_body': 'Please use single quotes consistently', 'comment_created': datetime.datetime(2020, 7, 1, 7, 26, 17, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 448169012, 'comment_body': 'nit: quotes', 'comment_created': datetime.datetime(2020, 7, 1, 7, 27, 31, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 448169774, 'comment_body': 'endswith() takes a tuple and does not need to be called twice. Also what about `requirements-dev.txt` and similar?\r\nIMHO you should make this a separate function and you can then have a series of unit test for it.', 'comment_created': datetime.datetime(2020, 7, 1, 7, 29, 1, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 449253196, 'comment_body': 'Do we have test cases for these filename recognitions yet? if not we should add them', 'comment_created': datetime.datetime(2020, 7, 2, 20, 34, 26, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 449276926, 'comment_body': 'https://github.com/nexB/scancode-toolkit/blob/83f29f9dbbca54a5d69db0d6d7617b8b4dd7021a/tests/packagedcode/test_pypi.py#L314-L333\r\n\r\n@majurg I have added test here. I think this will be OK :)', 'comment_created': datetime.datetime(2020, 7, 2, 21, 36, 5, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 449318228, 'comment_body': 'nice', 'comment_created': datetime.datetime(2020, 7, 3, 0, 12, 48, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 452758688, 'comment_body': 'You are not returning a renamed filename, are you?\r\nRather you are returning a type of dependency file... so please update your doc accordingly.', 'comment_created': datetime.datetime(2020, 7, 10, 10, 22, 50, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 452764732, 'comment_body': 'Also note that for the future, I have submitted this PR upstream https://github.com/pyupio/dparse/pull/48', 'comment_created': datetime.datetime(2020, 7, 10, 10, 35, 51, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 452777736, 'comment_body': ':+1: ', 'comment_created': datetime.datetime(2020, 7, 10, 11, 6, 51, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 452864623, 'comment_body': 'IMHO it is a good idea to keep a test for this function too', 'comment_created': datetime.datetime(2020, 7, 10, 14, 4, 39, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 452864855, 'comment_body': 'pytest imports goes after standard imports', 'comment_created': datetime.datetime(2020, 7, 10, 14, 5, 2, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 452869039, 'comment_body': 'What about this may be? which will also support adding other dparse parsers?\r\n```\r\ndependency_type_by_extensions = {\r\n    (\'.txt\', \'.in\'): \'requirements.txt\',\r\n}\r\n\r\ndef get_dependency_type(file_name, dependency_type_by_extensions=dependency_type_by_extensions):\r\n    """"""\r\n    Return the type of a dependency as a string or None given a `file_name` string.\r\n    """"""\r\n    for extensions, dependency_type in dependency_type_by_extensions.items():\r\n        if file_name.endswith(extensions):\r\n            return dependency_type\r\n```', 'comment_created': datetime.datetime(2020, 7, 10, 14, 12, 7, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 452908291, 'comment_body': 'I was also about to change this like this. This will be more easier.\r\nI will change this shortly :)', 'comment_created': datetime.datetime(2020, 7, 10, 15, 16, 27, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 453170243, 'comment_body': 'may be rather:\r\n`dependency_type = get_dependency_type(file_name)`', 'comment_created': datetime.datetime(2020, 7, 11, 8, 6, 13, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 453170328, 'comment_body': '`if dependency_type not in (filetypes.requirements_txt,`', 'comment_created': datetime.datetime(2020, 7, 11, 8, 6, 57, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 453172308, 'comment_body': 'What about `===` and others quasi-equal in the latest specs?\r\nAlso since `df_dependencies.specs` is a list of Specifier packaging object https://github.com/pypa/packaging/blob/master/packaging/specifiers.py  why not use that instead of taking a `str()` on it?\r\nYou could check if the `.operator` matches a list of equality operators AND that there is only one specifier (which is the only valid case for `is_resolved` ) \r\nSee https://github.com/pypa/packaging/blob/master/packaging/specifiers.py#L173 ', 'comment_created': datetime.datetime(2020, 7, 11, 8, 32, 58, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 453334003, 'comment_body': 'what if there are more than one items in `specs?', 'comment_created': datetime.datetime(2020, 7, 12, 16, 1, 38, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 453334399, 'comment_body': 'I think you missed adding back something like:\r\n```\r\nrequirement = str(df_dependency.specs)\r\n```\r\n?', 'comment_created': datetime.datetime(2020, 7, 12, 16, 5, 43, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 453334416, 'comment_body': 'what if there are more than one items in `specs`?\r\n', 'comment_created': datetime.datetime(2020, 7, 12, 16, 5, 57, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 453399607, 'comment_body': 'It is fixed now', 'comment_created': datetime.datetime(2020, 7, 13, 2, 9, 31, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}]","[{'commit_sha': '3b58242a4f76d632fbc19aeafaff4ed133a3ed4c', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83f29f9dbbca54a5d69db0d6d7617b8b4dd7021a', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c5bfe41c0add123647cb72e9362881dbe35eb6d2', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2fa0bcffb8f61f346f4bab08defc845cd10176e1', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '91755d4b14f080108782bda1902d7c2af905a593', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ee7309e8cd4a3eecccc97c7151d42f654dcbdd6', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}]",Rohit Potter,34352567,rohitpotter12@gmail.com,User,,63,,22,109
441165118,Packagedcode to handle go.mod,"<!-- Delete Template sections if unneccesary -->
<!-- Add issue number here (We encourage you to create the Issue First) -->
<!-- You can also link the issue in Commit Messages -->

Fixes #2080 

implementation to hangle Go(go.mod) files
<!--
Make sure these boxes are checked before your pull request (PR) is ready to be reviewed and merged. Thanks!
* [x] - Checked Box
* [ ] - Unchecked Box
-->

### Tasks

* [x] Reviewed [contribution guidelines](https://github.com/nexB/scancode-toolkit/blob/develop/CONTRIBUTING.rst)
* [x] PR is descriptively titled üìë and links the original issue above üîó
* [x] Tests pass -- look for a green checkbox ‚úîÔ∏è a few minutes after opening your PR
  Run [tests](https://scancode-toolkit.readthedocs.io/en/latest/contribute/contrib_dev.html#running-tests) locally to check for errors. 
* [x] Commits are in uniquely-named feature branch and has no merge conflicts üìÅ

<!--
We're happy to help you get this ready -- don't be afraid to ask for help, and **don't be discouraged**
if your tests fail at first!
If tests do fail, click on the red `X` to learn why by reading the logs.
Thanks!
-->

<!-- Don't forget to Signoff -->
",True,2097,https://api.github.com/repos/aboutcode-org/scancode-toolkit/pulls/2097,https://github.com/aboutcode-org/scancode-toolkit/pull/2097,closed,750,0,15,9,1,68,0,0,[],2020-06-29 02:48:14+00:00,2020-07-22 20:42:01+00:00,2051627.0,"23 days, 17:53:47","[{'comment_id': 447218332, 'comment_body': 'Can you declare `purl` outside of this call to `DependentPackage`. This will make it more readable.', 'comment_created': datetime.datetime(2020, 6, 29, 19, 58, 40, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 447218454, 'comment_body': 'Can you declare purl outside of this call to DependentPackage. This will make it more readable.', 'comment_created': datetime.datetime(2020, 6, 29, 19, 58, 54, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 447219702, 'comment_body': 'instead of using `parsed` everywhere, can we make each variable more descriptive? For example:\r\n```\r\nparsed_name = module_name_parse()\r\n```', 'comment_created': datetime.datetime(2020, 6, 29, 20, 1, 12, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 447220139, 'comment_body': 'Can these function names start with `parse`? for example: `module_name_parse() => parse_module_name`. This is easier to read/follow', 'comment_created': datetime.datetime(2020, 6, 29, 20, 2, 5, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 447386028, 'comment_body': '@majurg I can declare `purl` outside the `DependentPackage` but I think it will be more better if we keep all codes similar. Like in other PackagedCode `purl` is declared in this way. What do you say??', 'comment_created': datetime.datetime(2020, 6, 30, 3, 26, 30, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 447386162, 'comment_body': 'I will change this soon:)', 'comment_created': datetime.datetime(2020, 6, 30, 3, 26, 57, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 447386219, 'comment_body': 'I will change it soon :)', 'comment_created': datetime.datetime(2020, 6, 30, 3, 27, 11, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 448206892, 'comment_body': 'I think Regrex is a typo\r\nAlso please put an example before each expression for illustration', 'comment_created': datetime.datetime(2020, 7, 1, 8, 35, 22, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 448207220, 'comment_body': 'Do you really need a named group if you only get a single value?', 'comment_created': datetime.datetime(2020, 7, 1, 8, 35, 54, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 448207481, 'comment_body': 'Are not these the same as require?', 'comment_created': datetime.datetime(2020, 7, 1, 8, 36, 21, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 448207931, 'comment_body': 'Should this rather be at the very top?', 'comment_created': datetime.datetime(2020, 7, 1, 8, 37, 8, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 448208237, 'comment_body': ""Please see my other comments on docstrings style and update in all your PRs'"", 'comment_created': datetime.datetime(2020, 7, 1, 8, 37, 44, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 448211716, 'comment_body': ""I feel there could be a better way. Since you are using named groups that get you a mapping, and you have results could there be a way that's simpler? "", 'comment_created': datetime.datetime(2020, 7, 1, 8, 44, 2, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 448212172, 'comment_body': 'What are you trying to handle here? what if there are two or twelve spaces? ', 'comment_created': datetime.datetime(2020, 7, 1, 8, 44, 48, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 448661427, 'comment_body': 'I am not so good in regex, so to make it more readable I have made group in this.', 'comment_created': datetime.datetime(2020, 7, 1, 23, 9, 40, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 448707841, 'comment_body': 'I have updated this in changes :)\r\n', 'comment_created': datetime.datetime(2020, 7, 2, 2, 5, 14, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 448707986, 'comment_body': 'We should discuss this in gitter chat :)', 'comment_created': datetime.datetime(2020, 7, 2, 2, 5, 44, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 448708118, 'comment_body': 'Updated docstrings :)', 'comment_created': datetime.datetime(2020, 7, 2, 2, 6, 13, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 448708179, 'comment_body': 'Updated this in new changes :)', 'comment_created': datetime.datetime(2020, 7, 2, 2, 6, 32, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 448708525, 'comment_body': 'They are written in similar way but to classify them differently I have done it like this :)', 'comment_created': datetime.datetime(2020, 7, 2, 2, 8, 5, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 448708595, 'comment_body': 'updated my PR :)', 'comment_created': datetime.datetime(2020, 7, 2, 2, 8, 31, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 450557330, 'comment_body': 'We probably want to change `contains`  to `containing`.  (small nitpick)', 'comment_created': datetime.datetime(2020, 7, 7, 1, 11, 28, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 451710861, 'comment_body': 'This block of comments should be at the top of the file, not at the bottom of the file.', 'comment_created': datetime.datetime(2020, 7, 8, 17, 29, 22, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 451711701, 'comment_body': 'Is this the right type listed in the PURL spec?', 'comment_created': datetime.datetime(2020, 7, 8, 17, 30, 48, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 451712411, 'comment_body': ""what about instead : `require = gomod_data.get('require') or []` ? that would dispense you of the `if require:` below"", 'comment_created': datetime.datetime(2020, 7, 8, 17, 32, 1, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 451712729, 'comment_body': 'Same comment as above: try `or []` and remove the if exclude\r\n', 'comment_created': datetime.datetime(2020, 7, 8, 17, 32, 36, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 451712918, 'comment_body': 'Add a line at the end', 'comment_created': datetime.datetime(2020, 7, 8, 17, 32, 56, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 451713304, 'comment_body': 'Are you sure this always holds? can you provide a few examples?', 'comment_created': datetime.datetime(2020, 7, 8, 17, 33, 35, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 451713963, 'comment_body': 'Same as above... this seems to be very focused on Github only? Is this how the Go code works? did you check that?\r\n\r\nAlso be consistent with your quotes', 'comment_created': datetime.datetime(2020, 7, 8, 17, 34, 42, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 452587217, 'comment_body': 'go.mod file does not contain the version number of the package. Valid download url need version number. So I have removed it for now.\r\n\r\n`https://proxy.golang.org/example.com/my/module/@v/v1.0.0.zip`', 'comment_created': datetime.datetime(2020, 7, 10, 2, 21, 5, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 452640501, 'comment_body': 'About github, btw, this is not the only place: \r\nhttps://pkg.go.dev/search?q=bitbucket.org\r\nhttps://pkg.go.dev/search?q=gitlab.com\r\n\r\n> go.mod file does not contain the version number of the package. Valid download url need version number. So I have removed it for now.\r\n\r\nsomehow `go get` fetches things still, right? so a valid download URL must be something we should be able to create?\r\n', 'comment_created': datetime.datetime(2020, 7, 10, 6, 9, 13, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 452644918, 'comment_body': '@rpotter12 can you confer with @TG1999 sine he is working closely with download URLs lately?', 'comment_created': datetime.datetime(2020, 7, 10, 6, 23, 30, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 453174989, 'comment_body': 'is there any namespace in there?', 'comment_created': datetime.datetime(2020, 7, 11, 9, 8, 54, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 453175099, 'comment_body': 'Are you planning to also handle go.sum files (may be in another ticket?)', 'comment_created': datetime.datetime(2020, 7, 11, 9, 10, 13, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 453175326, 'comment_body': '`https://pkg.go.dev/github.com/alecthomas/kingpin` is the `repository_homepage_url` alright... but would the homepage be instead `https://github.com/alecthomas/kingpin` ? You may want to sync up with @TG1999 as he is working on purl <-> urls too', 'comment_created': datetime.datetime(2020, 7, 11, 9, 12, 46, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 453179698, 'comment_body': 'Yes I will create another PR after this is merged', 'comment_created': datetime.datetime(2020, 7, 11, 10, 8, 16, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 453180101, 'comment_body': 'The module section contains the name of the package like `kingpin` is the name in `module github.com/alecthomas/kingpin`. You can check go.mod files which I have added and other files too, I think this will be the name.', 'comment_created': datetime.datetime(2020, 7, 11, 10, 14, 4, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 453180132, 'comment_body': 'I will create another PR for that after this is merged :)', 'comment_created': datetime.datetime(2020, 7, 11, 10, 14, 41, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 453180785, 'comment_body': '@pombredanne It is not always fixed the module section contains the github url. It can be like `google.golang.org/grpc` too. So I think it will be better that we use `https://pkg.go.dev/github.com/alecthomas/kingpin` type here :)\r\n\r\nI have ping @TG1999 here too for his comments :)', 'comment_created': datetime.datetime(2020, 7, 11, 10, 22, 35, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 453181003, 'comment_body': 'The module section contains the name of the package like kingpin is the name in module github.com/alecthomas/kingpin. You can check go.mod files which I have added and other files too, I think this will be the name.', 'comment_created': datetime.datetime(2020, 7, 11, 10, 25, 17, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 453184750, 'comment_body': ':+1: ', 'comment_created': datetime.datetime(2020, 7, 11, 11, 15, 36, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 453184830, 'comment_body': 'would  `github.com/alecthomas` be the namespace?', 'comment_created': datetime.datetime(2020, 7, 11, 11, 16, 41, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 453184877, 'comment_body': 'This should be at the top not the bottom!', 'comment_created': datetime.datetime(2020, 7, 11, 11, 17, 22, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 453185358, 'comment_body': 'In all cases, `https://pkg.go.dev/github.com/alecthomas/kingpin` is a `repository_homepage_url`\r\nFor the cases where you can infer a good `homepage_url` do it, such as here: `https://github.com/alecthomas/kingpin`\r\n\r\nDo not hesitate to collect ALL the package listed at  https://index.golang.org/ to devise smarter rules informed from the actual data?', 'comment_created': datetime.datetime(2020, 7, 11, 11, 24, 27, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 453188443, 'comment_body': 'I think whole `github.com/alecthomas/kingpin` will come in name as we can see in https://pkg.go.dev/', 'comment_created': datetime.datetime(2020, 7, 11, 12, 5, 16, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 453317694, 'comment_body': 'Are these going to be compiled each time a GoMod object is created?', 'comment_created': datetime.datetime(2020, 7, 12, 13, 37, 29, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 453326322, 'comment_body': ""@majurg They will be compiled for each line in a loop. But I don't find any other way to parse the file :)"", 'comment_created': datetime.datetime(2020, 7, 12, 14, 54, 7, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 453328804, 'comment_body': '@majurg I think these will be compile only once when the module is imported since these are class attributes. They will not be recompiled on each GoMod object creation', 'comment_created': datetime.datetime(2020, 7, 12, 15, 13, 18, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 453329210, 'comment_body': 'I get that, I am talking about from a Package URL point of view. What is the name? and what is the namespace?', 'comment_created': datetime.datetime(2020, 7, 12, 15, 16, 38, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 453331308, 'comment_body': '@pombredanne \r\n> Do not hesitate to collect ALL the package listed at https://index.golang.org/ to devise smarter rules informed from the actual data?\r\n\r\nCan you explain more about this line, what you should I actually so with this site?? https://index.golang.org/ does not contain all the package list. maximum limit is 2000', 'comment_created': datetime.datetime(2020, 7, 12, 15, 35, 18, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 453332876, 'comment_body': 'I think we should use this type of download urls ```https://proxy.golang.org/example.com/my/module/@v/v1.0.0.zip```, and since version is not given in go.mod files, we should use the latest version using any API or something, just a suggestion. But one question is there any case where version will be also given with the package in go.mod files or they always lack a version :)', 'comment_created': datetime.datetime(2020, 7, 12, 15, 50, 24, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 453406666, 'comment_body': '@TG1999 I think version number will never be present in go.mod file. So we will never identify the latest version. \r\n\r\n@pombredanne, @TG1999 do you have any way to download the package??', 'comment_created': datetime.datetime(2020, 7, 13, 2, 43, 55, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 453408238, 'comment_body': '@pombredanne I think in `github.com/alecthomas/kingpin`, `alecthomas` will be namespace and `kingpin` will be name', 'comment_created': datetime.datetime(2020, 7, 13, 2, 51, 45, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 453599309, 'comment_body': 'For github like module it will work properly but it will not always work. I have fixed this in latest changes.', 'comment_created': datetime.datetime(2020, 7, 13, 12, 1, 3, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 453758298, 'comment_body': '@pombredanne Thanks!', 'comment_created': datetime.datetime(2020, 7, 13, 16, 1, 14, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 453759140, 'comment_body': '@rpotter12 I think this is still an open item?', 'comment_created': datetime.datetime(2020, 7, 13, 16, 2, 29, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 453764449, 'comment_body': ""@rpotter12 See @TG1999 's function here: https://github.com/package-url/packageurl-python/blob/5f6f7bb14279c11593003dc93ed1e46bf48cc9cb/src/packageurl/contrib/url2purl.py#L360"", 'comment_created': datetime.datetime(2020, 7, 13, 16, 10, 52, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 453765206, 'comment_body': 'This function converts a github url to a PackageURL Object, which has `name` and `namespace` values filled in correctly.', 'comment_created': datetime.datetime(2020, 7, 13, 16, 12, 9, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 456186269, 'comment_body': 'I will edit this in some time :)', 'comment_created': datetime.datetime(2020, 7, 17, 2, 39, 34, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 456186642, 'comment_body': 'This also looks good. I will edit this :)', 'comment_created': datetime.datetime(2020, 7, 17, 2, 40, 52, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 456186722, 'comment_body': 'I will edit this too :)', 'comment_created': datetime.datetime(2020, 7, 17, 2, 41, 12, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 457763759, 'comment_body': 'What does `.group()` do?', 'comment_created': datetime.datetime(2020, 7, 21, 0, 22, 11, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 457895306, 'comment_body': '@majurg \r\n`.group()` method returns a tuple containing all the subgroups of the match, from 1 up to however many groups are in the pattern. The default argument is used for groups that did not participate in the match; it defaults to None. \r\n\r\n```\r\n>>> m = re.match(r""(\\d+)\\.(\\d+)"", ""27.1835"")\r\n>>> m.groups()\r\n(\'27\', \'1835\')\r\n```', 'comment_created': datetime.datetime(2020, 7, 21, 7, 34, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 458180062, 'comment_body': ""with `module github.com/alecthomas/kingpin` would you be able to infer some better homepage URL instead? \r\nAnd what you have in homepage_url would be instead best computed as ` repository_download_url` in https://github.com/nexB/scancode-toolkit/blob/3068680e822bb6ed58d784ecb36ad901ee158078/src/packagedcode/models.py#L250 \r\n\r\nYou need not just copy it over from homepage_url which would be incorrect but instead compute it in that method somewhere along the lines of `'https://pkg.go.dev/{namespace}/{name}@{version}/{subpath}'.format(....)`\r\n\r\nFor instance https://pkg.go.dev/github.com/stretchr/testify@v1.6.1/mock\r\n\r\nAlso since this is obviously from Github, what about also filling in the vcs_url? https://github.com/nexB/scancode-toolkit/blob/3068680e822bb6ed58d784ecb36ad901ee158078/src/packagedcode/models.py#L429\r\n\r\n(Note that I would be fine that you handle that in a new ticket, in which case enter a ticket for that)"", 'comment_created': datetime.datetime(2020, 7, 21, 15, 19, 12, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 458203469, 'comment_body': 'This is not correct. You should craft a real URL based on the fields and a template and not copy over the homepage_url', 'comment_created': datetime.datetime(2020, 7, 21, 15, 50, 12, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 458817146, 'comment_body': 'I am creating a new ticket for this :)', 'comment_created': datetime.datetime(2020, 7, 22, 14, 4, 23, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 458817719, 'comment_body': 'I have fixed this in latest changes :)\r\n', 'comment_created': datetime.datetime(2020, 7, 22, 14, 5, 10, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 458825287, 'comment_body': 'Added new ticket for this https://github.com/nexB/scancode-toolkit/issues/2121', 'comment_created': datetime.datetime(2020, 7, 22, 14, 15, 40, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}]","[{'commit_sha': '97a4f5dcc7fd16dbc4df9a5549d2ad3da56e177e', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c0ec7e193650c749cfa5fe7da8f1679fa899b4d7', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9fc4f00923cd5a6f19620cfa199d35b9b4317ba1', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2e1f4121d23c8165b0520d7e26c6e32d025091e', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c22421fbb6c4aa9f00275b0078785b44cd7cd9fc', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7bef31bcc6bef5f0424ffe4f9aeba554581c811f', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a1f90b7c8e72fa14f8e4d09fe678768e288eeaf', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f33660257548ff87d0d347458516201ed2fb85ad', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '289a0ee348332a095f57bdf6900c64fc1c07aa08', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}]",Rohit Potter,34352567,rohitpotter12@gmail.com,User,,63,,22,109
448620725,packaged code to handle Pipfile.lock,"<!-- Delete Template sections if unneccesary -->
<!-- Add issue number here (We encourage you to create the Issue First) -->
<!-- You can also link the issue in Commit Messages -->

Fixes #2082 
Packagedcode to handle Pipfile.lock

<!--
Make sure these boxes are checked before your pull request (PR) is ready to be reviewed and merged. Thanks!
* [x] - Checked Box
* [ ] - Unchecked Box
-->

### Tasks

* [x] Reviewed [contribution guidelines](https://github.com/nexB/scancode-toolkit/blob/develop/CONTRIBUTING.rst)
* [x] PR is descriptively titled üìë and links the original issue above üîó
* [x] Tests pass -- look for a green checkbox ‚úîÔ∏è a few minutes after opening your PR
  Run [tests](https://scancode-toolkit.readthedocs.io/en/latest/contribute/contrib_dev.html#running-tests) locally to check for errors. 
* [x] Commits are in uniquely-named feature branch and has no merge conflicts üìÅ

<!--
We're happy to help you get this ready -- don't be afraid to ask for help, and **don't be discouraged**
if your tests fail at first!
If tests do fail, click on the red `X` to learn why by reading the logs.
Thanks!
-->

<!-- Don't forget to Signoff -->
",True,2116,https://api.github.com/repos/aboutcode-org/scancode-toolkit/pulls/2116,https://github.com/aboutcode-org/scancode-toolkit/pull/2116,closed,1216,20,13,6,0,21,0,0,[],2020-07-14 03:30:49+00:00,2020-07-22 20:46:44+00:00,753355.0,"8 days, 17:15:55","[{'comment_id': 454562825, 'comment_body': ""Does this value coorespond to the actual `Pipfile.lock`'s sha256 value?\r\n\r\nIf so, we can probably collect this info on the Package's `sha256` field."", 'comment_created': datetime.datetime(2020, 7, 14, 18, 35, 25, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 455457909, 'comment_body': '@majurg Do we actually need to collect this because Pipfile.lock is the dependency files and I think collecting dependency will be enough. What do you think??\r\nIf we have to collect please inform me :)', 'comment_created': datetime.datetime(2020, 7, 16, 1, 34, 21, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 456643086, 'comment_body': ""Yeah, this probably doesn't need to be on the top-level package, as it is just a lockfile. "", 'comment_created': datetime.datetime(2020, 7, 17, 19, 49, 31, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 456643625, 'comment_body': 'We should probably rename this `parse_python_dependency_file()`, as this is what it actually does. ', 'comment_created': datetime.datetime(2020, 7, 17, 19, 50, 43, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 456739134, 'comment_body': ""We need to create different functions for all the dependency file. While parsing `requirements.txt` we don't need to parse the file again to detect extra data and parsing `Pipfile.lock` we need to parse the file again to extract `sha256` because `dparse` does not contain code to extract `sha256` from `_meta`."", 'comment_created': datetime.datetime(2020, 7, 18, 2, 44, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 458111388, 'comment_body': 'Why do you catch these errors here and not let them bubble up instead?\r\nI would rather not get empty data on failure, and instead have a loud error.', 'comment_created': datetime.datetime(2020, 7, 21, 13, 49, 50, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 458112238, 'comment_body': 'Return package built from Python Pipfile.lock files. -> Return a PythonPackage built from aPython Pipfile.lock file at `location`.', 'comment_created': datetime.datetime(2020, 7, 21, 13, 50, 49, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 458112644, 'comment_body': 'Return a package built from Python requirements.txt files. -> Return a PythonPackage built from a Python requirements.txt file at `location`.', 'comment_created': datetime.datetime(2020, 7, 21, 13, 51, 24, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 458112951, 'comment_body': ""`'r'` mode is the default, no need to mention it."", 'comment_created': datetime.datetime(2020, 7, 21, 13, 51, 47, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 458144609, 'comment_body': 'Do you know what is this sha256 about? A download archive? the original Pipfile?', 'comment_created': datetime.datetime(2020, 7, 21, 14, 33, 12, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 458146787, 'comment_body': 'Do you think we should add these checksums to the packagedcode model?', 'comment_created': datetime.datetime(2020, 7, 21, 14, 36, 8, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 458227235, 'comment_body': '@pombredanne This was originally brought up by me. It the the sha256 of the original pipfile (I think). Since it was in the data, I suggested we should collect it. We may not want to do this, as it is slightly confusing. Also, I am unsure if this particular hash will be present in most pipfiles. ', 'comment_created': datetime.datetime(2020, 7, 21, 16, 24, 23, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 458227242, 'comment_body': '@pombredanne This was originally brought up by me. It the the sha256 of the original pipfile (I think). Since it was in the data, I suggested we should collect it. We may not want to do this, as it is slightly confusing. Also, I am unsure if this particular hash will be present in most pipfiles. ', 'comment_created': datetime.datetime(2020, 7, 21, 16, 24, 23, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 458340344, 'comment_body': '@pombredanne The sha256 which we are collecting in this packagedcode is of original pipfile. So I think we should detect this and add this in sha256 :)', 'comment_created': datetime.datetime(2020, 7, 21, 19, 35, 51, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 458342496, 'comment_body': ""@pombredanne The checksums for which you talking about is of dependencies and I know only little bit about checksums. I think if we don't add sha256 in our packagedcode model that will also be good."", 'comment_created': datetime.datetime(2020, 7, 21, 19, 40, 11, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 458832366, 'comment_body': ':+1: ', 'comment_created': datetime.datetime(2020, 7, 22, 14, 24, 59, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 458832446, 'comment_body': ':+1: ', 'comment_created': datetime.datetime(2020, 7, 22, 14, 25, 5, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 458832538, 'comment_body': ':+1: ', 'comment_created': datetime.datetime(2020, 7, 22, 14, 25, 11, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 458833297, 'comment_body': 'Maybe If we need to collect these, we can create a new ticket for this. :)', 'comment_created': datetime.datetime(2020, 7, 22, 14, 26, 10, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 458840154, 'comment_body': 'Did this by mistake. I have fixed this :)', 'comment_created': datetime.datetime(2020, 7, 22, 14, 35, 18, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 459072491, 'comment_body': 'ok, please enter a ticket to revisit this. I am not sure we can do much of anything with this as this is not the sha256 of some package archive of sorts?', 'comment_created': datetime.datetime(2020, 7, 22, 20, 45, 39, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}]","[{'commit_sha': '3e88235a43f4121d6b3d5cd5214952a26a60ef95', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e365027bc455ae0467c4316b2f44cb01635789f', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '206ca1d810e06b36eca2f3d47de493926975f66b', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '837ab1bfc87a505c3e3c2f28a237d3239388845e', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd330ab304b1169226580fede0cc41122046edb35', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e01e343b7c73bda90f59db3f29e30f4dfbc603a4', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}]",Rohit Potter,34352567,rohitpotter12@gmail.com,User,,63,,22,109
456691984,detect vcs url in go.mod parser,"Signed-off-by: rpotter12 <rohitpotter12@gmail.com>

<!-- Delete Template sections if unneccesary -->
<!-- Add issue number here (We encourage you to create the Issue First) -->
<!-- You can also link the issue in Commit Messages -->

Fixes #2121

<!--
Make sure these boxes are checked before your pull request (PR) is ready to be reviewed and merged. Thanks!
* [x] - Checked Box
* [ ] - Unchecked Box
-->

### Tasks

* [x] Reviewed [contribution guidelines](https://github.com/nexB/scancode-toolkit/blob/develop/CONTRIBUTING.rst)
* [x] PR is descriptively titled üìë and links the original issue above üîó
* [x] Tests pass -- look for a green checkbox ‚úîÔ∏è a few minutes after opening your PR
  Run [tests](https://scancode-toolkit.readthedocs.io/en/latest/contribute/contrib_dev.html#running-tests) locally to check for errors. 
* [x] Commits are in uniquely-named feature branch and has no merge conflicts üìÅ

<!--
We're happy to help you get this ready -- don't be afraid to ask for help, and **don't be discouraged**
if your tests fail at first!
If tests do fail, click on the red `X` to learn why by reading the logs.
Thanks!
-->

<!-- Don't forget to Signoff -->
",True,2132,https://api.github.com/repos/aboutcode-org/scancode-toolkit/pulls/2132,https://github.com/aboutcode-org/scancode-toolkit/pull/2132,closed,7,15,6,2,0,0,0,0,[],2020-07-26 02:28:00+00:00,2020-07-26 09:39:01+00:00,25861.0,7:11:01,[],"[{'commit_sha': 'ffe34487f7da697908c92181742fa81a8e9b3fd1', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0793c276b681124eb0da6576547099bb04162623', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}]",Rohit Potter,34352567,rohitpotter12@gmail.com,User,,63,,22,109
456764786,Add supoort for go.sum dependency lock files #2080,"<!-- Delete Template sections if unneccesary -->
<!-- Add issue number here (We encourage you to create the Issue First) -->
<!-- You can also link the issue in Commit Messages -->

Fixes #2080 

<!--
Make sure these boxes are checked before your pull request (PR) is ready to be reviewed and merged. Thanks!
* [x] - Checked Box
* [ ] - Unchecked Box
-->

### Tasks

* [x] Reviewed [contribution guidelines](https://github.com/nexB/scancode-toolkit/blob/develop/CONTRIBUTING.rst)
* [x] PR is descriptively titled üìë and links the original issue above üîó
* [x] Tests pass -- look for a green checkbox ‚úîÔ∏è a few minutes after opening your PR
  Run [tests](https://scancode-toolkit.readthedocs.io/en/latest/contribute/contrib_dev.html#running-tests) locally to check for errors. 
* [x] Commits are in uniquely-named feature branch and has no merge conflicts üìÅ

<!--
We're happy to help you get this ready -- don't be afraid to ask for help, and **don't be discouraged**
if your tests fail at first!
If tests do fail, click on the red `X` to learn why by reading the logs.
Thanks!
-->

<!-- Don't forget to Signoff -->
",True,2133,https://api.github.com/repos/aboutcode-org/scancode-toolkit/pulls/2133,https://github.com/aboutcode-org/scancode-toolkit/pull/2133,closed,533,40,25,12,3,56,0,0,[],2020-07-26 15:23:47+00:00,2020-07-31 19:45:54+00:00,447727.0,"5 days, 4:22:07","[{'comment_id': 460572308, 'comment_body': ""I guess we can remove the date entirely from copyrights... otherwise it's 2020!"", 'comment_created': datetime.datetime(2020, 7, 26, 20, 53, 54, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 460572441, 'comment_body': 'Can you add a comment with an example for each type?', 'comment_created': datetime.datetime(2020, 7, 26, 20, 55, 4, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 460572740, 'comment_body': 'Why append a tuple vs. yielding it? Also your type 1 and type2 are rather different... (and/or redundant?) why not keep track of which is which? ', 'comment_created': datetime.datetime(2020, 7, 26, 20, 58, 34, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 460572833, 'comment_body': 'What do you gain from the _obj suffix?', 'comment_created': datetime.datetime(2020, 7, 26, 20, 59, 22, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 460572891, 'comment_body': 'May be you can wrap this long line? and below too?', 'comment_created': datetime.datetime(2020, 7, 26, 21, 0, 7, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 460573185, 'comment_body': 'Also why not using returning an instance of self (which could have all the fields for ns, name, version and checksum and make the `def parse_gosum(self, location):` function a classmethod factory `def from_gosum(cls, location):`?\r\nThat would be more explicit IMHO than carrying around plain tuples of ""gosum_data""... and ` build_gosum_package()` could then accept instead a Gosum object?', 'comment_created': datetime.datetime(2020, 7, 26, 21, 3, 21, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 460573229, 'comment_body': '> Return a Package object from a go.mod file or None.\r\n\r\nThat looks like copied from go.mod', 'comment_created': datetime.datetime(2020, 7, 26, 21, 3, 57, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 460573318, 'comment_body': 'Are you sure?', 'comment_created': datetime.datetime(2020, 7, 26, 21, 4, 36, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 460573396, 'comment_body': 'I though that the go.sum entire purpose be to store fully resolved deps?', 'comment_created': datetime.datetime(2020, 7, 26, 21, 5, 16, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 460576737, 'comment_body': 'elif may be?', 'comment_created': datetime.datetime(2020, 7, 26, 21, 40, 23, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 460576833, 'comment_body': 'Also when do you return None?', 'comment_created': datetime.datetime(2020, 7, 26, 21, 41, 33, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 460625974, 'comment_body': ""> Why append a tuple vs. yielding it?\r\n\r\n@pombredanne we didn't append any tuple here. We have created a list of group after parsing from regex and append that in `gosum_data`"", 'comment_created': datetime.datetime(2020, 7, 27, 3, 18, 7, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 460626303, 'comment_body': 'Nothing much. I have just given a name for this :)', 'comment_created': datetime.datetime(2020, 7, 27, 3, 19, 46, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 460626424, 'comment_body': 'Sure, I will add this in some time :)', 'comment_created': datetime.datetime(2020, 7, 27, 3, 20, 9, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 460626595, 'comment_body': ':+1: ', 'comment_created': datetime.datetime(2020, 7, 27, 3, 21, 4, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 460626813, 'comment_body': 'Please ignore this for now. I have just created a simple initial file to get review why it is not working :)', 'comment_created': datetime.datetime(2020, 7, 27, 3, 22, 11, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 460626863, 'comment_body': 'sure :+1: ', 'comment_created': datetime.datetime(2020, 7, 27, 3, 22, 30, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 460626998, 'comment_body': 'Please ignore this for now. I have just created a simple initial file to get review why it is not working :)', 'comment_created': datetime.datetime(2020, 7, 27, 3, 23, 19, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 460627033, 'comment_body': 'Please ignore this for now. I have just created a simple initial file to get review why it is not working :)', 'comment_created': datetime.datetime(2020, 7, 27, 3, 23, 30, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 460627090, 'comment_body': 'Please ignore this for now. I have just created a simple initial file to get review why it is not working :)', 'comment_created': datetime.datetime(2020, 7, 27, 3, 23, 45, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 460696126, 'comment_body': 'How would you handle the dupes here, since they obviously about one and the same?\r\nAnd also what to do about the checksums?', 'comment_created': datetime.datetime(2020, 7, 27, 7, 28, 12, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 460703014, 'comment_body': '@pombredanne \r\n> How would you handle the dupes here, since they obviously about one and the same?\r\n\r\nDo we really need to handle dupes here? I think checksums are different so can we can add them differently.\r\n\r\n>And also what to do about the checksums?\r\n\r\nI was thinking that we should add checksums option in `DependentPackage` in `models.py` :)', 'comment_created': datetime.datetime(2020, 7, 27, 7, 41, 57, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 460827584, 'comment_body': 'Why not make this line `gomod_data = GoMod().parse_gomod(location)`? This would keep the code consistent with the lines below.', 'comment_created': datetime.datetime(2020, 7, 27, 11, 34, 58, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 460837080, 'comment_body': 'I thought we change in another PR but we can do this in this PR too :)', 'comment_created': datetime.datetime(2020, 7, 27, 11, 55, 3, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 460845733, 'comment_body': '@majurg I have updated my PR please review it again :)', 'comment_created': datetime.datetime(2020, 7, 27, 12, 12, 56, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 462128788, 'comment_body': 'This dangling `All rights reserved.` may be a mistake?', 'comment_created': datetime.datetime(2020, 7, 29, 8, 28, 22, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 462358354, 'comment_body': 'What is this doing?', 'comment_created': datetime.datetime(2020, 7, 29, 14, 48, 6, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 462358386, 'comment_body': 'What I meant earlier with a class method is for it to be a factory to return GoSum objects that would have actual real fields such as:\r\n```\r\n@attr.s()\r\nclass GoSum(object):\r\n    namespace = attr.ib(default=None)\r\n    name = attr.ib(default=None)\r\n    version = attr.ib(default=None)\r\n```\r\nand not return a list of tuples', 'comment_created': datetime.datetime(2020, 7, 29, 14, 48, 8, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 462979618, 'comment_body': ""@pombredanne currently my go.sum parser return list of list which contain namespace, name, version in order like:\r\nif this is the go.sum file:\r\n```\r\ngithub.com/BurntSushi/toml v0.3.1 h1:WXkYYl6Yr3qBf1K79EBnL4mak0OimBfB0XUf9Vl28OQ=\r\ngithub.com/BurntSushi/toml v0.3.1/go.mod h1:xHWCNGjB5oqiDr8zfno3MHue2Ht5sIBksp03qcyfWMU=\r\ngithub.com/cznic/golex v0.0.0-20181122101858-9c343928389c h1:G8zTsaqyVfIHpgMFcGgdbhHSFhlNc77rAKkhVbQ9kQg=\r\ngithub.com/cznic/golex v0.0.0-20181122101858-9c343928389c/go.mod h1:+bmmJDNmKlhWNG+gwWCkaBoTy39Fs+bzRxVBzoTQbIc=\r\n```\r\nthen the return value will be `[['github.com/BurntSushi', 'toml', 'v0.3.1'], ['github.com/cznic', 'golex', 'v0.0.0-20181122101858-9c343928389c']]`\r\n\r\nYou told me to use classmethod factory, so what output format you want from classmethod factory?? plz give a example"", 'comment_created': datetime.datetime(2020, 7, 30, 13, 3, 17, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 462981433, 'comment_body': '@pombredanne It was handling dupes. This removes the duplicates form the list of lists\r\n', 'comment_created': datetime.datetime(2020, 7, 30, 13, 6, 24, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 463150776, 'comment_body': 'I was suggesting to return a list of Gosum objects... I find it always better and easier to read and understand when the code uses objects with named attributes rather than to use nested lists.\r\n\r\nNB: I pushed a small doc header to your branch', 'comment_created': datetime.datetime(2020, 7, 30, 17, 17, 58, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 463152660, 'comment_body': 'OK, may you need to find a way to do this in a less clever, but easier to read and understand way? Or at the minimum add some explanatory comment?', 'comment_created': datetime.datetime(2020, 7, 30, 17, 21, 7, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 463153180, 'comment_body': 'I am not sure that would work: 1. this is very specific to Go and 2. is the checksum really instead a resolved version for a Go module?', 'comment_created': datetime.datetime(2020, 7, 30, 17, 21, 58, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 463153851, 'comment_body': 'Another way to think of this go.sums checksums could be to add a qualifier to the Purl... with key to be determined.', 'comment_created': datetime.datetime(2020, 7, 30, 17, 23, 7, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 463412733, 'comment_body': '@pombredanne I have updated my PR. I think I have done changes according to you but I am not sure fully. Please review the PR again :)', 'comment_created': datetime.datetime(2020, 7, 31, 5, 30, 54, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 463413421, 'comment_body': 'If everything is looking good in this PR, we can see for checksums in another issue.', 'comment_created': datetime.datetime(2020, 7, 31, 5, 33, 50, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 463530114, 'comment_body': 'Just call this `gosums`: there is no need for a `_data`  suffix and the plural tells that this is some collection', 'comment_created': datetime.datetime(2020, 7, 31, 10, 22, 3, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 463530467, 'comment_body': ""that's great... but please use named keyword args and not positional args. ... more or less like this:\r\n```Python\r\n        gosum = GoSum(\r\n            namespace=parsed_dep.group('namespace').strip(),\r\n            name=parsed_dep.group('name').strip(),\r\n            version=parsed_dep.group('version').strip(),\r\n        )\r\n```"", 'comment_created': datetime.datetime(2020, 7, 31, 10, 22, 46, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 463583634, 'comment_body': ':+1: ', 'comment_created': datetime.datetime(2020, 7, 31, 12, 34, 17, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 463583888, 'comment_body': 'Okay...I have updated my PR', 'comment_created': datetime.datetime(2020, 7, 31, 12, 34, 54, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 463644090, 'comment_body': 'This method is not needed when you use attrs... it will be automatically created', 'comment_created': datetime.datetime(2020, 7, 31, 14, 28, 4, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 463645552, 'comment_body': 'call this `gosums`', 'comment_created': datetime.datetime(2020, 7, 31, 14, 30, 44, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 463646188, 'comment_body': 'Avoid using generic variable names like ""obj"" when possible... here we have a `Gosum` instance, so call it `gosum` ', 'comment_created': datetime.datetime(2020, 7, 31, 14, 31, 50, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 463648421, 'comment_body': ""What about adding this method to Gosum?\r\n```Python\r\nclass Gosum(...):\r\n    ....\r\n    @property\r\n    def purl(self):\r\n        return PackageURL(\r\n                    type='golang',\r\n                    namespace=self.namespace,\r\n                    name=self.name,\r\n                    version=self.version\r\n                ).to_string()\r\n```\r\nthen your code becomes:\r\n```Python\r\nmodels.DependentPackage(\r\n    purl=gosum.purl, \r\n                ....\r\n```\r\n"", 'comment_created': datetime.datetime(2020, 7, 31, 14, 35, 42, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 463648821, 'comment_body': 'OK, please enter a ticket for that part then.', 'comment_created': datetime.datetime(2020, 7, 31, 14, 36, 21, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 463649159, 'comment_body': 'I think you should be null in this case.', 'comment_created': datetime.datetime(2020, 7, 31, 14, 36, 56, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 463649363, 'comment_body': 'Same as above... this should be None', 'comment_created': datetime.datetime(2020, 7, 31, 14, 37, 18, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 463650167, 'comment_body': 'Please avoid `_data` suffix here, it does not bring anything to the reader IMHO ', 'comment_created': datetime.datetime(2020, 7, 31, 14, 38, 41, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 463650425, 'comment_body': 'Same as above avoid bland suffix that are not useful such as `_objs`', 'comment_created': datetime.datetime(2020, 7, 31, 14, 39, 8, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 463689542, 'comment_body': ':+1: ', 'comment_created': datetime.datetime(2020, 7, 31, 15, 48, 36, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 463690218, 'comment_body': ':+1: ', 'comment_created': datetime.datetime(2020, 7, 31, 15, 49, 52, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 463697464, 'comment_body': ':+1: ', 'comment_created': datetime.datetime(2020, 7, 31, 16, 3, 29, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 463698108, 'comment_body': ""Sorry for adding this. I'm new to attr module. :)"", 'comment_created': datetime.datetime(2020, 7, 31, 16, 4, 54, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 463713339, 'comment_body': '```suggestion\r\n    Return a list of GoSum from parsing the go.sum file at `location`.\r\n```', 'comment_created': datetime.datetime(2020, 7, 31, 16, 35, 57, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 463713525, 'comment_body': '```suggestion\r\nThis module handles go.sum files from Go.\r\n```', 'comment_created': datetime.datetime(2020, 7, 31, 16, 36, 21, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 463714207, 'comment_body': '```suggestion\r\n```\r\nreturning None is not needed here', 'comment_created': datetime.datetime(2020, 7, 31, 16, 37, 47, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}]","[{'commit_sha': 'f31923e0d930c78764c21effafc29286cafdfd6e', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0125dfff8c1e0cf646c90c4d4a91b64f0698972', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '292d65d52d219bd434cd8f8deb980d4a3257e617', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c183c5688513bd6ab24a3937e54b8f9c60a17e5', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53e37c81a97d4e439322454fc9d3e4afb72b49fb', 'committer_username': 'pombredanne', 'committer_name': 'Philippe Ombredanne', 'committer_email': None, 'commit_date': datetime.datetime(2011, 3, 17, 21, 45, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9782f72497ced67dacb829a5bb6226dd4389967', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '421031d88db6764bdf2cc7fe336cbac7b8e1f681', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8055286bc5c00b60d4d1daa66145f942bdb067a1', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '23226cf8c6d5abb9087487811ca268917871aa11', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68605ebf8fb922fe8f6fa5e2c242ece5ef27a557', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f7baa8219bc992fdf7227119b051313d4f55b7d', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb029b9f9b1a39c2c0dd00aa1e345967a005a5e1', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}]",Rohit Potter,34352567,rohitpotter12@gmail.com,User,,63,,22,109
460840650,Merge go.sum and go.mod modules in one module,"<!-- Delete Template sections if unneccesary -->
<!-- Add issue number here (We encourage you to create the Issue First) -->
<!-- You can also link the issue in Commit Messages -->
Signed-off by: Rohit Potter rohitpotter12@gmail.com
'
Fixes #2150

<!--
Make sure these boxes are checked before your pull request (PR) is ready to be reviewed and merged. Thanks!
* [x] - Checked Box
* [ ] - Unchecked Box
-->

### Tasks

* [x] Reviewed [contribution guidelines](https://github.com/nexB/scancode-toolkit/blob/develop/CONTRIBUTING.rst)
* [x] PR is descriptively titled üìë and links the original issue above üîó
* [x] Tests pass -- look for a green checkbox ‚úîÔ∏è a few minutes after opening your PR
  Run [tests](https://scancode-toolkit.readthedocs.io/en/latest/contribute/contrib_dev.html#running-tests) locally to check for errors. 
* [x] Commits are in uniquely-named feature branch and has no merge conflicts üìÅ

<!--
We're happy to help you get this ready -- don't be afraid to ask for help, and **don't be discouraged**
if your tests fail at first!
If tests do fail, click on the red `X` to learn why by reading the logs.
Thanks!
-->

<!-- Don't forget to Signoff -->
",True,2152,https://api.github.com/repos/aboutcode-org/scancode-toolkit/pulls/2152,https://github.com/aboutcode-org/scancode-toolkit/pull/2152,closed,218,290,3,5,1,21,0,0,[],2020-08-01 06:30:55+00:00,2020-08-14 18:06:05+00:00,1164910.0,"13 days, 11:35:10","[{'comment_id': 464630154, 'comment_body': 'And here, gomod does not have version info?', 'comment_created': datetime.datetime(2020, 8, 3, 19, 56, 43, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 464845200, 'comment_body': '@majurg go.mod file does not contains the version of module. We need to find the another way to get the version info.', 'comment_created': datetime.datetime(2020, 8, 4, 7, 10, 42, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 465064850, 'comment_body': 'No problem I just wanted to be sure.', 'comment_created': datetime.datetime(2020, 8, 4, 13, 51, 11, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 468503933, 'comment_body': 'How is this different from purl_gomod? IMHO you will get the same whether or not you provide a version', 'comment_created': datetime.datetime(2020, 8, 11, 11, 15, 21, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 468504029, 'comment_body': 'Why plural name?', 'comment_created': datetime.datetime(2020, 8, 11, 11, 15, 35, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 468504130, 'comment_body': 'Can you provide an example of a value?', 'comment_created': datetime.datetime(2020, 8, 11, 11, 15, 48, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 468505250, 'comment_body': 'Why not use an object instead of a dict?', 'comment_created': datetime.datetime(2020, 8, 11, 11, 18, 6, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 469699183, 'comment_body': 'I was keeping some of the previous format. Now I have updated my PR again. :)', 'comment_created': datetime.datetime(2020, 8, 13, 5, 7, 1, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 469699777, 'comment_body': 'I have provided all the examples in the comments. Please see below in the file. I have provided examples for both types of files.', 'comment_created': datetime.datetime(2020, 8, 13, 5, 9, 18, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 469700480, 'comment_body': 'I was reading https://blog.golang.org/using-go-modules documentation. `Go Modules` was written in that documentation. So I used that name :)', 'comment_created': datetime.datetime(2020, 8, 13, 5, 11, 58, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 469701546, 'comment_body': ""We don't need version number in `purl` of go.mod file because it was mentioned in the go modules that the version number which is written in the go.mod file is the minimum version required. But we need version number for requirements field. So I made it like this."", 'comment_created': datetime.datetime(2020, 8, 13, 5, 16, 18, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 469768824, 'comment_body': 'OK, but your instance still represents a single module object, not many ones?', 'comment_created': datetime.datetime(2020, 8, 13, 8, 1, 33, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 469770186, 'comment_body': 'ok, but if you where to use one function with an argument to `include_version=True` or `False`, you could have a single function and a bit less code?', 'comment_created': datetime.datetime(2020, 8, 13, 8, 4, 8, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 469810849, 'comment_body': 'I added new code. Please check, in that the way you were asking me to do it?', 'comment_created': datetime.datetime(2020, 8, 13, 9, 11, 44, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 469811238, 'comment_body': 'I represents the Single module. I have fixed this.', 'comment_created': datetime.datetime(2020, 8, 13, 9, 12, 20, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 469915084, 'comment_body': 'Why not call that just dep? what does the _obj suffix brings you?', 'comment_created': datetime.datetime(2020, 8, 13, 12, 30, 19, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 469923513, 'comment_body': ""Since the only difference between type 1 and 2 is this... what about that with a few other refinements:\r\n```Python\r\nget_dependency = re.compile(\r\n    r'(?P<namespace>[^\\s]*)'\r\n    r'\\/'\r\n    r'(?P<name>[^\\s]*)'\r\n    r'\\s*'\r\n    r'(?P<version>[^\\s]*)'\r\n    r'\\s*'\r\n    r'(>P:<is_gomod>/go.mod)?\r\n    r'\\s*'\r\n    r'h1:'(?P<checksum>[^\\s]*)'\r\n    r'\\s*'\r\n).match\r\n```\r\nThis may need a few adjustments... but this will also tell you if this is a `go.mod` line (for the checksum, if an when we handle it in the future?)\r\nAnd by ignoring the spaces everywhere in the capture groups the `.strip()` you used below are no longer needed. \r\n"", 'comment_created': datetime.datetime(2020, 8, 13, 12, 45, 16, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 469925685, 'comment_body': ""Is this a possible case? or is this a side effect you treating lines with and without go.mod the same way?\r\nIf the later is true, then using the new proposed regex above and a test such as this may be more explicit. You can also then just yield too, rather than accumulate in a list\r\n```\r\nif parsed_dep.group('is_gomod'):\r\n    continue\r\n```"", 'comment_created': datetime.datetime(2020, 8, 13, 12, 48, 58, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 470206902, 'comment_body': 'Since we are not using checksums in the dependency object, so maximum time duplicate values will be present.', 'comment_created': datetime.datetime(2020, 8, 13, 19, 48, 23, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 470232220, 'comment_body': ""I tried this \r\n```Python\r\nget_dependency = re.compile(\r\n    r'(?P<namespace>[^\\s]*)'\r\n    r'\\/'\r\n    r'(?P<name>[^\\s]*)'\r\n    r'\\s*'\r\n    r'(?P<version>[^\\s]*)'\r\n    r'\\s*'\r\n    r'(>P:<is_gomod>/go.mod)?'\r\n    r'\\s*'\r\n    r'h1:(?P<checksum>[^\\s]*)'\r\n    r'\\s*'\r\n).match\r\n```\r\nbut it was not working. I am suggesting a new change. Maybe this looks good."", 'comment_created': datetime.datetime(2020, 8, 13, 20, 35, 37, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 470233001, 'comment_body': 'I was specifying it more clearly. `dep` also looks good. I have updated my PR. Please review it again.', 'comment_created': datetime.datetime(2020, 8, 13, 20, 37, 9, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}]","[{'commit_sha': 'd5fd50f0e5e194ad710bdb13a26e380aff7b4687', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b58a15fba3fb070c3ec2d82f5085e924438c789', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71e79419625ae90b09c98b251944c7f4e63e9ce7', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '150dc6a9285c12bc1017af1888d5c256719116c1', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd42c09846693863d800b99ee0377b586743c390b', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}]",Rohit Potter,34352567,rohitpotter12@gmail.com,User,,63,,22,109
461772161,Packagedcode to handle Cargo.lock files,"<!-- Delete Template sections if unneccesary -->
<!-- Add issue number here (We encourage you to create the Issue First) -->
<!-- You can also link the issue in Commit Messages -->

Fixes #2084

<!--
Make sure these boxes are checked before your pull request (PR) is ready to be reviewed and merged. Thanks!
* [x] - Checked Box
* [ ] - Unchecked Box
-->

### Tasks

* [x] Reviewed [contribution guidelines](https://github.com/nexB/scancode-toolkit/blob/develop/CONTRIBUTING.rst)
* [x] PR is descriptively titled üìë and links the original issue above üîó
* [x] Tests pass -- look for a green checkbox ‚úîÔ∏è a few minutes after opening your PR
  Run [tests](https://scancode-toolkit.readthedocs.io/en/latest/contribute/contrib_dev.html#running-tests) locally to check for errors. 
* [x] Commits are in uniquely-named feature branch and has no merge conflicts üìÅ

<!--
We're happy to help you get this ready -- don't be afraid to ask for help, and **don't be discouraged**
if your tests fail at first!
If tests do fail, click on the red `X` to learn why by reading the logs.
Thanks!
-->

<!-- Don't forget to Signoff -->
",True,2153,https://api.github.com/repos/aboutcode-org/scancode-toolkit/pulls/2153,https://github.com/aboutcode-org/scancode-toolkit/pull/2153,closed,512,33,24,7,0,16,0,0,[],2020-08-02 07:25:36+00:00,2020-08-12 12:49:03+00:00,883407.0,"10 days, 5:23:27","[{'comment_id': 464643416, 'comment_body': ""I would prefer if we followed this convention:\r\n```\r\nif not self.name:\r\n    return None\r\nreturn '{}/crates/{}'.format()\r\n```\r\nIMO this is easier to read and follow."", 'comment_created': datetime.datetime(2020, 8, 3, 20, 26, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 464844084, 'comment_body': 'Okay. I will change it soon.', 'comment_created': datetime.datetime(2020, 8, 4, 7, 8, 20, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 468506307, 'comment_body': ""What about instead:\r\n```\r\nif self.name:\r\n    return '{}/crates/{}'.format(baseurl, self.name)\r\n```"", 'comment_created': datetime.datetime(2020, 8, 11, 11, 20, 27, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 468506481, 'comment_body': 'Same as above...', 'comment_created': datetime.datetime(2020, 8, 11, 11, 20, 50, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 468506519, 'comment_body': 'Ditto', 'comment_created': datetime.datetime(2020, 8, 11, 11, 20, 57, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 468508929, 'comment_body': ""What about this instead?\r\n```\r\nhandlers = {'cargo.toml': build_cargo_toml_package, 'cargo.lock': build_cargo_lock_package}\r\nfilename = filetype.is_file(location) and fileutils.file_name(location).lower()\r\nhandler = handlers.get(filename)\r\nif handler:\r\n    return handler(toml.load(location, _dict=OrderedDict))\r\n```"", 'comment_created': datetime.datetime(2020, 8, 11, 11, 25, 46, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 468510184, 'comment_body': 'is this a mapping or a list?', 'comment_created': datetime.datetime(2020, 8, 11, 11, 28, 15, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 468786265, 'comment_body': ""Ah...It's a list. I will change it soon."", 'comment_created': datetime.datetime(2020, 8, 11, 18, 39, 45, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 468786461, 'comment_body': 'This also looks good. I add this code.', 'comment_created': datetime.datetime(2020, 8, 11, 18, 40, 4, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 468790441, 'comment_body': 'This is also good. Both types are meaningful. We can use anything.', 'comment_created': datetime.datetime(2020, 8, 11, 18, 44, 43, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 468790675, 'comment_body': 'ditto', 'comment_created': datetime.datetime(2020, 8, 11, 18, 44, 57, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 468790803, 'comment_body': 'ditto', 'comment_created': datetime.datetime(2020, 8, 11, 18, 45, 4, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 468871918, 'comment_body': 'MO is that positive tests (rather than a negative with `not`)  and avoiding returning None which is the default looks better, and is less code.', 'comment_created': datetime.datetime(2020, 8, 11, 21, 21, 12, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 468872661, 'comment_body': 'You could even use this pythonic construct:\r\n```\r\nreturn handler and handler(toml.load(location, _dict=OrderedDict))\r\n```', 'comment_created': datetime.datetime(2020, 8, 11, 21, 22, 49, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 468974913, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 8, 12, 2, 52, 31, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 469233428, 'comment_body': 'I wonder if we are not missing out on something by skipping the `source` and `checksum`. Can you enter a follow up ticket to revisit this later? We might want to add some new fields to the `DependentPackage` for that as these look on the surface as being quite similar to what we have in a go.mod and go.sum? Or we may want to keep these as qualifiers? \r\nAnd thinking of it... there are also cases in Python and Ruby and npm where we get deps fetched from git repos', 'comment_created': datetime.datetime(2020, 8, 12, 12, 48, 40, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}]","[{'commit_sha': '60a137ffd08473fd4a8e674d3d39c1ec8eac527c', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '13ba5df50ba200c7eb2011f2315a030a38ecf852', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca22813c65157e310b92558939cbec4e019f6812', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7d9ea8b33d1fb1f998236fbecb1c1f0490192fe', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7cd3cae03ca3c0cb67f92ef2a0eecd6053ac30d9', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0bed9afdb691487c55f3ceb86e4e79677a1d6b1', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de10003774d8f5fb59ce14218493ce8bbe574c70', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}]",Rohit Potter,34352567,rohitpotter12@gmail.com,User,,63,,22,109
465108474,Packagedcode to handle opam files,"Signed-off-by: rpotter12 <rohitpotter12@gmail.com>

<!-- Delete Template sections if unneccesary -->
<!-- Add issue number here (We encourage you to create the Issue First) -->
<!-- You can also link the issue in Commit Messages -->

Fixes #2083 

<!--
Make sure these boxes are checked before your pull request (PR) is ready to be reviewed and merged. Thanks!
* [x] - Checked Box
* [ ] - Unchecked Box
-->

### Tasks

* [x] Reviewed [contribution guidelines](https://github.com/nexB/scancode-toolkit/blob/develop/CONTRIBUTING.rst)
* [x] PR is descriptively titled üìë and links the original issue above üîó
* [x] Tests pass -- look for a green checkbox ‚úîÔ∏è a few minutes after opening your PR
  Run [tests](https://scancode-toolkit.readthedocs.io/en/latest/contribute/contrib_dev.html#running-tests) locally to check for errors. 
* [x] Commits are in uniquely-named feature branch and has no merge conflicts üìÅ

<!--
We're happy to help you get this ready -- don't be afraid to ask for help, and **don't be discouraged**
if your tests fail at first!
If tests do fail, click on the red `X` to learn why by reading the logs.
Thanks!
-->

<!-- Don't forget to Signoff -->
",True,2156,https://api.github.com/repos/aboutcode-org/scancode-toolkit/pulls/2156,https://github.com/aboutcode-org/scancode-toolkit/pull/2156,closed,1849,0,26,19,0,52,0,0,[],2020-08-09 05:13:26+00:00,2020-08-18 20:20:31+00:00,832025.0,"9 days, 15:07:05","[{'comment_id': 468266855, 'comment_body': 'I think this line is redundant and can be removed.', 'comment_created': datetime.datetime(2020, 8, 11, 1, 0, 19, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 468431396, 'comment_body': 'Agreed', 'comment_created': datetime.datetime(2020, 8, 11, 8, 58, 57, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 468432152, 'comment_body': 'What is this file supposed to be?', 'comment_created': datetime.datetime(2020, 8, 11, 9, 0, 14, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 468433126, 'comment_body': 'Please give examples on what this looks like in comments, so we can understand what and why the  code is this way ', 'comment_created': datetime.datetime(2020, 8, 11, 9, 1, 53, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 468433179, 'comment_body': 'Please give examples on what this looks like in comments, so we can understand what and why the  code is this way. Do that everywhere, not only here.', 'comment_created': datetime.datetime(2020, 8, 11, 9, 1, 58, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 468443427, 'comment_body': 'This looks like a bit like YAML... have you tries to parse it as YAML?', 'comment_created': datetime.datetime(2020, 8, 11, 9, 19, 59, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 469213575, 'comment_body': 'I tried to parse it as YAML but I was not able to get success.', 'comment_created': datetime.datetime(2020, 8, 12, 12, 16, 35, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 469215127, 'comment_body': ':+1:', 'comment_created': datetime.datetime(2020, 8, 12, 12, 19, 36, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 470414872, 'comment_body': 'Please review it again. I have added examples in comments.', 'comment_created': datetime.datetime(2020, 8, 14, 5, 17, 44, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 470848389, 'comment_body': 'My point was to explain a bit what the file at `location` should be in your docstring.', 'comment_created': datetime.datetime(2020, 8, 14, 20, 22, 29, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 470861500, 'comment_body': 'I am not sure email is a role?... `maintainer` is the role there.', 'comment_created': datetime.datetime(2020, 8, 14, 20, 57, 4, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 470861750, 'comment_body': 'ok, fair enough... it looks a lot like RFC822 too though.\r\nI just `replace(\']\', \' ])` to add a space to closing brackets it does parse a first bunch decently IMHO?\r\n```\r\n>>> f=""""""opam-version: ""2.0""\r\n... version: ""4.11.0+trunk""\r\n... synopsis: ""OCaml development version""\r\n... depends: [\r\n...   ""ocaml"" {= ""4.11.0"" & post}\r\n...   ""base-unix"" {post}\r\n...   ""base-bigarray"" {post}\r\n...   ""base-threads"" {post}\r\n...  ]\r\n... conflict-class: ""ocaml-core-compiler""\r\n... flags: compiler\r\n... setenv: CAML_LD_LIBRARY_PATH = ""%{lib}%/stublibs""\r\n... build: [\r\n...   [""./configure"" ""--prefix=%{prefix}%""]\r\n...   [make ""-j%{jobs}%""]\r\n...  ]\r\n... install: [make ""install""]\r\n... maintainer: ""caml-list@inria.fr""\r\n... homepage: ""https://github.com/ocaml/ocaml/""\r\n... bug-reports: ""https://github.com/ocaml/ocaml/issues""\r\n... authors: [\r\n...   ""Xavier Leroy""\r\n...   ""Damien Doligez""\r\n...   ""Alain Frisch""\r\n...   ""Jacques Garrigue""\r\n...   ""Didier R√©my""\r\n...   ""J√©r√¥me Vouillon""\r\n...  ] """"""\r\n>>> m=email.message_from_string(f)\r\n>>> list(map(print, m.items()))\r\n(\'opam-version\', \'""2.0""\')\r\n(\'version\', \'""4.11.0+trunk""\')\r\n(\'synopsis\', \'""OCaml development version""\')\r\n(\'depends\', \'[\\n  ""ocaml"" {= ""4.11.0"" & post}\\n  ""base-unix"" {post}\\n  ""base-bigarray"" {post}\\n  ""base-threads"" {post}\\n ]\')\r\n(\'conflict-class\', \'""ocaml-core-compiler""\')\r\n(\'flags\', \'compiler\')\r\n(\'setenv\', \'CAML_LD_LIBRARY_PATH = ""%{lib}%/stublibs""\')\r\n(\'build\', \'[\\n  [""./configure"" ""--prefix=%{prefix}%""]\\n  [make ""-j%{jobs}%""]\\n ]\')\r\n(\'install\', \'[make ""install""]\')\r\n(\'maintainer\', \'""caml-list@inria.fr""\')\r\n(\'homepage\', \'""https://github.com/ocaml/ocaml/""\')\r\n(\'bug-reports\', \'""https://github.com/ocaml/ocaml/issues""\')\r\n(\'authors\', \'[\\n  ""Xavier Leroy""\\n  ""Damien Doligez""\\n  ""Alain Frisch""\\n  ""Jacques Garrigue""\\n  ""Didier R√©my""\\n  ""J√©r√¥me Vouillon""\\n ] \')\r\n[None, None, None, None, None, None, None, None, None, None, None, None, None]\r\n```\r\nBut that\'s minor since you have something already working AND this likely does not handle triple quotes cases but then I am not sure you can parse the triple quotes either?\r\n', 'comment_created': datetime.datetime(2020, 8, 14, 20, 57, 45, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 470863839, 'comment_body': 'I think you are not collecting this import field (which would become the `declared_license`', 'comment_created': datetime.datetime(2020, 8, 14, 21, 2, 51, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 470863973, 'comment_body': 'Are you collecting these as keywords?', 'comment_created': datetime.datetime(2020, 8, 14, 21, 3, 18, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 470864072, 'comment_body': 'Are collecting this one?', 'comment_created': datetime.datetime(2020, 8, 14, 21, 3, 37, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 470864757, 'comment_body': 'Would these be typically binaries?', 'comment_created': datetime.datetime(2020, 8, 14, 21, 5, 20, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 470945694, 'comment_body': 'Yes, we can handle triple quotes too, we just need to add a command like `if \'""""""\' in line: ...`, something like this.', 'comment_created': datetime.datetime(2020, 8, 15, 6, 38, 29, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 470946108, 'comment_body': 'Ohh. I have added `opam data` in docstring', 'comment_created': datetime.datetime(2020, 8, 15, 6, 43, 48, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 470946660, 'comment_body': 'Yeah I saw. I have only written a raw code in first for the approval of the parser. I will make all the changes as suggested in this review.', 'comment_created': datetime.datetime(2020, 8, 15, 6, 50, 26, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 470947272, 'comment_body': 'We have parse everything from the file except the build field. I was getting some failure in license in package. I will look at it again.', 'comment_created': datetime.datetime(2020, 8, 15, 6, 59, 3, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 470947287, 'comment_body': 'We have parse everything from the file except the build field.', 'comment_created': datetime.datetime(2020, 8, 15, 6, 59, 16, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 470947298, 'comment_body': 'We have parse everything from the file except the build field.', 'comment_created': datetime.datetime(2020, 8, 15, 6, 59, 21, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 470947379, 'comment_body': ""Need to look at this. I don't know this."", 'comment_created': datetime.datetime(2020, 8, 15, 7, 0, 15, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 471027724, 'comment_body': 'can you move these down closer to the loop they are processed in?', 'comment_created': datetime.datetime(2020, 8, 15, 19, 45, 45, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 471027829, 'comment_body': 'Do you need or None here? and is it ever possible to have something empty?', 'comment_created': datetime.datetime(2020, 8, 15, 19, 47, 1, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 471027862, 'comment_body': 'is email=None needed? AFAIK this is the default.', 'comment_created': datetime.datetime(2020, 8, 15, 19, 47, 29, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 471027867, 'comment_body': 'is name=None needed? AFAIK this is the default.', 'comment_created': datetime.datetime(2020, 8, 15, 19, 47, 38, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 471027906, 'comment_body': 'Same comment as above wrt ""or None""', 'comment_created': datetime.datetime(2020, 8, 15, 19, 48, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 471028148, 'comment_body': 'I Think the docstring should be something this way:\r\n```\r\nReturn a mapping of package data collected from the opam OCaml package manifest file at `location`.\r\n```\r\nthat was the point I was making... you need to explain the arguments.', 'comment_created': datetime.datetime(2020, 8, 15, 19, 50, 44, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 471028209, 'comment_body': 'Why would you need `, closefd=True` here? This a context manager that will close alright, or is there a reason?', 'comment_created': datetime.datetime(2020, 8, 15, 19, 51, 41, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 471028321, 'comment_body': 'is continue ever needed? \r\nIMHO for now a if/elif/elif/else would be clearer in this case.', 'comment_created': datetime.datetime(2020, 8, 15, 19, 53, 13, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 471028400, 'comment_body': ""It is usually more common to write `key == 'authors'`"", 'comment_created': datetime.datetime(2020, 8, 15, 19, 54, 8, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 471028580, 'comment_body': 'Do you have specific tests for this? and may rather than `get_stripped_data` would it be best called `clean_data`', 'comment_created': datetime.datetime(2020, 8, 15, 19, 56, 22, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 471028651, 'comment_body': 'It may be a case where using a regex.sub may be cleaner', 'comment_created': datetime.datetime(2020, 8, 15, 19, 57, 26, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 471108917, 'comment_body': ':+1:\r\n', 'comment_created': datetime.datetime(2020, 8, 16, 12, 45, 36, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 471110035, 'comment_body': ':+1:', 'comment_created': datetime.datetime(2020, 8, 16, 12, 57, 11, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 471110252, 'comment_body': 'In some opam files, name is not mentioned. I have given some examples in sample test files.', 'comment_created': datetime.datetime(2020, 8, 16, 12, 59, 40, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 471111078, 'comment_body': 'I have added this to make sure that the file will close. There was not any particular reason for this.', 'comment_created': datetime.datetime(2020, 8, 16, 13, 8, 17, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 471112004, 'comment_body': 'Continue was needed because we were splitting value in if statement and that value can not be used another function which is used later. So now I have reordered them and continue is no longer needed.', 'comment_created': datetime.datetime(2020, 8, 16, 13, 17, 46, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 471113005, 'comment_body': ""We haven't made any specific test here. Maybe we don't need any specific test here."", 'comment_created': datetime.datetime(2020, 8, 16, 13, 26, 48, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 471132721, 'comment_body': ""You could write instead `return location.endswith('opam')`"", 'comment_created': datetime.datetime(2020, 8, 16, 16, 38, 46, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 471132878, 'comment_body': '`package_data` is not an opam file IMHO, is it?', 'comment_created': datetime.datetime(2020, 8, 16, 16, 40, 22, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 471133020, 'comment_body': 'having unit tests for each function is always a better idea.', 'comment_created': datetime.datetime(2020, 8, 16, 16, 41, 36, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 471134072, 'comment_body': 'Can you make sure you also handle everything in a repository opam file such as https://github.com/ocaml/opam-repository/blob/master/packages/js_of_ocaml/js_of_ocaml.3.7.0/opam ? in particular:\r\n```\r\nx-commit-hash: ""d50221f1cf19f7637dfca7407762a85dcd420f46""\r\nurl {\r\n  src:\r\n    ""https://github.com/ocsigen/js_of_ocaml/releases/download/3.7.0/js_of_ocaml-3.7.0.tbz""\r\n  checksum: [\r\n    ""sha256=dcf4ffea23d4a2b2709c75bf5c7e2de355897bcfef7081d1569efe41a7638667""\r\n    ""sha512=de3fcd7b2e0a7fdd074a236efa759178888559d28db35d4431a342567b4a068bb6581545bdfca02bacdf23e08499119879d37e71c5b0e860d79252116430160e""\r\n  ]\r\n}\r\n```\r\n\r\nSee also: \r\nhttps://github.com/ocaml/opam-repository/blob/master/packages/ANSITerminal/ANSITerminal.0.8/opam or https://github.com/ocaml/opam-repository/blob/b7d9c9cb5fd12c73d6cf7ca8cf05bf6a4372a8d7/packages/libtorch/libtorch.1.1.0/opam and https://github.com/ocaml/opam-repository/blob/479466a9af45ed428e382c6c13348344463c078b/packages/digestif/digestif.0.7.2/opam#L60', 'comment_created': datetime.datetime(2020, 8, 16, 16, 52, 8, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 471134140, 'comment_body': 'Note the checksums and maintainers variations as well as the download URLs an commit hashes', 'comment_created': datetime.datetime(2020, 8, 16, 16, 52, 39, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 471134329, 'comment_body': 'Would this be a data API url of sorts?\r\nhttps://github.com/ocaml/opam-repository/blob/master/packages/winsvc/winsvc.1.0.0/opam\r\ne.g. https://github.com/ocaml/opam-repository/blob/master/packages/{name}/{name}.{version}/opam ', 'comment_created': datetime.datetime(2020, 8, 16, 16, 54, 32, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 471134543, 'comment_body': 'IMHO this a download URL alright with its checksum, is it?', 'comment_created': datetime.datetime(2020, 8, 16, 16, 56, 13, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 471593119, 'comment_body': 'I have added tests for this now :)', 'comment_created': datetime.datetime(2020, 8, 17, 16, 22, 52, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 471593549, 'comment_body': 'I have changed it.', 'comment_created': datetime.datetime(2020, 8, 17, 16, 23, 37, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 471594533, 'comment_body': 'Ah, I missed these. I have added them now.', 'comment_created': datetime.datetime(2020, 8, 17, 16, 25, 14, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 472309092, 'comment_body': 'What about instead always using both?\r\nthe convention used elsewhere is to combine summary + description in a single text (and avoiding redundancies too).\r\nSee https://github.com/nexB/scancode-toolkit/blob/62fc91d64d59aac202ebe610c7e2ce46ae70b23f/src/packagedcode/rubygems.py#L294\r\nThis could be refined to not include the summary/short desc part the long description already starts with the shorter summary. ', 'comment_created': datetime.datetime(2020, 8, 18, 16, 3, 6, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 472409117, 'comment_body': 'Yes, this will be good idea. :)', 'comment_created': datetime.datetime(2020, 8, 18, 18, 49, 56, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}]","[{'commit_sha': '11cac3dc3744c2c6c2e7064167ffdc6512fbaaad', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99e5400c45c9ae407458b8f27744799e7e502c3b', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c72eded04514fd3f6e8f9a906d6d1519ec3f2f3d', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b8c1843ae95a36328171f94b2f270935497f8ae3', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f14f1c40c2f8936babf2fbd99d732f99585bbb75', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36ddee218cd026e1f60d72ce884d025a13c73c91', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39b63fe79cffe5e27c524ccf5920e82c948e9a6c', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d618f2572f4ef999ed818fc99b9fc3e5d629e15', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f1176b7991412467d2cde0442949e09cc8c4f41', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '77a2e7468986439d915e9110bc144522d9c7f1f7', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6d1f64e5caf6db37313badaf2d5230b1dc36182', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '639bf8d7e27db6c1d387662373b13ad301d65e07', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9421953b00a30c564486376488cc8b906b69da43', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cfd6ee0e7c16fc682e809aff3cfd5862c4355d13', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0dc733e7f95dab6495ed634ea289357524c27efc', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd94f81611f9c0a681094bf82a85c132147367a90', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e19430979694cda7edb81d527ba7744c622ca44f', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e2ca75d90f3e6b4ae576ab58b4f7160859af11db', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e141d5d128abaaf76be96fbc799d08e3a3045550', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}]",Rohit Potter,34352567,rohitpotter12@gmail.com,User,,63,,22,109
436782180,Packagedcode to handle Ruby(.gemspec) and Cocoapods(.podspec),"<!-- Delete Template sections if unneccesary -->
<!-- Add issue number here (We encourage you to create the Issue First) -->
<!-- You can also link the issue in Commit Messages -->

Fixes #2035 
Packedcode to handle Ruby(.gemspec) and Cocoapods(.podspec).

1. Created `spec.py` file which  will extract all the necessary data.
2. Dependencies are extracted by using `gemfileparser`.
In this way we don't need to edit any library code.

<!--
Make sure these boxes are checked before your pull request (PR) is ready to be reviewed and merged. Thanks!
* [x] - Checked Box
* [ ] - Unchecked Box
-->

### Tasks

* [x] Reviewed [contribution guidelines](https://github.com/nexB/scancode-toolkit/blob/develop/CONTRIBUTING.rst)
* [x] PR is descriptively titled üìë and links the original issue above üîó
* [x] Tests pass -- look for a green checkbox ‚úîÔ∏è a few minutes after opening your PR
  Run [tests](https://scancode-toolkit.readthedocs.io/en/latest/contribute/contrib_dev.html#running-tests) locally to check for errors. 
* [x] Commits are in uniquely-named feature branch and has no merge conflicts üìÅ

<!--
We're happy to help you get this ready -- don't be afraid to ask for help, and **don't be discouraged**
if your tests fail at first!
If tests do fail, click on the red `X` to learn why by reading the logs.
Thanks!
-->

<!-- Don't forget to Signoff -->
",True,2075,https://api.github.com/repos/aboutcode-org/scancode-toolkit/pulls/2075,https://github.com/aboutcode-org/scancode-toolkit/pull/2075,closed,2007,440,33,19,5,60,0,0,[],2020-06-18 21:55:12+00:00,2020-09-03 10:30:43+00:00,6611731.0,"76 days, 12:35:31","[{'comment_id': 443119727, 'comment_body': ""Is this really GPL? if so we cannot use it in ScanCode as this not compatible with the Apache license. \r\nAFAIK @balasankarc kindly relicensed it to a choice of MIT or GPL on my request  https://github.com/balasankarc/gemfileparser/issues/4\r\nSo we would likely pick the MIT choice instead. @balasankarc can you make this a tad more explicit in the code comment header?\r\nAlso I wonder if we could instead contribute and further @balasankarc library and use it as a dep rather than forking it here.\r\n\r\n@balasankarc what's your plan for https://github.com/balasankarc/gemfileparser long term? We could take over its maintenance if you like?"", 'comment_created': datetime.datetime(2020, 6, 20, 10, 20, 51, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 443119900, 'comment_body': 'Why removing that test?', 'comment_created': datetime.datetime(2020, 6, 20, 10, 23, 21, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 443119927, 'comment_body': 'Why removing that test too a few other below?', 'comment_created': datetime.datetime(2020, 6, 20, 10, 23, 46, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 443506765, 'comment_body': 'These tests are added again :)\r\n', 'comment_created': datetime.datetime(2020, 6, 22, 11, 57, 59, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 443506937, 'comment_body': 'These tests are added again :)', 'comment_created': datetime.datetime(2020, 6, 22, 11, 58, 16, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 443887102, 'comment_body': 'I agree with @pombredanne.', 'comment_created': datetime.datetime(2020, 6, 22, 23, 58, 22, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 447212710, 'comment_body': '@rpotter12 We want to use `gemfileparser` as a library instead of forking its source code here. ', 'comment_created': datetime.datetime(2020, 6, 29, 19, 48, 17, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 447294261, 'comment_body': ""@majurg we can't use https://github.com/balasankarc/gemfileparser library directly as it can only extract dependencies info only. So we have edited the existing library. I think @pombredanne wants to say that we can fork https://github.com/balasankarc/gemfileparser in @nexB and add our edited code and release a new library version so that we can extract all the data and use it in our library."", 'comment_created': datetime.datetime(2020, 6, 29, 22, 28, 26, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 447317279, 'comment_body': 'For my reference, which lines of code have we added/edited to this gemfileparser source?', 'comment_created': datetime.datetime(2020, 6, 29, 23, 32, 27, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 449888899, 'comment_body': '@pombredanne https://github.com/balasankarc/gemfileparser is in dual license - GPLv3 and MIT. ', 'comment_created': datetime.datetime(2020, 7, 5, 15, 19, 37, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 451826293, 'comment_body': ""As suggested for go.mod, consider this instead here and elsewhere:\r\n`dependencies = gemspec_data.get('dependencies', {}) or {}` and remove `if dependencies:`"", 'comment_created': datetime.datetime(2020, 7, 8, 21, 8, 23, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 451827691, 'comment_body': 'is this a line? or data? or a string?', 'comment_created': datetime.datetime(2020, 7, 8, 21, 11, 13, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 451827983, 'comment_body': ""Could a simpler `line.rpartition('=')` be all you need here and elsewhere?"", 'comment_created': datetime.datetime(2020, 7, 8, 21, 11, 44, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 451830210, 'comment_body': 'What is there is no `<<-DESC` starting on that line?', 'comment_created': datetime.datetime(2020, 7, 8, 21, 16, 29, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 451832323, 'comment_body': 'These were originally lists of values for authors and emails in https://github.com/nexB/scancode-toolkit/blob/157a64701f996676f7b252a514760bc9668c68aa/tests/packagedcode/data/rubygems/gemspec/arel.gemspec#L8\r\nand in https://github.com/nexB/scancode-toolkit/pull/2075/files#diff-f2830f25610f80643082bfc08bb4ca40L9\r\nwhy losing that?', 'comment_created': datetime.datetime(2020, 7, 8, 21, 21, 14, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 451832883, 'comment_body': ':+1: ', 'comment_created': datetime.datetime(2020, 7, 8, 21, 22, 35, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 451833405, 'comment_body': 'Where does `Pod::VERSION` come from?', 'comment_created': datetime.datetime(2020, 7, 8, 21, 23, 49, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 451904252, 'comment_body': 'https://github.com/CocoaPods/CocoaPods/blob/master/cocoapods.gemspec \r\nThey actually used this value in gemspec file.', 'comment_created': datetime.datetime(2020, 7, 9, 0, 57, 13, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 451915225, 'comment_body': 'It is not fixed that number of authors and emails are same. So I convert both emails and authors in string.', 'comment_created': datetime.datetime(2020, 7, 9, 1, 39, 26, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 451917237, 'comment_body': 'This function is for `.podspec` files not for `.gemspec` files. According to the documentation in `.podspec` files, description will be written in this manner but in gemspec file it is not fixed how to write a description.', 'comment_created': datetime.datetime(2020, 7, 9, 1, 46, 31, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 451917507, 'comment_body': 'This will be a line. I will update that in the next changes :)\r\n', 'comment_created': datetime.datetime(2020, 7, 9, 1, 47, 39, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 451919461, 'comment_body': ""In parsing gemspec there is a line\r\n`line = 'spec.summary = %q{The loading cat generator.}'`\r\nTo get desire data of summary we can use\r\n\r\n1. `summary = re.sub(r'/*.*summary.*?=', '', line)` (which I used)\r\n2. `summary = line.rpartition('=')` (you suggested)\r\n3. `summary = line.split('=')`\r\nand many more ways\r\n\r\nSo what should I use??"", 'comment_created': datetime.datetime(2020, 7, 9, 1, 54, 47, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 453175596, 'comment_body': 'there should be a space there around the `>`', 'comment_created': datetime.datetime(2020, 7, 11, 9, 16, 10, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 453175777, 'comment_body': 'If author is a list, create as many Party as we have author.\r\nSame for email: and since we cannot be sure that an author matches an email based on aligned lists, you should create one different Party for each author and each email. ', 'comment_created': datetime.datetime(2020, 7, 11, 9, 18, 16, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 453175804, 'comment_body': 'Do you still handle these cases of author vs. authors?', 'comment_created': datetime.datetime(2020, 7, 11, 9, 18, 50, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 453176148, 'comment_body': 'and what if this is using `<<-DESCRIPTION`? will this work too?', 'comment_created': datetime.datetime(2020, 7, 11, 9, 23, 5, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 453176177, 'comment_body': 'What do you gain from having a class there?', 'comment_created': datetime.datetime(2020, 7, 11, 9, 23, 35, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 453176576, 'comment_body': 'What about \r\n```\r\ndepends = deps.gett(key, []) or []\r\nfor dep in depends:\r\n...\r\n```', 'comment_created': datetime.datetime(2020, 7, 11, 9, 28, 27, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 453176580, 'comment_body': 'why the parens around `(dependency.requirement)` ?', 'comment_created': datetime.datetime(2020, 7, 11, 9, 28, 31, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 453176966, 'comment_body': 'what about chaining the calls instead?\r\nmay be more or less:\r\n```Python\r\nstripped_data = (\r\n    line.strip()\r\n    .replace(""\'"", \'\')\r\n    .replace(\'""\', \'\')\r\n    .replace(\'{\', \'\')\r\n    .replace(\'}\', \'\')\r\n    .replace(\'[\', \'\')\r\n    .replace(\']\', \'\')\r\n    .replace(\'%q\', \'\')\r\n    .strip()\r\n)\r\n```\r\nor a loop of sorts?\r\n```Python\r\nstripped_data = line.strip()\r\nfor strippable in (""\'"",\'""\', \'{\', \'}\', \'[\', \']\', \'%q\',):\r\n    stripped_data = stripped_data.replace(strippable, \'\')\r\n\r\nreturn stripped_data.strip()\r\n```', 'comment_created': datetime.datetime(2020, 7, 11, 9, 33, 6, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 453176991, 'comment_body': 'This should be the first line of the docstring', 'comment_created': datetime.datetime(2020, 7, 11, 9, 33, 31, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 453177080, 'comment_body': 'Do we still capture these and test files below?', 'comment_created': datetime.datetime(2020, 7, 11, 9, 35, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 453177142, 'comment_body': 'Do we capture this too, as there are possible ""java"" values?', 'comment_created': datetime.datetime(2020, 7, 11, 9, 35, 21, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 453177228, 'comment_body': 'As suggested above, create instead as many Party as needed in this case.', 'comment_created': datetime.datetime(2020, 7, 11, 9, 36, 11, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 453177320, 'comment_body': 'I think that in the general case a Gem contains source code, right? may be not for Pods though ', 'comment_created': datetime.datetime(2020, 7, 11, 9, 37, 42, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 453177386, 'comment_body': 'It looks like you are missing capturing these as ""development"" scope.', 'comment_created': datetime.datetime(2020, 7, 11, 9, 38, 26, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 453177590, 'comment_body': 'Why did you change this test file? This is a real one at https://github.com/rubocop-hq/rubocop/blob/5cb29efb62f3ff36cbc9ad75d2c29392737734e2/rubocop.gemspec\r\nWe need to handle it, and not change it to fit the code ;)', 'comment_created': datetime.datetime(2020, 7, 11, 9, 40, 51, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 453177816, 'comment_body': 'You are missing this in homepage_url below', 'comment_created': datetime.datetime(2020, 7, 11, 9, 44, 1, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 453178164, 'comment_body': 'Why expecting a failure there? what is the issue?', 'comment_created': datetime.datetime(2020, 7, 11, 9, 48, 42, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 453181125, 'comment_body': 'I will change this :)', 'comment_created': datetime.datetime(2020, 7, 11, 10, 26, 50, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 453181618, 'comment_body': 'I am following Cocoapods(https://guides.cocoapods.org/syntax/podspec.html#description) documentation. The general way is using `DESC` but using `DESC` will also work for `<<-DESCRIPTION` :)', 'comment_created': datetime.datetime(2020, 7, 11, 10, 33, 53, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 453181932, 'comment_body': 'No not for now', 'comment_created': datetime.datetime(2020, 7, 11, 10, 37, 15, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 453182449, 'comment_body': 'As I have mentioned in comment, `gemfileparser` is extracting for a particular type only. So the dependency which are in the gemspec file should be in our output file but it not extracting beacause `gemfileparser` does not contain the code for extracting.', 'comment_created': datetime.datetime(2020, 7, 11, 10, 43, 28, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 453442513, 'comment_body': 'I am not missing ""development"" scope. I am missing ""add_dependency"" because we fetching dependency from `gemfileparser` and it does contain code to handle these type of dependency. `gemfileparser` can only fetch .add_development_dependency and .add_runtime_dependency and with more limitation in it.', 'comment_created': datetime.datetime(2020, 7, 13, 5, 29, 37, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 453453838, 'comment_body': 'No I am not handling anything like this', 'comment_created': datetime.datetime(2020, 7, 13, 6, 11, 6, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 453993139, 'comment_body': 'Now that we have forked as gemfileparser2, we should leverage this an remove nose. I would rather not add nose at all', 'comment_created': datetime.datetime(2020, 7, 13, 22, 55, 40, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 453993718, 'comment_body': 'If you keep these for another PR later, it could make sense to enter a ticket?', 'comment_created': datetime.datetime(2020, 7, 13, 22, 57, 23, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 453994525, 'comment_body': 'Just curious: is this the genpsec spec to have license always separated by comma? ', 'comment_created': datetime.datetime(2020, 7, 13, 22, 59, 42, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 453995160, 'comment_body': 'But they do exist in the wild, do they? And they were supported and tested before?', 'comment_created': datetime.datetime(2020, 7, 13, 23, 1, 31, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 453995569, 'comment_body': 'Do you get the license_expression from LICENSES_MAPPING?', 'comment_created': datetime.datetime(2020, 7, 13, 23, 2, 50, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 453996525, 'comment_body': ""The benefit of partition is that you have a stable number of items returned so you could write that instead and avoid using a magic index for 2:\r\n```\r\n            _key, _sep, value = line.rpartition('=')\r\n            spec_data['name'] = get_stripped_data(value) \r\n```"", 'comment_created': datetime.datetime(2020, 7, 13, 23, 5, 37, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 453998420, 'comment_body': 'We have authors and emails (plural):\r\nhttps://github.com/search?q=""authors""+extension%3A.gemspec&type=Code\r\nhttps://github.com/search?q=""emails""+extension%3A.gemspec&type=Code', 'comment_created': datetime.datetime(2020, 7, 13, 23, 11, 29, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 454050637, 'comment_body': 'I will modify gemfileparser2 and use that library here and remove these :)', 'comment_created': datetime.datetime(2020, 7, 14, 1, 53, 59, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 454051635, 'comment_body': ""No, I'm not keeping these for another PR. Actually at that time we were using gemfileparser library to get the data and in that library dependencies are fetched which are in a particular format only. \r\nI will use the gemfileparser2 library here and solve this :)"", 'comment_created': datetime.datetime(2020, 7, 14, 1, 57, 18, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 454053500, 'comment_body': 'No, not always separated by the comma. I have used this to make it a list because I was getting the correct license_expression value after doing this. I will look at this again :)', 'comment_created': datetime.datetime(2020, 7, 14, 2, 4, 4, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 454054878, 'comment_body': ""I didn't use any LICENSES_MAPPING to get the license_expression. When I convert declared_license as a list, it gives the correct license_expression."", 'comment_created': datetime.datetime(2020, 7, 14, 2, 8, 59, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 454055417, 'comment_body': 'Thanks, I will change my code according to this :)', 'comment_created': datetime.datetime(2020, 7, 14, 2, 10, 44, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 454057348, 'comment_body': 'We are using a concept that a particular string is present in the line or not. and I think `.author` will work for both `authors` and `author` and similar to the email also. I think we will not have any error by using this. If there will be an error to detect wrong data then we should use regex here to get things perfectly:)\r\n\r\nCan you tell me a case when it will detect wrong???', 'comment_created': datetime.datetime(2020, 7, 14, 2, 17, 44, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 477346852, 'comment_body': ""Could you use instead a `@skipIf(py2, 'Does not pass on Python2)` decorator OR better... may be the code can fixed upstream in gemfileparser?"", 'comment_created': datetime.datetime(2020, 8, 26, 14, 30, 17, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 477374860, 'comment_body': 'I have used @pytest.mark.skipif to skip py2. Please review it again :)', 'comment_created': datetime.datetime(2020, 8, 26, 15, 7, 31, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}]","[{'commit_sha': 'f38f9edcce9702ea43cc49f641b3bea3310a1b57', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f40f585c4016b344f6cdf59387d36f655700bc2', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c59e86155ffef4d9a42d2cd5a59ce0b2a5c65192', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8acc10f446cfbd3cf049a3bd3bdd26bc9347d01', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '77537196831f37f08d5ce0dca3e2c5aa1427e651', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e4594c563f99bb81547c02ebc44e1b303b93271', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd05f223f90608900b1359aa1581ec01cb8e7ebd9', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e17a44d0576eb9d048b8f59d80ccd991539d7ae1', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74b4b8fa18683d4972343185d16e5a99606699f7', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a5a449881a77212163bef05b5751cb6105b8462', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95cccd68857427cda994a00e648ee8ed6e18802e', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '446ddaaac377188b219877aa911e8b5ad727fa51', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70474522012e4af8c9661dbf8053146e6675cae2', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7114cda784b0da8c947ce96f8cf68a5622923ccc', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c2e044de606f53a84e5c098eaac6019b77d00ec0', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c19d2b1facf4e67ecd5832505e9ea69527dab36a', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b0b9d9aa64ee08f45b6f7077f09505a1c2d02ea3', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c107664c8e3e5e37850d522ec8418d390274a6a', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf05a90ff6cc5e5c4c27b6bd154c99503b0f311a', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}]",Rohit Potter,34352567,rohitpotter12@gmail.com,User,,63,,22,109
456611054,Detect all types of dependencies,"Signed-off-by: Rohit Potter rohitpotter12@gmail.com

- handle `.podspec` files too.
- detect all types of dependencies in `gemspec` and `podspec` files.",True,9,https://api.github.com/repos/gemfileparser/gemfileparser/pulls/9,https://github.com/gemfileparser/gemfileparser/pull/9,closed,17,4,2,3,3,8,0,0,[],2020-07-25 12:43:08+00:00,2020-07-26 09:23:21+00:00,74413.0,20:40:13,"[{'comment_id': 460425498, 'comment_body': 'Why do you add this header which is furthermore misleading since the library is now under a choice of MIT or GPL? ', 'comment_created': datetime.datetime(2020, 7, 25, 17, 20, 8, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 460425580, 'comment_body': 'Please leave the formatting with black to a separate PR entirely to avoid any confusion', 'comment_created': datetime.datetime(2020, 7, 25, 17, 21, 20, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 460425683, 'comment_body': 'Can you make that a separate PR?', 'comment_created': datetime.datetime(2020, 7, 25, 17, 22, 22, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 460432094, 'comment_body': 'Sure I will make a new PR for this :)', 'comment_created': datetime.datetime(2020, 7, 25, 18, 39, 11, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 460432203, 'comment_body': 'Sure :)', 'comment_created': datetime.datetime(2020, 7, 25, 18, 40, 26, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 460501366, 'comment_body': 'I know it is tempting to fix formatting here, but keep that for a separate PR that would handle that as well as using black throughout', 'comment_created': datetime.datetime(2020, 7, 26, 9, 8, 33, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 460501733, 'comment_body': ""`path` is IMHO not a happy variable name as it could shadow stdlib imports .. and you further never reuse that afterwards... \r\nSo I suggest either:\r\n1. to use a better name such as `spec_extensions` (note the plural) as in :\r\n` path = ('gemspec', 'podspec', )` (note also the trailing comma that is what makes this a tuple and is more explicit.)\r\n2. or just use directly this `if filepath.endswith(('gemspec', 'podspec',)):`\r\n\r\nFinally since we really care bout extensions, what about adding a leading period as in:\r\n`if filepath.endswith(('.gemspec', '.podspec',)):`\r\n"", 'comment_created': datetime.datetime(2020, 7, 26, 9, 11, 53, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 460502327, 'comment_body': 'Okay :+1:\r\nI will make changes in few minutes :)', 'comment_created': datetime.datetime(2020, 7, 26, 9, 18, 18, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}]","[{'commit_sha': 'b2333dd56829a10f8087fd33ff4789728b07e436', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c2e97f9283ece1817a4a3a360cec25584c610e7', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '537c9c59c7ad9b724ad49b46c6e74368fb93652c', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}]",Rohit Potter,34352567,rohitpotter12@gmail.com,User,,63,,22,109
456725964,Remove runtime dependency on nose,"Signed-off-by: rpotter12 <rohitpotter12@gmail.com>

Fixes: #8",True,11,https://api.github.com/repos/gemfileparser/gemfileparser/pulls/11,https://github.com/gemfileparser/gemfileparser/pull/11,closed,1,1,1,1,0,0,0,0,[],2020-07-26 09:30:20+00:00,2020-07-26 09:37:53+00:00,453.0,0:07:33,[],"[{'commit_sha': 'cec4ff00138af733fef537c14269ff42c0d4b567', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}]",Rohit Potter,34352567,rohitpotter12@gmail.com,User,,63,,22,109
385038804,fixes undetected url,"<!-- Delete Template sections if unneccesary -->
<!-- Add issue number here (We encourage you to create the Issue First) -->
<!-- You can also link the issue in Commit Messages -->

Fixes #1954 

added homepage_url in pypi.py which helps in detecting the url.

<!--
Make sure these boxes are checked before your pull request (PR) is ready to be reviewed and merged. Thanks!
* [x] - Checked Box
* [ ] - Unchecked Box
-->

### Tasks

* [x] Reviewed [contribution guidelines](https://github.com/nexB/scancode-toolkit/blob/develop/CONTRIBUTING.rst)
* [x] PR is descriptively titled üìë and links the original issue above üîó
* [ ] Tests pass -- look for a green checkbox ‚úîÔ∏è a few minutes after opening your PR
  Run [tests](https://scancode-toolkit.readthedocs.io/en/latest/contribute/contrib_dev.html#running-tests) locally to check for errors. 
* [x] Commits are in uniquely-named feature branch and has no merge conflicts üìÅ

<!--
We're happy to help you get this ready -- don't be afraid to ask for help, and **don't be discouraged**
if your tests fail at first!
If tests do fail, click on the red `X` to learn why by reading the logs.
Thanks!
-->

<!-- Don't forget to Signoff -->
",True,1955,https://api.github.com/repos/aboutcode-org/scancode-toolkit/pulls/1955,https://github.com/aboutcode-org/scancode-toolkit/pull/1955,closed,25,23,23,4,5,3,0,0,[],2020-03-06 21:55:48+00:00,2020-06-16 10:28:56+00:00,8771588.0,"101 days, 12:33:08","[{'comment_id': 391934528, 'comment_body': 'No need to update the version in your PR.', 'comment_created': datetime.datetime(2020, 3, 12, 22, 14, 7, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 406077920, 'comment_body': 'Ping ^', 'comment_created': datetime.datetime(2020, 4, 9, 9, 31, 48, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 406078155, 'comment_body': 'Can you add a test for this?', 'comment_created': datetime.datetime(2020, 4, 9, 9, 32, 13, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}]","[{'commit_sha': 'cc507af4b3ee5b5aa6edcb75dcf946b0dc47326e', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20fd994fb31497bf4359704c9f9f000fba85a3c0', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '298409d833cbb31ed2e73d233310a31ff1956e69', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ce7d01efb2f3ca7aa58a1a1de3f9f0e19445159', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}]",Rohit Potter,34352567,rohitpotter12@gmail.com,User,,63,,22,109
385232528,detect download_url in setup.py,"<!-- Delete Template sections if unneccesary -->
<!-- Add issue number here (We encourage you to create the Issue First) -->
<!-- You can also link the issue in Commit Messages -->

Fixes #1959 

- fixed undetected download url
- renamed keywords to classifiers because in keyword classifiers are shown
- added keywords detection

<!--
Make sure these boxes are checked before your pull request (PR) is ready to be reviewed and merged. Thanks!
* [x] - Checked Box
* [ ] - Unchecked Box
-->

### Tasks

* [x] Reviewed [contribution guidelines](https://github.com/nexB/scancode-toolkit/blob/develop/CONTRIBUTING.rst)
* [x] PR is descriptively titled üìë and links the original issue above üîó
* [ ] Tests pass -- look for a green checkbox ‚úîÔ∏è a few minutes after opening your PR
  Run [tests](https://scancode-toolkit.readthedocs.io/en/latest/contribute/contrib_dev.html#running-tests) locally to check for errors. 
* [x] Commits are in uniquely-named feature branch and has no merge conflicts üìÅ

<!--
We're happy to help you get this ready -- don't be afraid to ask for help, and **don't be discouraged**
if your tests fail at first!
If tests do fail, click on the red `X` to learn why by reading the logs.
Thanks!
-->

<!-- Don't forget to Signoff -->
",False,1960,https://api.github.com/repos/aboutcode-org/scancode-toolkit/pulls/1960,https://github.com/aboutcode-org/scancode-toolkit/pull/1960,closed,6,3,2,14,1,5,0,0,[],2020-03-08 06:30:37+00:00,2020-05-09 19:17:17+00:00,5402800.0,"62 days, 12:46:40","[{'comment_id': 390671814, 'comment_body': 'Can you elaborate what you are trying to achieve here? This seems to conflict with the standard Package URL mapping used for classifiers in https://github.com/nexB/scancode-toolkit/pull/1960/files#diff-9feddae6239d49e50571ae6742c91612L223', 'comment_created': datetime.datetime(2020, 3, 10, 23, 38, 20, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 390672120, 'comment_body': 'Is this URL really the URL for an author? Or instead that for the package?', 'comment_created': datetime.datetime(2020, 3, 10, 23, 39, 21, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 390672757, 'comment_body': 'I get your point to use keywords for keywords, but we would also need to keep PyPI classifiers as keywords too. The important thing is that the Package model is shared by all the packages (pypi, maven, npm, etc)... so we cannot treat classifiers specially... just as plain keywords... so IMHO `keywords=other_classifiers+keywords`', 'comment_created': datetime.datetime(2020, 3, 10, 23, 41, 32, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 390672893, 'comment_body': 'Thank but there is no need to bump the version in your PR, so you can leave this out', 'comment_created': datetime.datetime(2020, 3, 10, 23, 42, 1, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 391992839, 'comment_body': 'It is the package url', 'comment_created': datetime.datetime(2020, 3, 13, 2, 3, 41, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}]","[{'commit_sha': '6a7144ef8a2ef611f01b47834969d6e1de20fc26', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc146f66ab20b2529e0fb0b885b5da1616d37b02', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a92d23824283b5f2b18f321e1179983e7c9115a', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '017bad6a128faa5c3c520c850ff2a6e04ad44c2e', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '89499fd0497fede1c4735455ef10466280ed3937', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd53cc6d977f6fb4422c1fef07ce25f4195cad11f', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69df8e3e817c38d81f4d0767f6430d8927599db8', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1bb4a868851d5414ae010e0eed4fe97897c8ba38', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9254cc678d206c65ecd072839b649412a5da65b0', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '43e95a9f56b576aac38cb3bb0ec5d4abfdbc1b0b', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '59ed26cf43dc2fa5ccb94d67191436260d344f46', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e43736dc510f27d32ec2f957c04ed891e968069d', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc12ca0ac8d1897f6c20007e1523a9e624046689', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f73824bab2ade0ba0a2edb5b50245d33eeaca2c', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}]",Rohit Potter,34352567,rohitpotter12@gmail.com,User,,63,,22,109
391335495,Basic Packagedcode module for handling Opam Package Manger,"<!-- Delete Template sections if unneccesary -->
<!-- Add issue number here (We encourage you to create the Issue First) -->
<!-- You can also link the issue in Commit Messages -->

Fixes #1974 

A basic implementation to parse the .opam file and detect information.

<!--
Make sure these boxes are checked before your pull request (PR) is ready to be reviewed and merged. Thanks!
* [x] - Checked Box
* [ ] - Unchecked Box
-->

### Tasks

* [x] Reviewed [contribution guidelines](https://github.com/nexB/scancode-toolkit/blob/develop/CONTRIBUTING.rst)
* [x] PR is descriptively titled üìë and links the original issue above üîó
* [x] Tests pass -- look for a green checkbox ‚úîÔ∏è a few minutes after opening your PR
  Run [tests](https://scancode-toolkit.readthedocs.io/en/latest/contribute/contrib_dev.html#running-tests) locally to check for errors. 
* [x] Commits are in uniquely-named feature branch and has no merge conflicts üìÅ

<!--
We're happy to help you get this ready -- don't be afraid to ask for help, and **don't be discouraged**
if your tests fail at first!
If tests do fail, click on the red `X` to learn why by reading the logs.
Thanks!
-->

<!-- Don't forget to Signoff -->
",False,1981,https://api.github.com/repos/aboutcode-org/scancode-toolkit/pulls/1981,https://github.com/aboutcode-org/scancode-toolkit/pull/1981,closed,554,0,15,9,13,32,0,0,[],2020-03-20 03:41:54+00:00,2020-09-03 11:36:06+00:00,14457252.0,"167 days, 7:54:12","[{'comment_id': 395682357, 'comment_body': 'Please add 2 spaces between the end of each function and the next function definition.', 'comment_created': datetime.datetime(2020, 3, 20, 14, 42, 14, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 395684555, 'comment_body': 'Why are these the only fields we collect? Looking at some of the opam metadata files, there are possibly other important information we can collect and build the package object from.', 'comment_created': datetime.datetime(2020, 3, 20, 14, 45, 33, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 395684691, 'comment_body': 'Why is this commented out?', 'comment_created': datetime.datetime(2020, 3, 20, 14, 45, 45, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 395696271, 'comment_body': 'Sure', 'comment_created': datetime.datetime(2020, 3, 20, 15, 2, 22, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 395698204, 'comment_body': 'In further PR I will add more codes to extract more information. It was the basic implementation to handle .opam file :)', 'comment_created': datetime.datetime(2020, 3, 20, 15, 5, 15, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 395702436, 'comment_body': 'In [model.py](https://github.com/nexB/scancode-toolkit/blob/develop/src/packagedcode/models.py) file, in class Package, there is no variable named maintainer. So in further PR I will variable for all the fields. :)', 'comment_created': datetime.datetime(2020, 3, 20, 15, 11, 34, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 395773125, 'comment_body': 'Add an empty line at eof', 'comment_created': datetime.datetime(2020, 3, 20, 17, 3, 20, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 395775299, 'comment_body': 'Add an empty line at eof', 'comment_created': datetime.datetime(2020, 3, 20, 17, 7, 20, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 395775446, 'comment_body': 'Add an empty line at eof', 'comment_created': datetime.datetime(2020, 3, 20, 17, 7, 36, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 395775588, 'comment_body': 'Add an empty line at eof', 'comment_created': datetime.datetime(2020, 3, 20, 17, 7, 50, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 395775706, 'comment_body': 'Add an empty line at eof', 'comment_created': datetime.datetime(2020, 3, 20, 17, 8, 2, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 395775846, 'comment_body': 'Add an empty line at eof', 'comment_created': datetime.datetime(2020, 3, 20, 17, 8, 18, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 396746655, 'comment_body': 'We normally use _ (underscore) between words in a function, like: `get_version`', 'comment_created': datetime.datetime(2020, 3, 23, 20, 47, 49, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 396746697, 'comment_body': 'We normally use _ (underscore) between words in a function, like: `get_version`', 'comment_created': datetime.datetime(2020, 3, 23, 20, 47, 54, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 396746727, 'comment_body': 'We normally use _ (underscore) between words in a function, like: `get_version`', 'comment_created': datetime.datetime(2020, 3, 23, 20, 47, 58, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 396746965, 'comment_body': 'Also, the_list is not a good argument name. This should be `versions`', 'comment_created': datetime.datetime(2020, 3, 23, 20, 48, 22, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 396836447, 'comment_body': 'As we using file data in the functions I have used `file_data` as the argument name instead of `the_list` :)', 'comment_created': datetime.datetime(2020, 3, 24, 0, 24, 20, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 397939729, 'comment_body': 'Can you check the spacing we use with PEP 8?', 'comment_created': datetime.datetime(2020, 3, 25, 15, 20, 50, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 397940644, 'comment_body': 'Would this be some kind of YAML instead of doing your own custom parsing?', 'comment_created': datetime.datetime(2020, 3, 25, 15, 21, 53, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 397987549, 'comment_body': ""I don't think this would be some kind of YAML. opam file is little different from yaml. I have tested it by saneyaml package. It shows some kind of error in `[` and `]`. I think we have use our custom parsing until we find any particular package for this. :)"", 'comment_created': datetime.datetime(2020, 3, 25, 16, 20, 36, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 399296084, 'comment_body': 'We probably want some docstring here for each of these functions. ', 'comment_created': datetime.datetime(2020, 3, 27, 14, 16, 48, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 399793360, 'comment_body': 'I have added docstring.', 'comment_created': datetime.datetime(2020, 3, 29, 12, 49, 54, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 440752622, 'comment_body': 'Does opam use ""crates? Or may be this is a carry over from Rust?', 'comment_created': datetime.datetime(2020, 6, 16, 10, 35, 42, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 440770183, 'comment_body': 'And what about https://github.com/ocaml/opam-repository/ ?', 'comment_created': datetime.datetime(2020, 6, 16, 11, 9, 35, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 440770309, 'comment_body': 'This cannot be the base prefix URL for a download.', 'comment_created': datetime.datetime(2020, 6, 16, 11, 9, 52, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 440770409, 'comment_body': 'This is NOT the API base URL', 'comment_created': datetime.datetime(2020, 6, 16, 11, 10, 5, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 440771282, 'comment_body': 'What about valid files named `opam` as in https://github.com/ocaml/opam-repository/blob/master/packages/JsOfOCairo/JsOfOCairo.1.0.0/opam ? ', 'comment_created': datetime.datetime(2020, 6, 16, 11, 11, 50, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 440772044, 'comment_body': 'You should reference the OpamPackage class attributes instead', 'comment_created': datetime.datetime(2020, 6, 16, 11, 13, 28, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 440772448, 'comment_body': 'Use OpamPackage and not OpamPackageManager', 'comment_created': datetime.datetime(2020, 6, 16, 11, 14, 14, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 440773034, 'comment_body': '`Pacakge` -> `Package`\r\n\r\nso use something like:\r\n`Return an OpamPackage object built from a `package_data` mapping of Opam data  or None.`', 'comment_created': datetime.datetime(2020, 6, 16, 11, 15, 27, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 440773320, 'comment_body': 'Why removing this? This is rather common? https://github.com/ocaml/opam-repository/blob/master/packages/JsOfOCairo/JsOfOCairo.1.0.0/opam#L2', 'comment_created': datetime.datetime(2020, 6, 16, 11, 16, 1, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 440773477, 'comment_body': 'Use single quotes unless this is a docstring.', 'comment_created': datetime.datetime(2020, 6, 16, 11, 16, 20, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}]","[{'commit_sha': 'c0d97b34d40ab42cbbd64c1ccf339f55719339d8', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '06fab359132f07c85b19ed7f50a08765d7531968', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '158eed2f38ab4d1c2c05843cc4363e647c741330', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd7aadc23feb0d91f99f281357a253251a829b5a8', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1594abe870a395177013905a038d8018061caf28', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '32fc378b0f13504bc4911e3cf5a89ab7c791afa5', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2abe868335ece53c49c3944398ff4d14dda56a9', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9abc7c30b03650cd4cae4a75804dc6840fbe03d6', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '149cc6d958ea89a27020c4616fcb2d1c5e546e35', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}]",Rohit Potter,34352567,rohitpotter12@gmail.com,User,,63,,22,109
465108474,Packagedcode to handle opam files,"Signed-off-by: rpotter12 <rohitpotter12@gmail.com>

<!-- Delete Template sections if unneccesary -->
<!-- Add issue number here (We encourage you to create the Issue First) -->
<!-- You can also link the issue in Commit Messages -->

Fixes #2083 

<!--
Make sure these boxes are checked before your pull request (PR) is ready to be reviewed and merged. Thanks!
* [x] - Checked Box
* [ ] - Unchecked Box
-->

### Tasks

* [x] Reviewed [contribution guidelines](https://github.com/nexB/scancode-toolkit/blob/develop/CONTRIBUTING.rst)
* [x] PR is descriptively titled üìë and links the original issue above üîó
* [x] Tests pass -- look for a green checkbox ‚úîÔ∏è a few minutes after opening your PR
  Run [tests](https://scancode-toolkit.readthedocs.io/en/latest/contribute/contrib_dev.html#running-tests) locally to check for errors. 
* [x] Commits are in uniquely-named feature branch and has no merge conflicts üìÅ

<!--
We're happy to help you get this ready -- don't be afraid to ask for help, and **don't be discouraged**
if your tests fail at first!
If tests do fail, click on the red `X` to learn why by reading the logs.
Thanks!
-->

<!-- Don't forget to Signoff -->
",True,2156,https://api.github.com/repos/aboutcode-org/scancode-toolkit/pulls/2156,https://github.com/aboutcode-org/scancode-toolkit/pull/2156,closed,1849,0,26,19,0,52,0,0,[],2020-08-09 05:13:26+00:00,2020-08-18 20:20:31+00:00,832025.0,"9 days, 15:07:05","[{'comment_id': 468266855, 'comment_body': 'I think this line is redundant and can be removed.', 'comment_created': datetime.datetime(2020, 8, 11, 1, 0, 19, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 468431396, 'comment_body': 'Agreed', 'comment_created': datetime.datetime(2020, 8, 11, 8, 58, 57, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 468432152, 'comment_body': 'What is this file supposed to be?', 'comment_created': datetime.datetime(2020, 8, 11, 9, 0, 14, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 468433126, 'comment_body': 'Please give examples on what this looks like in comments, so we can understand what and why the  code is this way ', 'comment_created': datetime.datetime(2020, 8, 11, 9, 1, 53, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 468433179, 'comment_body': 'Please give examples on what this looks like in comments, so we can understand what and why the  code is this way. Do that everywhere, not only here.', 'comment_created': datetime.datetime(2020, 8, 11, 9, 1, 58, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 468443427, 'comment_body': 'This looks like a bit like YAML... have you tries to parse it as YAML?', 'comment_created': datetime.datetime(2020, 8, 11, 9, 19, 59, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 469213575, 'comment_body': 'I tried to parse it as YAML but I was not able to get success.', 'comment_created': datetime.datetime(2020, 8, 12, 12, 16, 35, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 469215127, 'comment_body': ':+1:', 'comment_created': datetime.datetime(2020, 8, 12, 12, 19, 36, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 470414872, 'comment_body': 'Please review it again. I have added examples in comments.', 'comment_created': datetime.datetime(2020, 8, 14, 5, 17, 44, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 470848389, 'comment_body': 'My point was to explain a bit what the file at `location` should be in your docstring.', 'comment_created': datetime.datetime(2020, 8, 14, 20, 22, 29, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 470861500, 'comment_body': 'I am not sure email is a role?... `maintainer` is the role there.', 'comment_created': datetime.datetime(2020, 8, 14, 20, 57, 4, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 470861750, 'comment_body': 'ok, fair enough... it looks a lot like RFC822 too though.\r\nI just `replace(\']\', \' ])` to add a space to closing brackets it does parse a first bunch decently IMHO?\r\n```\r\n>>> f=""""""opam-version: ""2.0""\r\n... version: ""4.11.0+trunk""\r\n... synopsis: ""OCaml development version""\r\n... depends: [\r\n...   ""ocaml"" {= ""4.11.0"" & post}\r\n...   ""base-unix"" {post}\r\n...   ""base-bigarray"" {post}\r\n...   ""base-threads"" {post}\r\n...  ]\r\n... conflict-class: ""ocaml-core-compiler""\r\n... flags: compiler\r\n... setenv: CAML_LD_LIBRARY_PATH = ""%{lib}%/stublibs""\r\n... build: [\r\n...   [""./configure"" ""--prefix=%{prefix}%""]\r\n...   [make ""-j%{jobs}%""]\r\n...  ]\r\n... install: [make ""install""]\r\n... maintainer: ""caml-list@inria.fr""\r\n... homepage: ""https://github.com/ocaml/ocaml/""\r\n... bug-reports: ""https://github.com/ocaml/ocaml/issues""\r\n... authors: [\r\n...   ""Xavier Leroy""\r\n...   ""Damien Doligez""\r\n...   ""Alain Frisch""\r\n...   ""Jacques Garrigue""\r\n...   ""Didier R√©my""\r\n...   ""J√©r√¥me Vouillon""\r\n...  ] """"""\r\n>>> m=email.message_from_string(f)\r\n>>> list(map(print, m.items()))\r\n(\'opam-version\', \'""2.0""\')\r\n(\'version\', \'""4.11.0+trunk""\')\r\n(\'synopsis\', \'""OCaml development version""\')\r\n(\'depends\', \'[\\n  ""ocaml"" {= ""4.11.0"" & post}\\n  ""base-unix"" {post}\\n  ""base-bigarray"" {post}\\n  ""base-threads"" {post}\\n ]\')\r\n(\'conflict-class\', \'""ocaml-core-compiler""\')\r\n(\'flags\', \'compiler\')\r\n(\'setenv\', \'CAML_LD_LIBRARY_PATH = ""%{lib}%/stublibs""\')\r\n(\'build\', \'[\\n  [""./configure"" ""--prefix=%{prefix}%""]\\n  [make ""-j%{jobs}%""]\\n ]\')\r\n(\'install\', \'[make ""install""]\')\r\n(\'maintainer\', \'""caml-list@inria.fr""\')\r\n(\'homepage\', \'""https://github.com/ocaml/ocaml/""\')\r\n(\'bug-reports\', \'""https://github.com/ocaml/ocaml/issues""\')\r\n(\'authors\', \'[\\n  ""Xavier Leroy""\\n  ""Damien Doligez""\\n  ""Alain Frisch""\\n  ""Jacques Garrigue""\\n  ""Didier R√©my""\\n  ""J√©r√¥me Vouillon""\\n ] \')\r\n[None, None, None, None, None, None, None, None, None, None, None, None, None]\r\n```\r\nBut that\'s minor since you have something already working AND this likely does not handle triple quotes cases but then I am not sure you can parse the triple quotes either?\r\n', 'comment_created': datetime.datetime(2020, 8, 14, 20, 57, 45, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 470863839, 'comment_body': 'I think you are not collecting this import field (which would become the `declared_license`', 'comment_created': datetime.datetime(2020, 8, 14, 21, 2, 51, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 470863973, 'comment_body': 'Are you collecting these as keywords?', 'comment_created': datetime.datetime(2020, 8, 14, 21, 3, 18, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 470864072, 'comment_body': 'Are collecting this one?', 'comment_created': datetime.datetime(2020, 8, 14, 21, 3, 37, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 470864757, 'comment_body': 'Would these be typically binaries?', 'comment_created': datetime.datetime(2020, 8, 14, 21, 5, 20, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 470945694, 'comment_body': 'Yes, we can handle triple quotes too, we just need to add a command like `if \'""""""\' in line: ...`, something like this.', 'comment_created': datetime.datetime(2020, 8, 15, 6, 38, 29, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 470946108, 'comment_body': 'Ohh. I have added `opam data` in docstring', 'comment_created': datetime.datetime(2020, 8, 15, 6, 43, 48, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 470946660, 'comment_body': 'Yeah I saw. I have only written a raw code in first for the approval of the parser. I will make all the changes as suggested in this review.', 'comment_created': datetime.datetime(2020, 8, 15, 6, 50, 26, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 470947272, 'comment_body': 'We have parse everything from the file except the build field. I was getting some failure in license in package. I will look at it again.', 'comment_created': datetime.datetime(2020, 8, 15, 6, 59, 3, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 470947287, 'comment_body': 'We have parse everything from the file except the build field.', 'comment_created': datetime.datetime(2020, 8, 15, 6, 59, 16, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 470947298, 'comment_body': 'We have parse everything from the file except the build field.', 'comment_created': datetime.datetime(2020, 8, 15, 6, 59, 21, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 470947379, 'comment_body': ""Need to look at this. I don't know this."", 'comment_created': datetime.datetime(2020, 8, 15, 7, 0, 15, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 471027724, 'comment_body': 'can you move these down closer to the loop they are processed in?', 'comment_created': datetime.datetime(2020, 8, 15, 19, 45, 45, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 471027829, 'comment_body': 'Do you need or None here? and is it ever possible to have something empty?', 'comment_created': datetime.datetime(2020, 8, 15, 19, 47, 1, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 471027862, 'comment_body': 'is email=None needed? AFAIK this is the default.', 'comment_created': datetime.datetime(2020, 8, 15, 19, 47, 29, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 471027867, 'comment_body': 'is name=None needed? AFAIK this is the default.', 'comment_created': datetime.datetime(2020, 8, 15, 19, 47, 38, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 471027906, 'comment_body': 'Same comment as above wrt ""or None""', 'comment_created': datetime.datetime(2020, 8, 15, 19, 48, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 471028148, 'comment_body': 'I Think the docstring should be something this way:\r\n```\r\nReturn a mapping of package data collected from the opam OCaml package manifest file at `location`.\r\n```\r\nthat was the point I was making... you need to explain the arguments.', 'comment_created': datetime.datetime(2020, 8, 15, 19, 50, 44, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 471028209, 'comment_body': 'Why would you need `, closefd=True` here? This a context manager that will close alright, or is there a reason?', 'comment_created': datetime.datetime(2020, 8, 15, 19, 51, 41, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 471028321, 'comment_body': 'is continue ever needed? \r\nIMHO for now a if/elif/elif/else would be clearer in this case.', 'comment_created': datetime.datetime(2020, 8, 15, 19, 53, 13, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 471028400, 'comment_body': ""It is usually more common to write `key == 'authors'`"", 'comment_created': datetime.datetime(2020, 8, 15, 19, 54, 8, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 471028580, 'comment_body': 'Do you have specific tests for this? and may rather than `get_stripped_data` would it be best called `clean_data`', 'comment_created': datetime.datetime(2020, 8, 15, 19, 56, 22, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 471028651, 'comment_body': 'It may be a case where using a regex.sub may be cleaner', 'comment_created': datetime.datetime(2020, 8, 15, 19, 57, 26, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 471108917, 'comment_body': ':+1:\r\n', 'comment_created': datetime.datetime(2020, 8, 16, 12, 45, 36, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 471110035, 'comment_body': ':+1:', 'comment_created': datetime.datetime(2020, 8, 16, 12, 57, 11, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 471110252, 'comment_body': 'In some opam files, name is not mentioned. I have given some examples in sample test files.', 'comment_created': datetime.datetime(2020, 8, 16, 12, 59, 40, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 471111078, 'comment_body': 'I have added this to make sure that the file will close. There was not any particular reason for this.', 'comment_created': datetime.datetime(2020, 8, 16, 13, 8, 17, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 471112004, 'comment_body': 'Continue was needed because we were splitting value in if statement and that value can not be used another function which is used later. So now I have reordered them and continue is no longer needed.', 'comment_created': datetime.datetime(2020, 8, 16, 13, 17, 46, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 471113005, 'comment_body': ""We haven't made any specific test here. Maybe we don't need any specific test here."", 'comment_created': datetime.datetime(2020, 8, 16, 13, 26, 48, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 471132721, 'comment_body': ""You could write instead `return location.endswith('opam')`"", 'comment_created': datetime.datetime(2020, 8, 16, 16, 38, 46, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 471132878, 'comment_body': '`package_data` is not an opam file IMHO, is it?', 'comment_created': datetime.datetime(2020, 8, 16, 16, 40, 22, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 471133020, 'comment_body': 'having unit tests for each function is always a better idea.', 'comment_created': datetime.datetime(2020, 8, 16, 16, 41, 36, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 471134072, 'comment_body': 'Can you make sure you also handle everything in a repository opam file such as https://github.com/ocaml/opam-repository/blob/master/packages/js_of_ocaml/js_of_ocaml.3.7.0/opam ? in particular:\r\n```\r\nx-commit-hash: ""d50221f1cf19f7637dfca7407762a85dcd420f46""\r\nurl {\r\n  src:\r\n    ""https://github.com/ocsigen/js_of_ocaml/releases/download/3.7.0/js_of_ocaml-3.7.0.tbz""\r\n  checksum: [\r\n    ""sha256=dcf4ffea23d4a2b2709c75bf5c7e2de355897bcfef7081d1569efe41a7638667""\r\n    ""sha512=de3fcd7b2e0a7fdd074a236efa759178888559d28db35d4431a342567b4a068bb6581545bdfca02bacdf23e08499119879d37e71c5b0e860d79252116430160e""\r\n  ]\r\n}\r\n```\r\n\r\nSee also: \r\nhttps://github.com/ocaml/opam-repository/blob/master/packages/ANSITerminal/ANSITerminal.0.8/opam or https://github.com/ocaml/opam-repository/blob/b7d9c9cb5fd12c73d6cf7ca8cf05bf6a4372a8d7/packages/libtorch/libtorch.1.1.0/opam and https://github.com/ocaml/opam-repository/blob/479466a9af45ed428e382c6c13348344463c078b/packages/digestif/digestif.0.7.2/opam#L60', 'comment_created': datetime.datetime(2020, 8, 16, 16, 52, 8, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 471134140, 'comment_body': 'Note the checksums and maintainers variations as well as the download URLs an commit hashes', 'comment_created': datetime.datetime(2020, 8, 16, 16, 52, 39, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 471134329, 'comment_body': 'Would this be a data API url of sorts?\r\nhttps://github.com/ocaml/opam-repository/blob/master/packages/winsvc/winsvc.1.0.0/opam\r\ne.g. https://github.com/ocaml/opam-repository/blob/master/packages/{name}/{name}.{version}/opam ', 'comment_created': datetime.datetime(2020, 8, 16, 16, 54, 32, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 471134543, 'comment_body': 'IMHO this a download URL alright with its checksum, is it?', 'comment_created': datetime.datetime(2020, 8, 16, 16, 56, 13, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 471593119, 'comment_body': 'I have added tests for this now :)', 'comment_created': datetime.datetime(2020, 8, 17, 16, 22, 52, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 471593549, 'comment_body': 'I have changed it.', 'comment_created': datetime.datetime(2020, 8, 17, 16, 23, 37, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 471594533, 'comment_body': 'Ah, I missed these. I have added them now.', 'comment_created': datetime.datetime(2020, 8, 17, 16, 25, 14, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}, {'comment_id': 472309092, 'comment_body': 'What about instead always using both?\r\nthe convention used elsewhere is to combine summary + description in a single text (and avoiding redundancies too).\r\nSee https://github.com/nexB/scancode-toolkit/blob/62fc91d64d59aac202ebe610c7e2ce46ae70b23f/src/packagedcode/rubygems.py#L294\r\nThis could be refined to not include the summary/short desc part the long description already starts with the shorter summary. ', 'comment_created': datetime.datetime(2020, 8, 18, 16, 3, 6, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 472409117, 'comment_body': 'Yes, this will be good idea. :)', 'comment_created': datetime.datetime(2020, 8, 18, 18, 49, 56, tzinfo=datetime.timezone.utc), 'commenter': 'rpotter12', 'type': 'User'}]","[{'commit_sha': '11cac3dc3744c2c6c2e7064167ffdc6512fbaaad', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99e5400c45c9ae407458b8f27744799e7e502c3b', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c72eded04514fd3f6e8f9a906d6d1519ec3f2f3d', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b8c1843ae95a36328171f94b2f270935497f8ae3', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f14f1c40c2f8936babf2fbd99d732f99585bbb75', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36ddee218cd026e1f60d72ce884d025a13c73c91', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39b63fe79cffe5e27c524ccf5920e82c948e9a6c', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d618f2572f4ef999ed818fc99b9fc3e5d629e15', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f1176b7991412467d2cde0442949e09cc8c4f41', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '77a2e7468986439d915e9110bc144522d9c7f1f7', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6d1f64e5caf6db37313badaf2d5230b1dc36182', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '639bf8d7e27db6c1d387662373b13ad301d65e07', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9421953b00a30c564486376488cc8b906b69da43', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cfd6ee0e7c16fc682e809aff3cfd5862c4355d13', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0dc733e7f95dab6495ed634ea289357524c27efc', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd94f81611f9c0a681094bf82a85c132147367a90', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e19430979694cda7edb81d527ba7744c622ca44f', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e2ca75d90f3e6b4ae576ab58b4f7160859af11db', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e141d5d128abaaf76be96fbc799d08e3a3045550', 'committer_username': 'rpotter12', 'committer_name': 'Rohit Potter', 'committer_email': 'rohitpotter12@gmail.com', 'commit_date': datetime.datetime(2017, 12, 7, 20, 11, 11, tzinfo=datetime.timezone.utc)}]",Rohit Potter,34352567,rohitpotter12@gmail.com,User,,63,,22,109

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
38373338,scancode-toolkit,aboutcode-org/scancode-toolkit,Python,538,2048,73,375,11182,1054,36,29,"[{'id': 487413789, 'number': 2230, 'closed': datetime.datetime(2020, 9, 21, 16, 5, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 15, 16, 25, 18, tzinfo=datetime.timezone.utc), 'time_taken': 517228.0, 'time_delta': '5 days, 23:40:28', 'additions': 180, 'deletions': 53, 'state': 'closed'}, {'id': 470768525, 'number': 2169, 'closed': datetime.datetime(2020, 8, 20, 15, 28, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 20, 8, 59, 19, tzinfo=datetime.timezone.utc), 'time_taken': 23364.0, 'time_delta': '6:29:24', 'additions': 43, 'deletions': 13, 'state': 'closed'}, {'id': 465108474, 'number': 2156, 'closed': datetime.datetime(2020, 8, 18, 20, 20, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 9, 5, 13, 26, tzinfo=datetime.timezone.utc), 'time_taken': 832025.0, 'time_delta': '9 days, 15:07:05', 'additions': 1849, 'deletions': 0, 'state': 'closed'}, {'id': 461772161, 'number': 2153, 'closed': datetime.datetime(2020, 8, 12, 12, 49, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 2, 7, 25, 36, tzinfo=datetime.timezone.utc), 'time_taken': 883407.0, 'time_delta': '10 days, 5:23:27', 'additions': 512, 'deletions': 33, 'state': 'closed'}, {'id': 460840650, 'number': 2152, 'closed': datetime.datetime(2020, 8, 14, 18, 6, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 1, 6, 30, 55, tzinfo=datetime.timezone.utc), 'time_taken': 1164910.0, 'time_delta': '13 days, 11:35:10', 'additions': 218, 'deletions': 290, 'state': 'closed'}, {'id': 456764786, 'number': 2133, 'closed': datetime.datetime(2020, 7, 31, 19, 45, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 26, 15, 23, 47, tzinfo=datetime.timezone.utc), 'time_taken': 447727.0, 'time_delta': '5 days, 4:22:07', 'additions': 533, 'deletions': 40, 'state': 'closed'}, {'id': 456691984, 'number': 2132, 'closed': datetime.datetime(2020, 7, 26, 9, 39, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 26, 2, 28, tzinfo=datetime.timezone.utc), 'time_taken': 25861.0, 'time_delta': '7:11:01', 'additions': 7, 'deletions': 15, 'state': 'closed'}, {'id': 456052110, 'number': 2128, 'closed': datetime.datetime(2020, 7, 26, 15, 4, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 24, 3, 15, 34, tzinfo=datetime.timezone.utc), 'time_taken': 215332.0, 'time_delta': '2 days, 11:48:52', 'additions': 734, 'deletions': 0, 'state': 'closed'}, {'id': 448620725, 'number': 2116, 'closed': datetime.datetime(2020, 7, 22, 20, 46, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 14, 3, 30, 49, tzinfo=datetime.timezone.utc), 'time_taken': 753355.0, 'time_delta': '8 days, 17:15:55', 'additions': 1216, 'deletions': 20, 'state': 'closed'}, {'id': 441165118, 'number': 2097, 'closed': datetime.datetime(2020, 7, 22, 20, 42, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 29, 2, 48, 14, tzinfo=datetime.timezone.utc), 'time_taken': 2051627.0, 'time_delta': '23 days, 17:53:47', 'additions': 750, 'deletions': 0, 'state': 'closed'}, {'id': 440340255, 'number': 2096, 'closed': datetime.datetime(2020, 6, 26, 21, 50, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 26, 1, 56, 37, tzinfo=datetime.timezone.utc), 'time_taken': 71662.0, 'time_delta': '19:54:22', 'additions': 1277, 'deletions': 0, 'state': 'closed'}, {'id': 437474660, 'number': 2078, 'closed': datetime.datetime(2020, 7, 13, 14, 51, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 20, 23, 49, 30, tzinfo=datetime.timezone.utc), 'time_taken': 1954942.0, 'time_delta': '22 days, 15:02:22', 'additions': 571, 'deletions': 27, 'state': 'closed'}, {'id': 437343404, 'number': 2077, 'closed': datetime.datetime(2020, 6, 20, 23, 39, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 20, 0, 58, tzinfo=datetime.timezone.utc), 'time_taken': 81674.0, 'time_delta': '22:41:14', 'additions': 0, 'deletions': 0, 'state': 'closed'}, {'id': 437320662, 'number': 2076, 'closed': datetime.datetime(2020, 6, 19, 23, 29, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 19, 22, 38, 45, tzinfo=datetime.timezone.utc), 'time_taken': 3021.0, 'time_delta': '0:50:21', 'additions': 0, 'deletions': 0, 'state': 'closed'}, {'id': 436782180, 'number': 2075, 'closed': datetime.datetime(2020, 9, 3, 10, 30, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 18, 21, 55, 12, tzinfo=datetime.timezone.utc), 'time_taken': 6611731.0, 'time_delta': '76 days, 12:35:31', 'additions': 2007, 'deletions': 440, 'state': 'closed'}, {'id': 434072605, 'number': 2067, 'closed': datetime.datetime(2020, 9, 3, 11, 32, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 13, 23, 36, 32, tzinfo=datetime.timezone.utc), 'time_taken': 7041373.0, 'time_delta': '81 days, 11:56:13', 'additions': 313, 'deletions': 4, 'state': 'closed'}, {'id': 423525198, 'number': 2047, 'closed': datetime.datetime(2020, 6, 19, 19, 12, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 26, 23, 58, 40, tzinfo=datetime.timezone.utc), 'time_taken': 2056423.0, 'time_delta': '23 days, 19:13:43', 'additions': 1048, 'deletions': 624, 'state': 'closed'}, {'id': 391335495, 'number': 1981, 'closed': datetime.datetime(2020, 9, 3, 11, 36, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 20, 3, 41, 54, tzinfo=datetime.timezone.utc), 'time_taken': 14457252.0, 'time_delta': '167 days, 7:54:12', 'additions': 554, 'deletions': 0, 'state': 'closed'}, {'id': 388054541, 'number': 1975, 'closed': datetime.datetime(2020, 3, 20, 3, 45, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 13, 23, 18, 44, tzinfo=datetime.timezone.utc), 'time_taken': 534381.0, 'time_delta': '6 days, 4:26:21', 'additions': 491, 'deletions': 0, 'state': 'closed'}, {'id': 385411547, 'number': 1961, 'closed': datetime.datetime(2020, 3, 10, 10, 20, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 9, 6, 40, 1, tzinfo=datetime.timezone.utc), 'time_taken': 99612.0, 'time_delta': '1 day, 3:40:12', 'additions': 0, 'deletions': 0, 'state': 'closed'}, {'id': 385232528, 'number': 1960, 'closed': datetime.datetime(2020, 5, 9, 19, 17, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 8, 6, 30, 37, tzinfo=datetime.timezone.utc), 'time_taken': 5402800.0, 'time_delta': '62 days, 12:46:40', 'additions': 6, 'deletions': 3, 'state': 'closed'}, {'id': 385038804, 'number': 1955, 'closed': datetime.datetime(2020, 6, 16, 10, 28, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 6, 21, 55, 48, tzinfo=datetime.timezone.utc), 'time_taken': 8771588.0, 'time_delta': '101 days, 12:33:08', 'additions': 25, 'deletions': 23, 'state': 'closed'}]"
44900014,gemfileparser,gemfileparser/gemfileparser,Python,6,2,5,4,85,5,2,0,"[{'id': 469440510, 'number': 13, 'closed': datetime.datetime(2020, 8, 18, 14, 43, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 18, 11, 37, 43, tzinfo=datetime.timezone.utc), 'time_taken': 11156.0, 'time_delta': '3:05:56', 'additions': 8, 'deletions': 8, 'state': 'closed'}, {'id': 456725964, 'number': 11, 'closed': datetime.datetime(2020, 7, 26, 9, 37, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 26, 9, 30, 20, tzinfo=datetime.timezone.utc), 'time_taken': 453.0, 'time_delta': '0:07:33', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 456611054, 'number': 9, 'closed': datetime.datetime(2020, 7, 26, 9, 23, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 25, 12, 43, 8, tzinfo=datetime.timezone.utc), 'time_taken': 74413.0, 'time_delta': '20:40:13', 'additions': 17, 'deletions': 4, 'state': 'closed'}]"
