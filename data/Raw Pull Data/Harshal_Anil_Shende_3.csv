pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
672787349,[RF] Pythonizations for RooFit DecayType enum and refactored existing pythonizations,"# This Pull request:

## Changes or fixes:

## Checklist:

- [x] tested changes locally
- [X] updated the docs (if necessary)

This PR fixes # 

",True,8467,https://api.github.com/repos/root-project/root/pulls/8467,https://github.com/root-project/root/pull/8467,closed,978,287,76,2,7,0,2,1,"[{'name': 'in:PyROOT'}, {'name': 'in:RooFit/RooStats'}]",2021-06-17 16:10:21+00:00,2021-06-18 08:18:21+00:00,58080.0,16:08:00,[],"[{'commit_sha': 'f2f406069639e4994954a9e82f6d34f69a3646e4', 'committer_username': 'harshal0815', 'committer_name': 'Harshal Shende', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 27, 14, 43, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e801de0bcc2c9c9699c3214e88c1d04d378dde6', 'committer_username': 'harshal0815', 'committer_name': 'Harshal Shende', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 27, 14, 43, 54, tzinfo=datetime.timezone.utc)}]",Harshal Shende,59287624,,User,,25,,54,27
677487208,[RF] Pythonization of RooGlobalFunc Functions in RooFit,"# This Pull request:
- Pythonization of RooGlobalFunc Functions
- Implementing matplotlib Color/style conventions 
- Pythonization of Tutorial files

## Checklist:

- [x] tested changes locally
- [x] updated the docs (if necessary)


",True,8536,https://api.github.com/repos/root-project/root/pulls/8536,https://github.com/root-project/root/pull/8536,closed,398,141,42,2,10,11,2,1,"[{'name': 'in:PyROOT'}, {'name': 'in:RooFit/RooStats'}]",2021-06-24 22:46:49+00:00,2021-07-01 08:26:01+00:00,553152.0,"6 days, 9:39:12","[{'comment_id': 658728305, 'comment_body': 'What about not making `self._pythonization` a member of the facade and just do here, in this property, `from .pythonization._roofit import pythonize_roofit_namespace`? See a similar import above in this file `from ._application import PyROOTApplication`.', 'comment_created': datetime.datetime(2021, 6, 25, 12, 33, 29, tzinfo=datetime.timezone.utc), 'commenter': 'etejedor', 'type': 'User'}, {'comment_id': 658739169, 'comment_body': ""I would've just done the import inside each function below and get the same laziness.\r\n\r\nI wonder if the extra import cost is anyway negligible - the link you provide here made a test with Python2.3 (!), so a lot of water has gone under the bridge :smile: "", 'comment_created': datetime.datetime(2021, 6, 25, 12, 51, 25, tzinfo=datetime.timezone.utc), 'commenter': 'etejedor', 'type': 'User'}, {'comment_id': 658742339, 'comment_body': 'Note that you can also compare against `libcppyy.CPPOverload`, which is the type itself, instead of comparing by name. So `if isinstance(func, CPPOverload)`', 'comment_created': datetime.datetime(2021, 6, 25, 12, 56, 17, tzinfo=datetime.timezone.utc), 'commenter': 'etejedor', 'type': 'User'}, {'comment_id': 658742543, 'comment_body': 'Why this?', 'comment_created': datetime.datetime(2021, 6, 25, 12, 56, 37, tzinfo=datetime.timezone.utc), 'commenter': 'etejedor', 'type': 'User'}, {'comment_id': 658744583, 'comment_body': 'Perhaps some docs here would be good? What kind of lookups in the ROOT module does this function handle and for what purpose?', 'comment_created': datetime.datetime(2021, 6, 25, 12, 59, 54, tzinfo=datetime.timezone.utc), 'commenter': 'etejedor', 'type': 'User'}, {'comment_id': 660588244, 'comment_body': ""I think from this answer it's still not very clear for someone who is not that familiar with RooFit. I think it's better to even add some comments to the code explaining what this is about. Explaining with an example is always good too, I would use this example:\r\n```Python\r\npdf.plotOn(frame, ROOT.RooFit.MoveToBack())\r\n```\r\nThen you explain why this needs special consideration in the keyword argument pythonization and what you did in this PR to enable this syntax:\r\n```Python\r\npdf.plotOn(frame, MoveToBack=True)\r\n```"", 'comment_created': datetime.datetime(2021, 6, 29, 12, 55, 37, tzinfo=datetime.timezone.utc), 'commenter': 'guitargeek', 'type': 'User'}, {'comment_id': 660602050, 'comment_body': '@guitargeek Sir, Should we add docstring instead of comment?\r\n', 'comment_created': datetime.datetime(2021, 6, 29, 13, 11, 58, tzinfo=datetime.timezone.utc), 'commenter': 'harshal0815', 'type': 'User'}, {'comment_id': 660602751, 'comment_body': 'Hi @Harshalzzzzzzz, I think this is not resolved yet. You added this explanation:\r\n```Python\r\n""""""Helper function to pythonize arguments based on the matplotlib color/style conventions.""""""\r\n```\r\nI think it\'s better to have a more general explanation with an example, and a dedicated sentence to explain what the lookup map is for (having a map to translate matplotlib color/linestyle names to ROOT color/linestyle names is indeed one application). The example could be that you want to make it possible to pass string values instead of enum values that have to be retrieved from the ROOT module:\r\n```Python\r\npdf.plotOn(frame, LineColor=ROOT.kOrange) # default bindings\r\npdf.plotOn(frame, LineColor=""kOrange"") # possible with your pythonizations\r\n```', 'comment_created': datetime.datetime(2021, 6, 29, 13, 12, 46, tzinfo=datetime.timezone.utc), 'commenter': 'guitargeek', 'type': 'User'}, {'comment_id': 660605312, 'comment_body': ""This is more a place for comments, because it's to explain a very local piece of code to developers that might read it."", 'comment_created': datetime.datetime(2021, 6, 29, 13, 15, 38, tzinfo=datetime.timezone.utc), 'commenter': 'guitargeek', 'type': 'User'}, {'comment_id': 660645775, 'comment_body': 'wong indentation (before it was correct, should be one level more) also in `YVar` and `ZVar`.', 'comment_created': datetime.datetime(2021, 6, 29, 13, 58, 53, tzinfo=datetime.timezone.utc), 'commenter': 'guitargeek', 'type': 'User'}, {'comment_id': 661240840, 'comment_body': 'Can we do this import before the try (i.e. at the very beginning of this property function)? This way if there is an exception in the try block we know for sure it comes from the pythonizor function.', 'comment_created': datetime.datetime(2021, 6, 30, 8, 23, 41, tzinfo=datetime.timezone.utc), 'commenter': 'etejedor', 'type': 'User'}]","[{'commit_sha': 'f126def9c52d5f50c86bb25bb86acbe3acbceecb', 'committer_username': 'harshal0815', 'committer_name': 'Harshal Shende', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 27, 14, 43, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aabfe064bb51b581205f7e82d6a6d1d5a265c270', 'committer_username': 'harshal0815', 'committer_name': 'Harshal Shende', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 27, 14, 43, 54, tzinfo=datetime.timezone.utc)}]",Harshal Shende,59287624,,User,,25,,54,27
681589523,[RF] Translated RooFit tutorial files,"# This Pull request:
- Translation of RooFit tutorial files based on this issue https://github.com/root-project/root/issues/8523

## Changes or fixes:


## Checklist:

- [x] tested changes locally
- [x] updated the docs (if necessary)

This PR fixes # 

",True,8584,https://api.github.com/repos/root-project/root/pulls/8584,https://github.com/root-project/root/pull/8584,closed,527,7,5,1,9,4,2,1,"[{'name': 'in:PyROOT'}, {'name': 'in:RooFit/RooStats'}]",2021-07-01 08:01:49+00:00,2021-07-01 17:08:42+00:00,32813.0,9:06:53,"[{'comment_id': 662136806, 'comment_body': 'You can\'t concatenate `str` with `double`, and there are also some additional newlines here that are not in the C++ version. What about:\r\n```Python\r\nprint(""Asig [normal ] = {} +/- {}"".format(Asig0.getVal(), Asig0.getError()))\r\nprint(""Asig [BB     ] = {} +/- {}"".format(Asig1.getVal(), Asig1.getError()))\r\nprint(""Asig [BBlight] = {} +/- {}"".format(Asig2.getVal(), Asig2.getError()))\r\n```', 'comment_created': datetime.datetime(2021, 7, 1, 9, 33, 33, tzinfo=datetime.timezone.utc), 'commenter': 'guitargeek', 'type': 'User'}, {'comment_id': 662138368, 'comment_body': 'Before the ownership issues are solved in the backend, you have to define the components set explicitly and give it a name:\r\n```Python\r\np_ph_sig2_set = ROOT.RooArgSet(p_ph_sig2)\r\np_ph_bkg2_set = ROOT.RooArgSet(p_ph_bkg2)\r\nmodel2.plotOn(frame, Components=p_ph_sig2_set, LineColor=""kAzure"")\r\nmodel2.plotOn(frame, Components=p_ph_bkg2_set, LineColor=""r"")\r\n```', 'comment_created': datetime.datetime(2021, 7, 1, 9, 35, 38, tzinfo=datetime.timezone.utc), 'commenter': 'guitargeek', 'type': 'User'}, {'comment_id': 662138917, 'comment_body': 'Before the ownership issues are solved in the backend, you have to define the components set explicitly and give it a name (there is also another occurrence of this below):\r\n```Python\r\np_ph_sig1_set = ROOT.RooArgSet(p_ph_sig1)\r\np_ph_bkg1_set = ROOT.RooArgSet(p_ph_bkg1)\r\nmodel1.plotOn(frame, Components=p_ph_sig1_set, LineColor=""kAzure"")\r\nmodel1.plotOn(frame, Components=p_ph_bkg1_set, LineColor=""r"")\r\n```', 'comment_created': datetime.datetime(2021, 7, 1, 9, 36, 27, tzinfo=datetime.timezone.utc), 'commenter': 'guitargeek', 'type': 'User'}, {'comment_id': 662282055, 'comment_body': 'The test is failing because the `RooCustomizer` needs to be deleted first, which is not guaranteed by python. You need to add `del cust` at the end of the script, similar to here:\r\nhttps://github.com/root-project/root/blob/master/tutorials/roofit/rf207_comptools.py#L113', 'comment_created': datetime.datetime(2021, 7, 1, 13, 19, 44, tzinfo=datetime.timezone.utc), 'commenter': 'guitargeek', 'type': 'User'}]","[{'commit_sha': 'fab78f3a3869ab7ce773d0f5ee6108f1f1daf1d6', 'committer_username': 'harshal0815', 'committer_name': 'Harshal Shende', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 27, 14, 43, 54, tzinfo=datetime.timezone.utc)}]",Harshal Shende,59287624,,User,,25,,54,27
693853415,[RF] Translated rf_408_RDataFrameToRooFit.C to python,"# This Pull request:

- Translated rf_408_RDataFrameToRooFit.C
- Changed signature of constructor to take RooAbsArg by reference.
- Changed ROOT.RooArgList in args to accept a simple Python list.

## Changes or fixes:


## Checklist:

- [x] tested changes locally
- [x] updated the docs (if necessary)

This PR fixes # 

",True,8705,https://api.github.com/repos/root-project/root/pulls/8705,https://github.com/root-project/root/pull/8705,closed,225,168,63,3,15,3,2,1,"[{'name': 'in:PyROOT'}, {'name': 'in:RooFit/RooStats'}]",2021-07-20 21:14:34+00:00,2021-07-26 09:41:32+00:00,476818.0,"5 days, 12:26:58","[{'comment_id': 673888502, 'comment_body': '```suggestion\r\npx = ROOT.RooPolynomial(""px"", ""px"", x, [0.0])\r\npy = ROOT.RooPolynomial(""py"", ""py"", y, [0.0])\r\n```\r\nYou have to explicitly pass floating point numbers if you want to use the implicit `RooConst` feature. Otherwise, the zero is interpreted as a `nullptr` and we\'ll get segfaults.\r\n\r\nThanks for finding this out by the way, by trying to pass the integers! For this PR, you should change the `0` to `0.0` to make it work, but as a next step for another PR we definitely have to find a way to get a nicer error when this `nullptr` confusion happens, or completely avoid the error.', 'comment_created': datetime.datetime(2021, 7, 21, 11, 26, 2, tzinfo=datetime.timezone.utc), 'commenter': 'guitargeek', 'type': 'User'}, {'comment_id': 673891166, 'comment_body': '```suggestion\r\n    ""model"", ""model"", x, [0.0, 0.5, -0.1]\r\n```\r\nSame problem as in rf313_paramranges.py.\r\n\r\nBy the way did you remember to run `black --line-length=120`? I\'m surprised that the code formatting didn\'t put the whole `RooChebychev` construction in one line.', 'comment_created': datetime.datetime(2021, 7, 21, 11, 30, 33, tzinfo=datetime.timezone.utc), 'commenter': 'guitargeek', 'type': 'User'}, {'comment_id': 673899440, 'comment_body': '```suggestion\r\n    [1.0, -0.2, 3.0],\r\n```', 'comment_created': datetime.datetime(2021, 7, 21, 11, 44, 36, tzinfo=datetime.timezone.utc), 'commenter': 'guitargeek', 'type': 'User'}]","[{'commit_sha': 'f9ab68e141f916c48d7a2640b4579590d9f7b115', 'committer_username': 'harshal0815', 'committer_name': 'Harshal Shende', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 27, 14, 43, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c40b3a94fd73d7693ba7aba3776b328ee19f961', 'committer_username': 'harshal0815', 'committer_name': 'Harshal Shende', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 27, 14, 43, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bbab2bfd5ab67584e9bba265fba8aef2a58213b9', 'committer_username': 'harshal0815', 'committer_name': 'Harshal Shende', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 27, 14, 43, 54, tzinfo=datetime.timezone.utc)}]",Harshal Shende,59287624,,User,,25,,54,27
689880794,"[RF] Dictionary, RooCategory Pythonizations for RooFit","# This Pull request:

## Changes or fixes:
- Dictionary pythonizations for std::map constructors ( RooDataHist, RooCategory) 
- Pythonization and formatting of tutorial files

## Checklist:

- [x] tested changes locally
- [x] updated the docs (if necessary)

This PR fixes # 

",True,8669,https://api.github.com/repos/root-project/root/pulls/8669,https://github.com/root-project/root/pull/8669,closed,231,70,15,2,11,16,3,2,"[{'name': 'improvement'}, {'name': 'in:PyROOT'}, {'name': 'in:RooFit/RooStats'}]",2021-07-14 12:43:05+00:00,2021-07-30 09:22:23+00:00,1370358.0,"15 days, 20:39:18","[{'comment_id': 670432413, 'comment_body': 'I guess you are trying to pythonize this overload, right?\r\n\r\nhttps://root.cern.ch/doc/master/classRooCategory.html#ae63ae78231765d184b7a839c74746a49\r\n\r\nThen I would just check if the third positional argument is a dictionary, if yes turn it into a map, otherwise just fall back to the default constructor (no need to iterate).', 'comment_created': datetime.datetime(2021, 7, 15, 12, 52, 15, tzinfo=datetime.timezone.utc), 'commenter': 'etejedor', 'type': 'User'}, {'comment_id': 670435500, 'comment_body': ""I believe this function should do a check of the types of the keys and values of the dictionary you are about to convert. If they don't all match the types of the template argument, we should error out in a meaningful way to the user, saying that they didn't provide the right types in the dictionary (here we would just crash because the `emplace` operation would fail due to the types of its arguments)."", 'comment_created': datetime.datetime(2021, 7, 15, 12, 56, 8, tzinfo=datetime.timezone.utc), 'commenter': 'etejedor', 'type': 'User'}, {'comment_id': 670438133, 'comment_body': ""Related to one of my previous comments, here you are doing a check of the types in the dictionary to error out in a more meaningful way. But this is inconsistent with what you do in `RooCategory` (there you don't do any check at all). Also, here you are only checking the types of the values to match the two overloads you are targeting, but you don't check the keys.\r\nIn summary, I think these checks and the corresponding error should be done inside `_dict_to_std_map` and thus cover all the classes you are pythonizing here."", 'comment_created': datetime.datetime(2021, 7, 15, 12, 59, 33, tzinfo=datetime.timezone.utc), 'commenter': 'etejedor', 'type': 'User'}, {'comment_id': 670439018, 'comment_body': ""Same comment as for `RooCategory`: I would not iterate but just check directly the argument that, if it's a Python dictionary, we want to convert."", 'comment_created': datetime.datetime(2021, 7, 15, 13, 0, 43, tzinfo=datetime.timezone.utc), 'commenter': 'etejedor', 'type': 'User'}, {'comment_id': 670440196, 'comment_body': 'I believe my previous comments also apply to the three functions defined here.', 'comment_created': datetime.datetime(2021, 7, 15, 13, 2, 14, tzinfo=datetime.timezone.utc), 'commenter': 'etejedor', 'type': 'User'}, {'comment_id': 671040759, 'comment_body': ""Shouldn't these two lists be a parameter of `_dict_to_std_map`? For example, in the case of `RooCategory`, you only allow `std::map< std::string, int >` IIUC. Depending on the caller, you would pass different lists of allowed keys and values. And perhaps it shouldn't be two lists but a dictionary instead: given a certain key type, the value types can be X and Y (to prevent the user from passing a wrong combination of key-value type)."", 'comment_created': datetime.datetime(2021, 7, 16, 7, 51, 14, tzinfo=datetime.timezone.utc), 'commenter': 'etejedor', 'type': 'User'}, {'comment_id': 671041119, 'comment_body': 'Thanks this looks great! (and all the other callers of `_dict_to_std_map` below)', 'comment_created': datetime.datetime(2021, 7, 16, 7, 51, 43, tzinfo=datetime.timezone.utc), 'commenter': 'etejedor', 'type': 'User'}, {'comment_id': 671128225, 'comment_body': 'Hi @etejedor, thanks for the comment! Indeed, the allowed types should be passed by the caller, remember @Harshalzzzzzzz we discussed this on mattermost :)\r\n\r\nI also like the idea of passing the dictionary with the allowed value types for each key type. But since there are not so many allowed key-value pairs for each dictionary anyway, the code might even be more readable if you just pass a list of allowed template parameters.\r\n\r\nSo for example, for [RooFit::Import()](https://github.com/root-project/root/blob/master/roofit/roofitcore/inc/RooGlobalFunc.h#L141) the call could look like:\r\n```Python\r\n_dict_to_std_map(args[0], allowed_template_args=[""std::string,TH1*"", ""std::string,RooDataHist*"", ""std::string, RooDataSet*""])\r\n```\r\nFor the other callers, the `allowed_template_args` would be:\r\n* RooCategory : `[""std::string, int""]`\r\n* RooDataHist : `[""std::string,TH1*"", ""std::string,RooDataHist*""]`\r\n* Slice : `[""RooCategory*,std::string""]`\r\n* Link : `[""std::string,RooAbsData*""]`\r\n\r\nOf course that also means that the implementation of `_dict_to_std_map` needs to be changed a bit. Does this sound like a good interface to you @etejedor? If you have any question about the implementation @Harshalzzzzzzz, just ping me on mattermost.', 'comment_created': datetime.datetime(2021, 7, 16, 10, 7, 57, tzinfo=datetime.timezone.utc), 'commenter': 'guitargeek', 'type': 'User'}, {'comment_id': 671160701, 'comment_body': 'I think using lists has some repetition that could be avoided (e.g. `std::string` is always the key type for `RooFit::Import`). With a dictionary you iterate first on the keys, find the matching key type, then use the dictionary to find the allowed value types for that key type and iterate on those to find the matching value type, if any. With the lists option you would iterate on the pairs, split the types, compare both for key and value, then pass to the next pair if no match (this potentially has more comparisons for the key type in e.g. in `Roofit:Import`, since you might be comparing the keys to string more than once).\r\n', 'comment_created': datetime.datetime(2021, 7, 16, 11, 7, 36, tzinfo=datetime.timezone.utc), 'commenter': 'etejedor', 'type': 'User'}, {'comment_id': 671175849, 'comment_body': ""Okay that it a good point with the less comparisons, let's go for the dictionary then :+1:"", 'comment_created': datetime.datetime(2021, 7, 16, 11, 36, 45, tzinfo=datetime.timezone.utc), 'commenter': 'guitargeek', 'type': 'User'}, {'comment_id': 671266779, 'comment_body': '@etejedor @guitargeek \r\nSir I was thinking if we could pass two lists in _dict_to_std_map rather than a dictionary, something like this :\r\n``` \r\n_dict_to_std_map(args[0], allowed_key_types=[""std::string""],  allowed_value_types=[""TH1*"",""RooDataHist*"", ""RooDataSet*""])\r\n```\r\nWe wouldnt have to check every key and value as we would have to if we pass a dict', 'comment_created': datetime.datetime(2021, 7, 16, 13, 45, 39, tzinfo=datetime.timezone.utc), 'commenter': 'harshal0815', 'type': 'User'}, {'comment_id': 671269914, 'comment_body': ""@Harshalzzzzzzz this could be an alternative but it only works if there's never multiple keys and multiple values (the dictionary provides you that mapping keys to possible values)."", 'comment_created': datetime.datetime(2021, 7, 16, 13, 49, 53, tzinfo=datetime.timezone.utc), 'commenter': 'etejedor', 'type': 'User'}, {'comment_id': 679163464, 'comment_body': '```suggestion\r\n        self._init(*args, **kwargs)\r\n```\r\nYou got the indentation wrong when updating the PR.', 'comment_created': datetime.datetime(2021, 7, 29, 13, 43, 2, tzinfo=datetime.timezone.utc), 'commenter': 'guitargeek', 'type': 'User'}, {'comment_id': 679167317, 'comment_body': ""I think it's okay as it is, because we check that everything is the correct type before in the function.\r\n\r\nHowever, I still get linker errors for some reason with this emplace :) Can you use the bracket operator instead, please? This works for me:\r\n```Python\r\narg_map[key] = value\r\n```"", 'comment_created': datetime.datetime(2021, 7, 29, 13, 47, 25, tzinfo=datetime.timezone.utc), 'commenter': 'guitargeek', 'type': 'User'}, {'comment_id': 679172070, 'comment_body': 'This is still not how @etejedor suggested it and how we discussed it.\r\n\r\nThe idea was that for each allowed key type, you have one ore more allowed value types in a list. This means you should have a nested loop, with the outer loop for the key type and the inner for the value type. In your current implementation, you are just looping over all possible value types and ignore the relation to the key type.\r\n\r\nTo speed things up a bit, here is how I would suggest to implement it, also with a more meaningful error message if no match for the value type is found:\r\n\r\n```Python\r\n    def prettyprint_str_list(l):\r\n        if len(l) == 1:\r\n            return l[0]\r\n        if len(l) == 2:\r\n            return l[0] + "" or "" + l[1]\r\n        return "", "".join(l[:-1]) + "", or "" + l[-1]\r\n\r\n\r\n    def get_template_args(import_dict):\r\n\r\n        key_type = None\r\n        value_type = None\r\n\r\n        def get_python_typenames(typenames):\r\n            return [get_python_class(t).__name__ for t in typenames]\r\n\r\n        for key_typename in allowed_val_dict.keys():\r\n            if all_of_class(import_dict, get_python_class(key_typename), True):\r\n                key_type = key_typename\r\n\r\n                if type(allowed_val_dict[key_typename]) == str:\r\n                    allowed_val_dict[key_typename] = [allowed_val_dict[key_typename]]\r\n\r\n                for val_typename in allowed_val_dict[key_typename]:\r\n                    if all_of_class(import_dict, get_python_class(val_typename), False):\r\n                        value_type = val_typename\r\n\r\n                if value_type is None:\r\n                    raise TypeError(\r\n                        ""All dictionary values must be of the same type, which can be either ""\r\n                        + prettyprint_str_list(get_python_typenames(allowed_val_dict[key_typename]))\r\n                        + "", given the key type "" + get_python_class(key_type).__name__ + "".""\r\n                    )\r\n\r\n        if key_type is None:\r\n            raise TypeError(\r\n                ""All dictionary keys must be of the same type, which can be either ""\r\n                + prettyprint_str_list(get_python_typenames(allowed_val_dict))\r\n                + "".""\r\n            )\r\n\r\n        return key_type + "","" + value_type\r\n```', 'comment_created': datetime.datetime(2021, 7, 29, 13, 52, 44, tzinfo=datetime.timezone.utc), 'commenter': 'guitargeek', 'type': 'User'}, {'comment_id': 679173215, 'comment_body': ""Please explain in the docstring the meaning of the parameters, in particular how `allowed_val_dict` is interpreted. It's probably best to explain this with a little example in the doc string."", 'comment_created': datetime.datetime(2021, 7, 29, 13, 54, 1, tzinfo=datetime.timezone.utc), 'commenter': 'guitargeek', 'type': 'User'}]","[{'commit_sha': '622a11d15e070ba874c5a02c7d48d306a1f7dd72', 'committer_username': 'harshal0815', 'committer_name': 'Harshal Shende', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 27, 14, 43, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3db12fa8cd162da16414a0129ead7d68433abaa4', 'committer_username': 'harshal0815', 'committer_name': 'Harshal Shende', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 27, 14, 43, 54, tzinfo=datetime.timezone.utc)}]",Harshal Shende,59287624,,User,,25,,54,27
704705612,[RF] Implemented RooWorkspace pythonizations,"# This Pull request:

## Changes or fixes:
- Implemented RooWorkspace pythonizations with bracket operator alternative for `RooWorkspace::obj()`
- Command argument pythonization for RooWorkspace::import()
- Pythonization of tutorial files

## Checklist:

- [x] tested changes locally
- [x] updated the docs (if necessary)

This PR fixes # 

",True,8803,https://api.github.com/repos/root-project/root/pulls/8803,https://github.com/root-project/root/pull/8803,closed,53,28,8,2,8,2,2,1,"[{'name': 'in:PyROOT'}, {'name': 'in:RooFit/RooStats'}]",2021-08-05 13:24:25+00:00,2021-08-05 18:36:18+00:00,18713.0,5:11:53,"[{'comment_id': 685040837, 'comment_body': 'No big deal but why not just adding this line to the implementation of `Import` above? Why the need of an extra injection of another function? Is it because you also expect the user to call `import` from Python and not `Import`?', 'comment_created': datetime.datetime(2021, 8, 9, 9, 26, 50, tzinfo=datetime.timezone.utc), 'commenter': 'etejedor', 'type': 'User'}, {'comment_id': 688563662, 'comment_body': ""@etejedor Yes Sir, since RooWorkspace.Import is a wrapper function generated by cppyy to avoid having a function with the keyword name import, we have't directly defined a function called import in the RooWorkspace mirror class because import is a Python keyword. So we actually have to define a Pythonization for RooWorkspace.import"", 'comment_created': datetime.datetime(2021, 8, 13, 14, 36, 26, tzinfo=datetime.timezone.utc), 'commenter': 'harshal0815', 'type': 'User'}]","[{'commit_sha': 'ad772ae07f306a60cd2e46d5bdb5b13e6c6868be', 'committer_username': 'harshal0815', 'committer_name': 'Harshal Shende', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 27, 14, 43, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a16f7291519c6b09eb432b75ce75e2bae63c74e3', 'committer_username': 'harshal0815', 'committer_name': 'Harshal Shende', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 27, 14, 43, 54, tzinfo=datetime.timezone.utc)}]",Harshal Shende,59287624,,User,,25,,54,27
715836987,[RF] Documentation for RooFit Pythonizations 259c30b,"# This Pull request:

## Changes or fixes:


## Checklist:

- [x] tested changes locally
- [x] updated the docs (if necessary)

This PR fixes # 

",True,8860,https://api.github.com/repos/root-project/root/pulls/8860,https://github.com/root-project/root/pull/8860,closed,746,515,21,2,5,0,2,1,"[{'name': 'in:PyROOT'}, {'name': 'in:RooFit/RooStats'}]",2021-08-19 11:10:19+00:00,2021-08-20 07:09:14+00:00,71935.0,19:58:55,[],"[{'commit_sha': '004bc44368f65ffb990cd26829b11a11635a225a', 'committer_username': 'harshal0815', 'committer_name': 'Harshal Shende', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 27, 14, 43, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17b146c450ed0ac259c9f84f98825c89c2be812f', 'committer_username': 'harshal0815', 'committer_name': 'Harshal Shende', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 27, 14, 43, 54, tzinfo=datetime.timezone.utc)}]",Harshal Shende,59287624,,User,,25,,54,27

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
10994345,root,root-project/root,C++,1248,2607,123,532,82387,817,17,279,"[{'id': 1093700823, 'number': 11617, 'closed': datetime.datetime(2022, 11, 24, 11, 2, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 20, 12, 12, 3, tzinfo=datetime.timezone.utc), 'time_taken': 3019844.0, 'time_delta': '34 days, 22:50:44', 'additions': 602, 'deletions': 2, 'state': 'closed'}, {'id': 1054767173, 'number': 11357, 'closed': datetime.datetime(2022, 11, 24, 11, 2, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 13, 14, 13, 13, tzinfo=datetime.timezone.utc), 'time_taken': 6209374.0, 'time_delta': '71 days, 20:49:34', 'additions': 622, 'deletions': 17, 'state': 'closed'}, {'id': 1054751278, 'number': 11356, 'closed': datetime.datetime(2022, 9, 13, 14, 2, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 13, 14, 1, 21, tzinfo=datetime.timezone.utc), 'time_taken': 93.0, 'time_delta': '0:01:33', 'additions': 1453, 'deletions': 1235, 'state': 'closed'}, {'id': 1051296364, 'number': 11336, 'closed': datetime.datetime(2022, 9, 9, 10, 3, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 9, 8, 55, 19, tzinfo=datetime.timezone.utc), 'time_taken': 4117.0, 'time_delta': '1:08:37', 'additions': 4, 'deletions': 5, 'state': 'closed'}, {'id': 1010919895, 'number': 11069, 'closed': datetime.datetime(2022, 9, 7, 14, 18, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 28, 14, 39, 53, tzinfo=datetime.timezone.utc), 'time_taken': 3541131.0, 'time_delta': '40 days, 23:38:51', 'additions': 1715, 'deletions': 24, 'state': 'closed'}, {'id': 715836987, 'number': 8860, 'closed': datetime.datetime(2021, 8, 20, 7, 9, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 19, 11, 10, 19, tzinfo=datetime.timezone.utc), 'time_taken': 71935.0, 'time_delta': '19:58:55', 'additions': 746, 'deletions': 515, 'state': 'closed'}, {'id': 704705612, 'number': 8803, 'closed': datetime.datetime(2021, 8, 5, 18, 36, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 5, 13, 24, 25, tzinfo=datetime.timezone.utc), 'time_taken': 18713.0, 'time_delta': '5:11:53', 'additions': 53, 'deletions': 28, 'state': 'closed'}, {'id': 693853415, 'number': 8705, 'closed': datetime.datetime(2021, 7, 26, 9, 41, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 20, 21, 14, 34, tzinfo=datetime.timezone.utc), 'time_taken': 476818.0, 'time_delta': '5 days, 12:26:58', 'additions': 225, 'deletions': 168, 'state': 'closed'}, {'id': 689880794, 'number': 8669, 'closed': datetime.datetime(2021, 7, 30, 9, 22, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 14, 12, 43, 5, tzinfo=datetime.timezone.utc), 'time_taken': 1370358.0, 'time_delta': '15 days, 20:39:18', 'additions': 231, 'deletions': 70, 'state': 'closed'}, {'id': 681589523, 'number': 8584, 'closed': datetime.datetime(2021, 7, 1, 17, 8, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 1, 8, 1, 49, tzinfo=datetime.timezone.utc), 'time_taken': 32813.0, 'time_delta': '9:06:53', 'additions': 527, 'deletions': 7, 'state': 'closed'}, {'id': 677487208, 'number': 8536, 'closed': datetime.datetime(2021, 7, 1, 8, 26, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 24, 22, 46, 49, tzinfo=datetime.timezone.utc), 'time_taken': 553152.0, 'time_delta': '6 days, 9:39:12', 'additions': 398, 'deletions': 141, 'state': 'closed'}, {'id': 672787349, 'number': 8467, 'closed': datetime.datetime(2021, 6, 18, 8, 18, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 17, 16, 10, 21, tzinfo=datetime.timezone.utc), 'time_taken': 58080.0, 'time_delta': '16:08:00', 'additions': 978, 'deletions': 287, 'state': 'closed'}, {'id': 668046380, 'number': 8413, 'closed': datetime.datetime(2021, 6, 12, 8, 22, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 11, 11, 39, 57, tzinfo=datetime.timezone.utc), 'time_taken': 74533.0, 'time_delta': '20:42:13', 'additions': 692, 'deletions': 1111, 'state': 'closed'}, {'id': 602060422, 'number': 7723, 'closed': datetime.datetime(2021, 3, 30, 13, 56, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 27, 12, 42, 7, tzinfo=datetime.timezone.utc), 'time_taken': 263636.0, 'time_delta': '3 days, 1:13:56', 'additions': 79, 'deletions': 7, 'state': 'closed'}, {'id': 602057771, 'number': 7722, 'closed': datetime.datetime(2021, 3, 29, 17, 31, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 27, 12, 19, 58, tzinfo=datetime.timezone.utc), 'time_taken': 191501.0, 'time_delta': '2 days, 5:11:41', 'additions': 123, 'deletions': 0, 'state': 'closed'}, {'id': 573454870, 'number': 7211, 'closed': datetime.datetime(2021, 2, 15, 10, 29, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 15, 10, 28, 32, tzinfo=datetime.timezone.utc), 'time_taken': 76.0, 'time_delta': '0:01:16', 'additions': 0, 'deletions': 0, 'state': 'closed'}, {'id': 568738797, 'number': 7142, 'closed': datetime.datetime(2021, 2, 17, 16, 26, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 6, 7, 26, 28, tzinfo=datetime.timezone.utc), 'time_taken': 982775.0, 'time_delta': '11 days, 8:59:35', 'additions': 27, 'deletions': 1, 'state': 'closed'}, {'id': 568729786, 'number': 7141, 'closed': datetime.datetime(2021, 3, 1, 8, 15, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 6, 6, 15, 29, tzinfo=datetime.timezone.utc), 'time_taken': 1994417.0, 'time_delta': '23 days, 2:00:17', 'additions': 42, 'deletions': 11, 'state': 'closed'}, {'id': 568333462, 'number': 7136, 'closed': datetime.datetime(2021, 2, 6, 5, 50, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 5, 12, 51, 56, tzinfo=datetime.timezone.utc), 'time_taken': 61108.0, 'time_delta': '16:58:28', 'additions': 52, 'deletions': 11, 'state': 'closed'}]"
